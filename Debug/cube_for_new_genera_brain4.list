
cube_for_new_genera_brain4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f584  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000884  0800f81c  0800f81c  0001f81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080100a0  080100a0  000200a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080100a8  080100a8  000200a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080100ac  080100ac  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000104  20000000  080100b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000112b0  20000108  080101b4  00030108  2**3
                  ALLOC
  8 ._user_heap_stack 0000c000  200113b8  080101b4  000313b8  2**0
                  ALLOC
  9 .RAM_D1       0007ecd8  24000000  24000000  00040000  2**5
                  ALLOC
 10 .RAM_D2       00000430  30000000  30000000  00040000  2**5
                  ALLOC
 11 .SDRAM        02000000  60000000  60000000  00040000  2**5
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
 13 .debug_info   00065f5e  00000000  00000000  00030132  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00008d6c  00000000  00000000  00096090  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0002c176  00000000  00000000  0009edfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00002b18  00000000  00000000  000caf78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000030f8  00000000  00000000  000cda90  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00042e37  00000000  00000000  000d0b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0002e3ae  00000000  00000000  001139bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0018b225  00000000  00000000  00141d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  002ccf92  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008008  00000000  00000000  002cd010  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000108 	.word	0x20000108
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800f804 	.word	0x0800f804

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2000010c 	.word	0x2000010c
 80002d4:	0800f804 	.word	0x0800f804

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80005d8:	4b10      	ldr	r3, [pc, #64]	; (800061c <HAL_InitTick+0x44>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b90b      	cbnz	r3, 80005e2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80005de:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005e0:	4770      	bx	lr
{
 80005e2:	b510      	push	{r4, lr}
 80005e4:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80005e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80005ee:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <HAL_InitTick+0x48>)
 80005f0:	6810      	ldr	r0, [r2, #0]
 80005f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80005f6:	f000 ff29 	bl	800144c <HAL_SYSTICK_Config>
 80005fa:	b968      	cbnz	r0, 8000618 <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005fc:	2c0f      	cmp	r4, #15
 80005fe:	d901      	bls.n	8000604 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000600:	2001      	movs	r0, #1
 8000602:	e00a      	b.n	800061a <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000604:	2200      	movs	r2, #0
 8000606:	4621      	mov	r1, r4
 8000608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800060c:	f000 fede 	bl	80013cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000610:	4b04      	ldr	r3, [pc, #16]	; (8000624 <HAL_InitTick+0x4c>)
 8000612:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000614:	2000      	movs	r0, #0
 8000616:	e000      	b.n	800061a <HAL_InitTick+0x42>
    return HAL_ERROR;
 8000618:	2001      	movs	r0, #1
}
 800061a:	bd10      	pop	{r4, pc}
 800061c:	20000000 	.word	0x20000000
 8000620:	20000010 	.word	0x20000010
 8000624:	20000004 	.word	0x20000004

08000628 <HAL_Init>:
{
 8000628:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800062a:	2003      	movs	r0, #3
 800062c:	f000 febc 	bl	80013a8 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000630:	f003 fbbe 	bl	8003db0 <HAL_RCC_GetSysClockFreq>
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <HAL_Init+0x4c>)
 8000636:	698b      	ldr	r3, [r1, #24]
 8000638:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800063c:	4a0e      	ldr	r2, [pc, #56]	; (8000678 <HAL_Init+0x50>)
 800063e:	5cd3      	ldrb	r3, [r2, r3]
 8000640:	f003 031f 	and.w	r3, r3, #31
 8000644:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000646:	698b      	ldr	r3, [r1, #24]
 8000648:	f003 030f 	and.w	r3, r3, #15
 800064c:	5cd3      	ldrb	r3, [r2, r3]
 800064e:	f003 031f 	and.w	r3, r3, #31
 8000652:	fa20 f303 	lsr.w	r3, r0, r3
 8000656:	4a09      	ldr	r2, [pc, #36]	; (800067c <HAL_Init+0x54>)
 8000658:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <HAL_Init+0x58>)
 800065c:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800065e:	2000      	movs	r0, #0
 8000660:	f7ff ffba 	bl	80005d8 <HAL_InitTick>
 8000664:	b110      	cbz	r0, 800066c <HAL_Init+0x44>
    return HAL_ERROR;
 8000666:	2401      	movs	r4, #1
}
 8000668:	4620      	mov	r0, r4
 800066a:	bd10      	pop	{r4, pc}
 800066c:	4604      	mov	r4, r0
  HAL_MspInit();
 800066e:	f00c f8f3 	bl	800c858 <HAL_MspInit>
  return HAL_OK;
 8000672:	e7f9      	b.n	8000668 <HAL_Init+0x40>
 8000674:	58024400 	.word	0x58024400
 8000678:	0800fca0 	.word	0x0800fca0
 800067c:	20000014 	.word	0x20000014
 8000680:	20000010 	.word	0x20000010

08000684 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000684:	4b03      	ldr	r3, [pc, #12]	; (8000694 <HAL_IncTick+0x10>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	4a03      	ldr	r2, [pc, #12]	; (8000698 <HAL_IncTick+0x14>)
 800068a:	6811      	ldr	r1, [r2, #0]
 800068c:	440b      	add	r3, r1
 800068e:	6013      	str	r3, [r2, #0]
}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000000 	.word	0x20000000
 8000698:	20000190 	.word	0x20000190

0800069c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800069c:	4b01      	ldr	r3, [pc, #4]	; (80006a4 <HAL_GetTick+0x8>)
 800069e:	6818      	ldr	r0, [r3, #0]
}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	20000190 	.word	0x20000190

080006a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006a8:	b538      	push	{r3, r4, r5, lr}
 80006aa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006ac:	f7ff fff6 	bl	800069c <HAL_GetTick>
 80006b0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006b2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80006b6:	d002      	beq.n	80006be <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80006b8:	4b04      	ldr	r3, [pc, #16]	; (80006cc <HAL_Delay+0x24>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006be:	f7ff ffed 	bl	800069c <HAL_GetTick>
 80006c2:	1b40      	subs	r0, r0, r5
 80006c4:	42a0      	cmp	r0, r4
 80006c6:	d3fa      	bcc.n	80006be <HAL_Delay+0x16>
  {
  }
}
 80006c8:	bd38      	pop	{r3, r4, r5, pc}
 80006ca:	bf00      	nop
 80006cc:	20000000 	.word	0x20000000

080006d0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80006d0:	4b01      	ldr	r3, [pc, #4]	; (80006d8 <HAL_GetREVID+0x8>)
 80006d2:	6818      	ldr	r0, [r3, #0]
}
 80006d4:	0c00      	lsrs	r0, r0, #16
 80006d6:	4770      	bx	lr
 80006d8:	5c001000 	.word	0x5c001000

080006dc <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 80006dc:	4a03      	ldr	r2, [pc, #12]	; (80006ec <HAL_SetFMCMemorySwappingConfig+0x10>)
 80006de:	6813      	ldr	r3, [r2, #0]
 80006e0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80006e4:	4318      	orrs	r0, r3
 80006e6:	6010      	str	r0, [r2, #0]
}
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	52004000 	.word	0x52004000

080006f0 <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80006f0:	4770      	bx	lr

080006f2 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80006f2:	4770      	bx	lr

080006f4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80006f4:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80006f6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80006f8:	f7ff fffb 	bl	80006f2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80006fc:	bd08      	pop	{r3, pc}

080006fe <HAL_ADC_ErrorCallback>:
}
 80006fe:	4770      	bx	lr

08000700 <ADC_DMAConvCplt>:
{
 8000700:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000702:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8000704:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000706:	f012 0f50 	tst.w	r2, #80	; 0x50
 800070a:	d131      	bne.n	8000770 <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800070c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800070e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000712:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	6811      	ldr	r1, [r2, #0]
 8000718:	f011 0f08 	tst.w	r1, #8
 800071c:	d014      	beq.n	8000748 <ADC_DMAConvCplt+0x48>
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800071e:	68d1      	ldr	r1, [r2, #12]
 8000720:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 8000724:	d120      	bne.n	8000768 <ADC_DMAConvCplt+0x68>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8000726:	68d2      	ldr	r2, [r2, #12]
 8000728:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800072c:	d11c      	bne.n	8000768 <ADC_DMAConvCplt+0x68>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800072e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000730:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000734:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000736:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000738:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 800073c:	d114      	bne.n	8000768 <ADC_DMAConvCplt+0x68>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800073e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000740:	f042 0201 	orr.w	r2, r2, #1
 8000744:	655a      	str	r2, [r3, #84]	; 0x54
 8000746:	e00f      	b.n	8000768 <ADC_DMAConvCplt+0x68>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8000748:	68d2      	ldr	r2, [r2, #12]
 800074a:	f012 0f03 	tst.w	r2, #3
 800074e:	d10b      	bne.n	8000768 <ADC_DMAConvCplt+0x68>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000750:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000752:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000756:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000758:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800075a:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 800075e:	d103      	bne.n	8000768 <ADC_DMAConvCplt+0x68>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000760:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000762:	f042 0201 	orr.w	r2, r2, #1
 8000766:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ffc1 	bl	80006f0 <HAL_ADC_ConvCpltCallback>
}
 800076e:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8000770:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000772:	f012 0f10 	tst.w	r2, #16
 8000776:	d103      	bne.n	8000780 <ADC_DMAConvCplt+0x80>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077c:	4798      	blx	r3
}
 800077e:	e7f6      	b.n	800076e <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffbc 	bl	80006fe <HAL_ADC_ErrorCallback>
 8000786:	e7f2      	b.n	800076e <ADC_DMAConvCplt+0x6e>

08000788 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8000788:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800078a:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800078c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800078e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000792:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000794:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000796:	f043 0304 	orr.w	r3, r3, #4
 800079a:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800079c:	f7ff ffaf 	bl	80006fe <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80007a0:	bd08      	pop	{r3, pc}
	...

080007a4 <HAL_ADC_ConfigChannel>:
{
 80007a4:	b4f0      	push	{r4, r5, r6, r7}
 80007a6:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 80007a8:	2200      	movs	r2, #0
 80007aa:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80007ac:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80007b0:	2a01      	cmp	r2, #1
 80007b2:	f000 823b 	beq.w	8000c2c <HAL_ADC_ConfigChannel+0x488>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2201      	movs	r2, #1
 80007ba:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80007be:	6804      	ldr	r4, [r0, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80007c0:	68a2      	ldr	r2, [r4, #8]
 80007c2:	f012 0204 	ands.w	r2, r2, #4
 80007c6:	d00a      	beq.n	80007de <HAL_ADC_ConfigChannel+0x3a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007c8:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80007ca:	f042 0220 	orr.w	r2, r2, #32
 80007ce:	6542      	str	r2, [r0, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80007d0:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80007d8:	b002      	add	sp, #8
 80007da:	bcf0      	pop	{r4, r5, r6, r7}
 80007dc:	4770      	bx	lr
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80007de:	6808      	ldr	r0, [r1, #0]
 80007e0:	f3c0 0513 	ubfx	r5, r0, #0, #20
 80007e4:	2d00      	cmp	r5, #0
 80007e6:	d150      	bne.n	800088a <HAL_ADC_ConfigChannel+0xe6>
 80007e8:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80007ec:	2501      	movs	r5, #1
 80007ee:	4085      	lsls	r5, r0
 80007f0:	69e0      	ldr	r0, [r4, #28]
 80007f2:	4328      	orrs	r0, r5
 80007f4:	61e0      	str	r0, [r4, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80007f6:	681f      	ldr	r7, [r3, #0]
 80007f8:	684e      	ldr	r6, [r1, #4]
 80007fa:	680d      	ldr	r5, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80007fc:	3730      	adds	r7, #48	; 0x30
 80007fe:	0a30      	lsrs	r0, r6, #8
 8000800:	0080      	lsls	r0, r0, #2
 8000802:	f000 000c 	and.w	r0, r0, #12
  MODIFY_REG(*preg,
 8000806:	583c      	ldr	r4, [r7, r0]
 8000808:	f006 061f 	and.w	r6, r6, #31
 800080c:	f04f 0c1f 	mov.w	ip, #31
 8000810:	fa0c fc06 	lsl.w	ip, ip, r6
 8000814:	ea24 040c 	bic.w	r4, r4, ip
 8000818:	f3c5 6584 	ubfx	r5, r5, #26, #5
 800081c:	40b5      	lsls	r5, r6
 800081e:	432c      	orrs	r4, r5
 8000820:	503c      	str	r4, [r7, r0]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000822:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000824:	6884      	ldr	r4, [r0, #8]
 8000826:	f014 0f04 	tst.w	r4, #4
 800082a:	d037      	beq.n	800089c <HAL_ADC_ConfigChannel+0xf8>
 800082c:	2401      	movs	r4, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800082e:	6885      	ldr	r5, [r0, #8]
 8000830:	f015 0f08 	tst.w	r5, #8
 8000834:	d034      	beq.n	80008a0 <HAL_ADC_ConfigChannel+0xfc>
 8000836:	2501      	movs	r5, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000838:	432c      	orrs	r4, r5
 800083a:	d165      	bne.n	8000908 <HAL_ADC_ConfigChannel+0x164>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800083c:	680f      	ldr	r7, [r1, #0]
 800083e:	688c      	ldr	r4, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000840:	f100 0514 	add.w	r5, r0, #20
 8000844:	0e78      	lsrs	r0, r7, #25
 8000846:	0080      	lsls	r0, r0, #2
 8000848:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 800084c:	582e      	ldr	r6, [r5, r0]
 800084e:	f3c7 5704 	ubfx	r7, r7, #20, #5
 8000852:	f04f 0c07 	mov.w	ip, #7
 8000856:	fa0c fc07 	lsl.w	ip, ip, r7
 800085a:	ea26 060c 	bic.w	r6, r6, ip
 800085e:	40bc      	lsls	r4, r7
 8000860:	4334      	orrs	r4, r6
 8000862:	502c      	str	r4, [r5, r0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000864:	48a9      	ldr	r0, [pc, #676]	; (8000b0c <HAL_ADC_ConfigChannel+0x368>)
 8000866:	6800      	ldr	r0, [r0, #0]
 8000868:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 800086c:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8000870:	d018      	beq.n	80008a4 <HAL_ADC_ConfigChannel+0x100>
 8000872:	681c      	ldr	r4, [r3, #0]
 8000874:	68e0      	ldr	r0, [r4, #12]
 8000876:	f010 0f10 	tst.w	r0, #16
 800087a:	d167      	bne.n	800094c <HAL_ADC_ConfigChannel+0x1a8>
 800087c:	6948      	ldr	r0, [r1, #20]
 800087e:	68e4      	ldr	r4, [r4, #12]
 8000880:	f3c4 0482 	ubfx	r4, r4, #2, #3
 8000884:	0064      	lsls	r4, r4, #1
 8000886:	40a0      	lsls	r0, r4
 8000888:	e013      	b.n	80008b2 <HAL_ADC_ConfigChannel+0x10e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800088a:	fa90 f0a0 	rbit	r0, r0
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800088e:	fab0 f080 	clz	r0, r0
 8000892:	f000 001f 	and.w	r0, r0, #31
 8000896:	2501      	movs	r5, #1
 8000898:	4085      	lsls	r5, r0
 800089a:	e7a9      	b.n	80007f0 <HAL_ADC_ConfigChannel+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800089c:	2400      	movs	r4, #0
 800089e:	e7c6      	b.n	800082e <HAL_ADC_ConfigChannel+0x8a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80008a0:	2500      	movs	r5, #0
 80008a2:	e7c9      	b.n	8000838 <HAL_ADC_ConfigChannel+0x94>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80008a4:	6948      	ldr	r0, [r1, #20]
 80008a6:	681c      	ldr	r4, [r3, #0]
 80008a8:	68e4      	ldr	r4, [r4, #12]
 80008aa:	f3c4 0482 	ubfx	r4, r4, #2, #3
 80008ae:	0064      	lsls	r4, r4, #1
 80008b0:	40a0      	lsls	r0, r4
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80008b2:	690d      	ldr	r5, [r1, #16]
 80008b4:	2d04      	cmp	r5, #4
 80008b6:	d057      	beq.n	8000968 <HAL_ADC_ConfigChannel+0x1c4>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80008b8:	681f      	ldr	r7, [r3, #0]
 80008ba:	680e      	ldr	r6, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80008bc:	3760      	adds	r7, #96	; 0x60
  MODIFY_REG(*preg,
 80008be:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
 80008c2:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 80008c6:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80008ca:	4330      	orrs	r0, r6
 80008cc:	4320      	orrs	r0, r4
 80008ce:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80008d2:	6818      	ldr	r0, [r3, #0]
 80008d4:	690e      	ldr	r6, [r1, #16]
 80008d6:	7e4c      	ldrb	r4, [r1, #25]
 80008d8:	2c01      	cmp	r4, #1
 80008da:	d03f      	beq.n	800095c <HAL_ADC_ConfigChannel+0x1b8>
 80008dc:	4615      	mov	r5, r2
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80008de:	3060      	adds	r0, #96	; 0x60
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80008e0:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 80008e4:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80008e8:	432c      	orrs	r4, r5
 80008ea:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80008ee:	681d      	ldr	r5, [r3, #0]
 80008f0:	690c      	ldr	r4, [r1, #16]
 80008f2:	7e08      	ldrb	r0, [r1, #24]
 80008f4:	2801      	cmp	r0, #1
 80008f6:	d034      	beq.n	8000962 <HAL_ADC_ConfigChannel+0x1be>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80008f8:	6928      	ldr	r0, [r5, #16]
 80008fa:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 80008fe:	f004 041f 	and.w	r4, r4, #31
 8000902:	40a2      	lsls	r2, r4
 8000904:	4302      	orrs	r2, r0
 8000906:	612a      	str	r2, [r5, #16]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000908:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800090a:	6882      	ldr	r2, [r0, #8]
 800090c:	f012 0f01 	tst.w	r2, #1
 8000910:	f040 8188 	bne.w	8000c24 <HAL_ADC_ConfigChannel+0x480>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000914:	680a      	ldr	r2, [r1, #0]
 8000916:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8000918:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
 800091c:	f3c2 0613 	ubfx	r6, r2, #0, #20
 8000920:	ea24 0406 	bic.w	r4, r4, r6
 8000924:	f005 0618 	and.w	r6, r5, #24
 8000928:	4d79      	ldr	r5, [pc, #484]	; (8000b10 <HAL_ADC_ConfigChannel+0x36c>)
 800092a:	40f5      	lsrs	r5, r6
 800092c:	402a      	ands	r2, r5
 800092e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8000932:	4322      	orrs	r2, r4
 8000934:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000938:	68c8      	ldr	r0, [r1, #12]
 800093a:	4a76      	ldr	r2, [pc, #472]	; (8000b14 <HAL_ADC_ConfigChannel+0x370>)
 800093c:	4290      	cmp	r0, r2
 800093e:	d047      	beq.n	80009d0 <HAL_ADC_ConfigChannel+0x22c>
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000940:	680a      	ldr	r2, [r1, #0]
 8000942:	2a00      	cmp	r2, #0
 8000944:	f2c0 80e8 	blt.w	8000b18 <HAL_ADC_ConfigChannel+0x374>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000948:	2000      	movs	r0, #0
 800094a:	e742      	b.n	80007d2 <HAL_ADC_ConfigChannel+0x2e>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800094c:	6948      	ldr	r0, [r1, #20]
 800094e:	68e4      	ldr	r4, [r4, #12]
 8000950:	08a4      	lsrs	r4, r4, #2
 8000952:	f004 0404 	and.w	r4, r4, #4
 8000956:	0064      	lsls	r4, r4, #1
 8000958:	40a0      	lsls	r0, r4
 800095a:	e7aa      	b.n	80008b2 <HAL_ADC_ConfigChannel+0x10e>
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800095c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8000960:	e7bd      	b.n	80008de <HAL_ADC_ConfigChannel+0x13a>
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8000962:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000966:	e7c7      	b.n	80008f8 <HAL_ADC_ConfigChannel+0x154>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000968:	6818      	ldr	r0, [r3, #0]
 800096a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800096c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000970:	680c      	ldr	r4, [r1, #0]
 8000972:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8000976:	d01c      	beq.n	80009b2 <HAL_ADC_ConfigChannel+0x20e>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000978:	6818      	ldr	r0, [r3, #0]
 800097a:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800097c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000980:	680c      	ldr	r4, [r1, #0]
 8000982:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8000986:	d019      	beq.n	80009bc <HAL_ADC_ConfigChannel+0x218>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000988:	6818      	ldr	r0, [r3, #0]
 800098a:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800098c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000990:	680c      	ldr	r4, [r1, #0]
 8000992:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8000996:	d016      	beq.n	80009c6 <HAL_ADC_ConfigChannel+0x222>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000998:	6818      	ldr	r0, [r3, #0]
 800099a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800099c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80009a0:	680c      	ldr	r4, [r1, #0]
 80009a2:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80009a6:	d1af      	bne.n	8000908 <HAL_ADC_ConfigChannel+0x164>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80009a8:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80009aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80009ae:	66c2      	str	r2, [r0, #108]	; 0x6c
 80009b0:	e7aa      	b.n	8000908 <HAL_ADC_ConfigChannel+0x164>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80009b2:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80009b4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80009b8:	6602      	str	r2, [r0, #96]	; 0x60
 80009ba:	e7dd      	b.n	8000978 <HAL_ADC_ConfigChannel+0x1d4>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80009bc:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80009be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80009c2:	6642      	str	r2, [r0, #100]	; 0x64
 80009c4:	e7e0      	b.n	8000988 <HAL_ADC_ConfigChannel+0x1e4>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80009c6:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80009c8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80009cc:	6682      	str	r2, [r0, #104]	; 0x68
 80009ce:	e7e3      	b.n	8000998 <HAL_ADC_ConfigChannel+0x1f4>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80009d0:	681d      	ldr	r5, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80009d2:	680a      	ldr	r2, [r1, #0]
 80009d4:	f3c2 0613 	ubfx	r6, r2, #0, #20
 80009d8:	bb96      	cbnz	r6, 8000a40 <HAL_ADC_ConfigChannel+0x29c>
 80009da:	0e90      	lsrs	r0, r2, #26
 80009dc:	3001      	adds	r0, #1
 80009de:	f000 001f 	and.w	r0, r0, #31
 80009e2:	2809      	cmp	r0, #9
 80009e4:	bf8c      	ite	hi
 80009e6:	2000      	movhi	r0, #0
 80009e8:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80009ea:	2800      	cmp	r0, #0
 80009ec:	d052      	beq.n	8000a94 <HAL_ADC_ConfigChannel+0x2f0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80009ee:	bb9e      	cbnz	r6, 8000a58 <HAL_ADC_ConfigChannel+0x2b4>
 80009f0:	0e94      	lsrs	r4, r2, #26
 80009f2:	3401      	adds	r4, #1
 80009f4:	06a4      	lsls	r4, r4, #26
 80009f6:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80009fa:	bbb6      	cbnz	r6, 8000a6a <HAL_ADC_ConfigChannel+0x2c6>
 80009fc:	0e90      	lsrs	r0, r2, #26
 80009fe:	3001      	adds	r0, #1
 8000a00:	f000 071f 	and.w	r7, r0, #31
 8000a04:	2001      	movs	r0, #1
 8000a06:	40b8      	lsls	r0, r7
 8000a08:	4304      	orrs	r4, r0
 8000a0a:	bbc6      	cbnz	r6, 8000a7e <HAL_ADC_ConfigChannel+0x2da>
 8000a0c:	0e92      	lsrs	r2, r2, #26
 8000a0e:	3201      	adds	r2, #1
 8000a10:	f002 021f 	and.w	r2, r2, #31
 8000a14:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000a18:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000a1a:	4322      	orrs	r2, r4
 8000a1c:	688c      	ldr	r4, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000a1e:	3514      	adds	r5, #20
 8000a20:	0e50      	lsrs	r0, r2, #25
 8000a22:	0080      	lsls	r0, r0, #2
 8000a24:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8000a28:	582e      	ldr	r6, [r5, r0]
 8000a2a:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8000a2e:	2707      	movs	r7, #7
 8000a30:	4097      	lsls	r7, r2
 8000a32:	ea26 0607 	bic.w	r6, r6, r7
 8000a36:	fa04 f202 	lsl.w	r2, r4, r2
 8000a3a:	4332      	orrs	r2, r6
 8000a3c:	502a      	str	r2, [r5, r0]
 8000a3e:	e77f      	b.n	8000940 <HAL_ADC_ConfigChannel+0x19c>
 8000a40:	fa92 f0a2 	rbit	r0, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000a44:	fab0 f080 	clz	r0, r0
 8000a48:	3001      	adds	r0, #1
 8000a4a:	f000 001f 	and.w	r0, r0, #31
 8000a4e:	2809      	cmp	r0, #9
 8000a50:	bf8c      	ite	hi
 8000a52:	2000      	movhi	r0, #0
 8000a54:	2001      	movls	r0, #1
 8000a56:	e7c8      	b.n	80009ea <HAL_ADC_ConfigChannel+0x246>
 8000a58:	fa92 f4a2 	rbit	r4, r2
 8000a5c:	fab4 f484 	clz	r4, r4
 8000a60:	3401      	adds	r4, #1
 8000a62:	06a4      	lsls	r4, r4, #26
 8000a64:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8000a68:	e7c7      	b.n	80009fa <HAL_ADC_ConfigChannel+0x256>
 8000a6a:	fa92 f0a2 	rbit	r0, r2
 8000a6e:	fab0 f080 	clz	r0, r0
 8000a72:	3001      	adds	r0, #1
 8000a74:	f000 071f 	and.w	r7, r0, #31
 8000a78:	2001      	movs	r0, #1
 8000a7a:	40b8      	lsls	r0, r7
 8000a7c:	e7c4      	b.n	8000a08 <HAL_ADC_ConfigChannel+0x264>
 8000a7e:	fa92 f2a2 	rbit	r2, r2
 8000a82:	fab2 f282 	clz	r2, r2
 8000a86:	3201      	adds	r2, #1
 8000a88:	f002 021f 	and.w	r2, r2, #31
 8000a8c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000a90:	0512      	lsls	r2, r2, #20
 8000a92:	e7c2      	b.n	8000a1a <HAL_ADC_ConfigChannel+0x276>
 8000a94:	b9ce      	cbnz	r6, 8000aca <HAL_ADC_ConfigChannel+0x326>
 8000a96:	0e94      	lsrs	r4, r2, #26
 8000a98:	3401      	adds	r4, #1
 8000a9a:	06a4      	lsls	r4, r4, #26
 8000a9c:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8000aa0:	b9e6      	cbnz	r6, 8000adc <HAL_ADC_ConfigChannel+0x338>
 8000aa2:	0e90      	lsrs	r0, r2, #26
 8000aa4:	3001      	adds	r0, #1
 8000aa6:	f000 071f 	and.w	r7, r0, #31
 8000aaa:	2001      	movs	r0, #1
 8000aac:	40b8      	lsls	r0, r7
 8000aae:	4304      	orrs	r4, r0
 8000ab0:	b9f6      	cbnz	r6, 8000af0 <HAL_ADC_ConfigChannel+0x34c>
 8000ab2:	0e90      	lsrs	r0, r2, #26
 8000ab4:	3001      	adds	r0, #1
 8000ab6:	f000 001f 	and.w	r0, r0, #31
 8000aba:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8000abe:	3a1e      	subs	r2, #30
 8000ac0:	0512      	lsls	r2, r2, #20
 8000ac2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000ac6:	4322      	orrs	r2, r4
 8000ac8:	e7a8      	b.n	8000a1c <HAL_ADC_ConfigChannel+0x278>
 8000aca:	fa92 f4a2 	rbit	r4, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000ace:	fab4 f484 	clz	r4, r4
 8000ad2:	3401      	adds	r4, #1
 8000ad4:	06a4      	lsls	r4, r4, #26
 8000ad6:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8000ada:	e7e1      	b.n	8000aa0 <HAL_ADC_ConfigChannel+0x2fc>
 8000adc:	fa92 f0a2 	rbit	r0, r2
 8000ae0:	fab0 f080 	clz	r0, r0
 8000ae4:	3001      	adds	r0, #1
 8000ae6:	f000 071f 	and.w	r7, r0, #31
 8000aea:	2001      	movs	r0, #1
 8000aec:	40b8      	lsls	r0, r7
 8000aee:	e7de      	b.n	8000aae <HAL_ADC_ConfigChannel+0x30a>
 8000af0:	fa92 f0a2 	rbit	r0, r2
 8000af4:	fab0 f080 	clz	r0, r0
 8000af8:	3001      	adds	r0, #1
 8000afa:	f000 001f 	and.w	r0, r0, #31
 8000afe:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8000b02:	3a1e      	subs	r2, #30
 8000b04:	0512      	lsls	r2, r2, #20
 8000b06:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000b0a:	e7dc      	b.n	8000ac6 <HAL_ADC_ConfigChannel+0x322>
 8000b0c:	5c001000 	.word	0x5c001000
 8000b10:	000fffff 	.word	0x000fffff
 8000b14:	47ff0000 	.word	0x47ff0000
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000b18:	6819      	ldr	r1, [r3, #0]
 8000b1a:	4845      	ldr	r0, [pc, #276]	; (8000c30 <HAL_ADC_ConfigChannel+0x48c>)
 8000b1c:	4c45      	ldr	r4, [pc, #276]	; (8000c34 <HAL_ADC_ConfigChannel+0x490>)
 8000b1e:	42a1      	cmp	r1, r4
 8000b20:	bf18      	it	ne
 8000b22:	4281      	cmpne	r1, r0
 8000b24:	bf0c      	ite	eq
 8000b26:	2001      	moveq	r0, #1
 8000b28:	2000      	movne	r0, #0
 8000b2a:	d121      	bne.n	8000b70 <HAL_ADC_ConfigChannel+0x3cc>
 8000b2c:	4d42      	ldr	r5, [pc, #264]	; (8000c38 <HAL_ADC_ConfigChannel+0x494>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000b2e:	68ac      	ldr	r4, [r5, #8]
 8000b30:	f004 76e0 	and.w	r6, r4, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000b34:	b310      	cbz	r0, 8000b7c <HAL_ADC_ConfigChannel+0x3d8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b36:	483e      	ldr	r0, [pc, #248]	; (8000c30 <HAL_ADC_ConfigChannel+0x48c>)
 8000b38:	6880      	ldr	r0, [r0, #8]
 8000b3a:	f010 0f01 	tst.w	r0, #1
 8000b3e:	d019      	beq.n	8000b74 <HAL_ADC_ConfigChannel+0x3d0>
 8000b40:	2001      	movs	r0, #1
 8000b42:	4f3c      	ldr	r7, [pc, #240]	; (8000c34 <HAL_ADC_ConfigChannel+0x490>)
 8000b44:	68bf      	ldr	r7, [r7, #8]
 8000b46:	f017 0f01 	tst.w	r7, #1
 8000b4a:	d015      	beq.n	8000b78 <HAL_ADC_ConfigChannel+0x3d4>
 8000b4c:	2701      	movs	r7, #1
 8000b4e:	4338      	orrs	r0, r7
 8000b50:	bf0c      	ite	eq
 8000b52:	2001      	moveq	r0, #1
 8000b54:	2000      	movne	r0, #0
 8000b56:	2800      	cmp	r0, #0
 8000b58:	d05e      	beq.n	8000c18 <HAL_ADC_ConfigChannel+0x474>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000b5a:	4838      	ldr	r0, [pc, #224]	; (8000c3c <HAL_ADC_ConfigChannel+0x498>)
 8000b5c:	4282      	cmp	r2, r0
 8000b5e:	d018      	beq.n	8000b92 <HAL_ADC_ConfigChannel+0x3ee>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000b60:	4837      	ldr	r0, [pc, #220]	; (8000c40 <HAL_ADC_ConfigChannel+0x49c>)
 8000b62:	4282      	cmp	r2, r0
 8000b64:	d036      	beq.n	8000bd4 <HAL_ADC_ConfigChannel+0x430>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000b66:	4837      	ldr	r0, [pc, #220]	; (8000c44 <HAL_ADC_ConfigChannel+0x4a0>)
 8000b68:	4282      	cmp	r2, r0
 8000b6a:	d044      	beq.n	8000bf6 <HAL_ADC_ConfigChannel+0x452>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	e630      	b.n	80007d2 <HAL_ADC_ConfigChannel+0x2e>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000b70:	4d35      	ldr	r5, [pc, #212]	; (8000c48 <HAL_ADC_ConfigChannel+0x4a4>)
 8000b72:	e7dc      	b.n	8000b2e <HAL_ADC_ConfigChannel+0x38a>
 8000b74:	2000      	movs	r0, #0
 8000b76:	e7e4      	b.n	8000b42 <HAL_ADC_ConfigChannel+0x39e>
 8000b78:	2700      	movs	r7, #0
 8000b7a:	e7e8      	b.n	8000b4e <HAL_ADC_ConfigChannel+0x3aa>
 8000b7c:	4833      	ldr	r0, [pc, #204]	; (8000c4c <HAL_ADC_ConfigChannel+0x4a8>)
 8000b7e:	6880      	ldr	r0, [r0, #8]
 8000b80:	f010 0f01 	tst.w	r0, #1
 8000b84:	d003      	beq.n	8000b8e <HAL_ADC_ConfigChannel+0x3ea>
 8000b86:	2001      	movs	r0, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000b88:	f080 0001 	eor.w	r0, r0, #1
 8000b8c:	e7e3      	b.n	8000b56 <HAL_ADC_ConfigChannel+0x3b2>
 8000b8e:	2000      	movs	r0, #0
 8000b90:	e7fa      	b.n	8000b88 <HAL_ADC_ConfigChannel+0x3e4>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000b92:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
 8000b96:	d1e3      	bne.n	8000b60 <HAL_ADC_ConfigChannel+0x3bc>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8000b98:	4a2c      	ldr	r2, [pc, #176]	; (8000c4c <HAL_ADC_ConfigChannel+0x4a8>)
 8000b9a:	4291      	cmp	r1, r2
 8000b9c:	d001      	beq.n	8000ba2 <HAL_ADC_ConfigChannel+0x3fe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	e617      	b.n	80007d2 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8000ba2:	f446 0200 	orr.w	r2, r6, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ba6:	68a9      	ldr	r1, [r5, #8]
 8000ba8:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000bac:	430a      	orrs	r2, r1
 8000bae:	60aa      	str	r2, [r5, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000bb0:	4a27      	ldr	r2, [pc, #156]	; (8000c50 <HAL_ADC_ConfigChannel+0x4ac>)
 8000bb2:	6812      	ldr	r2, [r2, #0]
 8000bb4:	0992      	lsrs	r2, r2, #6
 8000bb6:	4927      	ldr	r1, [pc, #156]	; (8000c54 <HAL_ADC_ConfigChannel+0x4b0>)
 8000bb8:	fba1 1202 	umull	r1, r2, r1, r2
 8000bbc:	0992      	lsrs	r2, r2, #6
 8000bbe:	0052      	lsls	r2, r2, #1
 8000bc0:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 8000bc2:	e002      	b.n	8000bca <HAL_ADC_ConfigChannel+0x426>
                wait_loop_index--;
 8000bc4:	9a01      	ldr	r2, [sp, #4]
 8000bc6:	3a01      	subs	r2, #1
 8000bc8:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 8000bca:	9a01      	ldr	r2, [sp, #4]
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	d1f9      	bne.n	8000bc4 <HAL_ADC_ConfigChannel+0x420>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	e5fe      	b.n	80007d2 <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000bd4:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
 8000bd8:	d1c5      	bne.n	8000b66 <HAL_ADC_ConfigChannel+0x3c2>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8000bda:	4a1c      	ldr	r2, [pc, #112]	; (8000c4c <HAL_ADC_ConfigChannel+0x4a8>)
 8000bdc:	4291      	cmp	r1, r2
 8000bde:	d001      	beq.n	8000be4 <HAL_ADC_ConfigChannel+0x440>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000be0:	2000      	movs	r0, #0
 8000be2:	e5f6      	b.n	80007d2 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8000be4:	f046 7280 	orr.w	r2, r6, #16777216	; 0x1000000
 8000be8:	68a9      	ldr	r1, [r5, #8]
 8000bea:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	60aa      	str	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	e5ed      	b.n	80007d2 <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000bf6:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
 8000bfa:	d115      	bne.n	8000c28 <HAL_ADC_ConfigChannel+0x484>
            if (ADC_VREFINT_INSTANCE(hadc))
 8000bfc:	4a13      	ldr	r2, [pc, #76]	; (8000c4c <HAL_ADC_ConfigChannel+0x4a8>)
 8000bfe:	4291      	cmp	r1, r2
 8000c00:	d001      	beq.n	8000c06 <HAL_ADC_ConfigChannel+0x462>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c02:	2000      	movs	r0, #0
 8000c04:	e5e5      	b.n	80007d2 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8000c06:	f446 0280 	orr.w	r2, r6, #4194304	; 0x400000
 8000c0a:	68a9      	ldr	r1, [r5, #8]
 8000c0c:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000c10:	430a      	orrs	r2, r1
 8000c12:	60aa      	str	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c14:	2000      	movs	r0, #0
 8000c16:	e5dc      	b.n	80007d2 <HAL_ADC_ConfigChannel+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000c1a:	f042 0220 	orr.w	r2, r2, #32
 8000c1e:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8000c20:	2001      	movs	r0, #1
 8000c22:	e5d6      	b.n	80007d2 <HAL_ADC_ConfigChannel+0x2e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c24:	2000      	movs	r0, #0
 8000c26:	e5d4      	b.n	80007d2 <HAL_ADC_ConfigChannel+0x2e>
 8000c28:	2000      	movs	r0, #0
 8000c2a:	e5d2      	b.n	80007d2 <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8000c2c:	2002      	movs	r0, #2
 8000c2e:	e5d3      	b.n	80007d8 <HAL_ADC_ConfigChannel+0x34>
 8000c30:	40022000 	.word	0x40022000
 8000c34:	40022100 	.word	0x40022100
 8000c38:	40022300 	.word	0x40022300
 8000c3c:	cb840000 	.word	0xcb840000
 8000c40:	c7520000 	.word	0xc7520000
 8000c44:	cfb80000 	.word	0xcfb80000
 8000c48:	58026300 	.word	0x58026300
 8000c4c:	58026000 	.word	0x58026000
 8000c50:	20000010 	.word	0x20000010
 8000c54:	053e2d63 	.word	0x053e2d63

08000c58 <ADC_Enable>:
{
 8000c58:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000c5a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000c5c:	689a      	ldr	r2, [r3, #8]
 8000c5e:	f012 0f01 	tst.w	r2, #1
 8000c62:	d152      	bne.n	8000d0a <ADC_Enable+0xb2>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8000c64:	6899      	ldr	r1, [r3, #8]
 8000c66:	4a2a      	ldr	r2, [pc, #168]	; (8000d10 <ADC_Enable+0xb8>)
 8000c68:	4211      	tst	r1, r2
 8000c6a:	d009      	beq.n	8000c80 <ADC_Enable+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c6c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000c6e:	f043 0310 	orr.w	r3, r3, #16
 8000c72:	6543      	str	r3, [r0, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c74:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000c76:	f043 0301 	orr.w	r3, r3, #1
 8000c7a:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	e045      	b.n	8000d0c <ADC_Enable+0xb4>
 8000c80:	4604      	mov	r4, r0
  MODIFY_REG(ADCx->CR,
 8000c82:	6899      	ldr	r1, [r3, #8]
 8000c84:	4a23      	ldr	r2, [pc, #140]	; (8000d14 <ADC_Enable+0xbc>)
 8000c86:	400a      	ands	r2, r1
 8000c88:	f042 0201 	orr.w	r2, r2, #1
 8000c8c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000c8e:	f7ff fd05 	bl	800069c <HAL_GetTick>
 8000c92:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000c94:	6823      	ldr	r3, [r4, #0]
 8000c96:	4920      	ldr	r1, [pc, #128]	; (8000d18 <ADC_Enable+0xc0>)
 8000c98:	4a20      	ldr	r2, [pc, #128]	; (8000d1c <ADC_Enable+0xc4>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	bf18      	it	ne
 8000c9e:	428b      	cmpne	r3, r1
 8000ca0:	d10d      	bne.n	8000cbe <ADC_Enable+0x66>
 8000ca2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000ca6:	6892      	ldr	r2, [r2, #8]
 8000ca8:	f002 021f 	and.w	r2, r2, #31
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000cac:	491b      	ldr	r1, [pc, #108]	; (8000d1c <ADC_Enable+0xc4>)
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d007      	beq.n	8000cc2 <ADC_Enable+0x6a>
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4299      	cmp	r1, r3
 8000cb6:	d00c      	beq.n	8000cd2 <ADC_Enable+0x7a>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000cb8:	b15a      	cbz	r2, 8000cd2 <ADC_Enable+0x7a>
  return HAL_OK;
 8000cba:	2000      	movs	r0, #0
 8000cbc:	e026      	b.n	8000d0c <ADC_Enable+0xb4>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000cbe:	4a18      	ldr	r2, [pc, #96]	; (8000d20 <ADC_Enable+0xc8>)
 8000cc0:	e7f1      	b.n	8000ca6 <ADC_Enable+0x4e>
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000cc2:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 8000cc6:	e7f5      	b.n	8000cb4 <ADC_Enable+0x5c>
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000cc8:	f7ff fce8 	bl	800069c <HAL_GetTick>
 8000ccc:	1b40      	subs	r0, r0, r5
 8000cce:	2802      	cmp	r0, #2
 8000cd0:	d80f      	bhi.n	8000cf2 <ADC_Enable+0x9a>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8000cd2:	6823      	ldr	r3, [r4, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	f012 0f01 	tst.w	r2, #1
 8000cda:	d114      	bne.n	8000d06 <ADC_Enable+0xae>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	f012 0f01 	tst.w	r2, #1
 8000ce2:	d1f1      	bne.n	8000cc8 <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 8000ce4:	6899      	ldr	r1, [r3, #8]
 8000ce6:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <ADC_Enable+0xbc>)
 8000ce8:	400a      	ands	r2, r1
 8000cea:	f042 0201 	orr.w	r2, r2, #1
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	e7ea      	b.n	8000cc8 <ADC_Enable+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cf2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000cf4:	f043 0310 	orr.w	r3, r3, #16
 8000cf8:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8000d02:	2001      	movs	r0, #1
 8000d04:	e002      	b.n	8000d0c <ADC_Enable+0xb4>
  return HAL_OK;
 8000d06:	2000      	movs	r0, #0
 8000d08:	e000      	b.n	8000d0c <ADC_Enable+0xb4>
 8000d0a:	2000      	movs	r0, #0
}
 8000d0c:	bd38      	pop	{r3, r4, r5, pc}
 8000d0e:	bf00      	nop
 8000d10:	8000003f 	.word	0x8000003f
 8000d14:	7fffffc0 	.word	0x7fffffc0
 8000d18:	40022000 	.word	0x40022000
 8000d1c:	40022100 	.word	0x40022100
 8000d20:	58026300 	.word	0x58026300

08000d24 <HAL_ADC_Start_DMA>:
{
 8000d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000d26:	6804      	ldr	r4, [r0, #0]
 8000d28:	4e41      	ldr	r6, [pc, #260]	; (8000e30 <HAL_ADC_Start_DMA+0x10c>)
 8000d2a:	4d42      	ldr	r5, [pc, #264]	; (8000e34 <HAL_ADC_Start_DMA+0x110>)
 8000d2c:	42ac      	cmp	r4, r5
 8000d2e:	bf18      	it	ne
 8000d30:	42b4      	cmpne	r4, r6
 8000d32:	d11e      	bne.n	8000d72 <HAL_ADC_Start_DMA+0x4e>
 8000d34:	f505 7500 	add.w	r5, r5, #512	; 0x200
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000d38:	68ad      	ldr	r5, [r5, #8]
 8000d3a:	f005 051f 	and.w	r5, r5, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d3e:	68a4      	ldr	r4, [r4, #8]
 8000d40:	f014 0f04 	tst.w	r4, #4
 8000d44:	d16e      	bne.n	8000e24 <HAL_ADC_Start_DMA+0x100>
    __HAL_LOCK(hadc);
 8000d46:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8000d4a:	2c01      	cmp	r4, #1
 8000d4c:	d06d      	beq.n	8000e2a <HAL_ADC_Start_DMA+0x106>
 8000d4e:	2301      	movs	r3, #1
 8000d50:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000d54:	2d05      	cmp	r5, #5
 8000d56:	bf14      	ite	ne
 8000d58:	2400      	movne	r4, #0
 8000d5a:	2401      	moveq	r4, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	bf08      	it	eq
 8000d60:	461c      	moveq	r4, r3
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000d62:	b944      	cbnz	r4, 8000d76 <HAL_ADC_Start_DMA+0x52>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000d64:	2d09      	cmp	r5, #9
 8000d66:	d006      	beq.n	8000d76 <HAL_ADC_Start_DMA+0x52>
      __HAL_UNLOCK(hadc);
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
      tmp_hal_status = HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e059      	b.n	8000e26 <HAL_ADC_Start_DMA+0x102>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000d72:	4d31      	ldr	r5, [pc, #196]	; (8000e38 <HAL_ADC_Start_DMA+0x114>)
 8000d74:	e7e0      	b.n	8000d38 <HAL_ADC_Start_DMA+0x14>
 8000d76:	4616      	mov	r6, r2
 8000d78:	460f      	mov	r7, r1
 8000d7a:	4604      	mov	r4, r0
      tmp_hal_status = ADC_Enable(hadc);
 8000d7c:	f7ff ff6c 	bl	8000c58 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8000d80:	4603      	mov	r3, r0
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d14a      	bne.n	8000e1c <HAL_ADC_Start_DMA+0xf8>
        ADC_STATE_CLR_SET(hadc->State,
 8000d86:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000d88:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <HAL_ADC_Start_DMA+0x118>)
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d90:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000d92:	6823      	ldr	r3, [r4, #0]
 8000d94:	4a27      	ldr	r2, [pc, #156]	; (8000e34 <HAL_ADC_Start_DMA+0x110>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d03a      	beq.n	8000e10 <HAL_ADC_Start_DMA+0xec>
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d000      	beq.n	8000da2 <HAL_ADC_Start_DMA+0x7e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000da0:	b91d      	cbnz	r5, 8000daa <HAL_ADC_Start_DMA+0x86>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000da2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000da4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000da8:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000daa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000dac:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000db0:	d031      	beq.n	8000e16 <HAL_ADC_Start_DMA+0xf2>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000db2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000db4:	f023 0306 	bic.w	r3, r3, #6
 8000db8:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000dba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000dbc:	4a20      	ldr	r2, [pc, #128]	; (8000e40 <HAL_ADC_Start_DMA+0x11c>)
 8000dbe:	63da      	str	r2, [r3, #60]	; 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000dc0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000dc2:	4a20      	ldr	r2, [pc, #128]	; (8000e44 <HAL_ADC_Start_DMA+0x120>)
 8000dc4:	641a      	str	r2, [r3, #64]	; 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000dc6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000dc8:	4a1f      	ldr	r2, [pc, #124]	; (8000e48 <HAL_ADC_Start_DMA+0x124>)
 8000dca:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000dcc:	6823      	ldr	r3, [r4, #0]
 8000dce:	221c      	movs	r2, #28
 8000dd0:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000dd8:	6822      	ldr	r2, [r4, #0]
 8000dda:	6853      	ldr	r3, [r2, #4]
 8000ddc:	f043 0310 	orr.w	r3, r3, #16
 8000de0:	6053      	str	r3, [r2, #4]
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8000de2:	6821      	ldr	r1, [r4, #0]
 8000de4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8000de6:	68ca      	ldr	r2, [r1, #12]
 8000de8:	f022 0203 	bic.w	r2, r2, #3
 8000dec:	4313      	orrs	r3, r2
 8000dee:	60cb      	str	r3, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000df0:	6821      	ldr	r1, [r4, #0]
 8000df2:	4633      	mov	r3, r6
 8000df4:	463a      	mov	r2, r7
 8000df6:	3140      	adds	r1, #64	; 0x40
 8000df8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000dfa:	f000 ff67 	bl	8001ccc <HAL_DMA_Start_IT>
 8000dfe:	4603      	mov	r3, r0
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000e00:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8000e02:	6888      	ldr	r0, [r1, #8]
 8000e04:	4a11      	ldr	r2, [pc, #68]	; (8000e4c <HAL_ADC_Start_DMA+0x128>)
 8000e06:	4002      	ands	r2, r0
 8000e08:	f042 0204 	orr.w	r2, r2, #4
 8000e0c:	608a      	str	r2, [r1, #8]
 8000e0e:	e00a      	b.n	8000e26 <HAL_ADC_Start_DMA+0x102>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000e10:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8000e14:	e7c2      	b.n	8000d9c <HAL_ADC_Start_DMA+0x78>
          ADC_CLEAR_ERRORCODE(hadc);
 8000e16:	2300      	movs	r3, #0
 8000e18:	65a3      	str	r3, [r4, #88]	; 0x58
 8000e1a:	e7ce      	b.n	8000dba <HAL_ADC_Start_DMA+0x96>
        __HAL_UNLOCK(hadc);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 8000e22:	e000      	b.n	8000e26 <HAL_ADC_Start_DMA+0x102>
    tmp_hal_status = HAL_BUSY;
 8000e24:	2302      	movs	r3, #2
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	e7fb      	b.n	8000e26 <HAL_ADC_Start_DMA+0x102>
 8000e2e:	bf00      	nop
 8000e30:	40022000 	.word	0x40022000
 8000e34:	40022100 	.word	0x40022100
 8000e38:	58026300 	.word	0x58026300
 8000e3c:	fffff0fe 	.word	0xfffff0fe
 8000e40:	08000701 	.word	0x08000701
 8000e44:	080006f5 	.word	0x080006f5
 8000e48:	08000789 	.word	0x08000789
 8000e4c:	7fffffc0 	.word	0x7fffffc0

08000e50 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8000e50:	b538      	push	{r3, r4, r5, lr}
 8000e52:	4605      	mov	r5, r0
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8000e54:	6803      	ldr	r3, [r0, #0]
 8000e56:	494f      	ldr	r1, [pc, #316]	; (8000f94 <ADC_ConfigureBoostMode+0x144>)
 8000e58:	4a4f      	ldr	r2, [pc, #316]	; (8000f98 <ADC_ConfigureBoostMode+0x148>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	bf18      	it	ne
 8000e5e:	428b      	cmpne	r3, r1
 8000e60:	d123      	bne.n	8000eaa <ADC_ConfigureBoostMode+0x5a>
 8000e62:	4b4e      	ldr	r3, [pc, #312]	; (8000f9c <ADC_ConfigureBoostMode+0x14c>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000e6a:	bf14      	ite	ne
 8000e6c:	2301      	movne	r3, #1
 8000e6e:	2300      	moveq	r3, #0
 8000e70:	b34b      	cbz	r3, 8000ec6 <ADC_ConfigureBoostMode+0x76>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8000e72:	f003 f9dd 	bl	8004230 <HAL_RCC_GetHCLKFreq>
 8000e76:	4604      	mov	r4, r0
    switch(hadc->Init.ClockPrescaler)
 8000e78:	686b      	ldr	r3, [r5, #4]
 8000e7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000e7e:	d01c      	beq.n	8000eba <ADC_ConfigureBoostMode+0x6a>
 8000e80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000e84:	d01d      	beq.n	8000ec2 <ADC_ConfigureBoostMode+0x72>
 8000e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e8a:	d016      	beq.n	8000eba <ADC_ConfigureBoostMode+0x6a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8000e8c:	f7ff fc20 	bl	80006d0 <HAL_GetREVID>
 8000e90:	f241 0303 	movw	r3, #4099	; 0x1003
 8000e94:	4298      	cmp	r0, r3
 8000e96:	d856      	bhi.n	8000f46 <ADC_ConfigureBoostMode+0xf6>
  {
    if(freq > 20000000UL)
 8000e98:	4b41      	ldr	r3, [pc, #260]	; (8000fa0 <ADC_ConfigureBoostMode+0x150>)
 8000e9a:	429c      	cmp	r4, r3
 8000e9c:	d94d      	bls.n	8000f3a <ADC_ConfigureBoostMode+0xea>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8000e9e:	682a      	ldr	r2, [r5, #0]
 8000ea0:	6893      	ldr	r3, [r2, #8]
 8000ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea6:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8000ea8:	bd38      	pop	{r3, r4, r5, pc}
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8000eaa:	4b3e      	ldr	r3, [pc, #248]	; (8000fa4 <ADC_ConfigureBoostMode+0x154>)
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000eb2:	bf14      	ite	ne
 8000eb4:	2301      	movne	r3, #1
 8000eb6:	2300      	moveq	r3, #0
 8000eb8:	e7da      	b.n	8000e70 <ADC_ConfigureBoostMode+0x20>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8000eba:	0c1b      	lsrs	r3, r3, #16
 8000ebc:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8000ec0:	e7e4      	b.n	8000e8c <ADC_ConfigureBoostMode+0x3c>
        freq /= 4UL;
 8000ec2:	0884      	lsrs	r4, r0, #2
        break;
 8000ec4:	e7e2      	b.n	8000e8c <ADC_ConfigureBoostMode+0x3c>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8000ec6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000eca:	f004 fa7b 	bl	80053c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8000ece:	4604      	mov	r4, r0
    switch(hadc->Init.ClockPrescaler)
 8000ed0:	686b      	ldr	r3, [r5, #4]
 8000ed2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8000ed6:	d016      	beq.n	8000f06 <ADC_ConfigureBoostMode+0xb6>
 8000ed8:	d90b      	bls.n	8000ef2 <ADC_ConfigureBoostMode+0xa2>
 8000eda:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8000ede:	d028      	beq.n	8000f32 <ADC_ConfigureBoostMode+0xe2>
 8000ee0:	d81d      	bhi.n	8000f1e <ADC_ConfigureBoostMode+0xce>
 8000ee2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8000ee6:	d022      	beq.n	8000f2e <ADC_ConfigureBoostMode+0xde>
 8000ee8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000eec:	d1ce      	bne.n	8000e8c <ADC_ConfigureBoostMode+0x3c>
        freq /= 32UL;
 8000eee:	0944      	lsrs	r4, r0, #5
        break;
 8000ef0:	e7cc      	b.n	8000e8c <ADC_ConfigureBoostMode+0x3c>
    switch(hadc->Init.ClockPrescaler)
 8000ef2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000ef6:	d006      	beq.n	8000f06 <ADC_ConfigureBoostMode+0xb6>
 8000ef8:	d80a      	bhi.n	8000f10 <ADC_ConfigureBoostMode+0xc0>
 8000efa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000efe:	d002      	beq.n	8000f06 <ADC_ConfigureBoostMode+0xb6>
 8000f00:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000f04:	d1c2      	bne.n	8000e8c <ADC_ConfigureBoostMode+0x3c>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8000f06:	0c9b      	lsrs	r3, r3, #18
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8000f0e:	e7bd      	b.n	8000e8c <ADC_ConfigureBoostMode+0x3c>
    switch(hadc->Init.ClockPrescaler)
 8000f10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000f14:	d0f7      	beq.n	8000f06 <ADC_ConfigureBoostMode+0xb6>
 8000f16:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8000f1a:	d1b7      	bne.n	8000e8c <ADC_ConfigureBoostMode+0x3c>
 8000f1c:	e7f3      	b.n	8000f06 <ADC_ConfigureBoostMode+0xb6>
 8000f1e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8000f22:	d008      	beq.n	8000f36 <ADC_ConfigureBoostMode+0xe6>
 8000f24:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8000f28:	d1b0      	bne.n	8000e8c <ADC_ConfigureBoostMode+0x3c>
        freq /= 256UL;
 8000f2a:	0a04      	lsrs	r4, r0, #8
        break;
 8000f2c:	e7ae      	b.n	8000e8c <ADC_ConfigureBoostMode+0x3c>
        freq /= 16UL;
 8000f2e:	0904      	lsrs	r4, r0, #4
      break;
 8000f30:	e7ac      	b.n	8000e8c <ADC_ConfigureBoostMode+0x3c>
        freq /= 64UL;
 8000f32:	0984      	lsrs	r4, r0, #6
        break;
 8000f34:	e7aa      	b.n	8000e8c <ADC_ConfigureBoostMode+0x3c>
        freq /= 128UL;
 8000f36:	09c4      	lsrs	r4, r0, #7
        break;
 8000f38:	e7a8      	b.n	8000e8c <ADC_ConfigureBoostMode+0x3c>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8000f3a:	682a      	ldr	r2, [r5, #0]
 8000f3c:	6893      	ldr	r3, [r2, #8]
 8000f3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f42:	6093      	str	r3, [r2, #8]
 8000f44:	e7b0      	b.n	8000ea8 <ADC_ConfigureBoostMode+0x58>
    freq /= 2U; /* divider by 2 for Rev.V */
 8000f46:	0864      	lsrs	r4, r4, #1
    if (freq <= 6250000UL)
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <ADC_ConfigureBoostMode+0x158>)
 8000f4a:	429c      	cmp	r4, r3
 8000f4c:	d90b      	bls.n	8000f66 <ADC_ConfigureBoostMode+0x116>
    else if(freq <= 12500000UL)
 8000f4e:	4b17      	ldr	r3, [pc, #92]	; (8000fac <ADC_ConfigureBoostMode+0x15c>)
 8000f50:	429c      	cmp	r4, r3
 8000f52:	d90e      	bls.n	8000f72 <ADC_ConfigureBoostMode+0x122>
    else if(freq <= 25000000UL)
 8000f54:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <ADC_ConfigureBoostMode+0x160>)
 8000f56:	429c      	cmp	r4, r3
 8000f58:	d913      	bls.n	8000f82 <ADC_ConfigureBoostMode+0x132>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8000f5a:	682a      	ldr	r2, [r5, #0]
 8000f5c:	6893      	ldr	r3, [r2, #8]
 8000f5e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000f62:	6093      	str	r3, [r2, #8]
}
 8000f64:	e7a0      	b.n	8000ea8 <ADC_ConfigureBoostMode+0x58>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8000f66:	682a      	ldr	r2, [r5, #0]
 8000f68:	6893      	ldr	r3, [r2, #8]
 8000f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f6e:	6093      	str	r3, [r2, #8]
 8000f70:	e79a      	b.n	8000ea8 <ADC_ConfigureBoostMode+0x58>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8000f72:	682a      	ldr	r2, [r5, #0]
 8000f74:	6893      	ldr	r3, [r2, #8]
 8000f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7e:	6093      	str	r3, [r2, #8]
 8000f80:	e792      	b.n	8000ea8 <ADC_ConfigureBoostMode+0x58>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8000f82:	682a      	ldr	r2, [r5, #0]
 8000f84:	6893      	ldr	r3, [r2, #8]
 8000f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f8e:	6093      	str	r3, [r2, #8]
 8000f90:	e78a      	b.n	8000ea8 <ADC_ConfigureBoostMode+0x58>
 8000f92:	bf00      	nop
 8000f94:	40022000 	.word	0x40022000
 8000f98:	40022100 	.word	0x40022100
 8000f9c:	40022300 	.word	0x40022300
 8000fa0:	01312d00 	.word	0x01312d00
 8000fa4:	58026300 	.word	0x58026300
 8000fa8:	005f5e10 	.word	0x005f5e10
 8000fac:	00bebc20 	.word	0x00bebc20
 8000fb0:	017d7840 	.word	0x017d7840

08000fb4 <HAL_ADC_Init>:
{
 8000fb4:	b530      	push	{r4, r5, lr}
 8000fb6:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8000fbc:	2800      	cmp	r0, #0
 8000fbe:	f000 811c 	beq.w	80011fa <HAL_ADC_Init+0x246>
 8000fc2:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fc4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000fc6:	b1e3      	cbz	r3, 8001002 <HAL_ADC_Init+0x4e>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000fc8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8000fd0:	d003      	beq.n	8000fda <HAL_ADC_Init+0x26>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000fd2:	6899      	ldr	r1, [r3, #8]
 8000fd4:	4a8a      	ldr	r2, [pc, #552]	; (8001200 <HAL_ADC_Init+0x24c>)
 8000fd6:	400a      	ands	r2, r1
 8000fd8:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fda:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000fe2:	d11b      	bne.n	800101c <HAL_ADC_Init+0x68>
  MODIFY_REG(ADCx->CR,
 8000fe4:	6899      	ldr	r1, [r3, #8]
 8000fe6:	4a87      	ldr	r2, [pc, #540]	; (8001204 <HAL_ADC_Init+0x250>)
 8000fe8:	400a      	ands	r2, r1
 8000fea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fee:	609a      	str	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000ff0:	4b85      	ldr	r3, [pc, #532]	; (8001208 <HAL_ADC_Init+0x254>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	099b      	lsrs	r3, r3, #6
 8000ff6:	4a85      	ldr	r2, [pc, #532]	; (800120c <HAL_ADC_Init+0x258>)
 8000ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffc:	099b      	lsrs	r3, r3, #6
 8000ffe:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001000:	e009      	b.n	8001016 <HAL_ADC_Init+0x62>
    HAL_ADC_MspInit(hadc);
 8001002:	f009 fec7 	bl	800ad94 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001006:	2300      	movs	r3, #0
 8001008:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 800100a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800100e:	e7db      	b.n	8000fc8 <HAL_ADC_Init+0x14>
      wait_loop_index--;
 8001010:	9b01      	ldr	r3, [sp, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001016:	9b01      	ldr	r3, [sp, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1f9      	bne.n	8001010 <HAL_ADC_Init+0x5c>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800101c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001024:	f040 809d 	bne.w	8001162 <HAL_ADC_Init+0x1ae>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001028:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800102a:	f042 0210 	orr.w	r2, r2, #16
 800102e:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001030:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001032:	f042 0201 	orr.w	r2, r2, #1
 8001036:	65a2      	str	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8001038:	2501      	movs	r5, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	f012 0f04 	tst.w	r2, #4
 8001040:	f000 8091 	beq.w	8001166 <HAL_ADC_Init+0x1b2>
 8001044:	2101      	movs	r1, #1
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001046:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001048:	f012 0f10 	tst.w	r2, #16
 800104c:	f040 80cd 	bne.w	80011ea <HAL_ADC_Init+0x236>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001050:	2900      	cmp	r1, #0
 8001052:	f040 80ca 	bne.w	80011ea <HAL_ADC_Init+0x236>
    ADC_STATE_CLR_SET(hadc->State,
 8001056:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001058:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 800105c:	f042 0202 	orr.w	r2, r2, #2
 8001060:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	f012 0f01 	tst.w	r2, #1
 8001068:	d121      	bne.n	80010ae <HAL_ADC_Init+0xfa>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800106a:	4969      	ldr	r1, [pc, #420]	; (8001210 <HAL_ADC_Init+0x25c>)
 800106c:	4a69      	ldr	r2, [pc, #420]	; (8001214 <HAL_ADC_Init+0x260>)
 800106e:	4293      	cmp	r3, r2
 8001070:	bf18      	it	ne
 8001072:	428b      	cmpne	r3, r1
 8001074:	bf0c      	ite	eq
 8001076:	2301      	moveq	r3, #1
 8001078:	2300      	movne	r3, #0
 800107a:	d17a      	bne.n	8001172 <HAL_ADC_Init+0x1be>
 800107c:	688a      	ldr	r2, [r1, #8]
 800107e:	f012 0f01 	tst.w	r2, #1
 8001082:	d072      	beq.n	800116a <HAL_ADC_Init+0x1b6>
 8001084:	2201      	movs	r2, #1
 8001086:	4963      	ldr	r1, [pc, #396]	; (8001214 <HAL_ADC_Init+0x260>)
 8001088:	6889      	ldr	r1, [r1, #8]
 800108a:	f011 0f01 	tst.w	r1, #1
 800108e:	d06e      	beq.n	800116e <HAL_ADC_Init+0x1ba>
 8001090:	2101      	movs	r1, #1
 8001092:	430a      	orrs	r2, r1
 8001094:	bf0c      	ite	eq
 8001096:	2201      	moveq	r2, #1
 8001098:	2200      	movne	r2, #0
 800109a:	b142      	cbz	r2, 80010ae <HAL_ADC_Init+0xfa>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800109c:	2b00      	cmp	r3, #0
 800109e:	d073      	beq.n	8001188 <HAL_ADC_Init+0x1d4>
 80010a0:	495d      	ldr	r1, [pc, #372]	; (8001218 <HAL_ADC_Init+0x264>)
 80010a2:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010a4:	688a      	ldr	r2, [r1, #8]
 80010a6:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80010aa:	4313      	orrs	r3, r2
 80010ac:	608b      	str	r3, [r1, #8]
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80010ae:	f7ff fb0f 	bl	80006d0 <HAL_GetREVID>
 80010b2:	f241 0303 	movw	r3, #4099	; 0x1003
 80010b6:	4298      	cmp	r0, r3
 80010b8:	d902      	bls.n	80010c0 <HAL_ADC_Init+0x10c>
 80010ba:	68a3      	ldr	r3, [r4, #8]
 80010bc:	2b10      	cmp	r3, #16
 80010be:	d065      	beq.n	800118c <HAL_ADC_Init+0x1d8>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80010c0:	7d62      	ldrb	r2, [r4, #21]
                  hadc->Init.Overrun                                                    |
 80010c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80010c4:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                  hadc->Init.Resolution                                                 |
 80010c8:	68a2      	ldr	r2, [r4, #8]
                  hadc->Init.Overrun                                                    |
 80010ca:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 80010cc:	7f22      	ldrb	r2, [r4, #28]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80010ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010d2:	7f22      	ldrb	r2, [r4, #28]
 80010d4:	2a01      	cmp	r2, #1
 80010d6:	d064      	beq.n	80011a2 <HAL_ADC_Init+0x1ee>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80010da:	b122      	cbz	r2, 80010e6 <HAL_ADC_Init+0x132>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010dc:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80010e0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80010e2:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010e4:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80010e6:	6821      	ldr	r1, [r4, #0]
 80010e8:	68c8      	ldr	r0, [r1, #12]
 80010ea:	4a4c      	ldr	r2, [pc, #304]	; (800121c <HAL_ADC_Init+0x268>)
 80010ec:	4002      	ands	r2, r0
 80010ee:	4313      	orrs	r3, r2
 80010f0:	60cb      	str	r3, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010f2:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	f012 0f04 	tst.w	r2, #4
 80010fa:	d057      	beq.n	80011ac <HAL_ADC_Init+0x1f8>
 80010fc:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	f012 0f08 	tst.w	r2, #8
 8001104:	d054      	beq.n	80011b0 <HAL_ADC_Init+0x1fc>
 8001106:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001108:	430a      	orrs	r2, r1
 800110a:	d11b      	bne.n	8001144 <HAL_ADC_Init+0x190>
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800110c:	7d21      	ldrb	r1, [r4, #20]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800110e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      tmpCFGR = (
 8001110:	ea42 3181 	orr.w	r1, r2, r1, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001114:	68d8      	ldr	r0, [r3, #12]
 8001116:	4a42      	ldr	r2, [pc, #264]	; (8001220 <HAL_ADC_Init+0x26c>)
 8001118:	4002      	ands	r2, r0
 800111a:	430a      	orrs	r2, r1
 800111c:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 800111e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001122:	2b01      	cmp	r3, #1
 8001124:	d046      	beq.n	80011b4 <HAL_ADC_Init+0x200>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001126:	6822      	ldr	r2, [r4, #0]
 8001128:	6913      	ldr	r3, [r2, #16]
 800112a:	f023 0301 	bic.w	r3, r3, #1
 800112e:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001130:	6822      	ldr	r2, [r4, #0]
 8001132:	6913      	ldr	r3, [r2, #16]
 8001134:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800113a:	430b      	orrs	r3, r1
 800113c:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 800113e:	4620      	mov	r0, r4
 8001140:	f7ff fe86 	bl	8000e50 <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001144:	68e3      	ldr	r3, [r4, #12]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d046      	beq.n	80011d8 <HAL_ADC_Init+0x224>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800114a:	6822      	ldr	r2, [r4, #0]
 800114c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800114e:	f023 030f 	bic.w	r3, r3, #15
 8001152:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001154:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001156:	f023 0303 	bic.w	r3, r3, #3
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	6563      	str	r3, [r4, #84]	; 0x54
 8001160:	e048      	b.n	80011f4 <HAL_ADC_Init+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001162:	2500      	movs	r5, #0
 8001164:	e769      	b.n	800103a <HAL_ADC_Init+0x86>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001166:	2100      	movs	r1, #0
 8001168:	e76d      	b.n	8001046 <HAL_ADC_Init+0x92>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800116a:	2200      	movs	r2, #0
 800116c:	e78b      	b.n	8001086 <HAL_ADC_Init+0xd2>
 800116e:	2100      	movs	r1, #0
 8001170:	e78f      	b.n	8001092 <HAL_ADC_Init+0xde>
 8001172:	4a2c      	ldr	r2, [pc, #176]	; (8001224 <HAL_ADC_Init+0x270>)
 8001174:	6892      	ldr	r2, [r2, #8]
 8001176:	f012 0f01 	tst.w	r2, #1
 800117a:	d003      	beq.n	8001184 <HAL_ADC_Init+0x1d0>
 800117c:	2201      	movs	r2, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800117e:	f082 0201 	eor.w	r2, r2, #1
 8001182:	e78a      	b.n	800109a <HAL_ADC_Init+0xe6>
 8001184:	2200      	movs	r2, #0
 8001186:	e7fa      	b.n	800117e <HAL_ADC_Init+0x1ca>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001188:	4927      	ldr	r1, [pc, #156]	; (8001228 <HAL_ADC_Init+0x274>)
 800118a:	e78a      	b.n	80010a2 <HAL_ADC_Init+0xee>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800118c:	7d61      	ldrb	r1, [r4, #21]
                  hadc->Init.Overrun                                                    |
 800118e:	6b22      	ldr	r2, [r4, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001190:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
                  hadc->Init.Overrun                                                    |
 8001194:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8001196:	7f22      	ldrb	r2, [r4, #28]
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8001198:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800119c:	f043 030c 	orr.w	r3, r3, #12
 80011a0:	e797      	b.n	80010d2 <HAL_ADC_Init+0x11e>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80011a2:	6a22      	ldr	r2, [r4, #32]
 80011a4:	3a01      	subs	r2, #1
 80011a6:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80011aa:	e795      	b.n	80010d8 <HAL_ADC_Init+0x124>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011ac:	2100      	movs	r1, #0
 80011ae:	e7a6      	b.n	80010fe <HAL_ADC_Init+0x14a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011b0:	2200      	movs	r2, #0
 80011b2:	e7a9      	b.n	8001108 <HAL_ADC_Init+0x154>
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80011b4:	6820      	ldr	r0, [r4, #0]
 80011b6:	6902      	ldr	r2, [r0, #16]
 80011b8:	4b1c      	ldr	r3, [pc, #112]	; (800122c <HAL_ADC_Init+0x278>)
 80011ba:	4013      	ands	r3, r2
 80011bc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80011be:	1e51      	subs	r1, r2, #1
 80011c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80011c2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80011c6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80011c8:	430a      	orrs	r2, r1
 80011ca:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80011cc:	430a      	orrs	r2, r1
 80011ce:	4313      	orrs	r3, r2
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6103      	str	r3, [r0, #16]
 80011d6:	e7ab      	b.n	8001130 <HAL_ADC_Init+0x17c>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80011d8:	6821      	ldr	r1, [r4, #0]
 80011da:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80011dc:	f023 030f 	bic.w	r3, r3, #15
 80011e0:	69a2      	ldr	r2, [r4, #24]
 80011e2:	3a01      	subs	r2, #1
 80011e4:	4313      	orrs	r3, r2
 80011e6:	630b      	str	r3, [r1, #48]	; 0x30
 80011e8:	e7b4      	b.n	8001154 <HAL_ADC_Init+0x1a0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80011ec:	f043 0310 	orr.w	r3, r3, #16
 80011f0:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80011f2:	2501      	movs	r5, #1
}
 80011f4:	4628      	mov	r0, r5
 80011f6:	b003      	add	sp, #12
 80011f8:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80011fa:	2501      	movs	r5, #1
 80011fc:	e7fa      	b.n	80011f4 <HAL_ADC_Init+0x240>
 80011fe:	bf00      	nop
 8001200:	5fffffc0 	.word	0x5fffffc0
 8001204:	6fffffc0 	.word	0x6fffffc0
 8001208:	20000010 	.word	0x20000010
 800120c:	053e2d63 	.word	0x053e2d63
 8001210:	40022000 	.word	0x40022000
 8001214:	40022100 	.word	0x40022100
 8001218:	40022300 	.word	0x40022300
 800121c:	fff0c003 	.word	0xfff0c003
 8001220:	ffffbffc 	.word	0xffffbffc
 8001224:	58026000 	.word	0x58026000
 8001228:	58026300 	.word	0x58026300
 800122c:	fc00f81e 	.word	0xfc00f81e

08001230 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001230:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8001234:	2a01      	cmp	r2, #1
 8001236:	f000 80aa 	beq.w	800138e <HAL_ADCEx_MultiModeConfigChannel+0x15e>
{
 800123a:	b430      	push	{r4, r5}
 800123c:	b09a      	sub	sp, #104	; 0x68
 800123e:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8001240:	2201      	movs	r2, #1
 8001242:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001246:	6802      	ldr	r2, [r0, #0]
 8001248:	4852      	ldr	r0, [pc, #328]	; (8001394 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 800124a:	4282      	cmp	r2, r0
 800124c:	d043      	beq.n	80012d6 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800124e:	2000      	movs	r0, #0
 8001250:	9001      	str	r0, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8001252:	9801      	ldr	r0, [sp, #4]
 8001254:	2800      	cmp	r0, #0
 8001256:	d042      	beq.n	80012de <HAL_ADCEx_MultiModeConfigChannel+0xae>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001258:	6880      	ldr	r0, [r0, #8]
 800125a:	f010 0f04 	tst.w	r0, #4
 800125e:	d047      	beq.n	80012f0 <HAL_ADCEx_MultiModeConfigChannel+0xc0>
 8001260:	2401      	movs	r4, #1
 8001262:	6890      	ldr	r0, [r2, #8]
 8001264:	f010 0f04 	tst.w	r0, #4
 8001268:	f040 8082 	bne.w	8001370 <HAL_ADCEx_MultiModeConfigChannel+0x140>
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 800126c:	2c00      	cmp	r4, #0
 800126e:	d17f      	bne.n	8001370 <HAL_ADCEx_MultiModeConfigChannel+0x140>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001270:	4c48      	ldr	r4, [pc, #288]	; (8001394 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 8001272:	4849      	ldr	r0, [pc, #292]	; (8001398 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 8001274:	4282      	cmp	r2, r0
 8001276:	bf18      	it	ne
 8001278:	42a2      	cmpne	r2, r4
 800127a:	d13b      	bne.n	80012f4 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 800127c:	f500 7000 	add.w	r0, r0, #512	; 0x200

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001280:	680a      	ldr	r2, [r1, #0]
 8001282:	2a00      	cmp	r2, #0
 8001284:	d047      	beq.n	8001316 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8001286:	6882      	ldr	r2, [r0, #8]
 8001288:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800128c:	684c      	ldr	r4, [r1, #4]
 800128e:	4322      	orrs	r2, r4
 8001290:	6082      	str	r2, [r0, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4d3f      	ldr	r5, [pc, #252]	; (8001394 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 8001296:	4c40      	ldr	r4, [pc, #256]	; (8001398 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 8001298:	42a2      	cmp	r2, r4
 800129a:	bf18      	it	ne
 800129c:	42aa      	cmpne	r2, r5
 800129e:	d12f      	bne.n	8001300 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012a0:	68aa      	ldr	r2, [r5, #8]
 80012a2:	f012 0f01 	tst.w	r2, #1
 80012a6:	d027      	beq.n	80012f8 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
 80012a8:	2401      	movs	r4, #1
 80012aa:	4a3b      	ldr	r2, [pc, #236]	; (8001398 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 80012ac:	6892      	ldr	r2, [r2, #8]
 80012ae:	f012 0f01 	tst.w	r2, #1
 80012b2:	d023      	beq.n	80012fc <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80012b4:	2201      	movs	r2, #1
 80012b6:	4322      	orrs	r2, r4
 80012b8:	bf0c      	ite	eq
 80012ba:	2201      	moveq	r2, #1
 80012bc:	2200      	movne	r2, #0
 80012be:	2a00      	cmp	r2, #0
 80012c0:	d061      	beq.n	8001386 <HAL_ADCEx_MultiModeConfigChannel+0x156>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80012c2:	6884      	ldr	r4, [r0, #8]
 80012c4:	4a35      	ldr	r2, [pc, #212]	; (800139c <HAL_ADCEx_MultiModeConfigChannel+0x16c>)
 80012c6:	4022      	ands	r2, r4
 80012c8:	680c      	ldr	r4, [r1, #0]
 80012ca:	6889      	ldr	r1, [r1, #8]
 80012cc:	4321      	orrs	r1, r4
 80012ce:	430a      	orrs	r2, r1
 80012d0:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012d2:	2000      	movs	r0, #0
 80012d4:	e051      	b.n	800137a <HAL_ADCEx_MultiModeConfigChannel+0x14a>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80012d6:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80012da:	9001      	str	r0, [sp, #4]
 80012dc:	e7b9      	b.n	8001252 <HAL_ADCEx_MultiModeConfigChannel+0x22>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80012e0:	f042 0220 	orr.w	r2, r2, #32
 80012e4:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80012ec:	2001      	movs	r0, #1
 80012ee:	e047      	b.n	8001380 <HAL_ADCEx_MultiModeConfigChannel+0x150>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012f0:	2400      	movs	r4, #0
 80012f2:	e7b6      	b.n	8001262 <HAL_ADCEx_MultiModeConfigChannel+0x32>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80012f4:	482a      	ldr	r0, [pc, #168]	; (80013a0 <HAL_ADCEx_MultiModeConfigChannel+0x170>)
 80012f6:	e7c3      	b.n	8001280 <HAL_ADCEx_MultiModeConfigChannel+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012f8:	2400      	movs	r4, #0
 80012fa:	e7d6      	b.n	80012aa <HAL_ADCEx_MultiModeConfigChannel+0x7a>
 80012fc:	2200      	movs	r2, #0
 80012fe:	e7da      	b.n	80012b6 <HAL_ADCEx_MultiModeConfigChannel+0x86>
 8001300:	4a28      	ldr	r2, [pc, #160]	; (80013a4 <HAL_ADCEx_MultiModeConfigChannel+0x174>)
 8001302:	6892      	ldr	r2, [r2, #8]
 8001304:	f012 0f01 	tst.w	r2, #1
 8001308:	d003      	beq.n	8001312 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 800130a:	2201      	movs	r2, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800130c:	f082 0201 	eor.w	r2, r2, #1
 8001310:	e7d5      	b.n	80012be <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 8001312:	2200      	movs	r2, #0
 8001314:	e7fa      	b.n	800130c <HAL_ADCEx_MultiModeConfigChannel+0xdc>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8001316:	6881      	ldr	r1, [r0, #8]
 8001318:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 800131c:	6081      	str	r1, [r0, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800131e:	6819      	ldr	r1, [r3, #0]
 8001320:	4d1c      	ldr	r5, [pc, #112]	; (8001394 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 8001322:	4c1d      	ldr	r4, [pc, #116]	; (8001398 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 8001324:	42a1      	cmp	r1, r4
 8001326:	bf18      	it	ne
 8001328:	42a9      	cmpne	r1, r5
 800132a:	d117      	bne.n	800135c <HAL_ADCEx_MultiModeConfigChannel+0x12c>
 800132c:	68a9      	ldr	r1, [r5, #8]
 800132e:	f011 0f01 	tst.w	r1, #1
 8001332:	d011      	beq.n	8001358 <HAL_ADCEx_MultiModeConfigChannel+0x128>
 8001334:	2401      	movs	r4, #1
 8001336:	4918      	ldr	r1, [pc, #96]	; (8001398 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 8001338:	6889      	ldr	r1, [r1, #8]
 800133a:	f011 0f01 	tst.w	r1, #1
 800133e:	d000      	beq.n	8001342 <HAL_ADCEx_MultiModeConfigChannel+0x112>
 8001340:	2201      	movs	r2, #1
 8001342:	4322      	orrs	r2, r4
 8001344:	bf0c      	ite	eq
 8001346:	2201      	moveq	r2, #1
 8001348:	2200      	movne	r2, #0
 800134a:	b1f2      	cbz	r2, 800138a <HAL_ADCEx_MultiModeConfigChannel+0x15a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800134c:	6881      	ldr	r1, [r0, #8]
 800134e:	4a13      	ldr	r2, [pc, #76]	; (800139c <HAL_ADCEx_MultiModeConfigChannel+0x16c>)
 8001350:	400a      	ands	r2, r1
 8001352:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001354:	2000      	movs	r0, #0
 8001356:	e010      	b.n	800137a <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 8001358:	4614      	mov	r4, r2
 800135a:	e7ec      	b.n	8001336 <HAL_ADCEx_MultiModeConfigChannel+0x106>
 800135c:	4911      	ldr	r1, [pc, #68]	; (80013a4 <HAL_ADCEx_MultiModeConfigChannel+0x174>)
 800135e:	6889      	ldr	r1, [r1, #8]
 8001360:	f011 0f01 	tst.w	r1, #1
 8001364:	d000      	beq.n	8001368 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8001366:	2201      	movs	r2, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001368:	fab2 f282 	clz	r2, r2
 800136c:	0952      	lsrs	r2, r2, #5
 800136e:	e7ec      	b.n	800134a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001370:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001372:	f042 0220 	orr.w	r2, r2, #32
 8001376:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001378:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8001380:	b01a      	add	sp, #104	; 0x68
 8001382:	bc30      	pop	{r4, r5}
 8001384:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001386:	2000      	movs	r0, #0
 8001388:	e7f7      	b.n	800137a <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 800138a:	2000      	movs	r0, #0
 800138c:	e7f5      	b.n	800137a <HAL_ADCEx_MultiModeConfigChannel+0x14a>
  __HAL_LOCK(hadc);
 800138e:	2002      	movs	r0, #2
}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40022000 	.word	0x40022000
 8001398:	40022100 	.word	0x40022100
 800139c:	fffff0e0 	.word	0xfffff0e0
 80013a0:	58026300 	.word	0x58026300
 80013a4:	58026000 	.word	0x58026000

080013a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a8:	4906      	ldr	r1, [pc, #24]	; (80013c4 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80013aa:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013b0:	041b      	lsls	r3, r3, #16
 80013b2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b4:	0200      	lsls	r0, r0, #8
 80013b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ba:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80013bc:	4a02      	ldr	r2, [pc, #8]	; (80013c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80013be:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80013c0:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00
 80013c8:	05fa0000 	.word	0x05fa0000

080013cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013cc:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_NVIC_SetPriority+0x58>)
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d6:	f1c3 0407 	rsb	r4, r3, #7
 80013da:	2c04      	cmp	r4, #4
 80013dc:	bf28      	it	cs
 80013de:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e0:	1d1d      	adds	r5, r3, #4
 80013e2:	2d06      	cmp	r5, #6
 80013e4:	d914      	bls.n	8001410 <HAL_NVIC_SetPriority+0x44>
 80013e6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80013ec:	fa05 f404 	lsl.w	r4, r5, r4
 80013f0:	ea21 0104 	bic.w	r1, r1, r4
 80013f4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f6:	fa05 f303 	lsl.w	r3, r5, r3
 80013fa:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fe:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001400:	2800      	cmp	r0, #0
 8001402:	db07      	blt.n	8001414 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001404:	0109      	lsls	r1, r1, #4
 8001406:	b2c9      	uxtb	r1, r1
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <HAL_NVIC_SetPriority+0x5c>)
 800140a:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800140c:	bc30      	pop	{r4, r5}
 800140e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001410:	2300      	movs	r3, #0
 8001412:	e7e9      	b.n	80013e8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	f000 000f 	and.w	r0, r0, #15
 8001418:	0109      	lsls	r1, r1, #4
 800141a:	b2c9      	uxtb	r1, r1
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <HAL_NVIC_SetPriority+0x60>)
 800141e:	5419      	strb	r1, [r3, r0]
 8001420:	e7f4      	b.n	800140c <HAL_NVIC_SetPriority+0x40>
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00
 8001428:	e000e400 	.word	0xe000e400
 800142c:	e000ed14 	.word	0xe000ed14

08001430 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001430:	2800      	cmp	r0, #0
 8001432:	db07      	blt.n	8001444 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001434:	f000 021f 	and.w	r2, r0, #31
 8001438:	0940      	lsrs	r0, r0, #5
 800143a:	2301      	movs	r3, #1
 800143c:	4093      	lsls	r3, r2
 800143e:	4a02      	ldr	r2, [pc, #8]	; (8001448 <HAL_NVIC_EnableIRQ+0x18>)
 8001440:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000e100 	.word	0xe000e100

0800144c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800144c:	3801      	subs	r0, #1
 800144e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001452:	d20a      	bcs.n	800146a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_SYSTICK_Config+0x24>)
 8001456:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001458:	4a06      	ldr	r2, [pc, #24]	; (8001474 <HAL_SYSTICK_Config+0x28>)
 800145a:	21f0      	movs	r1, #240	; 0xf0
 800145c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001460:	2000      	movs	r0, #0
 8001462:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001464:	2207      	movs	r2, #7
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800146a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000e010 	.word	0xe000e010
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8001478:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800147c:	4a04      	ldr	r2, [pc, #16]	; (8001490 <HAL_MPU_Disable+0x18>)
 800147e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001484:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001486:	4b03      	ldr	r3, [pc, #12]	; (8001494 <HAL_MPU_Disable+0x1c>)
 8001488:	2200      	movs	r2, #0
 800148a:	605a      	str	r2, [r3, #4]
}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000ed00 	.word	0xe000ed00
 8001494:	e000ed90 	.word	0xe000ed90

08001498 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001498:	f040 0001 	orr.w	r0, r0, #1
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_MPU_Enable+0x1c>)
 800149e:	6058      	str	r0, [r3, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80014a0:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <HAL_MPU_Enable+0x20>)
 80014a2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80014a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80014aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80014ae:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80014b2:	4770      	bx	lr
 80014b4:	e000ed90 	.word	0xe000ed90
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80014bc:	7842      	ldrb	r2, [r0, #1]
 80014be:	4b13      	ldr	r3, [pc, #76]	; (800150c <HAL_MPU_ConfigRegion+0x50>)
 80014c0:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80014c2:	7803      	ldrb	r3, [r0, #0]
 80014c4:	b923      	cbnz	r3, 80014d0 <HAL_MPU_ConfigRegion+0x14>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_MPU_ConfigRegion+0x50>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80014cc:	611a      	str	r2, [r3, #16]
  }
}
 80014ce:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 80014d0:	6843      	ldr	r3, [r0, #4]
 80014d2:	4a0e      	ldr	r2, [pc, #56]	; (800150c <HAL_MPU_ConfigRegion+0x50>)
 80014d4:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014d6:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014d8:	7ac3      	ldrb	r3, [r0, #11]
 80014da:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014dc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014e0:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014e2:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014e6:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014e8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80014ec:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014ee:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014f2:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80014f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80014f8:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014fa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014fe:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001500:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001504:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001506:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001508:	6113      	str	r3, [r2, #16]
 800150a:	4770      	bx	lr
 800150c:	e000ed90 	.word	0xe000ed90

08001510 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001510:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001512:	6d87      	ldr	r7, [r0, #88]	; 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001514:	6804      	ldr	r4, [r0, #0]
 8001516:	4e65      	ldr	r6, [pc, #404]	; (80016ac <DMA_SetConfig+0x19c>)
 8001518:	4d65      	ldr	r5, [pc, #404]	; (80016b0 <DMA_SetConfig+0x1a0>)
 800151a:	42ac      	cmp	r4, r5
 800151c:	bf18      	it	ne
 800151e:	42b4      	cmpne	r4, r6
 8001520:	d042      	beq.n	80015a8 <DMA_SetConfig+0x98>
 8001522:	3518      	adds	r5, #24
 8001524:	42ac      	cmp	r4, r5
 8001526:	d03f      	beq.n	80015a8 <DMA_SetConfig+0x98>
 8001528:	3518      	adds	r5, #24
 800152a:	42ac      	cmp	r4, r5
 800152c:	d03c      	beq.n	80015a8 <DMA_SetConfig+0x98>
 800152e:	3518      	adds	r5, #24
 8001530:	42ac      	cmp	r4, r5
 8001532:	d039      	beq.n	80015a8 <DMA_SetConfig+0x98>
 8001534:	3518      	adds	r5, #24
 8001536:	42ac      	cmp	r4, r5
 8001538:	d036      	beq.n	80015a8 <DMA_SetConfig+0x98>
 800153a:	3518      	adds	r5, #24
 800153c:	42ac      	cmp	r4, r5
 800153e:	d033      	beq.n	80015a8 <DMA_SetConfig+0x98>
 8001540:	3518      	adds	r5, #24
 8001542:	42ac      	cmp	r4, r5
 8001544:	d030      	beq.n	80015a8 <DMA_SetConfig+0x98>
 8001546:	f505 7556 	add.w	r5, r5, #856	; 0x358
 800154a:	42ac      	cmp	r4, r5
 800154c:	d02c      	beq.n	80015a8 <DMA_SetConfig+0x98>
 800154e:	3518      	adds	r5, #24
 8001550:	42ac      	cmp	r4, r5
 8001552:	d029      	beq.n	80015a8 <DMA_SetConfig+0x98>
 8001554:	3518      	adds	r5, #24
 8001556:	42ac      	cmp	r4, r5
 8001558:	d026      	beq.n	80015a8 <DMA_SetConfig+0x98>
 800155a:	3518      	adds	r5, #24
 800155c:	42ac      	cmp	r4, r5
 800155e:	d023      	beq.n	80015a8 <DMA_SetConfig+0x98>
 8001560:	3518      	adds	r5, #24
 8001562:	42ac      	cmp	r4, r5
 8001564:	d020      	beq.n	80015a8 <DMA_SetConfig+0x98>
 8001566:	3518      	adds	r5, #24
 8001568:	42ac      	cmp	r4, r5
 800156a:	d01d      	beq.n	80015a8 <DMA_SetConfig+0x98>
 800156c:	3518      	adds	r5, #24
 800156e:	42ac      	cmp	r4, r5
 8001570:	d01a      	beq.n	80015a8 <DMA_SetConfig+0x98>
 8001572:	3518      	adds	r5, #24
 8001574:	42ac      	cmp	r4, r5
 8001576:	d017      	beq.n	80015a8 <DMA_SetConfig+0x98>
 8001578:	4d4e      	ldr	r5, [pc, #312]	; (80016b4 <DMA_SetConfig+0x1a4>)
 800157a:	42ac      	cmp	r4, r5
 800157c:	d014      	beq.n	80015a8 <DMA_SetConfig+0x98>
 800157e:	3514      	adds	r5, #20
 8001580:	42ac      	cmp	r4, r5
 8001582:	d011      	beq.n	80015a8 <DMA_SetConfig+0x98>
 8001584:	3514      	adds	r5, #20
 8001586:	42ac      	cmp	r4, r5
 8001588:	d00e      	beq.n	80015a8 <DMA_SetConfig+0x98>
 800158a:	3514      	adds	r5, #20
 800158c:	42ac      	cmp	r4, r5
 800158e:	d00b      	beq.n	80015a8 <DMA_SetConfig+0x98>
 8001590:	3514      	adds	r5, #20
 8001592:	42ac      	cmp	r4, r5
 8001594:	d008      	beq.n	80015a8 <DMA_SetConfig+0x98>
 8001596:	3514      	adds	r5, #20
 8001598:	42ac      	cmp	r4, r5
 800159a:	d005      	beq.n	80015a8 <DMA_SetConfig+0x98>
 800159c:	3514      	adds	r5, #20
 800159e:	42ac      	cmp	r4, r5
 80015a0:	d002      	beq.n	80015a8 <DMA_SetConfig+0x98>
 80015a2:	3514      	adds	r5, #20
 80015a4:	42ac      	cmp	r4, r5
 80015a6:	d107      	bne.n	80015b8 <DMA_SetConfig+0xa8>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015a8:	6e44      	ldr	r4, [r0, #100]	; 0x64
 80015aa:	6e85      	ldr	r5, [r0, #104]	; 0x68
 80015ac:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80015ae:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 80015b0:	b114      	cbz	r4, 80015b8 <DMA_SetConfig+0xa8>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015b2:	6f04      	ldr	r4, [r0, #112]	; 0x70
 80015b4:	6f45      	ldr	r5, [r0, #116]	; 0x74
 80015b6:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80015b8:	6804      	ldr	r4, [r0, #0]
 80015ba:	4e3c      	ldr	r6, [pc, #240]	; (80016ac <DMA_SetConfig+0x19c>)
 80015bc:	4d3c      	ldr	r5, [pc, #240]	; (80016b0 <DMA_SetConfig+0x1a0>)
 80015be:	42ac      	cmp	r4, r5
 80015c0:	bf18      	it	ne
 80015c2:	42b4      	cmpne	r4, r6
 80015c4:	d052      	beq.n	800166c <DMA_SetConfig+0x15c>
 80015c6:	3518      	adds	r5, #24
 80015c8:	42ac      	cmp	r4, r5
 80015ca:	d04f      	beq.n	800166c <DMA_SetConfig+0x15c>
 80015cc:	3518      	adds	r5, #24
 80015ce:	42ac      	cmp	r4, r5
 80015d0:	d04c      	beq.n	800166c <DMA_SetConfig+0x15c>
 80015d2:	3518      	adds	r5, #24
 80015d4:	42ac      	cmp	r4, r5
 80015d6:	d049      	beq.n	800166c <DMA_SetConfig+0x15c>
 80015d8:	3518      	adds	r5, #24
 80015da:	42ac      	cmp	r4, r5
 80015dc:	d046      	beq.n	800166c <DMA_SetConfig+0x15c>
 80015de:	3518      	adds	r5, #24
 80015e0:	42ac      	cmp	r4, r5
 80015e2:	d043      	beq.n	800166c <DMA_SetConfig+0x15c>
 80015e4:	3518      	adds	r5, #24
 80015e6:	42ac      	cmp	r4, r5
 80015e8:	d040      	beq.n	800166c <DMA_SetConfig+0x15c>
 80015ea:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80015ee:	42ac      	cmp	r4, r5
 80015f0:	d03c      	beq.n	800166c <DMA_SetConfig+0x15c>
 80015f2:	3518      	adds	r5, #24
 80015f4:	42ac      	cmp	r4, r5
 80015f6:	d039      	beq.n	800166c <DMA_SetConfig+0x15c>
 80015f8:	3518      	adds	r5, #24
 80015fa:	42ac      	cmp	r4, r5
 80015fc:	d036      	beq.n	800166c <DMA_SetConfig+0x15c>
 80015fe:	3518      	adds	r5, #24
 8001600:	42ac      	cmp	r4, r5
 8001602:	d033      	beq.n	800166c <DMA_SetConfig+0x15c>
 8001604:	3518      	adds	r5, #24
 8001606:	42ac      	cmp	r4, r5
 8001608:	d030      	beq.n	800166c <DMA_SetConfig+0x15c>
 800160a:	3518      	adds	r5, #24
 800160c:	42ac      	cmp	r4, r5
 800160e:	d02d      	beq.n	800166c <DMA_SetConfig+0x15c>
 8001610:	3518      	adds	r5, #24
 8001612:	42ac      	cmp	r4, r5
 8001614:	d02a      	beq.n	800166c <DMA_SetConfig+0x15c>
 8001616:	3518      	adds	r5, #24
 8001618:	42ac      	cmp	r4, r5
 800161a:	d027      	beq.n	800166c <DMA_SetConfig+0x15c>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800161c:	4e25      	ldr	r6, [pc, #148]	; (80016b4 <DMA_SetConfig+0x1a4>)
 800161e:	4d26      	ldr	r5, [pc, #152]	; (80016b8 <DMA_SetConfig+0x1a8>)
 8001620:	42ac      	cmp	r4, r5
 8001622:	bf18      	it	ne
 8001624:	42b4      	cmpne	r4, r6
 8001626:	d011      	beq.n	800164c <DMA_SetConfig+0x13c>
 8001628:	4d24      	ldr	r5, [pc, #144]	; (80016bc <DMA_SetConfig+0x1ac>)
 800162a:	42ac      	cmp	r4, r5
 800162c:	d00e      	beq.n	800164c <DMA_SetConfig+0x13c>
 800162e:	3514      	adds	r5, #20
 8001630:	42ac      	cmp	r4, r5
 8001632:	d00b      	beq.n	800164c <DMA_SetConfig+0x13c>
 8001634:	3514      	adds	r5, #20
 8001636:	42ac      	cmp	r4, r5
 8001638:	d008      	beq.n	800164c <DMA_SetConfig+0x13c>
 800163a:	3514      	adds	r5, #20
 800163c:	42ac      	cmp	r4, r5
 800163e:	d005      	beq.n	800164c <DMA_SetConfig+0x13c>
 8001640:	3514      	adds	r5, #20
 8001642:	42ac      	cmp	r4, r5
 8001644:	d002      	beq.n	800164c <DMA_SetConfig+0x13c>
 8001646:	3514      	adds	r5, #20
 8001648:	42ac      	cmp	r4, r5
 800164a:	d123      	bne.n	8001694 <DMA_SetConfig+0x184>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800164c:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 800164e:	f004 051f 	and.w	r5, r4, #31
 8001652:	2401      	movs	r4, #1
 8001654:	40ac      	lsls	r4, r5
 8001656:	607c      	str	r4, [r7, #4]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8001658:	6804      	ldr	r4, [r0, #0]
 800165a:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800165c:	6883      	ldr	r3, [r0, #8]
 800165e:	2b40      	cmp	r3, #64	; 0x40
 8001660:	d01f      	beq.n	80016a2 <DMA_SetConfig+0x192>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8001662:	6803      	ldr	r3, [r0, #0]
 8001664:	6099      	str	r1, [r3, #8]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8001666:	6803      	ldr	r3, [r0, #0]
 8001668:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800166a:	e013      	b.n	8001694 <DMA_SetConfig+0x184>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800166c:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 800166e:	f004 051f 	and.w	r5, r4, #31
 8001672:	243f      	movs	r4, #63	; 0x3f
 8001674:	40ac      	lsls	r4, r5
 8001676:	60bc      	str	r4, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001678:	6805      	ldr	r5, [r0, #0]
 800167a:	682c      	ldr	r4, [r5, #0]
 800167c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001680:	602c      	str	r4, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8001682:	6804      	ldr	r4, [r0, #0]
 8001684:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001686:	6883      	ldr	r3, [r0, #8]
 8001688:	2b40      	cmp	r3, #64	; 0x40
 800168a:	d005      	beq.n	8001698 <DMA_SetConfig+0x188>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800168c:	6803      	ldr	r3, [r0, #0]
 800168e:	6099      	str	r1, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8001690:	6803      	ldr	r3, [r0, #0]
 8001692:	60da      	str	r2, [r3, #12]
}
 8001694:	bcf0      	pop	{r4, r5, r6, r7}
 8001696:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8001698:	6803      	ldr	r3, [r0, #0]
 800169a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800169c:	6803      	ldr	r3, [r0, #0]
 800169e:	60d9      	str	r1, [r3, #12]
 80016a0:	e7f8      	b.n	8001694 <DMA_SetConfig+0x184>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80016a2:	6803      	ldr	r3, [r0, #0]
 80016a4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80016a6:	6803      	ldr	r3, [r0, #0]
 80016a8:	60d9      	str	r1, [r3, #12]
 80016aa:	e7f3      	b.n	8001694 <DMA_SetConfig+0x184>
 80016ac:	40020010 	.word	0x40020010
 80016b0:	40020028 	.word	0x40020028
 80016b4:	58025408 	.word	0x58025408
 80016b8:	5802541c 	.word	0x5802541c
 80016bc:	58025430 	.word	0x58025430

080016c0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80016c0:	6802      	ldr	r2, [r0, #0]
 80016c2:	4928      	ldr	r1, [pc, #160]	; (8001764 <DMA_CalcBaseAndBitshift+0xa4>)
 80016c4:	4b28      	ldr	r3, [pc, #160]	; (8001768 <DMA_CalcBaseAndBitshift+0xa8>)
 80016c6:	429a      	cmp	r2, r3
 80016c8:	bf18      	it	ne
 80016ca:	428a      	cmpne	r2, r1
 80016cc:	d02f      	beq.n	800172e <DMA_CalcBaseAndBitshift+0x6e>
 80016ce:	3318      	adds	r3, #24
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d02c      	beq.n	800172e <DMA_CalcBaseAndBitshift+0x6e>
 80016d4:	3318      	adds	r3, #24
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d029      	beq.n	800172e <DMA_CalcBaseAndBitshift+0x6e>
 80016da:	3318      	adds	r3, #24
 80016dc:	429a      	cmp	r2, r3
 80016de:	d026      	beq.n	800172e <DMA_CalcBaseAndBitshift+0x6e>
 80016e0:	3318      	adds	r3, #24
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d023      	beq.n	800172e <DMA_CalcBaseAndBitshift+0x6e>
 80016e6:	3318      	adds	r3, #24
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d020      	beq.n	800172e <DMA_CalcBaseAndBitshift+0x6e>
 80016ec:	3318      	adds	r3, #24
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d01d      	beq.n	800172e <DMA_CalcBaseAndBitshift+0x6e>
 80016f2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d019      	beq.n	800172e <DMA_CalcBaseAndBitshift+0x6e>
 80016fa:	3318      	adds	r3, #24
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d016      	beq.n	800172e <DMA_CalcBaseAndBitshift+0x6e>
 8001700:	3318      	adds	r3, #24
 8001702:	429a      	cmp	r2, r3
 8001704:	d013      	beq.n	800172e <DMA_CalcBaseAndBitshift+0x6e>
 8001706:	3318      	adds	r3, #24
 8001708:	429a      	cmp	r2, r3
 800170a:	d010      	beq.n	800172e <DMA_CalcBaseAndBitshift+0x6e>
 800170c:	3318      	adds	r3, #24
 800170e:	429a      	cmp	r2, r3
 8001710:	d00d      	beq.n	800172e <DMA_CalcBaseAndBitshift+0x6e>
 8001712:	3318      	adds	r3, #24
 8001714:	429a      	cmp	r2, r3
 8001716:	d00a      	beq.n	800172e <DMA_CalcBaseAndBitshift+0x6e>
 8001718:	3318      	adds	r3, #24
 800171a:	429a      	cmp	r2, r3
 800171c:	d007      	beq.n	800172e <DMA_CalcBaseAndBitshift+0x6e>
 800171e:	3318      	adds	r3, #24
 8001720:	429a      	cmp	r2, r3
 8001722:	d004      	beq.n	800172e <DMA_CalcBaseAndBitshift+0x6e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8001724:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001728:	6582      	str	r2, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 800172a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800172c:	4770      	bx	lr
{
 800172e:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001730:	b2d3      	uxtb	r3, r2
 8001732:	3b10      	subs	r3, #16
 8001734:	490d      	ldr	r1, [pc, #52]	; (800176c <DMA_CalcBaseAndBitshift+0xac>)
 8001736:	fba1 1303 	umull	r1, r3, r1, r3
 800173a:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800173c:	f003 0107 	and.w	r1, r3, #7
 8001740:	4c0b      	ldr	r4, [pc, #44]	; (8001770 <DMA_CalcBaseAndBitshift+0xb0>)
 8001742:	5c61      	ldrb	r1, [r4, r1]
 8001744:	65c1      	str	r1, [r0, #92]	; 0x5c
    if (stream_number > 3U)
 8001746:	2b03      	cmp	r3, #3
 8001748:	d806      	bhi.n	8001758 <DMA_CalcBaseAndBitshift+0x98>
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <DMA_CalcBaseAndBitshift+0xb4>)
 800174c:	4013      	ands	r3, r2
 800174e:	6583      	str	r3, [r0, #88]	; 0x58
}
 8001750:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001752:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001756:	4770      	bx	lr
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <DMA_CalcBaseAndBitshift+0xb4>)
 800175a:	4013      	ands	r3, r2
 800175c:	3304      	adds	r3, #4
 800175e:	6583      	str	r3, [r0, #88]	; 0x58
 8001760:	e7f6      	b.n	8001750 <DMA_CalcBaseAndBitshift+0x90>
 8001762:	bf00      	nop
 8001764:	40020010 	.word	0x40020010
 8001768:	40020028 	.word	0x40020028
 800176c:	aaaaaaab 	.word	0xaaaaaaab
 8001770:	0800f81c 	.word	0x0800f81c
 8001774:	fffffc00 	.word	0xfffffc00

08001778 <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001778:	6983      	ldr	r3, [r0, #24]
 800177a:	b99b      	cbnz	r3, 80017a4 <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 800177c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800177e:	2b01      	cmp	r3, #1
 8001780:	d00a      	beq.n	8001798 <DMA_CheckFifoParam+0x20>
 8001782:	b11b      	cbz	r3, 800178c <DMA_CheckFifoParam+0x14>
 8001784:	2b02      	cmp	r3, #2
 8001786:	d001      	beq.n	800178c <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8001788:	2000      	movs	r0, #0
 800178a:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800178c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800178e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001792:	d12e      	bne.n	80017f2 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001794:	2000      	movs	r0, #0
 8001796:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001798:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800179a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800179e:	d02a      	beq.n	80017f6 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 80017a0:	2000      	movs	r0, #0
 80017a2:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017a8:	d006      	beq.n	80017b8 <DMA_CheckFifoParam+0x40>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80017aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d92a      	bls.n	8001806 <DMA_CheckFifoParam+0x8e>
 80017b0:	2b03      	cmp	r3, #3
 80017b2:	d016      	beq.n	80017e2 <DMA_CheckFifoParam+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
 80017b4:	2000      	movs	r0, #0
 80017b6:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 80017b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d803      	bhi.n	80017c6 <DMA_CheckFifoParam+0x4e>
 80017be:	e8df f003 	tbb	[pc, r3]
 80017c2:	041c      	.short	0x041c
 80017c4:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 80017c6:	2000      	movs	r0, #0
 80017c8:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80017cc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80017d0:	d115      	bne.n	80017fe <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 80017d2:	2000      	movs	r0, #0
 80017d4:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80017d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017dc:	d011      	beq.n	8001802 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 80017de:	2000      	movs	r0, #0
 80017e0:	4770      	bx	lr
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80017e4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80017e8:	d001      	beq.n	80017ee <DMA_CheckFifoParam+0x76>
        {
          status = HAL_ERROR;
 80017ea:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 80017ec:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 80017ee:	2000      	movs	r0, #0
 80017f0:	4770      	bx	lr
          status = HAL_ERROR;
 80017f2:	2001      	movs	r0, #1
 80017f4:	4770      	bx	lr
          status = HAL_ERROR;
 80017f6:	2001      	movs	r0, #1
 80017f8:	4770      	bx	lr
        status = HAL_ERROR;
 80017fa:	2001      	movs	r0, #1
 80017fc:	4770      	bx	lr
          status = HAL_ERROR;
 80017fe:	2001      	movs	r0, #1
 8001800:	4770      	bx	lr
          status = HAL_ERROR;
 8001802:	2001      	movs	r0, #1
 8001804:	4770      	bx	lr
        status = HAL_ERROR;
 8001806:	2001      	movs	r0, #1
 8001808:	4770      	bx	lr
	...

0800180c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800180c:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800180e:	4922      	ldr	r1, [pc, #136]	; (8001898 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001810:	4a22      	ldr	r2, [pc, #136]	; (800189c <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8001812:	4293      	cmp	r3, r2
 8001814:	bf18      	it	ne
 8001816:	428b      	cmpne	r3, r1
 8001818:	d028      	beq.n	800186c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 800181a:	3214      	adds	r2, #20
 800181c:	4293      	cmp	r3, r2
 800181e:	d025      	beq.n	800186c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001820:	3214      	adds	r2, #20
 8001822:	4293      	cmp	r3, r2
 8001824:	d022      	beq.n	800186c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001826:	3214      	adds	r2, #20
 8001828:	4293      	cmp	r3, r2
 800182a:	d01f      	beq.n	800186c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 800182c:	3214      	adds	r2, #20
 800182e:	4293      	cmp	r3, r2
 8001830:	d01c      	beq.n	800186c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001832:	3214      	adds	r2, #20
 8001834:	4293      	cmp	r3, r2
 8001836:	d019      	beq.n	800186c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001838:	3214      	adds	r2, #20
 800183a:	4293      	cmp	r3, r2
 800183c:	d016      	beq.n	800186c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800183e:	b2da      	uxtb	r2, r3
 8001840:	3a10      	subs	r2, #16
 8001842:	4917      	ldr	r1, [pc, #92]	; (80018a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
 8001844:	fba1 1202 	umull	r1, r2, r1, r2
 8001848:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800184a:	4916      	ldr	r1, [pc, #88]	; (80018a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
 800184c:	4419      	add	r1, r3
 800184e:	29a8      	cmp	r1, #168	; 0xa8
 8001850:	d91f      	bls.n	8001892 <DMA_CalcDMAMUXChannelBaseAndMask+0x86>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
 8001854:	4413      	add	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	6603      	str	r3, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800185a:	4b14      	ldr	r3, [pc, #80]	; (80018ac <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 800185c:	6643      	str	r3, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800185e:	f002 021f 	and.w	r2, r2, #31
 8001862:	2301      	movs	r3, #1
 8001864:	fa03 f202 	lsl.w	r2, r3, r2
 8001868:	6682      	str	r2, [r0, #104]	; 0x68
  }
}
 800186a:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800186c:	b2db      	uxtb	r3, r3
 800186e:	3b08      	subs	r3, #8
 8001870:	4a0f      	ldr	r2, [pc, #60]	; (80018b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 8001872:	fba2 2303 	umull	r2, r3, r2, r3
 8001876:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001878:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 800187a:	441a      	add	r2, r3
 800187c:	0092      	lsls	r2, r2, #2
 800187e:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001880:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8001882:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001884:	f003 031f 	and.w	r3, r3, #31
 8001888:	2201      	movs	r2, #1
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	6683      	str	r3, [r0, #104]	; 0x68
 8001890:	4770      	bx	lr
      stream_number += 8U;
 8001892:	3208      	adds	r2, #8
 8001894:	e7dd      	b.n	8001852 <DMA_CalcDMAMUXChannelBaseAndMask+0x46>
 8001896:	bf00      	nop
 8001898:	58025408 	.word	0x58025408
 800189c:	5802541c 	.word	0x5802541c
 80018a0:	aaaaaaab 	.word	0xaaaaaaab
 80018a4:	bffdfbf0 	.word	0xbffdfbf0
 80018a8:	10008200 	.word	0x10008200
 80018ac:	40020880 	.word	0x40020880
 80018b0:	cccccccd 	.word	0xcccccccd
 80018b4:	16009600 	.word	0x16009600
 80018b8:	58025880 	.word	0x58025880

080018bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80018bc:	7901      	ldrb	r1, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80018be:	1e4a      	subs	r2, r1, #1
 80018c0:	2a07      	cmp	r2, #7
 80018c2:	d82c      	bhi.n	800191e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x62>
{
 80018c4:	b430      	push	{r4, r5}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80018c6:	6803      	ldr	r3, [r0, #0]
 80018c8:	4d15      	ldr	r5, [pc, #84]	; (8001920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 80018ca:	4c16      	ldr	r4, [pc, #88]	; (8001924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 80018cc:	42a3      	cmp	r3, r4
 80018ce:	bf18      	it	ne
 80018d0:	42ab      	cmpne	r3, r5
 80018d2:	d018      	beq.n	8001906 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80018d4:	3414      	adds	r4, #20
 80018d6:	42a3      	cmp	r3, r4
 80018d8:	d015      	beq.n	8001906 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80018da:	3414      	adds	r4, #20
 80018dc:	42a3      	cmp	r3, r4
 80018de:	d012      	beq.n	8001906 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80018e0:	3414      	adds	r4, #20
 80018e2:	42a3      	cmp	r3, r4
 80018e4:	d00f      	beq.n	8001906 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80018e6:	3414      	adds	r4, #20
 80018e8:	42a3      	cmp	r3, r4
 80018ea:	d00c      	beq.n	8001906 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80018ec:	3414      	adds	r4, #20
 80018ee:	42a3      	cmp	r3, r4
 80018f0:	d009      	beq.n	8001906 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80018f2:	3414      	adds	r4, #20
 80018f4:	42a3      	cmp	r3, r4
 80018f6:	d006      	beq.n	8001906 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80018f8:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 80018fa:	440b      	add	r3, r1
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001900:	4b0a      	ldr	r3, [pc, #40]	; (800192c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>)
 8001902:	6703      	str	r3, [r0, #112]	; 0x70
 8001904:	e005      	b.n	8001912 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x56>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 8001908:	440b      	add	r3, r1
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
 8001910:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8001912:	2301      	movs	r3, #1
 8001914:	fa03 f202 	lsl.w	r2, r3, r2
 8001918:	6742      	str	r2, [r0, #116]	; 0x74
  }
}
 800191a:	bc30      	pop	{r4, r5}
 800191c:	4770      	bx	lr
 800191e:	4770      	bx	lr
 8001920:	58025408 	.word	0x58025408
 8001924:	5802541c 	.word	0x5802541c
 8001928:	1000823f 	.word	0x1000823f
 800192c:	40020940 	.word	0x40020940
 8001930:	1600963f 	.word	0x1600963f
 8001934:	58025940 	.word	0x58025940

08001938 <HAL_DMA_Init>:
{
 8001938:	b570      	push	{r4, r5, r6, lr}
 800193a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800193c:	f7fe feae 	bl	800069c <HAL_GetTick>
  if(hdma == NULL)
 8001940:	2c00      	cmp	r4, #0
 8001942:	f000 81bd 	beq.w	8001cc0 <HAL_DMA_Init+0x388>
 8001946:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001948:	6823      	ldr	r3, [r4, #0]
 800194a:	49b7      	ldr	r1, [pc, #732]	; (8001c28 <HAL_DMA_Init+0x2f0>)
 800194c:	4ab7      	ldr	r2, [pc, #732]	; (8001c2c <HAL_DMA_Init+0x2f4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	bf18      	it	ne
 8001952:	428b      	cmpne	r3, r1
 8001954:	bf0c      	ite	eq
 8001956:	2201      	moveq	r2, #1
 8001958:	2200      	movne	r2, #0
 800195a:	d050      	beq.n	80019fe <HAL_DMA_Init+0xc6>
 800195c:	3130      	adds	r1, #48	; 0x30
 800195e:	428b      	cmp	r3, r1
 8001960:	d04d      	beq.n	80019fe <HAL_DMA_Init+0xc6>
 8001962:	3118      	adds	r1, #24
 8001964:	428b      	cmp	r3, r1
 8001966:	d04a      	beq.n	80019fe <HAL_DMA_Init+0xc6>
 8001968:	3118      	adds	r1, #24
 800196a:	428b      	cmp	r3, r1
 800196c:	d047      	beq.n	80019fe <HAL_DMA_Init+0xc6>
 800196e:	3118      	adds	r1, #24
 8001970:	428b      	cmp	r3, r1
 8001972:	d044      	beq.n	80019fe <HAL_DMA_Init+0xc6>
 8001974:	3118      	adds	r1, #24
 8001976:	428b      	cmp	r3, r1
 8001978:	d041      	beq.n	80019fe <HAL_DMA_Init+0xc6>
 800197a:	3118      	adds	r1, #24
 800197c:	428b      	cmp	r3, r1
 800197e:	d03e      	beq.n	80019fe <HAL_DMA_Init+0xc6>
 8001980:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8001984:	428b      	cmp	r3, r1
 8001986:	d03a      	beq.n	80019fe <HAL_DMA_Init+0xc6>
 8001988:	3118      	adds	r1, #24
 800198a:	428b      	cmp	r3, r1
 800198c:	d037      	beq.n	80019fe <HAL_DMA_Init+0xc6>
 800198e:	3118      	adds	r1, #24
 8001990:	428b      	cmp	r3, r1
 8001992:	d034      	beq.n	80019fe <HAL_DMA_Init+0xc6>
 8001994:	3118      	adds	r1, #24
 8001996:	428b      	cmp	r3, r1
 8001998:	d031      	beq.n	80019fe <HAL_DMA_Init+0xc6>
 800199a:	3118      	adds	r1, #24
 800199c:	428b      	cmp	r3, r1
 800199e:	d02e      	beq.n	80019fe <HAL_DMA_Init+0xc6>
 80019a0:	3118      	adds	r1, #24
 80019a2:	428b      	cmp	r3, r1
 80019a4:	d02b      	beq.n	80019fe <HAL_DMA_Init+0xc6>
 80019a6:	3118      	adds	r1, #24
 80019a8:	428b      	cmp	r3, r1
 80019aa:	d028      	beq.n	80019fe <HAL_DMA_Init+0xc6>
 80019ac:	3118      	adds	r1, #24
 80019ae:	428b      	cmp	r3, r1
 80019b0:	d025      	beq.n	80019fe <HAL_DMA_Init+0xc6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80019b2:	499f      	ldr	r1, [pc, #636]	; (8001c30 <HAL_DMA_Init+0x2f8>)
 80019b4:	4a9f      	ldr	r2, [pc, #636]	; (8001c34 <HAL_DMA_Init+0x2fc>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	bf18      	it	ne
 80019ba:	428b      	cmpne	r3, r1
 80019bc:	f000 8124 	beq.w	8001c08 <HAL_DMA_Init+0x2d0>
 80019c0:	4a9d      	ldr	r2, [pc, #628]	; (8001c38 <HAL_DMA_Init+0x300>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	f000 8120 	beq.w	8001c08 <HAL_DMA_Init+0x2d0>
 80019c8:	3214      	adds	r2, #20
 80019ca:	4293      	cmp	r3, r2
 80019cc:	f000 811c 	beq.w	8001c08 <HAL_DMA_Init+0x2d0>
 80019d0:	3214      	adds	r2, #20
 80019d2:	4293      	cmp	r3, r2
 80019d4:	f000 8118 	beq.w	8001c08 <HAL_DMA_Init+0x2d0>
 80019d8:	3214      	adds	r2, #20
 80019da:	4293      	cmp	r3, r2
 80019dc:	f000 8114 	beq.w	8001c08 <HAL_DMA_Init+0x2d0>
 80019e0:	3214      	adds	r2, #20
 80019e2:	4293      	cmp	r3, r2
 80019e4:	f000 8110 	beq.w	8001c08 <HAL_DMA_Init+0x2d0>
 80019e8:	3214      	adds	r2, #20
 80019ea:	4293      	cmp	r3, r2
 80019ec:	f000 810c 	beq.w	8001c08 <HAL_DMA_Init+0x2d0>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019f0:	2340      	movs	r3, #64	; 0x40
 80019f2:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80019f4:	2303      	movs	r3, #3
 80019f6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 80019fa:	2001      	movs	r0, #1
 80019fc:	e04a      	b.n	8001a94 <HAL_DMA_Init+0x15c>
    __HAL_UNLOCK(hdma);
 80019fe:	2100      	movs	r1, #0
 8001a00:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a04:	2102      	movs	r1, #2
 8001a06:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001a0a:	bb7a      	cbnz	r2, 8001a6c <HAL_DMA_Init+0x134>
 8001a0c:	4a8b      	ldr	r2, [pc, #556]	; (8001c3c <HAL_DMA_Init+0x304>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d02c      	beq.n	8001a6c <HAL_DMA_Init+0x134>
 8001a12:	3218      	adds	r2, #24
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d029      	beq.n	8001a6c <HAL_DMA_Init+0x134>
 8001a18:	3218      	adds	r2, #24
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d026      	beq.n	8001a6c <HAL_DMA_Init+0x134>
 8001a1e:	3218      	adds	r2, #24
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d023      	beq.n	8001a6c <HAL_DMA_Init+0x134>
 8001a24:	3218      	adds	r2, #24
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d020      	beq.n	8001a6c <HAL_DMA_Init+0x134>
 8001a2a:	3218      	adds	r2, #24
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d01d      	beq.n	8001a6c <HAL_DMA_Init+0x134>
 8001a30:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d019      	beq.n	8001a6c <HAL_DMA_Init+0x134>
 8001a38:	3218      	adds	r2, #24
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d016      	beq.n	8001a6c <HAL_DMA_Init+0x134>
 8001a3e:	3218      	adds	r2, #24
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d013      	beq.n	8001a6c <HAL_DMA_Init+0x134>
 8001a44:	3218      	adds	r2, #24
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d010      	beq.n	8001a6c <HAL_DMA_Init+0x134>
 8001a4a:	3218      	adds	r2, #24
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d00d      	beq.n	8001a6c <HAL_DMA_Init+0x134>
 8001a50:	3218      	adds	r2, #24
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d00a      	beq.n	8001a6c <HAL_DMA_Init+0x134>
 8001a56:	3218      	adds	r2, #24
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d007      	beq.n	8001a6c <HAL_DMA_Init+0x134>
 8001a5c:	3218      	adds	r2, #24
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d004      	beq.n	8001a6c <HAL_DMA_Init+0x134>
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	f022 0201 	bic.w	r2, r2, #1
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	e003      	b.n	8001a74 <HAL_DMA_Init+0x13c>
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	f022 0201 	bic.w	r2, r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a74:	6823      	ldr	r3, [r4, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	f012 0f01 	tst.w	r2, #1
 8001a7c:	d00b      	beq.n	8001a96 <HAL_DMA_Init+0x15e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a7e:	f7fe fe0d 	bl	800069c <HAL_GetTick>
 8001a82:	1b40      	subs	r0, r0, r5
 8001a84:	2805      	cmp	r0, #5
 8001a86:	d9f5      	bls.n	8001a74 <HAL_DMA_Init+0x13c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a88:	2320      	movs	r3, #32
 8001a8a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 8001a92:	2001      	movs	r0, #1
}
 8001a94:	bd70      	pop	{r4, r5, r6, pc}
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001a96:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a98:	4869      	ldr	r0, [pc, #420]	; (8001c40 <HAL_DMA_Init+0x308>)
 8001a9a:	4010      	ands	r0, r2
    registerValue |=  hdma->Init.Direction           |
 8001a9c:	68a1      	ldr	r1, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a9e:	68e2      	ldr	r2, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 8001aa0:	430a      	orrs	r2, r1
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa2:	6921      	ldr	r1, [r4, #16]
 8001aa4:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa6:	6961      	ldr	r1, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa8:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aaa:	69a1      	ldr	r1, [r4, #24]
 8001aac:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8001aae:	69e1      	ldr	r1, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab0:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ab2:	6a21      	ldr	r1, [r4, #32]
 8001ab4:	430a      	orrs	r2, r1
    registerValue |=  hdma->Init.Direction           |
 8001ab6:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ab8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001aba:	2904      	cmp	r1, #4
 8001abc:	f000 8099 	beq.w	8001bf2 <HAL_DMA_Init+0x2ba>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001ac0:	4960      	ldr	r1, [pc, #384]	; (8001c44 <HAL_DMA_Init+0x30c>)
 8001ac2:	6808      	ldr	r0, [r1, #0]
 8001ac4:	4960      	ldr	r1, [pc, #384]	; (8001c48 <HAL_DMA_Init+0x310>)
 8001ac6:	4001      	ands	r1, r0
 8001ac8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8001acc:	d311      	bcc.n	8001af2 <HAL_DMA_Init+0x1ba>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001ace:	6861      	ldr	r1, [r4, #4]
 8001ad0:	f1a1 0529 	sub.w	r5, r1, #41	; 0x29
 8001ad4:	f1a1 003f 	sub.w	r0, r1, #63	; 0x3f
 8001ad8:	2803      	cmp	r0, #3
 8001ada:	bf88      	it	hi
 8001adc:	2d05      	cmphi	r5, #5
 8001ade:	d906      	bls.n	8001aee <HAL_DMA_Init+0x1b6>
 8001ae0:	f1a1 0047 	sub.w	r0, r1, #71	; 0x47
 8001ae4:	2801      	cmp	r0, #1
 8001ae6:	d902      	bls.n	8001aee <HAL_DMA_Init+0x1b6>
 8001ae8:	394f      	subs	r1, #79	; 0x4f
 8001aea:	2903      	cmp	r1, #3
 8001aec:	d801      	bhi.n	8001af2 <HAL_DMA_Init+0x1ba>
        registerValue |= DMA_SxCR_TRBUFF;
 8001aee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001af2:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001af4:	6826      	ldr	r6, [r4, #0]
 8001af6:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001af8:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 8001afc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001afe:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d108      	bne.n	8001b16 <HAL_DMA_Init+0x1de>
      registerValue |= hdma->Init.FIFOThreshold;
 8001b04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b06:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b0a:	b123      	cbz	r3, 8001b16 <HAL_DMA_Init+0x1de>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	f7ff fe33 	bl	8001778 <DMA_CheckFifoParam>
 8001b12:	2800      	cmp	r0, #0
 8001b14:	d172      	bne.n	8001bfc <HAL_DMA_Init+0x2c4>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001b16:	6175      	str	r5, [r6, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b18:	4620      	mov	r0, r4
 8001b1a:	f7ff fdd1 	bl	80016c0 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b1e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001b20:	f003 021f 	and.w	r2, r3, #31
 8001b24:	233f      	movs	r3, #63	; 0x3f
 8001b26:	4093      	lsls	r3, r2
 8001b28:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b2a:	6823      	ldr	r3, [r4, #0]
 8001b2c:	493e      	ldr	r1, [pc, #248]	; (8001c28 <HAL_DMA_Init+0x2f0>)
 8001b2e:	4a3f      	ldr	r2, [pc, #252]	; (8001c2c <HAL_DMA_Init+0x2f4>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	bf18      	it	ne
 8001b34:	428b      	cmpne	r3, r1
 8001b36:	d042      	beq.n	8001bbe <HAL_DMA_Init+0x286>
 8001b38:	3218      	adds	r2, #24
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d03f      	beq.n	8001bbe <HAL_DMA_Init+0x286>
 8001b3e:	3218      	adds	r2, #24
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d03c      	beq.n	8001bbe <HAL_DMA_Init+0x286>
 8001b44:	3218      	adds	r2, #24
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d039      	beq.n	8001bbe <HAL_DMA_Init+0x286>
 8001b4a:	3218      	adds	r2, #24
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d036      	beq.n	8001bbe <HAL_DMA_Init+0x286>
 8001b50:	3218      	adds	r2, #24
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d033      	beq.n	8001bbe <HAL_DMA_Init+0x286>
 8001b56:	3218      	adds	r2, #24
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d030      	beq.n	8001bbe <HAL_DMA_Init+0x286>
 8001b5c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d02c      	beq.n	8001bbe <HAL_DMA_Init+0x286>
 8001b64:	3218      	adds	r2, #24
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d029      	beq.n	8001bbe <HAL_DMA_Init+0x286>
 8001b6a:	3218      	adds	r2, #24
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d026      	beq.n	8001bbe <HAL_DMA_Init+0x286>
 8001b70:	3218      	adds	r2, #24
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d023      	beq.n	8001bbe <HAL_DMA_Init+0x286>
 8001b76:	3218      	adds	r2, #24
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d020      	beq.n	8001bbe <HAL_DMA_Init+0x286>
 8001b7c:	3218      	adds	r2, #24
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d01d      	beq.n	8001bbe <HAL_DMA_Init+0x286>
 8001b82:	3218      	adds	r2, #24
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d01a      	beq.n	8001bbe <HAL_DMA_Init+0x286>
 8001b88:	3218      	adds	r2, #24
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d017      	beq.n	8001bbe <HAL_DMA_Init+0x286>
 8001b8e:	4a28      	ldr	r2, [pc, #160]	; (8001c30 <HAL_DMA_Init+0x2f8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d014      	beq.n	8001bbe <HAL_DMA_Init+0x286>
 8001b94:	3214      	adds	r2, #20
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d011      	beq.n	8001bbe <HAL_DMA_Init+0x286>
 8001b9a:	3214      	adds	r2, #20
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d00e      	beq.n	8001bbe <HAL_DMA_Init+0x286>
 8001ba0:	3214      	adds	r2, #20
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d00b      	beq.n	8001bbe <HAL_DMA_Init+0x286>
 8001ba6:	3214      	adds	r2, #20
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d008      	beq.n	8001bbe <HAL_DMA_Init+0x286>
 8001bac:	3214      	adds	r2, #20
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d005      	beq.n	8001bbe <HAL_DMA_Init+0x286>
 8001bb2:	3214      	adds	r2, #20
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d002      	beq.n	8001bbe <HAL_DMA_Init+0x286>
 8001bb8:	3214      	adds	r2, #20
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d113      	bne.n	8001be6 <HAL_DMA_Init+0x2ae>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	f7ff fe24 	bl	800180c <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001bc4:	68a3      	ldr	r3, [r4, #8]
 8001bc6:	2b80      	cmp	r3, #128	; 0x80
 8001bc8:	d06d      	beq.n	8001ca6 <HAL_DMA_Init+0x36e>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001bca:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001bcc:	7922      	ldrb	r2, [r4, #4]
 8001bce:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001bd2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8001bd4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001bd6:	6863      	ldr	r3, [r4, #4]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	2b07      	cmp	r3, #7
 8001bdc:	d966      	bls.n	8001cac <HAL_DMA_Init+0x374>
      hdma->DMAmuxRequestGen = 0U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	66e3      	str	r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001be2:	6723      	str	r3, [r4, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001be4:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001be6:	2000      	movs	r0, #0
 8001be8:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001bea:	2301      	movs	r3, #1
 8001bec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001bf0:	e750      	b.n	8001a94 <HAL_DMA_Init+0x15c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bf2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001bf4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001bf6:	4301      	orrs	r1, r0
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	e761      	b.n	8001ac0 <HAL_DMA_Init+0x188>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bfc:	2340      	movs	r3, #64	; 0x40
 8001bfe:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8001c00:	2001      	movs	r0, #1
 8001c02:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          return HAL_ERROR;
 8001c06:	e745      	b.n	8001a94 <HAL_DMA_Init+0x15c>
    __HAL_UNLOCK(hdma);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c0e:	2202      	movs	r2, #2
 8001c10:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001c14:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001c16:	490d      	ldr	r1, [pc, #52]	; (8001c4c <HAL_DMA_Init+0x314>)
 8001c18:	4011      	ands	r1, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c1a:	68a2      	ldr	r2, [r4, #8]
 8001c1c:	2a40      	cmp	r2, #64	; 0x40
 8001c1e:	d01a      	beq.n	8001c56 <HAL_DMA_Init+0x31e>
 8001c20:	2a80      	cmp	r2, #128	; 0x80
 8001c22:	d015      	beq.n	8001c50 <HAL_DMA_Init+0x318>
 8001c24:	2200      	movs	r2, #0
 8001c26:	e017      	b.n	8001c58 <HAL_DMA_Init+0x320>
 8001c28:	40020010 	.word	0x40020010
 8001c2c:	40020028 	.word	0x40020028
 8001c30:	58025408 	.word	0x58025408
 8001c34:	5802541c 	.word	0x5802541c
 8001c38:	58025430 	.word	0x58025430
 8001c3c:	40020040 	.word	0x40020040
 8001c40:	fe10803f 	.word	0xfe10803f
 8001c44:	5c001000 	.word	0x5c001000
 8001c48:	ffff0000 	.word	0xffff0000
 8001c4c:	fffe000f 	.word	0xfffe000f
 8001c50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c54:	e000      	b.n	8001c58 <HAL_DMA_Init+0x320>
 8001c56:	2210      	movs	r2, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c58:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c5a:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c5e:	6920      	ldr	r0, [r4, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c60:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c64:	6960      	ldr	r0, [r4, #20]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c66:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c6a:	69a0      	ldr	r0, [r4, #24]
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c6c:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c70:	69e0      	ldr	r0, [r4, #28]
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c72:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001c76:	6a20      	ldr	r0, [r4, #32]
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c78:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c7c:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001c7e:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001c80:	6822      	ldr	r2, [r4, #0]
 8001c82:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <HAL_DMA_Init+0x38c>)
 8001c84:	4413      	add	r3, r2
 8001c86:	4a10      	ldr	r2, [pc, #64]	; (8001cc8 <HAL_DMA_Init+0x390>)
 8001c88:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8c:	091b      	lsrs	r3, r3, #4
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c92:	4620      	mov	r0, r4
 8001c94:	f7ff fd14 	bl	80016c0 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c98:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001c9a:	f003 021f 	and.w	r2, r3, #31
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	4093      	lsls	r3, r2
 8001ca2:	6043      	str	r3, [r0, #4]
 8001ca4:	e741      	b.n	8001b2a <HAL_DMA_Init+0x1f2>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	6063      	str	r3, [r4, #4]
 8001caa:	e78e      	b.n	8001bca <HAL_DMA_Init+0x292>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001cac:	4620      	mov	r0, r4
 8001cae:	f7ff fe05 	bl	80018bc <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001cb2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cb8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001cba:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	e792      	b.n	8001be6 <HAL_DMA_Init+0x2ae>
    return HAL_ERROR;
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	e6e7      	b.n	8001a94 <HAL_DMA_Init+0x15c>
 8001cc4:	a7fdabf8 	.word	0xa7fdabf8
 8001cc8:	cccccccd 	.word	0xcccccccd

08001ccc <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8001ccc:	2800      	cmp	r0, #0
 8001cce:	f000 813e 	beq.w	8001f4e <HAL_DMA_Start_IT+0x282>
{
 8001cd2:	b570      	push	{r4, r5, r6, lr}
 8001cd4:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001cd6:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001cda:	2801      	cmp	r0, #1
 8001cdc:	f000 8139 	beq.w	8001f52 <HAL_DMA_Start_IT+0x286>
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ce6:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8001cea:	b2c0      	uxtb	r0, r0
 8001cec:	2801      	cmp	r0, #1
 8001cee:	d007      	beq.n	8001d00 <HAL_DMA_Start_IT+0x34>
    __HAL_UNLOCK(hdma);
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001cf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cfa:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 8001cfc:	2001      	movs	r0, #1
}
 8001cfe:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d00:	2002      	movs	r0, #2
 8001d02:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d06:	2000      	movs	r0, #0
 8001d08:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8001d0a:	6820      	ldr	r0, [r4, #0]
 8001d0c:	4e92      	ldr	r6, [pc, #584]	; (8001f58 <HAL_DMA_Start_IT+0x28c>)
 8001d0e:	4d93      	ldr	r5, [pc, #588]	; (8001f5c <HAL_DMA_Start_IT+0x290>)
 8001d10:	42a8      	cmp	r0, r5
 8001d12:	bf18      	it	ne
 8001d14:	42b0      	cmpne	r0, r6
 8001d16:	d02f      	beq.n	8001d78 <HAL_DMA_Start_IT+0xac>
 8001d18:	3518      	adds	r5, #24
 8001d1a:	42a8      	cmp	r0, r5
 8001d1c:	d02c      	beq.n	8001d78 <HAL_DMA_Start_IT+0xac>
 8001d1e:	3518      	adds	r5, #24
 8001d20:	42a8      	cmp	r0, r5
 8001d22:	d029      	beq.n	8001d78 <HAL_DMA_Start_IT+0xac>
 8001d24:	3518      	adds	r5, #24
 8001d26:	42a8      	cmp	r0, r5
 8001d28:	d026      	beq.n	8001d78 <HAL_DMA_Start_IT+0xac>
 8001d2a:	3518      	adds	r5, #24
 8001d2c:	42a8      	cmp	r0, r5
 8001d2e:	d023      	beq.n	8001d78 <HAL_DMA_Start_IT+0xac>
 8001d30:	3518      	adds	r5, #24
 8001d32:	42a8      	cmp	r0, r5
 8001d34:	d020      	beq.n	8001d78 <HAL_DMA_Start_IT+0xac>
 8001d36:	3518      	adds	r5, #24
 8001d38:	42a8      	cmp	r0, r5
 8001d3a:	d01d      	beq.n	8001d78 <HAL_DMA_Start_IT+0xac>
 8001d3c:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8001d40:	42a8      	cmp	r0, r5
 8001d42:	d019      	beq.n	8001d78 <HAL_DMA_Start_IT+0xac>
 8001d44:	3518      	adds	r5, #24
 8001d46:	42a8      	cmp	r0, r5
 8001d48:	d016      	beq.n	8001d78 <HAL_DMA_Start_IT+0xac>
 8001d4a:	3518      	adds	r5, #24
 8001d4c:	42a8      	cmp	r0, r5
 8001d4e:	d013      	beq.n	8001d78 <HAL_DMA_Start_IT+0xac>
 8001d50:	3518      	adds	r5, #24
 8001d52:	42a8      	cmp	r0, r5
 8001d54:	d010      	beq.n	8001d78 <HAL_DMA_Start_IT+0xac>
 8001d56:	3518      	adds	r5, #24
 8001d58:	42a8      	cmp	r0, r5
 8001d5a:	d00d      	beq.n	8001d78 <HAL_DMA_Start_IT+0xac>
 8001d5c:	3518      	adds	r5, #24
 8001d5e:	42a8      	cmp	r0, r5
 8001d60:	d00a      	beq.n	8001d78 <HAL_DMA_Start_IT+0xac>
 8001d62:	3518      	adds	r5, #24
 8001d64:	42a8      	cmp	r0, r5
 8001d66:	d007      	beq.n	8001d78 <HAL_DMA_Start_IT+0xac>
 8001d68:	3518      	adds	r5, #24
 8001d6a:	42a8      	cmp	r0, r5
 8001d6c:	d004      	beq.n	8001d78 <HAL_DMA_Start_IT+0xac>
 8001d6e:	6805      	ldr	r5, [r0, #0]
 8001d70:	f025 0501 	bic.w	r5, r5, #1
 8001d74:	6005      	str	r5, [r0, #0]
 8001d76:	e003      	b.n	8001d80 <HAL_DMA_Start_IT+0xb4>
 8001d78:	6805      	ldr	r5, [r0, #0]
 8001d7a:	f025 0501 	bic.w	r5, r5, #1
 8001d7e:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d80:	4620      	mov	r0, r4
 8001d82:	f7ff fbc5 	bl	8001510 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d86:	6823      	ldr	r3, [r4, #0]
 8001d88:	4973      	ldr	r1, [pc, #460]	; (8001f58 <HAL_DMA_Start_IT+0x28c>)
 8001d8a:	4a74      	ldr	r2, [pc, #464]	; (8001f5c <HAL_DMA_Start_IT+0x290>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	bf18      	it	ne
 8001d90:	428b      	cmpne	r3, r1
 8001d92:	d038      	beq.n	8001e06 <HAL_DMA_Start_IT+0x13a>
 8001d94:	3218      	adds	r2, #24
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d035      	beq.n	8001e06 <HAL_DMA_Start_IT+0x13a>
 8001d9a:	3218      	adds	r2, #24
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d032      	beq.n	8001e06 <HAL_DMA_Start_IT+0x13a>
 8001da0:	3218      	adds	r2, #24
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d02f      	beq.n	8001e06 <HAL_DMA_Start_IT+0x13a>
 8001da6:	3218      	adds	r2, #24
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d02c      	beq.n	8001e06 <HAL_DMA_Start_IT+0x13a>
 8001dac:	3218      	adds	r2, #24
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d029      	beq.n	8001e06 <HAL_DMA_Start_IT+0x13a>
 8001db2:	3218      	adds	r2, #24
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d026      	beq.n	8001e06 <HAL_DMA_Start_IT+0x13a>
 8001db8:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d022      	beq.n	8001e06 <HAL_DMA_Start_IT+0x13a>
 8001dc0:	3218      	adds	r2, #24
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d01f      	beq.n	8001e06 <HAL_DMA_Start_IT+0x13a>
 8001dc6:	3218      	adds	r2, #24
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d01c      	beq.n	8001e06 <HAL_DMA_Start_IT+0x13a>
 8001dcc:	3218      	adds	r2, #24
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d019      	beq.n	8001e06 <HAL_DMA_Start_IT+0x13a>
 8001dd2:	3218      	adds	r2, #24
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d016      	beq.n	8001e06 <HAL_DMA_Start_IT+0x13a>
 8001dd8:	3218      	adds	r2, #24
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d013      	beq.n	8001e06 <HAL_DMA_Start_IT+0x13a>
 8001dde:	3218      	adds	r2, #24
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d010      	beq.n	8001e06 <HAL_DMA_Start_IT+0x13a>
 8001de4:	3218      	adds	r2, #24
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d00d      	beq.n	8001e06 <HAL_DMA_Start_IT+0x13a>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	f022 020e 	bic.w	r2, r2, #14
 8001df0:	f042 020a 	orr.w	r2, r2, #10
 8001df4:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001df6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001df8:	b193      	cbz	r3, 8001e20 <HAL_DMA_Start_IT+0x154>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001dfa:	6822      	ldr	r2, [r4, #0]
 8001dfc:	6813      	ldr	r3, [r2, #0]
 8001dfe:	f043 0304 	orr.w	r3, r3, #4
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	e00c      	b.n	8001e20 <HAL_DMA_Start_IT+0x154>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	f022 021e 	bic.w	r2, r2, #30
 8001e0c:	f042 0216 	orr.w	r2, r2, #22
 8001e10:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001e12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e14:	b123      	cbz	r3, 8001e20 <HAL_DMA_Start_IT+0x154>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001e16:	6822      	ldr	r2, [r4, #0]
 8001e18:	6813      	ldr	r3, [r2, #0]
 8001e1a:	f043 0308 	orr.w	r3, r3, #8
 8001e1e:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e20:	6823      	ldr	r3, [r4, #0]
 8001e22:	494d      	ldr	r1, [pc, #308]	; (8001f58 <HAL_DMA_Start_IT+0x28c>)
 8001e24:	4a4d      	ldr	r2, [pc, #308]	; (8001f5c <HAL_DMA_Start_IT+0x290>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	bf18      	it	ne
 8001e2a:	428b      	cmpne	r3, r1
 8001e2c:	d042      	beq.n	8001eb4 <HAL_DMA_Start_IT+0x1e8>
 8001e2e:	3218      	adds	r2, #24
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d03f      	beq.n	8001eb4 <HAL_DMA_Start_IT+0x1e8>
 8001e34:	3218      	adds	r2, #24
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d03c      	beq.n	8001eb4 <HAL_DMA_Start_IT+0x1e8>
 8001e3a:	3218      	adds	r2, #24
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d039      	beq.n	8001eb4 <HAL_DMA_Start_IT+0x1e8>
 8001e40:	3218      	adds	r2, #24
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d036      	beq.n	8001eb4 <HAL_DMA_Start_IT+0x1e8>
 8001e46:	3218      	adds	r2, #24
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d033      	beq.n	8001eb4 <HAL_DMA_Start_IT+0x1e8>
 8001e4c:	3218      	adds	r2, #24
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d030      	beq.n	8001eb4 <HAL_DMA_Start_IT+0x1e8>
 8001e52:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d02c      	beq.n	8001eb4 <HAL_DMA_Start_IT+0x1e8>
 8001e5a:	3218      	adds	r2, #24
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d029      	beq.n	8001eb4 <HAL_DMA_Start_IT+0x1e8>
 8001e60:	3218      	adds	r2, #24
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d026      	beq.n	8001eb4 <HAL_DMA_Start_IT+0x1e8>
 8001e66:	3218      	adds	r2, #24
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d023      	beq.n	8001eb4 <HAL_DMA_Start_IT+0x1e8>
 8001e6c:	3218      	adds	r2, #24
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d020      	beq.n	8001eb4 <HAL_DMA_Start_IT+0x1e8>
 8001e72:	3218      	adds	r2, #24
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d01d      	beq.n	8001eb4 <HAL_DMA_Start_IT+0x1e8>
 8001e78:	3218      	adds	r2, #24
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d01a      	beq.n	8001eb4 <HAL_DMA_Start_IT+0x1e8>
 8001e7e:	3218      	adds	r2, #24
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d017      	beq.n	8001eb4 <HAL_DMA_Start_IT+0x1e8>
 8001e84:	4a36      	ldr	r2, [pc, #216]	; (8001f60 <HAL_DMA_Start_IT+0x294>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d014      	beq.n	8001eb4 <HAL_DMA_Start_IT+0x1e8>
 8001e8a:	3214      	adds	r2, #20
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d011      	beq.n	8001eb4 <HAL_DMA_Start_IT+0x1e8>
 8001e90:	3214      	adds	r2, #20
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d00e      	beq.n	8001eb4 <HAL_DMA_Start_IT+0x1e8>
 8001e96:	3214      	adds	r2, #20
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d00b      	beq.n	8001eb4 <HAL_DMA_Start_IT+0x1e8>
 8001e9c:	3214      	adds	r2, #20
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d008      	beq.n	8001eb4 <HAL_DMA_Start_IT+0x1e8>
 8001ea2:	3214      	adds	r2, #20
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d005      	beq.n	8001eb4 <HAL_DMA_Start_IT+0x1e8>
 8001ea8:	3214      	adds	r2, #20
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d002      	beq.n	8001eb4 <HAL_DMA_Start_IT+0x1e8>
 8001eae:	3214      	adds	r2, #20
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d10e      	bne.n	8001ed2 <HAL_DMA_Start_IT+0x206>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001eb4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001ebc:	d003      	beq.n	8001ec6 <HAL_DMA_Start_IT+0x1fa>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ec4:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8001ec6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001ec8:	b11b      	cbz	r3, 8001ed2 <HAL_DMA_Start_IT+0x206>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ed0:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8001ed2:	6823      	ldr	r3, [r4, #0]
 8001ed4:	4920      	ldr	r1, [pc, #128]	; (8001f58 <HAL_DMA_Start_IT+0x28c>)
 8001ed6:	4a21      	ldr	r2, [pc, #132]	; (8001f5c <HAL_DMA_Start_IT+0x290>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	bf18      	it	ne
 8001edc:	428b      	cmpne	r3, r1
 8001ede:	d030      	beq.n	8001f42 <HAL_DMA_Start_IT+0x276>
 8001ee0:	3218      	adds	r2, #24
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d02d      	beq.n	8001f42 <HAL_DMA_Start_IT+0x276>
 8001ee6:	3218      	adds	r2, #24
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d02a      	beq.n	8001f42 <HAL_DMA_Start_IT+0x276>
 8001eec:	3218      	adds	r2, #24
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d027      	beq.n	8001f42 <HAL_DMA_Start_IT+0x276>
 8001ef2:	3218      	adds	r2, #24
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d024      	beq.n	8001f42 <HAL_DMA_Start_IT+0x276>
 8001ef8:	3218      	adds	r2, #24
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d021      	beq.n	8001f42 <HAL_DMA_Start_IT+0x276>
 8001efe:	3218      	adds	r2, #24
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d01e      	beq.n	8001f42 <HAL_DMA_Start_IT+0x276>
 8001f04:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d01a      	beq.n	8001f42 <HAL_DMA_Start_IT+0x276>
 8001f0c:	3218      	adds	r2, #24
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d017      	beq.n	8001f42 <HAL_DMA_Start_IT+0x276>
 8001f12:	3218      	adds	r2, #24
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d014      	beq.n	8001f42 <HAL_DMA_Start_IT+0x276>
 8001f18:	3218      	adds	r2, #24
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d011      	beq.n	8001f42 <HAL_DMA_Start_IT+0x276>
 8001f1e:	3218      	adds	r2, #24
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d00e      	beq.n	8001f42 <HAL_DMA_Start_IT+0x276>
 8001f24:	3218      	adds	r2, #24
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00b      	beq.n	8001f42 <HAL_DMA_Start_IT+0x276>
 8001f2a:	3218      	adds	r2, #24
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d008      	beq.n	8001f42 <HAL_DMA_Start_IT+0x276>
 8001f30:	3218      	adds	r2, #24
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d005      	beq.n	8001f42 <HAL_DMA_Start_IT+0x276>
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	f042 0201 	orr.w	r2, r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3e:	2000      	movs	r0, #0
 8001f40:	e6dd      	b.n	8001cfe <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_ENABLE(hdma);
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	f042 0201 	orr.w	r2, r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f4a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001f4c:	e6d7      	b.n	8001cfe <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 8001f4e:	2001      	movs	r0, #1
}
 8001f50:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8001f52:	2002      	movs	r0, #2
 8001f54:	e6d3      	b.n	8001cfe <HAL_DMA_Start_IT+0x32>
 8001f56:	bf00      	nop
 8001f58:	40020010 	.word	0x40020010
 8001f5c:	40020028 	.word	0x40020028
 8001f60:	58025408 	.word	0x58025408

08001f64 <HAL_DMA_Abort>:
{
 8001f64:	b570      	push	{r4, r5, r6, lr}
 8001f66:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f68:	f7fe fb98 	bl	800069c <HAL_GetTick>
  if(hdma == NULL)
 8001f6c:	2c00      	cmp	r4, #0
 8001f6e:	f000 8191 	beq.w	8002294 <HAL_DMA_Abort+0x330>
 8001f72:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f74:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d006      	beq.n	8001f8c <HAL_DMA_Abort+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f7e:	2380      	movs	r3, #128	; 0x80
 8001f80:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001f82:	2300      	movs	r3, #0
 8001f84:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8001f88:	2001      	movs	r0, #1
}
 8001f8a:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f8c:	6823      	ldr	r3, [r4, #0]
 8001f8e:	498c      	ldr	r1, [pc, #560]	; (80021c0 <HAL_DMA_Abort+0x25c>)
 8001f90:	4a8c      	ldr	r2, [pc, #560]	; (80021c4 <HAL_DMA_Abort+0x260>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	bf18      	it	ne
 8001f96:	428b      	cmpne	r3, r1
 8001f98:	d030      	beq.n	8001ffc <HAL_DMA_Abort+0x98>
 8001f9a:	3218      	adds	r2, #24
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d02d      	beq.n	8001ffc <HAL_DMA_Abort+0x98>
 8001fa0:	3218      	adds	r2, #24
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d02a      	beq.n	8001ffc <HAL_DMA_Abort+0x98>
 8001fa6:	3218      	adds	r2, #24
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d027      	beq.n	8001ffc <HAL_DMA_Abort+0x98>
 8001fac:	3218      	adds	r2, #24
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d024      	beq.n	8001ffc <HAL_DMA_Abort+0x98>
 8001fb2:	3218      	adds	r2, #24
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d021      	beq.n	8001ffc <HAL_DMA_Abort+0x98>
 8001fb8:	3218      	adds	r2, #24
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d01e      	beq.n	8001ffc <HAL_DMA_Abort+0x98>
 8001fbe:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d01a      	beq.n	8001ffc <HAL_DMA_Abort+0x98>
 8001fc6:	3218      	adds	r2, #24
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d017      	beq.n	8001ffc <HAL_DMA_Abort+0x98>
 8001fcc:	3218      	adds	r2, #24
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d014      	beq.n	8001ffc <HAL_DMA_Abort+0x98>
 8001fd2:	3218      	adds	r2, #24
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d011      	beq.n	8001ffc <HAL_DMA_Abort+0x98>
 8001fd8:	3218      	adds	r2, #24
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d00e      	beq.n	8001ffc <HAL_DMA_Abort+0x98>
 8001fde:	3218      	adds	r2, #24
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d00b      	beq.n	8001ffc <HAL_DMA_Abort+0x98>
 8001fe4:	3218      	adds	r2, #24
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d008      	beq.n	8001ffc <HAL_DMA_Abort+0x98>
 8001fea:	3218      	adds	r2, #24
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d005      	beq.n	8001ffc <HAL_DMA_Abort+0x98>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	f022 020e 	bic.w	r2, r2, #14
 8001ff6:	601a      	str	r2, [r3, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001ff8:	6826      	ldr	r6, [r4, #0]
 8001ffa:	e009      	b.n	8002010 <HAL_DMA_Abort+0xac>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	f022 021e 	bic.w	r2, r2, #30
 8002002:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002004:	6822      	ldr	r2, [r4, #0]
 8002006:	6953      	ldr	r3, [r2, #20]
 8002008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800200c:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800200e:	6826      	ldr	r6, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002010:	6823      	ldr	r3, [r4, #0]
 8002012:	496b      	ldr	r1, [pc, #428]	; (80021c0 <HAL_DMA_Abort+0x25c>)
 8002014:	4a6b      	ldr	r2, [pc, #428]	; (80021c4 <HAL_DMA_Abort+0x260>)
 8002016:	4293      	cmp	r3, r2
 8002018:	bf18      	it	ne
 800201a:	428b      	cmpne	r3, r1
 800201c:	d042      	beq.n	80020a4 <HAL_DMA_Abort+0x140>
 800201e:	3218      	adds	r2, #24
 8002020:	4293      	cmp	r3, r2
 8002022:	d03f      	beq.n	80020a4 <HAL_DMA_Abort+0x140>
 8002024:	3218      	adds	r2, #24
 8002026:	4293      	cmp	r3, r2
 8002028:	d03c      	beq.n	80020a4 <HAL_DMA_Abort+0x140>
 800202a:	3218      	adds	r2, #24
 800202c:	4293      	cmp	r3, r2
 800202e:	d039      	beq.n	80020a4 <HAL_DMA_Abort+0x140>
 8002030:	3218      	adds	r2, #24
 8002032:	4293      	cmp	r3, r2
 8002034:	d036      	beq.n	80020a4 <HAL_DMA_Abort+0x140>
 8002036:	3218      	adds	r2, #24
 8002038:	4293      	cmp	r3, r2
 800203a:	d033      	beq.n	80020a4 <HAL_DMA_Abort+0x140>
 800203c:	3218      	adds	r2, #24
 800203e:	4293      	cmp	r3, r2
 8002040:	d030      	beq.n	80020a4 <HAL_DMA_Abort+0x140>
 8002042:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002046:	4293      	cmp	r3, r2
 8002048:	d02c      	beq.n	80020a4 <HAL_DMA_Abort+0x140>
 800204a:	3218      	adds	r2, #24
 800204c:	4293      	cmp	r3, r2
 800204e:	d029      	beq.n	80020a4 <HAL_DMA_Abort+0x140>
 8002050:	3218      	adds	r2, #24
 8002052:	4293      	cmp	r3, r2
 8002054:	d026      	beq.n	80020a4 <HAL_DMA_Abort+0x140>
 8002056:	3218      	adds	r2, #24
 8002058:	4293      	cmp	r3, r2
 800205a:	d023      	beq.n	80020a4 <HAL_DMA_Abort+0x140>
 800205c:	3218      	adds	r2, #24
 800205e:	4293      	cmp	r3, r2
 8002060:	d020      	beq.n	80020a4 <HAL_DMA_Abort+0x140>
 8002062:	3218      	adds	r2, #24
 8002064:	4293      	cmp	r3, r2
 8002066:	d01d      	beq.n	80020a4 <HAL_DMA_Abort+0x140>
 8002068:	3218      	adds	r2, #24
 800206a:	4293      	cmp	r3, r2
 800206c:	d01a      	beq.n	80020a4 <HAL_DMA_Abort+0x140>
 800206e:	3218      	adds	r2, #24
 8002070:	4293      	cmp	r3, r2
 8002072:	d017      	beq.n	80020a4 <HAL_DMA_Abort+0x140>
 8002074:	4a54      	ldr	r2, [pc, #336]	; (80021c8 <HAL_DMA_Abort+0x264>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d014      	beq.n	80020a4 <HAL_DMA_Abort+0x140>
 800207a:	3214      	adds	r2, #20
 800207c:	4293      	cmp	r3, r2
 800207e:	d011      	beq.n	80020a4 <HAL_DMA_Abort+0x140>
 8002080:	3214      	adds	r2, #20
 8002082:	4293      	cmp	r3, r2
 8002084:	d00e      	beq.n	80020a4 <HAL_DMA_Abort+0x140>
 8002086:	3214      	adds	r2, #20
 8002088:	4293      	cmp	r3, r2
 800208a:	d00b      	beq.n	80020a4 <HAL_DMA_Abort+0x140>
 800208c:	3214      	adds	r2, #20
 800208e:	4293      	cmp	r3, r2
 8002090:	d008      	beq.n	80020a4 <HAL_DMA_Abort+0x140>
 8002092:	3214      	adds	r2, #20
 8002094:	4293      	cmp	r3, r2
 8002096:	d005      	beq.n	80020a4 <HAL_DMA_Abort+0x140>
 8002098:	3214      	adds	r2, #20
 800209a:	4293      	cmp	r3, r2
 800209c:	d002      	beq.n	80020a4 <HAL_DMA_Abort+0x140>
 800209e:	3214      	adds	r2, #20
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d104      	bne.n	80020ae <HAL_DMA_Abort+0x14a>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020a4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80020a6:	6813      	ldr	r3, [r2, #0]
 80020a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020ac:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80020ae:	6823      	ldr	r3, [r4, #0]
 80020b0:	4943      	ldr	r1, [pc, #268]	; (80021c0 <HAL_DMA_Abort+0x25c>)
 80020b2:	4a44      	ldr	r2, [pc, #272]	; (80021c4 <HAL_DMA_Abort+0x260>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	bf18      	it	ne
 80020b8:	428b      	cmpne	r3, r1
 80020ba:	d02f      	beq.n	800211c <HAL_DMA_Abort+0x1b8>
 80020bc:	3218      	adds	r2, #24
 80020be:	4293      	cmp	r3, r2
 80020c0:	d02c      	beq.n	800211c <HAL_DMA_Abort+0x1b8>
 80020c2:	3218      	adds	r2, #24
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d029      	beq.n	800211c <HAL_DMA_Abort+0x1b8>
 80020c8:	3218      	adds	r2, #24
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d026      	beq.n	800211c <HAL_DMA_Abort+0x1b8>
 80020ce:	3218      	adds	r2, #24
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d023      	beq.n	800211c <HAL_DMA_Abort+0x1b8>
 80020d4:	3218      	adds	r2, #24
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d020      	beq.n	800211c <HAL_DMA_Abort+0x1b8>
 80020da:	3218      	adds	r2, #24
 80020dc:	4293      	cmp	r3, r2
 80020de:	d01d      	beq.n	800211c <HAL_DMA_Abort+0x1b8>
 80020e0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d019      	beq.n	800211c <HAL_DMA_Abort+0x1b8>
 80020e8:	3218      	adds	r2, #24
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d016      	beq.n	800211c <HAL_DMA_Abort+0x1b8>
 80020ee:	3218      	adds	r2, #24
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d013      	beq.n	800211c <HAL_DMA_Abort+0x1b8>
 80020f4:	3218      	adds	r2, #24
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d010      	beq.n	800211c <HAL_DMA_Abort+0x1b8>
 80020fa:	3218      	adds	r2, #24
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d00d      	beq.n	800211c <HAL_DMA_Abort+0x1b8>
 8002100:	3218      	adds	r2, #24
 8002102:	4293      	cmp	r3, r2
 8002104:	d00a      	beq.n	800211c <HAL_DMA_Abort+0x1b8>
 8002106:	3218      	adds	r2, #24
 8002108:	4293      	cmp	r3, r2
 800210a:	d007      	beq.n	800211c <HAL_DMA_Abort+0x1b8>
 800210c:	3218      	adds	r2, #24
 800210e:	4293      	cmp	r3, r2
 8002110:	d004      	beq.n	800211c <HAL_DMA_Abort+0x1b8>
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	f022 0201 	bic.w	r2, r2, #1
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	e003      	b.n	8002124 <HAL_DMA_Abort+0x1c0>
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	f022 0201 	bic.w	r2, r2, #1
 8002122:	601a      	str	r2, [r3, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002124:	6833      	ldr	r3, [r6, #0]
 8002126:	f013 0f01 	tst.w	r3, #1
 800212a:	d00e      	beq.n	800214a <HAL_DMA_Abort+0x1e6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800212c:	f7fe fab6 	bl	800069c <HAL_GetTick>
 8002130:	1b40      	subs	r0, r0, r5
 8002132:	2805      	cmp	r0, #5
 8002134:	d9f6      	bls.n	8002124 <HAL_DMA_Abort+0x1c0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002136:	2320      	movs	r3, #32
 8002138:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800213a:	2300      	movs	r3, #0
 800213c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8002140:	2303      	movs	r3, #3
 8002142:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 8002146:	2001      	movs	r0, #1
 8002148:	e71f      	b.n	8001f8a <HAL_DMA_Abort+0x26>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800214a:	6823      	ldr	r3, [r4, #0]
 800214c:	491c      	ldr	r1, [pc, #112]	; (80021c0 <HAL_DMA_Abort+0x25c>)
 800214e:	4a1d      	ldr	r2, [pc, #116]	; (80021c4 <HAL_DMA_Abort+0x260>)
 8002150:	4293      	cmp	r3, r2
 8002152:	bf18      	it	ne
 8002154:	428b      	cmpne	r3, r1
 8002156:	d039      	beq.n	80021cc <HAL_DMA_Abort+0x268>
 8002158:	3218      	adds	r2, #24
 800215a:	4293      	cmp	r3, r2
 800215c:	d036      	beq.n	80021cc <HAL_DMA_Abort+0x268>
 800215e:	3218      	adds	r2, #24
 8002160:	4293      	cmp	r3, r2
 8002162:	d033      	beq.n	80021cc <HAL_DMA_Abort+0x268>
 8002164:	3218      	adds	r2, #24
 8002166:	4293      	cmp	r3, r2
 8002168:	d030      	beq.n	80021cc <HAL_DMA_Abort+0x268>
 800216a:	3218      	adds	r2, #24
 800216c:	4293      	cmp	r3, r2
 800216e:	d02d      	beq.n	80021cc <HAL_DMA_Abort+0x268>
 8002170:	3218      	adds	r2, #24
 8002172:	4293      	cmp	r3, r2
 8002174:	d02a      	beq.n	80021cc <HAL_DMA_Abort+0x268>
 8002176:	3218      	adds	r2, #24
 8002178:	4293      	cmp	r3, r2
 800217a:	d027      	beq.n	80021cc <HAL_DMA_Abort+0x268>
 800217c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002180:	4293      	cmp	r3, r2
 8002182:	d023      	beq.n	80021cc <HAL_DMA_Abort+0x268>
 8002184:	3218      	adds	r2, #24
 8002186:	4293      	cmp	r3, r2
 8002188:	d020      	beq.n	80021cc <HAL_DMA_Abort+0x268>
 800218a:	3218      	adds	r2, #24
 800218c:	4293      	cmp	r3, r2
 800218e:	d01d      	beq.n	80021cc <HAL_DMA_Abort+0x268>
 8002190:	3218      	adds	r2, #24
 8002192:	4293      	cmp	r3, r2
 8002194:	d01a      	beq.n	80021cc <HAL_DMA_Abort+0x268>
 8002196:	3218      	adds	r2, #24
 8002198:	4293      	cmp	r3, r2
 800219a:	d017      	beq.n	80021cc <HAL_DMA_Abort+0x268>
 800219c:	3218      	adds	r2, #24
 800219e:	4293      	cmp	r3, r2
 80021a0:	d014      	beq.n	80021cc <HAL_DMA_Abort+0x268>
 80021a2:	3218      	adds	r2, #24
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d011      	beq.n	80021cc <HAL_DMA_Abort+0x268>
 80021a8:	3218      	adds	r2, #24
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00e      	beq.n	80021cc <HAL_DMA_Abort+0x268>
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ae:	6da1      	ldr	r1, [r4, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80021b0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80021b2:	f003 021f 	and.w	r2, r3, #31
 80021b6:	2301      	movs	r3, #1
 80021b8:	4093      	lsls	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]
 80021bc:	e00d      	b.n	80021da <HAL_DMA_Abort+0x276>
 80021be:	bf00      	nop
 80021c0:	40020010 	.word	0x40020010
 80021c4:	40020028 	.word	0x40020028
 80021c8:	58025408 	.word	0x58025408
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021cc:	6da1      	ldr	r1, [r4, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80021ce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80021d0:	f003 021f 	and.w	r2, r3, #31
 80021d4:	233f      	movs	r3, #63	; 0x3f
 80021d6:	4093      	lsls	r3, r2
 80021d8:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021da:	6823      	ldr	r3, [r4, #0]
 80021dc:	492e      	ldr	r1, [pc, #184]	; (8002298 <HAL_DMA_Abort+0x334>)
 80021de:	4a2f      	ldr	r2, [pc, #188]	; (800229c <HAL_DMA_Abort+0x338>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	bf18      	it	ne
 80021e4:	428b      	cmpne	r3, r1
 80021e6:	d042      	beq.n	800226e <HAL_DMA_Abort+0x30a>
 80021e8:	3218      	adds	r2, #24
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d03f      	beq.n	800226e <HAL_DMA_Abort+0x30a>
 80021ee:	3218      	adds	r2, #24
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d03c      	beq.n	800226e <HAL_DMA_Abort+0x30a>
 80021f4:	3218      	adds	r2, #24
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d039      	beq.n	800226e <HAL_DMA_Abort+0x30a>
 80021fa:	3218      	adds	r2, #24
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d036      	beq.n	800226e <HAL_DMA_Abort+0x30a>
 8002200:	3218      	adds	r2, #24
 8002202:	4293      	cmp	r3, r2
 8002204:	d033      	beq.n	800226e <HAL_DMA_Abort+0x30a>
 8002206:	3218      	adds	r2, #24
 8002208:	4293      	cmp	r3, r2
 800220a:	d030      	beq.n	800226e <HAL_DMA_Abort+0x30a>
 800220c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002210:	4293      	cmp	r3, r2
 8002212:	d02c      	beq.n	800226e <HAL_DMA_Abort+0x30a>
 8002214:	3218      	adds	r2, #24
 8002216:	4293      	cmp	r3, r2
 8002218:	d029      	beq.n	800226e <HAL_DMA_Abort+0x30a>
 800221a:	3218      	adds	r2, #24
 800221c:	4293      	cmp	r3, r2
 800221e:	d026      	beq.n	800226e <HAL_DMA_Abort+0x30a>
 8002220:	3218      	adds	r2, #24
 8002222:	4293      	cmp	r3, r2
 8002224:	d023      	beq.n	800226e <HAL_DMA_Abort+0x30a>
 8002226:	3218      	adds	r2, #24
 8002228:	4293      	cmp	r3, r2
 800222a:	d020      	beq.n	800226e <HAL_DMA_Abort+0x30a>
 800222c:	3218      	adds	r2, #24
 800222e:	4293      	cmp	r3, r2
 8002230:	d01d      	beq.n	800226e <HAL_DMA_Abort+0x30a>
 8002232:	3218      	adds	r2, #24
 8002234:	4293      	cmp	r3, r2
 8002236:	d01a      	beq.n	800226e <HAL_DMA_Abort+0x30a>
 8002238:	3218      	adds	r2, #24
 800223a:	4293      	cmp	r3, r2
 800223c:	d017      	beq.n	800226e <HAL_DMA_Abort+0x30a>
 800223e:	4a18      	ldr	r2, [pc, #96]	; (80022a0 <HAL_DMA_Abort+0x33c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d014      	beq.n	800226e <HAL_DMA_Abort+0x30a>
 8002244:	3214      	adds	r2, #20
 8002246:	4293      	cmp	r3, r2
 8002248:	d011      	beq.n	800226e <HAL_DMA_Abort+0x30a>
 800224a:	3214      	adds	r2, #20
 800224c:	4293      	cmp	r3, r2
 800224e:	d00e      	beq.n	800226e <HAL_DMA_Abort+0x30a>
 8002250:	3214      	adds	r2, #20
 8002252:	4293      	cmp	r3, r2
 8002254:	d00b      	beq.n	800226e <HAL_DMA_Abort+0x30a>
 8002256:	3214      	adds	r2, #20
 8002258:	4293      	cmp	r3, r2
 800225a:	d008      	beq.n	800226e <HAL_DMA_Abort+0x30a>
 800225c:	3214      	adds	r2, #20
 800225e:	4293      	cmp	r3, r2
 8002260:	d005      	beq.n	800226e <HAL_DMA_Abort+0x30a>
 8002262:	3214      	adds	r2, #20
 8002264:	4293      	cmp	r3, r2
 8002266:	d002      	beq.n	800226e <HAL_DMA_Abort+0x30a>
 8002268:	3214      	adds	r2, #20
 800226a:	4293      	cmp	r3, r2
 800226c:	d10b      	bne.n	8002286 <HAL_DMA_Abort+0x322>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800226e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002270:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8002272:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8002274:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002276:	b133      	cbz	r3, 8002286 <HAL_DMA_Abort+0x322>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800227e:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002280:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002282:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8002284:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8002286:	2000      	movs	r0, #0
 8002288:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800228c:	2301      	movs	r3, #1
 800228e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002292:	e67a      	b.n	8001f8a <HAL_DMA_Abort+0x26>
    return HAL_ERROR;
 8002294:	2001      	movs	r0, #1
 8002296:	e678      	b.n	8001f8a <HAL_DMA_Abort+0x26>
 8002298:	40020010 	.word	0x40020010
 800229c:	40020028 	.word	0x40020028
 80022a0:	58025408 	.word	0x58025408

080022a4 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 80022a4:	2800      	cmp	r0, #0
 80022a6:	f000 813a 	beq.w	800251e <HAL_DMA_Abort_IT+0x27a>
{
 80022aa:	b508      	push	{r3, lr}
 80022ac:	4602      	mov	r2, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022ae:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d003      	beq.n	80022c0 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80022bc:	2001      	movs	r0, #1
}
 80022be:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022c0:	6803      	ldr	r3, [r0, #0]
 80022c2:	4899      	ldr	r0, [pc, #612]	; (8002528 <HAL_DMA_Abort_IT+0x284>)
 80022c4:	4999      	ldr	r1, [pc, #612]	; (800252c <HAL_DMA_Abort_IT+0x288>)
 80022c6:	428b      	cmp	r3, r1
 80022c8:	bf18      	it	ne
 80022ca:	4283      	cmpne	r3, r0
 80022cc:	bf0c      	ite	eq
 80022ce:	2101      	moveq	r1, #1
 80022d0:	2100      	movne	r1, #0
 80022d2:	f000 80e4 	beq.w	800249e <HAL_DMA_Abort_IT+0x1fa>
 80022d6:	3030      	adds	r0, #48	; 0x30
 80022d8:	4283      	cmp	r3, r0
 80022da:	f000 80e0 	beq.w	800249e <HAL_DMA_Abort_IT+0x1fa>
 80022de:	3018      	adds	r0, #24
 80022e0:	4283      	cmp	r3, r0
 80022e2:	f000 80dc 	beq.w	800249e <HAL_DMA_Abort_IT+0x1fa>
 80022e6:	3018      	adds	r0, #24
 80022e8:	4283      	cmp	r3, r0
 80022ea:	f000 80d8 	beq.w	800249e <HAL_DMA_Abort_IT+0x1fa>
 80022ee:	3018      	adds	r0, #24
 80022f0:	4283      	cmp	r3, r0
 80022f2:	f000 80d4 	beq.w	800249e <HAL_DMA_Abort_IT+0x1fa>
 80022f6:	3018      	adds	r0, #24
 80022f8:	4283      	cmp	r3, r0
 80022fa:	f000 80d0 	beq.w	800249e <HAL_DMA_Abort_IT+0x1fa>
 80022fe:	3018      	adds	r0, #24
 8002300:	4283      	cmp	r3, r0
 8002302:	f000 80cc 	beq.w	800249e <HAL_DMA_Abort_IT+0x1fa>
 8002306:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800230a:	4283      	cmp	r3, r0
 800230c:	f000 80c7 	beq.w	800249e <HAL_DMA_Abort_IT+0x1fa>
 8002310:	3018      	adds	r0, #24
 8002312:	4283      	cmp	r3, r0
 8002314:	f000 80c3 	beq.w	800249e <HAL_DMA_Abort_IT+0x1fa>
 8002318:	3018      	adds	r0, #24
 800231a:	4283      	cmp	r3, r0
 800231c:	f000 80bf 	beq.w	800249e <HAL_DMA_Abort_IT+0x1fa>
 8002320:	3018      	adds	r0, #24
 8002322:	4283      	cmp	r3, r0
 8002324:	f000 80bb 	beq.w	800249e <HAL_DMA_Abort_IT+0x1fa>
 8002328:	3018      	adds	r0, #24
 800232a:	4283      	cmp	r3, r0
 800232c:	f000 80b7 	beq.w	800249e <HAL_DMA_Abort_IT+0x1fa>
 8002330:	3018      	adds	r0, #24
 8002332:	4283      	cmp	r3, r0
 8002334:	f000 80b3 	beq.w	800249e <HAL_DMA_Abort_IT+0x1fa>
 8002338:	3018      	adds	r0, #24
 800233a:	4283      	cmp	r3, r0
 800233c:	f000 80af 	beq.w	800249e <HAL_DMA_Abort_IT+0x1fa>
 8002340:	3018      	adds	r0, #24
 8002342:	4283      	cmp	r3, r0
 8002344:	f000 80ab 	beq.w	800249e <HAL_DMA_Abort_IT+0x1fa>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002348:	6819      	ldr	r1, [r3, #0]
 800234a:	f021 010e 	bic.w	r1, r1, #14
 800234e:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8002350:	6813      	ldr	r3, [r2, #0]
 8002352:	f5a0 6095 	sub.w	r0, r0, #1192	; 0x4a8
 8002356:	4975      	ldr	r1, [pc, #468]	; (800252c <HAL_DMA_Abort_IT+0x288>)
 8002358:	428b      	cmp	r3, r1
 800235a:	bf18      	it	ne
 800235c:	4283      	cmpne	r3, r0
 800235e:	d02b      	beq.n	80023b8 <HAL_DMA_Abort_IT+0x114>
 8002360:	4973      	ldr	r1, [pc, #460]	; (8002530 <HAL_DMA_Abort_IT+0x28c>)
 8002362:	428b      	cmp	r3, r1
 8002364:	d028      	beq.n	80023b8 <HAL_DMA_Abort_IT+0x114>
 8002366:	3118      	adds	r1, #24
 8002368:	428b      	cmp	r3, r1
 800236a:	d025      	beq.n	80023b8 <HAL_DMA_Abort_IT+0x114>
 800236c:	3118      	adds	r1, #24
 800236e:	428b      	cmp	r3, r1
 8002370:	d022      	beq.n	80023b8 <HAL_DMA_Abort_IT+0x114>
 8002372:	3118      	adds	r1, #24
 8002374:	428b      	cmp	r3, r1
 8002376:	d01f      	beq.n	80023b8 <HAL_DMA_Abort_IT+0x114>
 8002378:	3118      	adds	r1, #24
 800237a:	428b      	cmp	r3, r1
 800237c:	d01c      	beq.n	80023b8 <HAL_DMA_Abort_IT+0x114>
 800237e:	3118      	adds	r1, #24
 8002380:	428b      	cmp	r3, r1
 8002382:	d019      	beq.n	80023b8 <HAL_DMA_Abort_IT+0x114>
 8002384:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002388:	428b      	cmp	r3, r1
 800238a:	d015      	beq.n	80023b8 <HAL_DMA_Abort_IT+0x114>
 800238c:	3118      	adds	r1, #24
 800238e:	428b      	cmp	r3, r1
 8002390:	d012      	beq.n	80023b8 <HAL_DMA_Abort_IT+0x114>
 8002392:	3118      	adds	r1, #24
 8002394:	428b      	cmp	r3, r1
 8002396:	d00f      	beq.n	80023b8 <HAL_DMA_Abort_IT+0x114>
 8002398:	3118      	adds	r1, #24
 800239a:	428b      	cmp	r3, r1
 800239c:	d00c      	beq.n	80023b8 <HAL_DMA_Abort_IT+0x114>
 800239e:	3118      	adds	r1, #24
 80023a0:	428b      	cmp	r3, r1
 80023a2:	d009      	beq.n	80023b8 <HAL_DMA_Abort_IT+0x114>
 80023a4:	3118      	adds	r1, #24
 80023a6:	428b      	cmp	r3, r1
 80023a8:	d006      	beq.n	80023b8 <HAL_DMA_Abort_IT+0x114>
 80023aa:	3118      	adds	r1, #24
 80023ac:	428b      	cmp	r3, r1
 80023ae:	d003      	beq.n	80023b8 <HAL_DMA_Abort_IT+0x114>
 80023b0:	3118      	adds	r1, #24
 80023b2:	428b      	cmp	r3, r1
 80023b4:	f040 80ae 	bne.w	8002514 <HAL_DMA_Abort_IT+0x270>
 80023b8:	6819      	ldr	r1, [r3, #0]
 80023ba:	f021 0101 	bic.w	r1, r1, #1
 80023be:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023c0:	6813      	ldr	r3, [r2, #0]
 80023c2:	4859      	ldr	r0, [pc, #356]	; (8002528 <HAL_DMA_Abort_IT+0x284>)
 80023c4:	4959      	ldr	r1, [pc, #356]	; (800252c <HAL_DMA_Abort_IT+0x288>)
 80023c6:	428b      	cmp	r3, r1
 80023c8:	bf18      	it	ne
 80023ca:	4283      	cmpne	r3, r0
 80023cc:	d042      	beq.n	8002454 <HAL_DMA_Abort_IT+0x1b0>
 80023ce:	3118      	adds	r1, #24
 80023d0:	428b      	cmp	r3, r1
 80023d2:	d03f      	beq.n	8002454 <HAL_DMA_Abort_IT+0x1b0>
 80023d4:	3118      	adds	r1, #24
 80023d6:	428b      	cmp	r3, r1
 80023d8:	d03c      	beq.n	8002454 <HAL_DMA_Abort_IT+0x1b0>
 80023da:	3118      	adds	r1, #24
 80023dc:	428b      	cmp	r3, r1
 80023de:	d039      	beq.n	8002454 <HAL_DMA_Abort_IT+0x1b0>
 80023e0:	3118      	adds	r1, #24
 80023e2:	428b      	cmp	r3, r1
 80023e4:	d036      	beq.n	8002454 <HAL_DMA_Abort_IT+0x1b0>
 80023e6:	3118      	adds	r1, #24
 80023e8:	428b      	cmp	r3, r1
 80023ea:	d033      	beq.n	8002454 <HAL_DMA_Abort_IT+0x1b0>
 80023ec:	3118      	adds	r1, #24
 80023ee:	428b      	cmp	r3, r1
 80023f0:	d030      	beq.n	8002454 <HAL_DMA_Abort_IT+0x1b0>
 80023f2:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80023f6:	428b      	cmp	r3, r1
 80023f8:	d02c      	beq.n	8002454 <HAL_DMA_Abort_IT+0x1b0>
 80023fa:	3118      	adds	r1, #24
 80023fc:	428b      	cmp	r3, r1
 80023fe:	d029      	beq.n	8002454 <HAL_DMA_Abort_IT+0x1b0>
 8002400:	3118      	adds	r1, #24
 8002402:	428b      	cmp	r3, r1
 8002404:	d026      	beq.n	8002454 <HAL_DMA_Abort_IT+0x1b0>
 8002406:	3118      	adds	r1, #24
 8002408:	428b      	cmp	r3, r1
 800240a:	d023      	beq.n	8002454 <HAL_DMA_Abort_IT+0x1b0>
 800240c:	3118      	adds	r1, #24
 800240e:	428b      	cmp	r3, r1
 8002410:	d020      	beq.n	8002454 <HAL_DMA_Abort_IT+0x1b0>
 8002412:	3118      	adds	r1, #24
 8002414:	428b      	cmp	r3, r1
 8002416:	d01d      	beq.n	8002454 <HAL_DMA_Abort_IT+0x1b0>
 8002418:	3118      	adds	r1, #24
 800241a:	428b      	cmp	r3, r1
 800241c:	d01a      	beq.n	8002454 <HAL_DMA_Abort_IT+0x1b0>
 800241e:	3118      	adds	r1, #24
 8002420:	428b      	cmp	r3, r1
 8002422:	d017      	beq.n	8002454 <HAL_DMA_Abort_IT+0x1b0>
 8002424:	4943      	ldr	r1, [pc, #268]	; (8002534 <HAL_DMA_Abort_IT+0x290>)
 8002426:	428b      	cmp	r3, r1
 8002428:	d014      	beq.n	8002454 <HAL_DMA_Abort_IT+0x1b0>
 800242a:	3114      	adds	r1, #20
 800242c:	428b      	cmp	r3, r1
 800242e:	d011      	beq.n	8002454 <HAL_DMA_Abort_IT+0x1b0>
 8002430:	3114      	adds	r1, #20
 8002432:	428b      	cmp	r3, r1
 8002434:	d00e      	beq.n	8002454 <HAL_DMA_Abort_IT+0x1b0>
 8002436:	3114      	adds	r1, #20
 8002438:	428b      	cmp	r3, r1
 800243a:	d00b      	beq.n	8002454 <HAL_DMA_Abort_IT+0x1b0>
 800243c:	3114      	adds	r1, #20
 800243e:	428b      	cmp	r3, r1
 8002440:	d008      	beq.n	8002454 <HAL_DMA_Abort_IT+0x1b0>
 8002442:	3114      	adds	r1, #20
 8002444:	428b      	cmp	r3, r1
 8002446:	d005      	beq.n	8002454 <HAL_DMA_Abort_IT+0x1b0>
 8002448:	3114      	adds	r1, #20
 800244a:	428b      	cmp	r3, r1
 800244c:	d002      	beq.n	8002454 <HAL_DMA_Abort_IT+0x1b0>
 800244e:	3114      	adds	r1, #20
 8002450:	428b      	cmp	r3, r1
 8002452:	d117      	bne.n	8002484 <HAL_DMA_Abort_IT+0x1e0>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002454:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8002456:	680b      	ldr	r3, [r1, #0]
 8002458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800245c:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800245e:	6d90      	ldr	r0, [r2, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002460:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8002462:	f003 011f 	and.w	r1, r3, #31
 8002466:	2301      	movs	r3, #1
 8002468:	408b      	lsls	r3, r1
 800246a:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800246c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800246e:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8002470:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8002472:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 8002474:	b133      	cbz	r3, 8002484 <HAL_DMA_Abort_IT+0x1e0>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002476:	6819      	ldr	r1, [r3, #0]
 8002478:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800247c:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800247e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002480:	6f51      	ldr	r1, [r2, #116]	; 0x74
 8002482:	6059      	str	r1, [r3, #4]
      __HAL_UNLOCK(hdma);
 8002484:	2300      	movs	r3, #0
 8002486:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800248a:	2301      	movs	r3, #1
 800248c:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8002490:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002492:	2b00      	cmp	r3, #0
 8002494:	d045      	beq.n	8002522 <HAL_DMA_Abort_IT+0x27e>
 8002496:	4610      	mov	r0, r2
        hdma->XferAbortCallback(hdma);
 8002498:	4798      	blx	r3
  return HAL_OK;
 800249a:	2000      	movs	r0, #0
 800249c:	e70f      	b.n	80022be <HAL_DMA_Abort_IT+0x1a>
      hdma->State = HAL_DMA_STATE_ABORT;
 800249e:	2004      	movs	r0, #4
 80024a0:	f882 0035 	strb.w	r0, [r2, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80024a4:	bb81      	cbnz	r1, 8002508 <HAL_DMA_Abort_IT+0x264>
 80024a6:	4a22      	ldr	r2, [pc, #136]	; (8002530 <HAL_DMA_Abort_IT+0x28c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d02d      	beq.n	8002508 <HAL_DMA_Abort_IT+0x264>
 80024ac:	3218      	adds	r2, #24
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d02a      	beq.n	8002508 <HAL_DMA_Abort_IT+0x264>
 80024b2:	3218      	adds	r2, #24
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d027      	beq.n	8002508 <HAL_DMA_Abort_IT+0x264>
 80024b8:	3218      	adds	r2, #24
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d024      	beq.n	8002508 <HAL_DMA_Abort_IT+0x264>
 80024be:	3218      	adds	r2, #24
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d021      	beq.n	8002508 <HAL_DMA_Abort_IT+0x264>
 80024c4:	3218      	adds	r2, #24
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d01e      	beq.n	8002508 <HAL_DMA_Abort_IT+0x264>
 80024ca:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d01a      	beq.n	8002508 <HAL_DMA_Abort_IT+0x264>
 80024d2:	3218      	adds	r2, #24
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d017      	beq.n	8002508 <HAL_DMA_Abort_IT+0x264>
 80024d8:	3218      	adds	r2, #24
 80024da:	4293      	cmp	r3, r2
 80024dc:	d014      	beq.n	8002508 <HAL_DMA_Abort_IT+0x264>
 80024de:	3218      	adds	r2, #24
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d011      	beq.n	8002508 <HAL_DMA_Abort_IT+0x264>
 80024e4:	3218      	adds	r2, #24
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d00e      	beq.n	8002508 <HAL_DMA_Abort_IT+0x264>
 80024ea:	3218      	adds	r2, #24
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d00b      	beq.n	8002508 <HAL_DMA_Abort_IT+0x264>
 80024f0:	3218      	adds	r2, #24
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d008      	beq.n	8002508 <HAL_DMA_Abort_IT+0x264>
 80024f6:	3218      	adds	r2, #24
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d005      	beq.n	8002508 <HAL_DMA_Abort_IT+0x264>
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	f022 0201 	bic.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002504:	2000      	movs	r0, #0
 8002506:	e6da      	b.n	80022be <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	f022 0201 	bic.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002510:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 8002512:	e6d4      	b.n	80022be <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8002514:	6819      	ldr	r1, [r3, #0]
 8002516:	f021 0101 	bic.w	r1, r1, #1
 800251a:	6019      	str	r1, [r3, #0]
 800251c:	e750      	b.n	80023c0 <HAL_DMA_Abort_IT+0x11c>
    return HAL_ERROR;
 800251e:	2001      	movs	r0, #1
}
 8002520:	4770      	bx	lr
  return HAL_OK;
 8002522:	2000      	movs	r0, #0
 8002524:	e6cb      	b.n	80022be <HAL_DMA_Abort_IT+0x1a>
 8002526:	bf00      	nop
 8002528:	40020010 	.word	0x40020010
 800252c:	40020028 	.word	0x40020028
 8002530:	40020040 	.word	0x40020040
 8002534:	58025408 	.word	0x58025408

08002538 <HAL_DMA_IRQHandler>:
{
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253a:	b083      	sub	sp, #12
 800253c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800253e:	2300      	movs	r3, #0
 8002540:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002542:	4ba2      	ldr	r3, [pc, #648]	; (80027cc <HAL_DMA_IRQHandler+0x294>)
 8002544:	681d      	ldr	r5, [r3, #0]
 8002546:	4ba2      	ldr	r3, [pc, #648]	; (80027d0 <HAL_DMA_IRQHandler+0x298>)
 8002548:	fba3 3505 	umull	r3, r5, r3, r5
 800254c:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800254e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr_dma  = regs_dma->ISR;
 8002550:	683e      	ldr	r6, [r7, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8002552:	f8d7 c000 	ldr.w	ip, [r7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002556:	6803      	ldr	r3, [r0, #0]
 8002558:	499e      	ldr	r1, [pc, #632]	; (80027d4 <HAL_DMA_IRQHandler+0x29c>)
 800255a:	489f      	ldr	r0, [pc, #636]	; (80027d8 <HAL_DMA_IRQHandler+0x2a0>)
 800255c:	4283      	cmp	r3, r0
 800255e:	bf18      	it	ne
 8002560:	428b      	cmpne	r3, r1
 8002562:	bf0c      	ite	eq
 8002564:	2001      	moveq	r0, #1
 8002566:	2000      	movne	r0, #0
 8002568:	d061      	beq.n	800262e <HAL_DMA_IRQHandler+0xf6>
 800256a:	4a9c      	ldr	r2, [pc, #624]	; (80027dc <HAL_DMA_IRQHandler+0x2a4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d05e      	beq.n	800262e <HAL_DMA_IRQHandler+0xf6>
 8002570:	3218      	adds	r2, #24
 8002572:	4293      	cmp	r3, r2
 8002574:	d05b      	beq.n	800262e <HAL_DMA_IRQHandler+0xf6>
 8002576:	3218      	adds	r2, #24
 8002578:	4293      	cmp	r3, r2
 800257a:	d058      	beq.n	800262e <HAL_DMA_IRQHandler+0xf6>
 800257c:	3218      	adds	r2, #24
 800257e:	4293      	cmp	r3, r2
 8002580:	d055      	beq.n	800262e <HAL_DMA_IRQHandler+0xf6>
 8002582:	3218      	adds	r2, #24
 8002584:	4293      	cmp	r3, r2
 8002586:	d052      	beq.n	800262e <HAL_DMA_IRQHandler+0xf6>
 8002588:	3218      	adds	r2, #24
 800258a:	4293      	cmp	r3, r2
 800258c:	d04f      	beq.n	800262e <HAL_DMA_IRQHandler+0xf6>
 800258e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002592:	4293      	cmp	r3, r2
 8002594:	d04b      	beq.n	800262e <HAL_DMA_IRQHandler+0xf6>
 8002596:	3218      	adds	r2, #24
 8002598:	4293      	cmp	r3, r2
 800259a:	d048      	beq.n	800262e <HAL_DMA_IRQHandler+0xf6>
 800259c:	3218      	adds	r2, #24
 800259e:	4293      	cmp	r3, r2
 80025a0:	d045      	beq.n	800262e <HAL_DMA_IRQHandler+0xf6>
 80025a2:	3218      	adds	r2, #24
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d042      	beq.n	800262e <HAL_DMA_IRQHandler+0xf6>
 80025a8:	3218      	adds	r2, #24
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d03f      	beq.n	800262e <HAL_DMA_IRQHandler+0xf6>
 80025ae:	3218      	adds	r2, #24
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d03c      	beq.n	800262e <HAL_DMA_IRQHandler+0xf6>
 80025b4:	3218      	adds	r2, #24
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d039      	beq.n	800262e <HAL_DMA_IRQHandler+0xf6>
 80025ba:	3218      	adds	r2, #24
 80025bc:	4293      	cmp	r3, r2
 80025be:	d036      	beq.n	800262e <HAL_DMA_IRQHandler+0xf6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80025c0:	4987      	ldr	r1, [pc, #540]	; (80027e0 <HAL_DMA_IRQHandler+0x2a8>)
 80025c2:	4a88      	ldr	r2, [pc, #544]	; (80027e4 <HAL_DMA_IRQHandler+0x2ac>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	bf18      	it	ne
 80025c8:	428b      	cmpne	r3, r1
 80025ca:	d012      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xba>
 80025cc:	4a86      	ldr	r2, [pc, #536]	; (80027e8 <HAL_DMA_IRQHandler+0x2b0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00f      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xba>
 80025d2:	3214      	adds	r2, #20
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d00c      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xba>
 80025d8:	3214      	adds	r2, #20
 80025da:	4293      	cmp	r3, r2
 80025dc:	d009      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xba>
 80025de:	3214      	adds	r2, #20
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d006      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xba>
 80025e4:	3214      	adds	r2, #20
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d003      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xba>
 80025ea:	3214      	adds	r2, #20
 80025ec:	4293      	cmp	r3, r2
 80025ee:	f040 8262 	bne.w	8002ab6 <HAL_DMA_IRQHandler+0x57e>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80025f2:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80025f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80025f6:	f001 011f 	and.w	r1, r1, #31
 80025fa:	2004      	movs	r0, #4
 80025fc:	4088      	lsls	r0, r1
 80025fe:	ea10 0f0c 	tst.w	r0, ip
 8002602:	f000 82a8 	beq.w	8002b56 <HAL_DMA_IRQHandler+0x61e>
 8002606:	f012 0f04 	tst.w	r2, #4
 800260a:	f000 82a4 	beq.w	8002b56 <HAL_DMA_IRQHandler+0x61e>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800260e:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002610:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002614:	f000 825b 	beq.w	8002ace <HAL_DMA_IRQHandler+0x596>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002618:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800261c:	f040 8251 	bne.w	8002ac2 <HAL_DMA_IRQHandler+0x58a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002620:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 8247 	beq.w	8002ab6 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferM1HalfCpltCallback(hdma);
 8002628:	4620      	mov	r0, r4
 800262a:	4798      	blx	r3
 800262c:	e243      	b.n	8002ab6 <HAL_DMA_IRQHandler+0x57e>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800262e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002630:	f002 011f 	and.w	r1, r2, #31
 8002634:	2208      	movs	r2, #8
 8002636:	408a      	lsls	r2, r1
 8002638:	4232      	tst	r2, r6
 800263a:	d041      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x188>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800263c:	bb70      	cbnz	r0, 800269c <HAL_DMA_IRQHandler+0x164>
 800263e:	4a67      	ldr	r2, [pc, #412]	; (80027dc <HAL_DMA_IRQHandler+0x2a4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d02b      	beq.n	800269c <HAL_DMA_IRQHandler+0x164>
 8002644:	3218      	adds	r2, #24
 8002646:	4293      	cmp	r3, r2
 8002648:	d028      	beq.n	800269c <HAL_DMA_IRQHandler+0x164>
 800264a:	3218      	adds	r2, #24
 800264c:	4293      	cmp	r3, r2
 800264e:	d025      	beq.n	800269c <HAL_DMA_IRQHandler+0x164>
 8002650:	3218      	adds	r2, #24
 8002652:	4293      	cmp	r3, r2
 8002654:	d022      	beq.n	800269c <HAL_DMA_IRQHandler+0x164>
 8002656:	3218      	adds	r2, #24
 8002658:	4293      	cmp	r3, r2
 800265a:	d01f      	beq.n	800269c <HAL_DMA_IRQHandler+0x164>
 800265c:	3218      	adds	r2, #24
 800265e:	4293      	cmp	r3, r2
 8002660:	d01c      	beq.n	800269c <HAL_DMA_IRQHandler+0x164>
 8002662:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002666:	4293      	cmp	r3, r2
 8002668:	d018      	beq.n	800269c <HAL_DMA_IRQHandler+0x164>
 800266a:	3218      	adds	r2, #24
 800266c:	4293      	cmp	r3, r2
 800266e:	d015      	beq.n	800269c <HAL_DMA_IRQHandler+0x164>
 8002670:	3218      	adds	r2, #24
 8002672:	4293      	cmp	r3, r2
 8002674:	d012      	beq.n	800269c <HAL_DMA_IRQHandler+0x164>
 8002676:	3218      	adds	r2, #24
 8002678:	4293      	cmp	r3, r2
 800267a:	d00f      	beq.n	800269c <HAL_DMA_IRQHandler+0x164>
 800267c:	3218      	adds	r2, #24
 800267e:	4293      	cmp	r3, r2
 8002680:	d00c      	beq.n	800269c <HAL_DMA_IRQHandler+0x164>
 8002682:	3218      	adds	r2, #24
 8002684:	4293      	cmp	r3, r2
 8002686:	d009      	beq.n	800269c <HAL_DMA_IRQHandler+0x164>
 8002688:	3218      	adds	r2, #24
 800268a:	4293      	cmp	r3, r2
 800268c:	d006      	beq.n	800269c <HAL_DMA_IRQHandler+0x164>
 800268e:	3218      	adds	r2, #24
 8002690:	4293      	cmp	r3, r2
 8002692:	d003      	beq.n	800269c <HAL_DMA_IRQHandler+0x164>
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800269a:	e002      	b.n	80026a2 <HAL_DMA_IRQHandler+0x16a>
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80026a2:	b16a      	cbz	r2, 80026c0 <HAL_DMA_IRQHandler+0x188>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	f022 0204 	bic.w	r2, r2, #4
 80026aa:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80026ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80026ae:	f003 021f 	and.w	r2, r3, #31
 80026b2:	2308      	movs	r3, #8
 80026b4:	4093      	lsls	r3, r2
 80026b6:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80026c0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80026c2:	f002 021f 	and.w	r2, r2, #31
 80026c6:	fa26 f302 	lsr.w	r3, r6, r2
 80026ca:	f013 0f01 	tst.w	r3, #1
 80026ce:	d037      	beq.n	8002740 <HAL_DMA_IRQHandler+0x208>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80026d0:	6823      	ldr	r3, [r4, #0]
 80026d2:	4840      	ldr	r0, [pc, #256]	; (80027d4 <HAL_DMA_IRQHandler+0x29c>)
 80026d4:	4940      	ldr	r1, [pc, #256]	; (80027d8 <HAL_DMA_IRQHandler+0x2a0>)
 80026d6:	428b      	cmp	r3, r1
 80026d8:	bf18      	it	ne
 80026da:	4283      	cmpne	r3, r0
 80026dc:	d02c      	beq.n	8002738 <HAL_DMA_IRQHandler+0x200>
 80026de:	3118      	adds	r1, #24
 80026e0:	428b      	cmp	r3, r1
 80026e2:	d029      	beq.n	8002738 <HAL_DMA_IRQHandler+0x200>
 80026e4:	3118      	adds	r1, #24
 80026e6:	428b      	cmp	r3, r1
 80026e8:	d026      	beq.n	8002738 <HAL_DMA_IRQHandler+0x200>
 80026ea:	3118      	adds	r1, #24
 80026ec:	428b      	cmp	r3, r1
 80026ee:	d023      	beq.n	8002738 <HAL_DMA_IRQHandler+0x200>
 80026f0:	3118      	adds	r1, #24
 80026f2:	428b      	cmp	r3, r1
 80026f4:	d020      	beq.n	8002738 <HAL_DMA_IRQHandler+0x200>
 80026f6:	3118      	adds	r1, #24
 80026f8:	428b      	cmp	r3, r1
 80026fa:	d01d      	beq.n	8002738 <HAL_DMA_IRQHandler+0x200>
 80026fc:	3118      	adds	r1, #24
 80026fe:	428b      	cmp	r3, r1
 8002700:	d01a      	beq.n	8002738 <HAL_DMA_IRQHandler+0x200>
 8002702:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002706:	428b      	cmp	r3, r1
 8002708:	d016      	beq.n	8002738 <HAL_DMA_IRQHandler+0x200>
 800270a:	3118      	adds	r1, #24
 800270c:	428b      	cmp	r3, r1
 800270e:	d013      	beq.n	8002738 <HAL_DMA_IRQHandler+0x200>
 8002710:	3118      	adds	r1, #24
 8002712:	428b      	cmp	r3, r1
 8002714:	d010      	beq.n	8002738 <HAL_DMA_IRQHandler+0x200>
 8002716:	3118      	adds	r1, #24
 8002718:	428b      	cmp	r3, r1
 800271a:	d00d      	beq.n	8002738 <HAL_DMA_IRQHandler+0x200>
 800271c:	3118      	adds	r1, #24
 800271e:	428b      	cmp	r3, r1
 8002720:	d00a      	beq.n	8002738 <HAL_DMA_IRQHandler+0x200>
 8002722:	3118      	adds	r1, #24
 8002724:	428b      	cmp	r3, r1
 8002726:	d007      	beq.n	8002738 <HAL_DMA_IRQHandler+0x200>
 8002728:	3118      	adds	r1, #24
 800272a:	428b      	cmp	r3, r1
 800272c:	d004      	beq.n	8002738 <HAL_DMA_IRQHandler+0x200>
 800272e:	3118      	adds	r1, #24
 8002730:	428b      	cmp	r3, r1
 8002732:	d001      	beq.n	8002738 <HAL_DMA_IRQHandler+0x200>
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	e003      	b.n	8002740 <HAL_DMA_IRQHandler+0x208>
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800273e:	d13b      	bne.n	80027b8 <HAL_DMA_IRQHandler+0x280>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002740:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002742:	f003 031f 	and.w	r3, r3, #31
 8002746:	2204      	movs	r2, #4
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	4233      	tst	r3, r6
 800274e:	d051      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x2bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002750:	6822      	ldr	r2, [r4, #0]
 8002752:	4820      	ldr	r0, [pc, #128]	; (80027d4 <HAL_DMA_IRQHandler+0x29c>)
 8002754:	4920      	ldr	r1, [pc, #128]	; (80027d8 <HAL_DMA_IRQHandler+0x2a0>)
 8002756:	428a      	cmp	r2, r1
 8002758:	bf18      	it	ne
 800275a:	4282      	cmpne	r2, r0
 800275c:	d046      	beq.n	80027ec <HAL_DMA_IRQHandler+0x2b4>
 800275e:	3118      	adds	r1, #24
 8002760:	428a      	cmp	r2, r1
 8002762:	d043      	beq.n	80027ec <HAL_DMA_IRQHandler+0x2b4>
 8002764:	3118      	adds	r1, #24
 8002766:	428a      	cmp	r2, r1
 8002768:	d040      	beq.n	80027ec <HAL_DMA_IRQHandler+0x2b4>
 800276a:	3118      	adds	r1, #24
 800276c:	428a      	cmp	r2, r1
 800276e:	d03d      	beq.n	80027ec <HAL_DMA_IRQHandler+0x2b4>
 8002770:	3118      	adds	r1, #24
 8002772:	428a      	cmp	r2, r1
 8002774:	d03a      	beq.n	80027ec <HAL_DMA_IRQHandler+0x2b4>
 8002776:	3118      	adds	r1, #24
 8002778:	428a      	cmp	r2, r1
 800277a:	d037      	beq.n	80027ec <HAL_DMA_IRQHandler+0x2b4>
 800277c:	3118      	adds	r1, #24
 800277e:	428a      	cmp	r2, r1
 8002780:	d034      	beq.n	80027ec <HAL_DMA_IRQHandler+0x2b4>
 8002782:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002786:	428a      	cmp	r2, r1
 8002788:	d030      	beq.n	80027ec <HAL_DMA_IRQHandler+0x2b4>
 800278a:	3118      	adds	r1, #24
 800278c:	428a      	cmp	r2, r1
 800278e:	d02d      	beq.n	80027ec <HAL_DMA_IRQHandler+0x2b4>
 8002790:	3118      	adds	r1, #24
 8002792:	428a      	cmp	r2, r1
 8002794:	d02a      	beq.n	80027ec <HAL_DMA_IRQHandler+0x2b4>
 8002796:	3118      	adds	r1, #24
 8002798:	428a      	cmp	r2, r1
 800279a:	d027      	beq.n	80027ec <HAL_DMA_IRQHandler+0x2b4>
 800279c:	3118      	adds	r1, #24
 800279e:	428a      	cmp	r2, r1
 80027a0:	d024      	beq.n	80027ec <HAL_DMA_IRQHandler+0x2b4>
 80027a2:	3118      	adds	r1, #24
 80027a4:	428a      	cmp	r2, r1
 80027a6:	d021      	beq.n	80027ec <HAL_DMA_IRQHandler+0x2b4>
 80027a8:	3118      	adds	r1, #24
 80027aa:	428a      	cmp	r2, r1
 80027ac:	d01e      	beq.n	80027ec <HAL_DMA_IRQHandler+0x2b4>
 80027ae:	3118      	adds	r1, #24
 80027b0:	428a      	cmp	r2, r1
 80027b2:	d01b      	beq.n	80027ec <HAL_DMA_IRQHandler+0x2b4>
 80027b4:	6813      	ldr	r3, [r2, #0]
 80027b6:	e01d      	b.n	80027f4 <HAL_DMA_IRQHandler+0x2bc>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80027b8:	2301      	movs	r3, #1
 80027ba:	fa03 f202 	lsl.w	r2, r3, r2
 80027be:	60ba      	str	r2, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80027c2:	f043 0302 	orr.w	r3, r3, #2
 80027c6:	6563      	str	r3, [r4, #84]	; 0x54
 80027c8:	e7ba      	b.n	8002740 <HAL_DMA_IRQHandler+0x208>
 80027ca:	bf00      	nop
 80027cc:	20000010 	.word	0x20000010
 80027d0:	1b4e81b5 	.word	0x1b4e81b5
 80027d4:	40020010 	.word	0x40020010
 80027d8:	40020028 	.word	0x40020028
 80027dc:	40020040 	.word	0x40020040
 80027e0:	58025408 	.word	0x58025408
 80027e4:	5802541c 	.word	0x5802541c
 80027e8:	58025430 	.word	0x58025430
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80027ec:	6812      	ldr	r2, [r2, #0]
 80027ee:	f012 0f02 	tst.w	r2, #2
 80027f2:	d13d      	bne.n	8002870 <HAL_DMA_IRQHandler+0x338>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027f4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80027f6:	f003 031f 	and.w	r3, r3, #31
 80027fa:	2210      	movs	r2, #16
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	4233      	tst	r3, r6
 8002802:	d05f      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x38c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002804:	6822      	ldr	r2, [r4, #0]
 8002806:	489b      	ldr	r0, [pc, #620]	; (8002a74 <HAL_DMA_IRQHandler+0x53c>)
 8002808:	499b      	ldr	r1, [pc, #620]	; (8002a78 <HAL_DMA_IRQHandler+0x540>)
 800280a:	428a      	cmp	r2, r1
 800280c:	bf18      	it	ne
 800280e:	4282      	cmpne	r2, r0
 8002810:	d034      	beq.n	800287c <HAL_DMA_IRQHandler+0x344>
 8002812:	3118      	adds	r1, #24
 8002814:	428a      	cmp	r2, r1
 8002816:	d031      	beq.n	800287c <HAL_DMA_IRQHandler+0x344>
 8002818:	3118      	adds	r1, #24
 800281a:	428a      	cmp	r2, r1
 800281c:	d02e      	beq.n	800287c <HAL_DMA_IRQHandler+0x344>
 800281e:	3118      	adds	r1, #24
 8002820:	428a      	cmp	r2, r1
 8002822:	d02b      	beq.n	800287c <HAL_DMA_IRQHandler+0x344>
 8002824:	3118      	adds	r1, #24
 8002826:	428a      	cmp	r2, r1
 8002828:	d028      	beq.n	800287c <HAL_DMA_IRQHandler+0x344>
 800282a:	3118      	adds	r1, #24
 800282c:	428a      	cmp	r2, r1
 800282e:	d025      	beq.n	800287c <HAL_DMA_IRQHandler+0x344>
 8002830:	3118      	adds	r1, #24
 8002832:	428a      	cmp	r2, r1
 8002834:	d022      	beq.n	800287c <HAL_DMA_IRQHandler+0x344>
 8002836:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800283a:	428a      	cmp	r2, r1
 800283c:	d01e      	beq.n	800287c <HAL_DMA_IRQHandler+0x344>
 800283e:	3118      	adds	r1, #24
 8002840:	428a      	cmp	r2, r1
 8002842:	d01b      	beq.n	800287c <HAL_DMA_IRQHandler+0x344>
 8002844:	3118      	adds	r1, #24
 8002846:	428a      	cmp	r2, r1
 8002848:	d018      	beq.n	800287c <HAL_DMA_IRQHandler+0x344>
 800284a:	3118      	adds	r1, #24
 800284c:	428a      	cmp	r2, r1
 800284e:	d015      	beq.n	800287c <HAL_DMA_IRQHandler+0x344>
 8002850:	3118      	adds	r1, #24
 8002852:	428a      	cmp	r2, r1
 8002854:	d012      	beq.n	800287c <HAL_DMA_IRQHandler+0x344>
 8002856:	3118      	adds	r1, #24
 8002858:	428a      	cmp	r2, r1
 800285a:	d00f      	beq.n	800287c <HAL_DMA_IRQHandler+0x344>
 800285c:	3118      	adds	r1, #24
 800285e:	428a      	cmp	r2, r1
 8002860:	d00c      	beq.n	800287c <HAL_DMA_IRQHandler+0x344>
 8002862:	3118      	adds	r1, #24
 8002864:	428a      	cmp	r2, r1
 8002866:	d009      	beq.n	800287c <HAL_DMA_IRQHandler+0x344>
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800286e:	e008      	b.n	8002882 <HAL_DMA_IRQHandler+0x34a>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002870:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002872:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002874:	f043 0304 	orr.w	r3, r3, #4
 8002878:	6563      	str	r3, [r4, #84]	; 0x54
 800287a:	e7bb      	b.n	80027f4 <HAL_DMA_IRQHandler+0x2bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800287c:	6812      	ldr	r2, [r2, #0]
 800287e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8002882:	b1fa      	cbz	r2, 80028c4 <HAL_DMA_IRQHandler+0x38c>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002884:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002886:	6823      	ldr	r3, [r4, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800288e:	d00d      	beq.n	80028ac <HAL_DMA_IRQHandler+0x374>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002896:	d104      	bne.n	80028a2 <HAL_DMA_IRQHandler+0x36a>
            if(hdma->XferHalfCpltCallback != NULL)
 8002898:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800289a:	b19b      	cbz	r3, 80028c4 <HAL_DMA_IRQHandler+0x38c>
              hdma->XferHalfCpltCallback(hdma);
 800289c:	4620      	mov	r0, r4
 800289e:	4798      	blx	r3
 80028a0:	e010      	b.n	80028c4 <HAL_DMA_IRQHandler+0x38c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80028a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80028a4:	b173      	cbz	r3, 80028c4 <HAL_DMA_IRQHandler+0x38c>
              hdma->XferM1HalfCpltCallback(hdma);
 80028a6:	4620      	mov	r0, r4
 80028a8:	4798      	blx	r3
 80028aa:	e00b      	b.n	80028c4 <HAL_DMA_IRQHandler+0x38c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	f412 7f80 	tst.w	r2, #256	; 0x100
 80028b2:	d103      	bne.n	80028bc <HAL_DMA_IRQHandler+0x384>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	f022 0208 	bic.w	r2, r2, #8
 80028ba:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80028bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028be:	b10b      	cbz	r3, 80028c4 <HAL_DMA_IRQHandler+0x38c>
            hdma->XferHalfCpltCallback(hdma);
 80028c0:	4620      	mov	r0, r4
 80028c2:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80028c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80028c6:	f003 031f 	and.w	r3, r3, #31
 80028ca:	2220      	movs	r2, #32
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	4233      	tst	r3, r6
 80028d2:	f000 808e 	beq.w	80029f2 <HAL_DMA_IRQHandler+0x4ba>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80028d6:	6822      	ldr	r2, [r4, #0]
 80028d8:	4866      	ldr	r0, [pc, #408]	; (8002a74 <HAL_DMA_IRQHandler+0x53c>)
 80028da:	4967      	ldr	r1, [pc, #412]	; (8002a78 <HAL_DMA_IRQHandler+0x540>)
 80028dc:	428a      	cmp	r2, r1
 80028de:	bf18      	it	ne
 80028e0:	4282      	cmpne	r2, r0
 80028e2:	d02e      	beq.n	8002942 <HAL_DMA_IRQHandler+0x40a>
 80028e4:	3118      	adds	r1, #24
 80028e6:	428a      	cmp	r2, r1
 80028e8:	d02b      	beq.n	8002942 <HAL_DMA_IRQHandler+0x40a>
 80028ea:	3118      	adds	r1, #24
 80028ec:	428a      	cmp	r2, r1
 80028ee:	d028      	beq.n	8002942 <HAL_DMA_IRQHandler+0x40a>
 80028f0:	3118      	adds	r1, #24
 80028f2:	428a      	cmp	r2, r1
 80028f4:	d025      	beq.n	8002942 <HAL_DMA_IRQHandler+0x40a>
 80028f6:	3118      	adds	r1, #24
 80028f8:	428a      	cmp	r2, r1
 80028fa:	d022      	beq.n	8002942 <HAL_DMA_IRQHandler+0x40a>
 80028fc:	3118      	adds	r1, #24
 80028fe:	428a      	cmp	r2, r1
 8002900:	d01f      	beq.n	8002942 <HAL_DMA_IRQHandler+0x40a>
 8002902:	3118      	adds	r1, #24
 8002904:	428a      	cmp	r2, r1
 8002906:	d01c      	beq.n	8002942 <HAL_DMA_IRQHandler+0x40a>
 8002908:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800290c:	428a      	cmp	r2, r1
 800290e:	d018      	beq.n	8002942 <HAL_DMA_IRQHandler+0x40a>
 8002910:	3118      	adds	r1, #24
 8002912:	428a      	cmp	r2, r1
 8002914:	d015      	beq.n	8002942 <HAL_DMA_IRQHandler+0x40a>
 8002916:	3118      	adds	r1, #24
 8002918:	428a      	cmp	r2, r1
 800291a:	d012      	beq.n	8002942 <HAL_DMA_IRQHandler+0x40a>
 800291c:	3118      	adds	r1, #24
 800291e:	428a      	cmp	r2, r1
 8002920:	d00f      	beq.n	8002942 <HAL_DMA_IRQHandler+0x40a>
 8002922:	3118      	adds	r1, #24
 8002924:	428a      	cmp	r2, r1
 8002926:	d00c      	beq.n	8002942 <HAL_DMA_IRQHandler+0x40a>
 8002928:	3118      	adds	r1, #24
 800292a:	428a      	cmp	r2, r1
 800292c:	d009      	beq.n	8002942 <HAL_DMA_IRQHandler+0x40a>
 800292e:	3118      	adds	r1, #24
 8002930:	428a      	cmp	r2, r1
 8002932:	d006      	beq.n	8002942 <HAL_DMA_IRQHandler+0x40a>
 8002934:	3118      	adds	r1, #24
 8002936:	428a      	cmp	r2, r1
 8002938:	d003      	beq.n	8002942 <HAL_DMA_IRQHandler+0x40a>
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8002940:	e002      	b.n	8002948 <HAL_DMA_IRQHandler+0x410>
 8002942:	6812      	ldr	r2, [r2, #0]
 8002944:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002948:	2a00      	cmp	r2, #0
 800294a:	d052      	beq.n	80029f2 <HAL_DMA_IRQHandler+0x4ba>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800294c:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800294e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b04      	cmp	r3, #4
 8002956:	d00e      	beq.n	8002976 <HAL_DMA_IRQHandler+0x43e>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002958:	6823      	ldr	r3, [r4, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002960:	d035      	beq.n	80029ce <HAL_DMA_IRQHandler+0x496>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002968:	d12c      	bne.n	80029c4 <HAL_DMA_IRQHandler+0x48c>
            if(hdma->XferM1CpltCallback != NULL)
 800296a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800296c:	2b00      	cmp	r3, #0
 800296e:	d040      	beq.n	80029f2 <HAL_DMA_IRQHandler+0x4ba>
              hdma->XferM1CpltCallback(hdma);
 8002970:	4620      	mov	r0, r4
 8002972:	4798      	blx	r3
 8002974:	e03d      	b.n	80029f2 <HAL_DMA_IRQHandler+0x4ba>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002976:	6822      	ldr	r2, [r4, #0]
 8002978:	6813      	ldr	r3, [r2, #0]
 800297a:	f023 0316 	bic.w	r3, r3, #22
 800297e:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002980:	6822      	ldr	r2, [r4, #0]
 8002982:	6953      	ldr	r3, [r2, #20]
 8002984:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002988:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800298a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800298c:	b1b3      	cbz	r3, 80029bc <HAL_DMA_IRQHandler+0x484>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800298e:	6822      	ldr	r2, [r4, #0]
 8002990:	6813      	ldr	r3, [r2, #0]
 8002992:	f023 0308 	bic.w	r3, r3, #8
 8002996:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002998:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800299a:	f003 021f 	and.w	r2, r3, #31
 800299e:	233f      	movs	r3, #63	; 0x3f
 80029a0:	4093      	lsls	r3, r2
 80029a2:	60bb      	str	r3, [r7, #8]
          __HAL_UNLOCK(hdma);
 80029a4:	2300      	movs	r3, #0
 80029a6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80029aa:	2301      	movs	r3, #1
 80029ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 80029b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d07f      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferAbortCallback(hdma);
 80029b6:	4620      	mov	r0, r4
 80029b8:	4798      	blx	r3
 80029ba:	e07c      	b.n	8002ab6 <HAL_DMA_IRQHandler+0x57e>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1e5      	bne.n	800298e <HAL_DMA_IRQHandler+0x456>
 80029c2:	e7e9      	b.n	8002998 <HAL_DMA_IRQHandler+0x460>
            if(hdma->XferCpltCallback != NULL)
 80029c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80029c6:	b1a3      	cbz	r3, 80029f2 <HAL_DMA_IRQHandler+0x4ba>
              hdma->XferCpltCallback(hdma);
 80029c8:	4620      	mov	r0, r4
 80029ca:	4798      	blx	r3
 80029cc:	e011      	b.n	80029f2 <HAL_DMA_IRQHandler+0x4ba>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	f412 7f80 	tst.w	r2, #256	; 0x100
 80029d4:	d109      	bne.n	80029ea <HAL_DMA_IRQHandler+0x4b2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	f022 0210 	bic.w	r2, r2, #16
 80029dc:	601a      	str	r2, [r3, #0]
            __HAL_UNLOCK(hdma);
 80029de:	2300      	movs	r3, #0
 80029e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 80029e4:	2301      	movs	r3, #1
 80029e6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferCpltCallback != NULL)
 80029ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80029ec:	b10b      	cbz	r3, 80029f2 <HAL_DMA_IRQHandler+0x4ba>
            hdma->XferCpltCallback(hdma);
 80029ee:	4620      	mov	r0, r4
 80029f0:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d05e      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x57e>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80029f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80029fa:	f013 0f01 	tst.w	r3, #1
 80029fe:	d056      	beq.n	8002aae <HAL_DMA_IRQHandler+0x576>
        hdma->State = HAL_DMA_STATE_ABORT;
 8002a00:	2304      	movs	r3, #4
 8002a02:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8002a06:	6823      	ldr	r3, [r4, #0]
 8002a08:	491a      	ldr	r1, [pc, #104]	; (8002a74 <HAL_DMA_IRQHandler+0x53c>)
 8002a0a:	4a1b      	ldr	r2, [pc, #108]	; (8002a78 <HAL_DMA_IRQHandler+0x540>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	bf18      	it	ne
 8002a10:	428b      	cmpne	r3, r1
 8002a12:	d033      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x544>
 8002a14:	3218      	adds	r2, #24
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d030      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x544>
 8002a1a:	3218      	adds	r2, #24
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d02d      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x544>
 8002a20:	3218      	adds	r2, #24
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d02a      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x544>
 8002a26:	3218      	adds	r2, #24
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d027      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x544>
 8002a2c:	3218      	adds	r2, #24
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d024      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x544>
 8002a32:	3218      	adds	r2, #24
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d021      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x544>
 8002a38:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d01d      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x544>
 8002a40:	3218      	adds	r2, #24
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d01a      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x544>
 8002a46:	3218      	adds	r2, #24
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d017      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x544>
 8002a4c:	3218      	adds	r2, #24
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d014      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x544>
 8002a52:	3218      	adds	r2, #24
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d011      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x544>
 8002a58:	3218      	adds	r2, #24
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00e      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x544>
 8002a5e:	3218      	adds	r2, #24
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d00b      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x544>
 8002a64:	3218      	adds	r2, #24
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d008      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x544>
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	f022 0201 	bic.w	r2, r2, #1
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	e007      	b.n	8002a84 <HAL_DMA_IRQHandler+0x54c>
 8002a74:	40020010 	.word	0x40020010
 8002a78:	40020028 	.word	0x40020028
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	f022 0201 	bic.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 8002a84:	9b01      	ldr	r3, [sp, #4]
 8002a86:	3301      	adds	r3, #1
 8002a88:	9301      	str	r3, [sp, #4]
 8002a8a:	42ab      	cmp	r3, r5
 8002a8c:	d804      	bhi.n	8002a98 <HAL_DMA_IRQHandler+0x560>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002a8e:	6823      	ldr	r3, [r4, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f013 0f01 	tst.w	r3, #1
 8002a96:	d1f5      	bne.n	8002a84 <HAL_DMA_IRQHandler+0x54c>
        __HAL_UNLOCK(hdma);
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f013 0f01 	tst.w	r3, #1
 8002aa6:	d008      	beq.n	8002aba <HAL_DMA_IRQHandler+0x582>
          hdma->State = HAL_DMA_STATE_ERROR;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 8002aae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002ab0:	b10b      	cbz	r3, 8002ab6 <HAL_DMA_IRQHandler+0x57e>
        hdma->XferErrorCallback(hdma);
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	4798      	blx	r3
}
 8002ab6:	b003      	add	sp, #12
 8002ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hdma->State = HAL_DMA_STATE_READY;
 8002aba:	2301      	movs	r3, #1
 8002abc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8002ac0:	e7f5      	b.n	8002aae <HAL_DMA_IRQHandler+0x576>
          if(hdma->XferHalfCpltCallback != NULL)
 8002ac2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0f6      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferHalfCpltCallback(hdma);
 8002ac8:	4620      	mov	r0, r4
 8002aca:	4798      	blx	r3
 8002acc:	e7f3      	b.n	8002ab6 <HAL_DMA_IRQHandler+0x57e>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002ace:	f012 0f20 	tst.w	r2, #32
 8002ad2:	d135      	bne.n	8002b40 <HAL_DMA_IRQHandler+0x608>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ad4:	6823      	ldr	r3, [r4, #0]
 8002ad6:	4964      	ldr	r1, [pc, #400]	; (8002c68 <HAL_DMA_IRQHandler+0x730>)
 8002ad8:	4a64      	ldr	r2, [pc, #400]	; (8002c6c <HAL_DMA_IRQHandler+0x734>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	bf18      	it	ne
 8002ade:	428b      	cmpne	r3, r1
 8002ae0:	d02a      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x600>
 8002ae2:	3218      	adds	r2, #24
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d027      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x600>
 8002ae8:	3218      	adds	r2, #24
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d024      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x600>
 8002aee:	3218      	adds	r2, #24
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d021      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x600>
 8002af4:	3218      	adds	r2, #24
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d01e      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x600>
 8002afa:	3218      	adds	r2, #24
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d01b      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x600>
 8002b00:	3218      	adds	r2, #24
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d018      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x600>
 8002b06:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d014      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x600>
 8002b0e:	3218      	adds	r2, #24
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d011      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x600>
 8002b14:	3218      	adds	r2, #24
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00e      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x600>
 8002b1a:	3218      	adds	r2, #24
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d00b      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x600>
 8002b20:	3218      	adds	r2, #24
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d008      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x600>
 8002b26:	3218      	adds	r2, #24
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d005      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x600>
 8002b2c:	3218      	adds	r2, #24
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d002      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x600>
 8002b32:	3218      	adds	r2, #24
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d109      	bne.n	8002b4c <HAL_DMA_IRQHandler+0x614>
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	f022 0208 	bic.w	r2, r2, #8
 8002b3e:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8002b40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0b7      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x57e>
          hdma->XferHalfCpltCallback(hdma);
 8002b46:	4620      	mov	r0, r4
 8002b48:	4798      	blx	r3
 8002b4a:	e7b4      	b.n	8002ab6 <HAL_DMA_IRQHandler+0x57e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	f022 0204 	bic.w	r2, r2, #4
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	e7f4      	b.n	8002b40 <HAL_DMA_IRQHandler+0x608>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002b56:	2002      	movs	r0, #2
 8002b58:	4088      	lsls	r0, r1
 8002b5a:	ea10 0f0c 	tst.w	r0, ip
 8002b5e:	d060      	beq.n	8002c22 <HAL_DMA_IRQHandler+0x6ea>
 8002b60:	f012 0f02 	tst.w	r2, #2
 8002b64:	d05d      	beq.n	8002c22 <HAL_DMA_IRQHandler+0x6ea>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002b66:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b68:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002b6c:	d00e      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x654>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002b6e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002b72:	d105      	bne.n	8002b80 <HAL_DMA_IRQHandler+0x648>
          if(hdma->XferM1CpltCallback != NULL)
 8002b74:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d09d      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferM1CpltCallback(hdma);
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	4798      	blx	r3
 8002b7e:	e79a      	b.n	8002ab6 <HAL_DMA_IRQHandler+0x57e>
          if(hdma->XferCpltCallback != NULL)
 8002b80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d097      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferCpltCallback(hdma);
 8002b86:	4620      	mov	r0, r4
 8002b88:	4798      	blx	r3
 8002b8a:	e794      	b.n	8002ab6 <HAL_DMA_IRQHandler+0x57e>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002b8c:	f012 0f20 	tst.w	r2, #32
 8002b90:	d13b      	bne.n	8002c0a <HAL_DMA_IRQHandler+0x6d2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b92:	6823      	ldr	r3, [r4, #0]
 8002b94:	4934      	ldr	r1, [pc, #208]	; (8002c68 <HAL_DMA_IRQHandler+0x730>)
 8002b96:	4a35      	ldr	r2, [pc, #212]	; (8002c6c <HAL_DMA_IRQHandler+0x734>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	bf18      	it	ne
 8002b9c:	428b      	cmpne	r3, r1
 8002b9e:	d02a      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x6be>
 8002ba0:	3218      	adds	r2, #24
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d027      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x6be>
 8002ba6:	3218      	adds	r2, #24
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d024      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x6be>
 8002bac:	3218      	adds	r2, #24
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d021      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x6be>
 8002bb2:	3218      	adds	r2, #24
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d01e      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x6be>
 8002bb8:	3218      	adds	r2, #24
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d01b      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x6be>
 8002bbe:	3218      	adds	r2, #24
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d018      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x6be>
 8002bc4:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d014      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x6be>
 8002bcc:	3218      	adds	r2, #24
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d011      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x6be>
 8002bd2:	3218      	adds	r2, #24
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d00e      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x6be>
 8002bd8:	3218      	adds	r2, #24
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00b      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x6be>
 8002bde:	3218      	adds	r2, #24
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d008      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x6be>
 8002be4:	3218      	adds	r2, #24
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d005      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x6be>
 8002bea:	3218      	adds	r2, #24
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d002      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x6be>
 8002bf0:	3218      	adds	r2, #24
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d110      	bne.n	8002c18 <HAL_DMA_IRQHandler+0x6e0>
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	f022 0214 	bic.w	r2, r2, #20
 8002bfc:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002c04:	2301      	movs	r3, #1
 8002c06:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8002c0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f43f af52 	beq.w	8002ab6 <HAL_DMA_IRQHandler+0x57e>
          hdma->XferCpltCallback(hdma);
 8002c12:	4620      	mov	r0, r4
 8002c14:	4798      	blx	r3
 8002c16:	e74e      	b.n	8002ab6 <HAL_DMA_IRQHandler+0x57e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	f022 020a 	bic.w	r2, r2, #10
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	e7ed      	b.n	8002bfe <HAL_DMA_IRQHandler+0x6c6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002c22:	2008      	movs	r0, #8
 8002c24:	fa00 f101 	lsl.w	r1, r0, r1
 8002c28:	ea11 0f0c 	tst.w	r1, ip
 8002c2c:	f43f af43 	beq.w	8002ab6 <HAL_DMA_IRQHandler+0x57e>
 8002c30:	f012 0f08 	tst.w	r2, #8
 8002c34:	f43f af3f 	beq.w	8002ab6 <HAL_DMA_IRQHandler+0x57e>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	f022 020e 	bic.w	r2, r2, #14
 8002c3e:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002c40:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002c42:	f003 031f 	and.w	r3, r3, #31
 8002c46:	2201      	movs	r2, #1
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	607b      	str	r3, [r7, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c4e:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8002c50:	2300      	movs	r3, #0
 8002c52:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002c56:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8002c5a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f43f af2a 	beq.w	8002ab6 <HAL_DMA_IRQHandler+0x57e>
        hdma->XferErrorCallback(hdma);
 8002c62:	4620      	mov	r0, r4
 8002c64:	4798      	blx	r3
 8002c66:	e726      	b.n	8002ab6 <HAL_DMA_IRQHandler+0x57e>
 8002c68:	40020010 	.word	0x40020010
 8002c6c:	40020028 	.word	0x40020028

08002c70 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8002c70:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8002c72:	4770      	bx	lr

08002c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c76:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8002c78:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c7a:	e03a      	b.n	8002cf2 <HAL_GPIO_Init+0x7e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c7c:	2409      	movs	r4, #9
 8002c7e:	e000      	b.n	8002c82 <HAL_GPIO_Init+0xe>
 8002c80:	2400      	movs	r4, #0
 8002c82:	40b4      	lsls	r4, r6
 8002c84:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c86:	3502      	adds	r5, #2
 8002c88:	4e6e      	ldr	r6, [pc, #440]	; (8002e44 <HAL_GPIO_Init+0x1d0>)
 8002c8a:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002c8e:	4c6e      	ldr	r4, [pc, #440]	; (8002e48 <HAL_GPIO_Init+0x1d4>)
 8002c90:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8002c92:	43d4      	mvns	r4, r2
 8002c94:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c98:	684f      	ldr	r7, [r1, #4]
 8002c9a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002c9e:	d001      	beq.n	8002ca4 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8002ca0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002ca4:	4d68      	ldr	r5, [pc, #416]	; (8002e48 <HAL_GPIO_Init+0x1d4>)
 8002ca6:	602e      	str	r6, [r5, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002ca8:	686e      	ldr	r6, [r5, #4]
        temp &= ~(iocurrent);
 8002caa:	ea04 0506 	and.w	r5, r4, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cae:	684f      	ldr	r7, [r1, #4]
 8002cb0:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002cb4:	d001      	beq.n	8002cba <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 8002cb6:	ea42 0506 	orr.w	r5, r2, r6
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002cba:	4e63      	ldr	r6, [pc, #396]	; (8002e48 <HAL_GPIO_Init+0x1d4>)
 8002cbc:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cbe:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002cc2:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8002cc4:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cc8:	684f      	ldr	r7, [r1, #4]
 8002cca:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002cce:	d001      	beq.n	8002cd4 <HAL_GPIO_Init+0x60>
        {
          temp |= iocurrent;
 8002cd0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8002cd4:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002cd8:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8002cda:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002cdc:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cde:	684e      	ldr	r6, [r1, #4]
 8002ce0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002ce4:	d001      	beq.n	8002cea <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8002ce6:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8002cea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cee:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 8002cf0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002cf2:	680a      	ldr	r2, [r1, #0]
 8002cf4:	fa32 f403 	lsrs.w	r4, r2, r3
 8002cf8:	f000 80a2 	beq.w	8002e40 <HAL_GPIO_Init+0x1cc>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002cfc:	2401      	movs	r4, #1
 8002cfe:	409c      	lsls	r4, r3
    if (iocurrent != 0x00U)
 8002d00:	4022      	ands	r2, r4
 8002d02:	d0f5      	beq.n	8002cf0 <HAL_GPIO_Init+0x7c>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d04:	684d      	ldr	r5, [r1, #4]
 8002d06:	1e6e      	subs	r6, r5, #1
 8002d08:	2d11      	cmp	r5, #17
 8002d0a:	bf18      	it	ne
 8002d0c:	2e01      	cmpne	r6, #1
 8002d0e:	d901      	bls.n	8002d14 <HAL_GPIO_Init+0xa0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d10:	2d12      	cmp	r5, #18
 8002d12:	d112      	bne.n	8002d3a <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR;
 8002d14:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d16:	005f      	lsls	r7, r3, #1
 8002d18:	2503      	movs	r5, #3
 8002d1a:	40bd      	lsls	r5, r7
 8002d1c:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d20:	68cd      	ldr	r5, [r1, #12]
 8002d22:	40bd      	lsls	r5, r7
 8002d24:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8002d26:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8002d28:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d2a:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d2e:	684d      	ldr	r5, [r1, #4]
 8002d30:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8002d34:	409c      	lsls	r4, r3
 8002d36:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8002d38:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8002d3a:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d3c:	005f      	lsls	r7, r3, #1
 8002d3e:	2503      	movs	r5, #3
 8002d40:	40bd      	lsls	r5, r7
 8002d42:	43ec      	mvns	r4, r5
 8002d44:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d46:	688d      	ldr	r5, [r1, #8]
 8002d48:	40bd      	lsls	r5, r7
 8002d4a:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8002d4c:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d4e:	684d      	ldr	r5, [r1, #4]
 8002d50:	2d12      	cmp	r5, #18
 8002d52:	bf18      	it	ne
 8002d54:	2d02      	cmpne	r5, #2
 8002d56:	d113      	bne.n	8002d80 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8002d58:	08de      	lsrs	r6, r3, #3
 8002d5a:	3608      	adds	r6, #8
 8002d5c:	f850 e026 	ldr.w	lr, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d60:	f003 0507 	and.w	r5, r3, #7
 8002d64:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8002d68:	250f      	movs	r5, #15
 8002d6a:	fa05 f50c 	lsl.w	r5, r5, ip
 8002d6e:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d72:	690d      	ldr	r5, [r1, #16]
 8002d74:	fa05 f50c 	lsl.w	r5, r5, ip
 8002d78:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002d7c:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8002d80:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d82:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d84:	684c      	ldr	r4, [r1, #4]
 8002d86:	f004 0403 	and.w	r4, r4, #3
 8002d8a:	40bc      	lsls	r4, r7
 8002d8c:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8002d8e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d90:	684c      	ldr	r4, [r1, #4]
 8002d92:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8002d96:	d0ab      	beq.n	8002cf0 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d98:	4c2c      	ldr	r4, [pc, #176]	; (8002e4c <HAL_GPIO_Init+0x1d8>)
 8002d9a:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 8002d9e:	f045 0502 	orr.w	r5, r5, #2
 8002da2:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 8002da6:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 8002daa:	f004 0402 	and.w	r4, r4, #2
 8002dae:	9401      	str	r4, [sp, #4]
 8002db0:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002db2:	089d      	lsrs	r5, r3, #2
 8002db4:	1cae      	adds	r6, r5, #2
 8002db6:	4c23      	ldr	r4, [pc, #140]	; (8002e44 <HAL_GPIO_Init+0x1d0>)
 8002db8:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002dbc:	f003 0403 	and.w	r4, r3, #3
 8002dc0:	00a6      	lsls	r6, r4, #2
 8002dc2:	240f      	movs	r4, #15
 8002dc4:	40b4      	lsls	r4, r6
 8002dc6:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002dca:	4c21      	ldr	r4, [pc, #132]	; (8002e50 <HAL_GPIO_Init+0x1dc>)
 8002dcc:	42a0      	cmp	r0, r4
 8002dce:	f43f af57 	beq.w	8002c80 <HAL_GPIO_Init+0xc>
 8002dd2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002dd6:	42a0      	cmp	r0, r4
 8002dd8:	d022      	beq.n	8002e20 <HAL_GPIO_Init+0x1ac>
 8002dda:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002dde:	42a0      	cmp	r0, r4
 8002de0:	d020      	beq.n	8002e24 <HAL_GPIO_Init+0x1b0>
 8002de2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002de6:	42a0      	cmp	r0, r4
 8002de8:	d01e      	beq.n	8002e28 <HAL_GPIO_Init+0x1b4>
 8002dea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002dee:	42a0      	cmp	r0, r4
 8002df0:	d01c      	beq.n	8002e2c <HAL_GPIO_Init+0x1b8>
 8002df2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002df6:	42a0      	cmp	r0, r4
 8002df8:	d01a      	beq.n	8002e30 <HAL_GPIO_Init+0x1bc>
 8002dfa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002dfe:	42a0      	cmp	r0, r4
 8002e00:	d018      	beq.n	8002e34 <HAL_GPIO_Init+0x1c0>
 8002e02:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e06:	42a0      	cmp	r0, r4
 8002e08:	d016      	beq.n	8002e38 <HAL_GPIO_Init+0x1c4>
 8002e0a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e0e:	42a0      	cmp	r0, r4
 8002e10:	d014      	beq.n	8002e3c <HAL_GPIO_Init+0x1c8>
 8002e12:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e16:	42a0      	cmp	r0, r4
 8002e18:	f43f af30 	beq.w	8002c7c <HAL_GPIO_Init+0x8>
 8002e1c:	240a      	movs	r4, #10
 8002e1e:	e730      	b.n	8002c82 <HAL_GPIO_Init+0xe>
 8002e20:	2401      	movs	r4, #1
 8002e22:	e72e      	b.n	8002c82 <HAL_GPIO_Init+0xe>
 8002e24:	2402      	movs	r4, #2
 8002e26:	e72c      	b.n	8002c82 <HAL_GPIO_Init+0xe>
 8002e28:	2403      	movs	r4, #3
 8002e2a:	e72a      	b.n	8002c82 <HAL_GPIO_Init+0xe>
 8002e2c:	2404      	movs	r4, #4
 8002e2e:	e728      	b.n	8002c82 <HAL_GPIO_Init+0xe>
 8002e30:	2405      	movs	r4, #5
 8002e32:	e726      	b.n	8002c82 <HAL_GPIO_Init+0xe>
 8002e34:	2406      	movs	r4, #6
 8002e36:	e724      	b.n	8002c82 <HAL_GPIO_Init+0xe>
 8002e38:	2407      	movs	r4, #7
 8002e3a:	e722      	b.n	8002c82 <HAL_GPIO_Init+0xe>
 8002e3c:	2408      	movs	r4, #8
 8002e3e:	e720      	b.n	8002c82 <HAL_GPIO_Init+0xe>
  }
}
 8002e40:	b003      	add	sp, #12
 8002e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e44:	58000400 	.word	0x58000400
 8002e48:	58000080 	.word	0x58000080
 8002e4c:	58024400 	.word	0x58024400
 8002e50:	58020000 	.word	0x58020000

08002e54 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002e54:	6903      	ldr	r3, [r0, #16]
 8002e56:	4219      	tst	r1, r3
 8002e58:	d101      	bne.n	8002e5e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e5a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002e5c:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8002e5e:	2001      	movs	r0, #1
 8002e60:	4770      	bx	lr

08002e62 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e62:	b912      	cbnz	r2, 8002e6a <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e64:	0409      	lsls	r1, r1, #16
 8002e66:	6181      	str	r1, [r0, #24]
  }
}
 8002e68:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8002e6a:	6181      	str	r1, [r0, #24]
 8002e6c:	4770      	bx	lr

08002e6e <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8002e6e:	b410      	push	{r4}
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002e70:	6804      	ldr	r4, [r0, #0]
 8002e72:	6822      	ldr	r2, [r4, #0]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8002e74:	f022 0207 	bic.w	r2, r2, #7
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8002e78:	688b      	ldr	r3, [r1, #8]
 8002e7a:	4313      	orrs	r3, r2

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8002e7c:	f023 0318 	bic.w	r3, r3, #24
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002e80:	68ca      	ldr	r2, [r1, #12]
 8002e82:	4313      	orrs	r3, r2

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002e84:	6023      	str	r3, [r4, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8002e86:	6803      	ldr	r3, [r0, #0]
 8002e88:	680a      	ldr	r2, [r1, #0]
 8002e8a:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8002e8c:	6803      	ldr	r3, [r0, #0]
 8002e8e:	684a      	ldr	r2, [r1, #4]
 8002e90:	619a      	str	r2, [r3, #24]
}
 8002e92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8002e98:	b470      	push	{r4, r5, r6}
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8002e9a:	6806      	ldr	r6, [r0, #0]
 8002e9c:	1c4c      	adds	r4, r1, #1
 8002e9e:	01e4      	lsls	r4, r4, #7
 8002ea0:	5935      	ldr	r5, [r6, r4]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8002ea2:	f025 0507 	bic.w	r5, r5, #7
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8002ea6:	6893      	ldr	r3, [r2, #8]
 8002ea8:	432b      	orrs	r3, r5

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8002eaa:	f023 0318 	bic.w	r3, r3, #24
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002eae:	68d5      	ldr	r5, [r2, #12]
 8002eb0:	432b      	orrs	r3, r5

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8002eb2:	5133      	str	r3, [r6, r4]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8002eb4:	6803      	ldr	r3, [r0, #0]
 8002eb6:	6814      	ldr	r4, [r2, #0]
 8002eb8:	01c9      	lsls	r1, r1, #7
 8002eba:	440b      	add	r3, r1
 8002ebc:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8002ec0:	6803      	ldr	r3, [r0, #0]
 8002ec2:	6852      	ldr	r2, [r2, #4]
 8002ec4:	4419      	add	r1, r3
 8002ec6:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
}
 8002eca:	bc70      	pop	{r4, r5, r6}
 8002ecc:	4770      	bx	lr

08002ece <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8002ece:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8002ed0:	6807      	ldr	r7, [r0, #0]
 8002ed2:	eb07 14c1 	add.w	r4, r7, r1, lsl #7
 8002ed6:	f8d4 50e4 	ldr.w	r5, [r4, #228]	; 0xe4
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8002eda:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8

  switch (Output)
 8002ede:	2a10      	cmp	r2, #16
 8002ee0:	d007      	beq.n	8002ef2 <HRTIM_OutputConfig+0x24>
 8002ee2:	d92f      	bls.n	8002f44 <HRTIM_OutputConfig+0x76>
 8002ee4:	2a80      	cmp	r2, #128	; 0x80
 8002ee6:	d034      	beq.n	8002f52 <HRTIM_OutputConfig+0x84>
 8002ee8:	d844      	bhi.n	8002f74 <HRTIM_OutputConfig+0xa6>
 8002eea:	2a20      	cmp	r2, #32
 8002eec:	d031      	beq.n	8002f52 <HRTIM_OutputConfig+0x84>
 8002eee:	2a40      	cmp	r2, #64	; 0x40
 8002ef0:	d13e      	bne.n	8002f70 <HRTIM_OutputConfig+0xa2>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8002ef2:	685c      	ldr	r4, [r3, #4]
 8002ef4:	ea4f 1cc1 	mov.w	ip, r1, lsl #7
 8002ef8:	4467      	add	r7, ip
 8002efa:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8002efe:	6802      	ldr	r2, [r0, #0]
 8002f00:	689c      	ldr	r4, [r3, #8]
 8002f02:	4462      	add	r2, ip
 8002f04:	f8c2 40c0 	str.w	r4, [r2, #192]	; 0xc0
  uint32_t shift = 0U;
 8002f08:	2200      	movs	r2, #0
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8002f0a:	24fe      	movs	r4, #254	; 0xfe
 8002f0c:	4094      	lsls	r4, r2
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8002f0e:	ea25 0504 	bic.w	r5, r5, r4

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8002f12:	681c      	ldr	r4, [r3, #0]
 8002f14:	4094      	lsls	r4, r2
 8002f16:	4325      	orrs	r5, r4

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8002f18:	68dc      	ldr	r4, [r3, #12]
 8002f1a:	4094      	lsls	r4, r2
 8002f1c:	432c      	orrs	r4, r5

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8002f1e:	691f      	ldr	r7, [r3, #16]
 8002f20:	fa07 f502 	lsl.w	r5, r7, r2
 8002f24:	4325      	orrs	r5, r4

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8002f26:	695c      	ldr	r4, [r3, #20]
 8002f28:	4094      	lsls	r4, r2
 8002f2a:	4325      	orrs	r5, r4

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8002f2c:	699c      	ldr	r4, [r3, #24]
 8002f2e:	4094      	lsls	r4, r2
 8002f30:	432c      	orrs	r4, r5
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8002f32:	2f08      	cmp	r7, #8
 8002f34:	d025      	beq.n	8002f82 <HRTIM_OutputConfig+0xb4>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8002f36:	6803      	ldr	r3, [r0, #0]
 8002f38:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
 8002f3c:	f8c1 40e4 	str.w	r4, [r1, #228]	; 0xe4
}
 8002f40:	bcf0      	pop	{r4, r5, r6, r7}
 8002f42:	4770      	bx	lr
  switch (Output)
 8002f44:	2a02      	cmp	r2, #2
 8002f46:	d004      	beq.n	8002f52 <HRTIM_OutputConfig+0x84>
 8002f48:	d910      	bls.n	8002f6c <HRTIM_OutputConfig+0x9e>
 8002f4a:	2a04      	cmp	r2, #4
 8002f4c:	d0d1      	beq.n	8002ef2 <HRTIM_OutputConfig+0x24>
 8002f4e:	2a08      	cmp	r2, #8
 8002f50:	d10e      	bne.n	8002f70 <HRTIM_OutputConfig+0xa2>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8002f52:	685c      	ldr	r4, [r3, #4]
 8002f54:	ea4f 1cc1 	mov.w	ip, r1, lsl #7
 8002f58:	4467      	add	r7, ip
 8002f5a:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8002f5e:	6802      	ldr	r2, [r0, #0]
 8002f60:	689c      	ldr	r4, [r3, #8]
 8002f62:	4462      	add	r2, ip
 8002f64:	f8c2 40c8 	str.w	r4, [r2, #200]	; 0xc8
      shift = 16U;
 8002f68:	2210      	movs	r2, #16
      break;
 8002f6a:	e7ce      	b.n	8002f0a <HRTIM_OutputConfig+0x3c>
  switch (Output)
 8002f6c:	2a01      	cmp	r2, #1
 8002f6e:	d0c0      	beq.n	8002ef2 <HRTIM_OutputConfig+0x24>
  uint32_t shift = 0U;
 8002f70:	2200      	movs	r2, #0
 8002f72:	e7ca      	b.n	8002f0a <HRTIM_OutputConfig+0x3c>
  switch (Output)
 8002f74:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002f78:	d0bb      	beq.n	8002ef2 <HRTIM_OutputConfig+0x24>
 8002f7a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002f7e:	d1f7      	bne.n	8002f70 <HRTIM_OutputConfig+0xa2>
 8002f80:	e7e7      	b.n	8002f52 <HRTIM_OutputConfig+0x84>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8002f82:	f016 2f02 	tst.w	r6, #33554944	; 0x2000200
 8002f86:	d1d6      	bne.n	8002f36 <HRTIM_OutputConfig+0x68>
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	fa03 f202 	lsl.w	r2, r3, r2
 8002f8e:	4314      	orrs	r4, r2
 8002f90:	e7d1      	b.n	8002f36 <HRTIM_OutputConfig+0x68>
	...

08002f94 <HAL_HRTIM_Init>:
  if(hhrtim == NULL)
 8002f94:	2800      	cmp	r0, #0
 8002f96:	d063      	beq.n	8003060 <HAL_HRTIM_Init+0xcc>
{
 8002f98:	b510      	push	{r4, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	4604      	mov	r4, r0
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8002faa:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8002fae:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8002fb2:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8002fb6:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8002fba:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8002fbe:	6883      	ldr	r3, [r0, #8]
 8002fc0:	f013 0f01 	tst.w	r3, #1
 8002fc4:	d012      	beq.n	8002fec <HAL_HRTIM_Init+0x58>
    if (hhrtim->Instance == HRTIM1)
 8002fc6:	6802      	ldr	r2, [r0, #0]
 8002fc8:	4b26      	ldr	r3, [pc, #152]	; (8003064 <HAL_HRTIM_Init+0xd0>)
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d025      	beq.n	800301a <HAL_HRTIM_Init+0x86>
    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002fce:	6821      	ldr	r1, [r4, #0]
 8002fd0:	680a      	ldr	r2, [r1, #0]
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8002fd2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8002fd6:	6923      	ldr	r3, [r4, #16]
 8002fd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002fdc:	4313      	orrs	r3, r2
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8002fde:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8002fe2:	6962      	ldr	r2, [r4, #20]
 8002fe4:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8002fe8:	4313      	orrs	r3, r2
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002fea:	600b      	str	r3, [r1, #0]
  HAL_HRTIM_MspInit(hhrtim);
 8002fec:	4620      	mov	r0, r4
 8002fee:	f008 fd5b 	bl	800baa8 <HAL_HRTIM_MspInit>
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8002ff2:	68a3      	ldr	r3, [r4, #8]
 8002ff4:	f013 0f02 	tst.w	r3, #2
 8002ff8:	d008      	beq.n	800300c <HAL_HRTIM_Init+0x78>
    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002ffa:	6821      	ldr	r1, [r4, #0]
 8002ffc:	680a      	ldr	r2, [r1, #0]
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8002ffe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8003002:	68e3      	ldr	r3, [r4, #12]
 8003004:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003008:	4313      	orrs	r3, r2
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800300a:	600b      	str	r3, [r1, #0]
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800300c:	2301      	movs	r3, #1
 800300e:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
  __HAL_UNLOCK(hhrtim);
 8003012:	2200      	movs	r2, #0
 8003014:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8003018:	e01d      	b.n	8003056 <HAL_HRTIM_Init+0xc2>
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 800301a:	4b13      	ldr	r3, [pc, #76]	; (8003068 <HAL_HRTIM_Init+0xd4>)
 800301c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003020:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003024:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8003028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800302c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003030:	9301      	str	r3, [sp, #4]
 8003032:	9b01      	ldr	r3, [sp, #4]
 8003034:	e7cb      	b.n	8002fce <HAL_HRTIM_Init+0x3a>
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8003036:	00d0      	lsls	r0, r2, #3
 8003038:	1a81      	subs	r1, r0, r2
 800303a:	008b      	lsls	r3, r1, #2
 800303c:	4423      	add	r3, r4
 800303e:	2100      	movs	r1, #0
 8003040:	6199      	str	r1, [r3, #24]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8003042:	61d9      	str	r1, [r3, #28]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8003044:	6219      	str	r1, [r3, #32]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8003046:	6259      	str	r1, [r3, #36]	; 0x24
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8003048:	6299      	str	r1, [r3, #40]	; 0x28
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 800304a:	1a83      	subs	r3, r0, r2
 800304c:	0098      	lsls	r0, r3, #2
 800304e:	4420      	add	r0, r4
 8003050:	6301      	str	r1, [r0, #48]	; 0x30
       timer_idx++)
 8003052:	3201      	adds	r2, #1
 8003054:	b2d2      	uxtb	r2, r2
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8003056:	2a05      	cmp	r2, #5
 8003058:	d9ed      	bls.n	8003036 <HAL_HRTIM_Init+0xa2>
  return HAL_OK;
 800305a:	2000      	movs	r0, #0
}
 800305c:	b002      	add	sp, #8
 800305e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003060:	2001      	movs	r0, #1
}
 8003062:	4770      	bx	lr
 8003064:	40017400 	.word	0x40017400
 8003068:	58024400 	.word	0x58024400

0800306c <HAL_HRTIM_TimeBaseConfig>:
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800306c:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d011      	beq.n	800309a <HAL_HRTIM_TimeBaseConfig+0x2e>
{
 8003076:	b510      	push	{r4, lr}
 8003078:	4604      	mov	r4, r0
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800307a:	2302      	movs	r3, #2
 800307c:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003080:	2905      	cmp	r1, #5
 8003082:	d006      	beq.n	8003092 <HAL_HRTIM_TimeBaseConfig+0x26>
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8003084:	f7ff ff08 	bl	8002e98 <HRTIM_TimingUnitBase_Config>
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003088:	2301      	movs	r3, #1
 800308a:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
  return HAL_OK;
 800308e:	2000      	movs	r0, #0
}
 8003090:	bd10      	pop	{r4, pc}
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8003092:	4611      	mov	r1, r2
 8003094:	f7ff feeb 	bl	8002e6e <HRTIM_MasterBase_Config>
 8003098:	e7f6      	b.n	8003088 <HAL_HRTIM_TimeBaseConfig+0x1c>
     return HAL_BUSY;
 800309a:	2002      	movs	r0, #2
}
 800309c:	4770      	bx	lr

0800309e <HAL_HRTIM_SimplePWMChannelConfig>:
{
 800309e:	b570      	push	{r4, r5, r6, lr}
 80030a0:	b088      	sub	sp, #32
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80030a2:	f890 40c1 	ldrb.w	r4, [r0, #193]	; 0xc1
 80030a6:	b2e4      	uxtb	r4, r4
 80030a8:	2c02      	cmp	r4, #2
 80030aa:	d066      	beq.n	800317a <HAL_HRTIM_SimplePWMChannelConfig+0xdc>
  __HAL_LOCK(hhrtim);
 80030ac:	f890 40c0 	ldrb.w	r4, [r0, #192]	; 0xc0
 80030b0:	2c01      	cmp	r4, #1
 80030b2:	d064      	beq.n	800317e <HAL_HRTIM_SimplePWMChannelConfig+0xe0>
 80030b4:	2401      	movs	r4, #1
 80030b6:	f880 40c0 	strb.w	r4, [r0, #192]	; 0xc0
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80030ba:	2402      	movs	r4, #2
 80030bc:	f880 40c1 	strb.w	r4, [r0, #193]	; 0xc1
  switch (PWMChannel)
 80030c0:	2a10      	cmp	r2, #16
 80030c2:	d007      	beq.n	80030d4 <HAL_HRTIM_SimplePWMChannelConfig+0x36>
 80030c4:	d937      	bls.n	8003136 <HAL_HRTIM_SimplePWMChannelConfig+0x98>
 80030c6:	2a80      	cmp	r2, #128	; 0x80
 80030c8:	d03c      	beq.n	8003144 <HAL_HRTIM_SimplePWMChannelConfig+0xa6>
 80030ca:	d84f      	bhi.n	800316c <HAL_HRTIM_SimplePWMChannelConfig+0xce>
 80030cc:	2a20      	cmp	r2, #32
 80030ce:	d039      	beq.n	8003144 <HAL_HRTIM_SimplePWMChannelConfig+0xa6>
 80030d0:	2a40      	cmp	r2, #64	; 0x40
 80030d2:	d142      	bne.n	800315a <HAL_HRTIM_SimplePWMChannelConfig+0xbc>
      hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pSimplePWMChannelCfg->Pulse;
 80030d4:	6804      	ldr	r4, [r0, #0]
 80030d6:	681d      	ldr	r5, [r3, #0]
 80030d8:	eb04 14c1 	add.w	r4, r4, r1, lsl #7
 80030dc:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
      OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 80030e0:	2408      	movs	r4, #8
 80030e2:	9401      	str	r4, [sp, #4]
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80030e4:	f890 40c1 	ldrb.w	r4, [r0, #193]	; 0xc1
 80030e8:	b2e4      	uxtb	r4, r4
 80030ea:	2c07      	cmp	r4, #7
 80030ec:	d049      	beq.n	8003182 <HAL_HRTIM_SimplePWMChannelConfig+0xe4>
 80030ee:	460d      	mov	r5, r1
 80030f0:	4606      	mov	r6, r0
  OutputCfg.Polarity = (pSimplePWMChannelCfg->Polarity & HRTIM_OUTR_POL1);
 80030f2:	6859      	ldr	r1, [r3, #4]
 80030f4:	f001 0102 	and.w	r1, r1, #2
 80030f8:	9100      	str	r1, [sp, #0]
  OutputCfg.IdleLevel = (pSimplePWMChannelCfg->IdleLevel& HRTIM_OUTR_IDLES1);
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	9304      	str	r3, [sp, #16]
  OutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8003102:	2400      	movs	r4, #0
 8003104:	9405      	str	r4, [sp, #20]
  OutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8003106:	9403      	str	r4, [sp, #12]
  OutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8003108:	9406      	str	r4, [sp, #24]
  OutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 800310a:	9407      	str	r4, [sp, #28]
  OutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMPER;
 800310c:	2304      	movs	r3, #4
 800310e:	9302      	str	r3, [sp, #8]
  HRTIM_OutputConfig(hhrtim,
 8003110:	466b      	mov	r3, sp
 8003112:	4629      	mov	r1, r5
 8003114:	f7ff fedb 	bl	8002ece <HRTIM_OutputConfig>
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003118:	6832      	ldr	r2, [r6, #0]
 800311a:	1c69      	adds	r1, r5, #1
 800311c:	01c9      	lsls	r1, r1, #7
 800311e:	5853      	ldr	r3, [r2, r1]
  hrtim_timcr |= HRTIM_TIMCR_PREEN;
 8003120:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8003124:	5053      	str	r3, [r2, r1]
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003126:	2301      	movs	r3, #1
 8003128:	f886 30c1 	strb.w	r3, [r6, #193]	; 0xc1
  __HAL_UNLOCK(hhrtim);
 800312c:	f886 40c0 	strb.w	r4, [r6, #192]	; 0xc0
  return HAL_OK;
 8003130:	4620      	mov	r0, r4
}
 8003132:	b008      	add	sp, #32
 8003134:	bd70      	pop	{r4, r5, r6, pc}
  switch (PWMChannel)
 8003136:	42a2      	cmp	r2, r4
 8003138:	d004      	beq.n	8003144 <HAL_HRTIM_SimplePWMChannelConfig+0xa6>
 800313a:	d90c      	bls.n	8003156 <HAL_HRTIM_SimplePWMChannelConfig+0xb8>
 800313c:	2a04      	cmp	r2, #4
 800313e:	d0c9      	beq.n	80030d4 <HAL_HRTIM_SimplePWMChannelConfig+0x36>
 8003140:	2a08      	cmp	r2, #8
 8003142:	d10a      	bne.n	800315a <HAL_HRTIM_SimplePWMChannelConfig+0xbc>
      hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pSimplePWMChannelCfg->Pulse;
 8003144:	6804      	ldr	r4, [r0, #0]
 8003146:	681d      	ldr	r5, [r3, #0]
 8003148:	eb04 14c1 	add.w	r4, r4, r1, lsl #7
 800314c:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
      OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP2;
 8003150:	2410      	movs	r4, #16
 8003152:	9401      	str	r4, [sp, #4]
      break;
 8003154:	e7c6      	b.n	80030e4 <HAL_HRTIM_SimplePWMChannelConfig+0x46>
  switch (PWMChannel)
 8003156:	2a01      	cmp	r2, #1
 8003158:	d0bc      	beq.n	80030d4 <HAL_HRTIM_SimplePWMChannelConfig+0x36>
      OutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 800315a:	2400      	movs	r4, #0
 800315c:	9401      	str	r4, [sp, #4]
      OutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 800315e:	9402      	str	r4, [sp, #8]
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003160:	2507      	movs	r5, #7
 8003162:	f880 50c1 	strb.w	r5, [r0, #193]	; 0xc1
      __HAL_UNLOCK(hhrtim);
 8003166:	f880 40c0 	strb.w	r4, [r0, #192]	; 0xc0
      break;
 800316a:	e7bb      	b.n	80030e4 <HAL_HRTIM_SimplePWMChannelConfig+0x46>
  switch (PWMChannel)
 800316c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003170:	d0b0      	beq.n	80030d4 <HAL_HRTIM_SimplePWMChannelConfig+0x36>
 8003172:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003176:	d1f0      	bne.n	800315a <HAL_HRTIM_SimplePWMChannelConfig+0xbc>
 8003178:	e7e4      	b.n	8003144 <HAL_HRTIM_SimplePWMChannelConfig+0xa6>
     return HAL_BUSY;
 800317a:	2002      	movs	r0, #2
 800317c:	e7d9      	b.n	8003132 <HAL_HRTIM_SimplePWMChannelConfig+0x94>
  __HAL_LOCK(hhrtim);
 800317e:	2002      	movs	r0, #2
 8003180:	e7d7      	b.n	8003132 <HAL_HRTIM_SimplePWMChannelConfig+0x94>
     return HAL_ERROR;
 8003182:	2001      	movs	r0, #1
 8003184:	e7d5      	b.n	8003132 <HAL_HRTIM_SimplePWMChannelConfig+0x94>

08003186 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003186:	6803      	ldr	r3, [r0, #0]
 8003188:	699a      	ldr	r2, [r3, #24]
 800318a:	f012 0f02 	tst.w	r2, #2
 800318e:	d001      	beq.n	8003194 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003190:	2200      	movs	r2, #0
 8003192:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003194:	6803      	ldr	r3, [r0, #0]
 8003196:	699a      	ldr	r2, [r3, #24]
 8003198:	f012 0f01 	tst.w	r2, #1
 800319c:	d103      	bne.n	80031a6 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800319e:	699a      	ldr	r2, [r3, #24]
 80031a0:	f042 0201 	orr.w	r2, r2, #1
 80031a4:	619a      	str	r2, [r3, #24]
  }
}
 80031a6:	4770      	bx	lr

080031a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80031a8:	b470      	push	{r4, r5, r6}
 80031aa:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80031ac:	6805      	ldr	r5, [r0, #0]
 80031ae:	6868      	ldr	r0, [r5, #4]
 80031b0:	0d74      	lsrs	r4, r6, #21
 80031b2:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80031b6:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80031ba:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80031be:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80031c2:	f044 0403 	orr.w	r4, r4, #3
 80031c6:	ea20 0004 	bic.w	r0, r0, r4
 80031ca:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80031ce:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80031d2:	4319      	orrs	r1, r3
 80031d4:	4331      	orrs	r1, r6
 80031d6:	4301      	orrs	r1, r0
 80031d8:	6069      	str	r1, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80031da:	bc70      	pop	{r4, r5, r6}
 80031dc:	4770      	bx	lr

080031de <I2C_IsAcknowledgeFailed>:
{
 80031de:	b570      	push	{r4, r5, r6, lr}
 80031e0:	4604      	mov	r4, r0
 80031e2:	460d      	mov	r5, r1
 80031e4:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031e6:	6803      	ldr	r3, [r0, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	f013 0f10 	tst.w	r3, #16
 80031ee:	d01c      	beq.n	800322a <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	699a      	ldr	r2, [r3, #24]
 80031f4:	f012 0f20 	tst.w	r2, #32
 80031f8:	d119      	bne.n	800322e <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 80031fa:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80031fe:	d0f7      	beq.n	80031f0 <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003200:	f7fd fa4c 	bl	800069c <HAL_GetTick>
 8003204:	1b80      	subs	r0, r0, r6
 8003206:	42a8      	cmp	r0, r5
 8003208:	d801      	bhi.n	800320e <I2C_IsAcknowledgeFailed+0x30>
 800320a:	2d00      	cmp	r5, #0
 800320c:	d1f0      	bne.n	80031f0 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800320e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003210:	f043 0320 	orr.w	r3, r3, #32
 8003214:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003216:	2320      	movs	r3, #32
 8003218:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800321c:	2300      	movs	r3, #0
 800321e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8003222:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8003226:	2001      	movs	r0, #1
 8003228:	e020      	b.n	800326c <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 800322a:	2000      	movs	r0, #0
 800322c:	e01e      	b.n	800326c <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800322e:	2210      	movs	r2, #16
 8003230:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	2520      	movs	r5, #32
 8003236:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003238:	4620      	mov	r0, r4
 800323a:	f7ff ffa4 	bl	8003186 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800323e:	6822      	ldr	r2, [r4, #0]
 8003240:	6853      	ldr	r3, [r2, #4]
 8003242:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003246:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800324a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800324e:	f023 0301 	bic.w	r3, r3, #1
 8003252:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003254:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003256:	f043 0304 	orr.w	r3, r3, #4
 800325a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800325c:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003260:	2300      	movs	r3, #0
 8003262:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003266:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 800326a:	2001      	movs	r0, #1
}
 800326c:	bd70      	pop	{r4, r5, r6, pc}

0800326e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800326e:	b570      	push	{r4, r5, r6, lr}
 8003270:	4604      	mov	r4, r0
 8003272:	460d      	mov	r5, r1
 8003274:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003276:	6823      	ldr	r3, [r4, #0]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	f013 0f02 	tst.w	r3, #2
 800327e:	d11d      	bne.n	80032bc <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003280:	4632      	mov	r2, r6
 8003282:	4629      	mov	r1, r5
 8003284:	4620      	mov	r0, r4
 8003286:	f7ff ffaa 	bl	80031de <I2C_IsAcknowledgeFailed>
 800328a:	b9c8      	cbnz	r0, 80032c0 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800328c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003290:	d0f1      	beq.n	8003276 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003292:	f7fd fa03 	bl	800069c <HAL_GetTick>
 8003296:	1b80      	subs	r0, r0, r6
 8003298:	42a8      	cmp	r0, r5
 800329a:	d801      	bhi.n	80032a0 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800329c:	2d00      	cmp	r5, #0
 800329e:	d1ea      	bne.n	8003276 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80032a2:	f043 0320 	orr.w	r3, r3, #32
 80032a6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032a8:	2320      	movs	r3, #32
 80032aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ae:	2300      	movs	r3, #0
 80032b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80032b4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80032b8:	2001      	movs	r0, #1
 80032ba:	e000      	b.n	80032be <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80032bc:	2000      	movs	r0, #0
}
 80032be:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80032c0:	2001      	movs	r0, #1
 80032c2:	e7fc      	b.n	80032be <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080032c4 <I2C_WaitOnFlagUntilTimeout>:
{
 80032c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c6:	4605      	mov	r5, r0
 80032c8:	460f      	mov	r7, r1
 80032ca:	4616      	mov	r6, r2
 80032cc:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ce:	682b      	ldr	r3, [r5, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	ea37 0303 	bics.w	r3, r7, r3
 80032d6:	bf0c      	ite	eq
 80032d8:	2301      	moveq	r3, #1
 80032da:	2300      	movne	r3, #0
 80032dc:	42b3      	cmp	r3, r6
 80032de:	d118      	bne.n	8003312 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80032e0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80032e4:	d0f3      	beq.n	80032ce <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e6:	f7fd f9d9 	bl	800069c <HAL_GetTick>
 80032ea:	9b06      	ldr	r3, [sp, #24]
 80032ec:	1ac0      	subs	r0, r0, r3
 80032ee:	42a0      	cmp	r0, r4
 80032f0:	d801      	bhi.n	80032f6 <I2C_WaitOnFlagUntilTimeout+0x32>
 80032f2:	2c00      	cmp	r4, #0
 80032f4:	d1eb      	bne.n	80032ce <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032f6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80032f8:	f043 0320 	orr.w	r3, r3, #32
 80032fc:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032fe:	2320      	movs	r3, #32
 8003300:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003304:	2300      	movs	r3, #0
 8003306:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800330a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 800330e:	2001      	movs	r0, #1
 8003310:	e000      	b.n	8003314 <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 8003312:	2000      	movs	r0, #0
}
 8003314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003316 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003316:	b570      	push	{r4, r5, r6, lr}
 8003318:	4605      	mov	r5, r0
 800331a:	460c      	mov	r4, r1
 800331c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800331e:	682b      	ldr	r3, [r5, #0]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	f013 0f20 	tst.w	r3, #32
 8003326:	d11a      	bne.n	800335e <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003328:	4632      	mov	r2, r6
 800332a:	4621      	mov	r1, r4
 800332c:	4628      	mov	r0, r5
 800332e:	f7ff ff56 	bl	80031de <I2C_IsAcknowledgeFailed>
 8003332:	b9b0      	cbnz	r0, 8003362 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003334:	f7fd f9b2 	bl	800069c <HAL_GetTick>
 8003338:	1b80      	subs	r0, r0, r6
 800333a:	42a0      	cmp	r0, r4
 800333c:	d801      	bhi.n	8003342 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1ed      	bne.n	800331e <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003342:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003344:	f043 0320 	orr.w	r3, r3, #32
 8003348:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800334a:	2320      	movs	r3, #32
 800334c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003350:	2300      	movs	r3, #0
 8003352:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003356:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 800335a:	2001      	movs	r0, #1
}
 800335c:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800335e:	2000      	movs	r0, #0
 8003360:	e7fc      	b.n	800335c <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8003362:	2001      	movs	r0, #1
 8003364:	e7fa      	b.n	800335c <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
	...

08003368 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003368:	2800      	cmp	r0, #0
 800336a:	d057      	beq.n	800341c <HAL_I2C_Init+0xb4>
{
 800336c:	b510      	push	{r4, lr}
 800336e:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003370:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003374:	2b00      	cmp	r3, #0
 8003376:	d041      	beq.n	80033fc <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003378:	2324      	movs	r3, #36	; 0x24
 800337a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800337e:	6822      	ldr	r2, [r4, #0]
 8003380:	6813      	ldr	r3, [r2, #0]
 8003382:	f023 0301 	bic.w	r3, r3, #1
 8003386:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003388:	6863      	ldr	r3, [r4, #4]
 800338a:	6822      	ldr	r2, [r4, #0]
 800338c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003390:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003392:	6822      	ldr	r2, [r4, #0]
 8003394:	6893      	ldr	r3, [r2, #8]
 8003396:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800339a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800339c:	68e3      	ldr	r3, [r4, #12]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d031      	beq.n	8003406 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033a2:	68a3      	ldr	r3, [r4, #8]
 80033a4:	6822      	ldr	r2, [r4, #0]
 80033a6:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80033aa:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033ac:	68e3      	ldr	r3, [r4, #12]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d02f      	beq.n	8003412 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033b2:	6822      	ldr	r2, [r4, #0]
 80033b4:	6851      	ldr	r1, [r2, #4]
 80033b6:	4b1a      	ldr	r3, [pc, #104]	; (8003420 <HAL_I2C_Init+0xb8>)
 80033b8:	430b      	orrs	r3, r1
 80033ba:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033bc:	6822      	ldr	r2, [r4, #0]
 80033be:	68d3      	ldr	r3, [r2, #12]
 80033c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80033c4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80033c6:	6923      	ldr	r3, [r4, #16]
 80033c8:	6962      	ldr	r2, [r4, #20]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	69a1      	ldr	r1, [r4, #24]
 80033ce:	6822      	ldr	r2, [r4, #0]
 80033d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80033d4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033d6:	69e3      	ldr	r3, [r4, #28]
 80033d8:	6a21      	ldr	r1, [r4, #32]
 80033da:	6822      	ldr	r2, [r4, #0]
 80033dc:	430b      	orrs	r3, r1
 80033de:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80033e0:	6822      	ldr	r2, [r4, #0]
 80033e2:	6813      	ldr	r3, [r2, #0]
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ea:	2000      	movs	r0, #0
 80033ec:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033ee:	2320      	movs	r3, #32
 80033f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033f4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80033fa:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80033fc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003400:	f008 fc74 	bl	800bcec <HAL_I2C_MspInit>
 8003404:	e7b8      	b.n	8003378 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003406:	68a3      	ldr	r3, [r4, #8]
 8003408:	6822      	ldr	r2, [r4, #0]
 800340a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800340e:	6093      	str	r3, [r2, #8]
 8003410:	e7cc      	b.n	80033ac <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	e7ca      	b.n	80033b2 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800341c:	2001      	movs	r0, #1
}
 800341e:	4770      	bx	lr
 8003420:	02008000 	.word	0x02008000

08003424 <HAL_I2C_Master_Transmit>:
{
 8003424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003428:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800342a:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 800342e:	b2ed      	uxtb	r5, r5
 8003430:	2d20      	cmp	r5, #32
 8003432:	f040 80a4 	bne.w	800357e <HAL_I2C_Master_Transmit+0x15a>
    __HAL_LOCK(hi2c);
 8003436:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800343a:	2c01      	cmp	r4, #1
 800343c:	f000 80a4 	beq.w	8003588 <HAL_I2C_Master_Transmit+0x164>
 8003440:	4698      	mov	r8, r3
 8003442:	4617      	mov	r7, r2
 8003444:	460e      	mov	r6, r1
 8003446:	4604      	mov	r4, r0
 8003448:	f04f 0901 	mov.w	r9, #1
 800344c:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003450:	f7fd f924 	bl	800069c <HAL_GetTick>
 8003454:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003456:	9000      	str	r0, [sp, #0]
 8003458:	2319      	movs	r3, #25
 800345a:	464a      	mov	r2, r9
 800345c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003460:	4620      	mov	r0, r4
 8003462:	f7ff ff2f 	bl	80032c4 <I2C_WaitOnFlagUntilTimeout>
 8003466:	2800      	cmp	r0, #0
 8003468:	f040 8090 	bne.w	800358c <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800346c:	2321      	movs	r3, #33	; 0x21
 800346e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003472:	2310      	movs	r3, #16
 8003474:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003478:	2300      	movs	r3, #0
 800347a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800347c:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800347e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003482:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003484:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003486:	b29b      	uxth	r3, r3
 8003488:	2bff      	cmp	r3, #255	; 0xff
 800348a:	d90a      	bls.n	80034a2 <HAL_I2C_Master_Transmit+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800348c:	22ff      	movs	r2, #255	; 0xff
 800348e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003490:	4b42      	ldr	r3, [pc, #264]	; (800359c <HAL_I2C_Master_Transmit+0x178>)
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003498:	4631      	mov	r1, r6
 800349a:	4620      	mov	r0, r4
 800349c:	f7ff fe84 	bl	80031a8 <I2C_TransferConfig>
 80034a0:	e018      	b.n	80034d4 <HAL_I2C_Master_Transmit+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 80034a2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80034a4:	b292      	uxth	r2, r2
 80034a6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80034a8:	4b3c      	ldr	r3, [pc, #240]	; (800359c <HAL_I2C_Master_Transmit+0x178>)
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	4631      	mov	r1, r6
 80034b4:	4620      	mov	r0, r4
 80034b6:	f7ff fe77 	bl	80031a8 <I2C_TransferConfig>
 80034ba:	e00b      	b.n	80034d4 <HAL_I2C_Master_Transmit+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 80034bc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80034be:	b292      	uxth	r2, r2
 80034c0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034c2:	2300      	movs	r3, #0
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	4631      	mov	r1, r6
 80034ce:	4620      	mov	r0, r4
 80034d0:	f7ff fe6a 	bl	80031a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80034d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d033      	beq.n	8003544 <HAL_I2C_Master_Transmit+0x120>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034dc:	462a      	mov	r2, r5
 80034de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80034e0:	4620      	mov	r0, r4
 80034e2:	f7ff fec4 	bl	800326e <I2C_WaitOnTXISFlagUntilTimeout>
 80034e6:	2800      	cmp	r0, #0
 80034e8:	d152      	bne.n	8003590 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80034ec:	6823      	ldr	r3, [r4, #0]
 80034ee:	7812      	ldrb	r2, [r2, #0]
 80034f0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80034f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034f4:	3301      	adds	r3, #1
 80034f6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80034f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003500:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003502:	3b01      	subs	r3, #1
 8003504:	b29b      	uxth	r3, r3
 8003506:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003508:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800350a:	b292      	uxth	r2, r2
 800350c:	2a00      	cmp	r2, #0
 800350e:	d0e1      	beq.n	80034d4 <HAL_I2C_Master_Transmit+0xb0>
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1df      	bne.n	80034d4 <HAL_I2C_Master_Transmit+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003514:	9500      	str	r5, [sp, #0]
 8003516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003518:	2200      	movs	r2, #0
 800351a:	2180      	movs	r1, #128	; 0x80
 800351c:	4620      	mov	r0, r4
 800351e:	f7ff fed1 	bl	80032c4 <I2C_WaitOnFlagUntilTimeout>
 8003522:	2800      	cmp	r0, #0
 8003524:	d136      	bne.n	8003594 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003526:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	2bff      	cmp	r3, #255	; 0xff
 800352c:	d9c6      	bls.n	80034bc <HAL_I2C_Master_Transmit+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800352e:	22ff      	movs	r2, #255	; 0xff
 8003530:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003532:	2300      	movs	r3, #0
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800353a:	4631      	mov	r1, r6
 800353c:	4620      	mov	r0, r4
 800353e:	f7ff fe33 	bl	80031a8 <I2C_TransferConfig>
 8003542:	e7c7      	b.n	80034d4 <HAL_I2C_Master_Transmit+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003544:	462a      	mov	r2, r5
 8003546:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003548:	4620      	mov	r0, r4
 800354a:	f7ff fee4 	bl	8003316 <I2C_WaitOnSTOPFlagUntilTimeout>
 800354e:	4603      	mov	r3, r0
 8003550:	bb10      	cbnz	r0, 8003598 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003552:	6822      	ldr	r2, [r4, #0]
 8003554:	2120      	movs	r1, #32
 8003556:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8003558:	6820      	ldr	r0, [r4, #0]
 800355a:	6842      	ldr	r2, [r0, #4]
 800355c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003560:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003564:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003568:	f022 0201 	bic.w	r2, r2, #1
 800356c:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800356e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003572:	2200      	movs	r2, #0
 8003574:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003578:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 800357c:	e000      	b.n	8003580 <HAL_I2C_Master_Transmit+0x15c>
    return HAL_BUSY;
 800357e:	2302      	movs	r3, #2
}
 8003580:	4618      	mov	r0, r3
 8003582:	b003      	add	sp, #12
 8003584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8003588:	2302      	movs	r3, #2
 800358a:	e7f9      	b.n	8003580 <HAL_I2C_Master_Transmit+0x15c>
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e7f7      	b.n	8003580 <HAL_I2C_Master_Transmit+0x15c>
        return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e7f5      	b.n	8003580 <HAL_I2C_Master_Transmit+0x15c>
          return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e7f3      	b.n	8003580 <HAL_I2C_Master_Transmit+0x15c>
      return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e7f1      	b.n	8003580 <HAL_I2C_Master_Transmit+0x15c>
 800359c:	80002000 	.word	0x80002000

080035a0 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035a0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b20      	cmp	r3, #32
 80035a8:	d124      	bne.n	80035f4 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035aa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d022      	beq.n	80035f8 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80035b2:	2301      	movs	r3, #1
 80035b4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035b8:	2324      	movs	r3, #36	; 0x24
 80035ba:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035be:	6802      	ldr	r2, [r0, #0]
 80035c0:	6813      	ldr	r3, [r2, #0]
 80035c2:	f023 0301 	bic.w	r3, r3, #1
 80035c6:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035c8:	6802      	ldr	r2, [r0, #0]
 80035ca:	6813      	ldr	r3, [r2, #0]
 80035cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035d0:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035d2:	6802      	ldr	r2, [r0, #0]
 80035d4:	6813      	ldr	r3, [r2, #0]
 80035d6:	4319      	orrs	r1, r3
 80035d8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035da:	6802      	ldr	r2, [r0, #0]
 80035dc:	6813      	ldr	r3, [r2, #0]
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e4:	2320      	movs	r3, #32
 80035e6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ea:	2300      	movs	r3, #0
 80035ec:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80035f0:	4618      	mov	r0, r3
 80035f2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80035f4:	2002      	movs	r0, #2
 80035f6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80035f8:	2002      	movs	r0, #2
  }
}
 80035fa:	4770      	bx	lr

080035fc <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035fc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b20      	cmp	r3, #32
 8003604:	d122      	bne.n	800364c <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003606:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800360a:	2b01      	cmp	r3, #1
 800360c:	d020      	beq.n	8003650 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 800360e:	2301      	movs	r3, #1
 8003610:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003614:	2324      	movs	r3, #36	; 0x24
 8003616:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800361a:	6802      	ldr	r2, [r0, #0]
 800361c:	6813      	ldr	r3, [r2, #0]
 800361e:	f023 0301 	bic.w	r3, r3, #1
 8003622:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003624:	6802      	ldr	r2, [r0, #0]
 8003626:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003628:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800362c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003630:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003632:	6802      	ldr	r2, [r0, #0]
 8003634:	6813      	ldr	r3, [r2, #0]
 8003636:	f043 0301 	orr.w	r3, r3, #1
 800363a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800363c:	2320      	movs	r3, #32
 800363e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003642:	2300      	movs	r3, #0
 8003644:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003648:	4618      	mov	r0, r3
 800364a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800364c:	2002      	movs	r0, #2
 800364e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8003650:	2002      	movs	r0, #2
  }
}
 8003652:	4770      	bx	lr

08003654 <MDMA_Init>:
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8003654:	68c3      	ldr	r3, [r0, #12]
 8003656:	6901      	ldr	r1, [r0, #16]
 8003658:	6802      	ldr	r2, [r0, #0]
 800365a:	430b      	orrs	r3, r1
 800365c:	60d3      	str	r3, [r2, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800365e:	6943      	ldr	r3, [r0, #20]
 8003660:	6982      	ldr	r2, [r0, #24]
 8003662:	4313      	orrs	r3, r2
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8003664:	69c2      	ldr	r2, [r0, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003666:	4313      	orrs	r3, r2
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8003668:	6a02      	ldr	r2, [r0, #32]
 800366a:	4313      	orrs	r3, r2
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800366c:	6a42      	ldr	r2, [r0, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800366e:	4313      	orrs	r3, r2
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8003670:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8003672:	4313      	orrs	r3, r2
                           hmdma->Init.DestBurst                                   | \
 8003674:	6b02      	ldr	r2, [r0, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8003676:	4313      	orrs	r3, r2
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8003678:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800367a:	3a01      	subs	r2, #1
                           hmdma->Init.DestBurst                                   | \
 800367c:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
                           hmdma->Init.TransferTriggerMode;
 8003680:	6881      	ldr	r1, [r0, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003682:	6802      	ldr	r2, [r0, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8003684:	430b      	orrs	r3, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003686:	6113      	str	r3, [r2, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8003688:	6843      	ldr	r3, [r0, #4]
 800368a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368e:	d01b      	beq.n	80036c8 <MDMA_Init+0x74>
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8003690:	6803      	ldr	r3, [r0, #0]
 8003692:	2200      	movs	r2, #0
 8003694:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8003696:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003698:	4293      	cmp	r3, r2
 800369a:	db1b      	blt.n	80036d4 <MDMA_Init+0x80>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800369c:	6802      	ldr	r2, [r0, #0]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	6213      	str	r3, [r2, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80036a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	db20      	blt.n	80036ea <MDMA_Init+0x96>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80036a8:	6801      	ldr	r1, [r0, #0]
 80036aa:	6a0a      	ldr	r2, [r1, #32]
 80036ac:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80036b0:	620b      	str	r3, [r1, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80036b2:	6843      	ldr	r3, [r0, #4]
 80036b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b8:	d024      	beq.n	8003704 <MDMA_Init+0xb0>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80036ba:	6802      	ldr	r2, [r0, #0]
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	6293      	str	r3, [r2, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80036c0:	6803      	ldr	r3, [r0, #0]
 80036c2:	2200      	movs	r2, #0
 80036c4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80036c6:	4770      	bx	lr
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80036c8:	6802      	ldr	r2, [r0, #0]
 80036ca:	6913      	ldr	r3, [r2, #16]
 80036cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80036d0:	6113      	str	r3, [r2, #16]
 80036d2:	e7dd      	b.n	8003690 <MDMA_Init+0x3c>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80036d4:	6802      	ldr	r2, [r0, #0]
 80036d6:	6953      	ldr	r3, [r2, #20]
 80036d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036dc:	6153      	str	r3, [r2, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80036de:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80036e0:	425b      	negs	r3, r3
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 80036e2:	6802      	ldr	r2, [r0, #0]
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	6213      	str	r3, [r2, #32]
 80036e8:	e7db      	b.n	80036a2 <MDMA_Init+0x4e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80036ea:	6802      	ldr	r2, [r0, #0]
 80036ec:	6953      	ldr	r3, [r2, #20]
 80036ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036f2:	6153      	str	r3, [r2, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80036f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80036f6:	425a      	negs	r2, r3
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80036f8:	6801      	ldr	r1, [r0, #0]
 80036fa:	6a0b      	ldr	r3, [r1, #32]
 80036fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003700:	620b      	str	r3, [r1, #32]
 8003702:	e7d6      	b.n	80036b2 <MDMA_Init+0x5e>
    hmdma->Instance->CTBR = 0;
 8003704:	6803      	ldr	r3, [r0, #0]
 8003706:	2200      	movs	r2, #0
 8003708:	629a      	str	r2, [r3, #40]	; 0x28
 800370a:	e7d9      	b.n	80036c0 <MDMA_Init+0x6c>

0800370c <HAL_MDMA_Init>:
{
 800370c:	b538      	push	{r3, r4, r5, lr}
 800370e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003710:	f7fc ffc4 	bl	800069c <HAL_GetTick>
  if(hmdma == NULL)
 8003714:	b344      	cbz	r4, 8003768 <HAL_MDMA_Init+0x5c>
 8003716:	4605      	mov	r5, r0
  __HAL_UNLOCK(hmdma);
 8003718:	2300      	movs	r3, #0
 800371a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800371e:	2302      	movs	r3, #2
 8003720:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 8003724:	6822      	ldr	r2, [r4, #0]
 8003726:	68d3      	ldr	r3, [r2, #12]
 8003728:	f023 0301 	bic.w	r3, r3, #1
 800372c:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f013 0f01 	tst.w	r3, #1
 8003736:	d00b      	beq.n	8003750 <HAL_MDMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8003738:	f7fc ffb0 	bl	800069c <HAL_GetTick>
 800373c:	1b40      	subs	r0, r0, r5
 800373e:	2805      	cmp	r0, #5
 8003740:	d9f5      	bls.n	800372e <HAL_MDMA_Init+0x22>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8003742:	2340      	movs	r3, #64	; 0x40
 8003744:	66a3      	str	r3, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8003746:	2303      	movs	r3, #3
 8003748:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      return HAL_ERROR;
 800374c:	2001      	movs	r0, #1
 800374e:	e00a      	b.n	8003766 <HAL_MDMA_Init+0x5a>
  MDMA_Init(hmdma);
 8003750:	4620      	mov	r0, r4
 8003752:	f7ff ff7f 	bl	8003654 <MDMA_Init>
  hmdma->FirstLinkedListNodeAddress  = 0;
 8003756:	2000      	movs	r0, #0
 8003758:	65e0      	str	r0, [r4, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800375a:	6620      	str	r0, [r4, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800375c:	6660      	str	r0, [r4, #100]	; 0x64
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800375e:	66a0      	str	r0, [r4, #104]	; 0x68
  hmdma->State = HAL_MDMA_STATE_READY;
 8003760:	2301      	movs	r3, #1
 8003762:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003766:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003768:	2001      	movs	r0, #1
 800376a:	e7fc      	b.n	8003766 <HAL_MDMA_Init+0x5a>

0800376c <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800376c:	4b13      	ldr	r3, [pc, #76]	; (80037bc <HAL_PWREx_ConfigSupply+0x50>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f013 0f04 	tst.w	r3, #4
 8003774:	d107      	bne.n	8003786 <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003776:	4b11      	ldr	r3, [pc, #68]	; (80037bc <HAL_PWREx_ConfigSupply+0x50>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	4283      	cmp	r3, r0
 8003780:	d01a      	beq.n	80037b8 <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003782:	2001      	movs	r0, #1
 8003784:	4770      	bx	lr
{
 8003786:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003788:	4a0c      	ldr	r2, [pc, #48]	; (80037bc <HAL_PWREx_ConfigSupply+0x50>)
 800378a:	68d3      	ldr	r3, [r2, #12]
 800378c:	f023 0307 	bic.w	r3, r3, #7
 8003790:	4318      	orrs	r0, r3
 8003792:	60d0      	str	r0, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003794:	f7fc ff82 	bl	800069c <HAL_GetTick>
 8003798:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800379a:	4b08      	ldr	r3, [pc, #32]	; (80037bc <HAL_PWREx_ConfigSupply+0x50>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80037a2:	d107      	bne.n	80037b4 <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80037a4:	f7fc ff7a 	bl	800069c <HAL_GetTick>
 80037a8:	1b00      	subs	r0, r0, r4
 80037aa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80037ae:	d9f4      	bls.n	800379a <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 80037b0:	2001      	movs	r0, #1
 80037b2:	e000      	b.n	80037b6 <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80037b4:	2000      	movs	r0, #0
}
 80037b6:	bd10      	pop	{r4, pc}
      return HAL_OK;
 80037b8:	2000      	movs	r0, #0
}
 80037ba:	4770      	bx	lr
 80037bc:	58024800 	.word	0x58024800

080037c0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037c0:	2800      	cmp	r0, #0
 80037c2:	f000 82e6 	beq.w	8003d92 <HAL_RCC_OscConfig+0x5d2>
{
 80037c6:	b538      	push	{r3, r4, r5, lr}
 80037c8:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ca:	6803      	ldr	r3, [r0, #0]
 80037cc:	f013 0f01 	tst.w	r3, #1
 80037d0:	d025      	beq.n	800381e <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037d2:	4aaa      	ldr	r2, [pc, #680]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 80037d4:	6913      	ldr	r3, [r2, #16]
 80037d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037da:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80037dc:	2b10      	cmp	r3, #16
 80037de:	d015      	beq.n	800380c <HAL_RCC_OscConfig+0x4c>
 80037e0:	2b18      	cmp	r3, #24
 80037e2:	d00f      	beq.n	8003804 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037e4:	6863      	ldr	r3, [r4, #4]
 80037e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ea:	d03e      	beq.n	800386a <HAL_RCC_OscConfig+0xaa>
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d152      	bne.n	8003896 <HAL_RCC_OscConfig+0xd6>
 80037f0:	4ba2      	ldr	r3, [pc, #648]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	e037      	b.n	8003874 <HAL_RCC_OscConfig+0xb4>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003804:	f002 0203 	and.w	r2, r2, #3
 8003808:	2a02      	cmp	r2, #2
 800380a:	d1eb      	bne.n	80037e4 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800380c:	4b9b      	ldr	r3, [pc, #620]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003814:	d003      	beq.n	800381e <HAL_RCC_OscConfig+0x5e>
 8003816:	6863      	ldr	r3, [r4, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 82bc 	beq.w	8003d96 <HAL_RCC_OscConfig+0x5d6>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	f013 0f02 	tst.w	r3, #2
 8003824:	d077      	beq.n	8003916 <HAL_RCC_OscConfig+0x156>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003826:	4a95      	ldr	r2, [pc, #596]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 8003828:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800382a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800382c:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8003830:	d05a      	beq.n	80038e8 <HAL_RCC_OscConfig+0x128>
 8003832:	2b18      	cmp	r3, #24
 8003834:	d055      	beq.n	80038e2 <HAL_RCC_OscConfig+0x122>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003836:	68e3      	ldr	r3, [r4, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 80b2 	beq.w	80039a2 <HAL_RCC_OscConfig+0x1e2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800383e:	498f      	ldr	r1, [pc, #572]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 8003840:	680a      	ldr	r2, [r1, #0]
 8003842:	f022 0219 	bic.w	r2, r2, #25
 8003846:	4313      	orrs	r3, r2
 8003848:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384a:	f7fc ff27 	bl	800069c <HAL_GetTick>
 800384e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003850:	4b8a      	ldr	r3, [pc, #552]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f013 0f04 	tst.w	r3, #4
 8003858:	f040 808b 	bne.w	8003972 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800385c:	f7fc ff1e 	bl	800069c <HAL_GetTick>
 8003860:	1b40      	subs	r0, r0, r5
 8003862:	2802      	cmp	r0, #2
 8003864:	d9f4      	bls.n	8003850 <HAL_RCC_OscConfig+0x90>
          {
            return HAL_TIMEOUT;
 8003866:	2003      	movs	r0, #3
 8003868:	e29a      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800386a:	4a84      	ldr	r2, [pc, #528]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 800386c:	6813      	ldr	r3, [r2, #0]
 800386e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003872:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003874:	6863      	ldr	r3, [r4, #4]
 8003876:	b32b      	cbz	r3, 80038c4 <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 8003878:	f7fc ff10 	bl	800069c <HAL_GetTick>
 800387c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800387e:	4b7f      	ldr	r3, [pc, #508]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003886:	d1ca      	bne.n	800381e <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003888:	f7fc ff08 	bl	800069c <HAL_GetTick>
 800388c:	1b40      	subs	r0, r0, r5
 800388e:	2864      	cmp	r0, #100	; 0x64
 8003890:	d9f5      	bls.n	800387e <HAL_RCC_OscConfig+0xbe>
            return HAL_TIMEOUT;
 8003892:	2003      	movs	r0, #3
 8003894:	e284      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003896:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800389a:	d009      	beq.n	80038b0 <HAL_RCC_OscConfig+0xf0>
 800389c:	4b77      	ldr	r3, [pc, #476]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	e7e1      	b.n	8003874 <HAL_RCC_OscConfig+0xb4>
 80038b0:	4b72      	ldr	r3, [pc, #456]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	e7d7      	b.n	8003874 <HAL_RCC_OscConfig+0xb4>
        tickstart = HAL_GetTick();
 80038c4:	f7fc feea 	bl	800069c <HAL_GetTick>
 80038c8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038ca:	4b6c      	ldr	r3, [pc, #432]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80038d2:	d0a4      	beq.n	800381e <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d4:	f7fc fee2 	bl	800069c <HAL_GetTick>
 80038d8:	1b40      	subs	r0, r0, r5
 80038da:	2864      	cmp	r0, #100	; 0x64
 80038dc:	d9f5      	bls.n	80038ca <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 80038de:	2003      	movs	r0, #3
 80038e0:	e25e      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80038e2:	f012 0f03 	tst.w	r2, #3
 80038e6:	d1a6      	bne.n	8003836 <HAL_RCC_OscConfig+0x76>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038e8:	4b64      	ldr	r3, [pc, #400]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f013 0f04 	tst.w	r3, #4
 80038f0:	d003      	beq.n	80038fa <HAL_RCC_OscConfig+0x13a>
 80038f2:	68e3      	ldr	r3, [r4, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 8250 	beq.w	8003d9a <HAL_RCC_OscConfig+0x5da>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fa:	f7fc fee9 	bl	80006d0 <HAL_GetREVID>
 80038fe:	f241 0303 	movw	r3, #4099	; 0x1003
 8003902:	4298      	cmp	r0, r3
 8003904:	d82c      	bhi.n	8003960 <HAL_RCC_OscConfig+0x1a0>
 8003906:	4a5d      	ldr	r2, [pc, #372]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 8003908:	6853      	ldr	r3, [r2, #4]
 800390a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800390e:	6921      	ldr	r1, [r4, #16]
 8003910:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8003914:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	f013 0f10 	tst.w	r3, #16
 800391c:	d071      	beq.n	8003a02 <HAL_RCC_OscConfig+0x242>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800391e:	4a57      	ldr	r2, [pc, #348]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 8003920:	6913      	ldr	r3, [r2, #16]
 8003922:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003926:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003928:	2b08      	cmp	r3, #8
 800392a:	d052      	beq.n	80039d2 <HAL_RCC_OscConfig+0x212>
 800392c:	2b18      	cmp	r3, #24
 800392e:	d04c      	beq.n	80039ca <HAL_RCC_OscConfig+0x20a>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003930:	69e3      	ldr	r3, [r4, #28]
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 80a4 	beq.w	8003a80 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003938:	4a50      	ldr	r2, [pc, #320]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 800393a:	6813      	ldr	r3, [r2, #0]
 800393c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003942:	f7fc feab 	bl	800069c <HAL_GetTick>
 8003946:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003948:	4b4c      	ldr	r3, [pc, #304]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003950:	d17b      	bne.n	8003a4a <HAL_RCC_OscConfig+0x28a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003952:	f7fc fea3 	bl	800069c <HAL_GetTick>
 8003956:	1b40      	subs	r0, r0, r5
 8003958:	2802      	cmp	r0, #2
 800395a:	d9f5      	bls.n	8003948 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800395c:	2003      	movs	r0, #3
 800395e:	e21f      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003960:	4a46      	ldr	r2, [pc, #280]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 8003962:	6853      	ldr	r3, [r2, #4]
 8003964:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003968:	6921      	ldr	r1, [r4, #16]
 800396a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800396e:	6053      	str	r3, [r2, #4]
 8003970:	e7d1      	b.n	8003916 <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003972:	f7fc fead 	bl	80006d0 <HAL_GetREVID>
 8003976:	f241 0303 	movw	r3, #4099	; 0x1003
 800397a:	4298      	cmp	r0, r3
 800397c:	d808      	bhi.n	8003990 <HAL_RCC_OscConfig+0x1d0>
 800397e:	4a3f      	ldr	r2, [pc, #252]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 8003980:	6853      	ldr	r3, [r2, #4]
 8003982:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003986:	6921      	ldr	r1, [r4, #16]
 8003988:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800398c:	6053      	str	r3, [r2, #4]
 800398e:	e7c2      	b.n	8003916 <HAL_RCC_OscConfig+0x156>
 8003990:	4a3a      	ldr	r2, [pc, #232]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 8003992:	6853      	ldr	r3, [r2, #4]
 8003994:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003998:	6921      	ldr	r1, [r4, #16]
 800399a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800399e:	6053      	str	r3, [r2, #4]
 80039a0:	e7b9      	b.n	8003916 <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_HSI_DISABLE();
 80039a2:	4a36      	ldr	r2, [pc, #216]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 80039a4:	6813      	ldr	r3, [r2, #0]
 80039a6:	f023 0301 	bic.w	r3, r3, #1
 80039aa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80039ac:	f7fc fe76 	bl	800069c <HAL_GetTick>
 80039b0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80039b2:	4b32      	ldr	r3, [pc, #200]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f013 0f04 	tst.w	r3, #4
 80039ba:	d0ac      	beq.n	8003916 <HAL_RCC_OscConfig+0x156>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039bc:	f7fc fe6e 	bl	800069c <HAL_GetTick>
 80039c0:	1b40      	subs	r0, r0, r5
 80039c2:	2802      	cmp	r0, #2
 80039c4:	d9f5      	bls.n	80039b2 <HAL_RCC_OscConfig+0x1f2>
            return HAL_TIMEOUT;
 80039c6:	2003      	movs	r0, #3
 80039c8:	e1ea      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80039ca:	f002 0203 	and.w	r2, r2, #3
 80039ce:	2a01      	cmp	r2, #1
 80039d0:	d1ae      	bne.n	8003930 <HAL_RCC_OscConfig+0x170>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039d2:	4b2a      	ldr	r3, [pc, #168]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80039da:	d004      	beq.n	80039e6 <HAL_RCC_OscConfig+0x226>
 80039dc:	69e3      	ldr	r3, [r4, #28]
 80039de:	2b80      	cmp	r3, #128	; 0x80
 80039e0:	d001      	beq.n	80039e6 <HAL_RCC_OscConfig+0x226>
        return HAL_ERROR;
 80039e2:	2001      	movs	r0, #1
 80039e4:	e1dc      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039e6:	f7fc fe73 	bl	80006d0 <HAL_GetREVID>
 80039ea:	f241 0303 	movw	r3, #4099	; 0x1003
 80039ee:	4298      	cmp	r0, r3
 80039f0:	d822      	bhi.n	8003a38 <HAL_RCC_OscConfig+0x278>
 80039f2:	4a22      	ldr	r2, [pc, #136]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 80039f4:	6853      	ldr	r3, [r2, #4]
 80039f6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80039fa:	6a21      	ldr	r1, [r4, #32]
 80039fc:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8003a00:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	f013 0f08 	tst.w	r3, #8
 8003a08:	d062      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a0a:	6963      	ldr	r3, [r4, #20]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d04b      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x2e8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a10:	4a1a      	ldr	r2, [pc, #104]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 8003a12:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8003a14:	f043 0301 	orr.w	r3, r3, #1
 8003a18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a1a:	f7fc fe3f 	bl	800069c <HAL_GetTick>
 8003a1e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a20:	4b16      	ldr	r3, [pc, #88]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 8003a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a24:	f013 0f02 	tst.w	r3, #2
 8003a28:	d152      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a2a:	f7fc fe37 	bl	800069c <HAL_GetTick>
 8003a2e:	1b40      	subs	r0, r0, r5
 8003a30:	2802      	cmp	r0, #2
 8003a32:	d9f5      	bls.n	8003a20 <HAL_RCC_OscConfig+0x260>
        {
          return HAL_TIMEOUT;
 8003a34:	2003      	movs	r0, #3
 8003a36:	e1b3      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a38:	4a10      	ldr	r2, [pc, #64]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 8003a3a:	68d3      	ldr	r3, [r2, #12]
 8003a3c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003a40:	6a21      	ldr	r1, [r4, #32]
 8003a42:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003a46:	60d3      	str	r3, [r2, #12]
 8003a48:	e7db      	b.n	8003a02 <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a4a:	f7fc fe41 	bl	80006d0 <HAL_GetREVID>
 8003a4e:	f241 0303 	movw	r3, #4099	; 0x1003
 8003a52:	4298      	cmp	r0, r3
 8003a54:	d808      	bhi.n	8003a68 <HAL_RCC_OscConfig+0x2a8>
 8003a56:	4a09      	ldr	r2, [pc, #36]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 8003a58:	6853      	ldr	r3, [r2, #4]
 8003a5a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003a5e:	6a21      	ldr	r1, [r4, #32]
 8003a60:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8003a64:	6053      	str	r3, [r2, #4]
 8003a66:	e7cc      	b.n	8003a02 <HAL_RCC_OscConfig+0x242>
 8003a68:	4a04      	ldr	r2, [pc, #16]	; (8003a7c <HAL_RCC_OscConfig+0x2bc>)
 8003a6a:	68d3      	ldr	r3, [r2, #12]
 8003a6c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003a70:	6a21      	ldr	r1, [r4, #32]
 8003a72:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003a76:	60d3      	str	r3, [r2, #12]
 8003a78:	e7c3      	b.n	8003a02 <HAL_RCC_OscConfig+0x242>
 8003a7a:	bf00      	nop
 8003a7c:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_DISABLE();
 8003a80:	4aad      	ldr	r2, [pc, #692]	; (8003d38 <HAL_RCC_OscConfig+0x578>)
 8003a82:	6813      	ldr	r3, [r2, #0]
 8003a84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a88:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003a8a:	f7fc fe07 	bl	800069c <HAL_GetTick>
 8003a8e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a90:	4ba9      	ldr	r3, [pc, #676]	; (8003d38 <HAL_RCC_OscConfig+0x578>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003a98:	d0b3      	beq.n	8003a02 <HAL_RCC_OscConfig+0x242>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003a9a:	f7fc fdff 	bl	800069c <HAL_GetTick>
 8003a9e:	1b40      	subs	r0, r0, r5
 8003aa0:	2802      	cmp	r0, #2
 8003aa2:	d9f5      	bls.n	8003a90 <HAL_RCC_OscConfig+0x2d0>
            return HAL_TIMEOUT;
 8003aa4:	2003      	movs	r0, #3
 8003aa6:	e17b      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aa8:	4aa3      	ldr	r2, [pc, #652]	; (8003d38 <HAL_RCC_OscConfig+0x578>)
 8003aaa:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8003aac:	f023 0301 	bic.w	r3, r3, #1
 8003ab0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab2:	f7fc fdf3 	bl	800069c <HAL_GetTick>
 8003ab6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ab8:	4b9f      	ldr	r3, [pc, #636]	; (8003d38 <HAL_RCC_OscConfig+0x578>)
 8003aba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003abc:	f013 0f02 	tst.w	r3, #2
 8003ac0:	d006      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ac2:	f7fc fdeb 	bl	800069c <HAL_GetTick>
 8003ac6:	1b40      	subs	r0, r0, r5
 8003ac8:	2802      	cmp	r0, #2
 8003aca:	d9f5      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003acc:	2003      	movs	r0, #3
 8003ace:	e167      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ad0:	6823      	ldr	r3, [r4, #0]
 8003ad2:	f013 0f20 	tst.w	r3, #32
 8003ad6:	d029      	beq.n	8003b2c <HAL_RCC_OscConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003ad8:	69a3      	ldr	r3, [r4, #24]
 8003ada:	b19b      	cbz	r3, 8003b04 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003adc:	4a96      	ldr	r2, [pc, #600]	; (8003d38 <HAL_RCC_OscConfig+0x578>)
 8003ade:	6813      	ldr	r3, [r2, #0]
 8003ae0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ae4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ae6:	f7fc fdd9 	bl	800069c <HAL_GetTick>
 8003aea:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003aec:	4b92      	ldr	r3, [pc, #584]	; (8003d38 <HAL_RCC_OscConfig+0x578>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003af4:	d11a      	bne.n	8003b2c <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003af6:	f7fc fdd1 	bl	800069c <HAL_GetTick>
 8003afa:	1b40      	subs	r0, r0, r5
 8003afc:	2802      	cmp	r0, #2
 8003afe:	d9f5      	bls.n	8003aec <HAL_RCC_OscConfig+0x32c>
        {
          return HAL_TIMEOUT;
 8003b00:	2003      	movs	r0, #3
 8003b02:	e14d      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b04:	4a8c      	ldr	r2, [pc, #560]	; (8003d38 <HAL_RCC_OscConfig+0x578>)
 8003b06:	6813      	ldr	r3, [r2, #0]
 8003b08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b0e:	f7fc fdc5 	bl	800069c <HAL_GetTick>
 8003b12:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b14:	4b88      	ldr	r3, [pc, #544]	; (8003d38 <HAL_RCC_OscConfig+0x578>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003b1c:	d006      	beq.n	8003b2c <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b1e:	f7fc fdbd 	bl	800069c <HAL_GetTick>
 8003b22:	1b40      	subs	r0, r0, r5
 8003b24:	2802      	cmp	r0, #2
 8003b26:	d9f5      	bls.n	8003b14 <HAL_RCC_OscConfig+0x354>
        {
          return HAL_TIMEOUT;
 8003b28:	2003      	movs	r0, #3
 8003b2a:	e139      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b2c:	6823      	ldr	r3, [r4, #0]
 8003b2e:	f013 0f04 	tst.w	r3, #4
 8003b32:	d121      	bne.n	8003b78 <HAL_RCC_OscConfig+0x3b8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 8131 	beq.w	8003d9e <HAL_RCC_OscConfig+0x5de>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003b3c:	4a7e      	ldr	r2, [pc, #504]	; (8003d38 <HAL_RCC_OscConfig+0x578>)
 8003b3e:	6912      	ldr	r2, [r2, #16]
 8003b40:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8003b44:	2a18      	cmp	r2, #24
 8003b46:	f000 80ea 	beq.w	8003d1e <HAL_RCC_OscConfig+0x55e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d075      	beq.n	8003c3a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4e:	4a7a      	ldr	r2, [pc, #488]	; (8003d38 <HAL_RCC_OscConfig+0x578>)
 8003b50:	6813      	ldr	r3, [r2, #0]
 8003b52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fc fda0 	bl	800069c <HAL_GetTick>
 8003b5c:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b5e:	4b76      	ldr	r3, [pc, #472]	; (8003d38 <HAL_RCC_OscConfig+0x578>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003b66:	f000 80d8 	beq.w	8003d1a <HAL_RCC_OscConfig+0x55a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b6a:	f7fc fd97 	bl	800069c <HAL_GetTick>
 8003b6e:	1b00      	subs	r0, r0, r4
 8003b70:	2802      	cmp	r0, #2
 8003b72:	d9f4      	bls.n	8003b5e <HAL_RCC_OscConfig+0x39e>
          {
            return HAL_TIMEOUT;
 8003b74:	2003      	movs	r0, #3
 8003b76:	e113      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
    PWR->CR1 |= PWR_CR1_DBP;
 8003b78:	4a70      	ldr	r2, [pc, #448]	; (8003d3c <HAL_RCC_OscConfig+0x57c>)
 8003b7a:	6813      	ldr	r3, [r2, #0]
 8003b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b80:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003b82:	f7fc fd8b 	bl	800069c <HAL_GetTick>
 8003b86:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b88:	4b6c      	ldr	r3, [pc, #432]	; (8003d3c <HAL_RCC_OscConfig+0x57c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003b90:	d106      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x3e0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b92:	f7fc fd83 	bl	800069c <HAL_GetTick>
 8003b96:	1b40      	subs	r0, r0, r5
 8003b98:	2864      	cmp	r0, #100	; 0x64
 8003b9a:	d9f5      	bls.n	8003b88 <HAL_RCC_OscConfig+0x3c8>
        return HAL_TIMEOUT;
 8003b9c:	2003      	movs	r0, #3
 8003b9e:	e0ff      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ba0:	68a3      	ldr	r3, [r4, #8]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d00a      	beq.n	8003bbc <HAL_RCC_OscConfig+0x3fc>
 8003ba6:	bb0b      	cbnz	r3, 8003bec <HAL_RCC_OscConfig+0x42c>
 8003ba8:	4b63      	ldr	r3, [pc, #396]	; (8003d38 <HAL_RCC_OscConfig+0x578>)
 8003baa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bac:	f022 0201 	bic.w	r2, r2, #1
 8003bb0:	671a      	str	r2, [r3, #112]	; 0x70
 8003bb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bb4:	f022 0204 	bic.w	r2, r2, #4
 8003bb8:	671a      	str	r2, [r3, #112]	; 0x70
 8003bba:	e004      	b.n	8003bc6 <HAL_RCC_OscConfig+0x406>
 8003bbc:	4a5e      	ldr	r2, [pc, #376]	; (8003d38 <HAL_RCC_OscConfig+0x578>)
 8003bbe:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bc6:	68a3      	ldr	r3, [r4, #8]
 8003bc8:	b333      	cbz	r3, 8003c18 <HAL_RCC_OscConfig+0x458>
      tickstart = HAL_GetTick();
 8003bca:	f7fc fd67 	bl	800069c <HAL_GetTick>
 8003bce:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bd0:	4b59      	ldr	r3, [pc, #356]	; (8003d38 <HAL_RCC_OscConfig+0x578>)
 8003bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd4:	f013 0f02 	tst.w	r3, #2
 8003bd8:	d1ac      	bne.n	8003b34 <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bda:	f7fc fd5f 	bl	800069c <HAL_GetTick>
 8003bde:	1b40      	subs	r0, r0, r5
 8003be0:	f241 3388 	movw	r3, #5000	; 0x1388
 8003be4:	4298      	cmp	r0, r3
 8003be6:	d9f3      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x410>
          return HAL_TIMEOUT;
 8003be8:	2003      	movs	r0, #3
 8003bea:	e0d9      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bec:	2b05      	cmp	r3, #5
 8003bee:	d009      	beq.n	8003c04 <HAL_RCC_OscConfig+0x444>
 8003bf0:	4b51      	ldr	r3, [pc, #324]	; (8003d38 <HAL_RCC_OscConfig+0x578>)
 8003bf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bf4:	f022 0201 	bic.w	r2, r2, #1
 8003bf8:	671a      	str	r2, [r3, #112]	; 0x70
 8003bfa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bfc:	f022 0204 	bic.w	r2, r2, #4
 8003c00:	671a      	str	r2, [r3, #112]	; 0x70
 8003c02:	e7e0      	b.n	8003bc6 <HAL_RCC_OscConfig+0x406>
 8003c04:	4b4c      	ldr	r3, [pc, #304]	; (8003d38 <HAL_RCC_OscConfig+0x578>)
 8003c06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c08:	f042 0204 	orr.w	r2, r2, #4
 8003c0c:	671a      	str	r2, [r3, #112]	; 0x70
 8003c0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c10:	f042 0201 	orr.w	r2, r2, #1
 8003c14:	671a      	str	r2, [r3, #112]	; 0x70
 8003c16:	e7d6      	b.n	8003bc6 <HAL_RCC_OscConfig+0x406>
      tickstart = HAL_GetTick();
 8003c18:	f7fc fd40 	bl	800069c <HAL_GetTick>
 8003c1c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c1e:	4b46      	ldr	r3, [pc, #280]	; (8003d38 <HAL_RCC_OscConfig+0x578>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c22:	f013 0f02 	tst.w	r3, #2
 8003c26:	d085      	beq.n	8003b34 <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c28:	f7fc fd38 	bl	800069c <HAL_GetTick>
 8003c2c:	1b40      	subs	r0, r0, r5
 8003c2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c32:	4298      	cmp	r0, r3
 8003c34:	d9f3      	bls.n	8003c1e <HAL_RCC_OscConfig+0x45e>
          return HAL_TIMEOUT;
 8003c36:	2003      	movs	r0, #3
 8003c38:	e0b2      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_PLL_DISABLE();
 8003c3a:	4a3f      	ldr	r2, [pc, #252]	; (8003d38 <HAL_RCC_OscConfig+0x578>)
 8003c3c:	6813      	ldr	r3, [r2, #0]
 8003c3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c42:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003c44:	f7fc fd2a 	bl	800069c <HAL_GetTick>
 8003c48:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c4a:	4b3b      	ldr	r3, [pc, #236]	; (8003d38 <HAL_RCC_OscConfig+0x578>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003c52:	d006      	beq.n	8003c62 <HAL_RCC_OscConfig+0x4a2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c54:	f7fc fd22 	bl	800069c <HAL_GetTick>
 8003c58:	1b40      	subs	r0, r0, r5
 8003c5a:	2802      	cmp	r0, #2
 8003c5c:	d9f5      	bls.n	8003c4a <HAL_RCC_OscConfig+0x48a>
            return HAL_TIMEOUT;
 8003c5e:	2003      	movs	r0, #3
 8003c60:	e09e      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c62:	4b35      	ldr	r3, [pc, #212]	; (8003d38 <HAL_RCC_OscConfig+0x578>)
 8003c64:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003c66:	4a36      	ldr	r2, [pc, #216]	; (8003d40 <HAL_RCC_OscConfig+0x580>)
 8003c68:	400a      	ands	r2, r1
 8003c6a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003c6c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003c6e:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8003c72:	430a      	orrs	r2, r1
 8003c74:	629a      	str	r2, [r3, #40]	; 0x28
 8003c76:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003c78:	3a01      	subs	r2, #1
 8003c7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c80:	3901      	subs	r1, #1
 8003c82:	0249      	lsls	r1, r1, #9
 8003c84:	b289      	uxth	r1, r1
 8003c86:	430a      	orrs	r2, r1
 8003c88:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003c8a:	3901      	subs	r1, #1
 8003c8c:	0409      	lsls	r1, r1, #16
 8003c8e:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8003c92:	430a      	orrs	r2, r1
 8003c94:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003c96:	3901      	subs	r1, #1
 8003c98:	0609      	lsls	r1, r1, #24
 8003c9a:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8003ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca4:	f022 0201 	bic.w	r2, r2, #1
 8003ca8:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003caa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cac:	4a25      	ldr	r2, [pc, #148]	; (8003d44 <HAL_RCC_OscConfig+0x584>)
 8003cae:	400a      	ands	r2, r1
 8003cb0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003cb2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003cb6:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cba:	f022 020c 	bic.w	r2, r2, #12
 8003cbe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc6:	f022 0202 	bic.w	r2, r2, #2
 8003cca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003cd6:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cda:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003cde:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003ce6:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8003ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cea:	f042 0201 	orr.w	r2, r2, #1
 8003cee:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003cf6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003cf8:	f7fc fcd0 	bl	800069c <HAL_GetTick>
 8003cfc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cfe:	4b0e      	ldr	r3, [pc, #56]	; (8003d38 <HAL_RCC_OscConfig+0x578>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003d06:	d106      	bne.n	8003d16 <HAL_RCC_OscConfig+0x556>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d08:	f7fc fcc8 	bl	800069c <HAL_GetTick>
 8003d0c:	1b00      	subs	r0, r0, r4
 8003d0e:	2802      	cmp	r0, #2
 8003d10:	d9f5      	bls.n	8003cfe <HAL_RCC_OscConfig+0x53e>
            return HAL_TIMEOUT;
 8003d12:	2003      	movs	r0, #3
 8003d14:	e044      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8003d16:	2000      	movs	r0, #0
 8003d18:	e042      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
 8003d1a:	2000      	movs	r0, #0
 8003d1c:	e040      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003d1e:	4a06      	ldr	r2, [pc, #24]	; (8003d38 <HAL_RCC_OscConfig+0x578>)
 8003d20:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d22:	6b10      	ldr	r0, [r2, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d03c      	beq.n	8003da2 <HAL_RCC_OscConfig+0x5e2>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d28:	f001 0303 	and.w	r3, r1, #3
 8003d2c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00a      	beq.n	8003d48 <HAL_RCC_OscConfig+0x588>
        return HAL_ERROR;
 8003d32:	2001      	movs	r0, #1
 8003d34:	e034      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
 8003d36:	bf00      	nop
 8003d38:	58024400 	.word	0x58024400
 8003d3c:	58024800 	.word	0x58024800
 8003d40:	fffffc0c 	.word	0xfffffc0c
 8003d44:	ffff0007 	.word	0xffff0007
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d48:	f3c1 1105 	ubfx	r1, r1, #4, #6
 8003d4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4e:	4299      	cmp	r1, r3
 8003d50:	d001      	beq.n	8003d56 <HAL_RCC_OscConfig+0x596>
        return HAL_ERROR;
 8003d52:	2001      	movs	r0, #1
 8003d54:	e024      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d56:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8003d5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d5c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d001      	beq.n	8003d66 <HAL_RCC_OscConfig+0x5a6>
        return HAL_ERROR;
 8003d62:	2001      	movs	r0, #1
 8003d64:	e01c      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d66:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8003d6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d6c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d001      	beq.n	8003d76 <HAL_RCC_OscConfig+0x5b6>
        return HAL_ERROR;
 8003d72:	2001      	movs	r0, #1
 8003d74:	e014      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d76:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8003d7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d7c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d111      	bne.n	8003da6 <HAL_RCC_OscConfig+0x5e6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d82:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8003d86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d88:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d8a:	4298      	cmp	r0, r3
 8003d8c:	d00d      	beq.n	8003daa <HAL_RCC_OscConfig+0x5ea>
        return HAL_ERROR;
 8003d8e:	2001      	movs	r0, #1
 8003d90:	e006      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
    return HAL_ERROR;
 8003d92:	2001      	movs	r0, #1
}
 8003d94:	4770      	bx	lr
        return HAL_ERROR;
 8003d96:	2001      	movs	r0, #1
 8003d98:	e002      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
        return HAL_ERROR;
 8003d9a:	2001      	movs	r0, #1
 8003d9c:	e000      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
  return HAL_OK;
 8003d9e:	2000      	movs	r0, #0
}
 8003da0:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8003da2:	2001      	movs	r0, #1
 8003da4:	e7fc      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
 8003da6:	2001      	movs	r0, #1
 8003da8:	e7fa      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
  return HAL_OK;
 8003daa:	2000      	movs	r0, #0
 8003dac:	e7f8      	b.n	8003da0 <HAL_RCC_OscConfig+0x5e0>
 8003dae:	bf00      	nop

08003db0 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003db0:	4b72      	ldr	r3, [pc, #456]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003db8:	2b10      	cmp	r3, #16
 8003dba:	f000 80db 	beq.w	8003f74 <HAL_RCC_GetSysClockFreq+0x1c4>
 8003dbe:	2b18      	cmp	r3, #24
 8003dc0:	d010      	beq.n	8003de4 <HAL_RCC_GetSysClockFreq+0x34>
 8003dc2:	b10b      	cbz	r3, 8003dc8 <HAL_RCC_GetSysClockFreq+0x18>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003dc4:	486e      	ldr	r0, [pc, #440]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x1d0>)
 8003dc6:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dc8:	4b6c      	ldr	r3, [pc, #432]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f013 0f20 	tst.w	r3, #32
 8003dd0:	f000 80d2 	beq.w	8003f78 <HAL_RCC_GetSysClockFreq+0x1c8>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003dd4:	4b69      	ldr	r3, [pc, #420]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8003ddc:	4b69      	ldr	r3, [pc, #420]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003dde:	fa23 f000 	lsr.w	r0, r3, r0
 8003de2:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003de4:	4a65      	ldr	r2, [pc, #404]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003de6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003de8:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003dec:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003dee:	f3c0 1005 	ubfx	r0, r0, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003df2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003df4:	f003 0301 	and.w	r3, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003df8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dfa:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8003dfe:	fb03 f302 	mul.w	r3, r3, r2
 8003e02:	ee07 3a90 	vmov	s15, r3
 8003e06:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 8003e0a:	2800      	cmp	r0, #0
 8003e0c:	f000 80b5 	beq.w	8003f7a <HAL_RCC_GetSysClockFreq+0x1ca>
    {
      switch (pllsource)
 8003e10:	2901      	cmp	r1, #1
 8003e12:	d066      	beq.n	8003ee2 <HAL_RCC_GetSysClockFreq+0x132>
 8003e14:	b1f9      	cbz	r1, 8003e56 <HAL_RCC_GetSysClockFreq+0xa6>
 8003e16:	2902      	cmp	r1, #2
 8003e18:	f000 808f 	beq.w	8003f3a <HAL_RCC_GetSysClockFreq+0x18a>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e1c:	ee07 0a10 	vmov	s14, r0
 8003e20:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003e24:	ed9f 6a58 	vldr	s12, [pc, #352]	; 8003f88 <HAL_RCC_GetSysClockFreq+0x1d8>
 8003e28:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003e2c:	4b53      	ldr	r3, [pc, #332]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e34:	ee06 3a90 	vmov	s13, r3
 8003e38:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003e3c:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8003f8c <HAL_RCC_GetSysClockFreq+0x1dc>
 8003e40:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003e44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e50:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8003e54:	e061      	b.n	8003f1a <HAL_RCC_GetSysClockFreq+0x16a>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e56:	4b49      	ldr	r3, [pc, #292]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f013 0f20 	tst.w	r3, #32
 8003e5e:	d023      	beq.n	8003ea8 <HAL_RCC_GetSysClockFreq+0xf8>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e60:	4946      	ldr	r1, [pc, #280]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003e62:	680a      	ldr	r2, [r1, #0]
 8003e64:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003e68:	4b46      	ldr	r3, [pc, #280]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003e6a:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e6c:	ee07 3a10 	vmov	s14, r3
 8003e70:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003e74:	ee07 0a10 	vmov	s14, r0
 8003e78:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8003e7c:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8003e80:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e86:	ee06 3a90 	vmov	s13, r3
 8003e8a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003e8e:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8003f8c <HAL_RCC_GetSysClockFreq+0x1dc>
 8003e92:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ea2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ea6:	e038      	b.n	8003f1a <HAL_RCC_GetSysClockFreq+0x16a>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ea8:	ee07 0a10 	vmov	s14, r0
 8003eac:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003eb0:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8003f90 <HAL_RCC_GetSysClockFreq+0x1e0>
 8003eb4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003eb8:	4b30      	ldr	r3, [pc, #192]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec0:	ee06 3a90 	vmov	s13, r3
 8003ec4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003ec8:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8003f8c <HAL_RCC_GetSysClockFreq+0x1dc>
 8003ecc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003ed0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ed4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ed8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003edc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ee0:	e01b      	b.n	8003f1a <HAL_RCC_GetSysClockFreq+0x16a>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ee2:	ee07 0a10 	vmov	s14, r0
 8003ee6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003eea:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8003f88 <HAL_RCC_GetSysClockFreq+0x1d8>
 8003eee:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003ef2:	4b22      	ldr	r3, [pc, #136]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003efa:	ee06 3a90 	vmov	s13, r3
 8003efe:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003f02:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8003f8c <HAL_RCC_GetSysClockFreq+0x1dc>
 8003f06:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f16:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003f1a:	4b18      	ldr	r3, [pc, #96]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003f22:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003f24:	ee07 3a90 	vmov	s15, r3
 8003f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f2c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003f30:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8003f34:	ee17 0a90 	vmov	r0, s15
 8003f38:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f3a:	ee07 0a10 	vmov	s14, r0
 8003f3e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003f42:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8003f94 <HAL_RCC_GetSysClockFreq+0x1e4>
 8003f46:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003f4a:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f52:	ee06 3a90 	vmov	s13, r3
 8003f56:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003f5a:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8003f8c <HAL_RCC_GetSysClockFreq+0x1dc>
 8003f5e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f6e:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8003f72:	e7d2      	b.n	8003f1a <HAL_RCC_GetSysClockFreq+0x16a>
    sysclockfreq = HSE_VALUE;
 8003f74:	4808      	ldr	r0, [pc, #32]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x1e8>)
 8003f76:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003f78:	4802      	ldr	r0, [pc, #8]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x1d4>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8003f7a:	4770      	bx	lr
 8003f7c:	58024400 	.word	0x58024400
 8003f80:	003d0900 	.word	0x003d0900
 8003f84:	03d09000 	.word	0x03d09000
 8003f88:	4a742400 	.word	0x4a742400
 8003f8c:	39000000 	.word	0x39000000
 8003f90:	4c742400 	.word	0x4c742400
 8003f94:	4bbebc20 	.word	0x4bbebc20
 8003f98:	017d7840 	.word	0x017d7840

08003f9c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003f9c:	2800      	cmp	r0, #0
 8003f9e:	f000 8136 	beq.w	800420e <HAL_RCC_ClockConfig+0x272>
 8003fa2:	4603      	mov	r3, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa4:	4a9c      	ldr	r2, [pc, #624]	; (8004218 <HAL_RCC_ClockConfig+0x27c>)
 8003fa6:	6812      	ldr	r2, [r2, #0]
 8003fa8:	f002 020f 	and.w	r2, r2, #15
 8003fac:	428a      	cmp	r2, r1
 8003fae:	d20c      	bcs.n	8003fca <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb0:	4899      	ldr	r0, [pc, #612]	; (8004218 <HAL_RCC_ClockConfig+0x27c>)
 8003fb2:	6802      	ldr	r2, [r0, #0]
 8003fb4:	f022 020f 	bic.w	r2, r2, #15
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	6002      	str	r2, [r0, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fbc:	6802      	ldr	r2, [r0, #0]
 8003fbe:	f002 020f 	and.w	r2, r2, #15
 8003fc2:	428a      	cmp	r2, r1
 8003fc4:	d001      	beq.n	8003fca <HAL_RCC_ClockConfig+0x2e>
      return HAL_ERROR;
 8003fc6:	2001      	movs	r0, #1
}
 8003fc8:	4770      	bx	lr
{
 8003fca:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	f012 0f04 	tst.w	r2, #4
 8003fd2:	d00c      	beq.n	8003fee <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003fd4:	6918      	ldr	r0, [r3, #16]
 8003fd6:	4a91      	ldr	r2, [pc, #580]	; (800421c <HAL_RCC_ClockConfig+0x280>)
 8003fd8:	6992      	ldr	r2, [r2, #24]
 8003fda:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003fde:	4290      	cmp	r0, r2
 8003fe0:	d905      	bls.n	8003fee <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003fe2:	4c8e      	ldr	r4, [pc, #568]	; (800421c <HAL_RCC_ClockConfig+0x280>)
 8003fe4:	69a2      	ldr	r2, [r4, #24]
 8003fe6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003fea:	4310      	orrs	r0, r2
 8003fec:	61a0      	str	r0, [r4, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	f012 0f08 	tst.w	r2, #8
 8003ff4:	d00c      	beq.n	8004010 <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ff6:	6958      	ldr	r0, [r3, #20]
 8003ff8:	4a88      	ldr	r2, [pc, #544]	; (800421c <HAL_RCC_ClockConfig+0x280>)
 8003ffa:	69d2      	ldr	r2, [r2, #28]
 8003ffc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004000:	4290      	cmp	r0, r2
 8004002:	d905      	bls.n	8004010 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004004:	4c85      	ldr	r4, [pc, #532]	; (800421c <HAL_RCC_ClockConfig+0x280>)
 8004006:	69e2      	ldr	r2, [r4, #28]
 8004008:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800400c:	4310      	orrs	r0, r2
 800400e:	61e0      	str	r0, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	f012 0f10 	tst.w	r2, #16
 8004016:	d00c      	beq.n	8004032 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004018:	6998      	ldr	r0, [r3, #24]
 800401a:	4a80      	ldr	r2, [pc, #512]	; (800421c <HAL_RCC_ClockConfig+0x280>)
 800401c:	69d2      	ldr	r2, [r2, #28]
 800401e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004022:	4290      	cmp	r0, r2
 8004024:	d905      	bls.n	8004032 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004026:	4c7d      	ldr	r4, [pc, #500]	; (800421c <HAL_RCC_ClockConfig+0x280>)
 8004028:	69e2      	ldr	r2, [r4, #28]
 800402a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800402e:	4310      	orrs	r0, r2
 8004030:	61e0      	str	r0, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	f012 0f20 	tst.w	r2, #32
 8004038:	d00c      	beq.n	8004054 <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800403a:	69d8      	ldr	r0, [r3, #28]
 800403c:	4a77      	ldr	r2, [pc, #476]	; (800421c <HAL_RCC_ClockConfig+0x280>)
 800403e:	6a12      	ldr	r2, [r2, #32]
 8004040:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004044:	4290      	cmp	r0, r2
 8004046:	d905      	bls.n	8004054 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004048:	4c74      	ldr	r4, [pc, #464]	; (800421c <HAL_RCC_ClockConfig+0x280>)
 800404a:	6a22      	ldr	r2, [r4, #32]
 800404c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004050:	4310      	orrs	r0, r2
 8004052:	6220      	str	r0, [r4, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	f012 0f02 	tst.w	r2, #2
 800405a:	d00c      	beq.n	8004076 <HAL_RCC_ClockConfig+0xda>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800405c:	68d8      	ldr	r0, [r3, #12]
 800405e:	4a6f      	ldr	r2, [pc, #444]	; (800421c <HAL_RCC_ClockConfig+0x280>)
 8004060:	6992      	ldr	r2, [r2, #24]
 8004062:	f002 020f 	and.w	r2, r2, #15
 8004066:	4290      	cmp	r0, r2
 8004068:	d905      	bls.n	8004076 <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800406a:	4c6c      	ldr	r4, [pc, #432]	; (800421c <HAL_RCC_ClockConfig+0x280>)
 800406c:	69a2      	ldr	r2, [r4, #24]
 800406e:	f022 020f 	bic.w	r2, r2, #15
 8004072:	4310      	orrs	r0, r2
 8004074:	61a0      	str	r0, [r4, #24]
 8004076:	461c      	mov	r4, r3
 8004078:	460d      	mov	r5, r1
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f013 0f01 	tst.w	r3, #1
 8004080:	d041      	beq.n	8004106 <HAL_RCC_ClockConfig+0x16a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004082:	4a66      	ldr	r2, [pc, #408]	; (800421c <HAL_RCC_ClockConfig+0x280>)
 8004084:	6993      	ldr	r3, [r2, #24]
 8004086:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800408a:	68a1      	ldr	r1, [r4, #8]
 800408c:	430b      	orrs	r3, r1
 800408e:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004090:	6863      	ldr	r3, [r4, #4]
 8004092:	2b02      	cmp	r3, #2
 8004094:	d00a      	beq.n	80040ac <HAL_RCC_ClockConfig+0x110>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004096:	2b03      	cmp	r3, #3
 8004098:	d027      	beq.n	80040ea <HAL_RCC_ClockConfig+0x14e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800409a:	2b01      	cmp	r3, #1
 800409c:	d02c      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x15c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800409e:	4a5f      	ldr	r2, [pc, #380]	; (800421c <HAL_RCC_ClockConfig+0x280>)
 80040a0:	6812      	ldr	r2, [r2, #0]
 80040a2:	f012 0f04 	tst.w	r2, #4
 80040a6:	d106      	bne.n	80040b6 <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 80040a8:	2001      	movs	r0, #1
 80040aa:	e0af      	b.n	800420c <HAL_RCC_ClockConfig+0x270>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040ac:	6812      	ldr	r2, [r2, #0]
 80040ae:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80040b2:	f000 80ae 	beq.w	8004212 <HAL_RCC_ClockConfig+0x276>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040b6:	4959      	ldr	r1, [pc, #356]	; (800421c <HAL_RCC_ClockConfig+0x280>)
 80040b8:	690a      	ldr	r2, [r1, #16]
 80040ba:	f022 0207 	bic.w	r2, r2, #7
 80040be:	4313      	orrs	r3, r2
 80040c0:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 80040c2:	f7fc faeb 	bl	800069c <HAL_GetTick>
 80040c6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c8:	4b54      	ldr	r3, [pc, #336]	; (800421c <HAL_RCC_ClockConfig+0x280>)
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040d0:	6862      	ldr	r2, [r4, #4]
 80040d2:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80040d6:	d016      	beq.n	8004106 <HAL_RCC_ClockConfig+0x16a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040d8:	f7fc fae0 	bl	800069c <HAL_GetTick>
 80040dc:	1b80      	subs	r0, r0, r6
 80040de:	f241 3388 	movw	r3, #5000	; 0x1388
 80040e2:	4298      	cmp	r0, r3
 80040e4:	d9f0      	bls.n	80040c8 <HAL_RCC_ClockConfig+0x12c>
            return HAL_TIMEOUT;
 80040e6:	2003      	movs	r0, #3
 80040e8:	e090      	b.n	800420c <HAL_RCC_ClockConfig+0x270>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040ea:	4a4c      	ldr	r2, [pc, #304]	; (800421c <HAL_RCC_ClockConfig+0x280>)
 80040ec:	6812      	ldr	r2, [r2, #0]
 80040ee:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80040f2:	d1e0      	bne.n	80040b6 <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 80040f4:	2001      	movs	r0, #1
 80040f6:	e089      	b.n	800420c <HAL_RCC_ClockConfig+0x270>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040f8:	4a48      	ldr	r2, [pc, #288]	; (800421c <HAL_RCC_ClockConfig+0x280>)
 80040fa:	6812      	ldr	r2, [r2, #0]
 80040fc:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004100:	d1d9      	bne.n	80040b6 <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 8004102:	2001      	movs	r0, #1
 8004104:	e082      	b.n	800420c <HAL_RCC_ClockConfig+0x270>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	f013 0f02 	tst.w	r3, #2
 800410c:	d00c      	beq.n	8004128 <HAL_RCC_ClockConfig+0x18c>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800410e:	68e2      	ldr	r2, [r4, #12]
 8004110:	4b42      	ldr	r3, [pc, #264]	; (800421c <HAL_RCC_ClockConfig+0x280>)
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	429a      	cmp	r2, r3
 800411a:	d205      	bcs.n	8004128 <HAL_RCC_ClockConfig+0x18c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800411c:	493f      	ldr	r1, [pc, #252]	; (800421c <HAL_RCC_ClockConfig+0x280>)
 800411e:	698b      	ldr	r3, [r1, #24]
 8004120:	f023 030f 	bic.w	r3, r3, #15
 8004124:	431a      	orrs	r2, r3
 8004126:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004128:	4b3b      	ldr	r3, [pc, #236]	; (8004218 <HAL_RCC_ClockConfig+0x27c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 030f 	and.w	r3, r3, #15
 8004130:	42ab      	cmp	r3, r5
 8004132:	d90c      	bls.n	800414e <HAL_RCC_ClockConfig+0x1b2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004134:	4a38      	ldr	r2, [pc, #224]	; (8004218 <HAL_RCC_ClockConfig+0x27c>)
 8004136:	6813      	ldr	r3, [r2, #0]
 8004138:	f023 030f 	bic.w	r3, r3, #15
 800413c:	432b      	orrs	r3, r5
 800413e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004140:	6813      	ldr	r3, [r2, #0]
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	42ab      	cmp	r3, r5
 8004148:	d001      	beq.n	800414e <HAL_RCC_ClockConfig+0x1b2>
      return HAL_ERROR;
 800414a:	2001      	movs	r0, #1
 800414c:	e05e      	b.n	800420c <HAL_RCC_ClockConfig+0x270>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	f013 0f04 	tst.w	r3, #4
 8004154:	d00c      	beq.n	8004170 <HAL_RCC_ClockConfig+0x1d4>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004156:	6922      	ldr	r2, [r4, #16]
 8004158:	4b30      	ldr	r3, [pc, #192]	; (800421c <HAL_RCC_ClockConfig+0x280>)
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004160:	429a      	cmp	r2, r3
 8004162:	d205      	bcs.n	8004170 <HAL_RCC_ClockConfig+0x1d4>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004164:	492d      	ldr	r1, [pc, #180]	; (800421c <HAL_RCC_ClockConfig+0x280>)
 8004166:	698b      	ldr	r3, [r1, #24]
 8004168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416c:	431a      	orrs	r2, r3
 800416e:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004170:	6823      	ldr	r3, [r4, #0]
 8004172:	f013 0f08 	tst.w	r3, #8
 8004176:	d00c      	beq.n	8004192 <HAL_RCC_ClockConfig+0x1f6>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004178:	6962      	ldr	r2, [r4, #20]
 800417a:	4b28      	ldr	r3, [pc, #160]	; (800421c <HAL_RCC_ClockConfig+0x280>)
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004182:	429a      	cmp	r2, r3
 8004184:	d205      	bcs.n	8004192 <HAL_RCC_ClockConfig+0x1f6>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004186:	4925      	ldr	r1, [pc, #148]	; (800421c <HAL_RCC_ClockConfig+0x280>)
 8004188:	69cb      	ldr	r3, [r1, #28]
 800418a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418e:	431a      	orrs	r2, r3
 8004190:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004192:	6823      	ldr	r3, [r4, #0]
 8004194:	f013 0f10 	tst.w	r3, #16
 8004198:	d00c      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x218>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800419a:	69a2      	ldr	r2, [r4, #24]
 800419c:	4b1f      	ldr	r3, [pc, #124]	; (800421c <HAL_RCC_ClockConfig+0x280>)
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d205      	bcs.n	80041b4 <HAL_RCC_ClockConfig+0x218>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041a8:	491c      	ldr	r1, [pc, #112]	; (800421c <HAL_RCC_ClockConfig+0x280>)
 80041aa:	69cb      	ldr	r3, [r1, #28]
 80041ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80041b0:	431a      	orrs	r2, r3
 80041b2:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041b4:	6823      	ldr	r3, [r4, #0]
 80041b6:	f013 0f20 	tst.w	r3, #32
 80041ba:	d00c      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x23a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041bc:	69e2      	ldr	r2, [r4, #28]
 80041be:	4b17      	ldr	r3, [pc, #92]	; (800421c <HAL_RCC_ClockConfig+0x280>)
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d205      	bcs.n	80041d6 <HAL_RCC_ClockConfig+0x23a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80041ca:	4914      	ldr	r1, [pc, #80]	; (800421c <HAL_RCC_ClockConfig+0x280>)
 80041cc:	6a0b      	ldr	r3, [r1, #32]
 80041ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d2:	431a      	orrs	r2, r3
 80041d4:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041d6:	f7ff fdeb 	bl	8003db0 <HAL_RCC_GetSysClockFreq>
 80041da:	4910      	ldr	r1, [pc, #64]	; (800421c <HAL_RCC_ClockConfig+0x280>)
 80041dc:	698b      	ldr	r3, [r1, #24]
 80041de:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80041e2:	4a0f      	ldr	r2, [pc, #60]	; (8004220 <HAL_RCC_ClockConfig+0x284>)
 80041e4:	5cd3      	ldrb	r3, [r2, r3]
 80041e6:	f003 031f 	and.w	r3, r3, #31
 80041ea:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041ec:	698b      	ldr	r3, [r1, #24]
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	5cd3      	ldrb	r3, [r2, r3]
 80041f4:	f003 031f 	and.w	r3, r3, #31
 80041f8:	fa20 f303 	lsr.w	r3, r0, r3
 80041fc:	4a09      	ldr	r2, [pc, #36]	; (8004224 <HAL_RCC_ClockConfig+0x288>)
 80041fe:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8004200:	4b09      	ldr	r3, [pc, #36]	; (8004228 <HAL_RCC_ClockConfig+0x28c>)
 8004202:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8004204:	4b09      	ldr	r3, [pc, #36]	; (800422c <HAL_RCC_ClockConfig+0x290>)
 8004206:	6818      	ldr	r0, [r3, #0]
 8004208:	f7fc f9e6 	bl	80005d8 <HAL_InitTick>
}
 800420c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800420e:	2001      	movs	r0, #1
 8004210:	4770      	bx	lr
          return HAL_ERROR;
 8004212:	2001      	movs	r0, #1
 8004214:	e7fa      	b.n	800420c <HAL_RCC_ClockConfig+0x270>
 8004216:	bf00      	nop
 8004218:	52002000 	.word	0x52002000
 800421c:	58024400 	.word	0x58024400
 8004220:	0800fca0 	.word	0x0800fca0
 8004224:	20000014 	.word	0x20000014
 8004228:	20000010 	.word	0x20000010
 800422c:	20000004 	.word	0x20000004

08004230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004230:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004232:	f7ff fdbd 	bl	8003db0 <HAL_RCC_GetSysClockFreq>
 8004236:	4a0b      	ldr	r2, [pc, #44]	; (8004264 <HAL_RCC_GetHCLKFreq+0x34>)
 8004238:	6993      	ldr	r3, [r2, #24]
 800423a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800423e:	490a      	ldr	r1, [pc, #40]	; (8004268 <HAL_RCC_GetHCLKFreq+0x38>)
 8004240:	5ccb      	ldrb	r3, [r1, r3]
 8004242:	f003 031f 	and.w	r3, r3, #31
 8004246:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800424a:	6992      	ldr	r2, [r2, #24]
 800424c:	f002 020f 	and.w	r2, r2, #15
 8004250:	5c88      	ldrb	r0, [r1, r2]
 8004252:	f000 001f 	and.w	r0, r0, #31
 8004256:	fa23 f000 	lsr.w	r0, r3, r0
 800425a:	4a04      	ldr	r2, [pc, #16]	; (800426c <HAL_RCC_GetHCLKFreq+0x3c>)
 800425c:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800425e:	4a04      	ldr	r2, [pc, #16]	; (8004270 <HAL_RCC_GetHCLKFreq+0x40>)
 8004260:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8004262:	bd08      	pop	{r3, pc}
 8004264:	58024400 	.word	0x58024400
 8004268:	0800fca0 	.word	0x0800fca0
 800426c:	20000014 	.word	0x20000014
 8004270:	20000010 	.word	0x20000010

08004274 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004274:	4b40      	ldr	r3, [pc, #256]	; (8004378 <RCCEx_PLL2_Config+0x104>)
 8004276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004278:	f003 0303 	and.w	r3, r3, #3
 800427c:	2b03      	cmp	r3, #3
 800427e:	d079      	beq.n	8004374 <RCCEx_PLL2_Config+0x100>
{
 8004280:	b570      	push	{r4, r5, r6, lr}
 8004282:	460e      	mov	r6, r1
 8004284:	4604      	mov	r4, r0


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004286:	4a3c      	ldr	r2, [pc, #240]	; (8004378 <RCCEx_PLL2_Config+0x104>)
 8004288:	6813      	ldr	r3, [r2, #0]
 800428a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800428e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004290:	f7fc fa04 	bl	800069c <HAL_GetTick>
 8004294:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004296:	4b38      	ldr	r3, [pc, #224]	; (8004378 <RCCEx_PLL2_Config+0x104>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800429e:	d006      	beq.n	80042ae <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80042a0:	f7fc f9fc 	bl	800069c <HAL_GetTick>
 80042a4:	1b40      	subs	r0, r0, r5
 80042a6:	2802      	cmp	r0, #2
 80042a8:	d9f5      	bls.n	8004296 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 80042aa:	2003      	movs	r0, #3

  }


  return status;
}
 80042ac:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80042ae:	4b32      	ldr	r3, [pc, #200]	; (8004378 <RCCEx_PLL2_Config+0x104>)
 80042b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042b2:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 80042b6:	6821      	ldr	r1, [r4, #0]
 80042b8:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 80042bc:	629a      	str	r2, [r3, #40]	; 0x28
 80042be:	6862      	ldr	r2, [r4, #4]
 80042c0:	3a01      	subs	r2, #1
 80042c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042c6:	68a1      	ldr	r1, [r4, #8]
 80042c8:	3901      	subs	r1, #1
 80042ca:	0249      	lsls	r1, r1, #9
 80042cc:	b289      	uxth	r1, r1
 80042ce:	430a      	orrs	r2, r1
 80042d0:	68e1      	ldr	r1, [r4, #12]
 80042d2:	3901      	subs	r1, #1
 80042d4:	0409      	lsls	r1, r1, #16
 80042d6:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80042da:	430a      	orrs	r2, r1
 80042dc:	6921      	ldr	r1, [r4, #16]
 80042de:	3901      	subs	r1, #1
 80042e0:	0609      	lsls	r1, r1, #24
 80042e2:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80042e6:	430a      	orrs	r2, r1
 80042e8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80042ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ec:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80042f0:	6961      	ldr	r1, [r4, #20]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80042f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f8:	f022 0220 	bic.w	r2, r2, #32
 80042fc:	69a1      	ldr	r1, [r4, #24]
 80042fe:	430a      	orrs	r2, r1
 8004300:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004304:	f022 0210 	bic.w	r2, r2, #16
 8004308:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800430a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800430c:	4a1b      	ldr	r2, [pc, #108]	; (800437c <RCCEx_PLL2_Config+0x108>)
 800430e:	400a      	ands	r2, r1
 8004310:	69e1      	ldr	r1, [r4, #28]
 8004312:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8004316:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431a:	f042 0210 	orr.w	r2, r2, #16
 800431e:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8004320:	b9c6      	cbnz	r6, 8004354 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004322:	461a      	mov	r2, r3
 8004324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004326:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800432a:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 800432c:	4a12      	ldr	r2, [pc, #72]	; (8004378 <RCCEx_PLL2_Config+0x104>)
 800432e:	6813      	ldr	r3, [r2, #0]
 8004330:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004334:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004336:	f7fc f9b1 	bl	800069c <HAL_GetTick>
 800433a:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800433c:	4b0e      	ldr	r3, [pc, #56]	; (8004378 <RCCEx_PLL2_Config+0x104>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004344:	d114      	bne.n	8004370 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004346:	f7fc f9a9 	bl	800069c <HAL_GetTick>
 800434a:	1b00      	subs	r0, r0, r4
 800434c:	2802      	cmp	r0, #2
 800434e:	d9f5      	bls.n	800433c <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8004350:	2003      	movs	r0, #3
 8004352:	e7ab      	b.n	80042ac <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8004354:	2e01      	cmp	r6, #1
 8004356:	d005      	beq.n	8004364 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004358:	4a07      	ldr	r2, [pc, #28]	; (8004378 <RCCEx_PLL2_Config+0x104>)
 800435a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800435c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004360:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004362:	e7e3      	b.n	800432c <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004364:	4a04      	ldr	r2, [pc, #16]	; (8004378 <RCCEx_PLL2_Config+0x104>)
 8004366:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004368:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800436c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800436e:	e7dd      	b.n	800432c <RCCEx_PLL2_Config+0xb8>
  return status;
 8004370:	2000      	movs	r0, #0
 8004372:	e79b      	b.n	80042ac <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8004374:	2001      	movs	r0, #1
}
 8004376:	4770      	bx	lr
 8004378:	58024400 	.word	0x58024400
 800437c:	ffff0007 	.word	0xffff0007

08004380 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004380:	4b40      	ldr	r3, [pc, #256]	; (8004484 <RCCEx_PLL3_Config+0x104>)
 8004382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004384:	f003 0303 	and.w	r3, r3, #3
 8004388:	2b03      	cmp	r3, #3
 800438a:	d079      	beq.n	8004480 <RCCEx_PLL3_Config+0x100>
{
 800438c:	b570      	push	{r4, r5, r6, lr}
 800438e:	460e      	mov	r6, r1
 8004390:	4604      	mov	r4, r0


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004392:	4a3c      	ldr	r2, [pc, #240]	; (8004484 <RCCEx_PLL3_Config+0x104>)
 8004394:	6813      	ldr	r3, [r2, #0]
 8004396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800439a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800439c:	f7fc f97e 	bl	800069c <HAL_GetTick>
 80043a0:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80043a2:	4b38      	ldr	r3, [pc, #224]	; (8004484 <RCCEx_PLL3_Config+0x104>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80043aa:	d006      	beq.n	80043ba <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80043ac:	f7fc f976 	bl	800069c <HAL_GetTick>
 80043b0:	1b40      	subs	r0, r0, r5
 80043b2:	2802      	cmp	r0, #2
 80043b4:	d9f5      	bls.n	80043a2 <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 80043b6:	2003      	movs	r0, #3

  }


  return status;
}
 80043b8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80043ba:	4b32      	ldr	r3, [pc, #200]	; (8004484 <RCCEx_PLL3_Config+0x104>)
 80043bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043be:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 80043c2:	6821      	ldr	r1, [r4, #0]
 80043c4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80043c8:	629a      	str	r2, [r3, #40]	; 0x28
 80043ca:	6862      	ldr	r2, [r4, #4]
 80043cc:	3a01      	subs	r2, #1
 80043ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043d2:	68a1      	ldr	r1, [r4, #8]
 80043d4:	3901      	subs	r1, #1
 80043d6:	0249      	lsls	r1, r1, #9
 80043d8:	b289      	uxth	r1, r1
 80043da:	430a      	orrs	r2, r1
 80043dc:	68e1      	ldr	r1, [r4, #12]
 80043de:	3901      	subs	r1, #1
 80043e0:	0409      	lsls	r1, r1, #16
 80043e2:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80043e6:	430a      	orrs	r2, r1
 80043e8:	6921      	ldr	r1, [r4, #16]
 80043ea:	3901      	subs	r1, #1
 80043ec:	0609      	lsls	r1, r1, #24
 80043ee:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80043f2:	430a      	orrs	r2, r1
 80043f4:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80043f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80043fc:	6961      	ldr	r1, [r4, #20]
 80043fe:	430a      	orrs	r2, r1
 8004400:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004404:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004408:	69a1      	ldr	r1, [r4, #24]
 800440a:	430a      	orrs	r2, r1
 800440c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800440e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004410:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004414:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004416:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004418:	4a1b      	ldr	r2, [pc, #108]	; (8004488 <RCCEx_PLL3_Config+0x108>)
 800441a:	400a      	ands	r2, r1
 800441c:	69e1      	ldr	r1, [r4, #28]
 800441e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8004422:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800442a:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800442c:	b9c6      	cbnz	r6, 8004460 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800442e:	461a      	mov	r2, r3
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004436:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8004438:	4a12      	ldr	r2, [pc, #72]	; (8004484 <RCCEx_PLL3_Config+0x104>)
 800443a:	6813      	ldr	r3, [r2, #0]
 800443c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004440:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004442:	f7fc f92b 	bl	800069c <HAL_GetTick>
 8004446:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004448:	4b0e      	ldr	r3, [pc, #56]	; (8004484 <RCCEx_PLL3_Config+0x104>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004450:	d114      	bne.n	800447c <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004452:	f7fc f923 	bl	800069c <HAL_GetTick>
 8004456:	1b00      	subs	r0, r0, r4
 8004458:	2802      	cmp	r0, #2
 800445a:	d9f5      	bls.n	8004448 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 800445c:	2003      	movs	r0, #3
 800445e:	e7ab      	b.n	80043b8 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8004460:	2e01      	cmp	r6, #1
 8004462:	d005      	beq.n	8004470 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004464:	4a07      	ldr	r2, [pc, #28]	; (8004484 <RCCEx_PLL3_Config+0x104>)
 8004466:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004468:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800446c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800446e:	e7e3      	b.n	8004438 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004470:	4a04      	ldr	r2, [pc, #16]	; (8004484 <RCCEx_PLL3_Config+0x104>)
 8004472:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004474:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004478:	62d3      	str	r3, [r2, #44]	; 0x2c
 800447a:	e7dd      	b.n	8004438 <RCCEx_PLL3_Config+0xb8>
  return status;
 800447c:	2000      	movs	r0, #0
 800447e:	e79b      	b.n	80043b8 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8004480:	2001      	movs	r0, #1
}
 8004482:	4770      	bx	lr
 8004484:	58024400 	.word	0x58024400
 8004488:	ffff0007 	.word	0xffff0007

0800448c <HAL_RCCEx_PeriphCLKConfig>:
{
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004490:	6803      	ldr	r3, [r0, #0]
 8004492:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004496:	d02b      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8004498:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800449a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800449e:	d018      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x46>
 80044a0:	d907      	bls.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80044a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044a6:	d01d      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80044a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044ac:	d12e      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x80>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044ae:	2500      	movs	r5, #0
 80044b0:	e006      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x34>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80044b2:	bb5b      	cbnz	r3, 800450c <HAL_RCCEx_PeriphCLKConfig+0x80>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044b4:	4a93      	ldr	r2, [pc, #588]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80044b6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80044b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044bc:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044be:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80044c0:	4a90      	ldr	r2, [pc, #576]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80044c2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80044c4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80044c8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80044ca:	430b      	orrs	r3, r1
 80044cc:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044ce:	2600      	movs	r6, #0
 80044d0:	e010      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044d2:	2102      	movs	r1, #2
 80044d4:	3004      	adds	r0, #4
 80044d6:	f7ff fecd 	bl	8004274 <RCCEx_PLL2_Config>
 80044da:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80044dc:	2d00      	cmp	r5, #0
 80044de:	d0ef      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80044e0:	462e      	mov	r6, r5
 80044e2:	e007      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80044e4:	2102      	movs	r1, #2
 80044e6:	3024      	adds	r0, #36	; 0x24
 80044e8:	f7ff ff4a 	bl	8004380 <RCCEx_PLL3_Config>
 80044ec:	4605      	mov	r5, r0
      break;
 80044ee:	e7f5      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x50>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044f0:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044f2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80044f4:	6823      	ldr	r3, [r4, #0]
 80044f6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80044fa:	d017      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai1ClockSelection)
 80044fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d832      	bhi.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8004502:	e8df f003 	tbb	[pc, r3]
 8004506:	2406      	.short	0x2406
 8004508:	0b2a      	.short	0x0b2a
 800450a:	0b          	.byte	0x0b
 800450b:	00          	.byte	0x00
      ret = HAL_ERROR;
 800450c:	2601      	movs	r6, #1
 800450e:	4635      	mov	r5, r6
 8004510:	e7f0      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004512:	4a7c      	ldr	r2, [pc, #496]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004514:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800451a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800451c:	bb3d      	cbnz	r5, 800456e <HAL_RCCEx_PeriphCLKConfig+0xe2>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800451e:	4a79      	ldr	r2, [pc, #484]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004520:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004522:	f023 0307 	bic.w	r3, r3, #7
 8004526:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004528:	430b      	orrs	r3, r1
 800452a:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004532:	d033      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch(PeriphClkInit->Sai23ClockSelection)
 8004534:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004536:	2b80      	cmp	r3, #128	; 0x80
 8004538:	d044      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
 800453a:	d81a      	bhi.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 800453c:	b30b      	cbz	r3, 8004582 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 800453e:	2b40      	cmp	r3, #64	; 0x40
 8004540:	d11c      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xf0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004542:	2100      	movs	r1, #0
 8004544:	1d20      	adds	r0, r4, #4
 8004546:	f7ff fe95 	bl	8004274 <RCCEx_PLL2_Config>
 800454a:	4605      	mov	r5, r0
      break;
 800454c:	e01e      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x100>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800454e:	2100      	movs	r1, #0
 8004550:	1d20      	adds	r0, r4, #4
 8004552:	f7ff fe8f 	bl	8004274 <RCCEx_PLL2_Config>
 8004556:	4605      	mov	r5, r0
      break;
 8004558:	e7e0      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800455a:	2100      	movs	r1, #0
 800455c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004560:	f7ff ff0e 	bl	8004380 <RCCEx_PLL3_Config>
 8004564:	4605      	mov	r5, r0
      break;
 8004566:	e7d9      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = HAL_ERROR;
 8004568:	2601      	movs	r6, #1
 800456a:	4635      	mov	r5, r6
 800456c:	e7de      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800456e:	462e      	mov	r6, r5
 8004570:	e7dc      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai23ClockSelection)
 8004572:	2bc0      	cmp	r3, #192	; 0xc0
 8004574:	d00a      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x100>
 8004576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800457a:	d007      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x100>
      ret = HAL_ERROR;
 800457c:	2601      	movs	r6, #1
 800457e:	4635      	mov	r5, r6
 8004580:	e00c      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x110>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004582:	4a60      	ldr	r2, [pc, #384]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004584:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800458a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800458c:	bb0d      	cbnz	r5, 80045d2 <HAL_RCCEx_PeriphCLKConfig+0x146>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800458e:	4a5d      	ldr	r2, [pc, #372]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004590:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004592:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8004596:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004598:	430b      	orrs	r3, r1
 800459a:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80045a2:	d02f      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x178>
    switch(PeriphClkInit->Sai4AClockSelection)
 80045a4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80045a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ac:	d03e      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 80045ae:	d812      	bhi.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80045b0:	b1d3      	cbz	r3, 80045e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80045b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045b6:	d114      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045b8:	2100      	movs	r1, #0
 80045ba:	1d20      	adds	r0, r4, #4
 80045bc:	f7ff fe5a 	bl	8004274 <RCCEx_PLL2_Config>
 80045c0:	4605      	mov	r5, r0
      break;
 80045c2:	e016      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80045c4:	2100      	movs	r1, #0
 80045c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80045ca:	f7ff fed9 	bl	8004380 <RCCEx_PLL3_Config>
 80045ce:	4605      	mov	r5, r0
      break;
 80045d0:	e7dc      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x100>
 80045d2:	462e      	mov	r6, r5
 80045d4:	e7e2      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch(PeriphClkInit->Sai4AClockSelection)
 80045d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80045da:	d00a      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80045dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045e0:	d007      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = HAL_ERROR;
 80045e2:	2601      	movs	r6, #1
 80045e4:	4635      	mov	r5, r6
 80045e6:	e00d      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x178>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045e8:	4a46      	ldr	r2, [pc, #280]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80045ea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80045ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80045f2:	bb15      	cbnz	r5, 800463a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80045f4:	4a43      	ldr	r2, [pc, #268]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80045f6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80045f8:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80045fc:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8004600:	430b      	orrs	r3, r1
 8004602:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800460a:	d02f      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->Sai4BClockSelection)
 800460c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8004610:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004614:	d037      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004616:	d812      	bhi.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004618:	b1d3      	cbz	r3, 8004650 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 800461a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800461e:	d114      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x1be>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004620:	2100      	movs	r1, #0
 8004622:	1d20      	adds	r0, r4, #4
 8004624:	f7ff fe26 	bl	8004274 <RCCEx_PLL2_Config>
 8004628:	4605      	mov	r5, r0
      break;
 800462a:	e016      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800462c:	2100      	movs	r1, #0
 800462e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004632:	f7ff fea5 	bl	8004380 <RCCEx_PLL3_Config>
 8004636:	4605      	mov	r5, r0
      break;
 8004638:	e7db      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800463a:	462e      	mov	r6, r5
 800463c:	e7e2      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x178>
    switch(PeriphClkInit->Sai4BClockSelection)
 800463e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004642:	d00a      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004644:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004648:	d007      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      ret = HAL_ERROR;
 800464a:	2601      	movs	r6, #1
 800464c:	4635      	mov	r5, r6
 800464e:	e00d      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004650:	4a2c      	ldr	r2, [pc, #176]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004652:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004658:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800465a:	b9dd      	cbnz	r5, 8004694 <HAL_RCCEx_PeriphCLKConfig+0x208>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800465c:	4a29      	ldr	r2, [pc, #164]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800465e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004660:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004664:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8004668:	430b      	orrs	r3, r1
 800466a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800466c:	6823      	ldr	r3, [r4, #0]
 800466e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004672:	d02a      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x23e>
    switch(PeriphClkInit->QspiClockSelection)
 8004674:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004676:	2b10      	cmp	r3, #16
 8004678:	d012      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 800467a:	d90d      	bls.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800467c:	2b20      	cmp	r3, #32
 800467e:	d01d      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004680:	2b30      	cmp	r3, #48	; 0x30
 8004682:	d012      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004684:	e009      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x20e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004686:	2100      	movs	r1, #0
 8004688:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800468c:	f7ff fe78 	bl	8004380 <RCCEx_PLL3_Config>
 8004690:	4605      	mov	r5, r0
      break;
 8004692:	e7e2      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004694:	462e      	mov	r6, r5
 8004696:	e7e9      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->QspiClockSelection)
 8004698:	b13b      	cbz	r3, 80046aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
      ret = HAL_ERROR;
 800469a:	2601      	movs	r6, #1
 800469c:	4635      	mov	r5, r6
 800469e:	e014      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046a0:	4a18      	ldr	r2, [pc, #96]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80046a2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80046a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80046aa:	b96d      	cbnz	r5, 80046c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80046ac:	4a15      	ldr	r2, [pc, #84]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80046ae:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80046b0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80046b4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80046b6:	430b      	orrs	r3, r1
 80046b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046ba:	e006      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x23e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80046bc:	2102      	movs	r1, #2
 80046be:	1d20      	adds	r0, r4, #4
 80046c0:	f7ff fdd8 	bl	8004274 <RCCEx_PLL2_Config>
 80046c4:	4605      	mov	r5, r0
      break;
 80046c6:	e7f0      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80046c8:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80046d0:	d027      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch(PeriphClkInit->Spi123ClockSelection)
 80046d2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80046d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046d8:	d03e      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80046da:	d809      	bhi.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80046dc:	b1a3      	cbz	r3, 8004708 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80046de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e2:	d10b      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x270>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046e4:	2100      	movs	r1, #0
 80046e6:	1d20      	adds	r0, r4, #4
 80046e8:	f7ff fdc4 	bl	8004274 <RCCEx_PLL2_Config>
 80046ec:	4605      	mov	r5, r0
      break;
 80046ee:	e010      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x286>
    switch(PeriphClkInit->Spi123ClockSelection)
 80046f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046f4:	d00d      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80046f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046fa:	d00a      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x286>
      ret = HAL_ERROR;
 80046fc:	2601      	movs	r6, #1
 80046fe:	4635      	mov	r5, r6
 8004700:	e00f      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004702:	bf00      	nop
 8004704:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004708:	4a93      	ldr	r2, [pc, #588]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 800470a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800470c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004710:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004712:	bb45      	cbnz	r5, 8004766 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004714:	4a90      	ldr	r2, [pc, #576]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004716:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004718:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800471c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800471e:	430b      	orrs	r3, r1
 8004720:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004728:	d033      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Spi45ClockSelection)
 800472a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800472c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004730:	d027      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8004732:	d81a      	bhi.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004734:	b13b      	cbz	r3, 8004746 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800473a:	d11f      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800473c:	2101      	movs	r1, #1
 800473e:	1d20      	adds	r0, r4, #4
 8004740:	f7ff fd98 	bl	8004274 <RCCEx_PLL2_Config>
 8004744:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004746:	bb1d      	cbnz	r5, 8004790 <HAL_RCCEx_PeriphCLKConfig+0x304>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004748:	4a83      	ldr	r2, [pc, #524]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 800474a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800474c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004750:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004752:	430b      	orrs	r3, r1
 8004754:	6513      	str	r3, [r2, #80]	; 0x50
 8004756:	e01c      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x306>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004758:	2100      	movs	r1, #0
 800475a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800475e:	f7ff fe0f 	bl	8004380 <RCCEx_PLL3_Config>
 8004762:	4605      	mov	r5, r0
      break;
 8004764:	e7d5      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004766:	462e      	mov	r6, r5
 8004768:	e7db      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch(PeriphClkInit->Spi45ClockSelection)
 800476a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800476e:	d0ea      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004774:	d0e7      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004776:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800477a:	d0e4      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      ret = HAL_ERROR;
 800477c:	2601      	movs	r6, #1
 800477e:	4635      	mov	r5, r6
 8004780:	e007      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x306>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004782:	2101      	movs	r1, #1
 8004784:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004788:	f7ff fdfa 	bl	8004380 <RCCEx_PLL3_Config>
 800478c:	4605      	mov	r5, r0
      break;
 800478e:	e7da      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004790:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004798:	d02c      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    switch(PeriphClkInit->Spi6ClockSelection)
 800479a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800479e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047a2:	d01f      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x358>
 80047a4:	d812      	bhi.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x340>
 80047a6:	b13b      	cbz	r3, 80047b8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 80047a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047ac:	d117      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x352>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80047ae:	2101      	movs	r1, #1
 80047b0:	1d20      	adds	r0, r4, #4
 80047b2:	f7ff fd5f 	bl	8004274 <RCCEx_PLL2_Config>
 80047b6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80047b8:	b9dd      	cbnz	r5, 80047f2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80047ba:	4a67      	ldr	r2, [pc, #412]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80047bc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80047be:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80047c2:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80047c6:	430b      	orrs	r3, r1
 80047c8:	6593      	str	r3, [r2, #88]	; 0x58
 80047ca:	e013      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    switch(PeriphClkInit->Spi6ClockSelection)
 80047cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d0:	d0f2      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 80047d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047d6:	d0ef      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 80047d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047dc:	d0ec      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      ret = HAL_ERROR;
 80047de:	2601      	movs	r6, #1
 80047e0:	4635      	mov	r5, r6
 80047e2:	e007      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047e4:	2101      	movs	r1, #1
 80047e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80047ea:	f7ff fdc9 	bl	8004380 <RCCEx_PLL3_Config>
 80047ee:	4605      	mov	r5, r0
      break;
 80047f0:	e7e2      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 80047f2:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80047fa:	d01f      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->FdcanClockSelection)
 80047fc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80047fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004802:	d006      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004808:	d011      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 800480a:	b13b      	cbz	r3, 800481c <HAL_RCCEx_PeriphCLKConfig+0x390>
      ret = HAL_ERROR;
 800480c:	2601      	movs	r6, #1
 800480e:	4635      	mov	r5, r6
 8004810:	e014      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004812:	4a51      	ldr	r2, [pc, #324]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004814:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800481a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800481c:	b96d      	cbnz	r5, 800483a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800481e:	4a4e      	ldr	r2, [pc, #312]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004820:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004822:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004826:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004828:	430b      	orrs	r3, r1
 800482a:	6513      	str	r3, [r2, #80]	; 0x50
 800482c:	e006      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800482e:	2101      	movs	r1, #1
 8004830:	1d20      	adds	r0, r4, #4
 8004832:	f7ff fd1f 	bl	8004274 <RCCEx_PLL2_Config>
 8004836:	4605      	mov	r5, r0
      break;
 8004838:	e7f0      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x390>
 800483a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004842:	d01e      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    switch(PeriphClkInit->FmcClockSelection)
 8004844:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004846:	2b03      	cmp	r3, #3
 8004848:	d817      	bhi.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 800484a:	e8df f003 	tbb	[pc, r3]
 800484e:	0207      	.short	0x0207
 8004850:	0710      	.short	0x0710
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004852:	4a41      	ldr	r2, [pc, #260]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004854:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800485a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800485c:	b985      	cbnz	r5, 8004880 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800485e:	4a3e      	ldr	r2, [pc, #248]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004860:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004862:	f023 0303 	bic.w	r3, r3, #3
 8004866:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004868:	430b      	orrs	r3, r1
 800486a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800486c:	e009      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800486e:	2102      	movs	r1, #2
 8004870:	1d20      	adds	r0, r4, #4
 8004872:	f7ff fcff 	bl	8004274 <RCCEx_PLL2_Config>
 8004876:	4605      	mov	r5, r0
      break;
 8004878:	e7f0      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
      ret = HAL_ERROR;
 800487a:	2601      	movs	r6, #1
 800487c:	4635      	mov	r5, r6
 800487e:	e000      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8004880:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004888:	d11f      	bne.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x43e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	f013 0f01 	tst.w	r3, #1
 8004890:	f000 809e 	beq.w	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    switch(PeriphClkInit->Usart16ClockSelection)
 8004894:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8004896:	2b28      	cmp	r3, #40	; 0x28
 8004898:	f200 8096 	bhi.w	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x53c>
 800489c:	e8df f003 	tbb	[pc, r3]
 80048a0:	94949484 	.word	0x94949484
 80048a4:	94949494 	.word	0x94949494
 80048a8:	9494947f 	.word	0x9494947f
 80048ac:	94949494 	.word	0x94949494
 80048b0:	9494948d 	.word	0x9494948d
 80048b4:	94949494 	.word	0x94949494
 80048b8:	94949484 	.word	0x94949484
 80048bc:	94949494 	.word	0x94949494
 80048c0:	94949484 	.word	0x94949484
 80048c4:	94949494 	.word	0x94949494
 80048c8:	84          	.byte	0x84
 80048c9:	00          	.byte	0x00
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048ca:	4a24      	ldr	r2, [pc, #144]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80048cc:	6813      	ldr	r3, [r2, #0]
 80048ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048d2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80048d4:	f7fb fee2 	bl	800069c <HAL_GetTick>
 80048d8:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048da:	4b20      	ldr	r3, [pc, #128]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f413 7f80 	tst.w	r3, #256	; 0x100
 80048e2:	d105      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x464>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e4:	f7fb feda 	bl	800069c <HAL_GetTick>
 80048e8:	1bc0      	subs	r0, r0, r7
 80048ea:	2864      	cmp	r0, #100	; 0x64
 80048ec:	d9f5      	bls.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x44e>
        ret = HAL_TIMEOUT;
 80048ee:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 80048f0:	2d00      	cmp	r5, #0
 80048f2:	d150      	bne.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80048f4:	4b18      	ldr	r3, [pc, #96]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80048f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f8:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80048fc:	4053      	eors	r3, r2
 80048fe:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004902:	d00c      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x492>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004904:	4b14      	ldr	r3, [pc, #80]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004906:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004908:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800490c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800490e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004912:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004914:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004916:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800491a:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800491c:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800491e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8004922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004926:	d01b      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      if(ret == HAL_OK)
 8004928:	2d00      	cmp	r5, #0
 800492a:	d136      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x50e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800492c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8004930:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004934:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004938:	d023      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800493a:	4a07      	ldr	r2, [pc, #28]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 800493c:	6913      	ldr	r3, [r2, #16]
 800493e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004942:	6113      	str	r3, [r2, #16]
 8004944:	4904      	ldr	r1, [pc, #16]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004946:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8004948:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800494c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004950:	4313      	orrs	r3, r2
 8004952:	670b      	str	r3, [r1, #112]	; 0x70
 8004954:	e799      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8004956:	bf00      	nop
 8004958:	58024400 	.word	0x58024400
 800495c:	58024800 	.word	0x58024800
        tickstart = HAL_GetTick();
 8004960:	f7fb fe9c 	bl	800069c <HAL_GetTick>
 8004964:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004966:	4bac      	ldr	r3, [pc, #688]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496a:	f013 0f02 	tst.w	r3, #2
 800496e:	d1db      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x49c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004970:	f7fb fe94 	bl	800069c <HAL_GetTick>
 8004974:	1bc0      	subs	r0, r0, r7
 8004976:	f241 3388 	movw	r3, #5000	; 0x1388
 800497a:	4298      	cmp	r0, r3
 800497c:	d9f3      	bls.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x4da>
            ret = HAL_TIMEOUT;
 800497e:	2503      	movs	r5, #3
 8004980:	e7d2      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x49c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004982:	48a5      	ldr	r0, [pc, #660]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004984:	6902      	ldr	r2, [r0, #16]
 8004986:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800498a:	49a4      	ldr	r1, [pc, #656]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x790>)
 800498c:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8004990:	4313      	orrs	r3, r2
 8004992:	6103      	str	r3, [r0, #16]
 8004994:	e7d6      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      status = ret;
 8004996:	462e      	mov	r6, r5
 8004998:	e777      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
        status = ret;
 800499a:	462e      	mov	r6, r5
 800499c:	e775      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800499e:	2101      	movs	r1, #1
 80049a0:	1d20      	adds	r0, r4, #4
 80049a2:	f7ff fc67 	bl	8004274 <RCCEx_PLL2_Config>
 80049a6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80049a8:	b98d      	cbnz	r5, 80049ce <HAL_RCCEx_PeriphCLKConfig+0x542>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80049aa:	4a9b      	ldr	r2, [pc, #620]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80049ac:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80049ae:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80049b2:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80049b4:	430b      	orrs	r3, r1
 80049b6:	6553      	str	r3, [r2, #84]	; 0x54
 80049b8:	e00a      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80049ba:	2101      	movs	r1, #1
 80049bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80049c0:	f7ff fcde 	bl	8004380 <RCCEx_PLL3_Config>
 80049c4:	4605      	mov	r5, r0
      break;
 80049c6:	e7ef      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
      ret = HAL_ERROR;
 80049c8:	2601      	movs	r6, #1
 80049ca:	4635      	mov	r5, r6
 80049cc:	e000      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x544>
 80049ce:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80049d0:	6823      	ldr	r3, [r4, #0]
 80049d2:	f013 0f02 	tst.w	r3, #2
 80049d6:	d020      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x58e>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80049d8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80049da:	2b05      	cmp	r3, #5
 80049dc:	d819      	bhi.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80049de:	e8df f003 	tbb	[pc, r3]
 80049e2:	0308      	.short	0x0308
 80049e4:	08080811 	.word	0x08080811
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80049e8:	2101      	movs	r1, #1
 80049ea:	1d20      	adds	r0, r4, #4
 80049ec:	f7ff fc42 	bl	8004274 <RCCEx_PLL2_Config>
 80049f0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80049f2:	b98d      	cbnz	r5, 8004a18 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80049f4:	4a88      	ldr	r2, [pc, #544]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80049f6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80049f8:	f023 0307 	bic.w	r3, r3, #7
 80049fc:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80049fe:	430b      	orrs	r3, r1
 8004a00:	6553      	str	r3, [r2, #84]	; 0x54
 8004a02:	e00a      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x58e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a04:	2101      	movs	r1, #1
 8004a06:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004a0a:	f7ff fcb9 	bl	8004380 <RCCEx_PLL3_Config>
 8004a0e:	4605      	mov	r5, r0
      break;
 8004a10:	e7ef      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x566>
      ret = HAL_ERROR;
 8004a12:	2601      	movs	r6, #1
 8004a14:	4635      	mov	r5, r6
 8004a16:	e000      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8004a18:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a1a:	6823      	ldr	r3, [r4, #0]
 8004a1c:	f013 0f04 	tst.w	r3, #4
 8004a20:	d022      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004a22:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004a26:	2b05      	cmp	r3, #5
 8004a28:	d81a      	bhi.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004a2a:	e8df f003 	tbb	[pc, r3]
 8004a2e:	0308      	.short	0x0308
 8004a30:	08080812 	.word	0x08080812
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a34:	2101      	movs	r1, #1
 8004a36:	1d20      	adds	r0, r4, #4
 8004a38:	f7ff fc1c 	bl	8004274 <RCCEx_PLL2_Config>
 8004a3c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004a3e:	b995      	cbnz	r5, 8004a66 <HAL_RCCEx_PeriphCLKConfig+0x5da>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a40:	4a75      	ldr	r2, [pc, #468]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004a42:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004a44:	f023 0307 	bic.w	r3, r3, #7
 8004a48:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a50:	e00a      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a52:	2101      	movs	r1, #1
 8004a54:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004a58:	f7ff fc92 	bl	8004380 <RCCEx_PLL3_Config>
 8004a5c:	4605      	mov	r5, r0
      break;
 8004a5e:	e7ee      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x5b2>
      ret = HAL_ERROR;
 8004a60:	2601      	movs	r6, #1
 8004a62:	4635      	mov	r5, r6
 8004a64:	e000      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
 8004a66:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	f013 0f20 	tst.w	r3, #32
 8004a6e:	d02c      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004a70:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a78:	d01f      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8004a7a:	d812      	bhi.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x616>
 8004a7c:	b13b      	cbz	r3, 8004a8e <HAL_RCCEx_PeriphCLKConfig+0x602>
 8004a7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a82:	d117      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x628>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a84:	2100      	movs	r1, #0
 8004a86:	1d20      	adds	r0, r4, #4
 8004a88:	f7ff fbf4 	bl	8004274 <RCCEx_PLL2_Config>
 8004a8c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004a8e:	b9dd      	cbnz	r5, 8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x63c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a90:	4a61      	ldr	r2, [pc, #388]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004a92:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004a94:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8004a98:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8004a9c:	430b      	orrs	r3, r1
 8004a9e:	6553      	str	r3, [r2, #84]	; 0x54
 8004aa0:	e013      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa6:	d0f2      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x602>
 8004aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004aac:	d0ef      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x602>
 8004aae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ab2:	d0ec      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x602>
      ret = HAL_ERROR;
 8004ab4:	2601      	movs	r6, #1
 8004ab6:	4635      	mov	r5, r6
 8004ab8:	e007      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x63e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004aba:	2102      	movs	r1, #2
 8004abc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004ac0:	f7ff fc5e 	bl	8004380 <RCCEx_PLL3_Config>
 8004ac4:	4605      	mov	r5, r0
      break;
 8004ac6:	e7e2      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x602>
 8004ac8:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004ad0:	d02c      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004ad2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8004ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ada:	d01f      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x690>
 8004adc:	d812      	bhi.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004ade:	b13b      	cbz	r3, 8004af0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ae4:	d117      	bne.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x68a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	1d20      	adds	r0, r4, #4
 8004aea:	f7ff fbc3 	bl	8004274 <RCCEx_PLL2_Config>
 8004aee:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004af0:	b9dd      	cbnz	r5, 8004b2a <HAL_RCCEx_PeriphCLKConfig+0x69e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004af2:	4a49      	ldr	r2, [pc, #292]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004af4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004af6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004afa:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8004afe:	430b      	orrs	r3, r1
 8004b00:	6593      	str	r3, [r2, #88]	; 0x58
 8004b02:	e013      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b08:	d0f2      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004b0a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b0e:	d0ef      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004b10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b14:	d0ec      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      ret = HAL_ERROR;
 8004b16:	2601      	movs	r6, #1
 8004b18:	4635      	mov	r5, r6
 8004b1a:	e007      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b1c:	2102      	movs	r1, #2
 8004b1e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004b22:	f7ff fc2d 	bl	8004380 <RCCEx_PLL3_Config>
 8004b26:	4605      	mov	r5, r0
      break;
 8004b28:	e7e2      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004b2a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004b32:	d02c      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004b34:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8004b38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b3c:	d01f      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004b3e:	d812      	bhi.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8004b40:	b13b      	cbz	r3, 8004b52 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8004b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b46:	d117      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b48:	2100      	movs	r1, #0
 8004b4a:	1d20      	adds	r0, r4, #4
 8004b4c:	f7ff fb92 	bl	8004274 <RCCEx_PLL2_Config>
 8004b50:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004b52:	b9dd      	cbnz	r5, 8004b8c <HAL_RCCEx_PeriphCLKConfig+0x700>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b54:	4a30      	ldr	r2, [pc, #192]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004b56:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004b58:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004b5c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8004b60:	430b      	orrs	r3, r1
 8004b62:	6593      	str	r3, [r2, #88]	; 0x58
 8004b64:	e013      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b6a:	d0f2      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8004b6c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004b70:	d0ef      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8004b72:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004b76:	d0ec      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      ret = HAL_ERROR;
 8004b78:	2601      	movs	r6, #1
 8004b7a:	4635      	mov	r5, r6
 8004b7c:	e007      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x702>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b7e:	2102      	movs	r1, #2
 8004b80:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004b84:	f7ff fbfc 	bl	8004380 <RCCEx_PLL3_Config>
 8004b88:	4605      	mov	r5, r0
      break;
 8004b8a:	e7e2      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8004b8c:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	f013 0f08 	tst.w	r3, #8
 8004b94:	d00c      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x724>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004b96:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b9e:	d028      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x766>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004ba0:	4a1d      	ldr	r2, [pc, #116]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004ba2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004ba4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ba8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004bac:	430b      	orrs	r3, r1
 8004bae:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bb0:	6823      	ldr	r3, [r4, #0]
 8004bb2:	f013 0f10 	tst.w	r3, #16
 8004bb6:	d00c      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x746>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004bb8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc0:	d020      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x778>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bc2:	4a15      	ldr	r2, [pc, #84]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004bc4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bca:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8004bce:	430b      	orrs	r3, r1
 8004bd0:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004bd8:	d039      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    switch(PeriphClkInit->AdcClockSelection)
 8004bda:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8004bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be2:	d02c      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x7b2>
 8004be4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004be8:	d01f      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x79e>
 8004bea:	b1cb      	cbz	r3, 8004c20 <HAL_RCCEx_PeriphCLKConfig+0x794>
      ret = HAL_ERROR;
 8004bec:	2601      	movs	r6, #1
 8004bee:	4635      	mov	r5, r6
 8004bf0:	e02d      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004bf2:	2102      	movs	r1, #2
 8004bf4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004bf8:	f7ff fbc2 	bl	8004380 <RCCEx_PLL3_Config>
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	d0cf      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x714>
          status = HAL_ERROR;
 8004c00:	2601      	movs	r6, #1
 8004c02:	e7cd      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x714>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004c04:	2102      	movs	r1, #2
 8004c06:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004c0a:	f7ff fbb9 	bl	8004380 <RCCEx_PLL3_Config>
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	d0d7      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x736>
        status = HAL_ERROR;
 8004c12:	2601      	movs	r6, #1
 8004c14:	e7d5      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x736>
 8004c16:	bf00      	nop
 8004c18:	58024400 	.word	0x58024400
 8004c1c:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c20:	2100      	movs	r1, #0
 8004c22:	1d20      	adds	r0, r4, #4
 8004c24:	f7ff fb26 	bl	8004274 <RCCEx_PLL2_Config>
 8004c28:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004c2a:	b97d      	cbnz	r5, 8004c4c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c2c:	4a5e      	ldr	r2, [pc, #376]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004c2e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004c30:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004c34:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8004c3c:	e007      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c3e:	2102      	movs	r1, #2
 8004c40:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004c44:	f7ff fb9c 	bl	8004380 <RCCEx_PLL3_Config>
 8004c48:	4605      	mov	r5, r0
      break;
 8004c4a:	e7ee      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x79e>
 8004c4c:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004c54:	d024      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    switch(PeriphClkInit->UsbClockSelection)
 8004c56:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004c5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c5e:	d017      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x804>
 8004c60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c64:	d00a      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
 8004c66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c6a:	d002      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
      ret = HAL_ERROR;
 8004c6c:	2601      	movs	r6, #1
 8004c6e:	4635      	mov	r5, r6
 8004c70:	e016      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c72:	4a4d      	ldr	r2, [pc, #308]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004c74:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c7a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004c7c:	b97d      	cbnz	r5, 8004c9e <HAL_RCCEx_PeriphCLKConfig+0x812>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c7e:	4a4a      	ldr	r2, [pc, #296]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004c80:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004c82:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004c86:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8004c8a:	430b      	orrs	r3, r1
 8004c8c:	6553      	str	r3, [r2, #84]	; 0x54
 8004c8e:	e007      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c90:	2101      	movs	r1, #1
 8004c92:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004c96:	f7ff fb73 	bl	8004380 <RCCEx_PLL3_Config>
 8004c9a:	4605      	mov	r5, r0
      break;
 8004c9c:	e7ee      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
 8004c9e:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004ca6:	d014      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x846>
    switch(PeriphClkInit->SdmmcClockSelection)
 8004ca8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004caa:	b12b      	cbz	r3, 8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb0:	d023      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x86e>
      ret = HAL_ERROR;
 8004cb2:	2601      	movs	r6, #1
 8004cb4:	4635      	mov	r5, r6
 8004cb6:	e00c      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x846>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cb8:	4a3b      	ldr	r2, [pc, #236]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004cba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cc0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004cc2:	bb05      	cbnz	r5, 8004d06 <HAL_RCCEx_PeriphCLKConfig+0x87a>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004cc4:	4a38      	ldr	r2, [pc, #224]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004cc6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ccc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004cce:	430b      	orrs	r3, r1
 8004cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004cd8:	d117      	bne.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x87e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004ce0:	d02d      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
    switch(PeriphClkInit->RngClockSelection)
 8004ce2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ce8:	d01b      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x896>
 8004cea:	d917      	bls.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x890>
 8004cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf0:	d01c      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 8004cf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cf6:	d112      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x892>
 8004cf8:	e018      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004cfa:	2102      	movs	r1, #2
 8004cfc:	1d20      	adds	r0, r4, #4
 8004cfe:	f7ff fab9 	bl	8004274 <RCCEx_PLL2_Config>
 8004d02:	4605      	mov	r5, r0
      break;
 8004d04:	e7dd      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x836>
 8004d06:	462e      	mov	r6, r5
 8004d08:	e7e3      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x846>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004d0a:	2102      	movs	r1, #2
 8004d0c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004d10:	f7ff fb36 	bl	8004380 <RCCEx_PLL3_Config>
 8004d14:	2800      	cmp	r0, #0
 8004d16:	d0e0      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x84e>
      status=HAL_ERROR;
 8004d18:	2601      	movs	r6, #1
 8004d1a:	e7de      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x84e>
    switch(PeriphClkInit->RngClockSelection)
 8004d1c:	b133      	cbz	r3, 8004d2c <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      ret = HAL_ERROR;
 8004d1e:	2601      	movs	r6, #1
 8004d20:	e00d      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d22:	4a21      	ldr	r2, [pc, #132]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004d24:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d2a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004d2c:	2d00      	cmp	r5, #0
 8004d2e:	d131      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x908>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d30:	4a1d      	ldr	r2, [pc, #116]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004d32:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d38:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004d3a:	430b      	orrs	r3, r1
 8004d3c:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004d44:	d006      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d46:	4a18      	ldr	r2, [pc, #96]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004d48:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004d4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d4e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004d50:	430b      	orrs	r3, r1
 8004d52:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004d5a:	d006      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d5c:	4a12      	ldr	r2, [pc, #72]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004d5e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004d60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d64:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8004d66:	430b      	orrs	r3, r1
 8004d68:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004d70:	d009      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d72:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004d74:	691a      	ldr	r2, [r3, #16]
 8004d76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d7a:	611a      	str	r2, [r3, #16]
 8004d7c:	691a      	ldr	r2, [r3, #16]
 8004d7e:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8004d82:	430a      	orrs	r2, r1
 8004d84:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	db05      	blt.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x90c>
  if (status == HAL_OK)
 8004d8c:	b106      	cbz	r6, 8004d90 <HAL_RCCEx_PeriphCLKConfig+0x904>
  return HAL_ERROR;
 8004d8e:	2601      	movs	r6, #1
}
 8004d90:	4630      	mov	r0, r6
 8004d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d94:	462e      	mov	r6, r5
 8004d96:	e7d2      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d98:	4a03      	ldr	r2, [pc, #12]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004d9a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004d9c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004da0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004da2:	430b      	orrs	r3, r1
 8004da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004da6:	e7f1      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x900>
 8004da8:	58024400 	.word	0x58024400

08004dac <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8004dac:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004dae:	f7ff fa3f 	bl	8004230 <HAL_RCC_GetHCLKFreq>
 8004db2:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004dba:	4a04      	ldr	r2, [pc, #16]	; (8004dcc <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8004dbc:	5cd3      	ldrb	r3, [r2, r3]
 8004dbe:	f003 031f 	and.w	r3, r3, #31
}
 8004dc2:	40d8      	lsrs	r0, r3
 8004dc4:	bd08      	pop	{r3, pc}
 8004dc6:	bf00      	nop
 8004dc8:	58024400 	.word	0x58024400
 8004dcc:	0800fca0 	.word	0x0800fca0

08004dd0 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8004dd0:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004dd2:	4978      	ldr	r1, [pc, #480]	; (8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004dd4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004dd6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004dd8:	f3c2 3205 	ubfx	r2, r2, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004ddc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8004dde:	f3c3 1300 	ubfx	r3, r3, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004de2:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8004de4:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8004de8:	fb03 f301 	mul.w	r3, r3, r1
  if (pll2m != 0U)
 8004dec:	2a00      	cmp	r2, #0
 8004dee:	f000 80db 	beq.w	8004fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>
 8004df2:	f004 0403 	and.w	r4, r4, #3
 8004df6:	ee07 3a90 	vmov	s15, r3
 8004dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8004dfe:	2c01      	cmp	r4, #1
 8004e00:	d066      	beq.n	8004ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 8004e02:	b1fc      	cbz	r4, 8004e44 <HAL_RCCEx_GetPLL2ClockFreq+0x74>
 8004e04:	2c02      	cmp	r4, #2
 8004e06:	f000 80b2 	beq.w	8004f6e <HAL_RCCEx_GetPLL2ClockFreq+0x19e>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e0a:	ee07 2a10 	vmov	s14, r2
 8004e0e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004e12:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8004fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8004e16:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004e1a:	4b66      	ldr	r3, [pc, #408]	; (8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e22:	ee07 3a10 	vmov	s14, r3
 8004e26:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004e2a:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8004fbc <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004e2e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004e32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8004e42:	e061      	b.n	8004f08 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e44:	4b5b      	ldr	r3, [pc, #364]	; (8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f013 0f20 	tst.w	r3, #32
 8004e4c:	d023      	beq.n	8004e96 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e4e:	4c59      	ldr	r4, [pc, #356]	; (8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004e50:	6821      	ldr	r1, [r4, #0]
 8004e52:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8004e56:	4b5a      	ldr	r3, [pc, #360]	; (8004fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 8004e58:	40cb      	lsrs	r3, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e5a:	ee07 3a10 	vmov	s14, r3
 8004e5e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004e62:	ee06 2a90 	vmov	s13, r2
 8004e66:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8004e6a:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8004e6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e74:	ee07 3a10 	vmov	s14, r3
 8004e78:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004e7c:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8004fbc <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004e80:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004e84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e90:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004e94:	e038      	b.n	8004f08 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e96:	ee07 2a10 	vmov	s14, r2
 8004e9a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004e9e:	ed9f 6a49 	vldr	s12, [pc, #292]	; 8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 8004ea2:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004ea6:	4b43      	ldr	r3, [pc, #268]	; (8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eae:	ee07 3a10 	vmov	s14, r3
 8004eb2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004eb6:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8004fbc <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004eba:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ec2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ec6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004eca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004ece:	e01b      	b.n	8004f08 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ed0:	ee07 2a10 	vmov	s14, r2
 8004ed4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004ed8:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8004fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8004edc:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004ee0:	4b34      	ldr	r3, [pc, #208]	; (8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee8:	ee07 3a10 	vmov	s14, r3
 8004eec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004ef0:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8004fbc <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004ef4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004efc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f04:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004f08:	4a2a      	ldr	r2, [pc, #168]	; (8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004f0a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004f0c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004f10:	ee07 3a10 	vmov	s14, r3
 8004f14:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004f18:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004f1c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f28:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004f2c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004f2e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004f32:	ee07 3a10 	vmov	s14, r3
 8004f36:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004f3a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f46:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004f4a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004f4c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004f50:	ee07 3a90 	vmov	s15, r3
 8004f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f58:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004f5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f60:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004f64:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8004f68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f6c:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f6e:	ee07 2a10 	vmov	s14, r2
 8004f72:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004f76:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8004fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 8004f7a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004f7e:	4b0d      	ldr	r3, [pc, #52]	; (8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f86:	ee07 3a10 	vmov	s14, r3
 8004f8a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004f8e:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8004fbc <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004f92:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004f96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004fa2:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8004fa6:	e7af      	b.n	8004f08 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004fac:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004fae:	6083      	str	r3, [r0, #8]
}
 8004fb0:	e7da      	b.n	8004f68 <HAL_RCCEx_GetPLL2ClockFreq+0x198>
 8004fb2:	bf00      	nop
 8004fb4:	58024400 	.word	0x58024400
 8004fb8:	4a742400 	.word	0x4a742400
 8004fbc:	39000000 	.word	0x39000000
 8004fc0:	03d09000 	.word	0x03d09000
 8004fc4:	4c742400 	.word	0x4c742400
 8004fc8:	4bbebc20 	.word	0x4bbebc20

08004fcc <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8004fcc:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fce:	4978      	ldr	r1, [pc, #480]	; (80051b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004fd0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004fd2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004fd4:	f3c2 5205 	ubfx	r2, r2, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004fd8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8004fda:	f3c3 2300 	ubfx	r3, r3, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004fde:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004fe0:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8004fe4:	fb03 f301 	mul.w	r3, r3, r1
  if (pll3m != 0U)
 8004fe8:	2a00      	cmp	r2, #0
 8004fea:	f000 80db 	beq.w	80051a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
 8004fee:	f004 0403 	and.w	r4, r4, #3
 8004ff2:	ee07 3a90 	vmov	s15, r3
 8004ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8004ffa:	2c01      	cmp	r4, #1
 8004ffc:	d066      	beq.n	80050cc <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 8004ffe:	b1fc      	cbz	r4, 8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x74>
 8005000:	2c02      	cmp	r4, #2
 8005002:	f000 80b2 	beq.w	800516a <HAL_RCCEx_GetPLL3ClockFreq+0x19e>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005006:	ee07 2a10 	vmov	s14, r2
 800500a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800500e:	ed9f 6a69 	vldr	s12, [pc, #420]	; 80051b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8005012:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005016:	4b66      	ldr	r3, [pc, #408]	; (80051b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800501e:	ee07 3a10 	vmov	s14, r3
 8005022:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005026:	ed9f 6a64 	vldr	s12, [pc, #400]	; 80051b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800502a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800502e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005032:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005036:	ee77 7a87 	vadd.f32	s15, s15, s14
 800503a:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 800503e:	e061      	b.n	8005104 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005040:	4b5b      	ldr	r3, [pc, #364]	; (80051b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f013 0f20 	tst.w	r3, #32
 8005048:	d023      	beq.n	8005092 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800504a:	4c59      	ldr	r4, [pc, #356]	; (80051b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800504c:	6821      	ldr	r1, [r4, #0]
 800504e:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8005052:	4b5a      	ldr	r3, [pc, #360]	; (80051bc <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 8005054:	40cb      	lsrs	r3, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005056:	ee07 3a10 	vmov	s14, r3
 800505a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800505e:	ee06 2a90 	vmov	s13, r2
 8005062:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8005066:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800506a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800506c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005070:	ee07 3a10 	vmov	s14, r3
 8005074:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005078:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 80051b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800507c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005084:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005088:	ee77 7a87 	vadd.f32	s15, s15, s14
 800508c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005090:	e038      	b.n	8005104 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005092:	ee07 2a10 	vmov	s14, r2
 8005096:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800509a:	ed9f 6a49 	vldr	s12, [pc, #292]	; 80051c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 800509e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80050a2:	4b43      	ldr	r3, [pc, #268]	; (80051b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050aa:	ee07 3a10 	vmov	s14, r3
 80050ae:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80050b2:	ed9f 6a41 	vldr	s12, [pc, #260]	; 80051b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 80050b6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80050ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80050c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80050ca:	e01b      	b.n	8005104 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80050cc:	ee07 2a10 	vmov	s14, r2
 80050d0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80050d4:	ed9f 6a37 	vldr	s12, [pc, #220]	; 80051b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 80050d8:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80050dc:	4b34      	ldr	r3, [pc, #208]	; (80051b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80050de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e4:	ee07 3a10 	vmov	s14, r3
 80050e8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80050ec:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80051b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 80050f0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80050f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005100:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005104:	4a2a      	ldr	r2, [pc, #168]	; (80051b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8005106:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005108:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800510c:	ee07 3a10 	vmov	s14, r3
 8005110:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005114:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005118:	ee37 7a06 	vadd.f32	s14, s14, s12
 800511c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005124:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005128:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800512a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800512e:	ee07 3a10 	vmov	s14, r3
 8005132:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005136:	ee37 7a06 	vadd.f32	s14, s14, s12
 800513a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800513e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005142:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005146:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005148:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800514c:	ee07 3a90 	vmov	s15, r3
 8005150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005154:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005158:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800515c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005160:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8005164:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005168:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800516a:	ee07 2a10 	vmov	s14, r2
 800516e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005172:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80051c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 8005176:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800517a:	4b0d      	ldr	r3, [pc, #52]	; (80051b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005182:	ee07 3a10 	vmov	s14, r3
 8005186:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800518a:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80051b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800518e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005196:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800519a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800519e:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80051a2:	e7af      	b.n	8005104 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80051a8:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80051aa:	6083      	str	r3, [r0, #8]
}
 80051ac:	e7da      	b.n	8005164 <HAL_RCCEx_GetPLL3ClockFreq+0x198>
 80051ae:	bf00      	nop
 80051b0:	58024400 	.word	0x58024400
 80051b4:	4a742400 	.word	0x4a742400
 80051b8:	39000000 	.word	0x39000000
 80051bc:	03d09000 	.word	0x03d09000
 80051c0:	4c742400 	.word	0x4c742400
 80051c4:	4bbebc20 	.word	0x4bbebc20

080051c8 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 80051c8:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051ca:	4978      	ldr	r1, [pc, #480]	; (80053ac <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80051cc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80051ce:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80051d0:	f3c2 1205 	ubfx	r2, r2, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80051d4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80051d6:	f003 0301 	and.w	r3, r3, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80051da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80051dc:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 80051e0:	fb03 f301 	mul.w	r3, r3, r1
  if (pll1m != 0U)
 80051e4:	2a00      	cmp	r2, #0
 80051e6:	f000 80db 	beq.w	80053a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
 80051ea:	f004 0403 	and.w	r4, r4, #3
 80051ee:	ee07 3a90 	vmov	s15, r3
 80051f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 80051f6:	2c01      	cmp	r4, #1
 80051f8:	d066      	beq.n	80052c8 <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 80051fa:	b1fc      	cbz	r4, 800523c <HAL_RCCEx_GetPLL1ClockFreq+0x74>
 80051fc:	2c02      	cmp	r4, #2
 80051fe:	f000 80b2 	beq.w	8005366 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005202:	ee07 2a10 	vmov	s14, r2
 8005206:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800520a:	ed9f 6a69 	vldr	s12, [pc, #420]	; 80053b0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 800520e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005212:	4b66      	ldr	r3, [pc, #408]	; (80053ac <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8005214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800521a:	ee07 3a10 	vmov	s14, r3
 800521e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005222:	ed9f 6a64 	vldr	s12, [pc, #400]	; 80053b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8005226:	ee67 7a86 	vmul.f32	s15, s15, s12
 800522a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800522e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005232:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005236:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 800523a:	e061      	b.n	8005300 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800523c:	4b5b      	ldr	r3, [pc, #364]	; (80053ac <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f013 0f20 	tst.w	r3, #32
 8005244:	d023      	beq.n	800528e <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005246:	4c59      	ldr	r4, [pc, #356]	; (80053ac <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8005248:	6821      	ldr	r1, [r4, #0]
 800524a:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 800524e:	4b5a      	ldr	r3, [pc, #360]	; (80053b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>)
 8005250:	40cb      	lsrs	r3, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005252:	ee07 3a10 	vmov	s14, r3
 8005256:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800525a:	ee06 2a90 	vmov	s13, r2
 800525e:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8005262:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8005266:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526c:	ee07 3a10 	vmov	s14, r3
 8005270:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005274:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 80053b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8005278:	ee67 7a86 	vmul.f32	s15, s15, s12
 800527c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005280:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005284:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005288:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800528c:	e038      	b.n	8005300 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800528e:	ee07 2a10 	vmov	s14, r2
 8005292:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005296:	ed9f 6a49 	vldr	s12, [pc, #292]	; 80053bc <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 800529a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800529e:	4b43      	ldr	r3, [pc, #268]	; (80053ac <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80052a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052a6:	ee07 3a10 	vmov	s14, r3
 80052aa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80052ae:	ed9f 6a41 	vldr	s12, [pc, #260]	; 80053b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 80052b2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80052b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80052c6:	e01b      	b.n	8005300 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80052c8:	ee07 2a10 	vmov	s14, r2
 80052cc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80052d0:	ed9f 6a37 	vldr	s12, [pc, #220]	; 80053b0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 80052d4:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80052d8:	4b34      	ldr	r3, [pc, #208]	; (80053ac <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80052da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e0:	ee07 3a10 	vmov	s14, r3
 80052e4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80052e8:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80053b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 80052ec:	ee67 7a86 	vmul.f32	s15, s15, s12
 80052f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005300:	4a2a      	ldr	r2, [pc, #168]	; (80053ac <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8005302:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005304:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005308:	ee07 3a10 	vmov	s14, r3
 800530c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005310:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005314:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800531c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005320:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005324:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005326:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800532a:	ee07 3a10 	vmov	s14, r3
 800532e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005332:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800533a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800533e:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005342:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005344:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005348:	ee07 3a90 	vmov	s15, r3
 800534c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005350:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005354:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005358:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800535c:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8005360:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005364:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005366:	ee07 2a10 	vmov	s14, r2
 800536a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800536e:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80053c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f8>
 8005372:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005376:	4b0d      	ldr	r3, [pc, #52]	; (80053ac <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8005378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800537e:	ee07 3a10 	vmov	s14, r3
 8005382:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005386:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80053b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 800538a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800538e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005392:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005396:	ee77 7a87 	vadd.f32	s15, s15, s14
 800539a:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 800539e:	e7af      	b.n	8005300 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80053a4:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80053a6:	6083      	str	r3, [r0, #8]
}
 80053a8:	e7da      	b.n	8005360 <HAL_RCCEx_GetPLL1ClockFreq+0x198>
 80053aa:	bf00      	nop
 80053ac:	58024400 	.word	0x58024400
 80053b0:	4a742400 	.word	0x4a742400
 80053b4:	39000000 	.word	0x39000000
 80053b8:	03d09000 	.word	0x03d09000
 80053bc:	4c742400 	.word	0x4c742400
 80053c0:	4bbebc20 	.word	0x4bbebc20

080053c4 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 80053c4:	b500      	push	{lr}
 80053c6:	b08b      	sub	sp, #44	; 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80053c8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80053cc:	d01b      	beq.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80053ce:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80053d2:	d048      	beq.n	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80053d4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80053d8:	d078      	beq.n	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80053da:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80053de:	f000 80ab 	beq.w	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80053e2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80053e6:	f000 80dd 	beq.w	80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80053ea:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 80053ee:	f000 810f 	beq.w	8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80053f2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80053f6:	f000 8131 	beq.w	800565c <HAL_RCCEx_GetPeriphCLKFreq+0x298>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80053fa:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80053fe:	f000 8145 	beq.w	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
      frequency = 0;
 8005402:	2000      	movs	r0, #0
 8005404:	e00c      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005406:	4b9e      	ldr	r3, [pc, #632]	; (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800540a:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 800540e:	2b04      	cmp	r3, #4
 8005410:	f200 8164 	bhi.w	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8005414:	e8df f003 	tbb	[pc, r3]
 8005418:	03110c07 	.word	0x03110c07
 800541c:	16          	.byte	0x16
 800541d:	00          	.byte	0x00
          frequency = EXTERNAL_CLOCK_VALUE;
 800541e:	4899      	ldr	r0, [pc, #612]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
}
 8005420:	b00b      	add	sp, #44	; 0x2c
 8005422:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005426:	a807      	add	r0, sp, #28
 8005428:	f7ff fece 	bl	80051c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800542c:	9808      	ldr	r0, [sp, #32]
          break;
 800542e:	e7f7      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005430:	a804      	add	r0, sp, #16
 8005432:	f7ff fccd 	bl	8004dd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005436:	9804      	ldr	r0, [sp, #16]
          break;
 8005438:	e7f2      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800543a:	a801      	add	r0, sp, #4
 800543c:	f7ff fdc6 	bl	8004fcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005440:	9801      	ldr	r0, [sp, #4]
          break;
 8005442:	e7ed      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005444:	4b8e      	ldr	r3, [pc, #568]	; (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005448:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 800544c:	f000 8148 	beq.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005450:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005454:	f000 8146 	beq.w	80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800545c:	d001      	beq.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = 0;
 800545e:	2000      	movs	r0, #0
 8005460:	e7de      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8005462:	4889      	ldr	r0, [pc, #548]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005464:	e7dc      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005466:	4b86      	ldr	r3, [pc, #536]	; (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800546a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 800546e:	2b80      	cmp	r3, #128	; 0x80
 8005470:	d025      	beq.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8005472:	d808      	bhi.n	8005486 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 8005474:	b1f3      	cbz	r3, 80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8005476:	2b40      	cmp	r3, #64	; 0x40
 8005478:	f040 8136 	bne.w	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800547c:	a804      	add	r0, sp, #16
 800547e:	f7ff fca7 	bl	8004dd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005482:	9804      	ldr	r0, [sp, #16]
          break;
 8005484:	e7cc      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (saiclocksource)
 8005486:	2bc0      	cmp	r3, #192	; 0xc0
 8005488:	d012      	beq.n	80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800548a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800548e:	f040 812b 	bne.w	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005492:	4b7b      	ldr	r3, [pc, #492]	; (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005496:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 800549a:	f000 8127 	beq.w	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x328>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800549e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054a2:	f000 8125 	beq.w	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80054a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054aa:	d00d      	beq.n	80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            frequency = 0;
 80054ac:	2000      	movs	r0, #0
 80054ae:	e7b7      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 80054b0:	4874      	ldr	r0, [pc, #464]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80054b2:	e7b5      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054b4:	a807      	add	r0, sp, #28
 80054b6:	f7ff fe87 	bl	80051c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054ba:	9808      	ldr	r0, [sp, #32]
          break;
 80054bc:	e7b0      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054be:	a801      	add	r0, sp, #4
 80054c0:	f7ff fd84 	bl	8004fcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80054c4:	9801      	ldr	r0, [sp, #4]
          break;
 80054c6:	e7ab      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 80054c8:	486f      	ldr	r0, [pc, #444]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054ca:	e7a9      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80054cc:	4b6c      	ldr	r3, [pc, #432]	; (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80054ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d0:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 80054d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054d8:	d027      	beq.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80054da:	d809      	bhi.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80054dc:	b303      	cbz	r3, 8005520 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 80054de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054e2:	f040 8107 	bne.w	80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054e6:	a804      	add	r0, sp, #16
 80054e8:	f7ff fc72 	bl	8004dd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80054ec:	9804      	ldr	r0, [sp, #16]
          break;
 80054ee:	e797      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (saiclocksource)
 80054f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80054f4:	d012      	beq.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80054f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054fa:	f040 80fb 	bne.w	80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80054fe:	4b60      	ldr	r3, [pc, #384]	; (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005502:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8005506:	f000 80f7 	beq.w	80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800550a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800550e:	f000 80f5 	beq.w	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005512:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005516:	d00d      	beq.n	8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
            frequency = 0;
 8005518:	2000      	movs	r0, #0
 800551a:	e781      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 800551c:	4859      	ldr	r0, [pc, #356]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800551e:	e77f      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005520:	a807      	add	r0, sp, #28
 8005522:	f7ff fe51 	bl	80051c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005526:	9808      	ldr	r0, [sp, #32]
          break;
 8005528:	e77a      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800552a:	a801      	add	r0, sp, #4
 800552c:	f7ff fd4e 	bl	8004fcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005530:	9801      	ldr	r0, [sp, #4]
          break;
 8005532:	e775      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8005534:	4854      	ldr	r0, [pc, #336]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005536:	e773      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005538:	4b51      	ldr	r3, [pc, #324]	; (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800553a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8005540:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005544:	d027      	beq.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
 8005546:	d809      	bhi.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8005548:	b303      	cbz	r3, 800558c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 800554a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800554e:	f040 80d7 	bne.w	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005552:	a804      	add	r0, sp, #16
 8005554:	f7ff fc3c 	bl	8004dd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005558:	9804      	ldr	r0, [sp, #16]
          break;
 800555a:	e761      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (saiclocksource)
 800555c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005560:	d012      	beq.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8005562:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005566:	f040 80cb 	bne.w	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800556a:	4b45      	ldr	r3, [pc, #276]	; (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800556c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800556e:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8005572:	f000 80c7 	beq.w	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005576:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800557a:	f000 80c5 	beq.w	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800557e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005582:	d00d      	beq.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
            frequency = 0;
 8005584:	2000      	movs	r0, #0
 8005586:	e74b      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 8005588:	483e      	ldr	r0, [pc, #248]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800558a:	e749      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800558c:	a807      	add	r0, sp, #28
 800558e:	f7ff fe1b 	bl	80051c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005592:	9808      	ldr	r0, [sp, #32]
          break;
 8005594:	e744      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005596:	a801      	add	r0, sp, #4
 8005598:	f7ff fd18 	bl	8004fcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800559c:	9801      	ldr	r0, [sp, #4]
          break;
 800559e:	e73f      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 80055a0:	4839      	ldr	r0, [pc, #228]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80055a2:	e73d      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80055a4:	4b36      	ldr	r3, [pc, #216]	; (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80055a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 80055ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055b0:	d027      	beq.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80055b2:	d809      	bhi.n	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 80055b4:	b303      	cbz	r3, 80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 80055b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ba:	f040 80a7 	bne.w	800570c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055be:	a804      	add	r0, sp, #16
 80055c0:	f7ff fc06 	bl	8004dd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80055c4:	9804      	ldr	r0, [sp, #16]
          break;
 80055c6:	e72b      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (srcclk)
 80055c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055cc:	d012      	beq.n	80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 80055ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055d2:	f040 809b 	bne.w	800570c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80055d6:	4b2a      	ldr	r3, [pc, #168]	; (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80055d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80055da:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 80055de:	f000 8097 	beq.w	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80055e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055e6:	f000 8095 	beq.w	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80055ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ee:	d00d      	beq.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
            frequency = 0;
 80055f0:	2000      	movs	r0, #0
 80055f2:	e715      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 80055f4:	4823      	ldr	r0, [pc, #140]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80055f6:	e713      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055f8:	a807      	add	r0, sp, #28
 80055fa:	f7ff fde5 	bl	80051c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80055fe:	9808      	ldr	r0, [sp, #32]
          break;
 8005600:	e70e      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005602:	a801      	add	r0, sp, #4
 8005604:	f7ff fce2 	bl	8004fcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005608:	9801      	ldr	r0, [sp, #4]
          break;
 800560a:	e709      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 800560c:	481e      	ldr	r0, [pc, #120]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800560e:	e707      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005610:	4b1b      	ldr	r3, [pc, #108]	; (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005614:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8005618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800561c:	d00a      	beq.n	8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
 800561e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005622:	d00c      	beq.n	800563e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8005624:	b10b      	cbz	r3, 800562a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
          frequency = 0;
 8005626:	2000      	movs	r0, #0
 8005628:	e6fa      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800562a:	a804      	add	r0, sp, #16
 800562c:	f7ff fbd0 	bl	8004dd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005630:	9804      	ldr	r0, [sp, #16]
          break;
 8005632:	e6f5      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005634:	a801      	add	r0, sp, #4
 8005636:	f7ff fcc9 	bl	8004fcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800563a:	9803      	ldr	r0, [sp, #12]
          break;
 800563c:	e6f0      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800563e:	4b10      	ldr	r3, [pc, #64]	; (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005642:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8005646:	d067      	beq.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005648:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800564c:	d066      	beq.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800564e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005652:	d001      	beq.n	8005658 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
            frequency = 0;
 8005654:	2000      	movs	r0, #0
 8005656:	e6e3      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8005658:	480b      	ldr	r0, [pc, #44]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800565a:	e6e1      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800565c:	4b08      	ldr	r3, [pc, #32]	; (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800565e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 8005660:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8005664:	d002      	beq.n	800566c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
 8005666:	b933      	cbnz	r3, 8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
          frequency = 0;
 8005668:	2000      	movs	r0, #0
 800566a:	e6d9      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800566c:	a807      	add	r0, sp, #28
 800566e:	f7ff fdab 	bl	80051c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005672:	9808      	ldr	r0, [sp, #32]
          break;
 8005674:	e6d4      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005676:	a804      	add	r0, sp, #16
 8005678:	f7ff fbaa 	bl	8004dd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800567c:	9806      	ldr	r0, [sp, #24]
          break;
 800567e:	e6cf      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8005680:	58024400 	.word	0x58024400
 8005684:	00bb8000 	.word	0x00bb8000
 8005688:	017d7840 	.word	0x017d7840
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800568c:	4b25      	ldr	r3, [pc, #148]	; (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 800568e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005690:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8005694:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005698:	d019      	beq.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
 800569a:	d90a      	bls.n	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
 800569c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a0:	d03e      	beq.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 80056a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056a6:	d017      	beq.n	80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80056a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80056ac:	d00a      	beq.n	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
          frequency = 0;
 80056ae:	2000      	movs	r0, #0
          break;
 80056b0:	e6b6      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (srcclk)
 80056b2:	b14b      	cbz	r3, 80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80056b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056b8:	d1f9      	bne.n	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056ba:	a804      	add	r0, sp, #16
 80056bc:	f7ff fb88 	bl	8004dd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80056c0:	9805      	ldr	r0, [sp, #20]
          break;
 80056c2:	e6ad      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = HSI_VALUE;
 80056c4:	4818      	ldr	r0, [pc, #96]	; (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80056c6:	e6ab      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80056c8:	f7ff fb70 	bl	8004dac <HAL_RCCEx_GetD3PCLK1Freq>
          break;
 80056cc:	e6a8      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056ce:	a801      	add	r0, sp, #4
 80056d0:	f7ff fc7c 	bl	8004fcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80056d4:	9802      	ldr	r0, [sp, #8]
          break;
 80056d6:	e6a3      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = HSE_VALUE;
 80056d8:	4814      	ldr	r0, [pc, #80]	; (800572c <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
          break;
 80056da:	e6a1      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 80056dc:	2000      	movs	r0, #0
 80056de:	e69f      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 80056e0:	4811      	ldr	r0, [pc, #68]	; (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80056e2:	e69d      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 80056e4:	4812      	ldr	r0, [pc, #72]	; (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80056e6:	e69b      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 80056e8:	2000      	movs	r0, #0
 80056ea:	e699      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 80056ec:	480e      	ldr	r0, [pc, #56]	; (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80056ee:	e697      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 80056f0:	480f      	ldr	r0, [pc, #60]	; (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80056f2:	e695      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 80056f4:	2000      	movs	r0, #0
 80056f6:	e693      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 80056f8:	480b      	ldr	r0, [pc, #44]	; (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80056fa:	e691      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 80056fc:	480c      	ldr	r0, [pc, #48]	; (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80056fe:	e68f      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 8005700:	2000      	movs	r0, #0
 8005702:	e68d      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8005704:	4808      	ldr	r0, [pc, #32]	; (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8005706:	e68b      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8005708:	4809      	ldr	r0, [pc, #36]	; (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800570a:	e689      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 800570c:	2000      	movs	r0, #0
 800570e:	e687      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8005710:	4805      	ldr	r0, [pc, #20]	; (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8005712:	e685      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8005714:	4806      	ldr	r0, [pc, #24]	; (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8005716:	e683      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8005718:	4803      	ldr	r0, [pc, #12]	; (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 800571a:	e681      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 800571c:	4804      	ldr	r0, [pc, #16]	; (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800571e:	e67f      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = CSI_VALUE;
 8005720:	4803      	ldr	r0, [pc, #12]	; (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
  return frequency;
 8005722:	e67d      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8005724:	58024400 	.word	0x58024400
 8005728:	03d09000 	.word	0x03d09000
 800572c:	017d7840 	.word	0x017d7840
 8005730:	003d0900 	.word	0x003d0900

08005734 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005734:	2800      	cmp	r0, #0
 8005736:	d036      	beq.n	80057a6 <HAL_RNG_Init+0x72>
{
 8005738:	b538      	push	{r3, r4, r5, lr}
 800573a:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800573c:	7a43      	ldrb	r3, [r0, #9]
 800573e:	b1b3      	cbz	r3, 800576e <HAL_RNG_Init+0x3a>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005740:	2302      	movs	r3, #2
 8005742:	7263      	strb	r3, [r4, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8005744:	6822      	ldr	r2, [r4, #0]
 8005746:	6813      	ldr	r3, [r2, #0]
 8005748:	f023 0320 	bic.w	r3, r3, #32
 800574c:	6861      	ldr	r1, [r4, #4]
 800574e:	430b      	orrs	r3, r1
 8005750:	6013      	str	r3, [r2, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005752:	6822      	ldr	r2, [r4, #0]
 8005754:	6813      	ldr	r3, [r2, #0]
 8005756:	f043 0304 	orr.w	r3, r3, #4
 800575a:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005764:	d007      	beq.n	8005776 <HAL_RNG_Init+0x42>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8005766:	2304      	movs	r3, #4
 8005768:	7263      	strb	r3, [r4, #9]
    return HAL_ERROR;
 800576a:	2001      	movs	r0, #1
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 800576c:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 800576e:	7203      	strb	r3, [r0, #8]
    HAL_RNG_MspInit(hrng);
 8005770:	f006 fe66 	bl	800c440 <HAL_RNG_MspInit>
 8005774:	e7e4      	b.n	8005740 <HAL_RNG_Init+0xc>
  tickstart = HAL_GetTick();
 8005776:	f7fa ff91 	bl	800069c <HAL_GetTick>
 800577a:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f013 0f04 	tst.w	r3, #4
 8005784:	d00a      	beq.n	800579c <HAL_RNG_Init+0x68>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005786:	f7fa ff89 	bl	800069c <HAL_GetTick>
 800578a:	1b40      	subs	r0, r0, r5
 800578c:	2802      	cmp	r0, #2
 800578e:	d9f5      	bls.n	800577c <HAL_RNG_Init+0x48>
      hrng->State = HAL_RNG_STATE_ERROR;
 8005790:	2304      	movs	r3, #4
 8005792:	7263      	strb	r3, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005794:	2302      	movs	r3, #2
 8005796:	60e3      	str	r3, [r4, #12]
      return HAL_ERROR;
 8005798:	2001      	movs	r0, #1
 800579a:	e7e7      	b.n	800576c <HAL_RNG_Init+0x38>
  hrng->State = HAL_RNG_STATE_READY;
 800579c:	2301      	movs	r3, #1
 800579e:	7263      	strb	r3, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80057a0:	2000      	movs	r0, #0
 80057a2:	60e0      	str	r0, [r4, #12]
  return HAL_OK;
 80057a4:	e7e2      	b.n	800576c <HAL_RNG_Init+0x38>
    return HAL_ERROR;
 80057a6:	2001      	movs	r0, #1
}
 80057a8:	4770      	bx	lr

080057aa <HAL_RNG_GenerateRandomNumber>:
{
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 80057aa:	7a03      	ldrb	r3, [r0, #8]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d02b      	beq.n	8005808 <HAL_RNG_GenerateRandomNumber+0x5e>
{
 80057b0:	b570      	push	{r4, r5, r6, lr}
 80057b2:	460d      	mov	r5, r1
 80057b4:	4604      	mov	r4, r0
  __HAL_LOCK(hrng);
 80057b6:	2301      	movs	r3, #1
 80057b8:	7203      	strb	r3, [r0, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80057ba:	7a43      	ldrb	r3, [r0, #9]
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d005      	beq.n	80057ce <HAL_RNG_GenerateRandomNumber+0x24>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80057c2:	2304      	movs	r3, #4
 80057c4:	60c3      	str	r3, [r0, #12]
    status = HAL_ERROR;
 80057c6:	2001      	movs	r0, #1
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80057c8:	2300      	movs	r3, #0
 80057ca:	7223      	strb	r3, [r4, #8]

  return status;
}
 80057cc:	bd70      	pop	{r4, r5, r6, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 80057ce:	2302      	movs	r3, #2
 80057d0:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 80057d2:	f7fa ff63 	bl	800069c <HAL_GetTick>
 80057d6:	4606      	mov	r6, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	f012 0f01 	tst.w	r2, #1
 80057e0:	d10b      	bne.n	80057fa <HAL_RNG_GenerateRandomNumber+0x50>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80057e2:	f7fa ff5b 	bl	800069c <HAL_GetTick>
 80057e6:	1b80      	subs	r0, r0, r6
 80057e8:	2802      	cmp	r0, #2
 80057ea:	d9f5      	bls.n	80057d8 <HAL_RNG_GenerateRandomNumber+0x2e>
        hrng->State = HAL_RNG_STATE_READY;
 80057ec:	2001      	movs	r0, #1
 80057ee:	7260      	strb	r0, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80057f0:	2302      	movs	r3, #2
 80057f2:	60e3      	str	r3, [r4, #12]
        __HAL_UNLOCK(hrng);
 80057f4:	2300      	movs	r3, #0
 80057f6:	7223      	strb	r3, [r4, #8]
        return HAL_ERROR;
 80057f8:	e7e8      	b.n	80057cc <HAL_RNG_GenerateRandomNumber+0x22>
    hrng->RandomNumber = hrng->Instance->DR;
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 80057fe:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
 8005800:	2301      	movs	r3, #1
 8005802:	7263      	strb	r3, [r4, #9]
  HAL_StatusTypeDef status = HAL_OK;
 8005804:	2000      	movs	r0, #0
 8005806:	e7df      	b.n	80057c8 <HAL_RNG_GenerateRandomNumber+0x1e>
  __HAL_LOCK(hrng);
 8005808:	2002      	movs	r0, #2
}
 800580a:	4770      	bx	lr

0800580c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800580c:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800580e:	2400      	movs	r4, #0
 8005810:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005812:	64c4      	str	r4, [r0, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005814:	6845      	ldr	r5, [r0, #4]
 8005816:	2d02      	cmp	r5, #2
 8005818:	bf14      	ite	ne
 800581a:	2400      	movne	r4, #0
 800581c:	2401      	moveq	r4, #1
 800581e:	2d00      	cmp	r5, #0
 8005820:	bf08      	it	eq
 8005822:	2401      	moveq	r4, #1
 8005824:	b1c4      	cbz	r4, 8005858 <SAI_InitI2S+0x4c>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005826:	2400      	movs	r4, #0
 8005828:	6504      	str	r4, [r0, #80]	; 0x50
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800582a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800582e:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005830:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8005834:	6744      	str	r4, [r0, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8005836:	2400      	movs	r4, #0
 8005838:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800583a:	6703      	str	r3, [r0, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800583c:	f013 0f01 	tst.w	r3, #1
 8005840:	d14b      	bne.n	80058da <SAI_InitI2S+0xce>
  {
    return HAL_ERROR;
  }

  if (protocol == SAI_I2S_STANDARD)
 8005842:	b961      	cbnz	r1, 800585e <SAI_InitI2S+0x52>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005844:	6604      	str	r4, [r0, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8005846:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800584a:	6644      	str	r4, [r0, #100]	; 0x64
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
  }

  /* Frame definition */
  switch (datasize)
 800584c:	2a03      	cmp	r2, #3
 800584e:	d83f      	bhi.n	80058d0 <SAI_InitI2S+0xc4>
 8005850:	e8df f002 	tbb	[pc, r2]
 8005854:	33281e0b 	.word	0x33281e0b
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005858:	2401      	movs	r4, #1
 800585a:	6504      	str	r4, [r0, #80]	; 0x50
 800585c:	e7e5      	b.n	800582a <SAI_InitI2S+0x1e>
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800585e:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 8005862:	6604      	str	r4, [r0, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8005864:	2400      	movs	r4, #0
 8005866:	6644      	str	r4, [r0, #100]	; 0x64
 8005868:	e7f0      	b.n	800584c <SAI_InitI2S+0x40>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800586a:	2480      	movs	r4, #128	; 0x80
 800586c:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800586e:	085b      	lsrs	r3, r3, #1
 8005870:	015c      	lsls	r4, r3, #5
 8005872:	6544      	str	r4, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005878:	2340      	movs	r3, #64	; 0x40
 800587a:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 800587c:	2300      	movs	r3, #0
      break;
    default :
      status = HAL_ERROR;
      break;
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800587e:	2902      	cmp	r1, #2
 8005880:	d12c      	bne.n	80058dc <SAI_InitI2S+0xd0>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8005882:	2a01      	cmp	r2, #1
 8005884:	d026      	beq.n	80058d4 <SAI_InitI2S+0xc8>
    {
      hsai->SlotInit.FirstBitOffset = 16;
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8005886:	2a02      	cmp	r2, #2
 8005888:	d128      	bne.n	80058dc <SAI_InitI2S+0xd0>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800588a:	2208      	movs	r2, #8
 800588c:	6682      	str	r2, [r0, #104]	; 0x68
 800588e:	e025      	b.n	80058dc <SAI_InitI2S+0xd0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005890:	2480      	movs	r4, #128	; 0x80
 8005892:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005894:	085b      	lsrs	r3, r3, #1
 8005896:	019d      	lsls	r5, r3, #6
 8005898:	6545      	str	r5, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800589a:	015b      	lsls	r3, r3, #5
 800589c:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800589e:	66c4      	str	r4, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 80058a0:	2300      	movs	r3, #0
      break;
 80058a2:	e7ec      	b.n	800587e <SAI_InitI2S+0x72>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80058a4:	24c0      	movs	r4, #192	; 0xc0
 80058a6:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80058a8:	085b      	lsrs	r3, r3, #1
 80058aa:	019c      	lsls	r4, r3, #6
 80058ac:	6544      	str	r4, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80058ae:	015b      	lsls	r3, r3, #5
 80058b0:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80058b2:	2380      	movs	r3, #128	; 0x80
 80058b4:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 80058b6:	2300      	movs	r3, #0
      break;
 80058b8:	e7e1      	b.n	800587e <SAI_InitI2S+0x72>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80058ba:	24e0      	movs	r4, #224	; 0xe0
 80058bc:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80058be:	085b      	lsrs	r3, r3, #1
 80058c0:	019c      	lsls	r4, r3, #6
 80058c2:	6544      	str	r4, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80058c4:	015b      	lsls	r3, r3, #5
 80058c6:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80058c8:	2380      	movs	r3, #128	; 0x80
 80058ca:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 80058cc:	2300      	movs	r3, #0
      break;
 80058ce:	e7d6      	b.n	800587e <SAI_InitI2S+0x72>
      status = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e7d4      	b.n	800587e <SAI_InitI2S+0x72>
      hsai->SlotInit.FirstBitOffset = 16;
 80058d4:	2110      	movs	r1, #16
 80058d6:	6681      	str	r1, [r0, #104]	; 0x68
 80058d8:	e7d5      	b.n	8005886 <SAI_InitI2S+0x7a>
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
    }
  }
  return status;
}
 80058dc:	4618      	mov	r0, r3
 80058de:	bc30      	pop	{r4, r5}
 80058e0:	4770      	bx	lr

080058e2 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80058e2:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80058e4:	2400      	movs	r4, #0
 80058e6:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80058e8:	64c4      	str	r4, [r0, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80058ea:	6845      	ldr	r5, [r0, #4]
 80058ec:	2d02      	cmp	r5, #2
 80058ee:	bf14      	ite	ne
 80058f0:	2400      	movne	r4, #0
 80058f2:	2401      	moveq	r4, #1
 80058f4:	2d00      	cmp	r5, #0
 80058f6:	bf08      	it	eq
 80058f8:	2401      	moveq	r4, #1
 80058fa:	b1c4      	cbz	r4, 800592e <SAI_InitPCM+0x4c>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80058fc:	2401      	movs	r4, #1
 80058fe:	6504      	str	r4, [r0, #80]	; 0x50
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8005900:	2400      	movs	r4, #0
 8005902:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8005904:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8005908:	6605      	str	r5, [r0, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800590a:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 800590e:	6645      	str	r5, [r0, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8005910:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8005912:	6703      	str	r3, [r0, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005914:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8005918:	6744      	str	r4, [r0, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800591a:	2904      	cmp	r1, #4
 800591c:	d00a      	beq.n	8005934 <SAI_InitPCM+0x52>
      hsai->FrameInit.ActiveFrameLength = 1;
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800591e:	210d      	movs	r1, #13
 8005920:	6581      	str	r1, [r0, #88]	; 0x58
  }

  switch (datasize)
 8005922:	2a03      	cmp	r2, #3
 8005924:	d829      	bhi.n	800597a <SAI_InitPCM+0x98>
 8005926:	e8df f002 	tbb	[pc, r2]
 800592a:	1108      	.short	0x1108
 800592c:	2018      	.short	0x2018
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800592e:	2400      	movs	r4, #0
 8005930:	6504      	str	r4, [r0, #80]	; 0x50
 8005932:	e7e5      	b.n	8005900 <SAI_InitPCM+0x1e>
      hsai->FrameInit.ActiveFrameLength = 1;
 8005934:	2101      	movs	r1, #1
 8005936:	6581      	str	r1, [r0, #88]	; 0x58
 8005938:	e7f3      	b.n	8005922 <SAI_InitPCM+0x40>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800593a:	2280      	movs	r2, #128	; 0x80
 800593c:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800593e:	011b      	lsls	r3, r3, #4
 8005940:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005942:	2340      	movs	r3, #64	; 0x40
 8005944:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8005946:	2000      	movs	r0, #0
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8005948:	bc30      	pop	{r4, r5}
 800594a:	4770      	bx	lr
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800594c:	2280      	movs	r2, #128	; 0x80
 800594e:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005950:	015b      	lsls	r3, r3, #5
 8005952:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005954:	66c2      	str	r2, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8005956:	2000      	movs	r0, #0
      break;
 8005958:	e7f6      	b.n	8005948 <SAI_InitPCM+0x66>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800595a:	22c0      	movs	r2, #192	; 0xc0
 800595c:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800595e:	015b      	lsls	r3, r3, #5
 8005960:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005962:	2380      	movs	r3, #128	; 0x80
 8005964:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8005966:	2000      	movs	r0, #0
      break;
 8005968:	e7ee      	b.n	8005948 <SAI_InitPCM+0x66>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800596a:	22e0      	movs	r2, #224	; 0xe0
 800596c:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800596e:	015b      	lsls	r3, r3, #5
 8005970:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005972:	2380      	movs	r3, #128	; 0x80
 8005974:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8005976:	2000      	movs	r0, #0
      break;
 8005978:	e7e6      	b.n	8005948 <SAI_InitPCM+0x66>
      status = HAL_ERROR;
 800597a:	2001      	movs	r0, #1
 800597c:	e7e4      	b.n	8005948 <SAI_InitPCM+0x66>

0800597e <SAI_InterruptFlag>:
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if (mode == SAI_MODE_IT)
 800597e:	2901      	cmp	r1, #1
 8005980:	d00a      	beq.n	8005998 <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8005982:	2301      	movs	r3, #1
  {
    tmpIT |= SAI_IT_FREQ;
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005984:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005986:	2a08      	cmp	r2, #8
 8005988:	d008      	beq.n	800599c <SAI_InterruptFlag+0x1e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT |= SAI_IT_CNRDY;
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800598a:	6842      	ldr	r2, [r0, #4]
 800598c:	3a02      	subs	r2, #2
 800598e:	2a01      	cmp	r2, #1
 8005990:	d90c      	bls.n	80059ac <SAI_InterruptFlag+0x2e>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8005992:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 8005996:	4770      	bx	lr
    tmpIT |= SAI_IT_FREQ;
 8005998:	2309      	movs	r3, #9
 800599a:	e7f3      	b.n	8005984 <SAI_InterruptFlag+0x6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800599c:	6842      	ldr	r2, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800599e:	2a01      	cmp	r2, #1
 80059a0:	bf18      	it	ne
 80059a2:	2a03      	cmpne	r2, #3
 80059a4:	d1f1      	bne.n	800598a <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_CNRDY;
 80059a6:	f043 0310 	orr.w	r3, r3, #16
 80059aa:	e7ee      	b.n	800598a <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80059ac:	f043 0060 	orr.w	r0, r3, #96	; 0x60
 80059b0:	4770      	bx	lr
	...

080059b4 <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80059b4:	4b0e      	ldr	r3, [pc, #56]	; (80059f0 <SAI_Disable+0x3c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a0e      	ldr	r2, [pc, #56]	; (80059f4 <SAI_Disable+0x40>)
 80059ba:	fba2 2303 	umull	r2, r3, r2, r3
 80059be:	0b1b      	lsrs	r3, r3, #12
 80059c0:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80059c2:	6801      	ldr	r1, [r0, #0]
 80059c4:	680a      	ldr	r2, [r1, #0]
 80059c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80059ca:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80059cc:	b13b      	cbz	r3, 80059de <SAI_Disable+0x2a>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
    count--;
 80059ce:	3b01      	subs	r3, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80059d0:	6802      	ldr	r2, [r0, #0]
 80059d2:	6812      	ldr	r2, [r2, #0]
 80059d4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80059d8:	d1f8      	bne.n	80059cc <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80059da:	2000      	movs	r0, #0

  return status;
}
 80059dc:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80059de:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 80059e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059e6:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      status = HAL_TIMEOUT;
 80059ea:	2003      	movs	r0, #3
      break;
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	20000010 	.word	0x20000010
 80059f4:	95cbec1b 	.word	0x95cbec1b

080059f8 <HAL_SAI_Init>:
{
 80059f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hsai == NULL)
 80059fc:	2800      	cmp	r0, #0
 80059fe:	f000 81cd 	beq.w	8005d9c <HAL_SAI_Init+0x3a4>
 8005a02:	4604      	mov	r4, r0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8005a04:	f7fa fe64 	bl	80006d0 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8005a08:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d025      	beq.n	8005a5c <HAL_SAI_Init+0x64>
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	49b1      	ldr	r1, [pc, #708]	; (8005cd8 <HAL_SAI_Init+0x2e0>)
 8005a14:	4ab1      	ldr	r2, [pc, #708]	; (8005cdc <HAL_SAI_Init+0x2e4>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	bf18      	it	ne
 8005a1a:	428b      	cmpne	r3, r1
 8005a1c:	d030      	beq.n	8005a80 <HAL_SAI_Init+0x88>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005a1e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a26:	4293      	cmp	r3, r2
 8005a28:	bf18      	it	ne
 8005a2a:	428b      	cmpne	r3, r1
 8005a2c:	d045      	beq.n	8005aba <HAL_SAI_Init+0xc2>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8005a2e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a36:	4293      	cmp	r3, r2
 8005a38:	bf18      	it	ne
 8005a3a:	428b      	cmpne	r3, r1
 8005a3c:	d03f      	beq.n	8005abe <HAL_SAI_Init+0xc6>
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8005a3e:	f101 51c0 	add.w	r1, r1, #402653184	; 0x18000000
 8005a42:	f5a1 3186 	sub.w	r1, r1, #68608	; 0x10c00
 8005a46:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8005a4a:	f5a2 3286 	sub.w	r2, r2, #68608	; 0x10c00
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	bf18      	it	ne
 8005a52:	428b      	cmpne	r3, r1
 8005a54:	f040 81a8 	bne.w	8005da8 <HAL_SAI_Init+0x3b0>
    SaiBaseAddress = SAI4;
 8005a58:	4ea1      	ldr	r6, [pc, #644]	; (8005ce0 <HAL_SAI_Init+0x2e8>)
 8005a5a:	e012      	b.n	8005a82 <HAL_SAI_Init+0x8a>
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	499e      	ldr	r1, [pc, #632]	; (8005cd8 <HAL_SAI_Init+0x2e0>)
 8005a60:	4aa0      	ldr	r2, [pc, #640]	; (8005ce4 <HAL_SAI_Init+0x2ec>)
 8005a62:	428b      	cmp	r3, r1
 8005a64:	bf18      	it	ne
 8005a66:	4293      	cmpne	r3, r2
 8005a68:	f040 819c 	bne.w	8005da4 <HAL_SAI_Init+0x3ac>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8005a6c:	6863      	ldr	r3, [r4, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d001      	beq.n	8005a76 <HAL_SAI_Init+0x7e>
      return HAL_ERROR;
 8005a72:	2501      	movs	r5, #1
 8005a74:	e193      	b.n	8005d9e <HAL_SAI_Init+0x3a6>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8005a76:	6c63      	ldr	r3, [r4, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0c9      	beq.n	8005a10 <HAL_SAI_Init+0x18>
      return HAL_ERROR;
 8005a7c:	2501      	movs	r5, #1
 8005a7e:	e18e      	b.n	8005d9e <HAL_SAI_Init+0x3a6>
    SaiBaseAddress = SAI1;
 8005a80:	4e99      	ldr	r6, [pc, #612]	; (8005ce8 <HAL_SAI_Init+0x2f0>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8005a82:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 8005a86:	b1e3      	cbz	r3, 8005ac2 <HAL_SAI_Init+0xca>
  if(SAI_Disable(hsai) != HAL_OK)
 8005a88:	4620      	mov	r0, r4
 8005a8a:	f7ff ff93 	bl	80059b4 <SAI_Disable>
 8005a8e:	4605      	mov	r5, r0
 8005a90:	2800      	cmp	r0, #0
 8005a92:	f040 818b 	bne.w	8005dac <HAL_SAI_Init+0x3b4>
  hsai->State = HAL_SAI_STATE_BUSY;
 8005a96:	2302      	movs	r3, #2
 8005a98:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 8005a9c:	68e3      	ldr	r3, [r4, #12]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d017      	beq.n	8005ad2 <HAL_SAI_Init+0xda>
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d013      	beq.n	8005ace <HAL_SAI_Init+0xd6>
      tmpregisterGCR = 0;
 8005aa6:	2200      	movs	r2, #0
  switch (hsai->Init.Synchro)
 8005aa8:	68a3      	ldr	r3, [r4, #8]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	2b04      	cmp	r3, #4
 8005aae:	d812      	bhi.n	8005ad6 <HAL_SAI_Init+0xde>
 8005ab0:	e8df f003 	tbb	[pc, r3]
 8005ab4:	1b161325 	.word	0x1b161325
 8005ab8:	20          	.byte	0x20
 8005ab9:	00          	.byte	0x00
    SaiBaseAddress = SAI2;
 8005aba:	4e8c      	ldr	r6, [pc, #560]	; (8005cec <HAL_SAI_Init+0x2f4>)
 8005abc:	e7e1      	b.n	8005a82 <HAL_SAI_Init+0x8a>
    SaiBaseAddress = SAI3;
 8005abe:	4e8c      	ldr	r6, [pc, #560]	; (8005cf0 <HAL_SAI_Init+0x2f8>)
 8005ac0:	e7df      	b.n	8005a82 <HAL_SAI_Init+0x8a>
    hsai->Lock = HAL_UNLOCKED;
 8005ac2:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	f006 fd10 	bl	800c4ec <HAL_SAI_MspInit>
 8005acc:	e7dc      	b.n	8005a88 <HAL_SAI_Init+0x90>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005ace:	2220      	movs	r2, #32
      break;
 8005ad0:	e7ea      	b.n	8005aa8 <HAL_SAI_Init+0xb0>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005ad2:	2210      	movs	r2, #16
 8005ad4:	e7e8      	b.n	8005aa8 <HAL_SAI_Init+0xb0>
      syncen_bits = 0;
 8005ad6:	2700      	movs	r7, #0
 8005ad8:	e013      	b.n	8005b02 <HAL_SAI_Init+0x10a>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005ada:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8005ade:	e010      	b.n	8005b02 <HAL_SAI_Init+0x10a>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005ae0:	f042 0201 	orr.w	r2, r2, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005ae4:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8005ae8:	e00b      	b.n	8005b02 <HAL_SAI_Init+0x10a>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8005aea:	f042 0202 	orr.w	r2, r2, #2
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005aee:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8005af2:	e006      	b.n	8005b02 <HAL_SAI_Init+0x10a>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8005af4:	f042 0203 	orr.w	r2, r2, #3
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005af8:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8005afc:	e001      	b.n	8005b02 <HAL_SAI_Init+0x10a>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005afe:	f44f 6780 	mov.w	r7, #1024	; 0x400
  SaiBaseAddress->GCR = tmpregisterGCR;
 8005b02:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005b04:	6a23      	ldr	r3, [r4, #32]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d043      	beq.n	8005b92 <HAL_SAI_Init+0x19a>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	4972      	ldr	r1, [pc, #456]	; (8005cd8 <HAL_SAI_Init+0x2e0>)
 8005b0e:	4a73      	ldr	r2, [pc, #460]	; (8005cdc <HAL_SAI_Init+0x2e4>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	bf18      	it	ne
 8005b14:	428b      	cmpne	r3, r1
 8005b16:	f000 80c5 	beq.w	8005ca4 <HAL_SAI_Init+0x2ac>
    uint32_t freq = 0;
 8005b1a:	2000      	movs	r0, #0
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	4975      	ldr	r1, [pc, #468]	; (8005cf4 <HAL_SAI_Init+0x2fc>)
 8005b20:	4a75      	ldr	r2, [pc, #468]	; (8005cf8 <HAL_SAI_Init+0x300>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	bf18      	it	ne
 8005b26:	428b      	cmpne	r3, r1
 8005b28:	f000 80c1 	beq.w	8005cae <HAL_SAI_Init+0x2b6>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	4973      	ldr	r1, [pc, #460]	; (8005cfc <HAL_SAI_Init+0x304>)
 8005b30:	4a73      	ldr	r2, [pc, #460]	; (8005d00 <HAL_SAI_Init+0x308>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	bf18      	it	ne
 8005b36:	428b      	cmpne	r3, r1
 8005b38:	f000 80be 	beq.w	8005cb8 <HAL_SAI_Init+0x2c0>
    if (hsai->Instance == SAI4_Block_A)
 8005b3c:	6822      	ldr	r2, [r4, #0]
 8005b3e:	4b69      	ldr	r3, [pc, #420]	; (8005ce4 <HAL_SAI_Init+0x2ec>)
 8005b40:	429a      	cmp	r2, r3
 8005b42:	f000 80be 	beq.w	8005cc2 <HAL_SAI_Init+0x2ca>
    if (hsai->Instance == SAI4_Block_B)
 8005b46:	6822      	ldr	r2, [r4, #0]
 8005b48:	4b6e      	ldr	r3, [pc, #440]	; (8005d04 <HAL_SAI_Init+0x30c>)
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	f000 80be 	beq.w	8005ccc <HAL_SAI_Init+0x2d4>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8005b50:	69a3      	ldr	r3, [r4, #24]
 8005b52:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b56:	f000 80df 	beq.w	8005d18 <HAL_SAI_Init+0x320>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8005b5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005b5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b60:	f000 80e4 	beq.w	8005d2c <HAL_SAI_Init+0x334>
 8005b64:	2301      	movs	r3, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8005b66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b6a:	0041      	lsls	r1, r0, #1
 8005b6c:	6a22      	ldr	r2, [r4, #32]
 8005b6e:	fb03 f302 	mul.w	r3, r3, r2
 8005b72:	021b      	lsls	r3, r3, #8
 8005b74:	fbb1 f1f3 	udiv	r1, r1, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 8005b78:	4b63      	ldr	r3, [pc, #396]	; (8005d08 <HAL_SAI_Init+0x310>)
 8005b7a:	fba3 2301 	umull	r2, r3, r3, r1
 8005b7e:	08db      	lsrs	r3, r3, #3
 8005b80:	6263      	str	r3, [r4, #36]	; 0x24
    if ((tmpval % 10U) > 8U)
 8005b82:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8005b86:	0042      	lsls	r2, r0, #1
 8005b88:	1a8a      	subs	r2, r1, r2
 8005b8a:	2a08      	cmp	r2, #8
 8005b8c:	d901      	bls.n	8005b92 <HAL_SAI_Init+0x19a>
      hsai->Init.Mckdiv += 1U;
 8005b8e:	3301      	adds	r3, #1
 8005b90:	6263      	str	r3, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005b92:	6862      	ldr	r2, [r4, #4]
 8005b94:	2a02      	cmp	r2, #2
 8005b96:	bf14      	ite	ne
 8005b98:	2300      	movne	r3, #0
 8005b9a:	2301      	moveq	r3, #1
 8005b9c:	2a00      	cmp	r2, #0
 8005b9e:	bf08      	it	eq
 8005ba0:	2301      	moveq	r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f000 80c7 	beq.w	8005d36 <HAL_SAI_Init+0x33e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005ba8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	f000 80c0 	beq.w	8005d30 <HAL_SAI_Init+0x338>
 8005bb0:	f44f 7800 	mov.w	r8, #512	; 0x200
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8005bb4:	f7fa fd8c 	bl	80006d0 <HAL_GetREVID>
 8005bb8:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8005bbc:	f0c0 80c4 	bcc.w	8005d48 <HAL_SAI_Init+0x350>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005bc0:	6822      	ldr	r2, [r4, #0]
 8005bc2:	6811      	ldr	r1, [r2, #0]
 8005bc4:	4b51      	ldr	r3, [pc, #324]	; (8005d0c <HAL_SAI_Init+0x314>)
 8005bc6:	400b      	ands	r3, r1
 8005bc8:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005bca:	6821      	ldr	r1, [r4, #0]
 8005bcc:	680a      	ldr	r2, [r1, #0]
 8005bce:	6863      	ldr	r3, [r4, #4]
 8005bd0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005bd2:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005bd4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005bd6:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005bd8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005bda:	4303      	orrs	r3, r0
 8005bdc:	ea43 0308 	orr.w	r3, r3, r8
                            ckstr_bits | syncen_bits |                             \
 8005be0:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005be2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8005be4:	4303      	orrs	r3, r0
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005be6:	6960      	ldr	r0, [r4, #20]
 8005be8:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005bea:	69a0      	ldr	r0, [r4, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005bec:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005bee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005bf0:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8005bf4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005bf6:	4303      	orrs	r3, r0
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8005bf8:	6920      	ldr	r0, [r4, #16]
 8005bfa:	4303      	orrs	r3, r0
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	600b      	str	r3, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005c00:	6822      	ldr	r2, [r4, #0]
 8005c02:	6851      	ldr	r1, [r2, #4]
 8005c04:	4b42      	ldr	r3, [pc, #264]	; (8005d10 <HAL_SAI_Init+0x318>)
 8005c06:	400b      	ands	r3, r1
 8005c08:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005c0a:	6821      	ldr	r1, [r4, #0]
 8005c0c:	684a      	ldr	r2, [r1, #4]
 8005c0e:	69e3      	ldr	r3, [r4, #28]
 8005c10:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005c12:	4303      	orrs	r3, r0
 8005c14:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005c16:	4303      	orrs	r3, r0
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005c1c:	6822      	ldr	r2, [r4, #0]
 8005c1e:	6891      	ldr	r1, [r2, #8]
 8005c20:	4b3c      	ldr	r3, [pc, #240]	; (8005d14 <HAL_SAI_Init+0x31c>)
 8005c22:	400b      	ands	r3, r1
 8005c24:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005c26:	6820      	ldr	r0, [r4, #0]
 8005c28:	6882      	ldr	r2, [r0, #8]
 8005c2a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005c2c:	3b01      	subs	r3, #1
                           hsai->FrameInit.FSOffset |
 8005c2e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005c30:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSDefinition |
 8005c32:	6de1      	ldr	r1, [r4, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8005c34:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSPolarity   |
 8005c36:	6e21      	ldr	r1, [r4, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8005c38:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005c3a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005c3c:	3901      	subs	r1, #1
                           hsai->FrameInit.FSPolarity   |
 8005c3e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005c42:	4313      	orrs	r3, r2
 8005c44:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005c46:	6822      	ldr	r2, [r4, #0]
 8005c48:	68d3      	ldr	r3, [r2, #12]
 8005c4a:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8005c4e:	f023 030f 	bic.w	r3, r3, #15
 8005c52:	041b      	lsls	r3, r3, #16
 8005c54:	0c1b      	lsrs	r3, r3, #16
 8005c56:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005c58:	6820      	ldr	r0, [r4, #0]
 8005c5a:	68c2      	ldr	r2, [r0, #12]
 8005c5c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005c5e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8005c60:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005c62:	6f61      	ldr	r1, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005c68:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8005c6a:	3901      	subs	r1, #1
 8005c6c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60c3      	str	r3, [r0, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8005c74:	6823      	ldr	r3, [r4, #0]
 8005c76:	4918      	ldr	r1, [pc, #96]	; (8005cd8 <HAL_SAI_Init+0x2e0>)
 8005c78:	4a1a      	ldr	r2, [pc, #104]	; (8005ce4 <HAL_SAI_Init+0x2ec>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	bf18      	it	ne
 8005c7e:	428b      	cmpne	r3, r1
 8005c80:	d107      	bne.n	8005c92 <HAL_SAI_Init+0x29a>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8005c82:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8005c84:	f023 0301 	bic.w	r3, r3, #1
 8005c88:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8005c8a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d079      	beq.n	8005d86 <HAL_SAI_Init+0x38e>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005c92:	2300      	movs	r3, #0
 8005c94:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  hsai->State = HAL_SAI_STATE_READY;
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 8005c9e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  return HAL_OK;
 8005ca2:	e07c      	b.n	8005d9e <HAL_SAI_Init+0x3a6>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005ca4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005ca8:	f7ff fb8c 	bl	80053c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005cac:	e736      	b.n	8005b1c <HAL_SAI_Init+0x124>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005cae:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005cb2:	f7ff fb87 	bl	80053c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005cb6:	e739      	b.n	8005b2c <HAL_SAI_Init+0x134>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8005cb8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005cbc:	f7ff fb82 	bl	80053c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005cc0:	e73c      	b.n	8005b3c <HAL_SAI_Init+0x144>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8005cc2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005cc6:	f7ff fb7d 	bl	80053c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005cca:	e73c      	b.n	8005b46 <HAL_SAI_Init+0x14e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8005ccc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005cd0:	f7ff fb78 	bl	80053c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005cd4:	e73c      	b.n	8005b50 <HAL_SAI_Init+0x158>
 8005cd6:	bf00      	nop
 8005cd8:	40015804 	.word	0x40015804
 8005cdc:	40015824 	.word	0x40015824
 8005ce0:	58005400 	.word	0x58005400
 8005ce4:	58005404 	.word	0x58005404
 8005ce8:	40015800 	.word	0x40015800
 8005cec:	40015c00 	.word	0x40015c00
 8005cf0:	40016000 	.word	0x40016000
 8005cf4:	40015c04 	.word	0x40015c04
 8005cf8:	40015c24 	.word	0x40015c24
 8005cfc:	40016004 	.word	0x40016004
 8005d00:	40016024 	.word	0x40016024
 8005d04:	58005424 	.word	0x58005424
 8005d08:	cccccccd 	.word	0xcccccccd
 8005d0c:	f005c010 	.word	0xf005c010
 8005d10:	ffff1ff0 	.word	0xffff1ff0
 8005d14:	fff88000 	.word	0xfff88000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * hsai->FrameInit.FrameLength);
 8005d18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d1c:	0041      	lsls	r1, r0, #1
 8005d1e:	6a22      	ldr	r2, [r4, #32]
 8005d20:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005d22:	fb03 f302 	mul.w	r3, r3, r2
 8005d26:	fbb1 f1f3 	udiv	r1, r1, r3
 8005d2a:	e725      	b.n	8005b78 <HAL_SAI_Init+0x180>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	e71a      	b.n	8005b66 <HAL_SAI_Init+0x16e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005d30:	f04f 0800 	mov.w	r8, #0
 8005d34:	e73e      	b.n	8005bb4 <HAL_SAI_Init+0x1bc>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005d36:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d002      	beq.n	8005d42 <HAL_SAI_Init+0x34a>
 8005d3c:	f04f 0800 	mov.w	r8, #0
 8005d40:	e738      	b.n	8005bb4 <HAL_SAI_Init+0x1bc>
 8005d42:	f44f 7800 	mov.w	r8, #512	; 0x200
 8005d46:	e735      	b.n	8005bb4 <HAL_SAI_Init+0x1bc>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005d48:	6822      	ldr	r2, [r4, #0]
 8005d4a:	6811      	ldr	r1, [r2, #0]
 8005d4c:	4b18      	ldr	r3, [pc, #96]	; (8005db0 <HAL_SAI_Init+0x3b8>)
 8005d4e:	400b      	ands	r3, r1
 8005d50:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005d52:	6821      	ldr	r1, [r4, #0]
 8005d54:	680a      	ldr	r2, [r1, #0]
 8005d56:	6863      	ldr	r3, [r4, #4]
 8005d58:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005d5a:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005d5c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005d5e:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005d60:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005d62:	4303      	orrs	r3, r0
 8005d64:	ea43 0308 	orr.w	r3, r3, r8
                            ckstr_bits | syncen_bits |                             \
 8005d68:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005d6a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8005d6c:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005d6e:	6967      	ldr	r7, [r4, #20]
 8005d70:	433b      	orrs	r3, r7
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005d72:	69a0      	ldr	r0, [r4, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005d74:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005d76:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005d78:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                            hsai->Init.MckOverSampling);
 8005d7c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005d7e:	4303      	orrs	r3, r0
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005d80:	4313      	orrs	r3, r2
 8005d82:	600b      	str	r3, [r1, #0]
 8005d84:	e73c      	b.n	8005c00 <HAL_SAI_Init+0x208>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8005d86:	6c23      	ldr	r3, [r4, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8005d88:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005d8a:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8005d8c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8005d90:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8005d92:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8005d94:	f043 0301 	orr.w	r3, r3, #1
 8005d98:	6473      	str	r3, [r6, #68]	; 0x44
 8005d9a:	e77a      	b.n	8005c92 <HAL_SAI_Init+0x29a>
    return HAL_ERROR;
 8005d9c:	2501      	movs	r5, #1
}
 8005d9e:	4628      	mov	r0, r5
 8005da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8005da4:	2501      	movs	r5, #1
 8005da6:	e7fa      	b.n	8005d9e <HAL_SAI_Init+0x3a6>
    return HAL_ERROR;
 8005da8:	2501      	movs	r5, #1
 8005daa:	e7f8      	b.n	8005d9e <HAL_SAI_Init+0x3a6>
    return HAL_ERROR;
 8005dac:	2501      	movs	r5, #1
 8005dae:	e7f6      	b.n	8005d9e <HAL_SAI_Init+0x3a6>
 8005db0:	f805c010 	.word	0xf805c010

08005db4 <HAL_SAI_InitProtocol>:
{
 8005db4:	b510      	push	{r4, lr}
 8005db6:	4604      	mov	r4, r0
  switch (protocol)
 8005db8:	2904      	cmp	r1, #4
 8005dba:	d811      	bhi.n	8005de0 <HAL_SAI_InitProtocol+0x2c>
 8005dbc:	e8df f001 	tbb	[pc, r1]
 8005dc0:	08030303 	.word	0x08030303
 8005dc4:	08          	.byte	0x08
 8005dc5:	00          	.byte	0x00
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f7ff fd20 	bl	800580c <SAI_InitI2S>
  if (status == HAL_OK)
 8005dcc:	b120      	cbz	r0, 8005dd8 <HAL_SAI_InitProtocol+0x24>
}
 8005dce:	bd10      	pop	{r4, pc}
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	f7ff fd86 	bl	80058e2 <SAI_InitPCM>
      break;
 8005dd6:	e7f9      	b.n	8005dcc <HAL_SAI_InitProtocol+0x18>
    status = HAL_SAI_Init(hsai);
 8005dd8:	4620      	mov	r0, r4
 8005dda:	f7ff fe0d 	bl	80059f8 <HAL_SAI_Init>
 8005dde:	e7f6      	b.n	8005dce <HAL_SAI_InitProtocol+0x1a>
      status = HAL_ERROR;
 8005de0:	2001      	movs	r0, #1
 8005de2:	e7f4      	b.n	8005dce <HAL_SAI_InitProtocol+0x1a>

08005de4 <HAL_SAI_Abort>:
{
 8005de4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
 8005de6:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d05d      	beq.n	8005eaa <HAL_SAI_Abort+0xc6>
 8005dee:	4604      	mov	r4, r0
 8005df0:	2301      	movs	r3, #1
 8005df2:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005df6:	6803      	ldr	r3, [r0, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005dfe:	d03a      	beq.n	8005e76 <HAL_SAI_Abort+0x92>
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005e06:	601a      	str	r2, [r3, #0]
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 8005e08:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b12      	cmp	r3, #18
 8005e10:	d018      	beq.n	8005e44 <HAL_SAI_Abort+0x60>
  HAL_StatusTypeDef status = HAL_OK;
 8005e12:	2500      	movs	r5, #0
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8005e14:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b22      	cmp	r3, #34	; 0x22
 8005e1c:	d12c      	bne.n	8005e78 <HAL_SAI_Abort+0x94>
 8005e1e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8005e22:	b348      	cbz	r0, 8005e78 <HAL_SAI_Abort+0x94>
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8005e24:	f7fc f89e 	bl	8001f64 <HAL_DMA_Abort>
 8005e28:	b330      	cbz	r0, 8005e78 <HAL_SAI_Abort+0x94>
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8005e2a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e30:	2b80      	cmp	r3, #128	; 0x80
 8005e32:	d021      	beq.n	8005e78 <HAL_SAI_Abort+0x94>
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005e34:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e3c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
          status = HAL_ERROR;
 8005e40:	2501      	movs	r5, #1
 8005e42:	e019      	b.n	8005e78 <HAL_SAI_Abort+0x94>
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 8005e44:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8005e48:	b188      	cbz	r0, 8005e6e <HAL_SAI_Abort+0x8a>
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8005e4a:	f7fc f88b 	bl	8001f64 <HAL_DMA_Abort>
 8005e4e:	4605      	mov	r5, r0
 8005e50:	2800      	cmp	r0, #0
 8005e52:	d0df      	beq.n	8005e14 <HAL_SAI_Abort+0x30>
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8005e54:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8005e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5a:	2b80      	cmp	r3, #128	; 0x80
 8005e5c:	d009      	beq.n	8005e72 <HAL_SAI_Abort+0x8e>
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005e5e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e66:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
          status = HAL_ERROR;
 8005e6a:	2501      	movs	r5, #1
 8005e6c:	e7d2      	b.n	8005e14 <HAL_SAI_Abort+0x30>
  HAL_StatusTypeDef status = HAL_OK;
 8005e6e:	2500      	movs	r5, #0
 8005e70:	e7d0      	b.n	8005e14 <HAL_SAI_Abort+0x30>
 8005e72:	2500      	movs	r5, #0
 8005e74:	e7ce      	b.n	8005e14 <HAL_SAI_Abort+0x30>
 8005e76:	2500      	movs	r5, #0
  hsai->Instance->IMR = 0;
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e84:	619a      	str	r2, [r3, #24]
  if (SAI_Disable(hsai) != HAL_OK)
 8005e86:	4620      	mov	r0, r4
 8005e88:	f7ff fd94 	bl	80059b4 <SAI_Disable>
 8005e8c:	b100      	cbz	r0, 8005e90 <HAL_SAI_Abort+0xac>
    status = HAL_ERROR;
 8005e8e:	2501      	movs	r5, #1
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005e90:	6822      	ldr	r2, [r4, #0]
 8005e92:	6853      	ldr	r3, [r2, #4]
 8005e94:	f043 0308 	orr.w	r3, r3, #8
 8005e98:	6053      	str	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hsai);
 8005eaa:	2502      	movs	r5, #2
 8005eac:	e7fb      	b.n	8005ea6 <HAL_SAI_Abort+0xc2>
	...

08005eb0 <HAL_SAI_Transmit_DMA>:
{
 8005eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	460e      	mov	r6, r1
 8005eb6:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8005eb8:	f7fa fbf0 	bl	800069c <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 8005ebc:	fab5 f385 	clz	r3, r5
 8005ec0:	095b      	lsrs	r3, r3, #5
 8005ec2:	2e00      	cmp	r6, #0
 8005ec4:	bf08      	it	eq
 8005ec6:	2301      	moveq	r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d165      	bne.n	8005f98 <HAL_SAI_Transmit_DMA+0xe8>
 8005ecc:	4607      	mov	r7, r0
  if (hsai->State == HAL_SAI_STATE_READY)
 8005ece:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d162      	bne.n	8005f9e <HAL_SAI_Transmit_DMA+0xee>
    __HAL_LOCK(hsai);
 8005ed8:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d060      	beq.n	8005fa2 <HAL_SAI_Transmit_DMA+0xf2>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    hsai->pBuffPtr = pData;
 8005ee6:	67a6      	str	r6, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 8005ee8:	f8a4 507c 	strh.w	r5, [r4, #124]	; 0x7c
    hsai->XferCount = Size;
 8005eec:	f8a4 507e 	strh.w	r5, [r4, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005ef6:	2212      	movs	r2, #18
 8005ef8:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8005efc:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005f00:	4929      	ldr	r1, [pc, #164]	; (8005fa8 <HAL_SAI_Transmit_DMA+0xf8>)
 8005f02:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005f04:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005f08:	4928      	ldr	r1, [pc, #160]	; (8005fac <HAL_SAI_Transmit_DMA+0xfc>)
 8005f0a:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8005f0c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005f10:	4927      	ldr	r1, [pc, #156]	; (8005fb0 <HAL_SAI_Transmit_DMA+0x100>)
 8005f12:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 8005f14:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005f18:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8005f1a:	6822      	ldr	r2, [r4, #0]
 8005f1c:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8005f20:	321c      	adds	r2, #28
 8005f22:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8005f24:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005f28:	f7fb fed0 	bl	8001ccc <HAL_DMA_Start_IT>
 8005f2c:	4605      	mov	r5, r0
 8005f2e:	bb10      	cbnz	r0, 8005f76 <HAL_SAI_Transmit_DMA+0xc6>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005f30:	2100      	movs	r1, #0
 8005f32:	4620      	mov	r0, r4
 8005f34:	f7ff fd23 	bl	800597e <SAI_InterruptFlag>
 8005f38:	6822      	ldr	r2, [r4, #0]
 8005f3a:	6913      	ldr	r3, [r2, #16]
 8005f3c:	4318      	orrs	r0, r3
 8005f3e:	6110      	str	r0, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005f40:	6822      	ldr	r2, [r4, #0]
 8005f42:	6813      	ldr	r3, [r2, #0]
 8005f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f48:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005f4a:	6823      	ldr	r3, [r4, #0]
 8005f4c:	695a      	ldr	r2, [r3, #20]
 8005f4e:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
 8005f52:	d115      	bne.n	8005f80 <HAL_SAI_Transmit_DMA+0xd0>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8005f54:	f7fa fba2 	bl	800069c <HAL_GetTick>
 8005f58:	1bc0      	subs	r0, r0, r7
 8005f5a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005f5e:	d9f4      	bls.n	8005f4a <HAL_SAI_Transmit_DMA+0x9a>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005f60:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f68:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        __HAL_UNLOCK(hsai);
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        return HAL_TIMEOUT;
 8005f72:	2503      	movs	r5, #3
 8005f74:	e011      	b.n	8005f9a <HAL_SAI_Transmit_DMA+0xea>
      __HAL_UNLOCK(hsai);
 8005f76:	2300      	movs	r3, #0
 8005f78:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      return  HAL_ERROR;
 8005f7c:	2501      	movs	r5, #1
 8005f7e:	e00c      	b.n	8005f9a <HAL_SAI_Transmit_DMA+0xea>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8005f86:	d103      	bne.n	8005f90 <HAL_SAI_Transmit_DMA+0xe0>
      __HAL_SAI_ENABLE(hsai);
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005f8e:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8005f90:	2300      	movs	r3, #0
 8005f92:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 8005f96:	e000      	b.n	8005f9a <HAL_SAI_Transmit_DMA+0xea>
    return  HAL_ERROR;
 8005f98:	2501      	movs	r5, #1
}
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8005f9e:	2502      	movs	r5, #2
 8005fa0:	e7fb      	b.n	8005f9a <HAL_SAI_Transmit_DMA+0xea>
    __HAL_LOCK(hsai);
 8005fa2:	2502      	movs	r5, #2
 8005fa4:	e7f9      	b.n	8005f9a <HAL_SAI_Transmit_DMA+0xea>
 8005fa6:	bf00      	nop
 8005fa8:	080060c7 	.word	0x080060c7
 8005fac:	0800608b 	.word	0x0800608b
 8005fb0:	08006115 	.word	0x08006115

08005fb4 <HAL_SAI_Receive_DMA>:
{
 8005fb4:	b538      	push	{r3, r4, r5, lr}
  if ((pData == NULL) || (Size == 0U))
 8005fb6:	4614      	mov	r4, r2
 8005fb8:	fab2 f282 	clz	r2, r2
 8005fbc:	0952      	lsrs	r2, r2, #5
 8005fbe:	2900      	cmp	r1, #0
 8005fc0:	bf08      	it	eq
 8005fc2:	2201      	moveq	r2, #1
 8005fc4:	2a00      	cmp	r2, #0
 8005fc6:	d151      	bne.n	800606c <HAL_SAI_Receive_DMA+0xb8>
  if (hsai->State == HAL_SAI_STATE_READY)
 8005fc8:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d14f      	bne.n	8006072 <HAL_SAI_Receive_DMA+0xbe>
    __HAL_LOCK(hsai);
 8005fd2:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d04d      	beq.n	8006076 <HAL_SAI_Receive_DMA+0xc2>
 8005fda:	4623      	mov	r3, r4
 8005fdc:	4604      	mov	r4, r0
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f880 2090 	strb.w	r2, [r0, #144]	; 0x90
    hsai->pBuffPtr = pData;
 8005fe4:	67a1      	str	r1, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 8005fe6:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
    hsai->XferCount = Size;
 8005fea:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8005ff4:	2222      	movs	r2, #34	; 0x22
 8005ff6:	f880 2091 	strb.w	r2, [r0, #145]	; 0x91
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8005ffa:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8005ffe:	491f      	ldr	r1, [pc, #124]	; (800607c <HAL_SAI_Receive_DMA+0xc8>)
 8006000:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8006002:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006006:	491e      	ldr	r1, [pc, #120]	; (8006080 <HAL_SAI_Receive_DMA+0xcc>)
 8006008:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800600a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800600e:	491d      	ldr	r1, [pc, #116]	; (8006084 <HAL_SAI_Receive_DMA+0xd0>)
 8006010:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 8006012:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006016:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8006018:	6801      	ldr	r1, [r0, #0]
 800601a:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 800601e:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8006020:	311c      	adds	r1, #28
 8006022:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 8006026:	f7fb fe51 	bl	8001ccc <HAL_DMA_Start_IT>
 800602a:	4605      	mov	r5, r0
 800602c:	b9c8      	cbnz	r0, 8006062 <HAL_SAI_Receive_DMA+0xae>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800602e:	2100      	movs	r1, #0
 8006030:	4620      	mov	r0, r4
 8006032:	f7ff fca4 	bl	800597e <SAI_InterruptFlag>
 8006036:	6822      	ldr	r2, [r4, #0]
 8006038:	6913      	ldr	r3, [r2, #16]
 800603a:	4318      	orrs	r0, r3
 800603c:	6110      	str	r0, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800603e:	6822      	ldr	r2, [r4, #0]
 8006040:	6813      	ldr	r3, [r2, #0]
 8006042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006046:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8006048:	6823      	ldr	r3, [r4, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8006050:	d103      	bne.n	800605a <HAL_SAI_Receive_DMA+0xa6>
      __HAL_SAI_ENABLE(hsai);
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006058:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 800605a:	2300      	movs	r3, #0
 800605c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 8006060:	e005      	b.n	800606e <HAL_SAI_Receive_DMA+0xba>
      __HAL_UNLOCK(hsai);
 8006062:	2300      	movs	r3, #0
 8006064:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      return  HAL_ERROR;
 8006068:	2501      	movs	r5, #1
 800606a:	e000      	b.n	800606e <HAL_SAI_Receive_DMA+0xba>
    return  HAL_ERROR;
 800606c:	2501      	movs	r5, #1
}
 800606e:	4628      	mov	r0, r5
 8006070:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8006072:	2502      	movs	r5, #2
 8006074:	e7fb      	b.n	800606e <HAL_SAI_Receive_DMA+0xba>
    __HAL_LOCK(hsai);
 8006076:	2502      	movs	r5, #2
 8006078:	e7f9      	b.n	800606e <HAL_SAI_Receive_DMA+0xba>
 800607a:	bf00      	nop
 800607c:	0800610b 	.word	0x0800610b
 8006080:	080060d1 	.word	0x080060d1
 8006084:	08006115 	.word	0x08006115

08006088 <HAL_SAI_TxCpltCallback>:
}
 8006088:	4770      	bx	lr

0800608a <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800608a:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800608c:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800608e:	69c3      	ldr	r3, [r0, #28]
 8006090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006094:	d012      	beq.n	80060bc <SAI_DMATxCplt+0x32>
  {
    hsai->XferCount = 0;
 8006096:	2100      	movs	r1, #0
 8006098:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800609c:	6822      	ldr	r2, [r4, #0]
 800609e:	6813      	ldr	r3, [r2, #0]
 80060a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80060a4:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80060a6:	4620      	mov	r0, r4
 80060a8:	f7ff fc69 	bl	800597e <SAI_InterruptFlag>
 80060ac:	6822      	ldr	r2, [r4, #0]
 80060ae:	6913      	ldr	r3, [r2, #16]
 80060b0:	ea23 0000 	bic.w	r0, r3, r0
 80060b4:	6110      	str	r0, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80060b6:	2301      	movs	r3, #1
 80060b8:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80060bc:	4620      	mov	r0, r4
 80060be:	f7ff ffe3 	bl	8006088 <HAL_SAI_TxCpltCallback>
#endif
}
 80060c2:	bd10      	pop	{r4, pc}

080060c4 <HAL_SAI_TxHalfCpltCallback>:
}
 80060c4:	4770      	bx	lr

080060c6 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80060c6:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80060c8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80060ca:	f7ff fffb 	bl	80060c4 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 80060ce:	bd08      	pop	{r3, pc}

080060d0 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80060d0:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060d2:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80060d4:	69c3      	ldr	r3, [r0, #28]
 80060d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060da:	d012      	beq.n	8006102 <SAI_DMARxCplt+0x32>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80060dc:	6822      	ldr	r2, [r4, #0]
 80060de:	6813      	ldr	r3, [r2, #0]
 80060e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80060e4:	6013      	str	r3, [r2, #0]
    hsai->XferCount = 0;
 80060e6:	2100      	movs	r1, #0
 80060e8:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80060ec:	4620      	mov	r0, r4
 80060ee:	f7ff fc46 	bl	800597e <SAI_InterruptFlag>
 80060f2:	6822      	ldr	r2, [r4, #0]
 80060f4:	6913      	ldr	r3, [r2, #16]
 80060f6:	ea23 0000 	bic.w	r0, r3, r0
 80060fa:	6110      	str	r0, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80060fc:	2301      	movs	r3, #1
 80060fe:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8006102:	4620      	mov	r0, r4
 8006104:	f005 f9ed 	bl	800b4e2 <HAL_SAI_RxCpltCallback>
#endif
}
 8006108:	bd10      	pop	{r4, pc}

0800610a <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800610a:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800610c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800610e:	f005 f9ed 	bl	800b4ec <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8006112:	bd08      	pop	{r3, pc}

08006114 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006114:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006116:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006118:	f7fc fdaa 	bl	8002c70 <HAL_DMA_GetError>
 800611c:	2802      	cmp	r0, #2
 800611e:	d016      	beq.n	800614e <SAI_DMAError+0x3a>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006120:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006128:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800612c:	6822      	ldr	r2, [r4, #0]
 800612e:	6813      	ldr	r3, [r2, #0]
 8006130:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006134:	6013      	str	r3, [r2, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8006136:	4620      	mov	r0, r4
 8006138:	f7ff fc3c 	bl	80059b4 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800613c:	2301      	movs	r3, #1
 800613e:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8006142:	2300      	movs	r3, #0
 8006144:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8006148:	4620      	mov	r0, r4
 800614a:	f005 f9c9 	bl	800b4e0 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800614e:	bd10      	pop	{r4, pc}

08006150 <HAL_SAI_IRQHandler>:
  if (hsai->State != HAL_SAI_STATE_RESET)
 8006150:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 811c 	beq.w	8006392 <HAL_SAI_IRQHandler+0x242>
{
 800615a:	b510      	push	{r4, lr}
 800615c:	4604      	mov	r4, r0
    uint32_t itflags = hsai->Instance->SR;
 800615e:	6803      	ldr	r3, [r0, #0]
 8006160:	695a      	ldr	r2, [r3, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8006162:	6919      	ldr	r1, [r3, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8006164:	6818      	ldr	r0, [r3, #0]
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8006166:	f012 0f08 	tst.w	r2, #8
 800616a:	d007      	beq.n	800617c <HAL_SAI_IRQHandler+0x2c>
 800616c:	f011 0f08 	tst.w	r1, #8
 8006170:	d004      	beq.n	800617c <HAL_SAI_IRQHandler+0x2c>
      hsai->InterruptServiceRoutine(hsai);
 8006172:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006176:	4620      	mov	r0, r4
 8006178:	4798      	blx	r3
}
 800617a:	bd10      	pop	{r4, pc}
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800617c:	f012 0f01 	tst.w	r2, #1
 8006180:	d013      	beq.n	80061aa <HAL_SAI_IRQHandler+0x5a>
 8006182:	f011 0f01 	tst.w	r1, #1
 8006186:	d010      	beq.n	80061aa <HAL_SAI_IRQHandler+0x5a>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8006188:	2201      	movs	r2, #1
 800618a:	619a      	str	r2, [r3, #24]
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800618c:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b22      	cmp	r3, #34	; 0x22
 8006194:	d000      	beq.n	8006198 <HAL_SAI_IRQHandler+0x48>
 8006196:	2202      	movs	r2, #2
      hsai->ErrorCode |= tmperror;
 8006198:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800619c:	4313      	orrs	r3, r2
 800619e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      HAL_SAI_ErrorCallback(hsai);
 80061a2:	4620      	mov	r0, r4
 80061a4:	f005 f99c 	bl	800b4e0 <HAL_SAI_ErrorCallback>
 80061a8:	e7e7      	b.n	800617a <HAL_SAI_IRQHandler+0x2a>
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 80061aa:	f012 0f02 	tst.w	r2, #2
 80061ae:	d00a      	beq.n	80061c6 <HAL_SAI_IRQHandler+0x76>
 80061b0:	f011 0f02 	tst.w	r1, #2
 80061b4:	d007      	beq.n	80061c6 <HAL_SAI_IRQHandler+0x76>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 80061b6:	2202      	movs	r2, #2
 80061b8:	619a      	str	r2, [r3, #24]
      if (hsai->mutecallback != NULL)
 80061ba:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d0db      	beq.n	800617a <HAL_SAI_IRQHandler+0x2a>
        hsai->mutecallback();
 80061c2:	4798      	blx	r3
 80061c4:	e7d9      	b.n	800617a <HAL_SAI_IRQHandler+0x2a>
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 80061c6:	f012 0f20 	tst.w	r2, #32
 80061ca:	d03e      	beq.n	800624a <HAL_SAI_IRQHandler+0xfa>
 80061cc:	f011 0f20 	tst.w	r1, #32
 80061d0:	d03b      	beq.n	800624a <HAL_SAI_IRQHandler+0xfa>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 80061d2:	2220      	movs	r2, #32
 80061d4:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 80061d6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80061da:	f043 0304 	orr.w	r3, r3, #4
 80061de:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80061e2:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 80061e6:	d029      	beq.n	800623c <HAL_SAI_IRQHandler+0xec>
        if (hsai->hdmatx != NULL)
 80061e8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80061ec:	b133      	cbz	r3, 80061fc <HAL_SAI_IRQHandler+0xac>
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80061ee:	4a69      	ldr	r2, [pc, #420]	; (8006394 <HAL_SAI_IRQHandler+0x244>)
 80061f0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80061f2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80061f6:	f7fc f855 	bl	80022a4 <HAL_DMA_Abort_IT>
 80061fa:	b9a8      	cbnz	r0, 8006228 <HAL_SAI_IRQHandler+0xd8>
        if (hsai->hdmarx != NULL)
 80061fc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006200:	2b00      	cmp	r3, #0
 8006202:	d0ba      	beq.n	800617a <HAL_SAI_IRQHandler+0x2a>
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8006204:	4a63      	ldr	r2, [pc, #396]	; (8006394 <HAL_SAI_IRQHandler+0x244>)
 8006206:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8006208:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800620c:	f7fc f84a 	bl	80022a4 <HAL_DMA_Abort_IT>
 8006210:	2800      	cmp	r0, #0
 8006212:	d0b2      	beq.n	800617a <HAL_SAI_IRQHandler+0x2a>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006214:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800621c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 8006220:	4620      	mov	r0, r4
 8006222:	f005 f95d 	bl	800b4e0 <HAL_SAI_ErrorCallback>
 8006226:	e7a8      	b.n	800617a <HAL_SAI_IRQHandler+0x2a>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006228:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800622c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006230:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 8006234:	4620      	mov	r0, r4
 8006236:	f005 f953 	bl	800b4e0 <HAL_SAI_ErrorCallback>
 800623a:	e7df      	b.n	80061fc <HAL_SAI_IRQHandler+0xac>
        (void) HAL_SAI_Abort(hsai);
 800623c:	4620      	mov	r0, r4
 800623e:	f7ff fdd1 	bl	8005de4 <HAL_SAI_Abort>
        HAL_SAI_ErrorCallback(hsai);
 8006242:	4620      	mov	r0, r4
 8006244:	f005 f94c 	bl	800b4e0 <HAL_SAI_ErrorCallback>
 8006248:	e797      	b.n	800617a <HAL_SAI_IRQHandler+0x2a>
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 800624a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800624e:	d040      	beq.n	80062d2 <HAL_SAI_IRQHandler+0x182>
 8006250:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006254:	d03d      	beq.n	80062d2 <HAL_SAI_IRQHandler+0x182>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8006256:	2240      	movs	r2, #64	; 0x40
 8006258:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800625a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800625e:	f043 0308 	orr.w	r3, r3, #8
 8006262:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006266:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 800626a:	d02b      	beq.n	80062c4 <HAL_SAI_IRQHandler+0x174>
        if (hsai->hdmatx != NULL)
 800626c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8006270:	b133      	cbz	r3, 8006280 <HAL_SAI_IRQHandler+0x130>
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8006272:	4a48      	ldr	r2, [pc, #288]	; (8006394 <HAL_SAI_IRQHandler+0x244>)
 8006274:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8006276:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800627a:	f7fc f813 	bl	80022a4 <HAL_DMA_Abort_IT>
 800627e:	b9b8      	cbnz	r0, 80062b0 <HAL_SAI_IRQHandler+0x160>
        if (hsai->hdmarx != NULL)
 8006280:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006284:	2b00      	cmp	r3, #0
 8006286:	f43f af78 	beq.w	800617a <HAL_SAI_IRQHandler+0x2a>
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800628a:	4a42      	ldr	r2, [pc, #264]	; (8006394 <HAL_SAI_IRQHandler+0x244>)
 800628c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800628e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8006292:	f7fc f807 	bl	80022a4 <HAL_DMA_Abort_IT>
 8006296:	2800      	cmp	r0, #0
 8006298:	f43f af6f 	beq.w	800617a <HAL_SAI_IRQHandler+0x2a>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800629c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80062a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 80062a8:	4620      	mov	r0, r4
 80062aa:	f005 f919 	bl	800b4e0 <HAL_SAI_ErrorCallback>
 80062ae:	e764      	b.n	800617a <HAL_SAI_IRQHandler+0x2a>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80062b0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80062b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062b8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 80062bc:	4620      	mov	r0, r4
 80062be:	f005 f90f 	bl	800b4e0 <HAL_SAI_ErrorCallback>
 80062c2:	e7dd      	b.n	8006280 <HAL_SAI_IRQHandler+0x130>
        (void) HAL_SAI_Abort(hsai);
 80062c4:	4620      	mov	r0, r4
 80062c6:	f7ff fd8d 	bl	8005de4 <HAL_SAI_Abort>
        HAL_SAI_ErrorCallback(hsai);
 80062ca:	4620      	mov	r0, r4
 80062cc:	f005 f908 	bl	800b4e0 <HAL_SAI_ErrorCallback>
 80062d0:	e753      	b.n	800617a <HAL_SAI_IRQHandler+0x2a>
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 80062d2:	f012 0f04 	tst.w	r2, #4
 80062d6:	d049      	beq.n	800636c <HAL_SAI_IRQHandler+0x21c>
 80062d8:	f011 0f04 	tst.w	r1, #4
 80062dc:	d046      	beq.n	800636c <HAL_SAI_IRQHandler+0x21c>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 80062de:	2204      	movs	r2, #4
 80062e0:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 80062e2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80062e6:	f043 0320 	orr.w	r3, r3, #32
 80062ea:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80062ee:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 80062f2:	d02b      	beq.n	800634c <HAL_SAI_IRQHandler+0x1fc>
        if (hsai->hdmatx != NULL)
 80062f4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80062f8:	b133      	cbz	r3, 8006308 <HAL_SAI_IRQHandler+0x1b8>
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80062fa:	4a26      	ldr	r2, [pc, #152]	; (8006394 <HAL_SAI_IRQHandler+0x244>)
 80062fc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80062fe:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006302:	f7fb ffcf 	bl	80022a4 <HAL_DMA_Abort_IT>
 8006306:	b9b8      	cbnz	r0, 8006338 <HAL_SAI_IRQHandler+0x1e8>
        if (hsai->hdmarx != NULL)
 8006308:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800630c:	2b00      	cmp	r3, #0
 800630e:	f43f af34 	beq.w	800617a <HAL_SAI_IRQHandler+0x2a>
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8006312:	4a20      	ldr	r2, [pc, #128]	; (8006394 <HAL_SAI_IRQHandler+0x244>)
 8006314:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8006316:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800631a:	f7fb ffc3 	bl	80022a4 <HAL_DMA_Abort_IT>
 800631e:	2800      	cmp	r0, #0
 8006320:	f43f af2b 	beq.w	800617a <HAL_SAI_IRQHandler+0x2a>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006324:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800632c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 8006330:	4620      	mov	r0, r4
 8006332:	f005 f8d5 	bl	800b4e0 <HAL_SAI_ErrorCallback>
 8006336:	e720      	b.n	800617a <HAL_SAI_IRQHandler+0x2a>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006338:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800633c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006340:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 8006344:	4620      	mov	r0, r4
 8006346:	f005 f8cb 	bl	800b4e0 <HAL_SAI_ErrorCallback>
 800634a:	e7dd      	b.n	8006308 <HAL_SAI_IRQHandler+0x1b8>
        hsai->Instance->IMR = 0U;
 800634c:	6822      	ldr	r2, [r4, #0]
 800634e:	2300      	movs	r3, #0
 8006350:	6113      	str	r3, [r2, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006352:	6822      	ldr	r2, [r4, #0]
 8006354:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006358:	6191      	str	r1, [r2, #24]
        hsai->State = HAL_SAI_STATE_READY;
 800635a:	2201      	movs	r2, #1
 800635c:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
        hsai->XferCount = 0U;
 8006360:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
        HAL_SAI_ErrorCallback(hsai);
 8006364:	4620      	mov	r0, r4
 8006366:	f005 f8bb 	bl	800b4e0 <HAL_SAI_ErrorCallback>
 800636a:	e706      	b.n	800617a <HAL_SAI_IRQHandler+0x2a>
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800636c:	f012 0f10 	tst.w	r2, #16
 8006370:	f43f af03 	beq.w	800617a <HAL_SAI_IRQHandler+0x2a>
 8006374:	f011 0f10 	tst.w	r1, #16
 8006378:	f43f aeff 	beq.w	800617a <HAL_SAI_IRQHandler+0x2a>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800637c:	2210      	movs	r2, #16
 800637e:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8006380:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006384:	4313      	orrs	r3, r2
 8006386:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      HAL_SAI_ErrorCallback(hsai);
 800638a:	4620      	mov	r0, r4
 800638c:	f005 f8a8 	bl	800b4e0 <HAL_SAI_ErrorCallback>
}
 8006390:	e6f3      	b.n	800617a <HAL_SAI_IRQHandler+0x2a>
 8006392:	4770      	bx	lr
 8006394:	08006399 	.word	0x08006399

08006398 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006398:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800639a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800639c:	6822      	ldr	r2, [r4, #0]
 800639e:	6813      	ldr	r3, [r2, #0]
 80063a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80063a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	2200      	movs	r2, #0
 80063aa:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80063ac:	6823      	ldr	r3, [r4, #0]
 80063ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063b2:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 80063b4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80063b8:	2b20      	cmp	r3, #32
 80063ba:	d007      	beq.n	80063cc <SAI_DMAAbort+0x34>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80063bc:	4620      	mov	r0, r4
 80063be:	f7ff faf9 	bl	80059b4 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80063c2:	6822      	ldr	r2, [r4, #0]
 80063c4:	6853      	ldr	r3, [r2, #4]
 80063c6:	f043 0308 	orr.w	r3, r3, #8
 80063ca:	6053      	str	r3, [r2, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80063cc:	2301      	movs	r3, #1
 80063ce:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80063d8:	4620      	mov	r0, r4
 80063da:	f005 f881 	bl	800b4e0 <HAL_SAI_ErrorCallback>
#endif
}
 80063de:	bd10      	pop	{r4, pc}

080063e0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80063e0:	b570      	push	{r4, r5, r6, lr}
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80063e2:	6a84      	ldr	r4, [r0, #40]	; 0x28

  if (hsd->RxXferSize >= 32U)
 80063e4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80063e6:	2b1f      	cmp	r3, #31
 80063e8:	d916      	bls.n	8006418 <SD_Read_IT+0x38>
 80063ea:	4606      	mov	r6, r0
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80063ec:	2500      	movs	r5, #0
 80063ee:	e00d      	b.n	800640c <SD_Read_IT+0x2c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80063f0:	6830      	ldr	r0, [r6, #0]
 80063f2:	f001 fa63 	bl	80078bc <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 80063f6:	7020      	strb	r0, [r4, #0]
      tmp++;
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80063f8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80063fc:	7063      	strb	r3, [r4, #1]
      tmp++;
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80063fe:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8006402:	70a3      	strb	r3, [r4, #2]
      tmp++;
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006404:	0e00      	lsrs	r0, r0, #24
 8006406:	70e0      	strb	r0, [r4, #3]
      tmp++;
 8006408:	3404      	adds	r4, #4
    for(count = 0U; count < 8U; count++)
 800640a:	3501      	adds	r5, #1
 800640c:	2d07      	cmp	r5, #7
 800640e:	d9ef      	bls.n	80063f0 <SD_Read_IT+0x10>
    }

    hsd->pRxBuffPtr = tmp;
 8006410:	62b4      	str	r4, [r6, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 8006412:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8006414:	3b20      	subs	r3, #32
 8006416:	62f3      	str	r3, [r6, #44]	; 0x2c
  }
}
 8006418:	bd70      	pop	{r4, r5, r6, pc}

0800641a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800641a:	b570      	push	{r4, r5, r6, lr}
 800641c:	b082      	sub	sp, #8
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800641e:	6a04      	ldr	r4, [r0, #32]

  if (hsd->TxXferSize >= 32U)
 8006420:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006422:	2b1f      	cmp	r3, #31
 8006424:	d91d      	bls.n	8006462 <SD_Write_IT+0x48>
 8006426:	4606      	mov	r6, r0
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006428:	2500      	movs	r5, #0
 800642a:	e014      	b.n	8006456 <SD_Write_IT+0x3c>
    {
      data = (uint32_t)(*tmp);
 800642c:	7823      	ldrb	r3, [r4, #0]
 800642e:	9301      	str	r3, [sp, #4]
      tmp++;
      data |= ((uint32_t)(*tmp) << 8U);
 8006430:	7862      	ldrb	r2, [r4, #1]
 8006432:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006436:	9301      	str	r3, [sp, #4]
      tmp++;
      data |= ((uint32_t)(*tmp) << 16U);
 8006438:	78a2      	ldrb	r2, [r4, #2]
 800643a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800643e:	9301      	str	r3, [sp, #4]
      tmp++;
      data |= ((uint32_t)(*tmp) << 24U);
 8006440:	78e2      	ldrb	r2, [r4, #3]
 8006442:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006446:	a902      	add	r1, sp, #8
 8006448:	f841 3d04 	str.w	r3, [r1, #-4]!
      tmp++;
 800644c:	3404      	adds	r4, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800644e:	6830      	ldr	r0, [r6, #0]
 8006450:	f001 fa37 	bl	80078c2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006454:	3501      	adds	r5, #1
 8006456:	2d07      	cmp	r5, #7
 8006458:	d9e8      	bls.n	800642c <SD_Write_IT+0x12>
    }

    hsd->pTxBuffPtr = tmp;
 800645a:	6234      	str	r4, [r6, #32]
    hsd->TxXferSize -= 32U;
 800645c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800645e:	3b20      	subs	r3, #32
 8006460:	6273      	str	r3, [r6, #36]	; 0x24
  }
}
 8006462:	b002      	add	sp, #8
 8006464:	bd70      	pop	{r4, r5, r6, pc}
	...

08006468 <SD_SendSDStatus>:
{
 8006468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800646c:	b086      	sub	sp, #24
 800646e:	4604      	mov	r4, r0
 8006470:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8006472:	f7fa f913 	bl	800069c <HAL_GetTick>
 8006476:	4680      	mov	r8, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006478:	2100      	movs	r1, #0
 800647a:	6820      	ldr	r0, [r4, #0]
 800647c:	f001 fa45 	bl	800790a <SDMMC_GetResponse>
 8006480:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8006484:	d167      	bne.n	8006556 <SD_SendSDStatus+0xee>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006486:	2140      	movs	r1, #64	; 0x40
 8006488:	6820      	ldr	r0, [r4, #0]
 800648a:	f001 fb59 	bl	8007b40 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800648e:	4606      	mov	r6, r0
 8006490:	b110      	cbz	r0, 8006498 <SD_SendSDStatus+0x30>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006492:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006494:	63a3      	str	r3, [r4, #56]	; 0x38
    return errorstate;
 8006496:	e060      	b.n	800655a <SD_SendSDStatus+0xf2>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006498:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800649a:	0409      	lsls	r1, r1, #16
 800649c:	6820      	ldr	r0, [r4, #0]
 800649e:	f001 fc3d 	bl	8007d1c <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80064a2:	4606      	mov	r6, r0
 80064a4:	b110      	cbz	r0, 80064ac <SD_SendSDStatus+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80064a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80064a8:	63a3      	str	r3, [r4, #56]	; 0x38
    return errorstate;
 80064aa:	e056      	b.n	800655a <SD_SendSDStatus+0xf2>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80064ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064b0:	9300      	str	r3, [sp, #0]
  config.DataLength    = 64U;
 80064b2:	2340      	movs	r3, #64	; 0x40
 80064b4:	9301      	str	r3, [sp, #4]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80064b6:	2360      	movs	r3, #96	; 0x60
 80064b8:	9302      	str	r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80064ba:	2302      	movs	r3, #2
 80064bc:	9303      	str	r3, [sp, #12]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80064be:	2300      	movs	r3, #0
 80064c0:	9304      	str	r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80064c2:	2301      	movs	r3, #1
 80064c4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80064c6:	4669      	mov	r1, sp
 80064c8:	6820      	ldr	r0, [r4, #0]
 80064ca:	f001 fb27 	bl	8007b1c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80064ce:	6820      	ldr	r0, [r4, #0]
 80064d0:	f001 fce3 	bl	8007e9a <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 80064d4:	4606      	mov	r6, r0
 80064d6:	b188      	cbz	r0, 80064fc <SD_SendSDStatus+0x94>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80064d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80064da:	63a3      	str	r3, [r4, #56]	; 0x38
    return errorstate;
 80064dc:	e03d      	b.n	800655a <SD_SendSDStatus+0xf2>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80064de:	6820      	ldr	r0, [r4, #0]
 80064e0:	f001 f9ec 	bl	80078bc <SDMMC_ReadFIFO>
 80064e4:	f845 0b04 	str.w	r0, [r5], #4
      for(count = 0U; count < 8U; count++)
 80064e8:	3701      	adds	r7, #1
 80064ea:	2f07      	cmp	r7, #7
 80064ec:	d9f7      	bls.n	80064de <SD_SendSDStatus+0x76>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80064ee:	f7fa f8d5 	bl	800069c <HAL_GetTick>
 80064f2:	eba0 0008 	sub.w	r0, r0, r8
 80064f6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80064fa:	d032      	beq.n	8006562 <SD_SendSDStatus+0xfa>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006500:	f412 7f95 	tst.w	r2, #298	; 0x12a
 8006504:	d105      	bne.n	8006512 <SD_SendSDStatus+0xaa>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006508:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800650c:	d0ef      	beq.n	80064ee <SD_SendSDStatus+0x86>
      for(count = 0U; count < 8U; count++)
 800650e:	4637      	mov	r7, r6
 8006510:	e7eb      	b.n	80064ea <SD_SendSDStatus+0x82>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006514:	f012 0f08 	tst.w	r2, #8
 8006518:	d126      	bne.n	8006568 <SD_SendSDStatus+0x100>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800651a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800651c:	f012 0f02 	tst.w	r2, #2
 8006520:	d124      	bne.n	800656c <SD_SendSDStatus+0x104>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006524:	f013 0f20 	tst.w	r3, #32
 8006528:	d122      	bne.n	8006570 <SD_SendSDStatus+0x108>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800652a:	6820      	ldr	r0, [r4, #0]
 800652c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800652e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8006532:	d00d      	beq.n	8006550 <SD_SendSDStatus+0xe8>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006534:	f001 f9c2 	bl	80078bc <SDMMC_ReadFIFO>
 8006538:	f845 0b04 	str.w	r0, [r5], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800653c:	f7fa f8ae 	bl	800069c <HAL_GetTick>
 8006540:	eba0 0008 	sub.w	r0, r0, r8
 8006544:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006548:	d1ef      	bne.n	800652a <SD_SendSDStatus+0xc2>
      return HAL_SD_ERROR_TIMEOUT;
 800654a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800654e:	e004      	b.n	800655a <SD_SendSDStatus+0xf2>
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006550:	4b08      	ldr	r3, [pc, #32]	; (8006574 <SD_SendSDStatus+0x10c>)
 8006552:	6383      	str	r3, [r0, #56]	; 0x38
  return HAL_SD_ERROR_NONE;
 8006554:	e001      	b.n	800655a <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006556:	f44f 6600 	mov.w	r6, #2048	; 0x800
}
 800655a:	4630      	mov	r0, r6
 800655c:	b006      	add	sp, #24
 800655e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_SD_ERROR_TIMEOUT;
 8006562:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006566:	e7f8      	b.n	800655a <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006568:	2608      	movs	r6, #8
 800656a:	e7f6      	b.n	800655a <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800656c:	2602      	movs	r6, #2
 800656e:	e7f4      	b.n	800655a <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_RX_OVERRUN;
 8006570:	2620      	movs	r6, #32
 8006572:	e7f2      	b.n	800655a <SD_SendSDStatus+0xf2>
 8006574:	18000f3a 	.word	0x18000f3a

08006578 <SD_FindSCR>:
{
 8006578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800657c:	b088      	sub	sp, #32
 800657e:	4604      	mov	r4, r0
 8006580:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8006582:	f7fa f88b 	bl	800069c <HAL_GetTick>
 8006586:	4606      	mov	r6, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006588:	2300      	movs	r3, #0
 800658a:	9300      	str	r3, [sp, #0]
 800658c:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800658e:	2108      	movs	r1, #8
 8006590:	6820      	ldr	r0, [r4, #0]
 8006592:	f001 fad5 	bl	8007b40 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006596:	4605      	mov	r5, r0
 8006598:	b118      	cbz	r0, 80065a2 <SD_FindSCR+0x2a>
}
 800659a:	4628      	mov	r0, r5
 800659c:	b008      	add	sp, #32
 800659e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80065a2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80065a4:	0409      	lsls	r1, r1, #16
 80065a6:	6820      	ldr	r0, [r4, #0]
 80065a8:	f001 fbb8 	bl	8007d1c <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80065ac:	4605      	mov	r5, r0
 80065ae:	2800      	cmp	r0, #0
 80065b0:	d1f3      	bne.n	800659a <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80065b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065b6:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 80065b8:	2308      	movs	r3, #8
 80065ba:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80065bc:	2330      	movs	r3, #48	; 0x30
 80065be:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80065c0:	2302      	movs	r3, #2
 80065c2:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80065c4:	2300      	movs	r3, #0
 80065c6:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80065c8:	2301      	movs	r3, #1
 80065ca:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80065cc:	a902      	add	r1, sp, #8
 80065ce:	6820      	ldr	r0, [r4, #0]
 80065d0:	f001 faa4 	bl	8007b1c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80065d4:	6820      	ldr	r0, [r4, #0]
 80065d6:	f001 fbe9 	bl	8007dac <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80065da:	4605      	mov	r5, r0
 80065dc:	2800      	cmp	r0, #0
 80065de:	d1dc      	bne.n	800659a <SD_FindSCR+0x22>
  uint32_t index = 0U;
 80065e0:	4680      	mov	r8, r0
 80065e2:	e005      	b.n	80065f0 <SD_FindSCR+0x78>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80065e4:	f7fa f85a 	bl	800069c <HAL_GetTick>
 80065e8:	1b80      	subs	r0, r0, r6
 80065ea:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80065ee:	d048      	beq.n	8006682 <SD_FindSCR+0x10a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80065f0:	6820      	ldr	r0, [r4, #0]
 80065f2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80065f4:	f240 532a 	movw	r3, #1322	; 0x52a
 80065f8:	421a      	tst	r2, r3
 80065fa:	d110      	bne.n	800661e <SD_FindSCR+0xa6>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80065fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80065fe:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8006602:	d1ef      	bne.n	80065e4 <SD_FindSCR+0x6c>
 8006604:	f1b8 0f00 	cmp.w	r8, #0
 8006608:	d1ec      	bne.n	80065e4 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800660a:	f001 f957 	bl	80078bc <SDMMC_ReadFIFO>
 800660e:	9000      	str	r0, [sp, #0]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006610:	6820      	ldr	r0, [r4, #0]
 8006612:	f001 f953 	bl	80078bc <SDMMC_ReadFIFO>
 8006616:	9001      	str	r0, [sp, #4]
      index++;
 8006618:	f108 0801 	add.w	r8, r8, #1
 800661c:	e7e2      	b.n	80065e4 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800661e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006620:	f013 0f08 	tst.w	r3, #8
 8006624:	d124      	bne.n	8006670 <SD_FindSCR+0xf8>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006626:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006628:	f013 0f02 	tst.w	r3, #2
 800662c:	d123      	bne.n	8006676 <SD_FindSCR+0xfe>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800662e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006630:	f013 0f20 	tst.w	r3, #32
 8006634:	d122      	bne.n	800667c <SD_FindSCR+0x104>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006636:	4b14      	ldr	r3, [pc, #80]	; (8006688 <SD_FindSCR+0x110>)
 8006638:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800663a:	9a01      	ldr	r2, [sp, #4]
 800663c:	0213      	lsls	r3, r2, #8
 800663e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006642:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006646:	0a11      	lsrs	r1, r2, #8
 8006648:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800664c:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800664e:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006652:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006654:	9a00      	ldr	r2, [sp, #0]
 8006656:	0213      	lsls	r3, r2, #8
 8006658:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800665c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006660:	0a11      	lsrs	r1, r2, #8
 8006662:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006666:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006668:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800666c:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 800666e:	e794      	b.n	800659a <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006670:	2508      	movs	r5, #8
 8006672:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006674:	e791      	b.n	800659a <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006676:	2502      	movs	r5, #2
 8006678:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800667a:	e78e      	b.n	800659a <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800667c:	2520      	movs	r5, #32
 800667e:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8006680:	e78b      	b.n	800659a <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 8006682:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8006686:	e788      	b.n	800659a <SD_FindSCR+0x22>
 8006688:	18000f3a 	.word	0x18000f3a

0800668c <SD_WideBus_Enable>:
{
 800668c:	b510      	push	{r4, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 8006692:	2100      	movs	r1, #0
 8006694:	9100      	str	r1, [sp, #0]
 8006696:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006698:	6800      	ldr	r0, [r0, #0]
 800669a:	f001 f936 	bl	800790a <SDMMC_GetResponse>
 800669e:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80066a2:	d116      	bne.n	80066d2 <SD_WideBus_Enable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 80066a4:	4669      	mov	r1, sp
 80066a6:	4620      	mov	r0, r4
 80066a8:	f7ff ff66 	bl	8006578 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80066ac:	4603      	mov	r3, r0
 80066ae:	b990      	cbnz	r0, 80066d6 <SD_WideBus_Enable+0x4a>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80066b0:	9b01      	ldr	r3, [sp, #4]
 80066b2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80066b6:	d011      	beq.n	80066dc <SD_WideBus_Enable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80066b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80066ba:	0409      	lsls	r1, r1, #16
 80066bc:	6820      	ldr	r0, [r4, #0]
 80066be:	f001 fb2d 	bl	8007d1c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80066c2:	4603      	mov	r3, r0
 80066c4:	b938      	cbnz	r0, 80066d6 <SD_WideBus_Enable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80066c6:	2102      	movs	r1, #2
 80066c8:	6820      	ldr	r0, [r4, #0]
 80066ca:	f001 fb56 	bl	8007d7a <SDMMC_CmdBusWidth>
 80066ce:	4603      	mov	r3, r0
 80066d0:	e001      	b.n	80066d6 <SD_WideBus_Enable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80066d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	b002      	add	sp, #8
 80066da:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80066dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80066e0:	e7f9      	b.n	80066d6 <SD_WideBus_Enable+0x4a>

080066e2 <SD_WideBus_Disable>:
{
 80066e2:	b510      	push	{r4, lr}
 80066e4:	b082      	sub	sp, #8
 80066e6:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 80066e8:	2100      	movs	r1, #0
 80066ea:	9100      	str	r1, [sp, #0]
 80066ec:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80066ee:	6800      	ldr	r0, [r0, #0]
 80066f0:	f001 f90b 	bl	800790a <SDMMC_GetResponse>
 80066f4:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80066f8:	d116      	bne.n	8006728 <SD_WideBus_Disable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 80066fa:	4669      	mov	r1, sp
 80066fc:	4620      	mov	r0, r4
 80066fe:	f7ff ff3b 	bl	8006578 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006702:	4603      	mov	r3, r0
 8006704:	b990      	cbnz	r0, 800672c <SD_WideBus_Disable+0x4a>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006706:	9b01      	ldr	r3, [sp, #4]
 8006708:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800670c:	d011      	beq.n	8006732 <SD_WideBus_Disable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800670e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006710:	0409      	lsls	r1, r1, #16
 8006712:	6820      	ldr	r0, [r4, #0]
 8006714:	f001 fb02 	bl	8007d1c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006718:	4603      	mov	r3, r0
 800671a:	b938      	cbnz	r0, 800672c <SD_WideBus_Disable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800671c:	2100      	movs	r1, #0
 800671e:	6820      	ldr	r0, [r4, #0]
 8006720:	f001 fb2b 	bl	8007d7a <SDMMC_CmdBusWidth>
 8006724:	4603      	mov	r3, r0
 8006726:	e001      	b.n	800672c <SD_WideBus_Disable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006728:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 800672c:	4618      	mov	r0, r3
 800672e:	b002      	add	sp, #8
 8006730:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006732:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006736:	e7f9      	b.n	800672c <SD_WideBus_Disable+0x4a>

08006738 <SD_SendStatus>:
{
 8006738:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 800673a:	b181      	cbz	r1, 800675e <SD_SendStatus+0x26>
 800673c:	460d      	mov	r5, r1
 800673e:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006740:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006742:	0409      	lsls	r1, r1, #16
 8006744:	6800      	ldr	r0, [r0, #0]
 8006746:	f001 fb8f 	bl	8007e68 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800674a:	4606      	mov	r6, r0
 800674c:	b108      	cbz	r0, 8006752 <SD_SendStatus+0x1a>
}
 800674e:	4630      	mov	r0, r6
 8006750:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006752:	2100      	movs	r1, #0
 8006754:	6820      	ldr	r0, [r4, #0]
 8006756:	f001 f8d8 	bl	800790a <SDMMC_GetResponse>
 800675a:	6028      	str	r0, [r5, #0]
  return HAL_SD_ERROR_NONE;
 800675c:	e7f7      	b.n	800674e <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 800675e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 8006762:	e7f4      	b.n	800674e <SD_SendStatus+0x16>

08006764 <HAL_SD_ReadBlocks>:
{
 8006764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006768:	b086      	sub	sp, #24
 800676a:	4604      	mov	r4, r0
 800676c:	460d      	mov	r5, r1
 800676e:	4616      	mov	r6, r2
 8006770:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8006772:	f7f9 ff93 	bl	800069c <HAL_GetTick>
  if(NULL == pData)
 8006776:	b16d      	cbz	r5, 8006794 <HAL_SD_ReadBlocks+0x30>
 8006778:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 800677a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b01      	cmp	r3, #1
 8006782:	d00d      	beq.n	80067a0 <HAL_SD_ReadBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006784:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006786:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800678a:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800678c:	2001      	movs	r0, #1
}
 800678e:	b006      	add	sp, #24
 8006790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006794:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006796:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800679a:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800679c:	2001      	movs	r0, #1
 800679e:	e7f6      	b.n	800678e <HAL_SD_ReadBlocks+0x2a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80067a0:	2300      	movs	r3, #0
 80067a2:	63a3      	str	r3, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80067a4:	19f3      	adds	r3, r6, r7
 80067a6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d82d      	bhi.n	8006808 <HAL_SD_ReadBlocks+0xa4>
    hsd->State = HAL_SD_STATE_BUSY;
 80067ac:	2303      	movs	r3, #3
 80067ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 80067b2:	6823      	ldr	r3, [r4, #0]
 80067b4:	2200      	movs	r2, #0
 80067b6:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80067b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d000      	beq.n	80067c0 <HAL_SD_ReadBlocks+0x5c>
      add *= 512U;
 80067be:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80067c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067c4:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80067c6:	027b      	lsls	r3, r7, #9
 80067c8:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80067ca:	2390      	movs	r3, #144	; 0x90
 80067cc:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80067ce:	2302      	movs	r3, #2
 80067d0:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80067d2:	2300      	movs	r3, #0
 80067d4:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80067d6:	9305      	str	r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80067d8:	4669      	mov	r1, sp
 80067da:	6820      	ldr	r0, [r4, #0]
 80067dc:	f001 f99e 	bl	8007b1c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80067e0:	6822      	ldr	r2, [r4, #0]
 80067e2:	68d3      	ldr	r3, [r2, #12]
 80067e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067e8:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 80067ea:	2f01      	cmp	r7, #1
 80067ec:	d912      	bls.n	8006814 <HAL_SD_ReadBlocks+0xb0>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80067ee:	2302      	movs	r3, #2
 80067f0:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80067f2:	4631      	mov	r1, r6
 80067f4:	6820      	ldr	r0, [r4, #0]
 80067f6:	f001 f9d5 	bl	8007ba4 <SDMMC_CmdReadMultiBlock>
 80067fa:	4682      	mov	sl, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 80067fc:	f1ba 0f00 	cmp.w	sl, #0
 8006800:	d110      	bne.n	8006824 <HAL_SD_ReadBlocks+0xc0>
    dataremaining = config.DataLength;
 8006802:	f8dd 9004 	ldr.w	r9, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006806:	e024      	b.n	8006852 <HAL_SD_ReadBlocks+0xee>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006808:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800680a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800680e:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8006810:	2001      	movs	r0, #1
 8006812:	e7bc      	b.n	800678e <HAL_SD_ReadBlocks+0x2a>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006814:	2301      	movs	r3, #1
 8006816:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006818:	4631      	mov	r1, r6
 800681a:	6820      	ldr	r0, [r4, #0]
 800681c:	f001 f9a9 	bl	8007b72 <SDMMC_CmdReadSingleBlock>
 8006820:	4682      	mov	sl, r0
 8006822:	e7eb      	b.n	80067fc <HAL_SD_ReadBlocks+0x98>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	4a4c      	ldr	r2, [pc, #304]	; (8006958 <HAL_SD_ReadBlocks+0x1f4>)
 8006828:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800682a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800682c:	ea43 030a 	orr.w	r3, r3, sl
 8006830:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006832:	2001      	movs	r0, #1
 8006834:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006838:	2300      	movs	r3, #0
 800683a:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800683c:	e7a7      	b.n	800678e <HAL_SD_ReadBlocks+0x2a>
        dataremaining -= 32U;
 800683e:	f1a9 0920 	sub.w	r9, r9, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006842:	f7f9 ff2b 	bl	800069c <HAL_GetTick>
 8006846:	eba0 0008 	sub.w	r0, r0, r8
 800684a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800684c:	4298      	cmp	r0, r3
 800684e:	d21e      	bcs.n	800688e <HAL_SD_ReadBlocks+0x12a>
 8006850:	b1eb      	cbz	r3, 800688e <HAL_SD_ReadBlocks+0x12a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006856:	f412 7f95 	tst.w	r2, #298	; 0x12a
 800685a:	d126      	bne.n	80068aa <HAL_SD_ReadBlocks+0x146>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800685c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006862:	d0ee      	beq.n	8006842 <HAL_SD_ReadBlocks+0xde>
 8006864:	f1b9 0f1f 	cmp.w	r9, #31
 8006868:	d9eb      	bls.n	8006842 <HAL_SD_ReadBlocks+0xde>
        for(count = 0U; count < 8U; count++)
 800686a:	4656      	mov	r6, sl
 800686c:	2e07      	cmp	r6, #7
 800686e:	d8e6      	bhi.n	800683e <HAL_SD_ReadBlocks+0xda>
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006870:	6820      	ldr	r0, [r4, #0]
 8006872:	f001 f823 	bl	80078bc <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006876:	7028      	strb	r0, [r5, #0]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006878:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800687c:	706b      	strb	r3, [r5, #1]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800687e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8006882:	70ab      	strb	r3, [r5, #2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006884:	0e00      	lsrs	r0, r0, #24
 8006886:	70e8      	strb	r0, [r5, #3]
          tempbuff++;
 8006888:	3504      	adds	r5, #4
        for(count = 0U; count < 8U; count++)
 800688a:	3601      	adds	r6, #1
 800688c:	e7ee      	b.n	800686c <HAL_SD_ReadBlocks+0x108>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800688e:	6823      	ldr	r3, [r4, #0]
 8006890:	4a31      	ldr	r2, [pc, #196]	; (8006958 <HAL_SD_ReadBlocks+0x1f4>)
 8006892:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006894:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800689a:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800689c:	2301      	movs	r3, #1
 800689e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80068a2:	2300      	movs	r3, #0
 80068a4:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 80068a6:	2003      	movs	r0, #3
 80068a8:	e771      	b.n	800678e <HAL_SD_ReadBlocks+0x2a>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80068aa:	68da      	ldr	r2, [r3, #12]
 80068ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068b0:	60da      	str	r2, [r3, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80068b2:	6820      	ldr	r0, [r4, #0]
 80068b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80068b6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80068ba:	d004      	beq.n	80068c6 <HAL_SD_ReadBlocks+0x162>
 80068bc:	2f01      	cmp	r7, #1
 80068be:	d902      	bls.n	80068c6 <HAL_SD_ReadBlocks+0x162>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80068c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80068c2:	2b03      	cmp	r3, #3
 80068c4:	d118      	bne.n	80068f8 <HAL_SD_ReadBlocks+0x194>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068ca:	f012 0f08 	tst.w	r2, #8
 80068ce:	d124      	bne.n	800691a <HAL_SD_ReadBlocks+0x1b6>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80068d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068d2:	f012 0f02 	tst.w	r2, #2
 80068d6:	d12c      	bne.n	8006932 <HAL_SD_ReadBlocks+0x1ce>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80068d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068da:	f012 0f20 	tst.w	r2, #32
 80068de:	d034      	beq.n	800694a <HAL_SD_ReadBlocks+0x1e6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068e0:	4a1d      	ldr	r2, [pc, #116]	; (8006958 <HAL_SD_ReadBlocks+0x1f4>)
 80068e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80068e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80068e6:	f043 0320 	orr.w	r3, r3, #32
 80068ea:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80068ec:	2001      	movs	r0, #1
 80068ee:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80068f2:	2300      	movs	r3, #0
 80068f4:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80068f6:	e74a      	b.n	800678e <HAL_SD_ReadBlocks+0x2a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80068f8:	f001 f9a0 	bl	8007c3c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80068fc:	4603      	mov	r3, r0
 80068fe:	2800      	cmp	r0, #0
 8006900:	d0e1      	beq.n	80068c6 <HAL_SD_ReadBlocks+0x162>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006902:	6822      	ldr	r2, [r4, #0]
 8006904:	4914      	ldr	r1, [pc, #80]	; (8006958 <HAL_SD_ReadBlocks+0x1f4>)
 8006906:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006908:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800690a:	4313      	orrs	r3, r2
 800690c:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800690e:	2001      	movs	r0, #1
 8006910:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006914:	2300      	movs	r3, #0
 8006916:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 8006918:	e739      	b.n	800678e <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800691a:	4a0f      	ldr	r2, [pc, #60]	; (8006958 <HAL_SD_ReadBlocks+0x1f4>)
 800691c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800691e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006920:	f043 0308 	orr.w	r3, r3, #8
 8006924:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006926:	2001      	movs	r0, #1
 8006928:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800692c:	2300      	movs	r3, #0
 800692e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8006930:	e72d      	b.n	800678e <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006932:	4a09      	ldr	r2, [pc, #36]	; (8006958 <HAL_SD_ReadBlocks+0x1f4>)
 8006934:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006936:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006938:	f043 0302 	orr.w	r3, r3, #2
 800693c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800693e:	2001      	movs	r0, #1
 8006940:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006944:	2300      	movs	r3, #0
 8006946:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8006948:	e721      	b.n	800678e <HAL_SD_ReadBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800694a:	4a04      	ldr	r2, [pc, #16]	; (800695c <HAL_SD_ReadBlocks+0x1f8>)
 800694c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800694e:	2301      	movs	r3, #1
 8006950:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8006954:	2000      	movs	r0, #0
 8006956:	e71a      	b.n	800678e <HAL_SD_ReadBlocks+0x2a>
 8006958:	1fe00fff 	.word	0x1fe00fff
 800695c:	18000f3a 	.word	0x18000f3a

08006960 <HAL_SD_WriteBlocks>:
{
 8006960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006964:	b088      	sub	sp, #32
 8006966:	4604      	mov	r4, r0
 8006968:	460d      	mov	r5, r1
 800696a:	4616      	mov	r6, r2
 800696c:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800696e:	f7f9 fe95 	bl	800069c <HAL_GetTick>
  if(NULL == pData)
 8006972:	b16d      	cbz	r5, 8006990 <HAL_SD_WriteBlocks+0x30>
 8006974:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8006976:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800697a:	b2db      	uxtb	r3, r3
 800697c:	2b01      	cmp	r3, #1
 800697e:	d00d      	beq.n	800699c <HAL_SD_WriteBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006980:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006982:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006986:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8006988:	2001      	movs	r0, #1
}
 800698a:	b008      	add	sp, #32
 800698c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006990:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006992:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006996:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8006998:	2001      	movs	r0, #1
 800699a:	e7f6      	b.n	800698a <HAL_SD_WriteBlocks+0x2a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800699c:	2300      	movs	r3, #0
 800699e:	63a3      	str	r3, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80069a0:	19f3      	adds	r3, r6, r7
 80069a2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d82c      	bhi.n	8006a02 <HAL_SD_WriteBlocks+0xa2>
    hsd->State = HAL_SD_STATE_BUSY;
 80069a8:	2303      	movs	r3, #3
 80069aa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	2200      	movs	r2, #0
 80069b2:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80069b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d000      	beq.n	80069bc <HAL_SD_WriteBlocks+0x5c>
      add *= 512U;
 80069ba:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80069bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069c0:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80069c2:	027b      	lsls	r3, r7, #9
 80069c4:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80069c6:	2390      	movs	r3, #144	; 0x90
 80069c8:	9304      	str	r3, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80069ca:	2300      	movs	r3, #0
 80069cc:	9305      	str	r3, [sp, #20]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80069ce:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80069d0:	9307      	str	r3, [sp, #28]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80069d2:	a902      	add	r1, sp, #8
 80069d4:	6820      	ldr	r0, [r4, #0]
 80069d6:	f001 f8a1 	bl	8007b1c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80069da:	6822      	ldr	r2, [r4, #0]
 80069dc:	68d3      	ldr	r3, [r2, #12]
 80069de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069e2:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 80069e4:	2f01      	cmp	r7, #1
 80069e6:	d912      	bls.n	8006a0e <HAL_SD_WriteBlocks+0xae>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80069e8:	2320      	movs	r3, #32
 80069ea:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80069ec:	4631      	mov	r1, r6
 80069ee:	6820      	ldr	r0, [r4, #0]
 80069f0:	f001 f90a 	bl	8007c08 <SDMMC_CmdWriteMultiBlock>
 80069f4:	4682      	mov	sl, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 80069f6:	f1ba 0f00 	cmp.w	sl, #0
 80069fa:	d110      	bne.n	8006a1e <HAL_SD_WriteBlocks+0xbe>
    dataremaining = config.DataLength;
 80069fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006a00:	e024      	b.n	8006a4c <HAL_SD_WriteBlocks+0xec>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006a02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006a08:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8006a0a:	2001      	movs	r0, #1
 8006a0c:	e7bd      	b.n	800698a <HAL_SD_WriteBlocks+0x2a>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006a0e:	2310      	movs	r3, #16
 8006a10:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006a12:	4631      	mov	r1, r6
 8006a14:	6820      	ldr	r0, [r4, #0]
 8006a16:	f001 f8de 	bl	8007bd6 <SDMMC_CmdWriteSingleBlock>
 8006a1a:	4682      	mov	sl, r0
 8006a1c:	e7eb      	b.n	80069f6 <HAL_SD_WriteBlocks+0x96>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a1e:	6823      	ldr	r3, [r4, #0]
 8006a20:	4a4e      	ldr	r2, [pc, #312]	; (8006b5c <HAL_SD_WriteBlocks+0x1fc>)
 8006a22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006a24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a26:	ea43 030a 	orr.w	r3, r3, sl
 8006a2a:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006a2c:	2001      	movs	r0, #1
 8006a2e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a32:	2300      	movs	r3, #0
 8006a34:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8006a36:	e7a8      	b.n	800698a <HAL_SD_WriteBlocks+0x2a>
        dataremaining -= 32U;
 8006a38:	f1a9 0920 	sub.w	r9, r9, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006a3c:	f7f9 fe2e 	bl	800069c <HAL_GetTick>
 8006a40:	eba0 0008 	sub.w	r0, r0, r8
 8006a44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a46:	4298      	cmp	r0, r3
 8006a48:	d222      	bcs.n	8006a90 <HAL_SD_WriteBlocks+0x130>
 8006a4a:	b30b      	cbz	r3, 8006a90 <HAL_SD_WriteBlocks+0x130>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a50:	f412 7f8d 	tst.w	r2, #282	; 0x11a
 8006a54:	d12a      	bne.n	8006aac <HAL_SD_WriteBlocks+0x14c>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8006a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a58:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006a5c:	d0ee      	beq.n	8006a3c <HAL_SD_WriteBlocks+0xdc>
 8006a5e:	f1b9 0f1f 	cmp.w	r9, #31
 8006a62:	d9eb      	bls.n	8006a3c <HAL_SD_WriteBlocks+0xdc>
        for(count = 0U; count < 8U; count++)
 8006a64:	4656      	mov	r6, sl
 8006a66:	2e07      	cmp	r6, #7
 8006a68:	d8e6      	bhi.n	8006a38 <HAL_SD_WriteBlocks+0xd8>
          data = (uint32_t)(*tempbuff);
 8006a6a:	782b      	ldrb	r3, [r5, #0]
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006a6c:	786a      	ldrb	r2, [r5, #1]
 8006a6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006a72:	78aa      	ldrb	r2, [r5, #2]
 8006a74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006a78:	78ea      	ldrb	r2, [r5, #3]
 8006a7a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006a7e:	a908      	add	r1, sp, #32
 8006a80:	f841 3d1c 	str.w	r3, [r1, #-28]!
          tempbuff++;
 8006a84:	3504      	adds	r5, #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006a86:	6820      	ldr	r0, [r4, #0]
 8006a88:	f000 ff1b 	bl	80078c2 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006a8c:	3601      	adds	r6, #1
 8006a8e:	e7ea      	b.n	8006a66 <HAL_SD_WriteBlocks+0x106>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a90:	6823      	ldr	r3, [r4, #0]
 8006a92:	4a32      	ldr	r2, [pc, #200]	; (8006b5c <HAL_SD_WriteBlocks+0x1fc>)
 8006a94:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006a96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a98:	ea43 030a 	orr.w	r3, r3, sl
 8006a9c:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8006aa8:	2003      	movs	r0, #3
 8006aaa:	e76e      	b.n	800698a <HAL_SD_WriteBlocks+0x2a>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006aac:	68da      	ldr	r2, [r3, #12]
 8006aae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ab2:	60da      	str	r2, [r3, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006ab4:	6820      	ldr	r0, [r4, #0]
 8006ab6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006ab8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006abc:	d004      	beq.n	8006ac8 <HAL_SD_WriteBlocks+0x168>
 8006abe:	2f01      	cmp	r7, #1
 8006ac0:	d902      	bls.n	8006ac8 <HAL_SD_WriteBlocks+0x168>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006ac2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006ac4:	2b03      	cmp	r3, #3
 8006ac6:	d118      	bne.n	8006afa <HAL_SD_WriteBlocks+0x19a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006ac8:	6823      	ldr	r3, [r4, #0]
 8006aca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006acc:	f012 0f08 	tst.w	r2, #8
 8006ad0:	d124      	bne.n	8006b1c <HAL_SD_WriteBlocks+0x1bc>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ad4:	f012 0f02 	tst.w	r2, #2
 8006ad8:	d12c      	bne.n	8006b34 <HAL_SD_WriteBlocks+0x1d4>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8006ada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006adc:	f012 0f10 	tst.w	r2, #16
 8006ae0:	d034      	beq.n	8006b4c <HAL_SD_WriteBlocks+0x1ec>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ae2:	4a1e      	ldr	r2, [pc, #120]	; (8006b5c <HAL_SD_WriteBlocks+0x1fc>)
 8006ae4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006ae6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006ae8:	f043 0310 	orr.w	r3, r3, #16
 8006aec:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006aee:	2001      	movs	r0, #1
 8006af0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006af4:	2300      	movs	r3, #0
 8006af6:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8006af8:	e747      	b.n	800698a <HAL_SD_WriteBlocks+0x2a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006afa:	f001 f89f 	bl	8007c3c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8006afe:	4603      	mov	r3, r0
 8006b00:	2800      	cmp	r0, #0
 8006b02:	d0e1      	beq.n	8006ac8 <HAL_SD_WriteBlocks+0x168>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b04:	6822      	ldr	r2, [r4, #0]
 8006b06:	4915      	ldr	r1, [pc, #84]	; (8006b5c <HAL_SD_WriteBlocks+0x1fc>)
 8006b08:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006b0a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006b10:	2001      	movs	r0, #1
 8006b12:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006b16:	2300      	movs	r3, #0
 8006b18:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 8006b1a:	e736      	b.n	800698a <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b1c:	4a0f      	ldr	r2, [pc, #60]	; (8006b5c <HAL_SD_WriteBlocks+0x1fc>)
 8006b1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006b20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b22:	f043 0308 	orr.w	r3, r3, #8
 8006b26:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b28:	2001      	movs	r0, #1
 8006b2a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8006b32:	e72a      	b.n	800698a <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b34:	4a09      	ldr	r2, [pc, #36]	; (8006b5c <HAL_SD_WriteBlocks+0x1fc>)
 8006b36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006b38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b3a:	f043 0302 	orr.w	r3, r3, #2
 8006b3e:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b40:	2001      	movs	r0, #1
 8006b42:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b46:	2300      	movs	r3, #0
 8006b48:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8006b4a:	e71e      	b.n	800698a <HAL_SD_WriteBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006b4c:	4a04      	ldr	r2, [pc, #16]	; (8006b60 <HAL_SD_WriteBlocks+0x200>)
 8006b4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006b50:	2301      	movs	r3, #1
 8006b52:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8006b56:	2000      	movs	r0, #0
 8006b58:	e717      	b.n	800698a <HAL_SD_WriteBlocks+0x2a>
 8006b5a:	bf00      	nop
 8006b5c:	1fe00fff 	.word	0x1fe00fff
 8006b60:	18000f3a 	.word	0x18000f3a

08006b64 <HAL_SD_ErrorCallback>:
}
 8006b64:	4770      	bx	lr

08006b66 <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 8006b66:	4770      	bx	lr

08006b68 <SD_PowerON>:
{
 8006b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	9301      	str	r3, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8006b72:	f7f9 fd93 	bl	800069c <HAL_GetTick>
 8006b76:	4607      	mov	r7, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006b78:	6820      	ldr	r0, [r4, #0]
 8006b7a:	f001 f8a4 	bl	8007cc6 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b7e:	4606      	mov	r6, r0
 8006b80:	b110      	cbz	r0, 8006b88 <SD_PowerON+0x20>
}
 8006b82:	4630      	mov	r0, r6
 8006b84:	b003      	add	sp, #12
 8006b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006b88:	6820      	ldr	r0, [r4, #0]
 8006b8a:	f001 f8af 	bl	8007cec <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b8e:	b938      	cbnz	r0, 8006ba0 <SD_PowerON+0x38>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006b90:	2301      	movs	r3, #1
 8006b92:	6423      	str	r3, [r4, #64]	; 0x40
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006b94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d00b      	beq.n	8006bb2 <SD_PowerON+0x4a>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006b9a:	4635      	mov	r5, r6
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	e014      	b.n	8006bca <SD_PowerON+0x62>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006ba4:	6820      	ldr	r0, [r4, #0]
 8006ba6:	f001 f88e 	bl	8007cc6 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006baa:	2800      	cmp	r0, #0
 8006bac:	d0f2      	beq.n	8006b94 <SD_PowerON+0x2c>
      return errorstate;
 8006bae:	4606      	mov	r6, r0
 8006bb0:	e7e7      	b.n	8006b82 <SD_PowerON+0x1a>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	6820      	ldr	r0, [r4, #0]
 8006bb6:	f001 f8b1 	bl	8007d1c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	d0ed      	beq.n	8006b9a <SD_PowerON+0x32>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006bbe:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8006bc2:	e7de      	b.n	8006b82 <SD_PowerON+0x1a>
    count++;
 8006bc4:	9b01      	ldr	r3, [sp, #4]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006bca:	9a01      	ldr	r2, [sp, #4]
 8006bcc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d815      	bhi.n	8006c00 <SD_PowerON+0x98>
 8006bd4:	b9a5      	cbnz	r5, 8006c00 <SD_PowerON+0x98>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	6820      	ldr	r0, [r4, #0]
 8006bda:	f001 f89f 	bl	8007d1c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bde:	2800      	cmp	r0, #0
 8006be0:	d167      	bne.n	8006cb2 <SD_PowerON+0x14a>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006be2:	493b      	ldr	r1, [pc, #236]	; (8006cd0 <SD_PowerON+0x168>)
 8006be4:	6820      	ldr	r0, [r4, #0]
 8006be6:	f001 f8b2 	bl	8007d4e <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bea:	4605      	mov	r5, r0
 8006bec:	2800      	cmp	r0, #0
 8006bee:	d162      	bne.n	8006cb6 <SD_PowerON+0x14e>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	6820      	ldr	r0, [r4, #0]
 8006bf4:	f000 fe89 	bl	800790a <SDMMC_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006bf8:	0fc3      	lsrs	r3, r0, #31
 8006bfa:	d0e3      	beq.n	8006bc4 <SD_PowerON+0x5c>
 8006bfc:	461d      	mov	r5, r3
 8006bfe:	e7e1      	b.n	8006bc4 <SD_PowerON+0x5c>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006c00:	9a01      	ldr	r2, [sp, #4]
 8006c02:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d858      	bhi.n	8006cbc <SD_PowerON+0x154>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006c0a:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006c0e:	d0b8      	beq.n	8006b82 <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006c10:	2301      	movs	r3, #1
 8006c12:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8006c14:	69a3      	ldr	r3, [r4, #24]
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d1b3      	bne.n	8006b82 <SD_PowerON+0x1a>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8006c1a:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8006c1e:	d0b0      	beq.n	8006b82 <SD_PowerON+0x1a>
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c24:	65e3      	str	r3, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8006c26:	6822      	ldr	r2, [r4, #0]
 8006c28:	6813      	ldr	r3, [r2, #0]
 8006c2a:	f043 0308 	orr.w	r3, r3, #8
 8006c2e:	6013      	str	r3, [r2, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8006c30:	6820      	ldr	r0, [r4, #0]
 8006c32:	f001 f94b 	bl	8007ecc <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 8006c36:	4606      	mov	r6, r0
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	d1a2      	bne.n	8006b82 <SD_PowerON+0x1a>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c40:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
 8006c44:	d108      	bne.n	8006c58 <SD_PowerON+0xf0>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006c46:	f7f9 fd29 	bl	800069c <HAL_GetTick>
 8006c4a:	1bc0      	subs	r0, r0, r7
 8006c4c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006c50:	d1f4      	bne.n	8006c3c <SD_PowerON+0xd4>
            return HAL_SD_ERROR_TIMEOUT;
 8006c52:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006c56:	e794      	b.n	8006b82 <SD_PowerON+0x1a>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8006c58:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006c5c:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8006c5e:	6823      	ldr	r3, [r4, #0]
 8006c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c62:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006c66:	d02c      	beq.n	8006cc2 <SD_PowerON+0x15a>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8006c68:	2001      	movs	r0, #1
 8006c6a:	f7ff ff7c 	bl	8006b66 <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8006c6e:	6822      	ldr	r2, [r4, #0]
 8006c70:	6813      	ldr	r3, [r2, #0]
 8006c72:	f043 0304 	orr.w	r3, r3, #4
 8006c76:	6013      	str	r3, [r2, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006c78:	6823      	ldr	r3, [r4, #0]
 8006c7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c7c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006c80:	d108      	bne.n	8006c94 <SD_PowerON+0x12c>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006c82:	f7f9 fd0b 	bl	800069c <HAL_GetTick>
 8006c86:	1bc0      	subs	r0, r0, r7
 8006c88:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006c8c:	d1f4      	bne.n	8006c78 <SD_PowerON+0x110>
              return HAL_SD_ERROR_TIMEOUT;
 8006c8e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006c92:	e776      	b.n	8006b82 <SD_PowerON+0x1a>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8006c94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c98:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c9e:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8006ca2:	d111      	bne.n	8006cc8 <SD_PowerON+0x160>
          hsd->Instance->POWER = 0x13U;
 8006ca4:	2213      	movs	r2, #19
 8006ca6:	601a      	str	r2, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cae:	639a      	str	r2, [r3, #56]	; 0x38
 8006cb0:	e767      	b.n	8006b82 <SD_PowerON+0x1a>
      return errorstate;
 8006cb2:	4606      	mov	r6, r0
 8006cb4:	e765      	b.n	8006b82 <SD_PowerON+0x1a>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006cb6:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8006cba:	e762      	b.n	8006b82 <SD_PowerON+0x1a>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006cbc:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 8006cc0:	e75f      	b.n	8006b82 <SD_PowerON+0x1a>
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8006cc2:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8006cc6:	e75c      	b.n	8006b82 <SD_PowerON+0x1a>
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006cc8:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 8006ccc:	e759      	b.n	8006b82 <SD_PowerON+0x1a>
 8006cce:	bf00      	nop
 8006cd0:	c1100000 	.word	0xc1100000

08006cd4 <HAL_SD_GetCardCSD>:
{
 8006cd4:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006cd6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006cd8:	0f9b      	lsrs	r3, r3, #30
 8006cda:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006cdc:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006cde:	f3c3 6383 	ubfx	r3, r3, #26, #4
 8006ce2:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006ce4:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
 8006ce8:	f003 0303 	and.w	r3, r3, #3
 8006cec:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006cee:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 8006cf2:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006cf4:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8006cf8:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006cfa:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8006cfe:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006d00:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006d02:	0d1b      	lsrs	r3, r3, #20
 8006d04:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006d06:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
 8006d0a:	f003 030f 	and.w	r3, r3, #15
 8006d0e:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006d10:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006d12:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8006d16:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006d18:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006d1a:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8006d1e:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006d20:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006d22:	f3c3 3340 	ubfx	r3, r3, #13, #1
 8006d26:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006d28:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006d2a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006d2e:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006d30:	2300      	movs	r3, #0
 8006d32:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8006d34:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f040 8088 	bne.w	8006e4c <HAL_SD_GetCardCSD+0x178>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006d3c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8006d3e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006d42:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 8006d46:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8006d48:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8006d4c:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006d4e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006d50:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 8006d54:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006d56:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8006d5a:	f003 0307 	and.w	r3, r3, #7
 8006d5e:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006d60:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006d62:	f3c3 5342 	ubfx	r3, r3, #21, #3
 8006d66:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006d68:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006d6a:	f3c3 4382 	ubfx	r3, r3, #18, #3
 8006d6e:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006d70:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006d72:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 8006d76:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006d78:	690b      	ldr	r3, [r1, #16]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006d7e:	7e0a      	ldrb	r2, [r1, #24]
 8006d80:	f002 0207 	and.w	r2, r2, #7
 8006d84:	3202      	adds	r2, #2
 8006d86:	fa03 f202 	lsl.w	r2, r3, r2
 8006d8a:	64c2      	str	r2, [r0, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006d8c:	7a0b      	ldrb	r3, [r1, #8]
 8006d8e:	f003 040f 	and.w	r4, r3, #15
 8006d92:	2301      	movs	r3, #1
 8006d94:	40a3      	lsls	r3, r4
 8006d96:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006d98:	0a5b      	lsrs	r3, r3, #9
 8006d9a:	fb03 f302 	mul.w	r3, r3, r2
 8006d9e:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8006da0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006da4:	6583      	str	r3, [r0, #88]	; 0x58
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006da6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006da8:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8006dac:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006dae:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006db0:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8006db4:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006db6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dbc:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006dbe:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006dc0:	0fdb      	lsrs	r3, r3, #31
 8006dc2:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006dc4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006dc6:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8006dca:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006dcc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006dce:	f3c3 6382 	ubfx	r3, r3, #26, #3
 8006dd2:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006dd4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006dd6:	f3c3 5383 	ubfx	r3, r3, #22, #4
 8006dda:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006ddc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006dde:	f3c3 5340 	ubfx	r3, r3, #21, #1
 8006de2:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 8006de6:	2300      	movs	r3, #0
 8006de8:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006dec:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8006df0:	f002 0201 	and.w	r2, r2, #1
 8006df4:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006df8:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006dfa:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8006dfe:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006e02:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006e04:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8006e08:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006e0c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006e0e:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8006e12:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006e16:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006e18:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8006e1c:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006e20:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006e22:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8006e26:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006e2a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006e2c:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8006e30:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006e34:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006e36:	f3c2 0246 	ubfx	r2, r2, #1, #7
 8006e3a:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 8006e44:	4618      	mov	r0, r3
}
 8006e46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e4a:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d00b      	beq.n	8006e68 <HAL_SD_GetCardCSD+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e50:	6803      	ldr	r3, [r0, #0]
 8006e52:	4a0e      	ldr	r2, [pc, #56]	; (8006e8c <HAL_SD_GetCardCSD+0x1b8>)
 8006e54:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e56:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e5c:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8006e64:	4618      	mov	r0, r3
 8006e66:	e7ee      	b.n	8006e46 <HAL_SD_GetCardCSD+0x172>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006e68:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006e6a:	041b      	lsls	r3, r3, #16
 8006e6c:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006e70:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 8006e74:	4313      	orrs	r3, r2
 8006e76:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006e78:	690b      	ldr	r3, [r1, #16]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	029b      	lsls	r3, r3, #10
 8006e7e:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006e80:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8006e82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e86:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006e88:	6583      	str	r3, [r0, #88]	; 0x58
 8006e8a:	e78c      	b.n	8006da6 <HAL_SD_GetCardCSD+0xd2>
 8006e8c:	1fe00fff 	.word	0x1fe00fff

08006e90 <SD_InitCard>:
{
 8006e90:	b510      	push	{r4, lr}
 8006e92:	b08c      	sub	sp, #48	; 0x30
 8006e94:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 8006e96:	2301      	movs	r3, #1
 8006e98:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006e9c:	6800      	ldr	r0, [r0, #0]
 8006e9e:	f000 fd1b 	bl	80078d8 <SDMMC_GetPowerState>
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	d05c      	beq.n	8006f60 <SD_InitCard+0xd0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006ea6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006ea8:	2b03      	cmp	r3, #3
 8006eaa:	d136      	bne.n	8006f1a <SD_InitCard+0x8a>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006eac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d14d      	bne.n	8006f4e <SD_InitCard+0xbe>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006eb2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006eb4:	2b03      	cmp	r3, #3
 8006eb6:	d01d      	beq.n	8006ef4 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 8006eb8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8006ebc:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ebe:	0409      	lsls	r1, r1, #16
 8006ec0:	6820      	ldr	r0, [r4, #0]
 8006ec2:	f000 ffa2 	bl	8007e0a <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	d14b      	bne.n	8006f64 <SD_InitCard+0xd4>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ecc:	2100      	movs	r1, #0
 8006ece:	6820      	ldr	r0, [r4, #0]
 8006ed0:	f000 fd1b 	bl	800790a <SDMMC_GetResponse>
 8006ed4:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006ed6:	2104      	movs	r1, #4
 8006ed8:	6820      	ldr	r0, [r4, #0]
 8006eda:	f000 fd16 	bl	800790a <SDMMC_GetResponse>
 8006ede:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006ee0:	2108      	movs	r1, #8
 8006ee2:	6820      	ldr	r0, [r4, #0]
 8006ee4:	f000 fd11 	bl	800790a <SDMMC_GetResponse>
 8006ee8:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006eea:	210c      	movs	r1, #12
 8006eec:	6820      	ldr	r0, [r4, #0]
 8006eee:	f000 fd0c 	bl	800790a <SDMMC_GetResponse>
 8006ef2:	66e0      	str	r0, [r4, #108]	; 0x6c
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006ef4:	2104      	movs	r1, #4
 8006ef6:	6820      	ldr	r0, [r4, #0]
 8006ef8:	f000 fd07 	bl	800790a <SDMMC_GetResponse>
 8006efc:	0d00      	lsrs	r0, r0, #20
 8006efe:	6460      	str	r0, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006f00:	a901      	add	r1, sp, #4
 8006f02:	4620      	mov	r0, r4
 8006f04:	f7ff fee6 	bl	8006cd4 <HAL_SD_GetCardCSD>
 8006f08:	bb78      	cbnz	r0, 8006f6a <SD_InitCard+0xda>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006f0a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006f0c:	0412      	lsls	r2, r2, #16
 8006f0e:	2300      	movs	r3, #0
 8006f10:	6820      	ldr	r0, [r4, #0]
 8006f12:	f000 febf 	bl	8007c94 <SDMMC_CmdSelDesel>
 8006f16:	4603      	mov	r3, r0
 8006f18:	e024      	b.n	8006f64 <SD_InitCard+0xd4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006f1a:	6820      	ldr	r0, [r4, #0]
 8006f1c:	f000 ff5f 	bl	8007dde <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f20:	4603      	mov	r3, r0
 8006f22:	b9f8      	cbnz	r0, 8006f64 <SD_InitCard+0xd4>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f24:	2100      	movs	r1, #0
 8006f26:	6820      	ldr	r0, [r4, #0]
 8006f28:	f000 fcef 	bl	800790a <SDMMC_GetResponse>
 8006f2c:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006f2e:	2104      	movs	r1, #4
 8006f30:	6820      	ldr	r0, [r4, #0]
 8006f32:	f000 fcea 	bl	800790a <SDMMC_GetResponse>
 8006f36:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006f38:	2108      	movs	r1, #8
 8006f3a:	6820      	ldr	r0, [r4, #0]
 8006f3c:	f000 fce5 	bl	800790a <SDMMC_GetResponse>
 8006f40:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006f42:	210c      	movs	r1, #12
 8006f44:	6820      	ldr	r0, [r4, #0]
 8006f46:	f000 fce0 	bl	800790a <SDMMC_GetResponse>
 8006f4a:	67e0      	str	r0, [r4, #124]	; 0x7c
 8006f4c:	e7ae      	b.n	8006eac <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006f4e:	f10d 0102 	add.w	r1, sp, #2
 8006f52:	6820      	ldr	r0, [r4, #0]
 8006f54:	f000 ff6f 	bl	8007e36 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	d0a9      	beq.n	8006eb2 <SD_InitCard+0x22>
 8006f5e:	e001      	b.n	8006f64 <SD_InitCard+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f60:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	b00c      	add	sp, #48	; 0x30
 8006f68:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f6e:	e7f9      	b.n	8006f64 <SD_InitCard+0xd4>

08006f70 <HAL_SD_InitCard>:
{
 8006f70:	b510      	push	{r4, lr}
 8006f72:	b08a      	sub	sp, #40	; 0x28
 8006f74:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006f76:	2300      	movs	r3, #0
 8006f78:	9304      	str	r3, [sp, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006f7a:	9305      	str	r3, [sp, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006f7c:	9306      	str	r3, [sp, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006f7e:	9307      	str	r3, [sp, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006f80:	23fa      	movs	r3, #250	; 0xfa
 8006f82:	9308      	str	r3, [sp, #32]
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8006f84:	6983      	ldr	r3, [r0, #24]
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d028      	beq.n	8006fdc <HAL_SD_InitCard+0x6c>
  (void)SDMMC_Init(hsd->Instance, Init);
 8006f8a:	ab0a      	add	r3, sp, #40	; 0x28
 8006f8c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8006f90:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006f94:	ab04      	add	r3, sp, #16
 8006f96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f98:	6820      	ldr	r0, [r4, #0]
 8006f9a:	f000 fc75 	bl	8007888 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006f9e:	6820      	ldr	r0, [r4, #0]
 8006fa0:	f000 fc94 	bl	80078cc <SDMMC_PowerState_ON>
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 8006fa4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006fa8:	f7fe fa0c 	bl	80053c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006fac:	4b20      	ldr	r3, [pc, #128]	; (8007030 <HAL_SD_InitCard+0xc0>)
 8006fae:	fba3 3000 	umull	r3, r0, r3, r0
  if(sdmmc_clk != 0U)
 8006fb2:	0940      	lsrs	r0, r0, #5
 8006fb4:	d018      	beq.n	8006fe8 <HAL_SD_InitCard+0x78>
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8006fb6:	4b1f      	ldr	r3, [pc, #124]	; (8007034 <HAL_SD_InitCard+0xc4>)
 8006fb8:	fbb3 f0f0 	udiv	r0, r3, r0
 8006fbc:	3001      	adds	r0, #1
 8006fbe:	f7f9 fb73 	bl	80006a8 <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f7ff fdd0 	bl	8006b68 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fc8:	4602      	mov	r2, r0
 8006fca:	b188      	cbz	r0, 8006ff0 <HAL_SD_InitCard+0x80>
    hsd->State = HAL_SD_STATE_READY;
 8006fcc:	2001      	movs	r0, #1
 8006fce:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006fd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8006fd8:	b00a      	add	sp, #40	; 0x28
 8006fda:	bd10      	pop	{r4, pc}
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8006fdc:	6802      	ldr	r2, [r0, #0]
 8006fde:	6813      	ldr	r3, [r2, #0]
 8006fe0:	f043 0310 	orr.w	r3, r3, #16
 8006fe4:	6013      	str	r3, [r2, #0]
 8006fe6:	e7d0      	b.n	8006f8a <HAL_SD_InitCard+0x1a>
    HAL_Delay(2U);
 8006fe8:	2002      	movs	r0, #2
 8006fea:	f7f9 fb5d 	bl	80006a8 <HAL_Delay>
 8006fee:	e7e8      	b.n	8006fc2 <HAL_SD_InitCard+0x52>
  errorstate = SD_InitCard(hsd);
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f7ff ff4d 	bl	8006e90 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	b130      	cbz	r0, 8007008 <HAL_SD_InitCard+0x98>
    hsd->State = HAL_SD_STATE_READY;
 8006ffa:	2001      	movs	r0, #1
 8006ffc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007000:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007002:	4313      	orrs	r3, r2
 8007004:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8007006:	e7e7      	b.n	8006fd8 <HAL_SD_InitCard+0x68>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007008:	f44f 7100 	mov.w	r1, #512	; 0x200
 800700c:	6820      	ldr	r0, [r4, #0]
 800700e:	f000 fd97 	bl	8007b40 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007012:	4603      	mov	r3, r0
 8007014:	b148      	cbz	r0, 800702a <HAL_SD_InitCard+0xba>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007016:	6822      	ldr	r2, [r4, #0]
 8007018:	4907      	ldr	r1, [pc, #28]	; (8007038 <HAL_SD_InitCard+0xc8>)
 800701a:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800701c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800701e:	4318      	orrs	r0, r3
 8007020:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007022:	2001      	movs	r0, #1
 8007024:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    return HAL_ERROR;
 8007028:	e7d6      	b.n	8006fd8 <HAL_SD_InitCard+0x68>
  return HAL_OK;
 800702a:	2000      	movs	r0, #0
 800702c:	e7d4      	b.n	8006fd8 <HAL_SD_InitCard+0x68>
 800702e:	bf00      	nop
 8007030:	10624dd3 	.word	0x10624dd3
 8007034:	00012110 	.word	0x00012110
 8007038:	1fe00fff 	.word	0x1fe00fff

0800703c <HAL_SD_GetCardStatus>:
{
 800703c:	b530      	push	{r4, r5, lr}
 800703e:	b091      	sub	sp, #68	; 0x44
 8007040:	4605      	mov	r5, r0
 8007042:	460c      	mov	r4, r1
  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007044:	4669      	mov	r1, sp
 8007046:	f7ff fa0f 	bl	8006468 <SD_SendSDStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800704a:	b1c8      	cbz	r0, 8007080 <HAL_SD_GetCardStatus+0x44>
 800704c:	4603      	mov	r3, r0
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800704e:	682a      	ldr	r2, [r5, #0]
 8007050:	4929      	ldr	r1, [pc, #164]	; (80070f8 <HAL_SD_GetCardStatus+0xbc>)
 8007052:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007054:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8007056:	4318      	orrs	r0, r3
 8007058:	63a8      	str	r0, [r5, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800705a:	2401      	movs	r4, #1
 800705c:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007060:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007064:	6828      	ldr	r0, [r5, #0]
 8007066:	f000 fd6b 	bl	8007b40 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800706a:	b130      	cbz	r0, 800707a <HAL_SD_GetCardStatus+0x3e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800706c:	682a      	ldr	r2, [r5, #0]
 800706e:	4922      	ldr	r1, [pc, #136]	; (80070f8 <HAL_SD_GetCardStatus+0xbc>)
 8007070:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007072:	63a8      	str	r0, [r5, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007074:	2401      	movs	r4, #1
 8007076:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
}
 800707a:	4620      	mov	r0, r4
 800707c:	b011      	add	sp, #68	; 0x44
 800707e:	bd30      	pop	{r4, r5, pc}
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007080:	9a00      	ldr	r2, [sp, #0]
 8007082:	f3c2 1381 	ubfx	r3, r2, #6, #2
 8007086:	7023      	strb	r3, [r4, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007088:	f3c2 1340 	ubfx	r3, r2, #5, #1
 800708c:	7063      	strb	r3, [r4, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800708e:	0a13      	lsrs	r3, r2, #8
 8007090:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007094:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8007098:	b29b      	uxth	r3, r3
 800709a:	8063      	strh	r3, [r4, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800709c:	9a01      	ldr	r2, [sp, #4]
 800709e:	0213      	lsls	r3, r2, #8
 80070a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80070a8:	0a11      	lsrs	r1, r2, #8
 80070aa:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80070ae:	430b      	orrs	r3, r1
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80070b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80070b4:	6063      	str	r3, [r4, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80070b6:	9b02      	ldr	r3, [sp, #8]
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	7222      	strb	r2, [r4, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80070bc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80070c0:	7262      	strb	r2, [r4, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80070c2:	f3c3 5203 	ubfx	r2, r3, #20, #4
 80070c6:	72a2      	strb	r2, [r4, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80070c8:	0c1b      	lsrs	r3, r3, #16
 80070ca:	9a03      	ldr	r2, [sp, #12]
 80070cc:	b2d1      	uxtb	r1, r2
 80070ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80070d2:	430b      	orrs	r3, r1
 80070d4:	81a3      	strh	r3, [r4, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80070d6:	f3c2 2385 	ubfx	r3, r2, #10, #6
 80070da:	73a3      	strb	r3, [r4, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80070dc:	f3c2 2301 	ubfx	r3, r2, #8, #2
 80070e0:	73e3      	strb	r3, [r4, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80070e2:	f3c2 1303 	ubfx	r3, r2, #4, #4
 80070e6:	7423      	strb	r3, [r4, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80070e8:	f002 020f 	and.w	r2, r2, #15
 80070ec:	7462      	strb	r2, [r4, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80070ee:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80070f2:	74a3      	strb	r3, [r4, #18]
  HAL_StatusTypeDef status = HAL_OK;
 80070f4:	2400      	movs	r4, #0
 80070f6:	e7b3      	b.n	8007060 <HAL_SD_GetCardStatus+0x24>
 80070f8:	1fe00fff 	.word	0x1fe00fff

080070fc <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80070fc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80070fe:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007100:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007102:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007104:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007106:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007108:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800710a:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800710c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800710e:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007110:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007112:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007114:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8007116:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007118:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800711a:	61cb      	str	r3, [r1, #28]
}
 800711c:	2000      	movs	r0, #0
 800711e:	4770      	bx	lr

08007120 <HAL_SD_ConfigWideBusOperation>:
{
 8007120:	b530      	push	{r4, r5, lr}
 8007122:	b08b      	sub	sp, #44	; 0x2c
 8007124:	4604      	mov	r4, r0
 8007126:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8007128:	2303      	movs	r3, #3
 800712a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 800712e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8007130:	2b03      	cmp	r3, #3
 8007132:	d01c      	beq.n	800716e <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007134:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8007138:	d008      	beq.n	800714c <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800713a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800713e:	d00a      	beq.n	8007156 <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007140:	b179      	cbz	r1, 8007162 <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007142:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007144:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007148:	6383      	str	r3, [r0, #56]	; 0x38
 800714a:	e014      	b.n	8007176 <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800714c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800714e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007152:	6383      	str	r3, [r0, #56]	; 0x38
 8007154:	e00f      	b.n	8007176 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 8007156:	f7ff fa99 	bl	800668c <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 800715a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800715c:	4318      	orrs	r0, r3
 800715e:	63a0      	str	r0, [r4, #56]	; 0x38
 8007160:	e009      	b.n	8007176 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 8007162:	f7ff fabe 	bl	80066e2 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8007166:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007168:	4318      	orrs	r0, r3
 800716a:	63a0      	str	r0, [r4, #56]	; 0x38
 800716c:	e003      	b.n	8007176 <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800716e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007174:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007176:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007178:	b1bb      	cbz	r3, 80071aa <HAL_SD_ConfigWideBusOperation+0x8a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	4a1e      	ldr	r2, [pc, #120]	; (80071f8 <HAL_SD_ConfigWideBusOperation+0xd8>)
 800717e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007180:	2501      	movs	r5, #1
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007182:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007186:	6820      	ldr	r0, [r4, #0]
 8007188:	f000 fcda 	bl	8007b40 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800718c:	4603      	mov	r3, r0
 800718e:	b130      	cbz	r0, 800719e <HAL_SD_ConfigWideBusOperation+0x7e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007190:	6822      	ldr	r2, [r4, #0]
 8007192:	4919      	ldr	r1, [pc, #100]	; (80071f8 <HAL_SD_ConfigWideBusOperation+0xd8>)
 8007194:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007196:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007198:	4318      	orrs	r0, r3
 800719a:	63a0      	str	r0, [r4, #56]	; 0x38
    status = HAL_ERROR;
 800719c:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 800719e:	2301      	movs	r3, #1
 80071a0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80071a4:	4628      	mov	r0, r5
 80071a6:	b00b      	add	sp, #44	; 0x2c
 80071a8:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80071aa:	6863      	ldr	r3, [r4, #4]
 80071ac:	9304      	str	r3, [sp, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80071ae:	68a3      	ldr	r3, [r4, #8]
 80071b0:	9305      	str	r3, [sp, #20]
    Init.BusWide             = WideMode;
 80071b2:	9506      	str	r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80071b4:	6923      	ldr	r3, [r4, #16]
 80071b6:	9307      	str	r3, [sp, #28]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 80071b8:	6963      	ldr	r3, [r4, #20]
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d90c      	bls.n	80071d8 <HAL_SD_ConfigWideBusOperation+0xb8>
      Init.ClockDiv = hsd->Init.ClockDiv;
 80071be:	9308      	str	r3, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 80071c0:	ab0a      	add	r3, sp, #40	; 0x28
 80071c2:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80071c6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80071ca:	ab04      	add	r3, sp, #16
 80071cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80071ce:	6820      	ldr	r0, [r4, #0]
 80071d0:	f000 fb5a 	bl	8007888 <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 80071d4:	2500      	movs	r5, #0
 80071d6:	e7d4      	b.n	8007182 <HAL_SD_ConfigWideBusOperation+0x62>
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80071d8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80071da:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80071de:	d005      	beq.n	80071ec <HAL_SD_ConfigWideBusOperation+0xcc>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80071e0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80071e4:	d004      	beq.n	80071f0 <HAL_SD_ConfigWideBusOperation+0xd0>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 80071e6:	2304      	movs	r3, #4
 80071e8:	9308      	str	r3, [sp, #32]
 80071ea:	e7e9      	b.n	80071c0 <HAL_SD_ConfigWideBusOperation+0xa0>
      Init.ClockDiv = hsd->Init.ClockDiv;
 80071ec:	9308      	str	r3, [sp, #32]
 80071ee:	e7e7      	b.n	80071c0 <HAL_SD_ConfigWideBusOperation+0xa0>
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 80071f0:	2302      	movs	r3, #2
 80071f2:	9308      	str	r3, [sp, #32]
 80071f4:	e7e4      	b.n	80071c0 <HAL_SD_ConfigWideBusOperation+0xa0>
 80071f6:	bf00      	nop
 80071f8:	1fe00fff 	.word	0x1fe00fff

080071fc <HAL_SD_GetCardState>:
{
 80071fc:	b510      	push	{r4, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 8007202:	a902      	add	r1, sp, #8
 8007204:	2300      	movs	r3, #0
 8007206:	f841 3d04 	str.w	r3, [r1, #-4]!
  errorstate = SD_SendStatus(hsd, &resp1);
 800720a:	f7ff fa95 	bl	8006738 <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800720e:	b118      	cbz	r0, 8007218 <HAL_SD_GetCardState+0x1c>
 8007210:	4603      	mov	r3, r0
    hsd->ErrorCode |= errorstate;
 8007212:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007214:	4318      	orrs	r0, r3
 8007216:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8007218:	9801      	ldr	r0, [sp, #4]
 800721a:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800721e:	b002      	add	sp, #8
 8007220:	bd10      	pop	{r4, pc}

08007222 <HAL_SD_Init>:
{
 8007222:	b570      	push	{r4, r5, r6, lr}
 8007224:	b086      	sub	sp, #24
  if(hsd == NULL)
 8007226:	2800      	cmp	r0, #0
 8007228:	d058      	beq.n	80072dc <HAL_SD_Init+0xba>
 800722a:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 800722c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8007230:	b93b      	cbnz	r3, 8007242 <HAL_SD_Init+0x20>
    hsd->Lock = HAL_UNLOCKED;
 8007232:	7703      	strb	r3, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8007234:	6983      	ldr	r3, [r0, #24]
 8007236:	b90b      	cbnz	r3, 800723c <HAL_SD_Init+0x1a>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8007238:	2302      	movs	r3, #2
 800723a:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 800723c:	4620      	mov	r0, r4
 800723e:	f005 faad 	bl	800c79c <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8007242:	2303      	movs	r3, #3
 8007244:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007248:	4620      	mov	r0, r4
 800724a:	f7ff fe91 	bl	8006f70 <HAL_SD_InitCard>
 800724e:	b118      	cbz	r0, 8007258 <HAL_SD_Init+0x36>
    return HAL_ERROR;
 8007250:	2501      	movs	r5, #1
}
 8007252:	4628      	mov	r0, r5
 8007254:	b006      	add	sp, #24
 8007256:	bd70      	pop	{r4, r5, r6, pc}
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007258:	a901      	add	r1, sp, #4
 800725a:	4620      	mov	r0, r4
 800725c:	f7ff feee 	bl	800703c <HAL_SD_GetCardStatus>
 8007260:	2800      	cmp	r0, #0
 8007262:	d13d      	bne.n	80072e0 <HAL_SD_Init+0xbe>
  speedgrade = CardStatus.UhsSpeedGrade;
 8007264:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8007268:	b2da      	uxtb	r2, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 800726a:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800726e:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007270:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007272:	2901      	cmp	r1, #1
 8007274:	d00b      	beq.n	800728e <HAL_SD_Init+0x6c>
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007276:	2901      	cmp	r1, #1
 8007278:	d00f      	beq.n	800729a <HAL_SD_Init+0x78>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800727a:	2300      	movs	r3, #0
 800727c:	65e3      	str	r3, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800727e:	68e1      	ldr	r1, [r4, #12]
 8007280:	4620      	mov	r0, r4
 8007282:	f7ff ff4d 	bl	8007120 <HAL_SD_ConfigWideBusOperation>
 8007286:	4605      	mov	r5, r0
 8007288:	b158      	cbz	r0, 80072a2 <HAL_SD_Init+0x80>
    return HAL_ERROR;
 800728a:	2501      	movs	r5, #1
 800728c:	e7e1      	b.n	8007252 <HAL_SD_Init+0x30>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800728e:	4313      	orrs	r3, r2
 8007290:	d0f1      	beq.n	8007276 <HAL_SD_Init+0x54>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007292:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007296:	65e3      	str	r3, [r4, #92]	; 0x5c
 8007298:	e7f1      	b.n	800727e <HAL_SD_Init+0x5c>
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800729a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800729e:	65e3      	str	r3, [r4, #92]	; 0x5c
 80072a0:	e7ed      	b.n	800727e <HAL_SD_Init+0x5c>
  tickstart = HAL_GetTick();
 80072a2:	f7f9 f9fb 	bl	800069c <HAL_GetTick>
 80072a6:	4606      	mov	r6, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80072a8:	4620      	mov	r0, r4
 80072aa:	f7ff ffa7 	bl	80071fc <HAL_SD_GetCardState>
 80072ae:	2804      	cmp	r0, #4
 80072b0:	d00d      	beq.n	80072ce <HAL_SD_Init+0xac>
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80072b2:	f7f9 f9f3 	bl	800069c <HAL_GetTick>
 80072b6:	1b80      	subs	r0, r0, r6
 80072b8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80072bc:	d1f4      	bne.n	80072a8 <HAL_SD_Init+0x86>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80072be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80072c2:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80072c4:	2301      	movs	r3, #1
 80072c6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 80072ca:	2503      	movs	r5, #3
 80072cc:	e7c1      	b.n	8007252 <HAL_SD_Init+0x30>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80072ce:	2300      	movs	r3, #0
 80072d0:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80072d2:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80072d4:	2301      	movs	r3, #1
 80072d6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80072da:	e7ba      	b.n	8007252 <HAL_SD_Init+0x30>
    return HAL_ERROR;
 80072dc:	2501      	movs	r5, #1
 80072de:	e7b8      	b.n	8007252 <HAL_SD_Init+0x30>
    return HAL_ERROR;
 80072e0:	2501      	movs	r5, #1
 80072e2:	e7b6      	b.n	8007252 <HAL_SD_Init+0x30>

080072e4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80072e4:	4770      	bx	lr

080072e6 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80072e6:	4770      	bx	lr

080072e8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80072e8:	4770      	bx	lr

080072ea <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80072ea:	4770      	bx	lr

080072ec <HAL_SD_IRQHandler>:
{
 80072ec:	b538      	push	{r3, r4, r5, lr}
 80072ee:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 80072f0:	6b05      	ldr	r5, [r0, #48]	; 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80072f2:	6803      	ldr	r3, [r0, #0]
 80072f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072f6:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80072fa:	d002      	beq.n	8007302 <HAL_SD_IRQHandler+0x16>
 80072fc:	f015 0f08 	tst.w	r5, #8
 8007300:	d12a      	bne.n	8007358 <HAL_SD_IRQHandler+0x6c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007304:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007308:	d067      	beq.n	80073da <HAL_SD_IRQHandler+0xee>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800730a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800730e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8007310:	6822      	ldr	r2, [r4, #0]
 8007312:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8007314:	4b7e      	ldr	r3, [pc, #504]	; (8007510 <HAL_SD_IRQHandler+0x224>)
 8007316:	400b      	ands	r3, r1
 8007318:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800731a:	6822      	ldr	r2, [r4, #0]
 800731c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800731e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007322:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007324:	6822      	ldr	r2, [r4, #0]
 8007326:	68d3      	ldr	r3, [r2, #12]
 8007328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800732c:	60d3      	str	r3, [r2, #12]
    if((context & SD_CONTEXT_IT) != 0U)
 800732e:	f015 0f08 	tst.w	r5, #8
 8007332:	d025      	beq.n	8007380 <HAL_SD_IRQHandler+0x94>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007334:	f015 0f22 	tst.w	r5, #34	; 0x22
 8007338:	d111      	bne.n	800735e <HAL_SD_IRQHandler+0x72>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	4a75      	ldr	r2, [pc, #468]	; (8007514 <HAL_SD_IRQHandler+0x228>)
 800733e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007340:	2301      	movs	r3, #1
 8007342:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007346:	2300      	movs	r3, #0
 8007348:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800734a:	f015 0f03 	tst.w	r5, #3
 800734e:	d013      	beq.n	8007378 <HAL_SD_IRQHandler+0x8c>
        HAL_SD_RxCpltCallback(hsd);
 8007350:	4620      	mov	r0, r4
 8007352:	f004 f909 	bl	800b568 <HAL_SD_RxCpltCallback>
 8007356:	e001      	b.n	800735c <HAL_SD_IRQHandler+0x70>
    SD_Read_IT(hsd);
 8007358:	f7ff f842 	bl	80063e0 <SD_Read_IT>
}
 800735c:	bd38      	pop	{r3, r4, r5, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800735e:	6820      	ldr	r0, [r4, #0]
 8007360:	f000 fc6c 	bl	8007c3c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8007364:	4603      	mov	r3, r0
 8007366:	2800      	cmp	r0, #0
 8007368:	d0e7      	beq.n	800733a <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
 800736a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800736c:	4313      	orrs	r3, r2
 800736e:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007370:	4620      	mov	r0, r4
 8007372:	f7ff fbf7 	bl	8006b64 <HAL_SD_ErrorCallback>
 8007376:	e7e0      	b.n	800733a <HAL_SD_IRQHandler+0x4e>
        HAL_SD_TxCpltCallback(hsd);
 8007378:	4620      	mov	r0, r4
 800737a:	f004 f8f0 	bl	800b55e <HAL_SD_TxCpltCallback>
 800737e:	e7ed      	b.n	800735c <HAL_SD_IRQHandler+0x70>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007380:	f015 0f80 	tst.w	r5, #128	; 0x80
 8007384:	d0ea      	beq.n	800735c <HAL_SD_IRQHandler+0x70>
      hsd->Instance->DLEN = 0;
 8007386:	6822      	ldr	r2, [r4, #0]
 8007388:	2300      	movs	r3, #0
 800738a:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800738c:	6822      	ldr	r2, [r4, #0]
 800738e:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007390:	6822      	ldr	r2, [r4, #0]
 8007392:	6513      	str	r3, [r2, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007394:	f015 0f22 	tst.w	r5, #34	; 0x22
 8007398:	d10e      	bne.n	80073b8 <HAL_SD_IRQHandler+0xcc>
      hsd->State = HAL_SD_STATE_READY;
 800739a:	2301      	movs	r3, #1
 800739c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80073a0:	2300      	movs	r3, #0
 80073a2:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80073a4:	f015 0f30 	tst.w	r5, #48	; 0x30
 80073a8:	d113      	bne.n	80073d2 <HAL_SD_IRQHandler+0xe6>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80073aa:	f015 0f03 	tst.w	r5, #3
 80073ae:	d0d5      	beq.n	800735c <HAL_SD_IRQHandler+0x70>
        HAL_SD_RxCpltCallback(hsd);
 80073b0:	4620      	mov	r0, r4
 80073b2:	f004 f8d9 	bl	800b568 <HAL_SD_RxCpltCallback>
 80073b6:	e7d1      	b.n	800735c <HAL_SD_IRQHandler+0x70>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80073b8:	6820      	ldr	r0, [r4, #0]
 80073ba:	f000 fc3f 	bl	8007c3c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80073be:	4603      	mov	r3, r0
 80073c0:	2800      	cmp	r0, #0
 80073c2:	d0ea      	beq.n	800739a <HAL_SD_IRQHandler+0xae>
          hsd->ErrorCode |= errorstate;
 80073c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80073c6:	4313      	orrs	r3, r2
 80073c8:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80073ca:	4620      	mov	r0, r4
 80073cc:	f7ff fbca 	bl	8006b64 <HAL_SD_ErrorCallback>
 80073d0:	e7e3      	b.n	800739a <HAL_SD_IRQHandler+0xae>
        HAL_SD_TxCpltCallback(hsd);
 80073d2:	4620      	mov	r0, r4
 80073d4:	f004 f8c3 	bl	800b55e <HAL_SD_TxCpltCallback>
 80073d8:	e7e7      	b.n	80073aa <HAL_SD_IRQHandler+0xbe>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80073da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073dc:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80073e0:	d002      	beq.n	80073e8 <HAL_SD_IRQHandler+0xfc>
 80073e2:	f015 0f08 	tst.w	r5, #8
 80073e6:	d162      	bne.n	80074ae <HAL_SD_IRQHandler+0x1c2>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80073e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073ea:	f012 0f3a 	tst.w	r2, #58	; 0x3a
 80073ee:	d06b      	beq.n	80074c8 <HAL_SD_IRQHandler+0x1dc>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80073f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073f2:	f012 0f02 	tst.w	r2, #2
 80073f6:	d003      	beq.n	8007400 <HAL_SD_IRQHandler+0x114>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80073f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80073fa:	f042 0202 	orr.w	r2, r2, #2
 80073fe:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8007400:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007402:	f012 0f08 	tst.w	r2, #8
 8007406:	d003      	beq.n	8007410 <HAL_SD_IRQHandler+0x124>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007408:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800740a:	f042 0208 	orr.w	r2, r2, #8
 800740e:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007412:	f012 0f20 	tst.w	r2, #32
 8007416:	d003      	beq.n	8007420 <HAL_SD_IRQHandler+0x134>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007418:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800741a:	f042 0220 	orr.w	r2, r2, #32
 800741e:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8007420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007422:	f012 0f10 	tst.w	r2, #16
 8007426:	d003      	beq.n	8007430 <HAL_SD_IRQHandler+0x144>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007428:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800742a:	f042 0210 	orr.w	r2, r2, #16
 800742e:	63a2      	str	r2, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007430:	4a38      	ldr	r2, [pc, #224]	; (8007514 <HAL_SD_IRQHandler+0x228>)
 8007432:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007434:	6822      	ldr	r2, [r4, #0]
 8007436:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8007438:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 800743c:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800743e:	6822      	ldr	r2, [r4, #0]
 8007440:	68d3      	ldr	r3, [r2, #12]
 8007442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007446:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8007448:	6822      	ldr	r2, [r4, #0]
 800744a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800744c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007450:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8007452:	6822      	ldr	r2, [r4, #0]
 8007454:	68d3      	ldr	r3, [r2, #12]
 8007456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800745a:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800745c:	6820      	ldr	r0, [r4, #0]
 800745e:	f000 fbed 	bl	8007c3c <SDMMC_CmdStopTransfer>
 8007462:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007464:	4318      	orrs	r0, r3
 8007466:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8007468:	6822      	ldr	r2, [r4, #0]
 800746a:	68d3      	ldr	r3, [r2, #12]
 800746c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007470:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007478:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800747a:	f015 0f08 	tst.w	r5, #8
 800747e:	d11a      	bne.n	80074b6 <HAL_SD_IRQHandler+0x1ca>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007480:	f015 0f80 	tst.w	r5, #128	; 0x80
 8007484:	f43f af6a 	beq.w	800735c <HAL_SD_IRQHandler+0x70>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007488:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800748a:	2b00      	cmp	r3, #0
 800748c:	f43f af66 	beq.w	800735c <HAL_SD_IRQHandler+0x70>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007490:	6822      	ldr	r2, [r4, #0]
 8007492:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8007494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007498:	63d3      	str	r3, [r2, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	2200      	movs	r2, #0
 800749e:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80074a0:	2301      	movs	r3, #1
 80074a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 80074a6:	4620      	mov	r0, r4
 80074a8:	f7ff fb5c 	bl	8006b64 <HAL_SD_ErrorCallback>
 80074ac:	e756      	b.n	800735c <HAL_SD_IRQHandler+0x70>
    SD_Write_IT(hsd);
 80074ae:	4620      	mov	r0, r4
 80074b0:	f7fe ffb3 	bl	800641a <SD_Write_IT>
 80074b4:	e752      	b.n	800735c <HAL_SD_IRQHandler+0x70>
      hsd->State = HAL_SD_STATE_READY;
 80074b6:	2301      	movs	r3, #1
 80074b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80074bc:	2300      	movs	r3, #0
 80074be:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80074c0:	4620      	mov	r0, r4
 80074c2:	f7ff fb4f 	bl	8006b64 <HAL_SD_ErrorCallback>
 80074c6:	e749      	b.n	800735c <HAL_SD_IRQHandler+0x70>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80074c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074ca:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80074ce:	f43f af45 	beq.w	800735c <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80074d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074d6:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80074d8:	6823      	ldr	r3, [r4, #0]
 80074da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074dc:	f013 0f04 	tst.w	r3, #4
 80074e0:	d10a      	bne.n	80074f8 <HAL_SD_IRQHandler+0x20c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80074e2:	f015 0f20 	tst.w	r5, #32
 80074e6:	d003      	beq.n	80074f0 <HAL_SD_IRQHandler+0x204>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80074e8:	4620      	mov	r0, r4
 80074ea:	f7ff fefe 	bl	80072ea <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 80074ee:	e735      	b.n	800735c <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80074f0:	4620      	mov	r0, r4
 80074f2:	f7ff fef8 	bl	80072e6 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 80074f6:	e731      	b.n	800735c <HAL_SD_IRQHandler+0x70>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80074f8:	f015 0f20 	tst.w	r5, #32
 80074fc:	d103      	bne.n	8007506 <HAL_SD_IRQHandler+0x21a>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80074fe:	4620      	mov	r0, r4
 8007500:	f7ff fef0 	bl	80072e4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8007504:	e72a      	b.n	800735c <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8007506:	4620      	mov	r0, r4
 8007508:	f7ff feee 	bl	80072e8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 800750c:	e726      	b.n	800735c <HAL_SD_IRQHandler+0x70>
 800750e:	bf00      	nop
 8007510:	ffff3ec5 	.word	0xffff3ec5
 8007514:	18000f3a 	.word	0x18000f3a

08007518 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007518:	b308      	cbz	r0, 800755e <HAL_SDRAM_Init+0x46>
{
 800751a:	b538      	push	{r3, r4, r5, lr}
 800751c:	4604      	mov	r4, r0
 800751e:	460d      	mov	r5, r1
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007520:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8007524:	b1b3      	cbz	r3, 8007554 <HAL_SDRAM_Init+0x3c>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007526:	2302      	movs	r3, #2
 8007528:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800752c:	4621      	mov	r1, r4
 800752e:	f851 0b04 	ldr.w	r0, [r1], #4
 8007532:	f000 f857 	bl	80075e4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007536:	6862      	ldr	r2, [r4, #4]
 8007538:	4629      	mov	r1, r5
 800753a:	6820      	ldr	r0, [r4, #0]
 800753c:	f000 f88c 	bl	8007658 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8007540:	4a08      	ldr	r2, [pc, #32]	; (8007564 <HAL_SDRAM_Init+0x4c>)
 8007542:	6813      	ldr	r3, [r2, #0]
 8007544:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007548:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800754a:	2301      	movs	r3, #1
 800754c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  return HAL_OK;
 8007550:	2000      	movs	r0, #0
}
 8007552:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8007554:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8007558:	f004 f9b8 	bl	800b8cc <HAL_SDRAM_MspInit>
 800755c:	e7e3      	b.n	8007526 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 800755e:	2001      	movs	r0, #1
}
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	52004000 	.word	0x52004000

08007568 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007568:	b538      	push	{r3, r4, r5, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800756a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800756e:	b2db      	uxtb	r3, r3
  
  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007570:	2b02      	cmp	r3, #2
 8007572:	d01a      	beq.n	80075aa <HAL_SDRAM_SendCommand+0x42>
  {
    return HAL_BUSY;
  }
  else if((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8007574:	2b05      	cmp	r3, #5
 8007576:	bf18      	it	ne
 8007578:	2b01      	cmpne	r3, #1
 800757a:	d001      	beq.n	8007580 <HAL_SDRAM_SendCommand+0x18>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 800757c:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800757e:	bd38      	pop	{r3, r4, r5, pc}
 8007580:	460d      	mov	r5, r1
 8007582:	4604      	mov	r4, r0
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007584:	2302      	movs	r3, #2
 8007586:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800758a:	6800      	ldr	r0, [r0, #0]
 800758c:	f000 f8b0 	bl	80076f0 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007590:	682b      	ldr	r3, [r5, #0]
 8007592:	2b02      	cmp	r3, #2
 8007594:	d004      	beq.n	80075a0 <HAL_SDRAM_SendCommand+0x38>
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007596:	2301      	movs	r3, #1
 8007598:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 800759c:	2000      	movs	r0, #0
 800759e:	e7ee      	b.n	800757e <HAL_SDRAM_SendCommand+0x16>
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80075a0:	2305      	movs	r3, #5
 80075a2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80075a6:	2000      	movs	r0, #0
 80075a8:	e7e9      	b.n	800757e <HAL_SDRAM_SendCommand+0x16>
    return HAL_BUSY;
 80075aa:	2002      	movs	r0, #2
 80075ac:	e7e7      	b.n	800757e <HAL_SDRAM_SendCommand+0x16>

080075ae <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80075ae:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d013      	beq.n	80075e0 <HAL_SDRAM_ProgramRefreshRate+0x32>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80075b8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d001      	beq.n	80075c6 <HAL_SDRAM_ProgramRefreshRate+0x18>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 80075c2:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 80075c4:	4770      	bx	lr
{
 80075c6:	b510      	push	{r4, lr}
 80075c8:	4604      	mov	r4, r0
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80075ca:	2302      	movs	r3, #2
 80075cc:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80075d0:	6800      	ldr	r0, [r0, #0]
 80075d2:	f000 f89f 	bl	8007714 <FMC_SDRAM_ProgramRefreshRate>
    hsdram->State = HAL_SDRAM_STATE_READY;
 80075d6:	2301      	movs	r3, #1
 80075d8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80075dc:	2000      	movs	r0, #0
}
 80075de:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80075e0:	2002      	movs	r0, #2
 80075e2:	4770      	bx	lr

080075e4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80075e4:	b410      	push	{r4}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80075e6:	680b      	ldr	r3, [r1, #0]
 80075e8:	b1eb      	cbz	r3, 8007626 <FMC_SDRAM_Init+0x42>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80075ea:	6803      	ldr	r3, [r0, #0]
 80075ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075f0:	69ca      	ldr	r2, [r1, #28]
 80075f2:	6a0c      	ldr	r4, [r1, #32]
 80075f4:	4322      	orrs	r2, r4
 80075f6:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80075f8:	4322      	orrs	r2, r4
 80075fa:	4313      	orrs	r3, r2
 80075fc:	6003      	str	r3, [r0, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80075fe:	6843      	ldr	r3, [r0, #4]
 8007600:	4a14      	ldr	r2, [pc, #80]	; (8007654 <FMC_SDRAM_Init+0x70>)
 8007602:	401a      	ands	r2, r3
 8007604:	684b      	ldr	r3, [r1, #4]
 8007606:	688c      	ldr	r4, [r1, #8]
 8007608:	4323      	orrs	r3, r4
 800760a:	68cc      	ldr	r4, [r1, #12]
 800760c:	4323      	orrs	r3, r4
 800760e:	690c      	ldr	r4, [r1, #16]
 8007610:	4323      	orrs	r3, r4
 8007612:	694c      	ldr	r4, [r1, #20]
 8007614:	4323      	orrs	r3, r4
 8007616:	6989      	ldr	r1, [r1, #24]
 8007618:	430b      	orrs	r3, r1
 800761a:	4313      	orrs	r3, r2
 800761c:	6043      	str	r3, [r0, #4]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800761e:	2000      	movs	r0, #0
 8007620:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007624:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007626:	6803      	ldr	r3, [r0, #0]
 8007628:	4a0a      	ldr	r2, [pc, #40]	; (8007654 <FMC_SDRAM_Init+0x70>)
 800762a:	401a      	ands	r2, r3
 800762c:	684b      	ldr	r3, [r1, #4]
 800762e:	688c      	ldr	r4, [r1, #8]
 8007630:	4323      	orrs	r3, r4
 8007632:	68cc      	ldr	r4, [r1, #12]
 8007634:	4323      	orrs	r3, r4
 8007636:	690c      	ldr	r4, [r1, #16]
 8007638:	4323      	orrs	r3, r4
 800763a:	694c      	ldr	r4, [r1, #20]
 800763c:	4323      	orrs	r3, r4
 800763e:	698c      	ldr	r4, [r1, #24]
 8007640:	4323      	orrs	r3, r4
 8007642:	69cc      	ldr	r4, [r1, #28]
 8007644:	4323      	orrs	r3, r4
 8007646:	6a0c      	ldr	r4, [r1, #32]
 8007648:	4323      	orrs	r3, r4
 800764a:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800764c:	430b      	orrs	r3, r1
 800764e:	4313      	orrs	r3, r2
 8007650:	6003      	str	r3, [r0, #0]
 8007652:	e7e4      	b.n	800761e <FMC_SDRAM_Init+0x3a>
 8007654:	ffff8000 	.word	0xffff8000

08007658 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007658:	b410      	push	{r4}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800765a:	b332      	cbz	r2, 80076aa <FMC_SDRAM_Timing_Init+0x52>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800765c:	6883      	ldr	r3, [r0, #8]
 800765e:	4a23      	ldr	r2, [pc, #140]	; (80076ec <FMC_SDRAM_Timing_Init+0x94>)
 8007660:	401a      	ands	r2, r3
 8007662:	68cb      	ldr	r3, [r1, #12]
 8007664:	1e5c      	subs	r4, r3, #1
 8007666:	694b      	ldr	r3, [r1, #20]
 8007668:	3b01      	subs	r3, #1
 800766a:	051b      	lsls	r3, r3, #20
 800766c:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 8007670:	4313      	orrs	r3, r2
 8007672:	6083      	str	r3, [r0, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007674:	68c2      	ldr	r2, [r0, #12]
 8007676:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800767a:	680b      	ldr	r3, [r1, #0]
 800767c:	3b01      	subs	r3, #1
 800767e:	684c      	ldr	r4, [r1, #4]
 8007680:	3c01      	subs	r4, #1
 8007682:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8007686:	688c      	ldr	r4, [r1, #8]
 8007688:	3c01      	subs	r4, #1
 800768a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800768e:	690c      	ldr	r4, [r1, #16]
 8007690:	3c01      	subs	r4, #1
 8007692:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007696:	6989      	ldr	r1, [r1, #24]
 8007698:	3901      	subs	r1, #1
 800769a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800769e:	4313      	orrs	r3, r2
 80076a0:	60c3      	str	r3, [r0, #12]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 80076a2:	2000      	movs	r0, #0
 80076a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076a8:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80076aa:	6882      	ldr	r2, [r0, #8]
 80076ac:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80076b0:	680b      	ldr	r3, [r1, #0]
 80076b2:	3b01      	subs	r3, #1
 80076b4:	684c      	ldr	r4, [r1, #4]
 80076b6:	3c01      	subs	r4, #1
 80076b8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80076bc:	688c      	ldr	r4, [r1, #8]
 80076be:	3c01      	subs	r4, #1
 80076c0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80076c4:	68cc      	ldr	r4, [r1, #12]
 80076c6:	3c01      	subs	r4, #1
 80076c8:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 80076cc:	690c      	ldr	r4, [r1, #16]
 80076ce:	3c01      	subs	r4, #1
 80076d0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80076d4:	694c      	ldr	r4, [r1, #20]
 80076d6:	3c01      	subs	r4, #1
 80076d8:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 80076dc:	6989      	ldr	r1, [r1, #24]
 80076de:	3901      	subs	r1, #1
 80076e0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80076e4:	4313      	orrs	r3, r2
 80076e6:	6083      	str	r3, [r0, #8]
 80076e8:	e7db      	b.n	80076a2 <FMC_SDRAM_Timing_Init+0x4a>
 80076ea:	bf00      	nop
 80076ec:	ff0f0fff 	.word	0xff0f0fff

080076f0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80076f0:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
 80076f2:	6902      	ldr	r2, [r0, #16]
 80076f4:	680b      	ldr	r3, [r1, #0]
 80076f6:	684c      	ldr	r4, [r1, #4]
 80076f8:	4323      	orrs	r3, r4
 80076fa:	688c      	ldr	r4, [r1, #8]
 80076fc:	3c01      	subs	r4, #1
 80076fe:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 8007702:	68c9      	ldr	r1, [r1, #12]
 8007704:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8007708:	4313      	orrs	r3, r2
 800770a:	6103      	str	r3, [r0, #16]
                          (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos)   |
                          ((Command->ModeRegisterDefinition)   << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800770c:	2000      	movs	r0, #0
 800770e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007712:	4770      	bx	lr

08007714 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007714:	6942      	ldr	r2, [r0, #20]
 8007716:	4b03      	ldr	r3, [pc, #12]	; (8007724 <FMC_SDRAM_ProgramRefreshRate+0x10>)
 8007718:	4013      	ands	r3, r2
 800771a:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800771e:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8007720:	2000      	movs	r0, #0
 8007722:	4770      	bx	lr
 8007724:	ffffc001 	.word	0xffffc001

08007728 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007728:	4b0b      	ldr	r3, [pc, #44]	; (8007758 <SDMMC_GetCmdError+0x30>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a0b      	ldr	r2, [pc, #44]	; (800775c <SDMMC_GetCmdError+0x34>)
 800772e:	fba2 2303 	umull	r2, r3, r2, r3
 8007732:	0a5a      	lsrs	r2, r3, #9
 8007734:	f241 3388 	movw	r3, #5000	; 0x1388
 8007738:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 800773c:	1e5a      	subs	r2, r3, #1
 800773e:	b143      	cbz	r3, 8007752 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007740:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 8007742:	4613      	mov	r3, r2
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007744:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007748:	d0f8      	beq.n	800773c <SDMMC_GetCmdError+0x14>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800774a:	4b05      	ldr	r3, [pc, #20]	; (8007760 <SDMMC_GetCmdError+0x38>)
 800774c:	6383      	str	r3, [r0, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800774e:	2000      	movs	r0, #0
 8007750:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007752:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007756:	4770      	bx	lr
 8007758:	20000010 	.word	0x20000010
 800775c:	10624dd3 	.word	0x10624dd3
 8007760:	002000c5 	.word	0x002000c5

08007764 <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007764:	4b15      	ldr	r3, [pc, #84]	; (80077bc <SDMMC_GetCmdResp2+0x58>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a15      	ldr	r2, [pc, #84]	; (80077c0 <SDMMC_GetCmdResp2+0x5c>)
 800776a:	fba2 2303 	umull	r2, r3, r2, r3
 800776e:	0a5a      	lsrs	r2, r3, #9
 8007770:	f241 3388 	movw	r3, #5000	; 0x1388
 8007774:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 8007778:	1e5a      	subs	r2, r3, #1
 800777a:	b1db      	cbz	r3, 80077b4 <SDMMC_GetCmdResp2+0x50>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800777c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800777e:	4613      	mov	r3, r2
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007780:	f011 0f45 	tst.w	r1, #69	; 0x45
 8007784:	d0f8      	beq.n	8007778 <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007786:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 800778a:	d1f5      	bne.n	8007778 <SDMMC_GetCmdResp2+0x14>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800778c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800778e:	f013 0f04 	tst.w	r3, #4
 8007792:	d107      	bne.n	80077a4 <SDMMC_GetCmdResp2+0x40>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007794:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007796:	f013 0f01 	tst.w	r3, #1
 800779a:	d107      	bne.n	80077ac <SDMMC_GetCmdResp2+0x48>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800779c:	4b09      	ldr	r3, [pc, #36]	; (80077c4 <SDMMC_GetCmdResp2+0x60>)
 800779e:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80077a0:	2000      	movs	r0, #0
 80077a2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80077a4:	2304      	movs	r3, #4
 80077a6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80077a8:	4618      	mov	r0, r3
 80077aa:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80077ac:	2301      	movs	r3, #1
 80077ae:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80077b0:	4618      	mov	r0, r3
 80077b2:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80077b4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	20000010 	.word	0x20000010
 80077c0:	10624dd3 	.word	0x10624dd3
 80077c4:	002000c5 	.word	0x002000c5

080077c8 <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80077c8:	4b11      	ldr	r3, [pc, #68]	; (8007810 <SDMMC_GetCmdResp3+0x48>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a11      	ldr	r2, [pc, #68]	; (8007814 <SDMMC_GetCmdResp3+0x4c>)
 80077ce:	fba2 2303 	umull	r2, r3, r2, r3
 80077d2:	0a5a      	lsrs	r2, r3, #9
 80077d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80077d8:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 80077dc:	1e5a      	subs	r2, r3, #1
 80077de:	b19b      	cbz	r3, 8007808 <SDMMC_GetCmdResp3+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 80077e0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80077e2:	4613      	mov	r3, r2
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80077e4:	f011 0f45 	tst.w	r1, #69	; 0x45
 80077e8:	d0f8      	beq.n	80077dc <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80077ea:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 80077ee:	d1f5      	bne.n	80077dc <SDMMC_GetCmdResp3+0x14>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80077f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80077f2:	f013 0f04 	tst.w	r3, #4
 80077f6:	d103      	bne.n	8007800 <SDMMC_GetCmdResp3+0x38>
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80077f8:	4b07      	ldr	r3, [pc, #28]	; (8007818 <SDMMC_GetCmdResp3+0x50>)
 80077fa:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80077fc:	2000      	movs	r0, #0
 80077fe:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007800:	2304      	movs	r3, #4
 8007802:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007804:	4618      	mov	r0, r3
 8007806:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007808:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	20000010 	.word	0x20000010
 8007814:	10624dd3 	.word	0x10624dd3
 8007818:	002000c5 	.word	0x002000c5

0800781c <SDMMC_GetCmdResp7>:
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800781c:	4b18      	ldr	r3, [pc, #96]	; (8007880 <SDMMC_GetCmdResp7+0x64>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a18      	ldr	r2, [pc, #96]	; (8007884 <SDMMC_GetCmdResp7+0x68>)
 8007822:	fba2 2303 	umull	r2, r3, r2, r3
 8007826:	0a5a      	lsrs	r2, r3, #9
 8007828:	f241 3388 	movw	r3, #5000	; 0x1388
 800782c:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 8007830:	1e5a      	subs	r2, r3, #1
 8007832:	b1fb      	cbz	r3, 8007874 <SDMMC_GetCmdResp7+0x58>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8007834:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007836:	4613      	mov	r3, r2
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007838:	f011 0f45 	tst.w	r1, #69	; 0x45
 800783c:	d0f8      	beq.n	8007830 <SDMMC_GetCmdResp7+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800783e:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 8007842:	d1f5      	bne.n	8007830 <SDMMC_GetCmdResp7+0x14>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007844:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007846:	f013 0f04 	tst.w	r3, #4
 800784a:	d10b      	bne.n	8007864 <SDMMC_GetCmdResp7+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800784c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800784e:	f013 0f01 	tst.w	r3, #1
 8007852:	d10b      	bne.n	800786c <SDMMC_GetCmdResp7+0x50>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007854:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007856:	f013 0f40 	tst.w	r3, #64	; 0x40
 800785a:	d00e      	beq.n	800787a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800785c:	2340      	movs	r3, #64	; 0x40
 800785e:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007860:	2000      	movs	r0, #0
 8007862:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007864:	2304      	movs	r3, #4
 8007866:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007868:	4618      	mov	r0, r3
 800786a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800786c:	2301      	movs	r3, #1
 800786e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007870:	4618      	mov	r0, r3
 8007872:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007874:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8007878:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 800787a:	2000      	movs	r0, #0

}
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	20000010 	.word	0x20000010
 8007884:	10624dd3 	.word	0x10624dd3

08007888 <SDMMC_Init>:
{
 8007888:	b084      	sub	sp, #16
 800788a:	b410      	push	{r4}
 800788c:	ac02      	add	r4, sp, #8
 800788e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8007892:	460b      	mov	r3, r1
 8007894:	9a03      	ldr	r2, [sp, #12]
 8007896:	4313      	orrs	r3, r2
             Init.BusWide             |\
 8007898:	9a04      	ldr	r2, [sp, #16]
             Init.ClockPowerSave      |\
 800789a:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 800789c:	9a05      	ldr	r2, [sp, #20]
             Init.BusWide             |\
 800789e:	4313      	orrs	r3, r2
             Init.ClockDiv
 80078a0:	9a06      	ldr	r2, [sp, #24]
             Init.HardwareFlowControl |\
 80078a2:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80078a4:	6841      	ldr	r1, [r0, #4]
 80078a6:	4a04      	ldr	r2, [pc, #16]	; (80078b8 <SDMMC_Init+0x30>)
 80078a8:	400a      	ands	r2, r1
 80078aa:	4313      	orrs	r3, r2
 80078ac:	6043      	str	r3, [r0, #4]
}
 80078ae:	2000      	movs	r0, #0
 80078b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078b4:	b004      	add	sp, #16
 80078b6:	4770      	bx	lr
 80078b8:	ffc02c00 	.word	0xffc02c00

080078bc <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 80078bc:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 80078c0:	4770      	bx	lr

080078c2 <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 80078c2:	680b      	ldr	r3, [r1, #0]
 80078c4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 80078c8:	2000      	movs	r0, #0
 80078ca:	4770      	bx	lr

080078cc <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80078cc:	6803      	ldr	r3, [r0, #0]
 80078ce:	f043 0303 	orr.w	r3, r3, #3
 80078d2:	6003      	str	r3, [r0, #0]
}
 80078d4:	2000      	movs	r0, #0
 80078d6:	4770      	bx	lr

080078d8 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80078d8:	6800      	ldr	r0, [r0, #0]
}
 80078da:	f000 0003 	and.w	r0, r0, #3
 80078de:	4770      	bx	lr

080078e0 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 80078e0:	680b      	ldr	r3, [r1, #0]
 80078e2:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80078e4:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 80078e6:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80078e8:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 80078ea:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 80078ec:	4313      	orrs	r3, r2
                       Command->CPSM);
 80078ee:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 80078f0:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80078f2:	68c1      	ldr	r1, [r0, #12]
 80078f4:	4a02      	ldr	r2, [pc, #8]	; (8007900 <SDMMC_SendCommand+0x20>)
 80078f6:	400a      	ands	r2, r1
 80078f8:	4313      	orrs	r3, r2
 80078fa:	60c3      	str	r3, [r0, #12]
}
 80078fc:	2000      	movs	r0, #0
 80078fe:	4770      	bx	lr
 8007900:	fffee0c0 	.word	0xfffee0c0

08007904 <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 8007904:	6900      	ldr	r0, [r0, #16]
}
 8007906:	b2c0      	uxtb	r0, r0
 8007908:	4770      	bx	lr

0800790a <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800790a:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800790c:	5840      	ldr	r0, [r0, r1]
}
 800790e:	4770      	bx	lr

08007910 <SDMMC_GetCmdResp1>:
{
 8007910:	b538      	push	{r3, r4, r5, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007912:	4b53      	ldr	r3, [pc, #332]	; (8007a60 <SDMMC_GetCmdResp1+0x150>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4c53      	ldr	r4, [pc, #332]	; (8007a64 <SDMMC_GetCmdResp1+0x154>)
 8007918:	fba4 4303 	umull	r4, r3, r4, r3
 800791c:	0a5b      	lsrs	r3, r3, #9
 800791e:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 8007922:	1e54      	subs	r4, r2, #1
 8007924:	2a00      	cmp	r2, #0
 8007926:	d061      	beq.n	80079ec <SDMMC_GetCmdResp1+0xdc>
    sta_reg = SDMMCx->STA;
 8007928:	6b45      	ldr	r5, [r0, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800792a:	4b4f      	ldr	r3, [pc, #316]	; (8007a68 <SDMMC_GetCmdResp1+0x158>)
 800792c:	402b      	ands	r3, r5
 800792e:	4622      	mov	r2, r4
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007930:	2b00      	cmp	r3, #0
 8007932:	d0f6      	beq.n	8007922 <SDMMC_GetCmdResp1+0x12>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007934:	f415 5f00 	tst.w	r5, #8192	; 0x2000
 8007938:	d1f3      	bne.n	8007922 <SDMMC_GetCmdResp1+0x12>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800793a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800793c:	f013 0f04 	tst.w	r3, #4
 8007940:	d107      	bne.n	8007952 <SDMMC_GetCmdResp1+0x42>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007942:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007944:	f013 0f01 	tst.w	r3, #1
 8007948:	d007      	beq.n	800795a <SDMMC_GetCmdResp1+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800794a:	2301      	movs	r3, #1
 800794c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800794e:	4618      	mov	r0, r3
 8007950:	e04e      	b.n	80079f0 <SDMMC_GetCmdResp1+0xe0>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007952:	2304      	movs	r3, #4
 8007954:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007956:	4618      	mov	r0, r3
 8007958:	e04a      	b.n	80079f0 <SDMMC_GetCmdResp1+0xe0>
 800795a:	460d      	mov	r5, r1
 800795c:	4604      	mov	r4, r0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800795e:	4b43      	ldr	r3, [pc, #268]	; (8007a6c <SDMMC_GetCmdResp1+0x15c>)
 8007960:	6383      	str	r3, [r0, #56]	; 0x38
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007962:	f7ff ffcf 	bl	8007904 <SDMMC_GetCommandResponse>
 8007966:	42a8      	cmp	r0, r5
 8007968:	d001      	beq.n	800796e <SDMMC_GetCmdResp1+0x5e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800796a:	2001      	movs	r0, #1
 800796c:	e040      	b.n	80079f0 <SDMMC_GetCmdResp1+0xe0>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800796e:	2100      	movs	r1, #0
 8007970:	4620      	mov	r0, r4
 8007972:	f7ff ffca 	bl	800790a <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007976:	4b3e      	ldr	r3, [pc, #248]	; (8007a70 <SDMMC_GetCmdResp1+0x160>)
 8007978:	4003      	ands	r3, r0
 800797a:	b3d3      	cbz	r3, 80079f2 <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800797c:	2800      	cmp	r0, #0
 800797e:	db3a      	blt.n	80079f6 <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007980:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007984:	d13a      	bne.n	80079fc <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007986:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 800798a:	d139      	bne.n	8007a00 <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800798c:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 8007990:	d138      	bne.n	8007a04 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007992:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8007996:	d138      	bne.n	8007a0a <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007998:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 800799c:	d138      	bne.n	8007a10 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800799e:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 80079a2:	d138      	bne.n	8007a16 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80079a4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80079a8:	d138      	bne.n	8007a1c <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80079aa:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80079ae:	d138      	bne.n	8007a22 <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80079b0:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 80079b4:	d138      	bne.n	8007a28 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80079b6:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80079ba:	d138      	bne.n	8007a2e <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80079bc:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 80079c0:	d138      	bne.n	8007a34 <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80079c2:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 80079c6:	d138      	bne.n	8007a3a <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80079c8:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 80079cc:	d138      	bne.n	8007a40 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80079ce:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80079d2:	d138      	bne.n	8007a46 <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80079d4:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80079d8:	d138      	bne.n	8007a4c <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80079da:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80079de:	d138      	bne.n	8007a52 <SDMMC_GetCmdResp1+0x142>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80079e0:	f010 0f08 	tst.w	r0, #8
 80079e4:	d038      	beq.n	8007a58 <SDMMC_GetCmdResp1+0x148>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80079e6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80079ea:	e001      	b.n	80079f0 <SDMMC_GetCmdResp1+0xe0>
      return SDMMC_ERROR_TIMEOUT;
 80079ec:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80079f0:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_NONE;
 80079f2:	2000      	movs	r0, #0
 80079f4:	e7fc      	b.n	80079f0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80079f6:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80079fa:	e7f9      	b.n	80079f0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80079fc:	2040      	movs	r0, #64	; 0x40
 80079fe:	e7f7      	b.n	80079f0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007a00:	2080      	movs	r0, #128	; 0x80
 8007a02:	e7f5      	b.n	80079f0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007a04:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007a08:	e7f2      	b.n	80079f0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007a0a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007a0e:	e7ef      	b.n	80079f0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007a10:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007a14:	e7ec      	b.n	80079f0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007a16:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007a1a:	e7e9      	b.n	80079f0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007a1c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007a20:	e7e6      	b.n	80079f0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007a22:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007a26:	e7e3      	b.n	80079f0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007a28:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007a2c:	e7e0      	b.n	80079f0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CC_ERR;
 8007a2e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007a32:	e7dd      	b.n	80079f0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007a34:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007a38:	e7da      	b.n	80079f0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007a3a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007a3e:	e7d7      	b.n	80079f0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007a40:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007a44:	e7d4      	b.n	80079f0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007a46:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007a4a:	e7d1      	b.n	80079f0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007a4c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8007a50:	e7ce      	b.n	80079f0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_RESET;
 8007a52:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8007a56:	e7cb      	b.n	80079f0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007a58:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007a5c:	e7c8      	b.n	80079f0 <SDMMC_GetCmdResp1+0xe0>
 8007a5e:	bf00      	nop
 8007a60:	20000010 	.word	0x20000010
 8007a64:	10624dd3 	.word	0x10624dd3
 8007a68:	00200045 	.word	0x00200045
 8007a6c:	002000c5 	.word	0x002000c5
 8007a70:	fdffe008 	.word	0xfdffe008

08007a74 <SDMMC_GetCmdResp6>:
{
 8007a74:	b570      	push	{r4, r5, r6, lr}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a76:	4b26      	ldr	r3, [pc, #152]	; (8007b10 <SDMMC_GetCmdResp6+0x9c>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4c26      	ldr	r4, [pc, #152]	; (8007b14 <SDMMC_GetCmdResp6+0xa0>)
 8007a7c:	fba4 4303 	umull	r4, r3, r4, r3
 8007a80:	0a5c      	lsrs	r4, r3, #9
 8007a82:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a86:	fb03 f304 	mul.w	r3, r3, r4
    if (count-- == 0U)
 8007a8a:	1e5c      	subs	r4, r3, #1
 8007a8c:	b3b3      	cbz	r3, 8007afc <SDMMC_GetCmdResp6+0x88>
    sta_reg = SDMMCx->STA;
 8007a8e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8007a90:	4623      	mov	r3, r4
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007a92:	f015 0f45 	tst.w	r5, #69	; 0x45
 8007a96:	d0f8      	beq.n	8007a8a <SDMMC_GetCmdResp6+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a98:	f415 5f00 	tst.w	r5, #8192	; 0x2000
 8007a9c:	d1f5      	bne.n	8007a8a <SDMMC_GetCmdResp6+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007a9e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007aa0:	f013 0f04 	tst.w	r3, #4
 8007aa4:	d107      	bne.n	8007ab6 <SDMMC_GetCmdResp6+0x42>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007aa6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007aa8:	f013 0f01 	tst.w	r3, #1
 8007aac:	d007      	beq.n	8007abe <SDMMC_GetCmdResp6+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007aae:	2301      	movs	r3, #1
 8007ab0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	e024      	b.n	8007b00 <SDMMC_GetCmdResp6+0x8c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007ab6:	2304      	movs	r3, #4
 8007ab8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007aba:	4618      	mov	r0, r3
 8007abc:	e020      	b.n	8007b00 <SDMMC_GetCmdResp6+0x8c>
 8007abe:	4616      	mov	r6, r2
 8007ac0:	460d      	mov	r5, r1
 8007ac2:	4604      	mov	r4, r0
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007ac4:	f7ff ff1e 	bl	8007904 <SDMMC_GetCommandResponse>
 8007ac8:	42a8      	cmp	r0, r5
 8007aca:	d001      	beq.n	8007ad0 <SDMMC_GetCmdResp6+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007acc:	2001      	movs	r0, #1
 8007ace:	e017      	b.n	8007b00 <SDMMC_GetCmdResp6+0x8c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007ad0:	4b11      	ldr	r3, [pc, #68]	; (8007b18 <SDMMC_GetCmdResp6+0xa4>)
 8007ad2:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f7ff ff17 	bl	800790a <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007adc:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8007ae0:	d008      	beq.n	8007af4 <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007ae2:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8007ae6:	d10c      	bne.n	8007b02 <SDMMC_GetCmdResp6+0x8e>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007ae8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8007aec:	d00c      	beq.n	8007b08 <SDMMC_GetCmdResp6+0x94>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007aee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007af2:	e005      	b.n	8007b00 <SDMMC_GetCmdResp6+0x8c>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007af4:	0c00      	lsrs	r0, r0, #16
 8007af6:	8030      	strh	r0, [r6, #0]
    return SDMMC_ERROR_NONE;
 8007af8:	2000      	movs	r0, #0
 8007afa:	e001      	b.n	8007b00 <SDMMC_GetCmdResp6+0x8c>
      return SDMMC_ERROR_TIMEOUT;
 8007afc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007b00:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007b02:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007b06:	e7fb      	b.n	8007b00 <SDMMC_GetCmdResp6+0x8c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007b08:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007b0c:	e7f8      	b.n	8007b00 <SDMMC_GetCmdResp6+0x8c>
 8007b0e:	bf00      	nop
 8007b10:	20000010 	.word	0x20000010
 8007b14:	10624dd3 	.word	0x10624dd3
 8007b18:	002000c5 	.word	0x002000c5

08007b1c <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007b1c:	680b      	ldr	r3, [r1, #0]
 8007b1e:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8007b20:	684b      	ldr	r3, [r1, #4]
 8007b22:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007b24:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 8007b26:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007b28:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 8007b2a:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 8007b2c:	4313      	orrs	r3, r2
                       Data->DPSM);
 8007b2e:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 8007b30:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007b32:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8007b34:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	4770      	bx	lr

08007b40 <SDMMC_CmdBlockLength>:
{
 8007b40:	b530      	push	{r4, r5, lr}
 8007b42:	b087      	sub	sp, #28
 8007b44:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007b46:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007b48:	2410      	movs	r4, #16
 8007b4a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b50:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b52:	2300      	movs	r3, #0
 8007b54:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b5a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b5c:	a901      	add	r1, sp, #4
 8007b5e:	f7ff febf 	bl	80078e0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b66:	4621      	mov	r1, r4
 8007b68:	4628      	mov	r0, r5
 8007b6a:	f7ff fed1 	bl	8007910 <SDMMC_GetCmdResp1>
}
 8007b6e:	b007      	add	sp, #28
 8007b70:	bd30      	pop	{r4, r5, pc}

08007b72 <SDMMC_CmdReadSingleBlock>:
{
 8007b72:	b530      	push	{r4, r5, lr}
 8007b74:	b087      	sub	sp, #28
 8007b76:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007b78:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007b7a:	2411      	movs	r4, #17
 8007b7c:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b82:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b84:	2300      	movs	r3, #0
 8007b86:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b8c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b8e:	a901      	add	r1, sp, #4
 8007b90:	f7ff fea6 	bl	80078e0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b98:	4621      	mov	r1, r4
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	f7ff feb8 	bl	8007910 <SDMMC_GetCmdResp1>
}
 8007ba0:	b007      	add	sp, #28
 8007ba2:	bd30      	pop	{r4, r5, pc}

08007ba4 <SDMMC_CmdReadMultiBlock>:
{
 8007ba4:	b530      	push	{r4, r5, lr}
 8007ba6:	b087      	sub	sp, #28
 8007ba8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007baa:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007bac:	2412      	movs	r4, #18
 8007bae:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007bb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bb4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bbe:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007bc0:	a901      	add	r1, sp, #4
 8007bc2:	f7ff fe8d 	bl	80078e0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bca:	4621      	mov	r1, r4
 8007bcc:	4628      	mov	r0, r5
 8007bce:	f7ff fe9f 	bl	8007910 <SDMMC_GetCmdResp1>
}
 8007bd2:	b007      	add	sp, #28
 8007bd4:	bd30      	pop	{r4, r5, pc}

08007bd6 <SDMMC_CmdWriteSingleBlock>:
{
 8007bd6:	b530      	push	{r4, r5, lr}
 8007bd8:	b087      	sub	sp, #28
 8007bda:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007bdc:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007bde:	2418      	movs	r4, #24
 8007be0:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007be2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007be6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007be8:	2300      	movs	r3, #0
 8007bea:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bf0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007bf2:	a901      	add	r1, sp, #4
 8007bf4:	f7ff fe74 	bl	80078e0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bfc:	4621      	mov	r1, r4
 8007bfe:	4628      	mov	r0, r5
 8007c00:	f7ff fe86 	bl	8007910 <SDMMC_GetCmdResp1>
}
 8007c04:	b007      	add	sp, #28
 8007c06:	bd30      	pop	{r4, r5, pc}

08007c08 <SDMMC_CmdWriteMultiBlock>:
{
 8007c08:	b530      	push	{r4, r5, lr}
 8007c0a:	b087      	sub	sp, #28
 8007c0c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007c0e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007c10:	2419      	movs	r4, #25
 8007c12:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007c14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c18:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c22:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c24:	a901      	add	r1, sp, #4
 8007c26:	f7ff fe5b 	bl	80078e0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c2e:	4621      	mov	r1, r4
 8007c30:	4628      	mov	r0, r5
 8007c32:	f7ff fe6d 	bl	8007910 <SDMMC_GetCmdResp1>
}
 8007c36:	b007      	add	sp, #28
 8007c38:	bd30      	pop	{r4, r5, pc}
	...

08007c3c <SDMMC_CmdStopTransfer>:
{
 8007c3c:	b530      	push	{r4, r5, lr}
 8007c3e:	b087      	sub	sp, #28
 8007c40:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8007c42:	2300      	movs	r3, #0
 8007c44:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007c46:	250c      	movs	r5, #12
 8007c48:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007c4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c4e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c50:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c56:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8007c58:	68c3      	ldr	r3, [r0, #12]
 8007c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c5e:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8007c60:	68c3      	ldr	r3, [r0, #12]
 8007c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c66:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c68:	a901      	add	r1, sp, #4
 8007c6a:	f7ff fe39 	bl	80078e0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8007c6e:	4a08      	ldr	r2, [pc, #32]	; (8007c90 <SDMMC_CmdStopTransfer+0x54>)
 8007c70:	4629      	mov	r1, r5
 8007c72:	4620      	mov	r0, r4
 8007c74:	f7ff fe4c 	bl	8007910 <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8007c78:	68e3      	ldr	r3, [r4, #12]
 8007c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c7e:	60e3      	str	r3, [r4, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8007c80:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8007c84:	d001      	beq.n	8007c8a <SDMMC_CmdStopTransfer+0x4e>
}
 8007c86:	b007      	add	sp, #28
 8007c88:	bd30      	pop	{r4, r5, pc}
    errorstate = SDMMC_ERROR_NONE;
 8007c8a:	2000      	movs	r0, #0
  return errorstate;
 8007c8c:	e7fb      	b.n	8007c86 <SDMMC_CmdStopTransfer+0x4a>
 8007c8e:	bf00      	nop
 8007c90:	05f5e100 	.word	0x05f5e100

08007c94 <SDMMC_CmdSelDesel>:
{
 8007c94:	b530      	push	{r4, r5, lr}
 8007c96:	b087      	sub	sp, #28
 8007c98:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007c9a:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007c9c:	2407      	movs	r4, #7
 8007c9e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ca4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cae:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007cb0:	a901      	add	r1, sp, #4
 8007cb2:	f7ff fe15 	bl	80078e0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cba:	4621      	mov	r1, r4
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	f7ff fe27 	bl	8007910 <SDMMC_GetCmdResp1>
}
 8007cc2:	b007      	add	sp, #28
 8007cc4:	bd30      	pop	{r4, r5, pc}

08007cc6 <SDMMC_CmdGoIdleState>:
{
 8007cc6:	b510      	push	{r4, lr}
 8007cc8:	b086      	sub	sp, #24
 8007cca:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007cd0:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007cd2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007cd4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cda:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007cdc:	a901      	add	r1, sp, #4
 8007cde:	f7ff fdff 	bl	80078e0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f7ff fd20 	bl	8007728 <SDMMC_GetCmdError>
}
 8007ce8:	b006      	add	sp, #24
 8007cea:	bd10      	pop	{r4, pc}

08007cec <SDMMC_CmdOperCond>:
{
 8007cec:	b510      	push	{r4, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007cf2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007cf6:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007cf8:	2308      	movs	r3, #8
 8007cfa:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007cfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d00:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d02:	2300      	movs	r3, #0
 8007d04:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d0a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d0c:	a901      	add	r1, sp, #4
 8007d0e:	f7ff fde7 	bl	80078e0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007d12:	4620      	mov	r0, r4
 8007d14:	f7ff fd82 	bl	800781c <SDMMC_GetCmdResp7>
}
 8007d18:	b006      	add	sp, #24
 8007d1a:	bd10      	pop	{r4, pc}

08007d1c <SDMMC_CmdAppCommand>:
{
 8007d1c:	b530      	push	{r4, r5, lr}
 8007d1e:	b087      	sub	sp, #28
 8007d20:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007d22:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007d24:	2437      	movs	r4, #55	; 0x37
 8007d26:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d2c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d36:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d38:	a901      	add	r1, sp, #4
 8007d3a:	f7ff fdd1 	bl	80078e0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d42:	4621      	mov	r1, r4
 8007d44:	4628      	mov	r0, r5
 8007d46:	f7ff fde3 	bl	8007910 <SDMMC_GetCmdResp1>
}
 8007d4a:	b007      	add	sp, #28
 8007d4c:	bd30      	pop	{r4, r5, pc}

08007d4e <SDMMC_CmdAppOperCommand>:
{
 8007d4e:	b510      	push	{r4, lr}
 8007d50:	b086      	sub	sp, #24
 8007d52:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007d54:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007d56:	2329      	movs	r3, #41	; 0x29
 8007d58:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d5e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d60:	2300      	movs	r3, #0
 8007d62:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d68:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d6a:	a901      	add	r1, sp, #4
 8007d6c:	f7ff fdb8 	bl	80078e0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007d70:	4620      	mov	r0, r4
 8007d72:	f7ff fd29 	bl	80077c8 <SDMMC_GetCmdResp3>
}
 8007d76:	b006      	add	sp, #24
 8007d78:	bd10      	pop	{r4, pc}

08007d7a <SDMMC_CmdBusWidth>:
{
 8007d7a:	b530      	push	{r4, r5, lr}
 8007d7c:	b087      	sub	sp, #28
 8007d7e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007d80:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007d82:	2406      	movs	r4, #6
 8007d84:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d8a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d94:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d96:	a901      	add	r1, sp, #4
 8007d98:	f7ff fda2 	bl	80078e0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007da0:	4621      	mov	r1, r4
 8007da2:	4628      	mov	r0, r5
 8007da4:	f7ff fdb4 	bl	8007910 <SDMMC_GetCmdResp1>
}
 8007da8:	b007      	add	sp, #28
 8007daa:	bd30      	pop	{r4, r5, pc}

08007dac <SDMMC_CmdSendSCR>:
{
 8007dac:	b530      	push	{r4, r5, lr}
 8007dae:	b087      	sub	sp, #28
 8007db0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8007db2:	2300      	movs	r3, #0
 8007db4:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007db6:	2433      	movs	r4, #51	; 0x33
 8007db8:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007dba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007dbe:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007dc0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007dc6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007dc8:	a901      	add	r1, sp, #4
 8007dca:	f7ff fd89 	bl	80078e0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dd2:	4621      	mov	r1, r4
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	f7ff fd9b 	bl	8007910 <SDMMC_GetCmdResp1>
}
 8007dda:	b007      	add	sp, #28
 8007ddc:	bd30      	pop	{r4, r5, pc}

08007dde <SDMMC_CmdSendCID>:
{
 8007dde:	b510      	push	{r4, lr}
 8007de0:	b086      	sub	sp, #24
 8007de2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8007de4:	2300      	movs	r3, #0
 8007de6:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007de8:	2202      	movs	r2, #2
 8007dea:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007dec:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007df0:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007df2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007df8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007dfa:	a901      	add	r1, sp, #4
 8007dfc:	f7ff fd70 	bl	80078e0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007e00:	4620      	mov	r0, r4
 8007e02:	f7ff fcaf 	bl	8007764 <SDMMC_GetCmdResp2>
}
 8007e06:	b006      	add	sp, #24
 8007e08:	bd10      	pop	{r4, pc}

08007e0a <SDMMC_CmdSendCSD>:
{
 8007e0a:	b510      	push	{r4, lr}
 8007e0c:	b086      	sub	sp, #24
 8007e0e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007e10:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007e12:	2309      	movs	r3, #9
 8007e14:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007e16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007e1a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e24:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e26:	a901      	add	r1, sp, #4
 8007e28:	f7ff fd5a 	bl	80078e0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f7ff fc99 	bl	8007764 <SDMMC_GetCmdResp2>
}
 8007e32:	b006      	add	sp, #24
 8007e34:	bd10      	pop	{r4, pc}

08007e36 <SDMMC_CmdSetRelAdd>:
{
 8007e36:	b570      	push	{r4, r5, r6, lr}
 8007e38:	b086      	sub	sp, #24
 8007e3a:	4605      	mov	r5, r0
 8007e3c:	460e      	mov	r6, r1
  sdmmc_cmdinit.Argument         = 0U;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007e42:	2403      	movs	r4, #3
 8007e44:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e4a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e4c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e52:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e54:	a901      	add	r1, sp, #4
 8007e56:	f7ff fd43 	bl	80078e0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007e5a:	4632      	mov	r2, r6
 8007e5c:	4621      	mov	r1, r4
 8007e5e:	4628      	mov	r0, r5
 8007e60:	f7ff fe08 	bl	8007a74 <SDMMC_GetCmdResp6>
}
 8007e64:	b006      	add	sp, #24
 8007e66:	bd70      	pop	{r4, r5, r6, pc}

08007e68 <SDMMC_CmdSendStatus>:
{
 8007e68:	b530      	push	{r4, r5, lr}
 8007e6a:	b087      	sub	sp, #28
 8007e6c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007e6e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007e70:	240d      	movs	r4, #13
 8007e72:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e78:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e82:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e84:	a901      	add	r1, sp, #4
 8007e86:	f7ff fd2b 	bl	80078e0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e8e:	4621      	mov	r1, r4
 8007e90:	4628      	mov	r0, r5
 8007e92:	f7ff fd3d 	bl	8007910 <SDMMC_GetCmdResp1>
}
 8007e96:	b007      	add	sp, #28
 8007e98:	bd30      	pop	{r4, r5, pc}

08007e9a <SDMMC_CmdStatusRegister>:
{
 8007e9a:	b530      	push	{r4, r5, lr}
 8007e9c:	b087      	sub	sp, #28
 8007e9e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8007ea4:	240d      	movs	r4, #13
 8007ea6:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ea8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007eac:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007eae:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007eb4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007eb6:	a901      	add	r1, sp, #4
 8007eb8:	f7ff fd12 	bl	80078e0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8007ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ec0:	4621      	mov	r1, r4
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	f7ff fd24 	bl	8007910 <SDMMC_GetCmdResp1>
}
 8007ec8:	b007      	add	sp, #28
 8007eca:	bd30      	pop	{r4, r5, pc}

08007ecc <SDMMC_CmdVoltageSwitch>:
{
 8007ecc:	b530      	push	{r4, r5, lr}
 8007ece:	b087      	sub	sp, #28
 8007ed0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0x00000000;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8007ed6:	240b      	movs	r4, #11
 8007ed8:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007eda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ede:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ee0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ee6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ee8:	a901      	add	r1, sp, #4
 8007eea:	f7ff fcf9 	bl	80078e0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8007eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ef2:	4621      	mov	r1, r4
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	f7ff fd0b 	bl	8007910 <SDMMC_GetCmdResp1>
}
 8007efa:	b007      	add	sp, #28
 8007efc:	bd30      	pop	{r4, r5, pc}
	...

08007f00 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007f00:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007f02:	4b04      	ldr	r3, [pc, #16]	; (8007f14 <disk_status+0x14>)
 8007f04:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8007f08:	6852      	ldr	r2, [r2, #4]
 8007f0a:	6852      	ldr	r2, [r2, #4]
 8007f0c:	4403      	add	r3, r0
 8007f0e:	7a18      	ldrb	r0, [r3, #8]
 8007f10:	4790      	blx	r2
  return stat;
}
 8007f12:	bd08      	pop	{r3, pc}
 8007f14:	2000013c 	.word	0x2000013c

08007f18 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007f18:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8007f1a:	4b08      	ldr	r3, [pc, #32]	; (8007f3c <disk_initialize+0x24>)
 8007f1c:	5c1b      	ldrb	r3, [r3, r0]
 8007f1e:	b953      	cbnz	r3, 8007f36 <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 8007f20:	4b06      	ldr	r3, [pc, #24]	; (8007f3c <disk_initialize+0x24>)
 8007f22:	2201      	movs	r2, #1
 8007f24:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007f26:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8007f2a:	6852      	ldr	r2, [r2, #4]
 8007f2c:	6812      	ldr	r2, [r2, #0]
 8007f2e:	4418      	add	r0, r3
 8007f30:	7a00      	ldrb	r0, [r0, #8]
 8007f32:	4790      	blx	r2
  }
  return stat;
}
 8007f34:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 8007f36:	2000      	movs	r0, #0
 8007f38:	e7fc      	b.n	8007f34 <disk_initialize+0x1c>
 8007f3a:	bf00      	nop
 8007f3c:	2000013c 	.word	0x2000013c

08007f40 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007f40:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007f42:	4c04      	ldr	r4, [pc, #16]	; (8007f54 <disk_read+0x14>)
 8007f44:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8007f48:	686d      	ldr	r5, [r5, #4]
 8007f4a:	68ad      	ldr	r5, [r5, #8]
 8007f4c:	4404      	add	r4, r0
 8007f4e:	7a20      	ldrb	r0, [r4, #8]
 8007f50:	47a8      	blx	r5
  return res;
}
 8007f52:	bd38      	pop	{r3, r4, r5, pc}
 8007f54:	2000013c 	.word	0x2000013c

08007f58 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007f58:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007f5a:	4c04      	ldr	r4, [pc, #16]	; (8007f6c <disk_write+0x14>)
 8007f5c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8007f60:	686d      	ldr	r5, [r5, #4]
 8007f62:	68ed      	ldr	r5, [r5, #12]
 8007f64:	4404      	add	r4, r0
 8007f66:	7a20      	ldrb	r0, [r4, #8]
 8007f68:	47a8      	blx	r5
  return res;
}
 8007f6a:	bd38      	pop	{r3, r4, r5, pc}
 8007f6c:	2000013c 	.word	0x2000013c

08007f70 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007f70:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007f72:	4b04      	ldr	r3, [pc, #16]	; (8007f84 <disk_ioctl+0x14>)
 8007f74:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8007f78:	6864      	ldr	r4, [r4, #4]
 8007f7a:	6924      	ldr	r4, [r4, #16]
 8007f7c:	4403      	add	r3, r0
 8007f7e:	7a18      	ldrb	r0, [r3, #8]
 8007f80:	47a0      	blx	r4
  return res;
}
 8007f82:	bd10      	pop	{r4, pc}
 8007f84:	2000013c 	.word	0x2000013c

08007f88 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 8007f88:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 8007f8a:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8007f8c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8007f90:	4770      	bx	lr

08007f92 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 8007f92:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 8007f94:	7883      	ldrb	r3, [r0, #2]
 8007f96:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 8007f9a:	7843      	ldrb	r3, [r0, #1]
 8007f9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8007fa0:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8007fa2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8007fa6:	4770      	bx	lr

08007fa8 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8007fa8:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
	QWORD rv;

	rv = ptr[7];
 8007fac:	79c2      	ldrb	r2, [r0, #7]
	rv = rv << 8 | ptr[6];
 8007fae:	2500      	movs	r5, #0
 8007fb0:	0214      	lsls	r4, r2, #8
 8007fb2:	7982      	ldrb	r2, [r0, #6]
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	ea44 0b02 	orr.w	fp, r4, r2
 8007fba:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[5];
 8007fbe:	ea4f 230c 	mov.w	r3, ip, lsl #8
 8007fc2:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
 8007fc6:	ea4f 220b 	mov.w	r2, fp, lsl #8
 8007fca:	7944      	ldrb	r4, [r0, #5]
 8007fcc:	2500      	movs	r5, #0
 8007fce:	ea44 0b02 	orr.w	fp, r4, r2
 8007fd2:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[4];
 8007fd6:	ea4f 230c 	mov.w	r3, ip, lsl #8
 8007fda:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
 8007fde:	ea4f 220b 	mov.w	r2, fp, lsl #8
 8007fe2:	7904      	ldrb	r4, [r0, #4]
 8007fe4:	2500      	movs	r5, #0
 8007fe6:	ea44 0b02 	orr.w	fp, r4, r2
 8007fea:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[3];
 8007fee:	ea4f 230c 	mov.w	r3, ip, lsl #8
 8007ff2:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
 8007ff6:	ea4f 220b 	mov.w	r2, fp, lsl #8
 8007ffa:	78c4      	ldrb	r4, [r0, #3]
 8007ffc:	2500      	movs	r5, #0
 8007ffe:	ea44 0b02 	orr.w	fp, r4, r2
 8008002:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[2];
 8008006:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800800a:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
 800800e:	ea4f 220b 	mov.w	r2, fp, lsl #8
 8008012:	7884      	ldrb	r4, [r0, #2]
 8008014:	2500      	movs	r5, #0
 8008016:	ea44 0602 	orr.w	r6, r4, r2
 800801a:	ea45 0703 	orr.w	r7, r5, r3
	rv = rv << 8 | ptr[1];
 800801e:	ea4f 2c07 	mov.w	ip, r7, lsl #8
 8008022:	ea4c 6c16 	orr.w	ip, ip, r6, lsr #24
 8008026:	ea4f 2b06 	mov.w	fp, r6, lsl #8
 800802a:	7844      	ldrb	r4, [r0, #1]
 800802c:	2500      	movs	r5, #0
 800802e:	ea4b 0204 	orr.w	r2, fp, r4
 8008032:	ea4c 0305 	orr.w	r3, ip, r5
	rv = rv << 8 | ptr[0];
 8008036:	021d      	lsls	r5, r3, #8
 8008038:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 800803c:	0214      	lsls	r4, r2, #8
 800803e:	7802      	ldrb	r2, [r0, #0]
 8008040:	2300      	movs	r3, #0
	return rv;
}
 8008042:	ea42 0004 	orr.w	r0, r2, r4
 8008046:	ea43 0105 	orr.w	r1, r3, r5
 800804a:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
 800804e:	4770      	bx	lr

08008050 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8008050:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 8008052:	0a09      	lsrs	r1, r1, #8
 8008054:	7041      	strb	r1, [r0, #1]
}
 8008056:	4770      	bx	lr

08008058 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8008058:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800805a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800805e:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8008060:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8008064:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8008066:	0e09      	lsrs	r1, r1, #24
 8008068:	70c1      	strb	r1, [r0, #3]
}
 800806a:	4770      	bx	lr

0800806c <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800806c:	7002      	strb	r2, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800806e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8008072:	7041      	strb	r1, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8008074:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8008078:	7081      	strb	r1, [r0, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800807a:	0e12      	lsrs	r2, r2, #24
 800807c:	70c2      	strb	r2, [r0, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 800807e:	7103      	strb	r3, [r0, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8008080:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008084:	7142      	strb	r2, [r0, #5]
	*ptr++ = (BYTE)val; val >>= 8;
 8008086:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800808a:	7182      	strb	r2, [r0, #6]
	*ptr++ = (BYTE)val;
 800808c:	0e1b      	lsrs	r3, r3, #24
 800808e:	71c3      	strb	r3, [r0, #7]
}
 8008090:	4770      	bx	lr

08008092 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 8008092:	4613      	mov	r3, r2
 8008094:	b12a      	cbz	r2, 80080a2 <mem_cpy+0x10>
		do {
			*d++ = *s++;
 8008096:	780a      	ldrb	r2, [r1, #0]
 8008098:	7002      	strb	r2, [r0, #0]
 800809a:	3001      	adds	r0, #1
 800809c:	3101      	adds	r1, #1
		} while (--cnt);
 800809e:	3b01      	subs	r3, #1
 80080a0:	d1f9      	bne.n	8008096 <mem_cpy+0x4>
	}
}
 80080a2:	4770      	bx	lr

080080a4 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 80080a4:	7001      	strb	r1, [r0, #0]
 80080a6:	3001      	adds	r0, #1
	} while (--cnt);
 80080a8:	3a01      	subs	r2, #1
 80080aa:	d1fb      	bne.n	80080a4 <mem_set>
}
 80080ac:	4770      	bx	lr

080080ae <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80080ae:	b430      	push	{r4, r5}
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 80080b0:	1c45      	adds	r5, r0, #1
 80080b2:	7803      	ldrb	r3, [r0, #0]
 80080b4:	7808      	ldrb	r0, [r1, #0]
 80080b6:	1a1b      	subs	r3, r3, r0
	} while (--cnt && r == 0);
 80080b8:	3a01      	subs	r2, #1
 80080ba:	d004      	beq.n	80080c6 <mem_cmp+0x18>
 80080bc:	1c4c      	adds	r4, r1, #1
		r = *d++ - *s++;
 80080be:	4628      	mov	r0, r5
 80080c0:	4621      	mov	r1, r4
	} while (--cnt && r == 0);
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d0f4      	beq.n	80080b0 <mem_cmp+0x2>

	return r;
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	bc30      	pop	{r4, r5}
 80080ca:	4770      	bx	lr

080080cc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
	while (*str && *str != chr) str++;
 80080cc:	e000      	b.n	80080d0 <chk_chr+0x4>
 80080ce:	3001      	adds	r0, #1
 80080d0:	7803      	ldrb	r3, [r0, #0]
 80080d2:	b10b      	cbz	r3, 80080d8 <chk_chr+0xc>
 80080d4:	428b      	cmp	r3, r1
 80080d6:	d1fa      	bne.n	80080ce <chk_chr+0x2>
	return *str;
}
 80080d8:	4618      	mov	r0, r3
 80080da:	4770      	bx	lr

080080dc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80080dc:	b430      	push	{r4, r5}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80080de:	2400      	movs	r4, #0
 80080e0:	4623      	mov	r3, r4
 80080e2:	b163      	cbz	r3, 80080fe <chk_lock+0x22>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d024      	beq.n	8008132 <chk_lock+0x56>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80080e8:	bb71      	cbnz	r1, 8008148 <chk_lock+0x6c>
 80080ea:	4a18      	ldr	r2, [pc, #96]	; (800814c <chk_lock+0x70>)
 80080ec:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80080f0:	899b      	ldrh	r3, [r3, #12]
 80080f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080f6:	d023      	beq.n	8008140 <chk_lock+0x64>
 80080f8:	2000      	movs	r0, #0
}
 80080fa:	bc30      	pop	{r4, r5}
 80080fc:	4770      	bx	lr
		if (Files[i].fs) {	/* Existing entry */
 80080fe:	011a      	lsls	r2, r3, #4
 8008100:	4d12      	ldr	r5, [pc, #72]	; (800814c <chk_lock+0x70>)
 8008102:	58aa      	ldr	r2, [r5, r2]
 8008104:	b19a      	cbz	r2, 800812e <chk_lock+0x52>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008106:	6805      	ldr	r5, [r0, #0]
 8008108:	42aa      	cmp	r2, r5
 800810a:	d001      	beq.n	8008110 <chk_lock+0x34>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800810c:	3301      	adds	r3, #1
 800810e:	e7e8      	b.n	80080e2 <chk_lock+0x6>
				Files[i].clu == dp->obj.sclust &&
 8008110:	4a0e      	ldr	r2, [pc, #56]	; (800814c <chk_lock+0x70>)
 8008112:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8008116:	6855      	ldr	r5, [r2, #4]
 8008118:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800811a:	4295      	cmp	r5, r2
 800811c:	d1f6      	bne.n	800810c <chk_lock+0x30>
				Files[i].ofs == dp->dptr) break;
 800811e:	4a0b      	ldr	r2, [pc, #44]	; (800814c <chk_lock+0x70>)
 8008120:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8008124:	6895      	ldr	r5, [r2, #8]
 8008126:	6b02      	ldr	r2, [r0, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 8008128:	4295      	cmp	r5, r2
 800812a:	d1ef      	bne.n	800810c <chk_lock+0x30>
 800812c:	e7da      	b.n	80080e4 <chk_lock+0x8>
			be = 1;
 800812e:	2401      	movs	r4, #1
 8008130:	e7ec      	b.n	800810c <chk_lock+0x30>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008132:	2902      	cmp	r1, #2
 8008134:	bf08      	it	eq
 8008136:	f044 0401 	orreq.w	r4, r4, #1
 800813a:	b11c      	cbz	r4, 8008144 <chk_lock+0x68>
 800813c:	2000      	movs	r0, #0
 800813e:	e7dc      	b.n	80080fa <chk_lock+0x1e>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008140:	2010      	movs	r0, #16
 8008142:	e7da      	b.n	80080fa <chk_lock+0x1e>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008144:	2012      	movs	r0, #18
 8008146:	e7d8      	b.n	80080fa <chk_lock+0x1e>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008148:	2010      	movs	r0, #16
 800814a:	e7d6      	b.n	80080fa <chk_lock+0x1e>
 800814c:	20000128 	.word	0x20000128

08008150 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008150:	2000      	movs	r0, #0
 8008152:	b928      	cbnz	r0, 8008160 <enq_lock+0x10>
 8008154:	0103      	lsls	r3, r0, #4
 8008156:	4a05      	ldr	r2, [pc, #20]	; (800816c <enq_lock+0x1c>)
 8008158:	58d3      	ldr	r3, [r2, r3]
 800815a:	b10b      	cbz	r3, 8008160 <enq_lock+0x10>
 800815c:	3001      	adds	r0, #1
 800815e:	e7f8      	b.n	8008152 <enq_lock+0x2>
	return (i == _FS_LOCK) ? 0 : 1;
}
 8008160:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 8008164:	bf18      	it	ne
 8008166:	2001      	movne	r0, #1
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	20000128 	.word	0x20000128

08008170 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008170:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008172:	2300      	movs	r3, #0
 8008174:	b1bb      	cbz	r3, 80081a6 <inc_lock+0x36>
		if (Files[i].fs == dp->obj.fs &&
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008176:	2b01      	cmp	r3, #1
 8008178:	d02c      	beq.n	80081d4 <inc_lock+0x64>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800817a:	b129      	cbz	r1, 8008188 <inc_lock+0x18>
 800817c:	4a24      	ldr	r2, [pc, #144]	; (8008210 <inc_lock+0xa0>)
 800817e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8008182:	8992      	ldrh	r2, [r2, #12]
 8008184:	2a00      	cmp	r2, #0
 8008186:	d140      	bne.n	800820a <inc_lock+0x9a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008188:	2900      	cmp	r1, #0
 800818a:	d139      	bne.n	8008200 <inc_lock+0x90>
 800818c:	4a20      	ldr	r2, [pc, #128]	; (8008210 <inc_lock+0xa0>)
 800818e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8008192:	8991      	ldrh	r1, [r2, #12]
 8008194:	3101      	adds	r1, #1
 8008196:	b289      	uxth	r1, r1
 8008198:	4a1d      	ldr	r2, [pc, #116]	; (8008210 <inc_lock+0xa0>)
 800819a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800819e:	8191      	strh	r1, [r2, #12]

	return i + 1;
 80081a0:	1c58      	adds	r0, r3, #1
}
 80081a2:	bc70      	pop	{r4, r5, r6}
 80081a4:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 80081a6:	011a      	lsls	r2, r3, #4
 80081a8:	4c19      	ldr	r4, [pc, #100]	; (8008210 <inc_lock+0xa0>)
 80081aa:	58a4      	ldr	r4, [r4, r2]
 80081ac:	6802      	ldr	r2, [r0, #0]
 80081ae:	4294      	cmp	r4, r2
 80081b0:	d001      	beq.n	80081b6 <inc_lock+0x46>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80081b2:	3301      	adds	r3, #1
 80081b4:	e7de      	b.n	8008174 <inc_lock+0x4>
			Files[i].clu == dp->obj.sclust &&
 80081b6:	4a16      	ldr	r2, [pc, #88]	; (8008210 <inc_lock+0xa0>)
 80081b8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80081bc:	6854      	ldr	r4, [r2, #4]
 80081be:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 80081c0:	4294      	cmp	r4, r2
 80081c2:	d1f6      	bne.n	80081b2 <inc_lock+0x42>
			Files[i].ofs == dp->dptr) break;
 80081c4:	4a12      	ldr	r2, [pc, #72]	; (8008210 <inc_lock+0xa0>)
 80081c6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80081ca:	6894      	ldr	r4, [r2, #8]
 80081cc:	6b02      	ldr	r2, [r0, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 80081ce:	4294      	cmp	r4, r2
 80081d0:	d1ef      	bne.n	80081b2 <inc_lock+0x42>
 80081d2:	e7d0      	b.n	8008176 <inc_lock+0x6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80081d4:	2300      	movs	r3, #0
 80081d6:	b92b      	cbnz	r3, 80081e4 <inc_lock+0x74>
 80081d8:	011a      	lsls	r2, r3, #4
 80081da:	4c0d      	ldr	r4, [pc, #52]	; (8008210 <inc_lock+0xa0>)
 80081dc:	58a2      	ldr	r2, [r4, r2]
 80081de:	b10a      	cbz	r2, 80081e4 <inc_lock+0x74>
 80081e0:	3301      	adds	r3, #1
 80081e2:	e7f8      	b.n	80081d6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d00e      	beq.n	8008206 <inc_lock+0x96>
		Files[i].fs = dp->obj.fs;
 80081e8:	6806      	ldr	r6, [r0, #0]
 80081ea:	4d09      	ldr	r5, [pc, #36]	; (8008210 <inc_lock+0xa0>)
 80081ec:	011c      	lsls	r4, r3, #4
 80081ee:	192a      	adds	r2, r5, r4
 80081f0:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 80081f2:	6884      	ldr	r4, [r0, #8]
 80081f4:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 80081f6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80081f8:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 80081fa:	2000      	movs	r0, #0
 80081fc:	8190      	strh	r0, [r2, #12]
 80081fe:	e7bc      	b.n	800817a <inc_lock+0xa>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008200:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008204:	e7c8      	b.n	8008198 <inc_lock+0x28>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008206:	2000      	movs	r0, #0
 8008208:	e7cb      	b.n	80081a2 <inc_lock+0x32>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800820a:	2000      	movs	r0, #0
 800820c:	e7c9      	b.n	80081a2 <inc_lock+0x32>
 800820e:	bf00      	nop
 8008210:	20000128 	.word	0x20000128

08008214 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008214:	3801      	subs	r0, #1
 8008216:	d115      	bne.n	8008244 <dec_lock+0x30>
		n = Files[i].ctr;
 8008218:	4b0c      	ldr	r3, [pc, #48]	; (800824c <dec_lock+0x38>)
 800821a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800821e:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008224:	d003      	beq.n	800822e <dec_lock+0x1a>
		if (n > 0) n--;				/* Decrement read mode open count */
 8008226:	b11b      	cbz	r3, 8008230 <dec_lock+0x1c>
 8008228:	3b01      	subs	r3, #1
 800822a:	b29b      	uxth	r3, r3
 800822c:	e000      	b.n	8008230 <dec_lock+0x1c>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800822e:	2300      	movs	r3, #0
		Files[i].ctr = n;
 8008230:	4a06      	ldr	r2, [pc, #24]	; (800824c <dec_lock+0x38>)
 8008232:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8008236:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008238:	b933      	cbnz	r3, 8008248 <dec_lock+0x34>
 800823a:	0103      	lsls	r3, r0, #4
 800823c:	2000      	movs	r0, #0
 800823e:	4a03      	ldr	r2, [pc, #12]	; (800824c <dec_lock+0x38>)
 8008240:	50d0      	str	r0, [r2, r3]
 8008242:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008244:	2002      	movs	r0, #2
 8008246:	4770      	bx	lr
		res = FR_OK;
 8008248:	2000      	movs	r0, #0
	}
	return res;
}
 800824a:	4770      	bx	lr
 800824c:	20000128 	.word	0x20000128

08008250 <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008250:	2300      	movs	r3, #0
 8008252:	b133      	cbz	r3, 8008262 <clear_lock+0x12>
 8008254:	4770      	bx	lr
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008256:	011a      	lsls	r2, r3, #4
 8008258:	490a      	ldr	r1, [pc, #40]	; (8008284 <clear_lock+0x34>)
 800825a:	588a      	ldr	r2, [r1, r2]
 800825c:	4282      	cmp	r2, r0
 800825e:	d10b      	bne.n	8008278 <clear_lock+0x28>
 8008260:	e007      	b.n	8008272 <clear_lock+0x22>
 8008262:	011a      	lsls	r2, r3, #4
 8008264:	4907      	ldr	r1, [pc, #28]	; (8008284 <clear_lock+0x34>)
 8008266:	588a      	ldr	r2, [r1, r2]
 8008268:	4282      	cmp	r2, r0
 800826a:	d001      	beq.n	8008270 <clear_lock+0x20>
	for (i = 0; i < _FS_LOCK; i++) {
 800826c:	3301      	adds	r3, #1
 800826e:	e7f0      	b.n	8008252 <clear_lock+0x2>
{
 8008270:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008272:	011a      	lsls	r2, r3, #4
 8008274:	2400      	movs	r4, #0
 8008276:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 8008278:	3301      	adds	r3, #1
 800827a:	2b00      	cmp	r3, #0
 800827c:	d0eb      	beq.n	8008256 <clear_lock+0x6>
	}
}
 800827e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008282:	4770      	bx	lr
 8008284:	20000128 	.word	0x20000128

08008288 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8008288:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800828a:	69c3      	ldr	r3, [r0, #28]
 800828c:	3b02      	subs	r3, #2
 800828e:	428b      	cmp	r3, r1
 8008290:	d904      	bls.n	800829c <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 8008292:	8943      	ldrh	r3, [r0, #10]
 8008294:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8008296:	fb01 0003 	mla	r0, r1, r3, r0
 800829a:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800829c:	2000      	movs	r0, #0
}
 800829e:	4770      	bx	lr

080082a0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80082a0:	b510      	push	{r4, lr}
 80082a2:	4619      	mov	r1, r3
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80082a4:	6803      	ldr	r3, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80082a6:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80082a8:	3404      	adds	r4, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80082aa:	0a50      	lsrs	r0, r2, #9
 80082ac:	895a      	ldrh	r2, [r3, #10]
 80082ae:	2300      	movs	r3, #0
 80082b0:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
 80082b4:	0a49      	lsrs	r1, r1, #9
 80082b6:	f7f8 f80f 	bl	80002d8 <__aeabi_uldivmod>
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80082ba:	6823      	ldr	r3, [r4, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80082bc:	b133      	cbz	r3, 80082cc <clmt_clust+0x2c>
		if (cl < ncl) break;	/* In this fragment? */
 80082be:	4298      	cmp	r0, r3
 80082c0:	d302      	bcc.n	80082c8 <clmt_clust+0x28>
		cl -= ncl; tbl++;		/* Next fragment */
 80082c2:	1ac0      	subs	r0, r0, r3
 80082c4:	3408      	adds	r4, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80082c6:	e7f8      	b.n	80082ba <clmt_clust+0x1a>
	}
	return cl + *tbl;	/* Return the cluster number */
 80082c8:	6863      	ldr	r3, [r4, #4]
 80082ca:	4403      	add	r3, r0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	bd10      	pop	{r4, pc}

080082d0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80082d0:	b570      	push	{r4, r5, r6, lr}
 80082d2:	4606      	mov	r6, r0
 80082d4:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80082d6:	f101 001a 	add.w	r0, r1, #26
 80082da:	f7ff fe55 	bl	8007f88 <ld_word>
	if (fs->fs_type == FS_FAT32) {
 80082de:	7833      	ldrb	r3, [r6, #0]
 80082e0:	2b03      	cmp	r3, #3
 80082e2:	d000      	beq.n	80082e6 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 80082e4:	bd70      	pop	{r4, r5, r6, pc}
 80082e6:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80082e8:	f105 0014 	add.w	r0, r5, #20
 80082ec:	f7ff fe4c 	bl	8007f88 <ld_word>
 80082f0:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 80082f4:	e7f6      	b.n	80082e4 <ld_clust+0x14>

080082f6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80082f6:	b570      	push	{r4, r5, r6, lr}
 80082f8:	4606      	mov	r6, r0
 80082fa:	460c      	mov	r4, r1
 80082fc:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80082fe:	b291      	uxth	r1, r2
 8008300:	f104 001a 	add.w	r0, r4, #26
 8008304:	f7ff fea4 	bl	8008050 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008308:	7833      	ldrb	r3, [r6, #0]
 800830a:	2b03      	cmp	r3, #3
 800830c:	d000      	beq.n	8008310 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 800830e:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008310:	0c29      	lsrs	r1, r5, #16
 8008312:	f104 0014 	add.w	r0, r4, #20
 8008316:	f7ff fe9b 	bl	8008050 <st_word>
}
 800831a:	e7f8      	b.n	800830e <st_clust+0x18>

0800831c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800831c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008320:	4607      	mov	r7, r0
 8008322:	460e      	mov	r6, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8008324:	f101 001a 	add.w	r0, r1, #26
 8008328:	f7ff fe2e 	bl	8007f88 <ld_word>
 800832c:	bb60      	cbnz	r0, 8008388 <pick_lfn+0x6c>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800832e:	7835      	ldrb	r5, [r6, #0]
 8008330:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 8008334:	3d01      	subs	r5, #1
 8008336:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800833a:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800833e:	f04f 0801 	mov.w	r8, #1
 8008342:	2400      	movs	r4, #0
 8008344:	e004      	b.n	8008350 <pick_lfn+0x34>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc) {
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008346:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800834a:	4298      	cmp	r0, r3
 800834c:	d121      	bne.n	8008392 <pick_lfn+0x76>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800834e:	3401      	adds	r4, #1
 8008350:	2c0c      	cmp	r4, #12
 8008352:	d80e      	bhi.n	8008372 <pick_lfn+0x56>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008354:	4b12      	ldr	r3, [pc, #72]	; (80083a0 <pick_lfn+0x84>)
 8008356:	5d18      	ldrb	r0, [r3, r4]
 8008358:	4430      	add	r0, r6
 800835a:	f7ff fe15 	bl	8007f88 <ld_word>
		if (wc) {
 800835e:	f1b8 0f00 	cmp.w	r8, #0
 8008362:	d0f0      	beq.n	8008346 <pick_lfn+0x2a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8008364:	2dfe      	cmp	r5, #254	; 0xfe
 8008366:	d812      	bhi.n	800838e <pick_lfn+0x72>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8008368:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
 800836c:	4680      	mov	r8, r0
 800836e:	3501      	adds	r5, #1
 8008370:	e7ed      	b.n	800834e <pick_lfn+0x32>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8008372:	7833      	ldrb	r3, [r6, #0]
 8008374:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008378:	d00d      	beq.n	8008396 <pick_lfn+0x7a>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800837a:	2dfe      	cmp	r5, #254	; 0xfe
 800837c:	d80d      	bhi.n	800839a <pick_lfn+0x7e>
		lfnbuf[i] = 0;
 800837e:	2300      	movs	r3, #0
 8008380:	f827 3015 	strh.w	r3, [r7, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
 8008384:	2001      	movs	r0, #1
 8008386:	e000      	b.n	800838a <pick_lfn+0x6e>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8008388:	2000      	movs	r0, #0
}
 800838a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800838e:	2000      	movs	r0, #0
 8008390:	e7fb      	b.n	800838a <pick_lfn+0x6e>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008392:	2000      	movs	r0, #0
 8008394:	e7f9      	b.n	800838a <pick_lfn+0x6e>
	return 1;		/* The part of LFN is valid */
 8008396:	2001      	movs	r0, #1
 8008398:	e7f7      	b.n	800838a <pick_lfn+0x6e>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800839a:	2000      	movs	r0, #0
 800839c:	e7f5      	b.n	800838a <pick_lfn+0x6e>
 800839e:	bf00      	nop
 80083a0:	0800f8a4 	.word	0x0800f8a4

080083a4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80083a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083a8:	4680      	mov	r8, r0
 80083aa:	460f      	mov	r7, r1
 80083ac:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80083ae:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80083b0:	230f      	movs	r3, #15
 80083b2:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 80083b4:	2400      	movs	r4, #0
 80083b6:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
 80083b8:	4621      	mov	r1, r4
 80083ba:	f107 001a 	add.w	r0, r7, #26
 80083be:	f7ff fe47 	bl	8008050 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80083c2:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 80083c6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80083ca:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
 80083ce:	4625      	mov	r5, r4
 80083d0:	e002      	b.n	80083d8 <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
 80083d2:	3401      	adds	r4, #1
 80083d4:	2c0c      	cmp	r4, #12
 80083d6:	d811      	bhi.n	80083fc <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80083d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80083dc:	429d      	cmp	r5, r3
 80083de:	d002      	beq.n	80083e6 <put_lfn+0x42>
 80083e0:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 80083e4:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80083e6:	4b0c      	ldr	r3, [pc, #48]	; (8008418 <put_lfn+0x74>)
 80083e8:	5d18      	ldrb	r0, [r3, r4]
 80083ea:	4629      	mov	r1, r5
 80083ec:	4438      	add	r0, r7
 80083ee:	f7ff fe2f 	bl	8008050 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80083f2:	2d00      	cmp	r5, #0
 80083f4:	d1ed      	bne.n	80083d2 <put_lfn+0x2e>
 80083f6:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80083fa:	e7ea      	b.n	80083d2 <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80083fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008400:	429d      	cmp	r5, r3
 8008402:	d002      	beq.n	800840a <put_lfn+0x66>
 8008404:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 8008408:	b90b      	cbnz	r3, 800840e <put_lfn+0x6a>
 800840a:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800840e:	f887 9000 	strb.w	r9, [r7]
}
 8008412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008416:	bf00      	nop
 8008418:	0800f8a4 	.word	0x0800f8a4

0800841c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800841c:	b570      	push	{r4, r5, r6, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	4605      	mov	r5, r0
 8008422:	4616      	mov	r6, r2
 8008424:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008426:	220b      	movs	r2, #11
 8008428:	f7ff fe33 	bl	8008092 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800842c:	2c05      	cmp	r4, #5
 800842e:	d811      	bhi.n	8008454 <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
 8008430:	2207      	movs	r2, #7
 8008432:	e01d      	b.n	8008470 <gen_numname+0x54>
 8008434:	3201      	adds	r2, #1
 8008436:	2a0f      	cmp	r2, #15
 8008438:	d80c      	bhi.n	8008454 <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
 800843a:	f003 0101 	and.w	r1, r3, #1
 800843e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
				wc >>= 1;
 8008442:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8008444:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8008448:	d0f4      	beq.n	8008434 <gen_numname+0x18>
 800844a:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
 800844e:	f084 0421 	eor.w	r4, r4, #33	; 0x21
 8008452:	e7ef      	b.n	8008434 <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC */
 8008454:	8833      	ldrh	r3, [r6, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d0ea      	beq.n	8008430 <gen_numname+0x14>
			wc = *lfn++;
 800845a:	3602      	adds	r6, #2
			for (i = 0; i < 16; i++) {
 800845c:	2200      	movs	r2, #0
 800845e:	e7ea      	b.n	8008436 <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
 8008460:	1e53      	subs	r3, r2, #1
 8008462:	a802      	add	r0, sp, #8
 8008464:	4402      	add	r2, r0
 8008466:	f802 1c08 	strb.w	r1, [r2, #-8]
		seq /= 16;
	} while (seq);
 800846a:	0924      	lsrs	r4, r4, #4
 800846c:	d009      	beq.n	8008482 <gen_numname+0x66>
		ns[i--] = c;
 800846e:	461a      	mov	r2, r3
		c = (BYTE)((seq % 16) + '0');
 8008470:	f004 030f 	and.w	r3, r4, #15
 8008474:	f103 0130 	add.w	r1, r3, #48	; 0x30
		if (c > '9') c += 7;
 8008478:	2939      	cmp	r1, #57	; 0x39
 800847a:	d9f1      	bls.n	8008460 <gen_numname+0x44>
 800847c:	f103 0137 	add.w	r1, r3, #55	; 0x37
 8008480:	e7ee      	b.n	8008460 <gen_numname+0x44>
	ns[i] = '~';
 8008482:	217e      	movs	r1, #126	; 0x7e
 8008484:	4602      	mov	r2, r0
 8008486:	441a      	add	r2, r3
 8008488:	f802 1c08 	strb.w	r1, [r2, #-8]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800848c:	e000      	b.n	8008490 <gen_numname+0x74>
 800848e:	3401      	adds	r4, #1
 8008490:	429c      	cmp	r4, r3
 8008492:	d209      	bcs.n	80084a8 <gen_numname+0x8c>
 8008494:	5d2a      	ldrb	r2, [r5, r4]
 8008496:	2a20      	cmp	r2, #32
 8008498:	d1f9      	bne.n	800848e <gen_numname+0x72>
 800849a:	e005      	b.n	80084a8 <gen_numname+0x8c>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800849c:	2120      	movs	r1, #32
 800849e:	1c62      	adds	r2, r4, #1
 80084a0:	5529      	strb	r1, [r5, r4]
	} while (j < 8);
 80084a2:	2a07      	cmp	r2, #7
 80084a4:	d808      	bhi.n	80084b8 <gen_numname+0x9c>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80084a6:	4614      	mov	r4, r2
 80084a8:	2b07      	cmp	r3, #7
 80084aa:	d8f7      	bhi.n	800849c <gen_numname+0x80>
 80084ac:	aa02      	add	r2, sp, #8
 80084ae:	441a      	add	r2, r3
 80084b0:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 80084b4:	3301      	adds	r3, #1
 80084b6:	e7f2      	b.n	800849e <gen_numname+0x82>
}
 80084b8:	b002      	add	sp, #8
 80084ba:	bd70      	pop	{r4, r5, r6, pc}

080084bc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80084bc:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 80084be:	220b      	movs	r2, #11
	BYTE sum = 0;
 80084c0:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80084c2:	01c3      	lsls	r3, r0, #7
 80084c4:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 80084c8:	7808      	ldrb	r0, [r1, #0]
 80084ca:	fa50 f383 	uxtab	r3, r0, r3
 80084ce:	b2d8      	uxtb	r0, r3
 80084d0:	3101      	adds	r1, #1
	} while (--n);
 80084d2:	3a01      	subs	r2, #1
 80084d4:	d1f5      	bne.n	80084c2 <sum_sfn+0x6>
	return sum;
}
 80084d6:	4770      	bx	lr

080084d8 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 80084d8:	b430      	push	{r4, r5}
 80084da:	4605      	mov	r5, r0
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 80084dc:	7841      	ldrb	r1, [r0, #1]
 80084de:	3101      	adds	r1, #1
 80084e0:	0149      	lsls	r1, r1, #5
	for (i = sum = 0; i < szblk; i++) {
 80084e2:	2000      	movs	r0, #0
 80084e4:	4603      	mov	r3, r0
 80084e6:	e001      	b.n	80084ec <xdir_sum+0x14>
		if (i == XDIR_SetSum) {	/* Skip sum field */
			i++;
 80084e8:	3301      	adds	r3, #1
	for (i = sum = 0; i < szblk; i++) {
 80084ea:	3301      	adds	r3, #1
 80084ec:	428b      	cmp	r3, r1
 80084ee:	d209      	bcs.n	8008504 <xdir_sum+0x2c>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d0f9      	beq.n	80084e8 <xdir_sum+0x10>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 80084f4:	0842      	lsrs	r2, r0, #1
 80084f6:	eb02 32c0 	add.w	r2, r2, r0, lsl #15
 80084fa:	5cec      	ldrb	r4, [r5, r3]
 80084fc:	fa14 f282 	uxtah	r2, r4, r2
 8008500:	b290      	uxth	r0, r2
 8008502:	e7f2      	b.n	80084ea <xdir_sum+0x12>
		}
	}
	return sum;
}
 8008504:	bc30      	pop	{r4, r5}
 8008506:	4770      	bx	lr

08008508 <get_achar>:
)
{
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8008508:	6803      	ldr	r3, [r0, #0]
 800850a:	1c5a      	adds	r2, r3, #1
 800850c:	6002      	str	r2, [r0, #0]
 800850e:	7818      	ldrb	r0, [r3, #0]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8008510:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008514:	b29b      	uxth	r3, r3
 8008516:	2b19      	cmp	r3, #25
 8008518:	d801      	bhi.n	800851e <get_achar+0x16>
 800851a:	3820      	subs	r0, #32
 800851c:	b280      	uxth	r0, r0
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800851e:	287f      	cmp	r0, #127	; 0x7f
 8008520:	d902      	bls.n	8008528 <get_achar+0x20>
 8008522:	3880      	subs	r0, #128	; 0x80
 8008524:	4b01      	ldr	r3, [pc, #4]	; (800852c <get_achar+0x24>)
 8008526:	5c18      	ldrb	r0, [r3, r0]
#endif
	return chr;
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	0800f824 	.word	0x0800f824

08008530 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8008530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008534:	b084      	sub	sp, #16
 8008536:	4607      	mov	r7, r0
 8008538:	9101      	str	r1, [sp, #4]
 800853a:	4614      	mov	r4, r2
 800853c:	4698      	mov	r8, r3
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800853e:	1e65      	subs	r5, r4, #1
 8008540:	b14c      	cbz	r4, 8008556 <pattern_matching+0x26>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8008542:	a801      	add	r0, sp, #4
 8008544:	f7ff ffe0 	bl	8008508 <get_achar>
	while (skip--) {				/* Pre-skip name chars */
 8008548:	462c      	mov	r4, r5
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800854a:	2800      	cmp	r0, #0
 800854c:	d1f7      	bne.n	800853e <pattern_matching+0xe>
 800854e:	2000      	movs	r0, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
 8008550:	b004      	add	sp, #16
 8008552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8008556:	783b      	ldrb	r3, [r7, #0]
 8008558:	bb33      	cbnz	r3, 80085a8 <pattern_matching+0x78>
 800855a:	f1b8 0f00 	cmp.w	r8, #0
 800855e:	d023      	beq.n	80085a8 <pattern_matching+0x78>
 8008560:	2001      	movs	r0, #1
 8008562:	e7f5      	b.n	8008550 <pattern_matching+0x20>
				nm = nx = 0;
 8008564:	4623      	mov	r3, r4
 8008566:	4622      	mov	r2, r4
 8008568:	e005      	b.n	8008576 <pattern_matching+0x46>
					if (*pp++ == '?') nm++; else nx = 1;
 800856a:	3201      	adds	r2, #1
				} while (*pp == '?' || *pp == '*');
 800856c:	7849      	ldrb	r1, [r1, #1]
 800856e:	292a      	cmp	r1, #42	; 0x2a
 8008570:	bf18      	it	ne
 8008572:	293f      	cmpne	r1, #63	; 0x3f
 8008574:	d107      	bne.n	8008586 <pattern_matching+0x56>
					if (*pp++ == '?') nm++; else nx = 1;
 8008576:	9903      	ldr	r1, [sp, #12]
 8008578:	1c48      	adds	r0, r1, #1
 800857a:	9003      	str	r0, [sp, #12]
 800857c:	780d      	ldrb	r5, [r1, #0]
 800857e:	2d3f      	cmp	r5, #63	; 0x3f
 8008580:	d0f3      	beq.n	800856a <pattern_matching+0x3a>
 8008582:	2301      	movs	r3, #1
 8008584:	e7f2      	b.n	800856c <pattern_matching+0x3c>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8008586:	9902      	ldr	r1, [sp, #8]
 8008588:	f7ff ffd2 	bl	8008530 <pattern_matching>
 800858c:	bb28      	cbnz	r0, 80085da <pattern_matching+0xaa>
				nc = *np; break;	/* Branch mismatched */
 800858e:	9b02      	ldr	r3, [sp, #8]
 8008590:	781e      	ldrb	r6, [r3, #0]
		get_achar(&nam);			/* nam++ */
 8008592:	a801      	add	r0, sp, #4
 8008594:	f7ff ffb8 	bl	8008508 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8008598:	3600      	adds	r6, #0
 800859a:	bf18      	it	ne
 800859c:	2601      	movne	r6, #1
 800859e:	f1b8 0f00 	cmp.w	r8, #0
 80085a2:	bf08      	it	eq
 80085a4:	2600      	moveq	r6, #0
 80085a6:	b1b6      	cbz	r6, 80085d6 <pattern_matching+0xa6>
		pp = pat; np = nam;			/* Top of pattern and name to match */
 80085a8:	9703      	str	r7, [sp, #12]
 80085aa:	9b01      	ldr	r3, [sp, #4]
 80085ac:	9302      	str	r3, [sp, #8]
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 80085ae:	9b03      	ldr	r3, [sp, #12]
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	2b2a      	cmp	r3, #42	; 0x2a
 80085b4:	bf18      	it	ne
 80085b6:	2b3f      	cmpne	r3, #63	; 0x3f
 80085b8:	d0d4      	beq.n	8008564 <pattern_matching+0x34>
			pc = get_achar(&pp);	/* Get a pattern char */
 80085ba:	a803      	add	r0, sp, #12
 80085bc:	f7ff ffa4 	bl	8008508 <get_achar>
 80085c0:	4605      	mov	r5, r0
			nc = get_achar(&np);	/* Get a name char */
 80085c2:	a802      	add	r0, sp, #8
 80085c4:	f7ff ffa0 	bl	8008508 <get_achar>
 80085c8:	4606      	mov	r6, r0
			if (pc != nc) break;	/* Branch mismatched? */
 80085ca:	4285      	cmp	r5, r0
 80085cc:	d1e1      	bne.n	8008592 <pattern_matching+0x62>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 80085ce:	2d00      	cmp	r5, #0
 80085d0:	d1ed      	bne.n	80085ae <pattern_matching+0x7e>
 80085d2:	2001      	movs	r0, #1
 80085d4:	e7bc      	b.n	8008550 <pattern_matching+0x20>
	return 0;
 80085d6:	4620      	mov	r0, r4
 80085d8:	e7ba      	b.n	8008550 <pattern_matching+0x20>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 80085da:	2001      	movs	r0, #1
 80085dc:	e7b8      	b.n	8008550 <pattern_matching+0x20>

080085de <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80085de:	6801      	ldr	r1, [r0, #0]
 80085e0:	b109      	cbz	r1, 80085e6 <get_ldnumber+0x8>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80085e2:	460a      	mov	r2, r1
 80085e4:	e003      	b.n	80085ee <get_ldnumber+0x10>
	int vol = -1;
 80085e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085ea:	e008      	b.n	80085fe <get_ldnumber+0x20>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80085ec:	3201      	adds	r2, #1
 80085ee:	7813      	ldrb	r3, [r2, #0]
 80085f0:	2b3a      	cmp	r3, #58	; 0x3a
 80085f2:	bf18      	it	ne
 80085f4:	2b1f      	cmpne	r3, #31
 80085f6:	d8f9      	bhi.n	80085ec <get_ldnumber+0xe>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80085f8:	2b3a      	cmp	r3, #58	; 0x3a
 80085fa:	d002      	beq.n	8008602 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80085fc:	2300      	movs	r3, #0
#endif
	}
	return vol;
}
 80085fe:	4618      	mov	r0, r3
 8008600:	4770      	bx	lr
{
 8008602:	b410      	push	{r4}
			i = *tp++ - '0';
 8008604:	1c4c      	adds	r4, r1, #1
 8008606:	780b      	ldrb	r3, [r1, #0]
 8008608:	3b30      	subs	r3, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800860a:	2b09      	cmp	r3, #9
 800860c:	bf98      	it	ls
 800860e:	42a2      	cmpls	r2, r4
 8008610:	d106      	bne.n	8008620 <get_ldnumber+0x42>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008612:	b943      	cbnz	r3, 8008626 <get_ldnumber+0x48>
					*path = ++tt;
 8008614:	3201      	adds	r2, #1
 8008616:	6002      	str	r2, [r0, #0]
}
 8008618:	4618      	mov	r0, r3
 800861a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800861e:	4770      	bx	lr
	int vol = -1;
 8008620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008624:	e7f8      	b.n	8008618 <get_ldnumber+0x3a>
 8008626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800862a:	e7f5      	b.n	8008618 <get_ldnumber+0x3a>

0800862c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800862c:	b538      	push	{r3, r4, r5, lr}
 800862e:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008630:	b1a8      	cbz	r0, 800865e <validate+0x32>
 8008632:	4604      	mov	r4, r0
 8008634:	6803      	ldr	r3, [r0, #0]
 8008636:	b1ab      	cbz	r3, 8008664 <validate+0x38>
 8008638:	781a      	ldrb	r2, [r3, #0]
 800863a:	b1aa      	cbz	r2, 8008668 <validate+0x3c>
 800863c:	8881      	ldrh	r1, [r0, #4]
 800863e:	88da      	ldrh	r2, [r3, #6]
 8008640:	4291      	cmp	r1, r2
 8008642:	d003      	beq.n	800864c <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 8008644:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008646:	2300      	movs	r3, #0
 8008648:	602b      	str	r3, [r5, #0]
	return res;
}
 800864a:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800864c:	7858      	ldrb	r0, [r3, #1]
 800864e:	f7ff fc57 	bl	8007f00 <disk_status>
 8008652:	f010 0f01 	tst.w	r0, #1
 8008656:	d10a      	bne.n	800866e <validate+0x42>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008658:	6823      	ldr	r3, [r4, #0]
			res = FR_OK;
 800865a:	2000      	movs	r0, #0
 800865c:	e7f4      	b.n	8008648 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800865e:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008660:	2300      	movs	r3, #0
 8008662:	e7f1      	b.n	8008648 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8008664:	2009      	movs	r0, #9
 8008666:	e7ef      	b.n	8008648 <validate+0x1c>
 8008668:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800866a:	2300      	movs	r3, #0
 800866c:	e7ec      	b.n	8008648 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800866e:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008670:	2300      	movs	r3, #0
 8008672:	e7e9      	b.n	8008648 <validate+0x1c>

08008674 <sync_window>:
{
 8008674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008676:	78c3      	ldrb	r3, [r0, #3]
 8008678:	b90b      	cbnz	r3, 800867e <sync_window+0xa>
	FRESULT res = FR_OK;
 800867a:	2000      	movs	r0, #0
}
 800867c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800867e:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 8008680:	6b45      	ldr	r5, [r0, #52]	; 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008682:	f100 0738 	add.w	r7, r0, #56	; 0x38
 8008686:	2301      	movs	r3, #1
 8008688:	462a      	mov	r2, r5
 800868a:	4639      	mov	r1, r7
 800868c:	7840      	ldrb	r0, [r0, #1]
 800868e:	f7ff fc63 	bl	8007f58 <disk_write>
 8008692:	b9a8      	cbnz	r0, 80086c0 <sync_window+0x4c>
			fs->wflag = 0;
 8008694:	2300      	movs	r3, #0
 8008696:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008698:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800869a:	1aeb      	subs	r3, r5, r3
 800869c:	6a22      	ldr	r2, [r4, #32]
 800869e:	4293      	cmp	r3, r2
 80086a0:	d210      	bcs.n	80086c4 <sync_window+0x50>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80086a2:	78a6      	ldrb	r6, [r4, #2]
 80086a4:	2e01      	cmp	r6, #1
 80086a6:	d909      	bls.n	80086bc <sync_window+0x48>
					wsect += fs->fsize;
 80086a8:	6a23      	ldr	r3, [r4, #32]
 80086aa:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80086ac:	2301      	movs	r3, #1
 80086ae:	462a      	mov	r2, r5
 80086b0:	4639      	mov	r1, r7
 80086b2:	7860      	ldrb	r0, [r4, #1]
 80086b4:	f7ff fc50 	bl	8007f58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80086b8:	3e01      	subs	r6, #1
 80086ba:	e7f3      	b.n	80086a4 <sync_window+0x30>
	FRESULT res = FR_OK;
 80086bc:	2000      	movs	r0, #0
 80086be:	e7dd      	b.n	800867c <sync_window+0x8>
			res = FR_DISK_ERR;
 80086c0:	2001      	movs	r0, #1
 80086c2:	e7db      	b.n	800867c <sync_window+0x8>
	FRESULT res = FR_OK;
 80086c4:	2000      	movs	r0, #0
 80086c6:	e7d9      	b.n	800867c <sync_window+0x8>

080086c8 <move_window>:
{
 80086c8:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 80086ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80086cc:	428b      	cmp	r3, r1
 80086ce:	d012      	beq.n	80086f6 <move_window+0x2e>
 80086d0:	4604      	mov	r4, r0
 80086d2:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 80086d4:	f7ff ffce 	bl	8008674 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80086d8:	4606      	mov	r6, r0
 80086da:	b968      	cbnz	r0, 80086f8 <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80086dc:	2301      	movs	r3, #1
 80086de:	462a      	mov	r2, r5
 80086e0:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80086e4:	7860      	ldrb	r0, [r4, #1]
 80086e6:	f7ff fc2b 	bl	8007f40 <disk_read>
 80086ea:	b110      	cbz	r0, 80086f2 <move_window+0x2a>
				res = FR_DISK_ERR;
 80086ec:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80086ee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			fs->winsect = sector;
 80086f2:	6365      	str	r5, [r4, #52]	; 0x34
 80086f4:	e000      	b.n	80086f8 <move_window+0x30>
	FRESULT res = FR_OK;
 80086f6:	2600      	movs	r6, #0
}
 80086f8:	4630      	mov	r0, r6
 80086fa:	bd70      	pop	{r4, r5, r6, pc}

080086fc <check_fs>:
{
 80086fc:	b510      	push	{r4, lr}
 80086fe:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008700:	2300      	movs	r3, #0
 8008702:	70c3      	strb	r3, [r0, #3]
 8008704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008708:	6343      	str	r3, [r0, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800870a:	f7ff ffdd 	bl	80086c8 <move_window>
 800870e:	bb60      	cbnz	r0, 800876a <check_fs+0x6e>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008710:	f204 2036 	addw	r0, r4, #566	; 0x236
 8008714:	f7ff fc38 	bl	8007f88 <ld_word>
 8008718:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800871c:	4298      	cmp	r0, r3
 800871e:	d126      	bne.n	800876e <check_fs+0x72>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008720:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8008724:	2be9      	cmp	r3, #233	; 0xe9
 8008726:	d00e      	beq.n	8008746 <check_fs+0x4a>
 8008728:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800872a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800872e:	4a13      	ldr	r2, [pc, #76]	; (800877c <check_fs+0x80>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d008      	beq.n	8008746 <check_fs+0x4a>
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 8008734:	220b      	movs	r2, #11
 8008736:	4912      	ldr	r1, [pc, #72]	; (8008780 <check_fs+0x84>)
 8008738:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800873c:	f7ff fcb7 	bl	80080ae <mem_cmp>
 8008740:	b9c8      	cbnz	r0, 8008776 <check_fs+0x7a>
 8008742:	2001      	movs	r0, #1
 8008744:	e014      	b.n	8008770 <check_fs+0x74>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008746:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 800874a:	f7ff fc22 	bl	8007f92 <ld_dword>
 800874e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8008752:	4b0c      	ldr	r3, [pc, #48]	; (8008784 <check_fs+0x88>)
 8008754:	4298      	cmp	r0, r3
 8008756:	d00c      	beq.n	8008772 <check_fs+0x76>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008758:	f104 008a 	add.w	r0, r4, #138	; 0x8a
 800875c:	f7ff fc19 	bl	8007f92 <ld_dword>
 8008760:	4b09      	ldr	r3, [pc, #36]	; (8008788 <check_fs+0x8c>)
 8008762:	4298      	cmp	r0, r3
 8008764:	d1e6      	bne.n	8008734 <check_fs+0x38>
 8008766:	2000      	movs	r0, #0
 8008768:	e002      	b.n	8008770 <check_fs+0x74>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800876a:	2004      	movs	r0, #4
 800876c:	e000      	b.n	8008770 <check_fs+0x74>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800876e:	2003      	movs	r0, #3
}
 8008770:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008772:	2000      	movs	r0, #0
 8008774:	e7fc      	b.n	8008770 <check_fs+0x74>
	return 2;
 8008776:	2002      	movs	r0, #2
 8008778:	e7fa      	b.n	8008770 <check_fs+0x74>
 800877a:	bf00      	nop
 800877c:	009000eb 	.word	0x009000eb
 8008780:	0800f8b4 	.word	0x0800f8b4
 8008784:	00544146 	.word	0x00544146
 8008788:	33544146 	.word	0x33544146

0800878c <find_volume>:
{
 800878c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008790:	b084      	sub	sp, #16
 8008792:	460f      	mov	r7, r1
 8008794:	4616      	mov	r6, r2
	*rfs = 0;
 8008796:	2300      	movs	r3, #0
 8008798:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 800879a:	f7ff ff20 	bl	80085de <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800879e:	1e05      	subs	r5, r0, #0
 80087a0:	f2c0 81e4 	blt.w	8008b6c <find_volume+0x3e0>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80087a4:	4bd4      	ldr	r3, [pc, #848]	; (8008af8 <find_volume+0x36c>)
 80087a6:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80087aa:	2c00      	cmp	r4, #0
 80087ac:	f000 81e2 	beq.w	8008b74 <find_volume+0x3e8>
	*rfs = fs;							/* Return pointer to the file system object */
 80087b0:	603c      	str	r4, [r7, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80087b2:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80087b6:	7823      	ldrb	r3, [r4, #0]
 80087b8:	b173      	cbz	r3, 80087d8 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 80087ba:	7860      	ldrb	r0, [r4, #1]
 80087bc:	f7ff fba0 	bl	8007f00 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80087c0:	f010 0f01 	tst.w	r0, #1
 80087c4:	d108      	bne.n	80087d8 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80087c6:	2e00      	cmp	r6, #0
 80087c8:	f000 81d6 	beq.w	8008b78 <find_volume+0x3ec>
 80087cc:	f010 0f04 	tst.w	r0, #4
 80087d0:	f040 81d4 	bne.w	8008b7c <find_volume+0x3f0>
			return FR_OK;				/* The file system object is valid */
 80087d4:	2000      	movs	r0, #0
 80087d6:	e1ca      	b.n	8008b6e <find_volume+0x3e2>
	fs->fs_type = 0;					/* Clear the file system object */
 80087d8:	2300      	movs	r3, #0
 80087da:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80087dc:	b2e8      	uxtb	r0, r5
 80087de:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80087e0:	f7ff fb9a 	bl	8007f18 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80087e4:	f010 0f01 	tst.w	r0, #1
 80087e8:	f040 81ca 	bne.w	8008b80 <find_volume+0x3f4>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80087ec:	b11e      	cbz	r6, 80087f6 <find_volume+0x6a>
 80087ee:	f010 0f04 	tst.w	r0, #4
 80087f2:	f040 81c7 	bne.w	8008b84 <find_volume+0x3f8>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80087f6:	2100      	movs	r1, #0
 80087f8:	4620      	mov	r0, r4
 80087fa:	f7ff ff7f 	bl	80086fc <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80087fe:	2802      	cmp	r0, #2
 8008800:	f000 80bc 	beq.w	800897c <find_volume+0x1f0>
	bsect = 0;
 8008804:	2600      	movs	r6, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008806:	2804      	cmp	r0, #4
 8008808:	f000 81be 	beq.w	8008b88 <find_volume+0x3fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800880c:	2801      	cmp	r0, #1
 800880e:	f200 81bd 	bhi.w	8008b8c <find_volume+0x400>
	if (fmt == 1) {
 8008812:	f000 813b 	beq.w	8008a8c <find_volume+0x300>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008816:	f104 0043 	add.w	r0, r4, #67	; 0x43
 800881a:	f7ff fbb5 	bl	8007f88 <ld_word>
 800881e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8008822:	f040 81c9 	bne.w	8008bb8 <find_volume+0x42c>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008826:	f104 004e 	add.w	r0, r4, #78	; 0x4e
 800882a:	f7ff fbad 	bl	8007f88 <ld_word>
 800882e:	4607      	mov	r7, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008830:	b920      	cbnz	r0, 800883c <find_volume+0xb0>
 8008832:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008836:	f7ff fbac 	bl	8007f92 <ld_dword>
 800883a:	4607      	mov	r7, r0
		fs->fsize = fasize;
 800883c:	6227      	str	r7, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800883e:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8008842:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008844:	1e53      	subs	r3, r2, #1
 8008846:	b2db      	uxtb	r3, r3
 8008848:	2b01      	cmp	r3, #1
 800884a:	f200 81b7 	bhi.w	8008bbc <find_volume+0x430>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800884e:	fb07 f502 	mul.w	r5, r7, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008852:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
 8008856:	f8a4 800a 	strh.w	r8, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800885a:	f1b8 0f00 	cmp.w	r8, #0
 800885e:	f000 81af 	beq.w	8008bc0 <find_volume+0x434>
 8008862:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8008866:	ea18 0f03 	tst.w	r8, r3
 800886a:	f040 81ab 	bne.w	8008bc4 <find_volume+0x438>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800886e:	f104 0049 	add.w	r0, r4, #73	; 0x49
 8008872:	f7ff fb89 	bl	8007f88 <ld_word>
 8008876:	4682      	mov	sl, r0
 8008878:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800887a:	f010 0f0f 	tst.w	r0, #15
 800887e:	f040 81a3 	bne.w	8008bc8 <find_volume+0x43c>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008882:	f104 004b 	add.w	r0, r4, #75	; 0x4b
 8008886:	f7ff fb7f 	bl	8007f88 <ld_word>
 800888a:	4681      	mov	r9, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800888c:	b920      	cbnz	r0, 8008898 <find_volume+0x10c>
 800888e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008892:	f7ff fb7e 	bl	8007f92 <ld_dword>
 8008896:	4681      	mov	r9, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008898:	f104 0046 	add.w	r0, r4, #70	; 0x46
 800889c:	f7ff fb74 	bl	8007f88 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80088a0:	4601      	mov	r1, r0
 80088a2:	2800      	cmp	r0, #0
 80088a4:	f000 8192 	beq.w	8008bcc <find_volume+0x440>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80088a8:	1942      	adds	r2, r0, r5
 80088aa:	eb02 121a 	add.w	r2, r2, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80088ae:	4591      	cmp	r9, r2
 80088b0:	f0c0 818e 	bcc.w	8008bd0 <find_volume+0x444>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80088b4:	eba9 0302 	sub.w	r3, r9, r2
 80088b8:	fbb3 f3f8 	udiv	r3, r3, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f000 8189 	beq.w	8008bd4 <find_volume+0x448>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80088c2:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 80088c6:	4283      	cmp	r3, r0
 80088c8:	f240 80fe 	bls.w	8008ac8 <find_volume+0x33c>
		fmt = FS_FAT32;
 80088cc:	f04f 0903 	mov.w	r9, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80088d0:	f640 70f5 	movw	r0, #4085	; 0xff5
 80088d4:	4283      	cmp	r3, r0
 80088d6:	d801      	bhi.n	80088dc <find_volume+0x150>
 80088d8:	f04f 0901 	mov.w	r9, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80088dc:	f103 0802 	add.w	r8, r3, #2
 80088e0:	f8c4 801c 	str.w	r8, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80088e4:	6266      	str	r6, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80088e6:	198b      	adds	r3, r1, r6
 80088e8:	62a3      	str	r3, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80088ea:	4432      	add	r2, r6
 80088ec:	6322      	str	r2, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80088ee:	f1b9 0f03 	cmp.w	r9, #3
 80088f2:	f000 80ec 	beq.w	8008ace <find_volume+0x342>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80088f6:	f1ba 0f00 	cmp.w	sl, #0
 80088fa:	f000 8171 	beq.w	8008be0 <find_volume+0x454>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80088fe:	442b      	add	r3, r5
 8008900:	62e3      	str	r3, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008902:	f1b9 0f02 	cmp.w	r9, #2
 8008906:	f000 80f3 	beq.w	8008af0 <find_volume+0x364>
 800890a:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 800890e:	f008 0301 	and.w	r3, r8, #1
 8008912:	eb03 0352 	add.w	r3, r3, r2, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008916:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800891a:	ebb7 2f53 	cmp.w	r7, r3, lsr #9
 800891e:	f0c0 8161 	bcc.w	8008be4 <find_volume+0x458>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008922:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008926:	61a3      	str	r3, [r4, #24]
 8008928:	6163      	str	r3, [r4, #20]
		fs->fsi_flag = 0x80;
 800892a:	2380      	movs	r3, #128	; 0x80
 800892c:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800892e:	f1b9 0f03 	cmp.w	r9, #3
 8008932:	f000 80e7 	beq.w	8008b04 <find_volume+0x378>
	fs->fs_type = fmt;		/* FAT sub-type */
 8008936:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 800893a:	4a70      	ldr	r2, [pc, #448]	; (8008afc <find_volume+0x370>)
 800893c:	8813      	ldrh	r3, [r2, #0]
 800893e:	3301      	adds	r3, #1
 8008940:	b29b      	uxth	r3, r3
 8008942:	8013      	strh	r3, [r2, #0]
 8008944:	80e3      	strh	r3, [r4, #6]
	clear_lock(fs);
 8008946:	4620      	mov	r0, r4
 8008948:	f7ff fc82 	bl	8008250 <clear_lock>
	return FR_OK;
 800894c:	2000      	movs	r0, #0
 800894e:	e10e      	b.n	8008b6e <find_volume+0x3e2>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008950:	2000      	movs	r0, #0
 8008952:	ab04      	add	r3, sp, #16
 8008954:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8008958:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800895c:	3501      	adds	r5, #1
 800895e:	2d03      	cmp	r5, #3
 8008960:	d80e      	bhi.n	8008980 <find_volume+0x1f4>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008962:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8008966:	012b      	lsls	r3, r5, #4
 8008968:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800896c:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800896e:	7903      	ldrb	r3, [r0, #4]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d0ed      	beq.n	8008950 <find_volume+0x1c4>
 8008974:	3008      	adds	r0, #8
 8008976:	f7ff fb0c 	bl	8007f92 <ld_dword>
 800897a:	e7ea      	b.n	8008952 <find_volume+0x1c6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800897c:	2500      	movs	r5, #0
 800897e:	e7ee      	b.n	800895e <find_volume+0x1d2>
 8008980:	2500      	movs	r5, #0
 8008982:	e00a      	b.n	800899a <find_volume+0x20e>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008984:	4631      	mov	r1, r6
 8008986:	4620      	mov	r0, r4
 8008988:	f7ff feb8 	bl	80086fc <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800898c:	2801      	cmp	r0, #1
 800898e:	f67f af3a 	bls.w	8008806 <find_volume+0x7a>
 8008992:	3501      	adds	r5, #1
 8008994:	2d03      	cmp	r5, #3
 8008996:	f63f af36 	bhi.w	8008806 <find_volume+0x7a>
			bsect = br[i];
 800899a:	ab04      	add	r3, sp, #16
 800899c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80089a0:	f853 6c10 	ldr.w	r6, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80089a4:	2e00      	cmp	r6, #0
 80089a6:	d1ed      	bne.n	8008984 <find_volume+0x1f8>
 80089a8:	2003      	movs	r0, #3
 80089aa:	e7f2      	b.n	8008992 <find_volume+0x206>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 80089ac:	3301      	adds	r3, #1
 80089ae:	2b3f      	cmp	r3, #63	; 0x3f
 80089b0:	d804      	bhi.n	80089bc <find_volume+0x230>
 80089b2:	18e2      	adds	r2, r4, r3
 80089b4:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 80089b8:	2a00      	cmp	r2, #0
 80089ba:	d0f7      	beq.n	80089ac <find_volume+0x220>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 80089bc:	2b3f      	cmp	r3, #63	; 0x3f
 80089be:	f240 80e7 	bls.w	8008b90 <find_volume+0x404>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 80089c2:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 80089c6:	f7ff fadf 	bl	8007f88 <ld_word>
 80089ca:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80089ce:	f040 80e1 	bne.w	8008b94 <find_volume+0x408>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 80089d2:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 80089d6:	2b09      	cmp	r3, #9
 80089d8:	f040 80de 	bne.w	8008b98 <find_volume+0x40c>
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 80089dc:	f104 0080 	add.w	r0, r4, #128	; 0x80
 80089e0:	f7ff fae2 	bl	8007fa8 <ld_qword>
 80089e4:	eb10 0806 	adds.w	r8, r0, r6
 80089e8:	f141 0900 	adc.w	r9, r1, #0
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 80089ec:	f1b9 0f01 	cmp.w	r9, #1
 80089f0:	bf08      	it	eq
 80089f2:	f1b8 0f00 	cmpeq.w	r8, #0
 80089f6:	f080 80d1 	bcs.w	8008b9c <find_volume+0x410>
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 80089fa:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 80089fe:	f7ff fac8 	bl	8007f92 <ld_dword>
 8008a02:	6220      	str	r0, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8008a04:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
 8008a08:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	f040 80c8 	bne.w	8008ba0 <find_volume+0x414>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8008a10:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8008a14:	2501      	movs	r5, #1
 8008a16:	409d      	lsls	r5, r3
 8008a18:	b2ad      	uxth	r5, r5
 8008a1a:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8008a1c:	2d00      	cmp	r5, #0
 8008a1e:	f000 80c1 	beq.w	8008ba4 <find_volume+0x418>
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8008a22:	f104 0094 	add.w	r0, r4, #148	; 0x94
 8008a26:	f7ff fab4 	bl	8007f92 <ld_dword>
 8008a2a:	4682      	mov	sl, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8008a2c:	4b34      	ldr	r3, [pc, #208]	; (8008b00 <find_volume+0x374>)
 8008a2e:	4298      	cmp	r0, r3
 8008a30:	f200 80ba 	bhi.w	8008ba8 <find_volume+0x41c>
		fs->n_fatent = nclst + 2;
 8008a34:	1c83      	adds	r3, r0, #2
 8008a36:	61e3      	str	r3, [r4, #28]
		fs->volbase = bsect;
 8008a38:	6266      	str	r6, [r4, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8008a3a:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8008a3e:	f7ff faa8 	bl	8007f92 <ld_dword>
 8008a42:	1987      	adds	r7, r0, r6
 8008a44:	6327      	str	r7, [r4, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8008a46:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8008a4a:	f7ff faa2 	bl	8007f92 <ld_dword>
 8008a4e:	4430      	add	r0, r6
 8008a50:	62a0      	str	r0, [r4, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8008a52:	fb0a f205 	mul.w	r2, sl, r5
 8008a56:	2100      	movs	r1, #0
 8008a58:	19d2      	adds	r2, r2, r7
 8008a5a:	f141 0300 	adc.w	r3, r1, #0
 8008a5e:	4599      	cmp	r9, r3
 8008a60:	bf08      	it	eq
 8008a62:	4590      	cmpeq	r8, r2
 8008a64:	f0c0 80a2 	bcc.w	8008bac <find_volume+0x420>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8008a68:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8008a6c:	f7ff fa91 	bl	8007f92 <ld_dword>
 8008a70:	4601      	mov	r1, r0
 8008a72:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8008a74:	4620      	mov	r0, r4
 8008a76:	f7ff fc07 	bl	8008288 <clust2sect>
 8008a7a:	4601      	mov	r1, r0
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f7ff fe23 	bl	80086c8 <move_window>
 8008a82:	2800      	cmp	r0, #0
 8008a84:	f040 8094 	bne.w	8008bb0 <find_volume+0x424>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8008a88:	2500      	movs	r5, #0
 8008a8a:	e002      	b.n	8008a92 <find_volume+0x306>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8008a8c:	230b      	movs	r3, #11
 8008a8e:	e78e      	b.n	80089ae <find_volume+0x222>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8008a90:	3520      	adds	r5, #32
 8008a92:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8008a96:	d20d      	bcs.n	8008ab4 <find_volume+0x328>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8008a98:	1963      	adds	r3, r4, r5
 8008a9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a9e:	2b81      	cmp	r3, #129	; 0x81
 8008aa0:	d1f6      	bne.n	8008a90 <find_volume+0x304>
 8008aa2:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8008aa6:	f105 0014 	add.w	r0, r5, #20
 8008aaa:	4418      	add	r0, r3
 8008aac:	f7ff fa71 	bl	8007f92 <ld_dword>
 8008ab0:	2802      	cmp	r0, #2
 8008ab2:	d1ed      	bne.n	8008a90 <find_volume+0x304>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8008ab4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8008ab8:	d07c      	beq.n	8008bb4 <find_volume+0x428>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008abe:	61a3      	str	r3, [r4, #24]
 8008ac0:	6163      	str	r3, [r4, #20]
		fmt = FS_EXFAT;			/* FAT sub-type */
 8008ac2:	f04f 0904 	mov.w	r9, #4
 8008ac6:	e736      	b.n	8008936 <find_volume+0x1aa>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008ac8:	f04f 0902 	mov.w	r9, #2
 8008acc:	e700      	b.n	80088d0 <find_volume+0x144>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008ace:	f104 0062 	add.w	r0, r4, #98	; 0x62
 8008ad2:	f7ff fa59 	bl	8007f88 <ld_word>
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	d17e      	bne.n	8008bd8 <find_volume+0x44c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008ada:	f1ba 0f00 	cmp.w	sl, #0
 8008ade:	d17d      	bne.n	8008bdc <find_volume+0x450>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008ae0:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8008ae4:	f7ff fa55 	bl	8007f92 <ld_dword>
 8008ae8:	62e0      	str	r0, [r4, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008aea:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8008aee:	e712      	b.n	8008916 <find_volume+0x18a>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008af0:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8008af4:	e70f      	b.n	8008916 <find_volume+0x18a>
 8008af6:	bf00      	nop
 8008af8:	20000124 	.word	0x20000124
 8008afc:	20000138 	.word	0x20000138
 8008b00:	7ffffffd 	.word	0x7ffffffd
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008b04:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008b08:	f7ff fa3e 	bl	8007f88 <ld_word>
 8008b0c:	2801      	cmp	r0, #1
 8008b0e:	f47f af12 	bne.w	8008936 <find_volume+0x1aa>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008b12:	1c71      	adds	r1, r6, #1
 8008b14:	4620      	mov	r0, r4
 8008b16:	f7ff fdd7 	bl	80086c8 <move_window>
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	f47f af0b 	bne.w	8008936 <find_volume+0x1aa>
			fs->fsi_flag = 0;
 8008b20:	2300      	movs	r3, #0
 8008b22:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008b24:	f204 2036 	addw	r0, r4, #566	; 0x236
 8008b28:	f7ff fa2e 	bl	8007f88 <ld_word>
 8008b2c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008b30:	4298      	cmp	r0, r3
 8008b32:	f47f af00 	bne.w	8008936 <find_volume+0x1aa>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008b36:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8008b3a:	f7ff fa2a 	bl	8007f92 <ld_dword>
 8008b3e:	4b2a      	ldr	r3, [pc, #168]	; (8008be8 <find_volume+0x45c>)
 8008b40:	4298      	cmp	r0, r3
 8008b42:	f47f aef8 	bne.w	8008936 <find_volume+0x1aa>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008b46:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8008b4a:	f7ff fa22 	bl	8007f92 <ld_dword>
 8008b4e:	4b27      	ldr	r3, [pc, #156]	; (8008bec <find_volume+0x460>)
 8008b50:	4298      	cmp	r0, r3
 8008b52:	f47f aef0 	bne.w	8008936 <find_volume+0x1aa>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008b56:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8008b5a:	f7ff fa1a 	bl	8007f92 <ld_dword>
 8008b5e:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008b60:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8008b64:	f7ff fa15 	bl	8007f92 <ld_dword>
 8008b68:	6160      	str	r0, [r4, #20]
 8008b6a:	e6e4      	b.n	8008936 <find_volume+0x1aa>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008b6c:	200b      	movs	r0, #11
}
 8008b6e:	b004      	add	sp, #16
 8008b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008b74:	200c      	movs	r0, #12
 8008b76:	e7fa      	b.n	8008b6e <find_volume+0x3e2>
			return FR_OK;				/* The file system object is valid */
 8008b78:	2000      	movs	r0, #0
 8008b7a:	e7f8      	b.n	8008b6e <find_volume+0x3e2>
				return FR_WRITE_PROTECTED;
 8008b7c:	200a      	movs	r0, #10
 8008b7e:	e7f6      	b.n	8008b6e <find_volume+0x3e2>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008b80:	2003      	movs	r0, #3
 8008b82:	e7f4      	b.n	8008b6e <find_volume+0x3e2>
		return FR_WRITE_PROTECTED;
 8008b84:	200a      	movs	r0, #10
 8008b86:	e7f2      	b.n	8008b6e <find_volume+0x3e2>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008b88:	2001      	movs	r0, #1
 8008b8a:	e7f0      	b.n	8008b6e <find_volume+0x3e2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008b8c:	200d      	movs	r0, #13
 8008b8e:	e7ee      	b.n	8008b6e <find_volume+0x3e2>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8008b90:	200d      	movs	r0, #13
 8008b92:	e7ec      	b.n	8008b6e <find_volume+0x3e2>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8008b94:	200d      	movs	r0, #13
 8008b96:	e7ea      	b.n	8008b6e <find_volume+0x3e2>
			return FR_NO_FILESYSTEM;
 8008b98:	200d      	movs	r0, #13
 8008b9a:	e7e8      	b.n	8008b6e <find_volume+0x3e2>
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8008b9c:	200d      	movs	r0, #13
 8008b9e:	e7e6      	b.n	8008b6e <find_volume+0x3e2>
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8008ba0:	200d      	movs	r0, #13
 8008ba2:	e7e4      	b.n	8008b6e <find_volume+0x3e2>
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8008ba4:	200d      	movs	r0, #13
 8008ba6:	e7e2      	b.n	8008b6e <find_volume+0x3e2>
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8008ba8:	200d      	movs	r0, #13
 8008baa:	e7e0      	b.n	8008b6e <find_volume+0x3e2>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8008bac:	200d      	movs	r0, #13
 8008bae:	e7de      	b.n	8008b6e <find_volume+0x3e2>
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8008bb0:	2001      	movs	r0, #1
 8008bb2:	e7dc      	b.n	8008b6e <find_volume+0x3e2>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8008bb4:	200d      	movs	r0, #13
 8008bb6:	e7da      	b.n	8008b6e <find_volume+0x3e2>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008bb8:	200d      	movs	r0, #13
 8008bba:	e7d8      	b.n	8008b6e <find_volume+0x3e2>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008bbc:	200d      	movs	r0, #13
 8008bbe:	e7d6      	b.n	8008b6e <find_volume+0x3e2>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008bc0:	200d      	movs	r0, #13
 8008bc2:	e7d4      	b.n	8008b6e <find_volume+0x3e2>
 8008bc4:	200d      	movs	r0, #13
 8008bc6:	e7d2      	b.n	8008b6e <find_volume+0x3e2>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008bc8:	200d      	movs	r0, #13
 8008bca:	e7d0      	b.n	8008b6e <find_volume+0x3e2>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008bcc:	200d      	movs	r0, #13
 8008bce:	e7ce      	b.n	8008b6e <find_volume+0x3e2>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008bd0:	200d      	movs	r0, #13
 8008bd2:	e7cc      	b.n	8008b6e <find_volume+0x3e2>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008bd4:	200d      	movs	r0, #13
 8008bd6:	e7ca      	b.n	8008b6e <find_volume+0x3e2>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008bd8:	200d      	movs	r0, #13
 8008bda:	e7c8      	b.n	8008b6e <find_volume+0x3e2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008bdc:	200d      	movs	r0, #13
 8008bde:	e7c6      	b.n	8008b6e <find_volume+0x3e2>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008be0:	200d      	movs	r0, #13
 8008be2:	e7c4      	b.n	8008b6e <find_volume+0x3e2>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008be4:	200d      	movs	r0, #13
 8008be6:	e7c2      	b.n	8008b6e <find_volume+0x3e2>
 8008be8:	41615252 	.word	0x41615252
 8008bec:	61417272 	.word	0x61417272

08008bf0 <find_bitmap>:
{
 8008bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bf4:	4605      	mov	r5, r0
 8008bf6:	4691      	mov	r9, r2
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8008bf8:	1e8f      	subs	r7, r1, #2
	if (clst >= fs->n_fatent - 2) clst = 0;
 8008bfa:	69c3      	ldr	r3, [r0, #28]
 8008bfc:	3b02      	subs	r3, #2
 8008bfe:	42bb      	cmp	r3, r7
 8008c00:	d800      	bhi.n	8008c04 <find_bitmap+0x14>
 8008c02:	2700      	movs	r7, #0
	scl = val = clst; ctr = 0;
 8008c04:	46b8      	mov	r8, r7
 8008c06:	463c      	mov	r4, r7
 8008c08:	2600      	movs	r6, #0
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8008c0a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8008c0c:	eb01 3114 	add.w	r1, r1, r4, lsr #12
 8008c10:	4628      	mov	r0, r5
 8008c12:	f7ff fd59 	bl	80086c8 <move_window>
 8008c16:	bb40      	cbnz	r0, 8008c6a <find_bitmap+0x7a>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8008c18:	f3c4 00c8 	ubfx	r0, r4, #3, #9
 8008c1c:	f004 0207 	and.w	r2, r4, #7
 8008c20:	2301      	movs	r3, #1
 8008c22:	4093      	lsls	r3, r2
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	e009      	b.n	8008c3c <find_bitmap+0x4c>
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8008c28:	46a0      	mov	r8, r4
 8008c2a:	2600      	movs	r6, #0
				if (val == clst) return 0;	/* All cluster scanned? */
 8008c2c:	42a7      	cmp	r7, r4
 8008c2e:	d01f      	beq.n	8008c70 <find_bitmap+0x80>
			} while (bm);
 8008c30:	b923      	cbnz	r3, 8008c3c <find_bitmap+0x4c>
		} while (++i < SS(fs));
 8008c32:	3001      	adds	r0, #1
 8008c34:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8008c38:	d2e7      	bcs.n	8008c0a <find_bitmap+0x1a>
			bm = 1;
 8008c3a:	2301      	movs	r3, #1
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8008c3c:	182a      	adds	r2, r5, r0
 8008c3e:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8008c42:	401a      	ands	r2, r3
 8008c44:	005b      	lsls	r3, r3, #1
 8008c46:	b2db      	uxtb	r3, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8008c48:	3401      	adds	r4, #1
 8008c4a:	69e9      	ldr	r1, [r5, #28]
 8008c4c:	3902      	subs	r1, #2
 8008c4e:	42a1      	cmp	r1, r4
 8008c50:	d803      	bhi.n	8008c5a <find_bitmap+0x6a>
					val = 0; bm = 0; i = SS(fs);
 8008c52:	2400      	movs	r4, #0
 8008c54:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008c58:	4623      	mov	r3, r4
				if (!bv) {	/* Is it a free cluster? */
 8008c5a:	2a00      	cmp	r2, #0
 8008c5c:	d1e4      	bne.n	8008c28 <find_bitmap+0x38>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8008c5e:	3601      	adds	r6, #1
 8008c60:	454e      	cmp	r6, r9
 8008c62:	d1e3      	bne.n	8008c2c <find_bitmap+0x3c>
 8008c64:	f108 0002 	add.w	r0, r8, #2
 8008c68:	e003      	b.n	8008c72 <find_bitmap+0x82>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8008c6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c6e:	e000      	b.n	8008c72 <find_bitmap+0x82>
				if (val == clst) return 0;	/* All cluster scanned? */
 8008c70:	2000      	movs	r0, #0
}
 8008c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008c76 <change_bitmap>:
{
 8008c76:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c7a:	4606      	mov	r6, r0
 8008c7c:	4617      	mov	r7, r2
 8008c7e:	4698      	mov	r8, r3
	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8008c80:	1e8c      	subs	r4, r1, #2
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8008c82:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8008c84:	eb01 3114 	add.w	r1, r1, r4, lsr #12
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8008c88:	f3c4 05c8 	ubfx	r5, r4, #3, #9
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8008c8c:	f004 0407 	and.w	r4, r4, #7
 8008c90:	2301      	movs	r3, #1
 8008c92:	fa03 f404 	lsl.w	r4, r3, r4
 8008c96:	b2e4      	uxtb	r4, r4
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8008c98:	f101 0901 	add.w	r9, r1, #1
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	f7ff fd13 	bl	80086c8 <move_window>
 8008ca2:	4601      	mov	r1, r0
 8008ca4:	b110      	cbz	r0, 8008cac <change_bitmap+0x36>
 8008ca6:	2101      	movs	r1, #1
 8008ca8:	e01e      	b.n	8008ce8 <change_bitmap+0x72>
			bm = 1;
 8008caa:	2401      	movs	r4, #1
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8008cac:	1973      	adds	r3, r6, r5
 8008cae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008cb2:	4223      	tst	r3, r4
 8008cb4:	bf14      	ite	ne
 8008cb6:	2201      	movne	r2, #1
 8008cb8:	2200      	moveq	r2, #0
 8008cba:	4542      	cmp	r2, r8
 8008cbc:	d013      	beq.n	8008ce6 <change_bitmap+0x70>
				fs->win[i] ^= bm;	/* Flip the bit */
 8008cbe:	1972      	adds	r2, r6, r5
 8008cc0:	4063      	eors	r3, r4
 8008cc2:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				fs->wflag = 1;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	70f3      	strb	r3, [r6, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8008cca:	3f01      	subs	r7, #1
 8008ccc:	d00c      	beq.n	8008ce8 <change_bitmap+0x72>
			} while (bm <<= 1);		/* Next bit */
 8008cce:	409c      	lsls	r4, r3
 8008cd0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8008cd4:	d1ea      	bne.n	8008cac <change_bitmap+0x36>
		} while (++i < SS(fs));		/* Next byte */
 8008cd6:	441d      	add	r5, r3
			bm = 1;
 8008cd8:	461c      	mov	r4, r3
		} while (++i < SS(fs));		/* Next byte */
 8008cda:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8008cde:	d3e4      	bcc.n	8008caa <change_bitmap+0x34>
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8008ce0:	4649      	mov	r1, r9
		i = 0;
 8008ce2:	2500      	movs	r5, #0
 8008ce4:	e7d8      	b.n	8008c98 <change_bitmap+0x22>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8008ce6:	2102      	movs	r1, #2
}
 8008ce8:	4608      	mov	r0, r1
 8008cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008cee <put_fat>:
{
 8008cee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008cf2:	2901      	cmp	r1, #1
 8008cf4:	f240 8082 	bls.w	8008dfc <put_fat+0x10e>
 8008cf8:	4605      	mov	r5, r0
 8008cfa:	460c      	mov	r4, r1
 8008cfc:	4617      	mov	r7, r2
 8008cfe:	69c3      	ldr	r3, [r0, #28]
 8008d00:	428b      	cmp	r3, r1
 8008d02:	d97d      	bls.n	8008e00 <put_fat+0x112>
		switch (fs->fs_type) {
 8008d04:	7803      	ldrb	r3, [r0, #0]
 8008d06:	3b01      	subs	r3, #1
 8008d08:	2b03      	cmp	r3, #3
 8008d0a:	d87d      	bhi.n	8008e08 <put_fat+0x11a>
 8008d0c:	e8df f003 	tbb	[pc, r3]
 8008d10:	53534002 	.word	0x53534002
			bc = (UINT)clst; bc += bc / 2;
 8008d14:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008d18:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8008d1a:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8008d1e:	f7ff fcd3 	bl	80086c8 <move_window>
			if (res != FR_OK) break;
 8008d22:	4606      	mov	r6, r0
 8008d24:	2800      	cmp	r0, #0
 8008d26:	d16c      	bne.n	8008e02 <put_fat+0x114>
			p = fs->win + bc++ % SS(fs);
 8008d28:	f105 0a38 	add.w	sl, r5, #56	; 0x38
 8008d2c:	f108 0901 	add.w	r9, r8, #1
 8008d30:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008d34:	f014 0401 	ands.w	r4, r4, #1
 8008d38:	d01f      	beq.n	8008d7a <put_fat+0x8c>
 8008d3a:	f91a 3008 	ldrsb.w	r3, [sl, r8]
 8008d3e:	f003 030f 	and.w	r3, r3, #15
 8008d42:	013a      	lsls	r2, r7, #4
 8008d44:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 8008d50:	2301      	movs	r3, #1
 8008d52:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008d54:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8008d56:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	f7ff fcb4 	bl	80086c8 <move_window>
			if (res != FR_OK) break;
 8008d60:	4606      	mov	r6, r0
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d14d      	bne.n	8008e02 <put_fat+0x114>
			p = fs->win + bc % SS(fs);
 8008d66:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008d6a:	b144      	cbz	r4, 8008d7e <put_fat+0x90>
 8008d6c:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8008d70:	f80a 7009 	strb.w	r7, [sl, r9]
			fs->wflag = 1;
 8008d74:	2301      	movs	r3, #1
 8008d76:	70eb      	strb	r3, [r5, #3]
			break;
 8008d78:	e043      	b.n	8008e02 <put_fat+0x114>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008d7a:	b2fb      	uxtb	r3, r7
 8008d7c:	e7e6      	b.n	8008d4c <put_fat+0x5e>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008d7e:	f91a 3009 	ldrsb.w	r3, [sl, r9]
 8008d82:	f023 030f 	bic.w	r3, r3, #15
 8008d86:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8008d8a:	431f      	orrs	r7, r3
 8008d8c:	b2ff      	uxtb	r7, r7
 8008d8e:	e7ef      	b.n	8008d70 <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008d90:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8008d92:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8008d96:	f7ff fc97 	bl	80086c8 <move_window>
			if (res != FR_OK) break;
 8008d9a:	4606      	mov	r6, r0
 8008d9c:	bb88      	cbnz	r0, 8008e02 <put_fat+0x114>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008d9e:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8008da2:	0064      	lsls	r4, r4, #1
 8008da4:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8008da8:	b2b9      	uxth	r1, r7
 8008daa:	4420      	add	r0, r4
 8008dac:	f7ff f950 	bl	8008050 <st_word>
			fs->wflag = 1;
 8008db0:	2301      	movs	r3, #1
 8008db2:	70eb      	strb	r3, [r5, #3]
			break;
 8008db4:	e025      	b.n	8008e02 <put_fat+0x114>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008db6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8008db8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8008dbc:	f7ff fc84 	bl	80086c8 <move_window>
			if (res != FR_OK) break;
 8008dc0:	4606      	mov	r6, r0
 8008dc2:	b9f0      	cbnz	r0, 8008e02 <put_fat+0x114>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8008dc4:	782b      	ldrb	r3, [r5, #0]
 8008dc6:	2b04      	cmp	r3, #4
 8008dc8:	d00c      	beq.n	8008de4 <put_fat+0xf6>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008dca:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8008dce:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8008dd2:	00a3      	lsls	r3, r4, #2
 8008dd4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008dd8:	4418      	add	r0, r3
 8008dda:	f7ff f8da 	bl	8007f92 <ld_dword>
 8008dde:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8008de2:	4307      	orrs	r7, r0
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008de4:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8008de8:	00a4      	lsls	r4, r4, #2
 8008dea:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8008dee:	4639      	mov	r1, r7
 8008df0:	4420      	add	r0, r4
 8008df2:	f7ff f931 	bl	8008058 <st_dword>
			fs->wflag = 1;
 8008df6:	2301      	movs	r3, #1
 8008df8:	70eb      	strb	r3, [r5, #3]
			break;
 8008dfa:	e002      	b.n	8008e02 <put_fat+0x114>
	FRESULT res = FR_INT_ERR;
 8008dfc:	2602      	movs	r6, #2
 8008dfe:	e000      	b.n	8008e02 <put_fat+0x114>
 8008e00:	2602      	movs	r6, #2
}
 8008e02:	4630      	mov	r0, r6
 8008e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	FRESULT res = FR_INT_ERR;
 8008e08:	2602      	movs	r6, #2
 8008e0a:	e7fa      	b.n	8008e02 <put_fat+0x114>

08008e0c <fill_last_frag>:
{
 8008e0c:	b570      	push	{r4, r5, r6, lr}
 8008e0e:	4604      	mov	r4, r0
 8008e10:	460d      	mov	r5, r1
 8008e12:	4616      	mov	r6, r2
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8008e14:	e007      	b.n	8008e26 <fill_last_frag+0x1a>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8008e16:	4632      	mov	r2, r6
 8008e18:	f7ff ff69 	bl	8008cee <put_fat>
		if (res != FR_OK) return res;
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	b958      	cbnz	r0, 8008e38 <fill_last_frag+0x2c>
		obj->n_frag--;
 8008e20:	69e3      	ldr	r3, [r4, #28]
 8008e22:	3b01      	subs	r3, #1
 8008e24:	61e3      	str	r3, [r4, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8008e26:	69e3      	ldr	r3, [r4, #28]
 8008e28:	b133      	cbz	r3, 8008e38 <fill_last_frag+0x2c>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8008e2a:	6820      	ldr	r0, [r4, #0]
 8008e2c:	1aea      	subs	r2, r5, r3
 8008e2e:	1c51      	adds	r1, r2, #1
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d9f0      	bls.n	8008e16 <fill_last_frag+0xa>
 8008e34:	3202      	adds	r2, #2
 8008e36:	e7ef      	b.n	8008e18 <fill_last_frag+0xc>
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	bd70      	pop	{r4, r5, r6, pc}

08008e3c <fill_first_frag>:
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8008e3c:	79c3      	ldrb	r3, [r0, #7]
 8008e3e:	2b03      	cmp	r3, #3
 8008e40:	d002      	beq.n	8008e48 <fill_first_frag+0xc>
	return FR_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	4770      	bx	lr
{
 8008e48:	b570      	push	{r4, r5, r6, lr}
 8008e4a:	4606      	mov	r6, r0
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8008e4c:	6881      	ldr	r1, [r0, #8]
 8008e4e:	6984      	ldr	r4, [r0, #24]
 8008e50:	b14c      	cbz	r4, 8008e66 <fill_first_frag+0x2a>
			res = put_fat(obj->fs, cl, cl + 1);
 8008e52:	1c4d      	adds	r5, r1, #1
 8008e54:	462a      	mov	r2, r5
 8008e56:	6830      	ldr	r0, [r6, #0]
 8008e58:	f7ff ff49 	bl	8008cee <put_fat>
			if (res != FR_OK) return res;
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	b920      	cbnz	r0, 8008e6a <fill_first_frag+0x2e>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8008e60:	3c01      	subs	r4, #1
 8008e62:	4629      	mov	r1, r5
 8008e64:	e7f4      	b.n	8008e50 <fill_first_frag+0x14>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8008e66:	2300      	movs	r3, #0
 8008e68:	71f3      	strb	r3, [r6, #7]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	bd70      	pop	{r4, r5, r6, pc}

08008e6e <get_fat>:
{
 8008e6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 8008e70:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008e72:	2901      	cmp	r1, #1
 8008e74:	f240 808e 	bls.w	8008f94 <get_fat+0x126>
 8008e78:	69eb      	ldr	r3, [r5, #28]
 8008e7a:	428b      	cmp	r3, r1
 8008e7c:	f240 808c 	bls.w	8008f98 <get_fat+0x12a>
 8008e80:	460c      	mov	r4, r1
		switch (fs->fs_type) {
 8008e82:	782b      	ldrb	r3, [r5, #0]
 8008e84:	3b01      	subs	r3, #1
 8008e86:	2b03      	cmp	r3, #3
 8008e88:	f200 8088 	bhi.w	8008f9c <get_fat+0x12e>
 8008e8c:	e8df f003 	tbb	[pc, r3]
 8008e90:	4d3a2902 	.word	0x4d3a2902
			bc = (UINT)clst; bc += bc / 2;
 8008e94:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e98:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8008e9a:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	f7ff fc12 	bl	80086c8 <move_window>
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	d17b      	bne.n	8008fa0 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8008ea8:	1c77      	adds	r7, r6, #1
 8008eaa:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8008eae:	442e      	add	r6, r5
 8008eb0:	f896 6038 	ldrb.w	r6, [r6, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008eb4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8008eb6:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8008eba:	4628      	mov	r0, r5
 8008ebc:	f7ff fc04 	bl	80086c8 <move_window>
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	d170      	bne.n	8008fa6 <get_fat+0x138>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008ec4:	f3c7 0308 	ubfx	r3, r7, #0, #9
 8008ec8:	442b      	add	r3, r5
 8008eca:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 8008ece:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008ed2:	f014 0f01 	tst.w	r4, #1
 8008ed6:	d001      	beq.n	8008edc <get_fat+0x6e>
 8008ed8:	0900      	lsrs	r0, r0, #4
 8008eda:	e05c      	b.n	8008f96 <get_fat+0x128>
 8008edc:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8008ee0:	e059      	b.n	8008f96 <get_fat+0x128>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008ee2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8008ee4:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8008ee8:	4628      	mov	r0, r5
 8008eea:	f7ff fbed 	bl	80086c8 <move_window>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d15c      	bne.n	8008fac <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008ef2:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8008ef6:	0064      	lsls	r4, r4, #1
 8008ef8:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8008efc:	4420      	add	r0, r4
 8008efe:	f7ff f843 	bl	8007f88 <ld_word>
			break;
 8008f02:	e048      	b.n	8008f96 <get_fat+0x128>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008f04:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8008f06:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	f7ff fbdc 	bl	80086c8 <move_window>
 8008f10:	2800      	cmp	r0, #0
 8008f12:	d14e      	bne.n	8008fb2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008f14:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8008f18:	00a4      	lsls	r4, r4, #2
 8008f1a:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8008f1e:	4420      	add	r0, r4
 8008f20:	f7ff f837 	bl	8007f92 <ld_dword>
 8008f24:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8008f28:	e035      	b.n	8008f96 <get_fat+0x128>
			if (obj->objsize) {
 8008f2a:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8008f2e:	ea52 0103 	orrs.w	r1, r2, r3
 8008f32:	d041      	beq.n	8008fb8 <get_fat+0x14a>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8008f34:	6881      	ldr	r1, [r0, #8]
 8008f36:	1a61      	subs	r1, r4, r1
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8008f38:	f112 36ff 	adds.w	r6, r2, #4294967295	; 0xffffffff
 8008f3c:	f143 37ff 	adc.w	r7, r3, #4294967295	; 0xffffffff
 8008f40:	0a72      	lsrs	r2, r6, #9
 8008f42:	ea42 52c7 	orr.w	r2, r2, r7, lsl #23
 8008f46:	896b      	ldrh	r3, [r5, #10]
 8008f48:	fbb2 f2f3 	udiv	r2, r2, r3
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8008f4c:	79c3      	ldrb	r3, [r0, #7]
 8008f4e:	2b02      	cmp	r3, #2
 8008f50:	d016      	beq.n	8008f80 <get_fat+0x112>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8008f52:	2b03      	cmp	r3, #3
 8008f54:	d019      	beq.n	8008f8a <get_fat+0x11c>
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d033      	beq.n	8008fc2 <get_fat+0x154>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8008f5a:	69c3      	ldr	r3, [r0, #28]
 8008f5c:	bb9b      	cbnz	r3, 8008fc6 <get_fat+0x158>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008f5e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8008f60:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8008f64:	4628      	mov	r0, r5
 8008f66:	f7ff fbaf 	bl	80086c8 <move_window>
 8008f6a:	bb78      	cbnz	r0, 8008fcc <get_fat+0x15e>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8008f6c:	3538      	adds	r5, #56	; 0x38
 8008f6e:	00a0      	lsls	r0, r4, #2
 8008f70:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
 8008f74:	4428      	add	r0, r5
 8008f76:	f7ff f80c 	bl	8007f92 <ld_dword>
 8008f7a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008f7e:	e00a      	b.n	8008f96 <get_fat+0x128>
					if (cofs <= clen) {
 8008f80:	4291      	cmp	r1, r2
 8008f82:	d8e6      	bhi.n	8008f52 <get_fat+0xe4>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8008f84:	d01a      	beq.n	8008fbc <get_fat+0x14e>
 8008f86:	1c60      	adds	r0, r4, #1
 8008f88:	e005      	b.n	8008f96 <get_fat+0x128>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8008f8a:	6982      	ldr	r2, [r0, #24]
 8008f8c:	428a      	cmp	r2, r1
 8008f8e:	d9e2      	bls.n	8008f56 <get_fat+0xe8>
					val = clst + 1; 	/* Generate the value */
 8008f90:	1c60      	adds	r0, r4, #1
					break;
 8008f92:	e000      	b.n	8008f96 <get_fat+0x128>
		val = 1;	/* Internal error */
 8008f94:	2001      	movs	r0, #1
}
 8008f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8008f98:	2001      	movs	r0, #1
 8008f9a:	e7fc      	b.n	8008f96 <get_fat+0x128>
			val = 1;	/* Internal error */
 8008f9c:	2001      	movs	r0, #1
 8008f9e:	e7fa      	b.n	8008f96 <get_fat+0x128>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008fa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fa4:	e7f7      	b.n	8008f96 <get_fat+0x128>
 8008fa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008faa:	e7f4      	b.n	8008f96 <get_fat+0x128>
 8008fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fb0:	e7f1      	b.n	8008f96 <get_fat+0x128>
 8008fb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fb6:	e7ee      	b.n	8008f96 <get_fat+0x128>
			val = 1;	/* Internal error */
 8008fb8:	2001      	movs	r0, #1
 8008fba:	e7ec      	b.n	8008f96 <get_fat+0x128>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8008fbc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8008fc0:	e7e9      	b.n	8008f96 <get_fat+0x128>
			val = 1;	/* Internal error */
 8008fc2:	2001      	movs	r0, #1
 8008fc4:	e7e7      	b.n	8008f96 <get_fat+0x128>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8008fc6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8008fca:	e7e4      	b.n	8008f96 <get_fat+0x128>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return val;
 8008fd0:	e7e1      	b.n	8008f96 <get_fat+0x128>

08008fd2 <dir_sdi>:
{
 8008fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd6:	4606      	mov	r6, r0
 8008fd8:	460d      	mov	r5, r1
	FATFS *fs = dp->obj.fs;
 8008fda:	6807      	ldr	r7, [r0, #0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008fdc:	783b      	ldrb	r3, [r7, #0]
 8008fde:	2b04      	cmp	r3, #4
 8008fe0:	d023      	beq.n	800902a <dir_sdi+0x58>
 8008fe2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008fe6:	42ab      	cmp	r3, r5
 8008fe8:	d93e      	bls.n	8009068 <dir_sdi+0x96>
 8008fea:	f015 0f1f 	tst.w	r5, #31
 8008fee:	d13e      	bne.n	800906e <dir_sdi+0x9c>
	dp->dptr = ofs;				/* Set current offset */
 8008ff0:	6335      	str	r5, [r6, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008ff2:	68b4      	ldr	r4, [r6, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008ff4:	b92c      	cbnz	r4, 8009002 <dir_sdi+0x30>
 8008ff6:	783b      	ldrb	r3, [r7, #0]
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	d902      	bls.n	8009002 <dir_sdi+0x30>
		clst = fs->dirbase;
 8008ffc:	6afc      	ldr	r4, [r7, #44]	; 0x2c
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8008ffe:	2300      	movs	r3, #0
 8009000:	71f3      	strb	r3, [r6, #7]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009002:	b9ac      	cbnz	r4, 8009030 <dir_sdi+0x5e>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009004:	893b      	ldrh	r3, [r7, #8]
 8009006:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800900a:	d932      	bls.n	8009072 <dir_sdi+0xa0>
		dp->sect = fs->dirbase;
 800900c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900e:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->clust = clst;					/* Current cluster# */
 8009010:	6374      	str	r4, [r6, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 8009012:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8009014:	b3ab      	cbz	r3, 8009082 <dir_sdi+0xb0>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009016:	eb03 2355 	add.w	r3, r3, r5, lsr #9
 800901a:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800901c:	3738      	adds	r7, #56	; 0x38
 800901e:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8009022:	443d      	add	r5, r7
 8009024:	63f5      	str	r5, [r6, #60]	; 0x3c
	return FR_OK;
 8009026:	2000      	movs	r0, #0
 8009028:	e01f      	b.n	800906a <dir_sdi+0x98>
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800902a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800902e:	e7da      	b.n	8008fe6 <dir_sdi+0x14>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009030:	f8b7 800a 	ldrh.w	r8, [r7, #10]
 8009034:	ea4f 2848 	mov.w	r8, r8, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8009038:	4545      	cmp	r5, r8
 800903a:	d30f      	bcc.n	800905c <dir_sdi+0x8a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800903c:	4621      	mov	r1, r4
 800903e:	4630      	mov	r0, r6
 8009040:	f7ff ff15 	bl	8008e6e <get_fat>
 8009044:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009046:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800904a:	d014      	beq.n	8009076 <dir_sdi+0xa4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800904c:	2801      	cmp	r0, #1
 800904e:	d914      	bls.n	800907a <dir_sdi+0xa8>
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	4283      	cmp	r3, r0
 8009054:	d913      	bls.n	800907e <dir_sdi+0xac>
			ofs -= csz;
 8009056:	eba5 0508 	sub.w	r5, r5, r8
 800905a:	e7ed      	b.n	8009038 <dir_sdi+0x66>
		dp->sect = clust2sect(fs, clst);
 800905c:	4621      	mov	r1, r4
 800905e:	4638      	mov	r0, r7
 8009060:	f7ff f912 	bl	8008288 <clust2sect>
 8009064:	63b0      	str	r0, [r6, #56]	; 0x38
 8009066:	e7d3      	b.n	8009010 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8009068:	2002      	movs	r0, #2
}
 800906a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
 800906e:	2002      	movs	r0, #2
 8009070:	e7fb      	b.n	800906a <dir_sdi+0x98>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009072:	2002      	movs	r0, #2
 8009074:	e7f9      	b.n	800906a <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009076:	2001      	movs	r0, #1
 8009078:	e7f7      	b.n	800906a <dir_sdi+0x98>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800907a:	2002      	movs	r0, #2
 800907c:	e7f5      	b.n	800906a <dir_sdi+0x98>
 800907e:	2002      	movs	r0, #2
 8009080:	e7f3      	b.n	800906a <dir_sdi+0x98>
	if (!dp->sect) return FR_INT_ERR;
 8009082:	2002      	movs	r0, #2
 8009084:	e7f1      	b.n	800906a <dir_sdi+0x98>

08009086 <create_chain>:
{
 8009086:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800908a:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 800908c:	6807      	ldr	r7, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800908e:	4689      	mov	r9, r1
 8009090:	b931      	cbnz	r1, 80090a0 <create_chain+0x1a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009092:	697e      	ldr	r6, [r7, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009094:	b1a6      	cbz	r6, 80090c0 <create_chain+0x3a>
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	42b3      	cmp	r3, r6
 800909a:	d812      	bhi.n	80090c2 <create_chain+0x3c>
 800909c:	2601      	movs	r6, #1
 800909e:	e010      	b.n	80090c2 <create_chain+0x3c>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80090a0:	f7ff fee5 	bl	8008e6e <get_fat>
 80090a4:	4605      	mov	r5, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 80090a6:	2801      	cmp	r0, #1
 80090a8:	f240 80a9 	bls.w	80091fe <create_chain+0x178>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80090ac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80090b0:	f000 80af 	beq.w	8009212 <create_chain+0x18c>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	4283      	cmp	r3, r0
 80090b8:	f200 80ab 	bhi.w	8009212 <create_chain+0x18c>
		scl = clst;
 80090bc:	464e      	mov	r6, r9
 80090be:	e000      	b.n	80090c2 <create_chain+0x3c>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80090c0:	2601      	movs	r6, #1
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80090c2:	783b      	ldrb	r3, [r7, #0]
 80090c4:	2b04      	cmp	r3, #4
 80090c6:	d001      	beq.n	80090cc <create_chain+0x46>
		ncl = scl;	/* Start cluster */
 80090c8:	4634      	mov	r4, r6
 80090ca:	e05f      	b.n	800918c <create_chain+0x106>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 80090cc:	2201      	movs	r2, #1
 80090ce:	4631      	mov	r1, r6
 80090d0:	4638      	mov	r0, r7
 80090d2:	f7ff fd8d 	bl	8008bf0 <find_bitmap>
 80090d6:	4605      	mov	r5, r0
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 80090d8:	1e43      	subs	r3, r0, #1
 80090da:	f113 0f03 	cmn.w	r3, #3
 80090de:	f200 8098 	bhi.w	8009212 <create_chain+0x18c>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 80090e2:	2301      	movs	r3, #1
 80090e4:	461a      	mov	r2, r3
 80090e6:	4601      	mov	r1, r0
 80090e8:	4638      	mov	r0, r7
 80090ea:	f7ff fdc4 	bl	8008c76 <change_bitmap>
 80090ee:	4603      	mov	r3, r0
		if (res == FR_INT_ERR) return 1;
 80090f0:	2802      	cmp	r0, #2
 80090f2:	f000 8086 	beq.w	8009202 <create_chain+0x17c>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 80090f6:	2801      	cmp	r0, #1
 80090f8:	f000 8085 	beq.w	8009206 <create_chain+0x180>
		if (clst == 0) {							/* Is it a new chain? */
 80090fc:	f1b9 0f00 	cmp.w	r9, #0
 8009100:	d11d      	bne.n	800913e <create_chain+0xb8>
			obj->stat = 2;							/* Set status 'contiguous' */
 8009102:	2202      	movs	r2, #2
 8009104:	f888 2007 	strb.w	r2, [r8, #7]
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8009108:	f898 2007 	ldrb.w	r2, [r8, #7]
 800910c:	2a02      	cmp	r2, #2
 800910e:	d06b      	beq.n	80091e8 <create_chain+0x162>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8009110:	f109 0201 	add.w	r2, r9, #1
 8009114:	42aa      	cmp	r2, r5
 8009116:	d022      	beq.n	800915e <create_chain+0xd8>
				if (obj->n_frag == 0) obj->n_frag = 1;
 8009118:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800911c:	b913      	cbnz	r3, 8009124 <create_chain+0x9e>
 800911e:	2301      	movs	r3, #1
 8009120:	f8c8 301c 	str.w	r3, [r8, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8009124:	462a      	mov	r2, r5
 8009126:	4649      	mov	r1, r9
 8009128:	4640      	mov	r0, r8
 800912a:	f7ff fe6f 	bl	8008e0c <fill_last_frag>
				if (res == FR_OK) obj->n_frag = 1;
 800912e:	4603      	mov	r3, r0
 8009130:	2800      	cmp	r0, #0
 8009132:	d15b      	bne.n	80091ec <create_chain+0x166>
 8009134:	2201      	movs	r2, #1
 8009136:	f8c8 201c 	str.w	r2, [r8, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800913a:	462c      	mov	r4, r5
 800913c:	e03e      	b.n	80091bc <create_chain+0x136>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800913e:	f898 2007 	ldrb.w	r2, [r8, #7]
 8009142:	2a02      	cmp	r2, #2
 8009144:	d1e0      	bne.n	8009108 <create_chain+0x82>
 8009146:	1c72      	adds	r2, r6, #1
 8009148:	42aa      	cmp	r2, r5
 800914a:	d0dd      	beq.n	8009108 <create_chain+0x82>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800914c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8009150:	1ab2      	subs	r2, r6, r2
 8009152:	f8c8 2018 	str.w	r2, [r8, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8009156:	2203      	movs	r2, #3
 8009158:	f888 2007 	strb.w	r2, [r8, #7]
 800915c:	e7d4      	b.n	8009108 <create_chain+0x82>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800915e:	f8d8 201c 	ldr.w	r2, [r8, #28]
 8009162:	b122      	cbz	r2, 800916e <create_chain+0xe8>
 8009164:	3201      	adds	r2, #1
 8009166:	f8c8 201c 	str.w	r2, [r8, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800916a:	462c      	mov	r4, r5
 800916c:	e026      	b.n	80091bc <create_chain+0x136>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800916e:	2202      	movs	r2, #2
 8009170:	e7f9      	b.n	8009166 <create_chain+0xe0>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009172:	4621      	mov	r1, r4
 8009174:	4640      	mov	r0, r8
 8009176:	f7ff fe7a 	bl	8008e6e <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 800917a:	4605      	mov	r5, r0
 800917c:	b170      	cbz	r0, 800919c <create_chain+0x116>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800917e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009182:	bf18      	it	ne
 8009184:	2801      	cmpne	r0, #1
 8009186:	d044      	beq.n	8009212 <create_chain+0x18c>
			if (ncl == scl) return 0;		/* No free cluster */
 8009188:	42b4      	cmp	r4, r6
 800918a:	d041      	beq.n	8009210 <create_chain+0x18a>
			ncl++;							/* Next cluster */
 800918c:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	42a3      	cmp	r3, r4
 8009192:	d8ee      	bhi.n	8009172 <create_chain+0xec>
				if (ncl > scl) return 0;	/* No free cluster */
 8009194:	2e01      	cmp	r6, #1
 8009196:	d939      	bls.n	800920c <create_chain+0x186>
				ncl = 2;
 8009198:	2402      	movs	r4, #2
 800919a:	e7ea      	b.n	8009172 <create_chain+0xec>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800919c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091a0:	4621      	mov	r1, r4
 80091a2:	4638      	mov	r0, r7
 80091a4:	f7ff fda3 	bl	8008cee <put_fat>
		if (res == FR_OK && clst != 0) {
 80091a8:	4603      	mov	r3, r0
 80091aa:	f119 0200 	adds.w	r2, r9, #0
 80091ae:	bf18      	it	ne
 80091b0:	2201      	movne	r2, #1
 80091b2:	2800      	cmp	r0, #0
 80091b4:	bf0c      	ite	eq
 80091b6:	4610      	moveq	r0, r2
 80091b8:	2000      	movne	r0, #0
 80091ba:	b970      	cbnz	r0, 80091da <create_chain+0x154>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80091bc:	b9c3      	cbnz	r3, 80091f0 <create_chain+0x16a>
		fs->last_clst = ncl;
 80091be:	617c      	str	r4, [r7, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80091c0:	69ba      	ldr	r2, [r7, #24]
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	3b02      	subs	r3, #2
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d801      	bhi.n	80091ce <create_chain+0x148>
 80091ca:	3a01      	subs	r2, #1
 80091cc:	61ba      	str	r2, [r7, #24]
		fs->fsi_flag |= 1;
 80091ce:	793b      	ldrb	r3, [r7, #4]
 80091d0:	f043 0301 	orr.w	r3, r3, #1
 80091d4:	713b      	strb	r3, [r7, #4]
 80091d6:	4625      	mov	r5, r4
 80091d8:	e01b      	b.n	8009212 <create_chain+0x18c>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80091da:	4622      	mov	r2, r4
 80091dc:	4649      	mov	r1, r9
 80091de:	4638      	mov	r0, r7
 80091e0:	f7ff fd85 	bl	8008cee <put_fat>
 80091e4:	4603      	mov	r3, r0
 80091e6:	e7e9      	b.n	80091bc <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 80091e8:	462c      	mov	r4, r5
 80091ea:	e7e7      	b.n	80091bc <create_chain+0x136>
 80091ec:	462c      	mov	r4, r5
 80091ee:	e7e5      	b.n	80091bc <create_chain+0x136>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d001      	beq.n	80091f8 <create_chain+0x172>
 80091f4:	2501      	movs	r5, #1
 80091f6:	e00c      	b.n	8009212 <create_chain+0x18c>
 80091f8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80091fc:	e009      	b.n	8009212 <create_chain+0x18c>
		if (cs < 2) return 1;				/* Invalid FAT value */
 80091fe:	2501      	movs	r5, #1
 8009200:	e007      	b.n	8009212 <create_chain+0x18c>
		if (res == FR_INT_ERR) return 1;
 8009202:	2501      	movs	r5, #1
 8009204:	e005      	b.n	8009212 <create_chain+0x18c>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8009206:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800920a:	e002      	b.n	8009212 <create_chain+0x18c>
				if (ncl > scl) return 0;	/* No free cluster */
 800920c:	2500      	movs	r5, #0
 800920e:	e000      	b.n	8009212 <create_chain+0x18c>
			if (ncl == scl) return 0;		/* No free cluster */
 8009210:	2500      	movs	r5, #0
}
 8009212:	4628      	mov	r0, r5
 8009214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009218 <remove_chain>:
{
 8009218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 800921c:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800921e:	2901      	cmp	r1, #1
 8009220:	d96b      	bls.n	80092fa <remove_chain+0xe2>
 8009222:	4607      	mov	r7, r0
 8009224:	460e      	mov	r6, r1
 8009226:	4691      	mov	r9, r2
 8009228:	69e3      	ldr	r3, [r4, #28]
 800922a:	428b      	cmp	r3, r1
 800922c:	d967      	bls.n	80092fe <remove_chain+0xe6>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800922e:	b172      	cbz	r2, 800924e <remove_chain+0x36>
 8009230:	7823      	ldrb	r3, [r4, #0]
 8009232:	2b04      	cmp	r3, #4
 8009234:	d102      	bne.n	800923c <remove_chain+0x24>
 8009236:	79c3      	ldrb	r3, [r0, #7]
 8009238:	2b02      	cmp	r3, #2
 800923a:	d008      	beq.n	800924e <remove_chain+0x36>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800923c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009240:	4649      	mov	r1, r9
 8009242:	4620      	mov	r0, r4
 8009244:	f7ff fd53 	bl	8008cee <put_fat>
		if (res != FR_OK) return res;
 8009248:	4603      	mov	r3, r0
 800924a:	2800      	cmp	r0, #0
 800924c:	d158      	bne.n	8009300 <remove_chain+0xe8>
{
 800924e:	46b0      	mov	r8, r6
 8009250:	e012      	b.n	8009278 <remove_chain+0x60>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009252:	2200      	movs	r2, #0
 8009254:	4631      	mov	r1, r6
 8009256:	4620      	mov	r0, r4
 8009258:	f7ff fd49 	bl	8008cee <put_fat>
			if (res != FR_OK) return res;
 800925c:	4603      	mov	r3, r0
 800925e:	b1c8      	cbz	r0, 8009294 <remove_chain+0x7c>
 8009260:	e04e      	b.n	8009300 <remove_chain+0xe8>
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8009262:	1c73      	adds	r3, r6, #1
 8009264:	42ab      	cmp	r3, r5
 8009266:	d003      	beq.n	8009270 <remove_chain+0x58>
			if (fs->fs_type == FS_EXFAT) {
 8009268:	7823      	ldrb	r3, [r4, #0]
 800926a:	2b04      	cmp	r3, #4
 800926c:	d01e      	beq.n	80092ac <remove_chain+0x94>
			scl = ecl = nxt;
 800926e:	46a8      	mov	r8, r5
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009270:	69e3      	ldr	r3, [r4, #28]
		clst = nxt;					/* Next cluster */
 8009272:	462e      	mov	r6, r5
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009274:	42ab      	cmp	r3, r5
 8009276:	d925      	bls.n	80092c4 <remove_chain+0xac>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009278:	4631      	mov	r1, r6
 800927a:	4638      	mov	r0, r7
 800927c:	f7ff fdf7 	bl	8008e6e <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 8009280:	4605      	mov	r5, r0
 8009282:	b1f8      	cbz	r0, 80092c4 <remove_chain+0xac>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009284:	2801      	cmp	r0, #1
 8009286:	d03e      	beq.n	8009306 <remove_chain+0xee>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009288:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800928c:	d03d      	beq.n	800930a <remove_chain+0xf2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800928e:	7823      	ldrb	r3, [r4, #0]
 8009290:	2b04      	cmp	r3, #4
 8009292:	d1de      	bne.n	8009252 <remove_chain+0x3a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009294:	69a2      	ldr	r2, [r4, #24]
 8009296:	69e3      	ldr	r3, [r4, #28]
 8009298:	3b02      	subs	r3, #2
 800929a:	429a      	cmp	r2, r3
 800929c:	d2e1      	bcs.n	8009262 <remove_chain+0x4a>
			fs->free_clst++;
 800929e:	3201      	adds	r2, #1
 80092a0:	61a2      	str	r2, [r4, #24]
			fs->fsi_flag |= 1;
 80092a2:	7923      	ldrb	r3, [r4, #4]
 80092a4:	f043 0301 	orr.w	r3, r3, #1
 80092a8:	7123      	strb	r3, [r4, #4]
 80092aa:	e7da      	b.n	8009262 <remove_chain+0x4a>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 80092ac:	eba6 0208 	sub.w	r2, r6, r8
 80092b0:	2300      	movs	r3, #0
 80092b2:	3201      	adds	r2, #1
 80092b4:	4641      	mov	r1, r8
 80092b6:	4620      	mov	r0, r4
 80092b8:	f7ff fcdd 	bl	8008c76 <change_bitmap>
				if (res != FR_OK) return res;
 80092bc:	4603      	mov	r3, r0
 80092be:	b9f8      	cbnz	r0, 8009300 <remove_chain+0xe8>
			scl = ecl = nxt;
 80092c0:	46a8      	mov	r8, r5
 80092c2:	e7d5      	b.n	8009270 <remove_chain+0x58>
	if (fs->fs_type == FS_EXFAT) {
 80092c4:	7823      	ldrb	r3, [r4, #0]
 80092c6:	2b04      	cmp	r3, #4
 80092c8:	d001      	beq.n	80092ce <remove_chain+0xb6>
	return FR_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	e018      	b.n	8009300 <remove_chain+0xe8>
		if (pclst == 0) {	/* Does the object have no chain? */
 80092ce:	f1b9 0f00 	cmp.w	r9, #0
 80092d2:	d004      	beq.n	80092de <remove_chain+0xc6>
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 80092d4:	79fb      	ldrb	r3, [r7, #7]
 80092d6:	2b03      	cmp	r3, #3
 80092d8:	d004      	beq.n	80092e4 <remove_chain+0xcc>
	return FR_OK;
 80092da:	2300      	movs	r3, #0
 80092dc:	e010      	b.n	8009300 <remove_chain+0xe8>
			obj->stat = 0;		/* Change the object status 'initial' */
 80092de:	2300      	movs	r3, #0
 80092e0:	71fb      	strb	r3, [r7, #7]
 80092e2:	e00d      	b.n	8009300 <remove_chain+0xe8>
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	454b      	cmp	r3, r9
 80092e8:	d811      	bhi.n	800930e <remove_chain+0xf6>
 80092ea:	69ba      	ldr	r2, [r7, #24]
 80092ec:	4413      	add	r3, r2
 80092ee:	454b      	cmp	r3, r9
 80092f0:	d30f      	bcc.n	8009312 <remove_chain+0xfa>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 80092f2:	2302      	movs	r3, #2
 80092f4:	71fb      	strb	r3, [r7, #7]
	return FR_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	e002      	b.n	8009300 <remove_chain+0xe8>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80092fa:	2302      	movs	r3, #2
 80092fc:	e000      	b.n	8009300 <remove_chain+0xe8>
 80092fe:	2302      	movs	r3, #2
}
 8009300:	4618      	mov	r0, r3
 8009302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009306:	2302      	movs	r3, #2
 8009308:	e7fa      	b.n	8009300 <remove_chain+0xe8>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800930a:	2301      	movs	r3, #1
 800930c:	e7f8      	b.n	8009300 <remove_chain+0xe8>
	return FR_OK;
 800930e:	2300      	movs	r3, #0
 8009310:	e7f6      	b.n	8009300 <remove_chain+0xe8>
 8009312:	2300      	movs	r3, #0
 8009314:	e7f4      	b.n	8009300 <remove_chain+0xe8>

08009316 <dir_next>:
{
 8009316:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
 800931a:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800931c:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800931e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009320:	2b00      	cmp	r3, #0
 8009322:	d079      	beq.n	8009418 <dir_next+0x102>
 8009324:	3520      	adds	r5, #32
 8009326:	7832      	ldrb	r2, [r6, #0]
 8009328:	2a04      	cmp	r2, #4
 800932a:	d018      	beq.n	800935e <dir_next+0x48>
 800932c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009330:	42aa      	cmp	r2, r5
 8009332:	d973      	bls.n	800941c <dir_next+0x106>
 8009334:	4688      	mov	r8, r1
 8009336:	4604      	mov	r4, r0
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009338:	f3c5 0708 	ubfx	r7, r5, #0, #9
 800933c:	b93f      	cbnz	r7, 800934e <dir_next+0x38>
		dp->sect++;				/* Next sector */
 800933e:	3301      	adds	r3, #1
 8009340:	6383      	str	r3, [r0, #56]	; 0x38
		if (!dp->clust) {		/* Static table */
 8009342:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8009344:	b991      	cbnz	r1, 800936c <dir_next+0x56>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009346:	8933      	ldrh	r3, [r6, #8]
 8009348:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800934c:	d90a      	bls.n	8009364 <dir_next+0x4e>
	dp->dptr = ofs;						/* Current entry */
 800934e:	6325      	str	r5, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009350:	f106 0338 	add.w	r3, r6, #56	; 0x38
 8009354:	443b      	add	r3, r7
 8009356:	63e3      	str	r3, [r4, #60]	; 0x3c
	return FR_OK;
 8009358:	2000      	movs	r0, #0
}
 800935a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800935e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009362:	e7e5      	b.n	8009330 <dir_next+0x1a>
				dp->sect = 0; return FR_NO_FILE;
 8009364:	2300      	movs	r3, #0
 8009366:	6383      	str	r3, [r0, #56]	; 0x38
 8009368:	2004      	movs	r0, #4
 800936a:	e7f6      	b.n	800935a <dir_next+0x44>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800936c:	8973      	ldrh	r3, [r6, #10]
 800936e:	3b01      	subs	r3, #1
 8009370:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 8009374:	d1eb      	bne.n	800934e <dir_next+0x38>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009376:	f7ff fd7a 	bl	8008e6e <get_fat>
 800937a:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800937c:	2801      	cmp	r0, #1
 800937e:	d94f      	bls.n	8009420 <dir_next+0x10a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009380:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009384:	d04e      	beq.n	8009424 <dir_next+0x10e>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009386:	69f3      	ldr	r3, [r6, #28]
 8009388:	4283      	cmp	r3, r0
 800938a:	d83d      	bhi.n	8009408 <dir_next+0xf2>
					if (!stretch) {								/* If no stretch, report EOT */
 800938c:	f1b8 0f00 	cmp.w	r8, #0
 8009390:	d015      	beq.n	80093be <dir_next+0xa8>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009392:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009394:	4620      	mov	r0, r4
 8009396:	f7ff fe76 	bl	8009086 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800939a:	4681      	mov	r9, r0
 800939c:	2800      	cmp	r0, #0
 800939e:	d043      	beq.n	8009428 <dir_next+0x112>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80093a0:	2801      	cmp	r0, #1
 80093a2:	d043      	beq.n	800942c <dir_next+0x116>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80093a4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80093a8:	d042      	beq.n	8009430 <dir_next+0x11a>
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 80093aa:	79e3      	ldrb	r3, [r4, #7]
 80093ac:	f043 0304 	orr.w	r3, r3, #4
 80093b0:	71e3      	strb	r3, [r4, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80093b2:	4630      	mov	r0, r6
 80093b4:	f7ff f95e 	bl	8008674 <sync_window>
 80093b8:	b128      	cbz	r0, 80093c6 <dir_next+0xb0>
 80093ba:	2001      	movs	r0, #1
 80093bc:	e7cd      	b.n	800935a <dir_next+0x44>
						dp->sect = 0; return FR_NO_FILE;
 80093be:	2300      	movs	r3, #0
 80093c0:	63a3      	str	r3, [r4, #56]	; 0x38
 80093c2:	2004      	movs	r0, #4
 80093c4:	e7c9      	b.n	800935a <dir_next+0x44>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80093c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093ca:	2100      	movs	r1, #0
 80093cc:	f106 0038 	add.w	r0, r6, #56	; 0x38
 80093d0:	f7fe fe68 	bl	80080a4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80093d4:	4649      	mov	r1, r9
 80093d6:	4630      	mov	r0, r6
 80093d8:	f7fe ff56 	bl	8008288 <clust2sect>
 80093dc:	6370      	str	r0, [r6, #52]	; 0x34
 80093de:	f04f 0800 	mov.w	r8, #0
 80093e2:	8973      	ldrh	r3, [r6, #10]
 80093e4:	4543      	cmp	r3, r8
 80093e6:	d90b      	bls.n	8009400 <dir_next+0xea>
						fs->wflag = 1;
 80093e8:	2301      	movs	r3, #1
 80093ea:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80093ec:	4630      	mov	r0, r6
 80093ee:	f7ff f941 	bl	8008674 <sync_window>
 80093f2:	b9f8      	cbnz	r0, 8009434 <dir_next+0x11e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80093f4:	f108 0801 	add.w	r8, r8, #1
 80093f8:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80093fa:	3301      	adds	r3, #1
 80093fc:	6373      	str	r3, [r6, #52]	; 0x34
 80093fe:	e7f0      	b.n	80093e2 <dir_next+0xcc>
					fs->winsect -= n;							/* Restore window offset */
 8009400:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009402:	eba3 0308 	sub.w	r3, r3, r8
 8009406:	6373      	str	r3, [r6, #52]	; 0x34
				dp->clust = clst;		/* Initialize data for new cluster */
 8009408:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800940c:	4649      	mov	r1, r9
 800940e:	4630      	mov	r0, r6
 8009410:	f7fe ff3a 	bl	8008288 <clust2sect>
 8009414:	63a0      	str	r0, [r4, #56]	; 0x38
 8009416:	e79a      	b.n	800934e <dir_next+0x38>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009418:	2004      	movs	r0, #4
 800941a:	e79e      	b.n	800935a <dir_next+0x44>
 800941c:	2004      	movs	r0, #4
 800941e:	e79c      	b.n	800935a <dir_next+0x44>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009420:	2002      	movs	r0, #2
 8009422:	e79a      	b.n	800935a <dir_next+0x44>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009424:	2001      	movs	r0, #1
 8009426:	e798      	b.n	800935a <dir_next+0x44>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009428:	2007      	movs	r0, #7
 800942a:	e796      	b.n	800935a <dir_next+0x44>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800942c:	2002      	movs	r0, #2
 800942e:	e794      	b.n	800935a <dir_next+0x44>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009430:	2001      	movs	r0, #1
 8009432:	e792      	b.n	800935a <dir_next+0x44>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009434:	2001      	movs	r0, #1
 8009436:	e790      	b.n	800935a <dir_next+0x44>

08009438 <load_xdir>:
{
 8009438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800943c:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800943e:	6800      	ldr	r0, [r0, #0]
 8009440:	6906      	ldr	r6, [r0, #16]
	res = move_window(dp->obj.fs, dp->sect);
 8009442:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009444:	f7ff f940 	bl	80086c8 <move_window>
	if (res != FR_OK) return res;
 8009448:	4605      	mov	r5, r0
 800944a:	b920      	cbnz	r0, 8009456 <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800944c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800944e:	780b      	ldrb	r3, [r1, #0]
 8009450:	2b85      	cmp	r3, #133	; 0x85
 8009452:	d003      	beq.n	800945c <load_xdir+0x24>
 8009454:	2502      	movs	r5, #2
}
 8009456:	4628      	mov	r0, r5
 8009458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800945c:	2220      	movs	r2, #32
 800945e:	4630      	mov	r0, r6
 8009460:	f7fe fe17 	bl	8008092 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8009464:	7877      	ldrb	r7, [r6, #1]
 8009466:	3701      	adds	r7, #1
 8009468:	017f      	lsls	r7, r7, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800946a:	f1a7 0360 	sub.w	r3, r7, #96	; 0x60
 800946e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009472:	d851      	bhi.n	8009518 <load_xdir+0xe0>
	res = dir_next(dp, 0);
 8009474:	2100      	movs	r1, #0
 8009476:	4620      	mov	r0, r4
 8009478:	f7ff ff4d 	bl	8009316 <dir_next>
	if (res != FR_OK) return res;
 800947c:	4605      	mov	r5, r0
 800947e:	2800      	cmp	r0, #0
 8009480:	d1e9      	bne.n	8009456 <load_xdir+0x1e>
	res = move_window(dp->obj.fs, dp->sect);
 8009482:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009484:	6820      	ldr	r0, [r4, #0]
 8009486:	f7ff f91f 	bl	80086c8 <move_window>
	if (res != FR_OK) return res;
 800948a:	4605      	mov	r5, r0
 800948c:	2800      	cmp	r0, #0
 800948e:	d1e2      	bne.n	8009456 <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8009490:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009492:	780b      	ldrb	r3, [r1, #0]
 8009494:	2bc0      	cmp	r3, #192	; 0xc0
 8009496:	d001      	beq.n	800949c <load_xdir+0x64>
 8009498:	2502      	movs	r5, #2
 800949a:	e7dc      	b.n	8009456 <load_xdir+0x1e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800949c:	2220      	movs	r2, #32
 800949e:	18b0      	adds	r0, r6, r2
 80094a0:	f7fe fdf7 	bl	8008092 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 80094a4:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 80094a8:	332c      	adds	r3, #44	; 0x2c
 80094aa:	4a1e      	ldr	r2, [pc, #120]	; (8009524 <load_xdir+0xec>)
 80094ac:	fba2 2303 	umull	r2, r3, r2, r3
 80094b0:	08db      	lsrs	r3, r3, #3
 80094b2:	ebb7 1f43 	cmp.w	r7, r3, lsl #5
 80094b6:	d331      	bcc.n	800951c <load_xdir+0xe4>
	i = SZDIRE * 2;	/* C1 offset */
 80094b8:	f04f 0840 	mov.w	r8, #64	; 0x40
 80094bc:	e003      	b.n	80094c6 <load_xdir+0x8e>
	} while ((i += SZDIRE) < sz_ent);
 80094be:	f108 0820 	add.w	r8, r8, #32
 80094c2:	4547      	cmp	r7, r8
 80094c4:	d91a      	bls.n	80094fc <load_xdir+0xc4>
		res = dir_next(dp, 0);
 80094c6:	2100      	movs	r1, #0
 80094c8:	4620      	mov	r0, r4
 80094ca:	f7ff ff24 	bl	8009316 <dir_next>
		if (res != FR_OK) return res;
 80094ce:	4605      	mov	r5, r0
 80094d0:	2800      	cmp	r0, #0
 80094d2:	d1c0      	bne.n	8009456 <load_xdir+0x1e>
		res = move_window(dp->obj.fs, dp->sect);
 80094d4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80094d6:	6820      	ldr	r0, [r4, #0]
 80094d8:	f7ff f8f6 	bl	80086c8 <move_window>
		if (res != FR_OK) return res;
 80094dc:	4605      	mov	r5, r0
 80094de:	2800      	cmp	r0, #0
 80094e0:	d1b9      	bne.n	8009456 <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 80094e2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80094e4:	780b      	ldrb	r3, [r1, #0]
 80094e6:	2bc1      	cmp	r3, #193	; 0xc1
 80094e8:	d11a      	bne.n	8009520 <load_xdir+0xe8>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 80094ea:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
 80094ee:	d2e6      	bcs.n	80094be <load_xdir+0x86>
 80094f0:	2220      	movs	r2, #32
 80094f2:	eb06 0008 	add.w	r0, r6, r8
 80094f6:	f7fe fdcc 	bl	8008092 <mem_cpy>
 80094fa:	e7e0      	b.n	80094be <load_xdir+0x86>
	if (i <= MAXDIRB(_MAX_LFN)) {
 80094fc:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
 8009500:	d8a9      	bhi.n	8009456 <load_xdir+0x1e>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8009502:	4630      	mov	r0, r6
 8009504:	f7fe ffe8 	bl	80084d8 <xdir_sum>
 8009508:	4604      	mov	r4, r0
 800950a:	1cb0      	adds	r0, r6, #2
 800950c:	f7fe fd3c 	bl	8007f88 <ld_word>
 8009510:	4284      	cmp	r4, r0
 8009512:	d0a0      	beq.n	8009456 <load_xdir+0x1e>
 8009514:	2502      	movs	r5, #2
 8009516:	e79e      	b.n	8009456 <load_xdir+0x1e>
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8009518:	2502      	movs	r5, #2
 800951a:	e79c      	b.n	8009456 <load_xdir+0x1e>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800951c:	2502      	movs	r5, #2
 800951e:	e79a      	b.n	8009456 <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8009520:	2502      	movs	r5, #2
 8009522:	e798      	b.n	8009456 <load_xdir+0x1e>
 8009524:	88888889 	.word	0x88888889

08009528 <load_obj_dir>:
{
 8009528:	b510      	push	{r4, lr}
 800952a:	4604      	mov	r4, r0
	dp->obj.fs = obj->fs;
 800952c:	680b      	ldr	r3, [r1, #0]
 800952e:	6003      	str	r3, [r0, #0]
	dp->obj.sclust = obj->c_scl;
 8009530:	6a0b      	ldr	r3, [r1, #32]
 8009532:	6083      	str	r3, [r0, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8009534:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
 8009538:	71c3      	strb	r3, [r0, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800953a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800953c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009540:	6103      	str	r3, [r0, #16]
 8009542:	2300      	movs	r3, #0
 8009544:	6143      	str	r3, [r0, #20]
	dp->blk_ofs = obj->c_ofs;
 8009546:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8009548:	64c1      	str	r1, [r0, #76]	; 0x4c
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800954a:	f7ff fd42 	bl	8008fd2 <dir_sdi>
	if (res == FR_OK) {
 800954e:	4603      	mov	r3, r0
 8009550:	b108      	cbz	r0, 8009556 <load_obj_dir+0x2e>
}
 8009552:	4618      	mov	r0, r3
 8009554:	bd10      	pop	{r4, pc}
		res = load_xdir(dp);		/* Load the object's entry block */
 8009556:	4620      	mov	r0, r4
 8009558:	f7ff ff6e 	bl	8009438 <load_xdir>
 800955c:	4603      	mov	r3, r0
 800955e:	e7f8      	b.n	8009552 <load_obj_dir+0x2a>

08009560 <dir_read>:
{
 8009560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009564:	4604      	mov	r4, r0
 8009566:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
 8009568:	6806      	ldr	r6, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
 800956a:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800956e:	464f      	mov	r7, r9
	FRESULT res = FR_NO_FILE;
 8009570:	2504      	movs	r5, #4
	while (dp->sect) {
 8009572:	e042      	b.n	80095fa <dir_read+0x9a>
			if (_USE_LABEL && vol) {
 8009574:	f1b8 0f00 	cmp.w	r8, #0
 8009578:	d002      	beq.n	8009580 <dir_read+0x20>
				if (c == 0x83) break;	/* Volume label entry? */
 800957a:	2b83      	cmp	r3, #131	; 0x83
 800957c:	d137      	bne.n	80095ee <dir_read+0x8e>
 800957e:	e05e      	b.n	800963e <dir_read+0xde>
				if (c == 0x85) {		/* Start of the file entry block? */
 8009580:	2b85      	cmp	r3, #133	; 0x85
 8009582:	d134      	bne.n	80095ee <dir_read+0x8e>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8009584:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009586:	64e3      	str	r3, [r4, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8009588:	4620      	mov	r0, r4
 800958a:	f7ff ff55 	bl	8009438 <load_xdir>
					if (res == FR_OK) {
 800958e:	4605      	mov	r5, r0
 8009590:	2800      	cmp	r0, #0
 8009592:	d154      	bne.n	800963e <dir_read+0xde>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8009594:	6933      	ldr	r3, [r6, #16]
 8009596:	791b      	ldrb	r3, [r3, #4]
 8009598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800959c:	71a3      	strb	r3, [r4, #6]
 800959e:	e04e      	b.n	800963e <dir_read+0xde>
				if (a == AM_LFN) {			/* An LFN entry is found */
 80095a0:	2a0f      	cmp	r2, #15
 80095a2:	d119      	bne.n	80095d8 <dir_read+0x78>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80095a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80095a8:	d006      	beq.n	80095b8 <dir_read+0x58>
						sum = dp->dir[LDIR_Chksum];
 80095aa:	f891 900d 	ldrb.w	r9, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
 80095ae:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 80095b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80095b4:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;
 80095b6:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80095b8:	42bb      	cmp	r3, r7
 80095ba:	d001      	beq.n	80095c0 <dir_read+0x60>
 80095bc:	27ff      	movs	r7, #255	; 0xff
 80095be:	e016      	b.n	80095ee <dir_read+0x8e>
 80095c0:	7b4b      	ldrb	r3, [r1, #13]
 80095c2:	454b      	cmp	r3, r9
 80095c4:	d001      	beq.n	80095ca <dir_read+0x6a>
 80095c6:	27ff      	movs	r7, #255	; 0xff
 80095c8:	e011      	b.n	80095ee <dir_read+0x8e>
 80095ca:	68f0      	ldr	r0, [r6, #12]
 80095cc:	f7fe fea6 	bl	800831c <pick_lfn>
 80095d0:	b390      	cbz	r0, 8009638 <dir_read+0xd8>
 80095d2:	3f01      	subs	r7, #1
 80095d4:	b2ff      	uxtb	r7, r7
 80095d6:	e00a      	b.n	80095ee <dir_read+0x8e>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80095d8:	b927      	cbnz	r7, 80095e4 <dir_read+0x84>
 80095da:	4608      	mov	r0, r1
 80095dc:	f7fe ff6e 	bl	80084bc <sum_sfn>
 80095e0:	4548      	cmp	r0, r9
 80095e2:	d02c      	beq.n	800963e <dir_read+0xde>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80095e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095e8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80095ea:	e028      	b.n	800963e <dir_read+0xde>
				ord = 0xFF;
 80095ec:	27ff      	movs	r7, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
 80095ee:	2100      	movs	r1, #0
 80095f0:	4620      	mov	r0, r4
 80095f2:	f7ff fe90 	bl	8009316 <dir_next>
		if (res != FR_OK) break;
 80095f6:	4605      	mov	r5, r0
 80095f8:	bb08      	cbnz	r0, 800963e <dir_read+0xde>
	while (dp->sect) {
 80095fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80095fc:	b1f9      	cbz	r1, 800963e <dir_read+0xde>
		res = move_window(fs, dp->sect);
 80095fe:	4630      	mov	r0, r6
 8009600:	f7ff f862 	bl	80086c8 <move_window>
		if (res != FR_OK) break;
 8009604:	4605      	mov	r5, r0
 8009606:	b9d0      	cbnz	r0, 800963e <dir_read+0xde>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8009608:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800960a:	780b      	ldrb	r3, [r1, #0]
		if (c == 0) {
 800960c:	b1b3      	cbz	r3, 800963c <dir_read+0xdc>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800960e:	7832      	ldrb	r2, [r6, #0]
 8009610:	2a04      	cmp	r2, #4
 8009612:	d0af      	beq.n	8009574 <dir_read+0x14>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009614:	7aca      	ldrb	r2, [r1, #11]
 8009616:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800961a:	71a2      	strb	r2, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800961c:	2b2e      	cmp	r3, #46	; 0x2e
 800961e:	bf18      	it	ne
 8009620:	2be5      	cmpne	r3, #229	; 0xe5
 8009622:	d0e3      	beq.n	80095ec <dir_read+0x8c>
 8009624:	f022 0020 	bic.w	r0, r2, #32
 8009628:	2808      	cmp	r0, #8
 800962a:	bf14      	ite	ne
 800962c:	2000      	movne	r0, #0
 800962e:	2001      	moveq	r0, #1
 8009630:	4540      	cmp	r0, r8
 8009632:	d0b5      	beq.n	80095a0 <dir_read+0x40>
				ord = 0xFF;
 8009634:	27ff      	movs	r7, #255	; 0xff
 8009636:	e7da      	b.n	80095ee <dir_read+0x8e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009638:	27ff      	movs	r7, #255	; 0xff
 800963a:	e7d8      	b.n	80095ee <dir_read+0x8e>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800963c:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800963e:	b10d      	cbz	r5, 8009644 <dir_read+0xe4>
 8009640:	2300      	movs	r3, #0
 8009642:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8009644:	4628      	mov	r0, r5
 8009646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800964a <dir_alloc>:
{
 800964a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800964c:	4604      	mov	r4, r0
 800964e:	460f      	mov	r7, r1
	FATFS *fs = dp->obj.fs;
 8009650:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 8009652:	2100      	movs	r1, #0
 8009654:	f7ff fcbd 	bl	8008fd2 <dir_sdi>
	if (res == FR_OK) {
 8009658:	4602      	mov	r2, r0
 800965a:	bb20      	cbnz	r0, 80096a6 <dir_alloc+0x5c>
		n = 0;
 800965c:	2500      	movs	r5, #0
 800965e:	e00c      	b.n	800967a <dir_alloc+0x30>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8009660:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009662:	f993 3000 	ldrsb.w	r3, [r3]
 8009666:	43db      	mvns	r3, r3
 8009668:	0fdb      	lsrs	r3, r3, #31
 800966a:	e017      	b.n	800969c <dir_alloc+0x52>
				n = 0;					/* Not a blank entry. Restart to search */
 800966c:	2500      	movs	r5, #0
			res = dir_next(dp, 1);
 800966e:	2101      	movs	r1, #1
 8009670:	4620      	mov	r0, r4
 8009672:	f7ff fe50 	bl	8009316 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009676:	4602      	mov	r2, r0
 8009678:	b9a8      	cbnz	r0, 80096a6 <dir_alloc+0x5c>
			res = move_window(fs, dp->sect);
 800967a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800967c:	4630      	mov	r0, r6
 800967e:	f7ff f823 	bl	80086c8 <move_window>
			if (res != FR_OK) break;
 8009682:	4602      	mov	r2, r0
 8009684:	b978      	cbnz	r0, 80096a6 <dir_alloc+0x5c>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8009686:	7833      	ldrb	r3, [r6, #0]
 8009688:	2b04      	cmp	r3, #4
 800968a:	d0e9      	beq.n	8009660 <dir_alloc+0x16>
 800968c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	bf18      	it	ne
 8009694:	2be5      	cmpne	r3, #229	; 0xe5
 8009696:	bf0c      	ite	eq
 8009698:	2301      	moveq	r3, #1
 800969a:	2300      	movne	r3, #0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d0e5      	beq.n	800966c <dir_alloc+0x22>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80096a0:	3501      	adds	r5, #1
 80096a2:	42bd      	cmp	r5, r7
 80096a4:	d1e3      	bne.n	800966e <dir_alloc+0x24>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80096a6:	2a04      	cmp	r2, #4
 80096a8:	d001      	beq.n	80096ae <dir_alloc+0x64>
}
 80096aa:	4610      	mov	r0, r2
 80096ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80096ae:	2207      	movs	r2, #7
 80096b0:	e7fb      	b.n	80096aa <dir_alloc+0x60>

080096b2 <store_xdir>:
{
 80096b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b4:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 80096b6:	6803      	ldr	r3, [r0, #0]
 80096b8:	691e      	ldr	r6, [r3, #16]
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 80096ba:	4630      	mov	r0, r6
 80096bc:	f7fe ff0c 	bl	80084d8 <xdir_sum>
 80096c0:	4601      	mov	r1, r0
 80096c2:	1cb0      	adds	r0, r6, #2
 80096c4:	f7fe fcc4 	bl	8008050 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 80096c8:	7877      	ldrb	r7, [r6, #1]
 80096ca:	3701      	adds	r7, #1
	res = dir_sdi(dp, dp->blk_ofs);
 80096cc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80096ce:	4620      	mov	r0, r4
 80096d0:	f7ff fc7f 	bl	8008fd2 <dir_sdi>
 80096d4:	4605      	mov	r5, r0
	while (res == FR_OK) {
 80096d6:	b9b5      	cbnz	r5, 8009706 <store_xdir+0x54>
		res = move_window(dp->obj.fs, dp->sect);
 80096d8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80096da:	6820      	ldr	r0, [r4, #0]
 80096dc:	f7fe fff4 	bl	80086c8 <move_window>
		if (res != FR_OK) break;
 80096e0:	4605      	mov	r5, r0
 80096e2:	b980      	cbnz	r0, 8009706 <store_xdir+0x54>
		mem_cpy(dp->dir, dirb, SZDIRE);
 80096e4:	2220      	movs	r2, #32
 80096e6:	4631      	mov	r1, r6
 80096e8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80096ea:	f7fe fcd2 	bl	8008092 <mem_cpy>
		dp->obj.fs->wflag = 1;
 80096ee:	6823      	ldr	r3, [r4, #0]
 80096f0:	2201      	movs	r2, #1
 80096f2:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 80096f4:	3f01      	subs	r7, #1
 80096f6:	d006      	beq.n	8009706 <store_xdir+0x54>
		dirb += SZDIRE;
 80096f8:	3620      	adds	r6, #32
		res = dir_next(dp, 0);
 80096fa:	2100      	movs	r1, #0
 80096fc:	4620      	mov	r0, r4
 80096fe:	f7ff fe0a 	bl	8009316 <dir_next>
 8009702:	4605      	mov	r5, r0
 8009704:	e7e7      	b.n	80096d6 <store_xdir+0x24>
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8009706:	2d02      	cmp	r5, #2
 8009708:	bf28      	it	cs
 800970a:	2502      	movcs	r5, #2
}
 800970c:	b2e8      	uxtb	r0, r5
 800970e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009710 <create_name>:
{
 8009710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009714:	b083      	sub	sp, #12
 8009716:	4681      	mov	r9, r0
 8009718:	468a      	mov	sl, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800971a:	f8d1 8000 	ldr.w	r8, [r1]
 800971e:	6803      	ldr	r3, [r0, #0]
 8009720:	68dd      	ldr	r5, [r3, #12]
 8009722:	2400      	movs	r4, #0
 8009724:	e011      	b.n	800974a <create_name+0x3a>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009726:	3701      	adds	r7, #1
 8009728:	f818 3007 	ldrb.w	r3, [r8, r7]
 800972c:	2b5c      	cmp	r3, #92	; 0x5c
 800972e:	bf18      	it	ne
 8009730:	2b2f      	cmpne	r3, #47	; 0x2f
 8009732:	d0f8      	beq.n	8009726 <create_name+0x16>
	*path = &p[si];						/* Return pointer to the next segment */
 8009734:	4447      	add	r7, r8
 8009736:	f8ca 7000 	str.w	r7, [sl]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800973a:	281f      	cmp	r0, #31
 800973c:	d822      	bhi.n	8009784 <create_name+0x74>
 800973e:	f04f 0804 	mov.w	r8, #4
 8009742:	e023      	b.n	800978c <create_name+0x7c>
		lfn[di++] = w;					/* Store the Unicode character */
 8009744:	f825 6014 	strh.w	r6, [r5, r4, lsl #1]
		w = p[si++];					/* Get a character */
 8009748:	463c      	mov	r4, r7
 800974a:	1c67      	adds	r7, r4, #1
 800974c:	f818 0004 	ldrb.w	r0, [r8, r4]
		if (w < ' ') break;				/* Break if end of the path name */
 8009750:	281f      	cmp	r0, #31
 8009752:	d9ef      	bls.n	8009734 <create_name+0x24>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009754:	285c      	cmp	r0, #92	; 0x5c
 8009756:	bf18      	it	ne
 8009758:	282f      	cmpne	r0, #47	; 0x2f
 800975a:	d0e5      	beq.n	8009728 <create_name+0x18>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800975c:	2cfe      	cmp	r4, #254	; 0xfe
 800975e:	f200 80e2 	bhi.w	8009926 <create_name+0x216>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009762:	2101      	movs	r1, #1
 8009764:	f001 f9a2 	bl	800aaac <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009768:	4606      	mov	r6, r0
 800976a:	2800      	cmp	r0, #0
 800976c:	f000 80dd 	beq.w	800992a <create_name+0x21a>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009770:	287f      	cmp	r0, #127	; 0x7f
 8009772:	d8e7      	bhi.n	8009744 <create_name+0x34>
 8009774:	4601      	mov	r1, r0
 8009776:	486f      	ldr	r0, [pc, #444]	; (8009934 <create_name+0x224>)
 8009778:	f7fe fca8 	bl	80080cc <chk_chr>
 800977c:	2800      	cmp	r0, #0
 800977e:	d0e1      	beq.n	8009744 <create_name+0x34>
 8009780:	2006      	movs	r0, #6
 8009782:	e07a      	b.n	800987a <create_name+0x16a>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009784:	f04f 0800 	mov.w	r8, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009788:	e000      	b.n	800978c <create_name+0x7c>
		di--;
 800978a:	3c01      	subs	r4, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800978c:	b144      	cbz	r4, 80097a0 <create_name+0x90>
		w = lfn[di - 1];
 800978e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009792:	4423      	add	r3, r4
 8009794:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (w != ' ' && w != '.') break;
 8009798:	2b20      	cmp	r3, #32
 800979a:	bf18      	it	ne
 800979c:	2b2e      	cmpne	r3, #46	; 0x2e
 800979e:	d0f4      	beq.n	800978a <create_name+0x7a>
	lfn[di] = 0;						/* LFN is created */
 80097a0:	2300      	movs	r3, #0
 80097a2:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80097a6:	2c00      	cmp	r4, #0
 80097a8:	f000 80c1 	beq.w	800992e <create_name+0x21e>
	mem_set(dp->fn, ' ', 11);
 80097ac:	220b      	movs	r2, #11
 80097ae:	2120      	movs	r1, #32
 80097b0:	f109 0040 	add.w	r0, r9, #64	; 0x40
 80097b4:	f7fe fc76 	bl	80080a4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80097b8:	2300      	movs	r3, #0
 80097ba:	e000      	b.n	80097be <create_name+0xae>
 80097bc:	3301      	adds	r3, #1
 80097be:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 80097c2:	2a2e      	cmp	r2, #46	; 0x2e
 80097c4:	bf18      	it	ne
 80097c6:	2a20      	cmpne	r2, #32
 80097c8:	d0f8      	beq.n	80097bc <create_name+0xac>
	if (si) cf |= NS_LOSS | NS_LFN;
 80097ca:	b11b      	cbz	r3, 80097d4 <create_name+0xc4>
 80097cc:	f048 0803 	orr.w	r8, r8, #3
 80097d0:	e000      	b.n	80097d4 <create_name+0xc4>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80097d2:	3c01      	subs	r4, #1
 80097d4:	b16c      	cbz	r4, 80097f2 <create_name+0xe2>
 80097d6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80097da:	4422      	add	r2, r4
 80097dc:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 80097e0:	2a2e      	cmp	r2, #46	; 0x2e
 80097e2:	d1f6      	bne.n	80097d2 <create_name+0xc2>
 80097e4:	f04f 0b08 	mov.w	fp, #8
 80097e8:	f04f 0a00 	mov.w	sl, #0
 80097ec:	f8cd a004 	str.w	sl, [sp, #4]
 80097f0:	e008      	b.n	8009804 <create_name+0xf4>
 80097f2:	46a2      	mov	sl, r4
 80097f4:	f04f 0b08 	mov.w	fp, #8
 80097f8:	2200      	movs	r2, #0
 80097fa:	9201      	str	r2, [sp, #4]
 80097fc:	e002      	b.n	8009804 <create_name+0xf4>
			cf |= NS_LOSS | NS_LFN; continue;
 80097fe:	f048 0803 	orr.w	r8, r8, #3
		w = lfn[si++];					/* Get an LFN character */
 8009802:	463b      	mov	r3, r7
 8009804:	1c5f      	adds	r7, r3, #1
 8009806:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 800980a:	b1be      	cbz	r6, 800983c <create_name+0x12c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800980c:	2e20      	cmp	r6, #32
 800980e:	d0f6      	beq.n	80097fe <create_name+0xee>
 8009810:	2e2e      	cmp	r6, #46	; 0x2e
 8009812:	bf14      	ite	ne
 8009814:	2300      	movne	r3, #0
 8009816:	2301      	moveq	r3, #1
 8009818:	42bc      	cmp	r4, r7
 800981a:	bf08      	it	eq
 800981c:	2300      	moveq	r3, #0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1ed      	bne.n	80097fe <create_name+0xee>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009822:	42bc      	cmp	r4, r7
 8009824:	bf18      	it	ne
 8009826:	45da      	cmpne	sl, fp
 8009828:	d337      	bcc.n	800989a <create_name+0x18a>
			if (ni == 11) {				/* Long extension */
 800982a:	f1bb 0f0b 	cmp.w	fp, #11
 800982e:	d027      	beq.n	8009880 <create_name+0x170>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009830:	42bc      	cmp	r4, r7
 8009832:	d001      	beq.n	8009838 <create_name+0x128>
 8009834:	f048 0803 	orr.w	r8, r8, #3
			if (si > di) break;			/* No extension */
 8009838:	42bc      	cmp	r4, r7
 800983a:	d224      	bcs.n	8009886 <create_name+0x176>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800983c:	f899 3040 	ldrb.w	r3, [r9, #64]	; 0x40
 8009840:	2be5      	cmp	r3, #229	; 0xe5
 8009842:	d061      	beq.n	8009908 <create_name+0x1f8>
	if (ni == 8) b <<= 2;
 8009844:	f1bb 0f08 	cmp.w	fp, #8
 8009848:	d062      	beq.n	8009910 <create_name+0x200>
 800984a:	9b01      	ldr	r3, [sp, #4]
 800984c:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009850:	2a0c      	cmp	r2, #12
 8009852:	d003      	beq.n	800985c <create_name+0x14c>
 8009854:	f003 0303 	and.w	r3, r3, #3
 8009858:	2b03      	cmp	r3, #3
 800985a:	d101      	bne.n	8009860 <create_name+0x150>
 800985c:	f048 0802 	orr.w	r8, r8, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009860:	f018 0f02 	tst.w	r8, #2
 8009864:	d106      	bne.n	8009874 <create_name+0x164>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009866:	9b01      	ldr	r3, [sp, #4]
 8009868:	f003 0303 	and.w	r3, r3, #3
 800986c:	2b01      	cmp	r3, #1
 800986e:	d054      	beq.n	800991a <create_name+0x20a>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009870:	2a04      	cmp	r2, #4
 8009872:	d055      	beq.n	8009920 <create_name+0x210>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009874:	f889 804b 	strb.w	r8, [r9, #75]	; 0x4b
	return FR_OK;
 8009878:	2000      	movs	r0, #0
}
 800987a:	b003      	add	sp, #12
 800987c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN; break;
 8009880:	f048 0803 	orr.w	r8, r8, #3
 8009884:	e7da      	b.n	800983c <create_name+0x12c>
			b <<= 2; continue;
 8009886:	9b01      	ldr	r3, [sp, #4]
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	b2db      	uxtb	r3, r3
 800988c:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800988e:	4623      	mov	r3, r4
 8009890:	f04f 0b0b 	mov.w	fp, #11
 8009894:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 8009898:	e7b4      	b.n	8009804 <create_name+0xf4>
		if (w >= 0x80) {				/* Non ASCII character */
 800989a:	2e7f      	cmp	r6, #127	; 0x7f
 800989c:	d80b      	bhi.n	80098b6 <create_name+0x1a6>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800989e:	b9be      	cbnz	r6, 80098d0 <create_name+0x1c0>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80098a0:	f048 0803 	orr.w	r8, r8, #3
 80098a4:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 80098a6:	eb09 030a 	add.w	r3, r9, sl
 80098aa:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 80098ae:	463b      	mov	r3, r7
		dp->fn[i++] = (BYTE)w;
 80098b0:	f10a 0a01 	add.w	sl, sl, #1
 80098b4:	e7a6      	b.n	8009804 <create_name+0xf4>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80098b6:	2100      	movs	r1, #0
 80098b8:	4630      	mov	r0, r6
 80098ba:	f001 f8f7 	bl	800aaac <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80098be:	4606      	mov	r6, r0
 80098c0:	b118      	cbz	r0, 80098ca <create_name+0x1ba>
 80098c2:	f1a0 0680 	sub.w	r6, r0, #128	; 0x80
 80098c6:	4b1c      	ldr	r3, [pc, #112]	; (8009938 <create_name+0x228>)
 80098c8:	5d9e      	ldrb	r6, [r3, r6]
			cf |= NS_LFN;				/* Force create LFN entry */
 80098ca:	f048 0802 	orr.w	r8, r8, #2
 80098ce:	e7e6      	b.n	800989e <create_name+0x18e>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80098d0:	4631      	mov	r1, r6
 80098d2:	481a      	ldr	r0, [pc, #104]	; (800993c <create_name+0x22c>)
 80098d4:	f7fe fbfa 	bl	80080cc <chk_chr>
 80098d8:	2800      	cmp	r0, #0
 80098da:	d1e1      	bne.n	80098a0 <create_name+0x190>
				if (IsUpper(w)) {		/* ASCII large capital */
 80098dc:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	2b19      	cmp	r3, #25
 80098e4:	d804      	bhi.n	80098f0 <create_name+0x1e0>
					b |= 2;
 80098e6:	9b01      	ldr	r3, [sp, #4]
 80098e8:	f043 0302 	orr.w	r3, r3, #2
 80098ec:	9301      	str	r3, [sp, #4]
 80098ee:	e7da      	b.n	80098a6 <create_name+0x196>
					if (IsLower(w)) {	/* ASCII small capital */
 80098f0:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	2b19      	cmp	r3, #25
 80098f8:	d8d5      	bhi.n	80098a6 <create_name+0x196>
						b |= 1; w -= 0x20;
 80098fa:	9b01      	ldr	r3, [sp, #4]
 80098fc:	f043 0301 	orr.w	r3, r3, #1
 8009900:	9301      	str	r3, [sp, #4]
 8009902:	3e20      	subs	r6, #32
 8009904:	b2b6      	uxth	r6, r6
 8009906:	e7ce      	b.n	80098a6 <create_name+0x196>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009908:	2305      	movs	r3, #5
 800990a:	f889 3040 	strb.w	r3, [r9, #64]	; 0x40
 800990e:	e799      	b.n	8009844 <create_name+0x134>
	if (ni == 8) b <<= 2;
 8009910:	9b01      	ldr	r3, [sp, #4]
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	b2db      	uxtb	r3, r3
 8009916:	9301      	str	r3, [sp, #4]
 8009918:	e797      	b.n	800984a <create_name+0x13a>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800991a:	f048 0810 	orr.w	r8, r8, #16
 800991e:	e7a7      	b.n	8009870 <create_name+0x160>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009920:	f048 0808 	orr.w	r8, r8, #8
 8009924:	e7a6      	b.n	8009874 <create_name+0x164>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009926:	2006      	movs	r0, #6
 8009928:	e7a7      	b.n	800987a <create_name+0x16a>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800992a:	2006      	movs	r0, #6
 800992c:	e7a5      	b.n	800987a <create_name+0x16a>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800992e:	2006      	movs	r0, #6
 8009930:	e7a3      	b.n	800987a <create_name+0x16a>
 8009932:	bf00      	nop
 8009934:	0800f8c0 	.word	0x0800f8c0
 8009938:	0800f824 	.word	0x0800f824
 800993c:	0800f8cc 	.word	0x0800f8cc

08009940 <get_xdir_info>:
{
 8009940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009942:	4606      	mov	r6, r0
 8009944:	460f      	mov	r7, r1
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 8009946:	2540      	movs	r5, #64	; 0x40
	di = 0;
 8009948:	2400      	movs	r4, #0
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800994a:	e013      	b.n	8009974 <get_xdir_info+0x34>
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800994c:	1970      	adds	r0, r6, r5
 800994e:	f7fe fb1b 	bl	8007f88 <ld_word>
 8009952:	2100      	movs	r1, #0
 8009954:	f001 f8aa 	bl	800aaac <ff_convert>
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 8009958:	4602      	mov	r2, r0
 800995a:	2cfe      	cmp	r4, #254	; 0xfe
 800995c:	bf94      	ite	ls
 800995e:	2300      	movls	r3, #0
 8009960:	2301      	movhi	r3, #1
 8009962:	2800      	cmp	r0, #0
 8009964:	bf14      	ite	ne
 8009966:	4618      	movne	r0, r3
 8009968:	2001      	moveq	r0, #1
 800996a:	b960      	cbnz	r0, 8009986 <get_xdir_info+0x46>
		fno->fname[di++] = (char)w;
 800996c:	193b      	adds	r3, r7, r4
 800996e:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 8009970:	3502      	adds	r5, #2
		fno->fname[di++] = (char)w;
 8009972:	3401      	adds	r4, #1
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 8009974:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 8009978:	429c      	cmp	r4, r3
 800997a:	d205      	bcs.n	8009988 <get_xdir_info+0x48>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800997c:	f015 0f1f 	tst.w	r5, #31
 8009980:	d1e4      	bne.n	800994c <get_xdir_info+0xc>
 8009982:	3502      	adds	r5, #2
 8009984:	e7e2      	b.n	800994c <get_xdir_info+0xc>
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 8009986:	2400      	movs	r4, #0
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 8009988:	b91c      	cbnz	r4, 8009992 <get_xdir_info+0x52>
 800998a:	193b      	adds	r3, r7, r4
 800998c:	223f      	movs	r2, #63	; 0x3f
 800998e:	769a      	strb	r2, [r3, #26]
 8009990:	3401      	adds	r4, #1
	fno->fname[di] = 0;						/* Terminate file name */
 8009992:	443c      	add	r4, r7
 8009994:	2300      	movs	r3, #0
 8009996:	76a3      	strb	r3, [r4, #26]
	fno->altname[0] = 0;							/* No SFN */
 8009998:	737b      	strb	r3, [r7, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800999a:	7933      	ldrb	r3, [r6, #4]
 800999c:	733b      	strb	r3, [r7, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800999e:	f013 0f10 	tst.w	r3, #16
 80099a2:	d110      	bne.n	80099c6 <get_xdir_info+0x86>
 80099a4:	f106 0038 	add.w	r0, r6, #56	; 0x38
 80099a8:	f7fe fafe 	bl	8007fa8 <ld_qword>
 80099ac:	e9c7 0100 	strd	r0, r1, [r7]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 80099b0:	f106 000c 	add.w	r0, r6, #12
 80099b4:	f7fe fae8 	bl	8007f88 <ld_word>
 80099b8:	8178      	strh	r0, [r7, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 80099ba:	f106 000e 	add.w	r0, r6, #14
 80099be:	f7fe fae3 	bl	8007f88 <ld_word>
 80099c2:	8138      	strh	r0, [r7, #8]
}
 80099c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 80099c6:	2000      	movs	r0, #0
 80099c8:	2100      	movs	r1, #0
 80099ca:	e7ef      	b.n	80099ac <get_xdir_info+0x6c>

080099cc <get_fileinfo>:
{
 80099cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 80099d0:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 80099d4:	2300      	movs	r3, #0
 80099d6:	768b      	strb	r3, [r1, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80099d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d073      	beq.n	8009ac6 <get_fileinfo+0xfa>
 80099de:	460d      	mov	r5, r1
 80099e0:	4606      	mov	r6, r0
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80099e2:	f898 3000 	ldrb.w	r3, [r8]
 80099e6:	2b04      	cmp	r3, #4
 80099e8:	d014      	beq.n	8009a14 <get_fileinfo+0x48>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80099ea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80099ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099f0:	d019      	beq.n	8009a26 <get_fileinfo+0x5a>
			i = j = 0;
 80099f2:	2400      	movs	r4, #0
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80099f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80099f8:	1c67      	adds	r7, r4, #1
 80099fa:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80099fe:	b178      	cbz	r0, 8009a20 <get_fileinfo+0x54>
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8009a00:	2100      	movs	r1, #0
 8009a02:	f001 f853 	bl	800aaac <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8009a06:	b150      	cbz	r0, 8009a1e <get_fileinfo+0x52>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8009a08:	2cfe      	cmp	r4, #254	; 0xfe
 8009a0a:	d810      	bhi.n	8009a2e <get_fileinfo+0x62>
				fno->fname[i++] = (TCHAR)w;
 8009a0c:	442c      	add	r4, r5
 8009a0e:	76a0      	strb	r0, [r4, #26]
 8009a10:	463c      	mov	r4, r7
 8009a12:	e7ef      	b.n	80099f4 <get_fileinfo+0x28>
		get_xdir_info(fs->dirbuf, fno);
 8009a14:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8009a18:	f7ff ff92 	bl	8009940 <get_xdir_info>
		return;
 8009a1c:	e053      	b.n	8009ac6 <get_fileinfo+0xfa>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8009a1e:	2400      	movs	r4, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 8009a20:	442c      	add	r4, r5
 8009a22:	2300      	movs	r3, #0
 8009a24:	76a3      	strb	r3, [r4, #26]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8009a26:	7eac      	ldrb	r4, [r5, #26]
	i = j = 0;
 8009a28:	2200      	movs	r2, #0
 8009a2a:	4613      	mov	r3, r2
	while (i < 11) {		/* Copy name body and extension */
 8009a2c:	e012      	b.n	8009a54 <get_fileinfo+0x88>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8009a2e:	2400      	movs	r4, #0
 8009a30:	e7f6      	b.n	8009a20 <get_fileinfo+0x54>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009a32:	23e5      	movs	r3, #229	; 0xe5
 8009a34:	e017      	b.n	8009a66 <get_fileinfo+0x9a>
			if (!lfv) fno->fname[j] = '.';
 8009a36:	b914      	cbnz	r4, 8009a3e <get_fileinfo+0x72>
 8009a38:	18a8      	adds	r0, r5, r2
 8009a3a:	272e      	movs	r7, #46	; 0x2e
 8009a3c:	7687      	strb	r7, [r0, #26]
			fno->altname[j++] = '.';
 8009a3e:	18a8      	adds	r0, r5, r2
 8009a40:	272e      	movs	r7, #46	; 0x2e
 8009a42:	7347      	strb	r7, [r0, #13]
 8009a44:	3201      	adds	r2, #1
 8009a46:	e010      	b.n	8009a6a <get_fileinfo+0x9e>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8009a48:	2010      	movs	r0, #16
 8009a4a:	e01c      	b.n	8009a86 <get_fileinfo+0xba>
			fno->fname[j] = c;
 8009a4c:	18a8      	adds	r0, r5, r2
 8009a4e:	7683      	strb	r3, [r0, #26]
		j++;
 8009a50:	3201      	adds	r2, #1
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8009a52:	460b      	mov	r3, r1
	while (i < 11) {		/* Copy name body and extension */
 8009a54:	2b0a      	cmp	r3, #10
 8009a56:	d81b      	bhi.n	8009a90 <get_fileinfo+0xc4>
		c = (TCHAR)dp->dir[i++];
 8009a58:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8009a5a:	1c59      	adds	r1, r3, #1
 8009a5c:	5cc3      	ldrb	r3, [r0, r3]
		if (c == ' ') continue;				/* Skip padding spaces */
 8009a5e:	2b20      	cmp	r3, #32
 8009a60:	d0f7      	beq.n	8009a52 <get_fileinfo+0x86>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009a62:	2b05      	cmp	r3, #5
 8009a64:	d0e5      	beq.n	8009a32 <get_fileinfo+0x66>
		if (i == 9) {						/* Insert a . if extension is exist */
 8009a66:	2909      	cmp	r1, #9
 8009a68:	d0e5      	beq.n	8009a36 <get_fileinfo+0x6a>
		fno->altname[j] = c;
 8009a6a:	18a8      	adds	r0, r5, r2
 8009a6c:	7343      	strb	r3, [r0, #13]
		if (!lfv) {
 8009a6e:	2c00      	cmp	r4, #0
 8009a70:	d1ee      	bne.n	8009a50 <get_fileinfo+0x84>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8009a72:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 8009a76:	b2c0      	uxtb	r0, r0
 8009a78:	2819      	cmp	r0, #25
 8009a7a:	d8e7      	bhi.n	8009a4c <get_fileinfo+0x80>
 8009a7c:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8009a7e:	7b07      	ldrb	r7, [r0, #12]
 8009a80:	2908      	cmp	r1, #8
 8009a82:	d8e1      	bhi.n	8009a48 <get_fileinfo+0x7c>
 8009a84:	2008      	movs	r0, #8
 8009a86:	4207      	tst	r7, r0
 8009a88:	d0e0      	beq.n	8009a4c <get_fileinfo+0x80>
				c += 0x20;			/* To lower */
 8009a8a:	3320      	adds	r3, #32
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	e7dd      	b.n	8009a4c <get_fileinfo+0x80>
	if (!lfv) {
 8009a90:	b934      	cbnz	r4, 8009aa0 <get_fileinfo+0xd4>
		fno->fname[j] = 0;
 8009a92:	18ab      	adds	r3, r5, r2
 8009a94:	2100      	movs	r1, #0
 8009a96:	7699      	strb	r1, [r3, #26]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8009a98:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8009a9a:	7b1b      	ldrb	r3, [r3, #12]
 8009a9c:	b903      	cbnz	r3, 8009aa0 <get_fileinfo+0xd4>
 8009a9e:	460a      	mov	r2, r1
	fno->altname[j] = 0;	/* Terminate the SFN */
 8009aa0:	442a      	add	r2, r5
 8009aa2:	2400      	movs	r4, #0
 8009aa4:	7354      	strb	r4, [r2, #13]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009aa6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8009aa8:	7adb      	ldrb	r3, [r3, #11]
 8009aaa:	732b      	strb	r3, [r5, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009aac:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8009aae:	301c      	adds	r0, #28
 8009ab0:	f7fe fa6f 	bl	8007f92 <ld_dword>
 8009ab4:	6028      	str	r0, [r5, #0]
 8009ab6:	606c      	str	r4, [r5, #4]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009ab8:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8009aba:	3016      	adds	r0, #22
 8009abc:	f7fe fa69 	bl	8007f92 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009ac0:	8168      	strh	r0, [r5, #10]
 8009ac2:	0c00      	lsrs	r0, r0, #16
 8009ac4:	8128      	strh	r0, [r5, #8]
}
 8009ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009aca <xname_sum>:
{
 8009aca:	b538      	push	{r3, r4, r5, lr}
	WORD sum = 0;
 8009acc:	2400      	movs	r4, #0
	while ((chr = *name++) != 0) {
 8009ace:	e011      	b.n	8009af4 <xname_sum+0x2a>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8009ad0:	f001 f808 	bl	800aae4 <ff_wtoupper>
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8009ad4:	0863      	lsrs	r3, r4, #1
 8009ad6:	eb03 34c4 	add.w	r4, r3, r4, lsl #15
 8009ada:	b2c3      	uxtb	r3, r0
 8009adc:	fa13 f484 	uxtah	r4, r3, r4
 8009ae0:	b2a3      	uxth	r3, r4
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8009ae2:	085c      	lsrs	r4, r3, #1
 8009ae4:	eb04 34c3 	add.w	r4, r4, r3, lsl #15
 8009ae8:	f3c0 200f 	ubfx	r0, r0, #8, #16
 8009aec:	fa10 f484 	uxtah	r4, r0, r4
 8009af0:	b2a4      	uxth	r4, r4
	while ((chr = *name++) != 0) {
 8009af2:	4628      	mov	r0, r5
 8009af4:	1c85      	adds	r5, r0, #2
 8009af6:	8800      	ldrh	r0, [r0, #0]
 8009af8:	2800      	cmp	r0, #0
 8009afa:	d1e9      	bne.n	8009ad0 <xname_sum+0x6>
}
 8009afc:	4620      	mov	r0, r4
 8009afe:	bd38      	pop	{r3, r4, r5, pc}

08009b00 <create_xdir>:
{
 8009b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b04:	4607      	mov	r7, r0
 8009b06:	4688      	mov	r8, r1
	mem_set(dirb, 0, 2 * SZDIRE);
 8009b08:	2240      	movs	r2, #64	; 0x40
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	f7fe faca 	bl	80080a4 <mem_set>
	dirb[XDIR_Type] = 0x85;
 8009b10:	2385      	movs	r3, #133	; 0x85
 8009b12:	703b      	strb	r3, [r7, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8009b14:	23c0      	movs	r3, #192	; 0xc0
 8009b16:	f887 3020 	strb.w	r3, [r7, #32]
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8009b1a:	2501      	movs	r5, #1
 8009b1c:	2600      	movs	r6, #0
 8009b1e:	46a9      	mov	r9, r5
 8009b20:	2440      	movs	r4, #64	; 0x40
 8009b22:	e017      	b.n	8009b54 <create_xdir+0x54>
			st_word(dirb + i, chr); 		/* Store it */
 8009b24:	4629      	mov	r1, r5
 8009b26:	1938      	adds	r0, r7, r4
 8009b28:	f7fe fa92 	bl	8008050 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8009b2c:	3402      	adds	r4, #2
 8009b2e:	f014 0f1f 	tst.w	r4, #31
 8009b32:	d008      	beq.n	8009b46 <create_xdir+0x46>
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8009b34:	2d00      	cmp	r5, #0
 8009b36:	d0f5      	beq.n	8009b24 <create_xdir+0x24>
 8009b38:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 8009b3c:	2d00      	cmp	r5, #0
 8009b3e:	d0f1      	beq.n	8009b24 <create_xdir+0x24>
 8009b40:	3601      	adds	r6, #1
 8009b42:	b2f6      	uxtb	r6, r6
 8009b44:	e7ee      	b.n	8009b24 <create_xdir+0x24>
		nb++;
 8009b46:	f109 0901 	add.w	r9, r9, #1
 8009b4a:	fa5f f989 	uxtb.w	r9, r9
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8009b4e:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 8009b52:	b133      	cbz	r3, 8009b62 <create_xdir+0x62>
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8009b54:	1c63      	adds	r3, r4, #1
 8009b56:	22c1      	movs	r2, #193	; 0xc1
 8009b58:	553a      	strb	r2, [r7, r4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	54fa      	strb	r2, [r7, r3]
 8009b5e:	3402      	adds	r4, #2
 8009b60:	e7e8      	b.n	8009b34 <create_xdir+0x34>
	dirb[XDIR_NumName] = nc;	/* Set name length */
 8009b62:	f887 6023 	strb.w	r6, [r7, #35]	; 0x23
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8009b66:	f887 9001 	strb.w	r9, [r7, #1]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8009b6a:	4640      	mov	r0, r8
 8009b6c:	f7ff ffad 	bl	8009aca <xname_sum>
 8009b70:	4601      	mov	r1, r0
 8009b72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009b76:	f7fe fa6b 	bl	8008050 <st_word>
}
 8009b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08009b80 <cmp_lfn>:
{
 8009b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b84:	4681      	mov	r9, r0
 8009b86:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009b88:	f101 001a 	add.w	r0, r1, #26
 8009b8c:	f7fe f9fc 	bl	8007f88 <ld_word>
 8009b90:	bbb8      	cbnz	r0, 8009c02 <cmp_lfn+0x82>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8009b92:	783d      	ldrb	r5, [r7, #0]
 8009b94:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8009b98:	3d01      	subs	r5, #1
 8009b9a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8009b9e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009ba2:	f04f 0801 	mov.w	r8, #1
 8009ba6:	2400      	movs	r4, #0
 8009ba8:	e004      	b.n	8009bb4 <cmp_lfn+0x34>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009baa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009bae:	4298      	cmp	r0, r3
 8009bb0:	d12e      	bne.n	8009c10 <cmp_lfn+0x90>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009bb2:	3401      	adds	r4, #1
 8009bb4:	2c0c      	cmp	r4, #12
 8009bb6:	d818      	bhi.n	8009bea <cmp_lfn+0x6a>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009bb8:	4b19      	ldr	r3, [pc, #100]	; (8009c20 <cmp_lfn+0xa0>)
 8009bba:	5d18      	ldrb	r0, [r3, r4]
 8009bbc:	4438      	add	r0, r7
 8009bbe:	f7fe f9e3 	bl	8007f88 <ld_word>
 8009bc2:	4606      	mov	r6, r0
		if (wc) {
 8009bc4:	f1b8 0f00 	cmp.w	r8, #0
 8009bc8:	d0ef      	beq.n	8009baa <cmp_lfn+0x2a>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009bca:	2dfe      	cmp	r5, #254	; 0xfe
 8009bcc:	d81c      	bhi.n	8009c08 <cmp_lfn+0x88>
 8009bce:	f000 ff89 	bl	800aae4 <ff_wtoupper>
 8009bd2:	4680      	mov	r8, r0
 8009bd4:	f105 0a01 	add.w	sl, r5, #1
 8009bd8:	f839 0015 	ldrh.w	r0, [r9, r5, lsl #1]
 8009bdc:	f000 ff82 	bl	800aae4 <ff_wtoupper>
 8009be0:	4580      	cmp	r8, r0
 8009be2:	d113      	bne.n	8009c0c <cmp_lfn+0x8c>
			wc = uc;
 8009be4:	46b0      	mov	r8, r6
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009be6:	4655      	mov	r5, sl
 8009be8:	e7e3      	b.n	8009bb2 <cmp_lfn+0x32>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009bea:	783b      	ldrb	r3, [r7, #0]
 8009bec:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009bf0:	d010      	beq.n	8009c14 <cmp_lfn+0x94>
 8009bf2:	f1b8 0f00 	cmp.w	r8, #0
 8009bf6:	d00f      	beq.n	8009c18 <cmp_lfn+0x98>
 8009bf8:	f839 3015 	ldrh.w	r3, [r9, r5, lsl #1]
 8009bfc:	b973      	cbnz	r3, 8009c1c <cmp_lfn+0x9c>
	return 1;		/* The part of LFN matched */
 8009bfe:	2001      	movs	r0, #1
 8009c00:	e000      	b.n	8009c04 <cmp_lfn+0x84>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009c02:	2000      	movs	r0, #0
}
 8009c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return 0;					/* Not matched */
 8009c08:	2000      	movs	r0, #0
 8009c0a:	e7fb      	b.n	8009c04 <cmp_lfn+0x84>
 8009c0c:	2000      	movs	r0, #0
 8009c0e:	e7f9      	b.n	8009c04 <cmp_lfn+0x84>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009c10:	2000      	movs	r0, #0
 8009c12:	e7f7      	b.n	8009c04 <cmp_lfn+0x84>
	return 1;		/* The part of LFN matched */
 8009c14:	2001      	movs	r0, #1
 8009c16:	e7f5      	b.n	8009c04 <cmp_lfn+0x84>
 8009c18:	2001      	movs	r0, #1
 8009c1a:	e7f3      	b.n	8009c04 <cmp_lfn+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	e7f1      	b.n	8009c04 <cmp_lfn+0x84>
 8009c20:	0800f8a4 	.word	0x0800f8a4

08009c24 <dir_find>:
{
 8009c24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c28:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8009c2a:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009c2c:	2100      	movs	r1, #0
 8009c2e:	f7ff f9d0 	bl	8008fd2 <dir_sdi>
	if (res != FR_OK) return res;
 8009c32:	4680      	mov	r8, r0
 8009c34:	2800      	cmp	r0, #0
 8009c36:	f040 80a0 	bne.w	8009d7a <dir_find+0x156>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009c3a:	783b      	ldrb	r3, [r7, #0]
 8009c3c:	2b04      	cmp	r3, #4
 8009c3e:	d006      	beq.n	8009c4e <dir_find+0x2a>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c44:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009c46:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8009c4a:	464e      	mov	r6, r9
 8009c4c:	e042      	b.n	8009cd4 <dir_find+0xb0>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f7ff ff3b 	bl	8009aca <xname_sum>
 8009c54:	4683      	mov	fp, r0
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8009c56:	e01e      	b.n	8009c96 <dir_find+0x72>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8009c58:	6938      	ldr	r0, [r7, #16]
 8009c5a:	4430      	add	r0, r6
 8009c5c:	f7fe f994 	bl	8007f88 <ld_word>
 8009c60:	f000 ff40 	bl	800aae4 <ff_wtoupper>
 8009c64:	4682      	mov	sl, r0
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f833 0019 	ldrh.w	r0, [r3, r9, lsl #1]
 8009c6c:	f000 ff3a 	bl	800aae4 <ff_wtoupper>
 8009c70:	4582      	cmp	sl, r0
 8009c72:	d10a      	bne.n	8009c8a <dir_find+0x66>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8009c74:	3d01      	subs	r5, #1
 8009c76:	b2ed      	uxtb	r5, r5
 8009c78:	3602      	adds	r6, #2
 8009c7a:	f109 0901 	add.w	r9, r9, #1
 8009c7e:	b125      	cbz	r5, 8009c8a <dir_find+0x66>
				if ((di % SZDIRE) == 0) di += 2;
 8009c80:	f016 0f1f 	tst.w	r6, #31
 8009c84:	d1e8      	bne.n	8009c58 <dir_find+0x34>
 8009c86:	3602      	adds	r6, #2
 8009c88:	e7e6      	b.n	8009c58 <dir_find+0x34>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8009c8a:	b925      	cbnz	r5, 8009c96 <dir_find+0x72>
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d071      	beq.n	8009d7a <dir_find+0x156>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8009c96:	2100      	movs	r1, #0
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f7ff fc61 	bl	8009560 <dir_read>
 8009c9e:	4680      	mov	r8, r0
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d16a      	bne.n	8009d7a <dir_find+0x156>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8009ca4:	693d      	ldr	r5, [r7, #16]
 8009ca6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009caa:	f7fe f96d 	bl	8007f88 <ld_word>
 8009cae:	4558      	cmp	r0, fp
 8009cb0:	d1f1      	bne.n	8009c96 <dir_find+0x72>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8009cb2:	f895 5023 	ldrb.w	r5, [r5, #35]	; 0x23
 8009cb6:	f04f 0900 	mov.w	r9, #0
 8009cba:	2640      	movs	r6, #64	; 0x40
 8009cbc:	e7df      	b.n	8009c7e <dir_find+0x5a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cc2:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009cc4:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 8009cc6:	2100      	movs	r1, #0
 8009cc8:	4620      	mov	r0, r4
 8009cca:	f7ff fb24 	bl	8009316 <dir_next>
	} while (res == FR_OK);
 8009cce:	4680      	mov	r8, r0
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	d152      	bne.n	8009d7a <dir_find+0x156>
		res = move_window(fs, dp->sect);
 8009cd4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009cd6:	4638      	mov	r0, r7
 8009cd8:	f7fe fcf6 	bl	80086c8 <move_window>
		if (res != FR_OK) break;
 8009cdc:	4680      	mov	r8, r0
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d14b      	bne.n	8009d7a <dir_find+0x156>
		c = dp->dir[DIR_Name];
 8009ce2:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8009ce4:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d045      	beq.n	8009d76 <dir_find+0x152>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009cea:	7ae9      	ldrb	r1, [r5, #11]
 8009cec:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 8009cf0:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009cf2:	2be5      	cmp	r3, #229	; 0xe5
 8009cf4:	d0e3      	beq.n	8009cbe <dir_find+0x9a>
 8009cf6:	f011 0f08 	tst.w	r1, #8
 8009cfa:	d001      	beq.n	8009d00 <dir_find+0xdc>
 8009cfc:	2a0f      	cmp	r2, #15
 8009cfe:	d1de      	bne.n	8009cbe <dir_find+0x9a>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009d00:	2a0f      	cmp	r2, #15
 8009d02:	d016      	beq.n	8009d32 <dir_find+0x10e>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009d04:	b926      	cbnz	r6, 8009d10 <dir_find+0xec>
 8009d06:	4628      	mov	r0, r5
 8009d08:	f7fe fbd8 	bl	80084bc <sum_sfn>
 8009d0c:	4548      	cmp	r0, r9
 8009d0e:	d034      	beq.n	8009d7a <dir_find+0x156>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009d10:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8009d14:	f013 0f01 	tst.w	r3, #1
 8009d18:	d106      	bne.n	8009d28 <dir_find+0x104>
 8009d1a:	220b      	movs	r2, #11
 8009d1c:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8009d20:	4628      	mov	r0, r5
 8009d22:	f7fe f9c4 	bl	80080ae <mem_cmp>
 8009d26:	b340      	cbz	r0, 8009d7a <dir_find+0x156>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d2c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009d2e:	26ff      	movs	r6, #255	; 0xff
 8009d30:	e7c9      	b.n	8009cc6 <dir_find+0xa2>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009d32:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
 8009d36:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009d3a:	d1c4      	bne.n	8009cc6 <dir_find+0xa2>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009d3c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009d40:	d006      	beq.n	8009d50 <dir_find+0x12c>
						sum = dp->dir[LDIR_Chksum];
 8009d42:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009d46:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009d4a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009d4c:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009d4e:	461e      	mov	r6, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009d50:	42b3      	cmp	r3, r6
 8009d52:	d001      	beq.n	8009d58 <dir_find+0x134>
 8009d54:	26ff      	movs	r6, #255	; 0xff
 8009d56:	e7b6      	b.n	8009cc6 <dir_find+0xa2>
 8009d58:	7b6b      	ldrb	r3, [r5, #13]
 8009d5a:	454b      	cmp	r3, r9
 8009d5c:	d001      	beq.n	8009d62 <dir_find+0x13e>
 8009d5e:	26ff      	movs	r6, #255	; 0xff
 8009d60:	e7b1      	b.n	8009cc6 <dir_find+0xa2>
 8009d62:	4629      	mov	r1, r5
 8009d64:	68f8      	ldr	r0, [r7, #12]
 8009d66:	f7ff ff0b 	bl	8009b80 <cmp_lfn>
 8009d6a:	b110      	cbz	r0, 8009d72 <dir_find+0x14e>
 8009d6c:	3e01      	subs	r6, #1
 8009d6e:	b2f6      	uxtb	r6, r6
 8009d70:	e7a9      	b.n	8009cc6 <dir_find+0xa2>
 8009d72:	26ff      	movs	r6, #255	; 0xff
 8009d74:	e7a7      	b.n	8009cc6 <dir_find+0xa2>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009d76:	f04f 0804 	mov.w	r8, #4
}
 8009d7a:	4640      	mov	r0, r8
 8009d7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d80 <follow_path>:
{
 8009d80:	b530      	push	{r4, r5, lr}
 8009d82:	b083      	sub	sp, #12
 8009d84:	4604      	mov	r4, r0
 8009d86:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 8009d88:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009d8a:	e001      	b.n	8009d90 <follow_path+0x10>
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	9301      	str	r3, [sp, #4]
 8009d90:	9b01      	ldr	r3, [sp, #4]
 8009d92:	781a      	ldrb	r2, [r3, #0]
 8009d94:	2a5c      	cmp	r2, #92	; 0x5c
 8009d96:	bf18      	it	ne
 8009d98:	2a2f      	cmpne	r2, #47	; 0x2f
 8009d9a:	d0f7      	beq.n	8009d8c <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	60a2      	str	r2, [r4, #8]
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 8009da0:	61e2      	str	r2, [r4, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	2b1f      	cmp	r3, #31
 8009da6:	d81b      	bhi.n	8009de0 <follow_path+0x60>
		dp->fn[NSFLAG] = NS_NONAME;
 8009da8:	2380      	movs	r3, #128	; 0x80
 8009daa:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 8009dae:	4611      	mov	r1, r2
 8009db0:	4620      	mov	r0, r4
 8009db2:	f7ff f90e 	bl	8008fd2 <dir_sdi>
 8009db6:	4603      	mov	r3, r0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	b003      	add	sp, #12
 8009dbc:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009dbe:	2804      	cmp	r0, #4
 8009dc0:	d1fa      	bne.n	8009db8 <follow_path+0x38>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009dc2:	f012 0f04 	tst.w	r2, #4
 8009dc6:	d1f7      	bne.n	8009db8 <follow_path+0x38>
 8009dc8:	2305      	movs	r3, #5
 8009dca:	e7f5      	b.n	8009db8 <follow_path+0x38>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009dcc:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8009dd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dd6:	4419      	add	r1, r3
 8009dd8:	4628      	mov	r0, r5
 8009dda:	f7fe fa79 	bl	80082d0 <ld_clust>
 8009dde:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009de0:	a901      	add	r1, sp, #4
 8009de2:	4620      	mov	r0, r4
 8009de4:	f7ff fc94 	bl	8009710 <create_name>
			if (res != FR_OK) break;
 8009de8:	4603      	mov	r3, r0
 8009dea:	2800      	cmp	r0, #0
 8009dec:	d1e4      	bne.n	8009db8 <follow_path+0x38>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009dee:	4620      	mov	r0, r4
 8009df0:	f7ff ff18 	bl	8009c24 <dir_find>
			ns = dp->fn[NSFLAG];
 8009df4:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	d1df      	bne.n	8009dbe <follow_path+0x3e>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009dfe:	f012 0f04 	tst.w	r2, #4
 8009e02:	d1d9      	bne.n	8009db8 <follow_path+0x38>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009e04:	79a3      	ldrb	r3, [r4, #6]
 8009e06:	f013 0f10 	tst.w	r3, #16
 8009e0a:	d01e      	beq.n	8009e4a <follow_path+0xca>
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8009e0c:	782b      	ldrb	r3, [r5, #0]
 8009e0e:	2b04      	cmp	r3, #4
 8009e10:	d1dc      	bne.n	8009dcc <follow_path+0x4c>
				obj->c_scl = obj->sclust;
 8009e12:	68a3      	ldr	r3, [r4, #8]
 8009e14:	6223      	str	r3, [r4, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8009e16:	6923      	ldr	r3, [r4, #16]
 8009e18:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009e1c:	79e2      	ldrb	r2, [r4, #7]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	6263      	str	r3, [r4, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 8009e22:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009e24:	62a3      	str	r3, [r4, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8009e26:	6928      	ldr	r0, [r5, #16]
 8009e28:	3034      	adds	r0, #52	; 0x34
 8009e2a:	f7fe f8b2 	bl	8007f92 <ld_dword>
 8009e2e:	60a0      	str	r0, [r4, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8009e30:	692b      	ldr	r3, [r5, #16]
 8009e32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009e36:	f003 0302 	and.w	r3, r3, #2
 8009e3a:	71e3      	strb	r3, [r4, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8009e3c:	6928      	ldr	r0, [r5, #16]
 8009e3e:	3038      	adds	r0, #56	; 0x38
 8009e40:	f7fe f8b2 	bl	8007fa8 <ld_qword>
 8009e44:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8009e48:	e7ca      	b.n	8009de0 <follow_path+0x60>
				res = FR_NO_PATH; break;
 8009e4a:	2305      	movs	r3, #5
 8009e4c:	e7b4      	b.n	8009db8 <follow_path+0x38>
	...

08009e50 <dir_register>:
{
 8009e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e54:	b09b      	sub	sp, #108	; 0x6c
	FATFS *fs = dp->obj.fs;
 8009e56:	6805      	ldr	r5, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009e58:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 8009e5c:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8009e60:	f040 80e6 	bne.w	800a030 <dir_register+0x1e0>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009e64:	2400      	movs	r4, #0
 8009e66:	e000      	b.n	8009e6a <dir_register+0x1a>
 8009e68:	3401      	adds	r4, #1
 8009e6a:	68eb      	ldr	r3, [r5, #12]
 8009e6c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d1f9      	bne.n	8009e68 <dir_register+0x18>
 8009e74:	4606      	mov	r6, r0
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009e76:	782b      	ldrb	r3, [r5, #0]
 8009e78:	2b04      	cmp	r3, #4
 8009e7a:	d022      	beq.n	8009ec2 <dir_register+0x72>
	mem_cpy(sn, dp->fn, 12);
 8009e7c:	f100 0740 	add.w	r7, r0, #64	; 0x40
 8009e80:	220c      	movs	r2, #12
 8009e82:	4639      	mov	r1, r7
 8009e84:	a817      	add	r0, sp, #92	; 0x5c
 8009e86:	f7fe f904 	bl	8008092 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009e8a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8009e8e:	f013 0f01 	tst.w	r3, #1
 8009e92:	d075      	beq.n	8009f80 <dir_register+0x130>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009e94:	2340      	movs	r3, #64	; 0x40
 8009e96:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 8009e9a:	f04f 0801 	mov.w	r8, #1
 8009e9e:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 8009ea2:	d863      	bhi.n	8009f6c <dir_register+0x11c>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009ea4:	4643      	mov	r3, r8
 8009ea6:	68ea      	ldr	r2, [r5, #12]
 8009ea8:	a917      	add	r1, sp, #92	; 0x5c
 8009eaa:	4638      	mov	r0, r7
 8009eac:	f7fe fab6 	bl	800841c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009eb0:	4630      	mov	r0, r6
 8009eb2:	f7ff feb7 	bl	8009c24 <dir_find>
			if (res != FR_OK) break;
 8009eb6:	4681      	mov	r9, r0
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	d157      	bne.n	8009f6c <dir_register+0x11c>
		for (n = 1; n < 100; n++) {
 8009ebc:	f108 0801 	add.w	r8, r8, #1
 8009ec0:	e7ed      	b.n	8009e9e <dir_register+0x4e>
		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8009ec2:	340e      	adds	r4, #14
 8009ec4:	4b5f      	ldr	r3, [pc, #380]	; (800a044 <dir_register+0x1f4>)
 8009ec6:	fba3 3404 	umull	r3, r4, r3, r4
 8009eca:	08e4      	lsrs	r4, r4, #3
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8009ecc:	1ca1      	adds	r1, r4, #2
 8009ece:	f7ff fbbc 	bl	800964a <dir_alloc>
		if (res != FR_OK) return res;
 8009ed2:	4681      	mov	r9, r0
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	f040 80ad 	bne.w	800a034 <dir_register+0x1e4>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8009eda:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8009edc:	4a5a      	ldr	r2, [pc, #360]	; (800a048 <dir_register+0x1f8>)
 8009ede:	4422      	add	r2, r4
 8009ee0:	eba3 1342 	sub.w	r3, r3, r2, lsl #5
 8009ee4:	64f3      	str	r3, [r6, #76]	; 0x4c
		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8009ee6:	68b3      	ldr	r3, [r6, #8]
 8009ee8:	b11b      	cbz	r3, 8009ef2 <dir_register+0xa2>
 8009eea:	79f3      	ldrb	r3, [r6, #7]
 8009eec:	f013 0f04 	tst.w	r3, #4
 8009ef0:	d104      	bne.n	8009efc <dir_register+0xac>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8009ef2:	68e9      	ldr	r1, [r5, #12]
 8009ef4:	6928      	ldr	r0, [r5, #16]
 8009ef6:	f7ff fe03 	bl	8009b00 <create_xdir>
		return FR_OK;
 8009efa:	e09b      	b.n	800a034 <dir_register+0x1e4>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8009efc:	8969      	ldrh	r1, [r5, #10]
 8009efe:	0249      	lsls	r1, r1, #9
 8009f00:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8009f04:	1857      	adds	r7, r2, r1
 8009f06:	f143 0800 	adc.w	r8, r3, #0
 8009f0a:	e9c6 7804 	strd	r7, r8, [r6, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 8009f0e:	4630      	mov	r0, r6
 8009f10:	f7fe ff94 	bl	8008e3c <fill_first_frag>
			if (res != FR_OK) return res;
 8009f14:	b108      	cbz	r0, 8009f1a <dir_register+0xca>
 8009f16:	4681      	mov	r9, r0
 8009f18:	e08c      	b.n	800a034 <dir_register+0x1e4>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8009f1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f1e:	6b71      	ldr	r1, [r6, #52]	; 0x34
 8009f20:	4630      	mov	r0, r6
 8009f22:	f7fe ff73 	bl	8008e0c <fill_last_frag>
			if (res != FR_OK) return res;
 8009f26:	b108      	cbz	r0, 8009f2c <dir_register+0xdc>
 8009f28:	4681      	mov	r9, r0
 8009f2a:	e083      	b.n	800a034 <dir_register+0x1e4>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 8009f2c:	4631      	mov	r1, r6
 8009f2e:	4668      	mov	r0, sp
 8009f30:	f7ff fafa 	bl	8009528 <load_obj_dir>
			if (res != FR_OK) return res;
 8009f34:	b108      	cbz	r0, 8009f3a <dir_register+0xea>
 8009f36:	4681      	mov	r9, r0
 8009f38:	e07c      	b.n	800a034 <dir_register+0x1e4>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8009f3a:	6928      	ldr	r0, [r5, #16]
 8009f3c:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8009f40:	3038      	adds	r0, #56	; 0x38
 8009f42:	f7fe f893 	bl	800806c <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8009f46:	6928      	ldr	r0, [r5, #16]
 8009f48:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8009f4c:	3028      	adds	r0, #40	; 0x28
 8009f4e:	f7fe f88d 	bl	800806c <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8009f52:	79f3      	ldrb	r3, [r6, #7]
 8009f54:	692a      	ldr	r2, [r5, #16]
 8009f56:	f043 0301 	orr.w	r3, r3, #1
 8009f5a:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
			res = store_xdir(&dj);							/* Store the object status */
 8009f5e:	4668      	mov	r0, sp
 8009f60:	f7ff fba7 	bl	80096b2 <store_xdir>
			if (res != FR_OK) return res;
 8009f64:	2800      	cmp	r0, #0
 8009f66:	d0c4      	beq.n	8009ef2 <dir_register+0xa2>
 8009f68:	4681      	mov	r9, r0
 8009f6a:	e063      	b.n	800a034 <dir_register+0x1e4>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009f6c:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
 8009f70:	d064      	beq.n	800a03c <dir_register+0x1ec>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009f72:	f1b9 0f04 	cmp.w	r9, #4
 8009f76:	d15d      	bne.n	800a034 <dir_register+0x1e4>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009f78:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8009f7c:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009f80:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8009f84:	f013 0f02 	tst.w	r3, #2
 8009f88:	d02a      	beq.n	8009fe0 <dir_register+0x190>
 8009f8a:	340c      	adds	r4, #12
 8009f8c:	4b2f      	ldr	r3, [pc, #188]	; (800a04c <dir_register+0x1fc>)
 8009f8e:	fba3 3404 	umull	r3, r4, r3, r4
 8009f92:	08a4      	lsrs	r4, r4, #2
 8009f94:	3401      	adds	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009f96:	4621      	mov	r1, r4
 8009f98:	4630      	mov	r0, r6
 8009f9a:	f7ff fb56 	bl	800964a <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009f9e:	4681      	mov	r9, r0
 8009fa0:	b908      	cbnz	r0, 8009fa6 <dir_register+0x156>
 8009fa2:	3c01      	subs	r4, #1
 8009fa4:	d11e      	bne.n	8009fe4 <dir_register+0x194>
	if (res == FR_OK) {
 8009fa6:	f1b9 0f00 	cmp.w	r9, #0
 8009faa:	d143      	bne.n	800a034 <dir_register+0x1e4>
		res = move_window(fs, dp->sect);
 8009fac:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8009fae:	4628      	mov	r0, r5
 8009fb0:	f7fe fb8a 	bl	80086c8 <move_window>
		if (res == FR_OK) {
 8009fb4:	4681      	mov	r9, r0
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d13c      	bne.n	800a034 <dir_register+0x1e4>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009fba:	2220      	movs	r2, #32
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8009fc0:	f7fe f870 	bl	80080a4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009fc4:	220b      	movs	r2, #11
 8009fc6:	4639      	mov	r1, r7
 8009fc8:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8009fca:	f7fe f862 	bl	8008092 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009fce:	f896 304b 	ldrb.w	r3, [r6, #75]	; 0x4b
 8009fd2:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8009fd4:	f003 0318 	and.w	r3, r3, #24
 8009fd8:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	70eb      	strb	r3, [r5, #3]
 8009fde:	e029      	b.n	800a034 <dir_register+0x1e4>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009fe0:	2401      	movs	r4, #1
 8009fe2:	e7d8      	b.n	8009f96 <dir_register+0x146>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009fe4:	6b31      	ldr	r1, [r6, #48]	; 0x30
 8009fe6:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 8009fea:	4630      	mov	r0, r6
 8009fec:	f7fe fff1 	bl	8008fd2 <dir_sdi>
		if (res == FR_OK) {
 8009ff0:	4681      	mov	r9, r0
 8009ff2:	2800      	cmp	r0, #0
 8009ff4:	d1d7      	bne.n	8009fa6 <dir_register+0x156>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009ff6:	4638      	mov	r0, r7
 8009ff8:	f7fe fa60 	bl	80084bc <sum_sfn>
 8009ffc:	4680      	mov	r8, r0
				res = move_window(fs, dp->sect);
 8009ffe:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 800a000:	4628      	mov	r0, r5
 800a002:	f7fe fb61 	bl	80086c8 <move_window>
				if (res != FR_OK) break;
 800a006:	4681      	mov	r9, r0
 800a008:	2800      	cmp	r0, #0
 800a00a:	d1cc      	bne.n	8009fa6 <dir_register+0x156>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800a00c:	4643      	mov	r3, r8
 800a00e:	b2e2      	uxtb	r2, r4
 800a010:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 800a012:	68e8      	ldr	r0, [r5, #12]
 800a014:	f7fe f9c6 	bl	80083a4 <put_lfn>
				fs->wflag = 1;
 800a018:	2301      	movs	r3, #1
 800a01a:	70eb      	strb	r3, [r5, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800a01c:	2100      	movs	r1, #0
 800a01e:	4630      	mov	r0, r6
 800a020:	f7ff f979 	bl	8009316 <dir_next>
			} while (res == FR_OK && --nent);
 800a024:	4681      	mov	r9, r0
 800a026:	2800      	cmp	r0, #0
 800a028:	d1bd      	bne.n	8009fa6 <dir_register+0x156>
 800a02a:	3c01      	subs	r4, #1
 800a02c:	d1e7      	bne.n	8009ffe <dir_register+0x1ae>
 800a02e:	e7ba      	b.n	8009fa6 <dir_register+0x156>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800a030:	f04f 0906 	mov.w	r9, #6
}
 800a034:	4648      	mov	r0, r9
 800a036:	b01b      	add	sp, #108	; 0x6c
 800a038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a03c:	f04f 0907 	mov.w	r9, #7
 800a040:	e7f8      	b.n	800a034 <dir_register+0x1e4>
 800a042:	bf00      	nop
 800a044:	88888889 	.word	0x88888889
 800a048:	08000001 	.word	0x08000001
 800a04c:	4ec4ec4f 	.word	0x4ec4ec4f

0800a050 <sync_fs>:
{
 800a050:	b570      	push	{r4, r5, r6, lr}
 800a052:	4604      	mov	r4, r0
	res = sync_window(fs);
 800a054:	f7fe fb0e 	bl	8008674 <sync_window>
	if (res == FR_OK) {
 800a058:	4605      	mov	r5, r0
 800a05a:	b948      	cbnz	r0, 800a070 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a05c:	7823      	ldrb	r3, [r4, #0]
 800a05e:	2b03      	cmp	r3, #3
 800a060:	d008      	beq.n	800a074 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a062:	2200      	movs	r2, #0
 800a064:	4611      	mov	r1, r2
 800a066:	7860      	ldrb	r0, [r4, #1]
 800a068:	f7fd ff82 	bl	8007f70 <disk_ioctl>
 800a06c:	b100      	cbz	r0, 800a070 <sync_fs+0x20>
 800a06e:	2501      	movs	r5, #1
}
 800a070:	4628      	mov	r0, r5
 800a072:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a074:	7923      	ldrb	r3, [r4, #4]
 800a076:	2b01      	cmp	r3, #1
 800a078:	d1f3      	bne.n	800a062 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 800a07a:	f104 0638 	add.w	r6, r4, #56	; 0x38
 800a07e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a082:	2100      	movs	r1, #0
 800a084:	4630      	mov	r0, r6
 800a086:	f7fe f80d 	bl	80080a4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a08a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a08e:	f204 2036 	addw	r0, r4, #566	; 0x236
 800a092:	f7fd ffdd 	bl	8008050 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a096:	490f      	ldr	r1, [pc, #60]	; (800a0d4 <sync_fs+0x84>)
 800a098:	4630      	mov	r0, r6
 800a09a:	f7fd ffdd 	bl	8008058 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a09e:	490e      	ldr	r1, [pc, #56]	; (800a0d8 <sync_fs+0x88>)
 800a0a0:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800a0a4:	f7fd ffd8 	bl	8008058 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a0a8:	69a1      	ldr	r1, [r4, #24]
 800a0aa:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800a0ae:	f7fd ffd3 	bl	8008058 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a0b2:	6961      	ldr	r1, [r4, #20]
 800a0b4:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800a0b8:	f7fd ffce 	bl	8008058 <st_dword>
			fs->winsect = fs->volbase + 1;
 800a0bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a0be:	3201      	adds	r2, #1
 800a0c0:	6362      	str	r2, [r4, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	4631      	mov	r1, r6
 800a0c6:	7860      	ldrb	r0, [r4, #1]
 800a0c8:	f7fd ff46 	bl	8007f58 <disk_write>
			fs->fsi_flag = 0;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	7123      	strb	r3, [r4, #4]
 800a0d0:	e7c7      	b.n	800a062 <sync_fs+0x12>
 800a0d2:	bf00      	nop
 800a0d4:	41615252 	.word	0x41615252
 800a0d8:	61417272 	.word	0x61417272

0800a0dc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a0dc:	b570      	push	{r4, r5, r6, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	9001      	str	r0, [sp, #4]
 800a0e2:	9100      	str	r1, [sp, #0]
 800a0e4:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a0e6:	a804      	add	r0, sp, #16
 800a0e8:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a0ec:	f7fe fa77 	bl	80085de <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800a0f0:	1e05      	subs	r5, r0, #0
 800a0f2:	db21      	blt.n	800a138 <f_mount+0x5c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a0f4:	4b11      	ldr	r3, [pc, #68]	; (800a13c <f_mount+0x60>)
 800a0f6:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]

	if (cfs) {
 800a0fa:	b126      	cbz	r6, 800a106 <f_mount+0x2a>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	f7fe f8a7 	bl	8008250 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a102:	2300      	movs	r3, #0
 800a104:	7033      	strb	r3, [r6, #0]
	}

	if (fs) {
 800a106:	9b01      	ldr	r3, [sp, #4]
 800a108:	b10b      	cbz	r3, 800a10e <f_mount+0x32>
		fs->fs_type = 0;				/* Clear new fs object */
 800a10a:	2200      	movs	r2, #0
 800a10c:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a10e:	9b01      	ldr	r3, [sp, #4]
 800a110:	4a0a      	ldr	r2, [pc, #40]	; (800a13c <f_mount+0x60>)
 800a112:	f842 3025 	str.w	r3, [r2, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a116:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 800a11a:	bf18      	it	ne
 800a11c:	2401      	movne	r4, #1
 800a11e:	2b00      	cmp	r3, #0
 800a120:	bf08      	it	eq
 800a122:	2401      	moveq	r4, #1
 800a124:	b114      	cbz	r4, 800a12c <f_mount+0x50>
 800a126:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800a128:	b004      	add	sp, #16
 800a12a:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a12c:	2200      	movs	r2, #0
 800a12e:	a901      	add	r1, sp, #4
 800a130:	4668      	mov	r0, sp
 800a132:	f7fe fb2b 	bl	800878c <find_volume>
	LEAVE_FF(fs, res);
 800a136:	e7f7      	b.n	800a128 <f_mount+0x4c>
	if (vol < 0) return FR_INVALID_DRIVE;
 800a138:	200b      	movs	r0, #11
 800a13a:	e7f5      	b.n	800a128 <f_mount+0x4c>
 800a13c:	20000124 	.word	0x20000124

0800a140 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a144:	f2ad 4dcc 	subw	sp, sp, #1228	; 0x4cc
 800a148:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a14a:	2800      	cmp	r0, #0
 800a14c:	f000 81d1 	beq.w	800a4f2 <f_open+0x3b2>
 800a150:	4604      	mov	r4, r0
 800a152:	4616      	mov	r6, r2

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a154:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800a158:	463a      	mov	r2, r7
 800a15a:	f20d 416c 	addw	r1, sp, #1132	; 0x46c
 800a15e:	a801      	add	r0, sp, #4
 800a160:	f7fe fb14 	bl	800878c <find_volume>
	if (res == FR_OK) {
 800a164:	4605      	mov	r5, r0
 800a166:	b138      	cbz	r0, 800a178 <f_open+0x38>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a168:	b10d      	cbz	r5, 800a16e <f_open+0x2e>
 800a16a:	2300      	movs	r3, #0
 800a16c:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 800a16e:	4628      	mov	r0, r5
 800a170:	f20d 4dcc 	addw	sp, sp, #1228	; 0x4cc
 800a174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
 800a178:	f8dd 346c 	ldr.w	r3, [sp, #1132]	; 0x46c
 800a17c:	f8cd 3470 	str.w	r3, [sp, #1136]	; 0x470
		INIT_NAMBUF(fs);
 800a180:	aa9b      	add	r2, sp, #620	; 0x26c
 800a182:	60da      	str	r2, [r3, #12]
 800a184:	aa03      	add	r2, sp, #12
 800a186:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800a188:	9901      	ldr	r1, [sp, #4]
 800a18a:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
 800a18e:	f7ff fdf7 	bl	8009d80 <follow_path>
		if (res == FR_OK) {
 800a192:	4605      	mov	r5, r0
 800a194:	b968      	cbnz	r0, 800a1b2 <f_open+0x72>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a196:	f99d 34bb 	ldrsb.w	r3, [sp, #1211]	; 0x4bb
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	db67      	blt.n	800a26e <f_open+0x12e>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a19e:	f037 0301 	bics.w	r3, r7, #1
 800a1a2:	bf14      	ite	ne
 800a1a4:	2101      	movne	r1, #1
 800a1a6:	2100      	moveq	r1, #0
 800a1a8:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
 800a1ac:	f7fd ff96 	bl	80080dc <chk_lock>
 800a1b0:	4605      	mov	r5, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a1b2:	f016 0f1c 	tst.w	r6, #28
 800a1b6:	f000 80cd 	beq.w	800a354 <f_open+0x214>
			if (res != FR_OK) {					/* No file, create new */
 800a1ba:	2d00      	cmp	r5, #0
 800a1bc:	d064      	beq.n	800a288 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a1be:	2d04      	cmp	r5, #4
 800a1c0:	d057      	beq.n	800a272 <f_open+0x132>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a1c2:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a1c6:	2d00      	cmp	r5, #0
 800a1c8:	f040 80d3 	bne.w	800a372 <f_open+0x232>
 800a1cc:	f017 0f08 	tst.w	r7, #8
 800a1d0:	f000 80cf 	beq.w	800a372 <f_open+0x232>
				dw = GET_FATTIME();
 800a1d4:	f001 faca 	bl	800b76c <get_fattime>
 800a1d8:	4606      	mov	r6, r0
				if (fs->fs_type == FS_EXFAT) {
 800a1da:	f8dd 346c 	ldr.w	r3, [sp, #1132]	; 0x46c
 800a1de:	781a      	ldrb	r2, [r3, #0]
 800a1e0:	2a04      	cmp	r2, #4
 800a1e2:	d05b      	beq.n	800a29c <f_open+0x15c>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a1e4:	4601      	mov	r1, r0
 800a1e6:	f8dd 04ac 	ldr.w	r0, [sp, #1196]	; 0x4ac
 800a1ea:	300e      	adds	r0, #14
 800a1ec:	f7fd ff34 	bl	8008058 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a1f0:	4631      	mov	r1, r6
 800a1f2:	f8dd 04ac 	ldr.w	r0, [sp, #1196]	; 0x4ac
 800a1f6:	3016      	adds	r0, #22
 800a1f8:	f7fd ff2e 	bl	8008058 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a1fc:	f8dd 34ac 	ldr.w	r3, [sp, #1196]	; 0x4ac
 800a200:	2220      	movs	r2, #32
 800a202:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a204:	f8dd 646c 	ldr.w	r6, [sp, #1132]	; 0x46c
 800a208:	f8dd 84ac 	ldr.w	r8, [sp, #1196]	; 0x4ac
 800a20c:	4641      	mov	r1, r8
 800a20e:	4630      	mov	r0, r6
 800a210:	f7fe f85e 	bl	80082d0 <ld_clust>
 800a214:	4681      	mov	r9, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a216:	2200      	movs	r2, #0
 800a218:	4641      	mov	r1, r8
 800a21a:	4630      	mov	r0, r6
 800a21c:	f7fe f86b 	bl	80082f6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a220:	2100      	movs	r1, #0
 800a222:	f8dd 04ac 	ldr.w	r0, [sp, #1196]	; 0x4ac
 800a226:	301c      	adds	r0, #28
 800a228:	f7fd ff16 	bl	8008058 <st_dword>
					fs->wflag = 1;
 800a22c:	f8dd 346c 	ldr.w	r3, [sp, #1132]	; 0x46c
 800a230:	2201      	movs	r2, #1
 800a232:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800a234:	f1b9 0f00 	cmp.w	r9, #0
 800a238:	f000 809b 	beq.w	800a372 <f_open+0x232>
						dw = fs->winsect;
 800a23c:	f8dd 346c 	ldr.w	r3, [sp, #1132]	; 0x46c
 800a240:	6b5e      	ldr	r6, [r3, #52]	; 0x34
						res = remove_chain(&dj.obj, cl, 0);
 800a242:	2200      	movs	r2, #0
 800a244:	4649      	mov	r1, r9
 800a246:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
 800a24a:	f7fe ffe5 	bl	8009218 <remove_chain>
						if (res == FR_OK) {
 800a24e:	4605      	mov	r5, r0
 800a250:	2800      	cmp	r0, #0
 800a252:	f040 808e 	bne.w	800a372 <f_open+0x232>
							res = move_window(fs, dw);
 800a256:	4631      	mov	r1, r6
 800a258:	f8dd 046c 	ldr.w	r0, [sp, #1132]	; 0x46c
 800a25c:	f7fe fa34 	bl	80086c8 <move_window>
 800a260:	4605      	mov	r5, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a262:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800a266:	f8dd 246c 	ldr.w	r2, [sp, #1132]	; 0x46c
 800a26a:	6153      	str	r3, [r2, #20]
 800a26c:	e081      	b.n	800a372 <f_open+0x232>
				res = FR_INVALID_NAME;
 800a26e:	2506      	movs	r5, #6
 800a270:	e79f      	b.n	800a1b2 <f_open+0x72>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a272:	f7fd ff6d 	bl	8008150 <enq_lock>
 800a276:	b908      	cbnz	r0, 800a27c <f_open+0x13c>
 800a278:	2512      	movs	r5, #18
 800a27a:	e7a2      	b.n	800a1c2 <f_open+0x82>
 800a27c:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
 800a280:	f7ff fde6 	bl	8009e50 <dir_register>
 800a284:	4605      	mov	r5, r0
 800a286:	e79c      	b.n	800a1c2 <f_open+0x82>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a288:	f89d 3476 	ldrb.w	r3, [sp, #1142]	; 0x476
 800a28c:	f013 0f11 	tst.w	r3, #17
 800a290:	d16e      	bne.n	800a370 <f_open+0x230>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a292:	f016 0f04 	tst.w	r6, #4
 800a296:	d096      	beq.n	800a1c6 <f_open+0x86>
 800a298:	2508      	movs	r5, #8
 800a29a:	e06a      	b.n	800a372 <f_open+0x232>
					fp->obj.fs = fs;
 800a29c:	6023      	str	r3, [r4, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800a29e:	f8dd 846c 	ldr.w	r8, [sp, #1132]	; 0x46c
 800a2a2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800a2a6:	3034      	adds	r0, #52	; 0x34
 800a2a8:	f7fd fe73 	bl	8007f92 <ld_dword>
 800a2ac:	60a0      	str	r0, [r4, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800a2ae:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800a2b2:	3038      	adds	r0, #56	; 0x38
 800a2b4:	f7fd fe78 	bl	8007fa8 <ld_qword>
 800a2b8:	e9c4 0104 	strd	r0, r1, [r4, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800a2bc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a2c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a2c4:	f003 0302 	and.w	r3, r3, #2
 800a2c8:	71e3      	strb	r3, [r4, #7]
					fp->obj.n_frag = 0;
 800a2ca:	61e5      	str	r5, [r4, #28]
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800a2cc:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800a2d0:	4631      	mov	r1, r6
 800a2d2:	3008      	adds	r0, #8
 800a2d4:	f7fd fec0 	bl	8008058 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800a2d8:	f8dd 346c 	ldr.w	r3, [sp, #1132]	; 0x46c
 800a2dc:	691a      	ldr	r2, [r3, #16]
 800a2de:	7515      	strb	r5, [r2, #20]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800a2e0:	6918      	ldr	r0, [r3, #16]
 800a2e2:	4631      	mov	r1, r6
 800a2e4:	300c      	adds	r0, #12
 800a2e6:	f7fd feb7 	bl	8008058 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800a2ea:	f8dd 346c 	ldr.w	r3, [sp, #1132]	; 0x46c
 800a2ee:	691a      	ldr	r2, [r3, #16]
 800a2f0:	7555      	strb	r5, [r2, #21]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800a2f2:	691a      	ldr	r2, [r3, #16]
 800a2f4:	2120      	movs	r1, #32
 800a2f6:	7111      	strb	r1, [r2, #4]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800a2f8:	6918      	ldr	r0, [r3, #16]
 800a2fa:	4629      	mov	r1, r5
 800a2fc:	3034      	adds	r0, #52	; 0x34
 800a2fe:	f7fd feab 	bl	8008058 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800a302:	f8dd 346c 	ldr.w	r3, [sp, #1132]	; 0x46c
 800a306:	6918      	ldr	r0, [r3, #16]
 800a308:	2200      	movs	r2, #0
 800a30a:	2300      	movs	r3, #0
 800a30c:	3038      	adds	r0, #56	; 0x38
 800a30e:	f7fd fead 	bl	800806c <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800a312:	f8dd 346c 	ldr.w	r3, [sp, #1132]	; 0x46c
 800a316:	6918      	ldr	r0, [r3, #16]
 800a318:	2200      	movs	r2, #0
 800a31a:	2300      	movs	r3, #0
 800a31c:	3028      	adds	r0, #40	; 0x28
 800a31e:	f7fd fea5 	bl	800806c <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800a322:	f8dd 346c 	ldr.w	r3, [sp, #1132]	; 0x46c
 800a326:	691b      	ldr	r3, [r3, #16]
 800a328:	2201      	movs	r2, #1
 800a32a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					res = store_xdir(&dj);
 800a32e:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
 800a332:	f7ff f9be 	bl	80096b2 <store_xdir>
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800a336:	4605      	mov	r5, r0
 800a338:	b9d8      	cbnz	r0, 800a372 <f_open+0x232>
 800a33a:	68a1      	ldr	r1, [r4, #8]
 800a33c:	b1c9      	cbz	r1, 800a372 <f_open+0x232>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800a33e:	2200      	movs	r2, #0
 800a340:	4620      	mov	r0, r4
 800a342:	f7fe ff69 	bl	8009218 <remove_chain>
 800a346:	4605      	mov	r5, r0
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800a348:	68a3      	ldr	r3, [r4, #8]
 800a34a:	3b01      	subs	r3, #1
 800a34c:	f8dd 246c 	ldr.w	r2, [sp, #1132]	; 0x46c
 800a350:	6153      	str	r3, [r2, #20]
 800a352:	e00e      	b.n	800a372 <f_open+0x232>
			if (res == FR_OK) {					/* Following succeeded */
 800a354:	b96d      	cbnz	r5, 800a372 <f_open+0x232>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a356:	f89d 3476 	ldrb.w	r3, [sp, #1142]	; 0x476
 800a35a:	f013 0f10 	tst.w	r3, #16
 800a35e:	d163      	bne.n	800a428 <f_open+0x2e8>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a360:	f016 0f02 	tst.w	r6, #2
 800a364:	d005      	beq.n	800a372 <f_open+0x232>
 800a366:	f013 0f01 	tst.w	r3, #1
 800a36a:	d002      	beq.n	800a372 <f_open+0x232>
						res = FR_DENIED;
 800a36c:	2507      	movs	r5, #7
 800a36e:	e01a      	b.n	800a3a6 <f_open+0x266>
					res = FR_DENIED;
 800a370:	2507      	movs	r5, #7
		if (res == FR_OK) {
 800a372:	b9c5      	cbnz	r5, 800a3a6 <f_open+0x266>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a374:	f017 0f08 	tst.w	r7, #8
 800a378:	d001      	beq.n	800a37e <f_open+0x23e>
				mode |= FA_MODIFIED;
 800a37a:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a37e:	f8dd 346c 	ldr.w	r3, [sp, #1132]	; 0x46c
 800a382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a384:	64a3      	str	r3, [r4, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800a386:	f8dd 34ac 	ldr.w	r3, [sp, #1196]	; 0x4ac
 800a38a:	64e3      	str	r3, [r4, #76]	; 0x4c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a38c:	f037 0301 	bics.w	r3, r7, #1
 800a390:	bf14      	ite	ne
 800a392:	2101      	movne	r1, #1
 800a394:	2100      	moveq	r1, #0
 800a396:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
 800a39a:	f7fd fee9 	bl	8008170 <inc_lock>
 800a39e:	62e0      	str	r0, [r4, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a3a0:	2800      	cmp	r0, #0
 800a3a2:	f000 80a4 	beq.w	800a4ee <f_open+0x3ae>
		if (res == FR_OK) {
 800a3a6:	2d00      	cmp	r5, #0
 800a3a8:	f47f aede 	bne.w	800a168 <f_open+0x28>
			if (fs->fs_type == FS_EXFAT) {
 800a3ac:	f8dd 646c 	ldr.w	r6, [sp, #1132]	; 0x46c
 800a3b0:	7833      	ldrb	r3, [r6, #0]
 800a3b2:	2b04      	cmp	r3, #4
 800a3b4:	d03a      	beq.n	800a42c <f_open+0x2ec>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a3b6:	f8dd 84ac 	ldr.w	r8, [sp, #1196]	; 0x4ac
 800a3ba:	4641      	mov	r1, r8
 800a3bc:	4630      	mov	r0, r6
 800a3be:	f7fd ff87 	bl	80082d0 <ld_clust>
 800a3c2:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a3c4:	f108 001c 	add.w	r0, r8, #28
 800a3c8:	f7fd fde3 	bl	8007f92 <ld_dword>
 800a3cc:	6120      	str	r0, [r4, #16]
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	6163      	str	r3, [r4, #20]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	6521      	str	r1, [r4, #80]	; 0x50
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a3d6:	f8dd 346c 	ldr.w	r3, [sp, #1132]	; 0x46c
 800a3da:	6023      	str	r3, [r4, #0]
			fp->obj.id = fs->id;
 800a3dc:	88db      	ldrh	r3, [r3, #6]
 800a3de:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 800a3e0:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800a3e4:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800a3e8:	6461      	str	r1, [r4, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a3f2:	f104 0a54 	add.w	sl, r4, #84	; 0x54
 800a3f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3fa:	4650      	mov	r0, sl
 800a3fc:	f7fd fe52 	bl	80080a4 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a400:	f017 0f20 	tst.w	r7, #32
 800a404:	f43f aeb0 	beq.w	800a168 <f_open+0x28>
 800a408:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
 800a40c:	ea56 0307 	orrs.w	r3, r6, r7
 800a410:	f43f aeaa 	beq.w	800a168 <f_open+0x28>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a414:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a418:	f8dd 346c 	ldr.w	r3, [sp, #1132]	; 0x46c
 800a41c:	f8b3 b00a 	ldrh.w	fp, [r3, #10]
 800a420:	ea4f 2b4b 	mov.w	fp, fp, lsl #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a424:	68a1      	ldr	r1, [r4, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a426:	e028      	b.n	800a47a <f_open+0x33a>
					res = FR_NO_FILE;
 800a428:	2504      	movs	r5, #4
 800a42a:	e7bc      	b.n	800a3a6 <f_open+0x266>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800a42c:	f8dd 3478 	ldr.w	r3, [sp, #1144]	; 0x478
 800a430:	6223      	str	r3, [r4, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800a432:	f8dd 3480 	ldr.w	r3, [sp, #1152]	; 0x480
 800a436:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a43a:	f89d 2477 	ldrb.w	r2, [sp, #1143]	; 0x477
 800a43e:	4313      	orrs	r3, r2
 800a440:	6263      	str	r3, [r4, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800a442:	f8dd 34bc 	ldr.w	r3, [sp, #1212]	; 0x4bc
 800a446:	62a3      	str	r3, [r4, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800a448:	6930      	ldr	r0, [r6, #16]
 800a44a:	3034      	adds	r0, #52	; 0x34
 800a44c:	f7fd fda1 	bl	8007f92 <ld_dword>
 800a450:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800a452:	6930      	ldr	r0, [r6, #16]
 800a454:	3038      	adds	r0, #56	; 0x38
 800a456:	f7fd fda7 	bl	8007fa8 <ld_qword>
 800a45a:	e9c4 0104 	strd	r0, r1, [r4, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800a45e:	6933      	ldr	r3, [r6, #16]
 800a460:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a464:	f003 0302 	and.w	r3, r3, #2
 800a468:	71e3      	strb	r3, [r4, #7]
 800a46a:	e7b2      	b.n	800a3d2 <f_open+0x292>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a46c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800a470:	d013      	beq.n	800a49a <f_open+0x35a>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a472:	ebb6 0608 	subs.w	r6, r6, r8
 800a476:	eb67 0709 	sbc.w	r7, r7, r9
 800a47a:	b985      	cbnz	r5, 800a49e <f_open+0x35e>
 800a47c:	46d8      	mov	r8, fp
 800a47e:	f04f 0900 	mov.w	r9, #0
 800a482:	45b9      	cmp	r9, r7
 800a484:	bf08      	it	eq
 800a486:	45b3      	cmpeq	fp, r6
 800a488:	d209      	bcs.n	800a49e <f_open+0x35e>
					clst = get_fat(&fp->obj, clst);
 800a48a:	4620      	mov	r0, r4
 800a48c:	f7fe fcef 	bl	8008e6e <get_fat>
 800a490:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800a492:	2801      	cmp	r0, #1
 800a494:	d8ea      	bhi.n	800a46c <f_open+0x32c>
 800a496:	2502      	movs	r5, #2
 800a498:	e7e8      	b.n	800a46c <f_open+0x32c>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a49a:	2501      	movs	r5, #1
 800a49c:	e7e9      	b.n	800a472 <f_open+0x332>
				fp->clust = clst;
 800a49e:	6421      	str	r1, [r4, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a4a0:	2d00      	cmp	r5, #0
 800a4a2:	f47f ae61 	bne.w	800a168 <f_open+0x28>
 800a4a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	ea02 0806 	and.w	r8, r2, r6
 800a4b0:	ea03 0907 	and.w	r9, r3, r7
 800a4b4:	ea58 0309 	orrs.w	r3, r8, r9
 800a4b8:	f43f ae56 	beq.w	800a168 <f_open+0x28>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a4bc:	f8dd 846c 	ldr.w	r8, [sp, #1132]	; 0x46c
 800a4c0:	4640      	mov	r0, r8
 800a4c2:	f7fd fee1 	bl	8008288 <clust2sect>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	b908      	cbnz	r0, 800a4ce <f_open+0x38e>
						res = FR_INT_ERR;
 800a4ca:	2502      	movs	r5, #2
 800a4cc:	e64d      	b.n	800a16a <f_open+0x2a>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a4ce:	0a73      	lsrs	r3, r6, #9
 800a4d0:	ea43 53c7 	orr.w	r3, r3, r7, lsl #23
 800a4d4:	441a      	add	r2, r3
 800a4d6:	6462      	str	r2, [r4, #68]	; 0x44
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	4651      	mov	r1, sl
 800a4dc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a4e0:	f7fd fd2e 	bl	8007f40 <disk_read>
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	f43f ae3f 	beq.w	800a168 <f_open+0x28>
 800a4ea:	2501      	movs	r5, #1
 800a4ec:	e63d      	b.n	800a16a <f_open+0x2a>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a4ee:	2502      	movs	r5, #2
 800a4f0:	e63a      	b.n	800a168 <f_open+0x28>
	if (!fp) return FR_INVALID_OBJECT;
 800a4f2:	2509      	movs	r5, #9
 800a4f4:	e63b      	b.n	800a16e <f_open+0x2e>

0800a4f6 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a4f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	4604      	mov	r4, r0
 800a4fe:	460f      	mov	r7, r1
 800a500:	4615      	mov	r5, r2
 800a502:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800a504:	2300      	movs	r3, #0
 800a506:	6033      	str	r3, [r6, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a508:	9000      	str	r0, [sp, #0]
 800a50a:	a903      	add	r1, sp, #12
 800a50c:	f7fe f88e 	bl	800862c <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a510:	4680      	mov	r8, r0
 800a512:	2800      	cmp	r0, #0
 800a514:	f040 80be 	bne.w	800a694 <f_read+0x19e>
 800a518:	f894 8031 	ldrb.w	r8, [r4, #49]	; 0x31
 800a51c:	f1b8 0f00 	cmp.w	r8, #0
 800a520:	f040 80b8 	bne.w	800a694 <f_read+0x19e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a524:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800a528:	f013 0f01 	tst.w	r3, #1
 800a52c:	f000 80cf 	beq.w	800a6ce <f_read+0x1d8>
	remain = fp->obj.objsize - fp->fptr;
 800a530:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800a534:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 800a538:	1a12      	subs	r2, r2, r0
 800a53a:	eb63 0301 	sbc.w	r3, r3, r1
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a53e:	2100      	movs	r1, #0
 800a540:	428b      	cmp	r3, r1
 800a542:	bf08      	it	eq
 800a544:	42aa      	cmpeq	r2, r5
 800a546:	d260      	bcs.n	800a60a <f_read+0x114>
 800a548:	4615      	mov	r5, r2
 800a54a:	e05e      	b.n	800a60a <f_read+0x114>
			if (csect == 0) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a54c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800a54e:	b119      	cbz	r1, 800a558 <f_read+0x62>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a550:	4620      	mov	r0, r4
 800a552:	f7fd fea5 	bl	80082a0 <clmt_clust>
 800a556:	e074      	b.n	800a642 <f_read+0x14c>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a558:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a55a:	9800      	ldr	r0, [sp, #0]
 800a55c:	f7fe fc87 	bl	8008e6e <get_fat>
 800a560:	e06f      	b.n	800a642 <f_read+0x14c>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a562:	f04f 0802 	mov.w	r8, #2
 800a566:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 800a56a:	e093      	b.n	800a694 <f_read+0x19e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a56c:	f04f 0801 	mov.w	r8, #1
 800a570:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 800a574:	e08e      	b.n	800a694 <f_read+0x19e>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a576:	f04f 0802 	mov.w	r8, #2
 800a57a:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 800a57e:	e089      	b.n	800a694 <f_read+0x19e>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a580:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 800a584:	2b00      	cmp	r3, #0
 800a586:	db02      	blt.n	800a58e <f_read+0x98>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a588:	ea4f 294b 	mov.w	r9, fp, lsl #9
				continue;
 800a58c:	e02f      	b.n	800a5ee <f_read+0xf8>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a58e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800a590:	eba0 000a 	sub.w	r0, r0, sl
 800a594:	4558      	cmp	r0, fp
 800a596:	d2f7      	bcs.n	800a588 <f_read+0x92>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a59c:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800a5a0:	eb07 2040 	add.w	r0, r7, r0, lsl #9
 800a5a4:	f7fd fd75 	bl	8008092 <mem_cpy>
 800a5a8:	e7ee      	b.n	800a588 <f_read+0x92>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a5aa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a5ac:	4552      	cmp	r2, sl
 800a5ae:	d00d      	beq.n	800a5cc <f_read+0xd6>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a5b0:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	db71      	blt.n	800a69c <f_read+0x1a6>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	4652      	mov	r2, sl
 800a5bc:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800a5c0:	9803      	ldr	r0, [sp, #12]
 800a5c2:	7840      	ldrb	r0, [r0, #1]
 800a5c4:	f7fd fcbc 	bl	8007f40 <disk_read>
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	d17b      	bne.n	800a6c4 <f_read+0x1ce>
			}
#endif
			fp->sect = sect;
 800a5cc:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a5d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a5d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5d6:	f5c3 7900 	rsb	r9, r3, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a5da:	454d      	cmp	r5, r9
 800a5dc:	d200      	bcs.n	800a5e0 <f_read+0xea>
 800a5de:	46a9      	mov	r9, r5
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a5e0:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800a5e4:	464a      	mov	r2, r9
 800a5e6:	4419      	add	r1, r3
 800a5e8:	4638      	mov	r0, r7
 800a5ea:	f7fd fd52 	bl	8008092 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a5ee:	444f      	add	r7, r9
 800a5f0:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800a5f4:	eb12 0009 	adds.w	r0, r2, r9
 800a5f8:	f143 0100 	adc.w	r1, r3, #0
 800a5fc:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
 800a600:	6833      	ldr	r3, [r6, #0]
 800a602:	444b      	add	r3, r9
 800a604:	6033      	str	r3, [r6, #0]
 800a606:	eba5 0509 	sub.w	r5, r5, r9
	for ( ;  btr;								/* Repeat until all data read */
 800a60a:	2d00      	cmp	r5, #0
 800a60c:	d042      	beq.n	800a694 <f_read+0x19e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a60e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800a612:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a616:	2100      	movs	r1, #0
 800a618:	ea00 0902 	and.w	r9, r0, r2
 800a61c:	ea01 0a03 	and.w	sl, r1, r3
 800a620:	ea59 010a 	orrs.w	r1, r9, sl
 800a624:	d1d4      	bne.n	800a5d0 <f_read+0xda>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a626:	ea4f 2952 	mov.w	r9, r2, lsr #9
 800a62a:	ea49 59c3 	orr.w	r9, r9, r3, lsl #23
 800a62e:	9903      	ldr	r1, [sp, #12]
 800a630:	8949      	ldrh	r1, [r1, #10]
 800a632:	3901      	subs	r1, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800a634:	ea19 0901 	ands.w	r9, r9, r1
 800a638:	d109      	bne.n	800a64e <f_read+0x158>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a63a:	ea52 0103 	orrs.w	r1, r2, r3
 800a63e:	d185      	bne.n	800a54c <f_read+0x56>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a640:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a642:	2801      	cmp	r0, #1
 800a644:	d98d      	bls.n	800a562 <f_read+0x6c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a646:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a64a:	d08f      	beq.n	800a56c <f_read+0x76>
				fp->clust = clst;				/* Update current cluster */
 800a64c:	6420      	str	r0, [r4, #64]	; 0x40
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a64e:	9b03      	ldr	r3, [sp, #12]
 800a650:	9301      	str	r3, [sp, #4]
 800a652:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a654:	4618      	mov	r0, r3
 800a656:	f7fd fe17 	bl	8008288 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a65a:	4682      	mov	sl, r0
 800a65c:	2800      	cmp	r0, #0
 800a65e:	d08a      	beq.n	800a576 <f_read+0x80>
			sect += csect;
 800a660:	44ca      	add	sl, r9
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a662:	ea5f 2b55 	movs.w	fp, r5, lsr #9
 800a666:	d0a0      	beq.n	800a5aa <f_read+0xb4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a668:	eb09 030b 	add.w	r3, r9, fp
 800a66c:	9a01      	ldr	r2, [sp, #4]
 800a66e:	8952      	ldrh	r2, [r2, #10]
 800a670:	4293      	cmp	r3, r2
 800a672:	d901      	bls.n	800a678 <f_read+0x182>
					cc = fs->csize - csect;
 800a674:	eba2 0b09 	sub.w	fp, r2, r9
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a678:	465b      	mov	r3, fp
 800a67a:	4652      	mov	r2, sl
 800a67c:	4639      	mov	r1, r7
 800a67e:	9801      	ldr	r0, [sp, #4]
 800a680:	7840      	ldrb	r0, [r0, #1]
 800a682:	f7fd fc5d 	bl	8007f40 <disk_read>
 800a686:	2800      	cmp	r0, #0
 800a688:	f43f af7a 	beq.w	800a580 <f_read+0x8a>
 800a68c:	f04f 0801 	mov.w	r8, #1
 800a690:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800a694:	4640      	mov	r0, r8
 800a696:	b005      	add	sp, #20
 800a698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a69c:	2301      	movs	r3, #1
 800a69e:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800a6a2:	9801      	ldr	r0, [sp, #4]
 800a6a4:	7840      	ldrb	r0, [r0, #1]
 800a6a6:	f7fd fc57 	bl	8007f58 <disk_write>
 800a6aa:	b930      	cbnz	r0, 800a6ba <f_read+0x1c4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a6ac:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800a6b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6b4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800a6b8:	e77e      	b.n	800a5b8 <f_read+0xc2>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a6ba:	f04f 0801 	mov.w	r8, #1
 800a6be:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 800a6c2:	e7e7      	b.n	800a694 <f_read+0x19e>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a6c4:	f04f 0801 	mov.w	r8, #1
 800a6c8:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
 800a6cc:	e7e2      	b.n	800a694 <f_read+0x19e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a6ce:	f04f 0807 	mov.w	r8, #7
 800a6d2:	e7df      	b.n	800a694 <f_read+0x19e>

0800a6d4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a6d4:	b570      	push	{r4, r5, r6, lr}
 800a6d6:	f5ad 6d98 	sub.w	sp, sp, #1216	; 0x4c0
 800a6da:	4604      	mov	r4, r0
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a6dc:	f20d 41bc 	addw	r1, sp, #1212	; 0x4bc
 800a6e0:	f7fd ffa4 	bl	800862c <validate>
	if (res == FR_OK) {
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	b9a8      	cbnz	r0, 800a714 <f_sync+0x40>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a6e8:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800a6ec:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a6f0:	d010      	beq.n	800a714 <f_sync+0x40>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a6f2:	f012 0f80 	tst.w	r2, #128	; 0x80
 800a6f6:	d111      	bne.n	800a71c <f_sync+0x48>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a6f8:	f001 f838 	bl	800b76c <get_fattime>
 800a6fc:	4606      	mov	r6, r0
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800a6fe:	f8dd 04bc 	ldr.w	r0, [sp, #1212]	; 0x4bc
 800a702:	7803      	ldrb	r3, [r0, #0]
 800a704:	2b04      	cmp	r3, #4
 800a706:	d01c      	beq.n	800a742 <f_sync+0x6e>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a708:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a70a:	f7fd ffdd 	bl	80086c8 <move_window>
				if (res == FR_OK) {
 800a70e:	4603      	mov	r3, r0
 800a710:	2800      	cmp	r0, #0
 800a712:	d079      	beq.n	800a808 <f_sync+0x134>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800a714:	4618      	mov	r0, r3
 800a716:	f50d 6d98 	add.w	sp, sp, #1216	; 0x4c0
 800a71a:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a71c:	2301      	movs	r3, #1
 800a71e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a720:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800a724:	f8dd 04bc 	ldr.w	r0, [sp, #1212]	; 0x4bc
 800a728:	7840      	ldrb	r0, [r0, #1]
 800a72a:	f7fd fc15 	bl	8007f58 <disk_write>
 800a72e:	2800      	cmp	r0, #0
 800a730:	f040 8093 	bne.w	800a85a <f_sync+0x186>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a734:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800a738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a73c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800a740:	e7da      	b.n	800a6f8 <f_sync+0x24>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800a742:	4620      	mov	r0, r4
 800a744:	f7fe fb7a 	bl	8008e3c <fill_first_frag>
				if (res == FR_OK) {
 800a748:	4603      	mov	r3, r0
 800a74a:	2800      	cmp	r0, #0
 800a74c:	d054      	beq.n	800a7f8 <f_sync+0x124>
				if (res == FR_OK) {
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d1e0      	bne.n	800a714 <f_sync+0x40>
					INIT_NAMBUF(fs);
 800a752:	f8dd 34bc 	ldr.w	r3, [sp, #1212]	; 0x4bc
 800a756:	aa98      	add	r2, sp, #608	; 0x260
 800a758:	60da      	str	r2, [r3, #12]
 800a75a:	f8c3 d010 	str.w	sp, [r3, #16]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800a75e:	4621      	mov	r1, r4
 800a760:	f50d 608c 	add.w	r0, sp, #1120	; 0x460
 800a764:	f7fe fee0 	bl	8009528 <load_obj_dir>
					if (res == FR_OK) {
 800a768:	4603      	mov	r3, r0
 800a76a:	2800      	cmp	r0, #0
 800a76c:	d1d2      	bne.n	800a714 <f_sync+0x40>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800a76e:	f8dd 34bc 	ldr.w	r3, [sp, #1212]	; 0x4bc
 800a772:	6919      	ldr	r1, [r3, #16]
 800a774:	790a      	ldrb	r2, [r1, #4]
 800a776:	f042 0220 	orr.w	r2, r2, #32
 800a77a:	710a      	strb	r2, [r1, #4]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800a77c:	79e2      	ldrb	r2, [r4, #7]
 800a77e:	6919      	ldr	r1, [r3, #16]
 800a780:	f042 0201 	orr.w	r2, r2, #1
 800a784:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800a788:	6918      	ldr	r0, [r3, #16]
 800a78a:	68a1      	ldr	r1, [r4, #8]
 800a78c:	3034      	adds	r0, #52	; 0x34
 800a78e:	f7fd fc63 	bl	8008058 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800a792:	f8dd 34bc 	ldr.w	r3, [sp, #1212]	; 0x4bc
 800a796:	6918      	ldr	r0, [r3, #16]
 800a798:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800a79c:	3038      	adds	r0, #56	; 0x38
 800a79e:	f7fd fc65 	bl	800806c <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800a7a2:	f8dd 34bc 	ldr.w	r3, [sp, #1212]	; 0x4bc
 800a7a6:	6918      	ldr	r0, [r3, #16]
 800a7a8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800a7ac:	3028      	adds	r0, #40	; 0x28
 800a7ae:	f7fd fc5d 	bl	800806c <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800a7b2:	f8dd 34bc 	ldr.w	r3, [sp, #1212]	; 0x4bc
 800a7b6:	6918      	ldr	r0, [r3, #16]
 800a7b8:	4631      	mov	r1, r6
 800a7ba:	300c      	adds	r0, #12
 800a7bc:	f7fd fc4c 	bl	8008058 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800a7c0:	f8dd 34bc 	ldr.w	r3, [sp, #1212]	; 0x4bc
 800a7c4:	691a      	ldr	r2, [r3, #16]
 800a7c6:	2100      	movs	r1, #0
 800a7c8:	7551      	strb	r1, [r2, #21]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800a7ca:	6918      	ldr	r0, [r3, #16]
 800a7cc:	3010      	adds	r0, #16
 800a7ce:	f7fd fc43 	bl	8008058 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800a7d2:	f50d 608c 	add.w	r0, sp, #1120	; 0x460
 800a7d6:	f7fe ff6c 	bl	80096b2 <store_xdir>
						if (res == FR_OK) {
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	d199      	bne.n	800a714 <f_sync+0x40>
							res = sync_fs(fs);
 800a7e0:	f8dd 04bc 	ldr.w	r0, [sp, #1212]	; 0x4bc
 800a7e4:	f7ff fc34 	bl	800a050 <sync_fs>
 800a7e8:	4603      	mov	r3, r0
							fp->flag &= (BYTE)~FA_MODIFIED;
 800a7ea:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800a7ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7f2:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 800a7f6:	e78d      	b.n	800a714 <f_sync+0x40>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800a7f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7fc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a7fe:	4620      	mov	r0, r4
 800a800:	f7fe fb04 	bl	8008e0c <fill_last_frag>
 800a804:	4603      	mov	r3, r0
 800a806:	e7a2      	b.n	800a74e <f_sync+0x7a>
					dir = fp->dir_ptr;
 800a808:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a80a:	7aeb      	ldrb	r3, [r5, #11]
 800a80c:	f043 0320 	orr.w	r3, r3, #32
 800a810:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a812:	68a2      	ldr	r2, [r4, #8]
 800a814:	4629      	mov	r1, r5
 800a816:	6820      	ldr	r0, [r4, #0]
 800a818:	f7fd fd6d 	bl	80082f6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a81c:	6921      	ldr	r1, [r4, #16]
 800a81e:	f105 001c 	add.w	r0, r5, #28
 800a822:	f7fd fc19 	bl	8008058 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a826:	4631      	mov	r1, r6
 800a828:	f105 0016 	add.w	r0, r5, #22
 800a82c:	f7fd fc14 	bl	8008058 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a830:	2100      	movs	r1, #0
 800a832:	f105 0012 	add.w	r0, r5, #18
 800a836:	f7fd fc0b 	bl	8008050 <st_word>
					fs->wflag = 1;
 800a83a:	f8dd 34bc 	ldr.w	r3, [sp, #1212]	; 0x4bc
 800a83e:	2201      	movs	r2, #1
 800a840:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a842:	f8dd 04bc 	ldr.w	r0, [sp, #1212]	; 0x4bc
 800a846:	f7ff fc03 	bl	800a050 <sync_fs>
 800a84a:	4603      	mov	r3, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a84c:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800a850:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a854:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 800a858:	e75c      	b.n	800a714 <f_sync+0x40>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a85a:	2301      	movs	r3, #1
 800a85c:	e75a      	b.n	800a714 <f_sync+0x40>

0800a85e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a85e:	b510      	push	{r4, lr}
 800a860:	b082      	sub	sp, #8
 800a862:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a864:	f7ff ff36 	bl	800a6d4 <f_sync>
	if (res == FR_OK)
 800a868:	4603      	mov	r3, r0
 800a86a:	b110      	cbz	r0, 800a872 <f_close+0x14>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	b002      	add	sp, #8
 800a870:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a872:	a901      	add	r1, sp, #4
 800a874:	4620      	mov	r0, r4
 800a876:	f7fd fed9 	bl	800862c <validate>
		if (res == FR_OK) {
 800a87a:	4603      	mov	r3, r0
 800a87c:	2800      	cmp	r0, #0
 800a87e:	d1f5      	bne.n	800a86c <f_close+0xe>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a880:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a882:	f7fd fcc7 	bl	8008214 <dec_lock>
			if (res == FR_OK)
 800a886:	4603      	mov	r3, r0
 800a888:	2800      	cmp	r0, #0
 800a88a:	d1ef      	bne.n	800a86c <f_close+0xe>
				fp->obj.fs = 0;			/* Invalidate file object */
 800a88c:	2200      	movs	r2, #0
 800a88e:	6022      	str	r2, [r4, #0]
 800a890:	e7ec      	b.n	800a86c <f_close+0xe>

0800a892 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800a892:	b530      	push	{r4, r5, lr}
 800a894:	f2ad 4d74 	subw	sp, sp, #1140	; 0x474
 800a898:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800a89a:	2800      	cmp	r0, #0
 800a89c:	d067      	beq.n	800a96e <f_opendir+0xdc>
 800a89e:	4604      	mov	r4, r0

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f20d 416c 	addw	r1, sp, #1132	; 0x46c
 800a8a6:	a801      	add	r0, sp, #4
 800a8a8:	f7fd ff70 	bl	800878c <find_volume>
	if (res == FR_OK) {
 800a8ac:	4605      	mov	r5, r0
 800a8ae:	b130      	cbz	r0, 800a8be <f_opendir+0x2c>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800a8b0:	b10d      	cbz	r5, 800a8b6 <f_opendir+0x24>
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	f20d 4d74 	addw	sp, sp, #1140	; 0x474
 800a8bc:	bd30      	pop	{r4, r5, pc}
		obj->fs = fs;
 800a8be:	f8dd 346c 	ldr.w	r3, [sp, #1132]	; 0x46c
 800a8c2:	6023      	str	r3, [r4, #0]
		INIT_NAMBUF(fs);
 800a8c4:	aa9b      	add	r2, sp, #620	; 0x26c
 800a8c6:	60da      	str	r2, [r3, #12]
 800a8c8:	aa03      	add	r2, sp, #12
 800a8ca:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800a8cc:	9901      	ldr	r1, [sp, #4]
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	f7ff fa56 	bl	8009d80 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 800a8d4:	4605      	mov	r5, r0
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	d145      	bne.n	800a966 <f_opendir+0xd4>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800a8da:	f994 304b 	ldrsb.w	r3, [r4, #75]	; 0x4b
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	db0d      	blt.n	800a8fe <f_opendir+0x6c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800a8e2:	79a3      	ldrb	r3, [r4, #6]
 800a8e4:	f013 0f10 	tst.w	r3, #16
 800a8e8:	d03c      	beq.n	800a964 <f_opendir+0xd2>
					if (fs->fs_type == FS_EXFAT) {
 800a8ea:	f8dd 546c 	ldr.w	r5, [sp, #1132]	; 0x46c
 800a8ee:	782b      	ldrb	r3, [r5, #0]
 800a8f0:	2b04      	cmp	r3, #4
 800a8f2:	d013      	beq.n	800a91c <f_opendir+0x8a>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800a8f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	f7fd fcea 	bl	80082d0 <ld_clust>
 800a8fc:	60a0      	str	r0, [r4, #8]
				obj->id = fs->id;
 800a8fe:	f8dd 346c 	ldr.w	r3, [sp, #1132]	; 0x46c
 800a902:	88db      	ldrh	r3, [r3, #6]
 800a904:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800a906:	2100      	movs	r1, #0
 800a908:	4620      	mov	r0, r4
 800a90a:	f7fe fb62 	bl	8008fd2 <dir_sdi>
				if (res == FR_OK) {
 800a90e:	4605      	mov	r5, r0
 800a910:	bb48      	cbnz	r0, 800a966 <f_opendir+0xd4>
					if (obj->sclust) {
 800a912:	68a3      	ldr	r3, [r4, #8]
 800a914:	b9f3      	cbnz	r3, 800a954 <f_opendir+0xc2>
						obj->lockid = 0;	/* Root directory need not to be locked */
 800a916:	2300      	movs	r3, #0
 800a918:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a91a:	e024      	b.n	800a966 <f_opendir+0xd4>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800a91c:	68a3      	ldr	r3, [r4, #8]
 800a91e:	6223      	str	r3, [r4, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800a920:	6923      	ldr	r3, [r4, #16]
 800a922:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a926:	79e2      	ldrb	r2, [r4, #7]
 800a928:	4313      	orrs	r3, r2
 800a92a:	6263      	str	r3, [r4, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 800a92c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a92e:	62a3      	str	r3, [r4, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800a930:	6928      	ldr	r0, [r5, #16]
 800a932:	3034      	adds	r0, #52	; 0x34
 800a934:	f7fd fb2d 	bl	8007f92 <ld_dword>
 800a938:	60a0      	str	r0, [r4, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800a93a:	6928      	ldr	r0, [r5, #16]
 800a93c:	3038      	adds	r0, #56	; 0x38
 800a93e:	f7fd fb33 	bl	8007fa8 <ld_qword>
 800a942:	e9c4 0104 	strd	r0, r1, [r4, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800a946:	692b      	ldr	r3, [r5, #16]
 800a948:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a94c:	f003 0302 	and.w	r3, r3, #2
 800a950:	71e3      	strb	r3, [r4, #7]
 800a952:	e7d4      	b.n	800a8fe <f_opendir+0x6c>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800a954:	2100      	movs	r1, #0
 800a956:	4620      	mov	r0, r4
 800a958:	f7fd fc0a 	bl	8008170 <inc_lock>
 800a95c:	62e0      	str	r0, [r4, #44]	; 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800a95e:	b910      	cbnz	r0, 800a966 <f_opendir+0xd4>
 800a960:	2512      	movs	r5, #18
 800a962:	e7a5      	b.n	800a8b0 <f_opendir+0x1e>
					res = FR_NO_PATH;
 800a964:	2505      	movs	r5, #5
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800a966:	2d04      	cmp	r5, #4
 800a968:	d1a2      	bne.n	800a8b0 <f_opendir+0x1e>
 800a96a:	2505      	movs	r5, #5
 800a96c:	e7a1      	b.n	800a8b2 <f_opendir+0x20>
	if (!dp) return FR_INVALID_OBJECT;
 800a96e:	2509      	movs	r5, #9
 800a970:	e7a1      	b.n	800a8b6 <f_opendir+0x24>

0800a972 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800a972:	b510      	push	{r4, lr}
 800a974:	b082      	sub	sp, #8
 800a976:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800a978:	a901      	add	r1, sp, #4
 800a97a:	f7fd fe57 	bl	800862c <validate>
	if (res == FR_OK) {
 800a97e:	4603      	mov	r3, r0
 800a980:	b920      	cbnz	r0, 800a98c <f_closedir+0x1a>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800a982:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a984:	b928      	cbnz	r0, 800a992 <f_closedir+0x20>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
 800a986:	b90b      	cbnz	r3, 800a98c <f_closedir+0x1a>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800a988:	2200      	movs	r2, #0
 800a98a:	6022      	str	r2, [r4, #0]
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	b002      	add	sp, #8
 800a990:	bd10      	pop	{r4, pc}
			res = dec_lock(dp->obj.lockid);
 800a992:	f7fd fc3f 	bl	8008214 <dec_lock>
 800a996:	4603      	mov	r3, r0
 800a998:	e7f5      	b.n	800a986 <f_closedir+0x14>

0800a99a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a99a:	b570      	push	{r4, r5, r6, lr}
 800a99c:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 800a9a0:	4605      	mov	r5, r0
 800a9a2:	460e      	mov	r6, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800a9a4:	f20d 4164 	addw	r1, sp, #1124	; 0x464
 800a9a8:	f7fd fe40 	bl	800862c <validate>
	if (res == FR_OK) {
 800a9ac:	4604      	mov	r4, r0
 800a9ae:	b9c0      	cbnz	r0, 800a9e2 <f_readdir+0x48>
		if (!fno) {
 800a9b0:	b1de      	cbz	r6, 800a9ea <f_readdir+0x50>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
 800a9b2:	f8dd 3464 	ldr.w	r3, [sp, #1124]	; 0x464
 800a9b6:	aa99      	add	r2, sp, #612	; 0x264
 800a9b8:	60da      	str	r2, [r3, #12]
 800a9ba:	aa01      	add	r2, sp, #4
 800a9bc:	611a      	str	r2, [r3, #16]
			res = dir_read(dp, 0);			/* Read an item */
 800a9be:	2100      	movs	r1, #0
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	f7fe fdcd 	bl	8009560 <dir_read>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800a9c6:	2804      	cmp	r0, #4
 800a9c8:	d000      	beq.n	800a9cc <f_readdir+0x32>
			if (res == FR_OK) {				/* A valid entry is found */
 800a9ca:	b9a0      	cbnz	r0, 800a9f6 <f_readdir+0x5c>
				get_fileinfo(dp, fno);		/* Get the object information */
 800a9cc:	4631      	mov	r1, r6
 800a9ce:	4628      	mov	r0, r5
 800a9d0:	f7fe fffc 	bl	80099cc <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800a9d4:	2100      	movs	r1, #0
 800a9d6:	4628      	mov	r0, r5
 800a9d8:	f7fe fc9d 	bl	8009316 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800a9dc:	2804      	cmp	r0, #4
 800a9de:	d000      	beq.n	800a9e2 <f_readdir+0x48>
				res = dir_next(dp, 0);		/* Increment index for next */
 800a9e0:	4604      	mov	r4, r0
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 800a9e8:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800a9ea:	2100      	movs	r1, #0
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	f7fe faf0 	bl	8008fd2 <dir_sdi>
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	e7f5      	b.n	800a9e2 <f_readdir+0x48>
			res = dir_read(dp, 0);			/* Read an item */
 800a9f6:	4604      	mov	r4, r0
 800a9f8:	e7f3      	b.n	800a9e2 <f_readdir+0x48>

0800a9fa <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800a9fa:	b570      	push	{r4, r5, r6, lr}
 800a9fc:	4605      	mov	r5, r0
 800a9fe:	460c      	mov	r4, r1
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 800aa00:	4621      	mov	r1, r4
 800aa02:	4628      	mov	r0, r5
 800aa04:	f7ff ffc9 	bl	800a99a <f_readdir>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800aa08:	4606      	mov	r6, r0
 800aa0a:	fab4 f384 	clz	r3, r4
 800aa0e:	095b      	lsrs	r3, r3, #5
 800aa10:	2800      	cmp	r0, #0
 800aa12:	bf0c      	ite	eq
 800aa14:	4618      	moveq	r0, r3
 800aa16:	2001      	movne	r0, #1
 800aa18:	b950      	cbnz	r0, 800aa30 <f_findnext+0x36>
 800aa1a:	7ea3      	ldrb	r3, [r4, #26]
 800aa1c:	b143      	cbz	r3, 800aa30 <f_findnext+0x36>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800aa1e:	2300      	movs	r3, #0
 800aa20:	461a      	mov	r2, r3
 800aa22:	f104 011a 	add.w	r1, r4, #26
 800aa26:	6d28      	ldr	r0, [r5, #80]	; 0x50
 800aa28:	f7fd fd82 	bl	8008530 <pattern_matching>
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	d0e7      	beq.n	800aa00 <f_findnext+0x6>
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 800aa30:	4630      	mov	r0, r6
 800aa32:	bd70      	pop	{r4, r5, r6, pc}

0800aa34 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800aa34:	b538      	push	{r3, r4, r5, lr}
 800aa36:	4604      	mov	r4, r0
 800aa38:	460d      	mov	r5, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800aa3a:	6503      	str	r3, [r0, #80]	; 0x50
	res = f_opendir(dp, path);		/* Open the target directory */
 800aa3c:	4611      	mov	r1, r2
 800aa3e:	f7ff ff28 	bl	800a892 <f_opendir>
	if (res == FR_OK) {
 800aa42:	4603      	mov	r3, r0
 800aa44:	b108      	cbz	r0, 800aa4a <f_findfirst+0x16>
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	bd38      	pop	{r3, r4, r5, pc}
		res = f_findnext(dp, fno);	/* Find the first item */
 800aa4a:	4629      	mov	r1, r5
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	f7ff ffd4 	bl	800a9fa <f_findnext>
 800aa52:	4603      	mov	r3, r0
 800aa54:	e7f7      	b.n	800aa46 <f_findfirst+0x12>
	...

0800aa58 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800aa58:	4b10      	ldr	r3, [pc, #64]	; (800aa9c <FATFS_LinkDriverEx+0x44>)
 800aa5a:	7a5b      	ldrb	r3, [r3, #9]
 800aa5c:	b9db      	cbnz	r3, 800aa96 <FATFS_LinkDriverEx+0x3e>
{
 800aa5e:	b430      	push	{r4, r5}
  {
    disk.is_initialized[disk.nbr] = 0;
 800aa60:	4b0e      	ldr	r3, [pc, #56]	; (800aa9c <FATFS_LinkDriverEx+0x44>)
 800aa62:	7a5d      	ldrb	r5, [r3, #9]
 800aa64:	b2ed      	uxtb	r5, r5
 800aa66:	2400      	movs	r4, #0
 800aa68:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 800aa6a:	7a5d      	ldrb	r5, [r3, #9]
 800aa6c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800aa70:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 800aa72:	7a58      	ldrb	r0, [r3, #9]
 800aa74:	4418      	add	r0, r3
 800aa76:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800aa78:	7a5a      	ldrb	r2, [r3, #9]
 800aa7a:	b2d2      	uxtb	r2, r2
 800aa7c:	1c50      	adds	r0, r2, #1
 800aa7e:	b2c0      	uxtb	r0, r0
 800aa80:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
 800aa82:	3230      	adds	r2, #48	; 0x30
 800aa84:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800aa86:	233a      	movs	r3, #58	; 0x3a
 800aa88:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800aa8a:	232f      	movs	r3, #47	; 0x2f
 800aa8c:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800aa8e:	70cc      	strb	r4, [r1, #3]
    ret = 0;
 800aa90:	4620      	mov	r0, r4
  }

  return ret;
}
 800aa92:	bc30      	pop	{r4, r5}
 800aa94:	4770      	bx	lr
  uint8_t ret = 1;
 800aa96:	2001      	movs	r0, #1
}
 800aa98:	4770      	bx	lr
 800aa9a:	bf00      	nop
 800aa9c:	2000013c 	.word	0x2000013c

0800aaa0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800aaa0:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f7ff ffd8 	bl	800aa58 <FATFS_LinkDriverEx>
}
 800aaa8:	bd08      	pop	{r3, pc}
	...

0800aaac <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800aaac:	287f      	cmp	r0, #127	; 0x7f
 800aaae:	d916      	bls.n	800aade <ff_convert+0x32>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800aab0:	b131      	cbz	r1, 800aac0 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800aab2:	28ff      	cmp	r0, #255	; 0xff
 800aab4:	d812      	bhi.n	800aadc <ff_convert+0x30>
 800aab6:	3880      	subs	r0, #128	; 0x80
 800aab8:	4b09      	ldr	r3, [pc, #36]	; (800aae0 <ff_convert+0x34>)
 800aaba:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800aabe:	4770      	bx	lr

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800aac0:	2300      	movs	r3, #0
 800aac2:	2b7f      	cmp	r3, #127	; 0x7f
 800aac4:	d807      	bhi.n	800aad6 <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 800aac6:	4a06      	ldr	r2, [pc, #24]	; (800aae0 <ff_convert+0x34>)
 800aac8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800aacc:	4282      	cmp	r2, r0
 800aace:	d002      	beq.n	800aad6 <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 800aad0:	3301      	adds	r3, #1
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	e7f5      	b.n	800aac2 <ff_convert+0x16>
			}
			c = (c + 0x80) & 0xFF;
 800aad6:	3380      	adds	r3, #128	; 0x80
 800aad8:	b2d8      	uxtb	r0, r3
 800aada:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800aadc:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800aade:	4770      	bx	lr
 800aae0:	0800f8d4 	.word	0x0800f8d4

0800aae4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800aae4:	b4f0      	push	{r4, r5, r6, r7}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800aae6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800aaea:	d201      	bcs.n	800aaf0 <ff_wtoupper+0xc>
 800aaec:	4b21      	ldr	r3, [pc, #132]	; (800ab74 <ff_wtoupper+0x90>)
 800aaee:	e002      	b.n	800aaf6 <ff_wtoupper+0x12>
 800aaf0:	4b21      	ldr	r3, [pc, #132]	; (800ab78 <ff_wtoupper+0x94>)
 800aaf2:	e000      	b.n	800aaf6 <ff_wtoupper+0x12>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800aaf4:	462b      	mov	r3, r5
		bc = *p++;								/* Get block base */
 800aaf6:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 800aaf8:	4290      	cmp	r0, r2
 800aafa:	bf2c      	ite	cs
 800aafc:	2100      	movcs	r1, #0
 800aafe:	2101      	movcc	r1, #1
 800ab00:	2a00      	cmp	r2, #0
 800ab02:	bf08      	it	eq
 800ab04:	2101      	moveq	r1, #1
 800ab06:	b9b9      	cbnz	r1, 800ab38 <ff_wtoupper+0x54>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ab08:	1d1d      	adds	r5, r3, #4
 800ab0a:	885b      	ldrh	r3, [r3, #2]
 800ab0c:	0a19      	lsrs	r1, r3, #8
 800ab0e:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 800ab10:	189c      	adds	r4, r3, r2
 800ab12:	42a0      	cmp	r0, r4
 800ab14:	db04      	blt.n	800ab20 <ff_wtoupper+0x3c>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800ab16:	2900      	cmp	r1, #0
 800ab18:	d1ec      	bne.n	800aaf4 <ff_wtoupper+0x10>
 800ab1a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800ab1e:	e7ea      	b.n	800aaf6 <ff_wtoupper+0x12>
			switch (cmd) {
 800ab20:	2908      	cmp	r1, #8
 800ab22:	d809      	bhi.n	800ab38 <ff_wtoupper+0x54>
 800ab24:	e8df f001 	tbb	[pc, r1]
 800ab28:	13100a05 	.word	0x13100a05
 800ab2c:	1f1c1916 	.word	0x1f1c1916
 800ab30:	22          	.byte	0x22
 800ab31:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ab32:	1a86      	subs	r6, r0, r2
 800ab34:	f835 0016 	ldrh.w	r0, [r5, r6, lsl #1]
	}

	return chr;
}
 800ab38:	bcf0      	pop	{r4, r5, r6, r7}
 800ab3a:	4770      	bx	lr
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ab3c:	1a82      	subs	r2, r0, r2
 800ab3e:	f002 0301 	and.w	r3, r2, #1
 800ab42:	1ac0      	subs	r0, r0, r3
 800ab44:	b280      	uxth	r0, r0
 800ab46:	e7f7      	b.n	800ab38 <ff_wtoupper+0x54>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ab48:	3810      	subs	r0, #16
 800ab4a:	b280      	uxth	r0, r0
 800ab4c:	e7f4      	b.n	800ab38 <ff_wtoupper+0x54>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ab4e:	3820      	subs	r0, #32
 800ab50:	b280      	uxth	r0, r0
 800ab52:	e7f1      	b.n	800ab38 <ff_wtoupper+0x54>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ab54:	3830      	subs	r0, #48	; 0x30
 800ab56:	b280      	uxth	r0, r0
 800ab58:	e7ee      	b.n	800ab38 <ff_wtoupper+0x54>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ab5a:	381a      	subs	r0, #26
 800ab5c:	b280      	uxth	r0, r0
 800ab5e:	e7eb      	b.n	800ab38 <ff_wtoupper+0x54>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ab60:	3008      	adds	r0, #8
 800ab62:	b280      	uxth	r0, r0
 800ab64:	e7e8      	b.n	800ab38 <ff_wtoupper+0x54>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ab66:	3850      	subs	r0, #80	; 0x50
 800ab68:	b280      	uxth	r0, r0
 800ab6a:	e7e5      	b.n	800ab38 <ff_wtoupper+0x54>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ab6c:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 800ab70:	b280      	uxth	r0, r0
 800ab72:	e7e1      	b.n	800ab38 <ff_wtoupper+0x54>
 800ab74:	0800f9d4 	.word	0x0800f9d4
 800ab78:	0800fbc8 	.word	0x0800fbc8

0800ab7c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800ab7c:	b510      	push	{r4, lr}
 800ab7e:	b08a      	sub	sp, #40	; 0x28
  ADC_MultiModeTypeDef multimode = {0};
 800ab80:	2300      	movs	r3, #0
 800ab82:	9307      	str	r3, [sp, #28]
 800ab84:	9308      	str	r3, [sp, #32]
 800ab86:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 800ab88:	9300      	str	r3, [sp, #0]
 800ab8a:	9301      	str	r3, [sp, #4]
 800ab8c:	9302      	str	r3, [sp, #8]
 800ab8e:	9303      	str	r3, [sp, #12]
 800ab90:	9304      	str	r3, [sp, #16]
 800ab92:	9305      	str	r3, [sp, #20]
 800ab94:	9306      	str	r3, [sp, #24]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800ab96:	4871      	ldr	r0, [pc, #452]	; (800ad5c <MX_ADC1_Init+0x1e0>)
 800ab98:	4a71      	ldr	r2, [pc, #452]	; (800ad60 <MX_ADC1_Init+0x1e4>)
 800ab9a:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800ab9c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800aba0:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800aba2:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800aba4:	2201      	movs	r2, #1
 800aba6:	60c2      	str	r2, [r0, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800aba8:	2108      	movs	r1, #8
 800abaa:	6101      	str	r1, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800abac:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800abae:	7542      	strb	r2, [r0, #21]
  hadc1.Init.NbrOfConversion = 12;
 800abb0:	210c      	movs	r1, #12
 800abb2:	6181      	str	r1, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800abb4:	7703      	strb	r3, [r0, #28]
  hadc1.Init.NbrOfDiscConversion = 4;
 800abb6:	2104      	movs	r1, #4
 800abb8:	6201      	str	r1, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800abba:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800abbc:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800abbe:	2403      	movs	r4, #3
 800abc0:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800abc2:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800abc4:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 800abc6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = 4;
 800abca:	63c1      	str	r1, [r0, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 800abcc:	2140      	movs	r1, #64	; 0x40
 800abce:	6401      	str	r1, [r0, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800abd0:	6443      	str	r3, [r0, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800abd2:	6482      	str	r2, [r0, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800abd4:	f7f6 f9ee 	bl	8000fb4 <HAL_ADC_Init>
 800abd8:	2800      	cmp	r0, #0
 800abda:	f040 8094 	bne.w	800ad06 <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800abde:	a90a      	add	r1, sp, #40	; 0x28
 800abe0:	2300      	movs	r3, #0
 800abe2:	f841 3d0c 	str.w	r3, [r1, #-12]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800abe6:	485d      	ldr	r0, [pc, #372]	; (800ad5c <MX_ADC1_Init+0x1e0>)
 800abe8:	f7f6 fb22 	bl	8001230 <HAL_ADCEx_MultiModeConfigChannel>
 800abec:	2800      	cmp	r0, #0
 800abee:	f040 808d 	bne.w	800ad0c <MX_ADC1_Init+0x190>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800abf2:	4b5c      	ldr	r3, [pc, #368]	; (800ad64 <MX_ADC1_Init+0x1e8>)
 800abf4:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800abf6:	2306      	movs	r3, #6
 800abf8:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 800abfa:	2304      	movs	r3, #4
 800abfc:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800abfe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ac02:	9203      	str	r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800ac04:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 32768;
 800ac06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac0a:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ac0c:	4669      	mov	r1, sp
 800ac0e:	4853      	ldr	r0, [pc, #332]	; (800ad5c <MX_ADC1_Init+0x1e0>)
 800ac10:	f7f5 fdc8 	bl	80007a4 <HAL_ADC_ConfigChannel>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	d17c      	bne.n	800ad12 <MX_ADC1_Init+0x196>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800ac18:	4b53      	ldr	r3, [pc, #332]	; (800ad68 <MX_ADC1_Init+0x1ec>)
 800ac1a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800ac1c:	230c      	movs	r3, #12
 800ac1e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ac20:	4669      	mov	r1, sp
 800ac22:	484e      	ldr	r0, [pc, #312]	; (800ad5c <MX_ADC1_Init+0x1e0>)
 800ac24:	f7f5 fdbe 	bl	80007a4 <HAL_ADC_ConfigChannel>
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	d175      	bne.n	800ad18 <MX_ADC1_Init+0x19c>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800ac2c:	4b4f      	ldr	r3, [pc, #316]	; (800ad6c <MX_ADC1_Init+0x1f0>)
 800ac2e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800ac30:	2312      	movs	r3, #18
 800ac32:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ac34:	4669      	mov	r1, sp
 800ac36:	4849      	ldr	r0, [pc, #292]	; (800ad5c <MX_ADC1_Init+0x1e0>)
 800ac38:	f7f5 fdb4 	bl	80007a4 <HAL_ADC_ConfigChannel>
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	d16e      	bne.n	800ad1e <MX_ADC1_Init+0x1a2>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800ac40:	4b4b      	ldr	r3, [pc, #300]	; (800ad70 <MX_ADC1_Init+0x1f4>)
 800ac42:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800ac44:	2318      	movs	r3, #24
 800ac46:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ac48:	4669      	mov	r1, sp
 800ac4a:	4844      	ldr	r0, [pc, #272]	; (800ad5c <MX_ADC1_Init+0x1e0>)
 800ac4c:	f7f5 fdaa 	bl	80007a4 <HAL_ADC_ConfigChannel>
 800ac50:	2800      	cmp	r0, #0
 800ac52:	d167      	bne.n	800ad24 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800ac54:	4b47      	ldr	r3, [pc, #284]	; (800ad74 <MX_ADC1_Init+0x1f8>)
 800ac56:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800ac58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac5c:	9301      	str	r3, [sp, #4]
  sConfig.Offset = 0;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ac62:	4669      	mov	r1, sp
 800ac64:	483d      	ldr	r0, [pc, #244]	; (800ad5c <MX_ADC1_Init+0x1e0>)
 800ac66:	f7f5 fd9d 	bl	80007a4 <HAL_ADC_ConfigChannel>
 800ac6a:	2800      	cmp	r0, #0
 800ac6c:	d15d      	bne.n	800ad2a <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800ac6e:	4b42      	ldr	r3, [pc, #264]	; (800ad78 <MX_ADC1_Init+0x1fc>)
 800ac70:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800ac72:	f44f 7383 	mov.w	r3, #262	; 0x106
 800ac76:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ac78:	4669      	mov	r1, sp
 800ac7a:	4838      	ldr	r0, [pc, #224]	; (800ad5c <MX_ADC1_Init+0x1e0>)
 800ac7c:	f7f5 fd92 	bl	80007a4 <HAL_ADC_ConfigChannel>
 800ac80:	2800      	cmp	r0, #0
 800ac82:	d155      	bne.n	800ad30 <MX_ADC1_Init+0x1b4>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800ac84:	4b3d      	ldr	r3, [pc, #244]	; (800ad7c <MX_ADC1_Init+0x200>)
 800ac86:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800ac88:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800ac8c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ac8e:	4669      	mov	r1, sp
 800ac90:	4832      	ldr	r0, [pc, #200]	; (800ad5c <MX_ADC1_Init+0x1e0>)
 800ac92:	f7f5 fd87 	bl	80007a4 <HAL_ADC_ConfigChannel>
 800ac96:	2800      	cmp	r0, #0
 800ac98:	d14d      	bne.n	800ad36 <MX_ADC1_Init+0x1ba>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800ac9a:	4b39      	ldr	r3, [pc, #228]	; (800ad80 <MX_ADC1_Init+0x204>)
 800ac9c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800ac9e:	f44f 7389 	mov.w	r3, #274	; 0x112
 800aca2:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800aca4:	4669      	mov	r1, sp
 800aca6:	482d      	ldr	r0, [pc, #180]	; (800ad5c <MX_ADC1_Init+0x1e0>)
 800aca8:	f7f5 fd7c 	bl	80007a4 <HAL_ADC_ConfigChannel>
 800acac:	2800      	cmp	r0, #0
 800acae:	d145      	bne.n	800ad3c <MX_ADC1_Init+0x1c0>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800acb0:	4b34      	ldr	r3, [pc, #208]	; (800ad84 <MX_ADC1_Init+0x208>)
 800acb2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800acb4:	f44f 738c 	mov.w	r3, #280	; 0x118
 800acb8:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800acba:	4669      	mov	r1, sp
 800acbc:	4827      	ldr	r0, [pc, #156]	; (800ad5c <MX_ADC1_Init+0x1e0>)
 800acbe:	f7f5 fd71 	bl	80007a4 <HAL_ADC_ConfigChannel>
 800acc2:	2800      	cmp	r0, #0
 800acc4:	d13d      	bne.n	800ad42 <MX_ADC1_Init+0x1c6>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800acc6:	4b30      	ldr	r3, [pc, #192]	; (800ad88 <MX_ADC1_Init+0x20c>)
 800acc8:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800acca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acce:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800acd0:	4669      	mov	r1, sp
 800acd2:	4822      	ldr	r0, [pc, #136]	; (800ad5c <MX_ADC1_Init+0x1e0>)
 800acd4:	f7f5 fd66 	bl	80007a4 <HAL_ADC_ConfigChannel>
 800acd8:	bbb0      	cbnz	r0, 800ad48 <MX_ADC1_Init+0x1cc>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_18;
 800acda:	4b2c      	ldr	r3, [pc, #176]	; (800ad8c <MX_ADC1_Init+0x210>)
 800acdc:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800acde:	f240 2306 	movw	r3, #518	; 0x206
 800ace2:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ace4:	4669      	mov	r1, sp
 800ace6:	481d      	ldr	r0, [pc, #116]	; (800ad5c <MX_ADC1_Init+0x1e0>)
 800ace8:	f7f5 fd5c 	bl	80007a4 <HAL_ADC_ConfigChannel>
 800acec:	bb78      	cbnz	r0, 800ad4e <MX_ADC1_Init+0x1d2>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_19;
 800acee:	4b28      	ldr	r3, [pc, #160]	; (800ad90 <MX_ADC1_Init+0x214>)
 800acf0:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 800acf2:	f44f 7303 	mov.w	r3, #524	; 0x20c
 800acf6:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800acf8:	4669      	mov	r1, sp
 800acfa:	4818      	ldr	r0, [pc, #96]	; (800ad5c <MX_ADC1_Init+0x1e0>)
 800acfc:	f7f5 fd52 	bl	80007a4 <HAL_ADC_ConfigChannel>
 800ad00:	bb40      	cbnz	r0, 800ad54 <MX_ADC1_Init+0x1d8>
  {
    Error_Handler();
  }

}
 800ad02:	b00a      	add	sp, #40	; 0x28
 800ad04:	bd10      	pop	{r4, pc}
    Error_Handler();
 800ad06:	f001 fa07 	bl	800c118 <Error_Handler>
 800ad0a:	e768      	b.n	800abde <MX_ADC1_Init+0x62>
    Error_Handler();
 800ad0c:	f001 fa04 	bl	800c118 <Error_Handler>
 800ad10:	e76f      	b.n	800abf2 <MX_ADC1_Init+0x76>
    Error_Handler();
 800ad12:	f001 fa01 	bl	800c118 <Error_Handler>
 800ad16:	e77f      	b.n	800ac18 <MX_ADC1_Init+0x9c>
    Error_Handler();
 800ad18:	f001 f9fe 	bl	800c118 <Error_Handler>
 800ad1c:	e786      	b.n	800ac2c <MX_ADC1_Init+0xb0>
    Error_Handler();
 800ad1e:	f001 f9fb 	bl	800c118 <Error_Handler>
 800ad22:	e78d      	b.n	800ac40 <MX_ADC1_Init+0xc4>
    Error_Handler();
 800ad24:	f001 f9f8 	bl	800c118 <Error_Handler>
 800ad28:	e794      	b.n	800ac54 <MX_ADC1_Init+0xd8>
    Error_Handler();
 800ad2a:	f001 f9f5 	bl	800c118 <Error_Handler>
 800ad2e:	e79e      	b.n	800ac6e <MX_ADC1_Init+0xf2>
    Error_Handler();
 800ad30:	f001 f9f2 	bl	800c118 <Error_Handler>
 800ad34:	e7a6      	b.n	800ac84 <MX_ADC1_Init+0x108>
    Error_Handler();
 800ad36:	f001 f9ef 	bl	800c118 <Error_Handler>
 800ad3a:	e7ae      	b.n	800ac9a <MX_ADC1_Init+0x11e>
    Error_Handler();
 800ad3c:	f001 f9ec 	bl	800c118 <Error_Handler>
 800ad40:	e7b6      	b.n	800acb0 <MX_ADC1_Init+0x134>
    Error_Handler();
 800ad42:	f001 f9e9 	bl	800c118 <Error_Handler>
 800ad46:	e7be      	b.n	800acc6 <MX_ADC1_Init+0x14a>
    Error_Handler();
 800ad48:	f001 f9e6 	bl	800c118 <Error_Handler>
 800ad4c:	e7c5      	b.n	800acda <MX_ADC1_Init+0x15e>
    Error_Handler();
 800ad4e:	f001 f9e3 	bl	800c118 <Error_Handler>
 800ad52:	e7cc      	b.n	800acee <MX_ADC1_Init+0x172>
    Error_Handler();
 800ad54:	f001 f9e0 	bl	800c118 <Error_Handler>
}
 800ad58:	e7d3      	b.n	800ad02 <MX_ADC1_Init+0x186>
 800ad5a:	bf00      	nop
 800ad5c:	20000194 	.word	0x20000194
 800ad60:	40022000 	.word	0x40022000
 800ad64:	25b00200 	.word	0x25b00200
 800ad68:	14f00020 	.word	0x14f00020
 800ad6c:	10c00010 	.word	0x10c00010
 800ad70:	21800100 	.word	0x21800100
 800ad74:	0c900008 	.word	0x0c900008
 800ad78:	1d500080 	.word	0x1d500080
 800ad7c:	3ef08000 	.word	0x3ef08000
 800ad80:	3ac04000 	.word	0x3ac04000
 800ad84:	47520000 	.word	0x47520000
 800ad88:	43210000 	.word	0x43210000
 800ad8c:	4b840000 	.word	0x4b840000
 800ad90:	4fb80000 	.word	0x4fb80000

0800ad94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800ad94:	b570      	push	{r4, r5, r6, lr}
 800ad96:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad98:	2300      	movs	r3, #0
 800ad9a:	9305      	str	r3, [sp, #20]
 800ad9c:	9306      	str	r3, [sp, #24]
 800ad9e:	9307      	str	r3, [sp, #28]
 800ada0:	9308      	str	r3, [sp, #32]
 800ada2:	9309      	str	r3, [sp, #36]	; 0x24
  if(adcHandle->Instance==ADC1)
 800ada4:	6802      	ldr	r2, [r0, #0]
 800ada6:	4b3a      	ldr	r3, [pc, #232]	; (800ae90 <HAL_ADC_MspInit+0xfc>)
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d001      	beq.n	800adb0 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800adac:	b00a      	add	sp, #40	; 0x28
 800adae:	bd70      	pop	{r4, r5, r6, pc}
 800adb0:	4604      	mov	r4, r0
    __HAL_RCC_ADC12_CLK_ENABLE();
 800adb2:	4b38      	ldr	r3, [pc, #224]	; (800ae94 <HAL_ADC_MspInit+0x100>)
 800adb4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800adb8:	f042 0220 	orr.w	r2, r2, #32
 800adbc:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800adc0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800adc4:	f002 0220 	and.w	r2, r2, #32
 800adc8:	9201      	str	r2, [sp, #4]
 800adca:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800adcc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800add0:	f042 0201 	orr.w	r2, r2, #1
 800add4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800add8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800addc:	f002 0201 	and.w	r2, r2, #1
 800ade0:	9202      	str	r2, [sp, #8]
 800ade2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ade4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ade8:	f042 0204 	orr.w	r2, r2, #4
 800adec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800adf0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800adf4:	f002 0204 	and.w	r2, r2, #4
 800adf8:	9203      	str	r2, [sp, #12]
 800adfa:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800adfc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ae00:	f042 0202 	orr.w	r2, r2, #2
 800ae04:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800ae08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae0c:	f003 0302 	and.w	r3, r3, #2
 800ae10:	9304      	str	r3, [sp, #16]
 800ae12:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800ae14:	23ff      	movs	r3, #255	; 0xff
 800ae16:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ae18:	2603      	movs	r6, #3
 800ae1a:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae1c:	a905      	add	r1, sp, #20
 800ae1e:	481e      	ldr	r0, [pc, #120]	; (800ae98 <HAL_ADC_MspInit+0x104>)
 800ae20:	f7f7 ff28 	bl	8002c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800ae24:	2330      	movs	r3, #48	; 0x30
 800ae26:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ae28:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae2a:	2500      	movs	r5, #0
 800ae2c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ae2e:	a905      	add	r1, sp, #20
 800ae30:	481a      	ldr	r0, [pc, #104]	; (800ae9c <HAL_ADC_MspInit+0x108>)
 800ae32:	f7f7 ff1f 	bl	8002c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800ae36:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ae38:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae3a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ae3c:	a905      	add	r1, sp, #20
 800ae3e:	4818      	ldr	r0, [pc, #96]	; (800aea0 <HAL_ADC_MspInit+0x10c>)
 800ae40:	f7f7 ff18 	bl	8002c74 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 800ae44:	4817      	ldr	r0, [pc, #92]	; (800aea4 <HAL_ADC_MspInit+0x110>)
 800ae46:	4b18      	ldr	r3, [pc, #96]	; (800aea8 <HAL_ADC_MspInit+0x114>)
 800ae48:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800ae4a:	2309      	movs	r3, #9
 800ae4c:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ae4e:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800ae50:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800ae52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae56:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ae58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae5c:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800ae5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ae62:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800ae64:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae68:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800ae6a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800ae6e:	6203      	str	r3, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800ae70:	2304      	movs	r3, #4
 800ae72:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800ae74:	6286      	str	r6, [r0, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 800ae76:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800ae78:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800ae7a:	f7f6 fd5d 	bl	8001938 <HAL_DMA_Init>
 800ae7e:	b918      	cbnz	r0, 800ae88 <HAL_ADC_MspInit+0xf4>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800ae80:	4b08      	ldr	r3, [pc, #32]	; (800aea4 <HAL_ADC_MspInit+0x110>)
 800ae82:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ae84:	639c      	str	r4, [r3, #56]	; 0x38
}
 800ae86:	e791      	b.n	800adac <HAL_ADC_MspInit+0x18>
      Error_Handler();
 800ae88:	f001 f946 	bl	800c118 <Error_Handler>
 800ae8c:	e7f8      	b.n	800ae80 <HAL_ADC_MspInit+0xec>
 800ae8e:	bf00      	nop
 800ae90:	40022000 	.word	0x40022000
 800ae94:	58024400 	.word	0x58024400
 800ae98:	58020000 	.word	0x58020000
 800ae9c:	58020800 	.word	0x58020800
 800aea0:	58020400 	.word	0x58020400
 800aea4:	200001f8 	.word	0x200001f8
 800aea8:	40020010 	.word	0x40020010

0800aeac <audioInit>:
uint32_t half_numWaves = 0;
tSVF lowpasses[2];


void audioInit(I2C_HandleTypeDef* hi2c, SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 800aeac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb0:	b083      	sub	sp, #12
 800aeb2:	4683      	mov	fp, r0
 800aeb4:	4689      	mov	r9, r1
 800aeb6:	4690      	mov	r8, r2
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, AUDIO_FRAME_SIZE, smallMemory, SMALL_MEM_SIZE, &randomNumber);
 800aeb8:	4c4d      	ldr	r4, [pc, #308]	; (800aff0 <audioInit+0x144>)
 800aeba:	4b4e      	ldr	r3, [pc, #312]	; (800aff4 <audioInit+0x148>)
 800aebc:	9300      	str	r3, [sp, #0]
 800aebe:	f64e 2360 	movw	r3, #60000	; 0xea60
 800aec2:	4a4d      	ldr	r2, [pc, #308]	; (800aff8 <audioInit+0x14c>)
 800aec4:	2120      	movs	r1, #32
 800aec6:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800affc <audioInit+0x150>
 800aeca:	4620      	mov	r0, r4
 800aecc:	f003 fdae 	bl	800ea2c <LEAF_init>

	tMempool_init (&mediumPool, mediumMemory, MEDIUM_MEM_SIZE, &leaf);
 800aed0:	4623      	mov	r3, r4
 800aed2:	4a4b      	ldr	r2, [pc, #300]	; (800b000 <audioInit+0x154>)
 800aed4:	494b      	ldr	r1, [pc, #300]	; (800b004 <audioInit+0x158>)
 800aed6:	484c      	ldr	r0, [pc, #304]	; (800b008 <audioInit+0x15c>)
 800aed8:	f002 fc09 	bl	800d6ee <tMempool_init>
	//tMempool_init (&largePool, largeMemory, LARGE_MEM_SIZE, &leaf);

	HAL_Delay(10);
 800aedc:	200a      	movs	r0, #10
 800aede:	f7f5 fbe3 	bl	80006a8 <HAL_Delay>
	leaf.clearOnAllocation = 1;
 800aee2:	2301      	movs	r3, #1
 800aee4:	6163      	str	r3, [r4, #20]
	half_numWaves = numWaves / 2;
 800aee6:	4b49      	ldr	r3, [pc, #292]	; (800b00c <audioInit+0x160>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	085b      	lsrs	r3, r3, #1
 800aeec:	4a48      	ldr	r2, [pc, #288]	; (800b010 <audioInit+0x164>)
 800aeee:	6013      	str	r3, [r2, #0]


	for (int i = 0; i< MAX_WAV_FILES; i++)
 800aef0:	2400      	movs	r4, #0
 800aef2:	e018      	b.n	800af26 <audioInit+0x7a>
		tBuffer_initToPool(&myWaves[i], 1, &mediumPool, &leaf);
		if (numWaves > i)
		{
			tBuffer_setBuffer(&myWaves[i], &largeMemory[waves[i][0]], waves[i][3], waves[i][1], waves[i][2]);
		}
		tSampler_initToPool(&mySamplers[i], &myWaves[i], &mediumPool, &leaf);
 800aef4:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 800aef8:	4e46      	ldr	r6, [pc, #280]	; (800b014 <audioInit+0x168>)
 800aefa:	4456      	add	r6, sl
 800aefc:	4f3c      	ldr	r7, [pc, #240]	; (800aff0 <audioInit+0x144>)
 800aefe:	463b      	mov	r3, r7
 800af00:	4a41      	ldr	r2, [pc, #260]	; (800b008 <audioInit+0x15c>)
 800af02:	4629      	mov	r1, r5
 800af04:	4630      	mov	r0, r6
 800af06:	f002 fc4f 	bl	800d7a8 <tSampler_initToPool>
		tSampler_setMode(&mySamplers[i], PlayNormal);
 800af0a:	2100      	movs	r1, #0
 800af0c:	4630      	mov	r0, r6
 800af0e:	f002 fcb9 	bl	800d884 <tSampler_setMode>
		tExpSmooth_init(&sampleGains[i], 0.0f, 0.01f, &leaf);
 800af12:	4639      	mov	r1, r7
 800af14:	eddf 0a40 	vldr	s1, [pc, #256]	; 800b018 <audioInit+0x16c>
 800af18:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800b01c <audioInit+0x170>
 800af1c:	4840      	ldr	r0, [pc, #256]	; (800b020 <audioInit+0x174>)
 800af1e:	4450      	add	r0, sl
 800af20:	f002 f9fa 	bl	800d318 <tExpSmooth_init>
	for (int i = 0; i< MAX_WAV_FILES; i++)
 800af24:	3401      	adds	r4, #1
 800af26:	2cff      	cmp	r4, #255	; 0xff
 800af28:	dc1b      	bgt.n	800af62 <audioInit+0xb6>
		tBuffer_initToPool(&myWaves[i], 1, &mediumPool, &leaf);
 800af2a:	4d3e      	ldr	r5, [pc, #248]	; (800b024 <audioInit+0x178>)
 800af2c:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 800af30:	4b2f      	ldr	r3, [pc, #188]	; (800aff0 <audioInit+0x144>)
 800af32:	4a35      	ldr	r2, [pc, #212]	; (800b008 <audioInit+0x15c>)
 800af34:	2101      	movs	r1, #1
 800af36:	4628      	mov	r0, r5
 800af38:	f002 fc09 	bl	800d74e <tBuffer_initToPool>
		if (numWaves > i)
 800af3c:	4b33      	ldr	r3, [pc, #204]	; (800b00c <audioInit+0x160>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	42a3      	cmp	r3, r4
 800af42:	d9d7      	bls.n	800aef4 <audioInit+0x48>
			tBuffer_setBuffer(&myWaves[i], &largeMemory[waves[i][0]], waves[i][3], waves[i][1], waves[i][2]);
 800af44:	4a38      	ldr	r2, [pc, #224]	; (800b028 <audioInit+0x17c>)
 800af46:	0123      	lsls	r3, r4, #4
 800af48:	18d0      	adds	r0, r2, r3
 800af4a:	58d6      	ldr	r6, [r2, r3]
 800af4c:	68c2      	ldr	r2, [r0, #12]
 800af4e:	6843      	ldr	r3, [r0, #4]
 800af50:	6881      	ldr	r1, [r0, #8]
 800af52:	9100      	str	r1, [sp, #0]
 800af54:	4935      	ldr	r1, [pc, #212]	; (800b02c <audioInit+0x180>)
 800af56:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800af5a:	4628      	mov	r0, r5
 800af5c:	f002 fc1a 	bl	800d794 <tBuffer_setBuffer>
 800af60:	e7c8      	b.n	800aef4 <audioInit+0x48>
	}

	for (int i = 0 ; i < 2; i++)
 800af62:	2400      	movs	r4, #0
 800af64:	e00b      	b.n	800af7e <audioInit+0xd2>
	{
		tSVF_init(&lowpasses[i], SVFTypeLowpass, 18000.0f, 0.5f, &leaf);
 800af66:	4a22      	ldr	r2, [pc, #136]	; (800aff0 <audioInit+0x144>)
 800af68:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800af6c:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800b030 <audioInit+0x184>
 800af70:	2101      	movs	r1, #1
 800af72:	4830      	ldr	r0, [pc, #192]	; (800b034 <audioInit+0x188>)
 800af74:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800af78:	f002 fa5c 	bl	800d434 <tSVF_init>
	for (int i = 0 ; i < 2; i++)
 800af7c:	3401      	adds	r4, #1
 800af7e:	2c01      	cmp	r4, #1
 800af80:	ddf1      	ble.n	800af66 <audioInit+0xba>
	}

	for(int i = 0; i < NUM_ADC_CHANNELS; i++)
 800af82:	2400      	movs	r4, #0
 800af84:	e00a      	b.n	800af9c <audioInit+0xf0>
	{
		tExpSmooth_init(&adcSmooth[i], 0.0f, 0.1f, &leaf);
 800af86:	491a      	ldr	r1, [pc, #104]	; (800aff0 <audioInit+0x144>)
 800af88:	eddf 0a2b 	vldr	s1, [pc, #172]	; 800b038 <audioInit+0x18c>
 800af8c:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800b01c <audioInit+0x170>
 800af90:	482a      	ldr	r0, [pc, #168]	; (800b03c <audioInit+0x190>)
 800af92:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800af96:	f002 f9bf 	bl	800d318 <tExpSmooth_init>
	for(int i = 0; i < NUM_ADC_CHANNELS; i++)
 800af9a:	3401      	adds	r4, #1
 800af9c:	2c0b      	cmp	r4, #11
 800af9e:	ddf2      	ble.n	800af86 <audioInit+0xda>
	}

	leaf.clearOnAllocation = 0;
 800afa0:	2300      	movs	r3, #0
 800afa2:	4a13      	ldr	r2, [pc, #76]	; (800aff0 <audioInit+0x144>)
 800afa4:	6153      	str	r3, [r2, #20]


	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 800afa6:	e004      	b.n	800afb2 <audioInit+0x106>
	{
		audioOutBuffer[i] = 0;
 800afa8:	4a25      	ldr	r2, [pc, #148]	; (800b040 <audioInit+0x194>)
 800afaa:	2100      	movs	r1, #0
 800afac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 800afb0:	3301      	adds	r3, #1
 800afb2:	2b7f      	cmp	r3, #127	; 0x7f
 800afb4:	ddf8      	ble.n	800afa8 <audioInit+0xfc>
	}
	tSampler_play(&mySamplers[0]);
 800afb6:	4817      	ldr	r0, [pc, #92]	; (800b014 <audioInit+0x168>)
 800afb8:	f002 fc68 	bl	800d88c <tSampler_play>

	HAL_Delay(1);
 800afbc:	2001      	movs	r0, #1
 800afbe:	f7f5 fb73 	bl	80006a8 <HAL_Delay>

	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 800afc2:	4c1f      	ldr	r4, [pc, #124]	; (800b040 <audioInit+0x194>)
 800afc4:	2280      	movs	r2, #128	; 0x80
 800afc6:	4621      	mov	r1, r4
 800afc8:	4648      	mov	r0, r9
 800afca:	f7fa ff71 	bl	8005eb0 <HAL_SAI_Transmit_DMA>
 800afce:	4b1d      	ldr	r3, [pc, #116]	; (800b044 <audioInit+0x198>)
 800afd0:	7018      	strb	r0, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 800afd2:	2280      	movs	r2, #128	; 0x80
 800afd4:	f504 7100 	add.w	r1, r4, #512	; 0x200
 800afd8:	4640      	mov	r0, r8
 800afda:	f7fa ffeb 	bl	8005fb4 <HAL_SAI_Receive_DMA>
 800afde:	4b1a      	ldr	r3, [pc, #104]	; (800b048 <audioInit+0x19c>)
 800afe0:	7018      	strb	r0, [r3, #0]
	// I2C setup messages (it seems to use the masterclock input as it's own internal clock for i2c data, etc)
	// so while we used to set up codec before starting SAI, now we need to set up codec afterwards, and set a flag to make sure it's ready


	//now to send all the necessary messages to the codec
	AudioCodec_init(hi2c);
 800afe2:	4658      	mov	r0, fp
 800afe4:	f000 faee 	bl	800b5c4 <AudioCodec_init>

}
 800afe8:	b003      	add	sp, #12
 800afea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afee:	bf00      	nop
 800aff0:	200002a0 	.word	0x200002a0
 800aff4:	0800be55 	.word	0x0800be55
 800aff8:	20000b60 	.word	0x20000b60
 800affc:	473b8000 	.word	0x473b8000
 800b000:	0007eb58 	.word	0x0007eb58
 800b004:	24000000 	.word	0x24000000
 800b008:	200006fc 	.word	0x200006fc
 800b00c:	2000017c 	.word	0x2000017c
 800b010:	20000154 	.word	0x20000154
 800b014:	20000760 	.word	0x20000760
 800b018:	3c23d70a 	.word	0x3c23d70a
 800b01c:	00000000 	.word	0x00000000
 800b020:	2000f5c0 	.word	0x2000f5c0
 800b024:	200002f4 	.word	0x200002f4
 800b028:	20010028 	.word	0x20010028
 800b02c:	60800000 	.word	0x60800000
 800b030:	468ca000 	.word	0x468ca000
 800b034:	200002e8 	.word	0x200002e8
 800b038:	3dcccccd 	.word	0x3dcccccd
 800b03c:	20000700 	.word	0x20000700
 800b040:	30000000 	.word	0x30000000
 800b044:	200002f0 	.word	0x200002f0
 800b048:	200006f8 	.word	0x200006f8

0800b04c <audioTick>:

// CV input jacks 1-4 add to knobs 1-4.
uint64_t sampleNum = 0;
float prevInput[2] = {0.0f, 0.0f};
float audioTick(float* samples)
{
 800b04c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b04e:	ed2d 8b06 	vpush	{d8-d10}
 800b052:	b083      	sub	sp, #12
 800b054:	4606      	mov	r6, r0
*/
	//start of audio code
	float output = 0.0f;
	float input = samples[0];

	for (int i = 0; i < 8; i++)
 800b056:	2400      	movs	r4, #0
 800b058:	e00d      	b.n	800b076 <audioTick+0x2a>
	{
		smoothedADC[i] = 1.0f - tExpSmooth_tick(&adcSmooth[i]);
 800b05a:	00a5      	lsls	r5, r4, #2
 800b05c:	48c9      	ldr	r0, [pc, #804]	; (800b384 <audioTick+0x338>)
 800b05e:	4428      	add	r0, r5
 800b060:	f002 f963 	bl	800d32a <tExpSmooth_tick>
 800b064:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b068:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b06c:	4bc6      	ldr	r3, [pc, #792]	; (800b388 <audioTick+0x33c>)
 800b06e:	442b      	add	r3, r5
 800b070:	ed83 0a00 	vstr	s0, [r3]
	for (int i = 0; i < 8; i++)
 800b074:	3401      	adds	r4, #1
 800b076:	2c07      	cmp	r4, #7
 800b078:	ddef      	ble.n	800b05a <audioTick+0xe>
	}

	for (int i = 8; i < 12; i++)
 800b07a:	2408      	movs	r4, #8
 800b07c:	e009      	b.n	800b092 <audioTick+0x46>
	{
		smoothedADC[i] = tExpSmooth_tick(&adcSmooth[i]);
 800b07e:	00a5      	lsls	r5, r4, #2
 800b080:	48c0      	ldr	r0, [pc, #768]	; (800b384 <audioTick+0x338>)
 800b082:	4428      	add	r0, r5
 800b084:	f002 f951 	bl	800d32a <tExpSmooth_tick>
 800b088:	4bbf      	ldr	r3, [pc, #764]	; (800b388 <audioTick+0x33c>)
 800b08a:	442b      	add	r3, r5
 800b08c:	ed83 0a00 	vstr	s0, [r3]
	for (int i = 8; i < 12; i++)
 800b090:	3401      	adds	r4, #1
 800b092:	2c0b      	cmp	r4, #11
 800b094:	ddf3      	ble.n	800b07e <audioTick+0x32>
	}

	currentSample[0] = LEAF_clip(0, (int)(LEAF_clip(0.0f, smoothedADC[1]+ smoothedADC[9], 1.0f) * half_numWaves * .99f), half_numWaves-1);
 800b096:	4cbc      	ldr	r4, [pc, #752]	; (800b388 <audioTick+0x33c>)
 800b098:	edd4 0a01 	vldr	s1, [r4, #4]
 800b09c:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 800b0a0:	ed9f 8aba 	vldr	s16, [pc, #744]	; 800b38c <audioTick+0x340>
 800b0a4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800b0a8:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800b0ac:	eeb0 0a48 	vmov.f32	s0, s16
 800b0b0:	f002 fa34 	bl	800d51c <LEAF_clip>
 800b0b4:	4db6      	ldr	r5, [pc, #728]	; (800b390 <audioTick+0x344>)
 800b0b6:	edd5 7a00 	vldr	s15, [r5]
 800b0ba:	eef8 0a67 	vcvt.f32.u32	s1, s15
 800b0be:	ee60 0a80 	vmul.f32	s1, s1, s0
 800b0c2:	eddf 8ab4 	vldr	s17, [pc, #720]	; 800b394 <audioTick+0x348>
 800b0c6:	ee60 0aa8 	vmul.f32	s1, s1, s17
 800b0ca:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 800b0ce:	ee17 3a90 	vmov	r3, s15
 800b0d2:	3b01      	subs	r3, #1
 800b0d4:	ee01 3a10 	vmov	s2, r3
 800b0d8:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 800b0dc:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800b0e0:	eeb0 0a48 	vmov.f32	s0, s16
 800b0e4:	f002 fa1a 	bl	800d51c <LEAF_clip>
 800b0e8:	4fab      	ldr	r7, [pc, #684]	; (800b398 <audioTick+0x34c>)
 800b0ea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b0ee:	ed87 0a00 	vstr	s0, [r7]
	currentSample[1] = LEAF_clip(0, (int)(LEAF_clip(0.0f, smoothedADC[5]+ smoothedADC[9], 1.0f) * half_numWaves * .99f), half_numWaves-1) + half_numWaves;
 800b0f2:	edd4 0a05 	vldr	s1, [r4, #20]
 800b0f6:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 800b0fa:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800b0fe:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800b102:	eeb0 0a48 	vmov.f32	s0, s16
 800b106:	f002 fa09 	bl	800d51c <LEAF_clip>
 800b10a:	edd5 7a00 	vldr	s15, [r5]
 800b10e:	eef8 0a67 	vcvt.f32.u32	s1, s15
 800b112:	ee60 0a80 	vmul.f32	s1, s1, s0
 800b116:	ee60 0aa8 	vmul.f32	s1, s1, s17
 800b11a:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 800b11e:	ee17 3a90 	vmov	r3, s15
 800b122:	3b01      	subs	r3, #1
 800b124:	ee01 3a10 	vmov	s2, r3
 800b128:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 800b12c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800b130:	eeb0 0a48 	vmov.f32	s0, s16
 800b134:	f002 f9f2 	bl	800d51c <LEAF_clip>
 800b138:	edd5 7a00 	vldr	s15, [r5]
 800b13c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b140:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b144:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b148:	ed87 0a01 	vstr	s0, [r7, #4]

	for (int i = 0; i < 2; i++)
 800b14c:	2400      	movs	r4, #0
 800b14e:	e01f      	b.n	800b190 <audioTick+0x144>
	{
		if ((samples[i] > 0.5f) && (prevInput[i] < 0.5f))
		{
			//we got a trigger
			tSampler_play(&mySamplers[currentSample[i]]);
 800b150:	4f91      	ldr	r7, [pc, #580]	; (800b398 <audioTick+0x34c>)
 800b152:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 800b156:	4b91      	ldr	r3, [pc, #580]	; (800b39c <audioTick+0x350>)
 800b158:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b15c:	f002 fb96 	bl	800d88c <tSampler_play>
			tExpSmooth_setDest(&sampleGains[currentSample[i]], (LEAF_clip(0.0f, smoothedADC[0 + (i*4)]+ smoothedADC[8], 1.0f)));
 800b160:	f857 7024 	ldr.w	r7, [r7, r4, lsl #2]
 800b164:	4b88      	ldr	r3, [pc, #544]	; (800b388 <audioTick+0x33c>)
 800b166:	eb03 1204 	add.w	r2, r3, r4, lsl #4
 800b16a:	edd2 0a00 	vldr	s1, [r2]
 800b16e:	edd3 7a08 	vldr	s15, [r3, #32]
 800b172:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800b176:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800b17a:	ed9f 0a84 	vldr	s0, [pc, #528]	; 800b38c <audioTick+0x340>
 800b17e:	f002 f9cd 	bl	800d51c <LEAF_clip>
 800b182:	4887      	ldr	r0, [pc, #540]	; (800b3a0 <audioTick+0x354>)
 800b184:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 800b188:	f002 f8cb 	bl	800d322 <tExpSmooth_setDest>
 800b18c:	e017      	b.n	800b1be <audioTick+0x172>
	for (int i = 0; i < 2; i++)
 800b18e:	3401      	adds	r4, #1
 800b190:	2c01      	cmp	r4, #1
 800b192:	dc34      	bgt.n	800b1fe <audioTick+0x1b2>
		if ((samples[i] > 0.5f) && (prevInput[i] < 0.5f))
 800b194:	eb06 0584 	add.w	r5, r6, r4, lsl #2
 800b198:	ed95 7a00 	vldr	s14, [r5]
 800b19c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b1a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b1a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1a8:	dd09      	ble.n	800b1be <audioTick+0x172>
 800b1aa:	4b7e      	ldr	r3, [pc, #504]	; (800b3a4 <audioTick+0x358>)
 800b1ac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b1b0:	ed93 7a00 	vldr	s14, [r3]
 800b1b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b1b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1bc:	d4c8      	bmi.n	800b150 <audioTick+0x104>
		}


		if (mode[0] > 0)
 800b1be:	4b7a      	ldr	r3, [pc, #488]	; (800b3a8 <audioTick+0x35c>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	dde3      	ble.n	800b18e <audioTick+0x142>
		{
			if ((samples[i] < -0.1f) && (prevInput[i] > -0.1f))
 800b1c6:	ed95 7a00 	vldr	s14, [r5]
 800b1ca:	eddf 7a78 	vldr	s15, [pc, #480]	; 800b3ac <audioTick+0x360>
 800b1ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1d6:	d5da      	bpl.n	800b18e <audioTick+0x142>
 800b1d8:	4b72      	ldr	r3, [pc, #456]	; (800b3a4 <audioTick+0x358>)
 800b1da:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b1de:	ed93 7a00 	vldr	s14, [r3]
 800b1e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b1e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ea:	ddd0      	ble.n	800b18e <audioTick+0x142>
			{
				tSampler_stop(&mySamplers[currentSample[i]]);
 800b1ec:	4b6a      	ldr	r3, [pc, #424]	; (800b398 <audioTick+0x34c>)
 800b1ee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b1f2:	4b6a      	ldr	r3, [pc, #424]	; (800b39c <audioTick+0x350>)
 800b1f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b1f8:	f002 fb9c 	bl	800d934 <tSampler_stop>
 800b1fc:	e7c7      	b.n	800b18e <audioTick+0x142>
			}
		}
	}


	prevInput[0] = samples[0];
 800b1fe:	6832      	ldr	r2, [r6, #0]
 800b200:	4b68      	ldr	r3, [pc, #416]	; (800b3a4 <audioTick+0x358>)
 800b202:	601a      	str	r2, [r3, #0]
	prevInput[1] = samples[1];
 800b204:	6872      	ldr	r2, [r6, #4]
 800b206:	605a      	str	r2, [r3, #4]


	float tempRate[2];

	tempRate[0] = LEAF_clip(0.0f, smoothedADC[2] + smoothedADC[10], 1.0f) * 4.0f;
 800b208:	4c5f      	ldr	r4, [pc, #380]	; (800b388 <audioTick+0x33c>)
 800b20a:	edd4 0a02 	vldr	s1, [r4, #8]
 800b20e:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 800b212:	ed9f 9a5e 	vldr	s18, [pc, #376]	; 800b38c <audioTick+0x340>
 800b216:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800b21a:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800b21e:	eeb0 0a49 	vmov.f32	s0, s18
 800b222:	f002 f97b 	bl	800d51c <LEAF_clip>
 800b226:	eeb1 8a00 	vmov.f32	s16, #16	; 0x40800000  4.0
 800b22a:	ee60 8a08 	vmul.f32	s17, s0, s16
	tempRate[1] = LEAF_clip(0.0f, smoothedADC[6] + smoothedADC[11], 1.0f) * 4.0f;
 800b22e:	edd4 0a06 	vldr	s1, [r4, #24]
 800b232:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800b236:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800b23a:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800b23e:	eeb0 0a49 	vmov.f32	s0, s18
 800b242:	f002 f96b 	bl	800d51c <LEAF_clip>
 800b246:	ee20 8a08 	vmul.f32	s16, s0, s16

	tSVF_setFreq(&lowpasses[0], LEAF_clip(0.001f, tempRate[0], 0.99f) * 18000.0f);
 800b24a:	ed9f aa52 	vldr	s20, [pc, #328]	; 800b394 <audioTick+0x348>
 800b24e:	eddf 9a58 	vldr	s19, [pc, #352]	; 800b3b0 <audioTick+0x364>
 800b252:	eeb0 1a4a 	vmov.f32	s2, s20
 800b256:	eef0 0a68 	vmov.f32	s1, s17
 800b25a:	eeb0 0a69 	vmov.f32	s0, s19
 800b25e:	f002 f95d 	bl	800d51c <LEAF_clip>
 800b262:	ed9f 9a54 	vldr	s18, [pc, #336]	; 800b3b4 <audioTick+0x368>
 800b266:	4c54      	ldr	r4, [pc, #336]	; (800b3b8 <audioTick+0x36c>)
 800b268:	ee20 0a09 	vmul.f32	s0, s0, s18
 800b26c:	4620      	mov	r0, r4
 800b26e:	f002 f929 	bl	800d4c4 <tSVF_setFreq>
	tSVF_setFreq(&lowpasses[1], LEAF_clip(0.001f, tempRate[1], 0.99f) * 18000.0f);
 800b272:	eeb0 1a4a 	vmov.f32	s2, s20
 800b276:	eef0 0a48 	vmov.f32	s1, s16
 800b27a:	eeb0 0a69 	vmov.f32	s0, s19
 800b27e:	f002 f94d 	bl	800d51c <LEAF_clip>
 800b282:	ee20 0a09 	vmul.f32	s0, s0, s18
 800b286:	1d20      	adds	r0, r4, #4
 800b288:	f002 f91c 	bl	800d4c4 <tSVF_setFreq>
	for (int i = 0; i < numWaves; i++)
 800b28c:	2400      	movs	r4, #0
 800b28e:	e00b      	b.n	800b2a8 <audioTick+0x25c>
	{
		if ((mySamplers[i]->active != 0) || (mySamplers[i]->retrigger == 1))
		{

			if (i < half_numWaves)
 800b290:	4b3f      	ldr	r3, [pc, #252]	; (800b390 <audioTick+0x344>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	428b      	cmp	r3, r1
 800b296:	d916      	bls.n	800b2c6 <audioTick+0x27a>
			{
				tSampler_setRate(&mySamplers[i], tempRate[0]);
 800b298:	eeb0 0a68 	vmov.f32	s0, s17
 800b29c:	483f      	ldr	r0, [pc, #252]	; (800b39c <audioTick+0x350>)
 800b29e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800b2a2:	f003 fba5 	bl	800e9f0 <tSampler_setRate>
	for (int i = 0; i < numWaves; i++)
 800b2a6:	3401      	adds	r4, #1
 800b2a8:	4621      	mov	r1, r4
 800b2aa:	4b44      	ldr	r3, [pc, #272]	; (800b3bc <audioTick+0x370>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	429c      	cmp	r4, r3
 800b2b0:	d211      	bcs.n	800b2d6 <audioTick+0x28a>
		if ((mySamplers[i]->active != 0) || (mySamplers[i]->retrigger == 1))
 800b2b2:	4b3a      	ldr	r3, [pc, #232]	; (800b39c <audioTick+0x350>)
 800b2b4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b2b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b2ba:	2a00      	cmp	r2, #0
 800b2bc:	d1e8      	bne.n	800b290 <audioTick+0x244>
 800b2be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d1f0      	bne.n	800b2a6 <audioTick+0x25a>
 800b2c4:	e7e4      	b.n	800b290 <audioTick+0x244>
			}
			else
			{
				tSampler_setRate(&mySamplers[i], tempRate[1]);
 800b2c6:	eeb0 0a48 	vmov.f32	s0, s16
 800b2ca:	4834      	ldr	r0, [pc, #208]	; (800b39c <audioTick+0x350>)
 800b2cc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800b2d0:	f003 fb8e 	bl	800e9f0 <tSampler_setRate>
 800b2d4:	e7e7      	b.n	800b2a6 <audioTick+0x25a>
		}

	}


	samples[0] = 0.0f;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	6033      	str	r3, [r6, #0]
	samples[1] = 0.0f;
 800b2da:	6073      	str	r3, [r6, #4]
	for (int i = 0; i < numWaves; i++)
 800b2dc:	2400      	movs	r4, #0
 800b2de:	e02d      	b.n	800b33c <audioTick+0x2f0>
	{

		if ((mySamplers[i]->active != 0) || (mySamplers[i]->retrigger == 1))
		{
			float tempSamples[2] = {0.0f, 0.0f};
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	9200      	str	r2, [sp, #0]
 800b2e4:	9201      	str	r2, [sp, #4]
			if (mySamplers[i]->channels == 2)
 800b2e6:	699b      	ldr	r3, [r3, #24]
 800b2e8:	2b02      	cmp	r3, #2
 800b2ea:	d036      	beq.n	800b35a <audioTick+0x30e>
			{
				tSampler_tickStereo(&mySamplers[i], tempSamples);
			}
			else
			{
				tempSamples[0] = tSampler_tick(&mySamplers[i]);
 800b2ec:	482b      	ldr	r0, [pc, #172]	; (800b39c <audioTick+0x350>)
 800b2ee:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800b2f2:	f002 fc7f 	bl	800dbf4 <tSampler_tick>
 800b2f6:	ed8d 0a00 	vstr	s0, [sp]
				tempSamples[1] = samples[0];
 800b2fa:	6833      	ldr	r3, [r6, #0]
 800b2fc:	9301      	str	r3, [sp, #4]
			}
			float myGain = tExpSmooth_tick(&sampleGains[i]);
 800b2fe:	4828      	ldr	r0, [pc, #160]	; (800b3a0 <audioTick+0x354>)
 800b300:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800b304:	f002 f811 	bl	800d32a <tExpSmooth_tick>
 800b308:	eeb0 8a40 	vmov.f32	s16, s0
			if (!mode[1])
 800b30c:	4b26      	ldr	r3, [pc, #152]	; (800b3a8 <audioTick+0x35c>)
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d157      	bne.n	800b3c4 <audioTick+0x378>
			{
				if (i < half_numWaves)
 800b314:	4b1e      	ldr	r3, [pc, #120]	; (800b390 <audioTick+0x344>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	42ab      	cmp	r3, r5
 800b31a:	d925      	bls.n	800b368 <audioTick+0x31c>
				{
					tempSamples[0] = tSVF_tick(&lowpasses[0], tempSamples[0]);
 800b31c:	ed9d 0a00 	vldr	s0, [sp]
 800b320:	4825      	ldr	r0, [pc, #148]	; (800b3b8 <audioTick+0x36c>)
 800b322:	f002 f88c 	bl	800d43e <tSVF_tick>
 800b326:	ed8d 0a00 	vstr	s0, [sp]
					samples[0] += (tempSamples[0] * myGain);
 800b32a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b32e:	ed96 8a00 	vldr	s16, [r6]
 800b332:	ee38 0a00 	vadd.f32	s0, s16, s0
 800b336:	ed86 0a00 	vstr	s0, [r6]
	for (int i = 0; i < numWaves; i++)
 800b33a:	3401      	adds	r4, #1
 800b33c:	4625      	mov	r5, r4
 800b33e:	4b1f      	ldr	r3, [pc, #124]	; (800b3bc <audioTick+0x370>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	429c      	cmp	r4, r3
 800b344:	d260      	bcs.n	800b408 <audioTick+0x3bc>
		if ((mySamplers[i]->active != 0) || (mySamplers[i]->retrigger == 1))
 800b346:	4b15      	ldr	r3, [pc, #84]	; (800b39c <audioTick+0x350>)
 800b348:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b34c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b34e:	2a00      	cmp	r2, #0
 800b350:	d1c6      	bne.n	800b2e0 <audioTick+0x294>
 800b352:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b354:	2a01      	cmp	r2, #1
 800b356:	d1f0      	bne.n	800b33a <audioTick+0x2ee>
 800b358:	e7c2      	b.n	800b2e0 <audioTick+0x294>
				tSampler_tickStereo(&mySamplers[i], tempSamples);
 800b35a:	4669      	mov	r1, sp
 800b35c:	480f      	ldr	r0, [pc, #60]	; (800b39c <audioTick+0x350>)
 800b35e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800b362:	f002 ff61 	bl	800e228 <tSampler_tickStereo>
 800b366:	e7ca      	b.n	800b2fe <audioTick+0x2b2>
				}
				else
				{
					tempSamples[0] = tSVF_tick(&lowpasses[1], tempSamples[0]);
 800b368:	ed9d 0a00 	vldr	s0, [sp]
 800b36c:	4814      	ldr	r0, [pc, #80]	; (800b3c0 <audioTick+0x374>)
 800b36e:	f002 f866 	bl	800d43e <tSVF_tick>
					samples[1] += (tempSamples[0] * myGain);
 800b372:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b376:	ed96 8a01 	vldr	s16, [r6, #4]
 800b37a:	ee38 0a00 	vadd.f32	s0, s16, s0
 800b37e:	ed86 0a01 	vstr	s0, [r6, #4]
 800b382:	e7da      	b.n	800b33a <audioTick+0x2ee>
 800b384:	20000700 	.word	0x20000700
 800b388:	20000730 	.word	0x20000730
 800b38c:	00000000 	.word	0x00000000
 800b390:	20000154 	.word	0x20000154
 800b394:	3f7d70a4 	.word	0x3f7d70a4
 800b398:	2000014c 	.word	0x2000014c
 800b39c:	20000760 	.word	0x20000760
 800b3a0:	2000f5c0 	.word	0x2000f5c0
 800b3a4:	20000164 	.word	0x20000164
 800b3a8:	20000158 	.word	0x20000158
 800b3ac:	bdcccccd 	.word	0xbdcccccd
 800b3b0:	3a83126f 	.word	0x3a83126f
 800b3b4:	468ca000 	.word	0x468ca000
 800b3b8:	200002e8 	.word	0x200002e8
 800b3bc:	2000017c 	.word	0x2000017c
 800b3c0:	200002ec 	.word	0x200002ec
				}
			}
			else
			{
				tempSamples[0] = tSVF_tick(&lowpasses[0], tempSamples[0]);
 800b3c4:	4d12      	ldr	r5, [pc, #72]	; (800b410 <audioTick+0x3c4>)
 800b3c6:	ed9d 0a00 	vldr	s0, [sp]
 800b3ca:	4628      	mov	r0, r5
 800b3cc:	f002 f837 	bl	800d43e <tSVF_tick>
 800b3d0:	ed8d 0a00 	vstr	s0, [sp]
				tempSamples[1] = tSVF_tick(&lowpasses[1], tempSamples[1]);
 800b3d4:	ed9d 0a01 	vldr	s0, [sp, #4]
 800b3d8:	1d28      	adds	r0, r5, #4
 800b3da:	f002 f830 	bl	800d43e <tSVF_tick>
 800b3de:	ed8d 0a01 	vstr	s0, [sp, #4]
				samples[0] += (tempSamples[0] * myGain);
 800b3e2:	eddd 7a00 	vldr	s15, [sp]
 800b3e6:	ee27 7a88 	vmul.f32	s14, s15, s16
 800b3ea:	edd6 7a00 	vldr	s15, [r6]
 800b3ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b3f2:	edc6 7a00 	vstr	s15, [r6]
				samples[1] += (tempSamples[1] * myGain);
 800b3f6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b3fa:	ed96 8a01 	vldr	s16, [r6, #4]
 800b3fe:	ee38 0a00 	vadd.f32	s0, s16, s0
 800b402:	ed86 0a01 	vstr	s0, [r6, #4]
 800b406:	e798      	b.n	800b33a <audioTick+0x2ee>
		//overflow
	}
	__enable_irq();
   	return 0.0f;
   	*/
}
 800b408:	b003      	add	sp, #12
 800b40a:	ecbd 8b06 	vpop	{d8-d10}
 800b40e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b410:	200002e8 	.word	0x200002e8

0800b414 <audioFrame>:
{
 800b414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b418:	b082      	sub	sp, #8
 800b41a:	4606      	mov	r6, r0
	buttonCheck();
 800b41c:	f001 fb7a 	bl	800cb14 <buttonCheck>
	for (int i = 0; i < NUM_ADC_CHANNELS; i++)
 800b420:	2400      	movs	r4, #0
 800b422:	e016      	b.n	800b452 <audioFrame+0x3e>
		floatADC[i] = ((ADC_values[i]>>6) * INV_TWO_TO_10);
 800b424:	00a2      	lsls	r2, r4, #2
 800b426:	4b28      	ldr	r3, [pc, #160]	; (800b4c8 <audioFrame+0xb4>)
 800b428:	4413      	add	r3, r2
 800b42a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b42e:	119b      	asrs	r3, r3, #6
 800b430:	ee00 3a10 	vmov	s0, r3
 800b434:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800b438:	eddf 7a24 	vldr	s15, [pc, #144]	; 800b4cc <audioFrame+0xb8>
 800b43c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b440:	4b23      	ldr	r3, [pc, #140]	; (800b4d0 <audioFrame+0xbc>)
 800b442:	4413      	add	r3, r2
 800b444:	ed83 0a00 	vstr	s0, [r3]
			tExpSmooth_setDest(&adcSmooth[i], floatADC[i]);
 800b448:	4822      	ldr	r0, [pc, #136]	; (800b4d4 <audioFrame+0xc0>)
 800b44a:	4410      	add	r0, r2
 800b44c:	f001 ff69 	bl	800d322 <tExpSmooth_setDest>
	for (int i = 0; i < NUM_ADC_CHANNELS; i++)
 800b450:	3401      	adds	r4, #1
 800b452:	2c0b      	cmp	r4, #11
 800b454:	dde6      	ble.n	800b424 <audioFrame+0x10>
	if (codecReady)
 800b456:	4b20      	ldr	r3, [pc, #128]	; (800b4d8 <audioFrame+0xc4>)
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	b38b      	cbz	r3, 800b4c0 <audioFrame+0xac>
		for (i = 0; i < (HALF_BUFFER_SIZE); i = i + 2)
 800b45c:	2500      	movs	r5, #0
 800b45e:	e02d      	b.n	800b4bc <audioFrame+0xa8>
			inputSamples[0] = (audioInBuffer[buffer_offset + i]) * INV_TWO_TO_31;
 800b460:	1977      	adds	r7, r6, r5
 800b462:	4c19      	ldr	r4, [pc, #100]	; (800b4c8 <audioFrame+0xb4>)
 800b464:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 800b468:	ed93 7a80 	vldr	s14, [r3, #512]	; 0x200
 800b46c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b470:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800b4dc <audioFrame+0xc8>
 800b474:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b478:	ed8d 7a00 	vstr	s14, [sp]
			inputSamples[1] = (audioInBuffer[buffer_offset + i + 1]) * INV_TWO_TO_31;
 800b47c:	f107 0801 	add.w	r8, r7, #1
 800b480:	eb04 0388 	add.w	r3, r4, r8, lsl #2
 800b484:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 800b488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b48c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b490:	edcd 7a01 	vstr	s15, [sp, #4]
			audioTick(inputSamples);
 800b494:	4668      	mov	r0, sp
 800b496:	f7ff fdd9 	bl	800b04c <audioTick>
			audioOutBuffer[buffer_offset + i] = (int32_t)(inputSamples[0] * TWO_TO_31);
 800b49a:	eddd 7a00 	vldr	s15, [sp]
 800b49e:	eefe 7ae0 	vcvt.s32.f32	s15, s15, #31
 800b4a2:	ee17 3a90 	vmov	r3, s15
 800b4a6:	f844 3027 	str.w	r3, [r4, r7, lsl #2]
			audioOutBuffer[buffer_offset + i + 1] = (int32_t)(inputSamples[1] * TWO_TO_31);;
 800b4aa:	eddd 7a01 	vldr	s15, [sp, #4]
 800b4ae:	eefe 7ae0 	vcvt.s32.f32	s15, s15, #31
 800b4b2:	ee17 3a90 	vmov	r3, s15
 800b4b6:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
		for (i = 0; i < (HALF_BUFFER_SIZE); i = i + 2)
 800b4ba:	3502      	adds	r5, #2
 800b4bc:	2d3f      	cmp	r5, #63	; 0x3f
 800b4be:	ddcf      	ble.n	800b460 <audioFrame+0x4c>
}
 800b4c0:	b002      	add	sp, #8
 800b4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4c6:	bf00      	nop
 800b4c8:	30000000 	.word	0x30000000
 800b4cc:	3a800000 	.word	0x3a800000
 800b4d0:	20000270 	.word	0x20000270
 800b4d4:	20000700 	.word	0x20000700
 800b4d8:	20000148 	.word	0x20000148
 800b4dc:	2ffffff6 	.word	0x2ffffff6

0800b4e0 <HAL_SAI_ErrorCallback>:


void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
	;
}
 800b4e0:	4770      	bx	lr

0800b4e2 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800b4e2:	b508      	push	{r3, lr}
	audioFrame(HALF_BUFFER_SIZE);
 800b4e4:	2040      	movs	r0, #64	; 0x40
 800b4e6:	f7ff ff95 	bl	800b414 <audioFrame>
}
 800b4ea:	bd08      	pop	{r3, pc}

0800b4ec <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800b4ec:	b508      	push	{r3, lr}
	audioFrame(0);
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	f7ff ff90 	bl	800b414 <audioFrame>
}
 800b4f4:	bd08      	pop	{r3, pc}
	...

0800b4f8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b4f8:	b500      	push	{lr}
 800b4fa:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b4fc:	9300      	str	r3, [sp, #0]
 800b4fe:	4613      	mov	r3, r2
 800b500:	460a      	mov	r2, r1
 800b502:	4601      	mov	r1, r0
 800b504:	4803      	ldr	r0, [pc, #12]	; (800b514 <BSP_SD_ReadBlocks+0x1c>)
 800b506:	f7fb f92d 	bl	8006764 <HAL_SD_ReadBlocks>
 800b50a:	b100      	cbz	r0, 800b50e <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 800b50c:	2001      	movs	r0, #1
  }

  return sd_state;  
}
 800b50e:	b003      	add	sp, #12
 800b510:	f85d fb04 	ldr.w	pc, [sp], #4
 800b514:	200112cc 	.word	0x200112cc

0800b518 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b518:	b500      	push	{lr}
 800b51a:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800b51c:	9300      	str	r3, [sp, #0]
 800b51e:	4613      	mov	r3, r2
 800b520:	460a      	mov	r2, r1
 800b522:	4601      	mov	r1, r0
 800b524:	4803      	ldr	r0, [pc, #12]	; (800b534 <BSP_SD_WriteBlocks+0x1c>)
 800b526:	f7fb fa1b 	bl	8006960 <HAL_SD_WriteBlocks>
 800b52a:	b100      	cbz	r0, 800b52e <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 800b52c:	2001      	movs	r0, #1
  }

  return sd_state;  
}
 800b52e:	b003      	add	sp, #12
 800b530:	f85d fb04 	ldr.w	pc, [sp], #4
 800b534:	200112cc 	.word	0x200112cc

0800b538 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b538:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b53a:	4803      	ldr	r0, [pc, #12]	; (800b548 <BSP_SD_GetCardState+0x10>)
 800b53c:	f7fb fe5e 	bl	80071fc <HAL_SD_GetCardState>
}
 800b540:	3804      	subs	r0, #4
 800b542:	bf18      	it	ne
 800b544:	2001      	movne	r0, #1
 800b546:	bd08      	pop	{r3, pc}
 800b548:	200112cc 	.word	0x200112cc

0800b54c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b54c:	b508      	push	{r3, lr}
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b54e:	4601      	mov	r1, r0
 800b550:	4801      	ldr	r0, [pc, #4]	; (800b558 <BSP_SD_GetCardInfo+0xc>)
 800b552:	f7fb fdd3 	bl	80070fc <HAL_SD_GetCardInfo>
}
 800b556:	bd08      	pop	{r3, pc}
 800b558:	200112cc 	.word	0x200112cc

0800b55c <BSP_SD_WriteCpltCallback>:
  * @retval None
  */
__weak void BSP_SD_WriteCpltCallback(void)
{

}
 800b55c:	4770      	bx	lr

0800b55e <HAL_SD_TxCpltCallback>:
{
 800b55e:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800b560:	f7ff fffc 	bl	800b55c <BSP_SD_WriteCpltCallback>
}
 800b564:	bd08      	pop	{r3, pc}

0800b566 <BSP_SD_ReadCpltCallback>:
  * @retval None
  */
__weak void BSP_SD_ReadCpltCallback(void)
{

}
 800b566:	4770      	bx	lr

0800b568 <HAL_SD_RxCpltCallback>:
{
 800b568:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800b56a:	f7ff fffc 	bl	800b566 <BSP_SD_ReadCpltCallback>
}
 800b56e:	bd08      	pop	{r3, pc}

0800b570 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b570:	b500      	push	{lr}
 800b572:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 800b574:	2301      	movs	r3, #1
 800b576:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800b57a:	f000 f8f9 	bl	800b770 <BSP_PlatformIsDetected>
 800b57e:	b910      	cbnz	r0, 800b586 <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 800b580:	2300      	movs	r3, #0
 800b582:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 800b586:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800b58a:	b003      	add	sp, #12
 800b58c:	f85d fb04 	ldr.w	pc, [sp], #4

0800b590 <BSP_SD_Init>:
{
 800b590:	b510      	push	{r4, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b592:	f7ff ffed 	bl	800b570 <BSP_SD_IsDetected>
 800b596:	2801      	cmp	r0, #1
 800b598:	d002      	beq.n	800b5a0 <BSP_SD_Init+0x10>
    return MSD_ERROR_SD_NOT_PRESENT;
 800b59a:	2402      	movs	r4, #2
}
 800b59c:	4620      	mov	r0, r4
 800b59e:	bd10      	pop	{r4, pc}
  sd_state = HAL_SD_Init(&hsd1);
 800b5a0:	4807      	ldr	r0, [pc, #28]	; (800b5c0 <BSP_SD_Init+0x30>)
 800b5a2:	f7fb fe3e 	bl	8007222 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800b5a6:	4604      	mov	r4, r0
 800b5a8:	2800      	cmp	r0, #0
 800b5aa:	d1f7      	bne.n	800b59c <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b5ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b5b0:	4803      	ldr	r0, [pc, #12]	; (800b5c0 <BSP_SD_Init+0x30>)
 800b5b2:	f7fb fdb5 	bl	8007120 <HAL_SD_ConfigWideBusOperation>
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	d0f0      	beq.n	800b59c <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 800b5ba:	2401      	movs	r4, #1
 800b5bc:	e7ee      	b.n	800b59c <BSP_SD_Init+0xc>
 800b5be:	bf00      	nop
 800b5c0:	200112cc 	.word	0x200112cc

0800b5c4 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 800b5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c8:	b085      	sub	sp, #20
 800b5ca:	4605      	mov	r5, r0

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b5d2:	4843      	ldr	r0, [pc, #268]	; (800b6e0 <AudioCodec_init+0x11c>)
 800b5d4:	f7f7 fc45 	bl	8002e62 <HAL_GPIO_WritePin>

	HAL_Delay(2);
 800b5d8:	2002      	movs	r0, #2
 800b5da:	f7f5 f865 	bl	80006a8 <HAL_Delay>
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 800b5de:	4c41      	ldr	r4, [pc, #260]	; (800b6e4 <AudioCodec_init+0x120>)
 800b5e0:	f04f 0a07 	mov.w	sl, #7
 800b5e4:	f884 a000 	strb.w	sl, [r4]
	myI2cData[1] = 0x03;
 800b5e8:	f04f 0b03 	mov.w	fp, #3
 800b5ec:	f884 b001 	strb.w	fp, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800b5f0:	4f3d      	ldr	r7, [pc, #244]	; (800b6e8 <AudioCodec_init+0x124>)
 800b5f2:	883b      	ldrh	r3, [r7, #0]
 800b5f4:	4e3d      	ldr	r6, [pc, #244]	; (800b6ec <AudioCodec_init+0x128>)
 800b5f6:	6832      	ldr	r2, [r6, #0]
 800b5f8:	9200      	str	r2, [sp, #0]
 800b5fa:	4622      	mov	r2, r4
 800b5fc:	2120      	movs	r1, #32
 800b5fe:	4628      	mov	r0, r5
 800b600:	f7f7 ff10 	bl	8003424 <HAL_I2C_Master_Transmit>
 800b604:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 800b6f4 <AudioCodec_init+0x130>
 800b608:	f888 0000 	strb.w	r0, [r8]

	myI2cData[0] = 0x01;
 800b60c:	f04f 0901 	mov.w	r9, #1
 800b610:	f884 9000 	strb.w	r9, [r4]
	myI2cData[1] = 0x41; //0x41 for 48k, 0x81 for 96k, 0xe1 for 192k
 800b614:	2341      	movs	r3, #65	; 0x41
 800b616:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800b618:	883b      	ldrh	r3, [r7, #0]
 800b61a:	6832      	ldr	r2, [r6, #0]
 800b61c:	9200      	str	r2, [sp, #0]
 800b61e:	4622      	mov	r2, r4
 800b620:	2120      	movs	r1, #32
 800b622:	9503      	str	r5, [sp, #12]
 800b624:	4628      	mov	r0, r5
 800b626:	f7f7 fefd 	bl	8003424 <HAL_I2C_Master_Transmit>
 800b62a:	f888 0000 	strb.w	r0, [r8]

	myI2cData[0] = 0x02;
 800b62e:	2502      	movs	r5, #2
 800b630:	7025      	strb	r5, [r4, #0]
	myI2cData[1] = 0x00;
 800b632:	2300      	movs	r3, #0
 800b634:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800b636:	883b      	ldrh	r3, [r7, #0]
 800b638:	6832      	ldr	r2, [r6, #0]
 800b63a:	9200      	str	r2, [sp, #0]
 800b63c:	4622      	mov	r2, r4
 800b63e:	2120      	movs	r1, #32
 800b640:	9803      	ldr	r0, [sp, #12]
 800b642:	f7f7 feef 	bl	8003424 <HAL_I2C_Master_Transmit>
 800b646:	f888 0000 	strb.w	r0, [r8]

	myI2cData[0] = 0x03;
 800b64a:	f884 b000 	strb.w	fp, [r4]
	myI2cData[1] = 0x79;
 800b64e:	2379      	movs	r3, #121	; 0x79
 800b650:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800b652:	883b      	ldrh	r3, [r7, #0]
 800b654:	6832      	ldr	r2, [r6, #0]
 800b656:	9200      	str	r2, [sp, #0]
 800b658:	4622      	mov	r2, r4
 800b65a:	2120      	movs	r1, #32
 800b65c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b660:	4658      	mov	r0, fp
 800b662:	f7f7 fedf 	bl	8003424 <HAL_I2C_Master_Transmit>
 800b666:	f888 0000 	strb.w	r0, [r8]

	myI2cData[0] = 0x04;
 800b66a:	2304      	movs	r3, #4
 800b66c:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x01;
 800b66e:	f884 9001 	strb.w	r9, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800b672:	883b      	ldrh	r3, [r7, #0]
 800b674:	6832      	ldr	r2, [r6, #0]
 800b676:	9200      	str	r2, [sp, #0]
 800b678:	4622      	mov	r2, r4
 800b67a:	2120      	movs	r1, #32
 800b67c:	4658      	mov	r0, fp
 800b67e:	f7f7 fed1 	bl	8003424 <HAL_I2C_Master_Transmit>
 800b682:	f888 0000 	strb.w	r0, [r8]

	myI2cData[0] = 0x05;
 800b686:	2305      	movs	r3, #5
 800b688:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x01;
 800b68a:	f884 9001 	strb.w	r9, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800b68e:	883b      	ldrh	r3, [r7, #0]
 800b690:	6832      	ldr	r2, [r6, #0]
 800b692:	9200      	str	r2, [sp, #0]
 800b694:	4622      	mov	r2, r4
 800b696:	2120      	movs	r1, #32
 800b698:	4658      	mov	r0, fp
 800b69a:	f7f7 fec3 	bl	8003424 <HAL_I2C_Master_Transmit>
 800b69e:	f888 0000 	strb.w	r0, [r8]

	myI2cData[0] = 0x06;
 800b6a2:	2306      	movs	r3, #6
 800b6a4:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x10;
 800b6a6:	2310      	movs	r3, #16
 800b6a8:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800b6aa:	883b      	ldrh	r3, [r7, #0]
 800b6ac:	6832      	ldr	r2, [r6, #0]
 800b6ae:	9200      	str	r2, [sp, #0]
 800b6b0:	4622      	mov	r2, r4
 800b6b2:	2120      	movs	r1, #32
 800b6b4:	4658      	mov	r0, fp
 800b6b6:	f7f7 feb5 	bl	8003424 <HAL_I2C_Master_Transmit>
 800b6ba:	f888 0000 	strb.w	r0, [r8]

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
 800b6be:	f884 a000 	strb.w	sl, [r4]
	myI2cData[1] = 0x02;
 800b6c2:	7065      	strb	r5, [r4, #1]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800b6c4:	883b      	ldrh	r3, [r7, #0]
 800b6c6:	6832      	ldr	r2, [r6, #0]
 800b6c8:	9200      	str	r2, [sp, #0]
 800b6ca:	4622      	mov	r2, r4
 800b6cc:	2120      	movs	r1, #32
 800b6ce:	4658      	mov	r0, fp
 800b6d0:	f7f7 fea8 	bl	8003424 <HAL_I2C_Master_Transmit>


	codecReady = 1;
 800b6d4:	4b06      	ldr	r3, [pc, #24]	; (800b6f0 <AudioCodec_init+0x12c>)
 800b6d6:	f883 9000 	strb.w	r9, [r3]
}
 800b6da:	b005      	add	sp, #20
 800b6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6e0:	58020800 	.word	0x58020800
 800b6e4:	20000170 	.word	0x20000170
 800b6e8:	2000000c 	.word	0x2000000c
 800b6ec:	20000008 	.word	0x20000008
 800b6f0:	20000148 	.word	0x20000148
 800b6f4:	2000f9f0 	.word	0x2000f9f0

0800b6f8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800b6f8:	b500      	push	{lr}
 800b6fa:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800b6fc:	4b13      	ldr	r3, [pc, #76]	; (800b74c <MX_DMA_Init+0x54>)
 800b6fe:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800b702:	f042 0201 	orr.w	r2, r2, #1
 800b706:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800b70a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b70e:	f003 0301 	and.w	r3, r3, #1
 800b712:	9301      	str	r3, [sp, #4]
 800b714:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 800b716:	2200      	movs	r2, #0
 800b718:	2101      	movs	r1, #1
 800b71a:	200b      	movs	r0, #11
 800b71c:	f7f5 fe56 	bl	80013cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800b720:	200b      	movs	r0, #11
 800b722:	f7f5 fe85 	bl	8001430 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 800b726:	2200      	movs	r2, #0
 800b728:	2102      	movs	r1, #2
 800b72a:	200c      	movs	r0, #12
 800b72c:	f7f5 fe4e 	bl	80013cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800b730:	200c      	movs	r0, #12
 800b732:	f7f5 fe7d 	bl	8001430 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 3, 0);
 800b736:	2200      	movs	r2, #0
 800b738:	2103      	movs	r1, #3
 800b73a:	200d      	movs	r0, #13
 800b73c:	f7f5 fe46 	bl	80013cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800b740:	200d      	movs	r0, #13
 800b742:	f7f5 fe75 	bl	8001430 <HAL_NVIC_EnableIRQ>

}
 800b746:	b003      	add	sp, #12
 800b748:	f85d fb04 	ldr.w	pc, [sp], #4
 800b74c:	58024400 	.word	0x58024400

0800b750 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800b750:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b752:	4903      	ldr	r1, [pc, #12]	; (800b760 <MX_FATFS_Init+0x10>)
 800b754:	4803      	ldr	r0, [pc, #12]	; (800b764 <MX_FATFS_Init+0x14>)
 800b756:	f7ff f9a3 	bl	800aaa0 <FATFS_LinkDriver>
 800b75a:	4b03      	ldr	r3, [pc, #12]	; (800b768 <MX_FATFS_Init+0x18>)
 800b75c:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800b75e:	bd08      	pop	{r3, pc}
 800b760:	2000f9fc 	.word	0x2000f9fc
 800b764:	0800fc8c 	.word	0x0800fc8c
 800b768:	2000f9f8 	.word	0x2000f9f8

0800b76c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 800b76c:	2000      	movs	r0, #0
 800b76e:	4770      	bx	lr

0800b770 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b770:	b510      	push	{r4, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b772:	4c07      	ldr	r4, [pc, #28]	; (800b790 <BSP_PlatformIsDetected+0x20>)
 800b774:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b778:	4620      	mov	r0, r4
 800b77a:	f7f7 fb6b 	bl	8002e54 <HAL_GPIO_ReadPin>
        status = SD_NOT_PRESENT;
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    status = SD_PRESENT;
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 800b77e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b782:	4620      	mov	r0, r4
 800b784:	f7f7 fb66 	bl	8002e54 <HAL_GPIO_ReadPin>
 800b788:	2801      	cmp	r0, #1
 800b78a:	d000      	beq.n	800b78e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b78c:	2000      	movs	r0, #0
    }
    /* USER CODE END 1 */ 
    return status;
}  
 800b78e:	bd10      	pop	{r4, pc}
 800b790:	58020800 	.word	0x58020800

0800b794 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800b794:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b796:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b798:	2300      	movs	r3, #0
 800b79a:	9301      	str	r3, [sp, #4]
 800b79c:	9302      	str	r3, [sp, #8]
 800b79e:	9303      	str	r3, [sp, #12]
 800b7a0:	9304      	str	r3, [sp, #16]
 800b7a2:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 800b7a4:	4b27      	ldr	r3, [pc, #156]	; (800b844 <HAL_FMC_MspInit+0xb0>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	b10b      	cbz	r3, 800b7ae <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800b7aa:	b007      	add	sp, #28
 800b7ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 800b7ae:	4b25      	ldr	r3, [pc, #148]	; (800b844 <HAL_FMC_MspInit+0xb0>)
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 800b7b4:	4b24      	ldr	r3, [pc, #144]	; (800b848 <HAL_FMC_MspInit+0xb4>)
 800b7b6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800b7ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b7be:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800b7c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b7c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b7ca:	9300      	str	r3, [sp, #0]
 800b7cc:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800b7ce:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800b7d2:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7d4:	2602      	movs	r6, #2
 800b7d6:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7d8:	2503      	movs	r5, #3
 800b7da:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b7dc:	240c      	movs	r4, #12
 800b7de:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b7e0:	a901      	add	r1, sp, #4
 800b7e2:	481a      	ldr	r0, [pc, #104]	; (800b84c <HAL_FMC_MspInit+0xb8>)
 800b7e4:	f7f7 fa46 	bl	8002c74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800b7e8:	230d      	movs	r3, #13
 800b7ea:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7ec:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7ee:	2700      	movs	r7, #0
 800b7f0:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7f2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b7f4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b7f6:	a901      	add	r1, sp, #4
 800b7f8:	4815      	ldr	r0, [pc, #84]	; (800b850 <HAL_FMC_MspInit+0xbc>)
 800b7fa:	f7f7 fa3b 	bl	8002c74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 800b7fe:	f248 1337 	movw	r3, #33079	; 0x8137
 800b802:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b804:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b806:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b808:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b80a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b80c:	a901      	add	r1, sp, #4
 800b80e:	4811      	ldr	r0, [pc, #68]	; (800b854 <HAL_FMC_MspInit+0xc0>)
 800b810:	f7f7 fa30 	bl	8002c74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800b814:	f64f 7383 	movw	r3, #65411	; 0xff83
 800b818:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b81a:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b81c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b81e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b820:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b822:	a901      	add	r1, sp, #4
 800b824:	480c      	ldr	r0, [pc, #48]	; (800b858 <HAL_FMC_MspInit+0xc4>)
 800b826:	f7f7 fa25 	bl	8002c74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 800b82a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800b82e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b830:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b832:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b834:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b836:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b838:	a901      	add	r1, sp, #4
 800b83a:	4808      	ldr	r0, [pc, #32]	; (800b85c <HAL_FMC_MspInit+0xc8>)
 800b83c:	f7f7 fa1a 	bl	8002c74 <HAL_GPIO_Init>
 800b840:	e7b3      	b.n	800b7aa <HAL_FMC_MspInit+0x16>
 800b842:	bf00      	nop
 800b844:	20000174 	.word	0x20000174
 800b848:	58024400 	.word	0x58024400
 800b84c:	58021400 	.word	0x58021400
 800b850:	58020800 	.word	0x58020800
 800b854:	58021800 	.word	0x58021800
 800b858:	58021000 	.word	0x58021000
 800b85c:	58020c00 	.word	0x58020c00

0800b860 <MX_FMC_Init>:
{
 800b860:	b500      	push	{lr}
 800b862:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800b864:	4817      	ldr	r0, [pc, #92]	; (800b8c4 <MX_FMC_Init+0x64>)
 800b866:	4b18      	ldr	r3, [pc, #96]	; (800b8c8 <MX_FMC_Init+0x68>)
 800b868:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800b86a:	2300      	movs	r3, #0
 800b86c:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800b86e:	2201      	movs	r2, #1
 800b870:	6082      	str	r2, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800b872:	2208      	movs	r2, #8
 800b874:	60c2      	str	r2, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800b876:	2210      	movs	r2, #16
 800b878:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800b87a:	2240      	movs	r2, #64	; 0x40
 800b87c:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800b87e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b882:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800b884:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 800b886:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800b88a:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800b88c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b890:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800b892:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 800b894:	2302      	movs	r3, #2
 800b896:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 800b898:	2206      	movs	r2, #6
 800b89a:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 800b89c:	2104      	movs	r1, #4
 800b89e:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 6;
 800b8a0:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 2;
 800b8a2:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 2;
 800b8a4:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 800b8a6:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800b8a8:	4469      	add	r1, sp
 800b8aa:	f7fb fe35 	bl	8007518 <HAL_SDRAM_Init>
 800b8ae:	b930      	cbnz	r0, 800b8be <MX_FMC_Init+0x5e>
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 800b8b0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800b8b4:	f7f4 ff12 	bl	80006dc <HAL_SetFMCMemorySwappingConfig>
}
 800b8b8:	b009      	add	sp, #36	; 0x24
 800b8ba:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 800b8be:	f000 fc2b 	bl	800c118 <Error_Handler>
 800b8c2:	e7f5      	b.n	800b8b0 <MX_FMC_Init+0x50>
 800b8c4:	2000fe90 	.word	0x2000fe90
 800b8c8:	52004140 	.word	0x52004140

0800b8cc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800b8cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800b8ce:	f7ff ff61 	bl	800b794 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800b8d2:	bd08      	pop	{r3, pc}

0800b8d4 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 800b8d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8d8:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b8da:	2400      	movs	r4, #0
 800b8dc:	9409      	str	r4, [sp, #36]	; 0x24
 800b8de:	940a      	str	r4, [sp, #40]	; 0x28
 800b8e0:	940b      	str	r4, [sp, #44]	; 0x2c
 800b8e2:	940c      	str	r4, [sp, #48]	; 0x30
 800b8e4:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b8e6:	4b6a      	ldr	r3, [pc, #424]	; (800ba90 <MX_GPIO_Init+0x1bc>)
 800b8e8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b8ec:	f042 0210 	orr.w	r2, r2, #16
 800b8f0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b8f4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b8f8:	f002 0210 	and.w	r2, r2, #16
 800b8fc:	9201      	str	r2, [sp, #4]
 800b8fe:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b900:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b904:	f042 0204 	orr.w	r2, r2, #4
 800b908:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b90c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b910:	f002 0204 	and.w	r2, r2, #4
 800b914:	9202      	str	r2, [sp, #8]
 800b916:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800b918:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b91c:	f042 0220 	orr.w	r2, r2, #32
 800b920:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b924:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b928:	f002 0220 	and.w	r2, r2, #32
 800b92c:	9203      	str	r2, [sp, #12]
 800b92e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b930:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b934:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b938:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b93c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b940:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800b944:	9204      	str	r2, [sp, #16]
 800b946:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b948:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b94c:	f042 0201 	orr.w	r2, r2, #1
 800b950:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b954:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b958:	f002 0201 	and.w	r2, r2, #1
 800b95c:	9205      	str	r2, [sp, #20]
 800b95e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b960:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b964:	f042 0202 	orr.w	r2, r2, #2
 800b968:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b96c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b970:	f002 0202 	and.w	r2, r2, #2
 800b974:	9206      	str	r2, [sp, #24]
 800b976:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800b978:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b97c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b980:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b984:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b988:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800b98c:	9207      	str	r2, [sp, #28]
 800b98e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b990:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b994:	f042 0208 	orr.w	r2, r2, #8
 800b998:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b99c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b9a0:	f003 0308 	and.w	r3, r3, #8
 800b9a4:	9308      	str	r3, [sp, #32]
 800b9a6:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800b9a8:	4e3a      	ldr	r6, [pc, #232]	; (800ba94 <MX_GPIO_Init+0x1c0>)
 800b9aa:	4622      	mov	r2, r4
 800b9ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b9b0:	4630      	mov	r0, r6
 800b9b2:	f7f7 fa56 	bl	8002e62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800b9b6:	f44f 5900 	mov.w	r9, #8192	; 0x2000
 800b9ba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b9be:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b9c0:	2502      	movs	r5, #2
 800b9c2:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b9c4:	a909      	add	r1, sp, #36	; 0x24
 800b9c6:	4630      	mov	r0, r6
 800b9c8:	f7f7 f954 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800b9cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b9d0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b9d2:	2701      	movs	r7, #1
 800b9d4:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b9d6:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b9d8:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b9da:	a909      	add	r1, sp, #36	; 0x24
 800b9dc:	4630      	mov	r0, r6
 800b9de:	f7f7 f949 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 800b9e2:	f248 0302 	movw	r3, #32770	; 0x8002
 800b9e6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b9e8:	2503      	movs	r5, #3
 800b9ea:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9ec:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b9ee:	a909      	add	r1, sp, #36	; 0x24
 800b9f0:	4630      	mov	r0, r6
 800b9f2:	f7f7 f93f 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 
                           PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 800b9f6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800b9fa:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b9fc:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9fe:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ba00:	a909      	add	r1, sp, #36	; 0x24
 800ba02:	4825      	ldr	r0, [pc, #148]	; (800ba98 <MX_GPIO_Init+0x1c4>)
 800ba04:	f7f7 f936 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 800ba08:	f24f 33f4 	movw	r3, #62452	; 0xf3f4
 800ba0c:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ba0e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba10:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ba12:	a909      	add	r1, sp, #36	; 0x24
 800ba14:	4821      	ldr	r0, [pc, #132]	; (800ba9c <MX_GPIO_Init+0x1c8>)
 800ba16:	f7f7 f92d 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD3 PD4 
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_4 
 800ba1a:	f641 03f8 	movw	r3, #6392	; 0x18f8
 800ba1e:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ba20:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba22:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ba24:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800baa4 <MX_GPIO_Init+0x1d0>
 800ba28:	a909      	add	r1, sp, #36	; 0x24
 800ba2a:	4640      	mov	r0, r8
 800ba2c:	f7f7 f922 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800ba30:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ba34:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ba36:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ba38:	a909      	add	r1, sp, #36	; 0x24
 800ba3a:	4640      	mov	r0, r8
 800ba3c:	f7f7 f91a 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG9 PG10 PG11 
                           PG12 PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800ba40:	f647 6308 	movw	r3, #32264	; 0x7e08
 800ba44:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ba46:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba48:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ba4a:	f508 6840 	add.w	r8, r8, #3072	; 0xc00
 800ba4e:	a909      	add	r1, sp, #36	; 0x24
 800ba50:	4640      	mov	r0, r8
 800ba52:	f7f7 f90f 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800ba56:	2340      	movs	r3, #64	; 0x40
 800ba58:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ba5a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ba5c:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ba5e:	a909      	add	r1, sp, #36	; 0x24
 800ba60:	4640      	mov	r0, r8
 800ba62:	f7f7 f907 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ba66:	23c0      	movs	r3, #192	; 0xc0
 800ba68:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ba6a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ba6c:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ba6e:	a909      	add	r1, sp, #36	; 0x24
 800ba70:	4630      	mov	r0, r6
 800ba72:	f7f7 f8ff 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800ba76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba7a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ba7c:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba7e:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba80:	a909      	add	r1, sp, #36	; 0x24
 800ba82:	4807      	ldr	r0, [pc, #28]	; (800baa0 <MX_GPIO_Init+0x1cc>)
 800ba84:	f7f7 f8f6 	bl	8002c74 <HAL_GPIO_Init>

}
 800ba88:	b00f      	add	sp, #60	; 0x3c
 800ba8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba8e:	bf00      	nop
 800ba90:	58024400 	.word	0x58024400
 800ba94:	58020800 	.word	0x58020800
 800ba98:	58021400 	.word	0x58021400
 800ba9c:	58020400 	.word	0x58020400
 800baa0:	58020000 	.word	0x58020000
 800baa4:	58020c00 	.word	0x58020c00

0800baa8 <HAL_HRTIM_MspInit>:
}

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{

  if(hrtimHandle->Instance==HRTIM1)
 800baa8:	6802      	ldr	r2, [r0, #0]
 800baaa:	4b0a      	ldr	r3, [pc, #40]	; (800bad4 <HAL_HRTIM_MspInit+0x2c>)
 800baac:	429a      	cmp	r2, r3
 800baae:	d000      	beq.n	800bab2 <HAL_HRTIM_MspInit+0xa>
 800bab0:	4770      	bx	lr
{
 800bab2:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 800bab4:	4b08      	ldr	r3, [pc, #32]	; (800bad8 <HAL_HRTIM_MspInit+0x30>)
 800bab6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800baba:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800babe:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800bac2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bac6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800baca:	9301      	str	r3, [sp, #4]
 800bacc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 800bace:	b002      	add	sp, #8
 800bad0:	4770      	bx	lr
 800bad2:	bf00      	nop
 800bad4:	40017400 	.word	0x40017400
 800bad8:	58024400 	.word	0x58024400

0800badc <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 800badc:	b510      	push	{r4, lr}
 800bade:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bae0:	2300      	movs	r3, #0
 800bae2:	9303      	str	r3, [sp, #12]
 800bae4:	9304      	str	r3, [sp, #16]
 800bae6:	9305      	str	r3, [sp, #20]
 800bae8:	9306      	str	r3, [sp, #24]
 800baea:	9307      	str	r3, [sp, #28]
  if(hrtimHandle->Instance==HRTIM1)
 800baec:	6802      	ldr	r2, [r0, #0]
 800baee:	4b1a      	ldr	r3, [pc, #104]	; (800bb58 <HAL_HRTIM_MspPostInit+0x7c>)
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d001      	beq.n	800baf8 <HAL_HRTIM_MspPostInit+0x1c>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 800baf4:	b008      	add	sp, #32
 800baf6:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800baf8:	4b18      	ldr	r3, [pc, #96]	; (800bb5c <HAL_HRTIM_MspPostInit+0x80>)
 800bafa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bafe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb02:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800bb06:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bb0a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800bb0e:	9201      	str	r2, [sp, #4]
 800bb10:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb12:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bb16:	f042 0201 	orr.w	r2, r2, #1
 800bb1a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800bb1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bb22:	f003 0301 	and.w	r3, r3, #1
 800bb26:	9302      	str	r3, [sp, #8]
 800bb28:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800bb2a:	2380      	movs	r3, #128	; 0x80
 800bb2c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb2e:	2402      	movs	r4, #2
 800bb30:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 800bb32:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bb34:	a903      	add	r1, sp, #12
 800bb36:	480a      	ldr	r0, [pc, #40]	; (800bb60 <HAL_HRTIM_MspPostInit+0x84>)
 800bb38:	f7f7 f89c 	bl	8002c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800bb3c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800bb40:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb42:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb44:	2300      	movs	r3, #0
 800bb46:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bb48:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 800bb4a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb4c:	a903      	add	r1, sp, #12
 800bb4e:	4805      	ldr	r0, [pc, #20]	; (800bb64 <HAL_HRTIM_MspPostInit+0x88>)
 800bb50:	f7f7 f890 	bl	8002c74 <HAL_GPIO_Init>
}
 800bb54:	e7ce      	b.n	800baf4 <HAL_HRTIM_MspPostInit+0x18>
 800bb56:	bf00      	nop
 800bb58:	40017400 	.word	0x40017400
 800bb5c:	58024400 	.word	0x58024400
 800bb60:	58021800 	.word	0x58021800
 800bb64:	58020000 	.word	0x58020000

0800bb68 <MX_HRTIM_Init>:
{
 800bb68:	b500      	push	{lr}
 800bb6a:	b089      	sub	sp, #36	; 0x24
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	9304      	str	r3, [sp, #16]
 800bb70:	9305      	str	r3, [sp, #20]
 800bb72:	9306      	str	r3, [sp, #24]
 800bb74:	9307      	str	r3, [sp, #28]
  HRTIM_SimplePWMChannelCfgTypeDef pSimplePWMChannelCfg = {0};
 800bb76:	9301      	str	r3, [sp, #4]
 800bb78:	9302      	str	r3, [sp, #8]
 800bb7a:	9303      	str	r3, [sp, #12]
  hhrtim.Instance = HRTIM1;
 800bb7c:	4843      	ldr	r0, [pc, #268]	; (800bc8c <MX_HRTIM_Init+0x124>)
 800bb7e:	4a44      	ldr	r2, [pc, #272]	; (800bc90 <MX_HRTIM_Init+0x128>)
 800bb80:	6002      	str	r2, [r0, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 800bb82:	6043      	str	r3, [r0, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 800bb84:	6083      	str	r3, [r0, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 800bb86:	f7f7 fa05 	bl	8002f94 <HAL_HRTIM_Init>
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	d15c      	bne.n	800bc48 <MX_HRTIM_Init+0xe0>
  pTimeBaseCfg.Period = 0x3fff;
 800bb8e:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800bb92:	9304      	str	r3, [sp, #16]
  pTimeBaseCfg.RepetitionCounter = 0x00;
 800bb94:	2300      	movs	r3, #0
 800bb96:	9305      	str	r3, [sp, #20]
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 800bb98:	2305      	movs	r3, #5
 800bb9a:	9306      	str	r3, [sp, #24]
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 800bb9c:	2308      	movs	r3, #8
 800bb9e:	9307      	str	r3, [sp, #28]
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 800bba0:	aa04      	add	r2, sp, #16
 800bba2:	2101      	movs	r1, #1
 800bba4:	4839      	ldr	r0, [pc, #228]	; (800bc8c <MX_HRTIM_Init+0x124>)
 800bba6:	f7f7 fa61 	bl	800306c <HAL_HRTIM_TimeBaseConfig>
 800bbaa:	2800      	cmp	r0, #0
 800bbac:	d14f      	bne.n	800bc4e <MX_HRTIM_Init+0xe6>
  pSimplePWMChannelCfg.Pulse = 0x7ff;
 800bbae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800bbb2:	9301      	str	r3, [sp, #4]
  pSimplePWMChannelCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	9302      	str	r3, [sp, #8]
  pSimplePWMChannelCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 800bbb8:	9303      	str	r3, [sp, #12]
  if (HAL_HRTIM_SimplePWMChannelConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pSimplePWMChannelCfg) != HAL_OK)
 800bbba:	ab01      	add	r3, sp, #4
 800bbbc:	2208      	movs	r2, #8
 800bbbe:	2101      	movs	r1, #1
 800bbc0:	4832      	ldr	r0, [pc, #200]	; (800bc8c <MX_HRTIM_Init+0x124>)
 800bbc2:	f7f7 fa6c 	bl	800309e <HAL_HRTIM_SimplePWMChannelConfig>
 800bbc6:	2800      	cmp	r0, #0
 800bbc8:	d144      	bne.n	800bc54 <MX_HRTIM_Init+0xec>
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 800bbca:	aa04      	add	r2, sp, #16
 800bbcc:	2102      	movs	r1, #2
 800bbce:	482f      	ldr	r0, [pc, #188]	; (800bc8c <MX_HRTIM_Init+0x124>)
 800bbd0:	f7f7 fa4c 	bl	800306c <HAL_HRTIM_TimeBaseConfig>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	d140      	bne.n	800bc5a <MX_HRTIM_Init+0xf2>
  if (HAL_HRTIM_SimplePWMChannelConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pSimplePWMChannelCfg) != HAL_OK)
 800bbd8:	ab01      	add	r3, sp, #4
 800bbda:	2210      	movs	r2, #16
 800bbdc:	2102      	movs	r1, #2
 800bbde:	482b      	ldr	r0, [pc, #172]	; (800bc8c <MX_HRTIM_Init+0x124>)
 800bbe0:	f7f7 fa5d 	bl	800309e <HAL_HRTIM_SimplePWMChannelConfig>
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	d13b      	bne.n	800bc60 <MX_HRTIM_Init+0xf8>
  if (HAL_HRTIM_SimplePWMChannelConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pSimplePWMChannelCfg) != HAL_OK)
 800bbe8:	ab01      	add	r3, sp, #4
 800bbea:	2220      	movs	r2, #32
 800bbec:	2102      	movs	r1, #2
 800bbee:	4827      	ldr	r0, [pc, #156]	; (800bc8c <MX_HRTIM_Init+0x124>)
 800bbf0:	f7f7 fa55 	bl	800309e <HAL_HRTIM_SimplePWMChannelConfig>
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	d136      	bne.n	800bc66 <MX_HRTIM_Init+0xfe>
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 800bbf8:	aa04      	add	r2, sp, #16
 800bbfa:	2103      	movs	r1, #3
 800bbfc:	4823      	ldr	r0, [pc, #140]	; (800bc8c <MX_HRTIM_Init+0x124>)
 800bbfe:	f7f7 fa35 	bl	800306c <HAL_HRTIM_TimeBaseConfig>
 800bc02:	bb98      	cbnz	r0, 800bc6c <MX_HRTIM_Init+0x104>
  if (HAL_HRTIM_SimplePWMChannelConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pSimplePWMChannelCfg) != HAL_OK)
 800bc04:	ab01      	add	r3, sp, #4
 800bc06:	2240      	movs	r2, #64	; 0x40
 800bc08:	2103      	movs	r1, #3
 800bc0a:	4820      	ldr	r0, [pc, #128]	; (800bc8c <MX_HRTIM_Init+0x124>)
 800bc0c:	f7f7 fa47 	bl	800309e <HAL_HRTIM_SimplePWMChannelConfig>
 800bc10:	bb78      	cbnz	r0, 800bc72 <MX_HRTIM_Init+0x10a>
  if (HAL_HRTIM_SimplePWMChannelConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pSimplePWMChannelCfg) != HAL_OK)
 800bc12:	ab01      	add	r3, sp, #4
 800bc14:	2280      	movs	r2, #128	; 0x80
 800bc16:	2103      	movs	r1, #3
 800bc18:	481c      	ldr	r0, [pc, #112]	; (800bc8c <MX_HRTIM_Init+0x124>)
 800bc1a:	f7f7 fa40 	bl	800309e <HAL_HRTIM_SimplePWMChannelConfig>
 800bc1e:	bb58      	cbnz	r0, 800bc78 <MX_HRTIM_Init+0x110>
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 800bc20:	aa04      	add	r2, sp, #16
 800bc22:	2104      	movs	r1, #4
 800bc24:	4819      	ldr	r0, [pc, #100]	; (800bc8c <MX_HRTIM_Init+0x124>)
 800bc26:	f7f7 fa21 	bl	800306c <HAL_HRTIM_TimeBaseConfig>
 800bc2a:	bb40      	cbnz	r0, 800bc7e <MX_HRTIM_Init+0x116>
  if (HAL_HRTIM_SimplePWMChannelConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE2, &pSimplePWMChannelCfg) != HAL_OK)
 800bc2c:	ab01      	add	r3, sp, #4
 800bc2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc32:	2104      	movs	r1, #4
 800bc34:	4815      	ldr	r0, [pc, #84]	; (800bc8c <MX_HRTIM_Init+0x124>)
 800bc36:	f7f7 fa32 	bl	800309e <HAL_HRTIM_SimplePWMChannelConfig>
 800bc3a:	bb18      	cbnz	r0, 800bc84 <MX_HRTIM_Init+0x11c>
  HAL_HRTIM_MspPostInit(&hhrtim);
 800bc3c:	4813      	ldr	r0, [pc, #76]	; (800bc8c <MX_HRTIM_Init+0x124>)
 800bc3e:	f7ff ff4d 	bl	800badc <HAL_HRTIM_MspPostInit>
}
 800bc42:	b009      	add	sp, #36	; 0x24
 800bc44:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800bc48:	f000 fa66 	bl	800c118 <Error_Handler>
 800bc4c:	e79f      	b.n	800bb8e <MX_HRTIM_Init+0x26>
    Error_Handler();
 800bc4e:	f000 fa63 	bl	800c118 <Error_Handler>
 800bc52:	e7ac      	b.n	800bbae <MX_HRTIM_Init+0x46>
    Error_Handler();
 800bc54:	f000 fa60 	bl	800c118 <Error_Handler>
 800bc58:	e7b7      	b.n	800bbca <MX_HRTIM_Init+0x62>
    Error_Handler();
 800bc5a:	f000 fa5d 	bl	800c118 <Error_Handler>
 800bc5e:	e7bb      	b.n	800bbd8 <MX_HRTIM_Init+0x70>
    Error_Handler();
 800bc60:	f000 fa5a 	bl	800c118 <Error_Handler>
 800bc64:	e7c0      	b.n	800bbe8 <MX_HRTIM_Init+0x80>
    Error_Handler();
 800bc66:	f000 fa57 	bl	800c118 <Error_Handler>
 800bc6a:	e7c5      	b.n	800bbf8 <MX_HRTIM_Init+0x90>
    Error_Handler();
 800bc6c:	f000 fa54 	bl	800c118 <Error_Handler>
 800bc70:	e7c8      	b.n	800bc04 <MX_HRTIM_Init+0x9c>
    Error_Handler();
 800bc72:	f000 fa51 	bl	800c118 <Error_Handler>
 800bc76:	e7cc      	b.n	800bc12 <MX_HRTIM_Init+0xaa>
    Error_Handler();
 800bc78:	f000 fa4e 	bl	800c118 <Error_Handler>
 800bc7c:	e7d0      	b.n	800bc20 <MX_HRTIM_Init+0xb8>
    Error_Handler();
 800bc7e:	f000 fa4b 	bl	800c118 <Error_Handler>
 800bc82:	e7d3      	b.n	800bc2c <MX_HRTIM_Init+0xc4>
    Error_Handler();
 800bc84:	f000 fa48 	bl	800c118 <Error_Handler>
 800bc88:	e7d8      	b.n	800bc3c <MX_HRTIM_Init+0xd4>
 800bc8a:	bf00      	nop
 800bc8c:	2000fec4 	.word	0x2000fec4
 800bc90:	40017400 	.word	0x40017400

0800bc94 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800bc94:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 800bc96:	4812      	ldr	r0, [pc, #72]	; (800bce0 <MX_I2C2_Init+0x4c>)
 800bc98:	4b12      	ldr	r3, [pc, #72]	; (800bce4 <MX_I2C2_Init+0x50>)
 800bc9a:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 800bc9c:	4b12      	ldr	r3, [pc, #72]	; (800bce8 <MX_I2C2_Init+0x54>)
 800bc9e:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800bca0:	2300      	movs	r3, #0
 800bca2:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bca4:	2201      	movs	r2, #1
 800bca6:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800bca8:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800bcaa:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800bcac:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800bcae:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800bcb0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800bcb2:	f7f7 fb59 	bl	8003368 <HAL_I2C_Init>
 800bcb6:	b950      	cbnz	r0, 800bcce <MX_I2C2_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800bcb8:	2100      	movs	r1, #0
 800bcba:	4809      	ldr	r0, [pc, #36]	; (800bce0 <MX_I2C2_Init+0x4c>)
 800bcbc:	f7f7 fc70 	bl	80035a0 <HAL_I2CEx_ConfigAnalogFilter>
 800bcc0:	b940      	cbnz	r0, 800bcd4 <MX_I2C2_Init+0x40>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800bcc2:	2100      	movs	r1, #0
 800bcc4:	4806      	ldr	r0, [pc, #24]	; (800bce0 <MX_I2C2_Init+0x4c>)
 800bcc6:	f7f7 fc99 	bl	80035fc <HAL_I2CEx_ConfigDigitalFilter>
 800bcca:	b930      	cbnz	r0, 800bcda <MX_I2C2_Init+0x46>
  {
    Error_Handler();
  }

}
 800bccc:	bd08      	pop	{r3, pc}
    Error_Handler();
 800bcce:	f000 fa23 	bl	800c118 <Error_Handler>
 800bcd2:	e7f1      	b.n	800bcb8 <MX_I2C2_Init+0x24>
    Error_Handler();
 800bcd4:	f000 fa20 	bl	800c118 <Error_Handler>
 800bcd8:	e7f3      	b.n	800bcc2 <MX_I2C2_Init+0x2e>
    Error_Handler();
 800bcda:	f000 fa1d 	bl	800c118 <Error_Handler>
}
 800bcde:	e7f5      	b.n	800bccc <MX_I2C2_Init+0x38>
 800bce0:	2000ffa0 	.word	0x2000ffa0
 800bce4:	40005800 	.word	0x40005800
 800bce8:	00b03fdb 	.word	0x00b03fdb

0800bcec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800bcec:	b510      	push	{r4, lr}
 800bcee:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	9303      	str	r3, [sp, #12]
 800bcf4:	9304      	str	r3, [sp, #16]
 800bcf6:	9305      	str	r3, [sp, #20]
 800bcf8:	9306      	str	r3, [sp, #24]
 800bcfa:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C2)
 800bcfc:	6802      	ldr	r2, [r0, #0]
 800bcfe:	4b16      	ldr	r3, [pc, #88]	; (800bd58 <HAL_I2C_MspInit+0x6c>)
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d001      	beq.n	800bd08 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800bd04:	b008      	add	sp, #32
 800bd06:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bd08:	4c14      	ldr	r4, [pc, #80]	; (800bd5c <HAL_I2C_MspInit+0x70>)
 800bd0a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800bd0e:	f043 0302 	orr.w	r3, r3, #2
 800bd12:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800bd16:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800bd1a:	f003 0302 	and.w	r3, r3, #2
 800bd1e:	9301      	str	r3, [sp, #4]
 800bd20:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800bd22:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800bd26:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800bd28:	2312      	movs	r3, #18
 800bd2a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd2c:	2303      	movs	r3, #3
 800bd2e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800bd30:	2304      	movs	r3, #4
 800bd32:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bd34:	a903      	add	r1, sp, #12
 800bd36:	480a      	ldr	r0, [pc, #40]	; (800bd60 <HAL_I2C_MspInit+0x74>)
 800bd38:	f7f6 ff9c 	bl	8002c74 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800bd3c:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800bd40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bd44:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 800bd48:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800bd4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd50:	9302      	str	r3, [sp, #8]
 800bd52:	9b02      	ldr	r3, [sp, #8]
}
 800bd54:	e7d6      	b.n	800bd04 <HAL_I2C_MspInit+0x18>
 800bd56:	bf00      	nop
 800bd58:	40005800 	.word	0x40005800
 800bd5c:	58024400 	.word	0x58024400
 800bd60:	58020400 	.word	0x58020400

0800bd64 <CycleCounterInit>:

// helper function to initialize measuring unit (cycle counter) */
static void CycleCounterInit( void )
{
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800bd64:	4a09      	ldr	r2, [pc, #36]	; (800bd8c <CycleCounterInit+0x28>)
 800bd66:	68d3      	ldr	r3, [r2, #12]
 800bd68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bd6c:	60d3      	str	r3, [r2, #12]

  /* Unlock DWT registers */
  if ((*(uint32_t*)0xE0001FB4) & 1)
 800bd6e:	4b08      	ldr	r3, [pc, #32]	; (800bd90 <CycleCounterInit+0x2c>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f013 0f01 	tst.w	r3, #1
 800bd76:	d002      	beq.n	800bd7e <CycleCounterInit+0x1a>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
 800bd78:	4b06      	ldr	r3, [pc, #24]	; (800bd94 <CycleCounterInit+0x30>)
 800bd7a:	4a07      	ldr	r2, [pc, #28]	; (800bd98 <CycleCounterInit+0x34>)
 800bd7c:	601a      	str	r2, [r3, #0]

  /* clear the cycle counter */
  DWT->CYCCNT = 0;
 800bd7e:	4b07      	ldr	r3, [pc, #28]	; (800bd9c <CycleCounterInit+0x38>)
 800bd80:	2200      	movs	r2, #0
 800bd82:	605a      	str	r2, [r3, #4]

  /* start the cycle counter */
  DWT->CTRL = 0x40000001;
 800bd84:	4a06      	ldr	r2, [pc, #24]	; (800bda0 <CycleCounterInit+0x3c>)
 800bd86:	601a      	str	r2, [r3, #0]

}
 800bd88:	4770      	bx	lr
 800bd8a:	bf00      	nop
 800bd8c:	e000edf0 	.word	0xe000edf0
 800bd90:	e0001fb4 	.word	0xe0001fb4
 800bd94:	e0001fb0 	.word	0xe0001fb0
 800bd98:	c5acce55 	.word	0xc5acce55
 800bd9c:	e0001000 	.word	0xe0001000
 800bda0:	40000001 	.word	0x40000001

0800bda4 <SDRAM_Initialization_sequence>:
{
 800bda4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bda8:	b087      	sub	sp, #28
	__IO uint32_t tmpmrd = 0;
 800bdaa:	2600      	movs	r6, #0
 800bdac:	9605      	str	r6, [sp, #20]
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800bdae:	2501      	movs	r5, #1
 800bdb0:	9501      	str	r5, [sp, #4]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800bdb2:	2710      	movs	r7, #16
 800bdb4:	9702      	str	r7, [sp, #8]
	Command.AutoRefreshNumber = 1;
 800bdb6:	9503      	str	r5, [sp, #12]
	Command.ModeRegisterDefinition = 0;
 800bdb8:	9604      	str	r6, [sp, #16]
	HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800bdba:	4c25      	ldr	r4, [pc, #148]	; (800be50 <SDRAM_Initialization_sequence+0xac>)
 800bdbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdc0:	a901      	add	r1, sp, #4
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	f7fb fbd0 	bl	8007568 <HAL_SDRAM_SendCommand>
	HAL_Delay(1);
 800bdc8:	4628      	mov	r0, r5
 800bdca:	f7f4 fc6d 	bl	80006a8 <HAL_Delay>
	Command.CommandMode = FMC_SDRAM_CMD_PALL;
 800bdce:	2302      	movs	r3, #2
 800bdd0:	9301      	str	r3, [sp, #4]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800bdd2:	9702      	str	r7, [sp, #8]
	Command.AutoRefreshNumber = 1;
 800bdd4:	9503      	str	r5, [sp, #12]
	Command.ModeRegisterDefinition = 0;
 800bdd6:	9604      	str	r6, [sp, #16]
	HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800bdd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bddc:	a901      	add	r1, sp, #4
 800bdde:	4620      	mov	r0, r4
 800bde0:	f7fb fbc2 	bl	8007568 <HAL_SDRAM_SendCommand>
	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 800bde4:	f240 2322 	movw	r3, #546	; 0x222
 800bde8:	9305      	str	r3, [sp, #20]
	Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800bdea:	2304      	movs	r3, #4
 800bdec:	9301      	str	r3, [sp, #4]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800bdee:	9702      	str	r7, [sp, #8]
	Command.AutoRefreshNumber = 1;
 800bdf0:	9503      	str	r5, [sp, #12]
	Command.ModeRegisterDefinition = tmpmrd;
 800bdf2:	9b05      	ldr	r3, [sp, #20]
 800bdf4:	9304      	str	r3, [sp, #16]
	HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800bdf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdfa:	a901      	add	r1, sp, #4
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	f7fb fbb3 	bl	8007568 <HAL_SDRAM_SendCommand>
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800be02:	f04f 0903 	mov.w	r9, #3
 800be06:	f8cd 9004 	str.w	r9, [sp, #4]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800be0a:	9702      	str	r7, [sp, #8]
	Command.AutoRefreshNumber = 8;
 800be0c:	f04f 0808 	mov.w	r8, #8
 800be10:	f8cd 800c 	str.w	r8, [sp, #12]
	Command.ModeRegisterDefinition = 0;
 800be14:	9604      	str	r6, [sp, #16]
	HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800be16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be1a:	a901      	add	r1, sp, #4
 800be1c:	4620      	mov	r0, r4
 800be1e:	f7fb fba3 	bl	8007568 <HAL_SDRAM_SendCommand>
	HAL_Delay(1);
 800be22:	4628      	mov	r0, r5
 800be24:	f7f4 fc40 	bl	80006a8 <HAL_Delay>
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800be28:	f8cd 9004 	str.w	r9, [sp, #4]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800be2c:	9702      	str	r7, [sp, #8]
	Command.AutoRefreshNumber = 8;
 800be2e:	f8cd 800c 	str.w	r8, [sp, #12]
	Command.ModeRegisterDefinition = 0;
 800be32:	9604      	str	r6, [sp, #16]
	HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800be34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be38:	a901      	add	r1, sp, #4
 800be3a:	4620      	mov	r0, r4
 800be3c:	f7fb fb94 	bl	8007568 <HAL_SDRAM_SendCommand>
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, SDRAM_REFRESH_COUNT);
 800be40:	f240 5169 	movw	r1, #1385	; 0x569
 800be44:	4620      	mov	r0, r4
 800be46:	f7fb fbb2 	bl	80075ae <HAL_SDRAM_ProgramRefreshRate>
}
 800be4a:	b007      	add	sp, #28
 800be4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be50:	2000fe90 	.word	0x2000fe90

0800be54 <randomNumber>:


float randomNumber(void) {
 800be54:	b500      	push	{lr}
 800be56:	b083      	sub	sp, #12

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 800be58:	a901      	add	r1, sp, #4
 800be5a:	4807      	ldr	r0, [pc, #28]	; (800be78 <randomNumber+0x24>)
 800be5c:	f7f9 fca5 	bl	80057aa <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 800be60:	eddd 7a01 	vldr	s15, [sp, #4]
 800be64:	eef8 7a67 	vcvt.f32.u32	s15, s15
	return num;
}
 800be68:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800be7c <randomNumber+0x28>
 800be6c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800be70:	b003      	add	sp, #12
 800be72:	f85d fb04 	ldr.w	pc, [sp], #4
 800be76:	bf00      	nop
 800be78:	20011098 	.word	0x20011098
 800be7c:	2f80000d 	.word	0x2f80000d

0800be80 <CycleCounterTrackMinAndMax>:

//this keeps min and max, but doesn't do the array for averaging - a bit less expensive
void CycleCounterTrackMinAndMax( int whichCount)
{
	if (cycleCountVals[whichCount] > 0)
 800be80:	4b13      	ldr	r3, [pc, #76]	; (800bed0 <CycleCounterTrackMinAndMax+0x50>)
 800be82:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800be86:	b30b      	cbz	r3, 800becc <CycleCounterTrackMinAndMax+0x4c>
	{
		if ((cycleCountVals[whichCount] < cycleCountMinMax[whichCount][0]) || (cycleCountMinMax[whichCount][0] == 0))
 800be88:	4b11      	ldr	r3, [pc, #68]	; (800bed0 <CycleCounterTrackMinAndMax+0x50>)
 800be8a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800be8e:	4b11      	ldr	r3, [pc, #68]	; (800bed4 <CycleCounterTrackMinAndMax+0x54>)
 800be90:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 800be94:	429a      	cmp	r2, r3
 800be96:	d303      	bcc.n	800bea0 <CycleCounterTrackMinAndMax+0x20>
 800be98:	4b0e      	ldr	r3, [pc, #56]	; (800bed4 <CycleCounterTrackMinAndMax+0x54>)
 800be9a:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 800be9e:	b92b      	cbnz	r3, 800beac <CycleCounterTrackMinAndMax+0x2c>
		{
			cycleCountMinMax[whichCount][0] = cycleCountVals[whichCount];
 800bea0:	4b0b      	ldr	r3, [pc, #44]	; (800bed0 <CycleCounterTrackMinAndMax+0x50>)
 800bea2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800bea6:	4b0b      	ldr	r3, [pc, #44]	; (800bed4 <CycleCounterTrackMinAndMax+0x54>)
 800bea8:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
		}
		//update max value ([2])
		if (cycleCountVals[whichCount] > cycleCountMinMax[whichCount][1])
 800beac:	4b08      	ldr	r3, [pc, #32]	; (800bed0 <CycleCounterTrackMinAndMax+0x50>)
 800beae:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800beb2:	4b08      	ldr	r3, [pc, #32]	; (800bed4 <CycleCounterTrackMinAndMax+0x54>)
 800beb4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	429a      	cmp	r2, r3
 800bebc:	d906      	bls.n	800becc <CycleCounterTrackMinAndMax+0x4c>
		{
			cycleCountMinMax[whichCount][1] = cycleCountVals[whichCount];
 800bebe:	4b04      	ldr	r3, [pc, #16]	; (800bed0 <CycleCounterTrackMinAndMax+0x50>)
 800bec0:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800bec4:	4b03      	ldr	r3, [pc, #12]	; (800bed4 <CycleCounterTrackMinAndMax+0x54>)
 800bec6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800beca:	6042      	str	r2, [r0, #4]
		}
	}
}
 800becc:	4770      	bx	lr
 800bece:	bf00      	nop
 800bed0:	2000fff4 	.word	0x2000fff4
 800bed4:	20010008 	.word	0x20010008

0800bed8 <FS_FileOperations>:
uint32_t numWaves = 0;
uint32_t OutOfSpace = 0;
uint32_t tooBigForScratch = 0;

static void FS_FileOperations(void)
{
 800bed8:	b530      	push	{r4, r5, lr}
 800beda:	b083      	sub	sp, #12
	HAL_Delay(100);
 800bedc:	2064      	movs	r0, #100	; 0x64
 800bede:	f7f4 fbe3 	bl	80006a8 <HAL_Delay>
	disk_initialize(0);
 800bee2:	2000      	movs	r0, #0
 800bee4:	f7fc f818 	bl	8007f18 <disk_initialize>

    disk_status(0);
 800bee8:	2000      	movs	r0, #0
 800beea:	f7fc f809 	bl	8007f00 <disk_status>
    //{
      //ShowDiskStatus(status);
    //}


	if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 800beee:	2201      	movs	r2, #1
 800bef0:	4932      	ldr	r1, [pc, #200]	; (800bfbc <FS_FileOperations+0xe4>)
 800bef2:	4833      	ldr	r0, [pc, #204]	; (800bfc0 <FS_FileOperations+0xe8>)
 800bef4:	f7fe f8f2 	bl	800a0dc <f_mount>
 800bef8:	b130      	cbz	r0, 800bf08 <FS_FileOperations+0x30>
		tempCount6 = DWT->CYCCNT;

		cycleCountVals[0] = tempCount6-tempCount5;
		CycleCounterTrackMinAndMax(0);
	}
	f_mount(0, "", 0); //unmount
 800befa:	2200      	movs	r2, #0
 800befc:	4931      	ldr	r1, [pc, #196]	; (800bfc4 <FS_FileOperations+0xec>)
 800befe:	4610      	mov	r0, r2
 800bf00:	f7fe f8ec 	bl	800a0dc <f_mount>
}
 800bf04:	b003      	add	sp, #12
 800bf06:	bd30      	pop	{r4, r5, pc}
		volatile uint32_t tempCount5 = 0;
 800bf08:	2400      	movs	r4, #0
 800bf0a:	9400      	str	r4, [sp, #0]
		volatile uint32_t tempCount6 = 0;
 800bf0c:	9401      	str	r4, [sp, #4]
		tempCount5 = DWT->CYCCNT;
 800bf0e:	4b2e      	ldr	r3, [pc, #184]	; (800bfc8 <FS_FileOperations+0xf0>)
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	9300      	str	r3, [sp, #0]
		res = f_findfirst(&dir, &fno, SDPath, "*.wav");
 800bf14:	482d      	ldr	r0, [pc, #180]	; (800bfcc <FS_FileOperations+0xf4>)
 800bf16:	4b2e      	ldr	r3, [pc, #184]	; (800bfd0 <FS_FileOperations+0xf8>)
 800bf18:	4a28      	ldr	r2, [pc, #160]	; (800bfbc <FS_FileOperations+0xe4>)
 800bf1a:	4601      	mov	r1, r0
 800bf1c:	f500 7090 	add.w	r0, r0, #288	; 0x120
 800bf20:	f7fe fd88 	bl	800aa34 <f_findfirst>
 800bf24:	4605      	mov	r5, r0
		while (fno.fname[0])
 800bf26:	4b29      	ldr	r3, [pc, #164]	; (800bfcc <FS_FileOperations+0xf4>)
 800bf28:	7e9b      	ldrb	r3, [r3, #26]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d036      	beq.n	800bf9c <FS_FileOperations+0xc4>
		  if(res == FR_OK)
 800bf2e:	2d00      	cmp	r5, #0
 800bf30:	d134      	bne.n	800bf9c <FS_FileOperations+0xc4>
			if((fileIndex < MAX_WAV_FILES) && (OutOfSpace == 0))
 800bf32:	2cff      	cmp	r4, #255	; 0xff
 800bf34:	d832      	bhi.n	800bf9c <FS_FileOperations+0xc4>
 800bf36:	4b27      	ldr	r3, [pc, #156]	; (800bfd4 <FS_FileOperations+0xfc>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d12e      	bne.n	800bf9c <FS_FileOperations+0xc4>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 800bf3e:	2211      	movs	r2, #17
 800bf40:	4925      	ldr	r1, [pc, #148]	; (800bfd8 <FS_FileOperations+0x100>)
 800bf42:	4826      	ldr	r0, [pc, #152]	; (800bfdc <FS_FileOperations+0x104>)
 800bf44:	f7fe f8fc 	bl	800a140 <f_open>
 800bf48:	2800      	cmp	r0, #0
 800bf4a:	d1ec      	bne.n	800bf26 <FS_FileOperations+0x4e>
					waves[fileIndex][0] = (uint32_t)memoryPointer;
 800bf4c:	0123      	lsls	r3, r4, #4
 800bf4e:	4a24      	ldr	r2, [pc, #144]	; (800bfe0 <FS_FileOperations+0x108>)
 800bf50:	6811      	ldr	r1, [r2, #0]
 800bf52:	4a24      	ldr	r2, [pc, #144]	; (800bfe4 <FS_FileOperations+0x10c>)
 800bf54:	50d1      	str	r1, [r2, r3]
					if (readWave(&SDFile) == 1)
 800bf56:	4821      	ldr	r0, [pc, #132]	; (800bfdc <FS_FileOperations+0x104>)
 800bf58:	f000 fe92 	bl	800cc80 <readWave>
 800bf5c:	2801      	cmp	r0, #1
 800bf5e:	d00a      	beq.n	800bf76 <FS_FileOperations+0x9e>
					f_close(&SDFile);
 800bf60:	481e      	ldr	r0, [pc, #120]	; (800bfdc <FS_FileOperations+0x104>)
 800bf62:	f7fe fc7c 	bl	800a85e <f_close>
					res = f_findnext(&dir, &fno);
 800bf66:	4819      	ldr	r0, [pc, #100]	; (800bfcc <FS_FileOperations+0xf4>)
 800bf68:	4601      	mov	r1, r0
 800bf6a:	f500 7090 	add.w	r0, r0, #288	; 0x120
 800bf6e:	f7fe fd44 	bl	800a9fa <f_findnext>
 800bf72:	4605      	mov	r5, r0
 800bf74:	e7d7      	b.n	800bf26 <FS_FileOperations+0x4e>
						waves[fileIndex][1] = header.channels;
 800bf76:	4a1c      	ldr	r2, [pc, #112]	; (800bfe8 <FS_FileOperations+0x110>)
 800bf78:	6995      	ldr	r5, [r2, #24]
 800bf7a:	481a      	ldr	r0, [pc, #104]	; (800bfe4 <FS_FileOperations+0x10c>)
 800bf7c:	0121      	lsls	r1, r4, #4
 800bf7e:	1843      	adds	r3, r0, r1
 800bf80:	605d      	str	r5, [r3, #4]
						waves[fileIndex][2] = header.sample_rate;
 800bf82:	69d2      	ldr	r2, [r2, #28]
 800bf84:	609a      	str	r2, [r3, #8]
						uint32_t LengthInFloats = (uint32_t)memoryPointer - waves[fileIndex][0];
 800bf86:	4a16      	ldr	r2, [pc, #88]	; (800bfe0 <FS_FileOperations+0x108>)
 800bf88:	6812      	ldr	r2, [r2, #0]
 800bf8a:	5841      	ldr	r1, [r0, r1]
 800bf8c:	1a52      	subs	r2, r2, r1
						waves[fileIndex][3] = LengthInFloats;
 800bf8e:	60da      	str	r2, [r3, #12]
						fileIndex++;
 800bf90:	3401      	adds	r4, #1
						numWaves++;
 800bf92:	4a16      	ldr	r2, [pc, #88]	; (800bfec <FS_FileOperations+0x114>)
 800bf94:	6813      	ldr	r3, [r2, #0]
 800bf96:	3301      	adds	r3, #1
 800bf98:	6013      	str	r3, [r2, #0]
 800bf9a:	e7e1      	b.n	800bf60 <FS_FileOperations+0x88>
		f_closedir(&dir);
 800bf9c:	4814      	ldr	r0, [pc, #80]	; (800bff0 <FS_FileOperations+0x118>)
 800bf9e:	f7fe fce8 	bl	800a972 <f_closedir>
		tempCount6 = DWT->CYCCNT;
 800bfa2:	4b09      	ldr	r3, [pc, #36]	; (800bfc8 <FS_FileOperations+0xf0>)
 800bfa4:	685b      	ldr	r3, [r3, #4]
 800bfa6:	9301      	str	r3, [sp, #4]
		cycleCountVals[0] = tempCount6-tempCount5;
 800bfa8:	9b01      	ldr	r3, [sp, #4]
 800bfaa:	9a00      	ldr	r2, [sp, #0]
 800bfac:	1a9b      	subs	r3, r3, r2
 800bfae:	4a11      	ldr	r2, [pc, #68]	; (800bff4 <FS_FileOperations+0x11c>)
 800bfb0:	6013      	str	r3, [r2, #0]
		CycleCounterTrackMinAndMax(0);
 800bfb2:	2000      	movs	r0, #0
 800bfb4:	f7ff ff64 	bl	800be80 <CycleCounterTrackMinAndMax>
 800bfb8:	e79f      	b.n	800befa <FS_FileOperations+0x22>
 800bfba:	bf00      	nop
 800bfbc:	2000f9fc 	.word	0x2000f9fc
 800bfc0:	2000fc58 	.word	0x2000fc58
 800bfc4:	0800f8c8 	.word	0x0800f8c8
 800bfc8:	e0001000 	.word	0xe0001000
 800bfcc:	2407eb60 	.word	0x2407eb60
 800bfd0:	0800fc84 	.word	0x0800fc84
 800bfd4:	20000178 	.word	0x20000178
 800bfd8:	2407eb7a 	.word	0x2407eb7a
 800bfdc:	2000fa00 	.word	0x2000fa00
 800bfe0:	20011028 	.word	0x20011028
 800bfe4:	20010028 	.word	0x20010028
 800bfe8:	20011384 	.word	0x20011384
 800bfec:	2000017c 	.word	0x2000017c
 800bff0:	2407ec80 	.word	0x2407ec80
 800bff4:	2000fff4 	.word	0x2000fff4

0800bff8 <startTimersForLEDs>:

void startTimersForLEDs(void)
{
 800bff8:	b570      	push	{r4, r5, r6, lr}


	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].TIMxCR = HRTIM_TIMCR_CONT + HRTIM_TIMCR_PREEN + HRTIM_TIMCR_TREPU;
 800bffa:	4b23      	ldr	r3, [pc, #140]	; (800c088 <startTimersForLEDs+0x90>)
 800bffc:	4d23      	ldr	r5, [pc, #140]	; (800c08c <startTimersForLEDs+0x94>)
 800bffe:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].PERxR = 0x3fff;
 800c002:	f643 74ff 	movw	r4, #16383	; 0x3fff
 800c006:	f8c3 4194 	str.w	r4, [r3, #404]	; 0x194
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP1xR = 200;
 800c00a:	21c8      	movs	r1, #200	; 0xc8
 800c00c:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP2xR = 200;
 800c010:	f8c3 11a4 	str.w	r1, [r3, #420]	; 0x1a4
	/* TD1 output set on TIMC period and reset on TIMC CMP1 event*/
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].RSTx1R = HRTIM_RST1R_CMP1;
 800c014:	2608      	movs	r6, #8
 800c016:	f8c3 61c0 	str.w	r6, [r3, #448]	; 0x1c0
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].SETx1R = HRTIM_RST1R_PER;
 800c01a:	2204      	movs	r2, #4
 800c01c:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc

	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].RSTx2R = HRTIM_RST2R_CMP2;
 800c020:	2010      	movs	r0, #16
 800c022:	f8c3 01c8 	str.w	r0, [r3, #456]	; 0x1c8
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].SETx2R = HRTIM_RST2R_PER;
 800c026:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4



	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_E].TIMxCR = HRTIM_TIMCR_CONT + HRTIM_TIMCR_PREEN + HRTIM_TIMCR_TREPU;
 800c02a:	f8c3 5280 	str.w	r5, [r3, #640]	; 0x280
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_E].PERxR = 0x3fff;
 800c02e:	f8c3 4294 	str.w	r4, [r3, #660]	; 0x294
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_E].CMP2xR = 200;
 800c032:	f8c3 12a4 	str.w	r1, [r3, #676]	; 0x2a4
	/* TE2 output set on TIME period and reset on TIME CMP2 event*/
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_E].RSTx2R = HRTIM_SET2R_CMP2;
 800c036:	f8c3 02c8 	str.w	r0, [r3, #712]	; 0x2c8
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_E].SETx2R = HRTIM_RST2R_PER;
 800c03a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4



	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].TIMxCR = HRTIM_TIMCR_CONT + HRTIM_TIMCR_PREEN + HRTIM_TIMCR_TREPU;
 800c03e:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].PERxR = 0x3fff;
 800c042:	f8c3 4114 	str.w	r4, [r3, #276]	; 0x114
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP2xR = 200;
 800c046:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
	/* TB2 output set on TIMB period and reset on TIMB CMP2 event*/
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].RSTx2R = HRTIM_SET2R_CMP2;
 800c04a:	f8c3 0148 	str.w	r0, [r3, #328]	; 0x148
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].SETx2R = HRTIM_RST2R_PER;
 800c04e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].TIMxCR = HRTIM_TIMCR_CONT + HRTIM_TIMCR_PREEN + HRTIM_TIMCR_TREPU;
 800c052:	f8c3 5200 	str.w	r5, [r3, #512]	; 0x200
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].PERxR = 0x3fff;
 800c056:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR = 200;
 800c05a:	f8c3 121c 	str.w	r1, [r3, #540]	; 0x21c
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP2xR = 200;
 800c05e:	f8c3 1224 	str.w	r1, [r3, #548]	; 0x224

	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].RSTx1R = HRTIM_SET1R_CMP1;
 800c062:	f8c3 6240 	str.w	r6, [r3, #576]	; 0x240
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R = HRTIM_RST1R_PER;
 800c066:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c

	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].RSTx2R = HRTIM_SET2R_CMP2;
 800c06a:	f8c3 0248 	str.w	r0, [r3, #584]	; 0x248
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx2R = HRTIM_RST2R_PER;
 800c06e:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244


	HRTIM1->sMasterRegs.MCR = HRTIM_MCR_TBCEN + HRTIM_MCR_TECEN + HRTIM_MCR_TCCEN + HRTIM_MCR_TDCEN;
 800c072:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800c076:	601a      	str	r2, [r3, #0]
	HRTIM1->sCommonRegs.OENR = HRTIM_OENR_TB2OEN + HRTIM_OENR_TE2OEN + HRTIM_OENR_TC1OEN + HRTIM_OENR_TC2OEN + HRTIM_OENR_TD1OEN + HRTIM_OENR_TD2OEN ;
 800c078:	f44f 723e 	mov.w	r2, #760	; 0x2f8
 800c07c:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
	HAL_HRTIM_MspPostInit(&hhrtim);
 800c080:	4803      	ldr	r0, [pc, #12]	; (800c090 <startTimersForLEDs+0x98>)
 800c082:	f7ff fd2b 	bl	800badc <HAL_HRTIM_MspPostInit>
}
 800c086:	bd70      	pop	{r4, r5, r6, pc}
 800c088:	40017400 	.word	0x40017400
 800c08c:	08020008 	.word	0x08020008
 800c090:	2000fec4 	.word	0x2000fec4

0800c094 <MPU_Conf>:


void MPU_Conf(void)
{
 800c094:	b570      	push	{r4, r5, r6, lr}
 800c096:	b084      	sub	sp, #16
  //Thanks, Keshikan! This solves the issues with accessing the SRAM in the D2 area properly. -JS
	//should test the different possible settings to see what works best while avoiding needing to manually clear the cache -JS

	MPU_Region_InitTypeDef MPU_InitStruct;

	  HAL_MPU_Disable();
 800c098:	f7f5 f9ee 	bl	8001478 <HAL_MPU_Disable>

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800c09c:	2401      	movs	r4, #1
 800c09e:	f88d 4000 	strb.w	r4, [sp]

	  //D2 Domain�SRAM1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 800c0a2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800c0a6:	9301      	str	r3, [sp, #4]
	  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
	  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
	  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
	  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800c0a8:	2311      	movs	r3, #17
 800c0aa:	f88d 3008 	strb.w	r3, [sp, #8]

	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800c0ae:	2603      	movs	r6, #3
 800c0b0:	f88d 600b 	strb.w	r6, [sp, #11]

	  //AN4838
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800c0b4:	f88d 400a 	strb.w	r4, [sp, #10]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800c0b8:	2500      	movs	r5, #0
 800c0ba:	f88d 500e 	strb.w	r5, [sp, #14]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800c0be:	f88d 500f 	strb.w	r5, [sp, #15]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800c0c2:	f88d 500d 	strb.w	r5, [sp, #13]
//	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
//	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
//	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800c0c6:	f88d 5001 	strb.w	r5, [sp, #1]

	  MPU_InitStruct.SubRegionDisable = 0x00;
 800c0ca:	f88d 5009 	strb.w	r5, [sp, #9]


	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800c0ce:	f88d 400c 	strb.w	r4, [sp, #12]


	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800c0d2:	4668      	mov	r0, sp
 800c0d4:	f7f5 f9f2 	bl	80014bc <HAL_MPU_ConfigRegion>


	  //now set up D3 domain RAM

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800c0d8:	f88d 4000 	strb.w	r4, [sp]

	 	  //D2 Domain�SRAM1
	 	  MPU_InitStruct.BaseAddress = 0x38000000;
 800c0dc:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800c0e0:	9301      	str	r3, [sp, #4]


	 	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800c0e2:	230f      	movs	r3, #15
 800c0e4:	f88d 3008 	strb.w	r3, [sp, #8]

	 	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800c0e8:	f88d 600b 	strb.w	r6, [sp, #11]

	 	  //AN4838
	 	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800c0ec:	f88d 400a 	strb.w	r4, [sp, #10]
	 	  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800c0f0:	f88d 400e 	strb.w	r4, [sp, #14]
	 	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800c0f4:	f88d 400f 	strb.w	r4, [sp, #15]
	 	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800c0f8:	f88d 400d 	strb.w	r4, [sp, #13]
	 //	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	 //	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	 //	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	 	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800c0fc:	f88d 4001 	strb.w	r4, [sp, #1]

	 	  MPU_InitStruct.SubRegionDisable = 0x00;
 800c100:	f88d 5009 	strb.w	r5, [sp, #9]


	 	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800c104:	f88d 500c 	strb.w	r5, [sp, #12]


	 	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800c108:	4668      	mov	r0, sp
 800c10a:	f7f5 f9d7 	bl	80014bc <HAL_MPU_ConfigRegion>


	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800c10e:	2004      	movs	r0, #4
 800c110:	f7f5 f9c2 	bl	8001498 <HAL_MPU_Enable>
}
 800c114:	b004      	add	sp, #16
 800c116:	bd70      	pop	{r4, r5, r6, pc}

0800c118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c118:	e7fe      	b.n	800c118 <Error_Handler>
	...

0800c11c <SystemClock_Config>:
{
 800c11c:	b500      	push	{lr}
 800c11e:	b0cd      	sub	sp, #308	; 0x134
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c120:	224c      	movs	r2, #76	; 0x4c
 800c122:	2100      	movs	r1, #0
 800c124:	a839      	add	r0, sp, #228	; 0xe4
 800c126:	f002 fd11 	bl	800eb4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c12a:	2220      	movs	r2, #32
 800c12c:	2100      	movs	r1, #0
 800c12e:	a831      	add	r0, sp, #196	; 0xc4
 800c130:	f002 fd0c 	bl	800eb4c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c134:	22bc      	movs	r2, #188	; 0xbc
 800c136:	2100      	movs	r1, #0
 800c138:	a802      	add	r0, sp, #8
 800c13a:	f002 fd07 	bl	800eb4c <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800c13e:	2002      	movs	r0, #2
 800c140:	f7f7 fb14 	bl	800376c <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800c144:	2300      	movs	r3, #0
 800c146:	9301      	str	r3, [sp, #4]
 800c148:	4b3e      	ldr	r3, [pc, #248]	; (800c244 <SystemClock_Config+0x128>)
 800c14a:	699a      	ldr	r2, [r3, #24]
 800c14c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800c150:	619a      	str	r2, [r3, #24]
 800c152:	699b      	ldr	r3, [r3, #24]
 800c154:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c158:	9301      	str	r3, [sp, #4]
 800c15a:	4b3b      	ldr	r3, [pc, #236]	; (800c248 <SystemClock_Config+0x12c>)
 800c15c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c15e:	f042 0201 	orr.w	r2, r2, #1
 800c162:	62da      	str	r2, [r3, #44]	; 0x2c
 800c164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c166:	f003 0301 	and.w	r3, r3, #1
 800c16a:	9301      	str	r3, [sp, #4]
 800c16c:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800c16e:	4b35      	ldr	r3, [pc, #212]	; (800c244 <SystemClock_Config+0x128>)
 800c170:	699b      	ldr	r3, [r3, #24]
 800c172:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800c176:	d0fa      	beq.n	800c16e <SystemClock_Config+0x52>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800c178:	4a34      	ldr	r2, [pc, #208]	; (800c24c <SystemClock_Config+0x130>)
 800c17a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800c17c:	f023 0303 	bic.w	r3, r3, #3
 800c180:	f043 0302 	orr.w	r3, r3, #2
 800c184:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800c186:	2323      	movs	r3, #35	; 0x23
 800c188:	9339      	str	r3, [sp, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c18a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c18e:	933a      	str	r3, [sp, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800c190:	2301      	movs	r3, #1
 800c192:	933c      	str	r3, [sp, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c194:	2240      	movs	r2, #64	; 0x40
 800c196:	923d      	str	r2, [sp, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800c198:	933f      	str	r3, [sp, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c19a:	2302      	movs	r3, #2
 800c19c:	9342      	str	r3, [sp, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c19e:	9343      	str	r3, [sp, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800c1a0:	2205      	movs	r2, #5
 800c1a2:	9244      	str	r2, [sp, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 192;
 800c1a4:	22c0      	movs	r2, #192	; 0xc0
 800c1a6:	9245      	str	r2, [sp, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800c1a8:	9346      	str	r3, [sp, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800c1aa:	9347      	str	r3, [sp, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800c1ac:	9348      	str	r3, [sp, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800c1ae:	2308      	movs	r3, #8
 800c1b0:	9349      	str	r3, [sp, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	934a      	str	r3, [sp, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800c1b6:	934b      	str	r3, [sp, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c1b8:	a839      	add	r0, sp, #228	; 0xe4
 800c1ba:	f7f7 fb01 	bl	80037c0 <HAL_RCC_OscConfig>
 800c1be:	2800      	cmp	r0, #0
 800c1c0:	d139      	bne.n	800c236 <SystemClock_Config+0x11a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c1c2:	233f      	movs	r3, #63	; 0x3f
 800c1c4:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c1c6:	2303      	movs	r3, #3
 800c1c8:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800c1ce:	2308      	movs	r3, #8
 800c1d0:	9334      	str	r3, [sp, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800c1d2:	2340      	movs	r3, #64	; 0x40
 800c1d4:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800c1d6:	9336      	str	r3, [sp, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800c1d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c1dc:	9237      	str	r2, [sp, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800c1de:	9338      	str	r3, [sp, #224]	; 0xe0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800c1e0:	2104      	movs	r1, #4
 800c1e2:	a831      	add	r0, sp, #196	; 0xc4
 800c1e4:	f7f7 feda 	bl	8003f9c <HAL_RCC_ClockConfig>
 800c1e8:	bb38      	cbnz	r0, 800c23a <SystemClock_Config+0x11e>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1|RCC_PERIPHCLK_RNG
 800c1ea:	4b19      	ldr	r3, [pc, #100]	; (800c250 <SystemClock_Config+0x134>)
 800c1ec:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 800c1ee:	2319      	movs	r3, #25
 800c1f0:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 800c1f2:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800c1f6:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 800c1f8:	2307      	movs	r3, #7
 800c1fa:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800c1fc:	2302      	movs	r3, #2
 800c1fe:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800c200:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800c202:	2300      	movs	r3, #0
 800c204:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800c206:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800c208:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800c20a:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800c20c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c210:	9215      	str	r2, [sp, #84]	; 0x54
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800c212:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800c214:	2201      	movs	r2, #1
 800c216:	9217      	str	r2, [sp, #92]	; 0x5c
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800c218:	9321      	str	r3, [sp, #132]	; 0x84
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800c21a:	9322      	str	r3, [sp, #136]	; 0x88
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 800c21c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c220:	932a      	str	r3, [sp, #168]	; 0xa8
  PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_CPUCLK;
 800c222:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c226:	932f      	str	r3, [sp, #188]	; 0xbc
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c228:	a802      	add	r0, sp, #8
 800c22a:	f7f8 f92f 	bl	800448c <HAL_RCCEx_PeriphCLKConfig>
 800c22e:	b930      	cbnz	r0, 800c23e <SystemClock_Config+0x122>
}
 800c230:	b04d      	add	sp, #308	; 0x134
 800c232:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800c236:	f7ff ff6f 	bl	800c118 <Error_Handler>
    Error_Handler();
 800c23a:	f7ff ff6d 	bl	800c118 <Error_Handler>
    Error_Handler();
 800c23e:	f7ff ff6b 	bl	800c118 <Error_Handler>
 800c242:	bf00      	nop
 800c244:	58024800 	.word	0x58024800
 800c248:	58000400 	.word	0x58000400
 800c24c:	58024400 	.word	0x58024400
 800c250:	910b0108 	.word	0x910b0108

0800c254 <main>:
{
 800c254:	b510      	push	{r4, lr}
  MPU_Conf();
 800c256:	f7ff ff1d 	bl	800c094 <MPU_Conf>
  __ASM volatile ("dsb 0xF":::"memory");
 800c25a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c25e:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800c262:	4b4b      	ldr	r3, [pc, #300]	; (800c390 <main+0x13c>)
 800c264:	2100      	movs	r1, #0
 800c266:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800c26a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c26e:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800c272:	695a      	ldr	r2, [r3, #20]
 800c274:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c278:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800c27a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c27e:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800c282:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800c286:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800c28a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800c28e:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800c292:	e00f      	b.n	800c2b4 <main+0x60>
      } while (ways-- != 0U);
 800c294:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800c296:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800c29a:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800c29e:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800c2a2:	493b      	ldr	r1, [pc, #236]	; (800c390 <main+0x13c>)
 800c2a4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800c2a8:	1e53      	subs	r3, r2, #1
 800c2aa:	2a00      	cmp	r2, #0
 800c2ac:	d1f2      	bne.n	800c294 <main+0x40>
    } while(sets-- != 0U);
 800c2ae:	1e43      	subs	r3, r0, #1
 800c2b0:	b118      	cbz	r0, 800c2ba <main+0x66>
 800c2b2:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800c2b4:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 800c2b8:	e7ed      	b.n	800c296 <main+0x42>
 800c2ba:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800c2be:	694b      	ldr	r3, [r1, #20]
 800c2c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2c4:	614b      	str	r3, [r1, #20]
 800c2c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c2ca:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800c2ce:	f7f4 f9ab 	bl	8000628 <HAL_Init>
  SystemClock_Config();
 800c2d2:	f7ff ff23 	bl	800c11c <SystemClock_Config>
  MX_GPIO_Init();
 800c2d6:	f7ff fafd 	bl	800b8d4 <MX_GPIO_Init>
  MX_DMA_Init();
 800c2da:	f7ff fa0d 	bl	800b6f8 <MX_DMA_Init>
  MX_MDMA_Init();
 800c2de:	f000 f867 	bl	800c3b0 <MX_MDMA_Init>
  MX_FMC_Init();
 800c2e2:	f7ff fabd 	bl	800b860 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 800c2e6:	f000 fa41 	bl	800c76c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800c2ea:	f7ff fa31 	bl	800b750 <MX_FATFS_Init>
  MX_SAI1_Init();
 800c2ee:	f000 f8c1 	bl	800c474 <MX_SAI1_Init>
  MX_RNG_Init();
 800c2f2:	f000 f893 	bl	800c41c <MX_RNG_Init>
  MX_I2C2_Init();
 800c2f6:	f7ff fccd 	bl	800bc94 <MX_I2C2_Init>
  MX_ADC1_Init();
 800c2fa:	f7fe fc3f 	bl	800ab7c <MX_ADC1_Init>
  MX_HRTIM_Init();
 800c2fe:	f7ff fc33 	bl	800bb68 <MX_HRTIM_Init>
  HAL_Delay(100);
 800c302:	2064      	movs	r0, #100	; 0x64
 800c304:	f7f4 f9d0 	bl	80006a8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800c308:	4c22      	ldr	r4, [pc, #136]	; (800c394 <main+0x140>)
 800c30a:	2200      	movs	r2, #0
 800c30c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c310:	4620      	mov	r0, r4
 800c312:	f7f6 fda6 	bl	8002e62 <HAL_GPIO_WritePin>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 800c316:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 800c31a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 800c31e:	eee1 3a10 	vmsr	fpscr, r3
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800c322:	2201      	movs	r2, #1
 800c324:	2140      	movs	r1, #64	; 0x40
 800c326:	4620      	mov	r0, r4
 800c328:	f7f6 fd9b 	bl	8002e62 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800c32c:	200a      	movs	r0, #10
 800c32e:	f7f4 f9bb 	bl	80006a8 <HAL_Delay>
  SDRAM_Initialization_sequence();
 800c332:	f7ff fd37 	bl	800bda4 <SDRAM_Initialization_sequence>
  HAL_Delay(10);
 800c336:	200a      	movs	r0, #10
 800c338:	f7f4 f9b6 	bl	80006a8 <HAL_Delay>
  CycleCounterInit();
 800c33c:	f7ff fd12 	bl	800bd64 <CycleCounterInit>
	 if(BSP_SD_IsDetected())
 800c340:	f7ff f916 	bl	800b570 <BSP_SD_IsDetected>
 800c344:	b108      	cbz	r0, 800c34a <main+0xf6>
	   FS_FileOperations();
 800c346:	f7ff fdc7 	bl	800bed8 <FS_FileOperations>
  if (HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values, NUM_ADC_CHANNELS) != HAL_OK)
 800c34a:	220c      	movs	r2, #12
 800c34c:	4912      	ldr	r1, [pc, #72]	; (800c398 <main+0x144>)
 800c34e:	4813      	ldr	r0, [pc, #76]	; (800c39c <main+0x148>)
 800c350:	f7f4 fce8 	bl	8000d24 <HAL_ADC_Start_DMA>
 800c354:	b108      	cbz	r0, 800c35a <main+0x106>
	  Error_Handler();
 800c356:	f7ff fedf 	bl	800c118 <Error_Handler>
    audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 800c35a:	4a11      	ldr	r2, [pc, #68]	; (800c3a0 <main+0x14c>)
 800c35c:	4911      	ldr	r1, [pc, #68]	; (800c3a4 <main+0x150>)
 800c35e:	4812      	ldr	r0, [pc, #72]	; (800c3a8 <main+0x154>)
 800c360:	f7fe fda4 	bl	800aeac <audioInit>
    startTimersForLEDs();
 800c364:	f7ff fe48 	bl	800bff8 <startTimersForLEDs>
 800c368:	e004      	b.n	800c374 <main+0x120>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800c36a:	2200      	movs	r2, #0
 800c36c:	2110      	movs	r1, #16
 800c36e:	480f      	ldr	r0, [pc, #60]	; (800c3ac <main+0x158>)
 800c370:	f7f6 fd77 	bl	8002e62 <HAL_GPIO_WritePin>
	  int tempIntGP = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800c374:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c378:	4806      	ldr	r0, [pc, #24]	; (800c394 <main+0x140>)
 800c37a:	f7f6 fd6b 	bl	8002e54 <HAL_GPIO_ReadPin>
	  if (tempIntGP)
 800c37e:	2800      	cmp	r0, #0
 800c380:	d0f3      	beq.n	800c36a <main+0x116>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800c382:	2201      	movs	r2, #1
 800c384:	2110      	movs	r1, #16
 800c386:	4809      	ldr	r0, [pc, #36]	; (800c3ac <main+0x158>)
 800c388:	f7f6 fd6b 	bl	8002e62 <HAL_GPIO_WritePin>
 800c38c:	e7f2      	b.n	800c374 <main+0x120>
 800c38e:	bf00      	nop
 800c390:	e000ed00 	.word	0xe000ed00
 800c394:	58020800 	.word	0x58020800
 800c398:	30000400 	.word	0x30000400
 800c39c:	20000194 	.word	0x20000194
 800c3a0:	200110ac 	.word	0x200110ac
 800c3a4:	20011234 	.word	0x20011234
 800c3a8:	2000ffa0 	.word	0x2000ffa0
 800c3ac:	58020400 	.word	0x58020400

0800c3b0 <MX_MDMA_Init>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel40_sdmmc1_command_end_0
  */
void MX_MDMA_Init(void) 
{
 800c3b0:	b500      	push	{lr}
 800c3b2:	b083      	sub	sp, #12

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 800c3b4:	4b16      	ldr	r3, [pc, #88]	; (800c410 <MX_MDMA_Init+0x60>)
 800c3b6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800c3ba:	f042 0201 	orr.w	r2, r2, #1
 800c3be:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800c3c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c3c6:	f003 0301 	and.w	r3, r3, #1
 800c3ca:	9301      	str	r3, [sp, #4]
 800c3cc:	9b01      	ldr	r3, [sp, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel40_sdmmc1_command_end_0 on MDMA_Channel0 */
  hmdma_mdma_channel40_sdmmc1_command_end_0.Instance = MDMA_Channel0;
 800c3ce:	4811      	ldr	r0, [pc, #68]	; (800c414 <MX_MDMA_Init+0x64>)
 800c3d0:	4b11      	ldr	r3, [pc, #68]	; (800c418 <MX_MDMA_Init+0x68>)
 800c3d2:	6003      	str	r3, [r0, #0]
  hmdma_mdma_channel40_sdmmc1_command_end_0.Init.Request = MDMA_REQUEST_SDMMC1_COMMAND_END;
 800c3d4:	231f      	movs	r3, #31
 800c3d6:	6043      	str	r3, [r0, #4]
  hmdma_mdma_channel40_sdmmc1_command_end_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	6083      	str	r3, [r0, #8]
  hmdma_mdma_channel40_sdmmc1_command_end_0.Init.Priority = MDMA_PRIORITY_LOW;
 800c3dc:	60c3      	str	r3, [r0, #12]
  hmdma_mdma_channel40_sdmmc1_command_end_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800c3de:	6103      	str	r3, [r0, #16]
  hmdma_mdma_channel40_sdmmc1_command_end_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 800c3e0:	2202      	movs	r2, #2
 800c3e2:	6142      	str	r2, [r0, #20]
  hmdma_mdma_channel40_sdmmc1_command_end_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 800c3e4:	2208      	movs	r2, #8
 800c3e6:	6182      	str	r2, [r0, #24]
  hmdma_mdma_channel40_sdmmc1_command_end_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 800c3e8:	61c3      	str	r3, [r0, #28]
  hmdma_mdma_channel40_sdmmc1_command_end_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 800c3ea:	6203      	str	r3, [r0, #32]
  hmdma_mdma_channel40_sdmmc1_command_end_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800c3ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c3f0:	6242      	str	r2, [r0, #36]	; 0x24
  hmdma_mdma_channel40_sdmmc1_command_end_0.Init.BufferTransferLength = 1;
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	6282      	str	r2, [r0, #40]	; 0x28
  hmdma_mdma_channel40_sdmmc1_command_end_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800c3f6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hmdma_mdma_channel40_sdmmc1_command_end_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 800c3f8:	6303      	str	r3, [r0, #48]	; 0x30
  hmdma_mdma_channel40_sdmmc1_command_end_0.Init.SourceBlockAddressOffset = 0;
 800c3fa:	6343      	str	r3, [r0, #52]	; 0x34
  hmdma_mdma_channel40_sdmmc1_command_end_0.Init.DestBlockAddressOffset = 0;
 800c3fc:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel40_sdmmc1_command_end_0) != HAL_OK)
 800c3fe:	f7f7 f985 	bl	800370c <HAL_MDMA_Init>
 800c402:	b910      	cbnz	r0, 800c40a <MX_MDMA_Init+0x5a>
  {
    Error_Handler();
  }

}
 800c404:	b003      	add	sp, #12
 800c406:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800c40a:	f7ff fe85 	bl	800c118 <Error_Handler>
}
 800c40e:	e7f9      	b.n	800c404 <MX_MDMA_Init+0x54>
 800c410:	58024400 	.word	0x58024400
 800c414:	2001102c 	.word	0x2001102c
 800c418:	52000040 	.word	0x52000040

0800c41c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800c41c:	b508      	push	{r3, lr}

  hrng.Instance = RNG;
 800c41e:	4806      	ldr	r0, [pc, #24]	; (800c438 <MX_RNG_Init+0x1c>)
 800c420:	4b06      	ldr	r3, [pc, #24]	; (800c43c <MX_RNG_Init+0x20>)
 800c422:	6003      	str	r3, [r0, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800c424:	2300      	movs	r3, #0
 800c426:	6043      	str	r3, [r0, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800c428:	f7f9 f984 	bl	8005734 <HAL_RNG_Init>
 800c42c:	b900      	cbnz	r0, 800c430 <MX_RNG_Init+0x14>
  {
    Error_Handler();
  }

}
 800c42e:	bd08      	pop	{r3, pc}
    Error_Handler();
 800c430:	f7ff fe72 	bl	800c118 <Error_Handler>
}
 800c434:	e7fb      	b.n	800c42e <MX_RNG_Init+0x12>
 800c436:	bf00      	nop
 800c438:	20011098 	.word	0x20011098
 800c43c:	48021800 	.word	0x48021800

0800c440 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{

  if(rngHandle->Instance==RNG)
 800c440:	6802      	ldr	r2, [r0, #0]
 800c442:	4b0a      	ldr	r3, [pc, #40]	; (800c46c <HAL_RNG_MspInit+0x2c>)
 800c444:	429a      	cmp	r2, r3
 800c446:	d000      	beq.n	800c44a <HAL_RNG_MspInit+0xa>
 800c448:	4770      	bx	lr
{
 800c44a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800c44c:	4b08      	ldr	r3, [pc, #32]	; (800c470 <HAL_RNG_MspInit+0x30>)
 800c44e:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800c452:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c456:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800c45a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c45e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c462:	9301      	str	r3, [sp, #4]
 800c464:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800c466:	b002      	add	sp, #8
 800c468:	4770      	bx	lr
 800c46a:	bf00      	nop
 800c46c:	48021800 	.word	0x48021800
 800c470:	58024400 	.word	0x58024400

0800c474 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800c474:	b508      	push	{r3, lr}

  hsai_BlockA1.Instance = SAI1_Block_A;
 800c476:	4819      	ldr	r0, [pc, #100]	; (800c4dc <MX_SAI1_Init+0x68>)
 800c478:	4b19      	ldr	r3, [pc, #100]	; (800c4e0 <MX_SAI1_Init+0x6c>)
 800c47a:	6003      	str	r3, [r0, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800c47c:	2100      	movs	r1, #0
 800c47e:	6041      	str	r1, [r0, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800c480:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 800c482:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c486:	6143      	str	r3, [r0, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800c488:	6181      	str	r1, [r0, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 800c48a:	2304      	movs	r3, #4
 800c48c:	61c3      	str	r3, [r0, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800c48e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c492:	6203      	str	r3, [r0, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800c494:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800c496:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800c498:	6301      	str	r1, [r0, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800c49a:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 800c49c:	2302      	movs	r3, #2
 800c49e:	2203      	movs	r2, #3
 800c4a0:	f7f9 fc88 	bl	8005db4 <HAL_SAI_InitProtocol>
 800c4a4:	b998      	cbnz	r0, 800c4ce <MX_SAI1_Init+0x5a>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 800c4a6:	480f      	ldr	r0, [pc, #60]	; (800c4e4 <MX_SAI1_Init+0x70>)
 800c4a8:	4b0f      	ldr	r3, [pc, #60]	; (800c4e8 <MX_SAI1_Init+0x74>)
 800c4aa:	6003      	str	r3, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800c4ac:	2203      	movs	r2, #3
 800c4ae:	6042      	str	r2, [r0, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	6083      	str	r3, [r0, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800c4b4:	2100      	movs	r1, #0
 800c4b6:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 800c4b8:	2304      	movs	r3, #4
 800c4ba:	61c3      	str	r3, [r0, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800c4bc:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800c4be:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800c4c0:	6301      	str	r1, [r0, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800c4c2:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 800c4c4:	2302      	movs	r3, #2
 800c4c6:	f7f9 fc75 	bl	8005db4 <HAL_SAI_InitProtocol>
 800c4ca:	b918      	cbnz	r0, 800c4d4 <MX_SAI1_Init+0x60>
  {
    Error_Handler();
  }

}
 800c4cc:	bd08      	pop	{r3, pc}
    Error_Handler();
 800c4ce:	f7ff fe23 	bl	800c118 <Error_Handler>
 800c4d2:	e7e8      	b.n	800c4a6 <MX_SAI1_Init+0x32>
    Error_Handler();
 800c4d4:	f7ff fe20 	bl	800c118 <Error_Handler>
}
 800c4d8:	e7f8      	b.n	800c4cc <MX_SAI1_Init+0x58>
 800c4da:	bf00      	nop
 800c4dc:	20011234 	.word	0x20011234
 800c4e0:	40015804 	.word	0x40015804
 800c4e4:	200110ac 	.word	0x200110ac
 800c4e8:	40015824 	.word	0x40015824

0800c4ec <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800c4ec:	b570      	push	{r4, r5, r6, lr}
 800c4ee:	b088      	sub	sp, #32
 800c4f0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800c4f2:	6802      	ldr	r2, [r0, #0]
 800c4f4:	4b58      	ldr	r3, [pc, #352]	; (800c658 <HAL_SAI_MspInit+0x16c>)
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d005      	beq.n	800c506 <HAL_SAI_MspInit+0x1a>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
    }
    if(hsai->Instance==SAI1_Block_B)
 800c4fa:	6822      	ldr	r2, [r4, #0]
 800c4fc:	4b57      	ldr	r3, [pc, #348]	; (800c65c <HAL_SAI_MspInit+0x170>)
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d056      	beq.n	800c5b0 <HAL_SAI_MspInit+0xc4>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
    }
}
 800c502:	b008      	add	sp, #32
 800c504:	bd70      	pop	{r4, r5, r6, pc}
    if (SAI1_client == 0)
 800c506:	4b56      	ldr	r3, [pc, #344]	; (800c660 <HAL_SAI_MspInit+0x174>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d037      	beq.n	800c57e <HAL_SAI_MspInit+0x92>
    SAI1_client ++;
 800c50e:	4a54      	ldr	r2, [pc, #336]	; (800c660 <HAL_SAI_MspInit+0x174>)
 800c510:	6813      	ldr	r3, [r2, #0]
 800c512:	3301      	adds	r3, #1
 800c514:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800c516:	2374      	movs	r3, #116	; 0x74
 800c518:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c51a:	2302      	movs	r3, #2
 800c51c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c51e:	2500      	movs	r5, #0
 800c520:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c522:	2603      	movs	r6, #3
 800c524:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800c526:	2306      	movs	r3, #6
 800c528:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c52a:	a903      	add	r1, sp, #12
 800c52c:	484d      	ldr	r0, [pc, #308]	; (800c664 <HAL_SAI_MspInit+0x178>)
 800c52e:	f7f6 fba1 	bl	8002c74 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 800c532:	484d      	ldr	r0, [pc, #308]	; (800c668 <HAL_SAI_MspInit+0x17c>)
 800c534:	4b4d      	ldr	r3, [pc, #308]	; (800c66c <HAL_SAI_MspInit+0x180>)
 800c536:	6003      	str	r3, [r0, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800c538:	2357      	movs	r3, #87	; 0x57
 800c53a:	6043      	str	r3, [r0, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c53c:	2340      	movs	r3, #64	; 0x40
 800c53e:	6083      	str	r3, [r0, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800c540:	60c5      	str	r5, [r0, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800c542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c546:	6103      	str	r3, [r0, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c54c:	6143      	str	r3, [r0, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c54e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c552:	6183      	str	r3, [r0, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800c554:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c558:	61c3      	str	r3, [r0, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800c55a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800c55e:	6203      	str	r3, [r0, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800c560:	2304      	movs	r3, #4
 800c562:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800c564:	6286      	str	r6, [r0, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 800c566:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800c568:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800c56a:	f7f5 f9e5 	bl	8001938 <HAL_DMA_Init>
 800c56e:	b9e0      	cbnz	r0, 800c5aa <HAL_SAI_MspInit+0xbe>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 800c570:	4b3d      	ldr	r3, [pc, #244]	; (800c668 <HAL_SAI_MspInit+0x17c>)
 800c572:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800c576:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 800c578:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800c57c:	e7bd      	b.n	800c4fa <HAL_SAI_MspInit+0xe>
       __HAL_RCC_SAI1_CLK_ENABLE();
 800c57e:	4b3c      	ldr	r3, [pc, #240]	; (800c670 <HAL_SAI_MspInit+0x184>)
 800c580:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800c584:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800c588:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800c58c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c590:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c594:	9301      	str	r3, [sp, #4]
 800c596:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 800c598:	2200      	movs	r2, #0
 800c59a:	4611      	mov	r1, r2
 800c59c:	2057      	movs	r0, #87	; 0x57
 800c59e:	f7f4 ff15 	bl	80013cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 800c5a2:	2057      	movs	r0, #87	; 0x57
 800c5a4:	f7f4 ff44 	bl	8001430 <HAL_NVIC_EnableIRQ>
 800c5a8:	e7b1      	b.n	800c50e <HAL_SAI_MspInit+0x22>
      Error_Handler();
 800c5aa:	f7ff fdb5 	bl	800c118 <Error_Handler>
 800c5ae:	e7df      	b.n	800c570 <HAL_SAI_MspInit+0x84>
      if (SAI1_client == 0)
 800c5b0:	4b2b      	ldr	r3, [pc, #172]	; (800c660 <HAL_SAI_MspInit+0x174>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d036      	beq.n	800c626 <HAL_SAI_MspInit+0x13a>
    SAI1_client ++;
 800c5b8:	4a29      	ldr	r2, [pc, #164]	; (800c660 <HAL_SAI_MspInit+0x174>)
 800c5ba:	6813      	ldr	r3, [r2, #0]
 800c5bc:	3301      	adds	r3, #1
 800c5be:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c5c0:	2308      	movs	r3, #8
 800c5c2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c5c4:	2302      	movs	r3, #2
 800c5c6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5c8:	2500      	movs	r5, #0
 800c5ca:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c5cc:	2603      	movs	r6, #3
 800c5ce:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800c5d0:	2306      	movs	r3, #6
 800c5d2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c5d4:	a903      	add	r1, sp, #12
 800c5d6:	4823      	ldr	r0, [pc, #140]	; (800c664 <HAL_SAI_MspInit+0x178>)
 800c5d8:	f7f6 fb4c 	bl	8002c74 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 800c5dc:	4825      	ldr	r0, [pc, #148]	; (800c674 <HAL_SAI_MspInit+0x188>)
 800c5de:	4b26      	ldr	r3, [pc, #152]	; (800c678 <HAL_SAI_MspInit+0x18c>)
 800c5e0:	6003      	str	r3, [r0, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800c5e2:	2358      	movs	r3, #88	; 0x58
 800c5e4:	6043      	str	r3, [r0, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c5e6:	6085      	str	r5, [r0, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800c5e8:	60c5      	str	r5, [r0, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800c5ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5ee:	6103      	str	r3, [r0, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c5f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c5f4:	6143      	str	r3, [r0, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c5f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c5fa:	6183      	str	r3, [r0, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800c5fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c600:	61c3      	str	r3, [r0, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800c602:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800c606:	6203      	str	r3, [r0, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800c608:	2304      	movs	r3, #4
 800c60a:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800c60c:	6286      	str	r6, [r0, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 800c60e:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800c610:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800c612:	f7f5 f991 	bl	8001938 <HAL_DMA_Init>
 800c616:	b9e0      	cbnz	r0, 800c652 <HAL_SAI_MspInit+0x166>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800c618:	4b16      	ldr	r3, [pc, #88]	; (800c674 <HAL_SAI_MspInit+0x188>)
 800c61a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800c61e:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800c620:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 800c624:	e76d      	b.n	800c502 <HAL_SAI_MspInit+0x16>
       __HAL_RCC_SAI1_CLK_ENABLE();
 800c626:	4b12      	ldr	r3, [pc, #72]	; (800c670 <HAL_SAI_MspInit+0x184>)
 800c628:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800c62c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800c630:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800c634:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c638:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c63c:	9302      	str	r3, [sp, #8]
 800c63e:	9b02      	ldr	r3, [sp, #8]
      HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 800c640:	2200      	movs	r2, #0
 800c642:	4611      	mov	r1, r2
 800c644:	2057      	movs	r0, #87	; 0x57
 800c646:	f7f4 fec1 	bl	80013cc <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI1_IRQn);
 800c64a:	2057      	movs	r0, #87	; 0x57
 800c64c:	f7f4 fef0 	bl	8001430 <HAL_NVIC_EnableIRQ>
 800c650:	e7b2      	b.n	800c5b8 <HAL_SAI_MspInit+0xcc>
      Error_Handler();
 800c652:	f7ff fd61 	bl	800c118 <Error_Handler>
 800c656:	e7df      	b.n	800c618 <HAL_SAI_MspInit+0x12c>
 800c658:	40015804 	.word	0x40015804
 800c65c:	40015824 	.word	0x40015824
 800c660:	20000184 	.word	0x20000184
 800c664:	58021000 	.word	0x58021000
 800c668:	20011144 	.word	0x20011144
 800c66c:	40020028 	.word	0x40020028
 800c670:	58024400 	.word	0x58024400
 800c674:	200111bc 	.word	0x200111bc
 800c678:	40020040 	.word	0x40020040

0800c67c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c67c:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 800c67e:	4b07      	ldr	r3, [pc, #28]	; (800c69c <SD_CheckStatus+0x20>)
 800c680:	2201      	movs	r2, #1
 800c682:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c684:	f7fe ff58 	bl	800b538 <BSP_SD_GetCardState>
 800c688:	b920      	cbnz	r0, 800c694 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 800c68a:	4a04      	ldr	r2, [pc, #16]	; (800c69c <SD_CheckStatus+0x20>)
 800c68c:	7813      	ldrb	r3, [r2, #0]
 800c68e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c692:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 800c694:	4b01      	ldr	r3, [pc, #4]	; (800c69c <SD_CheckStatus+0x20>)
 800c696:	7818      	ldrb	r0, [r3, #0]
}
 800c698:	bd08      	pop	{r3, pc}
 800c69a:	bf00      	nop
 800c69c:	2000000e 	.word	0x2000000e

0800c6a0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c6a0:	b510      	push	{r4, lr}
 800c6a2:	4604      	mov	r4, r0
Stat = STA_NOINIT;  
 800c6a4:	4b07      	ldr	r3, [pc, #28]	; (800c6c4 <SD_initialize+0x24>)
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c6aa:	f7fe ff71 	bl	800b590 <BSP_SD_Init>
 800c6ae:	b110      	cbz	r0, 800c6b6 <SD_initialize+0x16>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c6b0:	4b04      	ldr	r3, [pc, #16]	; (800c6c4 <SD_initialize+0x24>)
 800c6b2:	7818      	ldrb	r0, [r3, #0]
}
 800c6b4:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	f7ff ffe0 	bl	800c67c <SD_CheckStatus>
 800c6bc:	4b01      	ldr	r3, [pc, #4]	; (800c6c4 <SD_initialize+0x24>)
 800c6be:	7018      	strb	r0, [r3, #0]
 800c6c0:	e7f6      	b.n	800c6b0 <SD_initialize+0x10>
 800c6c2:	bf00      	nop
 800c6c4:	2000000e 	.word	0x2000000e

0800c6c8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c6c8:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 800c6ca:	f7ff ffd7 	bl	800c67c <SD_CheckStatus>
}
 800c6ce:	bd08      	pop	{r3, pc}

0800c6d0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c6d0:	b508      	push	{r3, lr}
 800c6d2:	4608      	mov	r0, r1
 800c6d4:	4611      	mov	r1, r2
 800c6d6:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800c6d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6dc:	f7fe ff0c 	bl	800b4f8 <BSP_SD_ReadBlocks>
 800c6e0:	b920      	cbnz	r0, 800c6ec <SD_read+0x1c>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c6e2:	f7fe ff29 	bl	800b538 <BSP_SD_GetCardState>
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	d1fb      	bne.n	800c6e2 <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 800c6ea:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 800c6ec:	2001      	movs	r0, #1
 800c6ee:	e7fc      	b.n	800c6ea <SD_read+0x1a>

0800c6f0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c6f0:	b508      	push	{r3, lr}
 800c6f2:	4608      	mov	r0, r1
 800c6f4:	4611      	mov	r1, r2
 800c6f6:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800c6f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6fc:	f7fe ff0c 	bl	800b518 <BSP_SD_WriteBlocks>
 800c700:	b920      	cbnz	r0, 800c70c <SD_write+0x1c>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800c702:	f7fe ff19 	bl	800b538 <BSP_SD_GetCardState>
 800c706:	2800      	cmp	r0, #0
 800c708:	d1fb      	bne.n	800c702 <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 800c70a:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 800c70c:	2001      	movs	r0, #1
 800c70e:	e7fc      	b.n	800c70a <SD_write+0x1a>

0800c710 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c710:	4b15      	ldr	r3, [pc, #84]	; (800c768 <SD_ioctl+0x58>)
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	f013 0f01 	tst.w	r3, #1
 800c718:	d121      	bne.n	800c75e <SD_ioctl+0x4e>
{
 800c71a:	b510      	push	{r4, lr}
 800c71c:	b08a      	sub	sp, #40	; 0x28
 800c71e:	4614      	mov	r4, r2

  switch (cmd)
 800c720:	2903      	cmp	r1, #3
 800c722:	d81e      	bhi.n	800c762 <SD_ioctl+0x52>
 800c724:	e8df f001 	tbb	[pc, r1]
 800c728:	130c0502 	.word	0x130c0502
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c72c:	2000      	movs	r0, #0
  default:
    res = RES_PARERR;
  }

  return res;
}
 800c72e:	b00a      	add	sp, #40	; 0x28
 800c730:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800c732:	a801      	add	r0, sp, #4
 800c734:	f7fe ff0a 	bl	800b54c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c738:	9b07      	ldr	r3, [sp, #28]
 800c73a:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 800c73c:	2000      	movs	r0, #0
    break;
 800c73e:	e7f6      	b.n	800c72e <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 800c740:	a801      	add	r0, sp, #4
 800c742:	f7fe ff03 	bl	800b54c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c746:	9b08      	ldr	r3, [sp, #32]
 800c748:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 800c74a:	2000      	movs	r0, #0
    break;
 800c74c:	e7ef      	b.n	800c72e <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 800c74e:	a801      	add	r0, sp, #4
 800c750:	f7fe fefc 	bl	800b54c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c754:	9b08      	ldr	r3, [sp, #32]
 800c756:	0a5b      	lsrs	r3, r3, #9
 800c758:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 800c75a:	2000      	movs	r0, #0
    break;
 800c75c:	e7e7      	b.n	800c72e <SD_ioctl+0x1e>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c75e:	2003      	movs	r0, #3
}
 800c760:	4770      	bx	lr
    res = RES_PARERR;
 800c762:	2004      	movs	r0, #4
 800c764:	e7e3      	b.n	800c72e <SD_ioctl+0x1e>
 800c766:	bf00      	nop
 800c768:	2000000e 	.word	0x2000000e

0800c76c <MX_SDMMC1_SD_Init>:
/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{

  hsd1.Instance = SDMMC1;
 800c76c:	4b09      	ldr	r3, [pc, #36]	; (800c794 <MX_SDMMC1_SD_Init+0x28>)
 800c76e:	4a0a      	ldr	r2, [pc, #40]	; (800c798 <MX_SDMMC1_SD_Init+0x2c>)
 800c770:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800c772:	2200      	movs	r2, #0
 800c774:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 800c776:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c77a:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800c77c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c780:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 800c782:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c786:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 7;
 800c788:	2207      	movs	r2, #7
 800c78a:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 800c78c:	2201      	movs	r2, #1
 800c78e:	619a      	str	r2, [r3, #24]

}
 800c790:	4770      	bx	lr
 800c792:	bf00      	nop
 800c794:	200112cc 	.word	0x200112cc
 800c798:	52007000 	.word	0x52007000

0800c79c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800c79c:	b570      	push	{r4, r5, r6, lr}
 800c79e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	9303      	str	r3, [sp, #12]
 800c7a4:	9304      	str	r3, [sp, #16]
 800c7a6:	9305      	str	r3, [sp, #20]
 800c7a8:	9306      	str	r3, [sp, #24]
 800c7aa:	9307      	str	r3, [sp, #28]
  if(sdHandle->Instance==SDMMC1)
 800c7ac:	6802      	ldr	r2, [r0, #0]
 800c7ae:	4b26      	ldr	r3, [pc, #152]	; (800c848 <HAL_SD_MspInit+0xac>)
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d001      	beq.n	800c7b8 <HAL_SD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800c7b4:	b008      	add	sp, #32
 800c7b6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800c7b8:	4b24      	ldr	r3, [pc, #144]	; (800c84c <HAL_SD_MspInit+0xb0>)
 800c7ba:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800c7be:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c7c2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800c7c6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800c7ca:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 800c7ce:	9200      	str	r2, [sp, #0]
 800c7d0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c7d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800c7d6:	f042 0204 	orr.w	r2, r2, #4
 800c7da:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800c7de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800c7e2:	f002 0204 	and.w	r2, r2, #4
 800c7e6:	9201      	str	r2, [sp, #4]
 800c7e8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c7ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800c7ee:	f042 0208 	orr.w	r2, r2, #8
 800c7f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800c7f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c7fa:	f003 0308 	and.w	r3, r3, #8
 800c7fe:	9302      	str	r3, [sp, #8]
 800c800:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800c802:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800c806:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c808:	2402      	movs	r4, #2
 800c80a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c80c:	2501      	movs	r5, #1
 800c80e:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c810:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800c812:	260c      	movs	r6, #12
 800c814:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c816:	eb0d 0106 	add.w	r1, sp, r6
 800c81a:	480d      	ldr	r0, [pc, #52]	; (800c850 <HAL_SD_MspInit+0xb4>)
 800c81c:	f7f6 fa2a 	bl	8002c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c820:	2304      	movs	r3, #4
 800c822:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c824:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c826:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c828:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800c82a:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c82c:	eb0d 0106 	add.w	r1, sp, r6
 800c830:	4808      	ldr	r0, [pc, #32]	; (800c854 <HAL_SD_MspInit+0xb8>)
 800c832:	f7f6 fa1f 	bl	8002c74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 1, 0);
 800c836:	2200      	movs	r2, #0
 800c838:	4629      	mov	r1, r5
 800c83a:	2031      	movs	r0, #49	; 0x31
 800c83c:	f7f4 fdc6 	bl	80013cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800c840:	2031      	movs	r0, #49	; 0x31
 800c842:	f7f4 fdf5 	bl	8001430 <HAL_NVIC_EnableIRQ>
}
 800c846:	e7b5      	b.n	800c7b4 <HAL_SD_MspInit+0x18>
 800c848:	52007000 	.word	0x52007000
 800c84c:	58024400 	.word	0x58024400
 800c850:	58020800 	.word	0x58020800
 800c854:	58020c00 	.word	0x58020c00

0800c858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c858:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c85a:	4b07      	ldr	r3, [pc, #28]	; (800c878 <HAL_MspInit+0x20>)
 800c85c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800c860:	f042 0202 	orr.w	r2, r2, #2
 800c864:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800c868:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c86c:	f003 0302 	and.w	r3, r3, #2
 800c870:	9301      	str	r3, [sp, #4]
 800c872:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c874:	b002      	add	sp, #8
 800c876:	4770      	bx	lr
 800c878:	58024400 	.word	0x58024400

0800c87c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800c87c:	4770      	bx	lr

0800c87e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c87e:	e7fe      	b.n	800c87e <HardFault_Handler>

0800c880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c880:	e7fe      	b.n	800c880 <MemManage_Handler>

0800c882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c882:	e7fe      	b.n	800c882 <BusFault_Handler>

0800c884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c884:	e7fe      	b.n	800c884 <UsageFault_Handler>

0800c886 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c886:	4770      	bx	lr

0800c888 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c888:	4770      	bx	lr

0800c88a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c88a:	4770      	bx	lr

0800c88c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c88c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c88e:	f7f3 fef9 	bl	8000684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c892:	bd08      	pop	{r3, pc}

0800c894 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800c894:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800c896:	4802      	ldr	r0, [pc, #8]	; (800c8a0 <DMA1_Stream0_IRQHandler+0xc>)
 800c898:	f7f5 fe4e 	bl	8002538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800c89c:	bd08      	pop	{r3, pc}
 800c89e:	bf00      	nop
 800c8a0:	200001f8 	.word	0x200001f8

0800c8a4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800c8a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800c8a6:	4802      	ldr	r0, [pc, #8]	; (800c8b0 <DMA1_Stream1_IRQHandler+0xc>)
 800c8a8:	f7f5 fe46 	bl	8002538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800c8ac:	bd08      	pop	{r3, pc}
 800c8ae:	bf00      	nop
 800c8b0:	20011144 	.word	0x20011144

0800c8b4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800c8b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800c8b6:	4802      	ldr	r0, [pc, #8]	; (800c8c0 <DMA1_Stream2_IRQHandler+0xc>)
 800c8b8:	f7f5 fe3e 	bl	8002538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800c8bc:	bd08      	pop	{r3, pc}
 800c8be:	bf00      	nop
 800c8c0:	200111bc 	.word	0x200111bc

0800c8c4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800c8c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800c8c6:	4802      	ldr	r0, [pc, #8]	; (800c8d0 <SDMMC1_IRQHandler+0xc>)
 800c8c8:	f7fa fd10 	bl	80072ec <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800c8cc:	bd08      	pop	{r3, pc}
 800c8ce:	bf00      	nop
 800c8d0:	200112cc 	.word	0x200112cc

0800c8d4 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 800c8d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 800c8d6:	4803      	ldr	r0, [pc, #12]	; (800c8e4 <SAI1_IRQHandler+0x10>)
 800c8d8:	f7f9 fc3a 	bl	8006150 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB1);
 800c8dc:	4802      	ldr	r0, [pc, #8]	; (800c8e8 <SAI1_IRQHandler+0x14>)
 800c8de:	f7f9 fc37 	bl	8006150 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 800c8e2:	bd08      	pop	{r3, pc}
 800c8e4:	20011234 	.word	0x20011234
 800c8e8:	200110ac 	.word	0x200110ac

0800c8ec <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800c8ec:	4a18      	ldr	r2, [pc, #96]	; (800c950 <SystemInit+0x64>)
 800c8ee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800c8f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c8f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800c8fa:	4b16      	ldr	r3, [pc, #88]	; (800c954 <SystemInit+0x68>)
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	f042 0201 	orr.w	r2, r2, #1
 800c902:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800c904:	2200      	movs	r2, #0
 800c906:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800c908:	6818      	ldr	r0, [r3, #0]
 800c90a:	4913      	ldr	r1, [pc, #76]	; (800c958 <SystemInit+0x6c>)
 800c90c:	4001      	ands	r1, r0
 800c90e:	6019      	str	r1, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800c910:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800c912:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800c914:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800c916:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800c918:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800c91a:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800c91c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800c91e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800c920:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800c922:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800c924:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800c926:	6819      	ldr	r1, [r3, #0]
 800c928:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800c92c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800c92e:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800c930:	4b0a      	ldr	r3, [pc, #40]	; (800c95c <SystemInit+0x70>)
 800c932:	681a      	ldr	r2, [r3, #0]
 800c934:	4b0a      	ldr	r3, [pc, #40]	; (800c960 <SystemInit+0x74>)
 800c936:	4013      	ands	r3, r2
 800c938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c93c:	d202      	bcs.n	800c944 <SystemInit+0x58>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800c93e:	4b09      	ldr	r3, [pc, #36]	; (800c964 <SystemInit+0x78>)
 800c940:	2201      	movs	r2, #1
 800c942:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c944:	4b02      	ldr	r3, [pc, #8]	; (800c950 <SystemInit+0x64>)
 800c946:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c94a:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800c94c:	4770      	bx	lr
 800c94e:	bf00      	nop
 800c950:	e000ed00 	.word	0xe000ed00
 800c954:	58024400 	.word	0x58024400
 800c958:	eaf6ed7f 	.word	0xeaf6ed7f
 800c95c:	5c001000 	.word	0x5c001000
 800c960:	ffff0000 	.word	0xffff0000
 800c964:	51008108 	.word	0x51008108

0800c968 <RGB_LED_setColor>:
uint16_t greenScaled[17] = {210, 580, 600, 610, 660, 700, 740, 790, 850, 950, 1010, 1150, 1230, 1350, 1460, 1500, 2000};
uint16_t blueScaled[17] = {210, 580, 600, 610, 700, 740, 790, 820, 850, 950, 1010, 1150, 1230, 1320, 1420, 1500, 1800};


void RGB_LED_setColor(uint8_t Red, uint8_t Green, uint8_t Blue) //inputs between 0-255
{
 800c968:	b082      	sub	sp, #8
	float floatyPoint;
	uint8_t intPart;
	float fractPart;
	float endValue;

	floatyPoint = ((float)Red) * 0.0625f;
 800c96a:	ee07 0a90 	vmov	s15, r0
 800c96e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800c972:	ed9f 5a4b 	vldr	s10, [pc, #300]	; 800caa0 <RGB_LED_setColor+0x138>
 800c976:	ee26 6a05 	vmul.f32	s12, s12, s10
	intPart = (uint8_t)floatyPoint;
 800c97a:	eefc 7ac6 	vcvt.u32.f32	s15, s12
 800c97e:	edcd 7a01 	vstr	s15, [sp, #4]
 800c982:	f89d 3004 	ldrb.w	r3, [sp, #4]
	fractPart = floatyPoint - ((float)intPart);
 800c986:	ee07 3a90 	vmov	s15, r3
 800c98a:	eef8 5a67 	vcvt.f32.u32	s11, s15
 800c98e:	ee76 5a65 	vsub.f32	s11, s12, s11
	endValue = (redScaled[intPart] * 1.2f * (1.0f - fractPart)) + (redScaled[intPart + 1] * 1.2f* (fractPart));
 800c992:	4844      	ldr	r0, [pc, #272]	; (800caa4 <RGB_LED_setColor+0x13c>)
 800c994:	f830 c013 	ldrh.w	ip, [r0, r3, lsl #1]
 800c998:	ee07 ca90 	vmov	s15, ip
 800c99c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c9a0:	eddf 6a41 	vldr	s13, [pc, #260]	; 800caa8 <RGB_LED_setColor+0x140>
 800c9a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c9a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9ac:	ee37 6a65 	vsub.f32	s12, s14, s11
 800c9b0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800c9ba:	ee06 3a10 	vmov	s12, r3
 800c9be:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800c9c2:	ee26 6a26 	vmul.f32	s12, s12, s13
 800c9c6:	ee26 6a25 	vmul.f32	s12, s12, s11
 800c9ca:	ee77 7a86 	vadd.f32	s15, s15, s12

	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_E].CMP2xR = (uint16_t)endValue;
 800c9ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9d2:	ee17 3a90 	vmov	r3, s15
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	4834      	ldr	r0, [pc, #208]	; (800caac <RGB_LED_setColor+0x144>)
 800c9da:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

	floatyPoint = ((float)Green) * 0.0625f;
 800c9de:	ee07 1a90 	vmov	s15, r1
 800c9e2:	eef8 5a67 	vcvt.f32.u32	s11, s15
 800c9e6:	ee65 5a85 	vmul.f32	s11, s11, s10
	intPart = (uint8_t)floatyPoint;
 800c9ea:	eefc 7ae5 	vcvt.u32.f32	s15, s11
 800c9ee:	edcd 7a01 	vstr	s15, [sp, #4]
 800c9f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
	fractPart = floatyPoint - ((float)intPart);
 800c9f6:	ee07 3a90 	vmov	s15, r3
 800c9fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9fe:	ee75 5ae6 	vsub.f32	s11, s11, s13
	endValue = (greenScaled[intPart] * (1.0f - fractPart)) + (greenScaled[intPart + 1] * (fractPart));
 800ca02:	492b      	ldr	r1, [pc, #172]	; (800cab0 <RGB_LED_setColor+0x148>)
 800ca04:	f831 c013 	ldrh.w	ip, [r1, r3, lsl #1]
 800ca08:	ee06 ca90 	vmov	s13, ip
 800ca0c:	ee37 6a65 	vsub.f32	s12, s14, s11
 800ca10:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ca14:	ee26 6a86 	vmul.f32	s12, s13, s12
 800ca18:	3301      	adds	r3, #1
 800ca1a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ca1e:	ee06 3a90 	vmov	s13, r3
 800ca22:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ca26:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800ca2a:	ee76 6a26 	vadd.f32	s13, s12, s13

	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP2xR =(uint16_t)endValue;
 800ca2e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800ca32:	ee16 3a90 	vmov	r3, s13
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124

	floatyPoint = ((float)Blue) * 0.0625f;
 800ca3c:	ee07 2a90 	vmov	s15, r2
 800ca40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca44:	ee66 6a85 	vmul.f32	s13, s13, s10
	intPart = (uint8_t)floatyPoint;
 800ca48:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800ca4c:	edcd 7a01 	vstr	s15, [sp, #4]
 800ca50:	f89d 3004 	ldrb.w	r3, [sp, #4]
	fractPart = floatyPoint - ((float)intPart);
 800ca54:	ee07 3a90 	vmov	s15, r3
 800ca58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca5c:	ee76 6ae7 	vsub.f32	s13, s13, s15
	endValue = (blueScaled[intPart] * (1.0f - fractPart)) + (blueScaled[intPart + 1] * (fractPart));
 800ca60:	4a14      	ldr	r2, [pc, #80]	; (800cab4 <RGB_LED_setColor+0x14c>)
 800ca62:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800ca66:	ee07 1a90 	vmov	s15, r1
 800ca6a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ca6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca72:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ca76:	3301      	adds	r3, #1
 800ca78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca7c:	ee07 3a90 	vmov	s15, r3
 800ca80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ca88:	ee77 7a27 	vadd.f32	s15, s14, s15

	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP1xR =(uint16_t)endValue;
 800ca8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca90:	ee17 3a90 	vmov	r3, s15
 800ca94:	b29b      	uxth	r3, r3
 800ca96:	f8c0 319c 	str.w	r3, [r0, #412]	; 0x19c

}
 800ca9a:	b002      	add	sp, #8
 800ca9c:	4770      	bx	lr
 800ca9e:	bf00      	nop
 800caa0:	3d800000 	.word	0x3d800000
 800caa4:	20000074 	.word	0x20000074
 800caa8:	3f99999a 	.word	0x3f99999a
 800caac:	40017400 	.word	0x40017400
 800cab0:	20000050 	.word	0x20000050
 800cab4:	20000018 	.word	0x20000018

0800cab8 <setLED_B>:



void setLED_B(uint8_t brightness) //inputs between 0-255
{
	if (brightness > 5)
 800cab8:	2805      	cmp	r0, #5
 800caba:	d804      	bhi.n	800cac6 <setLED_B+0xe>
	{
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP2xR =((uint16_t)brightness) << 6;
	}
	else
	{
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP2xR = 200;
 800cabc:	4b04      	ldr	r3, [pc, #16]	; (800cad0 <setLED_B+0x18>)
 800cabe:	22c8      	movs	r2, #200	; 0xc8
 800cac0:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	}
}
 800cac4:	4770      	bx	lr
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP2xR =((uint16_t)brightness) << 6;
 800cac6:	0180      	lsls	r0, r0, #6
 800cac8:	4b01      	ldr	r3, [pc, #4]	; (800cad0 <setLED_B+0x18>)
 800caca:	f8c3 01a4 	str.w	r0, [r3, #420]	; 0x1a4
 800cace:	4770      	bx	lr
 800cad0:	40017400 	.word	0x40017400

0800cad4 <setLED_C>:


void setLED_C(uint8_t brightness)//inputs between 0-255
{
	if (brightness > 5)
 800cad4:	2805      	cmp	r0, #5
 800cad6:	d804      	bhi.n	800cae2 <setLED_C+0xe>
	{
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR =((uint16_t)brightness) << 6;
	}
	else
	{
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR = 200;
 800cad8:	4b04      	ldr	r3, [pc, #16]	; (800caec <setLED_C+0x18>)
 800cada:	22c8      	movs	r2, #200	; 0xc8
 800cadc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	}
}
 800cae0:	4770      	bx	lr
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR =((uint16_t)brightness) << 6;
 800cae2:	0180      	lsls	r0, r0, #6
 800cae4:	4b01      	ldr	r3, [pc, #4]	; (800caec <setLED_C+0x18>)
 800cae6:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
 800caea:	4770      	bx	lr
 800caec:	40017400 	.word	0x40017400

0800caf0 <displayColorsForCurrentPreset>:

	}
}

void displayColorsForCurrentPreset(void)
{
 800caf0:	b508      	push	{r3, lr}
	RGB_LED_setColor(colorsForPresets[currentPreset][0], colorsForPresets[currentPreset][1], colorsForPresets[currentPreset][2]);
 800caf2:	4b06      	ldr	r3, [pc, #24]	; (800cb0c <displayColorsForCurrentPreset+0x1c>)
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	4806      	ldr	r0, [pc, #24]	; (800cb10 <displayColorsForCurrentPreset+0x20>)
 800caf8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cafc:	18c1      	adds	r1, r0, r3
 800cafe:	788a      	ldrb	r2, [r1, #2]
 800cb00:	7849      	ldrb	r1, [r1, #1]
 800cb02:	5cc0      	ldrb	r0, [r0, r3]
 800cb04:	f7ff ff30 	bl	800c968 <RGB_LED_setColor>
}
 800cb08:	bd08      	pop	{r3, pc}
 800cb0a:	bf00      	nop
 800cb0c:	20000188 	.word	0x20000188
 800cb10:	2000003c 	.word	0x2000003c

0800cb14 <buttonCheck>:
{
 800cb14:	b538      	push	{r3, r4, r5, lr}
	if (codecReady)
 800cb16:	4b4d      	ldr	r3, [pc, #308]	; (800cc4c <buttonCheck+0x138>)
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	b903      	cbnz	r3, 800cb1e <buttonCheck+0xa>
}
 800cb1c:	bd38      	pop	{r3, r4, r5, pc}
		buttonValues[0] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13);//A
 800cb1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800cb22:	484b      	ldr	r0, [pc, #300]	; (800cc50 <buttonCheck+0x13c>)
 800cb24:	f7f6 f996 	bl	8002e54 <HAL_GPIO_ReadPin>
 800cb28:	fab0 f080 	clz	r0, r0
 800cb2c:	0940      	lsrs	r0, r0, #5
 800cb2e:	4c49      	ldr	r4, [pc, #292]	; (800cc54 <buttonCheck+0x140>)
 800cb30:	7020      	strb	r0, [r4, #0]
		buttonValues[1] = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6); //B
 800cb32:	4d49      	ldr	r5, [pc, #292]	; (800cc58 <buttonCheck+0x144>)
 800cb34:	2140      	movs	r1, #64	; 0x40
 800cb36:	4628      	mov	r0, r5
 800cb38:	f7f6 f98c 	bl	8002e54 <HAL_GPIO_ReadPin>
 800cb3c:	fab0 f080 	clz	r0, r0
 800cb40:	0940      	lsrs	r0, r0, #5
 800cb42:	7060      	strb	r0, [r4, #1]
		buttonValues[2] = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7); //C
 800cb44:	2180      	movs	r1, #128	; 0x80
 800cb46:	4628      	mov	r0, r5
 800cb48:	f7f6 f984 	bl	8002e54 <HAL_GPIO_ReadPin>
 800cb4c:	fab0 f080 	clz	r0, r0
 800cb50:	0940      	lsrs	r0, r0, #5
 800cb52:	70a0      	strb	r0, [r4, #2]
		buttonValues[3] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_6); //D
 800cb54:	2140      	movs	r1, #64	; 0x40
 800cb56:	4841      	ldr	r0, [pc, #260]	; (800cc5c <buttonCheck+0x148>)
 800cb58:	f7f6 f97c 	bl	8002e54 <HAL_GPIO_ReadPin>
 800cb5c:	fab0 f080 	clz	r0, r0
 800cb60:	0940      	lsrs	r0, r0, #5
 800cb62:	70e0      	strb	r0, [r4, #3]
		for (int i = 0; i < NUM_BUTTONS; i++)
 800cb64:	2300      	movs	r3, #0
 800cb66:	e016      	b.n	800cb96 <buttonCheck+0x82>
			else if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] >= 1))
 800cb68:	428a      	cmp	r2, r1
 800cb6a:	d013      	beq.n	800cb94 <buttonCheck+0x80>
 800cb6c:	493c      	ldr	r1, [pc, #240]	; (800cc60 <buttonCheck+0x14c>)
 800cb6e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cb72:	b179      	cbz	r1, 800cb94 <buttonCheck+0x80>
				if (buttonValues[i] == 1)
 800cb74:	2a01      	cmp	r2, #1
 800cb76:	d004      	beq.n	800cb82 <buttonCheck+0x6e>
				else if (buttonValues[i] == 0)
 800cb78:	b932      	cbnz	r2, 800cb88 <buttonCheck+0x74>
					buttonReleased[i] = 1;
 800cb7a:	493a      	ldr	r1, [pc, #232]	; (800cc64 <buttonCheck+0x150>)
 800cb7c:	2001      	movs	r0, #1
 800cb7e:	54c8      	strb	r0, [r1, r3]
 800cb80:	e002      	b.n	800cb88 <buttonCheck+0x74>
					buttonPressed[i] = 1;
 800cb82:	4939      	ldr	r1, [pc, #228]	; (800cc68 <buttonCheck+0x154>)
 800cb84:	2001      	movs	r0, #1
 800cb86:	54c8      	strb	r0, [r1, r3]
				buttonValuesPrev[i] = buttonValues[i];
 800cb88:	4938      	ldr	r1, [pc, #224]	; (800cc6c <buttonCheck+0x158>)
 800cb8a:	54ca      	strb	r2, [r1, r3]
				buttonCounters[i] = 0;
 800cb8c:	4a34      	ldr	r2, [pc, #208]	; (800cc60 <buttonCheck+0x14c>)
 800cb8e:	2100      	movs	r1, #0
 800cb90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < NUM_BUTTONS; i++)
 800cb94:	3301      	adds	r3, #1
 800cb96:	2b03      	cmp	r3, #3
 800cb98:	dc0f      	bgt.n	800cbba <buttonCheck+0xa6>
			if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] < 1))
 800cb9a:	4a2e      	ldr	r2, [pc, #184]	; (800cc54 <buttonCheck+0x140>)
 800cb9c:	5cd2      	ldrb	r2, [r2, r3]
 800cb9e:	4933      	ldr	r1, [pc, #204]	; (800cc6c <buttonCheck+0x158>)
 800cba0:	5cc9      	ldrb	r1, [r1, r3]
 800cba2:	428a      	cmp	r2, r1
 800cba4:	d0e0      	beq.n	800cb68 <buttonCheck+0x54>
 800cba6:	482e      	ldr	r0, [pc, #184]	; (800cc60 <buttonCheck+0x14c>)
 800cba8:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800cbac:	2800      	cmp	r0, #0
 800cbae:	d1db      	bne.n	800cb68 <buttonCheck+0x54>
				buttonCounters[i]++;
 800cbb0:	3001      	adds	r0, #1
 800cbb2:	4a2b      	ldr	r2, [pc, #172]	; (800cc60 <buttonCheck+0x14c>)
 800cbb4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 800cbb8:	e7ec      	b.n	800cb94 <buttonCheck+0x80>
		if (buttonPressed[0] == 1)
 800cbba:	4b2b      	ldr	r3, [pc, #172]	; (800cc68 <buttonCheck+0x154>)
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	2b01      	cmp	r3, #1
 800cbc0:	d019      	beq.n	800cbf6 <buttonCheck+0xe2>
		if (buttonPressed[1] == 1)
 800cbc2:	4b29      	ldr	r3, [pc, #164]	; (800cc68 <buttonCheck+0x154>)
 800cbc4:	785b      	ldrb	r3, [r3, #1]
 800cbc6:	2b01      	cmp	r3, #1
 800cbc8:	d023      	beq.n	800cc12 <buttonCheck+0xfe>
		if (buttonPressed[2] == 1)
 800cbca:	4b27      	ldr	r3, [pc, #156]	; (800cc68 <buttonCheck+0x154>)
 800cbcc:	789b      	ldrb	r3, [r3, #2]
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	d02d      	beq.n	800cc2e <buttonCheck+0x11a>
		if (buttonPressed[2] == 1)
 800cbd2:	4b25      	ldr	r3, [pc, #148]	; (800cc68 <buttonCheck+0x154>)
 800cbd4:	789b      	ldrb	r3, [r3, #2]
 800cbd6:	2b01      	cmp	r3, #1
 800cbd8:	d1a0      	bne.n	800cb1c <buttonCheck+0x8>
			mode[2] = !mode[2];
 800cbda:	4b25      	ldr	r3, [pc, #148]	; (800cc70 <buttonCheck+0x15c>)
 800cbdc:	6898      	ldr	r0, [r3, #8]
 800cbde:	fab0 f080 	clz	r0, r0
 800cbe2:	0940      	lsrs	r0, r0, #5
 800cbe4:	6098      	str	r0, [r3, #8]
			setLED_C(mode[2] * 255);
 800cbe6:	4240      	negs	r0, r0
 800cbe8:	b2c0      	uxtb	r0, r0
 800cbea:	f7ff ff73 	bl	800cad4 <setLED_C>
			buttonPressed[3] = 0;
 800cbee:	4b1e      	ldr	r3, [pc, #120]	; (800cc68 <buttonCheck+0x154>)
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	70da      	strb	r2, [r3, #3]
}
 800cbf4:	e792      	b.n	800cb1c <buttonCheck+0x8>
			previousPreset = currentPreset;
 800cbf6:	4b1f      	ldr	r3, [pc, #124]	; (800cc74 <buttonCheck+0x160>)
 800cbf8:	7819      	ldrb	r1, [r3, #0]
 800cbfa:	4a1f      	ldr	r2, [pc, #124]	; (800cc78 <buttonCheck+0x164>)
 800cbfc:	7011      	strb	r1, [r2, #0]
			if (currentPreset >= PresetNil - 1) currentPreset = 0;
 800cbfe:	2400      	movs	r4, #0
 800cc00:	701c      	strb	r4, [r3, #0]
			loadingPreset = 1;
 800cc02:	4b1e      	ldr	r3, [pc, #120]	; (800cc7c <buttonCheck+0x168>)
 800cc04:	2201      	movs	r2, #1
 800cc06:	701a      	strb	r2, [r3, #0]
			displayColorsForCurrentPreset();
 800cc08:	f7ff ff72 	bl	800caf0 <displayColorsForCurrentPreset>
			buttonPressed[0] = 0;
 800cc0c:	4b16      	ldr	r3, [pc, #88]	; (800cc68 <buttonCheck+0x154>)
 800cc0e:	701c      	strb	r4, [r3, #0]
 800cc10:	e7d7      	b.n	800cbc2 <buttonCheck+0xae>
			mode[0] = !mode[0];
 800cc12:	4b17      	ldr	r3, [pc, #92]	; (800cc70 <buttonCheck+0x15c>)
 800cc14:	6818      	ldr	r0, [r3, #0]
 800cc16:	fab0 f080 	clz	r0, r0
 800cc1a:	0940      	lsrs	r0, r0, #5
 800cc1c:	6018      	str	r0, [r3, #0]
			setLED_B(mode[0] * 255);
 800cc1e:	4240      	negs	r0, r0
 800cc20:	b2c0      	uxtb	r0, r0
 800cc22:	f7ff ff49 	bl	800cab8 <setLED_B>
			buttonPressed[1] = 0;
 800cc26:	4b10      	ldr	r3, [pc, #64]	; (800cc68 <buttonCheck+0x154>)
 800cc28:	2200      	movs	r2, #0
 800cc2a:	705a      	strb	r2, [r3, #1]
 800cc2c:	e7cd      	b.n	800cbca <buttonCheck+0xb6>
			mode[1] = !mode[1];
 800cc2e:	4b10      	ldr	r3, [pc, #64]	; (800cc70 <buttonCheck+0x15c>)
 800cc30:	6858      	ldr	r0, [r3, #4]
 800cc32:	fab0 f080 	clz	r0, r0
 800cc36:	0940      	lsrs	r0, r0, #5
 800cc38:	6058      	str	r0, [r3, #4]
			setLED_C(mode[1] * 255);
 800cc3a:	4240      	negs	r0, r0
 800cc3c:	b2c0      	uxtb	r0, r0
 800cc3e:	f7ff ff49 	bl	800cad4 <setLED_C>
			buttonPressed[2] = 0;
 800cc42:	4b09      	ldr	r3, [pc, #36]	; (800cc68 <buttonCheck+0x154>)
 800cc44:	2200      	movs	r2, #0
 800cc46:	709a      	strb	r2, [r3, #2]
 800cc48:	e7c3      	b.n	800cbd2 <buttonCheck+0xbe>
 800cc4a:	bf00      	nop
 800cc4c:	20000148 	.word	0x20000148
 800cc50:	58020c00 	.word	0x58020c00
 800cc54:	20011374 	.word	0x20011374
 800cc58:	58020800 	.word	0x58020800
 800cc5c:	58021800 	.word	0x58021800
 800cc60:	20011364 	.word	0x20011364
 800cc64:	20011350 	.word	0x20011350
 800cc68:	20011360 	.word	0x20011360
 800cc6c:	2001134c 	.word	0x2001134c
 800cc70:	20000158 	.word	0x20000158
 800cc74:	20000188 	.word	0x20000188
 800cc78:	20000072 	.word	0x20000072
 800cc7c:	20000189 	.word	0x20000189

0800cc80 <readWave>:
struct tWaveHeader header;

uint32_t waveTimeout = 2048;
uint32_t numberOfGarbage = 0;

int readWave(FIL *ptr) {
 800cc80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc82:	ed2d 8b02 	vpush	{d8}
 800cc86:	b085      	sub	sp, #20
 800cc88:	4604      	mov	r4, r0

 int read = 0;
 uint32_t numBytesRead = 0;
 800cc8a:	ab04      	add	r3, sp, #16
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	f843 2d04 	str.w	r2, [r3, #-4]!

 // read header parts

 read = f_read(ptr, header.riff, sizeof(header.riff), &numBytesRead);
 800cc92:	4db1      	ldr	r5, [pc, #708]	; (800cf58 <readWave+0x2d8>)
 800cc94:	2204      	movs	r2, #4
 800cc96:	4629      	mov	r1, r5
 800cc98:	f7fd fc2d 	bl	800a4f6 <f_read>
 //printf("(1-4): %s \n", header.riff);

 if ((header.riff[0] != 'R') && (header.riff[1] != 'I') && (header.riff[2] != 'F') && (header.riff[3] != 'F'))
 800cc9c:	782b      	ldrb	r3, [r5, #0]
 800cc9e:	2b52      	cmp	r3, #82	; 0x52
 800cca0:	d00a      	beq.n	800ccb8 <readWave+0x38>
 800cca2:	786b      	ldrb	r3, [r5, #1]
 800cca4:	2b49      	cmp	r3, #73	; 0x49
 800cca6:	d007      	beq.n	800ccb8 <readWave+0x38>
 800cca8:	78ab      	ldrb	r3, [r5, #2]
 800ccaa:	2b46      	cmp	r3, #70	; 0x46
 800ccac:	d004      	beq.n	800ccb8 <readWave+0x38>
 800ccae:	78eb      	ldrb	r3, [r5, #3]
 800ccb0:	2b46      	cmp	r3, #70	; 0x46
 800ccb2:	d001      	beq.n	800ccb8 <readWave+0x38>
 {
	 return 0;
 800ccb4:	2000      	movs	r0, #0
 800ccb6:	e143      	b.n	800cf40 <readWave+0x2c0>
 }
 read = f_read(ptr, buffer4, sizeof(buffer4), &numBytesRead);
 800ccb8:	4da8      	ldr	r5, [pc, #672]	; (800cf5c <readWave+0x2dc>)
 800ccba:	ab03      	add	r3, sp, #12
 800ccbc:	2204      	movs	r2, #4
 800ccbe:	4629      	mov	r1, r5
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	f7fd fc18 	bl	800a4f6 <f_read>
 //printf("%u %u %u %u\n", buffer4[0], buffer4[1], buffer4[2], buffer4[3]);

 // convert little endian to big endian 4 byte int
 header.overall_size  = buffer4[0] |
 800ccc6:	782b      	ldrb	r3, [r5, #0]
						(buffer4[1]<<8) |
 800ccc8:	786a      	ldrb	r2, [r5, #1]
 header.overall_size  = buffer4[0] |
 800ccca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
						(buffer4[2]<<16) |
 800ccce:	78aa      	ldrb	r2, [r5, #2]
						(buffer4[1]<<8) |
 800ccd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
						(buffer4[3]<<24);
 800ccd4:	78ea      	ldrb	r2, [r5, #3]
						(buffer4[2]<<16) |
 800ccd6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 header.overall_size  = buffer4[0] |
 800ccda:	4d9f      	ldr	r5, [pc, #636]	; (800cf58 <readWave+0x2d8>)
 800ccdc:	606b      	str	r3, [r5, #4]

 //printf("(5-8) Overall size: bytes:%u, Kb:%u \n", header.overall_size, header.overall_size/1024);

 read = f_read(ptr, header.wave, sizeof(header.wave), &numBytesRead);
 800ccde:	ab03      	add	r3, sp, #12
 800cce0:	2204      	movs	r2, #4
 800cce2:	f105 0108 	add.w	r1, r5, #8
 800cce6:	4620      	mov	r0, r4
 800cce8:	f7fd fc05 	bl	800a4f6 <f_read>
 //printf("(9-12) Wave marker: %s\n", header.wave);

read = f_read(ptr, header.fmt_chunk_marker, sizeof(header.fmt_chunk_marker), &numBytesRead);
 800ccec:	ab03      	add	r3, sp, #12
 800ccee:	2204      	movs	r2, #4
 800ccf0:	f105 010c 	add.w	r1, r5, #12
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	f7fd fbfe 	bl	800a4f6 <f_read>
int numIterations = 0;
 800ccfa:	2500      	movs	r5, #0

while ((header.fmt_chunk_marker[0] != 102) && (header.fmt_chunk_marker[1] != 109) && (header.fmt_chunk_marker[2] != 116) && (header.fmt_chunk_marker[3] != 32))
 800ccfc:	4b96      	ldr	r3, [pc, #600]	; (800cf58 <readWave+0x2d8>)
 800ccfe:	7b1b      	ldrb	r3, [r3, #12]
 800cd00:	2b66      	cmp	r3, #102	; 0x66
 800cd02:	d032      	beq.n	800cd6a <readWave+0xea>
 800cd04:	4b94      	ldr	r3, [pc, #592]	; (800cf58 <readWave+0x2d8>)
 800cd06:	7b5b      	ldrb	r3, [r3, #13]
 800cd08:	2b6d      	cmp	r3, #109	; 0x6d
 800cd0a:	d02e      	beq.n	800cd6a <readWave+0xea>
 800cd0c:	4b92      	ldr	r3, [pc, #584]	; (800cf58 <readWave+0x2d8>)
 800cd0e:	7b9b      	ldrb	r3, [r3, #14]
 800cd10:	2b74      	cmp	r3, #116	; 0x74
 800cd12:	d02a      	beq.n	800cd6a <readWave+0xea>
 800cd14:	4b90      	ldr	r3, [pc, #576]	; (800cf58 <readWave+0x2d8>)
 800cd16:	7bdb      	ldrb	r3, [r3, #15]
 800cd18:	2b20      	cmp	r3, #32
 800cd1a:	d026      	beq.n	800cd6a <readWave+0xea>
{
	 //printf("(13-16) Fmt marker: %s\n", header.fmt_chunk_marker);

	 read = f_read(ptr, buffer4, sizeof(buffer4), &numBytesRead);
 800cd1c:	4e8f      	ldr	r6, [pc, #572]	; (800cf5c <readWave+0x2dc>)
 800cd1e:	ab03      	add	r3, sp, #12
 800cd20:	2204      	movs	r2, #4
 800cd22:	4631      	mov	r1, r6
 800cd24:	4620      	mov	r0, r4
 800cd26:	f7fd fbe6 	bl	800a4f6 <f_read>
	// printf("%u %u %u %u\n", buffer4[0], buffer4[1], buffer4[2], buffer4[3]);

	 // convert little endian to big endian 4 byte integer
	 numberOfGarbage = buffer4[0] |
 800cd2a:	7833      	ldrb	r3, [r6, #0]
								(buffer4[1] << 8) |
 800cd2c:	7872      	ldrb	r2, [r6, #1]
	 numberOfGarbage = buffer4[0] |
 800cd2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
								(buffer4[2] << 16) |
 800cd32:	78b2      	ldrb	r2, [r6, #2]
								(buffer4[1] << 8) |
 800cd34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
								(buffer4[3] << 24);
 800cd38:	78f2      	ldrb	r2, [r6, #3]
								(buffer4[2] << 16) |
 800cd3a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	 numberOfGarbage = buffer4[0] |
 800cd3e:	4a88      	ldr	r2, [pc, #544]	; (800cf60 <readWave+0x2e0>)
 800cd40:	6013      	str	r3, [r2, #0]
	 //printf("(17-20) Length of Fmt header: %u \n", header.length_of_fmt);


	 ptr->fptr += numberOfGarbage;
 800cd42:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 800cd46:	18c6      	adds	r6, r0, r3
 800cd48:	f141 0700 	adc.w	r7, r1, #0
 800cd4c:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38

	 read = f_read(ptr, header.fmt_chunk_marker, sizeof(header.fmt_chunk_marker), &numBytesRead);
 800cd50:	ab03      	add	r3, sp, #12
 800cd52:	2204      	movs	r2, #4
 800cd54:	4983      	ldr	r1, [pc, #524]	; (800cf64 <readWave+0x2e4>)
 800cd56:	4620      	mov	r0, r4
 800cd58:	f7fd fbcd 	bl	800a4f6 <f_read>
	 numIterations++;
 800cd5c:	3501      	adds	r5, #1
	 if (numIterations > waveTimeout)
 800cd5e:	4b82      	ldr	r3, [pc, #520]	; (800cf68 <readWave+0x2e8>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	429d      	cmp	r5, r3
 800cd64:	d9ca      	bls.n	800ccfc <readWave+0x7c>
	 {
		 return 0;
 800cd66:	2000      	movs	r0, #0
 800cd68:	e0ea      	b.n	800cf40 <readWave+0x2c0>

}

 //printf("(13-16) Fmt marker: %s\n", header.fmt_chunk_marker);

 read = f_read(ptr, buffer4, sizeof(buffer4), &numBytesRead);
 800cd6a:	4d7c      	ldr	r5, [pc, #496]	; (800cf5c <readWave+0x2dc>)
 800cd6c:	ab03      	add	r3, sp, #12
 800cd6e:	2204      	movs	r2, #4
 800cd70:	4629      	mov	r1, r5
 800cd72:	4620      	mov	r0, r4
 800cd74:	f7fd fbbf 	bl	800a4f6 <f_read>
// printf("%u %u %u %u\n", buffer4[0], buffer4[1], buffer4[2], buffer4[3]);

 // convert little endian to big endian 4 byte integer
 header.length_of_fmt = buffer4[0] |
 800cd78:	782b      	ldrb	r3, [r5, #0]
							(buffer4[1] << 8) |
 800cd7a:	786a      	ldrb	r2, [r5, #1]
 header.length_of_fmt = buffer4[0] |
 800cd7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
							(buffer4[2] << 16) |
 800cd80:	78aa      	ldrb	r2, [r5, #2]
							(buffer4[1] << 8) |
 800cd82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
							(buffer4[3] << 24);
 800cd86:	78ea      	ldrb	r2, [r5, #3]
							(buffer4[2] << 16) |
 800cd88:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 header.length_of_fmt = buffer4[0] |
 800cd8c:	4e72      	ldr	r6, [pc, #456]	; (800cf58 <readWave+0x2d8>)
 800cd8e:	6133      	str	r3, [r6, #16]
 //printf("(17-20) Length of Fmt header: %u \n", header.length_of_fmt);

 read = f_read(ptr, buffer2, sizeof(buffer2), &numBytesRead);
 800cd90:	4d76      	ldr	r5, [pc, #472]	; (800cf6c <readWave+0x2ec>)
 800cd92:	ab03      	add	r3, sp, #12
 800cd94:	2202      	movs	r2, #2
 800cd96:	4629      	mov	r1, r5
 800cd98:	4620      	mov	r0, r4
 800cd9a:	f7fd fbac 	bl	800a4f6 <f_read>
 //printf("%u %u \n", buffer2[0], buffer2[1]);

 header.format_type = buffer2[0] | (buffer2[1] << 8);
 800cd9e:	782b      	ldrb	r3, [r5, #0]
 800cda0:	786a      	ldrb	r2, [r5, #1]
 800cda2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cda6:	6173      	str	r3, [r6, #20]
 char format_name[10] = "";
 800cda8:	2200      	movs	r2, #0
 800cdaa:	9200      	str	r2, [sp, #0]
 800cdac:	9201      	str	r2, [sp, #4]
 800cdae:	f8ad 2008 	strh.w	r2, [sp, #8]
 if (header.format_type == 1)
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	f000 808f 	beq.w	800ced6 <readWave+0x256>
   strcpy(format_name,"PCM");
 else if (header.format_type == 6)
 800cdb8:	2b06      	cmp	r3, #6
 800cdba:	f000 808f 	beq.w	800cedc <readWave+0x25c>
  strcpy(format_name, "A-law");
 else if (header.format_type == 7)
 800cdbe:	2b07      	cmp	r3, #7
 800cdc0:	f000 8093 	beq.w	800ceea <readWave+0x26a>
  strcpy(format_name, "Mu-law");

 //printf("(21-22) Format type: %u %s \n", header.format_type, format_name);

 read = f_read(ptr, buffer2, sizeof(buffer2), &numBytesRead);
 800cdc4:	4e69      	ldr	r6, [pc, #420]	; (800cf6c <readWave+0x2ec>)
 800cdc6:	ab03      	add	r3, sp, #12
 800cdc8:	2202      	movs	r2, #2
 800cdca:	4631      	mov	r1, r6
 800cdcc:	4620      	mov	r0, r4
 800cdce:	f7fd fb92 	bl	800a4f6 <f_read>
 //printf("%u %u \n", buffer2[0], buffer2[1]);

 header.channels = buffer2[0] | (buffer2[1] << 8);
 800cdd2:	7833      	ldrb	r3, [r6, #0]
 800cdd4:	7872      	ldrb	r2, [r6, #1]
 800cdd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cdda:	4f5f      	ldr	r7, [pc, #380]	; (800cf58 <readWave+0x2d8>)
 800cddc:	61bb      	str	r3, [r7, #24]
 //printf("(23-24) Channels: %u \n", header.channels);

 read = f_read(ptr, buffer4, sizeof(buffer4), &numBytesRead);
 800cdde:	4d5f      	ldr	r5, [pc, #380]	; (800cf5c <readWave+0x2dc>)
 800cde0:	ab03      	add	r3, sp, #12
 800cde2:	2204      	movs	r2, #4
 800cde4:	4629      	mov	r1, r5
 800cde6:	4620      	mov	r0, r4
 800cde8:	f7fd fb85 	bl	800a4f6 <f_read>
 //printf("%u %u %u %u\n", buffer4[0], buffer4[1], buffer4[2], buffer4[3]);

 header.sample_rate = buffer4[0] |
 800cdec:	782b      	ldrb	r3, [r5, #0]
						(buffer4[1] << 8) |
 800cdee:	786a      	ldrb	r2, [r5, #1]
 header.sample_rate = buffer4[0] |
 800cdf0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
						(buffer4[2] << 16) |
 800cdf4:	78aa      	ldrb	r2, [r5, #2]
						(buffer4[1] << 8) |
 800cdf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
						(buffer4[3] << 24);
 800cdfa:	78ea      	ldrb	r2, [r5, #3]
						(buffer4[2] << 16) |
 800cdfc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 header.sample_rate = buffer4[0] |
 800ce00:	61fb      	str	r3, [r7, #28]

 //printf("(25-28) Sample rate: %u\n", header.sample_rate);

 read = f_read(ptr, buffer4, sizeof(buffer4), &numBytesRead);
 800ce02:	ab03      	add	r3, sp, #12
 800ce04:	2204      	movs	r2, #4
 800ce06:	4629      	mov	r1, r5
 800ce08:	4620      	mov	r0, r4
 800ce0a:	f7fd fb74 	bl	800a4f6 <f_read>
 //printf("%u %u %u %u\n", buffer4[0], buffer4[1], buffer4[2], buffer4[3]);

 header.byterate  = buffer4[0] |
 800ce0e:	782b      	ldrb	r3, [r5, #0]
						(buffer4[1] << 8) |
 800ce10:	786a      	ldrb	r2, [r5, #1]
 header.byterate  = buffer4[0] |
 800ce12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
						(buffer4[2] << 16) |
 800ce16:	78aa      	ldrb	r2, [r5, #2]
						(buffer4[1] << 8) |
 800ce18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
						(buffer4[3] << 24);
 800ce1c:	78ea      	ldrb	r2, [r5, #3]
						(buffer4[2] << 16) |
 800ce1e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 header.byterate  = buffer4[0] |
 800ce22:	623b      	str	r3, [r7, #32]
 //printf("(29-32) Byte Rate: %u , Bit Rate:%u\n", header.byterate, header.byterate*8);

 read = f_read(ptr, buffer2, sizeof(buffer2), &numBytesRead);
 800ce24:	ab03      	add	r3, sp, #12
 800ce26:	2202      	movs	r2, #2
 800ce28:	4631      	mov	r1, r6
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	f7fd fb63 	bl	800a4f6 <f_read>
 //printf("%u %u \n", buffer2[0], buffer2[1]);

 header.block_align = buffer2[0] |
 800ce30:	7833      	ldrb	r3, [r6, #0]
					(buffer2[1] << 8);
 800ce32:	7872      	ldrb	r2, [r6, #1]
 header.block_align = buffer2[0] |
 800ce34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ce38:	627b      	str	r3, [r7, #36]	; 0x24
 //printf("(33-34) Block Alignment: %u \n", header.block_align);

 read = f_read(ptr, buffer2, sizeof(buffer2), &numBytesRead);
 800ce3a:	ab03      	add	r3, sp, #12
 800ce3c:	2202      	movs	r2, #2
 800ce3e:	4631      	mov	r1, r6
 800ce40:	4620      	mov	r0, r4
 800ce42:	f7fd fb58 	bl	800a4f6 <f_read>
 //printf("%u %u \n", buffer2[0], buffer2[1]);

 header.bits_per_sample = buffer2[0] |
 800ce46:	7833      	ldrb	r3, [r6, #0]
					(buffer2[1] << 8);
 800ce48:	7872      	ldrb	r2, [r6, #1]
 header.bits_per_sample = buffer2[0] |
 800ce4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ce4e:	62bb      	str	r3, [r7, #40]	; 0x28
 //printf("(35-36) Bits per sample: %u \n", header.bits_per_sample);

 read = f_read(ptr, header.data_chunk_header, sizeof(header.data_chunk_header), &numBytesRead);
 800ce50:	ab03      	add	r3, sp, #12
 800ce52:	2204      	movs	r2, #4
 800ce54:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800ce58:	4620      	mov	r0, r4
 800ce5a:	f7fd fb4c 	bl	800a4f6 <f_read>
 //printf("(37-40) Data Marker: %s \n", header.data_chunk_header);

 numIterations = 0;
 800ce5e:	2500      	movs	r5, #0

 while ((header.data_chunk_header[0] != 'd') && (header.data_chunk_header[1] != 'a') && (header.data_chunk_header[2] != 't') && (header.data_chunk_header[3] != 'a'))
 800ce60:	4b3d      	ldr	r3, [pc, #244]	; (800cf58 <readWave+0x2d8>)
 800ce62:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ce66:	2b64      	cmp	r3, #100	; 0x64
 800ce68:	d049      	beq.n	800cefe <readWave+0x27e>
 800ce6a:	4b3b      	ldr	r3, [pc, #236]	; (800cf58 <readWave+0x2d8>)
 800ce6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ce70:	2b61      	cmp	r3, #97	; 0x61
 800ce72:	d044      	beq.n	800cefe <readWave+0x27e>
 800ce74:	4b38      	ldr	r3, [pc, #224]	; (800cf58 <readWave+0x2d8>)
 800ce76:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800ce7a:	2b74      	cmp	r3, #116	; 0x74
 800ce7c:	d03f      	beq.n	800cefe <readWave+0x27e>
 800ce7e:	4b36      	ldr	r3, [pc, #216]	; (800cf58 <readWave+0x2d8>)
 800ce80:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ce84:	2b61      	cmp	r3, #97	; 0x61
 800ce86:	d03a      	beq.n	800cefe <readWave+0x27e>
 {
 	 //printf("(13-16) Fmt marker: %s\n", header.fmt_chunk_marker);

 	 read = f_read(ptr, buffer4, sizeof(buffer4), &numBytesRead);
 800ce88:	4e34      	ldr	r6, [pc, #208]	; (800cf5c <readWave+0x2dc>)
 800ce8a:	ab03      	add	r3, sp, #12
 800ce8c:	2204      	movs	r2, #4
 800ce8e:	4631      	mov	r1, r6
 800ce90:	4620      	mov	r0, r4
 800ce92:	f7fd fb30 	bl	800a4f6 <f_read>
 	// printf("%u %u %u %u\n", buffer4[0], buffer4[1], buffer4[2], buffer4[3]);

 	 // convert little endian to big endian 4 byte integer
 	 numberOfGarbage = buffer4[0] |
 800ce96:	7833      	ldrb	r3, [r6, #0]
 								(buffer4[1] << 8) |
 800ce98:	7872      	ldrb	r2, [r6, #1]
 	 numberOfGarbage = buffer4[0] |
 800ce9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 								(buffer4[2] << 16) |
 800ce9e:	78b2      	ldrb	r2, [r6, #2]
 								(buffer4[1] << 8) |
 800cea0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 								(buffer4[3] << 24);
 800cea4:	78f2      	ldrb	r2, [r6, #3]
 								(buffer4[2] << 16) |
 800cea6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 	 numberOfGarbage = buffer4[0] |
 800ceaa:	4a2d      	ldr	r2, [pc, #180]	; (800cf60 <readWave+0x2e0>)
 800ceac:	6013      	str	r3, [r2, #0]

/*
 	 read = f_read(ptr, garbageBuffer, numberOfGarbage, &numBytesRead);
*/
 	 //move pointer ahead by that size
 	 ptr->fptr += numberOfGarbage;
 800ceae:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 800ceb2:	18c6      	adds	r6, r0, r3
 800ceb4:	f141 0700 	adc.w	r7, r1, #0
 800ceb8:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38

 	 read = f_read(ptr, header.data_chunk_header, sizeof(header.data_chunk_header), &numBytesRead);
 800cebc:	ab03      	add	r3, sp, #12
 800cebe:	2204      	movs	r2, #4
 800cec0:	492b      	ldr	r1, [pc, #172]	; (800cf70 <readWave+0x2f0>)
 800cec2:	4620      	mov	r0, r4
 800cec4:	f7fd fb17 	bl	800a4f6 <f_read>
 	 numIterations++;
 800cec8:	3501      	adds	r5, #1
	 if (numIterations > waveTimeout)
 800ceca:	4b27      	ldr	r3, [pc, #156]	; (800cf68 <readWave+0x2e8>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	429d      	cmp	r5, r3
 800ced0:	d9c6      	bls.n	800ce60 <readWave+0x1e0>
	 {
		 return 0;
 800ced2:	2000      	movs	r0, #0
 800ced4:	e034      	b.n	800cf40 <readWave+0x2c0>
   strcpy(format_name,"PCM");
 800ced6:	4b27      	ldr	r3, [pc, #156]	; (800cf74 <readWave+0x2f4>)
 800ced8:	9300      	str	r3, [sp, #0]
 800ceda:	e773      	b.n	800cdc4 <readWave+0x144>
  strcpy(format_name, "A-law");
 800cedc:	4b26      	ldr	r3, [pc, #152]	; (800cf78 <readWave+0x2f8>)
 800cede:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cee2:	9000      	str	r0, [sp, #0]
 800cee4:	f8ad 1004 	strh.w	r1, [sp, #4]
 800cee8:	e76c      	b.n	800cdc4 <readWave+0x144>
  strcpy(format_name, "Mu-law");
 800ceea:	4b24      	ldr	r3, [pc, #144]	; (800cf7c <readWave+0x2fc>)
 800ceec:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cef0:	9000      	str	r0, [sp, #0]
 800cef2:	f8ad 1004 	strh.w	r1, [sp, #4]
 800cef6:	0c09      	lsrs	r1, r1, #16
 800cef8:	f88d 1006 	strb.w	r1, [sp, #6]
 800cefc:	e762      	b.n	800cdc4 <readWave+0x144>
	 }
 }


 read = f_read(ptr, buffer4, sizeof(buffer4), &numBytesRead);
 800cefe:	4d17      	ldr	r5, [pc, #92]	; (800cf5c <readWave+0x2dc>)
 800cf00:	ab03      	add	r3, sp, #12
 800cf02:	2204      	movs	r2, #4
 800cf04:	4629      	mov	r1, r5
 800cf06:	4620      	mov	r0, r4
 800cf08:	f7fd faf5 	bl	800a4f6 <f_read>
// printf("%u %u %u %u\n", buffer4[0], buffer4[1], buffer4[2], buffer4[3]);

 header.data_size = buffer4[0] |
 800cf0c:	782a      	ldrb	r2, [r5, #0]
				(buffer4[1] << 8) |
 800cf0e:	786b      	ldrb	r3, [r5, #1]
 header.data_size = buffer4[0] |
 800cf10:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
				(buffer4[2] << 16) |
 800cf14:	78ab      	ldrb	r3, [r5, #2]
				(buffer4[1] << 8) |
 800cf16:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				(buffer4[3] << 24 );
 800cf1a:	78eb      	ldrb	r3, [r5, #3]
				(buffer4[2] << 16) |
 800cf1c:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 header.data_size = buffer4[0] |
 800cf20:	4b0d      	ldr	r3, [pc, #52]	; (800cf58 <readWave+0x2d8>)
 800cf22:	631a      	str	r2, [r3, #48]	; 0x30
 //printf("(41-44) Size of data chunk: %u \n", header.data_size);


 // calculate no.of samples
 long num_samples = (8 * header.data_size) / (header.channels * header.bits_per_sample);
 800cf24:	00d0      	lsls	r0, r2, #3
 800cf26:	f8d3 c018 	ldr.w	ip, [r3, #24]
 800cf2a:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 800cf2c:	fb06 f10c 	mul.w	r1, r6, ip
 800cf30:	fbb0 f0f1 	udiv	r0, r0, r1
 800cf34:	4605      	mov	r5, r0
 //printf("Number of samples:%lu \n", num_samples);

 long size_of_each_sample = (header.channels * header.bits_per_sample) / 8;
 800cf36:	08c9      	lsrs	r1, r1, #3
 //printf("Approx.Duration in h:m:s=%s\n", seconds_to_time(duration_in_seconds));



 // read each sample from data chunk if PCM
 if (header.format_type == 1)
 800cf38:	695b      	ldr	r3, [r3, #20]
 800cf3a:	2b01      	cmp	r3, #1
 800cf3c:	d004      	beq.n	800cf48 <readWave+0x2c8>
		}
		return 1;
	 }
 }

 return 0;
 800cf3e:	2000      	movs	r0, #0

}
 800cf40:	b005      	add	sp, #20
 800cf42:	ecbd 8b02 	vpop	{d8}
 800cf46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	long bytes_in_each_channel = (size_of_each_sample / header.channels);
 800cf48:	fbb1 f7fc 	udiv	r7, r1, ip
	if ((bytes_in_each_channel  * header.channels) != size_of_each_sample)
 800cf4c:	fb07 f30c 	mul.w	r3, r7, ip
 800cf50:	4299      	cmp	r1, r3
 800cf52:	d01d      	beq.n	800cf90 <readWave+0x310>
 return 0;
 800cf54:	2000      	movs	r0, #0
 800cf56:	e7f3      	b.n	800cf40 <readWave+0x2c0>
 800cf58:	20011384 	.word	0x20011384
 800cf5c:	20011380 	.word	0x20011380
 800cf60:	2000018c 	.word	0x2000018c
 800cf64:	20011390 	.word	0x20011390
 800cf68:	20000098 	.word	0x20000098
 800cf6c:	2001137c 	.word	0x2001137c
 800cf70:	200113b0 	.word	0x200113b0
 800cf74:	004d4350 	.word	0x004d4350
 800cf78:	0800fcb0 	.word	0x0800fcb0
 800cf7c:	0800fcb8 	.word	0x0800fcb8
 800cf80:	00000000 	.word	0x00000000
 800cf84:	00007fff 	.word	0x00007fff
 800cf88:	7fffffff 	.word	0x7fffffff
 800cf8c:	0000007f 	.word	0x0000007f
		switch (header.bits_per_sample) {
 800cf90:	3e08      	subs	r6, #8
 800cf92:	2e18      	cmp	r6, #24
 800cf94:	d80e      	bhi.n	800cfb4 <readWave+0x334>
 800cf96:	e8df f006 	tbb	[pc, r6]
 800cf9a:	0d19      	.short	0x0d19
 800cf9c:	0d0d0d0d 	.word	0x0d0d0d0d
 800cfa0:	0d100d0d 	.word	0x0d100d0d
 800cfa4:	0d0d0d0d 	.word	0x0d0d0d0d
 800cfa8:	0d130d0d 	.word	0x0d130d0d
 800cfac:	0d0d0d0d 	.word	0x0d0d0d0d
 800cfb0:	0d0d      	.short	0x0d0d
 800cfb2:	16          	.byte	0x16
 800cfb3:	00          	.byte	0x00
		long high_limit = 0l;
 800cfb4:	ed5f 7a0e 	vldr	s15, [pc, #-56]	; 800cf80 <readWave+0x300>
 800cfb8:	e00a      	b.n	800cfd0 <readWave+0x350>
				high_limit = 32767;
 800cfba:	ed5f 7a0e 	vldr	s15, [pc, #-56]	; 800cf84 <readWave+0x304>
				break;
 800cfbe:	e007      	b.n	800cfd0 <readWave+0x350>
				high_limit = 2147483647;
 800cfc0:	ed5f 7a0f 	vldr	s15, [pc, #-60]	; 800cf88 <readWave+0x308>
				break;
 800cfc4:	e004      	b.n	800cfd0 <readWave+0x350>
				high_limit = 2147483647;
 800cfc6:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 800cf88 <readWave+0x308>
				break;
 800cfca:	e001      	b.n	800cfd0 <readWave+0x350>
				high_limit = 127;
 800cfcc:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 800cf8c <readWave+0x30c>
		inv_high_limit = 1.0f / high_limit;
 800cfd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cfd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cfd8:	ee87 8a27 	vdiv.f32	s16, s14, s15
		if ((memoryPointer + (num_samples*header.channels)) >= LARGE_MEM_SIZE_IN_FLOAT)
 800cfdc:	4b65      	ldr	r3, [pc, #404]	; (800d174 <readWave+0x4f4>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	fb00 300c 	mla	r0, r0, ip, r3
 800cfe4:	f5b0 0fc0 	cmp.w	r0, #6291456	; 0x600000
 800cfe8:	d207      	bcs.n	800cffa <readWave+0x37a>
		if (header.data_size < SCRATCH_MEM_SIZE)
 800cfea:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800cfee:	d309      	bcc.n	800d004 <readWave+0x384>
			tooBigForScratch = 1;
 800cff0:	4b61      	ldr	r3, [pc, #388]	; (800d178 <readWave+0x4f8>)
 800cff2:	2201      	movs	r2, #1
 800cff4:	601a      	str	r2, [r3, #0]
			return 0;
 800cff6:	2000      	movs	r0, #0
 800cff8:	e7a2      	b.n	800cf40 <readWave+0x2c0>
			OutOfSpace = 1;
 800cffa:	4b60      	ldr	r3, [pc, #384]	; (800d17c <readWave+0x4fc>)
 800cffc:	2201      	movs	r2, #1
 800cffe:	601a      	str	r2, [r3, #0]
			return 0;
 800d000:	2000      	movs	r0, #0
 800d002:	e79d      	b.n	800cf40 <readWave+0x2c0>
			read = f_read(ptr, largeMemoryScratch, header.data_size, (void *)&numBytesRead);
 800d004:	ab03      	add	r3, sp, #12
 800d006:	495e      	ldr	r1, [pc, #376]	; (800d180 <readWave+0x500>)
 800d008:	4620      	mov	r0, r4
 800d00a:	f7fd fa74 	bl	800a4f6 <f_read>
			scratchPosition = 0;
 800d00e:	4b5d      	ldr	r3, [pc, #372]	; (800d184 <readWave+0x504>)
 800d010:	2200      	movs	r2, #0
 800d012:	601a      	str	r2, [r3, #0]
			if (bytes_in_each_channel == 4)
 800d014:	2f04      	cmp	r7, #4
 800d016:	d034      	beq.n	800d082 <readWave+0x402>
			else if (bytes_in_each_channel == 3)
 800d018:	2f03      	cmp	r7, #3
 800d01a:	d05e      	beq.n	800d0da <readWave+0x45a>
			else if (bytes_in_each_channel == 2)
 800d01c:	2f02      	cmp	r7, #2
 800d01e:	f000 8084 	beq.w	800d12a <readWave+0x4aa>
			else if (bytes_in_each_channel == 1)
 800d022:	2f01      	cmp	r7, #1
 800d024:	f000 80a0 	beq.w	800d168 <readWave+0x4e8>
		return 1;
 800d028:	2001      	movs	r0, #1
 800d02a:	e789      	b.n	800cf40 <readWave+0x2c0>
				for (i =1; i <= num_samples; i++)
 800d02c:	3401      	adds	r4, #1
 800d02e:	42ac      	cmp	r4, r5
 800d030:	dc29      	bgt.n	800d086 <readWave+0x406>
					for (xchannels = 0; xchannels < header.channels; xchannels ++ )
 800d032:	2000      	movs	r0, #0
 800d034:	4b54      	ldr	r3, [pc, #336]	; (800d188 <readWave+0x508>)
 800d036:	699b      	ldr	r3, [r3, #24]
 800d038:	4283      	cmp	r3, r0
 800d03a:	d9f7      	bls.n	800d02c <readWave+0x3ac>
						data_in_channel_32 =	largeMemoryScratch[scratchPosition] |
 800d03c:	4e51      	ldr	r6, [pc, #324]	; (800d184 <readWave+0x504>)
 800d03e:	6832      	ldr	r2, [r6, #0]
 800d040:	494f      	ldr	r1, [pc, #316]	; (800d180 <readWave+0x500>)
 800d042:	5c8b      	ldrb	r3, [r1, r2]
											(largeMemoryScratch[scratchPosition + 1]<<8) |
 800d044:	1c57      	adds	r7, r2, #1
 800d046:	5dcf      	ldrb	r7, [r1, r7]
						data_in_channel_32 =	largeMemoryScratch[scratchPosition] |
 800d048:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
											(largeMemoryScratch[scratchPosition + 2]<<16) |
 800d04c:	1c97      	adds	r7, r2, #2
 800d04e:	5dcf      	ldrb	r7, [r1, r7]
											(largeMemoryScratch[scratchPosition + 1]<<8) |
 800d050:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
											(largeMemoryScratch[scratchPosition + 3]<<24);
 800d054:	1cd7      	adds	r7, r2, #3
 800d056:	5dc9      	ldrb	r1, [r1, r7]
						data_in_channel_32 =	largeMemoryScratch[scratchPosition] |
 800d058:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800d05c:	ee07 3a90 	vmov	s15, r3
						float_data = ((float)data_in_channel_32) * inv_high_limit;
 800d060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d064:	ee67 7a88 	vmul.f32	s15, s15, s16
						scratchPosition = scratchPosition + 4;
 800d068:	3204      	adds	r2, #4
 800d06a:	6032      	str	r2, [r6, #0]
						largeMemory[memoryPointer] = float_data;
 800d06c:	4941      	ldr	r1, [pc, #260]	; (800d174 <readWave+0x4f4>)
 800d06e:	680b      	ldr	r3, [r1, #0]
 800d070:	4a46      	ldr	r2, [pc, #280]	; (800d18c <readWave+0x50c>)
 800d072:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d076:	edc2 7a00 	vstr	s15, [r2]
						memoryPointer++;
 800d07a:	3301      	adds	r3, #1
 800d07c:	600b      	str	r3, [r1, #0]
					for (xchannels = 0; xchannels < header.channels; xchannels ++ )
 800d07e:	3001      	adds	r0, #1
 800d080:	e7d8      	b.n	800d034 <readWave+0x3b4>
				for (i =1; i <= num_samples; i++)
 800d082:	2401      	movs	r4, #1
 800d084:	e7d3      	b.n	800d02e <readWave+0x3ae>
		return 1;
 800d086:	2001      	movs	r0, #1
 800d088:	e75a      	b.n	800cf40 <readWave+0x2c0>
						data_in_channel_32 =	largeMemoryScratch[scratchPosition]<<8 |
 800d08a:	4e3e      	ldr	r6, [pc, #248]	; (800d184 <readWave+0x504>)
 800d08c:	6832      	ldr	r2, [r6, #0]
 800d08e:	493c      	ldr	r1, [pc, #240]	; (800d180 <readWave+0x500>)
 800d090:	5c8f      	ldrb	r7, [r1, r2]
												(largeMemoryScratch[scratchPosition + 1]<<16) |
 800d092:	1c53      	adds	r3, r2, #1
 800d094:	5ccb      	ldrb	r3, [r1, r3]
 800d096:	041b      	lsls	r3, r3, #16
						data_in_channel_32 =	largeMemoryScratch[scratchPosition]<<8 |
 800d098:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
												(largeMemoryScratch[scratchPosition + 2]<<24);
 800d09c:	1c97      	adds	r7, r2, #2
 800d09e:	5dc9      	ldrb	r1, [r1, r7]
						data_in_channel_32 =	largeMemoryScratch[scratchPosition]<<8 |
 800d0a0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800d0a4:	ee07 3a90 	vmov	s15, r3
						float_data = ((float)data_in_channel_32) * inv_high_limit;
 800d0a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d0ac:	ee67 7a88 	vmul.f32	s15, s15, s16
						scratchPosition = scratchPosition + 3;
 800d0b0:	3203      	adds	r2, #3
 800d0b2:	6032      	str	r2, [r6, #0]
						largeMemory[memoryPointer] = float_data;
 800d0b4:	492f      	ldr	r1, [pc, #188]	; (800d174 <readWave+0x4f4>)
 800d0b6:	680b      	ldr	r3, [r1, #0]
 800d0b8:	4a34      	ldr	r2, [pc, #208]	; (800d18c <readWave+0x50c>)
 800d0ba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d0be:	edc2 7a00 	vstr	s15, [r2]
						memoryPointer++;
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	600b      	str	r3, [r1, #0]
					for (xchannels = 0; xchannels < header.channels; xchannels ++ )
 800d0c6:	3001      	adds	r0, #1
 800d0c8:	4b2f      	ldr	r3, [pc, #188]	; (800d188 <readWave+0x508>)
 800d0ca:	699b      	ldr	r3, [r3, #24]
 800d0cc:	4283      	cmp	r3, r0
 800d0ce:	d8dc      	bhi.n	800d08a <readWave+0x40a>
				for (i =1; i <= num_samples; i++)
 800d0d0:	3401      	adds	r4, #1
 800d0d2:	42ac      	cmp	r4, r5
 800d0d4:	dc03      	bgt.n	800d0de <readWave+0x45e>
					for (xchannels = 0; xchannels < header.channels; xchannels ++ )
 800d0d6:	2000      	movs	r0, #0
 800d0d8:	e7f6      	b.n	800d0c8 <readWave+0x448>
				for (i =1; i <= num_samples; i++)
 800d0da:	2401      	movs	r4, #1
 800d0dc:	e7f9      	b.n	800d0d2 <readWave+0x452>
		return 1;
 800d0de:	2001      	movs	r0, #1
 800d0e0:	e72e      	b.n	800cf40 <readWave+0x2c0>
						data_in_channel_16 = (int16_t)(largeMemoryScratch[scratchPosition] |
 800d0e2:	4e28      	ldr	r6, [pc, #160]	; (800d184 <readWave+0x504>)
 800d0e4:	6832      	ldr	r2, [r6, #0]
 800d0e6:	4926      	ldr	r1, [pc, #152]	; (800d180 <readWave+0x500>)
 800d0e8:	5c8b      	ldrb	r3, [r1, r2]
																		(largeMemoryScratch[scratchPosition + 1] << 8));
 800d0ea:	1c57      	adds	r7, r2, #1
 800d0ec:	5dc9      	ldrb	r1, [r1, r7]
 800d0ee:	0209      	lsls	r1, r1, #8
						data_in_channel_16 = (int16_t)(largeMemoryScratch[scratchPosition] |
 800d0f0:	b209      	sxth	r1, r1
 800d0f2:	430b      	orrs	r3, r1
 800d0f4:	ee07 3a90 	vmov	s15, r3
						float_data = ((float)data_in_channel_16) * inv_high_limit;
 800d0f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d0fc:	ee67 7a88 	vmul.f32	s15, s15, s16
						scratchPosition = scratchPosition + 2;
 800d100:	3202      	adds	r2, #2
 800d102:	6032      	str	r2, [r6, #0]
						largeMemory[memoryPointer] = float_data;
 800d104:	491b      	ldr	r1, [pc, #108]	; (800d174 <readWave+0x4f4>)
 800d106:	680b      	ldr	r3, [r1, #0]
 800d108:	4a20      	ldr	r2, [pc, #128]	; (800d18c <readWave+0x50c>)
 800d10a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d10e:	edc2 7a00 	vstr	s15, [r2]
						memoryPointer++;
 800d112:	3301      	adds	r3, #1
 800d114:	600b      	str	r3, [r1, #0]
					for (xchannels = 0; xchannels < header.channels; xchannels ++ )
 800d116:	3001      	adds	r0, #1
 800d118:	4b1b      	ldr	r3, [pc, #108]	; (800d188 <readWave+0x508>)
 800d11a:	699b      	ldr	r3, [r3, #24]
 800d11c:	4283      	cmp	r3, r0
 800d11e:	d8e0      	bhi.n	800d0e2 <readWave+0x462>
				for (i =1; i <= num_samples; i++)
 800d120:	3401      	adds	r4, #1
 800d122:	42ac      	cmp	r4, r5
 800d124:	dc03      	bgt.n	800d12e <readWave+0x4ae>
					for (xchannels = 0; xchannels < header.channels; xchannels ++ )
 800d126:	2000      	movs	r0, #0
 800d128:	e7f6      	b.n	800d118 <readWave+0x498>
				for (i =1; i <= num_samples; i++)
 800d12a:	2401      	movs	r4, #1
 800d12c:	e7f9      	b.n	800d122 <readWave+0x4a2>
		return 1;
 800d12e:	2001      	movs	r0, #1
 800d130:	e706      	b.n	800cf40 <readWave+0x2c0>
						data_in_channel_8 = (int8_t)largeMemoryScratch[scratchPosition];
 800d132:	4a14      	ldr	r2, [pc, #80]	; (800d184 <readWave+0x504>)
 800d134:	6813      	ldr	r3, [r2, #0]
 800d136:	4812      	ldr	r0, [pc, #72]	; (800d180 <readWave+0x500>)
 800d138:	56c0      	ldrsb	r0, [r0, r3]
 800d13a:	ee07 0a90 	vmov	s15, r0
						float_data = ((float)data_in_channel_8) * inv_high_limit;
 800d13e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d142:	ee67 7a88 	vmul.f32	s15, s15, s16
						scratchPosition = scratchPosition + 1;
 800d146:	3301      	adds	r3, #1
 800d148:	6013      	str	r3, [r2, #0]
						largeMemory[memoryPointer] = float_data;
 800d14a:	480a      	ldr	r0, [pc, #40]	; (800d174 <readWave+0x4f4>)
 800d14c:	6803      	ldr	r3, [r0, #0]
 800d14e:	4a0f      	ldr	r2, [pc, #60]	; (800d18c <readWave+0x50c>)
 800d150:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d154:	edc2 7a00 	vstr	s15, [r2]
						memoryPointer++;
 800d158:	3301      	adds	r3, #1
 800d15a:	6003      	str	r3, [r0, #0]
					for (xchannels = 0; xchannels < header.channels; xchannels ++ )
 800d15c:	3101      	adds	r1, #1
 800d15e:	4b0a      	ldr	r3, [pc, #40]	; (800d188 <readWave+0x508>)
 800d160:	699b      	ldr	r3, [r3, #24]
 800d162:	428b      	cmp	r3, r1
 800d164:	d8e5      	bhi.n	800d132 <readWave+0x4b2>
				for (i =1; i <= num_samples; i++)
 800d166:	3701      	adds	r7, #1
 800d168:	42af      	cmp	r7, r5
 800d16a:	dc01      	bgt.n	800d170 <readWave+0x4f0>
					for (xchannels = 0; xchannels < header.channels; xchannels ++ )
 800d16c:	2100      	movs	r1, #0
 800d16e:	e7f6      	b.n	800d15e <readWave+0x4de>
		return 1;
 800d170:	2001      	movs	r0, #1
 800d172:	e6e5      	b.n	800cf40 <readWave+0x2c0>
 800d174:	20011028 	.word	0x20011028
 800d178:	20000180 	.word	0x20000180
 800d17c:	20000178 	.word	0x20000178
 800d180:	60000000 	.word	0x60000000
 800d184:	2000016c 	.word	0x2000016c
 800d188:	20011384 	.word	0x20011384
 800d18c:	60800000 	.word	0x60800000

0800d190 <tRamp_initToPool>:
{
    tRamp_initToPool(r, time, samples_per_tick, &leaf->mempool);
}

void    tRamp_initToPool    (tRamp* const r, float time, int samples_per_tick, tMempool* const mp)
{
 800d190:	b570      	push	{r4, r5, r6, lr}
 800d192:	ed2d 8b02 	vpush	{d8}
 800d196:	4606      	mov	r6, r0
 800d198:	eeb0 8a40 	vmov.f32	s16, s0
 800d19c:	460d      	mov	r5, r1
    _tMempool* m = *mp;
 800d19e:	6814      	ldr	r4, [r2, #0]
    _tRamp* ramp = *r = (_tRamp*) mpool_alloc(sizeof(_tRamp), m);
 800d1a0:	4621      	mov	r1, r4
 800d1a2:	2024      	movs	r0, #36	; 0x24
 800d1a4:	f000 fa26 	bl	800d5f4 <mpool_alloc>
 800d1a8:	6030      	str	r0, [r6, #0]
    ramp->mempool = m;
 800d1aa:	6004      	str	r4, [r0, #0]
    
    LEAF* leaf = ramp->mempool->leaf;
 800d1ac:	6863      	ldr	r3, [r4, #4]
    
    ramp->inv_sr_ms = 1.0f/(leaf->sampleRate*0.001f);
 800d1ae:	edd3 7a00 	vldr	s15, [r3]
 800d1b2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800d21c <tRamp_initToPool+0x8c>
 800d1b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d1ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1c2:	ed80 7a02 	vstr	s14, [r0, #8]
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 800d1c6:	ee07 5a90 	vmov	s15, r5
 800d1ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d1ce:	ee67 6a27 	vmul.f32	s13, s14, s15
 800d1d2:	edc0 6a03 	vstr	s13, [r0, #12]
    ramp->curr = 0.0f;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	6103      	str	r3, [r0, #16]
    ramp->dest = 0.0f;
 800d1da:	6143      	str	r3, [r0, #20]
    
    if (time < ramp->minimum_time)
 800d1dc:	eef4 6ac8 	vcmpe.f32	s13, s16
 800d1e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1e4:	dc17      	bgt.n	800d216 <tRamp_initToPool+0x86>
    {
        ramp->time = ramp->minimum_time;
    }
    else
    {
        ramp->time = time;
 800d1e6:	ed80 8a06 	vstr	s16, [r0, #24]
    }
    ramp->samples_per_tick = samples_per_tick;
 800d1ea:	6205      	str	r5, [r0, #32]
    ramp->factor = (1.0f / ramp->time) * ramp->inv_sr_ms * (float)ramp->samples_per_tick;
 800d1ec:	ed90 6a06 	vldr	s12, [r0, #24]
 800d1f0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800d1f4:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800d1f8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d1fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d200:	edc0 7a07 	vstr	s15, [r0, #28]
    ramp->inc = (ramp->dest - ramp->curr) * ramp->factor;
 800d204:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800d220 <tRamp_initToPool+0x90>
 800d208:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d20c:	edc0 7a01 	vstr	s15, [r0, #4]
}
 800d210:	ecbd 8b02 	vpop	{d8}
 800d214:	bd70      	pop	{r4, r5, r6, pc}
        ramp->time = ramp->minimum_time;
 800d216:	edc0 6a06 	vstr	s13, [r0, #24]
 800d21a:	e7e6      	b.n	800d1ea <tRamp_initToPool+0x5a>
 800d21c:	3a83126f 	.word	0x3a83126f
 800d220:	00000000 	.word	0x00000000

0800d224 <tRamp_setDest>:

}

void     tRamp_setDest(tRamp* const ramp, float dest)
{
    _tRamp* r = *ramp;
 800d224:	6803      	ldr	r3, [r0, #0]
    r->dest = dest;
 800d226:	ed83 0a05 	vstr	s0, [r3, #20]
    r->inc = (r->dest - r->curr) * r->factor;
 800d22a:	edd3 7a04 	vldr	s15, [r3, #16]
 800d22e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d232:	edd3 7a07 	vldr	s15, [r3, #28]
 800d236:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d23a:	ed83 0a01 	vstr	s0, [r3, #4]
}
 800d23e:	4770      	bx	lr

0800d240 <tRamp_setVal>:

void     tRamp_setVal(tRamp* const ramp, float val)
{
    _tRamp* r = *ramp;
 800d240:	6803      	ldr	r3, [r0, #0]
    r->curr = val;
 800d242:	ed83 0a04 	vstr	s0, [r3, #16]
    r->inc = (r->dest - r->curr) * r->factor;
 800d246:	edd3 7a05 	vldr	s15, [r3, #20]
 800d24a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d24e:	edd3 7a07 	vldr	s15, [r3, #28]
 800d252:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d256:	ed83 0a01 	vstr	s0, [r3, #4]
}
 800d25a:	4770      	bx	lr

0800d25c <tRamp_tick>:

float   tRamp_tick(tRamp* const ramp)
{
    _tRamp* r = *ramp;
 800d25c:	6803      	ldr	r3, [r0, #0]
    
    r->curr += r->inc;
 800d25e:	edd3 6a01 	vldr	s13, [r3, #4]
 800d262:	edd3 7a04 	vldr	s15, [r3, #16]
 800d266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d26a:	edc3 7a04 	vstr	s15, [r3, #16]
    
    if (((r->curr >= r->dest) && (r->inc > 0.0f)) || ((r->curr <= r->dest) && (r->inc < 0.0f)))
 800d26e:	ed93 7a05 	vldr	s14, [r3, #20]
 800d272:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d27a:	db0b      	blt.n	800d294 <tRamp_tick+0x38>
 800d27c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800d280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d284:	dd06      	ble.n	800d294 <tRamp_tick+0x38>
    {
        r->inc = 0.0f;
 800d286:	2200      	movs	r2, #0
 800d288:	605a      	str	r2, [r3, #4]
        r->curr=r->dest;
 800d28a:	ed83 7a04 	vstr	s14, [r3, #16]
    }
    
    return r->curr;
}
 800d28e:	ed93 0a04 	vldr	s0, [r3, #16]
 800d292:	4770      	bx	lr
    if (((r->curr >= r->dest) && (r->inc > 0.0f)) || ((r->curr <= r->dest) && (r->inc < 0.0f)))
 800d294:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d29c:	d8f7      	bhi.n	800d28e <tRamp_tick+0x32>
 800d29e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800d2a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2a6:	d5f2      	bpl.n	800d28e <tRamp_tick+0x32>
 800d2a8:	e7ed      	b.n	800d286 <tRamp_tick+0x2a>

0800d2aa <tRamp_sample>:

float   tRamp_sample(tRamp* const ramp)
{
    _tRamp* r = *ramp;
 800d2aa:	6803      	ldr	r3, [r0, #0]
    return r->curr;
}
 800d2ac:	ed93 0a04 	vldr	s0, [r3, #16]
 800d2b0:	4770      	bx	lr
	...

0800d2b4 <tExpSmooth_initToPool>:
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, float val, float factor, tMempool* const mp)
{
 800d2b4:	b538      	push	{r3, r4, r5, lr}
 800d2b6:	ed2d 8b02 	vpush	{d8}
 800d2ba:	4605      	mov	r5, r0
 800d2bc:	eef0 8a40 	vmov.f32	s17, s0
 800d2c0:	eeb0 8a60 	vmov.f32	s16, s1
    _tMempool* m = *mp;
 800d2c4:	680c      	ldr	r4, [r1, #0]
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 800d2c6:	4621      	mov	r1, r4
 800d2c8:	2014      	movs	r0, #20
 800d2ca:	f000 f993 	bl	800d5f4 <mpool_alloc>
 800d2ce:	6028      	str	r0, [r5, #0]
    smooth->mempool = m;
 800d2d0:	6004      	str	r4, [r0, #0]
    
    smooth->curr=val;
 800d2d2:	edc0 8a03 	vstr	s17, [r0, #12]
    smooth->dest=val;
 800d2d6:	edc0 8a04 	vstr	s17, [r0, #16]
    if (factor<0) factor=0;
 800d2da:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d2de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2e2:	d413      	bmi.n	800d30c <tExpSmooth_initToPool+0x58>
    if (factor>1) factor=1;
 800d2e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d2e8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d2ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2f0:	dd01      	ble.n	800d2f6 <tExpSmooth_initToPool+0x42>
 800d2f2:	eeb0 8a67 	vmov.f32	s16, s15
    smooth->factor=factor;
 800d2f6:	ed80 8a01 	vstr	s16, [r0, #4]
    smooth->oneminusfactor=1.0f-factor;
 800d2fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d2fe:	ee37 8ac8 	vsub.f32	s16, s15, s16
 800d302:	ed80 8a02 	vstr	s16, [r0, #8]
}
 800d306:	ecbd 8b02 	vpop	{d8}
 800d30a:	bd38      	pop	{r3, r4, r5, pc}
    if (factor<0) factor=0;
 800d30c:	ed9f 8a01 	vldr	s16, [pc, #4]	; 800d314 <tExpSmooth_initToPool+0x60>
 800d310:	e7e8      	b.n	800d2e4 <tExpSmooth_initToPool+0x30>
 800d312:	bf00      	nop
 800d314:	00000000 	.word	0x00000000

0800d318 <tExpSmooth_init>:
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 800d318:	b508      	push	{r3, lr}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
 800d31a:	3118      	adds	r1, #24
 800d31c:	f7ff ffca 	bl	800d2b4 <tExpSmooth_initToPool>
}
 800d320:	bd08      	pop	{r3, pc}

0800d322 <tExpSmooth_setDest>:
    smooth->oneminusfactor=1.0f-factor;
}

void     tExpSmooth_setDest(tExpSmooth* const expsmooth, float dest)
{
    _tExpSmooth* smooth = *expsmooth;
 800d322:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
 800d324:	ed83 0a04 	vstr	s0, [r3, #16]
}
 800d328:	4770      	bx	lr

0800d32a <tExpSmooth_tick>:
    smooth->dest=val;
}

float   tExpSmooth_tick(tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
 800d32a:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor*smooth->dest+smooth->oneminusfactor*smooth->curr;
 800d32c:	ed93 0a01 	vldr	s0, [r3, #4]
 800d330:	edd3 7a04 	vldr	s15, [r3, #16]
 800d334:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d338:	edd3 7a02 	vldr	s15, [r3, #8]
 800d33c:	ed93 7a03 	vldr	s14, [r3, #12]
 800d340:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d344:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d348:	ed83 0a03 	vstr	s0, [r3, #12]
    return smooth->curr;
}
 800d34c:	4770      	bx	lr
	...

0800d350 <tSVF_initToPool>:
     */

}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, float freq, float Q, tMempool* const mp)
{
 800d350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d352:	ed2d 8b02 	vpush	{d8}
 800d356:	4607      	mov	r7, r0
 800d358:	460e      	mov	r6, r1
 800d35a:	eeb0 8a40 	vmov.f32	s16, s0
 800d35e:	eef0 8a60 	vmov.f32	s17, s1
    _tMempool* m = *mp;
 800d362:	6815      	ldr	r5, [r2, #0]
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 800d364:	4629      	mov	r1, r5
 800d366:	203c      	movs	r0, #60	; 0x3c
 800d368:	f000 f944 	bl	800d5f4 <mpool_alloc>
 800d36c:	4604      	mov	r4, r0
 800d36e:	6038      	str	r0, [r7, #0]
    svf->mempool = m;
 800d370:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = svf->mempool->leaf;
 800d372:	686b      	ldr	r3, [r5, #4]

    svf->type = type;
 800d374:	7106      	strb	r6, [r0, #4]

    svf->ic1eq = 0;
 800d376:	2500      	movs	r5, #0
 800d378:	6105      	str	r5, [r0, #16]
    svf->ic2eq = 0;
 800d37a:	6145      	str	r5, [r0, #20]
    svf->Q = Q;
 800d37c:	edc0 8a03 	vstr	s17, [r0, #12]
    svf->cutoff = freq;
 800d380:	ed80 8a02 	vstr	s16, [r0, #8]
    svf->g = tanf(PI * freq * leaf->invSampleRate);
 800d384:	ed9f 0a29 	vldr	s0, [pc, #164]	; 800d42c <tSVF_initToPool+0xdc>
 800d388:	ee28 8a00 	vmul.f32	s16, s16, s0
 800d38c:	ed93 0a01 	vldr	s0, [r3, #4]
 800d390:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d394:	f001 fbea 	bl	800eb6c <tanf>
 800d398:	ed84 0a06 	vstr	s0, [r4, #24]
    svf->k = 1.0f/Q;
 800d39c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3a0:	eec6 7aa8 	vdiv.f32	s15, s13, s17
 800d3a4:	edc4 7a07 	vstr	s15, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800d3a8:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d3ac:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d3b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3b8:	ed84 7a08 	vstr	s14, [r4, #32]
    svf->a2 = svf->g*svf->a1;
 800d3bc:	ee60 7a07 	vmul.f32	s15, s0, s14
 800d3c0:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
 800d3c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d3c8:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    svf->cH = 0.0f;
 800d3cc:	62e5      	str	r5, [r4, #44]	; 0x2c
    svf->cB = 0.0f;
 800d3ce:	6325      	str	r5, [r4, #48]	; 0x30
    svf->cL = 1.0f;
 800d3d0:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34

    if (type == SVFTypeLowpass)
 800d3d4:	2e01      	cmp	r6, #1
 800d3d6:	d00f      	beq.n	800d3f8 <tSVF_initToPool+0xa8>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
 800d3d8:	2e02      	cmp	r6, #2
 800d3da:	d011      	beq.n	800d400 <tSVF_initToPool+0xb0>
        svf->cB = 1.0f;
        svf->cBK = 0.0f;
        svf->cL = 0.0f;
    }

    else if (type == SVFTypeHighpass)
 800d3dc:	b1be      	cbz	r6, 800d40e <tSVF_initToPool+0xbe>
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = -1.0f;
    }

    else if (type == SVFTypeNotch)
 800d3de:	2e03      	cmp	r6, #3
 800d3e0:	d01c      	beq.n	800d41c <tSVF_initToPool+0xcc>
        svf->cBK = -1.0f;
        svf->cL = 0.0f;
    }


    else if (type == SVFTypePeak)
 800d3e2:	2e04      	cmp	r6, #4
 800d3e4:	d109      	bne.n	800d3fa <tSVF_initToPool+0xaa>
    {
        svf->cH = 1.0f;
 800d3e6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800d3ea:	62e3      	str	r3, [r4, #44]	; 0x2c
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
 800d3ec:	4b10      	ldr	r3, [pc, #64]	; (800d430 <tSVF_initToPool+0xe0>)
 800d3ee:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = -2.0f;
 800d3f0:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800d3f4:	6363      	str	r3, [r4, #52]	; 0x34
    }
}
 800d3f6:	e000      	b.n	800d3fa <tSVF_initToPool+0xaa>
        svf->cBK = 0.0f;
 800d3f8:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800d3fa:	ecbd 8b02 	vpop	{d8}
 800d3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cB = 1.0f;
 800d400:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800d404:	6323      	str	r3, [r4, #48]	; 0x30
        svf->cBK = 0.0f;
 800d406:	2300      	movs	r3, #0
 800d408:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = 0.0f;
 800d40a:	6363      	str	r3, [r4, #52]	; 0x34
 800d40c:	e7f5      	b.n	800d3fa <tSVF_initToPool+0xaa>
        svf->cH = 1.0f;
 800d40e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800d412:	62e3      	str	r3, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
 800d414:	4b06      	ldr	r3, [pc, #24]	; (800d430 <tSVF_initToPool+0xe0>)
 800d416:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = -1.0f;
 800d418:	6363      	str	r3, [r4, #52]	; 0x34
 800d41a:	e7ee      	b.n	800d3fa <tSVF_initToPool+0xaa>
        svf->cH = 1.0f;
 800d41c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800d420:	62e3      	str	r3, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
 800d422:	4b03      	ldr	r3, [pc, #12]	; (800d430 <tSVF_initToPool+0xe0>)
 800d424:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = 0.0f;
 800d426:	2300      	movs	r3, #0
 800d428:	6363      	str	r3, [r4, #52]	; 0x34
 800d42a:	e7e6      	b.n	800d3fa <tSVF_initToPool+0xaa>
 800d42c:	40490fdb 	.word	0x40490fdb
 800d430:	bf800000 	.word	0xbf800000

0800d434 <tSVF_init>:
{
 800d434:	b508      	push	{r3, lr}
    tSVF_initToPool     (svff, type, freq, Q, &leaf->mempool);
 800d436:	3218      	adds	r2, #24
 800d438:	f7ff ff8a 	bl	800d350 <tSVF_initToPool>
}
 800d43c:	bd08      	pop	{r3, pc}

0800d43e <tSVF_tick>:
    mpool_free((char*)svf, svf->mempool);
}

float   tSVF_tick(tSVF* const svff, float v0)
{
    _tSVF* svf = *svff;
 800d43e:	6803      	ldr	r3, [r0, #0]
    
    float v1,v2,v3;
    v3 = v0 - svf->ic2eq;
 800d440:	ed93 6a05 	vldr	s12, [r3, #20]
 800d444:	ee30 5a46 	vsub.f32	s10, s0, s12
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 800d448:	ed93 7a08 	vldr	s14, [r3, #32]
 800d44c:	edd3 5a04 	vldr	s11, [r3, #16]
 800d450:	ee27 7a25 	vmul.f32	s14, s14, s11
 800d454:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d458:	ee67 6a85 	vmul.f32	s13, s15, s10
 800d45c:	ee37 7a26 	vadd.f32	s14, s14, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 800d460:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800d464:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d468:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800d46c:	ee66 6a85 	vmul.f32	s13, s13, s10
 800d470:	ee77 7aa6 	vadd.f32	s15, s15, s13
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 800d474:	ee77 6a07 	vadd.f32	s13, s14, s14
 800d478:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800d47c:	edc3 6a04 	vstr	s13, [r3, #16]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 800d480:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d484:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800d488:	edc3 6a05 	vstr	s13, [r3, #20]
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 800d48c:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800d490:	ee26 0a80 	vmul.f32	s0, s13, s0
 800d494:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800d498:	ee66 6a87 	vmul.f32	s13, s13, s14
 800d49c:	ee30 0a26 	vadd.f32	s0, s0, s13
 800d4a0:	edd3 6a07 	vldr	s13, [r3, #28]
 800d4a4:	ee26 7a87 	vmul.f32	s14, s13, s14
 800d4a8:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800d4ac:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d4b0:	ee30 7a07 	vadd.f32	s14, s0, s14
 800d4b4:	ed93 0a0d 	vldr	s0, [r3, #52]	; 0x34
 800d4b8:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 800d4bc:	ee37 0a00 	vadd.f32	s0, s14, s0
 800d4c0:	4770      	bx	lr
	...

0800d4c4 <tSVF_setFreq>:

void     tSVF_setFreq(tSVF* const svff, float freq)
{
 800d4c4:	b510      	push	{r4, lr}
    _tSVF* svf = *svff;
 800d4c6:	6804      	ldr	r4, [r0, #0]
    LEAF* leaf = svf->mempool->leaf;
 800d4c8:	6823      	ldr	r3, [r4, #0]
 800d4ca:	685b      	ldr	r3, [r3, #4]
    
    svf->cutoff = freq;
 800d4cc:	ed84 0a02 	vstr	s0, [r4, #8]
    svf->g = tanf(PI * freq * leaf->invSampleRate);
 800d4d0:	eddf 7a11 	vldr	s15, [pc, #68]	; 800d518 <tSVF_setFreq+0x54>
 800d4d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d4d8:	edd3 7a01 	vldr	s15, [r3, #4]
 800d4dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d4e0:	f001 fb44 	bl	800eb6c <tanf>
 800d4e4:	ed84 0a06 	vstr	s0, [r4, #24]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800d4e8:	edd4 7a07 	vldr	s15, [r4, #28]
 800d4ec:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d4f0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d4f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d500:	ed84 7a08 	vstr	s14, [r4, #32]
    svf->a2 = svf->g * svf->a1;
 800d504:	ee60 7a07 	vmul.f32	s15, s0, s14
 800d508:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 800d50c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d510:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
}
 800d514:	bd10      	pop	{r4, pc}
 800d516:	bf00      	nop
 800d518:	40490fdb 	.word	0x40490fdb

0800d51c <LEAF_clip>:

float   LEAF_clip(float min, float val, float max)
{
    float tempmin = min;
    float tempmax = max;
    if (min > max)
 800d51c:	eeb4 0ac1 	vcmpe.f32	s0, s2
 800d520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d524:	dc05      	bgt.n	800d532 <LEAF_clip+0x16>
 800d526:	ee11 3a10 	vmov	r3, s2
    float tempmin = min;
 800d52a:	eeb0 1a40 	vmov.f32	s2, s0
    float tempmax = max;
 800d52e:	ee00 3a10 	vmov	s0, r3
    {
        tempmin = max;
        tempmax = min;
    }
    if (val < tempmin)
 800d532:	eeb4 1ae0 	vcmpe.f32	s2, s1
 800d536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d53a:	dc08      	bgt.n	800d54e <LEAF_clip+0x32>
    {
        return tempmin;
    }
    else if (val > tempmax)
 800d53c:	eeb4 0ae0 	vcmpe.f32	s0, s1
 800d540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d544:	d402      	bmi.n	800d54c <LEAF_clip+0x30>
    {
        return tempmax;
    }
    else
    {
        return val;
 800d546:	eeb0 0a60 	vmov.f32	s0, s1
    }
}
 800d54a:	4770      	bx	lr
 800d54c:	4770      	bx	lr
        return tempmin;
 800d54e:	eeb0 0a41 	vmov.f32	s0, s2
 800d552:	4770      	bx	lr

0800d554 <LEAF_clipInt>:

int   LEAF_clipInt(int min, int val, int max)
{
    int tempmin = min;
    int tempmax = max;
    if (min > max)
 800d554:	4290      	cmp	r0, r2
 800d556:	dc02      	bgt.n	800d55e <LEAF_clipInt+0xa>
 800d558:	4613      	mov	r3, r2
    int tempmin = min;
 800d55a:	4602      	mov	r2, r0
    int tempmax = max;
 800d55c:	4618      	mov	r0, r3
    {
        tempmin = max;
        tempmax = min;
    }
    if (val < tempmin) {
 800d55e:	428a      	cmp	r2, r1
 800d560:	dc04      	bgt.n	800d56c <LEAF_clipInt+0x18>
        return tempmin;
    } else if (val > tempmax) {
 800d562:	4288      	cmp	r0, r1
 800d564:	db01      	blt.n	800d56a <LEAF_clipInt+0x16>
        return tempmax;
    } else {
        return val;
 800d566:	4608      	mov	r0, r1
    }
}
 800d568:	4770      	bx	lr
 800d56a:	4770      	bx	lr
        return tempmin;
 800d56c:	4610      	mov	r0, r2
 800d56e:	4770      	bx	lr

0800d570 <LEAF_interpolate_hermite_x>:
//grabbed this from Tom Erbe's Delay pd code
float LEAF_interpolate_hermite_x(float yy0, float yy1, float yy2, float yy3, float xx)
{
    // 4-point, 3rd-order Hermite (x-form)
    float c0 = yy1;
    float c1 = 0.5f * (yy2 - yy0);
 800d570:	ee31 7a40 	vsub.f32	s14, s2, s0
 800d574:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800d578:	ee27 7a26 	vmul.f32	s14, s14, s13
    float y0my1 = yy0 - yy1;
 800d57c:	ee30 0a60 	vsub.f32	s0, s0, s1
    float c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 800d580:	ee70 7ac1 	vsub.f32	s15, s1, s2
 800d584:	ee71 1ac0 	vsub.f32	s3, s3, s0
 800d588:	ee71 1ac1 	vsub.f32	s3, s3, s2
 800d58c:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800d590:	ee77 1aa1 	vadd.f32	s3, s15, s3
    float c2 = y0my1 + c1 - c3;
 800d594:	ee37 0a00 	vadd.f32	s0, s14, s0
 800d598:	ee70 7a61 	vsub.f32	s15, s0, s3
    
    return ((c3 * xx + c2) * xx + c1) * xx + c0;
 800d59c:	ee61 1a82 	vmul.f32	s3, s3, s4
 800d5a0:	ee71 1aa7 	vadd.f32	s3, s3, s15
 800d5a4:	ee61 1a82 	vmul.f32	s3, s3, s4
 800d5a8:	ee71 1a87 	vadd.f32	s3, s3, s14
 800d5ac:	ee21 2a82 	vmul.f32	s4, s3, s4
}
 800d5b0:	ee32 0a20 	vadd.f32	s0, s4, s1
 800d5b4:	4770      	bx	lr

0800d5b6 <mpool_create>:

/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
 800d5b6:	b410      	push	{r4}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800d5b8:	6853      	ldr	r3, [r2, #4]
 800d5ba:	2410      	movs	r4, #16
 800d5bc:	635c      	str	r4, [r3, #52]	; 0x34
    
    pool->mpool = (char*)memory;
 800d5be:	6090      	str	r0, [r2, #8]
    pool->usize  = 0;
 800d5c0:	2400      	movs	r4, #0
 800d5c2:	60d4      	str	r4, [r2, #12]
    pool->msize  = size;
 800d5c4:	6111      	str	r1, [r2, #16]
    
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800d5c6:	6853      	ldr	r3, [r2, #4]
 800d5c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5ca:	1ac9      	subs	r1, r1, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
 800d5cc:	4403      	add	r3, r0
 800d5ce:	6003      	str	r3, [r0, #0]
    node->next = next;
 800d5d0:	6044      	str	r4, [r0, #4]
    node->prev = prev;
 800d5d2:	6084      	str	r4, [r0, #8]
    node->size = size;
 800d5d4:	60c1      	str	r1, [r0, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800d5d6:	6150      	str	r0, [r2, #20]
}
 800d5d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5dc:	4770      	bx	lr

0800d5de <leaf_pool_init>:
{
 800d5de:	b538      	push	{r3, r4, r5, lr}
 800d5e0:	4604      	mov	r4, r0
 800d5e2:	4608      	mov	r0, r1
 800d5e4:	4611      	mov	r1, r2
    mpool_create(memory, size, &leaf->_internal_mempool);
 800d5e6:	f104 051c 	add.w	r5, r4, #28
 800d5ea:	462a      	mov	r2, r5
 800d5ec:	f7ff ffe3 	bl	800d5b6 <mpool_create>
    leaf->mempool = &leaf->_internal_mempool;
 800d5f0:	61a5      	str	r5, [r4, #24]
}
 800d5f2:	bd38      	pop	{r3, r4, r5, pc}

0800d5f4 <mpool_alloc>:
{
 800d5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5f6:	460c      	mov	r4, r1
    if (pool->head == NULL)
 800d5f8:	694b      	ldr	r3, [r1, #20]
 800d5fa:	b19b      	cbz	r3, 800d624 <mpool_alloc+0x30>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 800d5fc:	1dc1      	adds	r1, r0, #7
 800d5fe:	f021 0107 	bic.w	r1, r1, #7
    while (node_to_alloc->size < size_to_alloc)
 800d602:	68da      	ldr	r2, [r3, #12]
 800d604:	428a      	cmp	r2, r1
 800d606:	d224      	bcs.n	800d652 <mpool_alloc+0x5e>
        node_to_alloc = node_to_alloc->next;
 800d608:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d1f9      	bne.n	800d602 <mpool_alloc+0xe>
            if ((pool->msize - pool->usize) > asize)
 800d60e:	6923      	ldr	r3, [r4, #16]
 800d610:	68e2      	ldr	r2, [r4, #12]
 800d612:	1a9b      	subs	r3, r3, r2
 800d614:	4283      	cmp	r3, r0
 800d616:	d916      	bls.n	800d646 <mpool_alloc+0x52>
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800d618:	2101      	movs	r1, #1
 800d61a:	6860      	ldr	r0, [r4, #4]
 800d61c:	f001 fa38 	bl	800ea90 <LEAF_internalErrorCallback>
            return NULL;
 800d620:	2000      	movs	r0, #0
 800d622:	e052      	b.n	800d6ca <mpool_alloc+0xd6>
        if ((pool->msize - pool->usize) > asize)
 800d624:	690b      	ldr	r3, [r1, #16]
 800d626:	68ca      	ldr	r2, [r1, #12]
 800d628:	1a9b      	subs	r3, r3, r2
 800d62a:	4283      	cmp	r3, r0
 800d62c:	d905      	bls.n	800d63a <mpool_alloc+0x46>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800d62e:	2101      	movs	r1, #1
 800d630:	6860      	ldr	r0, [r4, #4]
 800d632:	f001 fa2d 	bl	800ea90 <LEAF_internalErrorCallback>
        return NULL;
 800d636:	2000      	movs	r0, #0
 800d638:	e047      	b.n	800d6ca <mpool_alloc+0xd6>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800d63a:	2100      	movs	r1, #0
 800d63c:	6860      	ldr	r0, [r4, #4]
 800d63e:	f001 fa27 	bl	800ea90 <LEAF_internalErrorCallback>
        return NULL;
 800d642:	2000      	movs	r0, #0
 800d644:	e041      	b.n	800d6ca <mpool_alloc+0xd6>
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800d646:	2100      	movs	r1, #0
 800d648:	6860      	ldr	r0, [r4, #4]
 800d64a:	f001 fa21 	bl	800ea90 <LEAF_internalErrorCallback>
            return NULL;
 800d64e:	2000      	movs	r0, #0
 800d650:	e03b      	b.n	800d6ca <mpool_alloc+0xd6>
    size_t leftover = node_to_alloc->size - size_to_alloc;
 800d652:	1a55      	subs	r5, r2, r1
    node_to_alloc->size = size_to_alloc;
 800d654:	60d9      	str	r1, [r3, #12]
    if (leftover > pool->leaf->header_size)
 800d656:	6860      	ldr	r0, [r4, #4]
 800d658:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800d65a:	42a8      	cmp	r0, r5
 800d65c:	d229      	bcs.n	800d6b2 <mpool_alloc+0xbe>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800d65e:	68a6      	ldr	r6, [r4, #8]
 800d660:	1b9a      	subs	r2, r3, r6
        offset += pool->leaf->header_size + node_to_alloc->size;
 800d662:	4401      	add	r1, r0
 800d664:	4411      	add	r1, r2
        new_node = create_node(&pool->mpool[offset],
 800d666:	1872      	adds	r2, r6, r1
                               node_to_alloc->next,
 800d668:	f8d3 c004 	ldr.w	ip, [r3, #4]
                               node_to_alloc->prev,
 800d66c:	689f      	ldr	r7, [r3, #8]
        new_node = create_node(&pool->mpool[offset],
 800d66e:	1a2d      	subs	r5, r5, r0
    node->pool = block_location + header_size;
 800d670:	4410      	add	r0, r2
 800d672:	5070      	str	r0, [r6, r1]
    node->next = next;
 800d674:	f8c2 c004 	str.w	ip, [r2, #4]
    node->prev = prev;
 800d678:	6097      	str	r7, [r2, #8]
    node->size = size;
 800d67a:	60d5      	str	r5, [r2, #12]
    if (pool->head == node_to_alloc)
 800d67c:	6961      	ldr	r1, [r4, #20]
 800d67e:	4299      	cmp	r1, r3
 800d680:	d01a      	beq.n	800d6b8 <mpool_alloc+0xc4>
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 800d682:	685a      	ldr	r2, [r3, #4]
 800d684:	b10a      	cbz	r2, 800d68a <mpool_alloc+0x96>
    {
        // Close the link
        node->next->prev = node->prev;
 800d686:	6899      	ldr	r1, [r3, #8]
 800d688:	6091      	str	r1, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 800d68a:	689a      	ldr	r2, [r3, #8]
 800d68c:	b10a      	cbz	r2, 800d692 <mpool_alloc+0x9e>
    {
        // Close the link
        node->prev->next = node->next;
 800d68e:	6859      	ldr	r1, [r3, #4]
 800d690:	6051      	str	r1, [r2, #4]
    }
    
    node->next = NULL;
 800d692:	2200      	movs	r2, #0
 800d694:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 800d696:	609a      	str	r2, [r3, #8]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800d698:	6860      	ldr	r0, [r4, #4]
 800d69a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800d69c:	68d9      	ldr	r1, [r3, #12]
 800d69e:	4411      	add	r1, r2
 800d6a0:	68e2      	ldr	r2, [r4, #12]
 800d6a2:	440a      	add	r2, r1
 800d6a4:	60e2      	str	r2, [r4, #12]
    if (pool->leaf->clearOnAllocation > 0)
 800d6a6:	6942      	ldr	r2, [r0, #20]
 800d6a8:	2a00      	cmp	r2, #0
 800d6aa:	dd0d      	ble.n	800d6c8 <mpool_alloc+0xd4>
        char* new_pool = (char*)node_to_alloc->pool;
 800d6ac:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	e007      	b.n	800d6c2 <mpool_alloc+0xce>
        node_to_alloc->size += leftover;
 800d6b2:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 800d6b4:	685a      	ldr	r2, [r3, #4]
 800d6b6:	e7e1      	b.n	800d67c <mpool_alloc+0x88>
        pool->head = new_node;
 800d6b8:	6162      	str	r2, [r4, #20]
 800d6ba:	e7e2      	b.n	800d682 <mpool_alloc+0x8e>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800d6bc:	2100      	movs	r1, #0
 800d6be:	5481      	strb	r1, [r0, r2]
 800d6c0:	3201      	adds	r2, #1
 800d6c2:	68d9      	ldr	r1, [r3, #12]
 800d6c4:	4291      	cmp	r1, r2
 800d6c6:	d8f9      	bhi.n	800d6bc <mpool_alloc+0xc8>
    return node_to_alloc->pool;
 800d6c8:	6818      	ldr	r0, [r3, #0]
}
 800d6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d6cc <tMempool_initToPool>:

    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem, LEAF* const leaf)
{
 800d6cc:	b570      	push	{r4, r5, r6, lr}
 800d6ce:	4606      	mov	r6, r0
 800d6d0:	460c      	mov	r4, r1
 800d6d2:	4615      	mov	r5, r2
    _tMempool* mm = *mem;
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 800d6d4:	6819      	ldr	r1, [r3, #0]
 800d6d6:	2018      	movs	r0, #24
 800d6d8:	f7ff ff8c 	bl	800d5f4 <mpool_alloc>
 800d6dc:	4602      	mov	r2, r0
 800d6de:	6030      	str	r0, [r6, #0]
    m->leaf = leaf;
 800d6e0:	9b04      	ldr	r3, [sp, #16]
 800d6e2:	6043      	str	r3, [r0, #4]
    mpool_create (memory, size, m);
 800d6e4:	4629      	mov	r1, r5
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	f7ff ff65 	bl	800d5b6 <mpool_create>
}
 800d6ec:	bd70      	pop	{r4, r5, r6, pc}

0800d6ee <tMempool_init>:
{
 800d6ee:	b500      	push	{lr}
 800d6f0:	b083      	sub	sp, #12
    tMempool_initToPool(mp, memory, size, &leaf->mempool, leaf);
 800d6f2:	9300      	str	r3, [sp, #0]
 800d6f4:	3318      	adds	r3, #24
 800d6f6:	f7ff ffe9 	bl	800d6cc <tMempool_initToPool>
}
 800d6fa:	b003      	add	sp, #12
 800d6fc:	f85d fb04 	ldr.w	pc, [sp], #4

0800d700 <handleStartEndChange>:
    tRamp_setDest(&p->gain, 0.f);
}

static void handleStartEndChange(tSampler* const sp)
{
    _tSampler* p = *sp;
 800d700:	6802      	ldr	r2, [r0, #0]
    
    p->len = abs(p->end - p->start);
 800d702:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 800d704:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800d706:	1a43      	subs	r3, r0, r1
 800d708:	2b00      	cmp	r3, #0
 800d70a:	bfb8      	it	lt
 800d70c:	425b      	neglt	r3, r3
 800d70e:	6453      	str	r3, [r2, #68]	; 0x44
    
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 800d710:	edd2 7a12 	vldr	s15, [r2, #72]	; 0x48
 800d714:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d718:	ee07 3a90 	vmov	s15, r3
 800d71c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d720:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800d724:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d728:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d730:	dd03      	ble.n	800d73a <handleStartEndChange+0x3a>
 800d732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d736:	edc2 7a12 	vstr	s15, [r2, #72]	; 0x48
    
    if (p->start > p->end)
 800d73a:	4288      	cmp	r0, r1
 800d73c:	db03      	blt.n	800d746 <handleStartEndChange+0x46>
    {
        p->flip = -1;
    }
    else
    {
        p->flip = 1;
 800d73e:	2301      	movs	r3, #1
 800d740:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
    }
}
 800d744:	4770      	bx	lr
        p->flip = -1;
 800d746:	23ff      	movs	r3, #255	; 0xff
 800d748:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
 800d74c:	4770      	bx	lr

0800d74e <tBuffer_initToPool>:
{
 800d74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d752:	4680      	mov	r8, r0
 800d754:	460e      	mov	r6, r1
 800d756:	461f      	mov	r7, r3
    _tMempool* m = *mp;
 800d758:	6815      	ldr	r5, [r2, #0]
    _tBuffer* s = *sb = (_tBuffer*) mpool_alloc(sizeof(_tBuffer), m);
 800d75a:	4629      	mov	r1, r5
 800d75c:	2024      	movs	r0, #36	; 0x24
 800d75e:	f7ff ff49 	bl	800d5f4 <mpool_alloc>
 800d762:	4604      	mov	r4, r0
 800d764:	f8c8 0000 	str.w	r0, [r8]
    s->mempool = m;
 800d768:	6005      	str	r5, [r0, #0]
    s->buff = (float*) mpool_alloc( sizeof(float) * length, m);
 800d76a:	4629      	mov	r1, r5
 800d76c:	00b0      	lsls	r0, r6, #2
 800d76e:	f7ff ff41 	bl	800d5f4 <mpool_alloc>
 800d772:	6060      	str	r0, [r4, #4]
    s->sampleRate = leaf->sampleRate;
 800d774:	edd7 7a00 	vldr	s15, [r7]
 800d778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d77c:	edc4 7a06 	vstr	s15, [r4, #24]
    s->channels = 1;
 800d780:	2301      	movs	r3, #1
 800d782:	6163      	str	r3, [r4, #20]
    s->bufferLength = length;
 800d784:	60e6      	str	r6, [r4, #12]
    s->recordedLength = 0;
 800d786:	2300      	movs	r3, #0
 800d788:	6123      	str	r3, [r4, #16]
    s->active = 0;
 800d78a:	6223      	str	r3, [r4, #32]
    s->idx = 0;
 800d78c:	60a3      	str	r3, [r4, #8]
    s->mode = RecordOneShot;
 800d78e:	7723      	strb	r3, [r4, #28]
}
 800d790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d794 <tBuffer_setBuffer>:
    _tBuffer* s = *sb;
 800d794:	6800      	ldr	r0, [r0, #0]
    s->buff = externalBuffer;
 800d796:	6041      	str	r1, [r0, #4]
    s->channels = channels;
 800d798:	6143      	str	r3, [r0, #20]
    s->sampleRate = sampleRate;
 800d79a:	9900      	ldr	r1, [sp, #0]
 800d79c:	6181      	str	r1, [r0, #24]
    s->recordedLength = length/channels;
 800d79e:	fb92 f3f3 	sdiv	r3, r2, r3
 800d7a2:	6103      	str	r3, [r0, #16]
    s->bufferLength = s->recordedLength;
 800d7a4:	60c3      	str	r3, [r0, #12]
}
 800d7a6:	4770      	bx	lr

0800d7a8 <tSampler_initToPool>:
{
 800d7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7ac:	4681      	mov	r9, r0
 800d7ae:	4688      	mov	r8, r1
 800d7b0:	4617      	mov	r7, r2
 800d7b2:	461d      	mov	r5, r3
    _tMempool* m = *mp;
 800d7b4:	6816      	ldr	r6, [r2, #0]
    _tSampler* p = *sp = (_tSampler*) mpool_alloc(sizeof(_tSampler), m);
 800d7b6:	4631      	mov	r1, r6
 800d7b8:	2068      	movs	r0, #104	; 0x68
 800d7ba:	f7ff ff1b 	bl	800d5f4 <mpool_alloc>
 800d7be:	4604      	mov	r4, r0
 800d7c0:	f8c9 0000 	str.w	r0, [r9]
    p->mempool = m;
 800d7c4:	6006      	str	r6, [r0, #0]
    _tBuffer* s = *b;
 800d7c6:	f8d8 3000 	ldr.w	r3, [r8]
    p->leafInvSampleRate = leaf->invSampleRate;
 800d7ca:	edd5 6a01 	vldr	s13, [r5, #4]
 800d7ce:	edc0 6a02 	vstr	s13, [r0, #8]
    p->leafSampleRate = leaf->sampleRate;
 800d7d2:	ed95 7a00 	vldr	s14, [r5]
 800d7d6:	ed80 7a03 	vstr	s14, [r0, #12]
    p->ticksPerSevenMs = 0.007f * p->leafSampleRate;
 800d7da:	eddf 7a27 	vldr	s15, [pc, #156]	; 800d878 <tSampler_initToPool+0xd0>
 800d7de:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7e2:	ed80 7a04 	vstr	s14, [r0, #16]
    p->rateFactor = s->sampleRate * p->leafInvSampleRate;
 800d7e6:	edd3 7a06 	vldr	s15, [r3, #24]
 800d7ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d7f2:	edc0 7a05 	vstr	s15, [r0, #20]
    p->channels = s->channels;
 800d7f6:	695a      	ldr	r2, [r3, #20]
 800d7f8:	6182      	str	r2, [r0, #24]
    p->samp = s;
 800d7fa:	6043      	str	r3, [r0, #4]
    p->active = 0;
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	6582      	str	r2, [r0, #88]	; 0x58
    p->start = 0;
 800d800:	6342      	str	r2, [r0, #52]	; 0x34
    p->end = p->samp->bufferLength - 1;
 800d802:	68db      	ldr	r3, [r3, #12]
 800d804:	3b01      	subs	r3, #1
 800d806:	63c3      	str	r3, [r0, #60]	; 0x3c
    p->len = p->end - p->start;
 800d808:	6443      	str	r3, [r0, #68]	; 0x44
    p->idx = 0.f;
 800d80a:	2300      	movs	r3, #0
 800d80c:	6203      	str	r3, [r0, #32]
    if (rate < 0.f)
 800d80e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d816:	d42c      	bmi.n	800d872 <tSampler_initToPool+0xca>
    p->inc = rate;
 800d818:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    p->iinc = 1.f / p->inc;
 800d81c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d820:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d824:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
    p->dir = 1;
 800d828:	2101      	movs	r1, #1
 800d82a:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    p->flip = 1;
 800d82e:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
    p->bnf = 1;
 800d832:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
    p->mode = PlayNormal;
 800d836:	2500      	movs	r5, #0
 800d838:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    p->cfxlen = 500; // default 300 sample crossfade
 800d83c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800d840:	64a3      	str	r3, [r4, #72]	; 0x48
    tRamp_initToPool(&p->gain, 5.0f, 1, mp);
 800d842:	f104 061c 	add.w	r6, r4, #28
 800d846:	463a      	mov	r2, r7
 800d848:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800d84c:	4630      	mov	r0, r6
 800d84e:	f7ff fc9f 	bl	800d190 <tRamp_initToPool>
    tRamp_setVal(&p->gain, 0.f);
 800d852:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800d87c <tSampler_initToPool+0xd4>
 800d856:	4630      	mov	r0, r6
 800d858:	f7ff fcf2 	bl	800d240 <tRamp_setVal>
    p->targetstart = -1;
 800d85c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d860:	63a3      	str	r3, [r4, #56]	; 0x38
    p->targetend = -1;
 800d862:	6423      	str	r3, [r4, #64]	; 0x40
    p->inCrossfade = 0;
 800d864:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    p->flipStart = -1;
 800d868:	4b05      	ldr	r3, [pc, #20]	; (800d880 <tSampler_initToPool+0xd8>)
 800d86a:	6623      	str	r3, [r4, #96]	; 0x60
    p->flipIdx = -1;
 800d86c:	6663      	str	r3, [r4, #100]	; 0x64
}
 800d86e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        rate = -rate;
 800d872:	eef1 7a67 	vneg.f32	s15, s15
 800d876:	e7cf      	b.n	800d818 <tSampler_initToPool+0x70>
 800d878:	3be56042 	.word	0x3be56042
 800d87c:	00000000 	.word	0x00000000
 800d880:	bf800000 	.word	0xbf800000

0800d884 <tSampler_setMode>:
    _tSampler* p = *sp;
 800d884:	6803      	ldr	r3, [r0, #0]
    p->mode = mode;
 800d886:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
}
 800d88a:	4770      	bx	lr

0800d88c <tSampler_play>:
{
 800d88c:	b500      	push	{lr}
 800d88e:	b083      	sub	sp, #12
    _tSampler* p = *sp;
 800d890:	6800      	ldr	r0, [r0, #0]
 800d892:	9001      	str	r0, [sp, #4]
    if (p->active > 0)
 800d894:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800d896:	2b00      	cmp	r3, #0
 800d898:	dc1d      	bgt.n	800d8d6 <tSampler_play+0x4a>
    else if (p->active < 0)
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	db28      	blt.n	800d8f0 <tSampler_play+0x64>
        p->active = 1;
 800d89e:	2301      	movs	r3, #1
 800d8a0:	6583      	str	r3, [r0, #88]	; 0x58
        p->retrigger = 0;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	6543      	str	r3, [r0, #84]	; 0x54
        tRamp_setDest(&p->gain, 1.f);
 800d8a6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d8aa:	301c      	adds	r0, #28
 800d8ac:	f7ff fcba 	bl	800d224 <tRamp_setDest>
        if (p->dir > 0)
 800d8b0:	9b01      	ldr	r3, [sp, #4]
 800d8b2:	f993 2030 	ldrsb.w	r2, [r3, #48]	; 0x30
 800d8b6:	2a00      	cmp	r2, #0
 800d8b8:	dd27      	ble.n	800d90a <tSampler_play+0x7e>
            if (p->flip > 0)    p->idx = p->start;
 800d8ba:	f993 2031 	ldrsb.w	r2, [r3, #49]	; 0x31
 800d8be:	2a00      	cmp	r2, #0
 800d8c0:	dd1c      	ble.n	800d8fc <tSampler_play+0x70>
 800d8c2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800d8c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8ca:	edc3 7a08 	vstr	s15, [r3, #32]
        handleStartEndChange(&p);
 800d8ce:	a801      	add	r0, sp, #4
 800d8d0:	f7ff ff16 	bl	800d700 <handleStartEndChange>
}
 800d8d4:	e009      	b.n	800d8ea <tSampler_play+0x5e>
        p->active = -1;
 800d8d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8da:	6583      	str	r3, [r0, #88]	; 0x58
        p->retrigger = 1;
 800d8dc:	2301      	movs	r3, #1
 800d8de:	6543      	str	r3, [r0, #84]	; 0x54
        tRamp_setDest(&p->gain, 0.f);
 800d8e0:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800d930 <tSampler_play+0xa4>
 800d8e4:	301c      	adds	r0, #28
 800d8e6:	f7ff fc9d 	bl	800d224 <tRamp_setDest>
}
 800d8ea:	b003      	add	sp, #12
 800d8ec:	f85d fb04 	ldr.w	pc, [sp], #4
        p->active = -1;
 800d8f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8f4:	6583      	str	r3, [r0, #88]	; 0x58
        p->retrigger = 1;
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	6543      	str	r3, [r0, #84]	; 0x54
 800d8fa:	e7f6      	b.n	800d8ea <tSampler_play+0x5e>
            else                p->idx = p->end;
 800d8fc:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800d900:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d904:	edc3 7a08 	vstr	s15, [r3, #32]
 800d908:	e7e1      	b.n	800d8ce <tSampler_play+0x42>
            if (p->flip > 0)    p->idx = p->end;
 800d90a:	f993 2031 	ldrsb.w	r2, [r3, #49]	; 0x31
 800d90e:	2a00      	cmp	r2, #0
 800d910:	dd06      	ble.n	800d920 <tSampler_play+0x94>
 800d912:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800d916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d91a:	edc3 7a08 	vstr	s15, [r3, #32]
 800d91e:	e7d6      	b.n	800d8ce <tSampler_play+0x42>
            else                p->idx = p->start;
 800d920:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800d924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d928:	edc3 7a08 	vstr	s15, [r3, #32]
 800d92c:	e7cf      	b.n	800d8ce <tSampler_play+0x42>
 800d92e:	bf00      	nop
 800d930:	00000000 	.word	0x00000000

0800d934 <tSampler_stop>:
{
 800d934:	b508      	push	{r3, lr}
    _tSampler* p = *sp;
 800d936:	6800      	ldr	r0, [r0, #0]
    p->active = -1;
 800d938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d93c:	6583      	str	r3, [r0, #88]	; 0x58
    tRamp_setDest(&p->gain, 0.f);
 800d93e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800d94c <tSampler_stop+0x18>
 800d942:	301c      	adds	r0, #28
 800d944:	f7ff fc6e 	bl	800d224 <tRamp_setDest>
}
 800d948:	bd08      	pop	{r3, pc}
 800d94a:	bf00      	nop
 800d94c:	00000000 	.word	0x00000000

0800d950 <tSampler_setStart>:
        tSampler_setEnd(sp, p->targetend);
    }
}

void tSampler_setStart     (tSampler* const sp, int32_t start)
{
 800d950:	b570      	push	{r4, r5, r6, lr}
    _tSampler* p = *sp;
 800d952:	6804      	ldr	r4, [r0, #0]
    if (start == p->end)
    {
        return;
    }
    */
    if (p->active) // only bother with these checks if we're actually playing
 800d954:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d956:	2b00      	cmp	r3, #0
 800d958:	f000 8085 	beq.w	800da66 <tSampler_setStart+0x116>
    {
        if (start > p->end)
 800d95c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d95e:	428a      	cmp	r2, r1
 800d960:	da28      	bge.n	800d9b4 <tSampler_setStart+0x64>
        {
            tempflip = -1;
 800d962:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        else
        {
            tempflip = 1;
        }
        
        int dir = p->bnf * p->dir * tempflip;
 800d966:	f994 6032 	ldrsb.w	r6, [r4, #50]	; 0x32
 800d96a:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 800d96e:	fb03 f306 	mul.w	r3, r3, r6
 800d972:	fb05 f303 	mul.w	r3, r5, r3
        
        uint32_t cfxlen = p->cfxlen;
 800d976:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
        if (p->len * 0.25f < cfxlen) cfxlen = p->len * 0.25f;
 800d97a:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 800d97e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d982:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800d986:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d98a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800d98e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800d992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d996:	d501      	bpl.n	800d99c <tSampler_setStart+0x4c>
 800d998:	eebc 7ae7 	vcvt.u32.f32	s14, s15
        
        if (p->inCrossfade || p->flipStart >= 0)
 800d99c:	f894 605c 	ldrb.w	r6, [r4, #92]	; 0x5c
 800d9a0:	b936      	cbnz	r6, 800d9b0 <tSampler_setStart+0x60>
 800d9a2:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
 800d9a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d9aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9ae:	db03      	blt.n	800d9b8 <tSampler_setStart+0x68>
        {
            p->targetstart = start;
 800d9b0:	63a1      	str	r1, [r4, #56]	; 0x38
    
    p->start = LEAF_clipInt(0, start, p->samp->recordedLength-1);
    handleStartEndChange(sp);
    p->targetstart = -1;
    
}
 800d9b2:	bd70      	pop	{r4, r5, r6, pc}
            tempflip = 1;
 800d9b4:	2501      	movs	r5, #1
 800d9b6:	e7d6      	b.n	800d966 <tSampler_setStart+0x16>
        if ((tempflip > 0) && (dir > 0)) // start is start and we're playing forward
 800d9b8:	2d00      	cmp	r5, #0
 800d9ba:	bfc8      	it	gt
 800d9bc:	2b00      	cmpgt	r3, #0
 800d9be:	dd23      	ble.n	800da08 <tSampler_setStart+0xb8>
            if (start > p->idx)// start given is after current index or we're in a crossfade
 800d9c0:	ee06 1a90 	vmov	s13, r1
 800d9c4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d9c8:	ed94 6a08 	vldr	s12, [r4, #32]
 800d9cc:	eef4 6ac6 	vcmpe.f32	s13, s12
 800d9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9d4:	dd3e      	ble.n	800da54 <tSampler_setStart+0x104>
                p->targetstart = start;
 800d9d6:	63a1      	str	r1, [r4, #56]	; 0x38
                float tempLen = abs(p->end - start) * 0.25f;
 800d9d8:	1a51      	subs	r1, r2, r1
 800d9da:	2900      	cmp	r1, #0
 800d9dc:	bfb8      	it	lt
 800d9de:	4249      	neglt	r1, r1
 800d9e0:	ee07 1a90 	vmov	s15, r1
 800d9e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d9e8:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800d9ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
                if (cfxlen > tempLen)
 800d9f0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d9f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9fc:	ddd9      	ble.n	800d9b2 <tSampler_setStart+0x62>
                    p->cfxlen = tempLen;
 800d9fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da02:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
 800da06:	e7d4      	b.n	800d9b2 <tSampler_setStart+0x62>
        else if ((tempflip < 0) && (dir < 0)) // start is end and we're playing in reverse
 800da08:	421d      	tst	r5, r3
 800da0a:	d523      	bpl.n	800da54 <tSampler_setStart+0x104>
            if (start < p->idx)// start given is before current index or we're in a crossfade
 800da0c:	ee06 1a90 	vmov	s13, r1
 800da10:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800da14:	ed94 6a08 	vldr	s12, [r4, #32]
 800da18:	eef4 6ac6 	vcmpe.f32	s13, s12
 800da1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da20:	d518      	bpl.n	800da54 <tSampler_setStart+0x104>
                p->targetstart = start;
 800da22:	63a1      	str	r1, [r4, #56]	; 0x38
                float tempLen = abs(p->end - start) * 0.25f;
 800da24:	1a51      	subs	r1, r2, r1
 800da26:	2900      	cmp	r1, #0
 800da28:	bfb8      	it	lt
 800da2a:	4249      	neglt	r1, r1
 800da2c:	ee07 1a90 	vmov	s15, r1
 800da30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da34:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800da38:	ee67 7aa6 	vmul.f32	s15, s15, s13
                if (cfxlen > tempLen)
 800da3c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800da40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800da44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da48:	ddb3      	ble.n	800d9b2 <tSampler_setStart+0x62>
                    p->cfxlen = tempLen;
 800da4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da4e:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
 800da52:	e7ae      	b.n	800d9b2 <tSampler_setStart+0x62>
        if (tempflip != p->flip && p->flipStart < 0)
 800da54:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 800da58:	42ab      	cmp	r3, r5
 800da5a:	d004      	beq.n	800da66 <tSampler_setStart+0x116>
 800da5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800da60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da64:	d40e      	bmi.n	800da84 <tSampler_setStart+0x134>
 800da66:	4605      	mov	r5, r0
    p->start = LEAF_clipInt(0, start, p->samp->recordedLength-1);
 800da68:	6863      	ldr	r3, [r4, #4]
 800da6a:	691a      	ldr	r2, [r3, #16]
 800da6c:	3a01      	subs	r2, #1
 800da6e:	2000      	movs	r0, #0
 800da70:	f7ff fd70 	bl	800d554 <LEAF_clipInt>
 800da74:	6360      	str	r0, [r4, #52]	; 0x34
    handleStartEndChange(sp);
 800da76:	4628      	mov	r0, r5
 800da78:	f7ff fe42 	bl	800d700 <handleStartEndChange>
    p->targetstart = -1;
 800da7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da80:	63a3      	str	r3, [r4, #56]	; 0x38
 800da82:	e796      	b.n	800d9b2 <tSampler_setStart+0x62>
            p->flipIdx = 0;
 800da84:	2300      	movs	r3, #0
 800da86:	6663      	str	r3, [r4, #100]	; 0x64
 800da88:	e7ed      	b.n	800da66 <tSampler_setStart+0x116>

0800da8a <tSampler_setEnd>:

void tSampler_setEnd       (tSampler* const sp, int32_t end)
{
 800da8a:	b570      	push	{r4, r5, r6, lr}
    _tSampler* p = *sp;
 800da8c:	6804      	ldr	r4, [r0, #0]
    if (end == p->start)
    {
        return;
    }
    */
    if (p->active) // only bother with these checks if we're actually playing
 800da8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800da90:	2b00      	cmp	r3, #0
 800da92:	f000 808d 	beq.w	800dbb0 <tSampler_setEnd+0x126>
    {
        if (p->start > end)
 800da96:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800da98:	428a      	cmp	r2, r1
 800da9a:	dd28      	ble.n	800daee <tSampler_setEnd+0x64>
        {
            tempflip = -1;
 800da9c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        else
        {
            tempflip = 1;
        }
        
        int dir = p->bnf * p->dir * tempflip;
 800daa0:	f994 6032 	ldrsb.w	r6, [r4, #50]	; 0x32
 800daa4:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 800daa8:	fb03 f306 	mul.w	r3, r3, r6
 800daac:	fb05 f303 	mul.w	r3, r5, r3
        
        uint32_t cfxlen = p->cfxlen;
 800dab0:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
        if (p->len * 0.25f < cfxlen) cfxlen = p->len * 0.25f;
 800dab4:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 800dab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dabc:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800dac0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dac4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800dac8:	eef4 7ae6 	vcmpe.f32	s15, s13
 800dacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dad0:	d501      	bpl.n	800dad6 <tSampler_setEnd+0x4c>
 800dad2:	eebc 7ae7 	vcvt.u32.f32	s14, s15
        
        if (p->inCrossfade || p->flipStart >= 0)
 800dad6:	f894 605c 	ldrb.w	r6, [r4, #92]	; 0x5c
 800dada:	b936      	cbnz	r6, 800daea <tSampler_setEnd+0x60>
 800dadc:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
 800dae0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dae8:	db03      	blt.n	800daf2 <tSampler_setEnd+0x68>
        {
            p->targetend = end;
 800daea:	6421      	str	r1, [r4, #64]	; 0x40
    }
    
    p->end = LEAF_clipInt(0, end, p->samp->recordedLength-1);
    handleStartEndChange(sp);
    p->targetend = -1;
}
 800daec:	bd70      	pop	{r4, r5, r6, pc}
            tempflip = 1;
 800daee:	2501      	movs	r5, #1
 800daf0:	e7d6      	b.n	800daa0 <tSampler_setEnd+0x16>
        if (tempflip > 0 && dir < 0) // end is end and we're playing in reverse
 800daf2:	0fde      	lsrs	r6, r3, #31
 800daf4:	2d00      	cmp	r5, #0
 800daf6:	bfd4      	ite	le
 800daf8:	2600      	movle	r6, #0
 800dafa:	f006 0601 	andgt.w	r6, r6, #1
 800dafe:	b31e      	cbz	r6, 800db48 <tSampler_setEnd+0xbe>
            if (end < p->idx) // end given is before current index or we're in a crossfade
 800db00:	ee06 1a90 	vmov	s13, r1
 800db04:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800db08:	ed94 6a08 	vldr	s12, [r4, #32]
 800db0c:	eef4 6ac6 	vcmpe.f32	s13, s12
 800db10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db14:	d543      	bpl.n	800db9e <tSampler_setEnd+0x114>
                p->targetend = end;
 800db16:	6421      	str	r1, [r4, #64]	; 0x40
                float tempLen = abs(end - p->start) * 0.25f;
 800db18:	1a89      	subs	r1, r1, r2
 800db1a:	2900      	cmp	r1, #0
 800db1c:	bfb8      	it	lt
 800db1e:	4249      	neglt	r1, r1
 800db20:	ee07 1a90 	vmov	s15, r1
 800db24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db28:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800db2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
                if (cfxlen > tempLen)
 800db30:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800db34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db3c:	ddd6      	ble.n	800daec <tSampler_setEnd+0x62>
                    p->cfxlen = tempLen;
 800db3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db42:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
 800db46:	e7d1      	b.n	800daec <tSampler_setEnd+0x62>
        else if (tempflip < 0 && dir > 0) // end is start and we're playing forward
 800db48:	2b00      	cmp	r3, #0
 800db4a:	bfd4      	ite	le
 800db4c:	2300      	movle	r3, #0
 800db4e:	2301      	movgt	r3, #1
 800db50:	ea13 73d5 	ands.w	r3, r3, r5, lsr #31
 800db54:	d023      	beq.n	800db9e <tSampler_setEnd+0x114>
            if (end > p->idx) // end given is after current index or we're in a crossfade
 800db56:	ee06 1a90 	vmov	s13, r1
 800db5a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800db5e:	ed94 6a08 	vldr	s12, [r4, #32]
 800db62:	eef4 6ac6 	vcmpe.f32	s13, s12
 800db66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db6a:	dd18      	ble.n	800db9e <tSampler_setEnd+0x114>
                p->targetend = end;
 800db6c:	6421      	str	r1, [r4, #64]	; 0x40
                float tempLen = abs(end - p->start) * 0.25f;
 800db6e:	1a89      	subs	r1, r1, r2
 800db70:	2900      	cmp	r1, #0
 800db72:	bfb8      	it	lt
 800db74:	4249      	neglt	r1, r1
 800db76:	ee07 1a90 	vmov	s15, r1
 800db7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db7e:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800db82:	ee67 7aa6 	vmul.f32	s15, s15, s13
                if (cfxlen > tempLen)
 800db86:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800db8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db92:	ddab      	ble.n	800daec <tSampler_setEnd+0x62>
                    p->cfxlen = tempLen;
 800db94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db98:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
 800db9c:	e7a6      	b.n	800daec <tSampler_setEnd+0x62>
        if (tempflip != p->flip && p->flipStart < 0)
 800db9e:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 800dba2:	42ab      	cmp	r3, r5
 800dba4:	d004      	beq.n	800dbb0 <tSampler_setEnd+0x126>
 800dba6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dbaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbae:	d40e      	bmi.n	800dbce <tSampler_setEnd+0x144>
 800dbb0:	4605      	mov	r5, r0
    p->end = LEAF_clipInt(0, end, p->samp->recordedLength-1);
 800dbb2:	6863      	ldr	r3, [r4, #4]
 800dbb4:	691a      	ldr	r2, [r3, #16]
 800dbb6:	3a01      	subs	r2, #1
 800dbb8:	2000      	movs	r0, #0
 800dbba:	f7ff fccb 	bl	800d554 <LEAF_clipInt>
 800dbbe:	63e0      	str	r0, [r4, #60]	; 0x3c
    handleStartEndChange(sp);
 800dbc0:	4628      	mov	r0, r5
 800dbc2:	f7ff fd9d 	bl	800d700 <handleStartEndChange>
    p->targetend = -1;
 800dbc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dbca:	6423      	str	r3, [r4, #64]	; 0x40
 800dbcc:	e78e      	b.n	800daec <tSampler_setEnd+0x62>
            p->flipIdx = 0;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	6663      	str	r3, [r4, #100]	; 0x64
 800dbd2:	e7ed      	b.n	800dbb0 <tSampler_setEnd+0x126>

0800dbd4 <attemptStartEndChange>:
{
 800dbd4:	b538      	push	{r3, r4, r5, lr}
 800dbd6:	4605      	mov	r5, r0
    _tSampler* p = *sp;
 800dbd8:	6804      	ldr	r4, [r0, #0]
    if (p->targetstart >= 0)
 800dbda:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dbdc:	2900      	cmp	r1, #0
 800dbde:	da06      	bge.n	800dbee <attemptStartEndChange+0x1a>
    if (p->targetend >= 0)
 800dbe0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dbe2:	2900      	cmp	r1, #0
 800dbe4:	db02      	blt.n	800dbec <attemptStartEndChange+0x18>
        tSampler_setEnd(sp, p->targetend);
 800dbe6:	4628      	mov	r0, r5
 800dbe8:	f7ff ff4f 	bl	800da8a <tSampler_setEnd>
}
 800dbec:	bd38      	pop	{r3, r4, r5, pc}
        tSampler_setStart(sp, p->targetstart);
 800dbee:	f7ff feaf 	bl	800d950 <tSampler_setStart>
 800dbf2:	e7f5      	b.n	800dbe0 <attemptStartEndChange+0xc>

0800dbf4 <tSampler_tick>:
{
 800dbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf8:	ed2d 8b08 	vpush	{d8-d11}
 800dbfc:	b089      	sub	sp, #36	; 0x24
 800dbfe:	4607      	mov	r7, r0
    _tSampler* p = *sp;
 800dc00:	6804      	ldr	r4, [r0, #0]
    attemptStartEndChange(sp);
 800dc02:	f7ff ffe7 	bl	800dbd4 <attemptStartEndChange>
    if (p->active == 0)         return 0.f;
 800dc06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	f000 8303 	beq.w	800e214 <tSampler_tick+0x620>
    if ((p->inc == 0.0f) || (p->len < 2))
 800dc0e:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 800dc12:	eef5 7a40 	vcmp.f32	s15, #0.0
 800dc16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc1a:	f000 8132 	beq.w	800de82 <tSampler_tick+0x28e>
 800dc1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dc20:	2b01      	cmp	r3, #1
 800dc22:	f240 812e 	bls.w	800de82 <tSampler_tick+0x28e>
    float* buff = p->samp->buff;
 800dc26:	6862      	ldr	r2, [r4, #4]
 800dc28:	f8d2 9004 	ldr.w	r9, [r2, #4]
    int myStart = p->start;
 800dc2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc2e:	9100      	str	r1, [sp, #0]
    int myEnd = p->end;
 800dc30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dc32:	9301      	str	r3, [sp, #4]
    if (p->flip < 0)
 800dc34:	f994 5031 	ldrsb.w	r5, [r4, #49]	; 0x31
 800dc38:	2d00      	cmp	r5, #0
 800dc3a:	db01      	blt.n	800dc40 <tSampler_tick+0x4c>
    int myStart = p->start;
 800dc3c:	9101      	str	r1, [sp, #4]
    int myEnd = p->end;
 800dc3e:	9300      	str	r3, [sp, #0]
    int dir = p->bnf * p->dir * p->flip;
 800dc40:	f994 1032 	ldrsb.w	r1, [r4, #50]	; 0x32
 800dc44:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 800dc48:	fb03 f301 	mul.w	r3, r3, r1
 800dc4c:	fb05 f503 	mul.w	r5, r5, r3
    if (dir < 0) rev = 1;
 800dc50:	2d00      	cmp	r5, #0
 800dc52:	f2c0 8119 	blt.w	800de88 <tSampler_tick+0x294>
    int rev = 0;
 800dc56:	f04f 0800 	mov.w	r8, #0
    int idx = (int) p->idx;
 800dc5a:	edd4 7a08 	vldr	s15, [r4, #32]
 800dc5e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    float alpha = rev + (p->idx - idx) * dir;
 800dc62:	ee06 8a90 	vmov	s13, r8
 800dc66:	eeb8 9ae6 	vcvt.f32.s32	s18, s13
 800dc6a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800dc6e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800dc72:	ee06 5a90 	vmov	s13, r5
 800dc76:	eef8 8ae6 	vcvt.f32.s32	s17, s13
 800dc7a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800dc7e:	ee39 9a27 	vadd.f32	s18, s18, s15
    idx += rev;
 800dc82:	ee17 6a10 	vmov	r6, s14
 800dc86:	4446      	add	r6, r8
    int i1 = idx-(1*dir);
 800dc88:	1b73      	subs	r3, r6, r5
    int i3 = idx+(1*dir);
 800dc8a:	eb05 0c06 	add.w	ip, r5, r6
    int i4 = idx+(2*dir);
 800dc8e:	0069      	lsls	r1, r5, #1
 800dc90:	9106      	str	r1, [sp, #24]
 800dc92:	1988      	adds	r0, r1, r6
    int length = p->samp->recordedLength;
 800dc94:	6912      	ldr	r2, [r2, #16]
 800dc96:	9203      	str	r2, [sp, #12]
    i1 = (i1 < length*rev) ? i1 + (length * (1-rev)) : i1 - (length * rev);
 800dc98:	4611      	mov	r1, r2
 800dc9a:	fb02 fa08 	mul.w	sl, r2, r8
 800dc9e:	459a      	cmp	sl, r3
 800dca0:	f340 80f5 	ble.w	800de8e <tSampler_tick+0x29a>
 800dca4:	f1c8 0201 	rsb	r2, r8, #1
 800dca8:	fb01 3e02 	mla	lr, r1, r2, r3
    i2 = (i2 < length*rev) ? i2 + (length * (1-rev)) : i2 - (length * rev);
 800dcac:	45b2      	cmp	sl, r6
 800dcae:	f340 80f1 	ble.w	800de94 <tSampler_tick+0x2a0>
 800dcb2:	f1c8 0201 	rsb	r2, r8, #1
 800dcb6:	9b03      	ldr	r3, [sp, #12]
 800dcb8:	fb03 6202 	mla	r2, r3, r2, r6
    i3 = (i3 < length*(1-rev)) ? i3 + (length * rev) : i3 - (length * (1-rev));
 800dcbc:	f1c8 0101 	rsb	r1, r8, #1
 800dcc0:	9105      	str	r1, [sp, #20]
 800dcc2:	9b03      	ldr	r3, [sp, #12]
 800dcc4:	fb03 fb01 	mul.w	fp, r3, r1
 800dcc8:	45e3      	cmp	fp, ip
 800dcca:	f340 80e6 	ble.w	800de9a <tSampler_tick+0x2a6>
 800dcce:	eb0c 010a 	add.w	r1, ip, sl
    i4 = (i4 < length*(1-rev)) ? i4 + (length * rev) : i4 - (length * (1-rev));
 800dcd2:	4583      	cmp	fp, r0
 800dcd4:	f340 80e4 	ble.w	800dea0 <tSampler_tick+0x2ac>
 800dcd8:	4450      	add	r0, sl
    sample = LEAF_interpolate_hermite_x (buff[i1],
 800dcda:	eb09 038e 	add.w	r3, r9, lr, lsl #2
                                         buff[i2],
 800dcde:	eb09 0282 	add.w	r2, r9, r2, lsl #2
                                         buff[i3],
 800dce2:	eb09 0181 	add.w	r1, r9, r1, lsl #2
                                         buff[i4],
 800dce6:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    sample = LEAF_interpolate_hermite_x (buff[i1],
 800dcea:	eeb0 2a49 	vmov.f32	s4, s18
 800dcee:	edd0 1a00 	vldr	s3, [r0]
 800dcf2:	ed91 1a00 	vldr	s2, [r1]
 800dcf6:	edd2 0a00 	vldr	s1, [r2]
 800dcfa:	ed93 0a00 	vldr	s0, [r3]
 800dcfe:	f7ff fc37 	bl	800d570 <LEAF_interpolate_hermite_x>
 800dd02:	eeb0 8a40 	vmov.f32	s16, s0
    int32_t cfxlen = p->cfxlen;
 800dd06:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dd08:	9302      	str	r3, [sp, #8]
    if (p->len * 0.25f < cfxlen) cfxlen = p->len * 0.25f;
 800dd0a:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 800dd0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd12:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800dd16:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd1a:	ee07 3a10 	vmov	s14, r3
 800dd1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dd22:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dd26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd2a:	d503      	bpl.n	800dd34 <tSampler_tick+0x140>
 800dd2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dd30:	edcd 7a02 	vstr	s15, [sp, #8]
    if (myStart >= cfxlen) fadeLeftStart = myStart - cfxlen;
 800dd34:	9b01      	ldr	r3, [sp, #4]
 800dd36:	9902      	ldr	r1, [sp, #8]
 800dd38:	428b      	cmp	r3, r1
 800dd3a:	f2c0 80b4 	blt.w	800dea6 <tSampler_tick+0x2b2>
 800dd3e:	1a5b      	subs	r3, r3, r1
    int32_t fadeLeftEnd = fadeLeftStart + cfxlen;
 800dd40:	9a02      	ldr	r2, [sp, #8]
 800dd42:	18d1      	adds	r1, r2, r3
 800dd44:	9104      	str	r1, [sp, #16]
    int32_t fadeRightStart = fadeRightEnd - cfxlen;
 800dd46:	9900      	ldr	r1, [sp, #0]
 800dd48:	1a89      	subs	r1, r1, r2
    if (p->mode == PlayLoop)
 800dd4a:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800dd4e:	2a01      	cmp	r2, #1
 800dd50:	f000 80ab 	beq.w	800deaa <tSampler_tick+0x2b6>
    float flipMix = 0.0f;
 800dd54:	ed9f 9acf 	vldr	s18, [pc, #828]	; 800e094 <tSampler_tick+0x4a0>
    float flipsample = 0.0f;
 800dd58:	eef0 9a49 	vmov.f32	s19, s18
    float crossfadeMix = 0.0f;
 800dd5c:	eef0 aa49 	vmov.f32	s21, s18
    float cfxsample = 0.0f;
 800dd60:	eeb0 aa49 	vmov.f32	s20, s18
    float inc = fmodf(p->inc, (float)p->len);
 800dd64:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 800dd68:	eef8 0a67 	vcvt.f32.u32	s1, s15
 800dd6c:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 800dd70:	f000 ff26 	bl	800ebc0 <fmodf>
    p->idx += (dir * inc);
 800dd74:	ee68 8a80 	vmul.f32	s17, s17, s0
 800dd78:	edd4 7a08 	vldr	s15, [r4, #32]
 800dd7c:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800dd80:	edc4 8a08 	vstr	s17, [r4, #32]
    if (p->flipStart >= 0)
 800dd84:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
 800dd88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dd8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd90:	db24      	blt.n	800dddc <tSampler_tick+0x1e8>
        p->flipIdx += (-dir * inc);
 800dd92:	426d      	negs	r5, r5
 800dd94:	ee07 5a90 	vmov	s15, r5
 800dd98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd9c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800dda0:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 800dda4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dda8:	ed84 0a19 	vstr	s0, [r4, #100]	; 0x64
        if((int)p->flipIdx < 0)
 800ddac:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ddb0:	ee10 3a10 	vmov	r3, s0
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	f2c0 8160 	blt.w	800e07a <tSampler_tick+0x486>
        if((int)p->idx >= length)
 800ddba:	ed94 7a08 	vldr	s14, [r4, #32]
 800ddbe:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800ddc2:	ee17 3a90 	vmov	r3, s15
 800ddc6:	9a03      	ldr	r2, [sp, #12]
 800ddc8:	4293      	cmp	r3, r2
 800ddca:	db07      	blt.n	800dddc <tSampler_tick+0x1e8>
            p->idx -= (float)length;
 800ddcc:	ee07 2a90 	vmov	s15, r2
 800ddd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ddd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ddd8:	edc4 7a08 	vstr	s15, [r4, #32]
    attemptStartEndChange(sp);
 800dddc:	4638      	mov	r0, r7
 800ddde:	f7ff fef9 	bl	800dbd4 <attemptStartEndChange>
    if (p->mode == PlayLoop)
 800dde2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800dde6:	2b01      	cmp	r3, #1
 800dde8:	f000 8156 	beq.w	800e098 <tSampler_tick+0x4a4>
    else if (p->mode == PlayBackAndForth)
 800ddec:	2b02      	cmp	r3, #2
 800ddee:	f000 817d 	beq.w	800e0ec <tSampler_tick+0x4f8>
    if (p->mode == PlayNormal)
 800ddf2:	bb33      	cbnz	r3, 800de42 <tSampler_tick+0x24e>
        if (p->idx < myStart)
 800ddf4:	edd4 7a08 	vldr	s15, [r4, #32]
 800ddf8:	ed9d 7a01 	vldr	s14, [sp, #4]
 800ddfc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800de00:	eef4 7ac7 	vcmpe.f32	s15, s14
 800de04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de08:	f140 81a1 	bpl.w	800e14e <tSampler_tick+0x55a>
            p->idx = myStart;
 800de0c:	ed84 7a08 	vstr	s14, [r4, #32]
        float ticksToEnd = rev ? ((idx - myStart) * p->iinc) : ((myEnd - idx) * p->iinc);
 800de10:	f1b8 0f00 	cmp.w	r8, #0
 800de14:	f000 81a8 	beq.w	800e168 <tSampler_tick+0x574>
 800de18:	9b01      	ldr	r3, [sp, #4]
 800de1a:	1af6      	subs	r6, r6, r3
 800de1c:	ee07 6a90 	vmov	s15, r6
 800de20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800de24:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800de28:	ee67 7a27 	vmul.f32	s15, s14, s15
        if ((ticksToEnd < p->ticksPerSevenMs) && (p->active == 1))
 800de2c:	ed94 7a04 	vldr	s14, [r4, #16]
 800de30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800de34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de38:	dd03      	ble.n	800de42 <tSampler_tick+0x24e>
 800de3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de3c:	2b01      	cmp	r3, #1
 800de3e:	f000 819e 	beq.w	800e17e <tSampler_tick+0x58a>
    sample = ((sample * (1.0f - crossfadeMix)) + (cfxsample * crossfadeMix)) * (1.0f - flipMix) + (flipsample * flipMix);
 800de42:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800de46:	ee37 0aea 	vsub.f32	s0, s15, s21
 800de4a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800de4e:	ee2a 8a2a 	vmul.f32	s16, s20, s21
 800de52:	ee30 8a08 	vadd.f32	s16, s0, s16
 800de56:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800de5a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800de5e:	ee29 9a89 	vmul.f32	s18, s19, s18
 800de62:	ee38 8a09 	vadd.f32	s16, s16, s18
    sample = sample * tRamp_tick(&p->gain);
 800de66:	f104 051c 	add.w	r5, r4, #28
 800de6a:	4628      	mov	r0, r5
 800de6c:	f7ff f9f6 	bl	800d25c <tRamp_tick>
 800de70:	ee20 8a08 	vmul.f32	s16, s0, s16
    if (p->active < 0)
 800de74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de76:	2b00      	cmp	r3, #0
 800de78:	f2c0 818b 	blt.w	800e192 <tSampler_tick+0x59e>
    p->last = sample;
 800de7c:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
    return p->last;
 800de80:	e1ca      	b.n	800e218 <tSampler_tick+0x624>
        return p->last;
 800de82:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 800de86:	e1c7      	b.n	800e218 <tSampler_tick+0x624>
    if (dir < 0) rev = 1;
 800de88:	f04f 0801 	mov.w	r8, #1
 800de8c:	e6e5      	b.n	800dc5a <tSampler_tick+0x66>
    i1 = (i1 < length*rev) ? i1 + (length * (1-rev)) : i1 - (length * rev);
 800de8e:	eba3 0e0a 	sub.w	lr, r3, sl
 800de92:	e70b      	b.n	800dcac <tSampler_tick+0xb8>
    i2 = (i2 < length*rev) ? i2 + (length * (1-rev)) : i2 - (length * rev);
 800de94:	eba6 020a 	sub.w	r2, r6, sl
 800de98:	e710      	b.n	800dcbc <tSampler_tick+0xc8>
    i3 = (i3 < length*(1-rev)) ? i3 + (length * rev) : i3 - (length * (1-rev));
 800de9a:	ebac 010b 	sub.w	r1, ip, fp
 800de9e:	e718      	b.n	800dcd2 <tSampler_tick+0xde>
    i4 = (i4 < length*(1-rev)) ? i4 + (length * rev) : i4 - (length * (1-rev));
 800dea0:	eba0 000b 	sub.w	r0, r0, fp
 800dea4:	e719      	b.n	800dcda <tSampler_tick+0xe6>
    int32_t fadeLeftStart = 0;
 800dea6:	2300      	movs	r3, #0
 800dea8:	e74a      	b.n	800dd40 <tSampler_tick+0x14c>
        if ((fadeLeftStart <= idx) && (idx <= fadeLeftEnd))
 800deaa:	9a04      	ldr	r2, [sp, #16]
 800deac:	42b3      	cmp	r3, r6
 800deae:	bfd8      	it	le
 800deb0:	4296      	cmple	r6, r2
 800deb2:	f300 80ae 	bgt.w	800e012 <tSampler_tick+0x41e>
            offset = fadeLeftEnd - idx;
 800deb6:	1b93      	subs	r3, r2, r6
 800deb8:	9307      	str	r3, [sp, #28]
            cdx = fadeRightEnd - offset;
 800deba:	9a00      	ldr	r2, [sp, #0]
 800debc:	1ad3      	subs	r3, r2, r3
            p->inCrossfade = 1;
 800debe:	2201      	movs	r2, #1
 800dec0:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
        if (p->inCrossfade)
 800dec4:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
 800dec8:	2a00      	cmp	r2, #0
 800deca:	f000 80c0 	beq.w	800e04e <tSampler_tick+0x45a>
            int c1 = cdx-(1*dir);
 800dece:	1b5a      	subs	r2, r3, r5
            int c3 = cdx+(1*dir);
 800ded0:	1959      	adds	r1, r3, r5
            int c4 = cdx+(2*dir);
 800ded2:	9806      	ldr	r0, [sp, #24]
 800ded4:	4418      	add	r0, r3
            c1 = (c1 < length * rev) ? c1 + (length * (1-rev)) : c1 - (length * rev);
 800ded6:	4592      	cmp	sl, r2
 800ded8:	f340 80ad 	ble.w	800e036 <tSampler_tick+0x442>
 800dedc:	445a      	add	r2, fp
            c2 = (c2 < length * rev) ? c2 + (length * (1-rev)) : c2 - (length * rev);
 800dede:	459a      	cmp	sl, r3
 800dee0:	f340 80ac 	ble.w	800e03c <tSampler_tick+0x448>
 800dee4:	445b      	add	r3, fp
            c3 = (c3 < length * (1-rev)) ? c3 + (length * rev) : c3 - (length * (1-rev));
 800dee6:	458b      	cmp	fp, r1
 800dee8:	f340 80ab 	ble.w	800e042 <tSampler_tick+0x44e>
 800deec:	4451      	add	r1, sl
            c4 = (c4 < length * (1-rev)) ? c4 + (length * rev) : c4 - (length * (1-rev));
 800deee:	4583      	cmp	fp, r0
 800def0:	f340 80aa 	ble.w	800e048 <tSampler_tick+0x454>
 800def4:	4450      	add	r0, sl
            cfxsample = LEAF_interpolate_hermite_x (buff[c1],
 800def6:	eb09 0282 	add.w	r2, r9, r2, lsl #2
                                                    buff[c2],
 800defa:	eb09 0383 	add.w	r3, r9, r3, lsl #2
                                                    buff[c3],
 800defe:	eb09 0181 	add.w	r1, r9, r1, lsl #2
                                                    buff[c4],
 800df02:	eb09 0080 	add.w	r0, r9, r0, lsl #2
            cfxsample = LEAF_interpolate_hermite_x (buff[c1],
 800df06:	eeb0 2a49 	vmov.f32	s4, s18
 800df0a:	edd0 1a00 	vldr	s3, [r0]
 800df0e:	ed91 1a00 	vldr	s2, [r1]
 800df12:	edd3 0a00 	vldr	s1, [r3]
 800df16:	ed92 0a00 	vldr	s0, [r2]
 800df1a:	f7ff fb29 	bl	800d570 <LEAF_interpolate_hermite_x>
 800df1e:	eeb0 aa40 	vmov.f32	s20, s0
            crossfadeMix = (float) offset / (float) cfxlen;
 800df22:	eddd 7a07 	vldr	s15, [sp, #28]
 800df26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df2a:	ed9d 7a02 	vldr	s14, [sp, #8]
 800df2e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800df32:	eec7 aa87 	vdiv.f32	s21, s15, s14
        float flipLength = fabsf(p->flipIdx - p->flipStart);
 800df36:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 800df3a:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
 800df3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800df42:	eef0 7ae7 	vabs.f32	s15, s15
        if (flipLength > cfxlen)
 800df46:	ed9d 7a02 	vldr	s14, [sp, #8]
 800df4a:	eeb8 bac7 	vcvt.f32.s32	s22, s14
 800df4e:	eeb4 bae7 	vcmpe.f32	s22, s15
 800df52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df56:	d502      	bpl.n	800df5e <tSampler_tick+0x36a>
            p->flipStart = -1;
 800df58:	4b4c      	ldr	r3, [pc, #304]	; (800e08c <tSampler_tick+0x498>)
 800df5a:	6623      	str	r3, [r4, #96]	; 0x60
            p->flipIdx = -1;
 800df5c:	6663      	str	r3, [r4, #100]	; 0x64
        if (p->flipIdx >= 0)
 800df5e:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 800df62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800df66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df6a:	f2c0 8081 	blt.w	800e070 <tSampler_tick+0x47c>
            if (p->flipStart == -1)
 800df6e:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
 800df72:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800df76:	eeb4 7a67 	vcmp.f32	s14, s15
 800df7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df7e:	d102      	bne.n	800df86 <tSampler_tick+0x392>
                p->flipStart = p->idx;
 800df80:	6a23      	ldr	r3, [r4, #32]
 800df82:	6623      	str	r3, [r4, #96]	; 0x60
                p->flipIdx = p->idx;
 800df84:	6663      	str	r3, [r4, #100]	; 0x64
            flipLength = fabsf(p->flipIdx - p->flipStart);
 800df86:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 800df8a:	ed94 9a18 	vldr	s18, [r4, #96]	; 0x60
 800df8e:	ee37 9ac9 	vsub.f32	s18, s15, s18
 800df92:	eeb0 9ac9 	vabs.f32	s18, s18
            int fdx = (int) p->flipIdx;
 800df96:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800df9a:	ee17 3a10 	vmov	r3, s14
            float falpha = (1-rev) - (p->flipIdx - fdx) * dir;
 800df9e:	ed9d 7a05 	vldr	s14, [sp, #20]
 800dfa2:	eeb8 2ac7 	vcvt.f32.s32	s4, s14
 800dfa6:	ee07 3a10 	vmov	s14, r3
 800dfaa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dfae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dfb2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800dfb6:	ee32 2a67 	vsub.f32	s4, s4, s15
            idx += (1-rev);
 800dfba:	9a05      	ldr	r2, [sp, #20]
 800dfbc:	4416      	add	r6, r2
            int f1 = fdx+(1*dir);
 800dfbe:	18e9      	adds	r1, r5, r3
            int f3 = fdx-(1*dir);
 800dfc0:	1b5a      	subs	r2, r3, r5
            int f4 = fdx-(2*dir);
 800dfc2:	9806      	ldr	r0, [sp, #24]
 800dfc4:	1a18      	subs	r0, r3, r0
            f1 = (f1 < length*(1-rev)) ? f1 + (length * rev) : f1 - (length * (1-rev));
 800dfc6:	458b      	cmp	fp, r1
 800dfc8:	dd46      	ble.n	800e058 <tSampler_tick+0x464>
 800dfca:	4451      	add	r1, sl
            f2 = (f2 < length*(1-rev)) ? f2 + (length * rev) : f2 - (length * (1-rev));
 800dfcc:	459b      	cmp	fp, r3
 800dfce:	dd46      	ble.n	800e05e <tSampler_tick+0x46a>
 800dfd0:	4453      	add	r3, sl
            f3 = (f3 < length*rev) ? f3 + (length * (1-rev)) : f3 - (length * rev);
 800dfd2:	4592      	cmp	sl, r2
 800dfd4:	dd46      	ble.n	800e064 <tSampler_tick+0x470>
 800dfd6:	445a      	add	r2, fp
            f4 = (f4 < length*rev) ? f4 + (length * (1-rev)) : f4 - (length * rev);
 800dfd8:	4582      	cmp	sl, r0
 800dfda:	dd46      	ble.n	800e06a <tSampler_tick+0x476>
 800dfdc:	eb0b 0a00 	add.w	sl, fp, r0
            flipsample = LEAF_interpolate_hermite_x (buff[f1],
 800dfe0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
                                                     buff[f2],
 800dfe4:	eb09 0383 	add.w	r3, r9, r3, lsl #2
                                                     buff[f3],
 800dfe8:	eb09 0282 	add.w	r2, r9, r2, lsl #2
                                                     buff[f4],
 800dfec:	eb09 098a 	add.w	r9, r9, sl, lsl #2
            flipsample = LEAF_interpolate_hermite_x (buff[f1],
 800dff0:	edd9 1a00 	vldr	s3, [r9]
 800dff4:	ed92 1a00 	vldr	s2, [r2]
 800dff8:	edd3 0a00 	vldr	s1, [r3]
 800dffc:	ed91 0a00 	vldr	s0, [r1]
 800e000:	f7ff fab6 	bl	800d570 <LEAF_interpolate_hermite_x>
 800e004:	eef0 9a40 	vmov.f32	s19, s0
            flipMix = (float) (cfxlen - flipLength) / (float) cfxlen;
 800e008:	ee7b 7a49 	vsub.f32	s15, s22, s18
 800e00c:	ee87 9a8b 	vdiv.f32	s18, s15, s22
 800e010:	e6a8      	b.n	800dd64 <tSampler_tick+0x170>
        else if ((fadeRightStart <= idx) && (idx <= fadeRightEnd))
 800e012:	9a00      	ldr	r2, [sp, #0]
 800e014:	428e      	cmp	r6, r1
 800e016:	bfa8      	it	ge
 800e018:	42b2      	cmpge	r2, r6
 800e01a:	db06      	blt.n	800e02a <tSampler_tick+0x436>
            offset = idx - fadeRightStart;
 800e01c:	1a72      	subs	r2, r6, r1
 800e01e:	9207      	str	r2, [sp, #28]
            cdx = fadeLeftStart + offset;
 800e020:	4413      	add	r3, r2
            p->inCrossfade = 1;
 800e022:	2201      	movs	r2, #1
 800e024:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
 800e028:	e74c      	b.n	800dec4 <tSampler_tick+0x2d0>
        else p->inCrossfade = 0;
 800e02a:	2200      	movs	r2, #0
 800e02c:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
        int cdx = 0;
 800e030:	4613      	mov	r3, r2
        int offset = 0;
 800e032:	9207      	str	r2, [sp, #28]
 800e034:	e746      	b.n	800dec4 <tSampler_tick+0x2d0>
            c1 = (c1 < length * rev) ? c1 + (length * (1-rev)) : c1 - (length * rev);
 800e036:	eba2 020a 	sub.w	r2, r2, sl
 800e03a:	e750      	b.n	800dede <tSampler_tick+0x2ea>
            c2 = (c2 < length * rev) ? c2 + (length * (1-rev)) : c2 - (length * rev);
 800e03c:	eba3 030a 	sub.w	r3, r3, sl
 800e040:	e751      	b.n	800dee6 <tSampler_tick+0x2f2>
            c3 = (c3 < length * (1-rev)) ? c3 + (length * rev) : c3 - (length * (1-rev));
 800e042:	eba1 010b 	sub.w	r1, r1, fp
 800e046:	e752      	b.n	800deee <tSampler_tick+0x2fa>
            c4 = (c4 < length * (1-rev)) ? c4 + (length * rev) : c4 - (length * (1-rev));
 800e048:	eba0 000b 	sub.w	r0, r0, fp
 800e04c:	e753      	b.n	800def6 <tSampler_tick+0x302>
    float crossfadeMix = 0.0f;
 800e04e:	eddf aa11 	vldr	s21, [pc, #68]	; 800e094 <tSampler_tick+0x4a0>
    float cfxsample = 0.0f;
 800e052:	eeb0 aa6a 	vmov.f32	s20, s21
 800e056:	e76e      	b.n	800df36 <tSampler_tick+0x342>
            f1 = (f1 < length*(1-rev)) ? f1 + (length * rev) : f1 - (length * (1-rev));
 800e058:	eba1 010b 	sub.w	r1, r1, fp
 800e05c:	e7b6      	b.n	800dfcc <tSampler_tick+0x3d8>
            f2 = (f2 < length*(1-rev)) ? f2 + (length * rev) : f2 - (length * (1-rev));
 800e05e:	eba3 030b 	sub.w	r3, r3, fp
 800e062:	e7b6      	b.n	800dfd2 <tSampler_tick+0x3de>
            f3 = (f3 < length*rev) ? f3 + (length * (1-rev)) : f3 - (length * rev);
 800e064:	eba2 020a 	sub.w	r2, r2, sl
 800e068:	e7b6      	b.n	800dfd8 <tSampler_tick+0x3e4>
            f4 = (f4 < length*rev) ? f4 + (length * (1-rev)) : f4 - (length * rev);
 800e06a:	eba0 0a0a 	sub.w	sl, r0, sl
 800e06e:	e7b7      	b.n	800dfe0 <tSampler_tick+0x3ec>
    float flipMix = 0.0f;
 800e070:	ed9f 9a08 	vldr	s18, [pc, #32]	; 800e094 <tSampler_tick+0x4a0>
    float flipsample = 0.0f;
 800e074:	eef0 9a49 	vmov.f32	s19, s18
 800e078:	e674      	b.n	800dd64 <tSampler_tick+0x170>
            p->idx += (float)length;
 800e07a:	eddd 7a03 	vldr	s15, [sp, #12]
 800e07e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e082:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800e086:	edc4 8a08 	vstr	s17, [r4, #32]
 800e08a:	e696      	b.n	800ddba <tSampler_tick+0x1c6>
 800e08c:	bf800000 	.word	0xbf800000
 800e090:	3727c5ac 	.word	0x3727c5ac
 800e094:	00000000 	.word	0x00000000
        if((int)p->idx < myStart)
 800e098:	edd4 7a08 	vldr	s15, [r4, #32]
 800e09c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e0a0:	ee17 2a10 	vmov	r2, s14
 800e0a4:	9901      	ldr	r1, [sp, #4]
 800e0a6:	428a      	cmp	r2, r1
 800e0a8:	da0a      	bge.n	800e0c0 <tSampler_tick+0x4cc>
            p->idx += (float)(fadeRightEnd - fadeLeftEnd);
 800e0aa:	9a00      	ldr	r2, [sp, #0]
 800e0ac:	9904      	ldr	r1, [sp, #16]
 800e0ae:	1a52      	subs	r2, r2, r1
 800e0b0:	ee07 2a10 	vmov	s14, r2
 800e0b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e0b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e0bc:	edc4 7a08 	vstr	s15, [r4, #32]
        if((int)p->idx > myEnd)
 800e0c0:	ed94 7a08 	vldr	s14, [r4, #32]
 800e0c4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800e0c8:	ee17 2a90 	vmov	r2, s15
 800e0cc:	9900      	ldr	r1, [sp, #0]
 800e0ce:	4608      	mov	r0, r1
 800e0d0:	428a      	cmp	r2, r1
 800e0d2:	f77f ae8e 	ble.w	800ddf2 <tSampler_tick+0x1fe>
            p->idx -= (float)(fadeRightEnd - fadeLeftEnd);
 800e0d6:	9904      	ldr	r1, [sp, #16]
 800e0d8:	1a42      	subs	r2, r0, r1
 800e0da:	ee07 2a90 	vmov	s15, r2
 800e0de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e0e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e0e6:	edc4 7a08 	vstr	s15, [r4, #32]
 800e0ea:	e682      	b.n	800ddf2 <tSampler_tick+0x1fe>
        if (p->idx < myStart)
 800e0ec:	edd4 7a08 	vldr	s15, [r4, #32]
 800e0f0:	ed9d 7a01 	vldr	s14, [sp, #4]
 800e0f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e0f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e0fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e100:	d50d      	bpl.n	800e11e <tSampler_tick+0x52a>
            p->bnf = -p->bnf;
 800e102:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 800e106:	4252      	negs	r2, r2
 800e108:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
            p->idx = myStart + 1;
 800e10c:	9a01      	ldr	r2, [sp, #4]
 800e10e:	3201      	adds	r2, #1
 800e110:	ee07 2a90 	vmov	s15, r2
 800e114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e118:	edc4 7a08 	vstr	s15, [r4, #32]
 800e11c:	e669      	b.n	800ddf2 <tSampler_tick+0x1fe>
        else if (p->idx > myEnd)
 800e11e:	ed9d 7a00 	vldr	s14, [sp]
 800e122:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e126:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e12a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e12e:	f77f ae60 	ble.w	800ddf2 <tSampler_tick+0x1fe>
            p->bnf = -p->bnf;
 800e132:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 800e136:	4252      	negs	r2, r2
 800e138:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
            p->idx = myEnd - 1;
 800e13c:	9a00      	ldr	r2, [sp, #0]
 800e13e:	3a01      	subs	r2, #1
 800e140:	ee07 2a90 	vmov	s15, r2
 800e144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e148:	edc4 7a08 	vstr	s15, [r4, #32]
 800e14c:	e651      	b.n	800ddf2 <tSampler_tick+0x1fe>
        else if (p->idx > myEnd)
 800e14e:	ed9d 7a00 	vldr	s14, [sp]
 800e152:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e156:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e15a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e15e:	f77f ae57 	ble.w	800de10 <tSampler_tick+0x21c>
            p->idx = myEnd;
 800e162:	ed84 7a08 	vstr	s14, [r4, #32]
 800e166:	e653      	b.n	800de10 <tSampler_tick+0x21c>
        float ticksToEnd = rev ? ((idx - myStart) * p->iinc) : ((myEnd - idx) * p->iinc);
 800e168:	9b00      	ldr	r3, [sp, #0]
 800e16a:	1b9b      	subs	r3, r3, r6
 800e16c:	ee07 3a90 	vmov	s15, r3
 800e170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e174:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 800e178:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e17c:	e656      	b.n	800de2c <tSampler_tick+0x238>
            tRamp_setDest(&p->gain, 0.f);
 800e17e:	ed1f 0a3b 	vldr	s0, [pc, #-236]	; 800e094 <tSampler_tick+0x4a0>
 800e182:	f104 001c 	add.w	r0, r4, #28
 800e186:	f7ff f84d 	bl	800d224 <tRamp_setDest>
            p->active = -1;
 800e18a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e18e:	65a3      	str	r3, [r4, #88]	; 0x58
 800e190:	e657      	b.n	800de42 <tSampler_tick+0x24e>
        if (tRamp_sample(&p->gain) <= 0.00001f)
 800e192:	4628      	mov	r0, r5
 800e194:	f7ff f889 	bl	800d2aa <tRamp_sample>
 800e198:	ed5f 7a43 	vldr	s15, [pc, #-268]	; 800e090 <tSampler_tick+0x49c>
 800e19c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1a4:	f63f ae6a 	bhi.w	800de7c <tSampler_tick+0x288>
            if (p->retrigger == 1)
 800e1a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e1aa:	2b01      	cmp	r3, #1
 800e1ac:	d002      	beq.n	800e1b4 <tSampler_tick+0x5c0>
                p->active = 0;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	65a3      	str	r3, [r4, #88]	; 0x58
 800e1b2:	e663      	b.n	800de7c <tSampler_tick+0x288>
                p->active = 1;
 800e1b4:	65a3      	str	r3, [r4, #88]	; 0x58
                p->retrigger = 0;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	6563      	str	r3, [r4, #84]	; 0x54
                tRamp_setDest(&p->gain, 1.f);
 800e1ba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e1be:	4628      	mov	r0, r5
 800e1c0:	f7ff f830 	bl	800d224 <tRamp_setDest>
                if (p->dir > 0)
 800e1c4:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	dd11      	ble.n	800e1f0 <tSampler_tick+0x5fc>
                    if (p->flip > 0)    p->idx = p->start;
 800e1cc:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	dd06      	ble.n	800e1e2 <tSampler_tick+0x5ee>
 800e1d4:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800e1d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e1dc:	edc4 7a08 	vstr	s15, [r4, #32]
 800e1e0:	e64c      	b.n	800de7c <tSampler_tick+0x288>
                    else                p->idx = p->end;
 800e1e2:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
 800e1e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e1ea:	edc4 7a08 	vstr	s15, [r4, #32]
 800e1ee:	e645      	b.n	800de7c <tSampler_tick+0x288>
                    if (p->flip > 0)    p->idx = p->end;
 800e1f0:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	dd06      	ble.n	800e206 <tSampler_tick+0x612>
 800e1f8:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
 800e1fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e200:	edc4 7a08 	vstr	s15, [r4, #32]
 800e204:	e63a      	b.n	800de7c <tSampler_tick+0x288>
                    else                p->idx = p->start;
 800e206:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800e20a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e20e:	edc4 7a08 	vstr	s15, [r4, #32]
 800e212:	e633      	b.n	800de7c <tSampler_tick+0x288>
    if (p->active == 0)         return 0.f;
 800e214:	ed1f 8a61 	vldr	s16, [pc, #-388]	; 800e094 <tSampler_tick+0x4a0>
}
 800e218:	eeb0 0a48 	vmov.f32	s0, s16
 800e21c:	b009      	add	sp, #36	; 0x24
 800e21e:	ecbd 8b08 	vpop	{d8-d11}
 800e222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e226:	bf00      	nop

0800e228 <tSampler_tickStereo>:
{
 800e228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e22c:	ed2d 8b06 	vpush	{d8-d10}
 800e230:	b093      	sub	sp, #76	; 0x4c
 800e232:	4680      	mov	r8, r0
 800e234:	9100      	str	r1, [sp, #0]
    _tSampler* p = *sp;
 800e236:	6803      	ldr	r3, [r0, #0]
 800e238:	9311      	str	r3, [sp, #68]	; 0x44
    attemptStartEndChange(sp);
 800e23a:	f7ff fccb 	bl	800dbd4 <attemptStartEndChange>
    if (p->active == 0)         return 0.f;
 800e23e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e240:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e242:	2a00      	cmp	r2, #0
 800e244:	f000 83cd 	beq.w	800e9e2 <tSampler_tickStereo+0x7ba>
    if ((p->inc == 0.0f) || (p->len < 2))
 800e248:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800e24c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e254:	f000 8153 	beq.w	800e4fe <tSampler_tickStereo+0x2d6>
 800e258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e25a:	2a01      	cmp	r2, #1
 800e25c:	f240 814f 	bls.w	800e4fe <tSampler_tickStereo+0x2d6>
    float cfxsample[2] = {0.0f, 0.0f};
 800e260:	2200      	movs	r2, #0
 800e262:	920f      	str	r2, [sp, #60]	; 0x3c
 800e264:	9210      	str	r2, [sp, #64]	; 0x40
    float flipsample[2] = {0.0f, 0.0f};
 800e266:	920d      	str	r2, [sp, #52]	; 0x34
 800e268:	920e      	str	r2, [sp, #56]	; 0x38
    float* buff = p->samp->buff;
 800e26a:	6858      	ldr	r0, [r3, #4]
 800e26c:	6844      	ldr	r4, [r0, #4]
    int myStart = p->start;
 800e26e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800e270:	9503      	str	r5, [sp, #12]
    int myEnd = p->end;
 800e272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e274:	9204      	str	r2, [sp, #16]
    if (p->flip < 0)
 800e276:	f993 1031 	ldrsb.w	r1, [r3, #49]	; 0x31
 800e27a:	2900      	cmp	r1, #0
 800e27c:	db01      	blt.n	800e282 <tSampler_tickStereo+0x5a>
    int myStart = p->start;
 800e27e:	9504      	str	r5, [sp, #16]
    int myEnd = p->end;
 800e280:	9203      	str	r2, [sp, #12]
    int dir = p->bnf * p->dir * p->flip;
 800e282:	f993 5032 	ldrsb.w	r5, [r3, #50]	; 0x32
 800e286:	f993 2030 	ldrsb.w	r2, [r3, #48]	; 0x30
 800e28a:	fb02 f205 	mul.w	r2, r2, r5
 800e28e:	fb01 f202 	mul.w	r2, r1, r2
 800e292:	9205      	str	r2, [sp, #20]
    if (dir < 0) rev = 1;
 800e294:	2a00      	cmp	r2, #0
 800e296:	f2c0 8135 	blt.w	800e504 <tSampler_tickStereo+0x2dc>
    int rev = 0;
 800e29a:	2200      	movs	r2, #0
 800e29c:	9201      	str	r2, [sp, #4]
    int idx = (int) p->idx;
 800e29e:	edd3 7a08 	vldr	s15, [r3, #32]
 800e2a2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    float alpha = rev + (p->idx - idx) * dir;
 800e2a6:	eddd 6a01 	vldr	s13, [sp, #4]
 800e2aa:	eeb8 8ae6 	vcvt.f32.s32	s16, s13
 800e2ae:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800e2b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e2b6:	eddd 6a05 	vldr	s13, [sp, #20]
 800e2ba:	eeb8 9ae6 	vcvt.f32.s32	s18, s13
 800e2be:	ee67 7a89 	vmul.f32	s15, s15, s18
 800e2c2:	ee38 8a27 	vadd.f32	s16, s16, s15
    idx += rev;
 800e2c6:	ee17 7a10 	vmov	r7, s14
 800e2ca:	9901      	ldr	r1, [sp, #4]
 800e2cc:	440f      	add	r7, r1
    int i1 = idx-(1*dir);
 800e2ce:	ee16 2a90 	vmov	r2, s13
 800e2d2:	1abd      	subs	r5, r7, r2
    int i3 = idx+(1*dir);
 800e2d4:	19d6      	adds	r6, r2, r7
    int i4 = idx+(2*dir);
 800e2d6:	0052      	lsls	r2, r2, #1
 800e2d8:	9209      	str	r2, [sp, #36]	; 0x24
 800e2da:	eb02 0b07 	add.w	fp, r2, r7
    int length = p->samp->recordedLength;
 800e2de:	6900      	ldr	r0, [r0, #16]
 800e2e0:	9006      	str	r0, [sp, #24]
    i1 = (i1 < length*rev) ? i1 + (length * (1-rev)) : i1 - (length * rev);
 800e2e2:	fb00 fa01 	mul.w	sl, r0, r1
 800e2e6:	45aa      	cmp	sl, r5
 800e2e8:	f340 810f 	ble.w	800e50a <tSampler_tickStereo+0x2e2>
 800e2ec:	f1c1 0201 	rsb	r2, r1, #1
 800e2f0:	fb00 5502 	mla	r5, r0, r2, r5
    i2 = (i2 < length*rev) ? i2 + (length * (1-rev)) : i2 - (length * rev);
 800e2f4:	45ba      	cmp	sl, r7
 800e2f6:	f340 810b 	ble.w	800e510 <tSampler_tickStereo+0x2e8>
 800e2fa:	9a01      	ldr	r2, [sp, #4]
 800e2fc:	f1c2 0901 	rsb	r9, r2, #1
 800e300:	9a06      	ldr	r2, [sp, #24]
 800e302:	fb02 7909 	mla	r9, r2, r9, r7
    i3 = (i3 < length*(1-rev)) ? i3 + (length * rev) : i3 - (length * (1-rev));
 800e306:	9a01      	ldr	r2, [sp, #4]
 800e308:	f1c2 0201 	rsb	r2, r2, #1
 800e30c:	9208      	str	r2, [sp, #32]
 800e30e:	9906      	ldr	r1, [sp, #24]
 800e310:	fb01 f202 	mul.w	r2, r1, r2
 800e314:	9202      	str	r2, [sp, #8]
 800e316:	42b2      	cmp	r2, r6
 800e318:	f340 80fd 	ble.w	800e516 <tSampler_tickStereo+0x2ee>
 800e31c:	4456      	add	r6, sl
    i4 = (i4 < length*(1-rev)) ? i4 + (length * rev) : i4 - (length * (1-rev));
 800e31e:	9a02      	ldr	r2, [sp, #8]
 800e320:	455a      	cmp	r2, fp
 800e322:	f340 80fb 	ble.w	800e51c <tSampler_tickStereo+0x2f4>
 800e326:	44d3      	add	fp, sl
    outputArray[0] = LEAF_interpolate_hermite_x (buff[i1 * p->channels],
 800e328:	699b      	ldr	r3, [r3, #24]
 800e32a:	fb05 f203 	mul.w	r2, r5, r3
 800e32e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
                                         buff[i2 * p->channels],
 800e332:	fb09 f103 	mul.w	r1, r9, r3
 800e336:	eb04 0181 	add.w	r1, r4, r1, lsl #2
                                         buff[i3 * p->channels],
 800e33a:	fb06 f003 	mul.w	r0, r6, r3
 800e33e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
                                         buff[i4 * p->channels],
 800e342:	fb0b f303 	mul.w	r3, fp, r3
 800e346:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    outputArray[0] = LEAF_interpolate_hermite_x (buff[i1 * p->channels],
 800e34a:	eeb0 2a48 	vmov.f32	s4, s16
 800e34e:	edd3 1a00 	vldr	s3, [r3]
 800e352:	ed90 1a00 	vldr	s2, [r0]
 800e356:	edd1 0a00 	vldr	s1, [r1]
 800e35a:	ed92 0a00 	vldr	s0, [r2]
 800e35e:	f7ff f907 	bl	800d570 <LEAF_interpolate_hermite_x>
 800e362:	9b00      	ldr	r3, [sp, #0]
 800e364:	ed83 0a00 	vstr	s0, [r3]
    outputArray[1] = LEAF_interpolate_hermite_x (buff[(i1 * p->channels) + 1],
 800e368:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e36a:	699b      	ldr	r3, [r3, #24]
 800e36c:	fb03 f505 	mul.w	r5, r3, r5
 800e370:	3501      	adds	r5, #1
 800e372:	eb04 0585 	add.w	r5, r4, r5, lsl #2
                                         buff[(i2 * p->channels) + 1],
 800e376:	fb03 f909 	mul.w	r9, r3, r9
 800e37a:	f109 0901 	add.w	r9, r9, #1
 800e37e:	eb04 0989 	add.w	r9, r4, r9, lsl #2
                                         buff[(i3 * p->channels) + 1],
 800e382:	fb03 f606 	mul.w	r6, r3, r6
 800e386:	3601      	adds	r6, #1
 800e388:	eb04 0686 	add.w	r6, r4, r6, lsl #2
                                         buff[(i4 * p->channels) + 1],
 800e38c:	fb03 f30b 	mul.w	r3, r3, fp
 800e390:	3301      	adds	r3, #1
 800e392:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    outputArray[1] = LEAF_interpolate_hermite_x (buff[(i1 * p->channels) + 1],
 800e396:	eeb0 2a48 	vmov.f32	s4, s16
 800e39a:	edd3 1a00 	vldr	s3, [r3]
 800e39e:	ed96 1a00 	vldr	s2, [r6]
 800e3a2:	edd9 0a00 	vldr	s1, [r9]
 800e3a6:	ed95 0a00 	vldr	s0, [r5]
 800e3aa:	f7ff f8e1 	bl	800d570 <LEAF_interpolate_hermite_x>
 800e3ae:	9b00      	ldr	r3, [sp, #0]
 800e3b0:	ed83 0a01 	vstr	s0, [r3, #4]
    int32_t cfxlen = p->cfxlen;
 800e3b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e3b6:	6c9d      	ldr	r5, [r3, #72]	; 0x48
    if (p->len * 0.25f < cfxlen) cfxlen = p->len * 0.25f;
 800e3b8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800e3bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3c0:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800e3c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e3c8:	ee07 5a10 	vmov	s14, r5
 800e3cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e3d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e3d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3d8:	d503      	bpl.n	800e3e2 <tSampler_tickStereo+0x1ba>
 800e3da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e3de:	ee17 5a90 	vmov	r5, s15
    if (myStart >= cfxlen) fadeLeftStart = myStart - cfxlen;
 800e3e2:	9a04      	ldr	r2, [sp, #16]
 800e3e4:	42aa      	cmp	r2, r5
 800e3e6:	f2c0 809d 	blt.w	800e524 <tSampler_tickStereo+0x2fc>
 800e3ea:	eba2 0b05 	sub.w	fp, r2, r5
    int32_t fadeLeftEnd = fadeLeftStart + cfxlen;
 800e3ee:	eb05 020b 	add.w	r2, r5, fp
 800e3f2:	9207      	str	r2, [sp, #28]
    int32_t fadeRightStart = fadeRightEnd - cfxlen;
 800e3f4:	9a03      	ldr	r2, [sp, #12]
 800e3f6:	1b51      	subs	r1, r2, r5
    if (p->mode == PlayLoop)
 800e3f8:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 800e3fc:	2a01      	cmp	r2, #1
 800e3fe:	f000 8097 	beq.w	800e530 <tSampler_tickStereo+0x308>
    float flipMix = 0.0f;
 800e402:	ed9f 8a4a 	vldr	s16, [pc, #296]	; 800e52c <tSampler_tickStereo+0x304>
    float crossfadeMix = 0.0f;
 800e406:	eef0 8a48 	vmov.f32	s17, s16
    float inc = fmodf(p->inc, (float)p->len);
 800e40a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e40c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800e410:	eef8 0a67 	vcvt.f32.u32	s1, s15
 800e414:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
 800e418:	f000 fbd2 	bl	800ebc0 <fmodf>
    p->idx += (dir * inc);
 800e41c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e41e:	ee29 9a00 	vmul.f32	s18, s18, s0
 800e422:	edd3 7a08 	vldr	s15, [r3, #32]
 800e426:	ee39 9a27 	vadd.f32	s18, s18, s15
 800e42a:	ed83 9a08 	vstr	s18, [r3, #32]
    if (p->flipStart >= 0)
 800e42e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800e432:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e43a:	db25      	blt.n	800e488 <tSampler_tickStereo+0x260>
        p->flipIdx += (-dir * inc);
 800e43c:	9a05      	ldr	r2, [sp, #20]
 800e43e:	4252      	negs	r2, r2
 800e440:	ee07 2a90 	vmov	s15, r2
 800e444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e448:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e44c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800e450:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e454:	ed83 0a19 	vstr	s0, [r3, #100]	; 0x64
        if((int)p->flipIdx < 0)
 800e458:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e45c:	ee10 2a10 	vmov	r2, s0
 800e460:	2a00      	cmp	r2, #0
 800e462:	f2c0 81bc 	blt.w	800e7de <tSampler_tickStereo+0x5b6>
        if((int)p->idx >= length)
 800e466:	ed93 7a08 	vldr	s14, [r3, #32]
 800e46a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800e46e:	ee17 2a90 	vmov	r2, s15
 800e472:	9906      	ldr	r1, [sp, #24]
 800e474:	428a      	cmp	r2, r1
 800e476:	db07      	blt.n	800e488 <tSampler_tickStereo+0x260>
            p->idx -= (float)length;
 800e478:	ee07 1a90 	vmov	s15, r1
 800e47c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e480:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e484:	edc3 7a08 	vstr	s15, [r3, #32]
    attemptStartEndChange(sp);
 800e488:	4640      	mov	r0, r8
 800e48a:	f7ff fba3 	bl	800dbd4 <attemptStartEndChange>
    if (p->mode == PlayLoop)
 800e48e:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e490:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800e494:	2b01      	cmp	r3, #1
 800e496:	f000 81ab 	beq.w	800e7f0 <tSampler_tickStereo+0x5c8>
    else if (p->mode == PlayBackAndForth)
 800e49a:	2b02      	cmp	r3, #2
 800e49c:	f000 81d2 	beq.w	800e844 <tSampler_tickStereo+0x61c>
    if (p->mode == PlayNormal)
 800e4a0:	bb33      	cbnz	r3, 800e4f0 <tSampler_tickStereo+0x2c8>
        if (p->idx < myStart)
 800e4a2:	edd0 7a08 	vldr	s15, [r0, #32]
 800e4a6:	ed9d 7a04 	vldr	s14, [sp, #16]
 800e4aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e4ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e4b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4b6:	f140 81f6 	bpl.w	800e8a6 <tSampler_tickStereo+0x67e>
            p->idx = myStart;
 800e4ba:	ed80 7a08 	vstr	s14, [r0, #32]
        float ticksToEnd = rev ? ((idx - myStart) * p->iinc) : ((myEnd - idx) * p->iinc);
 800e4be:	9b01      	ldr	r3, [sp, #4]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	f000 81fd 	beq.w	800e8c0 <tSampler_tickStereo+0x698>
 800e4c6:	9b04      	ldr	r3, [sp, #16]
 800e4c8:	1aff      	subs	r7, r7, r3
 800e4ca:	ee07 7a90 	vmov	s15, r7
 800e4ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e4d2:	edd0 7a0b 	vldr	s15, [r0, #44]	; 0x2c
 800e4d6:	ee67 7a27 	vmul.f32	s15, s14, s15
        if ((ticksToEnd < p->ticksPerSevenMs) && (p->active == 1))
 800e4da:	ed90 7a04 	vldr	s14, [r0, #16]
 800e4de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e4e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4e6:	dd03      	ble.n	800e4f0 <tSampler_tickStereo+0x2c8>
 800e4e8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800e4ea:	2b01      	cmp	r3, #1
 800e4ec:	f000 81f3 	beq.w	800e8d6 <tSampler_tickStereo+0x6ae>
    float sampleGain = tRamp_tick(&p->gain);
 800e4f0:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e4f2:	301c      	adds	r0, #28
 800e4f4:	f7fe feb2 	bl	800d25c <tRamp_tick>
    for (int i = 0; i < p->channels; i++)
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	9c00      	ldr	r4, [sp, #0]
 800e4fc:	e217      	b.n	800e92e <tSampler_tickStereo+0x706>
        return p->last;
 800e4fe:	ed93 0a0a 	vldr	s0, [r3, #40]	; 0x28
 800e502:	e270      	b.n	800e9e6 <tSampler_tickStereo+0x7be>
    if (dir < 0) rev = 1;
 800e504:	2201      	movs	r2, #1
 800e506:	9201      	str	r2, [sp, #4]
 800e508:	e6c9      	b.n	800e29e <tSampler_tickStereo+0x76>
    i1 = (i1 < length*rev) ? i1 + (length * (1-rev)) : i1 - (length * rev);
 800e50a:	eba5 050a 	sub.w	r5, r5, sl
 800e50e:	e6f1      	b.n	800e2f4 <tSampler_tickStereo+0xcc>
    i2 = (i2 < length*rev) ? i2 + (length * (1-rev)) : i2 - (length * rev);
 800e510:	eba7 090a 	sub.w	r9, r7, sl
 800e514:	e6f7      	b.n	800e306 <tSampler_tickStereo+0xde>
    i3 = (i3 < length*(1-rev)) ? i3 + (length * rev) : i3 - (length * (1-rev));
 800e516:	9a02      	ldr	r2, [sp, #8]
 800e518:	1ab6      	subs	r6, r6, r2
 800e51a:	e700      	b.n	800e31e <tSampler_tickStereo+0xf6>
    i4 = (i4 < length*(1-rev)) ? i4 + (length * rev) : i4 - (length * (1-rev));
 800e51c:	9a02      	ldr	r2, [sp, #8]
 800e51e:	ebab 0b02 	sub.w	fp, fp, r2
 800e522:	e701      	b.n	800e328 <tSampler_tickStereo+0x100>
    int32_t fadeLeftStart = 0;
 800e524:	f04f 0b00 	mov.w	fp, #0
 800e528:	e761      	b.n	800e3ee <tSampler_tickStereo+0x1c6>
 800e52a:	bf00      	nop
 800e52c:	00000000 	.word	0x00000000
        if ((fadeLeftStart <= idx) && (idx <= fadeLeftEnd))
 800e530:	9a07      	ldr	r2, [sp, #28]
 800e532:	45bb      	cmp	fp, r7
 800e534:	bfd8      	it	le
 800e536:	4297      	cmple	r7, r2
 800e538:	f300 811e 	bgt.w	800e778 <tSampler_tickStereo+0x550>
            offset = fadeLeftEnd - idx;
 800e53c:	1bd2      	subs	r2, r2, r7
 800e53e:	920a      	str	r2, [sp, #40]	; 0x28
            cdx = fadeRightEnd - offset;
 800e540:	9903      	ldr	r1, [sp, #12]
 800e542:	eba1 0b02 	sub.w	fp, r1, r2
            p->inCrossfade = 1;
 800e546:	2201      	movs	r2, #1
 800e548:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        if (p->inCrossfade)
 800e54c:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 800e550:	2a00      	cmp	r2, #0
 800e552:	f000 8131 	beq.w	800e7b8 <tSampler_tickStereo+0x590>
            int c1 = cdx-(1*dir);
 800e556:	9905      	ldr	r1, [sp, #20]
 800e558:	ebab 0201 	sub.w	r2, fp, r1
            int c3 = cdx+(1*dir);
 800e55c:	eb0b 0901 	add.w	r9, fp, r1
            int c4 = cdx+(2*dir);
 800e560:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e562:	eb01 060b 	add.w	r6, r1, fp
            c1 = (c1 < length * rev) ? c1 + (length * (1-rev)) : c1 - (length * rev);
 800e566:	4592      	cmp	sl, r2
 800e568:	f340 8118 	ble.w	800e79c <tSampler_tickStereo+0x574>
 800e56c:	9902      	ldr	r1, [sp, #8]
 800e56e:	188a      	adds	r2, r1, r2
 800e570:	920b      	str	r2, [sp, #44]	; 0x2c
            c2 = (c2 < length * rev) ? c2 + (length * (1-rev)) : c2 - (length * rev);
 800e572:	45da      	cmp	sl, fp
 800e574:	f340 8116 	ble.w	800e7a4 <tSampler_tickStereo+0x57c>
 800e578:	9a02      	ldr	r2, [sp, #8]
 800e57a:	4493      	add	fp, r2
            c3 = (c3 < length * (1-rev)) ? c3 + (length * rev) : c3 - (length * (1-rev));
 800e57c:	9a02      	ldr	r2, [sp, #8]
 800e57e:	454a      	cmp	r2, r9
 800e580:	f340 8113 	ble.w	800e7aa <tSampler_tickStereo+0x582>
 800e584:	44d1      	add	r9, sl
            c4 = (c4 < length * (1-rev)) ? c4 + (length * rev) : c4 - (length * (1-rev));
 800e586:	9a02      	ldr	r2, [sp, #8]
 800e588:	42b2      	cmp	r2, r6
 800e58a:	f340 8112 	ble.w	800e7b2 <tSampler_tickStereo+0x58a>
 800e58e:	4456      	add	r6, sl
            cfxsample[0] = LEAF_interpolate_hermite_x (buff[c1 * p->channels],
 800e590:	699b      	ldr	r3, [r3, #24]
 800e592:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e594:	fb02 f203 	mul.w	r2, r2, r3
 800e598:	eb04 0282 	add.w	r2, r4, r2, lsl #2
                                                    buff[c2 * p->channels],
 800e59c:	fb0b f103 	mul.w	r1, fp, r3
 800e5a0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
                                                    buff[c3 * p->channels],
 800e5a4:	fb09 f003 	mul.w	r0, r9, r3
 800e5a8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
                                                    buff[c4 * p->channels],
 800e5ac:	fb06 f303 	mul.w	r3, r6, r3
 800e5b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
            cfxsample[0] = LEAF_interpolate_hermite_x (buff[c1 * p->channels],
 800e5b4:	eeb0 2a48 	vmov.f32	s4, s16
 800e5b8:	edd3 1a00 	vldr	s3, [r3]
 800e5bc:	ed90 1a00 	vldr	s2, [r0]
 800e5c0:	edd1 0a00 	vldr	s1, [r1]
 800e5c4:	ed92 0a00 	vldr	s0, [r2]
 800e5c8:	f7fe ffd2 	bl	800d570 <LEAF_interpolate_hermite_x>
 800e5cc:	ed8d 0a0f 	vstr	s0, [sp, #60]	; 0x3c
            cfxsample[1] = LEAF_interpolate_hermite_x (buff[(c1 * p->channels) + 1],
 800e5d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e5d2:	699b      	ldr	r3, [r3, #24]
 800e5d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e5d6:	fb03 f202 	mul.w	r2, r3, r2
 800e5da:	3201      	adds	r2, #1
 800e5dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
                                                                buff[(c2 * p->channels) + 1],
 800e5e0:	fb03 f10b 	mul.w	r1, r3, fp
 800e5e4:	3101      	adds	r1, #1
 800e5e6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
                                                                buff[(c3 * p->channels) + 1],
 800e5ea:	fb03 f009 	mul.w	r0, r3, r9
 800e5ee:	3001      	adds	r0, #1
 800e5f0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
                                                                buff[(c4 * p->channels) + 1],
 800e5f4:	fb03 f306 	mul.w	r3, r3, r6
 800e5f8:	3301      	adds	r3, #1
 800e5fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
            cfxsample[1] = LEAF_interpolate_hermite_x (buff[(c1 * p->channels) + 1],
 800e5fe:	eeb0 2a48 	vmov.f32	s4, s16
 800e602:	edd3 1a00 	vldr	s3, [r3]
 800e606:	ed90 1a00 	vldr	s2, [r0]
 800e60a:	edd1 0a00 	vldr	s1, [r1]
 800e60e:	ed92 0a00 	vldr	s0, [r2]
 800e612:	f7fe ffad 	bl	800d570 <LEAF_interpolate_hermite_x>
 800e616:	ed8d 0a10 	vstr	s0, [sp, #64]	; 0x40
            crossfadeMix = (float) offset / (float) cfxlen;
 800e61a:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 800e61e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e622:	ee07 5a10 	vmov	s14, r5
 800e626:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e62a:	eec7 8a87 	vdiv.f32	s17, s15, s14
        float flipLength = fabsf(p->flipIdx - p->flipStart);
 800e62e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e630:	edd2 7a19 	vldr	s15, [r2, #100]	; 0x64
 800e634:	ed92 7a18 	vldr	s14, [r2, #96]	; 0x60
 800e638:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e63c:	eef0 7ae7 	vabs.f32	s15, s15
        if (flipLength > cfxlen)
 800e640:	ee07 5a10 	vmov	s14, r5
 800e644:	eef8 9ac7 	vcvt.f32.s32	s19, s14
 800e648:	eef4 9ae7 	vcmpe.f32	s19, s15
 800e64c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e650:	d502      	bpl.n	800e658 <tSampler_tickStereo+0x430>
            p->flipStart = -1;
 800e652:	4bd4      	ldr	r3, [pc, #848]	; (800e9a4 <tSampler_tickStereo+0x77c>)
 800e654:	6613      	str	r3, [r2, #96]	; 0x60
            p->flipIdx = -1;
 800e656:	6653      	str	r3, [r2, #100]	; 0x64
        if (p->flipIdx >= 0)
 800e658:	edd2 7a19 	vldr	s15, [r2, #100]	; 0x64
 800e65c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e664:	f2c0 80b8 	blt.w	800e7d8 <tSampler_tickStereo+0x5b0>
            if (p->flipStart == -1)
 800e668:	ed92 7a18 	vldr	s14, [r2, #96]	; 0x60
 800e66c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800e670:	eeb4 7a67 	vcmp.f32	s14, s15
 800e674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e678:	d102      	bne.n	800e680 <tSampler_tickStereo+0x458>
                p->flipStart = p->idx;
 800e67a:	6a13      	ldr	r3, [r2, #32]
 800e67c:	6613      	str	r3, [r2, #96]	; 0x60
                p->flipIdx = p->idx;
 800e67e:	6653      	str	r3, [r2, #100]	; 0x64
            flipLength = fabsf(p->flipIdx - p->flipStart);
 800e680:	edd2 7a19 	vldr	s15, [r2, #100]	; 0x64
 800e684:	ed92 8a18 	vldr	s16, [r2, #96]	; 0x60
 800e688:	ee37 8ac8 	vsub.f32	s16, s15, s16
 800e68c:	eeb0 8ac8 	vabs.f32	s16, s16
            int fdx = (int) p->flipIdx;
 800e690:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e694:	ee17 6a10 	vmov	r6, s14
            float falpha = (1-rev) - (p->flipIdx - fdx) * dir;
 800e698:	ed9d 7a08 	vldr	s14, [sp, #32]
 800e69c:	eeb8 aac7 	vcvt.f32.s32	s20, s14
 800e6a0:	ee07 6a10 	vmov	s14, r6
 800e6a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e6a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e6ac:	ee69 7a27 	vmul.f32	s15, s18, s15
 800e6b0:	ee3a aa67 	vsub.f32	s20, s20, s15
            idx += (1-rev);
 800e6b4:	9b08      	ldr	r3, [sp, #32]
 800e6b6:	441f      	add	r7, r3
            int f1 = fdx+(1*dir);
 800e6b8:	9b05      	ldr	r3, [sp, #20]
 800e6ba:	eb03 0906 	add.w	r9, r3, r6
            int f3 = fdx-(1*dir);
 800e6be:	1af5      	subs	r5, r6, r3
            int f4 = fdx-(2*dir);
 800e6c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6c2:	1af3      	subs	r3, r6, r3
            f1 = (f1 < length*(1-rev)) ? f1 + (length * rev) : f1 - (length * (1-rev));
 800e6c4:	9902      	ldr	r1, [sp, #8]
 800e6c6:	4549      	cmp	r1, r9
 800e6c8:	dd79      	ble.n	800e7be <tSampler_tickStereo+0x596>
 800e6ca:	44d1      	add	r9, sl
            f2 = (f2 < length*(1-rev)) ? f2 + (length * rev) : f2 - (length * (1-rev));
 800e6cc:	9902      	ldr	r1, [sp, #8]
 800e6ce:	42b1      	cmp	r1, r6
 800e6d0:	dd79      	ble.n	800e7c6 <tSampler_tickStereo+0x59e>
 800e6d2:	4456      	add	r6, sl
            f3 = (f3 < length*rev) ? f3 + (length * (1-rev)) : f3 - (length * rev);
 800e6d4:	45aa      	cmp	sl, r5
 800e6d6:	dd79      	ble.n	800e7cc <tSampler_tickStereo+0x5a4>
 800e6d8:	9902      	ldr	r1, [sp, #8]
 800e6da:	440d      	add	r5, r1
            f4 = (f4 < length*rev) ? f4 + (length * (1-rev)) : f4 - (length * rev);
 800e6dc:	459a      	cmp	sl, r3
 800e6de:	dd78      	ble.n	800e7d2 <tSampler_tickStereo+0x5aa>
 800e6e0:	9902      	ldr	r1, [sp, #8]
 800e6e2:	4419      	add	r1, r3
 800e6e4:	468a      	mov	sl, r1
            flipsample[0] = LEAF_interpolate_hermite_x (buff[f1 * p->channels],
 800e6e6:	6993      	ldr	r3, [r2, #24]
 800e6e8:	fb09 f203 	mul.w	r2, r9, r3
 800e6ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
                                                     buff[f2 * p->channels],
 800e6f0:	fb06 f103 	mul.w	r1, r6, r3
 800e6f4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
                                                     buff[f3 * p->channels],
 800e6f8:	fb05 f003 	mul.w	r0, r5, r3
 800e6fc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
                                                     buff[f4 * p->channels],
 800e700:	fb0a f303 	mul.w	r3, sl, r3
 800e704:	eb04 0383 	add.w	r3, r4, r3, lsl #2
            flipsample[0] = LEAF_interpolate_hermite_x (buff[f1 * p->channels],
 800e708:	eeb0 2a4a 	vmov.f32	s4, s20
 800e70c:	edd3 1a00 	vldr	s3, [r3]
 800e710:	ed90 1a00 	vldr	s2, [r0]
 800e714:	edd1 0a00 	vldr	s1, [r1]
 800e718:	ed92 0a00 	vldr	s0, [r2]
 800e71c:	f7fe ff28 	bl	800d570 <LEAF_interpolate_hermite_x>
 800e720:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
            flipsample[1] = LEAF_interpolate_hermite_x (buff[(f1 * p->channels) + 1],
 800e724:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e726:	6998      	ldr	r0, [r3, #24]
 800e728:	fb00 f309 	mul.w	r3, r0, r9
 800e72c:	3301      	adds	r3, #1
 800e72e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
                                                     buff[(f2 * p->channels) + 1],
 800e732:	fb00 f206 	mul.w	r2, r0, r6
 800e736:	3201      	adds	r2, #1
 800e738:	eb04 0282 	add.w	r2, r4, r2, lsl #2
                                                     buff[(f3 * p->channels) + 1],
 800e73c:	fb00 f105 	mul.w	r1, r0, r5
 800e740:	3101      	adds	r1, #1
 800e742:	eb04 0181 	add.w	r1, r4, r1, lsl #2
                                                     buff[(f4 * p->channels) + 1],
 800e746:	fb00 fa0a 	mul.w	sl, r0, sl
 800e74a:	f10a 0a01 	add.w	sl, sl, #1
 800e74e:	eb04 048a 	add.w	r4, r4, sl, lsl #2
            flipsample[1] = LEAF_interpolate_hermite_x (buff[(f1 * p->channels) + 1],
 800e752:	eeb0 2a4a 	vmov.f32	s4, s20
 800e756:	edd4 1a00 	vldr	s3, [r4]
 800e75a:	ed91 1a00 	vldr	s2, [r1]
 800e75e:	edd2 0a00 	vldr	s1, [r2]
 800e762:	ed93 0a00 	vldr	s0, [r3]
 800e766:	f7fe ff03 	bl	800d570 <LEAF_interpolate_hermite_x>
 800e76a:	ed8d 0a0e 	vstr	s0, [sp, #56]	; 0x38
            flipMix = (float) (cfxlen - flipLength) / (float) cfxlen;
 800e76e:	ee79 7ac8 	vsub.f32	s15, s19, s16
 800e772:	ee87 8aa9 	vdiv.f32	s16, s15, s19
 800e776:	e648      	b.n	800e40a <tSampler_tickStereo+0x1e2>
        else if ((fadeRightStart <= idx) && (idx <= fadeRightEnd))
 800e778:	9a03      	ldr	r2, [sp, #12]
 800e77a:	428f      	cmp	r7, r1
 800e77c:	bfa8      	it	ge
 800e77e:	42ba      	cmpge	r2, r7
 800e780:	db06      	blt.n	800e790 <tSampler_tickStereo+0x568>
            offset = idx - fadeRightStart;
 800e782:	1a7a      	subs	r2, r7, r1
 800e784:	920a      	str	r2, [sp, #40]	; 0x28
            cdx = fadeLeftStart + offset;
 800e786:	4493      	add	fp, r2
            p->inCrossfade = 1;
 800e788:	2201      	movs	r2, #1
 800e78a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800e78e:	e6dd      	b.n	800e54c <tSampler_tickStereo+0x324>
        else p->inCrossfade = 0;
 800e790:	2200      	movs	r2, #0
 800e792:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        int cdx = 0;
 800e796:	4693      	mov	fp, r2
        int offset = 0;
 800e798:	920a      	str	r2, [sp, #40]	; 0x28
 800e79a:	e6d7      	b.n	800e54c <tSampler_tickStereo+0x324>
            c1 = (c1 < length * rev) ? c1 + (length * (1-rev)) : c1 - (length * rev);
 800e79c:	eba2 020a 	sub.w	r2, r2, sl
 800e7a0:	920b      	str	r2, [sp, #44]	; 0x2c
 800e7a2:	e6e6      	b.n	800e572 <tSampler_tickStereo+0x34a>
            c2 = (c2 < length * rev) ? c2 + (length * (1-rev)) : c2 - (length * rev);
 800e7a4:	ebab 0b0a 	sub.w	fp, fp, sl
 800e7a8:	e6e8      	b.n	800e57c <tSampler_tickStereo+0x354>
            c3 = (c3 < length * (1-rev)) ? c3 + (length * rev) : c3 - (length * (1-rev));
 800e7aa:	9a02      	ldr	r2, [sp, #8]
 800e7ac:	eba9 0902 	sub.w	r9, r9, r2
 800e7b0:	e6e9      	b.n	800e586 <tSampler_tickStereo+0x35e>
            c4 = (c4 < length * (1-rev)) ? c4 + (length * rev) : c4 - (length * (1-rev));
 800e7b2:	9a02      	ldr	r2, [sp, #8]
 800e7b4:	1ab6      	subs	r6, r6, r2
 800e7b6:	e6eb      	b.n	800e590 <tSampler_tickStereo+0x368>
    float crossfadeMix = 0.0f;
 800e7b8:	eddf 8a7c 	vldr	s17, [pc, #496]	; 800e9ac <tSampler_tickStereo+0x784>
 800e7bc:	e737      	b.n	800e62e <tSampler_tickStereo+0x406>
            f1 = (f1 < length*(1-rev)) ? f1 + (length * rev) : f1 - (length * (1-rev));
 800e7be:	9902      	ldr	r1, [sp, #8]
 800e7c0:	eba9 0901 	sub.w	r9, r9, r1
 800e7c4:	e782      	b.n	800e6cc <tSampler_tickStereo+0x4a4>
            f2 = (f2 < length*(1-rev)) ? f2 + (length * rev) : f2 - (length * (1-rev));
 800e7c6:	9902      	ldr	r1, [sp, #8]
 800e7c8:	1a76      	subs	r6, r6, r1
 800e7ca:	e783      	b.n	800e6d4 <tSampler_tickStereo+0x4ac>
            f3 = (f3 < length*rev) ? f3 + (length * (1-rev)) : f3 - (length * rev);
 800e7cc:	eba5 050a 	sub.w	r5, r5, sl
 800e7d0:	e784      	b.n	800e6dc <tSampler_tickStereo+0x4b4>
            f4 = (f4 < length*rev) ? f4 + (length * (1-rev)) : f4 - (length * rev);
 800e7d2:	eba3 0a0a 	sub.w	sl, r3, sl
 800e7d6:	e786      	b.n	800e6e6 <tSampler_tickStereo+0x4be>
    float flipMix = 0.0f;
 800e7d8:	ed9f 8a74 	vldr	s16, [pc, #464]	; 800e9ac <tSampler_tickStereo+0x784>
 800e7dc:	e615      	b.n	800e40a <tSampler_tickStereo+0x1e2>
            p->idx += (float)length;
 800e7de:	eddd 7a06 	vldr	s15, [sp, #24]
 800e7e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e7e6:	ee39 9a27 	vadd.f32	s18, s18, s15
 800e7ea:	ed83 9a08 	vstr	s18, [r3, #32]
 800e7ee:	e63a      	b.n	800e466 <tSampler_tickStereo+0x23e>
        if((int)p->idx < myStart)
 800e7f0:	edd0 7a08 	vldr	s15, [r0, #32]
 800e7f4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e7f8:	ee17 2a10 	vmov	r2, s14
 800e7fc:	9904      	ldr	r1, [sp, #16]
 800e7fe:	428a      	cmp	r2, r1
 800e800:	da0a      	bge.n	800e818 <tSampler_tickStereo+0x5f0>
            p->idx += (float)(fadeRightEnd - fadeLeftEnd);
 800e802:	9a03      	ldr	r2, [sp, #12]
 800e804:	9907      	ldr	r1, [sp, #28]
 800e806:	1a52      	subs	r2, r2, r1
 800e808:	ee07 2a10 	vmov	s14, r2
 800e80c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e810:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e814:	edc0 7a08 	vstr	s15, [r0, #32]
        if((int)p->idx > myEnd)
 800e818:	ed90 7a08 	vldr	s14, [r0, #32]
 800e81c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800e820:	ee17 2a90 	vmov	r2, s15
 800e824:	9903      	ldr	r1, [sp, #12]
 800e826:	460c      	mov	r4, r1
 800e828:	428a      	cmp	r2, r1
 800e82a:	f77f ae39 	ble.w	800e4a0 <tSampler_tickStereo+0x278>
            p->idx -= (float)(fadeRightEnd - fadeLeftEnd);
 800e82e:	9907      	ldr	r1, [sp, #28]
 800e830:	1a62      	subs	r2, r4, r1
 800e832:	ee07 2a90 	vmov	s15, r2
 800e836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e83a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e83e:	edc0 7a08 	vstr	s15, [r0, #32]
 800e842:	e62d      	b.n	800e4a0 <tSampler_tickStereo+0x278>
        if (p->idx < myStart)
 800e844:	edd0 7a08 	vldr	s15, [r0, #32]
 800e848:	ed9d 7a04 	vldr	s14, [sp, #16]
 800e84c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e850:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e858:	d50d      	bpl.n	800e876 <tSampler_tickStereo+0x64e>
            p->bnf = -p->bnf;
 800e85a:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 800e85e:	4252      	negs	r2, r2
 800e860:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
            p->idx = myStart + 1;
 800e864:	9a04      	ldr	r2, [sp, #16]
 800e866:	3201      	adds	r2, #1
 800e868:	ee07 2a90 	vmov	s15, r2
 800e86c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e870:	edc0 7a08 	vstr	s15, [r0, #32]
 800e874:	e614      	b.n	800e4a0 <tSampler_tickStereo+0x278>
        else if (p->idx > myEnd)
 800e876:	ed9d 7a03 	vldr	s14, [sp, #12]
 800e87a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e87e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e886:	f77f ae0b 	ble.w	800e4a0 <tSampler_tickStereo+0x278>
            p->bnf = -p->bnf;
 800e88a:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 800e88e:	4252      	negs	r2, r2
 800e890:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
            p->idx = myEnd - 1;
 800e894:	9a03      	ldr	r2, [sp, #12]
 800e896:	3a01      	subs	r2, #1
 800e898:	ee07 2a90 	vmov	s15, r2
 800e89c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e8a0:	edc0 7a08 	vstr	s15, [r0, #32]
 800e8a4:	e5fc      	b.n	800e4a0 <tSampler_tickStereo+0x278>
        else if (p->idx > myEnd)
 800e8a6:	ed9d 7a03 	vldr	s14, [sp, #12]
 800e8aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e8ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8b6:	f77f ae02 	ble.w	800e4be <tSampler_tickStereo+0x296>
            p->idx = myEnd;
 800e8ba:	ed80 7a08 	vstr	s14, [r0, #32]
 800e8be:	e5fe      	b.n	800e4be <tSampler_tickStereo+0x296>
        float ticksToEnd = rev ? ((idx - myStart) * p->iinc) : ((myEnd - idx) * p->iinc);
 800e8c0:	9b03      	ldr	r3, [sp, #12]
 800e8c2:	1bdb      	subs	r3, r3, r7
 800e8c4:	ee07 3a90 	vmov	s15, r3
 800e8c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e8cc:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 800e8d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e8d4:	e601      	b.n	800e4da <tSampler_tickStereo+0x2b2>
            tRamp_setDest(&p->gain, 0.f);
 800e8d6:	ed9f 0a35 	vldr	s0, [pc, #212]	; 800e9ac <tSampler_tickStereo+0x784>
 800e8da:	301c      	adds	r0, #28
 800e8dc:	f7fe fca2 	bl	800d224 <tRamp_setDest>
            p->active = -1;
 800e8e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e8e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e8e6:	659a      	str	r2, [r3, #88]	; 0x58
 800e8e8:	e602      	b.n	800e4f0 <tSampler_tickStereo+0x2c8>
        outputArray[i] = ((outputArray[i] * (1.0f - crossfadeMix)) + (cfxsample[i] * crossfadeMix)) * (1.0f - flipMix) + (flipsample[i] * flipMix);
 800e8ea:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800e8ee:	edd2 6a00 	vldr	s13, [r2]
 800e8f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e8f6:	ee37 7ae8 	vsub.f32	s14, s15, s17
 800e8fa:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e8fe:	a912      	add	r1, sp, #72	; 0x48
 800e900:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800e904:	ed11 7a03 	vldr	s14, [r1, #-12]
 800e908:	ee27 7a28 	vmul.f32	s14, s14, s17
 800e90c:	ee36 7a87 	vadd.f32	s14, s13, s14
 800e910:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800e914:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e918:	ed11 7a05 	vldr	s14, [r1, #-20]	; 0xffffffec
 800e91c:	ee27 7a08 	vmul.f32	s14, s14, s16
 800e920:	ee77 7a87 	vadd.f32	s15, s15, s14
        outputArray[i]  = outputArray[i] * sampleGain;
 800e924:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e928:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < p->channels; i++)
 800e92c:	3301      	adds	r3, #1
 800e92e:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e930:	6982      	ldr	r2, [r0, #24]
 800e932:	429a      	cmp	r2, r3
 800e934:	d8d9      	bhi.n	800e8ea <tSampler_tickStereo+0x6c2>
    if (p->active < 0)
 800e936:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800e938:	2b00      	cmp	r3, #0
 800e93a:	db06      	blt.n	800e94a <tSampler_tickStereo+0x722>
    p->last =  outputArray[0];
 800e93c:	9b00      	ldr	r3, [sp, #0]
 800e93e:	ed93 0a00 	vldr	s0, [r3]
 800e942:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e944:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    return p->last;
 800e948:	e04d      	b.n	800e9e6 <tSampler_tickStereo+0x7be>
    	if (tRamp_sample(&p->gain) <= 0.0001f)
 800e94a:	301c      	adds	r0, #28
 800e94c:	f7fe fcad 	bl	800d2aa <tRamp_sample>
 800e950:	eddf 7a15 	vldr	s15, [pc, #84]	; 800e9a8 <tSampler_tickStereo+0x780>
 800e954:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e95c:	d8ee      	bhi.n	800e93c <tSampler_tickStereo+0x714>
            if (p->retrigger == 1)
 800e95e:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e960:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800e962:	2b01      	cmp	r3, #1
 800e964:	d002      	beq.n	800e96c <tSampler_tickStereo+0x744>
                p->active = 0;
 800e966:	2300      	movs	r3, #0
 800e968:	6583      	str	r3, [r0, #88]	; 0x58
 800e96a:	e7e7      	b.n	800e93c <tSampler_tickStereo+0x714>
                p->active = 1;
 800e96c:	6583      	str	r3, [r0, #88]	; 0x58
                p->retrigger = 0;
 800e96e:	2300      	movs	r3, #0
 800e970:	6543      	str	r3, [r0, #84]	; 0x54
                tRamp_setDest(&p->gain, 1.f);
 800e972:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e976:	301c      	adds	r0, #28
 800e978:	f7fe fc54 	bl	800d224 <tRamp_setDest>
                if (p->dir > 0)
 800e97c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e97e:	f993 2030 	ldrsb.w	r2, [r3, #48]	; 0x30
 800e982:	2a00      	cmp	r2, #0
 800e984:	dd1b      	ble.n	800e9be <tSampler_tickStereo+0x796>
                    if (p->flip > 0)    p->idx = p->start;
 800e986:	f993 2031 	ldrsb.w	r2, [r3, #49]	; 0x31
 800e98a:	2a00      	cmp	r2, #0
 800e98c:	dd10      	ble.n	800e9b0 <tSampler_tickStereo+0x788>
 800e98e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800e992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e996:	edc3 7a08 	vstr	s15, [r3, #32]
                handleStartEndChange(&p);
 800e99a:	a811      	add	r0, sp, #68	; 0x44
 800e99c:	f7fe feb0 	bl	800d700 <handleStartEndChange>
 800e9a0:	e7cc      	b.n	800e93c <tSampler_tickStereo+0x714>
 800e9a2:	bf00      	nop
 800e9a4:	bf800000 	.word	0xbf800000
 800e9a8:	38d1b717 	.word	0x38d1b717
 800e9ac:	00000000 	.word	0x00000000
                    else                p->idx = p->end;
 800e9b0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800e9b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e9b8:	edc3 7a08 	vstr	s15, [r3, #32]
 800e9bc:	e7ed      	b.n	800e99a <tSampler_tickStereo+0x772>
                    if (p->flip > 0)    p->idx = p->end;
 800e9be:	f993 2031 	ldrsb.w	r2, [r3, #49]	; 0x31
 800e9c2:	2a00      	cmp	r2, #0
 800e9c4:	dd06      	ble.n	800e9d4 <tSampler_tickStereo+0x7ac>
 800e9c6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800e9ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e9ce:	edc3 7a08 	vstr	s15, [r3, #32]
 800e9d2:	e7e2      	b.n	800e99a <tSampler_tickStereo+0x772>
                    else                p->idx = p->start;
 800e9d4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800e9d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e9dc:	edc3 7a08 	vstr	s15, [r3, #32]
 800e9e0:	e7db      	b.n	800e99a <tSampler_tickStereo+0x772>
    if (p->active == 0)         return 0.f;
 800e9e2:	ed1f 0a0e 	vldr	s0, [pc, #-56]	; 800e9ac <tSampler_tickStereo+0x784>
}
 800e9e6:	b013      	add	sp, #76	; 0x4c
 800e9e8:	ecbd 8b06 	vpop	{d8-d10}
 800e9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e9f0 <tSampler_setRate>:
    tSampler_setEnd(sp, p->start + length);
}

void tSampler_setRate      (tSampler* const sp, float rate)
{
    _tSampler* p = *sp;
 800e9f0:	6803      	ldr	r3, [r0, #0]
    
    rate = rate * p->rateFactor; //adjust for sampling rate of buffer (may be different from leaf.sampleRate if audio file was loaded form SD card)
 800e9f2:	edd3 7a05 	vldr	s15, [r3, #20]
 800e9f6:	ee27 0a80 	vmul.f32	s0, s15, s0
    if (rate < 0.f)
 800e9fa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e9fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea02:	d40b      	bmi.n	800ea1c <tSampler_setRate+0x2c>
        rate = -rate;
        p->dir = -1;
    }
    else
    {
        p->dir = 1;
 800ea04:	2201      	movs	r2, #1
 800ea06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
    
    p->inc = rate;
 800ea0a:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    p->iinc = 1.f / p->inc;
 800ea0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ea12:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ea16:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 800ea1a:	4770      	bx	lr
        rate = -rate;
 800ea1c:	eeb1 0a40 	vneg.f32	s0, s0
        p->dir = -1;
 800ea20:	22ff      	movs	r2, #255	; 0xff
 800ea22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800ea26:	e7f0      	b.n	800ea0a <tSampler_setRate+0x1a>

0800ea28 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 800ea28:	4770      	bx	lr
	...

0800ea2c <LEAF_init>:
{
 800ea2c:	b538      	push	{r3, r4, r5, lr}
 800ea2e:	ed2d 8b02 	vpush	{d8}
 800ea32:	4604      	mov	r4, r0
 800ea34:	eeb0 8a40 	vmov.f32	s16, s0
 800ea38:	460d      	mov	r5, r1
 800ea3a:	4611      	mov	r1, r2
    leaf->_internal_mempool.leaf = leaf;
 800ea3c:	6200      	str	r0, [r0, #32]
    leaf_pool_init(leaf, memory, memorysize);
 800ea3e:	461a      	mov	r2, r3
 800ea40:	f7fe fdcd 	bl	800d5de <leaf_pool_init>
    leaf->sampleRate = sr;
 800ea44:	ed84 8a00 	vstr	s16, [r4]
    leaf->blockSize = blocksize;
 800ea48:	60a5      	str	r5, [r4, #8]
    leaf->invSampleRate = 1.0f/sr;
 800ea4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ea4e:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800ea52:	edc4 7a01 	vstr	s15, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 800ea56:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800ea88 <LEAF_init+0x5c>
 800ea5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ea5e:	edc4 7a03 	vstr	s15, [r4, #12]
    leaf->random = random;
 800ea62:	9b06      	ldr	r3, [sp, #24]
 800ea64:	6123      	str	r3, [r4, #16]
    leaf->clearOnAllocation = 0;
 800ea66:	2300      	movs	r3, #0
 800ea68:	6163      	str	r3, [r4, #20]
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 800ea6a:	4a08      	ldr	r2, [pc, #32]	; (800ea8c <LEAF_init+0x60>)
 800ea6c:	63a2      	str	r2, [r4, #56]	; 0x38
    for (int i = 0; i < LEAFErrorNil; ++i)
 800ea6e:	e006      	b.n	800ea7e <LEAF_init+0x52>
        leaf->errorState[i] = 0;
 800ea70:	f103 020e 	add.w	r2, r3, #14
 800ea74:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ea78:	2100      	movs	r1, #0
 800ea7a:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < LEAFErrorNil; ++i)
 800ea7c:	3301      	adds	r3, #1
 800ea7e:	2b02      	cmp	r3, #2
 800ea80:	ddf6      	ble.n	800ea70 <LEAF_init+0x44>
}
 800ea82:	ecbd 8b02 	vpop	{d8}
 800ea86:	bd38      	pop	{r3, r4, r5, pc}
 800ea88:	40c90fdb 	.word	0x40c90fdb
 800ea8c:	0800ea29 	.word	0x0800ea29

0800ea90 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 800ea90:	b510      	push	{r4, lr}
    leaf->errorState[whichone] = 1;
 800ea92:	f101 030e 	add.w	r3, r1, #14
 800ea96:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ea9a:	2401      	movs	r4, #1
 800ea9c:	605c      	str	r4, [r3, #4]
    leaf->errorCallback(leaf, whichone);
 800ea9e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800eaa0:	4798      	blx	r3
}
 800eaa2:	bd10      	pop	{r4, pc}

0800eaa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 800eaa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800eadc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800eaa8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800eaaa:	e003      	b.n	800eab4 <LoopCopyDataInit>

0800eaac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800eaac:	4b0c      	ldr	r3, [pc, #48]	; (800eae0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800eaae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800eab0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800eab2:	3104      	adds	r1, #4

0800eab4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800eab4:	480b      	ldr	r0, [pc, #44]	; (800eae4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800eab6:	4b0c      	ldr	r3, [pc, #48]	; (800eae8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800eab8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800eaba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800eabc:	d3f6      	bcc.n	800eaac <CopyDataInit>
  ldr  r2, =_sbss
 800eabe:	4a0b      	ldr	r2, [pc, #44]	; (800eaec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800eac0:	e002      	b.n	800eac8 <LoopFillZerobss>

0800eac2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800eac2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800eac4:	f842 3b04 	str.w	r3, [r2], #4

0800eac8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800eac8:	4b09      	ldr	r3, [pc, #36]	; (800eaf0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800eaca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800eacc:	d3f9      	bcc.n	800eac2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800eace:	f7fd ff0d 	bl	800c8ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ead2:	f000 f817 	bl	800eb04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ead6:	f7fd fbbd 	bl	800c254 <main>
  bx  lr    
 800eada:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 800eadc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800eae0:	080100b0 	.word	0x080100b0
  ldr  r0, =_sdata
 800eae4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800eae8:	20000104 	.word	0x20000104
  ldr  r2, =_sbss
 800eaec:	20000108 	.word	0x20000108
  ldr  r3, = _ebss
 800eaf0:	200113b8 	.word	0x200113b8

0800eaf4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800eaf4:	e7fe      	b.n	800eaf4 <ADC3_IRQHandler>
	...

0800eaf8 <__errno>:
 800eaf8:	4b01      	ldr	r3, [pc, #4]	; (800eb00 <__errno+0x8>)
 800eafa:	6818      	ldr	r0, [r3, #0]
 800eafc:	4770      	bx	lr
 800eafe:	bf00      	nop
 800eb00:	2000009c 	.word	0x2000009c

0800eb04 <__libc_init_array>:
 800eb04:	b570      	push	{r4, r5, r6, lr}
 800eb06:	4e0d      	ldr	r6, [pc, #52]	; (800eb3c <__libc_init_array+0x38>)
 800eb08:	4c0d      	ldr	r4, [pc, #52]	; (800eb40 <__libc_init_array+0x3c>)
 800eb0a:	1ba4      	subs	r4, r4, r6
 800eb0c:	10a4      	asrs	r4, r4, #2
 800eb0e:	2500      	movs	r5, #0
 800eb10:	42a5      	cmp	r5, r4
 800eb12:	d109      	bne.n	800eb28 <__libc_init_array+0x24>
 800eb14:	4e0b      	ldr	r6, [pc, #44]	; (800eb44 <__libc_init_array+0x40>)
 800eb16:	4c0c      	ldr	r4, [pc, #48]	; (800eb48 <__libc_init_array+0x44>)
 800eb18:	f000 fe74 	bl	800f804 <_init>
 800eb1c:	1ba4      	subs	r4, r4, r6
 800eb1e:	10a4      	asrs	r4, r4, #2
 800eb20:	2500      	movs	r5, #0
 800eb22:	42a5      	cmp	r5, r4
 800eb24:	d105      	bne.n	800eb32 <__libc_init_array+0x2e>
 800eb26:	bd70      	pop	{r4, r5, r6, pc}
 800eb28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800eb2c:	4798      	blx	r3
 800eb2e:	3501      	adds	r5, #1
 800eb30:	e7ee      	b.n	800eb10 <__libc_init_array+0xc>
 800eb32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800eb36:	4798      	blx	r3
 800eb38:	3501      	adds	r5, #1
 800eb3a:	e7f2      	b.n	800eb22 <__libc_init_array+0x1e>
 800eb3c:	080100a8 	.word	0x080100a8
 800eb40:	080100a8 	.word	0x080100a8
 800eb44:	080100a8 	.word	0x080100a8
 800eb48:	080100ac 	.word	0x080100ac

0800eb4c <memset>:
 800eb4c:	4402      	add	r2, r0
 800eb4e:	4603      	mov	r3, r0
 800eb50:	4293      	cmp	r3, r2
 800eb52:	d100      	bne.n	800eb56 <memset+0xa>
 800eb54:	4770      	bx	lr
 800eb56:	f803 1b01 	strb.w	r1, [r3], #1
 800eb5a:	e7f9      	b.n	800eb50 <memset+0x4>

0800eb5c <fabsf>:
 800eb5c:	ee10 3a10 	vmov	r3, s0
 800eb60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eb64:	ee00 3a10 	vmov	s0, r3
 800eb68:	4770      	bx	lr
	...

0800eb6c <tanf>:
 800eb6c:	ee10 3a10 	vmov	r3, s0
 800eb70:	b507      	push	{r0, r1, r2, lr}
 800eb72:	4a10      	ldr	r2, [pc, #64]	; (800ebb4 <tanf+0x48>)
 800eb74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eb78:	4293      	cmp	r3, r2
 800eb7a:	dc05      	bgt.n	800eb88 <tanf+0x1c>
 800eb7c:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800ebb8 <tanf+0x4c>
 800eb80:	2001      	movs	r0, #1
 800eb82:	f000 fcab 	bl	800f4dc <__kernel_tanf>
 800eb86:	e004      	b.n	800eb92 <tanf+0x26>
 800eb88:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800eb8c:	db04      	blt.n	800eb98 <tanf+0x2c>
 800eb8e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800eb92:	b003      	add	sp, #12
 800eb94:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb98:	4668      	mov	r0, sp
 800eb9a:	f000 f8f1 	bl	800ed80 <__ieee754_rem_pio2f>
 800eb9e:	0040      	lsls	r0, r0, #1
 800eba0:	f000 0002 	and.w	r0, r0, #2
 800eba4:	f1c0 0001 	rsb	r0, r0, #1
 800eba8:	eddd 0a01 	vldr	s1, [sp, #4]
 800ebac:	ed9d 0a00 	vldr	s0, [sp]
 800ebb0:	e7e7      	b.n	800eb82 <tanf+0x16>
 800ebb2:	bf00      	nop
 800ebb4:	3f490fda 	.word	0x3f490fda
	...

0800ebc0 <fmodf>:
 800ebc0:	b500      	push	{lr}
 800ebc2:	ed2d 8b02 	vpush	{d8}
 800ebc6:	b08b      	sub	sp, #44	; 0x2c
 800ebc8:	eeb0 8a40 	vmov.f32	s16, s0
 800ebcc:	eef0 8a60 	vmov.f32	s17, s1
 800ebd0:	f000 f84e 	bl	800ec70 <__ieee754_fmodf>
 800ebd4:	4b24      	ldr	r3, [pc, #144]	; (800ec68 <fmodf+0xa8>)
 800ebd6:	f993 3000 	ldrsb.w	r3, [r3]
 800ebda:	1c5a      	adds	r2, r3, #1
 800ebdc:	d02d      	beq.n	800ec3a <fmodf+0x7a>
 800ebde:	eef4 8a68 	vcmp.f32	s17, s17
 800ebe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebe6:	d628      	bvs.n	800ec3a <fmodf+0x7a>
 800ebe8:	eeb4 8a48 	vcmp.f32	s16, s16
 800ebec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebf0:	d623      	bvs.n	800ec3a <fmodf+0x7a>
 800ebf2:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ebf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebfa:	d11e      	bne.n	800ec3a <fmodf+0x7a>
 800ebfc:	2201      	movs	r2, #1
 800ebfe:	9200      	str	r2, [sp, #0]
 800ec00:	eeb7 0ac8 	vcvt.f64.f32	d0, s16
 800ec04:	4a19      	ldr	r2, [pc, #100]	; (800ec6c <fmodf+0xac>)
 800ec06:	9201      	str	r2, [sp, #4]
 800ec08:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	9208      	str	r2, [sp, #32]
 800ec10:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ec14:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ec18:	b9a3      	cbnz	r3, 800ec44 <fmodf+0x84>
 800ec1a:	ed8d 0b06 	vstr	d0, [sp, #24]
 800ec1e:	4668      	mov	r0, sp
 800ec20:	f000 fd40 	bl	800f6a4 <matherr>
 800ec24:	b1b0      	cbz	r0, 800ec54 <fmodf+0x94>
 800ec26:	9b08      	ldr	r3, [sp, #32]
 800ec28:	b11b      	cbz	r3, 800ec32 <fmodf+0x72>
 800ec2a:	f7ff ff65 	bl	800eaf8 <__errno>
 800ec2e:	9b08      	ldr	r3, [sp, #32]
 800ec30:	6003      	str	r3, [r0, #0]
 800ec32:	ed9d 0b06 	vldr	d0, [sp, #24]
 800ec36:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ec3a:	b00b      	add	sp, #44	; 0x2c
 800ec3c:	ecbd 8b02 	vpop	{d8}
 800ec40:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec44:	ed9f 7b06 	vldr	d7, [pc, #24]	; 800ec60 <fmodf+0xa0>
 800ec48:	2b02      	cmp	r3, #2
 800ec4a:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800ec4e:	ed8d 6b06 	vstr	d6, [sp, #24]
 800ec52:	d1e4      	bne.n	800ec1e <fmodf+0x5e>
 800ec54:	f7ff ff50 	bl	800eaf8 <__errno>
 800ec58:	2321      	movs	r3, #33	; 0x21
 800ec5a:	6003      	str	r3, [r0, #0]
 800ec5c:	e7e3      	b.n	800ec26 <fmodf+0x66>
 800ec5e:	bf00      	nop
	...
 800ec68:	20000100 	.word	0x20000100
 800ec6c:	0800fcc0 	.word	0x0800fcc0

0800ec70 <__ieee754_fmodf>:
 800ec70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec72:	ee10 6a90 	vmov	r6, s1
 800ec76:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 800ec7a:	ee10 3a10 	vmov	r3, s0
 800ec7e:	d009      	beq.n	800ec94 <__ieee754_fmodf+0x24>
 800ec80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ec84:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ec88:	ee10 7a10 	vmov	r7, s0
 800ec8c:	da02      	bge.n	800ec94 <__ieee754_fmodf+0x24>
 800ec8e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800ec92:	dd0a      	ble.n	800ecaa <__ieee754_fmodf+0x3a>
 800ec94:	ee07 3a90 	vmov	s15, r3
 800ec98:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800ec9c:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 800eca0:	ee17 3a90 	vmov	r3, s15
 800eca4:	ee00 3a10 	vmov	s0, r3
 800eca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecaa:	42a9      	cmp	r1, r5
 800ecac:	dbfa      	blt.n	800eca4 <__ieee754_fmodf+0x34>
 800ecae:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 800ecb2:	d105      	bne.n	800ecc0 <__ieee754_fmodf+0x50>
 800ecb4:	4a30      	ldr	r2, [pc, #192]	; (800ed78 <__ieee754_fmodf+0x108>)
 800ecb6:	0fe3      	lsrs	r3, r4, #31
 800ecb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	e7f1      	b.n	800eca4 <__ieee754_fmodf+0x34>
 800ecc0:	4b2e      	ldr	r3, [pc, #184]	; (800ed7c <__ieee754_fmodf+0x10c>)
 800ecc2:	4299      	cmp	r1, r3
 800ecc4:	dc3e      	bgt.n	800ed44 <__ieee754_fmodf+0xd4>
 800ecc6:	020a      	lsls	r2, r1, #8
 800ecc8:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800eccc:	2a00      	cmp	r2, #0
 800ecce:	dc36      	bgt.n	800ed3e <__ieee754_fmodf+0xce>
 800ecd0:	429d      	cmp	r5, r3
 800ecd2:	dc3a      	bgt.n	800ed4a <__ieee754_fmodf+0xda>
 800ecd4:	022b      	lsls	r3, r5, #8
 800ecd6:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 800ecda:	005b      	lsls	r3, r3, #1
 800ecdc:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800ece0:	d5fb      	bpl.n	800ecda <__ieee754_fmodf+0x6a>
 800ece2:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800ece6:	bfbb      	ittet	lt
 800ece8:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 800ecec:	1a1b      	sublt	r3, r3, r0
 800ecee:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 800ecf2:	4099      	lsllt	r1, r3
 800ecf4:	bfa8      	it	ge
 800ecf6:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 800ecfa:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800ecfe:	bfb5      	itete	lt
 800ed00:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 800ed04:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 800ed08:	1a9b      	sublt	r3, r3, r2
 800ed0a:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 800ed0e:	bfb8      	it	lt
 800ed10:	409d      	lsllt	r5, r3
 800ed12:	1a80      	subs	r0, r0, r2
 800ed14:	1b4b      	subs	r3, r1, r5
 800ed16:	b9d8      	cbnz	r0, 800ed50 <__ieee754_fmodf+0xe0>
 800ed18:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800ed1c:	bf28      	it	cs
 800ed1e:	460b      	movcs	r3, r1
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d0c7      	beq.n	800ecb4 <__ieee754_fmodf+0x44>
 800ed24:	4915      	ldr	r1, [pc, #84]	; (800ed7c <__ieee754_fmodf+0x10c>)
 800ed26:	428b      	cmp	r3, r1
 800ed28:	dd1a      	ble.n	800ed60 <__ieee754_fmodf+0xf0>
 800ed2a:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800ed2e:	db1a      	blt.n	800ed66 <__ieee754_fmodf+0xf6>
 800ed30:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800ed34:	4323      	orrs	r3, r4
 800ed36:	327f      	adds	r2, #127	; 0x7f
 800ed38:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ed3c:	e7b2      	b.n	800eca4 <__ieee754_fmodf+0x34>
 800ed3e:	3801      	subs	r0, #1
 800ed40:	0052      	lsls	r2, r2, #1
 800ed42:	e7c3      	b.n	800eccc <__ieee754_fmodf+0x5c>
 800ed44:	15c8      	asrs	r0, r1, #23
 800ed46:	387f      	subs	r0, #127	; 0x7f
 800ed48:	e7c2      	b.n	800ecd0 <__ieee754_fmodf+0x60>
 800ed4a:	15ea      	asrs	r2, r5, #23
 800ed4c:	3a7f      	subs	r2, #127	; 0x7f
 800ed4e:	e7c8      	b.n	800ece2 <__ieee754_fmodf+0x72>
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	da02      	bge.n	800ed5a <__ieee754_fmodf+0xea>
 800ed54:	0049      	lsls	r1, r1, #1
 800ed56:	3801      	subs	r0, #1
 800ed58:	e7dc      	b.n	800ed14 <__ieee754_fmodf+0xa4>
 800ed5a:	d0ab      	beq.n	800ecb4 <__ieee754_fmodf+0x44>
 800ed5c:	0059      	lsls	r1, r3, #1
 800ed5e:	e7fa      	b.n	800ed56 <__ieee754_fmodf+0xe6>
 800ed60:	005b      	lsls	r3, r3, #1
 800ed62:	3a01      	subs	r2, #1
 800ed64:	e7df      	b.n	800ed26 <__ieee754_fmodf+0xb6>
 800ed66:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ed6a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ed6e:	3282      	adds	r2, #130	; 0x82
 800ed70:	4113      	asrs	r3, r2
 800ed72:	4323      	orrs	r3, r4
 800ed74:	e796      	b.n	800eca4 <__ieee754_fmodf+0x34>
 800ed76:	bf00      	nop
 800ed78:	0800fcc8 	.word	0x0800fcc8
 800ed7c:	007fffff 	.word	0x007fffff

0800ed80 <__ieee754_rem_pio2f>:
 800ed80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed82:	ee10 6a10 	vmov	r6, s0
 800ed86:	4b86      	ldr	r3, [pc, #536]	; (800efa0 <__ieee754_rem_pio2f+0x220>)
 800ed88:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800ed8c:	429c      	cmp	r4, r3
 800ed8e:	b087      	sub	sp, #28
 800ed90:	4605      	mov	r5, r0
 800ed92:	dc05      	bgt.n	800eda0 <__ieee754_rem_pio2f+0x20>
 800ed94:	2300      	movs	r3, #0
 800ed96:	ed85 0a00 	vstr	s0, [r5]
 800ed9a:	6043      	str	r3, [r0, #4]
 800ed9c:	2000      	movs	r0, #0
 800ed9e:	e020      	b.n	800ede2 <__ieee754_rem_pio2f+0x62>
 800eda0:	4b80      	ldr	r3, [pc, #512]	; (800efa4 <__ieee754_rem_pio2f+0x224>)
 800eda2:	429c      	cmp	r4, r3
 800eda4:	dc38      	bgt.n	800ee18 <__ieee754_rem_pio2f+0x98>
 800eda6:	2e00      	cmp	r6, #0
 800eda8:	f024 040f 	bic.w	r4, r4, #15
 800edac:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800efa8 <__ieee754_rem_pio2f+0x228>
 800edb0:	4b7e      	ldr	r3, [pc, #504]	; (800efac <__ieee754_rem_pio2f+0x22c>)
 800edb2:	dd18      	ble.n	800ede6 <__ieee754_rem_pio2f+0x66>
 800edb4:	429c      	cmp	r4, r3
 800edb6:	ee70 7a47 	vsub.f32	s15, s0, s14
 800edba:	bf09      	itett	eq
 800edbc:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800efb0 <__ieee754_rem_pio2f+0x230>
 800edc0:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800efb4 <__ieee754_rem_pio2f+0x234>
 800edc4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800edc8:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800efb8 <__ieee754_rem_pio2f+0x238>
 800edcc:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800edd0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800edd4:	edc0 6a00 	vstr	s13, [r0]
 800edd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eddc:	edc0 7a01 	vstr	s15, [r0, #4]
 800ede0:	2001      	movs	r0, #1
 800ede2:	b007      	add	sp, #28
 800ede4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ede6:	429c      	cmp	r4, r3
 800ede8:	ee70 7a07 	vadd.f32	s15, s0, s14
 800edec:	bf09      	itett	eq
 800edee:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800efb0 <__ieee754_rem_pio2f+0x230>
 800edf2:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800efb4 <__ieee754_rem_pio2f+0x234>
 800edf6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800edfa:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800efb8 <__ieee754_rem_pio2f+0x238>
 800edfe:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ee02:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ee06:	edc0 6a00 	vstr	s13, [r0]
 800ee0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ee0e:	edc0 7a01 	vstr	s15, [r0, #4]
 800ee12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee16:	e7e4      	b.n	800ede2 <__ieee754_rem_pio2f+0x62>
 800ee18:	4b68      	ldr	r3, [pc, #416]	; (800efbc <__ieee754_rem_pio2f+0x23c>)
 800ee1a:	429c      	cmp	r4, r3
 800ee1c:	dc71      	bgt.n	800ef02 <__ieee754_rem_pio2f+0x182>
 800ee1e:	f7ff fe9d 	bl	800eb5c <fabsf>
 800ee22:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800efc0 <__ieee754_rem_pio2f+0x240>
 800ee26:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ee2a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ee2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ee32:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800ee36:	ee17 0a90 	vmov	r0, s15
 800ee3a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800efa8 <__ieee754_rem_pio2f+0x228>
 800ee3e:	eeb1 7a46 	vneg.f32	s14, s12
 800ee42:	eea7 0a27 	vfma.f32	s0, s14, s15
 800ee46:	281f      	cmp	r0, #31
 800ee48:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800efb4 <__ieee754_rem_pio2f+0x234>
 800ee4c:	ee66 7a27 	vmul.f32	s15, s12, s15
 800ee50:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ee54:	ee16 3a90 	vmov	r3, s13
 800ee58:	dc1c      	bgt.n	800ee94 <__ieee754_rem_pio2f+0x114>
 800ee5a:	1e47      	subs	r7, r0, #1
 800ee5c:	4959      	ldr	r1, [pc, #356]	; (800efc4 <__ieee754_rem_pio2f+0x244>)
 800ee5e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800ee62:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800ee66:	428a      	cmp	r2, r1
 800ee68:	d014      	beq.n	800ee94 <__ieee754_rem_pio2f+0x114>
 800ee6a:	602b      	str	r3, [r5, #0]
 800ee6c:	ed95 7a00 	vldr	s14, [r5]
 800ee70:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ee74:	2e00      	cmp	r6, #0
 800ee76:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ee7a:	ed85 0a01 	vstr	s0, [r5, #4]
 800ee7e:	dab0      	bge.n	800ede2 <__ieee754_rem_pio2f+0x62>
 800ee80:	eeb1 7a47 	vneg.f32	s14, s14
 800ee84:	eeb1 0a40 	vneg.f32	s0, s0
 800ee88:	ed85 7a00 	vstr	s14, [r5]
 800ee8c:	ed85 0a01 	vstr	s0, [r5, #4]
 800ee90:	4240      	negs	r0, r0
 800ee92:	e7a6      	b.n	800ede2 <__ieee754_rem_pio2f+0x62>
 800ee94:	15e4      	asrs	r4, r4, #23
 800ee96:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ee9a:	1aa2      	subs	r2, r4, r2
 800ee9c:	2a08      	cmp	r2, #8
 800ee9e:	dde4      	ble.n	800ee6a <__ieee754_rem_pio2f+0xea>
 800eea0:	eddf 7a43 	vldr	s15, [pc, #268]	; 800efb0 <__ieee754_rem_pio2f+0x230>
 800eea4:	eef0 6a40 	vmov.f32	s13, s0
 800eea8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800eeac:	ee30 0a66 	vsub.f32	s0, s0, s13
 800eeb0:	eea7 0a27 	vfma.f32	s0, s14, s15
 800eeb4:	eddf 7a40 	vldr	s15, [pc, #256]	; 800efb8 <__ieee754_rem_pio2f+0x238>
 800eeb8:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800eebc:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800eec0:	eef0 7a40 	vmov.f32	s15, s0
 800eec4:	ee15 3a90 	vmov	r3, s11
 800eec8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800eecc:	1aa4      	subs	r4, r4, r2
 800eece:	2c19      	cmp	r4, #25
 800eed0:	dc04      	bgt.n	800eedc <__ieee754_rem_pio2f+0x15c>
 800eed2:	edc5 5a00 	vstr	s11, [r5]
 800eed6:	eeb0 0a66 	vmov.f32	s0, s13
 800eeda:	e7c7      	b.n	800ee6c <__ieee754_rem_pio2f+0xec>
 800eedc:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800efc8 <__ieee754_rem_pio2f+0x248>
 800eee0:	eeb0 0a66 	vmov.f32	s0, s13
 800eee4:	eea7 0a25 	vfma.f32	s0, s14, s11
 800eee8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800eeec:	eee7 7a25 	vfma.f32	s15, s14, s11
 800eef0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800efcc <__ieee754_rem_pio2f+0x24c>
 800eef4:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800eef8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800eefc:	ed85 7a00 	vstr	s14, [r5]
 800ef00:	e7b4      	b.n	800ee6c <__ieee754_rem_pio2f+0xec>
 800ef02:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800ef06:	db06      	blt.n	800ef16 <__ieee754_rem_pio2f+0x196>
 800ef08:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ef0c:	edc0 7a01 	vstr	s15, [r0, #4]
 800ef10:	edc0 7a00 	vstr	s15, [r0]
 800ef14:	e742      	b.n	800ed9c <__ieee754_rem_pio2f+0x1c>
 800ef16:	15e2      	asrs	r2, r4, #23
 800ef18:	3a86      	subs	r2, #134	; 0x86
 800ef1a:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800ef1e:	ee07 3a90 	vmov	s15, r3
 800ef22:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ef26:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800efd0 <__ieee754_rem_pio2f+0x250>
 800ef2a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ef2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ef32:	ed8d 7a03 	vstr	s14, [sp, #12]
 800ef36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ef3a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ef3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ef42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ef46:	ed8d 7a04 	vstr	s14, [sp, #16]
 800ef4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ef4e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ef52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef56:	edcd 7a05 	vstr	s15, [sp, #20]
 800ef5a:	d11e      	bne.n	800ef9a <__ieee754_rem_pio2f+0x21a>
 800ef5c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ef60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef64:	bf0c      	ite	eq
 800ef66:	2301      	moveq	r3, #1
 800ef68:	2302      	movne	r3, #2
 800ef6a:	491a      	ldr	r1, [pc, #104]	; (800efd4 <__ieee754_rem_pio2f+0x254>)
 800ef6c:	9101      	str	r1, [sp, #4]
 800ef6e:	2102      	movs	r1, #2
 800ef70:	9100      	str	r1, [sp, #0]
 800ef72:	a803      	add	r0, sp, #12
 800ef74:	4629      	mov	r1, r5
 800ef76:	f000 f82f 	bl	800efd8 <__kernel_rem_pio2f>
 800ef7a:	2e00      	cmp	r6, #0
 800ef7c:	f6bf af31 	bge.w	800ede2 <__ieee754_rem_pio2f+0x62>
 800ef80:	edd5 7a00 	vldr	s15, [r5]
 800ef84:	eef1 7a67 	vneg.f32	s15, s15
 800ef88:	edc5 7a00 	vstr	s15, [r5]
 800ef8c:	edd5 7a01 	vldr	s15, [r5, #4]
 800ef90:	eef1 7a67 	vneg.f32	s15, s15
 800ef94:	edc5 7a01 	vstr	s15, [r5, #4]
 800ef98:	e77a      	b.n	800ee90 <__ieee754_rem_pio2f+0x110>
 800ef9a:	2303      	movs	r3, #3
 800ef9c:	e7e5      	b.n	800ef6a <__ieee754_rem_pio2f+0x1ea>
 800ef9e:	bf00      	nop
 800efa0:	3f490fd8 	.word	0x3f490fd8
 800efa4:	4016cbe3 	.word	0x4016cbe3
 800efa8:	3fc90f80 	.word	0x3fc90f80
 800efac:	3fc90fd0 	.word	0x3fc90fd0
 800efb0:	37354400 	.word	0x37354400
 800efb4:	37354443 	.word	0x37354443
 800efb8:	2e85a308 	.word	0x2e85a308
 800efbc:	43490f80 	.word	0x43490f80
 800efc0:	3f22f984 	.word	0x3f22f984
 800efc4:	0800fcd0 	.word	0x0800fcd0
 800efc8:	2e85a300 	.word	0x2e85a300
 800efcc:	248d3132 	.word	0x248d3132
 800efd0:	43800000 	.word	0x43800000
 800efd4:	0800fd50 	.word	0x0800fd50

0800efd8 <__kernel_rem_pio2f>:
 800efd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efdc:	ed2d 8b04 	vpush	{d8-d9}
 800efe0:	b0d7      	sub	sp, #348	; 0x15c
 800efe2:	469b      	mov	fp, r3
 800efe4:	460e      	mov	r6, r1
 800efe6:	4bbe      	ldr	r3, [pc, #760]	; (800f2e0 <__kernel_rem_pio2f+0x308>)
 800efe8:	9964      	ldr	r1, [sp, #400]	; 0x190
 800efea:	9002      	str	r0, [sp, #8]
 800efec:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800eff0:	9865      	ldr	r0, [sp, #404]	; 0x194
 800eff2:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800f2f0 <__kernel_rem_pio2f+0x318>
 800eff6:	1ed1      	subs	r1, r2, #3
 800eff8:	2308      	movs	r3, #8
 800effa:	fb91 f1f3 	sdiv	r1, r1, r3
 800effe:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800f002:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 800f006:	1c4c      	adds	r4, r1, #1
 800f008:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800f00c:	eba1 050a 	sub.w	r5, r1, sl
 800f010:	aa1a      	add	r2, sp, #104	; 0x68
 800f012:	eb09 070a 	add.w	r7, r9, sl
 800f016:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800f01a:	4696      	mov	lr, r2
 800f01c:	2300      	movs	r3, #0
 800f01e:	42bb      	cmp	r3, r7
 800f020:	dd0f      	ble.n	800f042 <__kernel_rem_pio2f+0x6a>
 800f022:	af42      	add	r7, sp, #264	; 0x108
 800f024:	2200      	movs	r2, #0
 800f026:	454a      	cmp	r2, r9
 800f028:	dc27      	bgt.n	800f07a <__kernel_rem_pio2f+0xa2>
 800f02a:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800f02e:	eb0b 0302 	add.w	r3, fp, r2
 800f032:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800f036:	9d02      	ldr	r5, [sp, #8]
 800f038:	eddf 7aad 	vldr	s15, [pc, #692]	; 800f2f0 <__kernel_rem_pio2f+0x318>
 800f03c:	f04f 0c00 	mov.w	ip, #0
 800f040:	e015      	b.n	800f06e <__kernel_rem_pio2f+0x96>
 800f042:	42dd      	cmn	r5, r3
 800f044:	bf5d      	ittte	pl
 800f046:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800f04a:	ee07 2a90 	vmovpl	s15, r2
 800f04e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800f052:	eef0 7a47 	vmovmi.f32	s15, s14
 800f056:	ecee 7a01 	vstmia	lr!, {s15}
 800f05a:	3301      	adds	r3, #1
 800f05c:	e7df      	b.n	800f01e <__kernel_rem_pio2f+0x46>
 800f05e:	ecf5 6a01 	vldmia	r5!, {s13}
 800f062:	ed33 7a01 	vldmdb	r3!, {s14}
 800f066:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f06a:	f10c 0c01 	add.w	ip, ip, #1
 800f06e:	45d4      	cmp	ip, sl
 800f070:	ddf5      	ble.n	800f05e <__kernel_rem_pio2f+0x86>
 800f072:	ece7 7a01 	vstmia	r7!, {s15}
 800f076:	3201      	adds	r2, #1
 800f078:	e7d5      	b.n	800f026 <__kernel_rem_pio2f+0x4e>
 800f07a:	ab06      	add	r3, sp, #24
 800f07c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800f080:	9304      	str	r3, [sp, #16]
 800f082:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800f2ec <__kernel_rem_pio2f+0x314>
 800f086:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800f2e8 <__kernel_rem_pio2f+0x310>
 800f08a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800f08e:	9303      	str	r3, [sp, #12]
 800f090:	464d      	mov	r5, r9
 800f092:	ab56      	add	r3, sp, #344	; 0x158
 800f094:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800f098:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800f09c:	3f01      	subs	r7, #1
 800f09e:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800f0a2:	00bf      	lsls	r7, r7, #2
 800f0a4:	ab56      	add	r3, sp, #344	; 0x158
 800f0a6:	19da      	adds	r2, r3, r7
 800f0a8:	3a4c      	subs	r2, #76	; 0x4c
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	1ae9      	subs	r1, r5, r3
 800f0ae:	2900      	cmp	r1, #0
 800f0b0:	dc4c      	bgt.n	800f14c <__kernel_rem_pio2f+0x174>
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	f000 fb3a 	bl	800f72c <scalbnf>
 800f0b8:	eeb0 8a40 	vmov.f32	s16, s0
 800f0bc:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800f0c0:	ee28 0a00 	vmul.f32	s0, s16, s0
 800f0c4:	f000 faf0 	bl	800f6a8 <floorf>
 800f0c8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800f0cc:	eea0 8a67 	vfms.f32	s16, s0, s15
 800f0d0:	2c00      	cmp	r4, #0
 800f0d2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800f0d6:	edcd 7a01 	vstr	s15, [sp, #4]
 800f0da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f0de:	ee38 8a67 	vsub.f32	s16, s16, s15
 800f0e2:	dd48      	ble.n	800f176 <__kernel_rem_pio2f+0x19e>
 800f0e4:	1e69      	subs	r1, r5, #1
 800f0e6:	ab06      	add	r3, sp, #24
 800f0e8:	f1c4 0008 	rsb	r0, r4, #8
 800f0ec:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800f0f0:	9a01      	ldr	r2, [sp, #4]
 800f0f2:	fa4c f300 	asr.w	r3, ip, r0
 800f0f6:	441a      	add	r2, r3
 800f0f8:	4083      	lsls	r3, r0
 800f0fa:	9201      	str	r2, [sp, #4]
 800f0fc:	ebac 0203 	sub.w	r2, ip, r3
 800f100:	ab06      	add	r3, sp, #24
 800f102:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800f106:	f1c4 0307 	rsb	r3, r4, #7
 800f10a:	fa42 f803 	asr.w	r8, r2, r3
 800f10e:	f1b8 0f00 	cmp.w	r8, #0
 800f112:	dd41      	ble.n	800f198 <__kernel_rem_pio2f+0x1c0>
 800f114:	9b01      	ldr	r3, [sp, #4]
 800f116:	2000      	movs	r0, #0
 800f118:	3301      	adds	r3, #1
 800f11a:	9301      	str	r3, [sp, #4]
 800f11c:	4601      	mov	r1, r0
 800f11e:	4285      	cmp	r5, r0
 800f120:	dc6d      	bgt.n	800f1fe <__kernel_rem_pio2f+0x226>
 800f122:	2c00      	cmp	r4, #0
 800f124:	dd04      	ble.n	800f130 <__kernel_rem_pio2f+0x158>
 800f126:	2c01      	cmp	r4, #1
 800f128:	d07e      	beq.n	800f228 <__kernel_rem_pio2f+0x250>
 800f12a:	2c02      	cmp	r4, #2
 800f12c:	f000 8086 	beq.w	800f23c <__kernel_rem_pio2f+0x264>
 800f130:	f1b8 0f02 	cmp.w	r8, #2
 800f134:	d130      	bne.n	800f198 <__kernel_rem_pio2f+0x1c0>
 800f136:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f13a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800f13e:	b359      	cbz	r1, 800f198 <__kernel_rem_pio2f+0x1c0>
 800f140:	4620      	mov	r0, r4
 800f142:	f000 faf3 	bl	800f72c <scalbnf>
 800f146:	ee38 8a40 	vsub.f32	s16, s16, s0
 800f14a:	e025      	b.n	800f198 <__kernel_rem_pio2f+0x1c0>
 800f14c:	ee60 7a28 	vmul.f32	s15, s0, s17
 800f150:	a806      	add	r0, sp, #24
 800f152:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f15a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800f15e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f162:	ee10 1a10 	vmov	r1, s0
 800f166:	ed32 0a01 	vldmdb	r2!, {s0}
 800f16a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800f16e:	ee37 0a80 	vadd.f32	s0, s15, s0
 800f172:	3301      	adds	r3, #1
 800f174:	e79a      	b.n	800f0ac <__kernel_rem_pio2f+0xd4>
 800f176:	d106      	bne.n	800f186 <__kernel_rem_pio2f+0x1ae>
 800f178:	1e6b      	subs	r3, r5, #1
 800f17a:	aa06      	add	r2, sp, #24
 800f17c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f180:	ea4f 2822 	mov.w	r8, r2, asr #8
 800f184:	e7c3      	b.n	800f10e <__kernel_rem_pio2f+0x136>
 800f186:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f18a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f18e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f192:	da31      	bge.n	800f1f8 <__kernel_rem_pio2f+0x220>
 800f194:	f04f 0800 	mov.w	r8, #0
 800f198:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f19c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1a0:	f040 80a8 	bne.w	800f2f4 <__kernel_rem_pio2f+0x31c>
 800f1a4:	1e6b      	subs	r3, r5, #1
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	4548      	cmp	r0, r9
 800f1ac:	da4d      	bge.n	800f24a <__kernel_rem_pio2f+0x272>
 800f1ae:	2a00      	cmp	r2, #0
 800f1b0:	f000 8087 	beq.w	800f2c2 <__kernel_rem_pio2f+0x2ea>
 800f1b4:	aa06      	add	r2, sp, #24
 800f1b6:	3c08      	subs	r4, #8
 800f1b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f1bc:	2900      	cmp	r1, #0
 800f1be:	f000 808d 	beq.w	800f2dc <__kernel_rem_pio2f+0x304>
 800f1c2:	4620      	mov	r0, r4
 800f1c4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f1c8:	9302      	str	r3, [sp, #8]
 800f1ca:	f000 faaf 	bl	800f72c <scalbnf>
 800f1ce:	9b02      	ldr	r3, [sp, #8]
 800f1d0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800f2ec <__kernel_rem_pio2f+0x314>
 800f1d4:	0099      	lsls	r1, r3, #2
 800f1d6:	aa42      	add	r2, sp, #264	; 0x108
 800f1d8:	1850      	adds	r0, r2, r1
 800f1da:	1d05      	adds	r5, r0, #4
 800f1dc:	461c      	mov	r4, r3
 800f1de:	2c00      	cmp	r4, #0
 800f1e0:	f280 80b8 	bge.w	800f354 <__kernel_rem_pio2f+0x37c>
 800f1e4:	2500      	movs	r5, #0
 800f1e6:	1b5c      	subs	r4, r3, r5
 800f1e8:	2c00      	cmp	r4, #0
 800f1ea:	f2c0 80d8 	blt.w	800f39e <__kernel_rem_pio2f+0x3c6>
 800f1ee:	4f3d      	ldr	r7, [pc, #244]	; (800f2e4 <__kernel_rem_pio2f+0x30c>)
 800f1f0:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800f2f0 <__kernel_rem_pio2f+0x318>
 800f1f4:	2400      	movs	r4, #0
 800f1f6:	e0c6      	b.n	800f386 <__kernel_rem_pio2f+0x3ae>
 800f1f8:	f04f 0802 	mov.w	r8, #2
 800f1fc:	e78a      	b.n	800f114 <__kernel_rem_pio2f+0x13c>
 800f1fe:	ab06      	add	r3, sp, #24
 800f200:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f204:	b949      	cbnz	r1, 800f21a <__kernel_rem_pio2f+0x242>
 800f206:	b12b      	cbz	r3, 800f214 <__kernel_rem_pio2f+0x23c>
 800f208:	aa06      	add	r2, sp, #24
 800f20a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800f20e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800f212:	2301      	movs	r3, #1
 800f214:	3001      	adds	r0, #1
 800f216:	4619      	mov	r1, r3
 800f218:	e781      	b.n	800f11e <__kernel_rem_pio2f+0x146>
 800f21a:	aa06      	add	r2, sp, #24
 800f21c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800f220:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800f224:	460b      	mov	r3, r1
 800f226:	e7f5      	b.n	800f214 <__kernel_rem_pio2f+0x23c>
 800f228:	1e68      	subs	r0, r5, #1
 800f22a:	ab06      	add	r3, sp, #24
 800f22c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f234:	aa06      	add	r2, sp, #24
 800f236:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800f23a:	e779      	b.n	800f130 <__kernel_rem_pio2f+0x158>
 800f23c:	1e68      	subs	r0, r5, #1
 800f23e:	ab06      	add	r3, sp, #24
 800f240:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f248:	e7f4      	b.n	800f234 <__kernel_rem_pio2f+0x25c>
 800f24a:	a906      	add	r1, sp, #24
 800f24c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800f250:	3801      	subs	r0, #1
 800f252:	430a      	orrs	r2, r1
 800f254:	e7a9      	b.n	800f1aa <__kernel_rem_pio2f+0x1d2>
 800f256:	f10c 0c01 	add.w	ip, ip, #1
 800f25a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f25e:	2a00      	cmp	r2, #0
 800f260:	d0f9      	beq.n	800f256 <__kernel_rem_pio2f+0x27e>
 800f262:	eb0b 0305 	add.w	r3, fp, r5
 800f266:	aa1a      	add	r2, sp, #104	; 0x68
 800f268:	009b      	lsls	r3, r3, #2
 800f26a:	1898      	adds	r0, r3, r2
 800f26c:	3004      	adds	r0, #4
 800f26e:	1c69      	adds	r1, r5, #1
 800f270:	3704      	adds	r7, #4
 800f272:	2200      	movs	r2, #0
 800f274:	4465      	add	r5, ip
 800f276:	9005      	str	r0, [sp, #20]
 800f278:	428d      	cmp	r5, r1
 800f27a:	f6ff af0a 	blt.w	800f092 <__kernel_rem_pio2f+0xba>
 800f27e:	a81a      	add	r0, sp, #104	; 0x68
 800f280:	eb02 0c03 	add.w	ip, r2, r3
 800f284:	4484      	add	ip, r0
 800f286:	9803      	ldr	r0, [sp, #12]
 800f288:	f8dd e008 	ldr.w	lr, [sp, #8]
 800f28c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800f290:	9001      	str	r0, [sp, #4]
 800f292:	ee07 0a90 	vmov	s15, r0
 800f296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f29a:	9805      	ldr	r0, [sp, #20]
 800f29c:	edcc 7a00 	vstr	s15, [ip]
 800f2a0:	eddf 7a13 	vldr	s15, [pc, #76]	; 800f2f0 <__kernel_rem_pio2f+0x318>
 800f2a4:	eb00 0802 	add.w	r8, r0, r2
 800f2a8:	f04f 0c00 	mov.w	ip, #0
 800f2ac:	45d4      	cmp	ip, sl
 800f2ae:	dd0c      	ble.n	800f2ca <__kernel_rem_pio2f+0x2f2>
 800f2b0:	eb02 0c07 	add.w	ip, r2, r7
 800f2b4:	a842      	add	r0, sp, #264	; 0x108
 800f2b6:	4484      	add	ip, r0
 800f2b8:	edcc 7a01 	vstr	s15, [ip, #4]
 800f2bc:	3101      	adds	r1, #1
 800f2be:	3204      	adds	r2, #4
 800f2c0:	e7da      	b.n	800f278 <__kernel_rem_pio2f+0x2a0>
 800f2c2:	9b04      	ldr	r3, [sp, #16]
 800f2c4:	f04f 0c01 	mov.w	ip, #1
 800f2c8:	e7c7      	b.n	800f25a <__kernel_rem_pio2f+0x282>
 800f2ca:	ecfe 6a01 	vldmia	lr!, {s13}
 800f2ce:	ed38 7a01 	vldmdb	r8!, {s14}
 800f2d2:	f10c 0c01 	add.w	ip, ip, #1
 800f2d6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f2da:	e7e7      	b.n	800f2ac <__kernel_rem_pio2f+0x2d4>
 800f2dc:	3b01      	subs	r3, #1
 800f2de:	e769      	b.n	800f1b4 <__kernel_rem_pio2f+0x1dc>
 800f2e0:	08010094 	.word	0x08010094
 800f2e4:	08010068 	.word	0x08010068
 800f2e8:	43800000 	.word	0x43800000
 800f2ec:	3b800000 	.word	0x3b800000
 800f2f0:	00000000 	.word	0x00000000
 800f2f4:	4260      	negs	r0, r4
 800f2f6:	eeb0 0a48 	vmov.f32	s0, s16
 800f2fa:	f000 fa17 	bl	800f72c <scalbnf>
 800f2fe:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800f2e8 <__kernel_rem_pio2f+0x310>
 800f302:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800f306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f30a:	db1a      	blt.n	800f342 <__kernel_rem_pio2f+0x36a>
 800f30c:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800f2ec <__kernel_rem_pio2f+0x314>
 800f310:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f314:	aa06      	add	r2, sp, #24
 800f316:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f31a:	a906      	add	r1, sp, #24
 800f31c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f320:	3408      	adds	r4, #8
 800f322:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800f326:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f32a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f32e:	ee10 3a10 	vmov	r3, s0
 800f332:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800f336:	1c6b      	adds	r3, r5, #1
 800f338:	ee17 2a90 	vmov	r2, s15
 800f33c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f340:	e73f      	b.n	800f1c2 <__kernel_rem_pio2f+0x1ea>
 800f342:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f346:	aa06      	add	r2, sp, #24
 800f348:	ee10 3a10 	vmov	r3, s0
 800f34c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800f350:	462b      	mov	r3, r5
 800f352:	e736      	b.n	800f1c2 <__kernel_rem_pio2f+0x1ea>
 800f354:	aa06      	add	r2, sp, #24
 800f356:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800f35a:	9202      	str	r2, [sp, #8]
 800f35c:	ee07 2a90 	vmov	s15, r2
 800f360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f364:	3c01      	subs	r4, #1
 800f366:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f36a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800f36e:	ed65 7a01 	vstmdb	r5!, {s15}
 800f372:	e734      	b.n	800f1de <__kernel_rem_pio2f+0x206>
 800f374:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800f378:	ecf7 6a01 	vldmia	r7!, {s13}
 800f37c:	ed9c 7a00 	vldr	s14, [ip]
 800f380:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f384:	3401      	adds	r4, #1
 800f386:	454c      	cmp	r4, r9
 800f388:	dc01      	bgt.n	800f38e <__kernel_rem_pio2f+0x3b6>
 800f38a:	42a5      	cmp	r5, r4
 800f38c:	daf2      	bge.n	800f374 <__kernel_rem_pio2f+0x39c>
 800f38e:	aa56      	add	r2, sp, #344	; 0x158
 800f390:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800f394:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800f398:	3501      	adds	r5, #1
 800f39a:	3804      	subs	r0, #4
 800f39c:	e723      	b.n	800f1e6 <__kernel_rem_pio2f+0x20e>
 800f39e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800f3a0:	2a03      	cmp	r2, #3
 800f3a2:	d84d      	bhi.n	800f440 <__kernel_rem_pio2f+0x468>
 800f3a4:	e8df f002 	tbb	[pc, r2]
 800f3a8:	021f1f3e 	.word	0x021f1f3e
 800f3ac:	aa56      	add	r2, sp, #344	; 0x158
 800f3ae:	4411      	add	r1, r2
 800f3b0:	399c      	subs	r1, #156	; 0x9c
 800f3b2:	4608      	mov	r0, r1
 800f3b4:	461c      	mov	r4, r3
 800f3b6:	2c00      	cmp	r4, #0
 800f3b8:	dc5f      	bgt.n	800f47a <__kernel_rem_pio2f+0x4a2>
 800f3ba:	4608      	mov	r0, r1
 800f3bc:	461c      	mov	r4, r3
 800f3be:	2c01      	cmp	r4, #1
 800f3c0:	dc6b      	bgt.n	800f49a <__kernel_rem_pio2f+0x4c2>
 800f3c2:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800f2f0 <__kernel_rem_pio2f+0x318>
 800f3c6:	2b01      	cmp	r3, #1
 800f3c8:	dc77      	bgt.n	800f4ba <__kernel_rem_pio2f+0x4e2>
 800f3ca:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800f3ce:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800f3d2:	f1b8 0f00 	cmp.w	r8, #0
 800f3d6:	d176      	bne.n	800f4c6 <__kernel_rem_pio2f+0x4ee>
 800f3d8:	edc6 6a00 	vstr	s13, [r6]
 800f3dc:	ed86 7a01 	vstr	s14, [r6, #4]
 800f3e0:	edc6 7a02 	vstr	s15, [r6, #8]
 800f3e4:	e02c      	b.n	800f440 <__kernel_rem_pio2f+0x468>
 800f3e6:	aa56      	add	r2, sp, #344	; 0x158
 800f3e8:	4411      	add	r1, r2
 800f3ea:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800f2f0 <__kernel_rem_pio2f+0x318>
 800f3ee:	399c      	subs	r1, #156	; 0x9c
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	2800      	cmp	r0, #0
 800f3f4:	da32      	bge.n	800f45c <__kernel_rem_pio2f+0x484>
 800f3f6:	f1b8 0f00 	cmp.w	r8, #0
 800f3fa:	d035      	beq.n	800f468 <__kernel_rem_pio2f+0x490>
 800f3fc:	eef1 7a47 	vneg.f32	s15, s14
 800f400:	edc6 7a00 	vstr	s15, [r6]
 800f404:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800f408:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f40c:	a82f      	add	r0, sp, #188	; 0xbc
 800f40e:	2101      	movs	r1, #1
 800f410:	428b      	cmp	r3, r1
 800f412:	da2c      	bge.n	800f46e <__kernel_rem_pio2f+0x496>
 800f414:	f1b8 0f00 	cmp.w	r8, #0
 800f418:	d001      	beq.n	800f41e <__kernel_rem_pio2f+0x446>
 800f41a:	eef1 7a67 	vneg.f32	s15, s15
 800f41e:	edc6 7a01 	vstr	s15, [r6, #4]
 800f422:	e00d      	b.n	800f440 <__kernel_rem_pio2f+0x468>
 800f424:	aa56      	add	r2, sp, #344	; 0x158
 800f426:	4411      	add	r1, r2
 800f428:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800f2f0 <__kernel_rem_pio2f+0x318>
 800f42c:	399c      	subs	r1, #156	; 0x9c
 800f42e:	2b00      	cmp	r3, #0
 800f430:	da0e      	bge.n	800f450 <__kernel_rem_pio2f+0x478>
 800f432:	f1b8 0f00 	cmp.w	r8, #0
 800f436:	d001      	beq.n	800f43c <__kernel_rem_pio2f+0x464>
 800f438:	eef1 7a67 	vneg.f32	s15, s15
 800f43c:	edc6 7a00 	vstr	s15, [r6]
 800f440:	9b01      	ldr	r3, [sp, #4]
 800f442:	f003 0007 	and.w	r0, r3, #7
 800f446:	b057      	add	sp, #348	; 0x15c
 800f448:	ecbd 8b04 	vpop	{d8-d9}
 800f44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f450:	ed31 7a01 	vldmdb	r1!, {s14}
 800f454:	3b01      	subs	r3, #1
 800f456:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f45a:	e7e8      	b.n	800f42e <__kernel_rem_pio2f+0x456>
 800f45c:	ed71 7a01 	vldmdb	r1!, {s15}
 800f460:	3801      	subs	r0, #1
 800f462:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f466:	e7c4      	b.n	800f3f2 <__kernel_rem_pio2f+0x41a>
 800f468:	eef0 7a47 	vmov.f32	s15, s14
 800f46c:	e7c8      	b.n	800f400 <__kernel_rem_pio2f+0x428>
 800f46e:	ecb0 7a01 	vldmia	r0!, {s14}
 800f472:	3101      	adds	r1, #1
 800f474:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f478:	e7ca      	b.n	800f410 <__kernel_rem_pio2f+0x438>
 800f47a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800f47e:	ed70 6a01 	vldmdb	r0!, {s13}
 800f482:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f486:	3c01      	subs	r4, #1
 800f488:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f48c:	ed00 7a01 	vstr	s14, [r0, #-4]
 800f490:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f494:	edc0 7a00 	vstr	s15, [r0]
 800f498:	e78d      	b.n	800f3b6 <__kernel_rem_pio2f+0x3de>
 800f49a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800f49e:	ed70 6a01 	vldmdb	r0!, {s13}
 800f4a2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f4a6:	3c01      	subs	r4, #1
 800f4a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f4ac:	ed00 7a01 	vstr	s14, [r0, #-4]
 800f4b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f4b4:	edc0 7a00 	vstr	s15, [r0]
 800f4b8:	e781      	b.n	800f3be <__kernel_rem_pio2f+0x3e6>
 800f4ba:	ed31 7a01 	vldmdb	r1!, {s14}
 800f4be:	3b01      	subs	r3, #1
 800f4c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f4c4:	e77f      	b.n	800f3c6 <__kernel_rem_pio2f+0x3ee>
 800f4c6:	eef1 6a66 	vneg.f32	s13, s13
 800f4ca:	eeb1 7a47 	vneg.f32	s14, s14
 800f4ce:	edc6 6a00 	vstr	s13, [r6]
 800f4d2:	ed86 7a01 	vstr	s14, [r6, #4]
 800f4d6:	eef1 7a67 	vneg.f32	s15, s15
 800f4da:	e781      	b.n	800f3e0 <__kernel_rem_pio2f+0x408>

0800f4dc <__kernel_tanf>:
 800f4dc:	b508      	push	{r3, lr}
 800f4de:	ee10 3a10 	vmov	r3, s0
 800f4e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f4e6:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800f4ea:	eef0 7a40 	vmov.f32	s15, s0
 800f4ee:	da17      	bge.n	800f520 <__kernel_tanf+0x44>
 800f4f0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800f4f4:	ee17 1a10 	vmov	r1, s14
 800f4f8:	bb41      	cbnz	r1, 800f54c <__kernel_tanf+0x70>
 800f4fa:	1c43      	adds	r3, r0, #1
 800f4fc:	4313      	orrs	r3, r2
 800f4fe:	d108      	bne.n	800f512 <__kernel_tanf+0x36>
 800f500:	f7ff fb2c 	bl	800eb5c <fabsf>
 800f504:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f508:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f50c:	eeb0 0a67 	vmov.f32	s0, s15
 800f510:	bd08      	pop	{r3, pc}
 800f512:	2801      	cmp	r0, #1
 800f514:	d0fa      	beq.n	800f50c <__kernel_tanf+0x30>
 800f516:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f51a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f51e:	e7f5      	b.n	800f50c <__kernel_tanf+0x30>
 800f520:	494e      	ldr	r1, [pc, #312]	; (800f65c <__kernel_tanf+0x180>)
 800f522:	428a      	cmp	r2, r1
 800f524:	dd12      	ble.n	800f54c <__kernel_tanf+0x70>
 800f526:	2b00      	cmp	r3, #0
 800f528:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800f660 <__kernel_tanf+0x184>
 800f52c:	bfb8      	it	lt
 800f52e:	eef1 7a40 	vneglt.f32	s15, s0
 800f532:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f536:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800f664 <__kernel_tanf+0x188>
 800f53a:	bfb8      	it	lt
 800f53c:	eef1 0a60 	vneglt.f32	s1, s1
 800f540:	ee77 0a60 	vsub.f32	s1, s14, s1
 800f544:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800f548:	eddf 0a47 	vldr	s1, [pc, #284]	; 800f668 <__kernel_tanf+0x18c>
 800f54c:	ed9f 6a47 	vldr	s12, [pc, #284]	; 800f66c <__kernel_tanf+0x190>
 800f550:	eddf 5a47 	vldr	s11, [pc, #284]	; 800f670 <__kernel_tanf+0x194>
 800f554:	ed9f 5a47 	vldr	s10, [pc, #284]	; 800f674 <__kernel_tanf+0x198>
 800f558:	4940      	ldr	r1, [pc, #256]	; (800f65c <__kernel_tanf+0x180>)
 800f55a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800f55e:	428a      	cmp	r2, r1
 800f560:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800f564:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800f568:	eee7 5a06 	vfma.f32	s11, s14, s12
 800f56c:	ed9f 6a42 	vldr	s12, [pc, #264]	; 800f678 <__kernel_tanf+0x19c>
 800f570:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f574:	eddf 5a41 	vldr	s11, [pc, #260]	; 800f67c <__kernel_tanf+0x1a0>
 800f578:	eee6 5a07 	vfma.f32	s11, s12, s14
 800f57c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800f680 <__kernel_tanf+0x1a4>
 800f580:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f584:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800f684 <__kernel_tanf+0x1a8>
 800f588:	eee6 5a07 	vfma.f32	s11, s12, s14
 800f58c:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800f688 <__kernel_tanf+0x1ac>
 800f590:	eea7 6a05 	vfma.f32	s12, s14, s10
 800f594:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800f68c <__kernel_tanf+0x1b0>
 800f598:	eea6 5a07 	vfma.f32	s10, s12, s14
 800f59c:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 800f690 <__kernel_tanf+0x1b4>
 800f5a0:	eea5 6a07 	vfma.f32	s12, s10, s14
 800f5a4:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 800f694 <__kernel_tanf+0x1b8>
 800f5a8:	eea6 5a07 	vfma.f32	s10, s12, s14
 800f5ac:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 800f698 <__kernel_tanf+0x1bc>
 800f5b0:	eea5 6a07 	vfma.f32	s12, s10, s14
 800f5b4:	eeb0 7a46 	vmov.f32	s14, s12
 800f5b8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f5bc:	eeb0 6a60 	vmov.f32	s12, s1
 800f5c0:	eea7 6a24 	vfma.f32	s12, s14, s9
 800f5c4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800f69c <__kernel_tanf+0x1c0>
 800f5c8:	eee6 0a26 	vfma.f32	s1, s12, s13
 800f5cc:	eee4 0a87 	vfma.f32	s1, s9, s14
 800f5d0:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800f5d4:	dd1d      	ble.n	800f612 <__kernel_tanf+0x136>
 800f5d6:	ee07 0a10 	vmov	s14, r0
 800f5da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f5de:	ee66 5aa6 	vmul.f32	s11, s13, s13
 800f5e2:	ee76 6a87 	vadd.f32	s13, s13, s14
 800f5e6:	179b      	asrs	r3, r3, #30
 800f5e8:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 800f5ec:	f003 0302 	and.w	r3, r3, #2
 800f5f0:	f1c3 0301 	rsb	r3, r3, #1
 800f5f4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f5f8:	ee76 0a60 	vsub.f32	s1, s12, s1
 800f5fc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f600:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800f604:	ee07 3a90 	vmov	s15, r3
 800f608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f60c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f610:	e77c      	b.n	800f50c <__kernel_tanf+0x30>
 800f612:	2801      	cmp	r0, #1
 800f614:	d01f      	beq.n	800f656 <__kernel_tanf+0x17a>
 800f616:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f61a:	eec7 5a26 	vdiv.f32	s11, s14, s13
 800f61e:	4b20      	ldr	r3, [pc, #128]	; (800f6a0 <__kernel_tanf+0x1c4>)
 800f620:	ee16 2a90 	vmov	r2, s13
 800f624:	401a      	ands	r2, r3
 800f626:	ee06 2a10 	vmov	s12, r2
 800f62a:	ee15 2a90 	vmov	r2, s11
 800f62e:	4013      	ands	r3, r2
 800f630:	ee07 3a10 	vmov	s14, r3
 800f634:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f638:	eee6 6a07 	vfma.f32	s13, s12, s14
 800f63c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800f640:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800f644:	eef0 7a66 	vmov.f32	s15, s13
 800f648:	eee7 7a20 	vfma.f32	s15, s14, s1
 800f64c:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800f650:	eef0 7a47 	vmov.f32	s15, s14
 800f654:	e75a      	b.n	800f50c <__kernel_tanf+0x30>
 800f656:	eef0 7a66 	vmov.f32	s15, s13
 800f65a:	e757      	b.n	800f50c <__kernel_tanf+0x30>
 800f65c:	3f2ca13f 	.word	0x3f2ca13f
 800f660:	3f490fda 	.word	0x3f490fda
 800f664:	33222168 	.word	0x33222168
 800f668:	00000000 	.word	0x00000000
 800f66c:	37d95384 	.word	0x37d95384
 800f670:	3895c07a 	.word	0x3895c07a
 800f674:	b79bae5f 	.word	0xb79bae5f
 800f678:	398137b9 	.word	0x398137b9
 800f67c:	3abede48 	.word	0x3abede48
 800f680:	3c11371f 	.word	0x3c11371f
 800f684:	3d5d0dd1 	.word	0x3d5d0dd1
 800f688:	38a3f445 	.word	0x38a3f445
 800f68c:	3a1a26c8 	.word	0x3a1a26c8
 800f690:	3b6b6916 	.word	0x3b6b6916
 800f694:	3cb327a4 	.word	0x3cb327a4
 800f698:	3e088889 	.word	0x3e088889
 800f69c:	3eaaaaab 	.word	0x3eaaaaab
 800f6a0:	fffff000 	.word	0xfffff000

0800f6a4 <matherr>:
 800f6a4:	2000      	movs	r0, #0
 800f6a6:	4770      	bx	lr

0800f6a8 <floorf>:
 800f6a8:	ee10 3a10 	vmov	r3, s0
 800f6ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f6b0:	0dca      	lsrs	r2, r1, #23
 800f6b2:	3a7f      	subs	r2, #127	; 0x7f
 800f6b4:	2a16      	cmp	r2, #22
 800f6b6:	dc2a      	bgt.n	800f70e <floorf+0x66>
 800f6b8:	2a00      	cmp	r2, #0
 800f6ba:	da11      	bge.n	800f6e0 <floorf+0x38>
 800f6bc:	eddf 7a18 	vldr	s15, [pc, #96]	; 800f720 <floorf+0x78>
 800f6c0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f6c4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6cc:	dd05      	ble.n	800f6da <floorf+0x32>
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	da23      	bge.n	800f71a <floorf+0x72>
 800f6d2:	4a14      	ldr	r2, [pc, #80]	; (800f724 <floorf+0x7c>)
 800f6d4:	2900      	cmp	r1, #0
 800f6d6:	bf18      	it	ne
 800f6d8:	4613      	movne	r3, r2
 800f6da:	ee00 3a10 	vmov	s0, r3
 800f6de:	4770      	bx	lr
 800f6e0:	4911      	ldr	r1, [pc, #68]	; (800f728 <floorf+0x80>)
 800f6e2:	4111      	asrs	r1, r2
 800f6e4:	420b      	tst	r3, r1
 800f6e6:	d0fa      	beq.n	800f6de <floorf+0x36>
 800f6e8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800f720 <floorf+0x78>
 800f6ec:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f6f0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6f8:	ddef      	ble.n	800f6da <floorf+0x32>
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	bfbe      	ittt	lt
 800f6fe:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800f702:	fa40 f202 	asrlt.w	r2, r0, r2
 800f706:	189b      	addlt	r3, r3, r2
 800f708:	ea23 0301 	bic.w	r3, r3, r1
 800f70c:	e7e5      	b.n	800f6da <floorf+0x32>
 800f70e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f712:	d3e4      	bcc.n	800f6de <floorf+0x36>
 800f714:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f718:	4770      	bx	lr
 800f71a:	2300      	movs	r3, #0
 800f71c:	e7dd      	b.n	800f6da <floorf+0x32>
 800f71e:	bf00      	nop
 800f720:	7149f2ca 	.word	0x7149f2ca
 800f724:	bf800000 	.word	0xbf800000
 800f728:	007fffff 	.word	0x007fffff

0800f72c <scalbnf>:
 800f72c:	b508      	push	{r3, lr}
 800f72e:	ee10 2a10 	vmov	r2, s0
 800f732:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800f736:	ed2d 8b02 	vpush	{d8}
 800f73a:	eef0 0a40 	vmov.f32	s1, s0
 800f73e:	d004      	beq.n	800f74a <scalbnf+0x1e>
 800f740:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f744:	d306      	bcc.n	800f754 <scalbnf+0x28>
 800f746:	ee70 0a00 	vadd.f32	s1, s0, s0
 800f74a:	ecbd 8b02 	vpop	{d8}
 800f74e:	eeb0 0a60 	vmov.f32	s0, s1
 800f752:	bd08      	pop	{r3, pc}
 800f754:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f758:	d21c      	bcs.n	800f794 <scalbnf+0x68>
 800f75a:	4b1f      	ldr	r3, [pc, #124]	; (800f7d8 <scalbnf+0xac>)
 800f75c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800f7dc <scalbnf+0xb0>
 800f760:	4298      	cmp	r0, r3
 800f762:	ee60 0a27 	vmul.f32	s1, s0, s15
 800f766:	db10      	blt.n	800f78a <scalbnf+0x5e>
 800f768:	ee10 2a90 	vmov	r2, s1
 800f76c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800f770:	3b19      	subs	r3, #25
 800f772:	4403      	add	r3, r0
 800f774:	2bfe      	cmp	r3, #254	; 0xfe
 800f776:	dd0f      	ble.n	800f798 <scalbnf+0x6c>
 800f778:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800f7e0 <scalbnf+0xb4>
 800f77c:	eeb0 0a48 	vmov.f32	s0, s16
 800f780:	f000 f834 	bl	800f7ec <copysignf>
 800f784:	ee60 0a08 	vmul.f32	s1, s0, s16
 800f788:	e7df      	b.n	800f74a <scalbnf+0x1e>
 800f78a:	eddf 7a16 	vldr	s15, [pc, #88]	; 800f7e4 <scalbnf+0xb8>
 800f78e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800f792:	e7da      	b.n	800f74a <scalbnf+0x1e>
 800f794:	0ddb      	lsrs	r3, r3, #23
 800f796:	e7ec      	b.n	800f772 <scalbnf+0x46>
 800f798:	2b00      	cmp	r3, #0
 800f79a:	dd06      	ble.n	800f7aa <scalbnf+0x7e>
 800f79c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800f7a0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800f7a4:	ee00 3a90 	vmov	s1, r3
 800f7a8:	e7cf      	b.n	800f74a <scalbnf+0x1e>
 800f7aa:	f113 0f16 	cmn.w	r3, #22
 800f7ae:	da06      	bge.n	800f7be <scalbnf+0x92>
 800f7b0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f7b4:	4298      	cmp	r0, r3
 800f7b6:	dcdf      	bgt.n	800f778 <scalbnf+0x4c>
 800f7b8:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800f7e4 <scalbnf+0xb8>
 800f7bc:	e7de      	b.n	800f77c <scalbnf+0x50>
 800f7be:	3319      	adds	r3, #25
 800f7c0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800f7c4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800f7c8:	eddf 7a07 	vldr	s15, [pc, #28]	; 800f7e8 <scalbnf+0xbc>
 800f7cc:	ee07 3a10 	vmov	s14, r3
 800f7d0:	ee67 0a27 	vmul.f32	s1, s14, s15
 800f7d4:	e7b9      	b.n	800f74a <scalbnf+0x1e>
 800f7d6:	bf00      	nop
 800f7d8:	ffff3cb0 	.word	0xffff3cb0
 800f7dc:	4c000000 	.word	0x4c000000
 800f7e0:	7149f2ca 	.word	0x7149f2ca
 800f7e4:	0da24260 	.word	0x0da24260
 800f7e8:	33000000 	.word	0x33000000

0800f7ec <copysignf>:
 800f7ec:	ee10 3a10 	vmov	r3, s0
 800f7f0:	ee10 2a90 	vmov	r2, s1
 800f7f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f7f8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800f7fc:	4313      	orrs	r3, r2
 800f7fe:	ee00 3a10 	vmov	s0, r3
 800f802:	4770      	bx	lr

0800f804 <_init>:
 800f804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f806:	bf00      	nop
 800f808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f80a:	bc08      	pop	{r3}
 800f80c:	469e      	mov	lr, r3
 800f80e:	4770      	bx	lr

0800f810 <_fini>:
 800f810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f812:	bf00      	nop
 800f814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f816:	bc08      	pop	{r3}
 800f818:	469e      	mov	lr, r3
 800f81a:	4770      	bx	lr
