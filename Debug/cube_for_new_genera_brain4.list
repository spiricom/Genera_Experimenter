
cube_for_new_genera_brain4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d04c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00098608  0800d2e8  0800d2e8  0001d2e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080a58f0  080a58f0  000b58f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080a58f4  080a58f4  000b58f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000e8  20000000  080a58f8  000c0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00015b14  200000e8  080a59e0  000c00e8  2**3
                  ALLOC
  7 ._user_heap_stack 00006004  20015bfc  080a59e0  000c5bfc  2**0
                  ALLOC
  8 .RAM_D1       0007eb58  24000000  24000000  000d0000  2**5
                  ALLOC
  9 .RAM_D2       00001430  30000000  30000000  000d0000  2**5
                  ALLOC
 10 .SDRAM        02000000  60000000  60000000  000d0000  2**5
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000c00e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00064687  00000000  00000000  000c0116  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008c8e  00000000  00000000  0012479d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00026f6c  00000000  00000000  0012d42b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002f60  00000000  00000000  00154398  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00003928  00000000  00000000  001572f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000401e9  00000000  00000000  0015ac20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0002adc8  00000000  00000000  0019ae09  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0017bb8e  00000000  00000000  001c5bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0034175f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008e14  00000000  00000000  003417dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	200000e8 	.word	0x200000e8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800d2cc 	.word	0x0800d2cc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	200000ec 	.word	0x200000ec
 80002d4:	0800d2cc 	.word	0x0800d2cc

080002d8 <__aeabi_frsub>:
 80002d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002dc:	e002      	b.n	80002e4 <__addsf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_fsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002e4 <__addsf3>:
 80002e4:	0042      	lsls	r2, r0, #1
 80002e6:	bf1f      	itttt	ne
 80002e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002ec:	ea92 0f03 	teqne	r2, r3
 80002f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002f8:	d06a      	beq.n	80003d0 <__addsf3+0xec>
 80002fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000302:	bfc1      	itttt	gt
 8000304:	18d2      	addgt	r2, r2, r3
 8000306:	4041      	eorgt	r1, r0
 8000308:	4048      	eorgt	r0, r1
 800030a:	4041      	eorgt	r1, r0
 800030c:	bfb8      	it	lt
 800030e:	425b      	neglt	r3, r3
 8000310:	2b19      	cmp	r3, #25
 8000312:	bf88      	it	hi
 8000314:	4770      	bxhi	lr
 8000316:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800031a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800031e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000322:	bf18      	it	ne
 8000324:	4240      	negne	r0, r0
 8000326:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800032a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800032e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000332:	bf18      	it	ne
 8000334:	4249      	negne	r1, r1
 8000336:	ea92 0f03 	teq	r2, r3
 800033a:	d03f      	beq.n	80003bc <__addsf3+0xd8>
 800033c:	f1a2 0201 	sub.w	r2, r2, #1
 8000340:	fa41 fc03 	asr.w	ip, r1, r3
 8000344:	eb10 000c 	adds.w	r0, r0, ip
 8000348:	f1c3 0320 	rsb	r3, r3, #32
 800034c:	fa01 f103 	lsl.w	r1, r1, r3
 8000350:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000354:	d502      	bpl.n	800035c <__addsf3+0x78>
 8000356:	4249      	negs	r1, r1
 8000358:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800035c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000360:	d313      	bcc.n	800038a <__addsf3+0xa6>
 8000362:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000366:	d306      	bcc.n	8000376 <__addsf3+0x92>
 8000368:	0840      	lsrs	r0, r0, #1
 800036a:	ea4f 0131 	mov.w	r1, r1, rrx
 800036e:	f102 0201 	add.w	r2, r2, #1
 8000372:	2afe      	cmp	r2, #254	; 0xfe
 8000374:	d251      	bcs.n	800041a <__addsf3+0x136>
 8000376:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800037a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800037e:	bf08      	it	eq
 8000380:	f020 0001 	biceq.w	r0, r0, #1
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	4770      	bx	lr
 800038a:	0049      	lsls	r1, r1, #1
 800038c:	eb40 0000 	adc.w	r0, r0, r0
 8000390:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000394:	f1a2 0201 	sub.w	r2, r2, #1
 8000398:	d1ed      	bne.n	8000376 <__addsf3+0x92>
 800039a:	fab0 fc80 	clz	ip, r0
 800039e:	f1ac 0c08 	sub.w	ip, ip, #8
 80003a2:	ebb2 020c 	subs.w	r2, r2, ip
 80003a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80003aa:	bfaa      	itet	ge
 80003ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003b0:	4252      	neglt	r2, r2
 80003b2:	4318      	orrge	r0, r3
 80003b4:	bfbc      	itt	lt
 80003b6:	40d0      	lsrlt	r0, r2
 80003b8:	4318      	orrlt	r0, r3
 80003ba:	4770      	bx	lr
 80003bc:	f092 0f00 	teq	r2, #0
 80003c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003c4:	bf06      	itte	eq
 80003c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003ca:	3201      	addeq	r2, #1
 80003cc:	3b01      	subne	r3, #1
 80003ce:	e7b5      	b.n	800033c <__addsf3+0x58>
 80003d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003d8:	bf18      	it	ne
 80003da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003de:	d021      	beq.n	8000424 <__addsf3+0x140>
 80003e0:	ea92 0f03 	teq	r2, r3
 80003e4:	d004      	beq.n	80003f0 <__addsf3+0x10c>
 80003e6:	f092 0f00 	teq	r2, #0
 80003ea:	bf08      	it	eq
 80003ec:	4608      	moveq	r0, r1
 80003ee:	4770      	bx	lr
 80003f0:	ea90 0f01 	teq	r0, r1
 80003f4:	bf1c      	itt	ne
 80003f6:	2000      	movne	r0, #0
 80003f8:	4770      	bxne	lr
 80003fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003fe:	d104      	bne.n	800040a <__addsf3+0x126>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	bf28      	it	cs
 8000404:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000408:	4770      	bx	lr
 800040a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800040e:	bf3c      	itt	cc
 8000410:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000414:	4770      	bxcc	lr
 8000416:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800041a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800041e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000422:	4770      	bx	lr
 8000424:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000428:	bf16      	itet	ne
 800042a:	4608      	movne	r0, r1
 800042c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000430:	4601      	movne	r1, r0
 8000432:	0242      	lsls	r2, r0, #9
 8000434:	bf06      	itte	eq
 8000436:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800043a:	ea90 0f01 	teqeq	r0, r1
 800043e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000442:	4770      	bx	lr

08000444 <__aeabi_ui2f>:
 8000444:	f04f 0300 	mov.w	r3, #0
 8000448:	e004      	b.n	8000454 <__aeabi_i2f+0x8>
 800044a:	bf00      	nop

0800044c <__aeabi_i2f>:
 800044c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	ea5f 0c00 	movs.w	ip, r0
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000460:	4601      	mov	r1, r0
 8000462:	f04f 0000 	mov.w	r0, #0
 8000466:	e01c      	b.n	80004a2 <__aeabi_l2f+0x2a>

08000468 <__aeabi_ul2f>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	f04f 0300 	mov.w	r3, #0
 8000474:	e00a      	b.n	800048c <__aeabi_l2f+0x14>
 8000476:	bf00      	nop

08000478 <__aeabi_l2f>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000484:	d502      	bpl.n	800048c <__aeabi_l2f+0x14>
 8000486:	4240      	negs	r0, r0
 8000488:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048c:	ea5f 0c01 	movs.w	ip, r1
 8000490:	bf02      	ittt	eq
 8000492:	4684      	moveq	ip, r0
 8000494:	4601      	moveq	r1, r0
 8000496:	2000      	moveq	r0, #0
 8000498:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800049c:	bf08      	it	eq
 800049e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80004a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80004a6:	fabc f28c 	clz	r2, ip
 80004aa:	3a08      	subs	r2, #8
 80004ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004b0:	db10      	blt.n	80004d4 <__aeabi_l2f+0x5c>
 80004b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b6:	4463      	add	r3, ip
 80004b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80004bc:	f1c2 0220 	rsb	r2, r2, #32
 80004c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c4:	fa20 f202 	lsr.w	r2, r0, r2
 80004c8:	eb43 0002 	adc.w	r0, r3, r2
 80004cc:	bf08      	it	eq
 80004ce:	f020 0001 	biceq.w	r0, r0, #1
 80004d2:	4770      	bx	lr
 80004d4:	f102 0220 	add.w	r2, r2, #32
 80004d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80004dc:	f1c2 0220 	rsb	r2, r2, #32
 80004e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004e4:	fa21 f202 	lsr.w	r2, r1, r2
 80004e8:	eb43 0002 	adc.w	r0, r3, r2
 80004ec:	bf08      	it	eq
 80004ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004f2:	4770      	bx	lr

080004f4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80004f4:	4b10      	ldr	r3, [pc, #64]	; (8000538 <HAL_InitTick+0x44>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	b90b      	cbnz	r3, 80004fe <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80004fa:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80004fc:	4770      	bx	lr
{
 80004fe:	b510      	push	{r4, lr}
 8000500:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000502:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000506:	fbb0 f3f3 	udiv	r3, r0, r3
 800050a:	4a0c      	ldr	r2, [pc, #48]	; (800053c <HAL_InitTick+0x48>)
 800050c:	6810      	ldr	r0, [r2, #0]
 800050e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000512:	f000 ff27 	bl	8001364 <HAL_SYSTICK_Config>
 8000516:	b968      	cbnz	r0, 8000534 <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000518:	2c0f      	cmp	r4, #15
 800051a:	d901      	bls.n	8000520 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 800051c:	2001      	movs	r0, #1
 800051e:	e00a      	b.n	8000536 <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000520:	2200      	movs	r2, #0
 8000522:	4621      	mov	r1, r4
 8000524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000528:	f000 fedc 	bl	80012e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <HAL_InitTick+0x4c>)
 800052e:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000530:	2000      	movs	r0, #0
 8000532:	e000      	b.n	8000536 <HAL_InitTick+0x42>
    return HAL_ERROR;
 8000534:	2001      	movs	r0, #1
}
 8000536:	bd10      	pop	{r4, pc}
 8000538:	20000000 	.word	0x20000000
 800053c:	20000078 	.word	0x20000078
 8000540:	20000004 	.word	0x20000004

08000544 <HAL_Init>:
{
 8000544:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000546:	2003      	movs	r0, #3
 8000548:	f000 feba 	bl	80012c0 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800054c:	f003 f804 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 8000550:	490f      	ldr	r1, [pc, #60]	; (8000590 <HAL_Init+0x4c>)
 8000552:	698b      	ldr	r3, [r1, #24]
 8000554:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000558:	4a0e      	ldr	r2, [pc, #56]	; (8000594 <HAL_Init+0x50>)
 800055a:	5cd3      	ldrb	r3, [r2, r3]
 800055c:	f003 031f 	and.w	r3, r3, #31
 8000560:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000562:	698b      	ldr	r3, [r1, #24]
 8000564:	f003 030f 	and.w	r3, r3, #15
 8000568:	5cd3      	ldrb	r3, [r2, r3]
 800056a:	f003 031f 	and.w	r3, r3, #31
 800056e:	fa20 f303 	lsr.w	r3, r0, r3
 8000572:	4a09      	ldr	r2, [pc, #36]	; (8000598 <HAL_Init+0x54>)
 8000574:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <HAL_Init+0x58>)
 8000578:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800057a:	2000      	movs	r0, #0
 800057c:	f7ff ffba 	bl	80004f4 <HAL_InitTick>
 8000580:	b110      	cbz	r0, 8000588 <HAL_Init+0x44>
    return HAL_ERROR;
 8000582:	2401      	movs	r4, #1
}
 8000584:	4620      	mov	r0, r4
 8000586:	bd10      	pop	{r4, pc}
 8000588:	4604      	mov	r4, r0
  HAL_MspInit();
 800058a:	f009 f81f 	bl	80095cc <HAL_MspInit>
  return HAL_OK;
 800058e:	e7f9      	b.n	8000584 <HAL_Init+0x40>
 8000590:	58024400 	.word	0x58024400
 8000594:	0800d304 	.word	0x0800d304
 8000598:	2000007c 	.word	0x2000007c
 800059c:	20000078 	.word	0x20000078

080005a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <HAL_IncTick+0x10>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4a03      	ldr	r2, [pc, #12]	; (80005b4 <HAL_IncTick+0x14>)
 80005a6:	6811      	ldr	r1, [r2, #0]
 80005a8:	440b      	add	r3, r1
 80005aa:	6013      	str	r3, [r2, #0]
}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000000 	.word	0x20000000
 80005b4:	2000015c 	.word	0x2000015c

080005b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005b8:	4b01      	ldr	r3, [pc, #4]	; (80005c0 <HAL_GetTick+0x8>)
 80005ba:	6818      	ldr	r0, [r3, #0]
}
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	2000015c 	.word	0x2000015c

080005c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005c4:	b538      	push	{r3, r4, r5, lr}
 80005c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005c8:	f7ff fff6 	bl	80005b8 <HAL_GetTick>
 80005cc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ce:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80005d2:	d002      	beq.n	80005da <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <HAL_Delay+0x24>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005da:	f7ff ffed 	bl	80005b8 <HAL_GetTick>
 80005de:	1b40      	subs	r0, r0, r5
 80005e0:	42a0      	cmp	r0, r4
 80005e2:	d3fa      	bcc.n	80005da <HAL_Delay+0x16>
  {
  }
}
 80005e4:	bd38      	pop	{r3, r4, r5, pc}
 80005e6:	bf00      	nop
 80005e8:	20000000 	.word	0x20000000

080005ec <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80005ec:	4b01      	ldr	r3, [pc, #4]	; (80005f4 <HAL_GetREVID+0x8>)
 80005ee:	6818      	ldr	r0, [r3, #0]
}
 80005f0:	0c00      	lsrs	r0, r0, #16
 80005f2:	4770      	bx	lr
 80005f4:	5c001000 	.word	0x5c001000

080005f8 <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 80005f8:	4a03      	ldr	r2, [pc, #12]	; (8000608 <HAL_SetFMCMemorySwappingConfig+0x10>)
 80005fa:	6813      	ldr	r3, [r2, #0]
 80005fc:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000600:	4318      	orrs	r0, r3
 8000602:	6010      	str	r0, [r2, #0]
}
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	52004000 	.word	0x52004000

0800060c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800060c:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800060e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000610:	f007 ffa3 	bl	800855a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000614:	bd08      	pop	{r3, pc}

08000616 <HAL_ADC_ErrorCallback>:
}
 8000616:	4770      	bx	lr

08000618 <ADC_DMAConvCplt>:
{
 8000618:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800061a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800061c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800061e:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000622:	d131      	bne.n	8000688 <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000624:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800062a:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	6811      	ldr	r1, [r2, #0]
 8000630:	f011 0f08 	tst.w	r1, #8
 8000634:	d014      	beq.n	8000660 <ADC_DMAConvCplt+0x48>
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000636:	68d1      	ldr	r1, [r2, #12]
 8000638:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 800063c:	d120      	bne.n	8000680 <ADC_DMAConvCplt+0x68>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800063e:	68d2      	ldr	r2, [r2, #12]
 8000640:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8000644:	d11c      	bne.n	8000680 <ADC_DMAConvCplt+0x68>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000646:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800064c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800064e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000650:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8000654:	d114      	bne.n	8000680 <ADC_DMAConvCplt+0x68>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000656:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000658:	f042 0201 	orr.w	r2, r2, #1
 800065c:	655a      	str	r2, [r3, #84]	; 0x54
 800065e:	e00f      	b.n	8000680 <ADC_DMAConvCplt+0x68>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8000660:	68d2      	ldr	r2, [r2, #12]
 8000662:	f012 0f03 	tst.w	r2, #3
 8000666:	d10b      	bne.n	8000680 <ADC_DMAConvCplt+0x68>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000668:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800066a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800066e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000670:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000672:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8000676:	d103      	bne.n	8000680 <ADC_DMAConvCplt+0x68>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000678:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800067a:	f042 0201 	orr.w	r2, r2, #1
 800067e:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8000680:	4618      	mov	r0, r3
 8000682:	f007 ff65 	bl	8008550 <HAL_ADC_ConvCpltCallback>
}
 8000686:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8000688:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800068a:	f012 0f10 	tst.w	r2, #16
 800068e:	d103      	bne.n	8000698 <ADC_DMAConvCplt+0x80>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000694:	4798      	blx	r3
}
 8000696:	e7f6      	b.n	8000686 <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ffbc 	bl	8000616 <HAL_ADC_ErrorCallback>
 800069e:	e7f2      	b.n	8000686 <ADC_DMAConvCplt+0x6e>

080006a0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80006a0:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80006a2:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80006a4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80006a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006aa:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80006ac:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80006ae:	f043 0304 	orr.w	r3, r3, #4
 80006b2:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80006b4:	f7ff ffaf 	bl	8000616 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80006b8:	bd08      	pop	{r3, pc}
	...

080006bc <HAL_ADC_ConfigChannel>:
{
 80006bc:	b4f0      	push	{r4, r5, r6, r7}
 80006be:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 80006c0:	2200      	movs	r2, #0
 80006c2:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80006c4:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80006c8:	2a01      	cmp	r2, #1
 80006ca:	f000 823b 	beq.w	8000b44 <HAL_ADC_ConfigChannel+0x488>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2201      	movs	r2, #1
 80006d2:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80006d6:	6804      	ldr	r4, [r0, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80006d8:	68a2      	ldr	r2, [r4, #8]
 80006da:	f012 0204 	ands.w	r2, r2, #4
 80006de:	d00a      	beq.n	80006f6 <HAL_ADC_ConfigChannel+0x3a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006e0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80006e2:	f042 0220 	orr.w	r2, r2, #32
 80006e6:	6542      	str	r2, [r0, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80006e8:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80006f0:	b002      	add	sp, #8
 80006f2:	bcf0      	pop	{r4, r5, r6, r7}
 80006f4:	4770      	bx	lr
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80006f6:	6808      	ldr	r0, [r1, #0]
 80006f8:	f3c0 0513 	ubfx	r5, r0, #0, #20
 80006fc:	2d00      	cmp	r5, #0
 80006fe:	d150      	bne.n	80007a2 <HAL_ADC_ConfigChannel+0xe6>
 8000700:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8000704:	2501      	movs	r5, #1
 8000706:	4085      	lsls	r5, r0
 8000708:	69e0      	ldr	r0, [r4, #28]
 800070a:	4328      	orrs	r0, r5
 800070c:	61e0      	str	r0, [r4, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800070e:	681f      	ldr	r7, [r3, #0]
 8000710:	684e      	ldr	r6, [r1, #4]
 8000712:	680d      	ldr	r5, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000714:	3730      	adds	r7, #48	; 0x30
 8000716:	0a30      	lsrs	r0, r6, #8
 8000718:	0080      	lsls	r0, r0, #2
 800071a:	f000 000c 	and.w	r0, r0, #12
  MODIFY_REG(*preg,
 800071e:	583c      	ldr	r4, [r7, r0]
 8000720:	f006 061f 	and.w	r6, r6, #31
 8000724:	f04f 0c1f 	mov.w	ip, #31
 8000728:	fa0c fc06 	lsl.w	ip, ip, r6
 800072c:	ea24 040c 	bic.w	r4, r4, ip
 8000730:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8000734:	40b5      	lsls	r5, r6
 8000736:	432c      	orrs	r4, r5
 8000738:	503c      	str	r4, [r7, r0]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800073a:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800073c:	6884      	ldr	r4, [r0, #8]
 800073e:	f014 0f04 	tst.w	r4, #4
 8000742:	d037      	beq.n	80007b4 <HAL_ADC_ConfigChannel+0xf8>
 8000744:	2401      	movs	r4, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000746:	6885      	ldr	r5, [r0, #8]
 8000748:	f015 0f08 	tst.w	r5, #8
 800074c:	d034      	beq.n	80007b8 <HAL_ADC_ConfigChannel+0xfc>
 800074e:	2501      	movs	r5, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000750:	432c      	orrs	r4, r5
 8000752:	d165      	bne.n	8000820 <HAL_ADC_ConfigChannel+0x164>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000754:	680f      	ldr	r7, [r1, #0]
 8000756:	688c      	ldr	r4, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000758:	f100 0514 	add.w	r5, r0, #20
 800075c:	0e78      	lsrs	r0, r7, #25
 800075e:	0080      	lsls	r0, r0, #2
 8000760:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8000764:	582e      	ldr	r6, [r5, r0]
 8000766:	f3c7 5704 	ubfx	r7, r7, #20, #5
 800076a:	f04f 0c07 	mov.w	ip, #7
 800076e:	fa0c fc07 	lsl.w	ip, ip, r7
 8000772:	ea26 060c 	bic.w	r6, r6, ip
 8000776:	40bc      	lsls	r4, r7
 8000778:	4334      	orrs	r4, r6
 800077a:	502c      	str	r4, [r5, r0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800077c:	48a9      	ldr	r0, [pc, #676]	; (8000a24 <HAL_ADC_ConfigChannel+0x368>)
 800077e:	6800      	ldr	r0, [r0, #0]
 8000780:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8000784:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8000788:	d018      	beq.n	80007bc <HAL_ADC_ConfigChannel+0x100>
 800078a:	681c      	ldr	r4, [r3, #0]
 800078c:	68e0      	ldr	r0, [r4, #12]
 800078e:	f010 0f10 	tst.w	r0, #16
 8000792:	d167      	bne.n	8000864 <HAL_ADC_ConfigChannel+0x1a8>
 8000794:	6948      	ldr	r0, [r1, #20]
 8000796:	68e4      	ldr	r4, [r4, #12]
 8000798:	f3c4 0482 	ubfx	r4, r4, #2, #3
 800079c:	0064      	lsls	r4, r4, #1
 800079e:	40a0      	lsls	r0, r4
 80007a0:	e013      	b.n	80007ca <HAL_ADC_ConfigChannel+0x10e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007a2:	fa90 f0a0 	rbit	r0, r0
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80007a6:	fab0 f080 	clz	r0, r0
 80007aa:	f000 001f 	and.w	r0, r0, #31
 80007ae:	2501      	movs	r5, #1
 80007b0:	4085      	lsls	r5, r0
 80007b2:	e7a9      	b.n	8000708 <HAL_ADC_ConfigChannel+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80007b4:	2400      	movs	r4, #0
 80007b6:	e7c6      	b.n	8000746 <HAL_ADC_ConfigChannel+0x8a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80007b8:	2500      	movs	r5, #0
 80007ba:	e7c9      	b.n	8000750 <HAL_ADC_ConfigChannel+0x94>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80007bc:	6948      	ldr	r0, [r1, #20]
 80007be:	681c      	ldr	r4, [r3, #0]
 80007c0:	68e4      	ldr	r4, [r4, #12]
 80007c2:	f3c4 0482 	ubfx	r4, r4, #2, #3
 80007c6:	0064      	lsls	r4, r4, #1
 80007c8:	40a0      	lsls	r0, r4
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80007ca:	690d      	ldr	r5, [r1, #16]
 80007cc:	2d04      	cmp	r5, #4
 80007ce:	d057      	beq.n	8000880 <HAL_ADC_ConfigChannel+0x1c4>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80007d0:	681f      	ldr	r7, [r3, #0]
 80007d2:	680e      	ldr	r6, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80007d4:	3760      	adds	r7, #96	; 0x60
  MODIFY_REG(*preg,
 80007d6:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
 80007da:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 80007de:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80007e2:	4330      	orrs	r0, r6
 80007e4:	4320      	orrs	r0, r4
 80007e6:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80007ea:	6818      	ldr	r0, [r3, #0]
 80007ec:	690e      	ldr	r6, [r1, #16]
 80007ee:	7e4c      	ldrb	r4, [r1, #25]
 80007f0:	2c01      	cmp	r4, #1
 80007f2:	d03f      	beq.n	8000874 <HAL_ADC_ConfigChannel+0x1b8>
 80007f4:	4615      	mov	r5, r2
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80007f6:	3060      	adds	r0, #96	; 0x60
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80007f8:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 80007fc:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8000800:	432c      	orrs	r4, r5
 8000802:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8000806:	681d      	ldr	r5, [r3, #0]
 8000808:	690c      	ldr	r4, [r1, #16]
 800080a:	7e08      	ldrb	r0, [r1, #24]
 800080c:	2801      	cmp	r0, #1
 800080e:	d034      	beq.n	800087a <HAL_ADC_ConfigChannel+0x1be>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000810:	6928      	ldr	r0, [r5, #16]
 8000812:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8000816:	f004 041f 	and.w	r4, r4, #31
 800081a:	40a2      	lsls	r2, r4
 800081c:	4302      	orrs	r2, r0
 800081e:	612a      	str	r2, [r5, #16]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000820:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000822:	6882      	ldr	r2, [r0, #8]
 8000824:	f012 0f01 	tst.w	r2, #1
 8000828:	f040 8188 	bne.w	8000b3c <HAL_ADC_ConfigChannel+0x480>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800082c:	680a      	ldr	r2, [r1, #0]
 800082e:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8000830:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
 8000834:	f3c2 0613 	ubfx	r6, r2, #0, #20
 8000838:	ea24 0406 	bic.w	r4, r4, r6
 800083c:	f005 0618 	and.w	r6, r5, #24
 8000840:	4d79      	ldr	r5, [pc, #484]	; (8000a28 <HAL_ADC_ConfigChannel+0x36c>)
 8000842:	40f5      	lsrs	r5, r6
 8000844:	402a      	ands	r2, r5
 8000846:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800084a:	4322      	orrs	r2, r4
 800084c:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000850:	68c8      	ldr	r0, [r1, #12]
 8000852:	4a76      	ldr	r2, [pc, #472]	; (8000a2c <HAL_ADC_ConfigChannel+0x370>)
 8000854:	4290      	cmp	r0, r2
 8000856:	d047      	beq.n	80008e8 <HAL_ADC_ConfigChannel+0x22c>
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000858:	680a      	ldr	r2, [r1, #0]
 800085a:	2a00      	cmp	r2, #0
 800085c:	f2c0 80e8 	blt.w	8000a30 <HAL_ADC_ConfigChannel+0x374>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000860:	2000      	movs	r0, #0
 8000862:	e742      	b.n	80006ea <HAL_ADC_ConfigChannel+0x2e>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000864:	6948      	ldr	r0, [r1, #20]
 8000866:	68e4      	ldr	r4, [r4, #12]
 8000868:	08a4      	lsrs	r4, r4, #2
 800086a:	f004 0404 	and.w	r4, r4, #4
 800086e:	0064      	lsls	r4, r4, #1
 8000870:	40a0      	lsls	r0, r4
 8000872:	e7aa      	b.n	80007ca <HAL_ADC_ConfigChannel+0x10e>
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8000874:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8000878:	e7bd      	b.n	80007f6 <HAL_ADC_ConfigChannel+0x13a>
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800087a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800087e:	e7c7      	b.n	8000810 <HAL_ADC_ConfigChannel+0x154>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000880:	6818      	ldr	r0, [r3, #0]
 8000882:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000884:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000888:	680c      	ldr	r4, [r1, #0]
 800088a:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800088e:	d01c      	beq.n	80008ca <HAL_ADC_ConfigChannel+0x20e>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000890:	6818      	ldr	r0, [r3, #0]
 8000892:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8000894:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000898:	680c      	ldr	r4, [r1, #0]
 800089a:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800089e:	d019      	beq.n	80008d4 <HAL_ADC_ConfigChannel+0x218>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80008a0:	6818      	ldr	r0, [r3, #0]
 80008a2:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80008a4:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80008a8:	680c      	ldr	r4, [r1, #0]
 80008aa:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80008ae:	d016      	beq.n	80008de <HAL_ADC_ConfigChannel+0x222>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80008b0:	6818      	ldr	r0, [r3, #0]
 80008b2:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80008b4:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80008b8:	680c      	ldr	r4, [r1, #0]
 80008ba:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80008be:	d1af      	bne.n	8000820 <HAL_ADC_ConfigChannel+0x164>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80008c0:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80008c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80008c6:	66c2      	str	r2, [r0, #108]	; 0x6c
 80008c8:	e7aa      	b.n	8000820 <HAL_ADC_ConfigChannel+0x164>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80008ca:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80008cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80008d0:	6602      	str	r2, [r0, #96]	; 0x60
 80008d2:	e7dd      	b.n	8000890 <HAL_ADC_ConfigChannel+0x1d4>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80008d4:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80008d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80008da:	6642      	str	r2, [r0, #100]	; 0x64
 80008dc:	e7e0      	b.n	80008a0 <HAL_ADC_ConfigChannel+0x1e4>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80008de:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80008e0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80008e4:	6682      	str	r2, [r0, #104]	; 0x68
 80008e6:	e7e3      	b.n	80008b0 <HAL_ADC_ConfigChannel+0x1f4>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80008e8:	681d      	ldr	r5, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80008ea:	680a      	ldr	r2, [r1, #0]
 80008ec:	f3c2 0613 	ubfx	r6, r2, #0, #20
 80008f0:	bb96      	cbnz	r6, 8000958 <HAL_ADC_ConfigChannel+0x29c>
 80008f2:	0e90      	lsrs	r0, r2, #26
 80008f4:	3001      	adds	r0, #1
 80008f6:	f000 001f 	and.w	r0, r0, #31
 80008fa:	2809      	cmp	r0, #9
 80008fc:	bf8c      	ite	hi
 80008fe:	2000      	movhi	r0, #0
 8000900:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000902:	2800      	cmp	r0, #0
 8000904:	d052      	beq.n	80009ac <HAL_ADC_ConfigChannel+0x2f0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000906:	bb9e      	cbnz	r6, 8000970 <HAL_ADC_ConfigChannel+0x2b4>
 8000908:	0e94      	lsrs	r4, r2, #26
 800090a:	3401      	adds	r4, #1
 800090c:	06a4      	lsls	r4, r4, #26
 800090e:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8000912:	bbb6      	cbnz	r6, 8000982 <HAL_ADC_ConfigChannel+0x2c6>
 8000914:	0e90      	lsrs	r0, r2, #26
 8000916:	3001      	adds	r0, #1
 8000918:	f000 071f 	and.w	r7, r0, #31
 800091c:	2001      	movs	r0, #1
 800091e:	40b8      	lsls	r0, r7
 8000920:	4304      	orrs	r4, r0
 8000922:	bbc6      	cbnz	r6, 8000996 <HAL_ADC_ConfigChannel+0x2da>
 8000924:	0e92      	lsrs	r2, r2, #26
 8000926:	3201      	adds	r2, #1
 8000928:	f002 021f 	and.w	r2, r2, #31
 800092c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000930:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000932:	4322      	orrs	r2, r4
 8000934:	688c      	ldr	r4, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000936:	3514      	adds	r5, #20
 8000938:	0e50      	lsrs	r0, r2, #25
 800093a:	0080      	lsls	r0, r0, #2
 800093c:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8000940:	582e      	ldr	r6, [r5, r0]
 8000942:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8000946:	2707      	movs	r7, #7
 8000948:	4097      	lsls	r7, r2
 800094a:	ea26 0607 	bic.w	r6, r6, r7
 800094e:	fa04 f202 	lsl.w	r2, r4, r2
 8000952:	4332      	orrs	r2, r6
 8000954:	502a      	str	r2, [r5, r0]
 8000956:	e77f      	b.n	8000858 <HAL_ADC_ConfigChannel+0x19c>
 8000958:	fa92 f0a2 	rbit	r0, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800095c:	fab0 f080 	clz	r0, r0
 8000960:	3001      	adds	r0, #1
 8000962:	f000 001f 	and.w	r0, r0, #31
 8000966:	2809      	cmp	r0, #9
 8000968:	bf8c      	ite	hi
 800096a:	2000      	movhi	r0, #0
 800096c:	2001      	movls	r0, #1
 800096e:	e7c8      	b.n	8000902 <HAL_ADC_ConfigChannel+0x246>
 8000970:	fa92 f4a2 	rbit	r4, r2
 8000974:	fab4 f484 	clz	r4, r4
 8000978:	3401      	adds	r4, #1
 800097a:	06a4      	lsls	r4, r4, #26
 800097c:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8000980:	e7c7      	b.n	8000912 <HAL_ADC_ConfigChannel+0x256>
 8000982:	fa92 f0a2 	rbit	r0, r2
 8000986:	fab0 f080 	clz	r0, r0
 800098a:	3001      	adds	r0, #1
 800098c:	f000 071f 	and.w	r7, r0, #31
 8000990:	2001      	movs	r0, #1
 8000992:	40b8      	lsls	r0, r7
 8000994:	e7c4      	b.n	8000920 <HAL_ADC_ConfigChannel+0x264>
 8000996:	fa92 f2a2 	rbit	r2, r2
 800099a:	fab2 f282 	clz	r2, r2
 800099e:	3201      	adds	r2, #1
 80009a0:	f002 021f 	and.w	r2, r2, #31
 80009a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80009a8:	0512      	lsls	r2, r2, #20
 80009aa:	e7c2      	b.n	8000932 <HAL_ADC_ConfigChannel+0x276>
 80009ac:	b9ce      	cbnz	r6, 80009e2 <HAL_ADC_ConfigChannel+0x326>
 80009ae:	0e94      	lsrs	r4, r2, #26
 80009b0:	3401      	adds	r4, #1
 80009b2:	06a4      	lsls	r4, r4, #26
 80009b4:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80009b8:	b9e6      	cbnz	r6, 80009f4 <HAL_ADC_ConfigChannel+0x338>
 80009ba:	0e90      	lsrs	r0, r2, #26
 80009bc:	3001      	adds	r0, #1
 80009be:	f000 071f 	and.w	r7, r0, #31
 80009c2:	2001      	movs	r0, #1
 80009c4:	40b8      	lsls	r0, r7
 80009c6:	4304      	orrs	r4, r0
 80009c8:	b9f6      	cbnz	r6, 8000a08 <HAL_ADC_ConfigChannel+0x34c>
 80009ca:	0e90      	lsrs	r0, r2, #26
 80009cc:	3001      	adds	r0, #1
 80009ce:	f000 001f 	and.w	r0, r0, #31
 80009d2:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80009d6:	3a1e      	subs	r2, #30
 80009d8:	0512      	lsls	r2, r2, #20
 80009da:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80009de:	4322      	orrs	r2, r4
 80009e0:	e7a8      	b.n	8000934 <HAL_ADC_ConfigChannel+0x278>
 80009e2:	fa92 f4a2 	rbit	r4, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80009e6:	fab4 f484 	clz	r4, r4
 80009ea:	3401      	adds	r4, #1
 80009ec:	06a4      	lsls	r4, r4, #26
 80009ee:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80009f2:	e7e1      	b.n	80009b8 <HAL_ADC_ConfigChannel+0x2fc>
 80009f4:	fa92 f0a2 	rbit	r0, r2
 80009f8:	fab0 f080 	clz	r0, r0
 80009fc:	3001      	adds	r0, #1
 80009fe:	f000 071f 	and.w	r7, r0, #31
 8000a02:	2001      	movs	r0, #1
 8000a04:	40b8      	lsls	r0, r7
 8000a06:	e7de      	b.n	80009c6 <HAL_ADC_ConfigChannel+0x30a>
 8000a08:	fa92 f0a2 	rbit	r0, r2
 8000a0c:	fab0 f080 	clz	r0, r0
 8000a10:	3001      	adds	r0, #1
 8000a12:	f000 001f 	and.w	r0, r0, #31
 8000a16:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8000a1a:	3a1e      	subs	r2, #30
 8000a1c:	0512      	lsls	r2, r2, #20
 8000a1e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000a22:	e7dc      	b.n	80009de <HAL_ADC_ConfigChannel+0x322>
 8000a24:	5c001000 	.word	0x5c001000
 8000a28:	000fffff 	.word	0x000fffff
 8000a2c:	47ff0000 	.word	0x47ff0000
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000a30:	6819      	ldr	r1, [r3, #0]
 8000a32:	4845      	ldr	r0, [pc, #276]	; (8000b48 <HAL_ADC_ConfigChannel+0x48c>)
 8000a34:	4c45      	ldr	r4, [pc, #276]	; (8000b4c <HAL_ADC_ConfigChannel+0x490>)
 8000a36:	42a1      	cmp	r1, r4
 8000a38:	bf18      	it	ne
 8000a3a:	4281      	cmpne	r1, r0
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	d121      	bne.n	8000a88 <HAL_ADC_ConfigChannel+0x3cc>
 8000a44:	4d42      	ldr	r5, [pc, #264]	; (8000b50 <HAL_ADC_ConfigChannel+0x494>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000a46:	68ac      	ldr	r4, [r5, #8]
 8000a48:	f004 76e0 	and.w	r6, r4, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000a4c:	b310      	cbz	r0, 8000a94 <HAL_ADC_ConfigChannel+0x3d8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000a4e:	483e      	ldr	r0, [pc, #248]	; (8000b48 <HAL_ADC_ConfigChannel+0x48c>)
 8000a50:	6880      	ldr	r0, [r0, #8]
 8000a52:	f010 0f01 	tst.w	r0, #1
 8000a56:	d019      	beq.n	8000a8c <HAL_ADC_ConfigChannel+0x3d0>
 8000a58:	2001      	movs	r0, #1
 8000a5a:	4f3c      	ldr	r7, [pc, #240]	; (8000b4c <HAL_ADC_ConfigChannel+0x490>)
 8000a5c:	68bf      	ldr	r7, [r7, #8]
 8000a5e:	f017 0f01 	tst.w	r7, #1
 8000a62:	d015      	beq.n	8000a90 <HAL_ADC_ConfigChannel+0x3d4>
 8000a64:	2701      	movs	r7, #1
 8000a66:	4338      	orrs	r0, r7
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	d05e      	beq.n	8000b30 <HAL_ADC_ConfigChannel+0x474>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000a72:	4838      	ldr	r0, [pc, #224]	; (8000b54 <HAL_ADC_ConfigChannel+0x498>)
 8000a74:	4282      	cmp	r2, r0
 8000a76:	d018      	beq.n	8000aaa <HAL_ADC_ConfigChannel+0x3ee>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000a78:	4837      	ldr	r0, [pc, #220]	; (8000b58 <HAL_ADC_ConfigChannel+0x49c>)
 8000a7a:	4282      	cmp	r2, r0
 8000a7c:	d036      	beq.n	8000aec <HAL_ADC_ConfigChannel+0x430>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000a7e:	4837      	ldr	r0, [pc, #220]	; (8000b5c <HAL_ADC_ConfigChannel+0x4a0>)
 8000a80:	4282      	cmp	r2, r0
 8000a82:	d044      	beq.n	8000b0e <HAL_ADC_ConfigChannel+0x452>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a84:	2000      	movs	r0, #0
 8000a86:	e630      	b.n	80006ea <HAL_ADC_ConfigChannel+0x2e>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000a88:	4d35      	ldr	r5, [pc, #212]	; (8000b60 <HAL_ADC_ConfigChannel+0x4a4>)
 8000a8a:	e7dc      	b.n	8000a46 <HAL_ADC_ConfigChannel+0x38a>
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	e7e4      	b.n	8000a5a <HAL_ADC_ConfigChannel+0x39e>
 8000a90:	2700      	movs	r7, #0
 8000a92:	e7e8      	b.n	8000a66 <HAL_ADC_ConfigChannel+0x3aa>
 8000a94:	4833      	ldr	r0, [pc, #204]	; (8000b64 <HAL_ADC_ConfigChannel+0x4a8>)
 8000a96:	6880      	ldr	r0, [r0, #8]
 8000a98:	f010 0f01 	tst.w	r0, #1
 8000a9c:	d003      	beq.n	8000aa6 <HAL_ADC_ConfigChannel+0x3ea>
 8000a9e:	2001      	movs	r0, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000aa0:	f080 0001 	eor.w	r0, r0, #1
 8000aa4:	e7e3      	b.n	8000a6e <HAL_ADC_ConfigChannel+0x3b2>
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	e7fa      	b.n	8000aa0 <HAL_ADC_ConfigChannel+0x3e4>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000aaa:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
 8000aae:	d1e3      	bne.n	8000a78 <HAL_ADC_ConfigChannel+0x3bc>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8000ab0:	4a2c      	ldr	r2, [pc, #176]	; (8000b64 <HAL_ADC_ConfigChannel+0x4a8>)
 8000ab2:	4291      	cmp	r1, r2
 8000ab4:	d001      	beq.n	8000aba <HAL_ADC_ConfigChannel+0x3fe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	e617      	b.n	80006ea <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8000aba:	f446 0200 	orr.w	r2, r6, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000abe:	68a9      	ldr	r1, [r5, #8]
 8000ac0:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	60aa      	str	r2, [r5, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000ac8:	4a27      	ldr	r2, [pc, #156]	; (8000b68 <HAL_ADC_ConfigChannel+0x4ac>)
 8000aca:	6812      	ldr	r2, [r2, #0]
 8000acc:	0992      	lsrs	r2, r2, #6
 8000ace:	4927      	ldr	r1, [pc, #156]	; (8000b6c <HAL_ADC_ConfigChannel+0x4b0>)
 8000ad0:	fba1 1202 	umull	r1, r2, r1, r2
 8000ad4:	0992      	lsrs	r2, r2, #6
 8000ad6:	0052      	lsls	r2, r2, #1
 8000ad8:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 8000ada:	e002      	b.n	8000ae2 <HAL_ADC_ConfigChannel+0x426>
                wait_loop_index--;
 8000adc:	9a01      	ldr	r2, [sp, #4]
 8000ade:	3a01      	subs	r2, #1
 8000ae0:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 8000ae2:	9a01      	ldr	r2, [sp, #4]
 8000ae4:	2a00      	cmp	r2, #0
 8000ae6:	d1f9      	bne.n	8000adc <HAL_ADC_ConfigChannel+0x420>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ae8:	2000      	movs	r0, #0
 8000aea:	e5fe      	b.n	80006ea <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000aec:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
 8000af0:	d1c5      	bne.n	8000a7e <HAL_ADC_ConfigChannel+0x3c2>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8000af2:	4a1c      	ldr	r2, [pc, #112]	; (8000b64 <HAL_ADC_ConfigChannel+0x4a8>)
 8000af4:	4291      	cmp	r1, r2
 8000af6:	d001      	beq.n	8000afc <HAL_ADC_ConfigChannel+0x440>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000af8:	2000      	movs	r0, #0
 8000afa:	e5f6      	b.n	80006ea <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8000afc:	f046 7280 	orr.w	r2, r6, #16777216	; 0x1000000
 8000b00:	68a9      	ldr	r1, [r5, #8]
 8000b02:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000b06:	430a      	orrs	r2, r1
 8000b08:	60aa      	str	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	e5ed      	b.n	80006ea <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000b0e:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
 8000b12:	d115      	bne.n	8000b40 <HAL_ADC_ConfigChannel+0x484>
            if (ADC_VREFINT_INSTANCE(hadc))
 8000b14:	4a13      	ldr	r2, [pc, #76]	; (8000b64 <HAL_ADC_ConfigChannel+0x4a8>)
 8000b16:	4291      	cmp	r1, r2
 8000b18:	d001      	beq.n	8000b1e <HAL_ADC_ConfigChannel+0x462>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	e5e5      	b.n	80006ea <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8000b1e:	f446 0280 	orr.w	r2, r6, #4194304	; 0x400000
 8000b22:	68a9      	ldr	r1, [r5, #8]
 8000b24:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	60aa      	str	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	e5dc      	b.n	80006ea <HAL_ADC_ConfigChannel+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000b32:	f042 0220 	orr.w	r2, r2, #32
 8000b36:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8000b38:	2001      	movs	r0, #1
 8000b3a:	e5d6      	b.n	80006ea <HAL_ADC_ConfigChannel+0x2e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	e5d4      	b.n	80006ea <HAL_ADC_ConfigChannel+0x2e>
 8000b40:	2000      	movs	r0, #0
 8000b42:	e5d2      	b.n	80006ea <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8000b44:	2002      	movs	r0, #2
 8000b46:	e5d3      	b.n	80006f0 <HAL_ADC_ConfigChannel+0x34>
 8000b48:	40022000 	.word	0x40022000
 8000b4c:	40022100 	.word	0x40022100
 8000b50:	40022300 	.word	0x40022300
 8000b54:	cb840000 	.word	0xcb840000
 8000b58:	c7520000 	.word	0xc7520000
 8000b5c:	cfb80000 	.word	0xcfb80000
 8000b60:	58026300 	.word	0x58026300
 8000b64:	58026000 	.word	0x58026000
 8000b68:	20000078 	.word	0x20000078
 8000b6c:	053e2d63 	.word	0x053e2d63

08000b70 <ADC_Enable>:
{
 8000b70:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000b72:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b74:	689a      	ldr	r2, [r3, #8]
 8000b76:	f012 0f01 	tst.w	r2, #1
 8000b7a:	d152      	bne.n	8000c22 <ADC_Enable+0xb2>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8000b7c:	6899      	ldr	r1, [r3, #8]
 8000b7e:	4a2a      	ldr	r2, [pc, #168]	; (8000c28 <ADC_Enable+0xb8>)
 8000b80:	4211      	tst	r1, r2
 8000b82:	d009      	beq.n	8000b98 <ADC_Enable+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b84:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000b86:	f043 0310 	orr.w	r3, r3, #16
 8000b8a:	6543      	str	r3, [r0, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b8c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8000b94:	2001      	movs	r0, #1
 8000b96:	e045      	b.n	8000c24 <ADC_Enable+0xb4>
 8000b98:	4604      	mov	r4, r0
  MODIFY_REG(ADCx->CR,
 8000b9a:	6899      	ldr	r1, [r3, #8]
 8000b9c:	4a23      	ldr	r2, [pc, #140]	; (8000c2c <ADC_Enable+0xbc>)
 8000b9e:	400a      	ands	r2, r1
 8000ba0:	f042 0201 	orr.w	r2, r2, #1
 8000ba4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000ba6:	f7ff fd07 	bl	80005b8 <HAL_GetTick>
 8000baa:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000bac:	6823      	ldr	r3, [r4, #0]
 8000bae:	4920      	ldr	r1, [pc, #128]	; (8000c30 <ADC_Enable+0xc0>)
 8000bb0:	4a20      	ldr	r2, [pc, #128]	; (8000c34 <ADC_Enable+0xc4>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	bf18      	it	ne
 8000bb6:	428b      	cmpne	r3, r1
 8000bb8:	d10d      	bne.n	8000bd6 <ADC_Enable+0x66>
 8000bba:	f502 7200 	add.w	r2, r2, #512	; 0x200
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000bbe:	6892      	ldr	r2, [r2, #8]
 8000bc0:	f002 021f 	and.w	r2, r2, #31
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000bc4:	491b      	ldr	r1, [pc, #108]	; (8000c34 <ADC_Enable+0xc4>)
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d007      	beq.n	8000bda <ADC_Enable+0x6a>
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4299      	cmp	r1, r3
 8000bce:	d00c      	beq.n	8000bea <ADC_Enable+0x7a>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000bd0:	b15a      	cbz	r2, 8000bea <ADC_Enable+0x7a>
  return HAL_OK;
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	e026      	b.n	8000c24 <ADC_Enable+0xb4>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000bd6:	4a18      	ldr	r2, [pc, #96]	; (8000c38 <ADC_Enable+0xc8>)
 8000bd8:	e7f1      	b.n	8000bbe <ADC_Enable+0x4e>
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000bda:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 8000bde:	e7f5      	b.n	8000bcc <ADC_Enable+0x5c>
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000be0:	f7ff fcea 	bl	80005b8 <HAL_GetTick>
 8000be4:	1b40      	subs	r0, r0, r5
 8000be6:	2802      	cmp	r0, #2
 8000be8:	d80f      	bhi.n	8000c0a <ADC_Enable+0x9a>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8000bea:	6823      	ldr	r3, [r4, #0]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	f012 0f01 	tst.w	r2, #1
 8000bf2:	d114      	bne.n	8000c1e <ADC_Enable+0xae>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	f012 0f01 	tst.w	r2, #1
 8000bfa:	d1f1      	bne.n	8000be0 <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 8000bfc:	6899      	ldr	r1, [r3, #8]
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	; (8000c2c <ADC_Enable+0xbc>)
 8000c00:	400a      	ands	r2, r1
 8000c02:	f042 0201 	orr.w	r2, r2, #1
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	e7ea      	b.n	8000be0 <ADC_Enable+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c0a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c0c:	f043 0310 	orr.w	r3, r3, #16
 8000c10:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	e002      	b.n	8000c24 <ADC_Enable+0xb4>
  return HAL_OK;
 8000c1e:	2000      	movs	r0, #0
 8000c20:	e000      	b.n	8000c24 <ADC_Enable+0xb4>
 8000c22:	2000      	movs	r0, #0
}
 8000c24:	bd38      	pop	{r3, r4, r5, pc}
 8000c26:	bf00      	nop
 8000c28:	8000003f 	.word	0x8000003f
 8000c2c:	7fffffc0 	.word	0x7fffffc0
 8000c30:	40022000 	.word	0x40022000
 8000c34:	40022100 	.word	0x40022100
 8000c38:	58026300 	.word	0x58026300

08000c3c <HAL_ADC_Start_DMA>:
{
 8000c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000c3e:	6804      	ldr	r4, [r0, #0]
 8000c40:	4e41      	ldr	r6, [pc, #260]	; (8000d48 <HAL_ADC_Start_DMA+0x10c>)
 8000c42:	4d42      	ldr	r5, [pc, #264]	; (8000d4c <HAL_ADC_Start_DMA+0x110>)
 8000c44:	42ac      	cmp	r4, r5
 8000c46:	bf18      	it	ne
 8000c48:	42b4      	cmpne	r4, r6
 8000c4a:	d11e      	bne.n	8000c8a <HAL_ADC_Start_DMA+0x4e>
 8000c4c:	f505 7500 	add.w	r5, r5, #512	; 0x200
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000c50:	68ad      	ldr	r5, [r5, #8]
 8000c52:	f005 051f 	and.w	r5, r5, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000c56:	68a4      	ldr	r4, [r4, #8]
 8000c58:	f014 0f04 	tst.w	r4, #4
 8000c5c:	d16e      	bne.n	8000d3c <HAL_ADC_Start_DMA+0x100>
    __HAL_LOCK(hadc);
 8000c5e:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8000c62:	2c01      	cmp	r4, #1
 8000c64:	d06d      	beq.n	8000d42 <HAL_ADC_Start_DMA+0x106>
 8000c66:	2301      	movs	r3, #1
 8000c68:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000c6c:	2d05      	cmp	r5, #5
 8000c6e:	bf14      	ite	ne
 8000c70:	2400      	movne	r4, #0
 8000c72:	2401      	moveq	r4, #1
 8000c74:	2d00      	cmp	r5, #0
 8000c76:	bf08      	it	eq
 8000c78:	461c      	moveq	r4, r3
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000c7a:	b944      	cbnz	r4, 8000c8e <HAL_ADC_Start_DMA+0x52>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000c7c:	2d09      	cmp	r5, #9
 8000c7e:	d006      	beq.n	8000c8e <HAL_ADC_Start_DMA+0x52>
      __HAL_UNLOCK(hadc);
 8000c80:	2300      	movs	r3, #0
 8000c82:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
      tmp_hal_status = HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e059      	b.n	8000d3e <HAL_ADC_Start_DMA+0x102>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000c8a:	4d31      	ldr	r5, [pc, #196]	; (8000d50 <HAL_ADC_Start_DMA+0x114>)
 8000c8c:	e7e0      	b.n	8000c50 <HAL_ADC_Start_DMA+0x14>
 8000c8e:	4616      	mov	r6, r2
 8000c90:	460f      	mov	r7, r1
 8000c92:	4604      	mov	r4, r0
      tmp_hal_status = ADC_Enable(hadc);
 8000c94:	f7ff ff6c 	bl	8000b70 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2800      	cmp	r0, #0
 8000c9c:	d14a      	bne.n	8000d34 <HAL_ADC_Start_DMA+0xf8>
        ADC_STATE_CLR_SET(hadc->State,
 8000c9e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000ca0:	4b2c      	ldr	r3, [pc, #176]	; (8000d54 <HAL_ADC_Start_DMA+0x118>)
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca8:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000caa:	6823      	ldr	r3, [r4, #0]
 8000cac:	4a27      	ldr	r2, [pc, #156]	; (8000d4c <HAL_ADC_Start_DMA+0x110>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d03a      	beq.n	8000d28 <HAL_ADC_Start_DMA+0xec>
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d000      	beq.n	8000cba <HAL_ADC_Start_DMA+0x7e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000cb8:	b91d      	cbnz	r5, 8000cc2 <HAL_ADC_Start_DMA+0x86>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000cbc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000cc0:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000cc2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000cc4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000cc8:	d031      	beq.n	8000d2e <HAL_ADC_Start_DMA+0xf2>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000cca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000ccc:	f023 0306 	bic.w	r3, r3, #6
 8000cd0:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000cd2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000cd4:	4a20      	ldr	r2, [pc, #128]	; (8000d58 <HAL_ADC_Start_DMA+0x11c>)
 8000cd6:	63da      	str	r2, [r3, #60]	; 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000cd8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000cda:	4a20      	ldr	r2, [pc, #128]	; (8000d5c <HAL_ADC_Start_DMA+0x120>)
 8000cdc:	641a      	str	r2, [r3, #64]	; 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000cde:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000ce0:	4a1f      	ldr	r2, [pc, #124]	; (8000d60 <HAL_ADC_Start_DMA+0x124>)
 8000ce2:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000ce4:	6823      	ldr	r3, [r4, #0]
 8000ce6:	221c      	movs	r2, #28
 8000ce8:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8000cea:	2300      	movs	r3, #0
 8000cec:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000cf0:	6822      	ldr	r2, [r4, #0]
 8000cf2:	6853      	ldr	r3, [r2, #4]
 8000cf4:	f043 0310 	orr.w	r3, r3, #16
 8000cf8:	6053      	str	r3, [r2, #4]
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8000cfa:	6821      	ldr	r1, [r4, #0]
 8000cfc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8000cfe:	68ca      	ldr	r2, [r1, #12]
 8000d00:	f022 0203 	bic.w	r2, r2, #3
 8000d04:	4313      	orrs	r3, r2
 8000d06:	60cb      	str	r3, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000d08:	6821      	ldr	r1, [r4, #0]
 8000d0a:	4633      	mov	r3, r6
 8000d0c:	463a      	mov	r2, r7
 8000d0e:	3140      	adds	r1, #64	; 0x40
 8000d10:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000d12:	f000 ff67 	bl	8001be4 <HAL_DMA_Start_IT>
 8000d16:	4603      	mov	r3, r0
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000d18:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8000d1a:	6888      	ldr	r0, [r1, #8]
 8000d1c:	4a11      	ldr	r2, [pc, #68]	; (8000d64 <HAL_ADC_Start_DMA+0x128>)
 8000d1e:	4002      	ands	r2, r0
 8000d20:	f042 0204 	orr.w	r2, r2, #4
 8000d24:	608a      	str	r2, [r1, #8]
 8000d26:	e00a      	b.n	8000d3e <HAL_ADC_Start_DMA+0x102>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000d28:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8000d2c:	e7c2      	b.n	8000cb4 <HAL_ADC_Start_DMA+0x78>
          ADC_CLEAR_ERRORCODE(hadc);
 8000d2e:	2300      	movs	r3, #0
 8000d30:	65a3      	str	r3, [r4, #88]	; 0x58
 8000d32:	e7ce      	b.n	8000cd2 <HAL_ADC_Start_DMA+0x96>
        __HAL_UNLOCK(hadc);
 8000d34:	2200      	movs	r2, #0
 8000d36:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 8000d3a:	e000      	b.n	8000d3e <HAL_ADC_Start_DMA+0x102>
    tmp_hal_status = HAL_BUSY;
 8000d3c:	2302      	movs	r3, #2
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8000d42:	2302      	movs	r3, #2
 8000d44:	e7fb      	b.n	8000d3e <HAL_ADC_Start_DMA+0x102>
 8000d46:	bf00      	nop
 8000d48:	40022000 	.word	0x40022000
 8000d4c:	40022100 	.word	0x40022100
 8000d50:	58026300 	.word	0x58026300
 8000d54:	fffff0fe 	.word	0xfffff0fe
 8000d58:	08000619 	.word	0x08000619
 8000d5c:	0800060d 	.word	0x0800060d
 8000d60:	080006a1 	.word	0x080006a1
 8000d64:	7fffffc0 	.word	0x7fffffc0

08000d68 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	4605      	mov	r5, r0
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8000d6c:	6803      	ldr	r3, [r0, #0]
 8000d6e:	494f      	ldr	r1, [pc, #316]	; (8000eac <ADC_ConfigureBoostMode+0x144>)
 8000d70:	4a4f      	ldr	r2, [pc, #316]	; (8000eb0 <ADC_ConfigureBoostMode+0x148>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	bf18      	it	ne
 8000d76:	428b      	cmpne	r3, r1
 8000d78:	d123      	bne.n	8000dc2 <ADC_ConfigureBoostMode+0x5a>
 8000d7a:	4b4e      	ldr	r3, [pc, #312]	; (8000eb4 <ADC_ConfigureBoostMode+0x14c>)
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000d82:	bf14      	ite	ne
 8000d84:	2301      	movne	r3, #1
 8000d86:	2300      	moveq	r3, #0
 8000d88:	b34b      	cbz	r3, 8000dde <ADC_ConfigureBoostMode+0x76>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8000d8a:	f002 fe25 	bl	80039d8 <HAL_RCC_GetHCLKFreq>
 8000d8e:	4604      	mov	r4, r0
    switch(hadc->Init.ClockPrescaler)
 8000d90:	686b      	ldr	r3, [r5, #4]
 8000d92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000d96:	d01c      	beq.n	8000dd2 <ADC_ConfigureBoostMode+0x6a>
 8000d98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000d9c:	d01d      	beq.n	8000dda <ADC_ConfigureBoostMode+0x72>
 8000d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000da2:	d016      	beq.n	8000dd2 <ADC_ConfigureBoostMode+0x6a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8000da4:	f7ff fc22 	bl	80005ec <HAL_GetREVID>
 8000da8:	f241 0303 	movw	r3, #4099	; 0x1003
 8000dac:	4298      	cmp	r0, r3
 8000dae:	d856      	bhi.n	8000e5e <ADC_ConfigureBoostMode+0xf6>
  {
    if(freq > 20000000UL)
 8000db0:	4b41      	ldr	r3, [pc, #260]	; (8000eb8 <ADC_ConfigureBoostMode+0x150>)
 8000db2:	429c      	cmp	r4, r3
 8000db4:	d94d      	bls.n	8000e52 <ADC_ConfigureBoostMode+0xea>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8000db6:	682a      	ldr	r2, [r5, #0]
 8000db8:	6893      	ldr	r3, [r2, #8]
 8000dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dbe:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8000dc0:	bd38      	pop	{r3, r4, r5, pc}
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8000dc2:	4b3e      	ldr	r3, [pc, #248]	; (8000ebc <ADC_ConfigureBoostMode+0x154>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000dca:	bf14      	ite	ne
 8000dcc:	2301      	movne	r3, #1
 8000dce:	2300      	moveq	r3, #0
 8000dd0:	e7da      	b.n	8000d88 <ADC_ConfigureBoostMode+0x20>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8000dd2:	0c1b      	lsrs	r3, r3, #16
 8000dd4:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8000dd8:	e7e4      	b.n	8000da4 <ADC_ConfigureBoostMode+0x3c>
        freq /= 4UL;
 8000dda:	0884      	lsrs	r4, r0, #2
        break;
 8000ddc:	e7e2      	b.n	8000da4 <ADC_ConfigureBoostMode+0x3c>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8000dde:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000de2:	f003 fec3 	bl	8004b6c <HAL_RCCEx_GetPeriphCLKFreq>
 8000de6:	4604      	mov	r4, r0
    switch(hadc->Init.ClockPrescaler)
 8000de8:	686b      	ldr	r3, [r5, #4]
 8000dea:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8000dee:	d016      	beq.n	8000e1e <ADC_ConfigureBoostMode+0xb6>
 8000df0:	d90b      	bls.n	8000e0a <ADC_ConfigureBoostMode+0xa2>
 8000df2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8000df6:	d028      	beq.n	8000e4a <ADC_ConfigureBoostMode+0xe2>
 8000df8:	d81d      	bhi.n	8000e36 <ADC_ConfigureBoostMode+0xce>
 8000dfa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8000dfe:	d022      	beq.n	8000e46 <ADC_ConfigureBoostMode+0xde>
 8000e00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000e04:	d1ce      	bne.n	8000da4 <ADC_ConfigureBoostMode+0x3c>
        freq /= 32UL;
 8000e06:	0944      	lsrs	r4, r0, #5
        break;
 8000e08:	e7cc      	b.n	8000da4 <ADC_ConfigureBoostMode+0x3c>
    switch(hadc->Init.ClockPrescaler)
 8000e0a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000e0e:	d006      	beq.n	8000e1e <ADC_ConfigureBoostMode+0xb6>
 8000e10:	d80a      	bhi.n	8000e28 <ADC_ConfigureBoostMode+0xc0>
 8000e12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000e16:	d002      	beq.n	8000e1e <ADC_ConfigureBoostMode+0xb6>
 8000e18:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000e1c:	d1c2      	bne.n	8000da4 <ADC_ConfigureBoostMode+0x3c>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8000e1e:	0c9b      	lsrs	r3, r3, #18
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8000e26:	e7bd      	b.n	8000da4 <ADC_ConfigureBoostMode+0x3c>
    switch(hadc->Init.ClockPrescaler)
 8000e28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000e2c:	d0f7      	beq.n	8000e1e <ADC_ConfigureBoostMode+0xb6>
 8000e2e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8000e32:	d1b7      	bne.n	8000da4 <ADC_ConfigureBoostMode+0x3c>
 8000e34:	e7f3      	b.n	8000e1e <ADC_ConfigureBoostMode+0xb6>
 8000e36:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8000e3a:	d008      	beq.n	8000e4e <ADC_ConfigureBoostMode+0xe6>
 8000e3c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8000e40:	d1b0      	bne.n	8000da4 <ADC_ConfigureBoostMode+0x3c>
        freq /= 256UL;
 8000e42:	0a04      	lsrs	r4, r0, #8
        break;
 8000e44:	e7ae      	b.n	8000da4 <ADC_ConfigureBoostMode+0x3c>
        freq /= 16UL;
 8000e46:	0904      	lsrs	r4, r0, #4
      break;
 8000e48:	e7ac      	b.n	8000da4 <ADC_ConfigureBoostMode+0x3c>
        freq /= 64UL;
 8000e4a:	0984      	lsrs	r4, r0, #6
        break;
 8000e4c:	e7aa      	b.n	8000da4 <ADC_ConfigureBoostMode+0x3c>
        freq /= 128UL;
 8000e4e:	09c4      	lsrs	r4, r0, #7
        break;
 8000e50:	e7a8      	b.n	8000da4 <ADC_ConfigureBoostMode+0x3c>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8000e52:	682a      	ldr	r2, [r5, #0]
 8000e54:	6893      	ldr	r3, [r2, #8]
 8000e56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e5a:	6093      	str	r3, [r2, #8]
 8000e5c:	e7b0      	b.n	8000dc0 <ADC_ConfigureBoostMode+0x58>
    freq /= 2U; /* divider by 2 for Rev.V */
 8000e5e:	0864      	lsrs	r4, r4, #1
    if (freq <= 6250000UL)
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <ADC_ConfigureBoostMode+0x158>)
 8000e62:	429c      	cmp	r4, r3
 8000e64:	d90b      	bls.n	8000e7e <ADC_ConfigureBoostMode+0x116>
    else if(freq <= 12500000UL)
 8000e66:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <ADC_ConfigureBoostMode+0x15c>)
 8000e68:	429c      	cmp	r4, r3
 8000e6a:	d90e      	bls.n	8000e8a <ADC_ConfigureBoostMode+0x122>
    else if(freq <= 25000000UL)
 8000e6c:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <ADC_ConfigureBoostMode+0x160>)
 8000e6e:	429c      	cmp	r4, r3
 8000e70:	d913      	bls.n	8000e9a <ADC_ConfigureBoostMode+0x132>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8000e72:	682a      	ldr	r2, [r5, #0]
 8000e74:	6893      	ldr	r3, [r2, #8]
 8000e76:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000e7a:	6093      	str	r3, [r2, #8]
}
 8000e7c:	e7a0      	b.n	8000dc0 <ADC_ConfigureBoostMode+0x58>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8000e7e:	682a      	ldr	r2, [r5, #0]
 8000e80:	6893      	ldr	r3, [r2, #8]
 8000e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e86:	6093      	str	r3, [r2, #8]
 8000e88:	e79a      	b.n	8000dc0 <ADC_ConfigureBoostMode+0x58>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8000e8a:	682a      	ldr	r2, [r5, #0]
 8000e8c:	6893      	ldr	r3, [r2, #8]
 8000e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e96:	6093      	str	r3, [r2, #8]
 8000e98:	e792      	b.n	8000dc0 <ADC_ConfigureBoostMode+0x58>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8000e9a:	682a      	ldr	r2, [r5, #0]
 8000e9c:	6893      	ldr	r3, [r2, #8]
 8000e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea6:	6093      	str	r3, [r2, #8]
 8000ea8:	e78a      	b.n	8000dc0 <ADC_ConfigureBoostMode+0x58>
 8000eaa:	bf00      	nop
 8000eac:	40022000 	.word	0x40022000
 8000eb0:	40022100 	.word	0x40022100
 8000eb4:	40022300 	.word	0x40022300
 8000eb8:	01312d00 	.word	0x01312d00
 8000ebc:	58026300 	.word	0x58026300
 8000ec0:	005f5e10 	.word	0x005f5e10
 8000ec4:	00bebc20 	.word	0x00bebc20
 8000ec8:	017d7840 	.word	0x017d7840

08000ecc <HAL_ADC_Init>:
{
 8000ecc:	b530      	push	{r4, r5, lr}
 8000ece:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8000ed4:	2800      	cmp	r0, #0
 8000ed6:	f000 811c 	beq.w	8001112 <HAL_ADC_Init+0x246>
 8000eda:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000edc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000ede:	b1e3      	cbz	r3, 8000f1a <HAL_ADC_Init+0x4e>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000ee0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8000ee8:	d003      	beq.n	8000ef2 <HAL_ADC_Init+0x26>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000eea:	6899      	ldr	r1, [r3, #8]
 8000eec:	4a8a      	ldr	r2, [pc, #552]	; (8001118 <HAL_ADC_Init+0x24c>)
 8000eee:	400a      	ands	r2, r1
 8000ef0:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ef2:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ef4:	689a      	ldr	r2, [r3, #8]
 8000ef6:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000efa:	d11b      	bne.n	8000f34 <HAL_ADC_Init+0x68>
  MODIFY_REG(ADCx->CR,
 8000efc:	6899      	ldr	r1, [r3, #8]
 8000efe:	4a87      	ldr	r2, [pc, #540]	; (800111c <HAL_ADC_Init+0x250>)
 8000f00:	400a      	ands	r2, r1
 8000f02:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f06:	609a      	str	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000f08:	4b85      	ldr	r3, [pc, #532]	; (8001120 <HAL_ADC_Init+0x254>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	099b      	lsrs	r3, r3, #6
 8000f0e:	4a85      	ldr	r2, [pc, #532]	; (8001124 <HAL_ADC_Init+0x258>)
 8000f10:	fba2 2303 	umull	r2, r3, r2, r3
 8000f14:	099b      	lsrs	r3, r3, #6
 8000f16:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000f18:	e009      	b.n	8000f2e <HAL_ADC_Init+0x62>
    HAL_ADC_MspInit(hadc);
 8000f1a:	f006 fea3 	bl	8007c64 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8000f1e:	2300      	movs	r3, #0
 8000f20:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8000f22:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000f26:	e7db      	b.n	8000ee0 <HAL_ADC_Init+0x14>
      wait_loop_index--;
 8000f28:	9b01      	ldr	r3, [sp, #4]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000f2e:	9b01      	ldr	r3, [sp, #4]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1f9      	bne.n	8000f28 <HAL_ADC_Init+0x5c>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f34:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f36:	689a      	ldr	r2, [r3, #8]
 8000f38:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000f3c:	f040 809d 	bne.w	800107a <HAL_ADC_Init+0x1ae>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f40:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000f42:	f042 0210 	orr.w	r2, r2, #16
 8000f46:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f48:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000f4a:	f042 0201 	orr.w	r2, r2, #1
 8000f4e:	65a2      	str	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8000f50:	2501      	movs	r5, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	f012 0f04 	tst.w	r2, #4
 8000f58:	f000 8091 	beq.w	800107e <HAL_ADC_Init+0x1b2>
 8000f5c:	2101      	movs	r1, #1
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f5e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000f60:	f012 0f10 	tst.w	r2, #16
 8000f64:	f040 80cd 	bne.w	8001102 <HAL_ADC_Init+0x236>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000f68:	2900      	cmp	r1, #0
 8000f6a:	f040 80ca 	bne.w	8001102 <HAL_ADC_Init+0x236>
    ADC_STATE_CLR_SET(hadc->State,
 8000f6e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000f70:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8000f74:	f042 0202 	orr.w	r2, r2, #2
 8000f78:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	f012 0f01 	tst.w	r2, #1
 8000f80:	d121      	bne.n	8000fc6 <HAL_ADC_Init+0xfa>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000f82:	4969      	ldr	r1, [pc, #420]	; (8001128 <HAL_ADC_Init+0x25c>)
 8000f84:	4a69      	ldr	r2, [pc, #420]	; (800112c <HAL_ADC_Init+0x260>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	bf18      	it	ne
 8000f8a:	428b      	cmpne	r3, r1
 8000f8c:	bf0c      	ite	eq
 8000f8e:	2301      	moveq	r3, #1
 8000f90:	2300      	movne	r3, #0
 8000f92:	d17a      	bne.n	800108a <HAL_ADC_Init+0x1be>
 8000f94:	688a      	ldr	r2, [r1, #8]
 8000f96:	f012 0f01 	tst.w	r2, #1
 8000f9a:	d072      	beq.n	8001082 <HAL_ADC_Init+0x1b6>
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4963      	ldr	r1, [pc, #396]	; (800112c <HAL_ADC_Init+0x260>)
 8000fa0:	6889      	ldr	r1, [r1, #8]
 8000fa2:	f011 0f01 	tst.w	r1, #1
 8000fa6:	d06e      	beq.n	8001086 <HAL_ADC_Init+0x1ba>
 8000fa8:	2101      	movs	r1, #1
 8000faa:	430a      	orrs	r2, r1
 8000fac:	bf0c      	ite	eq
 8000fae:	2201      	moveq	r2, #1
 8000fb0:	2200      	movne	r2, #0
 8000fb2:	b142      	cbz	r2, 8000fc6 <HAL_ADC_Init+0xfa>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d073      	beq.n	80010a0 <HAL_ADC_Init+0x1d4>
 8000fb8:	495d      	ldr	r1, [pc, #372]	; (8001130 <HAL_ADC_Init+0x264>)
 8000fba:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000fbc:	688a      	ldr	r2, [r1, #8]
 8000fbe:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	608b      	str	r3, [r1, #8]
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000fc6:	f7ff fb11 	bl	80005ec <HAL_GetREVID>
 8000fca:	f241 0303 	movw	r3, #4099	; 0x1003
 8000fce:	4298      	cmp	r0, r3
 8000fd0:	d902      	bls.n	8000fd8 <HAL_ADC_Init+0x10c>
 8000fd2:	68a3      	ldr	r3, [r4, #8]
 8000fd4:	2b10      	cmp	r3, #16
 8000fd6:	d065      	beq.n	80010a4 <HAL_ADC_Init+0x1d8>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000fd8:	7d62      	ldrb	r2, [r4, #21]
                  hadc->Init.Overrun                                                    |
 8000fda:	6b23      	ldr	r3, [r4, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000fdc:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                  hadc->Init.Resolution                                                 |
 8000fe0:	68a2      	ldr	r2, [r4, #8]
                  hadc->Init.Overrun                                                    |
 8000fe2:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8000fe4:	7f22      	ldrb	r2, [r4, #28]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000fe6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fea:	7f22      	ldrb	r2, [r4, #28]
 8000fec:	2a01      	cmp	r2, #1
 8000fee:	d064      	beq.n	80010ba <HAL_ADC_Init+0x1ee>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ff0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ff2:	b122      	cbz	r2, 8000ffe <HAL_ADC_Init+0x132>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000ff4:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000ff8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000ffa:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000ffc:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000ffe:	6821      	ldr	r1, [r4, #0]
 8001000:	68c8      	ldr	r0, [r1, #12]
 8001002:	4a4c      	ldr	r2, [pc, #304]	; (8001134 <HAL_ADC_Init+0x268>)
 8001004:	4002      	ands	r2, r0
 8001006:	4313      	orrs	r3, r2
 8001008:	60cb      	str	r3, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800100a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	f012 0f04 	tst.w	r2, #4
 8001012:	d057      	beq.n	80010c4 <HAL_ADC_Init+0x1f8>
 8001014:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	f012 0f08 	tst.w	r2, #8
 800101c:	d054      	beq.n	80010c8 <HAL_ADC_Init+0x1fc>
 800101e:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001020:	430a      	orrs	r2, r1
 8001022:	d11b      	bne.n	800105c <HAL_ADC_Init+0x190>
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001024:	7d21      	ldrb	r1, [r4, #20]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001026:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      tmpCFGR = (
 8001028:	ea42 3181 	orr.w	r1, r2, r1, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800102c:	68d8      	ldr	r0, [r3, #12]
 800102e:	4a42      	ldr	r2, [pc, #264]	; (8001138 <HAL_ADC_Init+0x26c>)
 8001030:	4002      	ands	r2, r0
 8001032:	430a      	orrs	r2, r1
 8001034:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8001036:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800103a:	2b01      	cmp	r3, #1
 800103c:	d046      	beq.n	80010cc <HAL_ADC_Init+0x200>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800103e:	6822      	ldr	r2, [r4, #0]
 8001040:	6913      	ldr	r3, [r2, #16]
 8001042:	f023 0301 	bic.w	r3, r3, #1
 8001046:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001048:	6822      	ldr	r2, [r4, #0]
 800104a:	6913      	ldr	r3, [r2, #16]
 800104c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001052:	430b      	orrs	r3, r1
 8001054:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8001056:	4620      	mov	r0, r4
 8001058:	f7ff fe86 	bl	8000d68 <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800105c:	68e3      	ldr	r3, [r4, #12]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d046      	beq.n	80010f0 <HAL_ADC_Init+0x224>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001062:	6822      	ldr	r2, [r4, #0]
 8001064:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001066:	f023 030f 	bic.w	r3, r3, #15
 800106a:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800106c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800106e:	f023 0303 	bic.w	r3, r3, #3
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6563      	str	r3, [r4, #84]	; 0x54
 8001078:	e048      	b.n	800110c <HAL_ADC_Init+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800107a:	2500      	movs	r5, #0
 800107c:	e769      	b.n	8000f52 <HAL_ADC_Init+0x86>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800107e:	2100      	movs	r1, #0
 8001080:	e76d      	b.n	8000f5e <HAL_ADC_Init+0x92>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001082:	2200      	movs	r2, #0
 8001084:	e78b      	b.n	8000f9e <HAL_ADC_Init+0xd2>
 8001086:	2100      	movs	r1, #0
 8001088:	e78f      	b.n	8000faa <HAL_ADC_Init+0xde>
 800108a:	4a2c      	ldr	r2, [pc, #176]	; (800113c <HAL_ADC_Init+0x270>)
 800108c:	6892      	ldr	r2, [r2, #8]
 800108e:	f012 0f01 	tst.w	r2, #1
 8001092:	d003      	beq.n	800109c <HAL_ADC_Init+0x1d0>
 8001094:	2201      	movs	r2, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001096:	f082 0201 	eor.w	r2, r2, #1
 800109a:	e78a      	b.n	8000fb2 <HAL_ADC_Init+0xe6>
 800109c:	2200      	movs	r2, #0
 800109e:	e7fa      	b.n	8001096 <HAL_ADC_Init+0x1ca>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80010a0:	4927      	ldr	r1, [pc, #156]	; (8001140 <HAL_ADC_Init+0x274>)
 80010a2:	e78a      	b.n	8000fba <HAL_ADC_Init+0xee>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80010a4:	7d61      	ldrb	r1, [r4, #21]
                  hadc->Init.Overrun                                                    |
 80010a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80010a8:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
                  hadc->Init.Overrun                                                    |
 80010ac:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 80010ae:	7f22      	ldrb	r2, [r4, #28]
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 80010b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80010b4:	f043 030c 	orr.w	r3, r3, #12
 80010b8:	e797      	b.n	8000fea <HAL_ADC_Init+0x11e>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80010ba:	6a22      	ldr	r2, [r4, #32]
 80010bc:	3a01      	subs	r2, #1
 80010be:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80010c2:	e795      	b.n	8000ff0 <HAL_ADC_Init+0x124>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010c4:	2100      	movs	r1, #0
 80010c6:	e7a6      	b.n	8001016 <HAL_ADC_Init+0x14a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80010c8:	2200      	movs	r2, #0
 80010ca:	e7a9      	b.n	8001020 <HAL_ADC_Init+0x154>
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80010cc:	6820      	ldr	r0, [r4, #0]
 80010ce:	6902      	ldr	r2, [r0, #16]
 80010d0:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <HAL_ADC_Init+0x278>)
 80010d2:	4013      	ands	r3, r2
 80010d4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80010d6:	1e51      	subs	r1, r2, #1
 80010d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80010da:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010de:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80010e0:	430a      	orrs	r2, r1
 80010e2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80010e4:	430a      	orrs	r2, r1
 80010e6:	4313      	orrs	r3, r2
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6103      	str	r3, [r0, #16]
 80010ee:	e7ab      	b.n	8001048 <HAL_ADC_Init+0x17c>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80010f0:	6821      	ldr	r1, [r4, #0]
 80010f2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80010f4:	f023 030f 	bic.w	r3, r3, #15
 80010f8:	69a2      	ldr	r2, [r4, #24]
 80010fa:	3a01      	subs	r2, #1
 80010fc:	4313      	orrs	r3, r2
 80010fe:	630b      	str	r3, [r1, #48]	; 0x30
 8001100:	e7b4      	b.n	800106c <HAL_ADC_Init+0x1a0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001102:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001104:	f043 0310 	orr.w	r3, r3, #16
 8001108:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800110a:	2501      	movs	r5, #1
}
 800110c:	4628      	mov	r0, r5
 800110e:	b003      	add	sp, #12
 8001110:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001112:	2501      	movs	r5, #1
 8001114:	e7fa      	b.n	800110c <HAL_ADC_Init+0x240>
 8001116:	bf00      	nop
 8001118:	5fffffc0 	.word	0x5fffffc0
 800111c:	6fffffc0 	.word	0x6fffffc0
 8001120:	20000078 	.word	0x20000078
 8001124:	053e2d63 	.word	0x053e2d63
 8001128:	40022000 	.word	0x40022000
 800112c:	40022100 	.word	0x40022100
 8001130:	40022300 	.word	0x40022300
 8001134:	fff0c003 	.word	0xfff0c003
 8001138:	ffffbffc 	.word	0xffffbffc
 800113c:	58026000 	.word	0x58026000
 8001140:	58026300 	.word	0x58026300
 8001144:	fc00f81e 	.word	0xfc00f81e

08001148 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001148:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 800114c:	2a01      	cmp	r2, #1
 800114e:	f000 80aa 	beq.w	80012a6 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
{
 8001152:	b430      	push	{r4, r5}
 8001154:	b09a      	sub	sp, #104	; 0x68
 8001156:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8001158:	2201      	movs	r2, #1
 800115a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800115e:	6802      	ldr	r2, [r0, #0]
 8001160:	4852      	ldr	r0, [pc, #328]	; (80012ac <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 8001162:	4282      	cmp	r2, r0
 8001164:	d043      	beq.n	80011ee <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8001166:	2000      	movs	r0, #0
 8001168:	9001      	str	r0, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 800116a:	9801      	ldr	r0, [sp, #4]
 800116c:	2800      	cmp	r0, #0
 800116e:	d042      	beq.n	80011f6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001170:	6880      	ldr	r0, [r0, #8]
 8001172:	f010 0f04 	tst.w	r0, #4
 8001176:	d047      	beq.n	8001208 <HAL_ADCEx_MultiModeConfigChannel+0xc0>
 8001178:	2401      	movs	r4, #1
 800117a:	6890      	ldr	r0, [r2, #8]
 800117c:	f010 0f04 	tst.w	r0, #4
 8001180:	f040 8082 	bne.w	8001288 <HAL_ADCEx_MultiModeConfigChannel+0x140>
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001184:	2c00      	cmp	r4, #0
 8001186:	d17f      	bne.n	8001288 <HAL_ADCEx_MultiModeConfigChannel+0x140>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001188:	4c48      	ldr	r4, [pc, #288]	; (80012ac <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 800118a:	4849      	ldr	r0, [pc, #292]	; (80012b0 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 800118c:	4282      	cmp	r2, r0
 800118e:	bf18      	it	ne
 8001190:	42a2      	cmpne	r2, r4
 8001192:	d13b      	bne.n	800120c <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8001194:	f500 7000 	add.w	r0, r0, #512	; 0x200

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001198:	680a      	ldr	r2, [r1, #0]
 800119a:	2a00      	cmp	r2, #0
 800119c:	d047      	beq.n	800122e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800119e:	6882      	ldr	r2, [r0, #8]
 80011a0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80011a4:	684c      	ldr	r4, [r1, #4]
 80011a6:	4322      	orrs	r2, r4
 80011a8:	6082      	str	r2, [r0, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4d3f      	ldr	r5, [pc, #252]	; (80012ac <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 80011ae:	4c40      	ldr	r4, [pc, #256]	; (80012b0 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 80011b0:	42a2      	cmp	r2, r4
 80011b2:	bf18      	it	ne
 80011b4:	42aa      	cmpne	r2, r5
 80011b6:	d12f      	bne.n	8001218 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011b8:	68aa      	ldr	r2, [r5, #8]
 80011ba:	f012 0f01 	tst.w	r2, #1
 80011be:	d027      	beq.n	8001210 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
 80011c0:	2401      	movs	r4, #1
 80011c2:	4a3b      	ldr	r2, [pc, #236]	; (80012b0 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 80011c4:	6892      	ldr	r2, [r2, #8]
 80011c6:	f012 0f01 	tst.w	r2, #1
 80011ca:	d023      	beq.n	8001214 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80011cc:	2201      	movs	r2, #1
 80011ce:	4322      	orrs	r2, r4
 80011d0:	bf0c      	ite	eq
 80011d2:	2201      	moveq	r2, #1
 80011d4:	2200      	movne	r2, #0
 80011d6:	2a00      	cmp	r2, #0
 80011d8:	d061      	beq.n	800129e <HAL_ADCEx_MultiModeConfigChannel+0x156>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80011da:	6884      	ldr	r4, [r0, #8]
 80011dc:	4a35      	ldr	r2, [pc, #212]	; (80012b4 <HAL_ADCEx_MultiModeConfigChannel+0x16c>)
 80011de:	4022      	ands	r2, r4
 80011e0:	680c      	ldr	r4, [r1, #0]
 80011e2:	6889      	ldr	r1, [r1, #8]
 80011e4:	4321      	orrs	r1, r4
 80011e6:	430a      	orrs	r2, r1
 80011e8:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ea:	2000      	movs	r0, #0
 80011ec:	e051      	b.n	8001292 <HAL_ADCEx_MultiModeConfigChannel+0x14a>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80011ee:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80011f2:	9001      	str	r0, [sp, #4]
 80011f4:	e7b9      	b.n	800116a <HAL_ADCEx_MultiModeConfigChannel+0x22>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80011f8:	f042 0220 	orr.w	r2, r2, #32
 80011fc:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8001204:	2001      	movs	r0, #1
 8001206:	e047      	b.n	8001298 <HAL_ADCEx_MultiModeConfigChannel+0x150>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001208:	2400      	movs	r4, #0
 800120a:	e7b6      	b.n	800117a <HAL_ADCEx_MultiModeConfigChannel+0x32>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800120c:	482a      	ldr	r0, [pc, #168]	; (80012b8 <HAL_ADCEx_MultiModeConfigChannel+0x170>)
 800120e:	e7c3      	b.n	8001198 <HAL_ADCEx_MultiModeConfigChannel+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001210:	2400      	movs	r4, #0
 8001212:	e7d6      	b.n	80011c2 <HAL_ADCEx_MultiModeConfigChannel+0x7a>
 8001214:	2200      	movs	r2, #0
 8001216:	e7da      	b.n	80011ce <HAL_ADCEx_MultiModeConfigChannel+0x86>
 8001218:	4a28      	ldr	r2, [pc, #160]	; (80012bc <HAL_ADCEx_MultiModeConfigChannel+0x174>)
 800121a:	6892      	ldr	r2, [r2, #8]
 800121c:	f012 0f01 	tst.w	r2, #1
 8001220:	d003      	beq.n	800122a <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 8001222:	2201      	movs	r2, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001224:	f082 0201 	eor.w	r2, r2, #1
 8001228:	e7d5      	b.n	80011d6 <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 800122a:	2200      	movs	r2, #0
 800122c:	e7fa      	b.n	8001224 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800122e:	6881      	ldr	r1, [r0, #8]
 8001230:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8001234:	6081      	str	r1, [r0, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001236:	6819      	ldr	r1, [r3, #0]
 8001238:	4d1c      	ldr	r5, [pc, #112]	; (80012ac <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 800123a:	4c1d      	ldr	r4, [pc, #116]	; (80012b0 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 800123c:	42a1      	cmp	r1, r4
 800123e:	bf18      	it	ne
 8001240:	42a9      	cmpne	r1, r5
 8001242:	d117      	bne.n	8001274 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
 8001244:	68a9      	ldr	r1, [r5, #8]
 8001246:	f011 0f01 	tst.w	r1, #1
 800124a:	d011      	beq.n	8001270 <HAL_ADCEx_MultiModeConfigChannel+0x128>
 800124c:	2401      	movs	r4, #1
 800124e:	4918      	ldr	r1, [pc, #96]	; (80012b0 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 8001250:	6889      	ldr	r1, [r1, #8]
 8001252:	f011 0f01 	tst.w	r1, #1
 8001256:	d000      	beq.n	800125a <HAL_ADCEx_MultiModeConfigChannel+0x112>
 8001258:	2201      	movs	r2, #1
 800125a:	4322      	orrs	r2, r4
 800125c:	bf0c      	ite	eq
 800125e:	2201      	moveq	r2, #1
 8001260:	2200      	movne	r2, #0
 8001262:	b1f2      	cbz	r2, 80012a2 <HAL_ADCEx_MultiModeConfigChannel+0x15a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001264:	6881      	ldr	r1, [r0, #8]
 8001266:	4a13      	ldr	r2, [pc, #76]	; (80012b4 <HAL_ADCEx_MultiModeConfigChannel+0x16c>)
 8001268:	400a      	ands	r2, r1
 800126a:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800126c:	2000      	movs	r0, #0
 800126e:	e010      	b.n	8001292 <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 8001270:	4614      	mov	r4, r2
 8001272:	e7ec      	b.n	800124e <HAL_ADCEx_MultiModeConfigChannel+0x106>
 8001274:	4911      	ldr	r1, [pc, #68]	; (80012bc <HAL_ADCEx_MultiModeConfigChannel+0x174>)
 8001276:	6889      	ldr	r1, [r1, #8]
 8001278:	f011 0f01 	tst.w	r1, #1
 800127c:	d000      	beq.n	8001280 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800127e:	2201      	movs	r2, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001280:	fab2 f282 	clz	r2, r2
 8001284:	0952      	lsrs	r2, r2, #5
 8001286:	e7ec      	b.n	8001262 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001288:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800128a:	f042 0220 	orr.w	r2, r2, #32
 800128e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001290:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8001298:	b01a      	add	sp, #104	; 0x68
 800129a:	bc30      	pop	{r4, r5}
 800129c:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800129e:	2000      	movs	r0, #0
 80012a0:	e7f7      	b.n	8001292 <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 80012a2:	2000      	movs	r0, #0
 80012a4:	e7f5      	b.n	8001292 <HAL_ADCEx_MultiModeConfigChannel+0x14a>
  __HAL_LOCK(hadc);
 80012a6:	2002      	movs	r0, #2
}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40022000 	.word	0x40022000
 80012b0:	40022100 	.word	0x40022100
 80012b4:	fffff0e0 	.word	0xfffff0e0
 80012b8:	58026300 	.word	0x58026300
 80012bc:	58026000 	.word	0x58026000

080012c0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c0:	4906      	ldr	r1, [pc, #24]	; (80012dc <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80012c2:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012c8:	041b      	lsls	r3, r3, #16
 80012ca:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012cc:	0200      	lsls	r0, r0, #8
 80012ce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80012d4:	4a02      	ldr	r2, [pc, #8]	; (80012e0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80012d6:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80012d8:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00
 80012e0:	05fa0000 	.word	0x05fa0000

080012e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_NVIC_SetPriority+0x58>)
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ee:	f1c3 0407 	rsb	r4, r3, #7
 80012f2:	2c04      	cmp	r4, #4
 80012f4:	bf28      	it	cs
 80012f6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f8:	1d1d      	adds	r5, r3, #4
 80012fa:	2d06      	cmp	r5, #6
 80012fc:	d914      	bls.n	8001328 <HAL_NVIC_SetPriority+0x44>
 80012fe:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001304:	fa05 f404 	lsl.w	r4, r5, r4
 8001308:	ea21 0104 	bic.w	r1, r1, r4
 800130c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800130e:	fa05 f303 	lsl.w	r3, r5, r3
 8001312:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001316:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001318:	2800      	cmp	r0, #0
 800131a:	db07      	blt.n	800132c <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	0109      	lsls	r1, r1, #4
 800131e:	b2c9      	uxtb	r1, r1
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <HAL_NVIC_SetPriority+0x5c>)
 8001322:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001324:	bc30      	pop	{r4, r5}
 8001326:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001328:	2300      	movs	r3, #0
 800132a:	e7e9      	b.n	8001300 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132c:	f000 000f 	and.w	r0, r0, #15
 8001330:	0109      	lsls	r1, r1, #4
 8001332:	b2c9      	uxtb	r1, r1
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <HAL_NVIC_SetPriority+0x60>)
 8001336:	5419      	strb	r1, [r3, r0]
 8001338:	e7f4      	b.n	8001324 <HAL_NVIC_SetPriority+0x40>
 800133a:	bf00      	nop
 800133c:	e000ed00 	.word	0xe000ed00
 8001340:	e000e400 	.word	0xe000e400
 8001344:	e000ed14 	.word	0xe000ed14

08001348 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001348:	2800      	cmp	r0, #0
 800134a:	db07      	blt.n	800135c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134c:	f000 021f 	and.w	r2, r0, #31
 8001350:	0940      	lsrs	r0, r0, #5
 8001352:	2301      	movs	r3, #1
 8001354:	4093      	lsls	r3, r2
 8001356:	4a02      	ldr	r2, [pc, #8]	; (8001360 <HAL_NVIC_EnableIRQ+0x18>)
 8001358:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000e100 	.word	0xe000e100

08001364 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001364:	3801      	subs	r0, #1
 8001366:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800136a:	d20a      	bcs.n	8001382 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_SYSTICK_Config+0x24>)
 800136e:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001370:	4a06      	ldr	r2, [pc, #24]	; (800138c <HAL_SYSTICK_Config+0x28>)
 8001372:	21f0      	movs	r1, #240	; 0xf0
 8001374:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001378:	2000      	movs	r0, #0
 800137a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137c:	2207      	movs	r2, #7
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001382:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000e010 	.word	0xe000e010
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8001390:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001394:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <HAL_MPU_Disable+0x18>)
 8001396:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800139c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800139e:	4b03      	ldr	r3, [pc, #12]	; (80013ac <HAL_MPU_Disable+0x1c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed00 	.word	0xe000ed00
 80013ac:	e000ed90 	.word	0xe000ed90

080013b0 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80013b0:	f040 0001 	orr.w	r0, r0, #1
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <HAL_MPU_Enable+0x1c>)
 80013b6:	6058      	str	r0, [r3, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80013b8:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <HAL_MPU_Enable+0x20>)
 80013ba:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80013bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80013c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80013c6:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80013ca:	4770      	bx	lr
 80013cc:	e000ed90 	.word	0xe000ed90
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80013d4:	7842      	ldrb	r2, [r0, #1]
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <HAL_MPU_ConfigRegion+0x50>)
 80013d8:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80013da:	7803      	ldrb	r3, [r0, #0]
 80013dc:	b923      	cbnz	r3, 80013e8 <HAL_MPU_ConfigRegion+0x14>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_MPU_ConfigRegion+0x50>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80013e4:	611a      	str	r2, [r3, #16]
  }
}
 80013e6:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 80013e8:	6843      	ldr	r3, [r0, #4]
 80013ea:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <HAL_MPU_ConfigRegion+0x50>)
 80013ec:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013ee:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013f0:	7ac3      	ldrb	r3, [r0, #11]
 80013f2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013f4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013f8:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013fa:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013fe:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001400:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001404:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001406:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800140a:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800140c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001410:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001412:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001416:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001418:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800141c:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800141e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001420:	6113      	str	r3, [r2, #16]
 8001422:	4770      	bx	lr
 8001424:	e000ed90 	.word	0xe000ed90

08001428 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001428:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800142a:	6d87      	ldr	r7, [r0, #88]	; 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800142c:	6804      	ldr	r4, [r0, #0]
 800142e:	4e65      	ldr	r6, [pc, #404]	; (80015c4 <DMA_SetConfig+0x19c>)
 8001430:	4d65      	ldr	r5, [pc, #404]	; (80015c8 <DMA_SetConfig+0x1a0>)
 8001432:	42ac      	cmp	r4, r5
 8001434:	bf18      	it	ne
 8001436:	42b4      	cmpne	r4, r6
 8001438:	d042      	beq.n	80014c0 <DMA_SetConfig+0x98>
 800143a:	3518      	adds	r5, #24
 800143c:	42ac      	cmp	r4, r5
 800143e:	d03f      	beq.n	80014c0 <DMA_SetConfig+0x98>
 8001440:	3518      	adds	r5, #24
 8001442:	42ac      	cmp	r4, r5
 8001444:	d03c      	beq.n	80014c0 <DMA_SetConfig+0x98>
 8001446:	3518      	adds	r5, #24
 8001448:	42ac      	cmp	r4, r5
 800144a:	d039      	beq.n	80014c0 <DMA_SetConfig+0x98>
 800144c:	3518      	adds	r5, #24
 800144e:	42ac      	cmp	r4, r5
 8001450:	d036      	beq.n	80014c0 <DMA_SetConfig+0x98>
 8001452:	3518      	adds	r5, #24
 8001454:	42ac      	cmp	r4, r5
 8001456:	d033      	beq.n	80014c0 <DMA_SetConfig+0x98>
 8001458:	3518      	adds	r5, #24
 800145a:	42ac      	cmp	r4, r5
 800145c:	d030      	beq.n	80014c0 <DMA_SetConfig+0x98>
 800145e:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8001462:	42ac      	cmp	r4, r5
 8001464:	d02c      	beq.n	80014c0 <DMA_SetConfig+0x98>
 8001466:	3518      	adds	r5, #24
 8001468:	42ac      	cmp	r4, r5
 800146a:	d029      	beq.n	80014c0 <DMA_SetConfig+0x98>
 800146c:	3518      	adds	r5, #24
 800146e:	42ac      	cmp	r4, r5
 8001470:	d026      	beq.n	80014c0 <DMA_SetConfig+0x98>
 8001472:	3518      	adds	r5, #24
 8001474:	42ac      	cmp	r4, r5
 8001476:	d023      	beq.n	80014c0 <DMA_SetConfig+0x98>
 8001478:	3518      	adds	r5, #24
 800147a:	42ac      	cmp	r4, r5
 800147c:	d020      	beq.n	80014c0 <DMA_SetConfig+0x98>
 800147e:	3518      	adds	r5, #24
 8001480:	42ac      	cmp	r4, r5
 8001482:	d01d      	beq.n	80014c0 <DMA_SetConfig+0x98>
 8001484:	3518      	adds	r5, #24
 8001486:	42ac      	cmp	r4, r5
 8001488:	d01a      	beq.n	80014c0 <DMA_SetConfig+0x98>
 800148a:	3518      	adds	r5, #24
 800148c:	42ac      	cmp	r4, r5
 800148e:	d017      	beq.n	80014c0 <DMA_SetConfig+0x98>
 8001490:	4d4e      	ldr	r5, [pc, #312]	; (80015cc <DMA_SetConfig+0x1a4>)
 8001492:	42ac      	cmp	r4, r5
 8001494:	d014      	beq.n	80014c0 <DMA_SetConfig+0x98>
 8001496:	3514      	adds	r5, #20
 8001498:	42ac      	cmp	r4, r5
 800149a:	d011      	beq.n	80014c0 <DMA_SetConfig+0x98>
 800149c:	3514      	adds	r5, #20
 800149e:	42ac      	cmp	r4, r5
 80014a0:	d00e      	beq.n	80014c0 <DMA_SetConfig+0x98>
 80014a2:	3514      	adds	r5, #20
 80014a4:	42ac      	cmp	r4, r5
 80014a6:	d00b      	beq.n	80014c0 <DMA_SetConfig+0x98>
 80014a8:	3514      	adds	r5, #20
 80014aa:	42ac      	cmp	r4, r5
 80014ac:	d008      	beq.n	80014c0 <DMA_SetConfig+0x98>
 80014ae:	3514      	adds	r5, #20
 80014b0:	42ac      	cmp	r4, r5
 80014b2:	d005      	beq.n	80014c0 <DMA_SetConfig+0x98>
 80014b4:	3514      	adds	r5, #20
 80014b6:	42ac      	cmp	r4, r5
 80014b8:	d002      	beq.n	80014c0 <DMA_SetConfig+0x98>
 80014ba:	3514      	adds	r5, #20
 80014bc:	42ac      	cmp	r4, r5
 80014be:	d107      	bne.n	80014d0 <DMA_SetConfig+0xa8>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014c0:	6e44      	ldr	r4, [r0, #100]	; 0x64
 80014c2:	6e85      	ldr	r5, [r0, #104]	; 0x68
 80014c4:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80014c6:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 80014c8:	b114      	cbz	r4, 80014d0 <DMA_SetConfig+0xa8>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014ca:	6f04      	ldr	r4, [r0, #112]	; 0x70
 80014cc:	6f45      	ldr	r5, [r0, #116]	; 0x74
 80014ce:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80014d0:	6804      	ldr	r4, [r0, #0]
 80014d2:	4e3c      	ldr	r6, [pc, #240]	; (80015c4 <DMA_SetConfig+0x19c>)
 80014d4:	4d3c      	ldr	r5, [pc, #240]	; (80015c8 <DMA_SetConfig+0x1a0>)
 80014d6:	42ac      	cmp	r4, r5
 80014d8:	bf18      	it	ne
 80014da:	42b4      	cmpne	r4, r6
 80014dc:	d052      	beq.n	8001584 <DMA_SetConfig+0x15c>
 80014de:	3518      	adds	r5, #24
 80014e0:	42ac      	cmp	r4, r5
 80014e2:	d04f      	beq.n	8001584 <DMA_SetConfig+0x15c>
 80014e4:	3518      	adds	r5, #24
 80014e6:	42ac      	cmp	r4, r5
 80014e8:	d04c      	beq.n	8001584 <DMA_SetConfig+0x15c>
 80014ea:	3518      	adds	r5, #24
 80014ec:	42ac      	cmp	r4, r5
 80014ee:	d049      	beq.n	8001584 <DMA_SetConfig+0x15c>
 80014f0:	3518      	adds	r5, #24
 80014f2:	42ac      	cmp	r4, r5
 80014f4:	d046      	beq.n	8001584 <DMA_SetConfig+0x15c>
 80014f6:	3518      	adds	r5, #24
 80014f8:	42ac      	cmp	r4, r5
 80014fa:	d043      	beq.n	8001584 <DMA_SetConfig+0x15c>
 80014fc:	3518      	adds	r5, #24
 80014fe:	42ac      	cmp	r4, r5
 8001500:	d040      	beq.n	8001584 <DMA_SetConfig+0x15c>
 8001502:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8001506:	42ac      	cmp	r4, r5
 8001508:	d03c      	beq.n	8001584 <DMA_SetConfig+0x15c>
 800150a:	3518      	adds	r5, #24
 800150c:	42ac      	cmp	r4, r5
 800150e:	d039      	beq.n	8001584 <DMA_SetConfig+0x15c>
 8001510:	3518      	adds	r5, #24
 8001512:	42ac      	cmp	r4, r5
 8001514:	d036      	beq.n	8001584 <DMA_SetConfig+0x15c>
 8001516:	3518      	adds	r5, #24
 8001518:	42ac      	cmp	r4, r5
 800151a:	d033      	beq.n	8001584 <DMA_SetConfig+0x15c>
 800151c:	3518      	adds	r5, #24
 800151e:	42ac      	cmp	r4, r5
 8001520:	d030      	beq.n	8001584 <DMA_SetConfig+0x15c>
 8001522:	3518      	adds	r5, #24
 8001524:	42ac      	cmp	r4, r5
 8001526:	d02d      	beq.n	8001584 <DMA_SetConfig+0x15c>
 8001528:	3518      	adds	r5, #24
 800152a:	42ac      	cmp	r4, r5
 800152c:	d02a      	beq.n	8001584 <DMA_SetConfig+0x15c>
 800152e:	3518      	adds	r5, #24
 8001530:	42ac      	cmp	r4, r5
 8001532:	d027      	beq.n	8001584 <DMA_SetConfig+0x15c>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001534:	4e25      	ldr	r6, [pc, #148]	; (80015cc <DMA_SetConfig+0x1a4>)
 8001536:	4d26      	ldr	r5, [pc, #152]	; (80015d0 <DMA_SetConfig+0x1a8>)
 8001538:	42ac      	cmp	r4, r5
 800153a:	bf18      	it	ne
 800153c:	42b4      	cmpne	r4, r6
 800153e:	d011      	beq.n	8001564 <DMA_SetConfig+0x13c>
 8001540:	4d24      	ldr	r5, [pc, #144]	; (80015d4 <DMA_SetConfig+0x1ac>)
 8001542:	42ac      	cmp	r4, r5
 8001544:	d00e      	beq.n	8001564 <DMA_SetConfig+0x13c>
 8001546:	3514      	adds	r5, #20
 8001548:	42ac      	cmp	r4, r5
 800154a:	d00b      	beq.n	8001564 <DMA_SetConfig+0x13c>
 800154c:	3514      	adds	r5, #20
 800154e:	42ac      	cmp	r4, r5
 8001550:	d008      	beq.n	8001564 <DMA_SetConfig+0x13c>
 8001552:	3514      	adds	r5, #20
 8001554:	42ac      	cmp	r4, r5
 8001556:	d005      	beq.n	8001564 <DMA_SetConfig+0x13c>
 8001558:	3514      	adds	r5, #20
 800155a:	42ac      	cmp	r4, r5
 800155c:	d002      	beq.n	8001564 <DMA_SetConfig+0x13c>
 800155e:	3514      	adds	r5, #20
 8001560:	42ac      	cmp	r4, r5
 8001562:	d123      	bne.n	80015ac <DMA_SetConfig+0x184>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001564:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8001566:	f004 051f 	and.w	r5, r4, #31
 800156a:	2401      	movs	r4, #1
 800156c:	40ac      	lsls	r4, r5
 800156e:	607c      	str	r4, [r7, #4]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8001570:	6804      	ldr	r4, [r0, #0]
 8001572:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001574:	6883      	ldr	r3, [r0, #8]
 8001576:	2b40      	cmp	r3, #64	; 0x40
 8001578:	d01f      	beq.n	80015ba <DMA_SetConfig+0x192>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800157a:	6803      	ldr	r3, [r0, #0]
 800157c:	6099      	str	r1, [r3, #8]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800157e:	6803      	ldr	r3, [r0, #0]
 8001580:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8001582:	e013      	b.n	80015ac <DMA_SetConfig+0x184>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001584:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8001586:	f004 051f 	and.w	r5, r4, #31
 800158a:	243f      	movs	r4, #63	; 0x3f
 800158c:	40ac      	lsls	r4, r5
 800158e:	60bc      	str	r4, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001590:	6805      	ldr	r5, [r0, #0]
 8001592:	682c      	ldr	r4, [r5, #0]
 8001594:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001598:	602c      	str	r4, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800159a:	6804      	ldr	r4, [r0, #0]
 800159c:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800159e:	6883      	ldr	r3, [r0, #8]
 80015a0:	2b40      	cmp	r3, #64	; 0x40
 80015a2:	d005      	beq.n	80015b0 <DMA_SetConfig+0x188>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80015a4:	6803      	ldr	r3, [r0, #0]
 80015a6:	6099      	str	r1, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80015a8:	6803      	ldr	r3, [r0, #0]
 80015aa:	60da      	str	r2, [r3, #12]
}
 80015ac:	bcf0      	pop	{r4, r5, r6, r7}
 80015ae:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80015b0:	6803      	ldr	r3, [r0, #0]
 80015b2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80015b4:	6803      	ldr	r3, [r0, #0]
 80015b6:	60d9      	str	r1, [r3, #12]
 80015b8:	e7f8      	b.n	80015ac <DMA_SetConfig+0x184>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80015ba:	6803      	ldr	r3, [r0, #0]
 80015bc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80015be:	6803      	ldr	r3, [r0, #0]
 80015c0:	60d9      	str	r1, [r3, #12]
 80015c2:	e7f3      	b.n	80015ac <DMA_SetConfig+0x184>
 80015c4:	40020010 	.word	0x40020010
 80015c8:	40020028 	.word	0x40020028
 80015cc:	58025408 	.word	0x58025408
 80015d0:	5802541c 	.word	0x5802541c
 80015d4:	58025430 	.word	0x58025430

080015d8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80015d8:	6802      	ldr	r2, [r0, #0]
 80015da:	4928      	ldr	r1, [pc, #160]	; (800167c <DMA_CalcBaseAndBitshift+0xa4>)
 80015dc:	4b28      	ldr	r3, [pc, #160]	; (8001680 <DMA_CalcBaseAndBitshift+0xa8>)
 80015de:	429a      	cmp	r2, r3
 80015e0:	bf18      	it	ne
 80015e2:	428a      	cmpne	r2, r1
 80015e4:	d02f      	beq.n	8001646 <DMA_CalcBaseAndBitshift+0x6e>
 80015e6:	3318      	adds	r3, #24
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d02c      	beq.n	8001646 <DMA_CalcBaseAndBitshift+0x6e>
 80015ec:	3318      	adds	r3, #24
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d029      	beq.n	8001646 <DMA_CalcBaseAndBitshift+0x6e>
 80015f2:	3318      	adds	r3, #24
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d026      	beq.n	8001646 <DMA_CalcBaseAndBitshift+0x6e>
 80015f8:	3318      	adds	r3, #24
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d023      	beq.n	8001646 <DMA_CalcBaseAndBitshift+0x6e>
 80015fe:	3318      	adds	r3, #24
 8001600:	429a      	cmp	r2, r3
 8001602:	d020      	beq.n	8001646 <DMA_CalcBaseAndBitshift+0x6e>
 8001604:	3318      	adds	r3, #24
 8001606:	429a      	cmp	r2, r3
 8001608:	d01d      	beq.n	8001646 <DMA_CalcBaseAndBitshift+0x6e>
 800160a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800160e:	429a      	cmp	r2, r3
 8001610:	d019      	beq.n	8001646 <DMA_CalcBaseAndBitshift+0x6e>
 8001612:	3318      	adds	r3, #24
 8001614:	429a      	cmp	r2, r3
 8001616:	d016      	beq.n	8001646 <DMA_CalcBaseAndBitshift+0x6e>
 8001618:	3318      	adds	r3, #24
 800161a:	429a      	cmp	r2, r3
 800161c:	d013      	beq.n	8001646 <DMA_CalcBaseAndBitshift+0x6e>
 800161e:	3318      	adds	r3, #24
 8001620:	429a      	cmp	r2, r3
 8001622:	d010      	beq.n	8001646 <DMA_CalcBaseAndBitshift+0x6e>
 8001624:	3318      	adds	r3, #24
 8001626:	429a      	cmp	r2, r3
 8001628:	d00d      	beq.n	8001646 <DMA_CalcBaseAndBitshift+0x6e>
 800162a:	3318      	adds	r3, #24
 800162c:	429a      	cmp	r2, r3
 800162e:	d00a      	beq.n	8001646 <DMA_CalcBaseAndBitshift+0x6e>
 8001630:	3318      	adds	r3, #24
 8001632:	429a      	cmp	r2, r3
 8001634:	d007      	beq.n	8001646 <DMA_CalcBaseAndBitshift+0x6e>
 8001636:	3318      	adds	r3, #24
 8001638:	429a      	cmp	r2, r3
 800163a:	d004      	beq.n	8001646 <DMA_CalcBaseAndBitshift+0x6e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800163c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001640:	6582      	str	r2, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 8001642:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001644:	4770      	bx	lr
{
 8001646:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001648:	b2d3      	uxtb	r3, r2
 800164a:	3b10      	subs	r3, #16
 800164c:	490d      	ldr	r1, [pc, #52]	; (8001684 <DMA_CalcBaseAndBitshift+0xac>)
 800164e:	fba1 1303 	umull	r1, r3, r1, r3
 8001652:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001654:	f003 0107 	and.w	r1, r3, #7
 8001658:	4c0b      	ldr	r4, [pc, #44]	; (8001688 <DMA_CalcBaseAndBitshift+0xb0>)
 800165a:	5c61      	ldrb	r1, [r4, r1]
 800165c:	65c1      	str	r1, [r0, #92]	; 0x5c
    if (stream_number > 3U)
 800165e:	2b03      	cmp	r3, #3
 8001660:	d806      	bhi.n	8001670 <DMA_CalcBaseAndBitshift+0x98>
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <DMA_CalcBaseAndBitshift+0xb4>)
 8001664:	4013      	ands	r3, r2
 8001666:	6583      	str	r3, [r0, #88]	; 0x58
}
 8001668:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800166a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800166e:	4770      	bx	lr
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <DMA_CalcBaseAndBitshift+0xb4>)
 8001672:	4013      	ands	r3, r2
 8001674:	3304      	adds	r3, #4
 8001676:	6583      	str	r3, [r0, #88]	; 0x58
 8001678:	e7f6      	b.n	8001668 <DMA_CalcBaseAndBitshift+0x90>
 800167a:	bf00      	nop
 800167c:	40020010 	.word	0x40020010
 8001680:	40020028 	.word	0x40020028
 8001684:	aaaaaaab 	.word	0xaaaaaaab
 8001688:	0800d2e8 	.word	0x0800d2e8
 800168c:	fffffc00 	.word	0xfffffc00

08001690 <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001690:	6983      	ldr	r3, [r0, #24]
 8001692:	b99b      	cbnz	r3, 80016bc <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 8001694:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001696:	2b01      	cmp	r3, #1
 8001698:	d00a      	beq.n	80016b0 <DMA_CheckFifoParam+0x20>
 800169a:	b11b      	cbz	r3, 80016a4 <DMA_CheckFifoParam+0x14>
 800169c:	2b02      	cmp	r3, #2
 800169e:	d001      	beq.n	80016a4 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 80016a0:	2000      	movs	r0, #0
 80016a2:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016a4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80016a6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80016aa:	d12e      	bne.n	800170a <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80016ac:	2000      	movs	r0, #0
 80016ae:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80016b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016b6:	d02a      	beq.n	800170e <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 80016b8:	2000      	movs	r0, #0
 80016ba:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016c0:	d006      	beq.n	80016d0 <DMA_CheckFifoParam+0x40>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80016c2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d92a      	bls.n	800171e <DMA_CheckFifoParam+0x8e>
 80016c8:	2b03      	cmp	r3, #3
 80016ca:	d016      	beq.n	80016fa <DMA_CheckFifoParam+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
 80016cc:	2000      	movs	r0, #0
 80016ce:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 80016d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d803      	bhi.n	80016de <DMA_CheckFifoParam+0x4e>
 80016d6:	e8df f003 	tbb	[pc, r3]
 80016da:	041c      	.short	0x041c
 80016dc:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 80016de:	2000      	movs	r0, #0
 80016e0:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80016e4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80016e8:	d115      	bne.n	8001716 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 80016ea:	2000      	movs	r0, #0
 80016ec:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80016f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016f4:	d011      	beq.n	800171a <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 80016f6:	2000      	movs	r0, #0
 80016f8:	4770      	bx	lr
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016fa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80016fc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001700:	d001      	beq.n	8001706 <DMA_CheckFifoParam+0x76>
        {
          status = HAL_ERROR;
 8001702:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 8001704:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8001706:	2000      	movs	r0, #0
 8001708:	4770      	bx	lr
          status = HAL_ERROR;
 800170a:	2001      	movs	r0, #1
 800170c:	4770      	bx	lr
          status = HAL_ERROR;
 800170e:	2001      	movs	r0, #1
 8001710:	4770      	bx	lr
        status = HAL_ERROR;
 8001712:	2001      	movs	r0, #1
 8001714:	4770      	bx	lr
          status = HAL_ERROR;
 8001716:	2001      	movs	r0, #1
 8001718:	4770      	bx	lr
          status = HAL_ERROR;
 800171a:	2001      	movs	r0, #1
 800171c:	4770      	bx	lr
        status = HAL_ERROR;
 800171e:	2001      	movs	r0, #1
 8001720:	4770      	bx	lr
	...

08001724 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8001724:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001726:	4922      	ldr	r1, [pc, #136]	; (80017b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001728:	4a22      	ldr	r2, [pc, #136]	; (80017b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 800172a:	4293      	cmp	r3, r2
 800172c:	bf18      	it	ne
 800172e:	428b      	cmpne	r3, r1
 8001730:	d028      	beq.n	8001784 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001732:	3214      	adds	r2, #20
 8001734:	4293      	cmp	r3, r2
 8001736:	d025      	beq.n	8001784 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001738:	3214      	adds	r2, #20
 800173a:	4293      	cmp	r3, r2
 800173c:	d022      	beq.n	8001784 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 800173e:	3214      	adds	r2, #20
 8001740:	4293      	cmp	r3, r2
 8001742:	d01f      	beq.n	8001784 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001744:	3214      	adds	r2, #20
 8001746:	4293      	cmp	r3, r2
 8001748:	d01c      	beq.n	8001784 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 800174a:	3214      	adds	r2, #20
 800174c:	4293      	cmp	r3, r2
 800174e:	d019      	beq.n	8001784 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001750:	3214      	adds	r2, #20
 8001752:	4293      	cmp	r3, r2
 8001754:	d016      	beq.n	8001784 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001756:	b2da      	uxtb	r2, r3
 8001758:	3a10      	subs	r2, #16
 800175a:	4917      	ldr	r1, [pc, #92]	; (80017b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
 800175c:	fba1 1202 	umull	r1, r2, r1, r2
 8001760:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001762:	4916      	ldr	r1, [pc, #88]	; (80017bc <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
 8001764:	4419      	add	r1, r3
 8001766:	29a8      	cmp	r1, #168	; 0xa8
 8001768:	d91f      	bls.n	80017aa <DMA_CalcDMAMUXChannelBaseAndMask+0x86>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	6603      	str	r3, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8001774:	6643      	str	r3, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001776:	f002 021f 	and.w	r2, r2, #31
 800177a:	2301      	movs	r3, #1
 800177c:	fa03 f202 	lsl.w	r2, r3, r2
 8001780:	6682      	str	r2, [r0, #104]	; 0x68
  }
}
 8001782:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001784:	b2db      	uxtb	r3, r3
 8001786:	3b08      	subs	r3, #8
 8001788:	4a0f      	ldr	r2, [pc, #60]	; (80017c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001790:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8001792:	441a      	add	r2, r3
 8001794:	0092      	lsls	r2, r2, #2
 8001796:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001798:	4a0d      	ldr	r2, [pc, #52]	; (80017d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 800179a:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800179c:	f003 031f 	and.w	r3, r3, #31
 80017a0:	2201      	movs	r2, #1
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	6683      	str	r3, [r0, #104]	; 0x68
 80017a8:	4770      	bx	lr
      stream_number += 8U;
 80017aa:	3208      	adds	r2, #8
 80017ac:	e7dd      	b.n	800176a <DMA_CalcDMAMUXChannelBaseAndMask+0x46>
 80017ae:	bf00      	nop
 80017b0:	58025408 	.word	0x58025408
 80017b4:	5802541c 	.word	0x5802541c
 80017b8:	aaaaaaab 	.word	0xaaaaaaab
 80017bc:	bffdfbf0 	.word	0xbffdfbf0
 80017c0:	10008200 	.word	0x10008200
 80017c4:	40020880 	.word	0x40020880
 80017c8:	cccccccd 	.word	0xcccccccd
 80017cc:	16009600 	.word	0x16009600
 80017d0:	58025880 	.word	0x58025880

080017d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80017d4:	7901      	ldrb	r1, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80017d6:	1e4a      	subs	r2, r1, #1
 80017d8:	2a07      	cmp	r2, #7
 80017da:	d82c      	bhi.n	8001836 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x62>
{
 80017dc:	b430      	push	{r4, r5}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80017de:	6803      	ldr	r3, [r0, #0]
 80017e0:	4d15      	ldr	r5, [pc, #84]	; (8001838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 80017e2:	4c16      	ldr	r4, [pc, #88]	; (800183c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 80017e4:	42a3      	cmp	r3, r4
 80017e6:	bf18      	it	ne
 80017e8:	42ab      	cmpne	r3, r5
 80017ea:	d018      	beq.n	800181e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80017ec:	3414      	adds	r4, #20
 80017ee:	42a3      	cmp	r3, r4
 80017f0:	d015      	beq.n	800181e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80017f2:	3414      	adds	r4, #20
 80017f4:	42a3      	cmp	r3, r4
 80017f6:	d012      	beq.n	800181e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80017f8:	3414      	adds	r4, #20
 80017fa:	42a3      	cmp	r3, r4
 80017fc:	d00f      	beq.n	800181e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80017fe:	3414      	adds	r4, #20
 8001800:	42a3      	cmp	r3, r4
 8001802:	d00c      	beq.n	800181e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8001804:	3414      	adds	r4, #20
 8001806:	42a3      	cmp	r3, r4
 8001808:	d009      	beq.n	800181e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 800180a:	3414      	adds	r4, #20
 800180c:	42a3      	cmp	r3, r4
 800180e:	d006      	beq.n	800181e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 8001812:	440b      	add	r3, r1
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001818:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>)
 800181a:	6703      	str	r3, [r0, #112]	; 0x70
 800181c:	e005      	b.n	800182a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x56>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800181e:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 8001820:	440b      	add	r3, r1
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
 8001828:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800182a:	2301      	movs	r3, #1
 800182c:	fa03 f202 	lsl.w	r2, r3, r2
 8001830:	6742      	str	r2, [r0, #116]	; 0x74
  }
}
 8001832:	bc30      	pop	{r4, r5}
 8001834:	4770      	bx	lr
 8001836:	4770      	bx	lr
 8001838:	58025408 	.word	0x58025408
 800183c:	5802541c 	.word	0x5802541c
 8001840:	1000823f 	.word	0x1000823f
 8001844:	40020940 	.word	0x40020940
 8001848:	1600963f 	.word	0x1600963f
 800184c:	58025940 	.word	0x58025940

08001850 <HAL_DMA_Init>:
{
 8001850:	b570      	push	{r4, r5, r6, lr}
 8001852:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001854:	f7fe feb0 	bl	80005b8 <HAL_GetTick>
  if(hdma == NULL)
 8001858:	2c00      	cmp	r4, #0
 800185a:	f000 81bd 	beq.w	8001bd8 <HAL_DMA_Init+0x388>
 800185e:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001860:	6823      	ldr	r3, [r4, #0]
 8001862:	49b7      	ldr	r1, [pc, #732]	; (8001b40 <HAL_DMA_Init+0x2f0>)
 8001864:	4ab7      	ldr	r2, [pc, #732]	; (8001b44 <HAL_DMA_Init+0x2f4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	bf18      	it	ne
 800186a:	428b      	cmpne	r3, r1
 800186c:	bf0c      	ite	eq
 800186e:	2201      	moveq	r2, #1
 8001870:	2200      	movne	r2, #0
 8001872:	d050      	beq.n	8001916 <HAL_DMA_Init+0xc6>
 8001874:	3130      	adds	r1, #48	; 0x30
 8001876:	428b      	cmp	r3, r1
 8001878:	d04d      	beq.n	8001916 <HAL_DMA_Init+0xc6>
 800187a:	3118      	adds	r1, #24
 800187c:	428b      	cmp	r3, r1
 800187e:	d04a      	beq.n	8001916 <HAL_DMA_Init+0xc6>
 8001880:	3118      	adds	r1, #24
 8001882:	428b      	cmp	r3, r1
 8001884:	d047      	beq.n	8001916 <HAL_DMA_Init+0xc6>
 8001886:	3118      	adds	r1, #24
 8001888:	428b      	cmp	r3, r1
 800188a:	d044      	beq.n	8001916 <HAL_DMA_Init+0xc6>
 800188c:	3118      	adds	r1, #24
 800188e:	428b      	cmp	r3, r1
 8001890:	d041      	beq.n	8001916 <HAL_DMA_Init+0xc6>
 8001892:	3118      	adds	r1, #24
 8001894:	428b      	cmp	r3, r1
 8001896:	d03e      	beq.n	8001916 <HAL_DMA_Init+0xc6>
 8001898:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800189c:	428b      	cmp	r3, r1
 800189e:	d03a      	beq.n	8001916 <HAL_DMA_Init+0xc6>
 80018a0:	3118      	adds	r1, #24
 80018a2:	428b      	cmp	r3, r1
 80018a4:	d037      	beq.n	8001916 <HAL_DMA_Init+0xc6>
 80018a6:	3118      	adds	r1, #24
 80018a8:	428b      	cmp	r3, r1
 80018aa:	d034      	beq.n	8001916 <HAL_DMA_Init+0xc6>
 80018ac:	3118      	adds	r1, #24
 80018ae:	428b      	cmp	r3, r1
 80018b0:	d031      	beq.n	8001916 <HAL_DMA_Init+0xc6>
 80018b2:	3118      	adds	r1, #24
 80018b4:	428b      	cmp	r3, r1
 80018b6:	d02e      	beq.n	8001916 <HAL_DMA_Init+0xc6>
 80018b8:	3118      	adds	r1, #24
 80018ba:	428b      	cmp	r3, r1
 80018bc:	d02b      	beq.n	8001916 <HAL_DMA_Init+0xc6>
 80018be:	3118      	adds	r1, #24
 80018c0:	428b      	cmp	r3, r1
 80018c2:	d028      	beq.n	8001916 <HAL_DMA_Init+0xc6>
 80018c4:	3118      	adds	r1, #24
 80018c6:	428b      	cmp	r3, r1
 80018c8:	d025      	beq.n	8001916 <HAL_DMA_Init+0xc6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80018ca:	499f      	ldr	r1, [pc, #636]	; (8001b48 <HAL_DMA_Init+0x2f8>)
 80018cc:	4a9f      	ldr	r2, [pc, #636]	; (8001b4c <HAL_DMA_Init+0x2fc>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	bf18      	it	ne
 80018d2:	428b      	cmpne	r3, r1
 80018d4:	f000 8124 	beq.w	8001b20 <HAL_DMA_Init+0x2d0>
 80018d8:	4a9d      	ldr	r2, [pc, #628]	; (8001b50 <HAL_DMA_Init+0x300>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	f000 8120 	beq.w	8001b20 <HAL_DMA_Init+0x2d0>
 80018e0:	3214      	adds	r2, #20
 80018e2:	4293      	cmp	r3, r2
 80018e4:	f000 811c 	beq.w	8001b20 <HAL_DMA_Init+0x2d0>
 80018e8:	3214      	adds	r2, #20
 80018ea:	4293      	cmp	r3, r2
 80018ec:	f000 8118 	beq.w	8001b20 <HAL_DMA_Init+0x2d0>
 80018f0:	3214      	adds	r2, #20
 80018f2:	4293      	cmp	r3, r2
 80018f4:	f000 8114 	beq.w	8001b20 <HAL_DMA_Init+0x2d0>
 80018f8:	3214      	adds	r2, #20
 80018fa:	4293      	cmp	r3, r2
 80018fc:	f000 8110 	beq.w	8001b20 <HAL_DMA_Init+0x2d0>
 8001900:	3214      	adds	r2, #20
 8001902:	4293      	cmp	r3, r2
 8001904:	f000 810c 	beq.w	8001b20 <HAL_DMA_Init+0x2d0>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001908:	2340      	movs	r3, #64	; 0x40
 800190a:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800190c:	2303      	movs	r3, #3
 800190e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8001912:	2001      	movs	r0, #1
 8001914:	e04a      	b.n	80019ac <HAL_DMA_Init+0x15c>
    __HAL_UNLOCK(hdma);
 8001916:	2100      	movs	r1, #0
 8001918:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 800191c:	2102      	movs	r1, #2
 800191e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001922:	bb7a      	cbnz	r2, 8001984 <HAL_DMA_Init+0x134>
 8001924:	4a8b      	ldr	r2, [pc, #556]	; (8001b54 <HAL_DMA_Init+0x304>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d02c      	beq.n	8001984 <HAL_DMA_Init+0x134>
 800192a:	3218      	adds	r2, #24
 800192c:	4293      	cmp	r3, r2
 800192e:	d029      	beq.n	8001984 <HAL_DMA_Init+0x134>
 8001930:	3218      	adds	r2, #24
 8001932:	4293      	cmp	r3, r2
 8001934:	d026      	beq.n	8001984 <HAL_DMA_Init+0x134>
 8001936:	3218      	adds	r2, #24
 8001938:	4293      	cmp	r3, r2
 800193a:	d023      	beq.n	8001984 <HAL_DMA_Init+0x134>
 800193c:	3218      	adds	r2, #24
 800193e:	4293      	cmp	r3, r2
 8001940:	d020      	beq.n	8001984 <HAL_DMA_Init+0x134>
 8001942:	3218      	adds	r2, #24
 8001944:	4293      	cmp	r3, r2
 8001946:	d01d      	beq.n	8001984 <HAL_DMA_Init+0x134>
 8001948:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800194c:	4293      	cmp	r3, r2
 800194e:	d019      	beq.n	8001984 <HAL_DMA_Init+0x134>
 8001950:	3218      	adds	r2, #24
 8001952:	4293      	cmp	r3, r2
 8001954:	d016      	beq.n	8001984 <HAL_DMA_Init+0x134>
 8001956:	3218      	adds	r2, #24
 8001958:	4293      	cmp	r3, r2
 800195a:	d013      	beq.n	8001984 <HAL_DMA_Init+0x134>
 800195c:	3218      	adds	r2, #24
 800195e:	4293      	cmp	r3, r2
 8001960:	d010      	beq.n	8001984 <HAL_DMA_Init+0x134>
 8001962:	3218      	adds	r2, #24
 8001964:	4293      	cmp	r3, r2
 8001966:	d00d      	beq.n	8001984 <HAL_DMA_Init+0x134>
 8001968:	3218      	adds	r2, #24
 800196a:	4293      	cmp	r3, r2
 800196c:	d00a      	beq.n	8001984 <HAL_DMA_Init+0x134>
 800196e:	3218      	adds	r2, #24
 8001970:	4293      	cmp	r3, r2
 8001972:	d007      	beq.n	8001984 <HAL_DMA_Init+0x134>
 8001974:	3218      	adds	r2, #24
 8001976:	4293      	cmp	r3, r2
 8001978:	d004      	beq.n	8001984 <HAL_DMA_Init+0x134>
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	f022 0201 	bic.w	r2, r2, #1
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	e003      	b.n	800198c <HAL_DMA_Init+0x13c>
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	f022 0201 	bic.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800198c:	6823      	ldr	r3, [r4, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	f012 0f01 	tst.w	r2, #1
 8001994:	d00b      	beq.n	80019ae <HAL_DMA_Init+0x15e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001996:	f7fe fe0f 	bl	80005b8 <HAL_GetTick>
 800199a:	1b40      	subs	r0, r0, r5
 800199c:	2805      	cmp	r0, #5
 800199e:	d9f5      	bls.n	800198c <HAL_DMA_Init+0x13c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019a0:	2320      	movs	r3, #32
 80019a2:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80019a4:	2303      	movs	r3, #3
 80019a6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 80019aa:	2001      	movs	r0, #1
}
 80019ac:	bd70      	pop	{r4, r5, r6, pc}
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80019ae:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019b0:	4869      	ldr	r0, [pc, #420]	; (8001b58 <HAL_DMA_Init+0x308>)
 80019b2:	4010      	ands	r0, r2
    registerValue |=  hdma->Init.Direction           |
 80019b4:	68a1      	ldr	r1, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b6:	68e2      	ldr	r2, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 80019b8:	430a      	orrs	r2, r1
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ba:	6921      	ldr	r1, [r4, #16]
 80019bc:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019be:	6961      	ldr	r1, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019c0:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c2:	69a1      	ldr	r1, [r4, #24]
 80019c4:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 80019c6:	69e1      	ldr	r1, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c8:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 80019ca:	6a21      	ldr	r1, [r4, #32]
 80019cc:	430a      	orrs	r2, r1
    registerValue |=  hdma->Init.Direction           |
 80019ce:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80019d2:	2904      	cmp	r1, #4
 80019d4:	f000 8099 	beq.w	8001b0a <HAL_DMA_Init+0x2ba>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80019d8:	4960      	ldr	r1, [pc, #384]	; (8001b5c <HAL_DMA_Init+0x30c>)
 80019da:	6808      	ldr	r0, [r1, #0]
 80019dc:	4960      	ldr	r1, [pc, #384]	; (8001b60 <HAL_DMA_Init+0x310>)
 80019de:	4001      	ands	r1, r0
 80019e0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80019e4:	d311      	bcc.n	8001a0a <HAL_DMA_Init+0x1ba>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80019e6:	6861      	ldr	r1, [r4, #4]
 80019e8:	f1a1 0529 	sub.w	r5, r1, #41	; 0x29
 80019ec:	f1a1 003f 	sub.w	r0, r1, #63	; 0x3f
 80019f0:	2803      	cmp	r0, #3
 80019f2:	bf88      	it	hi
 80019f4:	2d05      	cmphi	r5, #5
 80019f6:	d906      	bls.n	8001a06 <HAL_DMA_Init+0x1b6>
 80019f8:	f1a1 0047 	sub.w	r0, r1, #71	; 0x47
 80019fc:	2801      	cmp	r0, #1
 80019fe:	d902      	bls.n	8001a06 <HAL_DMA_Init+0x1b6>
 8001a00:	394f      	subs	r1, #79	; 0x4f
 8001a02:	2903      	cmp	r1, #3
 8001a04:	d801      	bhi.n	8001a0a <HAL_DMA_Init+0x1ba>
        registerValue |= DMA_SxCR_TRBUFF;
 8001a06:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001a0a:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001a0c:	6826      	ldr	r6, [r4, #0]
 8001a0e:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a10:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 8001a14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a16:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d108      	bne.n	8001a2e <HAL_DMA_Init+0x1de>
      registerValue |= hdma->Init.FIFOThreshold;
 8001a1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a1e:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a22:	b123      	cbz	r3, 8001a2e <HAL_DMA_Init+0x1de>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a24:	4620      	mov	r0, r4
 8001a26:	f7ff fe33 	bl	8001690 <DMA_CheckFifoParam>
 8001a2a:	2800      	cmp	r0, #0
 8001a2c:	d172      	bne.n	8001b14 <HAL_DMA_Init+0x2c4>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001a2e:	6175      	str	r5, [r6, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a30:	4620      	mov	r0, r4
 8001a32:	f7ff fdd1 	bl	80015d8 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a36:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001a38:	f003 021f 	and.w	r2, r3, #31
 8001a3c:	233f      	movs	r3, #63	; 0x3f
 8001a3e:	4093      	lsls	r3, r2
 8001a40:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a42:	6823      	ldr	r3, [r4, #0]
 8001a44:	493e      	ldr	r1, [pc, #248]	; (8001b40 <HAL_DMA_Init+0x2f0>)
 8001a46:	4a3f      	ldr	r2, [pc, #252]	; (8001b44 <HAL_DMA_Init+0x2f4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	bf18      	it	ne
 8001a4c:	428b      	cmpne	r3, r1
 8001a4e:	d042      	beq.n	8001ad6 <HAL_DMA_Init+0x286>
 8001a50:	3218      	adds	r2, #24
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d03f      	beq.n	8001ad6 <HAL_DMA_Init+0x286>
 8001a56:	3218      	adds	r2, #24
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d03c      	beq.n	8001ad6 <HAL_DMA_Init+0x286>
 8001a5c:	3218      	adds	r2, #24
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d039      	beq.n	8001ad6 <HAL_DMA_Init+0x286>
 8001a62:	3218      	adds	r2, #24
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d036      	beq.n	8001ad6 <HAL_DMA_Init+0x286>
 8001a68:	3218      	adds	r2, #24
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d033      	beq.n	8001ad6 <HAL_DMA_Init+0x286>
 8001a6e:	3218      	adds	r2, #24
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d030      	beq.n	8001ad6 <HAL_DMA_Init+0x286>
 8001a74:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d02c      	beq.n	8001ad6 <HAL_DMA_Init+0x286>
 8001a7c:	3218      	adds	r2, #24
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d029      	beq.n	8001ad6 <HAL_DMA_Init+0x286>
 8001a82:	3218      	adds	r2, #24
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d026      	beq.n	8001ad6 <HAL_DMA_Init+0x286>
 8001a88:	3218      	adds	r2, #24
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d023      	beq.n	8001ad6 <HAL_DMA_Init+0x286>
 8001a8e:	3218      	adds	r2, #24
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d020      	beq.n	8001ad6 <HAL_DMA_Init+0x286>
 8001a94:	3218      	adds	r2, #24
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d01d      	beq.n	8001ad6 <HAL_DMA_Init+0x286>
 8001a9a:	3218      	adds	r2, #24
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d01a      	beq.n	8001ad6 <HAL_DMA_Init+0x286>
 8001aa0:	3218      	adds	r2, #24
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d017      	beq.n	8001ad6 <HAL_DMA_Init+0x286>
 8001aa6:	4a28      	ldr	r2, [pc, #160]	; (8001b48 <HAL_DMA_Init+0x2f8>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d014      	beq.n	8001ad6 <HAL_DMA_Init+0x286>
 8001aac:	3214      	adds	r2, #20
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d011      	beq.n	8001ad6 <HAL_DMA_Init+0x286>
 8001ab2:	3214      	adds	r2, #20
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d00e      	beq.n	8001ad6 <HAL_DMA_Init+0x286>
 8001ab8:	3214      	adds	r2, #20
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d00b      	beq.n	8001ad6 <HAL_DMA_Init+0x286>
 8001abe:	3214      	adds	r2, #20
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d008      	beq.n	8001ad6 <HAL_DMA_Init+0x286>
 8001ac4:	3214      	adds	r2, #20
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d005      	beq.n	8001ad6 <HAL_DMA_Init+0x286>
 8001aca:	3214      	adds	r2, #20
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d002      	beq.n	8001ad6 <HAL_DMA_Init+0x286>
 8001ad0:	3214      	adds	r2, #20
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d113      	bne.n	8001afe <HAL_DMA_Init+0x2ae>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f7ff fe24 	bl	8001724 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001adc:	68a3      	ldr	r3, [r4, #8]
 8001ade:	2b80      	cmp	r3, #128	; 0x80
 8001ae0:	d06d      	beq.n	8001bbe <HAL_DMA_Init+0x36e>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ae2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001ae4:	7922      	ldrb	r2, [r4, #4]
 8001ae6:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ae8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001aea:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8001aec:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001aee:	6863      	ldr	r3, [r4, #4]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	2b07      	cmp	r3, #7
 8001af4:	d966      	bls.n	8001bc4 <HAL_DMA_Init+0x374>
      hdma->DMAmuxRequestGen = 0U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	66e3      	str	r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001afa:	6723      	str	r3, [r4, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001afc:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001afe:	2000      	movs	r0, #0
 8001b00:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001b02:	2301      	movs	r3, #1
 8001b04:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001b08:	e750      	b.n	80019ac <HAL_DMA_Init+0x15c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b0a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001b0c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001b0e:	4301      	orrs	r1, r0
 8001b10:	430a      	orrs	r2, r1
 8001b12:	e761      	b.n	80019d8 <HAL_DMA_Init+0x188>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b14:	2340      	movs	r3, #64	; 0x40
 8001b16:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8001b18:	2001      	movs	r0, #1
 8001b1a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          return HAL_ERROR;
 8001b1e:	e745      	b.n	80019ac <HAL_DMA_Init+0x15c>
    __HAL_UNLOCK(hdma);
 8001b20:	2200      	movs	r2, #0
 8001b22:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b26:	2202      	movs	r2, #2
 8001b28:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001b2c:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001b2e:	490d      	ldr	r1, [pc, #52]	; (8001b64 <HAL_DMA_Init+0x314>)
 8001b30:	4011      	ands	r1, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b32:	68a2      	ldr	r2, [r4, #8]
 8001b34:	2a40      	cmp	r2, #64	; 0x40
 8001b36:	d01a      	beq.n	8001b6e <HAL_DMA_Init+0x31e>
 8001b38:	2a80      	cmp	r2, #128	; 0x80
 8001b3a:	d015      	beq.n	8001b68 <HAL_DMA_Init+0x318>
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	e017      	b.n	8001b70 <HAL_DMA_Init+0x320>
 8001b40:	40020010 	.word	0x40020010
 8001b44:	40020028 	.word	0x40020028
 8001b48:	58025408 	.word	0x58025408
 8001b4c:	5802541c 	.word	0x5802541c
 8001b50:	58025430 	.word	0x58025430
 8001b54:	40020040 	.word	0x40020040
 8001b58:	fe10803f 	.word	0xfe10803f
 8001b5c:	5c001000 	.word	0x5c001000
 8001b60:	ffff0000 	.word	0xffff0000
 8001b64:	fffe000f 	.word	0xfffe000f
 8001b68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b6c:	e000      	b.n	8001b70 <HAL_DMA_Init+0x320>
 8001b6e:	2210      	movs	r2, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b70:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b72:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b76:	6920      	ldr	r0, [r4, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b78:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b7c:	6960      	ldr	r0, [r4, #20]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b7e:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b82:	69a0      	ldr	r0, [r4, #24]
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b84:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b88:	69e0      	ldr	r0, [r4, #28]
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b8a:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001b8e:	6a20      	ldr	r0, [r4, #32]
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b90:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b94:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001b96:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001b98:	6822      	ldr	r2, [r4, #0]
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <HAL_DMA_Init+0x38c>)
 8001b9c:	4413      	add	r3, r2
 8001b9e:	4a10      	ldr	r2, [pc, #64]	; (8001be0 <HAL_DMA_Init+0x390>)
 8001ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001baa:	4620      	mov	r0, r4
 8001bac:	f7ff fd14 	bl	80015d8 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001bb0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001bb2:	f003 021f 	and.w	r2, r3, #31
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	4093      	lsls	r3, r2
 8001bba:	6043      	str	r3, [r0, #4]
 8001bbc:	e741      	b.n	8001a42 <HAL_DMA_Init+0x1f2>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	6063      	str	r3, [r4, #4]
 8001bc2:	e78e      	b.n	8001ae2 <HAL_DMA_Init+0x292>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	f7ff fe05 	bl	80017d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001bca:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bd0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001bd2:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	e792      	b.n	8001afe <HAL_DMA_Init+0x2ae>
    return HAL_ERROR;
 8001bd8:	2001      	movs	r0, #1
 8001bda:	e6e7      	b.n	80019ac <HAL_DMA_Init+0x15c>
 8001bdc:	a7fdabf8 	.word	0xa7fdabf8
 8001be0:	cccccccd 	.word	0xcccccccd

08001be4 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8001be4:	2800      	cmp	r0, #0
 8001be6:	f000 813e 	beq.w	8001e66 <HAL_DMA_Start_IT+0x282>
{
 8001bea:	b570      	push	{r4, r5, r6, lr}
 8001bec:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001bee:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001bf2:	2801      	cmp	r0, #1
 8001bf4:	f000 8139 	beq.w	8001e6a <HAL_DMA_Start_IT+0x286>
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bfe:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8001c02:	b2c0      	uxtb	r0, r0
 8001c04:	2801      	cmp	r0, #1
 8001c06:	d007      	beq.n	8001c18 <HAL_DMA_Start_IT+0x34>
    __HAL_UNLOCK(hdma);
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001c0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c12:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 8001c14:	2001      	movs	r0, #1
}
 8001c16:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c18:	2002      	movs	r0, #2
 8001c1a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c1e:	2000      	movs	r0, #0
 8001c20:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8001c22:	6820      	ldr	r0, [r4, #0]
 8001c24:	4e92      	ldr	r6, [pc, #584]	; (8001e70 <HAL_DMA_Start_IT+0x28c>)
 8001c26:	4d93      	ldr	r5, [pc, #588]	; (8001e74 <HAL_DMA_Start_IT+0x290>)
 8001c28:	42a8      	cmp	r0, r5
 8001c2a:	bf18      	it	ne
 8001c2c:	42b0      	cmpne	r0, r6
 8001c2e:	d02f      	beq.n	8001c90 <HAL_DMA_Start_IT+0xac>
 8001c30:	3518      	adds	r5, #24
 8001c32:	42a8      	cmp	r0, r5
 8001c34:	d02c      	beq.n	8001c90 <HAL_DMA_Start_IT+0xac>
 8001c36:	3518      	adds	r5, #24
 8001c38:	42a8      	cmp	r0, r5
 8001c3a:	d029      	beq.n	8001c90 <HAL_DMA_Start_IT+0xac>
 8001c3c:	3518      	adds	r5, #24
 8001c3e:	42a8      	cmp	r0, r5
 8001c40:	d026      	beq.n	8001c90 <HAL_DMA_Start_IT+0xac>
 8001c42:	3518      	adds	r5, #24
 8001c44:	42a8      	cmp	r0, r5
 8001c46:	d023      	beq.n	8001c90 <HAL_DMA_Start_IT+0xac>
 8001c48:	3518      	adds	r5, #24
 8001c4a:	42a8      	cmp	r0, r5
 8001c4c:	d020      	beq.n	8001c90 <HAL_DMA_Start_IT+0xac>
 8001c4e:	3518      	adds	r5, #24
 8001c50:	42a8      	cmp	r0, r5
 8001c52:	d01d      	beq.n	8001c90 <HAL_DMA_Start_IT+0xac>
 8001c54:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8001c58:	42a8      	cmp	r0, r5
 8001c5a:	d019      	beq.n	8001c90 <HAL_DMA_Start_IT+0xac>
 8001c5c:	3518      	adds	r5, #24
 8001c5e:	42a8      	cmp	r0, r5
 8001c60:	d016      	beq.n	8001c90 <HAL_DMA_Start_IT+0xac>
 8001c62:	3518      	adds	r5, #24
 8001c64:	42a8      	cmp	r0, r5
 8001c66:	d013      	beq.n	8001c90 <HAL_DMA_Start_IT+0xac>
 8001c68:	3518      	adds	r5, #24
 8001c6a:	42a8      	cmp	r0, r5
 8001c6c:	d010      	beq.n	8001c90 <HAL_DMA_Start_IT+0xac>
 8001c6e:	3518      	adds	r5, #24
 8001c70:	42a8      	cmp	r0, r5
 8001c72:	d00d      	beq.n	8001c90 <HAL_DMA_Start_IT+0xac>
 8001c74:	3518      	adds	r5, #24
 8001c76:	42a8      	cmp	r0, r5
 8001c78:	d00a      	beq.n	8001c90 <HAL_DMA_Start_IT+0xac>
 8001c7a:	3518      	adds	r5, #24
 8001c7c:	42a8      	cmp	r0, r5
 8001c7e:	d007      	beq.n	8001c90 <HAL_DMA_Start_IT+0xac>
 8001c80:	3518      	adds	r5, #24
 8001c82:	42a8      	cmp	r0, r5
 8001c84:	d004      	beq.n	8001c90 <HAL_DMA_Start_IT+0xac>
 8001c86:	6805      	ldr	r5, [r0, #0]
 8001c88:	f025 0501 	bic.w	r5, r5, #1
 8001c8c:	6005      	str	r5, [r0, #0]
 8001c8e:	e003      	b.n	8001c98 <HAL_DMA_Start_IT+0xb4>
 8001c90:	6805      	ldr	r5, [r0, #0]
 8001c92:	f025 0501 	bic.w	r5, r5, #1
 8001c96:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c98:	4620      	mov	r0, r4
 8001c9a:	f7ff fbc5 	bl	8001428 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c9e:	6823      	ldr	r3, [r4, #0]
 8001ca0:	4973      	ldr	r1, [pc, #460]	; (8001e70 <HAL_DMA_Start_IT+0x28c>)
 8001ca2:	4a74      	ldr	r2, [pc, #464]	; (8001e74 <HAL_DMA_Start_IT+0x290>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	bf18      	it	ne
 8001ca8:	428b      	cmpne	r3, r1
 8001caa:	d038      	beq.n	8001d1e <HAL_DMA_Start_IT+0x13a>
 8001cac:	3218      	adds	r2, #24
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d035      	beq.n	8001d1e <HAL_DMA_Start_IT+0x13a>
 8001cb2:	3218      	adds	r2, #24
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d032      	beq.n	8001d1e <HAL_DMA_Start_IT+0x13a>
 8001cb8:	3218      	adds	r2, #24
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d02f      	beq.n	8001d1e <HAL_DMA_Start_IT+0x13a>
 8001cbe:	3218      	adds	r2, #24
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d02c      	beq.n	8001d1e <HAL_DMA_Start_IT+0x13a>
 8001cc4:	3218      	adds	r2, #24
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d029      	beq.n	8001d1e <HAL_DMA_Start_IT+0x13a>
 8001cca:	3218      	adds	r2, #24
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d026      	beq.n	8001d1e <HAL_DMA_Start_IT+0x13a>
 8001cd0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d022      	beq.n	8001d1e <HAL_DMA_Start_IT+0x13a>
 8001cd8:	3218      	adds	r2, #24
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d01f      	beq.n	8001d1e <HAL_DMA_Start_IT+0x13a>
 8001cde:	3218      	adds	r2, #24
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d01c      	beq.n	8001d1e <HAL_DMA_Start_IT+0x13a>
 8001ce4:	3218      	adds	r2, #24
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d019      	beq.n	8001d1e <HAL_DMA_Start_IT+0x13a>
 8001cea:	3218      	adds	r2, #24
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d016      	beq.n	8001d1e <HAL_DMA_Start_IT+0x13a>
 8001cf0:	3218      	adds	r2, #24
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d013      	beq.n	8001d1e <HAL_DMA_Start_IT+0x13a>
 8001cf6:	3218      	adds	r2, #24
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d010      	beq.n	8001d1e <HAL_DMA_Start_IT+0x13a>
 8001cfc:	3218      	adds	r2, #24
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00d      	beq.n	8001d1e <HAL_DMA_Start_IT+0x13a>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	f022 020e 	bic.w	r2, r2, #14
 8001d08:	f042 020a 	orr.w	r2, r2, #10
 8001d0c:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001d0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d10:	b193      	cbz	r3, 8001d38 <HAL_DMA_Start_IT+0x154>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001d12:	6822      	ldr	r2, [r4, #0]
 8001d14:	6813      	ldr	r3, [r2, #0]
 8001d16:	f043 0304 	orr.w	r3, r3, #4
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	e00c      	b.n	8001d38 <HAL_DMA_Start_IT+0x154>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	f022 021e 	bic.w	r2, r2, #30
 8001d24:	f042 0216 	orr.w	r2, r2, #22
 8001d28:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001d2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d2c:	b123      	cbz	r3, 8001d38 <HAL_DMA_Start_IT+0x154>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001d2e:	6822      	ldr	r2, [r4, #0]
 8001d30:	6813      	ldr	r3, [r2, #0]
 8001d32:	f043 0308 	orr.w	r3, r3, #8
 8001d36:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d38:	6823      	ldr	r3, [r4, #0]
 8001d3a:	494d      	ldr	r1, [pc, #308]	; (8001e70 <HAL_DMA_Start_IT+0x28c>)
 8001d3c:	4a4d      	ldr	r2, [pc, #308]	; (8001e74 <HAL_DMA_Start_IT+0x290>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	bf18      	it	ne
 8001d42:	428b      	cmpne	r3, r1
 8001d44:	d042      	beq.n	8001dcc <HAL_DMA_Start_IT+0x1e8>
 8001d46:	3218      	adds	r2, #24
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d03f      	beq.n	8001dcc <HAL_DMA_Start_IT+0x1e8>
 8001d4c:	3218      	adds	r2, #24
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d03c      	beq.n	8001dcc <HAL_DMA_Start_IT+0x1e8>
 8001d52:	3218      	adds	r2, #24
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d039      	beq.n	8001dcc <HAL_DMA_Start_IT+0x1e8>
 8001d58:	3218      	adds	r2, #24
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d036      	beq.n	8001dcc <HAL_DMA_Start_IT+0x1e8>
 8001d5e:	3218      	adds	r2, #24
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d033      	beq.n	8001dcc <HAL_DMA_Start_IT+0x1e8>
 8001d64:	3218      	adds	r2, #24
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d030      	beq.n	8001dcc <HAL_DMA_Start_IT+0x1e8>
 8001d6a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d02c      	beq.n	8001dcc <HAL_DMA_Start_IT+0x1e8>
 8001d72:	3218      	adds	r2, #24
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d029      	beq.n	8001dcc <HAL_DMA_Start_IT+0x1e8>
 8001d78:	3218      	adds	r2, #24
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d026      	beq.n	8001dcc <HAL_DMA_Start_IT+0x1e8>
 8001d7e:	3218      	adds	r2, #24
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d023      	beq.n	8001dcc <HAL_DMA_Start_IT+0x1e8>
 8001d84:	3218      	adds	r2, #24
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d020      	beq.n	8001dcc <HAL_DMA_Start_IT+0x1e8>
 8001d8a:	3218      	adds	r2, #24
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d01d      	beq.n	8001dcc <HAL_DMA_Start_IT+0x1e8>
 8001d90:	3218      	adds	r2, #24
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d01a      	beq.n	8001dcc <HAL_DMA_Start_IT+0x1e8>
 8001d96:	3218      	adds	r2, #24
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d017      	beq.n	8001dcc <HAL_DMA_Start_IT+0x1e8>
 8001d9c:	4a36      	ldr	r2, [pc, #216]	; (8001e78 <HAL_DMA_Start_IT+0x294>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d014      	beq.n	8001dcc <HAL_DMA_Start_IT+0x1e8>
 8001da2:	3214      	adds	r2, #20
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d011      	beq.n	8001dcc <HAL_DMA_Start_IT+0x1e8>
 8001da8:	3214      	adds	r2, #20
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d00e      	beq.n	8001dcc <HAL_DMA_Start_IT+0x1e8>
 8001dae:	3214      	adds	r2, #20
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d00b      	beq.n	8001dcc <HAL_DMA_Start_IT+0x1e8>
 8001db4:	3214      	adds	r2, #20
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d008      	beq.n	8001dcc <HAL_DMA_Start_IT+0x1e8>
 8001dba:	3214      	adds	r2, #20
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d005      	beq.n	8001dcc <HAL_DMA_Start_IT+0x1e8>
 8001dc0:	3214      	adds	r2, #20
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d002      	beq.n	8001dcc <HAL_DMA_Start_IT+0x1e8>
 8001dc6:	3214      	adds	r2, #20
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d10e      	bne.n	8001dea <HAL_DMA_Start_IT+0x206>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001dcc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001dd4:	d003      	beq.n	8001dde <HAL_DMA_Start_IT+0x1fa>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ddc:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8001dde:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001de0:	b11b      	cbz	r3, 8001dea <HAL_DMA_Start_IT+0x206>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001de8:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8001dea:	6823      	ldr	r3, [r4, #0]
 8001dec:	4920      	ldr	r1, [pc, #128]	; (8001e70 <HAL_DMA_Start_IT+0x28c>)
 8001dee:	4a21      	ldr	r2, [pc, #132]	; (8001e74 <HAL_DMA_Start_IT+0x290>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	bf18      	it	ne
 8001df4:	428b      	cmpne	r3, r1
 8001df6:	d030      	beq.n	8001e5a <HAL_DMA_Start_IT+0x276>
 8001df8:	3218      	adds	r2, #24
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d02d      	beq.n	8001e5a <HAL_DMA_Start_IT+0x276>
 8001dfe:	3218      	adds	r2, #24
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d02a      	beq.n	8001e5a <HAL_DMA_Start_IT+0x276>
 8001e04:	3218      	adds	r2, #24
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d027      	beq.n	8001e5a <HAL_DMA_Start_IT+0x276>
 8001e0a:	3218      	adds	r2, #24
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d024      	beq.n	8001e5a <HAL_DMA_Start_IT+0x276>
 8001e10:	3218      	adds	r2, #24
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d021      	beq.n	8001e5a <HAL_DMA_Start_IT+0x276>
 8001e16:	3218      	adds	r2, #24
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d01e      	beq.n	8001e5a <HAL_DMA_Start_IT+0x276>
 8001e1c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d01a      	beq.n	8001e5a <HAL_DMA_Start_IT+0x276>
 8001e24:	3218      	adds	r2, #24
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d017      	beq.n	8001e5a <HAL_DMA_Start_IT+0x276>
 8001e2a:	3218      	adds	r2, #24
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d014      	beq.n	8001e5a <HAL_DMA_Start_IT+0x276>
 8001e30:	3218      	adds	r2, #24
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d011      	beq.n	8001e5a <HAL_DMA_Start_IT+0x276>
 8001e36:	3218      	adds	r2, #24
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d00e      	beq.n	8001e5a <HAL_DMA_Start_IT+0x276>
 8001e3c:	3218      	adds	r2, #24
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d00b      	beq.n	8001e5a <HAL_DMA_Start_IT+0x276>
 8001e42:	3218      	adds	r2, #24
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d008      	beq.n	8001e5a <HAL_DMA_Start_IT+0x276>
 8001e48:	3218      	adds	r2, #24
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d005      	beq.n	8001e5a <HAL_DMA_Start_IT+0x276>
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	f042 0201 	orr.w	r2, r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e56:	2000      	movs	r0, #0
 8001e58:	e6dd      	b.n	8001c16 <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_ENABLE(hdma);
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	f042 0201 	orr.w	r2, r2, #1
 8001e60:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e62:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001e64:	e6d7      	b.n	8001c16 <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 8001e66:	2001      	movs	r0, #1
}
 8001e68:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8001e6a:	2002      	movs	r0, #2
 8001e6c:	e6d3      	b.n	8001c16 <HAL_DMA_Start_IT+0x32>
 8001e6e:	bf00      	nop
 8001e70:	40020010 	.word	0x40020010
 8001e74:	40020028 	.word	0x40020028
 8001e78:	58025408 	.word	0x58025408

08001e7c <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8001e7c:	2800      	cmp	r0, #0
 8001e7e:	f000 813a 	beq.w	80020f6 <HAL_DMA_Abort_IT+0x27a>
{
 8001e82:	b508      	push	{r3, lr}
 8001e84:	4602      	mov	r2, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e86:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d003      	beq.n	8001e98 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001e94:	2001      	movs	r0, #1
}
 8001e96:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e98:	6803      	ldr	r3, [r0, #0]
 8001e9a:	4899      	ldr	r0, [pc, #612]	; (8002100 <HAL_DMA_Abort_IT+0x284>)
 8001e9c:	4999      	ldr	r1, [pc, #612]	; (8002104 <HAL_DMA_Abort_IT+0x288>)
 8001e9e:	428b      	cmp	r3, r1
 8001ea0:	bf18      	it	ne
 8001ea2:	4283      	cmpne	r3, r0
 8001ea4:	bf0c      	ite	eq
 8001ea6:	2101      	moveq	r1, #1
 8001ea8:	2100      	movne	r1, #0
 8001eaa:	f000 80e4 	beq.w	8002076 <HAL_DMA_Abort_IT+0x1fa>
 8001eae:	3030      	adds	r0, #48	; 0x30
 8001eb0:	4283      	cmp	r3, r0
 8001eb2:	f000 80e0 	beq.w	8002076 <HAL_DMA_Abort_IT+0x1fa>
 8001eb6:	3018      	adds	r0, #24
 8001eb8:	4283      	cmp	r3, r0
 8001eba:	f000 80dc 	beq.w	8002076 <HAL_DMA_Abort_IT+0x1fa>
 8001ebe:	3018      	adds	r0, #24
 8001ec0:	4283      	cmp	r3, r0
 8001ec2:	f000 80d8 	beq.w	8002076 <HAL_DMA_Abort_IT+0x1fa>
 8001ec6:	3018      	adds	r0, #24
 8001ec8:	4283      	cmp	r3, r0
 8001eca:	f000 80d4 	beq.w	8002076 <HAL_DMA_Abort_IT+0x1fa>
 8001ece:	3018      	adds	r0, #24
 8001ed0:	4283      	cmp	r3, r0
 8001ed2:	f000 80d0 	beq.w	8002076 <HAL_DMA_Abort_IT+0x1fa>
 8001ed6:	3018      	adds	r0, #24
 8001ed8:	4283      	cmp	r3, r0
 8001eda:	f000 80cc 	beq.w	8002076 <HAL_DMA_Abort_IT+0x1fa>
 8001ede:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8001ee2:	4283      	cmp	r3, r0
 8001ee4:	f000 80c7 	beq.w	8002076 <HAL_DMA_Abort_IT+0x1fa>
 8001ee8:	3018      	adds	r0, #24
 8001eea:	4283      	cmp	r3, r0
 8001eec:	f000 80c3 	beq.w	8002076 <HAL_DMA_Abort_IT+0x1fa>
 8001ef0:	3018      	adds	r0, #24
 8001ef2:	4283      	cmp	r3, r0
 8001ef4:	f000 80bf 	beq.w	8002076 <HAL_DMA_Abort_IT+0x1fa>
 8001ef8:	3018      	adds	r0, #24
 8001efa:	4283      	cmp	r3, r0
 8001efc:	f000 80bb 	beq.w	8002076 <HAL_DMA_Abort_IT+0x1fa>
 8001f00:	3018      	adds	r0, #24
 8001f02:	4283      	cmp	r3, r0
 8001f04:	f000 80b7 	beq.w	8002076 <HAL_DMA_Abort_IT+0x1fa>
 8001f08:	3018      	adds	r0, #24
 8001f0a:	4283      	cmp	r3, r0
 8001f0c:	f000 80b3 	beq.w	8002076 <HAL_DMA_Abort_IT+0x1fa>
 8001f10:	3018      	adds	r0, #24
 8001f12:	4283      	cmp	r3, r0
 8001f14:	f000 80af 	beq.w	8002076 <HAL_DMA_Abort_IT+0x1fa>
 8001f18:	3018      	adds	r0, #24
 8001f1a:	4283      	cmp	r3, r0
 8001f1c:	f000 80ab 	beq.w	8002076 <HAL_DMA_Abort_IT+0x1fa>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f20:	6819      	ldr	r1, [r3, #0]
 8001f22:	f021 010e 	bic.w	r1, r1, #14
 8001f26:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8001f28:	6813      	ldr	r3, [r2, #0]
 8001f2a:	f5a0 6095 	sub.w	r0, r0, #1192	; 0x4a8
 8001f2e:	4975      	ldr	r1, [pc, #468]	; (8002104 <HAL_DMA_Abort_IT+0x288>)
 8001f30:	428b      	cmp	r3, r1
 8001f32:	bf18      	it	ne
 8001f34:	4283      	cmpne	r3, r0
 8001f36:	d02b      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x114>
 8001f38:	4973      	ldr	r1, [pc, #460]	; (8002108 <HAL_DMA_Abort_IT+0x28c>)
 8001f3a:	428b      	cmp	r3, r1
 8001f3c:	d028      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x114>
 8001f3e:	3118      	adds	r1, #24
 8001f40:	428b      	cmp	r3, r1
 8001f42:	d025      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x114>
 8001f44:	3118      	adds	r1, #24
 8001f46:	428b      	cmp	r3, r1
 8001f48:	d022      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x114>
 8001f4a:	3118      	adds	r1, #24
 8001f4c:	428b      	cmp	r3, r1
 8001f4e:	d01f      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x114>
 8001f50:	3118      	adds	r1, #24
 8001f52:	428b      	cmp	r3, r1
 8001f54:	d01c      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x114>
 8001f56:	3118      	adds	r1, #24
 8001f58:	428b      	cmp	r3, r1
 8001f5a:	d019      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x114>
 8001f5c:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8001f60:	428b      	cmp	r3, r1
 8001f62:	d015      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x114>
 8001f64:	3118      	adds	r1, #24
 8001f66:	428b      	cmp	r3, r1
 8001f68:	d012      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x114>
 8001f6a:	3118      	adds	r1, #24
 8001f6c:	428b      	cmp	r3, r1
 8001f6e:	d00f      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x114>
 8001f70:	3118      	adds	r1, #24
 8001f72:	428b      	cmp	r3, r1
 8001f74:	d00c      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x114>
 8001f76:	3118      	adds	r1, #24
 8001f78:	428b      	cmp	r3, r1
 8001f7a:	d009      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x114>
 8001f7c:	3118      	adds	r1, #24
 8001f7e:	428b      	cmp	r3, r1
 8001f80:	d006      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x114>
 8001f82:	3118      	adds	r1, #24
 8001f84:	428b      	cmp	r3, r1
 8001f86:	d003      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x114>
 8001f88:	3118      	adds	r1, #24
 8001f8a:	428b      	cmp	r3, r1
 8001f8c:	f040 80ae 	bne.w	80020ec <HAL_DMA_Abort_IT+0x270>
 8001f90:	6819      	ldr	r1, [r3, #0]
 8001f92:	f021 0101 	bic.w	r1, r1, #1
 8001f96:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f98:	6813      	ldr	r3, [r2, #0]
 8001f9a:	4859      	ldr	r0, [pc, #356]	; (8002100 <HAL_DMA_Abort_IT+0x284>)
 8001f9c:	4959      	ldr	r1, [pc, #356]	; (8002104 <HAL_DMA_Abort_IT+0x288>)
 8001f9e:	428b      	cmp	r3, r1
 8001fa0:	bf18      	it	ne
 8001fa2:	4283      	cmpne	r3, r0
 8001fa4:	d042      	beq.n	800202c <HAL_DMA_Abort_IT+0x1b0>
 8001fa6:	3118      	adds	r1, #24
 8001fa8:	428b      	cmp	r3, r1
 8001faa:	d03f      	beq.n	800202c <HAL_DMA_Abort_IT+0x1b0>
 8001fac:	3118      	adds	r1, #24
 8001fae:	428b      	cmp	r3, r1
 8001fb0:	d03c      	beq.n	800202c <HAL_DMA_Abort_IT+0x1b0>
 8001fb2:	3118      	adds	r1, #24
 8001fb4:	428b      	cmp	r3, r1
 8001fb6:	d039      	beq.n	800202c <HAL_DMA_Abort_IT+0x1b0>
 8001fb8:	3118      	adds	r1, #24
 8001fba:	428b      	cmp	r3, r1
 8001fbc:	d036      	beq.n	800202c <HAL_DMA_Abort_IT+0x1b0>
 8001fbe:	3118      	adds	r1, #24
 8001fc0:	428b      	cmp	r3, r1
 8001fc2:	d033      	beq.n	800202c <HAL_DMA_Abort_IT+0x1b0>
 8001fc4:	3118      	adds	r1, #24
 8001fc6:	428b      	cmp	r3, r1
 8001fc8:	d030      	beq.n	800202c <HAL_DMA_Abort_IT+0x1b0>
 8001fca:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8001fce:	428b      	cmp	r3, r1
 8001fd0:	d02c      	beq.n	800202c <HAL_DMA_Abort_IT+0x1b0>
 8001fd2:	3118      	adds	r1, #24
 8001fd4:	428b      	cmp	r3, r1
 8001fd6:	d029      	beq.n	800202c <HAL_DMA_Abort_IT+0x1b0>
 8001fd8:	3118      	adds	r1, #24
 8001fda:	428b      	cmp	r3, r1
 8001fdc:	d026      	beq.n	800202c <HAL_DMA_Abort_IT+0x1b0>
 8001fde:	3118      	adds	r1, #24
 8001fe0:	428b      	cmp	r3, r1
 8001fe2:	d023      	beq.n	800202c <HAL_DMA_Abort_IT+0x1b0>
 8001fe4:	3118      	adds	r1, #24
 8001fe6:	428b      	cmp	r3, r1
 8001fe8:	d020      	beq.n	800202c <HAL_DMA_Abort_IT+0x1b0>
 8001fea:	3118      	adds	r1, #24
 8001fec:	428b      	cmp	r3, r1
 8001fee:	d01d      	beq.n	800202c <HAL_DMA_Abort_IT+0x1b0>
 8001ff0:	3118      	adds	r1, #24
 8001ff2:	428b      	cmp	r3, r1
 8001ff4:	d01a      	beq.n	800202c <HAL_DMA_Abort_IT+0x1b0>
 8001ff6:	3118      	adds	r1, #24
 8001ff8:	428b      	cmp	r3, r1
 8001ffa:	d017      	beq.n	800202c <HAL_DMA_Abort_IT+0x1b0>
 8001ffc:	4943      	ldr	r1, [pc, #268]	; (800210c <HAL_DMA_Abort_IT+0x290>)
 8001ffe:	428b      	cmp	r3, r1
 8002000:	d014      	beq.n	800202c <HAL_DMA_Abort_IT+0x1b0>
 8002002:	3114      	adds	r1, #20
 8002004:	428b      	cmp	r3, r1
 8002006:	d011      	beq.n	800202c <HAL_DMA_Abort_IT+0x1b0>
 8002008:	3114      	adds	r1, #20
 800200a:	428b      	cmp	r3, r1
 800200c:	d00e      	beq.n	800202c <HAL_DMA_Abort_IT+0x1b0>
 800200e:	3114      	adds	r1, #20
 8002010:	428b      	cmp	r3, r1
 8002012:	d00b      	beq.n	800202c <HAL_DMA_Abort_IT+0x1b0>
 8002014:	3114      	adds	r1, #20
 8002016:	428b      	cmp	r3, r1
 8002018:	d008      	beq.n	800202c <HAL_DMA_Abort_IT+0x1b0>
 800201a:	3114      	adds	r1, #20
 800201c:	428b      	cmp	r3, r1
 800201e:	d005      	beq.n	800202c <HAL_DMA_Abort_IT+0x1b0>
 8002020:	3114      	adds	r1, #20
 8002022:	428b      	cmp	r3, r1
 8002024:	d002      	beq.n	800202c <HAL_DMA_Abort_IT+0x1b0>
 8002026:	3114      	adds	r1, #20
 8002028:	428b      	cmp	r3, r1
 800202a:	d117      	bne.n	800205c <HAL_DMA_Abort_IT+0x1e0>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800202c:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800202e:	680b      	ldr	r3, [r1, #0]
 8002030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002034:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002036:	6d90      	ldr	r0, [r2, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002038:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800203a:	f003 011f 	and.w	r1, r3, #31
 800203e:	2301      	movs	r3, #1
 8002040:	408b      	lsls	r3, r1
 8002042:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002044:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8002046:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8002048:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800204a:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 800204c:	b133      	cbz	r3, 800205c <HAL_DMA_Abort_IT+0x1e0>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800204e:	6819      	ldr	r1, [r3, #0]
 8002050:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002054:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002056:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002058:	6f51      	ldr	r1, [r2, #116]	; 0x74
 800205a:	6059      	str	r1, [r3, #4]
      __HAL_UNLOCK(hdma);
 800205c:	2300      	movs	r3, #0
 800205e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002062:	2301      	movs	r3, #1
 8002064:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8002068:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800206a:	2b00      	cmp	r3, #0
 800206c:	d045      	beq.n	80020fa <HAL_DMA_Abort_IT+0x27e>
 800206e:	4610      	mov	r0, r2
        hdma->XferAbortCallback(hdma);
 8002070:	4798      	blx	r3
  return HAL_OK;
 8002072:	2000      	movs	r0, #0
 8002074:	e70f      	b.n	8001e96 <HAL_DMA_Abort_IT+0x1a>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002076:	2004      	movs	r0, #4
 8002078:	f882 0035 	strb.w	r0, [r2, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800207c:	bb81      	cbnz	r1, 80020e0 <HAL_DMA_Abort_IT+0x264>
 800207e:	4a22      	ldr	r2, [pc, #136]	; (8002108 <HAL_DMA_Abort_IT+0x28c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d02d      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x264>
 8002084:	3218      	adds	r2, #24
 8002086:	4293      	cmp	r3, r2
 8002088:	d02a      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x264>
 800208a:	3218      	adds	r2, #24
 800208c:	4293      	cmp	r3, r2
 800208e:	d027      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x264>
 8002090:	3218      	adds	r2, #24
 8002092:	4293      	cmp	r3, r2
 8002094:	d024      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x264>
 8002096:	3218      	adds	r2, #24
 8002098:	4293      	cmp	r3, r2
 800209a:	d021      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x264>
 800209c:	3218      	adds	r2, #24
 800209e:	4293      	cmp	r3, r2
 80020a0:	d01e      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x264>
 80020a2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d01a      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x264>
 80020aa:	3218      	adds	r2, #24
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d017      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x264>
 80020b0:	3218      	adds	r2, #24
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d014      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x264>
 80020b6:	3218      	adds	r2, #24
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d011      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x264>
 80020bc:	3218      	adds	r2, #24
 80020be:	4293      	cmp	r3, r2
 80020c0:	d00e      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x264>
 80020c2:	3218      	adds	r2, #24
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d00b      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x264>
 80020c8:	3218      	adds	r2, #24
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d008      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x264>
 80020ce:	3218      	adds	r2, #24
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d005      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x264>
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	f022 0201 	bic.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80020dc:	2000      	movs	r0, #0
 80020de:	e6da      	b.n	8001e96 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	f022 0201 	bic.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80020e8:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 80020ea:	e6d4      	b.n	8001e96 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 80020ec:	6819      	ldr	r1, [r3, #0]
 80020ee:	f021 0101 	bic.w	r1, r1, #1
 80020f2:	6019      	str	r1, [r3, #0]
 80020f4:	e750      	b.n	8001f98 <HAL_DMA_Abort_IT+0x11c>
    return HAL_ERROR;
 80020f6:	2001      	movs	r0, #1
}
 80020f8:	4770      	bx	lr
  return HAL_OK;
 80020fa:	2000      	movs	r0, #0
 80020fc:	e6cb      	b.n	8001e96 <HAL_DMA_Abort_IT+0x1a>
 80020fe:	bf00      	nop
 8002100:	40020010 	.word	0x40020010
 8002104:	40020028 	.word	0x40020028
 8002108:	40020040 	.word	0x40020040
 800210c:	58025408 	.word	0x58025408

08002110 <HAL_DMA_IRQHandler>:
{
 8002110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002112:	b083      	sub	sp, #12
 8002114:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8002116:	2300      	movs	r3, #0
 8002118:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800211a:	4ba2      	ldr	r3, [pc, #648]	; (80023a4 <HAL_DMA_IRQHandler+0x294>)
 800211c:	681d      	ldr	r5, [r3, #0]
 800211e:	4ba2      	ldr	r3, [pc, #648]	; (80023a8 <HAL_DMA_IRQHandler+0x298>)
 8002120:	fba3 3505 	umull	r3, r5, r3, r5
 8002124:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002126:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr_dma  = regs_dma->ISR;
 8002128:	683e      	ldr	r6, [r7, #0]
  tmpisr_bdma = regs_bdma->ISR;
 800212a:	f8d7 c000 	ldr.w	ip, [r7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800212e:	6803      	ldr	r3, [r0, #0]
 8002130:	499e      	ldr	r1, [pc, #632]	; (80023ac <HAL_DMA_IRQHandler+0x29c>)
 8002132:	489f      	ldr	r0, [pc, #636]	; (80023b0 <HAL_DMA_IRQHandler+0x2a0>)
 8002134:	4283      	cmp	r3, r0
 8002136:	bf18      	it	ne
 8002138:	428b      	cmpne	r3, r1
 800213a:	bf0c      	ite	eq
 800213c:	2001      	moveq	r0, #1
 800213e:	2000      	movne	r0, #0
 8002140:	d061      	beq.n	8002206 <HAL_DMA_IRQHandler+0xf6>
 8002142:	4a9c      	ldr	r2, [pc, #624]	; (80023b4 <HAL_DMA_IRQHandler+0x2a4>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d05e      	beq.n	8002206 <HAL_DMA_IRQHandler+0xf6>
 8002148:	3218      	adds	r2, #24
 800214a:	4293      	cmp	r3, r2
 800214c:	d05b      	beq.n	8002206 <HAL_DMA_IRQHandler+0xf6>
 800214e:	3218      	adds	r2, #24
 8002150:	4293      	cmp	r3, r2
 8002152:	d058      	beq.n	8002206 <HAL_DMA_IRQHandler+0xf6>
 8002154:	3218      	adds	r2, #24
 8002156:	4293      	cmp	r3, r2
 8002158:	d055      	beq.n	8002206 <HAL_DMA_IRQHandler+0xf6>
 800215a:	3218      	adds	r2, #24
 800215c:	4293      	cmp	r3, r2
 800215e:	d052      	beq.n	8002206 <HAL_DMA_IRQHandler+0xf6>
 8002160:	3218      	adds	r2, #24
 8002162:	4293      	cmp	r3, r2
 8002164:	d04f      	beq.n	8002206 <HAL_DMA_IRQHandler+0xf6>
 8002166:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800216a:	4293      	cmp	r3, r2
 800216c:	d04b      	beq.n	8002206 <HAL_DMA_IRQHandler+0xf6>
 800216e:	3218      	adds	r2, #24
 8002170:	4293      	cmp	r3, r2
 8002172:	d048      	beq.n	8002206 <HAL_DMA_IRQHandler+0xf6>
 8002174:	3218      	adds	r2, #24
 8002176:	4293      	cmp	r3, r2
 8002178:	d045      	beq.n	8002206 <HAL_DMA_IRQHandler+0xf6>
 800217a:	3218      	adds	r2, #24
 800217c:	4293      	cmp	r3, r2
 800217e:	d042      	beq.n	8002206 <HAL_DMA_IRQHandler+0xf6>
 8002180:	3218      	adds	r2, #24
 8002182:	4293      	cmp	r3, r2
 8002184:	d03f      	beq.n	8002206 <HAL_DMA_IRQHandler+0xf6>
 8002186:	3218      	adds	r2, #24
 8002188:	4293      	cmp	r3, r2
 800218a:	d03c      	beq.n	8002206 <HAL_DMA_IRQHandler+0xf6>
 800218c:	3218      	adds	r2, #24
 800218e:	4293      	cmp	r3, r2
 8002190:	d039      	beq.n	8002206 <HAL_DMA_IRQHandler+0xf6>
 8002192:	3218      	adds	r2, #24
 8002194:	4293      	cmp	r3, r2
 8002196:	d036      	beq.n	8002206 <HAL_DMA_IRQHandler+0xf6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002198:	4987      	ldr	r1, [pc, #540]	; (80023b8 <HAL_DMA_IRQHandler+0x2a8>)
 800219a:	4a88      	ldr	r2, [pc, #544]	; (80023bc <HAL_DMA_IRQHandler+0x2ac>)
 800219c:	4293      	cmp	r3, r2
 800219e:	bf18      	it	ne
 80021a0:	428b      	cmpne	r3, r1
 80021a2:	d012      	beq.n	80021ca <HAL_DMA_IRQHandler+0xba>
 80021a4:	4a86      	ldr	r2, [pc, #536]	; (80023c0 <HAL_DMA_IRQHandler+0x2b0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d00f      	beq.n	80021ca <HAL_DMA_IRQHandler+0xba>
 80021aa:	3214      	adds	r2, #20
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d00c      	beq.n	80021ca <HAL_DMA_IRQHandler+0xba>
 80021b0:	3214      	adds	r2, #20
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d009      	beq.n	80021ca <HAL_DMA_IRQHandler+0xba>
 80021b6:	3214      	adds	r2, #20
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d006      	beq.n	80021ca <HAL_DMA_IRQHandler+0xba>
 80021bc:	3214      	adds	r2, #20
 80021be:	4293      	cmp	r3, r2
 80021c0:	d003      	beq.n	80021ca <HAL_DMA_IRQHandler+0xba>
 80021c2:	3214      	adds	r2, #20
 80021c4:	4293      	cmp	r3, r2
 80021c6:	f040 8262 	bne.w	800268e <HAL_DMA_IRQHandler+0x57e>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80021ca:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80021cc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80021ce:	f001 011f 	and.w	r1, r1, #31
 80021d2:	2004      	movs	r0, #4
 80021d4:	4088      	lsls	r0, r1
 80021d6:	ea10 0f0c 	tst.w	r0, ip
 80021da:	f000 82a8 	beq.w	800272e <HAL_DMA_IRQHandler+0x61e>
 80021de:	f012 0f04 	tst.w	r2, #4
 80021e2:	f000 82a4 	beq.w	800272e <HAL_DMA_IRQHandler+0x61e>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80021e6:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80021e8:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80021ec:	f000 825b 	beq.w	80026a6 <HAL_DMA_IRQHandler+0x596>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80021f0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80021f4:	f040 8251 	bne.w	800269a <HAL_DMA_IRQHandler+0x58a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 8247 	beq.w	800268e <HAL_DMA_IRQHandler+0x57e>
            hdma->XferM1HalfCpltCallback(hdma);
 8002200:	4620      	mov	r0, r4
 8002202:	4798      	blx	r3
 8002204:	e243      	b.n	800268e <HAL_DMA_IRQHandler+0x57e>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002206:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002208:	f002 011f 	and.w	r1, r2, #31
 800220c:	2208      	movs	r2, #8
 800220e:	408a      	lsls	r2, r1
 8002210:	4232      	tst	r2, r6
 8002212:	d041      	beq.n	8002298 <HAL_DMA_IRQHandler+0x188>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002214:	bb70      	cbnz	r0, 8002274 <HAL_DMA_IRQHandler+0x164>
 8002216:	4a67      	ldr	r2, [pc, #412]	; (80023b4 <HAL_DMA_IRQHandler+0x2a4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d02b      	beq.n	8002274 <HAL_DMA_IRQHandler+0x164>
 800221c:	3218      	adds	r2, #24
 800221e:	4293      	cmp	r3, r2
 8002220:	d028      	beq.n	8002274 <HAL_DMA_IRQHandler+0x164>
 8002222:	3218      	adds	r2, #24
 8002224:	4293      	cmp	r3, r2
 8002226:	d025      	beq.n	8002274 <HAL_DMA_IRQHandler+0x164>
 8002228:	3218      	adds	r2, #24
 800222a:	4293      	cmp	r3, r2
 800222c:	d022      	beq.n	8002274 <HAL_DMA_IRQHandler+0x164>
 800222e:	3218      	adds	r2, #24
 8002230:	4293      	cmp	r3, r2
 8002232:	d01f      	beq.n	8002274 <HAL_DMA_IRQHandler+0x164>
 8002234:	3218      	adds	r2, #24
 8002236:	4293      	cmp	r3, r2
 8002238:	d01c      	beq.n	8002274 <HAL_DMA_IRQHandler+0x164>
 800223a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800223e:	4293      	cmp	r3, r2
 8002240:	d018      	beq.n	8002274 <HAL_DMA_IRQHandler+0x164>
 8002242:	3218      	adds	r2, #24
 8002244:	4293      	cmp	r3, r2
 8002246:	d015      	beq.n	8002274 <HAL_DMA_IRQHandler+0x164>
 8002248:	3218      	adds	r2, #24
 800224a:	4293      	cmp	r3, r2
 800224c:	d012      	beq.n	8002274 <HAL_DMA_IRQHandler+0x164>
 800224e:	3218      	adds	r2, #24
 8002250:	4293      	cmp	r3, r2
 8002252:	d00f      	beq.n	8002274 <HAL_DMA_IRQHandler+0x164>
 8002254:	3218      	adds	r2, #24
 8002256:	4293      	cmp	r3, r2
 8002258:	d00c      	beq.n	8002274 <HAL_DMA_IRQHandler+0x164>
 800225a:	3218      	adds	r2, #24
 800225c:	4293      	cmp	r3, r2
 800225e:	d009      	beq.n	8002274 <HAL_DMA_IRQHandler+0x164>
 8002260:	3218      	adds	r2, #24
 8002262:	4293      	cmp	r3, r2
 8002264:	d006      	beq.n	8002274 <HAL_DMA_IRQHandler+0x164>
 8002266:	3218      	adds	r2, #24
 8002268:	4293      	cmp	r3, r2
 800226a:	d003      	beq.n	8002274 <HAL_DMA_IRQHandler+0x164>
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8002272:	e002      	b.n	800227a <HAL_DMA_IRQHandler+0x16a>
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800227a:	b16a      	cbz	r2, 8002298 <HAL_DMA_IRQHandler+0x188>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	f022 0204 	bic.w	r2, r2, #4
 8002282:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002284:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002286:	f003 021f 	and.w	r2, r3, #31
 800228a:	2308      	movs	r3, #8
 800228c:	4093      	lsls	r3, r2
 800228e:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002290:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002298:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800229a:	f002 021f 	and.w	r2, r2, #31
 800229e:	fa26 f302 	lsr.w	r3, r6, r2
 80022a2:	f013 0f01 	tst.w	r3, #1
 80022a6:	d037      	beq.n	8002318 <HAL_DMA_IRQHandler+0x208>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80022a8:	6823      	ldr	r3, [r4, #0]
 80022aa:	4840      	ldr	r0, [pc, #256]	; (80023ac <HAL_DMA_IRQHandler+0x29c>)
 80022ac:	4940      	ldr	r1, [pc, #256]	; (80023b0 <HAL_DMA_IRQHandler+0x2a0>)
 80022ae:	428b      	cmp	r3, r1
 80022b0:	bf18      	it	ne
 80022b2:	4283      	cmpne	r3, r0
 80022b4:	d02c      	beq.n	8002310 <HAL_DMA_IRQHandler+0x200>
 80022b6:	3118      	adds	r1, #24
 80022b8:	428b      	cmp	r3, r1
 80022ba:	d029      	beq.n	8002310 <HAL_DMA_IRQHandler+0x200>
 80022bc:	3118      	adds	r1, #24
 80022be:	428b      	cmp	r3, r1
 80022c0:	d026      	beq.n	8002310 <HAL_DMA_IRQHandler+0x200>
 80022c2:	3118      	adds	r1, #24
 80022c4:	428b      	cmp	r3, r1
 80022c6:	d023      	beq.n	8002310 <HAL_DMA_IRQHandler+0x200>
 80022c8:	3118      	adds	r1, #24
 80022ca:	428b      	cmp	r3, r1
 80022cc:	d020      	beq.n	8002310 <HAL_DMA_IRQHandler+0x200>
 80022ce:	3118      	adds	r1, #24
 80022d0:	428b      	cmp	r3, r1
 80022d2:	d01d      	beq.n	8002310 <HAL_DMA_IRQHandler+0x200>
 80022d4:	3118      	adds	r1, #24
 80022d6:	428b      	cmp	r3, r1
 80022d8:	d01a      	beq.n	8002310 <HAL_DMA_IRQHandler+0x200>
 80022da:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80022de:	428b      	cmp	r3, r1
 80022e0:	d016      	beq.n	8002310 <HAL_DMA_IRQHandler+0x200>
 80022e2:	3118      	adds	r1, #24
 80022e4:	428b      	cmp	r3, r1
 80022e6:	d013      	beq.n	8002310 <HAL_DMA_IRQHandler+0x200>
 80022e8:	3118      	adds	r1, #24
 80022ea:	428b      	cmp	r3, r1
 80022ec:	d010      	beq.n	8002310 <HAL_DMA_IRQHandler+0x200>
 80022ee:	3118      	adds	r1, #24
 80022f0:	428b      	cmp	r3, r1
 80022f2:	d00d      	beq.n	8002310 <HAL_DMA_IRQHandler+0x200>
 80022f4:	3118      	adds	r1, #24
 80022f6:	428b      	cmp	r3, r1
 80022f8:	d00a      	beq.n	8002310 <HAL_DMA_IRQHandler+0x200>
 80022fa:	3118      	adds	r1, #24
 80022fc:	428b      	cmp	r3, r1
 80022fe:	d007      	beq.n	8002310 <HAL_DMA_IRQHandler+0x200>
 8002300:	3118      	adds	r1, #24
 8002302:	428b      	cmp	r3, r1
 8002304:	d004      	beq.n	8002310 <HAL_DMA_IRQHandler+0x200>
 8002306:	3118      	adds	r1, #24
 8002308:	428b      	cmp	r3, r1
 800230a:	d001      	beq.n	8002310 <HAL_DMA_IRQHandler+0x200>
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	e003      	b.n	8002318 <HAL_DMA_IRQHandler+0x208>
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002316:	d13b      	bne.n	8002390 <HAL_DMA_IRQHandler+0x280>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002318:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800231a:	f003 031f 	and.w	r3, r3, #31
 800231e:	2204      	movs	r2, #4
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	4233      	tst	r3, r6
 8002326:	d051      	beq.n	80023cc <HAL_DMA_IRQHandler+0x2bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002328:	6822      	ldr	r2, [r4, #0]
 800232a:	4820      	ldr	r0, [pc, #128]	; (80023ac <HAL_DMA_IRQHandler+0x29c>)
 800232c:	4920      	ldr	r1, [pc, #128]	; (80023b0 <HAL_DMA_IRQHandler+0x2a0>)
 800232e:	428a      	cmp	r2, r1
 8002330:	bf18      	it	ne
 8002332:	4282      	cmpne	r2, r0
 8002334:	d046      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x2b4>
 8002336:	3118      	adds	r1, #24
 8002338:	428a      	cmp	r2, r1
 800233a:	d043      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x2b4>
 800233c:	3118      	adds	r1, #24
 800233e:	428a      	cmp	r2, r1
 8002340:	d040      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x2b4>
 8002342:	3118      	adds	r1, #24
 8002344:	428a      	cmp	r2, r1
 8002346:	d03d      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x2b4>
 8002348:	3118      	adds	r1, #24
 800234a:	428a      	cmp	r2, r1
 800234c:	d03a      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x2b4>
 800234e:	3118      	adds	r1, #24
 8002350:	428a      	cmp	r2, r1
 8002352:	d037      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x2b4>
 8002354:	3118      	adds	r1, #24
 8002356:	428a      	cmp	r2, r1
 8002358:	d034      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x2b4>
 800235a:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800235e:	428a      	cmp	r2, r1
 8002360:	d030      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x2b4>
 8002362:	3118      	adds	r1, #24
 8002364:	428a      	cmp	r2, r1
 8002366:	d02d      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x2b4>
 8002368:	3118      	adds	r1, #24
 800236a:	428a      	cmp	r2, r1
 800236c:	d02a      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x2b4>
 800236e:	3118      	adds	r1, #24
 8002370:	428a      	cmp	r2, r1
 8002372:	d027      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x2b4>
 8002374:	3118      	adds	r1, #24
 8002376:	428a      	cmp	r2, r1
 8002378:	d024      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x2b4>
 800237a:	3118      	adds	r1, #24
 800237c:	428a      	cmp	r2, r1
 800237e:	d021      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x2b4>
 8002380:	3118      	adds	r1, #24
 8002382:	428a      	cmp	r2, r1
 8002384:	d01e      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x2b4>
 8002386:	3118      	adds	r1, #24
 8002388:	428a      	cmp	r2, r1
 800238a:	d01b      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x2b4>
 800238c:	6813      	ldr	r3, [r2, #0]
 800238e:	e01d      	b.n	80023cc <HAL_DMA_IRQHandler+0x2bc>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002390:	2301      	movs	r3, #1
 8002392:	fa03 f202 	lsl.w	r2, r3, r2
 8002396:	60ba      	str	r2, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002398:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800239a:	f043 0302 	orr.w	r3, r3, #2
 800239e:	6563      	str	r3, [r4, #84]	; 0x54
 80023a0:	e7ba      	b.n	8002318 <HAL_DMA_IRQHandler+0x208>
 80023a2:	bf00      	nop
 80023a4:	20000078 	.word	0x20000078
 80023a8:	1b4e81b5 	.word	0x1b4e81b5
 80023ac:	40020010 	.word	0x40020010
 80023b0:	40020028 	.word	0x40020028
 80023b4:	40020040 	.word	0x40020040
 80023b8:	58025408 	.word	0x58025408
 80023bc:	5802541c 	.word	0x5802541c
 80023c0:	58025430 	.word	0x58025430
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80023c4:	6812      	ldr	r2, [r2, #0]
 80023c6:	f012 0f02 	tst.w	r2, #2
 80023ca:	d13d      	bne.n	8002448 <HAL_DMA_IRQHandler+0x338>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80023cc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80023ce:	f003 031f 	and.w	r3, r3, #31
 80023d2:	2210      	movs	r2, #16
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	4233      	tst	r3, r6
 80023da:	d05f      	beq.n	800249c <HAL_DMA_IRQHandler+0x38c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80023dc:	6822      	ldr	r2, [r4, #0]
 80023de:	489b      	ldr	r0, [pc, #620]	; (800264c <HAL_DMA_IRQHandler+0x53c>)
 80023e0:	499b      	ldr	r1, [pc, #620]	; (8002650 <HAL_DMA_IRQHandler+0x540>)
 80023e2:	428a      	cmp	r2, r1
 80023e4:	bf18      	it	ne
 80023e6:	4282      	cmpne	r2, r0
 80023e8:	d034      	beq.n	8002454 <HAL_DMA_IRQHandler+0x344>
 80023ea:	3118      	adds	r1, #24
 80023ec:	428a      	cmp	r2, r1
 80023ee:	d031      	beq.n	8002454 <HAL_DMA_IRQHandler+0x344>
 80023f0:	3118      	adds	r1, #24
 80023f2:	428a      	cmp	r2, r1
 80023f4:	d02e      	beq.n	8002454 <HAL_DMA_IRQHandler+0x344>
 80023f6:	3118      	adds	r1, #24
 80023f8:	428a      	cmp	r2, r1
 80023fa:	d02b      	beq.n	8002454 <HAL_DMA_IRQHandler+0x344>
 80023fc:	3118      	adds	r1, #24
 80023fe:	428a      	cmp	r2, r1
 8002400:	d028      	beq.n	8002454 <HAL_DMA_IRQHandler+0x344>
 8002402:	3118      	adds	r1, #24
 8002404:	428a      	cmp	r2, r1
 8002406:	d025      	beq.n	8002454 <HAL_DMA_IRQHandler+0x344>
 8002408:	3118      	adds	r1, #24
 800240a:	428a      	cmp	r2, r1
 800240c:	d022      	beq.n	8002454 <HAL_DMA_IRQHandler+0x344>
 800240e:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002412:	428a      	cmp	r2, r1
 8002414:	d01e      	beq.n	8002454 <HAL_DMA_IRQHandler+0x344>
 8002416:	3118      	adds	r1, #24
 8002418:	428a      	cmp	r2, r1
 800241a:	d01b      	beq.n	8002454 <HAL_DMA_IRQHandler+0x344>
 800241c:	3118      	adds	r1, #24
 800241e:	428a      	cmp	r2, r1
 8002420:	d018      	beq.n	8002454 <HAL_DMA_IRQHandler+0x344>
 8002422:	3118      	adds	r1, #24
 8002424:	428a      	cmp	r2, r1
 8002426:	d015      	beq.n	8002454 <HAL_DMA_IRQHandler+0x344>
 8002428:	3118      	adds	r1, #24
 800242a:	428a      	cmp	r2, r1
 800242c:	d012      	beq.n	8002454 <HAL_DMA_IRQHandler+0x344>
 800242e:	3118      	adds	r1, #24
 8002430:	428a      	cmp	r2, r1
 8002432:	d00f      	beq.n	8002454 <HAL_DMA_IRQHandler+0x344>
 8002434:	3118      	adds	r1, #24
 8002436:	428a      	cmp	r2, r1
 8002438:	d00c      	beq.n	8002454 <HAL_DMA_IRQHandler+0x344>
 800243a:	3118      	adds	r1, #24
 800243c:	428a      	cmp	r2, r1
 800243e:	d009      	beq.n	8002454 <HAL_DMA_IRQHandler+0x344>
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8002446:	e008      	b.n	800245a <HAL_DMA_IRQHandler+0x34a>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002448:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800244a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800244c:	f043 0304 	orr.w	r3, r3, #4
 8002450:	6563      	str	r3, [r4, #84]	; 0x54
 8002452:	e7bb      	b.n	80023cc <HAL_DMA_IRQHandler+0x2bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002454:	6812      	ldr	r2, [r2, #0]
 8002456:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800245a:	b1fa      	cbz	r2, 800249c <HAL_DMA_IRQHandler+0x38c>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800245c:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800245e:	6823      	ldr	r3, [r4, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002466:	d00d      	beq.n	8002484 <HAL_DMA_IRQHandler+0x374>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800246e:	d104      	bne.n	800247a <HAL_DMA_IRQHandler+0x36a>
            if(hdma->XferHalfCpltCallback != NULL)
 8002470:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002472:	b19b      	cbz	r3, 800249c <HAL_DMA_IRQHandler+0x38c>
              hdma->XferHalfCpltCallback(hdma);
 8002474:	4620      	mov	r0, r4
 8002476:	4798      	blx	r3
 8002478:	e010      	b.n	800249c <HAL_DMA_IRQHandler+0x38c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800247a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800247c:	b173      	cbz	r3, 800249c <HAL_DMA_IRQHandler+0x38c>
              hdma->XferM1HalfCpltCallback(hdma);
 800247e:	4620      	mov	r0, r4
 8002480:	4798      	blx	r3
 8002482:	e00b      	b.n	800249c <HAL_DMA_IRQHandler+0x38c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	f412 7f80 	tst.w	r2, #256	; 0x100
 800248a:	d103      	bne.n	8002494 <HAL_DMA_IRQHandler+0x384>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	f022 0208 	bic.w	r2, r2, #8
 8002492:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8002494:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002496:	b10b      	cbz	r3, 800249c <HAL_DMA_IRQHandler+0x38c>
            hdma->XferHalfCpltCallback(hdma);
 8002498:	4620      	mov	r0, r4
 800249a:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800249c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800249e:	f003 031f 	and.w	r3, r3, #31
 80024a2:	2220      	movs	r2, #32
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	4233      	tst	r3, r6
 80024aa:	f000 808e 	beq.w	80025ca <HAL_DMA_IRQHandler+0x4ba>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80024ae:	6822      	ldr	r2, [r4, #0]
 80024b0:	4866      	ldr	r0, [pc, #408]	; (800264c <HAL_DMA_IRQHandler+0x53c>)
 80024b2:	4967      	ldr	r1, [pc, #412]	; (8002650 <HAL_DMA_IRQHandler+0x540>)
 80024b4:	428a      	cmp	r2, r1
 80024b6:	bf18      	it	ne
 80024b8:	4282      	cmpne	r2, r0
 80024ba:	d02e      	beq.n	800251a <HAL_DMA_IRQHandler+0x40a>
 80024bc:	3118      	adds	r1, #24
 80024be:	428a      	cmp	r2, r1
 80024c0:	d02b      	beq.n	800251a <HAL_DMA_IRQHandler+0x40a>
 80024c2:	3118      	adds	r1, #24
 80024c4:	428a      	cmp	r2, r1
 80024c6:	d028      	beq.n	800251a <HAL_DMA_IRQHandler+0x40a>
 80024c8:	3118      	adds	r1, #24
 80024ca:	428a      	cmp	r2, r1
 80024cc:	d025      	beq.n	800251a <HAL_DMA_IRQHandler+0x40a>
 80024ce:	3118      	adds	r1, #24
 80024d0:	428a      	cmp	r2, r1
 80024d2:	d022      	beq.n	800251a <HAL_DMA_IRQHandler+0x40a>
 80024d4:	3118      	adds	r1, #24
 80024d6:	428a      	cmp	r2, r1
 80024d8:	d01f      	beq.n	800251a <HAL_DMA_IRQHandler+0x40a>
 80024da:	3118      	adds	r1, #24
 80024dc:	428a      	cmp	r2, r1
 80024de:	d01c      	beq.n	800251a <HAL_DMA_IRQHandler+0x40a>
 80024e0:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80024e4:	428a      	cmp	r2, r1
 80024e6:	d018      	beq.n	800251a <HAL_DMA_IRQHandler+0x40a>
 80024e8:	3118      	adds	r1, #24
 80024ea:	428a      	cmp	r2, r1
 80024ec:	d015      	beq.n	800251a <HAL_DMA_IRQHandler+0x40a>
 80024ee:	3118      	adds	r1, #24
 80024f0:	428a      	cmp	r2, r1
 80024f2:	d012      	beq.n	800251a <HAL_DMA_IRQHandler+0x40a>
 80024f4:	3118      	adds	r1, #24
 80024f6:	428a      	cmp	r2, r1
 80024f8:	d00f      	beq.n	800251a <HAL_DMA_IRQHandler+0x40a>
 80024fa:	3118      	adds	r1, #24
 80024fc:	428a      	cmp	r2, r1
 80024fe:	d00c      	beq.n	800251a <HAL_DMA_IRQHandler+0x40a>
 8002500:	3118      	adds	r1, #24
 8002502:	428a      	cmp	r2, r1
 8002504:	d009      	beq.n	800251a <HAL_DMA_IRQHandler+0x40a>
 8002506:	3118      	adds	r1, #24
 8002508:	428a      	cmp	r2, r1
 800250a:	d006      	beq.n	800251a <HAL_DMA_IRQHandler+0x40a>
 800250c:	3118      	adds	r1, #24
 800250e:	428a      	cmp	r2, r1
 8002510:	d003      	beq.n	800251a <HAL_DMA_IRQHandler+0x40a>
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8002518:	e002      	b.n	8002520 <HAL_DMA_IRQHandler+0x410>
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002520:	2a00      	cmp	r2, #0
 8002522:	d052      	beq.n	80025ca <HAL_DMA_IRQHandler+0x4ba>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002524:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002526:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b04      	cmp	r3, #4
 800252e:	d00e      	beq.n	800254e <HAL_DMA_IRQHandler+0x43e>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002530:	6823      	ldr	r3, [r4, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002538:	d035      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x496>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002540:	d12c      	bne.n	800259c <HAL_DMA_IRQHandler+0x48c>
            if(hdma->XferM1CpltCallback != NULL)
 8002542:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002544:	2b00      	cmp	r3, #0
 8002546:	d040      	beq.n	80025ca <HAL_DMA_IRQHandler+0x4ba>
              hdma->XferM1CpltCallback(hdma);
 8002548:	4620      	mov	r0, r4
 800254a:	4798      	blx	r3
 800254c:	e03d      	b.n	80025ca <HAL_DMA_IRQHandler+0x4ba>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800254e:	6822      	ldr	r2, [r4, #0]
 8002550:	6813      	ldr	r3, [r2, #0]
 8002552:	f023 0316 	bic.w	r3, r3, #22
 8002556:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002558:	6822      	ldr	r2, [r4, #0]
 800255a:	6953      	ldr	r3, [r2, #20]
 800255c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002560:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002562:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002564:	b1b3      	cbz	r3, 8002594 <HAL_DMA_IRQHandler+0x484>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002566:	6822      	ldr	r2, [r4, #0]
 8002568:	6813      	ldr	r3, [r2, #0]
 800256a:	f023 0308 	bic.w	r3, r3, #8
 800256e:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002570:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002572:	f003 021f 	and.w	r2, r3, #31
 8002576:	233f      	movs	r3, #63	; 0x3f
 8002578:	4093      	lsls	r3, r2
 800257a:	60bb      	str	r3, [r7, #8]
          __HAL_UNLOCK(hdma);
 800257c:	2300      	movs	r3, #0
 800257e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002582:	2301      	movs	r3, #1
 8002584:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 8002588:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800258a:	2b00      	cmp	r3, #0
 800258c:	d07f      	beq.n	800268e <HAL_DMA_IRQHandler+0x57e>
            hdma->XferAbortCallback(hdma);
 800258e:	4620      	mov	r0, r4
 8002590:	4798      	blx	r3
 8002592:	e07c      	b.n	800268e <HAL_DMA_IRQHandler+0x57e>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002594:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1e5      	bne.n	8002566 <HAL_DMA_IRQHandler+0x456>
 800259a:	e7e9      	b.n	8002570 <HAL_DMA_IRQHandler+0x460>
            if(hdma->XferCpltCallback != NULL)
 800259c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800259e:	b1a3      	cbz	r3, 80025ca <HAL_DMA_IRQHandler+0x4ba>
              hdma->XferCpltCallback(hdma);
 80025a0:	4620      	mov	r0, r4
 80025a2:	4798      	blx	r3
 80025a4:	e011      	b.n	80025ca <HAL_DMA_IRQHandler+0x4ba>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80025ac:	d109      	bne.n	80025c2 <HAL_DMA_IRQHandler+0x4b2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	f022 0210 	bic.w	r2, r2, #16
 80025b4:	601a      	str	r2, [r3, #0]
            __HAL_UNLOCK(hdma);
 80025b6:	2300      	movs	r3, #0
 80025b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 80025bc:	2301      	movs	r3, #1
 80025be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferCpltCallback != NULL)
 80025c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025c4:	b10b      	cbz	r3, 80025ca <HAL_DMA_IRQHandler+0x4ba>
            hdma->XferCpltCallback(hdma);
 80025c6:	4620      	mov	r0, r4
 80025c8:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d05e      	beq.n	800268e <HAL_DMA_IRQHandler+0x57e>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80025d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80025d2:	f013 0f01 	tst.w	r3, #1
 80025d6:	d056      	beq.n	8002686 <HAL_DMA_IRQHandler+0x576>
        hdma->State = HAL_DMA_STATE_ABORT;
 80025d8:	2304      	movs	r3, #4
 80025da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 80025de:	6823      	ldr	r3, [r4, #0]
 80025e0:	491a      	ldr	r1, [pc, #104]	; (800264c <HAL_DMA_IRQHandler+0x53c>)
 80025e2:	4a1b      	ldr	r2, [pc, #108]	; (8002650 <HAL_DMA_IRQHandler+0x540>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	bf18      	it	ne
 80025e8:	428b      	cmpne	r3, r1
 80025ea:	d033      	beq.n	8002654 <HAL_DMA_IRQHandler+0x544>
 80025ec:	3218      	adds	r2, #24
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d030      	beq.n	8002654 <HAL_DMA_IRQHandler+0x544>
 80025f2:	3218      	adds	r2, #24
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d02d      	beq.n	8002654 <HAL_DMA_IRQHandler+0x544>
 80025f8:	3218      	adds	r2, #24
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d02a      	beq.n	8002654 <HAL_DMA_IRQHandler+0x544>
 80025fe:	3218      	adds	r2, #24
 8002600:	4293      	cmp	r3, r2
 8002602:	d027      	beq.n	8002654 <HAL_DMA_IRQHandler+0x544>
 8002604:	3218      	adds	r2, #24
 8002606:	4293      	cmp	r3, r2
 8002608:	d024      	beq.n	8002654 <HAL_DMA_IRQHandler+0x544>
 800260a:	3218      	adds	r2, #24
 800260c:	4293      	cmp	r3, r2
 800260e:	d021      	beq.n	8002654 <HAL_DMA_IRQHandler+0x544>
 8002610:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002614:	4293      	cmp	r3, r2
 8002616:	d01d      	beq.n	8002654 <HAL_DMA_IRQHandler+0x544>
 8002618:	3218      	adds	r2, #24
 800261a:	4293      	cmp	r3, r2
 800261c:	d01a      	beq.n	8002654 <HAL_DMA_IRQHandler+0x544>
 800261e:	3218      	adds	r2, #24
 8002620:	4293      	cmp	r3, r2
 8002622:	d017      	beq.n	8002654 <HAL_DMA_IRQHandler+0x544>
 8002624:	3218      	adds	r2, #24
 8002626:	4293      	cmp	r3, r2
 8002628:	d014      	beq.n	8002654 <HAL_DMA_IRQHandler+0x544>
 800262a:	3218      	adds	r2, #24
 800262c:	4293      	cmp	r3, r2
 800262e:	d011      	beq.n	8002654 <HAL_DMA_IRQHandler+0x544>
 8002630:	3218      	adds	r2, #24
 8002632:	4293      	cmp	r3, r2
 8002634:	d00e      	beq.n	8002654 <HAL_DMA_IRQHandler+0x544>
 8002636:	3218      	adds	r2, #24
 8002638:	4293      	cmp	r3, r2
 800263a:	d00b      	beq.n	8002654 <HAL_DMA_IRQHandler+0x544>
 800263c:	3218      	adds	r2, #24
 800263e:	4293      	cmp	r3, r2
 8002640:	d008      	beq.n	8002654 <HAL_DMA_IRQHandler+0x544>
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	f022 0201 	bic.w	r2, r2, #1
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	e007      	b.n	800265c <HAL_DMA_IRQHandler+0x54c>
 800264c:	40020010 	.word	0x40020010
 8002650:	40020028 	.word	0x40020028
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	f022 0201 	bic.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 800265c:	9b01      	ldr	r3, [sp, #4]
 800265e:	3301      	adds	r3, #1
 8002660:	9301      	str	r3, [sp, #4]
 8002662:	42ab      	cmp	r3, r5
 8002664:	d804      	bhi.n	8002670 <HAL_DMA_IRQHandler+0x560>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f013 0f01 	tst.w	r3, #1
 800266e:	d1f5      	bne.n	800265c <HAL_DMA_IRQHandler+0x54c>
        __HAL_UNLOCK(hdma);
 8002670:	2300      	movs	r3, #0
 8002672:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f013 0f01 	tst.w	r3, #1
 800267e:	d008      	beq.n	8002692 <HAL_DMA_IRQHandler+0x582>
          hdma->State = HAL_DMA_STATE_ERROR;
 8002680:	2303      	movs	r3, #3
 8002682:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 8002686:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002688:	b10b      	cbz	r3, 800268e <HAL_DMA_IRQHandler+0x57e>
        hdma->XferErrorCallback(hdma);
 800268a:	4620      	mov	r0, r4
 800268c:	4798      	blx	r3
}
 800268e:	b003      	add	sp, #12
 8002690:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hdma->State = HAL_DMA_STATE_READY;
 8002692:	2301      	movs	r3, #1
 8002694:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8002698:	e7f5      	b.n	8002686 <HAL_DMA_IRQHandler+0x576>
          if(hdma->XferHalfCpltCallback != NULL)
 800269a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f6      	beq.n	800268e <HAL_DMA_IRQHandler+0x57e>
            hdma->XferHalfCpltCallback(hdma);
 80026a0:	4620      	mov	r0, r4
 80026a2:	4798      	blx	r3
 80026a4:	e7f3      	b.n	800268e <HAL_DMA_IRQHandler+0x57e>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80026a6:	f012 0f20 	tst.w	r2, #32
 80026aa:	d135      	bne.n	8002718 <HAL_DMA_IRQHandler+0x608>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026ac:	6823      	ldr	r3, [r4, #0]
 80026ae:	4964      	ldr	r1, [pc, #400]	; (8002840 <HAL_DMA_IRQHandler+0x730>)
 80026b0:	4a64      	ldr	r2, [pc, #400]	; (8002844 <HAL_DMA_IRQHandler+0x734>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	bf18      	it	ne
 80026b6:	428b      	cmpne	r3, r1
 80026b8:	d02a      	beq.n	8002710 <HAL_DMA_IRQHandler+0x600>
 80026ba:	3218      	adds	r2, #24
 80026bc:	4293      	cmp	r3, r2
 80026be:	d027      	beq.n	8002710 <HAL_DMA_IRQHandler+0x600>
 80026c0:	3218      	adds	r2, #24
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d024      	beq.n	8002710 <HAL_DMA_IRQHandler+0x600>
 80026c6:	3218      	adds	r2, #24
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d021      	beq.n	8002710 <HAL_DMA_IRQHandler+0x600>
 80026cc:	3218      	adds	r2, #24
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d01e      	beq.n	8002710 <HAL_DMA_IRQHandler+0x600>
 80026d2:	3218      	adds	r2, #24
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d01b      	beq.n	8002710 <HAL_DMA_IRQHandler+0x600>
 80026d8:	3218      	adds	r2, #24
 80026da:	4293      	cmp	r3, r2
 80026dc:	d018      	beq.n	8002710 <HAL_DMA_IRQHandler+0x600>
 80026de:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d014      	beq.n	8002710 <HAL_DMA_IRQHandler+0x600>
 80026e6:	3218      	adds	r2, #24
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d011      	beq.n	8002710 <HAL_DMA_IRQHandler+0x600>
 80026ec:	3218      	adds	r2, #24
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00e      	beq.n	8002710 <HAL_DMA_IRQHandler+0x600>
 80026f2:	3218      	adds	r2, #24
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d00b      	beq.n	8002710 <HAL_DMA_IRQHandler+0x600>
 80026f8:	3218      	adds	r2, #24
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d008      	beq.n	8002710 <HAL_DMA_IRQHandler+0x600>
 80026fe:	3218      	adds	r2, #24
 8002700:	4293      	cmp	r3, r2
 8002702:	d005      	beq.n	8002710 <HAL_DMA_IRQHandler+0x600>
 8002704:	3218      	adds	r2, #24
 8002706:	4293      	cmp	r3, r2
 8002708:	d002      	beq.n	8002710 <HAL_DMA_IRQHandler+0x600>
 800270a:	3218      	adds	r2, #24
 800270c:	4293      	cmp	r3, r2
 800270e:	d109      	bne.n	8002724 <HAL_DMA_IRQHandler+0x614>
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	f022 0208 	bic.w	r2, r2, #8
 8002716:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8002718:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0b7      	beq.n	800268e <HAL_DMA_IRQHandler+0x57e>
          hdma->XferHalfCpltCallback(hdma);
 800271e:	4620      	mov	r0, r4
 8002720:	4798      	blx	r3
 8002722:	e7b4      	b.n	800268e <HAL_DMA_IRQHandler+0x57e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	f022 0204 	bic.w	r2, r2, #4
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	e7f4      	b.n	8002718 <HAL_DMA_IRQHandler+0x608>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800272e:	2002      	movs	r0, #2
 8002730:	4088      	lsls	r0, r1
 8002732:	ea10 0f0c 	tst.w	r0, ip
 8002736:	d060      	beq.n	80027fa <HAL_DMA_IRQHandler+0x6ea>
 8002738:	f012 0f02 	tst.w	r2, #2
 800273c:	d05d      	beq.n	80027fa <HAL_DMA_IRQHandler+0x6ea>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800273e:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002740:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002744:	d00e      	beq.n	8002764 <HAL_DMA_IRQHandler+0x654>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002746:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800274a:	d105      	bne.n	8002758 <HAL_DMA_IRQHandler+0x648>
          if(hdma->XferM1CpltCallback != NULL)
 800274c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800274e:	2b00      	cmp	r3, #0
 8002750:	d09d      	beq.n	800268e <HAL_DMA_IRQHandler+0x57e>
            hdma->XferM1CpltCallback(hdma);
 8002752:	4620      	mov	r0, r4
 8002754:	4798      	blx	r3
 8002756:	e79a      	b.n	800268e <HAL_DMA_IRQHandler+0x57e>
          if(hdma->XferCpltCallback != NULL)
 8002758:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800275a:	2b00      	cmp	r3, #0
 800275c:	d097      	beq.n	800268e <HAL_DMA_IRQHandler+0x57e>
            hdma->XferCpltCallback(hdma);
 800275e:	4620      	mov	r0, r4
 8002760:	4798      	blx	r3
 8002762:	e794      	b.n	800268e <HAL_DMA_IRQHandler+0x57e>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002764:	f012 0f20 	tst.w	r2, #32
 8002768:	d13b      	bne.n	80027e2 <HAL_DMA_IRQHandler+0x6d2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800276a:	6823      	ldr	r3, [r4, #0]
 800276c:	4934      	ldr	r1, [pc, #208]	; (8002840 <HAL_DMA_IRQHandler+0x730>)
 800276e:	4a35      	ldr	r2, [pc, #212]	; (8002844 <HAL_DMA_IRQHandler+0x734>)
 8002770:	4293      	cmp	r3, r2
 8002772:	bf18      	it	ne
 8002774:	428b      	cmpne	r3, r1
 8002776:	d02a      	beq.n	80027ce <HAL_DMA_IRQHandler+0x6be>
 8002778:	3218      	adds	r2, #24
 800277a:	4293      	cmp	r3, r2
 800277c:	d027      	beq.n	80027ce <HAL_DMA_IRQHandler+0x6be>
 800277e:	3218      	adds	r2, #24
 8002780:	4293      	cmp	r3, r2
 8002782:	d024      	beq.n	80027ce <HAL_DMA_IRQHandler+0x6be>
 8002784:	3218      	adds	r2, #24
 8002786:	4293      	cmp	r3, r2
 8002788:	d021      	beq.n	80027ce <HAL_DMA_IRQHandler+0x6be>
 800278a:	3218      	adds	r2, #24
 800278c:	4293      	cmp	r3, r2
 800278e:	d01e      	beq.n	80027ce <HAL_DMA_IRQHandler+0x6be>
 8002790:	3218      	adds	r2, #24
 8002792:	4293      	cmp	r3, r2
 8002794:	d01b      	beq.n	80027ce <HAL_DMA_IRQHandler+0x6be>
 8002796:	3218      	adds	r2, #24
 8002798:	4293      	cmp	r3, r2
 800279a:	d018      	beq.n	80027ce <HAL_DMA_IRQHandler+0x6be>
 800279c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d014      	beq.n	80027ce <HAL_DMA_IRQHandler+0x6be>
 80027a4:	3218      	adds	r2, #24
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d011      	beq.n	80027ce <HAL_DMA_IRQHandler+0x6be>
 80027aa:	3218      	adds	r2, #24
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d00e      	beq.n	80027ce <HAL_DMA_IRQHandler+0x6be>
 80027b0:	3218      	adds	r2, #24
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00b      	beq.n	80027ce <HAL_DMA_IRQHandler+0x6be>
 80027b6:	3218      	adds	r2, #24
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d008      	beq.n	80027ce <HAL_DMA_IRQHandler+0x6be>
 80027bc:	3218      	adds	r2, #24
 80027be:	4293      	cmp	r3, r2
 80027c0:	d005      	beq.n	80027ce <HAL_DMA_IRQHandler+0x6be>
 80027c2:	3218      	adds	r2, #24
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d002      	beq.n	80027ce <HAL_DMA_IRQHandler+0x6be>
 80027c8:	3218      	adds	r2, #24
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d110      	bne.n	80027f0 <HAL_DMA_IRQHandler+0x6e0>
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	f022 0214 	bic.w	r2, r2, #20
 80027d4:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 80027d6:	2300      	movs	r3, #0
 80027d8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80027dc:	2301      	movs	r3, #1
 80027de:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80027e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f43f af52 	beq.w	800268e <HAL_DMA_IRQHandler+0x57e>
          hdma->XferCpltCallback(hdma);
 80027ea:	4620      	mov	r0, r4
 80027ec:	4798      	blx	r3
 80027ee:	e74e      	b.n	800268e <HAL_DMA_IRQHandler+0x57e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	f022 020a 	bic.w	r2, r2, #10
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	e7ed      	b.n	80027d6 <HAL_DMA_IRQHandler+0x6c6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80027fa:	2008      	movs	r0, #8
 80027fc:	fa00 f101 	lsl.w	r1, r0, r1
 8002800:	ea11 0f0c 	tst.w	r1, ip
 8002804:	f43f af43 	beq.w	800268e <HAL_DMA_IRQHandler+0x57e>
 8002808:	f012 0f08 	tst.w	r2, #8
 800280c:	f43f af3f 	beq.w	800268e <HAL_DMA_IRQHandler+0x57e>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	f022 020e 	bic.w	r2, r2, #14
 8002816:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002818:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800281a:	f003 031f 	and.w	r3, r3, #31
 800281e:	2201      	movs	r2, #1
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	607b      	str	r3, [r7, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002826:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8002828:	2300      	movs	r3, #0
 800282a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800282e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8002832:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002834:	2b00      	cmp	r3, #0
 8002836:	f43f af2a 	beq.w	800268e <HAL_DMA_IRQHandler+0x57e>
        hdma->XferErrorCallback(hdma);
 800283a:	4620      	mov	r0, r4
 800283c:	4798      	blx	r3
 800283e:	e726      	b.n	800268e <HAL_DMA_IRQHandler+0x57e>
 8002840:	40020010 	.word	0x40020010
 8002844:	40020028 	.word	0x40020028

08002848 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8002848:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800284a:	4770      	bx	lr

0800284c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800284c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800284e:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8002850:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002852:	e03a      	b.n	80028ca <HAL_GPIO_Init+0x7e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002854:	2409      	movs	r4, #9
 8002856:	e000      	b.n	800285a <HAL_GPIO_Init+0xe>
 8002858:	2400      	movs	r4, #0
 800285a:	40b4      	lsls	r4, r6
 800285c:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800285e:	3502      	adds	r5, #2
 8002860:	4e6e      	ldr	r6, [pc, #440]	; (8002a1c <HAL_GPIO_Init+0x1d0>)
 8002862:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002866:	4c6e      	ldr	r4, [pc, #440]	; (8002a20 <HAL_GPIO_Init+0x1d4>)
 8002868:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800286a:	43d4      	mvns	r4, r2
 800286c:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002870:	684f      	ldr	r7, [r1, #4]
 8002872:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002876:	d001      	beq.n	800287c <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8002878:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800287c:	4d68      	ldr	r5, [pc, #416]	; (8002a20 <HAL_GPIO_Init+0x1d4>)
 800287e:	602e      	str	r6, [r5, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002880:	686e      	ldr	r6, [r5, #4]
        temp &= ~(iocurrent);
 8002882:	ea04 0506 	and.w	r5, r4, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002886:	684f      	ldr	r7, [r1, #4]
 8002888:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800288c:	d001      	beq.n	8002892 <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 800288e:	ea42 0506 	orr.w	r5, r2, r6
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002892:	4e63      	ldr	r6, [pc, #396]	; (8002a20 <HAL_GPIO_Init+0x1d4>)
 8002894:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002896:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800289a:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 800289c:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028a0:	684f      	ldr	r7, [r1, #4]
 80028a2:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80028a6:	d001      	beq.n	80028ac <HAL_GPIO_Init+0x60>
        {
          temp |= iocurrent;
 80028a8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80028ac:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80028b0:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80028b2:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80028b4:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028b6:	684e      	ldr	r6, [r1, #4]
 80028b8:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80028bc:	d001      	beq.n	80028c2 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80028be:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80028c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028c6:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 80028c8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028ca:	680a      	ldr	r2, [r1, #0]
 80028cc:	fa32 f403 	lsrs.w	r4, r2, r3
 80028d0:	f000 80a2 	beq.w	8002a18 <HAL_GPIO_Init+0x1cc>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80028d4:	2401      	movs	r4, #1
 80028d6:	409c      	lsls	r4, r3
    if (iocurrent != 0x00U)
 80028d8:	4022      	ands	r2, r4
 80028da:	d0f5      	beq.n	80028c8 <HAL_GPIO_Init+0x7c>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028dc:	684d      	ldr	r5, [r1, #4]
 80028de:	1e6e      	subs	r6, r5, #1
 80028e0:	2d11      	cmp	r5, #17
 80028e2:	bf18      	it	ne
 80028e4:	2e01      	cmpne	r6, #1
 80028e6:	d901      	bls.n	80028ec <HAL_GPIO_Init+0xa0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028e8:	2d12      	cmp	r5, #18
 80028ea:	d112      	bne.n	8002912 <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR;
 80028ec:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028ee:	005f      	lsls	r7, r3, #1
 80028f0:	2503      	movs	r5, #3
 80028f2:	40bd      	lsls	r5, r7
 80028f4:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028f8:	68cd      	ldr	r5, [r1, #12]
 80028fa:	40bd      	lsls	r5, r7
 80028fc:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80028fe:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8002900:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002902:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002906:	684d      	ldr	r5, [r1, #4]
 8002908:	f3c5 1400 	ubfx	r4, r5, #4, #1
 800290c:	409c      	lsls	r4, r3
 800290e:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8002910:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8002912:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002914:	005f      	lsls	r7, r3, #1
 8002916:	2503      	movs	r5, #3
 8002918:	40bd      	lsls	r5, r7
 800291a:	43ec      	mvns	r4, r5
 800291c:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800291e:	688d      	ldr	r5, [r1, #8]
 8002920:	40bd      	lsls	r5, r7
 8002922:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8002924:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002926:	684d      	ldr	r5, [r1, #4]
 8002928:	2d12      	cmp	r5, #18
 800292a:	bf18      	it	ne
 800292c:	2d02      	cmpne	r5, #2
 800292e:	d113      	bne.n	8002958 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8002930:	08de      	lsrs	r6, r3, #3
 8002932:	3608      	adds	r6, #8
 8002934:	f850 e026 	ldr.w	lr, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002938:	f003 0507 	and.w	r5, r3, #7
 800293c:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8002940:	250f      	movs	r5, #15
 8002942:	fa05 f50c 	lsl.w	r5, r5, ip
 8002946:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800294a:	690d      	ldr	r5, [r1, #16]
 800294c:	fa05 f50c 	lsl.w	r5, r5, ip
 8002950:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002954:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8002958:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800295a:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800295c:	684c      	ldr	r4, [r1, #4]
 800295e:	f004 0403 	and.w	r4, r4, #3
 8002962:	40bc      	lsls	r4, r7
 8002964:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8002966:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002968:	684c      	ldr	r4, [r1, #4]
 800296a:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800296e:	d0ab      	beq.n	80028c8 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002970:	4c2c      	ldr	r4, [pc, #176]	; (8002a24 <HAL_GPIO_Init+0x1d8>)
 8002972:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 8002976:	f045 0502 	orr.w	r5, r5, #2
 800297a:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 800297e:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 8002982:	f004 0402 	and.w	r4, r4, #2
 8002986:	9401      	str	r4, [sp, #4]
 8002988:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800298a:	089d      	lsrs	r5, r3, #2
 800298c:	1cae      	adds	r6, r5, #2
 800298e:	4c23      	ldr	r4, [pc, #140]	; (8002a1c <HAL_GPIO_Init+0x1d0>)
 8002990:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002994:	f003 0403 	and.w	r4, r3, #3
 8002998:	00a6      	lsls	r6, r4, #2
 800299a:	240f      	movs	r4, #15
 800299c:	40b4      	lsls	r4, r6
 800299e:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80029a2:	4c21      	ldr	r4, [pc, #132]	; (8002a28 <HAL_GPIO_Init+0x1dc>)
 80029a4:	42a0      	cmp	r0, r4
 80029a6:	f43f af57 	beq.w	8002858 <HAL_GPIO_Init+0xc>
 80029aa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80029ae:	42a0      	cmp	r0, r4
 80029b0:	d022      	beq.n	80029f8 <HAL_GPIO_Init+0x1ac>
 80029b2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80029b6:	42a0      	cmp	r0, r4
 80029b8:	d020      	beq.n	80029fc <HAL_GPIO_Init+0x1b0>
 80029ba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80029be:	42a0      	cmp	r0, r4
 80029c0:	d01e      	beq.n	8002a00 <HAL_GPIO_Init+0x1b4>
 80029c2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80029c6:	42a0      	cmp	r0, r4
 80029c8:	d01c      	beq.n	8002a04 <HAL_GPIO_Init+0x1b8>
 80029ca:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80029ce:	42a0      	cmp	r0, r4
 80029d0:	d01a      	beq.n	8002a08 <HAL_GPIO_Init+0x1bc>
 80029d2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80029d6:	42a0      	cmp	r0, r4
 80029d8:	d018      	beq.n	8002a0c <HAL_GPIO_Init+0x1c0>
 80029da:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80029de:	42a0      	cmp	r0, r4
 80029e0:	d016      	beq.n	8002a10 <HAL_GPIO_Init+0x1c4>
 80029e2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80029e6:	42a0      	cmp	r0, r4
 80029e8:	d014      	beq.n	8002a14 <HAL_GPIO_Init+0x1c8>
 80029ea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80029ee:	42a0      	cmp	r0, r4
 80029f0:	f43f af30 	beq.w	8002854 <HAL_GPIO_Init+0x8>
 80029f4:	240a      	movs	r4, #10
 80029f6:	e730      	b.n	800285a <HAL_GPIO_Init+0xe>
 80029f8:	2401      	movs	r4, #1
 80029fa:	e72e      	b.n	800285a <HAL_GPIO_Init+0xe>
 80029fc:	2402      	movs	r4, #2
 80029fe:	e72c      	b.n	800285a <HAL_GPIO_Init+0xe>
 8002a00:	2403      	movs	r4, #3
 8002a02:	e72a      	b.n	800285a <HAL_GPIO_Init+0xe>
 8002a04:	2404      	movs	r4, #4
 8002a06:	e728      	b.n	800285a <HAL_GPIO_Init+0xe>
 8002a08:	2405      	movs	r4, #5
 8002a0a:	e726      	b.n	800285a <HAL_GPIO_Init+0xe>
 8002a0c:	2406      	movs	r4, #6
 8002a0e:	e724      	b.n	800285a <HAL_GPIO_Init+0xe>
 8002a10:	2407      	movs	r4, #7
 8002a12:	e722      	b.n	800285a <HAL_GPIO_Init+0xe>
 8002a14:	2408      	movs	r4, #8
 8002a16:	e720      	b.n	800285a <HAL_GPIO_Init+0xe>
  }
}
 8002a18:	b003      	add	sp, #12
 8002a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a1c:	58000400 	.word	0x58000400
 8002a20:	58000080 	.word	0x58000080
 8002a24:	58024400 	.word	0x58024400
 8002a28:	58020000 	.word	0x58020000

08002a2c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002a2c:	6903      	ldr	r3, [r0, #16]
 8002a2e:	4219      	tst	r1, r3
 8002a30:	d101      	bne.n	8002a36 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a32:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002a34:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8002a36:	2001      	movs	r0, #1
 8002a38:	4770      	bx	lr

08002a3a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a3a:	b912      	cbnz	r2, 8002a42 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a3c:	0409      	lsls	r1, r1, #16
 8002a3e:	6181      	str	r1, [r0, #24]
  }
}
 8002a40:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8002a42:	6181      	str	r1, [r0, #24]
 8002a44:	4770      	bx	lr

08002a46 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a46:	6803      	ldr	r3, [r0, #0]
 8002a48:	699a      	ldr	r2, [r3, #24]
 8002a4a:	f012 0f02 	tst.w	r2, #2
 8002a4e:	d001      	beq.n	8002a54 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a50:	2200      	movs	r2, #0
 8002a52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a54:	6803      	ldr	r3, [r0, #0]
 8002a56:	699a      	ldr	r2, [r3, #24]
 8002a58:	f012 0f01 	tst.w	r2, #1
 8002a5c:	d103      	bne.n	8002a66 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a5e:	699a      	ldr	r2, [r3, #24]
 8002a60:	f042 0201 	orr.w	r2, r2, #1
 8002a64:	619a      	str	r2, [r3, #24]
  }
}
 8002a66:	4770      	bx	lr

08002a68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002a68:	b470      	push	{r4, r5, r6}
 8002a6a:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002a6c:	6805      	ldr	r5, [r0, #0]
 8002a6e:	6868      	ldr	r0, [r5, #4]
 8002a70:	0d74      	lsrs	r4, r6, #21
 8002a72:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8002a76:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8002a7a:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8002a7e:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8002a82:	f044 0403 	orr.w	r4, r4, #3
 8002a86:	ea20 0004 	bic.w	r0, r0, r4
 8002a8a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002a8e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002a92:	4319      	orrs	r1, r3
 8002a94:	4331      	orrs	r1, r6
 8002a96:	4301      	orrs	r1, r0
 8002a98:	6069      	str	r1, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002a9a:	bc70      	pop	{r4, r5, r6}
 8002a9c:	4770      	bx	lr

08002a9e <I2C_IsAcknowledgeFailed>:
{
 8002a9e:	b570      	push	{r4, r5, r6, lr}
 8002aa0:	4604      	mov	r4, r0
 8002aa2:	460d      	mov	r5, r1
 8002aa4:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aa6:	6803      	ldr	r3, [r0, #0]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	f013 0f10 	tst.w	r3, #16
 8002aae:	d01c      	beq.n	8002aea <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ab0:	6823      	ldr	r3, [r4, #0]
 8002ab2:	699a      	ldr	r2, [r3, #24]
 8002ab4:	f012 0f20 	tst.w	r2, #32
 8002ab8:	d119      	bne.n	8002aee <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8002aba:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002abe:	d0f7      	beq.n	8002ab0 <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ac0:	f7fd fd7a 	bl	80005b8 <HAL_GetTick>
 8002ac4:	1b80      	subs	r0, r0, r6
 8002ac6:	42a8      	cmp	r0, r5
 8002ac8:	d801      	bhi.n	8002ace <I2C_IsAcknowledgeFailed+0x30>
 8002aca:	2d00      	cmp	r5, #0
 8002acc:	d1f0      	bne.n	8002ab0 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ace:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ad0:	f043 0320 	orr.w	r3, r3, #32
 8002ad4:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ad6:	2320      	movs	r3, #32
 8002ad8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002adc:	2300      	movs	r3, #0
 8002ade:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8002ae2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	e020      	b.n	8002b2c <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 8002aea:	2000      	movs	r0, #0
 8002aec:	e01e      	b.n	8002b2c <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aee:	2210      	movs	r2, #16
 8002af0:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002af2:	6823      	ldr	r3, [r4, #0]
 8002af4:	2520      	movs	r5, #32
 8002af6:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002af8:	4620      	mov	r0, r4
 8002afa:	f7ff ffa4 	bl	8002a46 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002afe:	6822      	ldr	r2, [r4, #0]
 8002b00:	6853      	ldr	r3, [r2, #4]
 8002b02:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002b06:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002b0a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002b0e:	f023 0301 	bic.w	r3, r3, #1
 8002b12:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b16:	f043 0304 	orr.w	r3, r3, #4
 8002b1a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b1c:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b20:	2300      	movs	r3, #0
 8002b22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002b26:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8002b2a:	2001      	movs	r0, #1
}
 8002b2c:	bd70      	pop	{r4, r5, r6, pc}

08002b2e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002b2e:	b570      	push	{r4, r5, r6, lr}
 8002b30:	4604      	mov	r4, r0
 8002b32:	460d      	mov	r5, r1
 8002b34:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	f013 0f02 	tst.w	r3, #2
 8002b3e:	d11d      	bne.n	8002b7c <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b40:	4632      	mov	r2, r6
 8002b42:	4629      	mov	r1, r5
 8002b44:	4620      	mov	r0, r4
 8002b46:	f7ff ffaa 	bl	8002a9e <I2C_IsAcknowledgeFailed>
 8002b4a:	b9c8      	cbnz	r0, 8002b80 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8002b4c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002b50:	d0f1      	beq.n	8002b36 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b52:	f7fd fd31 	bl	80005b8 <HAL_GetTick>
 8002b56:	1b80      	subs	r0, r0, r6
 8002b58:	42a8      	cmp	r0, r5
 8002b5a:	d801      	bhi.n	8002b60 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002b5c:	2d00      	cmp	r5, #0
 8002b5e:	d1ea      	bne.n	8002b36 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b60:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b62:	f043 0320 	orr.w	r3, r3, #32
 8002b66:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b68:	2320      	movs	r3, #32
 8002b6a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002b74:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002b78:	2001      	movs	r0, #1
 8002b7a:	e000      	b.n	8002b7e <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8002b7c:	2000      	movs	r0, #0
}
 8002b7e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002b80:	2001      	movs	r0, #1
 8002b82:	e7fc      	b.n	8002b7e <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08002b84 <I2C_WaitOnFlagUntilTimeout>:
{
 8002b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b86:	4605      	mov	r5, r0
 8002b88:	460f      	mov	r7, r1
 8002b8a:	4616      	mov	r6, r2
 8002b8c:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b8e:	682b      	ldr	r3, [r5, #0]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	ea37 0303 	bics.w	r3, r7, r3
 8002b96:	bf0c      	ite	eq
 8002b98:	2301      	moveq	r3, #1
 8002b9a:	2300      	movne	r3, #0
 8002b9c:	42b3      	cmp	r3, r6
 8002b9e:	d118      	bne.n	8002bd2 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8002ba0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002ba4:	d0f3      	beq.n	8002b8e <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba6:	f7fd fd07 	bl	80005b8 <HAL_GetTick>
 8002baa:	9b06      	ldr	r3, [sp, #24]
 8002bac:	1ac0      	subs	r0, r0, r3
 8002bae:	42a0      	cmp	r0, r4
 8002bb0:	d801      	bhi.n	8002bb6 <I2C_WaitOnFlagUntilTimeout+0x32>
 8002bb2:	2c00      	cmp	r4, #0
 8002bb4:	d1eb      	bne.n	8002b8e <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bb6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002bb8:	f043 0320 	orr.w	r3, r3, #32
 8002bbc:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bbe:	2320      	movs	r3, #32
 8002bc0:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002bca:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8002bce:	2001      	movs	r0, #1
 8002bd0:	e000      	b.n	8002bd4 <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 8002bd2:	2000      	movs	r0, #0
}
 8002bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002bd6 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002bd6:	b570      	push	{r4, r5, r6, lr}
 8002bd8:	4605      	mov	r5, r0
 8002bda:	460c      	mov	r4, r1
 8002bdc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bde:	682b      	ldr	r3, [r5, #0]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	f013 0f20 	tst.w	r3, #32
 8002be6:	d11a      	bne.n	8002c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be8:	4632      	mov	r2, r6
 8002bea:	4621      	mov	r1, r4
 8002bec:	4628      	mov	r0, r5
 8002bee:	f7ff ff56 	bl	8002a9e <I2C_IsAcknowledgeFailed>
 8002bf2:	b9b0      	cbnz	r0, 8002c22 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf4:	f7fd fce0 	bl	80005b8 <HAL_GetTick>
 8002bf8:	1b80      	subs	r0, r0, r6
 8002bfa:	42a0      	cmp	r0, r4
 8002bfc:	d801      	bhi.n	8002c02 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8002bfe:	2c00      	cmp	r4, #0
 8002c00:	d1ed      	bne.n	8002bde <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c02:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002c04:	f043 0320 	orr.w	r3, r3, #32
 8002c08:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c0a:	2320      	movs	r3, #32
 8002c0c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002c16:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8002c1a:	2001      	movs	r0, #1
}
 8002c1c:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002c1e:	2000      	movs	r0, #0
 8002c20:	e7fc      	b.n	8002c1c <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8002c22:	2001      	movs	r0, #1
 8002c24:	e7fa      	b.n	8002c1c <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
	...

08002c28 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002c28:	2800      	cmp	r0, #0
 8002c2a:	d057      	beq.n	8002cdc <HAL_I2C_Init+0xb4>
{
 8002c2c:	b510      	push	{r4, lr}
 8002c2e:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c30:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d041      	beq.n	8002cbc <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c38:	2324      	movs	r3, #36	; 0x24
 8002c3a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002c3e:	6822      	ldr	r2, [r4, #0]
 8002c40:	6813      	ldr	r3, [r2, #0]
 8002c42:	f023 0301 	bic.w	r3, r3, #1
 8002c46:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c48:	6863      	ldr	r3, [r4, #4]
 8002c4a:	6822      	ldr	r2, [r4, #0]
 8002c4c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002c50:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c52:	6822      	ldr	r2, [r4, #0]
 8002c54:	6893      	ldr	r3, [r2, #8]
 8002c56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c5a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c5c:	68e3      	ldr	r3, [r4, #12]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d031      	beq.n	8002cc6 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c62:	68a3      	ldr	r3, [r4, #8]
 8002c64:	6822      	ldr	r2, [r4, #0]
 8002c66:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8002c6a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c6c:	68e3      	ldr	r3, [r4, #12]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d02f      	beq.n	8002cd2 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c72:	6822      	ldr	r2, [r4, #0]
 8002c74:	6851      	ldr	r1, [r2, #4]
 8002c76:	4b1a      	ldr	r3, [pc, #104]	; (8002ce0 <HAL_I2C_Init+0xb8>)
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c7c:	6822      	ldr	r2, [r4, #0]
 8002c7e:	68d3      	ldr	r3, [r2, #12]
 8002c80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c84:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c86:	6923      	ldr	r3, [r4, #16]
 8002c88:	6962      	ldr	r2, [r4, #20]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	69a1      	ldr	r1, [r4, #24]
 8002c8e:	6822      	ldr	r2, [r4, #0]
 8002c90:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002c94:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c96:	69e3      	ldr	r3, [r4, #28]
 8002c98:	6a21      	ldr	r1, [r4, #32]
 8002c9a:	6822      	ldr	r2, [r4, #0]
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002ca0:	6822      	ldr	r2, [r4, #0]
 8002ca2:	6813      	ldr	r3, [r2, #0]
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002caa:	2000      	movs	r0, #0
 8002cac:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cae:	2320      	movs	r3, #32
 8002cb0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cb4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002cba:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002cbc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002cc0:	f005 ff84 	bl	8008bcc <HAL_I2C_MspInit>
 8002cc4:	e7b8      	b.n	8002c38 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cc6:	68a3      	ldr	r3, [r4, #8]
 8002cc8:	6822      	ldr	r2, [r4, #0]
 8002cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cce:	6093      	str	r3, [r2, #8]
 8002cd0:	e7cc      	b.n	8002c6c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	e7ca      	b.n	8002c72 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8002cdc:	2001      	movs	r0, #1
}
 8002cde:	4770      	bx	lr
 8002ce0:	02008000 	.word	0x02008000

08002ce4 <HAL_I2C_Master_Transmit>:
{
 8002ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ce8:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cea:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8002cee:	b2ed      	uxtb	r5, r5
 8002cf0:	2d20      	cmp	r5, #32
 8002cf2:	f040 80a4 	bne.w	8002e3e <HAL_I2C_Master_Transmit+0x15a>
    __HAL_LOCK(hi2c);
 8002cf6:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002cfa:	2c01      	cmp	r4, #1
 8002cfc:	f000 80a4 	beq.w	8002e48 <HAL_I2C_Master_Transmit+0x164>
 8002d00:	4698      	mov	r8, r3
 8002d02:	4617      	mov	r7, r2
 8002d04:	460e      	mov	r6, r1
 8002d06:	4604      	mov	r4, r0
 8002d08:	f04f 0901 	mov.w	r9, #1
 8002d0c:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002d10:	f7fd fc52 	bl	80005b8 <HAL_GetTick>
 8002d14:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d16:	9000      	str	r0, [sp, #0]
 8002d18:	2319      	movs	r3, #25
 8002d1a:	464a      	mov	r2, r9
 8002d1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d20:	4620      	mov	r0, r4
 8002d22:	f7ff ff2f 	bl	8002b84 <I2C_WaitOnFlagUntilTimeout>
 8002d26:	2800      	cmp	r0, #0
 8002d28:	f040 8090 	bne.w	8002e4c <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d2c:	2321      	movs	r3, #33	; 0x21
 8002d2e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d32:	2310      	movs	r3, #16
 8002d34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002d3c:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d3e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d42:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d44:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2bff      	cmp	r3, #255	; 0xff
 8002d4a:	d90a      	bls.n	8002d62 <HAL_I2C_Master_Transmit+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d4c:	22ff      	movs	r2, #255	; 0xff
 8002d4e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d50:	4b42      	ldr	r3, [pc, #264]	; (8002e5c <HAL_I2C_Master_Transmit+0x178>)
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d58:	4631      	mov	r1, r6
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f7ff fe84 	bl	8002a68 <I2C_TransferConfig>
 8002d60:	e018      	b.n	8002d94 <HAL_I2C_Master_Transmit+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 8002d62:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002d64:	b292      	uxth	r2, r2
 8002d66:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002d68:	4b3c      	ldr	r3, [pc, #240]	; (8002e5c <HAL_I2C_Master_Transmit+0x178>)
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	4631      	mov	r1, r6
 8002d74:	4620      	mov	r0, r4
 8002d76:	f7ff fe77 	bl	8002a68 <I2C_TransferConfig>
 8002d7a:	e00b      	b.n	8002d94 <HAL_I2C_Master_Transmit+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 8002d7c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002d7e:	b292      	uxth	r2, r2
 8002d80:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d82:	2300      	movs	r3, #0
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	4631      	mov	r1, r6
 8002d8e:	4620      	mov	r0, r4
 8002d90:	f7ff fe6a 	bl	8002a68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d94:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d033      	beq.n	8002e04 <HAL_I2C_Master_Transmit+0x120>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d9c:	462a      	mov	r2, r5
 8002d9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002da0:	4620      	mov	r0, r4
 8002da2:	f7ff fec4 	bl	8002b2e <I2C_WaitOnTXISFlagUntilTimeout>
 8002da6:	2800      	cmp	r0, #0
 8002da8:	d152      	bne.n	8002e50 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002daa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002dac:	6823      	ldr	r3, [r4, #0]
 8002dae:	7812      	ldrb	r2, [r2, #0]
 8002db0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002db2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002db4:	3301      	adds	r3, #1
 8002db6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002db8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002dc0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dc8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002dca:	b292      	uxth	r2, r2
 8002dcc:	2a00      	cmp	r2, #0
 8002dce:	d0e1      	beq.n	8002d94 <HAL_I2C_Master_Transmit+0xb0>
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1df      	bne.n	8002d94 <HAL_I2C_Master_Transmit+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dd4:	9500      	str	r5, [sp, #0]
 8002dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2180      	movs	r1, #128	; 0x80
 8002ddc:	4620      	mov	r0, r4
 8002dde:	f7ff fed1 	bl	8002b84 <I2C_WaitOnFlagUntilTimeout>
 8002de2:	2800      	cmp	r0, #0
 8002de4:	d136      	bne.n	8002e54 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002de6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	2bff      	cmp	r3, #255	; 0xff
 8002dec:	d9c6      	bls.n	8002d7c <HAL_I2C_Master_Transmit+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dee:	22ff      	movs	r2, #255	; 0xff
 8002df0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002df2:	2300      	movs	r3, #0
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dfa:	4631      	mov	r1, r6
 8002dfc:	4620      	mov	r0, r4
 8002dfe:	f7ff fe33 	bl	8002a68 <I2C_TransferConfig>
 8002e02:	e7c7      	b.n	8002d94 <HAL_I2C_Master_Transmit+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e04:	462a      	mov	r2, r5
 8002e06:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002e08:	4620      	mov	r0, r4
 8002e0a:	f7ff fee4 	bl	8002bd6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	bb10      	cbnz	r0, 8002e58 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e12:	6822      	ldr	r2, [r4, #0]
 8002e14:	2120      	movs	r1, #32
 8002e16:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8002e18:	6820      	ldr	r0, [r4, #0]
 8002e1a:	6842      	ldr	r2, [r0, #4]
 8002e1c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002e20:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002e24:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002e28:	f022 0201 	bic.w	r2, r2, #1
 8002e2c:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002e2e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e32:	2200      	movs	r2, #0
 8002e34:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002e38:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8002e3c:	e000      	b.n	8002e40 <HAL_I2C_Master_Transmit+0x15c>
    return HAL_BUSY;
 8002e3e:	2302      	movs	r3, #2
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	b003      	add	sp, #12
 8002e44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e7f9      	b.n	8002e40 <HAL_I2C_Master_Transmit+0x15c>
      return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e7f7      	b.n	8002e40 <HAL_I2C_Master_Transmit+0x15c>
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e7f5      	b.n	8002e40 <HAL_I2C_Master_Transmit+0x15c>
          return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e7f3      	b.n	8002e40 <HAL_I2C_Master_Transmit+0x15c>
      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e7f1      	b.n	8002e40 <HAL_I2C_Master_Transmit+0x15c>
 8002e5c:	80002000 	.word	0x80002000

08002e60 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e60:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b20      	cmp	r3, #32
 8002e68:	d124      	bne.n	8002eb4 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e6a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d022      	beq.n	8002eb8 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002e72:	2301      	movs	r3, #1
 8002e74:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e78:	2324      	movs	r3, #36	; 0x24
 8002e7a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e7e:	6802      	ldr	r2, [r0, #0]
 8002e80:	6813      	ldr	r3, [r2, #0]
 8002e82:	f023 0301 	bic.w	r3, r3, #1
 8002e86:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e88:	6802      	ldr	r2, [r0, #0]
 8002e8a:	6813      	ldr	r3, [r2, #0]
 8002e8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e90:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e92:	6802      	ldr	r2, [r0, #0]
 8002e94:	6813      	ldr	r3, [r2, #0]
 8002e96:	4319      	orrs	r1, r3
 8002e98:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e9a:	6802      	ldr	r2, [r0, #0]
 8002e9c:	6813      	ldr	r3, [r2, #0]
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ea4:	2320      	movs	r3, #32
 8002ea6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002eb4:	2002      	movs	r0, #2
 8002eb6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002eb8:	2002      	movs	r0, #2
  }
}
 8002eba:	4770      	bx	lr

08002ebc <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ebc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b20      	cmp	r3, #32
 8002ec4:	d122      	bne.n	8002f0c <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d020      	beq.n	8002f10 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8002ece:	2301      	movs	r3, #1
 8002ed0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed4:	2324      	movs	r3, #36	; 0x24
 8002ed6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002eda:	6802      	ldr	r2, [r0, #0]
 8002edc:	6813      	ldr	r3, [r2, #0]
 8002ede:	f023 0301 	bic.w	r3, r3, #1
 8002ee2:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ee4:	6802      	ldr	r2, [r0, #0]
 8002ee6:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ee8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002eec:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ef0:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ef2:	6802      	ldr	r2, [r0, #0]
 8002ef4:	6813      	ldr	r3, [r2, #0]
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002efc:	2320      	movs	r3, #32
 8002efe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f02:	2300      	movs	r3, #0
 8002f04:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002f08:	4618      	mov	r0, r3
 8002f0a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002f0c:	2002      	movs	r0, #2
 8002f0e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002f10:	2002      	movs	r0, #2
  }
}
 8002f12:	4770      	bx	lr

08002f14 <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002f14:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <HAL_PWREx_ConfigSupply+0x50>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f013 0f04 	tst.w	r3, #4
 8002f1c:	d107      	bne.n	8002f2e <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002f1e:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <HAL_PWREx_ConfigSupply+0x50>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	4283      	cmp	r3, r0
 8002f28:	d01a      	beq.n	8002f60 <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002f2a:	2001      	movs	r0, #1
 8002f2c:	4770      	bx	lr
{
 8002f2e:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002f30:	4a0c      	ldr	r2, [pc, #48]	; (8002f64 <HAL_PWREx_ConfigSupply+0x50>)
 8002f32:	68d3      	ldr	r3, [r2, #12]
 8002f34:	f023 0307 	bic.w	r3, r3, #7
 8002f38:	4318      	orrs	r0, r3
 8002f3a:	60d0      	str	r0, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002f3c:	f7fd fb3c 	bl	80005b8 <HAL_GetTick>
 8002f40:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f42:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <HAL_PWREx_ConfigSupply+0x50>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002f4a:	d107      	bne.n	8002f5c <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002f4c:	f7fd fb34 	bl	80005b8 <HAL_GetTick>
 8002f50:	1b00      	subs	r0, r0, r4
 8002f52:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002f56:	d9f4      	bls.n	8002f42 <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 8002f58:	2001      	movs	r0, #1
 8002f5a:	e000      	b.n	8002f5e <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002f5c:	2000      	movs	r0, #0
}
 8002f5e:	bd10      	pop	{r4, pc}
      return HAL_OK;
 8002f60:	2000      	movs	r0, #0
}
 8002f62:	4770      	bx	lr
 8002f64:	58024800 	.word	0x58024800

08002f68 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f68:	2800      	cmp	r0, #0
 8002f6a:	f000 82e6 	beq.w	800353a <HAL_RCC_OscConfig+0x5d2>
{
 8002f6e:	b538      	push	{r3, r4, r5, lr}
 8002f70:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f72:	6803      	ldr	r3, [r0, #0]
 8002f74:	f013 0f01 	tst.w	r3, #1
 8002f78:	d025      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f7a:	4aaa      	ldr	r2, [pc, #680]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 8002f7c:	6913      	ldr	r3, [r2, #16]
 8002f7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f82:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002f84:	2b10      	cmp	r3, #16
 8002f86:	d015      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x4c>
 8002f88:	2b18      	cmp	r3, #24
 8002f8a:	d00f      	beq.n	8002fac <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f8c:	6863      	ldr	r3, [r4, #4]
 8002f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f92:	d03e      	beq.n	8003012 <HAL_RCC_OscConfig+0xaa>
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d152      	bne.n	800303e <HAL_RCC_OscConfig+0xd6>
 8002f98:	4ba2      	ldr	r3, [pc, #648]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	e037      	b.n	800301c <HAL_RCC_OscConfig+0xb4>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002fac:	f002 0203 	and.w	r2, r2, #3
 8002fb0:	2a02      	cmp	r2, #2
 8002fb2:	d1eb      	bne.n	8002f8c <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb4:	4b9b      	ldr	r3, [pc, #620]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002fbc:	d003      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x5e>
 8002fbe:	6863      	ldr	r3, [r4, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 82bc 	beq.w	800353e <HAL_RCC_OscConfig+0x5d6>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fc6:	6823      	ldr	r3, [r4, #0]
 8002fc8:	f013 0f02 	tst.w	r3, #2
 8002fcc:	d077      	beq.n	80030be <HAL_RCC_OscConfig+0x156>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fce:	4a95      	ldr	r2, [pc, #596]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 8002fd0:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fd2:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002fd4:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8002fd8:	d05a      	beq.n	8003090 <HAL_RCC_OscConfig+0x128>
 8002fda:	2b18      	cmp	r3, #24
 8002fdc:	d055      	beq.n	800308a <HAL_RCC_OscConfig+0x122>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fde:	68e3      	ldr	r3, [r4, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 80b2 	beq.w	800314a <HAL_RCC_OscConfig+0x1e2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002fe6:	498f      	ldr	r1, [pc, #572]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 8002fe8:	680a      	ldr	r2, [r1, #0]
 8002fea:	f022 0219 	bic.w	r2, r2, #25
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff2:	f7fd fae1 	bl	80005b8 <HAL_GetTick>
 8002ff6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ff8:	4b8a      	ldr	r3, [pc, #552]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f013 0f04 	tst.w	r3, #4
 8003000:	f040 808b 	bne.w	800311a <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003004:	f7fd fad8 	bl	80005b8 <HAL_GetTick>
 8003008:	1b40      	subs	r0, r0, r5
 800300a:	2802      	cmp	r0, #2
 800300c:	d9f4      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x90>
          {
            return HAL_TIMEOUT;
 800300e:	2003      	movs	r0, #3
 8003010:	e29a      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003012:	4a84      	ldr	r2, [pc, #528]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 8003014:	6813      	ldr	r3, [r2, #0]
 8003016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800301c:	6863      	ldr	r3, [r4, #4]
 800301e:	b32b      	cbz	r3, 800306c <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 8003020:	f7fd faca 	bl	80005b8 <HAL_GetTick>
 8003024:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003026:	4b7f      	ldr	r3, [pc, #508]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800302e:	d1ca      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003030:	f7fd fac2 	bl	80005b8 <HAL_GetTick>
 8003034:	1b40      	subs	r0, r0, r5
 8003036:	2864      	cmp	r0, #100	; 0x64
 8003038:	d9f5      	bls.n	8003026 <HAL_RCC_OscConfig+0xbe>
            return HAL_TIMEOUT;
 800303a:	2003      	movs	r0, #3
 800303c:	e284      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800303e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003042:	d009      	beq.n	8003058 <HAL_RCC_OscConfig+0xf0>
 8003044:	4b77      	ldr	r3, [pc, #476]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	e7e1      	b.n	800301c <HAL_RCC_OscConfig+0xb4>
 8003058:	4b72      	ldr	r3, [pc, #456]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	e7d7      	b.n	800301c <HAL_RCC_OscConfig+0xb4>
        tickstart = HAL_GetTick();
 800306c:	f7fd faa4 	bl	80005b8 <HAL_GetTick>
 8003070:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003072:	4b6c      	ldr	r3, [pc, #432]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800307a:	d0a4      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800307c:	f7fd fa9c 	bl	80005b8 <HAL_GetTick>
 8003080:	1b40      	subs	r0, r0, r5
 8003082:	2864      	cmp	r0, #100	; 0x64
 8003084:	d9f5      	bls.n	8003072 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8003086:	2003      	movs	r0, #3
 8003088:	e25e      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800308a:	f012 0f03 	tst.w	r2, #3
 800308e:	d1a6      	bne.n	8002fde <HAL_RCC_OscConfig+0x76>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003090:	4b64      	ldr	r3, [pc, #400]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f013 0f04 	tst.w	r3, #4
 8003098:	d003      	beq.n	80030a2 <HAL_RCC_OscConfig+0x13a>
 800309a:	68e3      	ldr	r3, [r4, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 8250 	beq.w	8003542 <HAL_RCC_OscConfig+0x5da>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a2:	f7fd faa3 	bl	80005ec <HAL_GetREVID>
 80030a6:	f241 0303 	movw	r3, #4099	; 0x1003
 80030aa:	4298      	cmp	r0, r3
 80030ac:	d82c      	bhi.n	8003108 <HAL_RCC_OscConfig+0x1a0>
 80030ae:	4a5d      	ldr	r2, [pc, #372]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 80030b0:	6853      	ldr	r3, [r2, #4]
 80030b2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80030b6:	6921      	ldr	r1, [r4, #16]
 80030b8:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80030bc:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80030be:	6823      	ldr	r3, [r4, #0]
 80030c0:	f013 0f10 	tst.w	r3, #16
 80030c4:	d071      	beq.n	80031aa <HAL_RCC_OscConfig+0x242>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030c6:	4a57      	ldr	r2, [pc, #348]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 80030c8:	6913      	ldr	r3, [r2, #16]
 80030ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030ce:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d052      	beq.n	800317a <HAL_RCC_OscConfig+0x212>
 80030d4:	2b18      	cmp	r3, #24
 80030d6:	d04c      	beq.n	8003172 <HAL_RCC_OscConfig+0x20a>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80030d8:	69e3      	ldr	r3, [r4, #28]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 80a4 	beq.w	8003228 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80030e0:	4a50      	ldr	r2, [pc, #320]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 80030e2:	6813      	ldr	r3, [r2, #0]
 80030e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ea:	f7fd fa65 	bl	80005b8 <HAL_GetTick>
 80030ee:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030f0:	4b4c      	ldr	r3, [pc, #304]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80030f8:	d17b      	bne.n	80031f2 <HAL_RCC_OscConfig+0x28a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80030fa:	f7fd fa5d 	bl	80005b8 <HAL_GetTick>
 80030fe:	1b40      	subs	r0, r0, r5
 8003100:	2802      	cmp	r0, #2
 8003102:	d9f5      	bls.n	80030f0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003104:	2003      	movs	r0, #3
 8003106:	e21f      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003108:	4a46      	ldr	r2, [pc, #280]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 800310a:	6853      	ldr	r3, [r2, #4]
 800310c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003110:	6921      	ldr	r1, [r4, #16]
 8003112:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003116:	6053      	str	r3, [r2, #4]
 8003118:	e7d1      	b.n	80030be <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311a:	f7fd fa67 	bl	80005ec <HAL_GetREVID>
 800311e:	f241 0303 	movw	r3, #4099	; 0x1003
 8003122:	4298      	cmp	r0, r3
 8003124:	d808      	bhi.n	8003138 <HAL_RCC_OscConfig+0x1d0>
 8003126:	4a3f      	ldr	r2, [pc, #252]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 8003128:	6853      	ldr	r3, [r2, #4]
 800312a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800312e:	6921      	ldr	r1, [r4, #16]
 8003130:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8003134:	6053      	str	r3, [r2, #4]
 8003136:	e7c2      	b.n	80030be <HAL_RCC_OscConfig+0x156>
 8003138:	4a3a      	ldr	r2, [pc, #232]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 800313a:	6853      	ldr	r3, [r2, #4]
 800313c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003140:	6921      	ldr	r1, [r4, #16]
 8003142:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003146:	6053      	str	r3, [r2, #4]
 8003148:	e7b9      	b.n	80030be <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_HSI_DISABLE();
 800314a:	4a36      	ldr	r2, [pc, #216]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 800314c:	6813      	ldr	r3, [r2, #0]
 800314e:	f023 0301 	bic.w	r3, r3, #1
 8003152:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003154:	f7fd fa30 	bl	80005b8 <HAL_GetTick>
 8003158:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800315a:	4b32      	ldr	r3, [pc, #200]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f013 0f04 	tst.w	r3, #4
 8003162:	d0ac      	beq.n	80030be <HAL_RCC_OscConfig+0x156>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003164:	f7fd fa28 	bl	80005b8 <HAL_GetTick>
 8003168:	1b40      	subs	r0, r0, r5
 800316a:	2802      	cmp	r0, #2
 800316c:	d9f5      	bls.n	800315a <HAL_RCC_OscConfig+0x1f2>
            return HAL_TIMEOUT;
 800316e:	2003      	movs	r0, #3
 8003170:	e1ea      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003172:	f002 0203 	and.w	r2, r2, #3
 8003176:	2a01      	cmp	r2, #1
 8003178:	d1ae      	bne.n	80030d8 <HAL_RCC_OscConfig+0x170>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800317a:	4b2a      	ldr	r3, [pc, #168]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003182:	d004      	beq.n	800318e <HAL_RCC_OscConfig+0x226>
 8003184:	69e3      	ldr	r3, [r4, #28]
 8003186:	2b80      	cmp	r3, #128	; 0x80
 8003188:	d001      	beq.n	800318e <HAL_RCC_OscConfig+0x226>
        return HAL_ERROR;
 800318a:	2001      	movs	r0, #1
 800318c:	e1dc      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800318e:	f7fd fa2d 	bl	80005ec <HAL_GetREVID>
 8003192:	f241 0303 	movw	r3, #4099	; 0x1003
 8003196:	4298      	cmp	r0, r3
 8003198:	d822      	bhi.n	80031e0 <HAL_RCC_OscConfig+0x278>
 800319a:	4a22      	ldr	r2, [pc, #136]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 800319c:	6853      	ldr	r3, [r2, #4]
 800319e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80031a2:	6a21      	ldr	r1, [r4, #32]
 80031a4:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 80031a8:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	f013 0f08 	tst.w	r3, #8
 80031b0:	d062      	beq.n	8003278 <HAL_RCC_OscConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031b2:	6963      	ldr	r3, [r4, #20]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d04b      	beq.n	8003250 <HAL_RCC_OscConfig+0x2e8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031b8:	4a1a      	ldr	r2, [pc, #104]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 80031ba:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c2:	f7fd f9f9 	bl	80005b8 <HAL_GetTick>
 80031c6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031c8:	4b16      	ldr	r3, [pc, #88]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 80031ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031cc:	f013 0f02 	tst.w	r3, #2
 80031d0:	d152      	bne.n	8003278 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031d2:	f7fd f9f1 	bl	80005b8 <HAL_GetTick>
 80031d6:	1b40      	subs	r0, r0, r5
 80031d8:	2802      	cmp	r0, #2
 80031da:	d9f5      	bls.n	80031c8 <HAL_RCC_OscConfig+0x260>
        {
          return HAL_TIMEOUT;
 80031dc:	2003      	movs	r0, #3
 80031de:	e1b3      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031e0:	4a10      	ldr	r2, [pc, #64]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 80031e2:	68d3      	ldr	r3, [r2, #12]
 80031e4:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80031e8:	6a21      	ldr	r1, [r4, #32]
 80031ea:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80031ee:	60d3      	str	r3, [r2, #12]
 80031f0:	e7db      	b.n	80031aa <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031f2:	f7fd f9fb 	bl	80005ec <HAL_GetREVID>
 80031f6:	f241 0303 	movw	r3, #4099	; 0x1003
 80031fa:	4298      	cmp	r0, r3
 80031fc:	d808      	bhi.n	8003210 <HAL_RCC_OscConfig+0x2a8>
 80031fe:	4a09      	ldr	r2, [pc, #36]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 8003200:	6853      	ldr	r3, [r2, #4]
 8003202:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003206:	6a21      	ldr	r1, [r4, #32]
 8003208:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 800320c:	6053      	str	r3, [r2, #4]
 800320e:	e7cc      	b.n	80031aa <HAL_RCC_OscConfig+0x242>
 8003210:	4a04      	ldr	r2, [pc, #16]	; (8003224 <HAL_RCC_OscConfig+0x2bc>)
 8003212:	68d3      	ldr	r3, [r2, #12]
 8003214:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003218:	6a21      	ldr	r1, [r4, #32]
 800321a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800321e:	60d3      	str	r3, [r2, #12]
 8003220:	e7c3      	b.n	80031aa <HAL_RCC_OscConfig+0x242>
 8003222:	bf00      	nop
 8003224:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_DISABLE();
 8003228:	4aad      	ldr	r2, [pc, #692]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 800322a:	6813      	ldr	r3, [r2, #0]
 800322c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003230:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003232:	f7fd f9c1 	bl	80005b8 <HAL_GetTick>
 8003236:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003238:	4ba9      	ldr	r3, [pc, #676]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003240:	d0b3      	beq.n	80031aa <HAL_RCC_OscConfig+0x242>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003242:	f7fd f9b9 	bl	80005b8 <HAL_GetTick>
 8003246:	1b40      	subs	r0, r0, r5
 8003248:	2802      	cmp	r0, #2
 800324a:	d9f5      	bls.n	8003238 <HAL_RCC_OscConfig+0x2d0>
            return HAL_TIMEOUT;
 800324c:	2003      	movs	r0, #3
 800324e:	e17b      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003250:	4aa3      	ldr	r2, [pc, #652]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003252:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8003254:	f023 0301 	bic.w	r3, r3, #1
 8003258:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800325a:	f7fd f9ad 	bl	80005b8 <HAL_GetTick>
 800325e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003260:	4b9f      	ldr	r3, [pc, #636]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003264:	f013 0f02 	tst.w	r3, #2
 8003268:	d006      	beq.n	8003278 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800326a:	f7fd f9a5 	bl	80005b8 <HAL_GetTick>
 800326e:	1b40      	subs	r0, r0, r5
 8003270:	2802      	cmp	r0, #2
 8003272:	d9f5      	bls.n	8003260 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003274:	2003      	movs	r0, #3
 8003276:	e167      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003278:	6823      	ldr	r3, [r4, #0]
 800327a:	f013 0f20 	tst.w	r3, #32
 800327e:	d029      	beq.n	80032d4 <HAL_RCC_OscConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003280:	69a3      	ldr	r3, [r4, #24]
 8003282:	b19b      	cbz	r3, 80032ac <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003284:	4a96      	ldr	r2, [pc, #600]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003286:	6813      	ldr	r3, [r2, #0]
 8003288:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800328c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800328e:	f7fd f993 	bl	80005b8 <HAL_GetTick>
 8003292:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003294:	4b92      	ldr	r3, [pc, #584]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800329c:	d11a      	bne.n	80032d4 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800329e:	f7fd f98b 	bl	80005b8 <HAL_GetTick>
 80032a2:	1b40      	subs	r0, r0, r5
 80032a4:	2802      	cmp	r0, #2
 80032a6:	d9f5      	bls.n	8003294 <HAL_RCC_OscConfig+0x32c>
        {
          return HAL_TIMEOUT;
 80032a8:	2003      	movs	r0, #3
 80032aa:	e14d      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032ac:	4a8c      	ldr	r2, [pc, #560]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80032ae:	6813      	ldr	r3, [r2, #0]
 80032b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032b6:	f7fd f97f 	bl	80005b8 <HAL_GetTick>
 80032ba:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032bc:	4b88      	ldr	r3, [pc, #544]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80032c4:	d006      	beq.n	80032d4 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80032c6:	f7fd f977 	bl	80005b8 <HAL_GetTick>
 80032ca:	1b40      	subs	r0, r0, r5
 80032cc:	2802      	cmp	r0, #2
 80032ce:	d9f5      	bls.n	80032bc <HAL_RCC_OscConfig+0x354>
        {
          return HAL_TIMEOUT;
 80032d0:	2003      	movs	r0, #3
 80032d2:	e139      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	f013 0f04 	tst.w	r3, #4
 80032da:	d121      	bne.n	8003320 <HAL_RCC_OscConfig+0x3b8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 8131 	beq.w	8003546 <HAL_RCC_OscConfig+0x5de>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80032e4:	4a7e      	ldr	r2, [pc, #504]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80032e6:	6912      	ldr	r2, [r2, #16]
 80032e8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80032ec:	2a18      	cmp	r2, #24
 80032ee:	f000 80ea 	beq.w	80034c6 <HAL_RCC_OscConfig+0x55e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d075      	beq.n	80033e2 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f6:	4a7a      	ldr	r2, [pc, #488]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80032f8:	6813      	ldr	r3, [r2, #0]
 80032fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003300:	f7fd f95a 	bl	80005b8 <HAL_GetTick>
 8003304:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003306:	4b76      	ldr	r3, [pc, #472]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800330e:	f000 80d8 	beq.w	80034c2 <HAL_RCC_OscConfig+0x55a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003312:	f7fd f951 	bl	80005b8 <HAL_GetTick>
 8003316:	1b00      	subs	r0, r0, r4
 8003318:	2802      	cmp	r0, #2
 800331a:	d9f4      	bls.n	8003306 <HAL_RCC_OscConfig+0x39e>
          {
            return HAL_TIMEOUT;
 800331c:	2003      	movs	r0, #3
 800331e:	e113      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
    PWR->CR1 |= PWR_CR1_DBP;
 8003320:	4a70      	ldr	r2, [pc, #448]	; (80034e4 <HAL_RCC_OscConfig+0x57c>)
 8003322:	6813      	ldr	r3, [r2, #0]
 8003324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003328:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800332a:	f7fd f945 	bl	80005b8 <HAL_GetTick>
 800332e:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003330:	4b6c      	ldr	r3, [pc, #432]	; (80034e4 <HAL_RCC_OscConfig+0x57c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003338:	d106      	bne.n	8003348 <HAL_RCC_OscConfig+0x3e0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800333a:	f7fd f93d 	bl	80005b8 <HAL_GetTick>
 800333e:	1b40      	subs	r0, r0, r5
 8003340:	2864      	cmp	r0, #100	; 0x64
 8003342:	d9f5      	bls.n	8003330 <HAL_RCC_OscConfig+0x3c8>
        return HAL_TIMEOUT;
 8003344:	2003      	movs	r0, #3
 8003346:	e0ff      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003348:	68a3      	ldr	r3, [r4, #8]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d00a      	beq.n	8003364 <HAL_RCC_OscConfig+0x3fc>
 800334e:	bb0b      	cbnz	r3, 8003394 <HAL_RCC_OscConfig+0x42c>
 8003350:	4b63      	ldr	r3, [pc, #396]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003352:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003354:	f022 0201 	bic.w	r2, r2, #1
 8003358:	671a      	str	r2, [r3, #112]	; 0x70
 800335a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800335c:	f022 0204 	bic.w	r2, r2, #4
 8003360:	671a      	str	r2, [r3, #112]	; 0x70
 8003362:	e004      	b.n	800336e <HAL_RCC_OscConfig+0x406>
 8003364:	4a5e      	ldr	r2, [pc, #376]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003366:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800336e:	68a3      	ldr	r3, [r4, #8]
 8003370:	b333      	cbz	r3, 80033c0 <HAL_RCC_OscConfig+0x458>
      tickstart = HAL_GetTick();
 8003372:	f7fd f921 	bl	80005b8 <HAL_GetTick>
 8003376:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003378:	4b59      	ldr	r3, [pc, #356]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 800337a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337c:	f013 0f02 	tst.w	r3, #2
 8003380:	d1ac      	bne.n	80032dc <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003382:	f7fd f919 	bl	80005b8 <HAL_GetTick>
 8003386:	1b40      	subs	r0, r0, r5
 8003388:	f241 3388 	movw	r3, #5000	; 0x1388
 800338c:	4298      	cmp	r0, r3
 800338e:	d9f3      	bls.n	8003378 <HAL_RCC_OscConfig+0x410>
          return HAL_TIMEOUT;
 8003390:	2003      	movs	r0, #3
 8003392:	e0d9      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003394:	2b05      	cmp	r3, #5
 8003396:	d009      	beq.n	80033ac <HAL_RCC_OscConfig+0x444>
 8003398:	4b51      	ldr	r3, [pc, #324]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 800339a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800339c:	f022 0201 	bic.w	r2, r2, #1
 80033a0:	671a      	str	r2, [r3, #112]	; 0x70
 80033a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033a4:	f022 0204 	bic.w	r2, r2, #4
 80033a8:	671a      	str	r2, [r3, #112]	; 0x70
 80033aa:	e7e0      	b.n	800336e <HAL_RCC_OscConfig+0x406>
 80033ac:	4b4c      	ldr	r3, [pc, #304]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80033ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033b0:	f042 0204 	orr.w	r2, r2, #4
 80033b4:	671a      	str	r2, [r3, #112]	; 0x70
 80033b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033b8:	f042 0201 	orr.w	r2, r2, #1
 80033bc:	671a      	str	r2, [r3, #112]	; 0x70
 80033be:	e7d6      	b.n	800336e <HAL_RCC_OscConfig+0x406>
      tickstart = HAL_GetTick();
 80033c0:	f7fd f8fa 	bl	80005b8 <HAL_GetTick>
 80033c4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033c6:	4b46      	ldr	r3, [pc, #280]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ca:	f013 0f02 	tst.w	r3, #2
 80033ce:	d085      	beq.n	80032dc <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d0:	f7fd f8f2 	bl	80005b8 <HAL_GetTick>
 80033d4:	1b40      	subs	r0, r0, r5
 80033d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80033da:	4298      	cmp	r0, r3
 80033dc:	d9f3      	bls.n	80033c6 <HAL_RCC_OscConfig+0x45e>
          return HAL_TIMEOUT;
 80033de:	2003      	movs	r0, #3
 80033e0:	e0b2      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_PLL_DISABLE();
 80033e2:	4a3f      	ldr	r2, [pc, #252]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80033e4:	6813      	ldr	r3, [r2, #0]
 80033e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033ea:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80033ec:	f7fd f8e4 	bl	80005b8 <HAL_GetTick>
 80033f0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033f2:	4b3b      	ldr	r3, [pc, #236]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80033fa:	d006      	beq.n	800340a <HAL_RCC_OscConfig+0x4a2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033fc:	f7fd f8dc 	bl	80005b8 <HAL_GetTick>
 8003400:	1b40      	subs	r0, r0, r5
 8003402:	2802      	cmp	r0, #2
 8003404:	d9f5      	bls.n	80033f2 <HAL_RCC_OscConfig+0x48a>
            return HAL_TIMEOUT;
 8003406:	2003      	movs	r0, #3
 8003408:	e09e      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800340a:	4b35      	ldr	r3, [pc, #212]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 800340c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800340e:	4a36      	ldr	r2, [pc, #216]	; (80034e8 <HAL_RCC_OscConfig+0x580>)
 8003410:	400a      	ands	r2, r1
 8003412:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003414:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003416:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800341a:	430a      	orrs	r2, r1
 800341c:	629a      	str	r2, [r3, #40]	; 0x28
 800341e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003420:	3a01      	subs	r2, #1
 8003422:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003426:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003428:	3901      	subs	r1, #1
 800342a:	0249      	lsls	r1, r1, #9
 800342c:	b289      	uxth	r1, r1
 800342e:	430a      	orrs	r2, r1
 8003430:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003432:	3901      	subs	r1, #1
 8003434:	0409      	lsls	r1, r1, #16
 8003436:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800343a:	430a      	orrs	r2, r1
 800343c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800343e:	3901      	subs	r1, #1
 8003440:	0609      	lsls	r1, r1, #24
 8003442:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8003446:	430a      	orrs	r2, r1
 8003448:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800344a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344c:	f022 0201 	bic.w	r2, r2, #1
 8003450:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003452:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003454:	4a25      	ldr	r2, [pc, #148]	; (80034ec <HAL_RCC_OscConfig+0x584>)
 8003456:	400a      	ands	r2, r1
 8003458:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800345a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800345e:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003462:	f022 020c 	bic.w	r2, r2, #12
 8003466:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003468:	430a      	orrs	r2, r1
 800346a:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800346c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800346e:	f022 0202 	bic.w	r2, r2, #2
 8003472:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003474:	430a      	orrs	r2, r1
 8003476:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800347e:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003482:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003486:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800348a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800348e:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8003490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800349e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80034a0:	f7fd f88a 	bl	80005b8 <HAL_GetTick>
 80034a4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034a6:	4b0e      	ldr	r3, [pc, #56]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80034ae:	d106      	bne.n	80034be <HAL_RCC_OscConfig+0x556>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b0:	f7fd f882 	bl	80005b8 <HAL_GetTick>
 80034b4:	1b00      	subs	r0, r0, r4
 80034b6:	2802      	cmp	r0, #2
 80034b8:	d9f5      	bls.n	80034a6 <HAL_RCC_OscConfig+0x53e>
            return HAL_TIMEOUT;
 80034ba:	2003      	movs	r0, #3
 80034bc:	e044      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80034be:	2000      	movs	r0, #0
 80034c0:	e042      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
 80034c2:	2000      	movs	r0, #0
 80034c4:	e040      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
      temp1_pllckcfg = RCC->PLLCKSELR;
 80034c6:	4a06      	ldr	r2, [pc, #24]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80034c8:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80034ca:	6b10      	ldr	r0, [r2, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d03c      	beq.n	800354a <HAL_RCC_OscConfig+0x5e2>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d0:	f001 0303 	and.w	r3, r1, #3
 80034d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00a      	beq.n	80034f0 <HAL_RCC_OscConfig+0x588>
        return HAL_ERROR;
 80034da:	2001      	movs	r0, #1
 80034dc:	e034      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
 80034de:	bf00      	nop
 80034e0:	58024400 	.word	0x58024400
 80034e4:	58024800 	.word	0x58024800
 80034e8:	fffffc0c 	.word	0xfffffc0c
 80034ec:	ffff0007 	.word	0xffff0007
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034f0:	f3c1 1105 	ubfx	r1, r1, #4, #6
 80034f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f6:	4299      	cmp	r1, r3
 80034f8:	d001      	beq.n	80034fe <HAL_RCC_OscConfig+0x596>
        return HAL_ERROR;
 80034fa:	2001      	movs	r0, #1
 80034fc:	e024      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034fe:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8003502:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003504:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003506:	429a      	cmp	r2, r3
 8003508:	d001      	beq.n	800350e <HAL_RCC_OscConfig+0x5a6>
        return HAL_ERROR;
 800350a:	2001      	movs	r0, #1
 800350c:	e01c      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800350e:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8003512:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003514:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003516:	429a      	cmp	r2, r3
 8003518:	d001      	beq.n	800351e <HAL_RCC_OscConfig+0x5b6>
        return HAL_ERROR;
 800351a:	2001      	movs	r0, #1
 800351c:	e014      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800351e:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8003522:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003524:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003526:	429a      	cmp	r2, r3
 8003528:	d111      	bne.n	800354e <HAL_RCC_OscConfig+0x5e6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800352a:	f3c0 6006 	ubfx	r0, r0, #24, #7
 800352e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003530:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003532:	4298      	cmp	r0, r3
 8003534:	d00d      	beq.n	8003552 <HAL_RCC_OscConfig+0x5ea>
        return HAL_ERROR;
 8003536:	2001      	movs	r0, #1
 8003538:	e006      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
    return HAL_ERROR;
 800353a:	2001      	movs	r0, #1
}
 800353c:	4770      	bx	lr
        return HAL_ERROR;
 800353e:	2001      	movs	r0, #1
 8003540:	e002      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
        return HAL_ERROR;
 8003542:	2001      	movs	r0, #1
 8003544:	e000      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
  return HAL_OK;
 8003546:	2000      	movs	r0, #0
}
 8003548:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 800354a:	2001      	movs	r0, #1
 800354c:	e7fc      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
 800354e:	2001      	movs	r0, #1
 8003550:	e7fa      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
  return HAL_OK;
 8003552:	2000      	movs	r0, #0
 8003554:	e7f8      	b.n	8003548 <HAL_RCC_OscConfig+0x5e0>
 8003556:	bf00      	nop

08003558 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003558:	4b72      	ldr	r3, [pc, #456]	; (8003724 <HAL_RCC_GetSysClockFreq+0x1cc>)
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003560:	2b10      	cmp	r3, #16
 8003562:	f000 80db 	beq.w	800371c <HAL_RCC_GetSysClockFreq+0x1c4>
 8003566:	2b18      	cmp	r3, #24
 8003568:	d010      	beq.n	800358c <HAL_RCC_GetSysClockFreq+0x34>
 800356a:	b10b      	cbz	r3, 8003570 <HAL_RCC_GetSysClockFreq+0x18>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800356c:	486e      	ldr	r0, [pc, #440]	; (8003728 <HAL_RCC_GetSysClockFreq+0x1d0>)
 800356e:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003570:	4b6c      	ldr	r3, [pc, #432]	; (8003724 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f013 0f20 	tst.w	r3, #32
 8003578:	f000 80d2 	beq.w	8003720 <HAL_RCC_GetSysClockFreq+0x1c8>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800357c:	4b69      	ldr	r3, [pc, #420]	; (8003724 <HAL_RCC_GetSysClockFreq+0x1cc>)
 800357e:	6818      	ldr	r0, [r3, #0]
 8003580:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8003584:	4b69      	ldr	r3, [pc, #420]	; (800372c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003586:	fa23 f000 	lsr.w	r0, r3, r0
 800358a:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800358c:	4a65      	ldr	r2, [pc, #404]	; (8003724 <HAL_RCC_GetSysClockFreq+0x1cc>)
 800358e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003590:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003594:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003596:	f3c0 1005 	ubfx	r0, r0, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800359a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800359c:	f003 0301 	and.w	r3, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80035a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035a2:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 80035a6:	fb03 f302 	mul.w	r3, r3, r2
 80035aa:	ee07 3a90 	vmov	s15, r3
 80035ae:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 80035b2:	2800      	cmp	r0, #0
 80035b4:	f000 80b5 	beq.w	8003722 <HAL_RCC_GetSysClockFreq+0x1ca>
    {
      switch (pllsource)
 80035b8:	2901      	cmp	r1, #1
 80035ba:	d066      	beq.n	800368a <HAL_RCC_GetSysClockFreq+0x132>
 80035bc:	b1f9      	cbz	r1, 80035fe <HAL_RCC_GetSysClockFreq+0xa6>
 80035be:	2902      	cmp	r1, #2
 80035c0:	f000 808f 	beq.w	80036e2 <HAL_RCC_GetSysClockFreq+0x18a>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035c4:	ee07 0a10 	vmov	s14, r0
 80035c8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80035cc:	ed9f 6a58 	vldr	s12, [pc, #352]	; 8003730 <HAL_RCC_GetSysClockFreq+0x1d8>
 80035d0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80035d4:	4b53      	ldr	r3, [pc, #332]	; (8003724 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80035d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035dc:	ee06 3a90 	vmov	s13, r3
 80035e0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80035e4:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8003734 <HAL_RCC_GetSysClockFreq+0x1dc>
 80035e8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80035ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035f8:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 80035fc:	e061      	b.n	80036c2 <HAL_RCC_GetSysClockFreq+0x16a>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035fe:	4b49      	ldr	r3, [pc, #292]	; (8003724 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f013 0f20 	tst.w	r3, #32
 8003606:	d023      	beq.n	8003650 <HAL_RCC_GetSysClockFreq+0xf8>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003608:	4946      	ldr	r1, [pc, #280]	; (8003724 <HAL_RCC_GetSysClockFreq+0x1cc>)
 800360a:	680a      	ldr	r2, [r1, #0]
 800360c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003610:	4b46      	ldr	r3, [pc, #280]	; (800372c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003612:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003614:	ee07 3a10 	vmov	s14, r3
 8003618:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800361c:	ee07 0a10 	vmov	s14, r0
 8003620:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8003624:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8003628:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800362a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800362e:	ee06 3a90 	vmov	s13, r3
 8003632:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003636:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8003734 <HAL_RCC_GetSysClockFreq+0x1dc>
 800363a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800363e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800364a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800364e:	e038      	b.n	80036c2 <HAL_RCC_GetSysClockFreq+0x16a>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003650:	ee07 0a10 	vmov	s14, r0
 8003654:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003658:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8003738 <HAL_RCC_GetSysClockFreq+0x1e0>
 800365c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003660:	4b30      	ldr	r3, [pc, #192]	; (8003724 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003668:	ee06 3a90 	vmov	s13, r3
 800366c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003670:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8003734 <HAL_RCC_GetSysClockFreq+0x1dc>
 8003674:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003678:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800367c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003680:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003684:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003688:	e01b      	b.n	80036c2 <HAL_RCC_GetSysClockFreq+0x16a>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800368a:	ee07 0a10 	vmov	s14, r0
 800368e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003692:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8003730 <HAL_RCC_GetSysClockFreq+0x1d8>
 8003696:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800369a:	4b22      	ldr	r3, [pc, #136]	; (8003724 <HAL_RCC_GetSysClockFreq+0x1cc>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a2:	ee06 3a90 	vmov	s13, r3
 80036a6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80036aa:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8003734 <HAL_RCC_GetSysClockFreq+0x1dc>
 80036ae:	ee67 7a86 	vmul.f32	s15, s15, s12
 80036b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036be:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80036c2:	4b18      	ldr	r3, [pc, #96]	; (8003724 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80036ca:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80036cc:	ee07 3a90 	vmov	s15, r3
 80036d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036d4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80036d8:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80036dc:	ee17 0a90 	vmov	r0, s15
 80036e0:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036e2:	ee07 0a10 	vmov	s14, r0
 80036e6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80036ea:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800373c <HAL_RCC_GetSysClockFreq+0x1e4>
 80036ee:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80036f2:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036fa:	ee06 3a90 	vmov	s13, r3
 80036fe:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003702:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8003734 <HAL_RCC_GetSysClockFreq+0x1dc>
 8003706:	ee67 7a86 	vmul.f32	s15, s15, s12
 800370a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800370e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003716:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800371a:	e7d2      	b.n	80036c2 <HAL_RCC_GetSysClockFreq+0x16a>
    sysclockfreq = HSE_VALUE;
 800371c:	4808      	ldr	r0, [pc, #32]	; (8003740 <HAL_RCC_GetSysClockFreq+0x1e8>)
 800371e:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003720:	4802      	ldr	r0, [pc, #8]	; (800372c <HAL_RCC_GetSysClockFreq+0x1d4>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8003722:	4770      	bx	lr
 8003724:	58024400 	.word	0x58024400
 8003728:	003d0900 	.word	0x003d0900
 800372c:	03d09000 	.word	0x03d09000
 8003730:	4a742400 	.word	0x4a742400
 8003734:	39000000 	.word	0x39000000
 8003738:	4c742400 	.word	0x4c742400
 800373c:	4bbebc20 	.word	0x4bbebc20
 8003740:	017d7840 	.word	0x017d7840

08003744 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003744:	2800      	cmp	r0, #0
 8003746:	f000 8136 	beq.w	80039b6 <HAL_RCC_ClockConfig+0x272>
 800374a:	4603      	mov	r3, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800374c:	4a9c      	ldr	r2, [pc, #624]	; (80039c0 <HAL_RCC_ClockConfig+0x27c>)
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	f002 020f 	and.w	r2, r2, #15
 8003754:	428a      	cmp	r2, r1
 8003756:	d20c      	bcs.n	8003772 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003758:	4899      	ldr	r0, [pc, #612]	; (80039c0 <HAL_RCC_ClockConfig+0x27c>)
 800375a:	6802      	ldr	r2, [r0, #0]
 800375c:	f022 020f 	bic.w	r2, r2, #15
 8003760:	430a      	orrs	r2, r1
 8003762:	6002      	str	r2, [r0, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003764:	6802      	ldr	r2, [r0, #0]
 8003766:	f002 020f 	and.w	r2, r2, #15
 800376a:	428a      	cmp	r2, r1
 800376c:	d001      	beq.n	8003772 <HAL_RCC_ClockConfig+0x2e>
      return HAL_ERROR;
 800376e:	2001      	movs	r0, #1
}
 8003770:	4770      	bx	lr
{
 8003772:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	f012 0f04 	tst.w	r2, #4
 800377a:	d00c      	beq.n	8003796 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800377c:	6918      	ldr	r0, [r3, #16]
 800377e:	4a91      	ldr	r2, [pc, #580]	; (80039c4 <HAL_RCC_ClockConfig+0x280>)
 8003780:	6992      	ldr	r2, [r2, #24]
 8003782:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003786:	4290      	cmp	r0, r2
 8003788:	d905      	bls.n	8003796 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800378a:	4c8e      	ldr	r4, [pc, #568]	; (80039c4 <HAL_RCC_ClockConfig+0x280>)
 800378c:	69a2      	ldr	r2, [r4, #24]
 800378e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003792:	4310      	orrs	r0, r2
 8003794:	61a0      	str	r0, [r4, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	f012 0f08 	tst.w	r2, #8
 800379c:	d00c      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800379e:	6958      	ldr	r0, [r3, #20]
 80037a0:	4a88      	ldr	r2, [pc, #544]	; (80039c4 <HAL_RCC_ClockConfig+0x280>)
 80037a2:	69d2      	ldr	r2, [r2, #28]
 80037a4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80037a8:	4290      	cmp	r0, r2
 80037aa:	d905      	bls.n	80037b8 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80037ac:	4c85      	ldr	r4, [pc, #532]	; (80039c4 <HAL_RCC_ClockConfig+0x280>)
 80037ae:	69e2      	ldr	r2, [r4, #28]
 80037b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80037b4:	4310      	orrs	r0, r2
 80037b6:	61e0      	str	r0, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	f012 0f10 	tst.w	r2, #16
 80037be:	d00c      	beq.n	80037da <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80037c0:	6998      	ldr	r0, [r3, #24]
 80037c2:	4a80      	ldr	r2, [pc, #512]	; (80039c4 <HAL_RCC_ClockConfig+0x280>)
 80037c4:	69d2      	ldr	r2, [r2, #28]
 80037c6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80037ca:	4290      	cmp	r0, r2
 80037cc:	d905      	bls.n	80037da <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037ce:	4c7d      	ldr	r4, [pc, #500]	; (80039c4 <HAL_RCC_ClockConfig+0x280>)
 80037d0:	69e2      	ldr	r2, [r4, #28]
 80037d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037d6:	4310      	orrs	r0, r2
 80037d8:	61e0      	str	r0, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	f012 0f20 	tst.w	r2, #32
 80037e0:	d00c      	beq.n	80037fc <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80037e2:	69d8      	ldr	r0, [r3, #28]
 80037e4:	4a77      	ldr	r2, [pc, #476]	; (80039c4 <HAL_RCC_ClockConfig+0x280>)
 80037e6:	6a12      	ldr	r2, [r2, #32]
 80037e8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80037ec:	4290      	cmp	r0, r2
 80037ee:	d905      	bls.n	80037fc <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80037f0:	4c74      	ldr	r4, [pc, #464]	; (80039c4 <HAL_RCC_ClockConfig+0x280>)
 80037f2:	6a22      	ldr	r2, [r4, #32]
 80037f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80037f8:	4310      	orrs	r0, r2
 80037fa:	6220      	str	r0, [r4, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	f012 0f02 	tst.w	r2, #2
 8003802:	d00c      	beq.n	800381e <HAL_RCC_ClockConfig+0xda>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003804:	68d8      	ldr	r0, [r3, #12]
 8003806:	4a6f      	ldr	r2, [pc, #444]	; (80039c4 <HAL_RCC_ClockConfig+0x280>)
 8003808:	6992      	ldr	r2, [r2, #24]
 800380a:	f002 020f 	and.w	r2, r2, #15
 800380e:	4290      	cmp	r0, r2
 8003810:	d905      	bls.n	800381e <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003812:	4c6c      	ldr	r4, [pc, #432]	; (80039c4 <HAL_RCC_ClockConfig+0x280>)
 8003814:	69a2      	ldr	r2, [r4, #24]
 8003816:	f022 020f 	bic.w	r2, r2, #15
 800381a:	4310      	orrs	r0, r2
 800381c:	61a0      	str	r0, [r4, #24]
 800381e:	461c      	mov	r4, r3
 8003820:	460d      	mov	r5, r1
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f013 0f01 	tst.w	r3, #1
 8003828:	d041      	beq.n	80038ae <HAL_RCC_ClockConfig+0x16a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800382a:	4a66      	ldr	r2, [pc, #408]	; (80039c4 <HAL_RCC_ClockConfig+0x280>)
 800382c:	6993      	ldr	r3, [r2, #24]
 800382e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003832:	68a1      	ldr	r1, [r4, #8]
 8003834:	430b      	orrs	r3, r1
 8003836:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003838:	6863      	ldr	r3, [r4, #4]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d00a      	beq.n	8003854 <HAL_RCC_ClockConfig+0x110>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800383e:	2b03      	cmp	r3, #3
 8003840:	d027      	beq.n	8003892 <HAL_RCC_ClockConfig+0x14e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003842:	2b01      	cmp	r3, #1
 8003844:	d02c      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x15c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003846:	4a5f      	ldr	r2, [pc, #380]	; (80039c4 <HAL_RCC_ClockConfig+0x280>)
 8003848:	6812      	ldr	r2, [r2, #0]
 800384a:	f012 0f04 	tst.w	r2, #4
 800384e:	d106      	bne.n	800385e <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 8003850:	2001      	movs	r0, #1
 8003852:	e0af      	b.n	80039b4 <HAL_RCC_ClockConfig+0x270>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003854:	6812      	ldr	r2, [r2, #0]
 8003856:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800385a:	f000 80ae 	beq.w	80039ba <HAL_RCC_ClockConfig+0x276>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800385e:	4959      	ldr	r1, [pc, #356]	; (80039c4 <HAL_RCC_ClockConfig+0x280>)
 8003860:	690a      	ldr	r2, [r1, #16]
 8003862:	f022 0207 	bic.w	r2, r2, #7
 8003866:	4313      	orrs	r3, r2
 8003868:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 800386a:	f7fc fea5 	bl	80005b8 <HAL_GetTick>
 800386e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003870:	4b54      	ldr	r3, [pc, #336]	; (80039c4 <HAL_RCC_ClockConfig+0x280>)
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003878:	6862      	ldr	r2, [r4, #4]
 800387a:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800387e:	d016      	beq.n	80038ae <HAL_RCC_ClockConfig+0x16a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003880:	f7fc fe9a 	bl	80005b8 <HAL_GetTick>
 8003884:	1b80      	subs	r0, r0, r6
 8003886:	f241 3388 	movw	r3, #5000	; 0x1388
 800388a:	4298      	cmp	r0, r3
 800388c:	d9f0      	bls.n	8003870 <HAL_RCC_ClockConfig+0x12c>
            return HAL_TIMEOUT;
 800388e:	2003      	movs	r0, #3
 8003890:	e090      	b.n	80039b4 <HAL_RCC_ClockConfig+0x270>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003892:	4a4c      	ldr	r2, [pc, #304]	; (80039c4 <HAL_RCC_ClockConfig+0x280>)
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800389a:	d1e0      	bne.n	800385e <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 800389c:	2001      	movs	r0, #1
 800389e:	e089      	b.n	80039b4 <HAL_RCC_ClockConfig+0x270>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038a0:	4a48      	ldr	r2, [pc, #288]	; (80039c4 <HAL_RCC_ClockConfig+0x280>)
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80038a8:	d1d9      	bne.n	800385e <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 80038aa:	2001      	movs	r0, #1
 80038ac:	e082      	b.n	80039b4 <HAL_RCC_ClockConfig+0x270>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	f013 0f02 	tst.w	r3, #2
 80038b4:	d00c      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x18c>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80038b6:	68e2      	ldr	r2, [r4, #12]
 80038b8:	4b42      	ldr	r3, [pc, #264]	; (80039c4 <HAL_RCC_ClockConfig+0x280>)
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	f003 030f 	and.w	r3, r3, #15
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d205      	bcs.n	80038d0 <HAL_RCC_ClockConfig+0x18c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038c4:	493f      	ldr	r1, [pc, #252]	; (80039c4 <HAL_RCC_ClockConfig+0x280>)
 80038c6:	698b      	ldr	r3, [r1, #24]
 80038c8:	f023 030f 	bic.w	r3, r3, #15
 80038cc:	431a      	orrs	r2, r3
 80038ce:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038d0:	4b3b      	ldr	r3, [pc, #236]	; (80039c0 <HAL_RCC_ClockConfig+0x27c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 030f 	and.w	r3, r3, #15
 80038d8:	42ab      	cmp	r3, r5
 80038da:	d90c      	bls.n	80038f6 <HAL_RCC_ClockConfig+0x1b2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038dc:	4a38      	ldr	r2, [pc, #224]	; (80039c0 <HAL_RCC_ClockConfig+0x27c>)
 80038de:	6813      	ldr	r3, [r2, #0]
 80038e0:	f023 030f 	bic.w	r3, r3, #15
 80038e4:	432b      	orrs	r3, r5
 80038e6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e8:	6813      	ldr	r3, [r2, #0]
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	42ab      	cmp	r3, r5
 80038f0:	d001      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x1b2>
      return HAL_ERROR;
 80038f2:	2001      	movs	r0, #1
 80038f4:	e05e      	b.n	80039b4 <HAL_RCC_ClockConfig+0x270>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80038f6:	6823      	ldr	r3, [r4, #0]
 80038f8:	f013 0f04 	tst.w	r3, #4
 80038fc:	d00c      	beq.n	8003918 <HAL_RCC_ClockConfig+0x1d4>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80038fe:	6922      	ldr	r2, [r4, #16]
 8003900:	4b30      	ldr	r3, [pc, #192]	; (80039c4 <HAL_RCC_ClockConfig+0x280>)
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003908:	429a      	cmp	r2, r3
 800390a:	d205      	bcs.n	8003918 <HAL_RCC_ClockConfig+0x1d4>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800390c:	492d      	ldr	r1, [pc, #180]	; (80039c4 <HAL_RCC_ClockConfig+0x280>)
 800390e:	698b      	ldr	r3, [r1, #24]
 8003910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003914:	431a      	orrs	r2, r3
 8003916:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	f013 0f08 	tst.w	r3, #8
 800391e:	d00c      	beq.n	800393a <HAL_RCC_ClockConfig+0x1f6>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003920:	6962      	ldr	r2, [r4, #20]
 8003922:	4b28      	ldr	r3, [pc, #160]	; (80039c4 <HAL_RCC_ClockConfig+0x280>)
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800392a:	429a      	cmp	r2, r3
 800392c:	d205      	bcs.n	800393a <HAL_RCC_ClockConfig+0x1f6>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800392e:	4925      	ldr	r1, [pc, #148]	; (80039c4 <HAL_RCC_ClockConfig+0x280>)
 8003930:	69cb      	ldr	r3, [r1, #28]
 8003932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003936:	431a      	orrs	r2, r3
 8003938:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	f013 0f10 	tst.w	r3, #16
 8003940:	d00c      	beq.n	800395c <HAL_RCC_ClockConfig+0x218>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003942:	69a2      	ldr	r2, [r4, #24]
 8003944:	4b1f      	ldr	r3, [pc, #124]	; (80039c4 <HAL_RCC_ClockConfig+0x280>)
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800394c:	429a      	cmp	r2, r3
 800394e:	d205      	bcs.n	800395c <HAL_RCC_ClockConfig+0x218>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003950:	491c      	ldr	r1, [pc, #112]	; (80039c4 <HAL_RCC_ClockConfig+0x280>)
 8003952:	69cb      	ldr	r3, [r1, #28]
 8003954:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003958:	431a      	orrs	r2, r3
 800395a:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800395c:	6823      	ldr	r3, [r4, #0]
 800395e:	f013 0f20 	tst.w	r3, #32
 8003962:	d00c      	beq.n	800397e <HAL_RCC_ClockConfig+0x23a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003964:	69e2      	ldr	r2, [r4, #28]
 8003966:	4b17      	ldr	r3, [pc, #92]	; (80039c4 <HAL_RCC_ClockConfig+0x280>)
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800396e:	429a      	cmp	r2, r3
 8003970:	d205      	bcs.n	800397e <HAL_RCC_ClockConfig+0x23a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003972:	4914      	ldr	r1, [pc, #80]	; (80039c4 <HAL_RCC_ClockConfig+0x280>)
 8003974:	6a0b      	ldr	r3, [r1, #32]
 8003976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397a:	431a      	orrs	r2, r3
 800397c:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800397e:	f7ff fdeb 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 8003982:	4910      	ldr	r1, [pc, #64]	; (80039c4 <HAL_RCC_ClockConfig+0x280>)
 8003984:	698b      	ldr	r3, [r1, #24]
 8003986:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800398a:	4a0f      	ldr	r2, [pc, #60]	; (80039c8 <HAL_RCC_ClockConfig+0x284>)
 800398c:	5cd3      	ldrb	r3, [r2, r3]
 800398e:	f003 031f 	and.w	r3, r3, #31
 8003992:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003994:	698b      	ldr	r3, [r1, #24]
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	5cd3      	ldrb	r3, [r2, r3]
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	fa20 f303 	lsr.w	r3, r0, r3
 80039a4:	4a09      	ldr	r2, [pc, #36]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 80039a6:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80039a8:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <HAL_RCC_ClockConfig+0x28c>)
 80039aa:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 80039ac:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <HAL_RCC_ClockConfig+0x290>)
 80039ae:	6818      	ldr	r0, [r3, #0]
 80039b0:	f7fc fda0 	bl	80004f4 <HAL_InitTick>
}
 80039b4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80039b6:	2001      	movs	r0, #1
 80039b8:	4770      	bx	lr
          return HAL_ERROR;
 80039ba:	2001      	movs	r0, #1
 80039bc:	e7fa      	b.n	80039b4 <HAL_RCC_ClockConfig+0x270>
 80039be:	bf00      	nop
 80039c0:	52002000 	.word	0x52002000
 80039c4:	58024400 	.word	0x58024400
 80039c8:	0800d304 	.word	0x0800d304
 80039cc:	2000007c 	.word	0x2000007c
 80039d0:	20000078 	.word	0x20000078
 80039d4:	20000004 	.word	0x20000004

080039d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d8:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80039da:	f7ff fdbd 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 80039de:	4a0b      	ldr	r2, [pc, #44]	; (8003a0c <HAL_RCC_GetHCLKFreq+0x34>)
 80039e0:	6993      	ldr	r3, [r2, #24]
 80039e2:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80039e6:	490a      	ldr	r1, [pc, #40]	; (8003a10 <HAL_RCC_GetHCLKFreq+0x38>)
 80039e8:	5ccb      	ldrb	r3, [r1, r3]
 80039ea:	f003 031f 	and.w	r3, r3, #31
 80039ee:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039f2:	6992      	ldr	r2, [r2, #24]
 80039f4:	f002 020f 	and.w	r2, r2, #15
 80039f8:	5c88      	ldrb	r0, [r1, r2]
 80039fa:	f000 001f 	and.w	r0, r0, #31
 80039fe:	fa23 f000 	lsr.w	r0, r3, r0
 8003a02:	4a04      	ldr	r2, [pc, #16]	; (8003a14 <HAL_RCC_GetHCLKFreq+0x3c>)
 8003a04:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a06:	4a04      	ldr	r2, [pc, #16]	; (8003a18 <HAL_RCC_GetHCLKFreq+0x40>)
 8003a08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8003a0a:	bd08      	pop	{r3, pc}
 8003a0c:	58024400 	.word	0x58024400
 8003a10:	0800d304 	.word	0x0800d304
 8003a14:	2000007c 	.word	0x2000007c
 8003a18:	20000078 	.word	0x20000078

08003a1c <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a1c:	4b40      	ldr	r3, [pc, #256]	; (8003b20 <RCCEx_PLL2_Config+0x104>)
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d079      	beq.n	8003b1c <RCCEx_PLL2_Config+0x100>
{
 8003a28:	b570      	push	{r4, r5, r6, lr}
 8003a2a:	460e      	mov	r6, r1
 8003a2c:	4604      	mov	r4, r0


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003a2e:	4a3c      	ldr	r2, [pc, #240]	; (8003b20 <RCCEx_PLL2_Config+0x104>)
 8003a30:	6813      	ldr	r3, [r2, #0]
 8003a32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a38:	f7fc fdbe 	bl	80005b8 <HAL_GetTick>
 8003a3c:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a3e:	4b38      	ldr	r3, [pc, #224]	; (8003b20 <RCCEx_PLL2_Config+0x104>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003a46:	d006      	beq.n	8003a56 <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003a48:	f7fc fdb6 	bl	80005b8 <HAL_GetTick>
 8003a4c:	1b40      	subs	r0, r0, r5
 8003a4e:	2802      	cmp	r0, #2
 8003a50:	d9f5      	bls.n	8003a3e <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 8003a52:	2003      	movs	r0, #3

  }


  return status;
}
 8003a54:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003a56:	4b32      	ldr	r3, [pc, #200]	; (8003b20 <RCCEx_PLL2_Config+0x104>)
 8003a58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a5a:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8003a5e:	6821      	ldr	r1, [r4, #0]
 8003a60:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8003a64:	629a      	str	r2, [r3, #40]	; 0x28
 8003a66:	6862      	ldr	r2, [r4, #4]
 8003a68:	3a01      	subs	r2, #1
 8003a6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a6e:	68a1      	ldr	r1, [r4, #8]
 8003a70:	3901      	subs	r1, #1
 8003a72:	0249      	lsls	r1, r1, #9
 8003a74:	b289      	uxth	r1, r1
 8003a76:	430a      	orrs	r2, r1
 8003a78:	68e1      	ldr	r1, [r4, #12]
 8003a7a:	3901      	subs	r1, #1
 8003a7c:	0409      	lsls	r1, r1, #16
 8003a7e:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8003a82:	430a      	orrs	r2, r1
 8003a84:	6921      	ldr	r1, [r4, #16]
 8003a86:	3901      	subs	r1, #1
 8003a88:	0609      	lsls	r1, r1, #24
 8003a8a:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a94:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003a98:	6961      	ldr	r1, [r4, #20]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa0:	f022 0220 	bic.w	r2, r2, #32
 8003aa4:	69a1      	ldr	r1, [r4, #24]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aac:	f022 0210 	bic.w	r2, r2, #16
 8003ab0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003ab2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003ab4:	4a1b      	ldr	r2, [pc, #108]	; (8003b24 <RCCEx_PLL2_Config+0x108>)
 8003ab6:	400a      	ands	r2, r1
 8003ab8:	69e1      	ldr	r1, [r4, #28]
 8003aba:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003abe:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac2:	f042 0210 	orr.w	r2, r2, #16
 8003ac6:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8003ac8:	b9c6      	cbnz	r6, 8003afc <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003aca:	461a      	mov	r2, r3
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ad2:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 8003ad4:	4a12      	ldr	r2, [pc, #72]	; (8003b20 <RCCEx_PLL2_Config+0x104>)
 8003ad6:	6813      	ldr	r3, [r2, #0]
 8003ad8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003adc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003ade:	f7fc fd6b 	bl	80005b8 <HAL_GetTick>
 8003ae2:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ae4:	4b0e      	ldr	r3, [pc, #56]	; (8003b20 <RCCEx_PLL2_Config+0x104>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003aec:	d114      	bne.n	8003b18 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003aee:	f7fc fd63 	bl	80005b8 <HAL_GetTick>
 8003af2:	1b00      	subs	r0, r0, r4
 8003af4:	2802      	cmp	r0, #2
 8003af6:	d9f5      	bls.n	8003ae4 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8003af8:	2003      	movs	r0, #3
 8003afa:	e7ab      	b.n	8003a54 <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8003afc:	2e01      	cmp	r6, #1
 8003afe:	d005      	beq.n	8003b0c <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003b00:	4a07      	ldr	r2, [pc, #28]	; (8003b20 <RCCEx_PLL2_Config+0x104>)
 8003b02:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003b04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b08:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b0a:	e7e3      	b.n	8003ad4 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003b0c:	4a04      	ldr	r2, [pc, #16]	; (8003b20 <RCCEx_PLL2_Config+0x104>)
 8003b0e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003b10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b14:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b16:	e7dd      	b.n	8003ad4 <RCCEx_PLL2_Config+0xb8>
  return status;
 8003b18:	2000      	movs	r0, #0
 8003b1a:	e79b      	b.n	8003a54 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8003b1c:	2001      	movs	r0, #1
}
 8003b1e:	4770      	bx	lr
 8003b20:	58024400 	.word	0x58024400
 8003b24:	ffff0007 	.word	0xffff0007

08003b28 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b28:	4b40      	ldr	r3, [pc, #256]	; (8003c2c <RCCEx_PLL3_Config+0x104>)
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2c:	f003 0303 	and.w	r3, r3, #3
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d079      	beq.n	8003c28 <RCCEx_PLL3_Config+0x100>
{
 8003b34:	b570      	push	{r4, r5, r6, lr}
 8003b36:	460e      	mov	r6, r1
 8003b38:	4604      	mov	r4, r0


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003b3a:	4a3c      	ldr	r2, [pc, #240]	; (8003c2c <RCCEx_PLL3_Config+0x104>)
 8003b3c:	6813      	ldr	r3, [r2, #0]
 8003b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b44:	f7fc fd38 	bl	80005b8 <HAL_GetTick>
 8003b48:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003b4a:	4b38      	ldr	r3, [pc, #224]	; (8003c2c <RCCEx_PLL3_Config+0x104>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003b52:	d006      	beq.n	8003b62 <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003b54:	f7fc fd30 	bl	80005b8 <HAL_GetTick>
 8003b58:	1b40      	subs	r0, r0, r5
 8003b5a:	2802      	cmp	r0, #2
 8003b5c:	d9f5      	bls.n	8003b4a <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 8003b5e:	2003      	movs	r0, #3

  }


  return status;
}
 8003b60:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003b62:	4b32      	ldr	r3, [pc, #200]	; (8003c2c <RCCEx_PLL3_Config+0x104>)
 8003b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b66:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 8003b6a:	6821      	ldr	r1, [r4, #0]
 8003b6c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8003b70:	629a      	str	r2, [r3, #40]	; 0x28
 8003b72:	6862      	ldr	r2, [r4, #4]
 8003b74:	3a01      	subs	r2, #1
 8003b76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b7a:	68a1      	ldr	r1, [r4, #8]
 8003b7c:	3901      	subs	r1, #1
 8003b7e:	0249      	lsls	r1, r1, #9
 8003b80:	b289      	uxth	r1, r1
 8003b82:	430a      	orrs	r2, r1
 8003b84:	68e1      	ldr	r1, [r4, #12]
 8003b86:	3901      	subs	r1, #1
 8003b88:	0409      	lsls	r1, r1, #16
 8003b8a:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	6921      	ldr	r1, [r4, #16]
 8003b92:	3901      	subs	r1, #1
 8003b94:	0609      	lsls	r1, r1, #24
 8003b96:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003ba4:	6961      	ldr	r1, [r4, #20]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003bb0:	69a1      	ldr	r1, [r4, #24]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bbc:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003bbe:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003bc0:	4a1b      	ldr	r2, [pc, #108]	; (8003c30 <RCCEx_PLL3_Config+0x108>)
 8003bc2:	400a      	ands	r2, r1
 8003bc4:	69e1      	ldr	r1, [r4, #28]
 8003bc6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003bca:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bd2:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8003bd4:	b9c6      	cbnz	r6, 8003c08 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bde:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8003be0:	4a12      	ldr	r2, [pc, #72]	; (8003c2c <RCCEx_PLL3_Config+0x104>)
 8003be2:	6813      	ldr	r3, [r2, #0]
 8003be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003bea:	f7fc fce5 	bl	80005b8 <HAL_GetTick>
 8003bee:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003bf0:	4b0e      	ldr	r3, [pc, #56]	; (8003c2c <RCCEx_PLL3_Config+0x104>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003bf8:	d114      	bne.n	8003c24 <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003bfa:	f7fc fcdd 	bl	80005b8 <HAL_GetTick>
 8003bfe:	1b00      	subs	r0, r0, r4
 8003c00:	2802      	cmp	r0, #2
 8003c02:	d9f5      	bls.n	8003bf0 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 8003c04:	2003      	movs	r0, #3
 8003c06:	e7ab      	b.n	8003b60 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c08:	2e01      	cmp	r6, #1
 8003c0a:	d005      	beq.n	8003c18 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003c0c:	4a07      	ldr	r2, [pc, #28]	; (8003c2c <RCCEx_PLL3_Config+0x104>)
 8003c0e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003c10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c14:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c16:	e7e3      	b.n	8003be0 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003c18:	4a04      	ldr	r2, [pc, #16]	; (8003c2c <RCCEx_PLL3_Config+0x104>)
 8003c1a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003c1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c20:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c22:	e7dd      	b.n	8003be0 <RCCEx_PLL3_Config+0xb8>
  return status;
 8003c24:	2000      	movs	r0, #0
 8003c26:	e79b      	b.n	8003b60 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8003c28:	2001      	movs	r0, #1
}
 8003c2a:	4770      	bx	lr
 8003c2c:	58024400 	.word	0x58024400
 8003c30:	ffff0007 	.word	0xffff0007

08003c34 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c36:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c38:	6803      	ldr	r3, [r0, #0]
 8003c3a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003c3e:	d02b      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x64>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003c40:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c46:	d018      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x46>
 8003c48:	d907      	bls.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003c4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c4e:	d01d      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003c50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c54:	d12e      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c56:	2500      	movs	r5, #0
 8003c58:	e006      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x34>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003c5a:	bb5b      	cbnz	r3, 8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c5c:	4a93      	ldr	r2, [pc, #588]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003c5e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c64:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c66:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c68:	4a90      	ldr	r2, [pc, #576]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003c6a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003c6c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003c70:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003c72:	430b      	orrs	r3, r1
 8003c74:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c76:	2600      	movs	r6, #0
 8003c78:	e010      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c7a:	2102      	movs	r1, #2
 8003c7c:	3004      	adds	r0, #4
 8003c7e:	f7ff fecd 	bl	8003a1c <RCCEx_PLL2_Config>
 8003c82:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003c84:	2d00      	cmp	r5, #0
 8003c86:	d0ef      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003c88:	462e      	mov	r6, r5
 8003c8a:	e007      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c8c:	2102      	movs	r1, #2
 8003c8e:	3024      	adds	r0, #36	; 0x24
 8003c90:	f7ff ff4a 	bl	8003b28 <RCCEx_PLL3_Config>
 8003c94:	4605      	mov	r5, r0
      break;
 8003c96:	e7f5      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x50>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c98:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c9a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c9c:	6823      	ldr	r3, [r4, #0]
 8003c9e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003ca2:	d017      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003ca4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d832      	bhi.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003caa:	e8df f003 	tbb	[pc, r3]
 8003cae:	2406      	.short	0x2406
 8003cb0:	0b2a      	.short	0x0b2a
 8003cb2:	0b          	.byte	0x0b
 8003cb3:	00          	.byte	0x00
      ret = HAL_ERROR;
 8003cb4:	2601      	movs	r6, #1
 8003cb6:	4635      	mov	r5, r6
 8003cb8:	e7f0      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cba:	4a7c      	ldr	r2, [pc, #496]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003cbc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003cc4:	bb3d      	cbnz	r5, 8003d16 <HAL_RCCEx_PeriphCLKConfig+0xe2>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cc6:	4a79      	ldr	r2, [pc, #484]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003cc8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003cca:	f023 0307 	bic.w	r3, r3, #7
 8003cce:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003cd4:	6823      	ldr	r3, [r4, #0]
 8003cd6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003cda:	d033      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003cdc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003cde:	2b80      	cmp	r3, #128	; 0x80
 8003ce0:	d044      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x138>
 8003ce2:	d81a      	bhi.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8003ce4:	b30b      	cbz	r3, 8003d2a <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8003ce6:	2b40      	cmp	r3, #64	; 0x40
 8003ce8:	d11c      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cea:	2100      	movs	r1, #0
 8003cec:	1d20      	adds	r0, r4, #4
 8003cee:	f7ff fe95 	bl	8003a1c <RCCEx_PLL2_Config>
 8003cf2:	4605      	mov	r5, r0
      break;
 8003cf4:	e01e      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x100>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	1d20      	adds	r0, r4, #4
 8003cfa:	f7ff fe8f 	bl	8003a1c <RCCEx_PLL2_Config>
 8003cfe:	4605      	mov	r5, r0
      break;
 8003d00:	e7e0      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d02:	2100      	movs	r1, #0
 8003d04:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003d08:	f7ff ff0e 	bl	8003b28 <RCCEx_PLL3_Config>
 8003d0c:	4605      	mov	r5, r0
      break;
 8003d0e:	e7d9      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = HAL_ERROR;
 8003d10:	2601      	movs	r6, #1
 8003d12:	4635      	mov	r5, r6
 8003d14:	e7de      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003d16:	462e      	mov	r6, r5
 8003d18:	e7dc      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003d1a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d1c:	d00a      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d22:	d007      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x100>
      ret = HAL_ERROR;
 8003d24:	2601      	movs	r6, #1
 8003d26:	4635      	mov	r5, r6
 8003d28:	e00c      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x110>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d2a:	4a60      	ldr	r2, [pc, #384]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003d2c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003d2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d32:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003d34:	bb0d      	cbnz	r5, 8003d7a <HAL_RCCEx_PeriphCLKConfig+0x146>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003d36:	4a5d      	ldr	r2, [pc, #372]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003d38:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003d3a:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8003d3e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003d40:	430b      	orrs	r3, r1
 8003d42:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003d44:	6823      	ldr	r3, [r4, #0]
 8003d46:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003d4a:	d02f      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x178>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003d4c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8003d50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d54:	d03e      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8003d56:	d812      	bhi.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003d58:	b1d3      	cbz	r3, 8003d90 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003d5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d5e:	d114      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x156>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d60:	2100      	movs	r1, #0
 8003d62:	1d20      	adds	r0, r4, #4
 8003d64:	f7ff fe5a 	bl	8003a1c <RCCEx_PLL2_Config>
 8003d68:	4605      	mov	r5, r0
      break;
 8003d6a:	e016      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003d72:	f7ff fed9 	bl	8003b28 <RCCEx_PLL3_Config>
 8003d76:	4605      	mov	r5, r0
      break;
 8003d78:	e7dc      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003d7a:	462e      	mov	r6, r5
 8003d7c:	e7e2      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003d7e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003d82:	d00a      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003d84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d88:	d007      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = HAL_ERROR;
 8003d8a:	2601      	movs	r6, #1
 8003d8c:	4635      	mov	r5, r6
 8003d8e:	e00d      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x178>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d90:	4a46      	ldr	r2, [pc, #280]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003d92:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d98:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003d9a:	bb15      	cbnz	r5, 8003de2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003d9c:	4a43      	ldr	r2, [pc, #268]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003d9e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003da0:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8003da4:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8003da8:	430b      	orrs	r3, r1
 8003daa:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003db2:	d02f      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->Sai4BClockSelection)
 8003db4:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8003db8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dbc:	d037      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003dbe:	d812      	bhi.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003dc0:	b1d3      	cbz	r3, 8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8003dc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dc6:	d114      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dc8:	2100      	movs	r1, #0
 8003dca:	1d20      	adds	r0, r4, #4
 8003dcc:	f7ff fe26 	bl	8003a1c <RCCEx_PLL2_Config>
 8003dd0:	4605      	mov	r5, r0
      break;
 8003dd2:	e016      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003dda:	f7ff fea5 	bl	8003b28 <RCCEx_PLL3_Config>
 8003dde:	4605      	mov	r5, r0
      break;
 8003de0:	e7db      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003de2:	462e      	mov	r6, r5
 8003de4:	e7e2      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x178>
    switch(PeriphClkInit->Sai4BClockSelection)
 8003de6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003dea:	d00a      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003dec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003df0:	d007      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      ret = HAL_ERROR;
 8003df2:	2601      	movs	r6, #1
 8003df4:	4635      	mov	r5, r6
 8003df6:	e00d      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003df8:	4a2c      	ldr	r2, [pc, #176]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003dfa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e00:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003e02:	b9dd      	cbnz	r5, 8003e3c <HAL_RCCEx_PeriphCLKConfig+0x208>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003e04:	4a29      	ldr	r2, [pc, #164]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003e06:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003e08:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003e0c:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8003e10:	430b      	orrs	r3, r1
 8003e12:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003e1a:	d02a      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x23e>
    switch(PeriphClkInit->QspiClockSelection)
 8003e1c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003e1e:	2b10      	cmp	r3, #16
 8003e20:	d012      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003e22:	d90d      	bls.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8003e24:	2b20      	cmp	r3, #32
 8003e26:	d01d      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003e28:	2b30      	cmp	r3, #48	; 0x30
 8003e2a:	d012      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003e2c:	e009      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x20e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e2e:	2100      	movs	r1, #0
 8003e30:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003e34:	f7ff fe78 	bl	8003b28 <RCCEx_PLL3_Config>
 8003e38:	4605      	mov	r5, r0
      break;
 8003e3a:	e7e2      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003e3c:	462e      	mov	r6, r5
 8003e3e:	e7e9      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->QspiClockSelection)
 8003e40:	b13b      	cbz	r3, 8003e52 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      ret = HAL_ERROR;
 8003e42:	2601      	movs	r6, #1
 8003e44:	4635      	mov	r5, r6
 8003e46:	e014      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e48:	4a18      	ldr	r2, [pc, #96]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003e4a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e50:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003e52:	b96d      	cbnz	r5, 8003e70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003e54:	4a15      	ldr	r2, [pc, #84]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003e56:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003e58:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003e5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003e5e:	430b      	orrs	r3, r1
 8003e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e62:	e006      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x23e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e64:	2102      	movs	r1, #2
 8003e66:	1d20      	adds	r0, r4, #4
 8003e68:	f7ff fdd8 	bl	8003a1c <RCCEx_PLL2_Config>
 8003e6c:	4605      	mov	r5, r0
      break;
 8003e6e:	e7f0      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003e70:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003e78:	d027      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003e7a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e80:	d03e      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003e82:	d809      	bhi.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003e84:	b1a3      	cbz	r3, 8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e8a:	d10b      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x270>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	1d20      	adds	r0, r4, #4
 8003e90:	f7ff fdc4 	bl	8003a1c <RCCEx_PLL2_Config>
 8003e94:	4605      	mov	r5, r0
      break;
 8003e96:	e010      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x286>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003e98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e9c:	d00d      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003e9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ea2:	d00a      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x286>
      ret = HAL_ERROR;
 8003ea4:	2601      	movs	r6, #1
 8003ea6:	4635      	mov	r5, r6
 8003ea8:	e00f      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003eaa:	bf00      	nop
 8003eac:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eb0:	4a93      	ldr	r2, [pc, #588]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003eb2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003eba:	bb45      	cbnz	r5, 8003f0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ebc:	4a90      	ldr	r2, [pc, #576]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003ebe:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003ec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ec4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003ec6:	430b      	orrs	r3, r1
 8003ec8:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003ed0:	d033      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Spi45ClockSelection)
 8003ed2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003ed4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ed8:	d027      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8003eda:	d81a      	bhi.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003edc:	b13b      	cbz	r3, 8003eee <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee2:	d11f      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	1d20      	adds	r0, r4, #4
 8003ee8:	f7ff fd98 	bl	8003a1c <RCCEx_PLL2_Config>
 8003eec:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003eee:	bb1d      	cbnz	r5, 8003f38 <HAL_RCCEx_PeriphCLKConfig+0x304>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ef0:	4a83      	ldr	r2, [pc, #524]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003ef2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003ef4:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003ef8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003efa:	430b      	orrs	r3, r1
 8003efc:	6513      	str	r3, [r2, #80]	; 0x50
 8003efe:	e01c      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x306>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f00:	2100      	movs	r1, #0
 8003f02:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f06:	f7ff fe0f 	bl	8003b28 <RCCEx_PLL3_Config>
 8003f0a:	4605      	mov	r5, r0
      break;
 8003f0c:	e7d5      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003f0e:	462e      	mov	r6, r5
 8003f10:	e7db      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch(PeriphClkInit->Spi45ClockSelection)
 8003f12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f16:	d0ea      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f1c:	d0e7      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003f1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f22:	d0e4      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      ret = HAL_ERROR;
 8003f24:	2601      	movs	r6, #1
 8003f26:	4635      	mov	r5, r6
 8003f28:	e007      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x306>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f30:	f7ff fdfa 	bl	8003b28 <RCCEx_PLL3_Config>
 8003f34:	4605      	mov	r5, r0
      break;
 8003f36:	e7da      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003f38:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003f3a:	6823      	ldr	r3, [r4, #0]
 8003f3c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003f40:	d02c      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x368>
    switch(PeriphClkInit->Spi6ClockSelection)
 8003f42:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8003f46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f4a:	d01f      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x358>
 8003f4c:	d812      	bhi.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x340>
 8003f4e:	b13b      	cbz	r3, 8003f60 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8003f50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f54:	d117      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x352>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f56:	2101      	movs	r1, #1
 8003f58:	1d20      	adds	r0, r4, #4
 8003f5a:	f7ff fd5f 	bl	8003a1c <RCCEx_PLL2_Config>
 8003f5e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f60:	b9dd      	cbnz	r5, 8003f9a <HAL_RCCEx_PeriphCLKConfig+0x366>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003f62:	4a67      	ldr	r2, [pc, #412]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003f64:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003f66:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8003f6a:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8003f6e:	430b      	orrs	r3, r1
 8003f70:	6593      	str	r3, [r2, #88]	; 0x58
 8003f72:	e013      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x368>
    switch(PeriphClkInit->Spi6ClockSelection)
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d0f2      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8003f7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f7e:	d0ef      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8003f80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f84:	d0ec      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      ret = HAL_ERROR;
 8003f86:	2601      	movs	r6, #1
 8003f88:	4635      	mov	r5, r6
 8003f8a:	e007      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f92:	f7ff fdc9 	bl	8003b28 <RCCEx_PLL3_Config>
 8003f96:	4605      	mov	r5, r0
      break;
 8003f98:	e7e2      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8003f9a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f9c:	6823      	ldr	r3, [r4, #0]
 8003f9e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003fa2:	d01f      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->FdcanClockSelection)
 8003fa4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003fa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003faa:	d006      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x386>
 8003fac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fb0:	d011      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8003fb2:	b13b      	cbz	r3, 8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x390>
      ret = HAL_ERROR;
 8003fb4:	2601      	movs	r6, #1
 8003fb6:	4635      	mov	r5, r6
 8003fb8:	e014      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fba:	4a51      	ldr	r2, [pc, #324]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003fbc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fc2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003fc4:	b96d      	cbnz	r5, 8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003fc6:	4a4e      	ldr	r2, [pc, #312]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003fc8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003fca:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003fce:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003fd0:	430b      	orrs	r3, r1
 8003fd2:	6513      	str	r3, [r2, #80]	; 0x50
 8003fd4:	e006      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	1d20      	adds	r0, r4, #4
 8003fda:	f7ff fd1f 	bl	8003a1c <RCCEx_PLL2_Config>
 8003fde:	4605      	mov	r5, r0
      break;
 8003fe0:	e7f0      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8003fe2:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003fe4:	6823      	ldr	r3, [r4, #0]
 8003fe6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003fea:	d01e      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    switch(PeriphClkInit->FmcClockSelection)
 8003fec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003fee:	2b03      	cmp	r3, #3
 8003ff0:	d817      	bhi.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 8003ff2:	e8df f003 	tbb	[pc, r3]
 8003ff6:	0207      	.short	0x0207
 8003ff8:	0710      	.short	0x0710
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ffa:	4a41      	ldr	r2, [pc, #260]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003ffc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004002:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004004:	b985      	cbnz	r5, 8004028 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004006:	4a3e      	ldr	r2, [pc, #248]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004008:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800400a:	f023 0303 	bic.w	r3, r3, #3
 800400e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004010:	430b      	orrs	r3, r1
 8004012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004014:	e009      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004016:	2102      	movs	r1, #2
 8004018:	1d20      	adds	r0, r4, #4
 800401a:	f7ff fcff 	bl	8003a1c <RCCEx_PLL2_Config>
 800401e:	4605      	mov	r5, r0
      break;
 8004020:	e7f0      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
      ret = HAL_ERROR;
 8004022:	2601      	movs	r6, #1
 8004024:	4635      	mov	r5, r6
 8004026:	e000      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8004028:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800402a:	6823      	ldr	r3, [r4, #0]
 800402c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004030:	d11f      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x43e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	f013 0f01 	tst.w	r3, #1
 8004038:	f000 809e 	beq.w	8004178 <HAL_RCCEx_PeriphCLKConfig+0x544>
    switch(PeriphClkInit->Usart16ClockSelection)
 800403c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800403e:	2b28      	cmp	r3, #40	; 0x28
 8004040:	f200 8096 	bhi.w	8004170 <HAL_RCCEx_PeriphCLKConfig+0x53c>
 8004044:	e8df f003 	tbb	[pc, r3]
 8004048:	94949484 	.word	0x94949484
 800404c:	94949494 	.word	0x94949494
 8004050:	9494947f 	.word	0x9494947f
 8004054:	94949494 	.word	0x94949494
 8004058:	9494948d 	.word	0x9494948d
 800405c:	94949494 	.word	0x94949494
 8004060:	94949484 	.word	0x94949484
 8004064:	94949494 	.word	0x94949494
 8004068:	94949484 	.word	0x94949484
 800406c:	94949494 	.word	0x94949494
 8004070:	84          	.byte	0x84
 8004071:	00          	.byte	0x00
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004072:	4a24      	ldr	r2, [pc, #144]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004074:	6813      	ldr	r3, [r2, #0]
 8004076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800407a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800407c:	f7fc fa9c 	bl	80005b8 <HAL_GetTick>
 8004080:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004082:	4b20      	ldr	r3, [pc, #128]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f413 7f80 	tst.w	r3, #256	; 0x100
 800408a:	d105      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x464>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800408c:	f7fc fa94 	bl	80005b8 <HAL_GetTick>
 8004090:	1bc0      	subs	r0, r0, r7
 8004092:	2864      	cmp	r0, #100	; 0x64
 8004094:	d9f5      	bls.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x44e>
        ret = HAL_TIMEOUT;
 8004096:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 8004098:	2d00      	cmp	r5, #0
 800409a:	d150      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x50a>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800409c:	4b18      	ldr	r3, [pc, #96]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 800409e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a0:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80040a4:	4053      	eors	r3, r2
 80040a6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80040aa:	d00c      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x492>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040ac:	4b14      	ldr	r3, [pc, #80]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80040ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80040b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80040b6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80040ba:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040bc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80040be:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80040c2:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80040c4:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80040c6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80040ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ce:	d01b      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      if(ret == HAL_OK)
 80040d0:	2d00      	cmp	r5, #0
 80040d2:	d136      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x50e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040d4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80040d8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80040dc:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80040e0:	d023      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80040e2:	4a07      	ldr	r2, [pc, #28]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80040e4:	6913      	ldr	r3, [r2, #16]
 80040e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80040ea:	6113      	str	r3, [r2, #16]
 80040ec:	4904      	ldr	r1, [pc, #16]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80040ee:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80040f0:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80040f4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80040f8:	4313      	orrs	r3, r2
 80040fa:	670b      	str	r3, [r1, #112]	; 0x70
 80040fc:	e799      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 80040fe:	bf00      	nop
 8004100:	58024400 	.word	0x58024400
 8004104:	58024800 	.word	0x58024800
        tickstart = HAL_GetTick();
 8004108:	f7fc fa56 	bl	80005b8 <HAL_GetTick>
 800410c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800410e:	4bac      	ldr	r3, [pc, #688]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004112:	f013 0f02 	tst.w	r3, #2
 8004116:	d1db      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004118:	f7fc fa4e 	bl	80005b8 <HAL_GetTick>
 800411c:	1bc0      	subs	r0, r0, r7
 800411e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004122:	4298      	cmp	r0, r3
 8004124:	d9f3      	bls.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x4da>
            ret = HAL_TIMEOUT;
 8004126:	2503      	movs	r5, #3
 8004128:	e7d2      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800412a:	48a5      	ldr	r0, [pc, #660]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800412c:	6902      	ldr	r2, [r0, #16]
 800412e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8004132:	49a4      	ldr	r1, [pc, #656]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x790>)
 8004134:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8004138:	4313      	orrs	r3, r2
 800413a:	6103      	str	r3, [r0, #16]
 800413c:	e7d6      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      status = ret;
 800413e:	462e      	mov	r6, r5
 8004140:	e777      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
        status = ret;
 8004142:	462e      	mov	r6, r5
 8004144:	e775      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004146:	2101      	movs	r1, #1
 8004148:	1d20      	adds	r0, r4, #4
 800414a:	f7ff fc67 	bl	8003a1c <RCCEx_PLL2_Config>
 800414e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004150:	b98d      	cbnz	r5, 8004176 <HAL_RCCEx_PeriphCLKConfig+0x542>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004152:	4a9b      	ldr	r2, [pc, #620]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004154:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004156:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800415a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800415c:	430b      	orrs	r3, r1
 800415e:	6553      	str	r3, [r2, #84]	; 0x54
 8004160:	e00a      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x544>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004162:	2101      	movs	r1, #1
 8004164:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004168:	f7ff fcde 	bl	8003b28 <RCCEx_PLL3_Config>
 800416c:	4605      	mov	r5, r0
      break;
 800416e:	e7ef      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x51c>
      ret = HAL_ERROR;
 8004170:	2601      	movs	r6, #1
 8004172:	4635      	mov	r5, r6
 8004174:	e000      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8004176:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	f013 0f02 	tst.w	r3, #2
 800417e:	d020      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x58e>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004180:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004182:	2b05      	cmp	r3, #5
 8004184:	d819      	bhi.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x586>
 8004186:	e8df f003 	tbb	[pc, r3]
 800418a:	0308      	.short	0x0308
 800418c:	08080811 	.word	0x08080811
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004190:	2101      	movs	r1, #1
 8004192:	1d20      	adds	r0, r4, #4
 8004194:	f7ff fc42 	bl	8003a1c <RCCEx_PLL2_Config>
 8004198:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800419a:	b98d      	cbnz	r5, 80041c0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800419c:	4a88      	ldr	r2, [pc, #544]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800419e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80041a0:	f023 0307 	bic.w	r3, r3, #7
 80041a4:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80041a6:	430b      	orrs	r3, r1
 80041a8:	6553      	str	r3, [r2, #84]	; 0x54
 80041aa:	e00a      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x58e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041ac:	2101      	movs	r1, #1
 80041ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80041b2:	f7ff fcb9 	bl	8003b28 <RCCEx_PLL3_Config>
 80041b6:	4605      	mov	r5, r0
      break;
 80041b8:	e7ef      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x566>
      ret = HAL_ERROR;
 80041ba:	2601      	movs	r6, #1
 80041bc:	4635      	mov	r5, r6
 80041be:	e000      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 80041c0:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041c2:	6823      	ldr	r3, [r4, #0]
 80041c4:	f013 0f04 	tst.w	r3, #4
 80041c8:	d022      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80041ca:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80041ce:	2b05      	cmp	r3, #5
 80041d0:	d81a      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80041d2:	e8df f003 	tbb	[pc, r3]
 80041d6:	0308      	.short	0x0308
 80041d8:	08080812 	.word	0x08080812
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041dc:	2101      	movs	r1, #1
 80041de:	1d20      	adds	r0, r4, #4
 80041e0:	f7ff fc1c 	bl	8003a1c <RCCEx_PLL2_Config>
 80041e4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80041e6:	b995      	cbnz	r5, 800420e <HAL_RCCEx_PeriphCLKConfig+0x5da>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041e8:	4a75      	ldr	r2, [pc, #468]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80041ea:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80041ec:	f023 0307 	bic.w	r3, r3, #7
 80041f0:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80041f4:	430b      	orrs	r3, r1
 80041f6:	6593      	str	r3, [r2, #88]	; 0x58
 80041f8:	e00a      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041fa:	2101      	movs	r1, #1
 80041fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004200:	f7ff fc92 	bl	8003b28 <RCCEx_PLL3_Config>
 8004204:	4605      	mov	r5, r0
      break;
 8004206:	e7ee      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
      ret = HAL_ERROR;
 8004208:	2601      	movs	r6, #1
 800420a:	4635      	mov	r5, r6
 800420c:	e000      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
 800420e:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004210:	6823      	ldr	r3, [r4, #0]
 8004212:	f013 0f20 	tst.w	r3, #32
 8004216:	d02c      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004218:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800421c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004220:	d01f      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8004222:	d812      	bhi.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x616>
 8004224:	b13b      	cbz	r3, 8004236 <HAL_RCCEx_PeriphCLKConfig+0x602>
 8004226:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800422a:	d117      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x628>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800422c:	2100      	movs	r1, #0
 800422e:	1d20      	adds	r0, r4, #4
 8004230:	f7ff fbf4 	bl	8003a1c <RCCEx_PLL2_Config>
 8004234:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004236:	b9dd      	cbnz	r5, 8004270 <HAL_RCCEx_PeriphCLKConfig+0x63c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004238:	4a61      	ldr	r2, [pc, #388]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800423a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800423c:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8004240:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8004244:	430b      	orrs	r3, r1
 8004246:	6553      	str	r3, [r2, #84]	; 0x54
 8004248:	e013      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800424a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424e:	d0f2      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x602>
 8004250:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004254:	d0ef      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x602>
 8004256:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800425a:	d0ec      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x602>
      ret = HAL_ERROR;
 800425c:	2601      	movs	r6, #1
 800425e:	4635      	mov	r5, r6
 8004260:	e007      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004262:	2102      	movs	r1, #2
 8004264:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004268:	f7ff fc5e 	bl	8003b28 <RCCEx_PLL3_Config>
 800426c:	4605      	mov	r5, r0
      break;
 800426e:	e7e2      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x602>
 8004270:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004278:	d02c      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800427a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800427e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004282:	d01f      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x690>
 8004284:	d812      	bhi.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004286:	b13b      	cbz	r3, 8004298 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800428c:	d117      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x68a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800428e:	2100      	movs	r1, #0
 8004290:	1d20      	adds	r0, r4, #4
 8004292:	f7ff fbc3 	bl	8003a1c <RCCEx_PLL2_Config>
 8004296:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004298:	b9dd      	cbnz	r5, 80042d2 <HAL_RCCEx_PeriphCLKConfig+0x69e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800429a:	4a49      	ldr	r2, [pc, #292]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800429c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800429e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80042a2:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80042a6:	430b      	orrs	r3, r1
 80042a8:	6593      	str	r3, [r2, #88]	; 0x58
 80042aa:	e013      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80042ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b0:	d0f2      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80042b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80042b6:	d0ef      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80042b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042bc:	d0ec      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x664>
      ret = HAL_ERROR;
 80042be:	2601      	movs	r6, #1
 80042c0:	4635      	mov	r5, r6
 80042c2:	e007      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042c4:	2102      	movs	r1, #2
 80042c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80042ca:	f7ff fc2d 	bl	8003b28 <RCCEx_PLL3_Config>
 80042ce:	4605      	mov	r5, r0
      break;
 80042d0:	e7e2      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80042d2:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80042da:	d02c      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80042dc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80042e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042e4:	d01f      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80042e6:	d812      	bhi.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x6da>
 80042e8:	b13b      	cbz	r3, 80042fa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 80042ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ee:	d117      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042f0:	2100      	movs	r1, #0
 80042f2:	1d20      	adds	r0, r4, #4
 80042f4:	f7ff fb92 	bl	8003a1c <RCCEx_PLL2_Config>
 80042f8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80042fa:	b9dd      	cbnz	r5, 8004334 <HAL_RCCEx_PeriphCLKConfig+0x700>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80042fc:	4a30      	ldr	r2, [pc, #192]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80042fe:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004300:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004304:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8004308:	430b      	orrs	r3, r1
 800430a:	6593      	str	r3, [r2, #88]	; 0x58
 800430c:	e013      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800430e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004312:	d0f2      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8004314:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004318:	d0ef      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 800431a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800431e:	d0ec      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      ret = HAL_ERROR;
 8004320:	2601      	movs	r6, #1
 8004322:	4635      	mov	r5, r6
 8004324:	e007      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x702>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004326:	2102      	movs	r1, #2
 8004328:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800432c:	f7ff fbfc 	bl	8003b28 <RCCEx_PLL3_Config>
 8004330:	4605      	mov	r5, r0
      break;
 8004332:	e7e2      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8004334:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	f013 0f08 	tst.w	r3, #8
 800433c:	d00c      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x724>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800433e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004346:	d028      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x766>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004348:	4a1d      	ldr	r2, [pc, #116]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800434a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800434c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004350:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004354:	430b      	orrs	r3, r1
 8004356:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	f013 0f10 	tst.w	r3, #16
 800435e:	d00c      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x746>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004360:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004368:	d020      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x778>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800436a:	4a15      	ldr	r2, [pc, #84]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800436c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800436e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004372:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8004376:	430b      	orrs	r3, r1
 8004378:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004380:	d039      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    switch(PeriphClkInit->AdcClockSelection)
 8004382:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8004386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800438a:	d02c      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
 800438c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004390:	d01f      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
 8004392:	b1cb      	cbz	r3, 80043c8 <HAL_RCCEx_PeriphCLKConfig+0x794>
      ret = HAL_ERROR;
 8004394:	2601      	movs	r6, #1
 8004396:	4635      	mov	r5, r6
 8004398:	e02d      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800439a:	2102      	movs	r1, #2
 800439c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80043a0:	f7ff fbc2 	bl	8003b28 <RCCEx_PLL3_Config>
 80043a4:	2800      	cmp	r0, #0
 80043a6:	d0cf      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x714>
          status = HAL_ERROR;
 80043a8:	2601      	movs	r6, #1
 80043aa:	e7cd      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x714>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80043ac:	2102      	movs	r1, #2
 80043ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80043b2:	f7ff fbb9 	bl	8003b28 <RCCEx_PLL3_Config>
 80043b6:	2800      	cmp	r0, #0
 80043b8:	d0d7      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x736>
        status = HAL_ERROR;
 80043ba:	2601      	movs	r6, #1
 80043bc:	e7d5      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x736>
 80043be:	bf00      	nop
 80043c0:	58024400 	.word	0x58024400
 80043c4:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043c8:	2100      	movs	r1, #0
 80043ca:	1d20      	adds	r0, r4, #4
 80043cc:	f7ff fb26 	bl	8003a1c <RCCEx_PLL2_Config>
 80043d0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80043d2:	b97d      	cbnz	r5, 80043f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043d4:	4a5e      	ldr	r2, [pc, #376]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80043d6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80043d8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80043dc:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80043e0:	430b      	orrs	r3, r1
 80043e2:	6593      	str	r3, [r2, #88]	; 0x58
 80043e4:	e007      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043e6:	2102      	movs	r1, #2
 80043e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80043ec:	f7ff fb9c 	bl	8003b28 <RCCEx_PLL3_Config>
 80043f0:	4605      	mov	r5, r0
      break;
 80043f2:	e7ee      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
 80043f4:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043f6:	6823      	ldr	r3, [r4, #0]
 80043f8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80043fc:	d024      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x814>
    switch(PeriphClkInit->UsbClockSelection)
 80043fe:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004402:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004406:	d017      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x804>
 8004408:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800440c:	d00a      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
 800440e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004412:	d002      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
      ret = HAL_ERROR;
 8004414:	2601      	movs	r6, #1
 8004416:	4635      	mov	r5, r6
 8004418:	e016      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x814>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800441a:	4a4d      	ldr	r2, [pc, #308]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800441c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800441e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004422:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004424:	b97d      	cbnz	r5, 8004446 <HAL_RCCEx_PeriphCLKConfig+0x812>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004426:	4a4a      	ldr	r2, [pc, #296]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004428:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800442a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800442e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8004432:	430b      	orrs	r3, r1
 8004434:	6553      	str	r3, [r2, #84]	; 0x54
 8004436:	e007      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x814>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004438:	2101      	movs	r1, #1
 800443a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800443e:	f7ff fb73 	bl	8003b28 <RCCEx_PLL3_Config>
 8004442:	4605      	mov	r5, r0
      break;
 8004444:	e7ee      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
 8004446:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004448:	6823      	ldr	r3, [r4, #0]
 800444a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800444e:	d014      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x846>
    switch(PeriphClkInit->SdmmcClockSelection)
 8004450:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004452:	b12b      	cbz	r3, 8004460 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004458:	d023      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x86e>
      ret = HAL_ERROR;
 800445a:	2601      	movs	r6, #1
 800445c:	4635      	mov	r5, r6
 800445e:	e00c      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x846>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004460:	4a3b      	ldr	r2, [pc, #236]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004462:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004468:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800446a:	bb05      	cbnz	r5, 80044ae <HAL_RCCEx_PeriphCLKConfig+0x87a>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800446c:	4a38      	ldr	r2, [pc, #224]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800446e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004474:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004476:	430b      	orrs	r3, r1
 8004478:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004480:	d117      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x87e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004488:	d02d      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
    switch(PeriphClkInit->RngClockSelection)
 800448a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800448c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004490:	d01b      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x896>
 8004492:	d917      	bls.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x890>
 8004494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004498:	d01c      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 800449a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800449e:	d112      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x892>
 80044a0:	e018      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044a2:	2102      	movs	r1, #2
 80044a4:	1d20      	adds	r0, r4, #4
 80044a6:	f7ff fab9 	bl	8003a1c <RCCEx_PLL2_Config>
 80044aa:	4605      	mov	r5, r0
      break;
 80044ac:	e7dd      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x836>
 80044ae:	462e      	mov	r6, r5
 80044b0:	e7e3      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x846>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80044b2:	2102      	movs	r1, #2
 80044b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80044b8:	f7ff fb36 	bl	8003b28 <RCCEx_PLL3_Config>
 80044bc:	2800      	cmp	r0, #0
 80044be:	d0e0      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      status=HAL_ERROR;
 80044c0:	2601      	movs	r6, #1
 80044c2:	e7de      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    switch(PeriphClkInit->RngClockSelection)
 80044c4:	b133      	cbz	r3, 80044d4 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      ret = HAL_ERROR;
 80044c6:	2601      	movs	r6, #1
 80044c8:	e00d      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044ca:	4a21      	ldr	r2, [pc, #132]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80044cc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80044ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044d2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80044d4:	2d00      	cmp	r5, #0
 80044d6:	d131      	bne.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x908>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044d8:	4a1d      	ldr	r2, [pc, #116]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80044da:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80044dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80044e2:	430b      	orrs	r3, r1
 80044e4:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80044ec:	d006      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x8c8>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044ee:	4a18      	ldr	r2, [pc, #96]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80044f0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80044f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044f6:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80044f8:	430b      	orrs	r3, r1
 80044fa:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044fc:	6823      	ldr	r3, [r4, #0]
 80044fe:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004502:	d006      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004504:	4a12      	ldr	r2, [pc, #72]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004506:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004508:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800450c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800450e:	430b      	orrs	r3, r1
 8004510:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004518:	d009      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800451a:	4b0d      	ldr	r3, [pc, #52]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800451c:	691a      	ldr	r2, [r3, #16]
 800451e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004522:	611a      	str	r2, [r3, #16]
 8004524:	691a      	ldr	r2, [r3, #16]
 8004526:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 800452a:	430a      	orrs	r2, r1
 800452c:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	db05      	blt.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x90c>
  if (status == HAL_OK)
 8004534:	b106      	cbz	r6, 8004538 <HAL_RCCEx_PeriphCLKConfig+0x904>
  return HAL_ERROR;
 8004536:	2601      	movs	r6, #1
}
 8004538:	4630      	mov	r0, r6
 800453a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800453c:	462e      	mov	r6, r5
 800453e:	e7d2      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004540:	4a03      	ldr	r2, [pc, #12]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004542:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004544:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004548:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800454a:	430b      	orrs	r3, r1
 800454c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800454e:	e7f1      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x900>
 8004550:	58024400 	.word	0x58024400

08004554 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8004554:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004556:	f7ff fa3f 	bl	80039d8 <HAL_RCC_GetHCLKFreq>
 800455a:	4b05      	ldr	r3, [pc, #20]	; (8004570 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004562:	4a04      	ldr	r2, [pc, #16]	; (8004574 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8004564:	5cd3      	ldrb	r3, [r2, r3]
 8004566:	f003 031f 	and.w	r3, r3, #31
}
 800456a:	40d8      	lsrs	r0, r3
 800456c:	bd08      	pop	{r3, pc}
 800456e:	bf00      	nop
 8004570:	58024400 	.word	0x58024400
 8004574:	0800d304 	.word	0x0800d304

08004578 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8004578:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800457a:	4978      	ldr	r1, [pc, #480]	; (800475c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800457c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800457e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004580:	f3c2 3205 	ubfx	r2, r2, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004584:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8004586:	f3c3 1300 	ubfx	r3, r3, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800458a:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800458c:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8004590:	fb03 f301 	mul.w	r3, r3, r1
  if (pll2m != 0U)
 8004594:	2a00      	cmp	r2, #0
 8004596:	f000 80db 	beq.w	8004750 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>
 800459a:	f004 0403 	and.w	r4, r4, #3
 800459e:	ee07 3a90 	vmov	s15, r3
 80045a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 80045a6:	2c01      	cmp	r4, #1
 80045a8:	d066      	beq.n	8004678 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 80045aa:	b1fc      	cbz	r4, 80045ec <HAL_RCCEx_GetPLL2ClockFreq+0x74>
 80045ac:	2c02      	cmp	r4, #2
 80045ae:	f000 80b2 	beq.w	8004716 <HAL_RCCEx_GetPLL2ClockFreq+0x19e>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045b2:	ee07 2a10 	vmov	s14, r2
 80045b6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80045ba:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80045be:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80045c2:	4b66      	ldr	r3, [pc, #408]	; (800475c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80045c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ca:	ee07 3a10 	vmov	s14, r3
 80045ce:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80045d2:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8004764 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80045d6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80045da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80045ea:	e061      	b.n	80046b0 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045ec:	4b5b      	ldr	r3, [pc, #364]	; (800475c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f013 0f20 	tst.w	r3, #32
 80045f4:	d023      	beq.n	800463e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045f6:	4c59      	ldr	r4, [pc, #356]	; (800475c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80045f8:	6821      	ldr	r1, [r4, #0]
 80045fa:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80045fe:	4b5a      	ldr	r3, [pc, #360]	; (8004768 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 8004600:	40cb      	lsrs	r3, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004602:	ee07 3a10 	vmov	s14, r3
 8004606:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800460a:	ee06 2a90 	vmov	s13, r2
 800460e:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8004612:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8004616:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800461c:	ee07 3a10 	vmov	s14, r3
 8004620:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004624:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8004764 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004628:	ee67 7a86 	vmul.f32	s15, s15, s12
 800462c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004630:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004634:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004638:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800463c:	e038      	b.n	80046b0 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800463e:	ee07 2a10 	vmov	s14, r2
 8004642:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004646:	ed9f 6a49 	vldr	s12, [pc, #292]	; 800476c <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 800464a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800464e:	4b43      	ldr	r3, [pc, #268]	; (800475c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004656:	ee07 3a10 	vmov	s14, r3
 800465a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800465e:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8004764 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004662:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800466a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800466e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004672:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004676:	e01b      	b.n	80046b0 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004678:	ee07 2a10 	vmov	s14, r2
 800467c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004680:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8004760 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8004684:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004688:	4b34      	ldr	r3, [pc, #208]	; (800475c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800468a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004690:	ee07 3a10 	vmov	s14, r3
 8004694:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004698:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8004764 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800469c:	ee67 7a86 	vmul.f32	s15, s15, s12
 80046a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80046b0:	4a2a      	ldr	r2, [pc, #168]	; (800475c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80046b2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80046b4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80046b8:	ee07 3a10 	vmov	s14, r3
 80046bc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80046c0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80046c4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80046c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046d0:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80046d4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80046d6:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80046da:	ee07 3a10 	vmov	s14, r3
 80046de:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80046e2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80046e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ee:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80046f2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80046f4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80046f8:	ee07 3a90 	vmov	s15, r3
 80046fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004700:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004704:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004708:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800470c:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8004710:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004714:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004716:	ee07 2a10 	vmov	s14, r2
 800471a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800471e:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 8004722:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004726:	4b0d      	ldr	r3, [pc, #52]	; (800475c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800472e:	ee07 3a10 	vmov	s14, r3
 8004732:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004736:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8004764 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800473a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800473e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004742:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004746:	ee77 7a87 	vadd.f32	s15, s15, s14
 800474a:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 800474e:	e7af      	b.n	80046b0 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004754:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004756:	6083      	str	r3, [r0, #8]
}
 8004758:	e7da      	b.n	8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x198>
 800475a:	bf00      	nop
 800475c:	58024400 	.word	0x58024400
 8004760:	4a742400 	.word	0x4a742400
 8004764:	39000000 	.word	0x39000000
 8004768:	03d09000 	.word	0x03d09000
 800476c:	4c742400 	.word	0x4c742400
 8004770:	4bbebc20 	.word	0x4bbebc20

08004774 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8004774:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004776:	4978      	ldr	r1, [pc, #480]	; (8004958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004778:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800477a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800477c:	f3c2 5205 	ubfx	r2, r2, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004780:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8004782:	f3c3 2300 	ubfx	r3, r3, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004786:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004788:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 800478c:	fb03 f301 	mul.w	r3, r3, r1
  if (pll3m != 0U)
 8004790:	2a00      	cmp	r2, #0
 8004792:	f000 80db 	beq.w	800494c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
 8004796:	f004 0403 	and.w	r4, r4, #3
 800479a:	ee07 3a90 	vmov	s15, r3
 800479e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 80047a2:	2c01      	cmp	r4, #1
 80047a4:	d066      	beq.n	8004874 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 80047a6:	b1fc      	cbz	r4, 80047e8 <HAL_RCCEx_GetPLL3ClockFreq+0x74>
 80047a8:	2c02      	cmp	r4, #2
 80047aa:	f000 80b2 	beq.w	8004912 <HAL_RCCEx_GetPLL3ClockFreq+0x19e>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047ae:	ee07 2a10 	vmov	s14, r2
 80047b2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80047b6:	ed9f 6a69 	vldr	s12, [pc, #420]	; 800495c <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 80047ba:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80047be:	4b66      	ldr	r3, [pc, #408]	; (8004958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c6:	ee07 3a10 	vmov	s14, r3
 80047ca:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80047ce:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8004960 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 80047d2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80047d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80047e6:	e061      	b.n	80048ac <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047e8:	4b5b      	ldr	r3, [pc, #364]	; (8004958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f013 0f20 	tst.w	r3, #32
 80047f0:	d023      	beq.n	800483a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80047f2:	4c59      	ldr	r4, [pc, #356]	; (8004958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80047f4:	6821      	ldr	r1, [r4, #0]
 80047f6:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80047fa:	4b5a      	ldr	r3, [pc, #360]	; (8004964 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 80047fc:	40cb      	lsrs	r3, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047fe:	ee07 3a10 	vmov	s14, r3
 8004802:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004806:	ee06 2a90 	vmov	s13, r2
 800480a:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 800480e:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8004812:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004818:	ee07 3a10 	vmov	s14, r3
 800481c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004820:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8004960 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004824:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800482c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004830:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004834:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004838:	e038      	b.n	80048ac <HAL_RCCEx_GetPLL3ClockFreq+0x138>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800483a:	ee07 2a10 	vmov	s14, r2
 800483e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004842:	ed9f 6a49 	vldr	s12, [pc, #292]	; 8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 8004846:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800484a:	4b43      	ldr	r3, [pc, #268]	; (8004958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004852:	ee07 3a10 	vmov	s14, r3
 8004856:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800485a:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8004960 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800485e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004866:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800486a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800486e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004872:	e01b      	b.n	80048ac <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004874:	ee07 2a10 	vmov	s14, r2
 8004878:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800487c:	ed9f 6a37 	vldr	s12, [pc, #220]	; 800495c <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8004880:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004884:	4b34      	ldr	r3, [pc, #208]	; (8004958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800488c:	ee07 3a10 	vmov	s14, r3
 8004890:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004894:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8004960 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004898:	ee67 7a86 	vmul.f32	s15, s15, s12
 800489c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80048ac:	4a2a      	ldr	r2, [pc, #168]	; (8004958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80048ae:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80048b0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80048b4:	ee07 3a10 	vmov	s14, r3
 80048b8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80048bc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80048c0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80048c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048cc:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80048d0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80048d2:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80048d6:	ee07 3a10 	vmov	s14, r3
 80048da:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80048de:	ee37 7a06 	vadd.f32	s14, s14, s12
 80048e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048ea:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80048ee:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80048f0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80048f4:	ee07 3a90 	vmov	s15, r3
 80048f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048fc:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004900:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004904:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004908:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800490c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004910:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004912:	ee07 2a10 	vmov	s14, r2
 8004916:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800491a:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800496c <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 800491e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004922:	4b0d      	ldr	r3, [pc, #52]	; (8004958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800492a:	ee07 3a10 	vmov	s14, r3
 800492e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004932:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8004960 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004936:	ee67 7a86 	vmul.f32	s15, s15, s12
 800493a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800493e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004942:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004946:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 800494a:	e7af      	b.n	80048ac <HAL_RCCEx_GetPLL3ClockFreq+0x138>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004950:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004952:	6083      	str	r3, [r0, #8]
}
 8004954:	e7da      	b.n	800490c <HAL_RCCEx_GetPLL3ClockFreq+0x198>
 8004956:	bf00      	nop
 8004958:	58024400 	.word	0x58024400
 800495c:	4a742400 	.word	0x4a742400
 8004960:	39000000 	.word	0x39000000
 8004964:	03d09000 	.word	0x03d09000
 8004968:	4c742400 	.word	0x4c742400
 800496c:	4bbebc20 	.word	0x4bbebc20

08004970 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 8004970:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004972:	4978      	ldr	r1, [pc, #480]	; (8004b54 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004974:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8004976:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004978:	f3c2 1205 	ubfx	r2, r2, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800497c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800497e:	f003 0301 	and.w	r3, r3, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004982:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004984:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8004988:	fb03 f301 	mul.w	r3, r3, r1
  if (pll1m != 0U)
 800498c:	2a00      	cmp	r2, #0
 800498e:	f000 80db 	beq.w	8004b48 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
 8004992:	f004 0403 	and.w	r4, r4, #3
 8004996:	ee07 3a90 	vmov	s15, r3
 800499a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 800499e:	2c01      	cmp	r4, #1
 80049a0:	d066      	beq.n	8004a70 <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 80049a2:	b1fc      	cbz	r4, 80049e4 <HAL_RCCEx_GetPLL1ClockFreq+0x74>
 80049a4:	2c02      	cmp	r4, #2
 80049a6:	f000 80b2 	beq.w	8004b0e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049aa:	ee07 2a10 	vmov	s14, r2
 80049ae:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80049b2:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8004b58 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 80049b6:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80049ba:	4b66      	ldr	r3, [pc, #408]	; (8004b54 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c2:	ee07 3a10 	vmov	s14, r3
 80049c6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80049ca:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8004b5c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 80049ce:	ee67 7a86 	vmul.f32	s15, s15, s12
 80049d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049de:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80049e2:	e061      	b.n	8004aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049e4:	4b5b      	ldr	r3, [pc, #364]	; (8004b54 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f013 0f20 	tst.w	r3, #32
 80049ec:	d023      	beq.n	8004a36 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80049ee:	4c59      	ldr	r4, [pc, #356]	; (8004b54 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80049f0:	6821      	ldr	r1, [r4, #0]
 80049f2:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80049f6:	4b5a      	ldr	r3, [pc, #360]	; (8004b60 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>)
 80049f8:	40cb      	lsrs	r3, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049fa:	ee07 3a10 	vmov	s14, r3
 80049fe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004a02:	ee06 2a90 	vmov	s13, r2
 8004a06:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8004a0a:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8004a0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a14:	ee07 3a10 	vmov	s14, r3
 8004a18:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004a1c:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8004b5c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8004a20:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004a34:	e038      	b.n	8004aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a36:	ee07 2a10 	vmov	s14, r2
 8004a3a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004a3e:	ed9f 6a49 	vldr	s12, [pc, #292]	; 8004b64 <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 8004a42:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004a46:	4b43      	ldr	r3, [pc, #268]	; (8004b54 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a4e:	ee07 3a10 	vmov	s14, r3
 8004a52:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004a56:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8004b5c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8004a5a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a6a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004a6e:	e01b      	b.n	8004aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a70:	ee07 2a10 	vmov	s14, r2
 8004a74:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004a78:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8004b58 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8004a7c:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004a80:	4b34      	ldr	r3, [pc, #208]	; (8004b54 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a88:	ee07 3a10 	vmov	s14, r3
 8004a8c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004a90:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8004b5c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8004a94:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004aa0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004aa4:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8004aa8:	4a2a      	ldr	r2, [pc, #168]	; (8004b54 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004aaa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004aac:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004ab0:	ee07 3a10 	vmov	s14, r3
 8004ab4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004ab8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004abc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ac8:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8004acc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004ace:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004ad2:	ee07 3a10 	vmov	s14, r3
 8004ad6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004ada:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004ade:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ae6:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8004aea:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004aec:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004af0:	ee07 3a90 	vmov	s15, r3
 8004af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af8:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004afc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b00:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004b04:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8004b08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b0c:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b0e:	ee07 2a10 	vmov	s14, r2
 8004b12:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004b16:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8004b68 <HAL_RCCEx_GetPLL1ClockFreq+0x1f8>
 8004b1a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004b1e:	4b0d      	ldr	r3, [pc, #52]	; (8004b54 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b26:	ee07 3a10 	vmov	s14, r3
 8004b2a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004b2e:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8004b5c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8004b32:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b42:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8004b46:	e7af      	b.n	8004aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004b4c:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004b4e:	6083      	str	r3, [r0, #8]
}
 8004b50:	e7da      	b.n	8004b08 <HAL_RCCEx_GetPLL1ClockFreq+0x198>
 8004b52:	bf00      	nop
 8004b54:	58024400 	.word	0x58024400
 8004b58:	4a742400 	.word	0x4a742400
 8004b5c:	39000000 	.word	0x39000000
 8004b60:	03d09000 	.word	0x03d09000
 8004b64:	4c742400 	.word	0x4c742400
 8004b68:	4bbebc20 	.word	0x4bbebc20

08004b6c <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8004b6c:	b500      	push	{lr}
 8004b6e:	b08b      	sub	sp, #44	; 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004b70:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8004b74:	d01b      	beq.n	8004bae <HAL_RCCEx_GetPeriphCLKFreq+0x42>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004b76:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004b7a:	d048      	beq.n	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004b7c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004b80:	d078      	beq.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004b82:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8004b86:	f000 80ab 	beq.w	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004b8a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8004b8e:	f000 80dd 	beq.w	8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004b92:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8004b96:	f000 810f 	beq.w	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004b9a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8004b9e:	f000 8131 	beq.w	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004ba2:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8004ba6:	f000 8145 	beq.w	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
      frequency = 0;
 8004baa:	2000      	movs	r0, #0
 8004bac:	e00c      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004bae:	4b9e      	ldr	r3, [pc, #632]	; (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb2:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	f200 8164 	bhi.w	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8004bbc:	e8df f003 	tbb	[pc, r3]
 8004bc0:	03110c07 	.word	0x03110c07
 8004bc4:	16          	.byte	0x16
 8004bc5:	00          	.byte	0x00
          frequency = EXTERNAL_CLOCK_VALUE;
 8004bc6:	4899      	ldr	r0, [pc, #612]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
}
 8004bc8:	b00b      	add	sp, #44	; 0x2c
 8004bca:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004bce:	a807      	add	r0, sp, #28
 8004bd0:	f7ff fece 	bl	8004970 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004bd4:	9808      	ldr	r0, [sp, #32]
          break;
 8004bd6:	e7f7      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bd8:	a804      	add	r0, sp, #16
 8004bda:	f7ff fccd 	bl	8004578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004bde:	9804      	ldr	r0, [sp, #16]
          break;
 8004be0:	e7f2      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004be2:	a801      	add	r0, sp, #4
 8004be4:	f7ff fdc6 	bl	8004774 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004be8:	9801      	ldr	r0, [sp, #4]
          break;
 8004bea:	e7ed      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004bec:	4b8e      	ldr	r3, [pc, #568]	; (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004bf0:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004bf4:	f000 8148 	beq.w	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004bf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bfc:	f000 8146 	beq.w	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c04:	d001      	beq.n	8004c0a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = 0;
 8004c06:	2000      	movs	r0, #0
 8004c08:	e7de      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8004c0a:	4889      	ldr	r0, [pc, #548]	; (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004c0c:	e7dc      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8004c0e:	4b86      	ldr	r3, [pc, #536]	; (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c12:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8004c16:	2b80      	cmp	r3, #128	; 0x80
 8004c18:	d025      	beq.n	8004c66 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8004c1a:	d808      	bhi.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 8004c1c:	b1f3      	cbz	r3, 8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8004c1e:	2b40      	cmp	r3, #64	; 0x40
 8004c20:	f040 8136 	bne.w	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c24:	a804      	add	r0, sp, #16
 8004c26:	f7ff fca7 	bl	8004578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004c2a:	9804      	ldr	r0, [sp, #16]
          break;
 8004c2c:	e7cc      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (saiclocksource)
 8004c2e:	2bc0      	cmp	r3, #192	; 0xc0
 8004c30:	d012      	beq.n	8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c36:	f040 812b 	bne.w	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004c3a:	4b7b      	ldr	r3, [pc, #492]	; (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004c3e:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004c42:	f000 8127 	beq.w	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004c46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c4a:	f000 8125 	beq.w	8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004c4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c52:	d00d      	beq.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            frequency = 0;
 8004c54:	2000      	movs	r0, #0
 8004c56:	e7b7      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c58:	4874      	ldr	r0, [pc, #464]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004c5a:	e7b5      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c5c:	a807      	add	r0, sp, #28
 8004c5e:	f7ff fe87 	bl	8004970 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c62:	9808      	ldr	r0, [sp, #32]
          break;
 8004c64:	e7b0      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c66:	a801      	add	r0, sp, #4
 8004c68:	f7ff fd84 	bl	8004774 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004c6c:	9801      	ldr	r0, [sp, #4]
          break;
 8004c6e:	e7ab      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8004c70:	486f      	ldr	r0, [pc, #444]	; (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004c72:	e7a9      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004c74:	4b6c      	ldr	r3, [pc, #432]	; (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c78:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8004c7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c80:	d027      	beq.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004c82:	d809      	bhi.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004c84:	b303      	cbz	r3, 8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 8004c86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c8a:	f040 8107 	bne.w	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c8e:	a804      	add	r0, sp, #16
 8004c90:	f7ff fc72 	bl	8004578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004c94:	9804      	ldr	r0, [sp, #16]
          break;
 8004c96:	e797      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (saiclocksource)
 8004c98:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c9c:	d012      	beq.n	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004c9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ca2:	f040 80fb 	bne.w	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004ca6:	4b60      	ldr	r3, [pc, #384]	; (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004caa:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004cae:	f000 80f7 	beq.w	8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004cb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cb6:	f000 80f5 	beq.w	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004cba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cbe:	d00d      	beq.n	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x170>
            frequency = 0;
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	e781      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004cc4:	4859      	ldr	r0, [pc, #356]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004cc6:	e77f      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004cc8:	a807      	add	r0, sp, #28
 8004cca:	f7ff fe51 	bl	8004970 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004cce:	9808      	ldr	r0, [sp, #32]
          break;
 8004cd0:	e77a      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cd2:	a801      	add	r0, sp, #4
 8004cd4:	f7ff fd4e 	bl	8004774 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004cd8:	9801      	ldr	r0, [sp, #4]
          break;
 8004cda:	e775      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8004cdc:	4854      	ldr	r0, [pc, #336]	; (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004cde:	e773      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004ce0:	4b51      	ldr	r3, [pc, #324]	; (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8004ce8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cec:	d027      	beq.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
 8004cee:	d809      	bhi.n	8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8004cf0:	b303      	cbz	r3, 8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 8004cf2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cf6:	f040 80d7 	bne.w	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cfa:	a804      	add	r0, sp, #16
 8004cfc:	f7ff fc3c 	bl	8004578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004d00:	9804      	ldr	r0, [sp, #16]
          break;
 8004d02:	e761      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (saiclocksource)
 8004d04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d08:	d012      	beq.n	8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8004d0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d0e:	f040 80cb 	bne.w	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004d12:	4b45      	ldr	r3, [pc, #276]	; (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004d16:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004d1a:	f000 80c7 	beq.w	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x340>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004d1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d22:	f000 80c5 	beq.w	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004d26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d2a:	d00d      	beq.n	8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
            frequency = 0;
 8004d2c:	2000      	movs	r0, #0
 8004d2e:	e74b      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d30:	483e      	ldr	r0, [pc, #248]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004d32:	e749      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d34:	a807      	add	r0, sp, #28
 8004d36:	f7ff fe1b 	bl	8004970 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d3a:	9808      	ldr	r0, [sp, #32]
          break;
 8004d3c:	e744      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d3e:	a801      	add	r0, sp, #4
 8004d40:	f7ff fd18 	bl	8004774 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004d44:	9801      	ldr	r0, [sp, #4]
          break;
 8004d46:	e73f      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8004d48:	4839      	ldr	r0, [pc, #228]	; (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004d4a:	e73d      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004d4c:	4b36      	ldr	r3, [pc, #216]	; (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d50:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8004d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d58:	d027      	beq.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8004d5a:	d809      	bhi.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 8004d5c:	b303      	cbz	r3, 8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8004d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d62:	f040 80a7 	bne.w	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d66:	a804      	add	r0, sp, #16
 8004d68:	f7ff fc06 	bl	8004578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004d6c:	9804      	ldr	r0, [sp, #16]
          break;
 8004d6e:	e72b      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (srcclk)
 8004d70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d74:	d012      	beq.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8004d76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d7a:	f040 809b 	bne.w	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004d7e:	4b2a      	ldr	r3, [pc, #168]	; (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004d82:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004d86:	f000 8097 	beq.w	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004d8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d8e:	f000 8095 	beq.w	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0x350>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004d92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d96:	d00d      	beq.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
            frequency = 0;
 8004d98:	2000      	movs	r0, #0
 8004d9a:	e715      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d9c:	4823      	ldr	r0, [pc, #140]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004d9e:	e713      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004da0:	a807      	add	r0, sp, #28
 8004da2:	f7ff fde5 	bl	8004970 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004da6:	9808      	ldr	r0, [sp, #32]
          break;
 8004da8:	e70e      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004daa:	a801      	add	r0, sp, #4
 8004dac:	f7ff fce2 	bl	8004774 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004db0:	9801      	ldr	r0, [sp, #4]
          break;
 8004db2:	e709      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8004db4:	481e      	ldr	r0, [pc, #120]	; (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004db6:	e707      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004db8:	4b1b      	ldr	r3, [pc, #108]	; (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8004dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc4:	d00a      	beq.n	8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x270>
 8004dc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dca:	d00c      	beq.n	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8004dcc:	b10b      	cbz	r3, 8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
          frequency = 0;
 8004dce:	2000      	movs	r0, #0
 8004dd0:	e6fa      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dd2:	a804      	add	r0, sp, #16
 8004dd4:	f7ff fbd0 	bl	8004578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004dd8:	9804      	ldr	r0, [sp, #16]
          break;
 8004dda:	e6f5      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ddc:	a801      	add	r0, sp, #4
 8004dde:	f7ff fcc9 	bl	8004774 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004de2:	9803      	ldr	r0, [sp, #12]
          break;
 8004de4:	e6f0      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004de6:	4b10      	ldr	r3, [pc, #64]	; (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004dea:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004dee:	d067      	beq.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004df0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004df4:	d066      	beq.n	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004df6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dfa:	d001      	beq.n	8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
            frequency = 0;
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	e6e3      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8004e00:	480b      	ldr	r0, [pc, #44]	; (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004e02:	e6e1      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004e04:	4b08      	ldr	r3, [pc, #32]	; (8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 8004e08:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8004e0c:	d002      	beq.n	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
 8004e0e:	b933      	cbnz	r3, 8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
          frequency = 0;
 8004e10:	2000      	movs	r0, #0
 8004e12:	e6d9      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e14:	a807      	add	r0, sp, #28
 8004e16:	f7ff fdab 	bl	8004970 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e1a:	9808      	ldr	r0, [sp, #32]
          break;
 8004e1c:	e6d4      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e1e:	a804      	add	r0, sp, #16
 8004e20:	f7ff fbaa 	bl	8004578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004e24:	9806      	ldr	r0, [sp, #24]
          break;
 8004e26:	e6cf      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8004e28:	58024400 	.word	0x58024400
 8004e2c:	00bb8000 	.word	0x00bb8000
 8004e30:	017d7840 	.word	0x017d7840
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004e34:	4b25      	ldr	r3, [pc, #148]	; (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8004e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e38:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8004e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e40:	d019      	beq.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
 8004e42:	d90a      	bls.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
 8004e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e48:	d03e      	beq.n	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8004e4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e4e:	d017      	beq.n	8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8004e50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e54:	d00a      	beq.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x300>
          frequency = 0;
 8004e56:	2000      	movs	r0, #0
          break;
 8004e58:	e6b6      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (srcclk)
 8004e5a:	b14b      	cbz	r3, 8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8004e5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e60:	d1f9      	bne.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e62:	a804      	add	r0, sp, #16
 8004e64:	f7ff fb88 	bl	8004578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004e68:	9805      	ldr	r0, [sp, #20]
          break;
 8004e6a:	e6ad      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = HSI_VALUE;
 8004e6c:	4818      	ldr	r0, [pc, #96]	; (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8004e6e:	e6ab      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004e70:	f7ff fb70 	bl	8004554 <HAL_RCCEx_GetD3PCLK1Freq>
          break;
 8004e74:	e6a8      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e76:	a801      	add	r0, sp, #4
 8004e78:	f7ff fc7c 	bl	8004774 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004e7c:	9802      	ldr	r0, [sp, #8]
          break;
 8004e7e:	e6a3      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = HSE_VALUE;
 8004e80:	4814      	ldr	r0, [pc, #80]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
          break;
 8004e82:	e6a1      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 8004e84:	2000      	movs	r0, #0
 8004e86:	e69f      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8004e88:	4811      	ldr	r0, [pc, #68]	; (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8004e8a:	e69d      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8004e8c:	4812      	ldr	r0, [pc, #72]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8004e8e:	e69b      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 8004e90:	2000      	movs	r0, #0
 8004e92:	e699      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8004e94:	480e      	ldr	r0, [pc, #56]	; (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8004e96:	e697      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8004e98:	480f      	ldr	r0, [pc, #60]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8004e9a:	e695      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	e693      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8004ea0:	480b      	ldr	r0, [pc, #44]	; (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8004ea2:	e691      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8004ea4:	480c      	ldr	r0, [pc, #48]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8004ea6:	e68f      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	e68d      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8004eac:	4808      	ldr	r0, [pc, #32]	; (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8004eae:	e68b      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8004eb0:	4809      	ldr	r0, [pc, #36]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8004eb2:	e689      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	e687      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8004eb8:	4805      	ldr	r0, [pc, #20]	; (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8004eba:	e685      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8004ebc:	4806      	ldr	r0, [pc, #24]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8004ebe:	e683      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8004ec0:	4803      	ldr	r0, [pc, #12]	; (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8004ec2:	e681      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8004ec4:	4804      	ldr	r0, [pc, #16]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8004ec6:	e67f      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = CSI_VALUE;
 8004ec8:	4803      	ldr	r0, [pc, #12]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
  return frequency;
 8004eca:	e67d      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8004ecc:	58024400 	.word	0x58024400
 8004ed0:	03d09000 	.word	0x03d09000
 8004ed4:	017d7840 	.word	0x017d7840
 8004ed8:	003d0900 	.word	0x003d0900

08004edc <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004edc:	2800      	cmp	r0, #0
 8004ede:	d036      	beq.n	8004f4e <HAL_RNG_Init+0x72>
{
 8004ee0:	b538      	push	{r3, r4, r5, lr}
 8004ee2:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004ee4:	7a43      	ldrb	r3, [r0, #9]
 8004ee6:	b1b3      	cbz	r3, 8004f16 <HAL_RNG_Init+0x3a>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004ee8:	2302      	movs	r3, #2
 8004eea:	7263      	strb	r3, [r4, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8004eec:	6822      	ldr	r2, [r4, #0]
 8004eee:	6813      	ldr	r3, [r2, #0]
 8004ef0:	f023 0320 	bic.w	r3, r3, #32
 8004ef4:	6861      	ldr	r1, [r4, #4]
 8004ef6:	430b      	orrs	r3, r1
 8004ef8:	6013      	str	r3, [r2, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004efa:	6822      	ldr	r2, [r4, #0]
 8004efc:	6813      	ldr	r3, [r2, #0]
 8004efe:	f043 0304 	orr.w	r3, r3, #4
 8004f02:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004f04:	6823      	ldr	r3, [r4, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004f0c:	d007      	beq.n	8004f1e <HAL_RNG_Init+0x42>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8004f0e:	2304      	movs	r3, #4
 8004f10:	7263      	strb	r3, [r4, #9]
    return HAL_ERROR;
 8004f12:	2001      	movs	r0, #1
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 8004f14:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 8004f16:	7203      	strb	r3, [r0, #8]
    HAL_RNG_MspInit(hrng);
 8004f18:	f004 f8b0 	bl	800907c <HAL_RNG_MspInit>
 8004f1c:	e7e4      	b.n	8004ee8 <HAL_RNG_Init+0xc>
  tickstart = HAL_GetTick();
 8004f1e:	f7fb fb4b 	bl	80005b8 <HAL_GetTick>
 8004f22:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004f24:	6823      	ldr	r3, [r4, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f013 0f04 	tst.w	r3, #4
 8004f2c:	d00a      	beq.n	8004f44 <HAL_RNG_Init+0x68>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004f2e:	f7fb fb43 	bl	80005b8 <HAL_GetTick>
 8004f32:	1b40      	subs	r0, r0, r5
 8004f34:	2802      	cmp	r0, #2
 8004f36:	d9f5      	bls.n	8004f24 <HAL_RNG_Init+0x48>
      hrng->State = HAL_RNG_STATE_ERROR;
 8004f38:	2304      	movs	r3, #4
 8004f3a:	7263      	strb	r3, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	60e3      	str	r3, [r4, #12]
      return HAL_ERROR;
 8004f40:	2001      	movs	r0, #1
 8004f42:	e7e7      	b.n	8004f14 <HAL_RNG_Init+0x38>
  hrng->State = HAL_RNG_STATE_READY;
 8004f44:	2301      	movs	r3, #1
 8004f46:	7263      	strb	r3, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004f48:	2000      	movs	r0, #0
 8004f4a:	60e0      	str	r0, [r4, #12]
  return HAL_OK;
 8004f4c:	e7e2      	b.n	8004f14 <HAL_RNG_Init+0x38>
    return HAL_ERROR;
 8004f4e:	2001      	movs	r0, #1
}
 8004f50:	4770      	bx	lr

08004f52 <HAL_RNG_GenerateRandomNumber>:
{
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004f52:	7a03      	ldrb	r3, [r0, #8]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d02b      	beq.n	8004fb0 <HAL_RNG_GenerateRandomNumber+0x5e>
{
 8004f58:	b570      	push	{r4, r5, r6, lr}
 8004f5a:	460d      	mov	r5, r1
 8004f5c:	4604      	mov	r4, r0
  __HAL_LOCK(hrng);
 8004f5e:	2301      	movs	r3, #1
 8004f60:	7203      	strb	r3, [r0, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004f62:	7a43      	ldrb	r3, [r0, #9]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d005      	beq.n	8004f76 <HAL_RNG_GenerateRandomNumber+0x24>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004f6a:	2304      	movs	r3, #4
 8004f6c:	60c3      	str	r3, [r0, #12]
    status = HAL_ERROR;
 8004f6e:	2001      	movs	r0, #1
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004f70:	2300      	movs	r3, #0
 8004f72:	7223      	strb	r3, [r4, #8]

  return status;
}
 8004f74:	bd70      	pop	{r4, r5, r6, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8004f76:	2302      	movs	r3, #2
 8004f78:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 8004f7a:	f7fb fb1d 	bl	80005b8 <HAL_GetTick>
 8004f7e:	4606      	mov	r6, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	f012 0f01 	tst.w	r2, #1
 8004f88:	d10b      	bne.n	8004fa2 <HAL_RNG_GenerateRandomNumber+0x50>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004f8a:	f7fb fb15 	bl	80005b8 <HAL_GetTick>
 8004f8e:	1b80      	subs	r0, r0, r6
 8004f90:	2802      	cmp	r0, #2
 8004f92:	d9f5      	bls.n	8004f80 <HAL_RNG_GenerateRandomNumber+0x2e>
        hrng->State = HAL_RNG_STATE_READY;
 8004f94:	2001      	movs	r0, #1
 8004f96:	7260      	strb	r0, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004f98:	2302      	movs	r3, #2
 8004f9a:	60e3      	str	r3, [r4, #12]
        __HAL_UNLOCK(hrng);
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	7223      	strb	r3, [r4, #8]
        return HAL_ERROR;
 8004fa0:	e7e8      	b.n	8004f74 <HAL_RNG_GenerateRandomNumber+0x22>
    hrng->RandomNumber = hrng->Instance->DR;
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 8004fa6:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	7263      	strb	r3, [r4, #9]
  HAL_StatusTypeDef status = HAL_OK;
 8004fac:	2000      	movs	r0, #0
 8004fae:	e7df      	b.n	8004f70 <HAL_RNG_GenerateRandomNumber+0x1e>
  __HAL_LOCK(hrng);
 8004fb0:	2002      	movs	r0, #2
}
 8004fb2:	4770      	bx	lr

08004fb4 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004fb4:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004fb6:	2400      	movs	r4, #0
 8004fb8:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004fba:	64c4      	str	r4, [r0, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004fbc:	6845      	ldr	r5, [r0, #4]
 8004fbe:	2d02      	cmp	r5, #2
 8004fc0:	bf14      	ite	ne
 8004fc2:	2400      	movne	r4, #0
 8004fc4:	2401      	moveq	r4, #1
 8004fc6:	2d00      	cmp	r5, #0
 8004fc8:	bf08      	it	eq
 8004fca:	2401      	moveq	r4, #1
 8004fcc:	b1c4      	cbz	r4, 8005000 <SAI_InitI2S+0x4c>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004fce:	2400      	movs	r4, #0
 8004fd0:	6504      	str	r4, [r0, #80]	; 0x50
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8004fd2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8004fd6:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004fd8:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8004fdc:	6744      	str	r4, [r0, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8004fde:	2400      	movs	r4, #0
 8004fe0:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8004fe2:	6703      	str	r3, [r0, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8004fe4:	f013 0f01 	tst.w	r3, #1
 8004fe8:	d14b      	bne.n	8005082 <SAI_InitI2S+0xce>
  {
    return HAL_ERROR;
  }

  if (protocol == SAI_I2S_STANDARD)
 8004fea:	b961      	cbnz	r1, 8005006 <SAI_InitI2S+0x52>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004fec:	6604      	str	r4, [r0, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8004fee:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8004ff2:	6644      	str	r4, [r0, #100]	; 0x64
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
  }

  /* Frame definition */
  switch (datasize)
 8004ff4:	2a03      	cmp	r2, #3
 8004ff6:	d83f      	bhi.n	8005078 <SAI_InitI2S+0xc4>
 8004ff8:	e8df f002 	tbb	[pc, r2]
 8004ffc:	33281e0b 	.word	0x33281e0b
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005000:	2401      	movs	r4, #1
 8005002:	6504      	str	r4, [r0, #80]	; 0x50
 8005004:	e7e5      	b.n	8004fd2 <SAI_InitI2S+0x1e>
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8005006:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 800500a:	6604      	str	r4, [r0, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800500c:	2400      	movs	r4, #0
 800500e:	6644      	str	r4, [r0, #100]	; 0x64
 8005010:	e7f0      	b.n	8004ff4 <SAI_InitI2S+0x40>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005012:	2480      	movs	r4, #128	; 0x80
 8005014:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8005016:	085b      	lsrs	r3, r3, #1
 8005018:	015c      	lsls	r4, r3, #5
 800501a:	6544      	str	r4, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005020:	2340      	movs	r3, #64	; 0x40
 8005022:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8005024:	2300      	movs	r3, #0
      break;
    default :
      status = HAL_ERROR;
      break;
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8005026:	2902      	cmp	r1, #2
 8005028:	d12c      	bne.n	8005084 <SAI_InitI2S+0xd0>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800502a:	2a01      	cmp	r2, #1
 800502c:	d026      	beq.n	800507c <SAI_InitI2S+0xc8>
    {
      hsai->SlotInit.FirstBitOffset = 16;
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800502e:	2a02      	cmp	r2, #2
 8005030:	d128      	bne.n	8005084 <SAI_InitI2S+0xd0>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8005032:	2208      	movs	r2, #8
 8005034:	6682      	str	r2, [r0, #104]	; 0x68
 8005036:	e025      	b.n	8005084 <SAI_InitI2S+0xd0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005038:	2480      	movs	r4, #128	; 0x80
 800503a:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800503c:	085b      	lsrs	r3, r3, #1
 800503e:	019d      	lsls	r5, r3, #6
 8005040:	6545      	str	r5, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005042:	015b      	lsls	r3, r3, #5
 8005044:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005046:	66c4      	str	r4, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8005048:	2300      	movs	r3, #0
      break;
 800504a:	e7ec      	b.n	8005026 <SAI_InitI2S+0x72>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800504c:	24c0      	movs	r4, #192	; 0xc0
 800504e:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005050:	085b      	lsrs	r3, r3, #1
 8005052:	019c      	lsls	r4, r3, #6
 8005054:	6544      	str	r4, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005056:	015b      	lsls	r3, r3, #5
 8005058:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800505a:	2380      	movs	r3, #128	; 0x80
 800505c:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 800505e:	2300      	movs	r3, #0
      break;
 8005060:	e7e1      	b.n	8005026 <SAI_InitI2S+0x72>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005062:	24e0      	movs	r4, #224	; 0xe0
 8005064:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005066:	085b      	lsrs	r3, r3, #1
 8005068:	019c      	lsls	r4, r3, #6
 800506a:	6544      	str	r4, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800506c:	015b      	lsls	r3, r3, #5
 800506e:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005070:	2380      	movs	r3, #128	; 0x80
 8005072:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8005074:	2300      	movs	r3, #0
      break;
 8005076:	e7d6      	b.n	8005026 <SAI_InitI2S+0x72>
      status = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e7d4      	b.n	8005026 <SAI_InitI2S+0x72>
      hsai->SlotInit.FirstBitOffset = 16;
 800507c:	2110      	movs	r1, #16
 800507e:	6681      	str	r1, [r0, #104]	; 0x68
 8005080:	e7d5      	b.n	800502e <SAI_InitI2S+0x7a>
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
    }
  }
  return status;
}
 8005084:	4618      	mov	r0, r3
 8005086:	bc30      	pop	{r4, r5}
 8005088:	4770      	bx	lr

0800508a <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800508a:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800508c:	2400      	movs	r4, #0
 800508e:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005090:	64c4      	str	r4, [r0, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005092:	6845      	ldr	r5, [r0, #4]
 8005094:	2d02      	cmp	r5, #2
 8005096:	bf14      	ite	ne
 8005098:	2400      	movne	r4, #0
 800509a:	2401      	moveq	r4, #1
 800509c:	2d00      	cmp	r5, #0
 800509e:	bf08      	it	eq
 80050a0:	2401      	moveq	r4, #1
 80050a2:	b1c4      	cbz	r4, 80050d6 <SAI_InitPCM+0x4c>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80050a4:	2401      	movs	r4, #1
 80050a6:	6504      	str	r4, [r0, #80]	; 0x50
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80050a8:	2400      	movs	r4, #0
 80050aa:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80050ac:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 80050b0:	6605      	str	r5, [r0, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80050b2:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 80050b6:	6645      	str	r5, [r0, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 80050b8:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80050ba:	6703      	str	r3, [r0, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80050bc:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80050c0:	6744      	str	r4, [r0, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 80050c2:	2904      	cmp	r1, #4
 80050c4:	d00a      	beq.n	80050dc <SAI_InitPCM+0x52>
      hsai->FrameInit.ActiveFrameLength = 1;
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 80050c6:	210d      	movs	r1, #13
 80050c8:	6581      	str	r1, [r0, #88]	; 0x58
  }

  switch (datasize)
 80050ca:	2a03      	cmp	r2, #3
 80050cc:	d829      	bhi.n	8005122 <SAI_InitPCM+0x98>
 80050ce:	e8df f002 	tbb	[pc, r2]
 80050d2:	1108      	.short	0x1108
 80050d4:	2018      	.short	0x2018
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80050d6:	2400      	movs	r4, #0
 80050d8:	6504      	str	r4, [r0, #80]	; 0x50
 80050da:	e7e5      	b.n	80050a8 <SAI_InitPCM+0x1e>
      hsai->FrameInit.ActiveFrameLength = 1;
 80050dc:	2101      	movs	r1, #1
 80050de:	6581      	str	r1, [r0, #88]	; 0x58
 80050e0:	e7f3      	b.n	80050ca <SAI_InitPCM+0x40>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80050e2:	2280      	movs	r2, #128	; 0x80
 80050e4:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80050ea:	2340      	movs	r3, #64	; 0x40
 80050ec:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 80050ee:	2000      	movs	r0, #0
      status = HAL_ERROR;
      break;
  }

  return status;
}
 80050f0:	bc30      	pop	{r4, r5}
 80050f2:	4770      	bx	lr
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80050f4:	2280      	movs	r2, #128	; 0x80
 80050f6:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80050f8:	015b      	lsls	r3, r3, #5
 80050fa:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80050fc:	66c2      	str	r2, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 80050fe:	2000      	movs	r0, #0
      break;
 8005100:	e7f6      	b.n	80050f0 <SAI_InitPCM+0x66>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005102:	22c0      	movs	r2, #192	; 0xc0
 8005104:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005106:	015b      	lsls	r3, r3, #5
 8005108:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800510a:	2380      	movs	r3, #128	; 0x80
 800510c:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 800510e:	2000      	movs	r0, #0
      break;
 8005110:	e7ee      	b.n	80050f0 <SAI_InitPCM+0x66>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005112:	22e0      	movs	r2, #224	; 0xe0
 8005114:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005116:	015b      	lsls	r3, r3, #5
 8005118:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800511a:	2380      	movs	r3, #128	; 0x80
 800511c:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 800511e:	2000      	movs	r0, #0
      break;
 8005120:	e7e6      	b.n	80050f0 <SAI_InitPCM+0x66>
      status = HAL_ERROR;
 8005122:	2001      	movs	r0, #1
 8005124:	e7e4      	b.n	80050f0 <SAI_InitPCM+0x66>

08005126 <SAI_InterruptFlag>:
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if (mode == SAI_MODE_IT)
 8005126:	2901      	cmp	r1, #1
 8005128:	d00a      	beq.n	8005140 <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800512a:	2301      	movs	r3, #1
  {
    tmpIT |= SAI_IT_FREQ;
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800512c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800512e:	2a08      	cmp	r2, #8
 8005130:	d008      	beq.n	8005144 <SAI_InterruptFlag+0x1e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT |= SAI_IT_CNRDY;
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005132:	6842      	ldr	r2, [r0, #4]
 8005134:	3a02      	subs	r2, #2
 8005136:	2a01      	cmp	r2, #1
 8005138:	d90c      	bls.n	8005154 <SAI_InterruptFlag+0x2e>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800513a:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 800513e:	4770      	bx	lr
    tmpIT |= SAI_IT_FREQ;
 8005140:	2309      	movs	r3, #9
 8005142:	e7f3      	b.n	800512c <SAI_InterruptFlag+0x6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005144:	6842      	ldr	r2, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005146:	2a01      	cmp	r2, #1
 8005148:	bf18      	it	ne
 800514a:	2a03      	cmpne	r2, #3
 800514c:	d1f1      	bne.n	8005132 <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_CNRDY;
 800514e:	f043 0310 	orr.w	r3, r3, #16
 8005152:	e7ee      	b.n	8005132 <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005154:	f043 0060 	orr.w	r0, r3, #96	; 0x60
 8005158:	4770      	bx	lr
	...

0800515c <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800515c:	4b0e      	ldr	r3, [pc, #56]	; (8005198 <SAI_Disable+0x3c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a0e      	ldr	r2, [pc, #56]	; (800519c <SAI_Disable+0x40>)
 8005162:	fba2 2303 	umull	r2, r3, r2, r3
 8005166:	0b1b      	lsrs	r3, r3, #12
 8005168:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800516a:	6801      	ldr	r1, [r0, #0]
 800516c:	680a      	ldr	r2, [r1, #0]
 800516e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005172:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005174:	b13b      	cbz	r3, 8005186 <SAI_Disable+0x2a>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
    count--;
 8005176:	3b01      	subs	r3, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005178:	6802      	ldr	r2, [r0, #0]
 800517a:	6812      	ldr	r2, [r2, #0]
 800517c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8005180:	d1f8      	bne.n	8005174 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005182:	2000      	movs	r0, #0

  return status;
}
 8005184:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005186:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 800518a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800518e:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      status = HAL_TIMEOUT;
 8005192:	2003      	movs	r0, #3
      break;
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	20000078 	.word	0x20000078
 800519c:	95cbec1b 	.word	0x95cbec1b

080051a0 <HAL_SAI_Init>:
{
 80051a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hsai == NULL)
 80051a4:	2800      	cmp	r0, #0
 80051a6:	f000 81cd 	beq.w	8005544 <HAL_SAI_Init+0x3a4>
 80051aa:	4604      	mov	r4, r0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80051ac:	f7fb fa1e 	bl	80005ec <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80051b0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d025      	beq.n	8005204 <HAL_SAI_Init+0x64>
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80051b8:	6823      	ldr	r3, [r4, #0]
 80051ba:	49b1      	ldr	r1, [pc, #708]	; (8005480 <HAL_SAI_Init+0x2e0>)
 80051bc:	4ab1      	ldr	r2, [pc, #708]	; (8005484 <HAL_SAI_Init+0x2e4>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	bf18      	it	ne
 80051c2:	428b      	cmpne	r3, r1
 80051c4:	d030      	beq.n	8005228 <HAL_SAI_Init+0x88>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80051c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80051ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051ce:	4293      	cmp	r3, r2
 80051d0:	bf18      	it	ne
 80051d2:	428b      	cmpne	r3, r1
 80051d4:	d045      	beq.n	8005262 <HAL_SAI_Init+0xc2>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80051d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80051da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051de:	4293      	cmp	r3, r2
 80051e0:	bf18      	it	ne
 80051e2:	428b      	cmpne	r3, r1
 80051e4:	d03f      	beq.n	8005266 <HAL_SAI_Init+0xc6>
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 80051e6:	f101 51c0 	add.w	r1, r1, #402653184	; 0x18000000
 80051ea:	f5a1 3186 	sub.w	r1, r1, #68608	; 0x10c00
 80051ee:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 80051f2:	f5a2 3286 	sub.w	r2, r2, #68608	; 0x10c00
 80051f6:	4293      	cmp	r3, r2
 80051f8:	bf18      	it	ne
 80051fa:	428b      	cmpne	r3, r1
 80051fc:	f040 81a8 	bne.w	8005550 <HAL_SAI_Init+0x3b0>
    SaiBaseAddress = SAI4;
 8005200:	4ea1      	ldr	r6, [pc, #644]	; (8005488 <HAL_SAI_Init+0x2e8>)
 8005202:	e012      	b.n	800522a <HAL_SAI_Init+0x8a>
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8005204:	6823      	ldr	r3, [r4, #0]
 8005206:	499e      	ldr	r1, [pc, #632]	; (8005480 <HAL_SAI_Init+0x2e0>)
 8005208:	4aa0      	ldr	r2, [pc, #640]	; (800548c <HAL_SAI_Init+0x2ec>)
 800520a:	428b      	cmp	r3, r1
 800520c:	bf18      	it	ne
 800520e:	4293      	cmpne	r3, r2
 8005210:	f040 819c 	bne.w	800554c <HAL_SAI_Init+0x3ac>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8005214:	6863      	ldr	r3, [r4, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8005216:	2b01      	cmp	r3, #1
 8005218:	d001      	beq.n	800521e <HAL_SAI_Init+0x7e>
      return HAL_ERROR;
 800521a:	2501      	movs	r5, #1
 800521c:	e193      	b.n	8005546 <HAL_SAI_Init+0x3a6>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800521e:	6c63      	ldr	r3, [r4, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0c9      	beq.n	80051b8 <HAL_SAI_Init+0x18>
      return HAL_ERROR;
 8005224:	2501      	movs	r5, #1
 8005226:	e18e      	b.n	8005546 <HAL_SAI_Init+0x3a6>
    SaiBaseAddress = SAI1;
 8005228:	4e99      	ldr	r6, [pc, #612]	; (8005490 <HAL_SAI_Init+0x2f0>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 800522a:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800522e:	b1e3      	cbz	r3, 800526a <HAL_SAI_Init+0xca>
  if(SAI_Disable(hsai) != HAL_OK)
 8005230:	4620      	mov	r0, r4
 8005232:	f7ff ff93 	bl	800515c <SAI_Disable>
 8005236:	4605      	mov	r5, r0
 8005238:	2800      	cmp	r0, #0
 800523a:	f040 818b 	bne.w	8005554 <HAL_SAI_Init+0x3b4>
  hsai->State = HAL_SAI_STATE_BUSY;
 800523e:	2302      	movs	r3, #2
 8005240:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 8005244:	68e3      	ldr	r3, [r4, #12]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d017      	beq.n	800527a <HAL_SAI_Init+0xda>
 800524a:	2b02      	cmp	r3, #2
 800524c:	d013      	beq.n	8005276 <HAL_SAI_Init+0xd6>
      tmpregisterGCR = 0;
 800524e:	2200      	movs	r2, #0
  switch (hsai->Init.Synchro)
 8005250:	68a3      	ldr	r3, [r4, #8]
 8005252:	3b01      	subs	r3, #1
 8005254:	2b04      	cmp	r3, #4
 8005256:	d812      	bhi.n	800527e <HAL_SAI_Init+0xde>
 8005258:	e8df f003 	tbb	[pc, r3]
 800525c:	1b161325 	.word	0x1b161325
 8005260:	20          	.byte	0x20
 8005261:	00          	.byte	0x00
    SaiBaseAddress = SAI2;
 8005262:	4e8c      	ldr	r6, [pc, #560]	; (8005494 <HAL_SAI_Init+0x2f4>)
 8005264:	e7e1      	b.n	800522a <HAL_SAI_Init+0x8a>
    SaiBaseAddress = SAI3;
 8005266:	4e8c      	ldr	r6, [pc, #560]	; (8005498 <HAL_SAI_Init+0x2f8>)
 8005268:	e7df      	b.n	800522a <HAL_SAI_Init+0x8a>
    hsai->Lock = HAL_UNLOCKED;
 800526a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 800526e:	4620      	mov	r0, r4
 8005270:	f003 ff58 	bl	8009124 <HAL_SAI_MspInit>
 8005274:	e7dc      	b.n	8005230 <HAL_SAI_Init+0x90>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005276:	2220      	movs	r2, #32
      break;
 8005278:	e7ea      	b.n	8005250 <HAL_SAI_Init+0xb0>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800527a:	2210      	movs	r2, #16
 800527c:	e7e8      	b.n	8005250 <HAL_SAI_Init+0xb0>
      syncen_bits = 0;
 800527e:	2700      	movs	r7, #0
 8005280:	e013      	b.n	80052aa <HAL_SAI_Init+0x10a>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005282:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8005286:	e010      	b.n	80052aa <HAL_SAI_Init+0x10a>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005288:	f042 0201 	orr.w	r2, r2, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800528c:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8005290:	e00b      	b.n	80052aa <HAL_SAI_Init+0x10a>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8005292:	f042 0202 	orr.w	r2, r2, #2
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005296:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 800529a:	e006      	b.n	80052aa <HAL_SAI_Init+0x10a>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800529c:	f042 0203 	orr.w	r2, r2, #3
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80052a0:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 80052a4:	e001      	b.n	80052aa <HAL_SAI_Init+0x10a>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80052a6:	f44f 6780 	mov.w	r7, #1024	; 0x400
  SaiBaseAddress->GCR = tmpregisterGCR;
 80052aa:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80052ac:	6a23      	ldr	r3, [r4, #32]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d043      	beq.n	800533a <HAL_SAI_Init+0x19a>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	4972      	ldr	r1, [pc, #456]	; (8005480 <HAL_SAI_Init+0x2e0>)
 80052b6:	4a73      	ldr	r2, [pc, #460]	; (8005484 <HAL_SAI_Init+0x2e4>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	bf18      	it	ne
 80052bc:	428b      	cmpne	r3, r1
 80052be:	f000 80c5 	beq.w	800544c <HAL_SAI_Init+0x2ac>
    uint32_t freq = 0;
 80052c2:	2000      	movs	r0, #0
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80052c4:	6823      	ldr	r3, [r4, #0]
 80052c6:	4975      	ldr	r1, [pc, #468]	; (800549c <HAL_SAI_Init+0x2fc>)
 80052c8:	4a75      	ldr	r2, [pc, #468]	; (80054a0 <HAL_SAI_Init+0x300>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	bf18      	it	ne
 80052ce:	428b      	cmpne	r3, r1
 80052d0:	f000 80c1 	beq.w	8005456 <HAL_SAI_Init+0x2b6>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	4973      	ldr	r1, [pc, #460]	; (80054a4 <HAL_SAI_Init+0x304>)
 80052d8:	4a73      	ldr	r2, [pc, #460]	; (80054a8 <HAL_SAI_Init+0x308>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	bf18      	it	ne
 80052de:	428b      	cmpne	r3, r1
 80052e0:	f000 80be 	beq.w	8005460 <HAL_SAI_Init+0x2c0>
    if (hsai->Instance == SAI4_Block_A)
 80052e4:	6822      	ldr	r2, [r4, #0]
 80052e6:	4b69      	ldr	r3, [pc, #420]	; (800548c <HAL_SAI_Init+0x2ec>)
 80052e8:	429a      	cmp	r2, r3
 80052ea:	f000 80be 	beq.w	800546a <HAL_SAI_Init+0x2ca>
    if (hsai->Instance == SAI4_Block_B)
 80052ee:	6822      	ldr	r2, [r4, #0]
 80052f0:	4b6e      	ldr	r3, [pc, #440]	; (80054ac <HAL_SAI_Init+0x30c>)
 80052f2:	429a      	cmp	r2, r3
 80052f4:	f000 80be 	beq.w	8005474 <HAL_SAI_Init+0x2d4>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80052f8:	69a3      	ldr	r3, [r4, #24]
 80052fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80052fe:	f000 80df 	beq.w	80054c0 <HAL_SAI_Init+0x320>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8005302:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005304:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005308:	f000 80e4 	beq.w	80054d4 <HAL_SAI_Init+0x334>
 800530c:	2301      	movs	r3, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800530e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005312:	0041      	lsls	r1, r0, #1
 8005314:	6a22      	ldr	r2, [r4, #32]
 8005316:	fb03 f302 	mul.w	r3, r3, r2
 800531a:	021b      	lsls	r3, r3, #8
 800531c:	fbb1 f1f3 	udiv	r1, r1, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 8005320:	4b63      	ldr	r3, [pc, #396]	; (80054b0 <HAL_SAI_Init+0x310>)
 8005322:	fba3 2301 	umull	r2, r3, r3, r1
 8005326:	08db      	lsrs	r3, r3, #3
 8005328:	6263      	str	r3, [r4, #36]	; 0x24
    if ((tmpval % 10U) > 8U)
 800532a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800532e:	0042      	lsls	r2, r0, #1
 8005330:	1a8a      	subs	r2, r1, r2
 8005332:	2a08      	cmp	r2, #8
 8005334:	d901      	bls.n	800533a <HAL_SAI_Init+0x19a>
      hsai->Init.Mckdiv += 1U;
 8005336:	3301      	adds	r3, #1
 8005338:	6263      	str	r3, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800533a:	6862      	ldr	r2, [r4, #4]
 800533c:	2a02      	cmp	r2, #2
 800533e:	bf14      	ite	ne
 8005340:	2300      	movne	r3, #0
 8005342:	2301      	moveq	r3, #1
 8005344:	2a00      	cmp	r2, #0
 8005346:	bf08      	it	eq
 8005348:	2301      	moveq	r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 80c7 	beq.w	80054de <HAL_SAI_Init+0x33e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005350:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005352:	2b01      	cmp	r3, #1
 8005354:	f000 80c0 	beq.w	80054d8 <HAL_SAI_Init+0x338>
 8005358:	f44f 7800 	mov.w	r8, #512	; 0x200
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800535c:	f7fb f946 	bl	80005ec <HAL_GetREVID>
 8005360:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8005364:	f0c0 80c4 	bcc.w	80054f0 <HAL_SAI_Init+0x350>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005368:	6822      	ldr	r2, [r4, #0]
 800536a:	6811      	ldr	r1, [r2, #0]
 800536c:	4b51      	ldr	r3, [pc, #324]	; (80054b4 <HAL_SAI_Init+0x314>)
 800536e:	400b      	ands	r3, r1
 8005370:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005372:	6821      	ldr	r1, [r4, #0]
 8005374:	680a      	ldr	r2, [r1, #0]
 8005376:	6863      	ldr	r3, [r4, #4]
 8005378:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800537a:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800537c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800537e:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005380:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005382:	4303      	orrs	r3, r0
 8005384:	ea43 0308 	orr.w	r3, r3, r8
                            ckstr_bits | syncen_bits |                             \
 8005388:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800538a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800538c:	4303      	orrs	r3, r0
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800538e:	6960      	ldr	r0, [r4, #20]
 8005390:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005392:	69a0      	ldr	r0, [r4, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005394:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005396:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005398:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800539c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800539e:	4303      	orrs	r3, r0
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80053a0:	6920      	ldr	r0, [r4, #16]
 80053a2:	4303      	orrs	r3, r0
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80053a4:	4313      	orrs	r3, r2
 80053a6:	600b      	str	r3, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80053a8:	6822      	ldr	r2, [r4, #0]
 80053aa:	6851      	ldr	r1, [r2, #4]
 80053ac:	4b42      	ldr	r3, [pc, #264]	; (80054b8 <HAL_SAI_Init+0x318>)
 80053ae:	400b      	ands	r3, r1
 80053b0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80053b2:	6821      	ldr	r1, [r4, #0]
 80053b4:	684a      	ldr	r2, [r1, #4]
 80053b6:	69e3      	ldr	r3, [r4, #28]
 80053b8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80053ba:	4303      	orrs	r3, r0
 80053bc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80053be:	4303      	orrs	r3, r0
 80053c0:	4313      	orrs	r3, r2
 80053c2:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80053c4:	6822      	ldr	r2, [r4, #0]
 80053c6:	6891      	ldr	r1, [r2, #8]
 80053c8:	4b3c      	ldr	r3, [pc, #240]	; (80054bc <HAL_SAI_Init+0x31c>)
 80053ca:	400b      	ands	r3, r1
 80053cc:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80053ce:	6820      	ldr	r0, [r4, #0]
 80053d0:	6882      	ldr	r2, [r0, #8]
 80053d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80053d4:	3b01      	subs	r3, #1
                           hsai->FrameInit.FSOffset |
 80053d6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80053d8:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSDefinition |
 80053da:	6de1      	ldr	r1, [r4, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 80053dc:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSPolarity   |
 80053de:	6e21      	ldr	r1, [r4, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 80053e0:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80053e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80053e4:	3901      	subs	r1, #1
                           hsai->FrameInit.FSPolarity   |
 80053e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80053ea:	4313      	orrs	r3, r2
 80053ec:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80053ee:	6822      	ldr	r2, [r4, #0]
 80053f0:	68d3      	ldr	r3, [r2, #12]
 80053f2:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 80053f6:	f023 030f 	bic.w	r3, r3, #15
 80053fa:	041b      	lsls	r3, r3, #16
 80053fc:	0c1b      	lsrs	r3, r3, #16
 80053fe:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005400:	6820      	ldr	r0, [r4, #0]
 8005402:	68c2      	ldr	r2, [r0, #12]
 8005404:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005406:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8005408:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800540a:	6f61      	ldr	r1, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800540c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005410:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8005412:	3901      	subs	r1, #1
 8005414:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005418:	4313      	orrs	r3, r2
 800541a:	60c3      	str	r3, [r0, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	4918      	ldr	r1, [pc, #96]	; (8005480 <HAL_SAI_Init+0x2e0>)
 8005420:	4a1a      	ldr	r2, [pc, #104]	; (800548c <HAL_SAI_Init+0x2ec>)
 8005422:	4293      	cmp	r3, r2
 8005424:	bf18      	it	ne
 8005426:	428b      	cmpne	r3, r1
 8005428:	d107      	bne.n	800543a <HAL_SAI_Init+0x29a>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800542a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800542c:	f023 0301 	bic.w	r3, r3, #1
 8005430:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8005432:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8005436:	2b01      	cmp	r3, #1
 8005438:	d079      	beq.n	800552e <HAL_SAI_Init+0x38e>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800543a:	2300      	movs	r3, #0
 800543c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  hsai->State = HAL_SAI_STATE_READY;
 8005440:	2201      	movs	r2, #1
 8005442:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 8005446:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  return HAL_OK;
 800544a:	e07c      	b.n	8005546 <HAL_SAI_Init+0x3a6>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800544c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005450:	f7ff fb8c 	bl	8004b6c <HAL_RCCEx_GetPeriphCLKFreq>
 8005454:	e736      	b.n	80052c4 <HAL_SAI_Init+0x124>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005456:	f44f 7000 	mov.w	r0, #512	; 0x200
 800545a:	f7ff fb87 	bl	8004b6c <HAL_RCCEx_GetPeriphCLKFreq>
 800545e:	e739      	b.n	80052d4 <HAL_SAI_Init+0x134>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8005460:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005464:	f7ff fb82 	bl	8004b6c <HAL_RCCEx_GetPeriphCLKFreq>
 8005468:	e73c      	b.n	80052e4 <HAL_SAI_Init+0x144>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800546a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800546e:	f7ff fb7d 	bl	8004b6c <HAL_RCCEx_GetPeriphCLKFreq>
 8005472:	e73c      	b.n	80052ee <HAL_SAI_Init+0x14e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8005474:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005478:	f7ff fb78 	bl	8004b6c <HAL_RCCEx_GetPeriphCLKFreq>
 800547c:	e73c      	b.n	80052f8 <HAL_SAI_Init+0x158>
 800547e:	bf00      	nop
 8005480:	40015804 	.word	0x40015804
 8005484:	40015824 	.word	0x40015824
 8005488:	58005400 	.word	0x58005400
 800548c:	58005404 	.word	0x58005404
 8005490:	40015800 	.word	0x40015800
 8005494:	40015c00 	.word	0x40015c00
 8005498:	40016000 	.word	0x40016000
 800549c:	40015c04 	.word	0x40015c04
 80054a0:	40015c24 	.word	0x40015c24
 80054a4:	40016004 	.word	0x40016004
 80054a8:	40016024 	.word	0x40016024
 80054ac:	58005424 	.word	0x58005424
 80054b0:	cccccccd 	.word	0xcccccccd
 80054b4:	f005c010 	.word	0xf005c010
 80054b8:	ffff1ff0 	.word	0xffff1ff0
 80054bc:	fff88000 	.word	0xfff88000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * hsai->FrameInit.FrameLength);
 80054c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80054c4:	0041      	lsls	r1, r0, #1
 80054c6:	6a22      	ldr	r2, [r4, #32]
 80054c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80054ca:	fb03 f302 	mul.w	r3, r3, r2
 80054ce:	fbb1 f1f3 	udiv	r1, r1, r3
 80054d2:	e725      	b.n	8005320 <HAL_SAI_Init+0x180>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80054d4:	2302      	movs	r3, #2
 80054d6:	e71a      	b.n	800530e <HAL_SAI_Init+0x16e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80054d8:	f04f 0800 	mov.w	r8, #0
 80054dc:	e73e      	b.n	800535c <HAL_SAI_Init+0x1bc>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80054de:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d002      	beq.n	80054ea <HAL_SAI_Init+0x34a>
 80054e4:	f04f 0800 	mov.w	r8, #0
 80054e8:	e738      	b.n	800535c <HAL_SAI_Init+0x1bc>
 80054ea:	f44f 7800 	mov.w	r8, #512	; 0x200
 80054ee:	e735      	b.n	800535c <HAL_SAI_Init+0x1bc>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80054f0:	6822      	ldr	r2, [r4, #0]
 80054f2:	6811      	ldr	r1, [r2, #0]
 80054f4:	4b18      	ldr	r3, [pc, #96]	; (8005558 <HAL_SAI_Init+0x3b8>)
 80054f6:	400b      	ands	r3, r1
 80054f8:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80054fa:	6821      	ldr	r1, [r4, #0]
 80054fc:	680a      	ldr	r2, [r1, #0]
 80054fe:	6863      	ldr	r3, [r4, #4]
 8005500:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005502:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005504:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005506:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005508:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800550a:	4303      	orrs	r3, r0
 800550c:	ea43 0308 	orr.w	r3, r3, r8
                            ckstr_bits | syncen_bits |                             \
 8005510:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005512:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8005514:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005516:	6967      	ldr	r7, [r4, #20]
 8005518:	433b      	orrs	r3, r7
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800551a:	69a0      	ldr	r0, [r4, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800551c:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800551e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005520:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                            hsai->Init.MckOverSampling);
 8005524:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005526:	4303      	orrs	r3, r0
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005528:	4313      	orrs	r3, r2
 800552a:	600b      	str	r3, [r1, #0]
 800552c:	e73c      	b.n	80053a8 <HAL_SAI_Init+0x208>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800552e:	6c23      	ldr	r3, [r4, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8005530:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005532:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8005534:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8005538:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800553a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800553c:	f043 0301 	orr.w	r3, r3, #1
 8005540:	6473      	str	r3, [r6, #68]	; 0x44
 8005542:	e77a      	b.n	800543a <HAL_SAI_Init+0x29a>
    return HAL_ERROR;
 8005544:	2501      	movs	r5, #1
}
 8005546:	4628      	mov	r0, r5
 8005548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 800554c:	2501      	movs	r5, #1
 800554e:	e7fa      	b.n	8005546 <HAL_SAI_Init+0x3a6>
    return HAL_ERROR;
 8005550:	2501      	movs	r5, #1
 8005552:	e7f8      	b.n	8005546 <HAL_SAI_Init+0x3a6>
    return HAL_ERROR;
 8005554:	2501      	movs	r5, #1
 8005556:	e7f6      	b.n	8005546 <HAL_SAI_Init+0x3a6>
 8005558:	f805c010 	.word	0xf805c010

0800555c <HAL_SAI_InitProtocol>:
{
 800555c:	b510      	push	{r4, lr}
 800555e:	4604      	mov	r4, r0
  switch (protocol)
 8005560:	2904      	cmp	r1, #4
 8005562:	d811      	bhi.n	8005588 <HAL_SAI_InitProtocol+0x2c>
 8005564:	e8df f001 	tbb	[pc, r1]
 8005568:	08030303 	.word	0x08030303
 800556c:	08          	.byte	0x08
 800556d:	00          	.byte	0x00
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800556e:	4620      	mov	r0, r4
 8005570:	f7ff fd20 	bl	8004fb4 <SAI_InitI2S>
  if (status == HAL_OK)
 8005574:	b120      	cbz	r0, 8005580 <HAL_SAI_InitProtocol+0x24>
}
 8005576:	bd10      	pop	{r4, pc}
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8005578:	4620      	mov	r0, r4
 800557a:	f7ff fd86 	bl	800508a <SAI_InitPCM>
      break;
 800557e:	e7f9      	b.n	8005574 <HAL_SAI_InitProtocol+0x18>
    status = HAL_SAI_Init(hsai);
 8005580:	4620      	mov	r0, r4
 8005582:	f7ff fe0d 	bl	80051a0 <HAL_SAI_Init>
 8005586:	e7f6      	b.n	8005576 <HAL_SAI_InitProtocol+0x1a>
      status = HAL_ERROR;
 8005588:	2001      	movs	r0, #1
 800558a:	e7f4      	b.n	8005576 <HAL_SAI_InitProtocol+0x1a>

0800558c <HAL_SAI_Transmit_DMA>:
{
 800558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558e:	4604      	mov	r4, r0
 8005590:	460e      	mov	r6, r1
 8005592:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8005594:	f7fb f810 	bl	80005b8 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 8005598:	fab5 f385 	clz	r3, r5
 800559c:	095b      	lsrs	r3, r3, #5
 800559e:	2e00      	cmp	r6, #0
 80055a0:	bf08      	it	eq
 80055a2:	2301      	moveq	r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d165      	bne.n	8005674 <HAL_SAI_Transmit_DMA+0xe8>
 80055a8:	4607      	mov	r7, r0
  if (hsai->State == HAL_SAI_STATE_READY)
 80055aa:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d162      	bne.n	800567a <HAL_SAI_Transmit_DMA+0xee>
    __HAL_LOCK(hsai);
 80055b4:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d060      	beq.n	800567e <HAL_SAI_Transmit_DMA+0xf2>
 80055bc:	2301      	movs	r3, #1
 80055be:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    hsai->pBuffPtr = pData;
 80055c2:	67a6      	str	r6, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 80055c4:	f8a4 507c 	strh.w	r5, [r4, #124]	; 0x7c
    hsai->XferCount = Size;
 80055c8:	f8a4 507e 	strh.w	r5, [r4, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80055cc:	2300      	movs	r3, #0
 80055ce:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80055d2:	2212      	movs	r2, #18
 80055d4:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80055d8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80055dc:	4929      	ldr	r1, [pc, #164]	; (8005684 <HAL_SAI_Transmit_DMA+0xf8>)
 80055de:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80055e0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80055e4:	4928      	ldr	r1, [pc, #160]	; (8005688 <HAL_SAI_Transmit_DMA+0xfc>)
 80055e6:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80055e8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80055ec:	4927      	ldr	r1, [pc, #156]	; (800568c <HAL_SAI_Transmit_DMA+0x100>)
 80055ee:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 80055f0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80055f4:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80055f6:	6822      	ldr	r2, [r4, #0]
 80055f8:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 80055fc:	321c      	adds	r2, #28
 80055fe:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8005600:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005604:	f7fc faee 	bl	8001be4 <HAL_DMA_Start_IT>
 8005608:	4605      	mov	r5, r0
 800560a:	bb10      	cbnz	r0, 8005652 <HAL_SAI_Transmit_DMA+0xc6>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800560c:	2100      	movs	r1, #0
 800560e:	4620      	mov	r0, r4
 8005610:	f7ff fd89 	bl	8005126 <SAI_InterruptFlag>
 8005614:	6822      	ldr	r2, [r4, #0]
 8005616:	6913      	ldr	r3, [r2, #16]
 8005618:	4318      	orrs	r0, r3
 800561a:	6110      	str	r0, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800561c:	6822      	ldr	r2, [r4, #0]
 800561e:	6813      	ldr	r3, [r2, #0]
 8005620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005624:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005626:	6823      	ldr	r3, [r4, #0]
 8005628:	695a      	ldr	r2, [r3, #20]
 800562a:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
 800562e:	d115      	bne.n	800565c <HAL_SAI_Transmit_DMA+0xd0>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8005630:	f7fa ffc2 	bl	80005b8 <HAL_GetTick>
 8005634:	1bc0      	subs	r0, r0, r7
 8005636:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800563a:	d9f4      	bls.n	8005626 <HAL_SAI_Transmit_DMA+0x9a>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800563c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005644:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        __HAL_UNLOCK(hsai);
 8005648:	2300      	movs	r3, #0
 800564a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        return HAL_TIMEOUT;
 800564e:	2503      	movs	r5, #3
 8005650:	e011      	b.n	8005676 <HAL_SAI_Transmit_DMA+0xea>
      __HAL_UNLOCK(hsai);
 8005652:	2300      	movs	r3, #0
 8005654:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      return  HAL_ERROR;
 8005658:	2501      	movs	r5, #1
 800565a:	e00c      	b.n	8005676 <HAL_SAI_Transmit_DMA+0xea>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8005662:	d103      	bne.n	800566c <HAL_SAI_Transmit_DMA+0xe0>
      __HAL_SAI_ENABLE(hsai);
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800566a:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 800566c:	2300      	movs	r3, #0
 800566e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 8005672:	e000      	b.n	8005676 <HAL_SAI_Transmit_DMA+0xea>
    return  HAL_ERROR;
 8005674:	2501      	movs	r5, #1
}
 8005676:	4628      	mov	r0, r5
 8005678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800567a:	2502      	movs	r5, #2
 800567c:	e7fb      	b.n	8005676 <HAL_SAI_Transmit_DMA+0xea>
    __HAL_LOCK(hsai);
 800567e:	2502      	movs	r5, #2
 8005680:	e7f9      	b.n	8005676 <HAL_SAI_Transmit_DMA+0xea>
 8005682:	bf00      	nop
 8005684:	0800579f 	.word	0x0800579f
 8005688:	08005765 	.word	0x08005765
 800568c:	080057ed 	.word	0x080057ed

08005690 <HAL_SAI_Receive_DMA>:
{
 8005690:	b538      	push	{r3, r4, r5, lr}
  if ((pData == NULL) || (Size == 0U))
 8005692:	4614      	mov	r4, r2
 8005694:	fab2 f282 	clz	r2, r2
 8005698:	0952      	lsrs	r2, r2, #5
 800569a:	2900      	cmp	r1, #0
 800569c:	bf08      	it	eq
 800569e:	2201      	moveq	r2, #1
 80056a0:	2a00      	cmp	r2, #0
 80056a2:	d151      	bne.n	8005748 <HAL_SAI_Receive_DMA+0xb8>
  if (hsai->State == HAL_SAI_STATE_READY)
 80056a4:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d14f      	bne.n	800574e <HAL_SAI_Receive_DMA+0xbe>
    __HAL_LOCK(hsai);
 80056ae:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d04d      	beq.n	8005752 <HAL_SAI_Receive_DMA+0xc2>
 80056b6:	4623      	mov	r3, r4
 80056b8:	4604      	mov	r4, r0
 80056ba:	2201      	movs	r2, #1
 80056bc:	f880 2090 	strb.w	r2, [r0, #144]	; 0x90
    hsai->pBuffPtr = pData;
 80056c0:	67a1      	str	r1, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 80056c2:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
    hsai->XferCount = Size;
 80056c6:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80056ca:	2300      	movs	r3, #0
 80056cc:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80056d0:	2222      	movs	r2, #34	; 0x22
 80056d2:	f880 2091 	strb.w	r2, [r0, #145]	; 0x91
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80056d6:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80056da:	491f      	ldr	r1, [pc, #124]	; (8005758 <HAL_SAI_Receive_DMA+0xc8>)
 80056dc:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80056de:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80056e2:	491e      	ldr	r1, [pc, #120]	; (800575c <HAL_SAI_Receive_DMA+0xcc>)
 80056e4:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80056e6:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80056ea:	491d      	ldr	r1, [pc, #116]	; (8005760 <HAL_SAI_Receive_DMA+0xd0>)
 80056ec:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 80056ee:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80056f2:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80056f4:	6801      	ldr	r1, [r0, #0]
 80056f6:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 80056fa:	6f82      	ldr	r2, [r0, #120]	; 0x78
 80056fc:	311c      	adds	r1, #28
 80056fe:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 8005702:	f7fc fa6f 	bl	8001be4 <HAL_DMA_Start_IT>
 8005706:	4605      	mov	r5, r0
 8005708:	b9c8      	cbnz	r0, 800573e <HAL_SAI_Receive_DMA+0xae>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800570a:	2100      	movs	r1, #0
 800570c:	4620      	mov	r0, r4
 800570e:	f7ff fd0a 	bl	8005126 <SAI_InterruptFlag>
 8005712:	6822      	ldr	r2, [r4, #0]
 8005714:	6913      	ldr	r3, [r2, #16]
 8005716:	4318      	orrs	r0, r3
 8005718:	6110      	str	r0, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800571a:	6822      	ldr	r2, [r4, #0]
 800571c:	6813      	ldr	r3, [r2, #0]
 800571e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005722:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800572c:	d103      	bne.n	8005736 <HAL_SAI_Receive_DMA+0xa6>
      __HAL_SAI_ENABLE(hsai);
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005734:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8005736:	2300      	movs	r3, #0
 8005738:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 800573c:	e005      	b.n	800574a <HAL_SAI_Receive_DMA+0xba>
      __HAL_UNLOCK(hsai);
 800573e:	2300      	movs	r3, #0
 8005740:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      return  HAL_ERROR;
 8005744:	2501      	movs	r5, #1
 8005746:	e000      	b.n	800574a <HAL_SAI_Receive_DMA+0xba>
    return  HAL_ERROR;
 8005748:	2501      	movs	r5, #1
}
 800574a:	4628      	mov	r0, r5
 800574c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 800574e:	2502      	movs	r5, #2
 8005750:	e7fb      	b.n	800574a <HAL_SAI_Receive_DMA+0xba>
    __HAL_LOCK(hsai);
 8005752:	2502      	movs	r5, #2
 8005754:	e7f9      	b.n	800574a <HAL_SAI_Receive_DMA+0xba>
 8005756:	bf00      	nop
 8005758:	080057e3 	.word	0x080057e3
 800575c:	080057a9 	.word	0x080057a9
 8005760:	080057ed 	.word	0x080057ed

08005764 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005764:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005766:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005768:	69c3      	ldr	r3, [r0, #28]
 800576a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800576e:	d012      	beq.n	8005796 <SAI_DMATxCplt+0x32>
  {
    hsai->XferCount = 0;
 8005770:	2100      	movs	r1, #0
 8005772:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005776:	6822      	ldr	r2, [r4, #0]
 8005778:	6813      	ldr	r3, [r2, #0]
 800577a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800577e:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005780:	4620      	mov	r0, r4
 8005782:	f7ff fcd0 	bl	8005126 <SAI_InterruptFlag>
 8005786:	6822      	ldr	r2, [r4, #0]
 8005788:	6913      	ldr	r3, [r2, #16]
 800578a:	ea23 0000 	bic.w	r0, r3, r0
 800578e:	6110      	str	r0, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8005790:	2301      	movs	r3, #1
 8005792:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8005796:	4620      	mov	r0, r4
 8005798:	f002 fe07 	bl	80083aa <HAL_SAI_TxCpltCallback>
#endif
}
 800579c:	bd10      	pop	{r4, pc}

0800579e <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800579e:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80057a0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80057a2:	f002 fe03 	bl	80083ac <HAL_SAI_TxHalfCpltCallback>
#endif
}
 80057a6:	bd08      	pop	{r3, pc}

080057a8 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80057a8:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057aa:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80057ac:	69c3      	ldr	r3, [r0, #28]
 80057ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b2:	d012      	beq.n	80057da <SAI_DMARxCplt+0x32>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80057b4:	6822      	ldr	r2, [r4, #0]
 80057b6:	6813      	ldr	r3, [r2, #0]
 80057b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80057bc:	6013      	str	r3, [r2, #0]
    hsai->XferCount = 0;
 80057be:	2100      	movs	r1, #0
 80057c0:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80057c4:	4620      	mov	r0, r4
 80057c6:	f7ff fcae 	bl	8005126 <SAI_InterruptFlag>
 80057ca:	6822      	ldr	r2, [r4, #0]
 80057cc:	6913      	ldr	r3, [r2, #16]
 80057ce:	ea23 0000 	bic.w	r0, r3, r0
 80057d2:	6110      	str	r0, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80057d4:	2301      	movs	r3, #1
 80057d6:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80057da:	4620      	mov	r0, r4
 80057dc:	f002 fde7 	bl	80083ae <HAL_SAI_RxCpltCallback>
#endif
}
 80057e0:	bd10      	pop	{r4, pc}

080057e2 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80057e2:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80057e4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80057e6:	f002 fde8 	bl	80083ba <HAL_SAI_RxHalfCpltCallback>
#endif
}
 80057ea:	bd08      	pop	{r3, pc}

080057ec <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80057ec:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057ee:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80057f0:	f7fd f82a 	bl	8002848 <HAL_DMA_GetError>
 80057f4:	2802      	cmp	r0, #2
 80057f6:	d016      	beq.n	8005826 <SAI_DMAError+0x3a>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80057f8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80057fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005800:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005804:	6822      	ldr	r2, [r4, #0]
 8005806:	6813      	ldr	r3, [r2, #0]
 8005808:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800580c:	6013      	str	r3, [r2, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800580e:	4620      	mov	r0, r4
 8005810:	f7ff fca4 	bl	800515c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8005814:	2301      	movs	r3, #1
 8005816:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800581a:	2300      	movs	r3, #0
 800581c:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8005820:	4620      	mov	r0, r4
 8005822:	f002 fdc1 	bl	80083a8 <HAL_SAI_ErrorCallback>
#endif
  }
}
 8005826:	bd10      	pop	{r4, pc}

08005828 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005828:	b570      	push	{r4, r5, r6, lr}
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800582a:	6a84      	ldr	r4, [r0, #40]	; 0x28

  if (hsd->RxXferSize >= 32U)
 800582c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800582e:	2b1f      	cmp	r3, #31
 8005830:	d916      	bls.n	8005860 <SD_Read_IT+0x38>
 8005832:	4606      	mov	r6, r0
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005834:	2500      	movs	r5, #0
 8005836:	e00d      	b.n	8005854 <SD_Read_IT+0x2c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8005838:	6830      	ldr	r0, [r6, #0]
 800583a:	f001 fe39 	bl	80074b0 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800583e:	7020      	strb	r0, [r4, #0]
      tmp++;
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005840:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8005844:	7063      	strb	r3, [r4, #1]
      tmp++;
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005846:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800584a:	70a3      	strb	r3, [r4, #2]
      tmp++;
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800584c:	0e00      	lsrs	r0, r0, #24
 800584e:	70e0      	strb	r0, [r4, #3]
      tmp++;
 8005850:	3404      	adds	r4, #4
    for(count = 0U; count < 8U; count++)
 8005852:	3501      	adds	r5, #1
 8005854:	2d07      	cmp	r5, #7
 8005856:	d9ef      	bls.n	8005838 <SD_Read_IT+0x10>
    }

    hsd->pRxBuffPtr = tmp;
 8005858:	62b4      	str	r4, [r6, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800585a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800585c:	3b20      	subs	r3, #32
 800585e:	62f3      	str	r3, [r6, #44]	; 0x2c
  }
}
 8005860:	bd70      	pop	{r4, r5, r6, pc}

08005862 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005862:	b570      	push	{r4, r5, r6, lr}
 8005864:	b082      	sub	sp, #8
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005866:	6a04      	ldr	r4, [r0, #32]

  if (hsd->TxXferSize >= 32U)
 8005868:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800586a:	2b1f      	cmp	r3, #31
 800586c:	d91d      	bls.n	80058aa <SD_Write_IT+0x48>
 800586e:	4606      	mov	r6, r0
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005870:	2500      	movs	r5, #0
 8005872:	e014      	b.n	800589e <SD_Write_IT+0x3c>
    {
      data = (uint32_t)(*tmp);
 8005874:	7823      	ldrb	r3, [r4, #0]
 8005876:	9301      	str	r3, [sp, #4]
      tmp++;
      data |= ((uint32_t)(*tmp) << 8U);
 8005878:	7862      	ldrb	r2, [r4, #1]
 800587a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800587e:	9301      	str	r3, [sp, #4]
      tmp++;
      data |= ((uint32_t)(*tmp) << 16U);
 8005880:	78a2      	ldrb	r2, [r4, #2]
 8005882:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005886:	9301      	str	r3, [sp, #4]
      tmp++;
      data |= ((uint32_t)(*tmp) << 24U);
 8005888:	78e2      	ldrb	r2, [r4, #3]
 800588a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800588e:	a902      	add	r1, sp, #8
 8005890:	f841 3d04 	str.w	r3, [r1, #-4]!
      tmp++;
 8005894:	3404      	adds	r4, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005896:	6830      	ldr	r0, [r6, #0]
 8005898:	f001 fe0d 	bl	80074b6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800589c:	3501      	adds	r5, #1
 800589e:	2d07      	cmp	r5, #7
 80058a0:	d9e8      	bls.n	8005874 <SD_Write_IT+0x12>
    }

    hsd->pTxBuffPtr = tmp;
 80058a2:	6234      	str	r4, [r6, #32]
    hsd->TxXferSize -= 32U;
 80058a4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80058a6:	3b20      	subs	r3, #32
 80058a8:	6273      	str	r3, [r6, #36]	; 0x24
  }
}
 80058aa:	b002      	add	sp, #8
 80058ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080058b0 <SD_SendSDStatus>:
{
 80058b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058b4:	b086      	sub	sp, #24
 80058b6:	4604      	mov	r4, r0
 80058b8:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80058ba:	f7fa fe7d 	bl	80005b8 <HAL_GetTick>
 80058be:	4680      	mov	r8, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80058c0:	2100      	movs	r1, #0
 80058c2:	6820      	ldr	r0, [r4, #0]
 80058c4:	f001 fe1b 	bl	80074fe <SDMMC_GetResponse>
 80058c8:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80058cc:	d167      	bne.n	800599e <SD_SendSDStatus+0xee>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80058ce:	2140      	movs	r1, #64	; 0x40
 80058d0:	6820      	ldr	r0, [r4, #0]
 80058d2:	f001 ff2f 	bl	8007734 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80058d6:	4606      	mov	r6, r0
 80058d8:	b110      	cbz	r0, 80058e0 <SD_SendSDStatus+0x30>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80058da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80058dc:	63a3      	str	r3, [r4, #56]	; 0x38
    return errorstate;
 80058de:	e060      	b.n	80059a2 <SD_SendSDStatus+0xf2>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80058e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80058e2:	0409      	lsls	r1, r1, #16
 80058e4:	6820      	ldr	r0, [r4, #0]
 80058e6:	f002 f813 	bl	8007910 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80058ea:	4606      	mov	r6, r0
 80058ec:	b110      	cbz	r0, 80058f4 <SD_SendSDStatus+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80058ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80058f0:	63a3      	str	r3, [r4, #56]	; 0x38
    return errorstate;
 80058f2:	e056      	b.n	80059a2 <SD_SendSDStatus+0xf2>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80058f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058f8:	9300      	str	r3, [sp, #0]
  config.DataLength    = 64U;
 80058fa:	2340      	movs	r3, #64	; 0x40
 80058fc:	9301      	str	r3, [sp, #4]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80058fe:	2360      	movs	r3, #96	; 0x60
 8005900:	9302      	str	r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005902:	2302      	movs	r3, #2
 8005904:	9303      	str	r3, [sp, #12]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005906:	2300      	movs	r3, #0
 8005908:	9304      	str	r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800590a:	2301      	movs	r3, #1
 800590c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800590e:	4669      	mov	r1, sp
 8005910:	6820      	ldr	r0, [r4, #0]
 8005912:	f001 fefd 	bl	8007710 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8005916:	6820      	ldr	r0, [r4, #0]
 8005918:	f002 f8b9 	bl	8007a8e <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 800591c:	4606      	mov	r6, r0
 800591e:	b188      	cbz	r0, 8005944 <SD_SendSDStatus+0x94>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005920:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005922:	63a3      	str	r3, [r4, #56]	; 0x38
    return errorstate;
 8005924:	e03d      	b.n	80059a2 <SD_SendSDStatus+0xf2>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005926:	6820      	ldr	r0, [r4, #0]
 8005928:	f001 fdc2 	bl	80074b0 <SDMMC_ReadFIFO>
 800592c:	f845 0b04 	str.w	r0, [r5], #4
      for(count = 0U; count < 8U; count++)
 8005930:	3701      	adds	r7, #1
 8005932:	2f07      	cmp	r7, #7
 8005934:	d9f7      	bls.n	8005926 <SD_SendSDStatus+0x76>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005936:	f7fa fe3f 	bl	80005b8 <HAL_GetTick>
 800593a:	eba0 0008 	sub.w	r0, r0, r8
 800593e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005942:	d032      	beq.n	80059aa <SD_SendSDStatus+0xfa>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005948:	f412 7f95 	tst.w	r2, #298	; 0x12a
 800594c:	d105      	bne.n	800595a <SD_SendSDStatus+0xaa>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800594e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005950:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005954:	d0ef      	beq.n	8005936 <SD_SendSDStatus+0x86>
      for(count = 0U; count < 8U; count++)
 8005956:	4637      	mov	r7, r6
 8005958:	e7eb      	b.n	8005932 <SD_SendSDStatus+0x82>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800595a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800595c:	f012 0f08 	tst.w	r2, #8
 8005960:	d126      	bne.n	80059b0 <SD_SendSDStatus+0x100>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005964:	f012 0f02 	tst.w	r2, #2
 8005968:	d124      	bne.n	80059b4 <SD_SendSDStatus+0x104>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800596a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596c:	f013 0f20 	tst.w	r3, #32
 8005970:	d122      	bne.n	80059b8 <SD_SendSDStatus+0x108>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8005972:	6820      	ldr	r0, [r4, #0]
 8005974:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005976:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800597a:	d00d      	beq.n	8005998 <SD_SendSDStatus+0xe8>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800597c:	f001 fd98 	bl	80074b0 <SDMMC_ReadFIFO>
 8005980:	f845 0b04 	str.w	r0, [r5], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005984:	f7fa fe18 	bl	80005b8 <HAL_GetTick>
 8005988:	eba0 0008 	sub.w	r0, r0, r8
 800598c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005990:	d1ef      	bne.n	8005972 <SD_SendSDStatus+0xc2>
      return HAL_SD_ERROR_TIMEOUT;
 8005992:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005996:	e004      	b.n	80059a2 <SD_SendSDStatus+0xf2>
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005998:	4b08      	ldr	r3, [pc, #32]	; (80059bc <SD_SendSDStatus+0x10c>)
 800599a:	6383      	str	r3, [r0, #56]	; 0x38
  return HAL_SD_ERROR_NONE;
 800599c:	e001      	b.n	80059a2 <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800599e:	f44f 6600 	mov.w	r6, #2048	; 0x800
}
 80059a2:	4630      	mov	r0, r6
 80059a4:	b006      	add	sp, #24
 80059a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_SD_ERROR_TIMEOUT;
 80059aa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80059ae:	e7f8      	b.n	80059a2 <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80059b0:	2608      	movs	r6, #8
 80059b2:	e7f6      	b.n	80059a2 <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80059b4:	2602      	movs	r6, #2
 80059b6:	e7f4      	b.n	80059a2 <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_RX_OVERRUN;
 80059b8:	2620      	movs	r6, #32
 80059ba:	e7f2      	b.n	80059a2 <SD_SendSDStatus+0xf2>
 80059bc:	18000f3a 	.word	0x18000f3a

080059c0 <SD_FindSCR>:
{
 80059c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059c4:	b088      	sub	sp, #32
 80059c6:	4604      	mov	r4, r0
 80059c8:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 80059ca:	f7fa fdf5 	bl	80005b8 <HAL_GetTick>
 80059ce:	4606      	mov	r6, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 80059d0:	2300      	movs	r3, #0
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80059d6:	2108      	movs	r1, #8
 80059d8:	6820      	ldr	r0, [r4, #0]
 80059da:	f001 feab 	bl	8007734 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80059de:	4605      	mov	r5, r0
 80059e0:	b118      	cbz	r0, 80059ea <SD_FindSCR+0x2a>
}
 80059e2:	4628      	mov	r0, r5
 80059e4:	b008      	add	sp, #32
 80059e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80059ea:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80059ec:	0409      	lsls	r1, r1, #16
 80059ee:	6820      	ldr	r0, [r4, #0]
 80059f0:	f001 ff8e 	bl	8007910 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80059f4:	4605      	mov	r5, r0
 80059f6:	2800      	cmp	r0, #0
 80059f8:	d1f3      	bne.n	80059e2 <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80059fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059fe:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8005a00:	2308      	movs	r3, #8
 8005a02:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005a04:	2330      	movs	r3, #48	; 0x30
 8005a06:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005a08:	2302      	movs	r3, #2
 8005a0a:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005a10:	2301      	movs	r3, #1
 8005a12:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005a14:	a902      	add	r1, sp, #8
 8005a16:	6820      	ldr	r0, [r4, #0]
 8005a18:	f001 fe7a 	bl	8007710 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005a1c:	6820      	ldr	r0, [r4, #0]
 8005a1e:	f001 ffbf 	bl	80079a0 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a22:	4605      	mov	r5, r0
 8005a24:	2800      	cmp	r0, #0
 8005a26:	d1dc      	bne.n	80059e2 <SD_FindSCR+0x22>
  uint32_t index = 0U;
 8005a28:	4680      	mov	r8, r0
 8005a2a:	e005      	b.n	8005a38 <SD_FindSCR+0x78>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005a2c:	f7fa fdc4 	bl	80005b8 <HAL_GetTick>
 8005a30:	1b80      	subs	r0, r0, r6
 8005a32:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005a36:	d048      	beq.n	8005aca <SD_FindSCR+0x10a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8005a38:	6820      	ldr	r0, [r4, #0]
 8005a3a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005a3c:	f240 532a 	movw	r3, #1322	; 0x52a
 8005a40:	421a      	tst	r2, r3
 8005a42:	d110      	bne.n	8005a66 <SD_FindSCR+0xa6>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8005a44:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005a46:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005a4a:	d1ef      	bne.n	8005a2c <SD_FindSCR+0x6c>
 8005a4c:	f1b8 0f00 	cmp.w	r8, #0
 8005a50:	d1ec      	bne.n	8005a2c <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8005a52:	f001 fd2d 	bl	80074b0 <SDMMC_ReadFIFO>
 8005a56:	9000      	str	r0, [sp, #0]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8005a58:	6820      	ldr	r0, [r4, #0]
 8005a5a:	f001 fd29 	bl	80074b0 <SDMMC_ReadFIFO>
 8005a5e:	9001      	str	r0, [sp, #4]
      index++;
 8005a60:	f108 0801 	add.w	r8, r8, #1
 8005a64:	e7e2      	b.n	8005a2c <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005a66:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005a68:	f013 0f08 	tst.w	r3, #8
 8005a6c:	d124      	bne.n	8005ab8 <SD_FindSCR+0xf8>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005a6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005a70:	f013 0f02 	tst.w	r3, #2
 8005a74:	d123      	bne.n	8005abe <SD_FindSCR+0xfe>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005a76:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005a78:	f013 0f20 	tst.w	r3, #32
 8005a7c:	d122      	bne.n	8005ac4 <SD_FindSCR+0x104>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005a7e:	4b14      	ldr	r3, [pc, #80]	; (8005ad0 <SD_FindSCR+0x110>)
 8005a80:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005a82:	9a01      	ldr	r2, [sp, #4]
 8005a84:	0213      	lsls	r3, r2, #8
 8005a86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a8a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005a8e:	0a11      	lsrs	r1, r2, #8
 8005a90:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005a94:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005a96:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005a9a:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005a9c:	9a00      	ldr	r2, [sp, #0]
 8005a9e:	0213      	lsls	r3, r2, #8
 8005aa0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005aa4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005aa8:	0a11      	lsrs	r1, r2, #8
 8005aaa:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005aae:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005ab0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005ab4:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 8005ab6:	e794      	b.n	80059e2 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005ab8:	2508      	movs	r5, #8
 8005aba:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005abc:	e791      	b.n	80059e2 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005abe:	2502      	movs	r5, #2
 8005ac0:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005ac2:	e78e      	b.n	80059e2 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005ac4:	2520      	movs	r5, #32
 8005ac6:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8005ac8:	e78b      	b.n	80059e2 <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 8005aca:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8005ace:	e788      	b.n	80059e2 <SD_FindSCR+0x22>
 8005ad0:	18000f3a 	.word	0x18000f3a

08005ad4 <SD_WideBus_Enable>:
{
 8005ad4:	b510      	push	{r4, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 8005ada:	2100      	movs	r1, #0
 8005adc:	9100      	str	r1, [sp, #0]
 8005ade:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005ae0:	6800      	ldr	r0, [r0, #0]
 8005ae2:	f001 fd0c 	bl	80074fe <SDMMC_GetResponse>
 8005ae6:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005aea:	d116      	bne.n	8005b1a <SD_WideBus_Enable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 8005aec:	4669      	mov	r1, sp
 8005aee:	4620      	mov	r0, r4
 8005af0:	f7ff ff66 	bl	80059c0 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005af4:	4603      	mov	r3, r0
 8005af6:	b990      	cbnz	r0, 8005b1e <SD_WideBus_Enable+0x4a>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005af8:	9b01      	ldr	r3, [sp, #4]
 8005afa:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005afe:	d011      	beq.n	8005b24 <SD_WideBus_Enable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005b02:	0409      	lsls	r1, r1, #16
 8005b04:	6820      	ldr	r0, [r4, #0]
 8005b06:	f001 ff03 	bl	8007910 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	b938      	cbnz	r0, 8005b1e <SD_WideBus_Enable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005b0e:	2102      	movs	r1, #2
 8005b10:	6820      	ldr	r0, [r4, #0]
 8005b12:	f001 ff2c 	bl	800796e <SDMMC_CmdBusWidth>
 8005b16:	4603      	mov	r3, r0
 8005b18:	e001      	b.n	8005b1e <SD_WideBus_Enable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005b1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	b002      	add	sp, #8
 8005b22:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005b24:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005b28:	e7f9      	b.n	8005b1e <SD_WideBus_Enable+0x4a>

08005b2a <SD_WideBus_Disable>:
{
 8005b2a:	b510      	push	{r4, lr}
 8005b2c:	b082      	sub	sp, #8
 8005b2e:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 8005b30:	2100      	movs	r1, #0
 8005b32:	9100      	str	r1, [sp, #0]
 8005b34:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005b36:	6800      	ldr	r0, [r0, #0]
 8005b38:	f001 fce1 	bl	80074fe <SDMMC_GetResponse>
 8005b3c:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005b40:	d116      	bne.n	8005b70 <SD_WideBus_Disable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 8005b42:	4669      	mov	r1, sp
 8005b44:	4620      	mov	r0, r4
 8005b46:	f7ff ff3b 	bl	80059c0 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	b990      	cbnz	r0, 8005b74 <SD_WideBus_Disable+0x4a>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005b4e:	9b01      	ldr	r3, [sp, #4]
 8005b50:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005b54:	d011      	beq.n	8005b7a <SD_WideBus_Disable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b56:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005b58:	0409      	lsls	r1, r1, #16
 8005b5a:	6820      	ldr	r0, [r4, #0]
 8005b5c:	f001 fed8 	bl	8007910 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b60:	4603      	mov	r3, r0
 8005b62:	b938      	cbnz	r0, 8005b74 <SD_WideBus_Disable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005b64:	2100      	movs	r1, #0
 8005b66:	6820      	ldr	r0, [r4, #0]
 8005b68:	f001 ff01 	bl	800796e <SDMMC_CmdBusWidth>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	e001      	b.n	8005b74 <SD_WideBus_Disable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005b70:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	b002      	add	sp, #8
 8005b78:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005b7a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005b7e:	e7f9      	b.n	8005b74 <SD_WideBus_Disable+0x4a>

08005b80 <SD_SendStatus>:
{
 8005b80:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 8005b82:	b181      	cbz	r1, 8005ba6 <SD_SendStatus+0x26>
 8005b84:	460d      	mov	r5, r1
 8005b86:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b88:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005b8a:	0409      	lsls	r1, r1, #16
 8005b8c:	6800      	ldr	r0, [r0, #0]
 8005b8e:	f001 ff65 	bl	8007a5c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b92:	4606      	mov	r6, r0
 8005b94:	b108      	cbz	r0, 8005b9a <SD_SendStatus+0x1a>
}
 8005b96:	4630      	mov	r0, r6
 8005b98:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	6820      	ldr	r0, [r4, #0]
 8005b9e:	f001 fcae 	bl	80074fe <SDMMC_GetResponse>
 8005ba2:	6028      	str	r0, [r5, #0]
  return HAL_SD_ERROR_NONE;
 8005ba4:	e7f7      	b.n	8005b96 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 8005ba6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 8005baa:	e7f4      	b.n	8005b96 <SD_SendStatus+0x16>

08005bac <HAL_SD_ReadBlocks>:
{
 8005bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bb0:	b086      	sub	sp, #24
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	460d      	mov	r5, r1
 8005bb6:	4616      	mov	r6, r2
 8005bb8:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8005bba:	f7fa fcfd 	bl	80005b8 <HAL_GetTick>
  if(NULL == pData)
 8005bbe:	b16d      	cbz	r5, 8005bdc <HAL_SD_ReadBlocks+0x30>
 8005bc0:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8005bc2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d00d      	beq.n	8005be8 <HAL_SD_ReadBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005bcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005bce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bd2:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005bd4:	2001      	movs	r0, #1
}
 8005bd6:	b006      	add	sp, #24
 8005bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005bdc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005bde:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005be2:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005be4:	2001      	movs	r0, #1
 8005be6:	e7f6      	b.n	8005bd6 <HAL_SD_ReadBlocks+0x2a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005be8:	2300      	movs	r3, #0
 8005bea:	63a3      	str	r3, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005bec:	19f3      	adds	r3, r6, r7
 8005bee:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d82d      	bhi.n	8005c50 <HAL_SD_ReadBlocks+0xa4>
    hsd->State = HAL_SD_STATE_BUSY;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005c00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d000      	beq.n	8005c08 <HAL_SD_ReadBlocks+0x5c>
      add *= 512U;
 8005c06:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c0c:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005c0e:	027b      	lsls	r3, r7, #9
 8005c10:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005c12:	2390      	movs	r3, #144	; 0x90
 8005c14:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005c16:	2302      	movs	r3, #2
 8005c18:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005c1e:	9305      	str	r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005c20:	4669      	mov	r1, sp
 8005c22:	6820      	ldr	r0, [r4, #0]
 8005c24:	f001 fd74 	bl	8007710 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005c28:	6822      	ldr	r2, [r4, #0]
 8005c2a:	68d3      	ldr	r3, [r2, #12]
 8005c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c30:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 8005c32:	2f01      	cmp	r7, #1
 8005c34:	d912      	bls.n	8005c5c <HAL_SD_ReadBlocks+0xb0>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005c36:	2302      	movs	r3, #2
 8005c38:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005c3a:	4631      	mov	r1, r6
 8005c3c:	6820      	ldr	r0, [r4, #0]
 8005c3e:	f001 fdab 	bl	8007798 <SDMMC_CmdReadMultiBlock>
 8005c42:	4682      	mov	sl, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c44:	f1ba 0f00 	cmp.w	sl, #0
 8005c48:	d110      	bne.n	8005c6c <HAL_SD_ReadBlocks+0xc0>
    dataremaining = config.DataLength;
 8005c4a:	f8dd 9004 	ldr.w	r9, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005c4e:	e024      	b.n	8005c9a <HAL_SD_ReadBlocks+0xee>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005c50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005c56:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8005c58:	2001      	movs	r0, #1
 8005c5a:	e7bc      	b.n	8005bd6 <HAL_SD_ReadBlocks+0x2a>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005c60:	4631      	mov	r1, r6
 8005c62:	6820      	ldr	r0, [r4, #0]
 8005c64:	f001 fd7f 	bl	8007766 <SDMMC_CmdReadSingleBlock>
 8005c68:	4682      	mov	sl, r0
 8005c6a:	e7eb      	b.n	8005c44 <HAL_SD_ReadBlocks+0x98>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	4a4c      	ldr	r2, [pc, #304]	; (8005da0 <HAL_SD_ReadBlocks+0x1f4>)
 8005c70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005c72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c74:	ea43 030a 	orr.w	r3, r3, sl
 8005c78:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c7a:	2001      	movs	r0, #1
 8005c7c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c80:	2300      	movs	r3, #0
 8005c82:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005c84:	e7a7      	b.n	8005bd6 <HAL_SD_ReadBlocks+0x2a>
        dataremaining -= 32U;
 8005c86:	f1a9 0920 	sub.w	r9, r9, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005c8a:	f7fa fc95 	bl	80005b8 <HAL_GetTick>
 8005c8e:	eba0 0008 	sub.w	r0, r0, r8
 8005c92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c94:	4298      	cmp	r0, r3
 8005c96:	d21e      	bcs.n	8005cd6 <HAL_SD_ReadBlocks+0x12a>
 8005c98:	b1eb      	cbz	r3, 8005cd6 <HAL_SD_ReadBlocks+0x12a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005c9a:	6823      	ldr	r3, [r4, #0]
 8005c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c9e:	f412 7f95 	tst.w	r2, #298	; 0x12a
 8005ca2:	d126      	bne.n	8005cf2 <HAL_SD_ReadBlocks+0x146>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8005ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005caa:	d0ee      	beq.n	8005c8a <HAL_SD_ReadBlocks+0xde>
 8005cac:	f1b9 0f1f 	cmp.w	r9, #31
 8005cb0:	d9eb      	bls.n	8005c8a <HAL_SD_ReadBlocks+0xde>
        for(count = 0U; count < 8U; count++)
 8005cb2:	4656      	mov	r6, sl
 8005cb4:	2e07      	cmp	r6, #7
 8005cb6:	d8e6      	bhi.n	8005c86 <HAL_SD_ReadBlocks+0xda>
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005cb8:	6820      	ldr	r0, [r4, #0]
 8005cba:	f001 fbf9 	bl	80074b0 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005cbe:	7028      	strb	r0, [r5, #0]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005cc0:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8005cc4:	706b      	strb	r3, [r5, #1]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005cc6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8005cca:	70ab      	strb	r3, [r5, #2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005ccc:	0e00      	lsrs	r0, r0, #24
 8005cce:	70e8      	strb	r0, [r5, #3]
          tempbuff++;
 8005cd0:	3504      	adds	r5, #4
        for(count = 0U; count < 8U; count++)
 8005cd2:	3601      	adds	r6, #1
 8005cd4:	e7ee      	b.n	8005cb4 <HAL_SD_ReadBlocks+0x108>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	4a31      	ldr	r2, [pc, #196]	; (8005da0 <HAL_SD_ReadBlocks+0x1f4>)
 8005cda:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005cdc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ce2:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005cea:	2300      	movs	r3, #0
 8005cec:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8005cee:	2003      	movs	r0, #3
 8005cf0:	e771      	b.n	8005bd6 <HAL_SD_ReadBlocks+0x2a>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005cf2:	68da      	ldr	r2, [r3, #12]
 8005cf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cf8:	60da      	str	r2, [r3, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005cfa:	6820      	ldr	r0, [r4, #0]
 8005cfc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005cfe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005d02:	d004      	beq.n	8005d0e <HAL_SD_ReadBlocks+0x162>
 8005d04:	2f01      	cmp	r7, #1
 8005d06:	d902      	bls.n	8005d0e <HAL_SD_ReadBlocks+0x162>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005d08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	d118      	bne.n	8005d40 <HAL_SD_ReadBlocks+0x194>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d12:	f012 0f08 	tst.w	r2, #8
 8005d16:	d124      	bne.n	8005d62 <HAL_SD_ReadBlocks+0x1b6>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005d18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d1a:	f012 0f02 	tst.w	r2, #2
 8005d1e:	d12c      	bne.n	8005d7a <HAL_SD_ReadBlocks+0x1ce>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d22:	f012 0f20 	tst.w	r2, #32
 8005d26:	d034      	beq.n	8005d92 <HAL_SD_ReadBlocks+0x1e6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d28:	4a1d      	ldr	r2, [pc, #116]	; (8005da0 <HAL_SD_ReadBlocks+0x1f4>)
 8005d2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005d2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d2e:	f043 0320 	orr.w	r3, r3, #32
 8005d32:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d34:	2001      	movs	r0, #1
 8005d36:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005d3e:	e74a      	b.n	8005bd6 <HAL_SD_ReadBlocks+0x2a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005d40:	f001 fd76 	bl	8007830 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8005d44:	4603      	mov	r3, r0
 8005d46:	2800      	cmp	r0, #0
 8005d48:	d0e1      	beq.n	8005d0e <HAL_SD_ReadBlocks+0x162>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d4a:	6822      	ldr	r2, [r4, #0]
 8005d4c:	4914      	ldr	r1, [pc, #80]	; (8005da0 <HAL_SD_ReadBlocks+0x1f4>)
 8005d4e:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005d50:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005d52:	4313      	orrs	r3, r2
 8005d54:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005d56:	2001      	movs	r0, #1
 8005d58:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 8005d60:	e739      	b.n	8005bd6 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d62:	4a0f      	ldr	r2, [pc, #60]	; (8005da0 <HAL_SD_ReadBlocks+0x1f4>)
 8005d64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005d66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d68:	f043 0308 	orr.w	r3, r3, #8
 8005d6c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d6e:	2001      	movs	r0, #1
 8005d70:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d74:	2300      	movs	r3, #0
 8005d76:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005d78:	e72d      	b.n	8005bd6 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d7a:	4a09      	ldr	r2, [pc, #36]	; (8005da0 <HAL_SD_ReadBlocks+0x1f4>)
 8005d7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005d7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d80:	f043 0302 	orr.w	r3, r3, #2
 8005d84:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d86:	2001      	movs	r0, #1
 8005d88:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005d90:	e721      	b.n	8005bd6 <HAL_SD_ReadBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005d92:	4a04      	ldr	r2, [pc, #16]	; (8005da4 <HAL_SD_ReadBlocks+0x1f8>)
 8005d94:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005d96:	2301      	movs	r3, #1
 8005d98:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	e71a      	b.n	8005bd6 <HAL_SD_ReadBlocks+0x2a>
 8005da0:	1fe00fff 	.word	0x1fe00fff
 8005da4:	18000f3a 	.word	0x18000f3a

08005da8 <HAL_SD_WriteBlocks>:
{
 8005da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dac:	b088      	sub	sp, #32
 8005dae:	4604      	mov	r4, r0
 8005db0:	460d      	mov	r5, r1
 8005db2:	4616      	mov	r6, r2
 8005db4:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8005db6:	f7fa fbff 	bl	80005b8 <HAL_GetTick>
  if(NULL == pData)
 8005dba:	b16d      	cbz	r5, 8005dd8 <HAL_SD_WriteBlocks+0x30>
 8005dbc:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8005dbe:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d00d      	beq.n	8005de4 <HAL_SD_WriteBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005dc8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005dca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dce:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005dd0:	2001      	movs	r0, #1
}
 8005dd2:	b008      	add	sp, #32
 8005dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005dd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005dda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dde:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005de0:	2001      	movs	r0, #1
 8005de2:	e7f6      	b.n	8005dd2 <HAL_SD_WriteBlocks+0x2a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005de4:	2300      	movs	r3, #0
 8005de6:	63a3      	str	r3, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005de8:	19f3      	adds	r3, r6, r7
 8005dea:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d82c      	bhi.n	8005e4a <HAL_SD_WriteBlocks+0xa2>
    hsd->State = HAL_SD_STATE_BUSY;
 8005df0:	2303      	movs	r3, #3
 8005df2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8005df6:	6823      	ldr	r3, [r4, #0]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005dfc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d000      	beq.n	8005e04 <HAL_SD_WriteBlocks+0x5c>
      add *= 512U;
 8005e02:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005e04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e08:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005e0a:	027b      	lsls	r3, r7, #9
 8005e0c:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005e0e:	2390      	movs	r3, #144	; 0x90
 8005e10:	9304      	str	r3, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005e12:	2300      	movs	r3, #0
 8005e14:	9305      	str	r3, [sp, #20]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005e16:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005e18:	9307      	str	r3, [sp, #28]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005e1a:	a902      	add	r1, sp, #8
 8005e1c:	6820      	ldr	r0, [r4, #0]
 8005e1e:	f001 fc77 	bl	8007710 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005e22:	6822      	ldr	r2, [r4, #0]
 8005e24:	68d3      	ldr	r3, [r2, #12]
 8005e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e2a:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 8005e2c:	2f01      	cmp	r7, #1
 8005e2e:	d912      	bls.n	8005e56 <HAL_SD_WriteBlocks+0xae>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005e30:	2320      	movs	r3, #32
 8005e32:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005e34:	4631      	mov	r1, r6
 8005e36:	6820      	ldr	r0, [r4, #0]
 8005e38:	f001 fce0 	bl	80077fc <SDMMC_CmdWriteMultiBlock>
 8005e3c:	4682      	mov	sl, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e3e:	f1ba 0f00 	cmp.w	sl, #0
 8005e42:	d110      	bne.n	8005e66 <HAL_SD_WriteBlocks+0xbe>
    dataremaining = config.DataLength;
 8005e44:	f8dd 900c 	ldr.w	r9, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005e48:	e024      	b.n	8005e94 <HAL_SD_WriteBlocks+0xec>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005e4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005e50:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8005e52:	2001      	movs	r0, #1
 8005e54:	e7bd      	b.n	8005dd2 <HAL_SD_WriteBlocks+0x2a>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005e56:	2310      	movs	r3, #16
 8005e58:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005e5a:	4631      	mov	r1, r6
 8005e5c:	6820      	ldr	r0, [r4, #0]
 8005e5e:	f001 fcb4 	bl	80077ca <SDMMC_CmdWriteSingleBlock>
 8005e62:	4682      	mov	sl, r0
 8005e64:	e7eb      	b.n	8005e3e <HAL_SD_WriteBlocks+0x96>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	4a4e      	ldr	r2, [pc, #312]	; (8005fa4 <HAL_SD_WriteBlocks+0x1fc>)
 8005e6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005e6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e6e:	ea43 030a 	orr.w	r3, r3, sl
 8005e72:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e74:	2001      	movs	r0, #1
 8005e76:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005e7e:	e7a8      	b.n	8005dd2 <HAL_SD_WriteBlocks+0x2a>
        dataremaining -= 32U;
 8005e80:	f1a9 0920 	sub.w	r9, r9, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005e84:	f7fa fb98 	bl	80005b8 <HAL_GetTick>
 8005e88:	eba0 0008 	sub.w	r0, r0, r8
 8005e8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e8e:	4298      	cmp	r0, r3
 8005e90:	d222      	bcs.n	8005ed8 <HAL_SD_WriteBlocks+0x130>
 8005e92:	b30b      	cbz	r3, 8005ed8 <HAL_SD_WriteBlocks+0x130>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005e94:	6823      	ldr	r3, [r4, #0]
 8005e96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e98:	f412 7f8d 	tst.w	r2, #282	; 0x11a
 8005e9c:	d12a      	bne.n	8005ef4 <HAL_SD_WriteBlocks+0x14c>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8005e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005ea4:	d0ee      	beq.n	8005e84 <HAL_SD_WriteBlocks+0xdc>
 8005ea6:	f1b9 0f1f 	cmp.w	r9, #31
 8005eaa:	d9eb      	bls.n	8005e84 <HAL_SD_WriteBlocks+0xdc>
        for(count = 0U; count < 8U; count++)
 8005eac:	4656      	mov	r6, sl
 8005eae:	2e07      	cmp	r6, #7
 8005eb0:	d8e6      	bhi.n	8005e80 <HAL_SD_WriteBlocks+0xd8>
          data = (uint32_t)(*tempbuff);
 8005eb2:	782b      	ldrb	r3, [r5, #0]
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005eb4:	786a      	ldrb	r2, [r5, #1]
 8005eb6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005eba:	78aa      	ldrb	r2, [r5, #2]
 8005ebc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005ec0:	78ea      	ldrb	r2, [r5, #3]
 8005ec2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005ec6:	a908      	add	r1, sp, #32
 8005ec8:	f841 3d1c 	str.w	r3, [r1, #-28]!
          tempbuff++;
 8005ecc:	3504      	adds	r5, #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005ece:	6820      	ldr	r0, [r4, #0]
 8005ed0:	f001 faf1 	bl	80074b6 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005ed4:	3601      	adds	r6, #1
 8005ed6:	e7ea      	b.n	8005eae <HAL_SD_WriteBlocks+0x106>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	4a32      	ldr	r2, [pc, #200]	; (8005fa4 <HAL_SD_WriteBlocks+0x1fc>)
 8005edc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005ede:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ee0:	ea43 030a 	orr.w	r3, r3, sl
 8005ee4:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005eec:	2300      	movs	r3, #0
 8005eee:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8005ef0:	2003      	movs	r0, #3
 8005ef2:	e76e      	b.n	8005dd2 <HAL_SD_WriteBlocks+0x2a>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005efa:	60da      	str	r2, [r3, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005efc:	6820      	ldr	r0, [r4, #0]
 8005efe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005f00:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005f04:	d004      	beq.n	8005f10 <HAL_SD_WriteBlocks+0x168>
 8005f06:	2f01      	cmp	r7, #1
 8005f08:	d902      	bls.n	8005f10 <HAL_SD_WriteBlocks+0x168>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005f0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005f0c:	2b03      	cmp	r3, #3
 8005f0e:	d118      	bne.n	8005f42 <HAL_SD_WriteBlocks+0x19a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f14:	f012 0f08 	tst.w	r2, #8
 8005f18:	d124      	bne.n	8005f64 <HAL_SD_WriteBlocks+0x1bc>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005f1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f1c:	f012 0f02 	tst.w	r2, #2
 8005f20:	d12c      	bne.n	8005f7c <HAL_SD_WriteBlocks+0x1d4>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8005f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f24:	f012 0f10 	tst.w	r2, #16
 8005f28:	d034      	beq.n	8005f94 <HAL_SD_WriteBlocks+0x1ec>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f2a:	4a1e      	ldr	r2, [pc, #120]	; (8005fa4 <HAL_SD_WriteBlocks+0x1fc>)
 8005f2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005f2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f30:	f043 0310 	orr.w	r3, r3, #16
 8005f34:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f36:	2001      	movs	r0, #1
 8005f38:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005f40:	e747      	b.n	8005dd2 <HAL_SD_WriteBlocks+0x2a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005f42:	f001 fc75 	bl	8007830 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8005f46:	4603      	mov	r3, r0
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	d0e1      	beq.n	8005f10 <HAL_SD_WriteBlocks+0x168>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f4c:	6822      	ldr	r2, [r4, #0]
 8005f4e:	4915      	ldr	r1, [pc, #84]	; (8005fa4 <HAL_SD_WriteBlocks+0x1fc>)
 8005f50:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005f52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005f54:	4313      	orrs	r3, r2
 8005f56:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005f58:	2001      	movs	r0, #1
 8005f5a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 8005f62:	e736      	b.n	8005dd2 <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f64:	4a0f      	ldr	r2, [pc, #60]	; (8005fa4 <HAL_SD_WriteBlocks+0x1fc>)
 8005f66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005f68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f6a:	f043 0308 	orr.w	r3, r3, #8
 8005f6e:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f70:	2001      	movs	r0, #1
 8005f72:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f76:	2300      	movs	r3, #0
 8005f78:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005f7a:	e72a      	b.n	8005dd2 <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f7c:	4a09      	ldr	r2, [pc, #36]	; (8005fa4 <HAL_SD_WriteBlocks+0x1fc>)
 8005f7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005f80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f82:	f043 0302 	orr.w	r3, r3, #2
 8005f86:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f88:	2001      	movs	r0, #1
 8005f8a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005f92:	e71e      	b.n	8005dd2 <HAL_SD_WriteBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005f94:	4a04      	ldr	r2, [pc, #16]	; (8005fa8 <HAL_SD_WriteBlocks+0x200>)
 8005f96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	e717      	b.n	8005dd2 <HAL_SD_WriteBlocks+0x2a>
 8005fa2:	bf00      	nop
 8005fa4:	1fe00fff 	.word	0x1fe00fff
 8005fa8:	18000f3a 	.word	0x18000f3a

08005fac <HAL_SD_ErrorCallback>:
}
 8005fac:	4770      	bx	lr

08005fae <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 8005fae:	4770      	bx	lr

08005fb0 <SD_PowerON>:
{
 8005fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	9301      	str	r3, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8005fba:	f7fa fafd 	bl	80005b8 <HAL_GetTick>
 8005fbe:	4607      	mov	r7, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005fc0:	6820      	ldr	r0, [r4, #0]
 8005fc2:	f001 fc7a 	bl	80078ba <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fc6:	4606      	mov	r6, r0
 8005fc8:	b110      	cbz	r0, 8005fd0 <SD_PowerON+0x20>
}
 8005fca:	4630      	mov	r0, r6
 8005fcc:	b003      	add	sp, #12
 8005fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005fd0:	6820      	ldr	r0, [r4, #0]
 8005fd2:	f001 fc85 	bl	80078e0 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fd6:	b938      	cbnz	r0, 8005fe8 <SD_PowerON+0x38>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	6423      	str	r3, [r4, #64]	; 0x40
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005fdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d00b      	beq.n	8005ffa <SD_PowerON+0x4a>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005fe2:	4635      	mov	r5, r6
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	e014      	b.n	8006012 <SD_PowerON+0x62>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005fec:	6820      	ldr	r0, [r4, #0]
 8005fee:	f001 fc64 	bl	80078ba <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ff2:	2800      	cmp	r0, #0
 8005ff4:	d0f2      	beq.n	8005fdc <SD_PowerON+0x2c>
      return errorstate;
 8005ff6:	4606      	mov	r6, r0
 8005ff8:	e7e7      	b.n	8005fca <SD_PowerON+0x1a>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	6820      	ldr	r0, [r4, #0]
 8005ffe:	f001 fc87 	bl	8007910 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006002:	2800      	cmp	r0, #0
 8006004:	d0ed      	beq.n	8005fe2 <SD_PowerON+0x32>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006006:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 800600a:	e7de      	b.n	8005fca <SD_PowerON+0x1a>
    count++;
 800600c:	9b01      	ldr	r3, [sp, #4]
 800600e:	3301      	adds	r3, #1
 8006010:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006012:	9a01      	ldr	r2, [sp, #4]
 8006014:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8006018:	429a      	cmp	r2, r3
 800601a:	d815      	bhi.n	8006048 <SD_PowerON+0x98>
 800601c:	b9a5      	cbnz	r5, 8006048 <SD_PowerON+0x98>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800601e:	2100      	movs	r1, #0
 8006020:	6820      	ldr	r0, [r4, #0]
 8006022:	f001 fc75 	bl	8007910 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006026:	2800      	cmp	r0, #0
 8006028:	d167      	bne.n	80060fa <SD_PowerON+0x14a>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800602a:	493b      	ldr	r1, [pc, #236]	; (8006118 <SD_PowerON+0x168>)
 800602c:	6820      	ldr	r0, [r4, #0]
 800602e:	f001 fc88 	bl	8007942 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006032:	4605      	mov	r5, r0
 8006034:	2800      	cmp	r0, #0
 8006036:	d162      	bne.n	80060fe <SD_PowerON+0x14e>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006038:	2100      	movs	r1, #0
 800603a:	6820      	ldr	r0, [r4, #0]
 800603c:	f001 fa5f 	bl	80074fe <SDMMC_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006040:	0fc3      	lsrs	r3, r0, #31
 8006042:	d0e3      	beq.n	800600c <SD_PowerON+0x5c>
 8006044:	461d      	mov	r5, r3
 8006046:	e7e1      	b.n	800600c <SD_PowerON+0x5c>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006048:	9a01      	ldr	r2, [sp, #4]
 800604a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800604e:	429a      	cmp	r2, r3
 8006050:	d858      	bhi.n	8006104 <SD_PowerON+0x154>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006052:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006056:	d0b8      	beq.n	8005fca <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006058:	2301      	movs	r3, #1
 800605a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800605c:	69a3      	ldr	r3, [r4, #24]
 800605e:	2b02      	cmp	r3, #2
 8006060:	d1b3      	bne.n	8005fca <SD_PowerON+0x1a>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8006062:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8006066:	d0b0      	beq.n	8005fca <SD_PowerON+0x1a>
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006068:	f44f 7300 	mov.w	r3, #512	; 0x200
 800606c:	65e3      	str	r3, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800606e:	6822      	ldr	r2, [r4, #0]
 8006070:	6813      	ldr	r3, [r2, #0]
 8006072:	f043 0308 	orr.w	r3, r3, #8
 8006076:	6013      	str	r3, [r2, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8006078:	6820      	ldr	r0, [r4, #0]
 800607a:	f001 fd21 	bl	8007ac0 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 800607e:	4606      	mov	r6, r0
 8006080:	2800      	cmp	r0, #0
 8006082:	d1a2      	bne.n	8005fca <SD_PowerON+0x1a>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006088:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
 800608c:	d108      	bne.n	80060a0 <SD_PowerON+0xf0>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800608e:	f7fa fa93 	bl	80005b8 <HAL_GetTick>
 8006092:	1bc0      	subs	r0, r0, r7
 8006094:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006098:	d1f4      	bne.n	8006084 <SD_PowerON+0xd4>
            return HAL_SD_ERROR_TIMEOUT;
 800609a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800609e:	e794      	b.n	8005fca <SD_PowerON+0x1a>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80060a0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80060a4:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060aa:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80060ae:	d02c      	beq.n	800610a <SD_PowerON+0x15a>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 80060b0:	2001      	movs	r0, #1
 80060b2:	f7ff ff7c 	bl	8005fae <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80060b6:	6822      	ldr	r2, [r4, #0]
 80060b8:	6813      	ldr	r3, [r2, #0]
 80060ba:	f043 0304 	orr.w	r3, r3, #4
 80060be:	6013      	str	r3, [r2, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80060c0:	6823      	ldr	r3, [r4, #0]
 80060c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060c4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80060c8:	d108      	bne.n	80060dc <SD_PowerON+0x12c>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80060ca:	f7fa fa75 	bl	80005b8 <HAL_GetTick>
 80060ce:	1bc0      	subs	r0, r0, r7
 80060d0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80060d4:	d1f4      	bne.n	80060c0 <SD_PowerON+0x110>
              return HAL_SD_ERROR_TIMEOUT;
 80060d6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80060da:	e776      	b.n	8005fca <SD_PowerON+0x1a>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 80060dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80060e0:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 80060e2:	6823      	ldr	r3, [r4, #0]
 80060e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060e6:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 80060ea:	d111      	bne.n	8006110 <SD_PowerON+0x160>
          hsd->Instance->POWER = 0x13U;
 80060ec:	2213      	movs	r2, #19
 80060ee:	601a      	str	r2, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060f6:	639a      	str	r2, [r3, #56]	; 0x38
 80060f8:	e767      	b.n	8005fca <SD_PowerON+0x1a>
      return errorstate;
 80060fa:	4606      	mov	r6, r0
 80060fc:	e765      	b.n	8005fca <SD_PowerON+0x1a>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80060fe:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8006102:	e762      	b.n	8005fca <SD_PowerON+0x1a>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006104:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 8006108:	e75f      	b.n	8005fca <SD_PowerON+0x1a>
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800610a:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 800610e:	e75c      	b.n	8005fca <SD_PowerON+0x1a>
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006110:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 8006114:	e759      	b.n	8005fca <SD_PowerON+0x1a>
 8006116:	bf00      	nop
 8006118:	c1100000 	.word	0xc1100000

0800611c <HAL_SD_GetCardCSD>:
{
 800611c:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800611e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006120:	0f9b      	lsrs	r3, r3, #30
 8006122:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006124:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006126:	f3c3 6383 	ubfx	r3, r3, #26, #4
 800612a:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800612c:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
 8006130:	f003 0303 	and.w	r3, r3, #3
 8006134:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006136:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 800613a:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800613c:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8006140:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006142:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8006146:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006148:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800614a:	0d1b      	lsrs	r3, r3, #20
 800614c:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800614e:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
 8006152:	f003 030f 	and.w	r3, r3, #15
 8006156:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006158:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800615a:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 800615e:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006160:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006162:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8006166:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006168:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800616a:	f3c3 3340 	ubfx	r3, r3, #13, #1
 800616e:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006170:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006172:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006176:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006178:	2300      	movs	r3, #0
 800617a:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800617c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800617e:	2b00      	cmp	r3, #0
 8006180:	f040 8088 	bne.w	8006294 <HAL_SD_GetCardCSD+0x178>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006184:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8006186:	f640 73fc 	movw	r3, #4092	; 0xffc
 800618a:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 800618e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8006190:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8006194:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006196:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006198:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 800619c:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800619e:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80061a8:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80061aa:	f3c3 5342 	ubfx	r3, r3, #21, #3
 80061ae:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80061b0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80061b2:	f3c3 4382 	ubfx	r3, r3, #18, #3
 80061b6:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80061b8:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80061ba:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 80061be:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80061c0:	690b      	ldr	r3, [r1, #16]
 80061c2:	3301      	adds	r3, #1
 80061c4:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80061c6:	7e0a      	ldrb	r2, [r1, #24]
 80061c8:	f002 0207 	and.w	r2, r2, #7
 80061cc:	3202      	adds	r2, #2
 80061ce:	fa03 f202 	lsl.w	r2, r3, r2
 80061d2:	64c2      	str	r2, [r0, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80061d4:	7a0b      	ldrb	r3, [r1, #8]
 80061d6:	f003 040f 	and.w	r4, r3, #15
 80061da:	2301      	movs	r3, #1
 80061dc:	40a3      	lsls	r3, r4
 80061de:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80061e0:	0a5b      	lsrs	r3, r3, #9
 80061e2:	fb03 f302 	mul.w	r3, r3, r2
 80061e6:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80061e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061ec:	6583      	str	r3, [r0, #88]	; 0x58
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80061ee:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80061f0:	f3c3 3380 	ubfx	r3, r3, #14, #1
 80061f4:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80061f6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80061f8:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 80061fc:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80061fe:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006204:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006206:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006208:	0fdb      	lsrs	r3, r3, #31
 800620a:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800620c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800620e:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8006212:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006214:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006216:	f3c3 6382 	ubfx	r3, r3, #26, #3
 800621a:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800621c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800621e:	f3c3 5383 	ubfx	r3, r3, #22, #4
 8006222:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006224:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006226:	f3c3 5340 	ubfx	r3, r3, #21, #1
 800622a:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 800622e:	2300      	movs	r3, #0
 8006230:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006234:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8006238:	f002 0201 	and.w	r2, r2, #1
 800623c:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006240:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006242:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8006246:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800624a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800624c:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8006250:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006254:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006256:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800625a:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800625e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006260:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8006264:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006268:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800626a:	f3c2 2281 	ubfx	r2, r2, #10, #2
 800626e:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006272:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006274:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8006278:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800627c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800627e:	f3c2 0246 	ubfx	r2, r2, #1, #7
 8006282:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8006286:	2201      	movs	r2, #1
 8006288:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 800628c:	4618      	mov	r0, r3
}
 800628e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006292:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006294:	2b01      	cmp	r3, #1
 8006296:	d00b      	beq.n	80062b0 <HAL_SD_GetCardCSD+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006298:	6803      	ldr	r3, [r0, #0]
 800629a:	4a0e      	ldr	r2, [pc, #56]	; (80062d4 <HAL_SD_GetCardCSD+0x1b8>)
 800629c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800629e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80062a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062a4:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80062a6:	2301      	movs	r3, #1
 80062a8:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 80062ac:	4618      	mov	r0, r3
 80062ae:	e7ee      	b.n	800628e <HAL_SD_GetCardCSD+0x172>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80062b0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80062b2:	041b      	lsls	r3, r3, #16
 80062b4:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80062b8:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 80062bc:	4313      	orrs	r3, r2
 80062be:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80062c0:	690b      	ldr	r3, [r1, #16]
 80062c2:	3301      	adds	r3, #1
 80062c4:	029b      	lsls	r3, r3, #10
 80062c6:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80062c8:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80062ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062ce:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80062d0:	6583      	str	r3, [r0, #88]	; 0x58
 80062d2:	e78c      	b.n	80061ee <HAL_SD_GetCardCSD+0xd2>
 80062d4:	1fe00fff 	.word	0x1fe00fff

080062d8 <SD_InitCard>:
{
 80062d8:	b510      	push	{r4, lr}
 80062da:	b08c      	sub	sp, #48	; 0x30
 80062dc:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 80062de:	2301      	movs	r3, #1
 80062e0:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80062e4:	6800      	ldr	r0, [r0, #0]
 80062e6:	f001 f8f1 	bl	80074cc <SDMMC_GetPowerState>
 80062ea:	2800      	cmp	r0, #0
 80062ec:	d05c      	beq.n	80063a8 <SD_InitCard+0xd0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80062ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80062f0:	2b03      	cmp	r3, #3
 80062f2:	d136      	bne.n	8006362 <SD_InitCard+0x8a>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80062f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d14d      	bne.n	8006396 <SD_InitCard+0xbe>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80062fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d01d      	beq.n	800633c <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 8006300:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8006304:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006306:	0409      	lsls	r1, r1, #16
 8006308:	6820      	ldr	r0, [r4, #0]
 800630a:	f001 fb78 	bl	80079fe <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800630e:	4603      	mov	r3, r0
 8006310:	2800      	cmp	r0, #0
 8006312:	d14b      	bne.n	80063ac <SD_InitCard+0xd4>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006314:	2100      	movs	r1, #0
 8006316:	6820      	ldr	r0, [r4, #0]
 8006318:	f001 f8f1 	bl	80074fe <SDMMC_GetResponse>
 800631c:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800631e:	2104      	movs	r1, #4
 8006320:	6820      	ldr	r0, [r4, #0]
 8006322:	f001 f8ec 	bl	80074fe <SDMMC_GetResponse>
 8006326:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006328:	2108      	movs	r1, #8
 800632a:	6820      	ldr	r0, [r4, #0]
 800632c:	f001 f8e7 	bl	80074fe <SDMMC_GetResponse>
 8006330:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006332:	210c      	movs	r1, #12
 8006334:	6820      	ldr	r0, [r4, #0]
 8006336:	f001 f8e2 	bl	80074fe <SDMMC_GetResponse>
 800633a:	66e0      	str	r0, [r4, #108]	; 0x6c
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800633c:	2104      	movs	r1, #4
 800633e:	6820      	ldr	r0, [r4, #0]
 8006340:	f001 f8dd 	bl	80074fe <SDMMC_GetResponse>
 8006344:	0d00      	lsrs	r0, r0, #20
 8006346:	6460      	str	r0, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006348:	a901      	add	r1, sp, #4
 800634a:	4620      	mov	r0, r4
 800634c:	f7ff fee6 	bl	800611c <HAL_SD_GetCardCSD>
 8006350:	bb78      	cbnz	r0, 80063b2 <SD_InitCard+0xda>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006352:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006354:	0412      	lsls	r2, r2, #16
 8006356:	2300      	movs	r3, #0
 8006358:	6820      	ldr	r0, [r4, #0]
 800635a:	f001 fa95 	bl	8007888 <SDMMC_CmdSelDesel>
 800635e:	4603      	mov	r3, r0
 8006360:	e024      	b.n	80063ac <SD_InitCard+0xd4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006362:	6820      	ldr	r0, [r4, #0]
 8006364:	f001 fb35 	bl	80079d2 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006368:	4603      	mov	r3, r0
 800636a:	b9f8      	cbnz	r0, 80063ac <SD_InitCard+0xd4>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800636c:	2100      	movs	r1, #0
 800636e:	6820      	ldr	r0, [r4, #0]
 8006370:	f001 f8c5 	bl	80074fe <SDMMC_GetResponse>
 8006374:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006376:	2104      	movs	r1, #4
 8006378:	6820      	ldr	r0, [r4, #0]
 800637a:	f001 f8c0 	bl	80074fe <SDMMC_GetResponse>
 800637e:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006380:	2108      	movs	r1, #8
 8006382:	6820      	ldr	r0, [r4, #0]
 8006384:	f001 f8bb 	bl	80074fe <SDMMC_GetResponse>
 8006388:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800638a:	210c      	movs	r1, #12
 800638c:	6820      	ldr	r0, [r4, #0]
 800638e:	f001 f8b6 	bl	80074fe <SDMMC_GetResponse>
 8006392:	67e0      	str	r0, [r4, #124]	; 0x7c
 8006394:	e7ae      	b.n	80062f4 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006396:	f10d 0102 	add.w	r1, sp, #2
 800639a:	6820      	ldr	r0, [r4, #0]
 800639c:	f001 fb45 	bl	8007a2a <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80063a0:	4603      	mov	r3, r0
 80063a2:	2800      	cmp	r0, #0
 80063a4:	d0a9      	beq.n	80062fa <SD_InitCard+0x22>
 80063a6:	e001      	b.n	80063ac <SD_InitCard+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80063a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	b00c      	add	sp, #48	; 0x30
 80063b0:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80063b6:	e7f9      	b.n	80063ac <SD_InitCard+0xd4>

080063b8 <HAL_SD_InitCard>:
{
 80063b8:	b510      	push	{r4, lr}
 80063ba:	b08a      	sub	sp, #40	; 0x28
 80063bc:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80063be:	2300      	movs	r3, #0
 80063c0:	9304      	str	r3, [sp, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80063c2:	9305      	str	r3, [sp, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80063c4:	9306      	str	r3, [sp, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80063c6:	9307      	str	r3, [sp, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80063c8:	23fa      	movs	r3, #250	; 0xfa
 80063ca:	9308      	str	r3, [sp, #32]
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80063cc:	6983      	ldr	r3, [r0, #24]
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d028      	beq.n	8006424 <HAL_SD_InitCard+0x6c>
  (void)SDMMC_Init(hsd->Instance, Init);
 80063d2:	ab0a      	add	r3, sp, #40	; 0x28
 80063d4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80063d8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80063dc:	ab04      	add	r3, sp, #16
 80063de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063e0:	6820      	ldr	r0, [r4, #0]
 80063e2:	f001 f84b 	bl	800747c <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80063e6:	6820      	ldr	r0, [r4, #0]
 80063e8:	f001 f86a 	bl	80074c0 <SDMMC_PowerState_ON>
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 80063ec:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80063f0:	f7fe fbbc 	bl	8004b6c <HAL_RCCEx_GetPeriphCLKFreq>
 80063f4:	4b20      	ldr	r3, [pc, #128]	; (8006478 <HAL_SD_InitCard+0xc0>)
 80063f6:	fba3 3000 	umull	r3, r0, r3, r0
  if(sdmmc_clk != 0U)
 80063fa:	0940      	lsrs	r0, r0, #5
 80063fc:	d018      	beq.n	8006430 <HAL_SD_InitCard+0x78>
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80063fe:	4b1f      	ldr	r3, [pc, #124]	; (800647c <HAL_SD_InitCard+0xc4>)
 8006400:	fbb3 f0f0 	udiv	r0, r3, r0
 8006404:	3001      	adds	r0, #1
 8006406:	f7fa f8dd 	bl	80005c4 <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 800640a:	4620      	mov	r0, r4
 800640c:	f7ff fdd0 	bl	8005fb0 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006410:	4602      	mov	r2, r0
 8006412:	b188      	cbz	r0, 8006438 <HAL_SD_InitCard+0x80>
    hsd->State = HAL_SD_STATE_READY;
 8006414:	2001      	movs	r0, #1
 8006416:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800641a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800641c:	4313      	orrs	r3, r2
 800641e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8006420:	b00a      	add	sp, #40	; 0x28
 8006422:	bd10      	pop	{r4, pc}
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8006424:	6802      	ldr	r2, [r0, #0]
 8006426:	6813      	ldr	r3, [r2, #0]
 8006428:	f043 0310 	orr.w	r3, r3, #16
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	e7d0      	b.n	80063d2 <HAL_SD_InitCard+0x1a>
    HAL_Delay(2U);
 8006430:	2002      	movs	r0, #2
 8006432:	f7fa f8c7 	bl	80005c4 <HAL_Delay>
 8006436:	e7e8      	b.n	800640a <HAL_SD_InitCard+0x52>
  errorstate = SD_InitCard(hsd);
 8006438:	4620      	mov	r0, r4
 800643a:	f7ff ff4d 	bl	80062d8 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 800643e:	4602      	mov	r2, r0
 8006440:	b130      	cbz	r0, 8006450 <HAL_SD_InitCard+0x98>
    hsd->State = HAL_SD_STATE_READY;
 8006442:	2001      	movs	r0, #1
 8006444:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006448:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800644a:	4313      	orrs	r3, r2
 800644c:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800644e:	e7e7      	b.n	8006420 <HAL_SD_InitCard+0x68>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006450:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006454:	6820      	ldr	r0, [r4, #0]
 8006456:	f001 f96d 	bl	8007734 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800645a:	4603      	mov	r3, r0
 800645c:	b148      	cbz	r0, 8006472 <HAL_SD_InitCard+0xba>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800645e:	6822      	ldr	r2, [r4, #0]
 8006460:	4907      	ldr	r1, [pc, #28]	; (8006480 <HAL_SD_InitCard+0xc8>)
 8006462:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006464:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006466:	4318      	orrs	r0, r3
 8006468:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800646a:	2001      	movs	r0, #1
 800646c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    return HAL_ERROR;
 8006470:	e7d6      	b.n	8006420 <HAL_SD_InitCard+0x68>
  return HAL_OK;
 8006472:	2000      	movs	r0, #0
 8006474:	e7d4      	b.n	8006420 <HAL_SD_InitCard+0x68>
 8006476:	bf00      	nop
 8006478:	10624dd3 	.word	0x10624dd3
 800647c:	00012110 	.word	0x00012110
 8006480:	1fe00fff 	.word	0x1fe00fff

08006484 <HAL_SD_GetCardStatus>:
{
 8006484:	b530      	push	{r4, r5, lr}
 8006486:	b091      	sub	sp, #68	; 0x44
 8006488:	4605      	mov	r5, r0
 800648a:	460c      	mov	r4, r1
  errorstate = SD_SendSDStatus(hsd, sd_status);
 800648c:	4669      	mov	r1, sp
 800648e:	f7ff fa0f 	bl	80058b0 <SD_SendSDStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006492:	b1c8      	cbz	r0, 80064c8 <HAL_SD_GetCardStatus+0x44>
 8006494:	4603      	mov	r3, r0
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006496:	682a      	ldr	r2, [r5, #0]
 8006498:	4929      	ldr	r1, [pc, #164]	; (8006540 <HAL_SD_GetCardStatus+0xbc>)
 800649a:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800649c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800649e:	4318      	orrs	r0, r3
 80064a0:	63a8      	str	r0, [r5, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80064a2:	2401      	movs	r4, #1
 80064a4:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80064a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80064ac:	6828      	ldr	r0, [r5, #0]
 80064ae:	f001 f941 	bl	8007734 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80064b2:	b130      	cbz	r0, 80064c2 <HAL_SD_GetCardStatus+0x3e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064b4:	682a      	ldr	r2, [r5, #0]
 80064b6:	4922      	ldr	r1, [pc, #136]	; (8006540 <HAL_SD_GetCardStatus+0xbc>)
 80064b8:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80064ba:	63a8      	str	r0, [r5, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80064bc:	2401      	movs	r4, #1
 80064be:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
}
 80064c2:	4620      	mov	r0, r4
 80064c4:	b011      	add	sp, #68	; 0x44
 80064c6:	bd30      	pop	{r4, r5, pc}
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80064c8:	9a00      	ldr	r2, [sp, #0]
 80064ca:	f3c2 1381 	ubfx	r3, r2, #6, #2
 80064ce:	7023      	strb	r3, [r4, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80064d0:	f3c2 1340 	ubfx	r3, r2, #5, #1
 80064d4:	7063      	strb	r3, [r4, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80064d6:	0a13      	lsrs	r3, r2, #8
 80064d8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80064dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	8063      	strh	r3, [r4, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80064e4:	9a01      	ldr	r2, [sp, #4]
 80064e6:	0213      	lsls	r3, r2, #8
 80064e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80064f0:	0a11      	lsrs	r1, r2, #8
 80064f2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80064f6:	430b      	orrs	r3, r1
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80064f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80064fc:	6063      	str	r3, [r4, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80064fe:	9b02      	ldr	r3, [sp, #8]
 8006500:	b2da      	uxtb	r2, r3
 8006502:	7222      	strb	r2, [r4, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006504:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006508:	7262      	strb	r2, [r4, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800650a:	f3c3 5203 	ubfx	r2, r3, #20, #4
 800650e:	72a2      	strb	r2, [r4, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006510:	0c1b      	lsrs	r3, r3, #16
 8006512:	9a03      	ldr	r2, [sp, #12]
 8006514:	b2d1      	uxtb	r1, r2
 8006516:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800651a:	430b      	orrs	r3, r1
 800651c:	81a3      	strh	r3, [r4, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800651e:	f3c2 2385 	ubfx	r3, r2, #10, #6
 8006522:	73a3      	strb	r3, [r4, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006524:	f3c2 2301 	ubfx	r3, r2, #8, #2
 8006528:	73e3      	strb	r3, [r4, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800652a:	f3c2 1303 	ubfx	r3, r2, #4, #4
 800652e:	7423      	strb	r3, [r4, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006530:	f002 020f 	and.w	r2, r2, #15
 8006534:	7462      	strb	r2, [r4, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006536:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800653a:	74a3      	strb	r3, [r4, #18]
  HAL_StatusTypeDef status = HAL_OK;
 800653c:	2400      	movs	r4, #0
 800653e:	e7b3      	b.n	80064a8 <HAL_SD_GetCardStatus+0x24>
 8006540:	1fe00fff 	.word	0x1fe00fff

08006544 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006544:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006546:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006548:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800654a:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800654c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800654e:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006550:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006552:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006554:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006556:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006558:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800655a:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800655c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800655e:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006560:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006562:	61cb      	str	r3, [r1, #28]
}
 8006564:	2000      	movs	r0, #0
 8006566:	4770      	bx	lr

08006568 <HAL_SD_ConfigWideBusOperation>:
{
 8006568:	b530      	push	{r4, r5, lr}
 800656a:	b08b      	sub	sp, #44	; 0x2c
 800656c:	4604      	mov	r4, r0
 800656e:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8006570:	2303      	movs	r3, #3
 8006572:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006576:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006578:	2b03      	cmp	r3, #3
 800657a:	d01c      	beq.n	80065b6 <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800657c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006580:	d008      	beq.n	8006594 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006582:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8006586:	d00a      	beq.n	800659e <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006588:	b179      	cbz	r1, 80065aa <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800658a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800658c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006590:	6383      	str	r3, [r0, #56]	; 0x38
 8006592:	e014      	b.n	80065be <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006594:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800659a:	6383      	str	r3, [r0, #56]	; 0x38
 800659c:	e00f      	b.n	80065be <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 800659e:	f7ff fa99 	bl	8005ad4 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 80065a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80065a4:	4318      	orrs	r0, r3
 80065a6:	63a0      	str	r0, [r4, #56]	; 0x38
 80065a8:	e009      	b.n	80065be <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 80065aa:	f7ff fabe 	bl	8005b2a <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 80065ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80065b0:	4318      	orrs	r0, r3
 80065b2:	63a0      	str	r0, [r4, #56]	; 0x38
 80065b4:	e003      	b.n	80065be <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80065b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80065b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065bc:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80065be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80065c0:	b1bb      	cbz	r3, 80065f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	4a1e      	ldr	r2, [pc, #120]	; (8006640 <HAL_SD_ConfigWideBusOperation+0xd8>)
 80065c6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80065c8:	2501      	movs	r5, #1
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80065ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065ce:	6820      	ldr	r0, [r4, #0]
 80065d0:	f001 f8b0 	bl	8007734 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80065d4:	4603      	mov	r3, r0
 80065d6:	b130      	cbz	r0, 80065e6 <HAL_SD_ConfigWideBusOperation+0x7e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065d8:	6822      	ldr	r2, [r4, #0]
 80065da:	4919      	ldr	r1, [pc, #100]	; (8006640 <HAL_SD_ConfigWideBusOperation+0xd8>)
 80065dc:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80065de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80065e0:	4318      	orrs	r0, r3
 80065e2:	63a0      	str	r0, [r4, #56]	; 0x38
    status = HAL_ERROR;
 80065e4:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 80065e6:	2301      	movs	r3, #1
 80065e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80065ec:	4628      	mov	r0, r5
 80065ee:	b00b      	add	sp, #44	; 0x2c
 80065f0:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80065f2:	6863      	ldr	r3, [r4, #4]
 80065f4:	9304      	str	r3, [sp, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80065f6:	68a3      	ldr	r3, [r4, #8]
 80065f8:	9305      	str	r3, [sp, #20]
    Init.BusWide             = WideMode;
 80065fa:	9506      	str	r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80065fc:	6923      	ldr	r3, [r4, #16]
 80065fe:	9307      	str	r3, [sp, #28]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8006600:	6963      	ldr	r3, [r4, #20]
 8006602:	2b03      	cmp	r3, #3
 8006604:	d90c      	bls.n	8006620 <HAL_SD_ConfigWideBusOperation+0xb8>
      Init.ClockDiv = hsd->Init.ClockDiv;
 8006606:	9308      	str	r3, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8006608:	ab0a      	add	r3, sp, #40	; 0x28
 800660a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800660e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006612:	ab04      	add	r3, sp, #16
 8006614:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006616:	6820      	ldr	r0, [r4, #0]
 8006618:	f000 ff30 	bl	800747c <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 800661c:	2500      	movs	r5, #0
 800661e:	e7d4      	b.n	80065ca <HAL_SD_ConfigWideBusOperation+0x62>
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006620:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006622:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8006626:	d005      	beq.n	8006634 <HAL_SD_ConfigWideBusOperation+0xcc>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006628:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800662c:	d004      	beq.n	8006638 <HAL_SD_ConfigWideBusOperation+0xd0>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800662e:	2304      	movs	r3, #4
 8006630:	9308      	str	r3, [sp, #32]
 8006632:	e7e9      	b.n	8006608 <HAL_SD_ConfigWideBusOperation+0xa0>
      Init.ClockDiv = hsd->Init.ClockDiv;
 8006634:	9308      	str	r3, [sp, #32]
 8006636:	e7e7      	b.n	8006608 <HAL_SD_ConfigWideBusOperation+0xa0>
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8006638:	2302      	movs	r3, #2
 800663a:	9308      	str	r3, [sp, #32]
 800663c:	e7e4      	b.n	8006608 <HAL_SD_ConfigWideBusOperation+0xa0>
 800663e:	bf00      	nop
 8006640:	1fe00fff 	.word	0x1fe00fff

08006644 <HAL_SD_GetCardState>:
{
 8006644:	b510      	push	{r4, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 800664a:	a902      	add	r1, sp, #8
 800664c:	2300      	movs	r3, #0
 800664e:	f841 3d04 	str.w	r3, [r1, #-4]!
  errorstate = SD_SendStatus(hsd, &resp1);
 8006652:	f7ff fa95 	bl	8005b80 <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006656:	b118      	cbz	r0, 8006660 <HAL_SD_GetCardState+0x1c>
 8006658:	4603      	mov	r3, r0
    hsd->ErrorCode |= errorstate;
 800665a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800665c:	4318      	orrs	r0, r3
 800665e:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8006660:	9801      	ldr	r0, [sp, #4]
 8006662:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8006666:	b002      	add	sp, #8
 8006668:	bd10      	pop	{r4, pc}

0800666a <HAL_SD_Init>:
{
 800666a:	b570      	push	{r4, r5, r6, lr}
 800666c:	b086      	sub	sp, #24
  if(hsd == NULL)
 800666e:	2800      	cmp	r0, #0
 8006670:	d058      	beq.n	8006724 <HAL_SD_Init+0xba>
 8006672:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 8006674:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8006678:	b93b      	cbnz	r3, 800668a <HAL_SD_Init+0x20>
    hsd->Lock = HAL_UNLOCKED;
 800667a:	7703      	strb	r3, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800667c:	6983      	ldr	r3, [r0, #24]
 800667e:	b90b      	cbnz	r3, 8006684 <HAL_SD_Init+0x1a>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8006680:	2302      	movs	r3, #2
 8006682:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 8006684:	4620      	mov	r0, r4
 8006686:	f002 fe8b 	bl	80093a0 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800668a:	2303      	movs	r3, #3
 800668c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006690:	4620      	mov	r0, r4
 8006692:	f7ff fe91 	bl	80063b8 <HAL_SD_InitCard>
 8006696:	b118      	cbz	r0, 80066a0 <HAL_SD_Init+0x36>
    return HAL_ERROR;
 8006698:	2501      	movs	r5, #1
}
 800669a:	4628      	mov	r0, r5
 800669c:	b006      	add	sp, #24
 800669e:	bd70      	pop	{r4, r5, r6, pc}
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80066a0:	a901      	add	r1, sp, #4
 80066a2:	4620      	mov	r0, r4
 80066a4:	f7ff feee 	bl	8006484 <HAL_SD_GetCardStatus>
 80066a8:	2800      	cmp	r0, #0
 80066aa:	d13d      	bne.n	8006728 <HAL_SD_Init+0xbe>
  speedgrade = CardStatus.UhsSpeedGrade;
 80066ac:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80066b0:	b2da      	uxtb	r2, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 80066b2:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80066b6:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80066b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80066ba:	2901      	cmp	r1, #1
 80066bc:	d00b      	beq.n	80066d6 <HAL_SD_Init+0x6c>
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80066be:	2901      	cmp	r1, #1
 80066c0:	d00f      	beq.n	80066e2 <HAL_SD_Init+0x78>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80066c2:	2300      	movs	r3, #0
 80066c4:	65e3      	str	r3, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80066c6:	68e1      	ldr	r1, [r4, #12]
 80066c8:	4620      	mov	r0, r4
 80066ca:	f7ff ff4d 	bl	8006568 <HAL_SD_ConfigWideBusOperation>
 80066ce:	4605      	mov	r5, r0
 80066d0:	b158      	cbz	r0, 80066ea <HAL_SD_Init+0x80>
    return HAL_ERROR;
 80066d2:	2501      	movs	r5, #1
 80066d4:	e7e1      	b.n	800669a <HAL_SD_Init+0x30>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80066d6:	4313      	orrs	r3, r2
 80066d8:	d0f1      	beq.n	80066be <HAL_SD_Init+0x54>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80066da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066de:	65e3      	str	r3, [r4, #92]	; 0x5c
 80066e0:	e7f1      	b.n	80066c6 <HAL_SD_Init+0x5c>
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80066e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066e6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80066e8:	e7ed      	b.n	80066c6 <HAL_SD_Init+0x5c>
  tickstart = HAL_GetTick();
 80066ea:	f7f9 ff65 	bl	80005b8 <HAL_GetTick>
 80066ee:	4606      	mov	r6, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80066f0:	4620      	mov	r0, r4
 80066f2:	f7ff ffa7 	bl	8006644 <HAL_SD_GetCardState>
 80066f6:	2804      	cmp	r0, #4
 80066f8:	d00d      	beq.n	8006716 <HAL_SD_Init+0xac>
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80066fa:	f7f9 ff5d 	bl	80005b8 <HAL_GetTick>
 80066fe:	1b80      	subs	r0, r0, r6
 8006700:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006704:	d1f4      	bne.n	80066f0 <HAL_SD_Init+0x86>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006706:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800670a:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800670c:	2301      	movs	r3, #1
 800670e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 8006712:	2503      	movs	r5, #3
 8006714:	e7c1      	b.n	800669a <HAL_SD_Init+0x30>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006716:	2300      	movs	r3, #0
 8006718:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800671a:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800671c:	2301      	movs	r3, #1
 800671e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8006722:	e7ba      	b.n	800669a <HAL_SD_Init+0x30>
    return HAL_ERROR;
 8006724:	2501      	movs	r5, #1
 8006726:	e7b8      	b.n	800669a <HAL_SD_Init+0x30>
    return HAL_ERROR;
 8006728:	2501      	movs	r5, #1
 800672a:	e7b6      	b.n	800669a <HAL_SD_Init+0x30>

0800672c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800672c:	4770      	bx	lr

0800672e <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800672e:	4770      	bx	lr

08006730 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8006730:	4770      	bx	lr

08006732 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8006732:	4770      	bx	lr

08006734 <HAL_SD_IRQHandler>:
{
 8006734:	b538      	push	{r3, r4, r5, lr}
 8006736:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 8006738:	6b05      	ldr	r5, [r0, #48]	; 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800673a:	6803      	ldr	r3, [r0, #0]
 800673c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800673e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8006742:	d002      	beq.n	800674a <HAL_SD_IRQHandler+0x16>
 8006744:	f015 0f08 	tst.w	r5, #8
 8006748:	d12a      	bne.n	80067a0 <HAL_SD_IRQHandler+0x6c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800674a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800674c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006750:	d067      	beq.n	8006822 <HAL_SD_IRQHandler+0xee>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006752:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006756:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8006758:	6822      	ldr	r2, [r4, #0]
 800675a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800675c:	4b7e      	ldr	r3, [pc, #504]	; (8006958 <HAL_SD_IRQHandler+0x224>)
 800675e:	400b      	ands	r3, r1
 8006760:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006762:	6822      	ldr	r2, [r4, #0]
 8006764:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800676a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800676c:	6822      	ldr	r2, [r4, #0]
 800676e:	68d3      	ldr	r3, [r2, #12]
 8006770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006774:	60d3      	str	r3, [r2, #12]
    if((context & SD_CONTEXT_IT) != 0U)
 8006776:	f015 0f08 	tst.w	r5, #8
 800677a:	d025      	beq.n	80067c8 <HAL_SD_IRQHandler+0x94>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800677c:	f015 0f22 	tst.w	r5, #34	; 0x22
 8006780:	d111      	bne.n	80067a6 <HAL_SD_IRQHandler+0x72>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	4a75      	ldr	r2, [pc, #468]	; (800695c <HAL_SD_IRQHandler+0x228>)
 8006786:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006788:	2301      	movs	r3, #1
 800678a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800678e:	2300      	movs	r3, #0
 8006790:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006792:	f015 0f03 	tst.w	r5, #3
 8006796:	d013      	beq.n	80067c0 <HAL_SD_IRQHandler+0x8c>
        HAL_SD_RxCpltCallback(hsd);
 8006798:	4620      	mov	r0, r4
 800679a:	f001 ff1b 	bl	80085d4 <HAL_SD_RxCpltCallback>
 800679e:	e001      	b.n	80067a4 <HAL_SD_IRQHandler+0x70>
    SD_Read_IT(hsd);
 80067a0:	f7ff f842 	bl	8005828 <SD_Read_IT>
}
 80067a4:	bd38      	pop	{r3, r4, r5, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80067a6:	6820      	ldr	r0, [r4, #0]
 80067a8:	f001 f842 	bl	8007830 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80067ac:	4603      	mov	r3, r0
 80067ae:	2800      	cmp	r0, #0
 80067b0:	d0e7      	beq.n	8006782 <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
 80067b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80067b4:	4313      	orrs	r3, r2
 80067b6:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80067b8:	4620      	mov	r0, r4
 80067ba:	f7ff fbf7 	bl	8005fac <HAL_SD_ErrorCallback>
 80067be:	e7e0      	b.n	8006782 <HAL_SD_IRQHandler+0x4e>
        HAL_SD_TxCpltCallback(hsd);
 80067c0:	4620      	mov	r0, r4
 80067c2:	f001 ff02 	bl	80085ca <HAL_SD_TxCpltCallback>
 80067c6:	e7ed      	b.n	80067a4 <HAL_SD_IRQHandler+0x70>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80067c8:	f015 0f80 	tst.w	r5, #128	; 0x80
 80067cc:	d0ea      	beq.n	80067a4 <HAL_SD_IRQHandler+0x70>
      hsd->Instance->DLEN = 0;
 80067ce:	6822      	ldr	r2, [r4, #0]
 80067d0:	2300      	movs	r3, #0
 80067d2:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80067d4:	6822      	ldr	r2, [r4, #0]
 80067d6:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80067d8:	6822      	ldr	r2, [r4, #0]
 80067da:	6513      	str	r3, [r2, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80067dc:	f015 0f22 	tst.w	r5, #34	; 0x22
 80067e0:	d10e      	bne.n	8006800 <HAL_SD_IRQHandler+0xcc>
      hsd->State = HAL_SD_STATE_READY;
 80067e2:	2301      	movs	r3, #1
 80067e4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80067e8:	2300      	movs	r3, #0
 80067ea:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80067ec:	f015 0f30 	tst.w	r5, #48	; 0x30
 80067f0:	d113      	bne.n	800681a <HAL_SD_IRQHandler+0xe6>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80067f2:	f015 0f03 	tst.w	r5, #3
 80067f6:	d0d5      	beq.n	80067a4 <HAL_SD_IRQHandler+0x70>
        HAL_SD_RxCpltCallback(hsd);
 80067f8:	4620      	mov	r0, r4
 80067fa:	f001 feeb 	bl	80085d4 <HAL_SD_RxCpltCallback>
 80067fe:	e7d1      	b.n	80067a4 <HAL_SD_IRQHandler+0x70>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006800:	6820      	ldr	r0, [r4, #0]
 8006802:	f001 f815 	bl	8007830 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8006806:	4603      	mov	r3, r0
 8006808:	2800      	cmp	r0, #0
 800680a:	d0ea      	beq.n	80067e2 <HAL_SD_IRQHandler+0xae>
          hsd->ErrorCode |= errorstate;
 800680c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800680e:	4313      	orrs	r3, r2
 8006810:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006812:	4620      	mov	r0, r4
 8006814:	f7ff fbca 	bl	8005fac <HAL_SD_ErrorCallback>
 8006818:	e7e3      	b.n	80067e2 <HAL_SD_IRQHandler+0xae>
        HAL_SD_TxCpltCallback(hsd);
 800681a:	4620      	mov	r0, r4
 800681c:	f001 fed5 	bl	80085ca <HAL_SD_TxCpltCallback>
 8006820:	e7e7      	b.n	80067f2 <HAL_SD_IRQHandler+0xbe>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006824:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8006828:	d002      	beq.n	8006830 <HAL_SD_IRQHandler+0xfc>
 800682a:	f015 0f08 	tst.w	r5, #8
 800682e:	d162      	bne.n	80068f6 <HAL_SD_IRQHandler+0x1c2>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006832:	f012 0f3a 	tst.w	r2, #58	; 0x3a
 8006836:	d06b      	beq.n	8006910 <HAL_SD_IRQHandler+0x1dc>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800683a:	f012 0f02 	tst.w	r2, #2
 800683e:	d003      	beq.n	8006848 <HAL_SD_IRQHandler+0x114>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006840:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006842:	f042 0202 	orr.w	r2, r2, #2
 8006846:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800684a:	f012 0f08 	tst.w	r2, #8
 800684e:	d003      	beq.n	8006858 <HAL_SD_IRQHandler+0x124>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006850:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006852:	f042 0208 	orr.w	r2, r2, #8
 8006856:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800685a:	f012 0f20 	tst.w	r2, #32
 800685e:	d003      	beq.n	8006868 <HAL_SD_IRQHandler+0x134>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006860:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006862:	f042 0220 	orr.w	r2, r2, #32
 8006866:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800686a:	f012 0f10 	tst.w	r2, #16
 800686e:	d003      	beq.n	8006878 <HAL_SD_IRQHandler+0x144>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006870:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006872:	f042 0210 	orr.w	r2, r2, #16
 8006876:	63a2      	str	r2, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006878:	4a38      	ldr	r2, [pc, #224]	; (800695c <HAL_SD_IRQHandler+0x228>)
 800687a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800687c:	6822      	ldr	r2, [r4, #0]
 800687e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006880:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8006884:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006886:	6822      	ldr	r2, [r4, #0]
 8006888:	68d3      	ldr	r3, [r2, #12]
 800688a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800688e:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8006890:	6822      	ldr	r2, [r4, #0]
 8006892:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006894:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006898:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800689a:	6822      	ldr	r2, [r4, #0]
 800689c:	68d3      	ldr	r3, [r2, #12]
 800689e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a2:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80068a4:	6820      	ldr	r0, [r4, #0]
 80068a6:	f000 ffc3 	bl	8007830 <SDMMC_CmdStopTransfer>
 80068aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80068ac:	4318      	orrs	r0, r3
 80068ae:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80068b0:	6822      	ldr	r2, [r4, #0]
 80068b2:	68d3      	ldr	r3, [r2, #12]
 80068b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068b8:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068c0:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80068c2:	f015 0f08 	tst.w	r5, #8
 80068c6:	d11a      	bne.n	80068fe <HAL_SD_IRQHandler+0x1ca>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80068c8:	f015 0f80 	tst.w	r5, #128	; 0x80
 80068cc:	f43f af6a 	beq.w	80067a4 <HAL_SD_IRQHandler+0x70>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80068d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f43f af66 	beq.w	80067a4 <HAL_SD_IRQHandler+0x70>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80068d8:	6822      	ldr	r2, [r4, #0]
 80068da:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80068dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068e0:	63d3      	str	r3, [r2, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	2200      	movs	r2, #0
 80068e6:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80068e8:	2301      	movs	r3, #1
 80068ea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 80068ee:	4620      	mov	r0, r4
 80068f0:	f7ff fb5c 	bl	8005fac <HAL_SD_ErrorCallback>
 80068f4:	e756      	b.n	80067a4 <HAL_SD_IRQHandler+0x70>
    SD_Write_IT(hsd);
 80068f6:	4620      	mov	r0, r4
 80068f8:	f7fe ffb3 	bl	8005862 <SD_Write_IT>
 80068fc:	e752      	b.n	80067a4 <HAL_SD_IRQHandler+0x70>
      hsd->State = HAL_SD_STATE_READY;
 80068fe:	2301      	movs	r3, #1
 8006900:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006904:	2300      	movs	r3, #0
 8006906:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006908:	4620      	mov	r0, r4
 800690a:	f7ff fb4f 	bl	8005fac <HAL_SD_ErrorCallback>
 800690e:	e749      	b.n	80067a4 <HAL_SD_IRQHandler+0x70>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006912:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8006916:	f43f af45 	beq.w	80067a4 <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800691a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800691e:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006920:	6823      	ldr	r3, [r4, #0]
 8006922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006924:	f013 0f04 	tst.w	r3, #4
 8006928:	d10a      	bne.n	8006940 <HAL_SD_IRQHandler+0x20c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800692a:	f015 0f20 	tst.w	r5, #32
 800692e:	d003      	beq.n	8006938 <HAL_SD_IRQHandler+0x204>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8006930:	4620      	mov	r0, r4
 8006932:	f7ff fefe 	bl	8006732 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 8006936:	e735      	b.n	80067a4 <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8006938:	4620      	mov	r0, r4
 800693a:	f7ff fef8 	bl	800672e <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 800693e:	e731      	b.n	80067a4 <HAL_SD_IRQHandler+0x70>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006940:	f015 0f20 	tst.w	r5, #32
 8006944:	d103      	bne.n	800694e <HAL_SD_IRQHandler+0x21a>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8006946:	4620      	mov	r0, r4
 8006948:	f7ff fef0 	bl	800672c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800694c:	e72a      	b.n	80067a4 <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800694e:	4620      	mov	r0, r4
 8006950:	f7ff feee 	bl	8006730 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 8006954:	e726      	b.n	80067a4 <HAL_SD_IRQHandler+0x70>
 8006956:	bf00      	nop
 8006958:	ffff3ec5 	.word	0xffff3ec5
 800695c:	18000f3a 	.word	0x18000f3a

08006960 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006960:	b308      	cbz	r0, 80069a6 <HAL_SDRAM_Init+0x46>
{
 8006962:	b538      	push	{r3, r4, r5, lr}
 8006964:	4604      	mov	r4, r0
 8006966:	460d      	mov	r5, r1
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006968:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800696c:	b1b3      	cbz	r3, 800699c <HAL_SDRAM_Init+0x3c>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800696e:	2302      	movs	r3, #2
 8006970:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006974:	4621      	mov	r1, r4
 8006976:	f851 0b04 	ldr.w	r0, [r1], #4
 800697a:	f000 fc2d 	bl	80071d8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800697e:	6862      	ldr	r2, [r4, #4]
 8006980:	4629      	mov	r1, r5
 8006982:	6820      	ldr	r0, [r4, #0]
 8006984:	f000 fc62 	bl	800724c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8006988:	4a08      	ldr	r2, [pc, #32]	; (80069ac <HAL_SDRAM_Init+0x4c>)
 800698a:	6813      	ldr	r3, [r2, #0]
 800698c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006990:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006992:	2301      	movs	r3, #1
 8006994:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  return HAL_OK;
 8006998:	2000      	movs	r0, #0
}
 800699a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800699c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 80069a0:	f001 ffd8 	bl	8008954 <HAL_SDRAM_MspInit>
 80069a4:	e7e3      	b.n	800696e <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 80069a6:	2001      	movs	r0, #1
}
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	52004000 	.word	0x52004000

080069b0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80069b0:	b538      	push	{r3, r4, r5, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80069b2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80069b6:	b2db      	uxtb	r3, r3
  
  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d01a      	beq.n	80069f2 <HAL_SDRAM_SendCommand+0x42>
  {
    return HAL_BUSY;
  }
  else if((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80069bc:	2b05      	cmp	r3, #5
 80069be:	bf18      	it	ne
 80069c0:	2b01      	cmpne	r3, #1
 80069c2:	d001      	beq.n	80069c8 <HAL_SDRAM_SendCommand+0x18>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 80069c4:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 80069c6:	bd38      	pop	{r3, r4, r5, pc}
 80069c8:	460d      	mov	r5, r1
 80069ca:	4604      	mov	r4, r0
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80069cc:	2302      	movs	r3, #2
 80069ce:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80069d2:	6800      	ldr	r0, [r0, #0]
 80069d4:	f000 fc86 	bl	80072e4 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80069d8:	682b      	ldr	r3, [r5, #0]
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d004      	beq.n	80069e8 <HAL_SDRAM_SendCommand+0x38>
      hsdram->State = HAL_SDRAM_STATE_READY;
 80069de:	2301      	movs	r3, #1
 80069e0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80069e4:	2000      	movs	r0, #0
 80069e6:	e7ee      	b.n	80069c6 <HAL_SDRAM_SendCommand+0x16>
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80069e8:	2305      	movs	r3, #5
 80069ea:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80069ee:	2000      	movs	r0, #0
 80069f0:	e7e9      	b.n	80069c6 <HAL_SDRAM_SendCommand+0x16>
    return HAL_BUSY;
 80069f2:	2002      	movs	r0, #2
 80069f4:	e7e7      	b.n	80069c6 <HAL_SDRAM_SendCommand+0x16>

080069f6 <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80069f6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d013      	beq.n	8006a28 <HAL_SDRAM_ProgramRefreshRate+0x32>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006a00:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d001      	beq.n	8006a0e <HAL_SDRAM_ProgramRefreshRate+0x18>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 8006a0a:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8006a0c:	4770      	bx	lr
{
 8006a0e:	b510      	push	{r4, lr}
 8006a10:	4604      	mov	r4, r0
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006a12:	2302      	movs	r3, #2
 8006a14:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006a18:	6800      	ldr	r0, [r0, #0]
 8006a1a:	f000 fc75 	bl	8007308 <FMC_SDRAM_ProgramRefreshRate>
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8006a24:	2000      	movs	r0, #0
}
 8006a26:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8006a28:	2002      	movs	r0, #2
 8006a2a:	4770      	bx	lr

08006a2c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006a2c:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 8006a2e:	6802      	ldr	r2, [r0, #0]
 8006a30:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006a32:	6991      	ldr	r1, [r2, #24]
 8006a34:	f041 0108 	orr.w	r1, r1, #8
 8006a38:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006a3a:	6801      	ldr	r1, [r0, #0]
 8006a3c:	698a      	ldr	r2, [r1, #24]
 8006a3e:	f042 0210 	orr.w	r2, r2, #16
 8006a42:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a44:	6801      	ldr	r1, [r0, #0]
 8006a46:	680a      	ldr	r2, [r1, #0]
 8006a48:	f022 0201 	bic.w	r2, r2, #1
 8006a4c:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8006a4e:	6801      	ldr	r1, [r0, #0]
 8006a50:	690c      	ldr	r4, [r1, #16]
 8006a52:	4a29      	ldr	r2, [pc, #164]	; (8006af8 <SPI_CloseTransfer+0xcc>)
 8006a54:	4022      	ands	r2, r4
 8006a56:	610a      	str	r2, [r1, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006a58:	6801      	ldr	r1, [r0, #0]
 8006a5a:	688a      	ldr	r2, [r1, #8]
 8006a5c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006a60:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a62:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8006a66:	b2d2      	uxtb	r2, r2
 8006a68:	2a04      	cmp	r2, #4
 8006a6a:	d00d      	beq.n	8006a88 <SPI_CloseTransfer+0x5c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006a6c:	f013 0f20 	tst.w	r3, #32
 8006a70:	d00a      	beq.n	8006a88 <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006a72:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006a76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a7a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006a7e:	6801      	ldr	r1, [r0, #0]
 8006a80:	698a      	ldr	r2, [r1, #24]
 8006a82:	f042 0220 	orr.w	r2, r2, #32
 8006a86:	618a      	str	r2, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006a88:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8006a8c:	b2d2      	uxtb	r2, r2
 8006a8e:	2a03      	cmp	r2, #3
 8006a90:	d00d      	beq.n	8006aae <SPI_CloseTransfer+0x82>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006a92:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006a96:	d00a      	beq.n	8006aae <SPI_CloseTransfer+0x82>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006a98:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006a9c:	f042 0204 	orr.w	r2, r2, #4
 8006aa0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006aa4:	6801      	ldr	r1, [r0, #0]
 8006aa6:	698a      	ldr	r2, [r1, #24]
 8006aa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aac:	618a      	str	r2, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006aae:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006ab2:	d00a      	beq.n	8006aca <SPI_CloseTransfer+0x9e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006ab4:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006ab8:	f042 0201 	orr.w	r2, r2, #1
 8006abc:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006ac0:	6801      	ldr	r1, [r0, #0]
 8006ac2:	698a      	ldr	r2, [r1, #24]
 8006ac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ac8:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006aca:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006ace:	d00a      	beq.n	8006ae6 <SPI_CloseTransfer+0xba>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006ad0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006ad4:	f043 0308 	orr.w	r3, r3, #8
 8006ad8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006adc:	6802      	ldr	r2, [r0, #0]
 8006ade:	6993      	ldr	r3, [r2, #24]
 8006ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ae4:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006aec:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8006af0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	fffffc90 	.word	0xfffffc90

08006afc <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006afc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006afe:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006b00:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006b02:	3008      	adds	r0, #8
 8006b04:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 8006b06:	fb03 0000 	mla	r0, r3, r0, r0
 8006b0a:	4770      	bx	lr

08006b0c <HAL_SPI_Init>:
  if (hspi == NULL)
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	f000 8097 	beq.w	8006c40 <HAL_SPI_Init+0x134>
{
 8006b12:	b570      	push	{r4, r5, r6, lr}
 8006b14:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b16:	2300      	movs	r3, #0
 8006b18:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006b1a:	6805      	ldr	r5, [r0, #0]
 8006b1c:	4b4c      	ldr	r3, [pc, #304]	; (8006c50 <HAL_SPI_Init+0x144>)
 8006b1e:	4e4d      	ldr	r6, [pc, #308]	; (8006c54 <HAL_SPI_Init+0x148>)
 8006b20:	429d      	cmp	r5, r3
 8006b22:	bf18      	it	ne
 8006b24:	42b5      	cmpne	r5, r6
 8006b26:	bf14      	ite	ne
 8006b28:	2601      	movne	r6, #1
 8006b2a:	2600      	moveq	r6, #0
 8006b2c:	d007      	beq.n	8006b3e <HAL_SPI_Init+0x32>
 8006b2e:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8006b32:	429d      	cmp	r5, r3
 8006b34:	d003      	beq.n	8006b3e <HAL_SPI_Init+0x32>
 8006b36:	68c3      	ldr	r3, [r0, #12]
 8006b38:	2b0f      	cmp	r3, #15
 8006b3a:	f200 8083 	bhi.w	8006c44 <HAL_SPI_Init+0x138>
  packet_length = SPI_GetPacketSize(hspi);
 8006b3e:	4620      	mov	r0, r4
 8006b40:	f7ff ffdc 	bl	8006afc <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006b44:	b126      	cbz	r6, 8006b50 <HAL_SPI_Init+0x44>
 8006b46:	4b44      	ldr	r3, [pc, #272]	; (8006c58 <HAL_SPI_Init+0x14c>)
 8006b48:	429d      	cmp	r5, r3
 8006b4a:	d001      	beq.n	8006b50 <HAL_SPI_Init+0x44>
 8006b4c:	2808      	cmp	r0, #8
 8006b4e:	d87b      	bhi.n	8006c48 <HAL_SPI_Init+0x13c>
 8006b50:	4a3f      	ldr	r2, [pc, #252]	; (8006c50 <HAL_SPI_Init+0x144>)
 8006b52:	4b40      	ldr	r3, [pc, #256]	; (8006c54 <HAL_SPI_Init+0x148>)
 8006b54:	429d      	cmp	r5, r3
 8006b56:	bf18      	it	ne
 8006b58:	4295      	cmpne	r5, r2
 8006b5a:	d003      	beq.n	8006b64 <HAL_SPI_Init+0x58>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006b5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b60:	429d      	cmp	r5, r3
 8006b62:	d101      	bne.n	8006b68 <HAL_SPI_Init+0x5c>
 8006b64:	2810      	cmp	r0, #16
 8006b66:	d871      	bhi.n	8006c4c <HAL_SPI_Init+0x140>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b68:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d054      	beq.n	8006c1a <HAL_SPI_Init+0x10e>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006b70:	2302      	movs	r3, #2
 8006b72:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8006b76:	6822      	ldr	r2, [r4, #0]
 8006b78:	6813      	ldr	r3, [r2, #0]
 8006b7a:	f023 0301 	bic.w	r3, r3, #1
 8006b7e:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8006b80:	69a3      	ldr	r3, [r4, #24]
 8006b82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b86:	d04e      	beq.n	8006c26 <HAL_SPI_Init+0x11a>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006b88:	69e3      	ldr	r3, [r4, #28]
 8006b8a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006b90:	4313      	orrs	r3, r2
 8006b92:	68e1      	ldr	r1, [r4, #12]
 8006b94:	6822      	ldr	r2, [r4, #0]
 8006b96:	430b      	orrs	r3, r1
 8006b98:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8006b9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	69a2      	ldr	r2, [r4, #24]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	6922      	ldr	r2, [r4, #16]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	6962      	ldr	r2, [r4, #20]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	6a22      	ldr	r2, [r4, #32]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	6862      	ldr	r2, [r4, #4]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	68a2      	ldr	r2, [r4, #8]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006bc6:	6822      	ldr	r2, [r4, #0]
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006bcc:	6863      	ldr	r3, [r4, #4]
 8006bce:	b96b      	cbnz	r3, 8006bec <HAL_SPI_Init+0xe0>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006bd0:	6822      	ldr	r2, [r4, #0]
 8006bd2:	6893      	ldr	r3, [r2, #8]
 8006bd4:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8006bd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006bdc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006bde:	6822      	ldr	r2, [r4, #0]
 8006be0:	6893      	ldr	r3, [r2, #8]
 8006be2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006be6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006bea:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006bec:	6822      	ldr	r2, [r4, #0]
 8006bee:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006bf0:	f023 0301 	bic.w	r3, r3, #1
 8006bf4:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006bf6:	6863      	ldr	r3, [r4, #4]
 8006bf8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006bfc:	d006      	beq.n	8006c0c <HAL_SPI_Init+0x100>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006bfe:	6822      	ldr	r2, [r4, #0]
 8006c00:	68d3      	ldr	r3, [r2, #12]
 8006c02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c06:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006c08:	430b      	orrs	r3, r1
 8006c0a:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006c12:	2301      	movs	r3, #1
 8006c14:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8006c18:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8006c1a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f002 fc42 	bl	80094a8 <HAL_SPI_MspInit>
 8006c24:	e7a4      	b.n	8006b70 <HAL_SPI_Init+0x64>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8006c26:	6863      	ldr	r3, [r4, #4]
 8006c28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c2c:	d1ac      	bne.n	8006b88 <HAL_SPI_Init+0x7c>
 8006c2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1a9      	bne.n	8006b88 <HAL_SPI_Init+0x7c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006c34:	6822      	ldr	r2, [r4, #0]
 8006c36:	6813      	ldr	r3, [r2, #0]
 8006c38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c3c:	6013      	str	r3, [r2, #0]
 8006c3e:	e7a3      	b.n	8006b88 <HAL_SPI_Init+0x7c>
    return HAL_ERROR;
 8006c40:	2001      	movs	r0, #1
}
 8006c42:	4770      	bx	lr
    return HAL_ERROR;
 8006c44:	2001      	movs	r0, #1
 8006c46:	e7e7      	b.n	8006c18 <HAL_SPI_Init+0x10c>
    return HAL_ERROR;
 8006c48:	2001      	movs	r0, #1
 8006c4a:	e7e5      	b.n	8006c18 <HAL_SPI_Init+0x10c>
 8006c4c:	2001      	movs	r0, #1
 8006c4e:	e7e3      	b.n	8006c18 <HAL_SPI_Init+0x10c>
 8006c50:	40013000 	.word	0x40013000
 8006c54:	40003800 	.word	0x40003800
 8006c58:	40003c00 	.word	0x40003c00

08006c5c <HAL_SPI_TransmitReceive_DMA>:
{
 8006c5c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 8006c5e:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
 8006c62:	2c01      	cmp	r4, #1
 8006c64:	f000 8122 	beq.w	8006eac <HAL_SPI_TransmitReceive_DMA+0x250>
 8006c68:	2401      	movs	r4, #1
 8006c6a:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
  tmp_state   = hspi->State;
 8006c6e:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 8006c72:	b2e4      	uxtb	r4, r4
  tmp_mode    = hspi->Init.Mode;
 8006c74:	6845      	ldr	r5, [r0, #4]
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 8006c76:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 8006c7a:	d034      	beq.n	8006ce6 <HAL_SPI_TransmitReceive_DMA+0x8a>
 8006c7c:	2c01      	cmp	r4, #1
 8006c7e:	d138      	bne.n	8006cf2 <HAL_SPI_TransmitReceive_DMA+0x96>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006c80:	fab2 f482 	clz	r4, r2
 8006c84:	0964      	lsrs	r4, r4, #5
 8006c86:	2900      	cmp	r1, #0
 8006c88:	bf08      	it	eq
 8006c8a:	2401      	moveq	r4, #1
 8006c8c:	2c00      	cmp	r4, #0
 8006c8e:	d136      	bne.n	8006cfe <HAL_SPI_TransmitReceive_DMA+0xa2>
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d034      	beq.n	8006cfe <HAL_SPI_TransmitReceive_DMA+0xa2>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c94:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 8006c98:	b2e4      	uxtb	r4, r4
 8006c9a:	2c04      	cmp	r4, #4
 8006c9c:	d002      	beq.n	8006ca4 <HAL_SPI_TransmitReceive_DMA+0x48>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c9e:	2405      	movs	r4, #5
 8006ca0:	f880 4081 	strb.w	r4, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ca4:	2400      	movs	r4, #0
 8006ca6:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006caa:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8006cac:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 8006cb0:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006cb4:	6642      	str	r2, [r0, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8006cb6:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  hspi->RxXferCount = Size;
 8006cba:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->RxISR       = NULL;
 8006cbe:	6704      	str	r4, [r0, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006cc0:	6744      	str	r4, [r0, #116]	; 0x74
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006cc2:	6801      	ldr	r1, [r0, #0]
 8006cc4:	688a      	ldr	r2, [r1, #8]
 8006cc6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006cca:	608a      	str	r2, [r1, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006ccc:	68c2      	ldr	r2, [r0, #12]
 8006cce:	2a0f      	cmp	r2, #15
 8006cd0:	d91a      	bls.n	8006d08 <HAL_SPI_TransmitReceive_DMA+0xac>
 8006cd2:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 8006cd4:	6989      	ldr	r1, [r1, #24]
 8006cd6:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8006cda:	d015      	beq.n	8006d08 <HAL_SPI_TransmitReceive_DMA+0xac>
    __HAL_UNLOCK(hspi);
 8006cdc:	2300      	movs	r3, #0
 8006cde:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	e009      	b.n	8006cfa <HAL_SPI_TransmitReceive_DMA+0x9e>
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 8006ce6:	6885      	ldr	r5, [r0, #8]
 8006ce8:	2d00      	cmp	r5, #0
 8006cea:	d1c7      	bne.n	8006c7c <HAL_SPI_TransmitReceive_DMA+0x20>
 8006cec:	2c04      	cmp	r4, #4
 8006cee:	d1c5      	bne.n	8006c7c <HAL_SPI_TransmitReceive_DMA+0x20>
 8006cf0:	e7c6      	b.n	8006c80 <HAL_SPI_TransmitReceive_DMA+0x24>
    __HAL_UNLOCK(hspi);
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 8006cf8:	2202      	movs	r2, #2
}
 8006cfa:	4610      	mov	r0, r2
 8006cfc:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hspi);
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 8006d04:	2201      	movs	r2, #1
 8006d06:	e7f8      	b.n	8006cfa <HAL_SPI_TransmitReceive_DMA+0x9e>
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006d08:	2a07      	cmp	r2, #7
 8006d0a:	d907      	bls.n	8006d1c <HAL_SPI_TransmitReceive_DMA+0xc0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8006d0c:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 8006d0e:	6989      	ldr	r1, [r1, #24]
 8006d10:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8006d14:	bf18      	it	ne
 8006d16:	f5b1 4f80 	cmpne.w	r1, #16384	; 0x4000
 8006d1a:	d1df      	bne.n	8006cdc <HAL_SPI_TransmitReceive_DMA+0x80>
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006d1c:	2a07      	cmp	r2, #7
 8006d1e:	d854      	bhi.n	8006dca <HAL_SPI_TransmitReceive_DMA+0x16e>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d20:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8006d22:	6991      	ldr	r1, [r2, #24]
 8006d24:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8006d28:	d033      	beq.n	8006d92 <HAL_SPI_TransmitReceive_DMA+0x136>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006d2a:	6992      	ldr	r2, [r2, #24]
 8006d2c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8006d30:	d036      	beq.n	8006da0 <HAL_SPI_TransmitReceive_DMA+0x144>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d32:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8006d34:	6991      	ldr	r1, [r2, #24]
 8006d36:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8006d3a:	d038      	beq.n	8006dae <HAL_SPI_TransmitReceive_DMA+0x152>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006d3c:	6992      	ldr	r2, [r2, #24]
 8006d3e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8006d42:	d03b      	beq.n	8006dbc <HAL_SPI_TransmitReceive_DMA+0x160>
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006d44:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8006d48:	b2d2      	uxtb	r2, r2
 8006d4a:	2a04      	cmp	r2, #4
 8006d4c:	d057      	beq.n	8006dfe <HAL_SPI_TransmitReceive_DMA+0x1a2>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006d4e:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8006d50:	4957      	ldr	r1, [pc, #348]	; (8006eb0 <HAL_SPI_TransmitReceive_DMA+0x254>)
 8006d52:	6411      	str	r1, [r2, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006d54:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8006d56:	4957      	ldr	r1, [pc, #348]	; (8006eb4 <HAL_SPI_TransmitReceive_DMA+0x258>)
 8006d58:	63d1      	str	r1, [r2, #60]	; 0x3c
 8006d5a:	461d      	mov	r5, r3
 8006d5c:	4604      	mov	r4, r0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006d5e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8006d60:	4a55      	ldr	r2, [pc, #340]	; (8006eb8 <HAL_SPI_TransmitReceive_DMA+0x25c>)
 8006d62:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 8006d64:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8006d66:	2200      	movs	r2, #0
 8006d68:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8006d6a:	6801      	ldr	r1, [r0, #0]
 8006d6c:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8006d70:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8006d72:	3130      	adds	r1, #48	; 0x30
 8006d74:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8006d76:	f7fa ff35 	bl	8001be4 <HAL_DMA_Start_IT>
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	d046      	beq.n	8006e0c <HAL_SPI_TransmitReceive_DMA+0x1b0>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006d7e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006d82:	f043 0310 	orr.w	r3, r3, #16
 8006d86:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 8006d90:	e7b3      	b.n	8006cfa <HAL_SPI_TransmitReceive_DMA+0x9e>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8006d92:	f8b0 1062 	ldrh.w	r1, [r0, #98]	; 0x62
 8006d96:	3101      	adds	r1, #1
 8006d98:	0849      	lsrs	r1, r1, #1
 8006d9a:	f8a0 1062 	strh.w	r1, [r0, #98]	; 0x62
 8006d9e:	e7c4      	b.n	8006d2a <HAL_SPI_TransmitReceive_DMA+0xce>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8006da0:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 8006da4:	3203      	adds	r2, #3
 8006da6:	0892      	lsrs	r2, r2, #2
 8006da8:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
 8006dac:	e7c1      	b.n	8006d32 <HAL_SPI_TransmitReceive_DMA+0xd6>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8006dae:	f8b0 106a 	ldrh.w	r1, [r0, #106]	; 0x6a
 8006db2:	3101      	adds	r1, #1
 8006db4:	0849      	lsrs	r1, r1, #1
 8006db6:	f8a0 106a 	strh.w	r1, [r0, #106]	; 0x6a
 8006dba:	e7bf      	b.n	8006d3c <HAL_SPI_TransmitReceive_DMA+0xe0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8006dbc:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 8006dc0:	3203      	adds	r2, #3
 8006dc2:	0892      	lsrs	r2, r2, #2
 8006dc4:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
 8006dc8:	e7bc      	b.n	8006d44 <HAL_SPI_TransmitReceive_DMA+0xe8>
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8006dca:	2a0f      	cmp	r2, #15
 8006dcc:	d8ba      	bhi.n	8006d44 <HAL_SPI_TransmitReceive_DMA+0xe8>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006dce:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8006dd0:	6992      	ldr	r2, [r2, #24]
 8006dd2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8006dd6:	d00b      	beq.n	8006df0 <HAL_SPI_TransmitReceive_DMA+0x194>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006dd8:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8006dda:	6992      	ldr	r2, [r2, #24]
 8006ddc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8006de0:	d1b0      	bne.n	8006d44 <HAL_SPI_TransmitReceive_DMA+0xe8>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8006de2:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 8006de6:	3201      	adds	r2, #1
 8006de8:	0852      	lsrs	r2, r2, #1
 8006dea:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
 8006dee:	e7a9      	b.n	8006d44 <HAL_SPI_TransmitReceive_DMA+0xe8>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8006df0:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 8006df4:	3201      	adds	r2, #1
 8006df6:	0852      	lsrs	r2, r2, #1
 8006df8:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
 8006dfc:	e7ec      	b.n	8006dd8 <HAL_SPI_TransmitReceive_DMA+0x17c>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006dfe:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8006e00:	492e      	ldr	r1, [pc, #184]	; (8006ebc <HAL_SPI_TransmitReceive_DMA+0x260>)
 8006e02:	6411      	str	r1, [r2, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006e04:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8006e06:	492e      	ldr	r1, [pc, #184]	; (8006ec0 <HAL_SPI_TransmitReceive_DMA+0x264>)
 8006e08:	63d1      	str	r1, [r2, #60]	; 0x3c
 8006e0a:	e7a6      	b.n	8006d5a <HAL_SPI_TransmitReceive_DMA+0xfe>
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8006e0c:	6822      	ldr	r2, [r4, #0]
 8006e0e:	6893      	ldr	r3, [r2, #8]
 8006e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e14:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006e16:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8006e18:	2300      	movs	r3, #0
 8006e1a:	6413      	str	r3, [r2, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006e1c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8006e1e:	63d3      	str	r3, [r2, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006e20:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8006e22:	64d3      	str	r3, [r2, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006e24:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8006e26:	6513      	str	r3, [r2, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 8006e28:	6822      	ldr	r2, [r4, #0]
 8006e2a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8006e2e:	3220      	adds	r2, #32
 8006e30:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006e32:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006e34:	f7fa fed6 	bl	8001be4 <HAL_DMA_Start_IT>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	bb08      	cbnz	r0, 8006e80 <HAL_SPI_TransmitReceive_DMA+0x224>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8006e3c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e44:	d026      	beq.n	8006e94 <HAL_SPI_TransmitReceive_DMA+0x238>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006e46:	6821      	ldr	r1, [r4, #0]
 8006e48:	6848      	ldr	r0, [r1, #4]
 8006e4a:	4b1e      	ldr	r3, [pc, #120]	; (8006ec4 <HAL_SPI_TransmitReceive_DMA+0x268>)
 8006e4c:	4003      	ands	r3, r0
 8006e4e:	432b      	orrs	r3, r5
 8006e50:	604b      	str	r3, [r1, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8006e52:	6821      	ldr	r1, [r4, #0]
 8006e54:	688b      	ldr	r3, [r1, #8]
 8006e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e5a:	608b      	str	r3, [r1, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8006e5c:	6821      	ldr	r1, [r4, #0]
 8006e5e:	690b      	ldr	r3, [r1, #16]
 8006e60:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 8006e64:	610b      	str	r3, [r1, #16]
  __HAL_SPI_ENABLE(hspi);
 8006e66:	6821      	ldr	r1, [r4, #0]
 8006e68:	680b      	ldr	r3, [r1, #0]
 8006e6a:	f043 0301 	orr.w	r3, r3, #1
 8006e6e:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e70:	6863      	ldr	r3, [r4, #4]
 8006e72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e76:	d013      	beq.n	8006ea0 <HAL_SPI_TransmitReceive_DMA+0x244>
  __HAL_UNLOCK(hspi);
 8006e78:	2300      	movs	r3, #0
 8006e7a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 8006e7e:	e73c      	b.n	8006cfa <HAL_SPI_TransmitReceive_DMA+0x9e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006e80:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006e84:	f043 0310 	orr.w	r3, r3, #16
 8006e88:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 8006e92:	e732      	b.n	8006cfa <HAL_SPI_TransmitReceive_DMA+0x9e>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8006e94:	6821      	ldr	r1, [r4, #0]
 8006e96:	6848      	ldr	r0, [r1, #4]
 8006e98:	4b0a      	ldr	r3, [pc, #40]	; (8006ec4 <HAL_SPI_TransmitReceive_DMA+0x268>)
 8006e9a:	4003      	ands	r3, r0
 8006e9c:	604b      	str	r3, [r1, #4]
 8006e9e:	e7d8      	b.n	8006e52 <HAL_SPI_TransmitReceive_DMA+0x1f6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006ea0:	6821      	ldr	r1, [r4, #0]
 8006ea2:	680b      	ldr	r3, [r1, #0]
 8006ea4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ea8:	600b      	str	r3, [r1, #0]
 8006eaa:	e7e5      	b.n	8006e78 <HAL_SPI_TransmitReceive_DMA+0x21c>
  __HAL_LOCK(hspi);
 8006eac:	2202      	movs	r2, #2
 8006eae:	e724      	b.n	8006cfa <HAL_SPI_TransmitReceive_DMA+0x9e>
 8006eb0:	08006f31 	.word	0x08006f31
 8006eb4:	08006ef9 	.word	0x08006ef9
 8006eb8:	08006f3d 	.word	0x08006f3d
 8006ebc:	08006f25 	.word	0x08006f25
 8006ec0:	08006ecd 	.word	0x08006ecd
 8006ec4:	ffff0000 	.word	0xffff0000

08006ec8 <HAL_SPI_TxCpltCallback>:
}
 8006ec8:	4770      	bx	lr

08006eca <HAL_SPI_RxCpltCallback>:
}
 8006eca:	4770      	bx	lr

08006ecc <SPI_DMAReceiveCplt>:
{
 8006ecc:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ece:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 8006ed0:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b07      	cmp	r3, #7
 8006ed8:	d009      	beq.n	8006eee <SPI_DMAReceiveCplt+0x22>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006eda:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ee2:	d005      	beq.n	8006ef0 <SPI_DMAReceiveCplt+0x24>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8006ee4:	6802      	ldr	r2, [r0, #0]
 8006ee6:	6913      	ldr	r3, [r2, #16]
 8006ee8:	f043 0308 	orr.w	r3, r3, #8
 8006eec:	6113      	str	r3, [r2, #16]
}
 8006eee:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 8006ef0:	f7ff ffeb 	bl	8006eca <HAL_SPI_RxCpltCallback>
 8006ef4:	e7fb      	b.n	8006eee <SPI_DMAReceiveCplt+0x22>

08006ef6 <HAL_SPI_TxRxCpltCallback>:
}
 8006ef6:	4770      	bx	lr

08006ef8 <SPI_DMATransmitReceiveCplt>:
{
 8006ef8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006efa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 8006efc:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b07      	cmp	r3, #7
 8006f04:	d009      	beq.n	8006f1a <SPI_DMATransmitReceiveCplt+0x22>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8006f06:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f0e:	d005      	beq.n	8006f1c <SPI_DMATransmitReceiveCplt+0x24>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8006f10:	6802      	ldr	r2, [r0, #0]
 8006f12:	6913      	ldr	r3, [r2, #16]
 8006f14:	f043 0308 	orr.w	r3, r3, #8
 8006f18:	6113      	str	r3, [r2, #16]
}
 8006f1a:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
 8006f1c:	f7ff ffeb 	bl	8006ef6 <HAL_SPI_TxRxCpltCallback>
 8006f20:	e7fb      	b.n	8006f1a <SPI_DMATransmitReceiveCplt+0x22>

08006f22 <HAL_SPI_RxHalfCpltCallback>:
}
 8006f22:	4770      	bx	lr

08006f24 <SPI_DMAHalfReceiveCplt>:
{
 8006f24:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006f26:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006f28:	f7ff fffb 	bl	8006f22 <HAL_SPI_RxHalfCpltCallback>
}
 8006f2c:	bd08      	pop	{r3, pc}

08006f2e <HAL_SPI_TxRxHalfCpltCallback>:
}
 8006f2e:	4770      	bx	lr

08006f30 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8006f30:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006f32:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006f34:	f7ff fffb 	bl	8006f2e <HAL_SPI_TxRxHalfCpltCallback>
}
 8006f38:	bd08      	pop	{r3, pc}

08006f3a <HAL_SPI_ErrorCallback>:
}
 8006f3a:	4770      	bx	lr

08006f3c <SPI_DMAError>:
{
 8006f3c:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f3e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006f40:	f7fb fc82 	bl	8002848 <HAL_DMA_GetError>
 8006f44:	2802      	cmp	r0, #2
 8006f46:	d00e      	beq.n	8006f66 <SPI_DMAError+0x2a>
    SPI_CloseTransfer(hspi);
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f7ff fd6f 	bl	8006a2c <SPI_CloseTransfer>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006f4e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006f52:	f043 0310 	orr.w	r3, r3, #16
 8006f56:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 8006f60:	4620      	mov	r0, r4
 8006f62:	f7ff ffea 	bl	8006f3a <HAL_SPI_ErrorCallback>
}
 8006f66:	bd10      	pop	{r4, pc}

08006f68 <HAL_SPI_IRQHandler>:
{
 8006f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f6c:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 8006f6e:	6806      	ldr	r6, [r0, #0]
 8006f70:	f8d6 9010 	ldr.w	r9, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
 8006f74:	f8d6 8014 	ldr.w	r8, [r6, #20]
  uint32_t trigger  = itsource & itflag;
 8006f78:	ea09 0508 	and.w	r5, r9, r8
  uint32_t cfg1     = hspi->Instance->CFG1;
 8006f7c:	f8d6 a008 	ldr.w	sl, [r6, #8]
  HAL_SPI_StateTypeDef State = hspi->State;
 8006f80:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
 8006f84:	b2ff      	uxtb	r7, r7
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8006f86:	f005 0364 	and.w	r3, r5, #100	; 0x64
 8006f8a:	2b04      	cmp	r3, #4
 8006f8c:	d116      	bne.n	8006fbc <HAL_SPI_IRQHandler+0x54>
    hspi->TxISR(hspi);
 8006f8e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8006f90:	4798      	blx	r3
    hspi->RxISR(hspi);
 8006f92:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006f94:	4620      	mov	r0, r4
 8006f96:	4798      	blx	r3
    handled = 1UL;
 8006f98:	2301      	movs	r3, #1
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006f9a:	f005 0245 	and.w	r2, r5, #69	; 0x45
 8006f9e:	2a01      	cmp	r2, #1
 8006fa0:	d103      	bne.n	8006faa <HAL_SPI_IRQHandler+0x42>
    hspi->RxISR(hspi);
 8006fa2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	4798      	blx	r3
    handled = 1UL;
 8006fa8:	2301      	movs	r3, #1
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006faa:	f005 0226 	and.w	r2, r5, #38	; 0x26
 8006fae:	2a02      	cmp	r2, #2
 8006fb0:	d106      	bne.n	8006fc0 <HAL_SPI_IRQHandler+0x58>
    hspi->TxISR(hspi);
 8006fb2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	4798      	blx	r3
}
 8006fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint32_t handled  = 0UL;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	e7ec      	b.n	8006f9a <HAL_SPI_IRQHandler+0x32>
  if (handled != 0UL)
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1f9      	bne.n	8006fb8 <HAL_SPI_IRQHandler+0x50>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8006fc4:	f015 0f08 	tst.w	r5, #8
 8006fc8:	d06c      	beq.n	80070a4 <HAL_SPI_IRQHandler+0x13c>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006fca:	6822      	ldr	r2, [r4, #0]
 8006fcc:	6993      	ldr	r3, [r2, #24]
 8006fce:	f043 0308 	orr.w	r3, r3, #8
 8006fd2:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006fd4:	6822      	ldr	r2, [r4, #0]
 8006fd6:	6993      	ldr	r3, [r2, #24]
 8006fd8:	f043 0310 	orr.w	r3, r3, #16
 8006fdc:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006fde:	6822      	ldr	r2, [r4, #0]
 8006fe0:	6993      	ldr	r3, [r2, #24]
 8006fe2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006fe6:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8006fe8:	6822      	ldr	r2, [r4, #0]
 8006fea:	6913      	ldr	r3, [r2, #16]
 8006fec:	f023 0308 	bic.w	r3, r3, #8
 8006ff0:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8006ff2:	f41a 4f40 	tst.w	sl, #49152	; 0xc000
 8006ff6:	d009      	beq.n	800700c <HAL_SPI_IRQHandler+0xa4>
 8006ff8:	2f04      	cmp	r7, #4
 8006ffa:	d002      	beq.n	8007002 <HAL_SPI_IRQHandler+0x9a>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8006ffc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006ffe:	69db      	ldr	r3, [r3, #28]
 8007000:	b123      	cbz	r3, 800700c <HAL_SPI_IRQHandler+0xa4>
 8007002:	2f03      	cmp	r7, #3
 8007004:	d011      	beq.n	800702a <HAL_SPI_IRQHandler+0xc2>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8007006:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	b973      	cbnz	r3, 800702a <HAL_SPI_IRQHandler+0xc2>
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800700c:	6823      	ldr	r3, [r4, #0]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8007014:	d021      	beq.n	800705a <HAL_SPI_IRQHandler+0xf2>
      SPI_CloseTransfer(hspi);
 8007016:	4620      	mov	r0, r4
 8007018:	f7ff fd08 	bl	8006a2c <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 800701c:	2301      	movs	r3, #1
 800701e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007022:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007026:	2b00      	cmp	r3, #0
 8007028:	d130      	bne.n	800708c <HAL_SPI_IRQHandler+0x124>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800702a:	2f05      	cmp	r7, #5
 800702c:	d032      	beq.n	8007094 <HAL_SPI_IRQHandler+0x12c>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800702e:	2f04      	cmp	r7, #4
 8007030:	d034      	beq.n	800709c <HAL_SPI_IRQHandler+0x134>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007032:	2f03      	cmp	r7, #3
 8007034:	d1c0      	bne.n	8006fb8 <HAL_SPI_IRQHandler+0x50>
      HAL_SPI_TxCpltCallback(hspi);
 8007036:	4620      	mov	r0, r4
 8007038:	f7ff ff46 	bl	8006ec8 <HAL_SPI_TxCpltCallback>
 800703c:	e7bc      	b.n	8006fb8 <HAL_SPI_IRQHandler+0x50>
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800703e:	2b07      	cmp	r3, #7
 8007040:	d91b      	bls.n	800707a <HAL_SPI_IRQHandler+0x112>
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007042:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007044:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 8007046:	801a      	strh	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8007048:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800704a:	3302      	adds	r3, #2
 800704c:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 800704e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8007052:	3b01      	subs	r3, #1
 8007054:	b29b      	uxth	r3, r3
 8007056:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800705a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800705e:	b29b      	uxth	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	d0d8      	beq.n	8007016 <HAL_SPI_IRQHandler+0xae>
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007064:	68e3      	ldr	r3, [r4, #12]
 8007066:	2b0f      	cmp	r3, #15
 8007068:	d9e9      	bls.n	800703e <HAL_SPI_IRQHandler+0xd6>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800706a:	6822      	ldr	r2, [r4, #0]
 800706c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800706e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007070:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8007072:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007074:	3304      	adds	r3, #4
 8007076:	6663      	str	r3, [r4, #100]	; 0x64
 8007078:	e7e9      	b.n	800704e <HAL_SPI_IRQHandler+0xe6>
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800707a:	6822      	ldr	r2, [r4, #0]
 800707c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800707e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8007082:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8007084:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007086:	3301      	adds	r3, #1
 8007088:	6663      	str	r3, [r4, #100]	; 0x64
 800708a:	e7e0      	b.n	800704e <HAL_SPI_IRQHandler+0xe6>
        HAL_SPI_ErrorCallback(hspi);
 800708c:	4620      	mov	r0, r4
 800708e:	f7ff ff54 	bl	8006f3a <HAL_SPI_ErrorCallback>
        return;
 8007092:	e791      	b.n	8006fb8 <HAL_SPI_IRQHandler+0x50>
      HAL_SPI_TxRxCpltCallback(hspi);
 8007094:	4620      	mov	r0, r4
 8007096:	f7ff ff2e 	bl	8006ef6 <HAL_SPI_TxRxCpltCallback>
 800709a:	e78d      	b.n	8006fb8 <HAL_SPI_IRQHandler+0x50>
      HAL_SPI_RxCpltCallback(hspi);
 800709c:	4620      	mov	r0, r4
 800709e:	f7ff ff14 	bl	8006eca <HAL_SPI_RxCpltCallback>
 80070a2:	e789      	b.n	8006fb8 <HAL_SPI_IRQHandler+0x50>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80070a4:	f418 6f00 	tst.w	r8, #2048	; 0x800
 80070a8:	d002      	beq.n	80070b0 <HAL_SPI_IRQHandler+0x148>
 80070aa:	f019 0f08 	tst.w	r9, #8
 80070ae:	d174      	bne.n	800719a <HAL_SPI_IRQHandler+0x232>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80070b0:	f415 7f58 	tst.w	r5, #864	; 0x360
 80070b4:	d080      	beq.n	8006fb8 <HAL_SPI_IRQHandler+0x50>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80070b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80070ba:	d00a      	beq.n	80070d2 <HAL_SPI_IRQHandler+0x16a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80070bc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80070c0:	f043 0304 	orr.w	r3, r3, #4
 80070c4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070c8:	6822      	ldr	r2, [r4, #0]
 80070ca:	6993      	ldr	r3, [r2, #24]
 80070cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070d0:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80070d2:	f415 7f00 	tst.w	r5, #512	; 0x200
 80070d6:	d00a      	beq.n	80070ee <HAL_SPI_IRQHandler+0x186>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80070d8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80070dc:	f043 0301 	orr.w	r3, r3, #1
 80070e0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80070e4:	6822      	ldr	r2, [r4, #0]
 80070e6:	6993      	ldr	r3, [r2, #24]
 80070e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80070ec:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80070ee:	f415 7f80 	tst.w	r5, #256	; 0x100
 80070f2:	d00a      	beq.n	800710a <HAL_SPI_IRQHandler+0x1a2>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80070f4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80070f8:	f043 0308 	orr.w	r3, r3, #8
 80070fc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007100:	6822      	ldr	r2, [r4, #0]
 8007102:	6993      	ldr	r3, [r2, #24]
 8007104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007108:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800710a:	f015 0f20 	tst.w	r5, #32
 800710e:	d00a      	beq.n	8007126 <HAL_SPI_IRQHandler+0x1be>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007110:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007118:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800711c:	6822      	ldr	r2, [r4, #0]
 800711e:	6993      	ldr	r3, [r2, #24]
 8007120:	f043 0320 	orr.w	r3, r3, #32
 8007124:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007126:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800712a:	2b00      	cmp	r3, #0
 800712c:	f43f af44 	beq.w	8006fb8 <HAL_SPI_IRQHandler+0x50>
      __HAL_SPI_DISABLE(hspi);
 8007130:	6822      	ldr	r2, [r4, #0]
 8007132:	6813      	ldr	r3, [r2, #0]
 8007134:	f023 0301 	bic.w	r3, r3, #1
 8007138:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800713a:	6822      	ldr	r2, [r4, #0]
 800713c:	6911      	ldr	r1, [r2, #16]
 800713e:	4b1d      	ldr	r3, [pc, #116]	; (80071b4 <HAL_SPI_IRQHandler+0x24c>)
 8007140:	400b      	ands	r3, r1
 8007142:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007144:	f40a 4a40 	and.w	sl, sl, #49152	; 0xc000
 8007148:	f5ba 4f40 	cmp.w	sl, #49152	; 0xc000
 800714c:	d12b      	bne.n	80071a6 <HAL_SPI_IRQHandler+0x23e>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800714e:	6822      	ldr	r2, [r4, #0]
 8007150:	6893      	ldr	r3, [r2, #8]
 8007152:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007156:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 8007158:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800715a:	b15b      	cbz	r3, 8007174 <HAL_SPI_IRQHandler+0x20c>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800715c:	4a16      	ldr	r2, [pc, #88]	; (80071b8 <HAL_SPI_IRQHandler+0x250>)
 800715e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007160:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8007162:	f7fa fe8b 	bl	8001e7c <HAL_DMA_Abort_IT>
 8007166:	b128      	cbz	r0, 8007174 <HAL_SPI_IRQHandler+0x20c>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007168:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800716c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007170:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 8007174:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8007176:	2b00      	cmp	r3, #0
 8007178:	f43f af1e 	beq.w	8006fb8 <HAL_SPI_IRQHandler+0x50>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800717c:	4a0e      	ldr	r2, [pc, #56]	; (80071b8 <HAL_SPI_IRQHandler+0x250>)
 800717e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007180:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8007182:	f7fa fe7b 	bl	8001e7c <HAL_DMA_Abort_IT>
 8007186:	2800      	cmp	r0, #0
 8007188:	f43f af16 	beq.w	8006fb8 <HAL_SPI_IRQHandler+0x50>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800718c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007194:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8007198:	e70e      	b.n	8006fb8 <HAL_SPI_IRQHandler+0x50>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800719a:	6822      	ldr	r2, [r4, #0]
 800719c:	6993      	ldr	r3, [r2, #24]
 800719e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80071a2:	6193      	str	r3, [r2, #24]
    return;
 80071a4:	e708      	b.n	8006fb8 <HAL_SPI_IRQHandler+0x50>
        hspi->State = HAL_SPI_STATE_READY;
 80071a6:	2301      	movs	r3, #1
 80071a8:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80071ac:	4620      	mov	r0, r4
 80071ae:	f7ff fec4 	bl	8006f3a <HAL_SPI_ErrorCallback>
 80071b2:	e701      	b.n	8006fb8 <HAL_SPI_IRQHandler+0x50>
 80071b4:	fffffc94 	.word	0xfffffc94
 80071b8:	080071bd 	.word	0x080071bd

080071bc <SPI_DMAAbortOnError>:
{
 80071bc:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071be:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 80071c0:	2300      	movs	r3, #0
 80071c2:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80071c6:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 80071ca:	2301      	movs	r3, #1
 80071cc:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 80071d0:	f7ff feb3 	bl	8006f3a <HAL_SPI_ErrorCallback>
}
 80071d4:	bd08      	pop	{r3, pc}
	...

080071d8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80071d8:	b410      	push	{r4}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80071da:	680b      	ldr	r3, [r1, #0]
 80071dc:	b1eb      	cbz	r3, 800721a <FMC_SDRAM_Init+0x42>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80071de:	6803      	ldr	r3, [r0, #0]
 80071e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071e4:	69ca      	ldr	r2, [r1, #28]
 80071e6:	6a0c      	ldr	r4, [r1, #32]
 80071e8:	4322      	orrs	r2, r4
 80071ea:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80071ec:	4322      	orrs	r2, r4
 80071ee:	4313      	orrs	r3, r2
 80071f0:	6003      	str	r3, [r0, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80071f2:	6843      	ldr	r3, [r0, #4]
 80071f4:	4a14      	ldr	r2, [pc, #80]	; (8007248 <FMC_SDRAM_Init+0x70>)
 80071f6:	401a      	ands	r2, r3
 80071f8:	684b      	ldr	r3, [r1, #4]
 80071fa:	688c      	ldr	r4, [r1, #8]
 80071fc:	4323      	orrs	r3, r4
 80071fe:	68cc      	ldr	r4, [r1, #12]
 8007200:	4323      	orrs	r3, r4
 8007202:	690c      	ldr	r4, [r1, #16]
 8007204:	4323      	orrs	r3, r4
 8007206:	694c      	ldr	r4, [r1, #20]
 8007208:	4323      	orrs	r3, r4
 800720a:	6989      	ldr	r1, [r1, #24]
 800720c:	430b      	orrs	r3, r1
 800720e:	4313      	orrs	r3, r2
 8007210:	6043      	str	r3, [r0, #4]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8007212:	2000      	movs	r0, #0
 8007214:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007218:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800721a:	6803      	ldr	r3, [r0, #0]
 800721c:	4a0a      	ldr	r2, [pc, #40]	; (8007248 <FMC_SDRAM_Init+0x70>)
 800721e:	401a      	ands	r2, r3
 8007220:	684b      	ldr	r3, [r1, #4]
 8007222:	688c      	ldr	r4, [r1, #8]
 8007224:	4323      	orrs	r3, r4
 8007226:	68cc      	ldr	r4, [r1, #12]
 8007228:	4323      	orrs	r3, r4
 800722a:	690c      	ldr	r4, [r1, #16]
 800722c:	4323      	orrs	r3, r4
 800722e:	694c      	ldr	r4, [r1, #20]
 8007230:	4323      	orrs	r3, r4
 8007232:	698c      	ldr	r4, [r1, #24]
 8007234:	4323      	orrs	r3, r4
 8007236:	69cc      	ldr	r4, [r1, #28]
 8007238:	4323      	orrs	r3, r4
 800723a:	6a0c      	ldr	r4, [r1, #32]
 800723c:	4323      	orrs	r3, r4
 800723e:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8007240:	430b      	orrs	r3, r1
 8007242:	4313      	orrs	r3, r2
 8007244:	6003      	str	r3, [r0, #0]
 8007246:	e7e4      	b.n	8007212 <FMC_SDRAM_Init+0x3a>
 8007248:	ffff8000 	.word	0xffff8000

0800724c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800724c:	b410      	push	{r4}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800724e:	b332      	cbz	r2, 800729e <FMC_SDRAM_Timing_Init+0x52>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007250:	6883      	ldr	r3, [r0, #8]
 8007252:	4a23      	ldr	r2, [pc, #140]	; (80072e0 <FMC_SDRAM_Timing_Init+0x94>)
 8007254:	401a      	ands	r2, r3
 8007256:	68cb      	ldr	r3, [r1, #12]
 8007258:	1e5c      	subs	r4, r3, #1
 800725a:	694b      	ldr	r3, [r1, #20]
 800725c:	3b01      	subs	r3, #1
 800725e:	051b      	lsls	r3, r3, #20
 8007260:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 8007264:	4313      	orrs	r3, r2
 8007266:	6083      	str	r3, [r0, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007268:	68c2      	ldr	r2, [r0, #12]
 800726a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800726e:	680b      	ldr	r3, [r1, #0]
 8007270:	3b01      	subs	r3, #1
 8007272:	684c      	ldr	r4, [r1, #4]
 8007274:	3c01      	subs	r4, #1
 8007276:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800727a:	688c      	ldr	r4, [r1, #8]
 800727c:	3c01      	subs	r4, #1
 800727e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8007282:	690c      	ldr	r4, [r1, #16]
 8007284:	3c01      	subs	r4, #1
 8007286:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800728a:	6989      	ldr	r1, [r1, #24]
 800728c:	3901      	subs	r1, #1
 800728e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007292:	4313      	orrs	r3, r2
 8007294:	60c3      	str	r3, [r0, #12]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 8007296:	2000      	movs	r0, #0
 8007298:	f85d 4b04 	ldr.w	r4, [sp], #4
 800729c:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800729e:	6882      	ldr	r2, [r0, #8]
 80072a0:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80072a4:	680b      	ldr	r3, [r1, #0]
 80072a6:	3b01      	subs	r3, #1
 80072a8:	684c      	ldr	r4, [r1, #4]
 80072aa:	3c01      	subs	r4, #1
 80072ac:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80072b0:	688c      	ldr	r4, [r1, #8]
 80072b2:	3c01      	subs	r4, #1
 80072b4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80072b8:	68cc      	ldr	r4, [r1, #12]
 80072ba:	3c01      	subs	r4, #1
 80072bc:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 80072c0:	690c      	ldr	r4, [r1, #16]
 80072c2:	3c01      	subs	r4, #1
 80072c4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80072c8:	694c      	ldr	r4, [r1, #20]
 80072ca:	3c01      	subs	r4, #1
 80072cc:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 80072d0:	6989      	ldr	r1, [r1, #24]
 80072d2:	3901      	subs	r1, #1
 80072d4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80072d8:	4313      	orrs	r3, r2
 80072da:	6083      	str	r3, [r0, #8]
 80072dc:	e7db      	b.n	8007296 <FMC_SDRAM_Timing_Init+0x4a>
 80072de:	bf00      	nop
 80072e0:	ff0f0fff 	.word	0xff0f0fff

080072e4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80072e4:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
 80072e6:	6902      	ldr	r2, [r0, #16]
 80072e8:	680b      	ldr	r3, [r1, #0]
 80072ea:	684c      	ldr	r4, [r1, #4]
 80072ec:	4323      	orrs	r3, r4
 80072ee:	688c      	ldr	r4, [r1, #8]
 80072f0:	3c01      	subs	r4, #1
 80072f2:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 80072f6:	68c9      	ldr	r1, [r1, #12]
 80072f8:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 80072fc:	4313      	orrs	r3, r2
 80072fe:	6103      	str	r3, [r0, #16]
                          (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos)   |
                          ((Command->ModeRegisterDefinition)   << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8007300:	2000      	movs	r0, #0
 8007302:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007306:	4770      	bx	lr

08007308 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007308:	6942      	ldr	r2, [r0, #20]
 800730a:	4b03      	ldr	r3, [pc, #12]	; (8007318 <FMC_SDRAM_ProgramRefreshRate+0x10>)
 800730c:	4013      	ands	r3, r2
 800730e:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8007312:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8007314:	2000      	movs	r0, #0
 8007316:	4770      	bx	lr
 8007318:	ffffc001 	.word	0xffffc001

0800731c <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800731c:	4b0b      	ldr	r3, [pc, #44]	; (800734c <SDMMC_GetCmdError+0x30>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a0b      	ldr	r2, [pc, #44]	; (8007350 <SDMMC_GetCmdError+0x34>)
 8007322:	fba2 2303 	umull	r2, r3, r2, r3
 8007326:	0a5a      	lsrs	r2, r3, #9
 8007328:	f241 3388 	movw	r3, #5000	; 0x1388
 800732c:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 8007330:	1e5a      	subs	r2, r3, #1
 8007332:	b143      	cbz	r3, 8007346 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007334:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 8007336:	4613      	mov	r3, r2
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007338:	f011 0f80 	tst.w	r1, #128	; 0x80
 800733c:	d0f8      	beq.n	8007330 <SDMMC_GetCmdError+0x14>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800733e:	4b05      	ldr	r3, [pc, #20]	; (8007354 <SDMMC_GetCmdError+0x38>)
 8007340:	6383      	str	r3, [r0, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8007342:	2000      	movs	r0, #0
 8007344:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007346:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800734a:	4770      	bx	lr
 800734c:	20000078 	.word	0x20000078
 8007350:	10624dd3 	.word	0x10624dd3
 8007354:	002000c5 	.word	0x002000c5

08007358 <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007358:	4b15      	ldr	r3, [pc, #84]	; (80073b0 <SDMMC_GetCmdResp2+0x58>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a15      	ldr	r2, [pc, #84]	; (80073b4 <SDMMC_GetCmdResp2+0x5c>)
 800735e:	fba2 2303 	umull	r2, r3, r2, r3
 8007362:	0a5a      	lsrs	r2, r3, #9
 8007364:	f241 3388 	movw	r3, #5000	; 0x1388
 8007368:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 800736c:	1e5a      	subs	r2, r3, #1
 800736e:	b1db      	cbz	r3, 80073a8 <SDMMC_GetCmdResp2+0x50>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8007370:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007372:	4613      	mov	r3, r2
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007374:	f011 0f45 	tst.w	r1, #69	; 0x45
 8007378:	d0f8      	beq.n	800736c <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800737a:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 800737e:	d1f5      	bne.n	800736c <SDMMC_GetCmdResp2+0x14>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007380:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007382:	f013 0f04 	tst.w	r3, #4
 8007386:	d107      	bne.n	8007398 <SDMMC_GetCmdResp2+0x40>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007388:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800738a:	f013 0f01 	tst.w	r3, #1
 800738e:	d107      	bne.n	80073a0 <SDMMC_GetCmdResp2+0x48>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007390:	4b09      	ldr	r3, [pc, #36]	; (80073b8 <SDMMC_GetCmdResp2+0x60>)
 8007392:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007394:	2000      	movs	r0, #0
 8007396:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007398:	2304      	movs	r3, #4
 800739a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800739c:	4618      	mov	r0, r3
 800739e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80073a0:	2301      	movs	r3, #1
 80073a2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80073a4:	4618      	mov	r0, r3
 80073a6:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80073a8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	20000078 	.word	0x20000078
 80073b4:	10624dd3 	.word	0x10624dd3
 80073b8:	002000c5 	.word	0x002000c5

080073bc <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80073bc:	4b11      	ldr	r3, [pc, #68]	; (8007404 <SDMMC_GetCmdResp3+0x48>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a11      	ldr	r2, [pc, #68]	; (8007408 <SDMMC_GetCmdResp3+0x4c>)
 80073c2:	fba2 2303 	umull	r2, r3, r2, r3
 80073c6:	0a5a      	lsrs	r2, r3, #9
 80073c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80073cc:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 80073d0:	1e5a      	subs	r2, r3, #1
 80073d2:	b19b      	cbz	r3, 80073fc <SDMMC_GetCmdResp3+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 80073d4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80073d6:	4613      	mov	r3, r2
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80073d8:	f011 0f45 	tst.w	r1, #69	; 0x45
 80073dc:	d0f8      	beq.n	80073d0 <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80073de:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 80073e2:	d1f5      	bne.n	80073d0 <SDMMC_GetCmdResp3+0x14>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80073e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80073e6:	f013 0f04 	tst.w	r3, #4
 80073ea:	d103      	bne.n	80073f4 <SDMMC_GetCmdResp3+0x38>
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80073ec:	4b07      	ldr	r3, [pc, #28]	; (800740c <SDMMC_GetCmdResp3+0x50>)
 80073ee:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80073f0:	2000      	movs	r0, #0
 80073f2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80073f4:	2304      	movs	r3, #4
 80073f6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80073f8:	4618      	mov	r0, r3
 80073fa:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80073fc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	20000078 	.word	0x20000078
 8007408:	10624dd3 	.word	0x10624dd3
 800740c:	002000c5 	.word	0x002000c5

08007410 <SDMMC_GetCmdResp7>:
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007410:	4b18      	ldr	r3, [pc, #96]	; (8007474 <SDMMC_GetCmdResp7+0x64>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a18      	ldr	r2, [pc, #96]	; (8007478 <SDMMC_GetCmdResp7+0x68>)
 8007416:	fba2 2303 	umull	r2, r3, r2, r3
 800741a:	0a5a      	lsrs	r2, r3, #9
 800741c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007420:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 8007424:	1e5a      	subs	r2, r3, #1
 8007426:	b1fb      	cbz	r3, 8007468 <SDMMC_GetCmdResp7+0x58>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8007428:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800742a:	4613      	mov	r3, r2
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800742c:	f011 0f45 	tst.w	r1, #69	; 0x45
 8007430:	d0f8      	beq.n	8007424 <SDMMC_GetCmdResp7+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007432:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 8007436:	d1f5      	bne.n	8007424 <SDMMC_GetCmdResp7+0x14>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007438:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800743a:	f013 0f04 	tst.w	r3, #4
 800743e:	d10b      	bne.n	8007458 <SDMMC_GetCmdResp7+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007440:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007442:	f013 0f01 	tst.w	r3, #1
 8007446:	d10b      	bne.n	8007460 <SDMMC_GetCmdResp7+0x50>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007448:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800744a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800744e:	d00e      	beq.n	800746e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007450:	2340      	movs	r3, #64	; 0x40
 8007452:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007454:	2000      	movs	r0, #0
 8007456:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007458:	2304      	movs	r3, #4
 800745a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800745c:	4618      	mov	r0, r3
 800745e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007460:	2301      	movs	r3, #1
 8007462:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007464:	4618      	mov	r0, r3
 8007466:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007468:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800746c:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 800746e:	2000      	movs	r0, #0

}
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	20000078 	.word	0x20000078
 8007478:	10624dd3 	.word	0x10624dd3

0800747c <SDMMC_Init>:
{
 800747c:	b084      	sub	sp, #16
 800747e:	b410      	push	{r4}
 8007480:	ac02      	add	r4, sp, #8
 8007482:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8007486:	460b      	mov	r3, r1
 8007488:	9a03      	ldr	r2, [sp, #12]
 800748a:	4313      	orrs	r3, r2
             Init.BusWide             |\
 800748c:	9a04      	ldr	r2, [sp, #16]
             Init.ClockPowerSave      |\
 800748e:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 8007490:	9a05      	ldr	r2, [sp, #20]
             Init.BusWide             |\
 8007492:	4313      	orrs	r3, r2
             Init.ClockDiv
 8007494:	9a06      	ldr	r2, [sp, #24]
             Init.HardwareFlowControl |\
 8007496:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007498:	6841      	ldr	r1, [r0, #4]
 800749a:	4a04      	ldr	r2, [pc, #16]	; (80074ac <SDMMC_Init+0x30>)
 800749c:	400a      	ands	r2, r1
 800749e:	4313      	orrs	r3, r2
 80074a0:	6043      	str	r3, [r0, #4]
}
 80074a2:	2000      	movs	r0, #0
 80074a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074a8:	b004      	add	sp, #16
 80074aa:	4770      	bx	lr
 80074ac:	ffc02c00 	.word	0xffc02c00

080074b0 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 80074b0:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 80074b4:	4770      	bx	lr

080074b6 <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 80074b6:	680b      	ldr	r3, [r1, #0]
 80074b8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 80074bc:	2000      	movs	r0, #0
 80074be:	4770      	bx	lr

080074c0 <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80074c0:	6803      	ldr	r3, [r0, #0]
 80074c2:	f043 0303 	orr.w	r3, r3, #3
 80074c6:	6003      	str	r3, [r0, #0]
}
 80074c8:	2000      	movs	r0, #0
 80074ca:	4770      	bx	lr

080074cc <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80074cc:	6800      	ldr	r0, [r0, #0]
}
 80074ce:	f000 0003 	and.w	r0, r0, #3
 80074d2:	4770      	bx	lr

080074d4 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 80074d4:	680b      	ldr	r3, [r1, #0]
 80074d6:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80074d8:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 80074da:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80074dc:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 80074de:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 80074e0:	4313      	orrs	r3, r2
                       Command->CPSM);
 80074e2:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 80074e4:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80074e6:	68c1      	ldr	r1, [r0, #12]
 80074e8:	4a02      	ldr	r2, [pc, #8]	; (80074f4 <SDMMC_SendCommand+0x20>)
 80074ea:	400a      	ands	r2, r1
 80074ec:	4313      	orrs	r3, r2
 80074ee:	60c3      	str	r3, [r0, #12]
}
 80074f0:	2000      	movs	r0, #0
 80074f2:	4770      	bx	lr
 80074f4:	fffee0c0 	.word	0xfffee0c0

080074f8 <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 80074f8:	6900      	ldr	r0, [r0, #16]
}
 80074fa:	b2c0      	uxtb	r0, r0
 80074fc:	4770      	bx	lr

080074fe <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80074fe:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8007500:	5840      	ldr	r0, [r0, r1]
}
 8007502:	4770      	bx	lr

08007504 <SDMMC_GetCmdResp1>:
{
 8007504:	b538      	push	{r3, r4, r5, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007506:	4b53      	ldr	r3, [pc, #332]	; (8007654 <SDMMC_GetCmdResp1+0x150>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4c53      	ldr	r4, [pc, #332]	; (8007658 <SDMMC_GetCmdResp1+0x154>)
 800750c:	fba4 4303 	umull	r4, r3, r4, r3
 8007510:	0a5b      	lsrs	r3, r3, #9
 8007512:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 8007516:	1e54      	subs	r4, r2, #1
 8007518:	2a00      	cmp	r2, #0
 800751a:	d061      	beq.n	80075e0 <SDMMC_GetCmdResp1+0xdc>
    sta_reg = SDMMCx->STA;
 800751c:	6b45      	ldr	r5, [r0, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800751e:	4b4f      	ldr	r3, [pc, #316]	; (800765c <SDMMC_GetCmdResp1+0x158>)
 8007520:	402b      	ands	r3, r5
 8007522:	4622      	mov	r2, r4
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007524:	2b00      	cmp	r3, #0
 8007526:	d0f6      	beq.n	8007516 <SDMMC_GetCmdResp1+0x12>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007528:	f415 5f00 	tst.w	r5, #8192	; 0x2000
 800752c:	d1f3      	bne.n	8007516 <SDMMC_GetCmdResp1+0x12>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800752e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007530:	f013 0f04 	tst.w	r3, #4
 8007534:	d107      	bne.n	8007546 <SDMMC_GetCmdResp1+0x42>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007536:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007538:	f013 0f01 	tst.w	r3, #1
 800753c:	d007      	beq.n	800754e <SDMMC_GetCmdResp1+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800753e:	2301      	movs	r3, #1
 8007540:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007542:	4618      	mov	r0, r3
 8007544:	e04e      	b.n	80075e4 <SDMMC_GetCmdResp1+0xe0>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007546:	2304      	movs	r3, #4
 8007548:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800754a:	4618      	mov	r0, r3
 800754c:	e04a      	b.n	80075e4 <SDMMC_GetCmdResp1+0xe0>
 800754e:	460d      	mov	r5, r1
 8007550:	4604      	mov	r4, r0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007552:	4b43      	ldr	r3, [pc, #268]	; (8007660 <SDMMC_GetCmdResp1+0x15c>)
 8007554:	6383      	str	r3, [r0, #56]	; 0x38
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007556:	f7ff ffcf 	bl	80074f8 <SDMMC_GetCommandResponse>
 800755a:	42a8      	cmp	r0, r5
 800755c:	d001      	beq.n	8007562 <SDMMC_GetCmdResp1+0x5e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800755e:	2001      	movs	r0, #1
 8007560:	e040      	b.n	80075e4 <SDMMC_GetCmdResp1+0xe0>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007562:	2100      	movs	r1, #0
 8007564:	4620      	mov	r0, r4
 8007566:	f7ff ffca 	bl	80074fe <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800756a:	4b3e      	ldr	r3, [pc, #248]	; (8007664 <SDMMC_GetCmdResp1+0x160>)
 800756c:	4003      	ands	r3, r0
 800756e:	b3d3      	cbz	r3, 80075e6 <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007570:	2800      	cmp	r0, #0
 8007572:	db3a      	blt.n	80075ea <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007574:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007578:	d13a      	bne.n	80075f0 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800757a:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 800757e:	d139      	bne.n	80075f4 <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007580:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 8007584:	d138      	bne.n	80075f8 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007586:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 800758a:	d138      	bne.n	80075fe <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800758c:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8007590:	d138      	bne.n	8007604 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007592:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8007596:	d138      	bne.n	800760a <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007598:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800759c:	d138      	bne.n	8007610 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800759e:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80075a2:	d138      	bne.n	8007616 <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80075a4:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 80075a8:	d138      	bne.n	800761c <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80075aa:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80075ae:	d138      	bne.n	8007622 <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80075b0:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 80075b4:	d138      	bne.n	8007628 <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80075b6:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 80075ba:	d138      	bne.n	800762e <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80075bc:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 80075c0:	d138      	bne.n	8007634 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80075c2:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80075c6:	d138      	bne.n	800763a <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80075c8:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80075cc:	d138      	bne.n	8007640 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80075ce:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80075d2:	d138      	bne.n	8007646 <SDMMC_GetCmdResp1+0x142>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80075d4:	f010 0f08 	tst.w	r0, #8
 80075d8:	d038      	beq.n	800764c <SDMMC_GetCmdResp1+0x148>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80075da:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80075de:	e001      	b.n	80075e4 <SDMMC_GetCmdResp1+0xe0>
      return SDMMC_ERROR_TIMEOUT;
 80075e0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80075e4:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_NONE;
 80075e6:	2000      	movs	r0, #0
 80075e8:	e7fc      	b.n	80075e4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80075ea:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80075ee:	e7f9      	b.n	80075e4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80075f0:	2040      	movs	r0, #64	; 0x40
 80075f2:	e7f7      	b.n	80075e4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80075f4:	2080      	movs	r0, #128	; 0x80
 80075f6:	e7f5      	b.n	80075e4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80075f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80075fc:	e7f2      	b.n	80075e4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80075fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007602:	e7ef      	b.n	80075e4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007604:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007608:	e7ec      	b.n	80075e4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800760a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800760e:	e7e9      	b.n	80075e4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007610:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007614:	e7e6      	b.n	80075e4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007616:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800761a:	e7e3      	b.n	80075e4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800761c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007620:	e7e0      	b.n	80075e4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CC_ERR;
 8007622:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007626:	e7dd      	b.n	80075e4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007628:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800762c:	e7da      	b.n	80075e4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800762e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007632:	e7d7      	b.n	80075e4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007634:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007638:	e7d4      	b.n	80075e4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800763a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800763e:	e7d1      	b.n	80075e4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007640:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8007644:	e7ce      	b.n	80075e4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_RESET;
 8007646:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800764a:	e7cb      	b.n	80075e4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800764c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007650:	e7c8      	b.n	80075e4 <SDMMC_GetCmdResp1+0xe0>
 8007652:	bf00      	nop
 8007654:	20000078 	.word	0x20000078
 8007658:	10624dd3 	.word	0x10624dd3
 800765c:	00200045 	.word	0x00200045
 8007660:	002000c5 	.word	0x002000c5
 8007664:	fdffe008 	.word	0xfdffe008

08007668 <SDMMC_GetCmdResp6>:
{
 8007668:	b570      	push	{r4, r5, r6, lr}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800766a:	4b26      	ldr	r3, [pc, #152]	; (8007704 <SDMMC_GetCmdResp6+0x9c>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4c26      	ldr	r4, [pc, #152]	; (8007708 <SDMMC_GetCmdResp6+0xa0>)
 8007670:	fba4 4303 	umull	r4, r3, r4, r3
 8007674:	0a5c      	lsrs	r4, r3, #9
 8007676:	f241 3388 	movw	r3, #5000	; 0x1388
 800767a:	fb03 f304 	mul.w	r3, r3, r4
    if (count-- == 0U)
 800767e:	1e5c      	subs	r4, r3, #1
 8007680:	b3b3      	cbz	r3, 80076f0 <SDMMC_GetCmdResp6+0x88>
    sta_reg = SDMMCx->STA;
 8007682:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8007684:	4623      	mov	r3, r4
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007686:	f015 0f45 	tst.w	r5, #69	; 0x45
 800768a:	d0f8      	beq.n	800767e <SDMMC_GetCmdResp6+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800768c:	f415 5f00 	tst.w	r5, #8192	; 0x2000
 8007690:	d1f5      	bne.n	800767e <SDMMC_GetCmdResp6+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007692:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007694:	f013 0f04 	tst.w	r3, #4
 8007698:	d107      	bne.n	80076aa <SDMMC_GetCmdResp6+0x42>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800769a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800769c:	f013 0f01 	tst.w	r3, #1
 80076a0:	d007      	beq.n	80076b2 <SDMMC_GetCmdResp6+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80076a2:	2301      	movs	r3, #1
 80076a4:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80076a6:	4618      	mov	r0, r3
 80076a8:	e024      	b.n	80076f4 <SDMMC_GetCmdResp6+0x8c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80076aa:	2304      	movs	r3, #4
 80076ac:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80076ae:	4618      	mov	r0, r3
 80076b0:	e020      	b.n	80076f4 <SDMMC_GetCmdResp6+0x8c>
 80076b2:	4616      	mov	r6, r2
 80076b4:	460d      	mov	r5, r1
 80076b6:	4604      	mov	r4, r0
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80076b8:	f7ff ff1e 	bl	80074f8 <SDMMC_GetCommandResponse>
 80076bc:	42a8      	cmp	r0, r5
 80076be:	d001      	beq.n	80076c4 <SDMMC_GetCmdResp6+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80076c0:	2001      	movs	r0, #1
 80076c2:	e017      	b.n	80076f4 <SDMMC_GetCmdResp6+0x8c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80076c4:	4b11      	ldr	r3, [pc, #68]	; (800770c <SDMMC_GetCmdResp6+0xa4>)
 80076c6:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80076c8:	2100      	movs	r1, #0
 80076ca:	4620      	mov	r0, r4
 80076cc:	f7ff ff17 	bl	80074fe <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80076d0:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 80076d4:	d008      	beq.n	80076e8 <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80076d6:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80076da:	d10c      	bne.n	80076f6 <SDMMC_GetCmdResp6+0x8e>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80076dc:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80076e0:	d00c      	beq.n	80076fc <SDMMC_GetCmdResp6+0x94>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80076e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80076e6:	e005      	b.n	80076f4 <SDMMC_GetCmdResp6+0x8c>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80076e8:	0c00      	lsrs	r0, r0, #16
 80076ea:	8030      	strh	r0, [r6, #0]
    return SDMMC_ERROR_NONE;
 80076ec:	2000      	movs	r0, #0
 80076ee:	e001      	b.n	80076f4 <SDMMC_GetCmdResp6+0x8c>
      return SDMMC_ERROR_TIMEOUT;
 80076f0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80076f4:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 80076f6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80076fa:	e7fb      	b.n	80076f4 <SDMMC_GetCmdResp6+0x8c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80076fc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007700:	e7f8      	b.n	80076f4 <SDMMC_GetCmdResp6+0x8c>
 8007702:	bf00      	nop
 8007704:	20000078 	.word	0x20000078
 8007708:	10624dd3 	.word	0x10624dd3
 800770c:	002000c5 	.word	0x002000c5

08007710 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007710:	680b      	ldr	r3, [r1, #0]
 8007712:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8007714:	684b      	ldr	r3, [r1, #4]
 8007716:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007718:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 800771a:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800771c:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 800771e:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 8007720:	4313      	orrs	r3, r2
                       Data->DPSM);
 8007722:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 8007724:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007726:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8007728:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800772c:	4313      	orrs	r3, r2
 800772e:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8007730:	2000      	movs	r0, #0
 8007732:	4770      	bx	lr

08007734 <SDMMC_CmdBlockLength>:
{
 8007734:	b530      	push	{r4, r5, lr}
 8007736:	b087      	sub	sp, #28
 8007738:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800773a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800773c:	2410      	movs	r4, #16
 800773e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007740:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007744:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007746:	2300      	movs	r3, #0
 8007748:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800774a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800774e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007750:	a901      	add	r1, sp, #4
 8007752:	f7ff febf 	bl	80074d4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007756:	f241 3288 	movw	r2, #5000	; 0x1388
 800775a:	4621      	mov	r1, r4
 800775c:	4628      	mov	r0, r5
 800775e:	f7ff fed1 	bl	8007504 <SDMMC_GetCmdResp1>
}
 8007762:	b007      	add	sp, #28
 8007764:	bd30      	pop	{r4, r5, pc}

08007766 <SDMMC_CmdReadSingleBlock>:
{
 8007766:	b530      	push	{r4, r5, lr}
 8007768:	b087      	sub	sp, #28
 800776a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800776c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800776e:	2411      	movs	r4, #17
 8007770:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007772:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007776:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007778:	2300      	movs	r3, #0
 800777a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800777c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007780:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007782:	a901      	add	r1, sp, #4
 8007784:	f7ff fea6 	bl	80074d4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007788:	f241 3288 	movw	r2, #5000	; 0x1388
 800778c:	4621      	mov	r1, r4
 800778e:	4628      	mov	r0, r5
 8007790:	f7ff feb8 	bl	8007504 <SDMMC_GetCmdResp1>
}
 8007794:	b007      	add	sp, #28
 8007796:	bd30      	pop	{r4, r5, pc}

08007798 <SDMMC_CmdReadMultiBlock>:
{
 8007798:	b530      	push	{r4, r5, lr}
 800779a:	b087      	sub	sp, #28
 800779c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800779e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80077a0:	2412      	movs	r4, #18
 80077a2:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077a8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077aa:	2300      	movs	r3, #0
 80077ac:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077b2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077b4:	a901      	add	r1, sp, #4
 80077b6:	f7ff fe8d 	bl	80074d4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80077ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80077be:	4621      	mov	r1, r4
 80077c0:	4628      	mov	r0, r5
 80077c2:	f7ff fe9f 	bl	8007504 <SDMMC_GetCmdResp1>
}
 80077c6:	b007      	add	sp, #28
 80077c8:	bd30      	pop	{r4, r5, pc}

080077ca <SDMMC_CmdWriteSingleBlock>:
{
 80077ca:	b530      	push	{r4, r5, lr}
 80077cc:	b087      	sub	sp, #28
 80077ce:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80077d0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80077d2:	2418      	movs	r4, #24
 80077d4:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077da:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077dc:	2300      	movs	r3, #0
 80077de:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077e4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077e6:	a901      	add	r1, sp, #4
 80077e8:	f7ff fe74 	bl	80074d4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80077ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80077f0:	4621      	mov	r1, r4
 80077f2:	4628      	mov	r0, r5
 80077f4:	f7ff fe86 	bl	8007504 <SDMMC_GetCmdResp1>
}
 80077f8:	b007      	add	sp, #28
 80077fa:	bd30      	pop	{r4, r5, pc}

080077fc <SDMMC_CmdWriteMultiBlock>:
{
 80077fc:	b530      	push	{r4, r5, lr}
 80077fe:	b087      	sub	sp, #28
 8007800:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007802:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007804:	2419      	movs	r4, #25
 8007806:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800780c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800780e:	2300      	movs	r3, #0
 8007810:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007816:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007818:	a901      	add	r1, sp, #4
 800781a:	f7ff fe5b 	bl	80074d4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800781e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007822:	4621      	mov	r1, r4
 8007824:	4628      	mov	r0, r5
 8007826:	f7ff fe6d 	bl	8007504 <SDMMC_GetCmdResp1>
}
 800782a:	b007      	add	sp, #28
 800782c:	bd30      	pop	{r4, r5, pc}
	...

08007830 <SDMMC_CmdStopTransfer>:
{
 8007830:	b530      	push	{r4, r5, lr}
 8007832:	b087      	sub	sp, #28
 8007834:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8007836:	2300      	movs	r3, #0
 8007838:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800783a:	250c      	movs	r5, #12
 800783c:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800783e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007842:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007844:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800784a:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800784c:	68c3      	ldr	r3, [r0, #12]
 800784e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007852:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8007854:	68c3      	ldr	r3, [r0, #12]
 8007856:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800785a:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800785c:	a901      	add	r1, sp, #4
 800785e:	f7ff fe39 	bl	80074d4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8007862:	4a08      	ldr	r2, [pc, #32]	; (8007884 <SDMMC_CmdStopTransfer+0x54>)
 8007864:	4629      	mov	r1, r5
 8007866:	4620      	mov	r0, r4
 8007868:	f7ff fe4c 	bl	8007504 <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800786c:	68e3      	ldr	r3, [r4, #12]
 800786e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007872:	60e3      	str	r3, [r4, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8007874:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8007878:	d001      	beq.n	800787e <SDMMC_CmdStopTransfer+0x4e>
}
 800787a:	b007      	add	sp, #28
 800787c:	bd30      	pop	{r4, r5, pc}
    errorstate = SDMMC_ERROR_NONE;
 800787e:	2000      	movs	r0, #0
  return errorstate;
 8007880:	e7fb      	b.n	800787a <SDMMC_CmdStopTransfer+0x4a>
 8007882:	bf00      	nop
 8007884:	05f5e100 	.word	0x05f5e100

08007888 <SDMMC_CmdSelDesel>:
{
 8007888:	b530      	push	{r4, r5, lr}
 800788a:	b087      	sub	sp, #28
 800788c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800788e:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007890:	2407      	movs	r4, #7
 8007892:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007894:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007898:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800789a:	2300      	movs	r3, #0
 800789c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800789e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078a2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078a4:	a901      	add	r1, sp, #4
 80078a6:	f7ff fe15 	bl	80074d4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80078aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ae:	4621      	mov	r1, r4
 80078b0:	4628      	mov	r0, r5
 80078b2:	f7ff fe27 	bl	8007504 <SDMMC_GetCmdResp1>
}
 80078b6:	b007      	add	sp, #28
 80078b8:	bd30      	pop	{r4, r5, pc}

080078ba <SDMMC_CmdGoIdleState>:
{
 80078ba:	b510      	push	{r4, lr}
 80078bc:	b086      	sub	sp, #24
 80078be:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80078c0:	2300      	movs	r3, #0
 80078c2:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80078c4:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80078c6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078c8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078ce:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078d0:	a901      	add	r1, sp, #4
 80078d2:	f7ff fdff 	bl	80074d4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80078d6:	4620      	mov	r0, r4
 80078d8:	f7ff fd20 	bl	800731c <SDMMC_GetCmdError>
}
 80078dc:	b006      	add	sp, #24
 80078de:	bd10      	pop	{r4, pc}

080078e0 <SDMMC_CmdOperCond>:
{
 80078e0:	b510      	push	{r4, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80078e6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80078ea:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80078ec:	2308      	movs	r3, #8
 80078ee:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80078f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078f4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078f6:	2300      	movs	r3, #0
 80078f8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078fe:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007900:	a901      	add	r1, sp, #4
 8007902:	f7ff fde7 	bl	80074d4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007906:	4620      	mov	r0, r4
 8007908:	f7ff fd82 	bl	8007410 <SDMMC_GetCmdResp7>
}
 800790c:	b006      	add	sp, #24
 800790e:	bd10      	pop	{r4, pc}

08007910 <SDMMC_CmdAppCommand>:
{
 8007910:	b530      	push	{r4, r5, lr}
 8007912:	b087      	sub	sp, #28
 8007914:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007916:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007918:	2437      	movs	r4, #55	; 0x37
 800791a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800791c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007920:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007922:	2300      	movs	r3, #0
 8007924:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800792a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800792c:	a901      	add	r1, sp, #4
 800792e:	f7ff fdd1 	bl	80074d4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007932:	f241 3288 	movw	r2, #5000	; 0x1388
 8007936:	4621      	mov	r1, r4
 8007938:	4628      	mov	r0, r5
 800793a:	f7ff fde3 	bl	8007504 <SDMMC_GetCmdResp1>
}
 800793e:	b007      	add	sp, #28
 8007940:	bd30      	pop	{r4, r5, pc}

08007942 <SDMMC_CmdAppOperCommand>:
{
 8007942:	b510      	push	{r4, lr}
 8007944:	b086      	sub	sp, #24
 8007946:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007948:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800794a:	2329      	movs	r3, #41	; 0x29
 800794c:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800794e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007952:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007954:	2300      	movs	r3, #0
 8007956:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800795c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800795e:	a901      	add	r1, sp, #4
 8007960:	f7ff fdb8 	bl	80074d4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007964:	4620      	mov	r0, r4
 8007966:	f7ff fd29 	bl	80073bc <SDMMC_GetCmdResp3>
}
 800796a:	b006      	add	sp, #24
 800796c:	bd10      	pop	{r4, pc}

0800796e <SDMMC_CmdBusWidth>:
{
 800796e:	b530      	push	{r4, r5, lr}
 8007970:	b087      	sub	sp, #28
 8007972:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007974:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007976:	2406      	movs	r4, #6
 8007978:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800797a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800797e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007980:	2300      	movs	r3, #0
 8007982:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007988:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800798a:	a901      	add	r1, sp, #4
 800798c:	f7ff fda2 	bl	80074d4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007990:	f241 3288 	movw	r2, #5000	; 0x1388
 8007994:	4621      	mov	r1, r4
 8007996:	4628      	mov	r0, r5
 8007998:	f7ff fdb4 	bl	8007504 <SDMMC_GetCmdResp1>
}
 800799c:	b007      	add	sp, #28
 800799e:	bd30      	pop	{r4, r5, pc}

080079a0 <SDMMC_CmdSendSCR>:
{
 80079a0:	b530      	push	{r4, r5, lr}
 80079a2:	b087      	sub	sp, #28
 80079a4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 80079a6:	2300      	movs	r3, #0
 80079a8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80079aa:	2433      	movs	r4, #51	; 0x33
 80079ac:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079b2:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079b4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079ba:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079bc:	a901      	add	r1, sp, #4
 80079be:	f7ff fd89 	bl	80074d4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80079c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80079c6:	4621      	mov	r1, r4
 80079c8:	4628      	mov	r0, r5
 80079ca:	f7ff fd9b 	bl	8007504 <SDMMC_GetCmdResp1>
}
 80079ce:	b007      	add	sp, #28
 80079d0:	bd30      	pop	{r4, r5, pc}

080079d2 <SDMMC_CmdSendCID>:
{
 80079d2:	b510      	push	{r4, lr}
 80079d4:	b086      	sub	sp, #24
 80079d6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80079d8:	2300      	movs	r3, #0
 80079da:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80079dc:	2202      	movs	r2, #2
 80079de:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80079e0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80079e4:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079e6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079ec:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079ee:	a901      	add	r1, sp, #4
 80079f0:	f7ff fd70 	bl	80074d4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80079f4:	4620      	mov	r0, r4
 80079f6:	f7ff fcaf 	bl	8007358 <SDMMC_GetCmdResp2>
}
 80079fa:	b006      	add	sp, #24
 80079fc:	bd10      	pop	{r4, pc}

080079fe <SDMMC_CmdSendCSD>:
{
 80079fe:	b510      	push	{r4, lr}
 8007a00:	b086      	sub	sp, #24
 8007a02:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007a04:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007a06:	2309      	movs	r3, #9
 8007a08:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007a0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007a0e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a10:	2300      	movs	r3, #0
 8007a12:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a18:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a1a:	a901      	add	r1, sp, #4
 8007a1c:	f7ff fd5a 	bl	80074d4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007a20:	4620      	mov	r0, r4
 8007a22:	f7ff fc99 	bl	8007358 <SDMMC_GetCmdResp2>
}
 8007a26:	b006      	add	sp, #24
 8007a28:	bd10      	pop	{r4, pc}

08007a2a <SDMMC_CmdSetRelAdd>:
{
 8007a2a:	b570      	push	{r4, r5, r6, lr}
 8007a2c:	b086      	sub	sp, #24
 8007a2e:	4605      	mov	r5, r0
 8007a30:	460e      	mov	r6, r1
  sdmmc_cmdinit.Argument         = 0U;
 8007a32:	2300      	movs	r3, #0
 8007a34:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007a36:	2403      	movs	r4, #3
 8007a38:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a3e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a40:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a46:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a48:	a901      	add	r1, sp, #4
 8007a4a:	f7ff fd43 	bl	80074d4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007a4e:	4632      	mov	r2, r6
 8007a50:	4621      	mov	r1, r4
 8007a52:	4628      	mov	r0, r5
 8007a54:	f7ff fe08 	bl	8007668 <SDMMC_GetCmdResp6>
}
 8007a58:	b006      	add	sp, #24
 8007a5a:	bd70      	pop	{r4, r5, r6, pc}

08007a5c <SDMMC_CmdSendStatus>:
{
 8007a5c:	b530      	push	{r4, r5, lr}
 8007a5e:	b087      	sub	sp, #28
 8007a60:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007a62:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007a64:	240d      	movs	r4, #13
 8007a66:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a6c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a76:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a78:	a901      	add	r1, sp, #4
 8007a7a:	f7ff fd2b 	bl	80074d4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a82:	4621      	mov	r1, r4
 8007a84:	4628      	mov	r0, r5
 8007a86:	f7ff fd3d 	bl	8007504 <SDMMC_GetCmdResp1>
}
 8007a8a:	b007      	add	sp, #28
 8007a8c:	bd30      	pop	{r4, r5, pc}

08007a8e <SDMMC_CmdStatusRegister>:
{
 8007a8e:	b530      	push	{r4, r5, lr}
 8007a90:	b087      	sub	sp, #28
 8007a92:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8007a94:	2300      	movs	r3, #0
 8007a96:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8007a98:	240d      	movs	r4, #13
 8007a9a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007aa0:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007aa2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007aa8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007aaa:	a901      	add	r1, sp, #4
 8007aac:	f7ff fd12 	bl	80074d4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8007ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ab4:	4621      	mov	r1, r4
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	f7ff fd24 	bl	8007504 <SDMMC_GetCmdResp1>
}
 8007abc:	b007      	add	sp, #28
 8007abe:	bd30      	pop	{r4, r5, pc}

08007ac0 <SDMMC_CmdVoltageSwitch>:
{
 8007ac0:	b530      	push	{r4, r5, lr}
 8007ac2:	b087      	sub	sp, #28
 8007ac4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0x00000000;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8007aca:	240b      	movs	r4, #11
 8007acc:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ace:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ad2:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ad4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ada:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007adc:	a901      	add	r1, sp, #4
 8007ade:	f7ff fcf9 	bl	80074d4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8007ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ae6:	4621      	mov	r1, r4
 8007ae8:	4628      	mov	r0, r5
 8007aea:	f7ff fd0b 	bl	8007504 <SDMMC_GetCmdResp1>
}
 8007aee:	b007      	add	sp, #28
 8007af0:	bd30      	pop	{r4, r5, pc}
	...

08007af4 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8007af4:	4b10      	ldr	r3, [pc, #64]	; (8007b38 <FATFS_LinkDriverEx+0x44>)
 8007af6:	7a5b      	ldrb	r3, [r3, #9]
 8007af8:	b9db      	cbnz	r3, 8007b32 <FATFS_LinkDriverEx+0x3e>
{
 8007afa:	b430      	push	{r4, r5}
  {
    disk.is_initialized[disk.nbr] = 0;
 8007afc:	4b0e      	ldr	r3, [pc, #56]	; (8007b38 <FATFS_LinkDriverEx+0x44>)
 8007afe:	7a5d      	ldrb	r5, [r3, #9]
 8007b00:	b2ed      	uxtb	r5, r5
 8007b02:	2400      	movs	r4, #0
 8007b04:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8007b06:	7a5d      	ldrb	r5, [r3, #9]
 8007b08:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8007b0c:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8007b0e:	7a58      	ldrb	r0, [r3, #9]
 8007b10:	4418      	add	r0, r3
 8007b12:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8007b14:	7a5a      	ldrb	r2, [r3, #9]
 8007b16:	b2d2      	uxtb	r2, r2
 8007b18:	1c50      	adds	r0, r2, #1
 8007b1a:	b2c0      	uxtb	r0, r0
 8007b1c:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
 8007b1e:	3230      	adds	r2, #48	; 0x30
 8007b20:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8007b22:	233a      	movs	r3, #58	; 0x3a
 8007b24:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8007b26:	232f      	movs	r3, #47	; 0x2f
 8007b28:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8007b2a:	70cc      	strb	r4, [r1, #3]
    ret = 0;
 8007b2c:	4620      	mov	r0, r4
  }

  return ret;
}
 8007b2e:	bc30      	pop	{r4, r5}
 8007b30:	4770      	bx	lr
  uint8_t ret = 1;
 8007b32:	2001      	movs	r0, #1
}
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	20000104 	.word	0x20000104

08007b3c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007b3c:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f7ff ffd8 	bl	8007af4 <FATFS_LinkDriverEx>
}
 8007b44:	bd08      	pop	{r3, pc}
	...

08007b48 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007b48:	b500      	push	{lr}
 8007b4a:	b08b      	sub	sp, #44	; 0x2c
  ADC_MultiModeTypeDef multimode = {0};
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	9307      	str	r3, [sp, #28]
 8007b50:	9308      	str	r3, [sp, #32]
 8007b52:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	9301      	str	r3, [sp, #4]
 8007b58:	9302      	str	r3, [sp, #8]
 8007b5a:	9303      	str	r3, [sp, #12]
 8007b5c:	9304      	str	r3, [sp, #16]
 8007b5e:	9305      	str	r3, [sp, #20]
 8007b60:	9306      	str	r3, [sp, #24]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8007b62:	483a      	ldr	r0, [pc, #232]	; (8007c4c <MX_ADC1_Init+0x104>)
 8007b64:	4a3a      	ldr	r2, [pc, #232]	; (8007c50 <MX_ADC1_Init+0x108>)
 8007b66:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8007b68:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007b6c:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8007b6e:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007b70:	2201      	movs	r2, #1
 8007b72:	60c2      	str	r2, [r0, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007b74:	2108      	movs	r1, #8
 8007b76:	6101      	str	r1, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007b78:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007b7a:	7543      	strb	r3, [r0, #21]
  hadc1.Init.NbrOfConversion = 4;
 8007b7c:	2104      	movs	r1, #4
 8007b7e:	6181      	str	r1, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007b80:	7703      	strb	r3, [r0, #28]
  hadc1.Init.NbrOfDiscConversion = 4;
 8007b82:	6201      	str	r1, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 8007b84:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8007b88:	6241      	str	r1, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8007b8a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8007b8e:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8007b90:	2103      	movs	r1, #3
 8007b92:	62c1      	str	r1, [r0, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007b94:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8007b96:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8007b98:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = 2;
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	63c2      	str	r2, [r0, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8007ba0:	2220      	movs	r2, #32
 8007ba2:	6402      	str	r2, [r0, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8007ba4:	6443      	str	r3, [r0, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 8007ba6:	f240 4301 	movw	r3, #1025	; 0x401
 8007baa:	6483      	str	r3, [r0, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007bac:	f7f9 f98e 	bl	8000ecc <HAL_ADC_Init>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	d139      	bne.n	8007c28 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007bb4:	a90a      	add	r1, sp, #40	; 0x28
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	f841 3d0c 	str.w	r3, [r1, #-12]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007bbc:	4823      	ldr	r0, [pc, #140]	; (8007c4c <MX_ADC1_Init+0x104>)
 8007bbe:	f7f9 fac3 	bl	8001148 <HAL_ADCEx_MultiModeConfigChannel>
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	d133      	bne.n	8007c2e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8007bc6:	4b23      	ldr	r3, [pc, #140]	; (8007c54 <MX_ADC1_Init+0x10c>)
 8007bc8:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007bca:	2306      	movs	r3, #6
 8007bcc:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007bd2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007bd6:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007bd8:	2304      	movs	r3, #4
 8007bda:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 32768;
 8007bdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007be0:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007be2:	4669      	mov	r1, sp
 8007be4:	4819      	ldr	r0, [pc, #100]	; (8007c4c <MX_ADC1_Init+0x104>)
 8007be6:	f7f8 fd69 	bl	80006bc <HAL_ADC_ConfigChannel>
 8007bea:	bb18      	cbnz	r0, 8007c34 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8007bec:	4b1a      	ldr	r3, [pc, #104]	; (8007c58 <MX_ADC1_Init+0x110>)
 8007bee:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8007bf0:	230c      	movs	r3, #12
 8007bf2:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007bf4:	4669      	mov	r1, sp
 8007bf6:	4815      	ldr	r0, [pc, #84]	; (8007c4c <MX_ADC1_Init+0x104>)
 8007bf8:	f7f8 fd60 	bl	80006bc <HAL_ADC_ConfigChannel>
 8007bfc:	b9e8      	cbnz	r0, 8007c3a <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8007bfe:	4b17      	ldr	r3, [pc, #92]	; (8007c5c <MX_ADC1_Init+0x114>)
 8007c00:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8007c02:	2312      	movs	r3, #18
 8007c04:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007c06:	4669      	mov	r1, sp
 8007c08:	4810      	ldr	r0, [pc, #64]	; (8007c4c <MX_ADC1_Init+0x104>)
 8007c0a:	f7f8 fd57 	bl	80006bc <HAL_ADC_ConfigChannel>
 8007c0e:	b9b8      	cbnz	r0, 8007c40 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8007c10:	4b13      	ldr	r3, [pc, #76]	; (8007c60 <MX_ADC1_Init+0x118>)
 8007c12:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8007c14:	2318      	movs	r3, #24
 8007c16:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007c18:	4669      	mov	r1, sp
 8007c1a:	480c      	ldr	r0, [pc, #48]	; (8007c4c <MX_ADC1_Init+0x104>)
 8007c1c:	f7f8 fd4e 	bl	80006bc <HAL_ADC_ConfigChannel>
 8007c20:	b988      	cbnz	r0, 8007c46 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
  }

}
 8007c22:	b00b      	add	sp, #44	; 0x2c
 8007c24:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8007c28:	f001 f8dc 	bl	8008de4 <Error_Handler>
 8007c2c:	e7c2      	b.n	8007bb4 <MX_ADC1_Init+0x6c>
    Error_Handler();
 8007c2e:	f001 f8d9 	bl	8008de4 <Error_Handler>
 8007c32:	e7c8      	b.n	8007bc6 <MX_ADC1_Init+0x7e>
    Error_Handler();
 8007c34:	f001 f8d6 	bl	8008de4 <Error_Handler>
 8007c38:	e7d8      	b.n	8007bec <MX_ADC1_Init+0xa4>
    Error_Handler();
 8007c3a:	f001 f8d3 	bl	8008de4 <Error_Handler>
 8007c3e:	e7de      	b.n	8007bfe <MX_ADC1_Init+0xb6>
    Error_Handler();
 8007c40:	f001 f8d0 	bl	8008de4 <Error_Handler>
 8007c44:	e7e4      	b.n	8007c10 <MX_ADC1_Init+0xc8>
    Error_Handler();
 8007c46:	f001 f8cd 	bl	8008de4 <Error_Handler>
}
 8007c4a:	e7ea      	b.n	8007c22 <MX_ADC1_Init+0xda>
 8007c4c:	20000160 	.word	0x20000160
 8007c50:	40022000 	.word	0x40022000
 8007c54:	3ef08000 	.word	0x3ef08000
 8007c58:	47520000 	.word	0x47520000
 8007c5c:	3ac04000 	.word	0x3ac04000
 8007c60:	43210000 	.word	0x43210000

08007c64 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007c64:	b510      	push	{r4, lr}
 8007c66:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c68:	2300      	movs	r3, #0
 8007c6a:	9303      	str	r3, [sp, #12]
 8007c6c:	9304      	str	r3, [sp, #16]
 8007c6e:	9305      	str	r3, [sp, #20]
 8007c70:	9306      	str	r3, [sp, #24]
 8007c72:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8007c74:	6802      	ldr	r2, [r0, #0]
 8007c76:	4b27      	ldr	r3, [pc, #156]	; (8007d14 <HAL_ADC_MspInit+0xb0>)
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d001      	beq.n	8007c80 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8007c7c:	b008      	add	sp, #32
 8007c7e:	bd10      	pop	{r4, pc}
 8007c80:	4604      	mov	r4, r0
    __HAL_RCC_ADC12_CLK_ENABLE();
 8007c82:	4b25      	ldr	r3, [pc, #148]	; (8007d18 <HAL_ADC_MspInit+0xb4>)
 8007c84:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8007c88:	f042 0220 	orr.w	r2, r2, #32
 8007c8c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8007c90:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8007c94:	f002 0220 	and.w	r2, r2, #32
 8007c98:	9201      	str	r2, [sp, #4]
 8007c9a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007ca0:	f042 0201 	orr.w	r2, r2, #1
 8007ca4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	9302      	str	r3, [sp, #8]
 8007cb2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8007cb4:	230f      	movs	r3, #15
 8007cb6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cbc:	a903      	add	r1, sp, #12
 8007cbe:	4817      	ldr	r0, [pc, #92]	; (8007d1c <HAL_ADC_MspInit+0xb8>)
 8007cc0:	f7fa fdc4 	bl	800284c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8007cc4:	4816      	ldr	r0, [pc, #88]	; (8007d20 <HAL_ADC_MspInit+0xbc>)
 8007cc6:	4b17      	ldr	r3, [pc, #92]	; (8007d24 <HAL_ADC_MspInit+0xc0>)
 8007cc8:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8007cca:	2309      	movs	r3, #9
 8007ccc:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007cd2:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007cd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007cd8:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007cda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007cde:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007ce0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007ce4:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007ce6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cea:	61c2      	str	r2, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007cec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007cf0:	6202      	str	r2, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007cf2:	2204      	movs	r2, #4
 8007cf4:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8007cfa:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007cfc:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007cfe:	f7f9 fda7 	bl	8001850 <HAL_DMA_Init>
 8007d02:	b918      	cbnz	r0, 8007d0c <HAL_ADC_MspInit+0xa8>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8007d04:	4b06      	ldr	r3, [pc, #24]	; (8007d20 <HAL_ADC_MspInit+0xbc>)
 8007d06:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007d08:	639c      	str	r4, [r3, #56]	; 0x38
}
 8007d0a:	e7b7      	b.n	8007c7c <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8007d0c:	f001 f86a 	bl	8008de4 <Error_Handler>
 8007d10:	e7f8      	b.n	8007d04 <HAL_ADC_MspInit+0xa0>
 8007d12:	bf00      	nop
 8007d14:	40022000 	.word	0x40022000
 8007d18:	58024400 	.word	0x58024400
 8007d1c:	58020000 	.word	0x58020000
 8007d20:	200001c4 	.word	0x200001c4
 8007d24:	40020010 	.word	0x40020010

08007d28 <audioInit>:
	TRUE
} BOOL;


void audioInit(I2C_HandleTypeDef* hi2c, SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 8007d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d2c:	b082      	sub	sp, #8
 8007d2e:	4604      	mov	r4, r0
 8007d30:	460e      	mov	r6, r1
 8007d32:	4615      	mov	r5, r2
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, AUDIO_FRAME_SIZE, smallMemory, SMALL_MEM_SIZE, &randomNumber);
 8007d34:	4f62      	ldr	r7, [pc, #392]	; (8007ec0 <audioInit+0x198>)
 8007d36:	4b63      	ldr	r3, [pc, #396]	; (8007ec4 <audioInit+0x19c>)
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	4b63      	ldr	r3, [pc, #396]	; (8007ec8 <audioInit+0x1a0>)
 8007d3c:	4a63      	ldr	r2, [pc, #396]	; (8007ecc <audioInit+0x1a4>)
 8007d3e:	2180      	movs	r1, #128	; 0x80
 8007d40:	ed9f 0a63 	vldr	s0, [pc, #396]	; 8007ed0 <audioInit+0x1a8>
 8007d44:	4638      	mov	r0, r7
 8007d46:	f003 f8e9 	bl	800af1c <LEAF_init>

	tMempool_init (&mediumPool, mediumMemory, MEDIUM_MEM_SIZE, &leaf);
 8007d4a:	463b      	mov	r3, r7
 8007d4c:	4a61      	ldr	r2, [pc, #388]	; (8007ed4 <audioInit+0x1ac>)
 8007d4e:	4962      	ldr	r1, [pc, #392]	; (8007ed8 <audioInit+0x1b0>)
 8007d50:	4862      	ldr	r0, [pc, #392]	; (8007edc <audioInit+0x1b4>)
 8007d52:	f002 fd54 	bl	800a7fe <tMempool_init>
	tMempool_init (&largePool, largeMemory, LARGE_MEM_SIZE, &leaf);
 8007d56:	463b      	mov	r3, r7
 8007d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007d5c:	4960      	ldr	r1, [pc, #384]	; (8007ee0 <audioInit+0x1b8>)
 8007d5e:	4861      	ldr	r0, [pc, #388]	; (8007ee4 <audioInit+0x1bc>)
 8007d60:	f002 fd4d 	bl	800a7fe <tMempool_init>

	HAL_Delay(10);
 8007d64:	200a      	movs	r0, #10
 8007d66:	f7f8 fc2d 	bl	80005c4 <HAL_Delay>

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	e004      	b.n	8007d78 <audioInit+0x50>
	{
		audioOutBuffer[i] = 0;
 8007d6e:	4a5e      	ldr	r2, [pc, #376]	; (8007ee8 <audioInit+0x1c0>)
 8007d70:	2100      	movs	r1, #0
 8007d72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8007d76:	3301      	adds	r3, #1
 8007d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d7c:	dbf7      	blt.n	8007d6e <audioInit+0x46>
	}


	LEAF_generate_atodb(atodbTable, ATODB_TABLE_SIZE);
 8007d7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d82:	485a      	ldr	r0, [pc, #360]	; (8007eec <audioInit+0x1c4>)
 8007d84:	f002 fc12 	bl	800a5ac <LEAF_generate_atodb>

	tSimplePoly_init(&poly,1, &leaf);
 8007d88:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8007ec0 <audioInit+0x198>
 8007d8c:	4f58      	ldr	r7, [pc, #352]	; (8007ef0 <audioInit+0x1c8>)
 8007d8e:	4642      	mov	r2, r8
 8007d90:	2101      	movs	r1, #1
 8007d92:	4638      	mov	r0, r7
 8007d94:	f002 fe1d 	bl	800a9d2 <tSimplePoly_init>
	tSimplePoly_setNumVoices(&poly,1);
 8007d98:	2101      	movs	r1, #1
 8007d9a:	4638      	mov	r0, r7
 8007d9c:	f002 ff1b 	bl	800abd6 <tSimplePoly_setNumVoices>
	poly->recover_stolen = 0;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	2700      	movs	r7, #0
 8007da4:	619f      	str	r7, [r3, #24]
	tExpSmooth_init(&gainSmoothed, 0.0f, 0.01f, &leaf);
 8007da6:	4641      	mov	r1, r8
 8007da8:	eddf 0a52 	vldr	s1, [pc, #328]	; 8007ef4 <audioInit+0x1cc>
 8007dac:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8007ef8 <audioInit+0x1d0>
 8007db0:	4852      	ldr	r0, [pc, #328]	; (8007efc <audioInit+0x1d4>)
 8007db2:	f002 fae3 	bl	800a37c <tExpSmooth_init>
	tLockhartWavefolder_init(&folder, &leaf);
 8007db6:	4641      	mov	r1, r8
 8007db8:	4851      	ldr	r0, [pc, #324]	; (8007f00 <audioInit+0x1d8>)
 8007dba:	f002 f829 	bl	8009e10 <tLockhartWavefolder_init>

	for (int i = 0; i < NUM_STRINGS; i++)
 8007dbe:	e006      	b.n	8007dce <audioInit+0xa6>
	{
		tPluckDetectorInt_initToPool(&pluck[i], &mediumPool);
 8007dc0:	4946      	ldr	r1, [pc, #280]	; (8007edc <audioInit+0x1b4>)
 8007dc2:	4850      	ldr	r0, [pc, #320]	; (8007f04 <audioInit+0x1dc>)
 8007dc4:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 8007dc8:	f001 fc94 	bl	80096f4 <tPluckDetectorInt_initToPool>
	for (int i = 0; i < NUM_STRINGS; i++)
 8007dcc:	3701      	adds	r7, #1
 8007dce:	2f03      	cmp	r7, #3
 8007dd0:	ddf6      	ble.n	8007dc0 <audioInit+0x98>

	}


	for (int j = 0; j < NUM_SAWTOOTHS; j++)
 8007dd2:	2700      	movs	r7, #0
 8007dd4:	2f00      	cmp	r7, #0
 8007dd6:	dd4a      	ble.n	8007e6e <audioInit+0x146>
	{
		tSawtooth_init(&mySaw[j], &leaf);
	}

	//the monophonic synth voice
	tSVF_init(&myLowpass, SVFTypeLowpass, 5000.0f, 0.5f, &leaf);
 8007dd8:	4f39      	ldr	r7, [pc, #228]	; (8007ec0 <audioInit+0x198>)
 8007dda:	463a      	mov	r2, r7
 8007ddc:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8007de0:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8007f08 <audioInit+0x1e0>
 8007de4:	2101      	movs	r1, #1
 8007de6:	4849      	ldr	r0, [pc, #292]	; (8007f0c <audioInit+0x1e4>)
 8007de8:	f002 fb40 	bl	800a46c <tSVF_init>
	tCycle_init(&mySine, &leaf);
 8007dec:	4639      	mov	r1, r7
 8007dee:	4848      	ldr	r0, [pc, #288]	; (8007f10 <audioInit+0x1e8>)
 8007df0:	f002 ff29 	bl	800ac46 <tCycle_init>
	tExpSmooth_init(&pitchSmoother, 80.0f, 0.002f, &leaf);
 8007df4:	4639      	mov	r1, r7
 8007df6:	eddf 0a47 	vldr	s1, [pc, #284]	; 8007f14 <audioInit+0x1ec>
 8007dfa:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8007f18 <audioInit+0x1f0>
 8007dfe:	4847      	ldr	r0, [pc, #284]	; (8007f1c <audioInit+0x1f4>)
 8007e00:	f002 fabc 	bl	800a37c <tExpSmooth_init>
	tNoise_init(&noise, PinkNoise, &leaf);
 8007e04:	463a      	mov	r2, r7
 8007e06:	2101      	movs	r1, #1
 8007e08:	4845      	ldr	r0, [pc, #276]	; (8007f20 <audioInit+0x1f8>)
 8007e0a:	f003 f828 	bl	800ae5e <tNoise_init>
	tADSR_init(&pitchEnvelope, 6.0f, 200.0f, 0.8f, 20.0f, &leaf);
 8007e0e:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8007f4c <audioInit+0x224>
 8007e12:	4639      	mov	r1, r7
 8007e14:	eef3 1a04 	vmov.f32	s3, #52	; 0x41a00000  20.0
 8007e18:	ed9f 1a42 	vldr	s2, [pc, #264]	; 8007f24 <audioInit+0x1fc>
 8007e1c:	eddf 0a42 	vldr	s1, [pc, #264]	; 8007f28 <audioInit+0x200>
 8007e20:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8007e24:	4640      	mov	r0, r8
 8007e26:	f002 f979 	bl	800a11c <tADSR_init>
	tADSR_setLeakFactor(&pitchEnvelope, 0.999997f);
 8007e2a:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8007f2c <audioInit+0x204>
 8007e2e:	4640      	mov	r0, r8
 8007e30:	f002 f979 	bl	800a126 <tADSR_setLeakFactor>
	tADSR_init(&noiseEnvelope, 0.0f, 20.0f, 0.0f, 8.0f, &leaf);
 8007e34:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8007ef8 <audioInit+0x1d0>
 8007e38:	4639      	mov	r1, r7
 8007e3a:	eef2 1a00 	vmov.f32	s3, #32	; 0x41000000  8.0
 8007e3e:	eeb0 1a40 	vmov.f32	s2, s0
 8007e42:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8007e46:	483a      	ldr	r0, [pc, #232]	; (8007f30 <audioInit+0x208>)
 8007e48:	f002 f968 	bl	800a11c <tADSR_init>
	tADSR_init(&filterEnvelope, 1.0f, 500.0f, 0.25f, 100.0f, &leaf);
 8007e4c:	4639      	mov	r1, r7
 8007e4e:	eddf 1a39 	vldr	s3, [pc, #228]	; 8007f34 <audioInit+0x20c>
 8007e52:	eeb5 1a00 	vmov.f32	s2, #80	; 0x3e800000  0.250
 8007e56:	eddf 0a38 	vldr	s1, [pc, #224]	; 8007f38 <audioInit+0x210>
 8007e5a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007e5e:	4837      	ldr	r0, [pc, #220]	; (8007f3c <audioInit+0x214>)
 8007e60:	f002 f95c 	bl	800a11c <tADSR_init>

	HAL_Delay(1);
 8007e64:	2001      	movs	r0, #1
 8007e66:	f7f8 fbad 	bl	80005c4 <HAL_Delay>

	//clear the buffer
	for (int i = 0; i < (AUDIO_BUFFER_SIZE); i++)
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	e00c      	b.n	8007e88 <audioInit+0x160>
		tSawtooth_init(&mySaw[j], &leaf);
 8007e6e:	4914      	ldr	r1, [pc, #80]	; (8007ec0 <audioInit+0x198>)
 8007e70:	4833      	ldr	r0, [pc, #204]	; (8007f40 <audioInit+0x218>)
 8007e72:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 8007e76:	f002 ff93 	bl	800ada0 <tSawtooth_init>
	for (int j = 0; j < NUM_SAWTOOTHS; j++)
 8007e7a:	3701      	adds	r7, #1
 8007e7c:	e7aa      	b.n	8007dd4 <audioInit+0xac>
	{
		audioOutBuffer[i] = 0;
 8007e7e:	4a1a      	ldr	r2, [pc, #104]	; (8007ee8 <audioInit+0x1c0>)
 8007e80:	2100      	movs	r1, #0
 8007e82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < (AUDIO_BUFFER_SIZE); i++)
 8007e86:	3301      	adds	r3, #1
 8007e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e8c:	dbf7      	blt.n	8007e7e <audioInit+0x156>
	}

	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8007e8e:	4f16      	ldr	r7, [pc, #88]	; (8007ee8 <audioInit+0x1c0>)
 8007e90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e94:	4639      	mov	r1, r7
 8007e96:	4630      	mov	r0, r6
 8007e98:	f7fd fb78 	bl	800558c <HAL_SAI_Transmit_DMA>
 8007e9c:	4b29      	ldr	r3, [pc, #164]	; (8007f44 <audioInit+0x21c>)
 8007e9e:	7018      	strb	r0, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 8007ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ea4:	f507 6100 	add.w	r1, r7, #2048	; 0x800
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	f7fd fbf1 	bl	8005690 <HAL_SAI_Receive_DMA>
 8007eae:	4b26      	ldr	r3, [pc, #152]	; (8007f48 <audioInit+0x220>)
 8007eb0:	7018      	strb	r0, [r3, #0]
	// so while we used to set up codec before starting SAI, now we need to set up codec afterwards, and set a flag to make sure it's ready

	//init the AH attack detector

	//now to send all the necessary messages to the codec
	AudioCodec_init(hi2c);
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f000 fbbc 	bl	8008630 <AudioCodec_init>

}
 8007eb8:	b002      	add	sp, #8
 8007eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ebe:	bf00      	nop
 8007ec0:	20000270 	.word	0x20000270
 8007ec4:	08008d35 	.word	0x08008d35
 8007ec8:	00013880 	.word	0x00013880
 8007ecc:	20000b88 	.word	0x20000b88
 8007ed0:	473b8000 	.word	0x473b8000
 8007ed4:	0007eb58 	.word	0x0007eb58
 8007ed8:	24000000 	.word	0x24000000
 8007edc:	2000036c 	.word	0x2000036c
 8007ee0:	60000000 	.word	0x60000000
 8007ee4:	20000328 	.word	0x20000328
 8007ee8:	30000000 	.word	0x30000000
 8007eec:	20000388 	.word	0x20000388
 8007ef0:	20000350 	.word	0x20000350
 8007ef4:	3c23d70a 	.word	0x3c23d70a
 8007ef8:	00000000 	.word	0x00000000
 8007efc:	200002b8 	.word	0x200002b8
 8007f00:	20000370 	.word	0x20000370
 8007f04:	200002bc 	.word	0x200002bc
 8007f08:	459c4000 	.word	0x459c4000
 8007f0c:	20000244 	.word	0x20000244
 8007f10:	200002d0 	.word	0x200002d0
 8007f14:	3b03126f 	.word	0x3b03126f
 8007f18:	42a00000 	.word	0x42a00000
 8007f1c:	20000364 	.word	0x20000364
 8007f20:	2001441c 	.word	0x2001441c
 8007f24:	3f4ccccd 	.word	0x3f4ccccd
 8007f28:	43480000 	.word	0x43480000
 8007f2c:	3f7fffce 	.word	0x3f7fffce
 8007f30:	200002d4 	.word	0x200002d4
 8007f34:	42c80000 	.word	0x42c80000
 8007f38:	43fa0000 	.word	0x43fa0000
 8007f3c:	20000240 	.word	0x20000240
 8007f40:	20014408 	.word	0x20014408
 8007f44:	200002d8 	.word	0x200002d8
 8007f48:	20000368 	.word	0x20000368
 8007f4c:	200002cc 	.word	0x200002cc

08007f50 <CycleCounterTrackMinAndMax>:



//this keeps min and max, but doesn't do the array for averaging - a bit less expensive
void CycleCounterTrackMinAndMax( int whichCount)
{
 8007f50:	b538      	push	{r3, r4, r5, lr}
	if (cycleCountVals[whichCount] > 0) //the [2] spot in the array will be set to 1 if an interrupt happened during the cycle count -- need to set that in any higher-priority interrupts to make that true
 8007f52:	4b28      	ldr	r3, [pc, #160]	; (8007ff4 <CycleCounterTrackMinAndMax+0xa4>)
 8007f54:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8007f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5c:	2a01      	cmp	r2, #1
 8007f5e:	f173 0300 	sbcs.w	r3, r3, #0
 8007f62:	db46      	blt.n	8007ff2 <CycleCounterTrackMinAndMax+0xa2>
 8007f64:	4604      	mov	r4, r0
	{
		if ((cycleCountVals[whichCount] < cycleCountAverages[whichCount][1]) || (cycleCountAverages[whichCount][1] == 0))
 8007f66:	4b23      	ldr	r3, [pc, #140]	; (8007ff4 <CycleCounterTrackMinAndMax+0xa4>)
 8007f68:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8007f6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f70:	f7f8 fa82 	bl	8000478 <__aeabi_l2f>
 8007f74:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8007f78:	009a      	lsls	r2, r3, #2
 8007f7a:	4b1f      	ldr	r3, [pc, #124]	; (8007ff8 <CycleCounterTrackMinAndMax+0xa8>)
 8007f7c:	4413      	add	r3, r2
 8007f7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8007f82:	ee07 0a10 	vmov	s14, r0
 8007f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f8e:	d404      	bmi.n	8007f9a <CycleCounterTrackMinAndMax+0x4a>
 8007f90:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f98:	d10c      	bne.n	8007fb4 <CycleCounterTrackMinAndMax+0x64>
		{
			cycleCountAverages[whichCount][1] = cycleCountVals[whichCount];
 8007f9a:	4b16      	ldr	r3, [pc, #88]	; (8007ff4 <CycleCounterTrackMinAndMax+0xa4>)
 8007f9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007fa0:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8007fa4:	008a      	lsls	r2, r1, #2
 8007fa6:	4d14      	ldr	r5, [pc, #80]	; (8007ff8 <CycleCounterTrackMinAndMax+0xa8>)
 8007fa8:	4415      	add	r5, r2
 8007faa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007fae:	f7f8 fa63 	bl	8000478 <__aeabi_l2f>
 8007fb2:	6068      	str	r0, [r5, #4]
		}
		//update max value ([2])
		if (cycleCountVals[whichCount] > cycleCountAverages[whichCount][2])
 8007fb4:	4b0f      	ldr	r3, [pc, #60]	; (8007ff4 <CycleCounterTrackMinAndMax+0xa4>)
 8007fb6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007fba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007fbe:	f7f8 fa5b 	bl	8000478 <__aeabi_l2f>
 8007fc2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8007fc6:	009a      	lsls	r2, r3, #2
 8007fc8:	4b0b      	ldr	r3, [pc, #44]	; (8007ff8 <CycleCounterTrackMinAndMax+0xa8>)
 8007fca:	4413      	add	r3, r2
 8007fcc:	edd3 7a02 	vldr	s15, [r3, #8]
 8007fd0:	ee07 0a10 	vmov	s14, r0
 8007fd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fdc:	dd09      	ble.n	8007ff2 <CycleCounterTrackMinAndMax+0xa2>
		{
			cycleCountAverages[whichCount][2] = cycleCountVals[whichCount];
 8007fde:	4b05      	ldr	r3, [pc, #20]	; (8007ff4 <CycleCounterTrackMinAndMax+0xa4>)
 8007fe0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007fe4:	4c04      	ldr	r4, [pc, #16]	; (8007ff8 <CycleCounterTrackMinAndMax+0xa8>)
 8007fe6:	4414      	add	r4, r2
 8007fe8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007fec:	f7f8 fa44 	bl	8000478 <__aeabi_l2f>
 8007ff0:	60a0      	str	r0, [r4, #8]
		}
	}
}
 8007ff2:	bd38      	pop	{r3, r4, r5, pc}
 8007ff4:	20000330 	.word	0x20000330
 8007ff8:	200002f8 	.word	0x200002f8

08007ffc <map>:



float map(float value, float istart, float istop, float ostart, float ostop)
{
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8007ffc:	ee32 2a61 	vsub.f32	s4, s4, s3
 8008000:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008004:	ee31 1a60 	vsub.f32	s2, s2, s1
 8008008:	eec0 7a01 	vdiv.f32	s15, s0, s2
 800800c:	ee22 2a27 	vmul.f32	s4, s4, s15
}
 8008010:	ee32 0a21 	vadd.f32	s0, s4, s3
 8008014:	4770      	bx	lr
	...

08008018 <processString>:
{
 8008018:	b538      	push	{r3, r4, r5, lr}
 800801a:	4604      	mov	r4, r0
	stringTouchLH[whichString] = (SPI_RX[8] >> whichString) & 1;
 800801c:	4b66      	ldr	r3, [pc, #408]	; (80081b8 <processString+0x1a0>)
 800801e:	7a1b      	ldrb	r3, [r3, #8]
 8008020:	fa43 f200 	asr.w	r2, r3, r0
 8008024:	f002 0201 	and.w	r2, r2, #1
 8008028:	4964      	ldr	r1, [pc, #400]	; (80081bc <processString+0x1a4>)
 800802a:	540a      	strb	r2, [r1, r0]
	stringTouchRH[whichString] = (SPI_RX[8] >> (whichString + 4)) & 1;
 800802c:	1d02      	adds	r2, r0, #4
 800802e:	4113      	asrs	r3, r2
 8008030:	f003 0301 	and.w	r3, r3, #1
 8008034:	4a62      	ldr	r2, [pc, #392]	; (80081c0 <processString+0x1a8>)
 8008036:	5413      	strb	r3, [r2, r0]
	if (stringTouchRH[0])
 8008038:	7813      	ldrb	r3, [r2, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	f000 8082 	beq.w	8008144 <processString+0x12c>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, GPIO_PIN_SET);
 8008040:	2201      	movs	r2, #1
 8008042:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008046:	485f      	ldr	r0, [pc, #380]	; (80081c4 <processString+0x1ac>)
 8008048:	f7fa fcf7 	bl	8002a3a <HAL_GPIO_WritePin>
	if (stringTouchRH[1])
 800804c:	4b5c      	ldr	r3, [pc, #368]	; (80081c0 <processString+0x1a8>)
 800804e:	785b      	ldrb	r3, [r3, #1]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d07e      	beq.n	8008152 <processString+0x13a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8008054:	2201      	movs	r2, #1
 8008056:	2180      	movs	r1, #128	; 0x80
 8008058:	485b      	ldr	r0, [pc, #364]	; (80081c8 <processString+0x1b0>)
 800805a:	f7fa fcee 	bl	8002a3a <HAL_GPIO_WritePin>
	stringPositions[whichString] =  ((uint16_t)SPI_RX[whichString * 2] << 8) + ((uint16_t)SPI_RX[(whichString * 2) + 1] & 0xff);
 800805e:	0062      	lsls	r2, r4, #1
 8008060:	4955      	ldr	r1, [pc, #340]	; (80081b8 <processString+0x1a0>)
 8008062:	f811 0014 	ldrb.w	r0, [r1, r4, lsl #1]
 8008066:	3201      	adds	r2, #1
 8008068:	5c8b      	ldrb	r3, [r1, r2]
 800806a:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 800806e:	b29b      	uxth	r3, r3
 8008070:	4a56      	ldr	r2, [pc, #344]	; (80081cc <processString+0x1b4>)
 8008072:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
	if (stringPositions[whichString] == 65535)
 8008076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800807a:	4293      	cmp	r3, r2
 800807c:	d06f      	beq.n	800815e <processString+0x146>
		stringMappedPositions[whichString] = map((float)stringPositions[whichString], fretMeasurements[1][whichString], fretMeasurements[2][whichString], fretScaling[1], fretScaling[2]);
 800807e:	4854      	ldr	r0, [pc, #336]	; (80081d0 <processString+0x1b8>)
 8008080:	4a54      	ldr	r2, [pc, #336]	; (80081d4 <processString+0x1bc>)
 8008082:	f104 0108 	add.w	r1, r4, #8
 8008086:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800808a:	1d25      	adds	r5, r4, #4
 800808c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8008090:	ed90 2a02 	vldr	s4, [r0, #8]
 8008094:	edd0 1a01 	vldr	s3, [r0, #4]
 8008098:	ed91 1a00 	vldr	s2, [r1]
 800809c:	edd2 0a00 	vldr	s1, [r2]
 80080a0:	ee07 3a90 	vmov	s15, r3
 80080a4:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 80080a8:	f7ff ffa8 	bl	8007ffc <map>
 80080ac:	00a2      	lsls	r2, r4, #2
 80080ae:	4b4a      	ldr	r3, [pc, #296]	; (80081d8 <processString+0x1c0>)
 80080b0:	4413      	add	r3, r2
 80080b2:	ed83 0a00 	vstr	s0, [r3]
		stringFrequencies[whichString] = ((1.0 / stringMappedPositions[whichString])) * openStringFrequencies[whichString];
 80080b6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80080ba:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80080be:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80080c2:	4b46      	ldr	r3, [pc, #280]	; (80081dc <processString+0x1c4>)
 80080c4:	4413      	add	r3, r2
 80080c6:	ed93 6a00 	vldr	s12, [r3]
 80080ca:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 80080ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80080d2:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80080d6:	4b42      	ldr	r3, [pc, #264]	; (80081e0 <processString+0x1c8>)
 80080d8:	4413      	add	r3, r2
 80080da:	ed83 7a00 	vstr	s14, [r3]
	if ((stringTouchLH[whichString]) && (stringPositions[whichString] == 65535))
 80080de:	4b37      	ldr	r3, [pc, #220]	; (80081bc <processString+0x1a4>)
 80080e0:	5d1b      	ldrb	r3, [r3, r4]
 80080e2:	b133      	cbz	r3, 80080f2 <processString+0xda>
 80080e4:	4b39      	ldr	r3, [pc, #228]	; (80081cc <processString+0x1b4>)
 80080e6:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 80080ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d03d      	beq.n	800816e <processString+0x156>
		LHmuteCounter[whichString] = 0;
 80080f2:	4b3c      	ldr	r3, [pc, #240]	; (80081e4 <processString+0x1cc>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	if (stringTouchRH[whichString])
 80080fa:	4b31      	ldr	r3, [pc, #196]	; (80081c0 <processString+0x1a8>)
 80080fc:	5d1b      	ldrb	r3, [r3, r4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d03c      	beq.n	800817c <processString+0x164>
		RHmuteCounter[whichString]++;
 8008102:	4a39      	ldr	r2, [pc, #228]	; (80081e8 <processString+0x1d0>)
 8008104:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8008108:	3301      	adds	r3, #1
 800810a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	if (((LHmuteCounter[whichString] > LHMUTE_COUNTLIM) || (RHmuteCounter[whichString] > RHMUTE_COUNTLIM)))
 800810e:	4b35      	ldr	r3, [pc, #212]	; (80081e4 <processString+0x1cc>)
 8008110:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008114:	2b80      	cmp	r3, #128	; 0x80
 8008116:	dc05      	bgt.n	8008124 <processString+0x10c>
 8008118:	4b33      	ldr	r3, [pc, #204]	; (80081e8 <processString+0x1d0>)
 800811a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800811e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008122:	dd03      	ble.n	800812c <processString+0x114>
		if (offLockout[whichString] == 0)
 8008124:	4b31      	ldr	r3, [pc, #196]	; (80081ec <processString+0x1d4>)
 8008126:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800812a:	b363      	cbz	r3, 8008186 <processString+0x16e>
	if (offLockout[whichString] > 0)
 800812c:	4b2f      	ldr	r3, [pc, #188]	; (80081ec <processString+0x1d4>)
 800812e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008132:	2b00      	cmp	r3, #0
 8008134:	dd03      	ble.n	800813e <processString+0x126>
		offLockout[whichString]--;
 8008136:	3b01      	subs	r3, #1
 8008138:	4a2c      	ldr	r2, [pc, #176]	; (80081ec <processString+0x1d4>)
 800813a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 800813e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80081f0 <processString+0x1d8>
 8008142:	bd38      	pop	{r3, r4, r5, pc}
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, GPIO_PIN_RESET);
 8008144:	2200      	movs	r2, #0
 8008146:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800814a:	481e      	ldr	r0, [pc, #120]	; (80081c4 <processString+0x1ac>)
 800814c:	f7fa fc75 	bl	8002a3a <HAL_GPIO_WritePin>
 8008150:	e77c      	b.n	800804c <processString+0x34>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8008152:	2200      	movs	r2, #0
 8008154:	2180      	movs	r1, #128	; 0x80
 8008156:	481c      	ldr	r0, [pc, #112]	; (80081c8 <processString+0x1b0>)
 8008158:	f7fa fc6f 	bl	8002a3a <HAL_GPIO_WritePin>
 800815c:	e77f      	b.n	800805e <processString+0x46>
		stringFrequencies[whichString] = openStringFrequencies[whichString];
 800815e:	00a1      	lsls	r1, r4, #2
 8008160:	4a1e      	ldr	r2, [pc, #120]	; (80081dc <processString+0x1c4>)
 8008162:	440a      	add	r2, r1
 8008164:	6812      	ldr	r2, [r2, #0]
 8008166:	4b1e      	ldr	r3, [pc, #120]	; (80081e0 <processString+0x1c8>)
 8008168:	440b      	add	r3, r1
 800816a:	601a      	str	r2, [r3, #0]
 800816c:	e7b7      	b.n	80080de <processString+0xc6>
		LHmuteCounter[whichString]++;
 800816e:	4a1d      	ldr	r2, [pc, #116]	; (80081e4 <processString+0x1cc>)
 8008170:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8008174:	3301      	adds	r3, #1
 8008176:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800817a:	e7be      	b.n	80080fa <processString+0xe2>
		RHmuteCounter[whichString] = 0;
 800817c:	4b1a      	ldr	r3, [pc, #104]	; (80081e8 <processString+0x1d0>)
 800817e:	2200      	movs	r2, #0
 8008180:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8008184:	e7c3      	b.n	800810e <processString+0xf6>
			tSimplePoly_noteOff(&poly, whichString);
 8008186:	4d1b      	ldr	r5, [pc, #108]	; (80081f4 <processString+0x1dc>)
 8008188:	b2e1      	uxtb	r1, r4
 800818a:	4628      	mov	r0, r5
 800818c:	f002 fccf 	bl	800ab2e <tSimplePoly_noteOff>
			if (tSimplePoly_getNumActiveVoices(&poly) == 0)
 8008190:	4628      	mov	r0, r5
 8008192:	f002 fd27 	bl	800abe4 <tSimplePoly_getNumActiveVoices>
 8008196:	2800      	cmp	r0, #0
 8008198:	d1c8      	bne.n	800812c <processString+0x114>
				tADSR_off(&pitchEnvelope);
 800819a:	4817      	ldr	r0, [pc, #92]	; (80081f8 <processString+0x1e0>)
 800819c:	f001 ffe4 	bl	800a168 <tADSR_off>
				tADSR_off(&filterEnvelope);
 80081a0:	4816      	ldr	r0, [pc, #88]	; (80081fc <processString+0x1e4>)
 80081a2:	f001 ffe1 	bl	800a168 <tADSR_off>
				tADSR_off(&noiseEnvelope);
 80081a6:	4816      	ldr	r0, [pc, #88]	; (8008200 <processString+0x1e8>)
 80081a8:	f001 ffde 	bl	800a168 <tADSR_off>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80081ac:	2200      	movs	r2, #0
 80081ae:	2110      	movs	r1, #16
 80081b0:	4814      	ldr	r0, [pc, #80]	; (8008204 <processString+0x1ec>)
 80081b2:	f7fa fc42 	bl	8002a3a <HAL_GPIO_WritePin>
 80081b6:	e7b9      	b.n	800812c <processString+0x114>
 80081b8:	30001420 	.word	0x30001420
 80081bc:	20000148 	.word	0x20000148
 80081c0:	2000014c 	.word	0x2000014c
 80081c4:	58021800 	.word	0x58021800
 80081c8:	58020c00 	.word	0x58020c00
 80081cc:	20000248 	.word	0x20000248
 80081d0:	20000050 	.word	0x20000050
 80081d4:	20000010 	.word	0x20000010
 80081d8:	20000354 	.word	0x20000354
 80081dc:	20000060 	.word	0x20000060
 80081e0:	20014430 	.word	0x20014430
 80081e4:	20000114 	.word	0x20000114
 80081e8:	20000124 	.word	0x20000124
 80081ec:	200002e8 	.word	0x200002e8
 80081f0:	00000000 	.word	0x00000000
 80081f4:	20000350 	.word	0x20000350
 80081f8:	200002cc 	.word	0x200002cc
 80081fc:	20000240 	.word	0x20000240
 8008200:	200002d4 	.word	0x200002d4
 8008204:	58020400 	.word	0x58020400

08008208 <audioTick>:
{
 8008208:	b538      	push	{r3, r4, r5, lr}
 800820a:	ed2d 8b04 	vpush	{d8-d9}
	for (int i = 0; i < NUM_STRINGS; i++)
 800820e:	2400      	movs	r4, #0
 8008210:	e003      	b.n	800821a <audioTick+0x12>
		processString(i);
 8008212:	4620      	mov	r0, r4
 8008214:	f7ff ff00 	bl	8008018 <processString>
	for (int i = 0; i < NUM_STRINGS; i++)
 8008218:	3401      	adds	r4, #1
 800821a:	2c03      	cmp	r4, #3
 800821c:	ddf9      	ble.n	8008212 <audioTick+0xa>
	tempSample += tNoise_tick(&noise) * tADSR_tick(&noiseEnvelope);
 800821e:	4837      	ldr	r0, [pc, #220]	; (80082fc <audioTick+0xf4>)
 8008220:	f002 fe22 	bl	800ae68 <tNoise_tick>
 8008224:	eeb0 8a40 	vmov.f32	s16, s0
 8008228:	4835      	ldr	r0, [pc, #212]	; (8008300 <audioTick+0xf8>)
 800822a:	f001 ffa9 	bl	800a180 <tADSR_tick>
 800822e:	ee28 8a00 	vmul.f32	s16, s16, s0
 8008232:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8008304 <audioTick+0xfc>
 8008236:	ee38 8a00 	vadd.f32	s16, s16, s0
	int myString = tSimplePoly_getPitch(&poly, 0);
 800823a:	2100      	movs	r1, #0
 800823c:	4832      	ldr	r0, [pc, #200]	; (8008308 <audioTick+0x100>)
 800823e:	f002 fce9 	bl	800ac14 <tSimplePoly_getPitch>
	float theFreq = stringFrequencies[myString];
 8008242:	4b32      	ldr	r3, [pc, #200]	; (800830c <audioTick+0x104>)
 8008244:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008248:	edd0 9a00 	vldr	s19, [r0]
	float pitchEnv = tADSR_tick(&pitchEnvelope);
 800824c:	4830      	ldr	r0, [pc, #192]	; (8008310 <audioTick+0x108>)
 800824e:	f001 ff97 	bl	800a180 <tADSR_tick>
 8008252:	eeb0 9a40 	vmov.f32	s18, s0
	float filterEnv = tADSR_tick(&filterEnvelope);
 8008256:	482f      	ldr	r0, [pc, #188]	; (8008314 <audioTick+0x10c>)
 8008258:	f001 ff92 	bl	800a180 <tADSR_tick>
 800825c:	eef0 8a40 	vmov.f32	s17, s0
	for (int i = 0; i < NUM_SAWTOOTHS; i++)
 8008260:	2400      	movs	r4, #0
 8008262:	2c00      	cmp	r4, #0
 8008264:	dd35      	ble.n	80082d2 <audioTick+0xca>
	tCycle_setFreq(&mySine, theFreq);
 8008266:	4c2c      	ldr	r4, [pc, #176]	; (8008318 <audioTick+0x110>)
 8008268:	eeb0 0a69 	vmov.f32	s0, s19
 800826c:	4620      	mov	r0, r4
 800826e:	f002 fcef 	bl	800ac50 <tCycle_setFreq>
	tempSample += tCycle_tick(&mySine) * pitchEnv;
 8008272:	4620      	mov	r0, r4
 8008274:	f002 fd04 	bl	800ac80 <tCycle_tick>
 8008278:	ee20 0a09 	vmul.f32	s0, s0, s18
 800827c:	ee38 8a00 	vadd.f32	s16, s16, s0
	tSVF_setFreq(&myLowpass, LEAF_clip(20.0f, theFreq * ((filterEnv * 60.0f) + 1.0f), 19000.0f));
 8008280:	eddf 0a26 	vldr	s1, [pc, #152]	; 800831c <audioTick+0x114>
 8008284:	ee68 8aa0 	vmul.f32	s17, s17, s1
 8008288:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800828c:	ee78 0aa0 	vadd.f32	s1, s17, s1
 8008290:	ed9f 1a23 	vldr	s2, [pc, #140]	; 8008320 <audioTick+0x118>
 8008294:	ee60 0aa9 	vmul.f32	s1, s1, s19
 8008298:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800829c:	f002 f961 	bl	800a562 <LEAF_clip>
 80082a0:	4c20      	ldr	r4, [pc, #128]	; (8008324 <audioTick+0x11c>)
 80082a2:	4620      	mov	r0, r4
 80082a4:	f002 f92a 	bl	800a4fc <tSVF_setFreq>
	tempSample = tSVF_tick(&myLowpass, tempSample);
 80082a8:	eeb0 0a48 	vmov.f32	s0, s16
 80082ac:	4620      	mov	r0, r4
 80082ae:	f002 f8e2 	bl	800a476 <tSVF_tick>
	tempSample = tLockhartWavefolder_tick(&folder, tempSample);
 80082b2:	481d      	ldr	r0, [pc, #116]	; (8008328 <audioTick+0x120>)
 80082b4:	f001 fdfc 	bl	8009eb0 <tLockhartWavefolder_tick>
	tempSample = tanhf(tempSample);
 80082b8:	f002 ff60 	bl	800b17c <tanhf>
	if (lockOutCountdown > 0)
 80082bc:	4b1b      	ldr	r3, [pc, #108]	; (800832c <audioTick+0x124>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	dd03      	ble.n	80082cc <audioTick+0xc4>
		lockOutCountdown--;
 80082c4:	4a19      	ldr	r2, [pc, #100]	; (800832c <audioTick+0x124>)
 80082c6:	6813      	ldr	r3, [r2, #0]
 80082c8:	3b01      	subs	r3, #1
 80082ca:	6013      	str	r3, [r2, #0]
}
 80082cc:	ecbd 8b04 	vpop	{d8-d9}
 80082d0:	bd38      	pop	{r3, r4, r5, pc}
		tSawtooth_setFreq(&mySaw[i], theFreq * detuneAmounts[i]);
 80082d2:	00a2      	lsls	r2, r4, #2
 80082d4:	4d16      	ldr	r5, [pc, #88]	; (8008330 <audioTick+0x128>)
 80082d6:	4415      	add	r5, r2
 80082d8:	4b16      	ldr	r3, [pc, #88]	; (8008334 <audioTick+0x12c>)
 80082da:	4413      	add	r3, r2
 80082dc:	ed93 0a00 	vldr	s0, [r3]
 80082e0:	ee20 0a29 	vmul.f32	s0, s0, s19
 80082e4:	4628      	mov	r0, r5
 80082e6:	f002 fd19 	bl	800ad1c <tSawtooth_setFreq>
		tempSample += tSawtooth_tick(&mySaw[i]) * pitchEnv;
 80082ea:	4628      	mov	r0, r5
 80082ec:	f002 fd5e 	bl	800adac <tSawtooth_tick>
 80082f0:	ee20 0a09 	vmul.f32	s0, s0, s18
 80082f4:	ee38 8a00 	vadd.f32	s16, s16, s0
	for (int i = 0; i < NUM_SAWTOOTHS; i++)
 80082f8:	3401      	adds	r4, #1
 80082fa:	e7b2      	b.n	8008262 <audioTick+0x5a>
 80082fc:	2001441c 	.word	0x2001441c
 8008300:	200002d4 	.word	0x200002d4
 8008304:	00000000 	.word	0x00000000
 8008308:	20000350 	.word	0x20000350
 800830c:	20014430 	.word	0x20014430
 8008310:	200002cc 	.word	0x200002cc
 8008314:	20000240 	.word	0x20000240
 8008318:	200002d0 	.word	0x200002d0
 800831c:	42700000 	.word	0x42700000
 8008320:	46947000 	.word	0x46947000
 8008324:	20000244 	.word	0x20000244
 8008328:	20000370 	.word	0x20000370
 800832c:	20000140 	.word	0x20000140
 8008330:	20014408 	.word	0x20014408
 8008334:	2000000c 	.word	0x2000000c

08008338 <audioFrame>:
{
 8008338:	b538      	push	{r3, r4, r5, lr}
 800833a:	4605      	mov	r5, r0
	if (ADC_notStarted)
 800833c:	4b13      	ldr	r3, [pc, #76]	; (800838c <audioFrame+0x54>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	b943      	cbnz	r3, 8008354 <audioFrame+0x1c>
	frameCount++;
 8008342:	4a13      	ldr	r2, [pc, #76]	; (8008390 <audioFrame+0x58>)
 8008344:	6813      	ldr	r3, [r2, #0]
 8008346:	3301      	adds	r3, #1
 8008348:	6013      	str	r3, [r2, #0]
	if (codecReady)
 800834a:	4b12      	ldr	r3, [pc, #72]	; (8008394 <audioFrame+0x5c>)
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	b1e3      	cbz	r3, 800838a <audioFrame+0x52>
		for (i = 0; i < (HALF_BUFFER_SIZE); i = i + 2)
 8008350:	2400      	movs	r4, #0
 8008352:	e018      	b.n	8008386 <audioFrame+0x4e>
		HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values,NUM_ADC_CHANNELS * ADC_BUFFER_SIZE);
 8008354:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008358:	490f      	ldr	r1, [pc, #60]	; (8008398 <audioFrame+0x60>)
 800835a:	4810      	ldr	r0, [pc, #64]	; (800839c <audioFrame+0x64>)
 800835c:	f7f8 fc6e 	bl	8000c3c <HAL_ADC_Start_DMA>
		ADC_notStarted = 0;
 8008360:	4b0a      	ldr	r3, [pc, #40]	; (800838c <audioFrame+0x54>)
 8008362:	2200      	movs	r2, #0
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	e7ec      	b.n	8008342 <audioFrame+0xa>
			audioOutBuffer[buffer_offset + i] = (int32_t)(audioTick() * TWO_TO_23);
 8008368:	f7ff ff4e 	bl	8008208 <audioTick>
 800836c:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80083a0 <audioFrame+0x68>
 8008370:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008374:	192a      	adds	r2, r5, r4
 8008376:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800837a:	4b0a      	ldr	r3, [pc, #40]	; (80083a4 <audioFrame+0x6c>)
 800837c:	ee10 1a10 	vmov	r1, s0
 8008380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0; i < (HALF_BUFFER_SIZE); i = i + 2)
 8008384:	3402      	adds	r4, #2
 8008386:	2cff      	cmp	r4, #255	; 0xff
 8008388:	ddee      	ble.n	8008368 <audioFrame+0x30>
}
 800838a:	bd38      	pop	{r3, r4, r5, pc}
 800838c:	20000008 	.word	0x20000008
 8008390:	2000013c 	.word	0x2000013c
 8008394:	20000138 	.word	0x20000138
 8008398:	30001000 	.word	0x30001000
 800839c:	20000160 	.word	0x20000160
 80083a0:	4b000000 	.word	0x4b000000
 80083a4:	30000000 	.word	0x30000000

080083a8 <HAL_SAI_ErrorCallback>:

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
	;
}
 80083a8:	4770      	bx	lr

080083aa <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
	;
}
 80083aa:	4770      	bx	lr

080083ac <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
  ;
}
 80083ac:	4770      	bx	lr

080083ae <HAL_SAI_RxCpltCallback>:


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80083ae:	b508      	push	{r3, lr}
	audioFrame(HALF_BUFFER_SIZE);
 80083b0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80083b4:	f7ff ffc0 	bl	8008338 <audioFrame>
}
 80083b8:	bd08      	pop	{r3, pc}

080083ba <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80083ba:	b508      	push	{r3, lr}
	audioFrame(0);
 80083bc:	2000      	movs	r0, #0
 80083be:	f7ff ffbb 	bl	8008338 <audioFrame>
}
 80083c2:	bd08      	pop	{r3, pc}

080083c4 <ADC_Frame>:
volatile int myTempResult = 0;
float invMaxAmp[NUM_STRINGS];
volatile int alreadyPlaying = 0;

void ADC_Frame(int offset)
{
 80083c4:	b570      	push	{r4, r5, r6, lr}
 80083c6:	ed2d 8b02 	vpush	{d8}
 80083ca:	b084      	sub	sp, #16
 80083cc:	4606      	mov	r6, r0
	//HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_11);

	//stuff for cycle counting
	volatile uint32_t tempCount5 = 0;
 80083ce:	2300      	movs	r3, #0
 80083d0:	9303      	str	r3, [sp, #12]
	volatile uint32_t tempCount6 = 0;
 80083d2:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 80083d4:	b672      	cpsid	i
	__disable_irq();
	tempCount5 = DWT->CYCCNT;
 80083d6:	4b4d      	ldr	r3, [pc, #308]	; (800850c <ADC_Frame+0x148>)
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	9303      	str	r3, [sp, #12]

	//sampRecords[currentSamp] = frameCount;
	//currentSamp++;
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 80083dc:	4605      	mov	r5, r0
 80083de:	e078      	b.n	80084d2 <ADC_Frame+0x10e>
				if (myTempResult > 0)
				{
					alreadyPlaying = (tSimplePoly_getPitchAndCheckActive(&poly, 0) == j);
					if (alreadyPlaying)
					{
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80083e0:	2201      	movs	r2, #1
 80083e2:	2110      	movs	r1, #16
 80083e4:	484a      	ldr	r0, [pc, #296]	; (8008510 <ADC_Frame+0x14c>)
 80083e6:	f7fa fb28 	bl	8002a3a <HAL_GPIO_WritePin>
 80083ea:	e02c      	b.n	8008446 <ADC_Frame+0x82>
						if (tempAmplitude > maxAmp[j])
						{
							maxAmp[j] = tempAmplitude;
							invMaxAmp[j] = 1.0f / maxAmp[j];
						}
						tempAmplitude = tempAmplitude * invMaxAmp[j];
 80083ec:	4b49      	ldr	r3, [pc, #292]	; (8008514 <ADC_Frame+0x150>)
 80083ee:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80083f2:	ed93 8a00 	vldr	s16, [r3]
 80083f6:	ee28 8a27 	vmul.f32	s16, s16, s15
						int intVersionOfAmp = (int)(tempAmplitude * 127.0f);
 80083fa:	eddf 7a47 	vldr	s15, [pc, #284]	; 8008518 <ADC_Frame+0x154>
 80083fe:	ee68 7a27 	vmul.f32	s15, s16, s15
 8008402:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008406:	edcd 7a01 	vstr	s15, [sp, #4]
						tSimplePoly_noteOn(&poly, j, intVersionOfAmp);
 800840a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800840e:	4621      	mov	r1, r4
 8008410:	4842      	ldr	r0, [pc, #264]	; (800851c <ADC_Frame+0x158>)
 8008412:	f002 fae3 	bl	800a9dc <tSimplePoly_noteOn>

						tADSR_on(&pitchEnvelope, tempAmplitude);
 8008416:	eeb0 0a48 	vmov.f32	s0, s16
 800841a:	4841      	ldr	r0, [pc, #260]	; (8008520 <ADC_Frame+0x15c>)
 800841c:	f001 fe87 	bl	800a12e <tADSR_on>
						tADSR_on(&filterEnvelope, tempAmplitude);
 8008420:	eeb0 0a48 	vmov.f32	s0, s16
 8008424:	483f      	ldr	r0, [pc, #252]	; (8008524 <ADC_Frame+0x160>)
 8008426:	f001 fe82 	bl	800a12e <tADSR_on>
						tADSR_on(&noiseEnvelope, tempAmplitude);
 800842a:	eeb0 0a48 	vmov.f32	s0, s16
 800842e:	483e      	ldr	r0, [pc, #248]	; (8008528 <ADC_Frame+0x164>)
 8008430:	f001 fe7d 	bl	800a12e <tADSR_on>

						lockOutCountdown = 512;
 8008434:	4b3d      	ldr	r3, [pc, #244]	; (800852c <ADC_Frame+0x168>)
 8008436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800843a:	601a      	str	r2, [r3, #0]
						offLockout[j] == 512;
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800843c:	2201      	movs	r2, #1
 800843e:	2110      	movs	r1, #16
 8008440:	4833      	ldr	r0, [pc, #204]	; (8008510 <ADC_Frame+0x14c>)
 8008442:	f7fa fafa 	bl	8002a3a <HAL_GPIO_WritePin>
		for (int j = 0; j < NUM_ADC_CHANNELS; j++)
 8008446:	3401      	adds	r4, #1
 8008448:	2c03      	cmp	r4, #3
 800844a:	dc41      	bgt.n	80084d0 <ADC_Frame+0x10c>
			int tempInt = ADC_values[(i*NUM_ADC_CHANNELS) + j];
 800844c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008450:	4a37      	ldr	r2, [pc, #220]	; (8008530 <ADC_Frame+0x16c>)
 8008452:	eb02 0383 	add.w	r3, r2, r3, lsl #2
			myTempResult = tPluckDetectorInt_tick(&pluck[j], tempInt);
 8008456:	f853 1cf8 	ldr.w	r1, [r3, #-248]
 800845a:	4836      	ldr	r0, [pc, #216]	; (8008534 <ADC_Frame+0x170>)
 800845c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8008460:	f001 f9ce 	bl	8009800 <tPluckDetectorInt_tick>
 8008464:	4b34      	ldr	r3, [pc, #208]	; (8008538 <ADC_Frame+0x174>)
 8008466:	6018      	str	r0, [r3, #0]
			if (lockOutCountdown == 0)
 8008468:	4b30      	ldr	r3, [pc, #192]	; (800852c <ADC_Frame+0x168>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1ea      	bne.n	8008446 <ADC_Frame+0x82>
				if (myTempResult > 0)
 8008470:	4b31      	ldr	r3, [pc, #196]	; (8008538 <ADC_Frame+0x174>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	dde6      	ble.n	8008446 <ADC_Frame+0x82>
					alreadyPlaying = (tSimplePoly_getPitchAndCheckActive(&poly, 0) == j);
 8008478:	2100      	movs	r1, #0
 800847a:	4828      	ldr	r0, [pc, #160]	; (800851c <ADC_Frame+0x158>)
 800847c:	f002 fbd0 	bl	800ac20 <tSimplePoly_getPitchAndCheckActive>
 8008480:	42a0      	cmp	r0, r4
 8008482:	bf14      	ite	ne
 8008484:	2000      	movne	r0, #0
 8008486:	2001      	moveq	r0, #1
 8008488:	4b2c      	ldr	r3, [pc, #176]	; (800853c <ADC_Frame+0x178>)
 800848a:	6018      	str	r0, [r3, #0]
					if (alreadyPlaying)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1a6      	bne.n	80083e0 <ADC_Frame+0x1c>
						float tempAmplitude = ((float)myTempResult * INV_TWO_TO_16);
 8008492:	4b29      	ldr	r3, [pc, #164]	; (8008538 <ADC_Frame+0x174>)
 8008494:	edd3 7a00 	vldr	s15, [r3]
 8008498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800849c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8008540 <ADC_Frame+0x17c>
 80084a0:	ee67 7a87 	vmul.f32	s15, s15, s14
						if (tempAmplitude > maxAmp[j])
 80084a4:	4b27      	ldr	r3, [pc, #156]	; (8008544 <ADC_Frame+0x180>)
 80084a6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80084aa:	ed93 7a00 	vldr	s14, [r3]
 80084ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80084b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084b6:	d599      	bpl.n	80083ec <ADC_Frame+0x28>
							maxAmp[j] = tempAmplitude;
 80084b8:	00a1      	lsls	r1, r4, #2
 80084ba:	edc3 7a00 	vstr	s15, [r3]
							invMaxAmp[j] = 1.0f / maxAmp[j];
 80084be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084c6:	4b13      	ldr	r3, [pc, #76]	; (8008514 <ADC_Frame+0x150>)
 80084c8:	440b      	add	r3, r1
 80084ca:	ed83 7a00 	vstr	s14, [r3]
 80084ce:	e78d      	b.n	80083ec <ADC_Frame+0x28>
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 80084d0:	3501      	adds	r5, #1
 80084d2:	f106 0320 	add.w	r3, r6, #32
 80084d6:	42ab      	cmp	r3, r5
 80084d8:	dd01      	ble.n	80084de <ADC_Frame+0x11a>
		for (int j = 0; j < NUM_ADC_CHANNELS; j++)
 80084da:	2400      	movs	r4, #0
 80084dc:	e7b4      	b.n	8008448 <ADC_Frame+0x84>

		}

	}

	ADC_Ready = 1;
 80084de:	4b1a      	ldr	r3, [pc, #104]	; (8008548 <ADC_Frame+0x184>)
 80084e0:	2201      	movs	r2, #1
 80084e2:	601a      	str	r2, [r3, #0]
   	//cycle counting stuff below. At 48k you have at most 10000 cycles per sample (when running at 480MHz). There is also overhead from the frame processing and function calls, so in reality less than that.
	tempCount6 = DWT->CYCCNT;
 80084e4:	4b09      	ldr	r3, [pc, #36]	; (800850c <ADC_Frame+0x148>)
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	9302      	str	r3, [sp, #8]
	cycleCountVals[0] = tempCount6-tempCount5;
 80084ea:	9a02      	ldr	r2, [sp, #8]
 80084ec:	9b03      	ldr	r3, [sp, #12]
 80084ee:	1ad2      	subs	r2, r2, r3
 80084f0:	2300      	movs	r3, #0
 80084f2:	4c16      	ldr	r4, [pc, #88]	; (800854c <ADC_Frame+0x188>)
 80084f4:	e9c4 2300 	strd	r2, r3, [r4]
	CycleCounterTrackMinAndMax(0);
 80084f8:	2000      	movs	r0, #0
 80084fa:	f7ff fd29 	bl	8007f50 <CycleCounterTrackMinAndMax>
	if (cycleCountVals[0] > 9900)
 80084fe:	e9d4 2300 	ldrd	r2, r3, [r4]
  __ASM volatile ("cpsie i" : : : "memory");
 8008502:	b662      	cpsie	i
		//overflow
	}
	__enable_irq();
	//CycleCounterAverage(0);

}
 8008504:	b004      	add	sp, #16
 8008506:	ecbd 8b02 	vpop	{d8}
 800850a:	bd70      	pop	{r4, r5, r6, pc}
 800850c:	e0001000 	.word	0xe0001000
 8008510:	58020400 	.word	0x58020400
 8008514:	2001440c 	.word	0x2001440c
 8008518:	42fe0000 	.word	0x42fe0000
 800851c:	20000350 	.word	0x20000350
 8008520:	200002cc 	.word	0x200002cc
 8008524:	20000240 	.word	0x20000240
 8008528:	200002d4 	.word	0x200002d4
 800852c:	20000140 	.word	0x20000140
 8008530:	300010f8 	.word	0x300010f8
 8008534:	200002bc 	.word	0x200002bc
 8008538:	20000144 	.word	0x20000144
 800853c:	20000134 	.word	0x20000134
 8008540:	377ffff6 	.word	0x377ffff6
 8008544:	20000250 	.word	0x20000250
 8008548:	20000110 	.word	0x20000110
 800854c:	20000330 	.word	0x20000330

08008550 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008550:	b508      	push	{r3, lr}


	ADC_Frame(ADC_FRAME_SIZE);
 8008552:	2020      	movs	r0, #32
 8008554:	f7ff ff36 	bl	80083c4 <ADC_Frame>


}
 8008558:	bd08      	pop	{r3, pc}

0800855a <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800855a:	b508      	push	{r3, lr}
	ADC_Frame(0);
 800855c:	2000      	movs	r0, #0
 800855e:	f7ff ff31 	bl	80083c4 <ADC_Frame>
}
 8008562:	bd08      	pop	{r3, pc}

08008564 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008564:	b500      	push	{lr}
 8008566:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	4613      	mov	r3, r2
 800856c:	460a      	mov	r2, r1
 800856e:	4601      	mov	r1, r0
 8008570:	4803      	ldr	r0, [pc, #12]	; (8008580 <BSP_SD_ReadBlocks+0x1c>)
 8008572:	f7fd fb1b 	bl	8005bac <HAL_SD_ReadBlocks>
 8008576:	b100      	cbz	r0, 800857a <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8008578:	2001      	movs	r0, #1
  }

  return sd_state;  
}
 800857a:	b003      	add	sp, #12
 800857c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008580:	20015a04 	.word	0x20015a04

08008584 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008584:	b500      	push	{lr}
 8008586:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	4613      	mov	r3, r2
 800858c:	460a      	mov	r2, r1
 800858e:	4601      	mov	r1, r0
 8008590:	4803      	ldr	r0, [pc, #12]	; (80085a0 <BSP_SD_WriteBlocks+0x1c>)
 8008592:	f7fd fc09 	bl	8005da8 <HAL_SD_WriteBlocks>
 8008596:	b100      	cbz	r0, 800859a <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8008598:	2001      	movs	r0, #1
  }

  return sd_state;  
}
 800859a:	b003      	add	sp, #12
 800859c:	f85d fb04 	ldr.w	pc, [sp], #4
 80085a0:	20015a04 	.word	0x20015a04

080085a4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80085a4:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80085a6:	4803      	ldr	r0, [pc, #12]	; (80085b4 <BSP_SD_GetCardState+0x10>)
 80085a8:	f7fe f84c 	bl	8006644 <HAL_SD_GetCardState>
}
 80085ac:	3804      	subs	r0, #4
 80085ae:	bf18      	it	ne
 80085b0:	2001      	movne	r0, #1
 80085b2:	bd08      	pop	{r3, pc}
 80085b4:	20015a04 	.word	0x20015a04

080085b8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80085b8:	b508      	push	{r3, lr}
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80085ba:	4601      	mov	r1, r0
 80085bc:	4801      	ldr	r0, [pc, #4]	; (80085c4 <BSP_SD_GetCardInfo+0xc>)
 80085be:	f7fd ffc1 	bl	8006544 <HAL_SD_GetCardInfo>
}
 80085c2:	bd08      	pop	{r3, pc}
 80085c4:	20015a04 	.word	0x20015a04

080085c8 <BSP_SD_WriteCpltCallback>:
  * @retval None
  */
__weak void BSP_SD_WriteCpltCallback(void)
{

}
 80085c8:	4770      	bx	lr

080085ca <HAL_SD_TxCpltCallback>:
{
 80085ca:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 80085cc:	f7ff fffc 	bl	80085c8 <BSP_SD_WriteCpltCallback>
}
 80085d0:	bd08      	pop	{r3, pc}

080085d2 <BSP_SD_ReadCpltCallback>:
  * @retval None
  */
__weak void BSP_SD_ReadCpltCallback(void)
{

}
 80085d2:	4770      	bx	lr

080085d4 <HAL_SD_RxCpltCallback>:
{
 80085d4:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 80085d6:	f7ff fffc 	bl	80085d2 <BSP_SD_ReadCpltCallback>
}
 80085da:	bd08      	pop	{r3, pc}

080085dc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80085dc:	b500      	push	{lr}
 80085de:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 80085e0:	2301      	movs	r3, #1
 80085e2:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80085e6:	f000 f907 	bl	80087f8 <BSP_PlatformIsDetected>
 80085ea:	b910      	cbnz	r0, 80085f2 <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 80085ec:	2300      	movs	r3, #0
 80085ee:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 80085f2:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80085f6:	b003      	add	sp, #12
 80085f8:	f85d fb04 	ldr.w	pc, [sp], #4

080085fc <BSP_SD_Init>:
{
 80085fc:	b510      	push	{r4, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80085fe:	f7ff ffed 	bl	80085dc <BSP_SD_IsDetected>
 8008602:	2801      	cmp	r0, #1
 8008604:	d002      	beq.n	800860c <BSP_SD_Init+0x10>
    return MSD_ERROR_SD_NOT_PRESENT;
 8008606:	2402      	movs	r4, #2
}
 8008608:	4620      	mov	r0, r4
 800860a:	bd10      	pop	{r4, pc}
  sd_state = HAL_SD_Init(&hsd1);
 800860c:	4807      	ldr	r0, [pc, #28]	; (800862c <BSP_SD_Init+0x30>)
 800860e:	f7fe f82c 	bl	800666a <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8008612:	4604      	mov	r4, r0
 8008614:	2800      	cmp	r0, #0
 8008616:	d1f7      	bne.n	8008608 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8008618:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800861c:	4803      	ldr	r0, [pc, #12]	; (800862c <BSP_SD_Init+0x30>)
 800861e:	f7fd ffa3 	bl	8006568 <HAL_SD_ConfigWideBusOperation>
 8008622:	2800      	cmp	r0, #0
 8008624:	d0f0      	beq.n	8008608 <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 8008626:	2401      	movs	r4, #1
 8008628:	e7ee      	b.n	8008608 <BSP_SD_Init+0xc>
 800862a:	bf00      	nop
 800862c:	20015a04 	.word	0x20015a04

08008630 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8008630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008634:	b085      	sub	sp, #20
 8008636:	4605      	mov	r5, r0

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8008638:	2201      	movs	r2, #1
 800863a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800863e:	4843      	ldr	r0, [pc, #268]	; (800874c <AudioCodec_init+0x11c>)
 8008640:	f7fa f9fb 	bl	8002a3a <HAL_GPIO_WritePin>

	HAL_Delay(2);
 8008644:	2002      	movs	r0, #2
 8008646:	f7f7 ffbd 	bl	80005c4 <HAL_Delay>
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 800864a:	4c41      	ldr	r4, [pc, #260]	; (8008750 <AudioCodec_init+0x120>)
 800864c:	f04f 0a07 	mov.w	sl, #7
 8008650:	f884 a000 	strb.w	sl, [r4]
	myI2cData[1] = 0x03;
 8008654:	f04f 0b03 	mov.w	fp, #3
 8008658:	f884 b001 	strb.w	fp, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800865c:	4f3d      	ldr	r7, [pc, #244]	; (8008754 <AudioCodec_init+0x124>)
 800865e:	883b      	ldrh	r3, [r7, #0]
 8008660:	4e3d      	ldr	r6, [pc, #244]	; (8008758 <AudioCodec_init+0x128>)
 8008662:	6832      	ldr	r2, [r6, #0]
 8008664:	9200      	str	r2, [sp, #0]
 8008666:	4622      	mov	r2, r4
 8008668:	2120      	movs	r1, #32
 800866a:	4628      	mov	r0, r5
 800866c:	f7fa fb3a 	bl	8002ce4 <HAL_I2C_Master_Transmit>
 8008670:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8008760 <AudioCodec_init+0x130>
 8008674:	f888 0000 	strb.w	r0, [r8]
	//HAL_Delay(2);

	myI2cData[0] = 0x01;
 8008678:	f04f 0901 	mov.w	r9, #1
 800867c:	f884 9000 	strb.w	r9, [r4]
	myI2cData[1] = 0x41;
 8008680:	2341      	movs	r3, #65	; 0x41
 8008682:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8008684:	883b      	ldrh	r3, [r7, #0]
 8008686:	6832      	ldr	r2, [r6, #0]
 8008688:	9200      	str	r2, [sp, #0]
 800868a:	4622      	mov	r2, r4
 800868c:	2120      	movs	r1, #32
 800868e:	9503      	str	r5, [sp, #12]
 8008690:	4628      	mov	r0, r5
 8008692:	f7fa fb27 	bl	8002ce4 <HAL_I2C_Master_Transmit>
 8008696:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
 800869a:	2502      	movs	r5, #2
 800869c:	7025      	strb	r5, [r4, #0]
	myI2cData[1] = 0x00;
 800869e:	2300      	movs	r3, #0
 80086a0:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80086a2:	883b      	ldrh	r3, [r7, #0]
 80086a4:	6832      	ldr	r2, [r6, #0]
 80086a6:	9200      	str	r2, [sp, #0]
 80086a8:	4622      	mov	r2, r4
 80086aa:	2120      	movs	r1, #32
 80086ac:	9803      	ldr	r0, [sp, #12]
 80086ae:	f7fa fb19 	bl	8002ce4 <HAL_I2C_Master_Transmit>
 80086b2:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
 80086b6:	f884 b000 	strb.w	fp, [r4]
	myI2cData[1] = 0x79;
 80086ba:	2379      	movs	r3, #121	; 0x79
 80086bc:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80086be:	883b      	ldrh	r3, [r7, #0]
 80086c0:	6832      	ldr	r2, [r6, #0]
 80086c2:	9200      	str	r2, [sp, #0]
 80086c4:	4622      	mov	r2, r4
 80086c6:	2120      	movs	r1, #32
 80086c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80086cc:	4658      	mov	r0, fp
 80086ce:	f7fa fb09 	bl	8002ce4 <HAL_I2C_Master_Transmit>
 80086d2:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
 80086d6:	2304      	movs	r3, #4
 80086d8:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x01;
 80086da:	f884 9001 	strb.w	r9, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80086de:	883b      	ldrh	r3, [r7, #0]
 80086e0:	6832      	ldr	r2, [r6, #0]
 80086e2:	9200      	str	r2, [sp, #0]
 80086e4:	4622      	mov	r2, r4
 80086e6:	2120      	movs	r1, #32
 80086e8:	4658      	mov	r0, fp
 80086ea:	f7fa fafb 	bl	8002ce4 <HAL_I2C_Master_Transmit>
 80086ee:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
 80086f2:	2305      	movs	r3, #5
 80086f4:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x01;
 80086f6:	f884 9001 	strb.w	r9, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80086fa:	883b      	ldrh	r3, [r7, #0]
 80086fc:	6832      	ldr	r2, [r6, #0]
 80086fe:	9200      	str	r2, [sp, #0]
 8008700:	4622      	mov	r2, r4
 8008702:	2120      	movs	r1, #32
 8008704:	4658      	mov	r0, fp
 8008706:	f7fa faed 	bl	8002ce4 <HAL_I2C_Master_Transmit>
 800870a:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
 800870e:	2306      	movs	r3, #6
 8008710:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x10;
 8008712:	2310      	movs	r3, #16
 8008714:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8008716:	883b      	ldrh	r3, [r7, #0]
 8008718:	6832      	ldr	r2, [r6, #0]
 800871a:	9200      	str	r2, [sp, #0]
 800871c:	4622      	mov	r2, r4
 800871e:	2120      	movs	r1, #32
 8008720:	4658      	mov	r0, fp
 8008722:	f7fa fadf 	bl	8002ce4 <HAL_I2C_Master_Transmit>
 8008726:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
 800872a:	f884 a000 	strb.w	sl, [r4]
	myI2cData[1] = 0x02;
 800872e:	7065      	strb	r5, [r4, #1]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8008730:	883b      	ldrh	r3, [r7, #0]
 8008732:	6832      	ldr	r2, [r6, #0]
 8008734:	9200      	str	r2, [sp, #0]
 8008736:	4622      	mov	r2, r4
 8008738:	2120      	movs	r1, #32
 800873a:	4658      	mov	r0, fp
 800873c:	f7fa fad2 	bl	8002ce4 <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 8008740:	4b06      	ldr	r3, [pc, #24]	; (800875c <AudioCodec_init+0x12c>)
 8008742:	f883 9000 	strb.w	r9, [r3]

}
 8008746:	b005      	add	sp, #20
 8008748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800874c:	58020800 	.word	0x58020800
 8008750:	20000150 	.word	0x20000150
 8008754:	20000074 	.word	0x20000074
 8008758:	20000070 	.word	0x20000070
 800875c:	20000138 	.word	0x20000138
 8008760:	20014440 	.word	0x20014440

08008764 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8008764:	b500      	push	{lr}
 8008766:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008768:	4b1b      	ldr	r3, [pc, #108]	; (80087d8 <MX_DMA_Init+0x74>)
 800876a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800876e:	f042 0201 	orr.w	r2, r2, #1
 8008772:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8008776:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800877a:	f003 0301 	and.w	r3, r3, #1
 800877e:	9301      	str	r3, [sp, #4]
 8008780:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
 8008782:	2200      	movs	r2, #0
 8008784:	2102      	movs	r1, #2
 8008786:	200b      	movs	r0, #11
 8008788:	f7f8 fdac 	bl	80012e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800878c:	200b      	movs	r0, #11
 800878e:	f7f8 fddb 	bl	8001348 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 3, 0);
 8008792:	2200      	movs	r2, #0
 8008794:	2103      	movs	r1, #3
 8008796:	200c      	movs	r0, #12
 8008798:	f7f8 fda4 	bl	80012e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800879c:	200c      	movs	r0, #12
 800879e:	f7f8 fdd3 	bl	8001348 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 4, 0);
 80087a2:	2200      	movs	r2, #0
 80087a4:	2104      	movs	r1, #4
 80087a6:	200d      	movs	r0, #13
 80087a8:	f7f8 fd9c 	bl	80012e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80087ac:	200d      	movs	r0, #13
 80087ae:	f7f8 fdcb 	bl	8001348 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 1, 0);
 80087b2:	2200      	movs	r2, #0
 80087b4:	2101      	movs	r1, #1
 80087b6:	200e      	movs	r0, #14
 80087b8:	f7f8 fd94 	bl	80012e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80087bc:	200e      	movs	r0, #14
 80087be:	f7f8 fdc3 	bl	8001348 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 1, 0);
 80087c2:	2200      	movs	r2, #0
 80087c4:	2101      	movs	r1, #1
 80087c6:	200f      	movs	r0, #15
 80087c8:	f7f8 fd8c 	bl	80012e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80087cc:	200f      	movs	r0, #15
 80087ce:	f7f8 fdbb 	bl	8001348 <HAL_NVIC_EnableIRQ>

}
 80087d2:	b003      	add	sp, #12
 80087d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80087d8:	58024400 	.word	0x58024400

080087dc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80087dc:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80087de:	4903      	ldr	r1, [pc, #12]	; (80087ec <MX_FATFS_Init+0x10>)
 80087e0:	4803      	ldr	r0, [pc, #12]	; (80087f0 <MX_FATFS_Init+0x14>)
 80087e2:	f7ff f9ab 	bl	8007b3c <FATFS_LinkDriver>
 80087e6:	4b03      	ldr	r3, [pc, #12]	; (80087f4 <MX_FATFS_Init+0x18>)
 80087e8:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80087ea:	bd08      	pop	{r3, pc}
 80087ec:	20014448 	.word	0x20014448
 80087f0:	0800d2f0 	.word	0x0800d2f0
 80087f4:	20014444 	.word	0x20014444

080087f8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80087f8:	b510      	push	{r4, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80087fa:	4c07      	ldr	r4, [pc, #28]	; (8008818 <BSP_PlatformIsDetected+0x20>)
 80087fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008800:	4620      	mov	r0, r4
 8008802:	f7fa f913 	bl	8002a2c <HAL_GPIO_ReadPin>
        status = SD_NOT_PRESENT;
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    status = SD_PRESENT;
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 8008806:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800880a:	4620      	mov	r0, r4
 800880c:	f7fa f90e 	bl	8002a2c <HAL_GPIO_ReadPin>
 8008810:	2801      	cmp	r0, #1
 8008812:	d000      	beq.n	8008816 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8008814:	2000      	movs	r0, #0
    }
    /* USER CODE END 1 */ 
    return status;
}  
 8008816:	bd10      	pop	{r4, pc}
 8008818:	58020800 	.word	0x58020800

0800881c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800881c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800881e:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008820:	2300      	movs	r3, #0
 8008822:	9301      	str	r3, [sp, #4]
 8008824:	9302      	str	r3, [sp, #8]
 8008826:	9303      	str	r3, [sp, #12]
 8008828:	9304      	str	r3, [sp, #16]
 800882a:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 800882c:	4b27      	ldr	r3, [pc, #156]	; (80088cc <HAL_FMC_MspInit+0xb0>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	b10b      	cbz	r3, 8008836 <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8008832:	b007      	add	sp, #28
 8008834:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 8008836:	4b25      	ldr	r3, [pc, #148]	; (80088cc <HAL_FMC_MspInit+0xb0>)
 8008838:	2201      	movs	r2, #1
 800883a:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 800883c:	4b24      	ldr	r3, [pc, #144]	; (80088d0 <HAL_FMC_MspInit+0xb4>)
 800883e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8008842:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008846:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800884a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800884e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008852:	9300      	str	r3, [sp, #0]
 8008854:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8008856:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800885a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800885c:	2602      	movs	r6, #2
 800885e:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008860:	2503      	movs	r5, #3
 8008862:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008864:	240c      	movs	r4, #12
 8008866:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008868:	a901      	add	r1, sp, #4
 800886a:	481a      	ldr	r0, [pc, #104]	; (80088d4 <HAL_FMC_MspInit+0xb8>)
 800886c:	f7f9 ffee 	bl	800284c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8008870:	2319      	movs	r3, #25
 8008872:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008874:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008876:	2700      	movs	r7, #0
 8008878:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800887a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800887c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800887e:	a901      	add	r1, sp, #4
 8008880:	4815      	ldr	r0, [pc, #84]	; (80088d8 <HAL_FMC_MspInit+0xbc>)
 8008882:	f7f9 ffe3 	bl	800284c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 8008886:	f248 1337 	movw	r3, #33079	; 0x8137
 800888a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800888c:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800888e:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008890:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008892:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008894:	a901      	add	r1, sp, #4
 8008896:	4811      	ldr	r0, [pc, #68]	; (80088dc <HAL_FMC_MspInit+0xc0>)
 8008898:	f7f9 ffd8 	bl	800284c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800889c:	f64f 7383 	movw	r3, #65411	; 0xff83
 80088a0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088a2:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088a4:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088a6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80088a8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80088aa:	a901      	add	r1, sp, #4
 80088ac:	480c      	ldr	r0, [pc, #48]	; (80088e0 <HAL_FMC_MspInit+0xc4>)
 80088ae:	f7f9 ffcd 	bl	800284c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 80088b2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80088b6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088b8:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088ba:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088bc:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80088be:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80088c0:	a901      	add	r1, sp, #4
 80088c2:	4808      	ldr	r0, [pc, #32]	; (80088e4 <HAL_FMC_MspInit+0xc8>)
 80088c4:	f7f9 ffc2 	bl	800284c <HAL_GPIO_Init>
 80088c8:	e7b3      	b.n	8008832 <HAL_FMC_MspInit+0x16>
 80088ca:	bf00      	nop
 80088cc:	20000154 	.word	0x20000154
 80088d0:	58024400 	.word	0x58024400
 80088d4:	58021400 	.word	0x58021400
 80088d8:	58020800 	.word	0x58020800
 80088dc:	58021800 	.word	0x58021800
 80088e0:	58021000 	.word	0x58021000
 80088e4:	58020c00 	.word	0x58020c00

080088e8 <MX_FMC_Init>:
{
 80088e8:	b500      	push	{lr}
 80088ea:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80088ec:	4817      	ldr	r0, [pc, #92]	; (800894c <MX_FMC_Init+0x64>)
 80088ee:	4b18      	ldr	r3, [pc, #96]	; (8008950 <MX_FMC_Init+0x68>)
 80088f0:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80088f2:	2300      	movs	r3, #0
 80088f4:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80088f6:	2201      	movs	r2, #1
 80088f8:	6082      	str	r2, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80088fa:	2208      	movs	r2, #8
 80088fc:	60c2      	str	r2, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80088fe:	2210      	movs	r2, #16
 8008900:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8008902:	2240      	movs	r2, #64	; 0x40
 8008904:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8008906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800890a:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800890c:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 800890e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8008912:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8008914:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008918:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800891a:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 800891c:	2302      	movs	r3, #2
 800891e:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8008920:	2206      	movs	r2, #6
 8008922:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 8008924:	2104      	movs	r1, #4
 8008926:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 6;
 8008928:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 2;
 800892a:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 2;
 800892c:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 800892e:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8008930:	4469      	add	r1, sp
 8008932:	f7fe f815 	bl	8006960 <HAL_SDRAM_Init>
 8008936:	b930      	cbnz	r0, 8008946 <MX_FMC_Init+0x5e>
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8008938:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800893c:	f7f7 fe5c 	bl	80005f8 <HAL_SetFMCMemorySwappingConfig>
}
 8008940:	b009      	add	sp, #36	; 0x24
 8008942:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 8008946:	f000 fa4d 	bl	8008de4 <Error_Handler>
 800894a:	e7f5      	b.n	8008938 <MX_FMC_Init+0x50>
 800894c:	200148b0 	.word	0x200148b0
 8008950:	52004140 	.word	0x52004140

08008954 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8008954:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8008956:	f7ff ff61 	bl	800881c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800895a:	bd08      	pop	{r3, pc}

0800895c <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 800895c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008960:	b08e      	sub	sp, #56	; 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008962:	2400      	movs	r4, #0
 8008964:	9409      	str	r4, [sp, #36]	; 0x24
 8008966:	940a      	str	r4, [sp, #40]	; 0x28
 8008968:	940b      	str	r4, [sp, #44]	; 0x2c
 800896a:	940c      	str	r4, [sp, #48]	; 0x30
 800896c:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800896e:	4b79      	ldr	r3, [pc, #484]	; (8008b54 <MX_GPIO_Init+0x1f8>)
 8008970:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008974:	f042 0210 	orr.w	r2, r2, #16
 8008978:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800897c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008980:	f002 0210 	and.w	r2, r2, #16
 8008984:	9201      	str	r2, [sp, #4]
 8008986:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008988:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800898c:	f042 0204 	orr.w	r2, r2, #4
 8008990:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008994:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008998:	f002 0204 	and.w	r2, r2, #4
 800899c:	9202      	str	r2, [sp, #8]
 800899e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80089a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80089a4:	f042 0220 	orr.w	r2, r2, #32
 80089a8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80089ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80089b0:	f002 0220 	and.w	r2, r2, #32
 80089b4:	9203      	str	r2, [sp, #12]
 80089b6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80089b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80089bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80089c0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80089c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80089c8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80089cc:	9204      	str	r2, [sp, #16]
 80089ce:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80089d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80089d4:	f042 0201 	orr.w	r2, r2, #1
 80089d8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80089dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80089e0:	f002 0201 	and.w	r2, r2, #1
 80089e4:	9205      	str	r2, [sp, #20]
 80089e6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80089e8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80089ec:	f042 0202 	orr.w	r2, r2, #2
 80089f0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80089f4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80089f8:	f002 0202 	and.w	r2, r2, #2
 80089fc:	9206      	str	r2, [sp, #24]
 80089fe:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008a00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008a04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a08:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008a0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008a10:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8008a14:	9207      	str	r2, [sp, #28]
 8008a16:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008a18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008a1c:	f042 0208 	orr.w	r2, r2, #8
 8008a20:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a28:	f003 0308 	and.w	r3, r3, #8
 8008a2c:	9308      	str	r3, [sp, #32]
 8008a2e:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8008a30:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8008b68 <MX_GPIO_Init+0x20c>
 8008a34:	4622      	mov	r2, r4
 8008a36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008a3a:	4640      	mov	r0, r8
 8008a3c:	f7f9 fffd 	bl	8002a3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8008a40:	f8df a128 	ldr.w	sl, [pc, #296]	; 8008b6c <MX_GPIO_Init+0x210>
 8008a44:	4622      	mov	r2, r4
 8008a46:	f44f 6168 	mov.w	r1, #3712	; 0xe80
 8008a4a:	4650      	mov	r0, sl
 8008a4c:	f7f9 fff5 	bl	8002a3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8008a50:	4f41      	ldr	r7, [pc, #260]	; (8008b58 <MX_GPIO_Init+0x1fc>)
 8008a52:	4622      	mov	r2, r4
 8008a54:	2180      	movs	r1, #128	; 0x80
 8008a56:	4638      	mov	r0, r7
 8008a58:	f7f9 ffef 	bl	8002a3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8008a5c:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8008b70 <MX_GPIO_Init+0x214>
 8008a60:	4622      	mov	r2, r4
 8008a62:	2110      	movs	r1, #16
 8008a64:	4648      	mov	r0, r9
 8008a66:	f7f9 ffe8 	bl	8002a3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008a6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a6e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a70:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008a72:	2502      	movs	r5, #2
 8008a74:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008a76:	a909      	add	r1, sp, #36	; 0x24
 8008a78:	4640      	mov	r0, r8
 8008a7a:	f7f9 fee7 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8008a7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008a82:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a84:	2601      	movs	r6, #1
 8008a86:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008a88:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a8a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008a8c:	a909      	add	r1, sp, #36	; 0x24
 8008a8e:	4640      	mov	r0, r8
 8008a90:	f7f9 fedc 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC1 PC2 PC5 
                           PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5 
 8008a94:	f248 03e6 	movw	r3, #32998	; 0x80e6
 8008a98:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008a9a:	2503      	movs	r5, #3
 8008a9c:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a9e:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008aa0:	a909      	add	r1, sp, #36	; 0x24
 8008aa2:	4640      	mov	r0, r8
 8008aa4:	f7f9 fed2 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 
                           PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 8008aa8:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8008aac:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008aae:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ab0:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008ab2:	a909      	add	r1, sp, #36	; 0x24
 8008ab4:	4829      	ldr	r0, [pc, #164]	; (8008b5c <MX_GPIO_Init+0x200>)
 8008ab6:	f7f9 fec9 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 
                           PA8 PA9 PA10 PA11 
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
 8008aba:	f649 73f0 	movw	r3, #40944	; 0x9ff0
 8008abe:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008ac0:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ac2:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ac4:	a909      	add	r1, sp, #36	; 0x24
 8008ac6:	4826      	ldr	r0, [pc, #152]	; (8008b60 <MX_GPIO_Init+0x204>)
 8008ac8:	f7f9 fec0 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB5 
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5 
 8008acc:	f240 33e7 	movw	r3, #999	; 0x3e7
 8008ad0:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008ad2:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ad4:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ad6:	a909      	add	r1, sp, #36	; 0x24
 8008ad8:	4648      	mov	r0, r9
 8008ada:	f7f9 feb7 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008ade:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ae2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008ae4:	4b1f      	ldr	r3, [pc, #124]	; (8008b64 <MX_GPIO_Init+0x208>)
 8008ae6:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ae8:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008aea:	a909      	add	r1, sp, #36	; 0x24
 8008aec:	4638      	mov	r0, r7
 8008aee:	f7f9 fead 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD3 PD4 
                           PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 8008af2:	f243 0378 	movw	r3, #12408	; 0x3078
 8008af6:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008af8:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008afa:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008afc:	a909      	add	r1, sp, #36	; 0x24
 8008afe:	4638      	mov	r0, r7
 8008b00:	f7f9 fea4 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG12 PG13 
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13 
 8008b04:	f247 0348 	movw	r3, #28744	; 0x7048
 8008b08:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008b0a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b0c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008b0e:	a909      	add	r1, sp, #36	; 0x24
 8008b10:	4650      	mov	r0, sl
 8008b12:	f7f9 fe9b 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG9 PG10 PG11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8008b16:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8008b1a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b1c:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b1e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b20:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008b22:	a909      	add	r1, sp, #36	; 0x24
 8008b24:	4650      	mov	r0, sl
 8008b26:	f7f9 fe91 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008b2a:	2380      	movs	r3, #128	; 0x80
 8008b2c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b2e:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b30:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b32:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008b34:	a909      	add	r1, sp, #36	; 0x24
 8008b36:	4638      	mov	r0, r7
 8008b38:	f7f9 fe88 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008b3c:	2310      	movs	r3, #16
 8008b3e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b40:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b42:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b44:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b46:	a909      	add	r1, sp, #36	; 0x24
 8008b48:	4648      	mov	r0, r9
 8008b4a:	f7f9 fe7f 	bl	800284c <HAL_GPIO_Init>

}
 8008b4e:	b00e      	add	sp, #56	; 0x38
 8008b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b54:	58024400 	.word	0x58024400
 8008b58:	58020c00 	.word	0x58020c00
 8008b5c:	58021400 	.word	0x58021400
 8008b60:	58020000 	.word	0x58020000
 8008b64:	11110000 	.word	0x11110000
 8008b68:	58020800 	.word	0x58020800
 8008b6c:	58021800 	.word	0x58021800
 8008b70:	58020400 	.word	0x58020400

08008b74 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8008b74:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 8008b76:	4812      	ldr	r0, [pc, #72]	; (8008bc0 <MX_I2C2_Init+0x4c>)
 8008b78:	4b12      	ldr	r3, [pc, #72]	; (8008bc4 <MX_I2C2_Init+0x50>)
 8008b7a:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 8008b7c:	4b12      	ldr	r3, [pc, #72]	; (8008bc8 <MX_I2C2_Init+0x54>)
 8008b7e:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8008b80:	2300      	movs	r3, #0
 8008b82:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008b84:	2201      	movs	r2, #1
 8008b86:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008b88:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8008b8a:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008b8c:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008b8e:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008b90:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008b92:	f7fa f849 	bl	8002c28 <HAL_I2C_Init>
 8008b96:	b950      	cbnz	r0, 8008bae <MX_I2C2_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008b98:	2100      	movs	r1, #0
 8008b9a:	4809      	ldr	r0, [pc, #36]	; (8008bc0 <MX_I2C2_Init+0x4c>)
 8008b9c:	f7fa f960 	bl	8002e60 <HAL_I2CEx_ConfigAnalogFilter>
 8008ba0:	b940      	cbnz	r0, 8008bb4 <MX_I2C2_Init+0x40>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	4806      	ldr	r0, [pc, #24]	; (8008bc0 <MX_I2C2_Init+0x4c>)
 8008ba6:	f7fa f989 	bl	8002ebc <HAL_I2CEx_ConfigDigitalFilter>
 8008baa:	b930      	cbnz	r0, 8008bba <MX_I2C2_Init+0x46>
  {
    Error_Handler();
  }

}
 8008bac:	bd08      	pop	{r3, pc}
    Error_Handler();
 8008bae:	f000 f919 	bl	8008de4 <Error_Handler>
 8008bb2:	e7f1      	b.n	8008b98 <MX_I2C2_Init+0x24>
    Error_Handler();
 8008bb4:	f000 f916 	bl	8008de4 <Error_Handler>
 8008bb8:	e7f3      	b.n	8008ba2 <MX_I2C2_Init+0x2e>
    Error_Handler();
 8008bba:	f000 f913 	bl	8008de4 <Error_Handler>
}
 8008bbe:	e7f5      	b.n	8008bac <MX_I2C2_Init+0x38>
 8008bc0:	200148e4 	.word	0x200148e4
 8008bc4:	40005800 	.word	0x40005800
 8008bc8:	00b03fdb 	.word	0x00b03fdb

08008bcc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008bcc:	b510      	push	{r4, lr}
 8008bce:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	9303      	str	r3, [sp, #12]
 8008bd4:	9304      	str	r3, [sp, #16]
 8008bd6:	9305      	str	r3, [sp, #20]
 8008bd8:	9306      	str	r3, [sp, #24]
 8008bda:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C2)
 8008bdc:	6802      	ldr	r2, [r0, #0]
 8008bde:	4b16      	ldr	r3, [pc, #88]	; (8008c38 <HAL_I2C_MspInit+0x6c>)
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d001      	beq.n	8008be8 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8008be4:	b008      	add	sp, #32
 8008be6:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008be8:	4c14      	ldr	r4, [pc, #80]	; (8008c3c <HAL_I2C_MspInit+0x70>)
 8008bea:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8008bee:	f043 0302 	orr.w	r3, r3, #2
 8008bf2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8008bf6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8008bfa:	f003 0302 	and.w	r3, r3, #2
 8008bfe:	9301      	str	r3, [sp, #4]
 8008c00:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008c02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008c06:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008c08:	2312      	movs	r3, #18
 8008c0a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8008c10:	2304      	movs	r3, #4
 8008c12:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c14:	a903      	add	r1, sp, #12
 8008c16:	480a      	ldr	r0, [pc, #40]	; (8008c40 <HAL_I2C_MspInit+0x74>)
 8008c18:	f7f9 fe18 	bl	800284c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8008c1c:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8008c20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008c24:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8008c28:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8008c2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c30:	9302      	str	r3, [sp, #8]
 8008c32:	9b02      	ldr	r3, [sp, #8]
}
 8008c34:	e7d6      	b.n	8008be4 <HAL_I2C_MspInit+0x18>
 8008c36:	bf00      	nop
 8008c38:	40005800 	.word	0x40005800
 8008c3c:	58024400 	.word	0x58024400
 8008c40:	58020400 	.word	0x58020400

08008c44 <CycleCounterInit>:

// helper function to initialize measuring unit (cycle counter) */
static void CycleCounterInit( void )
{
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8008c44:	4a09      	ldr	r2, [pc, #36]	; (8008c6c <CycleCounterInit+0x28>)
 8008c46:	68d3      	ldr	r3, [r2, #12]
 8008c48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c4c:	60d3      	str	r3, [r2, #12]

  /* Unlock DWT registers */
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8008c4e:	4b08      	ldr	r3, [pc, #32]	; (8008c70 <CycleCounterInit+0x2c>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f013 0f01 	tst.w	r3, #1
 8008c56:	d002      	beq.n	8008c5e <CycleCounterInit+0x1a>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
 8008c58:	4b06      	ldr	r3, [pc, #24]	; (8008c74 <CycleCounterInit+0x30>)
 8008c5a:	4a07      	ldr	r2, [pc, #28]	; (8008c78 <CycleCounterInit+0x34>)
 8008c5c:	601a      	str	r2, [r3, #0]

  /* clear the cycle counter */
  DWT->CYCCNT = 0;
 8008c5e:	4b07      	ldr	r3, [pc, #28]	; (8008c7c <CycleCounterInit+0x38>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	605a      	str	r2, [r3, #4]

  /* start the cycle counter */
  DWT->CTRL = 0x40000001;
 8008c64:	4a06      	ldr	r2, [pc, #24]	; (8008c80 <CycleCounterInit+0x3c>)
 8008c66:	601a      	str	r2, [r3, #0]

}
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	e000edf0 	.word	0xe000edf0
 8008c70:	e0001fb4 	.word	0xe0001fb4
 8008c74:	e0001fb0 	.word	0xe0001fb0
 8008c78:	c5acce55 	.word	0xc5acce55
 8008c7c:	e0001000 	.word	0xe0001000
 8008c80:	40000001 	.word	0x40000001

08008c84 <SDRAM_Initialization_sequence>:
{
 8008c84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c88:	b087      	sub	sp, #28
    __IO uint32_t tmpmrd = 0;
 8008c8a:	2600      	movs	r6, #0
 8008c8c:	9605      	str	r6, [sp, #20]
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8008c8e:	2501      	movs	r5, #1
 8008c90:	9501      	str	r5, [sp, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8008c92:	2710      	movs	r7, #16
 8008c94:	9702      	str	r7, [sp, #8]
    Command.AutoRefreshNumber = 1;
 8008c96:	9503      	str	r5, [sp, #12]
    Command.ModeRegisterDefinition = 0;
 8008c98:	9604      	str	r6, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008c9a:	4c25      	ldr	r4, [pc, #148]	; (8008d30 <SDRAM_Initialization_sequence+0xac>)
 8008c9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ca0:	a901      	add	r1, sp, #4
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	f7fd fe84 	bl	80069b0 <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 8008ca8:	4628      	mov	r0, r5
 8008caa:	f7f7 fc8b 	bl	80005c4 <HAL_Delay>
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 8008cae:	2302      	movs	r3, #2
 8008cb0:	9301      	str	r3, [sp, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8008cb2:	9702      	str	r7, [sp, #8]
    Command.AutoRefreshNumber = 1;
 8008cb4:	9503      	str	r5, [sp, #12]
    Command.ModeRegisterDefinition = 0;
 8008cb6:	9604      	str	r6, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008cb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cbc:	a901      	add	r1, sp, #4
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	f7fd fe76 	bl	80069b0 <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 8008cc4:	f240 2322 	movw	r3, #546	; 0x222
 8008cc8:	9305      	str	r3, [sp, #20]
    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8008cca:	2304      	movs	r3, #4
 8008ccc:	9301      	str	r3, [sp, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8008cce:	9702      	str	r7, [sp, #8]
    Command.AutoRefreshNumber = 1;
 8008cd0:	9503      	str	r5, [sp, #12]
    Command.ModeRegisterDefinition = tmpmrd;
 8008cd2:	9b05      	ldr	r3, [sp, #20]
 8008cd4:	9304      	str	r3, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008cd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cda:	a901      	add	r1, sp, #4
 8008cdc:	4620      	mov	r0, r4
 8008cde:	f7fd fe67 	bl	80069b0 <HAL_SDRAM_SendCommand>
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8008ce2:	f04f 0903 	mov.w	r9, #3
 8008ce6:	f8cd 9004 	str.w	r9, [sp, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8008cea:	9702      	str	r7, [sp, #8]
    Command.AutoRefreshNumber = 8;
 8008cec:	f04f 0808 	mov.w	r8, #8
 8008cf0:	f8cd 800c 	str.w	r8, [sp, #12]
    Command.ModeRegisterDefinition = 0;
 8008cf4:	9604      	str	r6, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008cf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cfa:	a901      	add	r1, sp, #4
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	f7fd fe57 	bl	80069b0 <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 8008d02:	4628      	mov	r0, r5
 8008d04:	f7f7 fc5e 	bl	80005c4 <HAL_Delay>
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8008d08:	f8cd 9004 	str.w	r9, [sp, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8008d0c:	9702      	str	r7, [sp, #8]
    Command.AutoRefreshNumber = 8;
 8008d0e:	f8cd 800c 	str.w	r8, [sp, #12]
    Command.ModeRegisterDefinition = 0;
 8008d12:	9604      	str	r6, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008d14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d18:	a901      	add	r1, sp, #4
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f7fd fe48 	bl	80069b0 <HAL_SDRAM_SendCommand>
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, SDRAM_REFRESH_COUNT);
 8008d20:	f240 5169 	movw	r1, #1385	; 0x569
 8008d24:	4620      	mov	r0, r4
 8008d26:	f7fd fe66 	bl	80069f6 <HAL_SDRAM_ProgramRefreshRate>
}
 8008d2a:	b007      	add	sp, #28
 8008d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d30:	200148b0 	.word	0x200148b0

08008d34 <randomNumber>:


float randomNumber(void) {
 8008d34:	b500      	push	{lr}
 8008d36:	b083      	sub	sp, #12

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8008d38:	a901      	add	r1, sp, #4
 8008d3a:	4807      	ldr	r0, [pc, #28]	; (8008d58 <randomNumber+0x24>)
 8008d3c:	f7fc f909 	bl	8004f52 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 8008d40:	eddd 7a01 	vldr	s15, [sp, #4]
 8008d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
	return num;
}
 8008d48:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8008d5c <randomNumber+0x28>
 8008d4c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008d50:	b003      	add	sp, #12
 8008d52:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d56:	bf00      	nop
 8008d58:	200157d0 	.word	0x200157d0
 8008d5c:	2f80000d 	.word	0x2f80000d

08008d60 <MPU_Conf>:
		SDWriteIndex++;
	}
}
#endif
void MPU_Conf(void)
{
 8008d60:	b570      	push	{r4, r5, r6, lr}
 8008d62:	b084      	sub	sp, #16
  //Thanks, Keshikan! This solves the issues with accessing the SRAM in the D2 area properly. -JS
	//should test the different possible settings to see what works best while avoiding needing to manually clear the cache -JS

	MPU_Region_InitTypeDef MPU_InitStruct;

	  HAL_MPU_Disable();
 8008d64:	f7f8 fb14 	bl	8001390 <HAL_MPU_Disable>

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8008d68:	2401      	movs	r4, #1
 8008d6a:	f88d 4000 	strb.w	r4, [sp]

	  //D2 Domain�SRAM1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 8008d6e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8008d72:	9301      	str	r3, [sp, #4]
	  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
	  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
	  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
	  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8008d74:	2311      	movs	r3, #17
 8008d76:	f88d 3008 	strb.w	r3, [sp, #8]

	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8008d7a:	2603      	movs	r6, #3
 8008d7c:	f88d 600b 	strb.w	r6, [sp, #11]

	  //AN4838
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8008d80:	f88d 400a 	strb.w	r4, [sp, #10]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8008d84:	2500      	movs	r5, #0
 8008d86:	f88d 500e 	strb.w	r5, [sp, #14]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8008d8a:	f88d 500f 	strb.w	r5, [sp, #15]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8008d8e:	f88d 500d 	strb.w	r5, [sp, #13]
//	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
//	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
//	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8008d92:	f88d 5001 	strb.w	r5, [sp, #1]

	  MPU_InitStruct.SubRegionDisable = 0x00;
 8008d96:	f88d 5009 	strb.w	r5, [sp, #9]


	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8008d9a:	f88d 400c 	strb.w	r4, [sp, #12]


	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008d9e:	4668      	mov	r0, sp
 8008da0:	f7f8 fb18 	bl	80013d4 <HAL_MPU_ConfigRegion>


	  //now set up D3 domain RAM

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8008da4:	f88d 4000 	strb.w	r4, [sp]

	 	  //D2 Domain�SRAM1
	 	  MPU_InitStruct.BaseAddress = 0x38000000;
 8008da8:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8008dac:	9301      	str	r3, [sp, #4]


	 	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8008dae:	230f      	movs	r3, #15
 8008db0:	f88d 3008 	strb.w	r3, [sp, #8]

	 	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8008db4:	f88d 600b 	strb.w	r6, [sp, #11]

	 	  //AN4838
	 	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8008db8:	f88d 400a 	strb.w	r4, [sp, #10]
	 	  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8008dbc:	f88d 400e 	strb.w	r4, [sp, #14]
	 	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8008dc0:	f88d 400f 	strb.w	r4, [sp, #15]
	 	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8008dc4:	f88d 400d 	strb.w	r4, [sp, #13]
	 //	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	 //	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	 //	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	 	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8008dc8:	f88d 4001 	strb.w	r4, [sp, #1]

	 	  MPU_InitStruct.SubRegionDisable = 0x00;
 8008dcc:	f88d 5009 	strb.w	r5, [sp, #9]


	 	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8008dd0:	f88d 500c 	strb.w	r5, [sp, #12]


	 	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008dd4:	4668      	mov	r0, sp
 8008dd6:	f7f8 fafd 	bl	80013d4 <HAL_MPU_ConfigRegion>


	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8008dda:	2004      	movs	r0, #4
 8008ddc:	f7f8 fae8 	bl	80013b0 <HAL_MPU_Enable>
}
 8008de0:	b004      	add	sp, #16
 8008de2:	bd70      	pop	{r4, r5, r6, pc}

08008de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008de4:	e7fe      	b.n	8008de4 <Error_Handler>
	...

08008de8 <SystemClock_Config>:
{
 8008de8:	b500      	push	{lr}
 8008dea:	b0cd      	sub	sp, #308	; 0x134
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008dec:	224c      	movs	r2, #76	; 0x4c
 8008dee:	2100      	movs	r1, #0
 8008df0:	a839      	add	r0, sp, #228	; 0xe4
 8008df2:	f002 f923 	bl	800b03c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008df6:	2220      	movs	r2, #32
 8008df8:	2100      	movs	r1, #0
 8008dfa:	a831      	add	r0, sp, #196	; 0xc4
 8008dfc:	f002 f91e 	bl	800b03c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008e00:	22bc      	movs	r2, #188	; 0xbc
 8008e02:	2100      	movs	r1, #0
 8008e04:	a802      	add	r0, sp, #8
 8008e06:	f002 f919 	bl	800b03c <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8008e0a:	2002      	movs	r0, #2
 8008e0c:	f7fa f882 	bl	8002f14 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8008e10:	2300      	movs	r3, #0
 8008e12:	9301      	str	r3, [sp, #4]
 8008e14:	4b3d      	ldr	r3, [pc, #244]	; (8008f0c <SystemClock_Config+0x124>)
 8008e16:	699a      	ldr	r2, [r3, #24]
 8008e18:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008e1c:	619a      	str	r2, [r3, #24]
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008e24:	9301      	str	r3, [sp, #4]
 8008e26:	4b3a      	ldr	r3, [pc, #232]	; (8008f10 <SystemClock_Config+0x128>)
 8008e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e2a:	f042 0201 	orr.w	r2, r2, #1
 8008e2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8008e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e32:	f003 0301 	and.w	r3, r3, #1
 8008e36:	9301      	str	r3, [sp, #4]
 8008e38:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8008e3a:	4b34      	ldr	r3, [pc, #208]	; (8008f0c <SystemClock_Config+0x124>)
 8008e3c:	699b      	ldr	r3, [r3, #24]
 8008e3e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8008e42:	d0fa      	beq.n	8008e3a <SystemClock_Config+0x52>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8008e44:	4a33      	ldr	r2, [pc, #204]	; (8008f14 <SystemClock_Config+0x12c>)
 8008e46:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8008e48:	f023 0303 	bic.w	r3, r3, #3
 8008e4c:	f043 0302 	orr.w	r3, r3, #2
 8008e50:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8008e52:	2323      	movs	r3, #35	; 0x23
 8008e54:	9339      	str	r3, [sp, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008e56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e5a:	933a      	str	r3, [sp, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	933c      	str	r3, [sp, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008e60:	2240      	movs	r2, #64	; 0x40
 8008e62:	923d      	str	r2, [sp, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8008e64:	933f      	str	r3, [sp, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008e66:	2302      	movs	r3, #2
 8008e68:	9342      	str	r3, [sp, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008e6a:	9343      	str	r3, [sp, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8008e6c:	2205      	movs	r2, #5
 8008e6e:	9244      	str	r2, [sp, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 192;
 8008e70:	22c0      	movs	r2, #192	; 0xc0
 8008e72:	9245      	str	r2, [sp, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8008e74:	9346      	str	r3, [sp, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008e76:	9347      	str	r3, [sp, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8008e78:	9348      	str	r3, [sp, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8008e7a:	2308      	movs	r3, #8
 8008e7c:	9349      	str	r3, [sp, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	934a      	str	r3, [sp, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8008e82:	934b      	str	r3, [sp, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008e84:	a839      	add	r0, sp, #228	; 0xe4
 8008e86:	f7fa f86f 	bl	8002f68 <HAL_RCC_OscConfig>
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	d137      	bne.n	8008efe <SystemClock_Config+0x116>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008e8e:	233f      	movs	r3, #63	; 0x3f
 8008e90:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008e92:	2303      	movs	r3, #3
 8008e94:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8008e96:	2300      	movs	r3, #0
 8008e98:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8008e9a:	2308      	movs	r3, #8
 8008e9c:	9334      	str	r3, [sp, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8008e9e:	2340      	movs	r3, #64	; 0x40
 8008ea0:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8008ea2:	9336      	str	r3, [sp, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8008ea4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008ea8:	9237      	str	r2, [sp, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8008eaa:	9338      	str	r3, [sp, #224]	; 0xe0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8008eac:	2104      	movs	r1, #4
 8008eae:	a831      	add	r0, sp, #196	; 0xc4
 8008eb0:	f7fa fc48 	bl	8003744 <HAL_RCC_ClockConfig>
 8008eb4:	bb28      	cbnz	r0, 8008f02 <SystemClock_Config+0x11a>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_SPI2
 8008eb6:	4b18      	ldr	r3, [pc, #96]	; (8008f18 <SystemClock_Config+0x130>)
 8008eb8:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8008eba:	2319      	movs	r3, #25
 8008ebc:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 8008ebe:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8008ec2:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 8008ec4:	2307      	movs	r3, #7
 8008ec6:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8008ec8:	2302      	movs	r3, #2
 8008eca:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8008ecc:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8008ed2:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8008ed4:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8008ed6:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8008ed8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008edc:	9215      	str	r2, [sp, #84]	; 0x54
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8008ede:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	9217      	str	r2, [sp, #92]	; 0x5c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8008ee4:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8008ee6:	9321      	str	r3, [sp, #132]	; 0x84
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8008ee8:	9322      	str	r3, [sp, #136]	; 0x88
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8008eea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008eee:	932a      	str	r3, [sp, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008ef0:	a802      	add	r0, sp, #8
 8008ef2:	f7fa fe9f 	bl	8003c34 <HAL_RCCEx_PeriphCLKConfig>
 8008ef6:	b930      	cbnz	r0, 8008f06 <SystemClock_Config+0x11e>
}
 8008ef8:	b04d      	add	sp, #308	; 0x134
 8008efa:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8008efe:	f7ff ff71 	bl	8008de4 <Error_Handler>
    Error_Handler();
 8008f02:	f7ff ff6f 	bl	8008de4 <Error_Handler>
    Error_Handler();
 8008f06:	f7ff ff6d 	bl	8008de4 <Error_Handler>
 8008f0a:	bf00      	nop
 8008f0c:	58024800 	.word	0x58024800
 8008f10:	58000400 	.word	0x58000400
 8008f14:	58024400 	.word	0x58024400
 8008f18:	810b1108 	.word	0x810b1108

08008f1c <main>:
{
 8008f1c:	b510      	push	{r4, lr}
  MPU_Conf();
 8008f1e:	f7ff ff1f 	bl	8008d60 <MPU_Conf>
  __ASM volatile ("dsb 0xF":::"memory");
 8008f22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008f26:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8008f2a:	4b43      	ldr	r3, [pc, #268]	; (8009038 <main+0x11c>)
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8008f32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008f36:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8008f3a:	695a      	ldr	r2, [r3, #20]
 8008f3c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008f40:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008f42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008f46:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8008f4a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8008f4e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8008f52:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8008f56:	f3c4 314e 	ubfx	r1, r4, #13, #15
 8008f5a:	e00f      	b.n	8008f7c <main+0x60>
      } while (ways-- != 0U);
 8008f5c:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008f5e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8008f62:	ea03 1341 	and.w	r3, r3, r1, lsl #5
 8008f66:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8008f6a:	4833      	ldr	r0, [pc, #204]	; (8009038 <main+0x11c>)
 8008f6c:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8008f70:	1e53      	subs	r3, r2, #1
 8008f72:	2a00      	cmp	r2, #0
 8008f74:	d1f2      	bne.n	8008f5c <main+0x40>
    } while(sets-- != 0U);
 8008f76:	1e4b      	subs	r3, r1, #1
 8008f78:	b119      	cbz	r1, 8008f82 <main+0x66>
 8008f7a:	4619      	mov	r1, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8008f7c:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 8008f80:	e7ed      	b.n	8008f5e <main+0x42>
 8008f82:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8008f86:	6943      	ldr	r3, [r0, #20]
 8008f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f8c:	6143      	str	r3, [r0, #20]
 8008f8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008f92:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8008f96:	f7f7 fad5 	bl	8000544 <HAL_Init>
  SystemClock_Config();
 8008f9a:	f7ff ff25 	bl	8008de8 <SystemClock_Config>
  MX_GPIO_Init();
 8008f9e:	f7ff fcdd 	bl	800895c <MX_GPIO_Init>
  MX_DMA_Init();
 8008fa2:	f7ff fbdf 	bl	8008764 <MX_DMA_Init>
  MX_FMC_Init();
 8008fa6:	f7ff fc9f 	bl	80088e8 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 8008faa:	f000 f9e5 	bl	8009378 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8008fae:	f7ff fc15 	bl	80087dc <MX_FATFS_Init>
  MX_SAI1_Init();
 8008fb2:	f000 f87d 	bl	80090b0 <MX_SAI1_Init>
  MX_RNG_Init();
 8008fb6:	f000 f84f 	bl	8009058 <MX_RNG_Init>
  MX_SPI2_Init();
 8008fba:	f000 fa4f 	bl	800945c <MX_SPI2_Init>
  MX_I2C2_Init();
 8008fbe:	f7ff fdd9 	bl	8008b74 <MX_I2C2_Init>
  MX_ADC1_Init();
 8008fc2:	f7fe fdc1 	bl	8007b48 <MX_ADC1_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008fcc:	481b      	ldr	r0, [pc, #108]	; (800903c <main+0x120>)
 8008fce:	f7f9 fd34 	bl	8002a3a <HAL_GPIO_WritePin>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8008fd2:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 8008fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 8008fda:	eee1 3a10 	vmsr	fpscr, r3
  for (int i = 0; i < 16; i++)
 8008fde:	2300      	movs	r3, #0
 8008fe0:	e006      	b.n	8008ff0 <main+0xd4>
	  SPI_TX[i] = counter++;
 8008fe2:	4917      	ldr	r1, [pc, #92]	; (8009040 <main+0x124>)
 8008fe4:	780a      	ldrb	r2, [r1, #0]
 8008fe6:	1c50      	adds	r0, r2, #1
 8008fe8:	7008      	strb	r0, [r1, #0]
 8008fea:	4916      	ldr	r1, [pc, #88]	; (8009044 <main+0x128>)
 8008fec:	54ca      	strb	r2, [r1, r3]
  for (int i = 0; i < 16; i++)
 8008fee:	3301      	adds	r3, #1
 8008ff0:	2b0f      	cmp	r3, #15
 8008ff2:	ddf6      	ble.n	8008fe2 <main+0xc6>
  HAL_SPI_TransmitReceive_DMA(&hspi2, SPI_TX, SPI_RX, 16);
 8008ff4:	4913      	ldr	r1, [pc, #76]	; (8009044 <main+0x128>)
 8008ff6:	2310      	movs	r3, #16
 8008ff8:	f101 0220 	add.w	r2, r1, #32
 8008ffc:	4812      	ldr	r0, [pc, #72]	; (8009048 <main+0x12c>)
 8008ffe:	f7fd fe2d 	bl	8006c5c <HAL_SPI_TransmitReceive_DMA>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8009002:	2201      	movs	r2, #1
 8009004:	2140      	movs	r1, #64	; 0x40
 8009006:	480d      	ldr	r0, [pc, #52]	; (800903c <main+0x120>)
 8009008:	f7f9 fd17 	bl	8002a3a <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800900c:	200a      	movs	r0, #10
 800900e:	f7f7 fad9 	bl	80005c4 <HAL_Delay>
  SDRAM_Initialization_sequence();
 8009012:	f7ff fe37 	bl	8008c84 <SDRAM_Initialization_sequence>
  HAL_Delay(10);
 8009016:	200a      	movs	r0, #10
 8009018:	f7f7 fad4 	bl	80005c4 <HAL_Delay>
     audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 800901c:	4a0b      	ldr	r2, [pc, #44]	; (800904c <main+0x130>)
 800901e:	490c      	ldr	r1, [pc, #48]	; (8009050 <main+0x134>)
 8009020:	480c      	ldr	r0, [pc, #48]	; (8009054 <main+0x138>)
 8009022:	f7fe fe81 	bl	8007d28 <audioInit>
     CycleCounterInit();
 8009026:	f7ff fe0d 	bl	8008c44 <CycleCounterInit>
	  int tempIntGP = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800902a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800902e:	4803      	ldr	r0, [pc, #12]	; (800903c <main+0x120>)
 8009030:	f7f9 fcfc 	bl	8002a2c <HAL_GPIO_ReadPin>
 8009034:	e7f9      	b.n	800902a <main+0x10e>
 8009036:	bf00      	nop
 8009038:	e000ed00 	.word	0xe000ed00
 800903c:	58020800 	.word	0x58020800
 8009040:	20015195 	.word	0x20015195
 8009044:	30001400 	.word	0x30001400
 8009048:	20015a84 	.word	0x20015a84
 800904c:	200157e4 	.word	0x200157e4
 8009050:	2001596c 	.word	0x2001596c
 8009054:	200148e4 	.word	0x200148e4

08009058 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8009058:	b508      	push	{r3, lr}

  hrng.Instance = RNG;
 800905a:	4806      	ldr	r0, [pc, #24]	; (8009074 <MX_RNG_Init+0x1c>)
 800905c:	4b06      	ldr	r3, [pc, #24]	; (8009078 <MX_RNG_Init+0x20>)
 800905e:	6003      	str	r3, [r0, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8009060:	2300      	movs	r3, #0
 8009062:	6043      	str	r3, [r0, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8009064:	f7fb ff3a 	bl	8004edc <HAL_RNG_Init>
 8009068:	b900      	cbnz	r0, 800906c <MX_RNG_Init+0x14>
  {
    Error_Handler();
  }

}
 800906a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800906c:	f7ff feba 	bl	8008de4 <Error_Handler>
}
 8009070:	e7fb      	b.n	800906a <MX_RNG_Init+0x12>
 8009072:	bf00      	nop
 8009074:	200157d0 	.word	0x200157d0
 8009078:	48021800 	.word	0x48021800

0800907c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{

  if(rngHandle->Instance==RNG)
 800907c:	6802      	ldr	r2, [r0, #0]
 800907e:	4b0a      	ldr	r3, [pc, #40]	; (80090a8 <HAL_RNG_MspInit+0x2c>)
 8009080:	429a      	cmp	r2, r3
 8009082:	d000      	beq.n	8009086 <HAL_RNG_MspInit+0xa>
 8009084:	4770      	bx	lr
{
 8009086:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8009088:	4b08      	ldr	r3, [pc, #32]	; (80090ac <HAL_RNG_MspInit+0x30>)
 800908a:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800908e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009092:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8009096:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800909a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800909e:	9301      	str	r3, [sp, #4]
 80090a0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80090a2:	b002      	add	sp, #8
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	48021800 	.word	0x48021800
 80090ac:	58024400 	.word	0x58024400

080090b0 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80090b0:	b508      	push	{r3, lr}

  hsai_BlockA1.Instance = SAI1_Block_A;
 80090b2:	4818      	ldr	r0, [pc, #96]	; (8009114 <MX_SAI1_Init+0x64>)
 80090b4:	4b18      	ldr	r3, [pc, #96]	; (8009118 <MX_SAI1_Init+0x68>)
 80090b6:	6003      	str	r3, [r0, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80090b8:	2100      	movs	r1, #0
 80090ba:	6041      	str	r1, [r0, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80090bc:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80090be:	6141      	str	r1, [r0, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80090c0:	6181      	str	r1, [r0, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80090c2:	2301      	movs	r3, #1
 80090c4:	61c3      	str	r3, [r0, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80090c6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80090ca:	6203      	str	r3, [r0, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80090cc:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80090ce:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80090d0:	6301      	str	r1, [r0, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80090d2:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80090d4:	2302      	movs	r3, #2
 80090d6:	461a      	mov	r2, r3
 80090d8:	f7fc fa40 	bl	800555c <HAL_SAI_InitProtocol>
 80090dc:	b998      	cbnz	r0, 8009106 <MX_SAI1_Init+0x56>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 80090de:	480f      	ldr	r0, [pc, #60]	; (800911c <MX_SAI1_Init+0x6c>)
 80090e0:	4b0f      	ldr	r3, [pc, #60]	; (8009120 <MX_SAI1_Init+0x70>)
 80090e2:	6003      	str	r3, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80090e4:	2303      	movs	r3, #3
 80090e6:	6043      	str	r3, [r0, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80090e8:	2301      	movs	r3, #1
 80090ea:	6083      	str	r3, [r0, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80090ec:	2100      	movs	r1, #0
 80090ee:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80090f0:	61c3      	str	r3, [r0, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80090f2:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80090f4:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80090f6:	6301      	str	r1, [r0, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80090f8:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80090fa:	2302      	movs	r3, #2
 80090fc:	461a      	mov	r2, r3
 80090fe:	f7fc fa2d 	bl	800555c <HAL_SAI_InitProtocol>
 8009102:	b918      	cbnz	r0, 800910c <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
  }

}
 8009104:	bd08      	pop	{r3, pc}
    Error_Handler();
 8009106:	f7ff fe6d 	bl	8008de4 <Error_Handler>
 800910a:	e7e8      	b.n	80090de <MX_SAI1_Init+0x2e>
    Error_Handler();
 800910c:	f7ff fe6a 	bl	8008de4 <Error_Handler>
}
 8009110:	e7f8      	b.n	8009104 <MX_SAI1_Init+0x54>
 8009112:	bf00      	nop
 8009114:	2001596c 	.word	0x2001596c
 8009118:	40015804 	.word	0x40015804
 800911c:	200157e4 	.word	0x200157e4
 8009120:	40015824 	.word	0x40015824

08009124 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8009124:	b530      	push	{r4, r5, lr}
 8009126:	b089      	sub	sp, #36	; 0x24
 8009128:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800912a:	6802      	ldr	r2, [r0, #0]
 800912c:	4b4d      	ldr	r3, [pc, #308]	; (8009264 <HAL_SAI_MspInit+0x140>)
 800912e:	429a      	cmp	r2, r3
 8009130:	d005      	beq.n	800913e <HAL_SAI_MspInit+0x1a>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
    }
    if(hsai->Instance==SAI1_Block_B)
 8009132:	6822      	ldr	r2, [r4, #0]
 8009134:	4b4c      	ldr	r3, [pc, #304]	; (8009268 <HAL_SAI_MspInit+0x144>)
 8009136:	429a      	cmp	r2, r3
 8009138:	d04b      	beq.n	80091d2 <HAL_SAI_MspInit+0xae>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
    }
}
 800913a:	b009      	add	sp, #36	; 0x24
 800913c:	bd30      	pop	{r4, r5, pc}
    if (SAI1_client == 0)
 800913e:	4b4b      	ldr	r3, [pc, #300]	; (800926c <HAL_SAI_MspInit+0x148>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	b963      	cbnz	r3, 800915e <HAL_SAI_MspInit+0x3a>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8009144:	4a4a      	ldr	r2, [pc, #296]	; (8009270 <HAL_SAI_MspInit+0x14c>)
 8009146:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 800914a:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 800914e:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
 8009152:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8009156:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800915a:	9201      	str	r2, [sp, #4]
 800915c:	9a01      	ldr	r2, [sp, #4]
    SAI1_client ++;
 800915e:	3301      	adds	r3, #1
 8009160:	4a42      	ldr	r2, [pc, #264]	; (800926c <HAL_SAI_MspInit+0x148>)
 8009162:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8009164:	2374      	movs	r3, #116	; 0x74
 8009166:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009168:	2302      	movs	r3, #2
 800916a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800916c:	2500      	movs	r5, #0
 800916e:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009170:	2303      	movs	r3, #3
 8009172:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8009174:	2306      	movs	r3, #6
 8009176:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009178:	a903      	add	r1, sp, #12
 800917a:	483e      	ldr	r0, [pc, #248]	; (8009274 <HAL_SAI_MspInit+0x150>)
 800917c:	f7f9 fb66 	bl	800284c <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 8009180:	483d      	ldr	r0, [pc, #244]	; (8009278 <HAL_SAI_MspInit+0x154>)
 8009182:	4b3e      	ldr	r3, [pc, #248]	; (800927c <HAL_SAI_MspInit+0x158>)
 8009184:	6003      	str	r3, [r0, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8009186:	2357      	movs	r3, #87	; 0x57
 8009188:	6043      	str	r3, [r0, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800918a:	2340      	movs	r3, #64	; 0x40
 800918c:	6083      	str	r3, [r0, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800918e:	60c5      	str	r5, [r0, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8009190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009194:	6103      	str	r3, [r0, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800919a:	6143      	str	r3, [r0, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800919c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80091a0:	6183      	str	r3, [r0, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80091a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091a6:	61c3      	str	r3, [r0, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80091a8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80091ac:	6203      	str	r3, [r0, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80091ae:	2304      	movs	r3, #4
 80091b0:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80091b2:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 80091b4:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80091b6:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80091b8:	f7f8 fb4a 	bl	8001850 <HAL_DMA_Init>
 80091bc:	b930      	cbnz	r0, 80091cc <HAL_SAI_MspInit+0xa8>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 80091be:	4b2e      	ldr	r3, [pc, #184]	; (8009278 <HAL_SAI_MspInit+0x154>)
 80091c0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80091c4:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 80091c6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80091ca:	e7b2      	b.n	8009132 <HAL_SAI_MspInit+0xe>
      Error_Handler();
 80091cc:	f7ff fe0a 	bl	8008de4 <Error_Handler>
 80091d0:	e7f5      	b.n	80091be <HAL_SAI_MspInit+0x9a>
      if (SAI1_client == 0)
 80091d2:	4b26      	ldr	r3, [pc, #152]	; (800926c <HAL_SAI_MspInit+0x148>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	b963      	cbnz	r3, 80091f2 <HAL_SAI_MspInit+0xce>
       __HAL_RCC_SAI1_CLK_ENABLE();
 80091d8:	4a25      	ldr	r2, [pc, #148]	; (8009270 <HAL_SAI_MspInit+0x14c>)
 80091da:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 80091de:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80091e2:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
 80091e6:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 80091ea:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80091ee:	9202      	str	r2, [sp, #8]
 80091f0:	9a02      	ldr	r2, [sp, #8]
    SAI1_client ++;
 80091f2:	3301      	adds	r3, #1
 80091f4:	4a1d      	ldr	r2, [pc, #116]	; (800926c <HAL_SAI_MspInit+0x148>)
 80091f6:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80091f8:	2308      	movs	r3, #8
 80091fa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091fc:	2302      	movs	r3, #2
 80091fe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009200:	2500      	movs	r5, #0
 8009202:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009204:	2303      	movs	r3, #3
 8009206:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8009208:	2306      	movs	r3, #6
 800920a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800920c:	a903      	add	r1, sp, #12
 800920e:	4819      	ldr	r0, [pc, #100]	; (8009274 <HAL_SAI_MspInit+0x150>)
 8009210:	f7f9 fb1c 	bl	800284c <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 8009214:	481a      	ldr	r0, [pc, #104]	; (8009280 <HAL_SAI_MspInit+0x15c>)
 8009216:	4b1b      	ldr	r3, [pc, #108]	; (8009284 <HAL_SAI_MspInit+0x160>)
 8009218:	6003      	str	r3, [r0, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800921a:	2358      	movs	r3, #88	; 0x58
 800921c:	6043      	str	r3, [r0, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800921e:	6085      	str	r5, [r0, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8009220:	60c5      	str	r5, [r0, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8009222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009226:	6103      	str	r3, [r0, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800922c:	6143      	str	r3, [r0, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800922e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009232:	6183      	str	r3, [r0, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8009234:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009238:	61c3      	str	r3, [r0, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800923a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800923e:	6203      	str	r3, [r0, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8009240:	2304      	movs	r3, #4
 8009242:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8009244:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8009246:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8009248:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800924a:	f7f8 fb01 	bl	8001850 <HAL_DMA_Init>
 800924e:	b930      	cbnz	r0, 800925e <HAL_SAI_MspInit+0x13a>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8009250:	4b0b      	ldr	r3, [pc, #44]	; (8009280 <HAL_SAI_MspInit+0x15c>)
 8009252:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8009256:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8009258:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 800925c:	e76d      	b.n	800913a <HAL_SAI_MspInit+0x16>
      Error_Handler();
 800925e:	f7ff fdc1 	bl	8008de4 <Error_Handler>
 8009262:	e7f5      	b.n	8009250 <HAL_SAI_MspInit+0x12c>
 8009264:	40015804 	.word	0x40015804
 8009268:	40015824 	.word	0x40015824
 800926c:	20000158 	.word	0x20000158
 8009270:	58024400 	.word	0x58024400
 8009274:	58021000 	.word	0x58021000
 8009278:	2001587c 	.word	0x2001587c
 800927c:	40020028 	.word	0x40020028
 8009280:	200158f4 	.word	0x200158f4
 8009284:	40020040 	.word	0x40020040

08009288 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009288:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 800928a:	4b07      	ldr	r3, [pc, #28]	; (80092a8 <SD_CheckStatus+0x20>)
 800928c:	2201      	movs	r2, #1
 800928e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009290:	f7ff f988 	bl	80085a4 <BSP_SD_GetCardState>
 8009294:	b920      	cbnz	r0, 80092a0 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 8009296:	4a04      	ldr	r2, [pc, #16]	; (80092a8 <SD_CheckStatus+0x20>)
 8009298:	7813      	ldrb	r3, [r2, #0]
 800929a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800929e:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 80092a0:	4b01      	ldr	r3, [pc, #4]	; (80092a8 <SD_CheckStatus+0x20>)
 80092a2:	7818      	ldrb	r0, [r3, #0]
}
 80092a4:	bd08      	pop	{r3, pc}
 80092a6:	bf00      	nop
 80092a8:	20000076 	.word	0x20000076

080092ac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80092ac:	b510      	push	{r4, lr}
 80092ae:	4604      	mov	r4, r0
Stat = STA_NOINIT;  
 80092b0:	4b07      	ldr	r3, [pc, #28]	; (80092d0 <SD_initialize+0x24>)
 80092b2:	2201      	movs	r2, #1
 80092b4:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80092b6:	f7ff f9a1 	bl	80085fc <BSP_SD_Init>
 80092ba:	b110      	cbz	r0, 80092c2 <SD_initialize+0x16>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80092bc:	4b04      	ldr	r3, [pc, #16]	; (80092d0 <SD_initialize+0x24>)
 80092be:	7818      	ldrb	r0, [r3, #0]
}
 80092c0:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 80092c2:	4620      	mov	r0, r4
 80092c4:	f7ff ffe0 	bl	8009288 <SD_CheckStatus>
 80092c8:	4b01      	ldr	r3, [pc, #4]	; (80092d0 <SD_initialize+0x24>)
 80092ca:	7018      	strb	r0, [r3, #0]
 80092cc:	e7f6      	b.n	80092bc <SD_initialize+0x10>
 80092ce:	bf00      	nop
 80092d0:	20000076 	.word	0x20000076

080092d4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80092d4:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 80092d6:	f7ff ffd7 	bl	8009288 <SD_CheckStatus>
}
 80092da:	bd08      	pop	{r3, pc}

080092dc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80092dc:	b508      	push	{r3, lr}
 80092de:	4608      	mov	r0, r1
 80092e0:	4611      	mov	r1, r2
 80092e2:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80092e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092e8:	f7ff f93c 	bl	8008564 <BSP_SD_ReadBlocks>
 80092ec:	b920      	cbnz	r0, 80092f8 <SD_read+0x1c>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80092ee:	f7ff f959 	bl	80085a4 <BSP_SD_GetCardState>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d1fb      	bne.n	80092ee <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 80092f6:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 80092f8:	2001      	movs	r0, #1
 80092fa:	e7fc      	b.n	80092f6 <SD_read+0x1a>

080092fc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80092fc:	b508      	push	{r3, lr}
 80092fe:	4608      	mov	r0, r1
 8009300:	4611      	mov	r1, r2
 8009302:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8009304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009308:	f7ff f93c 	bl	8008584 <BSP_SD_WriteBlocks>
 800930c:	b920      	cbnz	r0, 8009318 <SD_write+0x1c>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800930e:	f7ff f949 	bl	80085a4 <BSP_SD_GetCardState>
 8009312:	2800      	cmp	r0, #0
 8009314:	d1fb      	bne.n	800930e <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8009316:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8009318:	2001      	movs	r0, #1
 800931a:	e7fc      	b.n	8009316 <SD_write+0x1a>

0800931c <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800931c:	4b15      	ldr	r3, [pc, #84]	; (8009374 <SD_ioctl+0x58>)
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	f013 0f01 	tst.w	r3, #1
 8009324:	d121      	bne.n	800936a <SD_ioctl+0x4e>
{
 8009326:	b510      	push	{r4, lr}
 8009328:	b08a      	sub	sp, #40	; 0x28
 800932a:	4614      	mov	r4, r2

  switch (cmd)
 800932c:	2903      	cmp	r1, #3
 800932e:	d81e      	bhi.n	800936e <SD_ioctl+0x52>
 8009330:	e8df f001 	tbb	[pc, r1]
 8009334:	130c0502 	.word	0x130c0502
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009338:	2000      	movs	r0, #0
  default:
    res = RES_PARERR;
  }

  return res;
}
 800933a:	b00a      	add	sp, #40	; 0x28
 800933c:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800933e:	a801      	add	r0, sp, #4
 8009340:	f7ff f93a 	bl	80085b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009344:	9b07      	ldr	r3, [sp, #28]
 8009346:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8009348:	2000      	movs	r0, #0
    break;
 800934a:	e7f6      	b.n	800933a <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 800934c:	a801      	add	r0, sp, #4
 800934e:	f7ff f933 	bl	80085b8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009352:	9b08      	ldr	r3, [sp, #32]
 8009354:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8009356:	2000      	movs	r0, #0
    break;
 8009358:	e7ef      	b.n	800933a <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 800935a:	a801      	add	r0, sp, #4
 800935c:	f7ff f92c 	bl	80085b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009360:	9b08      	ldr	r3, [sp, #32]
 8009362:	0a5b      	lsrs	r3, r3, #9
 8009364:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8009366:	2000      	movs	r0, #0
    break;
 8009368:	e7e7      	b.n	800933a <SD_ioctl+0x1e>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800936a:	2003      	movs	r0, #3
}
 800936c:	4770      	bx	lr
    res = RES_PARERR;
 800936e:	2004      	movs	r0, #4
 8009370:	e7e3      	b.n	800933a <SD_ioctl+0x1e>
 8009372:	bf00      	nop
 8009374:	20000076 	.word	0x20000076

08009378 <MX_SDMMC1_SD_Init>:
/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{

  hsd1.Instance = SDMMC1;
 8009378:	4b07      	ldr	r3, [pc, #28]	; (8009398 <MX_SDMMC1_SD_Init+0x20>)
 800937a:	4a08      	ldr	r2, [pc, #32]	; (800939c <MX_SDMMC1_SD_Init+0x24>)
 800937c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800937e:	2200      	movs	r2, #0
 8009380:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009382:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8009384:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009388:	60d9      	str	r1, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800938a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 16;
 800938c:	2210      	movs	r2, #16
 800938e:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8009390:	2201      	movs	r2, #1
 8009392:	619a      	str	r2, [r3, #24]

}
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	20015a04 	.word	0x20015a04
 800939c:	52007000 	.word	0x52007000

080093a0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80093a0:	b570      	push	{r4, r5, r6, lr}
 80093a2:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093a4:	2300      	movs	r3, #0
 80093a6:	9303      	str	r3, [sp, #12]
 80093a8:	9304      	str	r3, [sp, #16]
 80093aa:	9305      	str	r3, [sp, #20]
 80093ac:	9306      	str	r3, [sp, #24]
 80093ae:	9307      	str	r3, [sp, #28]
  if(sdHandle->Instance==SDMMC1)
 80093b0:	6802      	ldr	r2, [r0, #0]
 80093b2:	4b26      	ldr	r3, [pc, #152]	; (800944c <HAL_SD_MspInit+0xac>)
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d001      	beq.n	80093bc <HAL_SD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80093b8:	b008      	add	sp, #32
 80093ba:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80093bc:	4b24      	ldr	r3, [pc, #144]	; (8009450 <HAL_SD_MspInit+0xb0>)
 80093be:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80093c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80093c6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80093ca:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80093ce:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80093d2:	9200      	str	r2, [sp, #0]
 80093d4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80093d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80093da:	f042 0204 	orr.w	r2, r2, #4
 80093de:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80093e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80093e6:	f002 0204 	and.w	r2, r2, #4
 80093ea:	9201      	str	r2, [sp, #4]
 80093ec:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80093ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80093f2:	f042 0208 	orr.w	r2, r2, #8
 80093f6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80093fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80093fe:	f003 0308 	and.w	r3, r3, #8
 8009402:	9302      	str	r3, [sp, #8]
 8009404:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8009406:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800940a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800940c:	2602      	movs	r6, #2
 800940e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009410:	2401      	movs	r4, #1
 8009412:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8009414:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8009416:	250c      	movs	r5, #12
 8009418:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800941a:	eb0d 0105 	add.w	r1, sp, r5
 800941e:	480d      	ldr	r0, [pc, #52]	; (8009454 <HAL_SD_MspInit+0xb4>)
 8009420:	f7f9 fa14 	bl	800284c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009424:	2304      	movs	r3, #4
 8009426:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009428:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800942a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800942c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800942e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009430:	eb0d 0105 	add.w	r1, sp, r5
 8009434:	4808      	ldr	r0, [pc, #32]	; (8009458 <HAL_SD_MspInit+0xb8>)
 8009436:	f7f9 fa09 	bl	800284c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 7, 0);
 800943a:	2200      	movs	r2, #0
 800943c:	2107      	movs	r1, #7
 800943e:	2031      	movs	r0, #49	; 0x31
 8009440:	f7f7 ff50 	bl	80012e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8009444:	2031      	movs	r0, #49	; 0x31
 8009446:	f7f7 ff7f 	bl	8001348 <HAL_NVIC_EnableIRQ>
}
 800944a:	e7b5      	b.n	80093b8 <HAL_SD_MspInit+0x18>
 800944c:	52007000 	.word	0x52007000
 8009450:	58024400 	.word	0x58024400
 8009454:	58020800 	.word	0x58020800
 8009458:	58020c00 	.word	0x58020c00

0800945c <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800945c:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 800945e:	4810      	ldr	r0, [pc, #64]	; (80094a0 <MX_SPI2_Init+0x44>)
 8009460:	4b10      	ldr	r3, [pc, #64]	; (80094a4 <MX_SPI2_Init+0x48>)
 8009462:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8009464:	2300      	movs	r3, #0
 8009466:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8009468:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800946a:	2207      	movs	r2, #7
 800946c:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800946e:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009470:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8009472:	6183      	str	r3, [r0, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009474:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8009476:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009478:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800947a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800947c:	6343      	str	r3, [r0, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800947e:	6383      	str	r3, [r0, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8009480:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8009482:	6403      	str	r3, [r0, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8009484:	6443      	str	r3, [r0, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8009486:	6483      	str	r3, [r0, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8009488:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800948a:	6503      	str	r3, [r0, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800948c:	6543      	str	r3, [r0, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800948e:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8009490:	f7fd fb3c 	bl	8006b0c <HAL_SPI_Init>
 8009494:	b900      	cbnz	r0, 8009498 <MX_SPI2_Init+0x3c>
  {
    Error_Handler();
  }

}
 8009496:	bd08      	pop	{r3, pc}
    Error_Handler();
 8009498:	f7ff fca4 	bl	8008de4 <Error_Handler>
}
 800949c:	e7fb      	b.n	8009496 <MX_SPI2_Init+0x3a>
 800949e:	bf00      	nop
 80094a0:	20015a84 	.word	0x20015a84
 80094a4:	40003800 	.word	0x40003800

080094a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80094a8:	b510      	push	{r4, lr}
 80094aa:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094ac:	2300      	movs	r3, #0
 80094ae:	9303      	str	r3, [sp, #12]
 80094b0:	9304      	str	r3, [sp, #16]
 80094b2:	9305      	str	r3, [sp, #20]
 80094b4:	9306      	str	r3, [sp, #24]
 80094b6:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 80094b8:	6802      	ldr	r2, [r0, #0]
 80094ba:	4b3d      	ldr	r3, [pc, #244]	; (80095b0 <HAL_SPI_MspInit+0x108>)
 80094bc:	429a      	cmp	r2, r3
 80094be:	d001      	beq.n	80094c4 <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80094c0:	b008      	add	sp, #32
 80094c2:	bd10      	pop	{r4, pc}
 80094c4:	4604      	mov	r4, r0
    __HAL_RCC_SPI2_CLK_ENABLE();
 80094c6:	4b3b      	ldr	r3, [pc, #236]	; (80095b4 <HAL_SPI_MspInit+0x10c>)
 80094c8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80094cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80094d0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80094d4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80094d8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80094dc:	9201      	str	r2, [sp, #4]
 80094de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80094e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80094e4:	f042 0202 	orr.w	r2, r2, #2
 80094e8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80094ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80094f0:	f003 0302 	and.w	r3, r3, #2
 80094f4:	9302      	str	r3, [sp, #8]
 80094f6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80094f8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80094fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094fe:	2302      	movs	r3, #2
 8009500:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009502:	2303      	movs	r3, #3
 8009504:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009506:	2305      	movs	r3, #5
 8009508:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800950a:	a903      	add	r1, sp, #12
 800950c:	482a      	ldr	r0, [pc, #168]	; (80095b8 <HAL_SPI_MspInit+0x110>)
 800950e:	f7f9 f99d 	bl	800284c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8009512:	482a      	ldr	r0, [pc, #168]	; (80095bc <HAL_SPI_MspInit+0x114>)
 8009514:	4b2a      	ldr	r3, [pc, #168]	; (80095c0 <HAL_SPI_MspInit+0x118>)
 8009516:	6003      	str	r3, [r0, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8009518:	2327      	movs	r3, #39	; 0x27
 800951a:	6043      	str	r3, [r0, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800951c:	2300      	movs	r3, #0
 800951e:	6083      	str	r3, [r0, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009520:	60c3      	str	r3, [r0, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009522:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009526:	6102      	str	r2, [r0, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009528:	6143      	str	r3, [r0, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800952a:	6183      	str	r3, [r0, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800952c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009530:	61c2      	str	r2, [r0, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8009532:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009536:	6202      	str	r2, [r0, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8009538:	2204      	movs	r2, #4
 800953a:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800953c:	2201      	movs	r2, #1
 800953e:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8009540:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8009542:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8009544:	f7f8 f984 	bl	8001850 <HAL_DMA_Init>
 8009548:	2800      	cmp	r0, #0
 800954a:	d12b      	bne.n	80095a4 <HAL_SPI_MspInit+0xfc>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800954c:	4b1b      	ldr	r3, [pc, #108]	; (80095bc <HAL_SPI_MspInit+0x114>)
 800954e:	67e3      	str	r3, [r4, #124]	; 0x7c
 8009550:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8009552:	481c      	ldr	r0, [pc, #112]	; (80095c4 <HAL_SPI_MspInit+0x11c>)
 8009554:	4b1c      	ldr	r3, [pc, #112]	; (80095c8 <HAL_SPI_MspInit+0x120>)
 8009556:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8009558:	2328      	movs	r3, #40	; 0x28
 800955a:	6043      	str	r3, [r0, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800955c:	2340      	movs	r3, #64	; 0x40
 800955e:	6083      	str	r3, [r0, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009560:	2300      	movs	r3, #0
 8009562:	60c3      	str	r3, [r0, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009564:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009568:	6102      	str	r2, [r0, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800956a:	6143      	str	r3, [r0, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800956c:	6183      	str	r3, [r0, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800956e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009572:	61c2      	str	r2, [r0, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8009574:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009578:	6202      	str	r2, [r0, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800957a:	2204      	movs	r2, #4
 800957c:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800957e:	2201      	movs	r2, #1
 8009580:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8009582:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8009584:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8009586:	f7f8 f963 	bl	8001850 <HAL_DMA_Init>
 800958a:	b970      	cbnz	r0, 80095aa <HAL_SPI_MspInit+0x102>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800958c:	4b0d      	ldr	r3, [pc, #52]	; (80095c4 <HAL_SPI_MspInit+0x11c>)
 800958e:	67a3      	str	r3, [r4, #120]	; 0x78
 8009590:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8009592:	2200      	movs	r2, #0
 8009594:	4611      	mov	r1, r2
 8009596:	2024      	movs	r0, #36	; 0x24
 8009598:	f7f7 fea4 	bl	80012e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800959c:	2024      	movs	r0, #36	; 0x24
 800959e:	f7f7 fed3 	bl	8001348 <HAL_NVIC_EnableIRQ>
}
 80095a2:	e78d      	b.n	80094c0 <HAL_SPI_MspInit+0x18>
      Error_Handler();
 80095a4:	f7ff fc1e 	bl	8008de4 <Error_Handler>
 80095a8:	e7d0      	b.n	800954c <HAL_SPI_MspInit+0xa4>
      Error_Handler();
 80095aa:	f7ff fc1b 	bl	8008de4 <Error_Handler>
 80095ae:	e7ed      	b.n	800958c <HAL_SPI_MspInit+0xe4>
 80095b0:	40003800 	.word	0x40003800
 80095b4:	58024400 	.word	0x58024400
 80095b8:	58020400 	.word	0x58020400
 80095bc:	20015b0c 	.word	0x20015b0c
 80095c0:	40020058 	.word	0x40020058
 80095c4:	20015b84 	.word	0x20015b84
 80095c8:	40020070 	.word	0x40020070

080095cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80095cc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80095ce:	4b07      	ldr	r3, [pc, #28]	; (80095ec <HAL_MspInit+0x20>)
 80095d0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80095d4:	f042 0202 	orr.w	r2, r2, #2
 80095d8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80095dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80095e0:	f003 0302 	and.w	r3, r3, #2
 80095e4:	9301      	str	r3, [sp, #4]
 80095e6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80095e8:	b002      	add	sp, #8
 80095ea:	4770      	bx	lr
 80095ec:	58024400 	.word	0x58024400

080095f0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80095f0:	4770      	bx	lr

080095f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80095f2:	e7fe      	b.n	80095f2 <HardFault_Handler>

080095f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80095f4:	e7fe      	b.n	80095f4 <MemManage_Handler>

080095f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80095f6:	e7fe      	b.n	80095f6 <BusFault_Handler>

080095f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80095f8:	e7fe      	b.n	80095f8 <UsageFault_Handler>

080095fa <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80095fa:	4770      	bx	lr

080095fc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80095fc:	4770      	bx	lr

080095fe <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80095fe:	4770      	bx	lr

08009600 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009600:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009602:	f7f6 ffcd 	bl	80005a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009606:	bd08      	pop	{r3, pc}

08009608 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8009608:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800960a:	4802      	ldr	r0, [pc, #8]	; (8009614 <DMA1_Stream0_IRQHandler+0xc>)
 800960c:	f7f8 fd80 	bl	8002110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8009610:	bd08      	pop	{r3, pc}
 8009612:	bf00      	nop
 8009614:	200001c4 	.word	0x200001c4

08009618 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8009618:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800961a:	4802      	ldr	r0, [pc, #8]	; (8009624 <DMA1_Stream1_IRQHandler+0xc>)
 800961c:	f7f8 fd78 	bl	8002110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8009620:	bd08      	pop	{r3, pc}
 8009622:	bf00      	nop
 8009624:	2001587c 	.word	0x2001587c

08009628 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8009628:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800962a:	4802      	ldr	r0, [pc, #8]	; (8009634 <DMA1_Stream2_IRQHandler+0xc>)
 800962c:	f7f8 fd70 	bl	8002110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8009630:	bd08      	pop	{r3, pc}
 8009632:	bf00      	nop
 8009634:	200158f4 	.word	0x200158f4

08009638 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8009638:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800963a:	4802      	ldr	r0, [pc, #8]	; (8009644 <DMA1_Stream3_IRQHandler+0xc>)
 800963c:	f7f8 fd68 	bl	8002110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8009640:	bd08      	pop	{r3, pc}
 8009642:	bf00      	nop
 8009644:	20015b0c 	.word	0x20015b0c

08009648 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8009648:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800964a:	4802      	ldr	r0, [pc, #8]	; (8009654 <DMA1_Stream4_IRQHandler+0xc>)
 800964c:	f7f8 fd60 	bl	8002110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8009650:	bd08      	pop	{r3, pc}
 8009652:	bf00      	nop
 8009654:	20015b84 	.word	0x20015b84

08009658 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8009658:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800965a:	4802      	ldr	r0, [pc, #8]	; (8009664 <SPI2_IRQHandler+0xc>)
 800965c:	f7fd fc84 	bl	8006f68 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8009660:	bd08      	pop	{r3, pc}
 8009662:	bf00      	nop
 8009664:	20015a84 	.word	0x20015a84

08009668 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8009668:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800966a:	4802      	ldr	r0, [pc, #8]	; (8009674 <SDMMC1_IRQHandler+0xc>)
 800966c:	f7fd f862 	bl	8006734 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8009670:	bd08      	pop	{r3, pc}
 8009672:	bf00      	nop
 8009674:	20015a04 	.word	0x20015a04

08009678 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009678:	4a18      	ldr	r2, [pc, #96]	; (80096dc <SystemInit+0x64>)
 800967a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800967e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009682:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8009686:	4b16      	ldr	r3, [pc, #88]	; (80096e0 <SystemInit+0x68>)
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	f042 0201 	orr.w	r2, r2, #1
 800968e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009690:	2200      	movs	r2, #0
 8009692:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8009694:	6818      	ldr	r0, [r3, #0]
 8009696:	4913      	ldr	r1, [pc, #76]	; (80096e4 <SystemInit+0x6c>)
 8009698:	4001      	ands	r1, r0
 800969a:	6019      	str	r1, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800969c:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800969e:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80096a0:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80096a2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80096a4:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80096a6:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80096a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80096aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80096ac:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80096ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80096b0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80096b2:	6819      	ldr	r1, [r3, #0]
 80096b4:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80096b8:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80096ba:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80096bc:	4b0a      	ldr	r3, [pc, #40]	; (80096e8 <SystemInit+0x70>)
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	4b0a      	ldr	r3, [pc, #40]	; (80096ec <SystemInit+0x74>)
 80096c2:	4013      	ands	r3, r2
 80096c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096c8:	d202      	bcs.n	80096d0 <SystemInit+0x58>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80096ca:	4b09      	ldr	r3, [pc, #36]	; (80096f0 <SystemInit+0x78>)
 80096cc:	2201      	movs	r2, #1
 80096ce:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80096d0:	4b02      	ldr	r3, [pc, #8]	; (80096dc <SystemInit+0x64>)
 80096d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80096d6:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	e000ed00 	.word	0xe000ed00
 80096e0:	58024400 	.word	0x58024400
 80096e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80096e8:	5c001000 	.word	0x5c001000
 80096ec:	ffff0000 	.word	0xffff0000
 80096f0:	51008108 	.word	0x51008108

080096f4 <tPluckDetectorInt_initToPool>:
void    tPluckDetectorInt_init          (tPluckDetectorInt* const pd, LEAF* const leaf)
{
    tPluckDetectorInt_initToPool(pd, &leaf->mempool);
}
void    tPluckDetectorInt_initToPool    (tPluckDetectorInt* const pd, tMempool* const mp)
{
 80096f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f6:	4607      	mov	r7, r0
 80096f8:	460e      	mov	r6, r1
    _tMempool* m = *mp;
 80096fa:	680d      	ldr	r5, [r1, #0]
    _tPluckDetectorInt* p = *pd = (_tPluckDetectorInt*) mpool_alloc(sizeof(_tPluckDetectorInt), m);
 80096fc:	4629      	mov	r1, r5
 80096fe:	20d8      	movs	r0, #216	; 0xd8
 8009700:	f000 ff97 	bl	800a632 <mpool_alloc>
 8009704:	4604      	mov	r4, r0
 8009706:	6038      	str	r0, [r7, #0]
    p->mempool = m;
 8009708:	6005      	str	r5, [r0, #0]

	//INITIALIZE VARIABLES
	p->current_dir = 1;
 800970a:	2201      	movs	r2, #1
 800970c:	6102      	str	r2, [r0, #16]
	p->envelope_min = 0;//maybe could be 32 bit?
 800970e:	2300      	movs	r3, #0
 8009710:	6143      	str	r3, [r0, #20]
	p->envelope_max = 65535;//maybe could be 32 bit?
 8009712:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009716:	6181      	str	r1, [r0, #24]
	p->prior_smoothed = 0;
 8009718:	61c3      	str	r3, [r0, #28]
	p->prior_super_smoothed = 0;
 800971a:	6203      	str	r3, [r0, #32]
	p->prior_super_smoothed_dir = 1;
 800971c:	6242      	str	r2, [r0, #36]	; 0x24
	for (int i = 0; i < 3; i++)
 800971e:	e005      	b.n	800972c <tPluckDetectorInt_initToPool+0x38>
	{
		p->prior_dirs[i] = 1;
 8009720:	f103 020a 	add.w	r2, r3, #10
 8009724:	2101      	movs	r1, #1
 8009726:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (int i = 0; i < 3; i++)
 800972a:	440b      	add	r3, r1
 800972c:	2b02      	cmp	r3, #2
 800972e:	ddf7      	ble.n	8009720 <tPluckDetectorInt_initToPool+0x2c>
	}
	for (int i = 0; i < 5; i++)
 8009730:	2300      	movs	r3, #0
 8009732:	e00a      	b.n	800974a <tPluckDetectorInt_initToPool+0x56>
	{
		p->prior_changepoints_index[i] = 0;//
 8009734:	f103 020c 	add.w	r2, r3, #12
 8009738:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800973c:	2100      	movs	r1, #0
 800973e:	6051      	str	r1, [r2, #4]
		p->prior_changepoints_value[i] = 0;//
 8009740:	f103 0212 	add.w	r2, r3, #18
 8009744:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (int i = 0; i < 5; i++)
 8009748:	3301      	adds	r3, #1
 800974a:	2b04      	cmp	r3, #4
 800974c:	ddf2      	ble.n	8009734 <tPluckDetectorInt_initToPool+0x40>
	}

	p->prior_detect_1_index = 0;
 800974e:	2500      	movs	r5, #0
 8009750:	65e5      	str	r5, [r4, #92]	; 0x5c
	p->prior_detect_1_value = 0;
 8009752:	6625      	str	r5, [r4, #96]	; 0x60
	p->prior_detect_2_index = 0;
 8009754:	6665      	str	r5, [r4, #100]	; 0x64
	p->prior_detect_2_value = 0;
 8009756:	66a5      	str	r5, [r4, #104]	; 0x68
	p->prior_detect_3_index = 0;
 8009758:	66e5      	str	r5, [r4, #108]	; 0x6c
	p->prior_detect_3_value = 0;
 800975a:	6725      	str	r5, [r4, #112]	; 0x70
	p->midpoint_estimate = 48552;
 800975c:	f64b 53a8 	movw	r3, #48552	; 0xbda8
 8009760:	6763      	str	r3, [r4, #116]	; 0x74
	p->is_midpoint_calculated = 0;
 8009762:	67a5      	str	r5, [r4, #120]	; 0x78
	p->delay_since_last_detect = 0;
 8009764:	67e5      	str	r5, [r4, #124]	; 0x7c
	p->dir_count = 0;
 8009766:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	p->ready_for_pluck = 1;
 800976a:	2301      	movs	r3, #1
 800976c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	p->Pindex = 1;
 8009770:	2201      	movs	r2, #1
 8009772:	2300      	movs	r3, #0
 8009774:	e9c4 2322 	strd	r2, r3, [r4, #136]	; 0x88
	p->totalNumChangepoints = 0;
 8009778:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90

	p->smoothed = 0;//Mean of the last [SMOOTHING_WINDOW] samples
 800977c:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
	p->smoothedAccum = 0;
 8009780:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
	p->super_smoothed = 0;//Mean of the last [SUPER_SMOOTHING_WINDOW] smoothed values
 8009784:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
	p->super_smoothedAccum = 0;
 8009788:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0

	p->pluck_strength = 0;
 800978c:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4

	p->smoothing_window = 16;
 8009790:	2110      	movs	r1, #16
 8009792:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
    p->super_smoothing_window = 128;
 8009796:	2380      	movs	r3, #128	; 0x80
 8009798:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    p->minmax_window = 16;
 800979c:	f8c4 10c8 	str.w	r1, [r4, #200]	; 0xc8

    tRingBufferInt_initToPool(&p->smoothed_array, p->smoothing_window, mp);
 80097a0:	4632      	mov	r2, r6
 80097a2:	1d20      	adds	r0, r4, #4
 80097a4:	f000 fa5c 	bl	8009c60 <tRingBufferInt_initToPool>

	tRingBufferInt_initToPool(&p->super_smoothed_array, p->super_smoothing_window, mp);
 80097a8:	4632      	mov	r2, r6
 80097aa:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 80097ae:	f104 0008 	add.w	r0, r4, #8
 80097b2:	f000 fa55 	bl	8009c60 <tRingBufferInt_initToPool>

	tRingBufferInt_initToPool(&p->minmax_samples, p->minmax_window, mp);
 80097b6:	4632      	mov	r2, r6
 80097b8:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 80097bc:	f104 000c 	add.w	r0, r4, #12
 80097c0:	f000 fa4e 	bl	8009c60 <tRingBufferInt_initToPool>

	p->min_recent_value = 0;
 80097c4:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
	p->max_recent_value = 0;
 80097c8:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
    p->max_samples_still_same_pluck = 400; //400
 80097cc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80097d0:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    p->max_var_diff_width = 10000;
 80097d4:	f242 7310 	movw	r3, #10000	; 0x2710
 80097d8:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    p->max_width_is_resonating = 1000;
 80097dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80097e0:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    p->max_ratio_value_diffs = 0.2f;
 80097e4:	4b05      	ldr	r3, [pc, #20]	; (80097fc <tPluckDetectorInt_initToPool+0x108>)
 80097e6:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    p->min_value_spread = 500; //500
 80097ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80097ee:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    p->min_same_direction_steps = 150; //150
 80097f2:	2396      	movs	r3, #150	; 0x96
 80097f4:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc

}
 80097f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097fa:	bf00      	nop
 80097fc:	3e4ccccd 	.word	0x3e4ccccd

08009800 <tPluckDetectorInt_tick>:
    mpool_free((char*)p, p->mempool);
}


int   tPluckDetectorInt_tick          (tPluckDetectorInt* const pd, int input)
{
 8009800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009804:	b08b      	sub	sp, #44	; 0x2c
 8009806:	460d      	mov	r5, r1
	 _tPluckDetectorInt* p = *pd;
 8009808:	6804      	ldr	r4, [r0, #0]

	int pluckHappened = -1;

	//update smoothed for current sample
	tRingBufferInt_push(&p->smoothed_array, input);
 800980a:	1d26      	adds	r6, r4, #4
 800980c:	4630      	mov	r0, r6
 800980e:	f000 fa5b 	bl	8009cc8 <tRingBufferInt_push>

	//get the smoothed mean of that array
	int oldSmoothed = tRingBufferInt_getOldest(&p->smoothed_array);
 8009812:	4630      	mov	r0, r6
 8009814:	f000 fa62 	bl	8009cdc <tRingBufferInt_getOldest>
	p->smoothedAccum -= oldSmoothed;
 8009818:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800981c:	1a09      	subs	r1, r1, r0
	p->smoothedAccum += input;
 800981e:	4429      	add	r1, r5
 8009820:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	p->smoothed = p->smoothedAccum / p->smoothing_window; // divide by 16
 8009824:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8009828:	fbb1 f1f0 	udiv	r1, r1, r0
 800982c:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94


	//update super_smoothed for current sample
	tRingBufferInt_push(&p->super_smoothed_array, p->smoothed); //is this right? should be smoothed and not input, correct?
 8009830:	f104 0508 	add.w	r5, r4, #8
 8009834:	4628      	mov	r0, r5
 8009836:	f000 fa47 	bl	8009cc8 <tRingBufferInt_push>

	//get the smoothed mean of that array
	int oldSuperSmoothed = tRingBufferInt_getOldest(&p->super_smoothed_array);
 800983a:	4628      	mov	r0, r5
 800983c:	f000 fa4e 	bl	8009cdc <tRingBufferInt_getOldest>
	p->super_smoothedAccum -= oldSuperSmoothed;
 8009840:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8009844:	1a18      	subs	r0, r3, r0
	p->super_smoothedAccum += p->smoothed;
 8009846:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800984a:	4408      	add	r0, r1
 800984c:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	p->super_smoothed = p->super_smoothedAccum / p->super_smoothing_window; // divide by 128
 8009850:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8009854:	fbb0 f0f3 	udiv	r0, r0, r3
 8009858:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c


	//### Collect a new data point every MINMAX_INCREMENTS_BETWEEN_SAMPLES steps,
	//### and collect the current min and max values within this loop since they won't change until the next update
	if ((p->Pindex % 32) == 0) //maybe have this update as a separate function to avoid the branch every sample?
 800985c:	e9d4 5622 	ldrd	r5, r6, [r4, #136]	; 0x88
 8009860:	f005 021f 	and.w	r2, r5, #31
 8009864:	2300      	movs	r3, #0
 8009866:	4313      	orrs	r3, r2
 8009868:	d00b      	beq.n	8009882 <tPluckDetectorInt_tick+0x82>
			}
			p->max_recent_value = tempMax1;
			p->min_recent_value = tempMin1;
	}

	int outside_envelope = (( p->min_recent_value < p->envelope_min) || (p->max_recent_value > p->envelope_max ));   //# Logical: TRUE/FALSE
 800986a:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
 800986e:	6963      	ldr	r3, [r4, #20]
 8009870:	429a      	cmp	r2, r3
 8009872:	d325      	bcc.n	80098c0 <tPluckDetectorInt_tick+0xc0>
 8009874:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
 8009878:	69a3      	ldr	r3, [r4, #24]
 800987a:	429a      	cmp	r2, r3
 800987c:	d947      	bls.n	800990e <tPluckDetectorInt_tick+0x10e>
 800987e:	2501      	movs	r5, #1
 8009880:	e01f      	b.n	80098c2 <tPluckDetectorInt_tick+0xc2>
			tRingBufferInt_push(&p->minmax_samples, p->smoothed);
 8009882:	f104 080c 	add.w	r8, r4, #12
 8009886:	4640      	mov	r0, r8
 8009888:	f000 fa1e 	bl	8009cc8 <tRingBufferInt_push>
			for (int i = 0; i < p->minmax_window; i++)
 800988c:	2500      	movs	r5, #0
			int tempMax1 = 0;
 800988e:	462f      	mov	r7, r5
			int tempMin1 = 65535;
 8009890:	f64f 76ff 	movw	r6, #65535	; 0xffff
			for (int i = 0; i < p->minmax_window; i++)
 8009894:	e000      	b.n	8009898 <tPluckDetectorInt_tick+0x98>
 8009896:	3501      	adds	r5, #1
 8009898:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 800989c:	42ab      	cmp	r3, r5
 800989e:	dd0a      	ble.n	80098b6 <tPluckDetectorInt_tick+0xb6>
				int tempSample = tRingBufferInt_get(&p->minmax_samples, i);
 80098a0:	4629      	mov	r1, r5
 80098a2:	4640      	mov	r0, r8
 80098a4:	f000 fa25 	bl	8009cf2 <tRingBufferInt_get>
				if (tempSample > tempMax1)
 80098a8:	4287      	cmp	r7, r0
 80098aa:	da00      	bge.n	80098ae <tPluckDetectorInt_tick+0xae>
					tempMax1 = tempSample;
 80098ac:	4607      	mov	r7, r0
				if (tempSample < tempMin1)
 80098ae:	4286      	cmp	r6, r0
 80098b0:	ddf1      	ble.n	8009896 <tPluckDetectorInt_tick+0x96>
					tempMin1 = tempSample;
 80098b2:	4606      	mov	r6, r0
 80098b4:	e7ef      	b.n	8009896 <tPluckDetectorInt_tick+0x96>
			p->max_recent_value = tempMax1;
 80098b6:	f8c4 70d0 	str.w	r7, [r4, #208]	; 0xd0
			p->min_recent_value = tempMin1;
 80098ba:	f8c4 60cc 	str.w	r6, [r4, #204]	; 0xcc
 80098be:	e7d4      	b.n	800986a <tPluckDetectorInt_tick+0x6a>
	int outside_envelope = (( p->min_recent_value < p->envelope_min) || (p->max_recent_value > p->envelope_max ));   //# Logical: TRUE/FALSE
 80098c0:	2501      	movs	r5, #1
	//COLLECT THE DIRECTION OF MOVEMENT FOR SUPER-SMOOTHED SEQUENCE (FOR DETECTING IF READY FOR NEXT PLUCK)
	//Here we're basically counting how many times we've taken consecutive steps in the same direction
	//If we move in a different direction (up or down) then it resets
	//This is helpful for detecting that movement up or down right at the start of a pluck signal

	int super_smoothed_dir = LEAF_sign(p->super_smoothed - p->prior_super_smoothed);
 80098c2:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 80098c6:	6a23      	ldr	r3, [r4, #32]
 80098c8:	1ac0      	subs	r0, r0, r3
 80098ca:	f000 fe43 	bl	800a554 <LEAF_sign>
	if (super_smoothed_dir != p->prior_super_smoothed_dir)
 80098ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098d0:	4283      	cmp	r3, r0
 80098d2:	d01e      	beq.n	8009912 <tPluckDetectorInt_tick+0x112>
	{
		p->dir_count = 0;
 80098d4:	2300      	movs	r3, #0
 80098d6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	//CHECK IF WE SEE THE SIGNS THAT WE ARE READY FOR NEXT PLUCK
	//We are ready for a new pluck if we've both:
	//(1) seen enough steps in same direction, and
	//(2) moved outside our current envelope

	if (p->ready_for_pluck==0)
 80098da:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80098de:	b933      	cbnz	r3, 80098ee <tPluckDetectorInt_tick+0xee>
	{
		if ((p->dir_count > p->min_same_direction_steps) && (outside_envelope == 1))
 80098e0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80098e4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80098e8:	429a      	cmp	r2, r3
 80098ea:	dd00      	ble.n	80098ee <tPluckDetectorInt_tick+0xee>
 80098ec:	b9bd      	cbnz	r5, 800991e <tPluckDetectorInt_tick+0x11e>
			p->ready_for_pluck = 1;
		}
	}

	//COLLECT THE DIRECTION OF MOVEMENT FOR SMOOTHED SEQUENCE (FOR CHANGEPOINT DETECTION)
	int direction = LEAF_sign(p->smoothed-p->prior_smoothed);
 80098ee:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 80098f2:	69e3      	ldr	r3, [r4, #28]
 80098f4:	1ac0      	subs	r0, r0, r3
 80098f6:	f000 fe2d 	bl	800a554 <LEAF_sign>
	//prior_dirs = c(prior_dirs[-1],direction); //Update by removing first element and adding new value to end
	p->prior_dirs[0] = p->prior_dirs[1];
 80098fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80098fc:	62a3      	str	r3, [r4, #40]	; 0x28
	p->prior_dirs[1] = p->prior_dirs[2];
 80098fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009900:	62e3      	str	r3, [r4, #44]	; 0x2c
	p->prior_dirs[2] = direction;
 8009902:	6320      	str	r0, [r4, #48]	; 0x30
	// 		(1) Several consistent steps all up (or all down) in sequence, and then suddenly a change
	// 		(2) There is enough overall vertical movement in the recent samples

	int tempMin2 = 1;
	int tempMax2 = -1;
	for (int i = 0; i < 3; i++)
 8009904:	2300      	movs	r3, #0
	int tempMax2 = -1;
 8009906:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	int tempMin2 = 1;
 800990a:	2101      	movs	r1, #1
	for (int i = 0; i < 3; i++)
 800990c:	e00c      	b.n	8009928 <tPluckDetectorInt_tick+0x128>
	int outside_envelope = (( p->min_recent_value < p->envelope_min) || (p->max_recent_value > p->envelope_max ));   //# Logical: TRUE/FALSE
 800990e:	2500      	movs	r5, #0
 8009910:	e7d7      	b.n	80098c2 <tPluckDetectorInt_tick+0xc2>
		p->dir_count = p->dir_count + 1;
 8009912:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8009916:	3301      	adds	r3, #1
 8009918:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800991c:	e7dd      	b.n	80098da <tPluckDetectorInt_tick+0xda>
			p->ready_for_pluck = 1;
 800991e:	2301      	movs	r3, #1
 8009920:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8009924:	e7e3      	b.n	80098ee <tPluckDetectorInt_tick+0xee>
	for (int i = 0; i < 3; i++)
 8009926:	3301      	adds	r3, #1
 8009928:	2b02      	cmp	r3, #2
 800992a:	dc0a      	bgt.n	8009942 <tPluckDetectorInt_tick+0x142>
	{
		if (p->prior_dirs[i] < tempMin2)
 800992c:	f103 020a 	add.w	r2, r3, #10
 8009930:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009934:	428a      	cmp	r2, r1
 8009936:	da00      	bge.n	800993a <tPluckDetectorInt_tick+0x13a>
		{
			tempMin2 = p->prior_dirs[i];
 8009938:	4611      	mov	r1, r2
		}
		if (p->prior_dirs[i] > tempMax2)
 800993a:	42aa      	cmp	r2, r5
 800993c:	ddf3      	ble.n	8009926 <tPluckDetectorInt_tick+0x126>
		{
			tempMax2 = p->prior_dirs[i];
 800993e:	4615      	mov	r5, r2
 8009940:	e7f1      	b.n	8009926 <tPluckDetectorInt_tick+0x126>
		}
	}
	if (((p->current_dir == 1) && (tempMax2 == -1)) || ((p->current_dir == -1) && (tempMin2 == 1)))
 8009942:	6920      	ldr	r0, [r4, #16]
 8009944:	2801      	cmp	r0, #1
 8009946:	f000 808b 	beq.w	8009a60 <tPluckDetectorInt_tick+0x260>
 800994a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800994e:	f040 817c 	bne.w	8009c4a <tPluckDetectorInt_tick+0x44a>
 8009952:	2901      	cmp	r1, #1
 8009954:	f040 8149 	bne.w	8009bea <tPluckDetectorInt_tick+0x3ea>
	{
		//UPDATE THE DIRECTION THAT WE'll BE COMPARING AGAINST NEXT TIME
		p->current_dir = -p->current_dir;
 8009958:	4240      	negs	r0, r0
 800995a:	6120      	str	r0, [r4, #16]

		if (p->totalNumChangepoints < 5)
 800995c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009960:	2b04      	cmp	r3, #4
 8009962:	dc02      	bgt.n	800996a <tPluckDetectorInt_tick+0x16a>
		{
			p->totalNumChangepoints++;
 8009964:	3301      	adds	r3, #1
 8009966:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		}

		//UPDATE VECTORS THAT STORE THE LAST 5 CHANGEPOINTS

		p->prior_changepoints_index[0] = p->prior_changepoints_index[1];
 800996a:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800996c:	6367      	str	r7, [r4, #52]	; 0x34
		p->prior_changepoints_index[1] = p->prior_changepoints_index[2];
 800996e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009970:	63a2      	str	r2, [r4, #56]	; 0x38
		p->prior_changepoints_index[2] = p->prior_changepoints_index[3];
 8009972:	6c26      	ldr	r6, [r4, #64]	; 0x40
 8009974:	63e6      	str	r6, [r4, #60]	; 0x3c
		p->prior_changepoints_index[3] = p->prior_changepoints_index[4];
 8009976:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009978:	6423      	str	r3, [r4, #64]	; 0x40
		p->prior_changepoints_index[4] = p->Pindex;
 800997a:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 800997e:	6465      	str	r5, [r4, #68]	; 0x44


		p->prior_changepoints_value[0] = p->prior_changepoints_value[1];
 8009980:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009982:	64a1      	str	r1, [r4, #72]	; 0x48
		p->prior_changepoints_value[1] = p->prior_changepoints_value[2];
 8009984:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009986:	64e1      	str	r1, [r4, #76]	; 0x4c
		p->prior_changepoints_value[2] = p->prior_changepoints_value[3];
 8009988:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800998a:	6521      	str	r1, [r4, #80]	; 0x50
		p->prior_changepoints_value[3] = p->prior_changepoints_value[4];
 800998c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800998e:	6561      	str	r1, [r4, #84]	; 0x54
		p->prior_changepoints_value[4] = p->smoothed;
 8009990:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8009994:	65a1      	str	r1, [r4, #88]	; 0x58


		//ONCE THERE HAVE BEEN AT LEAST THREE CHANGEPOINTS
		//I'm doing this as 5 so I don't need to check any NULL values
	    if (p->totalNumChangepoints >= 5)
 8009996:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800999a:	2904      	cmp	r1, #4
 800999c:	f340 8158 	ble.w	8009c50 <tPluckDetectorInt_tick+0x450>

	    	//COMPUTE NUMBER OF SAMPLES BETWEEN EACH CHANGEPOINT
			//### 	Eg. if prior_changepoints_index = [NULL,NULL,40,60,90] then
			//###		width_differences = [NULL,NULL,20,30]
	    	int width_differences[4];
	    	width_differences[0] = p->prior_changepoints_index[1] - p->prior_changepoints_index[0];
 80099a0:	1bd7      	subs	r7, r2, r7
 80099a2:	9701      	str	r7, [sp, #4]
	    	width_differences[1] = p->prior_changepoints_index[2] - p->prior_changepoints_index[1];
 80099a4:	eba6 0802 	sub.w	r8, r6, r2
 80099a8:	f8cd 8008 	str.w	r8, [sp, #8]
	    	width_differences[2] = p->prior_changepoints_index[3] - p->prior_changepoints_index[2];
 80099ac:	1b9e      	subs	r6, r3, r6
 80099ae:	9603      	str	r6, [sp, #12]
	    	width_differences[3] = p->prior_changepoints_index[4] - p->prior_changepoints_index[3];
 80099b0:	1aed      	subs	r5, r5, r3
 80099b2:	9504      	str	r5, [sp, #16]

			//### COMPUTE THE VALUE DEVIATIONS FROM THE MIDPOINT (ONLY IF THE MIDPOINT IS NON-NULL)
			//### 	Eg. if prior_changepoints_value = [NULL,NULL,100,200,300] and midpoint_estimate = 150
			//###     	then dirs_from_midpoint = [NULL,NULL,-1,1,1]
	    	int dirs_from_midpoint[5];
	    	if (p->is_midpoint_calculated == 1)
 80099b4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d06a      	beq.n	8009a90 <tPluckDetectorInt_tick+0x290>
	    		{
	    			dirs_from_midpoint[i] = LEAF_sign(p->prior_changepoints_value[i] - p->midpoint_estimate);
	    		}
	    	}
			//### ASSEMBLE STATISTICS RELATED TO A 3-POINT PATTERN (UP/DOWN/UP or vice versa)
	    	int tempZeroCheck = abs(p->prior_changepoints_value[4] - p->prior_changepoints_value[3]);
 80099ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80099bc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80099be:	eba3 0c02 	sub.w	ip, r3, r2
 80099c2:	f1bc 0f00 	cmp.w	ip, #0
 80099c6:	bfb8      	it	lt
 80099c8:	f1cc 0c00 	rsblt	ip, ip, #0
	    	if (tempZeroCheck == 0)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d062      	beq.n	8009a96 <tPluckDetectorInt_tick+0x296>
	    	int tempZeroCheck = abs(p->prior_changepoints_value[4] - p->prior_changepoints_value[3]);
 80099d0:	ee07 ca10 	vmov	s14, ip
	    	{
	    		tempZeroCheck = 1; //prevent divide by zero
	    	}
			float ratio_value_diffs_1 = ((float)abs(p->prior_changepoints_value[4] - p->prior_changepoints_value[2])) / (float)tempZeroCheck;
 80099d4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80099d6:	1a9a      	subs	r2, r3, r2
 80099d8:	2a00      	cmp	r2, #0
 80099da:	bfb8      	it	lt
 80099dc:	4252      	neglt	r2, r2
 80099de:	ee07 2a90 	vmov	s15, r2
 80099e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80099ea:	ee87 6a87 	vdiv.f32	s12, s15, s14
			int spread_value_1 = abs(p->prior_changepoints_value[4] - p->prior_changepoints_value[3]);
			int falls_about_midpoint_1 = 1;
			if (p->is_midpoint_calculated == 1) //if you've got a valid midpoint, then calculate this
 80099ee:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80099f0:	2901      	cmp	r1, #1
 80099f2:	d053      	beq.n	8009a9c <tPluckDetectorInt_tick+0x29c>
			int falls_about_midpoint_1 = 1;
 80099f4:	2001      	movs	r0, #1
			{
				falls_about_midpoint_1 = ((dirs_from_midpoint[2] == dirs_from_midpoint[4]) && (dirs_from_midpoint[3] != dirs_from_midpoint[4]));
			}

			float ratio_value_diffs_2 = ((float)abs(p->prior_changepoints_value[4] - p->prior_changepoints_value[0])) / (float)tempZeroCheck;
 80099f6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80099f8:	1a9b      	subs	r3, r3, r2
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	bfb8      	it	lt
 80099fe:	425b      	neglt	r3, r3
 8009a00:	ee07 3a90 	vmov	s15, r3
 8009a04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a08:	eec7 6a87 	vdiv.f32	s13, s15, s14
			int spread_value_2 = abs(p->prior_changepoints_value[0] - p->prior_changepoints_value[1]);
 8009a0c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009a0e:	1ad2      	subs	r2, r2, r3
 8009a10:	2a00      	cmp	r2, #0
 8009a12:	bfb8      	it	lt
 8009a14:	4252      	neglt	r2, r2
			int falls_about_midpoint_2 = 1;
			if (p->is_midpoint_calculated == 1) //if you've got a valid midpoint, then calculate this
 8009a16:	2901      	cmp	r1, #1
 8009a18:	d04d      	beq.n	8009ab6 <tPluckDetectorInt_tick+0x2b6>
			int falls_about_midpoint_2 = 1;
 8009a1a:	2101      	movs	r1, #1
			//### NOTE: var() here means the "sample variance". Tell me if you need help with it.
			//### See link: https://www.mathsisfun.com/data/standard-deviation.html

			//compute var of width differences using just elements [2] and [3]
			//first take the mean
			int tempMean = (width_differences[2] + width_differences[3]) / 2; //divide by 2
 8009a1c:	1973      	adds	r3, r6, r5
 8009a1e:	d45c      	bmi.n	8009ada <tPluckDetectorInt_tick+0x2da>
 8009a20:	105b      	asrs	r3, r3, #1
			int tempVar1 = width_differences[2] - tempMean;
 8009a22:	eba6 0e03 	sub.w	lr, r6, r3
			int tempVar2 = width_differences[3] - tempMean;
 8009a26:	1aeb      	subs	r3, r5, r3
			int tempVariance = ((tempVar1 * tempVar1) + (tempVar2 * tempVar2));
 8009a28:	fb03 f303 	mul.w	r3, r3, r3
 8009a2c:	fb0e 390e 	mla	r9, lr, lr, r3

			int tempMax3 = width_differences[2];
			if (width_differences[3] > tempMax3)
 8009a30:	42ae      	cmp	r6, r5
 8009a32:	db54      	blt.n	8009ade <tPluckDetectorInt_tick+0x2de>
			int tempMax3 = width_differences[2];
 8009a34:	46b6      	mov	lr, r6
			{
				tempMax3 = width_differences[3];
			}

			int firstTest = (ratio_value_diffs_1 < p->max_ratio_value_diffs) && (spread_value_1 > p->min_value_spread) && (tempVariance < p->max_var_diff_width) && (tempMax3 < p->max_width_is_resonating) && (falls_about_midpoint_1 == 1);
 8009a36:	edd4 7a2d 	vldr	s15, [r4, #180]	; 0xb4
 8009a3a:	eef4 7ac6 	vcmpe.f32	s15, s12
 8009a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a42:	dd4e      	ble.n	8009ae2 <tPluckDetectorInt_tick+0x2e2>
 8009a44:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8009a48:	4563      	cmp	r3, ip
 8009a4a:	da66      	bge.n	8009b1a <tPluckDetectorInt_tick+0x31a>
 8009a4c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8009a50:	454b      	cmp	r3, r9
 8009a52:	dd64      	ble.n	8009b1e <tPluckDetectorInt_tick+0x31e>
 8009a54:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8009a58:	4573      	cmp	r3, lr
 8009a5a:	dc43      	bgt.n	8009ae4 <tPluckDetectorInt_tick+0x2e4>
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	e041      	b.n	8009ae4 <tPluckDetectorInt_tick+0x2e4>
	if (((p->current_dir == 1) && (tempMax2 == -1)) || ((p->current_dir == -1) && (tempMin2 == 1)))
 8009a60:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8009a64:	f47f af71 	bne.w	800994a <tPluckDetectorInt_tick+0x14a>
 8009a68:	e776      	b.n	8009958 <tPluckDetectorInt_tick+0x158>
	    			dirs_from_midpoint[i] = LEAF_sign(p->prior_changepoints_value[i] - p->midpoint_estimate);
 8009a6a:	f109 0312 	add.w	r3, r9, #18
 8009a6e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8009a72:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009a74:	1ac0      	subs	r0, r0, r3
 8009a76:	f000 fd6d 	bl	800a554 <LEAF_sign>
 8009a7a:	ab0a      	add	r3, sp, #40	; 0x28
 8009a7c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8009a80:	f843 0c14 	str.w	r0, [r3, #-20]
	    		for (int i = 0; i < 5; i++)
 8009a84:	f109 0901 	add.w	r9, r9, #1
 8009a88:	f1b9 0f04 	cmp.w	r9, #4
 8009a8c:	dded      	ble.n	8009a6a <tPluckDetectorInt_tick+0x26a>
 8009a8e:	e794      	b.n	80099ba <tPluckDetectorInt_tick+0x1ba>
 8009a90:	f04f 0900 	mov.w	r9, #0
 8009a94:	e7f8      	b.n	8009a88 <tPluckDetectorInt_tick+0x288>
	    		tempZeroCheck = 1; //prevent divide by zero
 8009a96:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8009c58 <tPluckDetectorInt_tick+0x458>
 8009a9a:	e79b      	b.n	80099d4 <tPluckDetectorInt_tick+0x1d4>
				falls_about_midpoint_1 = ((dirs_from_midpoint[2] == dirs_from_midpoint[4]) && (dirs_from_midpoint[3] != dirs_from_midpoint[4]));
 8009a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a9e:	9a07      	ldr	r2, [sp, #28]
 8009aa0:	4282      	cmp	r2, r0
 8009aa2:	d001      	beq.n	8009aa8 <tPluckDetectorInt_tick+0x2a8>
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	e7a6      	b.n	80099f6 <tPluckDetectorInt_tick+0x1f6>
 8009aa8:	9a08      	ldr	r2, [sp, #32]
 8009aaa:	4290      	cmp	r0, r2
 8009aac:	d001      	beq.n	8009ab2 <tPluckDetectorInt_tick+0x2b2>
 8009aae:	2001      	movs	r0, #1
 8009ab0:	e7a1      	b.n	80099f6 <tPluckDetectorInt_tick+0x1f6>
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	e79f      	b.n	80099f6 <tPluckDetectorInt_tick+0x1f6>
				falls_about_midpoint_2 = ( (dirs_from_midpoint[0] == dirs_from_midpoint[4]) && (dirs_from_midpoint[0] != dirs_from_midpoint[1]) && (dirs_from_midpoint[0] != dirs_from_midpoint[3]));
 8009ab6:	9905      	ldr	r1, [sp, #20]
 8009ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aba:	4299      	cmp	r1, r3
 8009abc:	d001      	beq.n	8009ac2 <tPluckDetectorInt_tick+0x2c2>
 8009abe:	2100      	movs	r1, #0
 8009ac0:	e7ac      	b.n	8009a1c <tPluckDetectorInt_tick+0x21c>
 8009ac2:	9b06      	ldr	r3, [sp, #24]
 8009ac4:	4299      	cmp	r1, r3
 8009ac6:	d006      	beq.n	8009ad6 <tPluckDetectorInt_tick+0x2d6>
 8009ac8:	9b08      	ldr	r3, [sp, #32]
 8009aca:	4299      	cmp	r1, r3
 8009acc:	d001      	beq.n	8009ad2 <tPluckDetectorInt_tick+0x2d2>
 8009ace:	2101      	movs	r1, #1
 8009ad0:	e7a4      	b.n	8009a1c <tPluckDetectorInt_tick+0x21c>
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	e7a2      	b.n	8009a1c <tPluckDetectorInt_tick+0x21c>
 8009ad6:	2100      	movs	r1, #0
 8009ad8:	e7a0      	b.n	8009a1c <tPluckDetectorInt_tick+0x21c>
			int tempMean = (width_differences[2] + width_differences[3]) / 2; //divide by 2
 8009ada:	3301      	adds	r3, #1
 8009adc:	e7a0      	b.n	8009a20 <tPluckDetectorInt_tick+0x220>
				tempMax3 = width_differences[3];
 8009ade:	46ae      	mov	lr, r5
 8009ae0:	e7a9      	b.n	8009a36 <tPluckDetectorInt_tick+0x236>
			int firstTest = (ratio_value_diffs_1 < p->max_ratio_value_diffs) && (spread_value_1 > p->min_value_spread) && (tempVariance < p->max_var_diff_width) && (tempMax3 < p->max_width_is_resonating) && (falls_about_midpoint_1 == 1);
 8009ae2:	2000      	movs	r0, #0

			//### 5-POINT PATTERN

			//compute var of width differences using all elements
			//first take the mean
			tempMean = (width_differences[0] + width_differences[1] + width_differences[2] + width_differences[3]) / 4;
 8009ae4:	eb07 0308 	add.w	r3, r7, r8
 8009ae8:	4433      	add	r3, r6
 8009aea:	18eb      	adds	r3, r5, r3
 8009aec:	d419      	bmi.n	8009b22 <tPluckDetectorInt_tick+0x322>
 8009aee:	109b      	asrs	r3, r3, #2
			tempVar1 = width_differences[0] - tempMean;
 8009af0:	eba7 0c03 	sub.w	ip, r7, r3
			tempVar2 = width_differences[1] - tempMean;
 8009af4:	eba8 0803 	sub.w	r8, r8, r3
			int tempVar3 = width_differences[2] - tempMean;
 8009af8:	1af6      	subs	r6, r6, r3
			int tempVar4 = width_differences[3] - tempMean;
 8009afa:	1aed      	subs	r5, r5, r3
			tempVariance = ((tempVar1 * tempVar1) + (tempVar2 * tempVar2) + (tempVar3 * tempVar3) + (tempVar4 * tempVar4)) / 3; // divide by 3;
 8009afc:	fb08 f808 	mul.w	r8, r8, r8
 8009b00:	fb0c 880c 	mla	r8, ip, ip, r8
 8009b04:	fb06 8606 	mla	r6, r6, r6, r8
 8009b08:	fb05 6505 	mla	r5, r5, r5, r6
 8009b0c:	4b53      	ldr	r3, [pc, #332]	; (8009c5c <tPluckDetectorInt_tick+0x45c>)
 8009b0e:	fb83 6305 	smull	r6, r3, r3, r5
 8009b12:	eba3 75e5 	sub.w	r5, r3, r5, asr #31

			tempMax3 = width_differences[0];
			for (int i = 1; i < 4; +i++)
 8009b16:	2301      	movs	r3, #1
 8009b18:	e006      	b.n	8009b28 <tPluckDetectorInt_tick+0x328>
			int firstTest = (ratio_value_diffs_1 < p->max_ratio_value_diffs) && (spread_value_1 > p->min_value_spread) && (tempVariance < p->max_var_diff_width) && (tempMax3 < p->max_width_is_resonating) && (falls_about_midpoint_1 == 1);
 8009b1a:	2000      	movs	r0, #0
 8009b1c:	e7e2      	b.n	8009ae4 <tPluckDetectorInt_tick+0x2e4>
 8009b1e:	2000      	movs	r0, #0
 8009b20:	e7e0      	b.n	8009ae4 <tPluckDetectorInt_tick+0x2e4>
			tempMean = (width_differences[0] + width_differences[1] + width_differences[2] + width_differences[3]) / 4;
 8009b22:	3303      	adds	r3, #3
 8009b24:	e7e3      	b.n	8009aee <tPluckDetectorInt_tick+0x2ee>
			for (int i = 1; i < 4; +i++)
 8009b26:	3301      	adds	r3, #1
 8009b28:	2b03      	cmp	r3, #3
 8009b2a:	dc08      	bgt.n	8009b3e <tPluckDetectorInt_tick+0x33e>
			if (width_differences[i] > tempMax3)
 8009b2c:	ae0a      	add	r6, sp, #40	; 0x28
 8009b2e:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8009b32:	f856 6c24 	ldr.w	r6, [r6, #-36]
 8009b36:	42be      	cmp	r6, r7
 8009b38:	ddf5      	ble.n	8009b26 <tPluckDetectorInt_tick+0x326>
			{
				tempMax3 = width_differences[i];
 8009b3a:	4637      	mov	r7, r6
 8009b3c:	e7f3      	b.n	8009b26 <tPluckDetectorInt_tick+0x326>
			}

			int secondTest = (ratio_value_diffs_2 < p->max_ratio_value_diffs) && (spread_value_2 > p->min_value_spread) && (tempVariance < p->max_var_diff_width) && (tempMax3 < p->max_width_is_resonating) && (falls_about_midpoint_2 == 1);
 8009b3e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b46:	dd0d      	ble.n	8009b64 <tPluckDetectorInt_tick+0x364>
 8009b48:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	da66      	bge.n	8009c1e <tPluckDetectorInt_tick+0x41e>
 8009b50:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8009b54:	42ab      	cmp	r3, r5
 8009b56:	dd64      	ble.n	8009c22 <tPluckDetectorInt_tick+0x422>
 8009b58:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8009b5c:	42bb      	cmp	r3, r7
 8009b5e:	dc02      	bgt.n	8009b66 <tPluckDetectorInt_tick+0x366>
 8009b60:	2100      	movs	r1, #0
 8009b62:	e000      	b.n	8009b66 <tPluckDetectorInt_tick+0x366>
 8009b64:	2100      	movs	r1, #0

			if (firstTest || secondTest)
 8009b66:	ea50 0301 	orrs.w	r3, r0, r1
 8009b6a:	d06b      	beq.n	8009c44 <tPluckDetectorInt_tick+0x444>
			{
				//### UPDATE THE ENVELOPE
				p->envelope_min = p->min_recent_value;
 8009b6c:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
 8009b70:	6161      	str	r1, [r4, #20]
				p->envelope_max = p->max_recent_value;
 8009b72:	f8d4 50d0 	ldr.w	r5, [r4, #208]	; 0xd0
 8009b76:	61a5      	str	r5, [r4, #24]
				int is_pluck = 0;

				//### CHECK IF THIS IS A NEW PLUCK (NOT JUST FURTHER DETECTION OF RESONANCE ON EXISTING PLUCK)
				//### 	If it is an actual pluck, then also collect its strength
				if (p->ready_for_pluck==1)
 8009b78:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d052      	beq.n	8009c26 <tPluckDetectorInt_tick+0x426>
	int pluckHappened = -1;
 8009b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					}
				}

				//### IF WE HAVE HAD AT LEAST THREE DETECTIONS OF RESONANCE WITHIN THE SAME PLUCK'S SIGNAL
				//### THEN WE CAN COMPUTE OR UPDATE THE MIDPOINT ESTIMATE
				if (p->prior_detect_3_index > 0)
 8009b84:	f8d4 e06c 	ldr.w	lr, [r4, #108]	; 0x6c
 8009b88:	f1be 0f00 	cmp.w	lr, #0
 8009b8c:	dd1d      	ble.n	8009bca <tPluckDetectorInt_tick+0x3ca>
				{
					if ((p->Pindex - p->prior_detect_1_index < p->max_samples_still_same_pluck) && (p->prior_detect_1_index - p->prior_detect_2_index < p->max_samples_still_same_pluck) && (p->prior_detect_2_index - p->prior_detect_3_index < p->max_samples_still_same_pluck))
 8009b8e:	e9d4 6722 	ldrd	r6, r7, [r4, #136]	; 0x88
 8009b92:	f8d4 c05c 	ldr.w	ip, [r4, #92]	; 0x5c
 8009b96:	ebb6 020c 	subs.w	r2, r6, ip
 8009b9a:	eb67 73ec 	sbc.w	r3, r7, ip, asr #31
 8009b9e:	f8d4 80a8 	ldr.w	r8, [r4, #168]	; 0xa8
 8009ba2:	4646      	mov	r6, r8
 8009ba4:	17f7      	asrs	r7, r6, #31
 8009ba6:	42bb      	cmp	r3, r7
 8009ba8:	bf08      	it	eq
 8009baa:	4542      	cmpeq	r2, r8
 8009bac:	d20d      	bcs.n	8009bca <tPluckDetectorInt_tick+0x3ca>
 8009bae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bb0:	ebac 0c03 	sub.w	ip, ip, r3
 8009bb4:	45e0      	cmp	r8, ip
 8009bb6:	dd08      	ble.n	8009bca <tPluckDetectorInt_tick+0x3ca>
 8009bb8:	eba3 0e0e 	sub.w	lr, r3, lr
 8009bbc:	45f0      	cmp	r8, lr
 8009bbe:	dd04      	ble.n	8009bca <tPluckDetectorInt_tick+0x3ca>
					{
						//### Note: This can be rounded to the nearest int, but doesn't need to be
						p->midpoint_estimate = (p->max_recent_value + p->min_recent_value) / 2;
 8009bc0:	194b      	adds	r3, r1, r5
 8009bc2:	085b      	lsrs	r3, r3, #1
 8009bc4:	6763      	str	r3, [r4, #116]	; 0x74
						p->is_midpoint_calculated = 1;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	67a3      	str	r3, [r4, #120]	; 0x78
					}
				}

				//### RESET THE DELAY SINCE LAST DETECTION
				p->delay_since_last_detect = 0;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	67e3      	str	r3, [r4, #124]	; 0x7c

				//### UPDATE THE INFORMATION FOR THE PRIOR THREE DETECT EVENTS
				p->prior_detect_3_index = p->prior_detect_2_index;
 8009bce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bd0:	66e3      	str	r3, [r4, #108]	; 0x6c
				p->prior_detect_3_value = p->prior_detect_2_value;
 8009bd2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009bd4:	6723      	str	r3, [r4, #112]	; 0x70
				p->prior_detect_2_index = p->prior_detect_1_index;
 8009bd6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8009bd8:	6663      	str	r3, [r4, #100]	; 0x64
				p->prior_detect_2_value = p->prior_detect_1_value;
 8009bda:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009bdc:	66a3      	str	r3, [r4, #104]	; 0x68
				p->prior_detect_1_index = p->Pindex;
 8009bde:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8009be2:	65e3      	str	r3, [r4, #92]	; 0x5c
				p->prior_detect_1_value = p->smoothed;
 8009be4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009be8:	6623      	str	r3, [r4, #96]	; 0x60
	    }

	}

	//### INCREMENT THE TIME DELAY SINCE THE LAST PLUCK
	p->delay_since_last_detect = p->delay_since_last_detect + 1;
 8009bea:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8009bec:	3301      	adds	r3, #1
 8009bee:	67e3      	str	r3, [r4, #124]	; 0x7c

	//### INCREMENT INDEX COUNTER THAT TRACKS HOW MANY SAMPLES WE'VE SEEN SO FAR
	//still need to figure out how to manage integer rollover.
	p->Pindex = p->Pindex + 1;
 8009bf0:	e9d4 2322 	ldrd	r2, r3, [r4, #136]	; 0x88
 8009bf4:	1c55      	adds	r5, r2, #1
 8009bf6:	f143 0600 	adc.w	r6, r3, #0
 8009bfa:	e9c4 5622 	strd	r5, r6, [r4, #136]	; 0x88
	if (p->Pindex == 0)
 8009bfe:	ea55 0306 	orrs.w	r3, r5, r6
 8009c02:	d103      	bne.n	8009c0c <tPluckDetectorInt_tick+0x40c>
	{
		p->Pindex = 1;
 8009c04:	2201      	movs	r2, #1
 8009c06:	2300      	movs	r3, #0
 8009c08:	e9c4 2322 	strd	r2, r3, [r4, #136]	; 0x88
	}

	//### STORE CURRENT VALUES TO COMPARE AGAINST IN NEXT ITERATION
	p->prior_super_smoothed = p->super_smoothed;
 8009c0c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8009c10:	6223      	str	r3, [r4, #32]
	p->prior_smoothed = p->smoothed;
 8009c12:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009c16:	61e3      	str	r3, [r4, #28]
	return pluckHappened;
}
 8009c18:	b00b      	add	sp, #44	; 0x2c
 8009c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			int secondTest = (ratio_value_diffs_2 < p->max_ratio_value_diffs) && (spread_value_2 > p->min_value_spread) && (tempVariance < p->max_var_diff_width) && (tempMax3 < p->max_width_is_resonating) && (falls_about_midpoint_2 == 1);
 8009c1e:	2100      	movs	r1, #0
 8009c20:	e7a1      	b.n	8009b66 <tPluckDetectorInt_tick+0x366>
 8009c22:	2100      	movs	r1, #0
 8009c24:	e79f      	b.n	8009b66 <tPluckDetectorInt_tick+0x366>
					is_pluck = (p->delay_since_last_detect > p->max_samples_still_same_pluck);
 8009c26:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8009c28:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
					if (is_pluck == 1)
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	dd06      	ble.n	8009c3e <tPluckDetectorInt_tick+0x43e>
						p->pluck_strength = p->envelope_max - p->envelope_min;
 8009c30:	1a68      	subs	r0, r5, r1
 8009c32:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
						p->ready_for_pluck = 0;
 8009c36:	2300      	movs	r3, #0
 8009c38:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8009c3c:	e7a2      	b.n	8009b84 <tPluckDetectorInt_tick+0x384>
	int pluckHappened = -1;
 8009c3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c42:	e79f      	b.n	8009b84 <tPluckDetectorInt_tick+0x384>
 8009c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c48:	e7cf      	b.n	8009bea <tPluckDetectorInt_tick+0x3ea>
 8009c4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c4e:	e7cc      	b.n	8009bea <tPluckDetectorInt_tick+0x3ea>
 8009c50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c54:	e7c9      	b.n	8009bea <tPluckDetectorInt_tick+0x3ea>
 8009c56:	bf00      	nop
 8009c58:	00000001 	.word	0x00000001
 8009c5c:	55555556 	.word	0x55555556

08009c60 <tRingBufferInt_initToPool>:
{
	tRingBufferInt_initToPool(ring, size, &leaf->mempool);
}

void    tRingBufferInt_initToPool   (tRingBufferInt* const ring, int size, tMempool* const mempool)
{
 8009c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c62:	4607      	mov	r7, r0
 8009c64:	460e      	mov	r6, r1
    _tMempool* m = *mempool;
 8009c66:	6815      	ldr	r5, [r2, #0]
    _tRingBufferInt* r = *ring = (_tRingBufferInt*) mpool_alloc(sizeof(_tRingBufferInt), m);
 8009c68:	4629      	mov	r1, r5
 8009c6a:	2014      	movs	r0, #20
 8009c6c:	f000 fce1 	bl	800a632 <mpool_alloc>
 8009c70:	4604      	mov	r4, r0
 8009c72:	6038      	str	r0, [r7, #0]
    r->mempool = m;
 8009c74:	6005      	str	r5, [r0, #0]

    // Ensure size is a power of 2
    if (size <= 0) r->size = 1;
 8009c76:	2e00      	cmp	r6, #0
 8009c78:	dd1e      	ble.n	8009cb8 <tRingBufferInt_initToPool+0x58>
    else r->size = pow(2, ceil(log2(size)));
 8009c7a:	ee07 6a90 	vmov	s15, r6
 8009c7e:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8009c82:	f001 fb41 	bl	800b308 <log>
 8009c86:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8009cc0 <tRingBufferInt_initToPool+0x60>
 8009c8a:	ee80 1b07 	vdiv.f64	d1, d0, d7
 8009c8e:	feba 1b41 	vrintp.f64	d1, d1
 8009c92:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8009c96:	f001 fba7 	bl	800b3e8 <pow>
 8009c9a:	eebc 0bc0 	vcvt.u32.f64	s0, d0
 8009c9e:	ed84 0a02 	vstr	s0, [r4, #8]
    r->mask = r->size - 1;
 8009ca2:	68a0      	ldr	r0, [r4, #8]
 8009ca4:	1e43      	subs	r3, r0, #1
 8009ca6:	6123      	str	r3, [r4, #16]

    r->buffer = (int32_t*) mpool_calloc(sizeof(int32_t) * r->size, m);
 8009ca8:	4629      	mov	r1, r5
 8009caa:	0080      	lsls	r0, r0, #2
 8009cac:	f000 fd2d 	bl	800a70a <mpool_calloc>
 8009cb0:	6060      	str	r0, [r4, #4]
    r->pos = 0;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	60e3      	str	r3, [r4, #12]
}
 8009cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size <= 0) r->size = 1;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	6083      	str	r3, [r0, #8]
 8009cbc:	e7f1      	b.n	8009ca2 <tRingBufferInt_initToPool+0x42>
 8009cbe:	bf00      	nop
 8009cc0:	fefa39ef 	.word	0xfefa39ef
 8009cc4:	3fe62e42 	.word	0x3fe62e42

08009cc8 <tRingBufferInt_push>:
    mpool_free((char*) r, r->mempool);
}

void   tRingBufferInt_push     (tRingBufferInt* const ring, int32_t val)
{
    _tRingBufferInt* r = *ring;
 8009cc8:	6802      	ldr	r2, [r0, #0]

    --r->pos;
 8009cca:	68d3      	ldr	r3, [r2, #12]
 8009ccc:	3b01      	subs	r3, #1
    r->pos &= r->mask;
 8009cce:	6910      	ldr	r0, [r2, #16]
 8009cd0:	4003      	ands	r3, r0
 8009cd2:	60d3      	str	r3, [r2, #12]
    r->buffer[r->pos] = val;
 8009cd4:	6852      	ldr	r2, [r2, #4]
 8009cd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8009cda:	4770      	bx	lr

08009cdc <tRingBufferInt_getOldest>:
    return r->buffer[r->pos];
}

int32_t   tRingBufferInt_getOldest    (tRingBufferInt* const ring)
{
    _tRingBufferInt* r = *ring;
 8009cdc:	6802      	ldr	r2, [r0, #0]

    return r->buffer[(r->pos + r->size - 1) & r->mask];
 8009cde:	6851      	ldr	r1, [r2, #4]
 8009ce0:	68d3      	ldr	r3, [r2, #12]
 8009ce2:	6890      	ldr	r0, [r2, #8]
 8009ce4:	4403      	add	r3, r0
 8009ce6:	3b01      	subs	r3, #1
 8009ce8:	6912      	ldr	r2, [r2, #16]
 8009cea:	4013      	ands	r3, r2
}
 8009cec:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8009cf0:	4770      	bx	lr

08009cf2 <tRingBufferInt_get>:

int32_t   tRingBufferInt_get      (tRingBufferInt* const ring, int index)
{
    _tRingBufferInt* r = *ring;
 8009cf2:	6802      	ldr	r2, [r0, #0]

    return r->buffer[(r->pos + index) & r->mask];
 8009cf4:	6850      	ldr	r0, [r2, #4]
 8009cf6:	68d3      	ldr	r3, [r2, #12]
 8009cf8:	4419      	add	r1, r3
 8009cfa:	6913      	ldr	r3, [r2, #16]
 8009cfc:	4019      	ands	r1, r3
}
 8009cfe:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8009d02:	4770      	bx	lr
 8009d04:	0000      	movs	r0, r0
	...

08009d08 <tLockhartWavefolder_initToPool>:
{
	tLockhartWavefolder_initToPool   (wf, &leaf->mempool);
}

void tLockhartWavefolder_initToPool (tLockhartWavefolder* const wf, tMempool* const mp)
{
 8009d08:	b538      	push	{r3, r4, r5, lr}
 8009d0a:	4605      	mov	r5, r0
    _tMempool* m = *mp;
 8009d0c:	680c      	ldr	r4, [r1, #0]
    _tLockhartWavefolder* w = *wf = (_tLockhartWavefolder*) mpool_alloc(sizeof(_tLockhartWavefolder), m);
 8009d0e:	4621      	mov	r1, r4
 8009d10:	20e0      	movs	r0, #224	; 0xe0
 8009d12:	f000 fc8e 	bl	800a632 <mpool_alloc>
 8009d16:	6028      	str	r0, [r5, #0]
    w->mempool = m;
 8009d18:	6004      	str	r4, [r0, #0]
    
    w->Ln1 = 0.0;
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	e9c0 2302 	strd	r2, r3, [r0, #8]
    w->Fn1 = 0.0;
 8009d22:	e9c0 2304 	strd	r2, r3, [r0, #16]
    w->xn1 = 0.0;
 8009d26:	e9c0 2306 	strd	r2, r3, [r0, #24]
    
    w->RL = 7.5e3;
 8009d2a:	a531      	add	r5, pc, #196	; (adr r5, 8009df0 <tLockhartWavefolder_initToPool+0xe8>)
 8009d2c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009d30:	e9c0 4508 	strd	r4, r5, [r0, #32]
    w->R = 15e3;
 8009d34:	a530      	add	r5, pc, #192	; (adr r5, 8009df8 <tLockhartWavefolder_initToPool+0xf0>)
 8009d36:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009d3a:	e9c0 450a 	strd	r4, r5, [r0, #40]	; 0x28
    w->VT = 26e-3;
 8009d3e:	a530      	add	r5, pc, #192	; (adr r5, 8009e00 <tLockhartWavefolder_initToPool+0xf8>)
 8009d40:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009d44:	e9c0 450c 	strd	r4, r5, [r0, #48]	; 0x30
    w->Is = 10e-16;
 8009d48:	a52f      	add	r5, pc, #188	; (adr r5, 8009e08 <tLockhartWavefolder_initToPool+0x100>)
 8009d4a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009d4e:	e9c0 450e 	strd	r4, r5, [r0, #56]	; 0x38
    
    w->a = 2.0*w->RL/w->R;
 8009d52:	2400      	movs	r4, #0
 8009d54:	4d24      	ldr	r5, [pc, #144]	; (8009de8 <tLockhartWavefolder_initToPool+0xe0>)
 8009d56:	e9c0 4510 	strd	r4, r5, [r0, #64]	; 0x40
    w->b = (w->R+2.0*w->RL)/(w->VT*w->R);
 8009d5a:	a51b      	add	r5, pc, #108	; (adr r5, 8009dc8 <tLockhartWavefolder_initToPool+0xc0>)
 8009d5c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009d60:	e9c0 4512 	strd	r4, r5, [r0, #72]	; 0x48
    w->d = (w->RL*w->Is)/w->VT;
 8009d64:	a51a      	add	r5, pc, #104	; (adr r5, 8009dd0 <tLockhartWavefolder_initToPool+0xc8>)
 8009d66:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009d6a:	e9c0 4514 	strd	r4, r5, [r0, #80]	; 0x50
    w->half_a = 0.5 * w->a;
 8009d6e:	2400      	movs	r4, #0
 8009d70:	4d1e      	ldr	r5, [pc, #120]	; (8009dec <tLockhartWavefolder_initToPool+0xe4>)
 8009d72:	e9c0 4518 	strd	r4, r5, [r0, #96]	; 0x60
    w->longthing = (0.5*w->VT/w->b);
 8009d76:	a518      	add	r5, pc, #96	; (adr r5, 8009dd8 <tLockhartWavefolder_initToPool+0xd0>)
 8009d78:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009d7c:	e9c0 451a 	strd	r4, r5, [r0, #104]	; 0x68
    
    
    // Antialiasing error threshold
    w->AAthresh = 10e-10; //10
 8009d80:	a517      	add	r5, pc, #92	; (adr r5, 8009de0 <tLockhartWavefolder_initToPool+0xd8>)
 8009d82:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009d86:	e9c0 4516 	strd	r4, r5, [r0, #88]	; 0x58

	w->LambertThresh = 10e-10; //12  //was 8
 8009d8a:	e9c0 451c 	strd	r4, r5, [r0, #112]	; 0x70


    w->w = 0.0f;
 8009d8e:	e9c0 231e 	strd	r2, r3, [r0, #120]	; 0x78
    w->expw = 0.0f;
 8009d92:	e9c0 2320 	strd	r2, r3, [r0, #128]	; 0x80
    w->p = 0.0f;
 8009d96:	e9c0 2322 	strd	r2, r3, [r0, #136]	; 0x88
    w->r = 0.0f;
 8009d9a:	e9c0 2324 	strd	r2, r3, [r0, #144]	; 0x90
    w->s= 0.0f;
 8009d9e:	e9c0 2326 	strd	r2, r3, [r0, #152]	; 0x98
    w->myerr = 0.0f;
 8009da2:	e9c0 2328 	strd	r2, r3, [r0, #160]	; 0xa0
    w->l = 0.0f;
 8009da6:	e9c0 232a 	strd	r2, r3, [r0, #168]	; 0xa8
    w->u = 0.0f;
 8009daa:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    w->Ln = 0.0f;
 8009dae:	e9c0 232e 	strd	r2, r3, [r0, #184]	; 0xb8
	w->Fn = 0.0f;
 8009db2:	e9c0 2330 	strd	r2, r3, [r0, #192]	; 0xc0
    w->tempsDenom = 0.0f;
 8009db6:	e9c0 2332 	strd	r2, r3, [r0, #200]	; 0xc8
    w->tempErrDenom = 0.0f;
 8009dba:	e9c0 2334 	strd	r2, r3, [r0, #208]	; 0xd0
    w->tempOutDenom = 0.0f;
 8009dbe:	e9c0 2336 	strd	r2, r3, [r0, #216]	; 0xd8


}
 8009dc2:	bd38      	pop	{r3, r4, r5, pc}
 8009dc4:	f3af 8000 	nop.w
 8009dc8:	b13b13b1 	.word	0xb13b13b1
 8009dcc:	40533b13 	.word	0x40533b13
 8009dd0:	46f1bc84 	.word	0x46f1bc84
 8009dd4:	3df3d2ab 	.word	0x3df3d2ab
 8009dd8:	f23033a4 	.word	0xf23033a4
 8009ddc:	3f2626b2 	.word	0x3f2626b2
 8009de0:	e826d695 	.word	0xe826d695
 8009de4:	3e112e0b 	.word	0x3e112e0b
 8009de8:	3ff00000 	.word	0x3ff00000
 8009dec:	3fe00000 	.word	0x3fe00000
 8009df0:	00000000 	.word	0x00000000
 8009df4:	40bd4c00 	.word	0x40bd4c00
 8009df8:	00000000 	.word	0x00000000
 8009dfc:	40cd4c00 	.word	0x40cd4c00
 8009e00:	76c8b439 	.word	0x76c8b439
 8009e04:	3f9a9fbe 	.word	0x3f9a9fbe
 8009e08:	9ee75616 	.word	0x9ee75616
 8009e0c:	3cd203af 	.word	0x3cd203af

08009e10 <tLockhartWavefolder_init>:
{
 8009e10:	b508      	push	{r3, lr}
	tLockhartWavefolder_initToPool   (wf, &leaf->mempool);
 8009e12:	3118      	adds	r1, #24
 8009e14:	f7ff ff78 	bl	8009d08 <tLockhartWavefolder_initToPool>
}
 8009e18:	bd08      	pop	{r3, pc}

08009e1a <tLockhartWavefolderLambert>:
}



double tLockhartWavefolderLambert(tLockhartWavefolder* const wf, double x, double ln)
{
 8009e1a:	b538      	push	{r3, r4, r5, lr}
 8009e1c:	ed2d 8b02 	vpush	{d8}
 8009e20:	eeb0 8b40 	vmov.f64	d8, d0
	_tLockhartWavefolder* mwf = *wf;
 8009e24:	6804      	ldr	r4, [r0, #0]


    // Initial guess (use previous value)
	mwf->w = ln;
 8009e26:	ed84 1b1e 	vstr	d1, [r4, #120]	; 0x78
    
    // Haley's method (Sec. 4.2 of the paper)
    for(int i=0; i<3000; i+=1) { //1000
 8009e2a:	2500      	movs	r5, #0
 8009e2c:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8009e30:	429d      	cmp	r5, r3
 8009e32:	dc38      	bgt.n	8009ea6 <tLockhartWavefolderLambert+0x8c>
        
    	mwf->expw = exp(mwf->w);
 8009e34:	ed94 0b1e 	vldr	d0, [r4, #120]	; 0x78
 8009e38:	f001 f9f2 	bl	800b220 <exp>
 8009e3c:	ed84 0b20 	vstr	d0, [r4, #128]	; 0x80
        {
        	mwf->expw = 10e-5;
        	LEAF_error();
        }
        */
    	mwf->p = mwf->w*mwf->expw - x;
 8009e40:	ed94 6b1e 	vldr	d6, [r4, #120]	; 0x78
 8009e44:	eeb0 5b48 	vmov.f64	d5, d8
 8009e48:	ee10 5b06 	vnmls.f64	d5, d0, d6
 8009e4c:	ed84 5b22 	vstr	d5, [r4, #136]	; 0x88
        {
        	mwf->p = 10e-5;
        	LEAF_error();
        }
        */
    	mwf->r = (mwf->w+1.0)*mwf->expw;
 8009e50:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8009e54:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009e58:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009e5c:	ed84 0b24 	vstr	d0, [r4, #144]	; 0x90
        {
        	mwf->r = 10e-5;
        	LEAF_error();
        }
        */
    	mwf->tempsDenom = (2.0*(mwf->w+1.0));
 8009e60:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009e64:	ed84 7b32 	vstr	d7, [r4, #200]	; 0xc8
        {
        	mwf->tempsDenom = 10e-5;
        	LEAF_error();
        }
        */
        mwf->s = (mwf->w+2.0)/mwf->tempsDenom;
 8009e68:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8009e6c:	ee36 4b04 	vadd.f64	d4, d6, d4
 8009e70:	ee84 3b07 	vdiv.f64	d3, d4, d7
 8009e74:	ed84 3b26 	vstr	d3, [r4, #152]	; 0x98
        {
        	mwf->s = 10e-5;
        	LEAF_error();
        }
        */
        mwf->tempErrDenom = (mwf->r-(mwf->p*mwf->s));
 8009e78:	ee05 0b43 	vmls.f64	d0, d5, d3
 8009e7c:	ed84 0b34 	vstr	d0, [r4, #208]	; 0xd0
        {
        	mwf->tempErrDenom = 10e-5;
        	LEAF_error();
        }
        */
        mwf->myerr = (mwf->p/mwf->tempErrDenom);
 8009e80:	ee85 7b00 	vdiv.f64	d7, d5, d0
 8009e84:	ed84 7b28 	vstr	d7, [r4, #160]	; 0xa0
        	mwf->myerr = 10e-5;
        	LEAF_error();
        }
        */

        if ((fabs(mwf->myerr))<mwf->LambertThresh) {
 8009e88:	eeb0 4bc7 	vabs.f64	d4, d7
 8009e8c:	ed94 5b1c 	vldr	d5, [r4, #112]	; 0x70
 8009e90:	eeb4 4bc5 	vcmpe.f64	d4, d5
 8009e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e98:	d405      	bmi.n	8009ea6 <tLockhartWavefolderLambert+0x8c>

        	break;
        }

        mwf->w = mwf->w - mwf->myerr;
 8009e9a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009e9e:	ed84 6b1e 	vstr	d6, [r4, #120]	; 0x78
    for(int i=0; i<3000; i+=1) { //1000
 8009ea2:	3501      	adds	r5, #1
 8009ea4:	e7c2      	b.n	8009e2c <tLockhartWavefolderLambert+0x12>
        }
*/

    }
    return mwf->w;
}
 8009ea6:	ed94 0b1e 	vldr	d0, [r4, #120]	; 0x78
 8009eaa:	ecbd 8b02 	vpop	{d8}
 8009eae:	bd38      	pop	{r3, r4, r5, pc}

08009eb0 <tLockhartWavefolder_tick>:

float tLockhartWavefolder_tick(tLockhartWavefolder* const wf, float in)
{
 8009eb0:	b538      	push	{r3, r4, r5, lr}
 8009eb2:	ed2d 8b06 	vpush	{d8-d10}
 8009eb6:	4605      	mov	r5, r0
    _tLockhartWavefolder* w = *wf;
 8009eb8:	6804      	ldr	r4, [r0, #0]

    float out = 0.0f;
    
    // Compute Antiderivative
    w->l = (in > 0.0) - (in < 0.0);
 8009eba:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ec2:	bfcc      	ite	gt
 8009ec4:	2301      	movgt	r3, #1
 8009ec6:	2300      	movle	r3, #0
 8009ec8:	bf4c      	ite	mi
 8009eca:	2201      	movmi	r2, #1
 8009ecc:	2200      	movpl	r2, #0
 8009ece:	1a9b      	subs	r3, r3, r2
 8009ed0:	ee07 3a90 	vmov	s15, r3
 8009ed4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009ed8:	ed84 7b2a 	vstr	d7, [r4, #168]	; 0xa8
    w->u = w->d*exp(w->l*w->b*in);
 8009edc:	ed94 9b14 	vldr	d9, [r4, #80]	; 0x50
 8009ee0:	ed94 6b12 	vldr	d6, [r4, #72]	; 0x48
 8009ee4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009ee8:	eeb7 8ac0 	vcvt.f64.f32	d8, s0
 8009eec:	ee27 0b08 	vmul.f64	d0, d7, d8
 8009ef0:	f001 f996 	bl	800b220 <exp>
 8009ef4:	ee29 0b00 	vmul.f64	d0, d9, d0
 8009ef8:	ed84 0b2c 	vstr	d0, [r4, #176]	; 0xb0
    	w->u = 10e-5;
    	LEAF_error();
    }
    */

    w->Ln = tLockhartWavefolderLambert(wf,w->u,w->Ln1);
 8009efc:	ed94 1b02 	vldr	d1, [r4, #8]
 8009f00:	4628      	mov	r0, r5
 8009f02:	f7ff ff8a 	bl	8009e1a <tLockhartWavefolderLambert>
 8009f06:	ed84 0b2e 	vstr	d0, [r4, #184]	; 0xb8
	{
		w->Ln = 10e-5;
		LEAF_error();
	}
*/
    w->Fn = (w->longthing*(w->Ln*(w->Ln + 2.0))) - (w->half_a*in*in);
 8009f0a:	ed94 6b1a 	vldr	d6, [r4, #104]	; 0x68
 8009f0e:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8009f12:	ee30 7b07 	vadd.f64	d7, d0, d7
 8009f16:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009f1a:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 8009f1e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009f22:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009f26:	ee16 7b00 	vnmls.f64	d7, d6, d0
 8009f2a:	ed84 7b30 	vstr	d7, [r4, #192]	; 0xc0
		LEAF_error();
	}
	*/
    // Check for ill-conditioning

    if (fabs(in-w->xn1)<w->AAthresh)
 8009f2e:	ed94 5b06 	vldr	d5, [r4, #24]
 8009f32:	ee38 6b45 	vsub.f64	d6, d8, d5
 8009f36:	eeb0 3bc6 	vabs.f64	d3, d6
 8009f3a:	ed94 4b16 	vldr	d4, [r4, #88]	; 0x58
 8009f3e:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8009f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f46:	d416      	bmi.n	8009f76 <tLockhartWavefolder_tick+0xc6>
    }
    else
    {

        // Apply AA Form
    	w->tempOutDenom = (in-w->xn1);
 8009f48:	ed84 6b36 	vstr	d6, [r4, #216]	; 0xd8
    	{
    		w->tempOutDenom = 10e-5;
    		LEAF_error();
    	}
    	*/
        out = ((w->Fn-w->Fn1)/w->tempOutDenom);
 8009f4c:	ed94 5b04 	vldr	d5, [r4, #16]
 8009f50:	ee37 7b45 	vsub.f64	d7, d7, d5
 8009f54:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8009f58:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
		*/

    }

    // Update States
    w->Ln1 = w->Ln;
 8009f5c:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	; 0xb8
 8009f60:	e9c4 2302 	strd	r2, r3, [r4, #8]
    w->Fn1 = w->Fn;
 8009f64:	e9d4 2330 	ldrd	r2, r3, [r4, #192]	; 0xc0
 8009f68:	e9c4 2304 	strd	r2, r3, [r4, #16]
    w->xn1 = (double)in;
 8009f6c:	ed84 8b06 	vstr	d8, [r4, #24]
    
    return out;
}
 8009f70:	ecbd 8b06 	vpop	{d8-d10}
 8009f74:	bd38      	pop	{r3, r4, r5, pc}
    	double xn = 0.5*(in+w->xn1);
 8009f76:	ee38 5b05 	vadd.f64	d5, d8, d5
 8009f7a:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
 8009f7e:	ee25 9b09 	vmul.f64	d9, d5, d9
    	w->u = w->d*exp(w->l*w->b*xn);
 8009f82:	ed94 ab14 	vldr	d10, [r4, #80]	; 0x50
 8009f86:	ed94 0b2a 	vldr	d0, [r4, #168]	; 0xa8
 8009f8a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009f8e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009f92:	ee20 0b09 	vmul.f64	d0, d0, d9
 8009f96:	f001 f943 	bl	800b220 <exp>
 8009f9a:	ee2a 0b00 	vmul.f64	d0, d10, d0
 8009f9e:	ed84 0b2c 	vstr	d0, [r4, #176]	; 0xb0
    	w->Ln = tLockhartWavefolderLambert(wf,w->u,w->Ln1);
 8009fa2:	ed94 1b02 	vldr	d1, [r4, #8]
 8009fa6:	4628      	mov	r0, r5
 8009fa8:	f7ff ff37 	bl	8009e1a <tLockhartWavefolderLambert>
 8009fac:	ed84 0b2e 	vstr	d0, [r4, #184]	; 0xb8
        out = (float)((w->l*w->VT*w->Ln) - (w->a*xn));
 8009fb0:	ed94 7b2a 	vldr	d7, [r4, #168]	; 0xa8
 8009fb4:	ed94 6b0c 	vldr	d6, [r4, #48]	; 0x30
 8009fb8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009fbc:	ed94 7b10 	vldr	d7, [r4, #64]	; 0x40
 8009fc0:	ee27 7b09 	vmul.f64	d7, d7, d9
 8009fc4:	ee10 7b06 	vnmls.f64	d7, d0, d6
 8009fc8:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 8009fcc:	e7c6      	b.n	8009f5c <tLockhartWavefolder_tick+0xac>
	...

08009fd0 <tADSR_initToPool>:
{
    tADSR_initToPool(adsrenv, attack, decay, sustain, release, &leaf->mempool);
}

void    tADSR_initToPool    (tADSR* const adsrenv, float attack, float decay, float sustain, float release, tMempool* const mp)
{
 8009fd0:	b538      	push	{r3, r4, r5, lr}
 8009fd2:	ed2d 8b04 	vpush	{d8-d9}
 8009fd6:	4605      	mov	r5, r0
 8009fd8:	eeb0 9a40 	vmov.f32	s18, s0
 8009fdc:	eef0 8a60 	vmov.f32	s17, s1
 8009fe0:	eef0 9a41 	vmov.f32	s19, s2
 8009fe4:	eeb0 8a61 	vmov.f32	s16, s3
    _tMempool* m = *mp;
 8009fe8:	680c      	ldr	r4, [r1, #0]
    _tADSR* adsr = *adsrenv = (_tADSR*) mpool_alloc(sizeof(_tADSR), m);
 8009fea:	4621      	mov	r1, r4
 8009fec:	205c      	movs	r0, #92	; 0x5c
 8009fee:	f000 fb20 	bl	800a632 <mpool_alloc>
 8009ff2:	6028      	str	r0, [r5, #0]
    adsr->mempool = m;
 8009ff4:	6004      	str	r4, [r0, #0]

    adsr->exp_buff = __leaf_table_exp_decay;
 8009ff6:	4b45      	ldr	r3, [pc, #276]	; (800a10c <tADSR_initToPool+0x13c>)
 8009ff8:	6043      	str	r3, [r0, #4]
    adsr->inc_buff = __leaf_table_attack_decay_inc;
 8009ffa:	4b45      	ldr	r3, [pc, #276]	; (800a110 <tADSR_initToPool+0x140>)
 8009ffc:	6083      	str	r3, [r0, #8]
    adsr->buff_size = sizeof(__leaf_table_exp_decay);
 8009ffe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a002:	60c3      	str	r3, [r0, #12]

    if (attack > 8192.0f)
 800a004:	eddf 7a43 	vldr	s15, [pc, #268]	; 800a114 <tADSR_initToPool+0x144>
 800a008:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800a00c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a010:	dd01      	ble.n	800a016 <tADSR_initToPool+0x46>
        attack = 8192.0f;
 800a012:	eeb0 9a67 	vmov.f32	s18, s15
    if (attack < 0.0f)
 800a016:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800a01a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a01e:	d463      	bmi.n	800a0e8 <tADSR_initToPool+0x118>
        attack = 0.0f;

    if (decay > 8192.0f)
 800a020:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800a114 <tADSR_initToPool+0x144>
 800a024:	eef4 8ae7 	vcmpe.f32	s17, s15
 800a028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a02c:	dd01      	ble.n	800a032 <tADSR_initToPool+0x62>
        decay = 8192.0f;
 800a02e:	eef0 8a67 	vmov.f32	s17, s15
    if (decay < 0.0f)
 800a032:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800a036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a03a:	d458      	bmi.n	800a0ee <tADSR_initToPool+0x11e>
        decay = 0.0f;

    if (sustain > 1.0f)
 800a03c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a040:	eef4 9ae7 	vcmpe.f32	s19, s15
 800a044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a048:	dd01      	ble.n	800a04e <tADSR_initToPool+0x7e>
        sustain = 1.0f;
 800a04a:	eef0 9a67 	vmov.f32	s19, s15
    if (sustain < 0.0f)
 800a04e:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 800a052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a056:	d44d      	bmi.n	800a0f4 <tADSR_initToPool+0x124>
        sustain = 0.0f;

    if (release > 8192.0f)
 800a058:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800a114 <tADSR_initToPool+0x144>
 800a05c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a064:	dd01      	ble.n	800a06a <tADSR_initToPool+0x9a>
        release = 8192.0f;
 800a066:	eeb0 8a67 	vmov.f32	s16, s15
    if (release < 0.0f)
 800a06a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a072:	d442      	bmi.n	800a0fa <tADSR_initToPool+0x12a>
        release = 0.0f;

    int16_t attackIndex = ((int16_t)(attack * 8.0f))-1;
 800a074:	eebe 9aee 	vcvt.s32.f32	s18, s18, #3
 800a078:	ee19 3a10 	vmov	r3, s18
 800a07c:	b299      	uxth	r1, r3
 800a07e:	3901      	subs	r1, #1
 800a080:	b209      	sxth	r1, r1
    int16_t decayIndex = ((int16_t)(decay * 8.0f))-1;
 800a082:	eefe 8aee 	vcvt.s32.f32	s17, s17, #3
 800a086:	ee18 3a90 	vmov	r3, s17
 800a08a:	b29a      	uxth	r2, r3
 800a08c:	3a01      	subs	r2, #1
 800a08e:	b212      	sxth	r2, r2
    int16_t releaseIndex = ((int16_t)(release * 8.0f))-1;
 800a090:	eebe 8aee 	vcvt.s32.f32	s16, s16, #3
 800a094:	ee18 3a10 	vmov	r3, s16
 800a098:	b29b      	uxth	r3, r3
 800a09a:	3b01      	subs	r3, #1
 800a09c:	b21b      	sxth	r3, r3
    int16_t rampIndex = ((int16_t)(2.0f * 8.0f))-1;

    if (attackIndex < 0)
 800a09e:	2900      	cmp	r1, #0
 800a0a0:	db2e      	blt.n	800a100 <tADSR_initToPool+0x130>
        attackIndex = 0;
    if (decayIndex < 0)
 800a0a2:	2a00      	cmp	r2, #0
 800a0a4:	db2e      	blt.n	800a104 <tADSR_initToPool+0x134>
        decayIndex = 0;
    if (releaseIndex < 0)
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	db2e      	blt.n	800a108 <tADSR_initToPool+0x138>
        releaseIndex = 0;
    if (rampIndex < 0)
        rampIndex = 0;

    adsr->next = 0.0f;
 800a0aa:	2400      	movs	r4, #0
 800a0ac:	6104      	str	r4, [r0, #16]

    adsr->inRamp = 0;
 800a0ae:	2400      	movs	r4, #0
 800a0b0:	6344      	str	r4, [r0, #52]	; 0x34
    adsr->inAttack = 0;
 800a0b2:	6244      	str	r4, [r0, #36]	; 0x24
    adsr->inDecay = 0;
 800a0b4:	6284      	str	r4, [r0, #40]	; 0x28
    adsr->inSustain = 0;
 800a0b6:	62c4      	str	r4, [r0, #44]	; 0x2c
    adsr->inRelease = 0;
 800a0b8:	6304      	str	r4, [r0, #48]	; 0x30

    adsr->sustain = sustain;
 800a0ba:	edc0 9a0e 	vstr	s19, [r0, #56]	; 0x38

    adsr->attackInc = adsr->inc_buff[attackIndex];
 800a0be:	4c14      	ldr	r4, [pc, #80]	; (800a110 <tADSR_initToPool+0x140>)
 800a0c0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800a0c4:	6809      	ldr	r1, [r1, #0]
 800a0c6:	6141      	str	r1, [r0, #20]
    adsr->decayInc = adsr->inc_buff[decayIndex];
 800a0c8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a0cc:	6812      	ldr	r2, [r2, #0]
 800a0ce:	6182      	str	r2, [r0, #24]
    adsr->releaseInc = adsr->inc_buff[releaseIndex];
 800a0d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	61c3      	str	r3, [r0, #28]
    adsr->rampInc = adsr->inc_buff[rampIndex];
 800a0d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a0da:	6203      	str	r3, [r0, #32]

    adsr->leakFactor = 1.0f;
 800a0dc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a0e0:	6583      	str	r3, [r0, #88]	; 0x58
}
 800a0e2:	ecbd 8b04 	vpop	{d8-d9}
 800a0e6:	bd38      	pop	{r3, r4, r5, pc}
        attack = 0.0f;
 800a0e8:	ed9f 9a0b 	vldr	s18, [pc, #44]	; 800a118 <tADSR_initToPool+0x148>
 800a0ec:	e798      	b.n	800a020 <tADSR_initToPool+0x50>
        decay = 0.0f;
 800a0ee:	eddf 8a0a 	vldr	s17, [pc, #40]	; 800a118 <tADSR_initToPool+0x148>
 800a0f2:	e7a3      	b.n	800a03c <tADSR_initToPool+0x6c>
        sustain = 0.0f;
 800a0f4:	eddf 9a08 	vldr	s19, [pc, #32]	; 800a118 <tADSR_initToPool+0x148>
 800a0f8:	e7ae      	b.n	800a058 <tADSR_initToPool+0x88>
        release = 0.0f;
 800a0fa:	ed9f 8a07 	vldr	s16, [pc, #28]	; 800a118 <tADSR_initToPool+0x148>
 800a0fe:	e7b9      	b.n	800a074 <tADSR_initToPool+0xa4>
        attackIndex = 0;
 800a100:	2100      	movs	r1, #0
 800a102:	e7ce      	b.n	800a0a2 <tADSR_initToPool+0xd2>
        decayIndex = 0;
 800a104:	2200      	movs	r2, #0
 800a106:	e7ce      	b.n	800a0a6 <tADSR_initToPool+0xd6>
        releaseIndex = 0;
 800a108:	2300      	movs	r3, #0
 800a10a:	e7ce      	b.n	800a0aa <tADSR_initToPool+0xda>
 800a10c:	0804d314 	.word	0x0804d314
 800a110:	0800d314 	.word	0x0800d314
 800a114:	46000000 	.word	0x46000000
 800a118:	00000000 	.word	0x00000000

0800a11c <tADSR_init>:
{
 800a11c:	b508      	push	{r3, lr}
    tADSR_initToPool(adsrenv, attack, decay, sustain, release, &leaf->mempool);
 800a11e:	3118      	adds	r1, #24
 800a120:	f7ff ff56 	bl	8009fd0 <tADSR_initToPool>
}
 800a124:	bd08      	pop	{r3, pc}

0800a126 <tADSR_setLeakFactor>:
}

// 0.999999 is slow leak, 0.9 is fast leak
void     tADSR_setLeakFactor(tADSR* const adsrenv, float leakFactor)
{
    _tADSR* adsr = *adsrenv;
 800a126:	6803      	ldr	r3, [r0, #0]


    adsr->leakFactor = leakFactor;
 800a128:	ed83 0a16 	vstr	s0, [r3, #88]	; 0x58
}
 800a12c:	4770      	bx	lr

0800a12e <tADSR_on>:

void tADSR_on(tADSR* const adsrenv, float velocity)
{
    _tADSR* adsr = *adsrenv;
 800a12e:	6803      	ldr	r3, [r0, #0]

    if ((adsr->inAttack || adsr->inDecay) || (adsr->inSustain || adsr->inRelease)) // In case ADSR retriggered while it is still happening.
 800a130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a132:	b942      	cbnz	r2, 800a146 <tADSR_on+0x18>
 800a134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a136:	b932      	cbnz	r2, 800a146 <tADSR_on+0x18>
 800a138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a13a:	b922      	cbnz	r2, 800a146 <tADSR_on+0x18>
 800a13c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a13e:	b912      	cbnz	r2, 800a146 <tADSR_on+0x18>
        adsr->inRamp = 1;
        adsr->rampPeak = adsr->next;
    }
    else // Normal start.
    {
        adsr->inAttack = 1;
 800a140:	2201      	movs	r2, #1
 800a142:	625a      	str	r2, [r3, #36]	; 0x24
 800a144:	e005      	b.n	800a152 <tADSR_on+0x24>
        adsr->rampPhase = 0;
 800a146:	2200      	movs	r2, #0
 800a148:	655a      	str	r2, [r3, #84]	; 0x54
        adsr->inRamp = 1;
 800a14a:	2201      	movs	r2, #1
 800a14c:	635a      	str	r2, [r3, #52]	; 0x34
        adsr->rampPeak = adsr->next;
 800a14e:	691a      	ldr	r2, [r3, #16]
 800a150:	641a      	str	r2, [r3, #64]	; 0x40
    }

    adsr->attackPhase = 0;
 800a152:	2200      	movs	r2, #0
 800a154:	649a      	str	r2, [r3, #72]	; 0x48
    adsr->decayPhase = 0;
 800a156:	64da      	str	r2, [r3, #76]	; 0x4c
    adsr->releasePhase = 0;
 800a158:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->inDecay = 0;
 800a15a:	2200      	movs	r2, #0
 800a15c:	629a      	str	r2, [r3, #40]	; 0x28
    adsr->inSustain = 0;
 800a15e:	62da      	str	r2, [r3, #44]	; 0x2c
    adsr->inRelease = 0;
 800a160:	631a      	str	r2, [r3, #48]	; 0x30
    adsr->gain = velocity;
 800a162:	ed83 0a0f 	vstr	s0, [r3, #60]	; 0x3c
}
 800a166:	4770      	bx	lr

0800a168 <tADSR_off>:

void tADSR_off(tADSR* const adsrenv)
{
    _tADSR* adsr = *adsrenv;
 800a168:	6803      	ldr	r3, [r0, #0]

    if (adsr->inRelease) return;
 800a16a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a16c:	b932      	cbnz	r2, 800a17c <tADSR_off+0x14>

    adsr->inAttack = 0;
 800a16e:	625a      	str	r2, [r3, #36]	; 0x24
    adsr->inDecay = 0;
 800a170:	629a      	str	r2, [r3, #40]	; 0x28
    adsr->inSustain = 0;
 800a172:	62da      	str	r2, [r3, #44]	; 0x2c
    adsr->inRelease = 1;
 800a174:	2201      	movs	r2, #1
 800a176:	631a      	str	r2, [r3, #48]	; 0x30

    adsr->releasePeak = adsr->next;
 800a178:	691a      	ldr	r2, [r3, #16]
 800a17a:	645a      	str	r2, [r3, #68]	; 0x44
}
 800a17c:	4770      	bx	lr
	...

0800a180 <tADSR_tick>:

float   tADSR_tick(tADSR* const adsrenv)
{
    _tADSR* adsr = *adsrenv;
 800a180:	6803      	ldr	r3, [r0, #0]


    if (adsr->inRamp)
 800a182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a184:	b1b2      	cbz	r2, 800a1b4 <tADSR_tick+0x34>
    {
        if (adsr->rampPhase > UINT16_MAX)
 800a186:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800a18a:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800a310 <tADSR_tick+0x190>
 800a18e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a196:	dd69      	ble.n	800a26c <tADSR_tick+0xec>
        {
            adsr->inRamp = 0;
 800a198:	2200      	movs	r2, #0
 800a19a:	635a      	str	r2, [r3, #52]	; 0x34
            adsr->inAttack = 1;
 800a19c:	2201      	movs	r2, #1
 800a19e:	625a      	str	r2, [r3, #36]	; 0x24
            adsr->next = 0.0f;
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	611a      	str	r2, [r3, #16]
        else
        {
            adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
        }

        adsr->rampPhase += adsr->rampInc;
 800a1a4:	ed93 7a08 	vldr	s14, [r3, #32]
 800a1a8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800a1ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a1b0:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
    }

    if (adsr->inAttack)
 800a1b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1b6:	b1b2      	cbz	r2, 800a1e6 <tADSR_tick+0x66>
    {

        // If attack done, time to turn around.
        if (adsr->attackPhase > UINT16_MAX)
 800a1b8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800a1bc:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800a310 <tADSR_tick+0x190>
 800a1c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1c8:	dd60      	ble.n	800a28c <tADSR_tick+0x10c>
        {
            adsr->inDecay = 1;
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	629a      	str	r2, [r3, #40]	; 0x28
            adsr->inAttack = 0;
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	625a      	str	r2, [r3, #36]	; 0x24
            adsr->next = adsr->gain * 1.0f;
 800a1d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1d4:	611a      	str	r2, [r3, #16]
            // do interpolation !
            adsr->next = adsr->gain * adsr->exp_buff[UINT16_MAX - (uint32_t)adsr->attackPhase]; // inverted and backwards to get proper rising exponential shape/perception
        }

        // Increment ADSR attack.
        adsr->attackPhase += adsr->attackInc;
 800a1d6:	ed93 7a05 	vldr	s14, [r3, #20]
 800a1da:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800a1de:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a1e2:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

    }

    if (adsr->inDecay)
 800a1e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a1e8:	b1e2      	cbz	r2, 800a224 <tADSR_tick+0xa4>
    {

        // If decay done, sustain.
        if (adsr->decayPhase >= UINT16_MAX)
 800a1ea:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800a1ee:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800a310 <tADSR_tick+0x190>
 800a1f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1fa:	db5b      	blt.n	800a2b4 <tADSR_tick+0x134>
        {
            adsr->inDecay = 0;
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	629a      	str	r2, [r3, #40]	; 0x28
            adsr->inSustain = 1;
 800a200:	2201      	movs	r2, #1
 800a202:	62da      	str	r2, [r3, #44]	; 0x2c
            adsr->next = adsr->gain * adsr->sustain;
 800a204:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800a208:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800a20c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a210:	edc3 7a04 	vstr	s15, [r3, #16]
        {
            adsr->next = (adsr->gain * (adsr->sustain + ((adsr->exp_buff[(uint32_t)adsr->decayPhase]) * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
        }

        // Increment ADSR decay.
        adsr->decayPhase += adsr->decayInc;
 800a214:	ed93 7a06 	vldr	s14, [r3, #24]
 800a218:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800a21c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a220:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    }

    if (adsr->inSustain)
 800a224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a226:	b13a      	cbz	r2, 800a238 <tADSR_tick+0xb8>
    {
        adsr->next = adsr->next * adsr->leakFactor;
 800a228:	edd3 7a04 	vldr	s15, [r3, #16]
 800a22c:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800a230:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a234:	edc3 7a04 	vstr	s15, [r3, #16]
    }

    if (adsr->inRelease)
 800a238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a23a:	b1a2      	cbz	r2, 800a266 <tADSR_tick+0xe6>
    {
        // If release done, finish.
        if (adsr->releasePhase >= UINT16_MAX)
 800a23c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800a240:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800a310 <tADSR_tick+0x190>
 800a244:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a24c:	db50      	blt.n	800a2f0 <tADSR_tick+0x170>
        {
            adsr->inRelease = 0;
 800a24e:	2200      	movs	r2, #0
 800a250:	631a      	str	r2, [r3, #48]	; 0x30
            adsr->next = 0.0f;
 800a252:	2200      	movs	r2, #0
 800a254:	611a      	str	r2, [r3, #16]

            adsr->next = adsr->releasePeak * (adsr->exp_buff[(uint32_t)adsr->releasePhase]); // do interpolation !
        }

        // Increment envelope release;
        adsr->releasePhase += adsr->releaseInc;
 800a256:	ed93 7a07 	vldr	s14, [r3, #28]
 800a25a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800a25e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a262:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
    }


    return adsr->next;
}
 800a266:	ed93 0a04 	vldr	s0, [r3, #16]
 800a26a:	4770      	bx	lr
            adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
 800a26c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800a270:	685a      	ldr	r2, [r3, #4]
 800a272:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a276:	ee17 1a90 	vmov	r1, s15
 800a27a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800a27e:	edd2 7a00 	vldr	s15, [r2]
 800a282:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a286:	edc3 7a04 	vstr	s15, [r3, #16]
 800a28a:	e78b      	b.n	800a1a4 <tADSR_tick+0x24>
            adsr->next = adsr->gain * adsr->exp_buff[UINT16_MAX - (uint32_t)adsr->attackPhase]; // inverted and backwards to get proper rising exponential shape/perception
 800a28c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800a290:	6859      	ldr	r1, [r3, #4]
 800a292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a296:	ee17 2a90 	vmov	r2, s15
 800a29a:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
 800a29e:	0090      	lsls	r0, r2, #2
 800a2a0:	4401      	add	r1, r0
 800a2a2:	4a1c      	ldr	r2, [pc, #112]	; (800a314 <tADSR_tick+0x194>)
 800a2a4:	440a      	add	r2, r1
 800a2a6:	edd2 7a00 	vldr	s15, [r2]
 800a2aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2ae:	edc3 7a04 	vstr	s15, [r3, #16]
 800a2b2:	e790      	b.n	800a1d6 <tADSR_tick+0x56>
            adsr->next = (adsr->gain * (adsr->sustain + ((adsr->exp_buff[(uint32_t)adsr->decayPhase]) * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 800a2b4:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800a2b8:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800a2bc:	685a      	ldr	r2, [r3, #4]
 800a2be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2c2:	ee17 1a90 	vmov	r1, s15
 800a2c6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800a2ca:	edd2 7a00 	vldr	s15, [r2]
 800a2ce:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a2d2:	ee36 6a66 	vsub.f32	s12, s12, s13
 800a2d6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a2da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2e2:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800a2e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a2ea:	edc3 7a04 	vstr	s15, [r3, #16]
 800a2ee:	e791      	b.n	800a214 <tADSR_tick+0x94>
            adsr->next = adsr->releasePeak * (adsr->exp_buff[(uint32_t)adsr->releasePhase]); // do interpolation !
 800a2f0:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800a2f4:	685a      	ldr	r2, [r3, #4]
 800a2f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2fa:	ee17 1a90 	vmov	r1, s15
 800a2fe:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800a302:	edd2 7a00 	vldr	s15, [r2]
 800a306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a30a:	edc3 7a04 	vstr	s15, [r3, #16]
 800a30e:	e7a2      	b.n	800a256 <tADSR_tick+0xd6>
 800a310:	477fff00 	.word	0x477fff00
 800a314:	0003fffc 	.word	0x0003fffc

0800a318 <tExpSmooth_initToPool>:
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, float val, float factor, tMempool* const mp)
{
 800a318:	b538      	push	{r3, r4, r5, lr}
 800a31a:	ed2d 8b02 	vpush	{d8}
 800a31e:	4605      	mov	r5, r0
 800a320:	eef0 8a40 	vmov.f32	s17, s0
 800a324:	eeb0 8a60 	vmov.f32	s16, s1
    _tMempool* m = *mp;
 800a328:	680c      	ldr	r4, [r1, #0]
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 800a32a:	4621      	mov	r1, r4
 800a32c:	2014      	movs	r0, #20
 800a32e:	f000 f980 	bl	800a632 <mpool_alloc>
 800a332:	6028      	str	r0, [r5, #0]
    smooth->mempool = m;
 800a334:	6004      	str	r4, [r0, #0]
    
    smooth->curr=val;
 800a336:	edc0 8a03 	vstr	s17, [r0, #12]
    smooth->dest=val;
 800a33a:	edc0 8a04 	vstr	s17, [r0, #16]
    if (factor<0) factor=0;
 800a33e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a346:	d413      	bmi.n	800a370 <tExpSmooth_initToPool+0x58>
    if (factor>1) factor=1;
 800a348:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a34c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a354:	dd01      	ble.n	800a35a <tExpSmooth_initToPool+0x42>
 800a356:	eeb0 8a67 	vmov.f32	s16, s15
    smooth->factor=factor;
 800a35a:	ed80 8a01 	vstr	s16, [r0, #4]
    smooth->oneminusfactor=1.0f-factor;
 800a35e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a362:	ee37 8ac8 	vsub.f32	s16, s15, s16
 800a366:	ed80 8a02 	vstr	s16, [r0, #8]
}
 800a36a:	ecbd 8b02 	vpop	{d8}
 800a36e:	bd38      	pop	{r3, r4, r5, pc}
    if (factor<0) factor=0;
 800a370:	ed9f 8a01 	vldr	s16, [pc, #4]	; 800a378 <tExpSmooth_initToPool+0x60>
 800a374:	e7e8      	b.n	800a348 <tExpSmooth_initToPool+0x30>
 800a376:	bf00      	nop
 800a378:	00000000 	.word	0x00000000

0800a37c <tExpSmooth_init>:
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 800a37c:	b508      	push	{r3, lr}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
 800a37e:	3118      	adds	r1, #24
 800a380:	f7ff ffca 	bl	800a318 <tExpSmooth_initToPool>
}
 800a384:	bd08      	pop	{r3, pc}
	...

0800a388 <tSVF_initToPool>:
     */

}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, float freq, float Q, tMempool* const mp)
{
 800a388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a38a:	ed2d 8b02 	vpush	{d8}
 800a38e:	4607      	mov	r7, r0
 800a390:	460e      	mov	r6, r1
 800a392:	eeb0 8a40 	vmov.f32	s16, s0
 800a396:	eef0 8a60 	vmov.f32	s17, s1
    _tMempool* m = *mp;
 800a39a:	6815      	ldr	r5, [r2, #0]
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 800a39c:	4629      	mov	r1, r5
 800a39e:	203c      	movs	r0, #60	; 0x3c
 800a3a0:	f000 f947 	bl	800a632 <mpool_alloc>
 800a3a4:	4604      	mov	r4, r0
 800a3a6:	6038      	str	r0, [r7, #0]
    svf->mempool = m;
 800a3a8:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = svf->mempool->leaf;
 800a3aa:	686b      	ldr	r3, [r5, #4]

    svf->type = type;
 800a3ac:	7106      	strb	r6, [r0, #4]

    svf->ic1eq = 0;
 800a3ae:	2500      	movs	r5, #0
 800a3b0:	6105      	str	r5, [r0, #16]
    svf->ic2eq = 0;
 800a3b2:	6145      	str	r5, [r0, #20]
    svf->Q = Q;
 800a3b4:	edc0 8a03 	vstr	s17, [r0, #12]
    svf->cutoff = freq;
 800a3b8:	ed80 8a02 	vstr	s16, [r0, #8]
    svf->g = tanf(PI * freq * leaf->invSampleRate);
 800a3bc:	ed9f 0a29 	vldr	s0, [pc, #164]	; 800a464 <tSVF_initToPool+0xdc>
 800a3c0:	ee28 8a00 	vmul.f32	s16, s16, s0
 800a3c4:	ed93 0a01 	vldr	s0, [r3, #4]
 800a3c8:	ee28 0a00 	vmul.f32	s0, s16, s0
 800a3cc:	f000 feae 	bl	800b12c <tanf>
 800a3d0:	ed84 0a06 	vstr	s0, [r4, #24]
    svf->k = 1.0f/Q;
 800a3d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3d8:	eec6 7aa8 	vdiv.f32	s15, s13, s17
 800a3dc:	edc4 7a07 	vstr	s15, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800a3e0:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a3e4:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a3e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3f0:	ed84 7a08 	vstr	s14, [r4, #32]
    svf->a2 = svf->g*svf->a1;
 800a3f4:	ee60 7a07 	vmul.f32	s15, s0, s14
 800a3f8:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
 800a3fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a400:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    svf->cH = 0.0f;
 800a404:	62e5      	str	r5, [r4, #44]	; 0x2c
    svf->cB = 0.0f;
 800a406:	6325      	str	r5, [r4, #48]	; 0x30
    svf->cL = 1.0f;
 800a408:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34

    if (type == SVFTypeLowpass)
 800a40c:	2e01      	cmp	r6, #1
 800a40e:	d00f      	beq.n	800a430 <tSVF_initToPool+0xa8>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
 800a410:	2e02      	cmp	r6, #2
 800a412:	d011      	beq.n	800a438 <tSVF_initToPool+0xb0>
        svf->cB = 1.0f;
        svf->cBK = 0.0f;
        svf->cL = 0.0f;
    }

    else if (type == SVFTypeHighpass)
 800a414:	b1be      	cbz	r6, 800a446 <tSVF_initToPool+0xbe>
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = -1.0f;
    }

    else if (type == SVFTypeNotch)
 800a416:	2e03      	cmp	r6, #3
 800a418:	d01c      	beq.n	800a454 <tSVF_initToPool+0xcc>
        svf->cBK = -1.0f;
        svf->cL = 0.0f;
    }


    else if (type == SVFTypePeak)
 800a41a:	2e04      	cmp	r6, #4
 800a41c:	d109      	bne.n	800a432 <tSVF_initToPool+0xaa>
    {
        svf->cH = 1.0f;
 800a41e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a422:	62e3      	str	r3, [r4, #44]	; 0x2c
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
 800a424:	4b10      	ldr	r3, [pc, #64]	; (800a468 <tSVF_initToPool+0xe0>)
 800a426:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = -2.0f;
 800a428:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800a42c:	6363      	str	r3, [r4, #52]	; 0x34
    }
}
 800a42e:	e000      	b.n	800a432 <tSVF_initToPool+0xaa>
        svf->cBK = 0.0f;
 800a430:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800a432:	ecbd 8b02 	vpop	{d8}
 800a436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cB = 1.0f;
 800a438:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a43c:	6323      	str	r3, [r4, #48]	; 0x30
        svf->cBK = 0.0f;
 800a43e:	2300      	movs	r3, #0
 800a440:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = 0.0f;
 800a442:	6363      	str	r3, [r4, #52]	; 0x34
 800a444:	e7f5      	b.n	800a432 <tSVF_initToPool+0xaa>
        svf->cH = 1.0f;
 800a446:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a44a:	62e3      	str	r3, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
 800a44c:	4b06      	ldr	r3, [pc, #24]	; (800a468 <tSVF_initToPool+0xe0>)
 800a44e:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = -1.0f;
 800a450:	6363      	str	r3, [r4, #52]	; 0x34
 800a452:	e7ee      	b.n	800a432 <tSVF_initToPool+0xaa>
        svf->cH = 1.0f;
 800a454:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a458:	62e3      	str	r3, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
 800a45a:	4b03      	ldr	r3, [pc, #12]	; (800a468 <tSVF_initToPool+0xe0>)
 800a45c:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = 0.0f;
 800a45e:	2300      	movs	r3, #0
 800a460:	6363      	str	r3, [r4, #52]	; 0x34
 800a462:	e7e6      	b.n	800a432 <tSVF_initToPool+0xaa>
 800a464:	40490fdb 	.word	0x40490fdb
 800a468:	bf800000 	.word	0xbf800000

0800a46c <tSVF_init>:
{
 800a46c:	b508      	push	{r3, lr}
    tSVF_initToPool     (svff, type, freq, Q, &leaf->mempool);
 800a46e:	3218      	adds	r2, #24
 800a470:	f7ff ff8a 	bl	800a388 <tSVF_initToPool>
}
 800a474:	bd08      	pop	{r3, pc}

0800a476 <tSVF_tick>:
    mpool_free((char*)svf, svf->mempool);
}

float   tSVF_tick(tSVF* const svff, float v0)
{
    _tSVF* svf = *svff;
 800a476:	6803      	ldr	r3, [r0, #0]
    
    float v1,v2,v3;
    v3 = v0 - svf->ic2eq;
 800a478:	ed93 6a05 	vldr	s12, [r3, #20]
 800a47c:	ee30 5a46 	vsub.f32	s10, s0, s12
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 800a480:	ed93 7a08 	vldr	s14, [r3, #32]
 800a484:	edd3 5a04 	vldr	s11, [r3, #16]
 800a488:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a48c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800a490:	ee67 6a85 	vmul.f32	s13, s15, s10
 800a494:	ee37 7a26 	vadd.f32	s14, s14, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 800a498:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800a49c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800a4a0:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800a4a4:	ee66 6a85 	vmul.f32	s13, s13, s10
 800a4a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 800a4ac:	ee77 6a07 	vadd.f32	s13, s14, s14
 800a4b0:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800a4b4:	edc3 6a04 	vstr	s13, [r3, #16]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 800a4b8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a4bc:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800a4c0:	edc3 6a05 	vstr	s13, [r3, #20]
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 800a4c4:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800a4c8:	ee26 0a80 	vmul.f32	s0, s13, s0
 800a4cc:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800a4d0:	ee66 6a87 	vmul.f32	s13, s13, s14
 800a4d4:	ee30 0a26 	vadd.f32	s0, s0, s13
 800a4d8:	edd3 6a07 	vldr	s13, [r3, #28]
 800a4dc:	ee26 7a87 	vmul.f32	s14, s13, s14
 800a4e0:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800a4e4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a4e8:	ee30 7a07 	vadd.f32	s14, s0, s14
 800a4ec:	ed93 0a0d 	vldr	s0, [r3, #52]	; 0x34
 800a4f0:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 800a4f4:	ee37 0a00 	vadd.f32	s0, s14, s0
 800a4f8:	4770      	bx	lr
	...

0800a4fc <tSVF_setFreq>:

void     tSVF_setFreq(tSVF* const svff, float freq)
{
 800a4fc:	b510      	push	{r4, lr}
    _tSVF* svf = *svff;
 800a4fe:	6804      	ldr	r4, [r0, #0]
    LEAF* leaf = svf->mempool->leaf;
 800a500:	6823      	ldr	r3, [r4, #0]
 800a502:	685b      	ldr	r3, [r3, #4]
    
    svf->cutoff = freq;
 800a504:	ed84 0a02 	vstr	s0, [r4, #8]
    svf->g = tanf(PI * freq * leaf->invSampleRate);
 800a508:	eddf 7a11 	vldr	s15, [pc, #68]	; 800a550 <tSVF_setFreq+0x54>
 800a50c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a510:	edd3 7a01 	vldr	s15, [r3, #4]
 800a514:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a518:	f000 fe08 	bl	800b12c <tanf>
 800a51c:	ed84 0a06 	vstr	s0, [r4, #24]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800a520:	edd4 7a07 	vldr	s15, [r4, #28]
 800a524:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a528:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a52c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a530:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a534:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a538:	ed84 7a08 	vstr	s14, [r4, #32]
    svf->a2 = svf->g * svf->a1;
 800a53c:	ee60 7a07 	vmul.f32	s15, s0, s14
 800a540:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 800a544:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a548:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
}
 800a54c:	bd10      	pop	{r4, pc}
 800a54e:	bf00      	nop
 800a550:	40490fdb 	.word	0x40490fdb

0800a554 <LEAF_sign>:
}



int LEAF_sign(int x) {
    return (x > 0) - (x < 0);
 800a554:	0fc3      	lsrs	r3, r0, #31
}
 800a556:	2800      	cmp	r0, #0
 800a558:	bfd4      	ite	le
 800a55a:	4258      	negle	r0, r3
 800a55c:	f1c3 0001 	rsbgt	r0, r3, #1
 800a560:	4770      	bx	lr

0800a562 <LEAF_clip>:

float   LEAF_clip(float min, float val, float max)
{
    float tempmin = min;
    float tempmax = max;
    if (min > max)
 800a562:	eeb4 0ac1 	vcmpe.f32	s0, s2
 800a566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a56a:	dc05      	bgt.n	800a578 <LEAF_clip+0x16>
 800a56c:	ee11 3a10 	vmov	r3, s2
    float tempmin = min;
 800a570:	eeb0 1a40 	vmov.f32	s2, s0
    float tempmax = max;
 800a574:	ee00 3a10 	vmov	s0, r3
    {
        tempmin = max;
        tempmax = min;
    }
    if (val < tempmin)
 800a578:	eeb4 1ae0 	vcmpe.f32	s2, s1
 800a57c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a580:	dc08      	bgt.n	800a594 <LEAF_clip+0x32>
    {
        return tempmin;
    }
    else if (val > tempmax)
 800a582:	eeb4 0ae0 	vcmpe.f32	s0, s1
 800a586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a58a:	d402      	bmi.n	800a592 <LEAF_clip+0x30>
    {
        return tempmax;
    }
    else
    {
        return val;
 800a58c:	eeb0 0a60 	vmov.f32	s0, s1
    }
}
 800a590:	4770      	bx	lr
 800a592:	4770      	bx	lr
        return tempmin;
 800a594:	eeb0 0a41 	vmov.f32	s0, s2
 800a598:	4770      	bx	lr

0800a59a <atodb>:
    return (expf((LOGTEN * 0.05f) * (f-100.0f)));
}


float atodb(float a)
{
 800a59a:	b508      	push	{r3, lr}
    return 20.0f*log10f(a);
 800a59c:	f001 f852 	bl	800b644 <log10f>
}
 800a5a0:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 800a5a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a5a8:	bd08      	pop	{r3, pc}
	...

0800a5ac <LEAF_generate_atodb>:
{
 800a5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ae:	ed2d 8b02 	vpush	{d8}
 800a5b2:	4607      	mov	r7, r0
 800a5b4:	460e      	mov	r6, r1
    float increment = 1.0f / (float)size;
 800a5b6:	ee07 1a90 	vmov	s15, r1
 800a5ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5c2:	eec7 8a27 	vdiv.f32	s17, s14, s15
    for (int i = 0; i < size; i++)
 800a5c6:	2400      	movs	r4, #0
    float x = 0.0f;
 800a5c8:	ed9f 8a09 	vldr	s16, [pc, #36]	; 800a5f0 <LEAF_generate_atodb+0x44>
    for (int i = 0; i < size; i++)
 800a5cc:	e00a      	b.n	800a5e4 <LEAF_generate_atodb+0x38>
        buffer[i] = atodb(x);
 800a5ce:	eb07 0584 	add.w	r5, r7, r4, lsl #2
 800a5d2:	eeb0 0a48 	vmov.f32	s0, s16
 800a5d6:	f7ff ffe0 	bl	800a59a <atodb>
 800a5da:	ed85 0a00 	vstr	s0, [r5]
        x += increment;
 800a5de:	ee38 8a28 	vadd.f32	s16, s16, s17
    for (int i = 0; i < size; i++)
 800a5e2:	3401      	adds	r4, #1
 800a5e4:	42b4      	cmp	r4, r6
 800a5e6:	dbf2      	blt.n	800a5ce <LEAF_generate_atodb+0x22>
}
 800a5e8:	ecbd 8b02 	vpop	{d8}
 800a5ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	00000000 	.word	0x00000000

0800a5f4 <mpool_create>:

/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
 800a5f4:	b410      	push	{r4}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800a5f6:	6853      	ldr	r3, [r2, #4]
 800a5f8:	2410      	movs	r4, #16
 800a5fa:	635c      	str	r4, [r3, #52]	; 0x34
    
    pool->mpool = (char*)memory;
 800a5fc:	6090      	str	r0, [r2, #8]
    pool->usize  = 0;
 800a5fe:	2400      	movs	r4, #0
 800a600:	60d4      	str	r4, [r2, #12]
    pool->msize  = size;
 800a602:	6111      	str	r1, [r2, #16]
    
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800a604:	6853      	ldr	r3, [r2, #4]
 800a606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a608:	1ac9      	subs	r1, r1, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
 800a60a:	4403      	add	r3, r0
 800a60c:	6003      	str	r3, [r0, #0]
    node->next = next;
 800a60e:	6044      	str	r4, [r0, #4]
    node->prev = prev;
 800a610:	6084      	str	r4, [r0, #8]
    node->size = size;
 800a612:	60c1      	str	r1, [r0, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800a614:	6150      	str	r0, [r2, #20]
}
 800a616:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <leaf_pool_init>:
{
 800a61c:	b538      	push	{r3, r4, r5, lr}
 800a61e:	4604      	mov	r4, r0
 800a620:	4608      	mov	r0, r1
 800a622:	4611      	mov	r1, r2
    mpool_create(memory, size, &leaf->_internal_mempool);
 800a624:	f104 051c 	add.w	r5, r4, #28
 800a628:	462a      	mov	r2, r5
 800a62a:	f7ff ffe3 	bl	800a5f4 <mpool_create>
    leaf->mempool = &leaf->_internal_mempool;
 800a62e:	61a5      	str	r5, [r4, #24]
}
 800a630:	bd38      	pop	{r3, r4, r5, pc}

0800a632 <mpool_alloc>:
{
 800a632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a634:	460c      	mov	r4, r1
    if (pool->head == NULL)
 800a636:	694b      	ldr	r3, [r1, #20]
 800a638:	b19b      	cbz	r3, 800a662 <mpool_alloc+0x30>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 800a63a:	1dc1      	adds	r1, r0, #7
 800a63c:	f021 0107 	bic.w	r1, r1, #7
    while (node_to_alloc->size < size_to_alloc)
 800a640:	68da      	ldr	r2, [r3, #12]
 800a642:	428a      	cmp	r2, r1
 800a644:	d224      	bcs.n	800a690 <mpool_alloc+0x5e>
        node_to_alloc = node_to_alloc->next;
 800a646:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d1f9      	bne.n	800a640 <mpool_alloc+0xe>
            if ((pool->msize - pool->usize) > asize)
 800a64c:	6923      	ldr	r3, [r4, #16]
 800a64e:	68e2      	ldr	r2, [r4, #12]
 800a650:	1a9b      	subs	r3, r3, r2
 800a652:	4283      	cmp	r3, r0
 800a654:	d916      	bls.n	800a684 <mpool_alloc+0x52>
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800a656:	2101      	movs	r1, #1
 800a658:	6860      	ldr	r0, [r4, #4]
 800a65a:	f000 fc91 	bl	800af80 <LEAF_internalErrorCallback>
            return NULL;
 800a65e:	2000      	movs	r0, #0
 800a660:	e052      	b.n	800a708 <mpool_alloc+0xd6>
        if ((pool->msize - pool->usize) > asize)
 800a662:	690b      	ldr	r3, [r1, #16]
 800a664:	68ca      	ldr	r2, [r1, #12]
 800a666:	1a9b      	subs	r3, r3, r2
 800a668:	4283      	cmp	r3, r0
 800a66a:	d905      	bls.n	800a678 <mpool_alloc+0x46>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800a66c:	2101      	movs	r1, #1
 800a66e:	6860      	ldr	r0, [r4, #4]
 800a670:	f000 fc86 	bl	800af80 <LEAF_internalErrorCallback>
        return NULL;
 800a674:	2000      	movs	r0, #0
 800a676:	e047      	b.n	800a708 <mpool_alloc+0xd6>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800a678:	2100      	movs	r1, #0
 800a67a:	6860      	ldr	r0, [r4, #4]
 800a67c:	f000 fc80 	bl	800af80 <LEAF_internalErrorCallback>
        return NULL;
 800a680:	2000      	movs	r0, #0
 800a682:	e041      	b.n	800a708 <mpool_alloc+0xd6>
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800a684:	2100      	movs	r1, #0
 800a686:	6860      	ldr	r0, [r4, #4]
 800a688:	f000 fc7a 	bl	800af80 <LEAF_internalErrorCallback>
            return NULL;
 800a68c:	2000      	movs	r0, #0
 800a68e:	e03b      	b.n	800a708 <mpool_alloc+0xd6>
    size_t leftover = node_to_alloc->size - size_to_alloc;
 800a690:	1a55      	subs	r5, r2, r1
    node_to_alloc->size = size_to_alloc;
 800a692:	60d9      	str	r1, [r3, #12]
    if (leftover > pool->leaf->header_size)
 800a694:	6860      	ldr	r0, [r4, #4]
 800a696:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800a698:	42a8      	cmp	r0, r5
 800a69a:	d229      	bcs.n	800a6f0 <mpool_alloc+0xbe>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800a69c:	68a6      	ldr	r6, [r4, #8]
 800a69e:	1b9a      	subs	r2, r3, r6
        offset += pool->leaf->header_size + node_to_alloc->size;
 800a6a0:	4401      	add	r1, r0
 800a6a2:	4411      	add	r1, r2
        new_node = create_node(&pool->mpool[offset],
 800a6a4:	1872      	adds	r2, r6, r1
                               node_to_alloc->next,
 800a6a6:	f8d3 c004 	ldr.w	ip, [r3, #4]
                               node_to_alloc->prev,
 800a6aa:	689f      	ldr	r7, [r3, #8]
        new_node = create_node(&pool->mpool[offset],
 800a6ac:	1a2d      	subs	r5, r5, r0
    node->pool = block_location + header_size;
 800a6ae:	4410      	add	r0, r2
 800a6b0:	5070      	str	r0, [r6, r1]
    node->next = next;
 800a6b2:	f8c2 c004 	str.w	ip, [r2, #4]
    node->prev = prev;
 800a6b6:	6097      	str	r7, [r2, #8]
    node->size = size;
 800a6b8:	60d5      	str	r5, [r2, #12]
    if (pool->head == node_to_alloc)
 800a6ba:	6961      	ldr	r1, [r4, #20]
 800a6bc:	4299      	cmp	r1, r3
 800a6be:	d01a      	beq.n	800a6f6 <mpool_alloc+0xc4>
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 800a6c0:	685a      	ldr	r2, [r3, #4]
 800a6c2:	b10a      	cbz	r2, 800a6c8 <mpool_alloc+0x96>
    {
        // Close the link
        node->next->prev = node->prev;
 800a6c4:	6899      	ldr	r1, [r3, #8]
 800a6c6:	6091      	str	r1, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 800a6c8:	689a      	ldr	r2, [r3, #8]
 800a6ca:	b10a      	cbz	r2, 800a6d0 <mpool_alloc+0x9e>
    {
        // Close the link
        node->prev->next = node->next;
 800a6cc:	6859      	ldr	r1, [r3, #4]
 800a6ce:	6051      	str	r1, [r2, #4]
    }
    
    node->next = NULL;
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 800a6d4:	609a      	str	r2, [r3, #8]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800a6d6:	6860      	ldr	r0, [r4, #4]
 800a6d8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a6da:	68d9      	ldr	r1, [r3, #12]
 800a6dc:	4411      	add	r1, r2
 800a6de:	68e2      	ldr	r2, [r4, #12]
 800a6e0:	440a      	add	r2, r1
 800a6e2:	60e2      	str	r2, [r4, #12]
    if (pool->leaf->clearOnAllocation > 0)
 800a6e4:	6942      	ldr	r2, [r0, #20]
 800a6e6:	2a00      	cmp	r2, #0
 800a6e8:	dd0d      	ble.n	800a706 <mpool_alloc+0xd4>
        char* new_pool = (char*)node_to_alloc->pool;
 800a6ea:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	e007      	b.n	800a700 <mpool_alloc+0xce>
        node_to_alloc->size += leftover;
 800a6f0:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 800a6f2:	685a      	ldr	r2, [r3, #4]
 800a6f4:	e7e1      	b.n	800a6ba <mpool_alloc+0x88>
        pool->head = new_node;
 800a6f6:	6162      	str	r2, [r4, #20]
 800a6f8:	e7e2      	b.n	800a6c0 <mpool_alloc+0x8e>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800a6fa:	2100      	movs	r1, #0
 800a6fc:	5481      	strb	r1, [r0, r2]
 800a6fe:	3201      	adds	r2, #1
 800a700:	68d9      	ldr	r1, [r3, #12]
 800a702:	4291      	cmp	r1, r2
 800a704:	d8f9      	bhi.n	800a6fa <mpool_alloc+0xc8>
    return node_to_alloc->pool;
 800a706:	6818      	ldr	r0, [r3, #0]
}
 800a708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a70a <mpool_calloc>:
{
 800a70a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a70c:	460c      	mov	r4, r1
    if (pool->head == NULL)
 800a70e:	694b      	ldr	r3, [r1, #20]
 800a710:	b19b      	cbz	r3, 800a73a <mpool_calloc+0x30>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 800a712:	1dc1      	adds	r1, r0, #7
 800a714:	f021 0107 	bic.w	r1, r1, #7
    while (node_to_alloc->size < size_to_alloc)
 800a718:	68da      	ldr	r2, [r3, #12]
 800a71a:	428a      	cmp	r2, r1
 800a71c:	d224      	bcs.n	800a768 <mpool_calloc+0x5e>
        node_to_alloc = node_to_alloc->next;
 800a71e:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 800a720:	2b00      	cmp	r3, #0
 800a722:	d1f9      	bne.n	800a718 <mpool_calloc+0xe>
            if ((pool->msize - pool->usize) > asize)
 800a724:	6923      	ldr	r3, [r4, #16]
 800a726:	68e2      	ldr	r2, [r4, #12]
 800a728:	1a9b      	subs	r3, r3, r2
 800a72a:	4283      	cmp	r3, r0
 800a72c:	d916      	bls.n	800a75c <mpool_calloc+0x52>
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800a72e:	2101      	movs	r1, #1
 800a730:	6860      	ldr	r0, [r4, #4]
 800a732:	f000 fc25 	bl	800af80 <LEAF_internalErrorCallback>
            return NULL;
 800a736:	2000      	movs	r0, #0
 800a738:	e04e      	b.n	800a7d8 <mpool_calloc+0xce>
        if ((pool->msize - pool->usize) > asize)
 800a73a:	690b      	ldr	r3, [r1, #16]
 800a73c:	68ca      	ldr	r2, [r1, #12]
 800a73e:	1a9b      	subs	r3, r3, r2
 800a740:	4283      	cmp	r3, r0
 800a742:	d905      	bls.n	800a750 <mpool_calloc+0x46>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800a744:	2101      	movs	r1, #1
 800a746:	6860      	ldr	r0, [r4, #4]
 800a748:	f000 fc1a 	bl	800af80 <LEAF_internalErrorCallback>
        return NULL;
 800a74c:	2000      	movs	r0, #0
 800a74e:	e043      	b.n	800a7d8 <mpool_calloc+0xce>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800a750:	2100      	movs	r1, #0
 800a752:	6860      	ldr	r0, [r4, #4]
 800a754:	f000 fc14 	bl	800af80 <LEAF_internalErrorCallback>
        return NULL;
 800a758:	2000      	movs	r0, #0
 800a75a:	e03d      	b.n	800a7d8 <mpool_calloc+0xce>
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800a75c:	2100      	movs	r1, #0
 800a75e:	6860      	ldr	r0, [r4, #4]
 800a760:	f000 fc0e 	bl	800af80 <LEAF_internalErrorCallback>
            return NULL;
 800a764:	2000      	movs	r0, #0
 800a766:	e037      	b.n	800a7d8 <mpool_calloc+0xce>
    size_t leftover = node_to_alloc->size - size_to_alloc;
 800a768:	1a55      	subs	r5, r2, r1
    node_to_alloc->size = size_to_alloc;
 800a76a:	60d9      	str	r1, [r3, #12]
    if (leftover > pool->leaf->header_size)
 800a76c:	6860      	ldr	r0, [r4, #4]
 800a76e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800a770:	42a8      	cmp	r0, r5
 800a772:	d225      	bcs.n	800a7c0 <mpool_calloc+0xb6>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800a774:	68a6      	ldr	r6, [r4, #8]
 800a776:	1b9a      	subs	r2, r3, r6
        offset += pool->leaf->header_size + node_to_alloc->size;
 800a778:	4401      	add	r1, r0
 800a77a:	4411      	add	r1, r2
        new_node = create_node(&pool->mpool[offset],
 800a77c:	1872      	adds	r2, r6, r1
                               node_to_alloc->next,
 800a77e:	f8d3 c004 	ldr.w	ip, [r3, #4]
                               node_to_alloc->prev,
 800a782:	689f      	ldr	r7, [r3, #8]
        new_node = create_node(&pool->mpool[offset],
 800a784:	1a2d      	subs	r5, r5, r0
    node->pool = block_location + header_size;
 800a786:	4410      	add	r0, r2
 800a788:	5070      	str	r0, [r6, r1]
    node->next = next;
 800a78a:	f8c2 c004 	str.w	ip, [r2, #4]
    node->prev = prev;
 800a78e:	6097      	str	r7, [r2, #8]
    node->size = size;
 800a790:	60d5      	str	r5, [r2, #12]
    if (pool->head == node_to_alloc)
 800a792:	6961      	ldr	r1, [r4, #20]
 800a794:	4299      	cmp	r1, r3
 800a796:	d016      	beq.n	800a7c6 <mpool_calloc+0xbc>
    if (node->next != NULL)
 800a798:	685a      	ldr	r2, [r3, #4]
 800a79a:	b10a      	cbz	r2, 800a7a0 <mpool_calloc+0x96>
        node->next->prev = node->prev;
 800a79c:	6899      	ldr	r1, [r3, #8]
 800a79e:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
 800a7a0:	689a      	ldr	r2, [r3, #8]
 800a7a2:	b10a      	cbz	r2, 800a7a8 <mpool_calloc+0x9e>
        node->prev->next = node->next;
 800a7a4:	6859      	ldr	r1, [r3, #4]
 800a7a6:	6051      	str	r1, [r2, #4]
    node->next = NULL;
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 800a7ac:	609a      	str	r2, [r3, #8]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800a7ae:	6861      	ldr	r1, [r4, #4]
 800a7b0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a7b2:	68d8      	ldr	r0, [r3, #12]
 800a7b4:	4408      	add	r0, r1
 800a7b6:	68e1      	ldr	r1, [r4, #12]
 800a7b8:	4401      	add	r1, r0
 800a7ba:	60e1      	str	r1, [r4, #12]
    char* new_pool = (char*)node_to_alloc->pool;
 800a7bc:	6818      	ldr	r0, [r3, #0]
    for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800a7be:	e007      	b.n	800a7d0 <mpool_calloc+0xc6>
        node_to_alloc->size += leftover;
 800a7c0:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 800a7c2:	685a      	ldr	r2, [r3, #4]
 800a7c4:	e7e5      	b.n	800a792 <mpool_calloc+0x88>
        pool->head = new_node;
 800a7c6:	6162      	str	r2, [r4, #20]
 800a7c8:	e7e6      	b.n	800a798 <mpool_calloc+0x8e>
    for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800a7ca:	2100      	movs	r1, #0
 800a7cc:	5481      	strb	r1, [r0, r2]
 800a7ce:	3201      	adds	r2, #1
 800a7d0:	68d9      	ldr	r1, [r3, #12]
 800a7d2:	4291      	cmp	r1, r2
 800a7d4:	d8f9      	bhi.n	800a7ca <mpool_calloc+0xc0>
    return node_to_alloc->pool;
 800a7d6:	6818      	ldr	r0, [r3, #0]
}
 800a7d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a7da <tMempool_initToPool>:

    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem, LEAF* const leaf)
{
 800a7da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7dc:	4607      	mov	r7, r0
 800a7de:	460d      	mov	r5, r1
 800a7e0:	4616      	mov	r6, r2
    _tMempool* mm = *mem;
 800a7e2:	681c      	ldr	r4, [r3, #0]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 800a7e4:	4621      	mov	r1, r4
 800a7e6:	2018      	movs	r0, #24
 800a7e8:	f7ff ff23 	bl	800a632 <mpool_alloc>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	6038      	str	r0, [r7, #0]
    m->leaf = mm->leaf;
 800a7f0:	6863      	ldr	r3, [r4, #4]
 800a7f2:	6043      	str	r3, [r0, #4]
    
    mpool_create (memory, size, m);
 800a7f4:	4631      	mov	r1, r6
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	f7ff fefc 	bl	800a5f4 <mpool_create>
}
 800a7fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a7fe <tMempool_init>:
{
 800a7fe:	b500      	push	{lr}
 800a800:	b083      	sub	sp, #12
    tMempool_initToPool(mp, memory, size, &leaf->mempool, leaf);
 800a802:	9300      	str	r3, [sp, #0]
 800a804:	3318      	adds	r3, #24
 800a806:	f7ff ffe8 	bl	800a7da <tMempool_initToPool>
}
 800a80a:	b003      	add	sp, #12
 800a80c:	f85d fb04 	ldr.w	pc, [sp], #4

0800a810 <tStack_initToPool>:
{
    tStack_initToPool(stack, &leaf->mempool);
}

void    tStack_initToPool           (tStack* const stack, tMempool* const mp)
{
 800a810:	b538      	push	{r3, r4, r5, lr}
 800a812:	4605      	mov	r5, r0
    _tMempool* m = *mp;
 800a814:	680c      	ldr	r4, [r1, #0]
    _tStack* ns = *stack = (_tStack*) mpool_alloc(sizeof(_tStack), m);
 800a816:	4621      	mov	r1, r4
 800a818:	f44f 7004 	mov.w	r0, #528	; 0x210
 800a81c:	f7ff ff09 	bl	800a632 <mpool_alloc>
 800a820:	6028      	str	r0, [r5, #0]
    ns->mempool = m;
 800a822:	6004      	str	r4, [r0, #0]
    
    ns->ordered = 0;
 800a824:	2300      	movs	r3, #0
 800a826:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
    ns->size = 0;
 800a82a:	f8a0 3206 	strh.w	r3, [r0, #518]	; 0x206
    ns->pos = 0;
 800a82e:	f8a0 3204 	strh.w	r3, [r0, #516]	; 0x204
    ns->capacity = STACK_SIZE;
 800a832:	2280      	movs	r2, #128	; 0x80
 800a834:	f8a0 2208 	strh.w	r2, [r0, #520]	; 0x208
    
    for (int i = 0; i < STACK_SIZE; i++) ns->data[i] = -1;
 800a838:	e005      	b.n	800a846 <tStack_initToPool+0x36>
 800a83a:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800a83e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a842:	6051      	str	r1, [r2, #4]
 800a844:	3301      	adds	r3, #1
 800a846:	2b7f      	cmp	r3, #127	; 0x7f
 800a848:	ddf7      	ble.n	800a83a <tStack_initToPool+0x2a>
}
 800a84a:	bd38      	pop	{r3, r4, r5, pc}

0800a84c <tStack_contains>:
}

// If stack contains note, returns index. Else returns -1;
int tStack_contains(tStack* const stack, uint16_t noteVal)
{
    _tStack* ns = *stack;
 800a84c:	6803      	ldr	r3, [r0, #0]
    for (int i = 0; i < ns->size; i++)
 800a84e:	2000      	movs	r0, #0
 800a850:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800a854:	4282      	cmp	r2, r0
 800a856:	dd06      	ble.n	800a866 <tStack_contains+0x1a>
    {
        if (ns->data[i] == noteVal)    return i;
 800a858:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800a85c:	6852      	ldr	r2, [r2, #4]
 800a85e:	428a      	cmp	r2, r1
 800a860:	d003      	beq.n	800a86a <tStack_contains+0x1e>
    for (int i = 0; i < ns->size; i++)
 800a862:	3001      	adds	r0, #1
 800a864:	e7f4      	b.n	800a850 <tStack_contains+0x4>
    }
    return -1;
 800a866:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800a86a:	4770      	bx	lr

0800a86c <tStack_add>:

void tStack_add(tStack* const stack, uint16_t noteVal)
{
 800a86c:	b470      	push	{r4, r5, r6}
    _tStack* ns = *stack;
 800a86e:	6802      	ldr	r2, [r0, #0]
    
    uint8_t j;
    
    int whereToInsert = 0;
    if (ns->ordered)
 800a870:	f8d2 420c 	ldr.w	r4, [r2, #524]	; 0x20c
 800a874:	b9cc      	cbnz	r4, 800a8aa <tStack_add+0x3e>
            }
        }
    }
    
    //first move notes that are already in the stack one position to the right
    for (j = ns->size; j > whereToInsert; j--)
 800a876:	f8b2 6206 	ldrh.w	r6, [r2, #518]	; 0x206
 800a87a:	b2f3      	uxtb	r3, r6
 800a87c:	e022      	b.n	800a8c4 <tStack_add+0x58>
        for (j = 0; j < ns->size; j++)
 800a87e:	3301      	adds	r3, #1
 800a880:	b2db      	uxtb	r3, r3
 800a882:	b298      	uxth	r0, r3
 800a884:	f8b2 4206 	ldrh.w	r4, [r2, #518]	; 0x206
 800a888:	42a0      	cmp	r0, r4
 800a88a:	d210      	bcs.n	800a8ae <tStack_add+0x42>
            if (noteVal > ns->data[j])
 800a88c:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 800a890:	6840      	ldr	r0, [r0, #4]
 800a892:	4281      	cmp	r1, r0
 800a894:	ddf3      	ble.n	800a87e <tStack_add+0x12>
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 800a896:	1c5c      	adds	r4, r3, #1
 800a898:	eb02 0084 	add.w	r0, r2, r4, lsl #2
 800a89c:	6840      	ldr	r0, [r0, #4]
 800a89e:	4281      	cmp	r1, r0
 800a8a0:	dbe9      	blt.n	800a876 <tStack_add+0xa>
 800a8a2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a8a6:	d1ea      	bne.n	800a87e <tStack_add+0x12>
 800a8a8:	e7e5      	b.n	800a876 <tStack_add+0xa>
        for (j = 0; j < ns->size; j++)
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	e7e9      	b.n	800a882 <tStack_add+0x16>
    int whereToInsert = 0;
 800a8ae:	2400      	movs	r4, #0
 800a8b0:	e7e1      	b.n	800a876 <tStack_add+0xa>
    {
        ns->data[j] = ns->data[(j - 1)];
 800a8b2:	1e58      	subs	r0, r3, #1
 800a8b4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800a8b8:	6845      	ldr	r5, [r0, #4]
 800a8ba:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 800a8be:	6045      	str	r5, [r0, #4]
    for (j = ns->size; j > whereToInsert; j--)
 800a8c0:	3b01      	subs	r3, #1
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	42a3      	cmp	r3, r4
 800a8c6:	dcf4      	bgt.n	800a8b2 <tStack_add+0x46>
    }
    
    //then, insert the new note into the front of the stack
    ns->data[whereToInsert] = noteVal;
 800a8c8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a8cc:	6061      	str	r1, [r4, #4]
    
    ns->size++;
 800a8ce:	3601      	adds	r6, #1
 800a8d0:	f8a2 6206 	strh.w	r6, [r2, #518]	; 0x206
}
 800a8d4:	bc70      	pop	{r4, r5, r6}
 800a8d6:	4770      	bx	lr

0800a8d8 <tStack_remove>:
    return added;
}

// Remove noteVal. return 1 if removed, 0 if not
int tStack_remove(tStack* const stack, uint16_t noteVal)
{
 800a8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tStack* ns = *stack;
 800a8da:	6804      	ldr	r4, [r0, #0]
    
    uint8_t k;
    int foundIndex = tStack_contains(stack, noteVal);
 800a8dc:	f7ff ffb6 	bl	800a84c <tStack_contains>
    int removed = 0;
    
    if (foundIndex >= 0)
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	db01      	blt.n	800a8e8 <tStack_remove+0x10>
    {
        for (k = 0; k < (ns->size - foundIndex); k++)
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	e00d      	b.n	800a904 <tStack_remove+0x2c>
    int removed = 0;
 800a8e8:	2000      	movs	r0, #0
 800a8ea:	e026      	b.n	800a93a <tStack_remove+0x62>
            {
                ns->data[k + foundIndex] = -1;
            }
            else
            {
                ns->data[k + foundIndex] = ns->data[k + foundIndex + 1];
 800a8ec:	1c55      	adds	r5, r2, #1
 800a8ee:	eb04 0685 	add.w	r6, r4, r5, lsl #2
 800a8f2:	6877      	ldr	r7, [r6, #4]
 800a8f4:	eb04 0682 	add.w	r6, r4, r2, lsl #2
 800a8f8:	6077      	str	r7, [r6, #4]
                if ((k + foundIndex) == (ns->size - 1))
 800a8fa:	3901      	subs	r1, #1
 800a8fc:	428a      	cmp	r2, r1
 800a8fe:	d012      	beq.n	800a926 <tStack_remove+0x4e>
        for (k = 0; k < (ns->size - foundIndex); k++)
 800a900:	3301      	adds	r3, #1
 800a902:	b2db      	uxtb	r3, r3
 800a904:	f8b4 1206 	ldrh.w	r1, [r4, #518]	; 0x206
 800a908:	1a0a      	subs	r2, r1, r0
 800a90a:	4293      	cmp	r3, r2
 800a90c:	da11      	bge.n	800a932 <tStack_remove+0x5a>
            if ((k+foundIndex) >= (ns->capacity - 1))
 800a90e:	181a      	adds	r2, r3, r0
 800a910:	f8b4 5208 	ldrh.w	r5, [r4, #520]	; 0x208
 800a914:	3d01      	subs	r5, #1
 800a916:	42aa      	cmp	r2, r5
 800a918:	dbe8      	blt.n	800a8ec <tStack_remove+0x14>
                ns->data[k + foundIndex] = -1;
 800a91a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a91e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a922:	6051      	str	r1, [r2, #4]
 800a924:	e7ec      	b.n	800a900 <tStack_remove+0x28>
                {
                    ns->data[k + foundIndex + 1] = -1;
 800a926:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a92a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a92e:	606a      	str	r2, [r5, #4]
 800a930:	e7e6      	b.n	800a900 <tStack_remove+0x28>
            }
            
        }
        // in case it got put on the stack multiple times
        foundIndex--;
        ns->size--;
 800a932:	3901      	subs	r1, #1
 800a934:	f8a4 1206 	strh.w	r1, [r4, #518]	; 0x206
        removed = 1;
 800a938:	2001      	movs	r0, #1
    }
    
    return removed;
}
 800a93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a93c <tStack_getSize>:
    }
}

int tStack_getSize(tStack* const stack)
{
    _tStack* ns = *stack;
 800a93c:	6803      	ldr	r3, [r0, #0]
    
    return ns->size;
}
 800a93e:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 800a942:	4770      	bx	lr

0800a944 <tStack_get>:
    }
}

int tStack_get(tStack* const stack, int which)
{
    _tStack* ns = *stack;
 800a944:	6803      	ldr	r3, [r0, #0]
    return ns->data[which];
 800a946:	eb03 0181 	add.w	r1, r3, r1, lsl #2
}
 800a94a:	6848      	ldr	r0, [r1, #4]
 800a94c:	4770      	bx	lr

0800a94e <tSimplePoly_initToPool>:
{
    tSimplePoly_initToPool(polyh, maxNumVoices, &leaf->mempool);
}

void    tSimplePoly_initToPool            (tSimplePoly* const polyh, int maxNumVoices, tMempool* const mp)
{
 800a94e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a952:	4680      	mov	r8, r0
 800a954:	460e      	mov	r6, r1
 800a956:	4617      	mov	r7, r2
    _tMempool* m = *mp;
 800a958:	6815      	ldr	r5, [r2, #0]
    _tSimplePoly* poly = *polyh = (_tSimplePoly*) mpool_alloc(sizeof(_tSimplePoly), m);
 800a95a:	4629      	mov	r1, r5
 800a95c:	f240 401c 	movw	r0, #1052	; 0x41c
 800a960:	f7ff fe67 	bl	800a632 <mpool_alloc>
 800a964:	4604      	mov	r4, r0
 800a966:	f8c8 0000 	str.w	r0, [r8]
    poly->mempool = m;
 800a96a:	6005      	str	r5, [r0, #0]

    poly->numVoices = maxNumVoices;
 800a96c:	6086      	str	r6, [r0, #8]
    poly->maxNumVoices = maxNumVoices;
 800a96e:	60c6      	str	r6, [r0, #12]

    for (int i = 0; i < 128; i++)
 800a970:	2300      	movs	r3, #0
 800a972:	e00a      	b.n	800a98a <tSimplePoly_initToPool+0x3c>
    {
        poly->notes[i][0] = -1;
 800a974:	1cda      	adds	r2, r3, #3
 800a976:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800a97a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a97e:	6051      	str	r1, [r2, #4]
        poly->notes[i][1] = 0;
 800a980:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 800a984:	2100      	movs	r1, #0
 800a986:	6211      	str	r1, [r2, #32]
    for (int i = 0; i < 128; i++)
 800a988:	3301      	adds	r3, #1
 800a98a:	2b7f      	cmp	r3, #127	; 0x7f
 800a98c:	ddf2      	ble.n	800a974 <tSimplePoly_initToPool+0x26>
    }
    poly->stealing_on = 1;
 800a98e:	2301      	movs	r3, #1
 800a990:	6163      	str	r3, [r4, #20]
    poly->recover_stolen = 1;
 800a992:	61a3      	str	r3, [r4, #24]
    poly->voices = (int**) mpool_alloc(sizeof(int*) * poly->maxNumVoices, m);
 800a994:	4629      	mov	r1, r5
 800a996:	00b0      	lsls	r0, r6, #2
 800a998:	f7ff fe4b 	bl	800a632 <mpool_alloc>
 800a99c:	6120      	str	r0, [r4, #16]

    for (int i = 0; i < poly->maxNumVoices; ++i)
 800a99e:	2600      	movs	r6, #0
 800a9a0:	e00e      	b.n	800a9c0 <tSimplePoly_initToPool+0x72>
    {
        poly->voices[i] = (int*) mpool_alloc(sizeof(int) * 3, m);
 800a9a2:	f8d4 8010 	ldr.w	r8, [r4, #16]
 800a9a6:	4629      	mov	r1, r5
 800a9a8:	200c      	movs	r0, #12
 800a9aa:	f7ff fe42 	bl	800a632 <mpool_alloc>
 800a9ae:	f848 0026 	str.w	r0, [r8, r6, lsl #2]
        poly->voices[i][0] = -1;
 800a9b2:	6923      	ldr	r3, [r4, #16]
 800a9b4:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800a9b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a9bc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < poly->maxNumVoices; ++i)
 800a9be:	3601      	adds	r6, #1
 800a9c0:	68e3      	ldr	r3, [r4, #12]
 800a9c2:	42b3      	cmp	r3, r6
 800a9c4:	dced      	bgt.n	800a9a2 <tSimplePoly_initToPool+0x54>
    }
    tStack_initToPool(&poly->stack, mp);
 800a9c6:	4639      	mov	r1, r7
 800a9c8:	1d20      	adds	r0, r4, #4
 800a9ca:	f7ff ff21 	bl	800a810 <tStack_initToPool>

}
 800a9ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a9d2 <tSimplePoly_init>:
{
 800a9d2:	b508      	push	{r3, lr}
    tSimplePoly_initToPool(polyh, maxNumVoices, &leaf->mempool);
 800a9d4:	3218      	adds	r2, #24
 800a9d6:	f7ff ffba 	bl	800a94e <tSimplePoly_initToPool>
}
 800a9da:	bd08      	pop	{r3, pc}

0800a9dc <tSimplePoly_noteOn>:
    mpool_free((char*)poly->voices, poly->mempool);
    mpool_free((char*)poly, poly->mempool);
}

int tSimplePoly_noteOn(tSimplePoly* const polyh, int note, uint8_t vel)
{
 800a9dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e0:	460e      	mov	r6, r1
 800a9e2:	4691      	mov	r9, r2
    _tSimplePoly* poly = *polyh;
 800a9e4:	6805      	ldr	r5, [r0, #0]
    int whichVoice, whichNote, oldNote, alteredVoice;
    // if not in keymap or already on stack, dont do anything. else, add that note.
    if (tStack_contains(&poly->stack, note) >= 0) return -1;
 800a9e6:	1d2f      	adds	r7, r5, #4
 800a9e8:	fa1f f881 	uxth.w	r8, r1
 800a9ec:	4641      	mov	r1, r8
 800a9ee:	4638      	mov	r0, r7
 800a9f0:	f7ff ff2c 	bl	800a84c <tStack_contains>
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	f280 8097 	bge.w	800ab28 <tSimplePoly_noteOn+0x14c>
    else
    {
        alteredVoice = -1;
        int found = 0;
        for (int i = 0; i < poly->numVoices; i++)
 800a9fa:	2400      	movs	r4, #0
 800a9fc:	68ab      	ldr	r3, [r5, #8]
 800a9fe:	42a3      	cmp	r3, r4
 800aa00:	dd3a      	ble.n	800aa78 <tSimplePoly_noteOn+0x9c>
        {
            if (poly->voices[i][0] == -1)    // if inactive voice, give this note to voice
 800aa02:	692b      	ldr	r3, [r5, #16]
 800aa04:	00a1      	lsls	r1, r4, #2
 800aa06:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800aa10:	d001      	beq.n	800aa16 <tSimplePoly_noteOn+0x3a>
        for (int i = 0; i < poly->numVoices; i++)
 800aa12:	3401      	adds	r4, #1
 800aa14:	e7f2      	b.n	800a9fc <tSimplePoly_noteOn+0x20>
            {

                found = 1;

                poly->voices[i][0] = note;
 800aa16:	601e      	str	r6, [r3, #0]
                poly->voices[i][1] = vel;
 800aa18:	692b      	ldr	r3, [r5, #16]
 800aa1a:	585b      	ldr	r3, [r3, r1]
 800aa1c:	f8c3 9004 	str.w	r9, [r3, #4]
                poly->notes[note][0] = i;
 800aa20:	1cf3      	adds	r3, r6, #3
 800aa22:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800aa26:	605c      	str	r4, [r3, #4]
                poly->notes[note][1] = vel;
 800aa28:	eb05 03c6 	add.w	r3, r5, r6, lsl #3
 800aa2c:	f8c3 9020 	str.w	r9, [r3, #32]
                poly->voices[i][2] = note; // voices[i][2] is the output midi note, (avoiding the -1 when a voice is inactive)
 800aa30:	692b      	ldr	r3, [r5, #16]
 800aa32:	585b      	ldr	r3, [r3, r1]
 800aa34:	609e      	str	r6, [r3, #8]

                alteredVoice = i;
                tStack_add(&poly->stack, note);
 800aa36:	4641      	mov	r1, r8
 800aa38:	4638      	mov	r0, r7
 800aa3a:	f7ff ff17 	bl	800a86c <tStack_add>
                found = 1;
 800aa3e:	2301      	movs	r3, #1
                    tStack_add(&poly->stack, note);
                    break;
                }
            }
        }
        if ((!found) && (poly->stealing_on)) //steal
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d13a      	bne.n	800aaba <tSimplePoly_noteOn+0xde>
 800aa44:	696b      	ldr	r3, [r5, #20]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d037      	beq.n	800aaba <tSimplePoly_noteOn+0xde>
        {
            for (int j = tStack_getSize(&poly->stack) - 1; j >= 0; j--)
 800aa4a:	4638      	mov	r0, r7
 800aa4c:	f7ff ff76 	bl	800a93c <tStack_getSize>
 800aa50:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
 800aa54:	f1ba 0f00 	cmp.w	sl, #0
 800aa58:	db2f      	blt.n	800aaba <tSimplePoly_noteOn+0xde>
            {
                whichNote = tStack_get(&poly->stack, j);
 800aa5a:	4651      	mov	r1, sl
 800aa5c:	4638      	mov	r0, r7
 800aa5e:	f7ff ff71 	bl	800a944 <tStack_get>
                whichVoice = poly->notes[whichNote][0];
 800aa62:	3003      	adds	r0, #3
 800aa64:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 800aa68:	f8d0 b004 	ldr.w	fp, [r0, #4]
                if (whichVoice >= 0)
 800aa6c:	f1bb 0f00 	cmp.w	fp, #0
 800aa70:	da2a      	bge.n	800aac8 <tSimplePoly_noteOn+0xec>
            for (int j = tStack_getSize(&poly->stack) - 1; j >= 0; j--)
 800aa72:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800aa76:	e7ed      	b.n	800aa54 <tSimplePoly_noteOn+0x78>
            for (int i = 0 ; i < poly->numVoices; i++)
 800aa78:	2400      	movs	r4, #0
 800aa7a:	42a3      	cmp	r3, r4
 800aa7c:	dd20      	ble.n	800aac0 <tSimplePoly_noteOn+0xe4>
                if (poly->voices[i][0] == -2)    // if voice is released but still sounding, take over this voice
 800aa7e:	692a      	ldr	r2, [r5, #16]
 800aa80:	00a0      	lsls	r0, r4, #2
 800aa82:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800aa86:	6811      	ldr	r1, [r2, #0]
 800aa88:	f111 0f02 	cmn.w	r1, #2
 800aa8c:	d001      	beq.n	800aa92 <tSimplePoly_noteOn+0xb6>
            for (int i = 0 ; i < poly->numVoices; i++)
 800aa8e:	3401      	adds	r4, #1
 800aa90:	e7f3      	b.n	800aa7a <tSimplePoly_noteOn+0x9e>
                    poly->voices[i][0] = note;
 800aa92:	6016      	str	r6, [r2, #0]
                    poly->voices[i][1] = vel;
 800aa94:	692b      	ldr	r3, [r5, #16]
 800aa96:	581b      	ldr	r3, [r3, r0]
 800aa98:	f8c3 9004 	str.w	r9, [r3, #4]
                    poly->notes[note][0] = i;
 800aa9c:	1cf3      	adds	r3, r6, #3
 800aa9e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800aaa2:	605c      	str	r4, [r3, #4]
                    poly->notes[note][1] = vel;
 800aaa4:	eb05 03c6 	add.w	r3, r5, r6, lsl #3
 800aaa8:	f8c3 9020 	str.w	r9, [r3, #32]
                    poly->voices[i][2] = note; // voices[i][2] is the output midi note, (avoiding the -1 when a voice is inactive)
 800aaac:	692b      	ldr	r3, [r5, #16]
 800aaae:	581b      	ldr	r3, [r3, r0]
 800aab0:	609e      	str	r6, [r3, #8]
                    tStack_add(&poly->stack, note);
 800aab2:	4641      	mov	r1, r8
 800aab4:	4638      	mov	r0, r7
 800aab6:	f7ff fed9 	bl	800a86c <tStack_add>
                }
            }
        }
        return alteredVoice;
    }
}
 800aaba:	4620      	mov	r0, r4
 800aabc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int found = 0;
 800aac0:	2300      	movs	r3, #0
        alteredVoice = -1;
 800aac2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800aac6:	e7bb      	b.n	800aa40 <tSimplePoly_noteOn+0x64>
                    oldNote = poly->voices[whichVoice][0];
 800aac8:	692b      	ldr	r3, [r5, #16]
 800aaca:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800aace:	6819      	ldr	r1, [r3, #0]
                    poly->voices[whichVoice][0] = note;
 800aad0:	601e      	str	r6, [r3, #0]
                    poly->voices[whichVoice][1] = vel;
 800aad2:	692b      	ldr	r3, [r5, #16]
 800aad4:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800aad8:	f8c3 9004 	str.w	r9, [r3, #4]
                    if (poly->recover_stolen)
 800aadc:	69ab      	ldr	r3, [r5, #24]
 800aade:	b1c3      	cbz	r3, 800ab12 <tSimplePoly_noteOn+0x136>
                    	poly->notes[oldNote][0] = -3; //mark the stolen voice as stolen (in the second dimension of the notes array)
 800aae0:	1ccb      	adds	r3, r1, #3
 800aae2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800aae6:	f06f 0202 	mvn.w	r2, #2
 800aaea:	605a      	str	r2, [r3, #4]
                    poly->notes[note][0] = whichVoice;
 800aaec:	1cf3      	adds	r3, r6, #3
 800aaee:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800aaf2:	f8c3 b004 	str.w	fp, [r3, #4]
                    poly->notes[note][1] = vel;
 800aaf6:	eb05 03c6 	add.w	r3, r5, r6, lsl #3
 800aafa:	f8c3 9020 	str.w	r9, [r3, #32]
                    poly->voices[whichVoice][2] = note;
 800aafe:	692b      	ldr	r3, [r5, #16]
 800ab00:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800ab04:	609e      	str	r6, [r3, #8]
                    tStack_add(&poly->stack, note);
 800ab06:	4641      	mov	r1, r8
 800ab08:	4638      	mov	r0, r7
 800ab0a:	f7ff feaf 	bl	800a86c <tStack_add>
                    alteredVoice = whichVoice;
 800ab0e:	465c      	mov	r4, fp
                    break;
 800ab10:	e7d3      	b.n	800aaba <tSimplePoly_noteOn+0xde>
                    	poly->notes[oldNote][0] = -1; //mark the stolen voice as stolen (in the second dimension of the notes array)
 800ab12:	1ccb      	adds	r3, r1, #3
 800ab14:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800ab18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab1c:	605a      	str	r2, [r3, #4]
                    	tStack_remove(&poly->stack, oldNote);
 800ab1e:	b289      	uxth	r1, r1
 800ab20:	4638      	mov	r0, r7
 800ab22:	f7ff fed9 	bl	800a8d8 <tStack_remove>
 800ab26:	e7e1      	b.n	800aaec <tSimplePoly_noteOn+0x110>
    if (tStack_contains(&poly->stack, note) >= 0) return -1;
 800ab28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ab2c:	e7c5      	b.n	800aaba <tSimplePoly_noteOn+0xde>

0800ab2e <tSimplePoly_noteOff>:



int tSimplePoly_noteOff(tSimplePoly* const polyh, uint8_t note)
{
 800ab2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab30:	460c      	mov	r4, r1
    _tSimplePoly* poly = *polyh;
 800ab32:	6805      	ldr	r5, [r0, #0]
    int16_t noteToTest = -1;

    tStack_remove(&poly->stack, note);
 800ab34:	1d2f      	adds	r7, r5, #4
 800ab36:	4638      	mov	r0, r7
 800ab38:	f7ff fece 	bl	800a8d8 <tStack_remove>
    poly->notes[note][0] = -1;
 800ab3c:	4621      	mov	r1, r4
 800ab3e:	3403      	adds	r4, #3
 800ab40:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 800ab44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab48:	6063      	str	r3, [r4, #4]

    int deactivatedVoice = -1;
    for (int i = 0; i < poly->maxNumVoices; i++)
 800ab4a:	2400      	movs	r4, #0
 800ab4c:	68eb      	ldr	r3, [r5, #12]
 800ab4e:	42a3      	cmp	r3, r4
 800ab50:	dd10      	ble.n	800ab74 <tSimplePoly_noteOff+0x46>
    {
        if (poly->voices[i][0] == note)
 800ab52:	692b      	ldr	r3, [r5, #16]
 800ab54:	00a0      	lsls	r0, r4, #2
 800ab56:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	4291      	cmp	r1, r2
 800ab5e:	d001      	beq.n	800ab64 <tSimplePoly_noteOff+0x36>
    for (int i = 0; i < poly->maxNumVoices; i++)
 800ab60:	3401      	adds	r4, #1
 800ab62:	e7f3      	b.n	800ab4c <tSimplePoly_noteOff+0x1e>
        {
            poly->voices[i][0] = -1;
 800ab64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab68:	601a      	str	r2, [r3, #0]
            poly->voices[i][1] = 0;
 800ab6a:	692b      	ldr	r3, [r5, #16]
 800ab6c:	581b      	ldr	r3, [r3, r0]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	605a      	str	r2, [r3, #4]
            deactivatedVoice = i;
            break;
 800ab72:	e001      	b.n	800ab78 <tSimplePoly_noteOff+0x4a>
    int deactivatedVoice = -1;
 800ab74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        }
    }

    if (poly->recover_stolen)
 800ab78:	69ab      	ldr	r3, [r5, #24]
 800ab7a:	b353      	cbz	r3, 800abd2 <tSimplePoly_noteOff+0xa4>
    {
        //grab old notes off the stack if there are notes waiting to replace the free voice
        if (deactivatedVoice >= 0)
 800ab7c:	2c00      	cmp	r4, #0
 800ab7e:	db28      	blt.n	800abd2 <tSimplePoly_noteOff+0xa4>
        {
            for (int j = 0; j < tStack_getSize(&poly->stack); ++j)
 800ab80:	2600      	movs	r6, #0
 800ab82:	4638      	mov	r0, r7
 800ab84:	f7ff feda 	bl	800a93c <tStack_getSize>
 800ab88:	42b0      	cmp	r0, r6
 800ab8a:	dd22      	ble.n	800abd2 <tSimplePoly_noteOff+0xa4>
            {
                noteToTest = tStack_get(&poly->stack, j);
 800ab8c:	4631      	mov	r1, r6
 800ab8e:	4638      	mov	r0, r7
 800ab90:	f7ff fed8 	bl	800a944 <tStack_get>
 800ab94:	b200      	sxth	r0, r0

                if (poly->notes[noteToTest][0] == -3) //if there is a stolen note waiting (marked inactive but on the stack)
 800ab96:	1cc3      	adds	r3, r0, #3
 800ab98:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	f113 0f03 	cmn.w	r3, #3
 800aba2:	d001      	beq.n	800aba8 <tSimplePoly_noteOff+0x7a>
            for (int j = 0; j < tStack_getSize(&poly->stack); ++j)
 800aba4:	3601      	adds	r6, #1
 800aba6:	e7ec      	b.n	800ab82 <tSimplePoly_noteOff+0x54>
                {
                    poly->voices[deactivatedVoice][0] = noteToTest; //set the newly free voice to use the old stolen note
 800aba8:	692b      	ldr	r3, [r5, #16]
 800abaa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800abae:	6018      	str	r0, [r3, #0]
                    poly->voices[deactivatedVoice][1] = poly->notes[noteToTest][1]; // set the velocity of the voice to be the velocity of that note
 800abb0:	692b      	ldr	r3, [r5, #16]
 800abb2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800abb6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800abba:	6a12      	ldr	r2, [r2, #32]
 800abbc:	605a      	str	r2, [r3, #4]
                    poly->voices[deactivatedVoice][2] = noteToTest;
 800abbe:	692b      	ldr	r3, [r5, #16]
 800abc0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800abc4:	6098      	str	r0, [r3, #8]
                    poly->notes[noteToTest][0] = deactivatedVoice; //mark that it is no longer stolen and is now active
 800abc6:	3003      	adds	r0, #3
 800abc8:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
 800abcc:	606c      	str	r4, [r5, #4]
                    return -1;
 800abce:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
                }
            }
        }
    }
    return deactivatedVoice;
}
 800abd2:	4620      	mov	r0, r4
 800abd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800abd6 <tSimplePoly_setNumVoices>:
    return deactivatedVoice;
}

void tSimplePoly_setNumVoices(tSimplePoly* const polyh, uint8_t numVoices)
{
    _tSimplePoly* poly = *polyh;
 800abd6:	6802      	ldr	r2, [r0, #0]
    poly->numVoices = (numVoices > poly->maxNumVoices) ? poly->maxNumVoices : numVoices;
 800abd8:	68d3      	ldr	r3, [r2, #12]
 800abda:	4299      	cmp	r1, r3
 800abdc:	bfa8      	it	ge
 800abde:	4619      	movge	r1, r3
 800abe0:	6091      	str	r1, [r2, #8]
}
 800abe2:	4770      	bx	lr

0800abe4 <tSimplePoly_getNumActiveVoices>:
    return poly->numVoices;
}

//this is not accurate since the stack can have stolen notes that are not intended to be recovered (if recover voices is off and voices got stolen). Maybe need to remove notes from stack if recover voices is off.
int tSimplePoly_getNumActiveVoices(tSimplePoly* const polyh)
{
 800abe4:	b510      	push	{r4, lr}
    _tSimplePoly* poly = *polyh;
 800abe6:	6804      	ldr	r4, [r0, #0]

    return LEAF_clip(0, tStack_getSize(&poly->stack), poly->numVoices);
 800abe8:	1d20      	adds	r0, r4, #4
 800abea:	f7ff fea7 	bl	800a93c <tStack_getSize>
 800abee:	ed94 1a02 	vldr	s2, [r4, #8]
 800abf2:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 800abf6:	ee07 0a90 	vmov	s15, r0
 800abfa:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800abfe:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800ac10 <tSimplePoly_getNumActiveVoices+0x2c>
 800ac02:	f7ff fcae 	bl	800a562 <LEAF_clip>
}
 800ac06:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ac0a:	ee17 0a90 	vmov	r0, s15
 800ac0e:	bd10      	pop	{r4, pc}
 800ac10:	00000000 	.word	0x00000000

0800ac14 <tSimplePoly_getPitch>:


int tSimplePoly_getPitch(tSimplePoly* const polyh, uint8_t voice)
{
    _tSimplePoly* poly = *polyh;
 800ac14:	6803      	ldr	r3, [r0, #0]
    return poly->voices[voice][2];
 800ac16:	691b      	ldr	r3, [r3, #16]
 800ac18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
}
 800ac1c:	6898      	ldr	r0, [r3, #8]
 800ac1e:	4770      	bx	lr

0800ac20 <tSimplePoly_getPitchAndCheckActive>:

//this one returns negative one if the voice is inactive
int tSimplePoly_getPitchAndCheckActive(tSimplePoly* const polyh, uint8_t voice)
{
    _tSimplePoly* poly = *polyh;
 800ac20:	6803      	ldr	r3, [r0, #0]
    return poly->voices[voice][0];
 800ac22:	691b      	ldr	r3, [r3, #16]
 800ac24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
}
 800ac28:	6818      	ldr	r0, [r3, #0]
 800ac2a:	4770      	bx	lr

0800ac2c <tCycle_initToPool>:
{
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
 800ac2c:	b538      	push	{r3, r4, r5, lr}
 800ac2e:	4605      	mov	r5, r0
    _tMempool* m = *mp;
 800ac30:	680c      	ldr	r4, [r1, #0]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 800ac32:	4621      	mov	r1, r4
 800ac34:	2010      	movs	r0, #16
 800ac36:	f7ff fcfc 	bl	800a632 <mpool_alloc>
 800ac3a:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 800ac3c:	6004      	str	r4, [r0, #0]
    
    c->inc      =  0.0f;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	6083      	str	r3, [r0, #8]
    c->phase    =  0.0f;
 800ac42:	6043      	str	r3, [r0, #4]
}
 800ac44:	bd38      	pop	{r3, r4, r5, pc}

0800ac46 <tCycle_init>:
{
 800ac46:	b508      	push	{r3, lr}
    tCycle_initToPool(cy, &leaf->mempool);
 800ac48:	3118      	adds	r1, #24
 800ac4a:	f7ff ffef 	bl	800ac2c <tCycle_initToPool>
}
 800ac4e:	bd08      	pop	{r3, pc}

0800ac50 <tCycle_setFreq>:
    mpool_free((char*)c, c->mempool);
}

void     tCycle_setFreq(tCycle* const cy, float freq)
{
    _tCycle* c = *cy;
 800ac50:	6803      	ldr	r3, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	6852      	ldr	r2, [r2, #4]
    
    if (!isfinite(freq)) return;
 800ac56:	eeb0 7ac0 	vabs.f32	s14, s0
 800ac5a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ac7c <tCycle_setFreq+0x2c>
 800ac5e:	eeb4 7a67 	vcmp.f32	s14, s15
 800ac62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac66:	d807      	bhi.n	800ac78 <tCycle_setFreq+0x28>
    
    c->freq  = freq;
 800ac68:	ed83 0a03 	vstr	s0, [r3, #12]

    c->inc = freq * leaf->invSampleRate;
 800ac6c:	edd2 7a01 	vldr	s15, [r2, #4]
 800ac70:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ac74:	ed83 0a02 	vstr	s0, [r3, #8]
}
 800ac78:	4770      	bx	lr
 800ac7a:	bf00      	nop
 800ac7c:	7f7fffff 	.word	0x7f7fffff

0800ac80 <tCycle_tick>:

//need to check bounds and wrap table properly to allow through-zero FM
float   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
 800ac80:	6803      	ldr	r3, [r0, #0]
    float fracPart;
    float samp0;
    float samp1;
    
    // Phasor increment
    c->phase += c->inc;
 800ac82:	ed93 7a02 	vldr	s14, [r3, #8]
 800ac86:	edd3 7a01 	vldr	s15, [r3, #4]
 800ac8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac8e:	edc3 7a01 	vstr	s15, [r3, #4]
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 800ac92:	e005      	b.n	800aca0 <tCycle_tick+0x20>
 800ac94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac9c:	edc3 7a01 	vstr	s15, [r3, #4]
 800aca0:	edd3 7a01 	vldr	s15, [r3, #4]
 800aca4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aca8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800acac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acb0:	daf0      	bge.n	800ac94 <tCycle_tick+0x14>
 800acb2:	e005      	b.n	800acc0 <tCycle_tick+0x40>
    while (c->phase < 0.0f) c->phase += 1.0f;
 800acb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800acb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800acbc:	edc3 7a01 	vstr	s15, [r3, #4]
 800acc0:	edd3 7a01 	vldr	s15, [r3, #4]
 800acc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800acc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800accc:	d4f2      	bmi.n	800acb4 <tCycle_tick+0x34>

    // Wavetable synthesis

    temp = SINE_TABLE_SIZE * c->phase;
 800acce:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800ad14 <tCycle_tick+0x94>
 800acd2:	ee67 7a80 	vmul.f32	s15, s15, s0
    intPart = (int)temp;
 800acd6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800acda:	ee17 3a10 	vmov	r3, s14
    fracPart = temp - (float)intPart;
 800acde:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 800ace2:	ee77 7ac0 	vsub.f32	s15, s15, s0
    samp0 = __leaf_table_sinewave[intPart];
 800ace6:	4a0c      	ldr	r2, [pc, #48]	; (800ad18 <tCycle_tick+0x98>)
 800ace8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800acec:	ed92 0a00 	vldr	s0, [r2]
    if (++intPart >= SINE_TABLE_SIZE) intPart = 0;
 800acf0:	3301      	adds	r3, #1
 800acf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800acf6:	db00      	blt.n	800acfa <tCycle_tick+0x7a>
 800acf8:	2300      	movs	r3, #0
    samp1 = __leaf_table_sinewave[intPart];
 800acfa:	4a07      	ldr	r2, [pc, #28]	; (800ad18 <tCycle_tick+0x98>)
 800acfc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ad00:	ed93 7a00 	vldr	s14, [r3]

    return (samp0 + (samp1 - samp0) * fracPart);
 800ad04:	ee37 7a40 	vsub.f32	s14, s14, s0
 800ad08:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800ad0c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ad10:	4770      	bx	lr
 800ad12:	bf00      	nop
 800ad14:	45000000 	.word	0x45000000
 800ad18:	080a3314 	.word	0x080a3314

0800ad1c <tSawtooth_setFreq>:
    mpool_free((char*)c, c->mempool);
}

void    tSawtooth_setFreq(tSawtooth* const cy, float freq)
{
    _tSawtooth* c = *cy;
 800ad1c:	6803      	ldr	r3, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 800ad1e:	681a      	ldr	r2, [r3, #0]
 800ad20:	6852      	ldr	r2, [r2, #4]
    
    c->freq  = freq;
 800ad22:	ed83 0a03 	vstr	s0, [r3, #12]
    
    c->inc = c->freq * leaf->invSampleRate;
 800ad26:	edd2 7a01 	vldr	s15, [r2, #4]
 800ad2a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ad2e:	edc3 7a02 	vstr	s15, [r3, #8]
    
    c->w = c->freq * INV_20;
 800ad32:	eddf 7a10 	vldr	s15, [pc, #64]	; 800ad74 <tSawtooth_setFreq+0x58>
 800ad36:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ad3a:	ed83 0a05 	vstr	s0, [r3, #20]
    for (c->oct = 0; c->w > 2.0f; c->oct++)
 800ad3e:	2200      	movs	r2, #0
 800ad40:	611a      	str	r2, [r3, #16]
 800ad42:	e008      	b.n	800ad56 <tSawtooth_setFreq+0x3a>
    {
        c->w = 0.5f * c->w;
 800ad44:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ad48:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ad4c:	edc3 7a05 	vstr	s15, [r3, #20]
    for (c->oct = 0; c->w > 2.0f; c->oct++)
 800ad50:	691a      	ldr	r2, [r3, #16]
 800ad52:	3201      	adds	r2, #1
 800ad54:	611a      	str	r2, [r3, #16]
 800ad56:	edd3 7a05 	vldr	s15, [r3, #20]
 800ad5a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ad5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad66:	dced      	bgt.n	800ad44 <tSawtooth_setFreq+0x28>
    }
    c->w = 2.0f - c->w;
 800ad68:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad6c:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800ad70:	4770      	bx	lr
 800ad72:	bf00      	nop
 800ad74:	3d4ccccd 	.word	0x3d4ccccd

0800ad78 <tSawtooth_initToPool>:
{
 800ad78:	b538      	push	{r3, r4, r5, lr}
 800ad7a:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 800ad7c:	680d      	ldr	r5, [r1, #0]
    _tSawtooth* c = *cy = (_tSawtooth*) mpool_alloc(sizeof(_tSawtooth), m);
 800ad7e:	4629      	mov	r1, r5
 800ad80:	2018      	movs	r0, #24
 800ad82:	f7ff fc56 	bl	800a632 <mpool_alloc>
 800ad86:	6020      	str	r0, [r4, #0]
    c->mempool = m;
 800ad88:	6005      	str	r5, [r0, #0]
    c->inc      = 0.0f;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	6083      	str	r3, [r0, #8]
    c->phase    = 0.0f;
 800ad8e:	6043      	str	r3, [r0, #4]
    tSawtooth_setFreq(cy, 220);
 800ad90:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800ad9c <tSawtooth_initToPool+0x24>
 800ad94:	4620      	mov	r0, r4
 800ad96:	f7ff ffc1 	bl	800ad1c <tSawtooth_setFreq>
}
 800ad9a:	bd38      	pop	{r3, r4, r5, pc}
 800ad9c:	435c0000 	.word	0x435c0000

0800ada0 <tSawtooth_init>:
{
 800ada0:	b508      	push	{r3, lr}
    tSawtooth_initToPool(cy, &leaf->mempool);
 800ada2:	3118      	adds	r1, #24
 800ada4:	f7ff ffe8 	bl	800ad78 <tSawtooth_initToPool>
}
 800ada8:	bd08      	pop	{r3, pc}
	...

0800adac <tSawtooth_tick>:

float   tSawtooth_tick(tSawtooth* const cy)
{
 800adac:	b410      	push	{r4}
    _tSawtooth* c = *cy;
 800adae:	6802      	ldr	r2, [r0, #0]
    
    // Phasor increment
    c->phase += c->inc;
 800adb0:	ed92 7a02 	vldr	s14, [r2, #8]
 800adb4:	edd2 7a01 	vldr	s15, [r2, #4]
 800adb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800adbc:	edc2 7a01 	vstr	s15, [r2, #4]
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 800adc0:	e005      	b.n	800adce <tSawtooth_tick+0x22>
 800adc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800adca:	edc2 7a01 	vstr	s15, [r2, #4]
 800adce:	edd2 7a01 	vldr	s15, [r2, #4]
 800add2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800add6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800adda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adde:	daf0      	bge.n	800adc2 <tSawtooth_tick+0x16>
 800ade0:	e005      	b.n	800adee <tSawtooth_tick+0x42>
    while (c->phase < 0.0f) c->phase += 1.0f;
 800ade2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ade6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800adea:	edc2 7a01 	vstr	s15, [r2, #4]
 800adee:	edd2 7a01 	vldr	s15, [r2, #4]
 800adf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800adf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adfa:	d4f2      	bmi.n	800ade2 <tSawtooth_tick+0x36>
    
    float out = 0.0f;
    
    int idx = (int)(c->phase * SAW_TABLE_SIZE);
 800adfc:	eeb0 7a67 	vmov.f32	s14, s15
 800ae00:	eebe 7aea 	vcvt.s32.f32	s14, s14, #11
 800ae04:	ee17 3a10 	vmov	r3, s14
    
    // Wavetable synthesis
    out = __leaf_table_sawtooth[c->oct+1][idx] +
 800ae08:	6914      	ldr	r4, [r2, #16]
 800ae0a:	1c61      	adds	r1, r4, #1
 800ae0c:	480b      	ldr	r0, [pc, #44]	; (800ae3c <tSawtooth_tick+0x90>)
 800ae0e:	eb03 21c1 	add.w	r1, r3, r1, lsl #11
 800ae12:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ae16:	ed91 0a00 	vldr	s0, [r1]
         (__leaf_table_sawtooth[c->oct][idx] - __leaf_table_sawtooth[c->oct+1][idx]) * c->w;
 800ae1a:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
 800ae1e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ae22:	edd3 7a00 	vldr	s15, [r3]
 800ae26:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ae2a:	ed92 7a05 	vldr	s14, [r2, #20]
 800ae2e:	ee67 7a87 	vmul.f32	s15, s15, s14
    
    return out;
}
 800ae32:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ae36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae3a:	4770      	bx	lr
 800ae3c:	0808d314 	.word	0x0808d314

0800ae40 <tNoise_initToPool>:
{
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
 800ae40:	b570      	push	{r4, r5, r6, lr}
 800ae42:	4606      	mov	r6, r0
 800ae44:	460d      	mov	r5, r1
    _tMempool* m = *mp;
 800ae46:	6814      	ldr	r4, [r2, #0]
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 800ae48:	4621      	mov	r1, r4
 800ae4a:	2018      	movs	r0, #24
 800ae4c:	f7ff fbf1 	bl	800a632 <mpool_alloc>
 800ae50:	6030      	str	r0, [r6, #0]
    n->mempool = m;
 800ae52:	6004      	str	r4, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
 800ae54:	6863      	ldr	r3, [r4, #4]
    
    n->type = type;
 800ae56:	7105      	strb	r5, [r0, #4]
    n->rand = leaf->random;
 800ae58:	691b      	ldr	r3, [r3, #16]
 800ae5a:	6143      	str	r3, [r0, #20]
}
 800ae5c:	bd70      	pop	{r4, r5, r6, pc}

0800ae5e <tNoise_init>:
{
 800ae5e:	b508      	push	{r3, lr}
    tNoise_initToPool(ns, type, &leaf->mempool);
 800ae60:	3218      	adds	r2, #24
 800ae62:	f7ff ffed 	bl	800ae40 <tNoise_initToPool>
}
 800ae66:	bd08      	pop	{r3, pc}

0800ae68 <tNoise_tick>:
    
    mpool_free((char*)n, n->mempool);
}

float   tNoise_tick(tNoise* const ns)
{
 800ae68:	b510      	push	{r4, lr}
    _tNoise* n = *ns;
 800ae6a:	6804      	ldr	r4, [r0, #0]
    
    float rand = (n->rand() * 2.0f) - 1.0f;
 800ae6c:	6963      	ldr	r3, [r4, #20]
 800ae6e:	4798      	blx	r3
 800ae70:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ae74:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ae78:	ee30 0a67 	vsub.f32	s0, s0, s15
    
    if (n->type == PinkNoise)
 800ae7c:	7923      	ldrb	r3, [r4, #4]
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d000      	beq.n	800ae84 <tNoise_tick+0x1c>
    }
    else // WhiteNoise
    {
        return rand;
    }
}
 800ae82:	bd10      	pop	{r4, pc}
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 800ae84:	edd4 6a02 	vldr	s13, [r4, #8]
 800ae88:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800aef8 <tNoise_tick+0x90>
 800ae8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ae90:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800aefc <tNoise_tick+0x94>
 800ae94:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ae98:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ae9c:	edc4 6a02 	vstr	s13, [r4, #8]
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 800aea0:	ed94 6a03 	vldr	s12, [r4, #12]
 800aea4:	eddf 7a16 	vldr	s15, [pc, #88]	; 800af00 <tNoise_tick+0x98>
 800aea8:	ee26 6a27 	vmul.f32	s12, s12, s15
 800aeac:	eddf 7a15 	vldr	s15, [pc, #84]	; 800af04 <tNoise_tick+0x9c>
 800aeb0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800aeb4:	ee36 6a27 	vadd.f32	s12, s12, s15
 800aeb8:	ed84 6a03 	vstr	s12, [r4, #12]
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 800aebc:	ed94 7a04 	vldr	s14, [r4, #16]
 800aec0:	eddf 7a11 	vldr	s15, [pc, #68]	; 800af08 <tNoise_tick+0xa0>
 800aec4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aec8:	eddf 7a10 	vldr	s15, [pc, #64]	; 800af0c <tNoise_tick+0xa4>
 800aecc:	ee60 7a27 	vmul.f32	s15, s0, s15
 800aed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aed4:	edc4 7a04 	vstr	s15, [r4, #16]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 800aed8:	ee76 6a86 	vadd.f32	s13, s13, s12
 800aedc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aee0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800af10 <tNoise_tick+0xa8>
 800aee4:	ee20 0a07 	vmul.f32	s0, s0, s14
 800aee8:	ee77 7a80 	vadd.f32	s15, s15, s0
        return (tmp * 0.05f);
 800aeec:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800af14 <tNoise_tick+0xac>
 800aef0:	ee27 0a80 	vmul.f32	s0, s15, s0
 800aef4:	e7c5      	b.n	800ae82 <tNoise_tick+0x1a>
 800aef6:	bf00      	nop
 800aef8:	3f7f65fe 	.word	0x3f7f65fe
 800aefc:	3dcad8a1 	.word	0x3dcad8a1
 800af00:	3f76872b 	.word	0x3f76872b
 800af04:	3e97d0ff 	.word	0x3e97d0ff
 800af08:	3f11eb85 	.word	0x3f11eb85
 800af0c:	3f86be97 	.word	0x3f86be97
 800af10:	3e3d3c36 	.word	0x3e3d3c36
 800af14:	3d4ccccd 	.word	0x3d4ccccd

0800af18 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 800af18:	4770      	bx	lr
	...

0800af1c <LEAF_init>:
{
 800af1c:	b538      	push	{r3, r4, r5, lr}
 800af1e:	ed2d 8b02 	vpush	{d8}
 800af22:	4604      	mov	r4, r0
 800af24:	eeb0 8a40 	vmov.f32	s16, s0
 800af28:	460d      	mov	r5, r1
 800af2a:	4611      	mov	r1, r2
    leaf->_internal_mempool.leaf = leaf;
 800af2c:	6200      	str	r0, [r0, #32]
    leaf_pool_init(leaf, memory, memorysize);
 800af2e:	461a      	mov	r2, r3
 800af30:	f7ff fb74 	bl	800a61c <leaf_pool_init>
    leaf->sampleRate = sr;
 800af34:	ed84 8a00 	vstr	s16, [r4]
    leaf->blockSize = blocksize;
 800af38:	60a5      	str	r5, [r4, #8]
    leaf->invSampleRate = 1.0f/sr;
 800af3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af3e:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800af42:	edc4 7a01 	vstr	s15, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 800af46:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800af78 <LEAF_init+0x5c>
 800af4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af4e:	edc4 7a03 	vstr	s15, [r4, #12]
    leaf->random = random;
 800af52:	9b06      	ldr	r3, [sp, #24]
 800af54:	6123      	str	r3, [r4, #16]
    leaf->clearOnAllocation = 0;
 800af56:	2300      	movs	r3, #0
 800af58:	6163      	str	r3, [r4, #20]
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 800af5a:	4a08      	ldr	r2, [pc, #32]	; (800af7c <LEAF_init+0x60>)
 800af5c:	63a2      	str	r2, [r4, #56]	; 0x38
    for (int i = 0; i < LEAFErrorNil; ++i)
 800af5e:	e006      	b.n	800af6e <LEAF_init+0x52>
        leaf->errorState[i] = 0;
 800af60:	f103 020e 	add.w	r2, r3, #14
 800af64:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800af68:	2100      	movs	r1, #0
 800af6a:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < LEAFErrorNil; ++i)
 800af6c:	3301      	adds	r3, #1
 800af6e:	2b02      	cmp	r3, #2
 800af70:	ddf6      	ble.n	800af60 <LEAF_init+0x44>
}
 800af72:	ecbd 8b02 	vpop	{d8}
 800af76:	bd38      	pop	{r3, r4, r5, pc}
 800af78:	40c90fdb 	.word	0x40c90fdb
 800af7c:	0800af19 	.word	0x0800af19

0800af80 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 800af80:	b510      	push	{r4, lr}
    leaf->errorState[whichone] = 1;
 800af82:	f101 030e 	add.w	r3, r1, #14
 800af86:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800af8a:	2401      	movs	r4, #1
 800af8c:	605c      	str	r4, [r3, #4]
    leaf->errorCallback(leaf, whichone);
 800af8e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800af90:	4798      	blx	r3
}
 800af92:	bd10      	pop	{r4, pc}

0800af94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 800af94:	f8df d034 	ldr.w	sp, [pc, #52]	; 800afcc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800af98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800af9a:	e003      	b.n	800afa4 <LoopCopyDataInit>

0800af9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800af9c:	4b0c      	ldr	r3, [pc, #48]	; (800afd0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800af9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800afa0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800afa2:	3104      	adds	r1, #4

0800afa4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800afa4:	480b      	ldr	r0, [pc, #44]	; (800afd4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800afa6:	4b0c      	ldr	r3, [pc, #48]	; (800afd8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800afa8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800afaa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800afac:	d3f6      	bcc.n	800af9c <CopyDataInit>
  ldr  r2, =_sbss
 800afae:	4a0b      	ldr	r2, [pc, #44]	; (800afdc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800afb0:	e002      	b.n	800afb8 <LoopFillZerobss>

0800afb2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800afb2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800afb4:	f842 3b04 	str.w	r3, [r2], #4

0800afb8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800afb8:	4b09      	ldr	r3, [pc, #36]	; (800afe0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800afba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800afbc:	d3f9      	bcc.n	800afb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800afbe:	f7fe fb5b 	bl	8009678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800afc2:	f000 f817 	bl	800aff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800afc6:	f7fd ffa9 	bl	8008f1c <main>
  bx  lr    
 800afca:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 800afcc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800afd0:	080a58f8 	.word	0x080a58f8
  ldr  r0, =_sdata
 800afd4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800afd8:	200000e8 	.word	0x200000e8
  ldr  r2, =_sbss
 800afdc:	200000e8 	.word	0x200000e8
  ldr  r3, = _ebss
 800afe0:	20015bfc 	.word	0x20015bfc

0800afe4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800afe4:	e7fe      	b.n	800afe4 <ADC3_IRQHandler>
	...

0800afe8 <__errno>:
 800afe8:	4b01      	ldr	r3, [pc, #4]	; (800aff0 <__errno+0x8>)
 800afea:	6818      	ldr	r0, [r3, #0]
 800afec:	4770      	bx	lr
 800afee:	bf00      	nop
 800aff0:	20000080 	.word	0x20000080

0800aff4 <__libc_init_array>:
 800aff4:	b570      	push	{r4, r5, r6, lr}
 800aff6:	4e0d      	ldr	r6, [pc, #52]	; (800b02c <__libc_init_array+0x38>)
 800aff8:	4c0d      	ldr	r4, [pc, #52]	; (800b030 <__libc_init_array+0x3c>)
 800affa:	1ba4      	subs	r4, r4, r6
 800affc:	10a4      	asrs	r4, r4, #2
 800affe:	2500      	movs	r5, #0
 800b000:	42a5      	cmp	r5, r4
 800b002:	d109      	bne.n	800b018 <__libc_init_array+0x24>
 800b004:	4e0b      	ldr	r6, [pc, #44]	; (800b034 <__libc_init_array+0x40>)
 800b006:	4c0c      	ldr	r4, [pc, #48]	; (800b038 <__libc_init_array+0x44>)
 800b008:	f002 f960 	bl	800d2cc <_init>
 800b00c:	1ba4      	subs	r4, r4, r6
 800b00e:	10a4      	asrs	r4, r4, #2
 800b010:	2500      	movs	r5, #0
 800b012:	42a5      	cmp	r5, r4
 800b014:	d105      	bne.n	800b022 <__libc_init_array+0x2e>
 800b016:	bd70      	pop	{r4, r5, r6, pc}
 800b018:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b01c:	4798      	blx	r3
 800b01e:	3501      	adds	r5, #1
 800b020:	e7ee      	b.n	800b000 <__libc_init_array+0xc>
 800b022:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b026:	4798      	blx	r3
 800b028:	3501      	adds	r5, #1
 800b02a:	e7f2      	b.n	800b012 <__libc_init_array+0x1e>
 800b02c:	080a58f0 	.word	0x080a58f0
 800b030:	080a58f0 	.word	0x080a58f0
 800b034:	080a58f0 	.word	0x080a58f0
 800b038:	080a58f4 	.word	0x080a58f4

0800b03c <memset>:
 800b03c:	4402      	add	r2, r0
 800b03e:	4603      	mov	r3, r0
 800b040:	4293      	cmp	r3, r2
 800b042:	d100      	bne.n	800b046 <memset+0xa>
 800b044:	4770      	bx	lr
 800b046:	f803 1b01 	strb.w	r1, [r3], #1
 800b04a:	e7f9      	b.n	800b040 <memset+0x4>

0800b04c <fabsf>:
 800b04c:	ee10 3a10 	vmov	r3, s0
 800b050:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b054:	ee00 3a10 	vmov	s0, r3
 800b058:	4770      	bx	lr
	...

0800b05c <logf>:
 800b05c:	ee10 3a10 	vmov	r3, s0
 800b060:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800b064:	b410      	push	{r4}
 800b066:	d057      	beq.n	800b118 <logf+0xbc>
 800b068:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 800b06c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800b070:	d31a      	bcc.n	800b0a8 <logf+0x4c>
 800b072:	005a      	lsls	r2, r3, #1
 800b074:	d104      	bne.n	800b080 <logf+0x24>
 800b076:	2001      	movs	r0, #1
 800b078:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b07c:	f001 bdf8 	b.w	800cc70 <__math_divzerof>
 800b080:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b084:	d045      	beq.n	800b112 <logf+0xb6>
 800b086:	2b00      	cmp	r3, #0
 800b088:	db02      	blt.n	800b090 <logf+0x34>
 800b08a:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800b08e:	d303      	bcc.n	800b098 <logf+0x3c>
 800b090:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b094:	f001 bdfc 	b.w	800cc90 <__math_invalidf>
 800b098:	eddf 7a21 	vldr	s15, [pc, #132]	; 800b120 <logf+0xc4>
 800b09c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b0a0:	ee10 3a10 	vmov	r3, s0
 800b0a4:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 800b0a8:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 800b0ac:	491d      	ldr	r1, [pc, #116]	; (800b124 <logf+0xc8>)
 800b0ae:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800b0b2:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800b0b6:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800b0ba:	0dd4      	lsrs	r4, r2, #23
 800b0bc:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800b0c0:	05e4      	lsls	r4, r4, #23
 800b0c2:	ed90 5b00 	vldr	d5, [r0]
 800b0c6:	1b1b      	subs	r3, r3, r4
 800b0c8:	ee07 3a90 	vmov	s15, r3
 800b0cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b0d0:	eea5 6b07 	vfma.f64	d6, d5, d7
 800b0d4:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 800b0d8:	ee26 3b06 	vmul.f64	d3, d6, d6
 800b0dc:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 800b0e0:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b0e4:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 800b0e8:	15d2      	asrs	r2, r2, #23
 800b0ea:	ed91 4b40 	vldr	d4, [r1, #256]	; 0x100
 800b0ee:	eea5 7b03 	vfma.f64	d7, d5, d3
 800b0f2:	eeb0 5b47 	vmov.f64	d5, d7
 800b0f6:	ed90 0b02 	vldr	d0, [r0, #8]
 800b0fa:	ee07 2a90 	vmov	s15, r2
 800b0fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b102:	eea7 0b04 	vfma.f64	d0, d7, d4
 800b106:	ee30 0b06 	vadd.f64	d0, d0, d6
 800b10a:	eea3 0b05 	vfma.f64	d0, d3, d5
 800b10e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b112:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b116:	4770      	bx	lr
 800b118:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800b128 <logf+0xcc>
 800b11c:	e7f9      	b.n	800b112 <logf+0xb6>
 800b11e:	bf00      	nop
 800b120:	4b000000 	.word	0x4b000000
 800b124:	080a5378 	.word	0x080a5378
 800b128:	00000000 	.word	0x00000000

0800b12c <tanf>:
 800b12c:	ee10 3a10 	vmov	r3, s0
 800b130:	b507      	push	{r0, r1, r2, lr}
 800b132:	4a10      	ldr	r2, [pc, #64]	; (800b174 <tanf+0x48>)
 800b134:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b138:	4293      	cmp	r3, r2
 800b13a:	dc05      	bgt.n	800b148 <tanf+0x1c>
 800b13c:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800b178 <tanf+0x4c>
 800b140:	2001      	movs	r0, #1
 800b142:	f001 fca3 	bl	800ca8c <__kernel_tanf>
 800b146:	e004      	b.n	800b152 <tanf+0x26>
 800b148:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b14c:	db04      	blt.n	800b158 <tanf+0x2c>
 800b14e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b152:	b003      	add	sp, #12
 800b154:	f85d fb04 	ldr.w	pc, [sp], #4
 800b158:	4668      	mov	r0, sp
 800b15a:	f001 f8e9 	bl	800c330 <__ieee754_rem_pio2f>
 800b15e:	0040      	lsls	r0, r0, #1
 800b160:	f000 0002 	and.w	r0, r0, #2
 800b164:	f1c0 0001 	rsb	r0, r0, #1
 800b168:	eddd 0a01 	vldr	s1, [sp, #4]
 800b16c:	ed9d 0a00 	vldr	s0, [sp]
 800b170:	e7e7      	b.n	800b142 <tanf+0x16>
 800b172:	bf00      	nop
 800b174:	3f490fda 	.word	0x3f490fda
 800b178:	00000000 	.word	0x00000000

0800b17c <tanhf>:
 800b17c:	b510      	push	{r4, lr}
 800b17e:	ee10 4a10 	vmov	r4, s0
 800b182:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b186:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b18a:	ed2d 8b02 	vpush	{d8}
 800b18e:	eef0 7a40 	vmov.f32	s15, s0
 800b192:	db0c      	blt.n	800b1ae <tanhf+0x32>
 800b194:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b198:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b19c:	2c00      	cmp	r4, #0
 800b19e:	bfac      	ite	ge
 800b1a0:	ee30 0a07 	vaddge.f32	s0, s0, s14
 800b1a4:	ee30 0a47 	vsublt.f32	s0, s0, s14
 800b1a8:	ecbd 8b02 	vpop	{d8}
 800b1ac:	bd10      	pop	{r4, pc}
 800b1ae:	4a1b      	ldr	r2, [pc, #108]	; (800b21c <tanhf+0xa0>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	dc30      	bgt.n	800b216 <tanhf+0x9a>
 800b1b4:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800b1b8:	da06      	bge.n	800b1c8 <tanhf+0x4c>
 800b1ba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b1be:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b1c2:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b1c6:	e7ef      	b.n	800b1a8 <tanhf+0x2c>
 800b1c8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800b1cc:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 800b1d0:	db12      	blt.n	800b1f8 <tanhf+0x7c>
 800b1d2:	f7ff ff3b 	bl	800b04c <fabsf>
 800b1d6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b1da:	f001 fe8f 	bl	800cefc <expm1f>
 800b1de:	ee30 0a08 	vadd.f32	s0, s0, s16
 800b1e2:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800b1e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b1ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b1ee:	2c00      	cmp	r4, #0
 800b1f0:	bfb8      	it	lt
 800b1f2:	eeb1 0a40 	vneglt.f32	s0, s0
 800b1f6:	e7d7      	b.n	800b1a8 <tanhf+0x2c>
 800b1f8:	f7ff ff28 	bl	800b04c <fabsf>
 800b1fc:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800b200:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b204:	f001 fe7a 	bl	800cefc <expm1f>
 800b208:	ee70 7a08 	vadd.f32	s15, s0, s16
 800b20c:	eeb1 7a40 	vneg.f32	s14, s0
 800b210:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b214:	e7eb      	b.n	800b1ee <tanhf+0x72>
 800b216:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b21a:	e7e8      	b.n	800b1ee <tanhf+0x72>
 800b21c:	41afffff 	.word	0x41afffff

0800b220 <exp>:
 800b220:	b510      	push	{r4, lr}
 800b222:	ed2d 8b04 	vpush	{d8-d9}
 800b226:	eeb0 8b40 	vmov.f64	d8, d0
 800b22a:	4c33      	ldr	r4, [pc, #204]	; (800b2f8 <exp+0xd8>)
 800b22c:	b08a      	sub	sp, #40	; 0x28
 800b22e:	f000 fa7b 	bl	800b728 <__ieee754_exp>
 800b232:	f994 3000 	ldrsb.w	r3, [r4]
 800b236:	eeb0 9b40 	vmov.f64	d9, d0
 800b23a:	3301      	adds	r3, #1
 800b23c:	d029      	beq.n	800b292 <exp+0x72>
 800b23e:	eeb0 0b48 	vmov.f64	d0, d8
 800b242:	f001 fd3d 	bl	800ccc0 <finite>
 800b246:	b320      	cbz	r0, 800b292 <exp+0x72>
 800b248:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800b2e8 <exp+0xc8>
 800b24c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b254:	dd2e      	ble.n	800b2b4 <exp+0x94>
 800b256:	2303      	movs	r3, #3
 800b258:	9300      	str	r3, [sp, #0]
 800b25a:	4b28      	ldr	r3, [pc, #160]	; (800b2fc <exp+0xdc>)
 800b25c:	9301      	str	r3, [sp, #4]
 800b25e:	2300      	movs	r3, #0
 800b260:	9308      	str	r3, [sp, #32]
 800b262:	f994 3000 	ldrsb.w	r3, [r4]
 800b266:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b26a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b26e:	b9b3      	cbnz	r3, 800b29e <exp+0x7e>
 800b270:	4b23      	ldr	r3, [pc, #140]	; (800b300 <exp+0xe0>)
 800b272:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b276:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b27a:	4668      	mov	r0, sp
 800b27c:	f001 fd28 	bl	800ccd0 <matherr>
 800b280:	b198      	cbz	r0, 800b2aa <exp+0x8a>
 800b282:	9b08      	ldr	r3, [sp, #32]
 800b284:	b11b      	cbz	r3, 800b28e <exp+0x6e>
 800b286:	f7ff feaf 	bl	800afe8 <__errno>
 800b28a:	9b08      	ldr	r3, [sp, #32]
 800b28c:	6003      	str	r3, [r0, #0]
 800b28e:	ed9d 9b06 	vldr	d9, [sp, #24]
 800b292:	eeb0 0b49 	vmov.f64	d0, d9
 800b296:	b00a      	add	sp, #40	; 0x28
 800b298:	ecbd 8b04 	vpop	{d8-d9}
 800b29c:	bd10      	pop	{r4, pc}
 800b29e:	4919      	ldr	r1, [pc, #100]	; (800b304 <exp+0xe4>)
 800b2a0:	2000      	movs	r0, #0
 800b2a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	d1e7      	bne.n	800b27a <exp+0x5a>
 800b2aa:	f7ff fe9d 	bl	800afe8 <__errno>
 800b2ae:	2322      	movs	r3, #34	; 0x22
 800b2b0:	6003      	str	r3, [r0, #0]
 800b2b2:	e7e6      	b.n	800b282 <exp+0x62>
 800b2b4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800b2f0 <exp+0xd0>
 800b2b8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b2bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2c0:	d5e7      	bpl.n	800b292 <exp+0x72>
 800b2c2:	2304      	movs	r3, #4
 800b2c4:	9300      	str	r3, [sp, #0]
 800b2c6:	4b0d      	ldr	r3, [pc, #52]	; (800b2fc <exp+0xdc>)
 800b2c8:	9301      	str	r3, [sp, #4]
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	9308      	str	r3, [sp, #32]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b2d6:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b2da:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b2de:	f994 3000 	ldrsb.w	r3, [r4]
 800b2e2:	e7e0      	b.n	800b2a6 <exp+0x86>
 800b2e4:	f3af 8000 	nop.w
 800b2e8:	fefa39ef 	.word	0xfefa39ef
 800b2ec:	40862e42 	.word	0x40862e42
 800b2f0:	d52d3051 	.word	0xd52d3051
 800b2f4:	c0874910 	.word	0xc0874910
 800b2f8:	200000e4 	.word	0x200000e4
 800b2fc:	080a5498 	.word	0x080a5498
 800b300:	47efffff 	.word	0x47efffff
 800b304:	7ff00000 	.word	0x7ff00000

0800b308 <log>:
 800b308:	b500      	push	{lr}
 800b30a:	ed2d 8b02 	vpush	{d8}
 800b30e:	eeb0 8b40 	vmov.f64	d8, d0
 800b312:	b08b      	sub	sp, #44	; 0x2c
 800b314:	f000 fb10 	bl	800b938 <__ieee754_log>
 800b318:	4b2d      	ldr	r3, [pc, #180]	; (800b3d0 <log+0xc8>)
 800b31a:	f993 3000 	ldrsb.w	r3, [r3]
 800b31e:	1c5a      	adds	r2, r3, #1
 800b320:	d051      	beq.n	800b3c6 <log+0xbe>
 800b322:	eeb4 8b48 	vcmp.f64	d8, d8
 800b326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b32a:	d64c      	bvs.n	800b3c6 <log+0xbe>
 800b32c:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800b330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b334:	dc47      	bgt.n	800b3c6 <log+0xbe>
 800b336:	4a27      	ldr	r2, [pc, #156]	; (800b3d4 <log+0xcc>)
 800b338:	9201      	str	r2, [sp, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	9208      	str	r2, [sp, #32]
 800b33e:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b342:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b346:	b993      	cbnz	r3, 800b36e <log+0x66>
 800b348:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b34c:	4922      	ldr	r1, [pc, #136]	; (800b3d8 <log+0xd0>)
 800b34e:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 800b352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b356:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b35a:	d025      	beq.n	800b3a8 <log+0xa0>
 800b35c:	2201      	movs	r2, #1
 800b35e:	2b02      	cmp	r3, #2
 800b360:	9200      	str	r2, [sp, #0]
 800b362:	d116      	bne.n	800b392 <log+0x8a>
 800b364:	f7ff fe40 	bl	800afe8 <__errno>
 800b368:	2321      	movs	r3, #33	; 0x21
 800b36a:	6003      	str	r3, [r0, #0]
 800b36c:	e016      	b.n	800b39c <log+0x94>
 800b36e:	491b      	ldr	r1, [pc, #108]	; (800b3dc <log+0xd4>)
 800b370:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b374:	2000      	movs	r0, #0
 800b376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b37a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b37e:	d1ed      	bne.n	800b35c <log+0x54>
 800b380:	2202      	movs	r2, #2
 800b382:	4293      	cmp	r3, r2
 800b384:	9200      	str	r2, [sp, #0]
 800b386:	d111      	bne.n	800b3ac <log+0xa4>
 800b388:	f7ff fe2e 	bl	800afe8 <__errno>
 800b38c:	2322      	movs	r3, #34	; 0x22
 800b38e:	6003      	str	r3, [r0, #0]
 800b390:	e011      	b.n	800b3b6 <log+0xae>
 800b392:	4668      	mov	r0, sp
 800b394:	f001 fc9c 	bl	800ccd0 <matherr>
 800b398:	2800      	cmp	r0, #0
 800b39a:	d0e3      	beq.n	800b364 <log+0x5c>
 800b39c:	4810      	ldr	r0, [pc, #64]	; (800b3e0 <log+0xd8>)
 800b39e:	f001 fc9b 	bl	800ccd8 <nan>
 800b3a2:	ed8d 0b06 	vstr	d0, [sp, #24]
 800b3a6:	e006      	b.n	800b3b6 <log+0xae>
 800b3a8:	2302      	movs	r3, #2
 800b3aa:	9300      	str	r3, [sp, #0]
 800b3ac:	4668      	mov	r0, sp
 800b3ae:	f001 fc8f 	bl	800ccd0 <matherr>
 800b3b2:	2800      	cmp	r0, #0
 800b3b4:	d0e8      	beq.n	800b388 <log+0x80>
 800b3b6:	9b08      	ldr	r3, [sp, #32]
 800b3b8:	b11b      	cbz	r3, 800b3c2 <log+0xba>
 800b3ba:	f7ff fe15 	bl	800afe8 <__errno>
 800b3be:	9b08      	ldr	r3, [sp, #32]
 800b3c0:	6003      	str	r3, [r0, #0]
 800b3c2:	ed9d 0b06 	vldr	d0, [sp, #24]
 800b3c6:	b00b      	add	sp, #44	; 0x2c
 800b3c8:	ecbd 8b02 	vpop	{d8}
 800b3cc:	f85d fb04 	ldr.w	pc, [sp], #4
 800b3d0:	200000e4 	.word	0x200000e4
 800b3d4:	080a549c 	.word	0x080a549c
 800b3d8:	c7efffff 	.word	0xc7efffff
 800b3dc:	fff00000 	.word	0xfff00000
 800b3e0:	080a54aa 	.word	0x080a54aa
 800b3e4:	00000000 	.word	0x00000000

0800b3e8 <pow>:
 800b3e8:	b570      	push	{r4, r5, r6, lr}
 800b3ea:	ed2d 8b0a 	vpush	{d8-d12}
 800b3ee:	eeb0 9b40 	vmov.f64	d9, d0
 800b3f2:	eeb0 8b41 	vmov.f64	d8, d1
 800b3f6:	4c8c      	ldr	r4, [pc, #560]	; (800b628 <pow+0x240>)
 800b3f8:	b08a      	sub	sp, #40	; 0x28
 800b3fa:	f000 fbb9 	bl	800bb70 <__ieee754_pow>
 800b3fe:	f994 3000 	ldrsb.w	r3, [r4]
 800b402:	eeb0 ab40 	vmov.f64	d10, d0
 800b406:	1c5a      	adds	r2, r3, #1
 800b408:	4626      	mov	r6, r4
 800b40a:	d04b      	beq.n	800b4a4 <pow+0xbc>
 800b40c:	eeb4 8b48 	vcmp.f64	d8, d8
 800b410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b414:	d646      	bvs.n	800b4a4 <pow+0xbc>
 800b416:	eeb4 9b49 	vcmp.f64	d9, d9
 800b41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b41e:	d719      	bvc.n	800b454 <pow+0x6c>
 800b420:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b428:	d13c      	bne.n	800b4a4 <pow+0xbc>
 800b42a:	2201      	movs	r2, #1
 800b42c:	9200      	str	r2, [sp, #0]
 800b42e:	497f      	ldr	r1, [pc, #508]	; (800b62c <pow+0x244>)
 800b430:	4a7f      	ldr	r2, [pc, #508]	; (800b630 <pow+0x248>)
 800b432:	9201      	str	r2, [sp, #4]
 800b434:	2000      	movs	r0, #0
 800b436:	2200      	movs	r2, #0
 800b438:	2b02      	cmp	r3, #2
 800b43a:	9208      	str	r2, [sp, #32]
 800b43c:	ed8d 9b02 	vstr	d9, [sp, #8]
 800b440:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b444:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b448:	d02a      	beq.n	800b4a0 <pow+0xb8>
 800b44a:	4668      	mov	r0, sp
 800b44c:	f001 fc40 	bl	800ccd0 <matherr>
 800b450:	bb00      	cbnz	r0, 800b494 <pow+0xac>
 800b452:	e04e      	b.n	800b4f2 <pow+0x10a>
 800b454:	ed9f bb72 	vldr	d11, [pc, #456]	; 800b620 <pow+0x238>
 800b458:	eeb4 9b4b 	vcmp.f64	d9, d11
 800b45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b460:	eeb0 cb4b 	vmov.f64	d12, d11
 800b464:	d14a      	bne.n	800b4fc <pow+0x114>
 800b466:	eeb4 8b4b 	vcmp.f64	d8, d11
 800b46a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b46e:	d11f      	bne.n	800b4b0 <pow+0xc8>
 800b470:	2201      	movs	r2, #1
 800b472:	9200      	str	r2, [sp, #0]
 800b474:	4a6e      	ldr	r2, [pc, #440]	; (800b630 <pow+0x248>)
 800b476:	9201      	str	r2, [sp, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	9208      	str	r2, [sp, #32]
 800b47c:	ed8d 9b02 	vstr	d9, [sp, #8]
 800b480:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b484:	ed8d bb06 	vstr	d11, [sp, #24]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d0de      	beq.n	800b44a <pow+0x62>
 800b48c:	4b67      	ldr	r3, [pc, #412]	; (800b62c <pow+0x244>)
 800b48e:	2200      	movs	r2, #0
 800b490:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b494:	9b08      	ldr	r3, [sp, #32]
 800b496:	b11b      	cbz	r3, 800b4a0 <pow+0xb8>
 800b498:	f7ff fda6 	bl	800afe8 <__errno>
 800b49c:	9b08      	ldr	r3, [sp, #32]
 800b49e:	6003      	str	r3, [r0, #0]
 800b4a0:	ed9d ab06 	vldr	d10, [sp, #24]
 800b4a4:	eeb0 0b4a 	vmov.f64	d0, d10
 800b4a8:	b00a      	add	sp, #40	; 0x28
 800b4aa:	ecbd 8b0a 	vpop	{d8-d12}
 800b4ae:	bd70      	pop	{r4, r5, r6, pc}
 800b4b0:	eeb0 0b48 	vmov.f64	d0, d8
 800b4b4:	f001 fc04 	bl	800ccc0 <finite>
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	d0f3      	beq.n	800b4a4 <pow+0xbc>
 800b4bc:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800b4c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4c4:	d5ee      	bpl.n	800b4a4 <pow+0xbc>
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	9300      	str	r3, [sp, #0]
 800b4ca:	4b59      	ldr	r3, [pc, #356]	; (800b630 <pow+0x248>)
 800b4cc:	9301      	str	r3, [sp, #4]
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	9308      	str	r3, [sp, #32]
 800b4d2:	f994 3000 	ldrsb.w	r3, [r4]
 800b4d6:	ed8d 9b02 	vstr	d9, [sp, #8]
 800b4da:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b4de:	b913      	cbnz	r3, 800b4e6 <pow+0xfe>
 800b4e0:	ed8d bb06 	vstr	d11, [sp, #24]
 800b4e4:	e7b1      	b.n	800b44a <pow+0x62>
 800b4e6:	4953      	ldr	r1, [pc, #332]	; (800b634 <pow+0x24c>)
 800b4e8:	2000      	movs	r0, #0
 800b4ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b4ee:	2b02      	cmp	r3, #2
 800b4f0:	d1ab      	bne.n	800b44a <pow+0x62>
 800b4f2:	f7ff fd79 	bl	800afe8 <__errno>
 800b4f6:	2321      	movs	r3, #33	; 0x21
 800b4f8:	6003      	str	r3, [r0, #0]
 800b4fa:	e7cb      	b.n	800b494 <pow+0xac>
 800b4fc:	f001 fbe0 	bl	800ccc0 <finite>
 800b500:	4605      	mov	r5, r0
 800b502:	2800      	cmp	r0, #0
 800b504:	d164      	bne.n	800b5d0 <pow+0x1e8>
 800b506:	eeb0 0b49 	vmov.f64	d0, d9
 800b50a:	f001 fbd9 	bl	800ccc0 <finite>
 800b50e:	2800      	cmp	r0, #0
 800b510:	d05e      	beq.n	800b5d0 <pow+0x1e8>
 800b512:	eeb0 0b48 	vmov.f64	d0, d8
 800b516:	f001 fbd3 	bl	800ccc0 <finite>
 800b51a:	2800      	cmp	r0, #0
 800b51c:	d058      	beq.n	800b5d0 <pow+0x1e8>
 800b51e:	eeb4 ab4a 	vcmp.f64	d10, d10
 800b522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b526:	f994 3000 	ldrsb.w	r3, [r4]
 800b52a:	4a41      	ldr	r2, [pc, #260]	; (800b630 <pow+0x248>)
 800b52c:	d70e      	bvc.n	800b54c <pow+0x164>
 800b52e:	2101      	movs	r1, #1
 800b530:	e9cd 1200 	strd	r1, r2, [sp]
 800b534:	9508      	str	r5, [sp, #32]
 800b536:	ed8d 9b02 	vstr	d9, [sp, #8]
 800b53a:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d0ce      	beq.n	800b4e0 <pow+0xf8>
 800b542:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 800b546:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b54a:	e7d0      	b.n	800b4ee <pow+0x106>
 800b54c:	2103      	movs	r1, #3
 800b54e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b552:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800b556:	ee28 8b07 	vmul.f64	d8, d8, d7
 800b55a:	e9cd 1200 	strd	r1, r2, [sp]
 800b55e:	9508      	str	r5, [sp, #32]
 800b560:	ed8d 9b02 	vstr	d9, [sp, #8]
 800b564:	b9fb      	cbnz	r3, 800b5a6 <pow+0x1be>
 800b566:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800b56a:	4b33      	ldr	r3, [pc, #204]	; (800b638 <pow+0x250>)
 800b56c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b574:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b578:	d54b      	bpl.n	800b612 <pow+0x22a>
 800b57a:	eeb0 0b48 	vmov.f64	d0, d8
 800b57e:	f001 fbb3 	bl	800cce8 <rint>
 800b582:	eeb4 0b48 	vcmp.f64	d0, d8
 800b586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b58a:	d004      	beq.n	800b596 <pow+0x1ae>
 800b58c:	4b2b      	ldr	r3, [pc, #172]	; (800b63c <pow+0x254>)
 800b58e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b592:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b596:	f996 3000 	ldrsb.w	r3, [r6]
 800b59a:	2b02      	cmp	r3, #2
 800b59c:	d139      	bne.n	800b612 <pow+0x22a>
 800b59e:	f7ff fd23 	bl	800afe8 <__errno>
 800b5a2:	2322      	movs	r3, #34	; 0x22
 800b5a4:	e7a8      	b.n	800b4f8 <pow+0x110>
 800b5a6:	4b26      	ldr	r3, [pc, #152]	; (800b640 <pow+0x258>)
 800b5a8:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b5b6:	d5ee      	bpl.n	800b596 <pow+0x1ae>
 800b5b8:	eeb0 0b48 	vmov.f64	d0, d8
 800b5bc:	f001 fb94 	bl	800cce8 <rint>
 800b5c0:	eeb4 0b48 	vcmp.f64	d0, d8
 800b5c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5c8:	d0e5      	beq.n	800b596 <pow+0x1ae>
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	4b19      	ldr	r3, [pc, #100]	; (800b634 <pow+0x24c>)
 800b5ce:	e7e0      	b.n	800b592 <pow+0x1aa>
 800b5d0:	eeb5 ab40 	vcmp.f64	d10, #0.0
 800b5d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5d8:	f47f af64 	bne.w	800b4a4 <pow+0xbc>
 800b5dc:	eeb0 0b49 	vmov.f64	d0, d9
 800b5e0:	f001 fb6e 	bl	800ccc0 <finite>
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	f43f af5d 	beq.w	800b4a4 <pow+0xbc>
 800b5ea:	eeb0 0b48 	vmov.f64	d0, d8
 800b5ee:	f001 fb67 	bl	800ccc0 <finite>
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	f43f af56 	beq.w	800b4a4 <pow+0xbc>
 800b5f8:	2304      	movs	r3, #4
 800b5fa:	9300      	str	r3, [sp, #0]
 800b5fc:	4b0c      	ldr	r3, [pc, #48]	; (800b630 <pow+0x248>)
 800b5fe:	9301      	str	r3, [sp, #4]
 800b600:	2300      	movs	r3, #0
 800b602:	9308      	str	r3, [sp, #32]
 800b604:	ed8d 9b02 	vstr	d9, [sp, #8]
 800b608:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b60c:	ed8d cb06 	vstr	d12, [sp, #24]
 800b610:	e7c1      	b.n	800b596 <pow+0x1ae>
 800b612:	4668      	mov	r0, sp
 800b614:	f001 fb5c 	bl	800ccd0 <matherr>
 800b618:	2800      	cmp	r0, #0
 800b61a:	f47f af3b 	bne.w	800b494 <pow+0xac>
 800b61e:	e7be      	b.n	800b59e <pow+0x1b6>
	...
 800b628:	200000e4 	.word	0x200000e4
 800b62c:	3ff00000 	.word	0x3ff00000
 800b630:	080a54a0 	.word	0x080a54a0
 800b634:	fff00000 	.word	0xfff00000
 800b638:	47efffff 	.word	0x47efffff
 800b63c:	c7efffff 	.word	0xc7efffff
 800b640:	7ff00000 	.word	0x7ff00000

0800b644 <log10f>:
 800b644:	b500      	push	{lr}
 800b646:	ed2d 8b02 	vpush	{d8}
 800b64a:	b08b      	sub	sp, #44	; 0x2c
 800b64c:	eeb0 8a40 	vmov.f32	s16, s0
 800b650:	f000 fe18 	bl	800c284 <__ieee754_log10f>
 800b654:	4b2f      	ldr	r3, [pc, #188]	; (800b714 <log10f+0xd0>)
 800b656:	f993 3000 	ldrsb.w	r3, [r3]
 800b65a:	1c5a      	adds	r2, r3, #1
 800b65c:	d055      	beq.n	800b70a <log10f+0xc6>
 800b65e:	eeb4 8a48 	vcmp.f32	s16, s16
 800b662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b666:	d650      	bvs.n	800b70a <log10f+0xc6>
 800b668:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b66c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b670:	d84b      	bhi.n	800b70a <log10f+0xc6>
 800b672:	4a29      	ldr	r2, [pc, #164]	; (800b718 <log10f+0xd4>)
 800b674:	9201      	str	r2, [sp, #4]
 800b676:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
 800b67a:	2200      	movs	r2, #0
 800b67c:	9208      	str	r2, [sp, #32]
 800b67e:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b682:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b686:	b993      	cbnz	r3, 800b6ae <log10f+0x6a>
 800b688:	4924      	ldr	r1, [pc, #144]	; (800b71c <log10f+0xd8>)
 800b68a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b68e:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 800b692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b696:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b69a:	d025      	beq.n	800b6e8 <log10f+0xa4>
 800b69c:	2201      	movs	r2, #1
 800b69e:	2b02      	cmp	r3, #2
 800b6a0:	9200      	str	r2, [sp, #0]
 800b6a2:	d116      	bne.n	800b6d2 <log10f+0x8e>
 800b6a4:	f7ff fca0 	bl	800afe8 <__errno>
 800b6a8:	2321      	movs	r3, #33	; 0x21
 800b6aa:	6003      	str	r3, [r0, #0]
 800b6ac:	e016      	b.n	800b6dc <log10f+0x98>
 800b6ae:	491c      	ldr	r1, [pc, #112]	; (800b720 <log10f+0xdc>)
 800b6b0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b6be:	d1ed      	bne.n	800b69c <log10f+0x58>
 800b6c0:	2202      	movs	r2, #2
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	9200      	str	r2, [sp, #0]
 800b6c6:	d111      	bne.n	800b6ec <log10f+0xa8>
 800b6c8:	f7ff fc8e 	bl	800afe8 <__errno>
 800b6cc:	2322      	movs	r3, #34	; 0x22
 800b6ce:	6003      	str	r3, [r0, #0]
 800b6d0:	e011      	b.n	800b6f6 <log10f+0xb2>
 800b6d2:	4668      	mov	r0, sp
 800b6d4:	f001 fafc 	bl	800ccd0 <matherr>
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	d0e3      	beq.n	800b6a4 <log10f+0x60>
 800b6dc:	4811      	ldr	r0, [pc, #68]	; (800b724 <log10f+0xe0>)
 800b6de:	f001 fafb 	bl	800ccd8 <nan>
 800b6e2:	ed8d 0b06 	vstr	d0, [sp, #24]
 800b6e6:	e006      	b.n	800b6f6 <log10f+0xb2>
 800b6e8:	2302      	movs	r3, #2
 800b6ea:	9300      	str	r3, [sp, #0]
 800b6ec:	4668      	mov	r0, sp
 800b6ee:	f001 faef 	bl	800ccd0 <matherr>
 800b6f2:	2800      	cmp	r0, #0
 800b6f4:	d0e8      	beq.n	800b6c8 <log10f+0x84>
 800b6f6:	9b08      	ldr	r3, [sp, #32]
 800b6f8:	b11b      	cbz	r3, 800b702 <log10f+0xbe>
 800b6fa:	f7ff fc75 	bl	800afe8 <__errno>
 800b6fe:	9b08      	ldr	r3, [sp, #32]
 800b700:	6003      	str	r3, [r0, #0]
 800b702:	ed9d 0b06 	vldr	d0, [sp, #24]
 800b706:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b70a:	b00b      	add	sp, #44	; 0x2c
 800b70c:	ecbd 8b02 	vpop	{d8}
 800b710:	f85d fb04 	ldr.w	pc, [sp], #4
 800b714:	200000e4 	.word	0x200000e4
 800b718:	080a54a4 	.word	0x080a54a4
 800b71c:	c7efffff 	.word	0xc7efffff
 800b720:	fff00000 	.word	0xfff00000
 800b724:	080a54aa 	.word	0x080a54aa

0800b728 <__ieee754_exp>:
 800b728:	ee10 1a90 	vmov	r1, s1
 800b72c:	4b7a      	ldr	r3, [pc, #488]	; (800b918 <__ieee754_exp+0x1f0>)
 800b72e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b732:	429a      	cmp	r2, r3
 800b734:	b082      	sub	sp, #8
 800b736:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800b73a:	d928      	bls.n	800b78e <__ieee754_exp+0x66>
 800b73c:	4b77      	ldr	r3, [pc, #476]	; (800b91c <__ieee754_exp+0x1f4>)
 800b73e:	429a      	cmp	r2, r3
 800b740:	d90f      	bls.n	800b762 <__ieee754_exp+0x3a>
 800b742:	ee10 3a10 	vmov	r3, s0
 800b746:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b74a:	430b      	orrs	r3, r1
 800b74c:	d003      	beq.n	800b756 <__ieee754_exp+0x2e>
 800b74e:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b752:	b002      	add	sp, #8
 800b754:	4770      	bx	lr
 800b756:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800b8b0 <__ieee754_exp+0x188>
 800b75a:	2800      	cmp	r0, #0
 800b75c:	fe00 0b07 	vseleq.f64	d0, d0, d7
 800b760:	e7f7      	b.n	800b752 <__ieee754_exp+0x2a>
 800b762:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b8b8 <__ieee754_exp+0x190>
 800b766:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b76a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b76e:	dd04      	ble.n	800b77a <__ieee754_exp+0x52>
 800b770:	ed9f 0b53 	vldr	d0, [pc, #332]	; 800b8c0 <__ieee754_exp+0x198>
 800b774:	ee20 0b00 	vmul.f64	d0, d0, d0
 800b778:	e7eb      	b.n	800b752 <__ieee754_exp+0x2a>
 800b77a:	ed9f 7b53 	vldr	d7, [pc, #332]	; 800b8c8 <__ieee754_exp+0x1a0>
 800b77e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b786:	d505      	bpl.n	800b794 <__ieee754_exp+0x6c>
 800b788:	ed9f 0b49 	vldr	d0, [pc, #292]	; 800b8b0 <__ieee754_exp+0x188>
 800b78c:	e7e1      	b.n	800b752 <__ieee754_exp+0x2a>
 800b78e:	4b64      	ldr	r3, [pc, #400]	; (800b920 <__ieee754_exp+0x1f8>)
 800b790:	429a      	cmp	r2, r3
 800b792:	d956      	bls.n	800b842 <__ieee754_exp+0x11a>
 800b794:	4b63      	ldr	r3, [pc, #396]	; (800b924 <__ieee754_exp+0x1fc>)
 800b796:	429a      	cmp	r2, r3
 800b798:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800b79c:	d838      	bhi.n	800b810 <__ieee754_exp+0xe8>
 800b79e:	4b62      	ldr	r3, [pc, #392]	; (800b928 <__ieee754_exp+0x200>)
 800b7a0:	4413      	add	r3, r2
 800b7a2:	ed93 6b00 	vldr	d6, [r3]
 800b7a6:	4b61      	ldr	r3, [pc, #388]	; (800b92c <__ieee754_exp+0x204>)
 800b7a8:	ee30 6b46 	vsub.f64	d6, d0, d6
 800b7ac:	4413      	add	r3, r2
 800b7ae:	ed93 7b00 	vldr	d7, [r3]
 800b7b2:	f1c0 0301 	rsb	r3, r0, #1
 800b7b6:	1a1b      	subs	r3, r3, r0
 800b7b8:	ee36 0b47 	vsub.f64	d0, d6, d7
 800b7bc:	ed9f 4b44 	vldr	d4, [pc, #272]	; 800b8d0 <__ieee754_exp+0x1a8>
 800b7c0:	ee20 5b00 	vmul.f64	d5, d0, d0
 800b7c4:	ed9f 3b44 	vldr	d3, [pc, #272]	; 800b8d8 <__ieee754_exp+0x1b0>
 800b7c8:	eea5 3b04 	vfma.f64	d3, d5, d4
 800b7cc:	ed9f 4b44 	vldr	d4, [pc, #272]	; 800b8e0 <__ieee754_exp+0x1b8>
 800b7d0:	eea3 4b05 	vfma.f64	d4, d3, d5
 800b7d4:	ed9f 3b44 	vldr	d3, [pc, #272]	; 800b8e8 <__ieee754_exp+0x1c0>
 800b7d8:	eea4 3b05 	vfma.f64	d3, d4, d5
 800b7dc:	ed9f 4b44 	vldr	d4, [pc, #272]	; 800b8f0 <__ieee754_exp+0x1c8>
 800b7e0:	eea3 4b05 	vfma.f64	d4, d3, d5
 800b7e4:	eeb0 3b40 	vmov.f64	d3, d0
 800b7e8:	eea4 3b45 	vfms.f64	d3, d4, d5
 800b7ec:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 800b7f0:	eeb0 5b43 	vmov.f64	d5, d3
 800b7f4:	ee20 2b03 	vmul.f64	d2, d0, d3
 800b7f8:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 800b7fc:	bba3      	cbnz	r3, 800b868 <__ieee754_exp+0x140>
 800b7fe:	ee35 5b44 	vsub.f64	d5, d5, d4
 800b802:	ee82 7b05 	vdiv.f64	d7, d2, d5
 800b806:	ee37 0b40 	vsub.f64	d0, d7, d0
 800b80a:	ee33 0b40 	vsub.f64	d0, d3, d0
 800b80e:	e7a0      	b.n	800b752 <__ieee754_exp+0x2a>
 800b810:	4b47      	ldr	r3, [pc, #284]	; (800b930 <__ieee754_exp+0x208>)
 800b812:	4413      	add	r3, r2
 800b814:	ed93 7b00 	vldr	d7, [r3]
 800b818:	ed9f 6b37 	vldr	d6, [pc, #220]	; 800b8f8 <__ieee754_exp+0x1d0>
 800b81c:	ed9f 5b38 	vldr	d5, [pc, #224]	; 800b900 <__ieee754_exp+0x1d8>
 800b820:	eea0 7b06 	vfma.f64	d7, d0, d6
 800b824:	ed9f 6b38 	vldr	d6, [pc, #224]	; 800b908 <__ieee754_exp+0x1e0>
 800b828:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b82c:	ee17 3a90 	vmov	r3, s15
 800b830:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b834:	eea7 0b46 	vfms.f64	d0, d7, d6
 800b838:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b83c:	eeb0 6b40 	vmov.f64	d6, d0
 800b840:	e7ba      	b.n	800b7b8 <__ieee754_exp+0x90>
 800b842:	4b3c      	ldr	r3, [pc, #240]	; (800b934 <__ieee754_exp+0x20c>)
 800b844:	429a      	cmp	r2, r3
 800b846:	d80d      	bhi.n	800b864 <__ieee754_exp+0x13c>
 800b848:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800b84c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 800b8c0 <__ieee754_exp+0x198>
 800b850:	ee30 5b05 	vadd.f64	d5, d0, d5
 800b854:	eeb4 5bc4 	vcmpe.f64	d5, d4
 800b858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b85c:	dd02      	ble.n	800b864 <__ieee754_exp+0x13c>
 800b85e:	ee30 0b04 	vadd.f64	d0, d0, d4
 800b862:	e776      	b.n	800b752 <__ieee754_exp+0x2a>
 800b864:	2300      	movs	r3, #0
 800b866:	e7a9      	b.n	800b7bc <__ieee754_exp+0x94>
 800b868:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
 800b86c:	ee34 5b45 	vsub.f64	d5, d4, d5
 800b870:	428b      	cmp	r3, r1
 800b872:	ee82 4b05 	vdiv.f64	d4, d2, d5
 800b876:	ee37 7b44 	vsub.f64	d7, d7, d4
 800b87a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b87e:	ee33 7b47 	vsub.f64	d7, d3, d7
 800b882:	ed8d 7b00 	vstr	d7, [sp]
 800b886:	9a01      	ldr	r2, [sp, #4]
 800b888:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b88c:	db04      	blt.n	800b898 <__ieee754_exp+0x170>
 800b88e:	eb02 5103 	add.w	r1, r2, r3, lsl #20
 800b892:	ec41 0b10 	vmov	d0, r0, r1
 800b896:	e75c      	b.n	800b752 <__ieee754_exp+0x2a>
 800b898:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800b89c:	eb02 5103 	add.w	r1, r2, r3, lsl #20
 800b8a0:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 800b910 <__ieee754_exp+0x1e8>
 800b8a4:	ec41 0b10 	vmov	d0, r0, r1
 800b8a8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b8ac:	e751      	b.n	800b752 <__ieee754_exp+0x2a>
 800b8ae:	bf00      	nop
	...
 800b8b8:	fefa39ef 	.word	0xfefa39ef
 800b8bc:	40862e42 	.word	0x40862e42
 800b8c0:	8800759c 	.word	0x8800759c
 800b8c4:	7e37e43c 	.word	0x7e37e43c
 800b8c8:	d52d3051 	.word	0xd52d3051
 800b8cc:	c0874910 	.word	0xc0874910
 800b8d0:	72bea4d0 	.word	0x72bea4d0
 800b8d4:	3e663769 	.word	0x3e663769
 800b8d8:	c5d26bf1 	.word	0xc5d26bf1
 800b8dc:	bebbbd41 	.word	0xbebbbd41
 800b8e0:	af25de2c 	.word	0xaf25de2c
 800b8e4:	3f11566a 	.word	0x3f11566a
 800b8e8:	16bebd93 	.word	0x16bebd93
 800b8ec:	bf66c16c 	.word	0xbf66c16c
 800b8f0:	5555553e 	.word	0x5555553e
 800b8f4:	3fc55555 	.word	0x3fc55555
 800b8f8:	652b82fe 	.word	0x652b82fe
 800b8fc:	3ff71547 	.word	0x3ff71547
 800b900:	35793c76 	.word	0x35793c76
 800b904:	3dea39ef 	.word	0x3dea39ef
 800b908:	fee00000 	.word	0xfee00000
 800b90c:	3fe62e42 	.word	0x3fe62e42
 800b910:	00000000 	.word	0x00000000
 800b914:	01700000 	.word	0x01700000
 800b918:	40862e41 	.word	0x40862e41
 800b91c:	7fefffff 	.word	0x7fefffff
 800b920:	3fd62e42 	.word	0x3fd62e42
 800b924:	3ff0a2b1 	.word	0x3ff0a2b1
 800b928:	080a54c0 	.word	0x080a54c0
 800b92c:	080a54d0 	.word	0x080a54d0
 800b930:	080a54b0 	.word	0x080a54b0
 800b934:	3e2fffff 	.word	0x3e2fffff

0800b938 <__ieee754_log>:
 800b938:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b93a:	ed8d 0b00 	vstr	d0, [sp]
 800b93e:	9a01      	ldr	r2, [sp, #4]
 800b940:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800b944:	da26      	bge.n	800b994 <__ieee754_log+0x5c>
 800b946:	9900      	ldr	r1, [sp, #0]
 800b948:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800b94c:	430b      	orrs	r3, r1
 800b94e:	d107      	bne.n	800b960 <__ieee754_log+0x28>
 800b950:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800bb00 <__ieee754_log+0x1c8>
 800b954:	ed9f 7b6c 	vldr	d7, [pc, #432]	; 800bb08 <__ieee754_log+0x1d0>
 800b958:	ee86 0b07 	vdiv.f64	d0, d6, d7
 800b95c:	b003      	add	sp, #12
 800b95e:	bd30      	pop	{r4, r5, pc}
 800b960:	2a00      	cmp	r2, #0
 800b962:	da04      	bge.n	800b96e <__ieee754_log+0x36>
 800b964:	ed9d 7b00 	vldr	d7, [sp]
 800b968:	ee37 6b47 	vsub.f64	d6, d7, d7
 800b96c:	e7f2      	b.n	800b954 <__ieee754_log+0x1c>
 800b96e:	ed9d 6b00 	vldr	d6, [sp]
 800b972:	ed9f 7b67 	vldr	d7, [pc, #412]	; 800bb10 <__ieee754_log+0x1d8>
 800b976:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b97a:	ed8d 7b00 	vstr	d7, [sp]
 800b97e:	9a01      	ldr	r2, [sp, #4]
 800b980:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800b984:	4b78      	ldr	r3, [pc, #480]	; (800bb68 <__ieee754_log+0x230>)
 800b986:	429a      	cmp	r2, r3
 800b988:	dd06      	ble.n	800b998 <__ieee754_log+0x60>
 800b98a:	ed9d 7b00 	vldr	d7, [sp]
 800b98e:	ee37 0b07 	vadd.f64	d0, d7, d7
 800b992:	e7e3      	b.n	800b95c <__ieee754_log+0x24>
 800b994:	2100      	movs	r1, #0
 800b996:	e7f5      	b.n	800b984 <__ieee754_log+0x4c>
 800b998:	1513      	asrs	r3, r2, #20
 800b99a:	f3c2 0013 	ubfx	r0, r2, #0, #20
 800b99e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b9a2:	4419      	add	r1, r3
 800b9a4:	f500 2315 	add.w	r3, r0, #610304	; 0x95000
 800b9a8:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800b9ac:	f403 1480 	and.w	r4, r3, #1048576	; 0x100000
 800b9b0:	f084 557f 	eor.w	r5, r4, #1069547520	; 0x3fc00000
 800b9b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9b8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800b9bc:	f485 1540 	eor.w	r5, r5, #3145728	; 0x300000
 800b9c0:	ea45 0300 	orr.w	r3, r5, r0
 800b9c4:	ec43 2b10 	vmov	d0, r2, r3
 800b9c8:	1c82      	adds	r2, r0, #2
 800b9ca:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b9ce:	2a02      	cmp	r2, #2
 800b9d0:	eb01 5414 	add.w	r4, r1, r4, lsr #20
 800b9d4:	ee30 0b47 	vsub.f64	d0, d0, d7
 800b9d8:	dc31      	bgt.n	800ba3e <__ieee754_log+0x106>
 800b9da:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800b9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9e2:	d10f      	bne.n	800ba04 <__ieee754_log+0xcc>
 800b9e4:	2c00      	cmp	r4, #0
 800b9e6:	f000 8086 	beq.w	800baf6 <__ieee754_log+0x1be>
 800b9ea:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800bb18 <__ieee754_log+0x1e0>
 800b9ee:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 800bb20 <__ieee754_log+0x1e8>
 800b9f2:	ee07 4a90 	vmov	s15, r4
 800b9f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b9fa:	ee27 0b00 	vmul.f64	d0, d7, d0
 800b9fe:	eea7 0b06 	vfma.f64	d0, d7, d6
 800ba02:	e7ab      	b.n	800b95c <__ieee754_log+0x24>
 800ba04:	ed9f 7b48 	vldr	d7, [pc, #288]	; 800bb28 <__ieee754_log+0x1f0>
 800ba08:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800ba0c:	eea0 6b47 	vfms.f64	d6, d0, d7
 800ba10:	ee20 7b00 	vmul.f64	d7, d0, d0
 800ba14:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ba18:	b914      	cbnz	r4, 800ba20 <__ieee754_log+0xe8>
 800ba1a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800ba1e:	e79d      	b.n	800b95c <__ieee754_log+0x24>
 800ba20:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 800bb18 <__ieee754_log+0x1e0>
 800ba24:	ee07 4a90 	vmov	s15, r4
 800ba28:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ba2c:	eea7 6b45 	vfms.f64	d6, d7, d5
 800ba30:	ee36 0b40 	vsub.f64	d0, d6, d0
 800ba34:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 800bb20 <__ieee754_log+0x1e8>
 800ba38:	ee97 0b06 	vfnms.f64	d0, d7, d6
 800ba3c:	e78e      	b.n	800b95c <__ieee754_log+0x24>
 800ba3e:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800ba42:	ee30 7b07 	vadd.f64	d7, d0, d7
 800ba46:	ee80 4b07 	vdiv.f64	d4, d0, d7
 800ba4a:	ee07 4a90 	vmov	s15, r4
 800ba4e:	ee24 2b04 	vmul.f64	d2, d4, d4
 800ba52:	ed9f 3b37 	vldr	d3, [pc, #220]	; 800bb30 <__ieee754_log+0x1f8>
 800ba56:	ee22 5b02 	vmul.f64	d5, d2, d2
 800ba5a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800ba5e:	ed9f 7b36 	vldr	d7, [pc, #216]	; 800bb38 <__ieee754_log+0x200>
 800ba62:	eea5 7b03 	vfma.f64	d7, d5, d3
 800ba66:	ed9f 3b36 	vldr	d3, [pc, #216]	; 800bb40 <__ieee754_log+0x208>
 800ba6a:	ed9f 1b37 	vldr	d1, [pc, #220]	; 800bb48 <__ieee754_log+0x210>
 800ba6e:	eea7 3b05 	vfma.f64	d3, d7, d5
 800ba72:	ed9f 7b37 	vldr	d7, [pc, #220]	; 800bb50 <__ieee754_log+0x218>
 800ba76:	eea5 7b01 	vfma.f64	d7, d5, d1
 800ba7a:	ed9f 1b37 	vldr	d1, [pc, #220]	; 800bb58 <__ieee754_log+0x220>
 800ba7e:	f5a0 21c2 	sub.w	r1, r0, #397312	; 0x61000
 800ba82:	f5c0 22d7 	rsb	r2, r0, #440320	; 0x6b800
 800ba86:	eea7 1b05 	vfma.f64	d1, d7, d5
 800ba8a:	f2a1 417a 	subw	r1, r1, #1146	; 0x47a
 800ba8e:	ed9f 7b34 	vldr	d7, [pc, #208]	; 800bb60 <__ieee754_log+0x228>
 800ba92:	3251      	adds	r2, #81	; 0x51
 800ba94:	430a      	orrs	r2, r1
 800ba96:	2a00      	cmp	r2, #0
 800ba98:	eea1 7b05 	vfma.f64	d7, d1, d5
 800ba9c:	ee27 7b02 	vmul.f64	d7, d7, d2
 800baa0:	eea3 7b05 	vfma.f64	d7, d3, d5
 800baa4:	dd1c      	ble.n	800bae0 <__ieee754_log+0x1a8>
 800baa6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800baaa:	ee20 5b05 	vmul.f64	d5, d0, d5
 800baae:	ee25 5b00 	vmul.f64	d5, d5, d0
 800bab2:	ee37 7b05 	vadd.f64	d7, d7, d5
 800bab6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800baba:	b924      	cbnz	r4, 800bac6 <__ieee754_log+0x18e>
 800babc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bac0:	ee30 0b47 	vsub.f64	d0, d0, d7
 800bac4:	e74a      	b.n	800b95c <__ieee754_log+0x24>
 800bac6:	ed9f 4b14 	vldr	d4, [pc, #80]	; 800bb18 <__ieee754_log+0x1e0>
 800baca:	eea6 7b04 	vfma.f64	d7, d6, d4
 800bace:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bad2:	ee37 0b40 	vsub.f64	d0, d7, d0
 800bad6:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800bb20 <__ieee754_log+0x1e8>
 800bada:	ee96 0b07 	vfnms.f64	d0, d6, d7
 800bade:	e73d      	b.n	800b95c <__ieee754_log+0x24>
 800bae0:	ee30 7b47 	vsub.f64	d7, d0, d7
 800bae4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bae8:	2c00      	cmp	r4, #0
 800baea:	d0e9      	beq.n	800bac0 <__ieee754_log+0x188>
 800baec:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 800bb18 <__ieee754_log+0x1e0>
 800baf0:	eea6 7b45 	vfms.f64	d7, d6, d5
 800baf4:	e7ed      	b.n	800bad2 <__ieee754_log+0x19a>
 800baf6:	ed9f 0b04 	vldr	d0, [pc, #16]	; 800bb08 <__ieee754_log+0x1d0>
 800bafa:	e72f      	b.n	800b95c <__ieee754_log+0x24>
 800bafc:	f3af 8000 	nop.w
 800bb00:	00000000 	.word	0x00000000
 800bb04:	c3500000 	.word	0xc3500000
	...
 800bb14:	43500000 	.word	0x43500000
 800bb18:	35793c76 	.word	0x35793c76
 800bb1c:	3dea39ef 	.word	0x3dea39ef
 800bb20:	fee00000 	.word	0xfee00000
 800bb24:	3fe62e42 	.word	0x3fe62e42
 800bb28:	55555555 	.word	0x55555555
 800bb2c:	3fd55555 	.word	0x3fd55555
 800bb30:	d078c69f 	.word	0xd078c69f
 800bb34:	3fc39a09 	.word	0x3fc39a09
 800bb38:	1d8e78af 	.word	0x1d8e78af
 800bb3c:	3fcc71c5 	.word	0x3fcc71c5
 800bb40:	9997fa04 	.word	0x9997fa04
 800bb44:	3fd99999 	.word	0x3fd99999
 800bb48:	df3e5244 	.word	0xdf3e5244
 800bb4c:	3fc2f112 	.word	0x3fc2f112
 800bb50:	96cb03de 	.word	0x96cb03de
 800bb54:	3fc74664 	.word	0x3fc74664
 800bb58:	94229359 	.word	0x94229359
 800bb5c:	3fd24924 	.word	0x3fd24924
 800bb60:	55555593 	.word	0x55555593
 800bb64:	3fe55555 	.word	0x3fe55555
 800bb68:	7fefffff 	.word	0x7fefffff
 800bb6c:	00000000 	.word	0x00000000

0800bb70 <__ieee754_pow>:
 800bb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb74:	ec57 6b11 	vmov	r6, r7, d1
 800bb78:	ed2d 8b02 	vpush	{d8}
 800bb7c:	eeb0 8b40 	vmov.f64	d8, d0
 800bb80:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800bb84:	ea58 0306 	orrs.w	r3, r8, r6
 800bb88:	b085      	sub	sp, #20
 800bb8a:	46b9      	mov	r9, r7
 800bb8c:	ee11 2a10 	vmov	r2, s2
 800bb90:	f000 8306 	beq.w	800c1a0 <__ieee754_pow+0x630>
 800bb94:	ee18 aa90 	vmov	sl, s17
 800bb98:	4bb9      	ldr	r3, [pc, #740]	; (800be80 <__ieee754_pow+0x310>)
 800bb9a:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 800bb9e:	429c      	cmp	r4, r3
 800bba0:	ee10 ba10 	vmov	fp, s0
 800bba4:	dc0b      	bgt.n	800bbbe <__ieee754_pow+0x4e>
 800bba6:	d105      	bne.n	800bbb4 <__ieee754_pow+0x44>
 800bba8:	f1bb 0f00 	cmp.w	fp, #0
 800bbac:	d107      	bne.n	800bbbe <__ieee754_pow+0x4e>
 800bbae:	45a0      	cmp	r8, r4
 800bbb0:	dc0d      	bgt.n	800bbce <__ieee754_pow+0x5e>
 800bbb2:	e001      	b.n	800bbb8 <__ieee754_pow+0x48>
 800bbb4:	4598      	cmp	r8, r3
 800bbb6:	dc02      	bgt.n	800bbbe <__ieee754_pow+0x4e>
 800bbb8:	4598      	cmp	r8, r3
 800bbba:	d110      	bne.n	800bbde <__ieee754_pow+0x6e>
 800bbbc:	b17a      	cbz	r2, 800bbde <__ieee754_pow+0x6e>
 800bbbe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bbc2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bbc6:	ea54 030b 	orrs.w	r3, r4, fp
 800bbca:	f000 82e9 	beq.w	800c1a0 <__ieee754_pow+0x630>
 800bbce:	48ad      	ldr	r0, [pc, #692]	; (800be84 <__ieee754_pow+0x314>)
 800bbd0:	b005      	add	sp, #20
 800bbd2:	ecbd 8b02 	vpop	{d8}
 800bbd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbda:	f001 b87d 	b.w	800ccd8 <nan>
 800bbde:	f1ba 0f00 	cmp.w	sl, #0
 800bbe2:	da4e      	bge.n	800bc82 <__ieee754_pow+0x112>
 800bbe4:	4ba8      	ldr	r3, [pc, #672]	; (800be88 <__ieee754_pow+0x318>)
 800bbe6:	4598      	cmp	r8, r3
 800bbe8:	dc49      	bgt.n	800bc7e <__ieee754_pow+0x10e>
 800bbea:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800bbee:	4598      	cmp	r8, r3
 800bbf0:	dd47      	ble.n	800bc82 <__ieee754_pow+0x112>
 800bbf2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bbf6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bbfa:	2b14      	cmp	r3, #20
 800bbfc:	dd24      	ble.n	800bc48 <__ieee754_pow+0xd8>
 800bbfe:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800bc02:	fa22 f503 	lsr.w	r5, r2, r3
 800bc06:	fa05 f303 	lsl.w	r3, r5, r3
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d139      	bne.n	800bc82 <__ieee754_pow+0x112>
 800bc0e:	f005 0501 	and.w	r5, r5, #1
 800bc12:	f1c5 0502 	rsb	r5, r5, #2
 800bc16:	2a00      	cmp	r2, #0
 800bc18:	d15a      	bne.n	800bcd0 <__ieee754_pow+0x160>
 800bc1a:	4b99      	ldr	r3, [pc, #612]	; (800be80 <__ieee754_pow+0x310>)
 800bc1c:	4598      	cmp	r8, r3
 800bc1e:	d122      	bne.n	800bc66 <__ieee754_pow+0xf6>
 800bc20:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bc24:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bc28:	ea53 030b 	orrs.w	r3, r3, fp
 800bc2c:	f000 82b8 	beq.w	800c1a0 <__ieee754_pow+0x630>
 800bc30:	4b96      	ldr	r3, [pc, #600]	; (800be8c <__ieee754_pow+0x31c>)
 800bc32:	429c      	cmp	r4, r3
 800bc34:	dd27      	ble.n	800bc86 <__ieee754_pow+0x116>
 800bc36:	f1b9 0f00 	cmp.w	r9, #0
 800bc3a:	f280 82b4 	bge.w	800c1a6 <__ieee754_pow+0x636>
 800bc3e:	ed9f 7b84 	vldr	d7, [pc, #528]	; 800be50 <__ieee754_pow+0x2e0>
 800bc42:	ed8d 7b00 	vstr	d7, [sp]
 800bc46:	e026      	b.n	800bc96 <__ieee754_pow+0x126>
 800bc48:	2a00      	cmp	r2, #0
 800bc4a:	d140      	bne.n	800bcce <__ieee754_pow+0x15e>
 800bc4c:	f1c3 0314 	rsb	r3, r3, #20
 800bc50:	fa48 f503 	asr.w	r5, r8, r3
 800bc54:	fa05 f303 	lsl.w	r3, r5, r3
 800bc58:	4543      	cmp	r3, r8
 800bc5a:	f040 82aa 	bne.w	800c1b2 <__ieee754_pow+0x642>
 800bc5e:	f005 0501 	and.w	r5, r5, #1
 800bc62:	f1c5 0502 	rsb	r5, r5, #2
 800bc66:	4b8a      	ldr	r3, [pc, #552]	; (800be90 <__ieee754_pow+0x320>)
 800bc68:	4598      	cmp	r8, r3
 800bc6a:	d11b      	bne.n	800bca4 <__ieee754_pow+0x134>
 800bc6c:	f1b9 0f00 	cmp.w	r9, #0
 800bc70:	f280 829c 	bge.w	800c1ac <__ieee754_pow+0x63c>
 800bc74:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800bc78:	ee87 7b08 	vdiv.f64	d7, d7, d8
 800bc7c:	e7e1      	b.n	800bc42 <__ieee754_pow+0xd2>
 800bc7e:	2502      	movs	r5, #2
 800bc80:	e7c9      	b.n	800bc16 <__ieee754_pow+0xa6>
 800bc82:	2500      	movs	r5, #0
 800bc84:	e7c7      	b.n	800bc16 <__ieee754_pow+0xa6>
 800bc86:	f1b9 0f00 	cmp.w	r9, #0
 800bc8a:	dad8      	bge.n	800bc3e <__ieee754_pow+0xce>
 800bc8c:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 800bc90:	4633      	mov	r3, r6
 800bc92:	e9cd 3400 	strd	r3, r4, [sp]
 800bc96:	ed9d 0b00 	vldr	d0, [sp]
 800bc9a:	b005      	add	sp, #20
 800bc9c:	ecbd 8b02 	vpop	{d8}
 800bca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bca4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800bca8:	d102      	bne.n	800bcb0 <__ieee754_pow+0x140>
 800bcaa:	ee28 7b08 	vmul.f64	d7, d8, d8
 800bcae:	e7c8      	b.n	800bc42 <__ieee754_pow+0xd2>
 800bcb0:	4b78      	ldr	r3, [pc, #480]	; (800be94 <__ieee754_pow+0x324>)
 800bcb2:	4599      	cmp	r9, r3
 800bcb4:	d10c      	bne.n	800bcd0 <__ieee754_pow+0x160>
 800bcb6:	f1ba 0f00 	cmp.w	sl, #0
 800bcba:	db09      	blt.n	800bcd0 <__ieee754_pow+0x160>
 800bcbc:	eeb0 0b48 	vmov.f64	d0, d8
 800bcc0:	b005      	add	sp, #20
 800bcc2:	ecbd 8b02 	vpop	{d8}
 800bcc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcca:	f000 bad7 	b.w	800c27c <__ieee754_sqrt>
 800bcce:	2500      	movs	r5, #0
 800bcd0:	eeb0 0b48 	vmov.f64	d0, d8
 800bcd4:	f000 ffeb 	bl	800ccae <fabs>
 800bcd8:	ed8d 0b00 	vstr	d0, [sp]
 800bcdc:	f1bb 0f00 	cmp.w	fp, #0
 800bce0:	d128      	bne.n	800bd34 <__ieee754_pow+0x1c4>
 800bce2:	b124      	cbz	r4, 800bcee <__ieee754_pow+0x17e>
 800bce4:	4b6a      	ldr	r3, [pc, #424]	; (800be90 <__ieee754_pow+0x320>)
 800bce6:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d122      	bne.n	800bd34 <__ieee754_pow+0x1c4>
 800bcee:	f1b9 0f00 	cmp.w	r9, #0
 800bcf2:	da07      	bge.n	800bd04 <__ieee754_pow+0x194>
 800bcf4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800bcf8:	ed9d 6b00 	vldr	d6, [sp]
 800bcfc:	ee87 7b06 	vdiv.f64	d7, d7, d6
 800bd00:	ed8d 7b00 	vstr	d7, [sp]
 800bd04:	f1ba 0f00 	cmp.w	sl, #0
 800bd08:	dac5      	bge.n	800bc96 <__ieee754_pow+0x126>
 800bd0a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bd0e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bd12:	ea54 0305 	orrs.w	r3, r4, r5
 800bd16:	d106      	bne.n	800bd26 <__ieee754_pow+0x1b6>
 800bd18:	ed9d 7b00 	vldr	d7, [sp]
 800bd1c:	ee37 7b47 	vsub.f64	d7, d7, d7
 800bd20:	ee87 7b07 	vdiv.f64	d7, d7, d7
 800bd24:	e78d      	b.n	800bc42 <__ieee754_pow+0xd2>
 800bd26:	2d01      	cmp	r5, #1
 800bd28:	d1b5      	bne.n	800bc96 <__ieee754_pow+0x126>
 800bd2a:	ed9d 7b00 	vldr	d7, [sp]
 800bd2e:	eeb1 7b47 	vneg.f64	d7, d7
 800bd32:	e786      	b.n	800bc42 <__ieee754_pow+0xd2>
 800bd34:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800bd38:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bd3c:	ea55 030a 	orrs.w	r3, r5, sl
 800bd40:	d104      	bne.n	800bd4c <__ieee754_pow+0x1dc>
 800bd42:	ee38 8b48 	vsub.f64	d8, d8, d8
 800bd46:	ee88 7b08 	vdiv.f64	d7, d8, d8
 800bd4a:	e77a      	b.n	800bc42 <__ieee754_pow+0xd2>
 800bd4c:	4b52      	ldr	r3, [pc, #328]	; (800be98 <__ieee754_pow+0x328>)
 800bd4e:	4598      	cmp	r8, r3
 800bd50:	f340 80a8 	ble.w	800bea4 <__ieee754_pow+0x334>
 800bd54:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bd58:	4598      	cmp	r8, r3
 800bd5a:	dd0b      	ble.n	800bd74 <__ieee754_pow+0x204>
 800bd5c:	4b4b      	ldr	r3, [pc, #300]	; (800be8c <__ieee754_pow+0x31c>)
 800bd5e:	429c      	cmp	r4, r3
 800bd60:	dc0e      	bgt.n	800bd80 <__ieee754_pow+0x210>
 800bd62:	f1b9 0f00 	cmp.w	r9, #0
 800bd66:	f6bf af6a 	bge.w	800bc3e <__ieee754_pow+0xce>
 800bd6a:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800be58 <__ieee754_pow+0x2e8>
 800bd6e:	ee27 7b07 	vmul.f64	d7, d7, d7
 800bd72:	e766      	b.n	800bc42 <__ieee754_pow+0xd2>
 800bd74:	4b49      	ldr	r3, [pc, #292]	; (800be9c <__ieee754_pow+0x32c>)
 800bd76:	429c      	cmp	r4, r3
 800bd78:	ddf3      	ble.n	800bd62 <__ieee754_pow+0x1f2>
 800bd7a:	4b45      	ldr	r3, [pc, #276]	; (800be90 <__ieee754_pow+0x320>)
 800bd7c:	429c      	cmp	r4, r3
 800bd7e:	dd03      	ble.n	800bd88 <__ieee754_pow+0x218>
 800bd80:	f1b9 0f00 	cmp.w	r9, #0
 800bd84:	dcf1      	bgt.n	800bd6a <__ieee754_pow+0x1fa>
 800bd86:	e75a      	b.n	800bc3e <__ieee754_pow+0xce>
 800bd88:	ed9d 7b00 	vldr	d7, [sp]
 800bd8c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800bd90:	ed9f 5b33 	vldr	d5, [pc, #204]	; 800be60 <__ieee754_pow+0x2f0>
 800bd94:	ee37 6b46 	vsub.f64	d6, d7, d6
 800bd98:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 800bd9c:	eeb1 3b46 	vneg.f64	d3, d6
 800bda0:	eea3 5b07 	vfma.f64	d5, d3, d7
 800bda4:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800bda8:	eea5 7b46 	vfms.f64	d7, d5, d6
 800bdac:	ee26 5b06 	vmul.f64	d5, d6, d6
 800bdb0:	ee27 5b05 	vmul.f64	d5, d7, d5
 800bdb4:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 800be68 <__ieee754_pow+0x2f8>
 800bdb8:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800bdbc:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800be70 <__ieee754_pow+0x300>
 800bdc0:	eea6 7b05 	vfma.f64	d7, d6, d5
 800bdc4:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800be78 <__ieee754_pow+0x308>
 800bdc8:	eeb0 4b47 	vmov.f64	d4, d7
 800bdcc:	eea6 4b05 	vfma.f64	d4, d6, d5
 800bdd0:	ec53 2b14 	vmov	r2, r3, d4
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	ec43 2b14 	vmov	d4, r2, r3
 800bdda:	eeb0 6b44 	vmov.f64	d6, d4
 800bdde:	eea3 6b05 	vfma.f64	d6, d3, d5
 800bde2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bde6:	3d01      	subs	r5, #1
 800bde8:	ea55 030a 	orrs.w	r3, r5, sl
 800bdec:	f04f 0200 	mov.w	r2, #0
 800bdf0:	463b      	mov	r3, r7
 800bdf2:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800bdf6:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800bdfa:	ec47 6b15 	vmov	d5, r6, r7
 800bdfe:	fe06 8b08 	vseleq.f64	d8, d6, d8
 800be02:	ec47 6b13 	vmov	d3, r6, r7
 800be06:	ec43 2b16 	vmov	d6, r2, r3
 800be0a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800be0e:	ee35 5b46 	vsub.f64	d5, d5, d6
 800be12:	4b23      	ldr	r3, [pc, #140]	; (800bea0 <__ieee754_pow+0x330>)
 800be14:	eea5 7b04 	vfma.f64	d7, d5, d4
 800be18:	ee24 6b06 	vmul.f64	d6, d4, d6
 800be1c:	ee37 5b06 	vadd.f64	d5, d7, d6
 800be20:	ee15 1a90 	vmov	r1, s11
 800be24:	4299      	cmp	r1, r3
 800be26:	ee15 2a10 	vmov	r2, s10
 800be2a:	f340 819b 	ble.w	800c164 <__ieee754_pow+0x5f4>
 800be2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800be32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800be36:	4313      	orrs	r3, r2
 800be38:	f000 810a 	beq.w	800c050 <__ieee754_pow+0x4e0>
 800be3c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 800be58 <__ieee754_pow+0x2e8>
 800be40:	ee28 8b07 	vmul.f64	d8, d8, d7
 800be44:	ee28 7b07 	vmul.f64	d7, d8, d7
 800be48:	e6fb      	b.n	800bc42 <__ieee754_pow+0xd2>
 800be4a:	bf00      	nop
 800be4c:	f3af 8000 	nop.w
	...
 800be58:	8800759c 	.word	0x8800759c
 800be5c:	7e37e43c 	.word	0x7e37e43c
 800be60:	55555555 	.word	0x55555555
 800be64:	3fd55555 	.word	0x3fd55555
 800be68:	652b82fe 	.word	0x652b82fe
 800be6c:	3ff71547 	.word	0x3ff71547
 800be70:	f85ddf44 	.word	0xf85ddf44
 800be74:	3e54ae0b 	.word	0x3e54ae0b
 800be78:	60000000 	.word	0x60000000
 800be7c:	3ff71547 	.word	0x3ff71547
 800be80:	7ff00000 	.word	0x7ff00000
 800be84:	080a54aa 	.word	0x080a54aa
 800be88:	433fffff 	.word	0x433fffff
 800be8c:	3fefffff 	.word	0x3fefffff
 800be90:	3ff00000 	.word	0x3ff00000
 800be94:	3fe00000 	.word	0x3fe00000
 800be98:	41e00000 	.word	0x41e00000
 800be9c:	3feffffe 	.word	0x3feffffe
 800bea0:	408fffff 	.word	0x408fffff
 800bea4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800bea8:	f280 80ce 	bge.w	800c048 <__ieee754_pow+0x4d8>
 800beac:	ed9d 6b00 	vldr	d6, [sp]
 800beb0:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 800c1b8 <__ieee754_pow+0x648>
 800beb4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800beb8:	ed8d 7b00 	vstr	d7, [sp]
 800bebc:	9c01      	ldr	r4, [sp, #4]
 800bebe:	f06f 0334 	mvn.w	r3, #52	; 0x34
 800bec2:	1521      	asrs	r1, r4, #20
 800bec4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800bec8:	4419      	add	r1, r3
 800beca:	4be3      	ldr	r3, [pc, #908]	; (800c258 <__ieee754_pow+0x6e8>)
 800becc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bed0:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 800bed4:	429c      	cmp	r4, r3
 800bed6:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 800beda:	dd06      	ble.n	800beea <__ieee754_pow+0x37a>
 800bedc:	4bdf      	ldr	r3, [pc, #892]	; (800c25c <__ieee754_pow+0x6ec>)
 800bede:	429c      	cmp	r4, r3
 800bee0:	f340 80b4 	ble.w	800c04c <__ieee754_pow+0x4dc>
 800bee4:	3101      	adds	r1, #1
 800bee6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800beea:	2400      	movs	r4, #0
 800beec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bef0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800bef4:	4603      	mov	r3, r0
 800bef6:	ec43 2b17 	vmov	d7, r2, r3
 800befa:	4bd9      	ldr	r3, [pc, #868]	; (800c260 <__ieee754_pow+0x6f0>)
 800befc:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 800bf00:	4463      	add	r3, ip
 800bf02:	ed93 5b00 	vldr	d5, [r3]
 800bf06:	1040      	asrs	r0, r0, #1
 800bf08:	ee37 2b45 	vsub.f64	d2, d7, d5
 800bf0c:	ee35 6b07 	vadd.f64	d6, d5, d7
 800bf10:	ee84 1b06 	vdiv.f64	d1, d4, d6
 800bf14:	ee22 6b01 	vmul.f64	d6, d2, d1
 800bf18:	ed8d 6b00 	vstr	d6, [sp]
 800bf1c:	e9dd 8900 	ldrd	r8, r9, [sp]
 800bf20:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 800bf24:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 800bf28:	f04f 0800 	mov.w	r8, #0
 800bf2c:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 800bf30:	2200      	movs	r2, #0
 800bf32:	ec49 8b14 	vmov	d4, r8, r9
 800bf36:	ec43 2b16 	vmov	d6, r2, r3
 800bf3a:	eeb1 3b44 	vneg.f64	d3, d4
 800bf3e:	eea3 2b06 	vfma.f64	d2, d3, d6
 800bf42:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bf46:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bf4a:	eea3 2b07 	vfma.f64	d2, d3, d7
 800bf4e:	ed9d 7b00 	vldr	d7, [sp]
 800bf52:	ee22 2b01 	vmul.f64	d2, d2, d1
 800bf56:	ee27 5b07 	vmul.f64	d5, d7, d7
 800bf5a:	ee37 6b04 	vadd.f64	d6, d7, d4
 800bf5e:	ed9f 1b98 	vldr	d1, [pc, #608]	; 800c1c0 <__ieee754_pow+0x650>
 800bf62:	ee25 0b05 	vmul.f64	d0, d5, d5
 800bf66:	ee26 6b02 	vmul.f64	d6, d6, d2
 800bf6a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800c1c8 <__ieee754_pow+0x658>
 800bf6e:	eea5 7b01 	vfma.f64	d7, d5, d1
 800bf72:	ed9f 1b97 	vldr	d1, [pc, #604]	; 800c1d0 <__ieee754_pow+0x660>
 800bf76:	eea7 1b05 	vfma.f64	d1, d7, d5
 800bf7a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800c1d8 <__ieee754_pow+0x668>
 800bf7e:	eea1 7b05 	vfma.f64	d7, d1, d5
 800bf82:	ed9f 1b97 	vldr	d1, [pc, #604]	; 800c1e0 <__ieee754_pow+0x670>
 800bf86:	eea7 1b05 	vfma.f64	d1, d7, d5
 800bf8a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800c1e8 <__ieee754_pow+0x678>
 800bf8e:	eea1 7b05 	vfma.f64	d7, d1, d5
 800bf92:	eea0 6b07 	vfma.f64	d6, d0, d7
 800bf96:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 800bf9a:	eeb0 5b47 	vmov.f64	d5, d7
 800bf9e:	eea4 5b04 	vfma.f64	d5, d4, d4
 800bfa2:	ee35 5b06 	vadd.f64	d5, d5, d6
 800bfa6:	ed8d 5b02 	vstr	d5, [sp, #8]
 800bfaa:	f8cd 8008 	str.w	r8, [sp, #8]
 800bfae:	ed9d 5b02 	vldr	d5, [sp, #8]
 800bfb2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bfb6:	eea3 7b04 	vfma.f64	d7, d3, d4
 800bfba:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bfbe:	ed9d 6b00 	vldr	d6, [sp]
 800bfc2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bfc6:	eea2 7b05 	vfma.f64	d7, d2, d5
 800bfca:	eeb0 6b47 	vmov.f64	d6, d7
 800bfce:	eea4 6b05 	vfma.f64	d6, d4, d5
 800bfd2:	ed8d 6b00 	vstr	d6, [sp]
 800bfd6:	f8cd 8000 	str.w	r8, [sp]
 800bfda:	ed9d 2b00 	vldr	d2, [sp]
 800bfde:	eeb0 6b42 	vmov.f64	d6, d2
 800bfe2:	eea3 6b05 	vfma.f64	d6, d3, d5
 800bfe6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bfea:	ed9f 6b81 	vldr	d6, [pc, #516]	; 800c1f0 <__ieee754_pow+0x680>
 800bfee:	4b9d      	ldr	r3, [pc, #628]	; (800c264 <__ieee754_pow+0x6f4>)
 800bff0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bff4:	ed9f 6b80 	vldr	d6, [pc, #512]	; 800c1f8 <__ieee754_pow+0x688>
 800bff8:	4463      	add	r3, ip
 800bffa:	eea2 7b06 	vfma.f64	d7, d2, d6
 800bffe:	ed93 6b00 	vldr	d6, [r3]
 800c002:	4b99      	ldr	r3, [pc, #612]	; (800c268 <__ieee754_pow+0x6f8>)
 800c004:	ee37 6b06 	vadd.f64	d6, d7, d6
 800c008:	449c      	add	ip, r3
 800c00a:	ed9c 1b00 	vldr	d1, [ip]
 800c00e:	eeb0 4b46 	vmov.f64	d4, d6
 800c012:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 800c200 <__ieee754_pow+0x690>
 800c016:	ee07 1a90 	vmov	s15, r1
 800c01a:	eea2 4b03 	vfma.f64	d4, d2, d3
 800c01e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c022:	ee34 4b01 	vadd.f64	d4, d4, d1
 800c026:	ee34 5b07 	vadd.f64	d5, d4, d7
 800c02a:	ed8d 5b00 	vstr	d5, [sp]
 800c02e:	f8cd 8000 	str.w	r8, [sp]
 800c032:	ed9d 4b00 	vldr	d4, [sp]
 800c036:	ee34 7b47 	vsub.f64	d7, d4, d7
 800c03a:	ee37 7b41 	vsub.f64	d7, d7, d1
 800c03e:	eea2 7b43 	vfms.f64	d7, d2, d3
 800c042:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c046:	e6ce      	b.n	800bde6 <__ieee754_pow+0x276>
 800c048:	2300      	movs	r3, #0
 800c04a:	e73a      	b.n	800bec2 <__ieee754_pow+0x352>
 800c04c:	2401      	movs	r4, #1
 800c04e:	e74d      	b.n	800beec <__ieee754_pow+0x37c>
 800c050:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 800c208 <__ieee754_pow+0x698>
 800c054:	ee35 5b46 	vsub.f64	d5, d5, d6
 800c058:	ee37 4b04 	vadd.f64	d4, d7, d4
 800c05c:	eeb4 4bc5 	vcmpe.f64	d4, d5
 800c060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c064:	f73f aeea 	bgt.w	800be3c <__ieee754_pow+0x2cc>
 800c068:	4a80      	ldr	r2, [pc, #512]	; (800c26c <__ieee754_pow+0x6fc>)
 800c06a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c06e:	4293      	cmp	r3, r2
 800c070:	f340 808e 	ble.w	800c190 <__ieee754_pow+0x620>
 800c074:	151b      	asrs	r3, r3, #20
 800c076:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 800c07a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c07e:	4103      	asrs	r3, r0
 800c080:	440b      	add	r3, r1
 800c082:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c086:	487a      	ldr	r0, [pc, #488]	; (800c270 <__ieee754_pow+0x700>)
 800c088:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c08c:	4110      	asrs	r0, r2
 800c08e:	ea23 0500 	bic.w	r5, r3, r0
 800c092:	f3c3 0013 	ubfx	r0, r3, #0, #20
 800c096:	2400      	movs	r4, #0
 800c098:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 800c09c:	f1c2 0214 	rsb	r2, r2, #20
 800c0a0:	ec45 4b15 	vmov	d5, r4, r5
 800c0a4:	4110      	asrs	r0, r2
 800c0a6:	2900      	cmp	r1, #0
 800c0a8:	bfb8      	it	lt
 800c0aa:	4240      	neglt	r0, r0
 800c0ac:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c0b0:	ee36 5b07 	vadd.f64	d5, d6, d7
 800c0b4:	ec53 2b15 	vmov	r2, r3, d5
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	ec43 2b15 	vmov	d5, r2, r3
 800c0be:	ed9f 4b54 	vldr	d4, [pc, #336]	; 800c210 <__ieee754_pow+0x6a0>
 800c0c2:	ee35 6b46 	vsub.f64	d6, d5, d6
 800c0c6:	ee37 6b46 	vsub.f64	d6, d7, d6
 800c0ca:	ed9f 7b53 	vldr	d7, [pc, #332]	; 800c218 <__ieee754_pow+0x6a8>
 800c0ce:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c0d2:	eea6 7b04 	vfma.f64	d7, d6, d4
 800c0d6:	ed9f 6b52 	vldr	d6, [pc, #328]	; 800c220 <__ieee754_pow+0x6b0>
 800c0da:	eeb0 4b47 	vmov.f64	d4, d7
 800c0de:	eea5 4b06 	vfma.f64	d4, d5, d6
 800c0e2:	eeb0 3b44 	vmov.f64	d3, d4
 800c0e6:	eea5 3b46 	vfms.f64	d3, d5, d6
 800c0ea:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 800c228 <__ieee754_pow+0x6b8>
 800c0ee:	ee37 7b43 	vsub.f64	d7, d7, d3
 800c0f2:	ee24 6b04 	vmul.f64	d6, d4, d4
 800c0f6:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 800c230 <__ieee754_pow+0x6c0>
 800c0fa:	eea4 7b07 	vfma.f64	d7, d4, d7
 800c0fe:	eea6 3b05 	vfma.f64	d3, d6, d5
 800c102:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800c238 <__ieee754_pow+0x6c8>
 800c106:	eea3 5b06 	vfma.f64	d5, d3, d6
 800c10a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800c240 <__ieee754_pow+0x6d0>
 800c10e:	eea5 3b06 	vfma.f64	d3, d5, d6
 800c112:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800c248 <__ieee754_pow+0x6d8>
 800c116:	eea3 5b06 	vfma.f64	d5, d3, d6
 800c11a:	eeb0 3b44 	vmov.f64	d3, d4
 800c11e:	eea5 3b46 	vfms.f64	d3, d5, d6
 800c122:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c126:	eeb0 6b43 	vmov.f64	d6, d3
 800c12a:	ee24 3b03 	vmul.f64	d3, d4, d3
 800c12e:	ee36 5b45 	vsub.f64	d5, d6, d5
 800c132:	ee83 6b05 	vdiv.f64	d6, d3, d5
 800c136:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c13a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c13e:	ee37 7b44 	vsub.f64	d7, d7, d4
 800c142:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c146:	ed8d 7b00 	vstr	d7, [sp]
 800c14a:	9901      	ldr	r1, [sp, #4]
 800c14c:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 800c150:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c154:	da1e      	bge.n	800c194 <__ieee754_pow+0x624>
 800c156:	eeb0 0b47 	vmov.f64	d0, d7
 800c15a:	f000 fe51 	bl	800ce00 <scalbn>
 800c15e:	ee20 7b08 	vmul.f64	d7, d0, d8
 800c162:	e56e      	b.n	800bc42 <__ieee754_pow+0xd2>
 800c164:	4b43      	ldr	r3, [pc, #268]	; (800c274 <__ieee754_pow+0x704>)
 800c166:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 800c16a:	4298      	cmp	r0, r3
 800c16c:	f77f af7c 	ble.w	800c068 <__ieee754_pow+0x4f8>
 800c170:	4b41      	ldr	r3, [pc, #260]	; (800c278 <__ieee754_pow+0x708>)
 800c172:	440b      	add	r3, r1
 800c174:	4313      	orrs	r3, r2
 800c176:	d002      	beq.n	800c17e <__ieee754_pow+0x60e>
 800c178:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800c250 <__ieee754_pow+0x6e0>
 800c17c:	e660      	b.n	800be40 <__ieee754_pow+0x2d0>
 800c17e:	ee35 5b46 	vsub.f64	d5, d5, d6
 800c182:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c18a:	f6ff af6d 	blt.w	800c068 <__ieee754_pow+0x4f8>
 800c18e:	e7f3      	b.n	800c178 <__ieee754_pow+0x608>
 800c190:	2000      	movs	r0, #0
 800c192:	e78d      	b.n	800c0b0 <__ieee754_pow+0x540>
 800c194:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c198:	460b      	mov	r3, r1
 800c19a:	ec43 2b10 	vmov	d0, r2, r3
 800c19e:	e7de      	b.n	800c15e <__ieee754_pow+0x5ee>
 800c1a0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800c1a4:	e54d      	b.n	800bc42 <__ieee754_pow+0xd2>
 800c1a6:	e9cd 6700 	strd	r6, r7, [sp]
 800c1aa:	e574      	b.n	800bc96 <__ieee754_pow+0x126>
 800c1ac:	ed8d 8b00 	vstr	d8, [sp]
 800c1b0:	e571      	b.n	800bc96 <__ieee754_pow+0x126>
 800c1b2:	4615      	mov	r5, r2
 800c1b4:	e557      	b.n	800bc66 <__ieee754_pow+0xf6>
 800c1b6:	bf00      	nop
 800c1b8:	00000000 	.word	0x00000000
 800c1bc:	43400000 	.word	0x43400000
 800c1c0:	4a454eef 	.word	0x4a454eef
 800c1c4:	3fca7e28 	.word	0x3fca7e28
 800c1c8:	93c9db65 	.word	0x93c9db65
 800c1cc:	3fcd864a 	.word	0x3fcd864a
 800c1d0:	a91d4101 	.word	0xa91d4101
 800c1d4:	3fd17460 	.word	0x3fd17460
 800c1d8:	518f264d 	.word	0x518f264d
 800c1dc:	3fd55555 	.word	0x3fd55555
 800c1e0:	db6fabff 	.word	0xdb6fabff
 800c1e4:	3fdb6db6 	.word	0x3fdb6db6
 800c1e8:	33333303 	.word	0x33333303
 800c1ec:	3fe33333 	.word	0x3fe33333
 800c1f0:	dc3a03fd 	.word	0xdc3a03fd
 800c1f4:	3feec709 	.word	0x3feec709
 800c1f8:	145b01f5 	.word	0x145b01f5
 800c1fc:	be3e2fe0 	.word	0xbe3e2fe0
 800c200:	e0000000 	.word	0xe0000000
 800c204:	3feec709 	.word	0x3feec709
 800c208:	652b82fe 	.word	0x652b82fe
 800c20c:	3c971547 	.word	0x3c971547
 800c210:	fefa39ef 	.word	0xfefa39ef
 800c214:	3fe62e42 	.word	0x3fe62e42
 800c218:	0ca86c39 	.word	0x0ca86c39
 800c21c:	be205c61 	.word	0xbe205c61
 800c220:	00000000 	.word	0x00000000
 800c224:	3fe62e43 	.word	0x3fe62e43
 800c228:	72bea4d0 	.word	0x72bea4d0
 800c22c:	3e663769 	.word	0x3e663769
 800c230:	c5d26bf1 	.word	0xc5d26bf1
 800c234:	bebbbd41 	.word	0xbebbbd41
 800c238:	af25de2c 	.word	0xaf25de2c
 800c23c:	3f11566a 	.word	0x3f11566a
 800c240:	16bebd93 	.word	0x16bebd93
 800c244:	bf66c16c 	.word	0xbf66c16c
 800c248:	5555553e 	.word	0x5555553e
 800c24c:	3fc55555 	.word	0x3fc55555
 800c250:	c2f8f359 	.word	0xc2f8f359
 800c254:	01a56e1f 	.word	0x01a56e1f
 800c258:	0003988e 	.word	0x0003988e
 800c25c:	000bb679 	.word	0x000bb679
 800c260:	080a54e0 	.word	0x080a54e0
 800c264:	080a5500 	.word	0x080a5500
 800c268:	080a54f0 	.word	0x080a54f0
 800c26c:	3fe00000 	.word	0x3fe00000
 800c270:	000fffff 	.word	0x000fffff
 800c274:	4090cbff 	.word	0x4090cbff
 800c278:	3f6f3400 	.word	0x3f6f3400

0800c27c <__ieee754_sqrt>:
 800c27c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800c280:	4770      	bx	lr
	...

0800c284 <__ieee754_log10f>:
 800c284:	b508      	push	{r3, lr}
 800c286:	ee10 2a10 	vmov	r2, s0
 800c28a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800c28e:	ed2d 8b02 	vpush	{d8}
 800c292:	d108      	bne.n	800c2a6 <__ieee754_log10f+0x22>
 800c294:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800c318 <__ieee754_log10f+0x94>
 800c298:	eddf 7a20 	vldr	s15, [pc, #128]	; 800c31c <__ieee754_log10f+0x98>
 800c29c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800c2a0:	ecbd 8b02 	vpop	{d8}
 800c2a4:	bd08      	pop	{r3, pc}
 800c2a6:	2a00      	cmp	r2, #0
 800c2a8:	da02      	bge.n	800c2b0 <__ieee754_log10f+0x2c>
 800c2aa:	ee30 7a40 	vsub.f32	s14, s0, s0
 800c2ae:	e7f3      	b.n	800c298 <__ieee754_log10f+0x14>
 800c2b0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c2b4:	db02      	blt.n	800c2bc <__ieee754_log10f+0x38>
 800c2b6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c2ba:	e7f1      	b.n	800c2a0 <__ieee754_log10f+0x1c>
 800c2bc:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800c2c0:	bfbf      	itttt	lt
 800c2c2:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 800c320 <__ieee754_log10f+0x9c>
 800c2c6:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800c2ca:	f06f 0118 	mvnlt.w	r1, #24
 800c2ce:	ee17 2a90 	vmovlt	r2, s15
 800c2d2:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800c2d6:	bfa8      	it	ge
 800c2d8:	2100      	movge	r1, #0
 800c2da:	3b7f      	subs	r3, #127	; 0x7f
 800c2dc:	440b      	add	r3, r1
 800c2de:	0fd9      	lsrs	r1, r3, #31
 800c2e0:	440b      	add	r3, r1
 800c2e2:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800c2e6:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 800c2ea:	ee07 3a90 	vmov	s15, r3
 800c2ee:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 800c2f2:	ee00 3a10 	vmov	s0, r3
 800c2f6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800c2fa:	f7fe feaf 	bl	800b05c <logf>
 800c2fe:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c324 <__ieee754_log10f+0xa0>
 800c302:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c306:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c328 <__ieee754_log10f+0xa4>
 800c30a:	eea8 0a27 	vfma.f32	s0, s16, s15
 800c30e:	eddf 7a07 	vldr	s15, [pc, #28]	; 800c32c <__ieee754_log10f+0xa8>
 800c312:	eea8 0a27 	vfma.f32	s0, s16, s15
 800c316:	e7c3      	b.n	800c2a0 <__ieee754_log10f+0x1c>
 800c318:	cc000000 	.word	0xcc000000
 800c31c:	00000000 	.word	0x00000000
 800c320:	4c000000 	.word	0x4c000000
 800c324:	3ede5bd9 	.word	0x3ede5bd9
 800c328:	355427db 	.word	0x355427db
 800c32c:	3e9a2080 	.word	0x3e9a2080

0800c330 <__ieee754_rem_pio2f>:
 800c330:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c332:	ee10 6a10 	vmov	r6, s0
 800c336:	4b86      	ldr	r3, [pc, #536]	; (800c550 <__ieee754_rem_pio2f+0x220>)
 800c338:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800c33c:	429c      	cmp	r4, r3
 800c33e:	b087      	sub	sp, #28
 800c340:	4605      	mov	r5, r0
 800c342:	dc05      	bgt.n	800c350 <__ieee754_rem_pio2f+0x20>
 800c344:	2300      	movs	r3, #0
 800c346:	ed85 0a00 	vstr	s0, [r5]
 800c34a:	6043      	str	r3, [r0, #4]
 800c34c:	2000      	movs	r0, #0
 800c34e:	e020      	b.n	800c392 <__ieee754_rem_pio2f+0x62>
 800c350:	4b80      	ldr	r3, [pc, #512]	; (800c554 <__ieee754_rem_pio2f+0x224>)
 800c352:	429c      	cmp	r4, r3
 800c354:	dc38      	bgt.n	800c3c8 <__ieee754_rem_pio2f+0x98>
 800c356:	2e00      	cmp	r6, #0
 800c358:	f024 040f 	bic.w	r4, r4, #15
 800c35c:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800c558 <__ieee754_rem_pio2f+0x228>
 800c360:	4b7e      	ldr	r3, [pc, #504]	; (800c55c <__ieee754_rem_pio2f+0x22c>)
 800c362:	dd18      	ble.n	800c396 <__ieee754_rem_pio2f+0x66>
 800c364:	429c      	cmp	r4, r3
 800c366:	ee70 7a47 	vsub.f32	s15, s0, s14
 800c36a:	bf09      	itett	eq
 800c36c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800c560 <__ieee754_rem_pio2f+0x230>
 800c370:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800c564 <__ieee754_rem_pio2f+0x234>
 800c374:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800c378:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800c568 <__ieee754_rem_pio2f+0x238>
 800c37c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800c380:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c384:	edc0 6a00 	vstr	s13, [r0]
 800c388:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c38c:	edc0 7a01 	vstr	s15, [r0, #4]
 800c390:	2001      	movs	r0, #1
 800c392:	b007      	add	sp, #28
 800c394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c396:	429c      	cmp	r4, r3
 800c398:	ee70 7a07 	vadd.f32	s15, s0, s14
 800c39c:	bf09      	itett	eq
 800c39e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800c560 <__ieee754_rem_pio2f+0x230>
 800c3a2:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800c564 <__ieee754_rem_pio2f+0x234>
 800c3a6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800c3aa:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800c568 <__ieee754_rem_pio2f+0x238>
 800c3ae:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c3b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c3b6:	edc0 6a00 	vstr	s13, [r0]
 800c3ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c3be:	edc0 7a01 	vstr	s15, [r0, #4]
 800c3c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3c6:	e7e4      	b.n	800c392 <__ieee754_rem_pio2f+0x62>
 800c3c8:	4b68      	ldr	r3, [pc, #416]	; (800c56c <__ieee754_rem_pio2f+0x23c>)
 800c3ca:	429c      	cmp	r4, r3
 800c3cc:	dc71      	bgt.n	800c4b2 <__ieee754_rem_pio2f+0x182>
 800c3ce:	f7fe fe3d 	bl	800b04c <fabsf>
 800c3d2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800c570 <__ieee754_rem_pio2f+0x240>
 800c3d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c3da:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c3de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c3e2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800c3e6:	ee17 0a90 	vmov	r0, s15
 800c3ea:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800c558 <__ieee754_rem_pio2f+0x228>
 800c3ee:	eeb1 7a46 	vneg.f32	s14, s12
 800c3f2:	eea7 0a27 	vfma.f32	s0, s14, s15
 800c3f6:	281f      	cmp	r0, #31
 800c3f8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800c564 <__ieee754_rem_pio2f+0x234>
 800c3fc:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c400:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c404:	ee16 3a90 	vmov	r3, s13
 800c408:	dc1c      	bgt.n	800c444 <__ieee754_rem_pio2f+0x114>
 800c40a:	1e47      	subs	r7, r0, #1
 800c40c:	4959      	ldr	r1, [pc, #356]	; (800c574 <__ieee754_rem_pio2f+0x244>)
 800c40e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800c412:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800c416:	428a      	cmp	r2, r1
 800c418:	d014      	beq.n	800c444 <__ieee754_rem_pio2f+0x114>
 800c41a:	602b      	str	r3, [r5, #0]
 800c41c:	ed95 7a00 	vldr	s14, [r5]
 800c420:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c424:	2e00      	cmp	r6, #0
 800c426:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c42a:	ed85 0a01 	vstr	s0, [r5, #4]
 800c42e:	dab0      	bge.n	800c392 <__ieee754_rem_pio2f+0x62>
 800c430:	eeb1 7a47 	vneg.f32	s14, s14
 800c434:	eeb1 0a40 	vneg.f32	s0, s0
 800c438:	ed85 7a00 	vstr	s14, [r5]
 800c43c:	ed85 0a01 	vstr	s0, [r5, #4]
 800c440:	4240      	negs	r0, r0
 800c442:	e7a6      	b.n	800c392 <__ieee754_rem_pio2f+0x62>
 800c444:	15e4      	asrs	r4, r4, #23
 800c446:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c44a:	1aa2      	subs	r2, r4, r2
 800c44c:	2a08      	cmp	r2, #8
 800c44e:	dde4      	ble.n	800c41a <__ieee754_rem_pio2f+0xea>
 800c450:	eddf 7a43 	vldr	s15, [pc, #268]	; 800c560 <__ieee754_rem_pio2f+0x230>
 800c454:	eef0 6a40 	vmov.f32	s13, s0
 800c458:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c45c:	ee30 0a66 	vsub.f32	s0, s0, s13
 800c460:	eea7 0a27 	vfma.f32	s0, s14, s15
 800c464:	eddf 7a40 	vldr	s15, [pc, #256]	; 800c568 <__ieee754_rem_pio2f+0x238>
 800c468:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800c46c:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800c470:	eef0 7a40 	vmov.f32	s15, s0
 800c474:	ee15 3a90 	vmov	r3, s11
 800c478:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c47c:	1aa4      	subs	r4, r4, r2
 800c47e:	2c19      	cmp	r4, #25
 800c480:	dc04      	bgt.n	800c48c <__ieee754_rem_pio2f+0x15c>
 800c482:	edc5 5a00 	vstr	s11, [r5]
 800c486:	eeb0 0a66 	vmov.f32	s0, s13
 800c48a:	e7c7      	b.n	800c41c <__ieee754_rem_pio2f+0xec>
 800c48c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800c578 <__ieee754_rem_pio2f+0x248>
 800c490:	eeb0 0a66 	vmov.f32	s0, s13
 800c494:	eea7 0a25 	vfma.f32	s0, s14, s11
 800c498:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c49c:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c4a0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800c57c <__ieee754_rem_pio2f+0x24c>
 800c4a4:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800c4a8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c4ac:	ed85 7a00 	vstr	s14, [r5]
 800c4b0:	e7b4      	b.n	800c41c <__ieee754_rem_pio2f+0xec>
 800c4b2:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c4b6:	db06      	blt.n	800c4c6 <__ieee754_rem_pio2f+0x196>
 800c4b8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c4bc:	edc0 7a01 	vstr	s15, [r0, #4]
 800c4c0:	edc0 7a00 	vstr	s15, [r0]
 800c4c4:	e742      	b.n	800c34c <__ieee754_rem_pio2f+0x1c>
 800c4c6:	15e2      	asrs	r2, r4, #23
 800c4c8:	3a86      	subs	r2, #134	; 0x86
 800c4ca:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800c4ce:	ee07 3a90 	vmov	s15, r3
 800c4d2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c4d6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800c580 <__ieee754_rem_pio2f+0x250>
 800c4da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c4de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c4e2:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c4e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c4ea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c4ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c4f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c4f6:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c4fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c4fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c506:	edcd 7a05 	vstr	s15, [sp, #20]
 800c50a:	d11e      	bne.n	800c54a <__ieee754_rem_pio2f+0x21a>
 800c50c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c514:	bf0c      	ite	eq
 800c516:	2301      	moveq	r3, #1
 800c518:	2302      	movne	r3, #2
 800c51a:	491a      	ldr	r1, [pc, #104]	; (800c584 <__ieee754_rem_pio2f+0x254>)
 800c51c:	9101      	str	r1, [sp, #4]
 800c51e:	2102      	movs	r1, #2
 800c520:	9100      	str	r1, [sp, #0]
 800c522:	a803      	add	r0, sp, #12
 800c524:	4629      	mov	r1, r5
 800c526:	f000 f82f 	bl	800c588 <__kernel_rem_pio2f>
 800c52a:	2e00      	cmp	r6, #0
 800c52c:	f6bf af31 	bge.w	800c392 <__ieee754_rem_pio2f+0x62>
 800c530:	edd5 7a00 	vldr	s15, [r5]
 800c534:	eef1 7a67 	vneg.f32	s15, s15
 800c538:	edc5 7a00 	vstr	s15, [r5]
 800c53c:	edd5 7a01 	vldr	s15, [r5, #4]
 800c540:	eef1 7a67 	vneg.f32	s15, s15
 800c544:	edc5 7a01 	vstr	s15, [r5, #4]
 800c548:	e77a      	b.n	800c440 <__ieee754_rem_pio2f+0x110>
 800c54a:	2303      	movs	r3, #3
 800c54c:	e7e5      	b.n	800c51a <__ieee754_rem_pio2f+0x1ea>
 800c54e:	bf00      	nop
 800c550:	3f490fd8 	.word	0x3f490fd8
 800c554:	4016cbe3 	.word	0x4016cbe3
 800c558:	3fc90f80 	.word	0x3fc90f80
 800c55c:	3fc90fd0 	.word	0x3fc90fd0
 800c560:	37354400 	.word	0x37354400
 800c564:	37354443 	.word	0x37354443
 800c568:	2e85a308 	.word	0x2e85a308
 800c56c:	43490f80 	.word	0x43490f80
 800c570:	3f22f984 	.word	0x3f22f984
 800c574:	080a5510 	.word	0x080a5510
 800c578:	2e85a300 	.word	0x2e85a300
 800c57c:	248d3132 	.word	0x248d3132
 800c580:	43800000 	.word	0x43800000
 800c584:	080a5590 	.word	0x080a5590

0800c588 <__kernel_rem_pio2f>:
 800c588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c58c:	ed2d 8b04 	vpush	{d8-d9}
 800c590:	b0d7      	sub	sp, #348	; 0x15c
 800c592:	469b      	mov	fp, r3
 800c594:	460e      	mov	r6, r1
 800c596:	4bbe      	ldr	r3, [pc, #760]	; (800c890 <__kernel_rem_pio2f+0x308>)
 800c598:	9964      	ldr	r1, [sp, #400]	; 0x190
 800c59a:	9002      	str	r0, [sp, #8]
 800c59c:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800c5a0:	9865      	ldr	r0, [sp, #404]	; 0x194
 800c5a2:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800c8a0 <__kernel_rem_pio2f+0x318>
 800c5a6:	1ed1      	subs	r1, r2, #3
 800c5a8:	2308      	movs	r3, #8
 800c5aa:	fb91 f1f3 	sdiv	r1, r1, r3
 800c5ae:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800c5b2:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 800c5b6:	1c4c      	adds	r4, r1, #1
 800c5b8:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800c5bc:	eba1 050a 	sub.w	r5, r1, sl
 800c5c0:	aa1a      	add	r2, sp, #104	; 0x68
 800c5c2:	eb09 070a 	add.w	r7, r9, sl
 800c5c6:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800c5ca:	4696      	mov	lr, r2
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	42bb      	cmp	r3, r7
 800c5d0:	dd0f      	ble.n	800c5f2 <__kernel_rem_pio2f+0x6a>
 800c5d2:	af42      	add	r7, sp, #264	; 0x108
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	454a      	cmp	r2, r9
 800c5d8:	dc27      	bgt.n	800c62a <__kernel_rem_pio2f+0xa2>
 800c5da:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800c5de:	eb0b 0302 	add.w	r3, fp, r2
 800c5e2:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800c5e6:	9d02      	ldr	r5, [sp, #8]
 800c5e8:	eddf 7aad 	vldr	s15, [pc, #692]	; 800c8a0 <__kernel_rem_pio2f+0x318>
 800c5ec:	f04f 0c00 	mov.w	ip, #0
 800c5f0:	e015      	b.n	800c61e <__kernel_rem_pio2f+0x96>
 800c5f2:	42dd      	cmn	r5, r3
 800c5f4:	bf5d      	ittte	pl
 800c5f6:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800c5fa:	ee07 2a90 	vmovpl	s15, r2
 800c5fe:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c602:	eef0 7a47 	vmovmi.f32	s15, s14
 800c606:	ecee 7a01 	vstmia	lr!, {s15}
 800c60a:	3301      	adds	r3, #1
 800c60c:	e7df      	b.n	800c5ce <__kernel_rem_pio2f+0x46>
 800c60e:	ecf5 6a01 	vldmia	r5!, {s13}
 800c612:	ed33 7a01 	vldmdb	r3!, {s14}
 800c616:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c61a:	f10c 0c01 	add.w	ip, ip, #1
 800c61e:	45d4      	cmp	ip, sl
 800c620:	ddf5      	ble.n	800c60e <__kernel_rem_pio2f+0x86>
 800c622:	ece7 7a01 	vstmia	r7!, {s15}
 800c626:	3201      	adds	r2, #1
 800c628:	e7d5      	b.n	800c5d6 <__kernel_rem_pio2f+0x4e>
 800c62a:	ab06      	add	r3, sp, #24
 800c62c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800c630:	9304      	str	r3, [sp, #16]
 800c632:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800c89c <__kernel_rem_pio2f+0x314>
 800c636:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800c898 <__kernel_rem_pio2f+0x310>
 800c63a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800c63e:	9303      	str	r3, [sp, #12]
 800c640:	464d      	mov	r5, r9
 800c642:	ab56      	add	r3, sp, #344	; 0x158
 800c644:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800c648:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800c64c:	3f01      	subs	r7, #1
 800c64e:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800c652:	00bf      	lsls	r7, r7, #2
 800c654:	ab56      	add	r3, sp, #344	; 0x158
 800c656:	19da      	adds	r2, r3, r7
 800c658:	3a4c      	subs	r2, #76	; 0x4c
 800c65a:	2300      	movs	r3, #0
 800c65c:	1ae9      	subs	r1, r5, r3
 800c65e:	2900      	cmp	r1, #0
 800c660:	dc4c      	bgt.n	800c6fc <__kernel_rem_pio2f+0x174>
 800c662:	4620      	mov	r0, r4
 800c664:	f000 fdb6 	bl	800d1d4 <scalbnf>
 800c668:	eeb0 8a40 	vmov.f32	s16, s0
 800c66c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800c670:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c674:	f000 fd6c 	bl	800d150 <floorf>
 800c678:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800c67c:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c680:	2c00      	cmp	r4, #0
 800c682:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c686:	edcd 7a01 	vstr	s15, [sp, #4]
 800c68a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c68e:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c692:	dd48      	ble.n	800c726 <__kernel_rem_pio2f+0x19e>
 800c694:	1e69      	subs	r1, r5, #1
 800c696:	ab06      	add	r3, sp, #24
 800c698:	f1c4 0008 	rsb	r0, r4, #8
 800c69c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800c6a0:	9a01      	ldr	r2, [sp, #4]
 800c6a2:	fa4c f300 	asr.w	r3, ip, r0
 800c6a6:	441a      	add	r2, r3
 800c6a8:	4083      	lsls	r3, r0
 800c6aa:	9201      	str	r2, [sp, #4]
 800c6ac:	ebac 0203 	sub.w	r2, ip, r3
 800c6b0:	ab06      	add	r3, sp, #24
 800c6b2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800c6b6:	f1c4 0307 	rsb	r3, r4, #7
 800c6ba:	fa42 f803 	asr.w	r8, r2, r3
 800c6be:	f1b8 0f00 	cmp.w	r8, #0
 800c6c2:	dd41      	ble.n	800c748 <__kernel_rem_pio2f+0x1c0>
 800c6c4:	9b01      	ldr	r3, [sp, #4]
 800c6c6:	2000      	movs	r0, #0
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	9301      	str	r3, [sp, #4]
 800c6cc:	4601      	mov	r1, r0
 800c6ce:	4285      	cmp	r5, r0
 800c6d0:	dc6d      	bgt.n	800c7ae <__kernel_rem_pio2f+0x226>
 800c6d2:	2c00      	cmp	r4, #0
 800c6d4:	dd04      	ble.n	800c6e0 <__kernel_rem_pio2f+0x158>
 800c6d6:	2c01      	cmp	r4, #1
 800c6d8:	d07e      	beq.n	800c7d8 <__kernel_rem_pio2f+0x250>
 800c6da:	2c02      	cmp	r4, #2
 800c6dc:	f000 8086 	beq.w	800c7ec <__kernel_rem_pio2f+0x264>
 800c6e0:	f1b8 0f02 	cmp.w	r8, #2
 800c6e4:	d130      	bne.n	800c748 <__kernel_rem_pio2f+0x1c0>
 800c6e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c6ea:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c6ee:	b359      	cbz	r1, 800c748 <__kernel_rem_pio2f+0x1c0>
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	f000 fd6f 	bl	800d1d4 <scalbnf>
 800c6f6:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c6fa:	e025      	b.n	800c748 <__kernel_rem_pio2f+0x1c0>
 800c6fc:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c700:	a806      	add	r0, sp, #24
 800c702:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c70a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c70e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c712:	ee10 1a10 	vmov	r1, s0
 800c716:	ed32 0a01 	vldmdb	r2!, {s0}
 800c71a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800c71e:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c722:	3301      	adds	r3, #1
 800c724:	e79a      	b.n	800c65c <__kernel_rem_pio2f+0xd4>
 800c726:	d106      	bne.n	800c736 <__kernel_rem_pio2f+0x1ae>
 800c728:	1e6b      	subs	r3, r5, #1
 800c72a:	aa06      	add	r2, sp, #24
 800c72c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c730:	ea4f 2822 	mov.w	r8, r2, asr #8
 800c734:	e7c3      	b.n	800c6be <__kernel_rem_pio2f+0x136>
 800c736:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c73a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c742:	da31      	bge.n	800c7a8 <__kernel_rem_pio2f+0x220>
 800c744:	f04f 0800 	mov.w	r8, #0
 800c748:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c74c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c750:	f040 80a8 	bne.w	800c8a4 <__kernel_rem_pio2f+0x31c>
 800c754:	1e6b      	subs	r3, r5, #1
 800c756:	4618      	mov	r0, r3
 800c758:	2200      	movs	r2, #0
 800c75a:	4548      	cmp	r0, r9
 800c75c:	da4d      	bge.n	800c7fa <__kernel_rem_pio2f+0x272>
 800c75e:	2a00      	cmp	r2, #0
 800c760:	f000 8087 	beq.w	800c872 <__kernel_rem_pio2f+0x2ea>
 800c764:	aa06      	add	r2, sp, #24
 800c766:	3c08      	subs	r4, #8
 800c768:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c76c:	2900      	cmp	r1, #0
 800c76e:	f000 808d 	beq.w	800c88c <__kernel_rem_pio2f+0x304>
 800c772:	4620      	mov	r0, r4
 800c774:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c778:	9302      	str	r3, [sp, #8]
 800c77a:	f000 fd2b 	bl	800d1d4 <scalbnf>
 800c77e:	9b02      	ldr	r3, [sp, #8]
 800c780:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800c89c <__kernel_rem_pio2f+0x314>
 800c784:	0099      	lsls	r1, r3, #2
 800c786:	aa42      	add	r2, sp, #264	; 0x108
 800c788:	1850      	adds	r0, r2, r1
 800c78a:	1d05      	adds	r5, r0, #4
 800c78c:	461c      	mov	r4, r3
 800c78e:	2c00      	cmp	r4, #0
 800c790:	f280 80b8 	bge.w	800c904 <__kernel_rem_pio2f+0x37c>
 800c794:	2500      	movs	r5, #0
 800c796:	1b5c      	subs	r4, r3, r5
 800c798:	2c00      	cmp	r4, #0
 800c79a:	f2c0 80d8 	blt.w	800c94e <__kernel_rem_pio2f+0x3c6>
 800c79e:	4f3d      	ldr	r7, [pc, #244]	; (800c894 <__kernel_rem_pio2f+0x30c>)
 800c7a0:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800c8a0 <__kernel_rem_pio2f+0x318>
 800c7a4:	2400      	movs	r4, #0
 800c7a6:	e0c6      	b.n	800c936 <__kernel_rem_pio2f+0x3ae>
 800c7a8:	f04f 0802 	mov.w	r8, #2
 800c7ac:	e78a      	b.n	800c6c4 <__kernel_rem_pio2f+0x13c>
 800c7ae:	ab06      	add	r3, sp, #24
 800c7b0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c7b4:	b949      	cbnz	r1, 800c7ca <__kernel_rem_pio2f+0x242>
 800c7b6:	b12b      	cbz	r3, 800c7c4 <__kernel_rem_pio2f+0x23c>
 800c7b8:	aa06      	add	r2, sp, #24
 800c7ba:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800c7be:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	3001      	adds	r0, #1
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	e781      	b.n	800c6ce <__kernel_rem_pio2f+0x146>
 800c7ca:	aa06      	add	r2, sp, #24
 800c7cc:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800c7d0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800c7d4:	460b      	mov	r3, r1
 800c7d6:	e7f5      	b.n	800c7c4 <__kernel_rem_pio2f+0x23c>
 800c7d8:	1e68      	subs	r0, r5, #1
 800c7da:	ab06      	add	r3, sp, #24
 800c7dc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c7e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7e4:	aa06      	add	r2, sp, #24
 800c7e6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800c7ea:	e779      	b.n	800c6e0 <__kernel_rem_pio2f+0x158>
 800c7ec:	1e68      	subs	r0, r5, #1
 800c7ee:	ab06      	add	r3, sp, #24
 800c7f0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c7f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7f8:	e7f4      	b.n	800c7e4 <__kernel_rem_pio2f+0x25c>
 800c7fa:	a906      	add	r1, sp, #24
 800c7fc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c800:	3801      	subs	r0, #1
 800c802:	430a      	orrs	r2, r1
 800c804:	e7a9      	b.n	800c75a <__kernel_rem_pio2f+0x1d2>
 800c806:	f10c 0c01 	add.w	ip, ip, #1
 800c80a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c80e:	2a00      	cmp	r2, #0
 800c810:	d0f9      	beq.n	800c806 <__kernel_rem_pio2f+0x27e>
 800c812:	eb0b 0305 	add.w	r3, fp, r5
 800c816:	aa1a      	add	r2, sp, #104	; 0x68
 800c818:	009b      	lsls	r3, r3, #2
 800c81a:	1898      	adds	r0, r3, r2
 800c81c:	3004      	adds	r0, #4
 800c81e:	1c69      	adds	r1, r5, #1
 800c820:	3704      	adds	r7, #4
 800c822:	2200      	movs	r2, #0
 800c824:	4465      	add	r5, ip
 800c826:	9005      	str	r0, [sp, #20]
 800c828:	428d      	cmp	r5, r1
 800c82a:	f6ff af0a 	blt.w	800c642 <__kernel_rem_pio2f+0xba>
 800c82e:	a81a      	add	r0, sp, #104	; 0x68
 800c830:	eb02 0c03 	add.w	ip, r2, r3
 800c834:	4484      	add	ip, r0
 800c836:	9803      	ldr	r0, [sp, #12]
 800c838:	f8dd e008 	ldr.w	lr, [sp, #8]
 800c83c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800c840:	9001      	str	r0, [sp, #4]
 800c842:	ee07 0a90 	vmov	s15, r0
 800c846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c84a:	9805      	ldr	r0, [sp, #20]
 800c84c:	edcc 7a00 	vstr	s15, [ip]
 800c850:	eddf 7a13 	vldr	s15, [pc, #76]	; 800c8a0 <__kernel_rem_pio2f+0x318>
 800c854:	eb00 0802 	add.w	r8, r0, r2
 800c858:	f04f 0c00 	mov.w	ip, #0
 800c85c:	45d4      	cmp	ip, sl
 800c85e:	dd0c      	ble.n	800c87a <__kernel_rem_pio2f+0x2f2>
 800c860:	eb02 0c07 	add.w	ip, r2, r7
 800c864:	a842      	add	r0, sp, #264	; 0x108
 800c866:	4484      	add	ip, r0
 800c868:	edcc 7a01 	vstr	s15, [ip, #4]
 800c86c:	3101      	adds	r1, #1
 800c86e:	3204      	adds	r2, #4
 800c870:	e7da      	b.n	800c828 <__kernel_rem_pio2f+0x2a0>
 800c872:	9b04      	ldr	r3, [sp, #16]
 800c874:	f04f 0c01 	mov.w	ip, #1
 800c878:	e7c7      	b.n	800c80a <__kernel_rem_pio2f+0x282>
 800c87a:	ecfe 6a01 	vldmia	lr!, {s13}
 800c87e:	ed38 7a01 	vldmdb	r8!, {s14}
 800c882:	f10c 0c01 	add.w	ip, ip, #1
 800c886:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c88a:	e7e7      	b.n	800c85c <__kernel_rem_pio2f+0x2d4>
 800c88c:	3b01      	subs	r3, #1
 800c88e:	e769      	b.n	800c764 <__kernel_rem_pio2f+0x1dc>
 800c890:	080a58d4 	.word	0x080a58d4
 800c894:	080a58a8 	.word	0x080a58a8
 800c898:	43800000 	.word	0x43800000
 800c89c:	3b800000 	.word	0x3b800000
 800c8a0:	00000000 	.word	0x00000000
 800c8a4:	4260      	negs	r0, r4
 800c8a6:	eeb0 0a48 	vmov.f32	s0, s16
 800c8aa:	f000 fc93 	bl	800d1d4 <scalbnf>
 800c8ae:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800c898 <__kernel_rem_pio2f+0x310>
 800c8b2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c8b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8ba:	db1a      	blt.n	800c8f2 <__kernel_rem_pio2f+0x36a>
 800c8bc:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800c89c <__kernel_rem_pio2f+0x314>
 800c8c0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c8c4:	aa06      	add	r2, sp, #24
 800c8c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c8ca:	a906      	add	r1, sp, #24
 800c8cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c8d0:	3408      	adds	r4, #8
 800c8d2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c8d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c8da:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c8de:	ee10 3a10 	vmov	r3, s0
 800c8e2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800c8e6:	1c6b      	adds	r3, r5, #1
 800c8e8:	ee17 2a90 	vmov	r2, s15
 800c8ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c8f0:	e73f      	b.n	800c772 <__kernel_rem_pio2f+0x1ea>
 800c8f2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c8f6:	aa06      	add	r2, sp, #24
 800c8f8:	ee10 3a10 	vmov	r3, s0
 800c8fc:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800c900:	462b      	mov	r3, r5
 800c902:	e736      	b.n	800c772 <__kernel_rem_pio2f+0x1ea>
 800c904:	aa06      	add	r2, sp, #24
 800c906:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800c90a:	9202      	str	r2, [sp, #8]
 800c90c:	ee07 2a90 	vmov	s15, r2
 800c910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c914:	3c01      	subs	r4, #1
 800c916:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c91a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c91e:	ed65 7a01 	vstmdb	r5!, {s15}
 800c922:	e734      	b.n	800c78e <__kernel_rem_pio2f+0x206>
 800c924:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800c928:	ecf7 6a01 	vldmia	r7!, {s13}
 800c92c:	ed9c 7a00 	vldr	s14, [ip]
 800c930:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c934:	3401      	adds	r4, #1
 800c936:	454c      	cmp	r4, r9
 800c938:	dc01      	bgt.n	800c93e <__kernel_rem_pio2f+0x3b6>
 800c93a:	42a5      	cmp	r5, r4
 800c93c:	daf2      	bge.n	800c924 <__kernel_rem_pio2f+0x39c>
 800c93e:	aa56      	add	r2, sp, #344	; 0x158
 800c940:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800c944:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800c948:	3501      	adds	r5, #1
 800c94a:	3804      	subs	r0, #4
 800c94c:	e723      	b.n	800c796 <__kernel_rem_pio2f+0x20e>
 800c94e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c950:	2a03      	cmp	r2, #3
 800c952:	d84d      	bhi.n	800c9f0 <__kernel_rem_pio2f+0x468>
 800c954:	e8df f002 	tbb	[pc, r2]
 800c958:	021f1f3e 	.word	0x021f1f3e
 800c95c:	aa56      	add	r2, sp, #344	; 0x158
 800c95e:	4411      	add	r1, r2
 800c960:	399c      	subs	r1, #156	; 0x9c
 800c962:	4608      	mov	r0, r1
 800c964:	461c      	mov	r4, r3
 800c966:	2c00      	cmp	r4, #0
 800c968:	dc5f      	bgt.n	800ca2a <__kernel_rem_pio2f+0x4a2>
 800c96a:	4608      	mov	r0, r1
 800c96c:	461c      	mov	r4, r3
 800c96e:	2c01      	cmp	r4, #1
 800c970:	dc6b      	bgt.n	800ca4a <__kernel_rem_pio2f+0x4c2>
 800c972:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800c8a0 <__kernel_rem_pio2f+0x318>
 800c976:	2b01      	cmp	r3, #1
 800c978:	dc77      	bgt.n	800ca6a <__kernel_rem_pio2f+0x4e2>
 800c97a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800c97e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800c982:	f1b8 0f00 	cmp.w	r8, #0
 800c986:	d176      	bne.n	800ca76 <__kernel_rem_pio2f+0x4ee>
 800c988:	edc6 6a00 	vstr	s13, [r6]
 800c98c:	ed86 7a01 	vstr	s14, [r6, #4]
 800c990:	edc6 7a02 	vstr	s15, [r6, #8]
 800c994:	e02c      	b.n	800c9f0 <__kernel_rem_pio2f+0x468>
 800c996:	aa56      	add	r2, sp, #344	; 0x158
 800c998:	4411      	add	r1, r2
 800c99a:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800c8a0 <__kernel_rem_pio2f+0x318>
 800c99e:	399c      	subs	r1, #156	; 0x9c
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	2800      	cmp	r0, #0
 800c9a4:	da32      	bge.n	800ca0c <__kernel_rem_pio2f+0x484>
 800c9a6:	f1b8 0f00 	cmp.w	r8, #0
 800c9aa:	d035      	beq.n	800ca18 <__kernel_rem_pio2f+0x490>
 800c9ac:	eef1 7a47 	vneg.f32	s15, s14
 800c9b0:	edc6 7a00 	vstr	s15, [r6]
 800c9b4:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800c9b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c9bc:	a82f      	add	r0, sp, #188	; 0xbc
 800c9be:	2101      	movs	r1, #1
 800c9c0:	428b      	cmp	r3, r1
 800c9c2:	da2c      	bge.n	800ca1e <__kernel_rem_pio2f+0x496>
 800c9c4:	f1b8 0f00 	cmp.w	r8, #0
 800c9c8:	d001      	beq.n	800c9ce <__kernel_rem_pio2f+0x446>
 800c9ca:	eef1 7a67 	vneg.f32	s15, s15
 800c9ce:	edc6 7a01 	vstr	s15, [r6, #4]
 800c9d2:	e00d      	b.n	800c9f0 <__kernel_rem_pio2f+0x468>
 800c9d4:	aa56      	add	r2, sp, #344	; 0x158
 800c9d6:	4411      	add	r1, r2
 800c9d8:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800c8a0 <__kernel_rem_pio2f+0x318>
 800c9dc:	399c      	subs	r1, #156	; 0x9c
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	da0e      	bge.n	800ca00 <__kernel_rem_pio2f+0x478>
 800c9e2:	f1b8 0f00 	cmp.w	r8, #0
 800c9e6:	d001      	beq.n	800c9ec <__kernel_rem_pio2f+0x464>
 800c9e8:	eef1 7a67 	vneg.f32	s15, s15
 800c9ec:	edc6 7a00 	vstr	s15, [r6]
 800c9f0:	9b01      	ldr	r3, [sp, #4]
 800c9f2:	f003 0007 	and.w	r0, r3, #7
 800c9f6:	b057      	add	sp, #348	; 0x15c
 800c9f8:	ecbd 8b04 	vpop	{d8-d9}
 800c9fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca00:	ed31 7a01 	vldmdb	r1!, {s14}
 800ca04:	3b01      	subs	r3, #1
 800ca06:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ca0a:	e7e8      	b.n	800c9de <__kernel_rem_pio2f+0x456>
 800ca0c:	ed71 7a01 	vldmdb	r1!, {s15}
 800ca10:	3801      	subs	r0, #1
 800ca12:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ca16:	e7c4      	b.n	800c9a2 <__kernel_rem_pio2f+0x41a>
 800ca18:	eef0 7a47 	vmov.f32	s15, s14
 800ca1c:	e7c8      	b.n	800c9b0 <__kernel_rem_pio2f+0x428>
 800ca1e:	ecb0 7a01 	vldmia	r0!, {s14}
 800ca22:	3101      	adds	r1, #1
 800ca24:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ca28:	e7ca      	b.n	800c9c0 <__kernel_rem_pio2f+0x438>
 800ca2a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800ca2e:	ed70 6a01 	vldmdb	r0!, {s13}
 800ca32:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ca36:	3c01      	subs	r4, #1
 800ca38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca3c:	ed00 7a01 	vstr	s14, [r0, #-4]
 800ca40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca44:	edc0 7a00 	vstr	s15, [r0]
 800ca48:	e78d      	b.n	800c966 <__kernel_rem_pio2f+0x3de>
 800ca4a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800ca4e:	ed70 6a01 	vldmdb	r0!, {s13}
 800ca52:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ca56:	3c01      	subs	r4, #1
 800ca58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca5c:	ed00 7a01 	vstr	s14, [r0, #-4]
 800ca60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca64:	edc0 7a00 	vstr	s15, [r0]
 800ca68:	e781      	b.n	800c96e <__kernel_rem_pio2f+0x3e6>
 800ca6a:	ed31 7a01 	vldmdb	r1!, {s14}
 800ca6e:	3b01      	subs	r3, #1
 800ca70:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ca74:	e77f      	b.n	800c976 <__kernel_rem_pio2f+0x3ee>
 800ca76:	eef1 6a66 	vneg.f32	s13, s13
 800ca7a:	eeb1 7a47 	vneg.f32	s14, s14
 800ca7e:	edc6 6a00 	vstr	s13, [r6]
 800ca82:	ed86 7a01 	vstr	s14, [r6, #4]
 800ca86:	eef1 7a67 	vneg.f32	s15, s15
 800ca8a:	e781      	b.n	800c990 <__kernel_rem_pio2f+0x408>

0800ca8c <__kernel_tanf>:
 800ca8c:	b508      	push	{r3, lr}
 800ca8e:	ee10 3a10 	vmov	r3, s0
 800ca92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ca96:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800ca9a:	eef0 7a40 	vmov.f32	s15, s0
 800ca9e:	da17      	bge.n	800cad0 <__kernel_tanf+0x44>
 800caa0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800caa4:	ee17 1a10 	vmov	r1, s14
 800caa8:	bb41      	cbnz	r1, 800cafc <__kernel_tanf+0x70>
 800caaa:	1c43      	adds	r3, r0, #1
 800caac:	4313      	orrs	r3, r2
 800caae:	d108      	bne.n	800cac2 <__kernel_tanf+0x36>
 800cab0:	f7fe facc 	bl	800b04c <fabsf>
 800cab4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cab8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cabc:	eeb0 0a67 	vmov.f32	s0, s15
 800cac0:	bd08      	pop	{r3, pc}
 800cac2:	2801      	cmp	r0, #1
 800cac4:	d0fa      	beq.n	800cabc <__kernel_tanf+0x30>
 800cac6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800caca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cace:	e7f5      	b.n	800cabc <__kernel_tanf+0x30>
 800cad0:	494e      	ldr	r1, [pc, #312]	; (800cc0c <__kernel_tanf+0x180>)
 800cad2:	428a      	cmp	r2, r1
 800cad4:	dd12      	ble.n	800cafc <__kernel_tanf+0x70>
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800cc10 <__kernel_tanf+0x184>
 800cadc:	bfb8      	it	lt
 800cade:	eef1 7a40 	vneglt.f32	s15, s0
 800cae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cae6:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800cc14 <__kernel_tanf+0x188>
 800caea:	bfb8      	it	lt
 800caec:	eef1 0a60 	vneglt.f32	s1, s1
 800caf0:	ee77 0a60 	vsub.f32	s1, s14, s1
 800caf4:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800caf8:	eddf 0a47 	vldr	s1, [pc, #284]	; 800cc18 <__kernel_tanf+0x18c>
 800cafc:	ed9f 6a47 	vldr	s12, [pc, #284]	; 800cc1c <__kernel_tanf+0x190>
 800cb00:	eddf 5a47 	vldr	s11, [pc, #284]	; 800cc20 <__kernel_tanf+0x194>
 800cb04:	ed9f 5a47 	vldr	s10, [pc, #284]	; 800cc24 <__kernel_tanf+0x198>
 800cb08:	4940      	ldr	r1, [pc, #256]	; (800cc0c <__kernel_tanf+0x180>)
 800cb0a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800cb0e:	428a      	cmp	r2, r1
 800cb10:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800cb14:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800cb18:	eee7 5a06 	vfma.f32	s11, s14, s12
 800cb1c:	ed9f 6a42 	vldr	s12, [pc, #264]	; 800cc28 <__kernel_tanf+0x19c>
 800cb20:	eea5 6a87 	vfma.f32	s12, s11, s14
 800cb24:	eddf 5a41 	vldr	s11, [pc, #260]	; 800cc2c <__kernel_tanf+0x1a0>
 800cb28:	eee6 5a07 	vfma.f32	s11, s12, s14
 800cb2c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800cc30 <__kernel_tanf+0x1a4>
 800cb30:	eea5 6a87 	vfma.f32	s12, s11, s14
 800cb34:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800cc34 <__kernel_tanf+0x1a8>
 800cb38:	eee6 5a07 	vfma.f32	s11, s12, s14
 800cb3c:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800cc38 <__kernel_tanf+0x1ac>
 800cb40:	eea7 6a05 	vfma.f32	s12, s14, s10
 800cb44:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800cc3c <__kernel_tanf+0x1b0>
 800cb48:	eea6 5a07 	vfma.f32	s10, s12, s14
 800cb4c:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 800cc40 <__kernel_tanf+0x1b4>
 800cb50:	eea5 6a07 	vfma.f32	s12, s10, s14
 800cb54:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 800cc44 <__kernel_tanf+0x1b8>
 800cb58:	eea6 5a07 	vfma.f32	s10, s12, s14
 800cb5c:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 800cc48 <__kernel_tanf+0x1bc>
 800cb60:	eea5 6a07 	vfma.f32	s12, s10, s14
 800cb64:	eeb0 7a46 	vmov.f32	s14, s12
 800cb68:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cb6c:	eeb0 6a60 	vmov.f32	s12, s1
 800cb70:	eea7 6a24 	vfma.f32	s12, s14, s9
 800cb74:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800cc4c <__kernel_tanf+0x1c0>
 800cb78:	eee6 0a26 	vfma.f32	s1, s12, s13
 800cb7c:	eee4 0a87 	vfma.f32	s1, s9, s14
 800cb80:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800cb84:	dd1d      	ble.n	800cbc2 <__kernel_tanf+0x136>
 800cb86:	ee07 0a10 	vmov	s14, r0
 800cb8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cb8e:	ee66 5aa6 	vmul.f32	s11, s13, s13
 800cb92:	ee76 6a87 	vadd.f32	s13, s13, s14
 800cb96:	179b      	asrs	r3, r3, #30
 800cb98:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 800cb9c:	f003 0302 	and.w	r3, r3, #2
 800cba0:	f1c3 0301 	rsb	r3, r3, #1
 800cba4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cba8:	ee76 0a60 	vsub.f32	s1, s12, s1
 800cbac:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800cbb0:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800cbb4:	ee07 3a90 	vmov	s15, r3
 800cbb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cbbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbc0:	e77c      	b.n	800cabc <__kernel_tanf+0x30>
 800cbc2:	2801      	cmp	r0, #1
 800cbc4:	d01f      	beq.n	800cc06 <__kernel_tanf+0x17a>
 800cbc6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800cbca:	eec7 5a26 	vdiv.f32	s11, s14, s13
 800cbce:	4b20      	ldr	r3, [pc, #128]	; (800cc50 <__kernel_tanf+0x1c4>)
 800cbd0:	ee16 2a90 	vmov	r2, s13
 800cbd4:	401a      	ands	r2, r3
 800cbd6:	ee06 2a10 	vmov	s12, r2
 800cbda:	ee15 2a90 	vmov	r2, s11
 800cbde:	4013      	ands	r3, r2
 800cbe0:	ee07 3a10 	vmov	s14, r3
 800cbe4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbe8:	eee6 6a07 	vfma.f32	s13, s12, s14
 800cbec:	ee76 7a67 	vsub.f32	s15, s12, s15
 800cbf0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800cbf4:	eef0 7a66 	vmov.f32	s15, s13
 800cbf8:	eee7 7a20 	vfma.f32	s15, s14, s1
 800cbfc:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800cc00:	eef0 7a47 	vmov.f32	s15, s14
 800cc04:	e75a      	b.n	800cabc <__kernel_tanf+0x30>
 800cc06:	eef0 7a66 	vmov.f32	s15, s13
 800cc0a:	e757      	b.n	800cabc <__kernel_tanf+0x30>
 800cc0c:	3f2ca13f 	.word	0x3f2ca13f
 800cc10:	3f490fda 	.word	0x3f490fda
 800cc14:	33222168 	.word	0x33222168
 800cc18:	00000000 	.word	0x00000000
 800cc1c:	37d95384 	.word	0x37d95384
 800cc20:	3895c07a 	.word	0x3895c07a
 800cc24:	b79bae5f 	.word	0xb79bae5f
 800cc28:	398137b9 	.word	0x398137b9
 800cc2c:	3abede48 	.word	0x3abede48
 800cc30:	3c11371f 	.word	0x3c11371f
 800cc34:	3d5d0dd1 	.word	0x3d5d0dd1
 800cc38:	38a3f445 	.word	0x38a3f445
 800cc3c:	3a1a26c8 	.word	0x3a1a26c8
 800cc40:	3b6b6916 	.word	0x3b6b6916
 800cc44:	3cb327a4 	.word	0x3cb327a4
 800cc48:	3e088889 	.word	0x3e088889
 800cc4c:	3eaaaaab 	.word	0x3eaaaaab
 800cc50:	fffff000 	.word	0xfffff000

0800cc54 <with_errnof>:
 800cc54:	b510      	push	{r4, lr}
 800cc56:	ed2d 8b02 	vpush	{d8}
 800cc5a:	eeb0 8a40 	vmov.f32	s16, s0
 800cc5e:	4604      	mov	r4, r0
 800cc60:	f7fe f9c2 	bl	800afe8 <__errno>
 800cc64:	eeb0 0a48 	vmov.f32	s0, s16
 800cc68:	ecbd 8b02 	vpop	{d8}
 800cc6c:	6004      	str	r4, [r0, #0]
 800cc6e:	bd10      	pop	{r4, pc}

0800cc70 <__math_divzerof>:
 800cc70:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cc74:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800cc78:	2800      	cmp	r0, #0
 800cc7a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800cc7e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800cc8c <__math_divzerof+0x1c>
 800cc82:	2022      	movs	r0, #34	; 0x22
 800cc84:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800cc88:	f7ff bfe4 	b.w	800cc54 <with_errnof>
 800cc8c:	00000000 	.word	0x00000000

0800cc90 <__math_invalidf>:
 800cc90:	eef0 7a40 	vmov.f32	s15, s0
 800cc94:	ee30 7a40 	vsub.f32	s14, s0, s0
 800cc98:	eef4 7a67 	vcmp.f32	s15, s15
 800cc9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cca0:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800cca4:	d602      	bvs.n	800ccac <__math_invalidf+0x1c>
 800cca6:	2021      	movs	r0, #33	; 0x21
 800cca8:	f7ff bfd4 	b.w	800cc54 <with_errnof>
 800ccac:	4770      	bx	lr

0800ccae <fabs>:
 800ccae:	ec51 0b10 	vmov	r0, r1, d0
 800ccb2:	ee10 2a10 	vmov	r2, s0
 800ccb6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ccba:	ec43 2b10 	vmov	d0, r2, r3
 800ccbe:	4770      	bx	lr

0800ccc0 <finite>:
 800ccc0:	ee10 3a90 	vmov	r3, s1
 800ccc4:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800ccc8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cccc:	0fc0      	lsrs	r0, r0, #31
 800ccce:	4770      	bx	lr

0800ccd0 <matherr>:
 800ccd0:	2000      	movs	r0, #0
 800ccd2:	4770      	bx	lr
 800ccd4:	0000      	movs	r0, r0
	...

0800ccd8 <nan>:
 800ccd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cce0 <nan+0x8>
 800ccdc:	4770      	bx	lr
 800ccde:	bf00      	nop
 800cce0:	00000000 	.word	0x00000000
 800cce4:	7ff80000 	.word	0x7ff80000

0800cce8 <rint>:
 800cce8:	b530      	push	{r4, r5, lr}
 800ccea:	b085      	sub	sp, #20
 800ccec:	ed8d 0b00 	vstr	d0, [sp]
 800ccf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccf4:	f3c3 510a 	ubfx	r1, r3, #20, #11
 800ccf8:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 800ccfc:	2813      	cmp	r0, #19
 800ccfe:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 800cd02:	dc5a      	bgt.n	800cdba <rint+0xd2>
 800cd04:	2800      	cmp	r0, #0
 800cd06:	da2f      	bge.n	800cd68 <rint+0x80>
 800cd08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cd0c:	4311      	orrs	r1, r2
 800cd0e:	d027      	beq.n	800cd60 <rint+0x78>
 800cd10:	f3c3 0513 	ubfx	r5, r3, #0, #20
 800cd14:	4315      	orrs	r5, r2
 800cd16:	426a      	negs	r2, r5
 800cd18:	432a      	orrs	r2, r5
 800cd1a:	0b12      	lsrs	r2, r2, #12
 800cd1c:	0c5b      	lsrs	r3, r3, #17
 800cd1e:	045b      	lsls	r3, r3, #17
 800cd20:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800cd24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd28:	ea42 0103 	orr.w	r1, r2, r3
 800cd2c:	4b31      	ldr	r3, [pc, #196]	; (800cdf4 <rint+0x10c>)
 800cd2e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cd32:	ed93 6b00 	vldr	d6, [r3]
 800cd36:	ec41 0b17 	vmov	d7, r0, r1
 800cd3a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800cd3e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cd42:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cd46:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cd4a:	ed8d 7b00 	vstr	d7, [sp]
 800cd4e:	9b01      	ldr	r3, [sp, #4]
 800cd50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd58:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 800cd5c:	e9cd 0100 	strd	r0, r1, [sp]
 800cd60:	ed9d 0b00 	vldr	d0, [sp]
 800cd64:	b005      	add	sp, #20
 800cd66:	bd30      	pop	{r4, r5, pc}
 800cd68:	4923      	ldr	r1, [pc, #140]	; (800cdf8 <rint+0x110>)
 800cd6a:	4101      	asrs	r1, r0
 800cd6c:	ea03 0501 	and.w	r5, r3, r1
 800cd70:	4315      	orrs	r5, r2
 800cd72:	d0f5      	beq.n	800cd60 <rint+0x78>
 800cd74:	0849      	lsrs	r1, r1, #1
 800cd76:	ea03 0501 	and.w	r5, r3, r1
 800cd7a:	432a      	orrs	r2, r5
 800cd7c:	d00b      	beq.n	800cd96 <rint+0xae>
 800cd7e:	ea23 0101 	bic.w	r1, r3, r1
 800cd82:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cd86:	2813      	cmp	r0, #19
 800cd88:	fa43 f300 	asr.w	r3, r3, r0
 800cd8c:	bf0c      	ite	eq
 800cd8e:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800cd92:	2200      	movne	r2, #0
 800cd94:	430b      	orrs	r3, r1
 800cd96:	4619      	mov	r1, r3
 800cd98:	4b16      	ldr	r3, [pc, #88]	; (800cdf4 <rint+0x10c>)
 800cd9a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800cd9e:	ed94 6b00 	vldr	d6, [r4]
 800cda2:	4610      	mov	r0, r2
 800cda4:	ec41 0b17 	vmov	d7, r0, r1
 800cda8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800cdac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cdb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cdb4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cdb8:	e008      	b.n	800cdcc <rint+0xe4>
 800cdba:	2833      	cmp	r0, #51	; 0x33
 800cdbc:	dd09      	ble.n	800cdd2 <rint+0xea>
 800cdbe:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800cdc2:	d1cd      	bne.n	800cd60 <rint+0x78>
 800cdc4:	ed9d 7b00 	vldr	d7, [sp]
 800cdc8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800cdcc:	ed8d 7b00 	vstr	d7, [sp]
 800cdd0:	e7c6      	b.n	800cd60 <rint+0x78>
 800cdd2:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 800cdd6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800cdda:	40c1      	lsrs	r1, r0
 800cddc:	420a      	tst	r2, r1
 800cdde:	d0bf      	beq.n	800cd60 <rint+0x78>
 800cde0:	0849      	lsrs	r1, r1, #1
 800cde2:	420a      	tst	r2, r1
 800cde4:	bf1f      	itttt	ne
 800cde6:	ea22 0101 	bicne.w	r1, r2, r1
 800cdea:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800cdee:	4102      	asrne	r2, r0
 800cdf0:	430a      	orrne	r2, r1
 800cdf2:	e7d0      	b.n	800cd96 <rint+0xae>
 800cdf4:	080a58e0 	.word	0x080a58e0
 800cdf8:	000fffff 	.word	0x000fffff
 800cdfc:	00000000 	.word	0x00000000

0800ce00 <scalbn>:
 800ce00:	b500      	push	{lr}
 800ce02:	ed2d 8b02 	vpush	{d8}
 800ce06:	b083      	sub	sp, #12
 800ce08:	ed8d 0b00 	vstr	d0, [sp]
 800ce0c:	9b01      	ldr	r3, [sp, #4]
 800ce0e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ce12:	b9a2      	cbnz	r2, 800ce3e <scalbn+0x3e>
 800ce14:	9a00      	ldr	r2, [sp, #0]
 800ce16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	d03a      	beq.n	800ce94 <scalbn+0x94>
 800ce1e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800ced8 <scalbn+0xd8>
 800ce22:	4b35      	ldr	r3, [pc, #212]	; (800cef8 <scalbn+0xf8>)
 800ce24:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ce28:	4298      	cmp	r0, r3
 800ce2a:	ed8d 7b00 	vstr	d7, [sp]
 800ce2e:	da11      	bge.n	800ce54 <scalbn+0x54>
 800ce30:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800cee0 <scalbn+0xe0>
 800ce34:	ed9d 6b00 	vldr	d6, [sp]
 800ce38:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce3c:	e007      	b.n	800ce4e <scalbn+0x4e>
 800ce3e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ce42:	428a      	cmp	r2, r1
 800ce44:	d10a      	bne.n	800ce5c <scalbn+0x5c>
 800ce46:	ed9d 7b00 	vldr	d7, [sp]
 800ce4a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ce4e:	ed8d 7b00 	vstr	d7, [sp]
 800ce52:	e01f      	b.n	800ce94 <scalbn+0x94>
 800ce54:	9b01      	ldr	r3, [sp, #4]
 800ce56:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ce5a:	3a36      	subs	r2, #54	; 0x36
 800ce5c:	4402      	add	r2, r0
 800ce5e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ce62:	428a      	cmp	r2, r1
 800ce64:	dd0a      	ble.n	800ce7c <scalbn+0x7c>
 800ce66:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800cee8 <scalbn+0xe8>
 800ce6a:	eeb0 0b48 	vmov.f64	d0, d8
 800ce6e:	ed9d 1b00 	vldr	d1, [sp]
 800ce72:	f000 fa0f 	bl	800d294 <copysign>
 800ce76:	ee20 7b08 	vmul.f64	d7, d0, d8
 800ce7a:	e7e8      	b.n	800ce4e <scalbn+0x4e>
 800ce7c:	2a00      	cmp	r2, #0
 800ce7e:	dd10      	ble.n	800cea2 <scalbn+0xa2>
 800ce80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce84:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ce88:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ce8c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ce90:	e9cd 0100 	strd	r0, r1, [sp]
 800ce94:	ed9d 0b00 	vldr	d0, [sp]
 800ce98:	b003      	add	sp, #12
 800ce9a:	ecbd 8b02 	vpop	{d8}
 800ce9e:	f85d fb04 	ldr.w	pc, [sp], #4
 800cea2:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cea6:	da06      	bge.n	800ceb6 <scalbn+0xb6>
 800cea8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ceac:	4298      	cmp	r0, r3
 800ceae:	dcda      	bgt.n	800ce66 <scalbn+0x66>
 800ceb0:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800cee0 <scalbn+0xe0>
 800ceb4:	e7d9      	b.n	800ce6a <scalbn+0x6a>
 800ceb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ceba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cebe:	3236      	adds	r2, #54	; 0x36
 800cec0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cec4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cec8:	ec41 0b17 	vmov	d7, r0, r1
 800cecc:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800cef0 <scalbn+0xf0>
 800ced0:	e7b2      	b.n	800ce38 <scalbn+0x38>
 800ced2:	bf00      	nop
 800ced4:	f3af 8000 	nop.w
 800ced8:	00000000 	.word	0x00000000
 800cedc:	43500000 	.word	0x43500000
 800cee0:	c2f8f359 	.word	0xc2f8f359
 800cee4:	01a56e1f 	.word	0x01a56e1f
 800cee8:	8800759c 	.word	0x8800759c
 800ceec:	7e37e43c 	.word	0x7e37e43c
 800cef0:	00000000 	.word	0x00000000
 800cef4:	3c900000 	.word	0x3c900000
 800cef8:	ffff3cb0 	.word	0xffff3cb0

0800cefc <expm1f>:
 800cefc:	ee10 2a10 	vmov	r2, s0
 800cf00:	4984      	ldr	r1, [pc, #528]	; (800d114 <expm1f+0x218>)
 800cf02:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800cf06:	428b      	cmp	r3, r1
 800cf08:	d923      	bls.n	800cf52 <expm1f+0x56>
 800cf0a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cf0e:	d902      	bls.n	800cf16 <expm1f+0x1a>
 800cf10:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cf14:	4770      	bx	lr
 800cf16:	d105      	bne.n	800cf24 <expm1f+0x28>
 800cf18:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800cf1c:	2a00      	cmp	r2, #0
 800cf1e:	fe20 0a27 	vselge.f32	s0, s0, s15
 800cf22:	4770      	bx	lr
 800cf24:	2a00      	cmp	r2, #0
 800cf26:	db08      	blt.n	800cf3a <expm1f+0x3e>
 800cf28:	4a7b      	ldr	r2, [pc, #492]	; (800d118 <expm1f+0x21c>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	f240 80ea 	bls.w	800d104 <expm1f+0x208>
 800cf30:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 800d11c <expm1f+0x220>
 800cf34:	ee20 0a00 	vmul.f32	s0, s0, s0
 800cf38:	4770      	bx	lr
 800cf3a:	eddf 7a79 	vldr	s15, [pc, #484]	; 800d120 <expm1f+0x224>
 800cf3e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800cf42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cf46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf4a:	d554      	bpl.n	800cff6 <expm1f+0xfa>
 800cf4c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800cf50:	4770      	bx	lr
 800cf52:	4974      	ldr	r1, [pc, #464]	; (800d124 <expm1f+0x228>)
 800cf54:	428b      	cmp	r3, r1
 800cf56:	d96c      	bls.n	800d032 <expm1f+0x136>
 800cf58:	4973      	ldr	r1, [pc, #460]	; (800d128 <expm1f+0x22c>)
 800cf5a:	428b      	cmp	r3, r1
 800cf5c:	d84b      	bhi.n	800cff6 <expm1f+0xfa>
 800cf5e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800d12c <expm1f+0x230>
 800cf62:	2a00      	cmp	r2, #0
 800cf64:	bfa7      	ittee	ge
 800cf66:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800cf6a:	eddf 7a71 	vldrge	s15, [pc, #452]	; 800d130 <expm1f+0x234>
 800cf6e:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 800d134 <expm1f+0x238>
 800cf72:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800cf76:	bfac      	ite	ge
 800cf78:	2301      	movge	r3, #1
 800cf7a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cf7e:	ee37 0a67 	vsub.f32	s0, s14, s15
 800cf82:	ee37 7a40 	vsub.f32	s14, s14, s0
 800cf86:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf8a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800cf8e:	ee20 5a25 	vmul.f32	s10, s0, s11
 800cf92:	eddf 6a69 	vldr	s13, [pc, #420]	; 800d138 <expm1f+0x23c>
 800cf96:	ed9f 6a69 	vldr	s12, [pc, #420]	; 800d13c <expm1f+0x240>
 800cf9a:	ee20 7a05 	vmul.f32	s14, s0, s10
 800cf9e:	eea7 6a26 	vfma.f32	s12, s14, s13
 800cfa2:	eddf 6a67 	vldr	s13, [pc, #412]	; 800d140 <expm1f+0x244>
 800cfa6:	eee6 6a07 	vfma.f32	s13, s12, s14
 800cfaa:	ed9f 6a66 	vldr	s12, [pc, #408]	; 800d144 <expm1f+0x248>
 800cfae:	eea6 6a87 	vfma.f32	s12, s13, s14
 800cfb2:	eddf 6a65 	vldr	s13, [pc, #404]	; 800d148 <expm1f+0x24c>
 800cfb6:	eee6 6a07 	vfma.f32	s13, s12, s14
 800cfba:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800cfbe:	eef0 4a46 	vmov.f32	s9, s12
 800cfc2:	eee6 4a87 	vfma.f32	s9, s13, s14
 800cfc6:	eef0 6a64 	vmov.f32	s13, s9
 800cfca:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800cfce:	eee5 4a66 	vfms.f32	s9, s10, s13
 800cfd2:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800cfd6:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800cfda:	eee0 6a64 	vfms.f32	s13, s0, s9
 800cfde:	eef0 4a66 	vmov.f32	s9, s13
 800cfe2:	eec5 6a24 	vdiv.f32	s13, s10, s9
 800cfe6:	ee66 6a87 	vmul.f32	s13, s13, s14
 800cfea:	bb83      	cbnz	r3, 800d04e <expm1f+0x152>
 800cfec:	eef0 7a47 	vmov.f32	s15, s14
 800cff0:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800cff4:	e026      	b.n	800d044 <expm1f+0x148>
 800cff6:	eddf 7a55 	vldr	s15, [pc, #340]	; 800d14c <expm1f+0x250>
 800cffa:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800cffe:	ee20 7a27 	vmul.f32	s14, s0, s15
 800d002:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800d006:	2a00      	cmp	r2, #0
 800d008:	fe66 7aa7 	vselge.f32	s15, s13, s15
 800d00c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d010:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800d12c <expm1f+0x230>
 800d014:	eddf 6a46 	vldr	s13, [pc, #280]	; 800d130 <expm1f+0x234>
 800d018:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d01c:	ee17 3a90 	vmov	r3, s15
 800d020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d024:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d028:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d02c:	eeb0 7a40 	vmov.f32	s14, s0
 800d030:	e7a5      	b.n	800cf7e <expm1f+0x82>
 800d032:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800d036:	d208      	bcs.n	800d04a <expm1f+0x14e>
 800d038:	eddf 7a38 	vldr	s15, [pc, #224]	; 800d11c <expm1f+0x220>
 800d03c:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d040:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800d044:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d048:	4770      	bx	lr
 800d04a:	2300      	movs	r3, #0
 800d04c:	e79d      	b.n	800cf8a <expm1f+0x8e>
 800d04e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d052:	1c5a      	adds	r2, r3, #1
 800d054:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800d058:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d05c:	d106      	bne.n	800d06c <expm1f+0x170>
 800d05e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800d062:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800d066:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800d06a:	4770      	bx	lr
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	d118      	bne.n	800d0a2 <expm1f+0x1a6>
 800d070:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800d074:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d07c:	bf41      	itttt	mi
 800d07e:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800d082:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 800d086:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 800d08a:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 800d08e:	bf5f      	itttt	pl
 800d090:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 800d094:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 800d098:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 800d09c:	eeb0 0a46 	vmovpl.f32	s0, s12
 800d0a0:	4770      	bx	lr
 800d0a2:	1c5a      	adds	r2, r3, #1
 800d0a4:	2a39      	cmp	r2, #57	; 0x39
 800d0a6:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800d0aa:	d90b      	bls.n	800d0c4 <expm1f+0x1c8>
 800d0ac:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d0b0:	ee36 0a40 	vsub.f32	s0, s12, s0
 800d0b4:	ee10 3a10 	vmov	r3, s0
 800d0b8:	440b      	add	r3, r1
 800d0ba:	ee00 3a10 	vmov	s0, r3
 800d0be:	ee30 0a46 	vsub.f32	s0, s0, s12
 800d0c2:	4770      	bx	lr
 800d0c4:	2b16      	cmp	r3, #22
 800d0c6:	dc11      	bgt.n	800d0ec <expm1f+0x1f0>
 800d0c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d0cc:	fa42 f303 	asr.w	r3, r2, r3
 800d0d0:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800d0d4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d0d8:	ee07 3a90 	vmov	s15, r3
 800d0dc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d0e0:	ee10 3a10 	vmov	r3, s0
 800d0e4:	440b      	add	r3, r1
 800d0e6:	ee00 3a10 	vmov	s0, r3
 800d0ea:	4770      	bx	lr
 800d0ec:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800d0f0:	05db      	lsls	r3, r3, #23
 800d0f2:	ee07 3a10 	vmov	s14, r3
 800d0f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d0fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d0fe:	ee30 0a06 	vadd.f32	s0, s0, s12
 800d102:	e7ed      	b.n	800d0e0 <expm1f+0x1e4>
 800d104:	eddf 7a11 	vldr	s15, [pc, #68]	; 800d14c <expm1f+0x250>
 800d108:	ee20 7a27 	vmul.f32	s14, s0, s15
 800d10c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d110:	e77c      	b.n	800d00c <expm1f+0x110>
 800d112:	bf00      	nop
 800d114:	4195b843 	.word	0x4195b843
 800d118:	42b17217 	.word	0x42b17217
 800d11c:	7149f2ca 	.word	0x7149f2ca
 800d120:	0da24260 	.word	0x0da24260
 800d124:	3eb17218 	.word	0x3eb17218
 800d128:	3f851591 	.word	0x3f851591
 800d12c:	3f317180 	.word	0x3f317180
 800d130:	3717f7d1 	.word	0x3717f7d1
 800d134:	b717f7d1 	.word	0xb717f7d1
 800d138:	b457edbb 	.word	0xb457edbb
 800d13c:	36867e54 	.word	0x36867e54
 800d140:	b8a670cd 	.word	0xb8a670cd
 800d144:	3ad00d01 	.word	0x3ad00d01
 800d148:	bd088889 	.word	0xbd088889
 800d14c:	3fb8aa3b 	.word	0x3fb8aa3b

0800d150 <floorf>:
 800d150:	ee10 3a10 	vmov	r3, s0
 800d154:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d158:	0dca      	lsrs	r2, r1, #23
 800d15a:	3a7f      	subs	r2, #127	; 0x7f
 800d15c:	2a16      	cmp	r2, #22
 800d15e:	dc2a      	bgt.n	800d1b6 <floorf+0x66>
 800d160:	2a00      	cmp	r2, #0
 800d162:	da11      	bge.n	800d188 <floorf+0x38>
 800d164:	eddf 7a18 	vldr	s15, [pc, #96]	; 800d1c8 <floorf+0x78>
 800d168:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d16c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d174:	dd05      	ble.n	800d182 <floorf+0x32>
 800d176:	2b00      	cmp	r3, #0
 800d178:	da23      	bge.n	800d1c2 <floorf+0x72>
 800d17a:	4a14      	ldr	r2, [pc, #80]	; (800d1cc <floorf+0x7c>)
 800d17c:	2900      	cmp	r1, #0
 800d17e:	bf18      	it	ne
 800d180:	4613      	movne	r3, r2
 800d182:	ee00 3a10 	vmov	s0, r3
 800d186:	4770      	bx	lr
 800d188:	4911      	ldr	r1, [pc, #68]	; (800d1d0 <floorf+0x80>)
 800d18a:	4111      	asrs	r1, r2
 800d18c:	420b      	tst	r3, r1
 800d18e:	d0fa      	beq.n	800d186 <floorf+0x36>
 800d190:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800d1c8 <floorf+0x78>
 800d194:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d198:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d19c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1a0:	ddef      	ble.n	800d182 <floorf+0x32>
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	bfbe      	ittt	lt
 800d1a6:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800d1aa:	fa40 f202 	asrlt.w	r2, r0, r2
 800d1ae:	189b      	addlt	r3, r3, r2
 800d1b0:	ea23 0301 	bic.w	r3, r3, r1
 800d1b4:	e7e5      	b.n	800d182 <floorf+0x32>
 800d1b6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d1ba:	d3e4      	bcc.n	800d186 <floorf+0x36>
 800d1bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d1c0:	4770      	bx	lr
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	e7dd      	b.n	800d182 <floorf+0x32>
 800d1c6:	bf00      	nop
 800d1c8:	7149f2ca 	.word	0x7149f2ca
 800d1cc:	bf800000 	.word	0xbf800000
 800d1d0:	007fffff 	.word	0x007fffff

0800d1d4 <scalbnf>:
 800d1d4:	b508      	push	{r3, lr}
 800d1d6:	ee10 2a10 	vmov	r2, s0
 800d1da:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800d1de:	ed2d 8b02 	vpush	{d8}
 800d1e2:	eef0 0a40 	vmov.f32	s1, s0
 800d1e6:	d004      	beq.n	800d1f2 <scalbnf+0x1e>
 800d1e8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d1ec:	d306      	bcc.n	800d1fc <scalbnf+0x28>
 800d1ee:	ee70 0a00 	vadd.f32	s1, s0, s0
 800d1f2:	ecbd 8b02 	vpop	{d8}
 800d1f6:	eeb0 0a60 	vmov.f32	s0, s1
 800d1fa:	bd08      	pop	{r3, pc}
 800d1fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d200:	d21c      	bcs.n	800d23c <scalbnf+0x68>
 800d202:	4b1f      	ldr	r3, [pc, #124]	; (800d280 <scalbnf+0xac>)
 800d204:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d284 <scalbnf+0xb0>
 800d208:	4298      	cmp	r0, r3
 800d20a:	ee60 0a27 	vmul.f32	s1, s0, s15
 800d20e:	db10      	blt.n	800d232 <scalbnf+0x5e>
 800d210:	ee10 2a90 	vmov	r2, s1
 800d214:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800d218:	3b19      	subs	r3, #25
 800d21a:	4403      	add	r3, r0
 800d21c:	2bfe      	cmp	r3, #254	; 0xfe
 800d21e:	dd0f      	ble.n	800d240 <scalbnf+0x6c>
 800d220:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800d288 <scalbnf+0xb4>
 800d224:	eeb0 0a48 	vmov.f32	s0, s16
 800d228:	f000 f843 	bl	800d2b2 <copysignf>
 800d22c:	ee60 0a08 	vmul.f32	s1, s0, s16
 800d230:	e7df      	b.n	800d1f2 <scalbnf+0x1e>
 800d232:	eddf 7a16 	vldr	s15, [pc, #88]	; 800d28c <scalbnf+0xb8>
 800d236:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800d23a:	e7da      	b.n	800d1f2 <scalbnf+0x1e>
 800d23c:	0ddb      	lsrs	r3, r3, #23
 800d23e:	e7ec      	b.n	800d21a <scalbnf+0x46>
 800d240:	2b00      	cmp	r3, #0
 800d242:	dd06      	ble.n	800d252 <scalbnf+0x7e>
 800d244:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800d248:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800d24c:	ee00 3a90 	vmov	s1, r3
 800d250:	e7cf      	b.n	800d1f2 <scalbnf+0x1e>
 800d252:	f113 0f16 	cmn.w	r3, #22
 800d256:	da06      	bge.n	800d266 <scalbnf+0x92>
 800d258:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d25c:	4298      	cmp	r0, r3
 800d25e:	dcdf      	bgt.n	800d220 <scalbnf+0x4c>
 800d260:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800d28c <scalbnf+0xb8>
 800d264:	e7de      	b.n	800d224 <scalbnf+0x50>
 800d266:	3319      	adds	r3, #25
 800d268:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800d26c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800d270:	eddf 7a07 	vldr	s15, [pc, #28]	; 800d290 <scalbnf+0xbc>
 800d274:	ee07 3a10 	vmov	s14, r3
 800d278:	ee67 0a27 	vmul.f32	s1, s14, s15
 800d27c:	e7b9      	b.n	800d1f2 <scalbnf+0x1e>
 800d27e:	bf00      	nop
 800d280:	ffff3cb0 	.word	0xffff3cb0
 800d284:	4c000000 	.word	0x4c000000
 800d288:	7149f2ca 	.word	0x7149f2ca
 800d28c:	0da24260 	.word	0x0da24260
 800d290:	33000000 	.word	0x33000000

0800d294 <copysign>:
 800d294:	ec51 0b10 	vmov	r0, r1, d0
 800d298:	ee11 0a90 	vmov	r0, s3
 800d29c:	ee10 2a10 	vmov	r2, s0
 800d2a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d2a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800d2a8:	ea41 0300 	orr.w	r3, r1, r0
 800d2ac:	ec43 2b10 	vmov	d0, r2, r3
 800d2b0:	4770      	bx	lr

0800d2b2 <copysignf>:
 800d2b2:	ee10 3a10 	vmov	r3, s0
 800d2b6:	ee10 2a90 	vmov	r2, s1
 800d2ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d2be:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800d2c2:	4313      	orrs	r3, r2
 800d2c4:	ee00 3a10 	vmov	s0, r3
 800d2c8:	4770      	bx	lr
	...

0800d2cc <_init>:
 800d2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ce:	bf00      	nop
 800d2d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2d2:	bc08      	pop	{r3}
 800d2d4:	469e      	mov	lr, r3
 800d2d6:	4770      	bx	lr

0800d2d8 <_fini>:
 800d2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2da:	bf00      	nop
 800d2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2de:	bc08      	pop	{r3}
 800d2e0:	469e      	mov	lr, r3
 800d2e2:	4770      	bx	lr
