
cube_for_new_genera_brain4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ba8  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0010bea4  08008e40  08008e40  00018e40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08114ce4  08114ce4  00124ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08114ce8  08114ce8  00124ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002f0  20000000  08114cec  00130000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000019dc  200002f0  08114fdc  001302f0  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20001ccc  08114fdc  00131ccc  2**0
                  ALLOC
  8 .RAM_D1       0007a120  24000000  24000000  00140000  2**5
                  ALLOC
  9 .RAM_D2       0000084c  30000000  30000000  00140000  2**5
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  001302f0  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003bc6c  00000000  00000000  0013031e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005ae6  00000000  00000000  0016bf8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00013d21  00000000  00000000  00171a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b28  00000000  00000000  00185798  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c28  00000000  00000000  001872c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003b3d4  00000000  00000000  00188ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ab2d  00000000  00000000  001c42bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00162af4  00000000  00000000  001dede9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  003418dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051a8  00000000  00000000  00341958  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	200002f0 	.word	0x200002f0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008e28 	.word	0x08008e28

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	200002f4 	.word	0x200002f4
 80002d4:	08008e28 	.word	0x08008e28

080002d8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80002d8:	4b10      	ldr	r3, [pc, #64]	; (800031c <HAL_InitTick+0x44>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	b90b      	cbnz	r3, 80002e2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80002de:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80002e0:	4770      	bx	lr
{
 80002e2:	b510      	push	{r4, lr}
 80002e4:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80002e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80002ee:	4a0c      	ldr	r2, [pc, #48]	; (8000320 <HAL_InitTick+0x48>)
 80002f0:	6810      	ldr	r0, [r2, #0]
 80002f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80002f6:	f000 f8c1 	bl	800047c <HAL_SYSTICK_Config>
 80002fa:	b968      	cbnz	r0, 8000318 <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002fc:	2c0f      	cmp	r4, #15
 80002fe:	d901      	bls.n	8000304 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000300:	2001      	movs	r0, #1
 8000302:	e00a      	b.n	800031a <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000304:	2200      	movs	r2, #0
 8000306:	4621      	mov	r1, r4
 8000308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800030c:	f000 f876 	bl	80003fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000310:	4b02      	ldr	r3, [pc, #8]	; (800031c <HAL_InitTick+0x44>)
 8000312:	605c      	str	r4, [r3, #4]
  return HAL_OK;
 8000314:	2000      	movs	r0, #0
 8000316:	e000      	b.n	800031a <HAL_InitTick+0x42>
    return HAL_ERROR;
 8000318:	2001      	movs	r0, #1
}
 800031a:	bd10      	pop	{r4, pc}
 800031c:	20000000 	.word	0x20000000
 8000320:	20000280 	.word	0x20000280

08000324 <HAL_Init>:
{
 8000324:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000326:	2003      	movs	r0, #3
 8000328:	f000 f856 	bl	80003d8 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800032c:	f002 f998 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 8000330:	490f      	ldr	r1, [pc, #60]	; (8000370 <HAL_Init+0x4c>)
 8000332:	698b      	ldr	r3, [r1, #24]
 8000334:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000338:	4a0e      	ldr	r2, [pc, #56]	; (8000374 <HAL_Init+0x50>)
 800033a:	5cd3      	ldrb	r3, [r2, r3]
 800033c:	f003 031f 	and.w	r3, r3, #31
 8000340:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000342:	698b      	ldr	r3, [r1, #24]
 8000344:	f003 030f 	and.w	r3, r3, #15
 8000348:	5cd3      	ldrb	r3, [r2, r3]
 800034a:	f003 031f 	and.w	r3, r3, #31
 800034e:	fa20 f303 	lsr.w	r3, r0, r3
 8000352:	4a09      	ldr	r2, [pc, #36]	; (8000378 <HAL_Init+0x54>)
 8000354:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8000356:	4b09      	ldr	r3, [pc, #36]	; (800037c <HAL_Init+0x58>)
 8000358:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800035a:	2000      	movs	r0, #0
 800035c:	f7ff ffbc 	bl	80002d8 <HAL_InitTick>
 8000360:	b110      	cbz	r0, 8000368 <HAL_Init+0x44>
    return HAL_ERROR;
 8000362:	2401      	movs	r4, #1
}
 8000364:	4620      	mov	r0, r4
 8000366:	bd10      	pop	{r4, pc}
 8000368:	4604      	mov	r4, r0
  HAL_MspInit();
 800036a:	f006 f90b 	bl	8006584 <HAL_MspInit>
  return HAL_OK;
 800036e:	e7f9      	b.n	8000364 <HAL_Init+0x40>
 8000370:	58024400 	.word	0x58024400
 8000374:	08008e48 	.word	0x08008e48
 8000378:	20000284 	.word	0x20000284
 800037c:	20000280 	.word	0x20000280

08000380 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000380:	4b03      	ldr	r3, [pc, #12]	; (8000390 <HAL_IncTick+0x10>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	4a03      	ldr	r2, [pc, #12]	; (8000394 <HAL_IncTick+0x14>)
 8000386:	6811      	ldr	r1, [r2, #0]
 8000388:	440b      	add	r3, r1
 800038a:	6013      	str	r3, [r2, #0]
}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	20000000 	.word	0x20000000
 8000394:	200003bc 	.word	0x200003bc

08000398 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000398:	4b01      	ldr	r3, [pc, #4]	; (80003a0 <HAL_GetTick+0x8>)
 800039a:	6818      	ldr	r0, [r3, #0]
}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	200003bc 	.word	0x200003bc

080003a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003a4:	b538      	push	{r3, r4, r5, lr}
 80003a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80003a8:	f7ff fff6 	bl	8000398 <HAL_GetTick>
 80003ac:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003ae:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80003b2:	d002      	beq.n	80003ba <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80003b4:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <HAL_Delay+0x24>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80003ba:	f7ff ffed 	bl	8000398 <HAL_GetTick>
 80003be:	1b40      	subs	r0, r0, r5
 80003c0:	42a0      	cmp	r0, r4
 80003c2:	d3fa      	bcc.n	80003ba <HAL_Delay+0x16>
  {
  }
}
 80003c4:	bd38      	pop	{r3, r4, r5, pc}
 80003c6:	bf00      	nop
 80003c8:	20000000 	.word	0x20000000

080003cc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80003cc:	4b01      	ldr	r3, [pc, #4]	; (80003d4 <HAL_GetREVID+0x8>)
 80003ce:	6818      	ldr	r0, [r3, #0]
}
 80003d0:	0c00      	lsrs	r0, r0, #16
 80003d2:	4770      	bx	lr
 80003d4:	5c001000 	.word	0x5c001000

080003d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003d8:	4906      	ldr	r1, [pc, #24]	; (80003f4 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80003da:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80003e0:	041b      	lsls	r3, r3, #16
 80003e2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80003e4:	0200      	lsls	r0, r0, #8
 80003e6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003ea:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80003ec:	4a02      	ldr	r2, [pc, #8]	; (80003f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80003ee:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80003f0:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80003f2:	4770      	bx	lr
 80003f4:	e000ed00 	.word	0xe000ed00
 80003f8:	05fa0000 	.word	0x05fa0000

080003fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003fc:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003fe:	4b15      	ldr	r3, [pc, #84]	; (8000454 <HAL_NVIC_SetPriority+0x58>)
 8000400:	68db      	ldr	r3, [r3, #12]
 8000402:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000406:	f1c3 0407 	rsb	r4, r3, #7
 800040a:	2c04      	cmp	r4, #4
 800040c:	bf28      	it	cs
 800040e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000410:	1d1d      	adds	r5, r3, #4
 8000412:	2d06      	cmp	r5, #6
 8000414:	d914      	bls.n	8000440 <HAL_NVIC_SetPriority+0x44>
 8000416:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000418:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800041c:	fa05 f404 	lsl.w	r4, r5, r4
 8000420:	ea21 0104 	bic.w	r1, r1, r4
 8000424:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000426:	fa05 f303 	lsl.w	r3, r5, r3
 800042a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800042e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000430:	2800      	cmp	r0, #0
 8000432:	db07      	blt.n	8000444 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000434:	0109      	lsls	r1, r1, #4
 8000436:	b2c9      	uxtb	r1, r1
 8000438:	4b07      	ldr	r3, [pc, #28]	; (8000458 <HAL_NVIC_SetPriority+0x5c>)
 800043a:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800043c:	bc30      	pop	{r4, r5}
 800043e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000440:	2300      	movs	r3, #0
 8000442:	e7e9      	b.n	8000418 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000444:	f000 000f 	and.w	r0, r0, #15
 8000448:	0109      	lsls	r1, r1, #4
 800044a:	b2c9      	uxtb	r1, r1
 800044c:	4b03      	ldr	r3, [pc, #12]	; (800045c <HAL_NVIC_SetPriority+0x60>)
 800044e:	5419      	strb	r1, [r3, r0]
 8000450:	e7f4      	b.n	800043c <HAL_NVIC_SetPriority+0x40>
 8000452:	bf00      	nop
 8000454:	e000ed00 	.word	0xe000ed00
 8000458:	e000e400 	.word	0xe000e400
 800045c:	e000ed14 	.word	0xe000ed14

08000460 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000460:	2800      	cmp	r0, #0
 8000462:	db07      	blt.n	8000474 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000464:	f000 021f 	and.w	r2, r0, #31
 8000468:	0940      	lsrs	r0, r0, #5
 800046a:	2301      	movs	r3, #1
 800046c:	4093      	lsls	r3, r2
 800046e:	4a02      	ldr	r2, [pc, #8]	; (8000478 <HAL_NVIC_EnableIRQ+0x18>)
 8000470:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	e000e100 	.word	0xe000e100

0800047c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800047c:	3801      	subs	r0, #1
 800047e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000482:	d20a      	bcs.n	800049a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <HAL_SYSTICK_Config+0x24>)
 8000486:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000488:	4a06      	ldr	r2, [pc, #24]	; (80004a4 <HAL_SYSTICK_Config+0x28>)
 800048a:	21f0      	movs	r1, #240	; 0xf0
 800048c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000490:	2000      	movs	r0, #0
 8000492:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000494:	2207      	movs	r2, #7
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800049a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	e000e010 	.word	0xe000e010
 80004a4:	e000ed00 	.word	0xe000ed00

080004a8 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80004a8:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80004ac:	4a04      	ldr	r2, [pc, #16]	; (80004c0 <HAL_MPU_Disable+0x18>)
 80004ae:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80004b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004b4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80004b6:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <HAL_MPU_Disable+0x1c>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	605a      	str	r2, [r3, #4]
}
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	e000ed00 	.word	0xe000ed00
 80004c4:	e000ed90 	.word	0xe000ed90

080004c8 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80004c8:	f040 0001 	orr.w	r0, r0, #1
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <HAL_MPU_Enable+0x1c>)
 80004ce:	6058      	str	r0, [r3, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80004d0:	4a05      	ldr	r2, [pc, #20]	; (80004e8 <HAL_MPU_Enable+0x20>)
 80004d2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80004d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004d8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80004da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80004de:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80004e2:	4770      	bx	lr
 80004e4:	e000ed90 	.word	0xe000ed90
 80004e8:	e000ed00 	.word	0xe000ed00

080004ec <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80004ec:	7842      	ldrb	r2, [r0, #1]
 80004ee:	4b13      	ldr	r3, [pc, #76]	; (800053c <HAL_MPU_ConfigRegion+0x50>)
 80004f0:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80004f2:	7803      	ldrb	r3, [r0, #0]
 80004f4:	b923      	cbnz	r3, 8000500 <HAL_MPU_ConfigRegion+0x14>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 80004f6:	4b11      	ldr	r3, [pc, #68]	; (800053c <HAL_MPU_ConfigRegion+0x50>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80004fc:	611a      	str	r2, [r3, #16]
  }
}
 80004fe:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 8000500:	6843      	ldr	r3, [r0, #4]
 8000502:	4a0e      	ldr	r2, [pc, #56]	; (800053c <HAL_MPU_ConfigRegion+0x50>)
 8000504:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000506:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000508:	7ac3      	ldrb	r3, [r0, #11]
 800050a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800050c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000510:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000512:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000516:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000518:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800051c:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800051e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000522:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000524:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000528:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800052a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800052e:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000530:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000534:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000536:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000538:	6113      	str	r3, [r2, #16]
 800053a:	4770      	bx	lr
 800053c:	e000ed90 	.word	0xe000ed90

08000540 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000540:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000542:	6d87      	ldr	r7, [r0, #88]	; 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000544:	6804      	ldr	r4, [r0, #0]
 8000546:	4e65      	ldr	r6, [pc, #404]	; (80006dc <DMA_SetConfig+0x19c>)
 8000548:	4d65      	ldr	r5, [pc, #404]	; (80006e0 <DMA_SetConfig+0x1a0>)
 800054a:	42ac      	cmp	r4, r5
 800054c:	bf18      	it	ne
 800054e:	42b4      	cmpne	r4, r6
 8000550:	d042      	beq.n	80005d8 <DMA_SetConfig+0x98>
 8000552:	3518      	adds	r5, #24
 8000554:	42ac      	cmp	r4, r5
 8000556:	d03f      	beq.n	80005d8 <DMA_SetConfig+0x98>
 8000558:	3518      	adds	r5, #24
 800055a:	42ac      	cmp	r4, r5
 800055c:	d03c      	beq.n	80005d8 <DMA_SetConfig+0x98>
 800055e:	3518      	adds	r5, #24
 8000560:	42ac      	cmp	r4, r5
 8000562:	d039      	beq.n	80005d8 <DMA_SetConfig+0x98>
 8000564:	3518      	adds	r5, #24
 8000566:	42ac      	cmp	r4, r5
 8000568:	d036      	beq.n	80005d8 <DMA_SetConfig+0x98>
 800056a:	3518      	adds	r5, #24
 800056c:	42ac      	cmp	r4, r5
 800056e:	d033      	beq.n	80005d8 <DMA_SetConfig+0x98>
 8000570:	3518      	adds	r5, #24
 8000572:	42ac      	cmp	r4, r5
 8000574:	d030      	beq.n	80005d8 <DMA_SetConfig+0x98>
 8000576:	f505 7556 	add.w	r5, r5, #856	; 0x358
 800057a:	42ac      	cmp	r4, r5
 800057c:	d02c      	beq.n	80005d8 <DMA_SetConfig+0x98>
 800057e:	3518      	adds	r5, #24
 8000580:	42ac      	cmp	r4, r5
 8000582:	d029      	beq.n	80005d8 <DMA_SetConfig+0x98>
 8000584:	3518      	adds	r5, #24
 8000586:	42ac      	cmp	r4, r5
 8000588:	d026      	beq.n	80005d8 <DMA_SetConfig+0x98>
 800058a:	3518      	adds	r5, #24
 800058c:	42ac      	cmp	r4, r5
 800058e:	d023      	beq.n	80005d8 <DMA_SetConfig+0x98>
 8000590:	3518      	adds	r5, #24
 8000592:	42ac      	cmp	r4, r5
 8000594:	d020      	beq.n	80005d8 <DMA_SetConfig+0x98>
 8000596:	3518      	adds	r5, #24
 8000598:	42ac      	cmp	r4, r5
 800059a:	d01d      	beq.n	80005d8 <DMA_SetConfig+0x98>
 800059c:	3518      	adds	r5, #24
 800059e:	42ac      	cmp	r4, r5
 80005a0:	d01a      	beq.n	80005d8 <DMA_SetConfig+0x98>
 80005a2:	3518      	adds	r5, #24
 80005a4:	42ac      	cmp	r4, r5
 80005a6:	d017      	beq.n	80005d8 <DMA_SetConfig+0x98>
 80005a8:	4d4e      	ldr	r5, [pc, #312]	; (80006e4 <DMA_SetConfig+0x1a4>)
 80005aa:	42ac      	cmp	r4, r5
 80005ac:	d014      	beq.n	80005d8 <DMA_SetConfig+0x98>
 80005ae:	3514      	adds	r5, #20
 80005b0:	42ac      	cmp	r4, r5
 80005b2:	d011      	beq.n	80005d8 <DMA_SetConfig+0x98>
 80005b4:	3514      	adds	r5, #20
 80005b6:	42ac      	cmp	r4, r5
 80005b8:	d00e      	beq.n	80005d8 <DMA_SetConfig+0x98>
 80005ba:	3514      	adds	r5, #20
 80005bc:	42ac      	cmp	r4, r5
 80005be:	d00b      	beq.n	80005d8 <DMA_SetConfig+0x98>
 80005c0:	3514      	adds	r5, #20
 80005c2:	42ac      	cmp	r4, r5
 80005c4:	d008      	beq.n	80005d8 <DMA_SetConfig+0x98>
 80005c6:	3514      	adds	r5, #20
 80005c8:	42ac      	cmp	r4, r5
 80005ca:	d005      	beq.n	80005d8 <DMA_SetConfig+0x98>
 80005cc:	3514      	adds	r5, #20
 80005ce:	42ac      	cmp	r4, r5
 80005d0:	d002      	beq.n	80005d8 <DMA_SetConfig+0x98>
 80005d2:	3514      	adds	r5, #20
 80005d4:	42ac      	cmp	r4, r5
 80005d6:	d107      	bne.n	80005e8 <DMA_SetConfig+0xa8>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80005d8:	6e44      	ldr	r4, [r0, #100]	; 0x64
 80005da:	6e85      	ldr	r5, [r0, #104]	; 0x68
 80005dc:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80005de:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 80005e0:	b114      	cbz	r4, 80005e8 <DMA_SetConfig+0xa8>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80005e2:	6f04      	ldr	r4, [r0, #112]	; 0x70
 80005e4:	6f45      	ldr	r5, [r0, #116]	; 0x74
 80005e6:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80005e8:	6804      	ldr	r4, [r0, #0]
 80005ea:	4e3c      	ldr	r6, [pc, #240]	; (80006dc <DMA_SetConfig+0x19c>)
 80005ec:	4d3c      	ldr	r5, [pc, #240]	; (80006e0 <DMA_SetConfig+0x1a0>)
 80005ee:	42ac      	cmp	r4, r5
 80005f0:	bf18      	it	ne
 80005f2:	42b4      	cmpne	r4, r6
 80005f4:	d052      	beq.n	800069c <DMA_SetConfig+0x15c>
 80005f6:	3518      	adds	r5, #24
 80005f8:	42ac      	cmp	r4, r5
 80005fa:	d04f      	beq.n	800069c <DMA_SetConfig+0x15c>
 80005fc:	3518      	adds	r5, #24
 80005fe:	42ac      	cmp	r4, r5
 8000600:	d04c      	beq.n	800069c <DMA_SetConfig+0x15c>
 8000602:	3518      	adds	r5, #24
 8000604:	42ac      	cmp	r4, r5
 8000606:	d049      	beq.n	800069c <DMA_SetConfig+0x15c>
 8000608:	3518      	adds	r5, #24
 800060a:	42ac      	cmp	r4, r5
 800060c:	d046      	beq.n	800069c <DMA_SetConfig+0x15c>
 800060e:	3518      	adds	r5, #24
 8000610:	42ac      	cmp	r4, r5
 8000612:	d043      	beq.n	800069c <DMA_SetConfig+0x15c>
 8000614:	3518      	adds	r5, #24
 8000616:	42ac      	cmp	r4, r5
 8000618:	d040      	beq.n	800069c <DMA_SetConfig+0x15c>
 800061a:	f505 7556 	add.w	r5, r5, #856	; 0x358
 800061e:	42ac      	cmp	r4, r5
 8000620:	d03c      	beq.n	800069c <DMA_SetConfig+0x15c>
 8000622:	3518      	adds	r5, #24
 8000624:	42ac      	cmp	r4, r5
 8000626:	d039      	beq.n	800069c <DMA_SetConfig+0x15c>
 8000628:	3518      	adds	r5, #24
 800062a:	42ac      	cmp	r4, r5
 800062c:	d036      	beq.n	800069c <DMA_SetConfig+0x15c>
 800062e:	3518      	adds	r5, #24
 8000630:	42ac      	cmp	r4, r5
 8000632:	d033      	beq.n	800069c <DMA_SetConfig+0x15c>
 8000634:	3518      	adds	r5, #24
 8000636:	42ac      	cmp	r4, r5
 8000638:	d030      	beq.n	800069c <DMA_SetConfig+0x15c>
 800063a:	3518      	adds	r5, #24
 800063c:	42ac      	cmp	r4, r5
 800063e:	d02d      	beq.n	800069c <DMA_SetConfig+0x15c>
 8000640:	3518      	adds	r5, #24
 8000642:	42ac      	cmp	r4, r5
 8000644:	d02a      	beq.n	800069c <DMA_SetConfig+0x15c>
 8000646:	3518      	adds	r5, #24
 8000648:	42ac      	cmp	r4, r5
 800064a:	d027      	beq.n	800069c <DMA_SetConfig+0x15c>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800064c:	4e25      	ldr	r6, [pc, #148]	; (80006e4 <DMA_SetConfig+0x1a4>)
 800064e:	4d26      	ldr	r5, [pc, #152]	; (80006e8 <DMA_SetConfig+0x1a8>)
 8000650:	42ac      	cmp	r4, r5
 8000652:	bf18      	it	ne
 8000654:	42b4      	cmpne	r4, r6
 8000656:	d011      	beq.n	800067c <DMA_SetConfig+0x13c>
 8000658:	4d24      	ldr	r5, [pc, #144]	; (80006ec <DMA_SetConfig+0x1ac>)
 800065a:	42ac      	cmp	r4, r5
 800065c:	d00e      	beq.n	800067c <DMA_SetConfig+0x13c>
 800065e:	3514      	adds	r5, #20
 8000660:	42ac      	cmp	r4, r5
 8000662:	d00b      	beq.n	800067c <DMA_SetConfig+0x13c>
 8000664:	3514      	adds	r5, #20
 8000666:	42ac      	cmp	r4, r5
 8000668:	d008      	beq.n	800067c <DMA_SetConfig+0x13c>
 800066a:	3514      	adds	r5, #20
 800066c:	42ac      	cmp	r4, r5
 800066e:	d005      	beq.n	800067c <DMA_SetConfig+0x13c>
 8000670:	3514      	adds	r5, #20
 8000672:	42ac      	cmp	r4, r5
 8000674:	d002      	beq.n	800067c <DMA_SetConfig+0x13c>
 8000676:	3514      	adds	r5, #20
 8000678:	42ac      	cmp	r4, r5
 800067a:	d123      	bne.n	80006c4 <DMA_SetConfig+0x184>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800067c:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 800067e:	f004 051f 	and.w	r5, r4, #31
 8000682:	2401      	movs	r4, #1
 8000684:	40ac      	lsls	r4, r5
 8000686:	607c      	str	r4, [r7, #4]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8000688:	6804      	ldr	r4, [r0, #0]
 800068a:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800068c:	6883      	ldr	r3, [r0, #8]
 800068e:	2b40      	cmp	r3, #64	; 0x40
 8000690:	d01f      	beq.n	80006d2 <DMA_SetConfig+0x192>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8000692:	6803      	ldr	r3, [r0, #0]
 8000694:	6099      	str	r1, [r3, #8]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8000696:	6803      	ldr	r3, [r0, #0]
 8000698:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800069a:	e013      	b.n	80006c4 <DMA_SetConfig+0x184>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800069c:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 800069e:	f004 051f 	and.w	r5, r4, #31
 80006a2:	243f      	movs	r4, #63	; 0x3f
 80006a4:	40ac      	lsls	r4, r5
 80006a6:	60bc      	str	r4, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80006a8:	6805      	ldr	r5, [r0, #0]
 80006aa:	682c      	ldr	r4, [r5, #0]
 80006ac:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80006b0:	602c      	str	r4, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80006b2:	6804      	ldr	r4, [r0, #0]
 80006b4:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80006b6:	6883      	ldr	r3, [r0, #8]
 80006b8:	2b40      	cmp	r3, #64	; 0x40
 80006ba:	d005      	beq.n	80006c8 <DMA_SetConfig+0x188>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80006bc:	6803      	ldr	r3, [r0, #0]
 80006be:	6099      	str	r1, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80006c0:	6803      	ldr	r3, [r0, #0]
 80006c2:	60da      	str	r2, [r3, #12]
}
 80006c4:	bcf0      	pop	{r4, r5, r6, r7}
 80006c6:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80006c8:	6803      	ldr	r3, [r0, #0]
 80006ca:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80006cc:	6803      	ldr	r3, [r0, #0]
 80006ce:	60d9      	str	r1, [r3, #12]
 80006d0:	e7f8      	b.n	80006c4 <DMA_SetConfig+0x184>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80006d2:	6803      	ldr	r3, [r0, #0]
 80006d4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80006d6:	6803      	ldr	r3, [r0, #0]
 80006d8:	60d9      	str	r1, [r3, #12]
 80006da:	e7f3      	b.n	80006c4 <DMA_SetConfig+0x184>
 80006dc:	40020010 	.word	0x40020010
 80006e0:	40020028 	.word	0x40020028
 80006e4:	58025408 	.word	0x58025408
 80006e8:	5802541c 	.word	0x5802541c
 80006ec:	58025430 	.word	0x58025430

080006f0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80006f0:	6802      	ldr	r2, [r0, #0]
 80006f2:	4928      	ldr	r1, [pc, #160]	; (8000794 <DMA_CalcBaseAndBitshift+0xa4>)
 80006f4:	4b28      	ldr	r3, [pc, #160]	; (8000798 <DMA_CalcBaseAndBitshift+0xa8>)
 80006f6:	429a      	cmp	r2, r3
 80006f8:	bf18      	it	ne
 80006fa:	428a      	cmpne	r2, r1
 80006fc:	d02f      	beq.n	800075e <DMA_CalcBaseAndBitshift+0x6e>
 80006fe:	3318      	adds	r3, #24
 8000700:	429a      	cmp	r2, r3
 8000702:	d02c      	beq.n	800075e <DMA_CalcBaseAndBitshift+0x6e>
 8000704:	3318      	adds	r3, #24
 8000706:	429a      	cmp	r2, r3
 8000708:	d029      	beq.n	800075e <DMA_CalcBaseAndBitshift+0x6e>
 800070a:	3318      	adds	r3, #24
 800070c:	429a      	cmp	r2, r3
 800070e:	d026      	beq.n	800075e <DMA_CalcBaseAndBitshift+0x6e>
 8000710:	3318      	adds	r3, #24
 8000712:	429a      	cmp	r2, r3
 8000714:	d023      	beq.n	800075e <DMA_CalcBaseAndBitshift+0x6e>
 8000716:	3318      	adds	r3, #24
 8000718:	429a      	cmp	r2, r3
 800071a:	d020      	beq.n	800075e <DMA_CalcBaseAndBitshift+0x6e>
 800071c:	3318      	adds	r3, #24
 800071e:	429a      	cmp	r2, r3
 8000720:	d01d      	beq.n	800075e <DMA_CalcBaseAndBitshift+0x6e>
 8000722:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8000726:	429a      	cmp	r2, r3
 8000728:	d019      	beq.n	800075e <DMA_CalcBaseAndBitshift+0x6e>
 800072a:	3318      	adds	r3, #24
 800072c:	429a      	cmp	r2, r3
 800072e:	d016      	beq.n	800075e <DMA_CalcBaseAndBitshift+0x6e>
 8000730:	3318      	adds	r3, #24
 8000732:	429a      	cmp	r2, r3
 8000734:	d013      	beq.n	800075e <DMA_CalcBaseAndBitshift+0x6e>
 8000736:	3318      	adds	r3, #24
 8000738:	429a      	cmp	r2, r3
 800073a:	d010      	beq.n	800075e <DMA_CalcBaseAndBitshift+0x6e>
 800073c:	3318      	adds	r3, #24
 800073e:	429a      	cmp	r2, r3
 8000740:	d00d      	beq.n	800075e <DMA_CalcBaseAndBitshift+0x6e>
 8000742:	3318      	adds	r3, #24
 8000744:	429a      	cmp	r2, r3
 8000746:	d00a      	beq.n	800075e <DMA_CalcBaseAndBitshift+0x6e>
 8000748:	3318      	adds	r3, #24
 800074a:	429a      	cmp	r2, r3
 800074c:	d007      	beq.n	800075e <DMA_CalcBaseAndBitshift+0x6e>
 800074e:	3318      	adds	r3, #24
 8000750:	429a      	cmp	r2, r3
 8000752:	d004      	beq.n	800075e <DMA_CalcBaseAndBitshift+0x6e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8000754:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000758:	6582      	str	r2, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 800075a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800075c:	4770      	bx	lr
{
 800075e:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8000760:	b2d3      	uxtb	r3, r2
 8000762:	3b10      	subs	r3, #16
 8000764:	490d      	ldr	r1, [pc, #52]	; (800079c <DMA_CalcBaseAndBitshift+0xac>)
 8000766:	fba1 1303 	umull	r1, r3, r1, r3
 800076a:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800076c:	f003 0107 	and.w	r1, r3, #7
 8000770:	4c0b      	ldr	r4, [pc, #44]	; (80007a0 <DMA_CalcBaseAndBitshift+0xb0>)
 8000772:	5c61      	ldrb	r1, [r4, r1]
 8000774:	65c1      	str	r1, [r0, #92]	; 0x5c
    if (stream_number > 3U)
 8000776:	2b03      	cmp	r3, #3
 8000778:	d806      	bhi.n	8000788 <DMA_CalcBaseAndBitshift+0x98>
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <DMA_CalcBaseAndBitshift+0xb4>)
 800077c:	4013      	ands	r3, r2
 800077e:	6583      	str	r3, [r0, #88]	; 0x58
}
 8000780:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000782:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000786:	4770      	bx	lr
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <DMA_CalcBaseAndBitshift+0xb4>)
 800078a:	4013      	ands	r3, r2
 800078c:	3304      	adds	r3, #4
 800078e:	6583      	str	r3, [r0, #88]	; 0x58
 8000790:	e7f6      	b.n	8000780 <DMA_CalcBaseAndBitshift+0x90>
 8000792:	bf00      	nop
 8000794:	40020010 	.word	0x40020010
 8000798:	40020028 	.word	0x40020028
 800079c:	aaaaaaab 	.word	0xaaaaaaab
 80007a0:	08008e40 	.word	0x08008e40
 80007a4:	fffffc00 	.word	0xfffffc00

080007a8 <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80007a8:	6983      	ldr	r3, [r0, #24]
 80007aa:	b99b      	cbnz	r3, 80007d4 <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 80007ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d00a      	beq.n	80007c8 <DMA_CheckFifoParam+0x20>
 80007b2:	b11b      	cbz	r3, 80007bc <DMA_CheckFifoParam+0x14>
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	d001      	beq.n	80007bc <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 80007b8:	2000      	movs	r0, #0
 80007ba:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80007bc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80007be:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80007c2:	d12e      	bne.n	8000822 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80007c4:	2000      	movs	r0, #0
 80007c6:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80007c8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80007ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80007ce:	d02a      	beq.n	8000826 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 80007d0:	2000      	movs	r0, #0
 80007d2:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80007d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007d8:	d006      	beq.n	80007e8 <DMA_CheckFifoParam+0x40>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80007da:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80007dc:	2b02      	cmp	r3, #2
 80007de:	d92a      	bls.n	8000836 <DMA_CheckFifoParam+0x8e>
 80007e0:	2b03      	cmp	r3, #3
 80007e2:	d016      	beq.n	8000812 <DMA_CheckFifoParam+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
 80007e4:	2000      	movs	r0, #0
 80007e6:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 80007e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80007ea:	2b03      	cmp	r3, #3
 80007ec:	d803      	bhi.n	80007f6 <DMA_CheckFifoParam+0x4e>
 80007ee:	e8df f003 	tbb	[pc, r3]
 80007f2:	041c      	.short	0x041c
 80007f4:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 80007f6:	2000      	movs	r0, #0
 80007f8:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80007fa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80007fc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000800:	d115      	bne.n	800082e <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8000802:	2000      	movs	r0, #0
 8000804:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000806:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000808:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800080c:	d011      	beq.n	8000832 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 800080e:	2000      	movs	r0, #0
 8000810:	4770      	bx	lr
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000812:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000814:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000818:	d001      	beq.n	800081e <DMA_CheckFifoParam+0x76>
        {
          status = HAL_ERROR;
 800081a:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 800081c:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 800081e:	2000      	movs	r0, #0
 8000820:	4770      	bx	lr
          status = HAL_ERROR;
 8000822:	2001      	movs	r0, #1
 8000824:	4770      	bx	lr
          status = HAL_ERROR;
 8000826:	2001      	movs	r0, #1
 8000828:	4770      	bx	lr
        status = HAL_ERROR;
 800082a:	2001      	movs	r0, #1
 800082c:	4770      	bx	lr
          status = HAL_ERROR;
 800082e:	2001      	movs	r0, #1
 8000830:	4770      	bx	lr
          status = HAL_ERROR;
 8000832:	2001      	movs	r0, #1
 8000834:	4770      	bx	lr
        status = HAL_ERROR;
 8000836:	2001      	movs	r0, #1
 8000838:	4770      	bx	lr
	...

0800083c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800083c:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800083e:	4922      	ldr	r1, [pc, #136]	; (80008c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8000840:	4a22      	ldr	r2, [pc, #136]	; (80008cc <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8000842:	4293      	cmp	r3, r2
 8000844:	bf18      	it	ne
 8000846:	428b      	cmpne	r3, r1
 8000848:	d028      	beq.n	800089c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 800084a:	3214      	adds	r2, #20
 800084c:	4293      	cmp	r3, r2
 800084e:	d025      	beq.n	800089c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8000850:	3214      	adds	r2, #20
 8000852:	4293      	cmp	r3, r2
 8000854:	d022      	beq.n	800089c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8000856:	3214      	adds	r2, #20
 8000858:	4293      	cmp	r3, r2
 800085a:	d01f      	beq.n	800089c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 800085c:	3214      	adds	r2, #20
 800085e:	4293      	cmp	r3, r2
 8000860:	d01c      	beq.n	800089c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8000862:	3214      	adds	r2, #20
 8000864:	4293      	cmp	r3, r2
 8000866:	d019      	beq.n	800089c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8000868:	3214      	adds	r2, #20
 800086a:	4293      	cmp	r3, r2
 800086c:	d016      	beq.n	800089c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800086e:	b2da      	uxtb	r2, r3
 8000870:	3a10      	subs	r2, #16
 8000872:	4917      	ldr	r1, [pc, #92]	; (80008d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
 8000874:	fba1 1202 	umull	r1, r2, r1, r2
 8000878:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800087a:	4916      	ldr	r1, [pc, #88]	; (80008d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
 800087c:	4419      	add	r1, r3
 800087e:	29a8      	cmp	r1, #168	; 0xa8
 8000880:	d91f      	bls.n	80008c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x86>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
 8000884:	4413      	add	r3, r2
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	6603      	str	r3, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 800088c:	6643      	str	r3, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800088e:	f002 021f 	and.w	r2, r2, #31
 8000892:	2301      	movs	r3, #1
 8000894:	fa03 f202 	lsl.w	r2, r3, r2
 8000898:	6682      	str	r2, [r0, #104]	; 0x68
  }
}
 800089a:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800089c:	b2db      	uxtb	r3, r3
 800089e:	3b08      	subs	r3, #8
 80008a0:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 80008a2:	fba2 2303 	umull	r2, r3, r2, r3
 80008a6:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80008a8:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 80008aa:	441a      	add	r2, r3
 80008ac:	0092      	lsls	r2, r2, #2
 80008ae:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80008b0:	4a0d      	ldr	r2, [pc, #52]	; (80008e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 80008b2:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80008b4:	f003 031f 	and.w	r3, r3, #31
 80008b8:	2201      	movs	r2, #1
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	6683      	str	r3, [r0, #104]	; 0x68
 80008c0:	4770      	bx	lr
      stream_number += 8U;
 80008c2:	3208      	adds	r2, #8
 80008c4:	e7dd      	b.n	8000882 <DMA_CalcDMAMUXChannelBaseAndMask+0x46>
 80008c6:	bf00      	nop
 80008c8:	58025408 	.word	0x58025408
 80008cc:	5802541c 	.word	0x5802541c
 80008d0:	aaaaaaab 	.word	0xaaaaaaab
 80008d4:	bffdfbf0 	.word	0xbffdfbf0
 80008d8:	10008200 	.word	0x10008200
 80008dc:	40020880 	.word	0x40020880
 80008e0:	cccccccd 	.word	0xcccccccd
 80008e4:	16009600 	.word	0x16009600
 80008e8:	58025880 	.word	0x58025880

080008ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80008ec:	7901      	ldrb	r1, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80008ee:	1e4a      	subs	r2, r1, #1
 80008f0:	2a07      	cmp	r2, #7
 80008f2:	d82c      	bhi.n	800094e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x62>
{
 80008f4:	b430      	push	{r4, r5}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80008f6:	6803      	ldr	r3, [r0, #0]
 80008f8:	4d15      	ldr	r5, [pc, #84]	; (8000950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 80008fa:	4c16      	ldr	r4, [pc, #88]	; (8000954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 80008fc:	42a3      	cmp	r3, r4
 80008fe:	bf18      	it	ne
 8000900:	42ab      	cmpne	r3, r5
 8000902:	d018      	beq.n	8000936 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8000904:	3414      	adds	r4, #20
 8000906:	42a3      	cmp	r3, r4
 8000908:	d015      	beq.n	8000936 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 800090a:	3414      	adds	r4, #20
 800090c:	42a3      	cmp	r3, r4
 800090e:	d012      	beq.n	8000936 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8000910:	3414      	adds	r4, #20
 8000912:	42a3      	cmp	r3, r4
 8000914:	d00f      	beq.n	8000936 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8000916:	3414      	adds	r4, #20
 8000918:	42a3      	cmp	r3, r4
 800091a:	d00c      	beq.n	8000936 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 800091c:	3414      	adds	r4, #20
 800091e:	42a3      	cmp	r3, r4
 8000920:	d009      	beq.n	8000936 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8000922:	3414      	adds	r4, #20
 8000924:	42a3      	cmp	r3, r4
 8000926:	d006      	beq.n	8000936 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000928:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 800092a:	440b      	add	r3, r1
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000930:	4b0a      	ldr	r3, [pc, #40]	; (800095c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>)
 8000932:	6703      	str	r3, [r0, #112]	; 0x70
 8000934:	e005      	b.n	8000942 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x56>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 8000938:	440b      	add	r3, r1
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
 8000940:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8000942:	2301      	movs	r3, #1
 8000944:	fa03 f202 	lsl.w	r2, r3, r2
 8000948:	6742      	str	r2, [r0, #116]	; 0x74
  }
}
 800094a:	bc30      	pop	{r4, r5}
 800094c:	4770      	bx	lr
 800094e:	4770      	bx	lr
 8000950:	58025408 	.word	0x58025408
 8000954:	5802541c 	.word	0x5802541c
 8000958:	1000823f 	.word	0x1000823f
 800095c:	40020940 	.word	0x40020940
 8000960:	1600963f 	.word	0x1600963f
 8000964:	58025940 	.word	0x58025940

08000968 <HAL_DMA_Init>:
{
 8000968:	b570      	push	{r4, r5, r6, lr}
 800096a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800096c:	f7ff fd14 	bl	8000398 <HAL_GetTick>
  if(hdma == NULL)
 8000970:	2c00      	cmp	r4, #0
 8000972:	f000 81bd 	beq.w	8000cf0 <HAL_DMA_Init+0x388>
 8000976:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000978:	6823      	ldr	r3, [r4, #0]
 800097a:	49b7      	ldr	r1, [pc, #732]	; (8000c58 <HAL_DMA_Init+0x2f0>)
 800097c:	4ab7      	ldr	r2, [pc, #732]	; (8000c5c <HAL_DMA_Init+0x2f4>)
 800097e:	4293      	cmp	r3, r2
 8000980:	bf18      	it	ne
 8000982:	428b      	cmpne	r3, r1
 8000984:	bf0c      	ite	eq
 8000986:	2201      	moveq	r2, #1
 8000988:	2200      	movne	r2, #0
 800098a:	d050      	beq.n	8000a2e <HAL_DMA_Init+0xc6>
 800098c:	3130      	adds	r1, #48	; 0x30
 800098e:	428b      	cmp	r3, r1
 8000990:	d04d      	beq.n	8000a2e <HAL_DMA_Init+0xc6>
 8000992:	3118      	adds	r1, #24
 8000994:	428b      	cmp	r3, r1
 8000996:	d04a      	beq.n	8000a2e <HAL_DMA_Init+0xc6>
 8000998:	3118      	adds	r1, #24
 800099a:	428b      	cmp	r3, r1
 800099c:	d047      	beq.n	8000a2e <HAL_DMA_Init+0xc6>
 800099e:	3118      	adds	r1, #24
 80009a0:	428b      	cmp	r3, r1
 80009a2:	d044      	beq.n	8000a2e <HAL_DMA_Init+0xc6>
 80009a4:	3118      	adds	r1, #24
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d041      	beq.n	8000a2e <HAL_DMA_Init+0xc6>
 80009aa:	3118      	adds	r1, #24
 80009ac:	428b      	cmp	r3, r1
 80009ae:	d03e      	beq.n	8000a2e <HAL_DMA_Init+0xc6>
 80009b0:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80009b4:	428b      	cmp	r3, r1
 80009b6:	d03a      	beq.n	8000a2e <HAL_DMA_Init+0xc6>
 80009b8:	3118      	adds	r1, #24
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d037      	beq.n	8000a2e <HAL_DMA_Init+0xc6>
 80009be:	3118      	adds	r1, #24
 80009c0:	428b      	cmp	r3, r1
 80009c2:	d034      	beq.n	8000a2e <HAL_DMA_Init+0xc6>
 80009c4:	3118      	adds	r1, #24
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d031      	beq.n	8000a2e <HAL_DMA_Init+0xc6>
 80009ca:	3118      	adds	r1, #24
 80009cc:	428b      	cmp	r3, r1
 80009ce:	d02e      	beq.n	8000a2e <HAL_DMA_Init+0xc6>
 80009d0:	3118      	adds	r1, #24
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d02b      	beq.n	8000a2e <HAL_DMA_Init+0xc6>
 80009d6:	3118      	adds	r1, #24
 80009d8:	428b      	cmp	r3, r1
 80009da:	d028      	beq.n	8000a2e <HAL_DMA_Init+0xc6>
 80009dc:	3118      	adds	r1, #24
 80009de:	428b      	cmp	r3, r1
 80009e0:	d025      	beq.n	8000a2e <HAL_DMA_Init+0xc6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80009e2:	499f      	ldr	r1, [pc, #636]	; (8000c60 <HAL_DMA_Init+0x2f8>)
 80009e4:	4a9f      	ldr	r2, [pc, #636]	; (8000c64 <HAL_DMA_Init+0x2fc>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	bf18      	it	ne
 80009ea:	428b      	cmpne	r3, r1
 80009ec:	f000 8124 	beq.w	8000c38 <HAL_DMA_Init+0x2d0>
 80009f0:	4a9d      	ldr	r2, [pc, #628]	; (8000c68 <HAL_DMA_Init+0x300>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	f000 8120 	beq.w	8000c38 <HAL_DMA_Init+0x2d0>
 80009f8:	3214      	adds	r2, #20
 80009fa:	4293      	cmp	r3, r2
 80009fc:	f000 811c 	beq.w	8000c38 <HAL_DMA_Init+0x2d0>
 8000a00:	3214      	adds	r2, #20
 8000a02:	4293      	cmp	r3, r2
 8000a04:	f000 8118 	beq.w	8000c38 <HAL_DMA_Init+0x2d0>
 8000a08:	3214      	adds	r2, #20
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	f000 8114 	beq.w	8000c38 <HAL_DMA_Init+0x2d0>
 8000a10:	3214      	adds	r2, #20
 8000a12:	4293      	cmp	r3, r2
 8000a14:	f000 8110 	beq.w	8000c38 <HAL_DMA_Init+0x2d0>
 8000a18:	3214      	adds	r2, #20
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	f000 810c 	beq.w	8000c38 <HAL_DMA_Init+0x2d0>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a20:	2340      	movs	r3, #64	; 0x40
 8000a22:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8000a24:	2303      	movs	r3, #3
 8000a26:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	e04a      	b.n	8000ac4 <HAL_DMA_Init+0x15c>
    __HAL_UNLOCK(hdma);
 8000a2e:	2100      	movs	r1, #0
 8000a30:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a34:	2102      	movs	r1, #2
 8000a36:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000a3a:	bb7a      	cbnz	r2, 8000a9c <HAL_DMA_Init+0x134>
 8000a3c:	4a8b      	ldr	r2, [pc, #556]	; (8000c6c <HAL_DMA_Init+0x304>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d02c      	beq.n	8000a9c <HAL_DMA_Init+0x134>
 8000a42:	3218      	adds	r2, #24
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d029      	beq.n	8000a9c <HAL_DMA_Init+0x134>
 8000a48:	3218      	adds	r2, #24
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d026      	beq.n	8000a9c <HAL_DMA_Init+0x134>
 8000a4e:	3218      	adds	r2, #24
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d023      	beq.n	8000a9c <HAL_DMA_Init+0x134>
 8000a54:	3218      	adds	r2, #24
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d020      	beq.n	8000a9c <HAL_DMA_Init+0x134>
 8000a5a:	3218      	adds	r2, #24
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d01d      	beq.n	8000a9c <HAL_DMA_Init+0x134>
 8000a60:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d019      	beq.n	8000a9c <HAL_DMA_Init+0x134>
 8000a68:	3218      	adds	r2, #24
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d016      	beq.n	8000a9c <HAL_DMA_Init+0x134>
 8000a6e:	3218      	adds	r2, #24
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d013      	beq.n	8000a9c <HAL_DMA_Init+0x134>
 8000a74:	3218      	adds	r2, #24
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d010      	beq.n	8000a9c <HAL_DMA_Init+0x134>
 8000a7a:	3218      	adds	r2, #24
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d00d      	beq.n	8000a9c <HAL_DMA_Init+0x134>
 8000a80:	3218      	adds	r2, #24
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d00a      	beq.n	8000a9c <HAL_DMA_Init+0x134>
 8000a86:	3218      	adds	r2, #24
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d007      	beq.n	8000a9c <HAL_DMA_Init+0x134>
 8000a8c:	3218      	adds	r2, #24
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d004      	beq.n	8000a9c <HAL_DMA_Init+0x134>
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	f022 0201 	bic.w	r2, r2, #1
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	e003      	b.n	8000aa4 <HAL_DMA_Init+0x13c>
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	f022 0201 	bic.w	r2, r2, #1
 8000aa2:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000aa4:	6823      	ldr	r3, [r4, #0]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	f012 0f01 	tst.w	r2, #1
 8000aac:	d00b      	beq.n	8000ac6 <HAL_DMA_Init+0x15e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000aae:	f7ff fc73 	bl	8000398 <HAL_GetTick>
 8000ab2:	1b40      	subs	r0, r0, r5
 8000ab4:	2805      	cmp	r0, #5
 8000ab6:	d9f5      	bls.n	8000aa4 <HAL_DMA_Init+0x13c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ab8:	2320      	movs	r3, #32
 8000aba:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8000abc:	2303      	movs	r3, #3
 8000abe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 8000ac2:	2001      	movs	r0, #1
}
 8000ac4:	bd70      	pop	{r4, r5, r6, pc}
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000ac6:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ac8:	4869      	ldr	r0, [pc, #420]	; (8000c70 <HAL_DMA_Init+0x308>)
 8000aca:	4010      	ands	r0, r2
    registerValue |=  hdma->Init.Direction           |
 8000acc:	68a1      	ldr	r1, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ace:	68e2      	ldr	r2, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 8000ad0:	430a      	orrs	r2, r1
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ad2:	6921      	ldr	r1, [r4, #16]
 8000ad4:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ad6:	6961      	ldr	r1, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ad8:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ada:	69a1      	ldr	r1, [r4, #24]
 8000adc:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8000ade:	69e1      	ldr	r1, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ae0:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8000ae2:	6a21      	ldr	r1, [r4, #32]
 8000ae4:	430a      	orrs	r2, r1
    registerValue |=  hdma->Init.Direction           |
 8000ae6:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ae8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000aea:	2904      	cmp	r1, #4
 8000aec:	f000 8099 	beq.w	8000c22 <HAL_DMA_Init+0x2ba>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8000af0:	4960      	ldr	r1, [pc, #384]	; (8000c74 <HAL_DMA_Init+0x30c>)
 8000af2:	6808      	ldr	r0, [r1, #0]
 8000af4:	4960      	ldr	r1, [pc, #384]	; (8000c78 <HAL_DMA_Init+0x310>)
 8000af6:	4001      	ands	r1, r0
 8000af8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8000afc:	d311      	bcc.n	8000b22 <HAL_DMA_Init+0x1ba>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8000afe:	6861      	ldr	r1, [r4, #4]
 8000b00:	f1a1 0529 	sub.w	r5, r1, #41	; 0x29
 8000b04:	f1a1 003f 	sub.w	r0, r1, #63	; 0x3f
 8000b08:	2803      	cmp	r0, #3
 8000b0a:	bf88      	it	hi
 8000b0c:	2d05      	cmphi	r5, #5
 8000b0e:	d906      	bls.n	8000b1e <HAL_DMA_Init+0x1b6>
 8000b10:	f1a1 0047 	sub.w	r0, r1, #71	; 0x47
 8000b14:	2801      	cmp	r0, #1
 8000b16:	d902      	bls.n	8000b1e <HAL_DMA_Init+0x1b6>
 8000b18:	394f      	subs	r1, #79	; 0x4f
 8000b1a:	2903      	cmp	r1, #3
 8000b1c:	d801      	bhi.n	8000b22 <HAL_DMA_Init+0x1ba>
        registerValue |= DMA_SxCR_TRBUFF;
 8000b1e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8000b22:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8000b24:	6826      	ldr	r6, [r4, #0]
 8000b26:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000b28:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 8000b2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b2e:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b30:	2b04      	cmp	r3, #4
 8000b32:	d108      	bne.n	8000b46 <HAL_DMA_Init+0x1de>
      registerValue |= hdma->Init.FIFOThreshold;
 8000b34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b36:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000b38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b3a:	b123      	cbz	r3, 8000b46 <HAL_DMA_Init+0x1de>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	f7ff fe33 	bl	80007a8 <DMA_CheckFifoParam>
 8000b42:	2800      	cmp	r0, #0
 8000b44:	d172      	bne.n	8000c2c <HAL_DMA_Init+0x2c4>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8000b46:	6175      	str	r5, [r6, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000b48:	4620      	mov	r0, r4
 8000b4a:	f7ff fdd1 	bl	80006f0 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8000b4e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000b50:	f003 021f 	and.w	r2, r3, #31
 8000b54:	233f      	movs	r3, #63	; 0x3f
 8000b56:	4093      	lsls	r3, r2
 8000b58:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000b5a:	6823      	ldr	r3, [r4, #0]
 8000b5c:	493e      	ldr	r1, [pc, #248]	; (8000c58 <HAL_DMA_Init+0x2f0>)
 8000b5e:	4a3f      	ldr	r2, [pc, #252]	; (8000c5c <HAL_DMA_Init+0x2f4>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	bf18      	it	ne
 8000b64:	428b      	cmpne	r3, r1
 8000b66:	d042      	beq.n	8000bee <HAL_DMA_Init+0x286>
 8000b68:	3218      	adds	r2, #24
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d03f      	beq.n	8000bee <HAL_DMA_Init+0x286>
 8000b6e:	3218      	adds	r2, #24
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d03c      	beq.n	8000bee <HAL_DMA_Init+0x286>
 8000b74:	3218      	adds	r2, #24
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d039      	beq.n	8000bee <HAL_DMA_Init+0x286>
 8000b7a:	3218      	adds	r2, #24
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d036      	beq.n	8000bee <HAL_DMA_Init+0x286>
 8000b80:	3218      	adds	r2, #24
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d033      	beq.n	8000bee <HAL_DMA_Init+0x286>
 8000b86:	3218      	adds	r2, #24
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d030      	beq.n	8000bee <HAL_DMA_Init+0x286>
 8000b8c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d02c      	beq.n	8000bee <HAL_DMA_Init+0x286>
 8000b94:	3218      	adds	r2, #24
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d029      	beq.n	8000bee <HAL_DMA_Init+0x286>
 8000b9a:	3218      	adds	r2, #24
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d026      	beq.n	8000bee <HAL_DMA_Init+0x286>
 8000ba0:	3218      	adds	r2, #24
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d023      	beq.n	8000bee <HAL_DMA_Init+0x286>
 8000ba6:	3218      	adds	r2, #24
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d020      	beq.n	8000bee <HAL_DMA_Init+0x286>
 8000bac:	3218      	adds	r2, #24
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d01d      	beq.n	8000bee <HAL_DMA_Init+0x286>
 8000bb2:	3218      	adds	r2, #24
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d01a      	beq.n	8000bee <HAL_DMA_Init+0x286>
 8000bb8:	3218      	adds	r2, #24
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d017      	beq.n	8000bee <HAL_DMA_Init+0x286>
 8000bbe:	4a28      	ldr	r2, [pc, #160]	; (8000c60 <HAL_DMA_Init+0x2f8>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d014      	beq.n	8000bee <HAL_DMA_Init+0x286>
 8000bc4:	3214      	adds	r2, #20
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d011      	beq.n	8000bee <HAL_DMA_Init+0x286>
 8000bca:	3214      	adds	r2, #20
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d00e      	beq.n	8000bee <HAL_DMA_Init+0x286>
 8000bd0:	3214      	adds	r2, #20
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d00b      	beq.n	8000bee <HAL_DMA_Init+0x286>
 8000bd6:	3214      	adds	r2, #20
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d008      	beq.n	8000bee <HAL_DMA_Init+0x286>
 8000bdc:	3214      	adds	r2, #20
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d005      	beq.n	8000bee <HAL_DMA_Init+0x286>
 8000be2:	3214      	adds	r2, #20
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d002      	beq.n	8000bee <HAL_DMA_Init+0x286>
 8000be8:	3214      	adds	r2, #20
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d113      	bne.n	8000c16 <HAL_DMA_Init+0x2ae>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000bee:	4620      	mov	r0, r4
 8000bf0:	f7ff fe24 	bl	800083c <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000bf4:	68a3      	ldr	r3, [r4, #8]
 8000bf6:	2b80      	cmp	r3, #128	; 0x80
 8000bf8:	d06d      	beq.n	8000cd6 <HAL_DMA_Init+0x36e>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000bfa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000bfc:	7922      	ldrb	r2, [r4, #4]
 8000bfe:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000c02:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8000c04:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8000c06:	6863      	ldr	r3, [r4, #4]
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	2b07      	cmp	r3, #7
 8000c0c:	d966      	bls.n	8000cdc <HAL_DMA_Init+0x374>
      hdma->DMAmuxRequestGen = 0U;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	66e3      	str	r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8000c12:	6723      	str	r3, [r4, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8000c14:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c16:	2000      	movs	r0, #0
 8000c18:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000c20:	e750      	b.n	8000ac4 <HAL_DMA_Init+0x15c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000c22:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000c24:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000c26:	4301      	orrs	r1, r0
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	e761      	b.n	8000af0 <HAL_DMA_Init+0x188>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000c2c:	2340      	movs	r3, #64	; 0x40
 8000c2e:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8000c30:	2001      	movs	r0, #1
 8000c32:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          return HAL_ERROR;
 8000c36:	e745      	b.n	8000ac4 <HAL_DMA_Init+0x15c>
    __HAL_UNLOCK(hdma);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c3e:	2202      	movs	r2, #2
 8000c40:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8000c44:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8000c46:	490d      	ldr	r1, [pc, #52]	; (8000c7c <HAL_DMA_Init+0x314>)
 8000c48:	4011      	ands	r1, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000c4a:	68a2      	ldr	r2, [r4, #8]
 8000c4c:	2a40      	cmp	r2, #64	; 0x40
 8000c4e:	d01a      	beq.n	8000c86 <HAL_DMA_Init+0x31e>
 8000c50:	2a80      	cmp	r2, #128	; 0x80
 8000c52:	d015      	beq.n	8000c80 <HAL_DMA_Init+0x318>
 8000c54:	2200      	movs	r2, #0
 8000c56:	e017      	b.n	8000c88 <HAL_DMA_Init+0x320>
 8000c58:	40020010 	.word	0x40020010
 8000c5c:	40020028 	.word	0x40020028
 8000c60:	58025408 	.word	0x58025408
 8000c64:	5802541c 	.word	0x5802541c
 8000c68:	58025430 	.word	0x58025430
 8000c6c:	40020040 	.word	0x40020040
 8000c70:	fe10803f 	.word	0xfe10803f
 8000c74:	5c001000 	.word	0x5c001000
 8000c78:	ffff0000 	.word	0xffff0000
 8000c7c:	fffe000f 	.word	0xfffe000f
 8000c80:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c84:	e000      	b.n	8000c88 <HAL_DMA_Init+0x320>
 8000c86:	2210      	movs	r2, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000c88:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000c8a:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000c8e:	6920      	ldr	r0, [r4, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000c90:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000c94:	6960      	ldr	r0, [r4, #20]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000c96:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000c9a:	69a0      	ldr	r0, [r4, #24]
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000c9c:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000ca0:	69e0      	ldr	r0, [r4, #28]
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000ca2:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8000ca6:	6a20      	ldr	r0, [r4, #32]
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000ca8:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000cac:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8000cae:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000cb0:	6822      	ldr	r2, [r4, #0]
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <HAL_DMA_Init+0x38c>)
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4a10      	ldr	r2, [pc, #64]	; (8000cf8 <HAL_DMA_Init+0x390>)
 8000cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cbc:	091b      	lsrs	r3, r3, #4
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000cc2:	4620      	mov	r0, r4
 8000cc4:	f7ff fd14 	bl	80006f0 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8000cc8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000cca:	f003 021f 	and.w	r2, r3, #31
 8000cce:	2301      	movs	r3, #1
 8000cd0:	4093      	lsls	r3, r2
 8000cd2:	6043      	str	r3, [r0, #4]
 8000cd4:	e741      	b.n	8000b5a <HAL_DMA_Init+0x1f2>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	6063      	str	r3, [r4, #4]
 8000cda:	e78e      	b.n	8000bfa <HAL_DMA_Init+0x292>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f7ff fe05 	bl	80008ec <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8000ce2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ce8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000cea:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	e792      	b.n	8000c16 <HAL_DMA_Init+0x2ae>
    return HAL_ERROR;
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	e6e7      	b.n	8000ac4 <HAL_DMA_Init+0x15c>
 8000cf4:	a7fdabf8 	.word	0xa7fdabf8
 8000cf8:	cccccccd 	.word	0xcccccccd

08000cfc <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	f000 813e 	beq.w	8000f7e <HAL_DMA_Start_IT+0x282>
{
 8000d02:	b570      	push	{r4, r5, r6, lr}
 8000d04:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8000d06:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8000d0a:	2801      	cmp	r0, #1
 8000d0c:	f000 8139 	beq.w	8000f82 <HAL_DMA_Start_IT+0x286>
 8000d10:	2001      	movs	r0, #1
 8000d12:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d16:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8000d1a:	b2c0      	uxtb	r0, r0
 8000d1c:	2801      	cmp	r0, #1
 8000d1e:	d007      	beq.n	8000d30 <HAL_DMA_Start_IT+0x34>
    __HAL_UNLOCK(hdma);
 8000d20:	2300      	movs	r3, #0
 8000d22:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000d26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d2a:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 8000d2c:	2001      	movs	r0, #1
}
 8000d2e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d30:	2002      	movs	r0, #2
 8000d32:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d36:	2000      	movs	r0, #0
 8000d38:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8000d3a:	6820      	ldr	r0, [r4, #0]
 8000d3c:	4e92      	ldr	r6, [pc, #584]	; (8000f88 <HAL_DMA_Start_IT+0x28c>)
 8000d3e:	4d93      	ldr	r5, [pc, #588]	; (8000f8c <HAL_DMA_Start_IT+0x290>)
 8000d40:	42a8      	cmp	r0, r5
 8000d42:	bf18      	it	ne
 8000d44:	42b0      	cmpne	r0, r6
 8000d46:	d02f      	beq.n	8000da8 <HAL_DMA_Start_IT+0xac>
 8000d48:	3518      	adds	r5, #24
 8000d4a:	42a8      	cmp	r0, r5
 8000d4c:	d02c      	beq.n	8000da8 <HAL_DMA_Start_IT+0xac>
 8000d4e:	3518      	adds	r5, #24
 8000d50:	42a8      	cmp	r0, r5
 8000d52:	d029      	beq.n	8000da8 <HAL_DMA_Start_IT+0xac>
 8000d54:	3518      	adds	r5, #24
 8000d56:	42a8      	cmp	r0, r5
 8000d58:	d026      	beq.n	8000da8 <HAL_DMA_Start_IT+0xac>
 8000d5a:	3518      	adds	r5, #24
 8000d5c:	42a8      	cmp	r0, r5
 8000d5e:	d023      	beq.n	8000da8 <HAL_DMA_Start_IT+0xac>
 8000d60:	3518      	adds	r5, #24
 8000d62:	42a8      	cmp	r0, r5
 8000d64:	d020      	beq.n	8000da8 <HAL_DMA_Start_IT+0xac>
 8000d66:	3518      	adds	r5, #24
 8000d68:	42a8      	cmp	r0, r5
 8000d6a:	d01d      	beq.n	8000da8 <HAL_DMA_Start_IT+0xac>
 8000d6c:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8000d70:	42a8      	cmp	r0, r5
 8000d72:	d019      	beq.n	8000da8 <HAL_DMA_Start_IT+0xac>
 8000d74:	3518      	adds	r5, #24
 8000d76:	42a8      	cmp	r0, r5
 8000d78:	d016      	beq.n	8000da8 <HAL_DMA_Start_IT+0xac>
 8000d7a:	3518      	adds	r5, #24
 8000d7c:	42a8      	cmp	r0, r5
 8000d7e:	d013      	beq.n	8000da8 <HAL_DMA_Start_IT+0xac>
 8000d80:	3518      	adds	r5, #24
 8000d82:	42a8      	cmp	r0, r5
 8000d84:	d010      	beq.n	8000da8 <HAL_DMA_Start_IT+0xac>
 8000d86:	3518      	adds	r5, #24
 8000d88:	42a8      	cmp	r0, r5
 8000d8a:	d00d      	beq.n	8000da8 <HAL_DMA_Start_IT+0xac>
 8000d8c:	3518      	adds	r5, #24
 8000d8e:	42a8      	cmp	r0, r5
 8000d90:	d00a      	beq.n	8000da8 <HAL_DMA_Start_IT+0xac>
 8000d92:	3518      	adds	r5, #24
 8000d94:	42a8      	cmp	r0, r5
 8000d96:	d007      	beq.n	8000da8 <HAL_DMA_Start_IT+0xac>
 8000d98:	3518      	adds	r5, #24
 8000d9a:	42a8      	cmp	r0, r5
 8000d9c:	d004      	beq.n	8000da8 <HAL_DMA_Start_IT+0xac>
 8000d9e:	6805      	ldr	r5, [r0, #0]
 8000da0:	f025 0501 	bic.w	r5, r5, #1
 8000da4:	6005      	str	r5, [r0, #0]
 8000da6:	e003      	b.n	8000db0 <HAL_DMA_Start_IT+0xb4>
 8000da8:	6805      	ldr	r5, [r0, #0]
 8000daa:	f025 0501 	bic.w	r5, r5, #1
 8000dae:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000db0:	4620      	mov	r0, r4
 8000db2:	f7ff fbc5 	bl	8000540 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000db6:	6823      	ldr	r3, [r4, #0]
 8000db8:	4973      	ldr	r1, [pc, #460]	; (8000f88 <HAL_DMA_Start_IT+0x28c>)
 8000dba:	4a74      	ldr	r2, [pc, #464]	; (8000f8c <HAL_DMA_Start_IT+0x290>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	bf18      	it	ne
 8000dc0:	428b      	cmpne	r3, r1
 8000dc2:	d038      	beq.n	8000e36 <HAL_DMA_Start_IT+0x13a>
 8000dc4:	3218      	adds	r2, #24
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d035      	beq.n	8000e36 <HAL_DMA_Start_IT+0x13a>
 8000dca:	3218      	adds	r2, #24
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d032      	beq.n	8000e36 <HAL_DMA_Start_IT+0x13a>
 8000dd0:	3218      	adds	r2, #24
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d02f      	beq.n	8000e36 <HAL_DMA_Start_IT+0x13a>
 8000dd6:	3218      	adds	r2, #24
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d02c      	beq.n	8000e36 <HAL_DMA_Start_IT+0x13a>
 8000ddc:	3218      	adds	r2, #24
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d029      	beq.n	8000e36 <HAL_DMA_Start_IT+0x13a>
 8000de2:	3218      	adds	r2, #24
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d026      	beq.n	8000e36 <HAL_DMA_Start_IT+0x13a>
 8000de8:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d022      	beq.n	8000e36 <HAL_DMA_Start_IT+0x13a>
 8000df0:	3218      	adds	r2, #24
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d01f      	beq.n	8000e36 <HAL_DMA_Start_IT+0x13a>
 8000df6:	3218      	adds	r2, #24
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d01c      	beq.n	8000e36 <HAL_DMA_Start_IT+0x13a>
 8000dfc:	3218      	adds	r2, #24
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d019      	beq.n	8000e36 <HAL_DMA_Start_IT+0x13a>
 8000e02:	3218      	adds	r2, #24
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d016      	beq.n	8000e36 <HAL_DMA_Start_IT+0x13a>
 8000e08:	3218      	adds	r2, #24
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d013      	beq.n	8000e36 <HAL_DMA_Start_IT+0x13a>
 8000e0e:	3218      	adds	r2, #24
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d010      	beq.n	8000e36 <HAL_DMA_Start_IT+0x13a>
 8000e14:	3218      	adds	r2, #24
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d00d      	beq.n	8000e36 <HAL_DMA_Start_IT+0x13a>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	f022 020e 	bic.w	r2, r2, #14
 8000e20:	f042 020a 	orr.w	r2, r2, #10
 8000e24:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8000e26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e28:	b193      	cbz	r3, 8000e50 <HAL_DMA_Start_IT+0x154>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8000e2a:	6822      	ldr	r2, [r4, #0]
 8000e2c:	6813      	ldr	r3, [r2, #0]
 8000e2e:	f043 0304 	orr.w	r3, r3, #4
 8000e32:	6013      	str	r3, [r2, #0]
 8000e34:	e00c      	b.n	8000e50 <HAL_DMA_Start_IT+0x154>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	f022 021e 	bic.w	r2, r2, #30
 8000e3c:	f042 0216 	orr.w	r2, r2, #22
 8000e40:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8000e42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e44:	b123      	cbz	r3, 8000e50 <HAL_DMA_Start_IT+0x154>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8000e46:	6822      	ldr	r2, [r4, #0]
 8000e48:	6813      	ldr	r3, [r2, #0]
 8000e4a:	f043 0308 	orr.w	r3, r3, #8
 8000e4e:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000e50:	6823      	ldr	r3, [r4, #0]
 8000e52:	494d      	ldr	r1, [pc, #308]	; (8000f88 <HAL_DMA_Start_IT+0x28c>)
 8000e54:	4a4d      	ldr	r2, [pc, #308]	; (8000f8c <HAL_DMA_Start_IT+0x290>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	bf18      	it	ne
 8000e5a:	428b      	cmpne	r3, r1
 8000e5c:	d042      	beq.n	8000ee4 <HAL_DMA_Start_IT+0x1e8>
 8000e5e:	3218      	adds	r2, #24
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d03f      	beq.n	8000ee4 <HAL_DMA_Start_IT+0x1e8>
 8000e64:	3218      	adds	r2, #24
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d03c      	beq.n	8000ee4 <HAL_DMA_Start_IT+0x1e8>
 8000e6a:	3218      	adds	r2, #24
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d039      	beq.n	8000ee4 <HAL_DMA_Start_IT+0x1e8>
 8000e70:	3218      	adds	r2, #24
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d036      	beq.n	8000ee4 <HAL_DMA_Start_IT+0x1e8>
 8000e76:	3218      	adds	r2, #24
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d033      	beq.n	8000ee4 <HAL_DMA_Start_IT+0x1e8>
 8000e7c:	3218      	adds	r2, #24
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d030      	beq.n	8000ee4 <HAL_DMA_Start_IT+0x1e8>
 8000e82:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d02c      	beq.n	8000ee4 <HAL_DMA_Start_IT+0x1e8>
 8000e8a:	3218      	adds	r2, #24
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d029      	beq.n	8000ee4 <HAL_DMA_Start_IT+0x1e8>
 8000e90:	3218      	adds	r2, #24
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d026      	beq.n	8000ee4 <HAL_DMA_Start_IT+0x1e8>
 8000e96:	3218      	adds	r2, #24
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d023      	beq.n	8000ee4 <HAL_DMA_Start_IT+0x1e8>
 8000e9c:	3218      	adds	r2, #24
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d020      	beq.n	8000ee4 <HAL_DMA_Start_IT+0x1e8>
 8000ea2:	3218      	adds	r2, #24
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d01d      	beq.n	8000ee4 <HAL_DMA_Start_IT+0x1e8>
 8000ea8:	3218      	adds	r2, #24
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d01a      	beq.n	8000ee4 <HAL_DMA_Start_IT+0x1e8>
 8000eae:	3218      	adds	r2, #24
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d017      	beq.n	8000ee4 <HAL_DMA_Start_IT+0x1e8>
 8000eb4:	4a36      	ldr	r2, [pc, #216]	; (8000f90 <HAL_DMA_Start_IT+0x294>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d014      	beq.n	8000ee4 <HAL_DMA_Start_IT+0x1e8>
 8000eba:	3214      	adds	r2, #20
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d011      	beq.n	8000ee4 <HAL_DMA_Start_IT+0x1e8>
 8000ec0:	3214      	adds	r2, #20
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d00e      	beq.n	8000ee4 <HAL_DMA_Start_IT+0x1e8>
 8000ec6:	3214      	adds	r2, #20
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d00b      	beq.n	8000ee4 <HAL_DMA_Start_IT+0x1e8>
 8000ecc:	3214      	adds	r2, #20
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d008      	beq.n	8000ee4 <HAL_DMA_Start_IT+0x1e8>
 8000ed2:	3214      	adds	r2, #20
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d005      	beq.n	8000ee4 <HAL_DMA_Start_IT+0x1e8>
 8000ed8:	3214      	adds	r2, #20
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d002      	beq.n	8000ee4 <HAL_DMA_Start_IT+0x1e8>
 8000ede:	3214      	adds	r2, #20
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d10e      	bne.n	8000f02 <HAL_DMA_Start_IT+0x206>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000ee4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8000eec:	d003      	beq.n	8000ef6 <HAL_DMA_Start_IT+0x1fa>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ef4:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8000ef6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8000ef8:	b11b      	cbz	r3, 8000f02 <HAL_DMA_Start_IT+0x206>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f00:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8000f02:	6823      	ldr	r3, [r4, #0]
 8000f04:	4920      	ldr	r1, [pc, #128]	; (8000f88 <HAL_DMA_Start_IT+0x28c>)
 8000f06:	4a21      	ldr	r2, [pc, #132]	; (8000f8c <HAL_DMA_Start_IT+0x290>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	bf18      	it	ne
 8000f0c:	428b      	cmpne	r3, r1
 8000f0e:	d030      	beq.n	8000f72 <HAL_DMA_Start_IT+0x276>
 8000f10:	3218      	adds	r2, #24
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d02d      	beq.n	8000f72 <HAL_DMA_Start_IT+0x276>
 8000f16:	3218      	adds	r2, #24
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d02a      	beq.n	8000f72 <HAL_DMA_Start_IT+0x276>
 8000f1c:	3218      	adds	r2, #24
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d027      	beq.n	8000f72 <HAL_DMA_Start_IT+0x276>
 8000f22:	3218      	adds	r2, #24
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d024      	beq.n	8000f72 <HAL_DMA_Start_IT+0x276>
 8000f28:	3218      	adds	r2, #24
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d021      	beq.n	8000f72 <HAL_DMA_Start_IT+0x276>
 8000f2e:	3218      	adds	r2, #24
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d01e      	beq.n	8000f72 <HAL_DMA_Start_IT+0x276>
 8000f34:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d01a      	beq.n	8000f72 <HAL_DMA_Start_IT+0x276>
 8000f3c:	3218      	adds	r2, #24
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d017      	beq.n	8000f72 <HAL_DMA_Start_IT+0x276>
 8000f42:	3218      	adds	r2, #24
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d014      	beq.n	8000f72 <HAL_DMA_Start_IT+0x276>
 8000f48:	3218      	adds	r2, #24
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d011      	beq.n	8000f72 <HAL_DMA_Start_IT+0x276>
 8000f4e:	3218      	adds	r2, #24
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d00e      	beq.n	8000f72 <HAL_DMA_Start_IT+0x276>
 8000f54:	3218      	adds	r2, #24
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d00b      	beq.n	8000f72 <HAL_DMA_Start_IT+0x276>
 8000f5a:	3218      	adds	r2, #24
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d008      	beq.n	8000f72 <HAL_DMA_Start_IT+0x276>
 8000f60:	3218      	adds	r2, #24
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d005      	beq.n	8000f72 <HAL_DMA_Start_IT+0x276>
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	f042 0201 	orr.w	r2, r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f6e:	2000      	movs	r0, #0
 8000f70:	e6dd      	b.n	8000d2e <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_ENABLE(hdma);
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	f042 0201 	orr.w	r2, r2, #1
 8000f78:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f7a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000f7c:	e6d7      	b.n	8000d2e <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 8000f7e:	2001      	movs	r0, #1
}
 8000f80:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8000f82:	2002      	movs	r0, #2
 8000f84:	e6d3      	b.n	8000d2e <HAL_DMA_Start_IT+0x32>
 8000f86:	bf00      	nop
 8000f88:	40020010 	.word	0x40020010
 8000f8c:	40020028 	.word	0x40020028
 8000f90:	58025408 	.word	0x58025408

08000f94 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8000f94:	2800      	cmp	r0, #0
 8000f96:	f000 813a 	beq.w	800120e <HAL_DMA_Abort_IT+0x27a>
{
 8000f9a:	b508      	push	{r3, lr}
 8000f9c:	4602      	mov	r2, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f9e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d003      	beq.n	8000fb0 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000fac:	2001      	movs	r0, #1
}
 8000fae:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000fb0:	6803      	ldr	r3, [r0, #0]
 8000fb2:	4899      	ldr	r0, [pc, #612]	; (8001218 <HAL_DMA_Abort_IT+0x284>)
 8000fb4:	4999      	ldr	r1, [pc, #612]	; (800121c <HAL_DMA_Abort_IT+0x288>)
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	bf18      	it	ne
 8000fba:	4283      	cmpne	r3, r0
 8000fbc:	bf0c      	ite	eq
 8000fbe:	2101      	moveq	r1, #1
 8000fc0:	2100      	movne	r1, #0
 8000fc2:	f000 80e4 	beq.w	800118e <HAL_DMA_Abort_IT+0x1fa>
 8000fc6:	3030      	adds	r0, #48	; 0x30
 8000fc8:	4283      	cmp	r3, r0
 8000fca:	f000 80e0 	beq.w	800118e <HAL_DMA_Abort_IT+0x1fa>
 8000fce:	3018      	adds	r0, #24
 8000fd0:	4283      	cmp	r3, r0
 8000fd2:	f000 80dc 	beq.w	800118e <HAL_DMA_Abort_IT+0x1fa>
 8000fd6:	3018      	adds	r0, #24
 8000fd8:	4283      	cmp	r3, r0
 8000fda:	f000 80d8 	beq.w	800118e <HAL_DMA_Abort_IT+0x1fa>
 8000fde:	3018      	adds	r0, #24
 8000fe0:	4283      	cmp	r3, r0
 8000fe2:	f000 80d4 	beq.w	800118e <HAL_DMA_Abort_IT+0x1fa>
 8000fe6:	3018      	adds	r0, #24
 8000fe8:	4283      	cmp	r3, r0
 8000fea:	f000 80d0 	beq.w	800118e <HAL_DMA_Abort_IT+0x1fa>
 8000fee:	3018      	adds	r0, #24
 8000ff0:	4283      	cmp	r3, r0
 8000ff2:	f000 80cc 	beq.w	800118e <HAL_DMA_Abort_IT+0x1fa>
 8000ff6:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8000ffa:	4283      	cmp	r3, r0
 8000ffc:	f000 80c7 	beq.w	800118e <HAL_DMA_Abort_IT+0x1fa>
 8001000:	3018      	adds	r0, #24
 8001002:	4283      	cmp	r3, r0
 8001004:	f000 80c3 	beq.w	800118e <HAL_DMA_Abort_IT+0x1fa>
 8001008:	3018      	adds	r0, #24
 800100a:	4283      	cmp	r3, r0
 800100c:	f000 80bf 	beq.w	800118e <HAL_DMA_Abort_IT+0x1fa>
 8001010:	3018      	adds	r0, #24
 8001012:	4283      	cmp	r3, r0
 8001014:	f000 80bb 	beq.w	800118e <HAL_DMA_Abort_IT+0x1fa>
 8001018:	3018      	adds	r0, #24
 800101a:	4283      	cmp	r3, r0
 800101c:	f000 80b7 	beq.w	800118e <HAL_DMA_Abort_IT+0x1fa>
 8001020:	3018      	adds	r0, #24
 8001022:	4283      	cmp	r3, r0
 8001024:	f000 80b3 	beq.w	800118e <HAL_DMA_Abort_IT+0x1fa>
 8001028:	3018      	adds	r0, #24
 800102a:	4283      	cmp	r3, r0
 800102c:	f000 80af 	beq.w	800118e <HAL_DMA_Abort_IT+0x1fa>
 8001030:	3018      	adds	r0, #24
 8001032:	4283      	cmp	r3, r0
 8001034:	f000 80ab 	beq.w	800118e <HAL_DMA_Abort_IT+0x1fa>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001038:	6819      	ldr	r1, [r3, #0]
 800103a:	f021 010e 	bic.w	r1, r1, #14
 800103e:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8001040:	6813      	ldr	r3, [r2, #0]
 8001042:	f5a0 6095 	sub.w	r0, r0, #1192	; 0x4a8
 8001046:	4975      	ldr	r1, [pc, #468]	; (800121c <HAL_DMA_Abort_IT+0x288>)
 8001048:	428b      	cmp	r3, r1
 800104a:	bf18      	it	ne
 800104c:	4283      	cmpne	r3, r0
 800104e:	d02b      	beq.n	80010a8 <HAL_DMA_Abort_IT+0x114>
 8001050:	4973      	ldr	r1, [pc, #460]	; (8001220 <HAL_DMA_Abort_IT+0x28c>)
 8001052:	428b      	cmp	r3, r1
 8001054:	d028      	beq.n	80010a8 <HAL_DMA_Abort_IT+0x114>
 8001056:	3118      	adds	r1, #24
 8001058:	428b      	cmp	r3, r1
 800105a:	d025      	beq.n	80010a8 <HAL_DMA_Abort_IT+0x114>
 800105c:	3118      	adds	r1, #24
 800105e:	428b      	cmp	r3, r1
 8001060:	d022      	beq.n	80010a8 <HAL_DMA_Abort_IT+0x114>
 8001062:	3118      	adds	r1, #24
 8001064:	428b      	cmp	r3, r1
 8001066:	d01f      	beq.n	80010a8 <HAL_DMA_Abort_IT+0x114>
 8001068:	3118      	adds	r1, #24
 800106a:	428b      	cmp	r3, r1
 800106c:	d01c      	beq.n	80010a8 <HAL_DMA_Abort_IT+0x114>
 800106e:	3118      	adds	r1, #24
 8001070:	428b      	cmp	r3, r1
 8001072:	d019      	beq.n	80010a8 <HAL_DMA_Abort_IT+0x114>
 8001074:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8001078:	428b      	cmp	r3, r1
 800107a:	d015      	beq.n	80010a8 <HAL_DMA_Abort_IT+0x114>
 800107c:	3118      	adds	r1, #24
 800107e:	428b      	cmp	r3, r1
 8001080:	d012      	beq.n	80010a8 <HAL_DMA_Abort_IT+0x114>
 8001082:	3118      	adds	r1, #24
 8001084:	428b      	cmp	r3, r1
 8001086:	d00f      	beq.n	80010a8 <HAL_DMA_Abort_IT+0x114>
 8001088:	3118      	adds	r1, #24
 800108a:	428b      	cmp	r3, r1
 800108c:	d00c      	beq.n	80010a8 <HAL_DMA_Abort_IT+0x114>
 800108e:	3118      	adds	r1, #24
 8001090:	428b      	cmp	r3, r1
 8001092:	d009      	beq.n	80010a8 <HAL_DMA_Abort_IT+0x114>
 8001094:	3118      	adds	r1, #24
 8001096:	428b      	cmp	r3, r1
 8001098:	d006      	beq.n	80010a8 <HAL_DMA_Abort_IT+0x114>
 800109a:	3118      	adds	r1, #24
 800109c:	428b      	cmp	r3, r1
 800109e:	d003      	beq.n	80010a8 <HAL_DMA_Abort_IT+0x114>
 80010a0:	3118      	adds	r1, #24
 80010a2:	428b      	cmp	r3, r1
 80010a4:	f040 80ae 	bne.w	8001204 <HAL_DMA_Abort_IT+0x270>
 80010a8:	6819      	ldr	r1, [r3, #0]
 80010aa:	f021 0101 	bic.w	r1, r1, #1
 80010ae:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80010b0:	6813      	ldr	r3, [r2, #0]
 80010b2:	4859      	ldr	r0, [pc, #356]	; (8001218 <HAL_DMA_Abort_IT+0x284>)
 80010b4:	4959      	ldr	r1, [pc, #356]	; (800121c <HAL_DMA_Abort_IT+0x288>)
 80010b6:	428b      	cmp	r3, r1
 80010b8:	bf18      	it	ne
 80010ba:	4283      	cmpne	r3, r0
 80010bc:	d042      	beq.n	8001144 <HAL_DMA_Abort_IT+0x1b0>
 80010be:	3118      	adds	r1, #24
 80010c0:	428b      	cmp	r3, r1
 80010c2:	d03f      	beq.n	8001144 <HAL_DMA_Abort_IT+0x1b0>
 80010c4:	3118      	adds	r1, #24
 80010c6:	428b      	cmp	r3, r1
 80010c8:	d03c      	beq.n	8001144 <HAL_DMA_Abort_IT+0x1b0>
 80010ca:	3118      	adds	r1, #24
 80010cc:	428b      	cmp	r3, r1
 80010ce:	d039      	beq.n	8001144 <HAL_DMA_Abort_IT+0x1b0>
 80010d0:	3118      	adds	r1, #24
 80010d2:	428b      	cmp	r3, r1
 80010d4:	d036      	beq.n	8001144 <HAL_DMA_Abort_IT+0x1b0>
 80010d6:	3118      	adds	r1, #24
 80010d8:	428b      	cmp	r3, r1
 80010da:	d033      	beq.n	8001144 <HAL_DMA_Abort_IT+0x1b0>
 80010dc:	3118      	adds	r1, #24
 80010de:	428b      	cmp	r3, r1
 80010e0:	d030      	beq.n	8001144 <HAL_DMA_Abort_IT+0x1b0>
 80010e2:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80010e6:	428b      	cmp	r3, r1
 80010e8:	d02c      	beq.n	8001144 <HAL_DMA_Abort_IT+0x1b0>
 80010ea:	3118      	adds	r1, #24
 80010ec:	428b      	cmp	r3, r1
 80010ee:	d029      	beq.n	8001144 <HAL_DMA_Abort_IT+0x1b0>
 80010f0:	3118      	adds	r1, #24
 80010f2:	428b      	cmp	r3, r1
 80010f4:	d026      	beq.n	8001144 <HAL_DMA_Abort_IT+0x1b0>
 80010f6:	3118      	adds	r1, #24
 80010f8:	428b      	cmp	r3, r1
 80010fa:	d023      	beq.n	8001144 <HAL_DMA_Abort_IT+0x1b0>
 80010fc:	3118      	adds	r1, #24
 80010fe:	428b      	cmp	r3, r1
 8001100:	d020      	beq.n	8001144 <HAL_DMA_Abort_IT+0x1b0>
 8001102:	3118      	adds	r1, #24
 8001104:	428b      	cmp	r3, r1
 8001106:	d01d      	beq.n	8001144 <HAL_DMA_Abort_IT+0x1b0>
 8001108:	3118      	adds	r1, #24
 800110a:	428b      	cmp	r3, r1
 800110c:	d01a      	beq.n	8001144 <HAL_DMA_Abort_IT+0x1b0>
 800110e:	3118      	adds	r1, #24
 8001110:	428b      	cmp	r3, r1
 8001112:	d017      	beq.n	8001144 <HAL_DMA_Abort_IT+0x1b0>
 8001114:	4943      	ldr	r1, [pc, #268]	; (8001224 <HAL_DMA_Abort_IT+0x290>)
 8001116:	428b      	cmp	r3, r1
 8001118:	d014      	beq.n	8001144 <HAL_DMA_Abort_IT+0x1b0>
 800111a:	3114      	adds	r1, #20
 800111c:	428b      	cmp	r3, r1
 800111e:	d011      	beq.n	8001144 <HAL_DMA_Abort_IT+0x1b0>
 8001120:	3114      	adds	r1, #20
 8001122:	428b      	cmp	r3, r1
 8001124:	d00e      	beq.n	8001144 <HAL_DMA_Abort_IT+0x1b0>
 8001126:	3114      	adds	r1, #20
 8001128:	428b      	cmp	r3, r1
 800112a:	d00b      	beq.n	8001144 <HAL_DMA_Abort_IT+0x1b0>
 800112c:	3114      	adds	r1, #20
 800112e:	428b      	cmp	r3, r1
 8001130:	d008      	beq.n	8001144 <HAL_DMA_Abort_IT+0x1b0>
 8001132:	3114      	adds	r1, #20
 8001134:	428b      	cmp	r3, r1
 8001136:	d005      	beq.n	8001144 <HAL_DMA_Abort_IT+0x1b0>
 8001138:	3114      	adds	r1, #20
 800113a:	428b      	cmp	r3, r1
 800113c:	d002      	beq.n	8001144 <HAL_DMA_Abort_IT+0x1b0>
 800113e:	3114      	adds	r1, #20
 8001140:	428b      	cmp	r3, r1
 8001142:	d117      	bne.n	8001174 <HAL_DMA_Abort_IT+0x1e0>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001144:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001146:	680b      	ldr	r3, [r1, #0]
 8001148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800114c:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800114e:	6d90      	ldr	r0, [r2, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001150:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8001152:	f003 011f 	and.w	r1, r3, #31
 8001156:	2301      	movs	r3, #1
 8001158:	408b      	lsls	r3, r1
 800115a:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800115c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800115e:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8001160:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8001162:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 8001164:	b133      	cbz	r3, 8001174 <HAL_DMA_Abort_IT+0x1e0>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001166:	6819      	ldr	r1, [r3, #0]
 8001168:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800116c:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800116e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001170:	6f51      	ldr	r1, [r2, #116]	; 0x74
 8001172:	6059      	str	r1, [r3, #4]
      __HAL_UNLOCK(hdma);
 8001174:	2300      	movs	r3, #0
 8001176:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800117a:	2301      	movs	r3, #1
 800117c:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8001180:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001182:	2b00      	cmp	r3, #0
 8001184:	d045      	beq.n	8001212 <HAL_DMA_Abort_IT+0x27e>
 8001186:	4610      	mov	r0, r2
        hdma->XferAbortCallback(hdma);
 8001188:	4798      	blx	r3
  return HAL_OK;
 800118a:	2000      	movs	r0, #0
 800118c:	e70f      	b.n	8000fae <HAL_DMA_Abort_IT+0x1a>
      hdma->State = HAL_DMA_STATE_ABORT;
 800118e:	2004      	movs	r0, #4
 8001190:	f882 0035 	strb.w	r0, [r2, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001194:	bb81      	cbnz	r1, 80011f8 <HAL_DMA_Abort_IT+0x264>
 8001196:	4a22      	ldr	r2, [pc, #136]	; (8001220 <HAL_DMA_Abort_IT+0x28c>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d02d      	beq.n	80011f8 <HAL_DMA_Abort_IT+0x264>
 800119c:	3218      	adds	r2, #24
 800119e:	4293      	cmp	r3, r2
 80011a0:	d02a      	beq.n	80011f8 <HAL_DMA_Abort_IT+0x264>
 80011a2:	3218      	adds	r2, #24
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d027      	beq.n	80011f8 <HAL_DMA_Abort_IT+0x264>
 80011a8:	3218      	adds	r2, #24
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d024      	beq.n	80011f8 <HAL_DMA_Abort_IT+0x264>
 80011ae:	3218      	adds	r2, #24
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d021      	beq.n	80011f8 <HAL_DMA_Abort_IT+0x264>
 80011b4:	3218      	adds	r2, #24
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d01e      	beq.n	80011f8 <HAL_DMA_Abort_IT+0x264>
 80011ba:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80011be:	4293      	cmp	r3, r2
 80011c0:	d01a      	beq.n	80011f8 <HAL_DMA_Abort_IT+0x264>
 80011c2:	3218      	adds	r2, #24
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d017      	beq.n	80011f8 <HAL_DMA_Abort_IT+0x264>
 80011c8:	3218      	adds	r2, #24
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d014      	beq.n	80011f8 <HAL_DMA_Abort_IT+0x264>
 80011ce:	3218      	adds	r2, #24
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d011      	beq.n	80011f8 <HAL_DMA_Abort_IT+0x264>
 80011d4:	3218      	adds	r2, #24
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d00e      	beq.n	80011f8 <HAL_DMA_Abort_IT+0x264>
 80011da:	3218      	adds	r2, #24
 80011dc:	4293      	cmp	r3, r2
 80011de:	d00b      	beq.n	80011f8 <HAL_DMA_Abort_IT+0x264>
 80011e0:	3218      	adds	r2, #24
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d008      	beq.n	80011f8 <HAL_DMA_Abort_IT+0x264>
 80011e6:	3218      	adds	r2, #24
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d005      	beq.n	80011f8 <HAL_DMA_Abort_IT+0x264>
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	f022 0201 	bic.w	r2, r2, #1
 80011f2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80011f4:	2000      	movs	r0, #0
 80011f6:	e6da      	b.n	8000fae <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	f022 0201 	bic.w	r2, r2, #1
 80011fe:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001200:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 8001202:	e6d4      	b.n	8000fae <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8001204:	6819      	ldr	r1, [r3, #0]
 8001206:	f021 0101 	bic.w	r1, r1, #1
 800120a:	6019      	str	r1, [r3, #0]
 800120c:	e750      	b.n	80010b0 <HAL_DMA_Abort_IT+0x11c>
    return HAL_ERROR;
 800120e:	2001      	movs	r0, #1
}
 8001210:	4770      	bx	lr
  return HAL_OK;
 8001212:	2000      	movs	r0, #0
 8001214:	e6cb      	b.n	8000fae <HAL_DMA_Abort_IT+0x1a>
 8001216:	bf00      	nop
 8001218:	40020010 	.word	0x40020010
 800121c:	40020028 	.word	0x40020028
 8001220:	40020040 	.word	0x40020040
 8001224:	58025408 	.word	0x58025408

08001228 <HAL_DMA_IRQHandler>:
{
 8001228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122a:	b083      	sub	sp, #12
 800122c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800122e:	2300      	movs	r3, #0
 8001230:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001232:	4ba2      	ldr	r3, [pc, #648]	; (80014bc <HAL_DMA_IRQHandler+0x294>)
 8001234:	681d      	ldr	r5, [r3, #0]
 8001236:	4ba2      	ldr	r3, [pc, #648]	; (80014c0 <HAL_DMA_IRQHandler+0x298>)
 8001238:	fba3 3505 	umull	r3, r5, r3, r5
 800123c:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800123e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr_dma  = regs_dma->ISR;
 8001240:	683e      	ldr	r6, [r7, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8001242:	f8d7 c000 	ldr.w	ip, [r7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001246:	6803      	ldr	r3, [r0, #0]
 8001248:	499e      	ldr	r1, [pc, #632]	; (80014c4 <HAL_DMA_IRQHandler+0x29c>)
 800124a:	489f      	ldr	r0, [pc, #636]	; (80014c8 <HAL_DMA_IRQHandler+0x2a0>)
 800124c:	4283      	cmp	r3, r0
 800124e:	bf18      	it	ne
 8001250:	428b      	cmpne	r3, r1
 8001252:	bf0c      	ite	eq
 8001254:	2001      	moveq	r0, #1
 8001256:	2000      	movne	r0, #0
 8001258:	d061      	beq.n	800131e <HAL_DMA_IRQHandler+0xf6>
 800125a:	4a9c      	ldr	r2, [pc, #624]	; (80014cc <HAL_DMA_IRQHandler+0x2a4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d05e      	beq.n	800131e <HAL_DMA_IRQHandler+0xf6>
 8001260:	3218      	adds	r2, #24
 8001262:	4293      	cmp	r3, r2
 8001264:	d05b      	beq.n	800131e <HAL_DMA_IRQHandler+0xf6>
 8001266:	3218      	adds	r2, #24
 8001268:	4293      	cmp	r3, r2
 800126a:	d058      	beq.n	800131e <HAL_DMA_IRQHandler+0xf6>
 800126c:	3218      	adds	r2, #24
 800126e:	4293      	cmp	r3, r2
 8001270:	d055      	beq.n	800131e <HAL_DMA_IRQHandler+0xf6>
 8001272:	3218      	adds	r2, #24
 8001274:	4293      	cmp	r3, r2
 8001276:	d052      	beq.n	800131e <HAL_DMA_IRQHandler+0xf6>
 8001278:	3218      	adds	r2, #24
 800127a:	4293      	cmp	r3, r2
 800127c:	d04f      	beq.n	800131e <HAL_DMA_IRQHandler+0xf6>
 800127e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001282:	4293      	cmp	r3, r2
 8001284:	d04b      	beq.n	800131e <HAL_DMA_IRQHandler+0xf6>
 8001286:	3218      	adds	r2, #24
 8001288:	4293      	cmp	r3, r2
 800128a:	d048      	beq.n	800131e <HAL_DMA_IRQHandler+0xf6>
 800128c:	3218      	adds	r2, #24
 800128e:	4293      	cmp	r3, r2
 8001290:	d045      	beq.n	800131e <HAL_DMA_IRQHandler+0xf6>
 8001292:	3218      	adds	r2, #24
 8001294:	4293      	cmp	r3, r2
 8001296:	d042      	beq.n	800131e <HAL_DMA_IRQHandler+0xf6>
 8001298:	3218      	adds	r2, #24
 800129a:	4293      	cmp	r3, r2
 800129c:	d03f      	beq.n	800131e <HAL_DMA_IRQHandler+0xf6>
 800129e:	3218      	adds	r2, #24
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d03c      	beq.n	800131e <HAL_DMA_IRQHandler+0xf6>
 80012a4:	3218      	adds	r2, #24
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d039      	beq.n	800131e <HAL_DMA_IRQHandler+0xf6>
 80012aa:	3218      	adds	r2, #24
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d036      	beq.n	800131e <HAL_DMA_IRQHandler+0xf6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80012b0:	4987      	ldr	r1, [pc, #540]	; (80014d0 <HAL_DMA_IRQHandler+0x2a8>)
 80012b2:	4a88      	ldr	r2, [pc, #544]	; (80014d4 <HAL_DMA_IRQHandler+0x2ac>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	bf18      	it	ne
 80012b8:	428b      	cmpne	r3, r1
 80012ba:	d012      	beq.n	80012e2 <HAL_DMA_IRQHandler+0xba>
 80012bc:	4a86      	ldr	r2, [pc, #536]	; (80014d8 <HAL_DMA_IRQHandler+0x2b0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d00f      	beq.n	80012e2 <HAL_DMA_IRQHandler+0xba>
 80012c2:	3214      	adds	r2, #20
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d00c      	beq.n	80012e2 <HAL_DMA_IRQHandler+0xba>
 80012c8:	3214      	adds	r2, #20
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d009      	beq.n	80012e2 <HAL_DMA_IRQHandler+0xba>
 80012ce:	3214      	adds	r2, #20
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d006      	beq.n	80012e2 <HAL_DMA_IRQHandler+0xba>
 80012d4:	3214      	adds	r2, #20
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d003      	beq.n	80012e2 <HAL_DMA_IRQHandler+0xba>
 80012da:	3214      	adds	r2, #20
 80012dc:	4293      	cmp	r3, r2
 80012de:	f040 8262 	bne.w	80017a6 <HAL_DMA_IRQHandler+0x57e>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80012e2:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80012e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80012e6:	f001 011f 	and.w	r1, r1, #31
 80012ea:	2004      	movs	r0, #4
 80012ec:	4088      	lsls	r0, r1
 80012ee:	ea10 0f0c 	tst.w	r0, ip
 80012f2:	f000 82a8 	beq.w	8001846 <HAL_DMA_IRQHandler+0x61e>
 80012f6:	f012 0f04 	tst.w	r2, #4
 80012fa:	f000 82a4 	beq.w	8001846 <HAL_DMA_IRQHandler+0x61e>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80012fe:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001300:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001304:	f000 825b 	beq.w	80017be <HAL_DMA_IRQHandler+0x596>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001308:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800130c:	f040 8251 	bne.w	80017b2 <HAL_DMA_IRQHandler+0x58a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001310:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 8247 	beq.w	80017a6 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferM1HalfCpltCallback(hdma);
 8001318:	4620      	mov	r0, r4
 800131a:	4798      	blx	r3
 800131c:	e243      	b.n	80017a6 <HAL_DMA_IRQHandler+0x57e>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800131e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001320:	f002 011f 	and.w	r1, r2, #31
 8001324:	2208      	movs	r2, #8
 8001326:	408a      	lsls	r2, r1
 8001328:	4232      	tst	r2, r6
 800132a:	d041      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x188>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800132c:	bb70      	cbnz	r0, 800138c <HAL_DMA_IRQHandler+0x164>
 800132e:	4a67      	ldr	r2, [pc, #412]	; (80014cc <HAL_DMA_IRQHandler+0x2a4>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d02b      	beq.n	800138c <HAL_DMA_IRQHandler+0x164>
 8001334:	3218      	adds	r2, #24
 8001336:	4293      	cmp	r3, r2
 8001338:	d028      	beq.n	800138c <HAL_DMA_IRQHandler+0x164>
 800133a:	3218      	adds	r2, #24
 800133c:	4293      	cmp	r3, r2
 800133e:	d025      	beq.n	800138c <HAL_DMA_IRQHandler+0x164>
 8001340:	3218      	adds	r2, #24
 8001342:	4293      	cmp	r3, r2
 8001344:	d022      	beq.n	800138c <HAL_DMA_IRQHandler+0x164>
 8001346:	3218      	adds	r2, #24
 8001348:	4293      	cmp	r3, r2
 800134a:	d01f      	beq.n	800138c <HAL_DMA_IRQHandler+0x164>
 800134c:	3218      	adds	r2, #24
 800134e:	4293      	cmp	r3, r2
 8001350:	d01c      	beq.n	800138c <HAL_DMA_IRQHandler+0x164>
 8001352:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001356:	4293      	cmp	r3, r2
 8001358:	d018      	beq.n	800138c <HAL_DMA_IRQHandler+0x164>
 800135a:	3218      	adds	r2, #24
 800135c:	4293      	cmp	r3, r2
 800135e:	d015      	beq.n	800138c <HAL_DMA_IRQHandler+0x164>
 8001360:	3218      	adds	r2, #24
 8001362:	4293      	cmp	r3, r2
 8001364:	d012      	beq.n	800138c <HAL_DMA_IRQHandler+0x164>
 8001366:	3218      	adds	r2, #24
 8001368:	4293      	cmp	r3, r2
 800136a:	d00f      	beq.n	800138c <HAL_DMA_IRQHandler+0x164>
 800136c:	3218      	adds	r2, #24
 800136e:	4293      	cmp	r3, r2
 8001370:	d00c      	beq.n	800138c <HAL_DMA_IRQHandler+0x164>
 8001372:	3218      	adds	r2, #24
 8001374:	4293      	cmp	r3, r2
 8001376:	d009      	beq.n	800138c <HAL_DMA_IRQHandler+0x164>
 8001378:	3218      	adds	r2, #24
 800137a:	4293      	cmp	r3, r2
 800137c:	d006      	beq.n	800138c <HAL_DMA_IRQHandler+0x164>
 800137e:	3218      	adds	r2, #24
 8001380:	4293      	cmp	r3, r2
 8001382:	d003      	beq.n	800138c <HAL_DMA_IRQHandler+0x164>
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800138a:	e002      	b.n	8001392 <HAL_DMA_IRQHandler+0x16a>
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8001392:	b16a      	cbz	r2, 80013b0 <HAL_DMA_IRQHandler+0x188>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	f022 0204 	bic.w	r2, r2, #4
 800139a:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800139c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800139e:	f003 021f 	and.w	r2, r3, #31
 80013a2:	2308      	movs	r3, #8
 80013a4:	4093      	lsls	r3, r2
 80013a6:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80013b0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80013b2:	f002 021f 	and.w	r2, r2, #31
 80013b6:	fa26 f302 	lsr.w	r3, r6, r2
 80013ba:	f013 0f01 	tst.w	r3, #1
 80013be:	d037      	beq.n	8001430 <HAL_DMA_IRQHandler+0x208>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80013c0:	6823      	ldr	r3, [r4, #0]
 80013c2:	4840      	ldr	r0, [pc, #256]	; (80014c4 <HAL_DMA_IRQHandler+0x29c>)
 80013c4:	4940      	ldr	r1, [pc, #256]	; (80014c8 <HAL_DMA_IRQHandler+0x2a0>)
 80013c6:	428b      	cmp	r3, r1
 80013c8:	bf18      	it	ne
 80013ca:	4283      	cmpne	r3, r0
 80013cc:	d02c      	beq.n	8001428 <HAL_DMA_IRQHandler+0x200>
 80013ce:	3118      	adds	r1, #24
 80013d0:	428b      	cmp	r3, r1
 80013d2:	d029      	beq.n	8001428 <HAL_DMA_IRQHandler+0x200>
 80013d4:	3118      	adds	r1, #24
 80013d6:	428b      	cmp	r3, r1
 80013d8:	d026      	beq.n	8001428 <HAL_DMA_IRQHandler+0x200>
 80013da:	3118      	adds	r1, #24
 80013dc:	428b      	cmp	r3, r1
 80013de:	d023      	beq.n	8001428 <HAL_DMA_IRQHandler+0x200>
 80013e0:	3118      	adds	r1, #24
 80013e2:	428b      	cmp	r3, r1
 80013e4:	d020      	beq.n	8001428 <HAL_DMA_IRQHandler+0x200>
 80013e6:	3118      	adds	r1, #24
 80013e8:	428b      	cmp	r3, r1
 80013ea:	d01d      	beq.n	8001428 <HAL_DMA_IRQHandler+0x200>
 80013ec:	3118      	adds	r1, #24
 80013ee:	428b      	cmp	r3, r1
 80013f0:	d01a      	beq.n	8001428 <HAL_DMA_IRQHandler+0x200>
 80013f2:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80013f6:	428b      	cmp	r3, r1
 80013f8:	d016      	beq.n	8001428 <HAL_DMA_IRQHandler+0x200>
 80013fa:	3118      	adds	r1, #24
 80013fc:	428b      	cmp	r3, r1
 80013fe:	d013      	beq.n	8001428 <HAL_DMA_IRQHandler+0x200>
 8001400:	3118      	adds	r1, #24
 8001402:	428b      	cmp	r3, r1
 8001404:	d010      	beq.n	8001428 <HAL_DMA_IRQHandler+0x200>
 8001406:	3118      	adds	r1, #24
 8001408:	428b      	cmp	r3, r1
 800140a:	d00d      	beq.n	8001428 <HAL_DMA_IRQHandler+0x200>
 800140c:	3118      	adds	r1, #24
 800140e:	428b      	cmp	r3, r1
 8001410:	d00a      	beq.n	8001428 <HAL_DMA_IRQHandler+0x200>
 8001412:	3118      	adds	r1, #24
 8001414:	428b      	cmp	r3, r1
 8001416:	d007      	beq.n	8001428 <HAL_DMA_IRQHandler+0x200>
 8001418:	3118      	adds	r1, #24
 800141a:	428b      	cmp	r3, r1
 800141c:	d004      	beq.n	8001428 <HAL_DMA_IRQHandler+0x200>
 800141e:	3118      	adds	r1, #24
 8001420:	428b      	cmp	r3, r1
 8001422:	d001      	beq.n	8001428 <HAL_DMA_IRQHandler+0x200>
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	e003      	b.n	8001430 <HAL_DMA_IRQHandler+0x208>
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800142e:	d13b      	bne.n	80014a8 <HAL_DMA_IRQHandler+0x280>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001430:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001432:	f003 031f 	and.w	r3, r3, #31
 8001436:	2204      	movs	r2, #4
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	4233      	tst	r3, r6
 800143e:	d051      	beq.n	80014e4 <HAL_DMA_IRQHandler+0x2bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001440:	6822      	ldr	r2, [r4, #0]
 8001442:	4820      	ldr	r0, [pc, #128]	; (80014c4 <HAL_DMA_IRQHandler+0x29c>)
 8001444:	4920      	ldr	r1, [pc, #128]	; (80014c8 <HAL_DMA_IRQHandler+0x2a0>)
 8001446:	428a      	cmp	r2, r1
 8001448:	bf18      	it	ne
 800144a:	4282      	cmpne	r2, r0
 800144c:	d046      	beq.n	80014dc <HAL_DMA_IRQHandler+0x2b4>
 800144e:	3118      	adds	r1, #24
 8001450:	428a      	cmp	r2, r1
 8001452:	d043      	beq.n	80014dc <HAL_DMA_IRQHandler+0x2b4>
 8001454:	3118      	adds	r1, #24
 8001456:	428a      	cmp	r2, r1
 8001458:	d040      	beq.n	80014dc <HAL_DMA_IRQHandler+0x2b4>
 800145a:	3118      	adds	r1, #24
 800145c:	428a      	cmp	r2, r1
 800145e:	d03d      	beq.n	80014dc <HAL_DMA_IRQHandler+0x2b4>
 8001460:	3118      	adds	r1, #24
 8001462:	428a      	cmp	r2, r1
 8001464:	d03a      	beq.n	80014dc <HAL_DMA_IRQHandler+0x2b4>
 8001466:	3118      	adds	r1, #24
 8001468:	428a      	cmp	r2, r1
 800146a:	d037      	beq.n	80014dc <HAL_DMA_IRQHandler+0x2b4>
 800146c:	3118      	adds	r1, #24
 800146e:	428a      	cmp	r2, r1
 8001470:	d034      	beq.n	80014dc <HAL_DMA_IRQHandler+0x2b4>
 8001472:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8001476:	428a      	cmp	r2, r1
 8001478:	d030      	beq.n	80014dc <HAL_DMA_IRQHandler+0x2b4>
 800147a:	3118      	adds	r1, #24
 800147c:	428a      	cmp	r2, r1
 800147e:	d02d      	beq.n	80014dc <HAL_DMA_IRQHandler+0x2b4>
 8001480:	3118      	adds	r1, #24
 8001482:	428a      	cmp	r2, r1
 8001484:	d02a      	beq.n	80014dc <HAL_DMA_IRQHandler+0x2b4>
 8001486:	3118      	adds	r1, #24
 8001488:	428a      	cmp	r2, r1
 800148a:	d027      	beq.n	80014dc <HAL_DMA_IRQHandler+0x2b4>
 800148c:	3118      	adds	r1, #24
 800148e:	428a      	cmp	r2, r1
 8001490:	d024      	beq.n	80014dc <HAL_DMA_IRQHandler+0x2b4>
 8001492:	3118      	adds	r1, #24
 8001494:	428a      	cmp	r2, r1
 8001496:	d021      	beq.n	80014dc <HAL_DMA_IRQHandler+0x2b4>
 8001498:	3118      	adds	r1, #24
 800149a:	428a      	cmp	r2, r1
 800149c:	d01e      	beq.n	80014dc <HAL_DMA_IRQHandler+0x2b4>
 800149e:	3118      	adds	r1, #24
 80014a0:	428a      	cmp	r2, r1
 80014a2:	d01b      	beq.n	80014dc <HAL_DMA_IRQHandler+0x2b4>
 80014a4:	6813      	ldr	r3, [r2, #0]
 80014a6:	e01d      	b.n	80014e4 <HAL_DMA_IRQHandler+0x2bc>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80014a8:	2301      	movs	r3, #1
 80014aa:	fa03 f202 	lsl.w	r2, r3, r2
 80014ae:	60ba      	str	r2, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80014b2:	f043 0302 	orr.w	r3, r3, #2
 80014b6:	6563      	str	r3, [r4, #84]	; 0x54
 80014b8:	e7ba      	b.n	8001430 <HAL_DMA_IRQHandler+0x208>
 80014ba:	bf00      	nop
 80014bc:	20000280 	.word	0x20000280
 80014c0:	1b4e81b5 	.word	0x1b4e81b5
 80014c4:	40020010 	.word	0x40020010
 80014c8:	40020028 	.word	0x40020028
 80014cc:	40020040 	.word	0x40020040
 80014d0:	58025408 	.word	0x58025408
 80014d4:	5802541c 	.word	0x5802541c
 80014d8:	58025430 	.word	0x58025430
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80014dc:	6812      	ldr	r2, [r2, #0]
 80014de:	f012 0f02 	tst.w	r2, #2
 80014e2:	d13d      	bne.n	8001560 <HAL_DMA_IRQHandler+0x338>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80014e4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80014e6:	f003 031f 	and.w	r3, r3, #31
 80014ea:	2210      	movs	r2, #16
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	4233      	tst	r3, r6
 80014f2:	d05f      	beq.n	80015b4 <HAL_DMA_IRQHandler+0x38c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80014f4:	6822      	ldr	r2, [r4, #0]
 80014f6:	489b      	ldr	r0, [pc, #620]	; (8001764 <HAL_DMA_IRQHandler+0x53c>)
 80014f8:	499b      	ldr	r1, [pc, #620]	; (8001768 <HAL_DMA_IRQHandler+0x540>)
 80014fa:	428a      	cmp	r2, r1
 80014fc:	bf18      	it	ne
 80014fe:	4282      	cmpne	r2, r0
 8001500:	d034      	beq.n	800156c <HAL_DMA_IRQHandler+0x344>
 8001502:	3118      	adds	r1, #24
 8001504:	428a      	cmp	r2, r1
 8001506:	d031      	beq.n	800156c <HAL_DMA_IRQHandler+0x344>
 8001508:	3118      	adds	r1, #24
 800150a:	428a      	cmp	r2, r1
 800150c:	d02e      	beq.n	800156c <HAL_DMA_IRQHandler+0x344>
 800150e:	3118      	adds	r1, #24
 8001510:	428a      	cmp	r2, r1
 8001512:	d02b      	beq.n	800156c <HAL_DMA_IRQHandler+0x344>
 8001514:	3118      	adds	r1, #24
 8001516:	428a      	cmp	r2, r1
 8001518:	d028      	beq.n	800156c <HAL_DMA_IRQHandler+0x344>
 800151a:	3118      	adds	r1, #24
 800151c:	428a      	cmp	r2, r1
 800151e:	d025      	beq.n	800156c <HAL_DMA_IRQHandler+0x344>
 8001520:	3118      	adds	r1, #24
 8001522:	428a      	cmp	r2, r1
 8001524:	d022      	beq.n	800156c <HAL_DMA_IRQHandler+0x344>
 8001526:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800152a:	428a      	cmp	r2, r1
 800152c:	d01e      	beq.n	800156c <HAL_DMA_IRQHandler+0x344>
 800152e:	3118      	adds	r1, #24
 8001530:	428a      	cmp	r2, r1
 8001532:	d01b      	beq.n	800156c <HAL_DMA_IRQHandler+0x344>
 8001534:	3118      	adds	r1, #24
 8001536:	428a      	cmp	r2, r1
 8001538:	d018      	beq.n	800156c <HAL_DMA_IRQHandler+0x344>
 800153a:	3118      	adds	r1, #24
 800153c:	428a      	cmp	r2, r1
 800153e:	d015      	beq.n	800156c <HAL_DMA_IRQHandler+0x344>
 8001540:	3118      	adds	r1, #24
 8001542:	428a      	cmp	r2, r1
 8001544:	d012      	beq.n	800156c <HAL_DMA_IRQHandler+0x344>
 8001546:	3118      	adds	r1, #24
 8001548:	428a      	cmp	r2, r1
 800154a:	d00f      	beq.n	800156c <HAL_DMA_IRQHandler+0x344>
 800154c:	3118      	adds	r1, #24
 800154e:	428a      	cmp	r2, r1
 8001550:	d00c      	beq.n	800156c <HAL_DMA_IRQHandler+0x344>
 8001552:	3118      	adds	r1, #24
 8001554:	428a      	cmp	r2, r1
 8001556:	d009      	beq.n	800156c <HAL_DMA_IRQHandler+0x344>
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800155e:	e008      	b.n	8001572 <HAL_DMA_IRQHandler+0x34a>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001560:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001562:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	6563      	str	r3, [r4, #84]	; 0x54
 800156a:	e7bb      	b.n	80014e4 <HAL_DMA_IRQHandler+0x2bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8001572:	b1fa      	cbz	r2, 80015b4 <HAL_DMA_IRQHandler+0x38c>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001574:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001576:	6823      	ldr	r3, [r4, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800157e:	d00d      	beq.n	800159c <HAL_DMA_IRQHandler+0x374>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001586:	d104      	bne.n	8001592 <HAL_DMA_IRQHandler+0x36a>
            if(hdma->XferHalfCpltCallback != NULL)
 8001588:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800158a:	b19b      	cbz	r3, 80015b4 <HAL_DMA_IRQHandler+0x38c>
              hdma->XferHalfCpltCallback(hdma);
 800158c:	4620      	mov	r0, r4
 800158e:	4798      	blx	r3
 8001590:	e010      	b.n	80015b4 <HAL_DMA_IRQHandler+0x38c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8001592:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001594:	b173      	cbz	r3, 80015b4 <HAL_DMA_IRQHandler+0x38c>
              hdma->XferM1HalfCpltCallback(hdma);
 8001596:	4620      	mov	r0, r4
 8001598:	4798      	blx	r3
 800159a:	e00b      	b.n	80015b4 <HAL_DMA_IRQHandler+0x38c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	f412 7f80 	tst.w	r2, #256	; 0x100
 80015a2:	d103      	bne.n	80015ac <HAL_DMA_IRQHandler+0x384>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	f022 0208 	bic.w	r2, r2, #8
 80015aa:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80015ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015ae:	b10b      	cbz	r3, 80015b4 <HAL_DMA_IRQHandler+0x38c>
            hdma->XferHalfCpltCallback(hdma);
 80015b0:	4620      	mov	r0, r4
 80015b2:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80015b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	2220      	movs	r2, #32
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	4233      	tst	r3, r6
 80015c2:	f000 808e 	beq.w	80016e2 <HAL_DMA_IRQHandler+0x4ba>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80015c6:	6822      	ldr	r2, [r4, #0]
 80015c8:	4866      	ldr	r0, [pc, #408]	; (8001764 <HAL_DMA_IRQHandler+0x53c>)
 80015ca:	4967      	ldr	r1, [pc, #412]	; (8001768 <HAL_DMA_IRQHandler+0x540>)
 80015cc:	428a      	cmp	r2, r1
 80015ce:	bf18      	it	ne
 80015d0:	4282      	cmpne	r2, r0
 80015d2:	d02e      	beq.n	8001632 <HAL_DMA_IRQHandler+0x40a>
 80015d4:	3118      	adds	r1, #24
 80015d6:	428a      	cmp	r2, r1
 80015d8:	d02b      	beq.n	8001632 <HAL_DMA_IRQHandler+0x40a>
 80015da:	3118      	adds	r1, #24
 80015dc:	428a      	cmp	r2, r1
 80015de:	d028      	beq.n	8001632 <HAL_DMA_IRQHandler+0x40a>
 80015e0:	3118      	adds	r1, #24
 80015e2:	428a      	cmp	r2, r1
 80015e4:	d025      	beq.n	8001632 <HAL_DMA_IRQHandler+0x40a>
 80015e6:	3118      	adds	r1, #24
 80015e8:	428a      	cmp	r2, r1
 80015ea:	d022      	beq.n	8001632 <HAL_DMA_IRQHandler+0x40a>
 80015ec:	3118      	adds	r1, #24
 80015ee:	428a      	cmp	r2, r1
 80015f0:	d01f      	beq.n	8001632 <HAL_DMA_IRQHandler+0x40a>
 80015f2:	3118      	adds	r1, #24
 80015f4:	428a      	cmp	r2, r1
 80015f6:	d01c      	beq.n	8001632 <HAL_DMA_IRQHandler+0x40a>
 80015f8:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80015fc:	428a      	cmp	r2, r1
 80015fe:	d018      	beq.n	8001632 <HAL_DMA_IRQHandler+0x40a>
 8001600:	3118      	adds	r1, #24
 8001602:	428a      	cmp	r2, r1
 8001604:	d015      	beq.n	8001632 <HAL_DMA_IRQHandler+0x40a>
 8001606:	3118      	adds	r1, #24
 8001608:	428a      	cmp	r2, r1
 800160a:	d012      	beq.n	8001632 <HAL_DMA_IRQHandler+0x40a>
 800160c:	3118      	adds	r1, #24
 800160e:	428a      	cmp	r2, r1
 8001610:	d00f      	beq.n	8001632 <HAL_DMA_IRQHandler+0x40a>
 8001612:	3118      	adds	r1, #24
 8001614:	428a      	cmp	r2, r1
 8001616:	d00c      	beq.n	8001632 <HAL_DMA_IRQHandler+0x40a>
 8001618:	3118      	adds	r1, #24
 800161a:	428a      	cmp	r2, r1
 800161c:	d009      	beq.n	8001632 <HAL_DMA_IRQHandler+0x40a>
 800161e:	3118      	adds	r1, #24
 8001620:	428a      	cmp	r2, r1
 8001622:	d006      	beq.n	8001632 <HAL_DMA_IRQHandler+0x40a>
 8001624:	3118      	adds	r1, #24
 8001626:	428a      	cmp	r2, r1
 8001628:	d003      	beq.n	8001632 <HAL_DMA_IRQHandler+0x40a>
 800162a:	6812      	ldr	r2, [r2, #0]
 800162c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8001630:	e002      	b.n	8001638 <HAL_DMA_IRQHandler+0x410>
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001638:	2a00      	cmp	r2, #0
 800163a:	d052      	beq.n	80016e2 <HAL_DMA_IRQHandler+0x4ba>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800163c:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800163e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b04      	cmp	r3, #4
 8001646:	d00e      	beq.n	8001666 <HAL_DMA_IRQHandler+0x43e>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001648:	6823      	ldr	r3, [r4, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001650:	d035      	beq.n	80016be <HAL_DMA_IRQHandler+0x496>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001658:	d12c      	bne.n	80016b4 <HAL_DMA_IRQHandler+0x48c>
            if(hdma->XferM1CpltCallback != NULL)
 800165a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800165c:	2b00      	cmp	r3, #0
 800165e:	d040      	beq.n	80016e2 <HAL_DMA_IRQHandler+0x4ba>
              hdma->XferM1CpltCallback(hdma);
 8001660:	4620      	mov	r0, r4
 8001662:	4798      	blx	r3
 8001664:	e03d      	b.n	80016e2 <HAL_DMA_IRQHandler+0x4ba>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001666:	6822      	ldr	r2, [r4, #0]
 8001668:	6813      	ldr	r3, [r2, #0]
 800166a:	f023 0316 	bic.w	r3, r3, #22
 800166e:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001670:	6822      	ldr	r2, [r4, #0]
 8001672:	6953      	ldr	r3, [r2, #20]
 8001674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001678:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800167a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800167c:	b1b3      	cbz	r3, 80016ac <HAL_DMA_IRQHandler+0x484>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800167e:	6822      	ldr	r2, [r4, #0]
 8001680:	6813      	ldr	r3, [r2, #0]
 8001682:	f023 0308 	bic.w	r3, r3, #8
 8001686:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001688:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800168a:	f003 021f 	and.w	r2, r3, #31
 800168e:	233f      	movs	r3, #63	; 0x3f
 8001690:	4093      	lsls	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]
          __HAL_UNLOCK(hdma);
 8001694:	2300      	movs	r3, #0
 8001696:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800169a:	2301      	movs	r3, #1
 800169c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 80016a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d07f      	beq.n	80017a6 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferAbortCallback(hdma);
 80016a6:	4620      	mov	r0, r4
 80016a8:	4798      	blx	r3
 80016aa:	e07c      	b.n	80017a6 <HAL_DMA_IRQHandler+0x57e>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1e5      	bne.n	800167e <HAL_DMA_IRQHandler+0x456>
 80016b2:	e7e9      	b.n	8001688 <HAL_DMA_IRQHandler+0x460>
            if(hdma->XferCpltCallback != NULL)
 80016b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80016b6:	b1a3      	cbz	r3, 80016e2 <HAL_DMA_IRQHandler+0x4ba>
              hdma->XferCpltCallback(hdma);
 80016b8:	4620      	mov	r0, r4
 80016ba:	4798      	blx	r3
 80016bc:	e011      	b.n	80016e2 <HAL_DMA_IRQHandler+0x4ba>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	f412 7f80 	tst.w	r2, #256	; 0x100
 80016c4:	d109      	bne.n	80016da <HAL_DMA_IRQHandler+0x4b2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	f022 0210 	bic.w	r2, r2, #16
 80016cc:	601a      	str	r2, [r3, #0]
            __HAL_UNLOCK(hdma);
 80016ce:	2300      	movs	r3, #0
 80016d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 80016d4:	2301      	movs	r3, #1
 80016d6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferCpltCallback != NULL)
 80016da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80016dc:	b10b      	cbz	r3, 80016e2 <HAL_DMA_IRQHandler+0x4ba>
            hdma->XferCpltCallback(hdma);
 80016de:	4620      	mov	r0, r4
 80016e0:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d05e      	beq.n	80017a6 <HAL_DMA_IRQHandler+0x57e>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80016e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80016ea:	f013 0f01 	tst.w	r3, #1
 80016ee:	d056      	beq.n	800179e <HAL_DMA_IRQHandler+0x576>
        hdma->State = HAL_DMA_STATE_ABORT;
 80016f0:	2304      	movs	r3, #4
 80016f2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 80016f6:	6823      	ldr	r3, [r4, #0]
 80016f8:	491a      	ldr	r1, [pc, #104]	; (8001764 <HAL_DMA_IRQHandler+0x53c>)
 80016fa:	4a1b      	ldr	r2, [pc, #108]	; (8001768 <HAL_DMA_IRQHandler+0x540>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	bf18      	it	ne
 8001700:	428b      	cmpne	r3, r1
 8001702:	d033      	beq.n	800176c <HAL_DMA_IRQHandler+0x544>
 8001704:	3218      	adds	r2, #24
 8001706:	4293      	cmp	r3, r2
 8001708:	d030      	beq.n	800176c <HAL_DMA_IRQHandler+0x544>
 800170a:	3218      	adds	r2, #24
 800170c:	4293      	cmp	r3, r2
 800170e:	d02d      	beq.n	800176c <HAL_DMA_IRQHandler+0x544>
 8001710:	3218      	adds	r2, #24
 8001712:	4293      	cmp	r3, r2
 8001714:	d02a      	beq.n	800176c <HAL_DMA_IRQHandler+0x544>
 8001716:	3218      	adds	r2, #24
 8001718:	4293      	cmp	r3, r2
 800171a:	d027      	beq.n	800176c <HAL_DMA_IRQHandler+0x544>
 800171c:	3218      	adds	r2, #24
 800171e:	4293      	cmp	r3, r2
 8001720:	d024      	beq.n	800176c <HAL_DMA_IRQHandler+0x544>
 8001722:	3218      	adds	r2, #24
 8001724:	4293      	cmp	r3, r2
 8001726:	d021      	beq.n	800176c <HAL_DMA_IRQHandler+0x544>
 8001728:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800172c:	4293      	cmp	r3, r2
 800172e:	d01d      	beq.n	800176c <HAL_DMA_IRQHandler+0x544>
 8001730:	3218      	adds	r2, #24
 8001732:	4293      	cmp	r3, r2
 8001734:	d01a      	beq.n	800176c <HAL_DMA_IRQHandler+0x544>
 8001736:	3218      	adds	r2, #24
 8001738:	4293      	cmp	r3, r2
 800173a:	d017      	beq.n	800176c <HAL_DMA_IRQHandler+0x544>
 800173c:	3218      	adds	r2, #24
 800173e:	4293      	cmp	r3, r2
 8001740:	d014      	beq.n	800176c <HAL_DMA_IRQHandler+0x544>
 8001742:	3218      	adds	r2, #24
 8001744:	4293      	cmp	r3, r2
 8001746:	d011      	beq.n	800176c <HAL_DMA_IRQHandler+0x544>
 8001748:	3218      	adds	r2, #24
 800174a:	4293      	cmp	r3, r2
 800174c:	d00e      	beq.n	800176c <HAL_DMA_IRQHandler+0x544>
 800174e:	3218      	adds	r2, #24
 8001750:	4293      	cmp	r3, r2
 8001752:	d00b      	beq.n	800176c <HAL_DMA_IRQHandler+0x544>
 8001754:	3218      	adds	r2, #24
 8001756:	4293      	cmp	r3, r2
 8001758:	d008      	beq.n	800176c <HAL_DMA_IRQHandler+0x544>
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	f022 0201 	bic.w	r2, r2, #1
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	e007      	b.n	8001774 <HAL_DMA_IRQHandler+0x54c>
 8001764:	40020010 	.word	0x40020010
 8001768:	40020028 	.word	0x40020028
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	f022 0201 	bic.w	r2, r2, #1
 8001772:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 8001774:	9b01      	ldr	r3, [sp, #4]
 8001776:	3301      	adds	r3, #1
 8001778:	9301      	str	r3, [sp, #4]
 800177a:	42ab      	cmp	r3, r5
 800177c:	d804      	bhi.n	8001788 <HAL_DMA_IRQHandler+0x560>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800177e:	6823      	ldr	r3, [r4, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f013 0f01 	tst.w	r3, #1
 8001786:	d1f5      	bne.n	8001774 <HAL_DMA_IRQHandler+0x54c>
        __HAL_UNLOCK(hdma);
 8001788:	2300      	movs	r3, #0
 800178a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800178e:	6823      	ldr	r3, [r4, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f013 0f01 	tst.w	r3, #1
 8001796:	d008      	beq.n	80017aa <HAL_DMA_IRQHandler+0x582>
          hdma->State = HAL_DMA_STATE_ERROR;
 8001798:	2303      	movs	r3, #3
 800179a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 800179e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80017a0:	b10b      	cbz	r3, 80017a6 <HAL_DMA_IRQHandler+0x57e>
        hdma->XferErrorCallback(hdma);
 80017a2:	4620      	mov	r0, r4
 80017a4:	4798      	blx	r3
}
 80017a6:	b003      	add	sp, #12
 80017a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hdma->State = HAL_DMA_STATE_READY;
 80017aa:	2301      	movs	r3, #1
 80017ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 80017b0:	e7f5      	b.n	800179e <HAL_DMA_IRQHandler+0x576>
          if(hdma->XferHalfCpltCallback != NULL)
 80017b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f6      	beq.n	80017a6 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferHalfCpltCallback(hdma);
 80017b8:	4620      	mov	r0, r4
 80017ba:	4798      	blx	r3
 80017bc:	e7f3      	b.n	80017a6 <HAL_DMA_IRQHandler+0x57e>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80017be:	f012 0f20 	tst.w	r2, #32
 80017c2:	d135      	bne.n	8001830 <HAL_DMA_IRQHandler+0x608>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017c4:	6823      	ldr	r3, [r4, #0]
 80017c6:	4964      	ldr	r1, [pc, #400]	; (8001958 <HAL_DMA_IRQHandler+0x730>)
 80017c8:	4a64      	ldr	r2, [pc, #400]	; (800195c <HAL_DMA_IRQHandler+0x734>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	bf18      	it	ne
 80017ce:	428b      	cmpne	r3, r1
 80017d0:	d02a      	beq.n	8001828 <HAL_DMA_IRQHandler+0x600>
 80017d2:	3218      	adds	r2, #24
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d027      	beq.n	8001828 <HAL_DMA_IRQHandler+0x600>
 80017d8:	3218      	adds	r2, #24
 80017da:	4293      	cmp	r3, r2
 80017dc:	d024      	beq.n	8001828 <HAL_DMA_IRQHandler+0x600>
 80017de:	3218      	adds	r2, #24
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d021      	beq.n	8001828 <HAL_DMA_IRQHandler+0x600>
 80017e4:	3218      	adds	r2, #24
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d01e      	beq.n	8001828 <HAL_DMA_IRQHandler+0x600>
 80017ea:	3218      	adds	r2, #24
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d01b      	beq.n	8001828 <HAL_DMA_IRQHandler+0x600>
 80017f0:	3218      	adds	r2, #24
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d018      	beq.n	8001828 <HAL_DMA_IRQHandler+0x600>
 80017f6:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d014      	beq.n	8001828 <HAL_DMA_IRQHandler+0x600>
 80017fe:	3218      	adds	r2, #24
 8001800:	4293      	cmp	r3, r2
 8001802:	d011      	beq.n	8001828 <HAL_DMA_IRQHandler+0x600>
 8001804:	3218      	adds	r2, #24
 8001806:	4293      	cmp	r3, r2
 8001808:	d00e      	beq.n	8001828 <HAL_DMA_IRQHandler+0x600>
 800180a:	3218      	adds	r2, #24
 800180c:	4293      	cmp	r3, r2
 800180e:	d00b      	beq.n	8001828 <HAL_DMA_IRQHandler+0x600>
 8001810:	3218      	adds	r2, #24
 8001812:	4293      	cmp	r3, r2
 8001814:	d008      	beq.n	8001828 <HAL_DMA_IRQHandler+0x600>
 8001816:	3218      	adds	r2, #24
 8001818:	4293      	cmp	r3, r2
 800181a:	d005      	beq.n	8001828 <HAL_DMA_IRQHandler+0x600>
 800181c:	3218      	adds	r2, #24
 800181e:	4293      	cmp	r3, r2
 8001820:	d002      	beq.n	8001828 <HAL_DMA_IRQHandler+0x600>
 8001822:	3218      	adds	r2, #24
 8001824:	4293      	cmp	r3, r2
 8001826:	d109      	bne.n	800183c <HAL_DMA_IRQHandler+0x614>
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	f022 0208 	bic.w	r2, r2, #8
 800182e:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8001830:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0b7      	beq.n	80017a6 <HAL_DMA_IRQHandler+0x57e>
          hdma->XferHalfCpltCallback(hdma);
 8001836:	4620      	mov	r0, r4
 8001838:	4798      	blx	r3
 800183a:	e7b4      	b.n	80017a6 <HAL_DMA_IRQHandler+0x57e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	f022 0204 	bic.w	r2, r2, #4
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	e7f4      	b.n	8001830 <HAL_DMA_IRQHandler+0x608>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8001846:	2002      	movs	r0, #2
 8001848:	4088      	lsls	r0, r1
 800184a:	ea10 0f0c 	tst.w	r0, ip
 800184e:	d060      	beq.n	8001912 <HAL_DMA_IRQHandler+0x6ea>
 8001850:	f012 0f02 	tst.w	r2, #2
 8001854:	d05d      	beq.n	8001912 <HAL_DMA_IRQHandler+0x6ea>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8001856:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001858:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800185c:	d00e      	beq.n	800187c <HAL_DMA_IRQHandler+0x654>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800185e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001862:	d105      	bne.n	8001870 <HAL_DMA_IRQHandler+0x648>
          if(hdma->XferM1CpltCallback != NULL)
 8001864:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001866:	2b00      	cmp	r3, #0
 8001868:	d09d      	beq.n	80017a6 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferM1CpltCallback(hdma);
 800186a:	4620      	mov	r0, r4
 800186c:	4798      	blx	r3
 800186e:	e79a      	b.n	80017a6 <HAL_DMA_IRQHandler+0x57e>
          if(hdma->XferCpltCallback != NULL)
 8001870:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001872:	2b00      	cmp	r3, #0
 8001874:	d097      	beq.n	80017a6 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferCpltCallback(hdma);
 8001876:	4620      	mov	r0, r4
 8001878:	4798      	blx	r3
 800187a:	e794      	b.n	80017a6 <HAL_DMA_IRQHandler+0x57e>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800187c:	f012 0f20 	tst.w	r2, #32
 8001880:	d13b      	bne.n	80018fa <HAL_DMA_IRQHandler+0x6d2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001882:	6823      	ldr	r3, [r4, #0]
 8001884:	4934      	ldr	r1, [pc, #208]	; (8001958 <HAL_DMA_IRQHandler+0x730>)
 8001886:	4a35      	ldr	r2, [pc, #212]	; (800195c <HAL_DMA_IRQHandler+0x734>)
 8001888:	4293      	cmp	r3, r2
 800188a:	bf18      	it	ne
 800188c:	428b      	cmpne	r3, r1
 800188e:	d02a      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x6be>
 8001890:	3218      	adds	r2, #24
 8001892:	4293      	cmp	r3, r2
 8001894:	d027      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x6be>
 8001896:	3218      	adds	r2, #24
 8001898:	4293      	cmp	r3, r2
 800189a:	d024      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x6be>
 800189c:	3218      	adds	r2, #24
 800189e:	4293      	cmp	r3, r2
 80018a0:	d021      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x6be>
 80018a2:	3218      	adds	r2, #24
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d01e      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x6be>
 80018a8:	3218      	adds	r2, #24
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d01b      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x6be>
 80018ae:	3218      	adds	r2, #24
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d018      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x6be>
 80018b4:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d014      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x6be>
 80018bc:	3218      	adds	r2, #24
 80018be:	4293      	cmp	r3, r2
 80018c0:	d011      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x6be>
 80018c2:	3218      	adds	r2, #24
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d00e      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x6be>
 80018c8:	3218      	adds	r2, #24
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d00b      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x6be>
 80018ce:	3218      	adds	r2, #24
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d008      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x6be>
 80018d4:	3218      	adds	r2, #24
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d005      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x6be>
 80018da:	3218      	adds	r2, #24
 80018dc:	4293      	cmp	r3, r2
 80018de:	d002      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x6be>
 80018e0:	3218      	adds	r2, #24
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d110      	bne.n	8001908 <HAL_DMA_IRQHandler+0x6e0>
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	f022 0214 	bic.w	r2, r2, #20
 80018ec:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 80018ee:	2300      	movs	r3, #0
 80018f0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80018f4:	2301      	movs	r3, #1
 80018f6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80018fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f43f af52 	beq.w	80017a6 <HAL_DMA_IRQHandler+0x57e>
          hdma->XferCpltCallback(hdma);
 8001902:	4620      	mov	r0, r4
 8001904:	4798      	blx	r3
 8001906:	e74e      	b.n	80017a6 <HAL_DMA_IRQHandler+0x57e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	f022 020a 	bic.w	r2, r2, #10
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	e7ed      	b.n	80018ee <HAL_DMA_IRQHandler+0x6c6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8001912:	2008      	movs	r0, #8
 8001914:	fa00 f101 	lsl.w	r1, r0, r1
 8001918:	ea11 0f0c 	tst.w	r1, ip
 800191c:	f43f af43 	beq.w	80017a6 <HAL_DMA_IRQHandler+0x57e>
 8001920:	f012 0f08 	tst.w	r2, #8
 8001924:	f43f af3f 	beq.w	80017a6 <HAL_DMA_IRQHandler+0x57e>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	f022 020e 	bic.w	r2, r2, #14
 800192e:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001930:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001932:	f003 031f 	and.w	r3, r3, #31
 8001936:	2201      	movs	r2, #1
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	607b      	str	r3, [r7, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800193e:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8001940:	2300      	movs	r3, #0
 8001942:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001946:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800194a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800194c:	2b00      	cmp	r3, #0
 800194e:	f43f af2a 	beq.w	80017a6 <HAL_DMA_IRQHandler+0x57e>
        hdma->XferErrorCallback(hdma);
 8001952:	4620      	mov	r0, r4
 8001954:	4798      	blx	r3
 8001956:	e726      	b.n	80017a6 <HAL_DMA_IRQHandler+0x57e>
 8001958:	40020010 	.word	0x40020010
 800195c:	40020028 	.word	0x40020028

08001960 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8001960:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8001962:	4770      	bx	lr

08001964 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001966:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8001968:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800196a:	e03a      	b.n	80019e2 <HAL_GPIO_Init+0x7e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800196c:	2409      	movs	r4, #9
 800196e:	e000      	b.n	8001972 <HAL_GPIO_Init+0xe>
 8001970:	2400      	movs	r4, #0
 8001972:	40b4      	lsls	r4, r6
 8001974:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001976:	3502      	adds	r5, #2
 8001978:	4e6e      	ldr	r6, [pc, #440]	; (8001b34 <HAL_GPIO_Init+0x1d0>)
 800197a:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800197e:	4c6e      	ldr	r4, [pc, #440]	; (8001b38 <HAL_GPIO_Init+0x1d4>)
 8001980:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001982:	43d4      	mvns	r4, r2
 8001984:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001988:	684f      	ldr	r7, [r1, #4]
 800198a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800198e:	d001      	beq.n	8001994 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8001990:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001994:	4d68      	ldr	r5, [pc, #416]	; (8001b38 <HAL_GPIO_Init+0x1d4>)
 8001996:	602e      	str	r6, [r5, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001998:	686e      	ldr	r6, [r5, #4]
        temp &= ~(iocurrent);
 800199a:	ea04 0506 	and.w	r5, r4, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800199e:	684f      	ldr	r7, [r1, #4]
 80019a0:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80019a4:	d001      	beq.n	80019aa <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 80019a6:	ea42 0506 	orr.w	r5, r2, r6
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80019aa:	4e63      	ldr	r6, [pc, #396]	; (8001b38 <HAL_GPIO_Init+0x1d4>)
 80019ac:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019ae:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80019b2:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 80019b4:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019b8:	684f      	ldr	r7, [r1, #4]
 80019ba:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80019be:	d001      	beq.n	80019c4 <HAL_GPIO_Init+0x60>
        {
          temp |= iocurrent;
 80019c0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80019c4:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80019c8:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80019ca:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80019cc:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019ce:	684e      	ldr	r6, [r1, #4]
 80019d0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80019d4:	d001      	beq.n	80019da <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80019d6:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80019da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019de:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 80019e0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019e2:	680a      	ldr	r2, [r1, #0]
 80019e4:	fa32 f403 	lsrs.w	r4, r2, r3
 80019e8:	f000 80a2 	beq.w	8001b30 <HAL_GPIO_Init+0x1cc>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80019ec:	2401      	movs	r4, #1
 80019ee:	409c      	lsls	r4, r3
    if (iocurrent != 0x00U)
 80019f0:	4022      	ands	r2, r4
 80019f2:	d0f5      	beq.n	80019e0 <HAL_GPIO_Init+0x7c>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019f4:	684d      	ldr	r5, [r1, #4]
 80019f6:	1e6e      	subs	r6, r5, #1
 80019f8:	2d11      	cmp	r5, #17
 80019fa:	bf18      	it	ne
 80019fc:	2e01      	cmpne	r6, #1
 80019fe:	d901      	bls.n	8001a04 <HAL_GPIO_Init+0xa0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a00:	2d12      	cmp	r5, #18
 8001a02:	d112      	bne.n	8001a2a <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR;
 8001a04:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a06:	005f      	lsls	r7, r3, #1
 8001a08:	2503      	movs	r5, #3
 8001a0a:	40bd      	lsls	r5, r7
 8001a0c:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a10:	68cd      	ldr	r5, [r1, #12]
 8001a12:	40bd      	lsls	r5, r7
 8001a14:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8001a16:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8001a18:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a1a:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a1e:	684d      	ldr	r5, [r1, #4]
 8001a20:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8001a24:	409c      	lsls	r4, r3
 8001a26:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8001a28:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8001a2a:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a2c:	005f      	lsls	r7, r3, #1
 8001a2e:	2503      	movs	r5, #3
 8001a30:	40bd      	lsls	r5, r7
 8001a32:	43ec      	mvns	r4, r5
 8001a34:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a36:	688d      	ldr	r5, [r1, #8]
 8001a38:	40bd      	lsls	r5, r7
 8001a3a:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8001a3c:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a3e:	684d      	ldr	r5, [r1, #4]
 8001a40:	2d12      	cmp	r5, #18
 8001a42:	bf18      	it	ne
 8001a44:	2d02      	cmpne	r5, #2
 8001a46:	d113      	bne.n	8001a70 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8001a48:	08de      	lsrs	r6, r3, #3
 8001a4a:	3608      	adds	r6, #8
 8001a4c:	f850 e026 	ldr.w	lr, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a50:	f003 0507 	and.w	r5, r3, #7
 8001a54:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8001a58:	250f      	movs	r5, #15
 8001a5a:	fa05 f50c 	lsl.w	r5, r5, ip
 8001a5e:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a62:	690d      	ldr	r5, [r1, #16]
 8001a64:	fa05 f50c 	lsl.w	r5, r5, ip
 8001a68:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001a6c:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8001a70:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a72:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a74:	684c      	ldr	r4, [r1, #4]
 8001a76:	f004 0403 	and.w	r4, r4, #3
 8001a7a:	40bc      	lsls	r4, r7
 8001a7c:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8001a7e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a80:	684c      	ldr	r4, [r1, #4]
 8001a82:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001a86:	d0ab      	beq.n	80019e0 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a88:	4c2c      	ldr	r4, [pc, #176]	; (8001b3c <HAL_GPIO_Init+0x1d8>)
 8001a8a:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 8001a8e:	f045 0502 	orr.w	r5, r5, #2
 8001a92:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 8001a96:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 8001a9a:	f004 0402 	and.w	r4, r4, #2
 8001a9e:	9401      	str	r4, [sp, #4]
 8001aa0:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001aa2:	089d      	lsrs	r5, r3, #2
 8001aa4:	1cae      	adds	r6, r5, #2
 8001aa6:	4c23      	ldr	r4, [pc, #140]	; (8001b34 <HAL_GPIO_Init+0x1d0>)
 8001aa8:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001aac:	f003 0403 	and.w	r4, r3, #3
 8001ab0:	00a6      	lsls	r6, r4, #2
 8001ab2:	240f      	movs	r4, #15
 8001ab4:	40b4      	lsls	r4, r6
 8001ab6:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001aba:	4c21      	ldr	r4, [pc, #132]	; (8001b40 <HAL_GPIO_Init+0x1dc>)
 8001abc:	42a0      	cmp	r0, r4
 8001abe:	f43f af57 	beq.w	8001970 <HAL_GPIO_Init+0xc>
 8001ac2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001ac6:	42a0      	cmp	r0, r4
 8001ac8:	d022      	beq.n	8001b10 <HAL_GPIO_Init+0x1ac>
 8001aca:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001ace:	42a0      	cmp	r0, r4
 8001ad0:	d020      	beq.n	8001b14 <HAL_GPIO_Init+0x1b0>
 8001ad2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001ad6:	42a0      	cmp	r0, r4
 8001ad8:	d01e      	beq.n	8001b18 <HAL_GPIO_Init+0x1b4>
 8001ada:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001ade:	42a0      	cmp	r0, r4
 8001ae0:	d01c      	beq.n	8001b1c <HAL_GPIO_Init+0x1b8>
 8001ae2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001ae6:	42a0      	cmp	r0, r4
 8001ae8:	d01a      	beq.n	8001b20 <HAL_GPIO_Init+0x1bc>
 8001aea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001aee:	42a0      	cmp	r0, r4
 8001af0:	d018      	beq.n	8001b24 <HAL_GPIO_Init+0x1c0>
 8001af2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001af6:	42a0      	cmp	r0, r4
 8001af8:	d016      	beq.n	8001b28 <HAL_GPIO_Init+0x1c4>
 8001afa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001afe:	42a0      	cmp	r0, r4
 8001b00:	d014      	beq.n	8001b2c <HAL_GPIO_Init+0x1c8>
 8001b02:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001b06:	42a0      	cmp	r0, r4
 8001b08:	f43f af30 	beq.w	800196c <HAL_GPIO_Init+0x8>
 8001b0c:	240a      	movs	r4, #10
 8001b0e:	e730      	b.n	8001972 <HAL_GPIO_Init+0xe>
 8001b10:	2401      	movs	r4, #1
 8001b12:	e72e      	b.n	8001972 <HAL_GPIO_Init+0xe>
 8001b14:	2402      	movs	r4, #2
 8001b16:	e72c      	b.n	8001972 <HAL_GPIO_Init+0xe>
 8001b18:	2403      	movs	r4, #3
 8001b1a:	e72a      	b.n	8001972 <HAL_GPIO_Init+0xe>
 8001b1c:	2404      	movs	r4, #4
 8001b1e:	e728      	b.n	8001972 <HAL_GPIO_Init+0xe>
 8001b20:	2405      	movs	r4, #5
 8001b22:	e726      	b.n	8001972 <HAL_GPIO_Init+0xe>
 8001b24:	2406      	movs	r4, #6
 8001b26:	e724      	b.n	8001972 <HAL_GPIO_Init+0xe>
 8001b28:	2407      	movs	r4, #7
 8001b2a:	e722      	b.n	8001972 <HAL_GPIO_Init+0xe>
 8001b2c:	2408      	movs	r4, #8
 8001b2e:	e720      	b.n	8001972 <HAL_GPIO_Init+0xe>
  }
}
 8001b30:	b003      	add	sp, #12
 8001b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b34:	58000400 	.word	0x58000400
 8001b38:	58000080 	.word	0x58000080
 8001b3c:	58024400 	.word	0x58024400
 8001b40:	58020000 	.word	0x58020000

08001b44 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b44:	b912      	cbnz	r2, 8001b4c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b46:	0409      	lsls	r1, r1, #16
 8001b48:	6181      	str	r1, [r0, #24]
  }
}
 8001b4a:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001b4c:	6181      	str	r1, [r0, #24]
 8001b4e:	4770      	bx	lr

08001b50 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b50:	6803      	ldr	r3, [r0, #0]
 8001b52:	699a      	ldr	r2, [r3, #24]
 8001b54:	f012 0f02 	tst.w	r2, #2
 8001b58:	d001      	beq.n	8001b5e <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b5e:	6803      	ldr	r3, [r0, #0]
 8001b60:	699a      	ldr	r2, [r3, #24]
 8001b62:	f012 0f01 	tst.w	r2, #1
 8001b66:	d103      	bne.n	8001b70 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b68:	699a      	ldr	r2, [r3, #24]
 8001b6a:	f042 0201 	orr.w	r2, r2, #1
 8001b6e:	619a      	str	r2, [r3, #24]
  }
}
 8001b70:	4770      	bx	lr

08001b72 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001b72:	b470      	push	{r4, r5, r6}
 8001b74:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001b76:	6805      	ldr	r5, [r0, #0]
 8001b78:	6868      	ldr	r0, [r5, #4]
 8001b7a:	0d74      	lsrs	r4, r6, #21
 8001b7c:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8001b80:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8001b84:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8001b88:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8001b8c:	f044 0403 	orr.w	r4, r4, #3
 8001b90:	ea20 0004 	bic.w	r0, r0, r4
 8001b94:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001b98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001b9c:	4319      	orrs	r1, r3
 8001b9e:	4331      	orrs	r1, r6
 8001ba0:	4301      	orrs	r1, r0
 8001ba2:	6069      	str	r1, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001ba4:	bc70      	pop	{r4, r5, r6}
 8001ba6:	4770      	bx	lr

08001ba8 <I2C_IsAcknowledgeFailed>:
{
 8001ba8:	b570      	push	{r4, r5, r6, lr}
 8001baa:	4604      	mov	r4, r0
 8001bac:	460d      	mov	r5, r1
 8001bae:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bb0:	6803      	ldr	r3, [r0, #0]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f013 0f10 	tst.w	r3, #16
 8001bb8:	d01c      	beq.n	8001bf4 <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bba:	6823      	ldr	r3, [r4, #0]
 8001bbc:	699a      	ldr	r2, [r3, #24]
 8001bbe:	f012 0f20 	tst.w	r2, #32
 8001bc2:	d119      	bne.n	8001bf8 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8001bc4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8001bc8:	d0f7      	beq.n	8001bba <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bca:	f7fe fbe5 	bl	8000398 <HAL_GetTick>
 8001bce:	1b80      	subs	r0, r0, r6
 8001bd0:	42a8      	cmp	r0, r5
 8001bd2:	d801      	bhi.n	8001bd8 <I2C_IsAcknowledgeFailed+0x30>
 8001bd4:	2d00      	cmp	r5, #0
 8001bd6:	d1f0      	bne.n	8001bba <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bd8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001bda:	f043 0320 	orr.w	r3, r3, #32
 8001bde:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001be0:	2320      	movs	r3, #32
 8001be2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8001bec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	e020      	b.n	8001c36 <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	e01e      	b.n	8001c36 <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bf8:	2210      	movs	r2, #16
 8001bfa:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bfc:	6823      	ldr	r3, [r4, #0]
 8001bfe:	2520      	movs	r5, #32
 8001c00:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001c02:	4620      	mov	r0, r4
 8001c04:	f7ff ffa4 	bl	8001b50 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001c08:	6822      	ldr	r2, [r4, #0]
 8001c0a:	6853      	ldr	r3, [r2, #4]
 8001c0c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001c10:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001c14:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001c18:	f023 0301 	bic.w	r3, r3, #1
 8001c1c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c20:	f043 0304 	orr.w	r3, r3, #4
 8001c24:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c26:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001c30:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8001c34:	2001      	movs	r0, #1
}
 8001c36:	bd70      	pop	{r4, r5, r6, pc}

08001c38 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001c38:	b570      	push	{r4, r5, r6, lr}
 8001c3a:	4604      	mov	r4, r0
 8001c3c:	460d      	mov	r5, r1
 8001c3e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c40:	6823      	ldr	r3, [r4, #0]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f013 0f02 	tst.w	r3, #2
 8001c48:	d11d      	bne.n	8001c86 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c4a:	4632      	mov	r2, r6
 8001c4c:	4629      	mov	r1, r5
 8001c4e:	4620      	mov	r0, r4
 8001c50:	f7ff ffaa 	bl	8001ba8 <I2C_IsAcknowledgeFailed>
 8001c54:	b9c8      	cbnz	r0, 8001c8a <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8001c56:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8001c5a:	d0f1      	beq.n	8001c40 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c5c:	f7fe fb9c 	bl	8000398 <HAL_GetTick>
 8001c60:	1b80      	subs	r0, r0, r6
 8001c62:	42a8      	cmp	r0, r5
 8001c64:	d801      	bhi.n	8001c6a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001c66:	2d00      	cmp	r5, #0
 8001c68:	d1ea      	bne.n	8001c40 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c6c:	f043 0320 	orr.w	r3, r3, #32
 8001c70:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c72:	2320      	movs	r3, #32
 8001c74:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001c7e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001c82:	2001      	movs	r0, #1
 8001c84:	e000      	b.n	8001c88 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8001c86:	2000      	movs	r0, #0
}
 8001c88:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	e7fc      	b.n	8001c88 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08001c8e <I2C_WaitOnFlagUntilTimeout>:
{
 8001c8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c90:	4605      	mov	r5, r0
 8001c92:	460f      	mov	r7, r1
 8001c94:	4616      	mov	r6, r2
 8001c96:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c98:	682b      	ldr	r3, [r5, #0]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	ea37 0303 	bics.w	r3, r7, r3
 8001ca0:	bf0c      	ite	eq
 8001ca2:	2301      	moveq	r3, #1
 8001ca4:	2300      	movne	r3, #0
 8001ca6:	42b3      	cmp	r3, r6
 8001ca8:	d118      	bne.n	8001cdc <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8001caa:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8001cae:	d0f3      	beq.n	8001c98 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cb0:	f7fe fb72 	bl	8000398 <HAL_GetTick>
 8001cb4:	9b06      	ldr	r3, [sp, #24]
 8001cb6:	1ac0      	subs	r0, r0, r3
 8001cb8:	42a0      	cmp	r0, r4
 8001cba:	d801      	bhi.n	8001cc0 <I2C_WaitOnFlagUntilTimeout+0x32>
 8001cbc:	2c00      	cmp	r4, #0
 8001cbe:	d1eb      	bne.n	8001c98 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cc0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001cc2:	f043 0320 	orr.w	r3, r3, #32
 8001cc6:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cc8:	2320      	movs	r3, #32
 8001cca:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001cd4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8001cd8:	2001      	movs	r0, #1
 8001cda:	e000      	b.n	8001cde <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 8001cdc:	2000      	movs	r0, #0
}
 8001cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001ce0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001ce0:	b570      	push	{r4, r5, r6, lr}
 8001ce2:	4605      	mov	r5, r0
 8001ce4:	460c      	mov	r4, r1
 8001ce6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ce8:	682b      	ldr	r3, [r5, #0]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	f013 0f20 	tst.w	r3, #32
 8001cf0:	d11a      	bne.n	8001d28 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cf2:	4632      	mov	r2, r6
 8001cf4:	4621      	mov	r1, r4
 8001cf6:	4628      	mov	r0, r5
 8001cf8:	f7ff ff56 	bl	8001ba8 <I2C_IsAcknowledgeFailed>
 8001cfc:	b9b0      	cbnz	r0, 8001d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cfe:	f7fe fb4b 	bl	8000398 <HAL_GetTick>
 8001d02:	1b80      	subs	r0, r0, r6
 8001d04:	42a0      	cmp	r0, r4
 8001d06:	d801      	bhi.n	8001d0c <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8001d08:	2c00      	cmp	r4, #0
 8001d0a:	d1ed      	bne.n	8001ce8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d0c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001d0e:	f043 0320 	orr.w	r3, r3, #32
 8001d12:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d14:	2320      	movs	r3, #32
 8001d16:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001d20:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8001d24:	2001      	movs	r0, #1
}
 8001d26:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001d28:	2000      	movs	r0, #0
 8001d2a:	e7fc      	b.n	8001d26 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	e7fa      	b.n	8001d26 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08001d30 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001d30:	2800      	cmp	r0, #0
 8001d32:	d057      	beq.n	8001de4 <HAL_I2C_Init+0xb4>
{
 8001d34:	b510      	push	{r4, lr}
 8001d36:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d38:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d041      	beq.n	8001dc4 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d40:	2324      	movs	r3, #36	; 0x24
 8001d42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001d46:	6822      	ldr	r2, [r4, #0]
 8001d48:	6813      	ldr	r3, [r2, #0]
 8001d4a:	f023 0301 	bic.w	r3, r3, #1
 8001d4e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d50:	6863      	ldr	r3, [r4, #4]
 8001d52:	6822      	ldr	r2, [r4, #0]
 8001d54:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001d58:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d5a:	6822      	ldr	r2, [r4, #0]
 8001d5c:	6893      	ldr	r3, [r2, #8]
 8001d5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001d62:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d64:	68e3      	ldr	r3, [r4, #12]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d031      	beq.n	8001dce <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d6a:	68a3      	ldr	r3, [r4, #8]
 8001d6c:	6822      	ldr	r2, [r4, #0]
 8001d6e:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8001d72:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d74:	68e3      	ldr	r3, [r4, #12]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d02f      	beq.n	8001dda <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d7a:	6822      	ldr	r2, [r4, #0]
 8001d7c:	6851      	ldr	r1, [r2, #4]
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <HAL_I2C_Init+0xb8>)
 8001d80:	430b      	orrs	r3, r1
 8001d82:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d84:	6822      	ldr	r2, [r4, #0]
 8001d86:	68d3      	ldr	r3, [r2, #12]
 8001d88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001d8c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d8e:	6923      	ldr	r3, [r4, #16]
 8001d90:	6962      	ldr	r2, [r4, #20]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	69a1      	ldr	r1, [r4, #24]
 8001d96:	6822      	ldr	r2, [r4, #0]
 8001d98:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001d9c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d9e:	69e3      	ldr	r3, [r4, #28]
 8001da0:	6a21      	ldr	r1, [r4, #32]
 8001da2:	6822      	ldr	r2, [r4, #0]
 8001da4:	430b      	orrs	r3, r1
 8001da6:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001da8:	6822      	ldr	r2, [r4, #0]
 8001daa:	6813      	ldr	r3, [r2, #0]
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001db2:	2000      	movs	r0, #0
 8001db4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001db6:	2320      	movs	r3, #32
 8001db8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dbc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dbe:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8001dc2:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001dc4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001dc8:	f004 f85a 	bl	8005e80 <HAL_I2C_MspInit>
 8001dcc:	e7b8      	b.n	8001d40 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001dce:	68a3      	ldr	r3, [r4, #8]
 8001dd0:	6822      	ldr	r2, [r4, #0]
 8001dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dd6:	6093      	str	r3, [r2, #8]
 8001dd8:	e7cc      	b.n	8001d74 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001dda:	6823      	ldr	r3, [r4, #0]
 8001ddc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	e7ca      	b.n	8001d7a <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001de4:	2001      	movs	r0, #1
}
 8001de6:	4770      	bx	lr
 8001de8:	02008000 	.word	0x02008000

08001dec <HAL_I2C_Master_Transmit>:
{
 8001dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001df0:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001df2:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8001df6:	b2ed      	uxtb	r5, r5
 8001df8:	2d20      	cmp	r5, #32
 8001dfa:	f040 80a4 	bne.w	8001f46 <HAL_I2C_Master_Transmit+0x15a>
    __HAL_LOCK(hi2c);
 8001dfe:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8001e02:	2c01      	cmp	r4, #1
 8001e04:	f000 80a4 	beq.w	8001f50 <HAL_I2C_Master_Transmit+0x164>
 8001e08:	4698      	mov	r8, r3
 8001e0a:	4617      	mov	r7, r2
 8001e0c:	460e      	mov	r6, r1
 8001e0e:	4604      	mov	r4, r0
 8001e10:	f04f 0901 	mov.w	r9, #1
 8001e14:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001e18:	f7fe fabe 	bl	8000398 <HAL_GetTick>
 8001e1c:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e1e:	9000      	str	r0, [sp, #0]
 8001e20:	2319      	movs	r3, #25
 8001e22:	464a      	mov	r2, r9
 8001e24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e28:	4620      	mov	r0, r4
 8001e2a:	f7ff ff30 	bl	8001c8e <I2C_WaitOnFlagUntilTimeout>
 8001e2e:	2800      	cmp	r0, #0
 8001e30:	f040 8090 	bne.w	8001f54 <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e34:	2321      	movs	r3, #33	; 0x21
 8001e36:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e3a:	2310      	movs	r3, #16
 8001e3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001e44:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e46:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e4a:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e4c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	2bff      	cmp	r3, #255	; 0xff
 8001e52:	d90a      	bls.n	8001e6a <HAL_I2C_Master_Transmit+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e54:	22ff      	movs	r2, #255	; 0xff
 8001e56:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001e58:	4b42      	ldr	r3, [pc, #264]	; (8001f64 <HAL_I2C_Master_Transmit+0x178>)
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e60:	4631      	mov	r1, r6
 8001e62:	4620      	mov	r0, r4
 8001e64:	f7ff fe85 	bl	8001b72 <I2C_TransferConfig>
 8001e68:	e018      	b.n	8001e9c <HAL_I2C_Master_Transmit+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 8001e6a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001e6c:	b292      	uxth	r2, r2
 8001e6e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001e70:	4b3c      	ldr	r3, [pc, #240]	; (8001f64 <HAL_I2C_Master_Transmit+0x178>)
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	4631      	mov	r1, r6
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	f7ff fe78 	bl	8001b72 <I2C_TransferConfig>
 8001e82:	e00b      	b.n	8001e9c <HAL_I2C_Master_Transmit+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 8001e84:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001e86:	b292      	uxth	r2, r2
 8001e88:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	4631      	mov	r1, r6
 8001e96:	4620      	mov	r0, r4
 8001e98:	f7ff fe6b 	bl	8001b72 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e9c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d033      	beq.n	8001f0c <HAL_I2C_Master_Transmit+0x120>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ea4:	462a      	mov	r2, r5
 8001ea6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	f7ff fec5 	bl	8001c38 <I2C_WaitOnTXISFlagUntilTimeout>
 8001eae:	2800      	cmp	r0, #0
 8001eb0:	d152      	bne.n	8001f58 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001eb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	7812      	ldrb	r2, [r2, #0]
 8001eb8:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001ec0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001ec8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ed0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001ed2:	b292      	uxth	r2, r2
 8001ed4:	2a00      	cmp	r2, #0
 8001ed6:	d0e1      	beq.n	8001e9c <HAL_I2C_Master_Transmit+0xb0>
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1df      	bne.n	8001e9c <HAL_I2C_Master_Transmit+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001edc:	9500      	str	r5, [sp, #0]
 8001ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2180      	movs	r1, #128	; 0x80
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	f7ff fed2 	bl	8001c8e <I2C_WaitOnFlagUntilTimeout>
 8001eea:	2800      	cmp	r0, #0
 8001eec:	d136      	bne.n	8001f5c <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	2bff      	cmp	r3, #255	; 0xff
 8001ef4:	d9c6      	bls.n	8001e84 <HAL_I2C_Master_Transmit+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ef6:	22ff      	movs	r2, #255	; 0xff
 8001ef8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001efa:	2300      	movs	r3, #0
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f02:	4631      	mov	r1, r6
 8001f04:	4620      	mov	r0, r4
 8001f06:	f7ff fe34 	bl	8001b72 <I2C_TransferConfig>
 8001f0a:	e7c7      	b.n	8001e9c <HAL_I2C_Master_Transmit+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f0c:	462a      	mov	r2, r5
 8001f0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001f10:	4620      	mov	r0, r4
 8001f12:	f7ff fee5 	bl	8001ce0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f16:	4603      	mov	r3, r0
 8001f18:	bb10      	cbnz	r0, 8001f60 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f1a:	6822      	ldr	r2, [r4, #0]
 8001f1c:	2120      	movs	r1, #32
 8001f1e:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8001f20:	6820      	ldr	r0, [r4, #0]
 8001f22:	6842      	ldr	r2, [r0, #4]
 8001f24:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001f28:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001f2c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001f30:	f022 0201 	bic.w	r2, r2, #1
 8001f34:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f36:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001f40:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8001f44:	e000      	b.n	8001f48 <HAL_I2C_Master_Transmit+0x15c>
    return HAL_BUSY;
 8001f46:	2302      	movs	r3, #2
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	b003      	add	sp, #12
 8001f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8001f50:	2302      	movs	r3, #2
 8001f52:	e7f9      	b.n	8001f48 <HAL_I2C_Master_Transmit+0x15c>
      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e7f7      	b.n	8001f48 <HAL_I2C_Master_Transmit+0x15c>
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e7f5      	b.n	8001f48 <HAL_I2C_Master_Transmit+0x15c>
          return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e7f3      	b.n	8001f48 <HAL_I2C_Master_Transmit+0x15c>
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e7f1      	b.n	8001f48 <HAL_I2C_Master_Transmit+0x15c>
 8001f64:	80002000 	.word	0x80002000

08001f68 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f68:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b20      	cmp	r3, #32
 8001f70:	d124      	bne.n	8001fbc <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f72:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d022      	beq.n	8001fc0 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f80:	2324      	movs	r3, #36	; 0x24
 8001f82:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f86:	6802      	ldr	r2, [r0, #0]
 8001f88:	6813      	ldr	r3, [r2, #0]
 8001f8a:	f023 0301 	bic.w	r3, r3, #1
 8001f8e:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f90:	6802      	ldr	r2, [r0, #0]
 8001f92:	6813      	ldr	r3, [r2, #0]
 8001f94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f98:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f9a:	6802      	ldr	r2, [r0, #0]
 8001f9c:	6813      	ldr	r3, [r2, #0]
 8001f9e:	4319      	orrs	r1, r3
 8001fa0:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fa2:	6802      	ldr	r2, [r0, #0]
 8001fa4:	6813      	ldr	r3, [r2, #0]
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fac:	2320      	movs	r3, #32
 8001fae:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001fb8:	4618      	mov	r0, r3
 8001fba:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001fbc:	2002      	movs	r0, #2
 8001fbe:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001fc0:	2002      	movs	r0, #2
  }
}
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b20      	cmp	r3, #32
 8001fcc:	d122      	bne.n	8002014 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fce:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d020      	beq.n	8002018 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fdc:	2324      	movs	r3, #36	; 0x24
 8001fde:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fe2:	6802      	ldr	r2, [r0, #0]
 8001fe4:	6813      	ldr	r3, [r2, #0]
 8001fe6:	f023 0301 	bic.w	r3, r3, #1
 8001fea:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fec:	6802      	ldr	r2, [r0, #0]
 8001fee:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ff0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ff4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ff8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ffa:	6802      	ldr	r2, [r0, #0]
 8001ffc:	6813      	ldr	r3, [r2, #0]
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002004:	2320      	movs	r3, #32
 8002006:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800200a:	2300      	movs	r3, #0
 800200c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002010:	4618      	mov	r0, r3
 8002012:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002014:	2002      	movs	r0, #2
 8002016:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002018:	2002      	movs	r0, #2
  }
}
 800201a:	4770      	bx	lr

0800201c <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800201c:	4b13      	ldr	r3, [pc, #76]	; (800206c <HAL_PWREx_ConfigSupply+0x50>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f013 0f04 	tst.w	r3, #4
 8002024:	d107      	bne.n	8002036 <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <HAL_PWREx_ConfigSupply+0x50>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	4283      	cmp	r3, r0
 8002030:	d01a      	beq.n	8002068 <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002032:	2001      	movs	r0, #1
 8002034:	4770      	bx	lr
{
 8002036:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002038:	4a0c      	ldr	r2, [pc, #48]	; (800206c <HAL_PWREx_ConfigSupply+0x50>)
 800203a:	68d3      	ldr	r3, [r2, #12]
 800203c:	f023 0307 	bic.w	r3, r3, #7
 8002040:	4318      	orrs	r0, r3
 8002042:	60d0      	str	r0, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002044:	f7fe f9a8 	bl	8000398 <HAL_GetTick>
 8002048:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800204a:	4b08      	ldr	r3, [pc, #32]	; (800206c <HAL_PWREx_ConfigSupply+0x50>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002052:	d107      	bne.n	8002064 <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002054:	f7fe f9a0 	bl	8000398 <HAL_GetTick>
 8002058:	1b00      	subs	r0, r0, r4
 800205a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800205e:	d9f4      	bls.n	800204a <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 8002060:	2001      	movs	r0, #1
 8002062:	e000      	b.n	8002066 <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002064:	2000      	movs	r0, #0
}
 8002066:	bd10      	pop	{r4, pc}
      return HAL_OK;
 8002068:	2000      	movs	r0, #0
}
 800206a:	4770      	bx	lr
 800206c:	58024800 	.word	0x58024800

08002070 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002070:	2800      	cmp	r0, #0
 8002072:	f000 82e6 	beq.w	8002642 <HAL_RCC_OscConfig+0x5d2>
{
 8002076:	b538      	push	{r3, r4, r5, lr}
 8002078:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800207a:	6803      	ldr	r3, [r0, #0]
 800207c:	f013 0f01 	tst.w	r3, #1
 8002080:	d025      	beq.n	80020ce <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002082:	4aaa      	ldr	r2, [pc, #680]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 8002084:	6913      	ldr	r3, [r2, #16]
 8002086:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800208a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800208c:	2b10      	cmp	r3, #16
 800208e:	d015      	beq.n	80020bc <HAL_RCC_OscConfig+0x4c>
 8002090:	2b18      	cmp	r3, #24
 8002092:	d00f      	beq.n	80020b4 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002094:	6863      	ldr	r3, [r4, #4]
 8002096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209a:	d03e      	beq.n	800211a <HAL_RCC_OscConfig+0xaa>
 800209c:	2b00      	cmp	r3, #0
 800209e:	d152      	bne.n	8002146 <HAL_RCC_OscConfig+0xd6>
 80020a0:	4ba2      	ldr	r3, [pc, #648]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	e037      	b.n	8002124 <HAL_RCC_OscConfig+0xb4>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80020b4:	f002 0203 	and.w	r2, r2, #3
 80020b8:	2a02      	cmp	r2, #2
 80020ba:	d1eb      	bne.n	8002094 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020bc:	4b9b      	ldr	r3, [pc, #620]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80020c4:	d003      	beq.n	80020ce <HAL_RCC_OscConfig+0x5e>
 80020c6:	6863      	ldr	r3, [r4, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 82bc 	beq.w	8002646 <HAL_RCC_OscConfig+0x5d6>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ce:	6823      	ldr	r3, [r4, #0]
 80020d0:	f013 0f02 	tst.w	r3, #2
 80020d4:	d077      	beq.n	80021c6 <HAL_RCC_OscConfig+0x156>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020d6:	4a95      	ldr	r2, [pc, #596]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 80020d8:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020da:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80020dc:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80020e0:	d05a      	beq.n	8002198 <HAL_RCC_OscConfig+0x128>
 80020e2:	2b18      	cmp	r3, #24
 80020e4:	d055      	beq.n	8002192 <HAL_RCC_OscConfig+0x122>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020e6:	68e3      	ldr	r3, [r4, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80b2 	beq.w	8002252 <HAL_RCC_OscConfig+0x1e2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80020ee:	498f      	ldr	r1, [pc, #572]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 80020f0:	680a      	ldr	r2, [r1, #0]
 80020f2:	f022 0219 	bic.w	r2, r2, #25
 80020f6:	4313      	orrs	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fa:	f7fe f94d 	bl	8000398 <HAL_GetTick>
 80020fe:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002100:	4b8a      	ldr	r3, [pc, #552]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f013 0f04 	tst.w	r3, #4
 8002108:	f040 808b 	bne.w	8002222 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800210c:	f7fe f944 	bl	8000398 <HAL_GetTick>
 8002110:	1b40      	subs	r0, r0, r5
 8002112:	2802      	cmp	r0, #2
 8002114:	d9f4      	bls.n	8002100 <HAL_RCC_OscConfig+0x90>
          {
            return HAL_TIMEOUT;
 8002116:	2003      	movs	r0, #3
 8002118:	e29a      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800211a:	4a84      	ldr	r2, [pc, #528]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 800211c:	6813      	ldr	r3, [r2, #0]
 800211e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002122:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002124:	6863      	ldr	r3, [r4, #4]
 8002126:	b32b      	cbz	r3, 8002174 <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 8002128:	f7fe f936 	bl	8000398 <HAL_GetTick>
 800212c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800212e:	4b7f      	ldr	r3, [pc, #508]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002136:	d1ca      	bne.n	80020ce <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002138:	f7fe f92e 	bl	8000398 <HAL_GetTick>
 800213c:	1b40      	subs	r0, r0, r5
 800213e:	2864      	cmp	r0, #100	; 0x64
 8002140:	d9f5      	bls.n	800212e <HAL_RCC_OscConfig+0xbe>
            return HAL_TIMEOUT;
 8002142:	2003      	movs	r0, #3
 8002144:	e284      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002146:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800214a:	d009      	beq.n	8002160 <HAL_RCC_OscConfig+0xf0>
 800214c:	4b77      	ldr	r3, [pc, #476]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	e7e1      	b.n	8002124 <HAL_RCC_OscConfig+0xb4>
 8002160:	4b72      	ldr	r3, [pc, #456]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	e7d7      	b.n	8002124 <HAL_RCC_OscConfig+0xb4>
        tickstart = HAL_GetTick();
 8002174:	f7fe f910 	bl	8000398 <HAL_GetTick>
 8002178:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800217a:	4b6c      	ldr	r3, [pc, #432]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002182:	d0a4      	beq.n	80020ce <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002184:	f7fe f908 	bl	8000398 <HAL_GetTick>
 8002188:	1b40      	subs	r0, r0, r5
 800218a:	2864      	cmp	r0, #100	; 0x64
 800218c:	d9f5      	bls.n	800217a <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 800218e:	2003      	movs	r0, #3
 8002190:	e25e      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002192:	f012 0f03 	tst.w	r2, #3
 8002196:	d1a6      	bne.n	80020e6 <HAL_RCC_OscConfig+0x76>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002198:	4b64      	ldr	r3, [pc, #400]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f013 0f04 	tst.w	r3, #4
 80021a0:	d003      	beq.n	80021aa <HAL_RCC_OscConfig+0x13a>
 80021a2:	68e3      	ldr	r3, [r4, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 8250 	beq.w	800264a <HAL_RCC_OscConfig+0x5da>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021aa:	f7fe f90f 	bl	80003cc <HAL_GetREVID>
 80021ae:	f241 0303 	movw	r3, #4099	; 0x1003
 80021b2:	4298      	cmp	r0, r3
 80021b4:	d82c      	bhi.n	8002210 <HAL_RCC_OscConfig+0x1a0>
 80021b6:	4a5d      	ldr	r2, [pc, #372]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 80021b8:	6853      	ldr	r3, [r2, #4]
 80021ba:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80021be:	6921      	ldr	r1, [r4, #16]
 80021c0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80021c4:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80021c6:	6823      	ldr	r3, [r4, #0]
 80021c8:	f013 0f10 	tst.w	r3, #16
 80021cc:	d071      	beq.n	80022b2 <HAL_RCC_OscConfig+0x242>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ce:	4a57      	ldr	r2, [pc, #348]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 80021d0:	6913      	ldr	r3, [r2, #16]
 80021d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021d6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d052      	beq.n	8002282 <HAL_RCC_OscConfig+0x212>
 80021dc:	2b18      	cmp	r3, #24
 80021de:	d04c      	beq.n	800227a <HAL_RCC_OscConfig+0x20a>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80021e0:	69e3      	ldr	r3, [r4, #28]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 80a4 	beq.w	8002330 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80021e8:	4a50      	ldr	r2, [pc, #320]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 80021ea:	6813      	ldr	r3, [r2, #0]
 80021ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f2:	f7fe f8d1 	bl	8000398 <HAL_GetTick>
 80021f6:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021f8:	4b4c      	ldr	r3, [pc, #304]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002200:	d17b      	bne.n	80022fa <HAL_RCC_OscConfig+0x28a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002202:	f7fe f8c9 	bl	8000398 <HAL_GetTick>
 8002206:	1b40      	subs	r0, r0, r5
 8002208:	2802      	cmp	r0, #2
 800220a:	d9f5      	bls.n	80021f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800220c:	2003      	movs	r0, #3
 800220e:	e21f      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002210:	4a46      	ldr	r2, [pc, #280]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 8002212:	6853      	ldr	r3, [r2, #4]
 8002214:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002218:	6921      	ldr	r1, [r4, #16]
 800221a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800221e:	6053      	str	r3, [r2, #4]
 8002220:	e7d1      	b.n	80021c6 <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002222:	f7fe f8d3 	bl	80003cc <HAL_GetREVID>
 8002226:	f241 0303 	movw	r3, #4099	; 0x1003
 800222a:	4298      	cmp	r0, r3
 800222c:	d808      	bhi.n	8002240 <HAL_RCC_OscConfig+0x1d0>
 800222e:	4a3f      	ldr	r2, [pc, #252]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 8002230:	6853      	ldr	r3, [r2, #4]
 8002232:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002236:	6921      	ldr	r1, [r4, #16]
 8002238:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800223c:	6053      	str	r3, [r2, #4]
 800223e:	e7c2      	b.n	80021c6 <HAL_RCC_OscConfig+0x156>
 8002240:	4a3a      	ldr	r2, [pc, #232]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 8002242:	6853      	ldr	r3, [r2, #4]
 8002244:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002248:	6921      	ldr	r1, [r4, #16]
 800224a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800224e:	6053      	str	r3, [r2, #4]
 8002250:	e7b9      	b.n	80021c6 <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_HSI_DISABLE();
 8002252:	4a36      	ldr	r2, [pc, #216]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 8002254:	6813      	ldr	r3, [r2, #0]
 8002256:	f023 0301 	bic.w	r3, r3, #1
 800225a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800225c:	f7fe f89c 	bl	8000398 <HAL_GetTick>
 8002260:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002262:	4b32      	ldr	r3, [pc, #200]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f013 0f04 	tst.w	r3, #4
 800226a:	d0ac      	beq.n	80021c6 <HAL_RCC_OscConfig+0x156>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800226c:	f7fe f894 	bl	8000398 <HAL_GetTick>
 8002270:	1b40      	subs	r0, r0, r5
 8002272:	2802      	cmp	r0, #2
 8002274:	d9f5      	bls.n	8002262 <HAL_RCC_OscConfig+0x1f2>
            return HAL_TIMEOUT;
 8002276:	2003      	movs	r0, #3
 8002278:	e1ea      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800227a:	f002 0203 	and.w	r2, r2, #3
 800227e:	2a01      	cmp	r2, #1
 8002280:	d1ae      	bne.n	80021e0 <HAL_RCC_OscConfig+0x170>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002282:	4b2a      	ldr	r3, [pc, #168]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f413 7f80 	tst.w	r3, #256	; 0x100
 800228a:	d004      	beq.n	8002296 <HAL_RCC_OscConfig+0x226>
 800228c:	69e3      	ldr	r3, [r4, #28]
 800228e:	2b80      	cmp	r3, #128	; 0x80
 8002290:	d001      	beq.n	8002296 <HAL_RCC_OscConfig+0x226>
        return HAL_ERROR;
 8002292:	2001      	movs	r0, #1
 8002294:	e1dc      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002296:	f7fe f899 	bl	80003cc <HAL_GetREVID>
 800229a:	f241 0303 	movw	r3, #4099	; 0x1003
 800229e:	4298      	cmp	r0, r3
 80022a0:	d822      	bhi.n	80022e8 <HAL_RCC_OscConfig+0x278>
 80022a2:	4a22      	ldr	r2, [pc, #136]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 80022a4:	6853      	ldr	r3, [r2, #4]
 80022a6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80022aa:	6a21      	ldr	r1, [r4, #32]
 80022ac:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 80022b0:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b2:	6823      	ldr	r3, [r4, #0]
 80022b4:	f013 0f08 	tst.w	r3, #8
 80022b8:	d062      	beq.n	8002380 <HAL_RCC_OscConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022ba:	6963      	ldr	r3, [r4, #20]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d04b      	beq.n	8002358 <HAL_RCC_OscConfig+0x2e8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c0:	4a1a      	ldr	r2, [pc, #104]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 80022c2:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ca:	f7fe f865 	bl	8000398 <HAL_GetTick>
 80022ce:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022d0:	4b16      	ldr	r3, [pc, #88]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 80022d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d4:	f013 0f02 	tst.w	r3, #2
 80022d8:	d152      	bne.n	8002380 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022da:	f7fe f85d 	bl	8000398 <HAL_GetTick>
 80022de:	1b40      	subs	r0, r0, r5
 80022e0:	2802      	cmp	r0, #2
 80022e2:	d9f5      	bls.n	80022d0 <HAL_RCC_OscConfig+0x260>
        {
          return HAL_TIMEOUT;
 80022e4:	2003      	movs	r0, #3
 80022e6:	e1b3      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022e8:	4a10      	ldr	r2, [pc, #64]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 80022ea:	68d3      	ldr	r3, [r2, #12]
 80022ec:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80022f0:	6a21      	ldr	r1, [r4, #32]
 80022f2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80022f6:	60d3      	str	r3, [r2, #12]
 80022f8:	e7db      	b.n	80022b2 <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022fa:	f7fe f867 	bl	80003cc <HAL_GetREVID>
 80022fe:	f241 0303 	movw	r3, #4099	; 0x1003
 8002302:	4298      	cmp	r0, r3
 8002304:	d808      	bhi.n	8002318 <HAL_RCC_OscConfig+0x2a8>
 8002306:	4a09      	ldr	r2, [pc, #36]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 8002308:	6853      	ldr	r3, [r2, #4]
 800230a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800230e:	6a21      	ldr	r1, [r4, #32]
 8002310:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8002314:	6053      	str	r3, [r2, #4]
 8002316:	e7cc      	b.n	80022b2 <HAL_RCC_OscConfig+0x242>
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <HAL_RCC_OscConfig+0x2bc>)
 800231a:	68d3      	ldr	r3, [r2, #12]
 800231c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8002320:	6a21      	ldr	r1, [r4, #32]
 8002322:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002326:	60d3      	str	r3, [r2, #12]
 8002328:	e7c3      	b.n	80022b2 <HAL_RCC_OscConfig+0x242>
 800232a:	bf00      	nop
 800232c:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_DISABLE();
 8002330:	4aad      	ldr	r2, [pc, #692]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 8002332:	6813      	ldr	r3, [r2, #0]
 8002334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002338:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800233a:	f7fe f82d 	bl	8000398 <HAL_GetTick>
 800233e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002340:	4ba9      	ldr	r3, [pc, #676]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002348:	d0b3      	beq.n	80022b2 <HAL_RCC_OscConfig+0x242>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800234a:	f7fe f825 	bl	8000398 <HAL_GetTick>
 800234e:	1b40      	subs	r0, r0, r5
 8002350:	2802      	cmp	r0, #2
 8002352:	d9f5      	bls.n	8002340 <HAL_RCC_OscConfig+0x2d0>
            return HAL_TIMEOUT;
 8002354:	2003      	movs	r0, #3
 8002356:	e17b      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002358:	4aa3      	ldr	r2, [pc, #652]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 800235a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800235c:	f023 0301 	bic.w	r3, r3, #1
 8002360:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002362:	f7fe f819 	bl	8000398 <HAL_GetTick>
 8002366:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002368:	4b9f      	ldr	r3, [pc, #636]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 800236a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800236c:	f013 0f02 	tst.w	r3, #2
 8002370:	d006      	beq.n	8002380 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002372:	f7fe f811 	bl	8000398 <HAL_GetTick>
 8002376:	1b40      	subs	r0, r0, r5
 8002378:	2802      	cmp	r0, #2
 800237a:	d9f5      	bls.n	8002368 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800237c:	2003      	movs	r0, #3
 800237e:	e167      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002380:	6823      	ldr	r3, [r4, #0]
 8002382:	f013 0f20 	tst.w	r3, #32
 8002386:	d029      	beq.n	80023dc <HAL_RCC_OscConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002388:	69a3      	ldr	r3, [r4, #24]
 800238a:	b19b      	cbz	r3, 80023b4 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800238c:	4a96      	ldr	r2, [pc, #600]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 800238e:	6813      	ldr	r3, [r2, #0]
 8002390:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002394:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002396:	f7fd ffff 	bl	8000398 <HAL_GetTick>
 800239a:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800239c:	4b92      	ldr	r3, [pc, #584]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80023a4:	d11a      	bne.n	80023dc <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80023a6:	f7fd fff7 	bl	8000398 <HAL_GetTick>
 80023aa:	1b40      	subs	r0, r0, r5
 80023ac:	2802      	cmp	r0, #2
 80023ae:	d9f5      	bls.n	800239c <HAL_RCC_OscConfig+0x32c>
        {
          return HAL_TIMEOUT;
 80023b0:	2003      	movs	r0, #3
 80023b2:	e14d      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023b4:	4a8c      	ldr	r2, [pc, #560]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80023b6:	6813      	ldr	r3, [r2, #0]
 80023b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80023be:	f7fd ffeb 	bl	8000398 <HAL_GetTick>
 80023c2:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80023c4:	4b88      	ldr	r3, [pc, #544]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80023cc:	d006      	beq.n	80023dc <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80023ce:	f7fd ffe3 	bl	8000398 <HAL_GetTick>
 80023d2:	1b40      	subs	r0, r0, r5
 80023d4:	2802      	cmp	r0, #2
 80023d6:	d9f5      	bls.n	80023c4 <HAL_RCC_OscConfig+0x354>
        {
          return HAL_TIMEOUT;
 80023d8:	2003      	movs	r0, #3
 80023da:	e139      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023dc:	6823      	ldr	r3, [r4, #0]
 80023de:	f013 0f04 	tst.w	r3, #4
 80023e2:	d121      	bne.n	8002428 <HAL_RCC_OscConfig+0x3b8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 8131 	beq.w	800264e <HAL_RCC_OscConfig+0x5de>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80023ec:	4a7e      	ldr	r2, [pc, #504]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80023ee:	6912      	ldr	r2, [r2, #16]
 80023f0:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80023f4:	2a18      	cmp	r2, #24
 80023f6:	f000 80ea 	beq.w	80025ce <HAL_RCC_OscConfig+0x55e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d075      	beq.n	80024ea <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fe:	4a7a      	ldr	r2, [pc, #488]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 8002400:	6813      	ldr	r3, [r2, #0]
 8002402:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7fd ffc6 	bl	8000398 <HAL_GetTick>
 800240c:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800240e:	4b76      	ldr	r3, [pc, #472]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002416:	f000 80d8 	beq.w	80025ca <HAL_RCC_OscConfig+0x55a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241a:	f7fd ffbd 	bl	8000398 <HAL_GetTick>
 800241e:	1b00      	subs	r0, r0, r4
 8002420:	2802      	cmp	r0, #2
 8002422:	d9f4      	bls.n	800240e <HAL_RCC_OscConfig+0x39e>
          {
            return HAL_TIMEOUT;
 8002424:	2003      	movs	r0, #3
 8002426:	e113      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
    PWR->CR1 |= PWR_CR1_DBP;
 8002428:	4a70      	ldr	r2, [pc, #448]	; (80025ec <HAL_RCC_OscConfig+0x57c>)
 800242a:	6813      	ldr	r3, [r2, #0]
 800242c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002430:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002432:	f7fd ffb1 	bl	8000398 <HAL_GetTick>
 8002436:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002438:	4b6c      	ldr	r3, [pc, #432]	; (80025ec <HAL_RCC_OscConfig+0x57c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002440:	d106      	bne.n	8002450 <HAL_RCC_OscConfig+0x3e0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002442:	f7fd ffa9 	bl	8000398 <HAL_GetTick>
 8002446:	1b40      	subs	r0, r0, r5
 8002448:	2864      	cmp	r0, #100	; 0x64
 800244a:	d9f5      	bls.n	8002438 <HAL_RCC_OscConfig+0x3c8>
        return HAL_TIMEOUT;
 800244c:	2003      	movs	r0, #3
 800244e:	e0ff      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002450:	68a3      	ldr	r3, [r4, #8]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d00a      	beq.n	800246c <HAL_RCC_OscConfig+0x3fc>
 8002456:	bb0b      	cbnz	r3, 800249c <HAL_RCC_OscConfig+0x42c>
 8002458:	4b63      	ldr	r3, [pc, #396]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 800245a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800245c:	f022 0201 	bic.w	r2, r2, #1
 8002460:	671a      	str	r2, [r3, #112]	; 0x70
 8002462:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002464:	f022 0204 	bic.w	r2, r2, #4
 8002468:	671a      	str	r2, [r3, #112]	; 0x70
 800246a:	e004      	b.n	8002476 <HAL_RCC_OscConfig+0x406>
 800246c:	4a5e      	ldr	r2, [pc, #376]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 800246e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002476:	68a3      	ldr	r3, [r4, #8]
 8002478:	b333      	cbz	r3, 80024c8 <HAL_RCC_OscConfig+0x458>
      tickstart = HAL_GetTick();
 800247a:	f7fd ff8d 	bl	8000398 <HAL_GetTick>
 800247e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002480:	4b59      	ldr	r3, [pc, #356]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 8002482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002484:	f013 0f02 	tst.w	r3, #2
 8002488:	d1ac      	bne.n	80023e4 <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800248a:	f7fd ff85 	bl	8000398 <HAL_GetTick>
 800248e:	1b40      	subs	r0, r0, r5
 8002490:	f241 3388 	movw	r3, #5000	; 0x1388
 8002494:	4298      	cmp	r0, r3
 8002496:	d9f3      	bls.n	8002480 <HAL_RCC_OscConfig+0x410>
          return HAL_TIMEOUT;
 8002498:	2003      	movs	r0, #3
 800249a:	e0d9      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800249c:	2b05      	cmp	r3, #5
 800249e:	d009      	beq.n	80024b4 <HAL_RCC_OscConfig+0x444>
 80024a0:	4b51      	ldr	r3, [pc, #324]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80024a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024a4:	f022 0201 	bic.w	r2, r2, #1
 80024a8:	671a      	str	r2, [r3, #112]	; 0x70
 80024aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024ac:	f022 0204 	bic.w	r2, r2, #4
 80024b0:	671a      	str	r2, [r3, #112]	; 0x70
 80024b2:	e7e0      	b.n	8002476 <HAL_RCC_OscConfig+0x406>
 80024b4:	4b4c      	ldr	r3, [pc, #304]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80024b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024b8:	f042 0204 	orr.w	r2, r2, #4
 80024bc:	671a      	str	r2, [r3, #112]	; 0x70
 80024be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024c0:	f042 0201 	orr.w	r2, r2, #1
 80024c4:	671a      	str	r2, [r3, #112]	; 0x70
 80024c6:	e7d6      	b.n	8002476 <HAL_RCC_OscConfig+0x406>
      tickstart = HAL_GetTick();
 80024c8:	f7fd ff66 	bl	8000398 <HAL_GetTick>
 80024cc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024ce:	4b46      	ldr	r3, [pc, #280]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80024d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d2:	f013 0f02 	tst.w	r3, #2
 80024d6:	d085      	beq.n	80023e4 <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024d8:	f7fd ff5e 	bl	8000398 <HAL_GetTick>
 80024dc:	1b40      	subs	r0, r0, r5
 80024de:	f241 3388 	movw	r3, #5000	; 0x1388
 80024e2:	4298      	cmp	r0, r3
 80024e4:	d9f3      	bls.n	80024ce <HAL_RCC_OscConfig+0x45e>
          return HAL_TIMEOUT;
 80024e6:	2003      	movs	r0, #3
 80024e8:	e0b2      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_PLL_DISABLE();
 80024ea:	4a3f      	ldr	r2, [pc, #252]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80024ec:	6813      	ldr	r3, [r2, #0]
 80024ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024f2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80024f4:	f7fd ff50 	bl	8000398 <HAL_GetTick>
 80024f8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024fa:	4b3b      	ldr	r3, [pc, #236]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002502:	d006      	beq.n	8002512 <HAL_RCC_OscConfig+0x4a2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002504:	f7fd ff48 	bl	8000398 <HAL_GetTick>
 8002508:	1b40      	subs	r0, r0, r5
 800250a:	2802      	cmp	r0, #2
 800250c:	d9f5      	bls.n	80024fa <HAL_RCC_OscConfig+0x48a>
            return HAL_TIMEOUT;
 800250e:	2003      	movs	r0, #3
 8002510:	e09e      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002512:	4b35      	ldr	r3, [pc, #212]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 8002514:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002516:	4a36      	ldr	r2, [pc, #216]	; (80025f0 <HAL_RCC_OscConfig+0x580>)
 8002518:	400a      	ands	r2, r1
 800251a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800251c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800251e:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8002522:	430a      	orrs	r2, r1
 8002524:	629a      	str	r2, [r3, #40]	; 0x28
 8002526:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002528:	3a01      	subs	r2, #1
 800252a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800252e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002530:	3901      	subs	r1, #1
 8002532:	0249      	lsls	r1, r1, #9
 8002534:	b289      	uxth	r1, r1
 8002536:	430a      	orrs	r2, r1
 8002538:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800253a:	3901      	subs	r1, #1
 800253c:	0409      	lsls	r1, r1, #16
 800253e:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8002542:	430a      	orrs	r2, r1
 8002544:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002546:	3901      	subs	r1, #1
 8002548:	0609      	lsls	r1, r1, #24
 800254a:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800254e:	430a      	orrs	r2, r1
 8002550:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8002552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002554:	f022 0201 	bic.w	r2, r2, #1
 8002558:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800255a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800255c:	4a25      	ldr	r2, [pc, #148]	; (80025f4 <HAL_RCC_OscConfig+0x584>)
 800255e:	400a      	ands	r2, r1
 8002560:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002562:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002566:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800256a:	f022 020c 	bic.w	r2, r2, #12
 800256e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002570:	430a      	orrs	r2, r1
 8002572:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002576:	f022 0202 	bic.w	r2, r2, #2
 800257a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800257c:	430a      	orrs	r2, r1
 800257e:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002582:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002586:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800258a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800258e:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002592:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002596:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8002598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80025a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80025a8:	f7fd fef6 	bl	8000398 <HAL_GetTick>
 80025ac:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025ae:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80025b6:	d106      	bne.n	80025c6 <HAL_RCC_OscConfig+0x556>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b8:	f7fd feee 	bl	8000398 <HAL_GetTick>
 80025bc:	1b00      	subs	r0, r0, r4
 80025be:	2802      	cmp	r0, #2
 80025c0:	d9f5      	bls.n	80025ae <HAL_RCC_OscConfig+0x53e>
            return HAL_TIMEOUT;
 80025c2:	2003      	movs	r0, #3
 80025c4:	e044      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80025c6:	2000      	movs	r0, #0
 80025c8:	e042      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
 80025ca:	2000      	movs	r0, #0
 80025cc:	e040      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
      temp1_pllckcfg = RCC->PLLCKSELR;
 80025ce:	4a06      	ldr	r2, [pc, #24]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80025d0:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80025d2:	6b10      	ldr	r0, [r2, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d03c      	beq.n	8002652 <HAL_RCC_OscConfig+0x5e2>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d8:	f001 0303 	and.w	r3, r1, #3
 80025dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00a      	beq.n	80025f8 <HAL_RCC_OscConfig+0x588>
        return HAL_ERROR;
 80025e2:	2001      	movs	r0, #1
 80025e4:	e034      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
 80025e6:	bf00      	nop
 80025e8:	58024400 	.word	0x58024400
 80025ec:	58024800 	.word	0x58024800
 80025f0:	fffffc0c 	.word	0xfffffc0c
 80025f4:	ffff0007 	.word	0xffff0007
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80025f8:	f3c1 1105 	ubfx	r1, r1, #4, #6
 80025fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	4299      	cmp	r1, r3
 8002600:	d001      	beq.n	8002606 <HAL_RCC_OscConfig+0x596>
        return HAL_ERROR;
 8002602:	2001      	movs	r0, #1
 8002604:	e024      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002606:	f3c0 0208 	ubfx	r2, r0, #0, #9
 800260a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800260c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d001      	beq.n	8002616 <HAL_RCC_OscConfig+0x5a6>
        return HAL_ERROR;
 8002612:	2001      	movs	r0, #1
 8002614:	e01c      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002616:	f3c0 2246 	ubfx	r2, r0, #9, #7
 800261a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800261c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800261e:	429a      	cmp	r2, r3
 8002620:	d001      	beq.n	8002626 <HAL_RCC_OscConfig+0x5b6>
        return HAL_ERROR;
 8002622:	2001      	movs	r0, #1
 8002624:	e014      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002626:	f3c0 4206 	ubfx	r2, r0, #16, #7
 800262a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800262c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800262e:	429a      	cmp	r2, r3
 8002630:	d111      	bne.n	8002656 <HAL_RCC_OscConfig+0x5e6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002632:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8002636:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002638:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800263a:	4298      	cmp	r0, r3
 800263c:	d00d      	beq.n	800265a <HAL_RCC_OscConfig+0x5ea>
        return HAL_ERROR;
 800263e:	2001      	movs	r0, #1
 8002640:	e006      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
    return HAL_ERROR;
 8002642:	2001      	movs	r0, #1
}
 8002644:	4770      	bx	lr
        return HAL_ERROR;
 8002646:	2001      	movs	r0, #1
 8002648:	e002      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
        return HAL_ERROR;
 800264a:	2001      	movs	r0, #1
 800264c:	e000      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
  return HAL_OK;
 800264e:	2000      	movs	r0, #0
}
 8002650:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8002652:	2001      	movs	r0, #1
 8002654:	e7fc      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
 8002656:	2001      	movs	r0, #1
 8002658:	e7fa      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
  return HAL_OK;
 800265a:	2000      	movs	r0, #0
 800265c:	e7f8      	b.n	8002650 <HAL_RCC_OscConfig+0x5e0>
 800265e:	bf00      	nop

08002660 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002660:	4b72      	ldr	r3, [pc, #456]	; (800282c <HAL_RCC_GetSysClockFreq+0x1cc>)
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002668:	2b10      	cmp	r3, #16
 800266a:	f000 80db 	beq.w	8002824 <HAL_RCC_GetSysClockFreq+0x1c4>
 800266e:	2b18      	cmp	r3, #24
 8002670:	d010      	beq.n	8002694 <HAL_RCC_GetSysClockFreq+0x34>
 8002672:	b10b      	cbz	r3, 8002678 <HAL_RCC_GetSysClockFreq+0x18>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002674:	486e      	ldr	r0, [pc, #440]	; (8002830 <HAL_RCC_GetSysClockFreq+0x1d0>)
 8002676:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002678:	4b6c      	ldr	r3, [pc, #432]	; (800282c <HAL_RCC_GetSysClockFreq+0x1cc>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f013 0f20 	tst.w	r3, #32
 8002680:	f000 80d2 	beq.w	8002828 <HAL_RCC_GetSysClockFreq+0x1c8>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002684:	4b69      	ldr	r3, [pc, #420]	; (800282c <HAL_RCC_GetSysClockFreq+0x1cc>)
 8002686:	6818      	ldr	r0, [r3, #0]
 8002688:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800268c:	4b69      	ldr	r3, [pc, #420]	; (8002834 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800268e:	fa23 f000 	lsr.w	r0, r3, r0
 8002692:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002694:	4a65      	ldr	r2, [pc, #404]	; (800282c <HAL_RCC_GetSysClockFreq+0x1cc>)
 8002696:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002698:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800269c:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800269e:	f3c0 1005 	ubfx	r0, r0, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026a2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80026a4:	f003 0301 	and.w	r3, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80026a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026aa:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 80026ae:	fb03 f302 	mul.w	r3, r3, r2
 80026b2:	ee07 3a90 	vmov	s15, r3
 80026b6:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 80026ba:	2800      	cmp	r0, #0
 80026bc:	f000 80b5 	beq.w	800282a <HAL_RCC_GetSysClockFreq+0x1ca>
    {
      switch (pllsource)
 80026c0:	2901      	cmp	r1, #1
 80026c2:	d066      	beq.n	8002792 <HAL_RCC_GetSysClockFreq+0x132>
 80026c4:	b1f9      	cbz	r1, 8002706 <HAL_RCC_GetSysClockFreq+0xa6>
 80026c6:	2902      	cmp	r1, #2
 80026c8:	f000 808f 	beq.w	80027ea <HAL_RCC_GetSysClockFreq+0x18a>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026cc:	ee07 0a10 	vmov	s14, r0
 80026d0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80026d4:	ed9f 6a58 	vldr	s12, [pc, #352]	; 8002838 <HAL_RCC_GetSysClockFreq+0x1d8>
 80026d8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80026dc:	4b53      	ldr	r3, [pc, #332]	; (800282c <HAL_RCC_GetSysClockFreq+0x1cc>)
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026e4:	ee06 3a90 	vmov	s13, r3
 80026e8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80026ec:	ed9f 6a53 	vldr	s12, [pc, #332]	; 800283c <HAL_RCC_GetSysClockFreq+0x1dc>
 80026f0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80026f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002700:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8002704:	e061      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x16a>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002706:	4b49      	ldr	r3, [pc, #292]	; (800282c <HAL_RCC_GetSysClockFreq+0x1cc>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f013 0f20 	tst.w	r3, #32
 800270e:	d023      	beq.n	8002758 <HAL_RCC_GetSysClockFreq+0xf8>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002710:	4946      	ldr	r1, [pc, #280]	; (800282c <HAL_RCC_GetSysClockFreq+0x1cc>)
 8002712:	680a      	ldr	r2, [r1, #0]
 8002714:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002718:	4b46      	ldr	r3, [pc, #280]	; (8002834 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800271a:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800271c:	ee07 3a10 	vmov	s14, r3
 8002720:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8002724:	ee07 0a10 	vmov	s14, r0
 8002728:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800272c:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8002730:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002736:	ee06 3a90 	vmov	s13, r3
 800273a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800273e:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 800283c <HAL_RCC_GetSysClockFreq+0x1dc>
 8002742:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800274a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800274e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002752:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002756:	e038      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x16a>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002758:	ee07 0a10 	vmov	s14, r0
 800275c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8002760:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8002840 <HAL_RCC_GetSysClockFreq+0x1e0>
 8002764:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8002768:	4b30      	ldr	r3, [pc, #192]	; (800282c <HAL_RCC_GetSysClockFreq+0x1cc>)
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002770:	ee06 3a90 	vmov	s13, r3
 8002774:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002778:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800283c <HAL_RCC_GetSysClockFreq+0x1dc>
 800277c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002780:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002784:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002788:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800278c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002790:	e01b      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x16a>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002792:	ee07 0a10 	vmov	s14, r0
 8002796:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800279a:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8002838 <HAL_RCC_GetSysClockFreq+0x1d8>
 800279e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80027a2:	4b22      	ldr	r3, [pc, #136]	; (800282c <HAL_RCC_GetSysClockFreq+0x1cc>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027aa:	ee06 3a90 	vmov	s13, r3
 80027ae:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80027b2:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800283c <HAL_RCC_GetSysClockFreq+0x1dc>
 80027b6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80027ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027c6:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80027ca:	4b18      	ldr	r3, [pc, #96]	; (800282c <HAL_RCC_GetSysClockFreq+0x1cc>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80027d2:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80027d4:	ee07 3a90 	vmov	s15, r3
 80027d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80027e0:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80027e4:	ee17 0a90 	vmov	r0, s15
 80027e8:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027ea:	ee07 0a10 	vmov	s14, r0
 80027ee:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80027f2:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8002844 <HAL_RCC_GetSysClockFreq+0x1e4>
 80027f6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80027fa:	4b0c      	ldr	r3, [pc, #48]	; (800282c <HAL_RCC_GetSysClockFreq+0x1cc>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002802:	ee06 3a90 	vmov	s13, r3
 8002806:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800280a:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 800283c <HAL_RCC_GetSysClockFreq+0x1dc>
 800280e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800281a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800281e:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8002822:	e7d2      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x16a>
    sysclockfreq = HSE_VALUE;
 8002824:	4808      	ldr	r0, [pc, #32]	; (8002848 <HAL_RCC_GetSysClockFreq+0x1e8>)
 8002826:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002828:	4802      	ldr	r0, [pc, #8]	; (8002834 <HAL_RCC_GetSysClockFreq+0x1d4>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800282a:	4770      	bx	lr
 800282c:	58024400 	.word	0x58024400
 8002830:	003d0900 	.word	0x003d0900
 8002834:	03d09000 	.word	0x03d09000
 8002838:	4a742400 	.word	0x4a742400
 800283c:	39000000 	.word	0x39000000
 8002840:	4c742400 	.word	0x4c742400
 8002844:	4bbebc20 	.word	0x4bbebc20
 8002848:	017d7840 	.word	0x017d7840

0800284c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800284c:	2800      	cmp	r0, #0
 800284e:	f000 8136 	beq.w	8002abe <HAL_RCC_ClockConfig+0x272>
 8002852:	4603      	mov	r3, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002854:	4a9c      	ldr	r2, [pc, #624]	; (8002ac8 <HAL_RCC_ClockConfig+0x27c>)
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	f002 020f 	and.w	r2, r2, #15
 800285c:	428a      	cmp	r2, r1
 800285e:	d20c      	bcs.n	800287a <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002860:	4899      	ldr	r0, [pc, #612]	; (8002ac8 <HAL_RCC_ClockConfig+0x27c>)
 8002862:	6802      	ldr	r2, [r0, #0]
 8002864:	f022 020f 	bic.w	r2, r2, #15
 8002868:	430a      	orrs	r2, r1
 800286a:	6002      	str	r2, [r0, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800286c:	6802      	ldr	r2, [r0, #0]
 800286e:	f002 020f 	and.w	r2, r2, #15
 8002872:	428a      	cmp	r2, r1
 8002874:	d001      	beq.n	800287a <HAL_RCC_ClockConfig+0x2e>
      return HAL_ERROR;
 8002876:	2001      	movs	r0, #1
}
 8002878:	4770      	bx	lr
{
 800287a:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	f012 0f04 	tst.w	r2, #4
 8002882:	d00c      	beq.n	800289e <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002884:	6918      	ldr	r0, [r3, #16]
 8002886:	4a91      	ldr	r2, [pc, #580]	; (8002acc <HAL_RCC_ClockConfig+0x280>)
 8002888:	6992      	ldr	r2, [r2, #24]
 800288a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800288e:	4290      	cmp	r0, r2
 8002890:	d905      	bls.n	800289e <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002892:	4c8e      	ldr	r4, [pc, #568]	; (8002acc <HAL_RCC_ClockConfig+0x280>)
 8002894:	69a2      	ldr	r2, [r4, #24]
 8002896:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800289a:	4310      	orrs	r0, r2
 800289c:	61a0      	str	r0, [r4, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	f012 0f08 	tst.w	r2, #8
 80028a4:	d00c      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80028a6:	6958      	ldr	r0, [r3, #20]
 80028a8:	4a88      	ldr	r2, [pc, #544]	; (8002acc <HAL_RCC_ClockConfig+0x280>)
 80028aa:	69d2      	ldr	r2, [r2, #28]
 80028ac:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80028b0:	4290      	cmp	r0, r2
 80028b2:	d905      	bls.n	80028c0 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80028b4:	4c85      	ldr	r4, [pc, #532]	; (8002acc <HAL_RCC_ClockConfig+0x280>)
 80028b6:	69e2      	ldr	r2, [r4, #28]
 80028b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80028bc:	4310      	orrs	r0, r2
 80028be:	61e0      	str	r0, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	f012 0f10 	tst.w	r2, #16
 80028c6:	d00c      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80028c8:	6998      	ldr	r0, [r3, #24]
 80028ca:	4a80      	ldr	r2, [pc, #512]	; (8002acc <HAL_RCC_ClockConfig+0x280>)
 80028cc:	69d2      	ldr	r2, [r2, #28]
 80028ce:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80028d2:	4290      	cmp	r0, r2
 80028d4:	d905      	bls.n	80028e2 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80028d6:	4c7d      	ldr	r4, [pc, #500]	; (8002acc <HAL_RCC_ClockConfig+0x280>)
 80028d8:	69e2      	ldr	r2, [r4, #28]
 80028da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028de:	4310      	orrs	r0, r2
 80028e0:	61e0      	str	r0, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	f012 0f20 	tst.w	r2, #32
 80028e8:	d00c      	beq.n	8002904 <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80028ea:	69d8      	ldr	r0, [r3, #28]
 80028ec:	4a77      	ldr	r2, [pc, #476]	; (8002acc <HAL_RCC_ClockConfig+0x280>)
 80028ee:	6a12      	ldr	r2, [r2, #32]
 80028f0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80028f4:	4290      	cmp	r0, r2
 80028f6:	d905      	bls.n	8002904 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80028f8:	4c74      	ldr	r4, [pc, #464]	; (8002acc <HAL_RCC_ClockConfig+0x280>)
 80028fa:	6a22      	ldr	r2, [r4, #32]
 80028fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002900:	4310      	orrs	r0, r2
 8002902:	6220      	str	r0, [r4, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	f012 0f02 	tst.w	r2, #2
 800290a:	d00c      	beq.n	8002926 <HAL_RCC_ClockConfig+0xda>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800290c:	68d8      	ldr	r0, [r3, #12]
 800290e:	4a6f      	ldr	r2, [pc, #444]	; (8002acc <HAL_RCC_ClockConfig+0x280>)
 8002910:	6992      	ldr	r2, [r2, #24]
 8002912:	f002 020f 	and.w	r2, r2, #15
 8002916:	4290      	cmp	r0, r2
 8002918:	d905      	bls.n	8002926 <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800291a:	4c6c      	ldr	r4, [pc, #432]	; (8002acc <HAL_RCC_ClockConfig+0x280>)
 800291c:	69a2      	ldr	r2, [r4, #24]
 800291e:	f022 020f 	bic.w	r2, r2, #15
 8002922:	4310      	orrs	r0, r2
 8002924:	61a0      	str	r0, [r4, #24]
 8002926:	461c      	mov	r4, r3
 8002928:	460d      	mov	r5, r1
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f013 0f01 	tst.w	r3, #1
 8002930:	d041      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x16a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002932:	4a66      	ldr	r2, [pc, #408]	; (8002acc <HAL_RCC_ClockConfig+0x280>)
 8002934:	6993      	ldr	r3, [r2, #24]
 8002936:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800293a:	68a1      	ldr	r1, [r4, #8]
 800293c:	430b      	orrs	r3, r1
 800293e:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002940:	6863      	ldr	r3, [r4, #4]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d00a      	beq.n	800295c <HAL_RCC_ClockConfig+0x110>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002946:	2b03      	cmp	r3, #3
 8002948:	d027      	beq.n	800299a <HAL_RCC_ClockConfig+0x14e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800294a:	2b01      	cmp	r3, #1
 800294c:	d02c      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x15c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800294e:	4a5f      	ldr	r2, [pc, #380]	; (8002acc <HAL_RCC_ClockConfig+0x280>)
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	f012 0f04 	tst.w	r2, #4
 8002956:	d106      	bne.n	8002966 <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 8002958:	2001      	movs	r0, #1
 800295a:	e0af      	b.n	8002abc <HAL_RCC_ClockConfig+0x270>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800295c:	6812      	ldr	r2, [r2, #0]
 800295e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002962:	f000 80ae 	beq.w	8002ac2 <HAL_RCC_ClockConfig+0x276>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002966:	4959      	ldr	r1, [pc, #356]	; (8002acc <HAL_RCC_ClockConfig+0x280>)
 8002968:	690a      	ldr	r2, [r1, #16]
 800296a:	f022 0207 	bic.w	r2, r2, #7
 800296e:	4313      	orrs	r3, r2
 8002970:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 8002972:	f7fd fd11 	bl	8000398 <HAL_GetTick>
 8002976:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002978:	4b54      	ldr	r3, [pc, #336]	; (8002acc <HAL_RCC_ClockConfig+0x280>)
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002980:	6862      	ldr	r2, [r4, #4]
 8002982:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8002986:	d016      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x16a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002988:	f7fd fd06 	bl	8000398 <HAL_GetTick>
 800298c:	1b80      	subs	r0, r0, r6
 800298e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002992:	4298      	cmp	r0, r3
 8002994:	d9f0      	bls.n	8002978 <HAL_RCC_ClockConfig+0x12c>
            return HAL_TIMEOUT;
 8002996:	2003      	movs	r0, #3
 8002998:	e090      	b.n	8002abc <HAL_RCC_ClockConfig+0x270>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800299a:	4a4c      	ldr	r2, [pc, #304]	; (8002acc <HAL_RCC_ClockConfig+0x280>)
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80029a2:	d1e0      	bne.n	8002966 <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 80029a4:	2001      	movs	r0, #1
 80029a6:	e089      	b.n	8002abc <HAL_RCC_ClockConfig+0x270>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029a8:	4a48      	ldr	r2, [pc, #288]	; (8002acc <HAL_RCC_ClockConfig+0x280>)
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	f412 7f80 	tst.w	r2, #256	; 0x100
 80029b0:	d1d9      	bne.n	8002966 <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 80029b2:	2001      	movs	r0, #1
 80029b4:	e082      	b.n	8002abc <HAL_RCC_ClockConfig+0x270>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b6:	6823      	ldr	r3, [r4, #0]
 80029b8:	f013 0f02 	tst.w	r3, #2
 80029bc:	d00c      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x18c>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80029be:	68e2      	ldr	r2, [r4, #12]
 80029c0:	4b42      	ldr	r3, [pc, #264]	; (8002acc <HAL_RCC_ClockConfig+0x280>)
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	f003 030f 	and.w	r3, r3, #15
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d205      	bcs.n	80029d8 <HAL_RCC_ClockConfig+0x18c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029cc:	493f      	ldr	r1, [pc, #252]	; (8002acc <HAL_RCC_ClockConfig+0x280>)
 80029ce:	698b      	ldr	r3, [r1, #24]
 80029d0:	f023 030f 	bic.w	r3, r3, #15
 80029d4:	431a      	orrs	r2, r3
 80029d6:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029d8:	4b3b      	ldr	r3, [pc, #236]	; (8002ac8 <HAL_RCC_ClockConfig+0x27c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 030f 	and.w	r3, r3, #15
 80029e0:	42ab      	cmp	r3, r5
 80029e2:	d90c      	bls.n	80029fe <HAL_RCC_ClockConfig+0x1b2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e4:	4a38      	ldr	r2, [pc, #224]	; (8002ac8 <HAL_RCC_ClockConfig+0x27c>)
 80029e6:	6813      	ldr	r3, [r2, #0]
 80029e8:	f023 030f 	bic.w	r3, r3, #15
 80029ec:	432b      	orrs	r3, r5
 80029ee:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f0:	6813      	ldr	r3, [r2, #0]
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	42ab      	cmp	r3, r5
 80029f8:	d001      	beq.n	80029fe <HAL_RCC_ClockConfig+0x1b2>
      return HAL_ERROR;
 80029fa:	2001      	movs	r0, #1
 80029fc:	e05e      	b.n	8002abc <HAL_RCC_ClockConfig+0x270>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80029fe:	6823      	ldr	r3, [r4, #0]
 8002a00:	f013 0f04 	tst.w	r3, #4
 8002a04:	d00c      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x1d4>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a06:	6922      	ldr	r2, [r4, #16]
 8002a08:	4b30      	ldr	r3, [pc, #192]	; (8002acc <HAL_RCC_ClockConfig+0x280>)
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d205      	bcs.n	8002a20 <HAL_RCC_ClockConfig+0x1d4>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a14:	492d      	ldr	r1, [pc, #180]	; (8002acc <HAL_RCC_ClockConfig+0x280>)
 8002a16:	698b      	ldr	r3, [r1, #24]
 8002a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a20:	6823      	ldr	r3, [r4, #0]
 8002a22:	f013 0f08 	tst.w	r3, #8
 8002a26:	d00c      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x1f6>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a28:	6962      	ldr	r2, [r4, #20]
 8002a2a:	4b28      	ldr	r3, [pc, #160]	; (8002acc <HAL_RCC_ClockConfig+0x280>)
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d205      	bcs.n	8002a42 <HAL_RCC_ClockConfig+0x1f6>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a36:	4925      	ldr	r1, [pc, #148]	; (8002acc <HAL_RCC_ClockConfig+0x280>)
 8002a38:	69cb      	ldr	r3, [r1, #28]
 8002a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a42:	6823      	ldr	r3, [r4, #0]
 8002a44:	f013 0f10 	tst.w	r3, #16
 8002a48:	d00c      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x218>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a4a:	69a2      	ldr	r2, [r4, #24]
 8002a4c:	4b1f      	ldr	r3, [pc, #124]	; (8002acc <HAL_RCC_ClockConfig+0x280>)
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d205      	bcs.n	8002a64 <HAL_RCC_ClockConfig+0x218>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a58:	491c      	ldr	r1, [pc, #112]	; (8002acc <HAL_RCC_ClockConfig+0x280>)
 8002a5a:	69cb      	ldr	r3, [r1, #28]
 8002a5c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a60:	431a      	orrs	r2, r3
 8002a62:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a64:	6823      	ldr	r3, [r4, #0]
 8002a66:	f013 0f20 	tst.w	r3, #32
 8002a6a:	d00c      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x23a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a6c:	69e2      	ldr	r2, [r4, #28]
 8002a6e:	4b17      	ldr	r3, [pc, #92]	; (8002acc <HAL_RCC_ClockConfig+0x280>)
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d205      	bcs.n	8002a86 <HAL_RCC_ClockConfig+0x23a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002a7a:	4914      	ldr	r1, [pc, #80]	; (8002acc <HAL_RCC_ClockConfig+0x280>)
 8002a7c:	6a0b      	ldr	r3, [r1, #32]
 8002a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a82:	431a      	orrs	r2, r3
 8002a84:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a86:	f7ff fdeb 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 8002a8a:	4910      	ldr	r1, [pc, #64]	; (8002acc <HAL_RCC_ClockConfig+0x280>)
 8002a8c:	698b      	ldr	r3, [r1, #24]
 8002a8e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002a92:	4a0f      	ldr	r2, [pc, #60]	; (8002ad0 <HAL_RCC_ClockConfig+0x284>)
 8002a94:	5cd3      	ldrb	r3, [r2, r3]
 8002a96:	f003 031f 	and.w	r3, r3, #31
 8002a9a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a9c:	698b      	ldr	r3, [r1, #24]
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	5cd3      	ldrb	r3, [r2, r3]
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	fa20 f303 	lsr.w	r3, r0, r3
 8002aac:	4a09      	ldr	r2, [pc, #36]	; (8002ad4 <HAL_RCC_ClockConfig+0x288>)
 8002aae:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8002ab0:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <HAL_RCC_ClockConfig+0x28c>)
 8002ab2:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8002ab4:	4b09      	ldr	r3, [pc, #36]	; (8002adc <HAL_RCC_ClockConfig+0x290>)
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	f7fd fc0e 	bl	80002d8 <HAL_InitTick>
}
 8002abc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002abe:	2001      	movs	r0, #1
 8002ac0:	4770      	bx	lr
          return HAL_ERROR;
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	e7fa      	b.n	8002abc <HAL_RCC_ClockConfig+0x270>
 8002ac6:	bf00      	nop
 8002ac8:	52002000 	.word	0x52002000
 8002acc:	58024400 	.word	0x58024400
 8002ad0:	08008e48 	.word	0x08008e48
 8002ad4:	20000284 	.word	0x20000284
 8002ad8:	20000280 	.word	0x20000280
 8002adc:	20000004 	.word	0x20000004

08002ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae0:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002ae2:	f7ff fdbd 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 8002ae6:	4a0b      	ldr	r2, [pc, #44]	; (8002b14 <HAL_RCC_GetHCLKFreq+0x34>)
 8002ae8:	6993      	ldr	r3, [r2, #24]
 8002aea:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002aee:	490a      	ldr	r1, [pc, #40]	; (8002b18 <HAL_RCC_GetHCLKFreq+0x38>)
 8002af0:	5ccb      	ldrb	r3, [r1, r3]
 8002af2:	f003 031f 	and.w	r3, r3, #31
 8002af6:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002afa:	6992      	ldr	r2, [r2, #24]
 8002afc:	f002 020f 	and.w	r2, r2, #15
 8002b00:	5c88      	ldrb	r0, [r1, r2]
 8002b02:	f000 001f 	and.w	r0, r0, #31
 8002b06:	fa23 f000 	lsr.w	r0, r3, r0
 8002b0a:	4a04      	ldr	r2, [pc, #16]	; (8002b1c <HAL_RCC_GetHCLKFreq+0x3c>)
 8002b0c:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b0e:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <HAL_RCC_GetHCLKFreq+0x40>)
 8002b10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8002b12:	bd08      	pop	{r3, pc}
 8002b14:	58024400 	.word	0x58024400
 8002b18:	08008e48 	.word	0x08008e48
 8002b1c:	20000284 	.word	0x20000284
 8002b20:	20000280 	.word	0x20000280

08002b24 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002b24:	4b40      	ldr	r3, [pc, #256]	; (8002c28 <RCCEx_PLL2_Config+0x104>)
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d079      	beq.n	8002c24 <RCCEx_PLL2_Config+0x100>
{
 8002b30:	b570      	push	{r4, r5, r6, lr}
 8002b32:	460e      	mov	r6, r1
 8002b34:	4604      	mov	r4, r0


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8002b36:	4a3c      	ldr	r2, [pc, #240]	; (8002c28 <RCCEx_PLL2_Config+0x104>)
 8002b38:	6813      	ldr	r3, [r2, #0]
 8002b3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b40:	f7fd fc2a 	bl	8000398 <HAL_GetTick>
 8002b44:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002b46:	4b38      	ldr	r3, [pc, #224]	; (8002c28 <RCCEx_PLL2_Config+0x104>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002b4e:	d006      	beq.n	8002b5e <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002b50:	f7fd fc22 	bl	8000398 <HAL_GetTick>
 8002b54:	1b40      	subs	r0, r0, r5
 8002b56:	2802      	cmp	r0, #2
 8002b58:	d9f5      	bls.n	8002b46 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 8002b5a:	2003      	movs	r0, #3

  }


  return status;
}
 8002b5c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8002b5e:	4b32      	ldr	r3, [pc, #200]	; (8002c28 <RCCEx_PLL2_Config+0x104>)
 8002b60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b62:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8002b66:	6821      	ldr	r1, [r4, #0]
 8002b68:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8002b6c:	629a      	str	r2, [r3, #40]	; 0x28
 8002b6e:	6862      	ldr	r2, [r4, #4]
 8002b70:	3a01      	subs	r2, #1
 8002b72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b76:	68a1      	ldr	r1, [r4, #8]
 8002b78:	3901      	subs	r1, #1
 8002b7a:	0249      	lsls	r1, r1, #9
 8002b7c:	b289      	uxth	r1, r1
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	68e1      	ldr	r1, [r4, #12]
 8002b82:	3901      	subs	r1, #1
 8002b84:	0409      	lsls	r1, r1, #16
 8002b86:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	6921      	ldr	r1, [r4, #16]
 8002b8e:	3901      	subs	r1, #1
 8002b90:	0609      	lsls	r1, r1, #24
 8002b92:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8002b96:	430a      	orrs	r2, r1
 8002b98:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8002b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b9c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002ba0:	6961      	ldr	r1, [r4, #20]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8002ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba8:	f022 0220 	bic.w	r2, r2, #32
 8002bac:	69a1      	ldr	r1, [r4, #24]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8002bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb4:	f022 0210 	bic.w	r2, r2, #16
 8002bb8:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002bba:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002bbc:	4a1b      	ldr	r2, [pc, #108]	; (8002c2c <RCCEx_PLL2_Config+0x108>)
 8002bbe:	400a      	ands	r2, r1
 8002bc0:	69e1      	ldr	r1, [r4, #28]
 8002bc2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002bc6:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 8002bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bca:	f042 0210 	orr.w	r2, r2, #16
 8002bce:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8002bd0:	b9c6      	cbnz	r6, 8002c04 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002bda:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 8002bdc:	4a12      	ldr	r2, [pc, #72]	; (8002c28 <RCCEx_PLL2_Config+0x104>)
 8002bde:	6813      	ldr	r3, [r2, #0]
 8002be0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002be4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002be6:	f7fd fbd7 	bl	8000398 <HAL_GetTick>
 8002bea:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002bec:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <RCCEx_PLL2_Config+0x104>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002bf4:	d114      	bne.n	8002c20 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002bf6:	f7fd fbcf 	bl	8000398 <HAL_GetTick>
 8002bfa:	1b00      	subs	r0, r0, r4
 8002bfc:	2802      	cmp	r0, #2
 8002bfe:	d9f5      	bls.n	8002bec <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8002c00:	2003      	movs	r0, #3
 8002c02:	e7ab      	b.n	8002b5c <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8002c04:	2e01      	cmp	r6, #1
 8002c06:	d005      	beq.n	8002c14 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002c08:	4a07      	ldr	r2, [pc, #28]	; (8002c28 <RCCEx_PLL2_Config+0x104>)
 8002c0a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002c0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c10:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002c12:	e7e3      	b.n	8002bdc <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002c14:	4a04      	ldr	r2, [pc, #16]	; (8002c28 <RCCEx_PLL2_Config+0x104>)
 8002c16:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002c18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c1c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002c1e:	e7dd      	b.n	8002bdc <RCCEx_PLL2_Config+0xb8>
  return status;
 8002c20:	2000      	movs	r0, #0
 8002c22:	e79b      	b.n	8002b5c <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8002c24:	2001      	movs	r0, #1
}
 8002c26:	4770      	bx	lr
 8002c28:	58024400 	.word	0x58024400
 8002c2c:	ffff0007 	.word	0xffff0007

08002c30 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002c30:	4b40      	ldr	r3, [pc, #256]	; (8002d34 <RCCEx_PLL3_Config+0x104>)
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	f003 0303 	and.w	r3, r3, #3
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d079      	beq.n	8002d30 <RCCEx_PLL3_Config+0x100>
{
 8002c3c:	b570      	push	{r4, r5, r6, lr}
 8002c3e:	460e      	mov	r6, r1
 8002c40:	4604      	mov	r4, r0


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8002c42:	4a3c      	ldr	r2, [pc, #240]	; (8002d34 <RCCEx_PLL3_Config+0x104>)
 8002c44:	6813      	ldr	r3, [r2, #0]
 8002c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c4c:	f7fd fba4 	bl	8000398 <HAL_GetTick>
 8002c50:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002c52:	4b38      	ldr	r3, [pc, #224]	; (8002d34 <RCCEx_PLL3_Config+0x104>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002c5a:	d006      	beq.n	8002c6a <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8002c5c:	f7fd fb9c 	bl	8000398 <HAL_GetTick>
 8002c60:	1b40      	subs	r0, r0, r5
 8002c62:	2802      	cmp	r0, #2
 8002c64:	d9f5      	bls.n	8002c52 <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 8002c66:	2003      	movs	r0, #3

  }


  return status;
}
 8002c68:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8002c6a:	4b32      	ldr	r3, [pc, #200]	; (8002d34 <RCCEx_PLL3_Config+0x104>)
 8002c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c6e:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 8002c72:	6821      	ldr	r1, [r4, #0]
 8002c74:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8002c78:	629a      	str	r2, [r3, #40]	; 0x28
 8002c7a:	6862      	ldr	r2, [r4, #4]
 8002c7c:	3a01      	subs	r2, #1
 8002c7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c82:	68a1      	ldr	r1, [r4, #8]
 8002c84:	3901      	subs	r1, #1
 8002c86:	0249      	lsls	r1, r1, #9
 8002c88:	b289      	uxth	r1, r1
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	68e1      	ldr	r1, [r4, #12]
 8002c8e:	3901      	subs	r1, #1
 8002c90:	0409      	lsls	r1, r1, #16
 8002c92:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8002c96:	430a      	orrs	r2, r1
 8002c98:	6921      	ldr	r1, [r4, #16]
 8002c9a:	3901      	subs	r1, #1
 8002c9c:	0609      	lsls	r1, r1, #24
 8002c9e:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8002ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002cac:	6961      	ldr	r1, [r4, #20]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8002cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cb8:	69a1      	ldr	r1, [r4, #24]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8002cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cc4:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8002cc6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002cc8:	4a1b      	ldr	r2, [pc, #108]	; (8002d38 <RCCEx_PLL3_Config+0x108>)
 8002cca:	400a      	ands	r2, r1
 8002ccc:	69e1      	ldr	r1, [r4, #28]
 8002cce:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002cd2:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 8002cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cda:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8002cdc:	b9c6      	cbnz	r6, 8002d10 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8002cde:	461a      	mov	r2, r3
 8002ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ce6:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8002ce8:	4a12      	ldr	r2, [pc, #72]	; (8002d34 <RCCEx_PLL3_Config+0x104>)
 8002cea:	6813      	ldr	r3, [r2, #0]
 8002cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002cf2:	f7fd fb51 	bl	8000398 <HAL_GetTick>
 8002cf6:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002cf8:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <RCCEx_PLL3_Config+0x104>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002d00:	d114      	bne.n	8002d2c <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8002d02:	f7fd fb49 	bl	8000398 <HAL_GetTick>
 8002d06:	1b00      	subs	r0, r0, r4
 8002d08:	2802      	cmp	r0, #2
 8002d0a:	d9f5      	bls.n	8002cf8 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 8002d0c:	2003      	movs	r0, #3
 8002d0e:	e7ab      	b.n	8002c68 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8002d10:	2e01      	cmp	r6, #1
 8002d12:	d005      	beq.n	8002d20 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8002d14:	4a07      	ldr	r2, [pc, #28]	; (8002d34 <RCCEx_PLL3_Config+0x104>)
 8002d16:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002d18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d1c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002d1e:	e7e3      	b.n	8002ce8 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8002d20:	4a04      	ldr	r2, [pc, #16]	; (8002d34 <RCCEx_PLL3_Config+0x104>)
 8002d22:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002d24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d28:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002d2a:	e7dd      	b.n	8002ce8 <RCCEx_PLL3_Config+0xb8>
  return status;
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	e79b      	b.n	8002c68 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8002d30:	2001      	movs	r0, #1
}
 8002d32:	4770      	bx	lr
 8002d34:	58024400 	.word	0x58024400
 8002d38:	ffff0007 	.word	0xffff0007

08002d3c <HAL_RCCEx_PeriphCLKConfig>:
{
 8002d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d40:	6803      	ldr	r3, [r0, #0]
 8002d42:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002d46:	d02b      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8002d48:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8002d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d4e:	d018      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8002d50:	d907      	bls.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002d52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d56:	d01d      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002d58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d5c:	d12e      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x80>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d5e:	2500      	movs	r5, #0
 8002d60:	e006      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x34>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8002d62:	bb5b      	cbnz	r3, 8002dbc <HAL_RCCEx_PeriphCLKConfig+0x80>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d64:	4a93      	ldr	r2, [pc, #588]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002d66:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d6c:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d6e:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002d70:	4a90      	ldr	r2, [pc, #576]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002d72:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002d74:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002d78:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002d7a:	430b      	orrs	r3, r1
 8002d7c:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d7e:	2600      	movs	r6, #0
 8002d80:	e010      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002d82:	2102      	movs	r1, #2
 8002d84:	3004      	adds	r0, #4
 8002d86:	f7ff fecd 	bl	8002b24 <RCCEx_PLL2_Config>
 8002d8a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002d8c:	2d00      	cmp	r5, #0
 8002d8e:	d0ef      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002d90:	462e      	mov	r6, r5
 8002d92:	e007      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d94:	2102      	movs	r1, #2
 8002d96:	3024      	adds	r0, #36	; 0x24
 8002d98:	f7ff ff4a 	bl	8002c30 <RCCEx_PLL3_Config>
 8002d9c:	4605      	mov	r5, r0
      break;
 8002d9e:	e7f5      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x50>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002da0:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002da2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002daa:	d017      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002dac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d832      	bhi.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8002db2:	e8df f003 	tbb	[pc, r3]
 8002db6:	2406      	.short	0x2406
 8002db8:	0b2a      	.short	0x0b2a
 8002dba:	0b          	.byte	0x0b
 8002dbb:	00          	.byte	0x00
      ret = HAL_ERROR;
 8002dbc:	2601      	movs	r6, #1
 8002dbe:	4635      	mov	r5, r6
 8002dc0:	e7f0      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dc2:	4a7c      	ldr	r2, [pc, #496]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002dc4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dca:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002dcc:	bb3d      	cbnz	r5, 8002e1e <HAL_RCCEx_PeriphCLKConfig+0xe2>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dce:	4a79      	ldr	r2, [pc, #484]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002dd0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002dd2:	f023 0307 	bic.w	r3, r3, #7
 8002dd6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002dd8:	430b      	orrs	r3, r1
 8002dda:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002de2:	d033      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch(PeriphClkInit->Sai23ClockSelection)
 8002de4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002de6:	2b80      	cmp	r3, #128	; 0x80
 8002de8:	d044      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8002dea:	d81a      	bhi.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8002dec:	b30b      	cbz	r3, 8002e32 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8002dee:	2b40      	cmp	r3, #64	; 0x40
 8002df0:	d11c      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0xf0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002df2:	2100      	movs	r1, #0
 8002df4:	1d20      	adds	r0, r4, #4
 8002df6:	f7ff fe95 	bl	8002b24 <RCCEx_PLL2_Config>
 8002dfa:	4605      	mov	r5, r0
      break;
 8002dfc:	e01e      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x100>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002dfe:	2100      	movs	r1, #0
 8002e00:	1d20      	adds	r0, r4, #4
 8002e02:	f7ff fe8f 	bl	8002b24 <RCCEx_PLL2_Config>
 8002e06:	4605      	mov	r5, r0
      break;
 8002e08:	e7e0      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002e10:	f7ff ff0e 	bl	8002c30 <RCCEx_PLL3_Config>
 8002e14:	4605      	mov	r5, r0
      break;
 8002e16:	e7d9      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = HAL_ERROR;
 8002e18:	2601      	movs	r6, #1
 8002e1a:	4635      	mov	r5, r6
 8002e1c:	e7de      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002e1e:	462e      	mov	r6, r5
 8002e20:	e7dc      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai23ClockSelection)
 8002e22:	2bc0      	cmp	r3, #192	; 0xc0
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x100>
 8002e26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e2a:	d007      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x100>
      ret = HAL_ERROR;
 8002e2c:	2601      	movs	r6, #1
 8002e2e:	4635      	mov	r5, r6
 8002e30:	e00c      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x110>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e32:	4a60      	ldr	r2, [pc, #384]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002e34:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e3a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002e3c:	bb0d      	cbnz	r5, 8002e82 <HAL_RCCEx_PeriphCLKConfig+0x146>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002e3e:	4a5d      	ldr	r2, [pc, #372]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002e40:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002e42:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8002e46:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002e4c:	6823      	ldr	r3, [r4, #0]
 8002e4e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002e52:	d02f      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x178>
    switch(PeriphClkInit->Sai4AClockSelection)
 8002e54:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8002e58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e5c:	d03e      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8002e5e:	d812      	bhi.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002e60:	b1d3      	cbz	r3, 8002e98 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002e62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e66:	d114      	bne.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x156>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e68:	2100      	movs	r1, #0
 8002e6a:	1d20      	adds	r0, r4, #4
 8002e6c:	f7ff fe5a 	bl	8002b24 <RCCEx_PLL2_Config>
 8002e70:	4605      	mov	r5, r0
      break;
 8002e72:	e016      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002e74:	2100      	movs	r1, #0
 8002e76:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002e7a:	f7ff fed9 	bl	8002c30 <RCCEx_PLL3_Config>
 8002e7e:	4605      	mov	r5, r0
      break;
 8002e80:	e7dc      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x100>
 8002e82:	462e      	mov	r6, r5
 8002e84:	e7e2      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch(PeriphClkInit->Sai4AClockSelection)
 8002e86:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002e8a:	d00a      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002e8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e90:	d007      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = HAL_ERROR;
 8002e92:	2601      	movs	r6, #1
 8002e94:	4635      	mov	r5, r6
 8002e96:	e00d      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x178>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e98:	4a46      	ldr	r2, [pc, #280]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002e9a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002ea2:	bb15      	cbnz	r5, 8002eea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002ea4:	4a43      	ldr	r2, [pc, #268]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002ea6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002ea8:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8002eac:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002eb4:	6823      	ldr	r3, [r4, #0]
 8002eb6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002eba:	d02f      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->Sai4BClockSelection)
 8002ebc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8002ec0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ec4:	d037      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002ec6:	d812      	bhi.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002ec8:	b1d3      	cbz	r3, 8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8002eca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ece:	d114      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x1be>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	1d20      	adds	r0, r4, #4
 8002ed4:	f7ff fe26 	bl	8002b24 <RCCEx_PLL2_Config>
 8002ed8:	4605      	mov	r5, r0
      break;
 8002eda:	e016      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002edc:	2100      	movs	r1, #0
 8002ede:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002ee2:	f7ff fea5 	bl	8002c30 <RCCEx_PLL3_Config>
 8002ee6:	4605      	mov	r5, r0
      break;
 8002ee8:	e7db      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002eea:	462e      	mov	r6, r5
 8002eec:	e7e2      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x178>
    switch(PeriphClkInit->Sai4BClockSelection)
 8002eee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ef2:	d00a      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002ef4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ef8:	d007      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      ret = HAL_ERROR;
 8002efa:	2601      	movs	r6, #1
 8002efc:	4635      	mov	r5, r6
 8002efe:	e00d      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f00:	4a2c      	ldr	r2, [pc, #176]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002f02:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f08:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002f0a:	b9dd      	cbnz	r5, 8002f44 <HAL_RCCEx_PeriphCLKConfig+0x208>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002f0c:	4a29      	ldr	r2, [pc, #164]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002f0e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002f10:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f14:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8002f18:	430b      	orrs	r3, r1
 8002f1a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002f1c:	6823      	ldr	r3, [r4, #0]
 8002f1e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f22:	d02a      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x23e>
    switch(PeriphClkInit->QspiClockSelection)
 8002f24:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002f26:	2b10      	cmp	r3, #16
 8002f28:	d012      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8002f2a:	d90d      	bls.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d01d      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002f30:	2b30      	cmp	r3, #48	; 0x30
 8002f32:	d012      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002f34:	e009      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x20e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f36:	2100      	movs	r1, #0
 8002f38:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002f3c:	f7ff fe78 	bl	8002c30 <RCCEx_PLL3_Config>
 8002f40:	4605      	mov	r5, r0
      break;
 8002f42:	e7e2      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002f44:	462e      	mov	r6, r5
 8002f46:	e7e9      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->QspiClockSelection)
 8002f48:	b13b      	cbz	r3, 8002f5a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      ret = HAL_ERROR;
 8002f4a:	2601      	movs	r6, #1
 8002f4c:	4635      	mov	r5, r6
 8002f4e:	e014      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f50:	4a18      	ldr	r2, [pc, #96]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002f52:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f58:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002f5a:	b96d      	cbnz	r5, 8002f78 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002f5c:	4a15      	ldr	r2, [pc, #84]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002f5e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002f60:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002f64:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002f66:	430b      	orrs	r3, r1
 8002f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f6a:	e006      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x23e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f6c:	2102      	movs	r1, #2
 8002f6e:	1d20      	adds	r0, r4, #4
 8002f70:	f7ff fdd8 	bl	8002b24 <RCCEx_PLL2_Config>
 8002f74:	4605      	mov	r5, r0
      break;
 8002f76:	e7f0      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002f78:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002f7a:	6823      	ldr	r3, [r4, #0]
 8002f7c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002f80:	d027      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch(PeriphClkInit->Spi123ClockSelection)
 8002f82:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f88:	d03e      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8002f8a:	d809      	bhi.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002f8c:	b1a3      	cbz	r3, 8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f92:	d10b      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x270>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f94:	2100      	movs	r1, #0
 8002f96:	1d20      	adds	r0, r4, #4
 8002f98:	f7ff fdc4 	bl	8002b24 <RCCEx_PLL2_Config>
 8002f9c:	4605      	mov	r5, r0
      break;
 8002f9e:	e010      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    switch(PeriphClkInit->Spi123ClockSelection)
 8002fa0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fa4:	d00d      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002fa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002faa:	d00a      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x286>
      ret = HAL_ERROR;
 8002fac:	2601      	movs	r6, #1
 8002fae:	4635      	mov	r5, r6
 8002fb0:	e00f      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002fb2:	bf00      	nop
 8002fb4:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fb8:	4a93      	ldr	r2, [pc, #588]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8002fba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002fc2:	bb45      	cbnz	r5, 8003016 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002fc4:	4a90      	ldr	r2, [pc, #576]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8002fc6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002fc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fcc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002fd2:	6823      	ldr	r3, [r4, #0]
 8002fd4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002fd8:	d033      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Spi45ClockSelection)
 8002fda:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002fdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fe0:	d027      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8002fe2:	d81a      	bhi.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002fe4:	b13b      	cbz	r3, 8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fea:	d11f      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002fec:	2101      	movs	r1, #1
 8002fee:	1d20      	adds	r0, r4, #4
 8002ff0:	f7ff fd98 	bl	8002b24 <RCCEx_PLL2_Config>
 8002ff4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002ff6:	bb1d      	cbnz	r5, 8003040 <HAL_RCCEx_PeriphCLKConfig+0x304>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002ff8:	4a83      	ldr	r2, [pc, #524]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8002ffa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002ffc:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003000:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003002:	430b      	orrs	r3, r1
 8003004:	6513      	str	r3, [r2, #80]	; 0x50
 8003006:	e01c      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x306>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003008:	2100      	movs	r1, #0
 800300a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800300e:	f7ff fe0f 	bl	8002c30 <RCCEx_PLL3_Config>
 8003012:	4605      	mov	r5, r0
      break;
 8003014:	e7d5      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003016:	462e      	mov	r6, r5
 8003018:	e7db      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch(PeriphClkInit->Spi45ClockSelection)
 800301a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800301e:	d0ea      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003024:	d0e7      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003026:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800302a:	d0e4      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      ret = HAL_ERROR;
 800302c:	2601      	movs	r6, #1
 800302e:	4635      	mov	r5, r6
 8003030:	e007      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x306>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003032:	2101      	movs	r1, #1
 8003034:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003038:	f7ff fdfa 	bl	8002c30 <RCCEx_PLL3_Config>
 800303c:	4605      	mov	r5, r0
      break;
 800303e:	e7da      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003040:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003048:	d02c      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    switch(PeriphClkInit->Spi6ClockSelection)
 800304a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800304e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003052:	d01f      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8003054:	d812      	bhi.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x340>
 8003056:	b13b      	cbz	r3, 8003068 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8003058:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800305c:	d117      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x352>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800305e:	2101      	movs	r1, #1
 8003060:	1d20      	adds	r0, r4, #4
 8003062:	f7ff fd5f 	bl	8002b24 <RCCEx_PLL2_Config>
 8003066:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003068:	b9dd      	cbnz	r5, 80030a2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800306a:	4a67      	ldr	r2, [pc, #412]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 800306c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800306e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8003072:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8003076:	430b      	orrs	r3, r1
 8003078:	6593      	str	r3, [r2, #88]	; 0x58
 800307a:	e013      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    switch(PeriphClkInit->Spi6ClockSelection)
 800307c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003080:	d0f2      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8003082:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003086:	d0ef      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8003088:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800308c:	d0ec      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      ret = HAL_ERROR;
 800308e:	2601      	movs	r6, #1
 8003090:	4635      	mov	r5, r6
 8003092:	e007      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003094:	2101      	movs	r1, #1
 8003096:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800309a:	f7ff fdc9 	bl	8002c30 <RCCEx_PLL3_Config>
 800309e:	4605      	mov	r5, r0
      break;
 80030a0:	e7e2      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 80030a2:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80030a4:	6823      	ldr	r3, [r4, #0]
 80030a6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80030aa:	d01f      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->FdcanClockSelection)
 80030ac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80030ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030b2:	d006      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80030b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030b8:	d011      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 80030ba:	b13b      	cbz	r3, 80030cc <HAL_RCCEx_PeriphCLKConfig+0x390>
      ret = HAL_ERROR;
 80030bc:	2601      	movs	r6, #1
 80030be:	4635      	mov	r5, r6
 80030c0:	e014      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030c2:	4a51      	ldr	r2, [pc, #324]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80030c4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80030c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ca:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80030cc:	b96d      	cbnz	r5, 80030ea <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80030ce:	4a4e      	ldr	r2, [pc, #312]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80030d0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80030d2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80030d6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80030d8:	430b      	orrs	r3, r1
 80030da:	6513      	str	r3, [r2, #80]	; 0x50
 80030dc:	e006      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030de:	2101      	movs	r1, #1
 80030e0:	1d20      	adds	r0, r4, #4
 80030e2:	f7ff fd1f 	bl	8002b24 <RCCEx_PLL2_Config>
 80030e6:	4605      	mov	r5, r0
      break;
 80030e8:	e7f0      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x390>
 80030ea:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80030ec:	6823      	ldr	r3, [r4, #0]
 80030ee:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80030f2:	d01e      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    switch(PeriphClkInit->FmcClockSelection)
 80030f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d817      	bhi.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 80030fa:	e8df f003 	tbb	[pc, r3]
 80030fe:	0207      	.short	0x0207
 8003100:	0710      	.short	0x0710
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003102:	4a41      	ldr	r2, [pc, #260]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003104:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800310a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800310c:	b985      	cbnz	r5, 8003130 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800310e:	4a3e      	ldr	r2, [pc, #248]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003110:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003112:	f023 0303 	bic.w	r3, r3, #3
 8003116:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003118:	430b      	orrs	r3, r1
 800311a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800311c:	e009      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800311e:	2102      	movs	r1, #2
 8003120:	1d20      	adds	r0, r4, #4
 8003122:	f7ff fcff 	bl	8002b24 <RCCEx_PLL2_Config>
 8003126:	4605      	mov	r5, r0
      break;
 8003128:	e7f0      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
      ret = HAL_ERROR;
 800312a:	2601      	movs	r6, #1
 800312c:	4635      	mov	r5, r6
 800312e:	e000      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8003130:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003132:	6823      	ldr	r3, [r4, #0]
 8003134:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003138:	d11f      	bne.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x43e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	f013 0f01 	tst.w	r3, #1
 8003140:	f000 809e 	beq.w	8003280 <HAL_RCCEx_PeriphCLKConfig+0x544>
    switch(PeriphClkInit->Usart16ClockSelection)
 8003144:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003146:	2b28      	cmp	r3, #40	; 0x28
 8003148:	f200 8096 	bhi.w	8003278 <HAL_RCCEx_PeriphCLKConfig+0x53c>
 800314c:	e8df f003 	tbb	[pc, r3]
 8003150:	94949484 	.word	0x94949484
 8003154:	94949494 	.word	0x94949494
 8003158:	9494947f 	.word	0x9494947f
 800315c:	94949494 	.word	0x94949494
 8003160:	9494948d 	.word	0x9494948d
 8003164:	94949494 	.word	0x94949494
 8003168:	94949484 	.word	0x94949484
 800316c:	94949494 	.word	0x94949494
 8003170:	94949484 	.word	0x94949484
 8003174:	94949494 	.word	0x94949494
 8003178:	84          	.byte	0x84
 8003179:	00          	.byte	0x00
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800317a:	4a24      	ldr	r2, [pc, #144]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800317c:	6813      	ldr	r3, [r2, #0]
 800317e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003182:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003184:	f7fd f908 	bl	8000398 <HAL_GetTick>
 8003188:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800318a:	4b20      	ldr	r3, [pc, #128]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003192:	d105      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x464>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003194:	f7fd f900 	bl	8000398 <HAL_GetTick>
 8003198:	1bc0      	subs	r0, r0, r7
 800319a:	2864      	cmp	r0, #100	; 0x64
 800319c:	d9f5      	bls.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x44e>
        ret = HAL_TIMEOUT;
 800319e:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 80031a0:	2d00      	cmp	r5, #0
 80031a2:	d150      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80031a4:	4b18      	ldr	r3, [pc, #96]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80031a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a8:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80031ac:	4053      	eors	r3, r2
 80031ae:	f413 7f40 	tst.w	r3, #768	; 0x300
 80031b2:	d00c      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x492>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031b4:	4b14      	ldr	r3, [pc, #80]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80031b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80031bc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80031be:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80031c2:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031c4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80031c6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80031ca:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80031cc:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80031ce:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80031d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d6:	d01b      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      if(ret == HAL_OK)
 80031d8:	2d00      	cmp	r5, #0
 80031da:	d136      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x50e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031dc:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80031e0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80031e4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80031e8:	d023      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80031ea:	4a07      	ldr	r2, [pc, #28]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80031ec:	6913      	ldr	r3, [r2, #16]
 80031ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80031f2:	6113      	str	r3, [r2, #16]
 80031f4:	4904      	ldr	r1, [pc, #16]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80031f6:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80031f8:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80031fc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003200:	4313      	orrs	r3, r2
 8003202:	670b      	str	r3, [r1, #112]	; 0x70
 8003204:	e799      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8003206:	bf00      	nop
 8003208:	58024400 	.word	0x58024400
 800320c:	58024800 	.word	0x58024800
        tickstart = HAL_GetTick();
 8003210:	f7fd f8c2 	bl	8000398 <HAL_GetTick>
 8003214:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003216:	4bac      	ldr	r3, [pc, #688]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321a:	f013 0f02 	tst.w	r3, #2
 800321e:	d1db      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003220:	f7fd f8ba 	bl	8000398 <HAL_GetTick>
 8003224:	1bc0      	subs	r0, r0, r7
 8003226:	f241 3388 	movw	r3, #5000	; 0x1388
 800322a:	4298      	cmp	r0, r3
 800322c:	d9f3      	bls.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x4da>
            ret = HAL_TIMEOUT;
 800322e:	2503      	movs	r5, #3
 8003230:	e7d2      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003232:	48a5      	ldr	r0, [pc, #660]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8003234:	6902      	ldr	r2, [r0, #16]
 8003236:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800323a:	49a4      	ldr	r1, [pc, #656]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x790>)
 800323c:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8003240:	4313      	orrs	r3, r2
 8003242:	6103      	str	r3, [r0, #16]
 8003244:	e7d6      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      status = ret;
 8003246:	462e      	mov	r6, r5
 8003248:	e777      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
        status = ret;
 800324a:	462e      	mov	r6, r5
 800324c:	e775      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800324e:	2101      	movs	r1, #1
 8003250:	1d20      	adds	r0, r4, #4
 8003252:	f7ff fc67 	bl	8002b24 <RCCEx_PLL2_Config>
 8003256:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003258:	b98d      	cbnz	r5, 800327e <HAL_RCCEx_PeriphCLKConfig+0x542>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800325a:	4a9b      	ldr	r2, [pc, #620]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800325c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800325e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003262:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003264:	430b      	orrs	r3, r1
 8003266:	6553      	str	r3, [r2, #84]	; 0x54
 8003268:	e00a      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x544>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800326a:	2101      	movs	r1, #1
 800326c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003270:	f7ff fcde 	bl	8002c30 <RCCEx_PLL3_Config>
 8003274:	4605      	mov	r5, r0
      break;
 8003276:	e7ef      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x51c>
      ret = HAL_ERROR;
 8003278:	2601      	movs	r6, #1
 800327a:	4635      	mov	r5, r6
 800327c:	e000      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x544>
 800327e:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003280:	6823      	ldr	r3, [r4, #0]
 8003282:	f013 0f02 	tst.w	r3, #2
 8003286:	d020      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x58e>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003288:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800328a:	2b05      	cmp	r3, #5
 800328c:	d819      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800328e:	e8df f003 	tbb	[pc, r3]
 8003292:	0308      	.short	0x0308
 8003294:	08080811 	.word	0x08080811
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003298:	2101      	movs	r1, #1
 800329a:	1d20      	adds	r0, r4, #4
 800329c:	f7ff fc42 	bl	8002b24 <RCCEx_PLL2_Config>
 80032a0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80032a2:	b98d      	cbnz	r5, 80032c8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80032a4:	4a88      	ldr	r2, [pc, #544]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80032a6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80032a8:	f023 0307 	bic.w	r3, r3, #7
 80032ac:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80032ae:	430b      	orrs	r3, r1
 80032b0:	6553      	str	r3, [r2, #84]	; 0x54
 80032b2:	e00a      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x58e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80032b4:	2101      	movs	r1, #1
 80032b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80032ba:	f7ff fcb9 	bl	8002c30 <RCCEx_PLL3_Config>
 80032be:	4605      	mov	r5, r0
      break;
 80032c0:	e7ef      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x566>
      ret = HAL_ERROR;
 80032c2:	2601      	movs	r6, #1
 80032c4:	4635      	mov	r5, r6
 80032c6:	e000      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x58e>
 80032c8:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	f013 0f04 	tst.w	r3, #4
 80032d0:	d022      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80032d2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80032d6:	2b05      	cmp	r3, #5
 80032d8:	d81a      	bhi.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80032da:	e8df f003 	tbb	[pc, r3]
 80032de:	0308      	.short	0x0308
 80032e0:	08080812 	.word	0x08080812
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032e4:	2101      	movs	r1, #1
 80032e6:	1d20      	adds	r0, r4, #4
 80032e8:	f7ff fc1c 	bl	8002b24 <RCCEx_PLL2_Config>
 80032ec:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80032ee:	b995      	cbnz	r5, 8003316 <HAL_RCCEx_PeriphCLKConfig+0x5da>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032f0:	4a75      	ldr	r2, [pc, #468]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80032f2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80032f4:	f023 0307 	bic.w	r3, r3, #7
 80032f8:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80032fc:	430b      	orrs	r3, r1
 80032fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003300:	e00a      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003302:	2101      	movs	r1, #1
 8003304:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003308:	f7ff fc92 	bl	8002c30 <RCCEx_PLL3_Config>
 800330c:	4605      	mov	r5, r0
      break;
 800330e:	e7ee      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x5b2>
      ret = HAL_ERROR;
 8003310:	2601      	movs	r6, #1
 8003312:	4635      	mov	r5, r6
 8003314:	e000      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
 8003316:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003318:	6823      	ldr	r3, [r4, #0]
 800331a:	f013 0f20 	tst.w	r3, #32
 800331e:	d02c      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003320:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003328:	d01f      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x62e>
 800332a:	d812      	bhi.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x616>
 800332c:	b13b      	cbz	r3, 800333e <HAL_RCCEx_PeriphCLKConfig+0x602>
 800332e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003332:	d117      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x628>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003334:	2100      	movs	r1, #0
 8003336:	1d20      	adds	r0, r4, #4
 8003338:	f7ff fbf4 	bl	8002b24 <RCCEx_PLL2_Config>
 800333c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800333e:	b9dd      	cbnz	r5, 8003378 <HAL_RCCEx_PeriphCLKConfig+0x63c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003340:	4a61      	ldr	r2, [pc, #388]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8003342:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003344:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8003348:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800334c:	430b      	orrs	r3, r1
 800334e:	6553      	str	r3, [r2, #84]	; 0x54
 8003350:	e013      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003356:	d0f2      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x602>
 8003358:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800335c:	d0ef      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x602>
 800335e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003362:	d0ec      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x602>
      ret = HAL_ERROR;
 8003364:	2601      	movs	r6, #1
 8003366:	4635      	mov	r5, r6
 8003368:	e007      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x63e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800336a:	2102      	movs	r1, #2
 800336c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003370:	f7ff fc5e 	bl	8002c30 <RCCEx_PLL3_Config>
 8003374:	4605      	mov	r5, r0
      break;
 8003376:	e7e2      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x602>
 8003378:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800337a:	6823      	ldr	r3, [r4, #0]
 800337c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003380:	d02c      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003382:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800338a:	d01f      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x690>
 800338c:	d812      	bhi.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800338e:	b13b      	cbz	r3, 80033a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003394:	d117      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003396:	2100      	movs	r1, #0
 8003398:	1d20      	adds	r0, r4, #4
 800339a:	f7ff fbc3 	bl	8002b24 <RCCEx_PLL2_Config>
 800339e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80033a0:	b9dd      	cbnz	r5, 80033da <HAL_RCCEx_PeriphCLKConfig+0x69e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033a2:	4a49      	ldr	r2, [pc, #292]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80033a4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80033a6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80033aa:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80033ae:	430b      	orrs	r3, r1
 80033b0:	6593      	str	r3, [r2, #88]	; 0x58
 80033b2:	e013      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80033b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b8:	d0f2      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80033ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80033be:	d0ef      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80033c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033c4:	d0ec      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      ret = HAL_ERROR;
 80033c6:	2601      	movs	r6, #1
 80033c8:	4635      	mov	r5, r6
 80033ca:	e007      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033cc:	2102      	movs	r1, #2
 80033ce:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80033d2:	f7ff fc2d 	bl	8002c30 <RCCEx_PLL3_Config>
 80033d6:	4605      	mov	r5, r0
      break;
 80033d8:	e7e2      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80033da:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	f013 0f80 	tst.w	r3, #128	; 0x80
 80033e2:	d02c      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80033e4:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80033e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033ec:	d01f      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80033ee:	d812      	bhi.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 80033f0:	b13b      	cbz	r3, 8003402 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 80033f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033f6:	d117      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033f8:	2100      	movs	r1, #0
 80033fa:	1d20      	adds	r0, r4, #4
 80033fc:	f7ff fb92 	bl	8002b24 <RCCEx_PLL2_Config>
 8003400:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003402:	b9dd      	cbnz	r5, 800343c <HAL_RCCEx_PeriphCLKConfig+0x700>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003404:	4a30      	ldr	r2, [pc, #192]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8003406:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003408:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800340c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8003410:	430b      	orrs	r3, r1
 8003412:	6593      	str	r3, [r2, #88]	; 0x58
 8003414:	e013      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800341a:	d0f2      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 800341c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003420:	d0ef      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8003422:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003426:	d0ec      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      ret = HAL_ERROR;
 8003428:	2601      	movs	r6, #1
 800342a:	4635      	mov	r5, r6
 800342c:	e007      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x702>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800342e:	2102      	movs	r1, #2
 8003430:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003434:	f7ff fbfc 	bl	8002c30 <RCCEx_PLL3_Config>
 8003438:	4605      	mov	r5, r0
      break;
 800343a:	e7e2      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 800343c:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	f013 0f08 	tst.w	r3, #8
 8003444:	d00c      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x724>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003446:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800344a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800344e:	d028      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x766>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003450:	4a1d      	ldr	r2, [pc, #116]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8003452:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003454:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003458:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800345c:	430b      	orrs	r3, r1
 800345e:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003460:	6823      	ldr	r3, [r4, #0]
 8003462:	f013 0f10 	tst.w	r3, #16
 8003466:	d00c      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x746>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003468:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800346c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003470:	d020      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003472:	4a15      	ldr	r2, [pc, #84]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8003474:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800347a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800347e:	430b      	orrs	r3, r1
 8003480:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003482:	6823      	ldr	r3, [r4, #0]
 8003484:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003488:	d039      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    switch(PeriphClkInit->AdcClockSelection)
 800348a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800348e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003492:	d02c      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x7b2>
 8003494:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003498:	d01f      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x79e>
 800349a:	b1cb      	cbz	r3, 80034d0 <HAL_RCCEx_PeriphCLKConfig+0x794>
      ret = HAL_ERROR;
 800349c:	2601      	movs	r6, #1
 800349e:	4635      	mov	r5, r6
 80034a0:	e02d      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80034a2:	2102      	movs	r1, #2
 80034a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80034a8:	f7ff fbc2 	bl	8002c30 <RCCEx_PLL3_Config>
 80034ac:	2800      	cmp	r0, #0
 80034ae:	d0cf      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x714>
          status = HAL_ERROR;
 80034b0:	2601      	movs	r6, #1
 80034b2:	e7cd      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x714>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80034b4:	2102      	movs	r1, #2
 80034b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80034ba:	f7ff fbb9 	bl	8002c30 <RCCEx_PLL3_Config>
 80034be:	2800      	cmp	r0, #0
 80034c0:	d0d7      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x736>
        status = HAL_ERROR;
 80034c2:	2601      	movs	r6, #1
 80034c4:	e7d5      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x736>
 80034c6:	bf00      	nop
 80034c8:	58024400 	.word	0x58024400
 80034cc:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034d0:	2100      	movs	r1, #0
 80034d2:	1d20      	adds	r0, r4, #4
 80034d4:	f7ff fb26 	bl	8002b24 <RCCEx_PLL2_Config>
 80034d8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80034da:	b97d      	cbnz	r5, 80034fc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034dc:	4a5e      	ldr	r2, [pc, #376]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80034de:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80034e0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80034e4:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80034e8:	430b      	orrs	r3, r1
 80034ea:	6593      	str	r3, [r2, #88]	; 0x58
 80034ec:	e007      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034ee:	2102      	movs	r1, #2
 80034f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80034f4:	f7ff fb9c 	bl	8002c30 <RCCEx_PLL3_Config>
 80034f8:	4605      	mov	r5, r0
      break;
 80034fa:	e7ee      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x79e>
 80034fc:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034fe:	6823      	ldr	r3, [r4, #0]
 8003500:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003504:	d024      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x814>
    switch(PeriphClkInit->UsbClockSelection)
 8003506:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800350a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800350e:	d017      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x804>
 8003510:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003514:	d00a      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
 8003516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800351a:	d002      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
      ret = HAL_ERROR;
 800351c:	2601      	movs	r6, #1
 800351e:	4635      	mov	r5, r6
 8003520:	e016      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x814>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003522:	4a4d      	ldr	r2, [pc, #308]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003524:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800352a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800352c:	b97d      	cbnz	r5, 800354e <HAL_RCCEx_PeriphCLKConfig+0x812>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800352e:	4a4a      	ldr	r2, [pc, #296]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003530:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003532:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003536:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800353a:	430b      	orrs	r3, r1
 800353c:	6553      	str	r3, [r2, #84]	; 0x54
 800353e:	e007      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x814>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003540:	2101      	movs	r1, #1
 8003542:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003546:	f7ff fb73 	bl	8002c30 <RCCEx_PLL3_Config>
 800354a:	4605      	mov	r5, r0
      break;
 800354c:	e7ee      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
 800354e:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003550:	6823      	ldr	r3, [r4, #0]
 8003552:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003556:	d014      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x846>
    switch(PeriphClkInit->SdmmcClockSelection)
 8003558:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800355a:	b12b      	cbz	r3, 8003568 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800355c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003560:	d023      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x86e>
      ret = HAL_ERROR;
 8003562:	2601      	movs	r6, #1
 8003564:	4635      	mov	r5, r6
 8003566:	e00c      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x846>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003568:	4a3b      	ldr	r2, [pc, #236]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800356a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800356c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003570:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003572:	bb05      	cbnz	r5, 80035b6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003574:	4a38      	ldr	r2, [pc, #224]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003576:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800357e:	430b      	orrs	r3, r1
 8003580:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003588:	d117      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x87e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800358a:	6823      	ldr	r3, [r4, #0]
 800358c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003590:	d02d      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x8b2>
    switch(PeriphClkInit->RngClockSelection)
 8003592:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003598:	d01b      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x896>
 800359a:	d917      	bls.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x890>
 800359c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035a0:	d01c      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 80035a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035a6:	d112      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x892>
 80035a8:	e018      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80035aa:	2102      	movs	r1, #2
 80035ac:	1d20      	adds	r0, r4, #4
 80035ae:	f7ff fab9 	bl	8002b24 <RCCEx_PLL2_Config>
 80035b2:	4605      	mov	r5, r0
      break;
 80035b4:	e7dd      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x836>
 80035b6:	462e      	mov	r6, r5
 80035b8:	e7e3      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x846>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80035ba:	2102      	movs	r1, #2
 80035bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80035c0:	f7ff fb36 	bl	8002c30 <RCCEx_PLL3_Config>
 80035c4:	2800      	cmp	r0, #0
 80035c6:	d0e0      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      status=HAL_ERROR;
 80035c8:	2601      	movs	r6, #1
 80035ca:	e7de      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    switch(PeriphClkInit->RngClockSelection)
 80035cc:	b133      	cbz	r3, 80035dc <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      ret = HAL_ERROR;
 80035ce:	2601      	movs	r6, #1
 80035d0:	e00d      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035d2:	4a21      	ldr	r2, [pc, #132]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80035d4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80035d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035da:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80035dc:	2d00      	cmp	r5, #0
 80035de:	d131      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x908>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035e0:	4a1d      	ldr	r2, [pc, #116]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80035e2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80035e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80035ea:	430b      	orrs	r3, r1
 80035ec:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80035f4:	d006      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035f6:	4a18      	ldr	r2, [pc, #96]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80035f8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80035fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035fe:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003600:	430b      	orrs	r3, r1
 8003602:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800360a:	d006      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800360c:	4a12      	ldr	r2, [pc, #72]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800360e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003610:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003614:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003616:	430b      	orrs	r3, r1
 8003618:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8003620:	d009      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003622:	4b0d      	ldr	r3, [pc, #52]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003624:	691a      	ldr	r2, [r3, #16]
 8003626:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800362a:	611a      	str	r2, [r3, #16]
 800362c:	691a      	ldr	r2, [r3, #16]
 800362e:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8003632:	430a      	orrs	r2, r1
 8003634:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003636:	6823      	ldr	r3, [r4, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	db05      	blt.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x90c>
  if (status == HAL_OK)
 800363c:	b106      	cbz	r6, 8003640 <HAL_RCCEx_PeriphCLKConfig+0x904>
  return HAL_ERROR;
 800363e:	2601      	movs	r6, #1
}
 8003640:	4630      	mov	r0, r6
 8003642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003644:	462e      	mov	r6, r5
 8003646:	e7d2      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x8b2>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003648:	4a03      	ldr	r2, [pc, #12]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800364a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800364c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003650:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003652:	430b      	orrs	r3, r1
 8003654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003656:	e7f1      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x900>
 8003658:	58024400 	.word	0x58024400

0800365c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800365c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800365e:	f7ff fa3f 	bl	8002ae0 <HAL_RCC_GetHCLKFreq>
 8003662:	4b05      	ldr	r3, [pc, #20]	; (8003678 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800366a:	4a04      	ldr	r2, [pc, #16]	; (800367c <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800366c:	5cd3      	ldrb	r3, [r2, r3]
 800366e:	f003 031f 	and.w	r3, r3, #31
}
 8003672:	40d8      	lsrs	r0, r3
 8003674:	bd08      	pop	{r3, pc}
 8003676:	bf00      	nop
 8003678:	58024400 	.word	0x58024400
 800367c:	08008e48 	.word	0x08008e48

08003680 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8003680:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003682:	4978      	ldr	r1, [pc, #480]	; (8003864 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8003684:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003686:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003688:	f3c2 3205 	ubfx	r2, r2, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800368c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800368e:	f3c3 1300 	ubfx	r3, r3, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003692:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8003694:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8003698:	fb03 f301 	mul.w	r3, r3, r1
  if (pll2m != 0U)
 800369c:	2a00      	cmp	r2, #0
 800369e:	f000 80db 	beq.w	8003858 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>
 80036a2:	f004 0403 	and.w	r4, r4, #3
 80036a6:	ee07 3a90 	vmov	s15, r3
 80036aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 80036ae:	2c01      	cmp	r4, #1
 80036b0:	d066      	beq.n	8003780 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 80036b2:	b1fc      	cbz	r4, 80036f4 <HAL_RCCEx_GetPLL2ClockFreq+0x74>
 80036b4:	2c02      	cmp	r4, #2
 80036b6:	f000 80b2 	beq.w	800381e <HAL_RCCEx_GetPLL2ClockFreq+0x19e>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80036ba:	ee07 2a10 	vmov	s14, r2
 80036be:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80036c2:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8003868 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80036c6:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80036ca:	4b66      	ldr	r3, [pc, #408]	; (8003864 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80036cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d2:	ee07 3a10 	vmov	s14, r3
 80036d6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80036da:	ed9f 6a64 	vldr	s12, [pc, #400]	; 800386c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80036de:	ee67 7a86 	vmul.f32	s15, s15, s12
 80036e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80036ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80036f2:	e061      	b.n	80037b8 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036f4:	4b5b      	ldr	r3, [pc, #364]	; (8003864 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f013 0f20 	tst.w	r3, #32
 80036fc:	d023      	beq.n	8003746 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80036fe:	4c59      	ldr	r4, [pc, #356]	; (8003864 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8003700:	6821      	ldr	r1, [r4, #0]
 8003702:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8003706:	4b5a      	ldr	r3, [pc, #360]	; (8003870 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 8003708:	40cb      	lsrs	r3, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800370a:	ee07 3a10 	vmov	s14, r3
 800370e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003712:	ee06 2a90 	vmov	s13, r2
 8003716:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 800371a:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800371e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003724:	ee07 3a10 	vmov	s14, r3
 8003728:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800372c:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 800386c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8003730:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003738:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800373c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003740:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003744:	e038      	b.n	80037b8 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003746:	ee07 2a10 	vmov	s14, r2
 800374a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800374e:	ed9f 6a49 	vldr	s12, [pc, #292]	; 8003874 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 8003752:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003756:	4b43      	ldr	r3, [pc, #268]	; (8003864 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8003758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800375e:	ee07 3a10 	vmov	s14, r3
 8003762:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003766:	ed9f 6a41 	vldr	s12, [pc, #260]	; 800386c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800376a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800376e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003772:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003776:	ee77 7a87 	vadd.f32	s15, s15, s14
 800377a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800377e:	e01b      	b.n	80037b8 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003780:	ee07 2a10 	vmov	s14, r2
 8003784:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003788:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8003868 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800378c:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003790:	4b34      	ldr	r3, [pc, #208]	; (8003864 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8003792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003798:	ee07 3a10 	vmov	s14, r3
 800379c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80037a0:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800386c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80037a4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80037a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80037b8:	4a2a      	ldr	r2, [pc, #168]	; (8003864 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80037ba:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80037bc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80037c0:	ee07 3a10 	vmov	s14, r3
 80037c4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80037c8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80037cc:	ee37 7a06 	vadd.f32	s14, s14, s12
 80037d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037d8:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80037dc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80037de:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80037e2:	ee07 3a10 	vmov	s14, r3
 80037e6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80037ea:	ee37 7a06 	vadd.f32	s14, s14, s12
 80037ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037f6:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80037fa:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80037fc:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003800:	ee07 3a90 	vmov	s15, r3
 8003804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003808:	ee77 7a86 	vadd.f32	s15, s15, s12
 800380c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003810:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003814:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8003818:	f85d 4b04 	ldr.w	r4, [sp], #4
 800381c:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800381e:	ee07 2a10 	vmov	s14, r2
 8003822:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003826:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8003878 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 800382a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800382e:	4b0d      	ldr	r3, [pc, #52]	; (8003864 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8003830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003836:	ee07 3a10 	vmov	s14, r3
 800383a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800383e:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 800386c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8003842:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800384a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800384e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003852:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8003856:	e7af      	b.n	80037b8 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800385c:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800385e:	6083      	str	r3, [r0, #8]
}
 8003860:	e7da      	b.n	8003818 <HAL_RCCEx_GetPLL2ClockFreq+0x198>
 8003862:	bf00      	nop
 8003864:	58024400 	.word	0x58024400
 8003868:	4a742400 	.word	0x4a742400
 800386c:	39000000 	.word	0x39000000
 8003870:	03d09000 	.word	0x03d09000
 8003874:	4c742400 	.word	0x4c742400
 8003878:	4bbebc20 	.word	0x4bbebc20

0800387c <HAL_RCCEx_GetPLL3ClockFreq>:
{
 800387c:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800387e:	4978      	ldr	r1, [pc, #480]	; (8003a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8003880:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003882:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003884:	f3c2 5205 	ubfx	r2, r2, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003888:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800388a:	f3c3 2300 	ubfx	r3, r3, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800388e:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003890:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8003894:	fb03 f301 	mul.w	r3, r3, r1
  if (pll3m != 0U)
 8003898:	2a00      	cmp	r2, #0
 800389a:	f000 80db 	beq.w	8003a54 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
 800389e:	f004 0403 	and.w	r4, r4, #3
 80038a2:	ee07 3a90 	vmov	s15, r3
 80038a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 80038aa:	2c01      	cmp	r4, #1
 80038ac:	d066      	beq.n	800397c <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 80038ae:	b1fc      	cbz	r4, 80038f0 <HAL_RCCEx_GetPLL3ClockFreq+0x74>
 80038b0:	2c02      	cmp	r4, #2
 80038b2:	f000 80b2 	beq.w	8003a1a <HAL_RCCEx_GetPLL3ClockFreq+0x19e>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038b6:	ee07 2a10 	vmov	s14, r2
 80038ba:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80038be:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8003a64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 80038c2:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80038c6:	4b66      	ldr	r3, [pc, #408]	; (8003a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ce:	ee07 3a10 	vmov	s14, r3
 80038d2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80038d6:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8003a68 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 80038da:	ee67 7a86 	vmul.f32	s15, s15, s12
 80038de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80038ee:	e061      	b.n	80039b4 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038f0:	4b5b      	ldr	r3, [pc, #364]	; (8003a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f013 0f20 	tst.w	r3, #32
 80038f8:	d023      	beq.n	8003942 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038fa:	4c59      	ldr	r4, [pc, #356]	; (8003a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80038fc:	6821      	ldr	r1, [r4, #0]
 80038fe:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8003902:	4b5a      	ldr	r3, [pc, #360]	; (8003a6c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 8003904:	40cb      	lsrs	r3, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003906:	ee07 3a10 	vmov	s14, r3
 800390a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800390e:	ee06 2a90 	vmov	s13, r2
 8003912:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8003916:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800391a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800391c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003920:	ee07 3a10 	vmov	s14, r3
 8003924:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003928:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8003a68 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800392c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003934:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003938:	ee77 7a87 	vadd.f32	s15, s15, s14
 800393c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003940:	e038      	b.n	80039b4 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003942:	ee07 2a10 	vmov	s14, r2
 8003946:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800394a:	ed9f 6a49 	vldr	s12, [pc, #292]	; 8003a70 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 800394e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003952:	4b43      	ldr	r3, [pc, #268]	; (8003a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800395a:	ee07 3a10 	vmov	s14, r3
 800395e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003962:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8003a68 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8003966:	ee67 7a86 	vmul.f32	s15, s15, s12
 800396a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800396e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003972:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003976:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800397a:	e01b      	b.n	80039b4 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800397c:	ee07 2a10 	vmov	s14, r2
 8003980:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003984:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8003a64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8003988:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800398c:	4b34      	ldr	r3, [pc, #208]	; (8003a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003994:	ee07 3a10 	vmov	s14, r3
 8003998:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800399c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8003a68 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 80039a0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80039a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80039b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80039b4:	4a2a      	ldr	r2, [pc, #168]	; (8003a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80039b6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80039b8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80039bc:	ee07 3a10 	vmov	s14, r3
 80039c0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80039c4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80039c8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80039cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039d4:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80039d8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80039da:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80039de:	ee07 3a10 	vmov	s14, r3
 80039e2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80039e6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80039ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039f2:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80039f6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80039f8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80039fc:	ee07 3a90 	vmov	s15, r3
 8003a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a04:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003a08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a0c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003a10:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8003a14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a18:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a1a:	ee07 2a10 	vmov	s14, r2
 8003a1e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003a22:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8003a74 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 8003a26:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003a2a:	4b0d      	ldr	r3, [pc, #52]	; (8003a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a32:	ee07 3a10 	vmov	s14, r3
 8003a36:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003a3a:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8003a68 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8003a3e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8003a52:	e7af      	b.n	80039b4 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003a58:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003a5a:	6083      	str	r3, [r0, #8]
}
 8003a5c:	e7da      	b.n	8003a14 <HAL_RCCEx_GetPLL3ClockFreq+0x198>
 8003a5e:	bf00      	nop
 8003a60:	58024400 	.word	0x58024400
 8003a64:	4a742400 	.word	0x4a742400
 8003a68:	39000000 	.word	0x39000000
 8003a6c:	03d09000 	.word	0x03d09000
 8003a70:	4c742400 	.word	0x4c742400
 8003a74:	4bbebc20 	.word	0x4bbebc20

08003a78 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 8003a78:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a7a:	4978      	ldr	r1, [pc, #480]	; (8003c5c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8003a7c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8003a7e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003a80:	f3c2 1205 	ubfx	r2, r2, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8003a84:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8003a86:	f003 0301 	and.w	r3, r3, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003a8a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003a8c:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8003a90:	fb03 f301 	mul.w	r3, r3, r1
  if (pll1m != 0U)
 8003a94:	2a00      	cmp	r2, #0
 8003a96:	f000 80db 	beq.w	8003c50 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
 8003a9a:	f004 0403 	and.w	r4, r4, #3
 8003a9e:	ee07 3a90 	vmov	s15, r3
 8003aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8003aa6:	2c01      	cmp	r4, #1
 8003aa8:	d066      	beq.n	8003b78 <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 8003aaa:	b1fc      	cbz	r4, 8003aec <HAL_RCCEx_GetPLL1ClockFreq+0x74>
 8003aac:	2c02      	cmp	r4, #2
 8003aae:	f000 80b2 	beq.w	8003c16 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ab2:	ee07 2a10 	vmov	s14, r2
 8003ab6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003aba:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8003c60 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8003abe:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003ac2:	4b66      	ldr	r3, [pc, #408]	; (8003c5c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aca:	ee07 3a10 	vmov	s14, r3
 8003ace:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003ad2:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8003c64 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8003ad6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ade:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ae2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ae6:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8003aea:	e061      	b.n	8003bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003aec:	4b5b      	ldr	r3, [pc, #364]	; (8003c5c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f013 0f20 	tst.w	r3, #32
 8003af4:	d023      	beq.n	8003b3e <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003af6:	4c59      	ldr	r4, [pc, #356]	; (8003c5c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8003af8:	6821      	ldr	r1, [r4, #0]
 8003afa:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8003afe:	4b5a      	ldr	r3, [pc, #360]	; (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>)
 8003b00:	40cb      	lsrs	r3, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b02:	ee07 3a10 	vmov	s14, r3
 8003b06:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003b0a:	ee06 2a90 	vmov	s13, r2
 8003b0e:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8003b12:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8003b16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b1c:	ee07 3a10 	vmov	s14, r3
 8003b20:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003b24:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8003c64 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8003b28:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b38:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b3c:	e038      	b.n	8003bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b3e:	ee07 2a10 	vmov	s14, r2
 8003b42:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003b46:	ed9f 6a49 	vldr	s12, [pc, #292]	; 8003c6c <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 8003b4a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003b4e:	4b43      	ldr	r3, [pc, #268]	; (8003c5c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b56:	ee07 3a10 	vmov	s14, r3
 8003b5a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003b5e:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8003c64 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8003b62:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003b66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b72:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b76:	e01b      	b.n	8003bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b78:	ee07 2a10 	vmov	s14, r2
 8003b7c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003b80:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8003c60 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8003b84:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003b88:	4b34      	ldr	r3, [pc, #208]	; (8003c5c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b90:	ee07 3a10 	vmov	s14, r3
 8003b94:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003b98:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8003c64 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8003b9c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ba4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ba8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003bac:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8003bb0:	4a2a      	ldr	r2, [pc, #168]	; (8003c5c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8003bb2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003bb4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003bb8:	ee07 3a10 	vmov	s14, r3
 8003bbc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003bc0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003bc4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003bc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bd0:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8003bd4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003bd6:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003bda:	ee07 3a10 	vmov	s14, r3
 8003bde:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003be2:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003be6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bee:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8003bf2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003bf4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003bf8:	ee07 3a90 	vmov	s15, r3
 8003bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c00:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003c04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c08:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003c0c:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8003c10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c14:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c16:	ee07 2a10 	vmov	s14, r2
 8003c1a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003c1e:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8003c70 <HAL_RCCEx_GetPLL1ClockFreq+0x1f8>
 8003c22:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003c26:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c2e:	ee07 3a10 	vmov	s14, r3
 8003c32:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003c36:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8003c64 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8003c3a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003c3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c4a:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8003c4e:	e7af      	b.n	8003bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003c54:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003c56:	6083      	str	r3, [r0, #8]
}
 8003c58:	e7da      	b.n	8003c10 <HAL_RCCEx_GetPLL1ClockFreq+0x198>
 8003c5a:	bf00      	nop
 8003c5c:	58024400 	.word	0x58024400
 8003c60:	4a742400 	.word	0x4a742400
 8003c64:	39000000 	.word	0x39000000
 8003c68:	03d09000 	.word	0x03d09000
 8003c6c:	4c742400 	.word	0x4c742400
 8003c70:	4bbebc20 	.word	0x4bbebc20

08003c74 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8003c74:	b500      	push	{lr}
 8003c76:	b08b      	sub	sp, #44	; 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003c78:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003c7c:	d01b      	beq.n	8003cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8003c7e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003c82:	d048      	beq.n	8003d16 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8003c84:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003c88:	d078      	beq.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8003c8a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8003c8e:	f000 80ab 	beq.w	8003de8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8003c92:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8003c96:	f000 80dd 	beq.w	8003e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8003c9a:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8003c9e:	f000 810f 	beq.w	8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8003ca2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8003ca6:	f000 8131 	beq.w	8003f0c <HAL_RCCEx_GetPeriphCLKFreq+0x298>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8003caa:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8003cae:	f000 8145 	beq.w	8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
      frequency = 0;
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	e00c      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8003cb6:	4b9e      	ldr	r3, [pc, #632]	; (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cba:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	f200 8164 	bhi.w	8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8003cc4:	e8df f003 	tbb	[pc, r3]
 8003cc8:	03110c07 	.word	0x03110c07
 8003ccc:	16          	.byte	0x16
 8003ccd:	00          	.byte	0x00
          frequency = EXTERNAL_CLOCK_VALUE;
 8003cce:	4899      	ldr	r0, [pc, #612]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
}
 8003cd0:	b00b      	add	sp, #44	; 0x2c
 8003cd2:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003cd6:	a807      	add	r0, sp, #28
 8003cd8:	f7ff fece 	bl	8003a78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003cdc:	9808      	ldr	r0, [sp, #32]
          break;
 8003cde:	e7f7      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ce0:	a804      	add	r0, sp, #16
 8003ce2:	f7ff fccd 	bl	8003680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003ce6:	9804      	ldr	r0, [sp, #16]
          break;
 8003ce8:	e7f2      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003cea:	a801      	add	r0, sp, #4
 8003cec:	f7ff fdc6 	bl	800387c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003cf0:	9801      	ldr	r0, [sp, #4]
          break;
 8003cf2:	e7ed      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003cf4:	4b8e      	ldr	r3, [pc, #568]	; (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8003cf8:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8003cfc:	f000 8148 	beq.w	8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8003d00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d04:	f000 8146 	beq.w	8003f94 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8003d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d0c:	d001      	beq.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = 0;
 8003d0e:	2000      	movs	r0, #0
 8003d10:	e7de      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8003d12:	4889      	ldr	r0, [pc, #548]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8003d14:	e7dc      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8003d16:	4b86      	ldr	r3, [pc, #536]	; (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d1a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8003d1e:	2b80      	cmp	r3, #128	; 0x80
 8003d20:	d025      	beq.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003d22:	d808      	bhi.n	8003d36 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 8003d24:	b1f3      	cbz	r3, 8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8003d26:	2b40      	cmp	r3, #64	; 0x40
 8003d28:	f040 8136 	bne.w	8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003d2c:	a804      	add	r0, sp, #16
 8003d2e:	f7ff fca7 	bl	8003680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003d32:	9804      	ldr	r0, [sp, #16]
          break;
 8003d34:	e7cc      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (saiclocksource)
 8003d36:	2bc0      	cmp	r3, #192	; 0xc0
 8003d38:	d012      	beq.n	8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8003d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d3e:	f040 812b 	bne.w	8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003d42:	4b7b      	ldr	r3, [pc, #492]	; (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8003d46:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8003d4a:	f000 8127 	beq.w	8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8003d4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d52:	f000 8125 	beq.w	8003fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8003d56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d5a:	d00d      	beq.n	8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            frequency = 0;
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	e7b7      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 8003d60:	4874      	ldr	r0, [pc, #464]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8003d62:	e7b5      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003d64:	a807      	add	r0, sp, #28
 8003d66:	f7ff fe87 	bl	8003a78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003d6a:	9808      	ldr	r0, [sp, #32]
          break;
 8003d6c:	e7b0      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003d6e:	a801      	add	r0, sp, #4
 8003d70:	f7ff fd84 	bl	800387c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003d74:	9801      	ldr	r0, [sp, #4]
          break;
 8003d76:	e7ab      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8003d78:	486f      	ldr	r0, [pc, #444]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8003d7a:	e7a9      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8003d7c:	4b6c      	ldr	r3, [pc, #432]	; (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d80:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8003d84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d88:	d027      	beq.n	8003dda <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003d8a:	d809      	bhi.n	8003da0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8003d8c:	b303      	cbz	r3, 8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 8003d8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d92:	f040 8107 	bne.w	8003fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003d96:	a804      	add	r0, sp, #16
 8003d98:	f7ff fc72 	bl	8003680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003d9c:	9804      	ldr	r0, [sp, #16]
          break;
 8003d9e:	e797      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (saiclocksource)
 8003da0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003da4:	d012      	beq.n	8003dcc <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003da6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003daa:	f040 80fb 	bne.w	8003fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003dae:	4b60      	ldr	r3, [pc, #384]	; (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8003db2:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8003db6:	f000 80f7 	beq.w	8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8003dba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dbe:	f000 80f5 	beq.w	8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x338>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8003dc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc6:	d00d      	beq.n	8003de4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
            frequency = 0;
 8003dc8:	2000      	movs	r0, #0
 8003dca:	e781      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 8003dcc:	4859      	ldr	r0, [pc, #356]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8003dce:	e77f      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003dd0:	a807      	add	r0, sp, #28
 8003dd2:	f7ff fe51 	bl	8003a78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003dd6:	9808      	ldr	r0, [sp, #32]
          break;
 8003dd8:	e77a      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003dda:	a801      	add	r0, sp, #4
 8003ddc:	f7ff fd4e 	bl	800387c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003de0:	9801      	ldr	r0, [sp, #4]
          break;
 8003de2:	e775      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8003de4:	4854      	ldr	r0, [pc, #336]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8003de6:	e773      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8003de8:	4b51      	ldr	r3, [pc, #324]	; (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dec:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8003df0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003df4:	d027      	beq.n	8003e46 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
 8003df6:	d809      	bhi.n	8003e0c <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8003df8:	b303      	cbz	r3, 8003e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 8003dfa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dfe:	f040 80d7 	bne.w	8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003e02:	a804      	add	r0, sp, #16
 8003e04:	f7ff fc3c 	bl	8003680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003e08:	9804      	ldr	r0, [sp, #16]
          break;
 8003e0a:	e761      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (saiclocksource)
 8003e0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e10:	d012      	beq.n	8003e38 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8003e12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e16:	f040 80cb 	bne.w	8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003e1a:	4b45      	ldr	r3, [pc, #276]	; (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8003e1e:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8003e22:	f000 80c7 	beq.w	8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8003e26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e2a:	f000 80c5 	beq.w	8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8003e2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e32:	d00d      	beq.n	8003e50 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
            frequency = 0;
 8003e34:	2000      	movs	r0, #0
 8003e36:	e74b      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 8003e38:	483e      	ldr	r0, [pc, #248]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8003e3a:	e749      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003e3c:	a807      	add	r0, sp, #28
 8003e3e:	f7ff fe1b 	bl	8003a78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003e42:	9808      	ldr	r0, [sp, #32]
          break;
 8003e44:	e744      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003e46:	a801      	add	r0, sp, #4
 8003e48:	f7ff fd18 	bl	800387c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003e4c:	9801      	ldr	r0, [sp, #4]
          break;
 8003e4e:	e73f      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8003e50:	4839      	ldr	r0, [pc, #228]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8003e52:	e73d      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8003e54:	4b36      	ldr	r3, [pc, #216]	; (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e58:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8003e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e60:	d027      	beq.n	8003eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8003e62:	d809      	bhi.n	8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 8003e64:	b303      	cbz	r3, 8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8003e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6a:	f040 80a7 	bne.w	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003e6e:	a804      	add	r0, sp, #16
 8003e70:	f7ff fc06 	bl	8003680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003e74:	9804      	ldr	r0, [sp, #16]
          break;
 8003e76:	e72b      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (srcclk)
 8003e78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e7c:	d012      	beq.n	8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8003e7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e82:	f040 809b 	bne.w	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003e86:	4b2a      	ldr	r3, [pc, #168]	; (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8003e8a:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8003e8e:	f000 8097 	beq.w	8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8003e92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e96:	f000 8095 	beq.w	8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8003e9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e9e:	d00d      	beq.n	8003ebc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
            frequency = 0;
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	e715      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 8003ea4:	4823      	ldr	r0, [pc, #140]	; (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8003ea6:	e713      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003ea8:	a807      	add	r0, sp, #28
 8003eaa:	f7ff fde5 	bl	8003a78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003eae:	9808      	ldr	r0, [sp, #32]
          break;
 8003eb0:	e70e      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003eb2:	a801      	add	r0, sp, #4
 8003eb4:	f7ff fce2 	bl	800387c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003eb8:	9801      	ldr	r0, [sp, #4]
          break;
 8003eba:	e709      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8003ebc:	481e      	ldr	r0, [pc, #120]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8003ebe:	e707      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8003ec0:	4b1b      	ldr	r3, [pc, #108]	; (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8003ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ecc:	d00a      	beq.n	8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
 8003ece:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ed2:	d00c      	beq.n	8003eee <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8003ed4:	b10b      	cbz	r3, 8003eda <HAL_RCCEx_GetPeriphCLKFreq+0x266>
          frequency = 0;
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	e6fa      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003eda:	a804      	add	r0, sp, #16
 8003edc:	f7ff fbd0 	bl	8003680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003ee0:	9804      	ldr	r0, [sp, #16]
          break;
 8003ee2:	e6f5      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003ee4:	a801      	add	r0, sp, #4
 8003ee6:	f7ff fcc9 	bl	800387c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8003eea:	9803      	ldr	r0, [sp, #12]
          break;
 8003eec:	e6f0      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003eee:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8003ef2:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8003ef6:	d067      	beq.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8003ef8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003efc:	d066      	beq.n	8003fcc <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8003efe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f02:	d001      	beq.n	8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
            frequency = 0;
 8003f04:	2000      	movs	r0, #0
 8003f06:	e6e3      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8003f08:	480b      	ldr	r0, [pc, #44]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8003f0a:	e6e1      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8003f0c:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 8003f10:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8003f14:	d002      	beq.n	8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
 8003f16:	b933      	cbnz	r3, 8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
          frequency = 0;
 8003f18:	2000      	movs	r0, #0
 8003f1a:	e6d9      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003f1c:	a807      	add	r0, sp, #28
 8003f1e:	f7ff fdab 	bl	8003a78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003f22:	9808      	ldr	r0, [sp, #32]
          break;
 8003f24:	e6d4      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003f26:	a804      	add	r0, sp, #16
 8003f28:	f7ff fbaa 	bl	8003680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003f2c:	9806      	ldr	r0, [sp, #24]
          break;
 8003f2e:	e6cf      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8003f30:	58024400 	.word	0x58024400
 8003f34:	00bb8000 	.word	0x00bb8000
 8003f38:	017d7840 	.word	0x017d7840
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8003f3c:	4b25      	ldr	r3, [pc, #148]	; (8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f40:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8003f44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f48:	d019      	beq.n	8003f7e <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
 8003f4a:	d90a      	bls.n	8003f62 <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
 8003f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f50:	d03e      	beq.n	8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8003f52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f56:	d017      	beq.n	8003f88 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8003f58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f5c:	d00a      	beq.n	8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
          frequency = 0;
 8003f5e:	2000      	movs	r0, #0
          break;
 8003f60:	e6b6      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (srcclk)
 8003f62:	b14b      	cbz	r3, 8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8003f64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f68:	d1f9      	bne.n	8003f5e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003f6a:	a804      	add	r0, sp, #16
 8003f6c:	f7ff fb88 	bl	8003680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003f70:	9805      	ldr	r0, [sp, #20]
          break;
 8003f72:	e6ad      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = HSI_VALUE;
 8003f74:	4818      	ldr	r0, [pc, #96]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8003f76:	e6ab      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8003f78:	f7ff fb70 	bl	800365c <HAL_RCCEx_GetD3PCLK1Freq>
          break;
 8003f7c:	e6a8      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003f7e:	a801      	add	r0, sp, #4
 8003f80:	f7ff fc7c 	bl	800387c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003f84:	9802      	ldr	r0, [sp, #8]
          break;
 8003f86:	e6a3      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = HSE_VALUE;
 8003f88:	4814      	ldr	r0, [pc, #80]	; (8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
          break;
 8003f8a:	e6a1      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 8003f8c:	2000      	movs	r0, #0
 8003f8e:	e69f      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8003f90:	4811      	ldr	r0, [pc, #68]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8003f92:	e69d      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8003f94:	4812      	ldr	r0, [pc, #72]	; (8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8003f96:	e69b      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 8003f98:	2000      	movs	r0, #0
 8003f9a:	e699      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8003f9c:	480e      	ldr	r0, [pc, #56]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8003f9e:	e697      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8003fa0:	480f      	ldr	r0, [pc, #60]	; (8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8003fa2:	e695      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	e693      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8003fa8:	480b      	ldr	r0, [pc, #44]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8003faa:	e691      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8003fac:	480c      	ldr	r0, [pc, #48]	; (8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8003fae:	e68f      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	e68d      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8003fb4:	4808      	ldr	r0, [pc, #32]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8003fb6:	e68b      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8003fb8:	4809      	ldr	r0, [pc, #36]	; (8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8003fba:	e689      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	e687      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8003fc0:	4805      	ldr	r0, [pc, #20]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8003fc2:	e685      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8003fc4:	4806      	ldr	r0, [pc, #24]	; (8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8003fc6:	e683      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8003fc8:	4803      	ldr	r0, [pc, #12]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8003fca:	e681      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8003fcc:	4804      	ldr	r0, [pc, #16]	; (8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8003fce:	e67f      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = CSI_VALUE;
 8003fd0:	4803      	ldr	r0, [pc, #12]	; (8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
  return frequency;
 8003fd2:	e67d      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8003fd4:	58024400 	.word	0x58024400
 8003fd8:	03d09000 	.word	0x03d09000
 8003fdc:	017d7840 	.word	0x017d7840
 8003fe0:	003d0900 	.word	0x003d0900

08003fe4 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	d036      	beq.n	8004056 <HAL_RNG_Init+0x72>
{
 8003fe8:	b538      	push	{r3, r4, r5, lr}
 8003fea:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003fec:	7a43      	ldrb	r3, [r0, #9]
 8003fee:	b1b3      	cbz	r3, 800401e <HAL_RNG_Init+0x3a>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	7263      	strb	r3, [r4, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8003ff4:	6822      	ldr	r2, [r4, #0]
 8003ff6:	6813      	ldr	r3, [r2, #0]
 8003ff8:	f023 0320 	bic.w	r3, r3, #32
 8003ffc:	6861      	ldr	r1, [r4, #4]
 8003ffe:	430b      	orrs	r3, r1
 8004000:	6013      	str	r3, [r2, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004002:	6822      	ldr	r2, [r4, #0]
 8004004:	6813      	ldr	r3, [r2, #0]
 8004006:	f043 0304 	orr.w	r3, r3, #4
 800400a:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004014:	d007      	beq.n	8004026 <HAL_RNG_Init+0x42>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8004016:	2304      	movs	r3, #4
 8004018:	7263      	strb	r3, [r4, #9]
    return HAL_ERROR;
 800401a:	2001      	movs	r0, #1
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 800401c:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 800401e:	7203      	strb	r3, [r0, #8]
    HAL_RNG_MspInit(hrng);
 8004020:	f002 f8f4 	bl	800620c <HAL_RNG_MspInit>
 8004024:	e7e4      	b.n	8003ff0 <HAL_RNG_Init+0xc>
  tickstart = HAL_GetTick();
 8004026:	f7fc f9b7 	bl	8000398 <HAL_GetTick>
 800402a:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f013 0f04 	tst.w	r3, #4
 8004034:	d00a      	beq.n	800404c <HAL_RNG_Init+0x68>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004036:	f7fc f9af 	bl	8000398 <HAL_GetTick>
 800403a:	1b40      	subs	r0, r0, r5
 800403c:	2802      	cmp	r0, #2
 800403e:	d9f5      	bls.n	800402c <HAL_RNG_Init+0x48>
      hrng->State = HAL_RNG_STATE_ERROR;
 8004040:	2304      	movs	r3, #4
 8004042:	7263      	strb	r3, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004044:	2302      	movs	r3, #2
 8004046:	60e3      	str	r3, [r4, #12]
      return HAL_ERROR;
 8004048:	2001      	movs	r0, #1
 800404a:	e7e7      	b.n	800401c <HAL_RNG_Init+0x38>
  hrng->State = HAL_RNG_STATE_READY;
 800404c:	2301      	movs	r3, #1
 800404e:	7263      	strb	r3, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004050:	2000      	movs	r0, #0
 8004052:	60e0      	str	r0, [r4, #12]
  return HAL_OK;
 8004054:	e7e2      	b.n	800401c <HAL_RNG_Init+0x38>
    return HAL_ERROR;
 8004056:	2001      	movs	r0, #1
}
 8004058:	4770      	bx	lr

0800405a <HAL_RNG_GenerateRandomNumber>:
{
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 800405a:	7a03      	ldrb	r3, [r0, #8]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d02b      	beq.n	80040b8 <HAL_RNG_GenerateRandomNumber+0x5e>
{
 8004060:	b570      	push	{r4, r5, r6, lr}
 8004062:	460d      	mov	r5, r1
 8004064:	4604      	mov	r4, r0
  __HAL_LOCK(hrng);
 8004066:	2301      	movs	r3, #1
 8004068:	7203      	strb	r3, [r0, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800406a:	7a43      	ldrb	r3, [r0, #9]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b01      	cmp	r3, #1
 8004070:	d005      	beq.n	800407e <HAL_RNG_GenerateRandomNumber+0x24>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004072:	2304      	movs	r3, #4
 8004074:	60c3      	str	r3, [r0, #12]
    status = HAL_ERROR;
 8004076:	2001      	movs	r0, #1
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004078:	2300      	movs	r3, #0
 800407a:	7223      	strb	r3, [r4, #8]

  return status;
}
 800407c:	bd70      	pop	{r4, r5, r6, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 800407e:	2302      	movs	r3, #2
 8004080:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 8004082:	f7fc f989 	bl	8000398 <HAL_GetTick>
 8004086:	4606      	mov	r6, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	f012 0f01 	tst.w	r2, #1
 8004090:	d10b      	bne.n	80040aa <HAL_RNG_GenerateRandomNumber+0x50>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004092:	f7fc f981 	bl	8000398 <HAL_GetTick>
 8004096:	1b80      	subs	r0, r0, r6
 8004098:	2802      	cmp	r0, #2
 800409a:	d9f5      	bls.n	8004088 <HAL_RNG_GenerateRandomNumber+0x2e>
        hrng->State = HAL_RNG_STATE_READY;
 800409c:	2001      	movs	r0, #1
 800409e:	7260      	strb	r0, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80040a0:	2302      	movs	r3, #2
 80040a2:	60e3      	str	r3, [r4, #12]
        __HAL_UNLOCK(hrng);
 80040a4:	2300      	movs	r3, #0
 80040a6:	7223      	strb	r3, [r4, #8]
        return HAL_ERROR;
 80040a8:	e7e8      	b.n	800407c <HAL_RNG_GenerateRandomNumber+0x22>
    hrng->RandomNumber = hrng->Instance->DR;
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 80040ae:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
 80040b0:	2301      	movs	r3, #1
 80040b2:	7263      	strb	r3, [r4, #9]
  HAL_StatusTypeDef status = HAL_OK;
 80040b4:	2000      	movs	r0, #0
 80040b6:	e7df      	b.n	8004078 <HAL_RNG_GenerateRandomNumber+0x1e>
  __HAL_LOCK(hrng);
 80040b8:	2002      	movs	r0, #2
}
 80040ba:	4770      	bx	lr

080040bc <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80040bc:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80040be:	2400      	movs	r4, #0
 80040c0:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80040c2:	64c4      	str	r4, [r0, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80040c4:	6845      	ldr	r5, [r0, #4]
 80040c6:	2d02      	cmp	r5, #2
 80040c8:	bf14      	ite	ne
 80040ca:	2400      	movne	r4, #0
 80040cc:	2401      	moveq	r4, #1
 80040ce:	2d00      	cmp	r5, #0
 80040d0:	bf08      	it	eq
 80040d2:	2401      	moveq	r4, #1
 80040d4:	b1c4      	cbz	r4, 8004108 <SAI_InitI2S+0x4c>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80040d6:	2400      	movs	r4, #0
 80040d8:	6504      	str	r4, [r0, #80]	; 0x50
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80040da:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80040de:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80040e0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80040e4:	6744      	str	r4, [r0, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 80040e6:	2400      	movs	r4, #0
 80040e8:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80040ea:	6703      	str	r3, [r0, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80040ec:	f013 0f01 	tst.w	r3, #1
 80040f0:	d14b      	bne.n	800418a <SAI_InitI2S+0xce>
  {
    return HAL_ERROR;
  }

  if (protocol == SAI_I2S_STANDARD)
 80040f2:	b961      	cbnz	r1, 800410e <SAI_InitI2S+0x52>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80040f4:	6604      	str	r4, [r0, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80040f6:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80040fa:	6644      	str	r4, [r0, #100]	; 0x64
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
  }

  /* Frame definition */
  switch (datasize)
 80040fc:	2a03      	cmp	r2, #3
 80040fe:	d83f      	bhi.n	8004180 <SAI_InitI2S+0xc4>
 8004100:	e8df f002 	tbb	[pc, r2]
 8004104:	33281e0b 	.word	0x33281e0b
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004108:	2401      	movs	r4, #1
 800410a:	6504      	str	r4, [r0, #80]	; 0x50
 800410c:	e7e5      	b.n	80040da <SAI_InitI2S+0x1e>
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800410e:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 8004112:	6604      	str	r4, [r0, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8004114:	2400      	movs	r4, #0
 8004116:	6644      	str	r4, [r0, #100]	; 0x64
 8004118:	e7f0      	b.n	80040fc <SAI_InitI2S+0x40>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800411a:	2480      	movs	r4, #128	; 0x80
 800411c:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800411e:	085b      	lsrs	r3, r3, #1
 8004120:	015c      	lsls	r4, r3, #5
 8004122:	6544      	str	r4, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004128:	2340      	movs	r3, #64	; 0x40
 800412a:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 800412c:	2300      	movs	r3, #0
      break;
    default :
      status = HAL_ERROR;
      break;
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800412e:	2902      	cmp	r1, #2
 8004130:	d12c      	bne.n	800418c <SAI_InitI2S+0xd0>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8004132:	2a01      	cmp	r2, #1
 8004134:	d026      	beq.n	8004184 <SAI_InitI2S+0xc8>
    {
      hsai->SlotInit.FirstBitOffset = 16;
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8004136:	2a02      	cmp	r2, #2
 8004138:	d128      	bne.n	800418c <SAI_InitI2S+0xd0>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800413a:	2208      	movs	r2, #8
 800413c:	6682      	str	r2, [r0, #104]	; 0x68
 800413e:	e025      	b.n	800418c <SAI_InitI2S+0xd0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004140:	2480      	movs	r4, #128	; 0x80
 8004142:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004144:	085b      	lsrs	r3, r3, #1
 8004146:	019d      	lsls	r5, r3, #6
 8004148:	6545      	str	r5, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800414a:	015b      	lsls	r3, r3, #5
 800414c:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800414e:	66c4      	str	r4, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8004150:	2300      	movs	r3, #0
      break;
 8004152:	e7ec      	b.n	800412e <SAI_InitI2S+0x72>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004154:	24c0      	movs	r4, #192	; 0xc0
 8004156:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004158:	085b      	lsrs	r3, r3, #1
 800415a:	019c      	lsls	r4, r3, #6
 800415c:	6544      	str	r4, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800415e:	015b      	lsls	r3, r3, #5
 8004160:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004162:	2380      	movs	r3, #128	; 0x80
 8004164:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8004166:	2300      	movs	r3, #0
      break;
 8004168:	e7e1      	b.n	800412e <SAI_InitI2S+0x72>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800416a:	24e0      	movs	r4, #224	; 0xe0
 800416c:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800416e:	085b      	lsrs	r3, r3, #1
 8004170:	019c      	lsls	r4, r3, #6
 8004172:	6544      	str	r4, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004174:	015b      	lsls	r3, r3, #5
 8004176:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004178:	2380      	movs	r3, #128	; 0x80
 800417a:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 800417c:	2300      	movs	r3, #0
      break;
 800417e:	e7d6      	b.n	800412e <SAI_InitI2S+0x72>
      status = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e7d4      	b.n	800412e <SAI_InitI2S+0x72>
      hsai->SlotInit.FirstBitOffset = 16;
 8004184:	2110      	movs	r1, #16
 8004186:	6681      	str	r1, [r0, #104]	; 0x68
 8004188:	e7d5      	b.n	8004136 <SAI_InitI2S+0x7a>
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
    }
  }
  return status;
}
 800418c:	4618      	mov	r0, r3
 800418e:	bc30      	pop	{r4, r5}
 8004190:	4770      	bx	lr

08004192 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004192:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004194:	2400      	movs	r4, #0
 8004196:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004198:	64c4      	str	r4, [r0, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800419a:	6845      	ldr	r5, [r0, #4]
 800419c:	2d02      	cmp	r5, #2
 800419e:	bf14      	ite	ne
 80041a0:	2400      	movne	r4, #0
 80041a2:	2401      	moveq	r4, #1
 80041a4:	2d00      	cmp	r5, #0
 80041a6:	bf08      	it	eq
 80041a8:	2401      	moveq	r4, #1
 80041aa:	b1c4      	cbz	r4, 80041de <SAI_InitPCM+0x4c>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80041ac:	2401      	movs	r4, #1
 80041ae:	6504      	str	r4, [r0, #80]	; 0x50
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80041b0:	2400      	movs	r4, #0
 80041b2:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80041b4:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 80041b8:	6605      	str	r5, [r0, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80041ba:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 80041be:	6645      	str	r5, [r0, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 80041c0:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80041c2:	6703      	str	r3, [r0, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80041c4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80041c8:	6744      	str	r4, [r0, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 80041ca:	2904      	cmp	r1, #4
 80041cc:	d00a      	beq.n	80041e4 <SAI_InitPCM+0x52>
      hsai->FrameInit.ActiveFrameLength = 1;
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 80041ce:	210d      	movs	r1, #13
 80041d0:	6581      	str	r1, [r0, #88]	; 0x58
  }

  switch (datasize)
 80041d2:	2a03      	cmp	r2, #3
 80041d4:	d829      	bhi.n	800422a <SAI_InitPCM+0x98>
 80041d6:	e8df f002 	tbb	[pc, r2]
 80041da:	1108      	.short	0x1108
 80041dc:	2018      	.short	0x2018
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80041de:	2400      	movs	r4, #0
 80041e0:	6504      	str	r4, [r0, #80]	; 0x50
 80041e2:	e7e5      	b.n	80041b0 <SAI_InitPCM+0x1e>
      hsai->FrameInit.ActiveFrameLength = 1;
 80041e4:	2101      	movs	r1, #1
 80041e6:	6581      	str	r1, [r0, #88]	; 0x58
 80041e8:	e7f3      	b.n	80041d2 <SAI_InitPCM+0x40>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80041ea:	2280      	movs	r2, #128	; 0x80
 80041ec:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80041f2:	2340      	movs	r3, #64	; 0x40
 80041f4:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 80041f6:	2000      	movs	r0, #0
      status = HAL_ERROR;
      break;
  }

  return status;
}
 80041f8:	bc30      	pop	{r4, r5}
 80041fa:	4770      	bx	lr
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80041fc:	2280      	movs	r2, #128	; 0x80
 80041fe:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004200:	015b      	lsls	r3, r3, #5
 8004202:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004204:	66c2      	str	r2, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8004206:	2000      	movs	r0, #0
      break;
 8004208:	e7f6      	b.n	80041f8 <SAI_InitPCM+0x66>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800420a:	22c0      	movs	r2, #192	; 0xc0
 800420c:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800420e:	015b      	lsls	r3, r3, #5
 8004210:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004212:	2380      	movs	r3, #128	; 0x80
 8004214:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8004216:	2000      	movs	r0, #0
      break;
 8004218:	e7ee      	b.n	80041f8 <SAI_InitPCM+0x66>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800421a:	22e0      	movs	r2, #224	; 0xe0
 800421c:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800421e:	015b      	lsls	r3, r3, #5
 8004220:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004222:	2380      	movs	r3, #128	; 0x80
 8004224:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8004226:	2000      	movs	r0, #0
      break;
 8004228:	e7e6      	b.n	80041f8 <SAI_InitPCM+0x66>
      status = HAL_ERROR;
 800422a:	2001      	movs	r0, #1
 800422c:	e7e4      	b.n	80041f8 <SAI_InitPCM+0x66>

0800422e <SAI_InterruptFlag>:
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if (mode == SAI_MODE_IT)
 800422e:	2901      	cmp	r1, #1
 8004230:	d00a      	beq.n	8004248 <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8004232:	2301      	movs	r3, #1
  {
    tmpIT |= SAI_IT_FREQ;
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004234:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004236:	2a08      	cmp	r2, #8
 8004238:	d008      	beq.n	800424c <SAI_InterruptFlag+0x1e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT |= SAI_IT_CNRDY;
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800423a:	6842      	ldr	r2, [r0, #4]
 800423c:	3a02      	subs	r2, #2
 800423e:	2a01      	cmp	r2, #1
 8004240:	d90c      	bls.n	800425c <SAI_InterruptFlag+0x2e>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8004242:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 8004246:	4770      	bx	lr
    tmpIT |= SAI_IT_FREQ;
 8004248:	2309      	movs	r3, #9
 800424a:	e7f3      	b.n	8004234 <SAI_InterruptFlag+0x6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800424c:	6842      	ldr	r2, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800424e:	2a01      	cmp	r2, #1
 8004250:	bf18      	it	ne
 8004252:	2a03      	cmpne	r2, #3
 8004254:	d1f1      	bne.n	800423a <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_CNRDY;
 8004256:	f043 0310 	orr.w	r3, r3, #16
 800425a:	e7ee      	b.n	800423a <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800425c:	f043 0060 	orr.w	r0, r3, #96	; 0x60
 8004260:	4770      	bx	lr
	...

08004264 <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004264:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <SAI_Disable+0x3c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a0e      	ldr	r2, [pc, #56]	; (80042a4 <SAI_Disable+0x40>)
 800426a:	fba2 2303 	umull	r2, r3, r2, r3
 800426e:	0b1b      	lsrs	r3, r3, #12
 8004270:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004272:	6801      	ldr	r1, [r0, #0]
 8004274:	680a      	ldr	r2, [r1, #0]
 8004276:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800427a:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800427c:	b13b      	cbz	r3, 800428e <SAI_Disable+0x2a>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
    count--;
 800427e:	3b01      	subs	r3, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004280:	6802      	ldr	r2, [r0, #0]
 8004282:	6812      	ldr	r2, [r2, #0]
 8004284:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004288:	d1f8      	bne.n	800427c <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800428a:	2000      	movs	r0, #0

  return status;
}
 800428c:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800428e:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8004292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004296:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      status = HAL_TIMEOUT;
 800429a:	2003      	movs	r0, #3
      break;
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	20000280 	.word	0x20000280
 80042a4:	95cbec1b 	.word	0x95cbec1b

080042a8 <HAL_SAI_Init>:
{
 80042a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hsai == NULL)
 80042ac:	2800      	cmp	r0, #0
 80042ae:	f000 81cd 	beq.w	800464c <HAL_SAI_Init+0x3a4>
 80042b2:	4604      	mov	r4, r0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80042b4:	f7fc f88a 	bl	80003cc <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80042b8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d025      	beq.n	800430c <HAL_SAI_Init+0x64>
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	49b1      	ldr	r1, [pc, #708]	; (8004588 <HAL_SAI_Init+0x2e0>)
 80042c4:	4ab1      	ldr	r2, [pc, #708]	; (800458c <HAL_SAI_Init+0x2e4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	bf18      	it	ne
 80042ca:	428b      	cmpne	r3, r1
 80042cc:	d030      	beq.n	8004330 <HAL_SAI_Init+0x88>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80042ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80042d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042d6:	4293      	cmp	r3, r2
 80042d8:	bf18      	it	ne
 80042da:	428b      	cmpne	r3, r1
 80042dc:	d045      	beq.n	800436a <HAL_SAI_Init+0xc2>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80042de:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80042e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042e6:	4293      	cmp	r3, r2
 80042e8:	bf18      	it	ne
 80042ea:	428b      	cmpne	r3, r1
 80042ec:	d03f      	beq.n	800436e <HAL_SAI_Init+0xc6>
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 80042ee:	f101 51c0 	add.w	r1, r1, #402653184	; 0x18000000
 80042f2:	f5a1 3186 	sub.w	r1, r1, #68608	; 0x10c00
 80042f6:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 80042fa:	f5a2 3286 	sub.w	r2, r2, #68608	; 0x10c00
 80042fe:	4293      	cmp	r3, r2
 8004300:	bf18      	it	ne
 8004302:	428b      	cmpne	r3, r1
 8004304:	f040 81a8 	bne.w	8004658 <HAL_SAI_Init+0x3b0>
    SaiBaseAddress = SAI4;
 8004308:	4ea1      	ldr	r6, [pc, #644]	; (8004590 <HAL_SAI_Init+0x2e8>)
 800430a:	e012      	b.n	8004332 <HAL_SAI_Init+0x8a>
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	499e      	ldr	r1, [pc, #632]	; (8004588 <HAL_SAI_Init+0x2e0>)
 8004310:	4aa0      	ldr	r2, [pc, #640]	; (8004594 <HAL_SAI_Init+0x2ec>)
 8004312:	428b      	cmp	r3, r1
 8004314:	bf18      	it	ne
 8004316:	4293      	cmpne	r3, r2
 8004318:	f040 819c 	bne.w	8004654 <HAL_SAI_Init+0x3ac>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800431c:	6863      	ldr	r3, [r4, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800431e:	2b01      	cmp	r3, #1
 8004320:	d001      	beq.n	8004326 <HAL_SAI_Init+0x7e>
      return HAL_ERROR;
 8004322:	2501      	movs	r5, #1
 8004324:	e193      	b.n	800464e <HAL_SAI_Init+0x3a6>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8004326:	6c63      	ldr	r3, [r4, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0c9      	beq.n	80042c0 <HAL_SAI_Init+0x18>
      return HAL_ERROR;
 800432c:	2501      	movs	r5, #1
 800432e:	e18e      	b.n	800464e <HAL_SAI_Init+0x3a6>
    SaiBaseAddress = SAI1;
 8004330:	4e99      	ldr	r6, [pc, #612]	; (8004598 <HAL_SAI_Init+0x2f0>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8004332:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 8004336:	b1e3      	cbz	r3, 8004372 <HAL_SAI_Init+0xca>
  if(SAI_Disable(hsai) != HAL_OK)
 8004338:	4620      	mov	r0, r4
 800433a:	f7ff ff93 	bl	8004264 <SAI_Disable>
 800433e:	4605      	mov	r5, r0
 8004340:	2800      	cmp	r0, #0
 8004342:	f040 818b 	bne.w	800465c <HAL_SAI_Init+0x3b4>
  hsai->State = HAL_SAI_STATE_BUSY;
 8004346:	2302      	movs	r3, #2
 8004348:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 800434c:	68e3      	ldr	r3, [r4, #12]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d017      	beq.n	8004382 <HAL_SAI_Init+0xda>
 8004352:	2b02      	cmp	r3, #2
 8004354:	d013      	beq.n	800437e <HAL_SAI_Init+0xd6>
      tmpregisterGCR = 0;
 8004356:	2200      	movs	r2, #0
  switch (hsai->Init.Synchro)
 8004358:	68a3      	ldr	r3, [r4, #8]
 800435a:	3b01      	subs	r3, #1
 800435c:	2b04      	cmp	r3, #4
 800435e:	d812      	bhi.n	8004386 <HAL_SAI_Init+0xde>
 8004360:	e8df f003 	tbb	[pc, r3]
 8004364:	1b161325 	.word	0x1b161325
 8004368:	20          	.byte	0x20
 8004369:	00          	.byte	0x00
    SaiBaseAddress = SAI2;
 800436a:	4e8c      	ldr	r6, [pc, #560]	; (800459c <HAL_SAI_Init+0x2f4>)
 800436c:	e7e1      	b.n	8004332 <HAL_SAI_Init+0x8a>
    SaiBaseAddress = SAI3;
 800436e:	4e8c      	ldr	r6, [pc, #560]	; (80045a0 <HAL_SAI_Init+0x2f8>)
 8004370:	e7df      	b.n	8004332 <HAL_SAI_Init+0x8a>
    hsai->Lock = HAL_UNLOCKED;
 8004372:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 8004376:	4620      	mov	r0, r4
 8004378:	f001 ff9c 	bl	80062b4 <HAL_SAI_MspInit>
 800437c:	e7dc      	b.n	8004338 <HAL_SAI_Init+0x90>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800437e:	2220      	movs	r2, #32
      break;
 8004380:	e7ea      	b.n	8004358 <HAL_SAI_Init+0xb0>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004382:	2210      	movs	r2, #16
 8004384:	e7e8      	b.n	8004358 <HAL_SAI_Init+0xb0>
      syncen_bits = 0;
 8004386:	2700      	movs	r7, #0
 8004388:	e013      	b.n	80043b2 <HAL_SAI_Init+0x10a>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800438a:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 800438e:	e010      	b.n	80043b2 <HAL_SAI_Init+0x10a>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004390:	f042 0201 	orr.w	r2, r2, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004394:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8004398:	e00b      	b.n	80043b2 <HAL_SAI_Init+0x10a>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800439a:	f042 0202 	orr.w	r2, r2, #2
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800439e:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 80043a2:	e006      	b.n	80043b2 <HAL_SAI_Init+0x10a>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 80043a4:	f042 0203 	orr.w	r2, r2, #3
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80043a8:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 80043ac:	e001      	b.n	80043b2 <HAL_SAI_Init+0x10a>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80043ae:	f44f 6780 	mov.w	r7, #1024	; 0x400
  SaiBaseAddress->GCR = tmpregisterGCR;
 80043b2:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80043b4:	6a23      	ldr	r3, [r4, #32]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d043      	beq.n	8004442 <HAL_SAI_Init+0x19a>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	4972      	ldr	r1, [pc, #456]	; (8004588 <HAL_SAI_Init+0x2e0>)
 80043be:	4a73      	ldr	r2, [pc, #460]	; (800458c <HAL_SAI_Init+0x2e4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	bf18      	it	ne
 80043c4:	428b      	cmpne	r3, r1
 80043c6:	f000 80c5 	beq.w	8004554 <HAL_SAI_Init+0x2ac>
    uint32_t freq = 0;
 80043ca:	2000      	movs	r0, #0
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	4975      	ldr	r1, [pc, #468]	; (80045a4 <HAL_SAI_Init+0x2fc>)
 80043d0:	4a75      	ldr	r2, [pc, #468]	; (80045a8 <HAL_SAI_Init+0x300>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	bf18      	it	ne
 80043d6:	428b      	cmpne	r3, r1
 80043d8:	f000 80c1 	beq.w	800455e <HAL_SAI_Init+0x2b6>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80043dc:	6823      	ldr	r3, [r4, #0]
 80043de:	4973      	ldr	r1, [pc, #460]	; (80045ac <HAL_SAI_Init+0x304>)
 80043e0:	4a73      	ldr	r2, [pc, #460]	; (80045b0 <HAL_SAI_Init+0x308>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	bf18      	it	ne
 80043e6:	428b      	cmpne	r3, r1
 80043e8:	f000 80be 	beq.w	8004568 <HAL_SAI_Init+0x2c0>
    if (hsai->Instance == SAI4_Block_A)
 80043ec:	6822      	ldr	r2, [r4, #0]
 80043ee:	4b69      	ldr	r3, [pc, #420]	; (8004594 <HAL_SAI_Init+0x2ec>)
 80043f0:	429a      	cmp	r2, r3
 80043f2:	f000 80be 	beq.w	8004572 <HAL_SAI_Init+0x2ca>
    if (hsai->Instance == SAI4_Block_B)
 80043f6:	6822      	ldr	r2, [r4, #0]
 80043f8:	4b6e      	ldr	r3, [pc, #440]	; (80045b4 <HAL_SAI_Init+0x30c>)
 80043fa:	429a      	cmp	r2, r3
 80043fc:	f000 80be 	beq.w	800457c <HAL_SAI_Init+0x2d4>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8004400:	69a3      	ldr	r3, [r4, #24]
 8004402:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004406:	f000 80df 	beq.w	80045c8 <HAL_SAI_Init+0x320>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800440a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800440c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004410:	f000 80e4 	beq.w	80045dc <HAL_SAI_Init+0x334>
 8004414:	2301      	movs	r3, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004416:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800441a:	0041      	lsls	r1, r0, #1
 800441c:	6a22      	ldr	r2, [r4, #32]
 800441e:	fb03 f302 	mul.w	r3, r3, r2
 8004422:	021b      	lsls	r3, r3, #8
 8004424:	fbb1 f1f3 	udiv	r1, r1, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 8004428:	4b63      	ldr	r3, [pc, #396]	; (80045b8 <HAL_SAI_Init+0x310>)
 800442a:	fba3 2301 	umull	r2, r3, r3, r1
 800442e:	08db      	lsrs	r3, r3, #3
 8004430:	6263      	str	r3, [r4, #36]	; 0x24
    if ((tmpval % 10U) > 8U)
 8004432:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8004436:	0042      	lsls	r2, r0, #1
 8004438:	1a8a      	subs	r2, r1, r2
 800443a:	2a08      	cmp	r2, #8
 800443c:	d901      	bls.n	8004442 <HAL_SAI_Init+0x19a>
      hsai->Init.Mckdiv += 1U;
 800443e:	3301      	adds	r3, #1
 8004440:	6263      	str	r3, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004442:	6862      	ldr	r2, [r4, #4]
 8004444:	2a02      	cmp	r2, #2
 8004446:	bf14      	ite	ne
 8004448:	2300      	movne	r3, #0
 800444a:	2301      	moveq	r3, #1
 800444c:	2a00      	cmp	r2, #0
 800444e:	bf08      	it	eq
 8004450:	2301      	moveq	r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 80c7 	beq.w	80045e6 <HAL_SAI_Init+0x33e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004458:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800445a:	2b01      	cmp	r3, #1
 800445c:	f000 80c0 	beq.w	80045e0 <HAL_SAI_Init+0x338>
 8004460:	f44f 7800 	mov.w	r8, #512	; 0x200
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8004464:	f7fb ffb2 	bl	80003cc <HAL_GetREVID>
 8004468:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800446c:	f0c0 80c4 	bcc.w	80045f8 <HAL_SAI_Init+0x350>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004470:	6822      	ldr	r2, [r4, #0]
 8004472:	6811      	ldr	r1, [r2, #0]
 8004474:	4b51      	ldr	r3, [pc, #324]	; (80045bc <HAL_SAI_Init+0x314>)
 8004476:	400b      	ands	r3, r1
 8004478:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800447a:	6821      	ldr	r1, [r4, #0]
 800447c:	680a      	ldr	r2, [r1, #0]
 800447e:	6863      	ldr	r3, [r4, #4]
 8004480:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004482:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004484:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004486:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004488:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800448a:	4303      	orrs	r3, r0
 800448c:	ea43 0308 	orr.w	r3, r3, r8
                            ckstr_bits | syncen_bits |                             \
 8004490:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004492:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8004494:	4303      	orrs	r3, r0
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004496:	6960      	ldr	r0, [r4, #20]
 8004498:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800449a:	69a0      	ldr	r0, [r4, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800449c:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800449e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80044a0:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80044a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80044a6:	4303      	orrs	r3, r0
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80044a8:	6920      	ldr	r0, [r4, #16]
 80044aa:	4303      	orrs	r3, r0
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80044ac:	4313      	orrs	r3, r2
 80044ae:	600b      	str	r3, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80044b0:	6822      	ldr	r2, [r4, #0]
 80044b2:	6851      	ldr	r1, [r2, #4]
 80044b4:	4b42      	ldr	r3, [pc, #264]	; (80045c0 <HAL_SAI_Init+0x318>)
 80044b6:	400b      	ands	r3, r1
 80044b8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80044ba:	6821      	ldr	r1, [r4, #0]
 80044bc:	684a      	ldr	r2, [r1, #4]
 80044be:	69e3      	ldr	r3, [r4, #28]
 80044c0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80044c2:	4303      	orrs	r3, r0
 80044c4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80044c6:	4303      	orrs	r3, r0
 80044c8:	4313      	orrs	r3, r2
 80044ca:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80044cc:	6822      	ldr	r2, [r4, #0]
 80044ce:	6891      	ldr	r1, [r2, #8]
 80044d0:	4b3c      	ldr	r3, [pc, #240]	; (80045c4 <HAL_SAI_Init+0x31c>)
 80044d2:	400b      	ands	r3, r1
 80044d4:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80044d6:	6820      	ldr	r0, [r4, #0]
 80044d8:	6882      	ldr	r2, [r0, #8]
 80044da:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80044dc:	3b01      	subs	r3, #1
                           hsai->FrameInit.FSOffset |
 80044de:	6e61      	ldr	r1, [r4, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80044e0:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSDefinition |
 80044e2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 80044e4:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSPolarity   |
 80044e6:	6e21      	ldr	r1, [r4, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 80044e8:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80044ea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80044ec:	3901      	subs	r1, #1
                           hsai->FrameInit.FSPolarity   |
 80044ee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80044f2:	4313      	orrs	r3, r2
 80044f4:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80044f6:	6822      	ldr	r2, [r4, #0]
 80044f8:	68d3      	ldr	r3, [r2, #12]
 80044fa:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 80044fe:	f023 030f 	bic.w	r3, r3, #15
 8004502:	041b      	lsls	r3, r3, #16
 8004504:	0c1b      	lsrs	r3, r3, #16
 8004506:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004508:	6820      	ldr	r0, [r4, #0]
 800450a:	68c2      	ldr	r2, [r0, #12]
 800450c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800450e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004510:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004512:	6f61      	ldr	r1, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004514:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004518:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800451a:	3901      	subs	r1, #1
 800451c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004520:	4313      	orrs	r3, r2
 8004522:	60c3      	str	r3, [r0, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8004524:	6823      	ldr	r3, [r4, #0]
 8004526:	4918      	ldr	r1, [pc, #96]	; (8004588 <HAL_SAI_Init+0x2e0>)
 8004528:	4a1a      	ldr	r2, [pc, #104]	; (8004594 <HAL_SAI_Init+0x2ec>)
 800452a:	4293      	cmp	r3, r2
 800452c:	bf18      	it	ne
 800452e:	428b      	cmpne	r3, r1
 8004530:	d107      	bne.n	8004542 <HAL_SAI_Init+0x29a>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8004532:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8004534:	f023 0301 	bic.w	r3, r3, #1
 8004538:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800453a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800453e:	2b01      	cmp	r3, #1
 8004540:	d079      	beq.n	8004636 <HAL_SAI_Init+0x38e>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004542:	2300      	movs	r3, #0
 8004544:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  hsai->State = HAL_SAI_STATE_READY;
 8004548:	2201      	movs	r2, #1
 800454a:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 800454e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  return HAL_OK;
 8004552:	e07c      	b.n	800464e <HAL_SAI_Init+0x3a6>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004554:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004558:	f7ff fb8c 	bl	8003c74 <HAL_RCCEx_GetPeriphCLKFreq>
 800455c:	e736      	b.n	80043cc <HAL_SAI_Init+0x124>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800455e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004562:	f7ff fb87 	bl	8003c74 <HAL_RCCEx_GetPeriphCLKFreq>
 8004566:	e739      	b.n	80043dc <HAL_SAI_Init+0x134>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8004568:	f44f 7000 	mov.w	r0, #512	; 0x200
 800456c:	f7ff fb82 	bl	8003c74 <HAL_RCCEx_GetPeriphCLKFreq>
 8004570:	e73c      	b.n	80043ec <HAL_SAI_Init+0x144>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8004572:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004576:	f7ff fb7d 	bl	8003c74 <HAL_RCCEx_GetPeriphCLKFreq>
 800457a:	e73c      	b.n	80043f6 <HAL_SAI_Init+0x14e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800457c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004580:	f7ff fb78 	bl	8003c74 <HAL_RCCEx_GetPeriphCLKFreq>
 8004584:	e73c      	b.n	8004400 <HAL_SAI_Init+0x158>
 8004586:	bf00      	nop
 8004588:	40015804 	.word	0x40015804
 800458c:	40015824 	.word	0x40015824
 8004590:	58005400 	.word	0x58005400
 8004594:	58005404 	.word	0x58005404
 8004598:	40015800 	.word	0x40015800
 800459c:	40015c00 	.word	0x40015c00
 80045a0:	40016000 	.word	0x40016000
 80045a4:	40015c04 	.word	0x40015c04
 80045a8:	40015c24 	.word	0x40015c24
 80045ac:	40016004 	.word	0x40016004
 80045b0:	40016024 	.word	0x40016024
 80045b4:	58005424 	.word	0x58005424
 80045b8:	cccccccd 	.word	0xcccccccd
 80045bc:	f005c010 	.word	0xf005c010
 80045c0:	ffff1ff0 	.word	0xffff1ff0
 80045c4:	fff88000 	.word	0xfff88000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * hsai->FrameInit.FrameLength);
 80045c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80045cc:	0041      	lsls	r1, r0, #1
 80045ce:	6a22      	ldr	r2, [r4, #32]
 80045d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80045d2:	fb03 f302 	mul.w	r3, r3, r2
 80045d6:	fbb1 f1f3 	udiv	r1, r1, r3
 80045da:	e725      	b.n	8004428 <HAL_SAI_Init+0x180>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80045dc:	2302      	movs	r3, #2
 80045de:	e71a      	b.n	8004416 <HAL_SAI_Init+0x16e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80045e0:	f04f 0800 	mov.w	r8, #0
 80045e4:	e73e      	b.n	8004464 <HAL_SAI_Init+0x1bc>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80045e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d002      	beq.n	80045f2 <HAL_SAI_Init+0x34a>
 80045ec:	f04f 0800 	mov.w	r8, #0
 80045f0:	e738      	b.n	8004464 <HAL_SAI_Init+0x1bc>
 80045f2:	f44f 7800 	mov.w	r8, #512	; 0x200
 80045f6:	e735      	b.n	8004464 <HAL_SAI_Init+0x1bc>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80045f8:	6822      	ldr	r2, [r4, #0]
 80045fa:	6811      	ldr	r1, [r2, #0]
 80045fc:	4b18      	ldr	r3, [pc, #96]	; (8004660 <HAL_SAI_Init+0x3b8>)
 80045fe:	400b      	ands	r3, r1
 8004600:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004602:	6821      	ldr	r1, [r4, #0]
 8004604:	680a      	ldr	r2, [r1, #0]
 8004606:	6863      	ldr	r3, [r4, #4]
 8004608:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800460a:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800460c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800460e:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004610:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004612:	4303      	orrs	r3, r0
 8004614:	ea43 0308 	orr.w	r3, r3, r8
                            ckstr_bits | syncen_bits |                             \
 8004618:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800461a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800461c:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800461e:	6967      	ldr	r7, [r4, #20]
 8004620:	433b      	orrs	r3, r7
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004622:	69a0      	ldr	r0, [r4, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004624:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004626:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004628:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                            hsai->Init.MckOverSampling);
 800462c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800462e:	4303      	orrs	r3, r0
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004630:	4313      	orrs	r3, r2
 8004632:	600b      	str	r3, [r1, #0]
 8004634:	e73c      	b.n	80044b0 <HAL_SAI_Init+0x208>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8004636:	6c23      	ldr	r3, [r4, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8004638:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800463a:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800463c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004640:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8004642:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	6473      	str	r3, [r6, #68]	; 0x44
 800464a:	e77a      	b.n	8004542 <HAL_SAI_Init+0x29a>
    return HAL_ERROR;
 800464c:	2501      	movs	r5, #1
}
 800464e:	4628      	mov	r0, r5
 8004650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8004654:	2501      	movs	r5, #1
 8004656:	e7fa      	b.n	800464e <HAL_SAI_Init+0x3a6>
    return HAL_ERROR;
 8004658:	2501      	movs	r5, #1
 800465a:	e7f8      	b.n	800464e <HAL_SAI_Init+0x3a6>
    return HAL_ERROR;
 800465c:	2501      	movs	r5, #1
 800465e:	e7f6      	b.n	800464e <HAL_SAI_Init+0x3a6>
 8004660:	f805c010 	.word	0xf805c010

08004664 <HAL_SAI_InitProtocol>:
{
 8004664:	b510      	push	{r4, lr}
 8004666:	4604      	mov	r4, r0
  switch (protocol)
 8004668:	2904      	cmp	r1, #4
 800466a:	d811      	bhi.n	8004690 <HAL_SAI_InitProtocol+0x2c>
 800466c:	e8df f001 	tbb	[pc, r1]
 8004670:	08030303 	.word	0x08030303
 8004674:	08          	.byte	0x08
 8004675:	00          	.byte	0x00
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8004676:	4620      	mov	r0, r4
 8004678:	f7ff fd20 	bl	80040bc <SAI_InitI2S>
  if (status == HAL_OK)
 800467c:	b120      	cbz	r0, 8004688 <HAL_SAI_InitProtocol+0x24>
}
 800467e:	bd10      	pop	{r4, pc}
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8004680:	4620      	mov	r0, r4
 8004682:	f7ff fd86 	bl	8004192 <SAI_InitPCM>
      break;
 8004686:	e7f9      	b.n	800467c <HAL_SAI_InitProtocol+0x18>
    status = HAL_SAI_Init(hsai);
 8004688:	4620      	mov	r0, r4
 800468a:	f7ff fe0d 	bl	80042a8 <HAL_SAI_Init>
 800468e:	e7f6      	b.n	800467e <HAL_SAI_InitProtocol+0x1a>
      status = HAL_ERROR;
 8004690:	2001      	movs	r0, #1
 8004692:	e7f4      	b.n	800467e <HAL_SAI_InitProtocol+0x1a>

08004694 <HAL_SAI_Transmit_DMA>:
{
 8004694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004696:	4604      	mov	r4, r0
 8004698:	460e      	mov	r6, r1
 800469a:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800469c:	f7fb fe7c 	bl	8000398 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 80046a0:	fab5 f385 	clz	r3, r5
 80046a4:	095b      	lsrs	r3, r3, #5
 80046a6:	2e00      	cmp	r6, #0
 80046a8:	bf08      	it	eq
 80046aa:	2301      	moveq	r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d165      	bne.n	800477c <HAL_SAI_Transmit_DMA+0xe8>
 80046b0:	4607      	mov	r7, r0
  if (hsai->State == HAL_SAI_STATE_READY)
 80046b2:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d162      	bne.n	8004782 <HAL_SAI_Transmit_DMA+0xee>
    __HAL_LOCK(hsai);
 80046bc:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d060      	beq.n	8004786 <HAL_SAI_Transmit_DMA+0xf2>
 80046c4:	2301      	movs	r3, #1
 80046c6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    hsai->pBuffPtr = pData;
 80046ca:	67a6      	str	r6, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 80046cc:	f8a4 507c 	strh.w	r5, [r4, #124]	; 0x7c
    hsai->XferCount = Size;
 80046d0:	f8a4 507e 	strh.w	r5, [r4, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80046d4:	2300      	movs	r3, #0
 80046d6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80046da:	2212      	movs	r2, #18
 80046dc:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80046e0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80046e4:	4929      	ldr	r1, [pc, #164]	; (800478c <HAL_SAI_Transmit_DMA+0xf8>)
 80046e6:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80046e8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80046ec:	4928      	ldr	r1, [pc, #160]	; (8004790 <HAL_SAI_Transmit_DMA+0xfc>)
 80046ee:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80046f0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80046f4:	4927      	ldr	r1, [pc, #156]	; (8004794 <HAL_SAI_Transmit_DMA+0x100>)
 80046f6:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 80046f8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80046fc:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80046fe:	6822      	ldr	r2, [r4, #0]
 8004700:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8004704:	321c      	adds	r2, #28
 8004706:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004708:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800470c:	f7fc faf6 	bl	8000cfc <HAL_DMA_Start_IT>
 8004710:	4605      	mov	r5, r0
 8004712:	bb10      	cbnz	r0, 800475a <HAL_SAI_Transmit_DMA+0xc6>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004714:	2100      	movs	r1, #0
 8004716:	4620      	mov	r0, r4
 8004718:	f7ff fd89 	bl	800422e <SAI_InterruptFlag>
 800471c:	6822      	ldr	r2, [r4, #0]
 800471e:	6913      	ldr	r3, [r2, #16]
 8004720:	4318      	orrs	r0, r3
 8004722:	6110      	str	r0, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004724:	6822      	ldr	r2, [r4, #0]
 8004726:	6813      	ldr	r3, [r2, #0]
 8004728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800472c:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	695a      	ldr	r2, [r3, #20]
 8004732:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
 8004736:	d115      	bne.n	8004764 <HAL_SAI_Transmit_DMA+0xd0>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8004738:	f7fb fe2e 	bl	8000398 <HAL_GetTick>
 800473c:	1bc0      	subs	r0, r0, r7
 800473e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004742:	d9f4      	bls.n	800472e <HAL_SAI_Transmit_DMA+0x9a>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004744:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800474c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        __HAL_UNLOCK(hsai);
 8004750:	2300      	movs	r3, #0
 8004752:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        return HAL_TIMEOUT;
 8004756:	2503      	movs	r5, #3
 8004758:	e011      	b.n	800477e <HAL_SAI_Transmit_DMA+0xea>
      __HAL_UNLOCK(hsai);
 800475a:	2300      	movs	r3, #0
 800475c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      return  HAL_ERROR;
 8004760:	2501      	movs	r5, #1
 8004762:	e00c      	b.n	800477e <HAL_SAI_Transmit_DMA+0xea>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800476a:	d103      	bne.n	8004774 <HAL_SAI_Transmit_DMA+0xe0>
      __HAL_SAI_ENABLE(hsai);
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004772:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8004774:	2300      	movs	r3, #0
 8004776:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 800477a:	e000      	b.n	800477e <HAL_SAI_Transmit_DMA+0xea>
    return  HAL_ERROR;
 800477c:	2501      	movs	r5, #1
}
 800477e:	4628      	mov	r0, r5
 8004780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8004782:	2502      	movs	r5, #2
 8004784:	e7fb      	b.n	800477e <HAL_SAI_Transmit_DMA+0xea>
    __HAL_LOCK(hsai);
 8004786:	2502      	movs	r5, #2
 8004788:	e7f9      	b.n	800477e <HAL_SAI_Transmit_DMA+0xea>
 800478a:	bf00      	nop
 800478c:	080048a7 	.word	0x080048a7
 8004790:	0800486d 	.word	0x0800486d
 8004794:	080048f5 	.word	0x080048f5

08004798 <HAL_SAI_Receive_DMA>:
{
 8004798:	b538      	push	{r3, r4, r5, lr}
  if ((pData == NULL) || (Size == 0U))
 800479a:	4614      	mov	r4, r2
 800479c:	fab2 f282 	clz	r2, r2
 80047a0:	0952      	lsrs	r2, r2, #5
 80047a2:	2900      	cmp	r1, #0
 80047a4:	bf08      	it	eq
 80047a6:	2201      	moveq	r2, #1
 80047a8:	2a00      	cmp	r2, #0
 80047aa:	d151      	bne.n	8004850 <HAL_SAI_Receive_DMA+0xb8>
  if (hsai->State == HAL_SAI_STATE_READY)
 80047ac:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d14f      	bne.n	8004856 <HAL_SAI_Receive_DMA+0xbe>
    __HAL_LOCK(hsai);
 80047b6:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d04d      	beq.n	800485a <HAL_SAI_Receive_DMA+0xc2>
 80047be:	4623      	mov	r3, r4
 80047c0:	4604      	mov	r4, r0
 80047c2:	2201      	movs	r2, #1
 80047c4:	f880 2090 	strb.w	r2, [r0, #144]	; 0x90
    hsai->pBuffPtr = pData;
 80047c8:	67a1      	str	r1, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 80047ca:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
    hsai->XferCount = Size;
 80047ce:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80047d2:	2300      	movs	r3, #0
 80047d4:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80047d8:	2222      	movs	r2, #34	; 0x22
 80047da:	f880 2091 	strb.w	r2, [r0, #145]	; 0x91
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80047de:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80047e2:	491f      	ldr	r1, [pc, #124]	; (8004860 <HAL_SAI_Receive_DMA+0xc8>)
 80047e4:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80047e6:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80047ea:	491e      	ldr	r1, [pc, #120]	; (8004864 <HAL_SAI_Receive_DMA+0xcc>)
 80047ec:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80047ee:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80047f2:	491d      	ldr	r1, [pc, #116]	; (8004868 <HAL_SAI_Receive_DMA+0xd0>)
 80047f4:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 80047f6:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80047fa:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80047fc:	6801      	ldr	r1, [r0, #0]
 80047fe:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 8004802:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8004804:	311c      	adds	r1, #28
 8004806:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 800480a:	f7fc fa77 	bl	8000cfc <HAL_DMA_Start_IT>
 800480e:	4605      	mov	r5, r0
 8004810:	b9c8      	cbnz	r0, 8004846 <HAL_SAI_Receive_DMA+0xae>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004812:	2100      	movs	r1, #0
 8004814:	4620      	mov	r0, r4
 8004816:	f7ff fd0a 	bl	800422e <SAI_InterruptFlag>
 800481a:	6822      	ldr	r2, [r4, #0]
 800481c:	6913      	ldr	r3, [r2, #16]
 800481e:	4318      	orrs	r0, r3
 8004820:	6110      	str	r0, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004822:	6822      	ldr	r2, [r4, #0]
 8004824:	6813      	ldr	r3, [r2, #0]
 8004826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800482a:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004834:	d103      	bne.n	800483e <HAL_SAI_Receive_DMA+0xa6>
      __HAL_SAI_ENABLE(hsai);
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800483c:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 800483e:	2300      	movs	r3, #0
 8004840:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 8004844:	e005      	b.n	8004852 <HAL_SAI_Receive_DMA+0xba>
      __HAL_UNLOCK(hsai);
 8004846:	2300      	movs	r3, #0
 8004848:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      return  HAL_ERROR;
 800484c:	2501      	movs	r5, #1
 800484e:	e000      	b.n	8004852 <HAL_SAI_Receive_DMA+0xba>
    return  HAL_ERROR;
 8004850:	2501      	movs	r5, #1
}
 8004852:	4628      	mov	r0, r5
 8004854:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8004856:	2502      	movs	r5, #2
 8004858:	e7fb      	b.n	8004852 <HAL_SAI_Receive_DMA+0xba>
    __HAL_LOCK(hsai);
 800485a:	2502      	movs	r5, #2
 800485c:	e7f9      	b.n	8004852 <HAL_SAI_Receive_DMA+0xba>
 800485e:	bf00      	nop
 8004860:	080048eb 	.word	0x080048eb
 8004864:	080048b1 	.word	0x080048b1
 8004868:	080048f5 	.word	0x080048f5

0800486c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800486c:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800486e:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004870:	69c3      	ldr	r3, [r0, #28]
 8004872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004876:	d012      	beq.n	800489e <SAI_DMATxCplt+0x32>
  {
    hsai->XferCount = 0;
 8004878:	2100      	movs	r1, #0
 800487a:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800487e:	6822      	ldr	r2, [r4, #0]
 8004880:	6813      	ldr	r3, [r2, #0]
 8004882:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004886:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004888:	4620      	mov	r0, r4
 800488a:	f7ff fcd0 	bl	800422e <SAI_InterruptFlag>
 800488e:	6822      	ldr	r2, [r4, #0]
 8004890:	6913      	ldr	r3, [r2, #16]
 8004892:	ea23 0000 	bic.w	r0, r3, r0
 8004896:	6110      	str	r0, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8004898:	2301      	movs	r3, #1
 800489a:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800489e:	4620      	mov	r0, r4
 80048a0:	f001 f913 	bl	8005aca <HAL_SAI_TxCpltCallback>
#endif
}
 80048a4:	bd10      	pop	{r4, pc}

080048a6 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80048a6:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80048a8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80048aa:	f001 f90f 	bl	8005acc <HAL_SAI_TxHalfCpltCallback>
#endif
}
 80048ae:	bd08      	pop	{r3, pc}

080048b0 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80048b0:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048b2:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80048b4:	69c3      	ldr	r3, [r0, #28]
 80048b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ba:	d012      	beq.n	80048e2 <SAI_DMARxCplt+0x32>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80048bc:	6822      	ldr	r2, [r4, #0]
 80048be:	6813      	ldr	r3, [r2, #0]
 80048c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80048c4:	6013      	str	r3, [r2, #0]
    hsai->XferCount = 0;
 80048c6:	2100      	movs	r1, #0
 80048c8:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80048cc:	4620      	mov	r0, r4
 80048ce:	f7ff fcae 	bl	800422e <SAI_InterruptFlag>
 80048d2:	6822      	ldr	r2, [r4, #0]
 80048d4:	6913      	ldr	r3, [r2, #16]
 80048d6:	ea23 0000 	bic.w	r0, r3, r0
 80048da:	6110      	str	r0, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80048dc:	2301      	movs	r3, #1
 80048de:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80048e2:	4620      	mov	r0, r4
 80048e4:	f001 f8f3 	bl	8005ace <HAL_SAI_RxCpltCallback>
#endif
}
 80048e8:	bd10      	pop	{r4, pc}

080048ea <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80048ea:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80048ec:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80048ee:	f001 f8f3 	bl	8005ad8 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 80048f2:	bd08      	pop	{r3, pc}

080048f4 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80048f4:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048f6:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80048f8:	f7fd f832 	bl	8001960 <HAL_DMA_GetError>
 80048fc:	2802      	cmp	r0, #2
 80048fe:	d016      	beq.n	800492e <SAI_DMAError+0x3a>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004900:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004908:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800490c:	6822      	ldr	r2, [r4, #0]
 800490e:	6813      	ldr	r3, [r2, #0]
 8004910:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004914:	6013      	str	r3, [r2, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8004916:	4620      	mov	r0, r4
 8004918:	f7ff fca4 	bl	8004264 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800491c:	2301      	movs	r3, #1
 800491e:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8004922:	2300      	movs	r3, #0
 8004924:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8004928:	4620      	mov	r0, r4
 800492a:	f001 f8cd 	bl	8005ac8 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800492e:	bd10      	pop	{r4, pc}

08004930 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8004930:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 8004932:	6802      	ldr	r2, [r0, #0]
 8004934:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004936:	6991      	ldr	r1, [r2, #24]
 8004938:	f041 0108 	orr.w	r1, r1, #8
 800493c:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800493e:	6801      	ldr	r1, [r0, #0]
 8004940:	698a      	ldr	r2, [r1, #24]
 8004942:	f042 0210 	orr.w	r2, r2, #16
 8004946:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004948:	6801      	ldr	r1, [r0, #0]
 800494a:	680a      	ldr	r2, [r1, #0]
 800494c:	f022 0201 	bic.w	r2, r2, #1
 8004950:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8004952:	6801      	ldr	r1, [r0, #0]
 8004954:	690c      	ldr	r4, [r1, #16]
 8004956:	4a29      	ldr	r2, [pc, #164]	; (80049fc <SPI_CloseTransfer+0xcc>)
 8004958:	4022      	ands	r2, r4
 800495a:	610a      	str	r2, [r1, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800495c:	6801      	ldr	r1, [r0, #0]
 800495e:	688a      	ldr	r2, [r1, #8]
 8004960:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004964:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004966:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800496a:	b2d2      	uxtb	r2, r2
 800496c:	2a04      	cmp	r2, #4
 800496e:	d00d      	beq.n	800498c <SPI_CloseTransfer+0x5c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004970:	f013 0f20 	tst.w	r3, #32
 8004974:	d00a      	beq.n	800498c <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004976:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800497a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800497e:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004982:	6801      	ldr	r1, [r0, #0]
 8004984:	698a      	ldr	r2, [r1, #24]
 8004986:	f042 0220 	orr.w	r2, r2, #32
 800498a:	618a      	str	r2, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800498c:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	2a03      	cmp	r2, #3
 8004994:	d00d      	beq.n	80049b2 <SPI_CloseTransfer+0x82>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8004996:	f013 0f40 	tst.w	r3, #64	; 0x40
 800499a:	d00a      	beq.n	80049b2 <SPI_CloseTransfer+0x82>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800499c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80049a0:	f042 0204 	orr.w	r2, r2, #4
 80049a4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049a8:	6801      	ldr	r1, [r0, #0]
 80049aa:	698a      	ldr	r2, [r1, #24]
 80049ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049b0:	618a      	str	r2, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80049b2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80049b6:	d00a      	beq.n	80049ce <SPI_CloseTransfer+0x9e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80049b8:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80049bc:	f042 0201 	orr.w	r2, r2, #1
 80049c0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80049c4:	6801      	ldr	r1, [r0, #0]
 80049c6:	698a      	ldr	r2, [r1, #24]
 80049c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049cc:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80049ce:	f413 7f80 	tst.w	r3, #256	; 0x100
 80049d2:	d00a      	beq.n	80049ea <SPI_CloseTransfer+0xba>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80049d4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80049d8:	f043 0308 	orr.w	r3, r3, #8
 80049dc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80049e0:	6802      	ldr	r2, [r0, #0]
 80049e2:	6993      	ldr	r3, [r2, #24]
 80049e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049e8:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80049ea:	2300      	movs	r3, #0
 80049ec:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80049f0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 80049f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	fffffc90 	.word	0xfffffc90

08004a00 <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004a00:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004a02:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004a04:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004a06:	3008      	adds	r0, #8
 8004a08:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 8004a0a:	fb03 0000 	mla	r0, r3, r0, r0
 8004a0e:	4770      	bx	lr

08004a10 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004a10:	2800      	cmp	r0, #0
 8004a12:	f000 8097 	beq.w	8004b44 <HAL_SPI_Init+0x134>
{
 8004a16:	b570      	push	{r4, r5, r6, lr}
 8004a18:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004a1e:	6805      	ldr	r5, [r0, #0]
 8004a20:	4b4c      	ldr	r3, [pc, #304]	; (8004b54 <HAL_SPI_Init+0x144>)
 8004a22:	4e4d      	ldr	r6, [pc, #308]	; (8004b58 <HAL_SPI_Init+0x148>)
 8004a24:	429d      	cmp	r5, r3
 8004a26:	bf18      	it	ne
 8004a28:	42b5      	cmpne	r5, r6
 8004a2a:	bf14      	ite	ne
 8004a2c:	2601      	movne	r6, #1
 8004a2e:	2600      	moveq	r6, #0
 8004a30:	d007      	beq.n	8004a42 <HAL_SPI_Init+0x32>
 8004a32:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8004a36:	429d      	cmp	r5, r3
 8004a38:	d003      	beq.n	8004a42 <HAL_SPI_Init+0x32>
 8004a3a:	68c3      	ldr	r3, [r0, #12]
 8004a3c:	2b0f      	cmp	r3, #15
 8004a3e:	f200 8083 	bhi.w	8004b48 <HAL_SPI_Init+0x138>
  packet_length = SPI_GetPacketSize(hspi);
 8004a42:	4620      	mov	r0, r4
 8004a44:	f7ff ffdc 	bl	8004a00 <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004a48:	b126      	cbz	r6, 8004a54 <HAL_SPI_Init+0x44>
 8004a4a:	4b44      	ldr	r3, [pc, #272]	; (8004b5c <HAL_SPI_Init+0x14c>)
 8004a4c:	429d      	cmp	r5, r3
 8004a4e:	d001      	beq.n	8004a54 <HAL_SPI_Init+0x44>
 8004a50:	2808      	cmp	r0, #8
 8004a52:	d87b      	bhi.n	8004b4c <HAL_SPI_Init+0x13c>
 8004a54:	4a3f      	ldr	r2, [pc, #252]	; (8004b54 <HAL_SPI_Init+0x144>)
 8004a56:	4b40      	ldr	r3, [pc, #256]	; (8004b58 <HAL_SPI_Init+0x148>)
 8004a58:	429d      	cmp	r5, r3
 8004a5a:	bf18      	it	ne
 8004a5c:	4295      	cmpne	r5, r2
 8004a5e:	d003      	beq.n	8004a68 <HAL_SPI_Init+0x58>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004a60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a64:	429d      	cmp	r5, r3
 8004a66:	d101      	bne.n	8004a6c <HAL_SPI_Init+0x5c>
 8004a68:	2810      	cmp	r0, #16
 8004a6a:	d871      	bhi.n	8004b50 <HAL_SPI_Init+0x140>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a6c:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d054      	beq.n	8004b1e <HAL_SPI_Init+0x10e>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004a74:	2302      	movs	r3, #2
 8004a76:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8004a7a:	6822      	ldr	r2, [r4, #0]
 8004a7c:	6813      	ldr	r3, [r2, #0]
 8004a7e:	f023 0301 	bic.w	r3, r3, #1
 8004a82:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8004a84:	69a3      	ldr	r3, [r4, #24]
 8004a86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a8a:	d04e      	beq.n	8004b2a <HAL_SPI_Init+0x11a>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004a8c:	69e3      	ldr	r3, [r4, #28]
 8004a8e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004a90:	4313      	orrs	r3, r2
 8004a92:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004a94:	4313      	orrs	r3, r2
 8004a96:	68e1      	ldr	r1, [r4, #12]
 8004a98:	6822      	ldr	r2, [r4, #0]
 8004a9a:	430b      	orrs	r3, r1
 8004a9c:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8004a9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004aa0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	69a2      	ldr	r2, [r4, #24]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	6922      	ldr	r2, [r4, #16]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	6962      	ldr	r2, [r4, #20]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	6a22      	ldr	r2, [r4, #32]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	6862      	ldr	r2, [r4, #4]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	68a2      	ldr	r2, [r4, #8]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004aca:	6822      	ldr	r2, [r4, #0]
 8004acc:	430b      	orrs	r3, r1
 8004ace:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004ad0:	6863      	ldr	r3, [r4, #4]
 8004ad2:	b96b      	cbnz	r3, 8004af0 <HAL_SPI_Init+0xe0>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004ad4:	6822      	ldr	r2, [r4, #0]
 8004ad6:	6893      	ldr	r3, [r2, #8]
 8004ad8:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8004adc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ae0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004ae2:	6822      	ldr	r2, [r4, #0]
 8004ae4:	6893      	ldr	r3, [r2, #8]
 8004ae6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004aea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004aee:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004af0:	6822      	ldr	r2, [r4, #0]
 8004af2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004af4:	f023 0301 	bic.w	r3, r3, #1
 8004af8:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004afa:	6863      	ldr	r3, [r4, #4]
 8004afc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004b00:	d006      	beq.n	8004b10 <HAL_SPI_Init+0x100>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004b02:	6822      	ldr	r2, [r4, #0]
 8004b04:	68d3      	ldr	r3, [r2, #12]
 8004b06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b0a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b10:	2000      	movs	r0, #0
 8004b12:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004b16:	2301      	movs	r3, #1
 8004b18:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8004b1c:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004b1e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8004b22:	4620      	mov	r0, r4
 8004b24:	f001 fc9c 	bl	8006460 <HAL_SPI_MspInit>
 8004b28:	e7a4      	b.n	8004a74 <HAL_SPI_Init+0x64>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8004b2a:	6863      	ldr	r3, [r4, #4]
 8004b2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b30:	d1ac      	bne.n	8004a8c <HAL_SPI_Init+0x7c>
 8004b32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1a9      	bne.n	8004a8c <HAL_SPI_Init+0x7c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004b38:	6822      	ldr	r2, [r4, #0]
 8004b3a:	6813      	ldr	r3, [r2, #0]
 8004b3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	e7a3      	b.n	8004a8c <HAL_SPI_Init+0x7c>
    return HAL_ERROR;
 8004b44:	2001      	movs	r0, #1
}
 8004b46:	4770      	bx	lr
    return HAL_ERROR;
 8004b48:	2001      	movs	r0, #1
 8004b4a:	e7e7      	b.n	8004b1c <HAL_SPI_Init+0x10c>
    return HAL_ERROR;
 8004b4c:	2001      	movs	r0, #1
 8004b4e:	e7e5      	b.n	8004b1c <HAL_SPI_Init+0x10c>
 8004b50:	2001      	movs	r0, #1
 8004b52:	e7e3      	b.n	8004b1c <HAL_SPI_Init+0x10c>
 8004b54:	40013000 	.word	0x40013000
 8004b58:	40003800 	.word	0x40003800
 8004b5c:	40003c00 	.word	0x40003c00

08004b60 <HAL_SPI_TransmitReceive_DMA>:
{
 8004b60:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 8004b62:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
 8004b66:	2c01      	cmp	r4, #1
 8004b68:	f000 8122 	beq.w	8004db0 <HAL_SPI_TransmitReceive_DMA+0x250>
 8004b6c:	2401      	movs	r4, #1
 8004b6e:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
  tmp_state   = hspi->State;
 8004b72:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 8004b76:	b2e4      	uxtb	r4, r4
  tmp_mode    = hspi->Init.Mode;
 8004b78:	6845      	ldr	r5, [r0, #4]
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 8004b7a:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 8004b7e:	d034      	beq.n	8004bea <HAL_SPI_TransmitReceive_DMA+0x8a>
 8004b80:	2c01      	cmp	r4, #1
 8004b82:	d138      	bne.n	8004bf6 <HAL_SPI_TransmitReceive_DMA+0x96>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8004b84:	fab2 f482 	clz	r4, r2
 8004b88:	0964      	lsrs	r4, r4, #5
 8004b8a:	2900      	cmp	r1, #0
 8004b8c:	bf08      	it	eq
 8004b8e:	2401      	moveq	r4, #1
 8004b90:	2c00      	cmp	r4, #0
 8004b92:	d136      	bne.n	8004c02 <HAL_SPI_TransmitReceive_DMA+0xa2>
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d034      	beq.n	8004c02 <HAL_SPI_TransmitReceive_DMA+0xa2>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b98:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 8004b9c:	b2e4      	uxtb	r4, r4
 8004b9e:	2c04      	cmp	r4, #4
 8004ba0:	d002      	beq.n	8004ba8 <HAL_SPI_TransmitReceive_DMA+0x48>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ba2:	2405      	movs	r4, #5
 8004ba4:	f880 4081 	strb.w	r4, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ba8:	2400      	movs	r4, #0
 8004baa:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004bae:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8004bb0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 8004bb4:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004bb8:	6642      	str	r2, [r0, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8004bba:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  hspi->RxXferCount = Size;
 8004bbe:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->RxISR       = NULL;
 8004bc2:	6704      	str	r4, [r0, #112]	; 0x70
  hspi->TxISR       = NULL;
 8004bc4:	6744      	str	r4, [r0, #116]	; 0x74
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004bc6:	6801      	ldr	r1, [r0, #0]
 8004bc8:	688a      	ldr	r2, [r1, #8]
 8004bca:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004bce:	608a      	str	r2, [r1, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8004bd0:	68c2      	ldr	r2, [r0, #12]
 8004bd2:	2a0f      	cmp	r2, #15
 8004bd4:	d91a      	bls.n	8004c0c <HAL_SPI_TransmitReceive_DMA+0xac>
 8004bd6:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 8004bd8:	6989      	ldr	r1, [r1, #24]
 8004bda:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8004bde:	d015      	beq.n	8004c0c <HAL_SPI_TransmitReceive_DMA+0xac>
    __HAL_UNLOCK(hspi);
 8004be0:	2300      	movs	r3, #0
 8004be2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 8004be6:	2201      	movs	r2, #1
 8004be8:	e009      	b.n	8004bfe <HAL_SPI_TransmitReceive_DMA+0x9e>
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 8004bea:	6885      	ldr	r5, [r0, #8]
 8004bec:	2d00      	cmp	r5, #0
 8004bee:	d1c7      	bne.n	8004b80 <HAL_SPI_TransmitReceive_DMA+0x20>
 8004bf0:	2c04      	cmp	r4, #4
 8004bf2:	d1c5      	bne.n	8004b80 <HAL_SPI_TransmitReceive_DMA+0x20>
 8004bf4:	e7c6      	b.n	8004b84 <HAL_SPI_TransmitReceive_DMA+0x24>
    __HAL_UNLOCK(hspi);
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 8004bfc:	2202      	movs	r2, #2
}
 8004bfe:	4610      	mov	r0, r2
 8004c00:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hspi);
 8004c02:	2300      	movs	r3, #0
 8004c04:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 8004c08:	2201      	movs	r2, #1
 8004c0a:	e7f8      	b.n	8004bfe <HAL_SPI_TransmitReceive_DMA+0x9e>
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8004c0c:	2a07      	cmp	r2, #7
 8004c0e:	d907      	bls.n	8004c20 <HAL_SPI_TransmitReceive_DMA+0xc0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8004c10:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 8004c12:	6989      	ldr	r1, [r1, #24]
 8004c14:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004c18:	bf18      	it	ne
 8004c1a:	f5b1 4f80 	cmpne.w	r1, #16384	; 0x4000
 8004c1e:	d1df      	bne.n	8004be0 <HAL_SPI_TransmitReceive_DMA+0x80>
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004c20:	2a07      	cmp	r2, #7
 8004c22:	d854      	bhi.n	8004cce <HAL_SPI_TransmitReceive_DMA+0x16e>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c24:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8004c26:	6991      	ldr	r1, [r2, #24]
 8004c28:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004c2c:	d033      	beq.n	8004c96 <HAL_SPI_TransmitReceive_DMA+0x136>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8004c2e:	6992      	ldr	r2, [r2, #24]
 8004c30:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8004c34:	d036      	beq.n	8004ca4 <HAL_SPI_TransmitReceive_DMA+0x144>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c36:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8004c38:	6991      	ldr	r1, [r2, #24]
 8004c3a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004c3e:	d038      	beq.n	8004cb2 <HAL_SPI_TransmitReceive_DMA+0x152>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8004c40:	6992      	ldr	r2, [r2, #24]
 8004c42:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8004c46:	d03b      	beq.n	8004cc0 <HAL_SPI_TransmitReceive_DMA+0x160>
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004c48:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	2a04      	cmp	r2, #4
 8004c50:	d057      	beq.n	8004d02 <HAL_SPI_TransmitReceive_DMA+0x1a2>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004c52:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8004c54:	4957      	ldr	r1, [pc, #348]	; (8004db4 <HAL_SPI_TransmitReceive_DMA+0x254>)
 8004c56:	6411      	str	r1, [r2, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004c58:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8004c5a:	4957      	ldr	r1, [pc, #348]	; (8004db8 <HAL_SPI_TransmitReceive_DMA+0x258>)
 8004c5c:	63d1      	str	r1, [r2, #60]	; 0x3c
 8004c5e:	461d      	mov	r5, r3
 8004c60:	4604      	mov	r4, r0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004c62:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004c64:	4a55      	ldr	r2, [pc, #340]	; (8004dbc <HAL_SPI_TransmitReceive_DMA+0x25c>)
 8004c66:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 8004c68:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8004c6e:	6801      	ldr	r1, [r0, #0]
 8004c70:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8004c74:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8004c76:	3130      	adds	r1, #48	; 0x30
 8004c78:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8004c7a:	f7fc f83f 	bl	8000cfc <HAL_DMA_Start_IT>
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	d046      	beq.n	8004d10 <HAL_SPI_TransmitReceive_DMA+0x1b0>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004c82:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004c86:	f043 0310 	orr.w	r3, r3, #16
 8004c8a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 8004c94:	e7b3      	b.n	8004bfe <HAL_SPI_TransmitReceive_DMA+0x9e>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8004c96:	f8b0 1062 	ldrh.w	r1, [r0, #98]	; 0x62
 8004c9a:	3101      	adds	r1, #1
 8004c9c:	0849      	lsrs	r1, r1, #1
 8004c9e:	f8a0 1062 	strh.w	r1, [r0, #98]	; 0x62
 8004ca2:	e7c4      	b.n	8004c2e <HAL_SPI_TransmitReceive_DMA+0xce>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8004ca4:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 8004ca8:	3203      	adds	r2, #3
 8004caa:	0892      	lsrs	r2, r2, #2
 8004cac:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
 8004cb0:	e7c1      	b.n	8004c36 <HAL_SPI_TransmitReceive_DMA+0xd6>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8004cb2:	f8b0 106a 	ldrh.w	r1, [r0, #106]	; 0x6a
 8004cb6:	3101      	adds	r1, #1
 8004cb8:	0849      	lsrs	r1, r1, #1
 8004cba:	f8a0 106a 	strh.w	r1, [r0, #106]	; 0x6a
 8004cbe:	e7bf      	b.n	8004c40 <HAL_SPI_TransmitReceive_DMA+0xe0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8004cc0:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 8004cc4:	3203      	adds	r2, #3
 8004cc6:	0892      	lsrs	r2, r2, #2
 8004cc8:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
 8004ccc:	e7bc      	b.n	8004c48 <HAL_SPI_TransmitReceive_DMA+0xe8>
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8004cce:	2a0f      	cmp	r2, #15
 8004cd0:	d8ba      	bhi.n	8004c48 <HAL_SPI_TransmitReceive_DMA+0xe8>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8004cd2:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8004cd4:	6992      	ldr	r2, [r2, #24]
 8004cd6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8004cda:	d00b      	beq.n	8004cf4 <HAL_SPI_TransmitReceive_DMA+0x194>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8004cdc:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8004cde:	6992      	ldr	r2, [r2, #24]
 8004ce0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8004ce4:	d1b0      	bne.n	8004c48 <HAL_SPI_TransmitReceive_DMA+0xe8>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8004ce6:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 8004cea:	3201      	adds	r2, #1
 8004cec:	0852      	lsrs	r2, r2, #1
 8004cee:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
 8004cf2:	e7a9      	b.n	8004c48 <HAL_SPI_TransmitReceive_DMA+0xe8>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8004cf4:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 8004cf8:	3201      	adds	r2, #1
 8004cfa:	0852      	lsrs	r2, r2, #1
 8004cfc:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
 8004d00:	e7ec      	b.n	8004cdc <HAL_SPI_TransmitReceive_DMA+0x17c>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004d02:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8004d04:	492e      	ldr	r1, [pc, #184]	; (8004dc0 <HAL_SPI_TransmitReceive_DMA+0x260>)
 8004d06:	6411      	str	r1, [r2, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004d08:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8004d0a:	492e      	ldr	r1, [pc, #184]	; (8004dc4 <HAL_SPI_TransmitReceive_DMA+0x264>)
 8004d0c:	63d1      	str	r1, [r2, #60]	; 0x3c
 8004d0e:	e7a6      	b.n	8004c5e <HAL_SPI_TransmitReceive_DMA+0xfe>
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8004d10:	6822      	ldr	r2, [r4, #0]
 8004d12:	6893      	ldr	r3, [r2, #8]
 8004d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d18:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004d1a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	6413      	str	r3, [r2, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004d20:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8004d22:	63d3      	str	r3, [r2, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004d24:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8004d26:	64d3      	str	r3, [r2, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004d28:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8004d2a:	6513      	str	r3, [r2, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 8004d2c:	6822      	ldr	r2, [r4, #0]
 8004d2e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8004d32:	3220      	adds	r2, #32
 8004d34:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004d36:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8004d38:	f7fb ffe0 	bl	8000cfc <HAL_DMA_Start_IT>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	bb08      	cbnz	r0, 8004d84 <HAL_SPI_TransmitReceive_DMA+0x224>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8004d40:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d48:	d026      	beq.n	8004d98 <HAL_SPI_TransmitReceive_DMA+0x238>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004d4a:	6821      	ldr	r1, [r4, #0]
 8004d4c:	6848      	ldr	r0, [r1, #4]
 8004d4e:	4b1e      	ldr	r3, [pc, #120]	; (8004dc8 <HAL_SPI_TransmitReceive_DMA+0x268>)
 8004d50:	4003      	ands	r3, r0
 8004d52:	432b      	orrs	r3, r5
 8004d54:	604b      	str	r3, [r1, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8004d56:	6821      	ldr	r1, [r4, #0]
 8004d58:	688b      	ldr	r3, [r1, #8]
 8004d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d5e:	608b      	str	r3, [r1, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8004d60:	6821      	ldr	r1, [r4, #0]
 8004d62:	690b      	ldr	r3, [r1, #16]
 8004d64:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 8004d68:	610b      	str	r3, [r1, #16]
  __HAL_SPI_ENABLE(hspi);
 8004d6a:	6821      	ldr	r1, [r4, #0]
 8004d6c:	680b      	ldr	r3, [r1, #0]
 8004d6e:	f043 0301 	orr.w	r3, r3, #1
 8004d72:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d74:	6863      	ldr	r3, [r4, #4]
 8004d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d7a:	d013      	beq.n	8004da4 <HAL_SPI_TransmitReceive_DMA+0x244>
  __HAL_UNLOCK(hspi);
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 8004d82:	e73c      	b.n	8004bfe <HAL_SPI_TransmitReceive_DMA+0x9e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004d84:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004d88:	f043 0310 	orr.w	r3, r3, #16
 8004d8c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8004d90:	2201      	movs	r2, #1
 8004d92:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 8004d96:	e732      	b.n	8004bfe <HAL_SPI_TransmitReceive_DMA+0x9e>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8004d98:	6821      	ldr	r1, [r4, #0]
 8004d9a:	6848      	ldr	r0, [r1, #4]
 8004d9c:	4b0a      	ldr	r3, [pc, #40]	; (8004dc8 <HAL_SPI_TransmitReceive_DMA+0x268>)
 8004d9e:	4003      	ands	r3, r0
 8004da0:	604b      	str	r3, [r1, #4]
 8004da2:	e7d8      	b.n	8004d56 <HAL_SPI_TransmitReceive_DMA+0x1f6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004da4:	6821      	ldr	r1, [r4, #0]
 8004da6:	680b      	ldr	r3, [r1, #0]
 8004da8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dac:	600b      	str	r3, [r1, #0]
 8004dae:	e7e5      	b.n	8004d7c <HAL_SPI_TransmitReceive_DMA+0x21c>
  __HAL_LOCK(hspi);
 8004db0:	2202      	movs	r2, #2
 8004db2:	e724      	b.n	8004bfe <HAL_SPI_TransmitReceive_DMA+0x9e>
 8004db4:	08004e35 	.word	0x08004e35
 8004db8:	08004dfd 	.word	0x08004dfd
 8004dbc:	08004e41 	.word	0x08004e41
 8004dc0:	08004e29 	.word	0x08004e29
 8004dc4:	08004dd1 	.word	0x08004dd1
 8004dc8:	ffff0000 	.word	0xffff0000

08004dcc <HAL_SPI_TxCpltCallback>:
}
 8004dcc:	4770      	bx	lr

08004dce <HAL_SPI_RxCpltCallback>:
}
 8004dce:	4770      	bx	lr

08004dd0 <SPI_DMAReceiveCplt>:
{
 8004dd0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dd2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 8004dd4:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b07      	cmp	r3, #7
 8004ddc:	d009      	beq.n	8004df2 <SPI_DMAReceiveCplt+0x22>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004dde:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004de6:	d005      	beq.n	8004df4 <SPI_DMAReceiveCplt+0x24>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8004de8:	6802      	ldr	r2, [r0, #0]
 8004dea:	6913      	ldr	r3, [r2, #16]
 8004dec:	f043 0308 	orr.w	r3, r3, #8
 8004df0:	6113      	str	r3, [r2, #16]
}
 8004df2:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 8004df4:	f7ff ffeb 	bl	8004dce <HAL_SPI_RxCpltCallback>
 8004df8:	e7fb      	b.n	8004df2 <SPI_DMAReceiveCplt+0x22>

08004dfa <HAL_SPI_TxRxCpltCallback>:
}
 8004dfa:	4770      	bx	lr

08004dfc <SPI_DMATransmitReceiveCplt>:
{
 8004dfc:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dfe:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 8004e00:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b07      	cmp	r3, #7
 8004e08:	d009      	beq.n	8004e1e <SPI_DMATransmitReceiveCplt+0x22>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8004e0a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e12:	d005      	beq.n	8004e20 <SPI_DMATransmitReceiveCplt+0x24>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8004e14:	6802      	ldr	r2, [r0, #0]
 8004e16:	6913      	ldr	r3, [r2, #16]
 8004e18:	f043 0308 	orr.w	r3, r3, #8
 8004e1c:	6113      	str	r3, [r2, #16]
}
 8004e1e:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
 8004e20:	f7ff ffeb 	bl	8004dfa <HAL_SPI_TxRxCpltCallback>
 8004e24:	e7fb      	b.n	8004e1e <SPI_DMATransmitReceiveCplt+0x22>

08004e26 <HAL_SPI_RxHalfCpltCallback>:
}
 8004e26:	4770      	bx	lr

08004e28 <SPI_DMAHalfReceiveCplt>:
{
 8004e28:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004e2a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004e2c:	f7ff fffb 	bl	8004e26 <HAL_SPI_RxHalfCpltCallback>
}
 8004e30:	bd08      	pop	{r3, pc}

08004e32 <HAL_SPI_TxRxHalfCpltCallback>:
}
 8004e32:	4770      	bx	lr

08004e34 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8004e34:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004e36:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004e38:	f7ff fffb 	bl	8004e32 <HAL_SPI_TxRxHalfCpltCallback>
}
 8004e3c:	bd08      	pop	{r3, pc}

08004e3e <HAL_SPI_ErrorCallback>:
}
 8004e3e:	4770      	bx	lr

08004e40 <SPI_DMAError>:
{
 8004e40:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e42:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004e44:	f7fc fd8c 	bl	8001960 <HAL_DMA_GetError>
 8004e48:	2802      	cmp	r0, #2
 8004e4a:	d00e      	beq.n	8004e6a <SPI_DMAError+0x2a>
    SPI_CloseTransfer(hspi);
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	f7ff fd6f 	bl	8004930 <SPI_CloseTransfer>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004e52:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004e56:	f043 0310 	orr.w	r3, r3, #16
 8004e5a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 8004e64:	4620      	mov	r0, r4
 8004e66:	f7ff ffea 	bl	8004e3e <HAL_SPI_ErrorCallback>
}
 8004e6a:	bd10      	pop	{r4, pc}

08004e6c <HAL_SPI_IRQHandler>:
{
 8004e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e70:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 8004e72:	6806      	ldr	r6, [r0, #0]
 8004e74:	f8d6 9010 	ldr.w	r9, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
 8004e78:	f8d6 8014 	ldr.w	r8, [r6, #20]
  uint32_t trigger  = itsource & itflag;
 8004e7c:	ea09 0508 	and.w	r5, r9, r8
  uint32_t cfg1     = hspi->Instance->CFG1;
 8004e80:	f8d6 a008 	ldr.w	sl, [r6, #8]
  HAL_SPI_StateTypeDef State = hspi->State;
 8004e84:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
 8004e88:	b2ff      	uxtb	r7, r7
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8004e8a:	f005 0364 	and.w	r3, r5, #100	; 0x64
 8004e8e:	2b04      	cmp	r3, #4
 8004e90:	d116      	bne.n	8004ec0 <HAL_SPI_IRQHandler+0x54>
    hspi->TxISR(hspi);
 8004e92:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8004e94:	4798      	blx	r3
    hspi->RxISR(hspi);
 8004e96:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004e98:	4620      	mov	r0, r4
 8004e9a:	4798      	blx	r3
    handled = 1UL;
 8004e9c:	2301      	movs	r3, #1
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8004e9e:	f005 0245 	and.w	r2, r5, #69	; 0x45
 8004ea2:	2a01      	cmp	r2, #1
 8004ea4:	d103      	bne.n	8004eae <HAL_SPI_IRQHandler+0x42>
    hspi->RxISR(hspi);
 8004ea6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	4798      	blx	r3
    handled = 1UL;
 8004eac:	2301      	movs	r3, #1
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8004eae:	f005 0226 	and.w	r2, r5, #38	; 0x26
 8004eb2:	2a02      	cmp	r2, #2
 8004eb4:	d106      	bne.n	8004ec4 <HAL_SPI_IRQHandler+0x58>
    hspi->TxISR(hspi);
 8004eb6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004eb8:	4620      	mov	r0, r4
 8004eba:	4798      	blx	r3
}
 8004ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint32_t handled  = 0UL;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	e7ec      	b.n	8004e9e <HAL_SPI_IRQHandler+0x32>
  if (handled != 0UL)
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1f9      	bne.n	8004ebc <HAL_SPI_IRQHandler+0x50>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8004ec8:	f015 0f08 	tst.w	r5, #8
 8004ecc:	d06c      	beq.n	8004fa8 <HAL_SPI_IRQHandler+0x13c>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004ece:	6822      	ldr	r2, [r4, #0]
 8004ed0:	6993      	ldr	r3, [r2, #24]
 8004ed2:	f043 0308 	orr.w	r3, r3, #8
 8004ed6:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004ed8:	6822      	ldr	r2, [r4, #0]
 8004eda:	6993      	ldr	r3, [r2, #24]
 8004edc:	f043 0310 	orr.w	r3, r3, #16
 8004ee0:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8004ee2:	6822      	ldr	r2, [r4, #0]
 8004ee4:	6993      	ldr	r3, [r2, #24]
 8004ee6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004eea:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8004eec:	6822      	ldr	r2, [r4, #0]
 8004eee:	6913      	ldr	r3, [r2, #16]
 8004ef0:	f023 0308 	bic.w	r3, r3, #8
 8004ef4:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8004ef6:	f41a 4f40 	tst.w	sl, #49152	; 0xc000
 8004efa:	d009      	beq.n	8004f10 <HAL_SPI_IRQHandler+0xa4>
 8004efc:	2f04      	cmp	r7, #4
 8004efe:	d002      	beq.n	8004f06 <HAL_SPI_IRQHandler+0x9a>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8004f00:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	b123      	cbz	r3, 8004f10 <HAL_SPI_IRQHandler+0xa4>
 8004f06:	2f03      	cmp	r7, #3
 8004f08:	d011      	beq.n	8004f2e <HAL_SPI_IRQHandler+0xc2>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8004f0a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	b973      	cbnz	r3, 8004f2e <HAL_SPI_IRQHandler+0xc2>
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8004f18:	d021      	beq.n	8004f5e <HAL_SPI_IRQHandler+0xf2>
      SPI_CloseTransfer(hspi);
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	f7ff fd08 	bl	8004930 <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 8004f20:	2301      	movs	r3, #1
 8004f22:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f26:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d130      	bne.n	8004f90 <HAL_SPI_IRQHandler+0x124>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8004f2e:	2f05      	cmp	r7, #5
 8004f30:	d032      	beq.n	8004f98 <HAL_SPI_IRQHandler+0x12c>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8004f32:	2f04      	cmp	r7, #4
 8004f34:	d034      	beq.n	8004fa0 <HAL_SPI_IRQHandler+0x134>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8004f36:	2f03      	cmp	r7, #3
 8004f38:	d1c0      	bne.n	8004ebc <HAL_SPI_IRQHandler+0x50>
      HAL_SPI_TxCpltCallback(hspi);
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	f7ff ff46 	bl	8004dcc <HAL_SPI_TxCpltCallback>
 8004f40:	e7bc      	b.n	8004ebc <HAL_SPI_IRQHandler+0x50>
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f42:	2b07      	cmp	r3, #7
 8004f44:	d91b      	bls.n	8004f7e <HAL_SPI_IRQHandler+0x112>
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004f46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f48:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 8004f4a:	801a      	strh	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f4e:	3302      	adds	r3, #2
 8004f50:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8004f52:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8004f5e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0d8      	beq.n	8004f1a <HAL_SPI_IRQHandler+0xae>
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004f68:	68e3      	ldr	r3, [r4, #12]
 8004f6a:	2b0f      	cmp	r3, #15
 8004f6c:	d9e9      	bls.n	8004f42 <HAL_SPI_IRQHandler+0xd6>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004f6e:	6822      	ldr	r2, [r4, #0]
 8004f70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f72:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f74:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8004f76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f78:	3304      	adds	r3, #4
 8004f7a:	6663      	str	r3, [r4, #100]	; 0x64
 8004f7c:	e7e9      	b.n	8004f52 <HAL_SPI_IRQHandler+0xe6>
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004f7e:	6822      	ldr	r2, [r4, #0]
 8004f80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f82:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8004f86:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	6663      	str	r3, [r4, #100]	; 0x64
 8004f8e:	e7e0      	b.n	8004f52 <HAL_SPI_IRQHandler+0xe6>
        HAL_SPI_ErrorCallback(hspi);
 8004f90:	4620      	mov	r0, r4
 8004f92:	f7ff ff54 	bl	8004e3e <HAL_SPI_ErrorCallback>
        return;
 8004f96:	e791      	b.n	8004ebc <HAL_SPI_IRQHandler+0x50>
      HAL_SPI_TxRxCpltCallback(hspi);
 8004f98:	4620      	mov	r0, r4
 8004f9a:	f7ff ff2e 	bl	8004dfa <HAL_SPI_TxRxCpltCallback>
 8004f9e:	e78d      	b.n	8004ebc <HAL_SPI_IRQHandler+0x50>
      HAL_SPI_RxCpltCallback(hspi);
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	f7ff ff14 	bl	8004dce <HAL_SPI_RxCpltCallback>
 8004fa6:	e789      	b.n	8004ebc <HAL_SPI_IRQHandler+0x50>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8004fa8:	f418 6f00 	tst.w	r8, #2048	; 0x800
 8004fac:	d002      	beq.n	8004fb4 <HAL_SPI_IRQHandler+0x148>
 8004fae:	f019 0f08 	tst.w	r9, #8
 8004fb2:	d174      	bne.n	800509e <HAL_SPI_IRQHandler+0x232>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8004fb4:	f415 7f58 	tst.w	r5, #864	; 0x360
 8004fb8:	d080      	beq.n	8004ebc <HAL_SPI_IRQHandler+0x50>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8004fba:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004fbe:	d00a      	beq.n	8004fd6 <HAL_SPI_IRQHandler+0x16a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004fc0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004fc4:	f043 0304 	orr.w	r3, r3, #4
 8004fc8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fcc:	6822      	ldr	r2, [r4, #0]
 8004fce:	6993      	ldr	r3, [r2, #24]
 8004fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fd4:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8004fd6:	f415 7f00 	tst.w	r5, #512	; 0x200
 8004fda:	d00a      	beq.n	8004ff2 <HAL_SPI_IRQHandler+0x186>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004fdc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004fe0:	f043 0301 	orr.w	r3, r3, #1
 8004fe4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004fe8:	6822      	ldr	r2, [r4, #0]
 8004fea:	6993      	ldr	r3, [r2, #24]
 8004fec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ff0:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8004ff2:	f415 7f80 	tst.w	r5, #256	; 0x100
 8004ff6:	d00a      	beq.n	800500e <HAL_SPI_IRQHandler+0x1a2>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004ff8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004ffc:	f043 0308 	orr.w	r3, r3, #8
 8005000:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005004:	6822      	ldr	r2, [r4, #0]
 8005006:	6993      	ldr	r3, [r2, #24]
 8005008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800500c:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800500e:	f015 0f20 	tst.w	r5, #32
 8005012:	d00a      	beq.n	800502a <HAL_SPI_IRQHandler+0x1be>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005014:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800501c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005020:	6822      	ldr	r2, [r4, #0]
 8005022:	6993      	ldr	r3, [r2, #24]
 8005024:	f043 0320 	orr.w	r3, r3, #32
 8005028:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800502a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800502e:	2b00      	cmp	r3, #0
 8005030:	f43f af44 	beq.w	8004ebc <HAL_SPI_IRQHandler+0x50>
      __HAL_SPI_DISABLE(hspi);
 8005034:	6822      	ldr	r2, [r4, #0]
 8005036:	6813      	ldr	r3, [r2, #0]
 8005038:	f023 0301 	bic.w	r3, r3, #1
 800503c:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800503e:	6822      	ldr	r2, [r4, #0]
 8005040:	6911      	ldr	r1, [r2, #16]
 8005042:	4b1d      	ldr	r3, [pc, #116]	; (80050b8 <HAL_SPI_IRQHandler+0x24c>)
 8005044:	400b      	ands	r3, r1
 8005046:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005048:	f40a 4a40 	and.w	sl, sl, #49152	; 0xc000
 800504c:	f5ba 4f40 	cmp.w	sl, #49152	; 0xc000
 8005050:	d12b      	bne.n	80050aa <HAL_SPI_IRQHandler+0x23e>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005052:	6822      	ldr	r2, [r4, #0]
 8005054:	6893      	ldr	r3, [r2, #8]
 8005056:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800505a:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 800505c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800505e:	b15b      	cbz	r3, 8005078 <HAL_SPI_IRQHandler+0x20c>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005060:	4a16      	ldr	r2, [pc, #88]	; (80050bc <HAL_SPI_IRQHandler+0x250>)
 8005062:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005064:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005066:	f7fb ff95 	bl	8000f94 <HAL_DMA_Abort_IT>
 800506a:	b128      	cbz	r0, 8005078 <HAL_SPI_IRQHandler+0x20c>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800506c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005074:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 8005078:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800507a:	2b00      	cmp	r3, #0
 800507c:	f43f af1e 	beq.w	8004ebc <HAL_SPI_IRQHandler+0x50>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005080:	4a0e      	ldr	r2, [pc, #56]	; (80050bc <HAL_SPI_IRQHandler+0x250>)
 8005082:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005084:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005086:	f7fb ff85 	bl	8000f94 <HAL_DMA_Abort_IT>
 800508a:	2800      	cmp	r0, #0
 800508c:	f43f af16 	beq.w	8004ebc <HAL_SPI_IRQHandler+0x50>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005090:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005098:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800509c:	e70e      	b.n	8004ebc <HAL_SPI_IRQHandler+0x50>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800509e:	6822      	ldr	r2, [r4, #0]
 80050a0:	6993      	ldr	r3, [r2, #24]
 80050a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80050a6:	6193      	str	r3, [r2, #24]
    return;
 80050a8:	e708      	b.n	8004ebc <HAL_SPI_IRQHandler+0x50>
        hspi->State = HAL_SPI_STATE_READY;
 80050aa:	2301      	movs	r3, #1
 80050ac:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80050b0:	4620      	mov	r0, r4
 80050b2:	f7ff fec4 	bl	8004e3e <HAL_SPI_ErrorCallback>
 80050b6:	e701      	b.n	8004ebc <HAL_SPI_IRQHandler+0x50>
 80050b8:	fffffc94 	.word	0xfffffc94
 80050bc:	080050c1 	.word	0x080050c1

080050c0 <SPI_DMAAbortOnError>:
{
 80050c0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050c2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 80050c4:	2300      	movs	r3, #0
 80050c6:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80050ca:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 80050ce:	2301      	movs	r3, #1
 80050d0:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 80050d4:	f7ff feb3 	bl	8004e3e <HAL_SPI_ErrorCallback>
}
 80050d8:	bd08      	pop	{r3, pc}
	...

080050dc <attackDetect2>:


float previousRampSmoothed[2] = {0.0f, 0.0f};
int downCounter[2] = {0,0};
void attackDetect2(int whichString, float input)
{
 80050dc:	b570      	push	{r4, r5, r6, lr}
 80050de:	ed2d 8b04 	vpush	{d8-d9}
 80050e2:	4604      	mov	r4, r0
	//float increment = 0.000755857898715f;
	//float increment = 0.000455857898715f;
	//float increment = 0.000255857898715f;
	float rampsmoothed = 0.0f;

	noteOnHappened[whichString] = 0;
 80050e4:	4b89      	ldr	r3, [pc, #548]	; (800530c <attackDetect2+0x230>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
	input = tHighpass_tick(&dcBlock[whichString], input);
 80050ec:	0085      	lsls	r5, r0, #2
 80050ee:	4888      	ldr	r0, [pc, #544]	; (8005310 <attackDetect2+0x234>)
 80050f0:	4428      	add	r0, r5
 80050f2:	f001 ffbd 	bl	8007070 <tHighpass_tick>
	//input = tSVF_tick(&lowpass[whichString], input);
	tempAbs = fabsf(input);
 80050f6:	eef0 8ac0 	vabs.f32	s17, s0

	smoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 80050fa:	eeb0 0a68 	vmov.f32	s0, s17
 80050fe:	4885      	ldr	r0, [pc, #532]	; (8005314 <attackDetect2+0x238>)
 8005100:	4428      	add	r0, r5
 8005102:	f001 fe7f 	bl	8006e04 <tSlide_tick>
 8005106:	eeb0 8a40 	vmov.f32	s16, s0
	smoothed2  = tSlide_tick(&slowSlide[whichString], smoothed);
 800510a:	4883      	ldr	r0, [pc, #524]	; (8005318 <attackDetect2+0x23c>)
 800510c:	4428      	add	r0, r5
 800510e:	f001 fe79 	bl	8006e04 <tSlide_tick>
 8005112:	eef0 9a40 	vmov.f32	s19, s0
	dbSmoothed = LEAF_clip(-54.0f, atodb(smoothed), 12.0f);
 8005116:	eeb0 0a48 	vmov.f32	s0, s16
 800511a:	f002 f84b 	bl	80071b4 <atodb>
 800511e:	ed9f 9a7f 	vldr	s18, [pc, #508]	; 800531c <attackDetect2+0x240>
 8005122:	eeb2 1a08 	vmov.f32	s2, #40	; 0x41400000  12.0
 8005126:	eef0 0a40 	vmov.f32	s1, s0
 800512a:	eeb0 0a49 	vmov.f32	s0, s18
 800512e:	f001 fff5 	bl	800711c <LEAF_clip>
 8005132:	eeb0 8a40 	vmov.f32	s16, s0

	dbSmoothed2 = LEAF_clip(-54.0f, atodb(smoothed2), 12.0f);
 8005136:	eeb0 0a69 	vmov.f32	s0, s19
 800513a:	f002 f83b 	bl	80071b4 <atodb>
 800513e:	eeb2 1a08 	vmov.f32	s2, #40	; 0x41400000  12.0
 8005142:	eef0 0a40 	vmov.f32	s1, s0
 8005146:	eeb0 0a49 	vmov.f32	s0, s18
 800514a:	f001 ffe7 	bl	800711c <LEAF_clip>
	intoThresh = dbSmoothed - dbSmoothed2;
 800514e:	ee38 8a40 	vsub.f32	s16, s16, s0

	if (whichString == 0)
 8005152:	b914      	cbnz	r4, 800515a <attackDetect2+0x7e>
	{
		intoThresh1 = intoThresh;
 8005154:	4b6d      	ldr	r3, [pc, #436]	; (800530c <attackDetect2+0x230>)
 8005156:	ed83 8a02 	vstr	s16, [r3, #8]
	}
	outOfThresh[whichString] = tThreshold_tick(&threshold[whichString], intoThresh);
 800515a:	00a5      	lsls	r5, r4, #2
 800515c:	eeb0 0a48 	vmov.f32	s0, s16
 8005160:	486f      	ldr	r0, [pc, #444]	; (8005320 <attackDetect2+0x244>)
 8005162:	4428      	add	r0, r5
 8005164:	f001 fab0 	bl	80066c8 <tThreshold_tick>
 8005168:	4b68      	ldr	r3, [pc, #416]	; (800530c <attackDetect2+0x230>)
 800516a:	442b      	add	r3, r5
 800516c:	60d8      	str	r0, [r3, #12]
	if ((outOfThresh[whichString] > 0) && (previousOutOfThresh[whichString] == 0))
 800516e:	2800      	cmp	r0, #0
 8005170:	dd0a      	ble.n	8005188 <attackDetect2+0xac>
 8005172:	4b66      	ldr	r3, [pc, #408]	; (800530c <attackDetect2+0x230>)
 8005174:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	b92b      	cbnz	r3, 8005188 <attackDetect2+0xac>
	{
		outOfThreshPositiveChange[whichString] = 1;
 800517c:	4b63      	ldr	r3, [pc, #396]	; (800530c <attackDetect2+0x230>)
 800517e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005182:	2201      	movs	r2, #1
 8005184:	61da      	str	r2, [r3, #28]
 8005186:	e004      	b.n	8005192 <attackDetect2+0xb6>
	}

	else
	{
		outOfThreshPositiveChange[whichString] = 0;
 8005188:	4b60      	ldr	r3, [pc, #384]	; (800530c <attackDetect2+0x230>)
 800518a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800518e:	2200      	movs	r2, #0
 8005190:	61da      	str	r2, [r3, #28]
	}

	previousOutOfThresh[whichString] = outOfThresh[whichString];
 8005192:	4b5e      	ldr	r3, [pc, #376]	; (800530c <attackDetect2+0x230>)
 8005194:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005198:	6158      	str	r0, [r3, #20]



	//if you didn't get an attack within the last 1323 samples, and you got one now
	if ((status[whichString] <= 0.0f) && (outOfThreshPositiveChange[whichString] == 1))
 800519a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800519e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a6:	d96a      	bls.n	800527e <attackDetect2+0x1a2>
		status[whichString] = 1.0f;
		currentMaximum[whichString] = 0.0f;
		delayCounter[whichString] = 50;
		sahArmed[whichString] = 1;
	}
	else if (status[whichString] > 0.0f)
 80051a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b0:	dd08      	ble.n	80051c4 <attackDetect2+0xe8>
	{
		status[whichString] = status[whichString] - (increment);
 80051b2:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8005324 <attackDetect2+0x248>
 80051b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80051ba:	4b54      	ldr	r3, [pc, #336]	; (800530c <attackDetect2+0x230>)
 80051bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80051c0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	}
	tRampUpDown_setDest(&updownRamp[whichString], tempAbs);
 80051c4:	00a6      	lsls	r6, r4, #2
 80051c6:	4d58      	ldr	r5, [pc, #352]	; (8005328 <attackDetect2+0x24c>)
 80051c8:	4435      	add	r5, r6
 80051ca:	eeb0 0a68 	vmov.f32	s0, s17
 80051ce:	4628      	mov	r0, r5
 80051d0:	f001 fd44 	bl	8006c5c <tRampUpDown_setDest>
	rampsmoothed = tRampUpDown_tick(&updownRamp[whichString]);
 80051d4:	4628      	mov	r0, r5
 80051d6:	f001 fd63 	bl	8006ca0 <tRampUpDown_tick>

	//update the maximum of the samples since last reset
	if (rampsmoothed > currentMaximum[whichString])
 80051da:	4b54      	ldr	r3, [pc, #336]	; (800532c <attackDetect2+0x250>)
 80051dc:	4433      	add	r3, r6
 80051de:	edd3 7a00 	vldr	s15, [r3]
 80051e2:	eef4 7ac0 	vcmpe.f32	s15, s0
 80051e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ea:	d504      	bpl.n	80051f6 <attackDetect2+0x11a>
	{
		currentMaximum[whichString] = rampsmoothed;
 80051ec:	4b4f      	ldr	r3, [pc, #316]	; (800532c <attackDetect2+0x250>)
 80051ee:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80051f2:	ed83 0a00 	vstr	s0, [r3]
	}

	if (delayCounter[whichString] > 0)
 80051f6:	4b45      	ldr	r3, [pc, #276]	; (800530c <attackDetect2+0x230>)
 80051f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	2b00      	cmp	r3, #0
 8005200:	dd04      	ble.n	800520c <attackDetect2+0x130>
	{
		delayCounter[whichString]--;
 8005202:	4a42      	ldr	r2, [pc, #264]	; (800530c <attackDetect2+0x230>)
 8005204:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8005208:	3b01      	subs	r3, #1
 800520a:	62d3      	str	r3, [r2, #44]	; 0x2c
	}

	if ((intoThresh < (previousRampSmoothed[whichString] - 0.004f)) && (sahArmed[whichString] == 1))
 800520c:	4b3f      	ldr	r3, [pc, #252]	; (800530c <attackDetect2+0x230>)
 800520e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005212:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005216:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8005330 <attackDetect2+0x254>
 800521a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800521e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8005222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005226:	dd05      	ble.n	8005234 <attackDetect2+0x158>
 8005228:	4b38      	ldr	r3, [pc, #224]	; (800530c <attackDetect2+0x230>)
 800522a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800522e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005230:	2b01      	cmp	r3, #1
 8005232:	d039      	beq.n	80052a8 <attackDetect2+0x1cc>
	{
		downCounter[whichString]++;
	}
	else if ((intoThresh >= (previousRampSmoothed[whichString]) - 0.1f) && (sahArmed[whichString] == 1))
 8005234:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8005334 <attackDetect2+0x258>
 8005238:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800523c:	eef4 7ac8 	vcmpe.f32	s15, s16
 8005240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005244:	d805      	bhi.n	8005252 <attackDetect2+0x176>
 8005246:	4b31      	ldr	r3, [pc, #196]	; (800530c <attackDetect2+0x230>)
 8005248:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800524c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524e:	2b01      	cmp	r3, #1
 8005250:	d031      	beq.n	80052b6 <attackDetect2+0x1da>
	{
		downCounter[whichString] = 0;
	}

	if ((sahArmed[whichString] == 1) && (delayCounter[whichString] == 0))
 8005252:	4b2e      	ldr	r3, [pc, #184]	; (800530c <attackDetect2+0x230>)
 8005254:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800525a:	2b01      	cmp	r3, #1
 800525c:	d031      	beq.n	80052c2 <attackDetect2+0x1e6>
		noteOnHappened[whichString] = 1;
		sahArmed[whichString] = 0;
		downCounter[whichString] = 0;
		offLockout[whichString] = offLockoutDelay;
	}
	previousRampSmoothed[whichString] = intoThresh;
 800525e:	4b2b      	ldr	r3, [pc, #172]	; (800530c <attackDetect2+0x230>)
 8005260:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005264:	ed83 8a0f 	vstr	s16, [r3, #60]	; 0x3c

	if (offLockout[whichString] > 0)
 8005268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526a:	2b00      	cmp	r3, #0
 800526c:	dd04      	ble.n	8005278 <attackDetect2+0x19c>
	{
		offLockout[whichString]--;
 800526e:	4a27      	ldr	r2, [pc, #156]	; (800530c <attackDetect2+0x230>)
 8005270:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005274:	3b01      	subs	r3, #1
 8005276:	6563      	str	r3, [r4, #84]	; 0x54
	}

}
 8005278:	ecbd 8b04 	vpop	{d8-d9}
 800527c:	bd70      	pop	{r4, r5, r6, pc}
	if ((status[whichString] <= 0.0f) && (outOfThreshPositiveChange[whichString] == 1))
 800527e:	4b23      	ldr	r3, [pc, #140]	; (800530c <attackDetect2+0x230>)
 8005280:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d18e      	bne.n	80051a8 <attackDetect2+0xcc>
		status[whichString] = 1.0f;
 800528a:	00a1      	lsls	r1, r4, #2
 800528c:	4b1f      	ldr	r3, [pc, #124]	; (800530c <attackDetect2+0x230>)
 800528e:	440b      	add	r3, r1
 8005290:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005294:	625a      	str	r2, [r3, #36]	; 0x24
		currentMaximum[whichString] = 0.0f;
 8005296:	4a25      	ldr	r2, [pc, #148]	; (800532c <attackDetect2+0x250>)
 8005298:	440a      	add	r2, r1
 800529a:	2100      	movs	r1, #0
 800529c:	6011      	str	r1, [r2, #0]
		delayCounter[whichString] = 50;
 800529e:	2232      	movs	r2, #50	; 0x32
 80052a0:	62da      	str	r2, [r3, #44]	; 0x2c
		sahArmed[whichString] = 1;
 80052a2:	2201      	movs	r2, #1
 80052a4:	635a      	str	r2, [r3, #52]	; 0x34
 80052a6:	e78d      	b.n	80051c4 <attackDetect2+0xe8>
		downCounter[whichString]++;
 80052a8:	4b18      	ldr	r3, [pc, #96]	; (800530c <attackDetect2+0x230>)
 80052aa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80052ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052b0:	3201      	adds	r2, #1
 80052b2:	645a      	str	r2, [r3, #68]	; 0x44
 80052b4:	e7cd      	b.n	8005252 <attackDetect2+0x176>
		downCounter[whichString] = 0;
 80052b6:	4b15      	ldr	r3, [pc, #84]	; (800530c <attackDetect2+0x230>)
 80052b8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80052bc:	2200      	movs	r2, #0
 80052be:	645a      	str	r2, [r3, #68]	; 0x44
 80052c0:	e7c7      	b.n	8005252 <attackDetect2+0x176>
	if ((sahArmed[whichString] == 1) && (delayCounter[whichString] == 0))
 80052c2:	4b12      	ldr	r3, [pc, #72]	; (800530c <attackDetect2+0x230>)
 80052c4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80052c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1c7      	bne.n	800525e <attackDetect2+0x182>
		float tempAmp = powf(currentMaximum[whichString], 0.5f);
 80052ce:	4e17      	ldr	r6, [pc, #92]	; (800532c <attackDetect2+0x250>)
 80052d0:	00a5      	lsls	r5, r4, #2
 80052d2:	1973      	adds	r3, r6, r5
 80052d4:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80052d8:	ed93 0a00 	vldr	s0, [r3]
 80052dc:	f002 fadc 	bl	8007898 <powf>
 80052e0:	eef0 8a40 	vmov.f32	s17, s0
		tADSR_on(&envelope[whichString], 0.5f);
 80052e4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80052e8:	4813      	ldr	r0, [pc, #76]	; (8005338 <attackDetect2+0x25c>)
 80052ea:	4428      	add	r0, r5
 80052ec:	f001 fb54 	bl	8006998 <tADSR_on>
		noteOnAmplitude[whichString] = tempAmp;
 80052f0:	4a06      	ldr	r2, [pc, #24]	; (800530c <attackDetect2+0x230>)
 80052f2:	1953      	adds	r3, r2, r5
 80052f4:	edc3 8a13 	vstr	s17, [r3, #76]	; 0x4c
		noteOnHappened[whichString] = 1;
 80052f8:	2101      	movs	r1, #1
 80052fa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
		sahArmed[whichString] = 0;
 80052fe:	2200      	movs	r2, #0
 8005300:	635a      	str	r2, [r3, #52]	; 0x34
		downCounter[whichString] = 0;
 8005302:	645a      	str	r2, [r3, #68]	; 0x44
		offLockout[whichString] = offLockoutDelay;
 8005304:	68b2      	ldr	r2, [r6, #8]
 8005306:	655a      	str	r2, [r3, #84]	; 0x54
 8005308:	e7a9      	b.n	800525e <attackDetect2+0x182>
 800530a:	bf00      	nop
 800530c:	2000030c 	.word	0x2000030c
 8005310:	20001858 	.word	0x20001858
 8005314:	20001878 	.word	0x20001878
 8005318:	200004a0 	.word	0x200004a0
 800531c:	c2580000 	.word	0xc2580000
 8005320:	200003d4 	.word	0x200003d4
 8005324:	3ba3d70a 	.word	0x3ba3d70a
 8005328:	20000434 	.word	0x20000434
 800532c:	20000008 	.word	0x20000008
 8005330:	3b83126f 	.word	0x3b83126f
 8005334:	3dcccccd 	.word	0x3dcccccd
 8005338:	20001870 	.word	0x20001870

0800533c <SFXRhodesAlloc>:

char* soundNames[4];

//FM Rhodes
void SFXRhodesAlloc()
{
 800533c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	soundNames[0] = "DARK  ";
 800533e:	4b23      	ldr	r3, [pc, #140]	; (80053cc <SFXRhodesAlloc+0x90>)
 8005340:	4a23      	ldr	r2, [pc, #140]	; (80053d0 <SFXRhodesAlloc+0x94>)
 8005342:	601a      	str	r2, [r3, #0]
	soundNames[1] = "LIGHT ";
 8005344:	4a23      	ldr	r2, [pc, #140]	; (80053d4 <SFXRhodesAlloc+0x98>)
 8005346:	605a      	str	r2, [r3, #4]
	soundNames[2] = "BASS  ";
 8005348:	4a23      	ldr	r2, [pc, #140]	; (80053d8 <SFXRhodesAlloc+0x9c>)
 800534a:	609a      	str	r2, [r3, #8]
	soundNames[3] = "PAD   ";
 800534c:	4a23      	ldr	r2, [pc, #140]	; (80053dc <SFXRhodesAlloc+0xa0>)
 800534e:	60da      	str	r2, [r3, #12]
	for (int i = 0; i < NUM_VOC_VOICES; i++)
 8005350:	2700      	movs	r7, #0
 8005352:	e02b      	b.n	80053ac <SFXRhodesAlloc+0x70>
	{
		for (int j = 0; j < 6; j++)
		{
			tCycle_initToPool(&FM_sines[i][j], &smallPool);
 8005354:	4e22      	ldr	r6, [pc, #136]	; (80053e0 <SFXRhodesAlloc+0xa4>)
 8005356:	007b      	lsls	r3, r7, #1
 8005358:	443b      	add	r3, r7
 800535a:	005c      	lsls	r4, r3, #1
 800535c:	442c      	add	r4, r5
 800535e:	00a4      	lsls	r4, r4, #2
 8005360:	4631      	mov	r1, r6
 8005362:	4820      	ldr	r0, [pc, #128]	; (80053e4 <SFXRhodesAlloc+0xa8>)
 8005364:	4420      	add	r0, r4
 8005366:	f001 ffc9 	bl	80072fc <tCycle_initToPool>
			tADSR_initToPool(&FM_envs[i][j], FM_attacks[Rsound][j], FM_decays[Rsound][j], FM_sustains[Rsound][j], 100.0f, &smallPool);
 800536a:	4b1f      	ldr	r3, [pc, #124]	; (80053e8 <SFXRhodesAlloc+0xac>)
 800536c:	441c      	add	r4, r3
 800536e:	4a1f      	ldr	r2, [pc, #124]	; (80053ec <SFXRhodesAlloc+0xb0>)
 8005370:	68d0      	ldr	r0, [r2, #12]
 8005372:	0041      	lsls	r1, r0, #1
 8005374:	eb01 0c00 	add.w	ip, r1, r0
 8005378:	ea4f 034c 	mov.w	r3, ip, lsl #1
 800537c:	442b      	add	r3, r5
 800537e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005382:	4631      	mov	r1, r6
 8005384:	eddf 1a1a 	vldr	s3, [pc, #104]	; 80053f0 <SFXRhodesAlloc+0xb4>
 8005388:	ed93 1a04 	vldr	s2, [r3, #16]
 800538c:	edd3 0a1c 	vldr	s1, [r3, #112]	; 0x70
 8005390:	ed93 0a34 	vldr	s0, [r3, #208]	; 0xd0
 8005394:	4620      	mov	r0, r4
 8005396:	f001 fa53 	bl	8006840 <tADSR_initToPool>
			tADSR_setLeakFactor(&FM_envs[i][j], 0.999987f);
 800539a:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80053f4 <SFXRhodesAlloc+0xb8>
 800539e:	4620      	mov	r0, r4
 80053a0:	f001 faf6 	bl	8006990 <tADSR_setLeakFactor>
		for (int j = 0; j < 6; j++)
 80053a4:	3501      	adds	r5, #1
 80053a6:	2d05      	cmp	r5, #5
 80053a8:	ddd4      	ble.n	8005354 <SFXRhodesAlloc+0x18>
	for (int i = 0; i < NUM_VOC_VOICES; i++)
 80053aa:	3701      	adds	r7, #1
 80053ac:	2f01      	cmp	r7, #1
 80053ae:	dc01      	bgt.n	80053b4 <SFXRhodesAlloc+0x78>
		for (int j = 0; j < 6; j++)
 80053b0:	2500      	movs	r5, #0
 80053b2:	e7f8      	b.n	80053a6 <SFXRhodesAlloc+0x6a>
		}
	}
	tCycle_initToPool(&tremolo, &smallPool);
 80053b4:	4c10      	ldr	r4, [pc, #64]	; (80053f8 <SFXRhodesAlloc+0xbc>)
 80053b6:	490a      	ldr	r1, [pc, #40]	; (80053e0 <SFXRhodesAlloc+0xa4>)
 80053b8:	4620      	mov	r0, r4
 80053ba:	f001 ff9f 	bl	80072fc <tCycle_initToPool>
	tCycle_setFreq(&tremolo, 3.0f);
 80053be:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80053c2:	4620      	mov	r0, r4
 80053c4:	f001 ffae 	bl	8007324 <tCycle_setFreq>


}
 80053c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053ca:	bf00      	nop
 80053cc:	2000043c 	.word	0x2000043c
 80053d0:	08114558 	.word	0x08114558
 80053d4:	08114560 	.word	0x08114560
 80053d8:	08114568 	.word	0x08114568
 80053dc:	08114570 	.word	0x08114570
 80053e0:	20001888 	.word	0x20001888
 80053e4:	200003ec 	.word	0x200003ec
 80053e8:	20000460 	.word	0x20000460
 80053ec:	20000008 	.word	0x20000008
 80053f0:	42c80000 	.word	0x42c80000
 80053f4:	3f7fff26 	.word	0x3f7fff26
 80053f8:	200004a8 	.word	0x200004a8

080053fc <audioInit>:
{
 80053fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005400:	ed2d 8b02 	vpush	{d8}
 8005404:	4605      	mov	r5, r0
 8005406:	460f      	mov	r7, r1
 8005408:	4616      	mov	r6, r2
	whichBoard = whichBoard * 2; // get the correct board offset (2 strings per board)
 800540a:	4a59      	ldr	r2, [pc, #356]	; (8005570 <audioInit+0x174>)
 800540c:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
	LEAF_init(SAMPLE_RATE, AUDIO_FRAME_SIZE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 8005416:	4b57      	ldr	r3, [pc, #348]	; (8005574 <audioInit+0x178>)
 8005418:	4a57      	ldr	r2, [pc, #348]	; (8005578 <audioInit+0x17c>)
 800541a:	4958      	ldr	r1, [pc, #352]	; (800557c <audioInit+0x180>)
 800541c:	2040      	movs	r0, #64	; 0x40
 800541e:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8005580 <audioInit+0x184>
 8005422:	f002 f8af 	bl	8007584 <LEAF_init>
	tMempool_init (&smallPool, smallMemory, SMALL_MEM_SIZE);
 8005426:	f241 3288 	movw	r2, #5000	; 0x1388
 800542a:	4956      	ldr	r1, [pc, #344]	; (8005584 <audioInit+0x188>)
 800542c:	4856      	ldr	r0, [pc, #344]	; (8005588 <audioInit+0x18c>)
 800542e:	f001 ff5d 	bl	80072ec <tMempool_init>
	HAL_Delay(10);
 8005432:	200a      	movs	r0, #10
 8005434:	f7fa ffb6 	bl	80003a4 <HAL_Delay>
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8005438:	2300      	movs	r3, #0
 800543a:	e004      	b.n	8005446 <audioInit+0x4a>
		audioOutBuffer[i] = 0;
 800543c:	4a53      	ldr	r2, [pc, #332]	; (800558c <audioInit+0x190>)
 800543e:	2100      	movs	r1, #0
 8005440:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8005444:	3301      	adds	r3, #1
 8005446:	2bff      	cmp	r3, #255	; 0xff
 8005448:	ddf8      	ble.n	800543c <audioInit+0x40>
	for (int i = 0; i < 2; i++)
 800544a:	f04f 0800 	mov.w	r8, #0
 800544e:	e06c      	b.n	800552a <audioInit+0x12e>
			tSawtooth_init(&mySaw[i][j]);
 8005450:	eb04 0088 	add.w	r0, r4, r8, lsl #2
 8005454:	4b4e      	ldr	r3, [pc, #312]	; (8005590 <audioInit+0x194>)
 8005456:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800545a:	f002 f829 	bl	80074b0 <tSawtooth_init>
		for (int j = 0; j < NUM_SAWTOOTHS; j++)
 800545e:	3401      	adds	r4, #1
 8005460:	2c03      	cmp	r4, #3
 8005462:	ddf5      	ble.n	8005450 <audioInit+0x54>
		tSVF_init(&myLowpass[i], SVFTypeLowpass, 5000.0f, 0.5f);
 8005464:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8005468:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800546c:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8005594 <audioInit+0x198>
 8005470:	2101      	movs	r1, #1
 8005472:	4849      	ldr	r0, [pc, #292]	; (8005598 <audioInit+0x19c>)
 8005474:	4420      	add	r0, r4
 8005476:	f001 fcf7 	bl	8006e68 <tSVF_init>
		tCycle_init(&mySine[i]);
 800547a:	4848      	ldr	r0, [pc, #288]	; (800559c <audioInit+0x1a0>)
 800547c:	4420      	add	r0, r4
 800547e:	f001 ff49 	bl	8007314 <tCycle_init>
		tHighpass_init(&dcBlock[i], 3000.0f);
 8005482:	ed9f 0a47 	vldr	s0, [pc, #284]	; 80055a0 <audioInit+0x1a4>
 8005486:	4847      	ldr	r0, [pc, #284]	; (80055a4 <audioInit+0x1a8>)
 8005488:	4420      	add	r0, r4
 800548a:	f001 fdd1 	bl	8007030 <tHighpass_init>
		tExpSmooth_init(&pitchSmoother[i], 80.0f, 0.002f);
 800548e:	eddf 0a46 	vldr	s1, [pc, #280]	; 80055a8 <audioInit+0x1ac>
 8005492:	ed9f 0a46 	vldr	s0, [pc, #280]	; 80055ac <audioInit+0x1b0>
 8005496:	4846      	ldr	r0, [pc, #280]	; (80055b0 <audioInit+0x1b4>)
 8005498:	4420      	add	r0, r4
 800549a:	f001 fc35 	bl	8006d08 <tExpSmooth_init>
		tNoise_init(&noise[i], WhiteNoise);
 800549e:	2100      	movs	r1, #0
 80054a0:	4844      	ldr	r0, [pc, #272]	; (80055b4 <audioInit+0x1b8>)
 80054a2:	4420      	add	r0, r4
 80054a4:	f002 f866 	bl	8007574 <tNoise_init>
		tThreshold_init(&threshold[i],0.5f, 4.0f);
 80054a8:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80054ac:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80054b0:	4841      	ldr	r0, [pc, #260]	; (80055b8 <audioInit+0x1bc>)
 80054b2:	4420      	add	r0, r4
 80054b4:	f001 f900 	bl	80066b8 <tThreshold_init>
		tADSR_init(&envelope[i], 0.0f, 100.0f, 0.6f, 20.0f);
 80054b8:	4b40      	ldr	r3, [pc, #256]	; (80055bc <audioInit+0x1c0>)
 80054ba:	eb04 0903 	add.w	r9, r4, r3
 80054be:	ed9f 8a40 	vldr	s16, [pc, #256]	; 80055c0 <audioInit+0x1c4>
 80054c2:	eef3 1a04 	vmov.f32	s3, #52	; 0x41a00000  20.0
 80054c6:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 80055c4 <audioInit+0x1c8>
 80054ca:	eddf 0a3f 	vldr	s1, [pc, #252]	; 80055c8 <audioInit+0x1cc>
 80054ce:	eeb0 0a48 	vmov.f32	s0, s16
 80054d2:	4648      	mov	r0, r9
 80054d4:	f001 f90e 	bl	80066f4 <tADSR_init>
		tADSR_setLeakFactor(&envelope[i], 0.999998f);
 80054d8:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 80055cc <audioInit+0x1d0>
 80054dc:	4648      	mov	r0, r9
 80054de:	f001 fa57 	bl	8006990 <tADSR_setLeakFactor>
		tSlide_init(&fastSlide[i],1.0f,1110.0f);
 80054e2:	eddf 0a3b 	vldr	s1, [pc, #236]	; 80055d0 <audioInit+0x1d4>
 80054e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80054ea:	483a      	ldr	r0, [pc, #232]	; (80055d4 <audioInit+0x1d8>)
 80054ec:	4420      	add	r0, r4
 80054ee:	f001 fc81 	bl	8006df4 <tSlide_init>
		tSlide_init(&slowSlide[i],500.0f,1.0f);
 80054f2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80054f6:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80055d8 <audioInit+0x1dc>
 80054fa:	4838      	ldr	r0, [pc, #224]	; (80055dc <audioInit+0x1e0>)
 80054fc:	4420      	add	r0, r4
 80054fe:	f001 fc79 	bl	8006df4 <tSlide_init>
		tSVF_init(&lowpass[i], SVFTypeLowpass, 4000.0f, 1.0f);
 8005502:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005506:	ed9f 0a36 	vldr	s0, [pc, #216]	; 80055e0 <audioInit+0x1e4>
 800550a:	2101      	movs	r1, #1
 800550c:	4835      	ldr	r0, [pc, #212]	; (80055e4 <audioInit+0x1e8>)
 800550e:	4420      	add	r0, r4
 8005510:	f001 fcaa 	bl	8006e68 <tSVF_init>
		tRampUpDown_init(&updownRamp[i], 0.0f, 104.0f, 1); //5000 samples should be 104 ms
 8005514:	2101      	movs	r1, #1
 8005516:	eddf 0a34 	vldr	s1, [pc, #208]	; 80055e8 <audioInit+0x1ec>
 800551a:	eeb0 0a48 	vmov.f32	s0, s16
 800551e:	4833      	ldr	r0, [pc, #204]	; (80055ec <audioInit+0x1f0>)
 8005520:	4420      	add	r0, r4
 8005522:	f001 fb93 	bl	8006c4c <tRampUpDown_init>
	for (int i = 0; i < 2; i++)
 8005526:	f108 0801 	add.w	r8, r8, #1
 800552a:	f1b8 0f01 	cmp.w	r8, #1
 800552e:	dc01      	bgt.n	8005534 <audioInit+0x138>
		for (int j = 0; j < NUM_SAWTOOTHS; j++)
 8005530:	2400      	movs	r4, #0
 8005532:	e795      	b.n	8005460 <audioInit+0x64>
	SFXRhodesAlloc();
 8005534:	f7ff ff02 	bl	800533c <SFXRhodesAlloc>
	HAL_Delay(1);
 8005538:	2001      	movs	r0, #1
 800553a:	f7fa ff33 	bl	80003a4 <HAL_Delay>
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 800553e:	4c13      	ldr	r4, [pc, #76]	; (800558c <audioInit+0x190>)
 8005540:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005544:	4621      	mov	r1, r4
 8005546:	4638      	mov	r0, r7
 8005548:	f7ff f8a4 	bl	8004694 <HAL_SAI_Transmit_DMA>
 800554c:	4b28      	ldr	r3, [pc, #160]	; (80055f0 <audioInit+0x1f4>)
 800554e:	7018      	strb	r0, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 8005550:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005554:	f504 6180 	add.w	r1, r4, #1024	; 0x400
 8005558:	4630      	mov	r0, r6
 800555a:	f7ff f91d 	bl	8004798 <HAL_SAI_Receive_DMA>
 800555e:	4b25      	ldr	r3, [pc, #148]	; (80055f4 <audioInit+0x1f8>)
 8005560:	7018      	strb	r0, [r3, #0]
	AudioCodec_init(hi2c);
 8005562:	4628      	mov	r0, r5
 8005564:	f000 fabe 	bl	8005ae4 <AudioCodec_init>
}
 8005568:	ecbd 8b02 	vpop	{d8}
 800556c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005570:	20000008 	.word	0x20000008
 8005574:	08005ef9 	.word	0x08005ef9
 8005578:	0007a120 	.word	0x0007a120
 800557c:	24000000 	.word	0x24000000
 8005580:	473b8000 	.word	0x473b8000
 8005584:	200004b0 	.word	0x200004b0
 8005588:	20001888 	.word	0x20001888
 800558c:	30000000 	.word	0x30000000
 8005590:	20001838 	.word	0x20001838
 8005594:	459c4000 	.word	0x459c4000
 8005598:	200003c0 	.word	0x200003c0
 800559c:	200003e4 	.word	0x200003e4
 80055a0:	453b8000 	.word	0x453b8000
 80055a4:	20001858 	.word	0x20001858
 80055a8:	3b03126f 	.word	0x3b03126f
 80055ac:	42a00000 	.word	0x42a00000
 80055b0:	20000454 	.word	0x20000454
 80055b4:	20001860 	.word	0x20001860
 80055b8:	200003d4 	.word	0x200003d4
 80055bc:	20001870 	.word	0x20001870
 80055c0:	00000000 	.word	0x00000000
 80055c4:	3f19999a 	.word	0x3f19999a
 80055c8:	42c80000 	.word	0x42c80000
 80055cc:	3f7fffde 	.word	0x3f7fffde
 80055d0:	448ac000 	.word	0x448ac000
 80055d4:	20001878 	.word	0x20001878
 80055d8:	43fa0000 	.word	0x43fa0000
 80055dc:	200004a0 	.word	0x200004a0
 80055e0:	457a0000 	.word	0x457a0000
 80055e4:	200003dc 	.word	0x200003dc
 80055e8:	42d00000 	.word	0x42d00000
 80055ec:	20000434 	.word	0x20000434
 80055f0:	2000041c 	.word	0x2000041c
 80055f4:	2000045c 	.word	0x2000045c

080055f8 <map>:
}


float map(float value, float istart, float istop, float ostart, float ostop)
{
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80055f8:	ee32 2a61 	vsub.f32	s4, s4, s3
 80055fc:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005600:	ee31 1a60 	vsub.f32	s2, s2, s1
 8005604:	eec0 7a01 	vdiv.f32	s15, s0, s2
 8005608:	ee22 2a27 	vmul.f32	s4, s4, s15
}
 800560c:	ee32 0a21 	vadd.f32	s0, s4, s3
 8005610:	4770      	bx	lr
	...

08005614 <processString>:
{
 8005614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005616:	ed2d 8b02 	vpush	{d8}
 800561a:	4604      	mov	r4, r0
	int whichStringOfFour = whichString + whichBoard;
 800561c:	4bab      	ldr	r3, [pc, #684]	; (80058cc <processString+0x2b8>)
 800561e:	f8d3 5130 	ldr.w	r5, [r3, #304]	; 0x130
 8005622:	4405      	add	r5, r0
	stringTouchLH[whichString] = (SPI_RX[8] >> whichStringOfFour) & 1;
 8005624:	49aa      	ldr	r1, [pc, #680]	; (80058d0 <processString+0x2bc>)
 8005626:	7a0b      	ldrb	r3, [r1, #8]
 8005628:	fa43 f005 	asr.w	r0, r3, r5
 800562c:	f000 0001 	and.w	r0, r0, #1
 8005630:	4aa8      	ldr	r2, [pc, #672]	; (80058d4 <processString+0x2c0>)
 8005632:	1916      	adds	r6, r2, r4
 8005634:	f886 0070 	strb.w	r0, [r6, #112]	; 0x70
	stringTouchRH[whichString] = (SPI_RX[8] >> (whichStringOfFour + 4)) & 1;
 8005638:	1d28      	adds	r0, r5, #4
 800563a:	4103      	asrs	r3, r0
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
	noteOffHappened[whichString] = 0;
 8005644:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8005648:	2300      	movs	r3, #0
 800564a:	65d3      	str	r3, [r2, #92]	; 0x5c
	stringPositions[whichString] =  ((uint16_t)SPI_RX[whichStringOfFour * 2] << 8) + ((uint16_t)SPI_RX[(whichStringOfFour * 2) + 1] & 0xff);
 800564c:	006a      	lsls	r2, r5, #1
 800564e:	f811 0015 	ldrb.w	r0, [r1, r5, lsl #1]
 8005652:	3201      	adds	r2, #1
 8005654:	5c8b      	ldrb	r3, [r1, r2]
 8005656:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 800565a:	b29b      	uxth	r3, r3
 800565c:	4a9e      	ldr	r2, [pc, #632]	; (80058d8 <processString+0x2c4>)
 800565e:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
	if (stringPositions[whichString] == 65535)
 8005662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005666:	4293      	cmp	r3, r2
 8005668:	d07f      	beq.n	800576a <processString+0x156>
		stringMappedPositions[whichString] = map((float)stringPositions[whichString], fretMeasurements[1][whichStringOfFour], fretMeasurements[2][whichStringOfFour], fretScaling[1], fretScaling[2]);
 800566a:	4e98      	ldr	r6, [pc, #608]	; (80058cc <processString+0x2b8>)
 800566c:	f105 0108 	add.w	r1, r5, #8
 8005670:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8005674:	1d2a      	adds	r2, r5, #4
 8005676:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800567a:	ed96 2a83 	vldr	s4, [r6, #524]	; 0x20c
 800567e:	edd6 1a82 	vldr	s3, [r6, #520]	; 0x208
 8005682:	ed91 1a85 	vldr	s2, [r1, #532]	; 0x214
 8005686:	edd2 0a85 	vldr	s1, [r2, #532]	; 0x214
 800568a:	ee07 3a90 	vmov	s15, r3
 800568e:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8005692:	f7ff ffb1 	bl	80055f8 <map>
 8005696:	00a7      	lsls	r7, r4, #2
 8005698:	4b90      	ldr	r3, [pc, #576]	; (80058dc <processString+0x2c8>)
 800569a:	443b      	add	r3, r7
 800569c:	ed83 0a00 	vstr	s0, [r3]
		stringFrequencies[whichString] = ((1.0 / stringMappedPositions[whichString])) * openStringFrequencies[whichStringOfFour];
 80056a0:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 80056a4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80056a8:	ee86 0b07 	vdiv.f64	d0, d6, d7
 80056ac:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80056b0:	ed95 7a7d 	vldr	s14, [r5, #500]	; 0x1f4
 80056b4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80056b8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80056bc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80056c0:	4b87      	ldr	r3, [pc, #540]	; (80058e0 <processString+0x2cc>)
 80056c2:	443b      	add	r3, r7
 80056c4:	ed83 0a00 	vstr	s0, [r3]
		stringMIDIVersionOfFrequencies[whichString] = LEAF_frequencyToMidi(stringFrequencies[whichString]);
 80056c8:	f001 fd06 	bl	80070d8 <LEAF_frequencyToMidi>
 80056cc:	4b85      	ldr	r3, [pc, #532]	; (80058e4 <processString+0x2d0>)
 80056ce:	443b      	add	r3, r7
 80056d0:	ed83 0a00 	vstr	s0, [r3]
	if (stringTouchLH[whichString])
 80056d4:	4b7f      	ldr	r3, [pc, #508]	; (80058d4 <processString+0x2c0>)
 80056d6:	4423      	add	r3, r4
 80056d8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d055      	beq.n	800578c <processString+0x178>
		LHmuteCounter[whichString]++;
 80056e0:	4b7c      	ldr	r3, [pc, #496]	; (80058d4 <processString+0x2c0>)
 80056e2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80056e6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80056e8:	3201      	adds	r2, #1
 80056ea:	679a      	str	r2, [r3, #120]	; 0x78
	if (stringTouchRH[whichString])
 80056ec:	4b79      	ldr	r3, [pc, #484]	; (80058d4 <processString+0x2c0>)
 80056ee:	4423      	add	r3, r4
 80056f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d04f      	beq.n	8005798 <processString+0x184>
		RHmuteCounter[whichString]++;
 80056f8:	4b76      	ldr	r3, [pc, #472]	; (80058d4 <processString+0x2c0>)
 80056fa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80056fe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005702:	3201      	adds	r2, #1
 8005704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (((LHmuteCounter[whichString] > 1000) && (stringPositions[whichString] == 65535)) || (RHmuteCounter[whichString] > 400))
 8005708:	4b72      	ldr	r3, [pc, #456]	; (80058d4 <processString+0x2c0>)
 800570a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800570e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005710:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005714:	dd06      	ble.n	8005724 <processString+0x110>
 8005716:	4b70      	ldr	r3, [pc, #448]	; (80058d8 <processString+0x2c4>)
 8005718:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 800571c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005720:	429a      	cmp	r2, r3
 8005722:	d007      	beq.n	8005734 <processString+0x120>
 8005724:	4b6b      	ldr	r3, [pc, #428]	; (80058d4 <processString+0x2c0>)
 8005726:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800572a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800572e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005732:	dd04      	ble.n	800573e <processString+0x12a>
		if (offLockout[whichString] == 0)
 8005734:	4b67      	ldr	r3, [pc, #412]	; (80058d4 <processString+0x2c0>)
 8005736:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800573a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573c:	b39b      	cbz	r3, 80057a6 <processString+0x192>
	if ((stringTouchLH[whichString] && (stringPositions[whichString] != 65535)) || ((stringTouchLH[whichString] == 0) && (stringPositions[whichString] == 65535)))
 800573e:	4b65      	ldr	r3, [pc, #404]	; (80058d4 <processString+0x2c0>)
 8005740:	4423      	add	r3, r4
 8005742:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005746:	2b00      	cmp	r3, #0
 8005748:	d037      	beq.n	80057ba <processString+0x1a6>
 800574a:	4a63      	ldr	r2, [pc, #396]	; (80058d8 <processString+0x2c4>)
 800574c:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
 8005750:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005754:	4291      	cmp	r1, r2
 8005756:	d030      	beq.n	80057ba <processString+0x1a6>
		LHstabilityCounter[whichString]++;
 8005758:	4b5e      	ldr	r3, [pc, #376]	; (80058d4 <processString+0x2c0>)
 800575a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800575e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005762:	3201      	adds	r2, #1
 8005764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005768:	e035      	b.n	80057d6 <processString+0x1c2>
		stringFrequencies[whichString] = openStringFrequencies[whichStringOfFour];
 800576a:	4b58      	ldr	r3, [pc, #352]	; (80058cc <processString+0x2b8>)
 800576c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005770:	ed95 0a7d 	vldr	s0, [r5, #500]	; 0x1f4
 8005774:	00a5      	lsls	r5, r4, #2
 8005776:	4b5a      	ldr	r3, [pc, #360]	; (80058e0 <processString+0x2cc>)
 8005778:	442b      	add	r3, r5
 800577a:	ed83 0a00 	vstr	s0, [r3]
		stringMIDIVersionOfFrequencies[whichString] = LEAF_frequencyToMidi(stringFrequencies[whichString]);
 800577e:	f001 fcab 	bl	80070d8 <LEAF_frequencyToMidi>
 8005782:	4b58      	ldr	r3, [pc, #352]	; (80058e4 <processString+0x2d0>)
 8005784:	442b      	add	r3, r5
 8005786:	ed83 0a00 	vstr	s0, [r3]
 800578a:	e7a3      	b.n	80056d4 <processString+0xc0>
		LHmuteCounter[whichString] = 0;
 800578c:	4b51      	ldr	r3, [pc, #324]	; (80058d4 <processString+0x2c0>)
 800578e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005792:	2200      	movs	r2, #0
 8005794:	679a      	str	r2, [r3, #120]	; 0x78
 8005796:	e7a9      	b.n	80056ec <processString+0xd8>
		RHmuteCounter[whichString] = 0;
 8005798:	4b4e      	ldr	r3, [pc, #312]	; (80058d4 <processString+0x2c0>)
 800579a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800579e:	2200      	movs	r2, #0
 80057a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80057a4:	e7b0      	b.n	8005708 <processString+0xf4>
			tADSR_off(&envelope[whichString]);
 80057a6:	00a5      	lsls	r5, r4, #2
 80057a8:	484f      	ldr	r0, [pc, #316]	; (80058e8 <processString+0x2d4>)
 80057aa:	4428      	add	r0, r5
 80057ac:	f001 f910 	bl	80069d0 <tADSR_off>
			noteOffHappened[whichString] = 1;
 80057b0:	4b48      	ldr	r3, [pc, #288]	; (80058d4 <processString+0x2c0>)
 80057b2:	442b      	add	r3, r5
 80057b4:	2201      	movs	r2, #1
 80057b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80057b8:	e7c1      	b.n	800573e <processString+0x12a>
	if ((stringTouchLH[whichString] && (stringPositions[whichString] != 65535)) || ((stringTouchLH[whichString] == 0) && (stringPositions[whichString] == 65535)))
 80057ba:	b933      	cbnz	r3, 80057ca <processString+0x1b6>
 80057bc:	4b46      	ldr	r3, [pc, #280]	; (80058d8 <processString+0x2c4>)
 80057be:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 80057c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d0c6      	beq.n	8005758 <processString+0x144>
		LHstabilityCounter[whichString] = 0;
 80057ca:	4b42      	ldr	r3, [pc, #264]	; (80058d4 <processString+0x2c0>)
 80057cc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80057d0:	2200      	movs	r2, #0
 80057d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		tExpSmooth_setDest(&pitchSmoother[whichString], mtof((round(stringMIDIVersionOfFrequencies[whichString]))));
 80057d6:	00a2      	lsls	r2, r4, #2
 80057d8:	4d44      	ldr	r5, [pc, #272]	; (80058ec <processString+0x2d8>)
 80057da:	4415      	add	r5, r2
 80057dc:	4b41      	ldr	r3, [pc, #260]	; (80058e4 <processString+0x2d0>)
 80057de:	4413      	add	r3, r2
 80057e0:	ed93 0a00 	vldr	s0, [r3]
 80057e4:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80057e8:	feb8 0b40 	vrinta.f64	d0, d0
 80057ec:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80057f0:	f001 fca4 	bl	800713c <mtof>
 80057f4:	4628      	mov	r0, r5
 80057f6:	f001 fab5 	bl	8006d64 <tExpSmooth_setDest>
		float myFreq = tExpSmooth_tick(&pitchSmoother[whichString]) * octave;
 80057fa:	4628      	mov	r0, r5
 80057fc:	f001 fab6 	bl	8006d6c <tExpSmooth_tick>
 8005800:	4b32      	ldr	r3, [pc, #200]	; (80058cc <processString+0x2b8>)
 8005802:	ed93 8a95 	vldr	s16, [r3, #596]	; 0x254
 8005806:	ee20 8a08 	vmul.f32	s16, s0, s16
		for (int i = 0; i < NUM_SAWTOOTHS; i++)
 800580a:	2500      	movs	r5, #0
 800580c:	e016      	b.n	800583c <processString+0x228>
			tSawtooth_setFreq(&mySaw[whichString][i], myFreq * detuneAmounts[i]);
 800580e:	00ae      	lsls	r6, r5, #2
 8005810:	4b2e      	ldr	r3, [pc, #184]	; (80058cc <processString+0x2b8>)
 8005812:	4433      	add	r3, r6
 8005814:	ed93 0a96 	vldr	s0, [r3, #600]	; 0x258
 8005818:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 800581c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005820:	4b33      	ldr	r3, [pc, #204]	; (80058f0 <processString+0x2dc>)
 8005822:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005826:	f001 fded 	bl	8007404 <tSawtooth_setFreq>
			tCycle_setFreq(&mySine[i], myFreq * 0.5f);
 800582a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800582e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8005832:	4830      	ldr	r0, [pc, #192]	; (80058f4 <processString+0x2e0>)
 8005834:	4430      	add	r0, r6
 8005836:	f001 fd75 	bl	8007324 <tCycle_setFreq>
		for (int i = 0; i < NUM_SAWTOOTHS; i++)
 800583a:	3501      	adds	r5, #1
 800583c:	2d03      	cmp	r5, #3
 800583e:	dde6      	ble.n	800580e <processString+0x1fa>
		joy_x = ((SPI_RX[9] << 8) + (SPI_RX[10])) * 0.00025f;
 8005840:	4a23      	ldr	r2, [pc, #140]	; (80058d0 <processString+0x2bc>)
 8005842:	7a51      	ldrb	r1, [r2, #9]
 8005844:	7a93      	ldrb	r3, [r2, #10]
 8005846:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800584a:	ee07 3a90 	vmov	s15, r3
 800584e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005852:	eddf 6a29 	vldr	s13, [pc, #164]	; 80058f8 <processString+0x2e4>
 8005856:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800585a:	4b28      	ldr	r3, [pc, #160]	; (80058fc <processString+0x2e8>)
 800585c:	edc3 7a00 	vstr	s15, [r3]
		joy_y = ((SPI_RX[11] << 8) + (SPI_RX[12])) * 0.00025f;
 8005860:	7ad1      	ldrb	r1, [r2, #11]
 8005862:	7b13      	ldrb	r3, [r2, #12]
 8005864:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8005868:	ee07 3a10 	vmov	s14, r3
 800586c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005870:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005874:	4b22      	ldr	r3, [pc, #136]	; (8005900 <processString+0x2ec>)
 8005876:	ed83 7a00 	vstr	s14, [r3]
		knobParams[0] = faster_mtof(joy_x * 230.0f) ; //brightness
 800587a:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8005904 <processString+0x2f0>
 800587e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005882:	f001 fc87 	bl	8007194 <faster_mtof>
 8005886:	4b20      	ldr	r3, [pc, #128]	; (8005908 <processString+0x2f4>)
 8005888:	ed83 0a00 	vstr	s0, [r3]
		tSVF_setFreq(&myLowpass[whichString], LEAF_clip(50.0f, (knobParams[0] + (myFreq * 3.0f)) * tADSR_tick(&envelope[whichString]), 18000.0f));
 800588c:	eef0 8a08 	vmov.f32	s17, #8	; 0x40400000  3.0
 8005890:	ee68 8a28 	vmul.f32	s17, s16, s17
 8005894:	ee70 8a28 	vadd.f32	s17, s0, s17
 8005898:	00a4      	lsls	r4, r4, #2
 800589a:	4813      	ldr	r0, [pc, #76]	; (80058e8 <processString+0x2d4>)
 800589c:	4420      	add	r0, r4
 800589e:	f001 f8a7 	bl	80069f0 <tADSR_tick>
 80058a2:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 800590c <processString+0x2f8>
 80058a6:	ee68 0a80 	vmul.f32	s1, s17, s0
 80058aa:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8005910 <processString+0x2fc>
 80058ae:	f001 fc35 	bl	800711c <LEAF_clip>
 80058b2:	4818      	ldr	r0, [pc, #96]	; (8005914 <processString+0x300>)
 80058b4:	4420      	add	r0, r4
 80058b6:	f001 fb91 	bl	8006fdc <tSVF_setFreq>
		stringFreqs[whichString] =myFreq;
 80058ba:	4b06      	ldr	r3, [pc, #24]	; (80058d4 <processString+0x2c0>)
 80058bc:	441c      	add	r4, r3
 80058be:	ed84 8a19 	vstr	s16, [r4, #100]	; 0x64
}
 80058c2:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8005918 <processString+0x304>
 80058c6:	ecbd 8b02 	vpop	{d8}
 80058ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058cc:	20000008 	.word	0x20000008
 80058d0:	30000820 	.word	0x30000820
 80058d4:	2000030c 	.word	0x2000030c
 80058d8:	200003c8 	.word	0x200003c8
 80058dc:	2000044c 	.word	0x2000044c
 80058e0:	20001894 	.word	0x20001894
 80058e4:	20000498 	.word	0x20000498
 80058e8:	20001870 	.word	0x20001870
 80058ec:	20000454 	.word	0x20000454
 80058f0:	20001838 	.word	0x20001838
 80058f4:	200003e4 	.word	0x200003e4
 80058f8:	3983126f 	.word	0x3983126f
 80058fc:	200004ac 	.word	0x200004ac
 8005900:	20000430 	.word	0x20000430
 8005904:	43660000 	.word	0x43660000
 8005908:	20000420 	.word	0x20000420
 800590c:	468ca000 	.word	0x468ca000
 8005910:	42480000 	.word	0x42480000
 8005914:	200003c0 	.word	0x200003c0
 8005918:	00000000 	.word	0x00000000

0800591c <audioTick>:
{
 800591c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800591e:	ed2d 8b02 	vpush	{d8}
	sample = 0.0f;
 8005922:	4b3b      	ldr	r3, [pc, #236]	; (8005a10 <audioTick+0xf4>)
 8005924:	2200      	movs	r2, #0
 8005926:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	for (int whichString = 0; whichString < 2; whichString ++)
 800592a:	2700      	movs	r7, #0
 800592c:	e057      	b.n	80059de <audioTick+0xc2>
			tempSample += tSawtooth_tick(&mySaw[whichString][i]) * tADSR_tick(&envelope[whichString]);
 800592e:	00bc      	lsls	r4, r7, #2
 8005930:	19a0      	adds	r0, r4, r6
 8005932:	4b38      	ldr	r3, [pc, #224]	; (8005a14 <audioTick+0xf8>)
 8005934:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005938:	f001 fdc2 	bl	80074c0 <tSawtooth_tick>
 800593c:	eef0 8a40 	vmov.f32	s17, s0
 8005940:	4d35      	ldr	r5, [pc, #212]	; (8005a18 <audioTick+0xfc>)
 8005942:	4425      	add	r5, r4
 8005944:	4628      	mov	r0, r5
 8005946:	f001 f853 	bl	80069f0 <tADSR_tick>
 800594a:	ee28 0a80 	vmul.f32	s0, s17, s0
 800594e:	ee38 8a00 	vadd.f32	s16, s16, s0
			tempSample += tCycle_tick(&mySine[whichString]) * tADSR_tick(&envelope[whichString]);
 8005952:	4832      	ldr	r0, [pc, #200]	; (8005a1c <audioTick+0x100>)
 8005954:	4420      	add	r0, r4
 8005956:	f001 fd07 	bl	8007368 <tCycle_tick>
 800595a:	eef0 8a40 	vmov.f32	s17, s0
 800595e:	4628      	mov	r0, r5
 8005960:	f001 f846 	bl	80069f0 <tADSR_tick>
 8005964:	ee28 0a80 	vmul.f32	s0, s17, s0
			tempSample = tSVF_tick(&myLowpass[whichString], tempSample);
 8005968:	ee38 0a00 	vadd.f32	s0, s16, s0
 800596c:	482c      	ldr	r0, [pc, #176]	; (8005a20 <audioTick+0x104>)
 800596e:	4420      	add	r0, r4
 8005970:	f001 faf4 	bl	8006f5c <tSVF_tick>
 8005974:	eeb0 8a40 	vmov.f32	s16, s0
		for (int i = 0; i < NUM_SAWTOOTHS; i++)
 8005978:	3601      	adds	r6, #1
 800597a:	2e03      	cmp	r6, #3
 800597c:	ddd7      	ble.n	800592e <audioTick+0x12>
		sample += tempSample;
 800597e:	4c24      	ldr	r4, [pc, #144]	; (8005a10 <audioTick+0xf4>)
 8005980:	edd4 7a24 	vldr	s15, [r4, #144]	; 0x90
 8005984:	ee37 8a88 	vadd.f32	s16, s15, s16
 8005988:	ed84 8a24 	vstr	s16, [r4, #144]	; 0x90
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, outOfThreshPositiveChange[1] & 1);
 800598c:	6a22      	ldr	r2, [r4, #32]
 800598e:	4d25      	ldr	r5, [pc, #148]	; (8005a24 <audioTick+0x108>)
 8005990:	f002 0201 	and.w	r2, r2, #1
 8005994:	2101      	movs	r1, #1
 8005996:	4628      	mov	r0, r5
 8005998:	f7fc f8d4 	bl	8001b44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, sahArmed[1] & 1);
 800599c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800599e:	f002 0201 	and.w	r2, r2, #1
 80059a2:	2102      	movs	r1, #2
 80059a4:	4628      	mov	r0, r5
 80059a6:	f7fc f8cd 	bl	8001b44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, outOfThresh[1] & 1);
 80059aa:	6922      	ldr	r2, [r4, #16]
 80059ac:	f002 0201 	and.w	r2, r2, #1
 80059b0:	2104      	movs	r1, #4
 80059b2:	4628      	mov	r0, r5
 80059b4:	f7fc f8c6 	bl	8001b44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, stringTouchRH[1] & 1);
 80059b8:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
 80059bc:	f002 0201 	and.w	r2, r2, #1
 80059c0:	2108      	movs	r1, #8
 80059c2:	4628      	mov	r0, r5
 80059c4:	f7fc f8be 	bl	8001b44 <HAL_GPIO_WritePin>
		sample = tanhf(sample * 1.6f);
 80059c8:	ed94 0a24 	vldr	s0, [r4, #144]	; 0x90
 80059cc:	eddf 7a16 	vldr	s15, [pc, #88]	; 8005a28 <audioTick+0x10c>
 80059d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80059d4:	f002 f8c6 	bl	8007b64 <tanhf>
 80059d8:	ed84 0a24 	vstr	s0, [r4, #144]	; 0x90
	for (int whichString = 0; whichString < 2; whichString ++)
 80059dc:	3701      	adds	r7, #1
 80059de:	2f01      	cmp	r7, #1
 80059e0:	dc10      	bgt.n	8005a04 <audioTick+0xe8>
		attackDetect2(whichString, inputSamples[whichString]);
 80059e2:	4c12      	ldr	r4, [pc, #72]	; (8005a2c <audioTick+0x110>)
 80059e4:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 80059e8:	ed94 0a00 	vldr	s0, [r4]
 80059ec:	4638      	mov	r0, r7
 80059ee:	f7ff fb75 	bl	80050dc <attackDetect2>
		processString(whichString, inputSamples[whichString]);
 80059f2:	ed94 0a00 	vldr	s0, [r4]
 80059f6:	4638      	mov	r0, r7
 80059f8:	f7ff fe0c 	bl	8005614 <processString>
		for (int i = 0; i < NUM_SAWTOOTHS; i++)
 80059fc:	2600      	movs	r6, #0
		float tempSample = 0.0f;
 80059fe:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8005a30 <audioTick+0x114>
		for (int i = 0; i < NUM_SAWTOOTHS; i++)
 8005a02:	e7ba      	b.n	800597a <audioTick+0x5e>
}
 8005a04:	4b02      	ldr	r3, [pc, #8]	; (8005a10 <audioTick+0xf4>)
 8005a06:	ed93 0a24 	vldr	s0, [r3, #144]	; 0x90
 8005a0a:	ecbd 8b02 	vpop	{d8}
 8005a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a10:	2000030c 	.word	0x2000030c
 8005a14:	20001838 	.word	0x20001838
 8005a18:	20001870 	.word	0x20001870
 8005a1c:	200003e4 	.word	0x200003e4
 8005a20:	200003c0 	.word	0x200003c0
 8005a24:	58020000 	.word	0x58020000
 8005a28:	3fcccccd 	.word	0x3fcccccd
 8005a2c:	2000188c 	.word	0x2000188c
 8005a30:	00000000 	.word	0x00000000

08005a34 <audioFrame>:
	if (codecReady)
 8005a34:	4b1f      	ldr	r3, [pc, #124]	; (8005ab4 <audioFrame+0x80>)
 8005a36:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8005a3a:	b123      	cbz	r3, 8005a46 <audioFrame+0x12>
{
 8005a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a40:	4607      	mov	r7, r0
		for (i = 0; i < (HALF_BUFFER_SIZE); i = i + 2)
 8005a42:	2500      	movs	r5, #0
 8005a44:	e031      	b.n	8005aaa <audioFrame+0x76>
 8005a46:	4770      	bx	lr
			inputSamples[1] = (audioInBuffer[buffer_offset + i] << 8) * INV_TWO_TO_31;
 8005a48:	197e      	adds	r6, r7, r5
 8005a4a:	4c1b      	ldr	r4, [pc, #108]	; (8005ab8 <audioFrame+0x84>)
 8005a4c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005a50:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005a54:	021b      	lsls	r3, r3, #8
 8005a56:	ee07 3a10 	vmov	s14, r3
 8005a5a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005a5e:	eddf 6a17 	vldr	s13, [pc, #92]	; 8005abc <audioFrame+0x88>
 8005a62:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005a66:	4a16      	ldr	r2, [pc, #88]	; (8005ac0 <audioFrame+0x8c>)
 8005a68:	ed82 7a01 	vstr	s14, [r2, #4]
			inputSamples[0] = (audioInBuffer[buffer_offset + i + 1] << 8) * INV_TWO_TO_31;
 8005a6c:	f106 0801 	add.w	r8, r6, #1
 8005a70:	eb04 0388 	add.w	r3, r4, r8, lsl #2
 8005a74:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005a78:	021b      	lsls	r3, r3, #8
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a82:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005a86:	edc2 7a00 	vstr	s15, [r2]
			audioOutBuffer[buffer_offset + i] = (int32_t)(audioTick() * TWO_TO_23);
 8005a8a:	f7ff ff47 	bl	800591c <audioTick>
 8005a8e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8005ac4 <audioFrame+0x90>
 8005a92:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005a96:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005a9a:	ee10 3a10 	vmov	r3, s0
 8005a9e:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
			audioOutBuffer[buffer_offset + i + 1] = 0;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
		for (i = 0; i < (HALF_BUFFER_SIZE); i = i + 2)
 8005aa8:	3502      	adds	r5, #2
 8005aaa:	2d7f      	cmp	r5, #127	; 0x7f
 8005aac:	ddcc      	ble.n	8005a48 <audioFrame+0x14>
}
 8005aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ab2:	bf00      	nop
 8005ab4:	2000030c 	.word	0x2000030c
 8005ab8:	30000000 	.word	0x30000000
 8005abc:	2ffffff6 	.word	0x2ffffff6
 8005ac0:	2000188c 	.word	0x2000188c
 8005ac4:	4b000000 	.word	0x4b000000

08005ac8 <HAL_SAI_ErrorCallback>:

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
	;
}
 8005ac8:	4770      	bx	lr

08005aca <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
	;
}
 8005aca:	4770      	bx	lr

08005acc <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
  ;
}
 8005acc:	4770      	bx	lr

08005ace <HAL_SAI_RxCpltCallback>:


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005ace:	b508      	push	{r3, lr}
	audioFrame(HALF_BUFFER_SIZE);
 8005ad0:	2080      	movs	r0, #128	; 0x80
 8005ad2:	f7ff ffaf 	bl	8005a34 <audioFrame>
}
 8005ad6:	bd08      	pop	{r3, pc}

08005ad8 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005ad8:	b508      	push	{r3, lr}
	audioFrame(0);
 8005ada:	2000      	movs	r0, #0
 8005adc:	f7ff ffaa 	bl	8005a34 <audioFrame>
}
 8005ae0:	bd08      	pop	{r3, pc}
	...

08005ae4 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8005ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	4606      	mov	r6, r0

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8005aec:	2201      	movs	r2, #1
 8005aee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005af2:	483f      	ldr	r0, [pc, #252]	; (8005bf0 <AudioCodec_init+0x10c>)
 8005af4:	f7fc f826 	bl	8001b44 <HAL_GPIO_WritePin>

	HAL_Delay(2);
 8005af8:	2002      	movs	r0, #2
 8005afa:	f7fa fc53 	bl	80003a4 <HAL_Delay>
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 8005afe:	4c3d      	ldr	r4, [pc, #244]	; (8005bf4 <AudioCodec_init+0x110>)
 8005b00:	f04f 0a07 	mov.w	sl, #7
 8005b04:	f884 a000 	strb.w	sl, [r4]
	myI2cData[1] = 0x03;
 8005b08:	f04f 0b03 	mov.w	fp, #3
 8005b0c:	f884 b001 	strb.w	fp, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005b10:	4d39      	ldr	r5, [pc, #228]	; (8005bf8 <AudioCodec_init+0x114>)
 8005b12:	882b      	ldrh	r3, [r5, #0]
 8005b14:	686a      	ldr	r2, [r5, #4]
 8005b16:	9200      	str	r2, [sp, #0]
 8005b18:	4622      	mov	r2, r4
 8005b1a:	2120      	movs	r1, #32
 8005b1c:	4630      	mov	r0, r6
 8005b1e:	f7fc f965 	bl	8001dec <HAL_I2C_Master_Transmit>
 8005b22:	4f36      	ldr	r7, [pc, #216]	; (8005bfc <AudioCodec_init+0x118>)
 8005b24:	7038      	strb	r0, [r7, #0]
	//HAL_Delay(2);

	myI2cData[0] = 0x01;
 8005b26:	f04f 0801 	mov.w	r8, #1
 8005b2a:	f884 8000 	strb.w	r8, [r4]
	myI2cData[1] = 0x41;
 8005b2e:	2341      	movs	r3, #65	; 0x41
 8005b30:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005b32:	882b      	ldrh	r3, [r5, #0]
 8005b34:	686a      	ldr	r2, [r5, #4]
 8005b36:	9200      	str	r2, [sp, #0]
 8005b38:	4622      	mov	r2, r4
 8005b3a:	2120      	movs	r1, #32
 8005b3c:	4630      	mov	r0, r6
 8005b3e:	f7fc f955 	bl	8001dec <HAL_I2C_Master_Transmit>
 8005b42:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
 8005b44:	f04f 0902 	mov.w	r9, #2
 8005b48:	f884 9000 	strb.w	r9, [r4]
	myI2cData[1] = 0x00;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005b50:	882b      	ldrh	r3, [r5, #0]
 8005b52:	686a      	ldr	r2, [r5, #4]
 8005b54:	9200      	str	r2, [sp, #0]
 8005b56:	4622      	mov	r2, r4
 8005b58:	2120      	movs	r1, #32
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	f7fc f946 	bl	8001dec <HAL_I2C_Master_Transmit>
 8005b60:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
 8005b62:	f884 b000 	strb.w	fp, [r4]
	myI2cData[1] = 0x79;
 8005b66:	2379      	movs	r3, #121	; 0x79
 8005b68:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005b6a:	882b      	ldrh	r3, [r5, #0]
 8005b6c:	686a      	ldr	r2, [r5, #4]
 8005b6e:	9200      	str	r2, [sp, #0]
 8005b70:	4622      	mov	r2, r4
 8005b72:	2120      	movs	r1, #32
 8005b74:	4630      	mov	r0, r6
 8005b76:	f7fc f939 	bl	8001dec <HAL_I2C_Master_Transmit>
 8005b7a:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
 8005b7c:	2304      	movs	r3, #4
 8005b7e:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x01;
 8005b80:	f884 8001 	strb.w	r8, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005b84:	882b      	ldrh	r3, [r5, #0]
 8005b86:	686a      	ldr	r2, [r5, #4]
 8005b88:	9200      	str	r2, [sp, #0]
 8005b8a:	4622      	mov	r2, r4
 8005b8c:	2120      	movs	r1, #32
 8005b8e:	4630      	mov	r0, r6
 8005b90:	f7fc f92c 	bl	8001dec <HAL_I2C_Master_Transmit>
 8005b94:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
 8005b96:	2305      	movs	r3, #5
 8005b98:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x01;
 8005b9a:	f884 8001 	strb.w	r8, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005b9e:	882b      	ldrh	r3, [r5, #0]
 8005ba0:	686a      	ldr	r2, [r5, #4]
 8005ba2:	9200      	str	r2, [sp, #0]
 8005ba4:	4622      	mov	r2, r4
 8005ba6:	2120      	movs	r1, #32
 8005ba8:	4630      	mov	r0, r6
 8005baa:	f7fc f91f 	bl	8001dec <HAL_I2C_Master_Transmit>
 8005bae:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
 8005bb0:	2306      	movs	r3, #6
 8005bb2:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x10;
 8005bb4:	2310      	movs	r3, #16
 8005bb6:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005bb8:	882b      	ldrh	r3, [r5, #0]
 8005bba:	686a      	ldr	r2, [r5, #4]
 8005bbc:	9200      	str	r2, [sp, #0]
 8005bbe:	4622      	mov	r2, r4
 8005bc0:	2120      	movs	r1, #32
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	f7fc f912 	bl	8001dec <HAL_I2C_Master_Transmit>
 8005bc8:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
 8005bca:	f884 a000 	strb.w	sl, [r4]
	myI2cData[1] = 0x02;
 8005bce:	f884 9001 	strb.w	r9, [r4, #1]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005bd2:	882b      	ldrh	r3, [r5, #0]
 8005bd4:	686a      	ldr	r2, [r5, #4]
 8005bd6:	9200      	str	r2, [sp, #0]
 8005bd8:	4622      	mov	r2, r4
 8005bda:	2120      	movs	r1, #32
 8005bdc:	4630      	mov	r0, r6
 8005bde:	f7fc f905 	bl	8001dec <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 8005be2:	4b07      	ldr	r3, [pc, #28]	; (8005c00 <AudioCodec_init+0x11c>)
 8005be4:	f883 8000 	strb.w	r8, [r3]

}
 8005be8:	b003      	add	sp, #12
 8005bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bee:	bf00      	nop
 8005bf0:	58020800 	.word	0x58020800
 8005bf4:	200003b0 	.word	0x200003b0
 8005bf8:	20000278 	.word	0x20000278
 8005bfc:	2000189c 	.word	0x2000189c
 8005c00:	200003a0 	.word	0x200003a0

08005c04 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8005c04:	b500      	push	{lr}
 8005c06:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005c08:	4b17      	ldr	r3, [pc, #92]	; (8005c68 <MX_DMA_Init+0x64>)
 8005c0a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8005c0e:	f042 0201 	orr.w	r2, r2, #1
 8005c12:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8005c16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	9301      	str	r3, [sp, #4]
 8005c20:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8005c22:	2200      	movs	r2, #0
 8005c24:	4611      	mov	r1, r2
 8005c26:	200c      	movs	r0, #12
 8005c28:	f7fa fbe8 	bl	80003fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8005c2c:	200c      	movs	r0, #12
 8005c2e:	f7fa fc17 	bl	8000460 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8005c32:	2200      	movs	r2, #0
 8005c34:	4611      	mov	r1, r2
 8005c36:	200d      	movs	r0, #13
 8005c38:	f7fa fbe0 	bl	80003fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8005c3c:	200d      	movs	r0, #13
 8005c3e:	f7fa fc0f 	bl	8000460 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8005c42:	2200      	movs	r2, #0
 8005c44:	4611      	mov	r1, r2
 8005c46:	200e      	movs	r0, #14
 8005c48:	f7fa fbd8 	bl	80003fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8005c4c:	200e      	movs	r0, #14
 8005c4e:	f7fa fc07 	bl	8000460 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8005c52:	2200      	movs	r2, #0
 8005c54:	4611      	mov	r1, r2
 8005c56:	200f      	movs	r0, #15
 8005c58:	f7fa fbd0 	bl	80003fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8005c5c:	200f      	movs	r0, #15
 8005c5e:	f7fa fbff 	bl	8000460 <HAL_NVIC_EnableIRQ>

}
 8005c62:	b003      	add	sp, #12
 8005c64:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c68:	58024400 	.word	0x58024400

08005c6c <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8005c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c6e:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c70:	2400      	movs	r4, #0
 8005c72:	9409      	str	r4, [sp, #36]	; 0x24
 8005c74:	940a      	str	r4, [sp, #40]	; 0x28
 8005c76:	940b      	str	r4, [sp, #44]	; 0x2c
 8005c78:	940c      	str	r4, [sp, #48]	; 0x30
 8005c7a:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005c7c:	4b64      	ldr	r3, [pc, #400]	; (8005e10 <MX_GPIO_Init+0x1a4>)
 8005c7e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005c82:	f042 0210 	orr.w	r2, r2, #16
 8005c86:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005c8a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005c8e:	f002 0210 	and.w	r2, r2, #16
 8005c92:	9201      	str	r2, [sp, #4]
 8005c94:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c96:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005c9a:	f042 0204 	orr.w	r2, r2, #4
 8005c9e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005ca2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005ca6:	f002 0204 	and.w	r2, r2, #4
 8005caa:	9202      	str	r2, [sp, #8]
 8005cac:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005cae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005cb2:	f042 0220 	orr.w	r2, r2, #32
 8005cb6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005cba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005cbe:	f002 0220 	and.w	r2, r2, #32
 8005cc2:	9203      	str	r2, [sp, #12]
 8005cc4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005cc6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005cca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005cce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005cd2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005cd6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005cda:	9204      	str	r2, [sp, #16]
 8005cdc:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cde:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005ce2:	f042 0201 	orr.w	r2, r2, #1
 8005ce6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005cea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005cee:	f002 0201 	and.w	r2, r2, #1
 8005cf2:	9205      	str	r2, [sp, #20]
 8005cf4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cf6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005cfa:	f042 0202 	orr.w	r2, r2, #2
 8005cfe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005d02:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005d06:	f002 0202 	and.w	r2, r2, #2
 8005d0a:	9206      	str	r2, [sp, #24]
 8005d0c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005d0e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005d12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d16:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005d1a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005d1e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005d22:	9207      	str	r2, [sp, #28]
 8005d24:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d26:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005d2a:	f042 0208 	orr.w	r2, r2, #8
 8005d2e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d36:	f003 0308 	and.w	r3, r3, #8
 8005d3a:	9308      	str	r3, [sp, #32]
 8005d3c:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8005d3e:	4e35      	ldr	r6, [pc, #212]	; (8005e14 <MX_GPIO_Init+0x1a8>)
 8005d40:	4622      	mov	r2, r4
 8005d42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d46:	4630      	mov	r0, r6
 8005d48:	f7fb fefc 	bl	8001b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005d4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d50:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d52:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d54:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d56:	a909      	add	r1, sp, #36	; 0x24
 8005d58:	4630      	mov	r0, r6
 8005d5a:	f7fb fe03 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005d5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d62:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d64:	2701      	movs	r7, #1
 8005d66:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005d68:	2302      	movs	r3, #2
 8005d6a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d6c:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d6e:	a909      	add	r1, sp, #36	; 0x24
 8005d70:	4630      	mov	r0, r6
 8005d72:	f7fb fdf7 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC1 PC2 PC5 
                           PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5 
 8005d76:	f248 03e6 	movw	r3, #32998	; 0x80e6
 8005d7a:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d7c:	2503      	movs	r5, #3
 8005d7e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d80:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d82:	a909      	add	r1, sp, #36	; 0x24
 8005d84:	4630      	mov	r0, r6
 8005d86:	f7fb fded 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 
                           PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 8005d8a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8005d8e:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d90:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d92:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005d94:	a909      	add	r1, sp, #36	; 0x24
 8005d96:	4820      	ldr	r0, [pc, #128]	; (8005e18 <MX_GPIO_Init+0x1ac>)
 8005d98:	f7fb fde4 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA5 PA6 PA7 
                           PA8 PA9 PA10 PA11 
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8005d9c:	f649 73f0 	movw	r3, #40944	; 0x9ff0
 8005da0:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005da2:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005da4:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005da6:	f5a6 6600 	sub.w	r6, r6, #2048	; 0x800
 8005daa:	a909      	add	r1, sp, #36	; 0x24
 8005dac:	4630      	mov	r0, r6
 8005dae:	f7fb fdd9 	bl	8001964 <HAL_GPIO_Init>

  // make pa0,1,2,3 into outputs
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005db2:	230f      	movs	r3, #15
 8005db4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005db6:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005db8:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dba:	a909      	add	r1, sp, #36	; 0x24
 8005dbc:	4630      	mov	r0, r6
 8005dbe:	f7fb fdd1 	bl	8001964 <HAL_GPIO_Init>


  /*Configure GPIO pins : PB0 PB1 PB2 PB4 
                           PB5 PB6 PB7 PB8 
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 8005dc2:	f240 33f7 	movw	r3, #1015	; 0x3f7
 8005dc6:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005dc8:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dca:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dcc:	a909      	add	r1, sp, #36	; 0x24
 8005dce:	4813      	ldr	r0, [pc, #76]	; (8005e1c <MX_GPIO_Init+0x1b0>)
 8005dd0:	f7fb fdc8 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD3 
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3 
 8005dd4:	f643 03f8 	movw	r3, #14584	; 0x38f8
 8005dd8:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005dda:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ddc:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005dde:	a909      	add	r1, sp, #36	; 0x24
 8005de0:	480f      	ldr	r0, [pc, #60]	; (8005e20 <MX_GPIO_Init+0x1b4>)
 8005de2:	f7fb fdbf 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG7 PG9 
                           PG10 PG11 PG12 PG13 
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13
 8005de6:	f247 0348 	movw	r3, #28744	; 0x7048
 8005dea:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005dec:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dee:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005df0:	4d0c      	ldr	r5, [pc, #48]	; (8005e24 <MX_GPIO_Init+0x1b8>)
 8005df2:	a909      	add	r1, sp, #36	; 0x24
 8005df4:	4628      	mov	r0, r5
 8005df6:	f7fb fdb5 	bl	8001964 <HAL_GPIO_Init>

  // make pg 7 9 10 11 into outputs
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8005dfa:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8005dfe:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e00:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e02:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005e04:	a909      	add	r1, sp, #36	; 0x24
 8005e06:	4628      	mov	r0, r5
 8005e08:	f7fb fdac 	bl	8001964 <HAL_GPIO_Init>
}
 8005e0c:	b00f      	add	sp, #60	; 0x3c
 8005e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e10:	58024400 	.word	0x58024400
 8005e14:	58020800 	.word	0x58020800
 8005e18:	58021400 	.word	0x58021400
 8005e1c:	58020400 	.word	0x58020400
 8005e20:	58020c00 	.word	0x58020c00
 8005e24:	58021800 	.word	0x58021800

08005e28 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8005e28:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 8005e2a:	4812      	ldr	r0, [pc, #72]	; (8005e74 <MX_I2C2_Init+0x4c>)
 8005e2c:	4b12      	ldr	r3, [pc, #72]	; (8005e78 <MX_I2C2_Init+0x50>)
 8005e2e:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 8005e30:	4b12      	ldr	r3, [pc, #72]	; (8005e7c <MX_I2C2_Init+0x54>)
 8005e32:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005e34:	2300      	movs	r3, #0
 8005e36:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005e38:	2201      	movs	r2, #1
 8005e3a:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005e3c:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8005e3e:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005e40:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005e42:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005e44:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005e46:	f7fb ff73 	bl	8001d30 <HAL_I2C_Init>
 8005e4a:	b950      	cbnz	r0, 8005e62 <MX_I2C2_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	4809      	ldr	r0, [pc, #36]	; (8005e74 <MX_I2C2_Init+0x4c>)
 8005e50:	f7fc f88a 	bl	8001f68 <HAL_I2CEx_ConfigAnalogFilter>
 8005e54:	b940      	cbnz	r0, 8005e68 <MX_I2C2_Init+0x40>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005e56:	2100      	movs	r1, #0
 8005e58:	4806      	ldr	r0, [pc, #24]	; (8005e74 <MX_I2C2_Init+0x4c>)
 8005e5a:	f7fc f8b3 	bl	8001fc4 <HAL_I2CEx_ConfigDigitalFilter>
 8005e5e:	b930      	cbnz	r0, 8005e6e <MX_I2C2_Init+0x46>
  {
    Error_Handler();
  }

}
 8005e60:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005e62:	f000 f8a1 	bl	8005fa8 <Error_Handler>
 8005e66:	e7f1      	b.n	8005e4c <MX_I2C2_Init+0x24>
    Error_Handler();
 8005e68:	f000 f89e 	bl	8005fa8 <Error_Handler>
 8005e6c:	e7f3      	b.n	8005e56 <MX_I2C2_Init+0x2e>
    Error_Handler();
 8005e6e:	f000 f89b 	bl	8005fa8 <Error_Handler>
}
 8005e72:	e7f5      	b.n	8005e60 <MX_I2C2_Init+0x38>
 8005e74:	200018a0 	.word	0x200018a0
 8005e78:	40005800 	.word	0x40005800
 8005e7c:	00b03fdb 	.word	0x00b03fdb

08005e80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005e80:	b510      	push	{r4, lr}
 8005e82:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e84:	2300      	movs	r3, #0
 8005e86:	9303      	str	r3, [sp, #12]
 8005e88:	9304      	str	r3, [sp, #16]
 8005e8a:	9305      	str	r3, [sp, #20]
 8005e8c:	9306      	str	r3, [sp, #24]
 8005e8e:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C2)
 8005e90:	6802      	ldr	r2, [r0, #0]
 8005e92:	4b16      	ldr	r3, [pc, #88]	; (8005eec <HAL_I2C_MspInit+0x6c>)
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d001      	beq.n	8005e9c <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8005e98:	b008      	add	sp, #32
 8005e9a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e9c:	4c14      	ldr	r4, [pc, #80]	; (8005ef0 <HAL_I2C_MspInit+0x70>)
 8005e9e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8005ea2:	f043 0302 	orr.w	r3, r3, #2
 8005ea6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8005eaa:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	9301      	str	r3, [sp, #4]
 8005eb4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005eb6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005eba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005ebc:	2312      	movs	r3, #18
 8005ebe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005ec4:	2304      	movs	r3, #4
 8005ec6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ec8:	a903      	add	r1, sp, #12
 8005eca:	480a      	ldr	r0, [pc, #40]	; (8005ef4 <HAL_I2C_MspInit+0x74>)
 8005ecc:	f7fb fd4a 	bl	8001964 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005ed0:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8005ed4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ed8:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8005edc:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8005ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ee4:	9302      	str	r3, [sp, #8]
 8005ee6:	9b02      	ldr	r3, [sp, #8]
}
 8005ee8:	e7d6      	b.n	8005e98 <HAL_I2C_MspInit+0x18>
 8005eea:	bf00      	nop
 8005eec:	40005800 	.word	0x40005800
 8005ef0:	58024400 	.word	0x58024400
 8005ef4:	58020400 	.word	0x58020400

08005ef8 <randomNumber>:
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, SDRAM_REFRESH_COUNT);
}


float randomNumber(void) {
 8005ef8:	b500      	push	{lr}
 8005efa:	b083      	sub	sp, #12

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8005efc:	a901      	add	r1, sp, #4
 8005efe:	4807      	ldr	r0, [pc, #28]	; (8005f1c <randomNumber+0x24>)
 8005f00:	f7fe f8ab 	bl	800405a <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 8005f04:	eddd 7a01 	vldr	s15, [sp, #4]
 8005f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
	return num;
}
 8005f0c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8005f20 <randomNumber+0x28>
 8005f10:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005f14:	b003      	add	sp, #12
 8005f16:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f1a:	bf00      	nop
 8005f1c:	200018f0 	.word	0x200018f0
 8005f20:	2f80000d 	.word	0x2f80000d

08005f24 <MPU_Conf>:


void MPU_Conf(void)
{
 8005f24:	b570      	push	{r4, r5, r6, lr}
 8005f26:	b084      	sub	sp, #16
  //Thanks, Keshikan! This solves the issues with accessing the SRAM in the D2 area properly. -JS
	//should test the different possible settings to see what works best while avoiding needing to manually clear the cache -JS

	MPU_Region_InitTypeDef MPU_InitStruct;

	  HAL_MPU_Disable();
 8005f28:	f7fa fabe 	bl	80004a8 <HAL_MPU_Disable>

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005f2c:	2401      	movs	r4, #1
 8005f2e:	f88d 4000 	strb.w	r4, [sp]

	  //D2 Domain�SRAM1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 8005f32:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005f36:	9301      	str	r3, [sp, #4]
	  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
	  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
	  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
	  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8005f38:	2311      	movs	r3, #17
 8005f3a:	f88d 3008 	strb.w	r3, [sp, #8]

	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8005f3e:	2603      	movs	r6, #3
 8005f40:	f88d 600b 	strb.w	r6, [sp, #11]

	  //AN4838
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8005f44:	f88d 400a 	strb.w	r4, [sp, #10]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8005f48:	2500      	movs	r5, #0
 8005f4a:	f88d 500e 	strb.w	r5, [sp, #14]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8005f4e:	f88d 500f 	strb.w	r5, [sp, #15]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8005f52:	f88d 500d 	strb.w	r5, [sp, #13]
//	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
//	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
//	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8005f56:	f88d 5001 	strb.w	r5, [sp, #1]

	  MPU_InitStruct.SubRegionDisable = 0x00;
 8005f5a:	f88d 5009 	strb.w	r5, [sp, #9]


	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8005f5e:	f88d 400c 	strb.w	r4, [sp, #12]


	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005f62:	4668      	mov	r0, sp
 8005f64:	f7fa fac2 	bl	80004ec <HAL_MPU_ConfigRegion>


	  //now set up D3 domain RAM

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005f68:	f88d 4000 	strb.w	r4, [sp]

	 	  //D2 Domain�SRAM1
	 	  MPU_InitStruct.BaseAddress = 0x38000000;
 8005f6c:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8005f70:	9301      	str	r3, [sp, #4]


	 	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8005f72:	230f      	movs	r3, #15
 8005f74:	f88d 3008 	strb.w	r3, [sp, #8]

	 	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8005f78:	f88d 600b 	strb.w	r6, [sp, #11]

	 	  //AN4838
	 	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8005f7c:	f88d 400a 	strb.w	r4, [sp, #10]
	 	  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8005f80:	f88d 400e 	strb.w	r4, [sp, #14]
	 	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8005f84:	f88d 400f 	strb.w	r4, [sp, #15]
	 	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8005f88:	f88d 400d 	strb.w	r4, [sp, #13]
	 //	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	 //	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	 //	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	 	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8005f8c:	f88d 4001 	strb.w	r4, [sp, #1]

	 	  MPU_InitStruct.SubRegionDisable = 0x00;
 8005f90:	f88d 5009 	strb.w	r5, [sp, #9]


	 	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8005f94:	f88d 500c 	strb.w	r5, [sp, #12]


	 	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005f98:	4668      	mov	r0, sp
 8005f9a:	f7fa faa7 	bl	80004ec <HAL_MPU_ConfigRegion>


	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8005f9e:	2004      	movs	r0, #4
 8005fa0:	f7fa fa92 	bl	80004c8 <HAL_MPU_Enable>
}
 8005fa4:	b004      	add	sp, #16
 8005fa6:	bd70      	pop	{r4, r5, r6, pc}

08005fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005fa8:	e7fe      	b.n	8005fa8 <Error_Handler>
	...

08005fac <SystemClock_Config>:
{
 8005fac:	b500      	push	{lr}
 8005fae:	b0cd      	sub	sp, #308	; 0x134
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005fb0:	224c      	movs	r2, #76	; 0x4c
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	a839      	add	r0, sp, #228	; 0xe4
 8005fb6:	f001 fb5f 	bl	8007678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005fba:	2220      	movs	r2, #32
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	a831      	add	r0, sp, #196	; 0xc4
 8005fc0:	f001 fb5a 	bl	8007678 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005fc4:	22bc      	movs	r2, #188	; 0xbc
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	a802      	add	r0, sp, #8
 8005fca:	f001 fb55 	bl	8007678 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8005fce:	2002      	movs	r0, #2
 8005fd0:	f7fc f824 	bl	800201c <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	9301      	str	r3, [sp, #4]
 8005fd8:	4b39      	ldr	r3, [pc, #228]	; (80060c0 <SystemClock_Config+0x114>)
 8005fda:	699a      	ldr	r2, [r3, #24]
 8005fdc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005fe0:	619a      	str	r2, [r3, #24]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005fe8:	9301      	str	r3, [sp, #4]
 8005fea:	4b36      	ldr	r3, [pc, #216]	; (80060c4 <SystemClock_Config+0x118>)
 8005fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fee:	f042 0201 	orr.w	r2, r2, #1
 8005ff2:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	9301      	str	r3, [sp, #4]
 8005ffc:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005ffe:	4b30      	ldr	r3, [pc, #192]	; (80060c0 <SystemClock_Config+0x114>)
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006006:	d0fa      	beq.n	8005ffe <SystemClock_Config+0x52>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8006008:	4a2f      	ldr	r2, [pc, #188]	; (80060c8 <SystemClock_Config+0x11c>)
 800600a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800600c:	f023 0303 	bic.w	r3, r3, #3
 8006010:	f043 0302 	orr.w	r3, r3, #2
 8006014:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8006016:	2321      	movs	r3, #33	; 0x21
 8006018:	9339      	str	r3, [sp, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800601a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800601e:	933a      	str	r3, [sp, #232]	; 0xe8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8006020:	2301      	movs	r3, #1
 8006022:	933f      	str	r3, [sp, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006024:	2302      	movs	r3, #2
 8006026:	9342      	str	r3, [sp, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006028:	9343      	str	r3, [sp, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800602a:	2205      	movs	r2, #5
 800602c:	9244      	str	r2, [sp, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 192;
 800602e:	22c0      	movs	r2, #192	; 0xc0
 8006030:	9245      	str	r2, [sp, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8006032:	9346      	str	r3, [sp, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006034:	9347      	str	r3, [sp, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006036:	9348      	str	r3, [sp, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8006038:	2308      	movs	r3, #8
 800603a:	9349      	str	r3, [sp, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800603c:	2300      	movs	r3, #0
 800603e:	934a      	str	r3, [sp, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006040:	934b      	str	r3, [sp, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006042:	a839      	add	r0, sp, #228	; 0xe4
 8006044:	f7fc f814 	bl	8002070 <HAL_RCC_OscConfig>
 8006048:	2800      	cmp	r0, #0
 800604a:	d133      	bne.n	80060b4 <SystemClock_Config+0x108>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800604c:	233f      	movs	r3, #63	; 0x3f
 800604e:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006050:	2303      	movs	r3, #3
 8006052:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006054:	2300      	movs	r3, #0
 8006056:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006058:	2308      	movs	r3, #8
 800605a:	9334      	str	r3, [sp, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800605c:	2340      	movs	r3, #64	; 0x40
 800605e:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8006060:	9336      	str	r3, [sp, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006062:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006066:	9237      	str	r2, [sp, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8006068:	9338      	str	r3, [sp, #224]	; 0xe0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800606a:	2104      	movs	r1, #4
 800606c:	a831      	add	r0, sp, #196	; 0xc4
 800606e:	f7fc fbed 	bl	800284c <HAL_RCC_ClockConfig>
 8006072:	bb08      	cbnz	r0, 80060b8 <SystemClock_Config+0x10c>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_SPI2
 8006074:	4b15      	ldr	r3, [pc, #84]	; (80060cc <SystemClock_Config+0x120>)
 8006076:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8006078:	2319      	movs	r3, #25
 800607a:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 800607c:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8006080:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 8006082:	2307      	movs	r3, #7
 8006084:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8006086:	2302      	movs	r3, #2
 8006088:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800608a:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800608c:	2300      	movs	r3, #0
 800608e:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8006090:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8006092:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8006094:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8006096:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800609a:	9215      	str	r2, [sp, #84]	; 0x54
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800609c:	2201      	movs	r2, #1
 800609e:	9217      	str	r2, [sp, #92]	; 0x5c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80060a0:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80060a2:	9321      	str	r3, [sp, #132]	; 0x84
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80060a4:	9322      	str	r3, [sp, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80060a6:	a802      	add	r0, sp, #8
 80060a8:	f7fc fe48 	bl	8002d3c <HAL_RCCEx_PeriphCLKConfig>
 80060ac:	b930      	cbnz	r0, 80060bc <SystemClock_Config+0x110>
}
 80060ae:	b04d      	add	sp, #308	; 0x134
 80060b0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80060b4:	f7ff ff78 	bl	8005fa8 <Error_Handler>
    Error_Handler();
 80060b8:	f7ff ff76 	bl	8005fa8 <Error_Handler>
    Error_Handler();
 80060bc:	f7ff ff74 	bl	8005fa8 <Error_Handler>
 80060c0:	58024800 	.word	0x58024800
 80060c4:	58000400 	.word	0x58000400
 80060c8:	58024400 	.word	0x58024400
 80060cc:	01031108 	.word	0x01031108

080060d0 <main>:
{
 80060d0:	b510      	push	{r4, lr}
  MPU_Conf();
 80060d2:	f7ff ff27 	bl	8005f24 <MPU_Conf>
  __ASM volatile ("dsb 0xF":::"memory");
 80060d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80060da:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80060de:	4b3a      	ldr	r3, [pc, #232]	; (80061c8 <main+0xf8>)
 80060e0:	2100      	movs	r1, #0
 80060e2:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80060e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80060ea:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80060ee:	695a      	ldr	r2, [r3, #20]
 80060f0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80060f4:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80060f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80060fa:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80060fe:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8006102:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8006106:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800610a:	f3c4 314e 	ubfx	r1, r4, #13, #15
 800610e:	e00f      	b.n	8006130 <main+0x60>
      } while (ways-- != 0U);
 8006110:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006112:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8006116:	ea03 1341 	and.w	r3, r3, r1, lsl #5
 800611a:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800611e:	482a      	ldr	r0, [pc, #168]	; (80061c8 <main+0xf8>)
 8006120:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8006124:	1e53      	subs	r3, r2, #1
 8006126:	2a00      	cmp	r2, #0
 8006128:	d1f2      	bne.n	8006110 <main+0x40>
    } while(sets-- != 0U);
 800612a:	1e4b      	subs	r3, r1, #1
 800612c:	b119      	cbz	r1, 8006136 <main+0x66>
 800612e:	4619      	mov	r1, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8006130:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 8006134:	e7ed      	b.n	8006112 <main+0x42>
 8006136:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800613a:	6943      	ldr	r3, [r0, #20]
 800613c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006140:	6143      	str	r3, [r0, #20]
 8006142:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006146:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800614a:	f7fa f8eb 	bl	8000324 <HAL_Init>
  SystemClock_Config();
 800614e:	f7ff ff2d 	bl	8005fac <SystemClock_Config>
  MX_GPIO_Init();
 8006152:	f7ff fd8b 	bl	8005c6c <MX_GPIO_Init>
  MX_DMA_Init();
 8006156:	f7ff fd55 	bl	8005c04 <MX_DMA_Init>
  MX_SAI1_Init();
 800615a:	f000 f871 	bl	8006240 <MX_SAI1_Init>
  MX_RNG_Init();
 800615e:	f000 f843 	bl	80061e8 <MX_RNG_Init>
  MX_SPI2_Init();
 8006162:	f000 f957 	bl	8006414 <MX_SPI2_Init>
  MX_I2C2_Init();
 8006166:	f7ff fe5f 	bl	8005e28 <MX_I2C2_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800616a:	2200      	movs	r2, #0
 800616c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006170:	4816      	ldr	r0, [pc, #88]	; (80061cc <main+0xfc>)
 8006172:	f7fb fce7 	bl	8001b44 <HAL_GPIO_WritePin>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8006176:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 800617a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 800617e:	eee1 3a10 	vmsr	fpscr, r3
  for (int i = 0; i < 16; i++)
 8006182:	2300      	movs	r3, #0
 8006184:	e006      	b.n	8006194 <main+0xc4>
	  SPI_TX[i] = counter++;
 8006186:	4912      	ldr	r1, [pc, #72]	; (80061d0 <main+0x100>)
 8006188:	780a      	ldrb	r2, [r1, #0]
 800618a:	1c50      	adds	r0, r2, #1
 800618c:	7008      	strb	r0, [r1, #0]
 800618e:	4911      	ldr	r1, [pc, #68]	; (80061d4 <main+0x104>)
 8006190:	54ca      	strb	r2, [r1, r3]
  for (int i = 0; i < 16; i++)
 8006192:	3301      	adds	r3, #1
 8006194:	2b0f      	cmp	r3, #15
 8006196:	ddf6      	ble.n	8006186 <main+0xb6>
  HAL_SPI_TransmitReceive_DMA(&hspi2, SPI_TX, SPI_RX, 16);
 8006198:	490e      	ldr	r1, [pc, #56]	; (80061d4 <main+0x104>)
 800619a:	2310      	movs	r3, #16
 800619c:	f101 0220 	add.w	r2, r1, #32
 80061a0:	480d      	ldr	r0, [pc, #52]	; (80061d8 <main+0x108>)
 80061a2:	f7fe fcdd 	bl	8004b60 <HAL_SPI_TransmitReceive_DMA>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80061a6:	2201      	movs	r2, #1
 80061a8:	2140      	movs	r1, #64	; 0x40
 80061aa:	4808      	ldr	r0, [pc, #32]	; (80061cc <main+0xfc>)
 80061ac:	f7fb fcca 	bl	8001b44 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80061b0:	200a      	movs	r0, #10
 80061b2:	f7fa f8f7 	bl	80003a4 <HAL_Delay>
  HAL_Delay(100);
 80061b6:	2064      	movs	r0, #100	; 0x64
 80061b8:	f7fa f8f4 	bl	80003a4 <HAL_Delay>
  audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 80061bc:	4a07      	ldr	r2, [pc, #28]	; (80061dc <main+0x10c>)
 80061be:	4908      	ldr	r1, [pc, #32]	; (80061e0 <main+0x110>)
 80061c0:	4808      	ldr	r0, [pc, #32]	; (80061e4 <main+0x114>)
 80061c2:	f7ff f91b 	bl	80053fc <audioInit>
 80061c6:	e7fe      	b.n	80061c6 <main+0xf6>
 80061c8:	e000ed00 	.word	0xe000ed00
 80061cc:	58020800 	.word	0x58020800
 80061d0:	200018ec 	.word	0x200018ec
 80061d4:	30000800 	.word	0x30000800
 80061d8:	20001b24 	.word	0x20001b24
 80061dc:	20001904 	.word	0x20001904
 80061e0:	20001a8c 	.word	0x20001a8c
 80061e4:	200018a0 	.word	0x200018a0

080061e8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80061e8:	b508      	push	{r3, lr}

  hrng.Instance = RNG;
 80061ea:	4806      	ldr	r0, [pc, #24]	; (8006204 <MX_RNG_Init+0x1c>)
 80061ec:	4b06      	ldr	r3, [pc, #24]	; (8006208 <MX_RNG_Init+0x20>)
 80061ee:	6003      	str	r3, [r0, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80061f0:	2300      	movs	r3, #0
 80061f2:	6043      	str	r3, [r0, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80061f4:	f7fd fef6 	bl	8003fe4 <HAL_RNG_Init>
 80061f8:	b900      	cbnz	r0, 80061fc <MX_RNG_Init+0x14>
  {
    Error_Handler();
  }

}
 80061fa:	bd08      	pop	{r3, pc}
    Error_Handler();
 80061fc:	f7ff fed4 	bl	8005fa8 <Error_Handler>
}
 8006200:	e7fb      	b.n	80061fa <MX_RNG_Init+0x12>
 8006202:	bf00      	nop
 8006204:	200018f0 	.word	0x200018f0
 8006208:	48021800 	.word	0x48021800

0800620c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{

  if(rngHandle->Instance==RNG)
 800620c:	6802      	ldr	r2, [r0, #0]
 800620e:	4b0a      	ldr	r3, [pc, #40]	; (8006238 <HAL_RNG_MspInit+0x2c>)
 8006210:	429a      	cmp	r2, r3
 8006212:	d000      	beq.n	8006216 <HAL_RNG_MspInit+0xa>
 8006214:	4770      	bx	lr
{
 8006216:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8006218:	4b08      	ldr	r3, [pc, #32]	; (800623c <HAL_RNG_MspInit+0x30>)
 800621a:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800621e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006222:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8006226:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800622a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622e:	9301      	str	r3, [sp, #4]
 8006230:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8006232:	b002      	add	sp, #8
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	48021800 	.word	0x48021800
 800623c:	58024400 	.word	0x58024400

08006240 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8006240:	b508      	push	{r3, lr}

  hsai_BlockA1.Instance = SAI1_Block_A;
 8006242:	4818      	ldr	r0, [pc, #96]	; (80062a4 <MX_SAI1_Init+0x64>)
 8006244:	4b18      	ldr	r3, [pc, #96]	; (80062a8 <MX_SAI1_Init+0x68>)
 8006246:	6003      	str	r3, [r0, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8006248:	2100      	movs	r1, #0
 800624a:	6041      	str	r1, [r0, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800624c:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800624e:	6141      	str	r1, [r0, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8006250:	6181      	str	r1, [r0, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8006252:	2301      	movs	r3, #1
 8006254:	61c3      	str	r3, [r0, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8006256:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800625a:	6203      	str	r3, [r0, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800625c:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800625e:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8006260:	6301      	str	r1, [r0, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8006262:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8006264:	2302      	movs	r3, #2
 8006266:	461a      	mov	r2, r3
 8006268:	f7fe f9fc 	bl	8004664 <HAL_SAI_InitProtocol>
 800626c:	b998      	cbnz	r0, 8006296 <MX_SAI1_Init+0x56>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 800626e:	480f      	ldr	r0, [pc, #60]	; (80062ac <MX_SAI1_Init+0x6c>)
 8006270:	4b0f      	ldr	r3, [pc, #60]	; (80062b0 <MX_SAI1_Init+0x70>)
 8006272:	6003      	str	r3, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8006274:	2303      	movs	r3, #3
 8006276:	6043      	str	r3, [r0, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8006278:	2301      	movs	r3, #1
 800627a:	6083      	str	r3, [r0, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800627c:	2100      	movs	r1, #0
 800627e:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8006280:	61c3      	str	r3, [r0, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8006282:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8006284:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8006286:	6301      	str	r1, [r0, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8006288:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800628a:	2302      	movs	r3, #2
 800628c:	461a      	mov	r2, r3
 800628e:	f7fe f9e9 	bl	8004664 <HAL_SAI_InitProtocol>
 8006292:	b918      	cbnz	r0, 800629c <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
  }

}
 8006294:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006296:	f7ff fe87 	bl	8005fa8 <Error_Handler>
 800629a:	e7e8      	b.n	800626e <MX_SAI1_Init+0x2e>
    Error_Handler();
 800629c:	f7ff fe84 	bl	8005fa8 <Error_Handler>
}
 80062a0:	e7f8      	b.n	8006294 <MX_SAI1_Init+0x54>
 80062a2:	bf00      	nop
 80062a4:	20001a8c 	.word	0x20001a8c
 80062a8:	40015804 	.word	0x40015804
 80062ac:	20001904 	.word	0x20001904
 80062b0:	40015824 	.word	0x40015824

080062b4 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80062b4:	b530      	push	{r4, r5, lr}
 80062b6:	b089      	sub	sp, #36	; 0x24
 80062b8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80062ba:	6802      	ldr	r2, [r0, #0]
 80062bc:	4b4c      	ldr	r3, [pc, #304]	; (80063f0 <HAL_SAI_MspInit+0x13c>)
 80062be:	429a      	cmp	r2, r3
 80062c0:	d005      	beq.n	80062ce <HAL_SAI_MspInit+0x1a>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
    }
    if(hsai->Instance==SAI1_Block_B)
 80062c2:	6822      	ldr	r2, [r4, #0]
 80062c4:	4b4b      	ldr	r3, [pc, #300]	; (80063f4 <HAL_SAI_MspInit+0x140>)
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d04a      	beq.n	8006360 <HAL_SAI_MspInit+0xac>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
    }
}
 80062ca:	b009      	add	sp, #36	; 0x24
 80062cc:	bd30      	pop	{r4, r5, pc}
    if (SAI1_client == 0)
 80062ce:	4b4a      	ldr	r3, [pc, #296]	; (80063f8 <HAL_SAI_MspInit+0x144>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	b963      	cbnz	r3, 80062ee <HAL_SAI_MspInit+0x3a>
       __HAL_RCC_SAI1_CLK_ENABLE();
 80062d4:	4a49      	ldr	r2, [pc, #292]	; (80063fc <HAL_SAI_MspInit+0x148>)
 80062d6:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 80062da:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80062de:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
 80062e2:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 80062e6:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80062ea:	9201      	str	r2, [sp, #4]
 80062ec:	9a01      	ldr	r2, [sp, #4]
    SAI1_client ++;
 80062ee:	3301      	adds	r3, #1
 80062f0:	4a41      	ldr	r2, [pc, #260]	; (80063f8 <HAL_SAI_MspInit+0x144>)
 80062f2:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80062f4:	2374      	movs	r3, #116	; 0x74
 80062f6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062f8:	2302      	movs	r3, #2
 80062fa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062fc:	2500      	movs	r5, #0
 80062fe:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006300:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8006302:	2306      	movs	r3, #6
 8006304:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006306:	a903      	add	r1, sp, #12
 8006308:	483d      	ldr	r0, [pc, #244]	; (8006400 <HAL_SAI_MspInit+0x14c>)
 800630a:	f7fb fb2b 	bl	8001964 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 800630e:	483d      	ldr	r0, [pc, #244]	; (8006404 <HAL_SAI_MspInit+0x150>)
 8006310:	4b3d      	ldr	r3, [pc, #244]	; (8006408 <HAL_SAI_MspInit+0x154>)
 8006312:	6003      	str	r3, [r0, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8006314:	2357      	movs	r3, #87	; 0x57
 8006316:	6043      	str	r3, [r0, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006318:	2340      	movs	r3, #64	; 0x40
 800631a:	6083      	str	r3, [r0, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800631c:	60c5      	str	r5, [r0, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800631e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006322:	6103      	str	r3, [r0, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006328:	6143      	str	r3, [r0, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800632a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800632e:	6183      	str	r3, [r0, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8006330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006334:	61c3      	str	r3, [r0, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006336:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800633a:	6203      	str	r3, [r0, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800633c:	2304      	movs	r3, #4
 800633e:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8006340:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8006342:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006344:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8006346:	f7fa fb0f 	bl	8000968 <HAL_DMA_Init>
 800634a:	b930      	cbnz	r0, 800635a <HAL_SAI_MspInit+0xa6>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 800634c:	4b2d      	ldr	r3, [pc, #180]	; (8006404 <HAL_SAI_MspInit+0x150>)
 800634e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8006352:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8006354:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8006358:	e7b3      	b.n	80062c2 <HAL_SAI_MspInit+0xe>
      Error_Handler();
 800635a:	f7ff fe25 	bl	8005fa8 <Error_Handler>
 800635e:	e7f5      	b.n	800634c <HAL_SAI_MspInit+0x98>
      if (SAI1_client == 0)
 8006360:	4b25      	ldr	r3, [pc, #148]	; (80063f8 <HAL_SAI_MspInit+0x144>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	b963      	cbnz	r3, 8006380 <HAL_SAI_MspInit+0xcc>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8006366:	4a25      	ldr	r2, [pc, #148]	; (80063fc <HAL_SAI_MspInit+0x148>)
 8006368:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 800636c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8006370:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
 8006374:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8006378:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800637c:	9202      	str	r2, [sp, #8]
 800637e:	9a02      	ldr	r2, [sp, #8]
    SAI1_client ++;
 8006380:	3301      	adds	r3, #1
 8006382:	4a1d      	ldr	r2, [pc, #116]	; (80063f8 <HAL_SAI_MspInit+0x144>)
 8006384:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006386:	2308      	movs	r3, #8
 8006388:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800638a:	2302      	movs	r3, #2
 800638c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800638e:	2500      	movs	r5, #0
 8006390:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006392:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8006394:	2306      	movs	r3, #6
 8006396:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006398:	a903      	add	r1, sp, #12
 800639a:	4819      	ldr	r0, [pc, #100]	; (8006400 <HAL_SAI_MspInit+0x14c>)
 800639c:	f7fb fae2 	bl	8001964 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 80063a0:	481a      	ldr	r0, [pc, #104]	; (800640c <HAL_SAI_MspInit+0x158>)
 80063a2:	4b1b      	ldr	r3, [pc, #108]	; (8006410 <HAL_SAI_MspInit+0x15c>)
 80063a4:	6003      	str	r3, [r0, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 80063a6:	2358      	movs	r3, #88	; 0x58
 80063a8:	6043      	str	r3, [r0, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80063aa:	6085      	str	r5, [r0, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80063ac:	60c5      	str	r5, [r0, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80063ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063b2:	6103      	str	r3, [r0, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80063b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063b8:	6143      	str	r3, [r0, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80063ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80063be:	6183      	str	r3, [r0, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80063c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063c4:	61c3      	str	r3, [r0, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80063c6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80063ca:	6203      	str	r3, [r0, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80063cc:	2304      	movs	r3, #4
 80063ce:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80063d0:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 80063d2:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80063d4:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80063d6:	f7fa fac7 	bl	8000968 <HAL_DMA_Init>
 80063da:	b930      	cbnz	r0, 80063ea <HAL_SAI_MspInit+0x136>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 80063dc:	4b0b      	ldr	r3, [pc, #44]	; (800640c <HAL_SAI_MspInit+0x158>)
 80063de:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80063e2:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 80063e4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 80063e8:	e76f      	b.n	80062ca <HAL_SAI_MspInit+0x16>
      Error_Handler();
 80063ea:	f7ff fddd 	bl	8005fa8 <Error_Handler>
 80063ee:	e7f5      	b.n	80063dc <HAL_SAI_MspInit+0x128>
 80063f0:	40015804 	.word	0x40015804
 80063f4:	40015824 	.word	0x40015824
 80063f8:	200003b8 	.word	0x200003b8
 80063fc:	58024400 	.word	0x58024400
 8006400:	58021000 	.word	0x58021000
 8006404:	2000199c 	.word	0x2000199c
 8006408:	40020028 	.word	0x40020028
 800640c:	20001a14 	.word	0x20001a14
 8006410:	40020040 	.word	0x40020040

08006414 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8006414:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 8006416:	4810      	ldr	r0, [pc, #64]	; (8006458 <MX_SPI2_Init+0x44>)
 8006418:	4b10      	ldr	r3, [pc, #64]	; (800645c <MX_SPI2_Init+0x48>)
 800641a:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800641c:	2300      	movs	r3, #0
 800641e:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006420:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006422:	2207      	movs	r2, #7
 8006424:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006426:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006428:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800642a:	6183      	str	r3, [r0, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800642c:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800642e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006430:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8006432:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8006434:	6343      	str	r3, [r0, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8006436:	6383      	str	r3, [r0, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8006438:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800643a:	6403      	str	r3, [r0, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800643c:	6443      	str	r3, [r0, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800643e:	6483      	str	r3, [r0, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8006440:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8006442:	6503      	str	r3, [r0, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8006444:	6543      	str	r3, [r0, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8006446:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006448:	f7fe fae2 	bl	8004a10 <HAL_SPI_Init>
 800644c:	b900      	cbnz	r0, 8006450 <MX_SPI2_Init+0x3c>
  {
    Error_Handler();
  }

}
 800644e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006450:	f7ff fdaa 	bl	8005fa8 <Error_Handler>
}
 8006454:	e7fb      	b.n	800644e <MX_SPI2_Init+0x3a>
 8006456:	bf00      	nop
 8006458:	20001b24 	.word	0x20001b24
 800645c:	40003800 	.word	0x40003800

08006460 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006460:	b510      	push	{r4, lr}
 8006462:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006464:	2300      	movs	r3, #0
 8006466:	9303      	str	r3, [sp, #12]
 8006468:	9304      	str	r3, [sp, #16]
 800646a:	9305      	str	r3, [sp, #20]
 800646c:	9306      	str	r3, [sp, #24]
 800646e:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 8006470:	6802      	ldr	r2, [r0, #0]
 8006472:	4b3d      	ldr	r3, [pc, #244]	; (8006568 <HAL_SPI_MspInit+0x108>)
 8006474:	429a      	cmp	r2, r3
 8006476:	d001      	beq.n	800647c <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8006478:	b008      	add	sp, #32
 800647a:	bd10      	pop	{r4, pc}
 800647c:	4604      	mov	r4, r0
    __HAL_RCC_SPI2_CLK_ENABLE();
 800647e:	4b3b      	ldr	r3, [pc, #236]	; (800656c <HAL_SPI_MspInit+0x10c>)
 8006480:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006484:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006488:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800648c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006490:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006494:	9201      	str	r2, [sp, #4]
 8006496:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006498:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800649c:	f042 0202 	orr.w	r2, r2, #2
 80064a0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80064a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064a8:	f003 0302 	and.w	r3, r3, #2
 80064ac:	9302      	str	r3, [sp, #8]
 80064ae:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80064b0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80064b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064b6:	2302      	movs	r3, #2
 80064b8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064ba:	2303      	movs	r3, #3
 80064bc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80064be:	2305      	movs	r3, #5
 80064c0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064c2:	a903      	add	r1, sp, #12
 80064c4:	482a      	ldr	r0, [pc, #168]	; (8006570 <HAL_SPI_MspInit+0x110>)
 80064c6:	f7fb fa4d 	bl	8001964 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80064ca:	482a      	ldr	r0, [pc, #168]	; (8006574 <HAL_SPI_MspInit+0x114>)
 80064cc:	4b2a      	ldr	r3, [pc, #168]	; (8006578 <HAL_SPI_MspInit+0x118>)
 80064ce:	6003      	str	r3, [r0, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80064d0:	2327      	movs	r3, #39	; 0x27
 80064d2:	6043      	str	r3, [r0, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064d4:	2300      	movs	r3, #0
 80064d6:	6083      	str	r3, [r0, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064d8:	60c3      	str	r3, [r0, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80064da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064de:	6102      	str	r2, [r0, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064e0:	6143      	str	r3, [r0, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80064e2:	6183      	str	r3, [r0, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80064e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064e8:	61c2      	str	r2, [r0, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80064ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80064ee:	6202      	str	r2, [r0, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80064f0:	2204      	movs	r2, #4
 80064f2:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80064f4:	2201      	movs	r2, #1
 80064f6:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80064f8:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80064fa:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80064fc:	f7fa fa34 	bl	8000968 <HAL_DMA_Init>
 8006500:	2800      	cmp	r0, #0
 8006502:	d12b      	bne.n	800655c <HAL_SPI_MspInit+0xfc>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8006504:	4b1b      	ldr	r3, [pc, #108]	; (8006574 <HAL_SPI_MspInit+0x114>)
 8006506:	67e3      	str	r3, [r4, #124]	; 0x7c
 8006508:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800650a:	481c      	ldr	r0, [pc, #112]	; (800657c <HAL_SPI_MspInit+0x11c>)
 800650c:	4b1c      	ldr	r3, [pc, #112]	; (8006580 <HAL_SPI_MspInit+0x120>)
 800650e:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8006510:	2328      	movs	r3, #40	; 0x28
 8006512:	6043      	str	r3, [r0, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006514:	2340      	movs	r3, #64	; 0x40
 8006516:	6083      	str	r3, [r0, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006518:	2300      	movs	r3, #0
 800651a:	60c3      	str	r3, [r0, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800651c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006520:	6102      	str	r2, [r0, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006522:	6143      	str	r3, [r0, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006524:	6183      	str	r3, [r0, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8006526:	f44f 7280 	mov.w	r2, #256	; 0x100
 800652a:	61c2      	str	r2, [r0, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800652c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006530:	6202      	str	r2, [r0, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006532:	2204      	movs	r2, #4
 8006534:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8006536:	2201      	movs	r2, #1
 8006538:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800653a:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800653c:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800653e:	f7fa fa13 	bl	8000968 <HAL_DMA_Init>
 8006542:	b970      	cbnz	r0, 8006562 <HAL_SPI_MspInit+0x102>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8006544:	4b0d      	ldr	r3, [pc, #52]	; (800657c <HAL_SPI_MspInit+0x11c>)
 8006546:	67a3      	str	r3, [r4, #120]	; 0x78
 8006548:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800654a:	2200      	movs	r2, #0
 800654c:	4611      	mov	r1, r2
 800654e:	2024      	movs	r0, #36	; 0x24
 8006550:	f7f9 ff54 	bl	80003fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8006554:	2024      	movs	r0, #36	; 0x24
 8006556:	f7f9 ff83 	bl	8000460 <HAL_NVIC_EnableIRQ>
}
 800655a:	e78d      	b.n	8006478 <HAL_SPI_MspInit+0x18>
      Error_Handler();
 800655c:	f7ff fd24 	bl	8005fa8 <Error_Handler>
 8006560:	e7d0      	b.n	8006504 <HAL_SPI_MspInit+0xa4>
      Error_Handler();
 8006562:	f7ff fd21 	bl	8005fa8 <Error_Handler>
 8006566:	e7ed      	b.n	8006544 <HAL_SPI_MspInit+0xe4>
 8006568:	40003800 	.word	0x40003800
 800656c:	58024400 	.word	0x58024400
 8006570:	58020400 	.word	0x58020400
 8006574:	20001bac 	.word	0x20001bac
 8006578:	40020058 	.word	0x40020058
 800657c:	20001c24 	.word	0x20001c24
 8006580:	40020070 	.word	0x40020070

08006584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006584:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006586:	4b07      	ldr	r3, [pc, #28]	; (80065a4 <HAL_MspInit+0x20>)
 8006588:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800658c:	f042 0202 	orr.w	r2, r2, #2
 8006590:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8006594:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006598:	f003 0302 	and.w	r3, r3, #2
 800659c:	9301      	str	r3, [sp, #4]
 800659e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80065a0:	b002      	add	sp, #8
 80065a2:	4770      	bx	lr
 80065a4:	58024400 	.word	0x58024400

080065a8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80065a8:	4770      	bx	lr

080065aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80065aa:	e7fe      	b.n	80065aa <HardFault_Handler>

080065ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80065ac:	e7fe      	b.n	80065ac <MemManage_Handler>

080065ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80065ae:	e7fe      	b.n	80065ae <BusFault_Handler>

080065b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80065b0:	e7fe      	b.n	80065b0 <UsageFault_Handler>

080065b2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80065b2:	4770      	bx	lr

080065b4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80065b4:	4770      	bx	lr

080065b6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80065b6:	4770      	bx	lr

080065b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80065b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80065ba:	f7f9 fee1 	bl	8000380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80065be:	bd08      	pop	{r3, pc}

080065c0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80065c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80065c2:	4802      	ldr	r0, [pc, #8]	; (80065cc <DMA1_Stream1_IRQHandler+0xc>)
 80065c4:	f7fa fe30 	bl	8001228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80065c8:	bd08      	pop	{r3, pc}
 80065ca:	bf00      	nop
 80065cc:	2000199c 	.word	0x2000199c

080065d0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80065d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 80065d2:	4802      	ldr	r0, [pc, #8]	; (80065dc <DMA1_Stream2_IRQHandler+0xc>)
 80065d4:	f7fa fe28 	bl	8001228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80065d8:	bd08      	pop	{r3, pc}
 80065da:	bf00      	nop
 80065dc:	20001a14 	.word	0x20001a14

080065e0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80065e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80065e2:	4802      	ldr	r0, [pc, #8]	; (80065ec <DMA1_Stream3_IRQHandler+0xc>)
 80065e4:	f7fa fe20 	bl	8001228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80065e8:	bd08      	pop	{r3, pc}
 80065ea:	bf00      	nop
 80065ec:	20001bac 	.word	0x20001bac

080065f0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80065f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80065f2:	4802      	ldr	r0, [pc, #8]	; (80065fc <DMA1_Stream4_IRQHandler+0xc>)
 80065f4:	f7fa fe18 	bl	8001228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80065f8:	bd08      	pop	{r3, pc}
 80065fa:	bf00      	nop
 80065fc:	20001c24 	.word	0x20001c24

08006600 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8006600:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8006602:	4802      	ldr	r0, [pc, #8]	; (800660c <SPI2_IRQHandler+0xc>)
 8006604:	f7fe fc32 	bl	8004e6c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8006608:	bd08      	pop	{r3, pc}
 800660a:	bf00      	nop
 800660c:	20001b24 	.word	0x20001b24

08006610 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006610:	4a18      	ldr	r2, [pc, #96]	; (8006674 <SystemInit+0x64>)
 8006612:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006616:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800661a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800661e:	4b16      	ldr	r3, [pc, #88]	; (8006678 <SystemInit+0x68>)
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	f042 0201 	orr.w	r2, r2, #1
 8006626:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006628:	2200      	movs	r2, #0
 800662a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800662c:	6818      	ldr	r0, [r3, #0]
 800662e:	4913      	ldr	r1, [pc, #76]	; (800667c <SystemInit+0x6c>)
 8006630:	4001      	ands	r1, r0
 8006632:	6019      	str	r1, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006634:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8006636:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8006638:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800663a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800663c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800663e:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006640:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8006642:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006644:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8006646:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006648:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800664a:	6819      	ldr	r1, [r3, #0]
 800664c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8006650:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006652:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006654:	4b0a      	ldr	r3, [pc, #40]	; (8006680 <SystemInit+0x70>)
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	4b0a      	ldr	r3, [pc, #40]	; (8006684 <SystemInit+0x74>)
 800665a:	4013      	ands	r3, r2
 800665c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006660:	d202      	bcs.n	8006668 <SystemInit+0x58>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8006662:	4b09      	ldr	r3, [pc, #36]	; (8006688 <SystemInit+0x78>)
 8006664:	2201      	movs	r2, #1
 8006666:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006668:	4b02      	ldr	r3, [pc, #8]	; (8006674 <SystemInit+0x64>)
 800666a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800666e:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	e000ed00 	.word	0xe000ed00
 8006678:	58024400 	.word	0x58024400
 800667c:	eaf6ed7f 	.word	0xeaf6ed7f
 8006680:	5c001000 	.word	0x5c001000
 8006684:	ffff0000 	.word	0xffff0000
 8006688:	51008108 	.word	0x51008108

0800668c <tThreshold_initToPool>:
{
	tThreshold_freeFromPool(th, &leaf.mempool);
}

void    tThreshold_initToPool  (tThreshold* const th, float low, float high, tMempool* const mp)
{
 800668c:	b510      	push	{r4, lr}
 800668e:	ed2d 8b02 	vpush	{d8}
 8006692:	4604      	mov	r4, r0
 8006694:	eeb0 8a40 	vmov.f32	s16, s0
 8006698:	eef0 8a60 	vmov.f32	s17, s1
    _tMempool* m = *mp;
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 800669c:	6809      	ldr	r1, [r1, #0]
 800669e:	200c      	movs	r0, #12
 80066a0:	f000 fdba 	bl	8007218 <mpool_alloc>
 80066a4:	6020      	str	r0, [r4, #0]

    t->highThresh = high;
 80066a6:	edc0 8a00 	vstr	s17, [r0]
    t->lowThresh = low;
 80066aa:	ed80 8a01 	vstr	s16, [r0, #4]

    t->currentValue = 0;
 80066ae:	2300      	movs	r3, #0
 80066b0:	6083      	str	r3, [r0, #8]
}
 80066b2:	ecbd 8b02 	vpop	{d8}
 80066b6:	bd10      	pop	{r4, pc}

080066b8 <tThreshold_init>:
{
 80066b8:	b508      	push	{r3, lr}
	tThreshold_initToPool(th, low, high, &leaf.mempool);
 80066ba:	4902      	ldr	r1, [pc, #8]	; (80066c4 <tThreshold_init+0xc>)
 80066bc:	f7ff ffe6 	bl	800668c <tThreshold_initToPool>
}
 80066c0:	bd08      	pop	{r3, pc}
 80066c2:	bf00      	nop
 80066c4:	20001cb4 	.word	0x20001cb4

080066c8 <tThreshold_tick>:
    mpool_free(t, m);
}

int tThreshold_tick(tThreshold* const th, float in)
{
    _tThreshold* t = *th;
 80066c8:	6803      	ldr	r3, [r0, #0]

    if (in >= t->highThresh)
 80066ca:	edd3 7a00 	vldr	s15, [r3]
 80066ce:	eef4 7ac0 	vcmpe.f32	s15, s0
 80066d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066d6:	d909      	bls.n	80066ec <tThreshold_tick+0x24>
    {
    	t->currentValue = 1;
    }
    else if (in <= t->lowThresh)
 80066d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80066dc:	eef4 7ac0 	vcmpe.f32	s15, s0
 80066e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066e4:	db04      	blt.n	80066f0 <tThreshold_tick+0x28>
	{
    	t->currentValue = 0;
 80066e6:	2200      	movs	r2, #0
 80066e8:	609a      	str	r2, [r3, #8]
 80066ea:	e001      	b.n	80066f0 <tThreshold_tick+0x28>
    	t->currentValue = 1;
 80066ec:	2201      	movs	r2, #1
 80066ee:	609a      	str	r2, [r3, #8]
	}

    return t->currentValue;
}
 80066f0:	6898      	ldr	r0, [r3, #8]
 80066f2:	4770      	bx	lr

080066f4 <tADSR_init>:
    return env->next;
}

/* ADSR */
void    tADSR_init(tADSR* const adsrenv, float attack, float decay, float sustain, float release)
{
 80066f4:	b510      	push	{r4, lr}
 80066f6:	ed2d 8b04 	vpush	{d8-d9}
 80066fa:	4604      	mov	r4, r0
 80066fc:	eeb0 9a40 	vmov.f32	s18, s0
 8006700:	eef0 8a60 	vmov.f32	s17, s1
 8006704:	eef0 9a41 	vmov.f32	s19, s2
 8006708:	eeb0 8a61 	vmov.f32	s16, s3
    _tADSR* adsr = *adsrenv = (_tADSR*) leaf_alloc(sizeof(_tADSR));
 800670c:	204c      	movs	r0, #76	; 0x4c
 800670e:	f000 fdd5 	bl	80072bc <leaf_alloc>
 8006712:	6020      	str	r0, [r4, #0]
    
    adsr->exp_buff = __leaf_table_exp_decay;
 8006714:	4b46      	ldr	r3, [pc, #280]	; (8006830 <tADSR_init+0x13c>)
 8006716:	6003      	str	r3, [r0, #0]
    adsr->inc_buff = __leaf_table_attack_decay_inc;
 8006718:	4b46      	ldr	r3, [pc, #280]	; (8006834 <tADSR_init+0x140>)
 800671a:	6043      	str	r3, [r0, #4]
    adsr->buff_size = sizeof(__leaf_table_exp_decay);
 800671c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006720:	6083      	str	r3, [r0, #8]
    
    if (attack > 8192.0f)
 8006722:	eddf 7a45 	vldr	s15, [pc, #276]	; 8006838 <tADSR_init+0x144>
 8006726:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800672a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800672e:	dd01      	ble.n	8006734 <tADSR_init+0x40>
        attack = 8192.0f;
 8006730:	eeb0 9a67 	vmov.f32	s18, s15
    if (attack < 0.0f)
 8006734:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8006738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800673c:	d466      	bmi.n	800680c <tADSR_init+0x118>
        attack = 0.0f;
    
    if (decay > 8192.0f)
 800673e:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8006838 <tADSR_init+0x144>
 8006742:	eef4 8ae7 	vcmpe.f32	s17, s15
 8006746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800674a:	dd01      	ble.n	8006750 <tADSR_init+0x5c>
        decay = 8192.0f;
 800674c:	eef0 8a67 	vmov.f32	s17, s15
    if (decay < 0.0f)
 8006750:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8006754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006758:	d45b      	bmi.n	8006812 <tADSR_init+0x11e>
        decay = 0.0f;
    
    if (sustain > 1.0f)
 800675a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800675e:	eef4 9ae7 	vcmpe.f32	s19, s15
 8006762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006766:	dd01      	ble.n	800676c <tADSR_init+0x78>
        sustain = 1.0f;
 8006768:	eef0 9a67 	vmov.f32	s19, s15
    if (sustain < 0.0f)
 800676c:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 8006770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006774:	d450      	bmi.n	8006818 <tADSR_init+0x124>
        sustain = 0.0f;
    
    if (release > 8192.0f)
 8006776:	eddf 7a30 	vldr	s15, [pc, #192]	; 8006838 <tADSR_init+0x144>
 800677a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800677e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006782:	dd01      	ble.n	8006788 <tADSR_init+0x94>
        release = 8192.0f;
 8006784:	eeb0 8a67 	vmov.f32	s16, s15
    if (release < 0.0f)
 8006788:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800678c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006790:	d445      	bmi.n	800681e <tADSR_init+0x12a>
        release = 0.0f;
    
    int16_t attackIndex = ((int16_t)(attack * 8.0f))-1;
 8006792:	eebe 9aee 	vcvt.s32.f32	s18, s18, #3
 8006796:	ee19 3a10 	vmov	r3, s18
 800679a:	b299      	uxth	r1, r3
 800679c:	3901      	subs	r1, #1
 800679e:	b209      	sxth	r1, r1
    int16_t decayIndex = ((int16_t)(decay * 8.0f))-1;
 80067a0:	eefe 8aee 	vcvt.s32.f32	s17, s17, #3
 80067a4:	ee18 3a90 	vmov	r3, s17
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	3a01      	subs	r2, #1
 80067ac:	b212      	sxth	r2, r2
    int16_t releaseIndex = ((int16_t)(release * 8.0f))-1;
 80067ae:	eebe 8aee 	vcvt.s32.f32	s16, s16, #3
 80067b2:	ee18 3a10 	vmov	r3, s16
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	3b01      	subs	r3, #1
 80067ba:	b21b      	sxth	r3, r3
    int16_t rampIndex = ((int16_t)(2.0f * 8.0f))-1;
    
    if (attackIndex < 0)
 80067bc:	2900      	cmp	r1, #0
 80067be:	db31      	blt.n	8006824 <tADSR_init+0x130>
        attackIndex = 0;
    if (decayIndex < 0)
 80067c0:	2a00      	cmp	r2, #0
 80067c2:	db31      	blt.n	8006828 <tADSR_init+0x134>
        decayIndex = 0;
    if (releaseIndex < 0)
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	db31      	blt.n	800682c <tADSR_init+0x138>
        releaseIndex = 0;
    if (rampIndex < 0)
        rampIndex = 0;
    
    adsr->inRamp = OFALSE;
 80067c8:	2400      	movs	r4, #0
 80067ca:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    adsr->inAttack = OFALSE;
 80067ce:	f880 4020 	strb.w	r4, [r0, #32]
    adsr->inDecay = OFALSE;
 80067d2:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    adsr->inSustain = OFALSE;
 80067d6:	f880 4022 	strb.w	r4, [r0, #34]	; 0x22
    adsr->inRelease = OFALSE;
 80067da:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
    
    adsr->sustain = sustain;
 80067de:	edc0 9a0a 	vstr	s19, [r0, #40]	; 0x28
    
    adsr->attackInc = adsr->inc_buff[attackIndex];
 80067e2:	4c14      	ldr	r4, [pc, #80]	; (8006834 <tADSR_init+0x140>)
 80067e4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80067e8:	6809      	ldr	r1, [r1, #0]
 80067ea:	6101      	str	r1, [r0, #16]
    adsr->decayInc = adsr->inc_buff[decayIndex];
 80067ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80067f0:	6812      	ldr	r2, [r2, #0]
 80067f2:	6142      	str	r2, [r0, #20]
    adsr->releaseInc = adsr->inc_buff[releaseIndex];
 80067f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	6183      	str	r3, [r0, #24]
    adsr->rampInc = adsr->inc_buff[rampIndex];
 80067fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80067fe:	61c3      	str	r3, [r0, #28]

    adsr->leakFactor = 1.0f;
 8006800:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006804:	6483      	str	r3, [r0, #72]	; 0x48

}
 8006806:	ecbd 8b04 	vpop	{d8-d9}
 800680a:	bd10      	pop	{r4, pc}
        attack = 0.0f;
 800680c:	ed9f 9a0b 	vldr	s18, [pc, #44]	; 800683c <tADSR_init+0x148>
 8006810:	e795      	b.n	800673e <tADSR_init+0x4a>
        decay = 0.0f;
 8006812:	eddf 8a0a 	vldr	s17, [pc, #40]	; 800683c <tADSR_init+0x148>
 8006816:	e7a0      	b.n	800675a <tADSR_init+0x66>
        sustain = 0.0f;
 8006818:	eddf 9a08 	vldr	s19, [pc, #32]	; 800683c <tADSR_init+0x148>
 800681c:	e7ab      	b.n	8006776 <tADSR_init+0x82>
        release = 0.0f;
 800681e:	ed9f 8a07 	vldr	s16, [pc, #28]	; 800683c <tADSR_init+0x148>
 8006822:	e7b6      	b.n	8006792 <tADSR_init+0x9e>
        attackIndex = 0;
 8006824:	2100      	movs	r1, #0
 8006826:	e7cb      	b.n	80067c0 <tADSR_init+0xcc>
        decayIndex = 0;
 8006828:	2200      	movs	r2, #0
 800682a:	e7cb      	b.n	80067c4 <tADSR_init+0xd0>
        releaseIndex = 0;
 800682c:	2300      	movs	r3, #0
 800682e:	e7cb      	b.n	80067c8 <tADSR_init+0xd4>
 8006830:	0804ee58 	.word	0x0804ee58
 8006834:	0800ee58 	.word	0x0800ee58
 8006838:	46000000 	.word	0x46000000
 800683c:	00000000 	.word	0x00000000

08006840 <tADSR_initToPool>:

    leaf_free(adsr);
}

void    tADSR_initToPool    (tADSR* const adsrenv, float attack, float decay, float sustain, float release, tMempool* const mp)
{
 8006840:	b510      	push	{r4, lr}
 8006842:	ed2d 8b04 	vpush	{d8-d9}
 8006846:	4604      	mov	r4, r0
 8006848:	eeb0 9a40 	vmov.f32	s18, s0
 800684c:	eef0 8a60 	vmov.f32	s17, s1
 8006850:	eef0 9a41 	vmov.f32	s19, s2
 8006854:	eeb0 8a61 	vmov.f32	s16, s3
    _tMempool* m = *mp;
    _tADSR* adsr = *adsrenv = (_tADSR*) mpool_alloc(sizeof(_tADSR), m);
 8006858:	6809      	ldr	r1, [r1, #0]
 800685a:	204c      	movs	r0, #76	; 0x4c
 800685c:	f000 fcdc 	bl	8007218 <mpool_alloc>
 8006860:	6020      	str	r0, [r4, #0]
    
    adsr->exp_buff = __leaf_table_exp_decay;
 8006862:	4b47      	ldr	r3, [pc, #284]	; (8006980 <tADSR_initToPool+0x140>)
 8006864:	6003      	str	r3, [r0, #0]
    adsr->inc_buff = __leaf_table_attack_decay_inc;
 8006866:	4b47      	ldr	r3, [pc, #284]	; (8006984 <tADSR_initToPool+0x144>)
 8006868:	6043      	str	r3, [r0, #4]
    adsr->buff_size = sizeof(__leaf_table_exp_decay);
 800686a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800686e:	6083      	str	r3, [r0, #8]
    
    if (attack > 8192.0f)
 8006870:	eddf 7a45 	vldr	s15, [pc, #276]	; 8006988 <tADSR_initToPool+0x148>
 8006874:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8006878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800687c:	dd01      	ble.n	8006882 <tADSR_initToPool+0x42>
        attack = 8192.0f;
 800687e:	eeb0 9a67 	vmov.f32	s18, s15
    if (attack < 0.0f)
 8006882:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8006886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800688a:	d466      	bmi.n	800695a <tADSR_initToPool+0x11a>
        attack = 0.0f;
    
    if (decay > 8192.0f)
 800688c:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8006988 <tADSR_initToPool+0x148>
 8006890:	eef4 8ae7 	vcmpe.f32	s17, s15
 8006894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006898:	dd01      	ble.n	800689e <tADSR_initToPool+0x5e>
        decay = 8192.0f;
 800689a:	eef0 8a67 	vmov.f32	s17, s15
    if (decay < 0.0f)
 800689e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80068a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068a6:	d45b      	bmi.n	8006960 <tADSR_initToPool+0x120>
        decay = 0.0f;
    
    if (sustain > 1.0f)
 80068a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80068ac:	eef4 9ae7 	vcmpe.f32	s19, s15
 80068b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068b4:	dd01      	ble.n	80068ba <tADSR_initToPool+0x7a>
        sustain = 1.0f;
 80068b6:	eef0 9a67 	vmov.f32	s19, s15
    if (sustain < 0.0f)
 80068ba:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 80068be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c2:	d450      	bmi.n	8006966 <tADSR_initToPool+0x126>
        sustain = 0.0f;
    
    if (release > 8192.0f)
 80068c4:	eddf 7a30 	vldr	s15, [pc, #192]	; 8006988 <tADSR_initToPool+0x148>
 80068c8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80068cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068d0:	dd01      	ble.n	80068d6 <tADSR_initToPool+0x96>
        release = 8192.0f;
 80068d2:	eeb0 8a67 	vmov.f32	s16, s15
    if (release < 0.0f)
 80068d6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80068da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068de:	d445      	bmi.n	800696c <tADSR_initToPool+0x12c>
        release = 0.0f;
    
    int16_t attackIndex = ((int16_t)(attack * 8.0f))-1;
 80068e0:	eebe 9aee 	vcvt.s32.f32	s18, s18, #3
 80068e4:	ee19 3a10 	vmov	r3, s18
 80068e8:	b299      	uxth	r1, r3
 80068ea:	3901      	subs	r1, #1
 80068ec:	b209      	sxth	r1, r1
    int16_t decayIndex = ((int16_t)(decay * 8.0f))-1;
 80068ee:	eefe 8aee 	vcvt.s32.f32	s17, s17, #3
 80068f2:	ee18 3a90 	vmov	r3, s17
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	3a01      	subs	r2, #1
 80068fa:	b212      	sxth	r2, r2
    int16_t releaseIndex = ((int16_t)(release * 8.0f))-1;
 80068fc:	eebe 8aee 	vcvt.s32.f32	s16, s16, #3
 8006900:	ee18 3a10 	vmov	r3, s16
 8006904:	b29b      	uxth	r3, r3
 8006906:	3b01      	subs	r3, #1
 8006908:	b21b      	sxth	r3, r3
    int16_t rampIndex = ((int16_t)(2.0f * 8.0f))-1;
    
    if (attackIndex < 0)
 800690a:	2900      	cmp	r1, #0
 800690c:	db31      	blt.n	8006972 <tADSR_initToPool+0x132>
        attackIndex = 0;
    if (decayIndex < 0)
 800690e:	2a00      	cmp	r2, #0
 8006910:	db31      	blt.n	8006976 <tADSR_initToPool+0x136>
        decayIndex = 0;
    if (releaseIndex < 0)
 8006912:	2b00      	cmp	r3, #0
 8006914:	db31      	blt.n	800697a <tADSR_initToPool+0x13a>
        releaseIndex = 0;
    if (rampIndex < 0)
        rampIndex = 0;
    
    adsr->inRamp = OFALSE;
 8006916:	2400      	movs	r4, #0
 8006918:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    adsr->inAttack = OFALSE;
 800691c:	f880 4020 	strb.w	r4, [r0, #32]
    adsr->inDecay = OFALSE;
 8006920:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    adsr->inSustain = OFALSE;
 8006924:	f880 4022 	strb.w	r4, [r0, #34]	; 0x22
    adsr->inRelease = OFALSE;
 8006928:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
    
    adsr->sustain = sustain;
 800692c:	edc0 9a0a 	vstr	s19, [r0, #40]	; 0x28
    
    adsr->attackInc = adsr->inc_buff[attackIndex];
 8006930:	4c14      	ldr	r4, [pc, #80]	; (8006984 <tADSR_initToPool+0x144>)
 8006932:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006936:	6809      	ldr	r1, [r1, #0]
 8006938:	6101      	str	r1, [r0, #16]
    adsr->decayInc = adsr->inc_buff[decayIndex];
 800693a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800693e:	6812      	ldr	r2, [r2, #0]
 8006940:	6142      	str	r2, [r0, #20]
    adsr->releaseInc = adsr->inc_buff[releaseIndex];
 8006942:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6183      	str	r3, [r0, #24]
    adsr->rampInc = adsr->inc_buff[rampIndex];
 800694a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800694c:	61c3      	str	r3, [r0, #28]

    adsr->leakFactor = 1.0f;
 800694e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006952:	6483      	str	r3, [r0, #72]	; 0x48
}
 8006954:	ecbd 8b04 	vpop	{d8-d9}
 8006958:	bd10      	pop	{r4, pc}
        attack = 0.0f;
 800695a:	ed9f 9a0c 	vldr	s18, [pc, #48]	; 800698c <tADSR_initToPool+0x14c>
 800695e:	e795      	b.n	800688c <tADSR_initToPool+0x4c>
        decay = 0.0f;
 8006960:	eddf 8a0a 	vldr	s17, [pc, #40]	; 800698c <tADSR_initToPool+0x14c>
 8006964:	e7a0      	b.n	80068a8 <tADSR_initToPool+0x68>
        sustain = 0.0f;
 8006966:	eddf 9a09 	vldr	s19, [pc, #36]	; 800698c <tADSR_initToPool+0x14c>
 800696a:	e7ab      	b.n	80068c4 <tADSR_initToPool+0x84>
        release = 0.0f;
 800696c:	ed9f 8a07 	vldr	s16, [pc, #28]	; 800698c <tADSR_initToPool+0x14c>
 8006970:	e7b6      	b.n	80068e0 <tADSR_initToPool+0xa0>
        attackIndex = 0;
 8006972:	2100      	movs	r1, #0
 8006974:	e7cb      	b.n	800690e <tADSR_initToPool+0xce>
        decayIndex = 0;
 8006976:	2200      	movs	r2, #0
 8006978:	e7cb      	b.n	8006912 <tADSR_initToPool+0xd2>
        releaseIndex = 0;
 800697a:	2300      	movs	r3, #0
 800697c:	e7cb      	b.n	8006916 <tADSR_initToPool+0xd6>
 800697e:	bf00      	nop
 8006980:	0804ee58 	.word	0x0804ee58
 8006984:	0800ee58 	.word	0x0800ee58
 8006988:	46000000 	.word	0x46000000
 800698c:	00000000 	.word	0x00000000

08006990 <tADSR_setLeakFactor>:
}

// 0.999999 is slow leak, 0.9 is fast leak
void     tADSR_setLeakFactor(tADSR* const adsrenv, float leakFactor)
{
    _tADSR* adsr = *adsrenv;
 8006990:	6803      	ldr	r3, [r0, #0]


    adsr->leakFactor = leakFactor;
 8006992:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
}
 8006996:	4770      	bx	lr

08006998 <tADSR_on>:

void tADSR_on(tADSR* const adsrenv, float velocity)
{
    _tADSR* adsr = *adsrenv;
 8006998:	6803      	ldr	r3, [r0, #0]
    
    if ((adsr->inAttack || adsr->inDecay) || (adsr->inSustain || adsr->inRelease)) // In case ADSR retriggered while it is still happening.
 800699a:	6a1a      	ldr	r2, [r3, #32]
 800699c:	b982      	cbnz	r2, 80069c0 <tADSR_on+0x28>
        adsr->inRamp = OTRUE;
        adsr->rampPeak = adsr->next;
    }
    else // Normal start.
    {
        adsr->inAttack = OTRUE;
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2020 	strb.w	r2, [r3, #32]
    }
    
    adsr->attackPhase = 0;
 80069a4:	2200      	movs	r2, #0
 80069a6:	639a      	str	r2, [r3, #56]	; 0x38
    adsr->decayPhase = 0;
 80069a8:	63da      	str	r2, [r3, #60]	; 0x3c
    adsr->releasePhase = 0;
 80069aa:	641a      	str	r2, [r3, #64]	; 0x40
    adsr->inDecay = OFALSE;
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    adsr->inSustain = OFALSE;
 80069b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    adsr->inRelease = OFALSE;
 80069b6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    adsr->gain = velocity;
 80069ba:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
}
 80069be:	4770      	bx	lr
        adsr->rampPhase = 0;
 80069c0:	2200      	movs	r2, #0
 80069c2:	645a      	str	r2, [r3, #68]	; 0x44
        adsr->inRamp = OTRUE;
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        adsr->rampPeak = adsr->next;
 80069ca:	68da      	ldr	r2, [r3, #12]
 80069cc:	631a      	str	r2, [r3, #48]	; 0x30
 80069ce:	e7e9      	b.n	80069a4 <tADSR_on+0xc>

080069d0 <tADSR_off>:

void tADSR_off(tADSR* const adsrenv)
{
    _tADSR* adsr = *adsrenv;
 80069d0:	6803      	ldr	r3, [r0, #0]
    
    if (adsr->inRelease) return;
 80069d2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80069d6:	b952      	cbnz	r2, 80069ee <tADSR_off+0x1e>
    
    adsr->inAttack = OFALSE;
 80069d8:	f883 2020 	strb.w	r2, [r3, #32]
    adsr->inDecay = OFALSE;
 80069dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    adsr->inSustain = OFALSE;
 80069e0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    adsr->inRelease = OTRUE;
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    
    adsr->releasePeak = adsr->next;
 80069ea:	68da      	ldr	r2, [r3, #12]
 80069ec:	635a      	str	r2, [r3, #52]	; 0x34
}
 80069ee:	4770      	bx	lr

080069f0 <tADSR_tick>:

float   tADSR_tick(tADSR* const adsrenv)
{
    _tADSR* adsr = *adsrenv;
 80069f0:	6803      	ldr	r3, [r0, #0]
    

    if (adsr->inRamp)
 80069f2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80069f6:	b1c2      	cbz	r2, 8006a2a <tADSR_tick+0x3a>
    {
        if (adsr->rampPhase > UINT16_MAX)
 80069f8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80069fc:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8006b90 <tADSR_tick+0x1a0>
 8006a00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a08:	dd74      	ble.n	8006af4 <tADSR_tick+0x104>
        {
            adsr->inRamp = OFALSE;
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            adsr->inAttack = OTRUE;
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2020 	strb.w	r2, [r3, #32]
            adsr->next = 0.0f;
 8006a16:	2200      	movs	r2, #0
 8006a18:	60da      	str	r2, [r3, #12]
        else
        {
        	adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
        }
        
        adsr->rampPhase += adsr->rampInc;
 8006a1a:	ed93 7a07 	vldr	s14, [r3, #28]
 8006a1e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006a22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a26:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    }
    
    if (adsr->inAttack)
 8006a2a:	f893 2020 	ldrb.w	r2, [r3, #32]
 8006a2e:	b1c2      	cbz	r2, 8006a62 <tADSR_tick+0x72>
    {
        
        // If attack done, time to turn around.
        if (adsr->attackPhase > UINT16_MAX)
 8006a30:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006a34:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8006b90 <tADSR_tick+0x1a0>
 8006a38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a40:	dd68      	ble.n	8006b14 <tADSR_tick+0x124>
        {
            adsr->inDecay = OTRUE;
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            adsr->inAttack = OFALSE;
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2020 	strb.w	r2, [r3, #32]
            adsr->next = adsr->gain * 1.0f;
 8006a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a50:	60da      	str	r2, [r3, #12]
            // do interpolation !
        	adsr->next = adsr->gain * adsr->exp_buff[UINT16_MAX - (uint32_t)adsr->attackPhase]; // inverted and backwards to get proper rising exponential shape/perception
        }
        
        // Increment ADSR attack.
        adsr->attackPhase += adsr->attackInc;
 8006a52:	ed93 7a04 	vldr	s14, [r3, #16]
 8006a56:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006a5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a5e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
        
    }
    
    if (adsr->inDecay)
 8006a62:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8006a66:	b1f2      	cbz	r2, 8006aa6 <tADSR_tick+0xb6>
    {
        
        // If decay done, sustain.
        if (adsr->decayPhase >= UINT16_MAX)
 8006a68:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8006a6c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8006b90 <tADSR_tick+0x1a0>
 8006a70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a78:	db60      	blt.n	8006b3c <tADSR_tick+0x14c>
        {
            adsr->inDecay = OFALSE;
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            adsr->inSustain = OTRUE;
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            adsr->next = adsr->gain * adsr->sustain;
 8006a86:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006a8a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8006a8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006a92:	edc3 7a03 	vstr	s15, [r3, #12]
        {
        	adsr->next = adsr->gain * (adsr->sustain + ((adsr->exp_buff[(uint32_t)adsr->decayPhase]) * (1 - adsr->sustain))); // do interpolation !
        }
        
        // Increment ADSR decay.
        adsr->decayPhase += adsr->decayInc;
 8006a96:	ed93 7a05 	vldr	s14, [r3, #20]
 8006a9a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8006a9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006aa2:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    }

    if (adsr->inSustain)
 8006aa6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8006aaa:	b13a      	cbz	r2, 8006abc <tADSR_tick+0xcc>
    {
    	adsr->next = adsr->next * adsr->leakFactor;
 8006aac:	edd3 7a03 	vldr	s15, [r3, #12]
 8006ab0:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8006ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006ab8:	edc3 7a03 	vstr	s15, [r3, #12]
    }

    if (adsr->inRelease)
 8006abc:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8006ac0:	b1aa      	cbz	r2, 8006aee <tADSR_tick+0xfe>
    {
        // If release done, finish.
        if (adsr->releasePhase >= UINT16_MAX)
 8006ac2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006ac6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8006b90 <tADSR_tick+0x1a0>
 8006aca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ad2:	db4d      	blt.n	8006b70 <tADSR_tick+0x180>
        {
            adsr->inRelease = OFALSE;
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
            adsr->next = 0.0f;
 8006ada:	2200      	movs	r2, #0
 8006adc:	60da      	str	r2, [r3, #12]
            
        	adsr->next = adsr->releasePeak * (adsr->exp_buff[(uint32_t)adsr->releasePhase]); // do interpolation !
        }
        
        // Increment envelope release;
        adsr->releasePhase += adsr->releaseInc;
 8006ade:	ed93 7a06 	vldr	s14, [r3, #24]
 8006ae2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006ae6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006aea:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    }


    return adsr->next;
}
 8006aee:	ed93 0a03 	vldr	s0, [r3, #12]
 8006af2:	4770      	bx	lr
        	adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
 8006af4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006afe:	ee17 1a90 	vmov	r1, s15
 8006b02:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006b06:	edd2 7a00 	vldr	s15, [r2]
 8006b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b0e:	edc3 7a03 	vstr	s15, [r3, #12]
 8006b12:	e782      	b.n	8006a1a <tADSR_tick+0x2a>
        	adsr->next = adsr->gain * adsr->exp_buff[UINT16_MAX - (uint32_t)adsr->attackPhase]; // inverted and backwards to get proper rising exponential shape/perception
 8006b14:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8006b18:	6819      	ldr	r1, [r3, #0]
 8006b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b1e:	ee17 2a90 	vmov	r2, s15
 8006b22:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
 8006b26:	0090      	lsls	r0, r2, #2
 8006b28:	4401      	add	r1, r0
 8006b2a:	4a1a      	ldr	r2, [pc, #104]	; (8006b94 <tADSR_tick+0x1a4>)
 8006b2c:	440a      	add	r2, r1
 8006b2e:	edd2 7a00 	vldr	s15, [r2]
 8006b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b36:	edc3 7a03 	vstr	s15, [r3, #12]
 8006b3a:	e78a      	b.n	8006a52 <tADSR_tick+0x62>
        	adsr->next = adsr->gain * (adsr->sustain + ((adsr->exp_buff[(uint32_t)adsr->decayPhase]) * (1 - adsr->sustain))); // do interpolation !
 8006b3c:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8006b40:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b4a:	ee17 1a90 	vmov	r1, s15
 8006b4e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006b52:	edd2 7a00 	vldr	s15, [r2]
 8006b56:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006b5a:	ee36 6a47 	vsub.f32	s12, s12, s14
 8006b5e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006b62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b66:	ee26 7a87 	vmul.f32	s14, s13, s14
 8006b6a:	ed83 7a03 	vstr	s14, [r3, #12]
 8006b6e:	e792      	b.n	8006a96 <tADSR_tick+0xa6>
        	adsr->next = adsr->releasePeak * (adsr->exp_buff[(uint32_t)adsr->releasePhase]); // do interpolation !
 8006b70:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b7a:	ee17 1a90 	vmov	r1, s15
 8006b7e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006b82:	edd2 7a00 	vldr	s15, [r2]
 8006b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b8a:	edc3 7a03 	vstr	s15, [r3, #12]
 8006b8e:	e7a6      	b.n	8006ade <tADSR_tick+0xee>
 8006b90:	477fff00 	.word	0x477fff00
 8006b94:	0003fffc 	.word	0x0003fffc

08006b98 <tRampUpDown_initToPool>:
{
	tRampUpDown_freeFromPool(r, &leaf.mempool);
}

void    tRampUpDown_initToPool(tRampUpDown* const r, float upTime, float downTime, int samples_per_tick, tMempool* const mp)
{
 8006b98:	b538      	push	{r3, r4, r5, lr}
 8006b9a:	ed2d 8b02 	vpush	{d8}
 8006b9e:	4605      	mov	r5, r0
 8006ba0:	eef0 8a40 	vmov.f32	s17, s0
 8006ba4:	eeb0 8a60 	vmov.f32	s16, s1
 8006ba8:	460c      	mov	r4, r1
    _tMempool* m = *mp;
    _tRampUpDown* ramp = *r = (_tRampUpDown*) mpool_alloc(sizeof(_tRampUpDown), m);
 8006baa:	6811      	ldr	r1, [r2, #0]
 8006bac:	2024      	movs	r0, #36	; 0x24
 8006bae:	f000 fb33 	bl	8007218 <mpool_alloc>
 8006bb2:	6028      	str	r0, [r5, #0]

    ramp->inv_sr_ms = 1.0f/(leaf.sampleRate*0.001f);
 8006bb4:	4b22      	ldr	r3, [pc, #136]	; (8006c40 <tRampUpDown_initToPool+0xa8>)
 8006bb6:	ed93 7a00 	vldr	s14, [r3]
 8006bba:	eddf 7a22 	vldr	s15, [pc, #136]	; 8006c44 <tRampUpDown_initToPool+0xac>
 8006bbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bca:	edc0 7a02 	vstr	s15, [r0, #8]
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 8006bce:	ee07 4a10 	vmov	s14, r4
 8006bd2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006bd6:	ee67 6a87 	vmul.f32	s13, s15, s14
 8006bda:	edc0 6a03 	vstr	s13, [r0, #12]
    ramp->curr = 0.0f;
 8006bde:	2300      	movs	r3, #0
 8006be0:	6103      	str	r3, [r0, #16]
    ramp->dest = 0.0f;
 8006be2:	6143      	str	r3, [r0, #20]

    if (upTime < ramp->minimum_time)
 8006be4:	eef4 6ae8 	vcmpe.f32	s13, s17
 8006be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bec:	dd22      	ble.n	8006c34 <tRampUpDown_initToPool+0x9c>
    {
        ramp->upTime = ramp->minimum_time;
 8006bee:	edc0 6a06 	vstr	s13, [r0, #24]
    else
    {
        ramp->upTime = upTime;
    }

    if (downTime < ramp->minimum_time)
 8006bf2:	eef4 6ac8 	vcmpe.f32	s13, s16
 8006bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bfa:	dc1e      	bgt.n	8006c3a <tRampUpDown_initToPool+0xa2>
    {
        ramp->downTime = ramp->minimum_time;
    }
    else
    {
        ramp->downTime = downTime;
 8006bfc:	ed80 8a07 	vstr	s16, [r0, #28]
    }

    ramp->samples_per_tick = samples_per_tick;
 8006c00:	6204      	str	r4, [r0, #32]
    ramp->upInc = ((ramp->dest - ramp->curr) / ramp->upTime * ramp->inv_sr_ms) * (float)ramp->samples_per_tick;
 8006c02:	edd0 5a06 	vldr	s11, [r0, #24]
 8006c06:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8006c48 <tRampUpDown_initToPool+0xb0>
 8006c0a:	eec6 6a25 	vdiv.f32	s13, s12, s11
 8006c0e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006c12:	ee67 6a26 	vmul.f32	s13, s14, s13
 8006c16:	edc0 6a00 	vstr	s13, [r0]
    ramp->downInc = ((ramp->dest - ramp->curr) / ramp->downTime * ramp->inv_sr_ms) * (float)ramp->samples_per_tick;
 8006c1a:	edd0 5a07 	vldr	s11, [r0, #28]
 8006c1e:	eec6 6a25 	vdiv.f32	s13, s12, s11
 8006c22:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c2a:	edc0 7a01 	vstr	s15, [r0, #4]
}
 8006c2e:	ecbd 8b02 	vpop	{d8}
 8006c32:	bd38      	pop	{r3, r4, r5, pc}
        ramp->upTime = upTime;
 8006c34:	edc0 8a06 	vstr	s17, [r0, #24]
 8006c38:	e7db      	b.n	8006bf2 <tRampUpDown_initToPool+0x5a>
        ramp->downTime = ramp->minimum_time;
 8006c3a:	edc0 6a07 	vstr	s13, [r0, #28]
 8006c3e:	e7df      	b.n	8006c00 <tRampUpDown_initToPool+0x68>
 8006c40:	20001c9c 	.word	0x20001c9c
 8006c44:	3a83126f 	.word	0x3a83126f
 8006c48:	00000000 	.word	0x00000000

08006c4c <tRampUpDown_init>:
{
 8006c4c:	b508      	push	{r3, lr}
	tRampUpDown_initToPool(r, upTime, downTime, samples_per_tick, &leaf.mempool);
 8006c4e:	4a02      	ldr	r2, [pc, #8]	; (8006c58 <tRampUpDown_init+0xc>)
 8006c50:	f7ff ffa2 	bl	8006b98 <tRampUpDown_initToPool>
}
 8006c54:	bd08      	pop	{r3, pc}
 8006c56:	bf00      	nop
 8006c58:	20001cb4 	.word	0x20001cb4

08006c5c <tRampUpDown_setDest>:
    r->downInc = ((r->dest - r->curr) / r->downTime * r->inv_sr_ms) * (float)r->samples_per_tick;
}

void     tRampUpDown_setDest(tRampUpDown* const ramp, float dest)
{
    _tRampUpDown* r = *ramp;
 8006c5c:	6803      	ldr	r3, [r0, #0]
    r->dest = dest;
 8006c5e:	ed83 0a05 	vstr	s0, [r3, #20]
    r->upInc = ((r->dest - r->curr) / r->upTime * r->inv_sr_ms) * (float)r->samples_per_tick;
 8006c62:	edd3 7a04 	vldr	s15, [r3, #16]
 8006c66:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006c6a:	edd3 7a06 	vldr	s15, [r3, #24]
 8006c6e:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8006c72:	edd3 6a02 	vldr	s13, [r3, #8]
 8006c76:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006c7a:	edd3 7a08 	vldr	s15, [r3, #32]
 8006c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c86:	ed83 7a00 	vstr	s14, [r3]
    r->downInc = ((r->dest - r->curr) / r->downTime * r->inv_sr_ms) * (float)r->samples_per_tick;
 8006c8a:	ed93 6a07 	vldr	s12, [r3, #28]
 8006c8e:	ee80 7a06 	vdiv.f32	s14, s0, s12
 8006c92:	ee66 6a87 	vmul.f32	s13, s13, s14
 8006c96:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006c9a:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8006c9e:	4770      	bx	lr

08006ca0 <tRampUpDown_tick>:
    r->downInc = ((r->dest - r->curr) / r->downTime * r->inv_sr_ms) * (float)r->samples_per_tick;
}

float   tRampUpDown_tick(tRampUpDown* const ramp)
{
    _tRampUpDown* r = *ramp;
 8006ca0:	6803      	ldr	r3, [r0, #0]
    float test;

    if (r->dest < r->curr)
 8006ca2:	ed93 7a05 	vldr	s14, [r3, #20]
 8006ca6:	edd3 7a04 	vldr	s15, [r3, #16]
 8006caa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cb2:	d512      	bpl.n	8006cda <tRampUpDown_tick+0x3a>
    {
    	test = r->curr + r->downInc;
 8006cb4:	edd3 6a01 	vldr	s13, [r3, #4]
 8006cb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
    	if (test > r->dest)
 8006cbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cc4:	d504      	bpl.n	8006cd0 <tRampUpDown_tick+0x30>
    	{
    		r->curr = test;
 8006cc6:	edc3 7a04 	vstr	s15, [r3, #16]
    		r->upInc = 0.0f;
    		r->curr = r->dest;
    	}
    }
    return r->curr;
}
 8006cca:	ed93 0a04 	vldr	s0, [r3, #16]
 8006cce:	4770      	bx	lr
    		r->downInc = 0.0f;
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	605a      	str	r2, [r3, #4]
    		r->curr = r->dest;
 8006cd4:	ed83 7a04 	vstr	s14, [r3, #16]
 8006cd8:	e7f7      	b.n	8006cca <tRampUpDown_tick+0x2a>
    else if (r->dest > r->curr)
 8006cda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ce2:	ddf2      	ble.n	8006cca <tRampUpDown_tick+0x2a>
    	test = r->curr + r->upInc;
 8006ce4:	edd3 6a00 	vldr	s13, [r3]
 8006ce8:	ee77 7aa6 	vadd.f32	s15, s15, s13
    	if (test < r->dest)
 8006cec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cf4:	dc04      	bgt.n	8006d00 <tRampUpDown_tick+0x60>
    		r->upInc = 0.0f;
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	601a      	str	r2, [r3, #0]
    		r->curr = r->dest;
 8006cfa:	ed83 7a04 	vstr	s14, [r3, #16]
 8006cfe:	e7e4      	b.n	8006cca <tRampUpDown_tick+0x2a>
    		r->curr = test;
 8006d00:	edc3 7a04 	vstr	s15, [r3, #16]
 8006d04:	e7e1      	b.n	8006cca <tRampUpDown_tick+0x2a>
	...

08006d08 <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, float val, float factor)
{	// factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8006d08:	b510      	push	{r4, lr}
 8006d0a:	ed2d 8b02 	vpush	{d8}
 8006d0e:	4604      	mov	r4, r0
 8006d10:	eef0 8a40 	vmov.f32	s17, s0
 8006d14:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) leaf_alloc(sizeof(_tExpSmooth));
 8006d18:	2010      	movs	r0, #16
 8006d1a:	f000 facf 	bl	80072bc <leaf_alloc>
 8006d1e:	6020      	str	r0, [r4, #0]
    
	smooth->curr=val;
 8006d20:	edc0 8a02 	vstr	s17, [r0, #8]
	smooth->dest=val;
 8006d24:	edc0 8a03 	vstr	s17, [r0, #12]
	if (factor<0) factor=0;
 8006d28:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d30:	d413      	bmi.n	8006d5a <tExpSmooth_init+0x52>
	if (factor>1) factor=1;
 8006d32:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006d36:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d3e:	dd01      	ble.n	8006d44 <tExpSmooth_init+0x3c>
 8006d40:	eeb0 8a67 	vmov.f32	s16, s15
	smooth->factor=factor;
 8006d44:	ed80 8a00 	vstr	s16, [r0]
	smooth->oneminusfactor=1.0f-factor;
 8006d48:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006d4c:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8006d50:	ed80 8a01 	vstr	s16, [r0, #4]
}
 8006d54:	ecbd 8b02 	vpop	{d8}
 8006d58:	bd10      	pop	{r4, pc}
	if (factor<0) factor=0;
 8006d5a:	ed9f 8a01 	vldr	s16, [pc, #4]	; 8006d60 <tExpSmooth_init+0x58>
 8006d5e:	e7e8      	b.n	8006d32 <tExpSmooth_init+0x2a>
 8006d60:	00000000 	.word	0x00000000

08006d64 <tExpSmooth_setDest>:
	smooth->oneminusfactor=1.0f-factor;
}

void     tExpSmooth_setDest(tExpSmooth* const expsmooth, float dest)
{
    _tExpSmooth* smooth = *expsmooth;
 8006d64:	6803      	ldr	r3, [r0, #0]
	smooth->dest=dest;
 8006d66:	ed83 0a03 	vstr	s0, [r3, #12]
}
 8006d6a:	4770      	bx	lr

08006d6c <tExpSmooth_tick>:
	smooth->curr=val;
}

float   tExpSmooth_tick(tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
 8006d6c:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor*smooth->dest+smooth->oneminusfactor*smooth->curr;
 8006d6e:	ed93 0a00 	vldr	s0, [r3]
 8006d72:	edd3 7a03 	vldr	s15, [r3, #12]
 8006d76:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006d7a:	edd3 7a01 	vldr	s15, [r3, #4]
 8006d7e:	ed93 7a02 	vldr	s14, [r3, #8]
 8006d82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d86:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006d8a:	ed83 0a02 	vstr	s0, [r3, #8]
    return smooth->curr;
}
 8006d8e:	4770      	bx	lr

08006d90 <tSlide_initToPool>:
void    tSlide_free          (tSlide* const sl)
{
	tSlide_freeFromPool    (sl, &leaf.mempool);
}
void    tSlide_initToPool    (tSlide* const sl, float upSlide, float downSlide, tMempool* const mp)
{
 8006d90:	b510      	push	{r4, lr}
 8006d92:	ed2d 8b02 	vpush	{d8}
 8006d96:	4604      	mov	r4, r0
 8006d98:	eef0 8a40 	vmov.f32	s17, s0
 8006d9c:	eeb0 8a60 	vmov.f32	s16, s1
    _tMempool* m = *mp;
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8006da0:	6809      	ldr	r1, [r1, #0]
 8006da2:	2014      	movs	r0, #20
 8006da4:	f000 fa38 	bl	8007218 <mpool_alloc>
 8006da8:	6020      	str	r0, [r4, #0]
    s->prevIn = 0.0f;
 8006daa:	2300      	movs	r3, #0
 8006dac:	6083      	str	r3, [r0, #8]
    s->currentOut = 0.0f;
 8006dae:	6043      	str	r3, [r0, #4]
    s->prevOut = 0.0f;
 8006db0:	6003      	str	r3, [r0, #0]
    if (upSlide < 1.0f)
 8006db2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006db6:	eef4 8ae7 	vcmpe.f32	s17, s15
 8006dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dbe:	d413      	bmi.n	8006de8 <tSlide_initToPool+0x58>
    {
    	upSlide = 1.0f;
    }

    if (downSlide < 1.0f)
 8006dc0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006dc4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dcc:	d40f      	bmi.n	8006dee <tSlide_initToPool+0x5e>
    {
    	downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 8006dce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006dd2:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8006dd6:	ed80 7a03 	vstr	s14, [r0, #12]
    s->invDownSlide = 1.0f / downSlide;
 8006dda:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8006dde:	ed80 7a04 	vstr	s14, [r0, #16]
}
 8006de2:	ecbd 8b02 	vpop	{d8}
 8006de6:	bd10      	pop	{r4, pc}
    	upSlide = 1.0f;
 8006de8:	eef0 8a67 	vmov.f32	s17, s15
 8006dec:	e7e8      	b.n	8006dc0 <tSlide_initToPool+0x30>
    	downSlide = 1.0f;
 8006dee:	eeb0 8a67 	vmov.f32	s16, s15
 8006df2:	e7ec      	b.n	8006dce <tSlide_initToPool+0x3e>

08006df4 <tSlide_init>:
{
 8006df4:	b508      	push	{r3, lr}
	tSlide_initToPool    (sl, upSlide, downSlide, &leaf.mempool);
 8006df6:	4902      	ldr	r1, [pc, #8]	; (8006e00 <tSlide_init+0xc>)
 8006df8:	f7ff ffca 	bl	8006d90 <tSlide_initToPool>
}
 8006dfc:	bd08      	pop	{r3, pc}
 8006dfe:	bf00      	nop
 8006e00:	20001cb4 	.word	0x20001cb4

08006e04 <tSlide_tick>:
	    mpool_free(s, m);
}

float tSlide_tick(tSlide* const sl, float in)
{
	_tSlide* s = *sl;
 8006e04:	6803      	ldr	r3, [r0, #0]


	if (in >= s->prevOut)
 8006e06:	edd3 7a00 	vldr	s15, [r3]
 8006e0a:	eef4 7ac0 	vcmpe.f32	s15, s0
 8006e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e12:	d81b      	bhi.n	8006e4c <tSlide_tick+0x48>
	{
		s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8006e14:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006e18:	edd3 6a03 	vldr	s13, [r3, #12]
 8006e1c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006e20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e24:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	else
	{
		s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
	}
	if (s->currentOut < VSF) s->currentOut = 0.0f;
 8006e28:	ed93 7a01 	vldr	s14, [r3, #4]
 8006e2c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8006e64 <tSlide_tick+0x60>
 8006e30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e38:	d501      	bpl.n	8006e3e <tSlide_tick+0x3a>
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	605a      	str	r2, [r3, #4]
	s->prevIn = in;
 8006e3e:	ed83 0a02 	vstr	s0, [r3, #8]
	s->prevOut = s->currentOut;
 8006e42:	ed93 0a01 	vldr	s0, [r3, #4]
 8006e46:	ed83 0a00 	vstr	s0, [r3]
	return s->currentOut;
}
 8006e4a:	4770      	bx	lr
		s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 8006e4c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006e50:	edd3 6a04 	vldr	s13, [r3, #16]
 8006e54:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006e58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e5c:	edc3 7a01 	vstr	s15, [r3, #4]
 8006e60:	e7e2      	b.n	8006e28 <tSlide_tick+0x24>
 8006e62:	bf00      	nop
 8006e64:	006ce3ee 	.word	0x006ce3ee

08006e68 <tSVF_init>:
}

// Less efficient, more accurate version of SVF, in which cutoff frequency is taken as floating point Hz value and tanf
// is calculated when frequency changes.
void tSVF_init(tSVF* const svff, SVFType type, float freq, float Q)
{
 8006e68:	b570      	push	{r4, r5, r6, lr}
 8006e6a:	ed2d 8b02 	vpush	{d8}
 8006e6e:	4606      	mov	r6, r0
 8006e70:	460d      	mov	r5, r1
 8006e72:	eeb0 8a40 	vmov.f32	s16, s0
 8006e76:	eef0 8a60 	vmov.f32	s17, s1
    _tSVF* svf = *svff = (_tSVF*) leaf_alloc(sizeof(_tSVF));
 8006e7a:	2038      	movs	r0, #56	; 0x38
 8006e7c:	f000 fa1e 	bl	80072bc <leaf_alloc>
 8006e80:	4604      	mov	r4, r0
 8006e82:	6030      	str	r0, [r6, #0]
    
    svf->type = type;
 8006e84:	7005      	strb	r5, [r0, #0]
    
    svf->ic1eq = 0;
 8006e86:	2300      	movs	r3, #0
 8006e88:	60c3      	str	r3, [r0, #12]
    svf->ic2eq = 0;
 8006e8a:	6103      	str	r3, [r0, #16]
    
    svf->g = tanf(PI * freq * leaf.invSampleRate);
 8006e8c:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8006f50 <tSVF_init+0xe8>
 8006e90:	ee28 8a00 	vmul.f32	s16, s16, s0
 8006e94:	4b2f      	ldr	r3, [pc, #188]	; (8006f54 <tSVF_init+0xec>)
 8006e96:	ed93 0a01 	vldr	s0, [r3, #4]
 8006e9a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8006e9e:	f000 fe39 	bl	8007b14 <tanf>
 8006ea2:	ed84 0a05 	vstr	s0, [r4, #20]
    svf->k = 1.0f/Q;
 8006ea6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006eaa:	eec6 6a28 	vdiv.f32	s13, s12, s17
 8006eae:	edc4 6a06 	vstr	s13, [r4, #24]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8006eb2:	ee30 7a26 	vadd.f32	s14, s0, s13
 8006eb6:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006eba:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006ebe:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8006ec2:	edc4 7a07 	vstr	s15, [r4, #28]
    svf->a2 = svf->g*svf->a1;
 8006ec6:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006eca:	edc4 7a08 	vstr	s15, [r4, #32]
    svf->a3 = svf->g*svf->a2;
 8006ece:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006ed2:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24

    if (type == SVFTypeLowpass)
 8006ed6:	2d01      	cmp	r5, #1
 8006ed8:	d012      	beq.n	8006f00 <tSVF_init+0x98>
		svf->cH = 0.0f;
		svf->cB = 0.0f;
		svf->kAmount = 0.0f;
		svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
 8006eda:	2d02      	cmp	r5, #2
 8006edc:	d019      	beq.n	8006f12 <tSVF_init+0xaa>
		svf->cB = 1.0f;
		svf->kAmount = 0.0f;
		svf->cL = 0.0f;
    }

    else if (type == SVFTypeHighpass)
 8006ede:	b305      	cbz	r5, 8006f22 <tSVF_init+0xba>
		svf->cB = svf->k * -1.0f;
		svf->kAmount = 1.0f;
		svf->cL = -1.0f;
    }

    else if (type == SVFTypeNotch)
 8006ee0:	2d03      	cmp	r5, #3
 8006ee2:	d029      	beq.n	8006f38 <tSVF_init+0xd0>
		svf->kAmount = 1.0f;
		svf->cL = 0.0f;
    }


    else if (type == SVFTypePeak)
 8006ee4:	2d04      	cmp	r5, #4
 8006ee6:	d111      	bne.n	8006f0c <tSVF_init+0xa4>
    {
		svf->cH = 1.0f;
 8006ee8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006eec:	62a3      	str	r3, [r4, #40]	; 0x28
		svf->cB = svf->k * -1.0f;
 8006eee:	eef1 6a66 	vneg.f32	s13, s13
 8006ef2:	edc4 6a0b 	vstr	s13, [r4, #44]	; 0x2c
		svf->kAmount = 1.0f;
 8006ef6:	6363      	str	r3, [r4, #52]	; 0x34
		svf->cL = -2.0f;
 8006ef8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8006efc:	6323      	str	r3, [r4, #48]	; 0x30
    // or maybe this?
    /*
     * hp=1 bp=A/Q (where A is 10^(G/40) and G is gain in decibels) and lp = 1
     */

}
 8006efe:	e005      	b.n	8006f0c <tSVF_init+0xa4>
		svf->cH = 0.0f;
 8006f00:	2300      	movs	r3, #0
 8006f02:	62a3      	str	r3, [r4, #40]	; 0x28
		svf->cB = 0.0f;
 8006f04:	62e3      	str	r3, [r4, #44]	; 0x2c
		svf->kAmount = 0.0f;
 8006f06:	6363      	str	r3, [r4, #52]	; 0x34
		svf->cL = 1.0f;
 8006f08:	ed84 6a0c 	vstr	s12, [r4, #48]	; 0x30
}
 8006f0c:	ecbd 8b02 	vpop	{d8}
 8006f10:	bd70      	pop	{r4, r5, r6, pc}
		svf->cH = 0.0f;
 8006f12:	2300      	movs	r3, #0
 8006f14:	62a3      	str	r3, [r4, #40]	; 0x28
		svf->cB = 1.0f;
 8006f16:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006f1a:	62e2      	str	r2, [r4, #44]	; 0x2c
		svf->kAmount = 0.0f;
 8006f1c:	6363      	str	r3, [r4, #52]	; 0x34
		svf->cL = 0.0f;
 8006f1e:	6323      	str	r3, [r4, #48]	; 0x30
 8006f20:	e7f4      	b.n	8006f0c <tSVF_init+0xa4>
		svf->cH = 1.0f;
 8006f22:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006f26:	62a3      	str	r3, [r4, #40]	; 0x28
		svf->cB = svf->k * -1.0f;
 8006f28:	eef1 6a66 	vneg.f32	s13, s13
 8006f2c:	edc4 6a0b 	vstr	s13, [r4, #44]	; 0x2c
		svf->kAmount = 1.0f;
 8006f30:	6363      	str	r3, [r4, #52]	; 0x34
		svf->cL = -1.0f;
 8006f32:	4b09      	ldr	r3, [pc, #36]	; (8006f58 <tSVF_init+0xf0>)
 8006f34:	6323      	str	r3, [r4, #48]	; 0x30
 8006f36:	e7e9      	b.n	8006f0c <tSVF_init+0xa4>
		svf->cH = 1.0f;
 8006f38:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006f3c:	62a3      	str	r3, [r4, #40]	; 0x28
		svf->cB = svf->k * -1.0f;
 8006f3e:	eef1 6a66 	vneg.f32	s13, s13
 8006f42:	edc4 6a0b 	vstr	s13, [r4, #44]	; 0x2c
		svf->kAmount = 1.0f;
 8006f46:	6363      	str	r3, [r4, #52]	; 0x34
		svf->cL = 0.0f;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	6323      	str	r3, [r4, #48]	; 0x30
 8006f4c:	e7de      	b.n	8006f0c <tSVF_init+0xa4>
 8006f4e:	bf00      	nop
 8006f50:	40490fdb 	.word	0x40490fdb
 8006f54:	20001c9c 	.word	0x20001c9c
 8006f58:	bf800000 	.word	0xbf800000

08006f5c <tSVF_tick>:
    mpool_free(svf, m);
}

float   tSVF_tick(tSVF* const svff, float v0)
{
    _tSVF* svf = *svff;
 8006f5c:	6803      	ldr	r3, [r0, #0]
    
    float v1,v2,v3;
    v3 = v0 - svf->ic2eq;
 8006f5e:	edd3 5a04 	vldr	s11, [r3, #16]
 8006f62:	ee70 4a65 	vsub.f32	s9, s0, s11
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8006f66:	ed93 7a07 	vldr	s14, [r3, #28]
 8006f6a:	ed93 5a03 	vldr	s10, [r3, #12]
 8006f6e:	ee27 7a05 	vmul.f32	s14, s14, s10
 8006f72:	edd3 7a08 	vldr	s15, [r3, #32]
 8006f76:	ee67 6aa4 	vmul.f32	s13, s15, s9
 8006f7a:	ee77 6a26 	vadd.f32	s13, s14, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8006f7e:	ee65 7a27 	vmul.f32	s15, s10, s15
 8006f82:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8006f86:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 8006f8a:	ee26 6a24 	vmul.f32	s12, s12, s9
 8006f8e:	ee77 7a86 	vadd.f32	s15, s15, s12
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 8006f92:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8006f96:	ee36 6a45 	vsub.f32	s12, s12, s10
 8006f9a:	ed83 6a03 	vstr	s12, [r3, #12]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 8006f9e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8006fa2:	ee36 6a65 	vsub.f32	s12, s12, s11
 8006fa6:	ed83 6a04 	vstr	s12, [r3, #16]
    
    return (v0 * svf->cH) + (svf->kAmount * svf->k * v1 * svf->cB) + (v2 * svf->cL);
 8006faa:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8006fae:	ee27 0a00 	vmul.f32	s0, s14, s0
 8006fb2:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8006fb6:	ed93 6a06 	vldr	s12, [r3, #24]
 8006fba:	ee27 7a06 	vmul.f32	s14, s14, s12
 8006fbe:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006fc2:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8006fc6:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006fca:	ee30 7a07 	vadd.f32	s14, s0, s14
 8006fce:	ed93 0a0c 	vldr	s0, [r3, #48]	; 0x30
 8006fd2:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8006fd6:	ee37 0a00 	vadd.f32	s0, s14, s0
 8006fda:	4770      	bx	lr

08006fdc <tSVF_setFreq>:

void     tSVF_setFreq(tSVF* const svff, float freq)
{
 8006fdc:	b510      	push	{r4, lr}
    _tSVF* svf = *svff;
 8006fde:	6804      	ldr	r4, [r0, #0]
    
    svf->g = tanf(PI * freq * leaf.invSampleRate);
 8006fe0:	eddf 7a11 	vldr	s15, [pc, #68]	; 8007028 <tSVF_setFreq+0x4c>
 8006fe4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006fe8:	4b10      	ldr	r3, [pc, #64]	; (800702c <tSVF_setFreq+0x50>)
 8006fea:	edd3 7a01 	vldr	s15, [r3, #4]
 8006fee:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006ff2:	f000 fd8f 	bl	8007b14 <tanf>
 8006ff6:	ed84 0a05 	vstr	s0, [r4, #20]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8006ffa:	edd4 7a06 	vldr	s15, [r4, #24]
 8006ffe:	ee70 7a27 	vadd.f32	s15, s0, s15
 8007002:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800700a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800700e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007012:	ed84 7a07 	vstr	s14, [r4, #28]
    svf->a2 = svf->g * svf->a1;
 8007016:	ee60 7a07 	vmul.f32	s15, s0, s14
 800701a:	edc4 7a08 	vstr	s15, [r4, #32]
    svf->a3 = svf->g * svf->a2;
 800701e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007022:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
}
 8007026:	bd10      	pop	{r4, pc}
 8007028:	40490fdb 	.word	0x40490fdb
 800702c:	20001c9c 	.word	0x20001c9c

08007030 <tHighpass_init>:
    svf->a3 = svf->g * svf->a2;
}

/* Highpass */
void    tHighpass_init(tHighpass* const ft, float freq)
{
 8007030:	b510      	push	{r4, lr}
 8007032:	ed2d 8b02 	vpush	{d8}
 8007036:	4604      	mov	r4, r0
 8007038:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) leaf_alloc(sizeof(_tHighpass));
 800703c:	2010      	movs	r0, #16
 800703e:	f000 f93d 	bl	80072bc <leaf_alloc>
 8007042:	6020      	str	r0, [r4, #0]
    
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 8007044:	4b09      	ldr	r3, [pc, #36]	; (800706c <tHighpass_init+0x3c>)
 8007046:	edd3 7a03 	vldr	s15, [r3, #12]
 800704a:	ee27 7a88 	vmul.f32	s14, s15, s16
 800704e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007052:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007056:	edc0 7a02 	vstr	s15, [r0, #8]
    f->ys = 0.0f;
 800705a:	2300      	movs	r3, #0
 800705c:	6043      	str	r3, [r0, #4]
    f->xs = 0.0f;
 800705e:	6003      	str	r3, [r0, #0]
    
    f->frequency = freq;
 8007060:	ed80 8a03 	vstr	s16, [r0, #12]
}
 8007064:	ecbd 8b02 	vpop	{d8}
 8007068:	bd10      	pop	{r4, pc}
 800706a:	bf00      	nop
 800706c:	20001c9c 	.word	0x20001c9c

08007070 <tHighpass_tick>:
}

// From JOS DC Blocker
float   tHighpass_tick(tHighpass* const ft, float x)
{
    _tHighpass* f = *ft;
 8007070:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 8007072:	edd3 7a00 	vldr	s15, [r3]
 8007076:	ee70 7a67 	vsub.f32	s15, s0, s15
 800707a:	ed93 7a02 	vldr	s14, [r3, #8]
 800707e:	edd3 6a01 	vldr	s13, [r3, #4]
 8007082:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007086:	ee77 7a87 	vadd.f32	s15, s15, s14
 800708a:	edc3 7a01 	vstr	s15, [r3, #4]
    f->xs = x;
 800708e:	ed83 0a00 	vstr	s0, [r3]
    return f->ys;
}
 8007092:	eeb0 0a67 	vmov.f32	s0, s15
 8007096:	4770      	bx	lr

08007098 <fastexpf>:
    return alias.f;
}


float fastexpf(float x) {
  x = 1.0f + (x * 0.0009765625f);
 8007098:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80070d4 <fastexpf+0x3c>
 800709c:	ee20 0a27 	vmul.f32	s0, s0, s15
 80070a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80070a4:	ee30 0a27 	vadd.f32	s0, s0, s15
  x *= x; x *= x; x *= x; x *= x;
 80070a8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80070ac:	ee20 0a00 	vmul.f32	s0, s0, s0
 80070b0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80070b4:	ee20 0a00 	vmul.f32	s0, s0, s0
  x *= x; x *= x; x *= x; x *= x;
 80070b8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80070bc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80070c0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80070c4:	ee20 0a00 	vmul.f32	s0, s0, s0
  x *= x; x *= x;
 80070c8:	ee20 0a00 	vmul.f32	s0, s0, s0
  return x;
}
 80070cc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	3a800000 	.word	0x3a800000

080070d8 <LEAF_frequencyToMidi>:
	return out / amp ;
}
#endif

float LEAF_frequencyToMidi(float f)
{
 80070d8:	b508      	push	{r3, lr}
	return (69.0f + 12.0f * log2(f * INV_440));
 80070da:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8007118 <LEAF_frequencyToMidi+0x40>
 80070de:	ee20 0a27 	vmul.f32	s0, s0, s15
 80070e2:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80070e6:	f000 fd8f 	bl	8007c08 <log>
 80070ea:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8007108 <LEAF_frequencyToMidi+0x30>
 80070ee:	ee80 6b07 	vdiv.f64	d6, d0, d7
 80070f2:	eeb2 7b08 	vmov.f64	d7, #40	; 0x41400000  12.0
 80070f6:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8007110 <LEAF_frequencyToMidi+0x38>
 80070fa:	ee06 0b07 	vmla.f64	d0, d6, d7
}
 80070fe:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007102:	bd08      	pop	{r3, pc}
 8007104:	f3af 8000 	nop.w
 8007108:	fefa39ef 	.word	0xfefa39ef
 800710c:	3fe62e42 	.word	0x3fe62e42
 8007110:	00000000 	.word	0x00000000
 8007114:	40514000 	.word	0x40514000
 8007118:	3b14f209 	.word	0x3b14f209

0800711c <LEAF_clip>:
}

float   LEAF_clip(float min, float val, float max) 
	{
    
    if (val < min) {
 800711c:	eef4 0ac0 	vcmpe.f32	s1, s0
 8007120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007124:	d406      	bmi.n	8007134 <LEAF_clip+0x18>
        return min;
    } else if (val > max) {
 8007126:	eef4 0ac1 	vcmpe.f32	s1, s2
 800712a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800712e:	dc02      	bgt.n	8007136 <LEAF_clip+0x1a>
        return max;
    } else {
        return val;
 8007130:	eeb0 0a60 	vmov.f32	s0, s1
    }
}
 8007134:	4770      	bx	lr
        return max;
 8007136:	eeb0 0a41 	vmov.f32	s0, s2
 800713a:	4770      	bx	lr

0800713c <mtof>:

#define LOGTEN 2.302585092994

float mtof(float f)
{
    if (f <= -1500.0f) return(0);
 800713c:	eddf 7a10 	vldr	s15, [pc, #64]	; 8007180 <mtof+0x44>
 8007140:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007148:	d917      	bls.n	800717a <mtof+0x3e>
{
 800714a:	b508      	push	{r3, lr}
    else if (f > 1499.0f) return(mtof(1499.0f));
 800714c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007184 <mtof+0x48>
 8007150:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007158:	dc0a      	bgt.n	8007170 <mtof+0x34>
    else return (8.17579891564f * expf(0.0577622650f * f));
 800715a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8007188 <mtof+0x4c>
 800715e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007162:	f000 fa91 	bl	8007688 <expf>
 8007166:	eddf 7a09 	vldr	s15, [pc, #36]	; 800718c <mtof+0x50>
 800716a:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 800716e:	bd08      	pop	{r3, pc}
    else if (f > 1499.0f) return(mtof(1499.0f));
 8007170:	eeb0 0a67 	vmov.f32	s0, s15
 8007174:	f7ff ffe2 	bl	800713c <mtof>
 8007178:	e7f9      	b.n	800716e <mtof+0x32>
    if (f <= -1500.0f) return(0);
 800717a:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8007190 <mtof+0x54>
}
 800717e:	4770      	bx	lr
 8007180:	c4bb8000 	.word	0xc4bb8000
 8007184:	44bb6000 	.word	0x44bb6000
 8007188:	3d6c9820 	.word	0x3d6c9820
 800718c:	4102d013 	.word	0x4102d013
 8007190:	00000000 	.word	0x00000000

08007194 <faster_mtof>:
{
    return (8.17579891564f * fastexpf(0.0577622650f * f));
}

float faster_mtof(float f)
{
 8007194:	b508      	push	{r3, lr}
    return (8.17579891564f * fastexpf(0.0577622650f * f));
 8007196:	eddf 7a05 	vldr	s15, [pc, #20]	; 80071ac <faster_mtof+0x18>
 800719a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800719e:	f7ff ff7b 	bl	8007098 <fastexpf>
}
 80071a2:	eddf 7a03 	vldr	s15, [pc, #12]	; 80071b0 <faster_mtof+0x1c>
 80071a6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80071aa:	bd08      	pop	{r3, pc}
 80071ac:	3d6c9820 	.word	0x3d6c9820
 80071b0:	4102d013 	.word	0x4102d013

080071b4 <atodb>:
    return (expf((LOGTEN * 0.05f) * (f-100.0f)));
}


float atodb(float a)
{
 80071b4:	b508      	push	{r3, lr}
	return 20.0f*log10f(a);
 80071b6:	f000 fd95 	bl	8007ce4 <log10f>
}
 80071ba:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 80071be:	ee20 0a27 	vmul.f32	s0, s0, s15
 80071c2:	bd08      	pop	{r3, pc}

080071c4 <mpool_create>:

/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
 80071c4:	b410      	push	{r4}
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 80071c6:	4c0e      	ldr	r4, [pc, #56]	; (8007200 <mpool_create+0x3c>)
 80071c8:	2310      	movs	r3, #16
 80071ca:	62e3      	str	r3, [r4, #44]	; 0x2c
    
    pool->mpool = (void*)memory;
 80071cc:	6010      	str	r0, [r2, #0]
    pool->usize  = 0;
 80071ce:	2300      	movs	r3, #0
 80071d0:	6053      	str	r3, [r2, #4]
    pool->msize  = size;
 80071d2:	6091      	str	r1, [r2, #8]
    
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 80071d4:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80071d6:	1b09      	subs	r1, r1, r4
}

static inline mpool_node_t* create_node(void* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + leaf.header_size;
 80071d8:	4404      	add	r4, r0
 80071da:	6004      	str	r4, [r0, #0]
    node->next = next;
 80071dc:	6043      	str	r3, [r0, #4]
    node->prev = prev;
 80071de:	6083      	str	r3, [r0, #8]
    node->size = size;
 80071e0:	60c1      	str	r1, [r0, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 80071e2:	60d0      	str	r0, [r2, #12]
    for (int i = 0; i < pool->head->size; i++)
 80071e4:	e005      	b.n	80071f2 <mpool_create+0x2e>
        memory[i+leaf.header_size]=0;
 80071e6:	4906      	ldr	r1, [pc, #24]	; (8007200 <mpool_create+0x3c>)
 80071e8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80071ea:	4419      	add	r1, r3
 80071ec:	2400      	movs	r4, #0
 80071ee:	5444      	strb	r4, [r0, r1]
    for (int i = 0; i < pool->head->size; i++)
 80071f0:	3301      	adds	r3, #1
 80071f2:	68d1      	ldr	r1, [r2, #12]
 80071f4:	68c9      	ldr	r1, [r1, #12]
 80071f6:	4299      	cmp	r1, r3
 80071f8:	d8f5      	bhi.n	80071e6 <mpool_create+0x22>
}
 80071fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071fe:	4770      	bx	lr
 8007200:	20001c9c 	.word	0x20001c9c

08007204 <leaf_pool_init>:
{
 8007204:	b510      	push	{r4, lr}
    mpool_create(memory, size, &leaf._mempool);
 8007206:	4c03      	ldr	r4, [pc, #12]	; (8007214 <leaf_pool_init+0x10>)
 8007208:	4622      	mov	r2, r4
 800720a:	f7ff ffdb 	bl	80071c4 <mpool_create>
    leaf.mempool = &leaf._mempool;
 800720e:	f844 4c04 	str.w	r4, [r4, #-4]
}
 8007212:	bd10      	pop	{r4, pc}
 8007214:	20001cb8 	.word	0x20001cb8

08007218 <mpool_alloc>:
    if (pool->head == NULL) return NULL;
 8007218:	68cb      	ldr	r3, [r1, #12]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d049      	beq.n	80072b2 <mpool_alloc+0x9a>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 800721e:	3007      	adds	r0, #7
 8007220:	f020 0007 	bic.w	r0, r0, #7
    while (node_to_alloc->size < size_to_alloc)
 8007224:	68da      	ldr	r2, [r3, #12]
 8007226:	4282      	cmp	r2, r0
 8007228:	d204      	bcs.n	8007234 <mpool_alloc+0x1c>
        node_to_alloc = node_to_alloc->next;
 800722a:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL) return NULL;
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1f9      	bne.n	8007224 <mpool_alloc+0xc>
 8007230:	2000      	movs	r0, #0
}
 8007232:	4770      	bx	lr
{
 8007234:	b4f0      	push	{r4, r5, r6, r7}
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8007236:	1a15      	subs	r5, r2, r0
    node_to_alloc->size = size_to_alloc;
 8007238:	60d8      	str	r0, [r3, #12]
    if (leftover > leaf.header_size)
 800723a:	4c1f      	ldr	r4, [pc, #124]	; (80072b8 <mpool_alloc+0xa0>)
 800723c:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 800723e:	42ac      	cmp	r4, r5
 8007240:	d229      	bcs.n	8007296 <mpool_alloc+0x7e>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8007242:	680e      	ldr	r6, [r1, #0]
 8007244:	1b9a      	subs	r2, r3, r6
        offset += leaf.header_size + node_to_alloc->size;
 8007246:	4420      	add	r0, r4
 8007248:	4410      	add	r0, r2
        new_node = create_node(&pool->mpool[offset],
 800724a:	1832      	adds	r2, r6, r0
                               node_to_alloc->next,
 800724c:	f8d3 c004 	ldr.w	ip, [r3, #4]
                               node_to_alloc->prev,
 8007250:	689f      	ldr	r7, [r3, #8]
        new_node = create_node(&pool->mpool[offset],
 8007252:	1b2d      	subs	r5, r5, r4
    node->pool = block_location + leaf.header_size;
 8007254:	4414      	add	r4, r2
 8007256:	5034      	str	r4, [r6, r0]
    node->next = next;
 8007258:	f8c2 c004 	str.w	ip, [r2, #4]
    node->prev = prev;
 800725c:	6097      	str	r7, [r2, #8]
    node->size = size;
 800725e:	60d5      	str	r5, [r2, #12]
    if (pool->head == node_to_alloc)
 8007260:	68c8      	ldr	r0, [r1, #12]
 8007262:	4298      	cmp	r0, r3
 8007264:	d01a      	beq.n	800729c <mpool_alloc+0x84>
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 8007266:	685a      	ldr	r2, [r3, #4]
 8007268:	b10a      	cbz	r2, 800726e <mpool_alloc+0x56>
    {
        // Close the link
        node->next->prev = node->prev;
 800726a:	6898      	ldr	r0, [r3, #8]
 800726c:	6090      	str	r0, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 800726e:	689a      	ldr	r2, [r3, #8]
 8007270:	b10a      	cbz	r2, 8007276 <mpool_alloc+0x5e>
    {
        // Close the link
        node->prev->next = node->next;
 8007272:	6858      	ldr	r0, [r3, #4]
 8007274:	6050      	str	r0, [r2, #4]
    }
    
    node->next = NULL;
 8007276:	2200      	movs	r2, #0
 8007278:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 800727a:	609a      	str	r2, [r3, #8]
    pool->usize += leaf.header_size + node_to_alloc->size;
 800727c:	4c0e      	ldr	r4, [pc, #56]	; (80072b8 <mpool_alloc+0xa0>)
 800727e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007280:	68d8      	ldr	r0, [r3, #12]
 8007282:	4410      	add	r0, r2
 8007284:	684a      	ldr	r2, [r1, #4]
 8007286:	4402      	add	r2, r0
 8007288:	604a      	str	r2, [r1, #4]
    if (leaf.clearOnAllocation > 0)
 800728a:	6962      	ldr	r2, [r4, #20]
 800728c:	2a00      	cmp	r2, #0
 800728e:	dd0d      	ble.n	80072ac <mpool_alloc+0x94>
        char* new_pool = (char*)node_to_alloc->pool;
 8007290:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8007292:	2200      	movs	r2, #0
 8007294:	e007      	b.n	80072a6 <mpool_alloc+0x8e>
        node_to_alloc->size += leftover;
 8007296:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 8007298:	685a      	ldr	r2, [r3, #4]
 800729a:	e7e1      	b.n	8007260 <mpool_alloc+0x48>
        pool->head = new_node;
 800729c:	60ca      	str	r2, [r1, #12]
 800729e:	e7e2      	b.n	8007266 <mpool_alloc+0x4e>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80072a0:	2100      	movs	r1, #0
 80072a2:	5481      	strb	r1, [r0, r2]
 80072a4:	3201      	adds	r2, #1
 80072a6:	68d9      	ldr	r1, [r3, #12]
 80072a8:	4291      	cmp	r1, r2
 80072aa:	d8f9      	bhi.n	80072a0 <mpool_alloc+0x88>
    return node_to_alloc->pool;
 80072ac:	6818      	ldr	r0, [r3, #0]
}
 80072ae:	bcf0      	pop	{r4, r5, r6, r7}
 80072b0:	4770      	bx	lr
    if (pool->head == NULL) return NULL;
 80072b2:	2000      	movs	r0, #0
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	20001c9c 	.word	0x20001c9c

080072bc <leaf_alloc>:
{
 80072bc:	b508      	push	{r3, lr}
    void* block = mpool_alloc(size, &leaf._mempool);
 80072be:	4902      	ldr	r1, [pc, #8]	; (80072c8 <leaf_alloc+0xc>)
 80072c0:	f7ff ffaa 	bl	8007218 <mpool_alloc>
}
 80072c4:	bd08      	pop	{r3, pc}
 80072c6:	bf00      	nop
 80072c8:	20001cb8 	.word	0x20001cb8

080072cc <tMempool_initToPool>:
{
    tMempool_freeFromPool(mp, &leaf.mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
 80072cc:	b570      	push	{r4, r5, r6, lr}
 80072ce:	4606      	mov	r6, r0
 80072d0:	460c      	mov	r4, r1
 80072d2:	4615      	mov	r5, r2
    _tMempool* mm = *mem;
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 80072d4:	6819      	ldr	r1, [r3, #0]
 80072d6:	2010      	movs	r0, #16
 80072d8:	f7ff ff9e 	bl	8007218 <mpool_alloc>
 80072dc:	4602      	mov	r2, r0
 80072de:	6030      	str	r0, [r6, #0]
    
    mpool_create (memory, size, m);
 80072e0:	4629      	mov	r1, r5
 80072e2:	4620      	mov	r0, r4
 80072e4:	f7ff ff6e 	bl	80071c4 <mpool_create>
}
 80072e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080072ec <tMempool_init>:
{
 80072ec:	b508      	push	{r3, lr}
    tMempool_initToPool(mp, memory, size, &leaf.mempool);
 80072ee:	4b02      	ldr	r3, [pc, #8]	; (80072f8 <tMempool_init+0xc>)
 80072f0:	f7ff ffec 	bl	80072cc <tMempool_initToPool>
}
 80072f4:	bd08      	pop	{r3, pc}
 80072f6:	bf00      	nop
 80072f8:	20001cb4 	.word	0x20001cb4

080072fc <tCycle_initToPool>:
{
    tCycle_freeFromPool(cy, &leaf.mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
 80072fc:	b510      	push	{r4, lr}
 80072fe:	4604      	mov	r4, r0
    _tMempool* m = *mp;
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8007300:	6809      	ldr	r1, [r1, #0]
 8007302:	200c      	movs	r0, #12
 8007304:	f7ff ff88 	bl	8007218 <mpool_alloc>
 8007308:	6020      	str	r0, [r4, #0]
    
    c->inc      =  0.0f;
 800730a:	2300      	movs	r3, #0
 800730c:	6043      	str	r3, [r0, #4]
    c->phase    =  0.0f;
 800730e:	6003      	str	r3, [r0, #0]

}
 8007310:	bd10      	pop	{r4, pc}
	...

08007314 <tCycle_init>:
{
 8007314:	b508      	push	{r3, lr}
    tCycle_initToPool(cy, &leaf.mempool);
 8007316:	4902      	ldr	r1, [pc, #8]	; (8007320 <tCycle_init+0xc>)
 8007318:	f7ff fff0 	bl	80072fc <tCycle_initToPool>
}
 800731c:	bd08      	pop	{r3, pc}
 800731e:	bf00      	nop
 8007320:	20001cb4 	.word	0x20001cb4

08007324 <tCycle_setFreq>:
    mpool_free(c, m);
}

void     tCycle_setFreq(tCycle* const cy, float freq)
{
    _tCycle* c = *cy;
 8007324:	6803      	ldr	r3, [r0, #0]
    
    if (freq < 0.0f) c->freq = 0.0f;
 8007326:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800732a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800732e:	d410      	bmi.n	8007352 <tCycle_setFreq+0x2e>
    else if (freq > 20480.0f) c->freq = 20480.0f;
 8007330:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8007360 <tCycle_setFreq+0x3c>
 8007334:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800733c:	dc0c      	bgt.n	8007358 <tCycle_setFreq+0x34>
    else c->freq  = freq;
 800733e:	ed83 0a02 	vstr	s0, [r3, #8]

    c->inc = freq * leaf.invSampleRate;
 8007342:	4a08      	ldr	r2, [pc, #32]	; (8007364 <tCycle_setFreq+0x40>)
 8007344:	edd2 7a01 	vldr	s15, [r2, #4]
 8007348:	ee27 0a80 	vmul.f32	s0, s15, s0
 800734c:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8007350:	4770      	bx	lr
    if (freq < 0.0f) c->freq = 0.0f;
 8007352:	2200      	movs	r2, #0
 8007354:	609a      	str	r2, [r3, #8]
 8007356:	e7f4      	b.n	8007342 <tCycle_setFreq+0x1e>
    else if (freq > 20480.0f) c->freq = 20480.0f;
 8007358:	edc3 7a02 	vstr	s15, [r3, #8]
 800735c:	e7f1      	b.n	8007342 <tCycle_setFreq+0x1e>
 800735e:	bf00      	nop
 8007360:	46a00000 	.word	0x46a00000
 8007364:	20001c9c 	.word	0x20001c9c

08007368 <tCycle_tick>:

//need to check bounds and wrap table properly to allow through-zero FM
float   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
 8007368:	6803      	ldr	r3, [r0, #0]
    float fracPart;
    float samp0;
    float samp1;
    
    // Phasor increment
    c->phase += c->inc;
 800736a:	ed93 7a01 	vldr	s14, [r3, #4]
 800736e:	edd3 7a00 	vldr	s15, [r3]
 8007372:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007376:	edc3 7a00 	vstr	s15, [r3]
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 800737a:	e005      	b.n	8007388 <tCycle_tick+0x20>
 800737c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007380:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007384:	edc3 7a00 	vstr	s15, [r3]
 8007388:	edd3 7a00 	vldr	s15, [r3]
 800738c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007390:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007398:	daf0      	bge.n	800737c <tCycle_tick+0x14>
 800739a:	e005      	b.n	80073a8 <tCycle_tick+0x40>
    while (c->phase < 0.0f) c->phase += 1.0f;
 800739c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80073a4:	edc3 7a00 	vstr	s15, [r3]
 80073a8:	edd3 7a00 	vldr	s15, [r3]
 80073ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80073b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073b4:	d4f2      	bmi.n	800739c <tCycle_tick+0x34>

    // Wavetable synthesis

	temp = SINE_TABLE_SIZE * c->phase;
 80073b6:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80073fc <tCycle_tick+0x94>
 80073ba:	ee67 7a80 	vmul.f32	s15, s15, s0
	intPart = (int)temp;
 80073be:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80073c2:	ee17 3a10 	vmov	r3, s14
	fracPart = temp - (float)intPart;
 80073c6:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 80073ca:	ee77 7ac0 	vsub.f32	s15, s15, s0
	samp0 = __leaf_table_sinewave[intPart];
 80073ce:	4a0c      	ldr	r2, [pc, #48]	; (8007400 <tCycle_tick+0x98>)
 80073d0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80073d4:	ed92 0a00 	vldr	s0, [r2]
	if (++intPart >= SINE_TABLE_SIZE) intPart = 0;
 80073d8:	3301      	adds	r3, #1
 80073da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073de:	db00      	blt.n	80073e2 <tCycle_tick+0x7a>
 80073e0:	2300      	movs	r3, #0
	samp1 = __leaf_table_sinewave[intPart];
 80073e2:	4a07      	ldr	r2, [pc, #28]	; (8007400 <tCycle_tick+0x98>)
 80073e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80073e8:	ed93 7a00 	vldr	s14, [r3]

    return (samp0 + (samp1 - samp0) * fracPart);
 80073ec:	ee37 7a40 	vsub.f32	s14, s14, s0
 80073f0:	ee67 7a27 	vmul.f32	s15, s14, s15

}
 80073f4:	ee37 0a80 	vadd.f32	s0, s15, s0
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	45000000 	.word	0x45000000
 8007400:	08008e58 	.word	0x08008e58

08007404 <tSawtooth_setFreq>:
    mpool_free(c, m);
}

void    tSawtooth_setFreq(tSawtooth* const cy, float freq)
{
    _tSawtooth* c = *cy;
 8007404:	6803      	ldr	r3, [r0, #0]
    
    if (freq < 0.0f) c->freq = 0.0f;
 8007406:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800740a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800740e:	d409      	bmi.n	8007424 <tSawtooth_setFreq+0x20>
    else if (freq > 20480.0f) c->freq = 20480.0f;
 8007410:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8007480 <tSawtooth_setFreq+0x7c>
 8007414:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800741c:	dd16      	ble.n	800744c <tSawtooth_setFreq+0x48>
 800741e:	edc3 7a02 	vstr	s15, [r3, #8]
 8007422:	e001      	b.n	8007428 <tSawtooth_setFreq+0x24>
    if (freq < 0.0f) c->freq = 0.0f;
 8007424:	2200      	movs	r2, #0
 8007426:	609a      	str	r2, [r3, #8]
    else c->freq  = freq;
    
    c->inc = c->freq * leaf.invSampleRate;
 8007428:	edd3 7a02 	vldr	s15, [r3, #8]
 800742c:	4a15      	ldr	r2, [pc, #84]	; (8007484 <tSawtooth_setFreq+0x80>)
 800742e:	ed92 7a01 	vldr	s14, [r2, #4]
 8007432:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007436:	ed83 7a01 	vstr	s14, [r3, #4]
    
    c->w = c->freq * INV_20;
 800743a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8007488 <tSawtooth_setFreq+0x84>
 800743e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007442:	edc3 7a04 	vstr	s15, [r3, #16]
    for (c->oct = 0; c->w > 2.0f; c->oct++)
 8007446:	2200      	movs	r2, #0
 8007448:	731a      	strb	r2, [r3, #12]
 800744a:	e00b      	b.n	8007464 <tSawtooth_setFreq+0x60>
    else c->freq  = freq;
 800744c:	ed83 0a02 	vstr	s0, [r3, #8]
 8007450:	e7ea      	b.n	8007428 <tSawtooth_setFreq+0x24>
    {
        c->w = 0.5f * c->w;
 8007452:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007456:	ee67 7a87 	vmul.f32	s15, s15, s14
 800745a:	edc3 7a04 	vstr	s15, [r3, #16]
    for (c->oct = 0; c->w > 2.0f; c->oct++)
 800745e:	7b1a      	ldrb	r2, [r3, #12]
 8007460:	3201      	adds	r2, #1
 8007462:	731a      	strb	r2, [r3, #12]
 8007464:	edd3 7a04 	vldr	s15, [r3, #16]
 8007468:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800746c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007474:	dced      	bgt.n	8007452 <tSawtooth_setFreq+0x4e>
    }
    c->w = 2.0f - c->w;
 8007476:	ee77 7a67 	vsub.f32	s15, s14, s15
 800747a:	edc3 7a04 	vstr	s15, [r3, #16]
}
 800747e:	4770      	bx	lr
 8007480:	46a00000 	.word	0x46a00000
 8007484:	20001c9c 	.word	0x20001c9c
 8007488:	3d4ccccd 	.word	0x3d4ccccd

0800748c <tSawtooth_initToPool>:
{
 800748c:	b510      	push	{r4, lr}
 800748e:	4604      	mov	r4, r0
    _tSawtooth* c = *cy = (_tSawtooth*) mpool_alloc(sizeof(_tSawtooth), m);
 8007490:	6809      	ldr	r1, [r1, #0]
 8007492:	2014      	movs	r0, #20
 8007494:	f7ff fec0 	bl	8007218 <mpool_alloc>
 8007498:	6020      	str	r0, [r4, #0]
    c->inc      = 0.0f;
 800749a:	2300      	movs	r3, #0
 800749c:	6043      	str	r3, [r0, #4]
    c->phase    = 0.0f;
 800749e:	6003      	str	r3, [r0, #0]
    tSawtooth_setFreq(cy, 220);
 80074a0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80074ac <tSawtooth_initToPool+0x20>
 80074a4:	4620      	mov	r0, r4
 80074a6:	f7ff ffad 	bl	8007404 <tSawtooth_setFreq>
}
 80074aa:	bd10      	pop	{r4, pc}
 80074ac:	435c0000 	.word	0x435c0000

080074b0 <tSawtooth_init>:
{
 80074b0:	b508      	push	{r3, lr}
    tSawtooth_initToPool(cy, &leaf.mempool);
 80074b2:	4902      	ldr	r1, [pc, #8]	; (80074bc <tSawtooth_init+0xc>)
 80074b4:	f7ff ffea 	bl	800748c <tSawtooth_initToPool>
}
 80074b8:	bd08      	pop	{r3, pc}
 80074ba:	bf00      	nop
 80074bc:	20001cb4 	.word	0x20001cb4

080074c0 <tSawtooth_tick>:

float   tSawtooth_tick(tSawtooth* const cy)
{
 80074c0:	b410      	push	{r4}
    _tSawtooth* c = *cy;
 80074c2:	6802      	ldr	r2, [r0, #0]
    
    // Phasor increment
    c->phase += c->inc;
 80074c4:	ed92 7a01 	vldr	s14, [r2, #4]
 80074c8:	edd2 7a00 	vldr	s15, [r2]
 80074cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074d0:	edc2 7a00 	vstr	s15, [r2]
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 80074d4:	e005      	b.n	80074e2 <tSawtooth_tick+0x22>
 80074d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80074de:	edc2 7a00 	vstr	s15, [r2]
 80074e2:	edd2 7a00 	vldr	s15, [r2]
 80074e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074f2:	daf0      	bge.n	80074d6 <tSawtooth_tick+0x16>
 80074f4:	e005      	b.n	8007502 <tSawtooth_tick+0x42>
    while (c->phase < 0.0f) c->phase += 1.0f;
 80074f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074fe:	edc2 7a00 	vstr	s15, [r2]
 8007502:	edd2 7a00 	vldr	s15, [r2]
 8007506:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800750a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800750e:	d4f2      	bmi.n	80074f6 <tSawtooth_tick+0x36>
    
    float out = 0.0f;
    
    int idx = (int)(c->phase * SAW_TABLE_SIZE);
 8007510:	eeb0 7a67 	vmov.f32	s14, s15
 8007514:	eebe 7aea 	vcvt.s32.f32	s14, s14, #11
 8007518:	ee17 3a10 	vmov	r3, s14
    
    // Wavetable synthesis
    out = __leaf_table_sawtooth[c->oct+1][idx] +
 800751c:	7b14      	ldrb	r4, [r2, #12]
 800751e:	1c61      	adds	r1, r4, #1
 8007520:	480b      	ldr	r0, [pc, #44]	; (8007550 <tSawtooth_tick+0x90>)
 8007522:	eb03 21c1 	add.w	r1, r3, r1, lsl #11
 8007526:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800752a:	ed91 0a00 	vldr	s0, [r1]
         (__leaf_table_sawtooth[c->oct][idx] - __leaf_table_sawtooth[c->oct+1][idx]) * c->w;
 800752e:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
 8007532:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007536:	edd3 7a00 	vldr	s15, [r3]
 800753a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800753e:	ed92 7a04 	vldr	s14, [r2, #16]
 8007542:	ee67 7a87 	vmul.f32	s15, s15, s14
    
    return out;
}
 8007546:	ee30 0a27 	vadd.f32	s0, s0, s15
 800754a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	080bae58 	.word	0x080bae58

08007554 <tNoise_initToPool>:
{
    tNoise_freeFromPool(ns, &leaf.mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
 8007554:	b538      	push	{r3, r4, r5, lr}
 8007556:	4605      	mov	r5, r0
 8007558:	460c      	mov	r4, r1
    _tMempool* m = *mp;
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 800755a:	6811      	ldr	r1, [r2, #0]
 800755c:	2014      	movs	r0, #20
 800755e:	f7ff fe5b 	bl	8007218 <mpool_alloc>
 8007562:	6028      	str	r0, [r5, #0]
    
    n->type = type;
 8007564:	7004      	strb	r4, [r0, #0]
    n->rand = leaf.random;
 8007566:	4b02      	ldr	r3, [pc, #8]	; (8007570 <tNoise_initToPool+0x1c>)
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	6103      	str	r3, [r0, #16]
}
 800756c:	bd38      	pop	{r3, r4, r5, pc}
 800756e:	bf00      	nop
 8007570:	20001c9c 	.word	0x20001c9c

08007574 <tNoise_init>:
{
 8007574:	b508      	push	{r3, lr}
    tNoise_initToPool(ns, type, &leaf.mempool);
 8007576:	4a02      	ldr	r2, [pc, #8]	; (8007580 <tNoise_init+0xc>)
 8007578:	f7ff ffec 	bl	8007554 <tNoise_initToPool>
}
 800757c:	bd08      	pop	{r3, pc}
 800757e:	bf00      	nop
 8007580:	20001cb4 	.word	0x20001cb4

08007584 <LEAF_init>:

LEAF leaf;

void LEAF_init(float sr, int blocksize, char* memory, size_t memorysize, float(*random)(void))

{
 8007584:	b538      	push	{r3, r4, r5, lr}
 8007586:	ed2d 8b02 	vpush	{d8}
 800758a:	eeb0 8a40 	vmov.f32	s16, s0
 800758e:	4605      	mov	r5, r0
 8007590:	4608      	mov	r0, r1
 8007592:	461c      	mov	r4, r3
    leaf_pool_init(memory, memorysize);
 8007594:	4611      	mov	r1, r2
 8007596:	f7ff fe35 	bl	8007204 <leaf_pool_init>
    
    leaf.sampleRate = sr;
 800759a:	4b0b      	ldr	r3, [pc, #44]	; (80075c8 <LEAF_init+0x44>)
 800759c:	ed83 8a00 	vstr	s16, [r3]

    leaf.blockSize = blocksize;
 80075a0:	609d      	str	r5, [r3, #8]
    
    leaf.invSampleRate = 1.0f/sr;
 80075a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075a6:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80075aa:	edc3 7a01 	vstr	s15, [r3, #4]
    
    leaf.twoPiTimesInvSampleRate = leaf.invSampleRate * TWO_PI;
 80075ae:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80075cc <LEAF_init+0x48>
 80075b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80075b6:	edc3 7a03 	vstr	s15, [r3, #12]

    leaf.random = random;
 80075ba:	611c      	str	r4, [r3, #16]
    
    leaf.clearOnAllocation = 0;
 80075bc:	2200      	movs	r2, #0
 80075be:	615a      	str	r2, [r3, #20]
}
 80075c0:	ecbd 8b02 	vpop	{d8}
 80075c4:	bd38      	pop	{r3, r4, r5, pc}
 80075c6:	bf00      	nop
 80075c8:	20001c9c 	.word	0x20001c9c
 80075cc:	40c90fdb 	.word	0x40c90fdb

080075d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80075d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007608 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80075d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80075d6:	e003      	b.n	80075e0 <LoopCopyDataInit>

080075d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80075d8:	4b0c      	ldr	r3, [pc, #48]	; (800760c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80075da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80075dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80075de:	3104      	adds	r1, #4

080075e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80075e0:	480b      	ldr	r0, [pc, #44]	; (8007610 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80075e2:	4b0c      	ldr	r3, [pc, #48]	; (8007614 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80075e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80075e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80075e8:	d3f6      	bcc.n	80075d8 <CopyDataInit>
  ldr  r2, =_sbss
 80075ea:	4a0b      	ldr	r2, [pc, #44]	; (8007618 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80075ec:	e002      	b.n	80075f4 <LoopFillZerobss>

080075ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80075ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80075f0:	f842 3b04 	str.w	r3, [r2], #4

080075f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80075f4:	4b09      	ldr	r3, [pc, #36]	; (800761c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80075f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80075f8:	d3f9      	bcc.n	80075ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80075fa:	f7ff f809 	bl	8006610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80075fe:	f000 f817 	bl	8007630 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007602:	f7fe fd65 	bl	80060d0 <main>
  bx  lr    
 8007606:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007608:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800760c:	08114cec 	.word	0x08114cec
  ldr  r0, =_sdata
 8007610:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007614:	200002f0 	.word	0x200002f0
  ldr  r2, =_sbss
 8007618:	200002f0 	.word	0x200002f0
  ldr  r3, = _ebss
 800761c:	20001ccc 	.word	0x20001ccc

08007620 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007620:	e7fe      	b.n	8007620 <ADC3_IRQHandler>
	...

08007624 <__errno>:
 8007624:	4b01      	ldr	r3, [pc, #4]	; (800762c <__errno+0x8>)
 8007626:	6818      	ldr	r0, [r3, #0]
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	20000288 	.word	0x20000288

08007630 <__libc_init_array>:
 8007630:	b570      	push	{r4, r5, r6, lr}
 8007632:	4e0d      	ldr	r6, [pc, #52]	; (8007668 <__libc_init_array+0x38>)
 8007634:	4c0d      	ldr	r4, [pc, #52]	; (800766c <__libc_init_array+0x3c>)
 8007636:	1ba4      	subs	r4, r4, r6
 8007638:	10a4      	asrs	r4, r4, #2
 800763a:	2500      	movs	r5, #0
 800763c:	42a5      	cmp	r5, r4
 800763e:	d109      	bne.n	8007654 <__libc_init_array+0x24>
 8007640:	4e0b      	ldr	r6, [pc, #44]	; (8007670 <__libc_init_array+0x40>)
 8007642:	4c0c      	ldr	r4, [pc, #48]	; (8007674 <__libc_init_array+0x44>)
 8007644:	f001 fbf0 	bl	8008e28 <_init>
 8007648:	1ba4      	subs	r4, r4, r6
 800764a:	10a4      	asrs	r4, r4, #2
 800764c:	2500      	movs	r5, #0
 800764e:	42a5      	cmp	r5, r4
 8007650:	d105      	bne.n	800765e <__libc_init_array+0x2e>
 8007652:	bd70      	pop	{r4, r5, r6, pc}
 8007654:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007658:	4798      	blx	r3
 800765a:	3501      	adds	r5, #1
 800765c:	e7ee      	b.n	800763c <__libc_init_array+0xc>
 800765e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007662:	4798      	blx	r3
 8007664:	3501      	adds	r5, #1
 8007666:	e7f2      	b.n	800764e <__libc_init_array+0x1e>
 8007668:	08114ce4 	.word	0x08114ce4
 800766c:	08114ce4 	.word	0x08114ce4
 8007670:	08114ce4 	.word	0x08114ce4
 8007674:	08114ce8 	.word	0x08114ce8

08007678 <memset>:
 8007678:	4402      	add	r2, r0
 800767a:	4603      	mov	r3, r0
 800767c:	4293      	cmp	r3, r2
 800767e:	d100      	bne.n	8007682 <memset+0xa>
 8007680:	4770      	bx	lr
 8007682:	f803 1b01 	strb.w	r1, [r3], #1
 8007686:	e7f9      	b.n	800767c <memset+0x4>

08007688 <expf>:
 8007688:	ee10 2a10 	vmov	r2, s0
 800768c:	f240 412a 	movw	r1, #1066	; 0x42a
 8007690:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8007694:	428b      	cmp	r3, r1
 8007696:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
 800769a:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800769e:	d92e      	bls.n	80076fe <expf+0x76>
 80076a0:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 80076a4:	d061      	beq.n	800776a <expf+0xe2>
 80076a6:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 80076aa:	d304      	bcc.n	80076b6 <expf+0x2e>
 80076ac:	ee30 0a00 	vadd.f32	s0, s0, s0
 80076b0:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 80076b4:	4770      	bx	lr
 80076b6:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8007770 <expf+0xe8>
 80076ba:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80076be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076c2:	dd04      	ble.n	80076ce <expf+0x46>
 80076c4:	2000      	movs	r0, #0
 80076c6:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 80076ca:	f001 b9a5 	b.w	8008a18 <__math_oflowf>
 80076ce:	eddf 7a29 	vldr	s15, [pc, #164]	; 8007774 <expf+0xec>
 80076d2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80076d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076da:	d504      	bpl.n	80076e6 <expf+0x5e>
 80076dc:	2000      	movs	r0, #0
 80076de:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 80076e2:	f001 b98d 	b.w	8008a00 <__math_uflowf>
 80076e6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007778 <expf+0xf0>
 80076ea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80076ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076f2:	d504      	bpl.n	80076fe <expf+0x76>
 80076f4:	2000      	movs	r0, #0
 80076f6:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 80076fa:	f001 b987 	b.w	8008a0c <__math_may_uflowf>
 80076fe:	491f      	ldr	r1, [pc, #124]	; (800777c <expf+0xf4>)
 8007700:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8007704:	ed91 5b4a 	vldr	d5, [r1, #296]	; 0x128
 8007708:	ed91 7b48 	vldr	d7, [r1, #288]	; 0x120
 800770c:	eeb0 4b47 	vmov.f64	d4, d7
 8007710:	eea5 4b06 	vfma.f64	d4, d5, d6
 8007714:	ec55 4b14 	vmov	r4, r5, d4
 8007718:	ee34 7b47 	vsub.f64	d7, d4, d7
 800771c:	f004 021f 	and.w	r2, r4, #31
 8007720:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8007724:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007728:	ed91 6b50 	vldr	d6, [r1, #320]	; 0x140
 800772c:	e9d2 4500 	ldrd	r4, r5, [r2]
 8007730:	eea6 0b07 	vfma.f64	d0, d6, d7
 8007734:	ee14 0a10 	vmov	r0, s8
 8007738:	ed91 5b4c 	vldr	d5, [r1, #304]	; 0x130
 800773c:	ed91 6b4e 	vldr	d6, [r1, #312]	; 0x138
 8007740:	f04f 0b00 	mov.w	fp, #0
 8007744:	eb1b 0204 	adds.w	r2, fp, r4
 8007748:	ea4f 3cc0 	mov.w	ip, r0, lsl #15
 800774c:	eb4c 0305 	adc.w	r3, ip, r5
 8007750:	eea5 6b07 	vfma.f64	d6, d5, d7
 8007754:	ee27 7b07 	vmul.f64	d7, d7, d7
 8007758:	eea6 0b07 	vfma.f64	d0, d6, d7
 800775c:	ec43 2b17 	vmov	d7, r2, r3
 8007760:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007764:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007768:	e7a2      	b.n	80076b0 <expf+0x28>
 800776a:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8007780 <expf+0xf8>
 800776e:	e79f      	b.n	80076b0 <expf+0x28>
 8007770:	42b17217 	.word	0x42b17217
 8007774:	c2cff1b4 	.word	0xc2cff1b4
 8007778:	c2ce8ecf 	.word	0xc2ce8ecf
 800777c:	08114578 	.word	0x08114578
 8007780:	00000000 	.word	0x00000000

08007784 <fabsf>:
 8007784:	ee10 3a10 	vmov	r3, s0
 8007788:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800778c:	ee00 3a10 	vmov	s0, r3
 8007790:	4770      	bx	lr
	...

08007794 <logf>:
 8007794:	ee10 3a10 	vmov	r3, s0
 8007798:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800779c:	b410      	push	{r4}
 800779e:	d057      	beq.n	8007850 <logf+0xbc>
 80077a0:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 80077a4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80077a8:	d31a      	bcc.n	80077e0 <logf+0x4c>
 80077aa:	005a      	lsls	r2, r3, #1
 80077ac:	d104      	bne.n	80077b8 <logf+0x24>
 80077ae:	2001      	movs	r0, #1
 80077b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077b4:	f001 b936 	b.w	8008a24 <__math_divzerof>
 80077b8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80077bc:	d045      	beq.n	800784a <logf+0xb6>
 80077be:	2b00      	cmp	r3, #0
 80077c0:	db02      	blt.n	80077c8 <logf+0x34>
 80077c2:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80077c6:	d303      	bcc.n	80077d0 <logf+0x3c>
 80077c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077cc:	f001 b93a 	b.w	8008a44 <__math_invalidf>
 80077d0:	eddf 7a21 	vldr	s15, [pc, #132]	; 8007858 <logf+0xc4>
 80077d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80077d8:	ee10 3a10 	vmov	r3, s0
 80077dc:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 80077e0:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 80077e4:	491d      	ldr	r1, [pc, #116]	; (800785c <logf+0xc8>)
 80077e6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80077ea:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 80077ee:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 80077f2:	0dd4      	lsrs	r4, r2, #23
 80077f4:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 80077f8:	05e4      	lsls	r4, r4, #23
 80077fa:	ed90 5b00 	vldr	d5, [r0]
 80077fe:	1b1b      	subs	r3, r3, r4
 8007800:	ee07 3a90 	vmov	s15, r3
 8007804:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007808:	eea5 6b07 	vfma.f64	d6, d5, d7
 800780c:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8007810:	ee26 3b06 	vmul.f64	d3, d6, d6
 8007814:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 8007818:	eea5 7b06 	vfma.f64	d7, d5, d6
 800781c:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8007820:	15d2      	asrs	r2, r2, #23
 8007822:	ed91 4b40 	vldr	d4, [r1, #256]	; 0x100
 8007826:	eea5 7b03 	vfma.f64	d7, d5, d3
 800782a:	eeb0 5b47 	vmov.f64	d5, d7
 800782e:	ed90 0b02 	vldr	d0, [r0, #8]
 8007832:	ee07 2a90 	vmov	s15, r2
 8007836:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800783a:	eea7 0b04 	vfma.f64	d0, d7, d4
 800783e:	ee30 0b06 	vadd.f64	d0, d0, d6
 8007842:	eea3 0b05 	vfma.f64	d0, d3, d5
 8007846:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800784a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800784e:	4770      	bx	lr
 8007850:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8007860 <logf+0xcc>
 8007854:	e7f9      	b.n	800784a <logf+0xb6>
 8007856:	bf00      	nop
 8007858:	4b000000 	.word	0x4b000000
 800785c:	081146c0 	.word	0x081146c0
 8007860:	00000000 	.word	0x00000000

08007864 <checkint>:
 8007864:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007868:	2b7e      	cmp	r3, #126	; 0x7e
 800786a:	dd10      	ble.n	800788e <checkint+0x2a>
 800786c:	2b96      	cmp	r3, #150	; 0x96
 800786e:	dc0c      	bgt.n	800788a <checkint+0x26>
 8007870:	2201      	movs	r2, #1
 8007872:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007876:	fa02 f303 	lsl.w	r3, r2, r3
 800787a:	1e5a      	subs	r2, r3, #1
 800787c:	4202      	tst	r2, r0
 800787e:	d106      	bne.n	800788e <checkint+0x2a>
 8007880:	4203      	tst	r3, r0
 8007882:	bf0c      	ite	eq
 8007884:	2002      	moveq	r0, #2
 8007886:	2001      	movne	r0, #1
 8007888:	4770      	bx	lr
 800788a:	2002      	movs	r0, #2
 800788c:	4770      	bx	lr
 800788e:	2000      	movs	r0, #0
 8007890:	4770      	bx	lr
 8007892:	0000      	movs	r0, r0
 8007894:	0000      	movs	r0, r0
	...

08007898 <powf>:
 8007898:	ee10 1a10 	vmov	r1, s0
 800789c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80078a0:	ee10 4a90 	vmov	r4, s1
 80078a4:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 80078a8:	0062      	lsls	r2, r4, #1
 80078aa:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80078ae:	eef0 4a60 	vmov.f32	s9, s1
 80078b2:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 80078b6:	4b92      	ldr	r3, [pc, #584]	; (8007b00 <powf+0x268>)
 80078b8:	d255      	bcs.n	8007966 <powf+0xce>
 80078ba:	4298      	cmp	r0, r3
 80078bc:	d855      	bhi.n	800796a <powf+0xd2>
 80078be:	2000      	movs	r0, #0
 80078c0:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 80078c4:	4a8f      	ldr	r2, [pc, #572]	; (8007b04 <powf+0x26c>)
 80078c6:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
 80078ca:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 80078ce:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 80078d2:	0ddb      	lsrs	r3, r3, #23
 80078d4:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 80078d8:	05db      	lsls	r3, r3, #23
 80078da:	ed94 6b00 	vldr	d6, [r4]
 80078de:	1ac9      	subs	r1, r1, r3
 80078e0:	ee07 1a90 	vmov	s15, r1
 80078e4:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 80078e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80078ec:	eea6 2b07 	vfma.f64	d2, d6, d7
 80078f0:	ed92 7b42 	vldr	d7, [r2, #264]	; 0x108
 80078f4:	ee22 6b02 	vmul.f64	d6, d2, d2
 80078f8:	eea2 7b05 	vfma.f64	d7, d2, d5
 80078fc:	15db      	asrs	r3, r3, #23
 80078fe:	ed94 5b02 	vldr	d5, [r4, #8]
 8007902:	ee00 3a10 	vmov	s0, r3
 8007906:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800790a:	ee30 0b05 	vadd.f64	d0, d0, d5
 800790e:	ed92 5b48 	vldr	d5, [r2, #288]	; 0x120
 8007912:	ed92 3b44 	vldr	d3, [r2, #272]	; 0x110
 8007916:	eea2 0b05 	vfma.f64	d0, d2, d5
 800791a:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 800791e:	eea2 5b03 	vfma.f64	d5, d2, d3
 8007922:	eea6 0b05 	vfma.f64	d0, d6, d5
 8007926:	ee26 6b06 	vmul.f64	d6, d6, d6
 800792a:	eea7 0b06 	vfma.f64	d0, d7, d6
 800792e:	eeb7 7ae4 	vcvt.f64.f32	d7, s9
 8007932:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007936:	ee10 3a90 	vmov	r3, s1
 800793a:	2500      	movs	r5, #0
 800793c:	0bda      	lsrs	r2, r3, #15
 800793e:	2300      	movs	r3, #0
 8007940:	b292      	uxth	r2, r2
 8007942:	f248 04be 	movw	r4, #32958	; 0x80be
 8007946:	429d      	cmp	r5, r3
 8007948:	bf08      	it	eq
 800794a:	4294      	cmpeq	r4, r2
 800794c:	f080 8094 	bcs.w	8007a78 <powf+0x1e0>
 8007950:	ed9f 7b65 	vldr	d7, [pc, #404]	; 8007ae8 <powf+0x250>
 8007954:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800795c:	dd76      	ble.n	8007a4c <powf+0x1b4>
 800795e:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8007962:	f001 b859 	b.w	8008a18 <__math_oflowf>
 8007966:	4298      	cmp	r0, r3
 8007968:	d92d      	bls.n	80079c6 <powf+0x12e>
 800796a:	b952      	cbnz	r2, 8007982 <powf+0xea>
 800796c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8007970:	005b      	lsls	r3, r3, #1
 8007972:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8007976:	f240 80ae 	bls.w	8007ad6 <powf+0x23e>
 800797a:	ee30 0a24 	vadd.f32	s0, s0, s9
 800797e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8007982:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8007986:	d105      	bne.n	8007994 <powf+0xfc>
 8007988:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800798c:	0064      	lsls	r4, r4, #1
 800798e:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8007992:	e7f0      	b.n	8007976 <powf+0xde>
 8007994:	004b      	lsls	r3, r1, #1
 8007996:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800799a:	d8ee      	bhi.n	800797a <powf+0xe2>
 800799c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80079a0:	d1eb      	bne.n	800797a <powf+0xe2>
 80079a2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80079a6:	f000 8096 	beq.w	8007ad6 <powf+0x23e>
 80079aa:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80079ae:	ea6f 0404 	mvn.w	r4, r4
 80079b2:	bf34      	ite	cc
 80079b4:	2300      	movcc	r3, #0
 80079b6:	2301      	movcs	r3, #1
 80079b8:	0fe4      	lsrs	r4, r4, #31
 80079ba:	42a3      	cmp	r3, r4
 80079bc:	f040 808e 	bne.w	8007adc <powf+0x244>
 80079c0:	ee24 0aa4 	vmul.f32	s0, s9, s9
 80079c4:	e7db      	b.n	800797e <powf+0xe6>
 80079c6:	004d      	lsls	r5, r1, #1
 80079c8:	1e6a      	subs	r2, r5, #1
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d91b      	bls.n	8007a06 <powf+0x16e>
 80079ce:	2900      	cmp	r1, #0
 80079d0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80079d4:	da0e      	bge.n	80079f4 <powf+0x15c>
 80079d6:	ee10 0a90 	vmov	r0, s1
 80079da:	f7ff ff43 	bl	8007864 <checkint>
 80079de:	2801      	cmp	r0, #1
 80079e0:	d108      	bne.n	80079f4 <powf+0x15c>
 80079e2:	eeb1 0a40 	vneg.f32	s0, s0
 80079e6:	b93d      	cbnz	r5, 80079f8 <powf+0x160>
 80079e8:	2c00      	cmp	r4, #0
 80079ea:	dac8      	bge.n	800797e <powf+0xe6>
 80079ec:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 80079f0:	f001 b818 	b.w	8008a24 <__math_divzerof>
 80079f4:	2000      	movs	r0, #0
 80079f6:	e7f6      	b.n	80079e6 <powf+0x14e>
 80079f8:	2c00      	cmp	r4, #0
 80079fa:	dac0      	bge.n	800797e <powf+0xe6>
 80079fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007a00:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8007a04:	e7bb      	b.n	800797e <powf+0xe6>
 8007a06:	2900      	cmp	r1, #0
 8007a08:	da1e      	bge.n	8007a48 <powf+0x1b0>
 8007a0a:	ee10 0a90 	vmov	r0, s1
 8007a0e:	f7ff ff29 	bl	8007864 <checkint>
 8007a12:	b918      	cbnz	r0, 8007a1c <powf+0x184>
 8007a14:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8007a18:	f001 b814 	b.w	8008a44 <__math_invalidf>
 8007a1c:	2801      	cmp	r0, #1
 8007a1e:	bf0c      	ite	eq
 8007a20:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8007a24:	2000      	movne	r0, #0
 8007a26:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007a2a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8007a2e:	f4bf af47 	bcs.w	80078c0 <powf+0x28>
 8007a32:	eddf 0a35 	vldr	s1, [pc, #212]	; 8007b08 <powf+0x270>
 8007a36:	ee20 0a20 	vmul.f32	s0, s0, s1
 8007a3a:	ee10 3a10 	vmov	r3, s0
 8007a3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a42:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8007a46:	e73b      	b.n	80078c0 <powf+0x28>
 8007a48:	2000      	movs	r0, #0
 8007a4a:	e7ee      	b.n	8007a2a <powf+0x192>
 8007a4c:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8007af0 <powf+0x258>
 8007a50:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a58:	d803      	bhi.n	8007a62 <powf+0x1ca>
 8007a5a:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8007a5e:	f000 bfcf 	b.w	8008a00 <__math_uflowf>
 8007a62:	ed9f 7b25 	vldr	d7, [pc, #148]	; 8007af8 <powf+0x260>
 8007a66:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a6e:	d503      	bpl.n	8007a78 <powf+0x1e0>
 8007a70:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8007a74:	f000 bfca 	b.w	8008a0c <__math_may_uflowf>
 8007a78:	4924      	ldr	r1, [pc, #144]	; (8007b0c <powf+0x274>)
 8007a7a:	ed91 7b40 	vldr	d7, [r1, #256]	; 0x100
 8007a7e:	ee30 6b07 	vadd.f64	d6, d0, d7
 8007a82:	ec55 4b16 	vmov	r4, r5, d6
 8007a86:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007a8a:	f004 021f 	and.w	r2, r4, #31
 8007a8e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007a92:	ed91 6b46 	vldr	d6, [r1, #280]	; 0x118
 8007a96:	ee30 0b47 	vsub.f64	d0, d0, d7
 8007a9a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8007a9e:	e9d2 6700 	ldrd	r6, r7, [r2]
 8007aa2:	eea0 7b06 	vfma.f64	d7, d0, d6
 8007aa6:	1824      	adds	r4, r4, r0
 8007aa8:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8007aac:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	1982      	adds	r2, r0, r6
 8007ab4:	ea4f 31c4 	mov.w	r1, r4, lsl #15
 8007ab8:	eb41 0307 	adc.w	r3, r1, r7
 8007abc:	eea0 6b05 	vfma.f64	d6, d0, d5
 8007ac0:	ee20 0b00 	vmul.f64	d0, d0, d0
 8007ac4:	eea6 7b00 	vfma.f64	d7, d6, d0
 8007ac8:	ec43 2b16 	vmov	d6, r2, r3
 8007acc:	ee27 0b06 	vmul.f64	d0, d7, d6
 8007ad0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007ad4:	e753      	b.n	800797e <powf+0xe6>
 8007ad6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007ada:	e750      	b.n	800797e <powf+0xe6>
 8007adc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007b10 <powf+0x278>
 8007ae0:	e74d      	b.n	800797e <powf+0xe6>
 8007ae2:	bf00      	nop
 8007ae4:	f3af 8000 	nop.w
 8007ae8:	ffd1d571 	.word	0xffd1d571
 8007aec:	405fffff 	.word	0x405fffff
 8007af0:	00000000 	.word	0x00000000
 8007af4:	c062c000 	.word	0xc062c000
 8007af8:	00000000 	.word	0x00000000
 8007afc:	c062a000 	.word	0xc062a000
 8007b00:	fefffffe 	.word	0xfefffffe
 8007b04:	081147e0 	.word	0x081147e0
 8007b08:	4b000000 	.word	0x4b000000
 8007b0c:	08114578 	.word	0x08114578
 8007b10:	00000000 	.word	0x00000000

08007b14 <tanf>:
 8007b14:	ee10 3a10 	vmov	r3, s0
 8007b18:	b507      	push	{r0, r1, r2, lr}
 8007b1a:	4a10      	ldr	r2, [pc, #64]	; (8007b5c <tanf+0x48>)
 8007b1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b20:	4293      	cmp	r3, r2
 8007b22:	dc05      	bgt.n	8007b30 <tanf+0x1c>
 8007b24:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8007b60 <tanf+0x4c>
 8007b28:	2001      	movs	r0, #1
 8007b2a:	f000 fe6b 	bl	8008804 <__kernel_tanf>
 8007b2e:	e004      	b.n	8007b3a <tanf+0x26>
 8007b30:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007b34:	db04      	blt.n	8007b40 <tanf+0x2c>
 8007b36:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007b3a:	b003      	add	sp, #12
 8007b3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b40:	4668      	mov	r0, sp
 8007b42:	f000 fab1 	bl	80080a8 <__ieee754_rem_pio2f>
 8007b46:	0040      	lsls	r0, r0, #1
 8007b48:	f000 0002 	and.w	r0, r0, #2
 8007b4c:	f1c0 0001 	rsb	r0, r0, #1
 8007b50:	eddd 0a01 	vldr	s1, [sp, #4]
 8007b54:	ed9d 0a00 	vldr	s0, [sp]
 8007b58:	e7e7      	b.n	8007b2a <tanf+0x16>
 8007b5a:	bf00      	nop
 8007b5c:	3f490fda 	.word	0x3f490fda
 8007b60:	00000000 	.word	0x00000000

08007b64 <tanhf>:
 8007b64:	b510      	push	{r4, lr}
 8007b66:	ee10 4a10 	vmov	r4, s0
 8007b6a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007b6e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007b72:	ed2d 8b02 	vpush	{d8}
 8007b76:	eef0 7a40 	vmov.f32	s15, s0
 8007b7a:	db0c      	blt.n	8007b96 <tanhf+0x32>
 8007b7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b80:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8007b84:	2c00      	cmp	r4, #0
 8007b86:	bfac      	ite	ge
 8007b88:	ee30 0a07 	vaddge.f32	s0, s0, s14
 8007b8c:	ee30 0a47 	vsublt.f32	s0, s0, s14
 8007b90:	ecbd 8b02 	vpop	{d8}
 8007b94:	bd10      	pop	{r4, pc}
 8007b96:	4a1b      	ldr	r2, [pc, #108]	; (8007c04 <tanhf+0xa0>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	dc30      	bgt.n	8007bfe <tanhf+0x9a>
 8007b9c:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8007ba0:	da06      	bge.n	8007bb0 <tanhf+0x4c>
 8007ba2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007ba6:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007baa:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007bae:	e7ef      	b.n	8007b90 <tanhf+0x2c>
 8007bb0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007bb4:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8007bb8:	db12      	blt.n	8007be0 <tanhf+0x7c>
 8007bba:	f7ff fde3 	bl	8007784 <fabsf>
 8007bbe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007bc2:	f000 ff59 	bl	8008a78 <expm1f>
 8007bc6:	ee30 0a08 	vadd.f32	s0, s0, s16
 8007bca:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8007bce:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007bd2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007bd6:	2c00      	cmp	r4, #0
 8007bd8:	bfb8      	it	lt
 8007bda:	eeb1 0a40 	vneglt.f32	s0, s0
 8007bde:	e7d7      	b.n	8007b90 <tanhf+0x2c>
 8007be0:	f7ff fdd0 	bl	8007784 <fabsf>
 8007be4:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8007be8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007bec:	f000 ff44 	bl	8008a78 <expm1f>
 8007bf0:	ee70 7a08 	vadd.f32	s15, s0, s16
 8007bf4:	eeb1 7a40 	vneg.f32	s14, s0
 8007bf8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8007bfc:	e7eb      	b.n	8007bd6 <tanhf+0x72>
 8007bfe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007c02:	e7e8      	b.n	8007bd6 <tanhf+0x72>
 8007c04:	41afffff 	.word	0x41afffff

08007c08 <log>:
 8007c08:	b500      	push	{lr}
 8007c0a:	ed2d 8b02 	vpush	{d8}
 8007c0e:	eeb0 8b40 	vmov.f64	d8, d0
 8007c12:	b08b      	sub	sp, #44	; 0x2c
 8007c14:	f000 f8d8 	bl	8007dc8 <__ieee754_log>
 8007c18:	4b2d      	ldr	r3, [pc, #180]	; (8007cd0 <log+0xc8>)
 8007c1a:	f993 3000 	ldrsb.w	r3, [r3]
 8007c1e:	1c5a      	adds	r2, r3, #1
 8007c20:	d051      	beq.n	8007cc6 <log+0xbe>
 8007c22:	eeb4 8b48 	vcmp.f64	d8, d8
 8007c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c2a:	d64c      	bvs.n	8007cc6 <log+0xbe>
 8007c2c:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8007c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c34:	dc47      	bgt.n	8007cc6 <log+0xbe>
 8007c36:	4a27      	ldr	r2, [pc, #156]	; (8007cd4 <log+0xcc>)
 8007c38:	9201      	str	r2, [sp, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	9208      	str	r2, [sp, #32]
 8007c3e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007c42:	ed8d 8b04 	vstr	d8, [sp, #16]
 8007c46:	b993      	cbnz	r3, 8007c6e <log+0x66>
 8007c48:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007c4c:	4922      	ldr	r1, [pc, #136]	; (8007cd8 <log+0xd0>)
 8007c4e:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 8007c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007c5a:	d025      	beq.n	8007ca8 <log+0xa0>
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	9200      	str	r2, [sp, #0]
 8007c62:	d116      	bne.n	8007c92 <log+0x8a>
 8007c64:	f7ff fcde 	bl	8007624 <__errno>
 8007c68:	2321      	movs	r3, #33	; 0x21
 8007c6a:	6003      	str	r3, [r0, #0]
 8007c6c:	e016      	b.n	8007c9c <log+0x94>
 8007c6e:	491b      	ldr	r1, [pc, #108]	; (8007cdc <log+0xd4>)
 8007c70:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007c74:	2000      	movs	r0, #0
 8007c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c7a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007c7e:	d1ed      	bne.n	8007c5c <log+0x54>
 8007c80:	2202      	movs	r2, #2
 8007c82:	4293      	cmp	r3, r2
 8007c84:	9200      	str	r2, [sp, #0]
 8007c86:	d111      	bne.n	8007cac <log+0xa4>
 8007c88:	f7ff fccc 	bl	8007624 <__errno>
 8007c8c:	2322      	movs	r3, #34	; 0x22
 8007c8e:	6003      	str	r3, [r0, #0]
 8007c90:	e011      	b.n	8007cb6 <log+0xae>
 8007c92:	4668      	mov	r0, sp
 8007c94:	f000 fee5 	bl	8008a62 <matherr>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	d0e3      	beq.n	8007c64 <log+0x5c>
 8007c9c:	4810      	ldr	r0, [pc, #64]	; (8007ce0 <log+0xd8>)
 8007c9e:	f000 fee3 	bl	8008a68 <nan>
 8007ca2:	ed8d 0b06 	vstr	d0, [sp, #24]
 8007ca6:	e006      	b.n	8007cb6 <log+0xae>
 8007ca8:	2302      	movs	r3, #2
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	4668      	mov	r0, sp
 8007cae:	f000 fed8 	bl	8008a62 <matherr>
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	d0e8      	beq.n	8007c88 <log+0x80>
 8007cb6:	9b08      	ldr	r3, [sp, #32]
 8007cb8:	b11b      	cbz	r3, 8007cc2 <log+0xba>
 8007cba:	f7ff fcb3 	bl	8007624 <__errno>
 8007cbe:	9b08      	ldr	r3, [sp, #32]
 8007cc0:	6003      	str	r3, [r0, #0]
 8007cc2:	ed9d 0b06 	vldr	d0, [sp, #24]
 8007cc6:	b00b      	add	sp, #44	; 0x2c
 8007cc8:	ecbd 8b02 	vpop	{d8}
 8007ccc:	f85d fb04 	ldr.w	pc, [sp], #4
 8007cd0:	200002ec 	.word	0x200002ec
 8007cd4:	08114908 	.word	0x08114908
 8007cd8:	c7efffff 	.word	0xc7efffff
 8007cdc:	fff00000 	.word	0xfff00000
 8007ce0:	08114912 	.word	0x08114912

08007ce4 <log10f>:
 8007ce4:	b500      	push	{lr}
 8007ce6:	ed2d 8b02 	vpush	{d8}
 8007cea:	b08b      	sub	sp, #44	; 0x2c
 8007cec:	eeb0 8a40 	vmov.f32	s16, s0
 8007cf0:	f000 f984 	bl	8007ffc <__ieee754_log10f>
 8007cf4:	4b2f      	ldr	r3, [pc, #188]	; (8007db4 <log10f+0xd0>)
 8007cf6:	f993 3000 	ldrsb.w	r3, [r3]
 8007cfa:	1c5a      	adds	r2, r3, #1
 8007cfc:	d055      	beq.n	8007daa <log10f+0xc6>
 8007cfe:	eeb4 8a48 	vcmp.f32	s16, s16
 8007d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d06:	d650      	bvs.n	8007daa <log10f+0xc6>
 8007d08:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d10:	d84b      	bhi.n	8007daa <log10f+0xc6>
 8007d12:	4a29      	ldr	r2, [pc, #164]	; (8007db8 <log10f+0xd4>)
 8007d14:	9201      	str	r2, [sp, #4]
 8007d16:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	9208      	str	r2, [sp, #32]
 8007d1e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007d22:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007d26:	b993      	cbnz	r3, 8007d4e <log10f+0x6a>
 8007d28:	4924      	ldr	r1, [pc, #144]	; (8007dbc <log10f+0xd8>)
 8007d2a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007d2e:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 8007d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007d3a:	d025      	beq.n	8007d88 <log10f+0xa4>
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	9200      	str	r2, [sp, #0]
 8007d42:	d116      	bne.n	8007d72 <log10f+0x8e>
 8007d44:	f7ff fc6e 	bl	8007624 <__errno>
 8007d48:	2321      	movs	r3, #33	; 0x21
 8007d4a:	6003      	str	r3, [r0, #0]
 8007d4c:	e016      	b.n	8007d7c <log10f+0x98>
 8007d4e:	491c      	ldr	r1, [pc, #112]	; (8007dc0 <log10f+0xdc>)
 8007d50:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007d54:	2000      	movs	r0, #0
 8007d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d5a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007d5e:	d1ed      	bne.n	8007d3c <log10f+0x58>
 8007d60:	2202      	movs	r2, #2
 8007d62:	4293      	cmp	r3, r2
 8007d64:	9200      	str	r2, [sp, #0]
 8007d66:	d111      	bne.n	8007d8c <log10f+0xa8>
 8007d68:	f7ff fc5c 	bl	8007624 <__errno>
 8007d6c:	2322      	movs	r3, #34	; 0x22
 8007d6e:	6003      	str	r3, [r0, #0]
 8007d70:	e011      	b.n	8007d96 <log10f+0xb2>
 8007d72:	4668      	mov	r0, sp
 8007d74:	f000 fe75 	bl	8008a62 <matherr>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	d0e3      	beq.n	8007d44 <log10f+0x60>
 8007d7c:	4811      	ldr	r0, [pc, #68]	; (8007dc4 <log10f+0xe0>)
 8007d7e:	f000 fe73 	bl	8008a68 <nan>
 8007d82:	ed8d 0b06 	vstr	d0, [sp, #24]
 8007d86:	e006      	b.n	8007d96 <log10f+0xb2>
 8007d88:	2302      	movs	r3, #2
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	4668      	mov	r0, sp
 8007d8e:	f000 fe68 	bl	8008a62 <matherr>
 8007d92:	2800      	cmp	r0, #0
 8007d94:	d0e8      	beq.n	8007d68 <log10f+0x84>
 8007d96:	9b08      	ldr	r3, [sp, #32]
 8007d98:	b11b      	cbz	r3, 8007da2 <log10f+0xbe>
 8007d9a:	f7ff fc43 	bl	8007624 <__errno>
 8007d9e:	9b08      	ldr	r3, [sp, #32]
 8007da0:	6003      	str	r3, [r0, #0]
 8007da2:	ed9d 0b06 	vldr	d0, [sp, #24]
 8007da6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007daa:	b00b      	add	sp, #44	; 0x2c
 8007dac:	ecbd 8b02 	vpop	{d8}
 8007db0:	f85d fb04 	ldr.w	pc, [sp], #4
 8007db4:	200002ec 	.word	0x200002ec
 8007db8:	0811490c 	.word	0x0811490c
 8007dbc:	c7efffff 	.word	0xc7efffff
 8007dc0:	fff00000 	.word	0xfff00000
 8007dc4:	08114912 	.word	0x08114912

08007dc8 <__ieee754_log>:
 8007dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dca:	ed8d 0b00 	vstr	d0, [sp]
 8007dce:	9a01      	ldr	r2, [sp, #4]
 8007dd0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8007dd4:	da26      	bge.n	8007e24 <__ieee754_log+0x5c>
 8007dd6:	9900      	ldr	r1, [sp, #0]
 8007dd8:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8007ddc:	430b      	orrs	r3, r1
 8007dde:	d107      	bne.n	8007df0 <__ieee754_log+0x28>
 8007de0:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8007f90 <__ieee754_log+0x1c8>
 8007de4:	ed9f 7b6c 	vldr	d7, [pc, #432]	; 8007f98 <__ieee754_log+0x1d0>
 8007de8:	ee86 0b07 	vdiv.f64	d0, d6, d7
 8007dec:	b003      	add	sp, #12
 8007dee:	bd30      	pop	{r4, r5, pc}
 8007df0:	2a00      	cmp	r2, #0
 8007df2:	da04      	bge.n	8007dfe <__ieee754_log+0x36>
 8007df4:	ed9d 7b00 	vldr	d7, [sp]
 8007df8:	ee37 6b47 	vsub.f64	d6, d7, d7
 8007dfc:	e7f2      	b.n	8007de4 <__ieee754_log+0x1c>
 8007dfe:	ed9d 6b00 	vldr	d6, [sp]
 8007e02:	ed9f 7b67 	vldr	d7, [pc, #412]	; 8007fa0 <__ieee754_log+0x1d8>
 8007e06:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007e0a:	ed8d 7b00 	vstr	d7, [sp]
 8007e0e:	9a01      	ldr	r2, [sp, #4]
 8007e10:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8007e14:	4b78      	ldr	r3, [pc, #480]	; (8007ff8 <__ieee754_log+0x230>)
 8007e16:	429a      	cmp	r2, r3
 8007e18:	dd06      	ble.n	8007e28 <__ieee754_log+0x60>
 8007e1a:	ed9d 7b00 	vldr	d7, [sp]
 8007e1e:	ee37 0b07 	vadd.f64	d0, d7, d7
 8007e22:	e7e3      	b.n	8007dec <__ieee754_log+0x24>
 8007e24:	2100      	movs	r1, #0
 8007e26:	e7f5      	b.n	8007e14 <__ieee754_log+0x4c>
 8007e28:	1513      	asrs	r3, r2, #20
 8007e2a:	f3c2 0013 	ubfx	r0, r2, #0, #20
 8007e2e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007e32:	4419      	add	r1, r3
 8007e34:	f500 2315 	add.w	r3, r0, #610304	; 0x95000
 8007e38:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8007e3c:	f403 1480 	and.w	r4, r3, #1048576	; 0x100000
 8007e40:	f084 557f 	eor.w	r5, r4, #1069547520	; 0x3fc00000
 8007e44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e48:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8007e4c:	f485 1540 	eor.w	r5, r5, #3145728	; 0x300000
 8007e50:	ea45 0300 	orr.w	r3, r5, r0
 8007e54:	ec43 2b10 	vmov	d0, r2, r3
 8007e58:	1c82      	adds	r2, r0, #2
 8007e5a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007e5e:	2a02      	cmp	r2, #2
 8007e60:	eb01 5414 	add.w	r4, r1, r4, lsr #20
 8007e64:	ee30 0b47 	vsub.f64	d0, d0, d7
 8007e68:	dc31      	bgt.n	8007ece <__ieee754_log+0x106>
 8007e6a:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8007e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e72:	d10f      	bne.n	8007e94 <__ieee754_log+0xcc>
 8007e74:	2c00      	cmp	r4, #0
 8007e76:	f000 8086 	beq.w	8007f86 <__ieee754_log+0x1be>
 8007e7a:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8007fa8 <__ieee754_log+0x1e0>
 8007e7e:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 8007fb0 <__ieee754_log+0x1e8>
 8007e82:	ee07 4a90 	vmov	s15, r4
 8007e86:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007e8a:	ee27 0b00 	vmul.f64	d0, d7, d0
 8007e8e:	eea7 0b06 	vfma.f64	d0, d7, d6
 8007e92:	e7ab      	b.n	8007dec <__ieee754_log+0x24>
 8007e94:	ed9f 7b48 	vldr	d7, [pc, #288]	; 8007fb8 <__ieee754_log+0x1f0>
 8007e98:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8007e9c:	eea0 6b47 	vfms.f64	d6, d0, d7
 8007ea0:	ee20 7b00 	vmul.f64	d7, d0, d0
 8007ea4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007ea8:	b914      	cbnz	r4, 8007eb0 <__ieee754_log+0xe8>
 8007eaa:	ee30 0b46 	vsub.f64	d0, d0, d6
 8007eae:	e79d      	b.n	8007dec <__ieee754_log+0x24>
 8007eb0:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 8007fa8 <__ieee754_log+0x1e0>
 8007eb4:	ee07 4a90 	vmov	s15, r4
 8007eb8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007ebc:	eea7 6b45 	vfms.f64	d6, d7, d5
 8007ec0:	ee36 0b40 	vsub.f64	d0, d6, d0
 8007ec4:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8007fb0 <__ieee754_log+0x1e8>
 8007ec8:	ee97 0b06 	vfnms.f64	d0, d7, d6
 8007ecc:	e78e      	b.n	8007dec <__ieee754_log+0x24>
 8007ece:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8007ed2:	ee30 7b07 	vadd.f64	d7, d0, d7
 8007ed6:	ee80 4b07 	vdiv.f64	d4, d0, d7
 8007eda:	ee07 4a90 	vmov	s15, r4
 8007ede:	ee24 2b04 	vmul.f64	d2, d4, d4
 8007ee2:	ed9f 3b37 	vldr	d3, [pc, #220]	; 8007fc0 <__ieee754_log+0x1f8>
 8007ee6:	ee22 5b02 	vmul.f64	d5, d2, d2
 8007eea:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8007eee:	ed9f 7b36 	vldr	d7, [pc, #216]	; 8007fc8 <__ieee754_log+0x200>
 8007ef2:	eea5 7b03 	vfma.f64	d7, d5, d3
 8007ef6:	ed9f 3b36 	vldr	d3, [pc, #216]	; 8007fd0 <__ieee754_log+0x208>
 8007efa:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8007fd8 <__ieee754_log+0x210>
 8007efe:	eea7 3b05 	vfma.f64	d3, d7, d5
 8007f02:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8007fe0 <__ieee754_log+0x218>
 8007f06:	eea5 7b01 	vfma.f64	d7, d5, d1
 8007f0a:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8007fe8 <__ieee754_log+0x220>
 8007f0e:	f5a0 21c2 	sub.w	r1, r0, #397312	; 0x61000
 8007f12:	f5c0 22d7 	rsb	r2, r0, #440320	; 0x6b800
 8007f16:	eea7 1b05 	vfma.f64	d1, d7, d5
 8007f1a:	f2a1 417a 	subw	r1, r1, #1146	; 0x47a
 8007f1e:	ed9f 7b34 	vldr	d7, [pc, #208]	; 8007ff0 <__ieee754_log+0x228>
 8007f22:	3251      	adds	r2, #81	; 0x51
 8007f24:	430a      	orrs	r2, r1
 8007f26:	2a00      	cmp	r2, #0
 8007f28:	eea1 7b05 	vfma.f64	d7, d1, d5
 8007f2c:	ee27 7b02 	vmul.f64	d7, d7, d2
 8007f30:	eea3 7b05 	vfma.f64	d7, d3, d5
 8007f34:	dd1c      	ble.n	8007f70 <__ieee754_log+0x1a8>
 8007f36:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007f3a:	ee20 5b05 	vmul.f64	d5, d0, d5
 8007f3e:	ee25 5b00 	vmul.f64	d5, d5, d0
 8007f42:	ee37 7b05 	vadd.f64	d7, d7, d5
 8007f46:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007f4a:	b924      	cbnz	r4, 8007f56 <__ieee754_log+0x18e>
 8007f4c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007f50:	ee30 0b47 	vsub.f64	d0, d0, d7
 8007f54:	e74a      	b.n	8007dec <__ieee754_log+0x24>
 8007f56:	ed9f 4b14 	vldr	d4, [pc, #80]	; 8007fa8 <__ieee754_log+0x1e0>
 8007f5a:	eea6 7b04 	vfma.f64	d7, d6, d4
 8007f5e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007f62:	ee37 0b40 	vsub.f64	d0, d7, d0
 8007f66:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8007fb0 <__ieee754_log+0x1e8>
 8007f6a:	ee96 0b07 	vfnms.f64	d0, d6, d7
 8007f6e:	e73d      	b.n	8007dec <__ieee754_log+0x24>
 8007f70:	ee30 7b47 	vsub.f64	d7, d0, d7
 8007f74:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007f78:	2c00      	cmp	r4, #0
 8007f7a:	d0e9      	beq.n	8007f50 <__ieee754_log+0x188>
 8007f7c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8007fa8 <__ieee754_log+0x1e0>
 8007f80:	eea6 7b45 	vfms.f64	d7, d6, d5
 8007f84:	e7ed      	b.n	8007f62 <__ieee754_log+0x19a>
 8007f86:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8007f98 <__ieee754_log+0x1d0>
 8007f8a:	e72f      	b.n	8007dec <__ieee754_log+0x24>
 8007f8c:	f3af 8000 	nop.w
 8007f90:	00000000 	.word	0x00000000
 8007f94:	c3500000 	.word	0xc3500000
	...
 8007fa4:	43500000 	.word	0x43500000
 8007fa8:	35793c76 	.word	0x35793c76
 8007fac:	3dea39ef 	.word	0x3dea39ef
 8007fb0:	fee00000 	.word	0xfee00000
 8007fb4:	3fe62e42 	.word	0x3fe62e42
 8007fb8:	55555555 	.word	0x55555555
 8007fbc:	3fd55555 	.word	0x3fd55555
 8007fc0:	d078c69f 	.word	0xd078c69f
 8007fc4:	3fc39a09 	.word	0x3fc39a09
 8007fc8:	1d8e78af 	.word	0x1d8e78af
 8007fcc:	3fcc71c5 	.word	0x3fcc71c5
 8007fd0:	9997fa04 	.word	0x9997fa04
 8007fd4:	3fd99999 	.word	0x3fd99999
 8007fd8:	df3e5244 	.word	0xdf3e5244
 8007fdc:	3fc2f112 	.word	0x3fc2f112
 8007fe0:	96cb03de 	.word	0x96cb03de
 8007fe4:	3fc74664 	.word	0x3fc74664
 8007fe8:	94229359 	.word	0x94229359
 8007fec:	3fd24924 	.word	0x3fd24924
 8007ff0:	55555593 	.word	0x55555593
 8007ff4:	3fe55555 	.word	0x3fe55555
 8007ff8:	7fefffff 	.word	0x7fefffff

08007ffc <__ieee754_log10f>:
 8007ffc:	b508      	push	{r3, lr}
 8007ffe:	ee10 2a10 	vmov	r2, s0
 8008002:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8008006:	ed2d 8b02 	vpush	{d8}
 800800a:	d108      	bne.n	800801e <__ieee754_log10f+0x22>
 800800c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8008090 <__ieee754_log10f+0x94>
 8008010:	eddf 7a20 	vldr	s15, [pc, #128]	; 8008094 <__ieee754_log10f+0x98>
 8008014:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8008018:	ecbd 8b02 	vpop	{d8}
 800801c:	bd08      	pop	{r3, pc}
 800801e:	2a00      	cmp	r2, #0
 8008020:	da02      	bge.n	8008028 <__ieee754_log10f+0x2c>
 8008022:	ee30 7a40 	vsub.f32	s14, s0, s0
 8008026:	e7f3      	b.n	8008010 <__ieee754_log10f+0x14>
 8008028:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800802c:	db02      	blt.n	8008034 <__ieee754_log10f+0x38>
 800802e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008032:	e7f1      	b.n	8008018 <__ieee754_log10f+0x1c>
 8008034:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8008038:	bfbf      	itttt	lt
 800803a:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 8008098 <__ieee754_log10f+0x9c>
 800803e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8008042:	f06f 0118 	mvnlt.w	r1, #24
 8008046:	ee17 2a90 	vmovlt	r2, s15
 800804a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800804e:	bfa8      	it	ge
 8008050:	2100      	movge	r1, #0
 8008052:	3b7f      	subs	r3, #127	; 0x7f
 8008054:	440b      	add	r3, r1
 8008056:	0fd9      	lsrs	r1, r3, #31
 8008058:	440b      	add	r3, r1
 800805a:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800805e:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 8008062:	ee07 3a90 	vmov	s15, r3
 8008066:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 800806a:	ee00 3a10 	vmov	s0, r3
 800806e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8008072:	f7ff fb8f 	bl	8007794 <logf>
 8008076:	eddf 7a09 	vldr	s15, [pc, #36]	; 800809c <__ieee754_log10f+0xa0>
 800807a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800807e:	eddf 7a08 	vldr	s15, [pc, #32]	; 80080a0 <__ieee754_log10f+0xa4>
 8008082:	eea8 0a27 	vfma.f32	s0, s16, s15
 8008086:	eddf 7a07 	vldr	s15, [pc, #28]	; 80080a4 <__ieee754_log10f+0xa8>
 800808a:	eea8 0a27 	vfma.f32	s0, s16, s15
 800808e:	e7c3      	b.n	8008018 <__ieee754_log10f+0x1c>
 8008090:	cc000000 	.word	0xcc000000
 8008094:	00000000 	.word	0x00000000
 8008098:	4c000000 	.word	0x4c000000
 800809c:	3ede5bd9 	.word	0x3ede5bd9
 80080a0:	355427db 	.word	0x355427db
 80080a4:	3e9a2080 	.word	0x3e9a2080

080080a8 <__ieee754_rem_pio2f>:
 80080a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080aa:	ee10 6a10 	vmov	r6, s0
 80080ae:	4b86      	ldr	r3, [pc, #536]	; (80082c8 <__ieee754_rem_pio2f+0x220>)
 80080b0:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80080b4:	429c      	cmp	r4, r3
 80080b6:	b087      	sub	sp, #28
 80080b8:	4605      	mov	r5, r0
 80080ba:	dc05      	bgt.n	80080c8 <__ieee754_rem_pio2f+0x20>
 80080bc:	2300      	movs	r3, #0
 80080be:	ed85 0a00 	vstr	s0, [r5]
 80080c2:	6043      	str	r3, [r0, #4]
 80080c4:	2000      	movs	r0, #0
 80080c6:	e020      	b.n	800810a <__ieee754_rem_pio2f+0x62>
 80080c8:	4b80      	ldr	r3, [pc, #512]	; (80082cc <__ieee754_rem_pio2f+0x224>)
 80080ca:	429c      	cmp	r4, r3
 80080cc:	dc38      	bgt.n	8008140 <__ieee754_rem_pio2f+0x98>
 80080ce:	2e00      	cmp	r6, #0
 80080d0:	f024 040f 	bic.w	r4, r4, #15
 80080d4:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80082d0 <__ieee754_rem_pio2f+0x228>
 80080d8:	4b7e      	ldr	r3, [pc, #504]	; (80082d4 <__ieee754_rem_pio2f+0x22c>)
 80080da:	dd18      	ble.n	800810e <__ieee754_rem_pio2f+0x66>
 80080dc:	429c      	cmp	r4, r3
 80080de:	ee70 7a47 	vsub.f32	s15, s0, s14
 80080e2:	bf09      	itett	eq
 80080e4:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80082d8 <__ieee754_rem_pio2f+0x230>
 80080e8:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80082dc <__ieee754_rem_pio2f+0x234>
 80080ec:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80080f0:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80082e0 <__ieee754_rem_pio2f+0x238>
 80080f4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80080f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80080fc:	edc0 6a00 	vstr	s13, [r0]
 8008100:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008104:	edc0 7a01 	vstr	s15, [r0, #4]
 8008108:	2001      	movs	r0, #1
 800810a:	b007      	add	sp, #28
 800810c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800810e:	429c      	cmp	r4, r3
 8008110:	ee70 7a07 	vadd.f32	s15, s0, s14
 8008114:	bf09      	itett	eq
 8008116:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80082d8 <__ieee754_rem_pio2f+0x230>
 800811a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80082dc <__ieee754_rem_pio2f+0x234>
 800811e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8008122:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80082e0 <__ieee754_rem_pio2f+0x238>
 8008126:	ee77 6a87 	vadd.f32	s13, s15, s14
 800812a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800812e:	edc0 6a00 	vstr	s13, [r0]
 8008132:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008136:	edc0 7a01 	vstr	s15, [r0, #4]
 800813a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800813e:	e7e4      	b.n	800810a <__ieee754_rem_pio2f+0x62>
 8008140:	4b68      	ldr	r3, [pc, #416]	; (80082e4 <__ieee754_rem_pio2f+0x23c>)
 8008142:	429c      	cmp	r4, r3
 8008144:	dc71      	bgt.n	800822a <__ieee754_rem_pio2f+0x182>
 8008146:	f7ff fb1d 	bl	8007784 <fabsf>
 800814a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80082e8 <__ieee754_rem_pio2f+0x240>
 800814e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008152:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008156:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800815a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800815e:	ee17 0a90 	vmov	r0, s15
 8008162:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80082d0 <__ieee754_rem_pio2f+0x228>
 8008166:	eeb1 7a46 	vneg.f32	s14, s12
 800816a:	eea7 0a27 	vfma.f32	s0, s14, s15
 800816e:	281f      	cmp	r0, #31
 8008170:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80082dc <__ieee754_rem_pio2f+0x234>
 8008174:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008178:	ee70 6a67 	vsub.f32	s13, s0, s15
 800817c:	ee16 3a90 	vmov	r3, s13
 8008180:	dc1c      	bgt.n	80081bc <__ieee754_rem_pio2f+0x114>
 8008182:	1e47      	subs	r7, r0, #1
 8008184:	4959      	ldr	r1, [pc, #356]	; (80082ec <__ieee754_rem_pio2f+0x244>)
 8008186:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800818a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800818e:	428a      	cmp	r2, r1
 8008190:	d014      	beq.n	80081bc <__ieee754_rem_pio2f+0x114>
 8008192:	602b      	str	r3, [r5, #0]
 8008194:	ed95 7a00 	vldr	s14, [r5]
 8008198:	ee30 0a47 	vsub.f32	s0, s0, s14
 800819c:	2e00      	cmp	r6, #0
 800819e:	ee30 0a67 	vsub.f32	s0, s0, s15
 80081a2:	ed85 0a01 	vstr	s0, [r5, #4]
 80081a6:	dab0      	bge.n	800810a <__ieee754_rem_pio2f+0x62>
 80081a8:	eeb1 7a47 	vneg.f32	s14, s14
 80081ac:	eeb1 0a40 	vneg.f32	s0, s0
 80081b0:	ed85 7a00 	vstr	s14, [r5]
 80081b4:	ed85 0a01 	vstr	s0, [r5, #4]
 80081b8:	4240      	negs	r0, r0
 80081ba:	e7a6      	b.n	800810a <__ieee754_rem_pio2f+0x62>
 80081bc:	15e4      	asrs	r4, r4, #23
 80081be:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80081c2:	1aa2      	subs	r2, r4, r2
 80081c4:	2a08      	cmp	r2, #8
 80081c6:	dde4      	ble.n	8008192 <__ieee754_rem_pio2f+0xea>
 80081c8:	eddf 7a43 	vldr	s15, [pc, #268]	; 80082d8 <__ieee754_rem_pio2f+0x230>
 80081cc:	eef0 6a40 	vmov.f32	s13, s0
 80081d0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80081d4:	ee30 0a66 	vsub.f32	s0, s0, s13
 80081d8:	eea7 0a27 	vfma.f32	s0, s14, s15
 80081dc:	eddf 7a40 	vldr	s15, [pc, #256]	; 80082e0 <__ieee754_rem_pio2f+0x238>
 80081e0:	ee96 0a27 	vfnms.f32	s0, s12, s15
 80081e4:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80081e8:	eef0 7a40 	vmov.f32	s15, s0
 80081ec:	ee15 3a90 	vmov	r3, s11
 80081f0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80081f4:	1aa4      	subs	r4, r4, r2
 80081f6:	2c19      	cmp	r4, #25
 80081f8:	dc04      	bgt.n	8008204 <__ieee754_rem_pio2f+0x15c>
 80081fa:	edc5 5a00 	vstr	s11, [r5]
 80081fe:	eeb0 0a66 	vmov.f32	s0, s13
 8008202:	e7c7      	b.n	8008194 <__ieee754_rem_pio2f+0xec>
 8008204:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80082f0 <__ieee754_rem_pio2f+0x248>
 8008208:	eeb0 0a66 	vmov.f32	s0, s13
 800820c:	eea7 0a25 	vfma.f32	s0, s14, s11
 8008210:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8008214:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008218:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80082f4 <__ieee754_rem_pio2f+0x24c>
 800821c:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8008220:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008224:	ed85 7a00 	vstr	s14, [r5]
 8008228:	e7b4      	b.n	8008194 <__ieee754_rem_pio2f+0xec>
 800822a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800822e:	db06      	blt.n	800823e <__ieee754_rem_pio2f+0x196>
 8008230:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008234:	edc0 7a01 	vstr	s15, [r0, #4]
 8008238:	edc0 7a00 	vstr	s15, [r0]
 800823c:	e742      	b.n	80080c4 <__ieee754_rem_pio2f+0x1c>
 800823e:	15e2      	asrs	r2, r4, #23
 8008240:	3a86      	subs	r2, #134	; 0x86
 8008242:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8008246:	ee07 3a90 	vmov	s15, r3
 800824a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800824e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80082f8 <__ieee754_rem_pio2f+0x250>
 8008252:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008256:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800825a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800825e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008262:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008266:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800826a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800826e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008272:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008276:	eef5 7a40 	vcmp.f32	s15, #0.0
 800827a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800827e:	edcd 7a05 	vstr	s15, [sp, #20]
 8008282:	d11e      	bne.n	80082c2 <__ieee754_rem_pio2f+0x21a>
 8008284:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800828c:	bf0c      	ite	eq
 800828e:	2301      	moveq	r3, #1
 8008290:	2302      	movne	r3, #2
 8008292:	491a      	ldr	r1, [pc, #104]	; (80082fc <__ieee754_rem_pio2f+0x254>)
 8008294:	9101      	str	r1, [sp, #4]
 8008296:	2102      	movs	r1, #2
 8008298:	9100      	str	r1, [sp, #0]
 800829a:	a803      	add	r0, sp, #12
 800829c:	4629      	mov	r1, r5
 800829e:	f000 f82f 	bl	8008300 <__kernel_rem_pio2f>
 80082a2:	2e00      	cmp	r6, #0
 80082a4:	f6bf af31 	bge.w	800810a <__ieee754_rem_pio2f+0x62>
 80082a8:	edd5 7a00 	vldr	s15, [r5]
 80082ac:	eef1 7a67 	vneg.f32	s15, s15
 80082b0:	edc5 7a00 	vstr	s15, [r5]
 80082b4:	edd5 7a01 	vldr	s15, [r5, #4]
 80082b8:	eef1 7a67 	vneg.f32	s15, s15
 80082bc:	edc5 7a01 	vstr	s15, [r5, #4]
 80082c0:	e77a      	b.n	80081b8 <__ieee754_rem_pio2f+0x110>
 80082c2:	2303      	movs	r3, #3
 80082c4:	e7e5      	b.n	8008292 <__ieee754_rem_pio2f+0x1ea>
 80082c6:	bf00      	nop
 80082c8:	3f490fd8 	.word	0x3f490fd8
 80082cc:	4016cbe3 	.word	0x4016cbe3
 80082d0:	3fc90f80 	.word	0x3fc90f80
 80082d4:	3fc90fd0 	.word	0x3fc90fd0
 80082d8:	37354400 	.word	0x37354400
 80082dc:	37354443 	.word	0x37354443
 80082e0:	2e85a308 	.word	0x2e85a308
 80082e4:	43490f80 	.word	0x43490f80
 80082e8:	3f22f984 	.word	0x3f22f984
 80082ec:	08114914 	.word	0x08114914
 80082f0:	2e85a300 	.word	0x2e85a300
 80082f4:	248d3132 	.word	0x248d3132
 80082f8:	43800000 	.word	0x43800000
 80082fc:	08114994 	.word	0x08114994

08008300 <__kernel_rem_pio2f>:
 8008300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008304:	ed2d 8b04 	vpush	{d8-d9}
 8008308:	b0d7      	sub	sp, #348	; 0x15c
 800830a:	469b      	mov	fp, r3
 800830c:	460e      	mov	r6, r1
 800830e:	4bbe      	ldr	r3, [pc, #760]	; (8008608 <__kernel_rem_pio2f+0x308>)
 8008310:	9964      	ldr	r1, [sp, #400]	; 0x190
 8008312:	9002      	str	r0, [sp, #8]
 8008314:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8008318:	9865      	ldr	r0, [sp, #404]	; 0x194
 800831a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8008618 <__kernel_rem_pio2f+0x318>
 800831e:	1ed1      	subs	r1, r2, #3
 8008320:	2308      	movs	r3, #8
 8008322:	fb91 f1f3 	sdiv	r1, r1, r3
 8008326:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800832a:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 800832e:	1c4c      	adds	r4, r1, #1
 8008330:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8008334:	eba1 050a 	sub.w	r5, r1, sl
 8008338:	aa1a      	add	r2, sp, #104	; 0x68
 800833a:	eb09 070a 	add.w	r7, r9, sl
 800833e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8008342:	4696      	mov	lr, r2
 8008344:	2300      	movs	r3, #0
 8008346:	42bb      	cmp	r3, r7
 8008348:	dd0f      	ble.n	800836a <__kernel_rem_pio2f+0x6a>
 800834a:	af42      	add	r7, sp, #264	; 0x108
 800834c:	2200      	movs	r2, #0
 800834e:	454a      	cmp	r2, r9
 8008350:	dc27      	bgt.n	80083a2 <__kernel_rem_pio2f+0xa2>
 8008352:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8008356:	eb0b 0302 	add.w	r3, fp, r2
 800835a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800835e:	9d02      	ldr	r5, [sp, #8]
 8008360:	eddf 7aad 	vldr	s15, [pc, #692]	; 8008618 <__kernel_rem_pio2f+0x318>
 8008364:	f04f 0c00 	mov.w	ip, #0
 8008368:	e015      	b.n	8008396 <__kernel_rem_pio2f+0x96>
 800836a:	42dd      	cmn	r5, r3
 800836c:	bf5d      	ittte	pl
 800836e:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8008372:	ee07 2a90 	vmovpl	s15, r2
 8008376:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800837a:	eef0 7a47 	vmovmi.f32	s15, s14
 800837e:	ecee 7a01 	vstmia	lr!, {s15}
 8008382:	3301      	adds	r3, #1
 8008384:	e7df      	b.n	8008346 <__kernel_rem_pio2f+0x46>
 8008386:	ecf5 6a01 	vldmia	r5!, {s13}
 800838a:	ed33 7a01 	vldmdb	r3!, {s14}
 800838e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008392:	f10c 0c01 	add.w	ip, ip, #1
 8008396:	45d4      	cmp	ip, sl
 8008398:	ddf5      	ble.n	8008386 <__kernel_rem_pio2f+0x86>
 800839a:	ece7 7a01 	vstmia	r7!, {s15}
 800839e:	3201      	adds	r2, #1
 80083a0:	e7d5      	b.n	800834e <__kernel_rem_pio2f+0x4e>
 80083a2:	ab06      	add	r3, sp, #24
 80083a4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80083a8:	9304      	str	r3, [sp, #16]
 80083aa:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8008614 <__kernel_rem_pio2f+0x314>
 80083ae:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8008610 <__kernel_rem_pio2f+0x310>
 80083b2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80083b6:	9303      	str	r3, [sp, #12]
 80083b8:	464d      	mov	r5, r9
 80083ba:	ab56      	add	r3, sp, #344	; 0x158
 80083bc:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 80083c0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80083c4:	3f01      	subs	r7, #1
 80083c6:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80083ca:	00bf      	lsls	r7, r7, #2
 80083cc:	ab56      	add	r3, sp, #344	; 0x158
 80083ce:	19da      	adds	r2, r3, r7
 80083d0:	3a4c      	subs	r2, #76	; 0x4c
 80083d2:	2300      	movs	r3, #0
 80083d4:	1ae9      	subs	r1, r5, r3
 80083d6:	2900      	cmp	r1, #0
 80083d8:	dc4c      	bgt.n	8008474 <__kernel_rem_pio2f+0x174>
 80083da:	4620      	mov	r0, r4
 80083dc:	f000 fcb8 	bl	8008d50 <scalbnf>
 80083e0:	eeb0 8a40 	vmov.f32	s16, s0
 80083e4:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80083e8:	ee28 0a00 	vmul.f32	s0, s16, s0
 80083ec:	f000 fc6e 	bl	8008ccc <floorf>
 80083f0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80083f4:	eea0 8a67 	vfms.f32	s16, s0, s15
 80083f8:	2c00      	cmp	r4, #0
 80083fa:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80083fe:	edcd 7a01 	vstr	s15, [sp, #4]
 8008402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008406:	ee38 8a67 	vsub.f32	s16, s16, s15
 800840a:	dd48      	ble.n	800849e <__kernel_rem_pio2f+0x19e>
 800840c:	1e69      	subs	r1, r5, #1
 800840e:	ab06      	add	r3, sp, #24
 8008410:	f1c4 0008 	rsb	r0, r4, #8
 8008414:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8008418:	9a01      	ldr	r2, [sp, #4]
 800841a:	fa4c f300 	asr.w	r3, ip, r0
 800841e:	441a      	add	r2, r3
 8008420:	4083      	lsls	r3, r0
 8008422:	9201      	str	r2, [sp, #4]
 8008424:	ebac 0203 	sub.w	r2, ip, r3
 8008428:	ab06      	add	r3, sp, #24
 800842a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800842e:	f1c4 0307 	rsb	r3, r4, #7
 8008432:	fa42 f803 	asr.w	r8, r2, r3
 8008436:	f1b8 0f00 	cmp.w	r8, #0
 800843a:	dd41      	ble.n	80084c0 <__kernel_rem_pio2f+0x1c0>
 800843c:	9b01      	ldr	r3, [sp, #4]
 800843e:	2000      	movs	r0, #0
 8008440:	3301      	adds	r3, #1
 8008442:	9301      	str	r3, [sp, #4]
 8008444:	4601      	mov	r1, r0
 8008446:	4285      	cmp	r5, r0
 8008448:	dc6d      	bgt.n	8008526 <__kernel_rem_pio2f+0x226>
 800844a:	2c00      	cmp	r4, #0
 800844c:	dd04      	ble.n	8008458 <__kernel_rem_pio2f+0x158>
 800844e:	2c01      	cmp	r4, #1
 8008450:	d07e      	beq.n	8008550 <__kernel_rem_pio2f+0x250>
 8008452:	2c02      	cmp	r4, #2
 8008454:	f000 8086 	beq.w	8008564 <__kernel_rem_pio2f+0x264>
 8008458:	f1b8 0f02 	cmp.w	r8, #2
 800845c:	d130      	bne.n	80084c0 <__kernel_rem_pio2f+0x1c0>
 800845e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008462:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008466:	b359      	cbz	r1, 80084c0 <__kernel_rem_pio2f+0x1c0>
 8008468:	4620      	mov	r0, r4
 800846a:	f000 fc71 	bl	8008d50 <scalbnf>
 800846e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008472:	e025      	b.n	80084c0 <__kernel_rem_pio2f+0x1c0>
 8008474:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008478:	a806      	add	r0, sp, #24
 800847a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800847e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008482:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008486:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800848a:	ee10 1a10 	vmov	r1, s0
 800848e:	ed32 0a01 	vldmdb	r2!, {s0}
 8008492:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8008496:	ee37 0a80 	vadd.f32	s0, s15, s0
 800849a:	3301      	adds	r3, #1
 800849c:	e79a      	b.n	80083d4 <__kernel_rem_pio2f+0xd4>
 800849e:	d106      	bne.n	80084ae <__kernel_rem_pio2f+0x1ae>
 80084a0:	1e6b      	subs	r3, r5, #1
 80084a2:	aa06      	add	r2, sp, #24
 80084a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80084a8:	ea4f 2822 	mov.w	r8, r2, asr #8
 80084ac:	e7c3      	b.n	8008436 <__kernel_rem_pio2f+0x136>
 80084ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80084b2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80084b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ba:	da31      	bge.n	8008520 <__kernel_rem_pio2f+0x220>
 80084bc:	f04f 0800 	mov.w	r8, #0
 80084c0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80084c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084c8:	f040 80a8 	bne.w	800861c <__kernel_rem_pio2f+0x31c>
 80084cc:	1e6b      	subs	r3, r5, #1
 80084ce:	4618      	mov	r0, r3
 80084d0:	2200      	movs	r2, #0
 80084d2:	4548      	cmp	r0, r9
 80084d4:	da4d      	bge.n	8008572 <__kernel_rem_pio2f+0x272>
 80084d6:	2a00      	cmp	r2, #0
 80084d8:	f000 8087 	beq.w	80085ea <__kernel_rem_pio2f+0x2ea>
 80084dc:	aa06      	add	r2, sp, #24
 80084de:	3c08      	subs	r4, #8
 80084e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80084e4:	2900      	cmp	r1, #0
 80084e6:	f000 808d 	beq.w	8008604 <__kernel_rem_pio2f+0x304>
 80084ea:	4620      	mov	r0, r4
 80084ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80084f0:	9302      	str	r3, [sp, #8]
 80084f2:	f000 fc2d 	bl	8008d50 <scalbnf>
 80084f6:	9b02      	ldr	r3, [sp, #8]
 80084f8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8008614 <__kernel_rem_pio2f+0x314>
 80084fc:	0099      	lsls	r1, r3, #2
 80084fe:	aa42      	add	r2, sp, #264	; 0x108
 8008500:	1850      	adds	r0, r2, r1
 8008502:	1d05      	adds	r5, r0, #4
 8008504:	461c      	mov	r4, r3
 8008506:	2c00      	cmp	r4, #0
 8008508:	f280 80b8 	bge.w	800867c <__kernel_rem_pio2f+0x37c>
 800850c:	2500      	movs	r5, #0
 800850e:	1b5c      	subs	r4, r3, r5
 8008510:	2c00      	cmp	r4, #0
 8008512:	f2c0 80d8 	blt.w	80086c6 <__kernel_rem_pio2f+0x3c6>
 8008516:	4f3d      	ldr	r7, [pc, #244]	; (800860c <__kernel_rem_pio2f+0x30c>)
 8008518:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8008618 <__kernel_rem_pio2f+0x318>
 800851c:	2400      	movs	r4, #0
 800851e:	e0c6      	b.n	80086ae <__kernel_rem_pio2f+0x3ae>
 8008520:	f04f 0802 	mov.w	r8, #2
 8008524:	e78a      	b.n	800843c <__kernel_rem_pio2f+0x13c>
 8008526:	ab06      	add	r3, sp, #24
 8008528:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800852c:	b949      	cbnz	r1, 8008542 <__kernel_rem_pio2f+0x242>
 800852e:	b12b      	cbz	r3, 800853c <__kernel_rem_pio2f+0x23c>
 8008530:	aa06      	add	r2, sp, #24
 8008532:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008536:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800853a:	2301      	movs	r3, #1
 800853c:	3001      	adds	r0, #1
 800853e:	4619      	mov	r1, r3
 8008540:	e781      	b.n	8008446 <__kernel_rem_pio2f+0x146>
 8008542:	aa06      	add	r2, sp, #24
 8008544:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8008548:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800854c:	460b      	mov	r3, r1
 800854e:	e7f5      	b.n	800853c <__kernel_rem_pio2f+0x23c>
 8008550:	1e68      	subs	r0, r5, #1
 8008552:	ab06      	add	r3, sp, #24
 8008554:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800855c:	aa06      	add	r2, sp, #24
 800855e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008562:	e779      	b.n	8008458 <__kernel_rem_pio2f+0x158>
 8008564:	1e68      	subs	r0, r5, #1
 8008566:	ab06      	add	r3, sp, #24
 8008568:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800856c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008570:	e7f4      	b.n	800855c <__kernel_rem_pio2f+0x25c>
 8008572:	a906      	add	r1, sp, #24
 8008574:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8008578:	3801      	subs	r0, #1
 800857a:	430a      	orrs	r2, r1
 800857c:	e7a9      	b.n	80084d2 <__kernel_rem_pio2f+0x1d2>
 800857e:	f10c 0c01 	add.w	ip, ip, #1
 8008582:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008586:	2a00      	cmp	r2, #0
 8008588:	d0f9      	beq.n	800857e <__kernel_rem_pio2f+0x27e>
 800858a:	eb0b 0305 	add.w	r3, fp, r5
 800858e:	aa1a      	add	r2, sp, #104	; 0x68
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	1898      	adds	r0, r3, r2
 8008594:	3004      	adds	r0, #4
 8008596:	1c69      	adds	r1, r5, #1
 8008598:	3704      	adds	r7, #4
 800859a:	2200      	movs	r2, #0
 800859c:	4465      	add	r5, ip
 800859e:	9005      	str	r0, [sp, #20]
 80085a0:	428d      	cmp	r5, r1
 80085a2:	f6ff af0a 	blt.w	80083ba <__kernel_rem_pio2f+0xba>
 80085a6:	a81a      	add	r0, sp, #104	; 0x68
 80085a8:	eb02 0c03 	add.w	ip, r2, r3
 80085ac:	4484      	add	ip, r0
 80085ae:	9803      	ldr	r0, [sp, #12]
 80085b0:	f8dd e008 	ldr.w	lr, [sp, #8]
 80085b4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80085b8:	9001      	str	r0, [sp, #4]
 80085ba:	ee07 0a90 	vmov	s15, r0
 80085be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085c2:	9805      	ldr	r0, [sp, #20]
 80085c4:	edcc 7a00 	vstr	s15, [ip]
 80085c8:	eddf 7a13 	vldr	s15, [pc, #76]	; 8008618 <__kernel_rem_pio2f+0x318>
 80085cc:	eb00 0802 	add.w	r8, r0, r2
 80085d0:	f04f 0c00 	mov.w	ip, #0
 80085d4:	45d4      	cmp	ip, sl
 80085d6:	dd0c      	ble.n	80085f2 <__kernel_rem_pio2f+0x2f2>
 80085d8:	eb02 0c07 	add.w	ip, r2, r7
 80085dc:	a842      	add	r0, sp, #264	; 0x108
 80085de:	4484      	add	ip, r0
 80085e0:	edcc 7a01 	vstr	s15, [ip, #4]
 80085e4:	3101      	adds	r1, #1
 80085e6:	3204      	adds	r2, #4
 80085e8:	e7da      	b.n	80085a0 <__kernel_rem_pio2f+0x2a0>
 80085ea:	9b04      	ldr	r3, [sp, #16]
 80085ec:	f04f 0c01 	mov.w	ip, #1
 80085f0:	e7c7      	b.n	8008582 <__kernel_rem_pio2f+0x282>
 80085f2:	ecfe 6a01 	vldmia	lr!, {s13}
 80085f6:	ed38 7a01 	vldmdb	r8!, {s14}
 80085fa:	f10c 0c01 	add.w	ip, ip, #1
 80085fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008602:	e7e7      	b.n	80085d4 <__kernel_rem_pio2f+0x2d4>
 8008604:	3b01      	subs	r3, #1
 8008606:	e769      	b.n	80084dc <__kernel_rem_pio2f+0x1dc>
 8008608:	08114cd8 	.word	0x08114cd8
 800860c:	08114cac 	.word	0x08114cac
 8008610:	43800000 	.word	0x43800000
 8008614:	3b800000 	.word	0x3b800000
 8008618:	00000000 	.word	0x00000000
 800861c:	4260      	negs	r0, r4
 800861e:	eeb0 0a48 	vmov.f32	s0, s16
 8008622:	f000 fb95 	bl	8008d50 <scalbnf>
 8008626:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8008610 <__kernel_rem_pio2f+0x310>
 800862a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800862e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008632:	db1a      	blt.n	800866a <__kernel_rem_pio2f+0x36a>
 8008634:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008614 <__kernel_rem_pio2f+0x314>
 8008638:	ee60 7a27 	vmul.f32	s15, s0, s15
 800863c:	aa06      	add	r2, sp, #24
 800863e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008642:	a906      	add	r1, sp, #24
 8008644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008648:	3408      	adds	r4, #8
 800864a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800864e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008652:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008656:	ee10 3a10 	vmov	r3, s0
 800865a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800865e:	1c6b      	adds	r3, r5, #1
 8008660:	ee17 2a90 	vmov	r2, s15
 8008664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008668:	e73f      	b.n	80084ea <__kernel_rem_pio2f+0x1ea>
 800866a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800866e:	aa06      	add	r2, sp, #24
 8008670:	ee10 3a10 	vmov	r3, s0
 8008674:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8008678:	462b      	mov	r3, r5
 800867a:	e736      	b.n	80084ea <__kernel_rem_pio2f+0x1ea>
 800867c:	aa06      	add	r2, sp, #24
 800867e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8008682:	9202      	str	r2, [sp, #8]
 8008684:	ee07 2a90 	vmov	s15, r2
 8008688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800868c:	3c01      	subs	r4, #1
 800868e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008692:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008696:	ed65 7a01 	vstmdb	r5!, {s15}
 800869a:	e734      	b.n	8008506 <__kernel_rem_pio2f+0x206>
 800869c:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 80086a0:	ecf7 6a01 	vldmia	r7!, {s13}
 80086a4:	ed9c 7a00 	vldr	s14, [ip]
 80086a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80086ac:	3401      	adds	r4, #1
 80086ae:	454c      	cmp	r4, r9
 80086b0:	dc01      	bgt.n	80086b6 <__kernel_rem_pio2f+0x3b6>
 80086b2:	42a5      	cmp	r5, r4
 80086b4:	daf2      	bge.n	800869c <__kernel_rem_pio2f+0x39c>
 80086b6:	aa56      	add	r2, sp, #344	; 0x158
 80086b8:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 80086bc:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 80086c0:	3501      	adds	r5, #1
 80086c2:	3804      	subs	r0, #4
 80086c4:	e723      	b.n	800850e <__kernel_rem_pio2f+0x20e>
 80086c6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80086c8:	2a03      	cmp	r2, #3
 80086ca:	d84d      	bhi.n	8008768 <__kernel_rem_pio2f+0x468>
 80086cc:	e8df f002 	tbb	[pc, r2]
 80086d0:	021f1f3e 	.word	0x021f1f3e
 80086d4:	aa56      	add	r2, sp, #344	; 0x158
 80086d6:	4411      	add	r1, r2
 80086d8:	399c      	subs	r1, #156	; 0x9c
 80086da:	4608      	mov	r0, r1
 80086dc:	461c      	mov	r4, r3
 80086de:	2c00      	cmp	r4, #0
 80086e0:	dc5f      	bgt.n	80087a2 <__kernel_rem_pio2f+0x4a2>
 80086e2:	4608      	mov	r0, r1
 80086e4:	461c      	mov	r4, r3
 80086e6:	2c01      	cmp	r4, #1
 80086e8:	dc6b      	bgt.n	80087c2 <__kernel_rem_pio2f+0x4c2>
 80086ea:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8008618 <__kernel_rem_pio2f+0x318>
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	dc77      	bgt.n	80087e2 <__kernel_rem_pio2f+0x4e2>
 80086f2:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80086f6:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80086fa:	f1b8 0f00 	cmp.w	r8, #0
 80086fe:	d176      	bne.n	80087ee <__kernel_rem_pio2f+0x4ee>
 8008700:	edc6 6a00 	vstr	s13, [r6]
 8008704:	ed86 7a01 	vstr	s14, [r6, #4]
 8008708:	edc6 7a02 	vstr	s15, [r6, #8]
 800870c:	e02c      	b.n	8008768 <__kernel_rem_pio2f+0x468>
 800870e:	aa56      	add	r2, sp, #344	; 0x158
 8008710:	4411      	add	r1, r2
 8008712:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8008618 <__kernel_rem_pio2f+0x318>
 8008716:	399c      	subs	r1, #156	; 0x9c
 8008718:	4618      	mov	r0, r3
 800871a:	2800      	cmp	r0, #0
 800871c:	da32      	bge.n	8008784 <__kernel_rem_pio2f+0x484>
 800871e:	f1b8 0f00 	cmp.w	r8, #0
 8008722:	d035      	beq.n	8008790 <__kernel_rem_pio2f+0x490>
 8008724:	eef1 7a47 	vneg.f32	s15, s14
 8008728:	edc6 7a00 	vstr	s15, [r6]
 800872c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8008730:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008734:	a82f      	add	r0, sp, #188	; 0xbc
 8008736:	2101      	movs	r1, #1
 8008738:	428b      	cmp	r3, r1
 800873a:	da2c      	bge.n	8008796 <__kernel_rem_pio2f+0x496>
 800873c:	f1b8 0f00 	cmp.w	r8, #0
 8008740:	d001      	beq.n	8008746 <__kernel_rem_pio2f+0x446>
 8008742:	eef1 7a67 	vneg.f32	s15, s15
 8008746:	edc6 7a01 	vstr	s15, [r6, #4]
 800874a:	e00d      	b.n	8008768 <__kernel_rem_pio2f+0x468>
 800874c:	aa56      	add	r2, sp, #344	; 0x158
 800874e:	4411      	add	r1, r2
 8008750:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8008618 <__kernel_rem_pio2f+0x318>
 8008754:	399c      	subs	r1, #156	; 0x9c
 8008756:	2b00      	cmp	r3, #0
 8008758:	da0e      	bge.n	8008778 <__kernel_rem_pio2f+0x478>
 800875a:	f1b8 0f00 	cmp.w	r8, #0
 800875e:	d001      	beq.n	8008764 <__kernel_rem_pio2f+0x464>
 8008760:	eef1 7a67 	vneg.f32	s15, s15
 8008764:	edc6 7a00 	vstr	s15, [r6]
 8008768:	9b01      	ldr	r3, [sp, #4]
 800876a:	f003 0007 	and.w	r0, r3, #7
 800876e:	b057      	add	sp, #348	; 0x15c
 8008770:	ecbd 8b04 	vpop	{d8-d9}
 8008774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008778:	ed31 7a01 	vldmdb	r1!, {s14}
 800877c:	3b01      	subs	r3, #1
 800877e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008782:	e7e8      	b.n	8008756 <__kernel_rem_pio2f+0x456>
 8008784:	ed71 7a01 	vldmdb	r1!, {s15}
 8008788:	3801      	subs	r0, #1
 800878a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800878e:	e7c4      	b.n	800871a <__kernel_rem_pio2f+0x41a>
 8008790:	eef0 7a47 	vmov.f32	s15, s14
 8008794:	e7c8      	b.n	8008728 <__kernel_rem_pio2f+0x428>
 8008796:	ecb0 7a01 	vldmia	r0!, {s14}
 800879a:	3101      	adds	r1, #1
 800879c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80087a0:	e7ca      	b.n	8008738 <__kernel_rem_pio2f+0x438>
 80087a2:	ed50 7a02 	vldr	s15, [r0, #-8]
 80087a6:	ed70 6a01 	vldmdb	r0!, {s13}
 80087aa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80087ae:	3c01      	subs	r4, #1
 80087b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80087b4:	ed00 7a01 	vstr	s14, [r0, #-4]
 80087b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087bc:	edc0 7a00 	vstr	s15, [r0]
 80087c0:	e78d      	b.n	80086de <__kernel_rem_pio2f+0x3de>
 80087c2:	ed50 7a02 	vldr	s15, [r0, #-8]
 80087c6:	ed70 6a01 	vldmdb	r0!, {s13}
 80087ca:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80087ce:	3c01      	subs	r4, #1
 80087d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80087d4:	ed00 7a01 	vstr	s14, [r0, #-4]
 80087d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087dc:	edc0 7a00 	vstr	s15, [r0]
 80087e0:	e781      	b.n	80086e6 <__kernel_rem_pio2f+0x3e6>
 80087e2:	ed31 7a01 	vldmdb	r1!, {s14}
 80087e6:	3b01      	subs	r3, #1
 80087e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80087ec:	e77f      	b.n	80086ee <__kernel_rem_pio2f+0x3ee>
 80087ee:	eef1 6a66 	vneg.f32	s13, s13
 80087f2:	eeb1 7a47 	vneg.f32	s14, s14
 80087f6:	edc6 6a00 	vstr	s13, [r6]
 80087fa:	ed86 7a01 	vstr	s14, [r6, #4]
 80087fe:	eef1 7a67 	vneg.f32	s15, s15
 8008802:	e781      	b.n	8008708 <__kernel_rem_pio2f+0x408>

08008804 <__kernel_tanf>:
 8008804:	b508      	push	{r3, lr}
 8008806:	ee10 3a10 	vmov	r3, s0
 800880a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800880e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8008812:	eef0 7a40 	vmov.f32	s15, s0
 8008816:	da17      	bge.n	8008848 <__kernel_tanf+0x44>
 8008818:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800881c:	ee17 1a10 	vmov	r1, s14
 8008820:	bb41      	cbnz	r1, 8008874 <__kernel_tanf+0x70>
 8008822:	1c43      	adds	r3, r0, #1
 8008824:	4313      	orrs	r3, r2
 8008826:	d108      	bne.n	800883a <__kernel_tanf+0x36>
 8008828:	f7fe ffac 	bl	8007784 <fabsf>
 800882c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008830:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008834:	eeb0 0a67 	vmov.f32	s0, s15
 8008838:	bd08      	pop	{r3, pc}
 800883a:	2801      	cmp	r0, #1
 800883c:	d0fa      	beq.n	8008834 <__kernel_tanf+0x30>
 800883e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008842:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008846:	e7f5      	b.n	8008834 <__kernel_tanf+0x30>
 8008848:	494e      	ldr	r1, [pc, #312]	; (8008984 <__kernel_tanf+0x180>)
 800884a:	428a      	cmp	r2, r1
 800884c:	dd12      	ble.n	8008874 <__kernel_tanf+0x70>
 800884e:	2b00      	cmp	r3, #0
 8008850:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8008988 <__kernel_tanf+0x184>
 8008854:	bfb8      	it	lt
 8008856:	eef1 7a40 	vneglt.f32	s15, s0
 800885a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800885e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800898c <__kernel_tanf+0x188>
 8008862:	bfb8      	it	lt
 8008864:	eef1 0a60 	vneglt.f32	s1, s1
 8008868:	ee77 0a60 	vsub.f32	s1, s14, s1
 800886c:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8008870:	eddf 0a47 	vldr	s1, [pc, #284]	; 8008990 <__kernel_tanf+0x18c>
 8008874:	ed9f 6a47 	vldr	s12, [pc, #284]	; 8008994 <__kernel_tanf+0x190>
 8008878:	eddf 5a47 	vldr	s11, [pc, #284]	; 8008998 <__kernel_tanf+0x194>
 800887c:	ed9f 5a47 	vldr	s10, [pc, #284]	; 800899c <__kernel_tanf+0x198>
 8008880:	4940      	ldr	r1, [pc, #256]	; (8008984 <__kernel_tanf+0x180>)
 8008882:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8008886:	428a      	cmp	r2, r1
 8008888:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800888c:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8008890:	eee7 5a06 	vfma.f32	s11, s14, s12
 8008894:	ed9f 6a42 	vldr	s12, [pc, #264]	; 80089a0 <__kernel_tanf+0x19c>
 8008898:	eea5 6a87 	vfma.f32	s12, s11, s14
 800889c:	eddf 5a41 	vldr	s11, [pc, #260]	; 80089a4 <__kernel_tanf+0x1a0>
 80088a0:	eee6 5a07 	vfma.f32	s11, s12, s14
 80088a4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80089a8 <__kernel_tanf+0x1a4>
 80088a8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80088ac:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80089ac <__kernel_tanf+0x1a8>
 80088b0:	eee6 5a07 	vfma.f32	s11, s12, s14
 80088b4:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 80089b0 <__kernel_tanf+0x1ac>
 80088b8:	eea7 6a05 	vfma.f32	s12, s14, s10
 80088bc:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80089b4 <__kernel_tanf+0x1b0>
 80088c0:	eea6 5a07 	vfma.f32	s10, s12, s14
 80088c4:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 80089b8 <__kernel_tanf+0x1b4>
 80088c8:	eea5 6a07 	vfma.f32	s12, s10, s14
 80088cc:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 80089bc <__kernel_tanf+0x1b8>
 80088d0:	eea6 5a07 	vfma.f32	s10, s12, s14
 80088d4:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 80089c0 <__kernel_tanf+0x1bc>
 80088d8:	eea5 6a07 	vfma.f32	s12, s10, s14
 80088dc:	eeb0 7a46 	vmov.f32	s14, s12
 80088e0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80088e4:	eeb0 6a60 	vmov.f32	s12, s1
 80088e8:	eea7 6a24 	vfma.f32	s12, s14, s9
 80088ec:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80089c4 <__kernel_tanf+0x1c0>
 80088f0:	eee6 0a26 	vfma.f32	s1, s12, s13
 80088f4:	eee4 0a87 	vfma.f32	s1, s9, s14
 80088f8:	ee77 6aa0 	vadd.f32	s13, s15, s1
 80088fc:	dd1d      	ble.n	800893a <__kernel_tanf+0x136>
 80088fe:	ee07 0a10 	vmov	s14, r0
 8008902:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008906:	ee66 5aa6 	vmul.f32	s11, s13, s13
 800890a:	ee76 6a87 	vadd.f32	s13, s13, s14
 800890e:	179b      	asrs	r3, r3, #30
 8008910:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8008914:	f003 0302 	and.w	r3, r3, #2
 8008918:	f1c3 0301 	rsb	r3, r3, #1
 800891c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008920:	ee76 0a60 	vsub.f32	s1, s12, s1
 8008924:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008928:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800892c:	ee07 3a90 	vmov	s15, r3
 8008930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008938:	e77c      	b.n	8008834 <__kernel_tanf+0x30>
 800893a:	2801      	cmp	r0, #1
 800893c:	d01f      	beq.n	800897e <__kernel_tanf+0x17a>
 800893e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008942:	eec7 5a26 	vdiv.f32	s11, s14, s13
 8008946:	4b20      	ldr	r3, [pc, #128]	; (80089c8 <__kernel_tanf+0x1c4>)
 8008948:	ee16 2a90 	vmov	r2, s13
 800894c:	401a      	ands	r2, r3
 800894e:	ee06 2a10 	vmov	s12, r2
 8008952:	ee15 2a90 	vmov	r2, s11
 8008956:	4013      	ands	r3, r2
 8008958:	ee07 3a10 	vmov	s14, r3
 800895c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008960:	eee6 6a07 	vfma.f32	s13, s12, s14
 8008964:	ee76 7a67 	vsub.f32	s15, s12, s15
 8008968:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800896c:	eef0 7a66 	vmov.f32	s15, s13
 8008970:	eee7 7a20 	vfma.f32	s15, s14, s1
 8008974:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8008978:	eef0 7a47 	vmov.f32	s15, s14
 800897c:	e75a      	b.n	8008834 <__kernel_tanf+0x30>
 800897e:	eef0 7a66 	vmov.f32	s15, s13
 8008982:	e757      	b.n	8008834 <__kernel_tanf+0x30>
 8008984:	3f2ca13f 	.word	0x3f2ca13f
 8008988:	3f490fda 	.word	0x3f490fda
 800898c:	33222168 	.word	0x33222168
 8008990:	00000000 	.word	0x00000000
 8008994:	37d95384 	.word	0x37d95384
 8008998:	3895c07a 	.word	0x3895c07a
 800899c:	b79bae5f 	.word	0xb79bae5f
 80089a0:	398137b9 	.word	0x398137b9
 80089a4:	3abede48 	.word	0x3abede48
 80089a8:	3c11371f 	.word	0x3c11371f
 80089ac:	3d5d0dd1 	.word	0x3d5d0dd1
 80089b0:	38a3f445 	.word	0x38a3f445
 80089b4:	3a1a26c8 	.word	0x3a1a26c8
 80089b8:	3b6b6916 	.word	0x3b6b6916
 80089bc:	3cb327a4 	.word	0x3cb327a4
 80089c0:	3e088889 	.word	0x3e088889
 80089c4:	3eaaaaab 	.word	0x3eaaaaab
 80089c8:	fffff000 	.word	0xfffff000

080089cc <with_errnof>:
 80089cc:	b510      	push	{r4, lr}
 80089ce:	ed2d 8b02 	vpush	{d8}
 80089d2:	eeb0 8a40 	vmov.f32	s16, s0
 80089d6:	4604      	mov	r4, r0
 80089d8:	f7fe fe24 	bl	8007624 <__errno>
 80089dc:	eeb0 0a48 	vmov.f32	s0, s16
 80089e0:	ecbd 8b02 	vpop	{d8}
 80089e4:	6004      	str	r4, [r0, #0]
 80089e6:	bd10      	pop	{r4, pc}

080089e8 <xflowf>:
 80089e8:	b130      	cbz	r0, 80089f8 <xflowf+0x10>
 80089ea:	eef1 7a40 	vneg.f32	s15, s0
 80089ee:	2022      	movs	r0, #34	; 0x22
 80089f0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80089f4:	f7ff bfea 	b.w	80089cc <with_errnof>
 80089f8:	eef0 7a40 	vmov.f32	s15, s0
 80089fc:	e7f7      	b.n	80089ee <xflowf+0x6>
	...

08008a00 <__math_uflowf>:
 8008a00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008a08 <__math_uflowf+0x8>
 8008a04:	f7ff bff0 	b.w	80089e8 <xflowf>
 8008a08:	10000000 	.word	0x10000000

08008a0c <__math_may_uflowf>:
 8008a0c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008a14 <__math_may_uflowf+0x8>
 8008a10:	f7ff bfea 	b.w	80089e8 <xflowf>
 8008a14:	1a200000 	.word	0x1a200000

08008a18 <__math_oflowf>:
 8008a18:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008a20 <__math_oflowf+0x8>
 8008a1c:	f7ff bfe4 	b.w	80089e8 <xflowf>
 8008a20:	70000000 	.word	0x70000000

08008a24 <__math_divzerof>:
 8008a24:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008a28:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8008a32:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8008a40 <__math_divzerof+0x1c>
 8008a36:	2022      	movs	r0, #34	; 0x22
 8008a38:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8008a3c:	f7ff bfc6 	b.w	80089cc <with_errnof>
 8008a40:	00000000 	.word	0x00000000

08008a44 <__math_invalidf>:
 8008a44:	eef0 7a40 	vmov.f32	s15, s0
 8008a48:	ee30 7a40 	vsub.f32	s14, s0, s0
 8008a4c:	eef4 7a67 	vcmp.f32	s15, s15
 8008a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a54:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8008a58:	d602      	bvs.n	8008a60 <__math_invalidf+0x1c>
 8008a5a:	2021      	movs	r0, #33	; 0x21
 8008a5c:	f7ff bfb6 	b.w	80089cc <with_errnof>
 8008a60:	4770      	bx	lr

08008a62 <matherr>:
 8008a62:	2000      	movs	r0, #0
 8008a64:	4770      	bx	lr
	...

08008a68 <nan>:
 8008a68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008a70 <nan+0x8>
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	00000000 	.word	0x00000000
 8008a74:	7ff80000 	.word	0x7ff80000

08008a78 <expm1f>:
 8008a78:	ee10 2a10 	vmov	r2, s0
 8008a7c:	4984      	ldr	r1, [pc, #528]	; (8008c90 <expm1f+0x218>)
 8008a7e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8008a82:	428b      	cmp	r3, r1
 8008a84:	d923      	bls.n	8008ace <expm1f+0x56>
 8008a86:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008a8a:	d902      	bls.n	8008a92 <expm1f+0x1a>
 8008a8c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008a90:	4770      	bx	lr
 8008a92:	d105      	bne.n	8008aa0 <expm1f+0x28>
 8008a94:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8008a98:	2a00      	cmp	r2, #0
 8008a9a:	fe20 0a27 	vselge.f32	s0, s0, s15
 8008a9e:	4770      	bx	lr
 8008aa0:	2a00      	cmp	r2, #0
 8008aa2:	db08      	blt.n	8008ab6 <expm1f+0x3e>
 8008aa4:	4a7b      	ldr	r2, [pc, #492]	; (8008c94 <expm1f+0x21c>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	f240 80ea 	bls.w	8008c80 <expm1f+0x208>
 8008aac:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8008c98 <expm1f+0x220>
 8008ab0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008ab4:	4770      	bx	lr
 8008ab6:	eddf 7a79 	vldr	s15, [pc, #484]	; 8008c9c <expm1f+0x224>
 8008aba:	ee70 7a27 	vadd.f32	s15, s0, s15
 8008abe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ac6:	d554      	bpl.n	8008b72 <expm1f+0xfa>
 8008ac8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8008acc:	4770      	bx	lr
 8008ace:	4974      	ldr	r1, [pc, #464]	; (8008ca0 <expm1f+0x228>)
 8008ad0:	428b      	cmp	r3, r1
 8008ad2:	d96c      	bls.n	8008bae <expm1f+0x136>
 8008ad4:	4973      	ldr	r1, [pc, #460]	; (8008ca4 <expm1f+0x22c>)
 8008ad6:	428b      	cmp	r3, r1
 8008ad8:	d84b      	bhi.n	8008b72 <expm1f+0xfa>
 8008ada:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8008ca8 <expm1f+0x230>
 8008ade:	2a00      	cmp	r2, #0
 8008ae0:	bfa7      	ittee	ge
 8008ae2:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8008ae6:	eddf 7a71 	vldrge	s15, [pc, #452]	; 8008cac <expm1f+0x234>
 8008aea:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 8008cb0 <expm1f+0x238>
 8008aee:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8008af2:	bfac      	ite	ge
 8008af4:	2301      	movge	r3, #1
 8008af6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008afa:	ee37 0a67 	vsub.f32	s0, s14, s15
 8008afe:	ee37 7a40 	vsub.f32	s14, s14, s0
 8008b02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b06:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8008b0a:	ee20 5a25 	vmul.f32	s10, s0, s11
 8008b0e:	eddf 6a69 	vldr	s13, [pc, #420]	; 8008cb4 <expm1f+0x23c>
 8008b12:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8008cb8 <expm1f+0x240>
 8008b16:	ee20 7a05 	vmul.f32	s14, s0, s10
 8008b1a:	eea7 6a26 	vfma.f32	s12, s14, s13
 8008b1e:	eddf 6a67 	vldr	s13, [pc, #412]	; 8008cbc <expm1f+0x244>
 8008b22:	eee6 6a07 	vfma.f32	s13, s12, s14
 8008b26:	ed9f 6a66 	vldr	s12, [pc, #408]	; 8008cc0 <expm1f+0x248>
 8008b2a:	eea6 6a87 	vfma.f32	s12, s13, s14
 8008b2e:	eddf 6a65 	vldr	s13, [pc, #404]	; 8008cc4 <expm1f+0x24c>
 8008b32:	eee6 6a07 	vfma.f32	s13, s12, s14
 8008b36:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008b3a:	eef0 4a46 	vmov.f32	s9, s12
 8008b3e:	eee6 4a87 	vfma.f32	s9, s13, s14
 8008b42:	eef0 6a64 	vmov.f32	s13, s9
 8008b46:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8008b4a:	eee5 4a66 	vfms.f32	s9, s10, s13
 8008b4e:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8008b52:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8008b56:	eee0 6a64 	vfms.f32	s13, s0, s9
 8008b5a:	eef0 4a66 	vmov.f32	s9, s13
 8008b5e:	eec5 6a24 	vdiv.f32	s13, s10, s9
 8008b62:	ee66 6a87 	vmul.f32	s13, s13, s14
 8008b66:	bb83      	cbnz	r3, 8008bca <expm1f+0x152>
 8008b68:	eef0 7a47 	vmov.f32	s15, s14
 8008b6c:	eed0 7a26 	vfnms.f32	s15, s0, s13
 8008b70:	e026      	b.n	8008bc0 <expm1f+0x148>
 8008b72:	eddf 7a55 	vldr	s15, [pc, #340]	; 8008cc8 <expm1f+0x250>
 8008b76:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008b7a:	ee20 7a27 	vmul.f32	s14, s0, s15
 8008b7e:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8008b82:	2a00      	cmp	r2, #0
 8008b84:	fe66 7aa7 	vselge.f32	s15, s13, s15
 8008b88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b8c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8008ca8 <expm1f+0x230>
 8008b90:	eddf 6a46 	vldr	s13, [pc, #280]	; 8008cac <expm1f+0x234>
 8008b94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b98:	ee17 3a90 	vmov	r3, s15
 8008b9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ba0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008ba4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008ba8:	eeb0 7a40 	vmov.f32	s14, s0
 8008bac:	e7a5      	b.n	8008afa <expm1f+0x82>
 8008bae:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 8008bb2:	d208      	bcs.n	8008bc6 <expm1f+0x14e>
 8008bb4:	eddf 7a38 	vldr	s15, [pc, #224]	; 8008c98 <expm1f+0x220>
 8008bb8:	ee70 7a27 	vadd.f32	s15, s0, s15
 8008bbc:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8008bc0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008bc4:	4770      	bx	lr
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	e79d      	b.n	8008b06 <expm1f+0x8e>
 8008bca:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008bce:	1c5a      	adds	r2, r3, #1
 8008bd0:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8008bd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008bd8:	d106      	bne.n	8008be8 <expm1f+0x170>
 8008bda:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008bde:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8008be2:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8008be6:	4770      	bx	lr
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d118      	bne.n	8008c1e <expm1f+0x1a6>
 8008bec:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8008bf0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bf8:	bf41      	itttt	mi
 8008bfa:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8008bfe:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 8008c02:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 8008c06:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 8008c0a:	bf5f      	itttt	pl
 8008c0c:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 8008c10:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 8008c14:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 8008c18:	eeb0 0a46 	vmovpl.f32	s0, s12
 8008c1c:	4770      	bx	lr
 8008c1e:	1c5a      	adds	r2, r3, #1
 8008c20:	2a39      	cmp	r2, #57	; 0x39
 8008c22:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8008c26:	d90b      	bls.n	8008c40 <expm1f+0x1c8>
 8008c28:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008c2c:	ee36 0a40 	vsub.f32	s0, s12, s0
 8008c30:	ee10 3a10 	vmov	r3, s0
 8008c34:	440b      	add	r3, r1
 8008c36:	ee00 3a10 	vmov	s0, r3
 8008c3a:	ee30 0a46 	vsub.f32	s0, s0, s12
 8008c3e:	4770      	bx	lr
 8008c40:	2b16      	cmp	r3, #22
 8008c42:	dc11      	bgt.n	8008c68 <expm1f+0x1f0>
 8008c44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008c48:	fa42 f303 	asr.w	r3, r2, r3
 8008c4c:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8008c50:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008c54:	ee07 3a90 	vmov	s15, r3
 8008c58:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008c5c:	ee10 3a10 	vmov	r3, s0
 8008c60:	440b      	add	r3, r1
 8008c62:	ee00 3a10 	vmov	s0, r3
 8008c66:	4770      	bx	lr
 8008c68:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8008c6c:	05db      	lsls	r3, r3, #23
 8008c6e:	ee07 3a10 	vmov	s14, r3
 8008c72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008c76:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008c7a:	ee30 0a06 	vadd.f32	s0, s0, s12
 8008c7e:	e7ed      	b.n	8008c5c <expm1f+0x1e4>
 8008c80:	eddf 7a11 	vldr	s15, [pc, #68]	; 8008cc8 <expm1f+0x250>
 8008c84:	ee20 7a27 	vmul.f32	s14, s0, s15
 8008c88:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008c8c:	e77c      	b.n	8008b88 <expm1f+0x110>
 8008c8e:	bf00      	nop
 8008c90:	4195b843 	.word	0x4195b843
 8008c94:	42b17217 	.word	0x42b17217
 8008c98:	7149f2ca 	.word	0x7149f2ca
 8008c9c:	0da24260 	.word	0x0da24260
 8008ca0:	3eb17218 	.word	0x3eb17218
 8008ca4:	3f851591 	.word	0x3f851591
 8008ca8:	3f317180 	.word	0x3f317180
 8008cac:	3717f7d1 	.word	0x3717f7d1
 8008cb0:	b717f7d1 	.word	0xb717f7d1
 8008cb4:	b457edbb 	.word	0xb457edbb
 8008cb8:	36867e54 	.word	0x36867e54
 8008cbc:	b8a670cd 	.word	0xb8a670cd
 8008cc0:	3ad00d01 	.word	0x3ad00d01
 8008cc4:	bd088889 	.word	0xbd088889
 8008cc8:	3fb8aa3b 	.word	0x3fb8aa3b

08008ccc <floorf>:
 8008ccc:	ee10 3a10 	vmov	r3, s0
 8008cd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008cd4:	0dca      	lsrs	r2, r1, #23
 8008cd6:	3a7f      	subs	r2, #127	; 0x7f
 8008cd8:	2a16      	cmp	r2, #22
 8008cda:	dc2a      	bgt.n	8008d32 <floorf+0x66>
 8008cdc:	2a00      	cmp	r2, #0
 8008cde:	da11      	bge.n	8008d04 <floorf+0x38>
 8008ce0:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008d44 <floorf+0x78>
 8008ce4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008ce8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cf0:	dd05      	ble.n	8008cfe <floorf+0x32>
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	da23      	bge.n	8008d3e <floorf+0x72>
 8008cf6:	4a14      	ldr	r2, [pc, #80]	; (8008d48 <floorf+0x7c>)
 8008cf8:	2900      	cmp	r1, #0
 8008cfa:	bf18      	it	ne
 8008cfc:	4613      	movne	r3, r2
 8008cfe:	ee00 3a10 	vmov	s0, r3
 8008d02:	4770      	bx	lr
 8008d04:	4911      	ldr	r1, [pc, #68]	; (8008d4c <floorf+0x80>)
 8008d06:	4111      	asrs	r1, r2
 8008d08:	420b      	tst	r3, r1
 8008d0a:	d0fa      	beq.n	8008d02 <floorf+0x36>
 8008d0c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008d44 <floorf+0x78>
 8008d10:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008d14:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d1c:	ddef      	ble.n	8008cfe <floorf+0x32>
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	bfbe      	ittt	lt
 8008d22:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008d26:	fa40 f202 	asrlt.w	r2, r0, r2
 8008d2a:	189b      	addlt	r3, r3, r2
 8008d2c:	ea23 0301 	bic.w	r3, r3, r1
 8008d30:	e7e5      	b.n	8008cfe <floorf+0x32>
 8008d32:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008d36:	d3e4      	bcc.n	8008d02 <floorf+0x36>
 8008d38:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008d3c:	4770      	bx	lr
 8008d3e:	2300      	movs	r3, #0
 8008d40:	e7dd      	b.n	8008cfe <floorf+0x32>
 8008d42:	bf00      	nop
 8008d44:	7149f2ca 	.word	0x7149f2ca
 8008d48:	bf800000 	.word	0xbf800000
 8008d4c:	007fffff 	.word	0x007fffff

08008d50 <scalbnf>:
 8008d50:	b508      	push	{r3, lr}
 8008d52:	ee10 2a10 	vmov	r2, s0
 8008d56:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8008d5a:	ed2d 8b02 	vpush	{d8}
 8008d5e:	eef0 0a40 	vmov.f32	s1, s0
 8008d62:	d004      	beq.n	8008d6e <scalbnf+0x1e>
 8008d64:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008d68:	d306      	bcc.n	8008d78 <scalbnf+0x28>
 8008d6a:	ee70 0a00 	vadd.f32	s1, s0, s0
 8008d6e:	ecbd 8b02 	vpop	{d8}
 8008d72:	eeb0 0a60 	vmov.f32	s0, s1
 8008d76:	bd08      	pop	{r3, pc}
 8008d78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d7c:	d21c      	bcs.n	8008db8 <scalbnf+0x68>
 8008d7e:	4b1f      	ldr	r3, [pc, #124]	; (8008dfc <scalbnf+0xac>)
 8008d80:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008e00 <scalbnf+0xb0>
 8008d84:	4298      	cmp	r0, r3
 8008d86:	ee60 0a27 	vmul.f32	s1, s0, s15
 8008d8a:	db10      	blt.n	8008dae <scalbnf+0x5e>
 8008d8c:	ee10 2a90 	vmov	r2, s1
 8008d90:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8008d94:	3b19      	subs	r3, #25
 8008d96:	4403      	add	r3, r0
 8008d98:	2bfe      	cmp	r3, #254	; 0xfe
 8008d9a:	dd0f      	ble.n	8008dbc <scalbnf+0x6c>
 8008d9c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8008e04 <scalbnf+0xb4>
 8008da0:	eeb0 0a48 	vmov.f32	s0, s16
 8008da4:	f000 f834 	bl	8008e10 <copysignf>
 8008da8:	ee60 0a08 	vmul.f32	s1, s0, s16
 8008dac:	e7df      	b.n	8008d6e <scalbnf+0x1e>
 8008dae:	eddf 7a16 	vldr	s15, [pc, #88]	; 8008e08 <scalbnf+0xb8>
 8008db2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8008db6:	e7da      	b.n	8008d6e <scalbnf+0x1e>
 8008db8:	0ddb      	lsrs	r3, r3, #23
 8008dba:	e7ec      	b.n	8008d96 <scalbnf+0x46>
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	dd06      	ble.n	8008dce <scalbnf+0x7e>
 8008dc0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008dc4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008dc8:	ee00 3a90 	vmov	s1, r3
 8008dcc:	e7cf      	b.n	8008d6e <scalbnf+0x1e>
 8008dce:	f113 0f16 	cmn.w	r3, #22
 8008dd2:	da06      	bge.n	8008de2 <scalbnf+0x92>
 8008dd4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008dd8:	4298      	cmp	r0, r3
 8008dda:	dcdf      	bgt.n	8008d9c <scalbnf+0x4c>
 8008ddc:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8008e08 <scalbnf+0xb8>
 8008de0:	e7de      	b.n	8008da0 <scalbnf+0x50>
 8008de2:	3319      	adds	r3, #25
 8008de4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008de8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008dec:	eddf 7a07 	vldr	s15, [pc, #28]	; 8008e0c <scalbnf+0xbc>
 8008df0:	ee07 3a10 	vmov	s14, r3
 8008df4:	ee67 0a27 	vmul.f32	s1, s14, s15
 8008df8:	e7b9      	b.n	8008d6e <scalbnf+0x1e>
 8008dfa:	bf00      	nop
 8008dfc:	ffff3cb0 	.word	0xffff3cb0
 8008e00:	4c000000 	.word	0x4c000000
 8008e04:	7149f2ca 	.word	0x7149f2ca
 8008e08:	0da24260 	.word	0x0da24260
 8008e0c:	33000000 	.word	0x33000000

08008e10 <copysignf>:
 8008e10:	ee10 3a10 	vmov	r3, s0
 8008e14:	ee10 2a90 	vmov	r2, s1
 8008e18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e1c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008e20:	4313      	orrs	r3, r2
 8008e22:	ee00 3a10 	vmov	s0, r3
 8008e26:	4770      	bx	lr

08008e28 <_init>:
 8008e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e2a:	bf00      	nop
 8008e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e2e:	bc08      	pop	{r3}
 8008e30:	469e      	mov	lr, r3
 8008e32:	4770      	bx	lr

08008e34 <_fini>:
 8008e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e36:	bf00      	nop
 8008e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e3a:	bc08      	pop	{r3}
 8008e3c:	469e      	mov	lr, r3
 8008e3e:	4770      	bx	lr
