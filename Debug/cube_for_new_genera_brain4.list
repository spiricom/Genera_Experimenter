
cube_for_new_genera_brain4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7c4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004020  0800aa60  0800aa60  0001aa60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ea80  0800ea80  0001ea80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ea84  0800ea84  0001ea84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000104  20000000  0800ea88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0001ac54  20000108  0800eb8c  00020108  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  2001ad5c  0800eb8c  0002ad5c  2**0
                  ALLOC
  8 .RAM_D1       00064a80  24000000  24000000  00030000  2**5
                  ALLOC
  9 .RAM_D2       00004430  30000000  30000000  00030000  2**5
                  ALLOC
 10 .SDRAM        02000000  60000000  60000000  00030000  2**5
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005c2b0  00000000  00000000  00020132  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008e20  00000000  00000000  0007c3e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0002b48b  00000000  00000000  00085202  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002000  00000000  00000000  000b0690  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00007680  00000000  00000000  000b2690  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0003f5ac  00000000  00000000  000b9d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0002ad62  00000000  00000000  000f92bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0017962f  00000000  00000000  0012401e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0029d64d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000750c  00000000  00000000  0029d6c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000108 	.word	0x20000108
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800aa44 	.word	0x0800aa44

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2000010c 	.word	0x2000010c
 80002d4:	0800aa44 	.word	0x0800aa44

080002d8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80002d8:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <HAL_InitTick+0x40>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	b90b      	cbnz	r3, 80002e2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80002de:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80002e0:	4770      	bx	lr
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80002e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002e6:	490d      	ldr	r1, [pc, #52]	; (800031c <HAL_InitTick+0x44>)
 80002e8:	fbb2 f3f3 	udiv	r3, r2, r3
{
 80002ec:	b510      	push	{r4, lr}
 80002ee:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80002f0:	6808      	ldr	r0, [r1, #0]
 80002f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80002f6:	f000 fd2d 	bl	8000d54 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002fa:	2c0f      	cmp	r4, #15
 80002fc:	d800      	bhi.n	8000300 <HAL_InitTick+0x28>
 80002fe:	b108      	cbz	r0, 8000304 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000300:	2001      	movs	r0, #1
}
 8000302:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000304:	2200      	movs	r2, #0
 8000306:	4621      	mov	r1, r4
 8000308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800030c:	f000 fcde 	bl	8000ccc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <HAL_InitTick+0x48>)
 8000312:	2000      	movs	r0, #0
 8000314:	601c      	str	r4, [r3, #0]
}
 8000316:	bd10      	pop	{r4, pc}
 8000318:	20000000 	.word	0x20000000
 800031c:	20000014 	.word	0x20000014
 8000320:	20000004 	.word	0x20000004

08000324 <HAL_Init>:
{
 8000324:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000326:	2003      	movs	r0, #3
{
 8000328:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800032a:	f000 fcbb 	bl	8000ca4 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800032e:	4c12      	ldr	r4, [pc, #72]	; (8000378 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000330:	f002 ff4c 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 8000334:	4a11      	ldr	r2, [pc, #68]	; (800037c <HAL_Init+0x58>)
 8000336:	4912      	ldr	r1, [pc, #72]	; (8000380 <HAL_Init+0x5c>)
 8000338:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800033a:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800033c:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 8000340:	4d10      	ldr	r5, [pc, #64]	; (8000384 <HAL_Init+0x60>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000342:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000346:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000348:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800034a:	f003 031f 	and.w	r3, r3, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800034e:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000352:	fa20 f303 	lsr.w	r3, r0, r3
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000356:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000358:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 800035c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800035e:	6022      	str	r2, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000360:	f7ff ffba 	bl	80002d8 <HAL_InitTick>
 8000364:	b110      	cbz	r0, 800036c <HAL_Init+0x48>
    return HAL_ERROR;
 8000366:	2001      	movs	r0, #1
}
 8000368:	b003      	add	sp, #12
 800036a:	bd30      	pop	{r4, r5, pc}
 800036c:	9001      	str	r0, [sp, #4]
  HAL_MspInit();
 800036e:	f008 fa37 	bl	80087e0 <HAL_MspInit>
  return HAL_OK;
 8000372:	9801      	ldr	r0, [sp, #4]
}
 8000374:	b003      	add	sp, #12
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	20000018 	.word	0x20000018
 800037c:	58024400 	.word	0x58024400
 8000380:	0800aa7c 	.word	0x0800aa7c
 8000384:	20000014 	.word	0x20000014

08000388 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000388:	4a03      	ldr	r2, [pc, #12]	; (8000398 <HAL_IncTick+0x10>)
 800038a:	4b04      	ldr	r3, [pc, #16]	; (800039c <HAL_IncTick+0x14>)
 800038c:	6811      	ldr	r1, [r2, #0]
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	440b      	add	r3, r1
 8000392:	6013      	str	r3, [r2, #0]
}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	20000148 	.word	0x20000148
 800039c:	20000000 	.word	0x20000000

080003a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80003a0:	4b01      	ldr	r3, [pc, #4]	; (80003a8 <HAL_GetTick+0x8>)
 80003a2:	6818      	ldr	r0, [r3, #0]
}
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	20000148 	.word	0x20000148

080003ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003ac:	b538      	push	{r3, r4, r5, lr}
 80003ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80003b0:	f7ff fff6 	bl	80003a0 <HAL_GetTick>
 80003b4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003b6:	1c63      	adds	r3, r4, #1
 80003b8:	d002      	beq.n	80003c0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80003ba:	4b04      	ldr	r3, [pc, #16]	; (80003cc <HAL_Delay+0x20>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80003c0:	f7ff ffee 	bl	80003a0 <HAL_GetTick>
 80003c4:	1b40      	subs	r0, r0, r5
 80003c6:	42a0      	cmp	r0, r4
 80003c8:	d3fa      	bcc.n	80003c0 <HAL_Delay+0x14>
  {
  }
}
 80003ca:	bd38      	pop	{r3, r4, r5, pc}
 80003cc:	20000000 	.word	0x20000000

080003d0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80003d0:	4b01      	ldr	r3, [pc, #4]	; (80003d8 <HAL_GetREVID+0x8>)
 80003d2:	6818      	ldr	r0, [r3, #0]
}
 80003d4:	0c00      	lsrs	r0, r0, #16
 80003d6:	4770      	bx	lr
 80003d8:	5c001000 	.word	0x5c001000

080003dc <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 80003dc:	4a03      	ldr	r2, [pc, #12]	; (80003ec <HAL_SetFMCMemorySwappingConfig+0x10>)
 80003de:	6813      	ldr	r3, [r2, #0]
 80003e0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80003e4:	4318      	orrs	r0, r3
 80003e6:	6010      	str	r0, [r2, #0]
}
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	52004000 	.word	0x52004000

080003f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80003f0:	4603      	mov	r3, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80003f2:	2000      	movs	r0, #0
{
 80003f4:	b4f0      	push	{r4, r5, r6, r7}
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80003f6:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
{
 80003fa:	b082      	sub	sp, #8
  __HAL_LOCK(hadc);
 80003fc:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0;
 80003fe:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8000400:	f000 8130 	beq.w	8000664 <HAL_ADC_ConfigChannel+0x274>
 8000404:	2001      	movs	r0, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000406:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8000408:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800040c:	68a2      	ldr	r2, [r4, #8]
 800040e:	0757      	lsls	r7, r2, #29
 8000410:	d443      	bmi.n	800049a <HAL_ADC_ConfigChannel+0xaa>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8000412:	680a      	ldr	r2, [r1, #0]
 8000414:	f3c2 0513 	ubfx	r5, r2, #0, #20
 8000418:	2d00      	cmp	r5, #0
 800041a:	f040 80a2 	bne.w	8000562 <HAL_ADC_ConfigChannel+0x172>
 800041e:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8000422:	4090      	lsls	r0, r2
 8000424:	69e2      	ldr	r2, [r4, #28]
  MODIFY_REG(*preg,
 8000426:	271f      	movs	r7, #31
 8000428:	4310      	orrs	r0, r2
 800042a:	61e0      	str	r0, [r4, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800042c:	6848      	ldr	r0, [r1, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800042e:	681c      	ldr	r4, [r3, #0]
 8000430:	0985      	lsrs	r5, r0, #6
  MODIFY_REG(*preg,
 8000432:	680a      	ldr	r2, [r1, #0]
 8000434:	4038      	ands	r0, r7
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000436:	3430      	adds	r4, #48	; 0x30
 8000438:	f005 050c 	and.w	r5, r5, #12
  MODIFY_REG(*preg,
 800043c:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8000440:	4087      	lsls	r7, r0
 8000442:	592e      	ldr	r6, [r5, r4]
 8000444:	4082      	lsls	r2, r0
 8000446:	ea26 0007 	bic.w	r0, r6, r7
 800044a:	4302      	orrs	r2, r0
 800044c:	512a      	str	r2, [r5, r4]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800044e:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000450:	6890      	ldr	r0, [r2, #8]
 8000452:	0746      	lsls	r6, r0, #29
 8000454:	f100 8083 	bmi.w	800055e <HAL_ADC_ConfigChannel+0x16e>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000458:	6895      	ldr	r5, [r2, #8]
 800045a:	f015 0508 	ands.w	r5, r5, #8
 800045e:	d026      	beq.n	80004ae <HAL_ADC_ConfigChannel+0xbe>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000460:	6890      	ldr	r0, [r2, #8]
 8000462:	07c5      	lsls	r5, r0, #31
 8000464:	d417      	bmi.n	8000496 <HAL_ADC_ConfigChannel+0xa6>
  MODIFY_REG(ADCx->DIFSEL,
 8000466:	68cc      	ldr	r4, [r1, #12]
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000468:	680e      	ldr	r6, [r1, #0]
 800046a:	f004 0518 	and.w	r5, r4, #24
 800046e:	48bf      	ldr	r0, [pc, #764]	; (800076c <HAL_ADC_ConfigChannel+0x37c>)
 8000470:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
 8000474:	40e8      	lsrs	r0, r5
 8000476:	f3c6 0513 	ubfx	r5, r6, #0, #20
 800047a:	4030      	ands	r0, r6
 800047c:	ea24 0405 	bic.w	r4, r4, r5

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000480:	4dbb      	ldr	r5, [pc, #748]	; (8000770 <HAL_ADC_ConfigChannel+0x380>)
 8000482:	4320      	orrs	r0, r4
 8000484:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
 8000488:	68ca      	ldr	r2, [r1, #12]
 800048a:	42aa      	cmp	r2, r5
 800048c:	f000 80a3 	beq.w	80005d6 <HAL_ADC_ConfigChannel+0x1e6>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000490:	6809      	ldr	r1, [r1, #0]
 8000492:	2900      	cmp	r1, #0
 8000494:	db6d      	blt.n	8000572 <HAL_ADC_ConfigChannel+0x182>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000496:	2000      	movs	r0, #0
 8000498:	e003      	b.n	80004a2 <HAL_ADC_ConfigChannel+0xb2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800049a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800049c:	f042 0220 	orr.w	r2, r2, #32
 80004a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80004a2:	2200      	movs	r2, #0
 80004a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80004a8:	b002      	add	sp, #8
 80004aa:	bcf0      	pop	{r4, r5, r6, r7}
 80004ac:	4770      	bx	lr
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80004ae:	680c      	ldr	r4, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80004b0:	3214      	adds	r2, #20
  MODIFY_REG(*preg,
 80004b2:	2007      	movs	r0, #7
 80004b4:	688f      	ldr	r7, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80004b6:	0de6      	lsrs	r6, r4, #23
  MODIFY_REG(*preg,
 80004b8:	f3c4 5404 	ubfx	r4, r4, #20, #5
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80004bc:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 80004c0:	fa00 fc04 	lsl.w	ip, r0, r4
 80004c4:	fa07 f404 	lsl.w	r4, r7, r4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80004c8:	4faa      	ldr	r7, [pc, #680]	; (8000774 <HAL_ADC_ConfigChannel+0x384>)
 80004ca:	58b0      	ldr	r0, [r6, r2]
 80004cc:	ea20 000c 	bic.w	r0, r0, ip
 80004d0:	4320      	orrs	r0, r4
 80004d2:	50b0      	str	r0, [r6, r2]
 80004d4:	683a      	ldr	r2, [r7, #0]
 80004d6:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80004da:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80004de:	f000 80b8 	beq.w	8000652 <HAL_ADC_ConfigChannel+0x262>
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	6948      	ldr	r0, [r1, #20]
 80004e6:	68d4      	ldr	r4, [r2, #12]
 80004e8:	f014 0f10 	tst.w	r4, #16
 80004ec:	68d4      	ldr	r4, [r2, #12]
 80004ee:	f040 80d9 	bne.w	80006a4 <HAL_ADC_ConfigChannel+0x2b4>
 80004f2:	f3c4 0482 	ubfx	r4, r4, #2, #3
 80004f6:	0064      	lsls	r4, r4, #1
 80004f8:	fa00 f404 	lsl.w	r4, r0, r4
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80004fc:	690e      	ldr	r6, [r1, #16]
 80004fe:	6808      	ldr	r0, [r1, #0]
 8000500:	2e04      	cmp	r6, #4
 8000502:	f000 80b3 	beq.w	800066c <HAL_ADC_ConfigChannel+0x27c>
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000506:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 8000508:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800050c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8000510:	4320      	orrs	r0, r4
 8000512:	f007 4400 	and.w	r4, r7, #2147483648	; 0x80000000
 8000516:	4320      	orrs	r0, r4
 8000518:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800051c:	6818      	ldr	r0, [r3, #0]
 800051e:	7e4e      	ldrb	r6, [r1, #25]
 8000520:	690c      	ldr	r4, [r1, #16]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000522:	3060      	adds	r0, #96	; 0x60
 8000524:	2e01      	cmp	r6, #1
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000526:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
 800052a:	bf14      	ite	ne
 800052c:	2600      	movne	r6, #0
 800052e:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8000532:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000536:	4332      	orrs	r2, r6
 8000538:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800053c:	7e0c      	ldrb	r4, [r1, #24]
 800053e:	6818      	ldr	r0, [r3, #0]
 8000540:	2c01      	cmp	r4, #1
 8000542:	690a      	ldr	r2, [r1, #16]
 8000544:	d104      	bne.n	8000550 <HAL_ADC_ConfigChannel+0x160>
 8000546:	f002 021f 	and.w	r2, r2, #31
 800054a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800054e:	4095      	lsls	r5, r2
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000550:	6902      	ldr	r2, [r0, #16]
 8000552:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000556:	4315      	orrs	r5, r2
 8000558:	6105      	str	r5, [r0, #16]
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	e780      	b.n	8000460 <HAL_ADC_ConfigChannel+0x70>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800055e:	6890      	ldr	r0, [r2, #8]
 8000560:	e77e      	b.n	8000460 <HAL_ADC_ConfigChannel+0x70>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000562:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8000566:	fab2 f282 	clz	r2, r2
 800056a:	f002 021f 	and.w	r2, r2, #31
 800056e:	4090      	lsls	r0, r2
 8000570:	e758      	b.n	8000424 <HAL_ADC_ConfigChannel+0x34>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000572:	6818      	ldr	r0, [r3, #0]
 8000574:	4a80      	ldr	r2, [pc, #512]	; (8000778 <HAL_ADC_ConfigChannel+0x388>)
 8000576:	4290      	cmp	r0, r2
 8000578:	f000 80c6 	beq.w	8000708 <HAL_ADC_ConfigChannel+0x318>
 800057c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000580:	4290      	cmp	r0, r2
 8000582:	f000 80c1 	beq.w	8000708 <HAL_ADC_ConfigChannel+0x318>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000586:	4e7d      	ldr	r6, [pc, #500]	; (800077c <HAL_ADC_ConfigChannel+0x38c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000588:	4d7d      	ldr	r5, [pc, #500]	; (8000780 <HAL_ADC_ConfigChannel+0x390>)
 800058a:	68ac      	ldr	r4, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800058c:	68b2      	ldr	r2, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800058e:	f004 76e0 	and.w	r6, r4, #29360128	; 0x1c00000
 8000592:	43d2      	mvns	r2, r2
 8000594:	f002 0201 	and.w	r2, r2, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000598:	2a00      	cmp	r2, #0
 800059a:	f000 80c3 	beq.w	8000724 <HAL_ADC_ConfigChannel+0x334>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800059e:	4a79      	ldr	r2, [pc, #484]	; (8000784 <HAL_ADC_ConfigChannel+0x394>)
 80005a0:	4291      	cmp	r1, r2
 80005a2:	f000 80f9 	beq.w	8000798 <HAL_ADC_ConfigChannel+0x3a8>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80005a6:	4a78      	ldr	r2, [pc, #480]	; (8000788 <HAL_ADC_ConfigChannel+0x398>)
 80005a8:	4291      	cmp	r1, r2
 80005aa:	f000 8117 	beq.w	80007dc <HAL_ADC_ConfigChannel+0x3ec>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80005ae:	4a77      	ldr	r2, [pc, #476]	; (800078c <HAL_ADC_ConfigChannel+0x39c>)
 80005b0:	4291      	cmp	r1, r2
 80005b2:	f47f af70 	bne.w	8000496 <HAL_ADC_ConfigChannel+0xa6>
            if (ADC_VREFINT_INSTANCE(hadc))
 80005b6:	0262      	lsls	r2, r4, #9
 80005b8:	f53f af6d 	bmi.w	8000496 <HAL_ADC_ConfigChannel+0xa6>
 80005bc:	4a6f      	ldr	r2, [pc, #444]	; (800077c <HAL_ADC_ConfigChannel+0x38c>)
 80005be:	4290      	cmp	r0, r2
 80005c0:	f47f af69 	bne.w	8000496 <HAL_ADC_ConfigChannel+0xa6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80005c4:	68a9      	ldr	r1, [r5, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80005c6:	f446 0280 	orr.w	r2, r6, #4194304	; 0x400000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005ca:	2000      	movs	r0, #0
 80005cc:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80005d0:	430a      	orrs	r2, r1
 80005d2:	60aa      	str	r2, [r5, #8]
 80005d4:	e765      	b.n	80004a2 <HAL_ADC_ConfigChannel+0xb2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80005d6:	6808      	ldr	r0, [r1, #0]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80005d8:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80005da:	f3c0 0213 	ubfx	r2, r0, #0, #20
 80005de:	2a00      	cmp	r2, #0
 80005e0:	d066      	beq.n	80006b0 <HAL_ADC_ConfigChannel+0x2c0>
 80005e2:	fa90 f2a0 	rbit	r2, r0
 80005e6:	fab2 f282 	clz	r2, r2
 80005ea:	3201      	adds	r2, #1
 80005ec:	f002 021f 	and.w	r2, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80005f0:	2a09      	cmp	r2, #9
 80005f2:	f200 809d 	bhi.w	8000730 <HAL_ADC_ConfigChannel+0x340>
 80005f6:	fa90 f2a0 	rbit	r2, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80005fa:	fab2 f282 	clz	r2, r2
 80005fe:	fa90 f5a0 	rbit	r5, r0
 8000602:	2601      	movs	r6, #1
 8000604:	fab5 f585 	clz	r5, r5
 8000608:	3201      	adds	r2, #1
 800060a:	4435      	add	r5, r6
 800060c:	0692      	lsls	r2, r2, #26
 800060e:	f005 051f 	and.w	r5, r5, #31
 8000612:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000616:	fa06 f505 	lsl.w	r5, r6, r5
 800061a:	432a      	orrs	r2, r5
 800061c:	fa90 f0a0 	rbit	r0, r0
 8000620:	fab0 f080 	clz	r0, r0
 8000624:	4430      	add	r0, r6
 8000626:	f000 001f 	and.w	r0, r0, #31
 800062a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800062e:	0500      	lsls	r0, r0, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000630:	4310      	orrs	r0, r2
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000632:	3414      	adds	r4, #20
  MODIFY_REG(*preg,
 8000634:	2707      	movs	r7, #7
 8000636:	688a      	ldr	r2, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000638:	0dc6      	lsrs	r6, r0, #23
  MODIFY_REG(*preg,
 800063a:	f3c0 5004 	ubfx	r0, r0, #20, #5
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800063e:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8000642:	4087      	lsls	r7, r0
 8000644:	4082      	lsls	r2, r0
 8000646:	5935      	ldr	r5, [r6, r4]
 8000648:	ea25 0007 	bic.w	r0, r5, r7
 800064c:	4310      	orrs	r0, r2
 800064e:	5130      	str	r0, [r6, r4]
 8000650:	e71e      	b.n	8000490 <HAL_ADC_ConfigChannel+0xa0>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	6948      	ldr	r0, [r1, #20]
 8000656:	68d4      	ldr	r4, [r2, #12]
 8000658:	f3c4 0482 	ubfx	r4, r4, #2, #3
 800065c:	0064      	lsls	r4, r4, #1
 800065e:	fa00 f404 	lsl.w	r4, r0, r4
 8000662:	e74b      	b.n	80004fc <HAL_ADC_ConfigChannel+0x10c>
  __HAL_LOCK(hadc);
 8000664:	2002      	movs	r0, #2
}
 8000666:	b002      	add	sp, #8
 8000668:	bcf0      	pop	{r4, r5, r6, r7}
 800066a:	4770      	bx	lr
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800066c:	6e14      	ldr	r4, [r2, #96]	; 0x60
 800066e:	0680      	lsls	r0, r0, #26
 8000670:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8000674:	4284      	cmp	r4, r0
 8000676:	d03f      	beq.n	80006f8 <HAL_ADC_ConfigChannel+0x308>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000678:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800067a:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 800067e:	4284      	cmp	r4, r0
 8000680:	d032      	beq.n	80006e8 <HAL_ADC_ConfigChannel+0x2f8>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000682:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8000684:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8000688:	4284      	cmp	r4, r0
 800068a:	d025      	beq.n	80006d8 <HAL_ADC_ConfigChannel+0x2e8>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800068c:	6ed4      	ldr	r4, [r2, #108]	; 0x6c
 800068e:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8000692:	42a0      	cmp	r0, r4
 8000694:	f47f aee4 	bne.w	8000460 <HAL_ADC_ConfigChannel+0x70>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8000698:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 800069a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800069e:	66d0      	str	r0, [r2, #108]	; 0x6c
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	e6dd      	b.n	8000460 <HAL_ADC_ConfigChannel+0x70>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80006a4:	0864      	lsrs	r4, r4, #1
 80006a6:	f004 0408 	and.w	r4, r4, #8
 80006aa:	fa00 f404 	lsl.w	r4, r0, r4
 80006ae:	e725      	b.n	80004fc <HAL_ADC_ConfigChannel+0x10c>
 80006b0:	2601      	movs	r6, #1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80006b2:	0e80      	lsrs	r0, r0, #26
 80006b4:	4430      	add	r0, r6
 80006b6:	f000 051f 	and.w	r5, r0, #31
 80006ba:	0682      	lsls	r2, r0, #26
 80006bc:	40ae      	lsls	r6, r5
 80006be:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80006c2:	2d09      	cmp	r5, #9
 80006c4:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80006c8:	ea42 0206 	orr.w	r2, r2, r6
 80006cc:	d9af      	bls.n	800062e <HAL_ADC_ConfigChannel+0x23e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80006ce:	381e      	subs	r0, #30
 80006d0:	0500      	lsls	r0, r0, #20
 80006d2:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 80006d6:	e7ab      	b.n	8000630 <HAL_ADC_ConfigChannel+0x240>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80006d8:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80006da:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80006de:	6690      	str	r0, [r2, #104]	; 0x68
 80006e0:	6808      	ldr	r0, [r1, #0]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	0680      	lsls	r0, r0, #26
 80006e6:	e7d1      	b.n	800068c <HAL_ADC_ConfigChannel+0x29c>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80006e8:	6e50      	ldr	r0, [r2, #100]	; 0x64
 80006ea:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80006ee:	6650      	str	r0, [r2, #100]	; 0x64
 80006f0:	6808      	ldr	r0, [r1, #0]
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	0680      	lsls	r0, r0, #26
 80006f6:	e7c4      	b.n	8000682 <HAL_ADC_ConfigChannel+0x292>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80006f8:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80006fa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80006fe:	6610      	str	r0, [r2, #96]	; 0x60
 8000700:	6808      	ldr	r0, [r1, #0]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	0680      	lsls	r0, r0, #26
 8000706:	e7b7      	b.n	8000678 <HAL_ADC_ConfigChannel+0x288>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <HAL_ADC_ConfigChannel+0x3a0>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800070a:	4e22      	ldr	r6, [pc, #136]	; (8000794 <HAL_ADC_ConfigChannel+0x3a4>)
 800070c:	4f1a      	ldr	r7, [pc, #104]	; (8000778 <HAL_ADC_ConfigChannel+0x388>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800070e:	4615      	mov	r5, r2
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000710:	6894      	ldr	r4, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000712:	68bf      	ldr	r7, [r7, #8]
 8000714:	68b2      	ldr	r2, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000716:	f004 76e0 	and.w	r6, r4, #29360128	; 0x1c00000
 800071a:	433a      	orrs	r2, r7
 800071c:	43d2      	mvns	r2, r2
 800071e:	f002 0201 	and.w	r2, r2, #1
 8000722:	e739      	b.n	8000598 <HAL_ADC_ConfigChannel+0x1a8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000724:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8000726:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000728:	f042 0220 	orr.w	r2, r2, #32
 800072c:	655a      	str	r2, [r3, #84]	; 0x54
 800072e:	e6b8      	b.n	80004a2 <HAL_ADC_ConfigChannel+0xb2>
 8000730:	fa90 f2a0 	rbit	r2, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000734:	fab2 f282 	clz	r2, r2
 8000738:	fa90 f5a0 	rbit	r5, r0
 800073c:	2601      	movs	r6, #1
 800073e:	fab5 f585 	clz	r5, r5
 8000742:	3201      	adds	r2, #1
 8000744:	4435      	add	r5, r6
 8000746:	0692      	lsls	r2, r2, #26
 8000748:	f005 051f 	and.w	r5, r5, #31
 800074c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000750:	fa06 f505 	lsl.w	r5, r6, r5
 8000754:	432a      	orrs	r2, r5
 8000756:	fa90 f0a0 	rbit	r0, r0
 800075a:	fab0 f080 	clz	r0, r0
 800075e:	4430      	add	r0, r6
 8000760:	f000 001f 	and.w	r0, r0, #31
 8000764:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000768:	e7b1      	b.n	80006ce <HAL_ADC_ConfigChannel+0x2de>
 800076a:	bf00      	nop
 800076c:	000fffff 	.word	0x000fffff
 8000770:	47ff0000 	.word	0x47ff0000
 8000774:	5c001000 	.word	0x5c001000
 8000778:	40022000 	.word	0x40022000
 800077c:	58026000 	.word	0x58026000
 8000780:	58026300 	.word	0x58026300
 8000784:	cb840000 	.word	0xcb840000
 8000788:	c7520000 	.word	0xc7520000
 800078c:	cfb80000 	.word	0xcfb80000
 8000790:	40022300 	.word	0x40022300
 8000794:	40022100 	.word	0x40022100
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000798:	0224      	lsls	r4, r4, #8
 800079a:	f53f ae7c 	bmi.w	8000496 <HAL_ADC_ConfigChannel+0xa6>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800079e:	4a17      	ldr	r2, [pc, #92]	; (80007fc <HAL_ADC_ConfigChannel+0x40c>)
 80007a0:	4290      	cmp	r0, r2
 80007a2:	f47f ae78 	bne.w	8000496 <HAL_ADC_ConfigChannel+0xa6>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80007a6:	4a16      	ldr	r2, [pc, #88]	; (8000800 <HAL_ADC_ConfigChannel+0x410>)
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80007a8:	f446 0100 	orr.w	r1, r6, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80007ac:	68a8      	ldr	r0, [r5, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80007ae:	6812      	ldr	r2, [r2, #0]
 80007b0:	f020 70e0 	bic.w	r0, r0, #29360128	; 0x1c00000
 80007b4:	4c13      	ldr	r4, [pc, #76]	; (8000804 <HAL_ADC_ConfigChannel+0x414>)
 80007b6:	0992      	lsrs	r2, r2, #6
 80007b8:	4301      	orrs	r1, r0
 80007ba:	fba4 0202 	umull	r0, r2, r4, r2
 80007be:	60a9      	str	r1, [r5, #8]
 80007c0:	0992      	lsrs	r2, r2, #6
 80007c2:	0052      	lsls	r2, r2, #1
 80007c4:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 80007c6:	9a01      	ldr	r2, [sp, #4]
 80007c8:	2a00      	cmp	r2, #0
 80007ca:	f43f ae64 	beq.w	8000496 <HAL_ADC_ConfigChannel+0xa6>
                wait_loop_index--;
 80007ce:	9a01      	ldr	r2, [sp, #4]
 80007d0:	3a01      	subs	r2, #1
 80007d2:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 80007d4:	9a01      	ldr	r2, [sp, #4]
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d1f9      	bne.n	80007ce <HAL_ADC_ConfigChannel+0x3de>
 80007da:	e65c      	b.n	8000496 <HAL_ADC_ConfigChannel+0xa6>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80007dc:	01e1      	lsls	r1, r4, #7
 80007de:	f53f ae5a 	bmi.w	8000496 <HAL_ADC_ConfigChannel+0xa6>
 80007e2:	4a06      	ldr	r2, [pc, #24]	; (80007fc <HAL_ADC_ConfigChannel+0x40c>)
 80007e4:	4290      	cmp	r0, r2
 80007e6:	f47f ae56 	bne.w	8000496 <HAL_ADC_ConfigChannel+0xa6>
 80007ea:	68a9      	ldr	r1, [r5, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80007ec:	f046 7280 	orr.w	r2, r6, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007f0:	2000      	movs	r0, #0
 80007f2:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80007f6:	430a      	orrs	r2, r1
 80007f8:	60aa      	str	r2, [r5, #8]
 80007fa:	e652      	b.n	80004a2 <HAL_ADC_ConfigChannel+0xb2>
 80007fc:	58026000 	.word	0x58026000
 8000800:	20000014 	.word	0x20000014
 8000804:	053e2d63 	.word	0x053e2d63

08000808 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8000808:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800080a:	4a52      	ldr	r2, [pc, #328]	; (8000954 <ADC_ConfigureBoostMode+0x14c>)
{
 800080c:	4605      	mov	r5, r0
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800080e:	6803      	ldr	r3, [r0, #0]
 8000810:	4293      	cmp	r3, r2
 8000812:	d027      	beq.n	8000864 <ADC_ConfigureBoostMode+0x5c>
 8000814:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000818:	4293      	cmp	r3, r2
 800081a:	d023      	beq.n	8000864 <ADC_ConfigureBoostMode+0x5c>
 800081c:	4b4e      	ldr	r3, [pc, #312]	; (8000958 <ADC_ConfigureBoostMode+0x150>)
 800081e:	689b      	ldr	r3, [r3, #8]
 8000820:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000824:	bf14      	ite	ne
 8000826:	2301      	movne	r3, #1
 8000828:	2300      	moveq	r3, #0
 800082a:	b323      	cbz	r3, 8000876 <ADC_ConfigureBoostMode+0x6e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800082c:	f002 fe8a 	bl	8003544 <HAL_RCC_GetHCLKFreq>
    switch(hadc->Init.ClockPrescaler)
 8000830:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8000832:	4604      	mov	r4, r0
    switch(hadc->Init.ClockPrescaler)
 8000834:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000838:	d062      	beq.n	8000900 <ADC_ConfigureBoostMode+0xf8>
 800083a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800083e:	d072      	beq.n	8000926 <ADC_ConfigureBoostMode+0x11e>
 8000840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000844:	d05c      	beq.n	8000900 <ADC_ConfigureBoostMode+0xf8>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8000846:	f7ff fdc3 	bl	80003d0 <HAL_GetREVID>
 800084a:	f241 0303 	movw	r3, #4099	; 0x1003
 800084e:	4298      	cmp	r0, r3
 8000850:	d832      	bhi.n	80008b8 <ADC_ConfigureBoostMode+0xb0>
  {
    if(freq > 20000000UL)
 8000852:	4a42      	ldr	r2, [pc, #264]	; (800095c <ADC_ConfigureBoostMode+0x154>)
 8000854:	682b      	ldr	r3, [r5, #0]
 8000856:	4294      	cmp	r4, r2
 8000858:	d928      	bls.n	80008ac <ADC_ConfigureBoostMode+0xa4>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800085a:	689a      	ldr	r2, [r3, #8]
 800085c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000860:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8000862:	bd38      	pop	{r3, r4, r5, pc}
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8000864:	4b3e      	ldr	r3, [pc, #248]	; (8000960 <ADC_ConfigureBoostMode+0x158>)
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 800086c:	bf14      	ite	ne
 800086e:	2301      	movne	r3, #1
 8000870:	2300      	moveq	r3, #0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d1da      	bne.n	800082c <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8000876:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800087a:	f003 ff39 	bl	80046f0 <HAL_RCCEx_GetPeriphCLKFreq>
    switch(hadc->Init.ClockPrescaler)
 800087e:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8000880:	4604      	mov	r4, r0
    switch(hadc->Init.ClockPrescaler)
 8000882:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8000886:	d049      	beq.n	800091c <ADC_ConfigureBoostMode+0x114>
 8000888:	d93e      	bls.n	8000908 <ADC_ConfigureBoostMode+0x100>
 800088a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800088e:	d04e      	beq.n	800092e <ADC_ConfigureBoostMode+0x126>
 8000890:	d927      	bls.n	80008e2 <ADC_ConfigureBoostMode+0xda>
 8000892:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8000896:	d048      	beq.n	800092a <ADC_ConfigureBoostMode+0x122>
 8000898:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800089c:	d1d3      	bne.n	8000846 <ADC_ConfigureBoostMode+0x3e>
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800089e:	f7ff fd97 	bl	80003d0 <HAL_GetREVID>
 80008a2:	f241 0303 	movw	r3, #4099	; 0x1003
 80008a6:	4298      	cmp	r0, r3
 80008a8:	d805      	bhi.n	80008b6 <ADC_ConfigureBoostMode+0xae>
 80008aa:	682b      	ldr	r3, [r5, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80008ac:	689a      	ldr	r2, [r3, #8]
 80008ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80008b2:	609a      	str	r2, [r3, #8]
}
 80008b4:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 256UL;
 80008b6:	0a24      	lsrs	r4, r4, #8
    freq /= 2U; /* divider by 2 for Rev.V */
 80008b8:	0864      	lsrs	r4, r4, #1
    if (freq <= 6250000UL)
 80008ba:	4a2a      	ldr	r2, [pc, #168]	; (8000964 <ADC_ConfigureBoostMode+0x15c>)
 80008bc:	682b      	ldr	r3, [r5, #0]
 80008be:	4294      	cmp	r4, r2
 80008c0:	d90a      	bls.n	80008d8 <ADC_ConfigureBoostMode+0xd0>
    else if(freq <= 12500000UL)
 80008c2:	4a29      	ldr	r2, [pc, #164]	; (8000968 <ADC_ConfigureBoostMode+0x160>)
 80008c4:	4294      	cmp	r4, r2
 80008c6:	d914      	bls.n	80008f2 <ADC_ConfigureBoostMode+0xea>
    else if(freq <= 25000000UL)
 80008c8:	4a28      	ldr	r2, [pc, #160]	; (800096c <ADC_ConfigureBoostMode+0x164>)
 80008ca:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80008cc:	689a      	ldr	r2, [r3, #8]
    else if(freq <= 25000000UL)
 80008ce:	d932      	bls.n	8000936 <ADC_ConfigureBoostMode+0x12e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80008d0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80008d4:	609a      	str	r2, [r3, #8]
}
 80008d6:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80008d8:	689a      	ldr	r2, [r3, #8]
 80008da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80008de:	609a      	str	r2, [r3, #8]
}
 80008e0:	bd38      	pop	{r3, r4, r5, pc}
    switch(hadc->Init.ClockPrescaler)
 80008e2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80008e6:	d024      	beq.n	8000932 <ADC_ConfigureBoostMode+0x12a>
 80008e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80008ec:	d1ab      	bne.n	8000846 <ADC_ConfigureBoostMode+0x3e>
        freq /= 32UL;
 80008ee:	0944      	lsrs	r4, r0, #5
        break;
 80008f0:	e7a9      	b.n	8000846 <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80008f2:	689a      	ldr	r2, [r3, #8]
 80008f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80008f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80008fc:	609a      	str	r2, [r3, #8]
}
 80008fe:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8000900:	0c1b      	lsrs	r3, r3, #16
 8000902:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8000906:	e79e      	b.n	8000846 <ADC_ConfigureBoostMode+0x3e>
    switch(hadc->Init.ClockPrescaler)
 8000908:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800090c:	d006      	beq.n	800091c <ADC_ConfigureBoostMode+0x114>
 800090e:	d818      	bhi.n	8000942 <ADC_ConfigureBoostMode+0x13a>
 8000910:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000914:	d002      	beq.n	800091c <ADC_ConfigureBoostMode+0x114>
 8000916:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800091a:	d194      	bne.n	8000846 <ADC_ConfigureBoostMode+0x3e>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800091c:	0c9b      	lsrs	r3, r3, #18
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8000924:	e78f      	b.n	8000846 <ADC_ConfigureBoostMode+0x3e>
        freq /= 4UL;
 8000926:	0884      	lsrs	r4, r0, #2
        break;
 8000928:	e78d      	b.n	8000846 <ADC_ConfigureBoostMode+0x3e>
        freq /= 128UL;
 800092a:	09c4      	lsrs	r4, r0, #7
        break;
 800092c:	e78b      	b.n	8000846 <ADC_ConfigureBoostMode+0x3e>
        freq /= 64UL;
 800092e:	0984      	lsrs	r4, r0, #6
        break;
 8000930:	e789      	b.n	8000846 <ADC_ConfigureBoostMode+0x3e>
        freq /= 16UL;
 8000932:	0904      	lsrs	r4, r0, #4
      break;
 8000934:	e787      	b.n	8000846 <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8000936:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800093a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800093e:	609a      	str	r2, [r3, #8]
}
 8000940:	bd38      	pop	{r3, r4, r5, pc}
    switch(hadc->Init.ClockPrescaler)
 8000942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000946:	d0e9      	beq.n	800091c <ADC_ConfigureBoostMode+0x114>
 8000948:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800094c:	f47f af7b 	bne.w	8000846 <ADC_ConfigureBoostMode+0x3e>
 8000950:	e7e4      	b.n	800091c <ADC_ConfigureBoostMode+0x114>
 8000952:	bf00      	nop
 8000954:	40022000 	.word	0x40022000
 8000958:	58026300 	.word	0x58026300
 800095c:	01312d00 	.word	0x01312d00
 8000960:	40022300 	.word	0x40022300
 8000964:	005f5e10 	.word	0x005f5e10
 8000968:	00bebc20 	.word	0x00bebc20
 800096c:	017d7840 	.word	0x017d7840

08000970 <HAL_ADC_Init>:
{
 8000970:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8000972:	2300      	movs	r3, #0
{
 8000974:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8000976:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8000978:	2800      	cmp	r0, #0
 800097a:	f000 80ab 	beq.w	8000ad4 <HAL_ADC_Init+0x164>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800097e:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8000980:	4604      	mov	r4, r0
 8000982:	2d00      	cmp	r5, #0
 8000984:	f000 809b 	beq.w	8000abe <HAL_ADC_Init+0x14e>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000988:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800098a:	689a      	ldr	r2, [r3, #8]
 800098c:	0096      	lsls	r6, r2, #2
 800098e:	d504      	bpl.n	800099a <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000990:	6899      	ldr	r1, [r3, #8]
 8000992:	4a78      	ldr	r2, [pc, #480]	; (8000b74 <HAL_ADC_Init+0x204>)
 8000994:	400a      	ands	r2, r1
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800099a:	689a      	ldr	r2, [r3, #8]
 800099c:	00d5      	lsls	r5, r2, #3
 800099e:	d416      	bmi.n	80009ce <HAL_ADC_Init+0x5e>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80009a0:	4a75      	ldr	r2, [pc, #468]	; (8000b78 <HAL_ADC_Init+0x208>)
  MODIFY_REG(ADCx->CR,
 80009a2:	6898      	ldr	r0, [r3, #8]
 80009a4:	6812      	ldr	r2, [r2, #0]
 80009a6:	4d75      	ldr	r5, [pc, #468]	; (8000b7c <HAL_ADC_Init+0x20c>)
 80009a8:	0992      	lsrs	r2, r2, #6
 80009aa:	4975      	ldr	r1, [pc, #468]	; (8000b80 <HAL_ADC_Init+0x210>)
 80009ac:	fba5 5202 	umull	r5, r2, r5, r2
 80009b0:	4001      	ands	r1, r0
 80009b2:	0992      	lsrs	r2, r2, #6
 80009b4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80009b8:	6099      	str	r1, [r3, #8]
 80009ba:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 80009bc:	9b01      	ldr	r3, [sp, #4]
 80009be:	b12b      	cbz	r3, 80009cc <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 80009c0:	9b01      	ldr	r3, [sp, #4]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80009c6:	9b01      	ldr	r3, [sp, #4]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1f9      	bne.n	80009c0 <HAL_ADC_Init+0x50>
 80009cc:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80009ce:	689a      	ldr	r2, [r3, #8]
 80009d0:	00d0      	lsls	r0, r2, #3
 80009d2:	d413      	bmi.n	80009fc <HAL_ADC_Init+0x8c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009d4:	6d62      	ldr	r2, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80009d6:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009d8:	f042 0210 	orr.w	r2, r2, #16
 80009dc:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009de:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80009e0:	432a      	orrs	r2, r5
 80009e2:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80009e4:	689a      	ldr	r2, [r3, #8]
 80009e6:	0751      	lsls	r1, r2, #29
 80009e8:	d50c      	bpl.n	8000a04 <HAL_ADC_Init+0x94>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80009ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80009ee:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009f0:	f043 0310 	orr.w	r3, r3, #16
}
 80009f4:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009f6:	6563      	str	r3, [r4, #84]	; 0x54
}
 80009f8:	b002      	add	sp, #8
 80009fa:	bd70      	pop	{r4, r5, r6, pc}
 80009fc:	689a      	ldr	r2, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009fe:	2500      	movs	r5, #0
 8000a00:	0751      	lsls	r1, r2, #29
 8000a02:	d4f2      	bmi.n	80009ea <HAL_ADC_Init+0x7a>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000a04:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000a06:	06d2      	lsls	r2, r2, #27
 8000a08:	d4f0      	bmi.n	80009ec <HAL_ADC_Init+0x7c>
    ADC_STATE_CLR_SET(hadc->State,
 8000a0a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000a0c:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8000a10:	f042 0202 	orr.w	r2, r2, #2
 8000a14:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000a16:	689a      	ldr	r2, [r3, #8]
 8000a18:	07d6      	lsls	r6, r2, #31
 8000a1a:	d413      	bmi.n	8000a44 <HAL_ADC_Init+0xd4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000a1c:	4a59      	ldr	r2, [pc, #356]	; (8000b84 <HAL_ADC_Init+0x214>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	f000 8087 	beq.w	8000b32 <HAL_ADC_Init+0x1c2>
 8000a24:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	f000 8082 	beq.w	8000b32 <HAL_ADC_Init+0x1c2>
 8000a2e:	4b56      	ldr	r3, [pc, #344]	; (8000b88 <HAL_ADC_Init+0x218>)
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	07d9      	lsls	r1, r3, #31
 8000a34:	d406      	bmi.n	8000a44 <HAL_ADC_Init+0xd4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000a36:	4a55      	ldr	r2, [pc, #340]	; (8000b8c <HAL_ADC_Init+0x21c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000a38:	6893      	ldr	r3, [r2, #8]
 8000a3a:	6861      	ldr	r1, [r4, #4]
 8000a3c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000a40:	430b      	orrs	r3, r1
 8000a42:	6093      	str	r3, [r2, #8]
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000a44:	f7ff fcc4 	bl	80003d0 <HAL_GetREVID>
 8000a48:	f241 0303 	movw	r3, #4099	; 0x1003
 8000a4c:	4298      	cmp	r0, r3
 8000a4e:	7d63      	ldrb	r3, [r4, #21]
 8000a50:	7f20      	ldrb	r0, [r4, #28]
 8000a52:	d961      	bls.n	8000b18 <HAL_ADC_Init+0x1a8>
 8000a54:	68a6      	ldr	r6, [r4, #8]
 8000a56:	0359      	lsls	r1, r3, #13
 8000a58:	0402      	lsls	r2, r0, #16
 8000a5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a5c:	2e10      	cmp	r6, #16
 8000a5e:	f000 8083 	beq.w	8000b68 <HAL_ADC_Init+0x1f8>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000a62:	4313      	orrs	r3, r2
 8000a64:	430b      	orrs	r3, r1
 8000a66:	4333      	orrs	r3, r6
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a68:	2801      	cmp	r0, #1
 8000a6a:	d103      	bne.n	8000a74 <HAL_ADC_Init+0x104>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000a6c:	6a22      	ldr	r2, [r4, #32]
 8000a6e:	3a01      	subs	r2, #1
 8000a70:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a74:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a76:	b122      	cbz	r2, 8000a82 <HAL_ADC_Init+0x112>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000a78:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000a7c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000a7e:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000a80:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000a82:	6821      	ldr	r1, [r4, #0]
 8000a84:	4a42      	ldr	r2, [pc, #264]	; (8000b90 <HAL_ADC_Init+0x220>)
 8000a86:	68c8      	ldr	r0, [r1, #12]
 8000a88:	4002      	ands	r2, r0
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	60cb      	str	r3, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000a8e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000a90:	689a      	ldr	r2, [r3, #8]
 8000a92:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000a96:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000a98:	d101      	bne.n	8000a9e <HAL_ADC_Init+0x12e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000a9a:	0712      	lsls	r2, r2, #28
 8000a9c:	d51e      	bpl.n	8000adc <HAL_ADC_Init+0x16c>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000a9e:	68e2      	ldr	r2, [r4, #12]
 8000aa0:	2a01      	cmp	r2, #1
 8000aa2:	d03e      	beq.n	8000b22 <HAL_ADC_Init+0x1b2>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000aa6:	f022 020f 	bic.w	r2, r2, #15
 8000aaa:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000aac:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8000aae:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000ab0:	f023 0303 	bic.w	r3, r3, #3
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6563      	str	r3, [r4, #84]	; 0x54
}
 8000aba:	b002      	add	sp, #8
 8000abc:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8000abe:	f006 fcd5 	bl	800746c <HAL_ADC_MspInit>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000ac2:	6823      	ldr	r3, [r4, #0]
    ADC_CLEAR_ERRORCODE(hadc);
 8000ac4:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8000ac6:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000aca:	689a      	ldr	r2, [r3, #8]
 8000acc:	0096      	lsls	r6, r2, #2
 8000ace:	f57f af64 	bpl.w	800099a <HAL_ADC_Init+0x2a>
 8000ad2:	e75d      	b.n	8000990 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 8000ad4:	2501      	movs	r5, #1
}
 8000ad6:	4628      	mov	r0, r5
 8000ad8:	b002      	add	sp, #8
 8000ada:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000adc:	68d9      	ldr	r1, [r3, #12]
 8000ade:	4a2d      	ldr	r2, [pc, #180]	; (8000b94 <HAL_ADC_Init+0x224>)
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ae0:	7d20      	ldrb	r0, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000ae2:	400a      	ands	r2, r1
 8000ae4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000ae6:	ea42 3280 	orr.w	r2, r2, r0, lsl #14
 8000aea:	430a      	orrs	r2, r1
 8000aec:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8000aee:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d026      	beq.n	8000b44 <HAL_ADC_Init+0x1d4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000af6:	6822      	ldr	r2, [r4, #0]
 8000af8:	6913      	ldr	r3, [r2, #16]
 8000afa:	f023 0301 	bic.w	r3, r3, #1
 8000afe:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000b00:	6822      	ldr	r2, [r4, #0]
      ADC_ConfigureBoostMode(hadc);
 8000b02:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000b04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b06:	6913      	ldr	r3, [r2, #16]
 8000b08:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8000b10:	f7ff fe7a 	bl	8000808 <ADC_ConfigureBoostMode>
 8000b14:	6823      	ldr	r3, [r4, #0]
 8000b16:	e7c2      	b.n	8000a9e <HAL_ADC_Init+0x12e>
 8000b18:	0359      	lsls	r1, r3, #13
 8000b1a:	68a6      	ldr	r6, [r4, #8]
 8000b1c:	0402      	lsls	r2, r0, #16
 8000b1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b20:	e79f      	b.n	8000a62 <HAL_ADC_Init+0xf2>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000b22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b24:	69a2      	ldr	r2, [r4, #24]
 8000b26:	f021 010f 	bic.w	r1, r1, #15
 8000b2a:	3a01      	subs	r2, #1
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	631a      	str	r2, [r3, #48]	; 0x30
 8000b30:	e7bc      	b.n	8000aac <HAL_ADC_Init+0x13c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b32:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <HAL_ADC_Init+0x214>)
 8000b34:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <HAL_ADC_Init+0x228>)
 8000b36:	6892      	ldr	r2, [r2, #8]
 8000b38:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	07d8      	lsls	r0, r3, #31
 8000b3e:	d481      	bmi.n	8000a44 <HAL_ADC_Init+0xd4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000b40:	4a16      	ldr	r2, [pc, #88]	; (8000b9c <HAL_ADC_Init+0x22c>)
 8000b42:	e779      	b.n	8000a38 <HAL_ADC_Init+0xc8>
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000b44:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	; 0x40
 8000b48:	6820      	ldr	r0, [r4, #0]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8000b4e:	6902      	ldr	r2, [r0, #16]
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	4912      	ldr	r1, [pc, #72]	; (8000ba0 <HAL_ADC_Init+0x230>)
 8000b56:	4333      	orrs	r3, r6
 8000b58:	4011      	ands	r1, r2
 8000b5a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000b5c:	430b      	orrs	r3, r1
 8000b5e:	3a01      	subs	r2, #1
 8000b60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b64:	6103      	str	r3, [r0, #16]
 8000b66:	e7cb      	b.n	8000b00 <HAL_ADC_Init+0x190>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000b68:	f043 031c 	orr.w	r3, r3, #28
 8000b6c:	430b      	orrs	r3, r1
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	e77a      	b.n	8000a68 <HAL_ADC_Init+0xf8>
 8000b72:	bf00      	nop
 8000b74:	5fffffc0 	.word	0x5fffffc0
 8000b78:	20000014 	.word	0x20000014
 8000b7c:	053e2d63 	.word	0x053e2d63
 8000b80:	6fffffc0 	.word	0x6fffffc0
 8000b84:	40022000 	.word	0x40022000
 8000b88:	58026000 	.word	0x58026000
 8000b8c:	58026300 	.word	0x58026300
 8000b90:	fff0c003 	.word	0xfff0c003
 8000b94:	ffffbffc 	.word	0xffffbffc
 8000b98:	40022100 	.word	0x40022100
 8000b9c:	40022300 	.word	0x40022300
 8000ba0:	fc00f81e 	.word	0xfc00f81e

08000ba4 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ba4:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8000ba8:	2a01      	cmp	r2, #1
 8000baa:	d043      	beq.n	8000c34 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2001      	movs	r0, #1
{
 8000bb0:	b470      	push	{r4, r5, r6}

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000bb2:	4c37      	ldr	r4, [pc, #220]	; (8000c90 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8000bb6:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000bba:	42a2      	cmp	r2, r4
 8000bbc:	d008      	beq.n	8000bd0 <HAL_ADCEx_MultiModeConfigChannel+0x2c>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bbe:	6d5a      	ldr	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000bc0:	2100      	movs	r1, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bc2:	f042 0220 	orr.w	r2, r2, #32
    __HAL_UNLOCK(hadc);
 8000bc6:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bca:	655a      	str	r2, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8000bcc:	bc70      	pop	{r4, r5, r6}
 8000bce:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000bd0:	4830      	ldr	r0, [pc, #192]	; (8000c94 <HAL_ADCEx_MultiModeConfigChannel+0xf0>)
 8000bd2:	6884      	ldr	r4, [r0, #8]
 8000bd4:	0764      	lsls	r4, r4, #29
 8000bd6:	d50a      	bpl.n	8000bee <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8000bd8:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bda:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000bdc:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bde:	f042 0220 	orr.w	r2, r2, #32
 8000be2:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8000bea:	bc70      	pop	{r4, r5, r6}
 8000bec:	4770      	bx	lr
 8000bee:	6894      	ldr	r4, [r2, #8]
 8000bf0:	0765      	lsls	r5, r4, #29
 8000bf2:	d4f2      	bmi.n	8000bda <HAL_ADCEx_MultiModeConfigChannel+0x36>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8000bf4:	680c      	ldr	r4, [r1, #0]
 8000bf6:	b1fc      	cbz	r4, 8000c38 <HAL_ADCEx_MultiModeConfigChannel+0x94>
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8000bf8:	4d27      	ldr	r5, [pc, #156]	; (8000c98 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
 8000bfa:	684e      	ldr	r6, [r1, #4]
 8000bfc:	68ac      	ldr	r4, [r5, #8]
 8000bfe:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
 8000c02:	4334      	orrs	r4, r6
 8000c04:	60ac      	str	r4, [r5, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000c06:	681c      	ldr	r4, [r3, #0]
 8000c08:	4294      	cmp	r4, r2
 8000c0a:	d035      	beq.n	8000c78 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8000c0c:	4284      	cmp	r4, r0
 8000c0e:	d033      	beq.n	8000c78 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000c10:	4a22      	ldr	r2, [pc, #136]	; (8000c9c <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8000c12:	6892      	ldr	r2, [r2, #8]
 8000c14:	43d2      	mvns	r2, r2
 8000c16:	f002 0201 	and.w	r2, r2, #1
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	d035      	beq.n	8000c8a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
        MODIFY_REG(tmpADC_Common->CCR,
 8000c1e:	4d1e      	ldr	r5, [pc, #120]	; (8000c98 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c20:	2000      	movs	r0, #0
        MODIFY_REG(tmpADC_Common->CCR,
 8000c22:	680a      	ldr	r2, [r1, #0]
 8000c24:	68ae      	ldr	r6, [r5, #8]
 8000c26:	6889      	ldr	r1, [r1, #8]
 8000c28:	4c1d      	ldr	r4, [pc, #116]	; (8000ca0 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	4034      	ands	r4, r6
 8000c2e:	4322      	orrs	r2, r4
 8000c30:	60aa      	str	r2, [r5, #8]
 8000c32:	e7d7      	b.n	8000be4 <HAL_ADCEx_MultiModeConfigChannel+0x40>
  __HAL_LOCK(hadc);
 8000c34:	2002      	movs	r0, #2
}
 8000c36:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8000c38:	4c17      	ldr	r4, [pc, #92]	; (8000c98 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
 8000c3a:	68a1      	ldr	r1, [r4, #8]
 8000c3c:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8000c40:	60a1      	str	r1, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000c42:	6819      	ldr	r1, [r3, #0]
 8000c44:	4291      	cmp	r1, r2
 8000c46:	d00e      	beq.n	8000c66 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8000c48:	4281      	cmp	r1, r0
 8000c4a:	d00c      	beq.n	8000c66 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8000c4c:	4a13      	ldr	r2, [pc, #76]	; (8000c9c <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8000c4e:	6892      	ldr	r2, [r2, #8]
 8000c50:	43d2      	mvns	r2, r2
 8000c52:	f002 0201 	and.w	r2, r2, #1
 8000c56:	b1c2      	cbz	r2, 8000c8a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8000c58:	490f      	ldr	r1, [pc, #60]	; (8000c98 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c5a:	2000      	movs	r0, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8000c5c:	4a10      	ldr	r2, [pc, #64]	; (8000ca0 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8000c5e:	688c      	ldr	r4, [r1, #8]
 8000c60:	4022      	ands	r2, r4
 8000c62:	608a      	str	r2, [r1, #8]
 8000c64:	e7be      	b.n	8000be4 <HAL_ADCEx_MultiModeConfigChannel+0x40>
 8000c66:	490a      	ldr	r1, [pc, #40]	; (8000c90 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8000c68:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <HAL_ADCEx_MultiModeConfigChannel+0xf0>)
 8000c6a:	6889      	ldr	r1, [r1, #8]
 8000c6c:	6892      	ldr	r2, [r2, #8]
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	43d2      	mvns	r2, r2
 8000c72:	f002 0201 	and.w	r2, r2, #1
 8000c76:	e7ee      	b.n	8000c56 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
 8000c78:	4805      	ldr	r0, [pc, #20]	; (8000c90 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8000c7a:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <HAL_ADCEx_MultiModeConfigChannel+0xf0>)
 8000c7c:	6880      	ldr	r0, [r0, #8]
 8000c7e:	6892      	ldr	r2, [r2, #8]
 8000c80:	4302      	orrs	r2, r0
 8000c82:	43d2      	mvns	r2, r2
 8000c84:	f002 0201 	and.w	r2, r2, #1
 8000c88:	e7c7      	b.n	8000c1a <HAL_ADCEx_MultiModeConfigChannel+0x76>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	e7aa      	b.n	8000be4 <HAL_ADCEx_MultiModeConfigChannel+0x40>
 8000c8e:	bf00      	nop
 8000c90:	40022000 	.word	0x40022000
 8000c94:	40022100 	.word	0x40022100
 8000c98:	40022300 	.word	0x40022300
 8000c9c:	58026000 	.word	0x58026000
 8000ca0:	fffff0e0 	.word	0xfffff0e0

08000ca4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca4:	4907      	ldr	r1, [pc, #28]	; (8000cc4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca6:	0200      	lsls	r0, r0, #8
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8000caa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cae:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb0:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb4:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb6:	4022      	ands	r2, r4
 8000cb8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cba:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 8000cbc:	60c8      	str	r0, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000cbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00
 8000cc8:	05fa0000 	.word	0x05fa0000

08000ccc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cce:	b430      	push	{r4, r5}
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd6:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cda:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cdc:	2d04      	cmp	r5, #4
 8000cde:	bf28      	it	cs
 8000ce0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce2:	2c06      	cmp	r4, #6
 8000ce4:	d918      	bls.n	8000d18 <HAL_NVIC_SetPriority+0x4c>
 8000ce6:	3b03      	subs	r3, #3
 8000ce8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000cec:	409c      	lsls	r4, r3
 8000cee:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 8000cf6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	fa02 f205 	lsl.w	r2, r2, r5
 8000cfc:	ea21 0102 	bic.w	r1, r1, r2
 8000d00:	fa01 f203 	lsl.w	r2, r1, r3
 8000d04:	ea42 0204 	orr.w	r2, r2, r4
 8000d08:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8000d0c:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 8000d0e:	db06      	blt.n	8000d1e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <HAL_NVIC_SetPriority+0x64>)
 8000d12:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000d14:	bc30      	pop	{r4, r5}
 8000d16:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d18:	2400      	movs	r4, #0
 8000d1a:	4623      	mov	r3, r4
 8000d1c:	e7e9      	b.n	8000cf2 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1e:	f000 000f 	and.w	r0, r0, #15
 8000d22:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <HAL_NVIC_SetPriority+0x68>)
 8000d24:	541a      	strb	r2, [r3, r0]
 8000d26:	bc30      	pop	{r4, r5}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00
 8000d30:	e000e400 	.word	0xe000e400
 8000d34:	e000ed14 	.word	0xe000ed14

08000d38 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000d38:	2800      	cmp	r0, #0
 8000d3a:	db07      	blt.n	8000d4c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d3c:	f000 011f 	and.w	r1, r0, #31
 8000d40:	2301      	movs	r3, #1
 8000d42:	0940      	lsrs	r0, r0, #5
 8000d44:	4a02      	ldr	r2, [pc, #8]	; (8000d50 <HAL_NVIC_EnableIRQ+0x18>)
 8000d46:	408b      	lsls	r3, r1
 8000d48:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d54:	3801      	subs	r0, #1
 8000d56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d5a:	d20d      	bcs.n	8000d78 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d5e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d60:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d62:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d64:	25f0      	movs	r5, #240	; 0xf0
 8000d66:	4c06      	ldr	r4, [pc, #24]	; (8000d80 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d68:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d6a:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d72:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000d74:	bc30      	pop	{r4, r5}
 8000d76:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d78:	2001      	movs	r0, #1
 8000d7a:	4770      	bx	lr
 8000d7c:	e000e010 	.word	0xe000e010
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8000d84:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	4904      	ldr	r1, [pc, #16]	; (8000da0 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000d8e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d94:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 8000d96:	6048      	str	r0, [r1, #4]
}
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00
 8000da0:	e000ed90 	.word	0xe000ed90

08000da4 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000da4:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000da6:	f040 0001 	orr.w	r0, r0, #1
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_MPU_Enable+0x20>)
 8000dac:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000dae:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000db6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dba:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00
 8000dc4:	e000ed90 	.word	0xe000ed90

08000dc8 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000dc8:	7843      	ldrb	r3, [r0, #1]
 8000dca:	4a13      	ldr	r2, [pc, #76]	; (8000e18 <HAL_MPU_ConfigRegion+0x50>)
 8000dcc:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000dce:	7803      	ldrb	r3, [r0, #0]
 8000dd0:	b913      	cbnz	r3, 8000dd8 <HAL_MPU_ConfigRegion+0x10>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 8000dd2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = 0x00;
 8000dd4:	6113      	str	r3, [r2, #16]
 8000dd6:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 8000dd8:	6843      	ldr	r3, [r0, #4]
{
 8000dda:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
 8000ddc:	60d3      	str	r3, [r2, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000dde:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000de0:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000de2:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000de4:	7805      	ldrb	r5, [r0, #0]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000de6:	7a84      	ldrb	r4, [r0, #10]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000de8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000dec:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000dee:	7b86      	ldrb	r6, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000df0:	432b      	orrs	r3, r5
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000df2:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000df4:	ea43 43c4 	orr.w	r3, r3, r4, lsl #19
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000df8:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000dfa:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8000dfe:	7a01      	ldrb	r1, [r0, #8]
 8000e00:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 8000e04:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8000e08:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8000e0c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e10:	6113      	str	r3, [r2, #16]
  }
}
 8000e12:	bc70      	pop	{r4, r5, r6}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed90 	.word	0xe000ed90

08000e1c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000e1c:	4b35      	ldr	r3, [pc, #212]	; (8000ef4 <DMA_CalcBaseAndBitshift+0xd8>)
{
 8000e1e:	4601      	mov	r1, r0
 8000e20:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000e22:	4c35      	ldr	r4, [pc, #212]	; (8000ef8 <DMA_CalcBaseAndBitshift+0xdc>)
 8000e24:	6802      	ldr	r2, [r0, #0]
 8000e26:	4835      	ldr	r0, [pc, #212]	; (8000efc <DMA_CalcBaseAndBitshift+0xe0>)
 8000e28:	42a2      	cmp	r2, r4
 8000e2a:	bf18      	it	ne
 8000e2c:	429a      	cmpne	r2, r3
 8000e2e:	4d34      	ldr	r5, [pc, #208]	; (8000f00 <DMA_CalcBaseAndBitshift+0xe4>)
 8000e30:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8000e34:	bf0c      	ite	eq
 8000e36:	2301      	moveq	r3, #1
 8000e38:	2300      	movne	r3, #0
 8000e3a:	4282      	cmp	r2, r0
 8000e3c:	bf08      	it	eq
 8000e3e:	f043 0301 	orreq.w	r3, r3, #1
 8000e42:	3048      	adds	r0, #72	; 0x48
 8000e44:	42aa      	cmp	r2, r5
 8000e46:	bf08      	it	eq
 8000e48:	f043 0301 	orreq.w	r3, r3, #1
 8000e4c:	3548      	adds	r5, #72	; 0x48
 8000e4e:	42a2      	cmp	r2, r4
 8000e50:	bf08      	it	eq
 8000e52:	f043 0301 	orreq.w	r3, r3, #1
 8000e56:	3448      	adds	r4, #72	; 0x48
 8000e58:	4282      	cmp	r2, r0
 8000e5a:	bf08      	it	eq
 8000e5c:	f043 0301 	orreq.w	r3, r3, #1
 8000e60:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8000e64:	42aa      	cmp	r2, r5
 8000e66:	bf08      	it	eq
 8000e68:	f043 0301 	orreq.w	r3, r3, #1
 8000e6c:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8000e70:	42a2      	cmp	r2, r4
 8000e72:	bf08      	it	eq
 8000e74:	f043 0301 	orreq.w	r3, r3, #1
 8000e78:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8000e7c:	4282      	cmp	r2, r0
 8000e7e:	bf08      	it	eq
 8000e80:	f043 0301 	orreq.w	r3, r3, #1
 8000e84:	3048      	adds	r0, #72	; 0x48
 8000e86:	42aa      	cmp	r2, r5
 8000e88:	bf08      	it	eq
 8000e8a:	f043 0301 	orreq.w	r3, r3, #1
 8000e8e:	3548      	adds	r5, #72	; 0x48
 8000e90:	42a2      	cmp	r2, r4
 8000e92:	bf08      	it	eq
 8000e94:	f043 0301 	orreq.w	r3, r3, #1
 8000e98:	3448      	adds	r4, #72	; 0x48
 8000e9a:	4282      	cmp	r2, r0
 8000e9c:	bf08      	it	eq
 8000e9e:	f043 0301 	orreq.w	r3, r3, #1
 8000ea2:	3048      	adds	r0, #72	; 0x48
 8000ea4:	42aa      	cmp	r2, r5
 8000ea6:	bf08      	it	eq
 8000ea8:	f043 0301 	orreq.w	r3, r3, #1
 8000eac:	42a2      	cmp	r2, r4
 8000eae:	bf08      	it	eq
 8000eb0:	f043 0301 	orreq.w	r3, r3, #1
 8000eb4:	4282      	cmp	r2, r0
 8000eb6:	bf08      	it	eq
 8000eb8:	f043 0301 	orreq.w	r3, r3, #1
 8000ebc:	b913      	cbnz	r3, 8000ec4 <DMA_CalcBaseAndBitshift+0xa8>
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <DMA_CalcBaseAndBitshift+0xe8>)
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d112      	bne.n	8000eea <DMA_CalcBaseAndBitshift+0xce>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8000ec4:	b2d3      	uxtb	r3, r2
 8000ec6:	4d10      	ldr	r5, [pc, #64]	; (8000f08 <DMA_CalcBaseAndBitshift+0xec>)
 8000ec8:	4810      	ldr	r0, [pc, #64]	; (8000f0c <DMA_CalcBaseAndBitshift+0xf0>)
 8000eca:	3b10      	subs	r3, #16

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8000ecc:	4c10      	ldr	r4, [pc, #64]	; (8000f10 <DMA_CalcBaseAndBitshift+0xf4>)
 8000ece:	4010      	ands	r0, r2
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8000ed0:	fba5 5303 	umull	r5, r3, r5, r3
 8000ed4:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8000ed6:	f003 0207 	and.w	r2, r3, #7

    if (stream_number > 3U)
 8000eda:	2b03      	cmp	r3, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8000edc:	5ca2      	ldrb	r2, [r4, r2]
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8000ede:	bf88      	it	hi
 8000ee0:	3004      	addhi	r0, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8000ee2:	65ca      	str	r2, [r1, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8000ee4:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8000ee6:	bc30      	pop	{r4, r5}
 8000ee8:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8000eea:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 8000eee:	6588      	str	r0, [r1, #88]	; 0x58
 8000ef0:	e7f9      	b.n	8000ee6 <DMA_CalcBaseAndBitshift+0xca>
 8000ef2:	bf00      	nop
 8000ef4:	40020010 	.word	0x40020010
 8000ef8:	40020028 	.word	0x40020028
 8000efc:	40020040 	.word	0x40020040
 8000f00:	40020058 	.word	0x40020058
 8000f04:	400204b8 	.word	0x400204b8
 8000f08:	aaaaaaab 	.word	0xaaaaaaab
 8000f0c:	fffffc00 	.word	0xfffffc00
 8000f10:	0800aa60 	.word	0x0800aa60

08000f14 <HAL_DMA_Init>:
{
 8000f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f18:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f1a:	f7ff fa41 	bl	80003a0 <HAL_GetTick>
  if(hdma == NULL)
 8000f1e:	2c00      	cmp	r4, #0
 8000f20:	f000 81ab 	beq.w	800127a <HAL_DMA_Init+0x366>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000f24:	6822      	ldr	r2, [r4, #0]
 8000f26:	4605      	mov	r5, r0
 8000f28:	4b56      	ldr	r3, [pc, #344]	; (8001084 <HAL_DMA_Init+0x170>)
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d049      	beq.n	8000fc2 <HAL_DMA_Init+0xae>
 8000f2e:	3318      	adds	r3, #24
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d046      	beq.n	8000fc2 <HAL_DMA_Init+0xae>
 8000f34:	3330      	adds	r3, #48	; 0x30
 8000f36:	4854      	ldr	r0, [pc, #336]	; (8001088 <HAL_DMA_Init+0x174>)
 8000f38:	4954      	ldr	r1, [pc, #336]	; (800108c <HAL_DMA_Init+0x178>)
 8000f3a:	4282      	cmp	r2, r0
 8000f3c:	bf18      	it	ne
 8000f3e:	429a      	cmpne	r2, r3
 8000f40:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000f44:	bf0c      	ite	eq
 8000f46:	2301      	moveq	r3, #1
 8000f48:	2300      	movne	r3, #0
 8000f4a:	428a      	cmp	r2, r1
 8000f4c:	bf08      	it	eq
 8000f4e:	f043 0301 	orreq.w	r3, r3, #1
 8000f52:	3130      	adds	r1, #48	; 0x30
 8000f54:	4282      	cmp	r2, r0
 8000f56:	bf08      	it	eq
 8000f58:	f043 0301 	orreq.w	r3, r3, #1
 8000f5c:	3030      	adds	r0, #48	; 0x30
 8000f5e:	428a      	cmp	r2, r1
 8000f60:	bf08      	it	eq
 8000f62:	f043 0301 	orreq.w	r3, r3, #1
 8000f66:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8000f6a:	4282      	cmp	r2, r0
 8000f6c:	bf08      	it	eq
 8000f6e:	f043 0301 	orreq.w	r3, r3, #1
 8000f72:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8000f76:	428a      	cmp	r2, r1
 8000f78:	bf08      	it	eq
 8000f7a:	f043 0301 	orreq.w	r3, r3, #1
 8000f7e:	3130      	adds	r1, #48	; 0x30
 8000f80:	4282      	cmp	r2, r0
 8000f82:	bf08      	it	eq
 8000f84:	f043 0301 	orreq.w	r3, r3, #1
 8000f88:	3030      	adds	r0, #48	; 0x30
 8000f8a:	428a      	cmp	r2, r1
 8000f8c:	bf08      	it	eq
 8000f8e:	f043 0301 	orreq.w	r3, r3, #1
 8000f92:	3130      	adds	r1, #48	; 0x30
 8000f94:	4282      	cmp	r2, r0
 8000f96:	bf08      	it	eq
 8000f98:	f043 0301 	orreq.w	r3, r3, #1
 8000f9c:	3030      	adds	r0, #48	; 0x30
 8000f9e:	428a      	cmp	r2, r1
 8000fa0:	bf08      	it	eq
 8000fa2:	f043 0301 	orreq.w	r3, r3, #1
 8000fa6:	3130      	adds	r1, #48	; 0x30
 8000fa8:	4282      	cmp	r2, r0
 8000faa:	bf08      	it	eq
 8000fac:	f043 0301 	orreq.w	r3, r3, #1
 8000fb0:	428a      	cmp	r2, r1
 8000fb2:	bf08      	it	eq
 8000fb4:	f043 0301 	orreq.w	r3, r3, #1
 8000fb8:	b91b      	cbnz	r3, 8000fc2 <HAL_DMA_Init+0xae>
 8000fba:	4b35      	ldr	r3, [pc, #212]	; (8001090 <HAL_DMA_Init+0x17c>)
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	f040 81eb 	bne.w	8001398 <HAL_DMA_Init+0x484>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fc2:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8000fc4:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fc6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8000fca:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8000fce:	6813      	ldr	r3, [r2, #0]
 8000fd0:	f023 0301 	bic.w	r3, r3, #1
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	e005      	b.n	8000fe4 <HAL_DMA_Init+0xd0>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fd8:	f7ff f9e2 	bl	80003a0 <HAL_GetTick>
 8000fdc:	1b40      	subs	r0, r0, r5
 8000fde:	2805      	cmp	r0, #5
 8000fe0:	f200 8143 	bhi.w	800126a <HAL_DMA_Init+0x356>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000fe4:	6823      	ldr	r3, [r4, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	07d0      	lsls	r0, r2, #31
 8000fea:	d4f5      	bmi.n	8000fd8 <HAL_DMA_Init+0xc4>
    registerValue |=  hdma->Init.Direction           |
 8000fec:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ff0:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 8000ff2:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ff4:	e9d4 5005 	ldrd	r5, r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ff8:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ffa:	69e1      	ldr	r1, [r4, #28]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ffc:	432a      	orrs	r2, r5
            hdma->Init.Mode                | hdma->Init.Priority;
 8000ffe:	6a25      	ldr	r5, [r4, #32]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001000:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001002:	6818      	ldr	r0, [r3, #0]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001004:	430a      	orrs	r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001006:	4923      	ldr	r1, [pc, #140]	; (8001094 <HAL_DMA_Init+0x180>)
 8001008:	4001      	ands	r1, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800100a:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.Mode                | hdma->Init.Priority;
 800100c:	432a      	orrs	r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800100e:	2804      	cmp	r0, #4
    registerValue |=  hdma->Init.Direction           |
 8001010:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001014:	d103      	bne.n	800101e <HAL_DMA_Init+0x10a>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001016:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
 800101a:	4301      	orrs	r1, r0
 800101c:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800101e:	481e      	ldr	r0, [pc, #120]	; (8001098 <HAL_DMA_Init+0x184>)
 8001020:	491e      	ldr	r1, [pc, #120]	; (800109c <HAL_DMA_Init+0x188>)
 8001022:	6800      	ldr	r0, [r0, #0]
 8001024:	4001      	ands	r1, r0
 8001026:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800102a:	d30a      	bcc.n	8001042 <HAL_DMA_Init+0x12e>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800102c:	6860      	ldr	r0, [r4, #4]
 800102e:	f1a0 0529 	sub.w	r5, r0, #41	; 0x29
 8001032:	2d1f      	cmp	r5, #31
 8001034:	f240 8124 	bls.w	8001280 <HAL_DMA_Init+0x36c>
 8001038:	384f      	subs	r0, #79	; 0x4f
 800103a:	2803      	cmp	r0, #3
 800103c:	d801      	bhi.n	8001042 <HAL_DMA_Init+0x12e>
        registerValue |= DMA_SxCR_TRBUFF;
 800103e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001042:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001044:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
 8001046:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001048:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800104a:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800104c:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8001050:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001054:	d12a      	bne.n	80010ac <HAL_DMA_Init+0x198>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001056:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
 800105a:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800105c:	b330      	cbz	r0, 80010ac <HAL_DMA_Init+0x198>
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800105e:	69a5      	ldr	r5, [r4, #24]
 8001060:	b1f5      	cbz	r5, 80010a0 <HAL_DMA_Init+0x18c>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001062:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8001066:	f000 81fb 	beq.w	8001460 <HAL_DMA_Init+0x54c>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800106a:	2a02      	cmp	r2, #2
 800106c:	d903      	bls.n	8001076 <HAL_DMA_Init+0x162>
 800106e:	2a03      	cmp	r2, #3
 8001070:	d11c      	bne.n	80010ac <HAL_DMA_Init+0x198>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001072:	01c2      	lsls	r2, r0, #7
 8001074:	d51a      	bpl.n	80010ac <HAL_DMA_Init+0x198>
          hdma->State = HAL_DMA_STATE_READY;
 8001076:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001078:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 800107a:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800107c:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 800107e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          return HAL_ERROR;
 8001082:	e0f0      	b.n	8001266 <HAL_DMA_Init+0x352>
 8001084:	40020010 	.word	0x40020010
 8001088:	40020040 	.word	0x40020040
 800108c:	40020070 	.word	0x40020070
 8001090:	400204b8 	.word	0x400204b8
 8001094:	fe10803f 	.word	0xfe10803f
 8001098:	5c001000 	.word	0x5c001000
 800109c:	ffff0000 	.word	0xffff0000
    switch (hdma->Init.FIFOThreshold)
 80010a0:	2a01      	cmp	r2, #1
 80010a2:	f000 81d8 	beq.w	8001456 <HAL_DMA_Init+0x542>
 80010a6:	d3e4      	bcc.n	8001072 <HAL_DMA_Init+0x15e>
 80010a8:	2a02      	cmp	r2, #2
 80010aa:	d0e2      	beq.n	8001072 <HAL_DMA_Init+0x15e>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80010ac:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010ae:	4620      	mov	r0, r4
 80010b0:	f7ff feb4 	bl	8000e1c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80010b4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010b6:	233f      	movs	r3, #63	; 0x3f
 80010b8:	f002 021f 	and.w	r2, r2, #31
 80010bc:	4093      	lsls	r3, r2
 80010be:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80010c0:	6822      	ldr	r2, [r4, #0]
 80010c2:	4b9d      	ldr	r3, [pc, #628]	; (8001338 <HAL_DMA_Init+0x424>)
 80010c4:	489d      	ldr	r0, [pc, #628]	; (800133c <HAL_DMA_Init+0x428>)
 80010c6:	499e      	ldr	r1, [pc, #632]	; (8001340 <HAL_DMA_Init+0x42c>)
 80010c8:	4282      	cmp	r2, r0
 80010ca:	bf18      	it	ne
 80010cc:	429a      	cmpne	r2, r3
 80010ce:	4e9d      	ldr	r6, [pc, #628]	; (8001344 <HAL_DMA_Init+0x430>)
 80010d0:	4d9d      	ldr	r5, [pc, #628]	; (8001348 <HAL_DMA_Init+0x434>)
 80010d2:	f100 0060 	add.w	r0, r0, #96	; 0x60
 80010d6:	bf0c      	ite	eq
 80010d8:	2301      	moveq	r3, #1
 80010da:	2300      	movne	r3, #0
 80010dc:	f8df e2a8 	ldr.w	lr, [pc, #680]	; 8001388 <HAL_DMA_Init+0x474>
 80010e0:	428a      	cmp	r2, r1
 80010e2:	bf08      	it	eq
 80010e4:	f043 0301 	orreq.w	r3, r3, #1
 80010e8:	3160      	adds	r1, #96	; 0x60
 80010ea:	f8df c2a0 	ldr.w	ip, [pc, #672]	; 800138c <HAL_DMA_Init+0x478>
 80010ee:	42b2      	cmp	r2, r6
 80010f0:	bf08      	it	eq
 80010f2:	f043 0301 	orreq.w	r3, r3, #1
 80010f6:	4f95      	ldr	r7, [pc, #596]	; (800134c <HAL_DMA_Init+0x438>)
 80010f8:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
 80010fc:	f8df 8290 	ldr.w	r8, [pc, #656]	; 8001390 <HAL_DMA_Init+0x47c>
 8001100:	42aa      	cmp	r2, r5
 8001102:	bf08      	it	eq
 8001104:	f043 0301 	orreq.w	r3, r3, #1
 8001108:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
 800110c:	f8df a258 	ldr.w	sl, [pc, #600]	; 8001368 <HAL_DMA_Init+0x454>
 8001110:	4282      	cmp	r2, r0
 8001112:	bf08      	it	eq
 8001114:	f043 0301 	orreq.w	r3, r3, #1
 8001118:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 800111c:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8001394 <HAL_DMA_Init+0x480>
 8001120:	428a      	cmp	r2, r1
 8001122:	bf08      	it	eq
 8001124:	f043 0301 	orreq.w	r3, r3, #1
 8001128:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 800112c:	4572      	cmp	r2, lr
 800112e:	bf08      	it	eq
 8001130:	f043 0301 	orreq.w	r3, r3, #1
 8001134:	f8df e228 	ldr.w	lr, [pc, #552]	; 8001360 <HAL_DMA_Init+0x44c>
 8001138:	4562      	cmp	r2, ip
 800113a:	bf08      	it	eq
 800113c:	f043 0301 	orreq.w	r3, r3, #1
 8001140:	eba2 0e0e 	sub.w	lr, r2, lr
 8001144:	f8df c21c 	ldr.w	ip, [pc, #540]	; 8001364 <HAL_DMA_Init+0x450>
 8001148:	42ba      	cmp	r2, r7
 800114a:	bf08      	it	eq
 800114c:	f043 0301 	orreq.w	r3, r3, #1
 8001150:	fabe fe8e 	clz	lr, lr
 8001154:	eba2 070c 	sub.w	r7, r2, ip
 8001158:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 800115c:	42b2      	cmp	r2, r6
 800115e:	bf08      	it	eq
 8001160:	f043 0301 	orreq.w	r3, r3, #1
 8001164:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8001168:	eba2 060a 	sub.w	r6, r2, sl
 800116c:	fab7 f787 	clz	r7, r7
 8001170:	42aa      	cmp	r2, r5
 8001172:	bf08      	it	eq
 8001174:	f043 0301 	orreq.w	r3, r3, #1
 8001178:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 800117c:	eba2 050c 	sub.w	r5, r2, ip
 8001180:	097f      	lsrs	r7, r7, #5
 8001182:	4282      	cmp	r2, r0
 8001184:	bf08      	it	eq
 8001186:	f043 0301 	orreq.w	r3, r3, #1
 800118a:	fab6 f686 	clz	r6, r6
 800118e:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8001192:	fab5 f585 	clz	r5, r5
 8001196:	428a      	cmp	r2, r1
 8001198:	bf08      	it	eq
 800119a:	f043 0301 	orreq.w	r3, r3, #1
 800119e:	0976      	lsrs	r6, r6, #5
 80011a0:	eba2 000a 	sub.w	r0, r2, sl
 80011a4:	eba2 010c 	sub.w	r1, r2, ip
 80011a8:	4542      	cmp	r2, r8
 80011aa:	bf08      	it	eq
 80011ac:	f043 0301 	orreq.w	r3, r3, #1
 80011b0:	096d      	lsrs	r5, r5, #5
 80011b2:	fab0 f080 	clz	r0, r0
 80011b6:	f10c 0c14 	add.w	ip, ip, #20
 80011ba:	454a      	cmp	r2, r9
 80011bc:	bf08      	it	eq
 80011be:	f043 0301 	orreq.w	r3, r3, #1
 80011c2:	fab1 f181 	clz	r1, r1
 80011c6:	0940      	lsrs	r0, r0, #5
 80011c8:	eba2 0c0c 	sub.w	ip, r2, ip
 80011cc:	ea4e 0303 	orr.w	r3, lr, r3
 80011d0:	0949      	lsrs	r1, r1, #5
 80011d2:	f8df 8198 	ldr.w	r8, [pc, #408]	; 800136c <HAL_DMA_Init+0x458>
 80011d6:	fabc fc8c 	clz	ip, ip
 80011da:	433b      	orrs	r3, r7
 80011dc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80011e0:	eba2 0808 	sub.w	r8, r2, r8
 80011e4:	4333      	orrs	r3, r6
 80011e6:	fab8 f888 	clz	r8, r8
 80011ea:	432b      	orrs	r3, r5
 80011ec:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80011f0:	4303      	orrs	r3, r0
 80011f2:	430b      	orrs	r3, r1
 80011f4:	ea5c 0303 	orrs.w	r3, ip, r3
 80011f8:	d102      	bne.n	8001200 <HAL_DMA_Init+0x2ec>
 80011fa:	f1b8 0f00 	cmp.w	r8, #0
 80011fe:	d02d      	beq.n	800125c <HAL_DMA_Init+0x348>
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001200:	ea47 070e 	orr.w	r7, r7, lr
 8001204:	b2d3      	uxtb	r3, r2
 8001206:	433e      	orrs	r6, r7
 8001208:	4335      	orrs	r5, r6
 800120a:	4328      	orrs	r0, r5
 800120c:	4301      	orrs	r1, r0
 800120e:	ea5c 0101 	orrs.w	r1, ip, r1
 8001212:	d102      	bne.n	800121a <HAL_DMA_Init+0x306>
 8001214:	f1b8 0f00 	cmp.w	r8, #0
 8001218:	d076      	beq.n	8001308 <HAL_DMA_Init+0x3f4>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800121a:	484d      	ldr	r0, [pc, #308]	; (8001350 <HAL_DMA_Init+0x43c>)
 800121c:	3b08      	subs	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800121e:	4a4d      	ldr	r2, [pc, #308]	; (8001354 <HAL_DMA_Init+0x440>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001220:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001222:	fba0 0303 	umull	r0, r3, r0, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001226:	484c      	ldr	r0, [pc, #304]	; (8001358 <HAL_DMA_Init+0x444>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001228:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800122a:	6660      	str	r0, [r4, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800122c:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800122e:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001232:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001238:	6622      	str	r2, [r4, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800123a:	66a3      	str	r3, [r4, #104]	; 0x68
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800123c:	68a3      	ldr	r3, [r4, #8]
 800123e:	2b80      	cmp	r3, #128	; 0x80
 8001240:	d026      	beq.n	8001290 <HAL_DMA_Init+0x37c>
 8001242:	7923      	ldrb	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001244:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001246:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
 800124a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800124c:	6860      	ldr	r0, [r4, #4]
 800124e:	1e41      	subs	r1, r0, #1
 8001250:	2907      	cmp	r1, #7
 8001252:	d921      	bls.n	8001298 <HAL_DMA_Init+0x384>
      hdma->DMAmuxRequestGen = 0U;
 8001254:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8001256:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800125a:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800125c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800125e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001260:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001262:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800126a:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 800126c:	2303      	movs	r3, #3
        return HAL_ERROR;
 800126e:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001270:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8001272:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 800127a:	2001      	movs	r0, #1
}
 800127c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001280:	4936      	ldr	r1, [pc, #216]	; (800135c <HAL_DMA_Init+0x448>)
 8001282:	40e9      	lsrs	r1, r5
 8001284:	07c9      	lsls	r1, r1, #31
 8001286:	f57f aed7 	bpl.w	8001038 <HAL_DMA_Init+0x124>
        registerValue |= DMA_SxCR_TRBUFF;
 800128a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800128e:	e6d8      	b.n	8001042 <HAL_DMA_Init+0x12e>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001290:	2100      	movs	r1, #0
 8001292:	460b      	mov	r3, r1
 8001294:	6061      	str	r1, [r4, #4]
 8001296:	e7d5      	b.n	8001244 <HAL_DMA_Init+0x330>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001298:	6822      	ldr	r2, [r4, #0]
 800129a:	4b31      	ldr	r3, [pc, #196]	; (8001360 <HAL_DMA_Init+0x44c>)
 800129c:	4e31      	ldr	r6, [pc, #196]	; (8001364 <HAL_DMA_Init+0x450>)
 800129e:	4d32      	ldr	r5, [pc, #200]	; (8001368 <HAL_DMA_Init+0x454>)
 80012a0:	42b2      	cmp	r2, r6
 80012a2:	bf18      	it	ne
 80012a4:	429a      	cmpne	r2, r3
 80012a6:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80012aa:	bf0c      	ite	eq
 80012ac:	2301      	moveq	r3, #1
 80012ae:	2300      	movne	r3, #0
 80012b0:	42aa      	cmp	r2, r5
 80012b2:	bf08      	it	eq
 80012b4:	f043 0301 	orreq.w	r3, r3, #1
 80012b8:	3528      	adds	r5, #40	; 0x28
 80012ba:	42b2      	cmp	r2, r6
 80012bc:	bf08      	it	eq
 80012be:	f043 0301 	orreq.w	r3, r3, #1
 80012c2:	3628      	adds	r6, #40	; 0x28
 80012c4:	42aa      	cmp	r2, r5
 80012c6:	bf08      	it	eq
 80012c8:	f043 0301 	orreq.w	r3, r3, #1
 80012cc:	3528      	adds	r5, #40	; 0x28
 80012ce:	42b2      	cmp	r2, r6
 80012d0:	bf08      	it	eq
 80012d2:	f043 0301 	orreq.w	r3, r3, #1
 80012d6:	42aa      	cmp	r2, r5
 80012d8:	bf08      	it	eq
 80012da:	f043 0301 	orreq.w	r3, r3, #1
 80012de:	b91b      	cbnz	r3, 80012e8 <HAL_DMA_Init+0x3d4>
 80012e0:	4b22      	ldr	r3, [pc, #136]	; (800136c <HAL_DMA_Init+0x458>)
 80012e2:	429a      	cmp	r2, r3
 80012e4:	f040 80ca 	bne.w	800147c <HAL_DMA_Init+0x568>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80012e8:	4b21      	ldr	r3, [pc, #132]	; (8001370 <HAL_DMA_Init+0x45c>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80012ea:	4d22      	ldr	r5, [pc, #136]	; (8001374 <HAL_DMA_Init+0x460>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80012ec:	4403      	add	r3, r0
 80012ee:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80012f0:	2201      	movs	r2, #1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80012f2:	2000      	movs	r0, #0
 80012f4:	6725      	str	r5, [r4, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80012f6:	fa02 f101 	lsl.w	r1, r2, r1
 80012fa:	66e3      	str	r3, [r4, #108]	; 0x6c
 80012fc:	6761      	str	r1, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80012fe:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001300:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	e7a9      	b.n	800125c <HAL_DMA_Init+0x348>
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001308:	491b      	ldr	r1, [pc, #108]	; (8001378 <HAL_DMA_Init+0x464>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800130a:	3b10      	subs	r3, #16
 800130c:	481b      	ldr	r0, [pc, #108]	; (800137c <HAL_DMA_Init+0x468>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800130e:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001310:	fba0 0303 	umull	r0, r3, r0, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001314:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001316:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800131a:	d800      	bhi.n	800131e <HAL_DMA_Init+0x40a>
      stream_number += 8U;
 800131c:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800131e:	4a18      	ldr	r2, [pc, #96]	; (8001380 <HAL_DMA_Init+0x46c>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001320:	f003 051f 	and.w	r5, r3, #31
 8001324:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001326:	4817      	ldr	r0, [pc, #92]	; (8001384 <HAL_DMA_Init+0x470>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001328:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800132a:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800132c:	6660      	str	r0, [r4, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800132e:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001330:	66a1      	str	r1, [r4, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001332:	6622      	str	r2, [r4, #96]	; 0x60
 8001334:	e782      	b.n	800123c <HAL_DMA_Init+0x328>
 8001336:	bf00      	nop
 8001338:	40020010 	.word	0x40020010
 800133c:	40020028 	.word	0x40020028
 8001340:	40020040 	.word	0x40020040
 8001344:	40020058 	.word	0x40020058
 8001348:	40020070 	.word	0x40020070
 800134c:	40020428 	.word	0x40020428
 8001350:	cccccccd 	.word	0xcccccccd
 8001354:	16009600 	.word	0x16009600
 8001358:	58025880 	.word	0x58025880
 800135c:	c3c0003f 	.word	0xc3c0003f
 8001360:	58025408 	.word	0x58025408
 8001364:	5802541c 	.word	0x5802541c
 8001368:	58025430 	.word	0x58025430
 800136c:	58025494 	.word	0x58025494
 8001370:	1600963f 	.word	0x1600963f
 8001374:	58025940 	.word	0x58025940
 8001378:	bffdfbf0 	.word	0xbffdfbf0
 800137c:	aaaaaaab 	.word	0xaaaaaaab
 8001380:	10008200 	.word	0x10008200
 8001384:	40020880 	.word	0x40020880
 8001388:	400200b8 	.word	0x400200b8
 800138c:	40020410 	.word	0x40020410
 8001390:	400204a0 	.word	0x400204a0
 8001394:	400204b8 	.word	0x400204b8
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001398:	4b3f      	ldr	r3, [pc, #252]	; (8001498 <HAL_DMA_Init+0x584>)
 800139a:	4940      	ldr	r1, [pc, #256]	; (800149c <HAL_DMA_Init+0x588>)
 800139c:	4840      	ldr	r0, [pc, #256]	; (80014a0 <HAL_DMA_Init+0x58c>)
 800139e:	428a      	cmp	r2, r1
 80013a0:	bf18      	it	ne
 80013a2:	429a      	cmpne	r2, r3
 80013a4:	f101 0128 	add.w	r1, r1, #40	; 0x28
 80013a8:	4d3e      	ldr	r5, [pc, #248]	; (80014a4 <HAL_DMA_Init+0x590>)
 80013aa:	bf0c      	ite	eq
 80013ac:	2301      	moveq	r3, #1
 80013ae:	2300      	movne	r3, #0
 80013b0:	4282      	cmp	r2, r0
 80013b2:	bf08      	it	eq
 80013b4:	f043 0301 	orreq.w	r3, r3, #1
 80013b8:	303c      	adds	r0, #60	; 0x3c
 80013ba:	428a      	cmp	r2, r1
 80013bc:	bf08      	it	eq
 80013be:	f043 0301 	orreq.w	r3, r3, #1
 80013c2:	313c      	adds	r1, #60	; 0x3c
 80013c4:	42aa      	cmp	r2, r5
 80013c6:	bf08      	it	eq
 80013c8:	f043 0301 	orreq.w	r3, r3, #1
 80013cc:	4282      	cmp	r2, r0
 80013ce:	bf08      	it	eq
 80013d0:	f043 0301 	orreq.w	r3, r3, #1
 80013d4:	428a      	cmp	r2, r1
 80013d6:	bf08      	it	eq
 80013d8:	f043 0301 	orreq.w	r3, r3, #1
 80013dc:	b913      	cbnz	r3, 80013e4 <HAL_DMA_Init+0x4d0>
 80013de:	4b32      	ldr	r3, [pc, #200]	; (80014a8 <HAL_DMA_Init+0x594>)
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d152      	bne.n	800148a <HAL_DMA_Init+0x576>
    hdma->State = HAL_DMA_STATE_BUSY;
 80013e4:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 80013e6:	2100      	movs	r1, #0
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80013e8:	4f30      	ldr	r7, [pc, #192]	; (80014ac <HAL_DMA_Init+0x598>)
    hdma->State = HAL_DMA_STATE_BUSY;
 80013ea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80013ee:	68a3      	ldr	r3, [r4, #8]
    __HAL_UNLOCK(hdma);
 80013f0:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80013f4:	2b40      	cmp	r3, #64	; 0x40
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80013f6:	6811      	ldr	r1, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80013f8:	ea07 0701 	and.w	r7, r7, r1
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80013fc:	d043      	beq.n	8001486 <HAL_DMA_Init+0x572>
 80013fe:	2b80      	cmp	r3, #128	; 0x80
 8001400:	bf14      	ite	ne
 8001402:	2100      	movne	r1, #0
 8001404:	f44f 4180 	moveq.w	r1, #16384	; 0x4000
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001408:	6923      	ldr	r3, [r4, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800140a:	4620      	mov	r0, r4
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800140c:	68e5      	ldr	r5, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800140e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001410:	6966      	ldr	r6, [r4, #20]
 8001412:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001416:	69a5      	ldr	r5, [r4, #24]
 8001418:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800141c:	69e6      	ldr	r6, [r4, #28]
 800141e:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001422:	6a25      	ldr	r5, [r4, #32]
 8001424:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001428:	4e21      	ldr	r6, [pc, #132]	; (80014b0 <HAL_DMA_Init+0x59c>)
 800142a:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 800142e:	4d21      	ldr	r5, [pc, #132]	; (80014b4 <HAL_DMA_Init+0x5a0>)
 8001430:	433b      	orrs	r3, r7
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001432:	430b      	orrs	r3, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001434:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001436:	6823      	ldr	r3, [r4, #0]
 8001438:	441e      	add	r6, r3
 800143a:	fba5 2306 	umull	r2, r3, r5, r6
 800143e:	091b      	lsrs	r3, r3, #4
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001444:	f7ff fcea 	bl	8000e1c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001448:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800144a:	2301      	movs	r3, #1
 800144c:	f002 021f 	and.w	r2, r2, #31
 8001450:	4093      	lsls	r3, r2
 8001452:	6043      	str	r3, [r0, #4]
 8001454:	e634      	b.n	80010c0 <HAL_DMA_Init+0x1ac>
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001456:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 800145a:	f47f ae27 	bne.w	80010ac <HAL_DMA_Init+0x198>
 800145e:	e60a      	b.n	8001076 <HAL_DMA_Init+0x162>
    switch (hdma->Init.FIFOThreshold)
 8001460:	2a03      	cmp	r2, #3
 8001462:	f63f ae23 	bhi.w	80010ac <HAL_DMA_Init+0x198>
 8001466:	a501      	add	r5, pc, #4	; (adr r5, 800146c <HAL_DMA_Init+0x558>)
 8001468:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 800146c:	08001077 	.word	0x08001077
 8001470:	08001073 	.word	0x08001073
 8001474:	08001077 	.word	0x08001077
 8001478:	08001457 	.word	0x08001457
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <HAL_DMA_Init+0x5a4>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800147e:	4d0f      	ldr	r5, [pc, #60]	; (80014bc <HAL_DMA_Init+0x5a8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001480:	4403      	add	r3, r0
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	e734      	b.n	80012f0 <HAL_DMA_Init+0x3dc>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001486:	2110      	movs	r1, #16
 8001488:	e7be      	b.n	8001408 <HAL_DMA_Init+0x4f4>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800148a:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 800148c:	2303      	movs	r3, #3
    return HAL_ERROR;
 800148e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001490:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001492:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8001496:	e6e6      	b.n	8001266 <HAL_DMA_Init+0x352>
 8001498:	58025408 	.word	0x58025408
 800149c:	5802541c 	.word	0x5802541c
 80014a0:	58025430 	.word	0x58025430
 80014a4:	58025458 	.word	0x58025458
 80014a8:	58025494 	.word	0x58025494
 80014ac:	fffe000f 	.word	0xfffe000f
 80014b0:	a7fdabf8 	.word	0xa7fdabf8
 80014b4:	cccccccd 	.word	0xcccccccd
 80014b8:	1000823f 	.word	0x1000823f
 80014bc:	40020940 	.word	0x40020940

080014c0 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 80014c0:	2800      	cmp	r0, #0
 80014c2:	f000 8268 	beq.w	8001996 <HAL_DMA_Start_IT+0x4d6>
{
 80014c6:	b4f0      	push	{r4, r5, r6, r7}
 80014c8:	4605      	mov	r5, r0
  __HAL_LOCK(hdma);
 80014ca:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80014ce:	2801      	cmp	r0, #1
 80014d0:	f000 8268 	beq.w	80019a4 <HAL_DMA_Start_IT+0x4e4>
 80014d4:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80014d6:	f895 4035 	ldrb.w	r4, [r5, #53]	; 0x35
 80014da:	4284      	cmp	r4, r0
  __HAL_LOCK(hdma);
 80014dc:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80014e0:	d007      	beq.n	80014f2 <HAL_DMA_Start_IT+0x32>
    __HAL_UNLOCK(hdma);
 80014e2:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80014e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 80014e8:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80014ec:	656b      	str	r3, [r5, #84]	; 0x54
}
 80014ee:	bcf0      	pop	{r4, r5, r6, r7}
 80014f0:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80014f2:	2702      	movs	r7, #2
    __HAL_DMA_DISABLE(hdma);
 80014f4:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80014f6:	4e9e      	ldr	r6, [pc, #632]	; (8001770 <HAL_DMA_Start_IT+0x2b0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 80014f8:	f885 7035 	strb.w	r7, [r5, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014fc:	2700      	movs	r7, #0
 80014fe:	656f      	str	r7, [r5, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8001500:	6820      	ldr	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001502:	4f9c      	ldr	r7, [pc, #624]	; (8001774 <HAL_DMA_Start_IT+0x2b4>)
    __HAL_DMA_DISABLE(hdma);
 8001504:	f020 0001 	bic.w	r0, r0, #1
 8001508:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800150a:	489b      	ldr	r0, [pc, #620]	; (8001778 <HAL_DMA_Start_IT+0x2b8>)
 800150c:	682c      	ldr	r4, [r5, #0]
 800150e:	42b4      	cmp	r4, r6
 8001510:	bf18      	it	ne
 8001512:	4284      	cmpne	r4, r0
 8001514:	f106 0630 	add.w	r6, r6, #48	; 0x30
 8001518:	bf0c      	ite	eq
 800151a:	2001      	moveq	r0, #1
 800151c:	2000      	movne	r0, #0
 800151e:	42bc      	cmp	r4, r7
 8001520:	bf08      	it	eq
 8001522:	f040 0001 	orreq.w	r0, r0, #1
 8001526:	3730      	adds	r7, #48	; 0x30
 8001528:	42b4      	cmp	r4, r6
 800152a:	bf08      	it	eq
 800152c:	f040 0001 	orreq.w	r0, r0, #1
 8001530:	3630      	adds	r6, #48	; 0x30
 8001532:	42bc      	cmp	r4, r7
 8001534:	bf08      	it	eq
 8001536:	f040 0001 	orreq.w	r0, r0, #1
 800153a:	3730      	adds	r7, #48	; 0x30
 800153c:	42b4      	cmp	r4, r6
 800153e:	bf08      	it	eq
 8001540:	f040 0001 	orreq.w	r0, r0, #1
 8001544:	3630      	adds	r6, #48	; 0x30
 8001546:	42bc      	cmp	r4, r7
 8001548:	bf08      	it	eq
 800154a:	f040 0001 	orreq.w	r0, r0, #1
 800154e:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8001552:	42b4      	cmp	r4, r6
 8001554:	bf08      	it	eq
 8001556:	f040 0001 	orreq.w	r0, r0, #1
 800155a:	f506 765c 	add.w	r6, r6, #880	; 0x370
 800155e:	42bc      	cmp	r4, r7
 8001560:	bf08      	it	eq
 8001562:	f040 0001 	orreq.w	r0, r0, #1
 8001566:	3730      	adds	r7, #48	; 0x30
 8001568:	42b4      	cmp	r4, r6
 800156a:	bf08      	it	eq
 800156c:	f040 0001 	orreq.w	r0, r0, #1
 8001570:	3630      	adds	r6, #48	; 0x30
 8001572:	42bc      	cmp	r4, r7
 8001574:	bf08      	it	eq
 8001576:	f040 0001 	orreq.w	r0, r0, #1
 800157a:	3730      	adds	r7, #48	; 0x30
 800157c:	42b4      	cmp	r4, r6
 800157e:	bf08      	it	eq
 8001580:	f040 0001 	orreq.w	r0, r0, #1
 8001584:	3630      	adds	r6, #48	; 0x30
 8001586:	42bc      	cmp	r4, r7
 8001588:	bf08      	it	eq
 800158a:	f040 0001 	orreq.w	r0, r0, #1
 800158e:	3730      	adds	r7, #48	; 0x30
 8001590:	42b4      	cmp	r4, r6
 8001592:	bf08      	it	eq
 8001594:	f040 0001 	orreq.w	r0, r0, #1
 8001598:	3630      	adds	r6, #48	; 0x30
 800159a:	42bc      	cmp	r4, r7
 800159c:	bf08      	it	eq
 800159e:	f040 0001 	orreq.w	r0, r0, #1
 80015a2:	4f76      	ldr	r7, [pc, #472]	; (800177c <HAL_DMA_Start_IT+0x2bc>)
 80015a4:	42b4      	cmp	r4, r6
 80015a6:	bf08      	it	eq
 80015a8:	f040 0001 	orreq.w	r0, r0, #1
 80015ac:	4e74      	ldr	r6, [pc, #464]	; (8001780 <HAL_DMA_Start_IT+0x2c0>)
 80015ae:	42bc      	cmp	r4, r7
 80015b0:	bf08      	it	eq
 80015b2:	f040 0001 	orreq.w	r0, r0, #1
 80015b6:	3728      	adds	r7, #40	; 0x28
 80015b8:	42b4      	cmp	r4, r6
 80015ba:	bf08      	it	eq
 80015bc:	f040 0001 	orreq.w	r0, r0, #1
 80015c0:	3628      	adds	r6, #40	; 0x28
 80015c2:	42bc      	cmp	r4, r7
 80015c4:	bf08      	it	eq
 80015c6:	f040 0001 	orreq.w	r0, r0, #1
 80015ca:	3728      	adds	r7, #40	; 0x28
 80015cc:	42b4      	cmp	r4, r6
 80015ce:	bf08      	it	eq
 80015d0:	f040 0001 	orreq.w	r0, r0, #1
 80015d4:	3628      	adds	r6, #40	; 0x28
 80015d6:	42bc      	cmp	r4, r7
 80015d8:	bf08      	it	eq
 80015da:	f040 0001 	orreq.w	r0, r0, #1
 80015de:	3728      	adds	r7, #40	; 0x28
 80015e0:	42b4      	cmp	r4, r6
 80015e2:	bf08      	it	eq
 80015e4:	f040 0001 	orreq.w	r0, r0, #1
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015e8:	6dae      	ldr	r6, [r5, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80015ea:	42bc      	cmp	r4, r7
 80015ec:	bf08      	it	eq
 80015ee:	f040 0001 	orreq.w	r0, r0, #1
 80015f2:	b910      	cbnz	r0, 80015fa <HAL_DMA_Start_IT+0x13a>
 80015f4:	4863      	ldr	r0, [pc, #396]	; (8001784 <HAL_DMA_Start_IT+0x2c4>)
 80015f6:	4284      	cmp	r4, r0
 80015f8:	d108      	bne.n	800160c <HAL_DMA_Start_IT+0x14c>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015fa:	e9d5 0419 	ldrd	r0, r4, [r5, #100]	; 0x64
 80015fe:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8001600:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8001602:	b110      	cbz	r0, 800160a <HAL_DMA_Start_IT+0x14a>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001604:	e9d5 041c 	ldrd	r0, r4, [r5, #112]	; 0x70
 8001608:	6044      	str	r4, [r0, #4]
 800160a:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800160c:	485a      	ldr	r0, [pc, #360]	; (8001778 <HAL_DMA_Start_IT+0x2b8>)
 800160e:	f8df c160 	ldr.w	ip, [pc, #352]	; 8001770 <HAL_DMA_Start_IT+0x2b0>
 8001612:	4f58      	ldr	r7, [pc, #352]	; (8001774 <HAL_DMA_Start_IT+0x2b4>)
 8001614:	4564      	cmp	r4, ip
 8001616:	bf18      	it	ne
 8001618:	4284      	cmpne	r4, r0
 800161a:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800161e:	bf0c      	ite	eq
 8001620:	2001      	moveq	r0, #1
 8001622:	2000      	movne	r0, #0
 8001624:	42bc      	cmp	r4, r7
 8001626:	bf08      	it	eq
 8001628:	f040 0001 	orreq.w	r0, r0, #1
 800162c:	3730      	adds	r7, #48	; 0x30
 800162e:	4564      	cmp	r4, ip
 8001630:	bf08      	it	eq
 8001632:	f040 0001 	orreq.w	r0, r0, #1
 8001636:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800163a:	42bc      	cmp	r4, r7
 800163c:	bf08      	it	eq
 800163e:	f040 0001 	orreq.w	r0, r0, #1
 8001642:	3730      	adds	r7, #48	; 0x30
 8001644:	4564      	cmp	r4, ip
 8001646:	bf08      	it	eq
 8001648:	f040 0001 	orreq.w	r0, r0, #1
 800164c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001650:	42bc      	cmp	r4, r7
 8001652:	bf08      	it	eq
 8001654:	f040 0001 	orreq.w	r0, r0, #1
 8001658:	f507 775c 	add.w	r7, r7, #880	; 0x370
 800165c:	4564      	cmp	r4, ip
 800165e:	bf08      	it	eq
 8001660:	f040 0001 	orreq.w	r0, r0, #1
 8001664:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 8001668:	42bc      	cmp	r4, r7
 800166a:	bf08      	it	eq
 800166c:	f040 0001 	orreq.w	r0, r0, #1
 8001670:	3730      	adds	r7, #48	; 0x30
 8001672:	4564      	cmp	r4, ip
 8001674:	bf08      	it	eq
 8001676:	f040 0001 	orreq.w	r0, r0, #1
 800167a:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800167e:	42bc      	cmp	r4, r7
 8001680:	bf08      	it	eq
 8001682:	f040 0001 	orreq.w	r0, r0, #1
 8001686:	3730      	adds	r7, #48	; 0x30
 8001688:	4564      	cmp	r4, ip
 800168a:	bf08      	it	eq
 800168c:	f040 0001 	orreq.w	r0, r0, #1
 8001690:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001694:	42bc      	cmp	r4, r7
 8001696:	bf08      	it	eq
 8001698:	f040 0001 	orreq.w	r0, r0, #1
 800169c:	3730      	adds	r7, #48	; 0x30
 800169e:	4564      	cmp	r4, ip
 80016a0:	bf08      	it	eq
 80016a2:	f040 0001 	orreq.w	r0, r0, #1
 80016a6:	42bc      	cmp	r4, r7
 80016a8:	bf08      	it	eq
 80016aa:	f040 0001 	orreq.w	r0, r0, #1
 80016ae:	b918      	cbnz	r0, 80016b8 <HAL_DMA_Start_IT+0x1f8>
 80016b0:	4835      	ldr	r0, [pc, #212]	; (8001788 <HAL_DMA_Start_IT+0x2c8>)
 80016b2:	4284      	cmp	r4, r0
 80016b4:	f040 8179 	bne.w	80019aa <HAL_DMA_Start_IT+0x4ea>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80016b8:	6dec      	ldr	r4, [r5, #92]	; 0x5c
 80016ba:	203f      	movs	r0, #63	; 0x3f
 80016bc:	f004 041f 	and.w	r4, r4, #31
 80016c0:	40a0      	lsls	r0, r4
 80016c2:	60b0      	str	r0, [r6, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016c4:	682c      	ldr	r4, [r5, #0]
 80016c6:	6820      	ldr	r0, [r4, #0]
 80016c8:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 80016cc:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80016ce:	6828      	ldr	r0, [r5, #0]
 80016d0:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016d2:	68ab      	ldr	r3, [r5, #8]
 80016d4:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80016d6:	682b      	ldr	r3, [r5, #0]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016d8:	f000 815f 	beq.w	800199a <HAL_DMA_Start_IT+0x4da>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80016dc:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80016de:	682b      	ldr	r3, [r5, #0]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	682c      	ldr	r4, [r5, #0]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80016e4:	4b24      	ldr	r3, [pc, #144]	; (8001778 <HAL_DMA_Start_IT+0x2b8>)
 80016e6:	4922      	ldr	r1, [pc, #136]	; (8001770 <HAL_DMA_Start_IT+0x2b0>)
 80016e8:	4a22      	ldr	r2, [pc, #136]	; (8001774 <HAL_DMA_Start_IT+0x2b4>)
 80016ea:	428c      	cmp	r4, r1
 80016ec:	bf18      	it	ne
 80016ee:	429c      	cmpne	r4, r3
 80016f0:	4826      	ldr	r0, [pc, #152]	; (800178c <HAL_DMA_Start_IT+0x2cc>)
 80016f2:	f101 0148 	add.w	r1, r1, #72	; 0x48
 80016f6:	bf0c      	ite	eq
 80016f8:	2301      	moveq	r3, #1
 80016fa:	2300      	movne	r3, #0
 80016fc:	4294      	cmp	r4, r2
 80016fe:	bf08      	it	eq
 8001700:	f043 0301 	orreq.w	r3, r3, #1
 8001704:	3248      	adds	r2, #72	; 0x48
 8001706:	4284      	cmp	r4, r0
 8001708:	bf08      	it	eq
 800170a:	f043 0301 	orreq.w	r3, r3, #1
 800170e:	3048      	adds	r0, #72	; 0x48
 8001710:	428c      	cmp	r4, r1
 8001712:	bf08      	it	eq
 8001714:	f043 0301 	orreq.w	r3, r3, #1
 8001718:	3148      	adds	r1, #72	; 0x48
 800171a:	4294      	cmp	r4, r2
 800171c:	bf08      	it	eq
 800171e:	f043 0301 	orreq.w	r3, r3, #1
 8001722:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001726:	4284      	cmp	r4, r0
 8001728:	bf08      	it	eq
 800172a:	f043 0301 	orreq.w	r3, r3, #1
 800172e:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8001732:	428c      	cmp	r4, r1
 8001734:	bf08      	it	eq
 8001736:	f043 0301 	orreq.w	r3, r3, #1
 800173a:	f501 7162 	add.w	r1, r1, #904	; 0x388
 800173e:	4294      	cmp	r4, r2
 8001740:	bf08      	it	eq
 8001742:	f043 0301 	orreq.w	r3, r3, #1
 8001746:	3248      	adds	r2, #72	; 0x48
 8001748:	4284      	cmp	r4, r0
 800174a:	bf08      	it	eq
 800174c:	f043 0301 	orreq.w	r3, r3, #1
 8001750:	3048      	adds	r0, #72	; 0x48
 8001752:	428c      	cmp	r4, r1
 8001754:	bf08      	it	eq
 8001756:	f043 0301 	orreq.w	r3, r3, #1
 800175a:	3148      	adds	r1, #72	; 0x48
 800175c:	4294      	cmp	r4, r2
 800175e:	bf08      	it	eq
 8001760:	f043 0301 	orreq.w	r3, r3, #1
 8001764:	3248      	adds	r2, #72	; 0x48
 8001766:	4284      	cmp	r4, r0
 8001768:	bf08      	it	eq
 800176a:	f043 0301 	orreq.w	r3, r3, #1
 800176e:	e00f      	b.n	8001790 <HAL_DMA_Start_IT+0x2d0>
 8001770:	40020028 	.word	0x40020028
 8001774:	40020040 	.word	0x40020040
 8001778:	40020010 	.word	0x40020010
 800177c:	58025408 	.word	0x58025408
 8001780:	5802541c 	.word	0x5802541c
 8001784:	58025494 	.word	0x58025494
 8001788:	400204b8 	.word	0x400204b8
 800178c:	40020058 	.word	0x40020058
 8001790:	428c      	cmp	r4, r1
 8001792:	bf08      	it	eq
 8001794:	f043 0301 	orreq.w	r3, r3, #1
 8001798:	4294      	cmp	r4, r2
 800179a:	bf08      	it	eq
 800179c:	f043 0301 	orreq.w	r3, r3, #1
 80017a0:	b91b      	cbnz	r3, 80017aa <HAL_DMA_Start_IT+0x2ea>
 80017a2:	4b9c      	ldr	r3, [pc, #624]	; (8001a14 <HAL_DMA_Start_IT+0x554>)
 80017a4:	429c      	cmp	r4, r3
 80017a6:	f040 8149 	bne.w	8001a3c <HAL_DMA_Start_IT+0x57c>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80017aa:	6823      	ldr	r3, [r4, #0]
 80017ac:	f023 031e 	bic.w	r3, r3, #30
 80017b0:	f043 0316 	orr.w	r3, r3, #22
 80017b4:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80017b6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80017b8:	b123      	cbz	r3, 80017c4 <HAL_DMA_Start_IT+0x304>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80017ba:	682a      	ldr	r2, [r5, #0]
 80017bc:	6813      	ldr	r3, [r2, #0]
 80017be:	f043 0308 	orr.w	r3, r3, #8
 80017c2:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80017c4:	682c      	ldr	r4, [r5, #0]
 80017c6:	4b94      	ldr	r3, [pc, #592]	; (8001a18 <HAL_DMA_Start_IT+0x558>)
 80017c8:	4a94      	ldr	r2, [pc, #592]	; (8001a1c <HAL_DMA_Start_IT+0x55c>)
 80017ca:	4895      	ldr	r0, [pc, #596]	; (8001a20 <HAL_DMA_Start_IT+0x560>)
 80017cc:	4294      	cmp	r4, r2
 80017ce:	bf18      	it	ne
 80017d0:	429c      	cmpne	r4, r3
 80017d2:	4994      	ldr	r1, [pc, #592]	; (8001a24 <HAL_DMA_Start_IT+0x564>)
 80017d4:	f102 0248 	add.w	r2, r2, #72	; 0x48
 80017d8:	bf0c      	ite	eq
 80017da:	2301      	moveq	r3, #1
 80017dc:	2300      	movne	r3, #0
 80017de:	4284      	cmp	r4, r0
 80017e0:	bf08      	it	eq
 80017e2:	f043 0301 	orreq.w	r3, r3, #1
 80017e6:	3048      	adds	r0, #72	; 0x48
 80017e8:	428c      	cmp	r4, r1
 80017ea:	bf08      	it	eq
 80017ec:	f043 0301 	orreq.w	r3, r3, #1
 80017f0:	3148      	adds	r1, #72	; 0x48
 80017f2:	4294      	cmp	r4, r2
 80017f4:	bf08      	it	eq
 80017f6:	f043 0301 	orreq.w	r3, r3, #1
 80017fa:	3248      	adds	r2, #72	; 0x48
 80017fc:	4284      	cmp	r4, r0
 80017fe:	bf08      	it	eq
 8001800:	f043 0301 	orreq.w	r3, r3, #1
 8001804:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8001808:	428c      	cmp	r4, r1
 800180a:	bf08      	it	eq
 800180c:	f043 0301 	orreq.w	r3, r3, #1
 8001810:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8001814:	4294      	cmp	r4, r2
 8001816:	bf08      	it	eq
 8001818:	f043 0301 	orreq.w	r3, r3, #1
 800181c:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001820:	4284      	cmp	r4, r0
 8001822:	bf08      	it	eq
 8001824:	f043 0301 	orreq.w	r3, r3, #1
 8001828:	3048      	adds	r0, #72	; 0x48
 800182a:	428c      	cmp	r4, r1
 800182c:	bf08      	it	eq
 800182e:	f043 0301 	orreq.w	r3, r3, #1
 8001832:	3148      	adds	r1, #72	; 0x48
 8001834:	4294      	cmp	r4, r2
 8001836:	bf08      	it	eq
 8001838:	f043 0301 	orreq.w	r3, r3, #1
 800183c:	3248      	adds	r2, #72	; 0x48
 800183e:	4284      	cmp	r4, r0
 8001840:	bf08      	it	eq
 8001842:	f043 0301 	orreq.w	r3, r3, #1
 8001846:	3048      	adds	r0, #72	; 0x48
 8001848:	428c      	cmp	r4, r1
 800184a:	bf08      	it	eq
 800184c:	f043 0301 	orreq.w	r3, r3, #1
 8001850:	3148      	adds	r1, #72	; 0x48
 8001852:	4294      	cmp	r4, r2
 8001854:	bf08      	it	eq
 8001856:	f043 0301 	orreq.w	r3, r3, #1
 800185a:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 800185e:	4284      	cmp	r4, r0
 8001860:	bf08      	it	eq
 8001862:	f043 0301 	orreq.w	r3, r3, #1
 8001866:	f502 429f 	add.w	r2, r2, #20352	; 0x4f80
 800186a:	486f      	ldr	r0, [pc, #444]	; (8001a28 <HAL_DMA_Start_IT+0x568>)
 800186c:	428c      	cmp	r4, r1
 800186e:	bf08      	it	eq
 8001870:	f043 0301 	orreq.w	r3, r3, #1
 8001874:	496d      	ldr	r1, [pc, #436]	; (8001a2c <HAL_DMA_Start_IT+0x56c>)
 8001876:	4294      	cmp	r4, r2
 8001878:	bf08      	it	eq
 800187a:	f043 0301 	orreq.w	r3, r3, #1
 800187e:	323c      	adds	r2, #60	; 0x3c
 8001880:	4284      	cmp	r4, r0
 8001882:	bf08      	it	eq
 8001884:	f043 0301 	orreq.w	r3, r3, #1
 8001888:	303c      	adds	r0, #60	; 0x3c
 800188a:	428c      	cmp	r4, r1
 800188c:	bf08      	it	eq
 800188e:	f043 0301 	orreq.w	r3, r3, #1
 8001892:	313c      	adds	r1, #60	; 0x3c
 8001894:	4294      	cmp	r4, r2
 8001896:	bf08      	it	eq
 8001898:	f043 0301 	orreq.w	r3, r3, #1
 800189c:	323c      	adds	r2, #60	; 0x3c
 800189e:	4284      	cmp	r4, r0
 80018a0:	bf08      	it	eq
 80018a2:	f043 0301 	orreq.w	r3, r3, #1
 80018a6:	428c      	cmp	r4, r1
 80018a8:	bf08      	it	eq
 80018aa:	f043 0301 	orreq.w	r3, r3, #1
 80018ae:	4294      	cmp	r4, r2
 80018b0:	bf08      	it	eq
 80018b2:	f043 0301 	orreq.w	r3, r3, #1
 80018b6:	b913      	cbnz	r3, 80018be <HAL_DMA_Start_IT+0x3fe>
 80018b8:	4b5d      	ldr	r3, [pc, #372]	; (8001a30 <HAL_DMA_Start_IT+0x570>)
 80018ba:	429c      	cmp	r4, r3
 80018bc:	d10e      	bne.n	80018dc <HAL_DMA_Start_IT+0x41c>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80018be:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	03d2      	lsls	r2, r2, #15
 80018c4:	d503      	bpl.n	80018ce <HAL_DMA_Start_IT+0x40e>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018cc:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 80018ce:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80018d0:	b11b      	cbz	r3, 80018da <HAL_DMA_Start_IT+0x41a>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	682c      	ldr	r4, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 80018dc:	4b4e      	ldr	r3, [pc, #312]	; (8001a18 <HAL_DMA_Start_IT+0x558>)
 80018de:	494f      	ldr	r1, [pc, #316]	; (8001a1c <HAL_DMA_Start_IT+0x55c>)
 80018e0:	4a4f      	ldr	r2, [pc, #316]	; (8001a20 <HAL_DMA_Start_IT+0x560>)
 80018e2:	428c      	cmp	r4, r1
 80018e4:	bf18      	it	ne
 80018e6:	429c      	cmpne	r4, r3
 80018e8:	4d4e      	ldr	r5, [pc, #312]	; (8001a24 <HAL_DMA_Start_IT+0x564>)
 80018ea:	4852      	ldr	r0, [pc, #328]	; (8001a34 <HAL_DMA_Start_IT+0x574>)
 80018ec:	f101 0160 	add.w	r1, r1, #96	; 0x60
 80018f0:	bf0c      	ite	eq
 80018f2:	2301      	moveq	r3, #1
 80018f4:	2300      	movne	r3, #0
 80018f6:	4294      	cmp	r4, r2
 80018f8:	bf08      	it	eq
 80018fa:	f043 0301 	orreq.w	r3, r3, #1
 80018fe:	3260      	adds	r2, #96	; 0x60
 8001900:	42ac      	cmp	r4, r5
 8001902:	bf08      	it	eq
 8001904:	f043 0301 	orreq.w	r3, r3, #1
 8001908:	3560      	adds	r5, #96	; 0x60
 800190a:	4284      	cmp	r4, r0
 800190c:	bf08      	it	eq
 800190e:	f043 0301 	orreq.w	r3, r3, #1
 8001912:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 8001916:	428c      	cmp	r4, r1
 8001918:	bf08      	it	eq
 800191a:	f043 0301 	orreq.w	r3, r3, #1
 800191e:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
 8001922:	4294      	cmp	r4, r2
 8001924:	bf08      	it	eq
 8001926:	f043 0301 	orreq.w	r3, r3, #1
 800192a:	f502 7268 	add.w	r2, r2, #928	; 0x3a0
 800192e:	42ac      	cmp	r4, r5
 8001930:	bf08      	it	eq
 8001932:	f043 0301 	orreq.w	r3, r3, #1
 8001936:	f505 7568 	add.w	r5, r5, #928	; 0x3a0
 800193a:	4284      	cmp	r4, r0
 800193c:	bf08      	it	eq
 800193e:	f043 0301 	orreq.w	r3, r3, #1
 8001942:	3060      	adds	r0, #96	; 0x60
 8001944:	428c      	cmp	r4, r1
 8001946:	bf08      	it	eq
 8001948:	f043 0301 	orreq.w	r3, r3, #1
 800194c:	3160      	adds	r1, #96	; 0x60
 800194e:	4294      	cmp	r4, r2
 8001950:	bf08      	it	eq
 8001952:	f043 0301 	orreq.w	r3, r3, #1
 8001956:	3260      	adds	r2, #96	; 0x60
 8001958:	42ac      	cmp	r4, r5
 800195a:	bf08      	it	eq
 800195c:	f043 0301 	orreq.w	r3, r3, #1
 8001960:	4284      	cmp	r4, r0
 8001962:	bf08      	it	eq
 8001964:	f043 0301 	orreq.w	r3, r3, #1
 8001968:	428c      	cmp	r4, r1
 800196a:	bf08      	it	eq
 800196c:	f043 0301 	orreq.w	r3, r3, #1
 8001970:	4294      	cmp	r4, r2
 8001972:	bf08      	it	eq
 8001974:	f043 0301 	orreq.w	r3, r3, #1
 8001978:	b933      	cbnz	r3, 8001988 <HAL_DMA_Start_IT+0x4c8>
 800197a:	3048      	adds	r0, #72	; 0x48
 800197c:	1a20      	subs	r0, r4, r0
 800197e:	fab0 f080 	clz	r0, r0
 8001982:	0940      	lsrs	r0, r0, #5
 8001984:	2800      	cmp	r0, #0
 8001986:	d040      	beq.n	8001a0a <HAL_DMA_Start_IT+0x54a>
 8001988:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800198a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6023      	str	r3, [r4, #0]
}
 8001992:	bcf0      	pop	{r4, r5, r6, r7}
 8001994:	4770      	bx	lr
    return HAL_ERROR;
 8001996:	2001      	movs	r0, #1
}
 8001998:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800199a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800199c:	682b      	ldr	r3, [r5, #0]
 800199e:	60d9      	str	r1, [r3, #12]
 80019a0:	682c      	ldr	r4, [r5, #0]
 80019a2:	e69f      	b.n	80016e4 <HAL_DMA_Start_IT+0x224>
  __HAL_LOCK(hdma);
 80019a4:	2002      	movs	r0, #2
}
 80019a6:	bcf0      	pop	{r4, r5, r6, r7}
 80019a8:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80019aa:	4823      	ldr	r0, [pc, #140]	; (8001a38 <HAL_DMA_Start_IT+0x578>)
 80019ac:	f8df c078 	ldr.w	ip, [pc, #120]	; 8001a28 <HAL_DMA_Start_IT+0x568>
 80019b0:	4f1e      	ldr	r7, [pc, #120]	; (8001a2c <HAL_DMA_Start_IT+0x56c>)
 80019b2:	4564      	cmp	r4, ip
 80019b4:	bf18      	it	ne
 80019b6:	4284      	cmpne	r4, r0
 80019b8:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 80019bc:	bf0c      	ite	eq
 80019be:	2001      	moveq	r0, #1
 80019c0:	2000      	movne	r0, #0
 80019c2:	42bc      	cmp	r4, r7
 80019c4:	bf08      	it	eq
 80019c6:	f040 0001 	orreq.w	r0, r0, #1
 80019ca:	3728      	adds	r7, #40	; 0x28
 80019cc:	4564      	cmp	r4, ip
 80019ce:	bf08      	it	eq
 80019d0:	f040 0001 	orreq.w	r0, r0, #1
 80019d4:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 80019d8:	42bc      	cmp	r4, r7
 80019da:	bf08      	it	eq
 80019dc:	f040 0001 	orreq.w	r0, r0, #1
 80019e0:	3728      	adds	r7, #40	; 0x28
 80019e2:	4564      	cmp	r4, ip
 80019e4:	bf08      	it	eq
 80019e6:	f040 0001 	orreq.w	r0, r0, #1
 80019ea:	42bc      	cmp	r4, r7
 80019ec:	bf08      	it	eq
 80019ee:	f040 0001 	orreq.w	r0, r0, #1
 80019f2:	b918      	cbnz	r0, 80019fc <HAL_DMA_Start_IT+0x53c>
 80019f4:	480e      	ldr	r0, [pc, #56]	; (8001a30 <HAL_DMA_Start_IT+0x570>)
 80019f6:	4284      	cmp	r4, r0
 80019f8:	f47f ae74 	bne.w	80016e4 <HAL_DMA_Start_IT+0x224>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80019fc:	6dec      	ldr	r4, [r5, #92]	; 0x5c
 80019fe:	2001      	movs	r0, #1
 8001a00:	f004 041f 	and.w	r4, r4, #31
 8001a04:	40a0      	lsls	r0, r4
 8001a06:	6070      	str	r0, [r6, #4]
 8001a08:	e661      	b.n	80016ce <HAL_DMA_Start_IT+0x20e>
    __HAL_DMA_ENABLE(hdma);
 8001a0a:	6823      	ldr	r3, [r4, #0]
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6023      	str	r3, [r4, #0]
 8001a12:	e56c      	b.n	80014ee <HAL_DMA_Start_IT+0x2e>
 8001a14:	400204b8 	.word	0x400204b8
 8001a18:	40020010 	.word	0x40020010
 8001a1c:	40020028 	.word	0x40020028
 8001a20:	40020040 	.word	0x40020040
 8001a24:	40020058 	.word	0x40020058
 8001a28:	5802541c 	.word	0x5802541c
 8001a2c:	58025430 	.word	0x58025430
 8001a30:	58025494 	.word	0x58025494
 8001a34:	40020070 	.word	0x40020070
 8001a38:	58025408 	.word	0x58025408
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001a3c:	6823      	ldr	r3, [r4, #0]
 8001a3e:	f023 030e 	bic.w	r3, r3, #14
 8001a42:	f043 030a 	orr.w	r3, r3, #10
 8001a46:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001a48:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f43f aeba 	beq.w	80017c4 <HAL_DMA_Start_IT+0x304>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001a50:	682a      	ldr	r2, [r5, #0]
 8001a52:	6813      	ldr	r3, [r2, #0]
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	e6b3      	b.n	80017c4 <HAL_DMA_Start_IT+0x304>

08001a5c <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8001a5c:	2800      	cmp	r0, #0
 8001a5e:	d06a      	beq.n	8001b36 <HAL_DMA_Abort_IT+0xda>
{
 8001a60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a64:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2a02      	cmp	r2, #2
 8001a6c:	d004      	beq.n	8001a78 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a6e:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8001a70:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a72:	655a      	str	r2, [r3, #84]	; 0x54
}
 8001a74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a78:	6802      	ldr	r2, [r0, #0]
 8001a7a:	4986      	ldr	r1, [pc, #536]	; (8001c94 <HAL_DMA_Abort_IT+0x238>)
 8001a7c:	428a      	cmp	r2, r1
 8001a7e:	d050      	beq.n	8001b22 <HAL_DMA_Abort_IT+0xc6>
 8001a80:	4885      	ldr	r0, [pc, #532]	; (8001c98 <HAL_DMA_Abort_IT+0x23c>)
 8001a82:	4282      	cmp	r2, r0
 8001a84:	d04d      	beq.n	8001b22 <HAL_DMA_Abort_IT+0xc6>
 8001a86:	f8df 8228 	ldr.w	r8, [pc, #552]	; 8001cb0 <HAL_DMA_Abort_IT+0x254>
 8001a8a:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8001cac <HAL_DMA_Abort_IT+0x250>
 8001a8e:	f8df e230 	ldr.w	lr, [pc, #560]	; 8001cc0 <HAL_DMA_Abort_IT+0x264>
 8001a92:	454a      	cmp	r2, r9
 8001a94:	bf18      	it	ne
 8001a96:	4542      	cmpne	r2, r8
 8001a98:	f8df c228 	ldr.w	ip, [pc, #552]	; 8001cc4 <HAL_DMA_Abort_IT+0x268>
 8001a9c:	4f7f      	ldr	r7, [pc, #508]	; (8001c9c <HAL_DMA_Abort_IT+0x240>)
 8001a9e:	bf0c      	ite	eq
 8001aa0:	f04f 0a01 	moveq.w	sl, #1
 8001aa4:	f04f 0a00 	movne.w	sl, #0
 8001aa8:	4c7d      	ldr	r4, [pc, #500]	; (8001ca0 <HAL_DMA_Abort_IT+0x244>)
 8001aaa:	4572      	cmp	r2, lr
 8001aac:	bf08      	it	eq
 8001aae:	f04a 0a01 	orreq.w	sl, sl, #1
 8001ab2:	f8df b214 	ldr.w	fp, [pc, #532]	; 8001cc8 <HAL_DMA_Abort_IT+0x26c>
 8001ab6:	4e7b      	ldr	r6, [pc, #492]	; (8001ca4 <HAL_DMA_Abort_IT+0x248>)
 8001ab8:	4562      	cmp	r2, ip
 8001aba:	bf08      	it	eq
 8001abc:	f04a 0a01 	orreq.w	sl, sl, #1
 8001ac0:	4d79      	ldr	r5, [pc, #484]	; (8001ca8 <HAL_DMA_Abort_IT+0x24c>)
 8001ac2:	42ba      	cmp	r2, r7
 8001ac4:	bf08      	it	eq
 8001ac6:	f04a 0a01 	orreq.w	sl, sl, #1
 8001aca:	42a2      	cmp	r2, r4
 8001acc:	bf08      	it	eq
 8001ace:	f04a 0a01 	orreq.w	sl, sl, #1
 8001ad2:	f504 7456 	add.w	r4, r4, #856	; 0x358
 8001ad6:	42a2      	cmp	r2, r4
 8001ad8:	bf08      	it	eq
 8001ada:	f04a 0a01 	orreq.w	sl, sl, #1
 8001ade:	3418      	adds	r4, #24
 8001ae0:	42a2      	cmp	r2, r4
 8001ae2:	bf08      	it	eq
 8001ae4:	f04a 0a01 	orreq.w	sl, sl, #1
 8001ae8:	3418      	adds	r4, #24
 8001aea:	42a2      	cmp	r2, r4
 8001aec:	bf08      	it	eq
 8001aee:	f04a 0a01 	orreq.w	sl, sl, #1
 8001af2:	3460      	adds	r4, #96	; 0x60
 8001af4:	455a      	cmp	r2, fp
 8001af6:	bf08      	it	eq
 8001af8:	f04a 0a01 	orreq.w	sl, sl, #1
 8001afc:	42b2      	cmp	r2, r6
 8001afe:	bf08      	it	eq
 8001b00:	f04a 0a01 	orreq.w	sl, sl, #1
 8001b04:	42aa      	cmp	r2, r5
 8001b06:	bf08      	it	eq
 8001b08:	f04a 0a01 	orreq.w	sl, sl, #1
 8001b0c:	42a2      	cmp	r2, r4
 8001b0e:	bf08      	it	eq
 8001b10:	f04a 0a01 	orreq.w	sl, sl, #1
 8001b14:	f1ba 0f00 	cmp.w	sl, #0
 8001b18:	d103      	bne.n	8001b22 <HAL_DMA_Abort_IT+0xc6>
 8001b1a:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 8001ccc <HAL_DMA_Abort_IT+0x270>
 8001b1e:	4552      	cmp	r2, sl
 8001b20:	d10b      	bne.n	8001b3a <HAL_DMA_Abort_IT+0xde>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b22:	2104      	movs	r1, #4
  return HAL_OK;
 8001b24:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b26:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001b2a:	6813      	ldr	r3, [r2, #0]
 8001b2c:	f023 0301 	bic.w	r3, r3, #1
 8001b30:	6013      	str	r3, [r2, #0]
}
 8001b32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 8001b36:	2001      	movs	r0, #1
}
 8001b38:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001b3a:	6814      	ldr	r4, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b3c:	4856      	ldr	r0, [pc, #344]	; (8001c98 <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001b3e:	f024 040e 	bic.w	r4, r4, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b42:	4d5a      	ldr	r5, [pc, #360]	; (8001cac <HAL_DMA_Abort_IT+0x250>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001b44:	6014      	str	r4, [r2, #0]
      __HAL_DMA_DISABLE(hdma);
 8001b46:	681a      	ldr	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b48:	4c59      	ldr	r4, [pc, #356]	; (8001cb0 <HAL_DMA_Abort_IT+0x254>)
      __HAL_DMA_DISABLE(hdma);
 8001b4a:	6811      	ldr	r1, [r2, #0]
 8001b4c:	f021 0101 	bic.w	r1, r1, #1
 8001b50:	6011      	str	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b52:	4a50      	ldr	r2, [pc, #320]	; (8001c94 <HAL_DMA_Abort_IT+0x238>)
 8001b54:	6819      	ldr	r1, [r3, #0]
 8001b56:	4281      	cmp	r1, r0
 8001b58:	bf18      	it	ne
 8001b5a:	4291      	cmpne	r1, r2
 8001b5c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8001b60:	bf0c      	ite	eq
 8001b62:	2201      	moveq	r2, #1
 8001b64:	2200      	movne	r2, #0
 8001b66:	42a9      	cmp	r1, r5
 8001b68:	bf08      	it	eq
 8001b6a:	f042 0201 	orreq.w	r2, r2, #1
 8001b6e:	3548      	adds	r5, #72	; 0x48
 8001b70:	42a1      	cmp	r1, r4
 8001b72:	bf08      	it	eq
 8001b74:	f042 0201 	orreq.w	r2, r2, #1
 8001b78:	3448      	adds	r4, #72	; 0x48
 8001b7a:	4281      	cmp	r1, r0
 8001b7c:	bf08      	it	eq
 8001b7e:	f042 0201 	orreq.w	r2, r2, #1
 8001b82:	3048      	adds	r0, #72	; 0x48
 8001b84:	42a9      	cmp	r1, r5
 8001b86:	bf08      	it	eq
 8001b88:	f042 0201 	orreq.w	r2, r2, #1
 8001b8c:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8001b90:	42a1      	cmp	r1, r4
 8001b92:	bf08      	it	eq
 8001b94:	f042 0201 	orreq.w	r2, r2, #1
 8001b98:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8001b9c:	4281      	cmp	r1, r0
 8001b9e:	bf08      	it	eq
 8001ba0:	f042 0201 	orreq.w	r2, r2, #1
 8001ba4:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8001ba8:	42a9      	cmp	r1, r5
 8001baa:	bf08      	it	eq
 8001bac:	f042 0201 	orreq.w	r2, r2, #1
 8001bb0:	3548      	adds	r5, #72	; 0x48
 8001bb2:	42a1      	cmp	r1, r4
 8001bb4:	bf08      	it	eq
 8001bb6:	f042 0201 	orreq.w	r2, r2, #1
 8001bba:	3448      	adds	r4, #72	; 0x48
 8001bbc:	4281      	cmp	r1, r0
 8001bbe:	bf08      	it	eq
 8001bc0:	f042 0201 	orreq.w	r2, r2, #1
 8001bc4:	3048      	adds	r0, #72	; 0x48
 8001bc6:	42a9      	cmp	r1, r5
 8001bc8:	bf08      	it	eq
 8001bca:	f042 0201 	orreq.w	r2, r2, #1
 8001bce:	3548      	adds	r5, #72	; 0x48
 8001bd0:	42a1      	cmp	r1, r4
 8001bd2:	bf08      	it	eq
 8001bd4:	f042 0201 	orreq.w	r2, r2, #1
 8001bd8:	3448      	adds	r4, #72	; 0x48
 8001bda:	4281      	cmp	r1, r0
 8001bdc:	bf08      	it	eq
 8001bde:	f042 0201 	orreq.w	r2, r2, #1
 8001be2:	f100 50c0 	add.w	r0, r0, #402653184	; 0x18000000
 8001be6:	42a9      	cmp	r1, r5
 8001be8:	bf08      	it	eq
 8001bea:	f042 0201 	orreq.w	r2, r2, #1
 8001bee:	f500 409f 	add.w	r0, r0, #20352	; 0x4f80
 8001bf2:	4d30      	ldr	r5, [pc, #192]	; (8001cb4 <HAL_DMA_Abort_IT+0x258>)
 8001bf4:	42a1      	cmp	r1, r4
 8001bf6:	bf08      	it	eq
 8001bf8:	f042 0201 	orreq.w	r2, r2, #1
 8001bfc:	4c2e      	ldr	r4, [pc, #184]	; (8001cb8 <HAL_DMA_Abort_IT+0x25c>)
 8001bfe:	4281      	cmp	r1, r0
 8001c00:	bf08      	it	eq
 8001c02:	f042 0201 	orreq.w	r2, r2, #1
 8001c06:	303c      	adds	r0, #60	; 0x3c
 8001c08:	42a9      	cmp	r1, r5
 8001c0a:	bf08      	it	eq
 8001c0c:	f042 0201 	orreq.w	r2, r2, #1
 8001c10:	353c      	adds	r5, #60	; 0x3c
 8001c12:	42a1      	cmp	r1, r4
 8001c14:	bf08      	it	eq
 8001c16:	f042 0201 	orreq.w	r2, r2, #1
 8001c1a:	343c      	adds	r4, #60	; 0x3c
 8001c1c:	4281      	cmp	r1, r0
 8001c1e:	bf08      	it	eq
 8001c20:	f042 0201 	orreq.w	r2, r2, #1
 8001c24:	303c      	adds	r0, #60	; 0x3c
 8001c26:	42a9      	cmp	r1, r5
 8001c28:	bf08      	it	eq
 8001c2a:	f042 0201 	orreq.w	r2, r2, #1
 8001c2e:	42a1      	cmp	r1, r4
 8001c30:	bf08      	it	eq
 8001c32:	f042 0201 	orreq.w	r2, r2, #1
 8001c36:	4281      	cmp	r1, r0
 8001c38:	bf08      	it	eq
 8001c3a:	f042 0201 	orreq.w	r2, r2, #1
 8001c3e:	b912      	cbnz	r2, 8001c46 <HAL_DMA_Abort_IT+0x1ea>
 8001c40:	4a1e      	ldr	r2, [pc, #120]	; (8001cbc <HAL_DMA_Abort_IT+0x260>)
 8001c42:	4291      	cmp	r1, r2
 8001c44:	d117      	bne.n	8001c76 <HAL_DMA_Abort_IT+0x21a>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c46:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c48:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c4a:	6801      	ldr	r1, [r0, #0]
 8001c4c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001c50:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c52:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c56:	f001 011f 	and.w	r1, r1, #31
 8001c5a:	408a      	lsls	r2, r1
 8001c5c:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c5e:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
 8001c62:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8001c64:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c66:	b132      	cbz	r2, 8001c76 <HAL_DMA_Abort_IT+0x21a>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c68:	6811      	ldr	r1, [r2, #0]
 8001c6a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001c6e:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c70:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
 8001c74:	6051      	str	r1, [r2, #4]
      __HAL_UNLOCK(hdma);
 8001c76:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 8001c78:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 8001c7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 8001c7c:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001c80:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8001c84:	b11a      	cbz	r2, 8001c8e <HAL_DMA_Abort_IT+0x232>
 8001c86:	4618      	mov	r0, r3
        hdma->XferAbortCallback(hdma);
 8001c88:	4790      	blx	r2
  return HAL_OK;
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	e6f2      	b.n	8001a74 <HAL_DMA_Abort_IT+0x18>
 8001c8e:	4610      	mov	r0, r2
 8001c90:	e6f0      	b.n	8001a74 <HAL_DMA_Abort_IT+0x18>
 8001c92:	bf00      	nop
 8001c94:	40020010 	.word	0x40020010
 8001c98:	40020028 	.word	0x40020028
 8001c9c:	400200a0 	.word	0x400200a0
 8001ca0:	400200b8 	.word	0x400200b8
 8001ca4:	40020470 	.word	0x40020470
 8001ca8:	40020488 	.word	0x40020488
 8001cac:	40020040 	.word	0x40020040
 8001cb0:	40020058 	.word	0x40020058
 8001cb4:	5802541c 	.word	0x5802541c
 8001cb8:	58025430 	.word	0x58025430
 8001cbc:	58025494 	.word	0x58025494
 8001cc0:	40020070 	.word	0x40020070
 8001cc4:	40020088 	.word	0x40020088
 8001cc8:	40020458 	.word	0x40020458
 8001ccc:	400204b8 	.word	0x400204b8

08001cd0 <HAL_DMA_IRQHandler>:
{
 8001cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001cd2:	4ba5      	ldr	r3, [pc, #660]	; (8001f68 <HAL_DMA_IRQHandler+0x298>)
{
 8001cd4:	b083      	sub	sp, #12
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001cd6:	6804      	ldr	r4, [r0, #0]
  __IO uint32_t count = 0U;
 8001cd8:	2100      	movs	r1, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cda:	4aa4      	ldr	r2, [pc, #656]	; (8001f6c <HAL_DMA_IRQHandler+0x29c>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cdc:	6d85      	ldr	r5, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001cde:	429c      	cmp	r4, r3
  __IO uint32_t count = 0U;
 8001ce0:	9101      	str	r1, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ce2:	6816      	ldr	r6, [r2, #0]
  tmpisr_dma  = regs_dma->ISR;
 8001ce4:	682f      	ldr	r7, [r5, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8001ce6:	682a      	ldr	r2, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001ce8:	d04d      	beq.n	8001d86 <HAL_DMA_IRQHandler+0xb6>
 8001cea:	3318      	adds	r3, #24
 8001cec:	429c      	cmp	r4, r3
 8001cee:	d04a      	beq.n	8001d86 <HAL_DMA_IRQHandler+0xb6>
 8001cf0:	3330      	adds	r3, #48	; 0x30
 8001cf2:	f8df c284 	ldr.w	ip, [pc, #644]	; 8001f78 <HAL_DMA_IRQHandler+0x2a8>
 8001cf6:	499e      	ldr	r1, [pc, #632]	; (8001f70 <HAL_DMA_IRQHandler+0x2a0>)
 8001cf8:	4564      	cmp	r4, ip
 8001cfa:	bf18      	it	ne
 8001cfc:	429c      	cmpne	r4, r3
 8001cfe:	f10c 0c48 	add.w	ip, ip, #72	; 0x48
 8001d02:	bf0c      	ite	eq
 8001d04:	2301      	moveq	r3, #1
 8001d06:	2300      	movne	r3, #0
 8001d08:	428c      	cmp	r4, r1
 8001d0a:	bf08      	it	eq
 8001d0c:	f043 0301 	orreq.w	r3, r3, #1
 8001d10:	3130      	adds	r1, #48	; 0x30
 8001d12:	4564      	cmp	r4, ip
 8001d14:	bf08      	it	eq
 8001d16:	f043 0301 	orreq.w	r3, r3, #1
 8001d1a:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001d1e:	428c      	cmp	r4, r1
 8001d20:	bf08      	it	eq
 8001d22:	f043 0301 	orreq.w	r3, r3, #1
 8001d26:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8001d2a:	4564      	cmp	r4, ip
 8001d2c:	bf08      	it	eq
 8001d2e:	f043 0301 	orreq.w	r3, r3, #1
 8001d32:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 8001d36:	428c      	cmp	r4, r1
 8001d38:	bf08      	it	eq
 8001d3a:	f043 0301 	orreq.w	r3, r3, #1
 8001d3e:	3130      	adds	r1, #48	; 0x30
 8001d40:	4564      	cmp	r4, ip
 8001d42:	bf08      	it	eq
 8001d44:	f043 0301 	orreq.w	r3, r3, #1
 8001d48:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001d4c:	428c      	cmp	r4, r1
 8001d4e:	bf08      	it	eq
 8001d50:	f043 0301 	orreq.w	r3, r3, #1
 8001d54:	3130      	adds	r1, #48	; 0x30
 8001d56:	4564      	cmp	r4, ip
 8001d58:	bf08      	it	eq
 8001d5a:	f043 0301 	orreq.w	r3, r3, #1
 8001d5e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001d62:	428c      	cmp	r4, r1
 8001d64:	bf08      	it	eq
 8001d66:	f043 0301 	orreq.w	r3, r3, #1
 8001d6a:	3130      	adds	r1, #48	; 0x30
 8001d6c:	4564      	cmp	r4, ip
 8001d6e:	bf08      	it	eq
 8001d70:	f043 0301 	orreq.w	r3, r3, #1
 8001d74:	428c      	cmp	r4, r1
 8001d76:	bf08      	it	eq
 8001d78:	f043 0301 	orreq.w	r3, r3, #1
 8001d7c:	b91b      	cbnz	r3, 8001d86 <HAL_DMA_IRQHandler+0xb6>
 8001d7e:	4b7d      	ldr	r3, [pc, #500]	; (8001f74 <HAL_DMA_IRQHandler+0x2a4>)
 8001d80:	429c      	cmp	r4, r3
 8001d82:	f040 821e 	bne.w	80021c2 <HAL_DMA_IRQHandler+0x4f2>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001d86:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8001d88:	2308      	movs	r3, #8
 8001d8a:	f001 021f 	and.w	r2, r1, #31
 8001d8e:	4093      	lsls	r3, r2
 8001d90:	423b      	tst	r3, r7
 8001d92:	f040 81fb 	bne.w	800218c <HAL_DMA_IRQHandler+0x4bc>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001d96:	fa27 f302 	lsr.w	r3, r7, r2
 8001d9a:	07dc      	lsls	r4, r3, #31
 8001d9c:	d563      	bpl.n	8001e66 <HAL_DMA_IRQHandler+0x196>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001d9e:	6801      	ldr	r1, [r0, #0]
 8001da0:	4b71      	ldr	r3, [pc, #452]	; (8001f68 <HAL_DMA_IRQHandler+0x298>)
 8001da2:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8001f7c <HAL_DMA_IRQHandler+0x2ac>
 8001da6:	4c74      	ldr	r4, [pc, #464]	; (8001f78 <HAL_DMA_IRQHandler+0x2a8>)
 8001da8:	4561      	cmp	r1, ip
 8001daa:	bf18      	it	ne
 8001dac:	4299      	cmpne	r1, r3
 8001dae:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001db2:	bf0c      	ite	eq
 8001db4:	2301      	moveq	r3, #1
 8001db6:	2300      	movne	r3, #0
 8001db8:	42a1      	cmp	r1, r4
 8001dba:	bf08      	it	eq
 8001dbc:	f043 0301 	orreq.w	r3, r3, #1
 8001dc0:	3430      	adds	r4, #48	; 0x30
 8001dc2:	4561      	cmp	r1, ip
 8001dc4:	bf08      	it	eq
 8001dc6:	f043 0301 	orreq.w	r3, r3, #1
 8001dca:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001dce:	42a1      	cmp	r1, r4
 8001dd0:	bf08      	it	eq
 8001dd2:	f043 0301 	orreq.w	r3, r3, #1
 8001dd6:	3430      	adds	r4, #48	; 0x30
 8001dd8:	4561      	cmp	r1, ip
 8001dda:	bf08      	it	eq
 8001ddc:	f043 0301 	orreq.w	r3, r3, #1
 8001de0:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001de4:	42a1      	cmp	r1, r4
 8001de6:	bf08      	it	eq
 8001de8:	f043 0301 	orreq.w	r3, r3, #1
 8001dec:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8001df0:	4561      	cmp	r1, ip
 8001df2:	bf08      	it	eq
 8001df4:	f043 0301 	orreq.w	r3, r3, #1
 8001df8:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 8001dfc:	42a1      	cmp	r1, r4
 8001dfe:	bf08      	it	eq
 8001e00:	f043 0301 	orreq.w	r3, r3, #1
 8001e04:	3430      	adds	r4, #48	; 0x30
 8001e06:	4561      	cmp	r1, ip
 8001e08:	bf08      	it	eq
 8001e0a:	f043 0301 	orreq.w	r3, r3, #1
 8001e0e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001e12:	42a1      	cmp	r1, r4
 8001e14:	bf08      	it	eq
 8001e16:	f043 0301 	orreq.w	r3, r3, #1
 8001e1a:	3430      	adds	r4, #48	; 0x30
 8001e1c:	4561      	cmp	r1, ip
 8001e1e:	bf08      	it	eq
 8001e20:	f043 0301 	orreq.w	r3, r3, #1
 8001e24:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001e28:	42a1      	cmp	r1, r4
 8001e2a:	bf08      	it	eq
 8001e2c:	f043 0301 	orreq.w	r3, r3, #1
 8001e30:	3430      	adds	r4, #48	; 0x30
 8001e32:	4561      	cmp	r1, ip
 8001e34:	bf08      	it	eq
 8001e36:	f043 0301 	orreq.w	r3, r3, #1
 8001e3a:	42a1      	cmp	r1, r4
 8001e3c:	bf08      	it	eq
 8001e3e:	f043 0301 	orreq.w	r3, r3, #1
 8001e42:	b91b      	cbnz	r3, 8001e4c <HAL_DMA_IRQHandler+0x17c>
 8001e44:	4b4b      	ldr	r3, [pc, #300]	; (8001f74 <HAL_DMA_IRQHandler+0x2a4>)
 8001e46:	4299      	cmp	r1, r3
 8001e48:	f040 8285 	bne.w	8002356 <HAL_DMA_IRQHandler+0x686>
 8001e4c:	694b      	ldr	r3, [r1, #20]
 8001e4e:	0619      	lsls	r1, r3, #24
 8001e50:	d509      	bpl.n	8001e66 <HAL_DMA_IRQHandler+0x196>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001e52:	2101      	movs	r1, #1
 8001e54:	4091      	lsls	r1, r2
 8001e56:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e58:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001e5a:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	f001 021f 	and.w	r2, r1, #31
 8001e64:	6543      	str	r3, [r0, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001e66:	2404      	movs	r4, #4
 8001e68:	4094      	lsls	r4, r2
 8001e6a:	423c      	tst	r4, r7
 8001e6c:	d067      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x26e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001e6e:	6801      	ldr	r1, [r0, #0]
 8001e70:	4b3d      	ldr	r3, [pc, #244]	; (8001f68 <HAL_DMA_IRQHandler+0x298>)
 8001e72:	f8df e108 	ldr.w	lr, [pc, #264]	; 8001f7c <HAL_DMA_IRQHandler+0x2ac>
 8001e76:	f8df c100 	ldr.w	ip, [pc, #256]	; 8001f78 <HAL_DMA_IRQHandler+0x2a8>
 8001e7a:	4571      	cmp	r1, lr
 8001e7c:	bf18      	it	ne
 8001e7e:	4299      	cmpne	r1, r3
 8001e80:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8001e84:	bf0c      	ite	eq
 8001e86:	2301      	moveq	r3, #1
 8001e88:	2300      	movne	r3, #0
 8001e8a:	4561      	cmp	r1, ip
 8001e8c:	bf08      	it	eq
 8001e8e:	f043 0301 	orreq.w	r3, r3, #1
 8001e92:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001e96:	4571      	cmp	r1, lr
 8001e98:	bf08      	it	eq
 8001e9a:	f043 0301 	orreq.w	r3, r3, #1
 8001e9e:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8001ea2:	4561      	cmp	r1, ip
 8001ea4:	bf08      	it	eq
 8001ea6:	f043 0301 	orreq.w	r3, r3, #1
 8001eaa:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001eae:	4571      	cmp	r1, lr
 8001eb0:	bf08      	it	eq
 8001eb2:	f043 0301 	orreq.w	r3, r3, #1
 8001eb6:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8001eba:	4561      	cmp	r1, ip
 8001ebc:	bf08      	it	eq
 8001ebe:	f043 0301 	orreq.w	r3, r3, #1
 8001ec2:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 8001ec6:	4571      	cmp	r1, lr
 8001ec8:	bf08      	it	eq
 8001eca:	f043 0301 	orreq.w	r3, r3, #1
 8001ece:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 8001ed2:	4561      	cmp	r1, ip
 8001ed4:	bf08      	it	eq
 8001ed6:	f043 0301 	orreq.w	r3, r3, #1
 8001eda:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001ede:	4571      	cmp	r1, lr
 8001ee0:	bf08      	it	eq
 8001ee2:	f043 0301 	orreq.w	r3, r3, #1
 8001ee6:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8001eea:	4561      	cmp	r1, ip
 8001eec:	bf08      	it	eq
 8001eee:	f043 0301 	orreq.w	r3, r3, #1
 8001ef2:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001ef6:	4571      	cmp	r1, lr
 8001ef8:	bf08      	it	eq
 8001efa:	f043 0301 	orreq.w	r3, r3, #1
 8001efe:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8001f02:	4561      	cmp	r1, ip
 8001f04:	bf08      	it	eq
 8001f06:	f043 0301 	orreq.w	r3, r3, #1
 8001f0a:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001f0e:	4571      	cmp	r1, lr
 8001f10:	bf08      	it	eq
 8001f12:	f043 0301 	orreq.w	r3, r3, #1
 8001f16:	4561      	cmp	r1, ip
 8001f18:	bf08      	it	eq
 8001f1a:	f043 0301 	orreq.w	r3, r3, #1
 8001f1e:	b91b      	cbnz	r3, 8001f28 <HAL_DMA_IRQHandler+0x258>
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <HAL_DMA_IRQHandler+0x2a4>)
 8001f22:	4299      	cmp	r1, r3
 8001f24:	f040 8215 	bne.w	8002352 <HAL_DMA_IRQHandler+0x682>
 8001f28:	680b      	ldr	r3, [r1, #0]
 8001f2a:	079b      	lsls	r3, r3, #30
 8001f2c:	d507      	bpl.n	8001f3e <HAL_DMA_IRQHandler+0x26e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001f2e:	60ac      	str	r4, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f30:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001f32:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8001f34:	f043 0304 	orr.w	r3, r3, #4
 8001f38:	f001 021f 	and.w	r2, r1, #31
 8001f3c:	6543      	str	r3, [r0, #84]	; 0x54
 8001f3e:	4604      	mov	r4, r0
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f40:	2010      	movs	r0, #16
 8001f42:	4090      	lsls	r0, r2
 8001f44:	4238      	tst	r0, r7
 8001f46:	f000 8086 	beq.w	8002056 <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001f4a:	6821      	ldr	r1, [r4, #0]
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_DMA_IRQHandler+0x298>)
 8001f4e:	f8df e02c 	ldr.w	lr, [pc, #44]	; 8001f7c <HAL_DMA_IRQHandler+0x2ac>
 8001f52:	f8df c024 	ldr.w	ip, [pc, #36]	; 8001f78 <HAL_DMA_IRQHandler+0x2a8>
 8001f56:	4571      	cmp	r1, lr
 8001f58:	bf18      	it	ne
 8001f5a:	4299      	cmpne	r1, r3
 8001f5c:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8001f60:	bf08      	it	eq
 8001f62:	2301      	moveq	r3, #1
 8001f64:	e00c      	b.n	8001f80 <HAL_DMA_IRQHandler+0x2b0>
 8001f66:	bf00      	nop
 8001f68:	40020010 	.word	0x40020010
 8001f6c:	20000014 	.word	0x20000014
 8001f70:	40020070 	.word	0x40020070
 8001f74:	400204b8 	.word	0x400204b8
 8001f78:	40020040 	.word	0x40020040
 8001f7c:	40020028 	.word	0x40020028
 8001f80:	bf18      	it	ne
 8001f82:	2300      	movne	r3, #0
 8001f84:	4561      	cmp	r1, ip
 8001f86:	bf08      	it	eq
 8001f88:	f043 0301 	orreq.w	r3, r3, #1
 8001f8c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001f90:	4571      	cmp	r1, lr
 8001f92:	bf08      	it	eq
 8001f94:	f043 0301 	orreq.w	r3, r3, #1
 8001f98:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8001f9c:	4561      	cmp	r1, ip
 8001f9e:	bf08      	it	eq
 8001fa0:	f043 0301 	orreq.w	r3, r3, #1
 8001fa4:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001fa8:	4571      	cmp	r1, lr
 8001faa:	bf08      	it	eq
 8001fac:	f043 0301 	orreq.w	r3, r3, #1
 8001fb0:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8001fb4:	4561      	cmp	r1, ip
 8001fb6:	bf08      	it	eq
 8001fb8:	f043 0301 	orreq.w	r3, r3, #1
 8001fbc:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 8001fc0:	4571      	cmp	r1, lr
 8001fc2:	bf08      	it	eq
 8001fc4:	f043 0301 	orreq.w	r3, r3, #1
 8001fc8:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 8001fcc:	4561      	cmp	r1, ip
 8001fce:	bf08      	it	eq
 8001fd0:	f043 0301 	orreq.w	r3, r3, #1
 8001fd4:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001fd8:	4571      	cmp	r1, lr
 8001fda:	bf08      	it	eq
 8001fdc:	f043 0301 	orreq.w	r3, r3, #1
 8001fe0:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8001fe4:	4561      	cmp	r1, ip
 8001fe6:	bf08      	it	eq
 8001fe8:	f043 0301 	orreq.w	r3, r3, #1
 8001fec:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001ff0:	4571      	cmp	r1, lr
 8001ff2:	bf08      	it	eq
 8001ff4:	f043 0301 	orreq.w	r3, r3, #1
 8001ff8:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8001ffc:	4561      	cmp	r1, ip
 8001ffe:	bf08      	it	eq
 8002000:	f043 0301 	orreq.w	r3, r3, #1
 8002004:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8002008:	4571      	cmp	r1, lr
 800200a:	bf08      	it	eq
 800200c:	f043 0301 	orreq.w	r3, r3, #1
 8002010:	4561      	cmp	r1, ip
 8002012:	bf08      	it	eq
 8002014:	f043 0301 	orreq.w	r3, r3, #1
 8002018:	b91b      	cbnz	r3, 8002022 <HAL_DMA_IRQHandler+0x352>
 800201a:	4b9f      	ldr	r3, [pc, #636]	; (8002298 <HAL_DMA_IRQHandler+0x5c8>)
 800201c:	4299      	cmp	r1, r3
 800201e:	f040 8194 	bne.w	800234a <HAL_DMA_IRQHandler+0x67a>
 8002022:	680b      	ldr	r3, [r1, #0]
 8002024:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002028:	b1ab      	cbz	r3, 8002056 <HAL_DMA_IRQHandler+0x386>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800202a:	60a8      	str	r0, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800202c:	6823      	ldr	r3, [r4, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	0350      	lsls	r0, r2, #13
 8002032:	f100 8102 	bmi.w	800223a <HAL_DMA_IRQHandler+0x56a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	05d2      	lsls	r2, r2, #23
 800203a:	d403      	bmi.n	8002044 <HAL_DMA_IRQHandler+0x374>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	f022 0208 	bic.w	r2, r2, #8
 8002042:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8002044:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 80ff 	beq.w	800224a <HAL_DMA_IRQHandler+0x57a>
            hdma->XferHalfCpltCallback(hdma);
 800204c:	4620      	mov	r0, r4
 800204e:	4798      	blx	r3
 8002050:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002052:	f001 021f 	and.w	r2, r1, #31
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002056:	2120      	movs	r1, #32
 8002058:	4091      	lsls	r1, r2
 800205a:	4239      	tst	r1, r7
 800205c:	d068      	beq.n	8002130 <HAL_DMA_IRQHandler+0x460>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800205e:	6822      	ldr	r2, [r4, #0]
 8002060:	4b8e      	ldr	r3, [pc, #568]	; (800229c <HAL_DMA_IRQHandler+0x5cc>)
 8002062:	4f8f      	ldr	r7, [pc, #572]	; (80022a0 <HAL_DMA_IRQHandler+0x5d0>)
 8002064:	488f      	ldr	r0, [pc, #572]	; (80022a4 <HAL_DMA_IRQHandler+0x5d4>)
 8002066:	42ba      	cmp	r2, r7
 8002068:	bf18      	it	ne
 800206a:	429a      	cmpne	r2, r3
 800206c:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8002070:	bf0c      	ite	eq
 8002072:	2301      	moveq	r3, #1
 8002074:	2300      	movne	r3, #0
 8002076:	4282      	cmp	r2, r0
 8002078:	bf08      	it	eq
 800207a:	f043 0301 	orreq.w	r3, r3, #1
 800207e:	3030      	adds	r0, #48	; 0x30
 8002080:	42ba      	cmp	r2, r7
 8002082:	bf08      	it	eq
 8002084:	f043 0301 	orreq.w	r3, r3, #1
 8002088:	3730      	adds	r7, #48	; 0x30
 800208a:	4282      	cmp	r2, r0
 800208c:	bf08      	it	eq
 800208e:	f043 0301 	orreq.w	r3, r3, #1
 8002092:	3030      	adds	r0, #48	; 0x30
 8002094:	42ba      	cmp	r2, r7
 8002096:	bf08      	it	eq
 8002098:	f043 0301 	orreq.w	r3, r3, #1
 800209c:	3730      	adds	r7, #48	; 0x30
 800209e:	4282      	cmp	r2, r0
 80020a0:	bf08      	it	eq
 80020a2:	f043 0301 	orreq.w	r3, r3, #1
 80020a6:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80020aa:	42ba      	cmp	r2, r7
 80020ac:	bf08      	it	eq
 80020ae:	f043 0301 	orreq.w	r3, r3, #1
 80020b2:	f507 775c 	add.w	r7, r7, #880	; 0x370
 80020b6:	4282      	cmp	r2, r0
 80020b8:	bf08      	it	eq
 80020ba:	f043 0301 	orreq.w	r3, r3, #1
 80020be:	3030      	adds	r0, #48	; 0x30
 80020c0:	42ba      	cmp	r2, r7
 80020c2:	bf08      	it	eq
 80020c4:	f043 0301 	orreq.w	r3, r3, #1
 80020c8:	3730      	adds	r7, #48	; 0x30
 80020ca:	4282      	cmp	r2, r0
 80020cc:	bf08      	it	eq
 80020ce:	f043 0301 	orreq.w	r3, r3, #1
 80020d2:	3030      	adds	r0, #48	; 0x30
 80020d4:	42ba      	cmp	r2, r7
 80020d6:	bf08      	it	eq
 80020d8:	f043 0301 	orreq.w	r3, r3, #1
 80020dc:	3730      	adds	r7, #48	; 0x30
 80020de:	4282      	cmp	r2, r0
 80020e0:	bf08      	it	eq
 80020e2:	f043 0301 	orreq.w	r3, r3, #1
 80020e6:	3030      	adds	r0, #48	; 0x30
 80020e8:	42ba      	cmp	r2, r7
 80020ea:	bf08      	it	eq
 80020ec:	f043 0301 	orreq.w	r3, r3, #1
 80020f0:	4282      	cmp	r2, r0
 80020f2:	bf08      	it	eq
 80020f4:	f043 0301 	orreq.w	r3, r3, #1
 80020f8:	b91b      	cbnz	r3, 8002102 <HAL_DMA_IRQHandler+0x432>
 80020fa:	4b67      	ldr	r3, [pc, #412]	; (8002298 <HAL_DMA_IRQHandler+0x5c8>)
 80020fc:	429a      	cmp	r2, r3
 80020fe:	f040 812c 	bne.w	800235a <HAL_DMA_IRQHandler+0x68a>
 8002102:	6813      	ldr	r3, [r2, #0]
 8002104:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002108:	b193      	cbz	r3, 8002130 <HAL_DMA_IRQHandler+0x460>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800210a:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800210c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002110:	2b04      	cmp	r3, #4
 8002112:	f000 809e 	beq.w	8002252 <HAL_DMA_IRQHandler+0x582>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	0357      	lsls	r7, r2, #13
 800211c:	f140 80ce 	bpl.w	80022bc <HAL_DMA_IRQHandler+0x5ec>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	031d      	lsls	r5, r3, #12
 8002124:	f140 80d9 	bpl.w	80022da <HAL_DMA_IRQHandler+0x60a>
          if(hdma->XferCpltCallback != NULL)
 8002128:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800212a:	b10b      	cbz	r3, 8002130 <HAL_DMA_IRQHandler+0x460>
            hdma->XferCpltCallback(hdma);
 800212c:	4620      	mov	r0, r4
 800212e:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002130:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002132:	2b00      	cmp	r3, #0
 8002134:	d07f      	beq.n	8002236 <HAL_DMA_IRQHandler+0x566>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002136:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002138:	07d8      	lsls	r0, r3, #31
 800213a:	d51f      	bpl.n	800217c <HAL_DMA_IRQHandler+0x4ac>
        __HAL_DMA_DISABLE(hdma);
 800213c:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 800213e:	2004      	movs	r0, #4
 8002140:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8002144:	6813      	ldr	r3, [r2, #0]
 8002146:	f023 0301 	bic.w	r3, r3, #1
 800214a:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800214c:	4b56      	ldr	r3, [pc, #344]	; (80022a8 <HAL_DMA_IRQHandler+0x5d8>)
 800214e:	6822      	ldr	r2, [r4, #0]
 8002150:	fba3 3606 	umull	r3, r6, r3, r6
 8002154:	0ab6      	lsrs	r6, r6, #10
 8002156:	e002      	b.n	800215e <HAL_DMA_IRQHandler+0x48e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002158:	6813      	ldr	r3, [r2, #0]
 800215a:	07d9      	lsls	r1, r3, #31
 800215c:	d504      	bpl.n	8002168 <HAL_DMA_IRQHandler+0x498>
          if (++count > timeout)
 800215e:	9b01      	ldr	r3, [sp, #4]
 8002160:	3301      	adds	r3, #1
 8002162:	42b3      	cmp	r3, r6
 8002164:	9301      	str	r3, [sp, #4]
 8002166:	d9f7      	bls.n	8002158 <HAL_DMA_IRQHandler+0x488>
        __HAL_UNLOCK(hdma);
 8002168:	2300      	movs	r3, #0
 800216a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800216e:	6813      	ldr	r3, [r2, #0]
 8002170:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8002172:	bf4c      	ite	mi
 8002174:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8002176:	2301      	movpl	r3, #1
 8002178:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 800217c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800217e:	2b00      	cmp	r3, #0
 8002180:	d059      	beq.n	8002236 <HAL_DMA_IRQHandler+0x566>
        hdma->XferErrorCallback(hdma);
 8002182:	4620      	mov	r0, r4
}
 8002184:	b003      	add	sp, #12
 8002186:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 800218a:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800218c:	6823      	ldr	r3, [r4, #0]
 800218e:	075b      	lsls	r3, r3, #29
 8002190:	f57f ae01 	bpl.w	8001d96 <HAL_DMA_IRQHandler+0xc6>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002194:	6822      	ldr	r2, [r4, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002196:	2308      	movs	r3, #8
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002198:	f022 0204 	bic.w	r2, r2, #4
 800219c:	6022      	str	r2, [r4, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800219e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80021a0:	f002 021f 	and.w	r2, r2, #31
 80021a4:	4093      	lsls	r3, r2
 80021a6:	60ab      	str	r3, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021a8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80021aa:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	f001 021f 	and.w	r2, r1, #31
 80021b4:	6543      	str	r3, [r0, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80021b6:	fa27 f302 	lsr.w	r3, r7, r2
 80021ba:	07dc      	lsls	r4, r3, #31
 80021bc:	f57f ae53 	bpl.w	8001e66 <HAL_DMA_IRQHandler+0x196>
 80021c0:	e5ed      	b.n	8001d9e <HAL_DMA_IRQHandler+0xce>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80021c2:	4b3a      	ldr	r3, [pc, #232]	; (80022ac <HAL_DMA_IRQHandler+0x5dc>)
 80021c4:	4e3a      	ldr	r6, [pc, #232]	; (80022b0 <HAL_DMA_IRQHandler+0x5e0>)
 80021c6:	493b      	ldr	r1, [pc, #236]	; (80022b4 <HAL_DMA_IRQHandler+0x5e4>)
 80021c8:	42b4      	cmp	r4, r6
 80021ca:	bf18      	it	ne
 80021cc:	429c      	cmpne	r4, r3
 80021ce:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80021d2:	bf0c      	ite	eq
 80021d4:	2301      	moveq	r3, #1
 80021d6:	2300      	movne	r3, #0
 80021d8:	428c      	cmp	r4, r1
 80021da:	bf08      	it	eq
 80021dc:	f043 0301 	orreq.w	r3, r3, #1
 80021e0:	3128      	adds	r1, #40	; 0x28
 80021e2:	42b4      	cmp	r4, r6
 80021e4:	bf08      	it	eq
 80021e6:	f043 0301 	orreq.w	r3, r3, #1
 80021ea:	3628      	adds	r6, #40	; 0x28
 80021ec:	428c      	cmp	r4, r1
 80021ee:	bf08      	it	eq
 80021f0:	f043 0301 	orreq.w	r3, r3, #1
 80021f4:	3128      	adds	r1, #40	; 0x28
 80021f6:	42b4      	cmp	r4, r6
 80021f8:	bf08      	it	eq
 80021fa:	f043 0301 	orreq.w	r3, r3, #1
 80021fe:	428c      	cmp	r4, r1
 8002200:	bf08      	it	eq
 8002202:	f043 0301 	orreq.w	r3, r3, #1
 8002206:	b913      	cbnz	r3, 800220e <HAL_DMA_IRQHandler+0x53e>
 8002208:	4b2b      	ldr	r3, [pc, #172]	; (80022b8 <HAL_DMA_IRQHandler+0x5e8>)
 800220a:	429c      	cmp	r4, r3
 800220c:	d113      	bne.n	8002236 <HAL_DMA_IRQHandler+0x566>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800220e:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8002210:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002212:	6823      	ldr	r3, [r4, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002214:	f001 011f 	and.w	r1, r1, #31
 8002218:	408e      	lsls	r6, r1
 800221a:	4216      	tst	r6, r2
 800221c:	d066      	beq.n	80022ec <HAL_DMA_IRQHandler+0x61c>
 800221e:	075f      	lsls	r7, r3, #29
 8002220:	d564      	bpl.n	80022ec <HAL_DMA_IRQHandler+0x61c>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002222:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002224:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002226:	f140 809c 	bpl.w	8002362 <HAL_DMA_IRQHandler+0x692>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800222a:	03da      	lsls	r2, r3, #15
 800222c:	f100 80f1 	bmi.w	8002412 <HAL_DMA_IRQHandler+0x742>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002230:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1a6      	bne.n	8002184 <HAL_DMA_IRQHandler+0x4b4>
}
 8002236:	b003      	add	sp, #12
 8002238:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	0319      	lsls	r1, r3, #12
 800223e:	f57f af01 	bpl.w	8002044 <HAL_DMA_IRQHandler+0x374>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002242:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002244:	2b00      	cmp	r3, #0
 8002246:	f47f af01 	bne.w	800204c <HAL_DMA_IRQHandler+0x37c>
 800224a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800224c:	f002 021f 	and.w	r2, r2, #31
 8002250:	e701      	b.n	8002056 <HAL_DMA_IRQHandler+0x386>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002252:	6822      	ldr	r2, [r4, #0]
 8002254:	6813      	ldr	r3, [r2, #0]
 8002256:	f023 0316 	bic.w	r3, r3, #22
 800225a:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800225c:	6822      	ldr	r2, [r4, #0]
 800225e:	6953      	ldr	r3, [r2, #20]
 8002260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002264:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002266:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002268:	2b00      	cmp	r3, #0
 800226a:	d03b      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x614>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800226c:	6822      	ldr	r2, [r4, #0]
 800226e:	6813      	ldr	r3, [r2, #0]
 8002270:	f023 0308 	bic.w	r3, r3, #8
 8002274:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002276:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002278:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 800227a:	2000      	movs	r0, #0
          hdma->State = HAL_DMA_STATE_READY;
 800227c:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800227e:	f002 021f 	and.w	r2, r2, #31
 8002282:	4093      	lsls	r3, r2
 8002284:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
 8002286:	6d23      	ldr	r3, [r4, #80]	; 0x50
          __HAL_UNLOCK(hdma);
 8002288:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800228c:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 8002290:	2b00      	cmp	r3, #0
 8002292:	f47f af76 	bne.w	8002182 <HAL_DMA_IRQHandler+0x4b2>
 8002296:	e7ce      	b.n	8002236 <HAL_DMA_IRQHandler+0x566>
 8002298:	400204b8 	.word	0x400204b8
 800229c:	40020010 	.word	0x40020010
 80022a0:	40020028 	.word	0x40020028
 80022a4:	40020040 	.word	0x40020040
 80022a8:	1b4e81b5 	.word	0x1b4e81b5
 80022ac:	58025408 	.word	0x58025408
 80022b0:	5802541c 	.word	0x5802541c
 80022b4:	58025430 	.word	0x58025430
 80022b8:	58025494 	.word	0x58025494
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80022c2:	f47f af31 	bne.w	8002128 <HAL_DMA_IRQHandler+0x458>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80022c6:	6819      	ldr	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 80022c8:	2001      	movs	r0, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80022ca:	f021 0110 	bic.w	r1, r1, #16
 80022ce:	6019      	str	r1, [r3, #0]
            __HAL_UNLOCK(hdma);
 80022d0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 80022d4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 80022d8:	e726      	b.n	8002128 <HAL_DMA_IRQHandler+0x458>
            if(hdma->XferM1CpltCallback != NULL)
 80022da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f47f af25 	bne.w	800212c <HAL_DMA_IRQHandler+0x45c>
 80022e2:	e725      	b.n	8002130 <HAL_DMA_IRQHandler+0x460>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1c0      	bne.n	800226c <HAL_DMA_IRQHandler+0x59c>
 80022ea:	e7c4      	b.n	8002276 <HAL_DMA_IRQHandler+0x5a6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80022ec:	2602      	movs	r6, #2
 80022ee:	408e      	lsls	r6, r1
 80022f0:	4216      	tst	r6, r2
 80022f2:	d00d      	beq.n	8002310 <HAL_DMA_IRQHandler+0x640>
 80022f4:	079f      	lsls	r7, r3, #30
 80022f6:	d50b      	bpl.n	8002310 <HAL_DMA_IRQHandler+0x640>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80022f8:	041c      	lsls	r4, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80022fa:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80022fc:	f140 808e 	bpl.w	800241c <HAL_DMA_IRQHandler+0x74c>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002300:	03d9      	lsls	r1, r3, #15
 8002302:	f100 80e9 	bmi.w	80024d8 <HAL_DMA_IRQHandler+0x808>
          if(hdma->XferM1CpltCallback != NULL)
 8002306:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002308:	2b00      	cmp	r3, #0
 800230a:	f47f af3b 	bne.w	8002184 <HAL_DMA_IRQHandler+0x4b4>
 800230e:	e792      	b.n	8002236 <HAL_DMA_IRQHandler+0x566>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002310:	2608      	movs	r6, #8
 8002312:	fa06 f101 	lsl.w	r1, r6, r1
 8002316:	4211      	tst	r1, r2
 8002318:	d08d      	beq.n	8002236 <HAL_DMA_IRQHandler+0x566>
 800231a:	071b      	lsls	r3, r3, #28
 800231c:	d58b      	bpl.n	8002236 <HAL_DMA_IRQHandler+0x566>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800231e:	6823      	ldr	r3, [r4, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002320:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8002322:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002324:	f023 030e 	bic.w	r3, r3, #14
 8002328:	6023      	str	r3, [r4, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800232a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	606b      	str	r3, [r5, #4]
      if (hdma->XferErrorCallback != NULL)
 8002336:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002338:	6542      	str	r2, [r0, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 800233a:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800233e:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8002342:	2b00      	cmp	r3, #0
 8002344:	f47f af1e 	bne.w	8002184 <HAL_DMA_IRQHandler+0x4b4>
 8002348:	e775      	b.n	8002236 <HAL_DMA_IRQHandler+0x566>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800234a:	680b      	ldr	r3, [r1, #0]
 800234c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002350:	e66a      	b.n	8002028 <HAL_DMA_IRQHandler+0x358>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002352:	680b      	ldr	r3, [r1, #0]
 8002354:	e5f3      	b.n	8001f3e <HAL_DMA_IRQHandler+0x26e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002356:	680b      	ldr	r3, [r1, #0]
 8002358:	e585      	b.n	8001e66 <HAL_DMA_IRQHandler+0x196>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800235a:	6813      	ldr	r3, [r2, #0]
 800235c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002360:	e6d2      	b.n	8002108 <HAL_DMA_IRQHandler+0x438>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002362:	069b      	lsls	r3, r3, #26
 8002364:	d455      	bmi.n	8002412 <HAL_DMA_IRQHandler+0x742>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002366:	6802      	ldr	r2, [r0, #0]
 8002368:	4b63      	ldr	r3, [pc, #396]	; (80024f8 <HAL_DMA_IRQHandler+0x828>)
 800236a:	4c64      	ldr	r4, [pc, #400]	; (80024fc <HAL_DMA_IRQHandler+0x82c>)
 800236c:	4964      	ldr	r1, [pc, #400]	; (8002500 <HAL_DMA_IRQHandler+0x830>)
 800236e:	42a2      	cmp	r2, r4
 8002370:	bf18      	it	ne
 8002372:	429a      	cmpne	r2, r3
 8002374:	4d63      	ldr	r5, [pc, #396]	; (8002504 <HAL_DMA_IRQHandler+0x834>)
 8002376:	f104 0448 	add.w	r4, r4, #72	; 0x48
 800237a:	bf0c      	ite	eq
 800237c:	2301      	moveq	r3, #1
 800237e:	2300      	movne	r3, #0
 8002380:	428a      	cmp	r2, r1
 8002382:	bf08      	it	eq
 8002384:	f043 0301 	orreq.w	r3, r3, #1
 8002388:	3148      	adds	r1, #72	; 0x48
 800238a:	42aa      	cmp	r2, r5
 800238c:	bf08      	it	eq
 800238e:	f043 0301 	orreq.w	r3, r3, #1
 8002392:	3548      	adds	r5, #72	; 0x48
 8002394:	42a2      	cmp	r2, r4
 8002396:	bf08      	it	eq
 8002398:	f043 0301 	orreq.w	r3, r3, #1
 800239c:	3448      	adds	r4, #72	; 0x48
 800239e:	428a      	cmp	r2, r1
 80023a0:	bf08      	it	eq
 80023a2:	f043 0301 	orreq.w	r3, r3, #1
 80023a6:	f501 7162 	add.w	r1, r1, #904	; 0x388
 80023aa:	42aa      	cmp	r2, r5
 80023ac:	bf08      	it	eq
 80023ae:	f043 0301 	orreq.w	r3, r3, #1
 80023b2:	f505 7562 	add.w	r5, r5, #904	; 0x388
 80023b6:	42a2      	cmp	r2, r4
 80023b8:	bf08      	it	eq
 80023ba:	f043 0301 	orreq.w	r3, r3, #1
 80023be:	f504 7462 	add.w	r4, r4, #904	; 0x388
 80023c2:	428a      	cmp	r2, r1
 80023c4:	bf08      	it	eq
 80023c6:	f043 0301 	orreq.w	r3, r3, #1
 80023ca:	3148      	adds	r1, #72	; 0x48
 80023cc:	42aa      	cmp	r2, r5
 80023ce:	bf08      	it	eq
 80023d0:	f043 0301 	orreq.w	r3, r3, #1
 80023d4:	3548      	adds	r5, #72	; 0x48
 80023d6:	42a2      	cmp	r2, r4
 80023d8:	bf08      	it	eq
 80023da:	f043 0301 	orreq.w	r3, r3, #1
 80023de:	3448      	adds	r4, #72	; 0x48
 80023e0:	428a      	cmp	r2, r1
 80023e2:	bf08      	it	eq
 80023e4:	f043 0301 	orreq.w	r3, r3, #1
 80023e8:	3148      	adds	r1, #72	; 0x48
 80023ea:	42aa      	cmp	r2, r5
 80023ec:	bf08      	it	eq
 80023ee:	f043 0301 	orreq.w	r3, r3, #1
 80023f2:	42a2      	cmp	r2, r4
 80023f4:	bf08      	it	eq
 80023f6:	f043 0301 	orreq.w	r3, r3, #1
 80023fa:	428a      	cmp	r2, r1
 80023fc:	bf08      	it	eq
 80023fe:	f043 0301 	orreq.w	r3, r3, #1
 8002402:	b913      	cbnz	r3, 800240a <HAL_DMA_IRQHandler+0x73a>
 8002404:	4b40      	ldr	r3, [pc, #256]	; (8002508 <HAL_DMA_IRQHandler+0x838>)
 8002406:	429a      	cmp	r2, r3
 8002408:	d16b      	bne.n	80024e2 <HAL_DMA_IRQHandler+0x812>
 800240a:	6813      	ldr	r3, [r2, #0]
 800240c:	f023 0308 	bic.w	r3, r3, #8
 8002410:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8002412:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002414:	2b00      	cmp	r3, #0
 8002416:	f47f aeb5 	bne.w	8002184 <HAL_DMA_IRQHandler+0x4b4>
 800241a:	e70c      	b.n	8002236 <HAL_DMA_IRQHandler+0x566>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800241c:	069a      	lsls	r2, r3, #26
 800241e:	d45b      	bmi.n	80024d8 <HAL_DMA_IRQHandler+0x808>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002420:	6802      	ldr	r2, [r0, #0]
 8002422:	4b35      	ldr	r3, [pc, #212]	; (80024f8 <HAL_DMA_IRQHandler+0x828>)
 8002424:	4c35      	ldr	r4, [pc, #212]	; (80024fc <HAL_DMA_IRQHandler+0x82c>)
 8002426:	4936      	ldr	r1, [pc, #216]	; (8002500 <HAL_DMA_IRQHandler+0x830>)
 8002428:	42a2      	cmp	r2, r4
 800242a:	bf18      	it	ne
 800242c:	429a      	cmpne	r2, r3
 800242e:	4d35      	ldr	r5, [pc, #212]	; (8002504 <HAL_DMA_IRQHandler+0x834>)
 8002430:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8002434:	bf0c      	ite	eq
 8002436:	2301      	moveq	r3, #1
 8002438:	2300      	movne	r3, #0
 800243a:	428a      	cmp	r2, r1
 800243c:	bf08      	it	eq
 800243e:	f043 0301 	orreq.w	r3, r3, #1
 8002442:	3148      	adds	r1, #72	; 0x48
 8002444:	42aa      	cmp	r2, r5
 8002446:	bf08      	it	eq
 8002448:	f043 0301 	orreq.w	r3, r3, #1
 800244c:	3548      	adds	r5, #72	; 0x48
 800244e:	42a2      	cmp	r2, r4
 8002450:	bf08      	it	eq
 8002452:	f043 0301 	orreq.w	r3, r3, #1
 8002456:	3448      	adds	r4, #72	; 0x48
 8002458:	428a      	cmp	r2, r1
 800245a:	bf08      	it	eq
 800245c:	f043 0301 	orreq.w	r3, r3, #1
 8002460:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8002464:	42aa      	cmp	r2, r5
 8002466:	bf08      	it	eq
 8002468:	f043 0301 	orreq.w	r3, r3, #1
 800246c:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8002470:	42a2      	cmp	r2, r4
 8002472:	bf08      	it	eq
 8002474:	f043 0301 	orreq.w	r3, r3, #1
 8002478:	f504 7462 	add.w	r4, r4, #904	; 0x388
 800247c:	428a      	cmp	r2, r1
 800247e:	bf08      	it	eq
 8002480:	f043 0301 	orreq.w	r3, r3, #1
 8002484:	3148      	adds	r1, #72	; 0x48
 8002486:	42aa      	cmp	r2, r5
 8002488:	bf08      	it	eq
 800248a:	f043 0301 	orreq.w	r3, r3, #1
 800248e:	3548      	adds	r5, #72	; 0x48
 8002490:	42a2      	cmp	r2, r4
 8002492:	bf08      	it	eq
 8002494:	f043 0301 	orreq.w	r3, r3, #1
 8002498:	3448      	adds	r4, #72	; 0x48
 800249a:	428a      	cmp	r2, r1
 800249c:	bf08      	it	eq
 800249e:	f043 0301 	orreq.w	r3, r3, #1
 80024a2:	3148      	adds	r1, #72	; 0x48
 80024a4:	42aa      	cmp	r2, r5
 80024a6:	bf08      	it	eq
 80024a8:	f043 0301 	orreq.w	r3, r3, #1
 80024ac:	42a2      	cmp	r2, r4
 80024ae:	bf08      	it	eq
 80024b0:	f043 0301 	orreq.w	r3, r3, #1
 80024b4:	428a      	cmp	r2, r1
 80024b6:	bf08      	it	eq
 80024b8:	f043 0301 	orreq.w	r3, r3, #1
 80024bc:	b913      	cbnz	r3, 80024c4 <HAL_DMA_IRQHandler+0x7f4>
 80024be:	4b12      	ldr	r3, [pc, #72]	; (8002508 <HAL_DMA_IRQHandler+0x838>)
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d113      	bne.n	80024ec <HAL_DMA_IRQHandler+0x81c>
 80024c4:	6813      	ldr	r3, [r2, #0]
 80024c6:	f023 0314 	bic.w	r3, r3, #20
 80024ca:	6013      	str	r3, [r2, #0]
          __HAL_UNLOCK(hdma);
 80024cc:	2200      	movs	r2, #0
          hdma->State = HAL_DMA_STATE_READY;
 80024ce:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80024d0:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80024d4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80024d8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f47f ae52 	bne.w	8002184 <HAL_DMA_IRQHandler+0x4b4>
 80024e0:	e6a9      	b.n	8002236 <HAL_DMA_IRQHandler+0x566>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024e2:	6813      	ldr	r3, [r2, #0]
 80024e4:	f023 0304 	bic.w	r3, r3, #4
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	e792      	b.n	8002412 <HAL_DMA_IRQHandler+0x742>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80024ec:	6813      	ldr	r3, [r2, #0]
 80024ee:	f023 030a 	bic.w	r3, r3, #10
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	e7ea      	b.n	80024cc <HAL_DMA_IRQHandler+0x7fc>
 80024f6:	bf00      	nop
 80024f8:	40020010 	.word	0x40020010
 80024fc:	40020028 	.word	0x40020028
 8002500:	40020040 	.word	0x40020040
 8002504:	40020058 	.word	0x40020058
 8002508:	400204b8 	.word	0x400204b8

0800250c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800250c:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800250e:	4770      	bx	lr

08002510 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002510:	680b      	ldr	r3, [r1, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 80e8 	beq.w	80026e8 <HAL_GPIO_Init+0x1d8>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002518:	f8df c224 	ldr.w	ip, [pc, #548]	; 8002740 <HAL_GPIO_Init+0x230>
{
 800251c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8002520:	2500      	movs	r5, #0
{
 8002522:	b083      	sub	sp, #12
 8002524:	f8df e21c 	ldr.w	lr, [pc, #540]	; 8002744 <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002528:	4f7f      	ldr	r7, [pc, #508]	; (8002728 <HAL_GPIO_Init+0x218>)
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800252a:	2201      	movs	r2, #1
 800252c:	40aa      	lsls	r2, r5
    if (iocurrent != 0x00U)
 800252e:	ea12 0603 	ands.w	r6, r2, r3
 8002532:	f000 80bf 	beq.w	80026b4 <HAL_GPIO_Init+0x1a4>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002536:	684b      	ldr	r3, [r1, #4]
 8002538:	ea4f 0845 	mov.w	r8, r5, lsl #1
 800253c:	2403      	movs	r4, #3
 800253e:	f023 0910 	bic.w	r9, r3, #16
 8002542:	fa04 f408 	lsl.w	r4, r4, r8
 8002546:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800254a:	43e4      	mvns	r4, r4
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800254c:	f1b9 0f01 	cmp.w	r9, #1
 8002550:	d814      	bhi.n	800257c <HAL_GPIO_Init+0x6c>
        temp = GPIOx->OSPEEDR;
 8002552:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002554:	ea03 0904 	and.w	r9, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002558:	68cb      	ldr	r3, [r1, #12]
 800255a:	fa03 f308 	lsl.w	r3, r3, r8
 800255e:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OSPEEDR = temp;
 8002562:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002564:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
 8002566:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800256a:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800256e:	ea29 0902 	bic.w	r9, r9, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002572:	fa03 f205 	lsl.w	r2, r3, r5
 8002576:	ea42 0209 	orr.w	r2, r2, r9
        GPIOx->OTYPER = temp;
 800257a:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800257c:	68c2      	ldr	r2, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800257e:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002580:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002582:	fa03 f308 	lsl.w	r3, r3, r8
 8002586:	4313      	orrs	r3, r2
      GPIOx->PUPDR = temp;
 8002588:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800258a:	684b      	ldr	r3, [r1, #4]
 800258c:	f023 0210 	bic.w	r2, r3, #16
 8002590:	2a02      	cmp	r2, #2
 8002592:	d115      	bne.n	80025c0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3U];
 8002594:	08ea      	lsrs	r2, r5, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002596:	f005 0907 	and.w	r9, r5, #7
 800259a:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800259e:	690b      	ldr	r3, [r1, #16]
 80025a0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025a4:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80025a8:	f8d2 a020 	ldr.w	sl, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025ac:	fa0b fb09 	lsl.w	fp, fp, r9
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025b0:	fa03 f309 	lsl.w	r3, r3, r9
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025b4:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025b8:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 80025bc:	6213      	str	r3, [r2, #32]
 80025be:	684b      	ldr	r3, [r1, #4]
      temp = GPIOx->MODER;
 80025c0:	6802      	ldr	r2, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025c2:	f003 0303 	and.w	r3, r3, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025c6:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025c8:	fa03 f308 	lsl.w	r3, r3, r8
 80025cc:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
 80025ce:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025d0:	684b      	ldr	r3, [r1, #4]
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	d56d      	bpl.n	80026b2 <HAL_GPIO_Init+0x1a2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d6:	f8dc 40f4 	ldr.w	r4, [ip, #244]	; 0xf4
 80025da:	f025 0903 	bic.w	r9, r5, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025de:	f005 0303 	and.w	r3, r5, #3
 80025e2:	220f      	movs	r2, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e4:	f044 0802 	orr.w	r8, r4, #2
 80025e8:	eb09 040e 	add.w	r4, r9, lr
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025ec:	ea4f 0983 	mov.w	r9, r3, lsl #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025f0:	4b4e      	ldr	r3, [pc, #312]	; (800272c <HAL_GPIO_Init+0x21c>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f2:	f8cc 80f4 	str.w	r8, [ip, #244]	; 0xf4
 80025f6:	f8dc 80f4 	ldr.w	r8, [ip, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025fa:	fa02 f209 	lsl.w	r2, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025fe:	4298      	cmp	r0, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002600:	f008 0802 	and.w	r8, r8, #2
 8002604:	f8cd 8004 	str.w	r8, [sp, #4]
 8002608:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800260c:	f8d4 8008 	ldr.w	r8, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002610:	ea28 0202 	bic.w	r2, r8, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002614:	d026      	beq.n	8002664 <HAL_GPIO_Init+0x154>
 8002616:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800261a:	4298      	cmp	r0, r3
 800261c:	d058      	beq.n	80026d0 <HAL_GPIO_Init+0x1c0>
 800261e:	4b44      	ldr	r3, [pc, #272]	; (8002730 <HAL_GPIO_Init+0x220>)
 8002620:	4298      	cmp	r0, r3
 8002622:	d04f      	beq.n	80026c4 <HAL_GPIO_Init+0x1b4>
 8002624:	4b43      	ldr	r3, [pc, #268]	; (8002734 <HAL_GPIO_Init+0x224>)
 8002626:	4298      	cmp	r0, r3
 8002628:	d05f      	beq.n	80026ea <HAL_GPIO_Init+0x1da>
 800262a:	4b43      	ldr	r3, [pc, #268]	; (8002738 <HAL_GPIO_Init+0x228>)
 800262c:	4298      	cmp	r0, r3
 800262e:	d062      	beq.n	80026f6 <HAL_GPIO_Init+0x1e6>
 8002630:	4b42      	ldr	r3, [pc, #264]	; (800273c <HAL_GPIO_Init+0x22c>)
 8002632:	4298      	cmp	r0, r3
 8002634:	d052      	beq.n	80026dc <HAL_GPIO_Init+0x1cc>
 8002636:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8002748 <HAL_GPIO_Init+0x238>
 800263a:	4540      	cmp	r0, r8
 800263c:	d061      	beq.n	8002702 <HAL_GPIO_Init+0x1f2>
 800263e:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800274c <HAL_GPIO_Init+0x23c>
 8002642:	4540      	cmp	r0, r8
 8002644:	d063      	beq.n	800270e <HAL_GPIO_Init+0x1fe>
 8002646:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8002750 <HAL_GPIO_Init+0x240>
 800264a:	4540      	cmp	r0, r8
 800264c:	d065      	beq.n	800271a <HAL_GPIO_Init+0x20a>
 800264e:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8002754 <HAL_GPIO_Init+0x244>
 8002652:	4540      	cmp	r0, r8
 8002654:	bf0c      	ite	eq
 8002656:	f04f 0809 	moveq.w	r8, #9
 800265a:	f04f 080a 	movne.w	r8, #10
 800265e:	fa08 f309 	lsl.w	r3, r8, r9
 8002662:	431a      	orrs	r2, r3
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002664:	60a2      	str	r2, [r4, #8]
        temp &= ~(iocurrent);
 8002666:	43f2      	mvns	r2, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002668:	684c      	ldr	r4, [r1, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800266a:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp = EXTI_CurrentCPU->IMR1;
 800266e:	683b      	ldr	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002670:	03e4      	lsls	r4, r4, #15
          temp |= iocurrent;
 8002672:	bf4c      	ite	mi
 8002674:	4333      	orrmi	r3, r6
        temp &= ~(iocurrent);
 8002676:	4013      	andpl	r3, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8002678:	603b      	str	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800267a:	684c      	ldr	r4, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800267c:	687b      	ldr	r3, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800267e:	03a4      	lsls	r4, r4, #14
          temp |= iocurrent;
 8002680:	bf4c      	ite	mi
 8002682:	4333      	orrmi	r3, r6
        temp &= ~(iocurrent);
 8002684:	4013      	andpl	r3, r2
        EXTI_CurrentCPU->EMR1 = temp;
 8002686:	607b      	str	r3, [r7, #4]
        temp = EXTI->RTSR1;
 8002688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800268c:	684c      	ldr	r4, [r1, #4]
        temp = EXTI->RTSR1;
 800268e:	681b      	ldr	r3, [r3, #0]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002690:	02e4      	lsls	r4, r4, #11
          temp |= iocurrent;
 8002692:	bf4c      	ite	mi
 8002694:	4333      	orrmi	r3, r6
        temp &= ~(iocurrent);
 8002696:	4013      	andpl	r3, r2
        EXTI->RTSR1 = temp;
 8002698:	f8c8 3000 	str.w	r3, [r8]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800269c:	684c      	ldr	r4, [r1, #4]
        temp = EXTI->FTSR1;
 800269e:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026a2:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 80026a4:	bf54      	ite	pl
 80026a6:	ea02 0603 	andpl.w	r6, r2, r3
        {
          temp |= iocurrent;
 80026aa:	431e      	orrmi	r6, r3
        }
        EXTI->FTSR1 = temp;
 80026ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b0:	605e      	str	r6, [r3, #4]
 80026b2:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
 80026b4:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026b6:	fa33 f205 	lsrs.w	r2, r3, r5
 80026ba:	f47f af36 	bne.w	800252a <HAL_GPIO_Init+0x1a>
  }
}
 80026be:	b003      	add	sp, #12
 80026c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026c4:	f04f 0802 	mov.w	r8, #2
 80026c8:	fa08 f309 	lsl.w	r3, r8, r9
 80026cc:	431a      	orrs	r2, r3
 80026ce:	e7c9      	b.n	8002664 <HAL_GPIO_Init+0x154>
 80026d0:	f04f 0801 	mov.w	r8, #1
 80026d4:	fa08 f309 	lsl.w	r3, r8, r9
 80026d8:	431a      	orrs	r2, r3
 80026da:	e7c3      	b.n	8002664 <HAL_GPIO_Init+0x154>
 80026dc:	f04f 0805 	mov.w	r8, #5
 80026e0:	fa08 f309 	lsl.w	r3, r8, r9
 80026e4:	431a      	orrs	r2, r3
 80026e6:	e7bd      	b.n	8002664 <HAL_GPIO_Init+0x154>
 80026e8:	4770      	bx	lr
 80026ea:	f04f 0803 	mov.w	r8, #3
 80026ee:	fa08 f309 	lsl.w	r3, r8, r9
 80026f2:	431a      	orrs	r2, r3
 80026f4:	e7b6      	b.n	8002664 <HAL_GPIO_Init+0x154>
 80026f6:	f04f 0804 	mov.w	r8, #4
 80026fa:	fa08 f309 	lsl.w	r3, r8, r9
 80026fe:	431a      	orrs	r2, r3
 8002700:	e7b0      	b.n	8002664 <HAL_GPIO_Init+0x154>
 8002702:	f04f 0806 	mov.w	r8, #6
 8002706:	fa08 f309 	lsl.w	r3, r8, r9
 800270a:	431a      	orrs	r2, r3
 800270c:	e7aa      	b.n	8002664 <HAL_GPIO_Init+0x154>
 800270e:	f04f 0807 	mov.w	r8, #7
 8002712:	fa08 f309 	lsl.w	r3, r8, r9
 8002716:	431a      	orrs	r2, r3
 8002718:	e7a4      	b.n	8002664 <HAL_GPIO_Init+0x154>
 800271a:	f04f 0808 	mov.w	r8, #8
 800271e:	fa08 f309 	lsl.w	r3, r8, r9
 8002722:	431a      	orrs	r2, r3
 8002724:	e79e      	b.n	8002664 <HAL_GPIO_Init+0x154>
 8002726:	bf00      	nop
 8002728:	58000080 	.word	0x58000080
 800272c:	58020000 	.word	0x58020000
 8002730:	58020800 	.word	0x58020800
 8002734:	58020c00 	.word	0x58020c00
 8002738:	58021000 	.word	0x58021000
 800273c:	58021400 	.word	0x58021400
 8002740:	58024400 	.word	0x58024400
 8002744:	58000400 	.word	0x58000400
 8002748:	58021800 	.word	0x58021800
 800274c:	58021c00 	.word	0x58021c00
 8002750:	58022000 	.word	0x58022000
 8002754:	58022400 	.word	0x58022400

08002758 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002758:	6903      	ldr	r3, [r0, #16]
 800275a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800275c:	bf14      	ite	ne
 800275e:	2001      	movne	r0, #1
 8002760:	2000      	moveq	r0, #0
 8002762:	4770      	bx	lr

08002764 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002764:	b902      	cbnz	r2, 8002768 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002766:	0409      	lsls	r1, r1, #16
 8002768:	6181      	str	r1, [r0, #24]
  }
}
 800276a:	4770      	bx	lr

0800276c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800276c:	b570      	push	{r4, r5, r6, lr}
 800276e:	4604      	mov	r4, r0
 8002770:	460d      	mov	r5, r1
 8002772:	4616      	mov	r6, r2
 8002774:	1c6b      	adds	r3, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002776:	6822      	ldr	r2, [r4, #0]
 8002778:	d12e      	bne.n	80027d8 <I2C_WaitOnTXISFlagUntilTimeout+0x6c>
 800277a:	6993      	ldr	r3, [r2, #24]
 800277c:	0798      	lsls	r0, r3, #30
 800277e:	d42e      	bmi.n	80027de <I2C_WaitOnTXISFlagUntilTimeout+0x72>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002780:	6993      	ldr	r3, [r2, #24]
 8002782:	06d9      	lsls	r1, r3, #27
 8002784:	d5f9      	bpl.n	800277a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002786:	6993      	ldr	r3, [r2, #24]
 8002788:	069d      	lsls	r5, r3, #26
 800278a:	d5fc      	bpl.n	8002786 <I2C_WaitOnTXISFlagUntilTimeout+0x1a>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800278c:	2310      	movs	r3, #16

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800278e:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002790:	61d3      	str	r3, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002792:	6823      	ldr	r3, [r4, #0]
 8002794:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002796:	6823      	ldr	r3, [r4, #0]
 8002798:	699a      	ldr	r2, [r3, #24]
 800279a:	0791      	lsls	r1, r2, #30
 800279c:	d502      	bpl.n	80027a4 <I2C_WaitOnTXISFlagUntilTimeout+0x38>
    hi2c->Instance->TXDR = 0x00U;
 800279e:	2200      	movs	r2, #0
 80027a0:	629a      	str	r2, [r3, #40]	; 0x28
 80027a2:	6823      	ldr	r3, [r4, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027a4:	699a      	ldr	r2, [r3, #24]
 80027a6:	07d2      	lsls	r2, r2, #31
 80027a8:	d404      	bmi.n	80027b4 <I2C_WaitOnTXISFlagUntilTimeout+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027aa:	699a      	ldr	r2, [r3, #24]
 80027ac:	f042 0201 	orr.w	r2, r2, #1
 80027b0:	619a      	str	r2, [r3, #24]
 80027b2:	6823      	ldr	r3, [r4, #0]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027b4:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b6:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 80027b8:	4e1b      	ldr	r6, [pc, #108]	; (8002828 <I2C_WaitOnTXISFlagUntilTimeout+0xbc>)
    hi2c->State = HAL_I2C_STATE_READY;
 80027ba:	2520      	movs	r5, #32
      return HAL_ERROR;
 80027bc:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80027be:	4032      	ands	r2, r6
 80027c0:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027c2:	6c63      	ldr	r3, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c4:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027c8:	f043 0304 	orr.w	r3, r3, #4
 80027cc:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80027ce:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d2:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 80027d6:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027d8:	6993      	ldr	r3, [r2, #24]
 80027da:	079b      	lsls	r3, r3, #30
 80027dc:	d501      	bpl.n	80027e2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  return HAL_OK;
 80027de:	2000      	movs	r0, #0
}
 80027e0:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027e2:	6993      	ldr	r3, [r2, #24]
 80027e4:	06db      	lsls	r3, r3, #27
 80027e6:	d407      	bmi.n	80027f8 <I2C_WaitOnTXISFlagUntilTimeout+0x8c>
 80027e8:	e00a      	b.n	8002800 <I2C_WaitOnTXISFlagUntilTimeout+0x94>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ea:	f7fd fdd9 	bl	80003a0 <HAL_GetTick>
 80027ee:	1b80      	subs	r0, r0, r6
 80027f0:	4285      	cmp	r5, r0
 80027f2:	d30c      	bcc.n	800280e <I2C_WaitOnTXISFlagUntilTimeout+0xa2>
 80027f4:	b15d      	cbz	r5, 800280e <I2C_WaitOnTXISFlagUntilTimeout+0xa2>
 80027f6:	6822      	ldr	r2, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027f8:	6993      	ldr	r3, [r2, #24]
 80027fa:	0698      	lsls	r0, r3, #26
 80027fc:	d5f5      	bpl.n	80027ea <I2C_WaitOnTXISFlagUntilTimeout+0x7e>
 80027fe:	e7c5      	b.n	800278c <I2C_WaitOnTXISFlagUntilTimeout+0x20>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002800:	f7fd fdce 	bl	80003a0 <HAL_GetTick>
 8002804:	1b80      	subs	r0, r0, r6
 8002806:	42a8      	cmp	r0, r5
 8002808:	d801      	bhi.n	800280e <I2C_WaitOnTXISFlagUntilTimeout+0xa2>
 800280a:	2d00      	cmp	r5, #0
 800280c:	d1b2      	bne.n	8002774 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800280e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002810:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002812:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8002814:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002816:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8002818:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800281c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800281e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002822:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8002826:	bd70      	pop	{r4, r5, r6, pc}
 8002828:	fe00e800 	.word	0xfe00e800

0800282c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800282c:	b570      	push	{r4, r5, r6, lr}
 800282e:	4604      	mov	r4, r0
 8002830:	460d      	mov	r5, r1
 8002832:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002834:	6822      	ldr	r2, [r4, #0]
 8002836:	6993      	ldr	r3, [r2, #24]
 8002838:	069b      	lsls	r3, r3, #26
 800283a:	d44d      	bmi.n	80028d8 <I2C_WaitOnSTOPFlagUntilTimeout+0xac>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800283c:	6993      	ldr	r3, [r2, #24]
 800283e:	06d9      	lsls	r1, r3, #27
 8002840:	d52a      	bpl.n	8002898 <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
 8002842:	1c6b      	adds	r3, r5, #1
 8002844:	d13c      	bne.n	80028c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x94>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002846:	6993      	ldr	r3, [r2, #24]
 8002848:	069d      	lsls	r5, r3, #26
 800284a:	d5fc      	bpl.n	8002846 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800284c:	2310      	movs	r3, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800284e:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002850:	61d3      	str	r3, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002856:	6823      	ldr	r3, [r4, #0]
 8002858:	699a      	ldr	r2, [r3, #24]
 800285a:	0791      	lsls	r1, r2, #30
 800285c:	d502      	bpl.n	8002864 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
    hi2c->Instance->TXDR = 0x00U;
 800285e:	2200      	movs	r2, #0
 8002860:	629a      	str	r2, [r3, #40]	; 0x28
 8002862:	6823      	ldr	r3, [r4, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002864:	699a      	ldr	r2, [r3, #24]
 8002866:	07d2      	lsls	r2, r2, #31
 8002868:	d404      	bmi.n	8002874 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800286a:	699a      	ldr	r2, [r3, #24]
 800286c:	f042 0201 	orr.w	r2, r2, #1
 8002870:	619a      	str	r2, [r3, #24]
 8002872:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002874:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002876:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8002878:	4e18      	ldr	r6, [pc, #96]	; (80028dc <I2C_WaitOnSTOPFlagUntilTimeout+0xb0>)
    hi2c->State = HAL_I2C_STATE_READY;
 800287a:	2520      	movs	r5, #32
      return HAL_ERROR;
 800287c:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800287e:	4032      	ands	r2, r6
 8002880:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002882:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8002884:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002888:	f043 0304 	orr.w	r3, r3, #4
 800288c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800288e:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002892:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8002896:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002898:	f7fd fd82 	bl	80003a0 <HAL_GetTick>
 800289c:	1b80      	subs	r0, r0, r6
 800289e:	42a8      	cmp	r0, r5
 80028a0:	d801      	bhi.n	80028a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
 80028a2:	2d00      	cmp	r5, #0
 80028a4:	d1c6      	bne.n	8002834 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028a8:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028aa:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 80028ac:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ae:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 80028b0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028b4:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028b6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ba:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 80028be:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028c0:	6993      	ldr	r3, [r2, #24]
 80028c2:	0698      	lsls	r0, r3, #26
 80028c4:	d4c2      	bmi.n	800284c <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028c6:	f7fd fd6b 	bl	80003a0 <HAL_GetTick>
 80028ca:	1b80      	subs	r0, r0, r6
 80028cc:	4285      	cmp	r5, r0
 80028ce:	d3ea      	bcc.n	80028a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
 80028d0:	2d00      	cmp	r5, #0
 80028d2:	d0e8      	beq.n	80028a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
 80028d4:	6822      	ldr	r2, [r4, #0]
 80028d6:	e7b4      	b.n	8002842 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80028d8:	2000      	movs	r0, #0
}
 80028da:	bd70      	pop	{r4, r5, r6, pc}
 80028dc:	fe00e800 	.word	0xfe00e800

080028e0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80028e0:	2800      	cmp	r0, #0
 80028e2:	d056      	beq.n	8002992 <HAL_I2C_Init+0xb2>
{
 80028e4:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028e6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80028ea:	4604      	mov	r4, r0
 80028ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d049      	beq.n	8002988 <HAL_I2C_Init+0xa8>
  __HAL_I2C_DISABLE(hi2c);
 80028f4:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80028f6:	2324      	movs	r3, #36	; 0x24
 80028f8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80028fc:	6813      	ldr	r3, [r2, #0]
 80028fe:	f023 0301 	bic.w	r3, r3, #1
 8002902:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002904:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002908:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800290c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800290e:	6822      	ldr	r2, [r4, #0]
 8002910:	6893      	ldr	r3, [r2, #8]
 8002912:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002916:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002918:	68e3      	ldr	r3, [r4, #12]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800291a:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800291c:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800291e:	68a3      	ldr	r3, [r4, #8]
 8002920:	bf0c      	ite	eq
 8002922:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002926:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 800292a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800292c:	68e3      	ldr	r3, [r4, #12]
 800292e:	6825      	ldr	r5, [r4, #0]
 8002930:	2b02      	cmp	r3, #2
 8002932:	d024      	beq.n	800297e <HAL_I2C_Init+0x9e>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002934:	6868      	ldr	r0, [r5, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002936:	2200      	movs	r2, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002938:	4b17      	ldr	r3, [pc, #92]	; (8002998 <HAL_I2C_Init+0xb8>)
  hi2c->State = HAL_I2C_STATE_READY;
 800293a:	2120      	movs	r1, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800293c:	4303      	orrs	r3, r0
  return HAL_OK;
 800293e:	4610      	mov	r0, r2
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002940:	606b      	str	r3, [r5, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002942:	6825      	ldr	r5, [r4, #0]
 8002944:	68eb      	ldr	r3, [r5, #12]
 8002946:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800294a:	60eb      	str	r3, [r5, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800294c:	e9d4 3504 	ldrd	r3, r5, [r4, #16]
 8002950:	432b      	orrs	r3, r5
 8002952:	69a5      	ldr	r5, [r4, #24]
 8002954:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002958:	6825      	ldr	r5, [r4, #0]
 800295a:	60eb      	str	r3, [r5, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800295c:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 8002960:	432b      	orrs	r3, r5
 8002962:	6825      	ldr	r5, [r4, #0]
 8002964:	602b      	str	r3, [r5, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002966:	6825      	ldr	r5, [r4, #0]
 8002968:	682b      	ldr	r3, [r5, #0]
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	602b      	str	r3, [r5, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002970:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002972:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002976:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002978:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800297c:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800297e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002982:	606b      	str	r3, [r5, #4]
 8002984:	6825      	ldr	r5, [r4, #0]
 8002986:	e7d5      	b.n	8002934 <HAL_I2C_Init+0x54>
    hi2c->Lock = HAL_UNLOCKED;
 8002988:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800298c:	f005 fadc 	bl	8007f48 <HAL_I2C_MspInit>
 8002990:	e7b0      	b.n	80028f4 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8002992:	2001      	movs	r0, #1
}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	02008000 	.word	0x02008000

0800299c <HAL_I2C_Master_Transmit>:
{
 800299c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a0:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 80029a4:	9e08      	ldr	r6, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a6:	2c20      	cmp	r4, #32
 80029a8:	d170      	bne.n	8002a8c <HAL_I2C_Master_Transmit+0xf0>
    __HAL_LOCK(hi2c);
 80029aa:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80029ae:	2c01      	cmp	r4, #1
 80029b0:	d06c      	beq.n	8002a8c <HAL_I2C_Master_Transmit+0xf0>
 80029b2:	4698      	mov	r8, r3
 80029b4:	2301      	movs	r3, #1
 80029b6:	4691      	mov	r9, r2
 80029b8:	460f      	mov	r7, r1
 80029ba:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80029be:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 80029c0:	f7fd fcee 	bl	80003a0 <HAL_GetTick>
 80029c4:	4605      	mov	r5, r0
 80029c6:	e004      	b.n	80029d2 <HAL_I2C_Master_Transmit+0x36>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c8:	f7fd fcea 	bl	80003a0 <HAL_GetTick>
 80029cc:	1b40      	subs	r0, r0, r5
 80029ce:	2819      	cmp	r0, #25
 80029d0:	d873      	bhi.n	8002aba <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029d2:	6823      	ldr	r3, [r4, #0]
 80029d4:	6998      	ldr	r0, [r3, #24]
 80029d6:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 80029da:	d1f5      	bne.n	80029c8 <HAL_I2C_Master_Transmit+0x2c>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029dc:	2210      	movs	r2, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029de:	2121      	movs	r1, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 80029e0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 80029e4:	f3c7 0709 	ubfx	r7, r7, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029e8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029ec:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f0:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80029f2:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029f6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029f8:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029fa:	2aff      	cmp	r2, #255	; 0xff
 80029fc:	d849      	bhi.n	8002a92 <HAL_I2C_Master_Transmit+0xf6>
      hi2c->XferSize = hi2c->XferCount;
 80029fe:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002a00:	4a47      	ldr	r2, [pc, #284]	; (8002b20 <HAL_I2C_Master_Transmit+0x184>)
      hi2c->XferSize = hi2c->XferCount;
 8002a02:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002a04:	f8df c11c 	ldr.w	ip, [pc, #284]	; 8002b24 <HAL_I2C_Master_Transmit+0x188>
 8002a08:	433a      	orrs	r2, r7
      hi2c->XferSize = hi2c->XferCount;
 8002a0a:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002a0c:	b2c9      	uxtb	r1, r1
 8002a0e:	6858      	ldr	r0, [r3, #4]
 8002a10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002a14:	ea00 010c 	and.w	r1, r0, ip
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	605a      	str	r2, [r3, #4]
 8002a1c:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8002b30 <HAL_I2C_Master_Transmit+0x194>
 8002a20:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8002b34 <HAL_I2C_Master_Transmit+0x198>
 8002a24:	ea47 0808 	orr.w	r8, r7, r8
    while (hi2c->XferCount > 0U)
 8002a28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a2a:	462a      	mov	r2, r5
 8002a2c:	4631      	mov	r1, r6
 8002a2e:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d060      	beq.n	8002af8 <HAL_I2C_Master_Transmit+0x15c>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a36:	f7ff fe99 	bl	800276c <I2C_WaitOnTXISFlagUntilTimeout>
 8002a3a:	2800      	cmp	r0, #0
 8002a3c:	d159      	bne.n	8002af2 <HAL_I2C_Master_Transmit+0x156>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a40:	6823      	ldr	r3, [r4, #0]
 8002a42:	7812      	ldrb	r2, [r2, #0]
 8002a44:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a46:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002a48:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002a4a:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 8002a4c:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002a4e:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 8002a50:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 8002a52:	3201      	adds	r2, #1
      hi2c->XferSize--;
 8002a54:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8002a56:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a58:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002a5a:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a5c:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 8002a5e:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a60:	2900      	cmp	r1, #0
 8002a62:	d0e1      	beq.n	8002a28 <HAL_I2C_Master_Transmit+0x8c>
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1df      	bne.n	8002a28 <HAL_I2C_Master_Transmit+0x8c>
 8002a68:	1c70      	adds	r0, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a6a:	6822      	ldr	r2, [r4, #0]
 8002a6c:	d11b      	bne.n	8002aa6 <HAL_I2C_Master_Transmit+0x10a>
 8002a6e:	6993      	ldr	r3, [r2, #24]
 8002a70:	0619      	lsls	r1, r3, #24
 8002a72:	d5fc      	bpl.n	8002a6e <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a76:	2bff      	cmp	r3, #255	; 0xff
 8002a78:	d92d      	bls.n	8002ad6 <HAL_I2C_Master_Transmit+0x13a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a7a:	23ff      	movs	r3, #255	; 0xff
 8002a7c:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002a7e:	6853      	ldr	r3, [r2, #4]
 8002a80:	ea03 0309 	and.w	r3, r3, r9
 8002a84:	ea43 0308 	orr.w	r3, r3, r8
 8002a88:	6053      	str	r3, [r2, #4]
 8002a8a:	e7cd      	b.n	8002a28 <HAL_I2C_Master_Transmit+0x8c>
    return HAL_BUSY;
 8002a8c:	2002      	movs	r0, #2
}
 8002a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a92:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002a94:	4823      	ldr	r0, [pc, #140]	; (8002b24 <HAL_I2C_Master_Transmit+0x188>)
 8002a96:	4924      	ldr	r1, [pc, #144]	; (8002b28 <HAL_I2C_Master_Transmit+0x18c>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a98:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	4339      	orrs	r1, r7
 8002a9e:	4002      	ands	r2, r0
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	e7ba      	b.n	8002a1c <HAL_I2C_Master_Transmit+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aa6:	6993      	ldr	r3, [r2, #24]
 8002aa8:	061b      	lsls	r3, r3, #24
 8002aaa:	d4e3      	bmi.n	8002a74 <HAL_I2C_Master_Transmit+0xd8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aac:	f7fd fc78 	bl	80003a0 <HAL_GetTick>
 8002ab0:	1b40      	subs	r0, r0, r5
 8002ab2:	4286      	cmp	r6, r0
 8002ab4:	d301      	bcc.n	8002aba <HAL_I2C_Master_Transmit+0x11e>
 8002ab6:	2e00      	cmp	r6, #0
 8002ab8:	d1d6      	bne.n	8002a68 <HAL_I2C_Master_Transmit+0xcc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aba:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002abc:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002abe:	2200      	movs	r2, #0
          return HAL_ERROR;
 8002ac0:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ac2:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8002ac4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ac8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002aca:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ace:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8002ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          hi2c->XferSize = hi2c->XferCount;
 8002ad6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002ad8:	f047 7300 	orr.w	r3, r7, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8002adc:	b289      	uxth	r1, r1
 8002ade:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002ae0:	b2c9      	uxtb	r1, r1
 8002ae2:	6850      	ldr	r0, [r2, #4]
 8002ae4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002ae8:	ea00 0109 	and.w	r1, r0, r9
 8002aec:	430b      	orrs	r3, r1
 8002aee:	6053      	str	r3, [r2, #4]
 8002af0:	e79a      	b.n	8002a28 <HAL_I2C_Master_Transmit+0x8c>
        return HAL_ERROR;
 8002af2:	2001      	movs	r0, #1
}
 8002af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af8:	f7ff fe98 	bl	800282c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002afc:	2800      	cmp	r0, #0
 8002afe:	d1f8      	bne.n	8002af2 <HAL_I2C_Master_Transmit+0x156>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b00:	6823      	ldr	r3, [r4, #0]
 8002b02:	2220      	movs	r2, #32
    I2C_RESET_CR2(hi2c);
 8002b04:	4d09      	ldr	r5, [pc, #36]	; (8002b2c <HAL_I2C_Master_Transmit+0x190>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b06:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002b08:	6821      	ldr	r1, [r4, #0]
 8002b0a:	684b      	ldr	r3, [r1, #4]
 8002b0c:	402b      	ands	r3, r5
 8002b0e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002b10:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002b14:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b18:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002b1c:	e7b7      	b.n	8002a8e <HAL_I2C_Master_Transmit+0xf2>
 8002b1e:	bf00      	nop
 8002b20:	82002000 	.word	0x82002000
 8002b24:	fc009800 	.word	0xfc009800
 8002b28:	81ff2000 	.word	0x81ff2000
 8002b2c:	fe00e800 	.word	0xfe00e800
 8002b30:	01ff0000 	.word	0x01ff0000
 8002b34:	fc009c00 	.word	0xfc009c00

08002b38 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b38:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	2a20      	cmp	r2, #32
 8002b40:	d126      	bne.n	8002b90 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002b42:	4603      	mov	r3, r0
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b44:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8002b48:	2801      	cmp	r0, #1
 8002b4a:	d021      	beq.n	8002b90 <HAL_I2CEx_ConfigAnalogFilter+0x58>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b4c:	2024      	movs	r0, #36	; 0x24
{
 8002b4e:	b470      	push	{r4, r5, r6}
    __HAL_LOCK(hi2c);
 8002b50:	2401      	movs	r4, #1

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b52:	681e      	ldr	r6, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b54:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b58:	2500      	movs	r5, #0
    __HAL_LOCK(hi2c);
 8002b5a:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 8002b5e:	6834      	ldr	r4, [r6, #0]

    return HAL_OK;
 8002b60:	4628      	mov	r0, r5
    __HAL_I2C_DISABLE(hi2c);
 8002b62:	f024 0401 	bic.w	r4, r4, #1
 8002b66:	6034      	str	r4, [r6, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b68:	681e      	ldr	r6, [r3, #0]
 8002b6a:	6834      	ldr	r4, [r6, #0]
 8002b6c:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8002b70:	6034      	str	r4, [r6, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b72:	681e      	ldr	r6, [r3, #0]
 8002b74:	6834      	ldr	r4, [r6, #0]
 8002b76:	4321      	orrs	r1, r4
 8002b78:	6031      	str	r1, [r6, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002b7a:	681c      	ldr	r4, [r3, #0]
 8002b7c:	6821      	ldr	r1, [r4, #0]
 8002b7e:	f041 0101 	orr.w	r1, r1, #1
 8002b82:	6021      	str	r1, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002b88:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002b8c:	bc70      	pop	{r4, r5, r6}
 8002b8e:	4770      	bx	lr
    return HAL_BUSY;
 8002b90:	2002      	movs	r0, #2
}
 8002b92:	4770      	bx	lr

08002b94 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b94:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	2a20      	cmp	r2, #32
 8002b9c:	d124      	bne.n	8002be8 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8002b9e:	4603      	mov	r3, r0
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba0:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8002ba4:	2801      	cmp	r0, #1
 8002ba6:	d01f      	beq.n	8002be8 <HAL_I2CEx_ConfigDigitalFilter+0x54>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ba8:	2024      	movs	r0, #36	; 0x24
{
 8002baa:	b470      	push	{r4, r5, r6}
    __HAL_LOCK(hi2c);
 8002bac:	2401      	movs	r4, #1

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bae:	681e      	ldr	r6, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bb0:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb4:	2500      	movs	r5, #0
    __HAL_LOCK(hi2c);
 8002bb6:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 8002bba:	6834      	ldr	r4, [r6, #0]

    return HAL_OK;
 8002bbc:	4628      	mov	r0, r5
    __HAL_I2C_DISABLE(hi2c);
 8002bbe:	f024 0401 	bic.w	r4, r4, #1
 8002bc2:	6034      	str	r4, [r6, #0]
    tmpreg = hi2c->Instance->CR1;
 8002bc4:	681e      	ldr	r6, [r3, #0]
 8002bc6:	6834      	ldr	r4, [r6, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002bc8:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8002bcc:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8002bd0:	6031      	str	r1, [r6, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002bd2:	681c      	ldr	r4, [r3, #0]
 8002bd4:	6821      	ldr	r1, [r4, #0]
 8002bd6:	f041 0101 	orr.w	r1, r1, #1
 8002bda:	6021      	str	r1, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002be0:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002be4:	bc70      	pop	{r4, r5, r6}
 8002be6:	4770      	bx	lr
    return HAL_BUSY;
 8002be8:	2002      	movs	r0, #2
}
 8002bea:	4770      	bx	lr

08002bec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002bec:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002bee:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <HAL_PWREx_ConfigSupply+0x48>)
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	0752      	lsls	r2, r2, #29
 8002bf4:	d406      	bmi.n	8002c04 <HAL_PWREx_ConfigSupply+0x18>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002bfc:	1a18      	subs	r0, r3, r0
 8002bfe:	bf18      	it	ne
 8002c00:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8002c02:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002c04:	68da      	ldr	r2, [r3, #12]
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c06:	461c      	mov	r4, r3
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002c08:	f022 0207 	bic.w	r2, r2, #7
 8002c0c:	4310      	orrs	r0, r2
 8002c0e:	60d8      	str	r0, [r3, #12]
  tickstart = HAL_GetTick ();
 8002c10:	f7fd fbc6 	bl	80003a0 <HAL_GetTick>
 8002c14:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c16:	e005      	b.n	8002c24 <HAL_PWREx_ConfigSupply+0x38>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c18:	f7fd fbc2 	bl	80003a0 <HAL_GetTick>
 8002c1c:	1b40      	subs	r0, r0, r5
 8002c1e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002c22:	d804      	bhi.n	8002c2e <HAL_PWREx_ConfigSupply+0x42>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c24:	6863      	ldr	r3, [r4, #4]
 8002c26:	049b      	lsls	r3, r3, #18
 8002c28:	d5f6      	bpl.n	8002c18 <HAL_PWREx_ConfigSupply+0x2c>
  return HAL_OK;
 8002c2a:	2000      	movs	r0, #0
}
 8002c2c:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8002c2e:	2001      	movs	r0, #1
}
 8002c30:	bd38      	pop	{r3, r4, r5, pc}
 8002c32:	bf00      	nop
 8002c34:	58024800 	.word	0x58024800

08002c38 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c38:	2800      	cmp	r0, #0
 8002c3a:	f000 8188 	beq.w	8002f4e <HAL_RCC_OscConfig+0x316>
{
 8002c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c40:	6803      	ldr	r3, [r0, #0]
 8002c42:	4604      	mov	r4, r0
 8002c44:	07d9      	lsls	r1, r3, #31
 8002c46:	d52e      	bpl.n	8002ca6 <HAL_RCC_OscConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c48:	49b2      	ldr	r1, [pc, #712]	; (8002f14 <HAL_RCC_OscConfig+0x2dc>)
 8002c4a:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c4c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c4e:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002c52:	2a10      	cmp	r2, #16
 8002c54:	f000 8102 	beq.w	8002e5c <HAL_RCC_OscConfig+0x224>
 8002c58:	2a18      	cmp	r2, #24
 8002c5a:	f000 80fa 	beq.w	8002e52 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c5e:	6863      	ldr	r3, [r4, #4]
 8002c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c64:	f000 8122 	beq.w	8002eac <HAL_RCC_OscConfig+0x274>
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f040 8198 	bne.w	8002f9e <HAL_RCC_OscConfig+0x366>
 8002c6e:	4ba9      	ldr	r3, [pc, #676]	; (8002f14 <HAL_RCC_OscConfig+0x2dc>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c7e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c80:	6863      	ldr	r3, [r4, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 8155 	beq.w	8002f32 <HAL_RCC_OscConfig+0x2fa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fd fb8a 	bl	80003a0 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c8c:	4da1      	ldr	r5, [pc, #644]	; (8002f14 <HAL_RCC_OscConfig+0x2dc>)
        tickstart = HAL_GetTick();
 8002c8e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c90:	e005      	b.n	8002c9e <HAL_RCC_OscConfig+0x66>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c92:	f7fd fb85 	bl	80003a0 <HAL_GetTick>
 8002c96:	1b80      	subs	r0, r0, r6
 8002c98:	2864      	cmp	r0, #100	; 0x64
 8002c9a:	f200 8148 	bhi.w	8002f2e <HAL_RCC_OscConfig+0x2f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c9e:	682b      	ldr	r3, [r5, #0]
 8002ca0:	039f      	lsls	r7, r3, #14
 8002ca2:	d5f6      	bpl.n	8002c92 <HAL_RCC_OscConfig+0x5a>
 8002ca4:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca6:	0799      	lsls	r1, r3, #30
 8002ca8:	f100 808a 	bmi.w	8002dc0 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002cac:	06d9      	lsls	r1, r3, #27
 8002cae:	d530      	bpl.n	8002d12 <HAL_RCC_OscConfig+0xda>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb0:	4a98      	ldr	r2, [pc, #608]	; (8002f14 <HAL_RCC_OscConfig+0x2dc>)
 8002cb2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cb4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	f000 80de 	beq.w	8002e7c <HAL_RCC_OscConfig+0x244>
 8002cc0:	2b18      	cmp	r3, #24
 8002cc2:	f000 80d6 	beq.w	8002e72 <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002cc6:	69e3      	ldr	r3, [r4, #28]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 8176 	beq.w	8002fba <HAL_RCC_OscConfig+0x382>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002cce:	4b91      	ldr	r3, [pc, #580]	; (8002f14 <HAL_RCC_OscConfig+0x2dc>)
 8002cd0:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cd2:	461d      	mov	r5, r3
        __HAL_RCC_CSI_ENABLE();
 8002cd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cd8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002cda:	f7fd fb61 	bl	80003a0 <HAL_GetTick>
 8002cde:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ce0:	e005      	b.n	8002cee <HAL_RCC_OscConfig+0xb6>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002ce2:	f7fd fb5d 	bl	80003a0 <HAL_GetTick>
 8002ce6:	1b80      	subs	r0, r0, r6
 8002ce8:	2802      	cmp	r0, #2
 8002cea:	f200 8120 	bhi.w	8002f2e <HAL_RCC_OscConfig+0x2f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cee:	682b      	ldr	r3, [r5, #0]
 8002cf0:	05db      	lsls	r3, r3, #23
 8002cf2:	d5f6      	bpl.n	8002ce2 <HAL_RCC_OscConfig+0xaa>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cf4:	f7fd fb6c 	bl	80003d0 <HAL_GetREVID>
 8002cf8:	f241 0303 	movw	r3, #4099	; 0x1003
 8002cfc:	4298      	cmp	r0, r3
 8002cfe:	f200 823c 	bhi.w	800317a <HAL_RCC_OscConfig+0x542>
 8002d02:	686b      	ldr	r3, [r5, #4]
 8002d04:	6a22      	ldr	r2, [r4, #32]
 8002d06:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002d0a:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8002d0e:	606b      	str	r3, [r5, #4]
 8002d10:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d12:	071d      	lsls	r5, r3, #28
 8002d14:	d517      	bpl.n	8002d46 <HAL_RCC_OscConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d16:	6963      	ldr	r3, [r4, #20]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 811a 	beq.w	8002f52 <HAL_RCC_OscConfig+0x31a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d1e:	4b7d      	ldr	r3, [pc, #500]	; (8002f14 <HAL_RCC_OscConfig+0x2dc>)
 8002d20:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d22:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8002d24:	f042 0201 	orr.w	r2, r2, #1
 8002d28:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002d2a:	f7fd fb39 	bl	80003a0 <HAL_GetTick>
 8002d2e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d30:	e005      	b.n	8002d3e <HAL_RCC_OscConfig+0x106>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d32:	f7fd fb35 	bl	80003a0 <HAL_GetTick>
 8002d36:	1b80      	subs	r0, r0, r6
 8002d38:	2802      	cmp	r0, #2
 8002d3a:	f200 80f8 	bhi.w	8002f2e <HAL_RCC_OscConfig+0x2f6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d3e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002d40:	0798      	lsls	r0, r3, #30
 8002d42:	d5f6      	bpl.n	8002d32 <HAL_RCC_OscConfig+0xfa>
 8002d44:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d46:	069a      	lsls	r2, r3, #26
 8002d48:	d517      	bpl.n	8002d7a <HAL_RCC_OscConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002d4a:	69a3      	ldr	r3, [r4, #24]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 8113 	beq.w	8002f78 <HAL_RCC_OscConfig+0x340>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d52:	4b70      	ldr	r3, [pc, #448]	; (8002f14 <HAL_RCC_OscConfig+0x2dc>)
 8002d54:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d56:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_ENABLE();
 8002d58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d5c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002d5e:	f7fd fb1f 	bl	80003a0 <HAL_GetTick>
 8002d62:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d64:	e005      	b.n	8002d72 <HAL_RCC_OscConfig+0x13a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d66:	f7fd fb1b 	bl	80003a0 <HAL_GetTick>
 8002d6a:	1b80      	subs	r0, r0, r6
 8002d6c:	2802      	cmp	r0, #2
 8002d6e:	f200 80de 	bhi.w	8002f2e <HAL_RCC_OscConfig+0x2f6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d72:	682b      	ldr	r3, [r5, #0]
 8002d74:	049f      	lsls	r7, r3, #18
 8002d76:	d5f6      	bpl.n	8002d66 <HAL_RCC_OscConfig+0x12e>
 8002d78:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d7a:	0759      	lsls	r1, r3, #29
 8002d7c:	f100 809c 	bmi.w	8002eb8 <HAL_RCC_OscConfig+0x280>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d80:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002d82:	b1d8      	cbz	r0, 8002dbc <HAL_RCC_OscConfig+0x184>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d84:	4b63      	ldr	r3, [pc, #396]	; (8002f14 <HAL_RCC_OscConfig+0x2dc>)
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8002d8c:	2a18      	cmp	r2, #24
 8002d8e:	f000 81b5 	beq.w	80030fc <HAL_RCC_OscConfig+0x4c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d92:	2802      	cmp	r0, #2
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d94:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d96:	f000 8147 	beq.w	8003028 <HAL_RCC_OscConfig+0x3f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d9a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d9e:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 8002da0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002da2:	f7fd fafd 	bl	80003a0 <HAL_GetTick>
 8002da6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002da8:	e005      	b.n	8002db6 <HAL_RCC_OscConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002daa:	f7fd faf9 	bl	80003a0 <HAL_GetTick>
 8002dae:	1b40      	subs	r0, r0, r5
 8002db0:	2802      	cmp	r0, #2
 8002db2:	f200 80bc 	bhi.w	8002f2e <HAL_RCC_OscConfig+0x2f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	019b      	lsls	r3, r3, #6
 8002dba:	d4f6      	bmi.n	8002daa <HAL_RCC_OscConfig+0x172>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002dbc:	2000      	movs	r0, #0
}
 8002dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dc0:	4a54      	ldr	r2, [pc, #336]	; (8002f14 <HAL_RCC_OscConfig+0x2dc>)
 8002dc2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002dc4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002dc6:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8002dca:	d02b      	beq.n	8002e24 <HAL_RCC_OscConfig+0x1ec>
 8002dcc:	2b18      	cmp	r3, #24
 8002dce:	d027      	beq.n	8002e20 <HAL_RCC_OscConfig+0x1e8>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dd0:	68e2      	ldr	r2, [r4, #12]
 8002dd2:	2a00      	cmp	r2, #0
 8002dd4:	f000 8105 	beq.w	8002fe2 <HAL_RCC_OscConfig+0x3aa>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002dd8:	494e      	ldr	r1, [pc, #312]	; (8002f14 <HAL_RCC_OscConfig+0x2dc>)
 8002dda:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ddc:	460d      	mov	r5, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002dde:	f023 0319 	bic.w	r3, r3, #25
 8002de2:	4313      	orrs	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8002de6:	f7fd fadb 	bl	80003a0 <HAL_GetTick>
 8002dea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dec:	e005      	b.n	8002dfa <HAL_RCC_OscConfig+0x1c2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dee:	f7fd fad7 	bl	80003a0 <HAL_GetTick>
 8002df2:	1b80      	subs	r0, r0, r6
 8002df4:	2802      	cmp	r0, #2
 8002df6:	f200 809a 	bhi.w	8002f2e <HAL_RCC_OscConfig+0x2f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dfa:	682b      	ldr	r3, [r5, #0]
 8002dfc:	075f      	lsls	r7, r3, #29
 8002dfe:	d5f6      	bpl.n	8002dee <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e00:	f7fd fae6 	bl	80003d0 <HAL_GetREVID>
 8002e04:	f241 0303 	movw	r3, #4099	; 0x1003
 8002e08:	6922      	ldr	r2, [r4, #16]
 8002e0a:	4298      	cmp	r0, r3
 8002e0c:	686b      	ldr	r3, [r5, #4]
 8002e0e:	f200 81bd 	bhi.w	800318c <HAL_RCC_OscConfig+0x554>
 8002e12:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002e16:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002e1a:	606b      	str	r3, [r5, #4]
 8002e1c:	6823      	ldr	r3, [r4, #0]
 8002e1e:	e745      	b.n	8002cac <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e20:	0792      	lsls	r2, r2, #30
 8002e22:	d1d5      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x198>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e24:	4b3b      	ldr	r3, [pc, #236]	; (8002f14 <HAL_RCC_OscConfig+0x2dc>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	075b      	lsls	r3, r3, #29
 8002e2a:	d501      	bpl.n	8002e30 <HAL_RCC_OscConfig+0x1f8>
 8002e2c:	68e3      	ldr	r3, [r4, #12]
 8002e2e:	b1f3      	cbz	r3, 8002e6e <HAL_RCC_OscConfig+0x236>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e30:	f7fd face 	bl	80003d0 <HAL_GetREVID>
 8002e34:	f241 0303 	movw	r3, #4099	; 0x1003
 8002e38:	4a36      	ldr	r2, [pc, #216]	; (8002f14 <HAL_RCC_OscConfig+0x2dc>)
 8002e3a:	4298      	cmp	r0, r3
 8002e3c:	6921      	ldr	r1, [r4, #16]
 8002e3e:	6853      	ldr	r3, [r2, #4]
 8002e40:	f200 80e3 	bhi.w	800300a <HAL_RCC_OscConfig+0x3d2>
 8002e44:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002e48:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8002e4c:	6053      	str	r3, [r2, #4]
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	e72c      	b.n	8002cac <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e52:	f001 0103 	and.w	r1, r1, #3
 8002e56:	2902      	cmp	r1, #2
 8002e58:	f47f af01 	bne.w	8002c5e <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e5c:	4a2d      	ldr	r2, [pc, #180]	; (8002f14 <HAL_RCC_OscConfig+0x2dc>)
 8002e5e:	6812      	ldr	r2, [r2, #0]
 8002e60:	0392      	lsls	r2, r2, #14
 8002e62:	f57f af20 	bpl.w	8002ca6 <HAL_RCC_OscConfig+0x6e>
 8002e66:	6862      	ldr	r2, [r4, #4]
 8002e68:	2a00      	cmp	r2, #0
 8002e6a:	f47f af1c 	bne.w	8002ca6 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8002e6e:	2001      	movs	r0, #1
}
 8002e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002e72:	f002 0203 	and.w	r2, r2, #3
 8002e76:	2a01      	cmp	r2, #1
 8002e78:	f47f af25 	bne.w	8002cc6 <HAL_RCC_OscConfig+0x8e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e7c:	4b25      	ldr	r3, [pc, #148]	; (8002f14 <HAL_RCC_OscConfig+0x2dc>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	05da      	lsls	r2, r3, #23
 8002e82:	d502      	bpl.n	8002e8a <HAL_RCC_OscConfig+0x252>
 8002e84:	69e3      	ldr	r3, [r4, #28]
 8002e86:	2b80      	cmp	r3, #128	; 0x80
 8002e88:	d1f1      	bne.n	8002e6e <HAL_RCC_OscConfig+0x236>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e8a:	f7fd faa1 	bl	80003d0 <HAL_GetREVID>
 8002e8e:	f241 0303 	movw	r3, #4099	; 0x1003
 8002e92:	4a20      	ldr	r2, [pc, #128]	; (8002f14 <HAL_RCC_OscConfig+0x2dc>)
 8002e94:	4298      	cmp	r0, r3
 8002e96:	6a21      	ldr	r1, [r4, #32]
 8002e98:	f200 80be 	bhi.w	8003018 <HAL_RCC_OscConfig+0x3e0>
 8002e9c:	6853      	ldr	r3, [r2, #4]
 8002e9e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002ea2:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8002ea6:	6053      	str	r3, [r2, #4]
 8002ea8:	6823      	ldr	r3, [r4, #0]
 8002eaa:	e732      	b.n	8002d12 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eac:	4a19      	ldr	r2, [pc, #100]	; (8002f14 <HAL_RCC_OscConfig+0x2dc>)
 8002eae:	6813      	ldr	r3, [r2, #0]
 8002eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	e6e3      	b.n	8002c80 <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
 8002eb8:	4b17      	ldr	r3, [pc, #92]	; (8002f18 <HAL_RCC_OscConfig+0x2e0>)
 8002eba:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ebc:	461d      	mov	r5, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8002ebe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ec2:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002ec4:	f7fd fa6c 	bl	80003a0 <HAL_GetTick>
 8002ec8:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002eca:	e004      	b.n	8002ed6 <HAL_RCC_OscConfig+0x29e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ecc:	f7fd fa68 	bl	80003a0 <HAL_GetTick>
 8002ed0:	1b80      	subs	r0, r0, r6
 8002ed2:	2864      	cmp	r0, #100	; 0x64
 8002ed4:	d82b      	bhi.n	8002f2e <HAL_RCC_OscConfig+0x2f6>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ed6:	682b      	ldr	r3, [r5, #0]
 8002ed8:	05da      	lsls	r2, r3, #23
 8002eda:	d5f7      	bpl.n	8002ecc <HAL_RCC_OscConfig+0x294>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002edc:	68a3      	ldr	r3, [r4, #8]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	f000 815b 	beq.w	800319a <HAL_RCC_OscConfig+0x562>
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f040 815e 	bne.w	80031a6 <HAL_RCC_OscConfig+0x56e>
 8002eea:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <HAL_RCC_OscConfig+0x2dc>)
 8002eec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002eee:	f022 0201 	bic.w	r2, r2, #1
 8002ef2:	671a      	str	r2, [r3, #112]	; 0x70
 8002ef4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ef6:	f022 0204 	bic.w	r2, r2, #4
 8002efa:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002efc:	68a3      	ldr	r3, [r4, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 812a 	beq.w	8003158 <HAL_RCC_OscConfig+0x520>
      tickstart = HAL_GetTick();
 8002f04:	f7fd fa4c 	bl	80003a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f08:	4d02      	ldr	r5, [pc, #8]	; (8002f14 <HAL_RCC_OscConfig+0x2dc>)
      tickstart = HAL_GetTick();
 8002f0a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f0c:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f10:	e009      	b.n	8002f26 <HAL_RCC_OscConfig+0x2ee>
 8002f12:	bf00      	nop
 8002f14:	58024400 	.word	0x58024400
 8002f18:	58024800 	.word	0x58024800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f1c:	f7fd fa40 	bl	80003a0 <HAL_GetTick>
 8002f20:	1bc0      	subs	r0, r0, r7
 8002f22:	42b0      	cmp	r0, r6
 8002f24:	d803      	bhi.n	8002f2e <HAL_RCC_OscConfig+0x2f6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f26:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002f28:	079b      	lsls	r3, r3, #30
 8002f2a:	d5f7      	bpl.n	8002f1c <HAL_RCC_OscConfig+0x2e4>
 8002f2c:	e728      	b.n	8002d80 <HAL_RCC_OscConfig+0x148>
            return HAL_TIMEOUT;
 8002f2e:	2003      	movs	r0, #3
}
 8002f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 8002f32:	f7fd fa35 	bl	80003a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f36:	4da2      	ldr	r5, [pc, #648]	; (80031c0 <HAL_RCC_OscConfig+0x588>)
        tickstart = HAL_GetTick();
 8002f38:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f3a:	e004      	b.n	8002f46 <HAL_RCC_OscConfig+0x30e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f3c:	f7fd fa30 	bl	80003a0 <HAL_GetTick>
 8002f40:	1b80      	subs	r0, r0, r6
 8002f42:	2864      	cmp	r0, #100	; 0x64
 8002f44:	d8f3      	bhi.n	8002f2e <HAL_RCC_OscConfig+0x2f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f46:	682b      	ldr	r3, [r5, #0]
 8002f48:	0398      	lsls	r0, r3, #14
 8002f4a:	d4f7      	bmi.n	8002f3c <HAL_RCC_OscConfig+0x304>
 8002f4c:	e6aa      	b.n	8002ca4 <HAL_RCC_OscConfig+0x6c>
    return HAL_ERROR;
 8002f4e:	2001      	movs	r0, #1
}
 8002f50:	4770      	bx	lr
      __HAL_RCC_LSI_DISABLE();
 8002f52:	4b9b      	ldr	r3, [pc, #620]	; (80031c0 <HAL_RCC_OscConfig+0x588>)
 8002f54:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f56:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8002f58:	f022 0201 	bic.w	r2, r2, #1
 8002f5c:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002f5e:	f7fd fa1f 	bl	80003a0 <HAL_GetTick>
 8002f62:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f64:	e004      	b.n	8002f70 <HAL_RCC_OscConfig+0x338>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f66:	f7fd fa1b 	bl	80003a0 <HAL_GetTick>
 8002f6a:	1b80      	subs	r0, r0, r6
 8002f6c:	2802      	cmp	r0, #2
 8002f6e:	d8de      	bhi.n	8002f2e <HAL_RCC_OscConfig+0x2f6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f70:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002f72:	0799      	lsls	r1, r3, #30
 8002f74:	d4f7      	bmi.n	8002f66 <HAL_RCC_OscConfig+0x32e>
 8002f76:	e6e5      	b.n	8002d44 <HAL_RCC_OscConfig+0x10c>
      __HAL_RCC_HSI48_DISABLE();
 8002f78:	4b91      	ldr	r3, [pc, #580]	; (80031c0 <HAL_RCC_OscConfig+0x588>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f7c:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_DISABLE();
 8002f7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f82:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002f84:	f7fd fa0c 	bl	80003a0 <HAL_GetTick>
 8002f88:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f8a:	e004      	b.n	8002f96 <HAL_RCC_OscConfig+0x35e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002f8c:	f7fd fa08 	bl	80003a0 <HAL_GetTick>
 8002f90:	1b80      	subs	r0, r0, r6
 8002f92:	2802      	cmp	r0, #2
 8002f94:	d8cb      	bhi.n	8002f2e <HAL_RCC_OscConfig+0x2f6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f96:	682b      	ldr	r3, [r5, #0]
 8002f98:	0498      	lsls	r0, r3, #18
 8002f9a:	d4f7      	bmi.n	8002f8c <HAL_RCC_OscConfig+0x354>
 8002f9c:	e6ec      	b.n	8002d78 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fa2:	4b87      	ldr	r3, [pc, #540]	; (80031c0 <HAL_RCC_OscConfig+0x588>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	f47f ae64 	bne.w	8002c72 <HAL_RCC_OscConfig+0x3a>
 8002faa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	e662      	b.n	8002c80 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_CSI_DISABLE();
 8002fba:	4b81      	ldr	r3, [pc, #516]	; (80031c0 <HAL_RCC_OscConfig+0x588>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002fbe:	461d      	mov	r5, r3
        __HAL_RCC_CSI_DISABLE();
 8002fc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fc4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002fc6:	f7fd f9eb 	bl	80003a0 <HAL_GetTick>
 8002fca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002fcc:	e004      	b.n	8002fd8 <HAL_RCC_OscConfig+0x3a0>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002fce:	f7fd f9e7 	bl	80003a0 <HAL_GetTick>
 8002fd2:	1b80      	subs	r0, r0, r6
 8002fd4:	2802      	cmp	r0, #2
 8002fd6:	d8aa      	bhi.n	8002f2e <HAL_RCC_OscConfig+0x2f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002fd8:	682b      	ldr	r3, [r5, #0]
 8002fda:	05df      	lsls	r7, r3, #23
 8002fdc:	d4f7      	bmi.n	8002fce <HAL_RCC_OscConfig+0x396>
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	e697      	b.n	8002d12 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI_DISABLE();
 8002fe2:	4b77      	ldr	r3, [pc, #476]	; (80031c0 <HAL_RCC_OscConfig+0x588>)
 8002fe4:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fe6:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8002fe8:	f022 0201 	bic.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002fee:	f7fd f9d7 	bl	80003a0 <HAL_GetTick>
 8002ff2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ff4:	e004      	b.n	8003000 <HAL_RCC_OscConfig+0x3c8>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ff6:	f7fd f9d3 	bl	80003a0 <HAL_GetTick>
 8002ffa:	1b80      	subs	r0, r0, r6
 8002ffc:	2802      	cmp	r0, #2
 8002ffe:	d896      	bhi.n	8002f2e <HAL_RCC_OscConfig+0x2f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003000:	682b      	ldr	r3, [r5, #0]
 8003002:	0758      	lsls	r0, r3, #29
 8003004:	d4f7      	bmi.n	8002ff6 <HAL_RCC_OscConfig+0x3be>
 8003006:	6823      	ldr	r3, [r4, #0]
 8003008:	e650      	b.n	8002cac <HAL_RCC_OscConfig+0x74>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800300e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003012:	6053      	str	r3, [r2, #4]
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	e649      	b.n	8002cac <HAL_RCC_OscConfig+0x74>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003018:	68d3      	ldr	r3, [r2, #12]
 800301a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800301e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003022:	60d3      	str	r3, [r2, #12]
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	e674      	b.n	8002d12 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PLL_DISABLE();
 8003028:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800302c:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 800302e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003030:	f7fd f9b6 	bl	80003a0 <HAL_GetTick>
 8003034:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003036:	e005      	b.n	8003044 <HAL_RCC_OscConfig+0x40c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003038:	f7fd f9b2 	bl	80003a0 <HAL_GetTick>
 800303c:	1b80      	subs	r0, r0, r6
 800303e:	2802      	cmp	r0, #2
 8003040:	f63f af75 	bhi.w	8002f2e <HAL_RCC_OscConfig+0x2f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003044:	682b      	ldr	r3, [r5, #0]
 8003046:	0199      	lsls	r1, r3, #6
 8003048:	d4f6      	bmi.n	8003038 <HAL_RCC_OscConfig+0x400>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800304a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800304c:	4b5d      	ldr	r3, [pc, #372]	; (80031c4 <HAL_RCC_OscConfig+0x58c>)
 800304e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003050:	4013      	ands	r3, r2
 8003052:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003054:	495c      	ldr	r1, [pc, #368]	; (80031c8 <HAL_RCC_OscConfig+0x590>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003056:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003058:	4e59      	ldr	r6, [pc, #356]	; (80031c0 <HAL_RCC_OscConfig+0x588>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800305a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800305e:	62ab      	str	r3, [r5, #40]	; 0x28
 8003060:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8003062:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8003066:	3f01      	subs	r7, #1
 8003068:	1e50      	subs	r0, r2, #1
 800306a:	3b01      	subs	r3, #1
 800306c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800306e:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8003072:	025b      	lsls	r3, r3, #9
 8003074:	0400      	lsls	r0, r0, #16
 8003076:	3a01      	subs	r2, #1
 8003078:	b29b      	uxth	r3, r3
 800307a:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800307e:	0612      	lsls	r2, r2, #24
 8003080:	4303      	orrs	r3, r0
 8003082:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003086:	433b      	orrs	r3, r7
 8003088:	4313      	orrs	r3, r2
 800308a:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800308c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800308e:	f023 0301 	bic.w	r3, r3, #1
 8003092:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003094:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003096:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003098:	4011      	ands	r1, r2
 800309a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800309e:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80030a0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80030a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80030a4:	f023 030c 	bic.w	r3, r3, #12
 80030a8:	4313      	orrs	r3, r2
 80030aa:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80030ac:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80030ae:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80030b0:	f023 0302 	bic.w	r3, r3, #2
 80030b4:	4313      	orrs	r3, r2
 80030b6:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030b8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80030ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030be:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030c0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80030c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c6:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80030c8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80030ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030ce:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80030d0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80030d8:	682b      	ldr	r3, [r5, #0]
 80030da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030de:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80030e0:	f7fd f95e 	bl	80003a0 <HAL_GetTick>
 80030e4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030e6:	e005      	b.n	80030f4 <HAL_RCC_OscConfig+0x4bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e8:	f7fd f95a 	bl	80003a0 <HAL_GetTick>
 80030ec:	1b00      	subs	r0, r0, r4
 80030ee:	2802      	cmp	r0, #2
 80030f0:	f63f af1d 	bhi.w	8002f2e <HAL_RCC_OscConfig+0x2f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030f4:	6833      	ldr	r3, [r6, #0]
 80030f6:	019a      	lsls	r2, r3, #6
 80030f8:	d5f6      	bpl.n	80030e8 <HAL_RCC_OscConfig+0x4b0>
 80030fa:	e65f      	b.n	8002dbc <HAL_RCC_OscConfig+0x184>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030fc:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80030fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003100:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003102:	f43f ae5c 	beq.w	8002dbe <HAL_RCC_OscConfig+0x186>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003106:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800310a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800310c:	428b      	cmp	r3, r1
 800310e:	f47f aeae 	bne.w	8002e6e <HAL_RCC_OscConfig+0x236>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003112:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003116:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003118:	429a      	cmp	r2, r3
 800311a:	f47f aea8 	bne.w	8002e6e <HAL_RCC_OscConfig+0x236>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800311e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003120:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8003124:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003126:	429a      	cmp	r2, r3
 8003128:	f47f aea1 	bne.w	8002e6e <HAL_RCC_OscConfig+0x236>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800312c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800312e:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8003132:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003134:	429a      	cmp	r2, r3
 8003136:	f47f ae9a 	bne.w	8002e6e <HAL_RCC_OscConfig+0x236>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800313a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800313c:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8003140:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003142:	429a      	cmp	r2, r3
 8003144:	f47f ae93 	bne.w	8002e6e <HAL_RCC_OscConfig+0x236>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003148:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800314a:	f3c5 6506 	ubfx	r5, r5, #24, #7
 800314e:	3801      	subs	r0, #1
    return HAL_ERROR;
 8003150:	1a28      	subs	r0, r5, r0
 8003152:	bf18      	it	ne
 8003154:	2001      	movne	r0, #1
 8003156:	e632      	b.n	8002dbe <HAL_RCC_OscConfig+0x186>
      tickstart = HAL_GetTick();
 8003158:	f7fd f922 	bl	80003a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800315c:	4d18      	ldr	r5, [pc, #96]	; (80031c0 <HAL_RCC_OscConfig+0x588>)
      tickstart = HAL_GetTick();
 800315e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003160:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003164:	e005      	b.n	8003172 <HAL_RCC_OscConfig+0x53a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003166:	f7fd f91b 	bl	80003a0 <HAL_GetTick>
 800316a:	1bc0      	subs	r0, r0, r7
 800316c:	42b0      	cmp	r0, r6
 800316e:	f63f aede 	bhi.w	8002f2e <HAL_RCC_OscConfig+0x2f6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003172:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003174:	0798      	lsls	r0, r3, #30
 8003176:	d4f6      	bmi.n	8003166 <HAL_RCC_OscConfig+0x52e>
 8003178:	e602      	b.n	8002d80 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800317a:	68eb      	ldr	r3, [r5, #12]
 800317c:	6a22      	ldr	r2, [r4, #32]
 800317e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003182:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003186:	60eb      	str	r3, [r5, #12]
 8003188:	6823      	ldr	r3, [r4, #0]
 800318a:	e5c2      	b.n	8002d12 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003190:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003194:	606b      	str	r3, [r5, #4]
 8003196:	6823      	ldr	r3, [r4, #0]
 8003198:	e588      	b.n	8002cac <HAL_RCC_OscConfig+0x74>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800319a:	4a09      	ldr	r2, [pc, #36]	; (80031c0 <HAL_RCC_OscConfig+0x588>)
 800319c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	6713      	str	r3, [r2, #112]	; 0x70
 80031a4:	e6aa      	b.n	8002efc <HAL_RCC_OscConfig+0x2c4>
 80031a6:	2b05      	cmp	r3, #5
 80031a8:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <HAL_RCC_OscConfig+0x588>)
 80031aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031ac:	f47f ae9f 	bne.w	8002eee <HAL_RCC_OscConfig+0x2b6>
 80031b0:	f042 0204 	orr.w	r2, r2, #4
 80031b4:	671a      	str	r2, [r3, #112]	; 0x70
 80031b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031b8:	f042 0201 	orr.w	r2, r2, #1
 80031bc:	671a      	str	r2, [r3, #112]	; 0x70
 80031be:	e69d      	b.n	8002efc <HAL_RCC_OscConfig+0x2c4>
 80031c0:	58024400 	.word	0x58024400
 80031c4:	fffffc0c 	.word	0xfffffc0c
 80031c8:	ffff0007 	.word	0xffff0007

080031cc <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031cc:	4a3e      	ldr	r2, [pc, #248]	; (80032c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80031ce:	6913      	ldr	r3, [r2, #16]
 80031d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031d4:	2b10      	cmp	r3, #16
 80031d6:	d04f      	beq.n	8003278 <HAL_RCC_GetSysClockFreq+0xac>
 80031d8:	2b18      	cmp	r3, #24
 80031da:	d00b      	beq.n	80031f4 <HAL_RCC_GetSysClockFreq+0x28>
 80031dc:	b10b      	cbz	r3, 80031e2 <HAL_RCC_GetSysClockFreq+0x16>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80031de:	483b      	ldr	r0, [pc, #236]	; (80032cc <HAL_RCC_GetSysClockFreq+0x100>)
 80031e0:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031e2:	6813      	ldr	r3, [r2, #0]
 80031e4:	0699      	lsls	r1, r3, #26
 80031e6:	d549      	bpl.n	800327c <HAL_RCC_GetSysClockFreq+0xb0>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031e8:	6813      	ldr	r3, [r2, #0]
 80031ea:	4839      	ldr	r0, [pc, #228]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80031ec:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80031f0:	40d8      	lsrs	r0, r3
 80031f2:	4770      	bx	lr
{
 80031f4:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80031f8:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031fa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80031fc:	f3c0 1005 	ubfx	r0, r0, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003200:	6b54      	ldr	r4, [r2, #52]	; 0x34

    if (pllm != 0U)
 8003202:	b3b0      	cbz	r0, 8003272 <HAL_RCC_GetSysClockFreq+0xa6>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003204:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003208:	f003 0301 	and.w	r3, r3, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800320c:	f001 0103 	and.w	r1, r1, #3
 8003210:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003214:	fb03 f304 	mul.w	r3, r3, r4
    {
      switch (pllsource)
 8003218:	2901      	cmp	r1, #1
 800321a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800321e:	ee07 3a10 	vmov	s14, r3
 8003222:	eeba 7ae9 	vcvt.f32.s32	s14, s14, #13
      switch (pllsource)
 8003226:	d002      	beq.n	800322e <HAL_RCC_GetSysClockFreq+0x62>
 8003228:	d32d      	bcc.n	8003286 <HAL_RCC_GetSysClockFreq+0xba>
 800322a:	2902      	cmp	r1, #2
 800322c:	d028      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0xb4>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800322e:	eddf 5a29 	vldr	s11, [pc, #164]	; 80032d4 <HAL_RCC_GetSysClockFreq+0x108>
 8003232:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8003236:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800323c:	ee07 3a90 	vmov	s15, r3
 8003240:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003248:	ee77 7a86 	vadd.f32	s15, s15, s12
 800324c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003250:	ee27 7a26 	vmul.f32	s14, s14, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003254:	4b1c      	ldr	r3, [pc, #112]	; (80032c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003258:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800325c:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800325e:	ee07 3a90 	vmov	s15, r3
 8003262:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003266:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800326a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800326e:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8003272:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003276:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8003278:	4817      	ldr	r0, [pc, #92]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800327a:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800327c:	4814      	ldr	r0, [pc, #80]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x104>)
}
 800327e:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003280:	eddf 5a16 	vldr	s11, [pc, #88]	; 80032dc <HAL_RCC_GetSysClockFreq+0x110>
 8003284:	e7d5      	b.n	8003232 <HAL_RCC_GetSysClockFreq+0x66>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003286:	6813      	ldr	r3, [r2, #0]
 8003288:	069b      	lsls	r3, r3, #26
 800328a:	d51a      	bpl.n	80032c2 <HAL_RCC_GetSysClockFreq+0xf6>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800328c:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800328e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003292:	490f      	ldr	r1, [pc, #60]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003294:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003298:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800329a:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800329c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032a0:	ee06 1a90 	vmov	s13, r1
 80032a4:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 80032a8:	ee06 3a90 	vmov	s13, r3
 80032ac:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 80032b0:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 80032b4:	ee76 7a05 	vadd.f32	s15, s12, s10
 80032b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80032bc:	ee26 7a87 	vmul.f32	s14, s13, s14
 80032c0:	e7c8      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0x88>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032c2:	eddf 5a07 	vldr	s11, [pc, #28]	; 80032e0 <HAL_RCC_GetSysClockFreq+0x114>
 80032c6:	e7b4      	b.n	8003232 <HAL_RCC_GetSysClockFreq+0x66>
 80032c8:	58024400 	.word	0x58024400
 80032cc:	003d0900 	.word	0x003d0900
 80032d0:	03d09000 	.word	0x03d09000
 80032d4:	4a742400 	.word	0x4a742400
 80032d8:	017d7840 	.word	0x017d7840
 80032dc:	4bbebc20 	.word	0x4bbebc20
 80032e0:	4c742400 	.word	0x4c742400

080032e4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80032e4:	b178      	cbz	r0, 8003306 <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032e6:	4a91      	ldr	r2, [pc, #580]	; (800352c <HAL_RCC_ClockConfig+0x248>)
 80032e8:	6813      	ldr	r3, [r2, #0]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	428b      	cmp	r3, r1
 80032f0:	d20b      	bcs.n	800330a <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f2:	6813      	ldr	r3, [r2, #0]
 80032f4:	f023 030f 	bic.w	r3, r3, #15
 80032f8:	430b      	orrs	r3, r1
 80032fa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fc:	6813      	ldr	r3, [r2, #0]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	428b      	cmp	r3, r1
 8003304:	d001      	beq.n	800330a <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8003306:	2001      	movs	r0, #1
}
 8003308:	4770      	bx	lr
{
 800330a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800330e:	6803      	ldr	r3, [r0, #0]
 8003310:	075f      	lsls	r7, r3, #29
 8003312:	d50c      	bpl.n	800332e <HAL_RCC_ClockConfig+0x4a>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003314:	4c86      	ldr	r4, [pc, #536]	; (8003530 <HAL_RCC_ClockConfig+0x24c>)
 8003316:	6905      	ldr	r5, [r0, #16]
 8003318:	69a2      	ldr	r2, [r4, #24]
 800331a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800331e:	4295      	cmp	r5, r2
 8003320:	d905      	bls.n	800332e <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003322:	69a3      	ldr	r3, [r4, #24]
 8003324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003328:	432b      	orrs	r3, r5
 800332a:	61a3      	str	r3, [r4, #24]
 800332c:	6803      	ldr	r3, [r0, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800332e:	071e      	lsls	r6, r3, #28
 8003330:	d50c      	bpl.n	800334c <HAL_RCC_ClockConfig+0x68>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003332:	4c7f      	ldr	r4, [pc, #508]	; (8003530 <HAL_RCC_ClockConfig+0x24c>)
 8003334:	6945      	ldr	r5, [r0, #20]
 8003336:	69e2      	ldr	r2, [r4, #28]
 8003338:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800333c:	4295      	cmp	r5, r2
 800333e:	d905      	bls.n	800334c <HAL_RCC_ClockConfig+0x68>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003340:	69e3      	ldr	r3, [r4, #28]
 8003342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003346:	432b      	orrs	r3, r5
 8003348:	61e3      	str	r3, [r4, #28]
 800334a:	6803      	ldr	r3, [r0, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800334c:	06dd      	lsls	r5, r3, #27
 800334e:	d50c      	bpl.n	800336a <HAL_RCC_ClockConfig+0x86>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003350:	4c77      	ldr	r4, [pc, #476]	; (8003530 <HAL_RCC_ClockConfig+0x24c>)
 8003352:	6985      	ldr	r5, [r0, #24]
 8003354:	69e2      	ldr	r2, [r4, #28]
 8003356:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800335a:	4295      	cmp	r5, r2
 800335c:	d905      	bls.n	800336a <HAL_RCC_ClockConfig+0x86>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800335e:	69e3      	ldr	r3, [r4, #28]
 8003360:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003364:	432b      	orrs	r3, r5
 8003366:	61e3      	str	r3, [r4, #28]
 8003368:	6803      	ldr	r3, [r0, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800336a:	069c      	lsls	r4, r3, #26
 800336c:	d50c      	bpl.n	8003388 <HAL_RCC_ClockConfig+0xa4>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800336e:	4c70      	ldr	r4, [pc, #448]	; (8003530 <HAL_RCC_ClockConfig+0x24c>)
 8003370:	69c5      	ldr	r5, [r0, #28]
 8003372:	6a22      	ldr	r2, [r4, #32]
 8003374:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003378:	4295      	cmp	r5, r2
 800337a:	d905      	bls.n	8003388 <HAL_RCC_ClockConfig+0xa4>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800337c:	6a23      	ldr	r3, [r4, #32]
 800337e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003382:	432b      	orrs	r3, r5
 8003384:	6223      	str	r3, [r4, #32]
 8003386:	6803      	ldr	r3, [r0, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003388:	079a      	lsls	r2, r3, #30
 800338a:	4604      	mov	r4, r0
 800338c:	460d      	mov	r5, r1
 800338e:	d512      	bpl.n	80033b6 <HAL_RCC_ClockConfig+0xd2>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003390:	4867      	ldr	r0, [pc, #412]	; (8003530 <HAL_RCC_ClockConfig+0x24c>)
 8003392:	68e1      	ldr	r1, [r4, #12]
 8003394:	6982      	ldr	r2, [r0, #24]
 8003396:	f002 020f 	and.w	r2, r2, #15
 800339a:	4291      	cmp	r1, r2
 800339c:	d93d      	bls.n	800341a <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800339e:	6983      	ldr	r3, [r0, #24]
 80033a0:	f023 030f 	bic.w	r3, r3, #15
 80033a4:	4319      	orrs	r1, r3
 80033a6:	6181      	str	r1, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033a8:	6823      	ldr	r3, [r4, #0]
 80033aa:	07df      	lsls	r7, r3, #31
 80033ac:	d405      	bmi.n	80033ba <HAL_RCC_ClockConfig+0xd6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ae:	079f      	lsls	r7, r3, #30
 80033b0:	d540      	bpl.n	8003434 <HAL_RCC_ClockConfig+0x150>
 80033b2:	68e1      	ldr	r1, [r4, #12]
 80033b4:	e033      	b.n	800341e <HAL_RCC_ClockConfig+0x13a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033b6:	07db      	lsls	r3, r3, #31
 80033b8:	d53c      	bpl.n	8003434 <HAL_RCC_ClockConfig+0x150>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80033ba:	4a5d      	ldr	r2, [pc, #372]	; (8003530 <HAL_RCC_ClockConfig+0x24c>)
 80033bc:	68a1      	ldr	r1, [r4, #8]
 80033be:	6993      	ldr	r3, [r2, #24]
 80033c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033c4:	430b      	orrs	r3, r1
 80033c6:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c8:	6863      	ldr	r3, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033ca:	6812      	ldr	r2, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	f000 809e 	beq.w	800350e <HAL_RCC_ClockConfig+0x22a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033d2:	2b03      	cmp	r3, #3
 80033d4:	f000 80a1 	beq.w	800351a <HAL_RCC_ClockConfig+0x236>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80033d8:	2b01      	cmp	r3, #1
 80033da:	f000 80a2 	beq.w	8003522 <HAL_RCC_ClockConfig+0x23e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033de:	0752      	lsls	r2, r2, #29
 80033e0:	d538      	bpl.n	8003454 <HAL_RCC_ClockConfig+0x170>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033e2:	4953      	ldr	r1, [pc, #332]	; (8003530 <HAL_RCC_ClockConfig+0x24c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e4:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033e8:	690a      	ldr	r2, [r1, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ea:	460e      	mov	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033ec:	f022 0207 	bic.w	r2, r2, #7
 80033f0:	4313      	orrs	r3, r2
 80033f2:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 80033f4:	f7fc ffd4 	bl	80003a0 <HAL_GetTick>
 80033f8:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fa:	e005      	b.n	8003408 <HAL_RCC_ClockConfig+0x124>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033fc:	f7fc ffd0 	bl	80003a0 <HAL_GetTick>
 8003400:	1bc0      	subs	r0, r0, r7
 8003402:	4540      	cmp	r0, r8
 8003404:	f200 8087 	bhi.w	8003516 <HAL_RCC_ClockConfig+0x232>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003408:	6933      	ldr	r3, [r6, #16]
 800340a:	6862      	ldr	r2, [r4, #4]
 800340c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003410:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8003414:	d1f2      	bne.n	80033fc <HAL_RCC_ClockConfig+0x118>
 8003416:	6823      	ldr	r3, [r4, #0]
 8003418:	e7c9      	b.n	80033ae <HAL_RCC_ClockConfig+0xca>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800341a:	07da      	lsls	r2, r3, #31
 800341c:	d4cd      	bmi.n	80033ba <HAL_RCC_ClockConfig+0xd6>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800341e:	4a44      	ldr	r2, [pc, #272]	; (8003530 <HAL_RCC_ClockConfig+0x24c>)
 8003420:	6993      	ldr	r3, [r2, #24]
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	428b      	cmp	r3, r1
 8003428:	d904      	bls.n	8003434 <HAL_RCC_ClockConfig+0x150>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800342a:	6993      	ldr	r3, [r2, #24]
 800342c:	f023 030f 	bic.w	r3, r3, #15
 8003430:	4319      	orrs	r1, r3
 8003432:	6191      	str	r1, [r2, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003434:	4a3d      	ldr	r2, [pc, #244]	; (800352c <HAL_RCC_ClockConfig+0x248>)
 8003436:	6813      	ldr	r3, [r2, #0]
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	42ab      	cmp	r3, r5
 800343e:	d90c      	bls.n	800345a <HAL_RCC_ClockConfig+0x176>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003440:	6813      	ldr	r3, [r2, #0]
 8003442:	f023 030f 	bic.w	r3, r3, #15
 8003446:	432b      	orrs	r3, r5
 8003448:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344a:	6813      	ldr	r3, [r2, #0]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	42ab      	cmp	r3, r5
 8003452:	d002      	beq.n	800345a <HAL_RCC_ClockConfig+0x176>
    return HAL_ERROR;
 8003454:	2001      	movs	r0, #1
}
 8003456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	075e      	lsls	r6, r3, #29
 800345e:	d50c      	bpl.n	800347a <HAL_RCC_ClockConfig+0x196>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003460:	4933      	ldr	r1, [pc, #204]	; (8003530 <HAL_RCC_ClockConfig+0x24c>)
 8003462:	6920      	ldr	r0, [r4, #16]
 8003464:	698a      	ldr	r2, [r1, #24]
 8003466:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800346a:	4290      	cmp	r0, r2
 800346c:	d205      	bcs.n	800347a <HAL_RCC_ClockConfig+0x196>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800346e:	698b      	ldr	r3, [r1, #24]
 8003470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003474:	4303      	orrs	r3, r0
 8003476:	618b      	str	r3, [r1, #24]
 8003478:	6823      	ldr	r3, [r4, #0]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800347a:	071d      	lsls	r5, r3, #28
 800347c:	d50c      	bpl.n	8003498 <HAL_RCC_ClockConfig+0x1b4>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800347e:	492c      	ldr	r1, [pc, #176]	; (8003530 <HAL_RCC_ClockConfig+0x24c>)
 8003480:	6960      	ldr	r0, [r4, #20]
 8003482:	69ca      	ldr	r2, [r1, #28]
 8003484:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003488:	4290      	cmp	r0, r2
 800348a:	d205      	bcs.n	8003498 <HAL_RCC_ClockConfig+0x1b4>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800348c:	69cb      	ldr	r3, [r1, #28]
 800348e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003492:	4303      	orrs	r3, r0
 8003494:	61cb      	str	r3, [r1, #28]
 8003496:	6823      	ldr	r3, [r4, #0]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003498:	06d8      	lsls	r0, r3, #27
 800349a:	d50c      	bpl.n	80034b6 <HAL_RCC_ClockConfig+0x1d2>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800349c:	4924      	ldr	r1, [pc, #144]	; (8003530 <HAL_RCC_ClockConfig+0x24c>)
 800349e:	69a0      	ldr	r0, [r4, #24]
 80034a0:	69ca      	ldr	r2, [r1, #28]
 80034a2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80034a6:	4290      	cmp	r0, r2
 80034a8:	d205      	bcs.n	80034b6 <HAL_RCC_ClockConfig+0x1d2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034aa:	69cb      	ldr	r3, [r1, #28]
 80034ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80034b0:	4303      	orrs	r3, r0
 80034b2:	61cb      	str	r3, [r1, #28]
 80034b4:	6823      	ldr	r3, [r4, #0]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80034b6:	0699      	lsls	r1, r3, #26
 80034b8:	d50b      	bpl.n	80034d2 <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80034ba:	4a1d      	ldr	r2, [pc, #116]	; (8003530 <HAL_RCC_ClockConfig+0x24c>)
 80034bc:	69e1      	ldr	r1, [r4, #28]
 80034be:	6a13      	ldr	r3, [r2, #32]
 80034c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034c4:	4299      	cmp	r1, r3
 80034c6:	d204      	bcs.n	80034d2 <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80034c8:	6a13      	ldr	r3, [r2, #32]
 80034ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ce:	430b      	orrs	r3, r1
 80034d0:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034d2:	f7ff fe7b 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 80034d6:	4a16      	ldr	r2, [pc, #88]	; (8003530 <HAL_RCC_ClockConfig+0x24c>)
 80034d8:	4916      	ldr	r1, [pc, #88]	; (8003534 <HAL_RCC_ClockConfig+0x250>)
 80034da:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034dc:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034de:	f3c3 2303 	ubfx	r3, r3, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 80034e2:	4d15      	ldr	r5, [pc, #84]	; (8003538 <HAL_RCC_ClockConfig+0x254>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034e4:	f002 020f 	and.w	r2, r2, #15
 80034e8:	4c14      	ldr	r4, [pc, #80]	; (800353c <HAL_RCC_ClockConfig+0x258>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034ea:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034ec:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034ee:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 80034f2:	4913      	ldr	r1, [pc, #76]	; (8003540 <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034f4:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034f8:	fa20 f303 	lsr.w	r3, r0, r3
  halstatus = HAL_InitTick (uwTickPrio);
 80034fc:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034fe:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 8003502:	600b      	str	r3, [r1, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003504:	6022      	str	r2, [r4, #0]
}
 8003506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 800350a:	f7fc bee5 	b.w	80002d8 <HAL_InitTick>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800350e:	0396      	lsls	r6, r2, #14
 8003510:	f53f af67 	bmi.w	80033e2 <HAL_RCC_ClockConfig+0xfe>
 8003514:	e79e      	b.n	8003454 <HAL_RCC_ClockConfig+0x170>
            return HAL_TIMEOUT;
 8003516:	2003      	movs	r0, #3
 8003518:	e79d      	b.n	8003456 <HAL_RCC_ClockConfig+0x172>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800351a:	0190      	lsls	r0, r2, #6
 800351c:	f53f af61 	bmi.w	80033e2 <HAL_RCC_ClockConfig+0xfe>
 8003520:	e798      	b.n	8003454 <HAL_RCC_ClockConfig+0x170>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003522:	05d1      	lsls	r1, r2, #23
 8003524:	f53f af5d 	bmi.w	80033e2 <HAL_RCC_ClockConfig+0xfe>
 8003528:	e794      	b.n	8003454 <HAL_RCC_ClockConfig+0x170>
 800352a:	bf00      	nop
 800352c:	52002000 	.word	0x52002000
 8003530:	58024400 	.word	0x58024400
 8003534:	0800aa7c 	.word	0x0800aa7c
 8003538:	20000004 	.word	0x20000004
 800353c:	20000018 	.word	0x20000018
 8003540:	20000014 	.word	0x20000014

08003544 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003544:	4a49      	ldr	r2, [pc, #292]	; (800366c <HAL_RCC_GetHCLKFreq+0x128>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003546:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003548:	6913      	ldr	r3, [r2, #16]
 800354a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800354e:	2b10      	cmp	r3, #16
 8003550:	d064      	beq.n	800361c <HAL_RCC_GetHCLKFreq+0xd8>
 8003552:	2b18      	cmp	r3, #24
 8003554:	d022      	beq.n	800359c <HAL_RCC_GetHCLKFreq+0x58>
 8003556:	b1bb      	cbz	r3, 8003588 <HAL_RCC_GetHCLKFreq+0x44>
    sysclockfreq = CSI_VALUE;
 8003558:	4b45      	ldr	r3, [pc, #276]	; (8003670 <HAL_RCC_GetHCLKFreq+0x12c>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800355a:	4944      	ldr	r1, [pc, #272]	; (800366c <HAL_RCC_GetHCLKFreq+0x128>)
 800355c:	4845      	ldr	r0, [pc, #276]	; (8003674 <HAL_RCC_GetHCLKFreq+0x130>)
 800355e:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003560:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003562:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003566:	4c44      	ldr	r4, [pc, #272]	; (8003678 <HAL_RCC_GetHCLKFreq+0x134>)
 8003568:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800356c:	4d43      	ldr	r5, [pc, #268]	; (800367c <HAL_RCC_GetHCLKFreq+0x138>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800356e:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003570:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003572:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003576:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800357a:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800357c:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8003580:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003582:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8003584:	bc30      	pop	{r4, r5}
 8003586:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003588:	6813      	ldr	r3, [r2, #0]
 800358a:	0699      	lsls	r1, r3, #26
 800358c:	d548      	bpl.n	8003620 <HAL_RCC_GetHCLKFreq+0xdc>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800358e:	6813      	ldr	r3, [r2, #0]
 8003590:	4a3b      	ldr	r2, [pc, #236]	; (8003680 <HAL_RCC_GetHCLKFreq+0x13c>)
 8003592:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003596:	fa22 f303 	lsr.w	r3, r2, r3
 800359a:	e7de      	b.n	800355a <HAL_RCC_GetHCLKFreq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800359c:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800359e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80035a0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80035a2:	f3c3 1305 	ubfx	r3, r3, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80035a6:	6b54      	ldr	r4, [r2, #52]	; 0x34
    if (pllm != 0U)
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0d6      	beq.n	800355a <HAL_RCC_GetHCLKFreq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80035ac:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80035b0:	f001 0101 	and.w	r1, r1, #1
 80035b4:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80035b8:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80035bc:	fb01 f304 	mul.w	r3, r1, r4
 80035c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 80035c4:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80035c6:	ee07 3a90 	vmov	s15, r3
 80035ca:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 80035ce:	d002      	beq.n	80035d6 <HAL_RCC_GetHCLKFreq+0x92>
 80035d0:	d32b      	bcc.n	800362a <HAL_RCC_GetHCLKFreq+0xe6>
 80035d2:	2802      	cmp	r0, #2
 80035d4:	d026      	beq.n	8003624 <HAL_RCC_GetHCLKFreq+0xe0>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035d6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003684 <HAL_RCC_GetHCLKFreq+0x140>
 80035da:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80035de:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80035e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035e4:	ee07 3a10 	vmov	s14, r3
 80035e8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80035ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80035f0:	ee37 7a25 	vadd.f32	s14, s14, s11
 80035f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035f8:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80035fc:	4b1b      	ldr	r3, [pc, #108]	; (800366c <HAL_RCC_GetHCLKFreq+0x128>)
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003604:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003606:	ee07 3a10 	vmov	s14, r3
 800360a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800360e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003612:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8003616:	ee17 3a90 	vmov	r3, s15
 800361a:	e79e      	b.n	800355a <HAL_RCC_GetHCLKFreq+0x16>
    sysclockfreq = HSE_VALUE;
 800361c:	4b1a      	ldr	r3, [pc, #104]	; (8003688 <HAL_RCC_GetHCLKFreq+0x144>)
 800361e:	e79c      	b.n	800355a <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003620:	4b17      	ldr	r3, [pc, #92]	; (8003680 <HAL_RCC_GetHCLKFreq+0x13c>)
 8003622:	e79a      	b.n	800355a <HAL_RCC_GetHCLKFreq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003624:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800368c <HAL_RCC_GetHCLKFreq+0x148>
 8003628:	e7d7      	b.n	80035da <HAL_RCC_GetHCLKFreq+0x96>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800362a:	6813      	ldr	r3, [r2, #0]
 800362c:	069b      	lsls	r3, r3, #26
 800362e:	d51a      	bpl.n	8003666 <HAL_RCC_GetHCLKFreq+0x122>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003630:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003632:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003636:	4912      	ldr	r1, [pc, #72]	; (8003680 <HAL_RCC_GetHCLKFreq+0x13c>)
 8003638:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800363c:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800363e:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003644:	ee07 1a10 	vmov	s14, r1
 8003648:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800364c:	ee07 3a10 	vmov	s14, r3
 8003650:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8003654:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8003658:	ee76 6a05 	vadd.f32	s13, s12, s10
 800365c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003664:	e7ca      	b.n	80035fc <HAL_RCC_GetHCLKFreq+0xb8>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003666:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003690 <HAL_RCC_GetHCLKFreq+0x14c>
 800366a:	e7b6      	b.n	80035da <HAL_RCC_GetHCLKFreq+0x96>
 800366c:	58024400 	.word	0x58024400
 8003670:	003d0900 	.word	0x003d0900
 8003674:	0800aa7c 	.word	0x0800aa7c
 8003678:	20000018 	.word	0x20000018
 800367c:	20000014 	.word	0x20000014
 8003680:	03d09000 	.word	0x03d09000
 8003684:	4a742400 	.word	0x4a742400
 8003688:	017d7840 	.word	0x017d7840
 800368c:	4bbebc20 	.word	0x4bbebc20
 8003690:	4c742400 	.word	0x4c742400

08003694 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003694:	4a3b      	ldr	r2, [pc, #236]	; (8003784 <RCCEx_PLL2_Config+0xf0>)
{
 8003696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003698:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d067      	beq.n	8003772 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80036a2:	6813      	ldr	r3, [r2, #0]
 80036a4:	460f      	mov	r7, r1
 80036a6:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80036a8:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 80036aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036ae:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80036b0:	f7fc fe76 	bl	80003a0 <HAL_GetTick>
 80036b4:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80036b6:	e004      	b.n	80036c2 <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80036b8:	f7fc fe72 	bl	80003a0 <HAL_GetTick>
 80036bc:	1b80      	subs	r0, r0, r6
 80036be:	2802      	cmp	r0, #2
 80036c0:	d859      	bhi.n	8003776 <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80036c2:	6823      	ldr	r3, [r4, #0]
 80036c4:	011a      	lsls	r2, r3, #4
 80036c6:	d4f7      	bmi.n	80036b8 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80036c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80036ca:	682a      	ldr	r2, [r5, #0]
 80036cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80036d0:	492d      	ldr	r1, [pc, #180]	; (8003788 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80036d2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80036d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80036d8:	686e      	ldr	r6, [r5, #4]
 80036da:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80036de:	3e01      	subs	r6, #1
 80036e0:	1e50      	subs	r0, r2, #1
 80036e2:	3b01      	subs	r3, #1
 80036e4:	692a      	ldr	r2, [r5, #16]
 80036e6:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80036ea:	025b      	lsls	r3, r3, #9
 80036ec:	0400      	lsls	r0, r0, #16
 80036ee:	3a01      	subs	r2, #1
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 80036f6:	0612      	lsls	r2, r2, #24
 80036f8:	4303      	orrs	r3, r0
 80036fa:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80036fe:	4333      	orrs	r3, r6
 8003700:	4313      	orrs	r3, r2
 8003702:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003704:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003706:	696a      	ldr	r2, [r5, #20]
 8003708:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800370c:	4313      	orrs	r3, r2
 800370e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003710:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003712:	69aa      	ldr	r2, [r5, #24]
 8003714:	f023 0320 	bic.w	r3, r3, #32
 8003718:	4313      	orrs	r3, r2
 800371a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800371c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800371e:	f023 0310 	bic.w	r3, r3, #16
 8003722:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003724:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003726:	69eb      	ldr	r3, [r5, #28]
 8003728:	4011      	ands	r1, r2
 800372a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800372e:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003730:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003732:	f043 0310 	orr.w	r3, r3, #16
 8003736:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003738:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800373a:	b1f7      	cbz	r7, 800377a <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800373c:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800373e:	bf0c      	ite	eq
 8003740:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003744:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8003748:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800374a:	4b0e      	ldr	r3, [pc, #56]	; (8003784 <RCCEx_PLL2_Config+0xf0>)
 800374c:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800374e:	461c      	mov	r4, r3
    __HAL_RCC_PLL2_ENABLE();
 8003750:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003754:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003756:	f7fc fe23 	bl	80003a0 <HAL_GetTick>
 800375a:	4605      	mov	r5, r0
 800375c:	e004      	b.n	8003768 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800375e:	f7fc fe1f 	bl	80003a0 <HAL_GetTick>
 8003762:	1b40      	subs	r0, r0, r5
 8003764:	2802      	cmp	r0, #2
 8003766:	d806      	bhi.n	8003776 <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003768:	6823      	ldr	r3, [r4, #0]
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	d5f7      	bpl.n	800375e <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 800376e:	2000      	movs	r0, #0
}
 8003770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003772:	2001      	movs	r0, #1
}
 8003774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003776:	2003      	movs	r0, #3
}
 8003778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800377a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800377e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003780:	e7e3      	b.n	800374a <RCCEx_PLL2_Config+0xb6>
 8003782:	bf00      	nop
 8003784:	58024400 	.word	0x58024400
 8003788:	ffff0007 	.word	0xffff0007

0800378c <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800378c:	4a3b      	ldr	r2, [pc, #236]	; (800387c <RCCEx_PLL3_Config+0xf0>)
{
 800378e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003790:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	2b03      	cmp	r3, #3
 8003798:	d067      	beq.n	800386a <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800379a:	6813      	ldr	r3, [r2, #0]
 800379c:	460f      	mov	r7, r1
 800379e:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80037a0:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 80037a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80037a8:	f7fc fdfa 	bl	80003a0 <HAL_GetTick>
 80037ac:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80037ae:	e004      	b.n	80037ba <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80037b0:	f7fc fdf6 	bl	80003a0 <HAL_GetTick>
 80037b4:	1b80      	subs	r0, r0, r6
 80037b6:	2802      	cmp	r0, #2
 80037b8:	d859      	bhi.n	800386e <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	009a      	lsls	r2, r3, #2
 80037be:	d4f7      	bmi.n	80037b0 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80037c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80037c2:	682a      	ldr	r2, [r5, #0]
 80037c4:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80037c8:	492d      	ldr	r1, [pc, #180]	; (8003880 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80037ca:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80037ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80037d0:	686e      	ldr	r6, [r5, #4]
 80037d2:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80037d6:	3e01      	subs	r6, #1
 80037d8:	1e50      	subs	r0, r2, #1
 80037da:	3b01      	subs	r3, #1
 80037dc:	692a      	ldr	r2, [r5, #16]
 80037de:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80037e2:	025b      	lsls	r3, r3, #9
 80037e4:	0400      	lsls	r0, r0, #16
 80037e6:	3a01      	subs	r2, #1
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 80037ee:	0612      	lsls	r2, r2, #24
 80037f0:	4303      	orrs	r3, r0
 80037f2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80037f6:	4333      	orrs	r3, r6
 80037f8:	4313      	orrs	r3, r2
 80037fa:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80037fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80037fe:	696a      	ldr	r2, [r5, #20]
 8003800:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003804:	4313      	orrs	r3, r2
 8003806:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003808:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800380a:	69aa      	ldr	r2, [r5, #24]
 800380c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003810:	4313      	orrs	r3, r2
 8003812:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003814:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003816:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800381a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800381c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800381e:	69eb      	ldr	r3, [r5, #28]
 8003820:	4011      	ands	r1, r2
 8003822:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8003826:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003828:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800382a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800382e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003830:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8003832:	b1f7      	cbz	r7, 8003872 <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003834:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003836:	bf0c      	ite	eq
 8003838:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800383c:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8003840:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003842:	4b0e      	ldr	r3, [pc, #56]	; (800387c <RCCEx_PLL3_Config+0xf0>)
 8003844:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003846:	461c      	mov	r4, r3
    __HAL_RCC_PLL3_ENABLE();
 8003848:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800384c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800384e:	f7fc fda7 	bl	80003a0 <HAL_GetTick>
 8003852:	4605      	mov	r5, r0
 8003854:	e004      	b.n	8003860 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003856:	f7fc fda3 	bl	80003a0 <HAL_GetTick>
 800385a:	1b40      	subs	r0, r0, r5
 800385c:	2802      	cmp	r0, #2
 800385e:	d806      	bhi.n	800386e <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	d5f7      	bpl.n	8003856 <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 8003866:	2000      	movs	r0, #0
}
 8003868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800386a:	2001      	movs	r0, #1
}
 800386c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800386e:	2003      	movs	r0, #3
}
 8003870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003872:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003876:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003878:	e7e3      	b.n	8003842 <RCCEx_PLL3_Config+0xb6>
 800387a:	bf00      	nop
 800387c:	58024400 	.word	0x58024400
 8003880:	ffff0007 	.word	0xffff0007

08003884 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003888:	6803      	ldr	r3, [r0, #0]
{
 800388a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800388c:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8003890:	d016      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003892:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8003894:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003898:	f000 8446 	beq.w	8004128 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 800389c:	f240 8510 	bls.w	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 80038a0:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80038a4:	f000 8480 	beq.w	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80038a8:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80038ac:	f040 852e 	bne.w	800430c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80038b0:	499d      	ldr	r1, [pc, #628]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80038b2:	2600      	movs	r6, #0
 80038b4:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 80038b6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80038ba:	431a      	orrs	r2, r3
 80038bc:	650a      	str	r2, [r1, #80]	; 0x50
 80038be:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038c0:	05dd      	lsls	r5, r3, #23
 80038c2:	d50a      	bpl.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 80038c4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80038c6:	2a04      	cmp	r2, #4
 80038c8:	d806      	bhi.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80038ca:	e8df f012 	tbh	[pc, r2, lsl #1]
 80038ce:	03e0      	.short	0x03e0
 80038d0:	03cf03e7 	.word	0x03cf03e7
 80038d4:	039c039c 	.word	0x039c039c
      ret = HAL_ERROR;
 80038d8:	2601      	movs	r6, #1
 80038da:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80038dc:	0598      	lsls	r0, r3, #22
 80038de:	d515      	bpl.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x88>
    switch(PeriphClkInit->Sai23ClockSelection)
 80038e0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80038e2:	2a80      	cmp	r2, #128	; 0x80
 80038e4:	f000 843f 	beq.w	8004166 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80038e8:	f200 84d3 	bhi.w	8004292 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80038ec:	2a00      	cmp	r2, #0
 80038ee:	f000 844d 	beq.w	800418c <HAL_RCCEx_PeriphCLKConfig+0x908>
 80038f2:	2a40      	cmp	r2, #64	; 0x40
 80038f4:	f040 84d4 	bne.w	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038f8:	2100      	movs	r1, #0
 80038fa:	1d20      	adds	r0, r4, #4
 80038fc:	f7ff feca 	bl	8003694 <RCCEx_PLL2_Config>
 8003900:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003902:	2d00      	cmp	r5, #0
 8003904:	f000 8438 	beq.w	8004178 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8003908:	6823      	ldr	r3, [r4, #0]
 800390a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800390c:	0559      	lsls	r1, r3, #21
 800390e:	d518      	bpl.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003910:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8003914:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8003918:	f000 8411 	beq.w	800413e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 800391c:	f200 84e5 	bhi.w	80042ea <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8003920:	2a00      	cmp	r2, #0
 8003922:	f000 8447 	beq.w	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x930>
 8003926:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800392a:	f040 84e6 	bne.w	80042fa <HAL_RCCEx_PeriphCLKConfig+0xa76>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800392e:	2100      	movs	r1, #0
 8003930:	1d20      	adds	r0, r4, #4
 8003932:	f7ff feaf 	bl	8003694 <RCCEx_PLL2_Config>
 8003936:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003938:	2d00      	cmp	r5, #0
 800393a:	f000 8409 	beq.w	8004150 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 800393e:	6823      	ldr	r3, [r4, #0]
 8003940:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003942:	051a      	lsls	r2, r3, #20
 8003944:	d518      	bpl.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4BClockSelection)
 8003946:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 800394a:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 800394e:	f000 83c3 	beq.w	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x854>
 8003952:	f200 84be 	bhi.w	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xa4e>
 8003956:	2a00      	cmp	r2, #0
 8003958:	f000 841f 	beq.w	800419a <HAL_RCCEx_PeriphCLKConfig+0x916>
 800395c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8003960:	f040 84bf 	bne.w	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003964:	2100      	movs	r1, #0
 8003966:	1d20      	adds	r0, r4, #4
 8003968:	f7ff fe94 	bl	8003694 <RCCEx_PLL2_Config>
 800396c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800396e:	2d00      	cmp	r5, #0
 8003970:	f000 83bb 	beq.w	80040ea <HAL_RCCEx_PeriphCLKConfig+0x866>
 8003974:	6823      	ldr	r3, [r4, #0]
 8003976:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003978:	019f      	lsls	r7, r3, #6
 800397a:	d50d      	bpl.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x114>
    switch(PeriphClkInit->QspiClockSelection)
 800397c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800397e:	2a10      	cmp	r2, #16
 8003980:	f000 832d 	beq.w	8003fde <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8003984:	f240 84bd 	bls.w	8004302 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003988:	2a20      	cmp	r2, #32
 800398a:	f000 835f 	beq.w	800404c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 800398e:	2a30      	cmp	r2, #48	; 0x30
 8003990:	f000 832a 	beq.w	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x764>
      ret = HAL_ERROR;
 8003994:	2601      	movs	r6, #1
 8003996:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003998:	04d8      	lsls	r0, r3, #19
 800399a:	d517      	bpl.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x148>
    switch(PeriphClkInit->Spi123ClockSelection)
 800399c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800399e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80039a2:	f000 83ac 	beq.w	80040fe <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80039a6:	f200 847f 	bhi.w	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xa24>
 80039aa:	2a00      	cmp	r2, #0
 80039ac:	f000 8409 	beq.w	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80039b0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80039b4:	f040 8480 	bne.w	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039b8:	2100      	movs	r1, #0
 80039ba:	1d20      	adds	r0, r4, #4
 80039bc:	f7ff fe6a 	bl	8003694 <RCCEx_PLL2_Config>
 80039c0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80039c2:	2d00      	cmp	r5, #0
 80039c4:	f000 83a4 	beq.w	8004110 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039cc:	0499      	lsls	r1, r3, #18
 80039ce:	d51b      	bpl.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch(PeriphClkInit->Spi45ClockSelection)
 80039d0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80039d2:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80039d6:	f000 8326 	beq.w	8004026 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
 80039da:	f200 844a 	bhi.w	8004272 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80039de:	b142      	cbz	r2, 80039f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80039e0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80039e4:	f040 8451 	bne.w	800428a <HAL_RCCEx_PeriphCLKConfig+0xa06>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039e8:	2101      	movs	r1, #1
 80039ea:	1d20      	adds	r0, r4, #4
 80039ec:	f7ff fe52 	bl	8003694 <RCCEx_PLL2_Config>
 80039f0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80039f2:	2d00      	cmp	r5, #0
 80039f4:	f040 827d 	bne.w	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80039f8:	4a4b      	ldr	r2, [pc, #300]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80039fa:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80039fc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80039fe:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003a02:	430b      	orrs	r3, r1
 8003a04:	6513      	str	r3, [r2, #80]	; 0x50
 8003a06:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a08:	045a      	lsls	r2, r3, #17
 8003a0a:	d51d      	bpl.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    switch(PeriphClkInit->Spi6ClockSelection)
 8003a0c:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8003a10:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8003a14:	f000 82d9 	beq.w	8003fca <HAL_RCCEx_PeriphCLKConfig+0x746>
 8003a18:	f200 83ef 	bhi.w	80041fa <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003a1c:	b142      	cbz	r2, 8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8003a1e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8003a22:	f040 83f6 	bne.w	8004212 <HAL_RCCEx_PeriphCLKConfig+0x98e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a26:	2101      	movs	r1, #1
 8003a28:	1d20      	adds	r0, r4, #4
 8003a2a:	f7ff fe33 	bl	8003694 <RCCEx_PLL2_Config>
 8003a2e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003a30:	2d00      	cmp	r5, #0
 8003a32:	f040 825b 	bne.w	8003eec <HAL_RCCEx_PeriphCLKConfig+0x668>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a36:	4a3c      	ldr	r2, [pc, #240]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003a38:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8003a3c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003a3e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8003a42:	430b      	orrs	r3, r1
 8003a44:	6593      	str	r3, [r2, #88]	; 0x58
 8003a46:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a48:	041f      	lsls	r7, r3, #16
 8003a4a:	d50d      	bpl.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->FdcanClockSelection)
 8003a4c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003a4e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8003a52:	f000 82f2 	beq.w	800403a <HAL_RCCEx_PeriphCLKConfig+0x7b6>
 8003a56:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8003a5a:	f000 81f7 	beq.w	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003a5e:	2a00      	cmp	r2, #0
 8003a60:	f000 81f9 	beq.w	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      ret = HAL_ERROR;
 8003a64:	2601      	movs	r6, #1
 8003a66:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a68:	01d8      	lsls	r0, r3, #7
 8003a6a:	d50a      	bpl.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    switch(PeriphClkInit->FmcClockSelection)
 8003a6c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003a6e:	2a03      	cmp	r2, #3
 8003a70:	d805      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003a72:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003a76:	0181      	.short	0x0181
 8003a78:	017c026b 	.word	0x017c026b
 8003a7c:	0181      	.short	0x0181
      ret = HAL_ERROR;
 8003a7e:	2601      	movs	r6, #1
 8003a80:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a82:	0259      	lsls	r1, r3, #9
 8003a84:	f100 8186 	bmi.w	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x510>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003a88:	07df      	lsls	r7, r3, #31
 8003a8a:	d52f      	bpl.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Usart16ClockSelection)
 8003a8c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8003a8e:	2a28      	cmp	r2, #40	; 0x28
 8003a90:	d82a      	bhi.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003a92:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003a96:	01cb      	.short	0x01cb
 8003a98:	00290029 	.word	0x00290029
 8003a9c:	00290029 	.word	0x00290029
 8003aa0:	00290029 	.word	0x00290029
 8003aa4:	02760029 	.word	0x02760029
 8003aa8:	00290029 	.word	0x00290029
 8003aac:	00290029 	.word	0x00290029
 8003ab0:	00290029 	.word	0x00290029
 8003ab4:	01c50029 	.word	0x01c50029
 8003ab8:	00290029 	.word	0x00290029
 8003abc:	00290029 	.word	0x00290029
 8003ac0:	00290029 	.word	0x00290029
 8003ac4:	01cb0029 	.word	0x01cb0029
 8003ac8:	00290029 	.word	0x00290029
 8003acc:	00290029 	.word	0x00290029
 8003ad0:	00290029 	.word	0x00290029
 8003ad4:	01cb0029 	.word	0x01cb0029
 8003ad8:	00290029 	.word	0x00290029
 8003adc:	00290029 	.word	0x00290029
 8003ae0:	00290029 	.word	0x00290029
 8003ae4:	01cb0029 	.word	0x01cb0029
      ret = HAL_ERROR;
 8003ae8:	2601      	movs	r6, #1
 8003aea:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003aec:	0798      	lsls	r0, r3, #30
 8003aee:	d50c      	bpl.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x286>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003af0:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8003af2:	2a05      	cmp	r2, #5
 8003af4:	d807      	bhi.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8003af6:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003afa:	012e      	.short	0x012e
 8003afc:	0128023b 	.word	0x0128023b
 8003b00:	012e012e 	.word	0x012e012e
 8003b04:	012e      	.short	0x012e
      ret = HAL_ERROR;
 8003b06:	2601      	movs	r6, #1
 8003b08:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b0a:	0759      	lsls	r1, r3, #29
 8003b0c:	d510      	bpl.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003b0e:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003b12:	2a05      	cmp	r2, #5
 8003b14:	d80a      	bhi.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b16:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003b1a:	010b      	.short	0x010b
 8003b1c:	01050222 	.word	0x01050222
 8003b20:	010b010b 	.word	0x010b010b
 8003b24:	010b      	.short	0x010b
 8003b26:	bf00      	nop
 8003b28:	58024400 	.word	0x58024400
      ret = HAL_ERROR;
 8003b2c:	2601      	movs	r6, #1
 8003b2e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b30:	069a      	lsls	r2, r3, #26
 8003b32:	d51d      	bpl.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003b34:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003b38:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8003b3c:	f000 8259 	beq.w	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x76e>
 8003b40:	f200 8379 	bhi.w	8004236 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8003b44:	b142      	cbz	r2, 8003b58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003b46:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8003b4a:	f040 8380 	bne.w	800424e <HAL_RCCEx_PeriphCLKConfig+0x9ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b4e:	2100      	movs	r1, #0
 8003b50:	1d20      	adds	r0, r4, #4
 8003b52:	f7ff fd9f 	bl	8003694 <RCCEx_PLL2_Config>
 8003b56:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003b58:	2d00      	cmp	r5, #0
 8003b5a:	f040 81c4 	bne.w	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x662>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b5e:	4ab9      	ldr	r2, [pc, #740]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003b60:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003b64:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003b66:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8003b6a:	430b      	orrs	r3, r1
 8003b6c:	6553      	str	r3, [r2, #84]	; 0x54
 8003b6e:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003b70:	065f      	lsls	r7, r3, #25
 8003b72:	d51d      	bpl.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003b74:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8003b78:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003b7c:	f000 8249 	beq.w	8004012 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8003b80:	f200 8368 	bhi.w	8004254 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003b84:	b142      	cbz	r2, 8003b98 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003b86:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003b8a:	f040 836f 	bne.w	800426c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b8e:	2100      	movs	r1, #0
 8003b90:	1d20      	adds	r0, r4, #4
 8003b92:	f7ff fd7f 	bl	8003694 <RCCEx_PLL2_Config>
 8003b96:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003b98:	2d00      	cmp	r5, #0
 8003b9a:	f040 81b0 	bne.w	8003efe <HAL_RCCEx_PeriphCLKConfig+0x67a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b9e:	4aa9      	ldr	r2, [pc, #676]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003ba0:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8003ba4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003ba6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003baa:	430b      	orrs	r3, r1
 8003bac:	6593      	str	r3, [r2, #88]	; 0x58
 8003bae:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003bb0:	0618      	lsls	r0, r3, #24
 8003bb2:	d51d      	bpl.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003bb4:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8003bb8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003bbc:	f000 81fb 	beq.w	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x732>
 8003bc0:	f200 832a 	bhi.w	8004218 <HAL_RCCEx_PeriphCLKConfig+0x994>
 8003bc4:	b142      	cbz	r2, 8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003bc6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003bca:	f040 8331 	bne.w	8004230 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bce:	2100      	movs	r1, #0
 8003bd0:	1d20      	adds	r0, r4, #4
 8003bd2:	f7ff fd5f 	bl	8003694 <RCCEx_PLL2_Config>
 8003bd6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003bd8:	2d00      	cmp	r5, #0
 8003bda:	f040 8193 	bne.w	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x680>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003bde:	4a99      	ldr	r2, [pc, #612]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003be0:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8003be4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003be6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003bea:	430b      	orrs	r3, r1
 8003bec:	6593      	str	r3, [r2, #88]	; 0x58
 8003bee:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003bf0:	0719      	lsls	r1, r3, #28
 8003bf2:	d50c      	bpl.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x38a>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003bf4:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8003bf8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003bfc:	f000 8254 	beq.w	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x824>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003c00:	4990      	ldr	r1, [pc, #576]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003c02:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8003c04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	654b      	str	r3, [r1, #84]	; 0x54
 8003c0c:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c0e:	06da      	lsls	r2, r3, #27
 8003c10:	d50c      	bpl.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003c12:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8003c16:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003c1a:	f000 8251 	beq.w	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c1e:	4989      	ldr	r1, [pc, #548]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003c20:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8003c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c26:	4313      	orrs	r3, r2
 8003c28:	658b      	str	r3, [r1, #88]	; 0x58
 8003c2a:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c2c:	031f      	lsls	r7, r3, #12
 8003c2e:	d50e      	bpl.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
    switch(PeriphClkInit->AdcClockSelection)
 8003c30:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8003c34:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8003c38:	f000 8118 	beq.w	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 8003c3c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8003c40:	f000 811a 	beq.w	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8003c44:	2900      	cmp	r1, #0
 8003c46:	f000 82c3 	beq.w	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x94c>
      ret = HAL_ERROR;
 8003c4a:	2601      	movs	r6, #1
 8003c4c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c4e:	0358      	lsls	r0, r3, #13
 8003c50:	d50f      	bpl.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    switch(PeriphClkInit->UsbClockSelection)
 8003c52:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003c56:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8003c5a:	f000 8119 	beq.w	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8003c5e:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8003c62:	f000 811b 	beq.w	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x618>
 8003c66:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003c6a:	f000 82b9 	beq.w	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      ret = HAL_ERROR;
 8003c6e:	2601      	movs	r6, #1
 8003c70:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003c72:	03d9      	lsls	r1, r3, #15
 8003c74:	d511      	bpl.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch(PeriphClkInit->SdmmcClockSelection)
 8003c76:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8003c78:	2a00      	cmp	r2, #0
 8003c7a:	f000 8156 	beq.w	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8003c7e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003c82:	f040 8145 	bne.w	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x68c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c86:	2102      	movs	r1, #2
 8003c88:	1d20      	adds	r0, r4, #4
 8003c8a:	f7ff fd03 	bl	8003694 <RCCEx_PLL2_Config>
 8003c8e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003c90:	2d00      	cmp	r5, #0
 8003c92:	f000 8152 	beq.w	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c9a:	009a      	lsls	r2, r3, #2
 8003c9c:	f100 8109 	bmi.w	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003ca0:	039f      	lsls	r7, r3, #14
 8003ca2:	d42e      	bmi.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003ca4:	1c30      	adds	r0, r6, #0
 8003ca6:	bf18      	it	ne
 8003ca8:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003caa:	02dd      	lsls	r5, r3, #11
 8003cac:	d507      	bpl.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003cae:	4a65      	ldr	r2, [pc, #404]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003cb0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003cb2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003cb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	6513      	str	r3, [r2, #80]	; 0x50
 8003cbc:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cbe:	0299      	lsls	r1, r3, #10
 8003cc0:	d507      	bpl.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cc2:	4a60      	ldr	r2, [pc, #384]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003cc4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003cc6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003cc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	6513      	str	r3, [r2, #80]	; 0x50
 8003cd0:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003cd2:	005a      	lsls	r2, r3, #1
 8003cd4:	d50a      	bpl.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x468>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cd6:	4b5b      	ldr	r3, [pc, #364]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003cd8:	691a      	ldr	r2, [r3, #16]
 8003cda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cde:	611a      	str	r2, [r3, #16]
 8003ce0:	691a      	ldr	r2, [r3, #16]
 8003ce2:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	611a      	str	r2, [r3, #16]
 8003cea:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	da06      	bge.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x47a>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003cf0:	4a54      	ldr	r2, [pc, #336]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003cf2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003cf4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003cf6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8003cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 8003d02:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8003d04:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003d08:	f000 8105 	beq.w	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x692>
 8003d0c:	f240 8142 	bls.w	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x710>
 8003d10:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003d14:	f000 8104 	beq.w	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 8003d18:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003d1c:	f000 8100 	beq.w	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 8003d20:	2001      	movs	r0, #1
 8003d22:	e7c2      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x426>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d24:	2101      	movs	r1, #1
 8003d26:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003d2a:	f7ff fd2f 	bl	800378c <RCCEx_PLL3_Config>
 8003d2e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003d30:	2d00      	cmp	r5, #0
 8003d32:	f040 80d5 	bne.w	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d36:	4a43      	ldr	r2, [pc, #268]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003d38:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8003d3c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003d3e:	f023 0307 	bic.w	r3, r3, #7
 8003d42:	430b      	orrs	r3, r1
 8003d44:	6593      	str	r3, [r2, #88]	; 0x58
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	e6f2      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003d50:	f7ff fd1c 	bl	800378c <RCCEx_PLL3_Config>
 8003d54:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003d56:	2d00      	cmp	r5, #0
 8003d58:	f040 80bf 	bne.w	8003eda <HAL_RCCEx_PeriphCLKConfig+0x656>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d5c:	4a39      	ldr	r2, [pc, #228]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003d5e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003d60:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003d62:	f023 0307 	bic.w	r3, r3, #7
 8003d66:	430b      	orrs	r3, r1
 8003d68:	6553      	str	r3, [r2, #84]	; 0x54
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	e6cd      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x286>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d6e:	2102      	movs	r1, #2
 8003d70:	1d20      	adds	r0, r4, #4
 8003d72:	f7ff fc8f 	bl	8003694 <RCCEx_PLL2_Config>
 8003d76:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003d78:	2d00      	cmp	r5, #0
 8003d7a:	f040 80ab 	bne.w	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d7e:	4a31      	ldr	r2, [pc, #196]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003d80:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003d82:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003d84:	f023 0303 	bic.w	r3, r3, #3
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d8c:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d8e:	0259      	lsls	r1, r3, #9
 8003d90:	f57f ae7a 	bpl.w	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x204>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d94:	4b2c      	ldr	r3, [pc, #176]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d96:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d98:	461f      	mov	r7, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d9e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003da0:	f7fc fafe 	bl	80003a0 <HAL_GetTick>
 8003da4:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003da6:	e006      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x532>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003da8:	f7fc fafa 	bl	80003a0 <HAL_GetTick>
 8003dac:	eba0 0008 	sub.w	r0, r0, r8
 8003db0:	2864      	cmp	r0, #100	; 0x64
 8003db2:	f200 821e 	bhi.w	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	05da      	lsls	r2, r3, #23
 8003dba:	d5f5      	bpl.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    if(ret == HAL_OK)
 8003dbc:	2d00      	cmp	r5, #0
 8003dbe:	f040 82c6 	bne.w	800434e <HAL_RCCEx_PeriphCLKConfig+0xaca>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003dc2:	4b20      	ldr	r3, [pc, #128]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003dc4:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8003dc8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003dca:	4051      	eors	r1, r2
 8003dcc:	f411 7f40 	tst.w	r1, #768	; 0x300
 8003dd0:	d00d      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x56a>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dd4:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dd6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dda:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003dde:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003de0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003de2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003de6:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8003de8:	671a      	str	r2, [r3, #112]	; 0x70
 8003dea:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003dee:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003df2:	f000 828e 	beq.w	8004312 <HAL_RCCEx_PeriphCLKConfig+0xa8e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003df6:	f402 7340 	and.w	r3, r2, #768	; 0x300
 8003dfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dfe:	f000 829c 	beq.w	800433a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003e02:	4a10      	ldr	r2, [pc, #64]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003e04:	6913      	ldr	r3, [r2, #16]
 8003e06:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e0a:	6113      	str	r3, [r2, #16]
 8003e0c:	4a0d      	ldr	r2, [pc, #52]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003e0e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8003e12:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	e633      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x204>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e20:	2101      	movs	r1, #1
 8003e22:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003e26:	f7ff fcb1 	bl	800378c <RCCEx_PLL3_Config>
 8003e2a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003e2c:	2d00      	cmp	r5, #0
 8003e2e:	d14e      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x64a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e30:	4a04      	ldr	r2, [pc, #16]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003e32:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003e34:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003e36:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003e3a:	430b      	orrs	r3, r1
 8003e3c:	6553      	str	r3, [r2, #84]	; 0x54
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	e654      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x268>
 8003e42:	bf00      	nop
 8003e44:	58024400 	.word	0x58024400
 8003e48:	58024800 	.word	0x58024800
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	1d20      	adds	r0, r4, #4
 8003e50:	f7ff fc20 	bl	8003694 <RCCEx_PLL2_Config>
 8003e54:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003e56:	2d00      	cmp	r5, #0
 8003e58:	d14e      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x674>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e5a:	4ab2      	ldr	r2, [pc, #712]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8003e5c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003e5e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003e60:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003e64:	430b      	orrs	r3, r1
 8003e66:	6513      	str	r3, [r2, #80]	; 0x50
 8003e68:	6823      	ldr	r3, [r4, #0]
 8003e6a:	e5fd      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e6c:	2102      	movs	r1, #2
 8003e6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003e72:	f7ff fc8b 	bl	800378c <RCCEx_PLL3_Config>
 8003e76:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003e78:	2d00      	cmp	r5, #0
 8003e7a:	d146      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x686>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e7c:	4aa9      	ldr	r2, [pc, #676]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8003e7e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8003e82:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003e84:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003e88:	430b      	orrs	r3, r1
 8003e8a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e8c:	6823      	ldr	r3, [r4, #0]
 8003e8e:	e6de      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e90:	2101      	movs	r1, #1
 8003e92:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003e96:	f7ff fc79 	bl	800378c <RCCEx_PLL3_Config>
 8003e9a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003e9c:	b9a5      	cbnz	r5, 8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x644>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e9e:	4aa1      	ldr	r2, [pc, #644]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8003ea0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8003ea4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003ea6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003eaa:	430b      	orrs	r3, r1
 8003eac:	6553      	str	r3, [r2, #84]	; 0x54
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	e6df      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003eb2:	2102      	movs	r1, #2
 8003eb4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003eb8:	f7ff fc68 	bl	800378c <RCCEx_PLL3_Config>
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	2800      	cmp	r0, #0
 8003ec0:	f43f aeee 	beq.w	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      status=HAL_ERROR;
 8003ec4:	2601      	movs	r6, #1
 8003ec6:	e6eb      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003ec8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003eca:	462e      	mov	r6, r5
 8003ecc:	e6d1      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 8003ece:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003ed0:	462e      	mov	r6, r5
 8003ed2:	e60b      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x268>
 8003ed4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003ed6:	462e      	mov	r6, r5
 8003ed8:	e5d3      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003eda:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003edc:	462e      	mov	r6, r5
 8003ede:	e614      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003ee0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003ee2:	462e      	mov	r6, r5
 8003ee4:	e624      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003ee6:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003ee8:	462e      	mov	r6, r5
 8003eea:	e641      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 8003eec:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003eee:	462e      	mov	r6, r5
 8003ef0:	e5aa      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8003ef2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003ef4:	462e      	mov	r6, r5
 8003ef6:	e587      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8003ef8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003efa:	462e      	mov	r6, r5
 8003efc:	e5b4      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003efe:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003f00:	462e      	mov	r6, r5
 8003f02:	e655      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8003f04:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003f06:	462e      	mov	r6, r5
 8003f08:	e672      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8003f0a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003f0c:	462e      	mov	r6, r5
 8003f0e:	e69e      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      ret = HAL_ERROR;
 8003f10:	2601      	movs	r6, #1
 8003f12:	4635      	mov	r5, r6
 8003f14:	e6c1      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x416>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f16:	4a83      	ldr	r2, [pc, #524]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8003f18:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f1e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003f20:	2d00      	cmp	r5, #0
 8003f22:	d03c      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x71a>
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	2001      	movs	r0, #1
 8003f28:	e6bf      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x426>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f2a:	4a7e      	ldr	r2, [pc, #504]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8003f2c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f32:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003f34:	2d00      	cmp	r5, #0
 8003f36:	f47f aeae 	bne.w	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x412>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003f3a:	4a7a      	ldr	r2, [pc, #488]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8003f3c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003f3e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003f40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f44:	430b      	orrs	r3, r1
 8003f46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	e6a6      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x416>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f4c:	4a75      	ldr	r2, [pc, #468]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8003f4e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f54:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003f56:	2d00      	cmp	r5, #0
 8003f58:	f43f af11 	beq.w	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003f5c:	e7ba      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f5e:	2101      	movs	r1, #1
 8003f60:	1d20      	adds	r0, r4, #4
 8003f62:	f7ff fb97 	bl	8003694 <RCCEx_PLL2_Config>
 8003f66:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f68:	2d00      	cmp	r5, #0
 8003f6a:	f43f aee4 	beq.w	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003f6e:	e7b7      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f70:	2101      	movs	r1, #1
 8003f72:	1d20      	adds	r0, r4, #4
 8003f74:	f7ff fb8e 	bl	8003694 <RCCEx_PLL2_Config>
 8003f78:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f7a:	2d00      	cmp	r5, #0
 8003f7c:	f43f aeee 	beq.w	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8003f80:	e7ab      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x656>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f82:	2101      	movs	r1, #1
 8003f84:	1d20      	adds	r0, r4, #4
 8003f86:	f7ff fb85 	bl	8003694 <RCCEx_PLL2_Config>
 8003f8a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f8c:	2d00      	cmp	r5, #0
 8003f8e:	f43f af4f 	beq.w	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003f92:	e79c      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x64a>
    switch(PeriphClkInit->RngClockSelection)
 8003f94:	2a00      	cmp	r2, #0
 8003f96:	f47f aec3 	bne.w	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x49c>
    if(ret == HAL_OK)
 8003f9a:	2d00      	cmp	r5, #0
 8003f9c:	d1c2      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f9e:	4a61      	ldr	r2, [pc, #388]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8003fa0:	1c30      	adds	r0, r6, #0
 8003fa2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003fa4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003fa6:	bf18      	it	ne
 8003fa8:	2001      	movne	r0, #1
 8003faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fae:	430b      	orrs	r3, r1
 8003fb0:	6553      	str	r3, [r2, #84]	; 0x54
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	e679      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x426>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fb6:	2102      	movs	r1, #2
 8003fb8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003fbc:	f7ff fbe6 	bl	800378c <RCCEx_PLL3_Config>
 8003fc0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003fc2:	2d00      	cmp	r5, #0
 8003fc4:	f43f ae0b 	beq.w	8003bde <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003fc8:	e79c      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x680>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fca:	2101      	movs	r1, #1
 8003fcc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003fd0:	f7ff fbdc 	bl	800378c <RCCEx_PLL3_Config>
 8003fd4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003fd6:	2d00      	cmp	r5, #0
 8003fd8:	f43f ad2d 	beq.w	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003fdc:	e786      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x668>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fde:	4a51      	ldr	r2, [pc, #324]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8003fe0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fe6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003fe8:	2d00      	cmp	r5, #0
 8003fea:	d036      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x7d6>
 8003fec:	6823      	ldr	r3, [r4, #0]
 8003fee:	462e      	mov	r6, r5
 8003ff0:	e4d2      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x114>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ff2:	2102      	movs	r1, #2
 8003ff4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003ff8:	f7ff fbc8 	bl	800378c <RCCEx_PLL3_Config>
 8003ffc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003ffe:	2d00      	cmp	r5, #0
 8004000:	f43f adad 	beq.w	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004004:	e76f      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x662>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004006:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8004008:	2d00      	cmp	r5, #0
 800400a:	d037      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x7f8>
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	462e      	mov	r6, r5
 8004010:	e464      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x58>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004012:	2102      	movs	r1, #2
 8004014:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004018:	f7ff fbb8 	bl	800378c <RCCEx_PLL3_Config>
 800401c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800401e:	2d00      	cmp	r5, #0
 8004020:	f43f adbd 	beq.w	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8004024:	e76b      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x67a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004026:	2101      	movs	r1, #1
 8004028:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800402c:	f7ff fbae 	bl	800378c <RCCEx_PLL3_Config>
 8004030:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004032:	2d00      	cmp	r5, #0
 8004034:	f43f ace0 	beq.w	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8004038:	e75b      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800403a:	4a3a      	ldr	r2, [pc, #232]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 800403c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800403e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004042:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004044:	2d00      	cmp	r5, #0
 8004046:	f43f af08 	beq.w	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 800404a:	e755      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x674>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800404c:	2102      	movs	r1, #2
 800404e:	1d20      	adds	r0, r4, #4
 8004050:	f7ff fb20 	bl	8003694 <RCCEx_PLL2_Config>
 8004054:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004056:	2d00      	cmp	r5, #0
 8004058:	d1c8      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x768>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800405a:	4a32      	ldr	r2, [pc, #200]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 800405c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800405e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004060:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004064:	430b      	orrs	r3, r1
 8004066:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004068:	6823      	ldr	r3, [r4, #0]
 800406a:	e495      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x114>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800406c:	2100      	movs	r1, #0
 800406e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004072:	f7ff fb8b 	bl	800378c <RCCEx_PLL3_Config>
 8004076:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004078:	2d00      	cmp	r5, #0
 800407a:	d1c7      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x788>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800407c:	4a29      	ldr	r2, [pc, #164]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 800407e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004080:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004082:	f023 0307 	bic.w	r3, r3, #7
 8004086:	430b      	orrs	r3, r1
 8004088:	6513      	str	r3, [r2, #80]	; 0x50
 800408a:	6823      	ldr	r3, [r4, #0]
 800408c:	e426      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800408e:	4a25      	ldr	r2, [pc, #148]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
      break;
 8004090:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004092:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004098:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800409a:	e7b5      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x784>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800409c:	2100      	movs	r1, #0
 800409e:	1d20      	adds	r0, r4, #4
 80040a0:	f7ff faf8 	bl	8003694 <RCCEx_PLL2_Config>
 80040a4:	4605      	mov	r5, r0
      break;
 80040a6:	e7af      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x784>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80040a8:	2102      	movs	r1, #2
 80040aa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80040ae:	f7ff fb6d 	bl	800378c <RCCEx_PLL3_Config>
 80040b2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80040b6:	2800      	cmp	r0, #0
 80040b8:	f43f ada2 	beq.w	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x37c>
          status = HAL_ERROR;
 80040bc:	2601      	movs	r6, #1
 80040be:	e59f      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80040c0:	2102      	movs	r1, #2
 80040c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80040c6:	f7ff fb61 	bl	800378c <RCCEx_PLL3_Config>
 80040ca:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 80040ce:	2800      	cmp	r0, #0
 80040d0:	f43f ada5 	beq.w	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x39a>
        status = HAL_ERROR;
 80040d4:	2601      	movs	r6, #1
 80040d6:	e5a2      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x39a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040d8:	2100      	movs	r1, #0
 80040da:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80040de:	f7ff fb55 	bl	800378c <RCCEx_PLL3_Config>
 80040e2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80040e4:	2d00      	cmp	r5, #0
 80040e6:	f47f ac45 	bne.w	8003974 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80040ea:	4a0e      	ldr	r2, [pc, #56]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 80040ec:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 80040f0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80040f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80040f6:	430b      	orrs	r3, r1
 80040f8:	6593      	str	r3, [r2, #88]	; 0x58
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	e43c      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80040fe:	2100      	movs	r1, #0
 8004100:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004104:	f7ff fb42 	bl	800378c <RCCEx_PLL3_Config>
 8004108:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800410a:	2d00      	cmp	r5, #0
 800410c:	f47f ac5c 	bne.w	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004110:	4a04      	ldr	r2, [pc, #16]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8004112:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004114:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800411a:	430b      	orrs	r3, r1
 800411c:	6513      	str	r3, [r2, #80]	; 0x50
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	e454      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x148>
 8004122:	bf00      	nop
 8004124:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004128:	2102      	movs	r1, #2
 800412a:	3004      	adds	r0, #4
 800412c:	f7ff fab2 	bl	8003694 <RCCEx_PLL2_Config>
 8004130:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004132:	2e00      	cmp	r6, #0
 8004134:	f47f abc3 	bne.w	80038be <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8004138:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800413a:	f7ff bbb9 	b.w	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800413e:	2100      	movs	r1, #0
 8004140:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004144:	f7ff fb22 	bl	800378c <RCCEx_PLL3_Config>
 8004148:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800414a:	2d00      	cmp	r5, #0
 800414c:	f47f abf7 	bne.w	800393e <HAL_RCCEx_PeriphCLKConfig+0xba>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004150:	4a81      	ldr	r2, [pc, #516]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004152:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8004156:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004158:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800415c:	430b      	orrs	r3, r1
 800415e:	6593      	str	r3, [r2, #88]	; 0x58
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	f7ff bbee 	b.w	8003942 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004166:	2100      	movs	r1, #0
 8004168:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800416c:	f7ff fb0e 	bl	800378c <RCCEx_PLL3_Config>
 8004170:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004172:	2d00      	cmp	r5, #0
 8004174:	f47f abc8 	bne.w	8003908 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004178:	4a77      	ldr	r2, [pc, #476]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800417a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800417c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800417e:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8004182:	430b      	orrs	r3, r1
 8004184:	6513      	str	r3, [r2, #80]	; 0x50
 8004186:	6823      	ldr	r3, [r4, #0]
 8004188:	f7ff bbc0 	b.w	800390c <HAL_RCCEx_PeriphCLKConfig+0x88>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800418c:	4a72      	ldr	r2, [pc, #456]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800418e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004194:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004196:	f7ff bbb4 	b.w	8003902 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800419a:	4a6f      	ldr	r2, [pc, #444]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800419c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800419e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041a2:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80041a4:	f7ff bbe3 	b.w	800396e <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041a8:	2102      	movs	r1, #2
 80041aa:	3024      	adds	r0, #36	; 0x24
 80041ac:	f7ff faee 	bl	800378c <RCCEx_PLL3_Config>
 80041b0:	4606      	mov	r6, r0
      break;
 80041b2:	e7be      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b4:	4a68      	ldr	r2, [pc, #416]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80041b6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80041b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041bc:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80041be:	f7ff bbbb 	b.w	8003938 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041c2:	4a65      	ldr	r2, [pc, #404]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80041c4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80041c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ca:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80041cc:	f7ff bbf9 	b.w	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041d0:	1d20      	adds	r0, r4, #4
 80041d2:	f7ff fa5f 	bl	8003694 <RCCEx_PLL2_Config>
 80041d6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80041d8:	2d00      	cmp	r5, #0
 80041da:	f43f ae4f 	beq.w	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 80041de:	e694      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x686>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e0:	4a5d      	ldr	r2, [pc, #372]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80041e2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80041e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80041ea:	2d00      	cmp	r5, #0
 80041ec:	f43f ae57 	beq.w	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x61a>
 80041f0:	e66a      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x644>
            ret = HAL_TIMEOUT;
 80041f2:	2603      	movs	r6, #3
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	4635      	mov	r5, r6
 80041f8:	e446      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x204>
    switch(PeriphClkInit->Spi6ClockSelection)
 80041fa:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80041fe:	f43f ac17 	beq.w	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8004202:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004206:	f43f ac13 	beq.w	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800420a:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800420e:	f43f ac0f 	beq.w	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
      ret = HAL_ERROR;
 8004212:	2601      	movs	r6, #1
 8004214:	4635      	mov	r5, r6
 8004216:	e417      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004218:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800421c:	f43f acdc 	beq.w	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004220:	f5b2 4f20 	cmp.w	r2, #40960	; 0xa000
 8004224:	f43f acd8 	beq.w	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004228:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 800422c:	f43f acd4 	beq.w	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      ret = HAL_ERROR;
 8004230:	2601      	movs	r6, #1
 8004232:	4635      	mov	r5, r6
 8004234:	e4dc      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004236:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800423a:	f43f ac8d 	beq.w	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800423e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004242:	f43f ac89 	beq.w	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004246:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800424a:	f43f ac85 	beq.w	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      ret = HAL_ERROR;
 800424e:	2601      	movs	r6, #1
 8004250:	4635      	mov	r5, r6
 8004252:	e48d      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004254:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004258:	f43f ac9e 	beq.w	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800425c:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8004260:	f43f ac9a 	beq.w	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004264:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8004268:	f43f ac96 	beq.w	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = HAL_ERROR;
 800426c:	2601      	movs	r6, #1
 800426e:	4635      	mov	r5, r6
 8004270:	e49e      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Spi45ClockSelection)
 8004272:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8004276:	f43f abbc 	beq.w	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800427a:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800427e:	f43f abb8 	beq.w	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004282:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8004286:	f43f abb4 	beq.w	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
      ret = HAL_ERROR;
 800428a:	2601      	movs	r6, #1
 800428c:	4635      	mov	r5, r6
 800428e:	f7ff bbbb 	b.w	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch(PeriphClkInit->Sai23ClockSelection)
 8004292:	2ac0      	cmp	r2, #192	; 0xc0
 8004294:	f43f ab35 	beq.w	8003902 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8004298:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800429c:	f43f ab31 	beq.w	8003902 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      ret = HAL_ERROR;
 80042a0:	2601      	movs	r6, #1
 80042a2:	4635      	mov	r5, r6
 80042a4:	f7ff bb32 	b.w	800390c <HAL_RCCEx_PeriphCLKConfig+0x88>
    switch(PeriphClkInit->Spi123ClockSelection)
 80042a8:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80042ac:	f43f ab89 	beq.w	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80042b0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80042b4:	f43f ab85 	beq.w	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = HAL_ERROR;
 80042b8:	2601      	movs	r6, #1
 80042ba:	4635      	mov	r5, r6
 80042bc:	f7ff bb86 	b.w	80039cc <HAL_RCCEx_PeriphCLKConfig+0x148>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80042c0:	bb22      	cbnz	r2, 800430c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042c2:	4a25      	ldr	r2, [pc, #148]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80042c4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80042c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042cc:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80042ce:	f7ff baef 	b.w	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai4BClockSelection)
 80042d2:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 80042d6:	f43f ab4a 	beq.w	800396e <HAL_RCCEx_PeriphCLKConfig+0xea>
 80042da:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 80042de:	f43f ab46 	beq.w	800396e <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = HAL_ERROR;
 80042e2:	2601      	movs	r6, #1
 80042e4:	4635      	mov	r5, r6
 80042e6:	f7ff bb47 	b.w	8003978 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4AClockSelection)
 80042ea:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 80042ee:	f43f ab23 	beq.w	8003938 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80042f2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80042f6:	f43f ab1f 	beq.w	8003938 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = HAL_ERROR;
 80042fa:	2601      	movs	r6, #1
 80042fc:	4635      	mov	r5, r6
 80042fe:	f7ff bb20 	b.w	8003942 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    switch(PeriphClkInit->QspiClockSelection)
 8004302:	2a00      	cmp	r2, #0
 8004304:	f43f ae70 	beq.w	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8004308:	f7ff bb44 	b.w	8003994 <HAL_RCCEx_PeriphCLKConfig+0x110>
      ret = HAL_ERROR;
 800430c:	2601      	movs	r6, #1
 800430e:	f7ff bad7 	b.w	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        tickstart = HAL_GetTick();
 8004312:	f7fc f845 	bl	80003a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004316:	4f10      	ldr	r7, [pc, #64]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
        tickstart = HAL_GetTick();
 8004318:	4681      	mov	r9, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800431a:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800431e:	e006      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004320:	f7fc f83e 	bl	80003a0 <HAL_GetTick>
 8004324:	eba0 0009 	sub.w	r0, r0, r9
 8004328:	4540      	cmp	r0, r8
 800432a:	f63f af62 	bhi.w	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800432e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004330:	079b      	lsls	r3, r3, #30
 8004332:	d5f5      	bpl.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xa9c>
 8004334:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8004338:	e55d      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x572>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800433a:	4807      	ldr	r0, [pc, #28]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800433c:	4b07      	ldr	r3, [pc, #28]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0xad8>)
 800433e:	6901      	ldr	r1, [r0, #16]
 8004340:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 8004344:	f421 527c 	bic.w	r2, r1, #16128	; 0x3f00
 8004348:	4313      	orrs	r3, r2
 800434a:	6103      	str	r3, [r0, #16]
 800434c:	e55e      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x588>
 800434e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004350:	462e      	mov	r6, r5
 8004352:	f7ff bb99 	b.w	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004356:	bf00      	nop
 8004358:	58024400 	.word	0x58024400
 800435c:	00ffffcf 	.word	0x00ffffcf

08004360 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004360:	4a46      	ldr	r2, [pc, #280]	; (800447c <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
{
 8004362:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004364:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004366:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004368:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800436a:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800436e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8004370:	2b00      	cmp	r3, #0
 8004372:	d059      	beq.n	8004428 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004374:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004378:	f3c1 1100 	ubfx	r1, r1, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800437c:	f004 0403 	and.w	r4, r4, #3
 8004380:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004384:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8004388:	2c01      	cmp	r4, #1
 800438a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800438e:	ee06 1a90 	vmov	s13, r1
 8004392:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8004396:	d002      	beq.n	800439e <HAL_RCCEx_GetPLL2ClockFreq+0x3e>
 8004398:	d34e      	bcc.n	8004438 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 800439a:	2c02      	cmp	r4, #2
 800439c:	d049      	beq.n	8004432 <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800439e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x120>
 80043a2:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80043a6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80043a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ac:	ee07 3a10 	vmov	s14, r3
 80043b0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80043b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80043b8:	ee37 7a25 	vadd.f32	s14, s14, s11
 80043bc:	ee77 7a26 	vadd.f32	s15, s14, s13
 80043c0:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80043c4:	4a2d      	ldr	r2, [pc, #180]	; (800447c <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
 80043c6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80043ca:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80043cc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80043d0:	ee06 3a90 	vmov	s13, r3
 80043d4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 80043d8:	bc30      	pop	{r4, r5}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80043da:	ee76 6a86 	vadd.f32	s13, s13, s12
 80043de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80043e2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80043e6:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80043ea:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80043ec:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80043f0:	ee06 3a90 	vmov	s13, r3
 80043f4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80043f8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80043fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004400:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004404:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004408:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800440a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800440e:	ee07 3a10 	vmov	s14, r3
 8004412:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004416:	ee37 7a06 	vadd.f32	s14, s14, s12
 800441a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800441e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004422:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8004426:	4770      	bx	lr
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004428:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800442c:	6083      	str	r3, [r0, #8]
}
 800442e:	bc30      	pop	{r4, r5}
 8004430:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004432:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004484 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8004436:	e7b4      	b.n	80043a2 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004438:	6813      	ldr	r3, [r2, #0]
 800443a:	069b      	lsls	r3, r3, #26
 800443c:	d51a      	bpl.n	8004474 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800443e:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004440:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004444:	4910      	ldr	r1, [pc, #64]	; (8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8004446:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800444a:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800444c:	40e1      	lsrs	r1, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800444e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004452:	ee07 1a10 	vmov	s14, r1
 8004456:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800445a:	ee07 3a10 	vmov	s14, r3
 800445e:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8004462:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8004466:	ee76 7a05 	vadd.f32	s15, s12, s10
 800446a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800446e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004472:	e7a7      	b.n	80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x64>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004474:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800448c <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8004478:	e793      	b.n	80043a2 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 800447a:	bf00      	nop
 800447c:	58024400 	.word	0x58024400
 8004480:	4a742400 	.word	0x4a742400
 8004484:	4bbebc20 	.word	0x4bbebc20
 8004488:	03d09000 	.word	0x03d09000
 800448c:	4c742400 	.word	0x4c742400

08004490 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004490:	4a46      	ldr	r2, [pc, #280]	; (80045ac <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
{
 8004492:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004494:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004496:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004498:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800449a:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800449e:	6c55      	ldr	r5, [r2, #68]	; 0x44
  if (pll3m != 0U)
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d059      	beq.n	8004558 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80044a4:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80044a8:	f3c1 2100 	ubfx	r1, r1, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044ac:	f004 0403 	and.w	r4, r4, #3
 80044b0:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80044b4:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 80044b8:	2c01      	cmp	r4, #1
 80044ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044be:	ee06 1a90 	vmov	s13, r1
 80044c2:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 80044c6:	d002      	beq.n	80044ce <HAL_RCCEx_GetPLL3ClockFreq+0x3e>
 80044c8:	d34e      	bcc.n	8004568 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 80044ca:	2c02      	cmp	r4, #2
 80044cc:	d049      	beq.n	8004562 <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044ce:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80045b0 <HAL_RCCEx_GetPLL3ClockFreq+0x120>
 80044d2:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80044d6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80044d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044dc:	ee07 3a10 	vmov	s14, r3
 80044e0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80044e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80044e8:	ee37 7a25 	vadd.f32	s14, s14, s11
 80044ec:	ee77 7a26 	vadd.f32	s15, s14, s13
 80044f0:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80044f4:	4a2d      	ldr	r2, [pc, #180]	; (80045ac <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
 80044f6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80044fa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80044fc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004500:	ee06 3a90 	vmov	s13, r3
 8004504:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8004508:	bc30      	pop	{r4, r5}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800450a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800450e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004512:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004516:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800451a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800451c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004520:	ee06 3a90 	vmov	s13, r3
 8004524:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004528:	ee76 6a86 	vadd.f32	s13, s13, s12
 800452c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004530:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004534:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004538:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800453a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800453e:	ee07 3a10 	vmov	s14, r3
 8004542:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004546:	ee37 7a06 	vadd.f32	s14, s14, s12
 800454a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800454e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004552:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8004556:	4770      	bx	lr
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004558:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800455c:	6083      	str	r3, [r0, #8]
}
 800455e:	bc30      	pop	{r4, r5}
 8004560:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004562:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80045b4 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8004566:	e7b4      	b.n	80044d2 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004568:	6813      	ldr	r3, [r2, #0]
 800456a:	069b      	lsls	r3, r3, #26
 800456c:	d51a      	bpl.n	80045a4 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800456e:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004570:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004574:	4910      	ldr	r1, [pc, #64]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8004576:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800457a:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800457c:	40e1      	lsrs	r1, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800457e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004582:	ee07 1a10 	vmov	s14, r1
 8004586:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800458a:	ee07 3a10 	vmov	s14, r3
 800458e:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8004592:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8004596:	ee76 7a05 	vadd.f32	s15, s12, s10
 800459a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800459e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045a2:	e7a7      	b.n	80044f4 <HAL_RCCEx_GetPLL3ClockFreq+0x64>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045a4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80045bc <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 80045a8:	e793      	b.n	80044d2 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 80045aa:	bf00      	nop
 80045ac:	58024400 	.word	0x58024400
 80045b0:	4a742400 	.word	0x4a742400
 80045b4:	4bbebc20 	.word	0x4bbebc20
 80045b8:	03d09000 	.word	0x03d09000
 80045bc:	4c742400 	.word	0x4c742400

080045c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045c0:	4a46      	ldr	r2, [pc, #280]	; (80046dc <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
{
 80045c2:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045c4:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80045c6:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80045c8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80045ca:	f3c3 1305 	ubfx	r3, r3, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80045ce:	6b55      	ldr	r5, [r2, #52]	; 0x34
  if (pll1m != 0U)
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d059      	beq.n	8004688 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80045d4:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80045d8:	f001 0101 	and.w	r1, r1, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045dc:	f004 0403 	and.w	r4, r4, #3
 80045e0:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80045e4:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 80045e8:	2c01      	cmp	r4, #1
 80045ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045ee:	ee06 1a90 	vmov	s13, r1
 80045f2:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 80045f6:	d002      	beq.n	80045fe <HAL_RCCEx_GetPLL1ClockFreq+0x3e>
 80045f8:	d34e      	bcc.n	8004698 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 80045fa:	2c02      	cmp	r4, #2
 80045fc:	d049      	beq.n	8004692 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045fe:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80046e0 <HAL_RCCEx_GetPLL1ClockFreq+0x120>
 8004602:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8004606:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800460c:	ee07 3a10 	vmov	s14, r3
 8004610:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004614:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004618:	ee37 7a25 	vadd.f32	s14, s14, s11
 800461c:	ee77 7a26 	vadd.f32	s15, s14, s13
 8004620:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8004624:	4a2d      	ldr	r2, [pc, #180]	; (80046dc <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
 8004626:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800462a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800462c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004630:	ee06 3a90 	vmov	s13, r3
 8004634:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8004638:	bc30      	pop	{r4, r5}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800463a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800463e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004642:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004646:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800464a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800464c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004650:	ee06 3a90 	vmov	s13, r3
 8004654:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004658:	ee76 6a86 	vadd.f32	s13, s13, s12
 800465c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004660:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004664:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8004668:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800466a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800466e:	ee07 3a10 	vmov	s14, r3
 8004672:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004676:	ee37 7a06 	vadd.f32	s14, s14, s12
 800467a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800467e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004682:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8004686:	4770      	bx	lr
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004688:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800468c:	6083      	str	r3, [r0, #8]
}
 800468e:	bc30      	pop	{r4, r5}
 8004690:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004692:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80046e4 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8004696:	e7b4      	b.n	8004602 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004698:	6813      	ldr	r3, [r2, #0]
 800469a:	069b      	lsls	r3, r3, #26
 800469c:	d51a      	bpl.n	80046d4 <HAL_RCCEx_GetPLL1ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800469e:	6814      	ldr	r4, [r2, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046a0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046a4:	4910      	ldr	r1, [pc, #64]	; (80046e8 <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 80046a6:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046ac:	40e1      	lsrs	r1, r4
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b2:	ee07 1a10 	vmov	s14, r1
 80046b6:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80046ba:	ee07 3a10 	vmov	s14, r3
 80046be:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80046c2:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 80046c6:	ee76 7a05 	vadd.f32	s15, s12, s10
 80046ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d2:	e7a7      	b.n	8004624 <HAL_RCCEx_GetPLL1ClockFreq+0x64>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046d4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80046ec <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 80046d8:	e793      	b.n	8004602 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
 80046da:	bf00      	nop
 80046dc:	58024400 	.word	0x58024400
 80046e0:	4a742400 	.word	0x4a742400
 80046e4:	4bbebc20 	.word	0x4bbebc20
 80046e8:	03d09000 	.word	0x03d09000
 80046ec:	4c742400 	.word	0x4c742400

080046f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80046f0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 80046f4:	b500      	push	{lr}
 80046f6:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80046f8:	d02d      	beq.n	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80046fa:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80046fe:	d018      	beq.n	8004732 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004700:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004704:	d04e      	beq.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004706:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800470a:	d037      	beq.n	800477c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800470c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8004710:	f000 808b 	beq.w	800482a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004714:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8004718:	f000 80ac 	beq.w	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800471c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8004720:	f000 80b6 	beq.w	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004724:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8004728:	d062      	beq.n	80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
          frequency = 0;
 800472a:	2000      	movs	r0, #0
}
 800472c:	b005      	add	sp, #20
 800472e:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8004732:	4a70      	ldr	r2, [pc, #448]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8004734:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004736:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 800473a:	2b80      	cmp	r3, #128	; 0x80
 800473c:	d043      	beq.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800473e:	d86a      	bhi.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8004740:	2b00      	cmp	r3, #0
 8004742:	d039      	beq.n	80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8004744:	2b40      	cmp	r3, #64	; 0x40
 8004746:	d1f0      	bne.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004748:	a801      	add	r0, sp, #4
 800474a:	f7ff fe09 	bl	8004360 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800474e:	9801      	ldr	r0, [sp, #4]
}
 8004750:	b005      	add	sp, #20
 8004752:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004756:	4b67      	ldr	r3, [pc, #412]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8004758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475a:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 800475e:	2b04      	cmp	r3, #4
 8004760:	d8e3      	bhi.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004762:	a201      	add	r2, pc, #4	; (adr r2, 8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x78>)
 8004764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004768:	080047b9 	.word	0x080047b9
 800476c:	08004749 	.word	0x08004749
 8004770:	080047c7 	.word	0x080047c7
 8004774:	0800479d 	.word	0x0800479d
 8004778:	080047d5 	.word	0x080047d5
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800477c:	4a5d      	ldr	r2, [pc, #372]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800477e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004780:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8004784:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004788:	d01d      	beq.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800478a:	d85c      	bhi.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 800478c:	b1a3      	cbz	r3, 80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 800478e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004792:	d0d9      	beq.n	8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8004794:	e7c9      	b.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 8004796:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800479a:	d15b      	bne.n	8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
          frequency = EXTERNAL_CLOCK_VALUE;
 800479c:	4856      	ldr	r0, [pc, #344]	; (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
}
 800479e:	b005      	add	sp, #20
 80047a0:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80047a4:	4a53      	ldr	r2, [pc, #332]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80047a6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80047a8:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 80047ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047b0:	d009      	beq.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80047b2:	d8f0      	bhi.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d151      	bne.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047b8:	a801      	add	r0, sp, #4
 80047ba:	f7ff ff01 	bl	80045c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80047be:	9802      	ldr	r0, [sp, #8]
}
 80047c0:	b005      	add	sp, #20
 80047c2:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047c6:	a801      	add	r0, sp, #4
 80047c8:	f7ff fe62 	bl	8004490 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80047cc:	9801      	ldr	r0, [sp, #4]
}
 80047ce:	b005      	add	sp, #20
 80047d0:	f85d fb04 	ldr.w	pc, [sp], #4
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80047d4:	4b47      	ldr	r3, [pc, #284]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80047d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80047d8:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 80047dc:	d019      	beq.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80047de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047e2:	d062      	beq.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
            frequency = HSE_VALUE;
 80047e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047e8:	4844      	ldr	r0, [pc, #272]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 80047ea:	bf18      	it	ne
 80047ec:	2000      	movne	r0, #0
 80047ee:	e79d      	b.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80047f0:	4b40      	ldr	r3, [pc, #256]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80047f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 80047f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047fc:	d068      	beq.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80047fe:	d95b      	bls.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 8004800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004804:	d051      	beq.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8004806:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800480a:	d05f      	beq.n	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 800480c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004810:	d18b      	bne.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
            frequency = HSI_VALUE;
 8004812:	483b      	ldr	r0, [pc, #236]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x210>)
 8004814:	e78a      	b.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (saiclocksource)
 8004816:	2bc0      	cmp	r3, #192	; 0xc0
 8004818:	d0c0      	beq.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 800481a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800481e:	d184      	bne.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004820:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004822:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004826:	d1da      	bne.n	80047de <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8004828:	e7f3      	b.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800482a:	4a32      	ldr	r2, [pc, #200]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800482c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800482e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8004832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004836:	d0c6      	beq.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8004838:	d815      	bhi.n	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0bc      	beq.n	80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 800483e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004842:	d081      	beq.n	8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8004844:	e771      	b.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 8004846:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800484a:	d0a7      	beq.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 800484c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004850:	d0e6      	beq.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8004852:	e76a      	b.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 8004854:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004858:	d0e2      	beq.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800485a:	e766      	b.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800485c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004860:	f43f af72 	beq.w	8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8004864:	e761      	b.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (srcclk)
 8004866:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800486a:	d097      	beq.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 800486c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004870:	d0d6      	beq.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8004872:	e75a      	b.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004874:	4a1f      	ldr	r2, [pc, #124]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8004876:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004878:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 800487c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004880:	d015      	beq.n	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004882:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004886:	d0cb      	beq.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8004888:	2b00      	cmp	r3, #0
 800488a:	f47f af4e 	bne.w	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800488e:	e75b      	b.n	8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004890:	4b18      	ldr	r3, [pc, #96]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8004892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 8004894:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8004898:	d08e      	beq.n	80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 800489a:	2b00      	cmp	r3, #0
 800489c:	f43f af45 	beq.w	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048a0:	a801      	add	r0, sp, #4
 80048a2:	f7ff fd5d 	bl	8004360 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80048a6:	9803      	ldr	r0, [sp, #12]
          break;
 80048a8:	e740      	b.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
            frequency = CSI_VALUE;
 80048aa:	4816      	ldr	r0, [pc, #88]	; (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x214>)
 80048ac:	e73e      	b.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048ae:	a801      	add	r0, sp, #4
 80048b0:	f7ff fdee 	bl	8004490 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80048b4:	9803      	ldr	r0, [sp, #12]
          break;
 80048b6:	e739      	b.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 80048b8:	b17b      	cbz	r3, 80048da <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80048ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048be:	f47f af34 	bne.w	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048c2:	a801      	add	r0, sp, #4
 80048c4:	f7ff fd4c 	bl	8004360 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80048c8:	9802      	ldr	r0, [sp, #8]
          break;
 80048ca:	e72f      	b.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          frequency = HSE_VALUE;
 80048cc:	480b      	ldr	r0, [pc, #44]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
          break;
 80048ce:	e72d      	b.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048d0:	a801      	add	r0, sp, #4
 80048d2:	f7ff fddd 	bl	8004490 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80048d6:	9802      	ldr	r0, [sp, #8]
          break;
 80048d8:	e728      	b.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80048da:	f7fe fe33 	bl	8003544 <HAL_RCC_GetHCLKFreq>
 80048de:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80048e0:	4a09      	ldr	r2, [pc, #36]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x218>)
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80048e8:	5cd3      	ldrb	r3, [r2, r3]
 80048ea:	f003 031f 	and.w	r3, r3, #31
 80048ee:	40d8      	lsrs	r0, r3
          break;
 80048f0:	e71c      	b.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80048f2:	bf00      	nop
 80048f4:	58024400 	.word	0x58024400
 80048f8:	00bb8000 	.word	0x00bb8000
 80048fc:	017d7840 	.word	0x017d7840
 8004900:	03d09000 	.word	0x03d09000
 8004904:	003d0900 	.word	0x003d0900
 8004908:	0800aa7c 	.word	0x0800aa7c

0800490c <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800490c:	b390      	cbz	r0, 8004974 <HAL_RNG_Init+0x68>
{
 800490e:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004910:	7a43      	ldrb	r3, [r0, #9]
 8004912:	4604      	mov	r4, r0
 8004914:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004918:	b343      	cbz	r3, 800496c <HAL_RNG_Init+0x60>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800491a:	2302      	movs	r3, #2
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800491c:	e9d4 2100 	ldrd	r2, r1, [r4]
  hrng->State = HAL_RNG_STATE_BUSY;
 8004920:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8004922:	6813      	ldr	r3, [r2, #0]
 8004924:	f023 0320 	bic.w	r3, r3, #32
 8004928:	430b      	orrs	r3, r1
 800492a:	6013      	str	r3, [r2, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800492c:	6822      	ldr	r2, [r4, #0]
 800492e:	6813      	ldr	r3, [r2, #0]
 8004930:	f043 0304 	orr.w	r3, r3, #4
 8004934:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	065b      	lsls	r3, r3, #25
 800493c:	d503      	bpl.n	8004946 <HAL_RNG_Init+0x3a>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800493e:	2304      	movs	r3, #4
    return HAL_ERROR;
 8004940:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 8004942:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 8004944:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 8004946:	f7fb fd2b 	bl	80003a0 <HAL_GetTick>
 800494a:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800494c:	e004      	b.n	8004958 <HAL_RNG_Init+0x4c>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800494e:	f7fb fd27 	bl	80003a0 <HAL_GetTick>
 8004952:	1b40      	subs	r0, r0, r5
 8004954:	2802      	cmp	r0, #2
 8004956:	d80f      	bhi.n	8004978 <HAL_RNG_Init+0x6c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f013 0304 	ands.w	r3, r3, #4
 8004960:	d1f5      	bne.n	800494e <HAL_RNG_Init+0x42>
  hrng->State = HAL_RNG_STATE_READY;
 8004962:	2201      	movs	r2, #1
  return HAL_OK;
 8004964:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 8004966:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004968:	60e3      	str	r3, [r4, #12]
}
 800496a:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 800496c:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 800496e:	f003 fd39 	bl	80083e4 <HAL_RNG_MspInit>
 8004972:	e7d2      	b.n	800491a <HAL_RNG_Init+0xe>
    return HAL_ERROR;
 8004974:	2001      	movs	r0, #1
}
 8004976:	4770      	bx	lr
      hrng->State = HAL_RNG_STATE_ERROR;
 8004978:	2204      	movs	r2, #4
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800497a:	2302      	movs	r3, #2
      return HAL_ERROR;
 800497c:	2001      	movs	r0, #1
      hrng->State = HAL_RNG_STATE_ERROR;
 800497e:	7262      	strb	r2, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004980:	60e3      	str	r3, [r4, #12]
}
 8004982:	bd38      	pop	{r3, r4, r5, pc}

08004984 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004986:	7a03      	ldrb	r3, [r0, #8]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d00b      	beq.n	80049a4 <HAL_RNG_GenerateRandomNumber+0x20>
 800498c:	4604      	mov	r4, r0
 800498e:	2001      	movs	r0, #1
 8004990:	460e      	mov	r6, r1

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004992:	7a63      	ldrb	r3, [r4, #9]
  __HAL_LOCK(hrng);
 8004994:	7220      	strb	r0, [r4, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 8004996:	4283      	cmp	r3, r0
 8004998:	d006      	beq.n	80049a8 <HAL_RNG_GenerateRandomNumber+0x24>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800499a:	2304      	movs	r3, #4
 800499c:	60e3      	str	r3, [r4, #12]
    status = HAL_ERROR;
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800499e:	2300      	movs	r3, #0
 80049a0:	7223      	strb	r3, [r4, #8]

  return status;
}
 80049a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrng);
 80049a4:	2002      	movs	r0, #2
}
 80049a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 80049a8:	2302      	movs	r3, #2
 80049aa:	7263      	strb	r3, [r4, #9]
    tickstart = HAL_GetTick();
 80049ac:	f7fb fcf8 	bl	80003a0 <HAL_GetTick>
 80049b0:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80049b2:	e004      	b.n	80049be <HAL_RNG_GenerateRandomNumber+0x3a>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80049b4:	f7fb fcf4 	bl	80003a0 <HAL_GetTick>
 80049b8:	1bc0      	subs	r0, r0, r7
 80049ba:	2802      	cmp	r0, #2
 80049bc:	d80b      	bhi.n	80049d6 <HAL_RNG_GenerateRandomNumber+0x52>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80049be:	6822      	ldr	r2, [r4, #0]
 80049c0:	6855      	ldr	r5, [r2, #4]
 80049c2:	f015 0501 	ands.w	r5, r5, #1
 80049c6:	d0f5      	beq.n	80049b4 <HAL_RNG_GenerateRandomNumber+0x30>
    hrng->RandomNumber = hrng->Instance->DR;
 80049c8:	6893      	ldr	r3, [r2, #8]
    hrng->State = HAL_RNG_STATE_READY;
 80049ca:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 80049cc:	2000      	movs	r0, #0
    hrng->RandomNumber = hrng->Instance->DR;
 80049ce:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 80049d0:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
 80049d2:	7262      	strb	r2, [r4, #9]
 80049d4:	e7e3      	b.n	800499e <HAL_RNG_GenerateRandomNumber+0x1a>
        hrng->State = HAL_RNG_STATE_READY;
 80049d6:	2001      	movs	r0, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80049d8:	2302      	movs	r3, #2
        __HAL_UNLOCK(hrng);
 80049da:	7225      	strb	r5, [r4, #8]
        hrng->State = HAL_RNG_STATE_READY;
 80049dc:	7260      	strb	r0, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80049de:	60e3      	str	r3, [r4, #12]
}
 80049e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049e2:	bf00      	nop

080049e4 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80049e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80049e6:	2904      	cmp	r1, #4
 80049e8:	d813      	bhi.n	8004a12 <HAL_SAI_InitProtocol+0x2e>
 80049ea:	e8df f001 	tbb	[pc, r1]
 80049ee:	3535      	.short	0x3535
 80049f0:	1435      	.short	0x1435
 80049f2:	14          	.byte	0x14
 80049f3:	00          	.byte	0x00
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80049f4:	4a8b      	ldr	r2, [pc, #556]	; (8004c24 <HAL_SAI_InitProtocol+0x240>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d005      	beq.n	8004a06 <HAL_SAI_InitProtocol+0x22>
 80049fa:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 80049fe:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d105      	bne.n	8004a12 <HAL_SAI_InitProtocol+0x2e>
 8004a06:	6862      	ldr	r2, [r4, #4]
 8004a08:	2a01      	cmp	r2, #1
 8004a0a:	d102      	bne.n	8004a12 <HAL_SAI_InitProtocol+0x2e>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004a0c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004a0e:	2a00      	cmp	r2, #0
 8004a10:	d053      	beq.n	8004aba <HAL_SAI_InitProtocol+0xd6>
  hsai->SlotInit.SlotNumber      = nbslot;

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
  {
    return HAL_ERROR;
 8004a12:	2001      	movs	r0, #1
}
 8004a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004a16:	6845      	ldr	r5, [r0, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004a18:	2400      	movs	r4, #0
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8004a1a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
  hsai->SlotInit.FirstBitOffset  = 0;
  hsai->SlotInit.SlotNumber      = nbslot;
 8004a1e:	6703      	str	r3, [r0, #112]	; 0x70
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004a20:	f035 0502 	bics.w	r5, r5, #2
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8004a24:	f44f 2580 	mov.w	r5, #262144	; 0x40000
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004a28:	6444      	str	r4, [r0, #68]	; 0x44
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004a2a:	bf0c      	ite	eq
 8004a2c:	2701      	moveq	r7, #1
 8004a2e:	4627      	movne	r7, r4
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;

  if (protocol == SAI_PCM_SHORT)
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8004a30:	2904      	cmp	r1, #4
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004a32:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004a36:	6507      	str	r7, [r0, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 1;
 8004a38:	bf14      	ite	ne
 8004a3a:	270d      	movne	r7, #13
 8004a3c:	2701      	moveq	r7, #1
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004a3e:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8004a40:	65c4      	str	r4, [r0, #92]	; 0x5c
 8004a42:	6587      	str	r7, [r0, #88]	; 0x58
  hsai->SlotInit.FirstBitOffset  = 0;
 8004a44:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004a46:	6741      	str	r1, [r0, #116]	; 0x74
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8004a48:	e9c0 6518 	strd	r6, r5, [r0, #96]	; 0x60
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
  }

  switch (datasize)
 8004a4c:	2a03      	cmp	r2, #3
 8004a4e:	d8e0      	bhi.n	8004a12 <HAL_SAI_InitProtocol+0x2e>
 8004a50:	e8df f002 	tbb	[pc, r2]
 8004a54:	259e9197 	.word	0x259e9197
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004a58:	6845      	ldr	r5, [r0, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004a5a:	2400      	movs	r4, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 8004a5c:	6703      	str	r3, [r0, #112]	; 0x70
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004a5e:	f035 0502 	bics.w	r5, r5, #2
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004a62:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004a64:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8004a66:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004a6a:	bf08      	it	eq
 8004a6c:	4626      	moveq	r6, r4
  hsai->SlotInit.FirstBitOffset  = 0;
 8004a6e:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004a70:	f64f 74ff 	movw	r4, #65535	; 0xffff
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004a74:	bf18      	it	ne
 8004a76:	2601      	movne	r6, #1
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8004a78:	65c5      	str	r5, [r0, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004a7a:	6744      	str	r4, [r0, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
 8004a7c:	f013 0401 	ands.w	r4, r3, #1
 8004a80:	6506      	str	r6, [r0, #80]	; 0x50
 8004a82:	d1c6      	bne.n	8004a12 <HAL_SAI_InitProtocol+0x2e>
  if (protocol == SAI_I2S_STANDARD)
 8004a84:	2900      	cmp	r1, #0
 8004a86:	f000 808a 	beq.w	8004b9e <HAL_SAI_InitProtocol+0x1ba>
 8004a8a:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8004a8e:	e9c0 5418 	strd	r5, r4, [r0, #96]	; 0x60
  switch (datasize)
 8004a92:	2a03      	cmp	r2, #3
 8004a94:	d8bd      	bhi.n	8004a12 <HAL_SAI_InitProtocol+0x2e>
 8004a96:	e8df f002 	tbb	[pc, r2]
 8004a9a:	a0b0      	.short	0xa0b0
 8004a9c:	ba8f      	.short	0xba8f
      hsai->FrameInit.FrameLength = 32U * nbslot;
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
      break;
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004a9e:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004aa0:	21e0      	movs	r1, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004aa2:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004aa4:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004aa6:	6481      	str	r1, [r0, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004aa8:	66c2      	str	r2, [r0, #108]	; 0x6c
 8004aaa:	4604      	mov	r4, r0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8004aac:	f7fb fc90 	bl	80003d0 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8004ab0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8004ab4:	2b01      	cmp	r3, #1
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8004ab6:	6823      	ldr	r3, [r4, #0]
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8004ab8:	d09c      	beq.n	80049f4 <HAL_SAI_InitProtocol+0x10>
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004aba:	4a5a      	ldr	r2, [pc, #360]	; (8004c24 <HAL_SAI_InitProtocol+0x240>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d079      	beq.n	8004bb4 <HAL_SAI_InitProtocol+0x1d0>
 8004ac0:	3220      	adds	r2, #32
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d076      	beq.n	8004bb4 <HAL_SAI_InitProtocol+0x1d0>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004ac6:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8004aca:	4293      	cmp	r3, r2
 8004acc:	f000 8195 	beq.w	8004dfa <HAL_SAI_InitProtocol+0x416>
 8004ad0:	3220      	adds	r2, #32
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	f000 8191 	beq.w	8004dfa <HAL_SAI_InitProtocol+0x416>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8004ad8:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8004adc:	4293      	cmp	r3, r2
 8004ade:	f000 81bd 	beq.w	8004e5c <HAL_SAI_InitProtocol+0x478>
 8004ae2:	3220      	adds	r2, #32
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	f000 81b9 	beq.w	8004e5c <HAL_SAI_InitProtocol+0x478>
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8004aea:	4a4f      	ldr	r2, [pc, #316]	; (8004c28 <HAL_SAI_InitProtocol+0x244>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d002      	beq.n	8004af6 <HAL_SAI_InitProtocol+0x112>
 8004af0:	3220      	adds	r2, #32
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d18d      	bne.n	8004a12 <HAL_SAI_InitProtocol+0x2e>
    SaiBaseAddress = SAI4;
 8004af6:	4d4d      	ldr	r5, [pc, #308]	; (8004c2c <HAL_SAI_InitProtocol+0x248>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8004af8:	f894 2091 	ldrb.w	r2, [r4, #145]	; 0x91
 8004afc:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8004b00:	2a00      	cmp	r2, #0
 8004b02:	f000 8173 	beq.w	8004dec <HAL_SAI_InitProtocol+0x408>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004b06:	4a4a      	ldr	r2, [pc, #296]	; (8004c30 <HAL_SAI_InitProtocol+0x24c>)
 8004b08:	484a      	ldr	r0, [pc, #296]	; (8004c34 <HAL_SAI_InitProtocol+0x250>)
 8004b0a:	6812      	ldr	r2, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004b0c:	6819      	ldr	r1, [r3, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004b0e:	fba0 0202 	umull	r0, r2, r0, r2
  __HAL_SAI_DISABLE(hsai);
 8004b12:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004b16:	0b12      	lsrs	r2, r2, #12
  __HAL_SAI_DISABLE(hsai);
 8004b18:	6019      	str	r1, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004b1a:	0093      	lsls	r3, r2, #2
 8004b1c:	2a00      	cmp	r2, #0
 8004b1e:	f000 815d 	beq.w	8004ddc <HAL_SAI_InitProtocol+0x3f8>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004b22:	6821      	ldr	r1, [r4, #0]
    count--;
 8004b24:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004b26:	680a      	ldr	r2, [r1, #0]
 8004b28:	03d7      	lsls	r7, r2, #15
 8004b2a:	d506      	bpl.n	8004b3a <HAL_SAI_InitProtocol+0x156>
    if (count == 0U)
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 8155 	beq.w	8004ddc <HAL_SAI_InitProtocol+0x3f8>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004b32:	680a      	ldr	r2, [r1, #0]
    count--;
 8004b34:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004b36:	03d2      	lsls	r2, r2, #15
 8004b38:	d4f8      	bmi.n	8004b2c <HAL_SAI_InitProtocol+0x148>
  switch (hsai->Init.SynchroExt)
 8004b3a:	68e3      	ldr	r3, [r4, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
 8004b3c:	2202      	movs	r2, #2
  switch (hsai->Init.SynchroExt)
 8004b3e:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
 8004b40:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 8004b44:	f000 8185 	beq.w	8004e52 <HAL_SAI_InitProtocol+0x46e>
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	bf15      	itete	ne
 8004b4c:	4610      	movne	r0, r2
 8004b4e:	2123      	moveq	r1, #35	; 0x23
 8004b50:	2103      	movne	r1, #3
 8004b52:	2022      	moveq	r0, #34	; 0x22
 8004b54:	bf0b      	itete	eq
 8004b56:	2621      	moveq	r6, #33	; 0x21
 8004b58:	2601      	movne	r6, #1
 8004b5a:	2220      	moveq	r2, #32
 8004b5c:	2200      	movne	r2, #0
  switch (hsai->Init.Synchro)
 8004b5e:	68a3      	ldr	r3, [r4, #8]
 8004b60:	3b01      	subs	r3, #1
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	f200 8138 	bhi.w	8004dd8 <HAL_SAI_InitProtocol+0x3f4>
 8004b68:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004b6c:	0069012f 	.word	0x0069012f
 8004b70:	00680132 	.word	0x00680132
 8004b74:	0180      	.short	0x0180
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004b76:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004b78:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004b7a:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004b7c:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004b7e:	66c2      	str	r2, [r0, #108]	; 0x6c
 8004b80:	e793      	b.n	8004aaa <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8004b82:	011b      	lsls	r3, r3, #4
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004b84:	2180      	movs	r1, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004b86:	2240      	movs	r2, #64	; 0x40
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8004b88:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004b8a:	6481      	str	r1, [r0, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004b8c:	66c2      	str	r2, [r0, #108]	; 0x6c
 8004b8e:	e78c      	b.n	8004aaa <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004b90:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004b92:	21c0      	movs	r1, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004b94:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004b96:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004b98:	6481      	str	r1, [r0, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004b9a:	66c2      	str	r2, [r0, #108]	; 0x6c
 8004b9c:	e785      	b.n	8004aaa <HAL_SAI_InitProtocol+0xc6>
 8004b9e:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8004ba2:	e9c0 1418 	strd	r1, r4, [r0, #96]	; 0x60
  switch (datasize)
 8004ba6:	2a03      	cmp	r2, #3
 8004ba8:	f63f af33 	bhi.w	8004a12 <HAL_SAI_InitProtocol+0x2e>
 8004bac:	e8df f002 	tbb	[pc, r2]
 8004bb0:	2f041525 	.word	0x2f041525
    SaiBaseAddress = SAI1;
 8004bb4:	4d20      	ldr	r5, [pc, #128]	; (8004c38 <HAL_SAI_InitProtocol+0x254>)
 8004bb6:	e79f      	b.n	8004af8 <HAL_SAI_InitProtocol+0x114>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004bb8:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004bba:	25c0      	movs	r5, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004bbc:	2480      	movs	r4, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004bbe:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004bc0:	ea4f 1283 	mov.w	r2, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004bc4:	6485      	str	r5, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004bc6:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004bca:	66c4      	str	r4, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004bcc:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004bd0:	f47f af6b 	bne.w	8004aaa <HAL_SAI_InitProtocol+0xc6>
      hsai->SlotInit.FirstBitOffset = 8;
 8004bd4:	2308      	movs	r3, #8
 8004bd6:	6683      	str	r3, [r0, #104]	; 0x68
 8004bd8:	e767      	b.n	8004aaa <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004bda:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004bdc:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004bde:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004be0:	ea4f 1483 	mov.w	r4, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004be4:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004be6:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004bea:	66c2      	str	r2, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004bec:	e9c0 4315 	strd	r4, r3, [r0, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004bf0:	f47f af5b 	bne.w	8004aaa <HAL_SAI_InitProtocol+0xc6>
      hsai->SlotInit.FirstBitOffset = 16;
 8004bf4:	2310      	movs	r3, #16
 8004bf6:	6683      	str	r3, [r0, #104]	; 0x68
 8004bf8:	e757      	b.n	8004aaa <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004bfa:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004bfc:	2480      	movs	r4, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004bfe:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004c00:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004c02:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8004c04:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004c06:	66c1      	str	r1, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8004c08:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
 8004c0c:	e74d      	b.n	8004aaa <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004c0e:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004c10:	24e0      	movs	r4, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004c12:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004c14:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004c16:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004c18:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004c1a:	66c1      	str	r1, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004c1c:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
 8004c20:	e743      	b.n	8004aaa <HAL_SAI_InitProtocol+0xc6>
 8004c22:	bf00      	nop
 8004c24:	40015804 	.word	0x40015804
 8004c28:	58005404 	.word	0x58005404
 8004c2c:	58005400 	.word	0x58005400
 8004c30:	20000014 	.word	0x20000014
 8004c34:	95cbec1b 	.word	0x95cbec1b
 8004c38:	40015800 	.word	0x40015800
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8004c3c:	4602      	mov	r2, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004c3e:	f44f 6600 	mov.w	r6, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
 8004c42:	602a      	str	r2, [r5, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004c44:	6a23      	ldr	r3, [r4, #32]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d045      	beq.n	8004cd6 <HAL_SAI_InitProtocol+0x2f2>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	4a98      	ldr	r2, [pc, #608]	; (8004eb0 <HAL_SAI_InitProtocol+0x4cc>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	f000 811c 	beq.w	8004e8c <HAL_SAI_InitProtocol+0x4a8>
 8004c54:	4897      	ldr	r0, [pc, #604]	; (8004eb4 <HAL_SAI_InitProtocol+0x4d0>)
 8004c56:	1a18      	subs	r0, r3, r0
 8004c58:	fab0 f080 	clz	r0, r0
 8004c5c:	0940      	lsrs	r0, r0, #5
 8004c5e:	2800      	cmp	r0, #0
 8004c60:	f040 8114 	bne.w	8004e8c <HAL_SAI_InitProtocol+0x4a8>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004c64:	4a94      	ldr	r2, [pc, #592]	; (8004eb8 <HAL_SAI_InitProtocol+0x4d4>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	f000 810a 	beq.w	8004e80 <HAL_SAI_InitProtocol+0x49c>
 8004c6c:	3220      	adds	r2, #32
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	f000 8106 	beq.w	8004e80 <HAL_SAI_InitProtocol+0x49c>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8004c74:	4a91      	ldr	r2, [pc, #580]	; (8004ebc <HAL_SAI_InitProtocol+0x4d8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	f000 80fc 	beq.w	8004e74 <HAL_SAI_InitProtocol+0x490>
 8004c7c:	3220      	adds	r2, #32
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	f000 80f8 	beq.w	8004e74 <HAL_SAI_InitProtocol+0x490>
    if (hsai->Instance == SAI4_Block_A)
 8004c84:	4a8e      	ldr	r2, [pc, #568]	; (8004ec0 <HAL_SAI_InitProtocol+0x4dc>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	f000 810b 	beq.w	8004ea2 <HAL_SAI_InitProtocol+0x4be>
    if (hsai->Instance == SAI4_Block_B)
 8004c8c:	4a8d      	ldr	r2, [pc, #564]	; (8004ec4 <HAL_SAI_InitProtocol+0x4e0>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	f000 8102 	beq.w	8004e98 <HAL_SAI_InitProtocol+0x4b4>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8004c94:	69a2      	ldr	r2, [r4, #24]
 8004c96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004c9a:	6a23      	ldr	r3, [r4, #32]
 8004c9c:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8004ca0:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8004ca4:	f000 80dc 	beq.w	8004e60 <HAL_SAI_InitProtocol+0x47c>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004ca8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004caa:	021b      	lsls	r3, r3, #8
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004cac:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8004cb0:	bf14      	ite	ne
 8004cb2:	2201      	movne	r2, #1
 8004cb4:	2202      	moveq	r2, #2
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004cb6:	fb02 f303 	mul.w	r3, r2, r3
 8004cba:	fbb0 f3f3 	udiv	r3, r0, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 8004cbe:	4a82      	ldr	r2, [pc, #520]	; (8004ec8 <HAL_SAI_InitProtocol+0x4e4>)
 8004cc0:	fba2 1203 	umull	r1, r2, r2, r3
 8004cc4:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
 8004cc6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8004cca:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8004cce:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
 8004cd0:	bf08      	it	eq
 8004cd2:	3201      	addeq	r2, #1
 8004cd4:	6262      	str	r2, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004cd6:	6863      	ldr	r3, [r4, #4]
 8004cd8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004cda:	f033 0702 	bics.w	r7, r3, #2
 8004cde:	f040 80b2 	bne.w	8004e46 <HAL_SAI_InitProtocol+0x462>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004ce2:	2a01      	cmp	r2, #1
 8004ce4:	bf18      	it	ne
 8004ce6:	f44f 7700 	movne.w	r7, #512	; 0x200
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8004cea:	f7fb fb71 	bl	80003d0 <HAL_GetREVID>
 8004cee:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004cf2:	6822      	ldr	r2, [r4, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8004cf4:	f0c0 8096 	bcc.w	8004e24 <HAL_SAI_InitProtocol+0x440>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004cf8:	6811      	ldr	r1, [r2, #0]
 8004cfa:	4b74      	ldr	r3, [pc, #464]	; (8004ecc <HAL_SAI_InitProtocol+0x4e8>)
 8004cfc:	400b      	ands	r3, r1
 8004cfe:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004d00:	6863      	ldr	r3, [r4, #4]
 8004d02:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004d04:	e9d4 1211 	ldrd	r1, r2, [r4, #68]	; 0x44
 8004d08:	430b      	orrs	r3, r1
 8004d0a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	6962      	ldr	r2, [r4, #20]
 8004d10:	4303      	orrs	r3, r0
 8004d12:	69a0      	ldr	r0, [r4, #24]
 8004d14:	430b      	orrs	r3, r1
 8004d16:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	6922      	ldr	r2, [r4, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004d1c:	4303      	orrs	r3, r0
 8004d1e:	6820      	ldr	r0, [r4, #0]
 8004d20:	430b      	orrs	r3, r1
 8004d22:	6801      	ldr	r1, [r0, #0]
 8004d24:	4313      	orrs	r3, r2
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004d26:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004d28:	430b      	orrs	r3, r1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004d2a:	f24f 0120 	movw	r1, #61472	; 0xf020
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004d2e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8004d32:	4333      	orrs	r3, r6
 8004d34:	433b      	orrs	r3, r7
 8004d36:	6003      	str	r3, [r0, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004d38:	6826      	ldr	r6, [r4, #0]
 8004d3a:	4b65      	ldr	r3, [pc, #404]	; (8004ed0 <HAL_SAI_InitProtocol+0x4ec>)
 8004d3c:	6872      	ldr	r2, [r6, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004d3e:	4865      	ldr	r0, [pc, #404]	; (8004ed4 <HAL_SAI_InitProtocol+0x4f0>)
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004d40:	4013      	ands	r3, r2
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8004d42:	4a5b      	ldr	r2, [pc, #364]	; (8004eb0 <HAL_SAI_InitProtocol+0x4cc>)
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004d44:	6073      	str	r3, [r6, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004d46:	69e3      	ldr	r3, [r4, #28]
 8004d48:	e9d4 760c 	ldrd	r7, r6, [r4, #48]	; 0x30
 8004d4c:	433b      	orrs	r3, r7
 8004d4e:	6827      	ldr	r7, [r4, #0]
 8004d50:	4333      	orrs	r3, r6
 8004d52:	687e      	ldr	r6, [r7, #4]
 8004d54:	4333      	orrs	r3, r6
 8004d56:	607b      	str	r3, [r7, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	689e      	ldr	r6, [r3, #8]
 8004d5c:	4030      	ands	r0, r6
 8004d5e:	6098      	str	r0, [r3, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004d60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d62:	6827      	ldr	r7, [r4, #0]
 8004d64:	e9d4 6017 	ldrd	r6, r0, [r4, #92]	; 0x5c
 8004d68:	4333      	orrs	r3, r6
 8004d6a:	6d66      	ldr	r6, [r4, #84]	; 0x54
 8004d6c:	4303      	orrs	r3, r0
 8004d6e:	68b8      	ldr	r0, [r7, #8]
 8004d70:	3e01      	subs	r6, #1
 8004d72:	4303      	orrs	r3, r0
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004d76:	4333      	orrs	r3, r6
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004d78:	3801      	subs	r0, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004d7a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004d7e:	60bb      	str	r3, [r7, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004d80:	6820      	ldr	r0, [r4, #0]
 8004d82:	68c3      	ldr	r3, [r0, #12]
 8004d84:	400b      	ands	r3, r1
 8004d86:	60c3      	str	r3, [r0, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004d88:	6820      	ldr	r0, [r4, #0]
 8004d8a:	e9d4 361a 	ldrd	r3, r6, [r4, #104]	; 0x68
 8004d8e:	68c1      	ldr	r1, [r0, #12]
 8004d90:	4333      	orrs	r3, r6
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004d92:	6f66      	ldr	r6, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004d94:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004d96:	6f21      	ldr	r1, [r4, #112]	; 0x70
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004d98:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004d9c:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004d9e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004da2:	60c3      	str	r3, [r0, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d029      	beq.n	8004dfe <HAL_SAI_InitProtocol+0x41a>
 8004daa:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8004dae:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d023      	beq.n	8004dfe <HAL_SAI_InitProtocol+0x41a>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004db6:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 8004db8:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004dba:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
 8004dbe:	4618      	mov	r0, r3
  __HAL_UNLOCK(hsai);
 8004dc0:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  hsai->State = HAL_SAI_STATE_READY;
 8004dc4:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
}
 8004dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004dca:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8004dce:	e738      	b.n	8004c42 <HAL_SAI_InitProtocol+0x25e>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004dd0:	4632      	mov	r2, r6
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004dd2:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8004dd6:	e734      	b.n	8004c42 <HAL_SAI_InitProtocol+0x25e>
      syncen_bits = 0;
 8004dd8:	2600      	movs	r6, #0
 8004dda:	e732      	b.n	8004c42 <HAL_SAI_InitProtocol+0x25e>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004ddc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    return HAL_ERROR;
 8004de0:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004de6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 8004dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hsai->Lock = HAL_UNLOCKED;
 8004dec:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 8004df0:	4620      	mov	r0, r4
 8004df2:	f003 fb53 	bl	800849c <HAL_SAI_MspInit>
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	e685      	b.n	8004b06 <HAL_SAI_InitProtocol+0x122>
    SaiBaseAddress = SAI2;
 8004dfa:	4d37      	ldr	r5, [pc, #220]	; (8004ed8 <HAL_SAI_InitProtocol+0x4f4>)
 8004dfc:	e67c      	b.n	8004af8 <HAL_SAI_InitProtocol+0x114>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8004dfe:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	646b      	str	r3, [r5, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8004e06:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d1d3      	bne.n	8004db6 <HAL_SAI_InitProtocol+0x3d2>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8004e0e:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8004e12:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8004e14:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004e18:	646b      	str	r3, [r5, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8004e1a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004e1c:	f043 0301 	orr.w	r3, r3, #1
 8004e20:	646b      	str	r3, [r5, #68]	; 0x44
 8004e22:	e7c8      	b.n	8004db6 <HAL_SAI_InitProtocol+0x3d2>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004e24:	6811      	ldr	r1, [r2, #0]
 8004e26:	4b2d      	ldr	r3, [pc, #180]	; (8004edc <HAL_SAI_InitProtocol+0x4f8>)
 8004e28:	400b      	ands	r3, r1
 8004e2a:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004e2c:	6863      	ldr	r3, [r4, #4]
 8004e2e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004e30:	e9d4 2011 	ldrd	r2, r0, [r4, #68]	; 0x44
 8004e34:	4313      	orrs	r3, r2
 8004e36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004e38:	4303      	orrs	r3, r0
 8004e3a:	6960      	ldr	r0, [r4, #20]
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	69a1      	ldr	r1, [r4, #24]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004e44:	e76a      	b.n	8004d1c <HAL_SAI_InitProtocol+0x338>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004e46:	2a01      	cmp	r2, #1
 8004e48:	bf14      	ite	ne
 8004e4a:	2700      	movne	r7, #0
 8004e4c:	f44f 7700 	moveq.w	r7, #512	; 0x200
 8004e50:	e74b      	b.n	8004cea <HAL_SAI_InitProtocol+0x306>
  switch (hsai->Init.SynchroExt)
 8004e52:	2113      	movs	r1, #19
 8004e54:	2012      	movs	r0, #18
 8004e56:	2611      	movs	r6, #17
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004e58:	2210      	movs	r2, #16
 8004e5a:	e680      	b.n	8004b5e <HAL_SAI_InitProtocol+0x17a>
    SaiBaseAddress = SAI3;
 8004e5c:	4d20      	ldr	r5, [pc, #128]	; (8004ee0 <HAL_SAI_InitProtocol+0x4fc>)
 8004e5e:	e64b      	b.n	8004af8 <HAL_SAI_InitProtocol+0x114>
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * hsai->FrameInit.FrameLength);
 8004e60:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004e62:	fb02 f303 	mul.w	r3, r2, r3
 8004e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e6a:	e728      	b.n	8004cbe <HAL_SAI_InitProtocol+0x2da>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8004e6c:	460a      	mov	r2, r1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004e6e:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8004e72:	e6e6      	b.n	8004c42 <HAL_SAI_InitProtocol+0x25e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8004e74:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004e78:	f7ff fc3a 	bl	80046f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	e701      	b.n	8004c84 <HAL_SAI_InitProtocol+0x2a0>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004e80:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004e84:	f7ff fc34 	bl	80046f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e88:	6823      	ldr	r3, [r4, #0]
 8004e8a:	e6f3      	b.n	8004c74 <HAL_SAI_InitProtocol+0x290>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004e8c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004e90:	f7ff fc2e 	bl	80046f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e94:	6823      	ldr	r3, [r4, #0]
 8004e96:	e6e5      	b.n	8004c64 <HAL_SAI_InitProtocol+0x280>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8004e98:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004e9c:	f7ff fc28 	bl	80046f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ea0:	e6f8      	b.n	8004c94 <HAL_SAI_InitProtocol+0x2b0>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8004ea2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004ea6:	f7ff fc23 	bl	80046f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	e6ee      	b.n	8004c8c <HAL_SAI_InitProtocol+0x2a8>
 8004eae:	bf00      	nop
 8004eb0:	40015804 	.word	0x40015804
 8004eb4:	40015824 	.word	0x40015824
 8004eb8:	40015c04 	.word	0x40015c04
 8004ebc:	40016004 	.word	0x40016004
 8004ec0:	58005404 	.word	0x58005404
 8004ec4:	58005424 	.word	0x58005424
 8004ec8:	cccccccd 	.word	0xcccccccd
 8004ecc:	f005c010 	.word	0xf005c010
 8004ed0:	ffff1ff0 	.word	0xffff1ff0
 8004ed4:	fff88000 	.word	0xfff88000
 8004ed8:	40015c00 	.word	0x40015c00
 8004edc:	f805c010 	.word	0xf805c010
 8004ee0:	40016000 	.word	0x40016000

08004ee4 <HAL_SAI_Transmit_DMA>:
{
 8004ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ee8:	460f      	mov	r7, r1
 8004eea:	4604      	mov	r4, r0
 8004eec:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8004eee:	f7fb fa57 	bl	80003a0 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 8004ef2:	2f00      	cmp	r7, #0
 8004ef4:	d064      	beq.n	8004fc0 <HAL_SAI_Transmit_DMA+0xdc>
 8004ef6:	fab8 f588 	clz	r5, r8
 8004efa:	096d      	lsrs	r5, r5, #5
 8004efc:	2d00      	cmp	r5, #0
 8004efe:	d15f      	bne.n	8004fc0 <HAL_SAI_Transmit_DMA+0xdc>
  if (hsai->State == HAL_SAI_STATE_READY)
 8004f00:	f894 6091 	ldrb.w	r6, [r4, #145]	; 0x91
 8004f04:	b2f6      	uxtb	r6, r6
 8004f06:	2e01      	cmp	r6, #1
 8004f08:	d156      	bne.n	8004fb8 <HAL_SAI_Transmit_DMA+0xd4>
    __HAL_LOCK(hsai);
 8004f0a:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d052      	beq.n	8004fb8 <HAL_SAI_Transmit_DMA+0xd4>
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8004f12:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8004f16:	2112      	movs	r1, #18
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8004f18:	4a37      	ldr	r2, [pc, #220]	; (8004ff8 <HAL_SAI_Transmit_DMA+0x114>)
 8004f1a:	4681      	mov	r9, r0
    hsai->pBuffPtr = pData;
 8004f1c:	67a7      	str	r7, [r4, #120]	; 0x78
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004f1e:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
    hsai->XferSize = Size;
 8004f22:	f8a4 807c 	strh.w	r8, [r4, #124]	; 0x7c
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8004f26:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
    __HAL_LOCK(hsai);
 8004f2a:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
    hsai->XferCount = Size;
 8004f2e:	f8a4 807e 	strh.w	r8, [r4, #126]	; 0x7e
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8004f32:	4932      	ldr	r1, [pc, #200]	; (8004ffc <HAL_SAI_Transmit_DMA+0x118>)
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8004f34:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8004f36:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8004f3a:	4a31      	ldr	r2, [pc, #196]	; (8005000 <HAL_SAI_Transmit_DMA+0x11c>)
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8004f3c:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8004f3e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004f42:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 8004f44:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004f48:	651d      	str	r5, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8004f4a:	6822      	ldr	r2, [r4, #0]
 8004f4c:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8004f50:	321c      	adds	r2, #28
 8004f52:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004f54:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8004f58:	f7fc fab2 	bl	80014c0 <HAL_DMA_Start_IT>
 8004f5c:	4607      	mov	r7, r0
 8004f5e:	2800      	cmp	r0, #0
 8004f60:	d132      	bne.n	8004fc8 <HAL_SAI_Transmit_DMA+0xe4>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004f62:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004f64:	6863      	ldr	r3, [r4, #4]
 8004f66:	2a08      	cmp	r2, #8
 8004f68:	d03c      	beq.n	8004fe4 <HAL_SAI_Transmit_DMA+0x100>
 8004f6a:	2005      	movs	r0, #5
 8004f6c:	2261      	movs	r2, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004f6e:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004f70:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_WCKCFG;
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	bf88      	it	hi
 8004f76:	4602      	movhi	r2, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004f78:	690b      	ldr	r3, [r1, #16]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004f7e:	6822      	ldr	r2, [r4, #0]
 8004f80:	6813      	ldr	r3, [r2, #0]
 8004f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f86:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8004f88:	e006      	b.n	8004f98 <HAL_SAI_Transmit_DMA+0xb4>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8004f8a:	f7fb fa09 	bl	80003a0 <HAL_GetTick>
 8004f8e:	eba0 0009 	sub.w	r0, r0, r9
 8004f92:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004f96:	d81b      	bhi.n	8004fd0 <HAL_SAI_Transmit_DMA+0xec>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8004f98:	6822      	ldr	r2, [r4, #0]
 8004f9a:	6955      	ldr	r5, [r2, #20]
 8004f9c:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 8004fa0:	d0f3      	beq.n	8004f8a <HAL_SAI_Transmit_DMA+0xa6>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8004fa2:	6813      	ldr	r3, [r2, #0]
 8004fa4:	03db      	lsls	r3, r3, #15
 8004fa6:	d403      	bmi.n	8004fb0 <HAL_SAI_Transmit_DMA+0xcc>
      __HAL_SAI_ENABLE(hsai);
 8004fa8:	6813      	ldr	r3, [r2, #0]
 8004faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fae:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 8004fb6:	e000      	b.n	8004fba <HAL_SAI_Transmit_DMA+0xd6>
    return HAL_BUSY;
 8004fb8:	2702      	movs	r7, #2
}
 8004fba:	4638      	mov	r0, r7
 8004fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return  HAL_ERROR;
 8004fc0:	2701      	movs	r7, #1
}
 8004fc2:	4638      	mov	r0, r7
 8004fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_UNLOCK(hsai);
 8004fc8:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
      return  HAL_ERROR;
 8004fcc:	4637      	mov	r7, r6
 8004fce:	e7f4      	b.n	8004fba <HAL_SAI_Transmit_DMA+0xd6>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004fd0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 8004fd4:	2703      	movs	r7, #3
        __HAL_UNLOCK(hsai);
 8004fd6:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fde:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 8004fe2:	e7ea      	b.n	8004fba <HAL_SAI_Transmit_DMA+0xd6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004fe4:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004fe8:	2a01      	cmp	r2, #1
 8004fea:	bf0b      	itete	eq
 8004fec:	2015      	moveq	r0, #21
 8004fee:	2005      	movne	r0, #5
 8004ff0:	2271      	moveq	r2, #113	; 0x71
 8004ff2:	2261      	movne	r2, #97	; 0x61
 8004ff4:	e7bb      	b.n	8004f6e <HAL_SAI_Transmit_DMA+0x8a>
 8004ff6:	bf00      	nop
 8004ff8:	08005149 	.word	0x08005149
 8004ffc:	080050e5 	.word	0x080050e5
 8005000:	080051c5 	.word	0x080051c5

08005004 <HAL_SAI_Receive_DMA>:
  if ((pData == NULL) || (Size == 0U))
 8005004:	2900      	cmp	r1, #0
 8005006:	d057      	beq.n	80050b8 <HAL_SAI_Receive_DMA+0xb4>
{
 8005008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((pData == NULL) || (Size == 0U))
 800500a:	fab2 f582 	clz	r5, r2
 800500e:	096d      	lsrs	r5, r5, #5
 8005010:	2d00      	cmp	r5, #0
 8005012:	d14f      	bne.n	80050b4 <HAL_SAI_Receive_DMA+0xb0>
  if (hsai->State == HAL_SAI_STATE_READY)
 8005014:	f890 6091 	ldrb.w	r6, [r0, #145]	; 0x91
 8005018:	b2f6      	uxtb	r6, r6
 800501a:	2e01      	cmp	r6, #1
 800501c:	d148      	bne.n	80050b0 <HAL_SAI_Receive_DMA+0xac>
    __HAL_LOCK(hsai);
 800501e:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 8005022:	2b01      	cmp	r3, #1
 8005024:	d044      	beq.n	80050b0 <HAL_SAI_Receive_DMA+0xac>
 8005026:	4604      	mov	r4, r0
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8005028:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800502c:	2722      	movs	r7, #34	; 0x22
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800502e:	482a      	ldr	r0, [pc, #168]	; (80050d8 <HAL_SAI_Receive_DMA+0xd4>)
    hsai->pBuffPtr = pData;
 8005030:	67a1      	str	r1, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 8005032:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005036:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
    hsai->XferCount = Size;
 800503a:	f8a4 207e 	strh.w	r2, [r4, #126]	; 0x7e
    __HAL_LOCK(hsai);
 800503e:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8005042:	f884 7091 	strb.w	r7, [r4, #145]	; 0x91
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8005046:	4925      	ldr	r1, [pc, #148]	; (80050dc <HAL_SAI_Receive_DMA+0xd8>)
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8005048:	6418      	str	r0, [r3, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800504a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800504e:	4a24      	ldr	r2, [pc, #144]	; (80050e0 <HAL_SAI_Receive_DMA+0xdc>)
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8005050:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8005052:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005056:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 8005058:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800505c:	651d      	str	r5, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800505e:	6821      	ldr	r1, [r4, #0]
 8005060:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8005064:	311c      	adds	r1, #28
 8005066:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8005068:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800506c:	f7fc fa28 	bl	80014c0 <HAL_DMA_Start_IT>
 8005070:	bb20      	cbnz	r0, 80050bc <HAL_SAI_Receive_DMA+0xb8>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005072:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005074:	6863      	ldr	r3, [r4, #4]
 8005076:	2a08      	cmp	r2, #8
 8005078:	d024      	beq.n	80050c4 <HAL_SAI_Receive_DMA+0xc0>
 800507a:	2505      	movs	r5, #5
 800507c:	2261      	movs	r2, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800507e:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005080:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_WCKCFG;
 8005082:	2b01      	cmp	r3, #1
 8005084:	bf88      	it	hi
 8005086:	462a      	movhi	r2, r5
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005088:	690b      	ldr	r3, [r1, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800508e:	6822      	ldr	r2, [r4, #0]
 8005090:	6813      	ldr	r3, [r2, #0]
 8005092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005096:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8005098:	6823      	ldr	r3, [r4, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	03d2      	lsls	r2, r2, #15
 800509e:	d403      	bmi.n	80050a8 <HAL_SAI_Receive_DMA+0xa4>
      __HAL_SAI_ENABLE(hsai);
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80050a6:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 80050a8:	2300      	movs	r3, #0
 80050aa:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 80050ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80050b0:	2002      	movs	r0, #2
}
 80050b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 80050b4:	2001      	movs	r0, #1
}
 80050b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 80050b8:	2001      	movs	r0, #1
}
 80050ba:	4770      	bx	lr
      __HAL_UNLOCK(hsai);
 80050bc:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
      return  HAL_ERROR;
 80050c0:	4630      	mov	r0, r6
}
 80050c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80050c4:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80050c8:	2a01      	cmp	r2, #1
 80050ca:	bf0b      	itete	eq
 80050cc:	2515      	moveq	r5, #21
 80050ce:	2505      	movne	r5, #5
 80050d0:	2271      	moveq	r2, #113	; 0x71
 80050d2:	2261      	movne	r2, #97	; 0x61
 80050d4:	e7d3      	b.n	800507e <HAL_SAI_Receive_DMA+0x7a>
 80050d6:	bf00      	nop
 80050d8:	080051b9 	.word	0x080051b9
 80050dc:	08005155 	.word	0x08005155
 80050e0:	080051c5 	.word	0x080051c5

080050e4 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80050e4:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80050e6:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050e8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80050ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ee:	d01a      	beq.n	8005126 <SAI_DMATxCplt+0x42>
  {
    hsai->XferCount = 0;
 80050f0:	2300      	movs	r3, #0

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80050f2:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 80050f4:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80050f8:	6813      	ldr	r3, [r2, #0]
 80050fa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80050fe:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005100:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005102:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005104:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005106:	d011      	beq.n	800512c <SAI_DMATxCplt+0x48>
 8005108:	f06f 0261 	mvn.w	r2, #97	; 0x61
 800510c:	f06f 0505 	mvn.w	r5, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005110:	3b02      	subs	r3, #2

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005112:	6801      	ldr	r1, [r0, #0]

    hsai->State = HAL_SAI_STATE_READY;
 8005114:	2401      	movs	r4, #1
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005116:	42a3      	cmp	r3, r4
 8005118:	bf88      	it	hi
 800511a:	462a      	movhi	r2, r5
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800511c:	690b      	ldr	r3, [r1, #16]
 800511e:	4013      	ands	r3, r2
 8005120:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 8005122:	f880 4091 	strb.w	r4, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8005126:	f002 fb49 	bl	80077bc <HAL_SAI_TxCpltCallback>
#endif
}
 800512a:	bd38      	pop	{r3, r4, r5, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800512c:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005130:	2a01      	cmp	r2, #1
 8005132:	bf0b      	itete	eq
 8005134:	f06f 0271 	mvneq.w	r2, #113	; 0x71
 8005138:	f06f 0261 	mvnne.w	r2, #97	; 0x61
 800513c:	f06f 0515 	mvneq.w	r5, #21
 8005140:	f06f 0505 	mvnne.w	r5, #5
 8005144:	e7e4      	b.n	8005110 <SAI_DMATxCplt+0x2c>
 8005146:	bf00      	nop

08005148 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005148:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800514a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800514c:	f002 fb38 	bl	80077c0 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8005150:	bd08      	pop	{r3, pc}
 8005152:	bf00      	nop

08005154 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005154:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005156:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005158:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800515a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800515e:	d01a      	beq.n	8005196 <SAI_DMARxCplt+0x42>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005160:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 8005162:	2100      	movs	r1, #0
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005164:	6813      	ldr	r3, [r2, #0]
 8005166:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800516a:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800516c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    hsai->XferCount = 0;
 800516e:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005172:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005174:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005176:	d011      	beq.n	800519c <SAI_DMARxCplt+0x48>
 8005178:	f06f 0261 	mvn.w	r2, #97	; 0x61
 800517c:	f06f 0505 	mvn.w	r5, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005180:	3b02      	subs	r3, #2

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005182:	6801      	ldr	r1, [r0, #0]

    hsai->State = HAL_SAI_STATE_READY;
 8005184:	2401      	movs	r4, #1
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005186:	42a3      	cmp	r3, r4
 8005188:	bf88      	it	hi
 800518a:	462a      	movhi	r2, r5
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800518c:	690b      	ldr	r3, [r1, #16]
 800518e:	4013      	ands	r3, r2
 8005190:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 8005192:	f880 4091 	strb.w	r4, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8005196:	f002 fb15 	bl	80077c4 <HAL_SAI_RxCpltCallback>
#endif
}
 800519a:	bd38      	pop	{r3, r4, r5, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800519c:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80051a0:	2a01      	cmp	r2, #1
 80051a2:	bf0b      	itete	eq
 80051a4:	f06f 0271 	mvneq.w	r2, #113	; 0x71
 80051a8:	f06f 0261 	mvnne.w	r2, #97	; 0x61
 80051ac:	f06f 0515 	mvneq.w	r5, #21
 80051b0:	f06f 0505 	mvnne.w	r5, #5
 80051b4:	e7e4      	b.n	8005180 <SAI_DMARxCplt+0x2c>
 80051b6:	bf00      	nop

080051b8 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80051b8:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80051ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80051bc:	f002 fb54 	bl	8007868 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 80051c0:	bd08      	pop	{r3, pc}
 80051c2:	bf00      	nop

080051c4 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80051c4:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051c6:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80051c8:	f7fd f9a0 	bl	800250c <HAL_DMA_GetError>
 80051cc:	2802      	cmp	r0, #2
 80051ce:	d02a      	beq.n	8005226 <SAI_DMAError+0x62>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80051d0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80051d4:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80051d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80051da:	4a17      	ldr	r2, [pc, #92]	; (8005238 <SAI_DMAError+0x74>)
 80051dc:	4d17      	ldr	r5, [pc, #92]	; (800523c <SAI_DMAError+0x78>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80051de:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80051e2:	680b      	ldr	r3, [r1, #0]
 80051e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80051e8:	600b      	str	r3, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80051ea:	6812      	ldr	r2, [r2, #0]
  __HAL_SAI_DISABLE(hsai);
 80051ec:	6820      	ldr	r0, [r4, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80051ee:	fba5 3202 	umull	r3, r2, r5, r2
  __HAL_SAI_DISABLE(hsai);
 80051f2:	6801      	ldr	r1, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80051f4:	0b12      	lsrs	r2, r2, #12
  __HAL_SAI_DISABLE(hsai);
 80051f6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
    if (count == 0U)
 80051fa:	0093      	lsls	r3, r2, #2
  __HAL_SAI_DISABLE(hsai);
 80051fc:	6001      	str	r1, [r0, #0]
    if (count == 0U)
 80051fe:	b19a      	cbz	r2, 8005228 <SAI_DMAError+0x64>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005200:	6821      	ldr	r1, [r4, #0]
    count--;
 8005202:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005204:	680a      	ldr	r2, [r1, #0]
 8005206:	03d0      	lsls	r0, r2, #15
 8005208:	d504      	bpl.n	8005214 <SAI_DMAError+0x50>
    if (count == 0U)
 800520a:	b16b      	cbz	r3, 8005228 <SAI_DMAError+0x64>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800520c:	680a      	ldr	r2, [r1, #0]
    count--;
 800520e:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005210:	03d2      	lsls	r2, r2, #15
 8005212:	d4fa      	bmi.n	800520a <SAI_DMAError+0x46>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8005214:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8005216:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8005218:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
 800521a:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 800521e:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 8005222:	f002 fac9 	bl	80077b8 <HAL_SAI_ErrorCallback>
#endif
  }
}
 8005226:	bd38      	pop	{r3, r4, r5, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005228:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800522c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005230:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8005234:	e7ee      	b.n	8005214 <SAI_DMAError+0x50>
 8005236:	bf00      	nop
 8005238:	20000014 	.word	0x20000014
 800523c:	95cbec1b 	.word	0x95cbec1b

08005240 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005244:	4605      	mov	r5, r0
 8005246:	b087      	sub	sp, #28
 8005248:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800524a:	f7fb f8a9 	bl	80003a0 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800524e:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8005250:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005252:	6828      	ldr	r0, [r5, #0]
 8005254:	f001 fb4c 	bl	80068f0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005258:	4604      	mov	r4, r0
 800525a:	b118      	cbz	r0, 8005264 <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800525c:	4620      	mov	r0, r4
 800525e:	b007      	add	sp, #28
 8005260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005264:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8005266:	6828      	ldr	r0, [r5, #0]
 8005268:	0409      	lsls	r1, r1, #16
 800526a:	f001 fdad 	bl	8006dc8 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800526e:	4604      	mov	r4, r0
 8005270:	2800      	cmp	r0, #0
 8005272:	d1f3      	bne.n	800525c <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  config.DataLength    = 8U;
 8005278:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800527a:	2130      	movs	r1, #48	; 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800527c:	9004      	str	r0, [sp, #16]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800527e:	9200      	str	r2, [sp, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005280:	2202      	movs	r2, #2
  config.DataLength    = 8U;
 8005282:	9301      	str	r3, [sp, #4]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005284:	2301      	movs	r3, #1
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005286:	9102      	str	r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005288:	4669      	mov	r1, sp
 800528a:	6828      	ldr	r0, [r5, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800528c:	9203      	str	r2, [sp, #12]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800528e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005290:	f001 fb18 	bl	80068c4 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005294:	6828      	ldr	r0, [r5, #0]
 8005296:	f001 fe53 	bl	8006f40 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800529a:	4604      	mov	r4, r0
 800529c:	2800      	cmp	r0, #0
 800529e:	d1dd      	bne.n	800525c <SD_FindSCR+0x1c>
  uint32_t index = 0U;
 80052a0:	4681      	mov	r9, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 80052a2:	4683      	mov	fp, r0
 80052a4:	4682      	mov	sl, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80052a6:	f240 582a 	movw	r8, #1322	; 0x52a
 80052aa:	e004      	b.n	80052b6 <SD_FindSCR+0x76>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80052ac:	f7fb f878 	bl	80003a0 <HAL_GetTick>
 80052b0:	1b80      	subs	r0, r0, r6
 80052b2:	3001      	adds	r0, #1
 80052b4:	d025      	beq.n	8005302 <SD_FindSCR+0xc2>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80052b6:	6828      	ldr	r0, [r5, #0]
 80052b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80052ba:	ea13 0f08 	tst.w	r3, r8
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80052be:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80052c0:	d10e      	bne.n	80052e0 <SD_FindSCR+0xa0>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80052c2:	031b      	lsls	r3, r3, #12
 80052c4:	d4f2      	bmi.n	80052ac <SD_FindSCR+0x6c>
 80052c6:	f1b9 0f00 	cmp.w	r9, #0
 80052ca:	d1ef      	bne.n	80052ac <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80052cc:	f001 fae0 	bl	8006890 <SDMMC_ReadFIFO>
 80052d0:	4682      	mov	sl, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80052d2:	6828      	ldr	r0, [r5, #0]
      index++;
 80052d4:	f04f 0901 	mov.w	r9, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80052d8:	f001 fada 	bl	8006890 <SDMMC_ReadFIFO>
 80052dc:	4683      	mov	fp, r0
 80052de:	e7e5      	b.n	80052ac <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80052e0:	0719      	lsls	r1, r3, #28
 80052e2:	d411      	bmi.n	8005308 <SD_FindSCR+0xc8>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80052e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80052e6:	079a      	lsls	r2, r3, #30
 80052e8:	d411      	bmi.n	800530e <SD_FindSCR+0xce>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80052ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80052ec:	069b      	lsls	r3, r3, #26
 80052ee:	d411      	bmi.n	8005314 <SD_FindSCR+0xd4>
 80052f0:	fa9b f28b 	rev.w	r2, fp
 80052f4:	fa9a f38a 	rev.w	r3, sl
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80052f8:	4908      	ldr	r1, [pc, #32]	; (800531c <SD_FindSCR+0xdc>)
 80052fa:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80052fc:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 8005300:	e7ac      	b.n	800525c <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 8005302:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005306:	e7a9      	b.n	800525c <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005308:	2408      	movs	r4, #8
 800530a:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800530c:	e7a6      	b.n	800525c <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800530e:	2402      	movs	r4, #2
 8005310:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005312:	e7a3      	b.n	800525c <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005314:	2420      	movs	r4, #32
 8005316:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8005318:	e7a0      	b.n	800525c <SD_FindSCR+0x1c>
 800531a:	bf00      	nop
 800531c:	18000f3a 	.word	0x18000f3a

08005320 <HAL_SD_ReadBlocks>:
{
 8005320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005324:	460d      	mov	r5, r1
 8005326:	b086      	sub	sp, #24
 8005328:	4604      	mov	r4, r0
 800532a:	4690      	mov	r8, r2
 800532c:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 800532e:	f7fb f837 	bl	80003a0 <HAL_GetTick>
  if(NULL == pData)
 8005332:	2d00      	cmp	r5, #0
 8005334:	d070      	beq.n	8005418 <HAL_SD_ReadBlocks+0xf8>
 8005336:	4607      	mov	r7, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8005338:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 800533c:	b2c0      	uxtb	r0, r0
 800533e:	2801      	cmp	r0, #1
 8005340:	d007      	beq.n	8005352 <HAL_SD_ReadBlocks+0x32>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005342:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005344:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005346:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800534a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800534c:	b006      	add	sp, #24
 800534e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005352:	eb08 0306 	add.w	r3, r8, r6
 8005356:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005358:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800535a:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800535c:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800535e:	d863      	bhi.n	8005428 <HAL_SD_ReadBlocks+0x108>
    hsd->Instance->DCTRL = 0U;
 8005360:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8005362:	2203      	movs	r2, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005364:	f04f 0902 	mov.w	r9, #2
    hsd->State = HAL_SD_STATE_BUSY;
 8005368:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800536c:	2290      	movs	r2, #144	; 0x90
    hsd->Instance->DCTRL = 0U;
 800536e:	62d9      	str	r1, [r3, #44]	; 0x2c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005370:	0271      	lsls	r1, r6, #9
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005372:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005374:	9101      	str	r1, [sp, #4]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005376:	4669      	mov	r1, sp
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005378:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800537a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800537e:	6820      	ldr	r0, [r4, #0]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005380:	9300      	str	r3, [sp, #0]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005382:	f04f 0300 	mov.w	r3, #0
      add *= 512U;
 8005386:	bf18      	it	ne
 8005388:	ea4f 2848 	movne.w	r8, r8, lsl #9
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800538c:	9202      	str	r2, [sp, #8]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800538e:	9305      	str	r3, [sp, #20]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005390:	e9cd 9303 	strd	r9, r3, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005394:	f001 fa96 	bl	80068c4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005398:	6822      	ldr	r2, [r4, #0]
    if(NumberOfBlocks > 1U)
 800539a:	2e01      	cmp	r6, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800539c:	68d3      	ldr	r3, [r2, #12]
 800539e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053a2:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 80053a4:	d953      	bls.n	800544e <HAL_SD_ReadBlocks+0x12e>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80053a6:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80053aa:	4641      	mov	r1, r8
 80053ac:	6820      	ldr	r0, [r4, #0]
 80053ae:	f001 fb27 	bl	8006a00 <SDMMC_CmdReadMultiBlock>
 80053b2:	4603      	mov	r3, r0
 80053b4:	6820      	ldr	r0, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d13d      	bne.n	8005436 <HAL_SD_ReadBlocks+0x116>
    dataremaining = config.DataLength;
 80053ba:	f8dd 9004 	ldr.w	r9, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80053be:	e006      	b.n	80053ce <HAL_SD_ReadBlocks+0xae>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80053c0:	f7fa ffee 	bl	80003a0 <HAL_GetTick>
 80053c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053c6:	1bc0      	subs	r0, r0, r7
 80053c8:	4298      	cmp	r0, r3
 80053ca:	d274      	bcs.n	80054b6 <HAL_SD_ReadBlocks+0x196>
 80053cc:	6820      	ldr	r0, [r4, #0]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80053ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80053d0:	f413 7f95 	tst.w	r3, #298	; 0x12a
 80053d4:	d143      	bne.n	800545e <HAL_SD_ReadBlocks+0x13e>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80053d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80053d8:	0419      	lsls	r1, r3, #16
 80053da:	d5f1      	bpl.n	80053c0 <HAL_SD_ReadBlocks+0xa0>
 80053dc:	f1b9 0f1f 	cmp.w	r9, #31
 80053e0:	d9ee      	bls.n	80053c0 <HAL_SD_ReadBlocks+0xa0>
 80053e2:	f105 0a04 	add.w	sl, r5, #4
 80053e6:	f105 0824 	add.w	r8, r5, #36	; 0x24
 80053ea:	e000      	b.n	80053ee <HAL_SD_ReadBlocks+0xce>
 80053ec:	6820      	ldr	r0, [r4, #0]
          data = SDMMC_ReadFIFO(hsd->Instance);
 80053ee:	f001 fa4f 	bl	8006890 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 80053f2:	f80a 0c04 	strb.w	r0, [sl, #-4]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80053f6:	0a02      	lsrs	r2, r0, #8
 80053f8:	f10a 0a04 	add.w	sl, sl, #4
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80053fc:	0c03      	lsrs	r3, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80053fe:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005400:	f80a 2c07 	strb.w	r2, [sl, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005404:	f80a 3c06 	strb.w	r3, [sl, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005408:	f80a 0c05 	strb.w	r0, [sl, #-5]
        for(count = 0U; count < 8U; count++)
 800540c:	45c2      	cmp	sl, r8
 800540e:	d1ed      	bne.n	80053ec <HAL_SD_ReadBlocks+0xcc>
 8005410:	3520      	adds	r5, #32
        dataremaining -= 32U;
 8005412:	f1a9 0920 	sub.w	r9, r9, #32
 8005416:	e7d3      	b.n	80053c0 <HAL_SD_ReadBlocks+0xa0>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005418:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800541a:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800541c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005420:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8005422:	b006      	add	sp, #24
 8005424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005428:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800542a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800542e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8005430:	b006      	add	sp, #24
 8005432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005436:	4a39      	ldr	r2, [pc, #228]	; (800551c <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 8005438:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 800543a:	2500      	movs	r5, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800543c:	6382      	str	r2, [r0, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800543e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          return HAL_ERROR;
 8005440:	4608      	mov	r0, r1
          hsd->ErrorCode |= errorstate;
 8005442:	4313      	orrs	r3, r2
 8005444:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005446:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800544a:	6325      	str	r5, [r4, #48]	; 0x30
          return HAL_ERROR;
 800544c:	e77e      	b.n	800534c <HAL_SD_ReadBlocks+0x2c>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800544e:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005450:	4641      	mov	r1, r8
 8005452:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005454:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005456:	f001 fa8f 	bl	8006978 <SDMMC_CmdReadSingleBlock>
 800545a:	4603      	mov	r3, r0
 800545c:	e7aa      	b.n	80053b4 <HAL_SD_ReadBlocks+0x94>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800545e:	68c3      	ldr	r3, [r0, #12]
 8005460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005464:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800546a:	05d2      	lsls	r2, r2, #23
 800546c:	d50b      	bpl.n	8005486 <HAL_SD_ReadBlocks+0x166>
 800546e:	2e01      	cmp	r6, #1
 8005470:	d909      	bls.n	8005486 <HAL_SD_ReadBlocks+0x166>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005472:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005474:	2a03      	cmp	r2, #3
 8005476:	d006      	beq.n	8005486 <HAL_SD_ReadBlocks+0x166>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005478:	4618      	mov	r0, r3
 800547a:	f001 fb8d 	bl	8006b98 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800547e:	4603      	mov	r3, r0
 8005480:	2800      	cmp	r0, #0
 8005482:	d145      	bne.n	8005510 <HAL_SD_ReadBlocks+0x1f0>
 8005484:	6823      	ldr	r3, [r4, #0]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005488:	f012 0208 	ands.w	r2, r2, #8
 800548c:	d121      	bne.n	80054d2 <HAL_SD_ReadBlocks+0x1b2>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800548e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005490:	f011 0102 	ands.w	r1, r1, #2
 8005494:	d12a      	bne.n	80054ec <HAL_SD_ReadBlocks+0x1cc>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005496:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005498:	f010 0020 	ands.w	r0, r0, #32
 800549c:	d032      	beq.n	8005504 <HAL_SD_ReadBlocks+0x1e4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800549e:	481f      	ldr	r0, [pc, #124]	; (800551c <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 80054a0:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054a2:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 80054a4:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80054a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80054a8:	f043 0320 	orr.w	r3, r3, #32
 80054ac:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80054ae:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80054b2:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 80054b4:	e74a      	b.n	800534c <HAL_SD_ReadBlocks+0x2c>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054b6:	6823      	ldr	r3, [r4, #0]
        hsd->State= HAL_SD_STATE_READY;
 80054b8:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054ba:	4d18      	ldr	r5, [pc, #96]	; (800551c <HAL_SD_ReadBlocks+0x1fc>)
        hsd->Context = SD_CONTEXT_NONE;
 80054bc:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 80054be:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054c0:	639d      	str	r5, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80054c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80054c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054c8:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80054ca:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80054ce:	6322      	str	r2, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 80054d0:	e73c      	b.n	800534c <HAL_SD_ReadBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054d2:	4812      	ldr	r0, [pc, #72]	; (800551c <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 80054d4:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 80054d6:	2100      	movs	r1, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054d8:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 80054da:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80054dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80054de:	f043 0308 	orr.w	r3, r3, #8
 80054e2:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80054e4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80054e8:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 80054ea:	e72f      	b.n	800534c <HAL_SD_ReadBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054ec:	480b      	ldr	r0, [pc, #44]	; (800551c <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 80054ee:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054f0:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 80054f2:	4608      	mov	r0, r1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80054f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80054f6:	f043 0302 	orr.w	r3, r3, #2
 80054fa:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80054fc:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005500:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005502:	e723      	b.n	800534c <HAL_SD_ReadBlocks+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005504:	4906      	ldr	r1, [pc, #24]	; (8005520 <HAL_SD_ReadBlocks+0x200>)
    hsd->State = HAL_SD_STATE_READY;
 8005506:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005508:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800550a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 800550e:	e71d      	b.n	800534c <HAL_SD_ReadBlocks+0x2c>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005510:	6822      	ldr	r2, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 8005512:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005514:	4801      	ldr	r0, [pc, #4]	; (800551c <HAL_SD_ReadBlocks+0x1fc>)
          hsd->Context = SD_CONTEXT_NONE;
 8005516:	2500      	movs	r5, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005518:	6390      	str	r0, [r2, #56]	; 0x38
 800551a:	e790      	b.n	800543e <HAL_SD_ReadBlocks+0x11e>
 800551c:	1fe00fff 	.word	0x1fe00fff
 8005520:	18000f3a 	.word	0x18000f3a

08005524 <HAL_SD_WriteBlocks>:
{
 8005524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005528:	460d      	mov	r5, r1
 800552a:	b089      	sub	sp, #36	; 0x24
 800552c:	4604      	mov	r4, r0
 800552e:	4616      	mov	r6, r2
 8005530:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8005532:	f7fa ff35 	bl	80003a0 <HAL_GetTick>
  if(NULL == pData)
 8005536:	2d00      	cmp	r5, #0
 8005538:	d05d      	beq.n	80055f6 <HAL_SD_WriteBlocks+0xd2>
 800553a:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 800553c:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8005540:	b2c0      	uxtb	r0, r0
 8005542:	2801      	cmp	r0, #1
 8005544:	d007      	beq.n	8005556 <HAL_SD_WriteBlocks+0x32>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005546:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005548:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800554a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800554e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8005550:	b009      	add	sp, #36	; 0x24
 8005552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005556:	19f3      	adds	r3, r6, r7
 8005558:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800555a:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800555c:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800555e:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005560:	d851      	bhi.n	8005606 <HAL_SD_WriteBlocks+0xe2>
    hsd->Instance->DCTRL = 0U;
 8005562:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8005564:	2203      	movs	r2, #3
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005566:	0278      	lsls	r0, r7, #9
    hsd->State = HAL_SD_STATE_BUSY;
 8005568:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800556c:	2290      	movs	r2, #144	; 0x90
    hsd->Instance->DCTRL = 0U;
 800556e:	62d9      	str	r1, [r3, #44]	; 0x2c
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005570:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005574:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005576:	9102      	str	r1, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005578:	a902      	add	r1, sp, #8
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800557a:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800557c:	f04f 0300 	mov.w	r3, #0
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005580:	e9cd 0203 	strd	r0, r2, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005584:	6820      	ldr	r0, [r4, #0]
      add *= 512U;
 8005586:	bf18      	it	ne
 8005588:	0276      	lslne	r6, r6, #9
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800558a:	9307      	str	r3, [sp, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800558c:	e9cd 3305 	strd	r3, r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005590:	f001 f998 	bl	80068c4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005594:	6822      	ldr	r2, [r4, #0]
    if(NumberOfBlocks > 1U)
 8005596:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005598:	68d3      	ldr	r3, [r2, #12]
 800559a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800559e:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 80055a0:	d944      	bls.n	800562c <HAL_SD_WriteBlocks+0x108>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80055a2:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80055a4:	4631      	mov	r1, r6
 80055a6:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80055a8:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80055aa:	f001 fab1 	bl	8006b10 <SDMMC_CmdWriteMultiBlock>
 80055ae:	4603      	mov	r3, r0
 80055b0:	6820      	ldr	r0, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055b2:	bb7b      	cbnz	r3, 8005614 <HAL_SD_WriteBlocks+0xf0>
    dataremaining = config.DataLength;
 80055b4:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80055b6:	e007      	b.n	80055c8 <HAL_SD_WriteBlocks+0xa4>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80055b8:	f7fa fef2 	bl	80003a0 <HAL_GetTick>
 80055bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80055be:	eba0 0008 	sub.w	r0, r0, r8
 80055c2:	4298      	cmp	r0, r3
 80055c4:	d266      	bcs.n	8005694 <HAL_SD_WriteBlocks+0x170>
 80055c6:	6820      	ldr	r0, [r4, #0]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80055c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80055ca:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 80055ce:	d135      	bne.n	800563c <HAL_SD_WriteBlocks+0x118>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80055d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80055d2:	0459      	lsls	r1, r3, #17
 80055d4:	d5f0      	bpl.n	80055b8 <HAL_SD_WriteBlocks+0x94>
 80055d6:	2e1f      	cmp	r6, #31
 80055d8:	d9ee      	bls.n	80055b8 <HAL_SD_WriteBlocks+0x94>
 80055da:	f105 0920 	add.w	r9, r5, #32
 80055de:	e000      	b.n	80055e2 <HAL_SD_WriteBlocks+0xbe>
 80055e0:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 80055e2:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80055e6:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 80055e8:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80055ea:	f001 f955 	bl	8006898 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80055ee:	454d      	cmp	r5, r9
 80055f0:	d1f6      	bne.n	80055e0 <HAL_SD_WriteBlocks+0xbc>
        dataremaining -= 32U;
 80055f2:	3e20      	subs	r6, #32
 80055f4:	e7e0      	b.n	80055b8 <HAL_SD_WriteBlocks+0x94>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80055f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80055f8:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80055fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055fe:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8005600:	b009      	add	sp, #36	; 0x24
 8005602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005606:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005608:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800560c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800560e:	b009      	add	sp, #36	; 0x24
 8005610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005614:	4a38      	ldr	r2, [pc, #224]	; (80056f8 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 8005616:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 8005618:	2500      	movs	r5, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800561a:	6382      	str	r2, [r0, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800561c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          return HAL_ERROR;
 800561e:	4608      	mov	r0, r1
          hsd->ErrorCode |= errorstate;
 8005620:	4313      	orrs	r3, r2
 8005622:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005624:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005628:	6325      	str	r5, [r4, #48]	; 0x30
          return HAL_ERROR;
 800562a:	e791      	b.n	8005550 <HAL_SD_WriteBlocks+0x2c>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800562c:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800562e:	4631      	mov	r1, r6
 8005630:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005632:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005634:	f001 fa28 	bl	8006a88 <SDMMC_CmdWriteSingleBlock>
 8005638:	4603      	mov	r3, r0
 800563a:	e7b9      	b.n	80055b0 <HAL_SD_WriteBlocks+0x8c>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800563c:	68c3      	ldr	r3, [r0, #12]
 800563e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005642:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005648:	05d2      	lsls	r2, r2, #23
 800564a:	d50b      	bpl.n	8005664 <HAL_SD_WriteBlocks+0x140>
 800564c:	2f01      	cmp	r7, #1
 800564e:	d909      	bls.n	8005664 <HAL_SD_WriteBlocks+0x140>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005650:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005652:	2a03      	cmp	r2, #3
 8005654:	d006      	beq.n	8005664 <HAL_SD_WriteBlocks+0x140>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005656:	4618      	mov	r0, r3
 8005658:	f001 fa9e 	bl	8006b98 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800565c:	4603      	mov	r3, r0
 800565e:	2800      	cmp	r0, #0
 8005660:	d143      	bne.n	80056ea <HAL_SD_WriteBlocks+0x1c6>
 8005662:	6823      	ldr	r3, [r4, #0]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005666:	f012 0208 	ands.w	r2, r2, #8
 800566a:	d11f      	bne.n	80056ac <HAL_SD_WriteBlocks+0x188>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800566c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800566e:	f011 0102 	ands.w	r1, r1, #2
 8005672:	d128      	bne.n	80056c6 <HAL_SD_WriteBlocks+0x1a2>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8005674:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005676:	f010 0010 	ands.w	r0, r0, #16
 800567a:	d030      	beq.n	80056de <HAL_SD_WriteBlocks+0x1ba>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800567c:	481e      	ldr	r0, [pc, #120]	; (80056f8 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 800567e:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005680:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005682:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005684:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005686:	f043 0310 	orr.w	r3, r3, #16
 800568a:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800568c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005690:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005692:	e75d      	b.n	8005550 <HAL_SD_WriteBlocks+0x2c>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005694:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 8005696:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005698:	4d17      	ldr	r5, [pc, #92]	; (80056f8 <HAL_SD_WriteBlocks+0x1d4>)
        hsd->Context = SD_CONTEXT_NONE;
 800569a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800569c:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800569e:	638d      	str	r5, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80056a0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80056a2:	63a1      	str	r1, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80056a4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80056a8:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 80056aa:	e751      	b.n	8005550 <HAL_SD_WriteBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056ac:	4812      	ldr	r0, [pc, #72]	; (80056f8 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 80056ae:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 80056b0:	2100      	movs	r1, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056b2:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 80056b4:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80056b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80056b8:	f043 0308 	orr.w	r3, r3, #8
 80056bc:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80056be:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80056c2:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 80056c4:	e744      	b.n	8005550 <HAL_SD_WriteBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056c6:	480c      	ldr	r0, [pc, #48]	; (80056f8 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 80056c8:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056ca:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 80056cc:	4608      	mov	r0, r1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80056ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80056d0:	f043 0302 	orr.w	r3, r3, #2
 80056d4:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80056d6:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80056da:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 80056dc:	e738      	b.n	8005550 <HAL_SD_WriteBlocks+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80056de:	4907      	ldr	r1, [pc, #28]	; (80056fc <HAL_SD_WriteBlocks+0x1d8>)
    hsd->State = HAL_SD_STATE_READY;
 80056e0:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80056e2:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80056e4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 80056e8:	e732      	b.n	8005550 <HAL_SD_WriteBlocks+0x2c>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056ea:	6822      	ldr	r2, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 80056ec:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056ee:	4802      	ldr	r0, [pc, #8]	; (80056f8 <HAL_SD_WriteBlocks+0x1d4>)
          hsd->Context = SD_CONTEXT_NONE;
 80056f0:	2500      	movs	r5, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056f2:	6390      	str	r0, [r2, #56]	; 0x38
 80056f4:	e792      	b.n	800561c <HAL_SD_WriteBlocks+0xf8>
 80056f6:	bf00      	nop
 80056f8:	1fe00fff 	.word	0x1fe00fff
 80056fc:	18000f3a 	.word	0x18000f3a

08005700 <HAL_SD_ErrorCallback>:
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop

08005704 <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop

08005708 <HAL_SD_GetCardCSD>:
{
 8005708:	4603      	mov	r3, r0
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800570a:	2000      	movs	r0, #0
{
 800570c:	b430      	push	{r4, r5}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800570e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005710:	0f92      	lsrs	r2, r2, #30
 8005712:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005714:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005716:	f3c2 6283 	ubfx	r2, r2, #26, #4
 800571a:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800571c:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
 8005720:	f002 0203 	and.w	r2, r2, #3
 8005724:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005726:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 800572a:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800572c:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 8005730:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005732:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8005736:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005738:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800573a:	0d12      	lsrs	r2, r2, #20
 800573c:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800573e:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8005742:	f002 020f 	and.w	r2, r2, #15
 8005746:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005748:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800574a:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800574e:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005750:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005752:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8005756:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005758:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800575a:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800575e:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005760:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005762:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8005766:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005768:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800576a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800576c:	2a00      	cmp	r2, #0
 800576e:	f040 8086 	bne.w	800587e <HAL_SD_GetCardCSD+0x176>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005772:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8005774:	f640 72fc 	movw	r2, #4092	; 0xffc
 8005778:	6e98      	ldr	r0, [r3, #104]	; 0x68
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800577a:	2401      	movs	r4, #1
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800577c:	ea02 0285 	and.w	r2, r2, r5, lsl #2
    hsd->SdCard.LogBlockSize = 512U;
 8005780:	f44f 7500 	mov.w	r5, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005784:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8005788:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800578a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800578c:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 8005790:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005792:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
 8005796:	f002 0207 	and.w	r2, r2, #7
 800579a:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800579c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800579e:	f3c2 5242 	ubfx	r2, r2, #21, #3
 80057a2:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80057a4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80057a6:	f3c2 4282 	ubfx	r2, r2, #18, #3
 80057aa:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80057ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80057ae:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 80057b2:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80057b4:	690a      	ldr	r2, [r1, #16]
 80057b6:	4422      	add	r2, r4
 80057b8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80057ba:	7e08      	ldrb	r0, [r1, #24]
 80057bc:	f000 0007 	and.w	r0, r0, #7
 80057c0:	3002      	adds	r0, #2
 80057c2:	4082      	lsls	r2, r0
 80057c4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80057c6:	7a08      	ldrb	r0, [r1, #8]
    hsd->SdCard.LogBlockSize = 512U;
 80057c8:	659d      	str	r5, [r3, #88]	; 0x58
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80057ca:	f000 000f 	and.w	r0, r0, #15
 80057ce:	fa04 f000 	lsl.w	r0, r4, r0
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80057d2:	0a44      	lsrs	r4, r0, #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80057d4:	6518      	str	r0, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80057d6:	fb02 f204 	mul.w	r2, r2, r4
 80057da:	655a      	str	r2, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80057dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  pCSD->Reserved3 = 0;
 80057de:	2500      	movs	r5, #0
  pCSD->Reserved4 = 1;
 80057e0:	2401      	movs	r4, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80057e2:	f3c2 3280 	ubfx	r2, r2, #14, #1
  return HAL_OK;
 80057e6:	4628      	mov	r0, r5
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80057e8:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80057ea:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80057ec:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 80057f0:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80057f2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80057f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80057f8:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80057fa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80057fc:	0fd2      	lsrs	r2, r2, #31
 80057fe:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005800:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005802:	f3c2 7241 	ubfx	r2, r2, #29, #2
 8005806:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005808:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800580a:	f3c2 6282 	ubfx	r2, r2, #26, #3
 800580e:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005810:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005812:	f3c2 5283 	ubfx	r2, r2, #22, #4
 8005816:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005818:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800581a:	f3c2 5240 	ubfx	r2, r2, #21, #1
 800581e:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8005822:	f881 5021 	strb.w	r5, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005826:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 800582a:	4022      	ands	r2, r4
 800582c:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005830:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005832:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8005836:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800583a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800583c:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8005840:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005844:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005846:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800584a:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800584e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005850:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8005854:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005858:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800585a:	f3c2 2281 	ubfx	r2, r2, #10, #2
 800585e:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005862:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005864:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8005868:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800586c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800586e:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8005872:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8005876:	f881 402a 	strb.w	r4, [r1, #42]	; 0x2a
}
 800587a:	bc30      	pop	{r4, r5}
 800587c:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800587e:	2a01      	cmp	r2, #1
 8005880:	d00c      	beq.n	800589c <HAL_SD_GetCardCSD+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005882:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 8005884:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005886:	4c0e      	ldr	r4, [pc, #56]	; (80058c0 <HAL_SD_GetCardCSD+0x1b8>)
    return HAL_ERROR;
 8005888:	4608      	mov	r0, r1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800588a:	6394      	str	r4, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800588c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800588e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005892:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005894:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 8005898:	bc30      	pop	{r4, r5}
 800589a:	4770      	bx	lr
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800589c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    hsd->SdCard.BlockSize = 512U;
 800589e:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80058a2:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
 80058a6:	0412      	lsls	r2, r2, #16
 80058a8:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 80058ac:	4322      	orrs	r2, r4
 80058ae:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80058b0:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 80058b2:	6518      	str	r0, [r3, #80]	; 0x50
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80058b4:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80058b6:	6598      	str	r0, [r3, #88]	; 0x58
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80058b8:	0292      	lsls	r2, r2, #10
 80058ba:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80058bc:	655a      	str	r2, [r3, #84]	; 0x54
 80058be:	e78d      	b.n	80057dc <HAL_SD_GetCardCSD+0xd4>
 80058c0:	1fe00fff 	.word	0x1fe00fff

080058c4 <HAL_SD_InitCard>:
{
 80058c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80058c8:	6982      	ldr	r2, [r0, #24]
{
 80058ca:	b098      	sub	sp, #96	; 0x60
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80058cc:	2300      	movs	r3, #0
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80058ce:	21fa      	movs	r1, #250	; 0xfa
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80058d0:	2a02      	cmp	r2, #2
{
 80058d2:	4604      	mov	r4, r0
 80058d4:	6805      	ldr	r5, [r0, #0]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80058d6:	910b      	str	r1, [sp, #44]	; 0x2c
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80058d8:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80058dc:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80058e0:	d104      	bne.n	80058ec <HAL_SD_InitCard+0x28>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80058e2:	682b      	ldr	r3, [r5, #0]
 80058e4:	f043 0310 	orr.w	r3, r3, #16
 80058e8:	602b      	str	r3, [r5, #0]
 80058ea:	6805      	ldr	r5, [r0, #0]
  (void)SDMMC_Init(hsd->Instance, Init);
 80058ec:	aa0a      	add	r2, sp, #40	; 0x28
 80058ee:	ab07      	add	r3, sp, #28
 80058f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80058f2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80058f6:	4628      	mov	r0, r5
 80058f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058fa:	f000 ffaf 	bl	800685c <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80058fe:	6820      	ldr	r0, [r4, #0]
 8005900:	f000 ffd0 	bl	80068a4 <SDMMC_PowerState_ON>
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 8005904:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005908:	f7fe fef2 	bl	80046f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800590c:	4ba3      	ldr	r3, [pc, #652]	; (8005b9c <HAL_SD_InitCard+0x2d8>)
 800590e:	fba3 3000 	umull	r3, r0, r3, r0
  if(sdmmc_clk != 0U)
 8005912:	0940      	lsrs	r0, r0, #5
 8005914:	d019      	beq.n	800594a <HAL_SD_InitCard+0x86>
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8005916:	4ba2      	ldr	r3, [pc, #648]	; (8005ba0 <HAL_SD_InitCard+0x2dc>)
 8005918:	fbb3 f0f0 	udiv	r0, r3, r0
 800591c:	3001      	adds	r0, #1
 800591e:	f7fa fd45 	bl	80003ac <HAL_Delay>
  __IO uint32_t count = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	9306      	str	r3, [sp, #24]
  uint32_t tickstart = HAL_GetTick();
 8005926:	f7fa fd3b 	bl	80003a0 <HAL_GetTick>
 800592a:	4680      	mov	r8, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800592c:	6820      	ldr	r0, [r4, #0]
 800592e:	f001 f9dd 	bl	8006cec <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005932:	4605      	mov	r5, r0
 8005934:	b168      	cbz	r0, 8005952 <HAL_SD_InitCard+0x8e>
    hsd->State = HAL_SD_STATE_READY;
 8005936:	2601      	movs	r6, #1
 8005938:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800593c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800593e:	431d      	orrs	r5, r3
 8005940:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8005942:	4630      	mov	r0, r6
 8005944:	b018      	add	sp, #96	; 0x60
 8005946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_Delay(2U);
 800594a:	2002      	movs	r0, #2
 800594c:	f7fa fd2e 	bl	80003ac <HAL_Delay>
 8005950:	e7e7      	b.n	8005922 <HAL_SD_InitCard+0x5e>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005952:	6820      	ldr	r0, [r4, #0]
 8005954:	f001 f9f8 	bl	8006d48 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005958:	2800      	cmp	r0, #0
 800595a:	d179      	bne.n	8005a50 <HAL_SD_InitCard+0x18c>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800595c:	2301      	movs	r3, #1
 800595e:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005960:	2100      	movs	r1, #0
 8005962:	6820      	ldr	r0, [r4, #0]
 8005964:	f001 fa30 	bl	8006dc8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005968:	bb08      	cbnz	r0, 80059ae <HAL_SD_InitCard+0xea>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800596a:	9b06      	ldr	r3, [sp, #24]
 800596c:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 8005970:	42b3      	cmp	r3, r6
 8005972:	f200 8109 	bhi.w	8005b88 <HAL_SD_InitCard+0x2c4>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005976:	4f8b      	ldr	r7, [pc, #556]	; (8005ba4 <HAL_SD_InitCard+0x2e0>)
 8005978:	e00c      	b.n	8005994 <HAL_SD_InitCard+0xd0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800597a:	4601      	mov	r1, r0
 800597c:	6820      	ldr	r0, [r4, #0]
 800597e:	f000 ff9d 	bl	80068bc <SDMMC_GetResponse>
    count++;
 8005982:	9b06      	ldr	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005984:	1e02      	subs	r2, r0, #0
    count++;
 8005986:	f103 0301 	add.w	r3, r3, #1
 800598a:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800598c:	9b06      	ldr	r3, [sp, #24]
 800598e:	db11      	blt.n	80059b4 <HAL_SD_InitCard+0xf0>
 8005990:	42b3      	cmp	r3, r6
 8005992:	d80f      	bhi.n	80059b4 <HAL_SD_InitCard+0xf0>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005994:	2100      	movs	r1, #0
 8005996:	6820      	ldr	r0, [r4, #0]
 8005998:	f001 fa16 	bl	8006dc8 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800599c:	4639      	mov	r1, r7
    if(errorstate != HAL_SD_ERROR_NONE)
 800599e:	4605      	mov	r5, r0
 80059a0:	2800      	cmp	r0, #0
 80059a2:	d1c8      	bne.n	8005936 <HAL_SD_InitCard+0x72>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80059a4:	6820      	ldr	r0, [r4, #0]
 80059a6:	f001 fa53 	bl	8006e50 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80059aa:	2800      	cmp	r0, #0
 80059ac:	d0e5      	beq.n	800597a <HAL_SD_InitCard+0xb6>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80059ae:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80059b2:	e7c0      	b.n	8005936 <HAL_SD_InitCard+0x72>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80059b4:	9906      	ldr	r1, [sp, #24]
 80059b6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80059ba:	4299      	cmp	r1, r3
 80059bc:	f200 809d 	bhi.w	8005afa <HAL_SD_InitCard+0x236>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80059c0:	0057      	lsls	r7, r2, #1
 80059c2:	6820      	ldr	r0, [r4, #0]
 80059c4:	d504      	bpl.n	80059d0 <HAL_SD_InitCard+0x10c>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80059c6:	69a3      	ldr	r3, [r4, #24]
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80059c8:	2101      	movs	r1, #1
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80059ca:	2b02      	cmp	r3, #2
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80059cc:	63e1      	str	r1, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80059ce:	d051      	beq.n	8005a74 <HAL_SD_InitCard+0x1b0>
  uint16_t sd_rca = 1U;
 80059d0:	2301      	movs	r3, #1
 80059d2:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80059d6:	f000 ff6d 	bl	80068b4 <SDMMC_GetPowerState>
 80059da:	2800      	cmp	r0, #0
 80059dc:	d044      	beq.n	8005a68 <HAL_SD_InitCard+0x1a4>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80059de:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	2a03      	cmp	r2, #3
 80059e4:	d125      	bne.n	8005a32 <HAL_SD_InitCard+0x16e>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80059e6:	4618      	mov	r0, r3
 80059e8:	2104      	movs	r1, #4
 80059ea:	f000 ff67 	bl	80068bc <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80059ee:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80059f0:	0d03      	lsrs	r3, r0, #20
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80059f2:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80059f4:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80059f6:	f7ff fe87 	bl	8005708 <HAL_SD_GetCardCSD>
 80059fa:	4606      	mov	r6, r0
 80059fc:	2800      	cmp	r0, #0
 80059fe:	d136      	bne.n	8005a6e <HAL_SD_InitCard+0x1aa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005a00:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005a02:	4603      	mov	r3, r0
 8005a04:	6820      	ldr	r0, [r4, #0]
 8005a06:	0412      	lsls	r2, r2, #16
 8005a08:	f001 f92c 	bl	8006c64 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a0c:	b9b0      	cbnz	r0, 8005a3c <HAL_SD_InitCard+0x178>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005a0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a12:	6820      	ldr	r0, [r4, #0]
 8005a14:	f000 ff6c 	bl	80068f0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	d092      	beq.n	8005942 <HAL_SD_InitCard+0x7e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a1c:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8005a1e:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a20:	4961      	ldr	r1, [pc, #388]	; (8005ba8 <HAL_SD_InitCard+0x2e4>)
    return HAL_ERROR;
 8005a22:	4616      	mov	r6, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a24:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005a26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a28:	4318      	orrs	r0, r3
 8005a2a:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005a2c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_ERROR;
 8005a30:	e787      	b.n	8005942 <HAL_SD_InitCard+0x7e>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005a32:	4618      	mov	r0, r3
 8005a34:	f001 faca 	bl	8006fcc <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	d061      	beq.n	8005b00 <HAL_SD_InitCard+0x23c>
    hsd->State = HAL_SD_STATE_READY;
 8005a3c:	2601      	movs	r6, #1
 8005a3e:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005a42:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005a44:	4308      	orrs	r0, r1
 8005a46:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8005a48:	4630      	mov	r0, r6
 8005a4a:	b018      	add	sp, #96	; 0x60
 8005a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005a50:	6425      	str	r5, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005a52:	6820      	ldr	r0, [r4, #0]
 8005a54:	f001 f94a 	bl	8006cec <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a58:	4605      	mov	r5, r0
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	f47f af6b 	bne.w	8005936 <HAL_SD_InitCard+0x72>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005a60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d181      	bne.n	800596a <HAL_SD_InitCard+0xa6>
 8005a66:	e77b      	b.n	8005960 <HAL_SD_InitCard+0x9c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005a68:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005a6c:	e7e6      	b.n	8005a3c <HAL_SD_InitCard+0x178>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a6e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005a72:	e7e3      	b.n	8005a3c <HAL_SD_InitCard+0x178>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8005a74:	01d6      	lsls	r6, r2, #7
 8005a76:	d5ab      	bpl.n	80059d0 <HAL_SD_InitCard+0x10c>
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005a78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a7c:	65e3      	str	r3, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8005a7e:	6803      	ldr	r3, [r0, #0]
 8005a80:	f043 0308 	orr.w	r3, r3, #8
 8005a84:	6003      	str	r3, [r0, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8005a86:	6820      	ldr	r0, [r4, #0]
 8005a88:	f001 fbf6 	bl	8007278 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 8005a8c:	4605      	mov	r5, r0
 8005a8e:	b130      	cbz	r0, 8005a9e <HAL_SD_InitCard+0x1da>
 8005a90:	e751      	b.n	8005936 <HAL_SD_InitCard+0x72>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005a92:	f7fa fc85 	bl	80003a0 <HAL_GetTick>
 8005a96:	eba0 0008 	sub.w	r0, r0, r8
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	d079      	beq.n	8005b92 <HAL_SD_InitCard+0x2ce>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005aa2:	0155      	lsls	r5, r2, #5
 8005aa4:	d5f5      	bpl.n	8005a92 <HAL_SD_InitCard+0x1ce>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8005aa6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005aaa:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8005aac:	6823      	ldr	r3, [r4, #0]
 8005aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab0:	02d8      	lsls	r0, r3, #11
 8005ab2:	f57f af7c 	bpl.w	80059ae <HAL_SD_InitCard+0xea>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8005ab6:	2001      	movs	r0, #1
 8005ab8:	f7ff fe24 	bl	8005704 <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8005abc:	6822      	ldr	r2, [r4, #0]
 8005abe:	6813      	ldr	r3, [r2, #0]
 8005ac0:	f043 0304 	orr.w	r3, r3, #4
 8005ac4:	6013      	str	r3, [r2, #0]
 8005ac6:	e005      	b.n	8005ad4 <HAL_SD_InitCard+0x210>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005ac8:	f7fa fc6a 	bl	80003a0 <HAL_GetTick>
 8005acc:	eba0 0008 	sub.w	r0, r0, r8
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	d05e      	beq.n	8005b92 <HAL_SD_InitCard+0x2ce>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ad8:	0191      	lsls	r1, r2, #6
 8005ada:	d5f5      	bpl.n	8005ac8 <HAL_SD_InitCard+0x204>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8005adc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ae0:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ae6:	02d2      	lsls	r2, r2, #11
 8005ae8:	d407      	bmi.n	8005afa <HAL_SD_InitCard+0x236>
          hsd->Instance->POWER = 0x13U;
 8005aea:	2113      	movs	r1, #19
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8005aec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
          hsd->Instance->POWER = 0x13U;
 8005af0:	6019      	str	r1, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	639a      	str	r2, [r3, #56]	; 0x38
 8005af6:	6820      	ldr	r0, [r4, #0]
 8005af8:	e76a      	b.n	80059d0 <HAL_SD_InitCard+0x10c>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005afa:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8005afe:	e71a      	b.n	8005936 <HAL_SD_InitCard+0x72>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005b00:	4601      	mov	r1, r0
 8005b02:	6820      	ldr	r0, [r4, #0]
 8005b04:	f000 feda 	bl	80068bc <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005b08:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005b0a:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005b0c:	6820      	ldr	r0, [r4, #0]
 8005b0e:	f000 fed5 	bl	80068bc <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005b12:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005b14:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005b16:	6820      	ldr	r0, [r4, #0]
 8005b18:	f000 fed0 	bl	80068bc <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005b1c:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005b1e:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005b20:	6820      	ldr	r0, [r4, #0]
 8005b22:	f000 fecb 	bl	80068bc <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005b26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005b28:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005b2a:	2b03      	cmp	r3, #3
 8005b2c:	d034      	beq.n	8005b98 <HAL_SD_InitCard+0x2d4>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005b2e:	f10d 0116 	add.w	r1, sp, #22
 8005b32:	6820      	ldr	r0, [r4, #0]
 8005b34:	f001 fac2 	bl	80070bc <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	f47f af7f 	bne.w	8005a3c <HAL_SD_InitCard+0x178>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005b3e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	2a03      	cmp	r2, #3
 8005b44:	f43f af4f 	beq.w	80059e6 <HAL_SD_InitCard+0x122>
    hsd->SdCard.RelCardAdd = sd_rca;
 8005b48:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b4c:	4618      	mov	r0, r3
    hsd->SdCard.RelCardAdd = sd_rca;
 8005b4e:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b50:	0409      	lsls	r1, r1, #16
 8005b52:	f001 fa77 	bl	8007044 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b56:	2800      	cmp	r0, #0
 8005b58:	f47f af70 	bne.w	8005a3c <HAL_SD_InitCard+0x178>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005b5c:	4601      	mov	r1, r0
 8005b5e:	6820      	ldr	r0, [r4, #0]
 8005b60:	f000 feac 	bl	80068bc <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005b64:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005b66:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005b68:	6820      	ldr	r0, [r4, #0]
 8005b6a:	f000 fea7 	bl	80068bc <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005b6e:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005b70:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005b72:	6820      	ldr	r0, [r4, #0]
 8005b74:	f000 fea2 	bl	80068bc <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005b78:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005b7a:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005b7c:	6820      	ldr	r0, [r4, #0]
 8005b7e:	f000 fe9d 	bl	80068bc <SDMMC_GetResponse>
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	66e0      	str	r0, [r4, #108]	; 0x6c
 8005b86:	e72e      	b.n	80059e6 <HAL_SD_InitCard+0x122>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005b88:	9b06      	ldr	r3, [sp, #24]
 8005b8a:	42b3      	cmp	r3, r6
 8005b8c:	d8b5      	bhi.n	8005afa <HAL_SD_InitCard+0x236>
 8005b8e:	6820      	ldr	r0, [r4, #0]
 8005b90:	e71e      	b.n	80059d0 <HAL_SD_InitCard+0x10c>
            return HAL_SD_ERROR_TIMEOUT;
 8005b92:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8005b96:	e6ce      	b.n	8005936 <HAL_SD_InitCard+0x72>
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	e724      	b.n	80059e6 <HAL_SD_InitCard+0x122>
 8005b9c:	10624dd3 	.word	0x10624dd3
 8005ba0:	00012110 	.word	0x00012110
 8005ba4:	c1100000 	.word	0xc1100000
 8005ba8:	1fe00fff 	.word	0x1fe00fff

08005bac <HAL_SD_GetCardStatus>:
{
 8005bac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bb0:	4604      	mov	r4, r0
 8005bb2:	b097      	sub	sp, #92	; 0x5c
 8005bb4:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8005bb6:	f7fa fbf3 	bl	80003a0 <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005bba:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 8005bbc:	4680      	mov	r8, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005bbe:	6820      	ldr	r0, [r4, #0]
 8005bc0:	f000 fe7c 	bl	80068bc <SDMMC_GetResponse>
 8005bc4:	0187      	lsls	r7, r0, #6
 8005bc6:	d422      	bmi.n	8005c0e <HAL_SD_GetCardStatus+0x62>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8005bc8:	2140      	movs	r1, #64	; 0x40
 8005bca:	6820      	ldr	r0, [r4, #0]
 8005bcc:	f000 fe90 	bl	80068f0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bd0:	b308      	cbz	r0, 8005c16 <HAL_SD_GetCardStatus+0x6a>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005bd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005bd4:	63a3      	str	r3, [r4, #56]	; 0x38
 8005bd6:	6823      	ldr	r3, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bd8:	495b      	ldr	r1, [pc, #364]	; (8005d48 <HAL_SD_GetCardStatus+0x19c>)
    hsd->State = HAL_SD_STATE_READY;
 8005bda:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bdc:	6399      	str	r1, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005bde:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
 8005be0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005be2:	4318      	orrs	r0, r3
 8005be4:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005be6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005bea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005bee:	6820      	ldr	r0, [r4, #0]
 8005bf0:	f000 fe7e 	bl	80068f0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bf4:	b138      	cbz	r0, 8005c06 <HAL_SD_GetCardStatus+0x5a>
    hsd->State = HAL_SD_STATE_READY;
 8005bf6:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bf8:	6822      	ldr	r2, [r4, #0]
 8005bfa:	4953      	ldr	r1, [pc, #332]	; (8005d48 <HAL_SD_GetCardStatus+0x19c>)
    status = HAL_ERROR;
 8005bfc:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bfe:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8005c00:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005c02:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8005c06:	4630      	mov	r0, r6
 8005c08:	b017      	add	sp, #92	; 0x5c
 8005c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c0e:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005c10:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005c14:	e7e0      	b.n	8005bd8 <HAL_SD_GetCardStatus+0x2c>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c16:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005c18:	6820      	ldr	r0, [r4, #0]
 8005c1a:	0409      	lsls	r1, r1, #16
 8005c1c:	f001 f8d4 	bl	8006dc8 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c20:	2800      	cmp	r0, #0
 8005c22:	d1d6      	bne.n	8005bd2 <HAL_SD_GetCardStatus+0x26>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  config.DataLength    = 64U;
 8005c28:	2340      	movs	r3, #64	; 0x40
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8005c2a:	2160      	movs	r1, #96	; 0x60
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005c2c:	9004      	str	r0, [sp, #16]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005c2e:	9200      	str	r2, [sp, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005c30:	2202      	movs	r2, #2
  config.DataLength    = 64U;
 8005c32:	9301      	str	r3, [sp, #4]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005c34:	2301      	movs	r3, #1
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8005c36:	9102      	str	r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005c38:	4669      	mov	r1, sp
 8005c3a:	6820      	ldr	r0, [r4, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005c3c:	9203      	str	r2, [sp, #12]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005c3e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005c40:	f000 fe40 	bl	80068c4 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8005c44:	6820      	ldr	r0, [r4, #0]
 8005c46:	f001 fad1 	bl	80071ec <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	d1c1      	bne.n	8005bd2 <HAL_SD_GetCardStatus+0x26>
  uint32_t *pData = pSDstatus;
 8005c4e:	af06      	add	r7, sp, #24
 8005c50:	e005      	b.n	8005c5e <HAL_SD_GetCardStatus+0xb2>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005c52:	f7fa fba5 	bl	80003a0 <HAL_GetTick>
 8005c56:	eba0 0008 	sub.w	r0, r0, r8
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	d013      	beq.n	8005c86 <HAL_SD_GetCardStatus+0xda>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c62:	f412 7f95 	tst.w	r2, #298	; 0x12a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005c66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005c68:	d110      	bne.n	8005c8c <HAL_SD_GetCardStatus+0xe0>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005c6a:	0416      	lsls	r6, r2, #16
 8005c6c:	d5f1      	bpl.n	8005c52 <HAL_SD_GetCardStatus+0xa6>
 8005c6e:	f107 0620 	add.w	r6, r7, #32
 8005c72:	e000      	b.n	8005c76 <HAL_SD_GetCardStatus+0xca>
 8005c74:	6823      	ldr	r3, [r4, #0]
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 fe0a 	bl	8006890 <SDMMC_ReadFIFO>
 8005c7c:	f847 0b04 	str.w	r0, [r7], #4
      for(count = 0U; count < 8U; count++)
 8005c80:	42b7      	cmp	r7, r6
 8005c82:	d1f7      	bne.n	8005c74 <HAL_SD_GetCardStatus+0xc8>
 8005c84:	e7e5      	b.n	8005c52 <HAL_SD_GetCardStatus+0xa6>
      return HAL_SD_ERROR_TIMEOUT;
 8005c86:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005c8a:	e7a4      	b.n	8005bd6 <HAL_SD_GetCardStatus+0x2a>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005c8c:	0710      	lsls	r0, r2, #28
 8005c8e:	d455      	bmi.n	8005d3c <HAL_SD_GetCardStatus+0x190>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c92:	0791      	lsls	r1, r2, #30
 8005c94:	d454      	bmi.n	8005d40 <HAL_SD_GetCardStatus+0x194>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c98:	0692      	lsls	r2, r2, #26
 8005c9a:	d50b      	bpl.n	8005cb4 <HAL_SD_GetCardStatus+0x108>
 8005c9c:	e052      	b.n	8005d44 <HAL_SD_GetCardStatus+0x198>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005c9e:	f000 fdf7 	bl	8006890 <SDMMC_ReadFIFO>
 8005ca2:	f847 0b04 	str.w	r0, [r7], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005ca6:	f7fa fb7b 	bl	80003a0 <HAL_GetTick>
 8005caa:	eba0 0008 	sub.w	r0, r0, r8
 8005cae:	3001      	adds	r0, #1
 8005cb0:	d0e9      	beq.n	8005c86 <HAL_SD_GetCardStatus+0xda>
 8005cb2:	6823      	ldr	r3, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8005cb4:	6b5e      	ldr	r6, [r3, #52]	; 0x34
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005cb6:	4618      	mov	r0, r3
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8005cb8:	f416 5680 	ands.w	r6, r6, #4096	; 0x1000
 8005cbc:	d1ef      	bne.n	8005c9e <HAL_SD_GetCardStatus+0xf2>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005cbe:	9f06      	ldr	r7, [sp, #24]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005cc0:	9808      	ldr	r0, [sp, #32]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005cc2:	0a39      	lsrs	r1, r7, #8
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005cc4:	f3c7 1e81 	ubfx	lr, r7, #6, #2
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005cc8:	ea4f 4810 	mov.w	r8, r0, lsr #16
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8005ccc:	f3c7 1c40 	ubfx	ip, r7, #5, #1
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005cd0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005cd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005cd6:	ea41 6117 	orr.w	r1, r1, r7, lsr #24
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005cda:	f028 07ff 	bic.w	r7, r8, #255	; 0xff
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005cde:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8005d4c <HAL_SD_GetCardStatus+0x1a0>
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005ce2:	fa5f f982 	uxtb.w	r9, r2
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005ce6:	b289      	uxth	r1, r1
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005ce8:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005cec:	fa5f f880 	uxtb.w	r8, r0
 8005cf0:	9b07      	ldr	r3, [sp, #28]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005cf2:	ea47 0709 	orr.w	r7, r7, r9
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005cf6:	f885 e000 	strb.w	lr, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8005cfa:	f885 c001 	strb.w	ip, [r5, #1]
 8005cfe:	fa93 fe83 	rev.w	lr, r3
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005d02:	8069      	strh	r1, [r5, #2]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8005d04:	f3c0 5303 	ubfx	r3, r0, #20, #4
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8005d08:	f3c0 2107 	ubfx	r1, r0, #8, #8
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005d0c:	f8c5 e004 	str.w	lr, [r5, #4]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8005d10:	f3c2 2c85 	ubfx	ip, r2, #10, #6
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005d14:	f885 8008 	strb.w	r8, [r5, #8]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8005d18:	f3c2 2001 	ubfx	r0, r2, #8, #2
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8005d1c:	7269      	strb	r1, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8005d1e:	72ab      	strb	r3, [r5, #10]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8005d20:	f3c2 1103 	ubfx	r1, r2, #4, #4
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005d24:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8005d28:	f002 020f 	and.w	r2, r2, #15
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005d2c:	81af      	strh	r7, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8005d2e:	f885 c00e 	strb.w	ip, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8005d32:	73e8      	strb	r0, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8005d34:	7429      	strb	r1, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8005d36:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005d38:	74ab      	strb	r3, [r5, #18]
 8005d3a:	e756      	b.n	8005bea <HAL_SD_GetCardStatus+0x3e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005d3c:	2008      	movs	r0, #8
 8005d3e:	e74b      	b.n	8005bd8 <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005d40:	2002      	movs	r0, #2
 8005d42:	e749      	b.n	8005bd8 <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_RX_OVERRUN;
 8005d44:	2020      	movs	r0, #32
 8005d46:	e747      	b.n	8005bd8 <HAL_SD_GetCardStatus+0x2c>
 8005d48:	1fe00fff 	.word	0x1fe00fff
 8005d4c:	18000f3a 	.word	0x18000f3a

08005d50 <HAL_SD_GetCardInfo>:
{
 8005d50:	4603      	mov	r3, r0
}
 8005d52:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005d54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d56:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d5a:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005d5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d5e:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005d60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d62:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005d64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d66:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005d68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d6a:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005d6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d6e:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d72:	61cb      	str	r3, [r1, #28]
}
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop

08005d78 <HAL_SD_ConfigWideBusOperation>:
{
 8005d78:	b570      	push	{r4, r5, r6, lr}
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005d7a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  hsd->State = HAL_SD_STATE_BUSY;
 8005d7c:	2303      	movs	r3, #3
{
 8005d7e:	b08a      	sub	sp, #40	; 0x28
 8005d80:	4604      	mov	r4, r0
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005d82:	2a03      	cmp	r2, #3
  hsd->State = HAL_SD_STATE_BUSY;
 8005d84:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 8005d88:	460d      	mov	r5, r1
 8005d8a:	6803      	ldr	r3, [r0, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005d8c:	d025      	beq.n	8005dda <HAL_SD_ConfigWideBusOperation+0x62>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005d8e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005d92:	d022      	beq.n	8005dda <HAL_SD_ConfigWideBusOperation+0x62>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005d94:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005d98:	d064      	beq.n	8005e64 <HAL_SD_ConfigWideBusOperation+0xec>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005d9a:	2900      	cmp	r1, #0
 8005d9c:	d043      	beq.n	8005e26 <HAL_SD_ConfigWideBusOperation+0xae>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005d9e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005da0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8005da4:	6382      	str	r2, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005da6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005da8:	b9f2      	cbnz	r2, 8005de8 <HAL_SD_ConfigWideBusOperation+0x70>
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8005daa:	6962      	ldr	r2, [r4, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005dac:	6921      	ldr	r1, [r4, #16]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8005dae:	2a03      	cmp	r2, #3
    Init.BusWide             = WideMode;
 8005db0:	9506      	str	r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005db2:	9107      	str	r1, [sp, #28]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005db4:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8005db8:	e9cd 6004 	strd	r6, r0, [sp, #16]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8005dbc:	d92a      	bls.n	8005e14 <HAL_SD_ConfigWideBusOperation+0x9c>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8005dbe:	9208      	str	r2, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8005dc0:	aa0a      	add	r2, sp, #40	; 0x28
 8005dc2:	ae04      	add	r6, sp, #16
  HAL_StatusTypeDef status = HAL_OK;
 8005dc4:	2500      	movs	r5, #0
    (void)SDMMC_Init(hsd->Instance, Init);
 8005dc6:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 8005dca:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8005dd4:	f000 fd42 	bl	800685c <SDMMC_Init>
 8005dd8:	e009      	b.n	8005dee <HAL_SD_ConfigWideBusOperation+0x76>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005dda:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005ddc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005de0:	63a2      	str	r2, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005de2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005de4:	2a00      	cmp	r2, #0
 8005de6:	d0e0      	beq.n	8005daa <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005de8:	4a33      	ldr	r2, [pc, #204]	; (8005eb8 <HAL_SD_ConfigWideBusOperation+0x140>)
    status = HAL_ERROR;
 8005dea:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005dec:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005dee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005df2:	6820      	ldr	r0, [r4, #0]
 8005df4:	f000 fd7c 	bl	80068f0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005df8:	b130      	cbz	r0, 8005e08 <HAL_SD_ConfigWideBusOperation+0x90>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005dfa:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 8005dfc:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005dfe:	4a2e      	ldr	r2, [pc, #184]	; (8005eb8 <HAL_SD_ConfigWideBusOperation+0x140>)
 8005e00:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005e02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e04:	4318      	orrs	r0, r3
 8005e06:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8005e08:	2301      	movs	r3, #1
}
 8005e0a:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8005e0c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8005e10:	b00a      	add	sp, #40	; 0x28
 8005e12:	bd70      	pop	{r4, r5, r6, pc}
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8005e14:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005e16:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005e1a:	d0d0      	beq.n	8005dbe <HAL_SD_ConfigWideBusOperation+0x46>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8005e1c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8005e20:	d02d      	beq.n	8005e7e <HAL_SD_ConfigWideBusOperation+0x106>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8005e22:	2204      	movs	r2, #4
 8005e24:	e7cb      	b.n	8005dbe <HAL_SD_ConfigWideBusOperation+0x46>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005e26:	4618      	mov	r0, r3
  uint32_t scr[2U] = {0UL, 0UL};
 8005e28:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005e2c:	f000 fd46 	bl	80068bc <SDMMC_GetResponse>
 8005e30:	0181      	lsls	r1, r0, #6
 8005e32:	d420      	bmi.n	8005e76 <HAL_SD_ConfigWideBusOperation+0xfe>
  errorstate = SD_FindSCR(hsd, scr);
 8005e34:	a904      	add	r1, sp, #16
 8005e36:	4620      	mov	r0, r4
 8005e38:	f7ff fa02 	bl	8005240 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e3c:	b968      	cbnz	r0, 8005e5a <HAL_SD_ConfigWideBusOperation+0xe2>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005e3e:	9a05      	ldr	r2, [sp, #20]
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	03d2      	lsls	r2, r2, #15
 8005e44:	d534      	bpl.n	8005eb0 <HAL_SD_ConfigWideBusOperation+0x138>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005e46:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005e48:	4618      	mov	r0, r3
 8005e4a:	0409      	lsls	r1, r1, #16
 8005e4c:	f000 ffbc 	bl	8006dc8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e50:	b918      	cbnz	r0, 8005e5a <HAL_SD_ConfigWideBusOperation+0xe2>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005e52:	4601      	mov	r1, r0
 8005e54:	6820      	ldr	r0, [r4, #0]
 8005e56:	f001 f82f 	bl	8006eb8 <SDMMC_CmdBusWidth>
 8005e5a:	6823      	ldr	r3, [r4, #0]
      hsd->ErrorCode |= errorstate;
 8005e5c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005e5e:	4310      	orrs	r0, r2
 8005e60:	63a0      	str	r0, [r4, #56]	; 0x38
 8005e62:	e7be      	b.n	8005de2 <HAL_SD_ConfigWideBusOperation+0x6a>
  uint32_t scr[2U] = {0UL, 0UL};
 8005e64:	2200      	movs	r2, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005e66:	4618      	mov	r0, r3
 8005e68:	4611      	mov	r1, r2
  uint32_t scr[2U] = {0UL, 0UL};
 8005e6a:	e9cd 2204 	strd	r2, r2, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005e6e:	f000 fd25 	bl	80068bc <SDMMC_GetResponse>
 8005e72:	0186      	lsls	r6, r0, #6
 8005e74:	d506      	bpl.n	8005e84 <HAL_SD_ConfigWideBusOperation+0x10c>
 8005e76:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005e78:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005e7c:	e7ee      	b.n	8005e5c <HAL_SD_ConfigWideBusOperation+0xe4>
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8005e7e:	2202      	movs	r2, #2
 8005e80:	9208      	str	r2, [sp, #32]
 8005e82:	e79d      	b.n	8005dc0 <HAL_SD_ConfigWideBusOperation+0x48>
  errorstate = SD_FindSCR(hsd, scr);
 8005e84:	a904      	add	r1, sp, #16
 8005e86:	4620      	mov	r0, r4
 8005e88:	f7ff f9da 	bl	8005240 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	d1e4      	bne.n	8005e5a <HAL_SD_ConfigWideBusOperation+0xe2>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005e90:	9a05      	ldr	r2, [sp, #20]
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	0350      	lsls	r0, r2, #13
 8005e96:	d50b      	bpl.n	8005eb0 <HAL_SD_ConfigWideBusOperation+0x138>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005e98:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	0409      	lsls	r1, r1, #16
 8005e9e:	f000 ff93 	bl	8006dc8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	d1d9      	bne.n	8005e5a <HAL_SD_ConfigWideBusOperation+0xe2>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005ea6:	2102      	movs	r1, #2
 8005ea8:	6820      	ldr	r0, [r4, #0]
 8005eaa:	f001 f805 	bl	8006eb8 <SDMMC_CmdBusWidth>
 8005eae:	e7d4      	b.n	8005e5a <HAL_SD_ConfigWideBusOperation+0xe2>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005eb0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005eb4:	e7d2      	b.n	8005e5c <HAL_SD_ConfigWideBusOperation+0xe4>
 8005eb6:	bf00      	nop
 8005eb8:	1fe00fff 	.word	0x1fe00fff

08005ebc <HAL_SD_Init>:
{
 8005ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ebe:	b087      	sub	sp, #28
  if(hsd == NULL)
 8005ec0:	b1a0      	cbz	r0, 8005eec <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 8005ec2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8005ec6:	4604      	mov	r4, r0
 8005ec8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005ecc:	b93b      	cbnz	r3, 8005ede <HAL_SD_Init+0x22>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8005ece:	6983      	ldr	r3, [r0, #24]
    hsd->Lock = HAL_UNLOCKED;
 8005ed0:	7702      	strb	r2, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8005ed2:	b90b      	cbnz	r3, 8005ed8 <HAL_SD_Init+0x1c>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 8005ed8:	4620      	mov	r0, r4
 8005eda:	f002 fc21 	bl	8008720 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8005ede:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005ee0:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8005ee2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005ee6:	f7ff fced 	bl	80058c4 <HAL_SD_InitCard>
 8005eea:	b118      	cbz	r0, 8005ef4 <HAL_SD_Init+0x38>
    return HAL_ERROR;
 8005eec:	2501      	movs	r5, #1
}
 8005eee:	4628      	mov	r0, r5
 8005ef0:	b007      	add	sp, #28
 8005ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005ef4:	a901      	add	r1, sp, #4
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f7ff fe58 	bl	8005bac <HAL_SD_GetCardStatus>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	d1f5      	bne.n	8005eec <HAL_SD_Init+0x30>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005f00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 8005f02:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005f06:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005f08:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 8005f0c:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005f0e:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005f10:	d029      	beq.n	8005f66 <HAL_SD_Init+0xaa>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005f12:	65e0      	str	r0, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005f14:	68e1      	ldr	r1, [r4, #12]
 8005f16:	4620      	mov	r0, r4
 8005f18:	f7ff ff2e 	bl	8005d78 <HAL_SD_ConfigWideBusOperation>
 8005f1c:	4605      	mov	r5, r0
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	d1e4      	bne.n	8005eec <HAL_SD_Init+0x30>
  tickstart = HAL_GetTick();
 8005f22:	f7fa fa3d 	bl	80003a0 <HAL_GetTick>
 8005f26:	4607      	mov	r7, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005f28:	e007      	b.n	8005f3a <HAL_SD_Init+0x7e>
    hsd->ErrorCode |= errorstate;
 8005f2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f2c:	431e      	orrs	r6, r3
 8005f2e:	63a6      	str	r6, [r4, #56]	; 0x38
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8005f30:	f7fa fa36 	bl	80003a0 <HAL_GetTick>
 8005f34:	1bc0      	subs	r0, r0, r7
 8005f36:	3001      	adds	r0, #1
 8005f38:	d01d      	beq.n	8005f76 <HAL_SD_Init+0xba>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f3a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005f3c:	6820      	ldr	r0, [r4, #0]
 8005f3e:	0409      	lsls	r1, r1, #16
 8005f40:	f001 f910 	bl	8007164 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f44:	4606      	mov	r6, r0
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d1ef      	bne.n	8005f2a <HAL_SD_Init+0x6e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005f4a:	4601      	mov	r1, r0
 8005f4c:	6820      	ldr	r0, [r4, #0]
 8005f4e:	f000 fcb5 	bl	80068bc <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005f52:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005f56:	2804      	cmp	r0, #4
 8005f58:	d1ea      	bne.n	8005f30 <HAL_SD_Init+0x74>
  hsd->State = HAL_SD_STATE_READY;
 8005f5a:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f5c:	63a6      	str	r6, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8005f5e:	6326      	str	r6, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8005f60:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8005f64:	e7c3      	b.n	8005eee <HAL_SD_Init+0x32>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005f66:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005f68:	bf14      	ite	ne
 8005f6a:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005f6e:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8005f72:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005f74:	e7ce      	b.n	8005f14 <HAL_SD_Init+0x58>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005f76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State= HAL_SD_STATE_READY;
 8005f7a:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8005f7c:	2503      	movs	r5, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005f7e:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8005f80:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 8005f84:	e7b3      	b.n	8005eee <HAL_SD_Init+0x32>
 8005f86:	bf00      	nop

08005f88 <HAL_SD_GetCardState>:
{
 8005f88:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f8a:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 8005f8c:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f8e:	6800      	ldr	r0, [r0, #0]
 8005f90:	0409      	lsls	r1, r1, #16
 8005f92:	f001 f8e7 	bl	8007164 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f96:	4601      	mov	r1, r0
 8005f98:	b120      	cbz	r0, 8005fa4 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 8005f9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f9c:	2000      	movs	r0, #0
 8005f9e:	4319      	orrs	r1, r3
 8005fa0:	63a1      	str	r1, [r4, #56]	; 0x38
}
 8005fa2:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005fa4:	6820      	ldr	r0, [r4, #0]
 8005fa6:	f000 fc89 	bl	80068bc <SDMMC_GetResponse>
 8005faa:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8005fae:	bd10      	pop	{r4, pc}

08005fb0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop

08005fb4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop

08005fb8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop

08005fbc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop

08005fc0 <HAL_SD_IRQHandler>:
{
 8005fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fc2:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005fc4:	6800      	ldr	r0, [r0, #0]
{
 8005fc6:	b083      	sub	sp, #12
  uint32_t context = hsd->Context;
 8005fc8:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005fca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005fcc:	041b      	lsls	r3, r3, #16
 8005fce:	d502      	bpl.n	8005fd6 <HAL_SD_IRQHandler+0x16>
 8005fd0:	072f      	lsls	r7, r5, #28
 8005fd2:	f100 80b6 	bmi.w	8006142 <HAL_SD_IRQHandler+0x182>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005fd6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005fd8:	05de      	lsls	r6, r3, #23
 8005fda:	d528      	bpl.n	800602e <HAL_SD_IRQHandler+0x6e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005fdc:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8005fe0:	4b98      	ldr	r3, [pc, #608]	; (8006244 <HAL_SD_IRQHandler+0x284>)
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005fe2:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8005fe4:	6822      	ldr	r2, [r4, #0]
 8005fe6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005fe8:	400b      	ands	r3, r1
 8005fea:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005fec:	6822      	ldr	r2, [r4, #0]
 8005fee:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8005ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ff4:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005ff6:	6822      	ldr	r2, [r4, #0]
 8005ff8:	68d3      	ldr	r3, [r2, #12]
 8005ffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ffe:	60d3      	str	r3, [r2, #12]
    if((context & SD_CONTEXT_IT) != 0U)
 8006000:	f015 0308 	ands.w	r3, r5, #8
 8006004:	d075      	beq.n	80060f2 <HAL_SD_IRQHandler+0x132>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006006:	f015 0f22 	tst.w	r5, #34	; 0x22
 800600a:	6820      	ldr	r0, [r4, #0]
 800600c:	f040 80be 	bne.w	800618c <HAL_SD_IRQHandler+0x1cc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006010:	498d      	ldr	r1, [pc, #564]	; (8006248 <HAL_SD_IRQHandler+0x288>)
      hsd->State = HAL_SD_STATE_READY;
 8006012:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8006014:	2300      	movs	r3, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006016:	6381      	str	r1, [r0, #56]	; 0x38
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006018:	07a9      	lsls	r1, r5, #30
      hsd->State = HAL_SD_STATE_READY;
 800601a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800601e:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006020:	f000 80af 	beq.w	8006182 <HAL_SD_IRQHandler+0x1c2>
        HAL_SD_RxCpltCallback(hsd);
 8006024:	4620      	mov	r0, r4
 8006026:	f001 fc9f 	bl	8007968 <HAL_SD_RxCpltCallback>
}
 800602a:	b003      	add	sp, #12
 800602c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800602e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006030:	045e      	lsls	r6, r3, #17
 8006032:	d502      	bpl.n	800603a <HAL_SD_IRQHandler+0x7a>
 8006034:	0729      	lsls	r1, r5, #28
 8006036:	f100 80b0 	bmi.w	800619a <HAL_SD_IRQHandler+0x1da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800603a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800603c:	f013 0f3a 	tst.w	r3, #58	; 0x3a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006040:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006042:	d06d      	beq.n	8006120 <HAL_SD_IRQHandler+0x160>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006044:	079a      	lsls	r2, r3, #30
 8006046:	d503      	bpl.n	8006050 <HAL_SD_IRQHandler+0x90>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006048:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800604a:	f043 0302 	orr.w	r3, r3, #2
 800604e:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006050:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006052:	071b      	lsls	r3, r3, #28
 8006054:	d503      	bpl.n	800605e <HAL_SD_IRQHandler+0x9e>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006056:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006058:	f043 0308 	orr.w	r3, r3, #8
 800605c:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800605e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006060:	069f      	lsls	r7, r3, #26
 8006062:	d503      	bpl.n	800606c <HAL_SD_IRQHandler+0xac>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006064:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006066:	f043 0320 	orr.w	r3, r3, #32
 800606a:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800606c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800606e:	06de      	lsls	r6, r3, #27
 8006070:	d503      	bpl.n	800607a <HAL_SD_IRQHandler+0xba>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006072:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006074:	f043 0310 	orr.w	r3, r3, #16
 8006078:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800607a:	4b73      	ldr	r3, [pc, #460]	; (8006248 <HAL_SD_IRQHandler+0x288>)
 800607c:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800607e:	6822      	ldr	r2, [r4, #0]
 8006080:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006082:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8006086:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006088:	6822      	ldr	r2, [r4, #0]
 800608a:	68d3      	ldr	r3, [r2, #12]
 800608c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006090:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8006092:	6822      	ldr	r2, [r4, #0]
 8006094:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006096:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800609a:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800609c:	6822      	ldr	r2, [r4, #0]
 800609e:	68d3      	ldr	r3, [r2, #12]
 80060a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060a4:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80060a6:	6820      	ldr	r0, [r4, #0]
 80060a8:	f000 fd76 	bl	8006b98 <SDMMC_CmdStopTransfer>
 80060ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80060ae:	6822      	ldr	r2, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80060b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80060b4:	4318      	orrs	r0, r3
 80060b6:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80060b8:	68d3      	ldr	r3, [r2, #12]
 80060ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060be:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80060c0:	6823      	ldr	r3, [r4, #0]
 80060c2:	6399      	str	r1, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80060c4:	f015 0308 	ands.w	r3, r5, #8
 80060c8:	f040 808f 	bne.w	80061ea <HAL_SD_IRQHandler+0x22a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80060cc:	0629      	lsls	r1, r5, #24
 80060ce:	d5ac      	bpl.n	800602a <HAL_SD_IRQHandler+0x6a>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80060d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80060d2:	2a00      	cmp	r2, #0
 80060d4:	d0a9      	beq.n	800602a <HAL_SD_IRQHandler+0x6a>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80060d6:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 80060d8:	2501      	movs	r5, #1
        HAL_SD_ErrorCallback(hsd);
 80060da:	4620      	mov	r0, r4
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80060dc:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80060de:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80060e2:	63ca      	str	r2, [r1, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80060e4:	6822      	ldr	r2, [r4, #0]
 80060e6:	6513      	str	r3, [r2, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80060e8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 80060ec:	f7ff fb08 	bl	8005700 <HAL_SD_ErrorCallback>
 80060f0:	e79b      	b.n	800602a <HAL_SD_IRQHandler+0x6a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80060f2:	062a      	lsls	r2, r5, #24
 80060f4:	d599      	bpl.n	800602a <HAL_SD_IRQHandler+0x6a>
      hsd->Instance->DLEN = 0;
 80060f6:	6822      	ldr	r2, [r4, #0]
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80060f8:	f015 0f22 	tst.w	r5, #34	; 0x22
      hsd->Instance->DLEN = 0;
 80060fc:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80060fe:	6822      	ldr	r2, [r4, #0]
 8006100:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006102:	6822      	ldr	r2, [r4, #0]
 8006104:	6513      	str	r3, [r2, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006106:	f040 8088 	bne.w	800621a <HAL_SD_IRQHandler+0x25a>
      hsd->State = HAL_SD_STATE_READY;
 800610a:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800610c:	2300      	movs	r3, #0
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800610e:	f015 0f30 	tst.w	r5, #48	; 0x30
      hsd->State = HAL_SD_STATE_READY;
 8006112:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006116:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006118:	d17b      	bne.n	8006212 <HAL_SD_IRQHandler+0x252>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800611a:	07af      	lsls	r7, r5, #30
 800611c:	d085      	beq.n	800602a <HAL_SD_IRQHandler+0x6a>
 800611e:	e781      	b.n	8006024 <HAL_SD_IRQHandler+0x64>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006120:	00da      	lsls	r2, r3, #3
 8006122:	d582      	bpl.n	800602a <HAL_SD_IRQHandler+0x6a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006124:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006128:	f005 0520 	and.w	r5, r5, #32
 800612c:	6383      	str	r3, [r0, #56]	; 0x38
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800612e:	4620      	mov	r0, r4
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006134:	075b      	lsls	r3, r3, #29
 8006136:	d461      	bmi.n	80061fc <HAL_SD_IRQHandler+0x23c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006138:	2d00      	cmp	r5, #0
 800613a:	d07c      	beq.n	8006236 <HAL_SD_IRQHandler+0x276>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800613c:	f7ff ff3e 	bl	8005fbc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 8006140:	e773      	b.n	800602a <HAL_SD_IRQHandler+0x6a>
  if (hsd->RxXferSize >= 32U)
 8006142:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006144:	2b1f      	cmp	r3, #31
 8006146:	f67f af70 	bls.w	800602a <HAL_SD_IRQHandler+0x6a>
  tmp = hsd->pRxBuffPtr;
 800614a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800614c:	1d3d      	adds	r5, r7, #4
 800614e:	f107 0624 	add.w	r6, r7, #36	; 0x24
 8006152:	e000      	b.n	8006156 <HAL_SD_IRQHandler+0x196>
 8006154:	6820      	ldr	r0, [r4, #0]
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006156:	f000 fb9b 	bl	8006890 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800615a:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800615e:	0a02      	lsrs	r2, r0, #8
 8006160:	3504      	adds	r5, #4
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006162:	0c03      	lsrs	r3, r0, #16
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006164:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006166:	f805 2c07 	strb.w	r2, [r5, #-7]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800616a:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800616e:	f805 0c05 	strb.w	r0, [r5, #-5]
    for(count = 0U; count < 8U; count++)
 8006172:	42ae      	cmp	r6, r5
 8006174:	d1ee      	bne.n	8006154 <HAL_SD_IRQHandler+0x194>
    hsd->RxXferSize -= 32U;
 8006176:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    hsd->pRxBuffPtr = tmp;
 8006178:	3720      	adds	r7, #32
    hsd->RxXferSize -= 32U;
 800617a:	3b20      	subs	r3, #32
 800617c:	e9c4 730a 	strd	r7, r3, [r4, #40]	; 0x28
 8006180:	e753      	b.n	800602a <HAL_SD_IRQHandler+0x6a>
        HAL_SD_TxCpltCallback(hsd);
 8006182:	4620      	mov	r0, r4
 8006184:	f001 fbea 	bl	800795c <HAL_SD_TxCpltCallback>
}
 8006188:	b003      	add	sp, #12
 800618a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800618c:	f000 fd04 	bl	8006b98 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8006190:	4603      	mov	r3, r0
 8006192:	2800      	cmp	r0, #0
 8006194:	d136      	bne.n	8006204 <HAL_SD_IRQHandler+0x244>
 8006196:	6820      	ldr	r0, [r4, #0]
 8006198:	e73a      	b.n	8006010 <HAL_SD_IRQHandler+0x50>
  if (hsd->TxXferSize >= 32U)
 800619a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800619c:	2b1f      	cmp	r3, #31
 800619e:	f67f af44 	bls.w	800602a <HAL_SD_IRQHandler+0x6a>
  tmp = hsd->pTxBuffPtr;
 80061a2:	6a26      	ldr	r6, [r4, #32]
 80061a4:	1d37      	adds	r7, r6, #4
 80061a6:	f106 0524 	add.w	r5, r6, #36	; 0x24
 80061aa:	e000      	b.n	80061ae <HAL_SD_IRQHandler+0x1ee>
 80061ac:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 80061ae:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 80061b2:	3704      	adds	r7, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80061b4:	a901      	add	r1, sp, #4
      data = (uint32_t)(*tmp);
 80061b6:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 80061b8:	f817 2c07 	ldrb.w	r2, [r7, #-7]
 80061bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80061c0:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 80061c2:	f817 2c06 	ldrb.w	r2, [r7, #-6]
 80061c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061ca:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 80061cc:	f817 2c05 	ldrb.w	r2, [r7, #-5]
 80061d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80061d4:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80061d6:	f000 fb5f 	bl	8006898 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80061da:	42bd      	cmp	r5, r7
 80061dc:	d1e6      	bne.n	80061ac <HAL_SD_IRQHandler+0x1ec>
    hsd->TxXferSize -= 32U;
 80061de:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hsd->pTxBuffPtr = tmp;
 80061e0:	3620      	adds	r6, #32
    hsd->TxXferSize -= 32U;
 80061e2:	3b20      	subs	r3, #32
 80061e4:	e9c4 6308 	strd	r6, r3, [r4, #32]
 80061e8:	e71f      	b.n	800602a <HAL_SD_IRQHandler+0x6a>
      hsd->State = HAL_SD_STATE_READY;
 80061ea:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 80061ec:	2300      	movs	r3, #0
      HAL_SD_ErrorCallback(hsd);
 80061ee:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
 80061f0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80061f4:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80061f6:	f7ff fa83 	bl	8005700 <HAL_SD_ErrorCallback>
 80061fa:	e716      	b.n	800602a <HAL_SD_IRQHandler+0x6a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80061fc:	b9f5      	cbnz	r5, 800623c <HAL_SD_IRQHandler+0x27c>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80061fe:	f7ff fed7 	bl	8005fb0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8006202:	e712      	b.n	800602a <HAL_SD_IRQHandler+0x6a>
          hsd->ErrorCode |= errorstate;
 8006204:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006206:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 8006208:	4313      	orrs	r3, r2
 800620a:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800620c:	f7ff fa78 	bl	8005700 <HAL_SD_ErrorCallback>
 8006210:	e7c1      	b.n	8006196 <HAL_SD_IRQHandler+0x1d6>
        HAL_SD_TxCpltCallback(hsd);
 8006212:	4620      	mov	r0, r4
 8006214:	f001 fba2 	bl	800795c <HAL_SD_TxCpltCallback>
 8006218:	e77f      	b.n	800611a <HAL_SD_IRQHandler+0x15a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800621a:	6820      	ldr	r0, [r4, #0]
 800621c:	f000 fcbc 	bl	8006b98 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8006220:	4603      	mov	r3, r0
 8006222:	2800      	cmp	r0, #0
 8006224:	f43f af71 	beq.w	800610a <HAL_SD_IRQHandler+0x14a>
          hsd->ErrorCode |= errorstate;
 8006228:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800622a:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800622c:	4313      	orrs	r3, r2
 800622e:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006230:	f7ff fa66 	bl	8005700 <HAL_SD_ErrorCallback>
 8006234:	e769      	b.n	800610a <HAL_SD_IRQHandler+0x14a>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8006236:	f7ff febd 	bl	8005fb4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 800623a:	e6f6      	b.n	800602a <HAL_SD_IRQHandler+0x6a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800623c:	f7ff febc 	bl	8005fb8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 8006240:	e6f3      	b.n	800602a <HAL_SD_IRQHandler+0x6a>
 8006242:	bf00      	nop
 8006244:	ffff3ec5 	.word	0xffff3ec5
 8006248:	18000f3a 	.word	0x18000f3a

0800624c <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800624c:	b310      	cbz	r0, 8006294 <HAL_SDRAM_Init+0x48>
{
 800624e:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006250:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006254:	4604      	mov	r4, r0
 8006256:	460d      	mov	r5, r1
 8006258:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800625c:	b1ab      	cbz	r3, 800628a <HAL_SDRAM_Init+0x3e>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800625e:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006260:	1d21      	adds	r1, r4, #4
 8006262:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006264:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006268:	f000 f9f6 	bl	8006658 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800626c:	4629      	mov	r1, r5
 800626e:	e9d4 0200 	ldrd	r0, r2, [r4]
 8006272:	f000 fa29 	bl	80066c8 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8006276:	4a08      	ldr	r2, [pc, #32]	; (8006298 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006278:	2101      	movs	r1, #1

  return HAL_OK;
 800627a:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800627c:	6813      	ldr	r3, [r2, #0]
 800627e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006282:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006284:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 8006288:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800628a:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800628e:	f001 fcbb 	bl	8007c08 <HAL_SDRAM_MspInit>
 8006292:	e7e4      	b.n	800625e <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 8006294:	2001      	movs	r0, #1
}
 8006296:	4770      	bx	lr
 8006298:	52004000 	.word	0x52004000

0800629c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800629c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80062a0:	b2db      	uxtb	r3, r3
  
  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d015      	beq.n	80062d2 <HAL_SDRAM_SendCommand+0x36>
{
 80062a6:	b570      	push	{r4, r5, r6, lr}
  {
    return HAL_BUSY;
  }
  else if((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80062a8:	f003 04fb 	and.w	r4, r3, #251	; 0xfb
 80062ac:	2c01      	cmp	r4, #1
 80062ae:	d001      	beq.n	80062b4 <HAL_SDRAM_SendCommand+0x18>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 80062b0:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 80062b2:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80062b4:	2302      	movs	r3, #2
 80062b6:	4605      	mov	r5, r0
 80062b8:	460e      	mov	r6, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80062ba:	6800      	ldr	r0, [r0, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80062bc:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80062c0:	f000 fa48 	bl	8006754 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80062c4:	6833      	ldr	r3, [r6, #0]
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d005      	beq.n	80062d6 <HAL_SDRAM_SendCommand+0x3a>
      hsdram->State = HAL_SDRAM_STATE_READY;
 80062ca:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  return HAL_OK;
 80062ce:	2000      	movs	r0, #0
}
 80062d0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80062d2:	4618      	mov	r0, r3
}
 80062d4:	4770      	bx	lr
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80062d6:	2305      	movs	r3, #5
  return HAL_OK;
 80062d8:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80062da:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 80062de:	bd70      	pop	{r4, r5, r6, pc}

080062e0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80062e0:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80062e2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d006      	beq.n	80062fa <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80062ec:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80062f0:	b2ed      	uxtb	r5, r5
 80062f2:	2d01      	cmp	r5, #1
 80062f4:	d003      	beq.n	80062fe <HAL_SDRAM_ProgramRefreshRate+0x1e>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 80062f6:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 80062f8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 80062fa:	4618      	mov	r0, r3
}
 80062fc:	bd38      	pop	{r3, r4, r5, pc}
 80062fe:	4604      	mov	r4, r0
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006300:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006302:	6800      	ldr	r0, [r0, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006304:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006308:	f000 fa36 	bl	8006778 <FMC_SDRAM_ProgramRefreshRate>
    hsdram->State = HAL_SDRAM_STATE_READY;
 800630c:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
  return HAL_OK;
 8006310:	2000      	movs	r0, #0
}
 8006312:	bd38      	pop	{r3, r4, r5, pc}

08006314 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 8006314:	6801      	ldr	r1, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8006316:	4a30      	ldr	r2, [pc, #192]	; (80063d8 <SPI_CloseTransfer+0xc4>)
{
 8006318:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 800631a:	694b      	ldr	r3, [r1, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800631c:	698c      	ldr	r4, [r1, #24]
 800631e:	f044 0408 	orr.w	r4, r4, #8
 8006322:	618c      	str	r4, [r1, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006324:	6804      	ldr	r4, [r0, #0]
 8006326:	69a1      	ldr	r1, [r4, #24]
 8006328:	f041 0110 	orr.w	r1, r1, #16
 800632c:	61a1      	str	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 800632e:	6804      	ldr	r4, [r0, #0]
 8006330:	6821      	ldr	r1, [r4, #0]
 8006332:	f021 0101 	bic.w	r1, r1, #1
 8006336:	6021      	str	r1, [r4, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8006338:	6801      	ldr	r1, [r0, #0]
 800633a:	690c      	ldr	r4, [r1, #16]
 800633c:	4022      	ands	r2, r4
 800633e:	610a      	str	r2, [r1, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006340:	6801      	ldr	r1, [r0, #0]
 8006342:	688a      	ldr	r2, [r1, #8]
 8006344:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006348:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800634a:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800634e:	2a04      	cmp	r2, #4
 8006350:	d001      	beq.n	8006356 <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006352:	069c      	lsls	r4, r3, #26
 8006354:	d433      	bmi.n	80063be <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006356:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800635a:	2a03      	cmp	r2, #3
 800635c:	d001      	beq.n	8006362 <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800635e:	0659      	lsls	r1, r3, #25
 8006360:	d421      	bmi.n	80063a6 <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006362:	059a      	lsls	r2, r3, #22
 8006364:	d50a      	bpl.n	800637c <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006366:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800636a:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800636c:	f042 0201 	orr.w	r2, r2, #1
 8006370:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006374:	698a      	ldr	r2, [r1, #24]
 8006376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800637a:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800637c:	05db      	lsls	r3, r3, #23
 800637e:	d50a      	bpl.n	8006396 <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006380:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006384:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006386:	f043 0308 	orr.w	r3, r3, #8
 800638a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800638e:	6993      	ldr	r3, [r2, #24]
 8006390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006394:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006396:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 8006398:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 800639c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80063a0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 80063a4:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80063a6:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063aa:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80063ac:	f042 0204 	orr.w	r2, r2, #4
 80063b0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063b4:	698a      	ldr	r2, [r1, #24]
 80063b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063ba:	618a      	str	r2, [r1, #24]
 80063bc:	e7d1      	b.n	8006362 <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80063be:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80063c2:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80063c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063c8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80063cc:	698a      	ldr	r2, [r1, #24]
 80063ce:	f042 0220 	orr.w	r2, r2, #32
 80063d2:	618a      	str	r2, [r1, #24]
 80063d4:	e7bf      	b.n	8006356 <SPI_CloseTransfer+0x42>
 80063d6:	bf00      	nop
 80063d8:	fffffc90 	.word	0xfffffc90

080063dc <HAL_SPI_TxCpltCallback>:
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop

080063e0 <HAL_SPI_RxCpltCallback>:
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop

080063e4 <HAL_SPI_TxRxCpltCallback>:
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop

080063e8 <HAL_SPI_ErrorCallback>:
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop

080063ec <HAL_SPI_IRQHandler>:
{
 80063ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 80063f0:	6803      	ldr	r3, [r0, #0]
{
 80063f2:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 80063f4:	6919      	ldr	r1, [r3, #16]
  uint32_t itflag   = hspi->Instance->SR;
 80063f6:	695a      	ldr	r2, [r3, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80063f8:	f8d3 c008 	ldr.w	ip, [r3, #8]
  uint32_t trigger  = itsource & itflag;
 80063fc:	ea01 0502 	and.w	r5, r1, r2
  HAL_SPI_StateTypeDef State = hspi->State;
 8006400:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8006404:	f005 0664 	and.w	r6, r5, #100	; 0x64
 8006408:	2e04      	cmp	r6, #4
 800640a:	f040 8086 	bne.w	800651a <HAL_SPI_IRQHandler+0x12e>
    hspi->TxISR(hspi);
 800640e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8006410:	f005 0626 	and.w	r6, r5, #38	; 0x26
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006414:	f005 0545 	and.w	r5, r5, #69	; 0x45
    hspi->TxISR(hspi);
 8006418:	4798      	blx	r3
    hspi->RxISR(hspi);
 800641a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800641c:	4620      	mov	r0, r4
 800641e:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006420:	2d01      	cmp	r5, #1
 8006422:	d102      	bne.n	800642a <HAL_SPI_IRQHandler+0x3e>
    hspi->RxISR(hspi);
 8006424:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006426:	4620      	mov	r0, r4
 8006428:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800642a:	2e02      	cmp	r6, #2
 800642c:	d173      	bne.n	8006516 <HAL_SPI_IRQHandler+0x12a>
    hspi->TxISR(hspi);
 800642e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006430:	4620      	mov	r0, r4
}
 8006432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 8006436:	4718      	bx	r3
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006438:	0517      	lsls	r7, r2, #20
 800643a:	f100 80d9 	bmi.w	80065f0 <HAL_SPI_IRQHandler+0x204>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800643e:	f415 7f58 	tst.w	r5, #864	; 0x360
 8006442:	d068      	beq.n	8006516 <HAL_SPI_IRQHandler+0x12a>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8006444:	0668      	lsls	r0, r5, #25
 8006446:	d509      	bpl.n	800645c <HAL_SPI_IRQHandler+0x70>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006448:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800644c:	f042 0204 	orr.w	r2, r2, #4
 8006450:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006454:	699a      	ldr	r2, [r3, #24]
 8006456:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800645a:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800645c:	05a9      	lsls	r1, r5, #22
 800645e:	d50a      	bpl.n	8006476 <HAL_SPI_IRQHandler+0x8a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006460:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006464:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006466:	f043 0301 	orr.w	r3, r3, #1
 800646a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800646e:	6993      	ldr	r3, [r2, #24]
 8006470:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006474:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8006476:	05ea      	lsls	r2, r5, #23
 8006478:	d50a      	bpl.n	8006490 <HAL_SPI_IRQHandler+0xa4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800647a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800647e:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006480:	f043 0308 	orr.w	r3, r3, #8
 8006484:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006488:	6993      	ldr	r3, [r2, #24]
 800648a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800648e:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8006490:	06ab      	lsls	r3, r5, #26
 8006492:	d50a      	bpl.n	80064aa <HAL_SPI_IRQHandler+0xbe>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006494:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006498:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800649a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800649e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80064a2:	6993      	ldr	r3, [r2, #24]
 80064a4:	f043 0320 	orr.w	r3, r3, #32
 80064a8:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064aa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d031      	beq.n	8006516 <HAL_SPI_IRQHandler+0x12a>
      __HAL_SPI_DISABLE(hspi);
 80064b2:	6821      	ldr	r1, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80064b4:	f40c 4c40 	and.w	ip, ip, #49152	; 0xc000
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 80064b8:	4b5e      	ldr	r3, [pc, #376]	; (8006634 <HAL_SPI_IRQHandler+0x248>)
      __HAL_SPI_DISABLE(hspi);
 80064ba:	680a      	ldr	r2, [r1, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80064bc:	f5bc 4f40 	cmp.w	ip, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 80064c0:	f022 0201 	bic.w	r2, r2, #1
 80064c4:	600a      	str	r2, [r1, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 80064c6:	6822      	ldr	r2, [r4, #0]
 80064c8:	6911      	ldr	r1, [r2, #16]
 80064ca:	ea03 0301 	and.w	r3, r3, r1
 80064ce:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80064d0:	f040 80a9 	bne.w	8006626 <HAL_SPI_IRQHandler+0x23a>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80064d4:	6822      	ldr	r2, [r4, #0]
 80064d6:	6893      	ldr	r3, [r2, #8]
 80064d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80064dc:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 80064de:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80064e0:	b15b      	cbz	r3, 80064fa <HAL_SPI_IRQHandler+0x10e>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80064e2:	4a55      	ldr	r2, [pc, #340]	; (8006638 <HAL_SPI_IRQHandler+0x24c>)
 80064e4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80064e6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80064e8:	f7fb fab8 	bl	8001a5c <HAL_DMA_Abort_IT>
 80064ec:	b128      	cbz	r0, 80064fa <HAL_SPI_IRQHandler+0x10e>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80064ee:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80064f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064f6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 80064fa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80064fc:	b15b      	cbz	r3, 8006516 <HAL_SPI_IRQHandler+0x12a>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80064fe:	4a4e      	ldr	r2, [pc, #312]	; (8006638 <HAL_SPI_IRQHandler+0x24c>)
 8006500:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006502:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006504:	f7fb faaa 	bl	8001a5c <HAL_DMA_Abort_IT>
 8006508:	b128      	cbz	r0, 8006516 <HAL_SPI_IRQHandler+0x12a>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800650a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800650e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006512:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 8006516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800651a:	f005 0045 	and.w	r0, r5, #69	; 0x45
 800651e:	f005 0626 	and.w	r6, r5, #38	; 0x26
 8006522:	2801      	cmp	r0, #1
 8006524:	f43f af7e 	beq.w	8006424 <HAL_SPI_IRQHandler+0x38>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006528:	2e02      	cmp	r6, #2
 800652a:	d080      	beq.n	800642e <HAL_SPI_IRQHandler+0x42>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800652c:	0728      	lsls	r0, r5, #28
 800652e:	d583      	bpl.n	8006438 <HAL_SPI_IRQHandler+0x4c>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006530:	699a      	ldr	r2, [r3, #24]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8006532:	f41c 4f40 	tst.w	ip, #49152	; 0xc000
 8006536:	b2ff      	uxtb	r7, r7
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006538:	f042 0208 	orr.w	r2, r2, #8
 800653c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800653e:	6821      	ldr	r1, [r4, #0]
 8006540:	698a      	ldr	r2, [r1, #24]
 8006542:	f042 0210 	orr.w	r2, r2, #16
 8006546:	618a      	str	r2, [r1, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006548:	6821      	ldr	r1, [r4, #0]
 800654a:	698a      	ldr	r2, [r1, #24]
 800654c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006550:	618a      	str	r2, [r1, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8006552:	6821      	ldr	r1, [r4, #0]
 8006554:	690a      	ldr	r2, [r1, #16]
 8006556:	f022 0208 	bic.w	r2, r2, #8
 800655a:	610a      	str	r2, [r1, #16]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800655c:	d00f      	beq.n	800657e <HAL_SPI_IRQHandler+0x192>
 800655e:	2f04      	cmp	r7, #4
 8006560:	d059      	beq.n	8006616 <HAL_SPI_IRQHandler+0x22a>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8006562:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8006564:	69d2      	ldr	r2, [r2, #28]
 8006566:	b152      	cbz	r2, 800657e <HAL_SPI_IRQHandler+0x192>
 8006568:	2f03      	cmp	r7, #3
 800656a:	d03d      	beq.n	80065e8 <HAL_SPI_IRQHandler+0x1fc>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800656c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800656e:	69d2      	ldr	r2, [r2, #28]
 8006570:	b12a      	cbz	r2, 800657e <HAL_SPI_IRQHandler+0x192>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006572:	2f05      	cmp	r7, #5
 8006574:	d1cf      	bne.n	8006516 <HAL_SPI_IRQHandler+0x12a>
      HAL_SPI_TxRxCpltCallback(hspi);
 8006576:	4620      	mov	r0, r4
 8006578:	f7ff ff34 	bl	80063e4 <HAL_SPI_TxRxCpltCallback>
 800657c:	e7cb      	b.n	8006516 <HAL_SPI_IRQHandler+0x12a>
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800657e:	6822      	ldr	r2, [r4, #0]
 8006580:	6892      	ldr	r2, [r2, #8]
 8006582:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8006586:	d120      	bne.n	80065ca <HAL_SPI_IRQHandler+0x1de>
        while (hspi->RxXferCount != 0UL)
 8006588:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800658c:	b292      	uxth	r2, r2
 800658e:	b1e2      	cbz	r2, 80065ca <HAL_SPI_IRQHandler+0x1de>
 8006590:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006592:	e00f      	b.n	80065b4 <HAL_SPI_IRQHandler+0x1c8>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006594:	6822      	ldr	r2, [r4, #0]
 8006596:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006598:	600a      	str	r2, [r1, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800659a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800659c:	3104      	adds	r1, #4
 800659e:	6661      	str	r1, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 80065a0:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80065a4:	3a01      	subs	r2, #1
 80065a6:	b292      	uxth	r2, r2
 80065a8:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 80065ac:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80065b0:	b292      	uxth	r2, r2
 80065b2:	b152      	cbz	r2, 80065ca <HAL_SPI_IRQHandler+0x1de>
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80065b4:	68e2      	ldr	r2, [r4, #12]
 80065b6:	2a0f      	cmp	r2, #15
 80065b8:	d8ec      	bhi.n	8006594 <HAL_SPI_IRQHandler+0x1a8>
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065ba:	2a07      	cmp	r2, #7
 80065bc:	d923      	bls.n	8006606 <HAL_SPI_IRQHandler+0x21a>
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80065be:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80065c0:	800a      	strh	r2, [r1, #0]
            hspi->pRxBuffPtr += sizeof(uint16_t);
 80065c2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80065c4:	3102      	adds	r1, #2
 80065c6:	6661      	str	r1, [r4, #100]	; 0x64
 80065c8:	e7ea      	b.n	80065a0 <HAL_SPI_IRQHandler+0x1b4>
      SPI_CloseTransfer(hspi);
 80065ca:	4620      	mov	r0, r4
 80065cc:	f7ff fea2 	bl	8006314 <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 80065d0:	2301      	movs	r3, #1
 80065d2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065d6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80065da:	b98b      	cbnz	r3, 8006600 <HAL_SPI_IRQHandler+0x214>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80065dc:	2f05      	cmp	r7, #5
 80065de:	d0ca      	beq.n	8006576 <HAL_SPI_IRQHandler+0x18a>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80065e0:	2f04      	cmp	r7, #4
 80065e2:	d01c      	beq.n	800661e <HAL_SPI_IRQHandler+0x232>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80065e4:	2f03      	cmp	r7, #3
 80065e6:	d196      	bne.n	8006516 <HAL_SPI_IRQHandler+0x12a>
      HAL_SPI_TxCpltCallback(hspi);
 80065e8:	4620      	mov	r0, r4
 80065ea:	f7ff fef7 	bl	80063dc <HAL_SPI_TxCpltCallback>
 80065ee:	e792      	b.n	8006516 <HAL_SPI_IRQHandler+0x12a>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80065f0:	070e      	lsls	r6, r1, #28
 80065f2:	f57f af24 	bpl.w	800643e <HAL_SPI_IRQHandler+0x52>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80065f6:	699a      	ldr	r2, [r3, #24]
 80065f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065fc:	619a      	str	r2, [r3, #24]
    return;
 80065fe:	e78a      	b.n	8006516 <HAL_SPI_IRQHandler+0x12a>
        HAL_SPI_ErrorCallback(hspi);
 8006600:	f7ff fef2 	bl	80063e8 <HAL_SPI_ErrorCallback>
        return;
 8006604:	e787      	b.n	8006516 <HAL_SPI_IRQHandler+0x12a>
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006606:	6822      	ldr	r2, [r4, #0]
 8006608:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800660c:	700a      	strb	r2, [r1, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800660e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006610:	3101      	adds	r1, #1
 8006612:	6661      	str	r1, [r4, #100]	; 0x64
 8006614:	e7c4      	b.n	80065a0 <HAL_SPI_IRQHandler+0x1b4>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8006616:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006618:	69d2      	ldr	r2, [r2, #28]
 800661a:	2a00      	cmp	r2, #0
 800661c:	d0af      	beq.n	800657e <HAL_SPI_IRQHandler+0x192>
      HAL_SPI_RxCpltCallback(hspi);
 800661e:	4620      	mov	r0, r4
 8006620:	f7ff fede 	bl	80063e0 <HAL_SPI_RxCpltCallback>
 8006624:	e777      	b.n	8006516 <HAL_SPI_IRQHandler+0x12a>
        hspi->State = HAL_SPI_STATE_READY;
 8006626:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 8006628:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 800662a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800662e:	f7ff fedb 	bl	80063e8 <HAL_SPI_ErrorCallback>
 8006632:	e770      	b.n	8006516 <HAL_SPI_IRQHandler+0x12a>
 8006634:	fffffc94 	.word	0xfffffc94
 8006638:	0800663d 	.word	0x0800663d

0800663c <SPI_DMAAbortOnError>:
{
 800663c:	b508      	push	{r3, lr}
  hspi->RxXferCount = (uint16_t) 0UL;
 800663e:	2200      	movs	r2, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006640:	6b83      	ldr	r3, [r0, #56]	; 0x38
  hspi->State = HAL_SPI_STATE_READY;
 8006642:	2101      	movs	r1, #1
  hspi->RxXferCount = (uint16_t) 0UL;
 8006644:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  HAL_SPI_ErrorCallback(hspi);
 8006648:	4618      	mov	r0, r3
  hspi->TxXferCount = (uint16_t) 0UL;
 800664a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800664e:	f883 1081 	strb.w	r1, [r3, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 8006652:	f7ff fec9 	bl	80063e8 <HAL_SPI_ErrorCallback>
}
 8006656:	bd08      	pop	{r3, pc}

08006658 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006658:	b470      	push	{r4, r5, r6}
 800665a:	e9d1 3207 	ldrd	r3, r2, [r1, #28]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800665e:	680c      	ldr	r4, [r1, #0]
 8006660:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006662:	4313      	orrs	r3, r2
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006664:	b1c4      	cbz	r4, 8006698 <FMC_SDRAM_Init+0x40>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006666:	6804      	ldr	r4, [r0, #0]
 8006668:	432b      	orrs	r3, r5
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800666a:	4a16      	ldr	r2, [pc, #88]	; (80066c4 <FMC_SDRAM_Init+0x6c>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800666c:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8006670:	4323      	orrs	r3, r4
 8006672:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006674:	6843      	ldr	r3, [r0, #4]
 8006676:	684c      	ldr	r4, [r1, #4]
 8006678:	401a      	ands	r2, r3
 800667a:	690d      	ldr	r5, [r1, #16]
 800667c:	e9d1 3602 	ldrd	r3, r6, [r1, #8]
 8006680:	4322      	orrs	r2, r4
 8006682:	4313      	orrs	r3, r2
 8006684:	4333      	orrs	r3, r6
 8006686:	e9d1 4105 	ldrd	r4, r1, [r1, #20]
 800668a:	432b      	orrs	r3, r5
 800668c:	4323      	orrs	r3, r4
 800668e:	430b      	orrs	r3, r1
 8006690:	6043      	str	r3, [r0, #4]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8006692:	2000      	movs	r0, #0
 8006694:	bc70      	pop	{r4, r5, r6}
 8006696:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006698:	6804      	ldr	r4, [r0, #0]
 800669a:	432b      	orrs	r3, r5
 800669c:	4a09      	ldr	r2, [pc, #36]	; (80066c4 <FMC_SDRAM_Init+0x6c>)
 800669e:	684d      	ldr	r5, [r1, #4]
 80066a0:	4022      	ands	r2, r4
 80066a2:	688c      	ldr	r4, [r1, #8]
 80066a4:	68ce      	ldr	r6, [r1, #12]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	432b      	orrs	r3, r5
 80066aa:	690d      	ldr	r5, [r1, #16]
 80066ac:	4323      	orrs	r3, r4
 80066ae:	4333      	orrs	r3, r6
 80066b0:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 80066b4:	432b      	orrs	r3, r5
 80066b6:	4323      	orrs	r3, r4
 80066b8:	4313      	orrs	r3, r2
 80066ba:	6003      	str	r3, [r0, #0]
}
 80066bc:	2000      	movs	r0, #0
 80066be:	bc70      	pop	{r4, r5, r6}
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	ffff8000 	.word	0xffff8000

080066c8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80066c8:	b4f0      	push	{r4, r5, r6, r7}
 80066ca:	68cb      	ldr	r3, [r1, #12]
 80066cc:	694c      	ldr	r4, [r1, #20]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	3c01      	subs	r4, #1
 80066d2:	031b      	lsls	r3, r3, #12
 80066d4:	0524      	lsls	r4, r4, #20
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80066d6:	b1fa      	cbz	r2, 8006718 <FMC_SDRAM_Timing_Init+0x50>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80066d8:	6885      	ldr	r5, [r0, #8]
 80066da:	4323      	orrs	r3, r4
 80066dc:	4a1c      	ldr	r2, [pc, #112]	; (8006750 <FMC_SDRAM_Timing_Init+0x88>)
 80066de:	402a      	ands	r2, r5
 80066e0:	4313      	orrs	r3, r2
 80066e2:	6083      	str	r3, [r0, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80066e4:	684c      	ldr	r4, [r1, #4]
 80066e6:	68c2      	ldr	r2, [r0, #12]
 80066e8:	680d      	ldr	r5, [r1, #0]
 80066ea:	1e63      	subs	r3, r4, #1
 80066ec:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80066f0:	688c      	ldr	r4, [r1, #8]
 80066f2:	1e6e      	subs	r6, r5, #1
 80066f4:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 80066f8:	1e65      	subs	r5, r4, #1
 80066fa:	690c      	ldr	r4, [r1, #16]
 80066fc:	4333      	orrs	r3, r6
 80066fe:	698a      	ldr	r2, [r1, #24]
 8006700:	1e61      	subs	r1, r4, #1
 8006702:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8006706:	3a01      	subs	r2, #1
 8006708:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800670c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006710:	60c3      	str	r3, [r0, #12]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 8006712:	2000      	movs	r0, #0
 8006714:	bcf0      	pop	{r4, r5, r6, r7}
 8006716:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006718:	680a      	ldr	r2, [r1, #0]
 800671a:	4323      	orrs	r3, r4
 800671c:	6887      	ldr	r7, [r0, #8]
 800671e:	3a01      	subs	r2, #1
 8006720:	684c      	ldr	r4, [r1, #4]
 8006722:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
 8006726:	688d      	ldr	r5, [r1, #8]
 8006728:	4313      	orrs	r3, r2
 800672a:	1e66      	subs	r6, r4, #1
 800672c:	3d01      	subs	r5, #1
 800672e:	690c      	ldr	r4, [r1, #16]
 8006730:	433b      	orrs	r3, r7
 8006732:	698a      	ldr	r2, [r1, #24]
 8006734:	1e61      	subs	r1, r4, #1
 8006736:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 800673a:	3a01      	subs	r2, #1
 800673c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8006740:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006744:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006748:	6083      	str	r3, [r0, #8]
}
 800674a:	2000      	movs	r0, #0
 800674c:	bcf0      	pop	{r4, r5, r6, r7}
 800674e:	4770      	bx	lr
 8006750:	ff0f0fff 	.word	0xff0f0fff

08006754 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006754:	b470      	push	{r4, r5, r6}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
 8006756:	e9d1 3200 	ldrd	r3, r2, [r1]
{
 800675a:	4604      	mov	r4, r0
                          (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos)   |
                          ((Command->ModeRegisterDefinition)   << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800675c:	2000      	movs	r0, #0
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
 800675e:	4313      	orrs	r3, r2
 8006760:	6926      	ldr	r6, [r4, #16]
 8006762:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8006766:	4333      	orrs	r3, r6
 8006768:	3a01      	subs	r2, #1
 800676a:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
 800676e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8006772:	6123      	str	r3, [r4, #16]
}
 8006774:	bc70      	pop	{r4, r5, r6}
 8006776:	4770      	bx	lr

08006778 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006778:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800677a:	4b05      	ldr	r3, [pc, #20]	; (8006790 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 800677c:	2000      	movs	r0, #0
{
 800677e:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006780:	6954      	ldr	r4, [r2, #20]
 8006782:	4023      	ands	r3, r4
 8006784:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8006788:	6151      	str	r1, [r2, #20]
}
 800678a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	ffffc001 	.word	0xffffc001

08006794 <SDMMC_GetCmdResp1.part.2>:
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006794:	4b30      	ldr	r3, [pc, #192]	; (8006858 <SDMMC_GetCmdResp1.part.2+0xc4>)
  return (*(__IO uint32_t *) tmp);
 8006796:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006798:	4013      	ands	r3, r2
 800679a:	b34b      	cbz	r3, 80067f0 <SDMMC_GetCmdResp1.part.2+0x5c>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800679c:	2a00      	cmp	r2, #0
 800679e:	db29      	blt.n	80067f4 <SDMMC_GetCmdResp1.part.2+0x60>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80067a0:	0051      	lsls	r1, r2, #1
 80067a2:	d42d      	bmi.n	8006800 <SDMMC_GetCmdResp1.part.2+0x6c>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80067a4:	0093      	lsls	r3, r2, #2
 80067a6:	d42d      	bmi.n	8006804 <SDMMC_GetCmdResp1.part.2+0x70>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80067a8:	00d1      	lsls	r1, r2, #3
 80067aa:	d426      	bmi.n	80067fa <SDMMC_GetCmdResp1.part.2+0x66>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80067ac:	0113      	lsls	r3, r2, #4
 80067ae:	d42e      	bmi.n	800680e <SDMMC_GetCmdResp1.part.2+0x7a>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80067b0:	0151      	lsls	r1, r2, #5
 80067b2:	d42f      	bmi.n	8006814 <SDMMC_GetCmdResp1.part.2+0x80>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80067b4:	01d3      	lsls	r3, r2, #7
 80067b6:	d427      	bmi.n	8006808 <SDMMC_GetCmdResp1.part.2+0x74>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80067b8:	0211      	lsls	r1, r2, #8
 80067ba:	d42e      	bmi.n	800681a <SDMMC_GetCmdResp1.part.2+0x86>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80067bc:	0253      	lsls	r3, r2, #9
 80067be:	d42f      	bmi.n	8006820 <SDMMC_GetCmdResp1.part.2+0x8c>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80067c0:	0291      	lsls	r1, r2, #10
 80067c2:	d430      	bmi.n	8006826 <SDMMC_GetCmdResp1.part.2+0x92>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80067c4:	02d3      	lsls	r3, r2, #11
 80067c6:	d431      	bmi.n	800682c <SDMMC_GetCmdResp1.part.2+0x98>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80067c8:	0351      	lsls	r1, r2, #13
 80067ca:	d432      	bmi.n	8006832 <SDMMC_GetCmdResp1.part.2+0x9e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80067cc:	0393      	lsls	r3, r2, #14
 80067ce:	d433      	bmi.n	8006838 <SDMMC_GetCmdResp1.part.2+0xa4>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80067d0:	03d1      	lsls	r1, r2, #15
 80067d2:	d434      	bmi.n	800683e <SDMMC_GetCmdResp1.part.2+0xaa>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80067d4:	0413      	lsls	r3, r2, #16
 80067d6:	d435      	bmi.n	8006844 <SDMMC_GetCmdResp1.part.2+0xb0>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80067d8:	0451      	lsls	r1, r2, #17
 80067da:	d436      	bmi.n	800684a <SDMMC_GetCmdResp1.part.2+0xb6>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80067dc:	0493      	lsls	r3, r2, #18
 80067de:	d437      	bmi.n	8006850 <SDMMC_GetCmdResp1.part.2+0xbc>
  {
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80067e0:	f012 0f08 	tst.w	r2, #8
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80067e4:	bf14      	ite	ne
 80067e6:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 80067ea:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80067ee:	4770      	bx	lr
    return SDMMC_ERROR_NONE;
 80067f0:	4618      	mov	r0, r3
 80067f2:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80067f4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80067f8:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80067fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80067fe:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006800:	2040      	movs	r0, #64	; 0x40
 8006802:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006804:	2080      	movs	r0, #128	; 0x80
 8006806:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006808:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800680c:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800680e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006812:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006814:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006818:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800681a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800681e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006820:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006824:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006826:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800682a:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800682c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006830:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006832:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006836:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006838:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800683c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800683e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006842:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006844:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006848:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800684a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800684e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8006850:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  }
}
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	fdffe008 	.word	0xfdffe008

0800685c <SDMMC_Init>:
{
 800685c:	b084      	sub	sp, #16
 800685e:	b470      	push	{r4, r5, r6}
 8006860:	ad04      	add	r5, sp, #16
 8006862:	4606      	mov	r6, r0
             Init.BusWide             |\
 8006864:	9c07      	ldr	r4, [sp, #28]
}
 8006866:	2000      	movs	r0, #0
{
 8006868:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800686c:	460b      	mov	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800686e:	6875      	ldr	r5, [r6, #4]
             Init.ClockPowerSave      |\
 8006870:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
  tmpreg |= (Init.ClockEdge           |\
 8006874:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8006876:	9908      	ldr	r1, [sp, #32]
             Init.ClockPowerSave      |\
 8006878:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800687a:	4a04      	ldr	r2, [pc, #16]	; (800688c <SDMMC_Init+0x30>)
             Init.BusWide             |\
 800687c:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800687e:	402a      	ands	r2, r5
             Init.HardwareFlowControl |\
 8006880:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8006882:	4313      	orrs	r3, r2
 8006884:	6073      	str	r3, [r6, #4]
}
 8006886:	bc70      	pop	{r4, r5, r6}
 8006888:	b004      	add	sp, #16
 800688a:	4770      	bx	lr
 800688c:	ffc02c00 	.word	0xffc02c00

08006890 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 8006890:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop

08006898 <SDMMC_WriteFIFO>:
{
 8006898:	4603      	mov	r3, r0
  SDMMCx->FIFO = *pWriteData;
 800689a:	680a      	ldr	r2, [r1, #0]
}
 800689c:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 800689e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80068a2:	4770      	bx	lr

080068a4 <SDMMC_PowerState_ON>:
{
 80068a4:	4602      	mov	r2, r0
}
 80068a6:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80068a8:	6813      	ldr	r3, [r2, #0]
 80068aa:	f043 0303 	orr.w	r3, r3, #3
 80068ae:	6013      	str	r3, [r2, #0]
}
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop

080068b4 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80068b4:	6800      	ldr	r0, [r0, #0]
}
 80068b6:	f000 0003 	and.w	r0, r0, #3
 80068ba:	4770      	bx	lr

080068bc <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80068bc:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 80068be:	5840      	ldr	r0, [r0, r1]
}
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop

080068c4 <SDMMC_ConfigData>:
{
 80068c4:	b430      	push	{r4, r5}
 80068c6:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
 80068c8:	680b      	ldr	r3, [r1, #0]
}
 80068ca:	2000      	movs	r0, #0
  SDMMCx->DTIMER = Data->DataTimeOut;
 80068cc:	6253      	str	r3, [r2, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 80068ce:	684b      	ldr	r3, [r1, #4]
 80068d0:	6293      	str	r3, [r2, #40]	; 0x28
                       Data->TransferDir   |\
 80068d2:	690d      	ldr	r5, [r1, #16]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80068d4:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 80068d8:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 80068da:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80068dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                       Data->TransferDir   |\
 80068de:	432b      	orrs	r3, r5
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80068e0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
                       Data->TransferMode  |\
 80068e4:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80068e6:	430b      	orrs	r3, r1
 80068e8:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80068ea:	bc30      	pop	{r4, r5}
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop

080068f0 <SDMMC_CmdBlockLength>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80068f0:	4a1c      	ldr	r2, [pc, #112]	; (8006964 <SDMMC_CmdBlockLength+0x74>)
 80068f2:	4b1d      	ldr	r3, [pc, #116]	; (8006968 <SDMMC_CmdBlockLength+0x78>)
{
 80068f4:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80068f6:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80068f8:	f241 1410 	movw	r4, #4368	; 0x1110
  SDMMCx->ARG = Command->Argument;
 80068fc:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80068fe:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006902:	68c1      	ldr	r1, [r0, #12]
 8006904:	4d19      	ldr	r5, [pc, #100]	; (800696c <SDMMC_CmdBlockLength+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006906:	f241 3388 	movw	r3, #5000	; 0x1388
 800690a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800690c:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800690e:	4918      	ldr	r1, [pc, #96]	; (8006970 <SDMMC_CmdBlockLength+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006910:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006914:	432c      	orrs	r4, r5
 8006916:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8006918:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800691c:	d312      	bcc.n	8006944 <SDMMC_CmdBlockLength+0x54>
    sta_reg = SDMMCx->STA;
 800691e:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006920:	420a      	tst	r2, r1
 8006922:	d0f9      	beq.n	8006918 <SDMMC_CmdBlockLength+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006924:	0494      	lsls	r4, r2, #18
 8006926:	d4f7      	bmi.n	8006918 <SDMMC_CmdBlockLength+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006928:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800692a:	075a      	lsls	r2, r3, #29
 800692c:	d413      	bmi.n	8006956 <SDMMC_CmdBlockLength+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800692e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006930:	07db      	lsls	r3, r3, #31
 8006932:	d40b      	bmi.n	800694c <SDMMC_CmdBlockLength+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006934:	4b0f      	ldr	r3, [pc, #60]	; (8006974 <SDMMC_CmdBlockLength+0x84>)
 8006936:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006938:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800693a:	b2db      	uxtb	r3, r3
 800693c:	2b10      	cmp	r3, #16
 800693e:	d00e      	beq.n	800695e <SDMMC_CmdBlockLength+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006940:	2001      	movs	r0, #1
  return errorstate;
 8006942:	e001      	b.n	8006948 <SDMMC_CmdBlockLength+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8006944:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006948:	bc30      	pop	{r4, r5}
 800694a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800694c:	2301      	movs	r3, #1
 800694e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006950:	4618      	mov	r0, r3
}
 8006952:	bc30      	pop	{r4, r5}
 8006954:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006956:	2304      	movs	r3, #4
 8006958:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800695a:	4618      	mov	r0, r3
 800695c:	e7f4      	b.n	8006948 <SDMMC_CmdBlockLength+0x58>
}
 800695e:	bc30      	pop	{r4, r5}
 8006960:	f7ff bf18 	b.w	8006794 <SDMMC_GetCmdResp1.part.2>
 8006964:	20000014 	.word	0x20000014
 8006968:	10624dd3 	.word	0x10624dd3
 800696c:	fffee0c0 	.word	0xfffee0c0
 8006970:	00200045 	.word	0x00200045
 8006974:	002000c5 	.word	0x002000c5

08006978 <SDMMC_CmdReadSingleBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006978:	4a1c      	ldr	r2, [pc, #112]	; (80069ec <SDMMC_CmdReadSingleBlock+0x74>)
 800697a:	4b1d      	ldr	r3, [pc, #116]	; (80069f0 <SDMMC_CmdReadSingleBlock+0x78>)
{
 800697c:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800697e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006980:	f241 1411 	movw	r4, #4369	; 0x1111
  SDMMCx->ARG = Command->Argument;
 8006984:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006986:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800698a:	68c1      	ldr	r1, [r0, #12]
 800698c:	4d19      	ldr	r5, [pc, #100]	; (80069f4 <SDMMC_CmdReadSingleBlock+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800698e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006992:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006994:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006996:	4918      	ldr	r1, [pc, #96]	; (80069f8 <SDMMC_CmdReadSingleBlock+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006998:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800699c:	432c      	orrs	r4, r5
 800699e:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80069a0:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80069a4:	d312      	bcc.n	80069cc <SDMMC_CmdReadSingleBlock+0x54>
    sta_reg = SDMMCx->STA;
 80069a6:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80069a8:	420a      	tst	r2, r1
 80069aa:	d0f9      	beq.n	80069a0 <SDMMC_CmdReadSingleBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80069ac:	0494      	lsls	r4, r2, #18
 80069ae:	d4f7      	bmi.n	80069a0 <SDMMC_CmdReadSingleBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80069b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80069b2:	075a      	lsls	r2, r3, #29
 80069b4:	d413      	bmi.n	80069de <SDMMC_CmdReadSingleBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80069b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80069b8:	07db      	lsls	r3, r3, #31
 80069ba:	d40b      	bmi.n	80069d4 <SDMMC_CmdReadSingleBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80069bc:	4b0f      	ldr	r3, [pc, #60]	; (80069fc <SDMMC_CmdReadSingleBlock+0x84>)
 80069be:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80069c0:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b11      	cmp	r3, #17
 80069c6:	d00e      	beq.n	80069e6 <SDMMC_CmdReadSingleBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80069c8:	2001      	movs	r0, #1
  return errorstate;
 80069ca:	e001      	b.n	80069d0 <SDMMC_CmdReadSingleBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 80069cc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80069d0:	bc30      	pop	{r4, r5}
 80069d2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80069d4:	2301      	movs	r3, #1
 80069d6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80069d8:	4618      	mov	r0, r3
}
 80069da:	bc30      	pop	{r4, r5}
 80069dc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80069de:	2304      	movs	r3, #4
 80069e0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80069e2:	4618      	mov	r0, r3
 80069e4:	e7f4      	b.n	80069d0 <SDMMC_CmdReadSingleBlock+0x58>
}
 80069e6:	bc30      	pop	{r4, r5}
 80069e8:	f7ff bed4 	b.w	8006794 <SDMMC_GetCmdResp1.part.2>
 80069ec:	20000014 	.word	0x20000014
 80069f0:	10624dd3 	.word	0x10624dd3
 80069f4:	fffee0c0 	.word	0xfffee0c0
 80069f8:	00200045 	.word	0x00200045
 80069fc:	002000c5 	.word	0x002000c5

08006a00 <SDMMC_CmdReadMultiBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006a00:	4a1c      	ldr	r2, [pc, #112]	; (8006a74 <SDMMC_CmdReadMultiBlock+0x74>)
 8006a02:	4b1d      	ldr	r3, [pc, #116]	; (8006a78 <SDMMC_CmdReadMultiBlock+0x78>)
{
 8006a04:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006a06:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006a08:	f241 1412 	movw	r4, #4370	; 0x1112
  SDMMCx->ARG = Command->Argument;
 8006a0c:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006a0e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006a12:	68c1      	ldr	r1, [r0, #12]
 8006a14:	4d19      	ldr	r5, [pc, #100]	; (8006a7c <SDMMC_CmdReadMultiBlock+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006a16:	f241 3388 	movw	r3, #5000	; 0x1388
 8006a1a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006a1c:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006a1e:	4918      	ldr	r1, [pc, #96]	; (8006a80 <SDMMC_CmdReadMultiBlock+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006a20:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006a24:	432c      	orrs	r4, r5
 8006a26:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8006a28:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8006a2c:	d312      	bcc.n	8006a54 <SDMMC_CmdReadMultiBlock+0x54>
    sta_reg = SDMMCx->STA;
 8006a2e:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006a30:	420a      	tst	r2, r1
 8006a32:	d0f9      	beq.n	8006a28 <SDMMC_CmdReadMultiBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006a34:	0494      	lsls	r4, r2, #18
 8006a36:	d4f7      	bmi.n	8006a28 <SDMMC_CmdReadMultiBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006a38:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006a3a:	075a      	lsls	r2, r3, #29
 8006a3c:	d413      	bmi.n	8006a66 <SDMMC_CmdReadMultiBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006a3e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006a40:	07db      	lsls	r3, r3, #31
 8006a42:	d40b      	bmi.n	8006a5c <SDMMC_CmdReadMultiBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006a44:	4b0f      	ldr	r3, [pc, #60]	; (8006a84 <SDMMC_CmdReadMultiBlock+0x84>)
 8006a46:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006a48:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b12      	cmp	r3, #18
 8006a4e:	d00e      	beq.n	8006a6e <SDMMC_CmdReadMultiBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006a50:	2001      	movs	r0, #1
  return errorstate;
 8006a52:	e001      	b.n	8006a58 <SDMMC_CmdReadMultiBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8006a54:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006a58:	bc30      	pop	{r4, r5}
 8006a5a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006a60:	4618      	mov	r0, r3
}
 8006a62:	bc30      	pop	{r4, r5}
 8006a64:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006a66:	2304      	movs	r3, #4
 8006a68:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	e7f4      	b.n	8006a58 <SDMMC_CmdReadMultiBlock+0x58>
}
 8006a6e:	bc30      	pop	{r4, r5}
 8006a70:	f7ff be90 	b.w	8006794 <SDMMC_GetCmdResp1.part.2>
 8006a74:	20000014 	.word	0x20000014
 8006a78:	10624dd3 	.word	0x10624dd3
 8006a7c:	fffee0c0 	.word	0xfffee0c0
 8006a80:	00200045 	.word	0x00200045
 8006a84:	002000c5 	.word	0x002000c5

08006a88 <SDMMC_CmdWriteSingleBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006a88:	4a1c      	ldr	r2, [pc, #112]	; (8006afc <SDMMC_CmdWriteSingleBlock+0x74>)
 8006a8a:	4b1d      	ldr	r3, [pc, #116]	; (8006b00 <SDMMC_CmdWriteSingleBlock+0x78>)
{
 8006a8c:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006a8e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006a90:	f241 1418 	movw	r4, #4376	; 0x1118
  SDMMCx->ARG = Command->Argument;
 8006a94:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006a96:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006a9a:	68c1      	ldr	r1, [r0, #12]
 8006a9c:	4d19      	ldr	r5, [pc, #100]	; (8006b04 <SDMMC_CmdWriteSingleBlock+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006a9e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006aa2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006aa4:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006aa6:	4918      	ldr	r1, [pc, #96]	; (8006b08 <SDMMC_CmdWriteSingleBlock+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006aa8:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006aac:	432c      	orrs	r4, r5
 8006aae:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8006ab0:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8006ab4:	d312      	bcc.n	8006adc <SDMMC_CmdWriteSingleBlock+0x54>
    sta_reg = SDMMCx->STA;
 8006ab6:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006ab8:	420a      	tst	r2, r1
 8006aba:	d0f9      	beq.n	8006ab0 <SDMMC_CmdWriteSingleBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006abc:	0494      	lsls	r4, r2, #18
 8006abe:	d4f7      	bmi.n	8006ab0 <SDMMC_CmdWriteSingleBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006ac0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006ac2:	075a      	lsls	r2, r3, #29
 8006ac4:	d413      	bmi.n	8006aee <SDMMC_CmdWriteSingleBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006ac6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006ac8:	07db      	lsls	r3, r3, #31
 8006aca:	d40b      	bmi.n	8006ae4 <SDMMC_CmdWriteSingleBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006acc:	4b0f      	ldr	r3, [pc, #60]	; (8006b0c <SDMMC_CmdWriteSingleBlock+0x84>)
 8006ace:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006ad0:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b18      	cmp	r3, #24
 8006ad6:	d00e      	beq.n	8006af6 <SDMMC_CmdWriteSingleBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ad8:	2001      	movs	r0, #1
  return errorstate;
 8006ada:	e001      	b.n	8006ae0 <SDMMC_CmdWriteSingleBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8006adc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006ae0:	bc30      	pop	{r4, r5}
 8006ae2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ae8:	4618      	mov	r0, r3
}
 8006aea:	bc30      	pop	{r4, r5}
 8006aec:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006aee:	2304      	movs	r3, #4
 8006af0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006af2:	4618      	mov	r0, r3
 8006af4:	e7f4      	b.n	8006ae0 <SDMMC_CmdWriteSingleBlock+0x58>
}
 8006af6:	bc30      	pop	{r4, r5}
 8006af8:	f7ff be4c 	b.w	8006794 <SDMMC_GetCmdResp1.part.2>
 8006afc:	20000014 	.word	0x20000014
 8006b00:	10624dd3 	.word	0x10624dd3
 8006b04:	fffee0c0 	.word	0xfffee0c0
 8006b08:	00200045 	.word	0x00200045
 8006b0c:	002000c5 	.word	0x002000c5

08006b10 <SDMMC_CmdWriteMultiBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006b10:	4a1c      	ldr	r2, [pc, #112]	; (8006b84 <SDMMC_CmdWriteMultiBlock+0x74>)
 8006b12:	4b1d      	ldr	r3, [pc, #116]	; (8006b88 <SDMMC_CmdWriteMultiBlock+0x78>)
{
 8006b14:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006b16:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006b18:	f241 1419 	movw	r4, #4377	; 0x1119
  SDMMCx->ARG = Command->Argument;
 8006b1c:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006b1e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006b22:	68c1      	ldr	r1, [r0, #12]
 8006b24:	4d19      	ldr	r5, [pc, #100]	; (8006b8c <SDMMC_CmdWriteMultiBlock+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006b26:	f241 3388 	movw	r3, #5000	; 0x1388
 8006b2a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006b2c:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006b2e:	4918      	ldr	r1, [pc, #96]	; (8006b90 <SDMMC_CmdWriteMultiBlock+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006b30:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006b34:	432c      	orrs	r4, r5
 8006b36:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8006b38:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8006b3c:	d312      	bcc.n	8006b64 <SDMMC_CmdWriteMultiBlock+0x54>
    sta_reg = SDMMCx->STA;
 8006b3e:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006b40:	420a      	tst	r2, r1
 8006b42:	d0f9      	beq.n	8006b38 <SDMMC_CmdWriteMultiBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006b44:	0494      	lsls	r4, r2, #18
 8006b46:	d4f7      	bmi.n	8006b38 <SDMMC_CmdWriteMultiBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006b48:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006b4a:	075a      	lsls	r2, r3, #29
 8006b4c:	d413      	bmi.n	8006b76 <SDMMC_CmdWriteMultiBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006b4e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006b50:	07db      	lsls	r3, r3, #31
 8006b52:	d40b      	bmi.n	8006b6c <SDMMC_CmdWriteMultiBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006b54:	4b0f      	ldr	r3, [pc, #60]	; (8006b94 <SDMMC_CmdWriteMultiBlock+0x84>)
 8006b56:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006b58:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b19      	cmp	r3, #25
 8006b5e:	d00e      	beq.n	8006b7e <SDMMC_CmdWriteMultiBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006b60:	2001      	movs	r0, #1
  return errorstate;
 8006b62:	e001      	b.n	8006b68 <SDMMC_CmdWriteMultiBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8006b64:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006b68:	bc30      	pop	{r4, r5}
 8006b6a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006b70:	4618      	mov	r0, r3
}
 8006b72:	bc30      	pop	{r4, r5}
 8006b74:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006b76:	2304      	movs	r3, #4
 8006b78:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	e7f4      	b.n	8006b68 <SDMMC_CmdWriteMultiBlock+0x58>
}
 8006b7e:	bc30      	pop	{r4, r5}
 8006b80:	f7ff be08 	b.w	8006794 <SDMMC_GetCmdResp1.part.2>
 8006b84:	20000014 	.word	0x20000014
 8006b88:	10624dd3 	.word	0x10624dd3
 8006b8c:	fffee0c0 	.word	0xfffee0c0
 8006b90:	00200045 	.word	0x00200045
 8006b94:	002000c5 	.word	0x002000c5

08006b98 <SDMMC_CmdStopTransfer>:
{
 8006b98:	b570      	push	{r4, r5, r6, lr}
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8006b9a:	68c3      	ldr	r3, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 8006b9c:	2600      	movs	r6, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006b9e:	4a2b      	ldr	r2, [pc, #172]	; (8006c4c <SDMMC_CmdStopTransfer+0xb4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006ba0:	f241 140c 	movw	r4, #4364	; 0x110c
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8006ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006ba8:	4d29      	ldr	r5, [pc, #164]	; (8006c50 <SDMMC_CmdStopTransfer+0xb8>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006baa:	6812      	ldr	r2, [r2, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8006bac:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8006bae:	68c1      	ldr	r1, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006bb0:	4b28      	ldr	r3, [pc, #160]	; (8006c54 <SDMMC_CmdStopTransfer+0xbc>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8006bb2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006bb6:	fba3 3202 	umull	r3, r2, r3, r2
 8006bba:	4b27      	ldr	r3, [pc, #156]	; (8006c58 <SDMMC_CmdStopTransfer+0xc0>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8006bbc:	60c1      	str	r1, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 8006bbe:	6086      	str	r6, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006bc0:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006bc2:	68c1      	ldr	r1, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006bc4:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006bc8:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006bca:	4924      	ldr	r1, [pc, #144]	; (8006c5c <SDMMC_CmdStopTransfer+0xc4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006bcc:	432c      	orrs	r4, r5
 8006bce:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8006bd0:	b1c3      	cbz	r3, 8006c04 <SDMMC_CmdStopTransfer+0x6c>
    sta_reg = SDMMCx->STA;
 8006bd2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006bd4:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006bd6:	420a      	tst	r2, r1
 8006bd8:	d0fa      	beq.n	8006bd0 <SDMMC_CmdStopTransfer+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006bda:	0492      	lsls	r2, r2, #18
 8006bdc:	d4f8      	bmi.n	8006bd0 <SDMMC_CmdStopTransfer+0x38>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006bde:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006be0:	075b      	lsls	r3, r3, #29
 8006be2:	d41f      	bmi.n	8006c24 <SDMMC_CmdStopTransfer+0x8c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006be4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006be6:	f014 0401 	ands.w	r4, r4, #1
 8006bea:	d113      	bne.n	8006c14 <SDMMC_CmdStopTransfer+0x7c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006bec:	4b1c      	ldr	r3, [pc, #112]	; (8006c60 <SDMMC_CmdStopTransfer+0xc8>)
 8006bee:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006bf0:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b0c      	cmp	r3, #12
 8006bf6:	d01c      	beq.n	8006c32 <SDMMC_CmdStopTransfer+0x9a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006bf8:	68c3      	ldr	r3, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006bfa:	2401      	movs	r4, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006bfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c00:	60c3      	str	r3, [r0, #12]
 8006c02:	e005      	b.n	8006c10 <SDMMC_CmdStopTransfer+0x78>
 8006c04:	68c3      	ldr	r3, [r0, #12]
      return SDMMC_ERROR_TIMEOUT;
 8006c06:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c0e:	60c3      	str	r3, [r0, #12]
}
 8006c10:	4620      	mov	r0, r4
 8006c12:	bd70      	pop	{r4, r5, r6, pc}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006c14:	2401      	movs	r4, #1
 8006c16:	6384      	str	r4, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006c18:	68c3      	ldr	r3, [r0, #12]
 8006c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c1e:	60c3      	str	r3, [r0, #12]
}
 8006c20:	4620      	mov	r0, r4
 8006c22:	bd70      	pop	{r4, r5, r6, pc}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006c24:	2404      	movs	r4, #4
 8006c26:	6384      	str	r4, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006c28:	68c3      	ldr	r3, [r0, #12]
 8006c2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c2e:	60c3      	str	r3, [r0, #12]
 8006c30:	e7ee      	b.n	8006c10 <SDMMC_CmdStopTransfer+0x78>
 8006c32:	4605      	mov	r5, r0
 8006c34:	f7ff fdae 	bl	8006794 <SDMMC_GetCmdResp1.part.2>
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006c38:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8006c3c:	bf18      	it	ne
 8006c3e:	4604      	movne	r4, r0
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006c40:	68eb      	ldr	r3, [r5, #12]
 8006c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c46:	60eb      	str	r3, [r5, #12]
 8006c48:	e7e2      	b.n	8006c10 <SDMMC_CmdStopTransfer+0x78>
 8006c4a:	bf00      	nop
 8006c4c:	20000014 	.word	0x20000014
 8006c50:	fffee0c0 	.word	0xfffee0c0
 8006c54:	10624dd3 	.word	0x10624dd3
 8006c58:	05f5e100 	.word	0x05f5e100
 8006c5c:	00200045 	.word	0x00200045
 8006c60:	002000c5 	.word	0x002000c5

08006c64 <SDMMC_CmdSelDesel>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006c64:	4b1c      	ldr	r3, [pc, #112]	; (8006cd8 <SDMMC_CmdSelDesel+0x74>)
 8006c66:	491d      	ldr	r1, [pc, #116]	; (8006cdc <SDMMC_CmdSelDesel+0x78>)
{
 8006c68:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006c6a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006c6c:	f241 1407 	movw	r4, #4359	; 0x1107
  SDMMCx->ARG = Command->Argument;
 8006c70:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006c72:	4d1b      	ldr	r5, [pc, #108]	; (8006ce0 <SDMMC_CmdSelDesel+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006c74:	fba1 3203 	umull	r3, r2, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006c78:	68c1      	ldr	r1, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006c7a:	f241 3388 	movw	r3, #5000	; 0x1388
 8006c7e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006c80:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006c82:	4918      	ldr	r1, [pc, #96]	; (8006ce4 <SDMMC_CmdSelDesel+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006c84:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006c88:	432c      	orrs	r4, r5
 8006c8a:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8006c8c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8006c90:	d312      	bcc.n	8006cb8 <SDMMC_CmdSelDesel+0x54>
    sta_reg = SDMMCx->STA;
 8006c92:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006c94:	420a      	tst	r2, r1
 8006c96:	d0f9      	beq.n	8006c8c <SDMMC_CmdSelDesel+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006c98:	0494      	lsls	r4, r2, #18
 8006c9a:	d4f7      	bmi.n	8006c8c <SDMMC_CmdSelDesel+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006c9c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006c9e:	075a      	lsls	r2, r3, #29
 8006ca0:	d413      	bmi.n	8006cca <SDMMC_CmdSelDesel+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006ca2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006ca4:	07db      	lsls	r3, r3, #31
 8006ca6:	d40b      	bmi.n	8006cc0 <SDMMC_CmdSelDesel+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006ca8:	4b0f      	ldr	r3, [pc, #60]	; (8006ce8 <SDMMC_CmdSelDesel+0x84>)
 8006caa:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006cac:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b07      	cmp	r3, #7
 8006cb2:	d00e      	beq.n	8006cd2 <SDMMC_CmdSelDesel+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006cb4:	2001      	movs	r0, #1
  return errorstate;
 8006cb6:	e001      	b.n	8006cbc <SDMMC_CmdSelDesel+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8006cb8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006cbc:	bc30      	pop	{r4, r5}
 8006cbe:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006cc4:	4618      	mov	r0, r3
}
 8006cc6:	bc30      	pop	{r4, r5}
 8006cc8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006cca:	2304      	movs	r3, #4
 8006ccc:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006cce:	4618      	mov	r0, r3
 8006cd0:	e7f4      	b.n	8006cbc <SDMMC_CmdSelDesel+0x58>
}
 8006cd2:	bc30      	pop	{r4, r5}
 8006cd4:	f7ff bd5e 	b.w	8006794 <SDMMC_GetCmdResp1.part.2>
 8006cd8:	20000014 	.word	0x20000014
 8006cdc:	10624dd3 	.word	0x10624dd3
 8006ce0:	fffee0c0 	.word	0xfffee0c0
 8006ce4:	00200045 	.word	0x00200045
 8006ce8:	002000c5 	.word	0x002000c5

08006cec <SDMMC_CmdGoIdleState>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006cec:	4b12      	ldr	r3, [pc, #72]	; (8006d38 <SDMMC_CmdGoIdleState+0x4c>)
{
 8006cee:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 8006cf0:	2200      	movs	r2, #0
{
 8006cf2:	b410      	push	{r4}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006cf4:	4c11      	ldr	r4, [pc, #68]	; (8006d3c <SDMMC_CmdGoIdleState+0x50>)
 8006cf6:	6818      	ldr	r0, [r3, #0]
 8006cf8:	f241 3388 	movw	r3, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8006cfc:	608a      	str	r2, [r1, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006cfe:	fba4 4000 	umull	r4, r0, r4, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006d02:	4a0f      	ldr	r2, [pc, #60]	; (8006d40 <SDMMC_CmdGoIdleState+0x54>)
 8006d04:	68cc      	ldr	r4, [r1, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006d06:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006d08:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006d0a:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006d0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d12:	60ca      	str	r2, [r1, #12]
 8006d14:	e002      	b.n	8006d1c <SDMMC_CmdGoIdleState+0x30>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006d16:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8006d18:	0612      	lsls	r2, r2, #24
 8006d1a:	d407      	bmi.n	8006d2c <SDMMC_CmdGoIdleState+0x40>
    if (count-- == 0U)
 8006d1c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8006d20:	d2f9      	bcs.n	8006d16 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8006d22:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d2a:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006d2c:	4b05      	ldr	r3, [pc, #20]	; (8006d44 <SDMMC_CmdGoIdleState+0x58>)
  return SDMMC_ERROR_NONE;
 8006d2e:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006d30:	638b      	str	r3, [r1, #56]	; 0x38
}
 8006d32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	20000014 	.word	0x20000014
 8006d3c:	10624dd3 	.word	0x10624dd3
 8006d40:	fffee0c0 	.word	0xfffee0c0
 8006d44:	002000c5 	.word	0x002000c5

08006d48 <SDMMC_CmdOperCond>:
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006d48:	4a1c      	ldr	r2, [pc, #112]	; (8006dbc <SDMMC_CmdOperCond+0x74>)
{
 8006d4a:	4601      	mov	r1, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006d4c:	4b1c      	ldr	r3, [pc, #112]	; (8006dc0 <SDMMC_CmdOperCond+0x78>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006d4e:	f241 1008 	movw	r0, #4360	; 0x1108
{
 8006d52:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8006d54:	f44f 74d5 	mov.w	r4, #426	; 0x1aa
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006d58:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8006d5a:	608c      	str	r4, [r1, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006d5c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006d60:	68cd      	ldr	r5, [r1, #12]
 8006d62:	4c18      	ldr	r4, [pc, #96]	; (8006dc4 <SDMMC_CmdOperCond+0x7c>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006d64:	f241 3388 	movw	r3, #5000	; 0x1388
 8006d68:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006d6a:	402c      	ands	r4, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006d6c:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006d70:	4320      	orrs	r0, r4
 8006d72:	60c8      	str	r0, [r1, #12]

  do
  {
    if (count-- == 0U)
 8006d74:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8006d78:	d313      	bcc.n	8006da2 <SDMMC_CmdOperCond+0x5a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8006d7a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006d7c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8006d80:	d0f8      	beq.n	8006d74 <SDMMC_CmdOperCond+0x2c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006d82:	0492      	lsls	r2, r2, #18
 8006d84:	d4f6      	bmi.n	8006d74 <SDMMC_CmdOperCond+0x2c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006d86:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006d88:	075b      	lsls	r3, r3, #29
 8006d8a:	d412      	bmi.n	8006db2 <SDMMC_CmdOperCond+0x6a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006d8c:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8006d8e:	f010 0001 	ands.w	r0, r0, #1
 8006d92:	d10a      	bne.n	8006daa <SDMMC_CmdOperCond+0x62>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006d94:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006d96:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8006d9a:	d00d      	beq.n	8006db8 <SDMMC_CmdOperCond+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006d9c:	2340      	movs	r3, #64	; 0x40
 8006d9e:	638b      	str	r3, [r1, #56]	; 0x38
 8006da0:	e001      	b.n	8006da6 <SDMMC_CmdOperCond+0x5e>
      return SDMMC_ERROR_TIMEOUT;
 8006da2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006da6:	bc30      	pop	{r4, r5}
 8006da8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006daa:	2001      	movs	r0, #1
 8006dac:	6388      	str	r0, [r1, #56]	; 0x38
}
 8006dae:	bc30      	pop	{r4, r5}
 8006db0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006db2:	2004      	movs	r0, #4
 8006db4:	6388      	str	r0, [r1, #56]	; 0x38
 8006db6:	e7f6      	b.n	8006da6 <SDMMC_CmdOperCond+0x5e>
  }

  return SDMMC_ERROR_NONE;
 8006db8:	4618      	mov	r0, r3
  return errorstate;
 8006dba:	e7f4      	b.n	8006da6 <SDMMC_CmdOperCond+0x5e>
 8006dbc:	20000014 	.word	0x20000014
 8006dc0:	10624dd3 	.word	0x10624dd3
 8006dc4:	fffee0c0 	.word	0xfffee0c0

08006dc8 <SDMMC_CmdAppCommand>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006dc8:	4a1c      	ldr	r2, [pc, #112]	; (8006e3c <SDMMC_CmdAppCommand+0x74>)
 8006dca:	4b1d      	ldr	r3, [pc, #116]	; (8006e40 <SDMMC_CmdAppCommand+0x78>)
{
 8006dcc:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006dce:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006dd0:	f241 1437 	movw	r4, #4407	; 0x1137
  SDMMCx->ARG = Command->Argument;
 8006dd4:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006dd6:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006dda:	68c1      	ldr	r1, [r0, #12]
 8006ddc:	4d19      	ldr	r5, [pc, #100]	; (8006e44 <SDMMC_CmdAppCommand+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006dde:	f241 3388 	movw	r3, #5000	; 0x1388
 8006de2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006de4:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006de6:	4918      	ldr	r1, [pc, #96]	; (8006e48 <SDMMC_CmdAppCommand+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006de8:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006dec:	432c      	orrs	r4, r5
 8006dee:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8006df0:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8006df4:	d312      	bcc.n	8006e1c <SDMMC_CmdAppCommand+0x54>
    sta_reg = SDMMCx->STA;
 8006df6:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006df8:	420a      	tst	r2, r1
 8006dfa:	d0f9      	beq.n	8006df0 <SDMMC_CmdAppCommand+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006dfc:	0494      	lsls	r4, r2, #18
 8006dfe:	d4f7      	bmi.n	8006df0 <SDMMC_CmdAppCommand+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006e00:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006e02:	075a      	lsls	r2, r3, #29
 8006e04:	d413      	bmi.n	8006e2e <SDMMC_CmdAppCommand+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006e06:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006e08:	07db      	lsls	r3, r3, #31
 8006e0a:	d40b      	bmi.n	8006e24 <SDMMC_CmdAppCommand+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006e0c:	4b0f      	ldr	r3, [pc, #60]	; (8006e4c <SDMMC_CmdAppCommand+0x84>)
 8006e0e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006e10:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b37      	cmp	r3, #55	; 0x37
 8006e16:	d00e      	beq.n	8006e36 <SDMMC_CmdAppCommand+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006e18:	2001      	movs	r0, #1
  return errorstate;
 8006e1a:	e001      	b.n	8006e20 <SDMMC_CmdAppCommand+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8006e1c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006e20:	bc30      	pop	{r4, r5}
 8006e22:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006e24:	2301      	movs	r3, #1
 8006e26:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006e28:	4618      	mov	r0, r3
}
 8006e2a:	bc30      	pop	{r4, r5}
 8006e2c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006e2e:	2304      	movs	r3, #4
 8006e30:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006e32:	4618      	mov	r0, r3
 8006e34:	e7f4      	b.n	8006e20 <SDMMC_CmdAppCommand+0x58>
}
 8006e36:	bc30      	pop	{r4, r5}
 8006e38:	f7ff bcac 	b.w	8006794 <SDMMC_GetCmdResp1.part.2>
 8006e3c:	20000014 	.word	0x20000014
 8006e40:	10624dd3 	.word	0x10624dd3
 8006e44:	fffee0c0 	.word	0xfffee0c0
 8006e48:	00200045 	.word	0x00200045
 8006e4c:	002000c5 	.word	0x002000c5

08006e50 <SDMMC_CmdAppOperCommand>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e50:	4a15      	ldr	r2, [pc, #84]	; (8006ea8 <SDMMC_CmdAppOperCommand+0x58>)
 8006e52:	4b16      	ldr	r3, [pc, #88]	; (8006eac <SDMMC_CmdAppOperCommand+0x5c>)
{
 8006e54:	b430      	push	{r4, r5}
 8006e56:	4604      	mov	r4, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e58:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006e5a:	f241 1029 	movw	r0, #4393	; 0x1129
  SDMMCx->ARG = Command->Argument;
 8006e5e:	60a1      	str	r1, [r4, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e60:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006e64:	68e5      	ldr	r5, [r4, #12]
 8006e66:	4912      	ldr	r1, [pc, #72]	; (8006eb0 <SDMMC_CmdAppOperCommand+0x60>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e68:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e6c:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006e6e:	4029      	ands	r1, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e70:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006e74:	4308      	orrs	r0, r1
 8006e76:	60e0      	str	r0, [r4, #12]
    if (count-- == 0U)
 8006e78:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8006e7c:	d30d      	bcc.n	8006e9a <SDMMC_CmdAppOperCommand+0x4a>
    sta_reg = SDMMCx->STA;
 8006e7e:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006e80:	f012 0f45 	tst.w	r2, #69	; 0x45
 8006e84:	d0f8      	beq.n	8006e78 <SDMMC_CmdAppOperCommand+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006e86:	0492      	lsls	r2, r2, #18
 8006e88:	d4f6      	bmi.n	8006e78 <SDMMC_CmdAppOperCommand+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006e8a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006e8c:	f010 0004 	ands.w	r0, r0, #4
 8006e90:	d107      	bne.n	8006ea2 <SDMMC_CmdAppOperCommand+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006e92:	4b08      	ldr	r3, [pc, #32]	; (8006eb4 <SDMMC_CmdAppOperCommand+0x64>)
 8006e94:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8006e96:	bc30      	pop	{r4, r5}
 8006e98:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8006e9a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006e9e:	bc30      	pop	{r4, r5}
 8006ea0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006ea2:	2004      	movs	r0, #4
 8006ea4:	63a0      	str	r0, [r4, #56]	; 0x38
 8006ea6:	e7fa      	b.n	8006e9e <SDMMC_CmdAppOperCommand+0x4e>
 8006ea8:	20000014 	.word	0x20000014
 8006eac:	10624dd3 	.word	0x10624dd3
 8006eb0:	fffee0c0 	.word	0xfffee0c0
 8006eb4:	002000c5 	.word	0x002000c5

08006eb8 <SDMMC_CmdBusWidth>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006eb8:	4a1c      	ldr	r2, [pc, #112]	; (8006f2c <SDMMC_CmdBusWidth+0x74>)
 8006eba:	4b1d      	ldr	r3, [pc, #116]	; (8006f30 <SDMMC_CmdBusWidth+0x78>)
{
 8006ebc:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006ebe:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006ec0:	f241 1406 	movw	r4, #4358	; 0x1106
  SDMMCx->ARG = Command->Argument;
 8006ec4:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006ec6:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006eca:	68c1      	ldr	r1, [r0, #12]
 8006ecc:	4d19      	ldr	r5, [pc, #100]	; (8006f34 <SDMMC_CmdBusWidth+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006ece:	f241 3388 	movw	r3, #5000	; 0x1388
 8006ed2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006ed4:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006ed6:	4918      	ldr	r1, [pc, #96]	; (8006f38 <SDMMC_CmdBusWidth+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006ed8:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006edc:	432c      	orrs	r4, r5
 8006ede:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8006ee0:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8006ee4:	d312      	bcc.n	8006f0c <SDMMC_CmdBusWidth+0x54>
    sta_reg = SDMMCx->STA;
 8006ee6:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006ee8:	420a      	tst	r2, r1
 8006eea:	d0f9      	beq.n	8006ee0 <SDMMC_CmdBusWidth+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006eec:	0494      	lsls	r4, r2, #18
 8006eee:	d4f7      	bmi.n	8006ee0 <SDMMC_CmdBusWidth+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006ef0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006ef2:	075a      	lsls	r2, r3, #29
 8006ef4:	d413      	bmi.n	8006f1e <SDMMC_CmdBusWidth+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006ef6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006ef8:	07db      	lsls	r3, r3, #31
 8006efa:	d40b      	bmi.n	8006f14 <SDMMC_CmdBusWidth+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006efc:	4b0f      	ldr	r3, [pc, #60]	; (8006f3c <SDMMC_CmdBusWidth+0x84>)
 8006efe:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006f00:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b06      	cmp	r3, #6
 8006f06:	d00e      	beq.n	8006f26 <SDMMC_CmdBusWidth+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f08:	2001      	movs	r0, #1
  return errorstate;
 8006f0a:	e001      	b.n	8006f10 <SDMMC_CmdBusWidth+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8006f0c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006f10:	bc30      	pop	{r4, r5}
 8006f12:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006f14:	2301      	movs	r3, #1
 8006f16:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f18:	4618      	mov	r0, r3
}
 8006f1a:	bc30      	pop	{r4, r5}
 8006f1c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006f1e:	2304      	movs	r3, #4
 8006f20:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006f22:	4618      	mov	r0, r3
 8006f24:	e7f4      	b.n	8006f10 <SDMMC_CmdBusWidth+0x58>
}
 8006f26:	bc30      	pop	{r4, r5}
 8006f28:	f7ff bc34 	b.w	8006794 <SDMMC_GetCmdResp1.part.2>
 8006f2c:	20000014 	.word	0x20000014
 8006f30:	10624dd3 	.word	0x10624dd3
 8006f34:	fffee0c0 	.word	0xfffee0c0
 8006f38:	00200045 	.word	0x00200045
 8006f3c:	002000c5 	.word	0x002000c5

08006f40 <SDMMC_CmdSendSCR>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006f40:	4a1d      	ldr	r2, [pc, #116]	; (8006fb8 <SDMMC_CmdSendSCR+0x78>)
  SDMMCx->ARG = Command->Argument;
 8006f42:	2100      	movs	r1, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006f44:	4b1d      	ldr	r3, [pc, #116]	; (8006fbc <SDMMC_CmdSendSCR+0x7c>)
{
 8006f46:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006f48:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006f4a:	f241 1433 	movw	r4, #4403	; 0x1133
  SDMMCx->ARG = Command->Argument;
 8006f4e:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006f50:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006f54:	68c1      	ldr	r1, [r0, #12]
 8006f56:	4d1a      	ldr	r5, [pc, #104]	; (8006fc0 <SDMMC_CmdSendSCR+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006f58:	f241 3388 	movw	r3, #5000	; 0x1388
 8006f5c:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006f5e:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006f60:	4918      	ldr	r1, [pc, #96]	; (8006fc4 <SDMMC_CmdSendSCR+0x84>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006f62:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006f66:	432c      	orrs	r4, r5
 8006f68:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8006f6a:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8006f6e:	d312      	bcc.n	8006f96 <SDMMC_CmdSendSCR+0x56>
    sta_reg = SDMMCx->STA;
 8006f70:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006f72:	420a      	tst	r2, r1
 8006f74:	d0f9      	beq.n	8006f6a <SDMMC_CmdSendSCR+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006f76:	0494      	lsls	r4, r2, #18
 8006f78:	d4f7      	bmi.n	8006f6a <SDMMC_CmdSendSCR+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006f7a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006f7c:	075a      	lsls	r2, r3, #29
 8006f7e:	d413      	bmi.n	8006fa8 <SDMMC_CmdSendSCR+0x68>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006f80:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006f82:	07db      	lsls	r3, r3, #31
 8006f84:	d40b      	bmi.n	8006f9e <SDMMC_CmdSendSCR+0x5e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006f86:	4b10      	ldr	r3, [pc, #64]	; (8006fc8 <SDMMC_CmdSendSCR+0x88>)
 8006f88:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006f8a:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b33      	cmp	r3, #51	; 0x33
 8006f90:	d00e      	beq.n	8006fb0 <SDMMC_CmdSendSCR+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f92:	2001      	movs	r0, #1
  return errorstate;
 8006f94:	e001      	b.n	8006f9a <SDMMC_CmdSendSCR+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 8006f96:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006f9a:	bc30      	pop	{r4, r5}
 8006f9c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006fa2:	4618      	mov	r0, r3
}
 8006fa4:	bc30      	pop	{r4, r5}
 8006fa6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006fa8:	2304      	movs	r3, #4
 8006faa:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006fac:	4618      	mov	r0, r3
 8006fae:	e7f4      	b.n	8006f9a <SDMMC_CmdSendSCR+0x5a>
}
 8006fb0:	bc30      	pop	{r4, r5}
 8006fb2:	f7ff bbef 	b.w	8006794 <SDMMC_GetCmdResp1.part.2>
 8006fb6:	bf00      	nop
 8006fb8:	20000014 	.word	0x20000014
 8006fbc:	10624dd3 	.word	0x10624dd3
 8006fc0:	fffee0c0 	.word	0xfffee0c0
 8006fc4:	00200045 	.word	0x00200045
 8006fc8:	002000c5 	.word	0x002000c5

08006fcc <SDMMC_CmdSendCID>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006fcc:	4a19      	ldr	r2, [pc, #100]	; (8007034 <SDMMC_CmdSendCID+0x68>)
{
 8006fce:	4601      	mov	r1, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006fd0:	4b19      	ldr	r3, [pc, #100]	; (8007038 <SDMMC_CmdSendCID+0x6c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006fd2:	f241 3002 	movw	r0, #4866	; 0x1302
{
 8006fd6:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8006fd8:	2400      	movs	r4, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006fda:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8006fdc:	608c      	str	r4, [r1, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006fde:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006fe2:	68cd      	ldr	r5, [r1, #12]
 8006fe4:	4c15      	ldr	r4, [pc, #84]	; (800703c <SDMMC_CmdSendCID+0x70>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006fe6:	f241 3388 	movw	r3, #5000	; 0x1388
 8006fea:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006fec:	402c      	ands	r4, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006fee:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006ff2:	4320      	orrs	r0, r4
 8006ff4:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 8006ff6:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8006ffa:	d310      	bcc.n	800701e <SDMMC_CmdSendCID+0x52>
    sta_reg = SDMMCx->STA;
 8006ffc:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006ffe:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007002:	d0f8      	beq.n	8006ff6 <SDMMC_CmdSendCID+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007004:	0492      	lsls	r2, r2, #18
 8007006:	d4f6      	bmi.n	8006ff6 <SDMMC_CmdSendCID+0x2a>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007008:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800700a:	075b      	lsls	r3, r3, #29
 800700c:	d40f      	bmi.n	800702e <SDMMC_CmdSendCID+0x62>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800700e:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8007010:	f010 0001 	ands.w	r0, r0, #1
 8007014:	d107      	bne.n	8007026 <SDMMC_CmdSendCID+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007016:	4b0a      	ldr	r3, [pc, #40]	; (8007040 <SDMMC_CmdSendCID+0x74>)
 8007018:	638b      	str	r3, [r1, #56]	; 0x38
}
 800701a:	bc30      	pop	{r4, r5}
 800701c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800701e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007022:	bc30      	pop	{r4, r5}
 8007024:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007026:	2001      	movs	r0, #1
 8007028:	6388      	str	r0, [r1, #56]	; 0x38
}
 800702a:	bc30      	pop	{r4, r5}
 800702c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800702e:	2004      	movs	r0, #4
 8007030:	6388      	str	r0, [r1, #56]	; 0x38
 8007032:	e7f6      	b.n	8007022 <SDMMC_CmdSendCID+0x56>
 8007034:	20000014 	.word	0x20000014
 8007038:	10624dd3 	.word	0x10624dd3
 800703c:	fffee0c0 	.word	0xfffee0c0
 8007040:	002000c5 	.word	0x002000c5

08007044 <SDMMC_CmdSendCSD>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007044:	4a19      	ldr	r2, [pc, #100]	; (80070ac <SDMMC_CmdSendCSD+0x68>)
 8007046:	4b1a      	ldr	r3, [pc, #104]	; (80070b0 <SDMMC_CmdSendCSD+0x6c>)
{
 8007048:	b430      	push	{r4, r5}
 800704a:	4604      	mov	r4, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800704c:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800704e:	f241 3009 	movw	r0, #4873	; 0x1309
  SDMMCx->ARG = Command->Argument;
 8007052:	60a1      	str	r1, [r4, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007054:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007058:	68e5      	ldr	r5, [r4, #12]
 800705a:	4916      	ldr	r1, [pc, #88]	; (80070b4 <SDMMC_CmdSendCSD+0x70>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800705c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007060:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007062:	4029      	ands	r1, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007064:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007068:	4308      	orrs	r0, r1
 800706a:	60e0      	str	r0, [r4, #12]
    if (count-- == 0U)
 800706c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007070:	d310      	bcc.n	8007094 <SDMMC_CmdSendCSD+0x50>
    sta_reg = SDMMCx->STA;
 8007072:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007074:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007078:	d0f8      	beq.n	800706c <SDMMC_CmdSendCSD+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800707a:	0492      	lsls	r2, r2, #18
 800707c:	d4f6      	bmi.n	800706c <SDMMC_CmdSendCSD+0x28>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800707e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007080:	075b      	lsls	r3, r3, #29
 8007082:	d40f      	bmi.n	80070a4 <SDMMC_CmdSendCSD+0x60>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007084:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007086:	f010 0001 	ands.w	r0, r0, #1
 800708a:	d107      	bne.n	800709c <SDMMC_CmdSendCSD+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800708c:	4b0a      	ldr	r3, [pc, #40]	; (80070b8 <SDMMC_CmdSendCSD+0x74>)
 800708e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8007090:	bc30      	pop	{r4, r5}
 8007092:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007094:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007098:	bc30      	pop	{r4, r5}
 800709a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800709c:	2001      	movs	r0, #1
 800709e:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80070a0:	bc30      	pop	{r4, r5}
 80070a2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80070a4:	2004      	movs	r0, #4
 80070a6:	63a0      	str	r0, [r4, #56]	; 0x38
 80070a8:	e7f6      	b.n	8007098 <SDMMC_CmdSendCSD+0x54>
 80070aa:	bf00      	nop
 80070ac:	20000014 	.word	0x20000014
 80070b0:	10624dd3 	.word	0x10624dd3
 80070b4:	fffee0c0 	.word	0xfffee0c0
 80070b8:	002000c5 	.word	0x002000c5

080070bc <SDMMC_CmdSetRelAdd>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80070bc:	4b25      	ldr	r3, [pc, #148]	; (8007154 <SDMMC_CmdSetRelAdd+0x98>)
 80070be:	4a26      	ldr	r2, [pc, #152]	; (8007158 <SDMMC_CmdSetRelAdd+0x9c>)
{
 80070c0:	b470      	push	{r4, r5, r6}
  SDMMCx->ARG = Command->Argument;
 80070c2:	2400      	movs	r4, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80070c4:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80070c6:	4d25      	ldr	r5, [pc, #148]	; (800715c <SDMMC_CmdSetRelAdd+0xa0>)
  SDMMCx->ARG = Command->Argument;
 80070c8:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80070ca:	f241 1403 	movw	r4, #4355	; 0x1103
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80070ce:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80070d2:	68c6      	ldr	r6, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80070d4:	0a5a      	lsrs	r2, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80070d6:	4035      	ands	r5, r6
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80070d8:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80070dc:	432c      	orrs	r4, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80070de:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80070e2:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80070e4:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80070e8:	d311      	bcc.n	800710e <SDMMC_CmdSetRelAdd+0x52>
    sta_reg = SDMMCx->STA;
 80070ea:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80070ec:	f012 0f45 	tst.w	r2, #69	; 0x45
 80070f0:	d0f8      	beq.n	80070e4 <SDMMC_CmdSetRelAdd+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80070f2:	0496      	lsls	r6, r2, #18
 80070f4:	d4f6      	bmi.n	80070e4 <SDMMC_CmdSetRelAdd+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80070f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80070f8:	075d      	lsls	r5, r3, #29
 80070fa:	d411      	bmi.n	8007120 <SDMMC_CmdSetRelAdd+0x64>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80070fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80070fe:	07dc      	lsls	r4, r3, #31
 8007100:	d409      	bmi.n	8007116 <SDMMC_CmdSetRelAdd+0x5a>
  return (uint8_t)(SDMMCx->RESPCMD);
 8007102:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b03      	cmp	r3, #3
 8007108:	d00e      	beq.n	8007128 <SDMMC_CmdSetRelAdd+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800710a:	2001      	movs	r0, #1
 800710c:	e001      	b.n	8007112 <SDMMC_CmdSetRelAdd+0x56>
      return SDMMC_ERROR_TIMEOUT;
 800710e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007112:	bc70      	pop	{r4, r5, r6}
 8007114:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007116:	2301      	movs	r3, #1
 8007118:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800711a:	4618      	mov	r0, r3
}
 800711c:	bc70      	pop	{r4, r5, r6}
 800711e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007120:	2304      	movs	r3, #4
 8007122:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007124:	4618      	mov	r0, r3
 8007126:	e7f4      	b.n	8007112 <SDMMC_CmdSetRelAdd+0x56>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007128:	4b0d      	ldr	r3, [pc, #52]	; (8007160 <SDMMC_CmdSetRelAdd+0xa4>)
 800712a:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800712c:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800712e:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8007132:	d009      	beq.n	8007148 <SDMMC_CmdSetRelAdd+0x8c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007134:	045a      	lsls	r2, r3, #17
 8007136:	d40a      	bmi.n	800714e <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007138:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800713c:	bf0c      	ite	eq
 800713e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8007142:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8007146:	e7e4      	b.n	8007112 <SDMMC_CmdSetRelAdd+0x56>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007148:	0c1b      	lsrs	r3, r3, #16
 800714a:	800b      	strh	r3, [r1, #0]
 800714c:	e7e1      	b.n	8007112 <SDMMC_CmdSetRelAdd+0x56>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800714e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007152:	e7de      	b.n	8007112 <SDMMC_CmdSetRelAdd+0x56>
 8007154:	20000014 	.word	0x20000014
 8007158:	10624dd3 	.word	0x10624dd3
 800715c:	fffee0c0 	.word	0xfffee0c0
 8007160:	002000c5 	.word	0x002000c5

08007164 <SDMMC_CmdSendStatus>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007164:	4a1c      	ldr	r2, [pc, #112]	; (80071d8 <SDMMC_CmdSendStatus+0x74>)
 8007166:	4b1d      	ldr	r3, [pc, #116]	; (80071dc <SDMMC_CmdSendStatus+0x78>)
{
 8007168:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800716a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800716c:	f241 140d 	movw	r4, #4365	; 0x110d
  SDMMCx->ARG = Command->Argument;
 8007170:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007172:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007176:	68c1      	ldr	r1, [r0, #12]
 8007178:	4d19      	ldr	r5, [pc, #100]	; (80071e0 <SDMMC_CmdSendStatus+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800717a:	f241 3388 	movw	r3, #5000	; 0x1388
 800717e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007180:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007182:	4918      	ldr	r1, [pc, #96]	; (80071e4 <SDMMC_CmdSendStatus+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007184:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007188:	432c      	orrs	r4, r5
 800718a:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800718c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007190:	d312      	bcc.n	80071b8 <SDMMC_CmdSendStatus+0x54>
    sta_reg = SDMMCx->STA;
 8007192:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007194:	420a      	tst	r2, r1
 8007196:	d0f9      	beq.n	800718c <SDMMC_CmdSendStatus+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007198:	0494      	lsls	r4, r2, #18
 800719a:	d4f7      	bmi.n	800718c <SDMMC_CmdSendStatus+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800719c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800719e:	075a      	lsls	r2, r3, #29
 80071a0:	d413      	bmi.n	80071ca <SDMMC_CmdSendStatus+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80071a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80071a4:	07db      	lsls	r3, r3, #31
 80071a6:	d40b      	bmi.n	80071c0 <SDMMC_CmdSendStatus+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80071a8:	4b0f      	ldr	r3, [pc, #60]	; (80071e8 <SDMMC_CmdSendStatus+0x84>)
 80071aa:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80071ac:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	2b0d      	cmp	r3, #13
 80071b2:	d00e      	beq.n	80071d2 <SDMMC_CmdSendStatus+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071b4:	2001      	movs	r0, #1
  return errorstate;
 80071b6:	e001      	b.n	80071bc <SDMMC_CmdSendStatus+0x58>
      return SDMMC_ERROR_TIMEOUT;
 80071b8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80071bc:	bc30      	pop	{r4, r5}
 80071be:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80071c0:	2301      	movs	r3, #1
 80071c2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071c4:	4618      	mov	r0, r3
}
 80071c6:	bc30      	pop	{r4, r5}
 80071c8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80071ca:	2304      	movs	r3, #4
 80071cc:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80071ce:	4618      	mov	r0, r3
 80071d0:	e7f4      	b.n	80071bc <SDMMC_CmdSendStatus+0x58>
}
 80071d2:	bc30      	pop	{r4, r5}
 80071d4:	f7ff bade 	b.w	8006794 <SDMMC_GetCmdResp1.part.2>
 80071d8:	20000014 	.word	0x20000014
 80071dc:	10624dd3 	.word	0x10624dd3
 80071e0:	fffee0c0 	.word	0xfffee0c0
 80071e4:	00200045 	.word	0x00200045
 80071e8:	002000c5 	.word	0x002000c5

080071ec <SDMMC_CmdStatusRegister>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80071ec:	4a1d      	ldr	r2, [pc, #116]	; (8007264 <SDMMC_CmdStatusRegister+0x78>)
  SDMMCx->ARG = Command->Argument;
 80071ee:	2100      	movs	r1, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80071f0:	4b1d      	ldr	r3, [pc, #116]	; (8007268 <SDMMC_CmdStatusRegister+0x7c>)
{
 80071f2:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80071f4:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80071f6:	f241 140d 	movw	r4, #4365	; 0x110d
  SDMMCx->ARG = Command->Argument;
 80071fa:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80071fc:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007200:	68c1      	ldr	r1, [r0, #12]
 8007202:	4d1a      	ldr	r5, [pc, #104]	; (800726c <SDMMC_CmdStatusRegister+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007204:	f241 3388 	movw	r3, #5000	; 0x1388
 8007208:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800720a:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800720c:	4918      	ldr	r1, [pc, #96]	; (8007270 <SDMMC_CmdStatusRegister+0x84>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800720e:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007212:	432c      	orrs	r4, r5
 8007214:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8007216:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800721a:	d312      	bcc.n	8007242 <SDMMC_CmdStatusRegister+0x56>
    sta_reg = SDMMCx->STA;
 800721c:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800721e:	420a      	tst	r2, r1
 8007220:	d0f9      	beq.n	8007216 <SDMMC_CmdStatusRegister+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007222:	0494      	lsls	r4, r2, #18
 8007224:	d4f7      	bmi.n	8007216 <SDMMC_CmdStatusRegister+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007226:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007228:	075a      	lsls	r2, r3, #29
 800722a:	d413      	bmi.n	8007254 <SDMMC_CmdStatusRegister+0x68>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800722c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800722e:	07db      	lsls	r3, r3, #31
 8007230:	d40b      	bmi.n	800724a <SDMMC_CmdStatusRegister+0x5e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007232:	4b10      	ldr	r3, [pc, #64]	; (8007274 <SDMMC_CmdStatusRegister+0x88>)
 8007234:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007236:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b0d      	cmp	r3, #13
 800723c:	d00e      	beq.n	800725c <SDMMC_CmdStatusRegister+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800723e:	2001      	movs	r0, #1
  return errorstate;
 8007240:	e001      	b.n	8007246 <SDMMC_CmdStatusRegister+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 8007242:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007246:	bc30      	pop	{r4, r5}
 8007248:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800724a:	2301      	movs	r3, #1
 800724c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800724e:	4618      	mov	r0, r3
}
 8007250:	bc30      	pop	{r4, r5}
 8007252:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007254:	2304      	movs	r3, #4
 8007256:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007258:	4618      	mov	r0, r3
 800725a:	e7f4      	b.n	8007246 <SDMMC_CmdStatusRegister+0x5a>
}
 800725c:	bc30      	pop	{r4, r5}
 800725e:	f7ff ba99 	b.w	8006794 <SDMMC_GetCmdResp1.part.2>
 8007262:	bf00      	nop
 8007264:	20000014 	.word	0x20000014
 8007268:	10624dd3 	.word	0x10624dd3
 800726c:	fffee0c0 	.word	0xfffee0c0
 8007270:	00200045 	.word	0x00200045
 8007274:	002000c5 	.word	0x002000c5

08007278 <SDMMC_CmdVoltageSwitch>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007278:	4a1d      	ldr	r2, [pc, #116]	; (80072f0 <SDMMC_CmdVoltageSwitch+0x78>)
  SDMMCx->ARG = Command->Argument;
 800727a:	2100      	movs	r1, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800727c:	4b1d      	ldr	r3, [pc, #116]	; (80072f4 <SDMMC_CmdVoltageSwitch+0x7c>)
{
 800727e:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007280:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007282:	f241 140b 	movw	r4, #4363	; 0x110b
  SDMMCx->ARG = Command->Argument;
 8007286:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007288:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800728c:	68c1      	ldr	r1, [r0, #12]
 800728e:	4d1a      	ldr	r5, [pc, #104]	; (80072f8 <SDMMC_CmdVoltageSwitch+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007290:	f241 3388 	movw	r3, #5000	; 0x1388
 8007294:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007296:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007298:	4918      	ldr	r1, [pc, #96]	; (80072fc <SDMMC_CmdVoltageSwitch+0x84>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800729a:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800729e:	432c      	orrs	r4, r5
 80072a0:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80072a2:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80072a6:	d312      	bcc.n	80072ce <SDMMC_CmdVoltageSwitch+0x56>
    sta_reg = SDMMCx->STA;
 80072a8:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80072aa:	420a      	tst	r2, r1
 80072ac:	d0f9      	beq.n	80072a2 <SDMMC_CmdVoltageSwitch+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80072ae:	0494      	lsls	r4, r2, #18
 80072b0:	d4f7      	bmi.n	80072a2 <SDMMC_CmdVoltageSwitch+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80072b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80072b4:	075a      	lsls	r2, r3, #29
 80072b6:	d413      	bmi.n	80072e0 <SDMMC_CmdVoltageSwitch+0x68>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80072b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80072ba:	07db      	lsls	r3, r3, #31
 80072bc:	d40b      	bmi.n	80072d6 <SDMMC_CmdVoltageSwitch+0x5e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80072be:	4b10      	ldr	r3, [pc, #64]	; (8007300 <SDMMC_CmdVoltageSwitch+0x88>)
 80072c0:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80072c2:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	2b0b      	cmp	r3, #11
 80072c8:	d00e      	beq.n	80072e8 <SDMMC_CmdVoltageSwitch+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072ca:	2001      	movs	r0, #1
  return errorstate;
 80072cc:	e001      	b.n	80072d2 <SDMMC_CmdVoltageSwitch+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 80072ce:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80072d2:	bc30      	pop	{r4, r5}
 80072d4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80072d6:	2301      	movs	r3, #1
 80072d8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072da:	4618      	mov	r0, r3
}
 80072dc:	bc30      	pop	{r4, r5}
 80072de:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80072e0:	2304      	movs	r3, #4
 80072e2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80072e4:	4618      	mov	r0, r3
 80072e6:	e7f4      	b.n	80072d2 <SDMMC_CmdVoltageSwitch+0x5a>
}
 80072e8:	bc30      	pop	{r4, r5}
 80072ea:	f7ff ba53 	b.w	8006794 <SDMMC_GetCmdResp1.part.2>
 80072ee:	bf00      	nop
 80072f0:	20000014 	.word	0x20000014
 80072f4:	10624dd3 	.word	0x10624dd3
 80072f8:	fffee0c0 	.word	0xfffee0c0
 80072fc:	00200045 	.word	0x00200045
 8007300:	002000c5 	.word	0x002000c5

08007304 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8007304:	4b11      	ldr	r3, [pc, #68]	; (800734c <FATFS_LinkDriver+0x48>)
 8007306:	7a5a      	ldrb	r2, [r3, #9]
 8007308:	b10a      	cbz	r2, 800730e <FATFS_LinkDriver+0xa>
  uint8_t ret = 1;
 800730a:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800730c:	4770      	bx	lr
{
 800730e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007310:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    disk.is_initialized[disk.nbr] = 0;
 8007314:	f893 e009 	ldrb.w	lr, [r3, #9]
    disk.drv[disk.nbr] = drv;
 8007318:	7a5e      	ldrb	r6, [r3, #9]
    path[1] = ':';
 800731a:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
    disk.lun[disk.nbr] = lun;
 800731e:	7a5d      	ldrb	r5, [r3, #9]
    path[2] = '/';
 8007320:	272f      	movs	r7, #47	; 0x2f
    DiskNum = disk.nbr++;
 8007322:	7a5a      	ldrb	r2, [r3, #9]
    disk.drv[disk.nbr] = drv;
 8007324:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    disk.lun[disk.nbr] = lun;
 8007328:	441d      	add	r5, r3
    disk.is_initialized[disk.nbr] = 0;
 800732a:	f803 400e 	strb.w	r4, [r3, lr]
    DiskNum = disk.nbr++;
 800732e:	b2d2      	uxtb	r2, r2
    disk.drv[disk.nbr] = drv;
 8007330:	6070      	str	r0, [r6, #4]
    disk.lun[disk.nbr] = lun;
 8007332:	722c      	strb	r4, [r5, #8]
    DiskNum = disk.nbr++;
 8007334:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 8007336:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 8007338:	b2c0      	uxtb	r0, r0
 800733a:	7258      	strb	r0, [r3, #9]
    path[3] = 0;
 800733c:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 800733e:	700a      	strb	r2, [r1, #0]
    path[3] = 0;
 8007340:	70cc      	strb	r4, [r1, #3]
    path[1] = ':';
 8007342:	f881 c001 	strb.w	ip, [r1, #1]
    path[2] = '/';
 8007346:	708f      	strb	r7, [r1, #2]
}
 8007348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800734a:	bf00      	nop
 800734c:	20000124 	.word	0x20000124

08007350 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007350:	b530      	push	{r4, r5, lr}
  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8007352:	4b40      	ldr	r3, [pc, #256]	; (8007454 <MX_ADC1_Init+0x104>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8007354:	f44f 2400 	mov.w	r4, #524288	; 0x80000
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007358:	2008      	movs	r0, #8
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 4;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.NbrOfDiscConversion = 4;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 800735a:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
  hadc1.Instance = ADC1;
 800735e:	4d3e      	ldr	r5, [pc, #248]	; (8007458 <MX_ADC1_Init+0x108>)
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8007360:	f44f 6240 	mov.w	r2, #3072	; 0xc00
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8007364:	605c      	str	r4, [r3, #4]
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
  hadc1.Init.OversamplingMode = ENABLE;
  hadc1.Init.Oversampling.Ratio = 2;
 8007366:	2402      	movs	r4, #2
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007368:	6118      	str	r0, [r3, #16]
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 800736a:	2020      	movs	r0, #32
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 800736c:	6259      	str	r1, [r3, #36]	; 0x24
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 800736e:	f240 4101 	movw	r1, #1025	; 0x401
{
 8007372:	b08b      	sub	sp, #44	; 0x2c
  hadc1.Instance = ADC1;
 8007374:	601d      	str	r5, [r3, #0]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8007376:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8007378:	2503      	movs	r5, #3
  ADC_MultiModeTypeDef multimode = {0};
 800737a:	2200      	movs	r2, #0
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 800737c:	6499      	str	r1, [r3, #72]	; 0x48
  hadc1.Init.NbrOfConversion = 4;
 800737e:	2104      	movs	r1, #4
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8007380:	62dd      	str	r5, [r3, #44]	; 0x2c
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8007382:	609a      	str	r2, [r3, #8]
  ADC_MultiModeTypeDef multimode = {0};
 8007384:	9200      	str	r2, [sp, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 8007386:	9203      	str	r2, [sp, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007388:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800738a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800738c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800738e:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.NbrOfConversion = 4;
 8007390:	6199      	str	r1, [r3, #24]
  hadc1.Init.NbrOfDiscConversion = 4;
 8007392:	6219      	str	r1, [r3, #32]
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8007394:	e9c3 400f 	strd	r4, r0, [r3, #60]	; 0x3c
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007398:	2401      	movs	r4, #1
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800739a:	4618      	mov	r0, r3
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800739c:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
  ADC_MultiModeTypeDef multimode = {0};
 80073a0:	e9cd 2201 	strd	r2, r2, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80073a4:	e9cd 2204 	strd	r2, r2, [sp, #16]
 80073a8:	e9cd 2206 	strd	r2, r2, [sp, #24]
 80073ac:	e9cd 2208 	strd	r2, r2, [sp, #32]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80073b0:	60dc      	str	r4, [r3, #12]
  hadc1.Init.OversamplingMode = ENABLE;
 80073b2:	f883 4038 	strb.w	r4, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80073b6:	f7f9 fadb 	bl	8000970 <HAL_ADC_Init>
 80073ba:	2800      	cmp	r0, #0
 80073bc:	d146      	bne.n	800744c <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80073be:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80073c0:	4669      	mov	r1, sp
 80073c2:	4824      	ldr	r0, [pc, #144]	; (8007454 <MX_ADC1_Init+0x104>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80073c4:	9300      	str	r3, [sp, #0]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80073c6:	f7f9 fbed 	bl	8000ba4 <HAL_ADCEx_MultiModeConfigChannel>
 80073ca:	2800      	cmp	r0, #0
 80073cc:	d13b      	bne.n	8007446 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80073ce:	4b23      	ldr	r3, [pc, #140]	; (800745c <MX_ADC1_Init+0x10c>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80073d0:	2106      	movs	r1, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 80073d2:	2003      	movs	r0, #3
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80073d4:	f240 74ff 	movw	r4, #2047	; 0x7ff
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80073d8:	2204      	movs	r2, #4
  sConfig.Channel = ADC_CHANNEL_15;
 80073da:	9303      	str	r3, [sp, #12]
  sConfig.Offset = 32768;
 80073dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80073e0:	9104      	str	r1, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 80073e2:	9005      	str	r0, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80073e4:	a903      	add	r1, sp, #12
 80073e6:	481b      	ldr	r0, [pc, #108]	; (8007454 <MX_ADC1_Init+0x104>)
  sConfig.Offset = 32768;
 80073e8:	9308      	str	r3, [sp, #32]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80073ea:	e9cd 4206 	strd	r4, r2, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80073ee:	f7f8 ffff 	bl	80003f0 <HAL_ADC_ConfigChannel>
 80073f2:	bb28      	cbnz	r0, 8007440 <MX_ADC1_Init+0xf0>
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_17;
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80073f4:	230c      	movs	r3, #12
  sConfig.Channel = ADC_CHANNEL_17;
 80073f6:	4a1a      	ldr	r2, [pc, #104]	; (8007460 <MX_ADC1_Init+0x110>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80073f8:	4816      	ldr	r0, [pc, #88]	; (8007454 <MX_ADC1_Init+0x104>)
 80073fa:	eb0d 0103 	add.w	r1, sp, r3
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80073fe:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007402:	f7f8 fff5 	bl	80003f0 <HAL_ADC_ConfigChannel>
 8007406:	b9c0      	cbnz	r0, 800743a <MX_ADC1_Init+0xea>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8007408:	4a16      	ldr	r2, [pc, #88]	; (8007464 <MX_ADC1_Init+0x114>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800740a:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800740c:	a903      	add	r1, sp, #12
 800740e:	4811      	ldr	r0, [pc, #68]	; (8007454 <MX_ADC1_Init+0x104>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8007410:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007414:	f7f8 ffec 	bl	80003f0 <HAL_ADC_ConfigChannel>
 8007418:	b960      	cbnz	r0, 8007434 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800741a:	4a13      	ldr	r2, [pc, #76]	; (8007468 <MX_ADC1_Init+0x118>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800741c:	2318      	movs	r3, #24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800741e:	a903      	add	r1, sp, #12
 8007420:	480c      	ldr	r0, [pc, #48]	; (8007454 <MX_ADC1_Init+0x104>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8007422:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007426:	f7f8 ffe3 	bl	80003f0 <HAL_ADC_ConfigChannel>
 800742a:	b108      	cbz	r0, 8007430 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800742c:	f000 ffc4 	bl	80083b8 <Error_Handler>
  }

}
 8007430:	b00b      	add	sp, #44	; 0x2c
 8007432:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8007434:	f000 ffc0 	bl	80083b8 <Error_Handler>
 8007438:	e7ef      	b.n	800741a <MX_ADC1_Init+0xca>
    Error_Handler();
 800743a:	f000 ffbd 	bl	80083b8 <Error_Handler>
 800743e:	e7e3      	b.n	8007408 <MX_ADC1_Init+0xb8>
    Error_Handler();
 8007440:	f000 ffba 	bl	80083b8 <Error_Handler>
 8007444:	e7d6      	b.n	80073f4 <MX_ADC1_Init+0xa4>
    Error_Handler();
 8007446:	f000 ffb7 	bl	80083b8 <Error_Handler>
 800744a:	e7c0      	b.n	80073ce <MX_ADC1_Init+0x7e>
    Error_Handler();
 800744c:	f000 ffb4 	bl	80083b8 <Error_Handler>
 8007450:	e7b5      	b.n	80073be <MX_ADC1_Init+0x6e>
 8007452:	bf00      	nop
 8007454:	2000014c 	.word	0x2000014c
 8007458:	40022000 	.word	0x40022000
 800745c:	3ef08000 	.word	0x3ef08000
 8007460:	47520000 	.word	0x47520000
 8007464:	3ac04000 	.word	0x3ac04000
 8007468:	43210000 	.word	0x43210000

0800746c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800746c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 800746e:	4b2b      	ldr	r3, [pc, #172]	; (800751c <HAL_ADC_MspInit+0xb0>)
{
 8007470:	b089      	sub	sp, #36	; 0x24
  if(adcHandle->Instance==ADC1)
 8007472:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007474:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 8007476:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007478:	9407      	str	r4, [sp, #28]
 800747a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800747e:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(adcHandle->Instance==ADC1)
 8007482:	d001      	beq.n	8007488 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8007484:	b009      	add	sp, #36	; 0x24
 8007486:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC12_CLK_ENABLE();
 8007488:	4b25      	ldr	r3, [pc, #148]	; (8007520 <HAL_ADC_MspInit+0xb4>)
 800748a:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800748c:	200f      	movs	r0, #15
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800748e:	2503      	movs	r5, #3
    __HAL_RCC_ADC12_CLK_ENABLE();
 8007490:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007494:	a903      	add	r1, sp, #12
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007496:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    __HAL_RCC_ADC12_CLK_ENABLE();
 800749a:	f042 0220 	orr.w	r2, r2, #32
 800749e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80074a2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80074a6:	f002 0220 	and.w	r2, r2, #32
 80074aa:	9201      	str	r2, [sp, #4]
 80074ac:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80074b2:	f042 0201 	orr.w	r2, r2, #1
 80074b6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80074ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80074be:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074c0:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074c4:	4817      	ldr	r0, [pc, #92]	; (8007524 <HAL_ADC_MspInit+0xb8>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80074c6:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074c8:	9302      	str	r3, [sp, #8]
    hdma_adc1.Instance = DMA1_Stream0;
 80074ca:	4d17      	ldr	r5, [pc, #92]	; (8007528 <HAL_ADC_MspInit+0xbc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074cc:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074ce:	f7fb f81f 	bl	8002510 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 80074d2:	4916      	ldr	r1, [pc, #88]	; (800752c <HAL_ADC_MspInit+0xc0>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80074d4:	2209      	movs	r2, #9
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80074d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80074da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80074de:	60ac      	str	r4, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80074e0:	60ec      	str	r4, [r5, #12]
    hdma_adc1.Instance = DMA1_Stream0;
 80074e2:	6029      	str	r1, [r5, #0]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80074e4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80074e8:	606a      	str	r2, [r5, #4]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80074ea:	2204      	movs	r2, #4
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80074ec:	612b      	str	r3, [r5, #16]
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80074ee:	2301      	movs	r3, #1
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80074f0:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80074f4:	f44f 7480 	mov.w	r4, #256	; 0x100
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80074f8:	e9c5 7005 	strd	r7, r0, [r5, #20]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80074fc:	4628      	mov	r0, r5
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80074fe:	e9c5 4107 	strd	r4, r1, [r5, #28]
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8007502:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007506:	f7f9 fd05 	bl	8000f14 <HAL_DMA_Init>
 800750a:	b918      	cbnz	r0, 8007514 <HAL_ADC_MspInit+0xa8>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800750c:	64f5      	str	r5, [r6, #76]	; 0x4c
 800750e:	63ae      	str	r6, [r5, #56]	; 0x38
}
 8007510:	b009      	add	sp, #36	; 0x24
 8007512:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8007514:	f000 ff50 	bl	80083b8 <Error_Handler>
 8007518:	e7f8      	b.n	800750c <HAL_ADC_MspInit+0xa0>
 800751a:	bf00      	nop
 800751c:	40022000 	.word	0x40022000
 8007520:	58024400 	.word	0x58024400
 8007524:	58020000 	.word	0x58020000
 8007528:	200001b0 	.word	0x200001b0
 800752c:	40020010 	.word	0x40020010

08007530 <audioInit>:
tVZFilter lp1, lp2;
tOversampler oversampler1, oversampler2;
int distOS_ratio = 2;

void audioInit(I2C_HandleTypeDef* hi2c, SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 8007530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	// Initialize LEAF.

	LEAF_init(SAMPLE_RATE, AUDIO_FRAME_SIZE, smallMemory, SMALL_MEM_SIZE, &randomNumber);
 8007534:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8007678 <audioInit+0x148>
{
 8007538:	4607      	mov	r7, r0
	LEAF_init(SAMPLE_RATE, AUDIO_FRAME_SIZE, smallMemory, SMALL_MEM_SIZE, &randomNumber);
 800753a:	4b50      	ldr	r3, [pc, #320]	; (800767c <audioInit+0x14c>)
{
 800753c:	4689      	mov	r9, r1
 800753e:	4690      	mov	r8, r2
	LEAF_init(SAMPLE_RATE, AUDIO_FRAME_SIZE, smallMemory, SMALL_MEM_SIZE, &randomNumber);
 8007540:	494f      	ldr	r1, [pc, #316]	; (8007680 <audioInit+0x150>)
 8007542:	f242 7210 	movw	r2, #10000	; 0x2710
 8007546:	f44f 7000 	mov.w	r0, #512	; 0x200
	tMempool_init (&largePool, largeMemory, LARGE_MEM_SIZE);

	HAL_Delay(10);
	leaf.clearOnAllocation = 1;

	tOversampler_init(&oversampler1, distOS_ratio, FALSE);
 800754a:	4d4e      	ldr	r5, [pc, #312]	; (8007684 <audioInit+0x154>)
	leaf.clearOnAllocation = 1;
 800754c:	2401      	movs	r4, #1
 800754e:	4e4e      	ldr	r6, [pc, #312]	; (8007688 <audioInit+0x158>)
{
 8007550:	ed2d 8b06 	vpush	{d8-d10}
	LEAF_init(SAMPLE_RATE, AUDIO_FRAME_SIZE, smallMemory, SMALL_MEM_SIZE, &randomNumber);
 8007554:	f001 fe5e 	bl	8009214 <LEAF_init>
	tMempool_init (&mediumPool, mediumMemory, MEDIUM_MEM_SIZE);
 8007558:	4a4c      	ldr	r2, [pc, #304]	; (800768c <audioInit+0x15c>)
 800755a:	494d      	ldr	r1, [pc, #308]	; (8007690 <audioInit+0x160>)
 800755c:	484d      	ldr	r0, [pc, #308]	; (8007694 <audioInit+0x164>)
 800755e:	f001 fdcf 	bl	8009100 <tMempool_init>
	tMempool_init (&largePool, largeMemory, LARGE_MEM_SIZE);
 8007562:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007566:	494c      	ldr	r1, [pc, #304]	; (8007698 <audioInit+0x168>)
 8007568:	484c      	ldr	r0, [pc, #304]	; (800769c <audioInit+0x16c>)
 800756a:	f001 fdc9 	bl	8009100 <tMempool_init>
	HAL_Delay(10);
 800756e:	200a      	movs	r0, #10
 8007570:	f7f8 ff1c 	bl	80003ac <HAL_Delay>
	tOversampler_init(&oversampler2, distOS_ratio, FALSE);

	tVZFilter_init(&shelf1, Lowshelf, 80.0f , 6.0f);
 8007574:	eddf 9a4a 	vldr	s19, [pc, #296]	; 80076a0 <audioInit+0x170>
	tOversampler_init(&oversampler1, distOS_ratio, FALSE);
 8007578:	6829      	ldr	r1, [r5, #0]
 800757a:	2200      	movs	r2, #0
 800757c:	4849      	ldr	r0, [pc, #292]	; (80076a4 <audioInit+0x174>)
	tVZFilter_init(&shelf2, Highshelf, 12000.0f , 6.0f);
 800757e:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 80076a8 <audioInit+0x178>
	leaf.clearOnAllocation = 1;
 8007582:	6174      	str	r4, [r6, #20]
	tOversampler_init(&oversampler1, distOS_ratio, FALSE);
 8007584:	f001 f9ba 	bl	80088fc <tOversampler_init>
	tOversampler_init(&oversampler2, distOS_ratio, FALSE);
 8007588:	2200      	movs	r2, #0
 800758a:	6829      	ldr	r1, [r5, #0]
 800758c:	4847      	ldr	r0, [pc, #284]	; (80076ac <audioInit+0x17c>)
 800758e:	f001 f9b5 	bl	80088fc <tOversampler_init>
	tVZFilter_init(&bell1, Bell, 1000.0f , 1.9f);
 8007592:	eddf 8a47 	vldr	s17, [pc, #284]	; 80076b0 <audioInit+0x180>
	tVZFilter_init(&shelf1, Lowshelf, 80.0f , 6.0f);
 8007596:	eeb0 0a69 	vmov.f32	s0, s19
	tVZFilter_init(&bell1, Bell, 1000.0f , 1.9f);
 800759a:	ed9f 8a46 	vldr	s16, [pc, #280]	; 80076b4 <audioInit+0x184>
	tVZFilter_init(&shelf1, Lowshelf, 80.0f , 6.0f);
 800759e:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80075a2:	2106      	movs	r1, #6
 80075a4:	4844      	ldr	r0, [pc, #272]	; (80076b8 <audioInit+0x188>)
 80075a6:	f001 fa77 	bl	8008a98 <tVZFilter_init>

	tVZFilter_init(&lp1, Lowpass, 18000.0f, 0.8f);
 80075aa:	eddf aa44 	vldr	s21, [pc, #272]	; 80076bc <audioInit+0x18c>
	tVZFilter_init(&shelf2, Highshelf, 12000.0f , 6.0f);
 80075ae:	eeb0 0a49 	vmov.f32	s0, s18
	tVZFilter_init(&lp1, Lowpass, 18000.0f, 0.8f);
 80075b2:	ed9f aa43 	vldr	s20, [pc, #268]	; 80076c0 <audioInit+0x190>
	tVZFilter_init(&shelf2, Highshelf, 12000.0f , 6.0f);
 80075b6:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80075ba:	2107      	movs	r1, #7
 80075bc:	4841      	ldr	r0, [pc, #260]	; (80076c4 <audioInit+0x194>)
 80075be:	f001 fa6b 	bl	8008a98 <tVZFilter_init>
	tVZFilter_init(&bell1, Bell, 1000.0f , 1.9f);
 80075c2:	eef0 0a68 	vmov.f32	s1, s17
 80075c6:	eeb0 0a48 	vmov.f32	s0, s16
 80075ca:	2105      	movs	r1, #5
 80075cc:	483e      	ldr	r0, [pc, #248]	; (80076c8 <audioInit+0x198>)
 80075ce:	f001 fa63 	bl	8008a98 <tVZFilter_init>
	tVZFilter_init(&lp1, Lowpass, 18000.0f, 0.8f);
 80075d2:	4621      	mov	r1, r4
 80075d4:	eef0 0a6a 	vmov.f32	s1, s21
 80075d8:	483c      	ldr	r0, [pc, #240]	; (80076cc <audioInit+0x19c>)
 80075da:	eeb0 0a4a 	vmov.f32	s0, s20
 80075de:	4d3c      	ldr	r5, [pc, #240]	; (80076d0 <audioInit+0x1a0>)
 80075e0:	f001 fa5a 	bl	8008a98 <tVZFilter_init>

	tVZFilter_init(&lp2, Lowpass, 18000.0f, 0.8f);
 80075e4:	eef0 0a6a 	vmov.f32	s1, s21
 80075e8:	eeb0 0a4a 	vmov.f32	s0, s20
 80075ec:	4621      	mov	r1, r4
 80075ee:	4839      	ldr	r0, [pc, #228]	; (80076d4 <audioInit+0x1a4>)
 80075f0:	f001 fa52 	bl	8008a98 <tVZFilter_init>

	tVZFilter_init(&shelf3, Lowshelf, 80.0f, 6.0f);
 80075f4:	eeb0 0a69 	vmov.f32	s0, s19
 80075f8:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80075fc:	2106      	movs	r1, #6
 80075fe:	4836      	ldr	r0, [pc, #216]	; (80076d8 <audioInit+0x1a8>)
 8007600:	f001 fa4a 	bl	8008a98 <tVZFilter_init>
	tVZFilter_init(&shelf4, Highshelf, 12000.0f, 6.0f);
 8007604:	eeb0 0a49 	vmov.f32	s0, s18
 8007608:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800760c:	2107      	movs	r1, #7
 800760e:	4833      	ldr	r0, [pc, #204]	; (80076dc <audioInit+0x1ac>)
 8007610:	f001 fa42 	bl	8008a98 <tVZFilter_init>
	tVZFilter_init(&bell2, Bell, 1000.0f, 1.9f);
 8007614:	eef0 0a68 	vmov.f32	s1, s17
 8007618:	eeb0 0a48 	vmov.f32	s0, s16
 800761c:	2105      	movs	r1, #5
 800761e:	4830      	ldr	r0, [pc, #192]	; (80076e0 <audioInit+0x1b0>)
 8007620:	f001 fa3a 	bl	8008a98 <tVZFilter_init>


	leaf.clearOnAllocation = 0;
 8007624:	2300      	movs	r3, #0
 8007626:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800762a:	4628      	mov	r0, r5
 800762c:	4619      	mov	r1, r3
 800762e:	6173      	str	r3, [r6, #20]
 8007630:	f001 fe6c 	bl	800930c <memset>
	{
		tHighpass_init(&opticalHighpass[i], 100.0f);
		tVZFilter_init(&opticalLowpass[i], Lowpass, 1000.0f, 0.6f);
	}
	*/
	LEAF_generate_atodb(atodbTable, ATODB_TABLE_SIZE);
 8007634:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007638:	482a      	ldr	r0, [pc, #168]	; (80076e4 <audioInit+0x1b4>)
 800763a:	f001 fcc5 	bl	8008fc8 <LEAF_generate_atodb>
		tSlide_init(&slowSlide[i],500.0f,1.0f);
		tSVF_init(&lowpass[i], SVFTypeLowpass, 4000.0f, 1.0f);
		tRampUpDown_init(&updownRamp[i], 0.0f, 104.0f, 1); //5000 samples should be 104 ms
	}
*/
	tCycle_init(&mySine[0]);
 800763e:	482a      	ldr	r0, [pc, #168]	; (80076e8 <audioInit+0x1b8>)
 8007640:	f001 fdd8 	bl	80091f4 <tCycle_init>
	//attackDetectAH_init();

	HAL_Delay(1);
 8007644:	4620      	mov	r0, r4
 8007646:	f7f8 feb1 	bl	80003ac <HAL_Delay>

	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 800764a:	4629      	mov	r1, r5
 800764c:	4648      	mov	r0, r9
 800764e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007652:	f7fd fc47 	bl	8004ee4 <HAL_SAI_Transmit_DMA>
 8007656:	4b25      	ldr	r3, [pc, #148]	; (80076ec <audioInit+0x1bc>)
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 8007658:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800765c:	4924      	ldr	r1, [pc, #144]	; (80076f0 <audioInit+0x1c0>)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 800765e:	7018      	strb	r0, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 8007660:	4640      	mov	r0, r8
 8007662:	f7fd fccf 	bl	8005004 <HAL_SAI_Receive_DMA>
 8007666:	4b23      	ldr	r3, [pc, #140]	; (80076f4 <audioInit+0x1c4>)
 8007668:	7018      	strb	r0, [r3, #0]
	// so while we used to set up codec before starting SAI, now we need to set up codec afterwards, and set a flag to make sure it's ready

	//init the AH attack detector

	//now to send all the necessary messages to the codec
	AudioCodec_init(hi2c);
 800766a:	4638      	mov	r0, r7

}
 800766c:	ecbd 8b06 	vpop	{d8-d10}
 8007670:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	AudioCodec_init(hi2c);
 8007674:	f000 b9a4 	b.w	80079c0 <AudioCodec_init>
 8007678:	483b8000 	.word	0x483b8000
 800767c:	080081a1 	.word	0x080081a1
 8007680:	2000b178 	.word	0x2000b178
 8007684:	20000008 	.word	0x20000008
 8007688:	2001ad2c 	.word	0x2001ad2c
 800768c:	00061a80 	.word	0x00061a80
 8007690:	24003000 	.word	0x24003000
 8007694:	20008868 	.word	0x20008868
 8007698:	60000000 	.word	0x60000000
 800769c:	200087dc 	.word	0x200087dc
 80076a0:	42a00000 	.word	0x42a00000
 80076a4:	2000876c 	.word	0x2000876c
 80076a8:	463b8000 	.word	0x463b8000
 80076ac:	20000640 	.word	0x20000640
 80076b0:	3ff33333 	.word	0x3ff33333
 80076b4:	447a0000 	.word	0x447a0000
 80076b8:	200087a8 	.word	0x200087a8
 80076bc:	3f4ccccd 	.word	0x3f4ccccd
 80076c0:	468ca000 	.word	0x468ca000
 80076c4:	200087a0 	.word	0x200087a0
 80076c8:	20008788 	.word	0x20008788
 80076cc:	2000d8ec 	.word	0x2000d8ec
 80076d0:	30002400 	.word	0x30002400
 80076d4:	20000748 	.word	0x20000748
 80076d8:	2000a8b0 	.word	0x2000a8b0
 80076dc:	2000d930 	.word	0x2000d930
 80076e0:	2000074c 	.word	0x2000074c
 80076e4:	2000a8b8 	.word	0x2000a8b8
 80076e8:	20000738 	.word	0x20000738
 80076ec:	20000760 	.word	0x20000760
 80076f0:	30000400 	.word	0x30000400
 80076f4:	20008864 	.word	0x20008864

080076f8 <audioTick>:

float oversamplerArray[4];


float audioTick(float* input)
{
 80076f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   //     else oversamplerArray[i] = LEAF_tanh(oversamplerArray[i]);
   // }



	if (distortionMode > 0) sample = LEAF_shaper(sample, 1.0f);
 80076fa:	4b27      	ldr	r3, [pc, #156]	; (8007798 <audioTick+0xa0>)
	sample = sample * 5.0f;
 80076fc:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
{
 8007700:	4607      	mov	r7, r0
 8007702:	ed2d 8b02 	vpush	{d8}
	if (distortionMode > 0) sample = LEAF_shaper(sample, 1.0f);
 8007706:	681b      	ldr	r3, [r3, #0]
	float sample = input[1];
 8007708:	ed90 0a01 	vldr	s0, [r0, #4]
	if (distortionMode > 0) sample = LEAF_shaper(sample, 1.0f);
 800770c:	2b00      	cmp	r3, #0
	sample = sample * 5.0f;
 800770e:	ee20 0a27 	vmul.f32	s0, s0, s15
	if (distortionMode > 0) sample = LEAF_shaper(sample, 1.0f);
 8007712:	dd37      	ble.n	8007784 <audioTick+0x8c>
 8007714:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007718:	f001 fbf0 	bl	8008efc <LEAF_shaper>
	    else sample = LEAF_tanh(sample);

    	sample= tVZFilter_tick(&shelf1, sample); //put it through the low shelf
 800771c:	481f      	ldr	r0, [pc, #124]	; (800779c <audioTick+0xa4>)
 800771e:	f001 fbaf 	bl	8008e80 <tVZFilter_tick>
    	sample = tVZFilter_tick(&shelf2, sample); // now put that result through the high shelf
 8007722:	481f      	ldr	r0, [pc, #124]	; (80077a0 <audioTick+0xa8>)
 8007724:	f001 fbac 	bl	8008e80 <tVZFilter_tick>
    	sample = tVZFilter_tick(&bell1, sample); // now add a bell (or peaking eq) filter

 tOversampler_upsample(&oversampler2, sample, oversamplerArray);
	for (int i = 0; i < distOS_ratio; i++)
 8007728:	4e1e      	ldr	r6, [pc, #120]	; (80077a4 <audioTick+0xac>)
    	sample = tVZFilter_tick(&bell1, sample); // now add a bell (or peaking eq) filter
 800772a:	481f      	ldr	r0, [pc, #124]	; (80077a8 <audioTick+0xb0>)
 800772c:	f001 fba8 	bl	8008e80 <tVZFilter_tick>
 tOversampler_upsample(&oversampler2, sample, oversamplerArray);
 8007730:	491e      	ldr	r1, [pc, #120]	; (80077ac <audioTick+0xb4>)
 8007732:	481f      	ldr	r0, [pc, #124]	; (80077b0 <audioTick+0xb8>)
 8007734:	f001 f936 	bl	80089a4 <tOversampler_upsample>
	for (int i = 0; i < distOS_ratio; i++)
 8007738:	6833      	ldr	r3, [r6, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	dd13      	ble.n	8007766 <audioTick+0x6e>
 800773e:	4d1b      	ldr	r5, [pc, #108]	; (80077ac <audioTick+0xb4>)
 8007740:	2400      	movs	r4, #0
	{

    	oversamplerArray[i] = LEAF_tanh((oversamplerArray[i] * 0.9) * 0.95f);
 8007742:	ed9f 8b13 	vldr	d8, [pc, #76]	; 8007790 <audioTick+0x98>
 8007746:	ed95 0a00 	vldr	s0, [r5]
	for (int i = 0; i < distOS_ratio; i++)
 800774a:	3401      	adds	r4, #1
    	oversamplerArray[i] = LEAF_tanh((oversamplerArray[i] * 0.9) * 0.95f);
 800774c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8007750:	ee20 0b08 	vmul.f64	d0, d0, d8
 8007754:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007758:	f001 fc12 	bl	8008f80 <LEAF_tanh>
	for (int i = 0; i < distOS_ratio; i++)
 800775c:	6833      	ldr	r3, [r6, #0]
    	oversamplerArray[i] = LEAF_tanh((oversamplerArray[i] * 0.9) * 0.95f);
 800775e:	eca5 0a01 	vstmia	r5!, {s0}
	for (int i = 0; i < distOS_ratio; i++)
 8007762:	42a3      	cmp	r3, r4
 8007764:	dcef      	bgt.n	8007746 <audioTick+0x4e>
    }
    sample = tOversampler_downsample(&oversampler2, oversamplerArray);
 8007766:	4911      	ldr	r1, [pc, #68]	; (80077ac <audioTick+0xb4>)
 8007768:	4811      	ldr	r0, [pc, #68]	; (80077b0 <audioTick+0xb8>)
 800776a:	f001 f965 	bl	8008a38 <tOversampler_downsample>
 800776e:	eef0 7a40 	vmov.f32	s15, s0
	//sample = tCycle_tick(&mySine[0]);


	return 0.0f;

}
 8007772:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80077b4 <audioTick+0xbc>
	input[0] = sample;
 8007776:	edc7 7a00 	vstr	s15, [r7]
	input[1] = sample;
 800777a:	edc7 7a01 	vstr	s15, [r7, #4]
}
 800777e:	ecbd 8b02 	vpop	{d8}
 8007782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    else sample = LEAF_tanh(sample);
 8007784:	f001 fbfc 	bl	8008f80 <LEAF_tanh>
 8007788:	e7c8      	b.n	800771c <audioTick+0x24>
 800778a:	bf00      	nop
 800778c:	f3af 8000 	nop.w
 8007790:	f0000000 	.word	0xf0000000
 8007794:	3feb5c28 	.word	0x3feb5c28
 8007798:	20000134 	.word	0x20000134
 800779c:	200087a8 	.word	0x200087a8
 80077a0:	200087a0 	.word	0x200087a0
 80077a4:	20000008 	.word	0x20000008
 80077a8:	20008788 	.word	0x20008788
 80077ac:	20000750 	.word	0x20000750
 80077b0:	20000640 	.word	0x20000640
 80077b4:	00000000 	.word	0x00000000

080077b8 <HAL_SAI_ErrorCallback>:
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop

080077bc <HAL_SAI_TxCpltCallback>:
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop

080077c0 <HAL_SAI_TxHalfCpltCallback>:
}

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
  ;
}
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop

080077c4 <HAL_SAI_RxCpltCallback>:
	frameCount++;
 80077c4:	4a23      	ldr	r2, [pc, #140]	; (8007854 <HAL_SAI_RxCpltCallback+0x90>)
	if (codecReady)
 80077c6:	4924      	ldr	r1, [pc, #144]	; (8007858 <HAL_SAI_RxCpltCallback+0x94>)
	frameCount++;
 80077c8:	6813      	ldr	r3, [r2, #0]
	if (codecReady)
 80077ca:	7809      	ldrb	r1, [r1, #0]
	frameCount++;
 80077cc:	3301      	adds	r3, #1
 80077ce:	6013      	str	r3, [r2, #0]
	if (codecReady)
 80077d0:	b901      	cbnz	r1, 80077d4 <HAL_SAI_RxCpltCallback+0x10>
 80077d2:	4770      	bx	lr


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80077d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		for (i = 0; i < (HALF_BUFFER_SIZE); i = i + 2)
 80077d8:	2500      	movs	r5, #0
 80077da:	4f20      	ldr	r7, [pc, #128]	; (800785c <HAL_SAI_RxCpltCallback+0x98>)
 80077dc:	4e20      	ldr	r6, [pc, #128]	; (8007860 <HAL_SAI_RxCpltCallback+0x9c>)
			inputSamples[0] = (audioInBuffer[buffer_offset + i + 1]) * INV_TWO_TO_31;
 80077de:	f241 0804 	movw	r8, #4100	; 0x1004
{
 80077e2:	ed2d 8b02 	vpush	{d8}
			inputSamples[1] = (audioInBuffer[buffer_offset + i]) * INV_TWO_TO_31;
 80077e6:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 8007864 <HAL_SAI_RxCpltCallback+0xa0>
{
 80077ea:	b082      	sub	sp, #8
 80077ec:	00ac      	lsls	r4, r5, #2
			audioTick(inputSamples);
 80077ee:	4668      	mov	r0, sp
		for (i = 0; i < (HALF_BUFFER_SIZE); i = i + 2)
 80077f0:	3502      	adds	r5, #2
 80077f2:	193b      	adds	r3, r7, r4
 80077f4:	4434      	add	r4, r6
			inputSamples[1] = (audioInBuffer[buffer_offset + i]) * INV_TWO_TO_31;
 80077f6:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
			inputSamples[0] = (audioInBuffer[buffer_offset + i + 1]) * INV_TWO_TO_31;
 80077fa:	f853 3008 	ldr.w	r3, [r3, r8]
			inputSamples[1] = (audioInBuffer[buffer_offset + i]) * INV_TWO_TO_31;
 80077fe:	edd2 7a00 	vldr	s15, [r2]
			inputSamples[0] = (audioInBuffer[buffer_offset + i + 1]) * INV_TWO_TO_31;
 8007802:	ee07 3a10 	vmov	s14, r3
			inputSamples[1] = (audioInBuffer[buffer_offset + i]) * INV_TWO_TO_31;
 8007806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			inputSamples[0] = (audioInBuffer[buffer_offset + i + 1]) * INV_TWO_TO_31;
 800780a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			inputSamples[1] = (audioInBuffer[buffer_offset + i]) * INV_TWO_TO_31;
 800780e:	ee67 7a88 	vmul.f32	s15, s15, s16
			inputSamples[0] = (audioInBuffer[buffer_offset + i + 1]) * INV_TWO_TO_31;
 8007812:	ee27 7a08 	vmul.f32	s14, s14, s16
			inputSamples[1] = (audioInBuffer[buffer_offset + i]) * INV_TWO_TO_31;
 8007816:	edcd 7a01 	vstr	s15, [sp, #4]
			inputSamples[0] = (audioInBuffer[buffer_offset + i + 1]) * INV_TWO_TO_31;
 800781a:	ed8d 7a00 	vstr	s14, [sp]
			audioTick(inputSamples);
 800781e:	f7ff ff6b 	bl	80076f8 <audioTick>
			audioOutBuffer[buffer_offset + i] = (int32_t)(inputSamples[1] * TWO_TO_31);
 8007822:	ed9d 7a01 	vldr	s14, [sp, #4]
 8007826:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
			audioOutBuffer[buffer_offset + i + 1] = (int32_t)(inputSamples[0] * TWO_TO_31);;
 800782a:	eddd 7a00 	vldr	s15, [sp]
		for (i = 0; i < (HALF_BUFFER_SIZE); i = i + 2)
 800782e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
			audioOutBuffer[buffer_offset + i] = (int32_t)(inputSamples[1] * TWO_TO_31);
 8007832:	eebe 7ae0 	vcvt.s32.f32	s14, s14, #31
			audioOutBuffer[buffer_offset + i + 1] = (int32_t)(inputSamples[0] * TWO_TO_31);;
 8007836:	eefe 7ae0 	vcvt.s32.f32	s15, s15, #31
			audioOutBuffer[buffer_offset + i] = (int32_t)(inputSamples[1] * TWO_TO_31);
 800783a:	ed83 7a00 	vstr	s14, [r3]
			audioOutBuffer[buffer_offset + i + 1] = (int32_t)(inputSamples[0] * TWO_TO_31);;
 800783e:	ee17 3a90 	vmov	r3, s15
 8007842:	f844 3008 	str.w	r3, [r4, r8]
		for (i = 0; i < (HALF_BUFFER_SIZE); i = i + 2)
 8007846:	d1d1      	bne.n	80077ec <HAL_SAI_RxCpltCallback+0x28>
	audioFrame(HALF_BUFFER_SIZE);
}
 8007848:	b002      	add	sp, #8
 800784a:	ecbd 8b02 	vpop	{d8}
 800784e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007852:	bf00      	nop
 8007854:	20000138 	.word	0x20000138
 8007858:	20000130 	.word	0x20000130
 800785c:	30000400 	.word	0x30000400
 8007860:	30002400 	.word	0x30002400
 8007864:	2ffffff6 	.word	0x2ffffff6

08007868 <HAL_SAI_RxHalfCpltCallback>:
	frameCount++;
 8007868:	4a1c      	ldr	r2, [pc, #112]	; (80078dc <HAL_SAI_RxHalfCpltCallback+0x74>)
	if (codecReady)
 800786a:	491d      	ldr	r1, [pc, #116]	; (80078e0 <HAL_SAI_RxHalfCpltCallback+0x78>)
	frameCount++;
 800786c:	6813      	ldr	r3, [r2, #0]
	if (codecReady)
 800786e:	7809      	ldrb	r1, [r1, #0]
	frameCount++;
 8007870:	3301      	adds	r3, #1
 8007872:	6013      	str	r3, [r2, #0]
	if (codecReady)
 8007874:	b901      	cbnz	r1, 8007878 <HAL_SAI_RxHalfCpltCallback+0x10>
 8007876:	4770      	bx	lr

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8007878:	b570      	push	{r4, r5, r6, lr}
 800787a:	4c1a      	ldr	r4, [pc, #104]	; (80078e4 <HAL_SAI_RxHalfCpltCallback+0x7c>)
 800787c:	4d1a      	ldr	r5, [pc, #104]	; (80078e8 <HAL_SAI_RxHalfCpltCallback+0x80>)
 800787e:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
 8007882:	ed2d 8b02 	vpush	{d8}
			inputSamples[1] = (audioInBuffer[buffer_offset + i]) * INV_TWO_TO_31;
 8007886:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80078ec <HAL_SAI_RxHalfCpltCallback+0x84>
{
 800788a:	b082      	sub	sp, #8
			inputSamples[1] = (audioInBuffer[buffer_offset + i]) * INV_TWO_TO_31;
 800788c:	ed94 7a00 	vldr	s14, [r4]
			audioTick(inputSamples);
 8007890:	4668      	mov	r0, sp
			inputSamples[0] = (audioInBuffer[buffer_offset + i + 1]) * INV_TWO_TO_31;
 8007892:	edd4 7a01 	vldr	s15, [r4, #4]
 8007896:	3408      	adds	r4, #8
			inputSamples[1] = (audioInBuffer[buffer_offset + i]) * INV_TWO_TO_31;
 8007898:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			inputSamples[0] = (audioInBuffer[buffer_offset + i + 1]) * INV_TWO_TO_31;
 800789c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			inputSamples[1] = (audioInBuffer[buffer_offset + i]) * INV_TWO_TO_31;
 80078a0:	ee27 7a08 	vmul.f32	s14, s14, s16
			inputSamples[0] = (audioInBuffer[buffer_offset + i + 1]) * INV_TWO_TO_31;
 80078a4:	ee67 7a88 	vmul.f32	s15, s15, s16
			inputSamples[1] = (audioInBuffer[buffer_offset + i]) * INV_TWO_TO_31;
 80078a8:	ed8d 7a01 	vstr	s14, [sp, #4]
			inputSamples[0] = (audioInBuffer[buffer_offset + i + 1]) * INV_TWO_TO_31;
 80078ac:	edcd 7a00 	vstr	s15, [sp]
			audioTick(inputSamples);
 80078b0:	f7ff ff22 	bl	80076f8 <audioTick>
			audioOutBuffer[buffer_offset + i + 1] = (int32_t)(inputSamples[0] * TWO_TO_31);;
 80078b4:	eddd 7a00 	vldr	s15, [sp]
		for (i = 0; i < (HALF_BUFFER_SIZE); i = i + 2)
 80078b8:	42b4      	cmp	r4, r6
			audioOutBuffer[buffer_offset + i] = (int32_t)(inputSamples[1] * TWO_TO_31);
 80078ba:	ed9d 7a01 	vldr	s14, [sp, #4]
			audioOutBuffer[buffer_offset + i + 1] = (int32_t)(inputSamples[0] * TWO_TO_31);;
 80078be:	eefe 7ae0 	vcvt.s32.f32	s15, s15, #31
			audioOutBuffer[buffer_offset + i] = (int32_t)(inputSamples[1] * TWO_TO_31);
 80078c2:	eebe 7ae0 	vcvt.s32.f32	s14, s14, #31
			audioOutBuffer[buffer_offset + i + 1] = (int32_t)(inputSamples[0] * TWO_TO_31);;
 80078c6:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[buffer_offset + i] = (int32_t)(inputSamples[1] * TWO_TO_31);
 80078ca:	ed05 7a01 	vstr	s14, [r5, #-4]
			audioOutBuffer[buffer_offset + i + 1] = (int32_t)(inputSamples[0] * TWO_TO_31);;
 80078ce:	f845 3b08 	str.w	r3, [r5], #8
		for (i = 0; i < (HALF_BUFFER_SIZE); i = i + 2)
 80078d2:	d1db      	bne.n	800788c <HAL_SAI_RxHalfCpltCallback+0x24>
	audioFrame(0);
}
 80078d4:	b002      	add	sp, #8
 80078d6:	ecbd 8b02 	vpop	{d8}
 80078da:	bd70      	pop	{r4, r5, r6, pc}
 80078dc:	20000138 	.word	0x20000138
 80078e0:	20000130 	.word	0x20000130
 80078e4:	30000400 	.word	0x30000400
 80078e8:	30002404 	.word	0x30002404
 80078ec:	2ffffff6 	.word	0x2ffffff6

080078f0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80078f0:	b500      	push	{lr}
 80078f2:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	4613      	mov	r3, r2
 80078f8:	460a      	mov	r2, r1
 80078fa:	4601      	mov	r1, r0
 80078fc:	4804      	ldr	r0, [pc, #16]	; (8007910 <BSP_SD_ReadBlocks+0x20>)
 80078fe:	f7fd fd0f 	bl	8005320 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;  
}
 8007902:	3000      	adds	r0, #0
 8007904:	bf18      	it	ne
 8007906:	2001      	movne	r0, #1
 8007908:	b003      	add	sp, #12
 800790a:	f85d fb04 	ldr.w	pc, [sp], #4
 800790e:	bf00      	nop
 8007910:	2001ab34 	.word	0x2001ab34

08007914 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007914:	b500      	push	{lr}
 8007916:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	4613      	mov	r3, r2
 800791c:	460a      	mov	r2, r1
 800791e:	4601      	mov	r1, r0
 8007920:	4804      	ldr	r0, [pc, #16]	; (8007934 <BSP_SD_WriteBlocks+0x20>)
 8007922:	f7fd fdff 	bl	8005524 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;  
}
 8007926:	3000      	adds	r0, #0
 8007928:	bf18      	it	ne
 800792a:	2001      	movne	r0, #1
 800792c:	b003      	add	sp, #12
 800792e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007932:	bf00      	nop
 8007934:	2001ab34 	.word	0x2001ab34

08007938 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007938:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800793a:	4803      	ldr	r0, [pc, #12]	; (8007948 <BSP_SD_GetCardState+0x10>)
 800793c:	f7fe fb24 	bl	8005f88 <HAL_SD_GetCardState>
}
 8007940:	3804      	subs	r0, #4
 8007942:	bf18      	it	ne
 8007944:	2001      	movne	r0, #1
 8007946:	bd08      	pop	{r3, pc}
 8007948:	2001ab34 	.word	0x2001ab34

0800794c <BSP_SD_GetCardInfo>:
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800794c:	4601      	mov	r1, r0
 800794e:	4801      	ldr	r0, [pc, #4]	; (8007954 <BSP_SD_GetCardInfo+0x8>)
 8007950:	f7fe b9fe 	b.w	8005d50 <HAL_SD_GetCardInfo>
 8007954:	2001ab34 	.word	0x2001ab34

08007958 <BSP_SD_WriteCpltCallback>:
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop

0800795c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800795c:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800795e:	f7ff fffb 	bl	8007958 <BSP_SD_WriteCpltCallback>
}
 8007962:	bd08      	pop	{r3, pc}

08007964 <BSP_SD_ReadCpltCallback>:
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop

08007968 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007968:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800796a:	f7ff fffb 	bl	8007964 <BSP_SD_ReadCpltCallback>
}
 800796e:	bd08      	pop	{r3, pc}

08007970 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007970:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
 8007972:	2301      	movs	r3, #1
{
 8007974:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8007976:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800797a:	f000 f8fb 	bl	8007b74 <BSP_PlatformIsDetected>
 800797e:	b908      	cbnz	r0, 8007984 <BSP_SD_IsDetected+0x14>
  {
    status = SD_NOT_PRESENT;
 8007980:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 8007984:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8007988:	b003      	add	sp, #12
 800798a:	f85d fb04 	ldr.w	pc, [sp], #4
 800798e:	bf00      	nop

08007990 <BSP_SD_Init>:
{
 8007990:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007992:	f7ff ffed 	bl	8007970 <BSP_SD_IsDetected>
 8007996:	2801      	cmp	r0, #1
 8007998:	d001      	beq.n	800799e <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 800799a:	2002      	movs	r0, #2
}
 800799c:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 800799e:	4807      	ldr	r0, [pc, #28]	; (80079bc <BSP_SD_Init+0x2c>)
 80079a0:	f7fe fa8c 	bl	8005ebc <HAL_SD_Init>
  if (sd_state == MSD_OK)
 80079a4:	2800      	cmp	r0, #0
 80079a6:	d1f9      	bne.n	800799c <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80079a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80079ac:	4803      	ldr	r0, [pc, #12]	; (80079bc <BSP_SD_Init+0x2c>)
 80079ae:	f7fe f9e3 	bl	8005d78 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 80079b2:	3000      	adds	r0, #0
 80079b4:	bf18      	it	ne
 80079b6:	2001      	movne	r0, #1
}
 80079b8:	bd08      	pop	{r3, pc}
 80079ba:	bf00      	nop
 80079bc:	2001ab34 	.word	0x2001ab34

080079c0 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 80079c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80079c4:	2201      	movs	r2, #1
void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 80079c6:	b082      	sub	sp, #8
 80079c8:	4605      	mov	r5, r0

	HAL_Delay(2);
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
	myI2cData[1] = 0x03;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80079ca:	4e40      	ldr	r6, [pc, #256]	; (8007acc <AudioCodec_init+0x10c>)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80079cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80079d0:	483f      	ldr	r0, [pc, #252]	; (8007ad0 <AudioCodec_init+0x110>)
 80079d2:	f7fa fec7 	bl	8002764 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80079d6:	2002      	movs	r0, #2
	myI2cData[0] = 0x07;
 80079d8:	4c3e      	ldr	r4, [pc, #248]	; (8007ad4 <AudioCodec_init+0x114>)
	HAL_Delay(2);
 80079da:	f7f8 fce7 	bl	80003ac <HAL_Delay>
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80079de:	4f3e      	ldr	r7, [pc, #248]	; (8007ad8 <AudioCodec_init+0x118>)
	myI2cData[0] = 0x07;
 80079e0:	f240 3c07 	movw	ip, #775	; 0x307
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80079e4:	6831      	ldr	r1, [r6, #0]
 80079e6:	4622      	mov	r2, r4
 80079e8:	883b      	ldrh	r3, [r7, #0]
 80079ea:	4628      	mov	r0, r5
 80079ec:	9100      	str	r1, [sp, #0]
 80079ee:	2120      	movs	r1, #32
 80079f0:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8007ae0 <AudioCodec_init+0x120>
	myI2cData[0] = 0x07;
 80079f4:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80079f8:	f7fa ffd0 	bl	800299c <HAL_I2C_Master_Transmit>
	//HAL_Delay(2);

	myI2cData[0] = 0x01;
	myI2cData[1] = 0xe1; //0x41 for 48k, 0x81 for 96k, 0xe1 for 192k
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80079fc:	6831      	ldr	r1, [r6, #0]
	myI2cData[0] = 0x01;
 80079fe:	f24e 1c01 	movw	ip, #57601	; 0xe101
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a02:	883b      	ldrh	r3, [r7, #0]
 8007a04:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a06:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	9100      	str	r1, [sp, #0]
 8007a0e:	2120      	movs	r1, #32
	myI2cData[0] = 0x01;
 8007a10:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a14:	f7fa ffc2 	bl	800299c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
	myI2cData[1] = 0x00;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a18:	6832      	ldr	r2, [r6, #0]
	myI2cData[0] = 0x02;
 8007a1a:	f04f 0c02 	mov.w	ip, #2
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a1e:	883b      	ldrh	r3, [r7, #0]
 8007a20:	2120      	movs	r1, #32
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a22:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a26:	4628      	mov	r0, r5
 8007a28:	9200      	str	r2, [sp, #0]
 8007a2a:	4622      	mov	r2, r4
	myI2cData[0] = 0x02;
 8007a2c:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a30:	f7fa ffb4 	bl	800299c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
	myI2cData[1] = 0x79;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a34:	6831      	ldr	r1, [r6, #0]
	myI2cData[0] = 0x03;
 8007a36:	f647 1c03 	movw	ip, #30979	; 0x7903
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a3a:	883b      	ldrh	r3, [r7, #0]
 8007a3c:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a3e:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a42:	4628      	mov	r0, r5
 8007a44:	9100      	str	r1, [sp, #0]
 8007a46:	2120      	movs	r1, #32
	myI2cData[0] = 0x03;
 8007a48:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a4c:	f7fa ffa6 	bl	800299c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a50:	6832      	ldr	r2, [r6, #0]
	myI2cData[0] = 0x04;
 8007a52:	f44f 7c82 	mov.w	ip, #260	; 0x104
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a56:	883b      	ldrh	r3, [r7, #0]
 8007a58:	2120      	movs	r1, #32
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a5a:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a5e:	4628      	mov	r0, r5
 8007a60:	9200      	str	r2, [sp, #0]
 8007a62:	4622      	mov	r2, r4
	myI2cData[0] = 0x04;
 8007a64:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a68:	f7fa ff98 	bl	800299c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a6c:	6831      	ldr	r1, [r6, #0]
	myI2cData[0] = 0x05;
 8007a6e:	f240 1c05 	movw	ip, #261	; 0x105
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a72:	883b      	ldrh	r3, [r7, #0]
 8007a74:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a76:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	9100      	str	r1, [sp, #0]
 8007a7e:	2120      	movs	r1, #32
	myI2cData[0] = 0x05;
 8007a80:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a84:	f7fa ff8a 	bl	800299c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
	myI2cData[1] = 0x10;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a88:	6832      	ldr	r2, [r6, #0]
	myI2cData[0] = 0x06;
 8007a8a:	f241 0c06 	movw	ip, #4102	; 0x1006
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a8e:	883b      	ldrh	r3, [r7, #0]
 8007a90:	2120      	movs	r1, #32
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a92:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007a96:	4628      	mov	r0, r5
 8007a98:	9200      	str	r2, [sp, #0]
 8007a9a:	4622      	mov	r2, r4
	myI2cData[0] = 0x06;
 8007a9c:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007aa0:	f7fa ff7c 	bl	800299c <HAL_I2C_Master_Transmit>
	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
	myI2cData[1] = 0x02;
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007aa4:	6831      	ldr	r1, [r6, #0]
 8007aa6:	4622      	mov	r2, r4
 8007aa8:	883b      	ldrh	r3, [r7, #0]
	myI2cData[0] = 0x07;
 8007aaa:	f240 2707 	movw	r7, #519	; 0x207
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007aae:	f888 0000 	strb.w	r0, [r8]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	9100      	str	r1, [sp, #0]
 8007ab6:	2120      	movs	r1, #32
	myI2cData[0] = 0x07;
 8007ab8:	8027      	strh	r7, [r4, #0]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007aba:	f7fa ff6f 	bl	800299c <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 8007abe:	4b07      	ldr	r3, [pc, #28]	; (8007adc <AudioCodec_init+0x11c>)
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	701a      	strb	r2, [r3, #0]

}
 8007ac4:	b002      	add	sp, #8
 8007ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aca:	bf00      	nop
 8007acc:	2000000c 	.word	0x2000000c
 8007ad0:	58020800 	.word	0x58020800
 8007ad4:	2000013c 	.word	0x2000013c
 8007ad8:	20000010 	.word	0x20000010
 8007adc:	20000130 	.word	0x20000130
 8007ae0:	2000d944 	.word	0x2000d944

08007ae4 <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007ae4:	4b1b      	ldr	r3, [pc, #108]	; (8007b54 <MX_DMA_Init+0x70>)

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 8007ae6:	2101      	movs	r1, #1
 8007ae8:	2200      	movs	r2, #0
 8007aea:	200b      	movs	r0, #11
{
 8007aec:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007aee:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 8007af2:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007af4:	430c      	orrs	r4, r1
 8007af6:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8007afa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007afe:	400b      	ands	r3, r1
 8007b00:	9301      	str	r3, [sp, #4]
 8007b02:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 8007b04:	f7f9 f8e2 	bl	8000ccc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8007b08:	200b      	movs	r0, #11
 8007b0a:	f7f9 f915 	bl	8000d38 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 8007b0e:	2200      	movs	r2, #0
 8007b10:	2102      	movs	r1, #2
 8007b12:	200c      	movs	r0, #12
 8007b14:	f7f9 f8da 	bl	8000ccc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8007b18:	200c      	movs	r0, #12
 8007b1a:	f7f9 f90d 	bl	8000d38 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 3, 0);
 8007b1e:	2200      	movs	r2, #0
 8007b20:	2103      	movs	r1, #3
 8007b22:	200d      	movs	r0, #13
 8007b24:	f7f9 f8d2 	bl	8000ccc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8007b28:	200d      	movs	r0, #13
 8007b2a:	f7f9 f905 	bl	8000d38 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 4, 0);
 8007b2e:	2200      	movs	r2, #0
 8007b30:	2104      	movs	r1, #4
 8007b32:	200e      	movs	r0, #14
 8007b34:	f7f9 f8ca 	bl	8000ccc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8007b38:	200e      	movs	r0, #14
 8007b3a:	f7f9 f8fd 	bl	8000d38 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8007b3e:	2200      	movs	r2, #0
 8007b40:	2105      	movs	r1, #5
 8007b42:	200f      	movs	r0, #15
 8007b44:	f7f9 f8c2 	bl	8000ccc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8007b48:	200f      	movs	r0, #15

}
 8007b4a:	b002      	add	sp, #8
 8007b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8007b50:	f7f9 b8f2 	b.w	8000d38 <HAL_NVIC_EnableIRQ>
 8007b54:	58024400 	.word	0x58024400

08007b58 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8007b58:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007b5a:	4903      	ldr	r1, [pc, #12]	; (8007b68 <MX_FATFS_Init+0x10>)
 8007b5c:	4803      	ldr	r0, [pc, #12]	; (8007b6c <MX_FATFS_Init+0x14>)
 8007b5e:	f7ff fbd1 	bl	8007304 <FATFS_LinkDriver>
 8007b62:	4b03      	ldr	r3, [pc, #12]	; (8007b70 <MX_FATFS_Init+0x18>)
 8007b64:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8007b66:	bd08      	pop	{r3, pc}
 8007b68:	2000d94c 	.word	0x2000d94c
 8007b6c:	0800aa68 	.word	0x0800aa68
 8007b70:	2000d948 	.word	0x2000d948

08007b74 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007b74:	b510      	push	{r4, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007b76:	4c08      	ldr	r4, [pc, #32]	; (8007b98 <BSP_PlatformIsDetected+0x24>)
 8007b78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	f7fa fdeb 	bl	8002758 <HAL_GPIO_ReadPin>
        status = SD_NOT_PRESENT;
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    status = SD_PRESENT;
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 8007b82:	4620      	mov	r0, r4
 8007b84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007b88:	f7fa fde6 	bl	8002758 <HAL_GPIO_ReadPin>
    {
        status = SD_NOT_PRESENT;
    }
    /* USER CODE END 1 */ 
    return status;
}  
 8007b8c:	f1a0 0001 	sub.w	r0, r0, #1
 8007b90:	fab0 f080 	clz	r0, r0
 8007b94:	0940      	lsrs	r0, r0, #5
 8007b96:	bd10      	pop	{r4, pc}
 8007b98:	58020800 	.word	0x58020800

08007b9c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8007b9c:	b570      	push	{r4, r5, r6, lr}
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8007b9e:	4b18      	ldr	r3, [pc, #96]	; (8007c00 <MX_FMC_Init+0x64>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8007ba0:	2001      	movs	r0, #1
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8007ba2:	4d18      	ldr	r5, [pc, #96]	; (8007c04 <MX_FMC_Init+0x68>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8007ba4:	2108      	movs	r1, #8
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8007ba6:	2410      	movs	r4, #16
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8007ba8:	2240      	movs	r2, #64	; 0x40
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8007baa:	601d      	str	r5, [r3, #0]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8007bac:	f44f 7580 	mov.w	r5, #256	; 0x100
{
 8007bb0:	b088      	sub	sp, #32
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
  SdramTiming.ExitSelfRefreshDelay = 6;
  SdramTiming.SelfRefreshTime = 4;
 8007bb2:	2604      	movs	r6, #4
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8007bb4:	6098      	str	r0, [r3, #8]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8007bb6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8007bba:	60d9      	str	r1, [r3, #12]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8007bbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8007bc0:	611c      	str	r4, [r3, #16]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8007bc2:	2400      	movs	r4, #0
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8007bc4:	615a      	str	r2, [r3, #20]
  SdramTiming.LoadToActiveDelay = 2;
 8007bc6:	2202      	movs	r2, #2
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8007bc8:	619d      	str	r5, [r3, #24]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8007bca:	2506      	movs	r5, #6
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8007bcc:	6218      	str	r0, [r3, #32]
  SdramTiming.RowCycleDelay = 6;
  SdramTiming.WriteRecoveryTime = 2;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8007bce:	4618      	mov	r0, r3
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8007bd0:	6259      	str	r1, [r3, #36]	; 0x24
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8007bd2:	eb0d 0106 	add.w	r1, sp, r6
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8007bd6:	605c      	str	r4, [r3, #4]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8007bd8:	61dc      	str	r4, [r3, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8007bda:	629c      	str	r4, [r3, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8007bdc:	9201      	str	r2, [sp, #4]
  SdramTiming.RCDDelay = 2;
 8007bde:	9207      	str	r2, [sp, #28]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8007be0:	9502      	str	r5, [sp, #8]
  SdramTiming.RPDelay = 2;
 8007be2:	e9cd 2205 	strd	r2, r2, [sp, #20]
  SdramTiming.SelfRefreshTime = 4;
 8007be6:	e9cd 6503 	strd	r6, r5, [sp, #12]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8007bea:	f7fe fb2f 	bl	800624c <HAL_SDRAM_Init>
 8007bee:	b108      	cbz	r0, 8007bf4 <MX_FMC_Init+0x58>
  {
    Error_Handler( );
 8007bf0:	f000 fbe2 	bl	80083b8 <Error_Handler>
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8007bf4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8007bf8:	f7f8 fbf0 	bl	80003dc <HAL_SetFMCMemorySwappingConfig>

}
 8007bfc:	b008      	add	sp, #32
 8007bfe:	bd70      	pop	{r4, r5, r6, pc}
 8007c00:	2000ddb4 	.word	0x2000ddb4
 8007c04:	52004140 	.word	0x52004140

08007c08 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 8007c08:	4a2a      	ldr	r2, [pc, #168]	; (8007cb4 <HAL_SDRAM_MspInit+0xac>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c0a:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8007c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c0e:	b087      	sub	sp, #28
  if (FMC_Initialized) {
 8007c10:	6814      	ldr	r4, [r2, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c12:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8007c16:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8007c1a:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8007c1c:	b10c      	cbz	r4, 8007c22 <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8007c1e:	b007      	add	sp, #28
 8007c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_RCC_FMC_CLK_ENABLE();
 8007c22:	4b25      	ldr	r3, [pc, #148]	; (8007cb8 <HAL_SDRAM_MspInit+0xb0>)
  FMC_Initialized = 1;
 8007c24:	2101      	movs	r1, #1
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8007c26:	f64f 003f 	movw	r0, #63551	; 0xf83f
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c2a:	2702      	movs	r7, #2
  FMC_Initialized = 1;
 8007c2c:	6011      	str	r1, [r2, #0]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c2e:	2603      	movs	r6, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8007c30:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007c34:	250c      	movs	r5, #12
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007c36:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8007c38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c3c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8007c40:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8007c44:	9001      	str	r0, [sp, #4]
  __HAL_RCC_FMC_CLK_ENABLE();
 8007c46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007c4a:	481c      	ldr	r0, [pc, #112]	; (8007cbc <HAL_SDRAM_MspInit+0xb4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c4c:	9702      	str	r7, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007c52:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007c56:	f7fa fc5b 	bl	8002510 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8007c5a:	2319      	movs	r3, #25
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c5c:	a901      	add	r1, sp, #4
 8007c5e:	4818      	ldr	r0, [pc, #96]	; (8007cc0 <HAL_SDRAM_MspInit+0xb8>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8007c60:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c62:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c64:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007c66:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c6a:	f7fa fc51 	bl	8002510 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 8007c6e:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007c72:	a901      	add	r1, sp, #4
 8007c74:	4813      	ldr	r0, [pc, #76]	; (8007cc4 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 8007c76:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c78:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c7a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007c7c:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007c80:	f7fa fc46 	bl	8002510 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8007c84:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007c88:	a901      	add	r1, sp, #4
 8007c8a:	480f      	ldr	r0, [pc, #60]	; (8007cc8 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8007c8c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c8e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c90:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007c92:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007c96:	f7fa fc3b 	bl	8002510 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8007c9a:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007c9e:	a901      	add	r1, sp, #4
 8007ca0:	480a      	ldr	r0, [pc, #40]	; (8007ccc <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ca2:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ca4:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8007ca6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007ca8:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007cac:	f7fa fc30 	bl	8002510 <HAL_GPIO_Init>
}
 8007cb0:	b007      	add	sp, #28
 8007cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cb4:	20000140 	.word	0x20000140
 8007cb8:	58024400 	.word	0x58024400
 8007cbc:	58021400 	.word	0x58021400
 8007cc0:	58020800 	.word	0x58020800
 8007cc4:	58021800 	.word	0x58021800
 8007cc8:	58021000 	.word	0x58021000
 8007ccc:	58020c00 	.word	0x58020c00

08007cd0 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8007cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007cd4:	4b7d      	ldr	r3, [pc, #500]	; (8007ecc <MX_GPIO_Init+0x1fc>)
{
 8007cd6:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cd8:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007cda:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007cdc:	f04f 0a02 	mov.w	sl, #2
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8007ce0:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 8007ee0 <MX_GPIO_Init+0x210>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ce4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8007ce6:	4622      	mov	r2, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ce8:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8007cea:	4640      	mov	r0, r8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cec:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8007cee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8007cf2:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 8007ee4 <MX_GPIO_Init+0x214>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8007cf6:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 8007ee8 <MX_GPIO_Init+0x218>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cfa:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007cfe:	f8d3 50e0 	ldr.w	r5, [r3, #224]	; 0xe0
 8007d02:	f045 0510 	orr.w	r5, r5, #16
 8007d06:	f8c3 50e0 	str.w	r5, [r3, #224]	; 0xe0

  /*Configure GPIO pins : PC15 PC1 PC2 PC5 
                           PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007d0a:	2503      	movs	r5, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007d0c:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8007d10:	f007 0710 	and.w	r7, r7, #16
 8007d14:	9701      	str	r7, [sp, #4]
 8007d16:	9f01      	ldr	r7, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d18:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8007d1c:	f047 0704 	orr.w	r7, r7, #4
 8007d20:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
 8007d24:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8007d28:	f007 0704 	and.w	r7, r7, #4
 8007d2c:	9702      	str	r7, [sp, #8]
 8007d2e:	9f02      	ldr	r7, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007d30:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8007d34:	f047 0720 	orr.w	r7, r7, #32
 8007d38:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
 8007d3c:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8007d40:	f007 0720 	and.w	r7, r7, #32
 8007d44:	9703      	str	r7, [sp, #12]
 8007d46:	9f03      	ldr	r7, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007d48:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8007d4c:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 8007d50:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
 8007d54:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8007d58:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8007d5c:	9704      	str	r7, [sp, #16]
 8007d5e:	9f04      	ldr	r7, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d60:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8007d64:	4337      	orrs	r7, r6
 8007d66:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
 8007d6a:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8007d6e:	4037      	ands	r7, r6
 8007d70:	9705      	str	r7, [sp, #20]
 8007d72:	9f05      	ldr	r7, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d74:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8007d78:	ea47 070a 	orr.w	r7, r7, sl
 8007d7c:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
 8007d80:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8007d84:	ea07 070a 	and.w	r7, r7, sl
 8007d88:	9706      	str	r7, [sp, #24]
 8007d8a:	9f06      	ldr	r7, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007d8c:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8007d90:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 8007d94:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
 8007d98:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8007d9c:	f007 0740 	and.w	r7, r7, #64	; 0x40
 8007da0:	9707      	str	r7, [sp, #28]
 8007da2:	9f07      	ldr	r7, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007da4:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8007da8:	f047 0708 	orr.w	r7, r7, #8
 8007dac:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
 8007db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8007db4:	4f46      	ldr	r7, [pc, #280]	; (8007ed0 <MX_GPIO_Init+0x200>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007db6:	f003 0308 	and.w	r3, r3, #8
 8007dba:	9308      	str	r3, [sp, #32]
 8007dbc:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8007dbe:	f7fa fcd1 	bl	8002764 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8007dc2:	4622      	mov	r2, r4
 8007dc4:	4648      	mov	r0, r9
 8007dc6:	f44f 6168 	mov.w	r1, #3712	; 0xe80
 8007dca:	f7fa fccb 	bl	8002764 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8007dce:	4622      	mov	r2, r4
 8007dd0:	4638      	mov	r0, r7
 8007dd2:	2180      	movs	r1, #128	; 0x80
 8007dd4:	f7fa fcc6 	bl	8002764 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8007dd8:	4622      	mov	r2, r4
 8007dda:	4658      	mov	r0, fp
 8007ddc:	2110      	movs	r1, #16
 8007dde:	f7fa fcc1 	bl	8002764 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007de2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007de6:	a909      	add	r1, sp, #36	; 0x24
 8007de8:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007dea:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007dee:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007df2:	f7fa fb8d 	bl	8002510 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8007df6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007dfa:	a909      	add	r1, sp, #36	; 0x24
 8007dfc:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007dfe:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e02:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e04:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007e08:	f7fa fb82 	bl	8002510 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5 
 8007e0c:	f248 03e6 	movw	r3, #32998	; 0x80e6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007e10:	4640      	mov	r0, r8
 8007e12:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e14:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007e16:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007e1a:	f7fa fb79 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 
                           PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 8007e1e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007e22:	a909      	add	r1, sp, #36	; 0x24
 8007e24:	482b      	ldr	r0, [pc, #172]	; (8007ed4 <MX_GPIO_Init+0x204>)
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 8007e26:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e28:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007e2c:	f7fa fb70 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 
                           PA8 PA9 PA10 PA11 
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
 8007e30:	f649 73f0 	movw	r3, #40944	; 0x9ff0
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e34:	a909      	add	r1, sp, #36	; 0x24
 8007e36:	4828      	ldr	r0, [pc, #160]	; (8007ed8 <MX_GPIO_Init+0x208>)
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
 8007e38:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e3a:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e3e:	f7fa fb67 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB5 
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5 
 8007e42:	f240 33e7 	movw	r3, #999	; 0x3e7
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e46:	a909      	add	r1, sp, #36	; 0x24
 8007e48:	4658      	mov	r0, fp
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5 
 8007e4a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e4c:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e50:	f7fa fb5e 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007e54:	f44f 6200 	mov.w	r2, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007e58:	4b20      	ldr	r3, [pc, #128]	; (8007edc <MX_GPIO_Init+0x20c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e5a:	a909      	add	r1, sp, #36	; 0x24
 8007e5c:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e5e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007e60:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e64:	f7fa fb54 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD3 PD4 
                           PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 8007e68:	f243 0378 	movw	r3, #12408	; 0x3078
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e6c:	a909      	add	r1, sp, #36	; 0x24
 8007e6e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 8007e70:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e72:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e76:	f7fa fb4b 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG12 PG13 
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13 
 8007e7a:	f247 0348 	movw	r3, #28744	; 0x7048
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007e7e:	a909      	add	r1, sp, #36	; 0x24
 8007e80:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13 
 8007e82:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e84:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007e88:	f7fa fb42 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG9 PG10 PG11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8007e8c:	f44f 6368 	mov.w	r3, #3712	; 0xe80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007e90:	4648      	mov	r0, r9
 8007e92:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8007e94:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e96:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e98:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007e9c:	f7fa fb38 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007ea0:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007ea2:	4638      	mov	r0, r7
 8007ea4:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007ea6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ea8:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eaa:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007eae:	f7fa fb2f 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007eb2:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007eb4:	a909      	add	r1, sp, #36	; 0x24
 8007eb6:	4658      	mov	r0, fp
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007eb8:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007eba:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ebc:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ec0:	f7fa fb26 	bl	8002510 <HAL_GPIO_Init>

}
 8007ec4:	b00f      	add	sp, #60	; 0x3c
 8007ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eca:	bf00      	nop
 8007ecc:	58024400 	.word	0x58024400
 8007ed0:	58020c00 	.word	0x58020c00
 8007ed4:	58021400 	.word	0x58021400
 8007ed8:	58020000 	.word	0x58020000
 8007edc:	11110000 	.word	0x11110000
 8007ee0:	58020800 	.word	0x58020800
 8007ee4:	58021800 	.word	0x58021800
 8007ee8:	58020400 	.word	0x58020400

08007eec <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8007eec:	b538      	push	{r3, r4, r5, lr}

  hi2c2.Instance = I2C2;
 8007eee:	4b13      	ldr	r3, [pc, #76]	; (8007f3c <MX_I2C2_Init+0x50>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
 8007ef0:	2200      	movs	r2, #0
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007ef2:	2101      	movs	r1, #1
  hi2c2.Instance = I2C2;
 8007ef4:	4d12      	ldr	r5, [pc, #72]	; (8007f40 <MX_I2C2_Init+0x54>)
  hi2c2.Init.Timing = 0x00B03FDB;
 8007ef6:	4c13      	ldr	r4, [pc, #76]	; (8007f44 <MX_I2C2_Init+0x58>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007ef8:	4618      	mov	r0, r3
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007efa:	621a      	str	r2, [r3, #32]
  hi2c2.Init.Timing = 0x00B03FDB;
 8007efc:	e9c3 5400 	strd	r5, r4, [r3]
  hi2c2.Init.OwnAddress1 = 0;
 8007f00:	e9c3 2102 	strd	r2, r1, [r3, #8]
  hi2c2.Init.OwnAddress2 = 0;
 8007f04:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007f08:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007f0c:	f7fa fce8 	bl	80028e0 <HAL_I2C_Init>
 8007f10:	b988      	cbnz	r0, 8007f36 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007f12:	2100      	movs	r1, #0
 8007f14:	4809      	ldr	r0, [pc, #36]	; (8007f3c <MX_I2C2_Init+0x50>)
 8007f16:	f7fa fe0f 	bl	8002b38 <HAL_I2CEx_ConfigAnalogFilter>
 8007f1a:	b948      	cbnz	r0, 8007f30 <MX_I2C2_Init+0x44>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	4807      	ldr	r0, [pc, #28]	; (8007f3c <MX_I2C2_Init+0x50>)
 8007f20:	f7fa fe38 	bl	8002b94 <HAL_I2CEx_ConfigDigitalFilter>
 8007f24:	b900      	cbnz	r0, 8007f28 <MX_I2C2_Init+0x3c>
  {
    Error_Handler();
  }

}
 8007f26:	bd38      	pop	{r3, r4, r5, pc}
 8007f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8007f2c:	f000 ba44 	b.w	80083b8 <Error_Handler>
    Error_Handler();
 8007f30:	f000 fa42 	bl	80083b8 <Error_Handler>
 8007f34:	e7f2      	b.n	8007f1c <MX_I2C2_Init+0x30>
    Error_Handler();
 8007f36:	f000 fa3f 	bl	80083b8 <Error_Handler>
 8007f3a:	e7ea      	b.n	8007f12 <MX_I2C2_Init+0x26>
 8007f3c:	2000dde8 	.word	0x2000dde8
 8007f40:	40005800 	.word	0x40005800
 8007f44:	00b03fdb 	.word	0x00b03fdb

08007f48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007f48:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C2)
 8007f4a:	4a1a      	ldr	r2, [pc, #104]	; (8007fb4 <HAL_I2C_MspInit+0x6c>)
{
 8007f4c:	b088      	sub	sp, #32
  if(i2cHandle->Instance==I2C2)
 8007f4e:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f50:	2300      	movs	r3, #0
  if(i2cHandle->Instance==I2C2)
 8007f52:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f54:	9307      	str	r3, [sp, #28]
 8007f56:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8007f5a:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(i2cHandle->Instance==I2C2)
 8007f5e:	d001      	beq.n	8007f64 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8007f60:	b008      	add	sp, #32
 8007f62:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f64:	4c14      	ldr	r4, [pc, #80]	; (8007fb8 <HAL_I2C_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007f66:	2012      	movs	r0, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007f68:	2204      	movs	r2, #4
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007f6a:	f44f 6640 	mov.w	r6, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f6e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f72:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f74:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f76:	f043 0302 	orr.w	r3, r3, #2
 8007f7a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8007f7e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007f82:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f84:	f003 0302 	and.w	r3, r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f88:	480c      	ldr	r0, [pc, #48]	; (8007fbc <HAL_I2C_MspInit+0x74>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007f8a:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f8c:	9301      	str	r3, [sp, #4]
 8007f8e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007f90:	e9cd 5206 	strd	r5, r2, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f94:	f7fa fabc 	bl	8002510 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007f98:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8007f9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007fa0:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8007fa4:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8007fa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fac:	9302      	str	r3, [sp, #8]
 8007fae:	9b02      	ldr	r3, [sp, #8]
}
 8007fb0:	b008      	add	sp, #32
 8007fb2:	bd70      	pop	{r4, r5, r6, pc}
 8007fb4:	40005800 	.word	0x40005800
 8007fb8:	58024400 	.word	0x58024400
 8007fbc:	58020400 	.word	0x58020400

08007fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc4:	b0cc      	sub	sp, #304	; 0x130
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007fc6:	224c      	movs	r2, #76	; 0x4c
 8007fc8:	2100      	movs	r1, #0
 8007fca:	a80a      	add	r0, sp, #40	; 0x28
 8007fcc:	f001 f99e 	bl	800930c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007fd0:	2220      	movs	r2, #32
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	a802      	add	r0, sp, #8
 8007fd6:	f001 f999 	bl	800930c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007fda:	22bc      	movs	r2, #188	; 0xbc
 8007fdc:	2100      	movs	r1, #0
 8007fde:	a81d      	add	r0, sp, #116	; 0x74
 8007fe0:	f001 f994 	bl	800930c <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8007fe4:	2002      	movs	r0, #2
 8007fe6:	f7fa fe01 	bl	8002bec <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8007fea:	4b3b      	ldr	r3, [pc, #236]	; (80080d8 <SystemClock_Config+0x118>)
 8007fec:	2100      	movs	r1, #0
 8007fee:	4a3b      	ldr	r2, [pc, #236]	; (80080dc <SystemClock_Config+0x11c>)

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8007ff0:	4618      	mov	r0, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8007ff2:	9101      	str	r1, [sp, #4]
 8007ff4:	6999      	ldr	r1, [r3, #24]
 8007ff6:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8007ffa:	6199      	str	r1, [r3, #24]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008002:	9301      	str	r3, [sp, #4]
 8008004:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008006:	f043 0301 	orr.w	r3, r3, #1
 800800a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800800c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800800e:	f003 0301 	and.w	r3, r3, #1
 8008012:	9301      	str	r3, [sp, #4]
 8008014:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8008016:	6983      	ldr	r3, [r0, #24]
 8008018:	049b      	lsls	r3, r3, #18
 800801a:	d5fc      	bpl.n	8008016 <SystemClock_Config+0x56>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800801c:	4a30      	ldr	r2, [pc, #192]	; (80080e0 <SystemClock_Config+0x120>)
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800801e:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
 8008020:	2005      	movs	r0, #5
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8008022:	2601      	movs	r6, #1
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8008024:	6a93      	ldr	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8008026:	f04f 0c23 	mov.w	ip, #35	; 0x23
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800802a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800802e:	2540      	movs	r5, #64	; 0x40
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8008030:	f023 0303 	bic.w	r3, r3, #3
  RCC_OscInitStruct.PLL.PLLN = 192;
 8008034:	21c0      	movs	r1, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8008036:	f04f 0808 	mov.w	r8, #8
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800803a:	4323      	orrs	r3, r4
 800803c:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800803e:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLM = 5;
 8008040:	9015      	str	r0, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008042:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8008044:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008048:	970b      	str	r7, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800804a:	960d      	str	r6, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800804c:	9610      	str	r6, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800804e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLR = 2;
 8008050:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLN = 192;
 8008052:	9116      	str	r1, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8008054:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008056:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800805a:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800805e:	e9cd 831a 	strd	r8, r3, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008062:	f7fa fde9 	bl	8002c38 <HAL_RCC_OscConfig>
 8008066:	b100      	cbz	r0, 800806a <SystemClock_Config+0xaa>
 8008068:	e7fe      	b.n	8008068 <SystemClock_Config+0xa8>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800806a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800806e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008072:	2203      	movs	r2, #3
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8008074:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8008076:	2104      	movs	r1, #4
 8008078:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800807a:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800807c:	f8cd 8014 	str.w	r8, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8008080:	9509      	str	r5, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8008082:	e9cd 5506 	strd	r5, r5, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008086:	e9cd c202 	strd	ip, r2, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800808a:	f7fb f92b 	bl	80032e4 <HAL_RCC_ClockConfig>
 800808e:	4603      	mov	r3, r0
 8008090:	b100      	cbz	r0, 8008094 <SystemClock_Config+0xd4>
 8008092:	e7fe      	b.n	8008092 <SystemClock_Config+0xd2>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_SPI2
 8008094:	f8df c04c 	ldr.w	ip, [pc, #76]	; 80080e4 <SystemClock_Config+0x124>
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_ADC
                              |RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8008098:	2519      	movs	r5, #25
  PeriphClkInitStruct.PLL2.PLL2N = 344;
  PeriphClkInitStruct.PLL2.PLL2P = 7;
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800809a:	9421      	str	r4, [sp, #132]	; 0x84
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 800809c:	2107      	movs	r1, #7
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800809e:	9422      	str	r4, [sp, #136]	; 0x88
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 80080a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 80080a4:	f44f 74ac 	mov.w	r4, #344	; 0x158
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80080a8:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80080aa:	9323      	str	r3, [sp, #140]	; 0x8c
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80080ac:	932e      	str	r3, [sp, #184]	; 0xb8
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80080ae:	9730      	str	r7, [sp, #192]	; 0xc0
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80080b0:	9334      	str	r3, [sp, #208]	; 0xd0
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 80080b2:	9245      	str	r2, [sp, #276]	; 0x114
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80080b4:	e9cd 3324 	strd	r3, r3, [sp, #144]	; 0x90
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 80080b8:	e9cd 3631 	strd	r3, r6, [sp, #196]	; 0xc4
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80080bc:	e9cd 333c 	strd	r3, r3, [sp, #240]	; 0xf0
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 80080c0:	e9cd c51d 	strd	ip, r5, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 80080c4:	e9cd 411f 	strd	r4, r1, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80080c8:	f7fb fbdc 	bl	8003884 <HAL_RCCEx_PeriphCLKConfig>
 80080cc:	b100      	cbz	r0, 80080d0 <SystemClock_Config+0x110>
 80080ce:	e7fe      	b.n	80080ce <SystemClock_Config+0x10e>
  {
    Error_Handler();
  }
}
 80080d0:	b04c      	add	sp, #304	; 0x130
 80080d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080d6:	bf00      	nop
 80080d8:	58024800 	.word	0x58024800
 80080dc:	58000400 	.word	0x58000400
 80080e0:	58024400 	.word	0x58024400
 80080e4:	810b1108 	.word	0x810b1108

080080e8 <SDRAM_Initialization_sequence>:
#define SDRAM_MODEREG_WRITEBURST_MODE_SINGLE     ((uint16_t)0x0200)

//#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)956)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)0x0569)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
void SDRAM_Initialization_sequence(void)
{
 80080e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 1;
    Command.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80080ec:	4c2b      	ldr	r4, [pc, #172]	; (800819c <SDRAM_Initialization_sequence+0xb4>)
{
 80080ee:	b087      	sub	sp, #28
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80080f0:	2501      	movs	r5, #1
    __IO uint32_t tmpmrd = 0;
 80080f2:	2600      	movs	r6, #0
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80080f4:	2710      	movs	r7, #16
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80080f6:	a902      	add	r1, sp, #8
 80080f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080fc:	4620      	mov	r0, r4
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);

    /* Step 4: Configure the 1st Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 8;
 80080fe:	f04f 0808 	mov.w	r8, #8
    __IO uint32_t tmpmrd = 0;
 8008102:	9601      	str	r6, [sp, #4]
    Command.ModeRegisterDefinition = 0;
 8008104:	9605      	str	r6, [sp, #20]
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8008106:	f04f 0903 	mov.w	r9, #3
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800810a:	9502      	str	r5, [sp, #8]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800810c:	e9cd 7503 	strd	r7, r5, [sp, #12]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008110:	f7fe f8c4 	bl	800629c <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 8008114:	4628      	mov	r0, r5
 8008116:	f7f8 f949 	bl	80003ac <HAL_Delay>
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 800811a:	2302      	movs	r3, #2
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800811c:	eb0d 0108 	add.w	r1, sp, r8
 8008120:	4620      	mov	r0, r4
 8008122:	f64f 72ff 	movw	r2, #65535	; 0xffff
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 8008126:	9302      	str	r3, [sp, #8]
    Command.ModeRegisterDefinition = 0;
 8008128:	9605      	str	r6, [sp, #20]
    Command.AutoRefreshNumber = 1;
 800812a:	e9cd 7503 	strd	r7, r5, [sp, #12]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800812e:	f7fe f8b5 	bl	800629c <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 8008132:	f240 2222 	movw	r2, #546	; 0x222
    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8008136:	2304      	movs	r3, #4
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008138:	eb0d 0108 	add.w	r1, sp, r8
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 800813c:	9201      	str	r2, [sp, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800813e:	4620      	mov	r0, r4
    Command.ModeRegisterDefinition = tmpmrd;
 8008140:	f8dd c004 	ldr.w	ip, [sp, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008144:	f64f 72ff 	movw	r2, #65535	; 0xffff
    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8008148:	9302      	str	r3, [sp, #8]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800814a:	9703      	str	r7, [sp, #12]
    Command.ModeRegisterDefinition = tmpmrd;
 800814c:	e9cd 5c04 	strd	r5, ip, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008150:	f7fe f8a4 	bl	800629c <HAL_SDRAM_SendCommand>
    Command.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008154:	eb0d 0108 	add.w	r1, sp, r8
 8008158:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800815c:	4620      	mov	r0, r4
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800815e:	9703      	str	r7, [sp, #12]
    Command.ModeRegisterDefinition = 0;
 8008160:	9605      	str	r6, [sp, #20]
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8008162:	f8cd 9008 	str.w	r9, [sp, #8]
    Command.AutoRefreshNumber = 8;
 8008166:	f8cd 8010 	str.w	r8, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800816a:	f7fe f897 	bl	800629c <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 800816e:	4628      	mov	r0, r5
 8008170:	f7f8 f91c 	bl	80003ac <HAL_Delay>
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 8;
    Command.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008174:	eb0d 0108 	add.w	r1, sp, r8
 8008178:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800817c:	4620      	mov	r0, r4
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800817e:	e9cd 9702 	strd	r9, r7, [sp, #8]
    Command.ModeRegisterDefinition = 0;
 8008182:	e9cd 8604 	strd	r8, r6, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008186:	f7fe f889 	bl	800629c <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, SDRAM_REFRESH_COUNT);
 800818a:	f240 5169 	movw	r1, #1385	; 0x569
 800818e:	4620      	mov	r0, r4
 8008190:	f7fe f8a6 	bl	80062e0 <HAL_SDRAM_ProgramRefreshRate>
}
 8008194:	b007      	add	sp, #28
 8008196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800819a:	bf00      	nop
 800819c:	2000ddb4 	.word	0x2000ddb4

080081a0 <randomNumber>:
  DWT->CTRL = 0x40000001;

}


float randomNumber(void) {
 80081a0:	b500      	push	{lr}
 80081a2:	b083      	sub	sp, #12

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 80081a4:	4807      	ldr	r0, [pc, #28]	; (80081c4 <randomNumber+0x24>)
 80081a6:	a901      	add	r1, sp, #4
 80081a8:	f7fc fbec 	bl	8004984 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 80081ac:	eddd 7a01 	vldr	s15, [sp, #4]
 80081b0:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80081c8 <randomNumber+0x28>
 80081b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
	return num;
}
 80081b8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80081bc:	b003      	add	sp, #12
 80081be:	f85d fb04 	ldr.w	pc, [sp], #4
 80081c2:	bf00      	nop
 80081c4:	2001a900 	.word	0x2001a900
 80081c8:	2f80000d 	.word	0x2f80000d

080081cc <MPU_Conf>:

		SDWriteIndex++;
	}
}
void MPU_Conf(void)
{
 80081cc:	b510      	push	{r4, lr}
 80081ce:	b084      	sub	sp, #16
	  //now set up D3 domain RAM

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;

	 	  //D2 Domain�SRAM1
	 	  MPU_InitStruct.BaseAddress = 0x38000000;
 80081d0:	f04f 5460 	mov.w	r4, #939524096	; 0x38000000
	  HAL_MPU_Disable();
 80081d4:	f7f8 fdd6 	bl	8000d84 <HAL_MPU_Disable>
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80081d8:	2301      	movs	r3, #1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 80081da:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80081de:	4a0d      	ldr	r2, [pc, #52]	; (8008214 <MPU_Conf+0x48>)
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80081e0:	4668      	mov	r0, sp
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80081e2:	f8ad 3000 	strh.w	r3, [sp]
	  MPU_InitStruct.BaseAddress = 0x30000000;
 80081e6:	9101      	str	r1, [sp, #4]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80081e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80081ec:	f7f8 fdec 	bl	8000dc8 <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80081f0:	f240 1101 	movw	r1, #257	; 0x101


	 	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80081f4:	4a08      	ldr	r2, [pc, #32]	; (8008218 <MPU_Conf+0x4c>)


	 	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;


	 	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80081f6:	4668      	mov	r0, sp
	 	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80081f8:	4b08      	ldr	r3, [pc, #32]	; (800821c <MPU_Conf+0x50>)
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80081fa:	f8ad 1000 	strh.w	r1, [sp]
	 	  MPU_InitStruct.BaseAddress = 0x38000000;
 80081fe:	9401      	str	r4, [sp, #4]
	 	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8008200:	e9cd 2302 	strd	r2, r3, [sp, #8]
	 	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008204:	f7f8 fde0 	bl	8000dc8 <HAL_MPU_ConfigRegion>


	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8008208:	2004      	movs	r0, #4
 800820a:	f7f8 fdcb 	bl	8000da4 <HAL_MPU_Enable>
}
 800820e:	b004      	add	sp, #16
 8008210:	bd10      	pop	{r4, pc}
 8008212:	bf00      	nop
 8008214:	03010011 	.word	0x03010011
 8008218:	0301000f 	.word	0x0301000f
 800821c:	01010100 	.word	0x01010100

08008220 <main>:
{
 8008220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MPU_Conf();
 8008222:	f7ff ffd3 	bl	80081cc <MPU_Conf>
  __ASM volatile ("dsb 0xF":::"memory");
 8008226:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800822a:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800822e:	4a55      	ldr	r2, [pc, #340]	; (8008384 <main+0x164>)
 8008230:	2100      	movs	r1, #0
 8008232:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8008236:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800823a:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800823e:	6953      	ldr	r3, [r2, #20]
 8008240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008244:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008246:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800824a:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800824e:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8008252:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8008256:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800825a:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800825e:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8008262:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8008266:	07b7      	lsls	r7, r6, #30
 8008268:	015c      	lsls	r4, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800826a:	ea04 050c 	and.w	r5, r4, ip
 800826e:	4638      	mov	r0, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8008270:	4631      	mov	r1, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008272:	ea45 0300 	orr.w	r3, r5, r0
      } while (ways-- != 0U);
 8008276:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008278:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
 800827c:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8008280:	1c4b      	adds	r3, r1, #1
 8008282:	d1f6      	bne.n	8008272 <main+0x52>
 8008284:	3c20      	subs	r4, #32
    } while(sets-- != 0U);
 8008286:	f114 0f20 	cmn.w	r4, #32
 800828a:	d1ee      	bne.n	800826a <main+0x4a>
 800828c:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8008290:	6953      	ldr	r3, [r2, #20]
 8008292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008296:	6153      	str	r3, [r2, #20]
 8008298:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800829c:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80082a0:	f7f8 f840 	bl	8000324 <HAL_Init>
  SystemClock_Config();
 80082a4:	f7ff fe8c 	bl	8007fc0 <SystemClock_Config>
  MX_GPIO_Init();
 80082a8:	f7ff fd12 	bl	8007cd0 <MX_GPIO_Init>
  MX_DMA_Init();
 80082ac:	f7ff fc1a 	bl	8007ae4 <MX_DMA_Init>
  MX_FMC_Init();
 80082b0:	f7ff fc74 	bl	8007b9c <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 80082b4:	f000 fa1e 	bl	80086f4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80082b8:	f7ff fc4e 	bl	8007b58 <MX_FATFS_Init>
  MX_SAI1_Init();
 80082bc:	f000 f8ac 	bl	8008418 <MX_SAI1_Init>
  MX_RNG_Init();
 80082c0:	f000 f87c 	bl	80083bc <MX_RNG_Init>
  MX_I2C2_Init();
 80082c4:	f7ff fe12 	bl	8007eec <MX_I2C2_Init>
  MX_ADC1_Init();
 80082c8:	f7ff f842 	bl	8007350 <MX_ADC1_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80082cc:	2200      	movs	r2, #0
 80082ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80082d2:	482d      	ldr	r0, [pc, #180]	; (8008388 <main+0x168>)
 80082d4:	f7fa fa46 	bl	8002764 <HAL_GPIO_WritePin>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 80082d8:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 80082dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 80082e0:	eee1 3a10 	vmsr	fpscr, r3
 80082e4:	4829      	ldr	r0, [pc, #164]	; (800838c <main+0x16c>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80082e6:	2201      	movs	r2, #1
 80082e8:	2400      	movs	r4, #0
	  SPI_TX[i] = counter++;
 80082ea:	4d29      	ldr	r5, [pc, #164]	; (8008390 <main+0x170>)
 80082ec:	7803      	ldrb	r3, [r0, #0]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80082ee:	2140      	movs	r1, #64	; 0x40
 80082f0:	189e      	adds	r6, r3, r2
 80082f2:	f363 0407 	bfi	r4, r3, #0, #8
 80082f6:	f103 0710 	add.w	r7, r3, #16
 80082fa:	f366 240f 	bfi	r4, r6, #8, #8
 80082fe:	1c9e      	adds	r6, r3, #2
 8008300:	3303      	adds	r3, #3
 8008302:	7007      	strb	r7, [r0, #0]
 8008304:	f366 4417 	bfi	r4, r6, #16, #8
 8008308:	481f      	ldr	r0, [pc, #124]	; (8008388 <main+0x168>)
 800830a:	f363 641f 	bfi	r4, r3, #24, #8
 800830e:	f004 337f 	and.w	r3, r4, #2139062143	; 0x7f7f7f7f
 8008312:	f004 3680 	and.w	r6, r4, #2155905152	; 0x80808080
	  SPI_TX[i] = counter++;
 8008316:	602c      	str	r4, [r5, #0]
 8008318:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 800831c:	4073      	eors	r3, r6
 800831e:	f003 367f 	and.w	r6, r3, #2139062143	; 0x7f7f7f7f
 8008322:	f003 3480 	and.w	r4, r3, #2155905152	; 0x80808080
 8008326:	606b      	str	r3, [r5, #4]
 8008328:	f106 3304 	add.w	r3, r6, #67372036	; 0x4040404
 800832c:	4063      	eors	r3, r4
 800832e:	f003 367f 	and.w	r6, r3, #2139062143	; 0x7f7f7f7f
 8008332:	f003 3480 	and.w	r4, r3, #2155905152	; 0x80808080
 8008336:	60ab      	str	r3, [r5, #8]
 8008338:	f106 3304 	add.w	r3, r6, #67372036	; 0x4040404
 800833c:	4063      	eors	r3, r4
 800833e:	60eb      	str	r3, [r5, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8008340:	f7fa fa10 	bl	8002764 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008344:	200a      	movs	r0, #10
 8008346:	f7f8 f831 	bl	80003ac <HAL_Delay>
  SDRAM_Initialization_sequence();
 800834a:	f7ff fecd 	bl	80080e8 <SDRAM_Initialization_sequence>
  HAL_Delay(10);
 800834e:	200a      	movs	r0, #10
 8008350:	f7f8 f82c 	bl	80003ac <HAL_Delay>
     audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 8008354:	4a0f      	ldr	r2, [pc, #60]	; (8008394 <main+0x174>)
 8008356:	4910      	ldr	r1, [pc, #64]	; (8008398 <main+0x178>)
 8008358:	4810      	ldr	r0, [pc, #64]	; (800839c <main+0x17c>)
 800835a:	f7ff f8e9 	bl	8007530 <audioInit>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800835e:	4a10      	ldr	r2, [pc, #64]	; (80083a0 <main+0x180>)
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8008360:	4910      	ldr	r1, [pc, #64]	; (80083a4 <main+0x184>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8008362:	68d3      	ldr	r3, [r2, #12]
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8008364:	6809      	ldr	r1, [r1, #0]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8008366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800836a:	60d3      	str	r3, [r2, #12]
  if ((*(uint32_t*)0xE0001FB4) & 1)
 800836c:	07cb      	lsls	r3, r1, #31
 800836e:	d502      	bpl.n	8008376 <main+0x156>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
 8008370:	4b0d      	ldr	r3, [pc, #52]	; (80083a8 <main+0x188>)
 8008372:	4a0e      	ldr	r2, [pc, #56]	; (80083ac <main+0x18c>)
 8008374:	601a      	str	r2, [r3, #0]
  DWT->CYCCNT = 0;
 8008376:	4b0e      	ldr	r3, [pc, #56]	; (80083b0 <main+0x190>)
 8008378:	2100      	movs	r1, #0
  DWT->CTRL = 0x40000001;
 800837a:	4a0e      	ldr	r2, [pc, #56]	; (80083b4 <main+0x194>)
  DWT->CYCCNT = 0;
 800837c:	6059      	str	r1, [r3, #4]
  DWT->CTRL = 0x40000001;
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	e7fe      	b.n	8008380 <main+0x160>
 8008382:	bf00      	nop
 8008384:	e000ed00 	.word	0xe000ed00
 8008388:	58020800 	.word	0x58020800
 800838c:	2001a263 	.word	0x2001a263
 8008390:	30004400 	.word	0x30004400
 8008394:	2001a914 	.word	0x2001a914
 8008398:	2001aa9c 	.word	0x2001aa9c
 800839c:	2000dde8 	.word	0x2000dde8
 80083a0:	e000edf0 	.word	0xe000edf0
 80083a4:	e0001fb4 	.word	0xe0001fb4
 80083a8:	e0001fb0 	.word	0xe0001fb0
 80083ac:	c5acce55 	.word	0xc5acce55
 80083b0:	e0001000 	.word	0xe0001000
 80083b4:	40000001 	.word	0x40000001

080083b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80083b8:	e7fe      	b.n	80083b8 <Error_Handler>
 80083ba:	bf00      	nop

080083bc <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80083bc:	b508      	push	{r3, lr}

  hrng.Instance = RNG;
 80083be:	4b07      	ldr	r3, [pc, #28]	; (80083dc <MX_RNG_Init+0x20>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80083c0:	2100      	movs	r1, #0
  hrng.Instance = RNG;
 80083c2:	4a07      	ldr	r2, [pc, #28]	; (80083e0 <MX_RNG_Init+0x24>)
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80083c4:	4618      	mov	r0, r3
  hrng.Instance = RNG;
 80083c6:	e9c3 2100 	strd	r2, r1, [r3]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80083ca:	f7fc fa9f 	bl	800490c <HAL_RNG_Init>
 80083ce:	b900      	cbnz	r0, 80083d2 <MX_RNG_Init+0x16>
  {
    Error_Handler();
  }

}
 80083d0:	bd08      	pop	{r3, pc}
 80083d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80083d6:	f7ff bfef 	b.w	80083b8 <Error_Handler>
 80083da:	bf00      	nop
 80083dc:	2001a900 	.word	0x2001a900
 80083e0:	48021800 	.word	0x48021800

080083e4 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{

  if(rngHandle->Instance==RNG)
 80083e4:	6802      	ldr	r2, [r0, #0]
 80083e6:	4b0a      	ldr	r3, [pc, #40]	; (8008410 <HAL_RNG_MspInit+0x2c>)
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d000      	beq.n	80083ee <HAL_RNG_MspInit+0xa>
 80083ec:	4770      	bx	lr
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80083ee:	4b09      	ldr	r3, [pc, #36]	; (8008414 <HAL_RNG_MspInit+0x30>)
{
 80083f0:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 80083f2:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 80083f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083fa:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80083fe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008406:	9301      	str	r3, [sp, #4]
 8008408:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800840a:	b002      	add	sp, #8
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	48021800 	.word	0x48021800
 8008414:	58024400 	.word	0x58024400

08008418 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8008418:	b538      	push	{r3, r4, r5, lr}

  hsai_BlockA1.Instance = SAI1_Block_A;
 800841a:	481b      	ldr	r0, [pc, #108]	; (8008488 <MX_SAI1_Init+0x70>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800841c:	2500      	movs	r5, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
 800841e:	4c1b      	ldr	r4, [pc, #108]	; (800848c <MX_SAI1_Init+0x74>)
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8008420:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8008424:	2304      	movs	r3, #4
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8008426:	4a1a      	ldr	r2, [pc, #104]	; (8008490 <MX_SAI1_Init+0x78>)
  hsai_BlockA1.Instance = SAI1_Block_A;
 8008428:	6020      	str	r0, [r4, #0]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 800842a:	4620      	mov	r0, r4
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 800842c:	6161      	str	r1, [r4, #20]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 800842e:	4629      	mov	r1, r5
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8008430:	61e3      	str	r3, [r4, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8008432:	2302      	movs	r3, #2
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8008434:	6222      	str	r2, [r4, #32]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8008436:	2203      	movs	r2, #3
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8008438:	61a5      	str	r5, [r4, #24]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800843a:	60e5      	str	r5, [r4, #12]
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800843c:	6365      	str	r5, [r4, #52]	; 0x34
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800843e:	e9c4 5501 	strd	r5, r5, [r4, #4]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8008442:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8008446:	f7fc facd 	bl	80049e4 <HAL_SAI_InitProtocol>
 800844a:	b9d0      	cbnz	r0, 8008482 <MX_SAI1_Init+0x6a>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 800844c:	4c11      	ldr	r4, [pc, #68]	; (8008494 <MX_SAI1_Init+0x7c>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800844e:	2500      	movs	r5, #0
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8008450:	2303      	movs	r3, #3
  hsai_BlockB1.Instance = SAI1_Block_B;
 8008452:	4811      	ldr	r0, [pc, #68]	; (8008498 <MX_SAI1_Init+0x80>)
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8008454:	2201      	movs	r2, #1
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8008456:	2104      	movs	r1, #4
  hsai_BlockB1.Instance = SAI1_Block_B;
 8008458:	6020      	str	r0, [r4, #0]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 800845a:	4620      	mov	r0, r4
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800845c:	60a2      	str	r2, [r4, #8]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 800845e:	461a      	mov	r2, r3
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8008460:	61e1      	str	r1, [r4, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8008462:	4629      	mov	r1, r5
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8008464:	6063      	str	r3, [r4, #4]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8008466:	2302      	movs	r3, #2
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8008468:	6165      	str	r5, [r4, #20]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800846a:	60e5      	str	r5, [r4, #12]
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800846c:	6365      	str	r5, [r4, #52]	; 0x34
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800846e:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8008472:	f7fc fab7 	bl	80049e4 <HAL_SAI_InitProtocol>
 8008476:	b900      	cbnz	r0, 800847a <MX_SAI1_Init+0x62>
  {
    Error_Handler();
  }

}
 8008478:	bd38      	pop	{r3, r4, r5, pc}
 800847a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800847e:	f7ff bf9b 	b.w	80083b8 <Error_Handler>
    Error_Handler();
 8008482:	f7ff ff99 	bl	80083b8 <Error_Handler>
 8008486:	e7e1      	b.n	800844c <MX_SAI1_Init+0x34>
 8008488:	40015804 	.word	0x40015804
 800848c:	2001aa9c 	.word	0x2001aa9c
 8008490:	0002ee00 	.word	0x0002ee00
 8008494:	2001a914 	.word	0x2001a914
 8008498:	40015824 	.word	0x40015824

0800849c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800849c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800849e:	4a50      	ldr	r2, [pc, #320]	; (80085e0 <HAL_SAI_MspInit+0x144>)
{
 80084a0:	b089      	sub	sp, #36	; 0x24
    if(hsai->Instance==SAI1_Block_A)
 80084a2:	6803      	ldr	r3, [r0, #0]
{
 80084a4:	4605      	mov	r5, r0
    if(hsai->Instance==SAI1_Block_A)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d03f      	beq.n	800852a <HAL_SAI_MspInit+0x8e>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
    }
    if(hsai->Instance==SAI1_Block_B)
 80084aa:	4a4e      	ldr	r2, [pc, #312]	; (80085e4 <HAL_SAI_MspInit+0x148>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d001      	beq.n	80084b4 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
    }
}
 80084b0:	b009      	add	sp, #36	; 0x24
 80084b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (SAI1_client == 0)
 80084b4:	4b4c      	ldr	r3, [pc, #304]	; (80085e8 <HAL_SAI_MspInit+0x14c>)
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	2a00      	cmp	r2, #0
 80084ba:	d06f      	beq.n	800859c <HAL_SAI_MspInit+0x100>
    SAI1_client ++;
 80084bc:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80084be:	2108      	movs	r1, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084c0:	2002      	movs	r0, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084c2:	2600      	movs	r6, #0
    SAI1_client ++;
 80084c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084c6:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80084c8:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80084ca:	9103      	str	r1, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084cc:	9004      	str	r0, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80084ce:	a903      	add	r1, sp, #12
 80084d0:	4846      	ldr	r0, [pc, #280]	; (80085ec <HAL_SAI_MspInit+0x150>)
    hdma_sai1_b.Instance = DMA1_Stream2;
 80084d2:	4c47      	ldr	r4, [pc, #284]	; (80085f0 <HAL_SAI_MspInit+0x154>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80084d4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084d6:	e9cd 6705 	strd	r6, r7, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80084da:	f7fa f819 	bl	8002510 <HAL_GPIO_Init>
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 80084de:	2358      	movs	r3, #88	; 0x58
    hdma_sai1_b.Instance = DMA1_Stream2;
 80084e0:	4a44      	ldr	r2, [pc, #272]	; (80085f4 <HAL_SAI_MspInit+0x158>)
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80084e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80084e6:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80084ea:	62a7      	str	r7, [r4, #40]	; 0x28
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80084ec:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80084f0:	f44f 4780 	mov.w	r7, #16384	; 0x4000
    hdma_sai1_b.Instance = DMA1_Stream2;
 80084f4:	6022      	str	r2, [r4, #0]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80084f6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 80084fa:	6063      	str	r3, [r4, #4]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80084fc:	2304      	movs	r3, #4
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80084fe:	60a6      	str	r6, [r4, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8008500:	60e6      	str	r6, [r4, #12]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008502:	e9c4 c004 	strd	ip, r0, [r4, #16]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8008506:	4620      	mov	r0, r4
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8008508:	e9c4 660b 	strd	r6, r6, [r4, #44]	; 0x2c
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800850c:	e9c4 7106 	strd	r7, r1, [r4, #24]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008510:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8008514:	f7f8 fcfe 	bl	8000f14 <HAL_DMA_Init>
 8008518:	2800      	cmp	r0, #0
 800851a:	d15b      	bne.n	80085d4 <HAL_SAI_MspInit+0x138>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800851c:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
 8008520:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8008522:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
}
 8008526:	b009      	add	sp, #36	; 0x24
 8008528:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SAI1_client == 0)
 800852a:	4b2f      	ldr	r3, [pc, #188]	; (80085e8 <HAL_SAI_MspInit+0x14c>)
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	2a00      	cmp	r2, #0
 8008530:	d042      	beq.n	80085b8 <HAL_SAI_MspInit+0x11c>
    SAI1_client ++;
 8008532:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8008534:	2174      	movs	r1, #116	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008536:	2002      	movs	r0, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008538:	2600      	movs	r6, #0
    SAI1_client ++;
 800853a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800853c:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800853e:	2306      	movs	r3, #6
    hdma_sai1_a.Instance = DMA1_Stream1;
 8008540:	4c2d      	ldr	r4, [pc, #180]	; (80085f8 <HAL_SAI_MspInit+0x15c>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8008542:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008544:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008546:	9004      	str	r0, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008548:	4828      	ldr	r0, [pc, #160]	; (80085ec <HAL_SAI_MspInit+0x150>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800854a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800854c:	e9cd 6705 	strd	r6, r7, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008550:	f7f9 ffde 	bl	8002510 <HAL_GPIO_Init>
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8008554:	2257      	movs	r2, #87	; 0x57
    hdma_sai1_a.Instance = DMA1_Stream1;
 8008556:	4929      	ldr	r1, [pc, #164]	; (80085fc <HAL_SAI_MspInit+0x160>)
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008558:	2340      	movs	r3, #64	; 0x40
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800855a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800855e:	62a7      	str	r7, [r4, #40]	; 0x28
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8008560:	f44f 6780 	mov.w	r7, #1024	; 0x400
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8008564:	60e6      	str	r6, [r4, #12]
    hdma_sai1_a.Instance = DMA1_Stream1;
 8008566:	6021      	str	r1, [r4, #0]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8008568:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800856c:	6062      	str	r2, [r4, #4]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800856e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008572:	60a3      	str	r3, [r4, #8]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008574:	2304      	movs	r3, #4
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8008576:	e9c4 660b 	strd	r6, r6, [r4, #44]	; 0x2c
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800857a:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800857e:	e9c4 7004 	strd	r7, r0, [r4, #16]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8008582:	4620      	mov	r0, r4
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8008584:	e9c4 6106 	strd	r6, r1, [r4, #24]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008588:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800858c:	f7f8 fcc2 	bl	8000f14 <HAL_DMA_Init>
 8008590:	bb18      	cbnz	r0, 80085da <HAL_SAI_MspInit+0x13e>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8008592:	63a5      	str	r5, [r4, #56]	; 0x38
 8008594:	682b      	ldr	r3, [r5, #0]
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8008596:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
 800859a:	e786      	b.n	80084aa <HAL_SAI_MspInit+0xe>
       __HAL_RCC_SAI1_CLK_ENABLE();
 800859c:	4918      	ldr	r1, [pc, #96]	; (8008600 <HAL_SAI_MspInit+0x164>)
 800859e:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 80085a2:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 80085a6:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 80085aa:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 80085ae:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80085b2:	9102      	str	r1, [sp, #8]
 80085b4:	9902      	ldr	r1, [sp, #8]
 80085b6:	e781      	b.n	80084bc <HAL_SAI_MspInit+0x20>
       __HAL_RCC_SAI1_CLK_ENABLE();
 80085b8:	4911      	ldr	r1, [pc, #68]	; (8008600 <HAL_SAI_MspInit+0x164>)
 80085ba:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 80085be:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 80085c2:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 80085c6:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 80085ca:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80085ce:	9101      	str	r1, [sp, #4]
 80085d0:	9901      	ldr	r1, [sp, #4]
 80085d2:	e7ae      	b.n	8008532 <HAL_SAI_MspInit+0x96>
      Error_Handler();
 80085d4:	f7ff fef0 	bl	80083b8 <Error_Handler>
 80085d8:	e7a0      	b.n	800851c <HAL_SAI_MspInit+0x80>
      Error_Handler();
 80085da:	f7ff feed 	bl	80083b8 <Error_Handler>
 80085de:	e7d8      	b.n	8008592 <HAL_SAI_MspInit+0xf6>
 80085e0:	40015804 	.word	0x40015804
 80085e4:	40015824 	.word	0x40015824
 80085e8:	20000144 	.word	0x20000144
 80085ec:	58021000 	.word	0x58021000
 80085f0:	2001aa24 	.word	0x2001aa24
 80085f4:	40020040 	.word	0x40020040
 80085f8:	2001a9ac 	.word	0x2001a9ac
 80085fc:	40020028 	.word	0x40020028
 8008600:	58024400 	.word	0x58024400

08008604 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008604:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;  
 8008606:	4c0a      	ldr	r4, [pc, #40]	; (8008630 <SD_initialize+0x2c>)
 8008608:	2501      	movs	r5, #1
 800860a:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800860c:	f7ff f9c0 	bl	8007990 <BSP_SD_Init>
 8008610:	b108      	cbz	r0, 8008616 <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008612:	7820      	ldrb	r0, [r4, #0]
}
 8008614:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 8008616:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8008618:	f7ff f98e 	bl	8007938 <BSP_SD_GetCardState>
 800861c:	b918      	cbnz	r0, 8008626 <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 800861e:	7823      	ldrb	r3, [r4, #0]
 8008620:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008624:	7023      	strb	r3, [r4, #0]
  return Stat;
 8008626:	7823      	ldrb	r3, [r4, #0]
 8008628:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 800862a:	7023      	strb	r3, [r4, #0]
  return Stat;
 800862c:	7820      	ldrb	r0, [r4, #0]
}
 800862e:	bd38      	pop	{r3, r4, r5, pc}
 8008630:	20000012 	.word	0x20000012

08008634 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008634:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8008636:	2301      	movs	r3, #1
 8008638:	4c05      	ldr	r4, [pc, #20]	; (8008650 <SD_status+0x1c>)
 800863a:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800863c:	f7ff f97c 	bl	8007938 <BSP_SD_GetCardState>
 8008640:	b918      	cbnz	r0, 800864a <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 8008642:	7823      	ldrb	r3, [r4, #0]
 8008644:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008648:	7023      	strb	r3, [r4, #0]
  return Stat;
 800864a:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 800864c:	bd10      	pop	{r4, pc}
 800864e:	bf00      	nop
 8008650:	20000012 	.word	0x20000012

08008654 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008654:	b508      	push	{r3, lr}
 8008656:	4608      	mov	r0, r1
 8008658:	4611      	mov	r1, r2
 800865a:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800865c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008660:	f7ff f946 	bl	80078f0 <BSP_SD_ReadBlocks>
 8008664:	b920      	cbnz	r0, 8008670 <SD_read+0x1c>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008666:	f7ff f967 	bl	8007938 <BSP_SD_GetCardState>
 800866a:	2800      	cmp	r0, #0
 800866c:	d1fb      	bne.n	8008666 <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 800866e:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8008670:	2001      	movs	r0, #1
}
 8008672:	bd08      	pop	{r3, pc}

08008674 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008674:	4b16      	ldr	r3, [pc, #88]	; (80086d0 <SD_ioctl+0x5c>)
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	07db      	lsls	r3, r3, #31
 800867a:	d408      	bmi.n	800868e <SD_ioctl+0x1a>
{
 800867c:	b510      	push	{r4, lr}
 800867e:	4614      	mov	r4, r2
 8008680:	b08a      	sub	sp, #40	; 0x28

  switch (cmd)
 8008682:	2903      	cmp	r1, #3
 8008684:	d821      	bhi.n	80086ca <SD_ioctl+0x56>
 8008686:	e8df f001 	tbb	[pc, r1]
 800868a:	0704      	.short	0x0704
 800868c:	170f      	.short	0x170f
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800868e:	2003      	movs	r0, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8008690:	4770      	bx	lr
    res = RES_OK;
 8008692:	2000      	movs	r0, #0
}
 8008694:	b00a      	add	sp, #40	; 0x28
 8008696:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8008698:	a801      	add	r0, sp, #4
 800869a:	f7ff f957 	bl	800794c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800869e:	9b07      	ldr	r3, [sp, #28]
    res = RES_OK;
 80086a0:	2000      	movs	r0, #0
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80086a2:	6023      	str	r3, [r4, #0]
}
 80086a4:	b00a      	add	sp, #40	; 0x28
 80086a6:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 80086a8:	a801      	add	r0, sp, #4
 80086aa:	f7ff f94f 	bl	800794c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80086ae:	9b08      	ldr	r3, [sp, #32]
    res = RES_OK;
 80086b0:	2000      	movs	r0, #0
    *(WORD*)buff = CardInfo.LogBlockSize;
 80086b2:	8023      	strh	r3, [r4, #0]
}
 80086b4:	b00a      	add	sp, #40	; 0x28
 80086b6:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 80086b8:	a801      	add	r0, sp, #4
 80086ba:	f7ff f947 	bl	800794c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80086be:	9b08      	ldr	r3, [sp, #32]
 80086c0:	2000      	movs	r0, #0
 80086c2:	0a5b      	lsrs	r3, r3, #9
 80086c4:	6023      	str	r3, [r4, #0]
}
 80086c6:	b00a      	add	sp, #40	; 0x28
 80086c8:	bd10      	pop	{r4, pc}
    res = RES_PARERR;
 80086ca:	2004      	movs	r0, #4
}
 80086cc:	b00a      	add	sp, #40	; 0x28
 80086ce:	bd10      	pop	{r4, pc}
 80086d0:	20000012 	.word	0x20000012

080086d4 <SD_write>:
{
 80086d4:	b508      	push	{r3, lr}
 80086d6:	4608      	mov	r0, r1
 80086d8:	4611      	mov	r1, r2
 80086da:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80086dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086e0:	f7ff f918 	bl	8007914 <BSP_SD_WriteBlocks>
 80086e4:	b920      	cbnz	r0, 80086f0 <SD_write+0x1c>
    while(BSP_SD_GetCardState()!= MSD_OK)
 80086e6:	f7ff f927 	bl	8007938 <BSP_SD_GetCardState>
 80086ea:	2800      	cmp	r0, #0
 80086ec:	d1fb      	bne.n	80086e6 <SD_write+0x12>
}
 80086ee:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 80086f0:	2001      	movs	r0, #1
}
 80086f2:	bd08      	pop	{r3, pc}

080086f4 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80086f4:	b430      	push	{r4, r5}

  hsd1.Instance = SDMMC1;
 80086f6:	4b08      	ldr	r3, [pc, #32]	; (8008718 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80086f8:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  hsd1.Instance = SDMMC1;
 80086fc:	4d07      	ldr	r5, [pc, #28]	; (800871c <MX_SDMMC1_SD_Init+0x28>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80086fe:	2200      	movs	r2, #0
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 16;
 8008700:	2010      	movs	r0, #16
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8008702:	2101      	movs	r1, #1
  hsd1.Instance = SDMMC1;
 8008704:	601d      	str	r5, [r3, #0]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8008706:	60dc      	str	r4, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008708:	611a      	str	r2, [r3, #16]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 800870a:	e9c3 0105 	strd	r0, r1, [r3, #20]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800870e:	e9c3 2201 	strd	r2, r2, [r3, #4]

}
 8008712:	bc30      	pop	{r4, r5}
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	2001ab34 	.word	0x2001ab34
 800871c:	52007000 	.word	0x52007000

08008720 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8008720:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
 8008722:	4b2b      	ldr	r3, [pc, #172]	; (80087d0 <HAL_SD_MspInit+0xb0>)
{
 8008724:	b089      	sub	sp, #36	; 0x24
  if(sdHandle->Instance==SDMMC1)
 8008726:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008728:	2400      	movs	r4, #0
  if(sdHandle->Instance==SDMMC1)
 800872a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800872c:	9407      	str	r4, [sp, #28]
 800872e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8008732:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(sdHandle->Instance==SDMMC1)
 8008736:	d001      	beq.n	800873c <HAL_SD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8008738:	b009      	add	sp, #36	; 0x24
 800873a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800873c:	4b25      	ldr	r3, [pc, #148]	; (80087d4 <HAL_SD_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800873e:	260c      	movs	r6, #12
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8008740:	f44f 50f8 	mov.w	r0, #7936	; 0x1f00
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008744:	2501      	movs	r5, #1
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8008746:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800874a:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800874c:	eb0d 0106 	add.w	r1, sp, r6
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8008750:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008754:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8008758:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800875c:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8008760:	9200      	str	r2, [sp, #0]
 8008762:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008764:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008768:	f042 0204 	orr.w	r2, r2, #4
 800876c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008770:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008774:	f002 0204 	and.w	r2, r2, #4
 8008778:	9201      	str	r2, [sp, #4]
 800877a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800877c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008780:	f042 0208 	orr.w	r2, r2, #8
 8008784:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800878c:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800878e:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008792:	4811      	ldr	r0, [pc, #68]	; (80087d8 <HAL_SD_MspInit+0xb8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008794:	9704      	str	r7, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008796:	9302      	str	r3, [sp, #8]
 8008798:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800879a:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800879c:	e9cd 5505 	strd	r5, r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80087a0:	f7f9 feb6 	bl	8002510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80087a4:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80087a6:	eb0d 0106 	add.w	r1, sp, r6
 80087aa:	480c      	ldr	r0, [pc, #48]	; (80087dc <HAL_SD_MspInit+0xbc>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80087ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80087ae:	e9cd 7504 	strd	r7, r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80087b2:	e9cd 5606 	strd	r5, r6, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80087b6:	f7f9 feab 	bl	8002510 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 7, 0);
 80087ba:	4622      	mov	r2, r4
 80087bc:	2107      	movs	r1, #7
 80087be:	2031      	movs	r0, #49	; 0x31
 80087c0:	f7f8 fa84 	bl	8000ccc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80087c4:	2031      	movs	r0, #49	; 0x31
 80087c6:	f7f8 fab7 	bl	8000d38 <HAL_NVIC_EnableIRQ>
}
 80087ca:	b009      	add	sp, #36	; 0x24
 80087cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087ce:	bf00      	nop
 80087d0:	52007000 	.word	0x52007000
 80087d4:	58024400 	.word	0x58024400
 80087d8:	58020800 	.word	0x58020800
 80087dc:	58020c00 	.word	0x58020c00

080087e0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087e0:	4b07      	ldr	r3, [pc, #28]	; (8008800 <HAL_MspInit+0x20>)
{
 80087e2:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087e4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80087e8:	f042 0202 	orr.w	r2, r2, #2
 80087ec:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80087f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80087f4:	f003 0302 	and.w	r3, r3, #2
 80087f8:	9301      	str	r3, [sp, #4]
 80087fa:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80087fc:	b002      	add	sp, #8
 80087fe:	4770      	bx	lr
 8008800:	58024400 	.word	0x58024400

08008804 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop

08008808 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008808:	e7fe      	b.n	8008808 <HardFault_Handler>
 800880a:	bf00      	nop

0800880c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800880c:	e7fe      	b.n	800880c <MemManage_Handler>
 800880e:	bf00      	nop

08008810 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008810:	e7fe      	b.n	8008810 <BusFault_Handler>
 8008812:	bf00      	nop

08008814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008814:	e7fe      	b.n	8008814 <UsageFault_Handler>
 8008816:	bf00      	nop

08008818 <SVC_Handler>:
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop

0800881c <DebugMon_Handler>:
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop

08008820 <PendSV_Handler>:
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop

08008824 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008824:	f7f7 bdb0 	b.w	8000388 <HAL_IncTick>

08008828 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008828:	4801      	ldr	r0, [pc, #4]	; (8008830 <DMA1_Stream0_IRQHandler+0x8>)
 800882a:	f7f9 ba51 	b.w	8001cd0 <HAL_DMA_IRQHandler>
 800882e:	bf00      	nop
 8008830:	200001b0 	.word	0x200001b0

08008834 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8008834:	4801      	ldr	r0, [pc, #4]	; (800883c <DMA1_Stream1_IRQHandler+0x8>)
 8008836:	f7f9 ba4b 	b.w	8001cd0 <HAL_DMA_IRQHandler>
 800883a:	bf00      	nop
 800883c:	2001a9ac 	.word	0x2001a9ac

08008840 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8008840:	4801      	ldr	r0, [pc, #4]	; (8008848 <DMA1_Stream2_IRQHandler+0x8>)
 8008842:	f7f9 ba45 	b.w	8001cd0 <HAL_DMA_IRQHandler>
 8008846:	bf00      	nop
 8008848:	2001aa24 	.word	0x2001aa24

0800884c <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800884c:	4801      	ldr	r0, [pc, #4]	; (8008854 <DMA1_Stream3_IRQHandler+0x8>)
 800884e:	f7f9 ba3f 	b.w	8001cd0 <HAL_DMA_IRQHandler>
 8008852:	bf00      	nop
 8008854:	2001ac3c 	.word	0x2001ac3c

08008858 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8008858:	4801      	ldr	r0, [pc, #4]	; (8008860 <DMA1_Stream4_IRQHandler+0x8>)
 800885a:	f7f9 ba39 	b.w	8001cd0 <HAL_DMA_IRQHandler>
 800885e:	bf00      	nop
 8008860:	2001acb4 	.word	0x2001acb4

08008864 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8008864:	4801      	ldr	r0, [pc, #4]	; (800886c <SPI2_IRQHandler+0x8>)
 8008866:	f7fd bdc1 	b.w	80063ec <HAL_SPI_IRQHandler>
 800886a:	bf00      	nop
 800886c:	2001abb4 	.word	0x2001abb4

08008870 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8008870:	4801      	ldr	r0, [pc, #4]	; (8008878 <SDMMC1_IRQHandler+0x8>)
 8008872:	f7fd bba5 	b.w	8005fc0 <HAL_SD_IRQHandler>
 8008876:	bf00      	nop
 8008878:	2001ab34 	.word	0x2001ab34

0800887c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800887c:	b430      	push	{r4, r5}
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800887e:	4c19      	ldr	r4, [pc, #100]	; (80088e4 <SystemInit+0x68>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008880:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 8008882:	4b19      	ldr	r3, [pc, #100]	; (80088e8 <SystemInit+0x6c>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008884:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008888:	4818      	ldr	r0, [pc, #96]	; (80088ec <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800888a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800888e:	4d18      	ldr	r5, [pc, #96]	; (80088f0 <SystemInit+0x74>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008890:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 8008894:	681c      	ldr	r4, [r3, #0]
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8008896:	4917      	ldr	r1, [pc, #92]	; (80088f4 <SystemInit+0x78>)
  RCC->CR |= RCC_CR_HSION;
 8008898:	f044 0401 	orr.w	r4, r4, #1
 800889c:	601c      	str	r4, [r3, #0]
  RCC->CFGR = 0x00000000;
 800889e:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80088a0:	681c      	ldr	r4, [r3, #0]
 80088a2:	4020      	ands	r0, r4
 80088a4:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 80088a6:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80088a8:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80088aa:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 80088ac:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 80088ae:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 80088b0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 80088b2:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 80088b4:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 80088b6:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 80088b8:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 80088ba:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 80088bc:	6818      	ldr	r0, [r3, #0]
 80088be:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 80088c2:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 80088c4:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80088c6:	682b      	ldr	r3, [r5, #0]
 80088c8:	4019      	ands	r1, r3
 80088ca:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80088ce:	d202      	bcs.n	80088d6 <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80088d0:	4b09      	ldr	r3, [pc, #36]	; (80088f8 <SystemInit+0x7c>)
 80088d2:	2201      	movs	r2, #1
 80088d4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80088d6:	4b03      	ldr	r3, [pc, #12]	; (80088e4 <SystemInit+0x68>)
 80088d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80088dc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80088de:	bc30      	pop	{r4, r5}
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	e000ed00 	.word	0xe000ed00
 80088e8:	58024400 	.word	0x58024400
 80088ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80088f0:	5c001000 	.word	0x5c001000
 80088f4:	ffff0000 	.word	0xffff0000
 80088f8:	51008108 	.word	0x51008108

080088fc <tOversampler_init>:
    tOversampler_initToPool(osr, ratio, extraQuality, &leaf.mempool);
}

void tOversampler_initToPool (tOversampler* const osr, int ratio, oBool extraQuality, tMempool* const mp)
{
    _tMempool* m = *mp;
 80088fc:	4b25      	ldr	r3, [pc, #148]	; (8008994 <tOversampler_init+0x98>)
{
 80088fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _tMempool* m = *mp;
 8008902:	699e      	ldr	r6, [r3, #24]
{
 8008904:	460d      	mov	r5, r1
 8008906:	4690      	mov	r8, r2
 8008908:	4607      	mov	r7, r0
    _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
 800890a:	4631      	mov	r1, r6
 800890c:	201c      	movs	r0, #28
 800890e:	f000 fba1 	bl	8009054 <mpool_alloc>
    os->mempool = m;
    
    uint8_t offset = 0;
    if (extraQuality) offset = 6;
 8008912:	f1b8 0f00 	cmp.w	r8, #0
    if (ratio == 2 || ratio == 4  ||
 8008916:	f1a5 0102 	sub.w	r1, r5, #2
    _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
 800891a:	6038      	str	r0, [r7, #0]
    if (extraQuality) offset = 6;
 800891c:	bf14      	ite	ne
 800891e:	2706      	movne	r7, #6
 8008920:	2700      	moveq	r7, #0
    if (ratio == 2 || ratio == 4  ||
 8008922:	291e      	cmp	r1, #30
    _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
 8008924:	4604      	mov	r4, r0
    os->mempool = m;
 8008926:	6006      	str	r6, [r0, #0]
    if (ratio == 2 || ratio == 4  ||
 8008928:	d92d      	bls.n	8008986 <tOversampler_init+0x8a>
        ratio == 8 || ratio == 16 ||
        ratio == 32 || ratio == 64) {
 800892a:	2d40      	cmp	r5, #64	; 0x40
 800892c:	d129      	bne.n	8008982 <tOversampler_init+0x86>
        os->ratio = ratio;
        int idx = (int)(log2f(os->ratio))-1+offset;
 800892e:	ee07 5a90 	vmov	s15, r5
        os->ratio = ratio;
 8008932:	6065      	str	r5, [r4, #4]
        int idx = (int)(log2f(os->ratio))-1+offset;
 8008934:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8008938:	f000 fdde 	bl	80094f8 <log2f>
 800893c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 8008940:	4a15      	ldr	r2, [pc, #84]	; (8008998 <tOversampler_init+0x9c>)
        os->phaseLength = os->numTaps / os->ratio;
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8008942:	4631      	mov	r1, r6
        int idx = (int)(log2f(os->ratio))-1+offset;
 8008944:	ee10 3a10 	vmov	r3, s0
 8008948:	3b01      	subs	r3, #1
 800894a:	443b      	add	r3, r7
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
 800894c:	4f13      	ldr	r7, [pc, #76]	; (800899c <tOversampler_init+0xa0>)
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 800894e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008952:	edd2 7a00 	vldr	s15, [r2]
 8008956:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800895a:	ee17 0a90 	vmov	r0, s15
 800895e:	edc4 7a05 	vstr	s15, [r4, #20]
        os->phaseLength = os->numTaps / os->ratio;
 8008962:	fb90 f5f5 	sdiv	r5, r0, r5
 8008966:	61a5      	str	r5, [r4, #24]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8008968:	00c0      	lsls	r0, r0, #3
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
 800896a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800896e:	60a3      	str	r3, [r4, #8]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8008970:	f000 fb70 	bl	8009054 <mpool_alloc>
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8008974:	6963      	ldr	r3, [r4, #20]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8008976:	60e0      	str	r0, [r4, #12]
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8008978:	4631      	mov	r1, r6
 800897a:	00d8      	lsls	r0, r3, #3
 800897c:	f000 fb6a 	bl	8009054 <mpool_alloc>
 8008980:	6120      	str	r0, [r4, #16]
}
 8008982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (ratio == 2 || ratio == 4  ||
 8008986:	4a06      	ldr	r2, [pc, #24]	; (80089a0 <tOversampler_init+0xa4>)
 8008988:	40ca      	lsrs	r2, r1
 800898a:	07d3      	lsls	r3, r2, #31
 800898c:	d4cf      	bmi.n	800892e <tOversampler_init+0x32>
}
 800898e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008992:	bf00      	nop
 8008994:	2001ad2c 	.word	0x2001ad2c
 8008998:	0800e10c 	.word	0x0800e10c
 800899c:	2000001c 	.word	0x2000001c
 80089a0:	40004045 	.word	0x40004045

080089a4 <tOversampler_upsample>:
    return tOversampler_downsample(osr, oversample);
}

// From CMSIS DSP Library
void tOversampler_upsample(tOversampler* const osr, float input, float* output)
{
 80089a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _tOversampler* os = *osr;
 80089a8:	f8d0 c000 	ldr.w	ip, [r0]
    
    float *pState = os->upState;                 /* State pointer */
 80089ac:	f8dc 700c 	ldr.w	r7, [ip, #12]
    float *pStateCur;
    float *ptr1;                               /* Temporary pointer for state buffer */
    float *ptr2;                               /* Temporary pointer for coefficient buffer */
    float sum0;                                /* Accumulators */
    uint32_t i, tapCnt;                    /* Loop counters */
    uint32_t phaseLen = os->phaseLength;            /* Length of each polyphase filter component */
 80089b0:	f8dc 5018 	ldr.w	r5, [ip, #24]
    float *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
 80089b4:	f8dc e008 	ldr.w	lr, [ip, #8]
    /* os->pState buffer contains previous frame (phaseLen - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->upState + (phaseLen - 1U);
    
    /* Copy new input sample into the state buffer */
    *pStateCur = input;
 80089b8:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 80089bc:	ed03 0a01 	vstr	s0, [r3, #-4]
    
    /* Address modifier index of coefficient buffer */
    j = 1U;
    
    /* Loop over the Interpolation factor. */
    i = os->ratio;
 80089c0:	f8dc 4004 	ldr.w	r4, [ip, #4]
    
    while (i > 0U)
 80089c4:	b324      	cbz	r4, 8008a10 <tOversampler_upsample+0x6c>
 80089c6:	f104 0801 	add.w	r8, r4, #1
    j = 1U;
 80089ca:	2601      	movs	r6, #1
         Repeat until we've computed numTaps-(4*os->L) coefficients. */
        
        /* Initialize tapCnt with number of samples */
        tapCnt = phaseLen;
        
        while (tapCnt > 0U)
 80089cc:	eddf 5a19 	vldr	s11, [pc, #100]	; 8008a34 <tOversampler_upsample+0x90>
        ptr2 = pCoeffs + (os->ratio - j);
 80089d0:	1ba3      	subs	r3, r4, r6
 80089d2:	ee07 4a90 	vmov	s15, r4
 80089d6:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 80089da:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
        while (tapCnt > 0U)
 80089de:	b32d      	cbz	r5, 8008a2c <tOversampler_upsample+0x88>
            sum0 += *ptr1++ * *ptr2;
            
            /* Upsampling is done by stuffing L-1 zeros between each sample.
             * So instead of multiplying zeros with coefficients,
             * Increment the coefficient pointer by interpolation factor times. */
            ptr2 += os->ratio;
 80089e0:	00a4      	lsls	r4, r4, #2
 80089e2:	462a      	mov	r2, r5
        ptr1 = pState;
 80089e4:	4638      	mov	r0, r7
        sum0 = 0.0f;
 80089e6:	eddf 7a13 	vldr	s15, [pc, #76]	; 8008a34 <tOversampler_upsample+0x90>
            sum0 += *ptr1++ * *ptr2;
 80089ea:	ed93 7a00 	vldr	s14, [r3]
        while (tapCnt > 0U)
 80089ee:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
 80089f0:	ecf0 6a01 	vldmia	r0!, {s13}
            ptr2 += os->ratio;
 80089f4:	4423      	add	r3, r4
            sum0 += *ptr1++ * *ptr2;
 80089f6:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
 80089fa:	d1f6      	bne.n	80089ea <tOversampler_upsample+0x46>
 80089fc:	ee67 7a86 	vmul.f32	s15, s15, s12
        
        /* The result is in the accumulator, store in the destination buffer. */
        *output++ = sum0 * os->ratio;
        
        /* Increment the address modifier index of coefficient buffer */
        j++;
 8008a00:	3601      	adds	r6, #1
        *output++ = sum0 * os->ratio;
 8008a02:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
 8008a06:	4546      	cmp	r6, r8
 8008a08:	d002      	beq.n	8008a10 <tOversampler_upsample+0x6c>
 8008a0a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8008a0e:	e7df      	b.n	80089d0 <tOversampler_upsample+0x2c>
    
    /* Initialize tapCnt with number of samples */
    tapCnt = (phaseLen - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
 8008a10:	1e6b      	subs	r3, r5, #1
    pState = pState + 1;
 8008a12:	f107 0204 	add.w	r2, r7, #4
    pStateCur = os->upState;
 8008a16:	f8dc 100c 	ldr.w	r1, [ip, #12]
    while (tapCnt > 0U)
 8008a1a:	d005      	beq.n	8008a28 <tOversampler_upsample+0x84>
    {
        *pStateCur++ = *pState++;
 8008a1c:	f852 0b04 	ldr.w	r0, [r2], #4
    while (tapCnt > 0U)
 8008a20:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
 8008a22:	f841 0b04 	str.w	r0, [r1], #4
    while (tapCnt > 0U)
 8008a26:	d1f9      	bne.n	8008a1c <tOversampler_upsample+0x78>
        
        /* Decrement loop counter */
        tapCnt--;
    }
}
 8008a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (tapCnt > 0U)
 8008a2c:	eef0 7a65 	vmov.f32	s15, s11
 8008a30:	e7e6      	b.n	8008a00 <tOversampler_upsample+0x5c>
 8008a32:	bf00      	nop
 8008a34:	00000000 	.word	0x00000000

08008a38 <tOversampler_downsample>:

// From CMSIS DSP Library
float tOversampler_downsample(tOversampler *const osr, float* input)
{
 8008a38:	b4f0      	push	{r4, r5, r6, r7}
    _tOversampler* os = *osr;
 8008a3a:	6806      	ldr	r6, [r0, #0]
    uint32_t i, tapCnt;
    float output;
    
    /* os->pState buffer contains previous frame (numTaps - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->downState + (numTaps - 1U);
 8008a3c:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
    float *pState = os->downState;                 /* State pointer */
 8008a40:	e9d6 0704 	ldrd	r0, r7, [r6, #16]
    
    /* Copy decimation factor number of new input samples into the state buffer */
    i = os->ratio;
 8008a44:	e9d6 3501 	ldrd	r3, r5, [r6, #4]
    pStateCur = os->downState + (numTaps - 1U);
 8008a48:	443a      	add	r2, r7
 8008a4a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    
    do
    {
        *pStateCur++ = *input++;
 8008a4e:	f851 4b04 	ldr.w	r4, [r1], #4
        
    } while (--i);
 8008a52:	3b01      	subs	r3, #1
        *pStateCur++ = *input++;
 8008a54:	f842 4b04 	str.w	r4, [r2], #4
    } while (--i);
 8008a58:	d1f9      	bne.n	8008a4e <tOversampler_downsample+0x16>
 8008a5a:	1e7b      	subs	r3, r7, #1
 8008a5c:	6871      	ldr	r1, [r6, #4]
 8008a5e:	6934      	ldr	r4, [r6, #16]
 8008a60:	461a      	mov	r2, r3
 8008a62:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    
    /* Set accumulator to zero */
    acc0 = 0.0f;
 8008a66:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8008a94 <tOversampler_downsample+0x5c>
    pb = pCoeffs;
    
    /* Initialize tapCnt with number of taps */
    tapCnt = numTaps;
    
    while (tapCnt > 0U)
 8008a6a:	b90f      	cbnz	r7, 8008a70 <tOversampler_downsample+0x38>
 8008a6c:	e009      	b.n	8008a82 <tOversampler_downsample+0x4a>
 8008a6e:	3a01      	subs	r2, #1
        
        /* Fetch 1 state variable */
        x0 = *px0++;
        
        /* Perform the multiply-accumulate */
        acc0 += x0 * c0;
 8008a70:	ecb5 7a01 	vldmia	r5!, {s14}
 8008a74:	ecf0 7a01 	vldmia	r0!, {s15}
 8008a78:	eea7 0a27 	vfma.f32	s0, s14, s15
    while (tapCnt > 0U)
 8008a7c:	2a00      	cmp	r2, #0
 8008a7e:	d1f6      	bne.n	8008a6e <tOversampler_downsample+0x36>
    
    /* Initialize tapCnt with number of taps */
    tapCnt = (numTaps - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
 8008a80:	b133      	cbz	r3, 8008a90 <tOversampler_downsample+0x58>
 8008a82:	4622      	mov	r2, r4
    {
        *pStateCur++ = *pState++;
 8008a84:	f851 0b04 	ldr.w	r0, [r1], #4
    while (tapCnt > 0U)
 8008a88:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
 8008a8a:	f842 0b04 	str.w	r0, [r2], #4
    while (tapCnt > 0U)
 8008a8e:	d1f9      	bne.n	8008a84 <tOversampler_downsample+0x4c>
        /* Decrement loop counter */
        tapCnt--;
    }
    
    return output;
}
 8008a90:	bcf0      	pop	{r4, r5, r6, r7}
 8008a92:	4770      	bx	lr
 8008a94:	00000000 	.word	0x00000000

08008a98 <tVZFilter_init>:
}

/////

void    tVZFilter_init           (tVZFilter* const vf, VZFilterType type, float freq, float bandWidth)
{
 8008a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf.mempool);
}

void    tVZFilter_initToPool     (tVZFilter* const vf, VZFilterType type, float freq, float bandWidth, tMempool* const mp)
{
    _tMempool* m = *mp;
 8008a9c:	4cc8      	ldr	r4, [pc, #800]	; (8008dc0 <tVZFilter_init+0x328>)
{
 8008a9e:	4605      	mov	r5, r0
 8008aa0:	4688      	mov	r8, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8008aa2:	2044      	movs	r0, #68	; 0x44
    f->mempool = m;
    
	f->fc   = freq;
	f->type = type;
	f->G    = ONE_OVER_SQRT2;
 8008aa4:	4fc7      	ldr	r7, [pc, #796]	; (8008dc4 <tVZFilter_init+0x32c>)
{
 8008aa6:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
 8008aaa:	69a6      	ldr	r6, [r4, #24]
{
 8008aac:	eef0 8a40 	vmov.f32	s17, s0
 8008ab0:	eeb0 8a60 	vmov.f32	s16, s1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8008ab4:	4631      	mov	r1, r6
 8008ab6:	f000 facd 	bl	8009054 <mpool_alloc>
	f->invG    = 1.0f/ONE_OVER_SQRT2;
	f->B    = bandWidth;
	f->m    = 0.0f;
 8008aba:	2300      	movs	r3, #0
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8008abc:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8008abe:	6006      	str	r6, [r0, #0]
	f->type = type;
 8008ac0:	f880 8004 	strb.w	r8, [r0, #4]
	f->s1 = 0.0f;
	f->s2 = 0.0f;
	f->sr = leaf.sampleRate;
 8008ac4:	6821      	ldr	r1, [r4, #0]
	f->inv_sr = leaf.invSampleRate;
 8008ac6:	6862      	ldr	r2, [r4, #4]
	f->invG    = 1.0f/ONE_OVER_SQRT2;
 8008ac8:	4ebf      	ldr	r6, [pc, #764]	; (8008dc8 <tVZFilter_init+0x330>)
	f->fc   = freq;
 8008aca:	edc0 8a0a 	vstr	s17, [r0, #40]	; 0x28
	f->m    = 0.0f;
 8008ace:	6383      	str	r3, [r0, #56]	; 0x38
	f->s1 = 0.0f;
 8008ad0:	6083      	str	r3, [r0, #8]
	f->s2 = 0.0f;
 8008ad2:	60c3      	str	r3, [r0, #12]
	f->B    = bandWidth;
 8008ad4:	ed80 8a0d 	vstr	s16, [r0, #52]	; 0x34
	f->G    = ONE_OVER_SQRT2;
 8008ad8:	62c7      	str	r7, [r0, #44]	; 0x2c
	f->invG    = 1.0f/ONE_OVER_SQRT2;
 8008ada:	6306      	str	r6, [r0, #48]	; 0x30
	f->sr = leaf.sampleRate;
 8008adc:	63c1      	str	r1, [r0, #60]	; 0x3c
	f->inv_sr = leaf.invSampleRate;
 8008ade:	6402      	str	r2, [r0, #64]	; 0x40


void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{

	_tVZFilter* f = *vf;
 8008ae0:	682c      	ldr	r4, [r5, #0]
	f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 8008ae2:	eddf 7aba 	vldr	s15, [pc, #744]	; 8008dcc <tVZFilter_init+0x334>
 8008ae6:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 8008aea:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 8008aee:	ee28 8a07 	vmul.f32	s16, s16, s14
 8008af2:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008af6:	eeb0 0a48 	vmov.f32	s0, s16
 8008afa:	f000 febb 	bl	8009874 <tanf>

	  switch( f->type )
 8008afe:	7923      	ldrb	r3, [r4, #4]
	f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 8008b00:	eef0 8a40 	vmov.f32	s17, s0
 8008b04:	ed84 0a04 	vstr	s0, [r4, #16]
	  switch( f->type )
 8008b08:	2b0a      	cmp	r3, #10
 8008b0a:	f200 81b5 	bhi.w	8008e78 <tVZFilter_init+0x3e0>
 8008b0e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008b12:	0054      	.short	0x0054
 8008b14:	006a005f 	.word	0x006a005f
 8008b18:	00ac0075 	.word	0x00ac0075
 8008b1c:	011700e4 	.word	0x011700e4
 8008b20:	01630137 	.word	0x01630137
 8008b24:	000b01a8 	.word	0x000b01a8
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
	_tVZFilter* f = *vf;
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8008b28:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8008b2c:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	_tVZFilter* f = *vf;
 8008b30:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8008b32:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8008b36:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8008b3a:	f000 fd5d 	bl	80095f8 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8008b3e:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8008b42:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8008b46:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8008dcc <tVZFilter_init+0x334>
 8008b4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008b4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b52:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008b56:	f000 fe8d 	bl	8009874 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8008b5a:	ed95 7a04 	vldr	s14, [r5, #16]
							   // unwarped: r = pow(2, -B/2) -> approximation for low
							   // center-frequencies
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8008b5e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8008b62:	ee80 0a07 	vdiv.f32	s0, s0, s14
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8008b66:	edc4 7a07 	vstr	s15, [r4, #28]
 8008b6a:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8008b6e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008b72:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008b76:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008b7a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008b7e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008b82:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8008b86:	eef1 7ac7 	vsqrt.f32	s15, s14
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8008b8a:	ee77 7aa7 	vadd.f32	s15, s15, s15
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8008b8e:	eeb1 7a67 	vneg.f32	s14, s15
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8008b92:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8008b96:	ed84 7a08 	vstr	s14, [r4, #32]
	  f->h = 1.0f / (1.0f + f->R2*f->g + f->g*f->g);  // factor for feedback precomputation
 8008b9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b9e:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8008ba2:	eef0 6a47 	vmov.f32	s13, s14
 8008ba6:	eee7 6aa8 	vfma.f32	s13, s15, s17
 8008baa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008bae:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8008bb2:	ecbd 8b04 	vpop	{d8-d9}
 8008bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
			f->R2 = f->invG;
 8008bc0:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8008bc4:	6262      	str	r2, [r4, #36]	; 0x24
			f->R2 = f->invG;
 8008bc6:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8008bca:	61e3      	str	r3, [r4, #28]
 8008bcc:	6223      	str	r3, [r4, #32]
 8008bce:	e7e4      	b.n	8008b9a <tVZFilter_init+0x102>
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
			f->R2 = f->invG;
 8008bd6:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8008bda:	61e2      	str	r2, [r4, #28]
			f->R2 = f->invG;
 8008bdc:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8008be0:	6223      	str	r3, [r4, #32]
 8008be2:	6263      	str	r3, [r4, #36]	; 0x24
 8008be4:	e7d9      	b.n	8008b9a <tVZFilter_init+0x102>
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8008be6:	2300      	movs	r3, #0
 8008be8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
			f->R2 = f->invG;
 8008bec:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8008bf0:	6222      	str	r2, [r4, #32]
			f->R2 = f->invG;
 8008bf2:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8008bf6:	61e3      	str	r3, [r4, #28]
 8008bf8:	6263      	str	r3, [r4, #36]	; 0x24
 8008bfa:	e7ce      	b.n	8008b9a <tVZFilter_init+0x102>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8008bfc:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8008c00:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	_tVZFilter* f = *vf;
 8008c04:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8008c06:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8008c0a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8008c0e:	f000 fcf3 	bl	80095f8 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8008c12:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8008c16:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8008c1a:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8008dcc <tVZFilter_init+0x334>
 8008c1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008c22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c26:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008c2a:	f000 fe23 	bl	8009874 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8008c2e:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8008c32:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 8008c36:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8008c38:	ee80 0a07 	vdiv.f32	s0, s0, s14
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 8008c3c:	61e3      	str	r3, [r4, #28]
 8008c3e:	6263      	str	r3, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8008c40:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008c44:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008c48:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008c4c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008c50:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008c54:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8008c58:	eef1 7ac7 	vsqrt.f32	s15, s14
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8008c5c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008c60:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 8008c64:	edc4 7a08 	vstr	s15, [r4, #32]
 8008c68:	e797      	b.n	8008b9a <tVZFilter_init+0x102>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8008c6a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8008c6e:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	_tVZFilter* f = *vf;
 8008c72:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8008c74:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8008c78:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8008c7c:	f000 fcbc 	bl	80095f8 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8008c80:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8008c84:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8008c88:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8008dcc <tVZFilter_init+0x334>
 8008c8c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008c90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c94:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008c98:	f000 fdec 	bl	8009874 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8008c9c:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8008ca0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8008ca4:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8008ca6:	ee80 0a07 	vdiv.f32	s0, s0, s14
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8008caa:	6223      	str	r3, [r4, #32]
 8008cac:	edc4 7a07 	vstr	s15, [r4, #28]
 8008cb0:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8008cb4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008cb8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008cbc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008cc0:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008cc4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008cc8:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8008ccc:	eef1 7ac7 	vsqrt.f32	s15, s14
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8008cd0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008cd4:	edc4 7a05 	vstr	s15, [r4, #20]
 8008cd8:	e75f      	b.n	8008b9a <tVZFilter_init+0x102>
			float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8008cda:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8008cde:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
 8008ce2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8008ce6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8008cea:	f000 fc85 	bl	80095f8 <powf>
			float wl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8008cee:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008cf2:	f000 fdbf 	bl	8009874 <tanf>
			float r  = f->g/wl;
 8008cf6:	ee88 0a80 	vdiv.f32	s0, s17, s0
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8008cfa:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8008cfe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008d02:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8008d06:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8008d0a:	edc4 7a07 	vstr	s15, [r4, #28]
 8008d0e:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8008d12:	ee67 6a26 	vmul.f32	s13, s14, s13
			r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8008d16:	ee20 0a00 	vmul.f32	s0, s0, s0
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8008d1a:	eee0 7a00 	vfma.f32	s15, s0, s0
 8008d1e:	ee87 6a80 	vdiv.f32	s12, s15, s0
 8008d22:	ee76 7a65 	vsub.f32	s15, s12, s11
 8008d26:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008d2a:	eef1 7ac6 	vsqrt.f32	s15, s12
 8008d2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8008d32:	ee27 7a27 	vmul.f32	s14, s14, s15
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8008d36:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8008d3a:	ed84 7a08 	vstr	s14, [r4, #32]
 8008d3e:	e72c      	b.n	8008b9a <tVZFilter_init+0x102>
			float A = sqrtf(f->G);
 8008d40:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
		  f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8008d44:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8008d48:	eddf 7a21 	vldr	s15, [pc, #132]	; 8008dd0 <tVZFilter_init+0x338>
			float A = sqrtf(f->G);
 8008d4c:	eeb1 8ac9 	vsqrt.f32	s16, s18
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8008d50:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8008d54:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008d58:	eef1 7ac8 	vsqrt.f32	s15, s16
		  f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8008d5c:	eec8 8aa7 	vdiv.f32	s17, s17, s15
 8008d60:	edc4 8a04 	vstr	s17, [r4, #16]
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8008d64:	f000 fe74 	bl	8009a50 <sinhf>
 8008d68:	ee70 7a00 	vadd.f32	s15, s0, s0
		  f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 8008d6c:	ed84 9a07 	vstr	s18, [r4, #28]
 8008d70:	6265      	str	r5, [r4, #36]	; 0x24
 8008d72:	ee28 8a27 	vmul.f32	s16, s16, s15
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8008d76:	edc4 7a05 	vstr	s15, [r4, #20]
		  f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 8008d7a:	ed84 8a08 	vstr	s16, [r4, #32]
 8008d7e:	e70c      	b.n	8008b9a <tVZFilter_init+0x102>
		  float A = sqrtf(f->G);
 8008d80:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8008d84:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008dd0 <tVZFilter_init+0x338>
		  float A = sqrtf(f->G);
 8008d88:	eeb1 8ac9 	vsqrt.f32	s16, s18
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8008d8c:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8008d90:	ee20 0a27 	vmul.f32	s0, s0, s15
		  f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8008d94:	eef1 7ac8 	vsqrt.f32	s15, s16
 8008d98:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8008d9c:	edc4 8a04 	vstr	s17, [r4, #16]
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8008da0:	f000 fe56 	bl	8009a50 <sinhf>
 8008da4:	ee70 7a00 	vadd.f32	s15, s0, s0
		  f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 8008da8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008dac:	ed84 9a09 	vstr	s18, [r4, #36]	; 0x24
 8008db0:	ee28 8a27 	vmul.f32	s16, s16, s15
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8008db4:	edc4 7a05 	vstr	s15, [r4, #20]
		  f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 8008db8:	61e3      	str	r3, [r4, #28]
 8008dba:	ed84 8a08 	vstr	s16, [r4, #32]
 8008dbe:	e6ec      	b.n	8008b9a <tVZFilter_init+0x102>
 8008dc0:	2001ad2c 	.word	0x2001ad2c
 8008dc4:	3f3504f3 	.word	0x3f3504f3
 8008dc8:	3fb504f3 	.word	0x3fb504f3
 8008dcc:	40490fdb 	.word	0x40490fdb
 8008dd0:	3eb17218 	.word	0x3eb17218
 8008dd4:	00000000 	.word	0x00000000
		  float x  = 2.0f*f->m-1.0f;
 8008dd8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8008ddc:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 8008de0:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
			f->R2 = f->invG;
 8008de4:	6b23      	ldr	r3, [r4, #48]	; 0x30
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8008de6:	ed5f 0a05 	vldr	s1, [pc, #-20]	; 8008dd4 <tVZFilter_init+0x33c>
			f->R2 = f->invG;
 8008dea:	6163      	str	r3, [r4, #20]
		  float x  = 2.0f*f->m-1.0f;
 8008dec:	eea7 8a27 	vfma.f32	s16, s14, s15
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8008df0:	eef1 8a48 	vneg.f32	s17, s16
 8008df4:	eeb0 0a68 	vmov.f32	s0, s17
 8008df8:	f000 f90c 	bl	8009014 <maximum>
		  f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8008dfc:	ed5f 0a0b 	vldr	s1, [pc, #-44]	; 8008dd4 <tVZFilter_init+0x33c>
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8008e00:	ed84 0a07 	vstr	s0, [r4, #28]
		  f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8008e04:	eeb0 0a48 	vmov.f32	s0, s16
 8008e08:	f000 f908 	bl	800901c <minimum>
		  f->cB = 1.0f-x*x;
 8008e0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		  float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 8008e10:	edd4 6a07 	vldr	s13, [r4, #28]
 8008e14:	edd4 7a05 	vldr	s15, [r4, #20]
		  f->cB = 1.0f-x*x;
 8008e18:	eea8 7a88 	vfma.f32	s14, s17, s16
		  float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 8008e1c:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 8008e20:	ee36 5aa6 	vadd.f32	s10, s13, s13
 8008e24:	edd4 8a04 	vldr	s17, [r4, #16]
 8008e28:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8008e2c:	ee27 6a07 	vmul.f32	s12, s14, s14
 8008e30:	eea6 6aa6 	vfma.f32	s12, s13, s13
 8008e34:	eea0 6a00 	vfma.f32	s12, s0, s0
 8008e38:	eea0 6a45 	vfms.f32	s12, s0, s10
 8008e3c:	ee84 5a86 	vdiv.f32	s10, s9, s12
 8008e40:	eeb1 6ac5 	vsqrt.f32	s12, s10
 8008e44:	ee26 6a25 	vmul.f32	s12, s12, s11
		  f->cL *= s; f->cB *= s; f->cH *= s;
 8008e48:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008e4c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8008e50:	ee20 0a06 	vmul.f32	s0, s0, s12
 8008e54:	edc4 6a07 	vstr	s13, [r4, #28]
 8008e58:	ed84 7a08 	vstr	s14, [r4, #32]
 8008e5c:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
 8008e60:	e69b      	b.n	8008b9a <tVZFilter_init+0x102>
		  f->cL = 1.0f;
 8008e62:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
		  f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 8008e66:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
		  f->cL = 1.0f;
 8008e6a:	61e3      	str	r3, [r4, #28]
		  f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 8008e6c:	edc4 7a05 	vstr	s15, [r4, #20]
		  f->cH = 1.0f;
 8008e70:	6263      	str	r3, [r4, #36]	; 0x24
		  f->cB = f->R2;
 8008e72:	edc4 7a08 	vstr	s15, [r4, #32]
 8008e76:	e690      	b.n	8008b9a <tVZFilter_init+0x102>
 8008e78:	edd4 7a05 	vldr	s15, [r4, #20]
 8008e7c:	e68d      	b.n	8008b9a <tVZFilter_init+0x102>
 8008e7e:	bf00      	nop

08008e80 <tVZFilter_tick>:
{
 8008e80:	b510      	push	{r4, lr}
	_tVZFilter* f = *vf;
 8008e82:	6804      	ldr	r4, [r0, #0]
{
 8008e84:	ed2d 8b06 	vpush	{d8-d10}
	yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
 8008e88:	ed94 8a02 	vldr	s16, [r4, #8]
 8008e8c:	edd4 7a05 	vldr	s15, [r4, #20]
 8008e90:	ed94 9a04 	vldr	s18, [r4, #16]
 8008e94:	eea7 0ac8 	vfms.f32	s0, s15, s16
 8008e98:	edd4 9a03 	vldr	s19, [r4, #12]
 8008e9c:	edd4 7a06 	vldr	s15, [r4, #24]
 8008ea0:	eea8 0a49 	vfms.f32	s0, s16, s18
 8008ea4:	ee70 8a69 	vsub.f32	s17, s0, s19
 8008ea8:	ee68 8aa7 	vmul.f32	s17, s17, s15
	yB = tanhf(f->g*yH) + f->s1;
 8008eac:	ee29 aa28 	vmul.f32	s20, s18, s17
 8008eb0:	eeb0 0a4a 	vmov.f32	s0, s20
 8008eb4:	f000 fd06 	bl	80098c4 <tanhf>
 8008eb8:	ee38 8a00 	vadd.f32	s16, s16, s0
	yL = tanhf(f->g*yB) + f->s2;
 8008ebc:	ee29 9a08 	vmul.f32	s18, s18, s16
	f->s1 = f->g*yH + yB; // state update in 1st integrator
 8008ec0:	ee3a aa08 	vadd.f32	s20, s20, s16
	yL = tanhf(f->g*yB) + f->s2;
 8008ec4:	eeb0 0a49 	vmov.f32	s0, s18
	f->s1 = f->g*yH + yB; // state update in 1st integrator
 8008ec8:	ed84 aa02 	vstr	s20, [r4, #8]
	yL = tanhf(f->g*yB) + f->s2;
 8008ecc:	f000 fcfa 	bl	80098c4 <tanhf>
	return f->cL*yL + f->cB*yB + f->cH*yH;
 8008ed0:	edd4 7a08 	vldr	s15, [r4, #32]
	yL = tanhf(f->g*yB) + f->s2;
 8008ed4:	ee79 9a80 	vadd.f32	s19, s19, s0
	return f->cL*yL + f->cB*yB + f->cH*yH;
 8008ed8:	ed94 7a07 	vldr	s14, [r4, #28]
 8008edc:	ee28 0a27 	vmul.f32	s0, s16, s15
 8008ee0:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
	f->s2 = f->g*yB + yL; // state update in 2nd integrator
 8008ee4:	ee39 9a29 	vadd.f32	s18, s18, s19
	return f->cL*yL + f->cB*yB + f->cH*yH;
 8008ee8:	eea7 0a29 	vfma.f32	s0, s14, s19
	f->s2 = f->g*yB + yL; // state update in 2nd integrator
 8008eec:	ed84 9a03 	vstr	s18, [r4, #12]
}
 8008ef0:	eea7 0aa8 	vfma.f32	s0, s15, s17
 8008ef4:	ecbd 8b06 	vpop	{d8-d10}
 8008ef8:	bd10      	pop	{r4, pc}
 8008efa:	bf00      	nop

08008efc <LEAF_shaper>:
}

// Jones shaper
float LEAF_shaper(float input, float m_drive)
{
    float fx = input * 2.0f;    // prescale
 8008efc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008f00:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8008f6c <LEAF_shaper+0x70>
 8008f04:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8008f70 <LEAF_shaper+0x74>
    
    xc = LEAF_clip(-SQRT8, fx, SQRT8);
    xc2 = xc*xc;
    c = 0.5f*fx*(3.0f - (xc2));
    xc4 = xc2 * xc2;
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8008f08:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8008f0c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8008f10:	ed9f 4a18 	vldr	s8, [pc, #96]	; 8008f74 <LEAF_shaper+0x78>
 8008f14:	fec0 7a67 	vminnm.f32	s15, s0, s15
 8008f18:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
    xc2 = xc*xc;
 8008f1c:	ee67 7aa7 	vmul.f32	s15, s15, s15
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8008f20:	eddf 4a15 	vldr	s9, [pc, #84]	; 8008f78 <LEAF_shaper+0x7c>
 8008f24:	ee20 6a06 	vmul.f32	s12, s0, s12
    shaperOut *= 0.5f;    // post_scale
 8008f28:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8008f7c <LEAF_shaper+0x80>
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8008f2c:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8008f30:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8008f34:	ee27 7a67 	vnmul.f32	s14, s14, s15
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8008f38:	ee27 0aa4 	vmul.f32	s0, s15, s9
    c = 0.5f*fx*(3.0f - (xc2));
 8008f3c:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8008f40:	eea3 7a84 	vfma.f32	s14, s7, s8
 8008f44:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    c = 0.5f*fx*(3.0f - (xc2));
 8008f48:	ee75 5ae7 	vsub.f32	s11, s11, s15
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8008f4c:	ee70 0aa6 	vadd.f32	s1, s1, s13
 8008f50:	eef0 7a40 	vmov.f32	s15, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8008f54:	ee37 7a24 	vadd.f32	s14, s14, s9
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8008f58:	eee5 7a86 	vfma.f32	s15, s11, s12
    shaperOut *= 0.5f;    // post_scale
 8008f5c:	ee20 0a85 	vmul.f32	s0, s1, s10
 8008f60:	ee27 0a00 	vmul.f32	s0, s14, s0
    return shaperOut;
}
 8008f64:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop
 8008f6c:	c03504f3 	.word	0xc03504f3
 8008f70:	403504f3 	.word	0x403504f3
 8008f74:	3c800000 	.word	0x3c800000
 8008f78:	3d4ccccd 	.word	0x3d4ccccd
 8008f7c:	3f272f05 	.word	0x3f272f05

08008f80 <LEAF_tanh>:

// Adapted from MusicDSP: http://www.musicdsp.org/showone.php?id=238
float LEAF_tanh(float x)
{
    
    if( x < -3.0f )
 8008f80:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
 8008f84:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f8c:	d418      	bmi.n	8008fc0 <LEAF_tanh+0x40>
        return -1.0f;
    else if( x > 3.0f )
 8008f8e:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8008f92:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f9a:	dc0e      	bgt.n	8008fba <LEAF_tanh+0x3a>
        return 1.0f;
    else
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
 8008f9c:	ee60 6a00 	vmul.f32	s13, s0, s0
 8008fa0:	eef3 7a0b 	vmov.f32	s15, #59	; 0x41d80000  27.0
 8008fa4:	eeb2 6a02 	vmov.f32	s12, #34	; 0x41100000  9.0
 8008fa8:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8008fac:	eee6 7a86 	vfma.f32	s15, s13, s12
 8008fb0:	ee27 7a00 	vmul.f32	s14, s14, s0
 8008fb4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8008fb8:	4770      	bx	lr
        return 1.0f;
 8008fba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
}
 8008fbe:	4770      	bx	lr
        return -1.0f;
 8008fc0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop

08008fc8 <LEAF_generate_atodb>:
    }
}

void LEAF_generate_atodb(float* buffer, int size)
{
    float increment = 1.0f / (float)size;
 8008fc8:	ee07 1a90 	vmov	s15, r1
 8008fcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float x = 0.0f;
    for (int i = 0; i < size; i++)
 8008fd0:	2900      	cmp	r1, #0
    float increment = 1.0f / (float)size;
 8008fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8008fd6:	b538      	push	{r3, r4, r5, lr}
 8008fd8:	ed2d 8b04 	vpush	{d8-d9}
    float increment = 1.0f / (float)size;
 8008fdc:	eec7 8a27 	vdiv.f32	s17, s14, s15
    for (int i = 0; i < size; i++)
 8008fe0:	dd12      	ble.n	8009008 <LEAF_generate_atodb+0x40>
 8008fe2:	4604      	mov	r4, r0
    float x = 0.0f;
 8008fe4:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8009010 <LEAF_generate_atodb+0x48>
 8008fe8:	eb00 0581 	add.w	r5, r0, r1, lsl #2
}


float atodb(float a)
{
    return 20.0f*log10f(a);
 8008fec:	eeb3 9a04 	vmov.f32	s18, #52	; 0x41a00000  20.0
 8008ff0:	eeb0 0a48 	vmov.f32	s0, s16
 8008ff4:	f000 fcb8 	bl	8009968 <log10f>
 8008ff8:	ee20 0a09 	vmul.f32	s0, s0, s18
        x += increment;
 8008ffc:	ee38 8a28 	vadd.f32	s16, s16, s17
        buffer[i] = atodb(x);
 8009000:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
 8009004:	42a5      	cmp	r5, r4
 8009006:	d1f3      	bne.n	8008ff0 <LEAF_generate_atodb+0x28>
}
 8009008:	ecbd 8b04 	vpop	{d8-d9}
 800900c:	bd38      	pop	{r3, r4, r5, pc}
 800900e:	bf00      	nop
 8009010:	00000000 	.word	0x00000000

08009014 <maximum>:


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
 8009014:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop

0800901c <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
 800901c:	fe80 0ac0 	vminnm.f32	s0, s1, s0
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop

08009024 <leaf_pool_init>:
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(char* memory, size_t size)
{
 8009024:	b470      	push	{r4, r5, r6}
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 8009026:	4b0a      	ldr	r3, [pc, #40]	; (8009050 <leaf_pool_init+0x2c>)
 8009028:	2610      	movs	r6, #16
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 800902a:	f1a1 0410 	sub.w	r4, r1, #16
    pool->usize  = 0;
 800902e:	2200      	movs	r2, #0
    pool->msize  = size;
 8009030:	6259      	str	r1, [r3, #36]	; 0x24
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + leaf.header_size;
 8009032:	1985      	adds	r5, r0, r6
    leaf.mempool = &leaf._mempool;
 8009034:	f103 011c 	add.w	r1, r3, #28
    pool->mpool = (char*)memory;
 8009038:	61d8      	str	r0, [r3, #28]
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 800903a:	62de      	str	r6, [r3, #44]	; 0x2c
    pool->usize  = 0;
 800903c:	621a      	str	r2, [r3, #32]
    node->pool = block_location + leaf.header_size;
 800903e:	6005      	str	r5, [r0, #0]
    node->next = next;
    node->prev = prev;
    node->size = size;
 8009040:	60c4      	str	r4, [r0, #12]
    node->prev = prev;
 8009042:	e9c0 2201 	strd	r2, r2, [r0, #4]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 8009046:	6298      	str	r0, [r3, #40]	; 0x28
    leaf.mempool = &leaf._mempool;
 8009048:	6199      	str	r1, [r3, #24]
}
 800904a:	bc70      	pop	{r4, r5, r6}
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	2001ad2c 	.word	0x2001ad2c

08009054 <mpool_alloc>:
{
 8009054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pool->head == NULL)
 8009056:	68cb      	ldr	r3, [r1, #12]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d049      	beq.n	80090f0 <mpool_alloc+0x9c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 800905c:	3007      	adds	r0, #7
 800905e:	f020 0007 	bic.w	r0, r0, #7
    while (node_to_alloc->size < size_to_alloc)
 8009062:	e002      	b.n	800906a <mpool_alloc+0x16>
        if (node_to_alloc == NULL)
 8009064:	4623      	mov	r3, r4
 8009066:	2c00      	cmp	r4, #0
 8009068:	d042      	beq.n	80090f0 <mpool_alloc+0x9c>
    while (node_to_alloc->size < size_to_alloc)
 800906a:	68da      	ldr	r2, [r3, #12]
 800906c:	685c      	ldr	r4, [r3, #4]
 800906e:	4282      	cmp	r2, r0
 8009070:	d3f8      	bcc.n	8009064 <mpool_alloc+0x10>
    if (leftover > leaf.header_size)
 8009072:	4e22      	ldr	r6, [pc, #136]	; (80090fc <mpool_alloc+0xa8>)
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8009074:	1a17      	subs	r7, r2, r0
    node_to_alloc->size = size_to_alloc;
 8009076:	60d8      	str	r0, [r3, #12]
    if (leftover > leaf.header_size)
 8009078:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 800907a:	42bd      	cmp	r5, r7
 800907c:	d327      	bcc.n	80090ce <mpool_alloc+0x7a>
        node_to_alloc->size += leftover;
 800907e:	46a4      	mov	ip, r4
 8009080:	60da      	str	r2, [r3, #12]
    if (pool->head == node_to_alloc)
 8009082:	68ca      	ldr	r2, [r1, #12]
 8009084:	429a      	cmp	r2, r3
        pool->head = new_node;
 8009086:	bf08      	it	eq
 8009088:	f8c1 c00c 	streq.w	ip, [r1, #12]
 800908c:	e9d3 0201 	ldrd	r0, r2, [r3, #4]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 8009090:	b108      	cbz	r0, 8009096 <mpool_alloc+0x42>
    {
        // Close the link
        node->next->prev = node->prev;
 8009092:	6082      	str	r2, [r0, #8]
 8009094:	689a      	ldr	r2, [r3, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 8009096:	b10a      	cbz	r2, 800909c <mpool_alloc+0x48>
    {
        // Close the link
        node->prev->next = node->next;
 8009098:	6858      	ldr	r0, [r3, #4]
 800909a:	6050      	str	r0, [r2, #4]
    }
    
    node->next = NULL;
 800909c:	2200      	movs	r2, #0
    pool->usize += leaf.header_size + node_to_alloc->size;
 800909e:	68dc      	ldr	r4, [r3, #12]
    node->prev = NULL;
 80090a0:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += leaf.header_size + node_to_alloc->size;
 80090a4:	6848      	ldr	r0, [r1, #4]
 80090a6:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 80090a8:	4428      	add	r0, r5
 80090aa:	4420      	add	r0, r4
 80090ac:	6048      	str	r0, [r1, #4]
    if (leaf.clearOnAllocation > 0)
 80090ae:	6971      	ldr	r1, [r6, #20]
 80090b0:	4291      	cmp	r1, r2
 80090b2:	dd0a      	ble.n	80090ca <mpool_alloc+0x76>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80090b4:	68d9      	ldr	r1, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 80090b6:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80090b8:	b141      	cbz	r1, 80090cc <mpool_alloc+0x78>
 80090ba:	3801      	subs	r0, #1
 80090bc:	4614      	mov	r4, r2
 80090be:	f800 4f01 	strb.w	r4, [r0, #1]!
 80090c2:	3201      	adds	r2, #1
 80090c4:	68d9      	ldr	r1, [r3, #12]
 80090c6:	4291      	cmp	r1, r2
 80090c8:	d8f9      	bhi.n	80090be <mpool_alloc+0x6a>
 80090ca:	6818      	ldr	r0, [r3, #0]
}
 80090cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 80090ce:	680a      	ldr	r2, [r1, #0]
        offset += leaf.header_size + node_to_alloc->size;
 80090d0:	4428      	add	r0, r5
                               node_to_alloc->prev,
 80090d2:	f8d3 e008 	ldr.w	lr, [r3, #8]
        new_node = create_node(&pool->mpool[offset],
 80090d6:	1b7f      	subs	r7, r7, r5
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 80090d8:	eba3 0c02 	sub.w	ip, r3, r2
        offset += leaf.header_size + node_to_alloc->size;
 80090dc:	4460      	add	r0, ip
        new_node = create_node(&pool->mpool[offset],
 80090de:	eb02 0c00 	add.w	ip, r2, r0
    node->pool = block_location + leaf.header_size;
 80090e2:	4465      	add	r5, ip
 80090e4:	5015      	str	r5, [r2, r0]
    node->size = size;
 80090e6:	f8cc 700c 	str.w	r7, [ip, #12]
    node->prev = prev;
 80090ea:	e9cc 4e01 	strd	r4, lr, [ip, #4]
 80090ee:	e7c8      	b.n	8009082 <mpool_alloc+0x2e>
}

void leaf_mempool_overrun(void)
{
    LEAF_error(1);
 80090f0:	2001      	movs	r0, #1
 80090f2:	f000 f8b5 	bl	8009260 <LEAF_error>
        return NULL;
 80090f6:	2000      	movs	r0, #0
}
 80090f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090fa:	bf00      	nop
 80090fc:	2001ad2c 	.word	0x2001ad2c

08009100 <tMempool_init>:
    //TODO: we should make a set of real error codes that are in an enum type
}

void tMempool_init(tMempool* const mp, char* memory, size_t size)
{
 8009100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    tMempool_freeFromPool(mp, &leaf.mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
 8009104:	4e3a      	ldr	r6, [pc, #232]	; (80091f0 <tMempool_init+0xf0>)
{
 8009106:	b082      	sub	sp, #8
    _tMempool* mm = *mem;
 8009108:	f8d6 c018 	ldr.w	ip, [r6, #24]
    if (pool->head == NULL)
 800910c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8009110:	b91b      	cbnz	r3, 800911a <tMempool_init+0x1a>
 8009112:	e04c      	b.n	80091ae <tMempool_init+0xae>
        if (node_to_alloc == NULL)
 8009114:	462b      	mov	r3, r5
 8009116:	2d00      	cmp	r5, #0
 8009118:	d049      	beq.n	80091ae <tMempool_init+0xae>
    while (node_to_alloc->size < size_to_alloc)
 800911a:	68dc      	ldr	r4, [r3, #12]
 800911c:	685d      	ldr	r5, [r3, #4]
 800911e:	2c0f      	cmp	r4, #15
 8009120:	d9f8      	bls.n	8009114 <tMempool_init+0x14>
    node_to_alloc->size = size_to_alloc;
 8009122:	2710      	movs	r7, #16
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8009124:	f1a4 0e10 	sub.w	lr, r4, #16
    node_to_alloc->size = size_to_alloc;
 8009128:	60df      	str	r7, [r3, #12]
    if (leftover > leaf.header_size)
 800912a:	6af7      	ldr	r7, [r6, #44]	; 0x2c
 800912c:	45be      	cmp	lr, r7
 800912e:	d849      	bhi.n	80091c4 <tMempool_init+0xc4>
        node_to_alloc->size += leftover;
 8009130:	46ae      	mov	lr, r5
 8009132:	60dc      	str	r4, [r3, #12]
    if (pool->head == node_to_alloc)
 8009134:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8009138:	42a3      	cmp	r3, r4
        pool->head = new_node;
 800913a:	bf08      	it	eq
 800913c:	f8cc e00c 	streq.w	lr, [ip, #12]
 8009140:	e9d3 5401 	ldrd	r5, r4, [r3, #4]
    if (node->next != NULL)
 8009144:	b10d      	cbz	r5, 800914a <tMempool_init+0x4a>
        node->next->prev = node->prev;
 8009146:	60ac      	str	r4, [r5, #8]
 8009148:	689c      	ldr	r4, [r3, #8]
    if (node->prev != NULL)
 800914a:	b10c      	cbz	r4, 8009150 <tMempool_init+0x50>
        node->prev->next = node->next;
 800914c:	685d      	ldr	r5, [r3, #4]
 800914e:	6065      	str	r5, [r4, #4]
    pool->usize += leaf.header_size + node_to_alloc->size;
 8009150:	68dc      	ldr	r4, [r3, #12]
    node->next = NULL;
 8009152:	2500      	movs	r5, #0
    pool->usize += leaf.header_size + node_to_alloc->size;
 8009154:	9401      	str	r4, [sp, #4]
    node->prev = NULL;
 8009156:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += leaf.header_size + node_to_alloc->size;
 800915a:	6af4      	ldr	r4, [r6, #44]	; 0x2c
 800915c:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8009160:	4427      	add	r7, r4
 8009162:	463c      	mov	r4, r7
 8009164:	9f01      	ldr	r7, [sp, #4]
 8009166:	4427      	add	r7, r4
 8009168:	f8cc 7004 	str.w	r7, [ip, #4]
    if (leaf.clearOnAllocation > 0)
 800916c:	6974      	ldr	r4, [r6, #20]
 800916e:	42ac      	cmp	r4, r5
 8009170:	dd0a      	ble.n	8009188 <tMempool_init+0x88>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8009172:	68df      	ldr	r7, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 8009174:	681c      	ldr	r4, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8009176:	b147      	cbz	r7, 800918a <tMempool_init+0x8a>
 8009178:	3c01      	subs	r4, #1
 800917a:	46ac      	mov	ip, r5
 800917c:	f804 cf01 	strb.w	ip, [r4, #1]!
 8009180:	3501      	adds	r5, #1
 8009182:	68df      	ldr	r7, [r3, #12]
 8009184:	42bd      	cmp	r5, r7
 8009186:	d3f9      	bcc.n	800917c <tMempool_init+0x7c>
 8009188:	681c      	ldr	r4, [r3, #0]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 800918a:	6004      	str	r4, [r0, #0]
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 800918c:	2310      	movs	r3, #16
    pool->usize  = 0;
 800918e:	2000      	movs	r0, #0
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 8009190:	62f3      	str	r3, [r6, #44]	; 0x2c
    pool->mpool = (char*)memory;
 8009192:	6021      	str	r1, [r4, #0]
    pool->usize  = 0;
 8009194:	e9c4 0201 	strd	r0, r2, [r4, #4]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 8009198:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    node->next = next;
 800919a:	6048      	str	r0, [r1, #4]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 800919c:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + leaf.header_size;
 800919e:	440b      	add	r3, r1
    node->size = size;
 80091a0:	e9c1 0202 	strd	r0, r2, [r1, #8]
    node->pool = block_location + leaf.header_size;
 80091a4:	600b      	str	r3, [r1, #0]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 80091a6:	60e1      	str	r1, [r4, #12]
}
 80091a8:	b002      	add	sp, #8
 80091aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ae:	4605      	mov	r5, r0
    LEAF_error(1);
 80091b0:	2001      	movs	r0, #1
 80091b2:	460c      	mov	r4, r1
 80091b4:	f000 f854 	bl	8009260 <LEAF_error>
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 80091b8:	2300      	movs	r3, #0
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 80091ba:	2210      	movs	r2, #16
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 80091bc:	602b      	str	r3, [r5, #0]
    pool->mpool = (char*)memory;
 80091be:	601c      	str	r4, [r3, #0]
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 80091c0:	62f2      	str	r2, [r6, #44]	; 0x2c
 80091c2:	deff      	udf	#255	; 0xff
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 80091c4:	f8dc 9000 	ldr.w	r9, [ip]
        new_node = create_node(&pool->mpool[offset],
 80091c8:	ebae 0407 	sub.w	r4, lr, r7
        offset += leaf.header_size + node_to_alloc->size;
 80091cc:	f107 0810 	add.w	r8, r7, #16
                               node_to_alloc->prev,
 80091d0:	f8d3 a008 	ldr.w	sl, [r3, #8]
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 80091d4:	eba3 0e09 	sub.w	lr, r3, r9
        offset += leaf.header_size + node_to_alloc->size;
 80091d8:	44f0      	add	r8, lr
        new_node = create_node(&pool->mpool[offset],
 80091da:	eb09 0e08 	add.w	lr, r9, r8
    node->pool = block_location + leaf.header_size;
 80091de:	4477      	add	r7, lr
 80091e0:	f849 7008 	str.w	r7, [r9, r8]
    node->size = size;
 80091e4:	f8ce 400c 	str.w	r4, [lr, #12]
    node->prev = prev;
 80091e8:	e9ce 5a01 	strd	r5, sl, [lr, #4]
 80091ec:	e7a2      	b.n	8009134 <tMempool_init+0x34>
 80091ee:	bf00      	nop
 80091f0:	2001ad2c 	.word	0x2001ad2c

080091f4 <tCycle_init>:

#endif

// Cycle
void    tCycle_init(tCycle* const cy)
{
 80091f4:	b538      	push	{r3, r4, r5, lr}
    tCycle_initToPool(cy, &leaf.mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 80091f6:	4b06      	ldr	r3, [pc, #24]	; (8009210 <tCycle_init+0x1c>)
{
 80091f8:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80091fa:	2010      	movs	r0, #16
    _tMempool* m = *mp;
 80091fc:	699c      	ldr	r4, [r3, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80091fe:	4621      	mov	r1, r4
 8009200:	f7ff ff28 	bl	8009054 <mpool_alloc>
    c->mempool = m;
    
    c->inc      =  0.0f;
 8009204:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8009206:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8009208:	6004      	str	r4, [r0, #0]
    c->inc      =  0.0f;
 800920a:	6083      	str	r3, [r0, #8]
    c->phase    =  0.0f;
 800920c:	6043      	str	r3, [r0, #4]
}
 800920e:	bd38      	pop	{r3, r4, r5, pc}
 8009210:	2001ad2c 	.word	0x2001ad2c

08009214 <LEAF_init>:

LEAF leaf;

void LEAF_init(float sr, int blocksize, char* memory, size_t memorysize, float(*random)(void))

{
 8009214:	b538      	push	{r3, r4, r5, lr}
 8009216:	460c      	mov	r4, r1
 8009218:	4605      	mov	r5, r0
    leaf_pool_init(memory, memorysize);
 800921a:	4611      	mov	r1, r2
 800921c:	4620      	mov	r0, r4
{
 800921e:	461c      	mov	r4, r3
 8009220:	ed2d 8b02 	vpush	{d8}
 8009224:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(memory, memorysize);
 8009228:	f7ff fefc 	bl	8009024 <leaf_pool_init>
    
    leaf.sampleRate = sr;

    leaf.blockSize = blocksize;
    
    leaf.invSampleRate = 1.0f/sr;
 800922c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    
    leaf.twoPiTimesInvSampleRate = leaf.invSampleRate * TWO_PI;
 8009230:	eddf 7a09 	vldr	s15, [pc, #36]	; 8009258 <LEAF_init+0x44>
    leaf.sampleRate = sr;
 8009234:	4a09      	ldr	r2, [pc, #36]	; (800925c <LEAF_init+0x48>)

    leaf.random = random;
    
    leaf.clearOnAllocation = 0;
 8009236:	2100      	movs	r1, #0
    leaf.invSampleRate = 1.0f/sr;
 8009238:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf.blockSize = blocksize;
 800923c:	6095      	str	r5, [r2, #8]
    leaf.sampleRate = sr;
 800923e:	ed82 8a00 	vstr	s16, [r2]
    leaf.clearOnAllocation = 0;
 8009242:	e9c2 4104 	strd	r4, r1, [r2, #16]
    leaf.twoPiTimesInvSampleRate = leaf.invSampleRate * TWO_PI;
 8009246:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf.invSampleRate = 1.0f/sr;
 800924a:	ed82 7a01 	vstr	s14, [r2, #4]
    leaf.twoPiTimesInvSampleRate = leaf.invSampleRate * TWO_PI;
 800924e:	edc2 7a03 	vstr	s15, [r2, #12]
}
 8009252:	ecbd 8b02 	vpop	{d8}
 8009256:	bd38      	pop	{r3, r4, r5, pc}
 8009258:	40c90fdb 	.word	0x40c90fdb
 800925c:	2001ad2c 	.word	0x2001ad2c

08009260 <LEAF_error>:
//implement a function called this in your user code to catch errors
//__attribute__((weak))
uint8_t LEAF_error(uint8_t whichone)
{
    return whichone;
}
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop

08009264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8009264:	f8df d034 	ldr.w	sp, [pc, #52]	; 800929c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009268:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800926a:	e003      	b.n	8009274 <LoopCopyDataInit>

0800926c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800926c:	4b0c      	ldr	r3, [pc, #48]	; (80092a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800926e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009270:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009272:	3104      	adds	r1, #4

08009274 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009274:	480b      	ldr	r0, [pc, #44]	; (80092a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009276:	4b0c      	ldr	r3, [pc, #48]	; (80092a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009278:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800927a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800927c:	d3f6      	bcc.n	800926c <CopyDataInit>
  ldr  r2, =_sbss
 800927e:	4a0b      	ldr	r2, [pc, #44]	; (80092ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009280:	e002      	b.n	8009288 <LoopFillZerobss>

08009282 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009282:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009284:	f842 3b04 	str.w	r3, [r2], #4

08009288 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009288:	4b09      	ldr	r3, [pc, #36]	; (80092b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800928a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800928c:	d3f9      	bcc.n	8009282 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800928e:	f7ff faf5 	bl	800887c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009292:	f000 f817 	bl	80092c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009296:	f7fe ffc3 	bl	8008220 <main>
  bx  lr    
 800929a:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 800929c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80092a0:	0800ea88 	.word	0x0800ea88
  ldr  r0, =_sdata
 80092a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80092a8:	20000104 	.word	0x20000104
  ldr  r2, =_sbss
 80092ac:	20000108 	.word	0x20000108
  ldr  r3, = _ebss
 80092b0:	2001ad5c 	.word	0x2001ad5c

080092b4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80092b4:	e7fe      	b.n	80092b4 <ADC3_IRQHandler>
	...

080092b8 <__errno>:
 80092b8:	4b01      	ldr	r3, [pc, #4]	; (80092c0 <__errno+0x8>)
 80092ba:	6818      	ldr	r0, [r3, #0]
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	2000009c 	.word	0x2000009c

080092c4 <__libc_init_array>:
 80092c4:	b570      	push	{r4, r5, r6, lr}
 80092c6:	4e0d      	ldr	r6, [pc, #52]	; (80092fc <__libc_init_array+0x38>)
 80092c8:	4c0d      	ldr	r4, [pc, #52]	; (8009300 <__libc_init_array+0x3c>)
 80092ca:	1ba4      	subs	r4, r4, r6
 80092cc:	10a4      	asrs	r4, r4, #2
 80092ce:	2500      	movs	r5, #0
 80092d0:	42a5      	cmp	r5, r4
 80092d2:	d109      	bne.n	80092e8 <__libc_init_array+0x24>
 80092d4:	4e0b      	ldr	r6, [pc, #44]	; (8009304 <__libc_init_array+0x40>)
 80092d6:	4c0c      	ldr	r4, [pc, #48]	; (8009308 <__libc_init_array+0x44>)
 80092d8:	f001 fbb4 	bl	800aa44 <_init>
 80092dc:	1ba4      	subs	r4, r4, r6
 80092de:	10a4      	asrs	r4, r4, #2
 80092e0:	2500      	movs	r5, #0
 80092e2:	42a5      	cmp	r5, r4
 80092e4:	d105      	bne.n	80092f2 <__libc_init_array+0x2e>
 80092e6:	bd70      	pop	{r4, r5, r6, pc}
 80092e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80092ec:	4798      	blx	r3
 80092ee:	3501      	adds	r5, #1
 80092f0:	e7ee      	b.n	80092d0 <__libc_init_array+0xc>
 80092f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80092f6:	4798      	blx	r3
 80092f8:	3501      	adds	r5, #1
 80092fa:	e7f2      	b.n	80092e2 <__libc_init_array+0x1e>
 80092fc:	0800ea80 	.word	0x0800ea80
 8009300:	0800ea80 	.word	0x0800ea80
 8009304:	0800ea80 	.word	0x0800ea80
 8009308:	0800ea84 	.word	0x0800ea84

0800930c <memset>:
 800930c:	4402      	add	r2, r0
 800930e:	4603      	mov	r3, r0
 8009310:	4293      	cmp	r3, r2
 8009312:	d100      	bne.n	8009316 <memset+0xa>
 8009314:	4770      	bx	lr
 8009316:	f803 1b01 	strb.w	r1, [r3], #1
 800931a:	e7f9      	b.n	8009310 <memset+0x4>

0800931c <expf>:
 800931c:	ee10 2a10 	vmov	r2, s0
 8009320:	f240 412a 	movw	r1, #1066	; 0x42a
 8009324:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8009328:	428b      	cmp	r3, r1
 800932a:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
 800932e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8009332:	d92e      	bls.n	8009392 <expf+0x76>
 8009334:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8009338:	d061      	beq.n	80093fe <expf+0xe2>
 800933a:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800933e:	d304      	bcc.n	800934a <expf+0x2e>
 8009340:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009344:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 8009348:	4770      	bx	lr
 800934a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8009404 <expf+0xe8>
 800934e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009356:	dd04      	ble.n	8009362 <expf+0x46>
 8009358:	2000      	movs	r0, #0
 800935a:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800935e:	f001 b95f 	b.w	800a620 <__math_oflowf>
 8009362:	eddf 7a29 	vldr	s15, [pc, #164]	; 8009408 <expf+0xec>
 8009366:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800936a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800936e:	d504      	bpl.n	800937a <expf+0x5e>
 8009370:	2000      	movs	r0, #0
 8009372:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 8009376:	f001 b947 	b.w	800a608 <__math_uflowf>
 800937a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800940c <expf+0xf0>
 800937e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009386:	d504      	bpl.n	8009392 <expf+0x76>
 8009388:	2000      	movs	r0, #0
 800938a:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800938e:	f001 b941 	b.w	800a614 <__math_may_uflowf>
 8009392:	491f      	ldr	r1, [pc, #124]	; (8009410 <expf+0xf4>)
 8009394:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009398:	ed91 5b4a 	vldr	d5, [r1, #296]	; 0x128
 800939c:	ed91 7b48 	vldr	d7, [r1, #288]	; 0x120
 80093a0:	eeb0 4b47 	vmov.f64	d4, d7
 80093a4:	eea5 4b06 	vfma.f64	d4, d5, d6
 80093a8:	ec55 4b14 	vmov	r4, r5, d4
 80093ac:	ee34 7b47 	vsub.f64	d7, d4, d7
 80093b0:	f004 021f 	and.w	r2, r4, #31
 80093b4:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80093b8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80093bc:	ed91 6b50 	vldr	d6, [r1, #320]	; 0x140
 80093c0:	e9d2 4500 	ldrd	r4, r5, [r2]
 80093c4:	eea6 0b07 	vfma.f64	d0, d6, d7
 80093c8:	ee14 0a10 	vmov	r0, s8
 80093cc:	ed91 5b4c 	vldr	d5, [r1, #304]	; 0x130
 80093d0:	ed91 6b4e 	vldr	d6, [r1, #312]	; 0x138
 80093d4:	f04f 0b00 	mov.w	fp, #0
 80093d8:	eb1b 0204 	adds.w	r2, fp, r4
 80093dc:	ea4f 3cc0 	mov.w	ip, r0, lsl #15
 80093e0:	eb4c 0305 	adc.w	r3, ip, r5
 80093e4:	eea5 6b07 	vfma.f64	d6, d5, d7
 80093e8:	ee27 7b07 	vmul.f64	d7, d7, d7
 80093ec:	eea6 0b07 	vfma.f64	d0, d6, d7
 80093f0:	ec43 2b17 	vmov	d7, r2, r3
 80093f4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80093f8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80093fc:	e7a2      	b.n	8009344 <expf+0x28>
 80093fe:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8009414 <expf+0xf8>
 8009402:	e79f      	b.n	8009344 <expf+0x28>
 8009404:	42b17217 	.word	0x42b17217
 8009408:	c2cff1b4 	.word	0xc2cff1b4
 800940c:	c2ce8ecf 	.word	0xc2ce8ecf
 8009410:	0800e1f0 	.word	0x0800e1f0
 8009414:	00000000 	.word	0x00000000

08009418 <fabsf>:
 8009418:	ee10 3a10 	vmov	r3, s0
 800941c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009420:	ee00 3a10 	vmov	s0, r3
 8009424:	4770      	bx	lr
	...

08009428 <logf>:
 8009428:	ee10 3a10 	vmov	r3, s0
 800942c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8009430:	b410      	push	{r4}
 8009432:	d057      	beq.n	80094e4 <logf+0xbc>
 8009434:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8009438:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800943c:	d31a      	bcc.n	8009474 <logf+0x4c>
 800943e:	005a      	lsls	r2, r3, #1
 8009440:	d104      	bne.n	800944c <logf+0x24>
 8009442:	2001      	movs	r0, #1
 8009444:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009448:	f001 b8f0 	b.w	800a62c <__math_divzerof>
 800944c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009450:	d045      	beq.n	80094de <logf+0xb6>
 8009452:	2b00      	cmp	r3, #0
 8009454:	db02      	blt.n	800945c <logf+0x34>
 8009456:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800945a:	d303      	bcc.n	8009464 <logf+0x3c>
 800945c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009460:	f001 b8f4 	b.w	800a64c <__math_invalidf>
 8009464:	eddf 7a21 	vldr	s15, [pc, #132]	; 80094ec <logf+0xc4>
 8009468:	ee20 0a27 	vmul.f32	s0, s0, s15
 800946c:	ee10 3a10 	vmov	r3, s0
 8009470:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 8009474:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 8009478:	491d      	ldr	r1, [pc, #116]	; (80094f0 <logf+0xc8>)
 800947a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800947e:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8009482:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 8009486:	0dd4      	lsrs	r4, r2, #23
 8009488:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800948c:	05e4      	lsls	r4, r4, #23
 800948e:	ed90 5b00 	vldr	d5, [r0]
 8009492:	1b1b      	subs	r3, r3, r4
 8009494:	ee07 3a90 	vmov	s15, r3
 8009498:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800949c:	eea5 6b07 	vfma.f64	d6, d5, d7
 80094a0:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 80094a4:	ee26 3b06 	vmul.f64	d3, d6, d6
 80094a8:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 80094ac:	eea5 7b06 	vfma.f64	d7, d5, d6
 80094b0:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 80094b4:	15d2      	asrs	r2, r2, #23
 80094b6:	ed91 4b40 	vldr	d4, [r1, #256]	; 0x100
 80094ba:	eea5 7b03 	vfma.f64	d7, d5, d3
 80094be:	eeb0 5b47 	vmov.f64	d5, d7
 80094c2:	ed90 0b02 	vldr	d0, [r0, #8]
 80094c6:	ee07 2a90 	vmov	s15, r2
 80094ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80094ce:	eea7 0b04 	vfma.f64	d0, d7, d4
 80094d2:	ee30 0b06 	vadd.f64	d0, d0, d6
 80094d6:	eea3 0b05 	vfma.f64	d0, d3, d5
 80094da:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80094de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094e2:	4770      	bx	lr
 80094e4:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80094f4 <logf+0xcc>
 80094e8:	e7f9      	b.n	80094de <logf+0xb6>
 80094ea:	bf00      	nop
 80094ec:	4b000000 	.word	0x4b000000
 80094f0:	0800e458 	.word	0x0800e458
 80094f4:	00000000 	.word	0x00000000

080094f8 <log2f>:
 80094f8:	ee10 2a10 	vmov	r2, s0
 80094fc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8009500:	b410      	push	{r4}
 8009502:	d057      	beq.n	80095b4 <log2f+0xbc>
 8009504:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
 8009508:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800950c:	d31a      	bcc.n	8009544 <log2f+0x4c>
 800950e:	0053      	lsls	r3, r2, #1
 8009510:	d104      	bne.n	800951c <log2f+0x24>
 8009512:	2001      	movs	r0, #1
 8009514:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009518:	f001 b888 	b.w	800a62c <__math_divzerof>
 800951c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009520:	d045      	beq.n	80095ae <log2f+0xb6>
 8009522:	2a00      	cmp	r2, #0
 8009524:	db02      	blt.n	800952c <log2f+0x34>
 8009526:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800952a:	d303      	bcc.n	8009534 <log2f+0x3c>
 800952c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009530:	f001 b88c 	b.w	800a64c <__math_invalidf>
 8009534:	eddf 7a21 	vldr	s15, [pc, #132]	; 80095bc <log2f+0xc4>
 8009538:	ee20 0a27 	vmul.f32	s0, s0, s15
 800953c:	ee10 3a10 	vmov	r3, s0
 8009540:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
 8009544:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
 8009548:	491d      	ldr	r1, [pc, #116]	; (80095c0 <log2f+0xc8>)
 800954a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800954e:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8009552:	f3c3 40c3 	ubfx	r0, r3, #19, #4
 8009556:	0ddc      	lsrs	r4, r3, #23
 8009558:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800955c:	05e4      	lsls	r4, r4, #23
 800955e:	ed90 5b00 	vldr	d5, [r0]
 8009562:	1b12      	subs	r2, r2, r4
 8009564:	ee07 2a90 	vmov	s15, r2
 8009568:	ed91 4b42 	vldr	d4, [r1, #264]	; 0x108
 800956c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009570:	eea5 6b07 	vfma.f64	d6, d5, d7
 8009574:	eeb0 7b46 	vmov.f64	d7, d6
 8009578:	ee26 5b06 	vmul.f64	d5, d6, d6
 800957c:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 8009580:	eea4 6b07 	vfma.f64	d6, d4, d7
 8009584:	ed91 4b40 	vldr	d4, [r1, #256]	; 0x100
 8009588:	15db      	asrs	r3, r3, #23
 800958a:	eea4 6b05 	vfma.f64	d6, d4, d5
 800958e:	ed90 4b02 	vldr	d4, [r0, #8]
 8009592:	ee00 3a10 	vmov	s0, r3
 8009596:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800959a:	ee30 0b04 	vadd.f64	d0, d0, d4
 800959e:	ed91 4b46 	vldr	d4, [r1, #280]	; 0x118
 80095a2:	eea4 0b07 	vfma.f64	d0, d4, d7
 80095a6:	eea5 0b06 	vfma.f64	d0, d5, d6
 80095aa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80095ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095b2:	4770      	bx	lr
 80095b4:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80095c4 <log2f+0xcc>
 80095b8:	e7f9      	b.n	80095ae <log2f+0xb6>
 80095ba:	bf00      	nop
 80095bc:	4b000000 	.word	0x4b000000
 80095c0:	0800e338 	.word	0x0800e338
 80095c4:	00000000 	.word	0x00000000

080095c8 <checkint>:
 80095c8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80095cc:	2b7e      	cmp	r3, #126	; 0x7e
 80095ce:	dd10      	ble.n	80095f2 <checkint+0x2a>
 80095d0:	2b96      	cmp	r3, #150	; 0x96
 80095d2:	dc0c      	bgt.n	80095ee <checkint+0x26>
 80095d4:	2201      	movs	r2, #1
 80095d6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80095da:	fa02 f303 	lsl.w	r3, r2, r3
 80095de:	1e5a      	subs	r2, r3, #1
 80095e0:	4202      	tst	r2, r0
 80095e2:	d106      	bne.n	80095f2 <checkint+0x2a>
 80095e4:	4203      	tst	r3, r0
 80095e6:	bf0c      	ite	eq
 80095e8:	2002      	moveq	r0, #2
 80095ea:	2001      	movne	r0, #1
 80095ec:	4770      	bx	lr
 80095ee:	2002      	movs	r0, #2
 80095f0:	4770      	bx	lr
 80095f2:	2000      	movs	r0, #0
 80095f4:	4770      	bx	lr
	...

080095f8 <powf>:
 80095f8:	ee10 1a10 	vmov	r1, s0
 80095fc:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8009600:	ee10 4a90 	vmov	r4, s1
 8009604:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8009608:	0062      	lsls	r2, r4, #1
 800960a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800960e:	eef0 4a60 	vmov.f32	s9, s1
 8009612:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8009616:	4b92      	ldr	r3, [pc, #584]	; (8009860 <powf+0x268>)
 8009618:	d255      	bcs.n	80096c6 <powf+0xce>
 800961a:	4298      	cmp	r0, r3
 800961c:	d855      	bhi.n	80096ca <powf+0xd2>
 800961e:	2000      	movs	r0, #0
 8009620:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 8009624:	4a8f      	ldr	r2, [pc, #572]	; (8009864 <powf+0x26c>)
 8009626:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
 800962a:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 800962e:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8009632:	0ddb      	lsrs	r3, r3, #23
 8009634:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8009638:	05db      	lsls	r3, r3, #23
 800963a:	ed94 6b00 	vldr	d6, [r4]
 800963e:	1ac9      	subs	r1, r1, r3
 8009640:	ee07 1a90 	vmov	s15, r1
 8009644:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 8009648:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800964c:	eea6 2b07 	vfma.f64	d2, d6, d7
 8009650:	ed92 7b42 	vldr	d7, [r2, #264]	; 0x108
 8009654:	ee22 6b02 	vmul.f64	d6, d2, d2
 8009658:	eea2 7b05 	vfma.f64	d7, d2, d5
 800965c:	15db      	asrs	r3, r3, #23
 800965e:	ed94 5b02 	vldr	d5, [r4, #8]
 8009662:	ee00 3a10 	vmov	s0, r3
 8009666:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800966a:	ee30 0b05 	vadd.f64	d0, d0, d5
 800966e:	ed92 5b48 	vldr	d5, [r2, #288]	; 0x120
 8009672:	ed92 3b44 	vldr	d3, [r2, #272]	; 0x110
 8009676:	eea2 0b05 	vfma.f64	d0, d2, d5
 800967a:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 800967e:	eea2 5b03 	vfma.f64	d5, d2, d3
 8009682:	eea6 0b05 	vfma.f64	d0, d6, d5
 8009686:	ee26 6b06 	vmul.f64	d6, d6, d6
 800968a:	eea7 0b06 	vfma.f64	d0, d7, d6
 800968e:	eeb7 7ae4 	vcvt.f64.f32	d7, s9
 8009692:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009696:	ee10 3a90 	vmov	r3, s1
 800969a:	2500      	movs	r5, #0
 800969c:	0bda      	lsrs	r2, r3, #15
 800969e:	2300      	movs	r3, #0
 80096a0:	b292      	uxth	r2, r2
 80096a2:	f248 04be 	movw	r4, #32958	; 0x80be
 80096a6:	429d      	cmp	r5, r3
 80096a8:	bf08      	it	eq
 80096aa:	4294      	cmpeq	r4, r2
 80096ac:	f080 8094 	bcs.w	80097d8 <powf+0x1e0>
 80096b0:	ed9f 7b65 	vldr	d7, [pc, #404]	; 8009848 <powf+0x250>
 80096b4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80096b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096bc:	dd76      	ble.n	80097ac <powf+0x1b4>
 80096be:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 80096c2:	f000 bfad 	b.w	800a620 <__math_oflowf>
 80096c6:	4298      	cmp	r0, r3
 80096c8:	d92d      	bls.n	8009726 <powf+0x12e>
 80096ca:	b952      	cbnz	r2, 80096e2 <powf+0xea>
 80096cc:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 80096d0:	005b      	lsls	r3, r3, #1
 80096d2:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 80096d6:	f240 80ae 	bls.w	8009836 <powf+0x23e>
 80096da:	ee30 0a24 	vadd.f32	s0, s0, s9
 80096de:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80096e2:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 80096e6:	d105      	bne.n	80096f4 <powf+0xfc>
 80096e8:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80096ec:	0064      	lsls	r4, r4, #1
 80096ee:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80096f2:	e7f0      	b.n	80096d6 <powf+0xde>
 80096f4:	004b      	lsls	r3, r1, #1
 80096f6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80096fa:	d8ee      	bhi.n	80096da <powf+0xe2>
 80096fc:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8009700:	d1eb      	bne.n	80096da <powf+0xe2>
 8009702:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8009706:	f000 8096 	beq.w	8009836 <powf+0x23e>
 800970a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800970e:	ea6f 0404 	mvn.w	r4, r4
 8009712:	bf34      	ite	cc
 8009714:	2300      	movcc	r3, #0
 8009716:	2301      	movcs	r3, #1
 8009718:	0fe4      	lsrs	r4, r4, #31
 800971a:	42a3      	cmp	r3, r4
 800971c:	f040 808e 	bne.w	800983c <powf+0x244>
 8009720:	ee24 0aa4 	vmul.f32	s0, s9, s9
 8009724:	e7db      	b.n	80096de <powf+0xe6>
 8009726:	004d      	lsls	r5, r1, #1
 8009728:	1e6a      	subs	r2, r5, #1
 800972a:	429a      	cmp	r2, r3
 800972c:	d91b      	bls.n	8009766 <powf+0x16e>
 800972e:	2900      	cmp	r1, #0
 8009730:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009734:	da0e      	bge.n	8009754 <powf+0x15c>
 8009736:	ee10 0a90 	vmov	r0, s1
 800973a:	f7ff ff45 	bl	80095c8 <checkint>
 800973e:	2801      	cmp	r0, #1
 8009740:	d108      	bne.n	8009754 <powf+0x15c>
 8009742:	eeb1 0a40 	vneg.f32	s0, s0
 8009746:	b93d      	cbnz	r5, 8009758 <powf+0x160>
 8009748:	2c00      	cmp	r4, #0
 800974a:	dac8      	bge.n	80096de <powf+0xe6>
 800974c:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8009750:	f000 bf6c 	b.w	800a62c <__math_divzerof>
 8009754:	2000      	movs	r0, #0
 8009756:	e7f6      	b.n	8009746 <powf+0x14e>
 8009758:	2c00      	cmp	r4, #0
 800975a:	dac0      	bge.n	80096de <powf+0xe6>
 800975c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009760:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8009764:	e7bb      	b.n	80096de <powf+0xe6>
 8009766:	2900      	cmp	r1, #0
 8009768:	da1e      	bge.n	80097a8 <powf+0x1b0>
 800976a:	ee10 0a90 	vmov	r0, s1
 800976e:	f7ff ff2b 	bl	80095c8 <checkint>
 8009772:	b918      	cbnz	r0, 800977c <powf+0x184>
 8009774:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8009778:	f000 bf68 	b.w	800a64c <__math_invalidf>
 800977c:	2801      	cmp	r0, #1
 800977e:	bf0c      	ite	eq
 8009780:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8009784:	2000      	movne	r0, #0
 8009786:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800978a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800978e:	f4bf af47 	bcs.w	8009620 <powf+0x28>
 8009792:	eddf 0a35 	vldr	s1, [pc, #212]	; 8009868 <powf+0x270>
 8009796:	ee20 0a20 	vmul.f32	s0, s0, s1
 800979a:	ee10 3a10 	vmov	r3, s0
 800979e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097a2:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 80097a6:	e73b      	b.n	8009620 <powf+0x28>
 80097a8:	2000      	movs	r0, #0
 80097aa:	e7ee      	b.n	800978a <powf+0x192>
 80097ac:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8009850 <powf+0x258>
 80097b0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80097b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097b8:	d803      	bhi.n	80097c2 <powf+0x1ca>
 80097ba:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 80097be:	f000 bf23 	b.w	800a608 <__math_uflowf>
 80097c2:	ed9f 7b25 	vldr	d7, [pc, #148]	; 8009858 <powf+0x260>
 80097c6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80097ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ce:	d503      	bpl.n	80097d8 <powf+0x1e0>
 80097d0:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 80097d4:	f000 bf1e 	b.w	800a614 <__math_may_uflowf>
 80097d8:	4924      	ldr	r1, [pc, #144]	; (800986c <powf+0x274>)
 80097da:	ed91 7b40 	vldr	d7, [r1, #256]	; 0x100
 80097de:	ee30 6b07 	vadd.f64	d6, d0, d7
 80097e2:	ec55 4b16 	vmov	r4, r5, d6
 80097e6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80097ea:	f004 021f 	and.w	r2, r4, #31
 80097ee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80097f2:	ed91 6b46 	vldr	d6, [r1, #280]	; 0x118
 80097f6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80097fa:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80097fe:	e9d2 6700 	ldrd	r6, r7, [r2]
 8009802:	eea0 7b06 	vfma.f64	d7, d0, d6
 8009806:	1824      	adds	r4, r4, r0
 8009808:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 800980c:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 8009810:	2000      	movs	r0, #0
 8009812:	1982      	adds	r2, r0, r6
 8009814:	ea4f 31c4 	mov.w	r1, r4, lsl #15
 8009818:	eb41 0307 	adc.w	r3, r1, r7
 800981c:	eea0 6b05 	vfma.f64	d6, d0, d5
 8009820:	ee20 0b00 	vmul.f64	d0, d0, d0
 8009824:	eea6 7b00 	vfma.f64	d7, d6, d0
 8009828:	ec43 2b16 	vmov	d6, r2, r3
 800982c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8009830:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009834:	e753      	b.n	80096de <powf+0xe6>
 8009836:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800983a:	e750      	b.n	80096de <powf+0xe6>
 800983c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8009870 <powf+0x278>
 8009840:	e74d      	b.n	80096de <powf+0xe6>
 8009842:	bf00      	nop
 8009844:	f3af 8000 	nop.w
 8009848:	ffd1d571 	.word	0xffd1d571
 800984c:	405fffff 	.word	0x405fffff
 8009850:	00000000 	.word	0x00000000
 8009854:	c062c000 	.word	0xc062c000
 8009858:	00000000 	.word	0x00000000
 800985c:	c062a000 	.word	0xc062a000
 8009860:	fefffffe 	.word	0xfefffffe
 8009864:	0800e578 	.word	0x0800e578
 8009868:	4b000000 	.word	0x4b000000
 800986c:	0800e1f0 	.word	0x0800e1f0
 8009870:	00000000 	.word	0x00000000

08009874 <tanf>:
 8009874:	ee10 3a10 	vmov	r3, s0
 8009878:	b507      	push	{r0, r1, r2, lr}
 800987a:	4a10      	ldr	r2, [pc, #64]	; (80098bc <tanf+0x48>)
 800987c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009880:	4293      	cmp	r3, r2
 8009882:	dc05      	bgt.n	8009890 <tanf+0x1c>
 8009884:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80098c0 <tanf+0x4c>
 8009888:	2001      	movs	r0, #1
 800988a:	f000 fdbf 	bl	800a40c <__kernel_tanf>
 800988e:	e004      	b.n	800989a <tanf+0x26>
 8009890:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009894:	db04      	blt.n	80098a0 <tanf+0x2c>
 8009896:	ee30 0a40 	vsub.f32	s0, s0, s0
 800989a:	b003      	add	sp, #12
 800989c:	f85d fb04 	ldr.w	pc, [sp], #4
 80098a0:	4668      	mov	r0, sp
 80098a2:	f000 f997 	bl	8009bd4 <__ieee754_rem_pio2f>
 80098a6:	0040      	lsls	r0, r0, #1
 80098a8:	f000 0002 	and.w	r0, r0, #2
 80098ac:	f1c0 0001 	rsb	r0, r0, #1
 80098b0:	eddd 0a01 	vldr	s1, [sp, #4]
 80098b4:	ed9d 0a00 	vldr	s0, [sp]
 80098b8:	e7e7      	b.n	800988a <tanf+0x16>
 80098ba:	bf00      	nop
 80098bc:	3f490fda 	.word	0x3f490fda
 80098c0:	00000000 	.word	0x00000000

080098c4 <tanhf>:
 80098c4:	b510      	push	{r4, lr}
 80098c6:	ee10 4a10 	vmov	r4, s0
 80098ca:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80098ce:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80098d2:	ed2d 8b02 	vpush	{d8}
 80098d6:	eef0 7a40 	vmov.f32	s15, s0
 80098da:	db0c      	blt.n	80098f6 <tanhf+0x32>
 80098dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098e0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80098e4:	2c00      	cmp	r4, #0
 80098e6:	bfac      	ite	ge
 80098e8:	ee30 0a07 	vaddge.f32	s0, s0, s14
 80098ec:	ee30 0a47 	vsublt.f32	s0, s0, s14
 80098f0:	ecbd 8b02 	vpop	{d8}
 80098f4:	bd10      	pop	{r4, pc}
 80098f6:	4a1b      	ldr	r2, [pc, #108]	; (8009964 <tanhf+0xa0>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	dc30      	bgt.n	800995e <tanhf+0x9a>
 80098fc:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8009900:	da06      	bge.n	8009910 <tanhf+0x4c>
 8009902:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009906:	ee37 0a80 	vadd.f32	s0, s15, s0
 800990a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800990e:	e7ef      	b.n	80098f0 <tanhf+0x2c>
 8009910:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8009914:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8009918:	db12      	blt.n	8009940 <tanhf+0x7c>
 800991a:	f7ff fd7d 	bl	8009418 <fabsf>
 800991e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009922:	f000 fead 	bl	800a680 <expm1f>
 8009926:	ee30 0a08 	vadd.f32	s0, s0, s16
 800992a:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800992e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009932:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009936:	2c00      	cmp	r4, #0
 8009938:	bfb8      	it	lt
 800993a:	eeb1 0a40 	vneglt.f32	s0, s0
 800993e:	e7d7      	b.n	80098f0 <tanhf+0x2c>
 8009940:	f7ff fd6a 	bl	8009418 <fabsf>
 8009944:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8009948:	ee20 0a27 	vmul.f32	s0, s0, s15
 800994c:	f000 fe98 	bl	800a680 <expm1f>
 8009950:	ee70 7a08 	vadd.f32	s15, s0, s16
 8009954:	eeb1 7a40 	vneg.f32	s14, s0
 8009958:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800995c:	e7eb      	b.n	8009936 <tanhf+0x72>
 800995e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009962:	e7e8      	b.n	8009936 <tanhf+0x72>
 8009964:	41afffff 	.word	0x41afffff

08009968 <log10f>:
 8009968:	b500      	push	{lr}
 800996a:	ed2d 8b02 	vpush	{d8}
 800996e:	b08b      	sub	sp, #44	; 0x2c
 8009970:	eeb0 8a40 	vmov.f32	s16, s0
 8009974:	f000 f8d8 	bl	8009b28 <__ieee754_log10f>
 8009978:	4b2f      	ldr	r3, [pc, #188]	; (8009a38 <log10f+0xd0>)
 800997a:	f993 3000 	ldrsb.w	r3, [r3]
 800997e:	1c5a      	adds	r2, r3, #1
 8009980:	d055      	beq.n	8009a2e <log10f+0xc6>
 8009982:	eeb4 8a48 	vcmp.f32	s16, s16
 8009986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800998a:	d650      	bvs.n	8009a2e <log10f+0xc6>
 800998c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009994:	d84b      	bhi.n	8009a2e <log10f+0xc6>
 8009996:	4a29      	ldr	r2, [pc, #164]	; (8009a3c <log10f+0xd4>)
 8009998:	9201      	str	r2, [sp, #4]
 800999a:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
 800999e:	2200      	movs	r2, #0
 80099a0:	9208      	str	r2, [sp, #32]
 80099a2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80099a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80099aa:	b993      	cbnz	r3, 80099d2 <log10f+0x6a>
 80099ac:	4924      	ldr	r1, [pc, #144]	; (8009a40 <log10f+0xd8>)
 80099ae:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80099b2:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 80099b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80099be:	d025      	beq.n	8009a0c <log10f+0xa4>
 80099c0:	2201      	movs	r2, #1
 80099c2:	2b02      	cmp	r3, #2
 80099c4:	9200      	str	r2, [sp, #0]
 80099c6:	d116      	bne.n	80099f6 <log10f+0x8e>
 80099c8:	f7ff fc76 	bl	80092b8 <__errno>
 80099cc:	2321      	movs	r3, #33	; 0x21
 80099ce:	6003      	str	r3, [r0, #0]
 80099d0:	e016      	b.n	8009a00 <log10f+0x98>
 80099d2:	491c      	ldr	r1, [pc, #112]	; (8009a44 <log10f+0xdc>)
 80099d4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80099d8:	2000      	movs	r0, #0
 80099da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80099e2:	d1ed      	bne.n	80099c0 <log10f+0x58>
 80099e4:	2202      	movs	r2, #2
 80099e6:	4293      	cmp	r3, r2
 80099e8:	9200      	str	r2, [sp, #0]
 80099ea:	d111      	bne.n	8009a10 <log10f+0xa8>
 80099ec:	f7ff fc64 	bl	80092b8 <__errno>
 80099f0:	2322      	movs	r3, #34	; 0x22
 80099f2:	6003      	str	r3, [r0, #0]
 80099f4:	e011      	b.n	8009a1a <log10f+0xb2>
 80099f6:	4668      	mov	r0, sp
 80099f8:	f000 fe37 	bl	800a66a <matherr>
 80099fc:	2800      	cmp	r0, #0
 80099fe:	d0e3      	beq.n	80099c8 <log10f+0x60>
 8009a00:	4811      	ldr	r0, [pc, #68]	; (8009a48 <log10f+0xe0>)
 8009a02:	f000 fe35 	bl	800a670 <nan>
 8009a06:	ed8d 0b06 	vstr	d0, [sp, #24]
 8009a0a:	e006      	b.n	8009a1a <log10f+0xb2>
 8009a0c:	2302      	movs	r3, #2
 8009a0e:	9300      	str	r3, [sp, #0]
 8009a10:	4668      	mov	r0, sp
 8009a12:	f000 fe2a 	bl	800a66a <matherr>
 8009a16:	2800      	cmp	r0, #0
 8009a18:	d0e8      	beq.n	80099ec <log10f+0x84>
 8009a1a:	9b08      	ldr	r3, [sp, #32]
 8009a1c:	b11b      	cbz	r3, 8009a26 <log10f+0xbe>
 8009a1e:	f7ff fc4b 	bl	80092b8 <__errno>
 8009a22:	9b08      	ldr	r3, [sp, #32]
 8009a24:	6003      	str	r3, [r0, #0]
 8009a26:	ed9d 0b06 	vldr	d0, [sp, #24]
 8009a2a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009a2e:	b00b      	add	sp, #44	; 0x2c
 8009a30:	ecbd 8b02 	vpop	{d8}
 8009a34:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a38:	20000100 	.word	0x20000100
 8009a3c:	0800e6a0 	.word	0x0800e6a0
 8009a40:	c7efffff 	.word	0xc7efffff
 8009a44:	fff00000 	.word	0xfff00000
 8009a48:	0800e6a6 	.word	0x0800e6a6
 8009a4c:	00000000 	.word	0x00000000

08009a50 <sinhf>:
 8009a50:	b530      	push	{r4, r5, lr}
 8009a52:	ed2d 8b02 	vpush	{d8}
 8009a56:	4c32      	ldr	r4, [pc, #200]	; (8009b20 <sinhf+0xd0>)
 8009a58:	b08b      	sub	sp, #44	; 0x2c
 8009a5a:	eef0 8a40 	vmov.f32	s17, s0
 8009a5e:	f000 f9e5 	bl	8009e2c <__ieee754_sinhf>
 8009a62:	f994 3000 	ldrsb.w	r3, [r4]
 8009a66:	3301      	adds	r3, #1
 8009a68:	eeb0 8a40 	vmov.f32	s16, s0
 8009a6c:	d030      	beq.n	8009ad0 <sinhf+0x80>
 8009a6e:	f000 ff31 	bl	800a8d4 <finitef>
 8009a72:	4605      	mov	r5, r0
 8009a74:	bb60      	cbnz	r0, 8009ad0 <sinhf+0x80>
 8009a76:	eeb0 0a68 	vmov.f32	s0, s17
 8009a7a:	f000 ff2b 	bl	800a8d4 <finitef>
 8009a7e:	b338      	cbz	r0, 8009ad0 <sinhf+0x80>
 8009a80:	2303      	movs	r3, #3
 8009a82:	9300      	str	r3, [sp, #0]
 8009a84:	4b27      	ldr	r3, [pc, #156]	; (8009b24 <sinhf+0xd4>)
 8009a86:	9301      	str	r3, [sp, #4]
 8009a88:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
 8009a8c:	f994 3000 	ldrsb.w	r3, [r4]
 8009a90:	9508      	str	r5, [sp, #32]
 8009a92:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009a96:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a9a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8009a9e:	b9eb      	cbnz	r3, 8009adc <sinhf+0x8c>
 8009aa0:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8009b00 <sinhf+0xb0>
 8009aa4:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8009b08 <sinhf+0xb8>
 8009aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aac:	fe37 7b06 	vselgt.f64	d7, d7, d6
 8009ab0:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009ab4:	4668      	mov	r0, sp
 8009ab6:	f000 fdd8 	bl	800a66a <matherr>
 8009aba:	b1d8      	cbz	r0, 8009af4 <sinhf+0xa4>
 8009abc:	9b08      	ldr	r3, [sp, #32]
 8009abe:	b11b      	cbz	r3, 8009ac8 <sinhf+0x78>
 8009ac0:	f7ff fbfa 	bl	80092b8 <__errno>
 8009ac4:	9b08      	ldr	r3, [sp, #32]
 8009ac6:	6003      	str	r3, [r0, #0]
 8009ac8:	ed9d 8b06 	vldr	d8, [sp, #24]
 8009acc:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
 8009ad0:	eeb0 0a48 	vmov.f32	s0, s16
 8009ad4:	b00b      	add	sp, #44	; 0x2c
 8009ad6:	ecbd 8b02 	vpop	{d8}
 8009ada:	bd30      	pop	{r4, r5, pc}
 8009adc:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8009b10 <sinhf+0xc0>
 8009ae0:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8009b18 <sinhf+0xc8>
 8009ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ae8:	fe37 7b06 	vselgt.f64	d7, d7, d6
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009af2:	d1df      	bne.n	8009ab4 <sinhf+0x64>
 8009af4:	f7ff fbe0 	bl	80092b8 <__errno>
 8009af8:	2322      	movs	r3, #34	; 0x22
 8009afa:	6003      	str	r3, [r0, #0]
 8009afc:	e7de      	b.n	8009abc <sinhf+0x6c>
 8009afe:	bf00      	nop
 8009b00:	e0000000 	.word	0xe0000000
 8009b04:	47efffff 	.word	0x47efffff
 8009b08:	e0000000 	.word	0xe0000000
 8009b0c:	c7efffff 	.word	0xc7efffff
 8009b10:	00000000 	.word	0x00000000
 8009b14:	7ff00000 	.word	0x7ff00000
 8009b18:	00000000 	.word	0x00000000
 8009b1c:	fff00000 	.word	0xfff00000
 8009b20:	20000100 	.word	0x20000100
 8009b24:	0800e6a7 	.word	0x0800e6a7

08009b28 <__ieee754_log10f>:
 8009b28:	b508      	push	{r3, lr}
 8009b2a:	ee10 2a10 	vmov	r2, s0
 8009b2e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8009b32:	ed2d 8b02 	vpush	{d8}
 8009b36:	d108      	bne.n	8009b4a <__ieee754_log10f+0x22>
 8009b38:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8009bbc <__ieee754_log10f+0x94>
 8009b3c:	eddf 7a20 	vldr	s15, [pc, #128]	; 8009bc0 <__ieee754_log10f+0x98>
 8009b40:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009b44:	ecbd 8b02 	vpop	{d8}
 8009b48:	bd08      	pop	{r3, pc}
 8009b4a:	2a00      	cmp	r2, #0
 8009b4c:	da02      	bge.n	8009b54 <__ieee754_log10f+0x2c>
 8009b4e:	ee30 7a40 	vsub.f32	s14, s0, s0
 8009b52:	e7f3      	b.n	8009b3c <__ieee754_log10f+0x14>
 8009b54:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009b58:	db02      	blt.n	8009b60 <__ieee754_log10f+0x38>
 8009b5a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009b5e:	e7f1      	b.n	8009b44 <__ieee754_log10f+0x1c>
 8009b60:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8009b64:	bfbf      	itttt	lt
 8009b66:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 8009bc4 <__ieee754_log10f+0x9c>
 8009b6a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8009b6e:	f06f 0118 	mvnlt.w	r1, #24
 8009b72:	ee17 2a90 	vmovlt	r2, s15
 8009b76:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8009b7a:	bfa8      	it	ge
 8009b7c:	2100      	movge	r1, #0
 8009b7e:	3b7f      	subs	r3, #127	; 0x7f
 8009b80:	440b      	add	r3, r1
 8009b82:	0fd9      	lsrs	r1, r3, #31
 8009b84:	440b      	add	r3, r1
 8009b86:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8009b8a:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 8009b8e:	ee07 3a90 	vmov	s15, r3
 8009b92:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 8009b96:	ee00 3a10 	vmov	s0, r3
 8009b9a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8009b9e:	f7ff fc43 	bl	8009428 <logf>
 8009ba2:	eddf 7a09 	vldr	s15, [pc, #36]	; 8009bc8 <__ieee754_log10f+0xa0>
 8009ba6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009baa:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009bcc <__ieee754_log10f+0xa4>
 8009bae:	eea8 0a27 	vfma.f32	s0, s16, s15
 8009bb2:	eddf 7a07 	vldr	s15, [pc, #28]	; 8009bd0 <__ieee754_log10f+0xa8>
 8009bb6:	eea8 0a27 	vfma.f32	s0, s16, s15
 8009bba:	e7c3      	b.n	8009b44 <__ieee754_log10f+0x1c>
 8009bbc:	cc000000 	.word	0xcc000000
 8009bc0:	00000000 	.word	0x00000000
 8009bc4:	4c000000 	.word	0x4c000000
 8009bc8:	3ede5bd9 	.word	0x3ede5bd9
 8009bcc:	355427db 	.word	0x355427db
 8009bd0:	3e9a2080 	.word	0x3e9a2080

08009bd4 <__ieee754_rem_pio2f>:
 8009bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bd6:	ee10 6a10 	vmov	r6, s0
 8009bda:	4b86      	ldr	r3, [pc, #536]	; (8009df4 <__ieee754_rem_pio2f+0x220>)
 8009bdc:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8009be0:	429c      	cmp	r4, r3
 8009be2:	b087      	sub	sp, #28
 8009be4:	4605      	mov	r5, r0
 8009be6:	dc05      	bgt.n	8009bf4 <__ieee754_rem_pio2f+0x20>
 8009be8:	2300      	movs	r3, #0
 8009bea:	ed85 0a00 	vstr	s0, [r5]
 8009bee:	6043      	str	r3, [r0, #4]
 8009bf0:	2000      	movs	r0, #0
 8009bf2:	e020      	b.n	8009c36 <__ieee754_rem_pio2f+0x62>
 8009bf4:	4b80      	ldr	r3, [pc, #512]	; (8009df8 <__ieee754_rem_pio2f+0x224>)
 8009bf6:	429c      	cmp	r4, r3
 8009bf8:	dc38      	bgt.n	8009c6c <__ieee754_rem_pio2f+0x98>
 8009bfa:	2e00      	cmp	r6, #0
 8009bfc:	f024 040f 	bic.w	r4, r4, #15
 8009c00:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8009dfc <__ieee754_rem_pio2f+0x228>
 8009c04:	4b7e      	ldr	r3, [pc, #504]	; (8009e00 <__ieee754_rem_pio2f+0x22c>)
 8009c06:	dd18      	ble.n	8009c3a <__ieee754_rem_pio2f+0x66>
 8009c08:	429c      	cmp	r4, r3
 8009c0a:	ee70 7a47 	vsub.f32	s15, s0, s14
 8009c0e:	bf09      	itett	eq
 8009c10:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8009e04 <__ieee754_rem_pio2f+0x230>
 8009c14:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8009e08 <__ieee754_rem_pio2f+0x234>
 8009c18:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8009c1c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8009e0c <__ieee754_rem_pio2f+0x238>
 8009c20:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8009c24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009c28:	edc0 6a00 	vstr	s13, [r0]
 8009c2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c30:	edc0 7a01 	vstr	s15, [r0, #4]
 8009c34:	2001      	movs	r0, #1
 8009c36:	b007      	add	sp, #28
 8009c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c3a:	429c      	cmp	r4, r3
 8009c3c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8009c40:	bf09      	itett	eq
 8009c42:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8009e04 <__ieee754_rem_pio2f+0x230>
 8009c46:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8009e08 <__ieee754_rem_pio2f+0x234>
 8009c4a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8009c4e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8009e0c <__ieee754_rem_pio2f+0x238>
 8009c52:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009c56:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009c5a:	edc0 6a00 	vstr	s13, [r0]
 8009c5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c62:	edc0 7a01 	vstr	s15, [r0, #4]
 8009c66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c6a:	e7e4      	b.n	8009c36 <__ieee754_rem_pio2f+0x62>
 8009c6c:	4b68      	ldr	r3, [pc, #416]	; (8009e10 <__ieee754_rem_pio2f+0x23c>)
 8009c6e:	429c      	cmp	r4, r3
 8009c70:	dc71      	bgt.n	8009d56 <__ieee754_rem_pio2f+0x182>
 8009c72:	f7ff fbd1 	bl	8009418 <fabsf>
 8009c76:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8009e14 <__ieee754_rem_pio2f+0x240>
 8009c7a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009c7e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009c82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c86:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8009c8a:	ee17 0a90 	vmov	r0, s15
 8009c8e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8009dfc <__ieee754_rem_pio2f+0x228>
 8009c92:	eeb1 7a46 	vneg.f32	s14, s12
 8009c96:	eea7 0a27 	vfma.f32	s0, s14, s15
 8009c9a:	281f      	cmp	r0, #31
 8009c9c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8009e08 <__ieee754_rem_pio2f+0x234>
 8009ca0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009ca4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009ca8:	ee16 3a90 	vmov	r3, s13
 8009cac:	dc1c      	bgt.n	8009ce8 <__ieee754_rem_pio2f+0x114>
 8009cae:	1e47      	subs	r7, r0, #1
 8009cb0:	4959      	ldr	r1, [pc, #356]	; (8009e18 <__ieee754_rem_pio2f+0x244>)
 8009cb2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8009cb6:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8009cba:	428a      	cmp	r2, r1
 8009cbc:	d014      	beq.n	8009ce8 <__ieee754_rem_pio2f+0x114>
 8009cbe:	602b      	str	r3, [r5, #0]
 8009cc0:	ed95 7a00 	vldr	s14, [r5]
 8009cc4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009cc8:	2e00      	cmp	r6, #0
 8009cca:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009cce:	ed85 0a01 	vstr	s0, [r5, #4]
 8009cd2:	dab0      	bge.n	8009c36 <__ieee754_rem_pio2f+0x62>
 8009cd4:	eeb1 7a47 	vneg.f32	s14, s14
 8009cd8:	eeb1 0a40 	vneg.f32	s0, s0
 8009cdc:	ed85 7a00 	vstr	s14, [r5]
 8009ce0:	ed85 0a01 	vstr	s0, [r5, #4]
 8009ce4:	4240      	negs	r0, r0
 8009ce6:	e7a6      	b.n	8009c36 <__ieee754_rem_pio2f+0x62>
 8009ce8:	15e4      	asrs	r4, r4, #23
 8009cea:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009cee:	1aa2      	subs	r2, r4, r2
 8009cf0:	2a08      	cmp	r2, #8
 8009cf2:	dde4      	ble.n	8009cbe <__ieee754_rem_pio2f+0xea>
 8009cf4:	eddf 7a43 	vldr	s15, [pc, #268]	; 8009e04 <__ieee754_rem_pio2f+0x230>
 8009cf8:	eef0 6a40 	vmov.f32	s13, s0
 8009cfc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009d00:	ee30 0a66 	vsub.f32	s0, s0, s13
 8009d04:	eea7 0a27 	vfma.f32	s0, s14, s15
 8009d08:	eddf 7a40 	vldr	s15, [pc, #256]	; 8009e0c <__ieee754_rem_pio2f+0x238>
 8009d0c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8009d10:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8009d14:	eef0 7a40 	vmov.f32	s15, s0
 8009d18:	ee15 3a90 	vmov	r3, s11
 8009d1c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009d20:	1aa4      	subs	r4, r4, r2
 8009d22:	2c19      	cmp	r4, #25
 8009d24:	dc04      	bgt.n	8009d30 <__ieee754_rem_pio2f+0x15c>
 8009d26:	edc5 5a00 	vstr	s11, [r5]
 8009d2a:	eeb0 0a66 	vmov.f32	s0, s13
 8009d2e:	e7c7      	b.n	8009cc0 <__ieee754_rem_pio2f+0xec>
 8009d30:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8009e1c <__ieee754_rem_pio2f+0x248>
 8009d34:	eeb0 0a66 	vmov.f32	s0, s13
 8009d38:	eea7 0a25 	vfma.f32	s0, s14, s11
 8009d3c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8009d40:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009d44:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009e20 <__ieee754_rem_pio2f+0x24c>
 8009d48:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8009d4c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009d50:	ed85 7a00 	vstr	s14, [r5]
 8009d54:	e7b4      	b.n	8009cc0 <__ieee754_rem_pio2f+0xec>
 8009d56:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009d5a:	db06      	blt.n	8009d6a <__ieee754_rem_pio2f+0x196>
 8009d5c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009d60:	edc0 7a01 	vstr	s15, [r0, #4]
 8009d64:	edc0 7a00 	vstr	s15, [r0]
 8009d68:	e742      	b.n	8009bf0 <__ieee754_rem_pio2f+0x1c>
 8009d6a:	15e2      	asrs	r2, r4, #23
 8009d6c:	3a86      	subs	r2, #134	; 0x86
 8009d6e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8009d72:	ee07 3a90 	vmov	s15, r3
 8009d76:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009d7a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8009e24 <__ieee754_rem_pio2f+0x250>
 8009d7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009d82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d86:	ed8d 7a03 	vstr	s14, [sp, #12]
 8009d8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009d8e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009d92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009d96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d9a:	ed8d 7a04 	vstr	s14, [sp, #16]
 8009d9e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009da2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009daa:	edcd 7a05 	vstr	s15, [sp, #20]
 8009dae:	d11e      	bne.n	8009dee <__ieee754_rem_pio2f+0x21a>
 8009db0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8009db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009db8:	bf0c      	ite	eq
 8009dba:	2301      	moveq	r3, #1
 8009dbc:	2302      	movne	r3, #2
 8009dbe:	491a      	ldr	r1, [pc, #104]	; (8009e28 <__ieee754_rem_pio2f+0x254>)
 8009dc0:	9101      	str	r1, [sp, #4]
 8009dc2:	2102      	movs	r1, #2
 8009dc4:	9100      	str	r1, [sp, #0]
 8009dc6:	a803      	add	r0, sp, #12
 8009dc8:	4629      	mov	r1, r5
 8009dca:	f000 f89d 	bl	8009f08 <__kernel_rem_pio2f>
 8009dce:	2e00      	cmp	r6, #0
 8009dd0:	f6bf af31 	bge.w	8009c36 <__ieee754_rem_pio2f+0x62>
 8009dd4:	edd5 7a00 	vldr	s15, [r5]
 8009dd8:	eef1 7a67 	vneg.f32	s15, s15
 8009ddc:	edc5 7a00 	vstr	s15, [r5]
 8009de0:	edd5 7a01 	vldr	s15, [r5, #4]
 8009de4:	eef1 7a67 	vneg.f32	s15, s15
 8009de8:	edc5 7a01 	vstr	s15, [r5, #4]
 8009dec:	e77a      	b.n	8009ce4 <__ieee754_rem_pio2f+0x110>
 8009dee:	2303      	movs	r3, #3
 8009df0:	e7e5      	b.n	8009dbe <__ieee754_rem_pio2f+0x1ea>
 8009df2:	bf00      	nop
 8009df4:	3f490fd8 	.word	0x3f490fd8
 8009df8:	4016cbe3 	.word	0x4016cbe3
 8009dfc:	3fc90f80 	.word	0x3fc90f80
 8009e00:	3fc90fd0 	.word	0x3fc90fd0
 8009e04:	37354400 	.word	0x37354400
 8009e08:	37354443 	.word	0x37354443
 8009e0c:	2e85a308 	.word	0x2e85a308
 8009e10:	43490f80 	.word	0x43490f80
 8009e14:	3f22f984 	.word	0x3f22f984
 8009e18:	0800e6b0 	.word	0x0800e6b0
 8009e1c:	2e85a300 	.word	0x2e85a300
 8009e20:	248d3132 	.word	0x248d3132
 8009e24:	43800000 	.word	0x43800000
 8009e28:	0800e730 	.word	0x0800e730

08009e2c <__ieee754_sinhf>:
 8009e2c:	b510      	push	{r4, lr}
 8009e2e:	ee10 3a10 	vmov	r3, s0
 8009e32:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8009e36:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009e3a:	ed2d 8b02 	vpush	{d8}
 8009e3e:	eef0 7a40 	vmov.f32	s15, s0
 8009e42:	db06      	blt.n	8009e52 <__ieee754_sinhf+0x26>
 8009e44:	ee70 7a00 	vadd.f32	s15, s0, s0
 8009e48:	ecbd 8b02 	vpop	{d8}
 8009e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8009e50:	bd10      	pop	{r4, pc}
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	4b28      	ldr	r3, [pc, #160]	; (8009ef8 <__ieee754_sinhf+0xcc>)
 8009e56:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8009e5a:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 8009e5e:	fe28 8a88 	vselge.f32	s16, s17, s16
 8009e62:	429c      	cmp	r4, r3
 8009e64:	dc2a      	bgt.n	8009ebc <__ieee754_sinhf+0x90>
 8009e66:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 8009e6a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8009e6e:	da08      	bge.n	8009e82 <__ieee754_sinhf+0x56>
 8009e70:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8009efc <__ieee754_sinhf+0xd0>
 8009e74:	ee30 7a07 	vadd.f32	s14, s0, s14
 8009e78:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8009e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e80:	dce2      	bgt.n	8009e48 <__ieee754_sinhf+0x1c>
 8009e82:	eeb0 0a67 	vmov.f32	s0, s15
 8009e86:	f7ff fac7 	bl	8009418 <fabsf>
 8009e8a:	f000 fbf9 	bl	800a680 <expm1f>
 8009e8e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8009e92:	bfbb      	ittet	lt
 8009e94:	ee20 7a00 	vmullt.f32	s14, s0, s0
 8009e98:	ee70 8a28 	vaddlt.f32	s17, s0, s17
 8009e9c:	ee70 8a28 	vaddge.f32	s17, s0, s17
 8009ea0:	eec7 7a28 	vdivlt.f32	s15, s14, s17
 8009ea4:	bfad      	iteet	ge
 8009ea6:	eec0 7a28 	vdivge.f32	s15, s0, s17
 8009eaa:	eeb0 7a00 	vmovlt.f32	s14, #0	; 0x40000000  2.0
 8009eae:	eed0 7a07 	vfnmslt.f32	s15, s0, s14
 8009eb2:	ee77 7a80 	vaddge.f32	s15, s15, s0
 8009eb6:	ee67 7a88 	vmul.f32	s15, s15, s16
 8009eba:	e7c5      	b.n	8009e48 <__ieee754_sinhf+0x1c>
 8009ebc:	4b10      	ldr	r3, [pc, #64]	; (8009f00 <__ieee754_sinhf+0xd4>)
 8009ebe:	429c      	cmp	r4, r3
 8009ec0:	dc06      	bgt.n	8009ed0 <__ieee754_sinhf+0xa4>
 8009ec2:	f7ff faa9 	bl	8009418 <fabsf>
 8009ec6:	f7ff fa29 	bl	800931c <expf>
 8009eca:	ee60 7a08 	vmul.f32	s15, s0, s16
 8009ece:	e7bb      	b.n	8009e48 <__ieee754_sinhf+0x1c>
 8009ed0:	4b0c      	ldr	r3, [pc, #48]	; (8009f04 <__ieee754_sinhf+0xd8>)
 8009ed2:	429c      	cmp	r4, r3
 8009ed4:	dc0a      	bgt.n	8009eec <__ieee754_sinhf+0xc0>
 8009ed6:	f7ff fa9f 	bl	8009418 <fabsf>
 8009eda:	ee20 0a28 	vmul.f32	s0, s0, s17
 8009ede:	f7ff fa1d 	bl	800931c <expf>
 8009ee2:	ee68 7a00 	vmul.f32	s15, s16, s0
 8009ee6:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009eea:	e7ad      	b.n	8009e48 <__ieee754_sinhf+0x1c>
 8009eec:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8009efc <__ieee754_sinhf+0xd0>
 8009ef0:	ee60 7a07 	vmul.f32	s15, s0, s14
 8009ef4:	e7a8      	b.n	8009e48 <__ieee754_sinhf+0x1c>
 8009ef6:	bf00      	nop
 8009ef8:	41afffff 	.word	0x41afffff
 8009efc:	7cf0bdc2 	.word	0x7cf0bdc2
 8009f00:	42b17217 	.word	0x42b17217
 8009f04:	42b2d4fc 	.word	0x42b2d4fc

08009f08 <__kernel_rem_pio2f>:
 8009f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f0c:	ed2d 8b04 	vpush	{d8-d9}
 8009f10:	b0d7      	sub	sp, #348	; 0x15c
 8009f12:	469b      	mov	fp, r3
 8009f14:	460e      	mov	r6, r1
 8009f16:	4bbe      	ldr	r3, [pc, #760]	; (800a210 <__kernel_rem_pio2f+0x308>)
 8009f18:	9964      	ldr	r1, [sp, #400]	; 0x190
 8009f1a:	9002      	str	r0, [sp, #8]
 8009f1c:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8009f20:	9865      	ldr	r0, [sp, #404]	; 0x194
 8009f22:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800a220 <__kernel_rem_pio2f+0x318>
 8009f26:	1ed1      	subs	r1, r2, #3
 8009f28:	2308      	movs	r3, #8
 8009f2a:	fb91 f1f3 	sdiv	r1, r1, r3
 8009f2e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8009f32:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 8009f36:	1c4c      	adds	r4, r1, #1
 8009f38:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8009f3c:	eba1 050a 	sub.w	r5, r1, sl
 8009f40:	aa1a      	add	r2, sp, #104	; 0x68
 8009f42:	eb09 070a 	add.w	r7, r9, sl
 8009f46:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8009f4a:	4696      	mov	lr, r2
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	42bb      	cmp	r3, r7
 8009f50:	dd0f      	ble.n	8009f72 <__kernel_rem_pio2f+0x6a>
 8009f52:	af42      	add	r7, sp, #264	; 0x108
 8009f54:	2200      	movs	r2, #0
 8009f56:	454a      	cmp	r2, r9
 8009f58:	dc27      	bgt.n	8009faa <__kernel_rem_pio2f+0xa2>
 8009f5a:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8009f5e:	eb0b 0302 	add.w	r3, fp, r2
 8009f62:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8009f66:	9d02      	ldr	r5, [sp, #8]
 8009f68:	eddf 7aad 	vldr	s15, [pc, #692]	; 800a220 <__kernel_rem_pio2f+0x318>
 8009f6c:	f04f 0c00 	mov.w	ip, #0
 8009f70:	e015      	b.n	8009f9e <__kernel_rem_pio2f+0x96>
 8009f72:	42dd      	cmn	r5, r3
 8009f74:	bf5d      	ittte	pl
 8009f76:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8009f7a:	ee07 2a90 	vmovpl	s15, r2
 8009f7e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8009f82:	eef0 7a47 	vmovmi.f32	s15, s14
 8009f86:	ecee 7a01 	vstmia	lr!, {s15}
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	e7df      	b.n	8009f4e <__kernel_rem_pio2f+0x46>
 8009f8e:	ecf5 6a01 	vldmia	r5!, {s13}
 8009f92:	ed33 7a01 	vldmdb	r3!, {s14}
 8009f96:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009f9a:	f10c 0c01 	add.w	ip, ip, #1
 8009f9e:	45d4      	cmp	ip, sl
 8009fa0:	ddf5      	ble.n	8009f8e <__kernel_rem_pio2f+0x86>
 8009fa2:	ece7 7a01 	vstmia	r7!, {s15}
 8009fa6:	3201      	adds	r2, #1
 8009fa8:	e7d5      	b.n	8009f56 <__kernel_rem_pio2f+0x4e>
 8009faa:	ab06      	add	r3, sp, #24
 8009fac:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8009fb0:	9304      	str	r3, [sp, #16]
 8009fb2:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800a21c <__kernel_rem_pio2f+0x314>
 8009fb6:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800a218 <__kernel_rem_pio2f+0x310>
 8009fba:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8009fbe:	9303      	str	r3, [sp, #12]
 8009fc0:	464d      	mov	r5, r9
 8009fc2:	ab56      	add	r3, sp, #344	; 0x158
 8009fc4:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8009fc8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8009fcc:	3f01      	subs	r7, #1
 8009fce:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8009fd2:	00bf      	lsls	r7, r7, #2
 8009fd4:	ab56      	add	r3, sp, #344	; 0x158
 8009fd6:	19da      	adds	r2, r3, r7
 8009fd8:	3a4c      	subs	r2, #76	; 0x4c
 8009fda:	2300      	movs	r3, #0
 8009fdc:	1ae9      	subs	r1, r5, r3
 8009fde:	2900      	cmp	r1, #0
 8009fe0:	dc4c      	bgt.n	800a07c <__kernel_rem_pio2f+0x174>
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f000 fcc2 	bl	800a96c <scalbnf>
 8009fe8:	eeb0 8a40 	vmov.f32	s16, s0
 8009fec:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8009ff0:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009ff4:	f000 fc78 	bl	800a8e8 <floorf>
 8009ff8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8009ffc:	eea0 8a67 	vfms.f32	s16, s0, s15
 800a000:	2c00      	cmp	r4, #0
 800a002:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800a006:	edcd 7a01 	vstr	s15, [sp, #4]
 800a00a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a00e:	ee38 8a67 	vsub.f32	s16, s16, s15
 800a012:	dd48      	ble.n	800a0a6 <__kernel_rem_pio2f+0x19e>
 800a014:	1e69      	subs	r1, r5, #1
 800a016:	ab06      	add	r3, sp, #24
 800a018:	f1c4 0008 	rsb	r0, r4, #8
 800a01c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800a020:	9a01      	ldr	r2, [sp, #4]
 800a022:	fa4c f300 	asr.w	r3, ip, r0
 800a026:	441a      	add	r2, r3
 800a028:	4083      	lsls	r3, r0
 800a02a:	9201      	str	r2, [sp, #4]
 800a02c:	ebac 0203 	sub.w	r2, ip, r3
 800a030:	ab06      	add	r3, sp, #24
 800a032:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800a036:	f1c4 0307 	rsb	r3, r4, #7
 800a03a:	fa42 f803 	asr.w	r8, r2, r3
 800a03e:	f1b8 0f00 	cmp.w	r8, #0
 800a042:	dd41      	ble.n	800a0c8 <__kernel_rem_pio2f+0x1c0>
 800a044:	9b01      	ldr	r3, [sp, #4]
 800a046:	2000      	movs	r0, #0
 800a048:	3301      	adds	r3, #1
 800a04a:	9301      	str	r3, [sp, #4]
 800a04c:	4601      	mov	r1, r0
 800a04e:	4285      	cmp	r5, r0
 800a050:	dc6d      	bgt.n	800a12e <__kernel_rem_pio2f+0x226>
 800a052:	2c00      	cmp	r4, #0
 800a054:	dd04      	ble.n	800a060 <__kernel_rem_pio2f+0x158>
 800a056:	2c01      	cmp	r4, #1
 800a058:	d07e      	beq.n	800a158 <__kernel_rem_pio2f+0x250>
 800a05a:	2c02      	cmp	r4, #2
 800a05c:	f000 8086 	beq.w	800a16c <__kernel_rem_pio2f+0x264>
 800a060:	f1b8 0f02 	cmp.w	r8, #2
 800a064:	d130      	bne.n	800a0c8 <__kernel_rem_pio2f+0x1c0>
 800a066:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a06a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800a06e:	b359      	cbz	r1, 800a0c8 <__kernel_rem_pio2f+0x1c0>
 800a070:	4620      	mov	r0, r4
 800a072:	f000 fc7b 	bl	800a96c <scalbnf>
 800a076:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a07a:	e025      	b.n	800a0c8 <__kernel_rem_pio2f+0x1c0>
 800a07c:	ee60 7a28 	vmul.f32	s15, s0, s17
 800a080:	a806      	add	r0, sp, #24
 800a082:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a08a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800a08e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a092:	ee10 1a10 	vmov	r1, s0
 800a096:	ed32 0a01 	vldmdb	r2!, {s0}
 800a09a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800a09e:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	e79a      	b.n	8009fdc <__kernel_rem_pio2f+0xd4>
 800a0a6:	d106      	bne.n	800a0b6 <__kernel_rem_pio2f+0x1ae>
 800a0a8:	1e6b      	subs	r3, r5, #1
 800a0aa:	aa06      	add	r2, sp, #24
 800a0ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a0b0:	ea4f 2822 	mov.w	r8, r2, asr #8
 800a0b4:	e7c3      	b.n	800a03e <__kernel_rem_pio2f+0x136>
 800a0b6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a0ba:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a0be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0c2:	da31      	bge.n	800a128 <__kernel_rem_pio2f+0x220>
 800a0c4:	f04f 0800 	mov.w	r8, #0
 800a0c8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a0cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0d0:	f040 80a8 	bne.w	800a224 <__kernel_rem_pio2f+0x31c>
 800a0d4:	1e6b      	subs	r3, r5, #1
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	2200      	movs	r2, #0
 800a0da:	4548      	cmp	r0, r9
 800a0dc:	da4d      	bge.n	800a17a <__kernel_rem_pio2f+0x272>
 800a0de:	2a00      	cmp	r2, #0
 800a0e0:	f000 8087 	beq.w	800a1f2 <__kernel_rem_pio2f+0x2ea>
 800a0e4:	aa06      	add	r2, sp, #24
 800a0e6:	3c08      	subs	r4, #8
 800a0e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a0ec:	2900      	cmp	r1, #0
 800a0ee:	f000 808d 	beq.w	800a20c <__kernel_rem_pio2f+0x304>
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a0f8:	9302      	str	r3, [sp, #8]
 800a0fa:	f000 fc37 	bl	800a96c <scalbnf>
 800a0fe:	9b02      	ldr	r3, [sp, #8]
 800a100:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800a21c <__kernel_rem_pio2f+0x314>
 800a104:	0099      	lsls	r1, r3, #2
 800a106:	aa42      	add	r2, sp, #264	; 0x108
 800a108:	1850      	adds	r0, r2, r1
 800a10a:	1d05      	adds	r5, r0, #4
 800a10c:	461c      	mov	r4, r3
 800a10e:	2c00      	cmp	r4, #0
 800a110:	f280 80b8 	bge.w	800a284 <__kernel_rem_pio2f+0x37c>
 800a114:	2500      	movs	r5, #0
 800a116:	1b5c      	subs	r4, r3, r5
 800a118:	2c00      	cmp	r4, #0
 800a11a:	f2c0 80d8 	blt.w	800a2ce <__kernel_rem_pio2f+0x3c6>
 800a11e:	4f3d      	ldr	r7, [pc, #244]	; (800a214 <__kernel_rem_pio2f+0x30c>)
 800a120:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800a220 <__kernel_rem_pio2f+0x318>
 800a124:	2400      	movs	r4, #0
 800a126:	e0c6      	b.n	800a2b6 <__kernel_rem_pio2f+0x3ae>
 800a128:	f04f 0802 	mov.w	r8, #2
 800a12c:	e78a      	b.n	800a044 <__kernel_rem_pio2f+0x13c>
 800a12e:	ab06      	add	r3, sp, #24
 800a130:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a134:	b949      	cbnz	r1, 800a14a <__kernel_rem_pio2f+0x242>
 800a136:	b12b      	cbz	r3, 800a144 <__kernel_rem_pio2f+0x23c>
 800a138:	aa06      	add	r2, sp, #24
 800a13a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a13e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800a142:	2301      	movs	r3, #1
 800a144:	3001      	adds	r0, #1
 800a146:	4619      	mov	r1, r3
 800a148:	e781      	b.n	800a04e <__kernel_rem_pio2f+0x146>
 800a14a:	aa06      	add	r2, sp, #24
 800a14c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800a150:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800a154:	460b      	mov	r3, r1
 800a156:	e7f5      	b.n	800a144 <__kernel_rem_pio2f+0x23c>
 800a158:	1e68      	subs	r0, r5, #1
 800a15a:	ab06      	add	r3, sp, #24
 800a15c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a164:	aa06      	add	r2, sp, #24
 800a166:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800a16a:	e779      	b.n	800a060 <__kernel_rem_pio2f+0x158>
 800a16c:	1e68      	subs	r0, r5, #1
 800a16e:	ab06      	add	r3, sp, #24
 800a170:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a178:	e7f4      	b.n	800a164 <__kernel_rem_pio2f+0x25c>
 800a17a:	a906      	add	r1, sp, #24
 800a17c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800a180:	3801      	subs	r0, #1
 800a182:	430a      	orrs	r2, r1
 800a184:	e7a9      	b.n	800a0da <__kernel_rem_pio2f+0x1d2>
 800a186:	f10c 0c01 	add.w	ip, ip, #1
 800a18a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a18e:	2a00      	cmp	r2, #0
 800a190:	d0f9      	beq.n	800a186 <__kernel_rem_pio2f+0x27e>
 800a192:	eb0b 0305 	add.w	r3, fp, r5
 800a196:	aa1a      	add	r2, sp, #104	; 0x68
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	1898      	adds	r0, r3, r2
 800a19c:	3004      	adds	r0, #4
 800a19e:	1c69      	adds	r1, r5, #1
 800a1a0:	3704      	adds	r7, #4
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	4465      	add	r5, ip
 800a1a6:	9005      	str	r0, [sp, #20]
 800a1a8:	428d      	cmp	r5, r1
 800a1aa:	f6ff af0a 	blt.w	8009fc2 <__kernel_rem_pio2f+0xba>
 800a1ae:	a81a      	add	r0, sp, #104	; 0x68
 800a1b0:	eb02 0c03 	add.w	ip, r2, r3
 800a1b4:	4484      	add	ip, r0
 800a1b6:	9803      	ldr	r0, [sp, #12]
 800a1b8:	f8dd e008 	ldr.w	lr, [sp, #8]
 800a1bc:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800a1c0:	9001      	str	r0, [sp, #4]
 800a1c2:	ee07 0a90 	vmov	s15, r0
 800a1c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1ca:	9805      	ldr	r0, [sp, #20]
 800a1cc:	edcc 7a00 	vstr	s15, [ip]
 800a1d0:	eddf 7a13 	vldr	s15, [pc, #76]	; 800a220 <__kernel_rem_pio2f+0x318>
 800a1d4:	eb00 0802 	add.w	r8, r0, r2
 800a1d8:	f04f 0c00 	mov.w	ip, #0
 800a1dc:	45d4      	cmp	ip, sl
 800a1de:	dd0c      	ble.n	800a1fa <__kernel_rem_pio2f+0x2f2>
 800a1e0:	eb02 0c07 	add.w	ip, r2, r7
 800a1e4:	a842      	add	r0, sp, #264	; 0x108
 800a1e6:	4484      	add	ip, r0
 800a1e8:	edcc 7a01 	vstr	s15, [ip, #4]
 800a1ec:	3101      	adds	r1, #1
 800a1ee:	3204      	adds	r2, #4
 800a1f0:	e7da      	b.n	800a1a8 <__kernel_rem_pio2f+0x2a0>
 800a1f2:	9b04      	ldr	r3, [sp, #16]
 800a1f4:	f04f 0c01 	mov.w	ip, #1
 800a1f8:	e7c7      	b.n	800a18a <__kernel_rem_pio2f+0x282>
 800a1fa:	ecfe 6a01 	vldmia	lr!, {s13}
 800a1fe:	ed38 7a01 	vldmdb	r8!, {s14}
 800a202:	f10c 0c01 	add.w	ip, ip, #1
 800a206:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a20a:	e7e7      	b.n	800a1dc <__kernel_rem_pio2f+0x2d4>
 800a20c:	3b01      	subs	r3, #1
 800a20e:	e769      	b.n	800a0e4 <__kernel_rem_pio2f+0x1dc>
 800a210:	0800ea74 	.word	0x0800ea74
 800a214:	0800ea48 	.word	0x0800ea48
 800a218:	43800000 	.word	0x43800000
 800a21c:	3b800000 	.word	0x3b800000
 800a220:	00000000 	.word	0x00000000
 800a224:	4260      	negs	r0, r4
 800a226:	eeb0 0a48 	vmov.f32	s0, s16
 800a22a:	f000 fb9f 	bl	800a96c <scalbnf>
 800a22e:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800a218 <__kernel_rem_pio2f+0x310>
 800a232:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800a236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a23a:	db1a      	blt.n	800a272 <__kernel_rem_pio2f+0x36a>
 800a23c:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800a21c <__kernel_rem_pio2f+0x314>
 800a240:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a244:	aa06      	add	r2, sp, #24
 800a246:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a24a:	a906      	add	r1, sp, #24
 800a24c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a250:	3408      	adds	r4, #8
 800a252:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800a256:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a25a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a25e:	ee10 3a10 	vmov	r3, s0
 800a262:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800a266:	1c6b      	adds	r3, r5, #1
 800a268:	ee17 2a90 	vmov	r2, s15
 800a26c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a270:	e73f      	b.n	800a0f2 <__kernel_rem_pio2f+0x1ea>
 800a272:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a276:	aa06      	add	r2, sp, #24
 800a278:	ee10 3a10 	vmov	r3, s0
 800a27c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800a280:	462b      	mov	r3, r5
 800a282:	e736      	b.n	800a0f2 <__kernel_rem_pio2f+0x1ea>
 800a284:	aa06      	add	r2, sp, #24
 800a286:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800a28a:	9202      	str	r2, [sp, #8]
 800a28c:	ee07 2a90 	vmov	s15, r2
 800a290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a294:	3c01      	subs	r4, #1
 800a296:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a29a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a29e:	ed65 7a01 	vstmdb	r5!, {s15}
 800a2a2:	e734      	b.n	800a10e <__kernel_rem_pio2f+0x206>
 800a2a4:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800a2a8:	ecf7 6a01 	vldmia	r7!, {s13}
 800a2ac:	ed9c 7a00 	vldr	s14, [ip]
 800a2b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a2b4:	3401      	adds	r4, #1
 800a2b6:	454c      	cmp	r4, r9
 800a2b8:	dc01      	bgt.n	800a2be <__kernel_rem_pio2f+0x3b6>
 800a2ba:	42a5      	cmp	r5, r4
 800a2bc:	daf2      	bge.n	800a2a4 <__kernel_rem_pio2f+0x39c>
 800a2be:	aa56      	add	r2, sp, #344	; 0x158
 800a2c0:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800a2c4:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800a2c8:	3501      	adds	r5, #1
 800a2ca:	3804      	subs	r0, #4
 800a2cc:	e723      	b.n	800a116 <__kernel_rem_pio2f+0x20e>
 800a2ce:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800a2d0:	2a03      	cmp	r2, #3
 800a2d2:	d84d      	bhi.n	800a370 <__kernel_rem_pio2f+0x468>
 800a2d4:	e8df f002 	tbb	[pc, r2]
 800a2d8:	021f1f3e 	.word	0x021f1f3e
 800a2dc:	aa56      	add	r2, sp, #344	; 0x158
 800a2de:	4411      	add	r1, r2
 800a2e0:	399c      	subs	r1, #156	; 0x9c
 800a2e2:	4608      	mov	r0, r1
 800a2e4:	461c      	mov	r4, r3
 800a2e6:	2c00      	cmp	r4, #0
 800a2e8:	dc5f      	bgt.n	800a3aa <__kernel_rem_pio2f+0x4a2>
 800a2ea:	4608      	mov	r0, r1
 800a2ec:	461c      	mov	r4, r3
 800a2ee:	2c01      	cmp	r4, #1
 800a2f0:	dc6b      	bgt.n	800a3ca <__kernel_rem_pio2f+0x4c2>
 800a2f2:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800a220 <__kernel_rem_pio2f+0x318>
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	dc77      	bgt.n	800a3ea <__kernel_rem_pio2f+0x4e2>
 800a2fa:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800a2fe:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800a302:	f1b8 0f00 	cmp.w	r8, #0
 800a306:	d176      	bne.n	800a3f6 <__kernel_rem_pio2f+0x4ee>
 800a308:	edc6 6a00 	vstr	s13, [r6]
 800a30c:	ed86 7a01 	vstr	s14, [r6, #4]
 800a310:	edc6 7a02 	vstr	s15, [r6, #8]
 800a314:	e02c      	b.n	800a370 <__kernel_rem_pio2f+0x468>
 800a316:	aa56      	add	r2, sp, #344	; 0x158
 800a318:	4411      	add	r1, r2
 800a31a:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800a220 <__kernel_rem_pio2f+0x318>
 800a31e:	399c      	subs	r1, #156	; 0x9c
 800a320:	4618      	mov	r0, r3
 800a322:	2800      	cmp	r0, #0
 800a324:	da32      	bge.n	800a38c <__kernel_rem_pio2f+0x484>
 800a326:	f1b8 0f00 	cmp.w	r8, #0
 800a32a:	d035      	beq.n	800a398 <__kernel_rem_pio2f+0x490>
 800a32c:	eef1 7a47 	vneg.f32	s15, s14
 800a330:	edc6 7a00 	vstr	s15, [r6]
 800a334:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800a338:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a33c:	a82f      	add	r0, sp, #188	; 0xbc
 800a33e:	2101      	movs	r1, #1
 800a340:	428b      	cmp	r3, r1
 800a342:	da2c      	bge.n	800a39e <__kernel_rem_pio2f+0x496>
 800a344:	f1b8 0f00 	cmp.w	r8, #0
 800a348:	d001      	beq.n	800a34e <__kernel_rem_pio2f+0x446>
 800a34a:	eef1 7a67 	vneg.f32	s15, s15
 800a34e:	edc6 7a01 	vstr	s15, [r6, #4]
 800a352:	e00d      	b.n	800a370 <__kernel_rem_pio2f+0x468>
 800a354:	aa56      	add	r2, sp, #344	; 0x158
 800a356:	4411      	add	r1, r2
 800a358:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800a220 <__kernel_rem_pio2f+0x318>
 800a35c:	399c      	subs	r1, #156	; 0x9c
 800a35e:	2b00      	cmp	r3, #0
 800a360:	da0e      	bge.n	800a380 <__kernel_rem_pio2f+0x478>
 800a362:	f1b8 0f00 	cmp.w	r8, #0
 800a366:	d001      	beq.n	800a36c <__kernel_rem_pio2f+0x464>
 800a368:	eef1 7a67 	vneg.f32	s15, s15
 800a36c:	edc6 7a00 	vstr	s15, [r6]
 800a370:	9b01      	ldr	r3, [sp, #4]
 800a372:	f003 0007 	and.w	r0, r3, #7
 800a376:	b057      	add	sp, #348	; 0x15c
 800a378:	ecbd 8b04 	vpop	{d8-d9}
 800a37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a380:	ed31 7a01 	vldmdb	r1!, {s14}
 800a384:	3b01      	subs	r3, #1
 800a386:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a38a:	e7e8      	b.n	800a35e <__kernel_rem_pio2f+0x456>
 800a38c:	ed71 7a01 	vldmdb	r1!, {s15}
 800a390:	3801      	subs	r0, #1
 800a392:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a396:	e7c4      	b.n	800a322 <__kernel_rem_pio2f+0x41a>
 800a398:	eef0 7a47 	vmov.f32	s15, s14
 800a39c:	e7c8      	b.n	800a330 <__kernel_rem_pio2f+0x428>
 800a39e:	ecb0 7a01 	vldmia	r0!, {s14}
 800a3a2:	3101      	adds	r1, #1
 800a3a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a3a8:	e7ca      	b.n	800a340 <__kernel_rem_pio2f+0x438>
 800a3aa:	ed50 7a02 	vldr	s15, [r0, #-8]
 800a3ae:	ed70 6a01 	vldmdb	r0!, {s13}
 800a3b2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a3b6:	3c01      	subs	r4, #1
 800a3b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a3bc:	ed00 7a01 	vstr	s14, [r0, #-4]
 800a3c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3c4:	edc0 7a00 	vstr	s15, [r0]
 800a3c8:	e78d      	b.n	800a2e6 <__kernel_rem_pio2f+0x3de>
 800a3ca:	ed50 7a02 	vldr	s15, [r0, #-8]
 800a3ce:	ed70 6a01 	vldmdb	r0!, {s13}
 800a3d2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a3d6:	3c01      	subs	r4, #1
 800a3d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a3dc:	ed00 7a01 	vstr	s14, [r0, #-4]
 800a3e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3e4:	edc0 7a00 	vstr	s15, [r0]
 800a3e8:	e781      	b.n	800a2ee <__kernel_rem_pio2f+0x3e6>
 800a3ea:	ed31 7a01 	vldmdb	r1!, {s14}
 800a3ee:	3b01      	subs	r3, #1
 800a3f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a3f4:	e77f      	b.n	800a2f6 <__kernel_rem_pio2f+0x3ee>
 800a3f6:	eef1 6a66 	vneg.f32	s13, s13
 800a3fa:	eeb1 7a47 	vneg.f32	s14, s14
 800a3fe:	edc6 6a00 	vstr	s13, [r6]
 800a402:	ed86 7a01 	vstr	s14, [r6, #4]
 800a406:	eef1 7a67 	vneg.f32	s15, s15
 800a40a:	e781      	b.n	800a310 <__kernel_rem_pio2f+0x408>

0800a40c <__kernel_tanf>:
 800a40c:	b508      	push	{r3, lr}
 800a40e:	ee10 3a10 	vmov	r3, s0
 800a412:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a416:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800a41a:	eef0 7a40 	vmov.f32	s15, s0
 800a41e:	da17      	bge.n	800a450 <__kernel_tanf+0x44>
 800a420:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800a424:	ee17 1a10 	vmov	r1, s14
 800a428:	bb41      	cbnz	r1, 800a47c <__kernel_tanf+0x70>
 800a42a:	1c43      	adds	r3, r0, #1
 800a42c:	4313      	orrs	r3, r2
 800a42e:	d108      	bne.n	800a442 <__kernel_tanf+0x36>
 800a430:	f7fe fff2 	bl	8009418 <fabsf>
 800a434:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a438:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a43c:	eeb0 0a67 	vmov.f32	s0, s15
 800a440:	bd08      	pop	{r3, pc}
 800a442:	2801      	cmp	r0, #1
 800a444:	d0fa      	beq.n	800a43c <__kernel_tanf+0x30>
 800a446:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a44a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a44e:	e7f5      	b.n	800a43c <__kernel_tanf+0x30>
 800a450:	494e      	ldr	r1, [pc, #312]	; (800a58c <__kernel_tanf+0x180>)
 800a452:	428a      	cmp	r2, r1
 800a454:	dd12      	ble.n	800a47c <__kernel_tanf+0x70>
 800a456:	2b00      	cmp	r3, #0
 800a458:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800a590 <__kernel_tanf+0x184>
 800a45c:	bfb8      	it	lt
 800a45e:	eef1 7a40 	vneglt.f32	s15, s0
 800a462:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a466:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800a594 <__kernel_tanf+0x188>
 800a46a:	bfb8      	it	lt
 800a46c:	eef1 0a60 	vneglt.f32	s1, s1
 800a470:	ee77 0a60 	vsub.f32	s1, s14, s1
 800a474:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800a478:	eddf 0a47 	vldr	s1, [pc, #284]	; 800a598 <__kernel_tanf+0x18c>
 800a47c:	ed9f 6a47 	vldr	s12, [pc, #284]	; 800a59c <__kernel_tanf+0x190>
 800a480:	eddf 5a47 	vldr	s11, [pc, #284]	; 800a5a0 <__kernel_tanf+0x194>
 800a484:	ed9f 5a47 	vldr	s10, [pc, #284]	; 800a5a4 <__kernel_tanf+0x198>
 800a488:	4940      	ldr	r1, [pc, #256]	; (800a58c <__kernel_tanf+0x180>)
 800a48a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800a48e:	428a      	cmp	r2, r1
 800a490:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800a494:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800a498:	eee7 5a06 	vfma.f32	s11, s14, s12
 800a49c:	ed9f 6a42 	vldr	s12, [pc, #264]	; 800a5a8 <__kernel_tanf+0x19c>
 800a4a0:	eea5 6a87 	vfma.f32	s12, s11, s14
 800a4a4:	eddf 5a41 	vldr	s11, [pc, #260]	; 800a5ac <__kernel_tanf+0x1a0>
 800a4a8:	eee6 5a07 	vfma.f32	s11, s12, s14
 800a4ac:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800a5b0 <__kernel_tanf+0x1a4>
 800a4b0:	eea5 6a87 	vfma.f32	s12, s11, s14
 800a4b4:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a5b4 <__kernel_tanf+0x1a8>
 800a4b8:	eee6 5a07 	vfma.f32	s11, s12, s14
 800a4bc:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800a5b8 <__kernel_tanf+0x1ac>
 800a4c0:	eea7 6a05 	vfma.f32	s12, s14, s10
 800a4c4:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800a5bc <__kernel_tanf+0x1b0>
 800a4c8:	eea6 5a07 	vfma.f32	s10, s12, s14
 800a4cc:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 800a5c0 <__kernel_tanf+0x1b4>
 800a4d0:	eea5 6a07 	vfma.f32	s12, s10, s14
 800a4d4:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 800a5c4 <__kernel_tanf+0x1b8>
 800a4d8:	eea6 5a07 	vfma.f32	s10, s12, s14
 800a4dc:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 800a5c8 <__kernel_tanf+0x1bc>
 800a4e0:	eea5 6a07 	vfma.f32	s12, s10, s14
 800a4e4:	eeb0 7a46 	vmov.f32	s14, s12
 800a4e8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a4ec:	eeb0 6a60 	vmov.f32	s12, s1
 800a4f0:	eea7 6a24 	vfma.f32	s12, s14, s9
 800a4f4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800a5cc <__kernel_tanf+0x1c0>
 800a4f8:	eee6 0a26 	vfma.f32	s1, s12, s13
 800a4fc:	eee4 0a87 	vfma.f32	s1, s9, s14
 800a500:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800a504:	dd1d      	ble.n	800a542 <__kernel_tanf+0x136>
 800a506:	ee07 0a10 	vmov	s14, r0
 800a50a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a50e:	ee66 5aa6 	vmul.f32	s11, s13, s13
 800a512:	ee76 6a87 	vadd.f32	s13, s13, s14
 800a516:	179b      	asrs	r3, r3, #30
 800a518:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 800a51c:	f003 0302 	and.w	r3, r3, #2
 800a520:	f1c3 0301 	rsb	r3, r3, #1
 800a524:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a528:	ee76 0a60 	vsub.f32	s1, s12, s1
 800a52c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a530:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800a534:	ee07 3a90 	vmov	s15, r3
 800a538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a53c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a540:	e77c      	b.n	800a43c <__kernel_tanf+0x30>
 800a542:	2801      	cmp	r0, #1
 800a544:	d01f      	beq.n	800a586 <__kernel_tanf+0x17a>
 800a546:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a54a:	eec7 5a26 	vdiv.f32	s11, s14, s13
 800a54e:	4b20      	ldr	r3, [pc, #128]	; (800a5d0 <__kernel_tanf+0x1c4>)
 800a550:	ee16 2a90 	vmov	r2, s13
 800a554:	401a      	ands	r2, r3
 800a556:	ee06 2a10 	vmov	s12, r2
 800a55a:	ee15 2a90 	vmov	r2, s11
 800a55e:	4013      	ands	r3, r2
 800a560:	ee07 3a10 	vmov	s14, r3
 800a564:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a568:	eee6 6a07 	vfma.f32	s13, s12, s14
 800a56c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a570:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800a574:	eef0 7a66 	vmov.f32	s15, s13
 800a578:	eee7 7a20 	vfma.f32	s15, s14, s1
 800a57c:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800a580:	eef0 7a47 	vmov.f32	s15, s14
 800a584:	e75a      	b.n	800a43c <__kernel_tanf+0x30>
 800a586:	eef0 7a66 	vmov.f32	s15, s13
 800a58a:	e757      	b.n	800a43c <__kernel_tanf+0x30>
 800a58c:	3f2ca13f 	.word	0x3f2ca13f
 800a590:	3f490fda 	.word	0x3f490fda
 800a594:	33222168 	.word	0x33222168
 800a598:	00000000 	.word	0x00000000
 800a59c:	37d95384 	.word	0x37d95384
 800a5a0:	3895c07a 	.word	0x3895c07a
 800a5a4:	b79bae5f 	.word	0xb79bae5f
 800a5a8:	398137b9 	.word	0x398137b9
 800a5ac:	3abede48 	.word	0x3abede48
 800a5b0:	3c11371f 	.word	0x3c11371f
 800a5b4:	3d5d0dd1 	.word	0x3d5d0dd1
 800a5b8:	38a3f445 	.word	0x38a3f445
 800a5bc:	3a1a26c8 	.word	0x3a1a26c8
 800a5c0:	3b6b6916 	.word	0x3b6b6916
 800a5c4:	3cb327a4 	.word	0x3cb327a4
 800a5c8:	3e088889 	.word	0x3e088889
 800a5cc:	3eaaaaab 	.word	0x3eaaaaab
 800a5d0:	fffff000 	.word	0xfffff000

0800a5d4 <with_errnof>:
 800a5d4:	b510      	push	{r4, lr}
 800a5d6:	ed2d 8b02 	vpush	{d8}
 800a5da:	eeb0 8a40 	vmov.f32	s16, s0
 800a5de:	4604      	mov	r4, r0
 800a5e0:	f7fe fe6a 	bl	80092b8 <__errno>
 800a5e4:	eeb0 0a48 	vmov.f32	s0, s16
 800a5e8:	ecbd 8b02 	vpop	{d8}
 800a5ec:	6004      	str	r4, [r0, #0]
 800a5ee:	bd10      	pop	{r4, pc}

0800a5f0 <xflowf>:
 800a5f0:	b130      	cbz	r0, 800a600 <xflowf+0x10>
 800a5f2:	eef1 7a40 	vneg.f32	s15, s0
 800a5f6:	2022      	movs	r0, #34	; 0x22
 800a5f8:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a5fc:	f7ff bfea 	b.w	800a5d4 <with_errnof>
 800a600:	eef0 7a40 	vmov.f32	s15, s0
 800a604:	e7f7      	b.n	800a5f6 <xflowf+0x6>
	...

0800a608 <__math_uflowf>:
 800a608:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a610 <__math_uflowf+0x8>
 800a60c:	f7ff bff0 	b.w	800a5f0 <xflowf>
 800a610:	10000000 	.word	0x10000000

0800a614 <__math_may_uflowf>:
 800a614:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a61c <__math_may_uflowf+0x8>
 800a618:	f7ff bfea 	b.w	800a5f0 <xflowf>
 800a61c:	1a200000 	.word	0x1a200000

0800a620 <__math_oflowf>:
 800a620:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a628 <__math_oflowf+0x8>
 800a624:	f7ff bfe4 	b.w	800a5f0 <xflowf>
 800a628:	70000000 	.word	0x70000000

0800a62c <__math_divzerof>:
 800a62c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a630:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800a634:	2800      	cmp	r0, #0
 800a636:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800a63a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800a648 <__math_divzerof+0x1c>
 800a63e:	2022      	movs	r0, #34	; 0x22
 800a640:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a644:	f7ff bfc6 	b.w	800a5d4 <with_errnof>
 800a648:	00000000 	.word	0x00000000

0800a64c <__math_invalidf>:
 800a64c:	eef0 7a40 	vmov.f32	s15, s0
 800a650:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a654:	eef4 7a67 	vcmp.f32	s15, s15
 800a658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a65c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800a660:	d602      	bvs.n	800a668 <__math_invalidf+0x1c>
 800a662:	2021      	movs	r0, #33	; 0x21
 800a664:	f7ff bfb6 	b.w	800a5d4 <with_errnof>
 800a668:	4770      	bx	lr

0800a66a <matherr>:
 800a66a:	2000      	movs	r0, #0
 800a66c:	4770      	bx	lr
	...

0800a670 <nan>:
 800a670:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a678 <nan+0x8>
 800a674:	4770      	bx	lr
 800a676:	bf00      	nop
 800a678:	00000000 	.word	0x00000000
 800a67c:	7ff80000 	.word	0x7ff80000

0800a680 <expm1f>:
 800a680:	ee10 2a10 	vmov	r2, s0
 800a684:	4984      	ldr	r1, [pc, #528]	; (800a898 <expm1f+0x218>)
 800a686:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800a68a:	428b      	cmp	r3, r1
 800a68c:	d923      	bls.n	800a6d6 <expm1f+0x56>
 800a68e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a692:	d902      	bls.n	800a69a <expm1f+0x1a>
 800a694:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a698:	4770      	bx	lr
 800a69a:	d105      	bne.n	800a6a8 <expm1f+0x28>
 800a69c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800a6a0:	2a00      	cmp	r2, #0
 800a6a2:	fe20 0a27 	vselge.f32	s0, s0, s15
 800a6a6:	4770      	bx	lr
 800a6a8:	2a00      	cmp	r2, #0
 800a6aa:	db08      	blt.n	800a6be <expm1f+0x3e>
 800a6ac:	4a7b      	ldr	r2, [pc, #492]	; (800a89c <expm1f+0x21c>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	f240 80ea 	bls.w	800a888 <expm1f+0x208>
 800a6b4:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 800a8a0 <expm1f+0x220>
 800a6b8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a6bc:	4770      	bx	lr
 800a6be:	eddf 7a79 	vldr	s15, [pc, #484]	; 800a8a4 <expm1f+0x224>
 800a6c2:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a6c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a6ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ce:	d554      	bpl.n	800a77a <expm1f+0xfa>
 800a6d0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800a6d4:	4770      	bx	lr
 800a6d6:	4974      	ldr	r1, [pc, #464]	; (800a8a8 <expm1f+0x228>)
 800a6d8:	428b      	cmp	r3, r1
 800a6da:	d96c      	bls.n	800a7b6 <expm1f+0x136>
 800a6dc:	4973      	ldr	r1, [pc, #460]	; (800a8ac <expm1f+0x22c>)
 800a6de:	428b      	cmp	r3, r1
 800a6e0:	d84b      	bhi.n	800a77a <expm1f+0xfa>
 800a6e2:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a8b0 <expm1f+0x230>
 800a6e6:	2a00      	cmp	r2, #0
 800a6e8:	bfa7      	ittee	ge
 800a6ea:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800a6ee:	eddf 7a71 	vldrge	s15, [pc, #452]	; 800a8b4 <expm1f+0x234>
 800a6f2:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 800a8b8 <expm1f+0x238>
 800a6f6:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800a6fa:	bfac      	ite	ge
 800a6fc:	2301      	movge	r3, #1
 800a6fe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a702:	ee37 0a67 	vsub.f32	s0, s14, s15
 800a706:	ee37 7a40 	vsub.f32	s14, s14, s0
 800a70a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a70e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800a712:	ee20 5a25 	vmul.f32	s10, s0, s11
 800a716:	eddf 6a69 	vldr	s13, [pc, #420]	; 800a8bc <expm1f+0x23c>
 800a71a:	ed9f 6a69 	vldr	s12, [pc, #420]	; 800a8c0 <expm1f+0x240>
 800a71e:	ee20 7a05 	vmul.f32	s14, s0, s10
 800a722:	eea7 6a26 	vfma.f32	s12, s14, s13
 800a726:	eddf 6a67 	vldr	s13, [pc, #412]	; 800a8c4 <expm1f+0x244>
 800a72a:	eee6 6a07 	vfma.f32	s13, s12, s14
 800a72e:	ed9f 6a66 	vldr	s12, [pc, #408]	; 800a8c8 <expm1f+0x248>
 800a732:	eea6 6a87 	vfma.f32	s12, s13, s14
 800a736:	eddf 6a65 	vldr	s13, [pc, #404]	; 800a8cc <expm1f+0x24c>
 800a73a:	eee6 6a07 	vfma.f32	s13, s12, s14
 800a73e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a742:	eef0 4a46 	vmov.f32	s9, s12
 800a746:	eee6 4a87 	vfma.f32	s9, s13, s14
 800a74a:	eef0 6a64 	vmov.f32	s13, s9
 800a74e:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800a752:	eee5 4a66 	vfms.f32	s9, s10, s13
 800a756:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800a75a:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800a75e:	eee0 6a64 	vfms.f32	s13, s0, s9
 800a762:	eef0 4a66 	vmov.f32	s9, s13
 800a766:	eec5 6a24 	vdiv.f32	s13, s10, s9
 800a76a:	ee66 6a87 	vmul.f32	s13, s13, s14
 800a76e:	bb83      	cbnz	r3, 800a7d2 <expm1f+0x152>
 800a770:	eef0 7a47 	vmov.f32	s15, s14
 800a774:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800a778:	e026      	b.n	800a7c8 <expm1f+0x148>
 800a77a:	eddf 7a55 	vldr	s15, [pc, #340]	; 800a8d0 <expm1f+0x250>
 800a77e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800a782:	ee20 7a27 	vmul.f32	s14, s0, s15
 800a786:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800a78a:	2a00      	cmp	r2, #0
 800a78c:	fe66 7aa7 	vselge.f32	s15, s13, s15
 800a790:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a794:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800a8b0 <expm1f+0x230>
 800a798:	eddf 6a46 	vldr	s13, [pc, #280]	; 800a8b4 <expm1f+0x234>
 800a79c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a7a0:	ee17 3a90 	vmov	r3, s15
 800a7a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7a8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800a7ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a7b0:	eeb0 7a40 	vmov.f32	s14, s0
 800a7b4:	e7a5      	b.n	800a702 <expm1f+0x82>
 800a7b6:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800a7ba:	d208      	bcs.n	800a7ce <expm1f+0x14e>
 800a7bc:	eddf 7a38 	vldr	s15, [pc, #224]	; 800a8a0 <expm1f+0x220>
 800a7c0:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a7c4:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800a7c8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a7cc:	4770      	bx	lr
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	e79d      	b.n	800a70e <expm1f+0x8e>
 800a7d2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a7d6:	1c5a      	adds	r2, r3, #1
 800a7d8:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800a7dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a7e0:	d106      	bne.n	800a7f0 <expm1f+0x170>
 800a7e2:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a7e6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800a7ea:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800a7ee:	4770      	bx	lr
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d118      	bne.n	800a826 <expm1f+0x1a6>
 800a7f4:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800a7f8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800a7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a800:	bf41      	itttt	mi
 800a802:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800a806:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 800a80a:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 800a80e:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 800a812:	bf5f      	itttt	pl
 800a814:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 800a818:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 800a81c:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 800a820:	eeb0 0a46 	vmovpl.f32	s0, s12
 800a824:	4770      	bx	lr
 800a826:	1c5a      	adds	r2, r3, #1
 800a828:	2a39      	cmp	r2, #57	; 0x39
 800a82a:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800a82e:	d90b      	bls.n	800a848 <expm1f+0x1c8>
 800a830:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a834:	ee36 0a40 	vsub.f32	s0, s12, s0
 800a838:	ee10 3a10 	vmov	r3, s0
 800a83c:	440b      	add	r3, r1
 800a83e:	ee00 3a10 	vmov	s0, r3
 800a842:	ee30 0a46 	vsub.f32	s0, s0, s12
 800a846:	4770      	bx	lr
 800a848:	2b16      	cmp	r3, #22
 800a84a:	dc11      	bgt.n	800a870 <expm1f+0x1f0>
 800a84c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a850:	fa42 f303 	asr.w	r3, r2, r3
 800a854:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800a858:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a85c:	ee07 3a90 	vmov	s15, r3
 800a860:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a864:	ee10 3a10 	vmov	r3, s0
 800a868:	440b      	add	r3, r1
 800a86a:	ee00 3a10 	vmov	s0, r3
 800a86e:	4770      	bx	lr
 800a870:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800a874:	05db      	lsls	r3, r3, #23
 800a876:	ee07 3a10 	vmov	s14, r3
 800a87a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a87e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a882:	ee30 0a06 	vadd.f32	s0, s0, s12
 800a886:	e7ed      	b.n	800a864 <expm1f+0x1e4>
 800a888:	eddf 7a11 	vldr	s15, [pc, #68]	; 800a8d0 <expm1f+0x250>
 800a88c:	ee20 7a27 	vmul.f32	s14, s0, s15
 800a890:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a894:	e77c      	b.n	800a790 <expm1f+0x110>
 800a896:	bf00      	nop
 800a898:	4195b843 	.word	0x4195b843
 800a89c:	42b17217 	.word	0x42b17217
 800a8a0:	7149f2ca 	.word	0x7149f2ca
 800a8a4:	0da24260 	.word	0x0da24260
 800a8a8:	3eb17218 	.word	0x3eb17218
 800a8ac:	3f851591 	.word	0x3f851591
 800a8b0:	3f317180 	.word	0x3f317180
 800a8b4:	3717f7d1 	.word	0x3717f7d1
 800a8b8:	b717f7d1 	.word	0xb717f7d1
 800a8bc:	b457edbb 	.word	0xb457edbb
 800a8c0:	36867e54 	.word	0x36867e54
 800a8c4:	b8a670cd 	.word	0xb8a670cd
 800a8c8:	3ad00d01 	.word	0x3ad00d01
 800a8cc:	bd088889 	.word	0xbd088889
 800a8d0:	3fb8aa3b 	.word	0x3fb8aa3b

0800a8d4 <finitef>:
 800a8d4:	ee10 3a10 	vmov	r3, s0
 800a8d8:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800a8dc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800a8e0:	bfac      	ite	ge
 800a8e2:	2000      	movge	r0, #0
 800a8e4:	2001      	movlt	r0, #1
 800a8e6:	4770      	bx	lr

0800a8e8 <floorf>:
 800a8e8:	ee10 3a10 	vmov	r3, s0
 800a8ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a8f0:	0dca      	lsrs	r2, r1, #23
 800a8f2:	3a7f      	subs	r2, #127	; 0x7f
 800a8f4:	2a16      	cmp	r2, #22
 800a8f6:	dc2a      	bgt.n	800a94e <floorf+0x66>
 800a8f8:	2a00      	cmp	r2, #0
 800a8fa:	da11      	bge.n	800a920 <floorf+0x38>
 800a8fc:	eddf 7a18 	vldr	s15, [pc, #96]	; 800a960 <floorf+0x78>
 800a900:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a904:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a90c:	dd05      	ble.n	800a91a <floorf+0x32>
 800a90e:	2b00      	cmp	r3, #0
 800a910:	da23      	bge.n	800a95a <floorf+0x72>
 800a912:	4a14      	ldr	r2, [pc, #80]	; (800a964 <floorf+0x7c>)
 800a914:	2900      	cmp	r1, #0
 800a916:	bf18      	it	ne
 800a918:	4613      	movne	r3, r2
 800a91a:	ee00 3a10 	vmov	s0, r3
 800a91e:	4770      	bx	lr
 800a920:	4911      	ldr	r1, [pc, #68]	; (800a968 <floorf+0x80>)
 800a922:	4111      	asrs	r1, r2
 800a924:	420b      	tst	r3, r1
 800a926:	d0fa      	beq.n	800a91e <floorf+0x36>
 800a928:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800a960 <floorf+0x78>
 800a92c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a930:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a938:	ddef      	ble.n	800a91a <floorf+0x32>
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	bfbe      	ittt	lt
 800a93e:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800a942:	fa40 f202 	asrlt.w	r2, r0, r2
 800a946:	189b      	addlt	r3, r3, r2
 800a948:	ea23 0301 	bic.w	r3, r3, r1
 800a94c:	e7e5      	b.n	800a91a <floorf+0x32>
 800a94e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a952:	d3e4      	bcc.n	800a91e <floorf+0x36>
 800a954:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a958:	4770      	bx	lr
 800a95a:	2300      	movs	r3, #0
 800a95c:	e7dd      	b.n	800a91a <floorf+0x32>
 800a95e:	bf00      	nop
 800a960:	7149f2ca 	.word	0x7149f2ca
 800a964:	bf800000 	.word	0xbf800000
 800a968:	007fffff 	.word	0x007fffff

0800a96c <scalbnf>:
 800a96c:	b508      	push	{r3, lr}
 800a96e:	ee10 2a10 	vmov	r2, s0
 800a972:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800a976:	ed2d 8b02 	vpush	{d8}
 800a97a:	eef0 0a40 	vmov.f32	s1, s0
 800a97e:	d004      	beq.n	800a98a <scalbnf+0x1e>
 800a980:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a984:	d306      	bcc.n	800a994 <scalbnf+0x28>
 800a986:	ee70 0a00 	vadd.f32	s1, s0, s0
 800a98a:	ecbd 8b02 	vpop	{d8}
 800a98e:	eeb0 0a60 	vmov.f32	s0, s1
 800a992:	bd08      	pop	{r3, pc}
 800a994:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a998:	d21c      	bcs.n	800a9d4 <scalbnf+0x68>
 800a99a:	4b1f      	ldr	r3, [pc, #124]	; (800aa18 <scalbnf+0xac>)
 800a99c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800aa1c <scalbnf+0xb0>
 800a9a0:	4298      	cmp	r0, r3
 800a9a2:	ee60 0a27 	vmul.f32	s1, s0, s15
 800a9a6:	db10      	blt.n	800a9ca <scalbnf+0x5e>
 800a9a8:	ee10 2a90 	vmov	r2, s1
 800a9ac:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800a9b0:	3b19      	subs	r3, #25
 800a9b2:	4403      	add	r3, r0
 800a9b4:	2bfe      	cmp	r3, #254	; 0xfe
 800a9b6:	dd0f      	ble.n	800a9d8 <scalbnf+0x6c>
 800a9b8:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800aa20 <scalbnf+0xb4>
 800a9bc:	eeb0 0a48 	vmov.f32	s0, s16
 800a9c0:	f000 f834 	bl	800aa2c <copysignf>
 800a9c4:	ee60 0a08 	vmul.f32	s1, s0, s16
 800a9c8:	e7df      	b.n	800a98a <scalbnf+0x1e>
 800a9ca:	eddf 7a16 	vldr	s15, [pc, #88]	; 800aa24 <scalbnf+0xb8>
 800a9ce:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a9d2:	e7da      	b.n	800a98a <scalbnf+0x1e>
 800a9d4:	0ddb      	lsrs	r3, r3, #23
 800a9d6:	e7ec      	b.n	800a9b2 <scalbnf+0x46>
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	dd06      	ble.n	800a9ea <scalbnf+0x7e>
 800a9dc:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800a9e0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800a9e4:	ee00 3a90 	vmov	s1, r3
 800a9e8:	e7cf      	b.n	800a98a <scalbnf+0x1e>
 800a9ea:	f113 0f16 	cmn.w	r3, #22
 800a9ee:	da06      	bge.n	800a9fe <scalbnf+0x92>
 800a9f0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a9f4:	4298      	cmp	r0, r3
 800a9f6:	dcdf      	bgt.n	800a9b8 <scalbnf+0x4c>
 800a9f8:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800aa24 <scalbnf+0xb8>
 800a9fc:	e7de      	b.n	800a9bc <scalbnf+0x50>
 800a9fe:	3319      	adds	r3, #25
 800aa00:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800aa04:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800aa08:	eddf 7a07 	vldr	s15, [pc, #28]	; 800aa28 <scalbnf+0xbc>
 800aa0c:	ee07 3a10 	vmov	s14, r3
 800aa10:	ee67 0a27 	vmul.f32	s1, s14, s15
 800aa14:	e7b9      	b.n	800a98a <scalbnf+0x1e>
 800aa16:	bf00      	nop
 800aa18:	ffff3cb0 	.word	0xffff3cb0
 800aa1c:	4c000000 	.word	0x4c000000
 800aa20:	7149f2ca 	.word	0x7149f2ca
 800aa24:	0da24260 	.word	0x0da24260
 800aa28:	33000000 	.word	0x33000000

0800aa2c <copysignf>:
 800aa2c:	ee10 3a10 	vmov	r3, s0
 800aa30:	ee10 2a90 	vmov	r2, s1
 800aa34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa38:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	ee00 3a10 	vmov	s0, r3
 800aa42:	4770      	bx	lr

0800aa44 <_init>:
 800aa44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa46:	bf00      	nop
 800aa48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa4a:	bc08      	pop	{r3}
 800aa4c:	469e      	mov	lr, r3
 800aa4e:	4770      	bx	lr

0800aa50 <_fini>:
 800aa50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa52:	bf00      	nop
 800aa54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa56:	bc08      	pop	{r3}
 800aa58:	469e      	mov	lr, r3
 800aa5a:	4770      	bx	lr
