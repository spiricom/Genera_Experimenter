
cube_for_new_genera_brain4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bed0  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003e98  0800c168  0800c168  0001c168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08010000  08010000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08010004  08010004  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000188  20000000  08010008  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000fcdc  20000188  08010190  00030188  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000fe64  08010190  0003fe64  2**0
                  ALLOC
  8 .RAM_D1       0007eb58  24000000  24000000  00040000  2**5
                  ALLOC
  9 .RAM_D2       00001070  30000000  30000000  00040000  2**5
                  ALLOC
 10 .SDRAM        02000000  60000000  60000000  00040000  2**5
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030188  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005f0ac  00000000  00000000  000301b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009088  00000000  00000000  0008f262  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0002fd40  00000000  00000000  000982ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002140  00000000  00000000  000c8030  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00007538  00000000  00000000  000ca170  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000410f9  00000000  00000000  000d16a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0002c6e3  00000000  00000000  001127a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00189390  00000000  00000000  0013ee84  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  002c8214  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007914  00000000  00000000  002c8290  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000188 	.word	0x20000188
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c150 	.word	0x0800c150

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2000018c 	.word	0x2000018c
 80002d4:	0800c150 	.word	0x0800c150

080002d8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80002d8:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <HAL_InitTick+0x40>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	b90b      	cbnz	r3, 80002e2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80002de:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80002e0:	4770      	bx	lr
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80002e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002e6:	490d      	ldr	r1, [pc, #52]	; (800031c <HAL_InitTick+0x44>)
 80002e8:	fbb2 f3f3 	udiv	r3, r2, r3
{
 80002ec:	b510      	push	{r4, lr}
 80002ee:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80002f0:	6808      	ldr	r0, [r1, #0]
 80002f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80002f6:	f000 fe4b 	bl	8000f90 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002fa:	2c0f      	cmp	r4, #15
 80002fc:	d800      	bhi.n	8000300 <HAL_InitTick+0x28>
 80002fe:	b108      	cbz	r0, 8000304 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000300:	2001      	movs	r0, #1
}
 8000302:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000304:	2200      	movs	r2, #0
 8000306:	4621      	mov	r1, r4
 8000308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800030c:	f000 fdfc 	bl	8000f08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <HAL_InitTick+0x48>)
 8000312:	2000      	movs	r0, #0
 8000314:	601c      	str	r4, [r3, #0]
}
 8000316:	bd10      	pop	{r4, pc}
 8000318:	20000000 	.word	0x20000000
 800031c:	20000018 	.word	0x20000018
 8000320:	20000004 	.word	0x20000004

08000324 <HAL_Init>:
{
 8000324:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000326:	2003      	movs	r0, #3
{
 8000328:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800032a:	f000 fdd9 	bl	8000ee0 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800032e:	4c12      	ldr	r4, [pc, #72]	; (8000378 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000330:	f003 fbf2 	bl	8003b18 <HAL_RCC_GetSysClockFreq>
 8000334:	4a11      	ldr	r2, [pc, #68]	; (800037c <HAL_Init+0x58>)
 8000336:	4912      	ldr	r1, [pc, #72]	; (8000380 <HAL_Init+0x5c>)
 8000338:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800033a:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800033c:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 8000340:	4d10      	ldr	r5, [pc, #64]	; (8000384 <HAL_Init+0x60>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000342:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000346:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000348:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800034a:	f003 031f 	and.w	r3, r3, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800034e:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000352:	fa20 f303 	lsr.w	r3, r0, r3
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000356:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000358:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 800035c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800035e:	6022      	str	r2, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000360:	f7ff ffba 	bl	80002d8 <HAL_InitTick>
 8000364:	b110      	cbz	r0, 800036c <HAL_Init+0x48>
    return HAL_ERROR;
 8000366:	2001      	movs	r0, #1
}
 8000368:	b003      	add	sp, #12
 800036a:	bd30      	pop	{r4, r5, pc}
 800036c:	9001      	str	r0, [sp, #4]
  HAL_MspInit();
 800036e:	f009 f997 	bl	80096a0 <HAL_MspInit>
  return HAL_OK;
 8000372:	9801      	ldr	r0, [sp, #4]
}
 8000374:	b003      	add	sp, #12
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	2000001c 	.word	0x2000001c
 800037c:	58024400 	.word	0x58024400
 8000380:	0800c184 	.word	0x0800c184
 8000384:	20000018 	.word	0x20000018

08000388 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000388:	4a03      	ldr	r2, [pc, #12]	; (8000398 <HAL_IncTick+0x10>)
 800038a:	4b04      	ldr	r3, [pc, #16]	; (800039c <HAL_IncTick+0x14>)
 800038c:	6811      	ldr	r1, [r2, #0]
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	440b      	add	r3, r1
 8000392:	6013      	str	r3, [r2, #0]
}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	200001c8 	.word	0x200001c8
 800039c:	20000000 	.word	0x20000000

080003a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80003a0:	4b01      	ldr	r3, [pc, #4]	; (80003a8 <HAL_GetTick+0x8>)
 80003a2:	6818      	ldr	r0, [r3, #0]
}
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	200001c8 	.word	0x200001c8

080003ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003ac:	b538      	push	{r3, r4, r5, lr}
 80003ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80003b0:	f7ff fff6 	bl	80003a0 <HAL_GetTick>
 80003b4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003b6:	1c63      	adds	r3, r4, #1
 80003b8:	d002      	beq.n	80003c0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80003ba:	4b04      	ldr	r3, [pc, #16]	; (80003cc <HAL_Delay+0x20>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80003c0:	f7ff ffee 	bl	80003a0 <HAL_GetTick>
 80003c4:	1b40      	subs	r0, r0, r5
 80003c6:	42a0      	cmp	r0, r4
 80003c8:	d3fa      	bcc.n	80003c0 <HAL_Delay+0x14>
  {
  }
}
 80003ca:	bd38      	pop	{r3, r4, r5, pc}
 80003cc:	20000000 	.word	0x20000000

080003d0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80003d0:	4b01      	ldr	r3, [pc, #4]	; (80003d8 <HAL_GetREVID+0x8>)
 80003d2:	6818      	ldr	r0, [r3, #0]
}
 80003d4:	0c00      	lsrs	r0, r0, #16
 80003d6:	4770      	bx	lr
 80003d8:	5c001000 	.word	0x5c001000

080003dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80003dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80003e0:	4c61      	ldr	r4, [pc, #388]	; (8000568 <HAL_ADC_Start_DMA+0x18c>)
 80003e2:	6805      	ldr	r5, [r0, #0]
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	d030      	beq.n	800044a <HAL_ADC_Start_DMA+0x6e>
 80003e8:	4b60      	ldr	r3, [pc, #384]	; (800056c <HAL_ADC_Start_DMA+0x190>)
 80003ea:	429d      	cmp	r5, r3
 80003ec:	d02d      	beq.n	800044a <HAL_ADC_Start_DMA+0x6e>
 80003ee:	4c60      	ldr	r4, [pc, #384]	; (8000570 <HAL_ADC_Start_DMA+0x194>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80003f0:	68a6      	ldr	r6, [r4, #8]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80003f2:	68ac      	ldr	r4, [r5, #8]
 80003f4:	0764      	lsls	r4, r4, #29
 80003f6:	d42d      	bmi.n	8000454 <HAL_ADC_Start_DMA+0x78>

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80003f8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d029      	beq.n	8000454 <HAL_ADC_Start_DMA+0x78>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000400:	f006 061f 	and.w	r6, r6, #31
 8000404:	2301      	movs	r3, #1
 8000406:	4690      	mov	r8, r2
 8000408:	460f      	mov	r7, r1

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800040a:	2e09      	cmp	r6, #9
 800040c:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 800040e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000412:	d905      	bls.n	8000420 <HAL_ADC_Start_DMA+0x44>
        LL_ADC_REG_StartConversion(hadc->Instance);
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000414:	2300      	movs	r3, #0
 8000416:	2001      	movs	r0, #1
 8000418:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = HAL_BUSY;
  }

  /* Return function status */
  return tmp_hal_status;
}
 800041c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000420:	f240 2321 	movw	r3, #545	; 0x221
 8000424:	40f3      	lsrs	r3, r6
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000426:	07db      	lsls	r3, r3, #31
 8000428:	d5f4      	bpl.n	8000414 <HAL_ADC_Start_DMA+0x38>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800042a:	68ab      	ldr	r3, [r5, #8]
 800042c:	07d8      	lsls	r0, r3, #31
 800042e:	d414      	bmi.n	800045a <HAL_ADC_Start_DMA+0x7e>
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8000430:	68aa      	ldr	r2, [r5, #8]
 8000432:	4b50      	ldr	r3, [pc, #320]	; (8000574 <HAL_ADC_Start_DMA+0x198>)
 8000434:	421a      	tst	r2, r3
 8000436:	d055      	beq.n	80004e4 <HAL_ADC_Start_DMA+0x108>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000438:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800043a:	f043 0310 	orr.w	r3, r3, #16
 800043e:	6563      	str	r3, [r4, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000440:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000442:	f043 0301 	orr.w	r3, r3, #1
 8000446:	65a3      	str	r3, [r4, #88]	; 0x58
 8000448:	e7e4      	b.n	8000414 <HAL_ADC_Start_DMA+0x38>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800044a:	4c4b      	ldr	r4, [pc, #300]	; (8000578 <HAL_ADC_Start_DMA+0x19c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800044c:	68a6      	ldr	r6, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800044e:	68ac      	ldr	r4, [r5, #8]
 8000450:	0764      	lsls	r4, r4, #29
 8000452:	d5d1      	bpl.n	80003f8 <HAL_ADC_Start_DMA+0x1c>
    tmp_hal_status = HAL_BUSY;
 8000454:	2002      	movs	r0, #2
}
 8000456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800045a:	4b44      	ldr	r3, [pc, #272]	; (800056c <HAL_ADC_Start_DMA+0x190>)
 800045c:	1aed      	subs	r5, r5, r3
 800045e:	bf18      	it	ne
 8000460:	2501      	movne	r5, #1
        ADC_STATE_CLR_SET(hadc->State,
 8000462:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000464:	4b45      	ldr	r3, [pc, #276]	; (800057c <HAL_ADC_Start_DMA+0x1a0>)
 8000466:	4013      	ands	r3, r2
 8000468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800046c:	6563      	str	r3, [r4, #84]	; 0x54
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800046e:	b106      	cbz	r6, 8000472 <HAL_ADC_Start_DMA+0x96>
 8000470:	b11d      	cbz	r5, 800047a <HAL_ADC_Start_DMA+0x9e>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000472:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000474:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000478:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800047a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800047c:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8000480:	d02e      	beq.n	80004e0 <HAL_ADC_Start_DMA+0x104>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000482:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000484:	f023 0306 	bic.w	r3, r3, #6
 8000488:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800048a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800048c:	251c      	movs	r5, #28
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800048e:	483c      	ldr	r0, [pc, #240]	; (8000580 <HAL_ADC_Start_DMA+0x1a4>)
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000490:	4643      	mov	r3, r8
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000492:	4e3c      	ldr	r6, [pc, #240]	; (8000584 <HAL_ADC_Start_DMA+0x1a8>)
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000494:	463a      	mov	r2, r7
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000496:	63c8      	str	r0, [r1, #60]	; 0x3c
        __HAL_UNLOCK(hadc);
 8000498:	2100      	movs	r1, #0
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800049a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800049c:	6406      	str	r6, [r0, #64]	; 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800049e:	4e3a      	ldr	r6, [pc, #232]	; (8000588 <HAL_ADC_Start_DMA+0x1ac>)
 80004a0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80004a2:	64c6      	str	r6, [r0, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80004a4:	6820      	ldr	r0, [r4, #0]
 80004a6:	6005      	str	r5, [r0, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80004a8:	6820      	ldr	r0, [r4, #0]
        __HAL_UNLOCK(hadc);
 80004aa:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80004ae:	6841      	ldr	r1, [r0, #4]
 80004b0:	f041 0110 	orr.w	r1, r1, #16
 80004b4:	6041      	str	r1, [r0, #4]
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80004b6:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80004b8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80004ba:	68c1      	ldr	r1, [r0, #12]
 80004bc:	f021 0103 	bic.w	r1, r1, #3
 80004c0:	4329      	orrs	r1, r5
 80004c2:	60c1      	str	r1, [r0, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80004c4:	6821      	ldr	r1, [r4, #0]
 80004c6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80004c8:	3140      	adds	r1, #64	; 0x40
 80004ca:	f001 f917 	bl	80016fc <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80004ce:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80004d0:	4b2e      	ldr	r3, [pc, #184]	; (800058c <HAL_ADC_Start_DMA+0x1b0>)
 80004d2:	6891      	ldr	r1, [r2, #8]
 80004d4:	400b      	ands	r3, r1
 80004d6:	f043 0304 	orr.w	r3, r3, #4
 80004da:	6093      	str	r3, [r2, #8]
}
 80004dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          ADC_CLEAR_ERRORCODE(hadc);
 80004e0:	65a3      	str	r3, [r4, #88]	; 0x58
 80004e2:	e7d2      	b.n	800048a <HAL_ADC_Start_DMA+0xae>
  MODIFY_REG(ADCx->CR,
 80004e4:	68aa      	ldr	r2, [r5, #8]
 80004e6:	4b29      	ldr	r3, [pc, #164]	; (800058c <HAL_ADC_Start_DMA+0x1b0>)
 80004e8:	4013      	ands	r3, r2
 80004ea:	f043 0301 	orr.w	r3, r3, #1
 80004ee:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 80004f0:	f7ff ff56 	bl	80003a0 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80004f4:	6823      	ldr	r3, [r4, #0]
 80004f6:	4a1c      	ldr	r2, [pc, #112]	; (8000568 <HAL_ADC_Start_DMA+0x18c>)
    tickstart = HAL_GetTick();
 80004f8:	4681      	mov	r9, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d020      	beq.n	8000540 <HAL_ADC_Start_DMA+0x164>
 80004fe:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000502:	4293      	cmp	r3, r2
 8000504:	d01c      	beq.n	8000540 <HAL_ADC_Start_DMA+0x164>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000506:	4a1a      	ldr	r2, [pc, #104]	; (8000570 <HAL_ADC_Start_DMA+0x194>)
 8000508:	6892      	ldr	r2, [r2, #8]
  MODIFY_REG(ADCx->CR,
 800050a:	4d20      	ldr	r5, [pc, #128]	; (800058c <HAL_ADC_Start_DMA+0x1b0>)
 800050c:	e00b      	b.n	8000526 <HAL_ADC_Start_DMA+0x14a>
 800050e:	689a      	ldr	r2, [r3, #8]
 8000510:	402a      	ands	r2, r5
 8000512:	f042 0201 	orr.w	r2, r2, #1
 8000516:	609a      	str	r2, [r3, #8]
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000518:	f7ff ff42 	bl	80003a0 <HAL_GetTick>
 800051c:	eba0 0009 	sub.w	r0, r0, r9
 8000520:	2802      	cmp	r0, #2
 8000522:	d889      	bhi.n	8000438 <HAL_ADC_Start_DMA+0x5c>
 8000524:	6823      	ldr	r3, [r4, #0]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	07d2      	lsls	r2, r2, #31
 800052a:	d418      	bmi.n	800055e <HAL_ADC_Start_DMA+0x182>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800052c:	689a      	ldr	r2, [r3, #8]
 800052e:	07d1      	lsls	r1, r2, #31
 8000530:	d5ed      	bpl.n	800050e <HAL_ADC_Start_DMA+0x132>
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000532:	f7ff ff35 	bl	80003a0 <HAL_GetTick>
 8000536:	eba0 0009 	sub.w	r0, r0, r9
 800053a:	2802      	cmp	r0, #2
 800053c:	d9f2      	bls.n	8000524 <HAL_ADC_Start_DMA+0x148>
 800053e:	e77b      	b.n	8000438 <HAL_ADC_Start_DMA+0x5c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000540:	490d      	ldr	r1, [pc, #52]	; (8000578 <HAL_ADC_Start_DMA+0x19c>)
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000542:	4a0a      	ldr	r2, [pc, #40]	; (800056c <HAL_ADC_Start_DMA+0x190>)
 8000544:	6889      	ldr	r1, [r1, #8]
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000546:	f011 0f1f 	tst.w	r1, #31
 800054a:	bf0c      	ite	eq
 800054c:	2501      	moveq	r5, #1
 800054e:	2500      	movne	r5, #0
 8000550:	4293      	cmp	r3, r2
 8000552:	bf18      	it	ne
 8000554:	f045 0501 	orrne.w	r5, r5, #1
 8000558:	2d00      	cmp	r5, #0
 800055a:	d1d6      	bne.n	800050a <HAL_ADC_Start_DMA+0x12e>
 800055c:	e781      	b.n	8000462 <HAL_ADC_Start_DMA+0x86>
 800055e:	4d03      	ldr	r5, [pc, #12]	; (800056c <HAL_ADC_Start_DMA+0x190>)
 8000560:	1b5d      	subs	r5, r3, r5
 8000562:	bf18      	it	ne
 8000564:	2501      	movne	r5, #1
 8000566:	e77c      	b.n	8000462 <HAL_ADC_Start_DMA+0x86>
 8000568:	40022000 	.word	0x40022000
 800056c:	40022100 	.word	0x40022100
 8000570:	58026300 	.word	0x58026300
 8000574:	8000003f 	.word	0x8000003f
 8000578:	40022300 	.word	0x40022300
 800057c:	fffff0fe 	.word	0xfffff0fe
 8000580:	080005a9 	.word	0x080005a9
 8000584:	08000599 	.word	0x08000599
 8000588:	08000611 	.word	0x08000611
 800058c:	7fffffc0 	.word	0x7fffffc0

08000590 <HAL_ADC_ConvCpltCallback>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <HAL_ADC_ConvHalfCpltCallback>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8000598:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800059a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800059c:	f7ff fffa 	bl	8000594 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80005a0:	bd08      	pop	{r3, pc}
 80005a2:	bf00      	nop

080005a4 <HAL_ADC_ErrorCallback>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <ADC_DMAConvCplt>:
{
 80005a8:	b510      	push	{r4, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80005aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80005ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80005ae:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80005b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80005b4:	d11d      	bne.n	80005f2 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80005b6:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80005b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005bc:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80005be:	680a      	ldr	r2, [r1, #0]
 80005c0:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80005c4:	68ca      	ldr	r2, [r1, #12]
 80005c6:	d01b      	beq.n	8000600 <ADC_DMAConvCplt+0x58>
 80005c8:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80005cc:	d10d      	bne.n	80005ea <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80005ce:	68ca      	ldr	r2, [r1, #12]
 80005d0:	0494      	lsls	r4, r2, #18
 80005d2:	d40a      	bmi.n	80005ea <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80005d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80005d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80005da:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80005dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80005de:	04d1      	lsls	r1, r2, #19
 80005e0:	d403      	bmi.n	80005ea <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80005e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80005e4:	f042 0201 	orr.w	r2, r2, #1
 80005e8:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff ffd0 	bl	8000590 <HAL_ADC_ConvCpltCallback>
}
 80005f0:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80005f2:	06d2      	lsls	r2, r2, #27
 80005f4:	d407      	bmi.n	8000606 <ADC_DMAConvCplt+0x5e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80005f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80005f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8000600:	0790      	lsls	r0, r2, #30
 8000602:	d1f2      	bne.n	80005ea <ADC_DMAConvCplt+0x42>
 8000604:	e7e6      	b.n	80005d4 <ADC_DMAConvCplt+0x2c>
      HAL_ADC_ErrorCallback(hadc);
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ffcc 	bl	80005a4 <HAL_ADC_ErrorCallback>
}
 800060c:	bd10      	pop	{r4, pc}
 800060e:	bf00      	nop

08000610 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8000610:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000612:	6b83      	ldr	r3, [r0, #56]	; 0x38

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000614:	6d5a      	ldr	r2, [r3, #84]	; 0x54

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000616:	4618      	mov	r0, r3
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800061c:	655a      	str	r2, [r3, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800061e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000620:	f042 0204 	orr.w	r2, r2, #4
 8000624:	659a      	str	r2, [r3, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc);
 8000626:	f7ff ffbd 	bl	80005a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800062a:	bd08      	pop	{r3, pc}

0800062c <HAL_ADC_ConfigChannel>:
{
 800062c:	4603      	mov	r3, r0
  __IO uint32_t wait_loop_index = 0;
 800062e:	2000      	movs	r0, #0
{
 8000630:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 8000632:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
{
 8000636:	b082      	sub	sp, #8
  __HAL_LOCK(hadc);
 8000638:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0;
 800063a:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800063c:	f000 8130 	beq.w	80008a0 <HAL_ADC_ConfigChannel+0x274>
 8000640:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000642:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8000644:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000648:	68a2      	ldr	r2, [r4, #8]
 800064a:	0757      	lsls	r7, r2, #29
 800064c:	d443      	bmi.n	80006d6 <HAL_ADC_ConfigChannel+0xaa>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800064e:	680a      	ldr	r2, [r1, #0]
 8000650:	f3c2 0513 	ubfx	r5, r2, #0, #20
 8000654:	2d00      	cmp	r5, #0
 8000656:	f040 80a2 	bne.w	800079e <HAL_ADC_ConfigChannel+0x172>
 800065a:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800065e:	4090      	lsls	r0, r2
 8000660:	69e2      	ldr	r2, [r4, #28]
  MODIFY_REG(*preg,
 8000662:	271f      	movs	r7, #31
 8000664:	4310      	orrs	r0, r2
 8000666:	61e0      	str	r0, [r4, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000668:	6848      	ldr	r0, [r1, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800066a:	681c      	ldr	r4, [r3, #0]
 800066c:	0985      	lsrs	r5, r0, #6
  MODIFY_REG(*preg,
 800066e:	680a      	ldr	r2, [r1, #0]
 8000670:	4038      	ands	r0, r7
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000672:	3430      	adds	r4, #48	; 0x30
 8000674:	f005 050c 	and.w	r5, r5, #12
  MODIFY_REG(*preg,
 8000678:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800067c:	4087      	lsls	r7, r0
 800067e:	592e      	ldr	r6, [r5, r4]
 8000680:	4082      	lsls	r2, r0
 8000682:	ea26 0007 	bic.w	r0, r6, r7
 8000686:	4302      	orrs	r2, r0
 8000688:	512a      	str	r2, [r5, r4]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800068a:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800068c:	6890      	ldr	r0, [r2, #8]
 800068e:	0746      	lsls	r6, r0, #29
 8000690:	f100 8083 	bmi.w	800079a <HAL_ADC_ConfigChannel+0x16e>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000694:	6895      	ldr	r5, [r2, #8]
 8000696:	f015 0508 	ands.w	r5, r5, #8
 800069a:	d026      	beq.n	80006ea <HAL_ADC_ConfigChannel+0xbe>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800069c:	6890      	ldr	r0, [r2, #8]
 800069e:	07c5      	lsls	r5, r0, #31
 80006a0:	d417      	bmi.n	80006d2 <HAL_ADC_ConfigChannel+0xa6>
  MODIFY_REG(ADCx->DIFSEL,
 80006a2:	68cc      	ldr	r4, [r1, #12]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80006a4:	680e      	ldr	r6, [r1, #0]
 80006a6:	f004 0518 	and.w	r5, r4, #24
 80006aa:	48bf      	ldr	r0, [pc, #764]	; (80009a8 <HAL_ADC_ConfigChannel+0x37c>)
 80006ac:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
 80006b0:	40e8      	lsrs	r0, r5
 80006b2:	f3c6 0513 	ubfx	r5, r6, #0, #20
 80006b6:	4030      	ands	r0, r6
 80006b8:	ea24 0405 	bic.w	r4, r4, r5
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80006bc:	4dbb      	ldr	r5, [pc, #748]	; (80009ac <HAL_ADC_ConfigChannel+0x380>)
 80006be:	4320      	orrs	r0, r4
 80006c0:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
 80006c4:	68ca      	ldr	r2, [r1, #12]
 80006c6:	42aa      	cmp	r2, r5
 80006c8:	f000 80a3 	beq.w	8000812 <HAL_ADC_ConfigChannel+0x1e6>
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80006cc:	6809      	ldr	r1, [r1, #0]
 80006ce:	2900      	cmp	r1, #0
 80006d0:	db6d      	blt.n	80007ae <HAL_ADC_ConfigChannel+0x182>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006d2:	2000      	movs	r0, #0
 80006d4:	e003      	b.n	80006de <HAL_ADC_ConfigChannel+0xb2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80006d8:	f042 0220 	orr.w	r2, r2, #32
 80006dc:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 80006de:	2200      	movs	r2, #0
 80006e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80006e4:	b002      	add	sp, #8
 80006e6:	bcf0      	pop	{r4, r5, r6, r7}
 80006e8:	4770      	bx	lr
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80006ea:	680c      	ldr	r4, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80006ec:	3214      	adds	r2, #20
  MODIFY_REG(*preg,
 80006ee:	2007      	movs	r0, #7
 80006f0:	688f      	ldr	r7, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80006f2:	0de6      	lsrs	r6, r4, #23
  MODIFY_REG(*preg,
 80006f4:	f3c4 5404 	ubfx	r4, r4, #20, #5
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80006f8:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 80006fc:	fa00 fc04 	lsl.w	ip, r0, r4
 8000700:	fa07 f404 	lsl.w	r4, r7, r4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000704:	4faa      	ldr	r7, [pc, #680]	; (80009b0 <HAL_ADC_ConfigChannel+0x384>)
 8000706:	58b0      	ldr	r0, [r6, r2]
 8000708:	ea20 000c 	bic.w	r0, r0, ip
 800070c:	4320      	orrs	r0, r4
 800070e:	50b0      	str	r0, [r6, r2]
 8000710:	683a      	ldr	r2, [r7, #0]
 8000712:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8000716:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800071a:	f000 80b8 	beq.w	800088e <HAL_ADC_ConfigChannel+0x262>
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	6948      	ldr	r0, [r1, #20]
 8000722:	68d4      	ldr	r4, [r2, #12]
 8000724:	f014 0f10 	tst.w	r4, #16
 8000728:	68d4      	ldr	r4, [r2, #12]
 800072a:	f040 80d9 	bne.w	80008e0 <HAL_ADC_ConfigChannel+0x2b4>
 800072e:	f3c4 0482 	ubfx	r4, r4, #2, #3
 8000732:	0064      	lsls	r4, r4, #1
 8000734:	fa00 f404 	lsl.w	r4, r0, r4
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000738:	690e      	ldr	r6, [r1, #16]
 800073a:	6808      	ldr	r0, [r1, #0]
 800073c:	2e04      	cmp	r6, #4
 800073e:	f000 80b3 	beq.w	80008a8 <HAL_ADC_ConfigChannel+0x27c>
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000742:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 8000744:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8000748:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 800074c:	4320      	orrs	r0, r4
 800074e:	f007 4400 	and.w	r4, r7, #2147483648	; 0x80000000
 8000752:	4320      	orrs	r0, r4
 8000754:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	7e4e      	ldrb	r6, [r1, #25]
 800075c:	690c      	ldr	r4, [r1, #16]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800075e:	3060      	adds	r0, #96	; 0x60
 8000760:	2e01      	cmp	r6, #1
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000762:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
 8000766:	bf14      	ite	ne
 8000768:	2600      	movne	r6, #0
 800076a:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800076e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000772:	4332      	orrs	r2, r6
 8000774:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8000778:	7e0c      	ldrb	r4, [r1, #24]
 800077a:	6818      	ldr	r0, [r3, #0]
 800077c:	2c01      	cmp	r4, #1
 800077e:	690a      	ldr	r2, [r1, #16]
 8000780:	d104      	bne.n	800078c <HAL_ADC_ConfigChannel+0x160>
 8000782:	f002 021f 	and.w	r2, r2, #31
 8000786:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800078a:	4095      	lsls	r5, r2
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800078c:	6902      	ldr	r2, [r0, #16]
 800078e:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000792:	4315      	orrs	r5, r2
 8000794:	6105      	str	r5, [r0, #16]
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	e780      	b.n	800069c <HAL_ADC_ConfigChannel+0x70>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800079a:	6890      	ldr	r0, [r2, #8]
 800079c:	e77e      	b.n	800069c <HAL_ADC_ConfigChannel+0x70>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800079e:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80007a2:	fab2 f282 	clz	r2, r2
 80007a6:	f002 021f 	and.w	r2, r2, #31
 80007aa:	4090      	lsls	r0, r2
 80007ac:	e758      	b.n	8000660 <HAL_ADC_ConfigChannel+0x34>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80007ae:	6818      	ldr	r0, [r3, #0]
 80007b0:	4a80      	ldr	r2, [pc, #512]	; (80009b4 <HAL_ADC_ConfigChannel+0x388>)
 80007b2:	4290      	cmp	r0, r2
 80007b4:	f000 80c6 	beq.w	8000944 <HAL_ADC_ConfigChannel+0x318>
 80007b8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80007bc:	4290      	cmp	r0, r2
 80007be:	f000 80c1 	beq.w	8000944 <HAL_ADC_ConfigChannel+0x318>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80007c2:	4e7d      	ldr	r6, [pc, #500]	; (80009b8 <HAL_ADC_ConfigChannel+0x38c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80007c4:	4d7d      	ldr	r5, [pc, #500]	; (80009bc <HAL_ADC_ConfigChannel+0x390>)
 80007c6:	68ac      	ldr	r4, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80007c8:	68b2      	ldr	r2, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80007ca:	f004 76e0 	and.w	r6, r4, #29360128	; 0x1c00000
 80007ce:	43d2      	mvns	r2, r2
 80007d0:	f002 0201 	and.w	r2, r2, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80007d4:	2a00      	cmp	r2, #0
 80007d6:	f000 80c3 	beq.w	8000960 <HAL_ADC_ConfigChannel+0x334>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80007da:	4a79      	ldr	r2, [pc, #484]	; (80009c0 <HAL_ADC_ConfigChannel+0x394>)
 80007dc:	4291      	cmp	r1, r2
 80007de:	f000 80f9 	beq.w	80009d4 <HAL_ADC_ConfigChannel+0x3a8>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80007e2:	4a78      	ldr	r2, [pc, #480]	; (80009c4 <HAL_ADC_ConfigChannel+0x398>)
 80007e4:	4291      	cmp	r1, r2
 80007e6:	f000 8117 	beq.w	8000a18 <HAL_ADC_ConfigChannel+0x3ec>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80007ea:	4a77      	ldr	r2, [pc, #476]	; (80009c8 <HAL_ADC_ConfigChannel+0x39c>)
 80007ec:	4291      	cmp	r1, r2
 80007ee:	f47f af70 	bne.w	80006d2 <HAL_ADC_ConfigChannel+0xa6>
            if (ADC_VREFINT_INSTANCE(hadc))
 80007f2:	0262      	lsls	r2, r4, #9
 80007f4:	f53f af6d 	bmi.w	80006d2 <HAL_ADC_ConfigChannel+0xa6>
 80007f8:	4a6f      	ldr	r2, [pc, #444]	; (80009b8 <HAL_ADC_ConfigChannel+0x38c>)
 80007fa:	4290      	cmp	r0, r2
 80007fc:	f47f af69 	bne.w	80006d2 <HAL_ADC_ConfigChannel+0xa6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000800:	68a9      	ldr	r1, [r5, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8000802:	f446 0280 	orr.w	r2, r6, #4194304	; 0x400000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000806:	2000      	movs	r0, #0
 8000808:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800080c:	430a      	orrs	r2, r1
 800080e:	60aa      	str	r2, [r5, #8]
 8000810:	e765      	b.n	80006de <HAL_ADC_ConfigChannel+0xb2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000812:	6808      	ldr	r0, [r1, #0]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000814:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000816:	f3c0 0213 	ubfx	r2, r0, #0, #20
 800081a:	2a00      	cmp	r2, #0
 800081c:	d066      	beq.n	80008ec <HAL_ADC_ConfigChannel+0x2c0>
 800081e:	fa90 f2a0 	rbit	r2, r0
 8000822:	fab2 f282 	clz	r2, r2
 8000826:	3201      	adds	r2, #1
 8000828:	f002 021f 	and.w	r2, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800082c:	2a09      	cmp	r2, #9
 800082e:	f200 809d 	bhi.w	800096c <HAL_ADC_ConfigChannel+0x340>
 8000832:	fa90 f2a0 	rbit	r2, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000836:	fab2 f282 	clz	r2, r2
 800083a:	fa90 f5a0 	rbit	r5, r0
 800083e:	2601      	movs	r6, #1
 8000840:	fab5 f585 	clz	r5, r5
 8000844:	3201      	adds	r2, #1
 8000846:	4435      	add	r5, r6
 8000848:	0692      	lsls	r2, r2, #26
 800084a:	f005 051f 	and.w	r5, r5, #31
 800084e:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000852:	fa06 f505 	lsl.w	r5, r6, r5
 8000856:	432a      	orrs	r2, r5
 8000858:	fa90 f0a0 	rbit	r0, r0
 800085c:	fab0 f080 	clz	r0, r0
 8000860:	4430      	add	r0, r6
 8000862:	f000 001f 	and.w	r0, r0, #31
 8000866:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800086a:	0500      	lsls	r0, r0, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800086c:	4310      	orrs	r0, r2
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800086e:	3414      	adds	r4, #20
  MODIFY_REG(*preg,
 8000870:	2707      	movs	r7, #7
 8000872:	688a      	ldr	r2, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000874:	0dc6      	lsrs	r6, r0, #23
  MODIFY_REG(*preg,
 8000876:	f3c0 5004 	ubfx	r0, r0, #20, #5
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800087a:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 800087e:	4087      	lsls	r7, r0
 8000880:	4082      	lsls	r2, r0
 8000882:	5935      	ldr	r5, [r6, r4]
 8000884:	ea25 0007 	bic.w	r0, r5, r7
 8000888:	4310      	orrs	r0, r2
 800088a:	5130      	str	r0, [r6, r4]
 800088c:	e71e      	b.n	80006cc <HAL_ADC_ConfigChannel+0xa0>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	6948      	ldr	r0, [r1, #20]
 8000892:	68d4      	ldr	r4, [r2, #12]
 8000894:	f3c4 0482 	ubfx	r4, r4, #2, #3
 8000898:	0064      	lsls	r4, r4, #1
 800089a:	fa00 f404 	lsl.w	r4, r0, r4
 800089e:	e74b      	b.n	8000738 <HAL_ADC_ConfigChannel+0x10c>
  __HAL_LOCK(hadc);
 80008a0:	2002      	movs	r0, #2
}
 80008a2:	b002      	add	sp, #8
 80008a4:	bcf0      	pop	{r4, r5, r6, r7}
 80008a6:	4770      	bx	lr
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80008a8:	6e14      	ldr	r4, [r2, #96]	; 0x60
 80008aa:	0680      	lsls	r0, r0, #26
 80008ac:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80008b0:	4284      	cmp	r4, r0
 80008b2:	d03f      	beq.n	8000934 <HAL_ADC_ConfigChannel+0x308>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80008b4:	6e54      	ldr	r4, [r2, #100]	; 0x64
 80008b6:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80008ba:	4284      	cmp	r4, r0
 80008bc:	d032      	beq.n	8000924 <HAL_ADC_ConfigChannel+0x2f8>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80008be:	6e94      	ldr	r4, [r2, #104]	; 0x68
 80008c0:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80008c4:	4284      	cmp	r4, r0
 80008c6:	d025      	beq.n	8000914 <HAL_ADC_ConfigChannel+0x2e8>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80008c8:	6ed4      	ldr	r4, [r2, #108]	; 0x6c
 80008ca:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80008ce:	42a0      	cmp	r0, r4
 80008d0:	f47f aee4 	bne.w	800069c <HAL_ADC_ConfigChannel+0x70>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80008d4:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80008d6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80008da:	66d0      	str	r0, [r2, #108]	; 0x6c
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	e6dd      	b.n	800069c <HAL_ADC_ConfigChannel+0x70>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80008e0:	0864      	lsrs	r4, r4, #1
 80008e2:	f004 0408 	and.w	r4, r4, #8
 80008e6:	fa00 f404 	lsl.w	r4, r0, r4
 80008ea:	e725      	b.n	8000738 <HAL_ADC_ConfigChannel+0x10c>
 80008ec:	2601      	movs	r6, #1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80008ee:	0e80      	lsrs	r0, r0, #26
 80008f0:	4430      	add	r0, r6
 80008f2:	f000 051f 	and.w	r5, r0, #31
 80008f6:	0682      	lsls	r2, r0, #26
 80008f8:	40ae      	lsls	r6, r5
 80008fa:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80008fe:	2d09      	cmp	r5, #9
 8000900:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8000904:	ea42 0206 	orr.w	r2, r2, r6
 8000908:	d9af      	bls.n	800086a <HAL_ADC_ConfigChannel+0x23e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800090a:	381e      	subs	r0, #30
 800090c:	0500      	lsls	r0, r0, #20
 800090e:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8000912:	e7ab      	b.n	800086c <HAL_ADC_ConfigChannel+0x240>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8000914:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8000916:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800091a:	6690      	str	r0, [r2, #104]	; 0x68
 800091c:	6808      	ldr	r0, [r1, #0]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	0680      	lsls	r0, r0, #26
 8000922:	e7d1      	b.n	80008c8 <HAL_ADC_ConfigChannel+0x29c>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8000924:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8000926:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800092a:	6650      	str	r0, [r2, #100]	; 0x64
 800092c:	6808      	ldr	r0, [r1, #0]
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	0680      	lsls	r0, r0, #26
 8000932:	e7c4      	b.n	80008be <HAL_ADC_ConfigChannel+0x292>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8000934:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8000936:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800093a:	6610      	str	r0, [r2, #96]	; 0x60
 800093c:	6808      	ldr	r0, [r1, #0]
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	0680      	lsls	r0, r0, #26
 8000942:	e7b7      	b.n	80008b4 <HAL_ADC_ConfigChannel+0x288>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000944:	4a21      	ldr	r2, [pc, #132]	; (80009cc <HAL_ADC_ConfigChannel+0x3a0>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000946:	4e22      	ldr	r6, [pc, #136]	; (80009d0 <HAL_ADC_ConfigChannel+0x3a4>)
 8000948:	4f1a      	ldr	r7, [pc, #104]	; (80009b4 <HAL_ADC_ConfigChannel+0x388>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800094a:	4615      	mov	r5, r2
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800094c:	6894      	ldr	r4, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800094e:	68bf      	ldr	r7, [r7, #8]
 8000950:	68b2      	ldr	r2, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000952:	f004 76e0 	and.w	r6, r4, #29360128	; 0x1c00000
 8000956:	433a      	orrs	r2, r7
 8000958:	43d2      	mvns	r2, r2
 800095a:	f002 0201 	and.w	r2, r2, #1
 800095e:	e739      	b.n	80007d4 <HAL_ADC_ConfigChannel+0x1a8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000960:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8000962:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000964:	f042 0220 	orr.w	r2, r2, #32
 8000968:	655a      	str	r2, [r3, #84]	; 0x54
 800096a:	e6b8      	b.n	80006de <HAL_ADC_ConfigChannel+0xb2>
 800096c:	fa90 f2a0 	rbit	r2, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	fa90 f5a0 	rbit	r5, r0
 8000978:	2601      	movs	r6, #1
 800097a:	fab5 f585 	clz	r5, r5
 800097e:	3201      	adds	r2, #1
 8000980:	4435      	add	r5, r6
 8000982:	0692      	lsls	r2, r2, #26
 8000984:	f005 051f 	and.w	r5, r5, #31
 8000988:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800098c:	fa06 f505 	lsl.w	r5, r6, r5
 8000990:	432a      	orrs	r2, r5
 8000992:	fa90 f0a0 	rbit	r0, r0
 8000996:	fab0 f080 	clz	r0, r0
 800099a:	4430      	add	r0, r6
 800099c:	f000 001f 	and.w	r0, r0, #31
 80009a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80009a4:	e7b1      	b.n	800090a <HAL_ADC_ConfigChannel+0x2de>
 80009a6:	bf00      	nop
 80009a8:	000fffff 	.word	0x000fffff
 80009ac:	47ff0000 	.word	0x47ff0000
 80009b0:	5c001000 	.word	0x5c001000
 80009b4:	40022000 	.word	0x40022000
 80009b8:	58026000 	.word	0x58026000
 80009bc:	58026300 	.word	0x58026300
 80009c0:	cb840000 	.word	0xcb840000
 80009c4:	c7520000 	.word	0xc7520000
 80009c8:	cfb80000 	.word	0xcfb80000
 80009cc:	40022300 	.word	0x40022300
 80009d0:	40022100 	.word	0x40022100
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80009d4:	0224      	lsls	r4, r4, #8
 80009d6:	f53f ae7c 	bmi.w	80006d2 <HAL_ADC_ConfigChannel+0xa6>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80009da:	4a17      	ldr	r2, [pc, #92]	; (8000a38 <HAL_ADC_ConfigChannel+0x40c>)
 80009dc:	4290      	cmp	r0, r2
 80009de:	f47f ae78 	bne.w	80006d2 <HAL_ADC_ConfigChannel+0xa6>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80009e2:	4a16      	ldr	r2, [pc, #88]	; (8000a3c <HAL_ADC_ConfigChannel+0x410>)
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80009e4:	f446 0100 	orr.w	r1, r6, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80009e8:	68a8      	ldr	r0, [r5, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80009ea:	6812      	ldr	r2, [r2, #0]
 80009ec:	f020 70e0 	bic.w	r0, r0, #29360128	; 0x1c00000
 80009f0:	4c13      	ldr	r4, [pc, #76]	; (8000a40 <HAL_ADC_ConfigChannel+0x414>)
 80009f2:	0992      	lsrs	r2, r2, #6
 80009f4:	4301      	orrs	r1, r0
 80009f6:	fba4 0202 	umull	r0, r2, r4, r2
 80009fa:	60a9      	str	r1, [r5, #8]
 80009fc:	0992      	lsrs	r2, r2, #6
 80009fe:	0052      	lsls	r2, r2, #1
 8000a00:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 8000a02:	9a01      	ldr	r2, [sp, #4]
 8000a04:	2a00      	cmp	r2, #0
 8000a06:	f43f ae64 	beq.w	80006d2 <HAL_ADC_ConfigChannel+0xa6>
                wait_loop_index--;
 8000a0a:	9a01      	ldr	r2, [sp, #4]
 8000a0c:	3a01      	subs	r2, #1
 8000a0e:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 8000a10:	9a01      	ldr	r2, [sp, #4]
 8000a12:	2a00      	cmp	r2, #0
 8000a14:	d1f9      	bne.n	8000a0a <HAL_ADC_ConfigChannel+0x3de>
 8000a16:	e65c      	b.n	80006d2 <HAL_ADC_ConfigChannel+0xa6>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8000a18:	01e1      	lsls	r1, r4, #7
 8000a1a:	f53f ae5a 	bmi.w	80006d2 <HAL_ADC_ConfigChannel+0xa6>
 8000a1e:	4a06      	ldr	r2, [pc, #24]	; (8000a38 <HAL_ADC_ConfigChannel+0x40c>)
 8000a20:	4290      	cmp	r0, r2
 8000a22:	f47f ae56 	bne.w	80006d2 <HAL_ADC_ConfigChannel+0xa6>
 8000a26:	68a9      	ldr	r1, [r5, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8000a28:	f046 7280 	orr.w	r2, r6, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000a32:	430a      	orrs	r2, r1
 8000a34:	60aa      	str	r2, [r5, #8]
 8000a36:	e652      	b.n	80006de <HAL_ADC_ConfigChannel+0xb2>
 8000a38:	58026000 	.word	0x58026000
 8000a3c:	20000018 	.word	0x20000018
 8000a40:	053e2d63 	.word	0x053e2d63

08000a44 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8000a44:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8000a46:	4a52      	ldr	r2, [pc, #328]	; (8000b90 <ADC_ConfigureBoostMode+0x14c>)
{
 8000a48:	4605      	mov	r5, r0
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8000a4a:	6803      	ldr	r3, [r0, #0]
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d027      	beq.n	8000aa0 <ADC_ConfigureBoostMode+0x5c>
 8000a50:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d023      	beq.n	8000aa0 <ADC_ConfigureBoostMode+0x5c>
 8000a58:	4b4e      	ldr	r3, [pc, #312]	; (8000b94 <ADC_ConfigureBoostMode+0x150>)
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000a60:	bf14      	ite	ne
 8000a62:	2301      	movne	r3, #1
 8000a64:	2300      	moveq	r3, #0
 8000a66:	b323      	cbz	r3, 8000ab2 <ADC_ConfigureBoostMode+0x6e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8000a68:	f003 fa12 	bl	8003e90 <HAL_RCC_GetHCLKFreq>
    switch(hadc->Init.ClockPrescaler)
 8000a6c:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8000a6e:	4604      	mov	r4, r0
    switch(hadc->Init.ClockPrescaler)
 8000a70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000a74:	d062      	beq.n	8000b3c <ADC_ConfigureBoostMode+0xf8>
 8000a76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000a7a:	d072      	beq.n	8000b62 <ADC_ConfigureBoostMode+0x11e>
 8000a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a80:	d05c      	beq.n	8000b3c <ADC_ConfigureBoostMode+0xf8>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8000a82:	f7ff fca5 	bl	80003d0 <HAL_GetREVID>
 8000a86:	f241 0303 	movw	r3, #4099	; 0x1003
 8000a8a:	4298      	cmp	r0, r3
 8000a8c:	d832      	bhi.n	8000af4 <ADC_ConfigureBoostMode+0xb0>
  {
    if(freq > 20000000UL)
 8000a8e:	4a42      	ldr	r2, [pc, #264]	; (8000b98 <ADC_ConfigureBoostMode+0x154>)
 8000a90:	682b      	ldr	r3, [r5, #0]
 8000a92:	4294      	cmp	r4, r2
 8000a94:	d928      	bls.n	8000ae8 <ADC_ConfigureBoostMode+0xa4>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8000a96:	689a      	ldr	r2, [r3, #8]
 8000a98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a9c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8000a9e:	bd38      	pop	{r3, r4, r5, pc}
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8000aa0:	4b3e      	ldr	r3, [pc, #248]	; (8000b9c <ADC_ConfigureBoostMode+0x158>)
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000aa8:	bf14      	ite	ne
 8000aaa:	2301      	movne	r3, #1
 8000aac:	2300      	moveq	r3, #0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d1da      	bne.n	8000a68 <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8000ab2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000ab6:	f004 fac1 	bl	800503c <HAL_RCCEx_GetPeriphCLKFreq>
    switch(hadc->Init.ClockPrescaler)
 8000aba:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8000abc:	4604      	mov	r4, r0
    switch(hadc->Init.ClockPrescaler)
 8000abe:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8000ac2:	d049      	beq.n	8000b58 <ADC_ConfigureBoostMode+0x114>
 8000ac4:	d93e      	bls.n	8000b44 <ADC_ConfigureBoostMode+0x100>
 8000ac6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8000aca:	d04e      	beq.n	8000b6a <ADC_ConfigureBoostMode+0x126>
 8000acc:	d927      	bls.n	8000b1e <ADC_ConfigureBoostMode+0xda>
 8000ace:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8000ad2:	d048      	beq.n	8000b66 <ADC_ConfigureBoostMode+0x122>
 8000ad4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8000ad8:	d1d3      	bne.n	8000a82 <ADC_ConfigureBoostMode+0x3e>
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8000ada:	f7ff fc79 	bl	80003d0 <HAL_GetREVID>
 8000ade:	f241 0303 	movw	r3, #4099	; 0x1003
 8000ae2:	4298      	cmp	r0, r3
 8000ae4:	d805      	bhi.n	8000af2 <ADC_ConfigureBoostMode+0xae>
 8000ae6:	682b      	ldr	r3, [r5, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8000ae8:	689a      	ldr	r2, [r3, #8]
 8000aea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000aee:	609a      	str	r2, [r3, #8]
}
 8000af0:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 256UL;
 8000af2:	0a24      	lsrs	r4, r4, #8
    freq /= 2U; /* divider by 2 for Rev.V */
 8000af4:	0864      	lsrs	r4, r4, #1
    if (freq <= 6250000UL)
 8000af6:	4a2a      	ldr	r2, [pc, #168]	; (8000ba0 <ADC_ConfigureBoostMode+0x15c>)
 8000af8:	682b      	ldr	r3, [r5, #0]
 8000afa:	4294      	cmp	r4, r2
 8000afc:	d90a      	bls.n	8000b14 <ADC_ConfigureBoostMode+0xd0>
    else if(freq <= 12500000UL)
 8000afe:	4a29      	ldr	r2, [pc, #164]	; (8000ba4 <ADC_ConfigureBoostMode+0x160>)
 8000b00:	4294      	cmp	r4, r2
 8000b02:	d914      	bls.n	8000b2e <ADC_ConfigureBoostMode+0xea>
    else if(freq <= 25000000UL)
 8000b04:	4a28      	ldr	r2, [pc, #160]	; (8000ba8 <ADC_ConfigureBoostMode+0x164>)
 8000b06:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8000b08:	689a      	ldr	r2, [r3, #8]
    else if(freq <= 25000000UL)
 8000b0a:	d932      	bls.n	8000b72 <ADC_ConfigureBoostMode+0x12e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8000b0c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8000b10:	609a      	str	r2, [r3, #8]
}
 8000b12:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8000b14:	689a      	ldr	r2, [r3, #8]
 8000b16:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000b1a:	609a      	str	r2, [r3, #8]
}
 8000b1c:	bd38      	pop	{r3, r4, r5, pc}
    switch(hadc->Init.ClockPrescaler)
 8000b1e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8000b22:	d024      	beq.n	8000b6e <ADC_ConfigureBoostMode+0x12a>
 8000b24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000b28:	d1ab      	bne.n	8000a82 <ADC_ConfigureBoostMode+0x3e>
        freq /= 32UL;
 8000b2a:	0944      	lsrs	r4, r0, #5
        break;
 8000b2c:	e7a9      	b.n	8000a82 <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8000b2e:	689a      	ldr	r2, [r3, #8]
 8000b30:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000b34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b38:	609a      	str	r2, [r3, #8]
}
 8000b3a:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8000b3c:	0c1b      	lsrs	r3, r3, #16
 8000b3e:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8000b42:	e79e      	b.n	8000a82 <ADC_ConfigureBoostMode+0x3e>
    switch(hadc->Init.ClockPrescaler)
 8000b44:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000b48:	d006      	beq.n	8000b58 <ADC_ConfigureBoostMode+0x114>
 8000b4a:	d818      	bhi.n	8000b7e <ADC_ConfigureBoostMode+0x13a>
 8000b4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000b50:	d002      	beq.n	8000b58 <ADC_ConfigureBoostMode+0x114>
 8000b52:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000b56:	d194      	bne.n	8000a82 <ADC_ConfigureBoostMode+0x3e>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8000b58:	0c9b      	lsrs	r3, r3, #18
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8000b60:	e78f      	b.n	8000a82 <ADC_ConfigureBoostMode+0x3e>
        freq /= 4UL;
 8000b62:	0884      	lsrs	r4, r0, #2
        break;
 8000b64:	e78d      	b.n	8000a82 <ADC_ConfigureBoostMode+0x3e>
        freq /= 128UL;
 8000b66:	09c4      	lsrs	r4, r0, #7
        break;
 8000b68:	e78b      	b.n	8000a82 <ADC_ConfigureBoostMode+0x3e>
        freq /= 64UL;
 8000b6a:	0984      	lsrs	r4, r0, #6
        break;
 8000b6c:	e789      	b.n	8000a82 <ADC_ConfigureBoostMode+0x3e>
        freq /= 16UL;
 8000b6e:	0904      	lsrs	r4, r0, #4
      break;
 8000b70:	e787      	b.n	8000a82 <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8000b72:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b7a:	609a      	str	r2, [r3, #8]
}
 8000b7c:	bd38      	pop	{r3, r4, r5, pc}
    switch(hadc->Init.ClockPrescaler)
 8000b7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000b82:	d0e9      	beq.n	8000b58 <ADC_ConfigureBoostMode+0x114>
 8000b84:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8000b88:	f47f af7b 	bne.w	8000a82 <ADC_ConfigureBoostMode+0x3e>
 8000b8c:	e7e4      	b.n	8000b58 <ADC_ConfigureBoostMode+0x114>
 8000b8e:	bf00      	nop
 8000b90:	40022000 	.word	0x40022000
 8000b94:	58026300 	.word	0x58026300
 8000b98:	01312d00 	.word	0x01312d00
 8000b9c:	40022300 	.word	0x40022300
 8000ba0:	005f5e10 	.word	0x005f5e10
 8000ba4:	00bebc20 	.word	0x00bebc20
 8000ba8:	017d7840 	.word	0x017d7840

08000bac <HAL_ADC_Init>:
{
 8000bac:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8000bae:	2300      	movs	r3, #0
{
 8000bb0:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8000bb2:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8000bb4:	2800      	cmp	r0, #0
 8000bb6:	f000 80ab 	beq.w	8000d10 <HAL_ADC_Init+0x164>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bba:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8000bbc:	4604      	mov	r4, r0
 8000bbe:	2d00      	cmp	r5, #0
 8000bc0:	f000 809b 	beq.w	8000cfa <HAL_ADC_Init+0x14e>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000bc4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000bc6:	689a      	ldr	r2, [r3, #8]
 8000bc8:	0096      	lsls	r6, r2, #2
 8000bca:	d504      	bpl.n	8000bd6 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000bcc:	6899      	ldr	r1, [r3, #8]
 8000bce:	4a78      	ldr	r2, [pc, #480]	; (8000db0 <HAL_ADC_Init+0x204>)
 8000bd0:	400a      	ands	r2, r1
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000bd6:	689a      	ldr	r2, [r3, #8]
 8000bd8:	00d5      	lsls	r5, r2, #3
 8000bda:	d416      	bmi.n	8000c0a <HAL_ADC_Init+0x5e>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000bdc:	4a75      	ldr	r2, [pc, #468]	; (8000db4 <HAL_ADC_Init+0x208>)
  MODIFY_REG(ADCx->CR,
 8000bde:	6898      	ldr	r0, [r3, #8]
 8000be0:	6812      	ldr	r2, [r2, #0]
 8000be2:	4d75      	ldr	r5, [pc, #468]	; (8000db8 <HAL_ADC_Init+0x20c>)
 8000be4:	0992      	lsrs	r2, r2, #6
 8000be6:	4975      	ldr	r1, [pc, #468]	; (8000dbc <HAL_ADC_Init+0x210>)
 8000be8:	fba5 5202 	umull	r5, r2, r5, r2
 8000bec:	4001      	ands	r1, r0
 8000bee:	0992      	lsrs	r2, r2, #6
 8000bf0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000bf4:	6099      	str	r1, [r3, #8]
 8000bf6:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 8000bf8:	9b01      	ldr	r3, [sp, #4]
 8000bfa:	b12b      	cbz	r3, 8000c08 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8000bfc:	9b01      	ldr	r3, [sp, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000c02:	9b01      	ldr	r3, [sp, #4]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1f9      	bne.n	8000bfc <HAL_ADC_Init+0x50>
 8000c08:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000c0a:	689a      	ldr	r2, [r3, #8]
 8000c0c:	00d0      	lsls	r0, r2, #3
 8000c0e:	d413      	bmi.n	8000c38 <HAL_ADC_Init+0x8c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c10:	6d62      	ldr	r2, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000c12:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c14:	f042 0210 	orr.w	r2, r2, #16
 8000c18:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c1a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000c1c:	432a      	orrs	r2, r5
 8000c1e:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000c20:	689a      	ldr	r2, [r3, #8]
 8000c22:	0751      	lsls	r1, r2, #29
 8000c24:	d50c      	bpl.n	8000c40 <HAL_ADC_Init+0x94>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c26:	6d63      	ldr	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c28:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000c2a:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c2c:	f043 0310 	orr.w	r3, r3, #16
}
 8000c30:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c32:	6563      	str	r3, [r4, #84]	; 0x54
}
 8000c34:	b002      	add	sp, #8
 8000c36:	bd70      	pop	{r4, r5, r6, pc}
 8000c38:	689a      	ldr	r2, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c3a:	2500      	movs	r5, #0
 8000c3c:	0751      	lsls	r1, r2, #29
 8000c3e:	d4f2      	bmi.n	8000c26 <HAL_ADC_Init+0x7a>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c40:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000c42:	06d2      	lsls	r2, r2, #27
 8000c44:	d4f0      	bmi.n	8000c28 <HAL_ADC_Init+0x7c>
    ADC_STATE_CLR_SET(hadc->State,
 8000c46:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000c48:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8000c4c:	f042 0202 	orr.w	r2, r2, #2
 8000c50:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000c52:	689a      	ldr	r2, [r3, #8]
 8000c54:	07d6      	lsls	r6, r2, #31
 8000c56:	d413      	bmi.n	8000c80 <HAL_ADC_Init+0xd4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000c58:	4a59      	ldr	r2, [pc, #356]	; (8000dc0 <HAL_ADC_Init+0x214>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	f000 8087 	beq.w	8000d6e <HAL_ADC_Init+0x1c2>
 8000c60:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000c64:	4293      	cmp	r3, r2
 8000c66:	f000 8082 	beq.w	8000d6e <HAL_ADC_Init+0x1c2>
 8000c6a:	4b56      	ldr	r3, [pc, #344]	; (8000dc4 <HAL_ADC_Init+0x218>)
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	07d9      	lsls	r1, r3, #31
 8000c70:	d406      	bmi.n	8000c80 <HAL_ADC_Init+0xd4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000c72:	4a55      	ldr	r2, [pc, #340]	; (8000dc8 <HAL_ADC_Init+0x21c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c74:	6893      	ldr	r3, [r2, #8]
 8000c76:	6861      	ldr	r1, [r4, #4]
 8000c78:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000c7c:	430b      	orrs	r3, r1
 8000c7e:	6093      	str	r3, [r2, #8]
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000c80:	f7ff fba6 	bl	80003d0 <HAL_GetREVID>
 8000c84:	f241 0303 	movw	r3, #4099	; 0x1003
 8000c88:	4298      	cmp	r0, r3
 8000c8a:	7d63      	ldrb	r3, [r4, #21]
 8000c8c:	7f20      	ldrb	r0, [r4, #28]
 8000c8e:	d961      	bls.n	8000d54 <HAL_ADC_Init+0x1a8>
 8000c90:	68a6      	ldr	r6, [r4, #8]
 8000c92:	0359      	lsls	r1, r3, #13
 8000c94:	0402      	lsls	r2, r0, #16
 8000c96:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000c98:	2e10      	cmp	r6, #16
 8000c9a:	f000 8083 	beq.w	8000da4 <HAL_ADC_Init+0x1f8>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	430b      	orrs	r3, r1
 8000ca2:	4333      	orrs	r3, r6
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ca4:	2801      	cmp	r0, #1
 8000ca6:	d103      	bne.n	8000cb0 <HAL_ADC_Init+0x104>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000ca8:	6a22      	ldr	r2, [r4, #32]
 8000caa:	3a01      	subs	r2, #1
 8000cac:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cb0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000cb2:	b122      	cbz	r2, 8000cbe <HAL_ADC_Init+0x112>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000cb4:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000cb8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000cba:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000cbc:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000cbe:	6821      	ldr	r1, [r4, #0]
 8000cc0:	4a42      	ldr	r2, [pc, #264]	; (8000dcc <HAL_ADC_Init+0x220>)
 8000cc2:	68c8      	ldr	r0, [r1, #12]
 8000cc4:	4002      	ands	r2, r0
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	60cb      	str	r3, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000cca:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000cd2:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000cd4:	d101      	bne.n	8000cda <HAL_ADC_Init+0x12e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000cd6:	0712      	lsls	r2, r2, #28
 8000cd8:	d51e      	bpl.n	8000d18 <HAL_ADC_Init+0x16c>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000cda:	68e2      	ldr	r2, [r4, #12]
 8000cdc:	2a01      	cmp	r2, #1
 8000cde:	d03e      	beq.n	8000d5e <HAL_ADC_Init+0x1b2>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ce2:	f022 020f 	bic.w	r2, r2, #15
 8000ce6:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000ce8:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8000cea:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000cec:	f023 0303 	bic.w	r3, r3, #3
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6563      	str	r3, [r4, #84]	; 0x54
}
 8000cf6:	b002      	add	sp, #8
 8000cf8:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8000cfa:	f007 f8b5 	bl	8007e68 <HAL_ADC_MspInit>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000cfe:	6823      	ldr	r3, [r4, #0]
    ADC_CLEAR_ERRORCODE(hadc);
 8000d00:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8000d02:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000d06:	689a      	ldr	r2, [r3, #8]
 8000d08:	0096      	lsls	r6, r2, #2
 8000d0a:	f57f af64 	bpl.w	8000bd6 <HAL_ADC_Init+0x2a>
 8000d0e:	e75d      	b.n	8000bcc <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 8000d10:	2501      	movs	r5, #1
}
 8000d12:	4628      	mov	r0, r5
 8000d14:	b002      	add	sp, #8
 8000d16:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000d18:	68d9      	ldr	r1, [r3, #12]
 8000d1a:	4a2d      	ldr	r2, [pc, #180]	; (8000dd0 <HAL_ADC_Init+0x224>)
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d1c:	7d20      	ldrb	r0, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000d1e:	400a      	ands	r2, r1
 8000d20:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000d22:	ea42 3280 	orr.w	r2, r2, r0, lsl #14
 8000d26:	430a      	orrs	r2, r1
 8000d28:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8000d2a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d026      	beq.n	8000d80 <HAL_ADC_Init+0x1d4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000d32:	6822      	ldr	r2, [r4, #0]
 8000d34:	6913      	ldr	r3, [r2, #16]
 8000d36:	f023 0301 	bic.w	r3, r3, #1
 8000d3a:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000d3c:	6822      	ldr	r2, [r4, #0]
      ADC_ConfigureBoostMode(hadc);
 8000d3e:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000d40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000d42:	6913      	ldr	r3, [r2, #16]
 8000d44:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000d48:	430b      	orrs	r3, r1
 8000d4a:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8000d4c:	f7ff fe7a 	bl	8000a44 <ADC_ConfigureBoostMode>
 8000d50:	6823      	ldr	r3, [r4, #0]
 8000d52:	e7c2      	b.n	8000cda <HAL_ADC_Init+0x12e>
 8000d54:	0359      	lsls	r1, r3, #13
 8000d56:	68a6      	ldr	r6, [r4, #8]
 8000d58:	0402      	lsls	r2, r0, #16
 8000d5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d5c:	e79f      	b.n	8000c9e <HAL_ADC_Init+0xf2>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000d5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d60:	69a2      	ldr	r2, [r4, #24]
 8000d62:	f021 010f 	bic.w	r1, r1, #15
 8000d66:	3a01      	subs	r2, #1
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	631a      	str	r2, [r3, #48]	; 0x30
 8000d6c:	e7bc      	b.n	8000ce8 <HAL_ADC_Init+0x13c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d6e:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <HAL_ADC_Init+0x214>)
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <HAL_ADC_Init+0x228>)
 8000d72:	6892      	ldr	r2, [r2, #8]
 8000d74:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000d76:	4313      	orrs	r3, r2
 8000d78:	07d8      	lsls	r0, r3, #31
 8000d7a:	d481      	bmi.n	8000c80 <HAL_ADC_Init+0xd4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000d7c:	4a16      	ldr	r2, [pc, #88]	; (8000dd8 <HAL_ADC_Init+0x22c>)
 8000d7e:	e779      	b.n	8000c74 <HAL_ADC_Init+0xc8>
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000d80:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	; 0x40
 8000d84:	6820      	ldr	r0, [r4, #0]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8000d8a:	6902      	ldr	r2, [r0, #16]
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	4912      	ldr	r1, [pc, #72]	; (8000ddc <HAL_ADC_Init+0x230>)
 8000d92:	4333      	orrs	r3, r6
 8000d94:	4011      	ands	r1, r2
 8000d96:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000d98:	430b      	orrs	r3, r1
 8000d9a:	3a01      	subs	r2, #1
 8000d9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da0:	6103      	str	r3, [r0, #16]
 8000da2:	e7cb      	b.n	8000d3c <HAL_ADC_Init+0x190>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000da4:	f043 031c 	orr.w	r3, r3, #28
 8000da8:	430b      	orrs	r3, r1
 8000daa:	4313      	orrs	r3, r2
 8000dac:	e77a      	b.n	8000ca4 <HAL_ADC_Init+0xf8>
 8000dae:	bf00      	nop
 8000db0:	5fffffc0 	.word	0x5fffffc0
 8000db4:	20000018 	.word	0x20000018
 8000db8:	053e2d63 	.word	0x053e2d63
 8000dbc:	6fffffc0 	.word	0x6fffffc0
 8000dc0:	40022000 	.word	0x40022000
 8000dc4:	58026000 	.word	0x58026000
 8000dc8:	58026300 	.word	0x58026300
 8000dcc:	fff0c003 	.word	0xfff0c003
 8000dd0:	ffffbffc 	.word	0xffffbffc
 8000dd4:	40022100 	.word	0x40022100
 8000dd8:	40022300 	.word	0x40022300
 8000ddc:	fc00f81e 	.word	0xfc00f81e

08000de0 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000de0:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8000de4:	2a01      	cmp	r2, #1
 8000de6:	d043      	beq.n	8000e70 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2001      	movs	r0, #1
{
 8000dec:	b470      	push	{r4, r5, r6}

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000dee:	4c37      	ldr	r4, [pc, #220]	; (8000ecc <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8000df0:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8000df2:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000df6:	42a2      	cmp	r2, r4
 8000df8:	d008      	beq.n	8000e0c <HAL_ADCEx_MultiModeConfigChannel+0x2c>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dfa:	6d5a      	ldr	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000dfc:	2100      	movs	r1, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dfe:	f042 0220 	orr.w	r2, r2, #32
    __HAL_UNLOCK(hadc);
 8000e02:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e06:	655a      	str	r2, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8000e08:	bc70      	pop	{r4, r5, r6}
 8000e0a:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e0c:	4830      	ldr	r0, [pc, #192]	; (8000ed0 <HAL_ADCEx_MultiModeConfigChannel+0xf0>)
 8000e0e:	6884      	ldr	r4, [r0, #8]
 8000e10:	0764      	lsls	r4, r4, #29
 8000e12:	d50a      	bpl.n	8000e2a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8000e14:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000e18:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e1a:	f042 0220 	orr.w	r2, r2, #32
 8000e1e:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8000e26:	bc70      	pop	{r4, r5, r6}
 8000e28:	4770      	bx	lr
 8000e2a:	6894      	ldr	r4, [r2, #8]
 8000e2c:	0765      	lsls	r5, r4, #29
 8000e2e:	d4f2      	bmi.n	8000e16 <HAL_ADCEx_MultiModeConfigChannel+0x36>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8000e30:	680c      	ldr	r4, [r1, #0]
 8000e32:	b1fc      	cbz	r4, 8000e74 <HAL_ADCEx_MultiModeConfigChannel+0x94>
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8000e34:	4d27      	ldr	r5, [pc, #156]	; (8000ed4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
 8000e36:	684e      	ldr	r6, [r1, #4]
 8000e38:	68ac      	ldr	r4, [r5, #8]
 8000e3a:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
 8000e3e:	4334      	orrs	r4, r6
 8000e40:	60ac      	str	r4, [r5, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e42:	681c      	ldr	r4, [r3, #0]
 8000e44:	4294      	cmp	r4, r2
 8000e46:	d035      	beq.n	8000eb4 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8000e48:	4284      	cmp	r4, r0
 8000e4a:	d033      	beq.n	8000eb4 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e4c:	4a22      	ldr	r2, [pc, #136]	; (8000ed8 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8000e4e:	6892      	ldr	r2, [r2, #8]
 8000e50:	43d2      	mvns	r2, r2
 8000e52:	f002 0201 	and.w	r2, r2, #1
 8000e56:	2a00      	cmp	r2, #0
 8000e58:	d035      	beq.n	8000ec6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
        MODIFY_REG(tmpADC_Common->CCR,
 8000e5a:	4d1e      	ldr	r5, [pc, #120]	; (8000ed4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e5c:	2000      	movs	r0, #0
        MODIFY_REG(tmpADC_Common->CCR,
 8000e5e:	680a      	ldr	r2, [r1, #0]
 8000e60:	68ae      	ldr	r6, [r5, #8]
 8000e62:	6889      	ldr	r1, [r1, #8]
 8000e64:	4c1d      	ldr	r4, [pc, #116]	; (8000edc <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8000e66:	430a      	orrs	r2, r1
 8000e68:	4034      	ands	r4, r6
 8000e6a:	4322      	orrs	r2, r4
 8000e6c:	60aa      	str	r2, [r5, #8]
 8000e6e:	e7d7      	b.n	8000e20 <HAL_ADCEx_MultiModeConfigChannel+0x40>
  __HAL_LOCK(hadc);
 8000e70:	2002      	movs	r0, #2
}
 8000e72:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8000e74:	4c17      	ldr	r4, [pc, #92]	; (8000ed4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
 8000e76:	68a1      	ldr	r1, [r4, #8]
 8000e78:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8000e7c:	60a1      	str	r1, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e7e:	6819      	ldr	r1, [r3, #0]
 8000e80:	4291      	cmp	r1, r2
 8000e82:	d00e      	beq.n	8000ea2 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8000e84:	4281      	cmp	r1, r0
 8000e86:	d00c      	beq.n	8000ea2 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8000e88:	4a13      	ldr	r2, [pc, #76]	; (8000ed8 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8000e8a:	6892      	ldr	r2, [r2, #8]
 8000e8c:	43d2      	mvns	r2, r2
 8000e8e:	f002 0201 	and.w	r2, r2, #1
 8000e92:	b1c2      	cbz	r2, 8000ec6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8000e94:	490f      	ldr	r1, [pc, #60]	; (8000ed4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e96:	2000      	movs	r0, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8000e98:	4a10      	ldr	r2, [pc, #64]	; (8000edc <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8000e9a:	688c      	ldr	r4, [r1, #8]
 8000e9c:	4022      	ands	r2, r4
 8000e9e:	608a      	str	r2, [r1, #8]
 8000ea0:	e7be      	b.n	8000e20 <HAL_ADCEx_MultiModeConfigChannel+0x40>
 8000ea2:	490a      	ldr	r1, [pc, #40]	; (8000ecc <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8000ea4:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <HAL_ADCEx_MultiModeConfigChannel+0xf0>)
 8000ea6:	6889      	ldr	r1, [r1, #8]
 8000ea8:	6892      	ldr	r2, [r2, #8]
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	43d2      	mvns	r2, r2
 8000eae:	f002 0201 	and.w	r2, r2, #1
 8000eb2:	e7ee      	b.n	8000e92 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
 8000eb4:	4805      	ldr	r0, [pc, #20]	; (8000ecc <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8000eb6:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <HAL_ADCEx_MultiModeConfigChannel+0xf0>)
 8000eb8:	6880      	ldr	r0, [r0, #8]
 8000eba:	6892      	ldr	r2, [r2, #8]
 8000ebc:	4302      	orrs	r2, r0
 8000ebe:	43d2      	mvns	r2, r2
 8000ec0:	f002 0201 	and.w	r2, r2, #1
 8000ec4:	e7c7      	b.n	8000e56 <HAL_ADCEx_MultiModeConfigChannel+0x76>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	e7aa      	b.n	8000e20 <HAL_ADCEx_MultiModeConfigChannel+0x40>
 8000eca:	bf00      	nop
 8000ecc:	40022000 	.word	0x40022000
 8000ed0:	40022100 	.word	0x40022100
 8000ed4:	40022300 	.word	0x40022300
 8000ed8:	58026000 	.word	0x58026000
 8000edc:	fffff0e0 	.word	0xfffff0e0

08000ee0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee0:	4907      	ldr	r1, [pc, #28]	; (8000f00 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee2:	0200      	lsls	r0, r0, #8
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8000ee6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eea:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eec:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef2:	4022      	ands	r2, r4
 8000ef4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef6:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 8000ef8:	60c8      	str	r0, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000efa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00
 8000f04:	05fa0000 	.word	0x05fa0000

08000f08 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0a:	b430      	push	{r4, r5}
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f12:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f16:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f18:	2d04      	cmp	r5, #4
 8000f1a:	bf28      	it	cs
 8000f1c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1e:	2c06      	cmp	r4, #6
 8000f20:	d918      	bls.n	8000f54 <HAL_NVIC_SetPriority+0x4c>
 8000f22:	3b03      	subs	r3, #3
 8000f24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000f28:	409c      	lsls	r4, r3
 8000f2a:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 8000f32:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	fa02 f205 	lsl.w	r2, r2, r5
 8000f38:	ea21 0102 	bic.w	r1, r1, r2
 8000f3c:	fa01 f203 	lsl.w	r2, r1, r3
 8000f40:	ea42 0204 	orr.w	r2, r2, r4
 8000f44:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8000f48:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 8000f4a:	db06      	blt.n	8000f5a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4c:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <HAL_NVIC_SetPriority+0x64>)
 8000f4e:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f50:	bc30      	pop	{r4, r5}
 8000f52:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f54:	2400      	movs	r4, #0
 8000f56:	4623      	mov	r3, r4
 8000f58:	e7e9      	b.n	8000f2e <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5a:	f000 000f 	and.w	r0, r0, #15
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <HAL_NVIC_SetPriority+0x68>)
 8000f60:	541a      	strb	r2, [r3, r0]
 8000f62:	bc30      	pop	{r4, r5}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00
 8000f6c:	e000e400 	.word	0xe000e400
 8000f70:	e000ed14 	.word	0xe000ed14

08000f74 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f74:	2800      	cmp	r0, #0
 8000f76:	db07      	blt.n	8000f88 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f78:	f000 011f 	and.w	r1, r0, #31
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	0940      	lsrs	r0, r0, #5
 8000f80:	4a02      	ldr	r2, [pc, #8]	; (8000f8c <HAL_NVIC_EnableIRQ+0x18>)
 8000f82:	408b      	lsls	r3, r1
 8000f84:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000e100 	.word	0xe000e100

08000f90 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f90:	3801      	subs	r0, #1
 8000f92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f96:	d20d      	bcs.n	8000fb4 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f98:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f9a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9c:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9e:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	25f0      	movs	r5, #240	; 0xf0
 8000fa2:	4c06      	ldr	r4, [pc, #24]	; (8000fbc <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa4:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa6:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fae:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000fb0:	bc30      	pop	{r4, r5}
 8000fb2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	4770      	bx	lr
 8000fb8:	e000e010 	.word	0xe000e010
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8000fc0:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	4904      	ldr	r1, [pc, #16]	; (8000fdc <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000fca:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd0:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 8000fd2:	6048      	str	r0, [r1, #4]
}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000ed00 	.word	0xe000ed00
 8000fdc:	e000ed90 	.word	0xe000ed90

08000fe0 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000fe0:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000fe2:	f040 0001 	orr.w	r0, r0, #1
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_MPU_Enable+0x20>)
 8000fe8:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000fea:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000ff2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ff6:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00
 8001000:	e000ed90 	.word	0xe000ed90

08001004 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001004:	7843      	ldrb	r3, [r0, #1]
 8001006:	4a13      	ldr	r2, [pc, #76]	; (8001054 <HAL_MPU_ConfigRegion+0x50>)
 8001008:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 800100a:	7803      	ldrb	r3, [r0, #0]
 800100c:	b913      	cbnz	r3, 8001014 <HAL_MPU_ConfigRegion+0x10>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 800100e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = 0x00;
 8001010:	6113      	str	r3, [r2, #16]
 8001012:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 8001014:	6843      	ldr	r3, [r0, #4]
{
 8001016:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
 8001018:	60d3      	str	r3, [r2, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800101a:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800101c:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800101e:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001020:	7805      	ldrb	r5, [r0, #0]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001022:	7a84      	ldrb	r4, [r0, #10]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001024:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001028:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800102a:	7b86      	ldrb	r6, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800102c:	432b      	orrs	r3, r5
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800102e:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001030:	ea43 43c4 	orr.w	r3, r3, r4, lsl #19
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001034:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001036:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800103a:	7a01      	ldrb	r1, [r0, #8]
 800103c:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 8001040:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8001044:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8001048:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800104c:	6113      	str	r3, [r2, #16]
  }
}
 800104e:	bc70      	pop	{r4, r5, r6}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000ed90 	.word	0xe000ed90

08001058 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001058:	4b35      	ldr	r3, [pc, #212]	; (8001130 <DMA_CalcBaseAndBitshift+0xd8>)
{
 800105a:	4601      	mov	r1, r0
 800105c:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800105e:	4c35      	ldr	r4, [pc, #212]	; (8001134 <DMA_CalcBaseAndBitshift+0xdc>)
 8001060:	6802      	ldr	r2, [r0, #0]
 8001062:	4835      	ldr	r0, [pc, #212]	; (8001138 <DMA_CalcBaseAndBitshift+0xe0>)
 8001064:	42a2      	cmp	r2, r4
 8001066:	bf18      	it	ne
 8001068:	429a      	cmpne	r2, r3
 800106a:	4d34      	ldr	r5, [pc, #208]	; (800113c <DMA_CalcBaseAndBitshift+0xe4>)
 800106c:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8001070:	bf0c      	ite	eq
 8001072:	2301      	moveq	r3, #1
 8001074:	2300      	movne	r3, #0
 8001076:	4282      	cmp	r2, r0
 8001078:	bf08      	it	eq
 800107a:	f043 0301 	orreq.w	r3, r3, #1
 800107e:	3048      	adds	r0, #72	; 0x48
 8001080:	42aa      	cmp	r2, r5
 8001082:	bf08      	it	eq
 8001084:	f043 0301 	orreq.w	r3, r3, #1
 8001088:	3548      	adds	r5, #72	; 0x48
 800108a:	42a2      	cmp	r2, r4
 800108c:	bf08      	it	eq
 800108e:	f043 0301 	orreq.w	r3, r3, #1
 8001092:	3448      	adds	r4, #72	; 0x48
 8001094:	4282      	cmp	r2, r0
 8001096:	bf08      	it	eq
 8001098:	f043 0301 	orreq.w	r3, r3, #1
 800109c:	f500 7062 	add.w	r0, r0, #904	; 0x388
 80010a0:	42aa      	cmp	r2, r5
 80010a2:	bf08      	it	eq
 80010a4:	f043 0301 	orreq.w	r3, r3, #1
 80010a8:	f505 7562 	add.w	r5, r5, #904	; 0x388
 80010ac:	42a2      	cmp	r2, r4
 80010ae:	bf08      	it	eq
 80010b0:	f043 0301 	orreq.w	r3, r3, #1
 80010b4:	f504 7462 	add.w	r4, r4, #904	; 0x388
 80010b8:	4282      	cmp	r2, r0
 80010ba:	bf08      	it	eq
 80010bc:	f043 0301 	orreq.w	r3, r3, #1
 80010c0:	3048      	adds	r0, #72	; 0x48
 80010c2:	42aa      	cmp	r2, r5
 80010c4:	bf08      	it	eq
 80010c6:	f043 0301 	orreq.w	r3, r3, #1
 80010ca:	3548      	adds	r5, #72	; 0x48
 80010cc:	42a2      	cmp	r2, r4
 80010ce:	bf08      	it	eq
 80010d0:	f043 0301 	orreq.w	r3, r3, #1
 80010d4:	3448      	adds	r4, #72	; 0x48
 80010d6:	4282      	cmp	r2, r0
 80010d8:	bf08      	it	eq
 80010da:	f043 0301 	orreq.w	r3, r3, #1
 80010de:	3048      	adds	r0, #72	; 0x48
 80010e0:	42aa      	cmp	r2, r5
 80010e2:	bf08      	it	eq
 80010e4:	f043 0301 	orreq.w	r3, r3, #1
 80010e8:	42a2      	cmp	r2, r4
 80010ea:	bf08      	it	eq
 80010ec:	f043 0301 	orreq.w	r3, r3, #1
 80010f0:	4282      	cmp	r2, r0
 80010f2:	bf08      	it	eq
 80010f4:	f043 0301 	orreq.w	r3, r3, #1
 80010f8:	b913      	cbnz	r3, 8001100 <DMA_CalcBaseAndBitshift+0xa8>
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <DMA_CalcBaseAndBitshift+0xe8>)
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d112      	bne.n	8001126 <DMA_CalcBaseAndBitshift+0xce>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001100:	b2d3      	uxtb	r3, r2
 8001102:	4d10      	ldr	r5, [pc, #64]	; (8001144 <DMA_CalcBaseAndBitshift+0xec>)
 8001104:	4810      	ldr	r0, [pc, #64]	; (8001148 <DMA_CalcBaseAndBitshift+0xf0>)
 8001106:	3b10      	subs	r3, #16

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001108:	4c10      	ldr	r4, [pc, #64]	; (800114c <DMA_CalcBaseAndBitshift+0xf4>)
 800110a:	4010      	ands	r0, r2
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800110c:	fba5 5303 	umull	r5, r3, r5, r3
 8001110:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001112:	f003 0207 	and.w	r2, r3, #7

    if (stream_number > 3U)
 8001116:	2b03      	cmp	r3, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001118:	5ca2      	ldrb	r2, [r4, r2]
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800111a:	bf88      	it	hi
 800111c:	3004      	addhi	r0, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800111e:	65ca      	str	r2, [r1, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8001120:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8001122:	bc30      	pop	{r4, r5}
 8001124:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8001126:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 800112a:	6588      	str	r0, [r1, #88]	; 0x58
 800112c:	e7f9      	b.n	8001122 <DMA_CalcBaseAndBitshift+0xca>
 800112e:	bf00      	nop
 8001130:	40020010 	.word	0x40020010
 8001134:	40020028 	.word	0x40020028
 8001138:	40020040 	.word	0x40020040
 800113c:	40020058 	.word	0x40020058
 8001140:	400204b8 	.word	0x400204b8
 8001144:	aaaaaaab 	.word	0xaaaaaaab
 8001148:	fffffc00 	.word	0xfffffc00
 800114c:	0800c168 	.word	0x0800c168

08001150 <HAL_DMA_Init>:
{
 8001150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001154:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001156:	f7ff f923 	bl	80003a0 <HAL_GetTick>
  if(hdma == NULL)
 800115a:	2c00      	cmp	r4, #0
 800115c:	f000 81ab 	beq.w	80014b6 <HAL_DMA_Init+0x366>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001160:	6822      	ldr	r2, [r4, #0]
 8001162:	4605      	mov	r5, r0
 8001164:	4b56      	ldr	r3, [pc, #344]	; (80012c0 <HAL_DMA_Init+0x170>)
 8001166:	429a      	cmp	r2, r3
 8001168:	d049      	beq.n	80011fe <HAL_DMA_Init+0xae>
 800116a:	3318      	adds	r3, #24
 800116c:	429a      	cmp	r2, r3
 800116e:	d046      	beq.n	80011fe <HAL_DMA_Init+0xae>
 8001170:	3330      	adds	r3, #48	; 0x30
 8001172:	4854      	ldr	r0, [pc, #336]	; (80012c4 <HAL_DMA_Init+0x174>)
 8001174:	4954      	ldr	r1, [pc, #336]	; (80012c8 <HAL_DMA_Init+0x178>)
 8001176:	4282      	cmp	r2, r0
 8001178:	bf18      	it	ne
 800117a:	429a      	cmpne	r2, r3
 800117c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8001180:	bf0c      	ite	eq
 8001182:	2301      	moveq	r3, #1
 8001184:	2300      	movne	r3, #0
 8001186:	428a      	cmp	r2, r1
 8001188:	bf08      	it	eq
 800118a:	f043 0301 	orreq.w	r3, r3, #1
 800118e:	3130      	adds	r1, #48	; 0x30
 8001190:	4282      	cmp	r2, r0
 8001192:	bf08      	it	eq
 8001194:	f043 0301 	orreq.w	r3, r3, #1
 8001198:	3030      	adds	r0, #48	; 0x30
 800119a:	428a      	cmp	r2, r1
 800119c:	bf08      	it	eq
 800119e:	f043 0301 	orreq.w	r3, r3, #1
 80011a2:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80011a6:	4282      	cmp	r2, r0
 80011a8:	bf08      	it	eq
 80011aa:	f043 0301 	orreq.w	r3, r3, #1
 80011ae:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80011b2:	428a      	cmp	r2, r1
 80011b4:	bf08      	it	eq
 80011b6:	f043 0301 	orreq.w	r3, r3, #1
 80011ba:	3130      	adds	r1, #48	; 0x30
 80011bc:	4282      	cmp	r2, r0
 80011be:	bf08      	it	eq
 80011c0:	f043 0301 	orreq.w	r3, r3, #1
 80011c4:	3030      	adds	r0, #48	; 0x30
 80011c6:	428a      	cmp	r2, r1
 80011c8:	bf08      	it	eq
 80011ca:	f043 0301 	orreq.w	r3, r3, #1
 80011ce:	3130      	adds	r1, #48	; 0x30
 80011d0:	4282      	cmp	r2, r0
 80011d2:	bf08      	it	eq
 80011d4:	f043 0301 	orreq.w	r3, r3, #1
 80011d8:	3030      	adds	r0, #48	; 0x30
 80011da:	428a      	cmp	r2, r1
 80011dc:	bf08      	it	eq
 80011de:	f043 0301 	orreq.w	r3, r3, #1
 80011e2:	3130      	adds	r1, #48	; 0x30
 80011e4:	4282      	cmp	r2, r0
 80011e6:	bf08      	it	eq
 80011e8:	f043 0301 	orreq.w	r3, r3, #1
 80011ec:	428a      	cmp	r2, r1
 80011ee:	bf08      	it	eq
 80011f0:	f043 0301 	orreq.w	r3, r3, #1
 80011f4:	b91b      	cbnz	r3, 80011fe <HAL_DMA_Init+0xae>
 80011f6:	4b35      	ldr	r3, [pc, #212]	; (80012cc <HAL_DMA_Init+0x17c>)
 80011f8:	429a      	cmp	r2, r3
 80011fa:	f040 81eb 	bne.w	80015d4 <HAL_DMA_Init+0x484>
    hdma->State = HAL_DMA_STATE_BUSY;
 80011fe:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8001200:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8001202:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001206:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 800120a:	6813      	ldr	r3, [r2, #0]
 800120c:	f023 0301 	bic.w	r3, r3, #1
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e005      	b.n	8001220 <HAL_DMA_Init+0xd0>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001214:	f7ff f8c4 	bl	80003a0 <HAL_GetTick>
 8001218:	1b40      	subs	r0, r0, r5
 800121a:	2805      	cmp	r0, #5
 800121c:	f200 8143 	bhi.w	80014a6 <HAL_DMA_Init+0x356>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	07d0      	lsls	r0, r2, #31
 8001226:	d4f5      	bmi.n	8001214 <HAL_DMA_Init+0xc4>
    registerValue |=  hdma->Init.Direction           |
 8001228:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800122c:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 800122e:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001230:	e9d4 5005 	ldrd	r5, r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001234:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001236:	69e1      	ldr	r1, [r4, #28]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001238:	432a      	orrs	r2, r5
            hdma->Init.Mode                | hdma->Init.Priority;
 800123a:	6a25      	ldr	r5, [r4, #32]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800123c:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800123e:	6818      	ldr	r0, [r3, #0]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001240:	430a      	orrs	r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001242:	4923      	ldr	r1, [pc, #140]	; (80012d0 <HAL_DMA_Init+0x180>)
 8001244:	4001      	ands	r1, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001246:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.Mode                | hdma->Init.Priority;
 8001248:	432a      	orrs	r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800124a:	2804      	cmp	r0, #4
    registerValue |=  hdma->Init.Direction           |
 800124c:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001250:	d103      	bne.n	800125a <HAL_DMA_Init+0x10a>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001252:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
 8001256:	4301      	orrs	r1, r0
 8001258:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800125a:	481e      	ldr	r0, [pc, #120]	; (80012d4 <HAL_DMA_Init+0x184>)
 800125c:	491e      	ldr	r1, [pc, #120]	; (80012d8 <HAL_DMA_Init+0x188>)
 800125e:	6800      	ldr	r0, [r0, #0]
 8001260:	4001      	ands	r1, r0
 8001262:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8001266:	d30a      	bcc.n	800127e <HAL_DMA_Init+0x12e>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001268:	6860      	ldr	r0, [r4, #4]
 800126a:	f1a0 0529 	sub.w	r5, r0, #41	; 0x29
 800126e:	2d1f      	cmp	r5, #31
 8001270:	f240 8124 	bls.w	80014bc <HAL_DMA_Init+0x36c>
 8001274:	384f      	subs	r0, #79	; 0x4f
 8001276:	2803      	cmp	r0, #3
 8001278:	d801      	bhi.n	800127e <HAL_DMA_Init+0x12e>
        registerValue |= DMA_SxCR_TRBUFF;
 800127a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800127e:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001280:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
 8001282:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001284:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001286:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001288:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 800128c:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001290:	d12a      	bne.n	80012e8 <HAL_DMA_Init+0x198>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001292:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
 8001296:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001298:	b330      	cbz	r0, 80012e8 <HAL_DMA_Init+0x198>
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800129a:	69a5      	ldr	r5, [r4, #24]
 800129c:	b1f5      	cbz	r5, 80012dc <HAL_DMA_Init+0x18c>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800129e:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 80012a2:	f000 81fb 	beq.w	800169c <HAL_DMA_Init+0x54c>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80012a6:	2a02      	cmp	r2, #2
 80012a8:	d903      	bls.n	80012b2 <HAL_DMA_Init+0x162>
 80012aa:	2a03      	cmp	r2, #3
 80012ac:	d11c      	bne.n	80012e8 <HAL_DMA_Init+0x198>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80012ae:	01c2      	lsls	r2, r0, #7
 80012b0:	d51a      	bpl.n	80012e8 <HAL_DMA_Init+0x198>
          hdma->State = HAL_DMA_STATE_READY;
 80012b2:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012b4:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 80012b6:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012b8:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80012ba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          return HAL_ERROR;
 80012be:	e0f0      	b.n	80014a2 <HAL_DMA_Init+0x352>
 80012c0:	40020010 	.word	0x40020010
 80012c4:	40020040 	.word	0x40020040
 80012c8:	40020070 	.word	0x40020070
 80012cc:	400204b8 	.word	0x400204b8
 80012d0:	fe10803f 	.word	0xfe10803f
 80012d4:	5c001000 	.word	0x5c001000
 80012d8:	ffff0000 	.word	0xffff0000
    switch (hdma->Init.FIFOThreshold)
 80012dc:	2a01      	cmp	r2, #1
 80012de:	f000 81d8 	beq.w	8001692 <HAL_DMA_Init+0x542>
 80012e2:	d3e4      	bcc.n	80012ae <HAL_DMA_Init+0x15e>
 80012e4:	2a02      	cmp	r2, #2
 80012e6:	d0e2      	beq.n	80012ae <HAL_DMA_Init+0x15e>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80012e8:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012ea:	4620      	mov	r0, r4
 80012ec:	f7ff feb4 	bl	8001058 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80012f0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80012f2:	233f      	movs	r3, #63	; 0x3f
 80012f4:	f002 021f 	and.w	r2, r2, #31
 80012f8:	4093      	lsls	r3, r2
 80012fa:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80012fc:	6822      	ldr	r2, [r4, #0]
 80012fe:	4b9d      	ldr	r3, [pc, #628]	; (8001574 <HAL_DMA_Init+0x424>)
 8001300:	489d      	ldr	r0, [pc, #628]	; (8001578 <HAL_DMA_Init+0x428>)
 8001302:	499e      	ldr	r1, [pc, #632]	; (800157c <HAL_DMA_Init+0x42c>)
 8001304:	4282      	cmp	r2, r0
 8001306:	bf18      	it	ne
 8001308:	429a      	cmpne	r2, r3
 800130a:	4e9d      	ldr	r6, [pc, #628]	; (8001580 <HAL_DMA_Init+0x430>)
 800130c:	4d9d      	ldr	r5, [pc, #628]	; (8001584 <HAL_DMA_Init+0x434>)
 800130e:	f100 0060 	add.w	r0, r0, #96	; 0x60
 8001312:	bf0c      	ite	eq
 8001314:	2301      	moveq	r3, #1
 8001316:	2300      	movne	r3, #0
 8001318:	f8df e2a8 	ldr.w	lr, [pc, #680]	; 80015c4 <HAL_DMA_Init+0x474>
 800131c:	428a      	cmp	r2, r1
 800131e:	bf08      	it	eq
 8001320:	f043 0301 	orreq.w	r3, r3, #1
 8001324:	3160      	adds	r1, #96	; 0x60
 8001326:	f8df c2a0 	ldr.w	ip, [pc, #672]	; 80015c8 <HAL_DMA_Init+0x478>
 800132a:	42b2      	cmp	r2, r6
 800132c:	bf08      	it	eq
 800132e:	f043 0301 	orreq.w	r3, r3, #1
 8001332:	4f95      	ldr	r7, [pc, #596]	; (8001588 <HAL_DMA_Init+0x438>)
 8001334:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
 8001338:	f8df 8290 	ldr.w	r8, [pc, #656]	; 80015cc <HAL_DMA_Init+0x47c>
 800133c:	42aa      	cmp	r2, r5
 800133e:	bf08      	it	eq
 8001340:	f043 0301 	orreq.w	r3, r3, #1
 8001344:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
 8001348:	f8df a258 	ldr.w	sl, [pc, #600]	; 80015a4 <HAL_DMA_Init+0x454>
 800134c:	4282      	cmp	r2, r0
 800134e:	bf08      	it	eq
 8001350:	f043 0301 	orreq.w	r3, r3, #1
 8001354:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8001358:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80015d0 <HAL_DMA_Init+0x480>
 800135c:	428a      	cmp	r2, r1
 800135e:	bf08      	it	eq
 8001360:	f043 0301 	orreq.w	r3, r3, #1
 8001364:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8001368:	4572      	cmp	r2, lr
 800136a:	bf08      	it	eq
 800136c:	f043 0301 	orreq.w	r3, r3, #1
 8001370:	f8df e228 	ldr.w	lr, [pc, #552]	; 800159c <HAL_DMA_Init+0x44c>
 8001374:	4562      	cmp	r2, ip
 8001376:	bf08      	it	eq
 8001378:	f043 0301 	orreq.w	r3, r3, #1
 800137c:	eba2 0e0e 	sub.w	lr, r2, lr
 8001380:	f8df c21c 	ldr.w	ip, [pc, #540]	; 80015a0 <HAL_DMA_Init+0x450>
 8001384:	42ba      	cmp	r2, r7
 8001386:	bf08      	it	eq
 8001388:	f043 0301 	orreq.w	r3, r3, #1
 800138c:	fabe fe8e 	clz	lr, lr
 8001390:	eba2 070c 	sub.w	r7, r2, ip
 8001394:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8001398:	42b2      	cmp	r2, r6
 800139a:	bf08      	it	eq
 800139c:	f043 0301 	orreq.w	r3, r3, #1
 80013a0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80013a4:	eba2 060a 	sub.w	r6, r2, sl
 80013a8:	fab7 f787 	clz	r7, r7
 80013ac:	42aa      	cmp	r2, r5
 80013ae:	bf08      	it	eq
 80013b0:	f043 0301 	orreq.w	r3, r3, #1
 80013b4:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 80013b8:	eba2 050c 	sub.w	r5, r2, ip
 80013bc:	097f      	lsrs	r7, r7, #5
 80013be:	4282      	cmp	r2, r0
 80013c0:	bf08      	it	eq
 80013c2:	f043 0301 	orreq.w	r3, r3, #1
 80013c6:	fab6 f686 	clz	r6, r6
 80013ca:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 80013ce:	fab5 f585 	clz	r5, r5
 80013d2:	428a      	cmp	r2, r1
 80013d4:	bf08      	it	eq
 80013d6:	f043 0301 	orreq.w	r3, r3, #1
 80013da:	0976      	lsrs	r6, r6, #5
 80013dc:	eba2 000a 	sub.w	r0, r2, sl
 80013e0:	eba2 010c 	sub.w	r1, r2, ip
 80013e4:	4542      	cmp	r2, r8
 80013e6:	bf08      	it	eq
 80013e8:	f043 0301 	orreq.w	r3, r3, #1
 80013ec:	096d      	lsrs	r5, r5, #5
 80013ee:	fab0 f080 	clz	r0, r0
 80013f2:	f10c 0c14 	add.w	ip, ip, #20
 80013f6:	454a      	cmp	r2, r9
 80013f8:	bf08      	it	eq
 80013fa:	f043 0301 	orreq.w	r3, r3, #1
 80013fe:	fab1 f181 	clz	r1, r1
 8001402:	0940      	lsrs	r0, r0, #5
 8001404:	eba2 0c0c 	sub.w	ip, r2, ip
 8001408:	ea4e 0303 	orr.w	r3, lr, r3
 800140c:	0949      	lsrs	r1, r1, #5
 800140e:	f8df 8198 	ldr.w	r8, [pc, #408]	; 80015a8 <HAL_DMA_Init+0x458>
 8001412:	fabc fc8c 	clz	ip, ip
 8001416:	433b      	orrs	r3, r7
 8001418:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800141c:	eba2 0808 	sub.w	r8, r2, r8
 8001420:	4333      	orrs	r3, r6
 8001422:	fab8 f888 	clz	r8, r8
 8001426:	432b      	orrs	r3, r5
 8001428:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800142c:	4303      	orrs	r3, r0
 800142e:	430b      	orrs	r3, r1
 8001430:	ea5c 0303 	orrs.w	r3, ip, r3
 8001434:	d102      	bne.n	800143c <HAL_DMA_Init+0x2ec>
 8001436:	f1b8 0f00 	cmp.w	r8, #0
 800143a:	d02d      	beq.n	8001498 <HAL_DMA_Init+0x348>
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800143c:	ea47 070e 	orr.w	r7, r7, lr
 8001440:	b2d3      	uxtb	r3, r2
 8001442:	433e      	orrs	r6, r7
 8001444:	4335      	orrs	r5, r6
 8001446:	4328      	orrs	r0, r5
 8001448:	4301      	orrs	r1, r0
 800144a:	ea5c 0101 	orrs.w	r1, ip, r1
 800144e:	d102      	bne.n	8001456 <HAL_DMA_Init+0x306>
 8001450:	f1b8 0f00 	cmp.w	r8, #0
 8001454:	d076      	beq.n	8001544 <HAL_DMA_Init+0x3f4>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001456:	484d      	ldr	r0, [pc, #308]	; (800158c <HAL_DMA_Init+0x43c>)
 8001458:	3b08      	subs	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800145a:	4a4d      	ldr	r2, [pc, #308]	; (8001590 <HAL_DMA_Init+0x440>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800145c:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800145e:	fba0 0303 	umull	r0, r3, r0, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001462:	484c      	ldr	r0, [pc, #304]	; (8001594 <HAL_DMA_Init+0x444>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001464:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001466:	6660      	str	r0, [r4, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001468:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800146a:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800146e:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001470:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001474:	6622      	str	r2, [r4, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001476:	66a3      	str	r3, [r4, #104]	; 0x68
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001478:	68a3      	ldr	r3, [r4, #8]
 800147a:	2b80      	cmp	r3, #128	; 0x80
 800147c:	d026      	beq.n	80014cc <HAL_DMA_Init+0x37c>
 800147e:	7923      	ldrb	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001480:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001482:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
 8001486:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001488:	6860      	ldr	r0, [r4, #4]
 800148a:	1e41      	subs	r1, r0, #1
 800148c:	2907      	cmp	r1, #7
 800148e:	d921      	bls.n	80014d4 <HAL_DMA_Init+0x384>
      hdma->DMAmuxRequestGen = 0U;
 8001490:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8001492:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001496:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001498:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800149a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800149c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800149e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80014a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014a6:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80014a8:	2303      	movs	r3, #3
        return HAL_ERROR;
 80014aa:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014ac:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80014ae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80014b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 80014b6:	2001      	movs	r0, #1
}
 80014b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80014bc:	4936      	ldr	r1, [pc, #216]	; (8001598 <HAL_DMA_Init+0x448>)
 80014be:	40e9      	lsrs	r1, r5
 80014c0:	07c9      	lsls	r1, r1, #31
 80014c2:	f57f aed7 	bpl.w	8001274 <HAL_DMA_Init+0x124>
        registerValue |= DMA_SxCR_TRBUFF;
 80014c6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80014ca:	e6d8      	b.n	800127e <HAL_DMA_Init+0x12e>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80014cc:	2100      	movs	r1, #0
 80014ce:	460b      	mov	r3, r1
 80014d0:	6061      	str	r1, [r4, #4]
 80014d2:	e7d5      	b.n	8001480 <HAL_DMA_Init+0x330>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80014d4:	6822      	ldr	r2, [r4, #0]
 80014d6:	4b31      	ldr	r3, [pc, #196]	; (800159c <HAL_DMA_Init+0x44c>)
 80014d8:	4e31      	ldr	r6, [pc, #196]	; (80015a0 <HAL_DMA_Init+0x450>)
 80014da:	4d32      	ldr	r5, [pc, #200]	; (80015a4 <HAL_DMA_Init+0x454>)
 80014dc:	42b2      	cmp	r2, r6
 80014de:	bf18      	it	ne
 80014e0:	429a      	cmpne	r2, r3
 80014e2:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80014e6:	bf0c      	ite	eq
 80014e8:	2301      	moveq	r3, #1
 80014ea:	2300      	movne	r3, #0
 80014ec:	42aa      	cmp	r2, r5
 80014ee:	bf08      	it	eq
 80014f0:	f043 0301 	orreq.w	r3, r3, #1
 80014f4:	3528      	adds	r5, #40	; 0x28
 80014f6:	42b2      	cmp	r2, r6
 80014f8:	bf08      	it	eq
 80014fa:	f043 0301 	orreq.w	r3, r3, #1
 80014fe:	3628      	adds	r6, #40	; 0x28
 8001500:	42aa      	cmp	r2, r5
 8001502:	bf08      	it	eq
 8001504:	f043 0301 	orreq.w	r3, r3, #1
 8001508:	3528      	adds	r5, #40	; 0x28
 800150a:	42b2      	cmp	r2, r6
 800150c:	bf08      	it	eq
 800150e:	f043 0301 	orreq.w	r3, r3, #1
 8001512:	42aa      	cmp	r2, r5
 8001514:	bf08      	it	eq
 8001516:	f043 0301 	orreq.w	r3, r3, #1
 800151a:	b91b      	cbnz	r3, 8001524 <HAL_DMA_Init+0x3d4>
 800151c:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <HAL_DMA_Init+0x458>)
 800151e:	429a      	cmp	r2, r3
 8001520:	f040 80ca 	bne.w	80016b8 <HAL_DMA_Init+0x568>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001524:	4b21      	ldr	r3, [pc, #132]	; (80015ac <HAL_DMA_Init+0x45c>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8001526:	4d22      	ldr	r5, [pc, #136]	; (80015b0 <HAL_DMA_Init+0x460>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001528:	4403      	add	r3, r0
 800152a:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800152c:	2201      	movs	r2, #1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800152e:	2000      	movs	r0, #0
 8001530:	6725      	str	r5, [r4, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8001532:	fa02 f101 	lsl.w	r1, r2, r1
 8001536:	66e3      	str	r3, [r4, #108]	; 0x6c
 8001538:	6761      	str	r1, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800153a:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800153c:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	e7a9      	b.n	8001498 <HAL_DMA_Init+0x348>
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001544:	491b      	ldr	r1, [pc, #108]	; (80015b4 <HAL_DMA_Init+0x464>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001546:	3b10      	subs	r3, #16
 8001548:	481b      	ldr	r0, [pc, #108]	; (80015b8 <HAL_DMA_Init+0x468>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800154a:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800154c:	fba0 0303 	umull	r0, r3, r0, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001550:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001552:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001556:	d800      	bhi.n	800155a <HAL_DMA_Init+0x40a>
      stream_number += 8U;
 8001558:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800155a:	4a18      	ldr	r2, [pc, #96]	; (80015bc <HAL_DMA_Init+0x46c>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800155c:	f003 051f 	and.w	r5, r3, #31
 8001560:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001562:	4817      	ldr	r0, [pc, #92]	; (80015c0 <HAL_DMA_Init+0x470>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001564:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001566:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001568:	6660      	str	r0, [r4, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800156a:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800156c:	66a1      	str	r1, [r4, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800156e:	6622      	str	r2, [r4, #96]	; 0x60
 8001570:	e782      	b.n	8001478 <HAL_DMA_Init+0x328>
 8001572:	bf00      	nop
 8001574:	40020010 	.word	0x40020010
 8001578:	40020028 	.word	0x40020028
 800157c:	40020040 	.word	0x40020040
 8001580:	40020058 	.word	0x40020058
 8001584:	40020070 	.word	0x40020070
 8001588:	40020428 	.word	0x40020428
 800158c:	cccccccd 	.word	0xcccccccd
 8001590:	16009600 	.word	0x16009600
 8001594:	58025880 	.word	0x58025880
 8001598:	c3c0003f 	.word	0xc3c0003f
 800159c:	58025408 	.word	0x58025408
 80015a0:	5802541c 	.word	0x5802541c
 80015a4:	58025430 	.word	0x58025430
 80015a8:	58025494 	.word	0x58025494
 80015ac:	1600963f 	.word	0x1600963f
 80015b0:	58025940 	.word	0x58025940
 80015b4:	bffdfbf0 	.word	0xbffdfbf0
 80015b8:	aaaaaaab 	.word	0xaaaaaaab
 80015bc:	10008200 	.word	0x10008200
 80015c0:	40020880 	.word	0x40020880
 80015c4:	400200b8 	.word	0x400200b8
 80015c8:	40020410 	.word	0x40020410
 80015cc:	400204a0 	.word	0x400204a0
 80015d0:	400204b8 	.word	0x400204b8
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80015d4:	4b3f      	ldr	r3, [pc, #252]	; (80016d4 <HAL_DMA_Init+0x584>)
 80015d6:	4940      	ldr	r1, [pc, #256]	; (80016d8 <HAL_DMA_Init+0x588>)
 80015d8:	4840      	ldr	r0, [pc, #256]	; (80016dc <HAL_DMA_Init+0x58c>)
 80015da:	428a      	cmp	r2, r1
 80015dc:	bf18      	it	ne
 80015de:	429a      	cmpne	r2, r3
 80015e0:	f101 0128 	add.w	r1, r1, #40	; 0x28
 80015e4:	4d3e      	ldr	r5, [pc, #248]	; (80016e0 <HAL_DMA_Init+0x590>)
 80015e6:	bf0c      	ite	eq
 80015e8:	2301      	moveq	r3, #1
 80015ea:	2300      	movne	r3, #0
 80015ec:	4282      	cmp	r2, r0
 80015ee:	bf08      	it	eq
 80015f0:	f043 0301 	orreq.w	r3, r3, #1
 80015f4:	303c      	adds	r0, #60	; 0x3c
 80015f6:	428a      	cmp	r2, r1
 80015f8:	bf08      	it	eq
 80015fa:	f043 0301 	orreq.w	r3, r3, #1
 80015fe:	313c      	adds	r1, #60	; 0x3c
 8001600:	42aa      	cmp	r2, r5
 8001602:	bf08      	it	eq
 8001604:	f043 0301 	orreq.w	r3, r3, #1
 8001608:	4282      	cmp	r2, r0
 800160a:	bf08      	it	eq
 800160c:	f043 0301 	orreq.w	r3, r3, #1
 8001610:	428a      	cmp	r2, r1
 8001612:	bf08      	it	eq
 8001614:	f043 0301 	orreq.w	r3, r3, #1
 8001618:	b913      	cbnz	r3, 8001620 <HAL_DMA_Init+0x4d0>
 800161a:	4b32      	ldr	r3, [pc, #200]	; (80016e4 <HAL_DMA_Init+0x594>)
 800161c:	429a      	cmp	r2, r3
 800161e:	d152      	bne.n	80016c6 <HAL_DMA_Init+0x576>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001620:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8001622:	2100      	movs	r1, #0
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001624:	4f30      	ldr	r7, [pc, #192]	; (80016e8 <HAL_DMA_Init+0x598>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8001626:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800162a:	68a3      	ldr	r3, [r4, #8]
    __HAL_UNLOCK(hdma);
 800162c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001630:	2b40      	cmp	r3, #64	; 0x40
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001632:	6811      	ldr	r1, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001634:	ea07 0701 	and.w	r7, r7, r1
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001638:	d043      	beq.n	80016c2 <HAL_DMA_Init+0x572>
 800163a:	2b80      	cmp	r3, #128	; 0x80
 800163c:	bf14      	ite	ne
 800163e:	2100      	movne	r1, #0
 8001640:	f44f 4180 	moveq.w	r1, #16384	; 0x4000
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001644:	6923      	ldr	r3, [r4, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001646:	4620      	mov	r0, r4
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001648:	68e5      	ldr	r5, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800164a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800164c:	6966      	ldr	r6, [r4, #20]
 800164e:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001652:	69a5      	ldr	r5, [r4, #24]
 8001654:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001658:	69e6      	ldr	r6, [r4, #28]
 800165a:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800165e:	6a25      	ldr	r5, [r4, #32]
 8001660:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001664:	4e21      	ldr	r6, [pc, #132]	; (80016ec <HAL_DMA_Init+0x59c>)
 8001666:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 800166a:	4d21      	ldr	r5, [pc, #132]	; (80016f0 <HAL_DMA_Init+0x5a0>)
 800166c:	433b      	orrs	r3, r7
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800166e:	430b      	orrs	r3, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001670:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001672:	6823      	ldr	r3, [r4, #0]
 8001674:	441e      	add	r6, r3
 8001676:	fba5 2306 	umull	r2, r3, r5, r6
 800167a:	091b      	lsrs	r3, r3, #4
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001680:	f7ff fcea 	bl	8001058 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001684:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001686:	2301      	movs	r3, #1
 8001688:	f002 021f 	and.w	r2, r2, #31
 800168c:	4093      	lsls	r3, r2
 800168e:	6043      	str	r3, [r0, #4]
 8001690:	e634      	b.n	80012fc <HAL_DMA_Init+0x1ac>
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001692:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8001696:	f47f ae27 	bne.w	80012e8 <HAL_DMA_Init+0x198>
 800169a:	e60a      	b.n	80012b2 <HAL_DMA_Init+0x162>
    switch (hdma->Init.FIFOThreshold)
 800169c:	2a03      	cmp	r2, #3
 800169e:	f63f ae23 	bhi.w	80012e8 <HAL_DMA_Init+0x198>
 80016a2:	a501      	add	r5, pc, #4	; (adr r5, 80016a8 <HAL_DMA_Init+0x558>)
 80016a4:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 80016a8:	080012b3 	.word	0x080012b3
 80016ac:	080012af 	.word	0x080012af
 80016b0:	080012b3 	.word	0x080012b3
 80016b4:	08001693 	.word	0x08001693
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80016b8:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <HAL_DMA_Init+0x5a4>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80016ba:	4d0f      	ldr	r5, [pc, #60]	; (80016f8 <HAL_DMA_Init+0x5a8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80016bc:	4403      	add	r3, r0
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	e734      	b.n	800152c <HAL_DMA_Init+0x3dc>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016c2:	2110      	movs	r1, #16
 80016c4:	e7be      	b.n	8001644 <HAL_DMA_Init+0x4f4>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016c6:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 80016c8:	2303      	movs	r3, #3
    return HAL_ERROR;
 80016ca:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016cc:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80016ce:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 80016d2:	e6e6      	b.n	80014a2 <HAL_DMA_Init+0x352>
 80016d4:	58025408 	.word	0x58025408
 80016d8:	5802541c 	.word	0x5802541c
 80016dc:	58025430 	.word	0x58025430
 80016e0:	58025458 	.word	0x58025458
 80016e4:	58025494 	.word	0x58025494
 80016e8:	fffe000f 	.word	0xfffe000f
 80016ec:	a7fdabf8 	.word	0xa7fdabf8
 80016f0:	cccccccd 	.word	0xcccccccd
 80016f4:	1000823f 	.word	0x1000823f
 80016f8:	40020940 	.word	0x40020940

080016fc <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 80016fc:	2800      	cmp	r0, #0
 80016fe:	f000 8268 	beq.w	8001bd2 <HAL_DMA_Start_IT+0x4d6>
{
 8001702:	b4f0      	push	{r4, r5, r6, r7}
 8001704:	4605      	mov	r5, r0
  __HAL_LOCK(hdma);
 8001706:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800170a:	2801      	cmp	r0, #1
 800170c:	f000 8268 	beq.w	8001be0 <HAL_DMA_Start_IT+0x4e4>
 8001710:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001712:	f895 4035 	ldrb.w	r4, [r5, #53]	; 0x35
 8001716:	4284      	cmp	r4, r0
  __HAL_LOCK(hdma);
 8001718:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800171c:	d007      	beq.n	800172e <HAL_DMA_Start_IT+0x32>
    __HAL_UNLOCK(hdma);
 800171e:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001720:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8001724:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001728:	656b      	str	r3, [r5, #84]	; 0x54
}
 800172a:	bcf0      	pop	{r4, r5, r6, r7}
 800172c:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 800172e:	2702      	movs	r7, #2
    __HAL_DMA_DISABLE(hdma);
 8001730:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001732:	4e9e      	ldr	r6, [pc, #632]	; (80019ac <HAL_DMA_Start_IT+0x2b0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8001734:	f885 7035 	strb.w	r7, [r5, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001738:	2700      	movs	r7, #0
 800173a:	656f      	str	r7, [r5, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 800173c:	6820      	ldr	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800173e:	4f9c      	ldr	r7, [pc, #624]	; (80019b0 <HAL_DMA_Start_IT+0x2b4>)
    __HAL_DMA_DISABLE(hdma);
 8001740:	f020 0001 	bic.w	r0, r0, #1
 8001744:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001746:	489b      	ldr	r0, [pc, #620]	; (80019b4 <HAL_DMA_Start_IT+0x2b8>)
 8001748:	682c      	ldr	r4, [r5, #0]
 800174a:	42b4      	cmp	r4, r6
 800174c:	bf18      	it	ne
 800174e:	4284      	cmpne	r4, r0
 8001750:	f106 0630 	add.w	r6, r6, #48	; 0x30
 8001754:	bf0c      	ite	eq
 8001756:	2001      	moveq	r0, #1
 8001758:	2000      	movne	r0, #0
 800175a:	42bc      	cmp	r4, r7
 800175c:	bf08      	it	eq
 800175e:	f040 0001 	orreq.w	r0, r0, #1
 8001762:	3730      	adds	r7, #48	; 0x30
 8001764:	42b4      	cmp	r4, r6
 8001766:	bf08      	it	eq
 8001768:	f040 0001 	orreq.w	r0, r0, #1
 800176c:	3630      	adds	r6, #48	; 0x30
 800176e:	42bc      	cmp	r4, r7
 8001770:	bf08      	it	eq
 8001772:	f040 0001 	orreq.w	r0, r0, #1
 8001776:	3730      	adds	r7, #48	; 0x30
 8001778:	42b4      	cmp	r4, r6
 800177a:	bf08      	it	eq
 800177c:	f040 0001 	orreq.w	r0, r0, #1
 8001780:	3630      	adds	r6, #48	; 0x30
 8001782:	42bc      	cmp	r4, r7
 8001784:	bf08      	it	eq
 8001786:	f040 0001 	orreq.w	r0, r0, #1
 800178a:	f507 775c 	add.w	r7, r7, #880	; 0x370
 800178e:	42b4      	cmp	r4, r6
 8001790:	bf08      	it	eq
 8001792:	f040 0001 	orreq.w	r0, r0, #1
 8001796:	f506 765c 	add.w	r6, r6, #880	; 0x370
 800179a:	42bc      	cmp	r4, r7
 800179c:	bf08      	it	eq
 800179e:	f040 0001 	orreq.w	r0, r0, #1
 80017a2:	3730      	adds	r7, #48	; 0x30
 80017a4:	42b4      	cmp	r4, r6
 80017a6:	bf08      	it	eq
 80017a8:	f040 0001 	orreq.w	r0, r0, #1
 80017ac:	3630      	adds	r6, #48	; 0x30
 80017ae:	42bc      	cmp	r4, r7
 80017b0:	bf08      	it	eq
 80017b2:	f040 0001 	orreq.w	r0, r0, #1
 80017b6:	3730      	adds	r7, #48	; 0x30
 80017b8:	42b4      	cmp	r4, r6
 80017ba:	bf08      	it	eq
 80017bc:	f040 0001 	orreq.w	r0, r0, #1
 80017c0:	3630      	adds	r6, #48	; 0x30
 80017c2:	42bc      	cmp	r4, r7
 80017c4:	bf08      	it	eq
 80017c6:	f040 0001 	orreq.w	r0, r0, #1
 80017ca:	3730      	adds	r7, #48	; 0x30
 80017cc:	42b4      	cmp	r4, r6
 80017ce:	bf08      	it	eq
 80017d0:	f040 0001 	orreq.w	r0, r0, #1
 80017d4:	3630      	adds	r6, #48	; 0x30
 80017d6:	42bc      	cmp	r4, r7
 80017d8:	bf08      	it	eq
 80017da:	f040 0001 	orreq.w	r0, r0, #1
 80017de:	4f76      	ldr	r7, [pc, #472]	; (80019b8 <HAL_DMA_Start_IT+0x2bc>)
 80017e0:	42b4      	cmp	r4, r6
 80017e2:	bf08      	it	eq
 80017e4:	f040 0001 	orreq.w	r0, r0, #1
 80017e8:	4e74      	ldr	r6, [pc, #464]	; (80019bc <HAL_DMA_Start_IT+0x2c0>)
 80017ea:	42bc      	cmp	r4, r7
 80017ec:	bf08      	it	eq
 80017ee:	f040 0001 	orreq.w	r0, r0, #1
 80017f2:	3728      	adds	r7, #40	; 0x28
 80017f4:	42b4      	cmp	r4, r6
 80017f6:	bf08      	it	eq
 80017f8:	f040 0001 	orreq.w	r0, r0, #1
 80017fc:	3628      	adds	r6, #40	; 0x28
 80017fe:	42bc      	cmp	r4, r7
 8001800:	bf08      	it	eq
 8001802:	f040 0001 	orreq.w	r0, r0, #1
 8001806:	3728      	adds	r7, #40	; 0x28
 8001808:	42b4      	cmp	r4, r6
 800180a:	bf08      	it	eq
 800180c:	f040 0001 	orreq.w	r0, r0, #1
 8001810:	3628      	adds	r6, #40	; 0x28
 8001812:	42bc      	cmp	r4, r7
 8001814:	bf08      	it	eq
 8001816:	f040 0001 	orreq.w	r0, r0, #1
 800181a:	3728      	adds	r7, #40	; 0x28
 800181c:	42b4      	cmp	r4, r6
 800181e:	bf08      	it	eq
 8001820:	f040 0001 	orreq.w	r0, r0, #1
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001824:	6dae      	ldr	r6, [r5, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001826:	42bc      	cmp	r4, r7
 8001828:	bf08      	it	eq
 800182a:	f040 0001 	orreq.w	r0, r0, #1
 800182e:	b910      	cbnz	r0, 8001836 <HAL_DMA_Start_IT+0x13a>
 8001830:	4863      	ldr	r0, [pc, #396]	; (80019c0 <HAL_DMA_Start_IT+0x2c4>)
 8001832:	4284      	cmp	r4, r0
 8001834:	d108      	bne.n	8001848 <HAL_DMA_Start_IT+0x14c>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001836:	e9d5 0419 	ldrd	r0, r4, [r5, #100]	; 0x64
 800183a:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800183c:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 800183e:	b110      	cbz	r0, 8001846 <HAL_DMA_Start_IT+0x14a>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001840:	e9d5 041c 	ldrd	r0, r4, [r5, #112]	; 0x70
 8001844:	6044      	str	r4, [r0, #4]
 8001846:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001848:	485a      	ldr	r0, [pc, #360]	; (80019b4 <HAL_DMA_Start_IT+0x2b8>)
 800184a:	f8df c160 	ldr.w	ip, [pc, #352]	; 80019ac <HAL_DMA_Start_IT+0x2b0>
 800184e:	4f58      	ldr	r7, [pc, #352]	; (80019b0 <HAL_DMA_Start_IT+0x2b4>)
 8001850:	4564      	cmp	r4, ip
 8001852:	bf18      	it	ne
 8001854:	4284      	cmpne	r4, r0
 8001856:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800185a:	bf0c      	ite	eq
 800185c:	2001      	moveq	r0, #1
 800185e:	2000      	movne	r0, #0
 8001860:	42bc      	cmp	r4, r7
 8001862:	bf08      	it	eq
 8001864:	f040 0001 	orreq.w	r0, r0, #1
 8001868:	3730      	adds	r7, #48	; 0x30
 800186a:	4564      	cmp	r4, ip
 800186c:	bf08      	it	eq
 800186e:	f040 0001 	orreq.w	r0, r0, #1
 8001872:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8001876:	42bc      	cmp	r4, r7
 8001878:	bf08      	it	eq
 800187a:	f040 0001 	orreq.w	r0, r0, #1
 800187e:	3730      	adds	r7, #48	; 0x30
 8001880:	4564      	cmp	r4, ip
 8001882:	bf08      	it	eq
 8001884:	f040 0001 	orreq.w	r0, r0, #1
 8001888:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800188c:	42bc      	cmp	r4, r7
 800188e:	bf08      	it	eq
 8001890:	f040 0001 	orreq.w	r0, r0, #1
 8001894:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8001898:	4564      	cmp	r4, ip
 800189a:	bf08      	it	eq
 800189c:	f040 0001 	orreq.w	r0, r0, #1
 80018a0:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 80018a4:	42bc      	cmp	r4, r7
 80018a6:	bf08      	it	eq
 80018a8:	f040 0001 	orreq.w	r0, r0, #1
 80018ac:	3730      	adds	r7, #48	; 0x30
 80018ae:	4564      	cmp	r4, ip
 80018b0:	bf08      	it	eq
 80018b2:	f040 0001 	orreq.w	r0, r0, #1
 80018b6:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80018ba:	42bc      	cmp	r4, r7
 80018bc:	bf08      	it	eq
 80018be:	f040 0001 	orreq.w	r0, r0, #1
 80018c2:	3730      	adds	r7, #48	; 0x30
 80018c4:	4564      	cmp	r4, ip
 80018c6:	bf08      	it	eq
 80018c8:	f040 0001 	orreq.w	r0, r0, #1
 80018cc:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80018d0:	42bc      	cmp	r4, r7
 80018d2:	bf08      	it	eq
 80018d4:	f040 0001 	orreq.w	r0, r0, #1
 80018d8:	3730      	adds	r7, #48	; 0x30
 80018da:	4564      	cmp	r4, ip
 80018dc:	bf08      	it	eq
 80018de:	f040 0001 	orreq.w	r0, r0, #1
 80018e2:	42bc      	cmp	r4, r7
 80018e4:	bf08      	it	eq
 80018e6:	f040 0001 	orreq.w	r0, r0, #1
 80018ea:	b918      	cbnz	r0, 80018f4 <HAL_DMA_Start_IT+0x1f8>
 80018ec:	4835      	ldr	r0, [pc, #212]	; (80019c4 <HAL_DMA_Start_IT+0x2c8>)
 80018ee:	4284      	cmp	r4, r0
 80018f0:	f040 8179 	bne.w	8001be6 <HAL_DMA_Start_IT+0x4ea>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80018f4:	6dec      	ldr	r4, [r5, #92]	; 0x5c
 80018f6:	203f      	movs	r0, #63	; 0x3f
 80018f8:	f004 041f 	and.w	r4, r4, #31
 80018fc:	40a0      	lsls	r0, r4
 80018fe:	60b0      	str	r0, [r6, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001900:	682c      	ldr	r4, [r5, #0]
 8001902:	6820      	ldr	r0, [r4, #0]
 8001904:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8001908:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800190a:	6828      	ldr	r0, [r5, #0]
 800190c:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800190e:	68ab      	ldr	r3, [r5, #8]
 8001910:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8001912:	682b      	ldr	r3, [r5, #0]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001914:	f000 815f 	beq.w	8001bd6 <HAL_DMA_Start_IT+0x4da>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8001918:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800191a:	682b      	ldr	r3, [r5, #0]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	682c      	ldr	r4, [r5, #0]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001920:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <HAL_DMA_Start_IT+0x2b8>)
 8001922:	4922      	ldr	r1, [pc, #136]	; (80019ac <HAL_DMA_Start_IT+0x2b0>)
 8001924:	4a22      	ldr	r2, [pc, #136]	; (80019b0 <HAL_DMA_Start_IT+0x2b4>)
 8001926:	428c      	cmp	r4, r1
 8001928:	bf18      	it	ne
 800192a:	429c      	cmpne	r4, r3
 800192c:	4826      	ldr	r0, [pc, #152]	; (80019c8 <HAL_DMA_Start_IT+0x2cc>)
 800192e:	f101 0148 	add.w	r1, r1, #72	; 0x48
 8001932:	bf0c      	ite	eq
 8001934:	2301      	moveq	r3, #1
 8001936:	2300      	movne	r3, #0
 8001938:	4294      	cmp	r4, r2
 800193a:	bf08      	it	eq
 800193c:	f043 0301 	orreq.w	r3, r3, #1
 8001940:	3248      	adds	r2, #72	; 0x48
 8001942:	4284      	cmp	r4, r0
 8001944:	bf08      	it	eq
 8001946:	f043 0301 	orreq.w	r3, r3, #1
 800194a:	3048      	adds	r0, #72	; 0x48
 800194c:	428c      	cmp	r4, r1
 800194e:	bf08      	it	eq
 8001950:	f043 0301 	orreq.w	r3, r3, #1
 8001954:	3148      	adds	r1, #72	; 0x48
 8001956:	4294      	cmp	r4, r2
 8001958:	bf08      	it	eq
 800195a:	f043 0301 	orreq.w	r3, r3, #1
 800195e:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001962:	4284      	cmp	r4, r0
 8001964:	bf08      	it	eq
 8001966:	f043 0301 	orreq.w	r3, r3, #1
 800196a:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800196e:	428c      	cmp	r4, r1
 8001970:	bf08      	it	eq
 8001972:	f043 0301 	orreq.w	r3, r3, #1
 8001976:	f501 7162 	add.w	r1, r1, #904	; 0x388
 800197a:	4294      	cmp	r4, r2
 800197c:	bf08      	it	eq
 800197e:	f043 0301 	orreq.w	r3, r3, #1
 8001982:	3248      	adds	r2, #72	; 0x48
 8001984:	4284      	cmp	r4, r0
 8001986:	bf08      	it	eq
 8001988:	f043 0301 	orreq.w	r3, r3, #1
 800198c:	3048      	adds	r0, #72	; 0x48
 800198e:	428c      	cmp	r4, r1
 8001990:	bf08      	it	eq
 8001992:	f043 0301 	orreq.w	r3, r3, #1
 8001996:	3148      	adds	r1, #72	; 0x48
 8001998:	4294      	cmp	r4, r2
 800199a:	bf08      	it	eq
 800199c:	f043 0301 	orreq.w	r3, r3, #1
 80019a0:	3248      	adds	r2, #72	; 0x48
 80019a2:	4284      	cmp	r4, r0
 80019a4:	bf08      	it	eq
 80019a6:	f043 0301 	orreq.w	r3, r3, #1
 80019aa:	e00f      	b.n	80019cc <HAL_DMA_Start_IT+0x2d0>
 80019ac:	40020028 	.word	0x40020028
 80019b0:	40020040 	.word	0x40020040
 80019b4:	40020010 	.word	0x40020010
 80019b8:	58025408 	.word	0x58025408
 80019bc:	5802541c 	.word	0x5802541c
 80019c0:	58025494 	.word	0x58025494
 80019c4:	400204b8 	.word	0x400204b8
 80019c8:	40020058 	.word	0x40020058
 80019cc:	428c      	cmp	r4, r1
 80019ce:	bf08      	it	eq
 80019d0:	f043 0301 	orreq.w	r3, r3, #1
 80019d4:	4294      	cmp	r4, r2
 80019d6:	bf08      	it	eq
 80019d8:	f043 0301 	orreq.w	r3, r3, #1
 80019dc:	b91b      	cbnz	r3, 80019e6 <HAL_DMA_Start_IT+0x2ea>
 80019de:	4b9c      	ldr	r3, [pc, #624]	; (8001c50 <HAL_DMA_Start_IT+0x554>)
 80019e0:	429c      	cmp	r4, r3
 80019e2:	f040 8149 	bne.w	8001c78 <HAL_DMA_Start_IT+0x57c>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80019e6:	6823      	ldr	r3, [r4, #0]
 80019e8:	f023 031e 	bic.w	r3, r3, #30
 80019ec:	f043 0316 	orr.w	r3, r3, #22
 80019f0:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80019f2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80019f4:	b123      	cbz	r3, 8001a00 <HAL_DMA_Start_IT+0x304>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80019f6:	682a      	ldr	r2, [r5, #0]
 80019f8:	6813      	ldr	r3, [r2, #0]
 80019fa:	f043 0308 	orr.w	r3, r3, #8
 80019fe:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a00:	682c      	ldr	r4, [r5, #0]
 8001a02:	4b94      	ldr	r3, [pc, #592]	; (8001c54 <HAL_DMA_Start_IT+0x558>)
 8001a04:	4a94      	ldr	r2, [pc, #592]	; (8001c58 <HAL_DMA_Start_IT+0x55c>)
 8001a06:	4895      	ldr	r0, [pc, #596]	; (8001c5c <HAL_DMA_Start_IT+0x560>)
 8001a08:	4294      	cmp	r4, r2
 8001a0a:	bf18      	it	ne
 8001a0c:	429c      	cmpne	r4, r3
 8001a0e:	4994      	ldr	r1, [pc, #592]	; (8001c60 <HAL_DMA_Start_IT+0x564>)
 8001a10:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8001a14:	bf0c      	ite	eq
 8001a16:	2301      	moveq	r3, #1
 8001a18:	2300      	movne	r3, #0
 8001a1a:	4284      	cmp	r4, r0
 8001a1c:	bf08      	it	eq
 8001a1e:	f043 0301 	orreq.w	r3, r3, #1
 8001a22:	3048      	adds	r0, #72	; 0x48
 8001a24:	428c      	cmp	r4, r1
 8001a26:	bf08      	it	eq
 8001a28:	f043 0301 	orreq.w	r3, r3, #1
 8001a2c:	3148      	adds	r1, #72	; 0x48
 8001a2e:	4294      	cmp	r4, r2
 8001a30:	bf08      	it	eq
 8001a32:	f043 0301 	orreq.w	r3, r3, #1
 8001a36:	3248      	adds	r2, #72	; 0x48
 8001a38:	4284      	cmp	r4, r0
 8001a3a:	bf08      	it	eq
 8001a3c:	f043 0301 	orreq.w	r3, r3, #1
 8001a40:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8001a44:	428c      	cmp	r4, r1
 8001a46:	bf08      	it	eq
 8001a48:	f043 0301 	orreq.w	r3, r3, #1
 8001a4c:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8001a50:	4294      	cmp	r4, r2
 8001a52:	bf08      	it	eq
 8001a54:	f043 0301 	orreq.w	r3, r3, #1
 8001a58:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001a5c:	4284      	cmp	r4, r0
 8001a5e:	bf08      	it	eq
 8001a60:	f043 0301 	orreq.w	r3, r3, #1
 8001a64:	3048      	adds	r0, #72	; 0x48
 8001a66:	428c      	cmp	r4, r1
 8001a68:	bf08      	it	eq
 8001a6a:	f043 0301 	orreq.w	r3, r3, #1
 8001a6e:	3148      	adds	r1, #72	; 0x48
 8001a70:	4294      	cmp	r4, r2
 8001a72:	bf08      	it	eq
 8001a74:	f043 0301 	orreq.w	r3, r3, #1
 8001a78:	3248      	adds	r2, #72	; 0x48
 8001a7a:	4284      	cmp	r4, r0
 8001a7c:	bf08      	it	eq
 8001a7e:	f043 0301 	orreq.w	r3, r3, #1
 8001a82:	3048      	adds	r0, #72	; 0x48
 8001a84:	428c      	cmp	r4, r1
 8001a86:	bf08      	it	eq
 8001a88:	f043 0301 	orreq.w	r3, r3, #1
 8001a8c:	3148      	adds	r1, #72	; 0x48
 8001a8e:	4294      	cmp	r4, r2
 8001a90:	bf08      	it	eq
 8001a92:	f043 0301 	orreq.w	r3, r3, #1
 8001a96:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8001a9a:	4284      	cmp	r4, r0
 8001a9c:	bf08      	it	eq
 8001a9e:	f043 0301 	orreq.w	r3, r3, #1
 8001aa2:	f502 429f 	add.w	r2, r2, #20352	; 0x4f80
 8001aa6:	486f      	ldr	r0, [pc, #444]	; (8001c64 <HAL_DMA_Start_IT+0x568>)
 8001aa8:	428c      	cmp	r4, r1
 8001aaa:	bf08      	it	eq
 8001aac:	f043 0301 	orreq.w	r3, r3, #1
 8001ab0:	496d      	ldr	r1, [pc, #436]	; (8001c68 <HAL_DMA_Start_IT+0x56c>)
 8001ab2:	4294      	cmp	r4, r2
 8001ab4:	bf08      	it	eq
 8001ab6:	f043 0301 	orreq.w	r3, r3, #1
 8001aba:	323c      	adds	r2, #60	; 0x3c
 8001abc:	4284      	cmp	r4, r0
 8001abe:	bf08      	it	eq
 8001ac0:	f043 0301 	orreq.w	r3, r3, #1
 8001ac4:	303c      	adds	r0, #60	; 0x3c
 8001ac6:	428c      	cmp	r4, r1
 8001ac8:	bf08      	it	eq
 8001aca:	f043 0301 	orreq.w	r3, r3, #1
 8001ace:	313c      	adds	r1, #60	; 0x3c
 8001ad0:	4294      	cmp	r4, r2
 8001ad2:	bf08      	it	eq
 8001ad4:	f043 0301 	orreq.w	r3, r3, #1
 8001ad8:	323c      	adds	r2, #60	; 0x3c
 8001ada:	4284      	cmp	r4, r0
 8001adc:	bf08      	it	eq
 8001ade:	f043 0301 	orreq.w	r3, r3, #1
 8001ae2:	428c      	cmp	r4, r1
 8001ae4:	bf08      	it	eq
 8001ae6:	f043 0301 	orreq.w	r3, r3, #1
 8001aea:	4294      	cmp	r4, r2
 8001aec:	bf08      	it	eq
 8001aee:	f043 0301 	orreq.w	r3, r3, #1
 8001af2:	b913      	cbnz	r3, 8001afa <HAL_DMA_Start_IT+0x3fe>
 8001af4:	4b5d      	ldr	r3, [pc, #372]	; (8001c6c <HAL_DMA_Start_IT+0x570>)
 8001af6:	429c      	cmp	r4, r3
 8001af8:	d10e      	bne.n	8001b18 <HAL_DMA_Start_IT+0x41c>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001afa:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	03d2      	lsls	r2, r2, #15
 8001b00:	d503      	bpl.n	8001b0a <HAL_DMA_Start_IT+0x40e>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b08:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8001b0a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8001b0c:	b11b      	cbz	r3, 8001b16 <HAL_DMA_Start_IT+0x41a>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	682c      	ldr	r4, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8001b18:	4b4e      	ldr	r3, [pc, #312]	; (8001c54 <HAL_DMA_Start_IT+0x558>)
 8001b1a:	494f      	ldr	r1, [pc, #316]	; (8001c58 <HAL_DMA_Start_IT+0x55c>)
 8001b1c:	4a4f      	ldr	r2, [pc, #316]	; (8001c5c <HAL_DMA_Start_IT+0x560>)
 8001b1e:	428c      	cmp	r4, r1
 8001b20:	bf18      	it	ne
 8001b22:	429c      	cmpne	r4, r3
 8001b24:	4d4e      	ldr	r5, [pc, #312]	; (8001c60 <HAL_DMA_Start_IT+0x564>)
 8001b26:	4852      	ldr	r0, [pc, #328]	; (8001c70 <HAL_DMA_Start_IT+0x574>)
 8001b28:	f101 0160 	add.w	r1, r1, #96	; 0x60
 8001b2c:	bf0c      	ite	eq
 8001b2e:	2301      	moveq	r3, #1
 8001b30:	2300      	movne	r3, #0
 8001b32:	4294      	cmp	r4, r2
 8001b34:	bf08      	it	eq
 8001b36:	f043 0301 	orreq.w	r3, r3, #1
 8001b3a:	3260      	adds	r2, #96	; 0x60
 8001b3c:	42ac      	cmp	r4, r5
 8001b3e:	bf08      	it	eq
 8001b40:	f043 0301 	orreq.w	r3, r3, #1
 8001b44:	3560      	adds	r5, #96	; 0x60
 8001b46:	4284      	cmp	r4, r0
 8001b48:	bf08      	it	eq
 8001b4a:	f043 0301 	orreq.w	r3, r3, #1
 8001b4e:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 8001b52:	428c      	cmp	r4, r1
 8001b54:	bf08      	it	eq
 8001b56:	f043 0301 	orreq.w	r3, r3, #1
 8001b5a:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
 8001b5e:	4294      	cmp	r4, r2
 8001b60:	bf08      	it	eq
 8001b62:	f043 0301 	orreq.w	r3, r3, #1
 8001b66:	f502 7268 	add.w	r2, r2, #928	; 0x3a0
 8001b6a:	42ac      	cmp	r4, r5
 8001b6c:	bf08      	it	eq
 8001b6e:	f043 0301 	orreq.w	r3, r3, #1
 8001b72:	f505 7568 	add.w	r5, r5, #928	; 0x3a0
 8001b76:	4284      	cmp	r4, r0
 8001b78:	bf08      	it	eq
 8001b7a:	f043 0301 	orreq.w	r3, r3, #1
 8001b7e:	3060      	adds	r0, #96	; 0x60
 8001b80:	428c      	cmp	r4, r1
 8001b82:	bf08      	it	eq
 8001b84:	f043 0301 	orreq.w	r3, r3, #1
 8001b88:	3160      	adds	r1, #96	; 0x60
 8001b8a:	4294      	cmp	r4, r2
 8001b8c:	bf08      	it	eq
 8001b8e:	f043 0301 	orreq.w	r3, r3, #1
 8001b92:	3260      	adds	r2, #96	; 0x60
 8001b94:	42ac      	cmp	r4, r5
 8001b96:	bf08      	it	eq
 8001b98:	f043 0301 	orreq.w	r3, r3, #1
 8001b9c:	4284      	cmp	r4, r0
 8001b9e:	bf08      	it	eq
 8001ba0:	f043 0301 	orreq.w	r3, r3, #1
 8001ba4:	428c      	cmp	r4, r1
 8001ba6:	bf08      	it	eq
 8001ba8:	f043 0301 	orreq.w	r3, r3, #1
 8001bac:	4294      	cmp	r4, r2
 8001bae:	bf08      	it	eq
 8001bb0:	f043 0301 	orreq.w	r3, r3, #1
 8001bb4:	b933      	cbnz	r3, 8001bc4 <HAL_DMA_Start_IT+0x4c8>
 8001bb6:	3048      	adds	r0, #72	; 0x48
 8001bb8:	1a20      	subs	r0, r4, r0
 8001bba:	fab0 f080 	clz	r0, r0
 8001bbe:	0940      	lsrs	r0, r0, #5
 8001bc0:	2800      	cmp	r0, #0
 8001bc2:	d040      	beq.n	8001c46 <HAL_DMA_Start_IT+0x54a>
 8001bc4:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc6:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6023      	str	r3, [r4, #0]
}
 8001bce:	bcf0      	pop	{r4, r5, r6, r7}
 8001bd0:	4770      	bx	lr
    return HAL_ERROR;
 8001bd2:	2001      	movs	r0, #1
}
 8001bd4:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8001bd6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8001bd8:	682b      	ldr	r3, [r5, #0]
 8001bda:	60d9      	str	r1, [r3, #12]
 8001bdc:	682c      	ldr	r4, [r5, #0]
 8001bde:	e69f      	b.n	8001920 <HAL_DMA_Start_IT+0x224>
  __HAL_LOCK(hdma);
 8001be0:	2002      	movs	r0, #2
}
 8001be2:	bcf0      	pop	{r4, r5, r6, r7}
 8001be4:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001be6:	4823      	ldr	r0, [pc, #140]	; (8001c74 <HAL_DMA_Start_IT+0x578>)
 8001be8:	f8df c078 	ldr.w	ip, [pc, #120]	; 8001c64 <HAL_DMA_Start_IT+0x568>
 8001bec:	4f1e      	ldr	r7, [pc, #120]	; (8001c68 <HAL_DMA_Start_IT+0x56c>)
 8001bee:	4564      	cmp	r4, ip
 8001bf0:	bf18      	it	ne
 8001bf2:	4284      	cmpne	r4, r0
 8001bf4:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8001bf8:	bf0c      	ite	eq
 8001bfa:	2001      	moveq	r0, #1
 8001bfc:	2000      	movne	r0, #0
 8001bfe:	42bc      	cmp	r4, r7
 8001c00:	bf08      	it	eq
 8001c02:	f040 0001 	orreq.w	r0, r0, #1
 8001c06:	3728      	adds	r7, #40	; 0x28
 8001c08:	4564      	cmp	r4, ip
 8001c0a:	bf08      	it	eq
 8001c0c:	f040 0001 	orreq.w	r0, r0, #1
 8001c10:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8001c14:	42bc      	cmp	r4, r7
 8001c16:	bf08      	it	eq
 8001c18:	f040 0001 	orreq.w	r0, r0, #1
 8001c1c:	3728      	adds	r7, #40	; 0x28
 8001c1e:	4564      	cmp	r4, ip
 8001c20:	bf08      	it	eq
 8001c22:	f040 0001 	orreq.w	r0, r0, #1
 8001c26:	42bc      	cmp	r4, r7
 8001c28:	bf08      	it	eq
 8001c2a:	f040 0001 	orreq.w	r0, r0, #1
 8001c2e:	b918      	cbnz	r0, 8001c38 <HAL_DMA_Start_IT+0x53c>
 8001c30:	480e      	ldr	r0, [pc, #56]	; (8001c6c <HAL_DMA_Start_IT+0x570>)
 8001c32:	4284      	cmp	r4, r0
 8001c34:	f47f ae74 	bne.w	8001920 <HAL_DMA_Start_IT+0x224>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001c38:	6dec      	ldr	r4, [r5, #92]	; 0x5c
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	f004 041f 	and.w	r4, r4, #31
 8001c40:	40a0      	lsls	r0, r4
 8001c42:	6070      	str	r0, [r6, #4]
 8001c44:	e661      	b.n	800190a <HAL_DMA_Start_IT+0x20e>
    __HAL_DMA_ENABLE(hdma);
 8001c46:	6823      	ldr	r3, [r4, #0]
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6023      	str	r3, [r4, #0]
 8001c4e:	e56c      	b.n	800172a <HAL_DMA_Start_IT+0x2e>
 8001c50:	400204b8 	.word	0x400204b8
 8001c54:	40020010 	.word	0x40020010
 8001c58:	40020028 	.word	0x40020028
 8001c5c:	40020040 	.word	0x40020040
 8001c60:	40020058 	.word	0x40020058
 8001c64:	5802541c 	.word	0x5802541c
 8001c68:	58025430 	.word	0x58025430
 8001c6c:	58025494 	.word	0x58025494
 8001c70:	40020070 	.word	0x40020070
 8001c74:	58025408 	.word	0x58025408
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001c78:	6823      	ldr	r3, [r4, #0]
 8001c7a:	f023 030e 	bic.w	r3, r3, #14
 8001c7e:	f043 030a 	orr.w	r3, r3, #10
 8001c82:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001c84:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f43f aeba 	beq.w	8001a00 <HAL_DMA_Start_IT+0x304>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001c8c:	682a      	ldr	r2, [r5, #0]
 8001c8e:	6813      	ldr	r3, [r2, #0]
 8001c90:	f043 0304 	orr.w	r3, r3, #4
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e6b3      	b.n	8001a00 <HAL_DMA_Start_IT+0x304>

08001c98 <HAL_DMA_Abort>:
{
 8001c98:	b570      	push	{r4, r5, r6, lr}
 8001c9a:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8001c9c:	f7fe fb80 	bl	80003a0 <HAL_GetTick>
  if(hdma == NULL)
 8001ca0:	2e00      	cmp	r6, #0
 8001ca2:	f000 81ef 	beq.w	8002084 <HAL_DMA_Abort+0x3ec>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ca6:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d006      	beq.n	8001cbc <HAL_DMA_Abort+0x24>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cae:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8001cb0:	2300      	movs	r3, #0
    return HAL_ERROR;
 8001cb2:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cb4:	6572      	str	r2, [r6, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001cb6:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
 8001cba:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001cbc:	6832      	ldr	r2, [r6, #0]
 8001cbe:	4604      	mov	r4, r0
 8001cc0:	4b6f      	ldr	r3, [pc, #444]	; (8001e80 <HAL_DMA_Abort+0x1e8>)
 8001cc2:	4870      	ldr	r0, [pc, #448]	; (8001e84 <HAL_DMA_Abort+0x1ec>)
 8001cc4:	4970      	ldr	r1, [pc, #448]	; (8001e88 <HAL_DMA_Abort+0x1f0>)
 8001cc6:	4282      	cmp	r2, r0
 8001cc8:	bf18      	it	ne
 8001cca:	429a      	cmpne	r2, r3
 8001ccc:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8001cd0:	bf0c      	ite	eq
 8001cd2:	2301      	moveq	r3, #1
 8001cd4:	2300      	movne	r3, #0
 8001cd6:	428a      	cmp	r2, r1
 8001cd8:	bf08      	it	eq
 8001cda:	f043 0301 	orreq.w	r3, r3, #1
 8001cde:	3130      	adds	r1, #48	; 0x30
 8001ce0:	4282      	cmp	r2, r0
 8001ce2:	bf08      	it	eq
 8001ce4:	f043 0301 	orreq.w	r3, r3, #1
 8001ce8:	3030      	adds	r0, #48	; 0x30
 8001cea:	428a      	cmp	r2, r1
 8001cec:	bf08      	it	eq
 8001cee:	f043 0301 	orreq.w	r3, r3, #1
 8001cf2:	3130      	adds	r1, #48	; 0x30
 8001cf4:	4282      	cmp	r2, r0
 8001cf6:	bf08      	it	eq
 8001cf8:	f043 0301 	orreq.w	r3, r3, #1
 8001cfc:	3030      	adds	r0, #48	; 0x30
 8001cfe:	428a      	cmp	r2, r1
 8001d00:	bf08      	it	eq
 8001d02:	f043 0301 	orreq.w	r3, r3, #1
 8001d06:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8001d0a:	4282      	cmp	r2, r0
 8001d0c:	bf08      	it	eq
 8001d0e:	f043 0301 	orreq.w	r3, r3, #1
 8001d12:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8001d16:	428a      	cmp	r2, r1
 8001d18:	bf08      	it	eq
 8001d1a:	f043 0301 	orreq.w	r3, r3, #1
 8001d1e:	3130      	adds	r1, #48	; 0x30
 8001d20:	4282      	cmp	r2, r0
 8001d22:	bf08      	it	eq
 8001d24:	f043 0301 	orreq.w	r3, r3, #1
 8001d28:	3030      	adds	r0, #48	; 0x30
 8001d2a:	428a      	cmp	r2, r1
 8001d2c:	bf08      	it	eq
 8001d2e:	f043 0301 	orreq.w	r3, r3, #1
 8001d32:	3130      	adds	r1, #48	; 0x30
 8001d34:	4282      	cmp	r2, r0
 8001d36:	bf08      	it	eq
 8001d38:	f043 0301 	orreq.w	r3, r3, #1
 8001d3c:	3030      	adds	r0, #48	; 0x30
 8001d3e:	428a      	cmp	r2, r1
 8001d40:	bf08      	it	eq
 8001d42:	f043 0301 	orreq.w	r3, r3, #1
 8001d46:	3130      	adds	r1, #48	; 0x30
 8001d48:	4282      	cmp	r2, r0
 8001d4a:	bf08      	it	eq
 8001d4c:	f043 0301 	orreq.w	r3, r3, #1
 8001d50:	428a      	cmp	r2, r1
 8001d52:	bf08      	it	eq
 8001d54:	f043 0301 	orreq.w	r3, r3, #1
 8001d58:	b91b      	cbnz	r3, 8001d62 <HAL_DMA_Abort+0xca>
 8001d5a:	4b4c      	ldr	r3, [pc, #304]	; (8001e8c <HAL_DMA_Abort+0x1f4>)
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	f040 819d 	bne.w	800209c <HAL_DMA_Abort+0x404>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001d62:	6813      	ldr	r3, [r2, #0]
 8001d64:	f023 031e 	bic.w	r3, r3, #30
 8001d68:	6013      	str	r3, [r2, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001d6a:	6832      	ldr	r2, [r6, #0]
 8001d6c:	6953      	ldr	r3, [r2, #20]
 8001d6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d72:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001d74:	6832      	ldr	r2, [r6, #0]
 8001d76:	4615      	mov	r5, r2
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d78:	4b41      	ldr	r3, [pc, #260]	; (8001e80 <HAL_DMA_Abort+0x1e8>)
 8001d7a:	4842      	ldr	r0, [pc, #264]	; (8001e84 <HAL_DMA_Abort+0x1ec>)
 8001d7c:	4942      	ldr	r1, [pc, #264]	; (8001e88 <HAL_DMA_Abort+0x1f0>)
 8001d7e:	4282      	cmp	r2, r0
 8001d80:	bf18      	it	ne
 8001d82:	429a      	cmpne	r2, r3
 8001d84:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8001d88:	bf0c      	ite	eq
 8001d8a:	2301      	moveq	r3, #1
 8001d8c:	2300      	movne	r3, #0
 8001d8e:	428a      	cmp	r2, r1
 8001d90:	bf08      	it	eq
 8001d92:	f043 0301 	orreq.w	r3, r3, #1
 8001d96:	3130      	adds	r1, #48	; 0x30
 8001d98:	4282      	cmp	r2, r0
 8001d9a:	bf08      	it	eq
 8001d9c:	f043 0301 	orreq.w	r3, r3, #1
 8001da0:	3030      	adds	r0, #48	; 0x30
 8001da2:	428a      	cmp	r2, r1
 8001da4:	bf08      	it	eq
 8001da6:	f043 0301 	orreq.w	r3, r3, #1
 8001daa:	3130      	adds	r1, #48	; 0x30
 8001dac:	4282      	cmp	r2, r0
 8001dae:	bf08      	it	eq
 8001db0:	f043 0301 	orreq.w	r3, r3, #1
 8001db4:	3030      	adds	r0, #48	; 0x30
 8001db6:	428a      	cmp	r2, r1
 8001db8:	bf08      	it	eq
 8001dba:	f043 0301 	orreq.w	r3, r3, #1
 8001dbe:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8001dc2:	4282      	cmp	r2, r0
 8001dc4:	bf08      	it	eq
 8001dc6:	f043 0301 	orreq.w	r3, r3, #1
 8001dca:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8001dce:	428a      	cmp	r2, r1
 8001dd0:	bf08      	it	eq
 8001dd2:	f043 0301 	orreq.w	r3, r3, #1
 8001dd6:	3130      	adds	r1, #48	; 0x30
 8001dd8:	4282      	cmp	r2, r0
 8001dda:	bf08      	it	eq
 8001ddc:	f043 0301 	orreq.w	r3, r3, #1
 8001de0:	3030      	adds	r0, #48	; 0x30
 8001de2:	428a      	cmp	r2, r1
 8001de4:	bf08      	it	eq
 8001de6:	f043 0301 	orreq.w	r3, r3, #1
 8001dea:	3130      	adds	r1, #48	; 0x30
 8001dec:	4282      	cmp	r2, r0
 8001dee:	bf08      	it	eq
 8001df0:	f043 0301 	orreq.w	r3, r3, #1
 8001df4:	3030      	adds	r0, #48	; 0x30
 8001df6:	428a      	cmp	r2, r1
 8001df8:	bf08      	it	eq
 8001dfa:	f043 0301 	orreq.w	r3, r3, #1
 8001dfe:	3130      	adds	r1, #48	; 0x30
 8001e00:	4282      	cmp	r2, r0
 8001e02:	bf08      	it	eq
 8001e04:	f043 0301 	orreq.w	r3, r3, #1
 8001e08:	3030      	adds	r0, #48	; 0x30
 8001e0a:	428a      	cmp	r2, r1
 8001e0c:	bf08      	it	eq
 8001e0e:	f043 0301 	orreq.w	r3, r3, #1
 8001e12:	491f      	ldr	r1, [pc, #124]	; (8001e90 <HAL_DMA_Abort+0x1f8>)
 8001e14:	4282      	cmp	r2, r0
 8001e16:	bf08      	it	eq
 8001e18:	f043 0301 	orreq.w	r3, r3, #1
 8001e1c:	481d      	ldr	r0, [pc, #116]	; (8001e94 <HAL_DMA_Abort+0x1fc>)
 8001e1e:	428a      	cmp	r2, r1
 8001e20:	bf08      	it	eq
 8001e22:	f043 0301 	orreq.w	r3, r3, #1
 8001e26:	3128      	adds	r1, #40	; 0x28
 8001e28:	4282      	cmp	r2, r0
 8001e2a:	bf08      	it	eq
 8001e2c:	f043 0301 	orreq.w	r3, r3, #1
 8001e30:	3028      	adds	r0, #40	; 0x28
 8001e32:	428a      	cmp	r2, r1
 8001e34:	bf08      	it	eq
 8001e36:	f043 0301 	orreq.w	r3, r3, #1
 8001e3a:	3128      	adds	r1, #40	; 0x28
 8001e3c:	4282      	cmp	r2, r0
 8001e3e:	bf08      	it	eq
 8001e40:	f043 0301 	orreq.w	r3, r3, #1
 8001e44:	3028      	adds	r0, #40	; 0x28
 8001e46:	428a      	cmp	r2, r1
 8001e48:	bf08      	it	eq
 8001e4a:	f043 0301 	orreq.w	r3, r3, #1
 8001e4e:	3128      	adds	r1, #40	; 0x28
 8001e50:	4282      	cmp	r2, r0
 8001e52:	bf08      	it	eq
 8001e54:	f043 0301 	orreq.w	r3, r3, #1
 8001e58:	428a      	cmp	r2, r1
 8001e5a:	bf08      	it	eq
 8001e5c:	f043 0301 	orreq.w	r3, r3, #1
 8001e60:	b913      	cbnz	r3, 8001e68 <HAL_DMA_Abort+0x1d0>
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <HAL_DMA_Abort+0x200>)
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d105      	bne.n	8001e74 <HAL_DMA_Abort+0x1dc>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e68:	6e32      	ldr	r2, [r6, #96]	; 0x60
 8001e6a:	6813      	ldr	r3, [r2, #0]
 8001e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	6832      	ldr	r2, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
 8001e74:	6813      	ldr	r3, [r2, #0]
 8001e76:	f023 0301 	bic.w	r3, r3, #1
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	e014      	b.n	8001ea8 <HAL_DMA_Abort+0x210>
 8001e7e:	bf00      	nop
 8001e80:	40020010 	.word	0x40020010
 8001e84:	40020028 	.word	0x40020028
 8001e88:	40020040 	.word	0x40020040
 8001e8c:	400204b8 	.word	0x400204b8
 8001e90:	58025408 	.word	0x58025408
 8001e94:	5802541c 	.word	0x5802541c
 8001e98:	58025494 	.word	0x58025494
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e9c:	f7fe fa80 	bl	80003a0 <HAL_GetTick>
 8001ea0:	1b00      	subs	r0, r0, r4
 8001ea2:	2805      	cmp	r0, #5
 8001ea4:	f200 80f0 	bhi.w	8002088 <HAL_DMA_Abort+0x3f0>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ea8:	682b      	ldr	r3, [r5, #0]
 8001eaa:	07db      	lsls	r3, r3, #31
 8001eac:	d4f6      	bmi.n	8001e9c <HAL_DMA_Abort+0x204>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001eae:	6832      	ldr	r2, [r6, #0]
 8001eb0:	4b80      	ldr	r3, [pc, #512]	; (80020b4 <HAL_DMA_Abort+0x41c>)
 8001eb2:	4981      	ldr	r1, [pc, #516]	; (80020b8 <HAL_DMA_Abort+0x420>)
 8001eb4:	4c81      	ldr	r4, [pc, #516]	; (80020bc <HAL_DMA_Abort+0x424>)
 8001eb6:	428a      	cmp	r2, r1
 8001eb8:	bf18      	it	ne
 8001eba:	429a      	cmpne	r2, r3
 8001ebc:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8001ec0:	487f      	ldr	r0, [pc, #508]	; (80020c0 <HAL_DMA_Abort+0x428>)
 8001ec2:	bf0c      	ite	eq
 8001ec4:	2301      	moveq	r3, #1
 8001ec6:	2300      	movne	r3, #0
 8001ec8:	42a2      	cmp	r2, r4
 8001eca:	bf08      	it	eq
 8001ecc:	f043 0301 	orreq.w	r3, r3, #1
 8001ed0:	3448      	adds	r4, #72	; 0x48
 8001ed2:	428a      	cmp	r2, r1
 8001ed4:	bf08      	it	eq
 8001ed6:	f043 0301 	orreq.w	r3, r3, #1
 8001eda:	3148      	adds	r1, #72	; 0x48
 8001edc:	4282      	cmp	r2, r0
 8001ede:	bf08      	it	eq
 8001ee0:	f043 0301 	orreq.w	r3, r3, #1
 8001ee4:	3048      	adds	r0, #72	; 0x48
 8001ee6:	42a2      	cmp	r2, r4
 8001ee8:	bf08      	it	eq
 8001eea:	f043 0301 	orreq.w	r3, r3, #1
 8001eee:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8001ef2:	428a      	cmp	r2, r1
 8001ef4:	bf08      	it	eq
 8001ef6:	f043 0301 	orreq.w	r3, r3, #1
 8001efa:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8001efe:	4282      	cmp	r2, r0
 8001f00:	bf08      	it	eq
 8001f02:	f043 0301 	orreq.w	r3, r3, #1
 8001f06:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	bf08      	it	eq
 8001f0e:	f043 0301 	orreq.w	r3, r3, #1
 8001f12:	3448      	adds	r4, #72	; 0x48
 8001f14:	428a      	cmp	r2, r1
 8001f16:	bf08      	it	eq
 8001f18:	f043 0301 	orreq.w	r3, r3, #1
 8001f1c:	3148      	adds	r1, #72	; 0x48
 8001f1e:	4282      	cmp	r2, r0
 8001f20:	bf08      	it	eq
 8001f22:	f043 0301 	orreq.w	r3, r3, #1
 8001f26:	3048      	adds	r0, #72	; 0x48
 8001f28:	42a2      	cmp	r2, r4
 8001f2a:	bf08      	it	eq
 8001f2c:	f043 0301 	orreq.w	r3, r3, #1
 8001f30:	3448      	adds	r4, #72	; 0x48
 8001f32:	428a      	cmp	r2, r1
 8001f34:	bf08      	it	eq
 8001f36:	f043 0301 	orreq.w	r3, r3, #1
 8001f3a:	6df1      	ldr	r1, [r6, #92]	; 0x5c
 8001f3c:	4282      	cmp	r2, r0
 8001f3e:	bf08      	it	eq
 8001f40:	f043 0301 	orreq.w	r3, r3, #1
 8001f44:	f001 011f 	and.w	r1, r1, #31
 8001f48:	6db0      	ldr	r0, [r6, #88]	; 0x58
 8001f4a:	42a2      	cmp	r2, r4
 8001f4c:	bf08      	it	eq
 8001f4e:	f043 0301 	orreq.w	r3, r3, #1
 8001f52:	b91b      	cbnz	r3, 8001f5c <HAL_DMA_Abort+0x2c4>
 8001f54:	4b5b      	ldr	r3, [pc, #364]	; (80020c4 <HAL_DMA_Abort+0x42c>)
 8001f56:	429a      	cmp	r2, r3
 8001f58:	f040 80a7 	bne.w	80020aa <HAL_DMA_Abort+0x412>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f5c:	233f      	movs	r3, #63	; 0x3f
 8001f5e:	fa03 f101 	lsl.w	r1, r3, r1
 8001f62:	6081      	str	r1, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f64:	6832      	ldr	r2, [r6, #0]
 8001f66:	4b53      	ldr	r3, [pc, #332]	; (80020b4 <HAL_DMA_Abort+0x41c>)
 8001f68:	4953      	ldr	r1, [pc, #332]	; (80020b8 <HAL_DMA_Abort+0x420>)
 8001f6a:	4c54      	ldr	r4, [pc, #336]	; (80020bc <HAL_DMA_Abort+0x424>)
 8001f6c:	428a      	cmp	r2, r1
 8001f6e:	bf18      	it	ne
 8001f70:	429a      	cmpne	r2, r3
 8001f72:	4855      	ldr	r0, [pc, #340]	; (80020c8 <HAL_DMA_Abort+0x430>)
 8001f74:	f101 0148 	add.w	r1, r1, #72	; 0x48
 8001f78:	bf0c      	ite	eq
 8001f7a:	2301      	moveq	r3, #1
 8001f7c:	2300      	movne	r3, #0
 8001f7e:	42a2      	cmp	r2, r4
 8001f80:	bf08      	it	eq
 8001f82:	f043 0301 	orreq.w	r3, r3, #1
 8001f86:	3448      	adds	r4, #72	; 0x48
 8001f88:	4282      	cmp	r2, r0
 8001f8a:	bf08      	it	eq
 8001f8c:	f043 0301 	orreq.w	r3, r3, #1
 8001f90:	3048      	adds	r0, #72	; 0x48
 8001f92:	428a      	cmp	r2, r1
 8001f94:	bf08      	it	eq
 8001f96:	f043 0301 	orreq.w	r3, r3, #1
 8001f9a:	3148      	adds	r1, #72	; 0x48
 8001f9c:	42a2      	cmp	r2, r4
 8001f9e:	bf08      	it	eq
 8001fa0:	f043 0301 	orreq.w	r3, r3, #1
 8001fa4:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8001fa8:	4282      	cmp	r2, r0
 8001faa:	bf08      	it	eq
 8001fac:	f043 0301 	orreq.w	r3, r3, #1
 8001fb0:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8001fb4:	428a      	cmp	r2, r1
 8001fb6:	bf08      	it	eq
 8001fb8:	f043 0301 	orreq.w	r3, r3, #1
 8001fbc:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8001fc0:	42a2      	cmp	r2, r4
 8001fc2:	bf08      	it	eq
 8001fc4:	f043 0301 	orreq.w	r3, r3, #1
 8001fc8:	3448      	adds	r4, #72	; 0x48
 8001fca:	4282      	cmp	r2, r0
 8001fcc:	bf08      	it	eq
 8001fce:	f043 0301 	orreq.w	r3, r3, #1
 8001fd2:	3048      	adds	r0, #72	; 0x48
 8001fd4:	428a      	cmp	r2, r1
 8001fd6:	bf08      	it	eq
 8001fd8:	f043 0301 	orreq.w	r3, r3, #1
 8001fdc:	3148      	adds	r1, #72	; 0x48
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	bf08      	it	eq
 8001fe2:	f043 0301 	orreq.w	r3, r3, #1
 8001fe6:	3448      	adds	r4, #72	; 0x48
 8001fe8:	4282      	cmp	r2, r0
 8001fea:	bf08      	it	eq
 8001fec:	f043 0301 	orreq.w	r3, r3, #1
 8001ff0:	3048      	adds	r0, #72	; 0x48
 8001ff2:	428a      	cmp	r2, r1
 8001ff4:	bf08      	it	eq
 8001ff6:	f043 0301 	orreq.w	r3, r3, #1
 8001ffa:	f101 51c0 	add.w	r1, r1, #402653184	; 0x18000000
 8001ffe:	42a2      	cmp	r2, r4
 8002000:	bf08      	it	eq
 8002002:	f043 0301 	orreq.w	r3, r3, #1
 8002006:	f501 419f 	add.w	r1, r1, #20352	; 0x4f80
 800200a:	4c30      	ldr	r4, [pc, #192]	; (80020cc <HAL_DMA_Abort+0x434>)
 800200c:	4282      	cmp	r2, r0
 800200e:	bf08      	it	eq
 8002010:	f043 0301 	orreq.w	r3, r3, #1
 8002014:	482e      	ldr	r0, [pc, #184]	; (80020d0 <HAL_DMA_Abort+0x438>)
 8002016:	428a      	cmp	r2, r1
 8002018:	bf08      	it	eq
 800201a:	f043 0301 	orreq.w	r3, r3, #1
 800201e:	313c      	adds	r1, #60	; 0x3c
 8002020:	42a2      	cmp	r2, r4
 8002022:	bf08      	it	eq
 8002024:	f043 0301 	orreq.w	r3, r3, #1
 8002028:	343c      	adds	r4, #60	; 0x3c
 800202a:	4282      	cmp	r2, r0
 800202c:	bf08      	it	eq
 800202e:	f043 0301 	orreq.w	r3, r3, #1
 8002032:	303c      	adds	r0, #60	; 0x3c
 8002034:	428a      	cmp	r2, r1
 8002036:	bf08      	it	eq
 8002038:	f043 0301 	orreq.w	r3, r3, #1
 800203c:	313c      	adds	r1, #60	; 0x3c
 800203e:	42a2      	cmp	r2, r4
 8002040:	bf08      	it	eq
 8002042:	f043 0301 	orreq.w	r3, r3, #1
 8002046:	4282      	cmp	r2, r0
 8002048:	bf08      	it	eq
 800204a:	f043 0301 	orreq.w	r3, r3, #1
 800204e:	428a      	cmp	r2, r1
 8002050:	bf08      	it	eq
 8002052:	f043 0301 	orreq.w	r3, r3, #1
 8002056:	b913      	cbnz	r3, 800205e <HAL_DMA_Abort+0x3c6>
 8002058:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <HAL_DMA_Abort+0x43c>)
 800205a:	429a      	cmp	r2, r3
 800205c:	d10b      	bne.n	8002076 <HAL_DMA_Abort+0x3de>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800205e:	e9d6 3219 	ldrd	r3, r2, [r6, #100]	; 0x64
 8002062:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8002064:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 8002066:	b133      	cbz	r3, 8002076 <HAL_DMA_Abort+0x3de>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800206e:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002070:	e9d6 321c 	ldrd	r3, r2, [r6, #112]	; 0x70
 8002074:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8002076:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8002078:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 800207a:	f886 0034 	strb.w	r0, [r6, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800207e:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
}
 8002082:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002084:	2001      	movs	r0, #1
}
 8002086:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002088:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 800208a:	2200      	movs	r2, #0
        hdma->State = HAL_DMA_STATE_ERROR;
 800208c:	2303      	movs	r3, #3
        return HAL_ERROR;
 800208e:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002090:	6571      	str	r1, [r6, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8002092:	f886 2034 	strb.w	r2, [r6, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8002096:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
}
 800209a:	bd70      	pop	{r4, r5, r6, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800209c:	6813      	ldr	r3, [r2, #0]
 800209e:	f023 030e 	bic.w	r3, r3, #14
 80020a2:	6013      	str	r3, [r2, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80020a4:	6832      	ldr	r2, [r6, #0]
 80020a6:	4615      	mov	r5, r2
 80020a8:	e666      	b.n	8001d78 <HAL_DMA_Abort+0xe0>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80020aa:	2301      	movs	r3, #1
 80020ac:	fa03 f101 	lsl.w	r1, r3, r1
 80020b0:	6041      	str	r1, [r0, #4]
 80020b2:	e757      	b.n	8001f64 <HAL_DMA_Abort+0x2cc>
 80020b4:	40020010 	.word	0x40020010
 80020b8:	40020028 	.word	0x40020028
 80020bc:	40020040 	.word	0x40020040
 80020c0:	40020070 	.word	0x40020070
 80020c4:	400204b8 	.word	0x400204b8
 80020c8:	40020058 	.word	0x40020058
 80020cc:	5802541c 	.word	0x5802541c
 80020d0:	58025430 	.word	0x58025430
 80020d4:	58025494 	.word	0x58025494

080020d8 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 80020d8:	2800      	cmp	r0, #0
 80020da:	d06a      	beq.n	80021b2 <HAL_DMA_Abort_IT+0xda>
{
 80020dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020e0:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 80020e4:	4603      	mov	r3, r0
 80020e6:	2a02      	cmp	r2, #2
 80020e8:	d004      	beq.n	80020f4 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ea:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 80020ec:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ee:	655a      	str	r2, [r3, #84]	; 0x54
}
 80020f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020f4:	6802      	ldr	r2, [r0, #0]
 80020f6:	4986      	ldr	r1, [pc, #536]	; (8002310 <HAL_DMA_Abort_IT+0x238>)
 80020f8:	428a      	cmp	r2, r1
 80020fa:	d050      	beq.n	800219e <HAL_DMA_Abort_IT+0xc6>
 80020fc:	4885      	ldr	r0, [pc, #532]	; (8002314 <HAL_DMA_Abort_IT+0x23c>)
 80020fe:	4282      	cmp	r2, r0
 8002100:	d04d      	beq.n	800219e <HAL_DMA_Abort_IT+0xc6>
 8002102:	f8df 8228 	ldr.w	r8, [pc, #552]	; 800232c <HAL_DMA_Abort_IT+0x254>
 8002106:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8002328 <HAL_DMA_Abort_IT+0x250>
 800210a:	f8df e230 	ldr.w	lr, [pc, #560]	; 800233c <HAL_DMA_Abort_IT+0x264>
 800210e:	454a      	cmp	r2, r9
 8002110:	bf18      	it	ne
 8002112:	4542      	cmpne	r2, r8
 8002114:	f8df c228 	ldr.w	ip, [pc, #552]	; 8002340 <HAL_DMA_Abort_IT+0x268>
 8002118:	4f7f      	ldr	r7, [pc, #508]	; (8002318 <HAL_DMA_Abort_IT+0x240>)
 800211a:	bf0c      	ite	eq
 800211c:	f04f 0a01 	moveq.w	sl, #1
 8002120:	f04f 0a00 	movne.w	sl, #0
 8002124:	4c7d      	ldr	r4, [pc, #500]	; (800231c <HAL_DMA_Abort_IT+0x244>)
 8002126:	4572      	cmp	r2, lr
 8002128:	bf08      	it	eq
 800212a:	f04a 0a01 	orreq.w	sl, sl, #1
 800212e:	f8df b214 	ldr.w	fp, [pc, #532]	; 8002344 <HAL_DMA_Abort_IT+0x26c>
 8002132:	4e7b      	ldr	r6, [pc, #492]	; (8002320 <HAL_DMA_Abort_IT+0x248>)
 8002134:	4562      	cmp	r2, ip
 8002136:	bf08      	it	eq
 8002138:	f04a 0a01 	orreq.w	sl, sl, #1
 800213c:	4d79      	ldr	r5, [pc, #484]	; (8002324 <HAL_DMA_Abort_IT+0x24c>)
 800213e:	42ba      	cmp	r2, r7
 8002140:	bf08      	it	eq
 8002142:	f04a 0a01 	orreq.w	sl, sl, #1
 8002146:	42a2      	cmp	r2, r4
 8002148:	bf08      	it	eq
 800214a:	f04a 0a01 	orreq.w	sl, sl, #1
 800214e:	f504 7456 	add.w	r4, r4, #856	; 0x358
 8002152:	42a2      	cmp	r2, r4
 8002154:	bf08      	it	eq
 8002156:	f04a 0a01 	orreq.w	sl, sl, #1
 800215a:	3418      	adds	r4, #24
 800215c:	42a2      	cmp	r2, r4
 800215e:	bf08      	it	eq
 8002160:	f04a 0a01 	orreq.w	sl, sl, #1
 8002164:	3418      	adds	r4, #24
 8002166:	42a2      	cmp	r2, r4
 8002168:	bf08      	it	eq
 800216a:	f04a 0a01 	orreq.w	sl, sl, #1
 800216e:	3460      	adds	r4, #96	; 0x60
 8002170:	455a      	cmp	r2, fp
 8002172:	bf08      	it	eq
 8002174:	f04a 0a01 	orreq.w	sl, sl, #1
 8002178:	42b2      	cmp	r2, r6
 800217a:	bf08      	it	eq
 800217c:	f04a 0a01 	orreq.w	sl, sl, #1
 8002180:	42aa      	cmp	r2, r5
 8002182:	bf08      	it	eq
 8002184:	f04a 0a01 	orreq.w	sl, sl, #1
 8002188:	42a2      	cmp	r2, r4
 800218a:	bf08      	it	eq
 800218c:	f04a 0a01 	orreq.w	sl, sl, #1
 8002190:	f1ba 0f00 	cmp.w	sl, #0
 8002194:	d103      	bne.n	800219e <HAL_DMA_Abort_IT+0xc6>
 8002196:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 8002348 <HAL_DMA_Abort_IT+0x270>
 800219a:	4552      	cmp	r2, sl
 800219c:	d10b      	bne.n	80021b6 <HAL_DMA_Abort_IT+0xde>
      hdma->State = HAL_DMA_STATE_ABORT;
 800219e:	2104      	movs	r1, #4
  return HAL_OK;
 80021a0:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 80021a2:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80021a6:	6813      	ldr	r3, [r2, #0]
 80021a8:	f023 0301 	bic.w	r3, r3, #1
 80021ac:	6013      	str	r3, [r2, #0]
}
 80021ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 80021b2:	2001      	movs	r0, #1
}
 80021b4:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80021b6:	6814      	ldr	r4, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021b8:	4856      	ldr	r0, [pc, #344]	; (8002314 <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80021ba:	f024 040e 	bic.w	r4, r4, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021be:	4d5a      	ldr	r5, [pc, #360]	; (8002328 <HAL_DMA_Abort_IT+0x250>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80021c0:	6014      	str	r4, [r2, #0]
      __HAL_DMA_DISABLE(hdma);
 80021c2:	681a      	ldr	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021c4:	4c59      	ldr	r4, [pc, #356]	; (800232c <HAL_DMA_Abort_IT+0x254>)
      __HAL_DMA_DISABLE(hdma);
 80021c6:	6811      	ldr	r1, [r2, #0]
 80021c8:	f021 0101 	bic.w	r1, r1, #1
 80021cc:	6011      	str	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021ce:	4a50      	ldr	r2, [pc, #320]	; (8002310 <HAL_DMA_Abort_IT+0x238>)
 80021d0:	6819      	ldr	r1, [r3, #0]
 80021d2:	4281      	cmp	r1, r0
 80021d4:	bf18      	it	ne
 80021d6:	4291      	cmpne	r1, r2
 80021d8:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80021dc:	bf0c      	ite	eq
 80021de:	2201      	moveq	r2, #1
 80021e0:	2200      	movne	r2, #0
 80021e2:	42a9      	cmp	r1, r5
 80021e4:	bf08      	it	eq
 80021e6:	f042 0201 	orreq.w	r2, r2, #1
 80021ea:	3548      	adds	r5, #72	; 0x48
 80021ec:	42a1      	cmp	r1, r4
 80021ee:	bf08      	it	eq
 80021f0:	f042 0201 	orreq.w	r2, r2, #1
 80021f4:	3448      	adds	r4, #72	; 0x48
 80021f6:	4281      	cmp	r1, r0
 80021f8:	bf08      	it	eq
 80021fa:	f042 0201 	orreq.w	r2, r2, #1
 80021fe:	3048      	adds	r0, #72	; 0x48
 8002200:	42a9      	cmp	r1, r5
 8002202:	bf08      	it	eq
 8002204:	f042 0201 	orreq.w	r2, r2, #1
 8002208:	f505 7562 	add.w	r5, r5, #904	; 0x388
 800220c:	42a1      	cmp	r1, r4
 800220e:	bf08      	it	eq
 8002210:	f042 0201 	orreq.w	r2, r2, #1
 8002214:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8002218:	4281      	cmp	r1, r0
 800221a:	bf08      	it	eq
 800221c:	f042 0201 	orreq.w	r2, r2, #1
 8002220:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8002224:	42a9      	cmp	r1, r5
 8002226:	bf08      	it	eq
 8002228:	f042 0201 	orreq.w	r2, r2, #1
 800222c:	3548      	adds	r5, #72	; 0x48
 800222e:	42a1      	cmp	r1, r4
 8002230:	bf08      	it	eq
 8002232:	f042 0201 	orreq.w	r2, r2, #1
 8002236:	3448      	adds	r4, #72	; 0x48
 8002238:	4281      	cmp	r1, r0
 800223a:	bf08      	it	eq
 800223c:	f042 0201 	orreq.w	r2, r2, #1
 8002240:	3048      	adds	r0, #72	; 0x48
 8002242:	42a9      	cmp	r1, r5
 8002244:	bf08      	it	eq
 8002246:	f042 0201 	orreq.w	r2, r2, #1
 800224a:	3548      	adds	r5, #72	; 0x48
 800224c:	42a1      	cmp	r1, r4
 800224e:	bf08      	it	eq
 8002250:	f042 0201 	orreq.w	r2, r2, #1
 8002254:	3448      	adds	r4, #72	; 0x48
 8002256:	4281      	cmp	r1, r0
 8002258:	bf08      	it	eq
 800225a:	f042 0201 	orreq.w	r2, r2, #1
 800225e:	f100 50c0 	add.w	r0, r0, #402653184	; 0x18000000
 8002262:	42a9      	cmp	r1, r5
 8002264:	bf08      	it	eq
 8002266:	f042 0201 	orreq.w	r2, r2, #1
 800226a:	f500 409f 	add.w	r0, r0, #20352	; 0x4f80
 800226e:	4d30      	ldr	r5, [pc, #192]	; (8002330 <HAL_DMA_Abort_IT+0x258>)
 8002270:	42a1      	cmp	r1, r4
 8002272:	bf08      	it	eq
 8002274:	f042 0201 	orreq.w	r2, r2, #1
 8002278:	4c2e      	ldr	r4, [pc, #184]	; (8002334 <HAL_DMA_Abort_IT+0x25c>)
 800227a:	4281      	cmp	r1, r0
 800227c:	bf08      	it	eq
 800227e:	f042 0201 	orreq.w	r2, r2, #1
 8002282:	303c      	adds	r0, #60	; 0x3c
 8002284:	42a9      	cmp	r1, r5
 8002286:	bf08      	it	eq
 8002288:	f042 0201 	orreq.w	r2, r2, #1
 800228c:	353c      	adds	r5, #60	; 0x3c
 800228e:	42a1      	cmp	r1, r4
 8002290:	bf08      	it	eq
 8002292:	f042 0201 	orreq.w	r2, r2, #1
 8002296:	343c      	adds	r4, #60	; 0x3c
 8002298:	4281      	cmp	r1, r0
 800229a:	bf08      	it	eq
 800229c:	f042 0201 	orreq.w	r2, r2, #1
 80022a0:	303c      	adds	r0, #60	; 0x3c
 80022a2:	42a9      	cmp	r1, r5
 80022a4:	bf08      	it	eq
 80022a6:	f042 0201 	orreq.w	r2, r2, #1
 80022aa:	42a1      	cmp	r1, r4
 80022ac:	bf08      	it	eq
 80022ae:	f042 0201 	orreq.w	r2, r2, #1
 80022b2:	4281      	cmp	r1, r0
 80022b4:	bf08      	it	eq
 80022b6:	f042 0201 	orreq.w	r2, r2, #1
 80022ba:	b912      	cbnz	r2, 80022c2 <HAL_DMA_Abort_IT+0x1ea>
 80022bc:	4a1e      	ldr	r2, [pc, #120]	; (8002338 <HAL_DMA_Abort_IT+0x260>)
 80022be:	4291      	cmp	r1, r2
 80022c0:	d117      	bne.n	80022f2 <HAL_DMA_Abort_IT+0x21a>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022c2:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022c4:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022c6:	6801      	ldr	r1, [r0, #0]
 80022c8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80022cc:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ce:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022d2:	f001 011f 	and.w	r1, r1, #31
 80022d6:	408a      	lsls	r2, r1
 80022d8:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022da:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
 80022de:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80022e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80022e2:	b132      	cbz	r2, 80022f2 <HAL_DMA_Abort_IT+0x21a>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022e4:	6811      	ldr	r1, [r2, #0]
 80022e6:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80022ea:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022ec:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
 80022f0:	6051      	str	r1, [r2, #4]
      __HAL_UNLOCK(hdma);
 80022f2:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 80022f4:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 80022f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 80022f8:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80022fc:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8002300:	b11a      	cbz	r2, 800230a <HAL_DMA_Abort_IT+0x232>
 8002302:	4618      	mov	r0, r3
        hdma->XferAbortCallback(hdma);
 8002304:	4790      	blx	r2
  return HAL_OK;
 8002306:	4620      	mov	r0, r4
 8002308:	e6f2      	b.n	80020f0 <HAL_DMA_Abort_IT+0x18>
 800230a:	4610      	mov	r0, r2
 800230c:	e6f0      	b.n	80020f0 <HAL_DMA_Abort_IT+0x18>
 800230e:	bf00      	nop
 8002310:	40020010 	.word	0x40020010
 8002314:	40020028 	.word	0x40020028
 8002318:	400200a0 	.word	0x400200a0
 800231c:	400200b8 	.word	0x400200b8
 8002320:	40020470 	.word	0x40020470
 8002324:	40020488 	.word	0x40020488
 8002328:	40020040 	.word	0x40020040
 800232c:	40020058 	.word	0x40020058
 8002330:	5802541c 	.word	0x5802541c
 8002334:	58025430 	.word	0x58025430
 8002338:	58025494 	.word	0x58025494
 800233c:	40020070 	.word	0x40020070
 8002340:	40020088 	.word	0x40020088
 8002344:	40020458 	.word	0x40020458
 8002348:	400204b8 	.word	0x400204b8

0800234c <HAL_DMA_IRQHandler>:
{
 800234c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800234e:	4ba5      	ldr	r3, [pc, #660]	; (80025e4 <HAL_DMA_IRQHandler+0x298>)
{
 8002350:	b083      	sub	sp, #12
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002352:	6804      	ldr	r4, [r0, #0]
  __IO uint32_t count = 0U;
 8002354:	2100      	movs	r1, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8002356:	4aa4      	ldr	r2, [pc, #656]	; (80025e8 <HAL_DMA_IRQHandler+0x29c>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002358:	6d85      	ldr	r5, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800235a:	429c      	cmp	r4, r3
  __IO uint32_t count = 0U;
 800235c:	9101      	str	r1, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800235e:	6816      	ldr	r6, [r2, #0]
  tmpisr_dma  = regs_dma->ISR;
 8002360:	682f      	ldr	r7, [r5, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8002362:	682a      	ldr	r2, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002364:	d04d      	beq.n	8002402 <HAL_DMA_IRQHandler+0xb6>
 8002366:	3318      	adds	r3, #24
 8002368:	429c      	cmp	r4, r3
 800236a:	d04a      	beq.n	8002402 <HAL_DMA_IRQHandler+0xb6>
 800236c:	3330      	adds	r3, #48	; 0x30
 800236e:	f8df c284 	ldr.w	ip, [pc, #644]	; 80025f4 <HAL_DMA_IRQHandler+0x2a8>
 8002372:	499e      	ldr	r1, [pc, #632]	; (80025ec <HAL_DMA_IRQHandler+0x2a0>)
 8002374:	4564      	cmp	r4, ip
 8002376:	bf18      	it	ne
 8002378:	429c      	cmpne	r4, r3
 800237a:	f10c 0c48 	add.w	ip, ip, #72	; 0x48
 800237e:	bf0c      	ite	eq
 8002380:	2301      	moveq	r3, #1
 8002382:	2300      	movne	r3, #0
 8002384:	428c      	cmp	r4, r1
 8002386:	bf08      	it	eq
 8002388:	f043 0301 	orreq.w	r3, r3, #1
 800238c:	3130      	adds	r1, #48	; 0x30
 800238e:	4564      	cmp	r4, ip
 8002390:	bf08      	it	eq
 8002392:	f043 0301 	orreq.w	r3, r3, #1
 8002396:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800239a:	428c      	cmp	r4, r1
 800239c:	bf08      	it	eq
 800239e:	f043 0301 	orreq.w	r3, r3, #1
 80023a2:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80023a6:	4564      	cmp	r4, ip
 80023a8:	bf08      	it	eq
 80023aa:	f043 0301 	orreq.w	r3, r3, #1
 80023ae:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 80023b2:	428c      	cmp	r4, r1
 80023b4:	bf08      	it	eq
 80023b6:	f043 0301 	orreq.w	r3, r3, #1
 80023ba:	3130      	adds	r1, #48	; 0x30
 80023bc:	4564      	cmp	r4, ip
 80023be:	bf08      	it	eq
 80023c0:	f043 0301 	orreq.w	r3, r3, #1
 80023c4:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80023c8:	428c      	cmp	r4, r1
 80023ca:	bf08      	it	eq
 80023cc:	f043 0301 	orreq.w	r3, r3, #1
 80023d0:	3130      	adds	r1, #48	; 0x30
 80023d2:	4564      	cmp	r4, ip
 80023d4:	bf08      	it	eq
 80023d6:	f043 0301 	orreq.w	r3, r3, #1
 80023da:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80023de:	428c      	cmp	r4, r1
 80023e0:	bf08      	it	eq
 80023e2:	f043 0301 	orreq.w	r3, r3, #1
 80023e6:	3130      	adds	r1, #48	; 0x30
 80023e8:	4564      	cmp	r4, ip
 80023ea:	bf08      	it	eq
 80023ec:	f043 0301 	orreq.w	r3, r3, #1
 80023f0:	428c      	cmp	r4, r1
 80023f2:	bf08      	it	eq
 80023f4:	f043 0301 	orreq.w	r3, r3, #1
 80023f8:	b91b      	cbnz	r3, 8002402 <HAL_DMA_IRQHandler+0xb6>
 80023fa:	4b7d      	ldr	r3, [pc, #500]	; (80025f0 <HAL_DMA_IRQHandler+0x2a4>)
 80023fc:	429c      	cmp	r4, r3
 80023fe:	f040 821e 	bne.w	800283e <HAL_DMA_IRQHandler+0x4f2>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002402:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8002404:	2308      	movs	r3, #8
 8002406:	f001 021f 	and.w	r2, r1, #31
 800240a:	4093      	lsls	r3, r2
 800240c:	423b      	tst	r3, r7
 800240e:	f040 81fb 	bne.w	8002808 <HAL_DMA_IRQHandler+0x4bc>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002412:	fa27 f302 	lsr.w	r3, r7, r2
 8002416:	07dc      	lsls	r4, r3, #31
 8002418:	d563      	bpl.n	80024e2 <HAL_DMA_IRQHandler+0x196>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800241a:	6801      	ldr	r1, [r0, #0]
 800241c:	4b71      	ldr	r3, [pc, #452]	; (80025e4 <HAL_DMA_IRQHandler+0x298>)
 800241e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80025f8 <HAL_DMA_IRQHandler+0x2ac>
 8002422:	4c74      	ldr	r4, [pc, #464]	; (80025f4 <HAL_DMA_IRQHandler+0x2a8>)
 8002424:	4561      	cmp	r1, ip
 8002426:	bf18      	it	ne
 8002428:	4299      	cmpne	r1, r3
 800242a:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800242e:	bf0c      	ite	eq
 8002430:	2301      	moveq	r3, #1
 8002432:	2300      	movne	r3, #0
 8002434:	42a1      	cmp	r1, r4
 8002436:	bf08      	it	eq
 8002438:	f043 0301 	orreq.w	r3, r3, #1
 800243c:	3430      	adds	r4, #48	; 0x30
 800243e:	4561      	cmp	r1, ip
 8002440:	bf08      	it	eq
 8002442:	f043 0301 	orreq.w	r3, r3, #1
 8002446:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800244a:	42a1      	cmp	r1, r4
 800244c:	bf08      	it	eq
 800244e:	f043 0301 	orreq.w	r3, r3, #1
 8002452:	3430      	adds	r4, #48	; 0x30
 8002454:	4561      	cmp	r1, ip
 8002456:	bf08      	it	eq
 8002458:	f043 0301 	orreq.w	r3, r3, #1
 800245c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8002460:	42a1      	cmp	r1, r4
 8002462:	bf08      	it	eq
 8002464:	f043 0301 	orreq.w	r3, r3, #1
 8002468:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800246c:	4561      	cmp	r1, ip
 800246e:	bf08      	it	eq
 8002470:	f043 0301 	orreq.w	r3, r3, #1
 8002474:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 8002478:	42a1      	cmp	r1, r4
 800247a:	bf08      	it	eq
 800247c:	f043 0301 	orreq.w	r3, r3, #1
 8002480:	3430      	adds	r4, #48	; 0x30
 8002482:	4561      	cmp	r1, ip
 8002484:	bf08      	it	eq
 8002486:	f043 0301 	orreq.w	r3, r3, #1
 800248a:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800248e:	42a1      	cmp	r1, r4
 8002490:	bf08      	it	eq
 8002492:	f043 0301 	orreq.w	r3, r3, #1
 8002496:	3430      	adds	r4, #48	; 0x30
 8002498:	4561      	cmp	r1, ip
 800249a:	bf08      	it	eq
 800249c:	f043 0301 	orreq.w	r3, r3, #1
 80024a0:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80024a4:	42a1      	cmp	r1, r4
 80024a6:	bf08      	it	eq
 80024a8:	f043 0301 	orreq.w	r3, r3, #1
 80024ac:	3430      	adds	r4, #48	; 0x30
 80024ae:	4561      	cmp	r1, ip
 80024b0:	bf08      	it	eq
 80024b2:	f043 0301 	orreq.w	r3, r3, #1
 80024b6:	42a1      	cmp	r1, r4
 80024b8:	bf08      	it	eq
 80024ba:	f043 0301 	orreq.w	r3, r3, #1
 80024be:	b91b      	cbnz	r3, 80024c8 <HAL_DMA_IRQHandler+0x17c>
 80024c0:	4b4b      	ldr	r3, [pc, #300]	; (80025f0 <HAL_DMA_IRQHandler+0x2a4>)
 80024c2:	4299      	cmp	r1, r3
 80024c4:	f040 8285 	bne.w	80029d2 <HAL_DMA_IRQHandler+0x686>
 80024c8:	694b      	ldr	r3, [r1, #20]
 80024ca:	0619      	lsls	r1, r3, #24
 80024cc:	d509      	bpl.n	80024e2 <HAL_DMA_IRQHandler+0x196>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80024ce:	2101      	movs	r1, #1
 80024d0:	4091      	lsls	r1, r2
 80024d2:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024d4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80024d6:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80024d8:	f043 0302 	orr.w	r3, r3, #2
 80024dc:	f001 021f 	and.w	r2, r1, #31
 80024e0:	6543      	str	r3, [r0, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80024e2:	2404      	movs	r4, #4
 80024e4:	4094      	lsls	r4, r2
 80024e6:	423c      	tst	r4, r7
 80024e8:	d067      	beq.n	80025ba <HAL_DMA_IRQHandler+0x26e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80024ea:	6801      	ldr	r1, [r0, #0]
 80024ec:	4b3d      	ldr	r3, [pc, #244]	; (80025e4 <HAL_DMA_IRQHandler+0x298>)
 80024ee:	f8df e108 	ldr.w	lr, [pc, #264]	; 80025f8 <HAL_DMA_IRQHandler+0x2ac>
 80024f2:	f8df c100 	ldr.w	ip, [pc, #256]	; 80025f4 <HAL_DMA_IRQHandler+0x2a8>
 80024f6:	4571      	cmp	r1, lr
 80024f8:	bf18      	it	ne
 80024fa:	4299      	cmpne	r1, r3
 80024fc:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8002500:	bf0c      	ite	eq
 8002502:	2301      	moveq	r3, #1
 8002504:	2300      	movne	r3, #0
 8002506:	4561      	cmp	r1, ip
 8002508:	bf08      	it	eq
 800250a:	f043 0301 	orreq.w	r3, r3, #1
 800250e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8002512:	4571      	cmp	r1, lr
 8002514:	bf08      	it	eq
 8002516:	f043 0301 	orreq.w	r3, r3, #1
 800251a:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800251e:	4561      	cmp	r1, ip
 8002520:	bf08      	it	eq
 8002522:	f043 0301 	orreq.w	r3, r3, #1
 8002526:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800252a:	4571      	cmp	r1, lr
 800252c:	bf08      	it	eq
 800252e:	f043 0301 	orreq.w	r3, r3, #1
 8002532:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8002536:	4561      	cmp	r1, ip
 8002538:	bf08      	it	eq
 800253a:	f043 0301 	orreq.w	r3, r3, #1
 800253e:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 8002542:	4571      	cmp	r1, lr
 8002544:	bf08      	it	eq
 8002546:	f043 0301 	orreq.w	r3, r3, #1
 800254a:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 800254e:	4561      	cmp	r1, ip
 8002550:	bf08      	it	eq
 8002552:	f043 0301 	orreq.w	r3, r3, #1
 8002556:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800255a:	4571      	cmp	r1, lr
 800255c:	bf08      	it	eq
 800255e:	f043 0301 	orreq.w	r3, r3, #1
 8002562:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8002566:	4561      	cmp	r1, ip
 8002568:	bf08      	it	eq
 800256a:	f043 0301 	orreq.w	r3, r3, #1
 800256e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8002572:	4571      	cmp	r1, lr
 8002574:	bf08      	it	eq
 8002576:	f043 0301 	orreq.w	r3, r3, #1
 800257a:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800257e:	4561      	cmp	r1, ip
 8002580:	bf08      	it	eq
 8002582:	f043 0301 	orreq.w	r3, r3, #1
 8002586:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800258a:	4571      	cmp	r1, lr
 800258c:	bf08      	it	eq
 800258e:	f043 0301 	orreq.w	r3, r3, #1
 8002592:	4561      	cmp	r1, ip
 8002594:	bf08      	it	eq
 8002596:	f043 0301 	orreq.w	r3, r3, #1
 800259a:	b91b      	cbnz	r3, 80025a4 <HAL_DMA_IRQHandler+0x258>
 800259c:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <HAL_DMA_IRQHandler+0x2a4>)
 800259e:	4299      	cmp	r1, r3
 80025a0:	f040 8215 	bne.w	80029ce <HAL_DMA_IRQHandler+0x682>
 80025a4:	680b      	ldr	r3, [r1, #0]
 80025a6:	079b      	lsls	r3, r3, #30
 80025a8:	d507      	bpl.n	80025ba <HAL_DMA_IRQHandler+0x26e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80025aa:	60ac      	str	r4, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025ac:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80025ae:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80025b0:	f043 0304 	orr.w	r3, r3, #4
 80025b4:	f001 021f 	and.w	r2, r1, #31
 80025b8:	6543      	str	r3, [r0, #84]	; 0x54
 80025ba:	4604      	mov	r4, r0
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80025bc:	2010      	movs	r0, #16
 80025be:	4090      	lsls	r0, r2
 80025c0:	4238      	tst	r0, r7
 80025c2:	f000 8086 	beq.w	80026d2 <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80025c6:	6821      	ldr	r1, [r4, #0]
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_DMA_IRQHandler+0x298>)
 80025ca:	f8df e02c 	ldr.w	lr, [pc, #44]	; 80025f8 <HAL_DMA_IRQHandler+0x2ac>
 80025ce:	f8df c024 	ldr.w	ip, [pc, #36]	; 80025f4 <HAL_DMA_IRQHandler+0x2a8>
 80025d2:	4571      	cmp	r1, lr
 80025d4:	bf18      	it	ne
 80025d6:	4299      	cmpne	r1, r3
 80025d8:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80025dc:	bf08      	it	eq
 80025de:	2301      	moveq	r3, #1
 80025e0:	e00c      	b.n	80025fc <HAL_DMA_IRQHandler+0x2b0>
 80025e2:	bf00      	nop
 80025e4:	40020010 	.word	0x40020010
 80025e8:	20000018 	.word	0x20000018
 80025ec:	40020070 	.word	0x40020070
 80025f0:	400204b8 	.word	0x400204b8
 80025f4:	40020040 	.word	0x40020040
 80025f8:	40020028 	.word	0x40020028
 80025fc:	bf18      	it	ne
 80025fe:	2300      	movne	r3, #0
 8002600:	4561      	cmp	r1, ip
 8002602:	bf08      	it	eq
 8002604:	f043 0301 	orreq.w	r3, r3, #1
 8002608:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800260c:	4571      	cmp	r1, lr
 800260e:	bf08      	it	eq
 8002610:	f043 0301 	orreq.w	r3, r3, #1
 8002614:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8002618:	4561      	cmp	r1, ip
 800261a:	bf08      	it	eq
 800261c:	f043 0301 	orreq.w	r3, r3, #1
 8002620:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8002624:	4571      	cmp	r1, lr
 8002626:	bf08      	it	eq
 8002628:	f043 0301 	orreq.w	r3, r3, #1
 800262c:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8002630:	4561      	cmp	r1, ip
 8002632:	bf08      	it	eq
 8002634:	f043 0301 	orreq.w	r3, r3, #1
 8002638:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 800263c:	4571      	cmp	r1, lr
 800263e:	bf08      	it	eq
 8002640:	f043 0301 	orreq.w	r3, r3, #1
 8002644:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 8002648:	4561      	cmp	r1, ip
 800264a:	bf08      	it	eq
 800264c:	f043 0301 	orreq.w	r3, r3, #1
 8002650:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8002654:	4571      	cmp	r1, lr
 8002656:	bf08      	it	eq
 8002658:	f043 0301 	orreq.w	r3, r3, #1
 800265c:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8002660:	4561      	cmp	r1, ip
 8002662:	bf08      	it	eq
 8002664:	f043 0301 	orreq.w	r3, r3, #1
 8002668:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800266c:	4571      	cmp	r1, lr
 800266e:	bf08      	it	eq
 8002670:	f043 0301 	orreq.w	r3, r3, #1
 8002674:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8002678:	4561      	cmp	r1, ip
 800267a:	bf08      	it	eq
 800267c:	f043 0301 	orreq.w	r3, r3, #1
 8002680:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8002684:	4571      	cmp	r1, lr
 8002686:	bf08      	it	eq
 8002688:	f043 0301 	orreq.w	r3, r3, #1
 800268c:	4561      	cmp	r1, ip
 800268e:	bf08      	it	eq
 8002690:	f043 0301 	orreq.w	r3, r3, #1
 8002694:	b91b      	cbnz	r3, 800269e <HAL_DMA_IRQHandler+0x352>
 8002696:	4b9f      	ldr	r3, [pc, #636]	; (8002914 <HAL_DMA_IRQHandler+0x5c8>)
 8002698:	4299      	cmp	r1, r3
 800269a:	f040 8194 	bne.w	80029c6 <HAL_DMA_IRQHandler+0x67a>
 800269e:	680b      	ldr	r3, [r1, #0]
 80026a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80026a4:	b1ab      	cbz	r3, 80026d2 <HAL_DMA_IRQHandler+0x386>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80026a6:	60a8      	str	r0, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80026a8:	6823      	ldr	r3, [r4, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	0350      	lsls	r0, r2, #13
 80026ae:	f100 8102 	bmi.w	80028b6 <HAL_DMA_IRQHandler+0x56a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	05d2      	lsls	r2, r2, #23
 80026b6:	d403      	bmi.n	80026c0 <HAL_DMA_IRQHandler+0x374>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	f022 0208 	bic.w	r2, r2, #8
 80026be:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80026c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 80ff 	beq.w	80028c6 <HAL_DMA_IRQHandler+0x57a>
            hdma->XferHalfCpltCallback(hdma);
 80026c8:	4620      	mov	r0, r4
 80026ca:	4798      	blx	r3
 80026cc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80026ce:	f001 021f 	and.w	r2, r1, #31
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80026d2:	2120      	movs	r1, #32
 80026d4:	4091      	lsls	r1, r2
 80026d6:	4239      	tst	r1, r7
 80026d8:	d068      	beq.n	80027ac <HAL_DMA_IRQHandler+0x460>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80026da:	6822      	ldr	r2, [r4, #0]
 80026dc:	4b8e      	ldr	r3, [pc, #568]	; (8002918 <HAL_DMA_IRQHandler+0x5cc>)
 80026de:	4f8f      	ldr	r7, [pc, #572]	; (800291c <HAL_DMA_IRQHandler+0x5d0>)
 80026e0:	488f      	ldr	r0, [pc, #572]	; (8002920 <HAL_DMA_IRQHandler+0x5d4>)
 80026e2:	42ba      	cmp	r2, r7
 80026e4:	bf18      	it	ne
 80026e6:	429a      	cmpne	r2, r3
 80026e8:	f107 0730 	add.w	r7, r7, #48	; 0x30
 80026ec:	bf0c      	ite	eq
 80026ee:	2301      	moveq	r3, #1
 80026f0:	2300      	movne	r3, #0
 80026f2:	4282      	cmp	r2, r0
 80026f4:	bf08      	it	eq
 80026f6:	f043 0301 	orreq.w	r3, r3, #1
 80026fa:	3030      	adds	r0, #48	; 0x30
 80026fc:	42ba      	cmp	r2, r7
 80026fe:	bf08      	it	eq
 8002700:	f043 0301 	orreq.w	r3, r3, #1
 8002704:	3730      	adds	r7, #48	; 0x30
 8002706:	4282      	cmp	r2, r0
 8002708:	bf08      	it	eq
 800270a:	f043 0301 	orreq.w	r3, r3, #1
 800270e:	3030      	adds	r0, #48	; 0x30
 8002710:	42ba      	cmp	r2, r7
 8002712:	bf08      	it	eq
 8002714:	f043 0301 	orreq.w	r3, r3, #1
 8002718:	3730      	adds	r7, #48	; 0x30
 800271a:	4282      	cmp	r2, r0
 800271c:	bf08      	it	eq
 800271e:	f043 0301 	orreq.w	r3, r3, #1
 8002722:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8002726:	42ba      	cmp	r2, r7
 8002728:	bf08      	it	eq
 800272a:	f043 0301 	orreq.w	r3, r3, #1
 800272e:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8002732:	4282      	cmp	r2, r0
 8002734:	bf08      	it	eq
 8002736:	f043 0301 	orreq.w	r3, r3, #1
 800273a:	3030      	adds	r0, #48	; 0x30
 800273c:	42ba      	cmp	r2, r7
 800273e:	bf08      	it	eq
 8002740:	f043 0301 	orreq.w	r3, r3, #1
 8002744:	3730      	adds	r7, #48	; 0x30
 8002746:	4282      	cmp	r2, r0
 8002748:	bf08      	it	eq
 800274a:	f043 0301 	orreq.w	r3, r3, #1
 800274e:	3030      	adds	r0, #48	; 0x30
 8002750:	42ba      	cmp	r2, r7
 8002752:	bf08      	it	eq
 8002754:	f043 0301 	orreq.w	r3, r3, #1
 8002758:	3730      	adds	r7, #48	; 0x30
 800275a:	4282      	cmp	r2, r0
 800275c:	bf08      	it	eq
 800275e:	f043 0301 	orreq.w	r3, r3, #1
 8002762:	3030      	adds	r0, #48	; 0x30
 8002764:	42ba      	cmp	r2, r7
 8002766:	bf08      	it	eq
 8002768:	f043 0301 	orreq.w	r3, r3, #1
 800276c:	4282      	cmp	r2, r0
 800276e:	bf08      	it	eq
 8002770:	f043 0301 	orreq.w	r3, r3, #1
 8002774:	b91b      	cbnz	r3, 800277e <HAL_DMA_IRQHandler+0x432>
 8002776:	4b67      	ldr	r3, [pc, #412]	; (8002914 <HAL_DMA_IRQHandler+0x5c8>)
 8002778:	429a      	cmp	r2, r3
 800277a:	f040 812c 	bne.w	80029d6 <HAL_DMA_IRQHandler+0x68a>
 800277e:	6813      	ldr	r3, [r2, #0]
 8002780:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002784:	b193      	cbz	r3, 80027ac <HAL_DMA_IRQHandler+0x460>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002786:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002788:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800278c:	2b04      	cmp	r3, #4
 800278e:	f000 809e 	beq.w	80028ce <HAL_DMA_IRQHandler+0x582>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002792:	6823      	ldr	r3, [r4, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	0357      	lsls	r7, r2, #13
 8002798:	f140 80ce 	bpl.w	8002938 <HAL_DMA_IRQHandler+0x5ec>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	031d      	lsls	r5, r3, #12
 80027a0:	f140 80d9 	bpl.w	8002956 <HAL_DMA_IRQHandler+0x60a>
          if(hdma->XferCpltCallback != NULL)
 80027a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80027a6:	b10b      	cbz	r3, 80027ac <HAL_DMA_IRQHandler+0x460>
            hdma->XferCpltCallback(hdma);
 80027a8:	4620      	mov	r0, r4
 80027aa:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d07f      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x566>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80027b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80027b4:	07d8      	lsls	r0, r3, #31
 80027b6:	d51f      	bpl.n	80027f8 <HAL_DMA_IRQHandler+0x4ac>
        __HAL_DMA_DISABLE(hdma);
 80027b8:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 80027ba:	2004      	movs	r0, #4
 80027bc:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 80027c0:	6813      	ldr	r3, [r2, #0]
 80027c2:	f023 0301 	bic.w	r3, r3, #1
 80027c6:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027c8:	4b56      	ldr	r3, [pc, #344]	; (8002924 <HAL_DMA_IRQHandler+0x5d8>)
 80027ca:	6822      	ldr	r2, [r4, #0]
 80027cc:	fba3 3606 	umull	r3, r6, r3, r6
 80027d0:	0ab6      	lsrs	r6, r6, #10
 80027d2:	e002      	b.n	80027da <HAL_DMA_IRQHandler+0x48e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80027d4:	6813      	ldr	r3, [r2, #0]
 80027d6:	07d9      	lsls	r1, r3, #31
 80027d8:	d504      	bpl.n	80027e4 <HAL_DMA_IRQHandler+0x498>
          if (++count > timeout)
 80027da:	9b01      	ldr	r3, [sp, #4]
 80027dc:	3301      	adds	r3, #1
 80027de:	42b3      	cmp	r3, r6
 80027e0:	9301      	str	r3, [sp, #4]
 80027e2:	d9f7      	bls.n	80027d4 <HAL_DMA_IRQHandler+0x488>
        __HAL_UNLOCK(hdma);
 80027e4:	2300      	movs	r3, #0
 80027e6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80027ea:	6813      	ldr	r3, [r2, #0]
 80027ec:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 80027ee:	bf4c      	ite	mi
 80027f0:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 80027f2:	2301      	movpl	r3, #1
 80027f4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 80027f8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d059      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x566>
        hdma->XferErrorCallback(hdma);
 80027fe:	4620      	mov	r0, r4
}
 8002800:	b003      	add	sp, #12
 8002802:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 8002806:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002808:	6823      	ldr	r3, [r4, #0]
 800280a:	075b      	lsls	r3, r3, #29
 800280c:	f57f ae01 	bpl.w	8002412 <HAL_DMA_IRQHandler+0xc6>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002810:	6822      	ldr	r2, [r4, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002812:	2308      	movs	r3, #8
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002814:	f022 0204 	bic.w	r2, r2, #4
 8002818:	6022      	str	r2, [r4, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800281a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800281c:	f002 021f 	and.w	r2, r2, #31
 8002820:	4093      	lsls	r3, r2
 8002822:	60ab      	str	r3, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002824:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002826:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	f001 021f 	and.w	r2, r1, #31
 8002830:	6543      	str	r3, [r0, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002832:	fa27 f302 	lsr.w	r3, r7, r2
 8002836:	07dc      	lsls	r4, r3, #31
 8002838:	f57f ae53 	bpl.w	80024e2 <HAL_DMA_IRQHandler+0x196>
 800283c:	e5ed      	b.n	800241a <HAL_DMA_IRQHandler+0xce>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800283e:	4b3a      	ldr	r3, [pc, #232]	; (8002928 <HAL_DMA_IRQHandler+0x5dc>)
 8002840:	4e3a      	ldr	r6, [pc, #232]	; (800292c <HAL_DMA_IRQHandler+0x5e0>)
 8002842:	493b      	ldr	r1, [pc, #236]	; (8002930 <HAL_DMA_IRQHandler+0x5e4>)
 8002844:	42b4      	cmp	r4, r6
 8002846:	bf18      	it	ne
 8002848:	429c      	cmpne	r4, r3
 800284a:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800284e:	bf0c      	ite	eq
 8002850:	2301      	moveq	r3, #1
 8002852:	2300      	movne	r3, #0
 8002854:	428c      	cmp	r4, r1
 8002856:	bf08      	it	eq
 8002858:	f043 0301 	orreq.w	r3, r3, #1
 800285c:	3128      	adds	r1, #40	; 0x28
 800285e:	42b4      	cmp	r4, r6
 8002860:	bf08      	it	eq
 8002862:	f043 0301 	orreq.w	r3, r3, #1
 8002866:	3628      	adds	r6, #40	; 0x28
 8002868:	428c      	cmp	r4, r1
 800286a:	bf08      	it	eq
 800286c:	f043 0301 	orreq.w	r3, r3, #1
 8002870:	3128      	adds	r1, #40	; 0x28
 8002872:	42b4      	cmp	r4, r6
 8002874:	bf08      	it	eq
 8002876:	f043 0301 	orreq.w	r3, r3, #1
 800287a:	428c      	cmp	r4, r1
 800287c:	bf08      	it	eq
 800287e:	f043 0301 	orreq.w	r3, r3, #1
 8002882:	b913      	cbnz	r3, 800288a <HAL_DMA_IRQHandler+0x53e>
 8002884:	4b2b      	ldr	r3, [pc, #172]	; (8002934 <HAL_DMA_IRQHandler+0x5e8>)
 8002886:	429c      	cmp	r4, r3
 8002888:	d113      	bne.n	80028b2 <HAL_DMA_IRQHandler+0x566>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800288a:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800288c:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800288e:	6823      	ldr	r3, [r4, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002890:	f001 011f 	and.w	r1, r1, #31
 8002894:	408e      	lsls	r6, r1
 8002896:	4216      	tst	r6, r2
 8002898:	d066      	beq.n	8002968 <HAL_DMA_IRQHandler+0x61c>
 800289a:	075f      	lsls	r7, r3, #29
 800289c:	d564      	bpl.n	8002968 <HAL_DMA_IRQHandler+0x61c>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800289e:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80028a0:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028a2:	f140 809c 	bpl.w	80029de <HAL_DMA_IRQHandler+0x692>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80028a6:	03da      	lsls	r2, r3, #15
 80028a8:	f100 80f1 	bmi.w	8002a8e <HAL_DMA_IRQHandler+0x742>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028ac:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1a6      	bne.n	8002800 <HAL_DMA_IRQHandler+0x4b4>
}
 80028b2:	b003      	add	sp, #12
 80028b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	0319      	lsls	r1, r3, #12
 80028ba:	f57f af01 	bpl.w	80026c0 <HAL_DMA_IRQHandler+0x374>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80028be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f47f af01 	bne.w	80026c8 <HAL_DMA_IRQHandler+0x37c>
 80028c6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80028c8:	f002 021f 	and.w	r2, r2, #31
 80028cc:	e701      	b.n	80026d2 <HAL_DMA_IRQHandler+0x386>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028ce:	6822      	ldr	r2, [r4, #0]
 80028d0:	6813      	ldr	r3, [r2, #0]
 80028d2:	f023 0316 	bic.w	r3, r3, #22
 80028d6:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80028d8:	6822      	ldr	r2, [r4, #0]
 80028da:	6953      	ldr	r3, [r2, #20]
 80028dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028e0:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d03b      	beq.n	8002960 <HAL_DMA_IRQHandler+0x614>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80028e8:	6822      	ldr	r2, [r4, #0]
 80028ea:	6813      	ldr	r3, [r2, #0]
 80028ec:	f023 0308 	bic.w	r3, r3, #8
 80028f0:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80028f2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80028f4:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 80028f6:	2000      	movs	r0, #0
          hdma->State = HAL_DMA_STATE_READY;
 80028f8:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80028fa:	f002 021f 	and.w	r2, r2, #31
 80028fe:	4093      	lsls	r3, r2
 8002900:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
 8002902:	6d23      	ldr	r3, [r4, #80]	; 0x50
          __HAL_UNLOCK(hdma);
 8002904:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002908:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 800290c:	2b00      	cmp	r3, #0
 800290e:	f47f af76 	bne.w	80027fe <HAL_DMA_IRQHandler+0x4b2>
 8002912:	e7ce      	b.n	80028b2 <HAL_DMA_IRQHandler+0x566>
 8002914:	400204b8 	.word	0x400204b8
 8002918:	40020010 	.word	0x40020010
 800291c:	40020028 	.word	0x40020028
 8002920:	40020040 	.word	0x40020040
 8002924:	1b4e81b5 	.word	0x1b4e81b5
 8002928:	58025408 	.word	0x58025408
 800292c:	5802541c 	.word	0x5802541c
 8002930:	58025430 	.word	0x58025430
 8002934:	58025494 	.word	0x58025494
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800293e:	f47f af31 	bne.w	80027a4 <HAL_DMA_IRQHandler+0x458>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002942:	6819      	ldr	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8002944:	2001      	movs	r0, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002946:	f021 0110 	bic.w	r1, r1, #16
 800294a:	6019      	str	r1, [r3, #0]
            __HAL_UNLOCK(hdma);
 800294c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8002950:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8002954:	e726      	b.n	80027a4 <HAL_DMA_IRQHandler+0x458>
            if(hdma->XferM1CpltCallback != NULL)
 8002956:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002958:	2b00      	cmp	r3, #0
 800295a:	f47f af25 	bne.w	80027a8 <HAL_DMA_IRQHandler+0x45c>
 800295e:	e725      	b.n	80027ac <HAL_DMA_IRQHandler+0x460>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002960:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1c0      	bne.n	80028e8 <HAL_DMA_IRQHandler+0x59c>
 8002966:	e7c4      	b.n	80028f2 <HAL_DMA_IRQHandler+0x5a6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002968:	2602      	movs	r6, #2
 800296a:	408e      	lsls	r6, r1
 800296c:	4216      	tst	r6, r2
 800296e:	d00d      	beq.n	800298c <HAL_DMA_IRQHandler+0x640>
 8002970:	079f      	lsls	r7, r3, #30
 8002972:	d50b      	bpl.n	800298c <HAL_DMA_IRQHandler+0x640>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002974:	041c      	lsls	r4, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002976:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002978:	f140 808e 	bpl.w	8002a98 <HAL_DMA_IRQHandler+0x74c>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800297c:	03d9      	lsls	r1, r3, #15
 800297e:	f100 80e9 	bmi.w	8002b54 <HAL_DMA_IRQHandler+0x808>
          if(hdma->XferM1CpltCallback != NULL)
 8002982:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002984:	2b00      	cmp	r3, #0
 8002986:	f47f af3b 	bne.w	8002800 <HAL_DMA_IRQHandler+0x4b4>
 800298a:	e792      	b.n	80028b2 <HAL_DMA_IRQHandler+0x566>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800298c:	2608      	movs	r6, #8
 800298e:	fa06 f101 	lsl.w	r1, r6, r1
 8002992:	4211      	tst	r1, r2
 8002994:	d08d      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x566>
 8002996:	071b      	lsls	r3, r3, #28
 8002998:	d58b      	bpl.n	80028b2 <HAL_DMA_IRQHandler+0x566>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800299a:	6823      	ldr	r3, [r4, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800299c:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 800299e:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029a0:	f023 030e 	bic.w	r3, r3, #14
 80029a4:	6023      	str	r3, [r4, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80029a6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	606b      	str	r3, [r5, #4]
      if (hdma->XferErrorCallback != NULL)
 80029b2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029b4:	6542      	str	r2, [r0, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 80029b6:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80029ba:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f47f af1e 	bne.w	8002800 <HAL_DMA_IRQHandler+0x4b4>
 80029c4:	e775      	b.n	80028b2 <HAL_DMA_IRQHandler+0x566>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80029c6:	680b      	ldr	r3, [r1, #0]
 80029c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80029cc:	e66a      	b.n	80026a4 <HAL_DMA_IRQHandler+0x358>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80029ce:	680b      	ldr	r3, [r1, #0]
 80029d0:	e5f3      	b.n	80025ba <HAL_DMA_IRQHandler+0x26e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80029d2:	680b      	ldr	r3, [r1, #0]
 80029d4:	e585      	b.n	80024e2 <HAL_DMA_IRQHandler+0x196>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80029d6:	6813      	ldr	r3, [r2, #0]
 80029d8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80029dc:	e6d2      	b.n	8002784 <HAL_DMA_IRQHandler+0x438>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80029de:	069b      	lsls	r3, r3, #26
 80029e0:	d455      	bmi.n	8002a8e <HAL_DMA_IRQHandler+0x742>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029e2:	6802      	ldr	r2, [r0, #0]
 80029e4:	4b63      	ldr	r3, [pc, #396]	; (8002b74 <HAL_DMA_IRQHandler+0x828>)
 80029e6:	4c64      	ldr	r4, [pc, #400]	; (8002b78 <HAL_DMA_IRQHandler+0x82c>)
 80029e8:	4964      	ldr	r1, [pc, #400]	; (8002b7c <HAL_DMA_IRQHandler+0x830>)
 80029ea:	42a2      	cmp	r2, r4
 80029ec:	bf18      	it	ne
 80029ee:	429a      	cmpne	r2, r3
 80029f0:	4d63      	ldr	r5, [pc, #396]	; (8002b80 <HAL_DMA_IRQHandler+0x834>)
 80029f2:	f104 0448 	add.w	r4, r4, #72	; 0x48
 80029f6:	bf0c      	ite	eq
 80029f8:	2301      	moveq	r3, #1
 80029fa:	2300      	movne	r3, #0
 80029fc:	428a      	cmp	r2, r1
 80029fe:	bf08      	it	eq
 8002a00:	f043 0301 	orreq.w	r3, r3, #1
 8002a04:	3148      	adds	r1, #72	; 0x48
 8002a06:	42aa      	cmp	r2, r5
 8002a08:	bf08      	it	eq
 8002a0a:	f043 0301 	orreq.w	r3, r3, #1
 8002a0e:	3548      	adds	r5, #72	; 0x48
 8002a10:	42a2      	cmp	r2, r4
 8002a12:	bf08      	it	eq
 8002a14:	f043 0301 	orreq.w	r3, r3, #1
 8002a18:	3448      	adds	r4, #72	; 0x48
 8002a1a:	428a      	cmp	r2, r1
 8002a1c:	bf08      	it	eq
 8002a1e:	f043 0301 	orreq.w	r3, r3, #1
 8002a22:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8002a26:	42aa      	cmp	r2, r5
 8002a28:	bf08      	it	eq
 8002a2a:	f043 0301 	orreq.w	r3, r3, #1
 8002a2e:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8002a32:	42a2      	cmp	r2, r4
 8002a34:	bf08      	it	eq
 8002a36:	f043 0301 	orreq.w	r3, r3, #1
 8002a3a:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8002a3e:	428a      	cmp	r2, r1
 8002a40:	bf08      	it	eq
 8002a42:	f043 0301 	orreq.w	r3, r3, #1
 8002a46:	3148      	adds	r1, #72	; 0x48
 8002a48:	42aa      	cmp	r2, r5
 8002a4a:	bf08      	it	eq
 8002a4c:	f043 0301 	orreq.w	r3, r3, #1
 8002a50:	3548      	adds	r5, #72	; 0x48
 8002a52:	42a2      	cmp	r2, r4
 8002a54:	bf08      	it	eq
 8002a56:	f043 0301 	orreq.w	r3, r3, #1
 8002a5a:	3448      	adds	r4, #72	; 0x48
 8002a5c:	428a      	cmp	r2, r1
 8002a5e:	bf08      	it	eq
 8002a60:	f043 0301 	orreq.w	r3, r3, #1
 8002a64:	3148      	adds	r1, #72	; 0x48
 8002a66:	42aa      	cmp	r2, r5
 8002a68:	bf08      	it	eq
 8002a6a:	f043 0301 	orreq.w	r3, r3, #1
 8002a6e:	42a2      	cmp	r2, r4
 8002a70:	bf08      	it	eq
 8002a72:	f043 0301 	orreq.w	r3, r3, #1
 8002a76:	428a      	cmp	r2, r1
 8002a78:	bf08      	it	eq
 8002a7a:	f043 0301 	orreq.w	r3, r3, #1
 8002a7e:	b913      	cbnz	r3, 8002a86 <HAL_DMA_IRQHandler+0x73a>
 8002a80:	4b40      	ldr	r3, [pc, #256]	; (8002b84 <HAL_DMA_IRQHandler+0x838>)
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d16b      	bne.n	8002b5e <HAL_DMA_IRQHandler+0x812>
 8002a86:	6813      	ldr	r3, [r2, #0]
 8002a88:	f023 0308 	bic.w	r3, r3, #8
 8002a8c:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8002a8e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f47f aeb5 	bne.w	8002800 <HAL_DMA_IRQHandler+0x4b4>
 8002a96:	e70c      	b.n	80028b2 <HAL_DMA_IRQHandler+0x566>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002a98:	069a      	lsls	r2, r3, #26
 8002a9a:	d45b      	bmi.n	8002b54 <HAL_DMA_IRQHandler+0x808>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a9c:	6802      	ldr	r2, [r0, #0]
 8002a9e:	4b35      	ldr	r3, [pc, #212]	; (8002b74 <HAL_DMA_IRQHandler+0x828>)
 8002aa0:	4c35      	ldr	r4, [pc, #212]	; (8002b78 <HAL_DMA_IRQHandler+0x82c>)
 8002aa2:	4936      	ldr	r1, [pc, #216]	; (8002b7c <HAL_DMA_IRQHandler+0x830>)
 8002aa4:	42a2      	cmp	r2, r4
 8002aa6:	bf18      	it	ne
 8002aa8:	429a      	cmpne	r2, r3
 8002aaa:	4d35      	ldr	r5, [pc, #212]	; (8002b80 <HAL_DMA_IRQHandler+0x834>)
 8002aac:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8002ab0:	bf0c      	ite	eq
 8002ab2:	2301      	moveq	r3, #1
 8002ab4:	2300      	movne	r3, #0
 8002ab6:	428a      	cmp	r2, r1
 8002ab8:	bf08      	it	eq
 8002aba:	f043 0301 	orreq.w	r3, r3, #1
 8002abe:	3148      	adds	r1, #72	; 0x48
 8002ac0:	42aa      	cmp	r2, r5
 8002ac2:	bf08      	it	eq
 8002ac4:	f043 0301 	orreq.w	r3, r3, #1
 8002ac8:	3548      	adds	r5, #72	; 0x48
 8002aca:	42a2      	cmp	r2, r4
 8002acc:	bf08      	it	eq
 8002ace:	f043 0301 	orreq.w	r3, r3, #1
 8002ad2:	3448      	adds	r4, #72	; 0x48
 8002ad4:	428a      	cmp	r2, r1
 8002ad6:	bf08      	it	eq
 8002ad8:	f043 0301 	orreq.w	r3, r3, #1
 8002adc:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8002ae0:	42aa      	cmp	r2, r5
 8002ae2:	bf08      	it	eq
 8002ae4:	f043 0301 	orreq.w	r3, r3, #1
 8002ae8:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8002aec:	42a2      	cmp	r2, r4
 8002aee:	bf08      	it	eq
 8002af0:	f043 0301 	orreq.w	r3, r3, #1
 8002af4:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8002af8:	428a      	cmp	r2, r1
 8002afa:	bf08      	it	eq
 8002afc:	f043 0301 	orreq.w	r3, r3, #1
 8002b00:	3148      	adds	r1, #72	; 0x48
 8002b02:	42aa      	cmp	r2, r5
 8002b04:	bf08      	it	eq
 8002b06:	f043 0301 	orreq.w	r3, r3, #1
 8002b0a:	3548      	adds	r5, #72	; 0x48
 8002b0c:	42a2      	cmp	r2, r4
 8002b0e:	bf08      	it	eq
 8002b10:	f043 0301 	orreq.w	r3, r3, #1
 8002b14:	3448      	adds	r4, #72	; 0x48
 8002b16:	428a      	cmp	r2, r1
 8002b18:	bf08      	it	eq
 8002b1a:	f043 0301 	orreq.w	r3, r3, #1
 8002b1e:	3148      	adds	r1, #72	; 0x48
 8002b20:	42aa      	cmp	r2, r5
 8002b22:	bf08      	it	eq
 8002b24:	f043 0301 	orreq.w	r3, r3, #1
 8002b28:	42a2      	cmp	r2, r4
 8002b2a:	bf08      	it	eq
 8002b2c:	f043 0301 	orreq.w	r3, r3, #1
 8002b30:	428a      	cmp	r2, r1
 8002b32:	bf08      	it	eq
 8002b34:	f043 0301 	orreq.w	r3, r3, #1
 8002b38:	b913      	cbnz	r3, 8002b40 <HAL_DMA_IRQHandler+0x7f4>
 8002b3a:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <HAL_DMA_IRQHandler+0x838>)
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d113      	bne.n	8002b68 <HAL_DMA_IRQHandler+0x81c>
 8002b40:	6813      	ldr	r3, [r2, #0]
 8002b42:	f023 0314 	bic.w	r3, r3, #20
 8002b46:	6013      	str	r3, [r2, #0]
          __HAL_UNLOCK(hdma);
 8002b48:	2200      	movs	r2, #0
          hdma->State = HAL_DMA_STATE_READY;
 8002b4a:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8002b4c:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002b50:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8002b54:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f47f ae52 	bne.w	8002800 <HAL_DMA_IRQHandler+0x4b4>
 8002b5c:	e6a9      	b.n	80028b2 <HAL_DMA_IRQHandler+0x566>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b5e:	6813      	ldr	r3, [r2, #0]
 8002b60:	f023 0304 	bic.w	r3, r3, #4
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	e792      	b.n	8002a8e <HAL_DMA_IRQHandler+0x742>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b68:	6813      	ldr	r3, [r2, #0]
 8002b6a:	f023 030a 	bic.w	r3, r3, #10
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	e7ea      	b.n	8002b48 <HAL_DMA_IRQHandler+0x7fc>
 8002b72:	bf00      	nop
 8002b74:	40020010 	.word	0x40020010
 8002b78:	40020028 	.word	0x40020028
 8002b7c:	40020040 	.word	0x40020040
 8002b80:	40020058 	.word	0x40020058
 8002b84:	400204b8 	.word	0x400204b8

08002b88 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8002b88:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8002b8a:	4770      	bx	lr

08002b8c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b8c:	680b      	ldr	r3, [r1, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 80e8 	beq.w	8002d64 <HAL_GPIO_Init+0x1d8>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b94:	f8df c224 	ldr.w	ip, [pc, #548]	; 8002dbc <HAL_GPIO_Init+0x230>
{
 8002b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8002b9c:	2500      	movs	r5, #0
{
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	f8df e21c 	ldr.w	lr, [pc, #540]	; 8002dc0 <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002ba4:	4f7f      	ldr	r7, [pc, #508]	; (8002da4 <HAL_GPIO_Init+0x218>)
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	40aa      	lsls	r2, r5
    if (iocurrent != 0x00U)
 8002baa:	ea12 0603 	ands.w	r6, r2, r3
 8002bae:	f000 80bf 	beq.w	8002d30 <HAL_GPIO_Init+0x1a4>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bb2:	684b      	ldr	r3, [r1, #4]
 8002bb4:	ea4f 0845 	mov.w	r8, r5, lsl #1
 8002bb8:	2403      	movs	r4, #3
 8002bba:	f023 0910 	bic.w	r9, r3, #16
 8002bbe:	fa04 f408 	lsl.w	r4, r4, r8
 8002bc2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8002bc6:	43e4      	mvns	r4, r4
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bc8:	f1b9 0f01 	cmp.w	r9, #1
 8002bcc:	d814      	bhi.n	8002bf8 <HAL_GPIO_Init+0x6c>
        temp = GPIOx->OSPEEDR;
 8002bce:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bd0:	ea03 0904 	and.w	r9, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bd4:	68cb      	ldr	r3, [r1, #12]
 8002bd6:	fa03 f308 	lsl.w	r3, r3, r8
 8002bda:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OSPEEDR = temp;
 8002bde:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002be0:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
 8002be2:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002be6:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bea:	ea29 0902 	bic.w	r9, r9, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002bee:	fa03 f205 	lsl.w	r2, r3, r5
 8002bf2:	ea42 0209 	orr.w	r2, r2, r9
        GPIOx->OTYPER = temp;
 8002bf6:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8002bf8:	68c2      	ldr	r2, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bfa:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bfc:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bfe:	fa03 f308 	lsl.w	r3, r3, r8
 8002c02:	4313      	orrs	r3, r2
      GPIOx->PUPDR = temp;
 8002c04:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c06:	684b      	ldr	r3, [r1, #4]
 8002c08:	f023 0210 	bic.w	r2, r3, #16
 8002c0c:	2a02      	cmp	r2, #2
 8002c0e:	d115      	bne.n	8002c3c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3U];
 8002c10:	08ea      	lsrs	r2, r5, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c12:	f005 0907 	and.w	r9, r5, #7
 8002c16:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c1a:	690b      	ldr	r3, [r1, #16]
 8002c1c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c20:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8002c24:	f8d2 a020 	ldr.w	sl, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c28:	fa0b fb09 	lsl.w	fp, fp, r9
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c2c:	fa03 f309 	lsl.w	r3, r3, r9
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c30:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c34:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 8002c38:	6213      	str	r3, [r2, #32]
 8002c3a:	684b      	ldr	r3, [r1, #4]
      temp = GPIOx->MODER;
 8002c3c:	6802      	ldr	r2, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c3e:	f003 0303 	and.w	r3, r3, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c42:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c44:	fa03 f308 	lsl.w	r3, r3, r8
 8002c48:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
 8002c4a:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c4c:	684b      	ldr	r3, [r1, #4]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	d56d      	bpl.n	8002d2e <HAL_GPIO_Init+0x1a2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c52:	f8dc 40f4 	ldr.w	r4, [ip, #244]	; 0xf4
 8002c56:	f025 0903 	bic.w	r9, r5, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c5a:	f005 0303 	and.w	r3, r5, #3
 8002c5e:	220f      	movs	r2, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c60:	f044 0802 	orr.w	r8, r4, #2
 8002c64:	eb09 040e 	add.w	r4, r9, lr
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c68:	ea4f 0983 	mov.w	r9, r3, lsl #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c6c:	4b4e      	ldr	r3, [pc, #312]	; (8002da8 <HAL_GPIO_Init+0x21c>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c6e:	f8cc 80f4 	str.w	r8, [ip, #244]	; 0xf4
 8002c72:	f8dc 80f4 	ldr.w	r8, [ip, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c76:	fa02 f209 	lsl.w	r2, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c7a:	4298      	cmp	r0, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7c:	f008 0802 	and.w	r8, r8, #2
 8002c80:	f8cd 8004 	str.w	r8, [sp, #4]
 8002c84:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002c88:	f8d4 8008 	ldr.w	r8, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c8c:	ea28 0202 	bic.w	r2, r8, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c90:	d026      	beq.n	8002ce0 <HAL_GPIO_Init+0x154>
 8002c92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c96:	4298      	cmp	r0, r3
 8002c98:	d058      	beq.n	8002d4c <HAL_GPIO_Init+0x1c0>
 8002c9a:	4b44      	ldr	r3, [pc, #272]	; (8002dac <HAL_GPIO_Init+0x220>)
 8002c9c:	4298      	cmp	r0, r3
 8002c9e:	d04f      	beq.n	8002d40 <HAL_GPIO_Init+0x1b4>
 8002ca0:	4b43      	ldr	r3, [pc, #268]	; (8002db0 <HAL_GPIO_Init+0x224>)
 8002ca2:	4298      	cmp	r0, r3
 8002ca4:	d05f      	beq.n	8002d66 <HAL_GPIO_Init+0x1da>
 8002ca6:	4b43      	ldr	r3, [pc, #268]	; (8002db4 <HAL_GPIO_Init+0x228>)
 8002ca8:	4298      	cmp	r0, r3
 8002caa:	d062      	beq.n	8002d72 <HAL_GPIO_Init+0x1e6>
 8002cac:	4b42      	ldr	r3, [pc, #264]	; (8002db8 <HAL_GPIO_Init+0x22c>)
 8002cae:	4298      	cmp	r0, r3
 8002cb0:	d052      	beq.n	8002d58 <HAL_GPIO_Init+0x1cc>
 8002cb2:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8002dc4 <HAL_GPIO_Init+0x238>
 8002cb6:	4540      	cmp	r0, r8
 8002cb8:	d061      	beq.n	8002d7e <HAL_GPIO_Init+0x1f2>
 8002cba:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8002dc8 <HAL_GPIO_Init+0x23c>
 8002cbe:	4540      	cmp	r0, r8
 8002cc0:	d063      	beq.n	8002d8a <HAL_GPIO_Init+0x1fe>
 8002cc2:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8002dcc <HAL_GPIO_Init+0x240>
 8002cc6:	4540      	cmp	r0, r8
 8002cc8:	d065      	beq.n	8002d96 <HAL_GPIO_Init+0x20a>
 8002cca:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8002dd0 <HAL_GPIO_Init+0x244>
 8002cce:	4540      	cmp	r0, r8
 8002cd0:	bf0c      	ite	eq
 8002cd2:	f04f 0809 	moveq.w	r8, #9
 8002cd6:	f04f 080a 	movne.w	r8, #10
 8002cda:	fa08 f309 	lsl.w	r3, r8, r9
 8002cde:	431a      	orrs	r2, r3
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ce0:	60a2      	str	r2, [r4, #8]
        temp &= ~(iocurrent);
 8002ce2:	43f2      	mvns	r2, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ce4:	684c      	ldr	r4, [r1, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8002ce6:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp = EXTI_CurrentCPU->IMR1;
 8002cea:	683b      	ldr	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cec:	03e4      	lsls	r4, r4, #15
          temp |= iocurrent;
 8002cee:	bf4c      	ite	mi
 8002cf0:	4333      	orrmi	r3, r6
        temp &= ~(iocurrent);
 8002cf2:	4013      	andpl	r3, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8002cf4:	603b      	str	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cf6:	684c      	ldr	r4, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8002cf8:	687b      	ldr	r3, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cfa:	03a4      	lsls	r4, r4, #14
          temp |= iocurrent;
 8002cfc:	bf4c      	ite	mi
 8002cfe:	4333      	orrmi	r3, r6
        temp &= ~(iocurrent);
 8002d00:	4013      	andpl	r3, r2
        EXTI_CurrentCPU->EMR1 = temp;
 8002d02:	607b      	str	r3, [r7, #4]
        temp = EXTI->RTSR1;
 8002d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d08:	684c      	ldr	r4, [r1, #4]
        temp = EXTI->RTSR1;
 8002d0a:	681b      	ldr	r3, [r3, #0]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d0c:	02e4      	lsls	r4, r4, #11
          temp |= iocurrent;
 8002d0e:	bf4c      	ite	mi
 8002d10:	4333      	orrmi	r3, r6
        temp &= ~(iocurrent);
 8002d12:	4013      	andpl	r3, r2
        EXTI->RTSR1 = temp;
 8002d14:	f8c8 3000 	str.w	r3, [r8]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d18:	684c      	ldr	r4, [r1, #4]
        temp = EXTI->FTSR1;
 8002d1a:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d1e:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8002d20:	bf54      	ite	pl
 8002d22:	ea02 0603 	andpl.w	r6, r2, r3
        {
          temp |= iocurrent;
 8002d26:	431e      	orrmi	r6, r3
        }
        EXTI->FTSR1 = temp;
 8002d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2c:	605e      	str	r6, [r3, #4]
 8002d2e:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
 8002d30:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d32:	fa33 f205 	lsrs.w	r2, r3, r5
 8002d36:	f47f af36 	bne.w	8002ba6 <HAL_GPIO_Init+0x1a>
  }
}
 8002d3a:	b003      	add	sp, #12
 8002d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d40:	f04f 0802 	mov.w	r8, #2
 8002d44:	fa08 f309 	lsl.w	r3, r8, r9
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	e7c9      	b.n	8002ce0 <HAL_GPIO_Init+0x154>
 8002d4c:	f04f 0801 	mov.w	r8, #1
 8002d50:	fa08 f309 	lsl.w	r3, r8, r9
 8002d54:	431a      	orrs	r2, r3
 8002d56:	e7c3      	b.n	8002ce0 <HAL_GPIO_Init+0x154>
 8002d58:	f04f 0805 	mov.w	r8, #5
 8002d5c:	fa08 f309 	lsl.w	r3, r8, r9
 8002d60:	431a      	orrs	r2, r3
 8002d62:	e7bd      	b.n	8002ce0 <HAL_GPIO_Init+0x154>
 8002d64:	4770      	bx	lr
 8002d66:	f04f 0803 	mov.w	r8, #3
 8002d6a:	fa08 f309 	lsl.w	r3, r8, r9
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	e7b6      	b.n	8002ce0 <HAL_GPIO_Init+0x154>
 8002d72:	f04f 0804 	mov.w	r8, #4
 8002d76:	fa08 f309 	lsl.w	r3, r8, r9
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	e7b0      	b.n	8002ce0 <HAL_GPIO_Init+0x154>
 8002d7e:	f04f 0806 	mov.w	r8, #6
 8002d82:	fa08 f309 	lsl.w	r3, r8, r9
 8002d86:	431a      	orrs	r2, r3
 8002d88:	e7aa      	b.n	8002ce0 <HAL_GPIO_Init+0x154>
 8002d8a:	f04f 0807 	mov.w	r8, #7
 8002d8e:	fa08 f309 	lsl.w	r3, r8, r9
 8002d92:	431a      	orrs	r2, r3
 8002d94:	e7a4      	b.n	8002ce0 <HAL_GPIO_Init+0x154>
 8002d96:	f04f 0808 	mov.w	r8, #8
 8002d9a:	fa08 f309 	lsl.w	r3, r8, r9
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	e79e      	b.n	8002ce0 <HAL_GPIO_Init+0x154>
 8002da2:	bf00      	nop
 8002da4:	58000080 	.word	0x58000080
 8002da8:	58020000 	.word	0x58020000
 8002dac:	58020800 	.word	0x58020800
 8002db0:	58020c00 	.word	0x58020c00
 8002db4:	58021000 	.word	0x58021000
 8002db8:	58021400 	.word	0x58021400
 8002dbc:	58024400 	.word	0x58024400
 8002dc0:	58000400 	.word	0x58000400
 8002dc4:	58021800 	.word	0x58021800
 8002dc8:	58021c00 	.word	0x58021c00
 8002dcc:	58022000 	.word	0x58022000
 8002dd0:	58022400 	.word	0x58022400

08002dd4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002dd4:	6903      	ldr	r3, [r0, #16]
 8002dd6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002dd8:	bf14      	ite	ne
 8002dda:	2001      	movne	r0, #1
 8002ddc:	2000      	moveq	r0, #0
 8002dde:	4770      	bx	lr

08002de0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002de0:	b902      	cbnz	r2, 8002de4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002de2:	0409      	lsls	r1, r1, #16
 8002de4:	6181      	str	r1, [r0, #24]
  }
}
 8002de6:	4770      	bx	lr

08002de8 <HAL_HRTIM_Init>:
{
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8002de8:	2800      	cmp	r0, #0
 8002dea:	d05b      	beq.n	8002ea4 <HAL_HRTIM_Init+0xbc>

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8002dec:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002dee:	2102      	movs	r1, #2
{
 8002df0:	b510      	push	{r4, lr}
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8002df2:	6882      	ldr	r2, [r0, #8]
{
 8002df4:	b082      	sub	sp, #8
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002df6:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8002dfa:	07d2      	lsls	r2, r2, #31
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8002dfc:	e9c0 3331 	strd	r3, r3, [r0, #196]	; 0xc4
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8002e00:	e9c0 3333 	strd	r3, r3, [r0, #204]	; 0xcc
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8002e04:	e9c0 3335 	strd	r3, r3, [r0, #212]	; 0xd4
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8002e08:	d50f      	bpl.n	8002e2a <HAL_HRTIM_Init+0x42>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8002e0a:	6801      	ldr	r1, [r0, #0]
 8002e0c:	4b2e      	ldr	r3, [pc, #184]	; (8002ec8 <HAL_HRTIM_Init+0xe0>)
 8002e0e:	4299      	cmp	r1, r3
 8002e10:	d04a      	beq.n	8002ea8 <HAL_HRTIM_Init+0xc0>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002e12:	680a      	ldr	r2, [r1, #0]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8002e14:	6904      	ldr	r4, [r0, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8002e16:	6943      	ldr	r3, [r0, #20]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8002e18:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8002e1c:	f404 4440 	and.w	r4, r4, #49152	; 0xc000
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8002e20:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8002e24:	4322      	orrs	r2, r4
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8002e26:	4313      	orrs	r3, r2

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002e28:	600b      	str	r3, [r1, #0]
 8002e2a:	4604      	mov	r4, r0

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8002e2c:	f005 feee 	bl	8008c0c <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8002e30:	68a3      	ldr	r3, [r4, #8]
 8002e32:	079b      	lsls	r3, r3, #30
 8002e34:	d508      	bpl.n	8002e48 <HAL_HRTIM_Init+0x60>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002e36:	6821      	ldr	r1, [r4, #0]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8002e38:	68e3      	ldr	r3, [r4, #12]
    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002e3a:	680a      	ldr	r2, [r1, #0]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8002e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8002e40:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8002e44:	4313      	orrs	r3, r2

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002e46:	600b      	str	r3, [r1, #0]

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8002e48:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002e4a:	2201      	movs	r2, #1
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
  }

  return HAL_OK;
 8002e4c:	4618      	mov	r0, r3
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002e4e:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
  __HAL_UNLOCK(hhrtim);
 8002e52:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8002e56:	62a3      	str	r3, [r4, #40]	; 0x28
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8002e58:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8002e5c:	e9c4 3308 	strd	r3, r3, [r4, #32]
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8002e60:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8002e64:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8002e68:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8002e6c:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8002e70:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8002e74:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8002e78:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8002e7c:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8002e80:	e9c4 331e 	strd	r3, r3, [r4, #120]	; 0x78
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8002e84:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8002e88:	e9c4 3323 	strd	r3, r3, [r4, #140]	; 0x8c
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8002e8c:	e9c4 3325 	strd	r3, r3, [r4, #148]	; 0x94
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8002e90:	e9c4 3328 	strd	r3, r3, [r4, #160]	; 0xa0
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8002e94:	e9c4 332a 	strd	r3, r3, [r4, #168]	; 0xa8
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8002e98:	e9c4 332c 	strd	r3, r3, [r4, #176]	; 0xb0
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8002e9c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
}
 8002ea0:	b002      	add	sp, #8
 8002ea2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002ea4:	2001      	movs	r0, #1
}
 8002ea6:	4770      	bx	lr
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8002ea8:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <HAL_HRTIM_Init+0xe4>)
 8002eaa:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002eae:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002eb2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8002eb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002eba:	6801      	ldr	r1, [r0, #0]
 8002ebc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ec0:	9301      	str	r3, [sp, #4]
 8002ec2:	9b01      	ldr	r3, [sp, #4]
 8002ec4:	e7a5      	b.n	8002e12 <HAL_HRTIM_Init+0x2a>
 8002ec6:	bf00      	nop
 8002ec8:	40017400 	.word	0x40017400
 8002ecc:	58024400 	.word	0x58024400

08002ed0 <HAL_HRTIM_TimeBaseConfig>:
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002ed0:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d036      	beq.n	8002f48 <HAL_HRTIM_TimeBaseConfig+0x78>
  {
     return HAL_BUSY;
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002eda:	2302      	movs	r3, #2

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8002edc:	2905      	cmp	r1, #5
{
 8002ede:	b470      	push	{r4, r5, r6}
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002ee0:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
 8002ee4:	6804      	ldr	r4, [r0, #0]
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8002ee6:	d01e      	beq.n	8002f26 <HAL_HRTIM_TimeBaseConfig+0x56>
 8002ee8:	01c9      	lsls	r1, r1, #7
 8002eea:	440c      	add	r4, r1
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8002eec:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002ef0:	e9d2 6502 	ldrd	r6, r5, [r2, #8]
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8002ef4:	f023 0307 	bic.w	r3, r3, #7
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8002ef8:	4333      	orrs	r3, r6
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8002efa:	f023 0318 	bic.w	r3, r3, #24
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002efe:	432b      	orrs	r3, r5

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8002f00:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8002f04:	6803      	ldr	r3, [r0, #0]
 8002f06:	6814      	ldr	r4, [r2, #0]
 8002f08:	440b      	add	r3, r1
 8002f0a:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8002f0e:	6803      	ldr	r3, [r0, #0]
 8002f10:	6852      	ldr	r2, [r2, #4]
 8002f12:	4419      	add	r1, r3
 8002f14:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002f18:	2201      	movs	r2, #1
  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002f1c:	f880 20c1 	strb.w	r2, [r0, #193]	; 0xc1
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	bc70      	pop	{r4, r5, r6}
 8002f24:	4770      	bx	lr
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002f26:	6823      	ldr	r3, [r4, #0]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8002f28:	6895      	ldr	r5, [r2, #8]
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8002f2a:	f023 0307 	bic.w	r3, r3, #7
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002f2e:	68d1      	ldr	r1, [r2, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8002f30:	432b      	orrs	r3, r5
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8002f32:	f023 0318 	bic.w	r3, r3, #24
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002f36:	430b      	orrs	r3, r1
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002f38:	6023      	str	r3, [r4, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8002f3a:	6803      	ldr	r3, [r0, #0]
 8002f3c:	6811      	ldr	r1, [r2, #0]
 8002f3e:	6159      	str	r1, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8002f40:	6852      	ldr	r2, [r2, #4]
 8002f42:	6803      	ldr	r3, [r0, #0]
 8002f44:	619a      	str	r2, [r3, #24]
 8002f46:	e7e7      	b.n	8002f18 <HAL_HRTIM_TimeBaseConfig+0x48>
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	4770      	bx	lr

08002f4c <HAL_HRTIM_SimplePWMChannelConfig>:
{
 8002f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f50:	4604      	mov	r4, r0
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002f52:	f890 00c1 	ldrb.w	r0, [r0, #193]	; 0xc1
 8002f56:	b2c0      	uxtb	r0, r0
 8002f58:	2802      	cmp	r0, #2
 8002f5a:	d022      	beq.n	8002fa2 <HAL_HRTIM_SimplePWMChannelConfig+0x56>
  __HAL_LOCK(hhrtim);
 8002f5c:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
 8002f60:	2801      	cmp	r0, #1
 8002f62:	f000 809e 	beq.w	80030a2 <HAL_HRTIM_SimplePWMChannelConfig+0x156>
 8002f66:	2501      	movs	r5, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002f68:	2002      	movs	r0, #2
  switch (PWMChannel)
 8002f6a:	2a10      	cmp	r2, #16
  __HAL_LOCK(hhrtim);
 8002f6c:	f884 50c0 	strb.w	r5, [r4, #192]	; 0xc0
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002f70:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
  switch (PWMChannel)
 8002f74:	d02a      	beq.n	8002fcc <HAL_HRTIM_SimplePWMChannelConfig+0x80>
 8002f76:	d916      	bls.n	8002fa6 <HAL_HRTIM_SimplePWMChannelConfig+0x5a>
 8002f78:	2a80      	cmp	r2, #128	; 0x80
 8002f7a:	d006      	beq.n	8002f8a <HAL_HRTIM_SimplePWMChannelConfig+0x3e>
 8002f7c:	d922      	bls.n	8002fc4 <HAL_HRTIM_SimplePWMChannelConfig+0x78>
 8002f7e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002f82:	d023      	beq.n	8002fcc <HAL_HRTIM_SimplePWMChannelConfig+0x80>
 8002f84:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002f88:	d114      	bne.n	8002fb4 <HAL_HRTIM_SimplePWMChannelConfig+0x68>
      hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pSimplePWMChannelCfg->Pulse;
 8002f8a:	6820      	ldr	r0, [r4, #0]
      OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP2;
 8002f8c:	2710      	movs	r7, #16
      hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pSimplePWMChannelCfg->Pulse;
 8002f8e:	681d      	ldr	r5, [r3, #0]
 8002f90:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
 8002f94:	f8c0 50a4 	str.w	r5, [r0, #164]	; 0xa4
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8002f98:	f894 00c1 	ldrb.w	r0, [r4, #193]	; 0xc1
 8002f9c:	2807      	cmp	r0, #7
 8002f9e:	d120      	bne.n	8002fe2 <HAL_HRTIM_SimplePWMChannelConfig+0x96>
     return HAL_ERROR;
 8002fa0:	2001      	movs	r0, #1
}
 8002fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (PWMChannel)
 8002fa6:	4282      	cmp	r2, r0
 8002fa8:	d0ef      	beq.n	8002f8a <HAL_HRTIM_SimplePWMChannelConfig+0x3e>
 8002faa:	d967      	bls.n	800307c <HAL_HRTIM_SimplePWMChannelConfig+0x130>
 8002fac:	2a04      	cmp	r2, #4
 8002fae:	d00d      	beq.n	8002fcc <HAL_HRTIM_SimplePWMChannelConfig+0x80>
 8002fb0:	2a08      	cmp	r2, #8
 8002fb2:	d0ea      	beq.n	8002f8a <HAL_HRTIM_SimplePWMChannelConfig+0x3e>
      __HAL_UNLOCK(hhrtim);
 8002fb4:	2000      	movs	r0, #0
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8002fb6:	2507      	movs	r5, #7
      OutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8002fb8:	4607      	mov	r7, r0
      __HAL_UNLOCK(hhrtim);
 8002fba:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8002fbe:	f884 50c1 	strb.w	r5, [r4, #193]	; 0xc1
      break;
 8002fc2:	e00a      	b.n	8002fda <HAL_HRTIM_SimplePWMChannelConfig+0x8e>
  switch (PWMChannel)
 8002fc4:	2a20      	cmp	r2, #32
 8002fc6:	d0e0      	beq.n	8002f8a <HAL_HRTIM_SimplePWMChannelConfig+0x3e>
 8002fc8:	2a40      	cmp	r2, #64	; 0x40
 8002fca:	d1f3      	bne.n	8002fb4 <HAL_HRTIM_SimplePWMChannelConfig+0x68>
      hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pSimplePWMChannelCfg->Pulse;
 8002fcc:	6820      	ldr	r0, [r4, #0]
      OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 8002fce:	2708      	movs	r7, #8
      hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pSimplePWMChannelCfg->Pulse;
 8002fd0:	681d      	ldr	r5, [r3, #0]
 8002fd2:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
 8002fd6:	f8c0 509c 	str.w	r5, [r0, #156]	; 0x9c
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8002fda:	f894 00c1 	ldrb.w	r0, [r4, #193]	; 0xc1
 8002fde:	2807      	cmp	r0, #7
 8002fe0:	d0de      	beq.n	8002fa0 <HAL_HRTIM_SimplePWMChannelConfig+0x54>
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8002fe2:	01c9      	lsls	r1, r1, #7
 8002fe4:	f8d4 c000 	ldr.w	ip, [r4]
  OutputCfg.Polarity = (pSimplePWMChannelCfg->Polarity & HRTIM_OUTR_POL1);
 8002fe8:	6858      	ldr	r0, [r3, #4]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;

  switch (Output)
 8002fea:	2a10      	cmp	r2, #16
  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8002fec:	eb0c 0501 	add.w	r5, ip, r1
  OutputCfg.IdleLevel = (pSimplePWMChannelCfg->IdleLevel& HRTIM_OUTR_IDLES1);
 8002ff0:	689b      	ldr	r3, [r3, #8]
  OutputCfg.Polarity = (pSimplePWMChannelCfg->Polarity & HRTIM_OUTR_POL1);
 8002ff2:	f000 0e02 	and.w	lr, r0, #2
  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8002ff6:	f8d5 80e4 	ldr.w	r8, [r5, #228]	; 0xe4
  OutputCfg.IdleLevel = (pSimplePWMChannelCfg->IdleLevel& HRTIM_OUTR_IDLES1);
 8002ffa:	f003 0308 	and.w	r3, r3, #8
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8002ffe:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
  switch (Output)
 8003002:	d040      	beq.n	8003086 <HAL_HRTIM_SimplePWMChannelConfig+0x13a>
 8003004:	d922      	bls.n	800304c <HAL_HRTIM_SimplePWMChannelConfig+0x100>
 8003006:	2a80      	cmp	r2, #128	; 0x80
 8003008:	d027      	beq.n	800305a <HAL_HRTIM_SimplePWMChannelConfig+0x10e>
 800300a:	d84d      	bhi.n	80030a8 <HAL_HRTIM_SimplePWMChannelConfig+0x15c>
 800300c:	2a20      	cmp	r2, #32
 800300e:	d024      	beq.n	800305a <HAL_HRTIM_SimplePWMChannelConfig+0x10e>
 8003010:	2a40      	cmp	r2, #64	; 0x40
 8003012:	d038      	beq.n	8003086 <HAL_HRTIM_SimplePWMChannelConfig+0x13a>
 8003014:	f06f 00fe 	mvn.w	r0, #254	; 0xfe
  default:
    break;
  }

  /* Clear output config */
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8003018:	ea08 0000 	and.w	r0, r8, r0

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 800301c:	ea43 030e 	orr.w	r3, r3, lr
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8003020:	eb0c 0201 	add.w	r2, ip, r1
  __HAL_UNLOCK(hhrtim);
 8003024:	2500      	movs	r5, #0
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8003026:	4303      	orrs	r3, r0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003028:	2601      	movs	r6, #1
  return HAL_OK;
 800302a:	4628      	mov	r0, r5
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 800302c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003030:	6823      	ldr	r3, [r4, #0]
 8003032:	4419      	add	r1, r3
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003034:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
  hrtim_timcr |= HRTIM_TIMCR_PREEN;
 8003038:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800303c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003040:	f884 60c1 	strb.w	r6, [r4, #193]	; 0xc1
  __HAL_UNLOCK(hhrtim);
 8003044:	f884 50c0 	strb.w	r5, [r4, #192]	; 0xc0
}
 8003048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (Output)
 800304c:	2a02      	cmp	r2, #2
 800304e:	d004      	beq.n	800305a <HAL_HRTIM_SimplePWMChannelConfig+0x10e>
 8003050:	d917      	bls.n	8003082 <HAL_HRTIM_SimplePWMChannelConfig+0x136>
 8003052:	2a04      	cmp	r2, #4
 8003054:	d017      	beq.n	8003086 <HAL_HRTIM_SimplePWMChannelConfig+0x13a>
 8003056:	2a08      	cmp	r2, #8
 8003058:	d1dc      	bne.n	8003014 <HAL_HRTIM_SimplePWMChannelConfig+0xc8>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 800305a:	eb0c 0201 	add.w	r2, ip, r1
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 800305e:	2504      	movs	r5, #4
 8003060:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8003064:	f46f 007e 	mvn.w	r0, #16646144	; 0xfe0000
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8003068:	f8c2 70c4 	str.w	r7, [r2, #196]	; 0xc4
 800306c:	041b      	lsls	r3, r3, #16
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 800306e:	6822      	ldr	r2, [r4, #0]
 8003070:	440a      	add	r2, r1
 8003072:	f8c2 50c8 	str.w	r5, [r2, #200]	; 0xc8
 8003076:	f8d4 c000 	ldr.w	ip, [r4]
 800307a:	e7cd      	b.n	8003018 <HAL_HRTIM_SimplePWMChannelConfig+0xcc>
  switch (PWMChannel)
 800307c:	42aa      	cmp	r2, r5
 800307e:	d199      	bne.n	8002fb4 <HAL_HRTIM_SimplePWMChannelConfig+0x68>
 8003080:	e7a4      	b.n	8002fcc <HAL_HRTIM_SimplePWMChannelConfig+0x80>
  switch (Output)
 8003082:	2a01      	cmp	r2, #1
 8003084:	d1c6      	bne.n	8003014 <HAL_HRTIM_SimplePWMChannelConfig+0xc8>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8003086:	eb0c 0201 	add.w	r2, ip, r1
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 800308a:	2504      	movs	r5, #4
 800308c:	f06f 00fe 	mvn.w	r0, #254	; 0xfe
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8003090:	f8c2 70bc 	str.w	r7, [r2, #188]	; 0xbc
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8003094:	6822      	ldr	r2, [r4, #0]
 8003096:	440a      	add	r2, r1
 8003098:	f8c2 50c0 	str.w	r5, [r2, #192]	; 0xc0
 800309c:	f8d4 c000 	ldr.w	ip, [r4]
 80030a0:	e7ba      	b.n	8003018 <HAL_HRTIM_SimplePWMChannelConfig+0xcc>
     return HAL_BUSY;
 80030a2:	2002      	movs	r0, #2
}
 80030a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (Output)
 80030a8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80030ac:	d0eb      	beq.n	8003086 <HAL_HRTIM_SimplePWMChannelConfig+0x13a>
 80030ae:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80030b2:	d1af      	bne.n	8003014 <HAL_HRTIM_SimplePWMChannelConfig+0xc8>
 80030b4:	e7d1      	b.n	800305a <HAL_HRTIM_SimplePWMChannelConfig+0x10e>
 80030b6:	bf00      	nop

080030b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030b8:	b570      	push	{r4, r5, r6, lr}
 80030ba:	4604      	mov	r4, r0
 80030bc:	460d      	mov	r5, r1
 80030be:	4616      	mov	r6, r2
 80030c0:	1c6b      	adds	r3, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030c2:	6822      	ldr	r2, [r4, #0]
 80030c4:	d12e      	bne.n	8003124 <I2C_WaitOnTXISFlagUntilTimeout+0x6c>
 80030c6:	6993      	ldr	r3, [r2, #24]
 80030c8:	0798      	lsls	r0, r3, #30
 80030ca:	d42e      	bmi.n	800312a <I2C_WaitOnTXISFlagUntilTimeout+0x72>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030cc:	6993      	ldr	r3, [r2, #24]
 80030ce:	06d9      	lsls	r1, r3, #27
 80030d0:	d5f9      	bpl.n	80030c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030d2:	6993      	ldr	r3, [r2, #24]
 80030d4:	069d      	lsls	r5, r3, #26
 80030d6:	d5fc      	bpl.n	80030d2 <I2C_WaitOnTXISFlagUntilTimeout+0x1a>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030d8:	2310      	movs	r3, #16

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030da:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030dc:	61d3      	str	r3, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030de:	6823      	ldr	r3, [r4, #0]
 80030e0:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030e2:	6823      	ldr	r3, [r4, #0]
 80030e4:	699a      	ldr	r2, [r3, #24]
 80030e6:	0791      	lsls	r1, r2, #30
 80030e8:	d502      	bpl.n	80030f0 <I2C_WaitOnTXISFlagUntilTimeout+0x38>
    hi2c->Instance->TXDR = 0x00U;
 80030ea:	2200      	movs	r2, #0
 80030ec:	629a      	str	r2, [r3, #40]	; 0x28
 80030ee:	6823      	ldr	r3, [r4, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030f0:	699a      	ldr	r2, [r3, #24]
 80030f2:	07d2      	lsls	r2, r2, #31
 80030f4:	d404      	bmi.n	8003100 <I2C_WaitOnTXISFlagUntilTimeout+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80030f6:	699a      	ldr	r2, [r3, #24]
 80030f8:	f042 0201 	orr.w	r2, r2, #1
 80030fc:	619a      	str	r2, [r3, #24]
 80030fe:	6823      	ldr	r3, [r4, #0]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003100:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003102:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8003104:	4e1b      	ldr	r6, [pc, #108]	; (8003174 <I2C_WaitOnTXISFlagUntilTimeout+0xbc>)
    hi2c->State = HAL_I2C_STATE_READY;
 8003106:	2520      	movs	r5, #32
      return HAL_ERROR;
 8003108:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800310a:	4032      	ands	r2, r6
 800310c:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800310e:	6c63      	ldr	r3, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003110:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003114:	f043 0304 	orr.w	r3, r3, #4
 8003118:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800311a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800311e:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8003122:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003124:	6993      	ldr	r3, [r2, #24]
 8003126:	079b      	lsls	r3, r3, #30
 8003128:	d501      	bpl.n	800312e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  return HAL_OK;
 800312a:	2000      	movs	r0, #0
}
 800312c:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800312e:	6993      	ldr	r3, [r2, #24]
 8003130:	06db      	lsls	r3, r3, #27
 8003132:	d407      	bmi.n	8003144 <I2C_WaitOnTXISFlagUntilTimeout+0x8c>
 8003134:	e00a      	b.n	800314c <I2C_WaitOnTXISFlagUntilTimeout+0x94>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003136:	f7fd f933 	bl	80003a0 <HAL_GetTick>
 800313a:	1b80      	subs	r0, r0, r6
 800313c:	4285      	cmp	r5, r0
 800313e:	d30c      	bcc.n	800315a <I2C_WaitOnTXISFlagUntilTimeout+0xa2>
 8003140:	b15d      	cbz	r5, 800315a <I2C_WaitOnTXISFlagUntilTimeout+0xa2>
 8003142:	6822      	ldr	r2, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003144:	6993      	ldr	r3, [r2, #24]
 8003146:	0698      	lsls	r0, r3, #26
 8003148:	d5f5      	bpl.n	8003136 <I2C_WaitOnTXISFlagUntilTimeout+0x7e>
 800314a:	e7c5      	b.n	80030d8 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314c:	f7fd f928 	bl	80003a0 <HAL_GetTick>
 8003150:	1b80      	subs	r0, r0, r6
 8003152:	42a8      	cmp	r0, r5
 8003154:	d801      	bhi.n	800315a <I2C_WaitOnTXISFlagUntilTimeout+0xa2>
 8003156:	2d00      	cmp	r5, #0
 8003158:	d1b2      	bne.n	80030c0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800315a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800315c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800315e:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8003160:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003162:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8003164:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003168:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800316a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800316e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8003172:	bd70      	pop	{r4, r5, r6, pc}
 8003174:	fe00e800 	.word	0xfe00e800

08003178 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003178:	b570      	push	{r4, r5, r6, lr}
 800317a:	4604      	mov	r4, r0
 800317c:	460d      	mov	r5, r1
 800317e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003180:	6822      	ldr	r2, [r4, #0]
 8003182:	6993      	ldr	r3, [r2, #24]
 8003184:	069b      	lsls	r3, r3, #26
 8003186:	d44d      	bmi.n	8003224 <I2C_WaitOnSTOPFlagUntilTimeout+0xac>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003188:	6993      	ldr	r3, [r2, #24]
 800318a:	06d9      	lsls	r1, r3, #27
 800318c:	d52a      	bpl.n	80031e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
 800318e:	1c6b      	adds	r3, r5, #1
 8003190:	d13c      	bne.n	800320c <I2C_WaitOnSTOPFlagUntilTimeout+0x94>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003192:	6993      	ldr	r3, [r2, #24]
 8003194:	069d      	lsls	r5, r3, #26
 8003196:	d5fc      	bpl.n	8003192 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003198:	2310      	movs	r3, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800319a:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800319c:	61d3      	str	r3, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800319e:	6823      	ldr	r3, [r4, #0]
 80031a0:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031a2:	6823      	ldr	r3, [r4, #0]
 80031a4:	699a      	ldr	r2, [r3, #24]
 80031a6:	0791      	lsls	r1, r2, #30
 80031a8:	d502      	bpl.n	80031b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
    hi2c->Instance->TXDR = 0x00U;
 80031aa:	2200      	movs	r2, #0
 80031ac:	629a      	str	r2, [r3, #40]	; 0x28
 80031ae:	6823      	ldr	r3, [r4, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	07d2      	lsls	r2, r2, #31
 80031b4:	d404      	bmi.n	80031c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031b6:	699a      	ldr	r2, [r3, #24]
 80031b8:	f042 0201 	orr.w	r2, r2, #1
 80031bc:	619a      	str	r2, [r3, #24]
 80031be:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80031c0:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c2:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 80031c4:	4e18      	ldr	r6, [pc, #96]	; (8003228 <I2C_WaitOnSTOPFlagUntilTimeout+0xb0>)
    hi2c->State = HAL_I2C_STATE_READY;
 80031c6:	2520      	movs	r5, #32
      return HAL_ERROR;
 80031c8:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80031ca:	4032      	ands	r2, r6
 80031cc:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 80031d0:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031d4:	f043 0304 	orr.w	r3, r3, #4
 80031d8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031da:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031de:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 80031e2:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e4:	f7fd f8dc 	bl	80003a0 <HAL_GetTick>
 80031e8:	1b80      	subs	r0, r0, r6
 80031ea:	42a8      	cmp	r0, r5
 80031ec:	d801      	bhi.n	80031f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
 80031ee:	2d00      	cmp	r5, #0
 80031f0:	d1c6      	bne.n	8003180 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031f4:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f6:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 80031f8:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031fa:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 80031fc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003200:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003202:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003206:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800320a:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800320c:	6993      	ldr	r3, [r2, #24]
 800320e:	0698      	lsls	r0, r3, #26
 8003210:	d4c2      	bmi.n	8003198 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003212:	f7fd f8c5 	bl	80003a0 <HAL_GetTick>
 8003216:	1b80      	subs	r0, r0, r6
 8003218:	4285      	cmp	r5, r0
 800321a:	d3ea      	bcc.n	80031f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
 800321c:	2d00      	cmp	r5, #0
 800321e:	d0e8      	beq.n	80031f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
 8003220:	6822      	ldr	r2, [r4, #0]
 8003222:	e7b4      	b.n	800318e <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8003224:	2000      	movs	r0, #0
}
 8003226:	bd70      	pop	{r4, r5, r6, pc}
 8003228:	fe00e800 	.word	0xfe00e800

0800322c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800322c:	2800      	cmp	r0, #0
 800322e:	d056      	beq.n	80032de <HAL_I2C_Init+0xb2>
{
 8003230:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003232:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003236:	4604      	mov	r4, r0
 8003238:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800323c:	2b00      	cmp	r3, #0
 800323e:	d049      	beq.n	80032d4 <HAL_I2C_Init+0xa8>
  __HAL_I2C_DISABLE(hi2c);
 8003240:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003242:	2324      	movs	r3, #36	; 0x24
 8003244:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003248:	6813      	ldr	r3, [r2, #0]
 800324a:	f023 0301 	bic.w	r3, r3, #1
 800324e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003250:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003254:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003258:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800325a:	6822      	ldr	r2, [r4, #0]
 800325c:	6893      	ldr	r3, [r2, #8]
 800325e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003262:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003264:	68e3      	ldr	r3, [r4, #12]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003266:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003268:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800326a:	68a3      	ldr	r3, [r4, #8]
 800326c:	bf0c      	ite	eq
 800326e:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003272:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 8003276:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003278:	68e3      	ldr	r3, [r4, #12]
 800327a:	6825      	ldr	r5, [r4, #0]
 800327c:	2b02      	cmp	r3, #2
 800327e:	d024      	beq.n	80032ca <HAL_I2C_Init+0x9e>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003280:	6868      	ldr	r0, [r5, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003282:	2200      	movs	r2, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003284:	4b17      	ldr	r3, [pc, #92]	; (80032e4 <HAL_I2C_Init+0xb8>)
  hi2c->State = HAL_I2C_STATE_READY;
 8003286:	2120      	movs	r1, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003288:	4303      	orrs	r3, r0
  return HAL_OK;
 800328a:	4610      	mov	r0, r2
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800328c:	606b      	str	r3, [r5, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800328e:	6825      	ldr	r5, [r4, #0]
 8003290:	68eb      	ldr	r3, [r5, #12]
 8003292:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003296:	60eb      	str	r3, [r5, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003298:	e9d4 3504 	ldrd	r3, r5, [r4, #16]
 800329c:	432b      	orrs	r3, r5
 800329e:	69a5      	ldr	r5, [r4, #24]
 80032a0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80032a4:	6825      	ldr	r5, [r4, #0]
 80032a6:	60eb      	str	r3, [r5, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032a8:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 80032ac:	432b      	orrs	r3, r5
 80032ae:	6825      	ldr	r5, [r4, #0]
 80032b0:	602b      	str	r3, [r5, #0]
  __HAL_I2C_ENABLE(hi2c);
 80032b2:	6825      	ldr	r5, [r4, #0]
 80032b4:	682b      	ldr	r3, [r5, #0]
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	602b      	str	r3, [r5, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032bc:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032be:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032c2:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 80032c8:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80032ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032ce:	606b      	str	r3, [r5, #4]
 80032d0:	6825      	ldr	r5, [r4, #0]
 80032d2:	e7d5      	b.n	8003280 <HAL_I2C_Init+0x54>
    hi2c->Lock = HAL_UNLOCKED;
 80032d4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80032d8:	f005 fd26 	bl	8008d28 <HAL_I2C_MspInit>
 80032dc:	e7b0      	b.n	8003240 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 80032de:	2001      	movs	r0, #1
}
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	02008000 	.word	0x02008000

080032e8 <HAL_I2C_Master_Transmit>:
{
 80032e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ec:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 80032f0:	9e08      	ldr	r6, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80032f2:	2c20      	cmp	r4, #32
 80032f4:	d170      	bne.n	80033d8 <HAL_I2C_Master_Transmit+0xf0>
    __HAL_LOCK(hi2c);
 80032f6:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80032fa:	2c01      	cmp	r4, #1
 80032fc:	d06c      	beq.n	80033d8 <HAL_I2C_Master_Transmit+0xf0>
 80032fe:	4698      	mov	r8, r3
 8003300:	2301      	movs	r3, #1
 8003302:	4691      	mov	r9, r2
 8003304:	460f      	mov	r7, r1
 8003306:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800330a:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 800330c:	f7fd f848 	bl	80003a0 <HAL_GetTick>
 8003310:	4605      	mov	r5, r0
 8003312:	e004      	b.n	800331e <HAL_I2C_Master_Transmit+0x36>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003314:	f7fd f844 	bl	80003a0 <HAL_GetTick>
 8003318:	1b40      	subs	r0, r0, r5
 800331a:	2819      	cmp	r0, #25
 800331c:	d873      	bhi.n	8003406 <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	6998      	ldr	r0, [r3, #24]
 8003322:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8003326:	d1f5      	bne.n	8003314 <HAL_I2C_Master_Transmit+0x2c>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003328:	2210      	movs	r2, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800332a:	2121      	movs	r1, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 800332c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8003330:	f3c7 0709 	ubfx	r7, r7, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003334:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003338:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800333c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800333e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003342:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003344:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003346:	2aff      	cmp	r2, #255	; 0xff
 8003348:	d849      	bhi.n	80033de <HAL_I2C_Master_Transmit+0xf6>
      hi2c->XferSize = hi2c->XferCount;
 800334a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800334c:	4a47      	ldr	r2, [pc, #284]	; (800346c <HAL_I2C_Master_Transmit+0x184>)
      hi2c->XferSize = hi2c->XferCount;
 800334e:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003350:	f8df c11c 	ldr.w	ip, [pc, #284]	; 8003470 <HAL_I2C_Master_Transmit+0x188>
 8003354:	433a      	orrs	r2, r7
      hi2c->XferSize = hi2c->XferCount;
 8003356:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003358:	b2c9      	uxtb	r1, r1
 800335a:	6858      	ldr	r0, [r3, #4]
 800335c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003360:	ea00 010c 	and.w	r1, r0, ip
 8003364:	430a      	orrs	r2, r1
 8003366:	605a      	str	r2, [r3, #4]
 8003368:	f8df 8110 	ldr.w	r8, [pc, #272]	; 800347c <HAL_I2C_Master_Transmit+0x194>
 800336c:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8003480 <HAL_I2C_Master_Transmit+0x198>
 8003370:	ea47 0808 	orr.w	r8, r7, r8
    while (hi2c->XferCount > 0U)
 8003374:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003376:	462a      	mov	r2, r5
 8003378:	4631      	mov	r1, r6
 800337a:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d060      	beq.n	8003444 <HAL_I2C_Master_Transmit+0x15c>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003382:	f7ff fe99 	bl	80030b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003386:	2800      	cmp	r0, #0
 8003388:	d159      	bne.n	800343e <HAL_I2C_Master_Transmit+0x156>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800338a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800338c:	6823      	ldr	r3, [r4, #0]
 800338e:	7812      	ldrb	r2, [r2, #0]
 8003390:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003392:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003394:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003396:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 8003398:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800339a:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800339c:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 800339e:	3201      	adds	r2, #1
      hi2c->XferSize--;
 80033a0:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 80033a2:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033a4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80033a6:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033a8:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 80033aa:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033ac:	2900      	cmp	r1, #0
 80033ae:	d0e1      	beq.n	8003374 <HAL_I2C_Master_Transmit+0x8c>
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1df      	bne.n	8003374 <HAL_I2C_Master_Transmit+0x8c>
 80033b4:	1c70      	adds	r0, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033b6:	6822      	ldr	r2, [r4, #0]
 80033b8:	d11b      	bne.n	80033f2 <HAL_I2C_Master_Transmit+0x10a>
 80033ba:	6993      	ldr	r3, [r2, #24]
 80033bc:	0619      	lsls	r1, r3, #24
 80033be:	d5fc      	bpl.n	80033ba <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80033c2:	2bff      	cmp	r3, #255	; 0xff
 80033c4:	d92d      	bls.n	8003422 <HAL_I2C_Master_Transmit+0x13a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033c6:	23ff      	movs	r3, #255	; 0xff
 80033c8:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80033ca:	6853      	ldr	r3, [r2, #4]
 80033cc:	ea03 0309 	and.w	r3, r3, r9
 80033d0:	ea43 0308 	orr.w	r3, r3, r8
 80033d4:	6053      	str	r3, [r2, #4]
 80033d6:	e7cd      	b.n	8003374 <HAL_I2C_Master_Transmit+0x8c>
    return HAL_BUSY;
 80033d8:	2002      	movs	r0, #2
}
 80033da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033de:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80033e0:	4823      	ldr	r0, [pc, #140]	; (8003470 <HAL_I2C_Master_Transmit+0x188>)
 80033e2:	4924      	ldr	r1, [pc, #144]	; (8003474 <HAL_I2C_Master_Transmit+0x18c>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033e4:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	4339      	orrs	r1, r7
 80033ea:	4002      	ands	r2, r0
 80033ec:	430a      	orrs	r2, r1
 80033ee:	605a      	str	r2, [r3, #4]
 80033f0:	e7ba      	b.n	8003368 <HAL_I2C_Master_Transmit+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033f2:	6993      	ldr	r3, [r2, #24]
 80033f4:	061b      	lsls	r3, r3, #24
 80033f6:	d4e3      	bmi.n	80033c0 <HAL_I2C_Master_Transmit+0xd8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f8:	f7fc ffd2 	bl	80003a0 <HAL_GetTick>
 80033fc:	1b40      	subs	r0, r0, r5
 80033fe:	4286      	cmp	r6, r0
 8003400:	d301      	bcc.n	8003406 <HAL_I2C_Master_Transmit+0x11e>
 8003402:	2e00      	cmp	r6, #0
 8003404:	d1d6      	bne.n	80033b4 <HAL_I2C_Master_Transmit+0xcc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003406:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003408:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800340a:	2200      	movs	r2, #0
          return HAL_ERROR;
 800340c:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800340e:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8003410:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003414:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003416:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800341a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800341e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          hi2c->XferSize = hi2c->XferCount;
 8003422:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003424:	f047 7300 	orr.w	r3, r7, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8003428:	b289      	uxth	r1, r1
 800342a:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800342c:	b2c9      	uxtb	r1, r1
 800342e:	6850      	ldr	r0, [r2, #4]
 8003430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003434:	ea00 0109 	and.w	r1, r0, r9
 8003438:	430b      	orrs	r3, r1
 800343a:	6053      	str	r3, [r2, #4]
 800343c:	e79a      	b.n	8003374 <HAL_I2C_Master_Transmit+0x8c>
        return HAL_ERROR;
 800343e:	2001      	movs	r0, #1
}
 8003440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003444:	f7ff fe98 	bl	8003178 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003448:	2800      	cmp	r0, #0
 800344a:	d1f8      	bne.n	800343e <HAL_I2C_Master_Transmit+0x156>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	2220      	movs	r2, #32
    I2C_RESET_CR2(hi2c);
 8003450:	4d09      	ldr	r5, [pc, #36]	; (8003478 <HAL_I2C_Master_Transmit+0x190>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003452:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003454:	6821      	ldr	r1, [r4, #0]
 8003456:	684b      	ldr	r3, [r1, #4]
 8003458:	402b      	ands	r3, r5
 800345a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800345c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003460:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003464:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8003468:	e7b7      	b.n	80033da <HAL_I2C_Master_Transmit+0xf2>
 800346a:	bf00      	nop
 800346c:	82002000 	.word	0x82002000
 8003470:	fc009800 	.word	0xfc009800
 8003474:	81ff2000 	.word	0x81ff2000
 8003478:	fe00e800 	.word	0xfe00e800
 800347c:	01ff0000 	.word	0x01ff0000
 8003480:	fc009c00 	.word	0xfc009c00

08003484 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003484:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	2a20      	cmp	r2, #32
 800348c:	d126      	bne.n	80034dc <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800348e:	4603      	mov	r3, r0
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003490:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8003494:	2801      	cmp	r0, #1
 8003496:	d021      	beq.n	80034dc <HAL_I2CEx_ConfigAnalogFilter+0x58>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003498:	2024      	movs	r0, #36	; 0x24
{
 800349a:	b470      	push	{r4, r5, r6}
    __HAL_LOCK(hi2c);
 800349c:	2401      	movs	r4, #1

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800349e:	681e      	ldr	r6, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80034a0:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a4:	2500      	movs	r5, #0
    __HAL_LOCK(hi2c);
 80034a6:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 80034aa:	6834      	ldr	r4, [r6, #0]

    return HAL_OK;
 80034ac:	4628      	mov	r0, r5
    __HAL_I2C_DISABLE(hi2c);
 80034ae:	f024 0401 	bic.w	r4, r4, #1
 80034b2:	6034      	str	r4, [r6, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034b4:	681e      	ldr	r6, [r3, #0]
 80034b6:	6834      	ldr	r4, [r6, #0]
 80034b8:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80034bc:	6034      	str	r4, [r6, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80034be:	681e      	ldr	r6, [r3, #0]
 80034c0:	6834      	ldr	r4, [r6, #0]
 80034c2:	4321      	orrs	r1, r4
 80034c4:	6031      	str	r1, [r6, #0]
    __HAL_I2C_ENABLE(hi2c);
 80034c6:	681c      	ldr	r4, [r3, #0]
 80034c8:	6821      	ldr	r1, [r4, #0]
 80034ca:	f041 0101 	orr.w	r1, r1, #1
 80034ce:	6021      	str	r1, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80034d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80034d4:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80034d8:	bc70      	pop	{r4, r5, r6}
 80034da:	4770      	bx	lr
    return HAL_BUSY;
 80034dc:	2002      	movs	r0, #2
}
 80034de:	4770      	bx	lr

080034e0 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	2a20      	cmp	r2, #32
 80034e8:	d124      	bne.n	8003534 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80034ea:	4603      	mov	r3, r0
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ec:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 80034f0:	2801      	cmp	r0, #1
 80034f2:	d01f      	beq.n	8003534 <HAL_I2CEx_ConfigDigitalFilter+0x54>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034f4:	2024      	movs	r0, #36	; 0x24
{
 80034f6:	b470      	push	{r4, r5, r6}
    __HAL_LOCK(hi2c);
 80034f8:	2401      	movs	r4, #1

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034fa:	681e      	ldr	r6, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80034fc:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003500:	2500      	movs	r5, #0
    __HAL_LOCK(hi2c);
 8003502:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 8003506:	6834      	ldr	r4, [r6, #0]

    return HAL_OK;
 8003508:	4628      	mov	r0, r5
    __HAL_I2C_DISABLE(hi2c);
 800350a:	f024 0401 	bic.w	r4, r4, #1
 800350e:	6034      	str	r4, [r6, #0]
    tmpreg = hi2c->Instance->CR1;
 8003510:	681e      	ldr	r6, [r3, #0]
 8003512:	6834      	ldr	r4, [r6, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8003514:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8003518:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 800351c:	6031      	str	r1, [r6, #0]
    __HAL_I2C_ENABLE(hi2c);
 800351e:	681c      	ldr	r4, [r3, #0]
 8003520:	6821      	ldr	r1, [r4, #0]
 8003522:	f041 0101 	orr.w	r1, r1, #1
 8003526:	6021      	str	r1, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800352c:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003530:	bc70      	pop	{r4, r5, r6}
 8003532:	4770      	bx	lr
    return HAL_BUSY;
 8003534:	2002      	movs	r0, #2
}
 8003536:	4770      	bx	lr

08003538 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003538:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800353a:	4b11      	ldr	r3, [pc, #68]	; (8003580 <HAL_PWREx_ConfigSupply+0x48>)
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	0752      	lsls	r2, r2, #29
 8003540:	d406      	bmi.n	8003550 <HAL_PWREx_ConfigSupply+0x18>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003548:	1a18      	subs	r0, r3, r0
 800354a:	bf18      	it	ne
 800354c:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800354e:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003550:	68da      	ldr	r2, [r3, #12]
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003552:	461c      	mov	r4, r3
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003554:	f022 0207 	bic.w	r2, r2, #7
 8003558:	4310      	orrs	r0, r2
 800355a:	60d8      	str	r0, [r3, #12]
  tickstart = HAL_GetTick ();
 800355c:	f7fc ff20 	bl	80003a0 <HAL_GetTick>
 8003560:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003562:	e005      	b.n	8003570 <HAL_PWREx_ConfigSupply+0x38>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003564:	f7fc ff1c 	bl	80003a0 <HAL_GetTick>
 8003568:	1b40      	subs	r0, r0, r5
 800356a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800356e:	d804      	bhi.n	800357a <HAL_PWREx_ConfigSupply+0x42>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003570:	6863      	ldr	r3, [r4, #4]
 8003572:	049b      	lsls	r3, r3, #18
 8003574:	d5f6      	bpl.n	8003564 <HAL_PWREx_ConfigSupply+0x2c>
  return HAL_OK;
 8003576:	2000      	movs	r0, #0
}
 8003578:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800357a:	2001      	movs	r0, #1
}
 800357c:	bd38      	pop	{r3, r4, r5, pc}
 800357e:	bf00      	nop
 8003580:	58024800 	.word	0x58024800

08003584 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003584:	2800      	cmp	r0, #0
 8003586:	f000 8188 	beq.w	800389a <HAL_RCC_OscConfig+0x316>
{
 800358a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800358c:	6803      	ldr	r3, [r0, #0]
 800358e:	4604      	mov	r4, r0
 8003590:	07d9      	lsls	r1, r3, #31
 8003592:	d52e      	bpl.n	80035f2 <HAL_RCC_OscConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003594:	49b2      	ldr	r1, [pc, #712]	; (8003860 <HAL_RCC_OscConfig+0x2dc>)
 8003596:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003598:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800359a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800359e:	2a10      	cmp	r2, #16
 80035a0:	f000 8102 	beq.w	80037a8 <HAL_RCC_OscConfig+0x224>
 80035a4:	2a18      	cmp	r2, #24
 80035a6:	f000 80fa 	beq.w	800379e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035aa:	6863      	ldr	r3, [r4, #4]
 80035ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b0:	f000 8122 	beq.w	80037f8 <HAL_RCC_OscConfig+0x274>
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f040 8198 	bne.w	80038ea <HAL_RCC_OscConfig+0x366>
 80035ba:	4ba9      	ldr	r3, [pc, #676]	; (8003860 <HAL_RCC_OscConfig+0x2dc>)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035ca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035cc:	6863      	ldr	r3, [r4, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 8155 	beq.w	800387e <HAL_RCC_OscConfig+0x2fa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d4:	f7fc fee4 	bl	80003a0 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035d8:	4da1      	ldr	r5, [pc, #644]	; (8003860 <HAL_RCC_OscConfig+0x2dc>)
        tickstart = HAL_GetTick();
 80035da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035dc:	e005      	b.n	80035ea <HAL_RCC_OscConfig+0x66>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035de:	f7fc fedf 	bl	80003a0 <HAL_GetTick>
 80035e2:	1b80      	subs	r0, r0, r6
 80035e4:	2864      	cmp	r0, #100	; 0x64
 80035e6:	f200 8148 	bhi.w	800387a <HAL_RCC_OscConfig+0x2f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035ea:	682b      	ldr	r3, [r5, #0]
 80035ec:	039f      	lsls	r7, r3, #14
 80035ee:	d5f6      	bpl.n	80035de <HAL_RCC_OscConfig+0x5a>
 80035f0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035f2:	0799      	lsls	r1, r3, #30
 80035f4:	f100 808a 	bmi.w	800370c <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80035f8:	06d9      	lsls	r1, r3, #27
 80035fa:	d530      	bpl.n	800365e <HAL_RCC_OscConfig+0xda>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035fc:	4a98      	ldr	r2, [pc, #608]	; (8003860 <HAL_RCC_OscConfig+0x2dc>)
 80035fe:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003600:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003602:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003606:	2b08      	cmp	r3, #8
 8003608:	f000 80de 	beq.w	80037c8 <HAL_RCC_OscConfig+0x244>
 800360c:	2b18      	cmp	r3, #24
 800360e:	f000 80d6 	beq.w	80037be <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003612:	69e3      	ldr	r3, [r4, #28]
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 8176 	beq.w	8003906 <HAL_RCC_OscConfig+0x382>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800361a:	4b91      	ldr	r3, [pc, #580]	; (8003860 <HAL_RCC_OscConfig+0x2dc>)
 800361c:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800361e:	461d      	mov	r5, r3
        __HAL_RCC_CSI_ENABLE();
 8003620:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003624:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003626:	f7fc febb 	bl	80003a0 <HAL_GetTick>
 800362a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800362c:	e005      	b.n	800363a <HAL_RCC_OscConfig+0xb6>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800362e:	f7fc feb7 	bl	80003a0 <HAL_GetTick>
 8003632:	1b80      	subs	r0, r0, r6
 8003634:	2802      	cmp	r0, #2
 8003636:	f200 8120 	bhi.w	800387a <HAL_RCC_OscConfig+0x2f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800363a:	682b      	ldr	r3, [r5, #0]
 800363c:	05db      	lsls	r3, r3, #23
 800363e:	d5f6      	bpl.n	800362e <HAL_RCC_OscConfig+0xaa>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003640:	f7fc fec6 	bl	80003d0 <HAL_GetREVID>
 8003644:	f241 0303 	movw	r3, #4099	; 0x1003
 8003648:	4298      	cmp	r0, r3
 800364a:	f200 823c 	bhi.w	8003ac6 <HAL_RCC_OscConfig+0x542>
 800364e:	686b      	ldr	r3, [r5, #4]
 8003650:	6a22      	ldr	r2, [r4, #32]
 8003652:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003656:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800365a:	606b      	str	r3, [r5, #4]
 800365c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800365e:	071d      	lsls	r5, r3, #28
 8003660:	d517      	bpl.n	8003692 <HAL_RCC_OscConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003662:	6963      	ldr	r3, [r4, #20]
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 811a 	beq.w	800389e <HAL_RCC_OscConfig+0x31a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800366a:	4b7d      	ldr	r3, [pc, #500]	; (8003860 <HAL_RCC_OscConfig+0x2dc>)
 800366c:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800366e:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8003670:	f042 0201 	orr.w	r2, r2, #1
 8003674:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003676:	f7fc fe93 	bl	80003a0 <HAL_GetTick>
 800367a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800367c:	e005      	b.n	800368a <HAL_RCC_OscConfig+0x106>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800367e:	f7fc fe8f 	bl	80003a0 <HAL_GetTick>
 8003682:	1b80      	subs	r0, r0, r6
 8003684:	2802      	cmp	r0, #2
 8003686:	f200 80f8 	bhi.w	800387a <HAL_RCC_OscConfig+0x2f6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800368a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800368c:	0798      	lsls	r0, r3, #30
 800368e:	d5f6      	bpl.n	800367e <HAL_RCC_OscConfig+0xfa>
 8003690:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003692:	069a      	lsls	r2, r3, #26
 8003694:	d517      	bpl.n	80036c6 <HAL_RCC_OscConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003696:	69a3      	ldr	r3, [r4, #24]
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 8113 	beq.w	80038c4 <HAL_RCC_OscConfig+0x340>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800369e:	4b70      	ldr	r3, [pc, #448]	; (8003860 <HAL_RCC_OscConfig+0x2dc>)
 80036a0:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80036a2:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_ENABLE();
 80036a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036a8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80036aa:	f7fc fe79 	bl	80003a0 <HAL_GetTick>
 80036ae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80036b0:	e005      	b.n	80036be <HAL_RCC_OscConfig+0x13a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80036b2:	f7fc fe75 	bl	80003a0 <HAL_GetTick>
 80036b6:	1b80      	subs	r0, r0, r6
 80036b8:	2802      	cmp	r0, #2
 80036ba:	f200 80de 	bhi.w	800387a <HAL_RCC_OscConfig+0x2f6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80036be:	682b      	ldr	r3, [r5, #0]
 80036c0:	049f      	lsls	r7, r3, #18
 80036c2:	d5f6      	bpl.n	80036b2 <HAL_RCC_OscConfig+0x12e>
 80036c4:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c6:	0759      	lsls	r1, r3, #29
 80036c8:	f100 809c 	bmi.w	8003804 <HAL_RCC_OscConfig+0x280>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036cc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80036ce:	b1d8      	cbz	r0, 8003708 <HAL_RCC_OscConfig+0x184>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80036d0:	4b63      	ldr	r3, [pc, #396]	; (8003860 <HAL_RCC_OscConfig+0x2dc>)
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80036d8:	2a18      	cmp	r2, #24
 80036da:	f000 81b5 	beq.w	8003a48 <HAL_RCC_OscConfig+0x4c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036de:	2802      	cmp	r0, #2
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e0:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036e2:	f000 8147 	beq.w	8003974 <HAL_RCC_OscConfig+0x3f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036ea:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 80036ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80036ee:	f7fc fe57 	bl	80003a0 <HAL_GetTick>
 80036f2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036f4:	e005      	b.n	8003702 <HAL_RCC_OscConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f6:	f7fc fe53 	bl	80003a0 <HAL_GetTick>
 80036fa:	1b40      	subs	r0, r0, r5
 80036fc:	2802      	cmp	r0, #2
 80036fe:	f200 80bc 	bhi.w	800387a <HAL_RCC_OscConfig+0x2f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003702:	6823      	ldr	r3, [r4, #0]
 8003704:	019b      	lsls	r3, r3, #6
 8003706:	d4f6      	bmi.n	80036f6 <HAL_RCC_OscConfig+0x172>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8003708:	2000      	movs	r0, #0
}
 800370a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800370c:	4a54      	ldr	r2, [pc, #336]	; (8003860 <HAL_RCC_OscConfig+0x2dc>)
 800370e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003710:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003712:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8003716:	d02b      	beq.n	8003770 <HAL_RCC_OscConfig+0x1ec>
 8003718:	2b18      	cmp	r3, #24
 800371a:	d027      	beq.n	800376c <HAL_RCC_OscConfig+0x1e8>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800371c:	68e2      	ldr	r2, [r4, #12]
 800371e:	2a00      	cmp	r2, #0
 8003720:	f000 8105 	beq.w	800392e <HAL_RCC_OscConfig+0x3aa>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003724:	494e      	ldr	r1, [pc, #312]	; (8003860 <HAL_RCC_OscConfig+0x2dc>)
 8003726:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003728:	460d      	mov	r5, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800372a:	f023 0319 	bic.w	r3, r3, #25
 800372e:	4313      	orrs	r3, r2
 8003730:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8003732:	f7fc fe35 	bl	80003a0 <HAL_GetTick>
 8003736:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003738:	e005      	b.n	8003746 <HAL_RCC_OscConfig+0x1c2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800373a:	f7fc fe31 	bl	80003a0 <HAL_GetTick>
 800373e:	1b80      	subs	r0, r0, r6
 8003740:	2802      	cmp	r0, #2
 8003742:	f200 809a 	bhi.w	800387a <HAL_RCC_OscConfig+0x2f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003746:	682b      	ldr	r3, [r5, #0]
 8003748:	075f      	lsls	r7, r3, #29
 800374a:	d5f6      	bpl.n	800373a <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800374c:	f7fc fe40 	bl	80003d0 <HAL_GetREVID>
 8003750:	f241 0303 	movw	r3, #4099	; 0x1003
 8003754:	6922      	ldr	r2, [r4, #16]
 8003756:	4298      	cmp	r0, r3
 8003758:	686b      	ldr	r3, [r5, #4]
 800375a:	f200 81bd 	bhi.w	8003ad8 <HAL_RCC_OscConfig+0x554>
 800375e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003762:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8003766:	606b      	str	r3, [r5, #4]
 8003768:	6823      	ldr	r3, [r4, #0]
 800376a:	e745      	b.n	80035f8 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800376c:	0792      	lsls	r2, r2, #30
 800376e:	d1d5      	bne.n	800371c <HAL_RCC_OscConfig+0x198>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003770:	4b3b      	ldr	r3, [pc, #236]	; (8003860 <HAL_RCC_OscConfig+0x2dc>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	075b      	lsls	r3, r3, #29
 8003776:	d501      	bpl.n	800377c <HAL_RCC_OscConfig+0x1f8>
 8003778:	68e3      	ldr	r3, [r4, #12]
 800377a:	b1f3      	cbz	r3, 80037ba <HAL_RCC_OscConfig+0x236>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800377c:	f7fc fe28 	bl	80003d0 <HAL_GetREVID>
 8003780:	f241 0303 	movw	r3, #4099	; 0x1003
 8003784:	4a36      	ldr	r2, [pc, #216]	; (8003860 <HAL_RCC_OscConfig+0x2dc>)
 8003786:	4298      	cmp	r0, r3
 8003788:	6921      	ldr	r1, [r4, #16]
 800378a:	6853      	ldr	r3, [r2, #4]
 800378c:	f200 80e3 	bhi.w	8003956 <HAL_RCC_OscConfig+0x3d2>
 8003790:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003794:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8003798:	6053      	str	r3, [r2, #4]
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	e72c      	b.n	80035f8 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800379e:	f001 0103 	and.w	r1, r1, #3
 80037a2:	2902      	cmp	r1, #2
 80037a4:	f47f af01 	bne.w	80035aa <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a8:	4a2d      	ldr	r2, [pc, #180]	; (8003860 <HAL_RCC_OscConfig+0x2dc>)
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	0392      	lsls	r2, r2, #14
 80037ae:	f57f af20 	bpl.w	80035f2 <HAL_RCC_OscConfig+0x6e>
 80037b2:	6862      	ldr	r2, [r4, #4]
 80037b4:	2a00      	cmp	r2, #0
 80037b6:	f47f af1c 	bne.w	80035f2 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 80037ba:	2001      	movs	r0, #1
}
 80037bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80037be:	f002 0203 	and.w	r2, r2, #3
 80037c2:	2a01      	cmp	r2, #1
 80037c4:	f47f af25 	bne.w	8003612 <HAL_RCC_OscConfig+0x8e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037c8:	4b25      	ldr	r3, [pc, #148]	; (8003860 <HAL_RCC_OscConfig+0x2dc>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	05da      	lsls	r2, r3, #23
 80037ce:	d502      	bpl.n	80037d6 <HAL_RCC_OscConfig+0x252>
 80037d0:	69e3      	ldr	r3, [r4, #28]
 80037d2:	2b80      	cmp	r3, #128	; 0x80
 80037d4:	d1f1      	bne.n	80037ba <HAL_RCC_OscConfig+0x236>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037d6:	f7fc fdfb 	bl	80003d0 <HAL_GetREVID>
 80037da:	f241 0303 	movw	r3, #4099	; 0x1003
 80037de:	4a20      	ldr	r2, [pc, #128]	; (8003860 <HAL_RCC_OscConfig+0x2dc>)
 80037e0:	4298      	cmp	r0, r3
 80037e2:	6a21      	ldr	r1, [r4, #32]
 80037e4:	f200 80be 	bhi.w	8003964 <HAL_RCC_OscConfig+0x3e0>
 80037e8:	6853      	ldr	r3, [r2, #4]
 80037ea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80037ee:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 80037f2:	6053      	str	r3, [r2, #4]
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	e732      	b.n	800365e <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037f8:	4a19      	ldr	r2, [pc, #100]	; (8003860 <HAL_RCC_OscConfig+0x2dc>)
 80037fa:	6813      	ldr	r3, [r2, #0]
 80037fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	e6e3      	b.n	80035cc <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
 8003804:	4b17      	ldr	r3, [pc, #92]	; (8003864 <HAL_RCC_OscConfig+0x2e0>)
 8003806:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003808:	461d      	mov	r5, r3
    PWR->CR1 |= PWR_CR1_DBP;
 800380a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800380e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003810:	f7fc fdc6 	bl	80003a0 <HAL_GetTick>
 8003814:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003816:	e004      	b.n	8003822 <HAL_RCC_OscConfig+0x29e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003818:	f7fc fdc2 	bl	80003a0 <HAL_GetTick>
 800381c:	1b80      	subs	r0, r0, r6
 800381e:	2864      	cmp	r0, #100	; 0x64
 8003820:	d82b      	bhi.n	800387a <HAL_RCC_OscConfig+0x2f6>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003822:	682b      	ldr	r3, [r5, #0]
 8003824:	05da      	lsls	r2, r3, #23
 8003826:	d5f7      	bpl.n	8003818 <HAL_RCC_OscConfig+0x294>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003828:	68a3      	ldr	r3, [r4, #8]
 800382a:	2b01      	cmp	r3, #1
 800382c:	f000 815b 	beq.w	8003ae6 <HAL_RCC_OscConfig+0x562>
 8003830:	2b00      	cmp	r3, #0
 8003832:	f040 815e 	bne.w	8003af2 <HAL_RCC_OscConfig+0x56e>
 8003836:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <HAL_RCC_OscConfig+0x2dc>)
 8003838:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800383a:	f022 0201 	bic.w	r2, r2, #1
 800383e:	671a      	str	r2, [r3, #112]	; 0x70
 8003840:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003842:	f022 0204 	bic.w	r2, r2, #4
 8003846:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003848:	68a3      	ldr	r3, [r4, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 812a 	beq.w	8003aa4 <HAL_RCC_OscConfig+0x520>
      tickstart = HAL_GetTick();
 8003850:	f7fc fda6 	bl	80003a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003854:	4d02      	ldr	r5, [pc, #8]	; (8003860 <HAL_RCC_OscConfig+0x2dc>)
      tickstart = HAL_GetTick();
 8003856:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003858:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800385c:	e009      	b.n	8003872 <HAL_RCC_OscConfig+0x2ee>
 800385e:	bf00      	nop
 8003860:	58024400 	.word	0x58024400
 8003864:	58024800 	.word	0x58024800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003868:	f7fc fd9a 	bl	80003a0 <HAL_GetTick>
 800386c:	1bc0      	subs	r0, r0, r7
 800386e:	42b0      	cmp	r0, r6
 8003870:	d803      	bhi.n	800387a <HAL_RCC_OscConfig+0x2f6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003872:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003874:	079b      	lsls	r3, r3, #30
 8003876:	d5f7      	bpl.n	8003868 <HAL_RCC_OscConfig+0x2e4>
 8003878:	e728      	b.n	80036cc <HAL_RCC_OscConfig+0x148>
            return HAL_TIMEOUT;
 800387a:	2003      	movs	r0, #3
}
 800387c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 800387e:	f7fc fd8f 	bl	80003a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003882:	4da2      	ldr	r5, [pc, #648]	; (8003b0c <HAL_RCC_OscConfig+0x588>)
        tickstart = HAL_GetTick();
 8003884:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003886:	e004      	b.n	8003892 <HAL_RCC_OscConfig+0x30e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003888:	f7fc fd8a 	bl	80003a0 <HAL_GetTick>
 800388c:	1b80      	subs	r0, r0, r6
 800388e:	2864      	cmp	r0, #100	; 0x64
 8003890:	d8f3      	bhi.n	800387a <HAL_RCC_OscConfig+0x2f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003892:	682b      	ldr	r3, [r5, #0]
 8003894:	0398      	lsls	r0, r3, #14
 8003896:	d4f7      	bmi.n	8003888 <HAL_RCC_OscConfig+0x304>
 8003898:	e6aa      	b.n	80035f0 <HAL_RCC_OscConfig+0x6c>
    return HAL_ERROR;
 800389a:	2001      	movs	r0, #1
}
 800389c:	4770      	bx	lr
      __HAL_RCC_LSI_DISABLE();
 800389e:	4b9b      	ldr	r3, [pc, #620]	; (8003b0c <HAL_RCC_OscConfig+0x588>)
 80038a0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038a2:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 80038a4:	f022 0201 	bic.w	r2, r2, #1
 80038a8:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80038aa:	f7fc fd79 	bl	80003a0 <HAL_GetTick>
 80038ae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038b0:	e004      	b.n	80038bc <HAL_RCC_OscConfig+0x338>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038b2:	f7fc fd75 	bl	80003a0 <HAL_GetTick>
 80038b6:	1b80      	subs	r0, r0, r6
 80038b8:	2802      	cmp	r0, #2
 80038ba:	d8de      	bhi.n	800387a <HAL_RCC_OscConfig+0x2f6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038bc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80038be:	0799      	lsls	r1, r3, #30
 80038c0:	d4f7      	bmi.n	80038b2 <HAL_RCC_OscConfig+0x32e>
 80038c2:	e6e5      	b.n	8003690 <HAL_RCC_OscConfig+0x10c>
      __HAL_RCC_HSI48_DISABLE();
 80038c4:	4b91      	ldr	r3, [pc, #580]	; (8003b0c <HAL_RCC_OscConfig+0x588>)
 80038c6:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80038c8:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_DISABLE();
 80038ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038ce:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80038d0:	f7fc fd66 	bl	80003a0 <HAL_GetTick>
 80038d4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80038d6:	e004      	b.n	80038e2 <HAL_RCC_OscConfig+0x35e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80038d8:	f7fc fd62 	bl	80003a0 <HAL_GetTick>
 80038dc:	1b80      	subs	r0, r0, r6
 80038de:	2802      	cmp	r0, #2
 80038e0:	d8cb      	bhi.n	800387a <HAL_RCC_OscConfig+0x2f6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80038e2:	682b      	ldr	r3, [r5, #0]
 80038e4:	0498      	lsls	r0, r3, #18
 80038e6:	d4f7      	bmi.n	80038d8 <HAL_RCC_OscConfig+0x354>
 80038e8:	e6ec      	b.n	80036c4 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038ee:	4b87      	ldr	r3, [pc, #540]	; (8003b0c <HAL_RCC_OscConfig+0x588>)
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	f47f ae64 	bne.w	80035be <HAL_RCC_OscConfig+0x3a>
 80038f6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	e662      	b.n	80035cc <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_CSI_DISABLE();
 8003906:	4b81      	ldr	r3, [pc, #516]	; (8003b0c <HAL_RCC_OscConfig+0x588>)
 8003908:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800390a:	461d      	mov	r5, r3
        __HAL_RCC_CSI_DISABLE();
 800390c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003910:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003912:	f7fc fd45 	bl	80003a0 <HAL_GetTick>
 8003916:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003918:	e004      	b.n	8003924 <HAL_RCC_OscConfig+0x3a0>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800391a:	f7fc fd41 	bl	80003a0 <HAL_GetTick>
 800391e:	1b80      	subs	r0, r0, r6
 8003920:	2802      	cmp	r0, #2
 8003922:	d8aa      	bhi.n	800387a <HAL_RCC_OscConfig+0x2f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003924:	682b      	ldr	r3, [r5, #0]
 8003926:	05df      	lsls	r7, r3, #23
 8003928:	d4f7      	bmi.n	800391a <HAL_RCC_OscConfig+0x396>
 800392a:	6823      	ldr	r3, [r4, #0]
 800392c:	e697      	b.n	800365e <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI_DISABLE();
 800392e:	4b77      	ldr	r3, [pc, #476]	; (8003b0c <HAL_RCC_OscConfig+0x588>)
 8003930:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003932:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8003934:	f022 0201 	bic.w	r2, r2, #1
 8003938:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800393a:	f7fc fd31 	bl	80003a0 <HAL_GetTick>
 800393e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003940:	e004      	b.n	800394c <HAL_RCC_OscConfig+0x3c8>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003942:	f7fc fd2d 	bl	80003a0 <HAL_GetTick>
 8003946:	1b80      	subs	r0, r0, r6
 8003948:	2802      	cmp	r0, #2
 800394a:	d896      	bhi.n	800387a <HAL_RCC_OscConfig+0x2f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800394c:	682b      	ldr	r3, [r5, #0]
 800394e:	0758      	lsls	r0, r3, #29
 8003950:	d4f7      	bmi.n	8003942 <HAL_RCC_OscConfig+0x3be>
 8003952:	6823      	ldr	r3, [r4, #0]
 8003954:	e650      	b.n	80035f8 <HAL_RCC_OscConfig+0x74>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003956:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800395a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800395e:	6053      	str	r3, [r2, #4]
 8003960:	6823      	ldr	r3, [r4, #0]
 8003962:	e649      	b.n	80035f8 <HAL_RCC_OscConfig+0x74>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003964:	68d3      	ldr	r3, [r2, #12]
 8003966:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800396a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800396e:	60d3      	str	r3, [r2, #12]
 8003970:	6823      	ldr	r3, [r4, #0]
 8003972:	e674      	b.n	800365e <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PLL_DISABLE();
 8003974:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003978:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 800397a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800397c:	f7fc fd10 	bl	80003a0 <HAL_GetTick>
 8003980:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003982:	e005      	b.n	8003990 <HAL_RCC_OscConfig+0x40c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003984:	f7fc fd0c 	bl	80003a0 <HAL_GetTick>
 8003988:	1b80      	subs	r0, r0, r6
 800398a:	2802      	cmp	r0, #2
 800398c:	f63f af75 	bhi.w	800387a <HAL_RCC_OscConfig+0x2f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003990:	682b      	ldr	r3, [r5, #0]
 8003992:	0199      	lsls	r1, r3, #6
 8003994:	d4f6      	bmi.n	8003984 <HAL_RCC_OscConfig+0x400>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003996:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8003998:	4b5d      	ldr	r3, [pc, #372]	; (8003b10 <HAL_RCC_OscConfig+0x58c>)
 800399a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800399c:	4013      	ands	r3, r2
 800399e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80039a0:	495c      	ldr	r1, [pc, #368]	; (8003b14 <HAL_RCC_OscConfig+0x590>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039a2:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039a4:	4e59      	ldr	r6, [pc, #356]	; (8003b0c <HAL_RCC_OscConfig+0x588>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039a6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80039aa:	62ab      	str	r3, [r5, #40]	; 0x28
 80039ac:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80039ae:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 80039b2:	3f01      	subs	r7, #1
 80039b4:	1e50      	subs	r0, r2, #1
 80039b6:	3b01      	subs	r3, #1
 80039b8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80039ba:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80039be:	025b      	lsls	r3, r3, #9
 80039c0:	0400      	lsls	r0, r0, #16
 80039c2:	3a01      	subs	r2, #1
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 80039ca:	0612      	lsls	r2, r2, #24
 80039cc:	4303      	orrs	r3, r0
 80039ce:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80039d2:	433b      	orrs	r3, r7
 80039d4:	4313      	orrs	r3, r2
 80039d6:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80039d8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80039da:	f023 0301 	bic.w	r3, r3, #1
 80039de:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80039e0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80039e2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80039e4:	4011      	ands	r1, r2
 80039e6:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80039ea:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80039ec:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80039ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80039f0:	f023 030c 	bic.w	r3, r3, #12
 80039f4:	4313      	orrs	r3, r2
 80039f6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80039f8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80039fa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80039fc:	f023 0302 	bic.w	r3, r3, #2
 8003a00:	4313      	orrs	r3, r2
 8003a02:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a04:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0a:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a0c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a12:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003a14:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003a16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a1a:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8003a1c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003a1e:	f043 0301 	orr.w	r3, r3, #1
 8003a22:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003a24:	682b      	ldr	r3, [r5, #0]
 8003a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a2a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003a2c:	f7fc fcb8 	bl	80003a0 <HAL_GetTick>
 8003a30:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a32:	e005      	b.n	8003a40 <HAL_RCC_OscConfig+0x4bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a34:	f7fc fcb4 	bl	80003a0 <HAL_GetTick>
 8003a38:	1b00      	subs	r0, r0, r4
 8003a3a:	2802      	cmp	r0, #2
 8003a3c:	f63f af1d 	bhi.w	800387a <HAL_RCC_OscConfig+0x2f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a40:	6833      	ldr	r3, [r6, #0]
 8003a42:	019a      	lsls	r2, r3, #6
 8003a44:	d5f6      	bpl.n	8003a34 <HAL_RCC_OscConfig+0x4b0>
 8003a46:	e65f      	b.n	8003708 <HAL_RCC_OscConfig+0x184>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a48:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003a4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003a4c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a4e:	f43f ae5c 	beq.w	800370a <HAL_RCC_OscConfig+0x186>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a52:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a56:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003a58:	428b      	cmp	r3, r1
 8003a5a:	f47f aeae 	bne.w	80037ba <HAL_RCC_OscConfig+0x236>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a5e:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003a64:	429a      	cmp	r2, r3
 8003a66:	f47f aea8 	bne.w	80037ba <HAL_RCC_OscConfig+0x236>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003a6c:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8003a70:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a72:	429a      	cmp	r2, r3
 8003a74:	f47f aea1 	bne.w	80037ba <HAL_RCC_OscConfig+0x236>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a7a:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8003a7e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a80:	429a      	cmp	r2, r3
 8003a82:	f47f ae9a 	bne.w	80037ba <HAL_RCC_OscConfig+0x236>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a88:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8003a8c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	f47f ae93 	bne.w	80037ba <HAL_RCC_OscConfig+0x236>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003a94:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003a96:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8003a9a:	3801      	subs	r0, #1
    return HAL_ERROR;
 8003a9c:	1a28      	subs	r0, r5, r0
 8003a9e:	bf18      	it	ne
 8003aa0:	2001      	movne	r0, #1
 8003aa2:	e632      	b.n	800370a <HAL_RCC_OscConfig+0x186>
      tickstart = HAL_GetTick();
 8003aa4:	f7fc fc7c 	bl	80003a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003aa8:	4d18      	ldr	r5, [pc, #96]	; (8003b0c <HAL_RCC_OscConfig+0x588>)
      tickstart = HAL_GetTick();
 8003aaa:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aac:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ab0:	e005      	b.n	8003abe <HAL_RCC_OscConfig+0x53a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ab2:	f7fc fc75 	bl	80003a0 <HAL_GetTick>
 8003ab6:	1bc0      	subs	r0, r0, r7
 8003ab8:	42b0      	cmp	r0, r6
 8003aba:	f63f aede 	bhi.w	800387a <HAL_RCC_OscConfig+0x2f6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003abe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003ac0:	0798      	lsls	r0, r3, #30
 8003ac2:	d4f6      	bmi.n	8003ab2 <HAL_RCC_OscConfig+0x52e>
 8003ac4:	e602      	b.n	80036cc <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ac6:	68eb      	ldr	r3, [r5, #12]
 8003ac8:	6a22      	ldr	r2, [r4, #32]
 8003aca:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003ace:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003ad2:	60eb      	str	r3, [r5, #12]
 8003ad4:	6823      	ldr	r3, [r4, #0]
 8003ad6:	e5c2      	b.n	800365e <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003adc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003ae0:	606b      	str	r3, [r5, #4]
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	e588      	b.n	80035f8 <HAL_RCC_OscConfig+0x74>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae6:	4a09      	ldr	r2, [pc, #36]	; (8003b0c <HAL_RCC_OscConfig+0x588>)
 8003ae8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	6713      	str	r3, [r2, #112]	; 0x70
 8003af0:	e6aa      	b.n	8003848 <HAL_RCC_OscConfig+0x2c4>
 8003af2:	2b05      	cmp	r3, #5
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <HAL_RCC_OscConfig+0x588>)
 8003af6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003af8:	f47f ae9f 	bne.w	800383a <HAL_RCC_OscConfig+0x2b6>
 8003afc:	f042 0204 	orr.w	r2, r2, #4
 8003b00:	671a      	str	r2, [r3, #112]	; 0x70
 8003b02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b04:	f042 0201 	orr.w	r2, r2, #1
 8003b08:	671a      	str	r2, [r3, #112]	; 0x70
 8003b0a:	e69d      	b.n	8003848 <HAL_RCC_OscConfig+0x2c4>
 8003b0c:	58024400 	.word	0x58024400
 8003b10:	fffffc0c 	.word	0xfffffc0c
 8003b14:	ffff0007 	.word	0xffff0007

08003b18 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b18:	4a3e      	ldr	r2, [pc, #248]	; (8003c14 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003b1a:	6913      	ldr	r3, [r2, #16]
 8003b1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b20:	2b10      	cmp	r3, #16
 8003b22:	d04f      	beq.n	8003bc4 <HAL_RCC_GetSysClockFreq+0xac>
 8003b24:	2b18      	cmp	r3, #24
 8003b26:	d00b      	beq.n	8003b40 <HAL_RCC_GetSysClockFreq+0x28>
 8003b28:	b10b      	cbz	r3, 8003b2e <HAL_RCC_GetSysClockFreq+0x16>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003b2a:	483b      	ldr	r0, [pc, #236]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x100>)
 8003b2c:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b2e:	6813      	ldr	r3, [r2, #0]
 8003b30:	0699      	lsls	r1, r3, #26
 8003b32:	d549      	bpl.n	8003bc8 <HAL_RCC_GetSysClockFreq+0xb0>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b34:	6813      	ldr	r3, [r2, #0]
 8003b36:	4839      	ldr	r0, [pc, #228]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x104>)
 8003b38:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003b3c:	40d8      	lsrs	r0, r3
 8003b3e:	4770      	bx	lr
{
 8003b40:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b42:	6a91      	ldr	r1, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003b44:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003b46:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003b48:	f3c0 1005 	ubfx	r0, r0, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003b4c:	6b54      	ldr	r4, [r2, #52]	; 0x34

    if (pllm != 0U)
 8003b4e:	b3b0      	cbz	r0, 8003bbe <HAL_RCC_GetSysClockFreq+0xa6>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003b50:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003b54:	f003 0301 	and.w	r3, r3, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b58:	f001 0103 	and.w	r1, r1, #3
 8003b5c:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003b60:	fb03 f304 	mul.w	r3, r3, r4
    {
      switch (pllsource)
 8003b64:	2901      	cmp	r1, #1
 8003b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003b6a:	ee07 3a10 	vmov	s14, r3
 8003b6e:	eeba 7ae9 	vcvt.f32.s32	s14, s14, #13
      switch (pllsource)
 8003b72:	d002      	beq.n	8003b7a <HAL_RCC_GetSysClockFreq+0x62>
 8003b74:	d32d      	bcc.n	8003bd2 <HAL_RCC_GetSysClockFreq+0xba>
 8003b76:	2902      	cmp	r1, #2
 8003b78:	d028      	beq.n	8003bcc <HAL_RCC_GetSysClockFreq+0xb4>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b7a:	eddf 5a29 	vldr	s11, [pc, #164]	; 8003c20 <HAL_RCC_GetSysClockFreq+0x108>
 8003b7e:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8003b82:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b88:	ee07 3a90 	vmov	s15, r3
 8003b8c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003b90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b94:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003b98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b9c:	ee27 7a26 	vmul.f32	s14, s14, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003ba0:	4b1c      	ldr	r3, [pc, #112]	; (8003c14 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003ba8:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003baa:	ee07 3a90 	vmov	s15, r3
 8003bae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003bb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bba:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8003bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bc2:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8003bc4:	4817      	ldr	r0, [pc, #92]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003bc6:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003bc8:	4814      	ldr	r0, [pc, #80]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x104>)
}
 8003bca:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003bcc:	eddf 5a16 	vldr	s11, [pc, #88]	; 8003c28 <HAL_RCC_GetSysClockFreq+0x110>
 8003bd0:	e7d5      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x66>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bd2:	6813      	ldr	r3, [r2, #0]
 8003bd4:	069b      	lsls	r3, r3, #26
 8003bd6:	d51a      	bpl.n	8003c0e <HAL_RCC_GetSysClockFreq+0xf6>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003bd8:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003bda:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003bde:	490f      	ldr	r1, [pc, #60]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x104>)
 8003be0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003be4:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003be6:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bec:	ee06 1a90 	vmov	s13, r1
 8003bf0:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 8003bf4:	ee06 3a90 	vmov	s13, r3
 8003bf8:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8003bfc:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8003c00:	ee76 7a05 	vadd.f32	s15, s12, s10
 8003c04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c08:	ee26 7a87 	vmul.f32	s14, s13, s14
 8003c0c:	e7c8      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x88>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c0e:	eddf 5a07 	vldr	s11, [pc, #28]	; 8003c2c <HAL_RCC_GetSysClockFreq+0x114>
 8003c12:	e7b4      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x66>
 8003c14:	58024400 	.word	0x58024400
 8003c18:	003d0900 	.word	0x003d0900
 8003c1c:	03d09000 	.word	0x03d09000
 8003c20:	4a742400 	.word	0x4a742400
 8003c24:	017d7840 	.word	0x017d7840
 8003c28:	4bbebc20 	.word	0x4bbebc20
 8003c2c:	4c742400 	.word	0x4c742400

08003c30 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003c30:	b178      	cbz	r0, 8003c52 <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c32:	4a91      	ldr	r2, [pc, #580]	; (8003e78 <HAL_RCC_ClockConfig+0x248>)
 8003c34:	6813      	ldr	r3, [r2, #0]
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	428b      	cmp	r3, r1
 8003c3c:	d20b      	bcs.n	8003c56 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3e:	6813      	ldr	r3, [r2, #0]
 8003c40:	f023 030f 	bic.w	r3, r3, #15
 8003c44:	430b      	orrs	r3, r1
 8003c46:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c48:	6813      	ldr	r3, [r2, #0]
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	428b      	cmp	r3, r1
 8003c50:	d001      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8003c52:	2001      	movs	r0, #1
}
 8003c54:	4770      	bx	lr
{
 8003c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c5a:	6803      	ldr	r3, [r0, #0]
 8003c5c:	075f      	lsls	r7, r3, #29
 8003c5e:	d50c      	bpl.n	8003c7a <HAL_RCC_ClockConfig+0x4a>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c60:	4c86      	ldr	r4, [pc, #536]	; (8003e7c <HAL_RCC_ClockConfig+0x24c>)
 8003c62:	6905      	ldr	r5, [r0, #16]
 8003c64:	69a2      	ldr	r2, [r4, #24]
 8003c66:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003c6a:	4295      	cmp	r5, r2
 8003c6c:	d905      	bls.n	8003c7a <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c6e:	69a3      	ldr	r3, [r4, #24]
 8003c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c74:	432b      	orrs	r3, r5
 8003c76:	61a3      	str	r3, [r4, #24]
 8003c78:	6803      	ldr	r3, [r0, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c7a:	071e      	lsls	r6, r3, #28
 8003c7c:	d50c      	bpl.n	8003c98 <HAL_RCC_ClockConfig+0x68>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c7e:	4c7f      	ldr	r4, [pc, #508]	; (8003e7c <HAL_RCC_ClockConfig+0x24c>)
 8003c80:	6945      	ldr	r5, [r0, #20]
 8003c82:	69e2      	ldr	r2, [r4, #28]
 8003c84:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003c88:	4295      	cmp	r5, r2
 8003c8a:	d905      	bls.n	8003c98 <HAL_RCC_ClockConfig+0x68>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c8c:	69e3      	ldr	r3, [r4, #28]
 8003c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c92:	432b      	orrs	r3, r5
 8003c94:	61e3      	str	r3, [r4, #28]
 8003c96:	6803      	ldr	r3, [r0, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c98:	06dd      	lsls	r5, r3, #27
 8003c9a:	d50c      	bpl.n	8003cb6 <HAL_RCC_ClockConfig+0x86>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c9c:	4c77      	ldr	r4, [pc, #476]	; (8003e7c <HAL_RCC_ClockConfig+0x24c>)
 8003c9e:	6985      	ldr	r5, [r0, #24]
 8003ca0:	69e2      	ldr	r2, [r4, #28]
 8003ca2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003ca6:	4295      	cmp	r5, r2
 8003ca8:	d905      	bls.n	8003cb6 <HAL_RCC_ClockConfig+0x86>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003caa:	69e3      	ldr	r3, [r4, #28]
 8003cac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003cb0:	432b      	orrs	r3, r5
 8003cb2:	61e3      	str	r3, [r4, #28]
 8003cb4:	6803      	ldr	r3, [r0, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003cb6:	069c      	lsls	r4, r3, #26
 8003cb8:	d50c      	bpl.n	8003cd4 <HAL_RCC_ClockConfig+0xa4>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003cba:	4c70      	ldr	r4, [pc, #448]	; (8003e7c <HAL_RCC_ClockConfig+0x24c>)
 8003cbc:	69c5      	ldr	r5, [r0, #28]
 8003cbe:	6a22      	ldr	r2, [r4, #32]
 8003cc0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003cc4:	4295      	cmp	r5, r2
 8003cc6:	d905      	bls.n	8003cd4 <HAL_RCC_ClockConfig+0xa4>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003cc8:	6a23      	ldr	r3, [r4, #32]
 8003cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cce:	432b      	orrs	r3, r5
 8003cd0:	6223      	str	r3, [r4, #32]
 8003cd2:	6803      	ldr	r3, [r0, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd4:	079a      	lsls	r2, r3, #30
 8003cd6:	4604      	mov	r4, r0
 8003cd8:	460d      	mov	r5, r1
 8003cda:	d512      	bpl.n	8003d02 <HAL_RCC_ClockConfig+0xd2>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003cdc:	4867      	ldr	r0, [pc, #412]	; (8003e7c <HAL_RCC_ClockConfig+0x24c>)
 8003cde:	68e1      	ldr	r1, [r4, #12]
 8003ce0:	6982      	ldr	r2, [r0, #24]
 8003ce2:	f002 020f 	and.w	r2, r2, #15
 8003ce6:	4291      	cmp	r1, r2
 8003ce8:	d93d      	bls.n	8003d66 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cea:	6983      	ldr	r3, [r0, #24]
 8003cec:	f023 030f 	bic.w	r3, r3, #15
 8003cf0:	4319      	orrs	r1, r3
 8003cf2:	6181      	str	r1, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cf4:	6823      	ldr	r3, [r4, #0]
 8003cf6:	07df      	lsls	r7, r3, #31
 8003cf8:	d405      	bmi.n	8003d06 <HAL_RCC_ClockConfig+0xd6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cfa:	079f      	lsls	r7, r3, #30
 8003cfc:	d540      	bpl.n	8003d80 <HAL_RCC_ClockConfig+0x150>
 8003cfe:	68e1      	ldr	r1, [r4, #12]
 8003d00:	e033      	b.n	8003d6a <HAL_RCC_ClockConfig+0x13a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d02:	07db      	lsls	r3, r3, #31
 8003d04:	d53c      	bpl.n	8003d80 <HAL_RCC_ClockConfig+0x150>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003d06:	4a5d      	ldr	r2, [pc, #372]	; (8003e7c <HAL_RCC_ClockConfig+0x24c>)
 8003d08:	68a1      	ldr	r1, [r4, #8]
 8003d0a:	6993      	ldr	r3, [r2, #24]
 8003d0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d10:	430b      	orrs	r3, r1
 8003d12:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d14:	6863      	ldr	r3, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d16:	6812      	ldr	r2, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	f000 809e 	beq.w	8003e5a <HAL_RCC_ClockConfig+0x22a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	f000 80a1 	beq.w	8003e66 <HAL_RCC_ClockConfig+0x236>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	f000 80a2 	beq.w	8003e6e <HAL_RCC_ClockConfig+0x23e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d2a:	0752      	lsls	r2, r2, #29
 8003d2c:	d538      	bpl.n	8003da0 <HAL_RCC_ClockConfig+0x170>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d2e:	4953      	ldr	r1, [pc, #332]	; (8003e7c <HAL_RCC_ClockConfig+0x24c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d30:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d34:	690a      	ldr	r2, [r1, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d36:	460e      	mov	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d38:	f022 0207 	bic.w	r2, r2, #7
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 8003d40:	f7fc fb2e 	bl	80003a0 <HAL_GetTick>
 8003d44:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d46:	e005      	b.n	8003d54 <HAL_RCC_ClockConfig+0x124>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d48:	f7fc fb2a 	bl	80003a0 <HAL_GetTick>
 8003d4c:	1bc0      	subs	r0, r0, r7
 8003d4e:	4540      	cmp	r0, r8
 8003d50:	f200 8087 	bhi.w	8003e62 <HAL_RCC_ClockConfig+0x232>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d54:	6933      	ldr	r3, [r6, #16]
 8003d56:	6862      	ldr	r2, [r4, #4]
 8003d58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d5c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8003d60:	d1f2      	bne.n	8003d48 <HAL_RCC_ClockConfig+0x118>
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	e7c9      	b.n	8003cfa <HAL_RCC_ClockConfig+0xca>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d66:	07da      	lsls	r2, r3, #31
 8003d68:	d4cd      	bmi.n	8003d06 <HAL_RCC_ClockConfig+0xd6>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d6a:	4a44      	ldr	r2, [pc, #272]	; (8003e7c <HAL_RCC_ClockConfig+0x24c>)
 8003d6c:	6993      	ldr	r3, [r2, #24]
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	428b      	cmp	r3, r1
 8003d74:	d904      	bls.n	8003d80 <HAL_RCC_ClockConfig+0x150>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d76:	6993      	ldr	r3, [r2, #24]
 8003d78:	f023 030f 	bic.w	r3, r3, #15
 8003d7c:	4319      	orrs	r1, r3
 8003d7e:	6191      	str	r1, [r2, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d80:	4a3d      	ldr	r2, [pc, #244]	; (8003e78 <HAL_RCC_ClockConfig+0x248>)
 8003d82:	6813      	ldr	r3, [r2, #0]
 8003d84:	f003 030f 	and.w	r3, r3, #15
 8003d88:	42ab      	cmp	r3, r5
 8003d8a:	d90c      	bls.n	8003da6 <HAL_RCC_ClockConfig+0x176>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8c:	6813      	ldr	r3, [r2, #0]
 8003d8e:	f023 030f 	bic.w	r3, r3, #15
 8003d92:	432b      	orrs	r3, r5
 8003d94:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d96:	6813      	ldr	r3, [r2, #0]
 8003d98:	f003 030f 	and.w	r3, r3, #15
 8003d9c:	42ab      	cmp	r3, r5
 8003d9e:	d002      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x176>
    return HAL_ERROR;
 8003da0:	2001      	movs	r0, #1
}
 8003da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	075e      	lsls	r6, r3, #29
 8003daa:	d50c      	bpl.n	8003dc6 <HAL_RCC_ClockConfig+0x196>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003dac:	4933      	ldr	r1, [pc, #204]	; (8003e7c <HAL_RCC_ClockConfig+0x24c>)
 8003dae:	6920      	ldr	r0, [r4, #16]
 8003db0:	698a      	ldr	r2, [r1, #24]
 8003db2:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003db6:	4290      	cmp	r0, r2
 8003db8:	d205      	bcs.n	8003dc6 <HAL_RCC_ClockConfig+0x196>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003dba:	698b      	ldr	r3, [r1, #24]
 8003dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc0:	4303      	orrs	r3, r0
 8003dc2:	618b      	str	r3, [r1, #24]
 8003dc4:	6823      	ldr	r3, [r4, #0]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc6:	071d      	lsls	r5, r3, #28
 8003dc8:	d50c      	bpl.n	8003de4 <HAL_RCC_ClockConfig+0x1b4>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003dca:	492c      	ldr	r1, [pc, #176]	; (8003e7c <HAL_RCC_ClockConfig+0x24c>)
 8003dcc:	6960      	ldr	r0, [r4, #20]
 8003dce:	69ca      	ldr	r2, [r1, #28]
 8003dd0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003dd4:	4290      	cmp	r0, r2
 8003dd6:	d205      	bcs.n	8003de4 <HAL_RCC_ClockConfig+0x1b4>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003dd8:	69cb      	ldr	r3, [r1, #28]
 8003dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dde:	4303      	orrs	r3, r0
 8003de0:	61cb      	str	r3, [r1, #28]
 8003de2:	6823      	ldr	r3, [r4, #0]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de4:	06d8      	lsls	r0, r3, #27
 8003de6:	d50c      	bpl.n	8003e02 <HAL_RCC_ClockConfig+0x1d2>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003de8:	4924      	ldr	r1, [pc, #144]	; (8003e7c <HAL_RCC_ClockConfig+0x24c>)
 8003dea:	69a0      	ldr	r0, [r4, #24]
 8003dec:	69ca      	ldr	r2, [r1, #28]
 8003dee:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003df2:	4290      	cmp	r0, r2
 8003df4:	d205      	bcs.n	8003e02 <HAL_RCC_ClockConfig+0x1d2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003df6:	69cb      	ldr	r3, [r1, #28]
 8003df8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003dfc:	4303      	orrs	r3, r0
 8003dfe:	61cb      	str	r3, [r1, #28]
 8003e00:	6823      	ldr	r3, [r4, #0]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e02:	0699      	lsls	r1, r3, #26
 8003e04:	d50b      	bpl.n	8003e1e <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e06:	4a1d      	ldr	r2, [pc, #116]	; (8003e7c <HAL_RCC_ClockConfig+0x24c>)
 8003e08:	69e1      	ldr	r1, [r4, #28]
 8003e0a:	6a13      	ldr	r3, [r2, #32]
 8003e0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e10:	4299      	cmp	r1, r3
 8003e12:	d204      	bcs.n	8003e1e <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003e14:	6a13      	ldr	r3, [r2, #32]
 8003e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e1e:	f7ff fe7b 	bl	8003b18 <HAL_RCC_GetSysClockFreq>
 8003e22:	4a16      	ldr	r2, [pc, #88]	; (8003e7c <HAL_RCC_ClockConfig+0x24c>)
 8003e24:	4916      	ldr	r1, [pc, #88]	; (8003e80 <HAL_RCC_ClockConfig+0x250>)
 8003e26:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e28:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e2a:	f3c3 2303 	ubfx	r3, r3, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8003e2e:	4d15      	ldr	r5, [pc, #84]	; (8003e84 <HAL_RCC_ClockConfig+0x254>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e30:	f002 020f 	and.w	r2, r2, #15
 8003e34:	4c14      	ldr	r4, [pc, #80]	; (8003e88 <HAL_RCC_ClockConfig+0x258>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e36:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e38:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e3a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 8003e3e:	4913      	ldr	r1, [pc, #76]	; (8003e8c <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e40:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e44:	fa20 f303 	lsr.w	r3, r0, r3
  halstatus = HAL_InitTick (uwTickPrio);
 8003e48:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e4a:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 8003e4e:	600b      	str	r3, [r1, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e50:	6022      	str	r2, [r4, #0]
}
 8003e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8003e56:	f7fc ba3f 	b.w	80002d8 <HAL_InitTick>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e5a:	0396      	lsls	r6, r2, #14
 8003e5c:	f53f af67 	bmi.w	8003d2e <HAL_RCC_ClockConfig+0xfe>
 8003e60:	e79e      	b.n	8003da0 <HAL_RCC_ClockConfig+0x170>
            return HAL_TIMEOUT;
 8003e62:	2003      	movs	r0, #3
 8003e64:	e79d      	b.n	8003da2 <HAL_RCC_ClockConfig+0x172>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e66:	0190      	lsls	r0, r2, #6
 8003e68:	f53f af61 	bmi.w	8003d2e <HAL_RCC_ClockConfig+0xfe>
 8003e6c:	e798      	b.n	8003da0 <HAL_RCC_ClockConfig+0x170>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e6e:	05d1      	lsls	r1, r2, #23
 8003e70:	f53f af5d 	bmi.w	8003d2e <HAL_RCC_ClockConfig+0xfe>
 8003e74:	e794      	b.n	8003da0 <HAL_RCC_ClockConfig+0x170>
 8003e76:	bf00      	nop
 8003e78:	52002000 	.word	0x52002000
 8003e7c:	58024400 	.word	0x58024400
 8003e80:	0800c184 	.word	0x0800c184
 8003e84:	20000004 	.word	0x20000004
 8003e88:	2000001c 	.word	0x2000001c
 8003e8c:	20000018 	.word	0x20000018

08003e90 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e90:	4a49      	ldr	r2, [pc, #292]	; (8003fb8 <HAL_RCC_GetHCLKFreq+0x128>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e92:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e94:	6913      	ldr	r3, [r2, #16]
 8003e96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e9a:	2b10      	cmp	r3, #16
 8003e9c:	d064      	beq.n	8003f68 <HAL_RCC_GetHCLKFreq+0xd8>
 8003e9e:	2b18      	cmp	r3, #24
 8003ea0:	d022      	beq.n	8003ee8 <HAL_RCC_GetHCLKFreq+0x58>
 8003ea2:	b1bb      	cbz	r3, 8003ed4 <HAL_RCC_GetHCLKFreq+0x44>
    sysclockfreq = CSI_VALUE;
 8003ea4:	4b45      	ldr	r3, [pc, #276]	; (8003fbc <HAL_RCC_GetHCLKFreq+0x12c>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003ea6:	4944      	ldr	r1, [pc, #272]	; (8003fb8 <HAL_RCC_GetHCLKFreq+0x128>)
 8003ea8:	4845      	ldr	r0, [pc, #276]	; (8003fc0 <HAL_RCC_GetHCLKFreq+0x130>)
 8003eaa:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003eac:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003eae:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003eb2:	4c44      	ldr	r4, [pc, #272]	; (8003fc4 <HAL_RCC_GetHCLKFreq+0x134>)
 8003eb4:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003eb8:	4d43      	ldr	r5, [pc, #268]	; (8003fc8 <HAL_RCC_GetHCLKFreq+0x138>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003eba:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ebc:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003ebe:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ec2:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003ec6:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ec8:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8003ecc:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ece:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8003ed0:	bc30      	pop	{r4, r5}
 8003ed2:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ed4:	6813      	ldr	r3, [r2, #0]
 8003ed6:	0699      	lsls	r1, r3, #26
 8003ed8:	d548      	bpl.n	8003f6c <HAL_RCC_GetHCLKFreq+0xdc>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003eda:	6813      	ldr	r3, [r2, #0]
 8003edc:	4a3b      	ldr	r2, [pc, #236]	; (8003fcc <HAL_RCC_GetHCLKFreq+0x13c>)
 8003ede:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee6:	e7de      	b.n	8003ea6 <HAL_RCC_GetHCLKFreq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ee8:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003eea:	6a93      	ldr	r3, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003eec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003eee:	f3c3 1305 	ubfx	r3, r3, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003ef2:	6b54      	ldr	r4, [r2, #52]	; 0x34
    if (pllm != 0U)
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0d6      	beq.n	8003ea6 <HAL_RCC_GetHCLKFreq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003ef8:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003efc:	f001 0101 	and.w	r1, r1, #1
 8003f00:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f04:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003f08:	fb01 f304 	mul.w	r3, r1, r4
 8003f0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 8003f10:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 8003f1a:	d002      	beq.n	8003f22 <HAL_RCC_GetHCLKFreq+0x92>
 8003f1c:	d32b      	bcc.n	8003f76 <HAL_RCC_GetHCLKFreq+0xe6>
 8003f1e:	2802      	cmp	r0, #2
 8003f20:	d026      	beq.n	8003f70 <HAL_RCC_GetHCLKFreq+0xe0>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f22:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003fd0 <HAL_RCC_GetHCLKFreq+0x140>
 8003f26:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8003f2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f30:	ee07 3a10 	vmov	s14, r3
 8003f34:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8003f38:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003f3c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8003f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f44:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003f48:	4b1b      	ldr	r3, [pc, #108]	; (8003fb8 <HAL_RCC_GetHCLKFreq+0x128>)
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003f50:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003f52:	ee07 3a10 	vmov	s14, r3
 8003f56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003f5a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003f5e:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8003f62:	ee17 3a90 	vmov	r3, s15
 8003f66:	e79e      	b.n	8003ea6 <HAL_RCC_GetHCLKFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8003f68:	4b1a      	ldr	r3, [pc, #104]	; (8003fd4 <HAL_RCC_GetHCLKFreq+0x144>)
 8003f6a:	e79c      	b.n	8003ea6 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003f6c:	4b17      	ldr	r3, [pc, #92]	; (8003fcc <HAL_RCC_GetHCLKFreq+0x13c>)
 8003f6e:	e79a      	b.n	8003ea6 <HAL_RCC_GetHCLKFreq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f70:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003fd8 <HAL_RCC_GetHCLKFreq+0x148>
 8003f74:	e7d7      	b.n	8003f26 <HAL_RCC_GetHCLKFreq+0x96>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f76:	6813      	ldr	r3, [r2, #0]
 8003f78:	069b      	lsls	r3, r3, #26
 8003f7a:	d51a      	bpl.n	8003fb2 <HAL_RCC_GetHCLKFreq+0x122>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f7c:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f7e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f82:	4912      	ldr	r1, [pc, #72]	; (8003fcc <HAL_RCC_GetHCLKFreq+0x13c>)
 8003f84:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f88:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f8a:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f90:	ee07 1a10 	vmov	s14, r1
 8003f94:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8003f98:	ee07 3a10 	vmov	s14, r3
 8003f9c:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8003fa0:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8003fa4:	ee76 6a05 	vadd.f32	s13, s12, s10
 8003fa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fb0:	e7ca      	b.n	8003f48 <HAL_RCC_GetHCLKFreq+0xb8>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fb2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003fdc <HAL_RCC_GetHCLKFreq+0x14c>
 8003fb6:	e7b6      	b.n	8003f26 <HAL_RCC_GetHCLKFreq+0x96>
 8003fb8:	58024400 	.word	0x58024400
 8003fbc:	003d0900 	.word	0x003d0900
 8003fc0:	0800c184 	.word	0x0800c184
 8003fc4:	2000001c 	.word	0x2000001c
 8003fc8:	20000018 	.word	0x20000018
 8003fcc:	03d09000 	.word	0x03d09000
 8003fd0:	4a742400 	.word	0x4a742400
 8003fd4:	017d7840 	.word	0x017d7840
 8003fd8:	4bbebc20 	.word	0x4bbebc20
 8003fdc:	4c742400 	.word	0x4c742400

08003fe0 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003fe0:	4a3b      	ldr	r2, [pc, #236]	; (80040d0 <RCCEx_PLL2_Config+0xf0>)
{
 8003fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003fe4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003fe6:	f003 0303 	and.w	r3, r3, #3
 8003fea:	2b03      	cmp	r3, #3
 8003fec:	d067      	beq.n	80040be <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003fee:	6813      	ldr	r3, [r2, #0]
 8003ff0:	460f      	mov	r7, r1
 8003ff2:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ff4:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 8003ff6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ffa:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003ffc:	f7fc f9d0 	bl	80003a0 <HAL_GetTick>
 8004000:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004002:	e004      	b.n	800400e <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004004:	f7fc f9cc 	bl	80003a0 <HAL_GetTick>
 8004008:	1b80      	subs	r0, r0, r6
 800400a:	2802      	cmp	r0, #2
 800400c:	d859      	bhi.n	80040c2 <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	011a      	lsls	r2, r3, #4
 8004012:	d4f7      	bmi.n	8004004 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004014:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004016:	682a      	ldr	r2, [r5, #0]
 8004018:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800401c:	492d      	ldr	r1, [pc, #180]	; (80040d4 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800401e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8004022:	62a3      	str	r3, [r4, #40]	; 0x28
 8004024:	686e      	ldr	r6, [r5, #4]
 8004026:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800402a:	3e01      	subs	r6, #1
 800402c:	1e50      	subs	r0, r2, #1
 800402e:	3b01      	subs	r3, #1
 8004030:	692a      	ldr	r2, [r5, #16]
 8004032:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8004036:	025b      	lsls	r3, r3, #9
 8004038:	0400      	lsls	r0, r0, #16
 800403a:	3a01      	subs	r2, #1
 800403c:	b29b      	uxth	r3, r3
 800403e:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8004042:	0612      	lsls	r2, r2, #24
 8004044:	4303      	orrs	r3, r0
 8004046:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800404a:	4333      	orrs	r3, r6
 800404c:	4313      	orrs	r3, r2
 800404e:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004050:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004052:	696a      	ldr	r2, [r5, #20]
 8004054:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004058:	4313      	orrs	r3, r2
 800405a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800405c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800405e:	69aa      	ldr	r2, [r5, #24]
 8004060:	f023 0320 	bic.w	r3, r3, #32
 8004064:	4313      	orrs	r3, r2
 8004066:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004068:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800406a:	f023 0310 	bic.w	r3, r3, #16
 800406e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004070:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004072:	69eb      	ldr	r3, [r5, #28]
 8004074:	4011      	ands	r1, r2
 8004076:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800407a:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800407c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800407e:	f043 0310 	orr.w	r3, r3, #16
 8004082:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004084:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8004086:	b1f7      	cbz	r7, 80040c6 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004088:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800408a:	bf0c      	ite	eq
 800408c:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004090:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8004094:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004096:	4b0e      	ldr	r3, [pc, #56]	; (80040d0 <RCCEx_PLL2_Config+0xf0>)
 8004098:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800409a:	461c      	mov	r4, r3
    __HAL_RCC_PLL2_ENABLE();
 800409c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80040a0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80040a2:	f7fc f97d 	bl	80003a0 <HAL_GetTick>
 80040a6:	4605      	mov	r5, r0
 80040a8:	e004      	b.n	80040b4 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80040aa:	f7fc f979 	bl	80003a0 <HAL_GetTick>
 80040ae:	1b40      	subs	r0, r0, r5
 80040b0:	2802      	cmp	r0, #2
 80040b2:	d806      	bhi.n	80040c2 <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	d5f7      	bpl.n	80040aa <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 80040ba:	2000      	movs	r0, #0
}
 80040bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80040be:	2001      	movs	r0, #1
}
 80040c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80040c2:	2003      	movs	r0, #3
}
 80040c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80040c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040cc:	e7e3      	b.n	8004096 <RCCEx_PLL2_Config+0xb6>
 80040ce:	bf00      	nop
 80040d0:	58024400 	.word	0x58024400
 80040d4:	ffff0007 	.word	0xffff0007

080040d8 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040d8:	4a3b      	ldr	r2, [pc, #236]	; (80041c8 <RCCEx_PLL3_Config+0xf0>)
{
 80040da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d067      	beq.n	80041b6 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80040e6:	6813      	ldr	r3, [r2, #0]
 80040e8:	460f      	mov	r7, r1
 80040ea:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040ec:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 80040ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040f2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80040f4:	f7fc f954 	bl	80003a0 <HAL_GetTick>
 80040f8:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040fa:	e004      	b.n	8004106 <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80040fc:	f7fc f950 	bl	80003a0 <HAL_GetTick>
 8004100:	1b80      	subs	r0, r0, r6
 8004102:	2802      	cmp	r0, #2
 8004104:	d859      	bhi.n	80041ba <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	009a      	lsls	r2, r3, #2
 800410a:	d4f7      	bmi.n	80040fc <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800410c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800410e:	682a      	ldr	r2, [r5, #0]
 8004110:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004114:	492d      	ldr	r1, [pc, #180]	; (80041cc <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004116:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800411a:	62a3      	str	r3, [r4, #40]	; 0x28
 800411c:	686e      	ldr	r6, [r5, #4]
 800411e:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8004122:	3e01      	subs	r6, #1
 8004124:	1e50      	subs	r0, r2, #1
 8004126:	3b01      	subs	r3, #1
 8004128:	692a      	ldr	r2, [r5, #16]
 800412a:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800412e:	025b      	lsls	r3, r3, #9
 8004130:	0400      	lsls	r0, r0, #16
 8004132:	3a01      	subs	r2, #1
 8004134:	b29b      	uxth	r3, r3
 8004136:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800413a:	0612      	lsls	r2, r2, #24
 800413c:	4303      	orrs	r3, r0
 800413e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004142:	4333      	orrs	r3, r6
 8004144:	4313      	orrs	r3, r2
 8004146:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004148:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800414a:	696a      	ldr	r2, [r5, #20]
 800414c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004150:	4313      	orrs	r3, r2
 8004152:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004154:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004156:	69aa      	ldr	r2, [r5, #24]
 8004158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800415c:	4313      	orrs	r3, r2
 800415e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004160:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004162:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004166:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004168:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800416a:	69eb      	ldr	r3, [r5, #28]
 800416c:	4011      	ands	r1, r2
 800416e:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8004172:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004174:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800417a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800417c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800417e:	b1f7      	cbz	r7, 80041be <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004180:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004182:	bf0c      	ite	eq
 8004184:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004188:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800418c:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800418e:	4b0e      	ldr	r3, [pc, #56]	; (80041c8 <RCCEx_PLL3_Config+0xf0>)
 8004190:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004192:	461c      	mov	r4, r3
    __HAL_RCC_PLL3_ENABLE();
 8004194:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004198:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800419a:	f7fc f901 	bl	80003a0 <HAL_GetTick>
 800419e:	4605      	mov	r5, r0
 80041a0:	e004      	b.n	80041ac <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80041a2:	f7fc f8fd 	bl	80003a0 <HAL_GetTick>
 80041a6:	1b40      	subs	r0, r0, r5
 80041a8:	2802      	cmp	r0, #2
 80041aa:	d806      	bhi.n	80041ba <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	d5f7      	bpl.n	80041a2 <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 80041b2:	2000      	movs	r0, #0
}
 80041b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80041b6:	2001      	movs	r0, #1
}
 80041b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80041ba:	2003      	movs	r0, #3
}
 80041bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80041be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80041c4:	e7e3      	b.n	800418e <RCCEx_PLL3_Config+0xb6>
 80041c6:	bf00      	nop
 80041c8:	58024400 	.word	0x58024400
 80041cc:	ffff0007 	.word	0xffff0007

080041d0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80041d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041d4:	6803      	ldr	r3, [r0, #0]
{
 80041d6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041d8:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 80041dc:	d016      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80041de:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80041e0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80041e4:	f000 8446 	beq.w	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 80041e8:	f240 8510 	bls.w	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 80041ec:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80041f0:	f000 8480 	beq.w	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80041f4:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80041f8:	f040 852e 	bne.w	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80041fc:	499d      	ldr	r1, [pc, #628]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80041fe:	2600      	movs	r6, #0
 8004200:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8004202:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004206:	431a      	orrs	r2, r3
 8004208:	650a      	str	r2, [r1, #80]	; 0x50
 800420a:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800420c:	05dd      	lsls	r5, r3, #23
 800420e:	d50a      	bpl.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004210:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004212:	2a04      	cmp	r2, #4
 8004214:	d806      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004216:	e8df f012 	tbh	[pc, r2, lsl #1]
 800421a:	03e0      	.short	0x03e0
 800421c:	03cf03e7 	.word	0x03cf03e7
 8004220:	039c039c 	.word	0x039c039c
      ret = HAL_ERROR;
 8004224:	2601      	movs	r6, #1
 8004226:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004228:	0598      	lsls	r0, r3, #22
 800422a:	d515      	bpl.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x88>
    switch(PeriphClkInit->Sai23ClockSelection)
 800422c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800422e:	2a80      	cmp	r2, #128	; 0x80
 8004230:	f000 843f 	beq.w	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004234:	f200 84d3 	bhi.w	8004bde <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004238:	2a00      	cmp	r2, #0
 800423a:	f000 844d 	beq.w	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800423e:	2a40      	cmp	r2, #64	; 0x40
 8004240:	f040 84d4 	bne.w	8004bec <HAL_RCCEx_PeriphCLKConfig+0xa1c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004244:	2100      	movs	r1, #0
 8004246:	1d20      	adds	r0, r4, #4
 8004248:	f7ff feca 	bl	8003fe0 <RCCEx_PLL2_Config>
 800424c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800424e:	2d00      	cmp	r5, #0
 8004250:	f000 8438 	beq.w	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004258:	0559      	lsls	r1, r3, #21
 800425a:	d518      	bpl.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xbe>
    switch(PeriphClkInit->Sai4AClockSelection)
 800425c:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8004260:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8004264:	f000 8411 	beq.w	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 8004268:	f200 84e5 	bhi.w	8004c36 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 800426c:	2a00      	cmp	r2, #0
 800426e:	f000 8447 	beq.w	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x930>
 8004272:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8004276:	f040 84e6 	bne.w	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800427a:	2100      	movs	r1, #0
 800427c:	1d20      	adds	r0, r4, #4
 800427e:	f7ff feaf 	bl	8003fe0 <RCCEx_PLL2_Config>
 8004282:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004284:	2d00      	cmp	r5, #0
 8004286:	f000 8409 	beq.w	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800428e:	051a      	lsls	r2, r3, #20
 8004290:	d518      	bpl.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4BClockSelection)
 8004292:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8004296:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 800429a:	f000 83c3 	beq.w	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x854>
 800429e:	f200 84be 	bhi.w	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xa4e>
 80042a2:	2a00      	cmp	r2, #0
 80042a4:	f000 841f 	beq.w	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x916>
 80042a8:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80042ac:	f040 84bf 	bne.w	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042b0:	2100      	movs	r1, #0
 80042b2:	1d20      	adds	r0, r4, #4
 80042b4:	f7ff fe94 	bl	8003fe0 <RCCEx_PLL2_Config>
 80042b8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80042ba:	2d00      	cmp	r5, #0
 80042bc:	f000 83bb 	beq.w	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x866>
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80042c4:	019f      	lsls	r7, r3, #6
 80042c6:	d50d      	bpl.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    switch(PeriphClkInit->QspiClockSelection)
 80042c8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80042ca:	2a10      	cmp	r2, #16
 80042cc:	f000 832d 	beq.w	800492a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 80042d0:	f240 84bd 	bls.w	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80042d4:	2a20      	cmp	r2, #32
 80042d6:	f000 835f 	beq.w	8004998 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 80042da:	2a30      	cmp	r2, #48	; 0x30
 80042dc:	f000 832a 	beq.w	8004934 <HAL_RCCEx_PeriphCLKConfig+0x764>
      ret = HAL_ERROR;
 80042e0:	2601      	movs	r6, #1
 80042e2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80042e4:	04d8      	lsls	r0, r3, #19
 80042e6:	d517      	bpl.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x148>
    switch(PeriphClkInit->Spi123ClockSelection)
 80042e8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80042ea:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80042ee:	f000 83ac 	beq.w	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80042f2:	f200 847f 	bhi.w	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xa24>
 80042f6:	2a00      	cmp	r2, #0
 80042f8:	f000 8409 	beq.w	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80042fc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004300:	f040 8480 	bne.w	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004304:	2100      	movs	r1, #0
 8004306:	1d20      	adds	r0, r4, #4
 8004308:	f7ff fe6a 	bl	8003fe0 <RCCEx_PLL2_Config>
 800430c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800430e:	2d00      	cmp	r5, #0
 8004310:	f000 83a4 	beq.w	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x88c>
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004318:	0499      	lsls	r1, r3, #18
 800431a:	d51b      	bpl.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch(PeriphClkInit->Spi45ClockSelection)
 800431c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800431e:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8004322:	f000 8326 	beq.w	8004972 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
 8004326:	f200 844a 	bhi.w	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800432a:	b142      	cbz	r2, 800433e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800432c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004330:	f040 8451 	bne.w	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004334:	2101      	movs	r1, #1
 8004336:	1d20      	adds	r0, r4, #4
 8004338:	f7ff fe52 	bl	8003fe0 <RCCEx_PLL2_Config>
 800433c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800433e:	2d00      	cmp	r5, #0
 8004340:	f040 827d 	bne.w	800483e <HAL_RCCEx_PeriphCLKConfig+0x66e>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004344:	4a4b      	ldr	r2, [pc, #300]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004346:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004348:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800434a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800434e:	430b      	orrs	r3, r1
 8004350:	6513      	str	r3, [r2, #80]	; 0x50
 8004352:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004354:	045a      	lsls	r2, r3, #17
 8004356:	d51d      	bpl.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    switch(PeriphClkInit->Spi6ClockSelection)
 8004358:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 800435c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8004360:	f000 82d9 	beq.w	8004916 <HAL_RCCEx_PeriphCLKConfig+0x746>
 8004364:	f200 83ef 	bhi.w	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004368:	b142      	cbz	r2, 800437c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800436a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800436e:	f040 83f6 	bne.w	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x98e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004372:	2101      	movs	r1, #1
 8004374:	1d20      	adds	r0, r4, #4
 8004376:	f7ff fe33 	bl	8003fe0 <RCCEx_PLL2_Config>
 800437a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800437c:	2d00      	cmp	r5, #0
 800437e:	f040 825b 	bne.w	8004838 <HAL_RCCEx_PeriphCLKConfig+0x668>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004382:	4a3c      	ldr	r2, [pc, #240]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004384:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8004388:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800438a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800438e:	430b      	orrs	r3, r1
 8004390:	6593      	str	r3, [r2, #88]	; 0x58
 8004392:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004394:	041f      	lsls	r7, r3, #16
 8004396:	d50d      	bpl.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->FdcanClockSelection)
 8004398:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800439a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800439e:	f000 82f2 	beq.w	8004986 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
 80043a2:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80043a6:	f000 81f7 	beq.w	8004798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80043aa:	2a00      	cmp	r2, #0
 80043ac:	f000 81f9 	beq.w	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      ret = HAL_ERROR;
 80043b0:	2601      	movs	r6, #1
 80043b2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80043b4:	01d8      	lsls	r0, r3, #7
 80043b6:	d50a      	bpl.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    switch(PeriphClkInit->FmcClockSelection)
 80043b8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80043ba:	2a03      	cmp	r2, #3
 80043bc:	d805      	bhi.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80043be:	e8df f012 	tbh	[pc, r2, lsl #1]
 80043c2:	0181      	.short	0x0181
 80043c4:	017c026b 	.word	0x017c026b
 80043c8:	0181      	.short	0x0181
      ret = HAL_ERROR;
 80043ca:	2601      	movs	r6, #1
 80043cc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043ce:	0259      	lsls	r1, r3, #9
 80043d0:	f100 8186 	bmi.w	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x510>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80043d4:	07df      	lsls	r7, r3, #31
 80043d6:	d52f      	bpl.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Usart16ClockSelection)
 80043d8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80043da:	2a28      	cmp	r2, #40	; 0x28
 80043dc:	d82a      	bhi.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80043de:	e8df f012 	tbh	[pc, r2, lsl #1]
 80043e2:	01cb      	.short	0x01cb
 80043e4:	00290029 	.word	0x00290029
 80043e8:	00290029 	.word	0x00290029
 80043ec:	00290029 	.word	0x00290029
 80043f0:	02760029 	.word	0x02760029
 80043f4:	00290029 	.word	0x00290029
 80043f8:	00290029 	.word	0x00290029
 80043fc:	00290029 	.word	0x00290029
 8004400:	01c50029 	.word	0x01c50029
 8004404:	00290029 	.word	0x00290029
 8004408:	00290029 	.word	0x00290029
 800440c:	00290029 	.word	0x00290029
 8004410:	01cb0029 	.word	0x01cb0029
 8004414:	00290029 	.word	0x00290029
 8004418:	00290029 	.word	0x00290029
 800441c:	00290029 	.word	0x00290029
 8004420:	01cb0029 	.word	0x01cb0029
 8004424:	00290029 	.word	0x00290029
 8004428:	00290029 	.word	0x00290029
 800442c:	00290029 	.word	0x00290029
 8004430:	01cb0029 	.word	0x01cb0029
      ret = HAL_ERROR;
 8004434:	2601      	movs	r6, #1
 8004436:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004438:	0798      	lsls	r0, r3, #30
 800443a:	d50c      	bpl.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x286>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800443c:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800443e:	2a05      	cmp	r2, #5
 8004440:	d807      	bhi.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8004442:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004446:	012e      	.short	0x012e
 8004448:	0128023b 	.word	0x0128023b
 800444c:	012e012e 	.word	0x012e012e
 8004450:	012e      	.short	0x012e
      ret = HAL_ERROR;
 8004452:	2601      	movs	r6, #1
 8004454:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004456:	0759      	lsls	r1, r3, #29
 8004458:	d510      	bpl.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800445a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800445e:	2a05      	cmp	r2, #5
 8004460:	d80a      	bhi.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004462:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004466:	010b      	.short	0x010b
 8004468:	01050222 	.word	0x01050222
 800446c:	010b010b 	.word	0x010b010b
 8004470:	010b      	.short	0x010b
 8004472:	bf00      	nop
 8004474:	58024400 	.word	0x58024400
      ret = HAL_ERROR;
 8004478:	2601      	movs	r6, #1
 800447a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800447c:	069a      	lsls	r2, r3, #26
 800447e:	d51d      	bpl.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004480:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004484:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8004488:	f000 8259 	beq.w	800493e <HAL_RCCEx_PeriphCLKConfig+0x76e>
 800448c:	f200 8379 	bhi.w	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8004490:	b142      	cbz	r2, 80044a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004492:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8004496:	f040 8380 	bne.w	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x9ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800449a:	2100      	movs	r1, #0
 800449c:	1d20      	adds	r0, r4, #4
 800449e:	f7ff fd9f 	bl	8003fe0 <RCCEx_PLL2_Config>
 80044a2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80044a4:	2d00      	cmp	r5, #0
 80044a6:	f040 81c4 	bne.w	8004832 <HAL_RCCEx_PeriphCLKConfig+0x662>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044aa:	4ab9      	ldr	r2, [pc, #740]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80044ac:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80044b0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80044b2:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80044b6:	430b      	orrs	r3, r1
 80044b8:	6553      	str	r3, [r2, #84]	; 0x54
 80044ba:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80044bc:	065f      	lsls	r7, r3, #25
 80044be:	d51d      	bpl.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80044c0:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80044c4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80044c8:	f000 8249 	beq.w	800495e <HAL_RCCEx_PeriphCLKConfig+0x78e>
 80044cc:	f200 8368 	bhi.w	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80044d0:	b142      	cbz	r2, 80044e4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80044d2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80044d6:	f040 836f 	bne.w	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044da:	2100      	movs	r1, #0
 80044dc:	1d20      	adds	r0, r4, #4
 80044de:	f7ff fd7f 	bl	8003fe0 <RCCEx_PLL2_Config>
 80044e2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80044e4:	2d00      	cmp	r5, #0
 80044e6:	f040 81b0 	bne.w	800484a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044ea:	4aa9      	ldr	r2, [pc, #676]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80044ec:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80044f0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80044f2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80044f6:	430b      	orrs	r3, r1
 80044f8:	6593      	str	r3, [r2, #88]	; 0x58
 80044fa:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80044fc:	0618      	lsls	r0, r3, #24
 80044fe:	d51d      	bpl.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004500:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8004504:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8004508:	f000 81fb 	beq.w	8004902 <HAL_RCCEx_PeriphCLKConfig+0x732>
 800450c:	f200 832a 	bhi.w	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x994>
 8004510:	b142      	cbz	r2, 8004524 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004512:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004516:	f040 8331 	bne.w	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x9ac>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800451a:	2100      	movs	r1, #0
 800451c:	1d20      	adds	r0, r4, #4
 800451e:	f7ff fd5f 	bl	8003fe0 <RCCEx_PLL2_Config>
 8004522:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004524:	2d00      	cmp	r5, #0
 8004526:	f040 8193 	bne.w	8004850 <HAL_RCCEx_PeriphCLKConfig+0x680>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800452a:	4a99      	ldr	r2, [pc, #612]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800452c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8004530:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004532:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004536:	430b      	orrs	r3, r1
 8004538:	6593      	str	r3, [r2, #88]	; 0x58
 800453a:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800453c:	0719      	lsls	r1, r3, #28
 800453e:	d50c      	bpl.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x38a>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004540:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8004544:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004548:	f000 8254 	beq.w	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x824>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800454c:	4990      	ldr	r1, [pc, #576]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800454e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8004550:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004554:	4313      	orrs	r3, r2
 8004556:	654b      	str	r3, [r1, #84]	; 0x54
 8004558:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800455a:	06da      	lsls	r2, r3, #27
 800455c:	d50c      	bpl.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800455e:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8004562:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004566:	f000 8251 	beq.w	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x83c>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800456a:	4989      	ldr	r1, [pc, #548]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800456c:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800456e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004572:	4313      	orrs	r3, r2
 8004574:	658b      	str	r3, [r1, #88]	; 0x58
 8004576:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004578:	031f      	lsls	r7, r3, #12
 800457a:	d50e      	bpl.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
    switch(PeriphClkInit->AdcClockSelection)
 800457c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8004580:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004584:	f000 8118 	beq.w	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 8004588:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800458c:	f000 811a 	beq.w	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8004590:	2900      	cmp	r1, #0
 8004592:	f000 82c3 	beq.w	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x94c>
      ret = HAL_ERROR;
 8004596:	2601      	movs	r6, #1
 8004598:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800459a:	0358      	lsls	r0, r3, #13
 800459c:	d50f      	bpl.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    switch(PeriphClkInit->UsbClockSelection)
 800459e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80045a2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80045a6:	f000 8119 	beq.w	80047dc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80045aa:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80045ae:	f000 811b 	beq.w	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80045b2:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80045b6:	f000 82b9 	beq.w	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      ret = HAL_ERROR;
 80045ba:	2601      	movs	r6, #1
 80045bc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80045be:	03d9      	lsls	r1, r3, #15
 80045c0:	d511      	bpl.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch(PeriphClkInit->SdmmcClockSelection)
 80045c2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80045c4:	2a00      	cmp	r2, #0
 80045c6:	f000 8156 	beq.w	8004876 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 80045ca:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80045ce:	f040 8145 	bne.w	800485c <HAL_RCCEx_PeriphCLKConfig+0x68c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80045d2:	2102      	movs	r1, #2
 80045d4:	1d20      	adds	r0, r4, #4
 80045d6:	f7ff fd03 	bl	8003fe0 <RCCEx_PLL2_Config>
 80045da:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80045dc:	2d00      	cmp	r5, #0
 80045de:	f000 8152 	beq.w	8004886 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045e6:	009a      	lsls	r2, r3, #2
 80045e8:	f100 8109 	bmi.w	80047fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80045ec:	039f      	lsls	r7, r3, #14
 80045ee:	d42e      	bmi.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80045f0:	1c30      	adds	r0, r6, #0
 80045f2:	bf18      	it	ne
 80045f4:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045f6:	02dd      	lsls	r5, r3, #11
 80045f8:	d507      	bpl.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045fa:	4a65      	ldr	r2, [pc, #404]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80045fc:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80045fe:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004600:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004604:	430b      	orrs	r3, r1
 8004606:	6513      	str	r3, [r2, #80]	; 0x50
 8004608:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800460a:	0299      	lsls	r1, r3, #10
 800460c:	d507      	bpl.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x44e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800460e:	4a60      	ldr	r2, [pc, #384]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8004610:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8004612:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004614:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004618:	430b      	orrs	r3, r1
 800461a:	6513      	str	r3, [r2, #80]	; 0x50
 800461c:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800461e:	005a      	lsls	r2, r3, #1
 8004620:	d50a      	bpl.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x468>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004622:	4b5b      	ldr	r3, [pc, #364]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800462a:	611a      	str	r2, [r3, #16]
 800462c:	691a      	ldr	r2, [r3, #16]
 800462e:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8004632:	430a      	orrs	r2, r1
 8004634:	611a      	str	r2, [r3, #16]
 8004636:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004638:	2b00      	cmp	r3, #0
 800463a:	da06      	bge.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x47a>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800463c:	4a54      	ldr	r2, [pc, #336]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800463e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004640:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004642:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004646:	430b      	orrs	r3, r1
 8004648:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800464a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 800464e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8004650:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004654:	f000 8105 	beq.w	8004862 <HAL_RCCEx_PeriphCLKConfig+0x692>
 8004658:	f240 8142 	bls.w	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x710>
 800465c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004660:	f000 8104 	beq.w	800486c <HAL_RCCEx_PeriphCLKConfig+0x69c>
 8004664:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004668:	f000 8100 	beq.w	800486c <HAL_RCCEx_PeriphCLKConfig+0x69c>
 800466c:	2001      	movs	r0, #1
 800466e:	e7c2      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004670:	2101      	movs	r1, #1
 8004672:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004676:	f7ff fd2f 	bl	80040d8 <RCCEx_PLL3_Config>
 800467a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800467c:	2d00      	cmp	r5, #0
 800467e:	f040 80d5 	bne.w	800482c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004682:	4a43      	ldr	r2, [pc, #268]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8004684:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8004688:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800468a:	f023 0307 	bic.w	r3, r3, #7
 800468e:	430b      	orrs	r3, r1
 8004690:	6593      	str	r3, [r2, #88]	; 0x58
 8004692:	6823      	ldr	r3, [r4, #0]
 8004694:	e6f2      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004696:	2101      	movs	r1, #1
 8004698:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800469c:	f7ff fd1c 	bl	80040d8 <RCCEx_PLL3_Config>
 80046a0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80046a2:	2d00      	cmp	r5, #0
 80046a4:	f040 80bf 	bne.w	8004826 <HAL_RCCEx_PeriphCLKConfig+0x656>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80046a8:	4a39      	ldr	r2, [pc, #228]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80046aa:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80046ac:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80046ae:	f023 0307 	bic.w	r3, r3, #7
 80046b2:	430b      	orrs	r3, r1
 80046b4:	6553      	str	r3, [r2, #84]	; 0x54
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	e6cd      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x286>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80046ba:	2102      	movs	r1, #2
 80046bc:	1d20      	adds	r0, r4, #4
 80046be:	f7ff fc8f 	bl	8003fe0 <RCCEx_PLL2_Config>
 80046c2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80046c4:	2d00      	cmp	r5, #0
 80046c6:	f040 80ab 	bne.w	8004820 <HAL_RCCEx_PeriphCLKConfig+0x650>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80046ca:	4a31      	ldr	r2, [pc, #196]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80046cc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80046ce:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80046d0:	f023 0303 	bic.w	r3, r3, #3
 80046d4:	430b      	orrs	r3, r1
 80046d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046d8:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046da:	0259      	lsls	r1, r3, #9
 80046dc:	f57f ae7a 	bpl.w	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x204>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046e0:	4b2c      	ldr	r3, [pc, #176]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80046e2:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046e4:	461f      	mov	r7, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ea:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80046ec:	f7fb fe58 	bl	80003a0 <HAL_GetTick>
 80046f0:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046f2:	e006      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x532>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f4:	f7fb fe54 	bl	80003a0 <HAL_GetTick>
 80046f8:	eba0 0008 	sub.w	r0, r0, r8
 80046fc:	2864      	cmp	r0, #100	; 0x64
 80046fe:	f200 821e 	bhi.w	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x96e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	05da      	lsls	r2, r3, #23
 8004706:	d5f5      	bpl.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    if(ret == HAL_OK)
 8004708:	2d00      	cmp	r5, #0
 800470a:	f040 82c6 	bne.w	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xaca>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800470e:	4b20      	ldr	r3, [pc, #128]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8004710:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8004714:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004716:	4051      	eors	r1, r2
 8004718:	f411 7f40 	tst.w	r1, #768	; 0x300
 800471c:	d00d      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x56a>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800471e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8004720:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004722:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8004726:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800472a:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800472c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800472e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004732:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8004734:	671a      	str	r2, [r3, #112]	; 0x70
 8004736:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800473a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800473e:	f000 828e 	beq.w	8004c5e <HAL_RCCEx_PeriphCLKConfig+0xa8e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004742:	f402 7340 	and.w	r3, r2, #768	; 0x300
 8004746:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800474a:	f000 829c 	beq.w	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800474e:	4a10      	ldr	r2, [pc, #64]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8004750:	6913      	ldr	r3, [r2, #16]
 8004752:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004756:	6113      	str	r3, [r2, #16]
 8004758:	4a0d      	ldr	r2, [pc, #52]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800475a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800475e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004764:	430b      	orrs	r3, r1
 8004766:	6713      	str	r3, [r2, #112]	; 0x70
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	e633      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x204>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800476c:	2101      	movs	r1, #1
 800476e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004772:	f7ff fcb1 	bl	80040d8 <RCCEx_PLL3_Config>
 8004776:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004778:	2d00      	cmp	r5, #0
 800477a:	d14e      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x64a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800477c:	4a04      	ldr	r2, [pc, #16]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800477e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004780:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004782:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004786:	430b      	orrs	r3, r1
 8004788:	6553      	str	r3, [r2, #84]	; 0x54
 800478a:	6823      	ldr	r3, [r4, #0]
 800478c:	e654      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800478e:	bf00      	nop
 8004790:	58024400 	.word	0x58024400
 8004794:	58024800 	.word	0x58024800
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004798:	2101      	movs	r1, #1
 800479a:	1d20      	adds	r0, r4, #4
 800479c:	f7ff fc20 	bl	8003fe0 <RCCEx_PLL2_Config>
 80047a0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80047a2:	2d00      	cmp	r5, #0
 80047a4:	d14e      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x674>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80047a6:	4ab2      	ldr	r2, [pc, #712]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 80047a8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80047aa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80047ac:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80047b0:	430b      	orrs	r3, r1
 80047b2:	6513      	str	r3, [r2, #80]	; 0x50
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	e5fd      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047b8:	2102      	movs	r1, #2
 80047ba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80047be:	f7ff fc8b 	bl	80040d8 <RCCEx_PLL3_Config>
 80047c2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80047c4:	2d00      	cmp	r5, #0
 80047c6:	d146      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x686>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047c8:	4aa9      	ldr	r2, [pc, #676]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 80047ca:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80047ce:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80047d0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80047d4:	430b      	orrs	r3, r1
 80047d6:	6593      	str	r3, [r2, #88]	; 0x58
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	e6de      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047dc:	2101      	movs	r1, #1
 80047de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80047e2:	f7ff fc79 	bl	80040d8 <RCCEx_PLL3_Config>
 80047e6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80047e8:	b9a5      	cbnz	r5, 8004814 <HAL_RCCEx_PeriphCLKConfig+0x644>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047ea:	4aa1      	ldr	r2, [pc, #644]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 80047ec:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80047f0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80047f2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80047f6:	430b      	orrs	r3, r1
 80047f8:	6553      	str	r3, [r2, #84]	; 0x54
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	e6df      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80047fe:	2102      	movs	r1, #2
 8004800:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004804:	f7ff fc68 	bl	80040d8 <RCCEx_PLL3_Config>
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	2800      	cmp	r0, #0
 800480c:	f43f aeee 	beq.w	80045ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
      status=HAL_ERROR;
 8004810:	2601      	movs	r6, #1
 8004812:	e6eb      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004814:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004816:	462e      	mov	r6, r5
 8004818:	e6d1      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 800481a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800481c:	462e      	mov	r6, r5
 800481e:	e60b      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8004820:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004822:	462e      	mov	r6, r5
 8004824:	e5d3      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8004826:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004828:	462e      	mov	r6, r5
 800482a:	e614      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800482c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800482e:	462e      	mov	r6, r5
 8004830:	e624      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004832:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004834:	462e      	mov	r6, r5
 8004836:	e641      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 8004838:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800483a:	462e      	mov	r6, r5
 800483c:	e5aa      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 800483e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004840:	462e      	mov	r6, r5
 8004842:	e587      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8004844:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004846:	462e      	mov	r6, r5
 8004848:	e5b4      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800484a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800484c:	462e      	mov	r6, r5
 800484e:	e655      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8004850:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004852:	462e      	mov	r6, r5
 8004854:	e672      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8004856:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004858:	462e      	mov	r6, r5
 800485a:	e69e      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      ret = HAL_ERROR;
 800485c:	2601      	movs	r6, #1
 800485e:	4635      	mov	r5, r6
 8004860:	e6c1      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004862:	4a83      	ldr	r2, [pc, #524]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8004864:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800486a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800486c:	2d00      	cmp	r5, #0
 800486e:	d03c      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x71a>
 8004870:	6823      	ldr	r3, [r4, #0]
 8004872:	2001      	movs	r0, #1
 8004874:	e6bf      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004876:	4a7e      	ldr	r2, [pc, #504]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8004878:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800487a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800487e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004880:	2d00      	cmp	r5, #0
 8004882:	f47f aeae 	bne.w	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004886:	4a7a      	ldr	r2, [pc, #488]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8004888:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800488a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800488c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004890:	430b      	orrs	r3, r1
 8004892:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	e6a6      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004898:	4a75      	ldr	r2, [pc, #468]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 800489a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800489c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80048a2:	2d00      	cmp	r5, #0
 80048a4:	f43f af11 	beq.w	80046ca <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80048a8:	e7ba      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x650>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048aa:	2101      	movs	r1, #1
 80048ac:	1d20      	adds	r0, r4, #4
 80048ae:	f7ff fb97 	bl	8003fe0 <RCCEx_PLL2_Config>
 80048b2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80048b4:	2d00      	cmp	r5, #0
 80048b6:	f43f aee4 	beq.w	8004682 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80048ba:	e7b7      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048bc:	2101      	movs	r1, #1
 80048be:	1d20      	adds	r0, r4, #4
 80048c0:	f7ff fb8e 	bl	8003fe0 <RCCEx_PLL2_Config>
 80048c4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80048c6:	2d00      	cmp	r5, #0
 80048c8:	f43f aeee 	beq.w	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 80048cc:	e7ab      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x656>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048ce:	2101      	movs	r1, #1
 80048d0:	1d20      	adds	r0, r4, #4
 80048d2:	f7ff fb85 	bl	8003fe0 <RCCEx_PLL2_Config>
 80048d6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80048d8:	2d00      	cmp	r5, #0
 80048da:	f43f af4f 	beq.w	800477c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80048de:	e79c      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x64a>
    switch(PeriphClkInit->RngClockSelection)
 80048e0:	2a00      	cmp	r2, #0
 80048e2:	f47f aec3 	bne.w	800466c <HAL_RCCEx_PeriphCLKConfig+0x49c>
    if(ret == HAL_OK)
 80048e6:	2d00      	cmp	r5, #0
 80048e8:	d1c2      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048ea:	4a61      	ldr	r2, [pc, #388]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 80048ec:	1c30      	adds	r0, r6, #0
 80048ee:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80048f0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80048f2:	bf18      	it	ne
 80048f4:	2001      	movne	r0, #1
 80048f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048fa:	430b      	orrs	r3, r1
 80048fc:	6553      	str	r3, [r2, #84]	; 0x54
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	e679      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004902:	2102      	movs	r1, #2
 8004904:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004908:	f7ff fbe6 	bl	80040d8 <RCCEx_PLL3_Config>
 800490c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800490e:	2d00      	cmp	r5, #0
 8004910:	f43f ae0b 	beq.w	800452a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004914:	e79c      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x680>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004916:	2101      	movs	r1, #1
 8004918:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800491c:	f7ff fbdc 	bl	80040d8 <RCCEx_PLL3_Config>
 8004920:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004922:	2d00      	cmp	r5, #0
 8004924:	f43f ad2d 	beq.w	8004382 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004928:	e786      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x668>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800492a:	4a51      	ldr	r2, [pc, #324]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 800492c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800492e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004932:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004934:	2d00      	cmp	r5, #0
 8004936:	d036      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x7d6>
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	462e      	mov	r6, r5
 800493c:	e4d2      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800493e:	2102      	movs	r1, #2
 8004940:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004944:	f7ff fbc8 	bl	80040d8 <RCCEx_PLL3_Config>
 8004948:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800494a:	2d00      	cmp	r5, #0
 800494c:	f43f adad 	beq.w	80044aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004950:	e76f      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x662>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004952:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8004954:	2d00      	cmp	r5, #0
 8004956:	d037      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	462e      	mov	r6, r5
 800495c:	e464      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x58>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800495e:	2102      	movs	r1, #2
 8004960:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004964:	f7ff fbb8 	bl	80040d8 <RCCEx_PLL3_Config>
 8004968:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800496a:	2d00      	cmp	r5, #0
 800496c:	f43f adbd 	beq.w	80044ea <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8004970:	e76b      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004972:	2101      	movs	r1, #1
 8004974:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004978:	f7ff fbae 	bl	80040d8 <RCCEx_PLL3_Config>
 800497c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800497e:	2d00      	cmp	r5, #0
 8004980:	f43f ace0 	beq.w	8004344 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8004984:	e75b      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x66e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004986:	4a3a      	ldr	r2, [pc, #232]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8004988:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800498a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800498e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004990:	2d00      	cmp	r5, #0
 8004992:	f43f af08 	beq.w	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8004996:	e755      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x674>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004998:	2102      	movs	r1, #2
 800499a:	1d20      	adds	r0, r4, #4
 800499c:	f7ff fb20 	bl	8003fe0 <RCCEx_PLL2_Config>
 80049a0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80049a2:	2d00      	cmp	r5, #0
 80049a4:	d1c8      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x768>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80049a6:	4a32      	ldr	r2, [pc, #200]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 80049a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80049aa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80049ac:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80049b0:	430b      	orrs	r3, r1
 80049b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	e495      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80049b8:	2100      	movs	r1, #0
 80049ba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80049be:	f7ff fb8b 	bl	80040d8 <RCCEx_PLL3_Config>
 80049c2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80049c4:	2d00      	cmp	r5, #0
 80049c6:	d1c7      	bne.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x788>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049c8:	4a29      	ldr	r2, [pc, #164]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 80049ca:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80049cc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80049ce:	f023 0307 	bic.w	r3, r3, #7
 80049d2:	430b      	orrs	r3, r1
 80049d4:	6513      	str	r3, [r2, #80]	; 0x50
 80049d6:	6823      	ldr	r3, [r4, #0]
 80049d8:	e426      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049da:	4a25      	ldr	r2, [pc, #148]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
      break;
 80049dc:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80049e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049e4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80049e6:	e7b5      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x784>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049e8:	2100      	movs	r1, #0
 80049ea:	1d20      	adds	r0, r4, #4
 80049ec:	f7ff faf8 	bl	8003fe0 <RCCEx_PLL2_Config>
 80049f0:	4605      	mov	r5, r0
      break;
 80049f2:	e7af      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x784>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80049f4:	2102      	movs	r1, #2
 80049f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80049fa:	f7ff fb6d 	bl	80040d8 <RCCEx_PLL3_Config>
 80049fe:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8004a02:	2800      	cmp	r0, #0
 8004a04:	f43f ada2 	beq.w	800454c <HAL_RCCEx_PeriphCLKConfig+0x37c>
          status = HAL_ERROR;
 8004a08:	2601      	movs	r6, #1
 8004a0a:	e59f      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x37c>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004a0c:	2102      	movs	r1, #2
 8004a0e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004a12:	f7ff fb61 	bl	80040d8 <RCCEx_PLL3_Config>
 8004a16:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	f43f ada5 	beq.w	800456a <HAL_RCCEx_PeriphCLKConfig+0x39a>
        status = HAL_ERROR;
 8004a20:	2601      	movs	r6, #1
 8004a22:	e5a2      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x39a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a24:	2100      	movs	r1, #0
 8004a26:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004a2a:	f7ff fb55 	bl	80040d8 <RCCEx_PLL3_Config>
 8004a2e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004a30:	2d00      	cmp	r5, #0
 8004a32:	f47f ac45 	bne.w	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004a36:	4a0e      	ldr	r2, [pc, #56]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8004a38:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8004a3c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004a3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004a42:	430b      	orrs	r3, r1
 8004a44:	6593      	str	r3, [r2, #88]	; 0x58
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	e43c      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004a50:	f7ff fb42 	bl	80040d8 <RCCEx_PLL3_Config>
 8004a54:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004a56:	2d00      	cmp	r5, #0
 8004a58:	f47f ac5c 	bne.w	8004314 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004a5c:	4a04      	ldr	r2, [pc, #16]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8004a5e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004a60:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a66:	430b      	orrs	r3, r1
 8004a68:	6513      	str	r3, [r2, #80]	; 0x50
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	e454      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8004a6e:	bf00      	nop
 8004a70:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a74:	2102      	movs	r1, #2
 8004a76:	3004      	adds	r0, #4
 8004a78:	f7ff fab2 	bl	8003fe0 <RCCEx_PLL2_Config>
 8004a7c:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004a7e:	2e00      	cmp	r6, #0
 8004a80:	f47f abc3 	bne.w	800420a <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8004a84:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a86:	f7ff bbb9 	b.w	80041fc <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004a90:	f7ff fb22 	bl	80040d8 <RCCEx_PLL3_Config>
 8004a94:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004a96:	2d00      	cmp	r5, #0
 8004a98:	f47f abf7 	bne.w	800428a <HAL_RCCEx_PeriphCLKConfig+0xba>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004a9c:	4a81      	ldr	r2, [pc, #516]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004a9e:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8004aa2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004aa4:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8004aa8:	430b      	orrs	r3, r1
 8004aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8004aac:	6823      	ldr	r3, [r4, #0]
 8004aae:	f7ff bbee 	b.w	800428e <HAL_RCCEx_PeriphCLKConfig+0xbe>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004ab8:	f7ff fb0e 	bl	80040d8 <RCCEx_PLL3_Config>
 8004abc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004abe:	2d00      	cmp	r5, #0
 8004ac0:	f47f abc8 	bne.w	8004254 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004ac4:	4a77      	ldr	r2, [pc, #476]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004ac6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004ac8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004aca:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8004ace:	430b      	orrs	r3, r1
 8004ad0:	6513      	str	r3, [r2, #80]	; 0x50
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	f7ff bbc0 	b.w	8004258 <HAL_RCCEx_PeriphCLKConfig+0x88>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ad8:	4a72      	ldr	r2, [pc, #456]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004ada:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ae0:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004ae2:	f7ff bbb4 	b.w	800424e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ae6:	4a6f      	ldr	r2, [pc, #444]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004ae8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aee:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004af0:	f7ff bbe3 	b.w	80042ba <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004af4:	2102      	movs	r1, #2
 8004af6:	3024      	adds	r0, #36	; 0x24
 8004af8:	f7ff faee 	bl	80040d8 <RCCEx_PLL3_Config>
 8004afc:	4606      	mov	r6, r0
      break;
 8004afe:	e7be      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x8ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b00:	4a68      	ldr	r2, [pc, #416]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004b02:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b08:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004b0a:	f7ff bbbb 	b.w	8004284 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b0e:	4a65      	ldr	r2, [pc, #404]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004b10:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b16:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004b18:	f7ff bbf9 	b.w	800430e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b1c:	1d20      	adds	r0, r4, #4
 8004b1e:	f7ff fa5f 	bl	8003fe0 <RCCEx_PLL2_Config>
 8004b22:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004b24:	2d00      	cmp	r5, #0
 8004b26:	f43f ae4f 	beq.w	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8004b2a:	e694      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x686>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b2c:	4a5d      	ldr	r2, [pc, #372]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004b2e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b34:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004b36:	2d00      	cmp	r5, #0
 8004b38:	f43f ae57 	beq.w	80047ea <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8004b3c:	e66a      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x644>
            ret = HAL_TIMEOUT;
 8004b3e:	2603      	movs	r6, #3
 8004b40:	6823      	ldr	r3, [r4, #0]
 8004b42:	4635      	mov	r5, r6
 8004b44:	e446      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x204>
    switch(PeriphClkInit->Spi6ClockSelection)
 8004b46:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004b4a:	f43f ac17 	beq.w	800437c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8004b4e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004b52:	f43f ac13 	beq.w	800437c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8004b56:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8004b5a:	f43f ac0f 	beq.w	800437c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
      ret = HAL_ERROR;
 8004b5e:	2601      	movs	r6, #1
 8004b60:	4635      	mov	r5, r6
 8004b62:	e417      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004b64:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004b68:	f43f acdc 	beq.w	8004524 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004b6c:	f5b2 4f20 	cmp.w	r2, #40960	; 0xa000
 8004b70:	f43f acd8 	beq.w	8004524 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004b74:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8004b78:	f43f acd4 	beq.w	8004524 <HAL_RCCEx_PeriphCLKConfig+0x354>
      ret = HAL_ERROR;
 8004b7c:	2601      	movs	r6, #1
 8004b7e:	4635      	mov	r5, r6
 8004b80:	e4dc      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004b82:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004b86:	f43f ac8d 	beq.w	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004b8a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004b8e:	f43f ac89 	beq.w	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004b92:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8004b96:	f43f ac85 	beq.w	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      ret = HAL_ERROR;
 8004b9a:	2601      	movs	r6, #1
 8004b9c:	4635      	mov	r5, r6
 8004b9e:	e48d      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004ba0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004ba4:	f43f ac9e 	beq.w	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004ba8:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8004bac:	f43f ac9a 	beq.w	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004bb0:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8004bb4:	f43f ac96 	beq.w	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = HAL_ERROR;
 8004bb8:	2601      	movs	r6, #1
 8004bba:	4635      	mov	r5, r6
 8004bbc:	e49e      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Spi45ClockSelection)
 8004bbe:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8004bc2:	f43f abbc 	beq.w	800433e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004bc6:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8004bca:	f43f abb8 	beq.w	800433e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004bce:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8004bd2:	f43f abb4 	beq.w	800433e <HAL_RCCEx_PeriphCLKConfig+0x16e>
      ret = HAL_ERROR;
 8004bd6:	2601      	movs	r6, #1
 8004bd8:	4635      	mov	r5, r6
 8004bda:	f7ff bbbb 	b.w	8004354 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch(PeriphClkInit->Sai23ClockSelection)
 8004bde:	2ac0      	cmp	r2, #192	; 0xc0
 8004be0:	f43f ab35 	beq.w	800424e <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8004be4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004be8:	f43f ab31 	beq.w	800424e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      ret = HAL_ERROR;
 8004bec:	2601      	movs	r6, #1
 8004bee:	4635      	mov	r5, r6
 8004bf0:	f7ff bb32 	b.w	8004258 <HAL_RCCEx_PeriphCLKConfig+0x88>
    switch(PeriphClkInit->Spi123ClockSelection)
 8004bf4:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8004bf8:	f43f ab89 	beq.w	800430e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8004bfc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8004c00:	f43f ab85 	beq.w	800430e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = HAL_ERROR;
 8004c04:	2601      	movs	r6, #1
 8004c06:	4635      	mov	r5, r6
 8004c08:	f7ff bb86 	b.w	8004318 <HAL_RCCEx_PeriphCLKConfig+0x148>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8004c0c:	bb22      	cbnz	r2, 8004c58 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c0e:	4a25      	ldr	r2, [pc, #148]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004c10:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c18:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8004c1a:	f7ff baef 	b.w	80041fc <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai4BClockSelection)
 8004c1e:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8004c22:	f43f ab4a 	beq.w	80042ba <HAL_RCCEx_PeriphCLKConfig+0xea>
 8004c26:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8004c2a:	f43f ab46 	beq.w	80042ba <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = HAL_ERROR;
 8004c2e:	2601      	movs	r6, #1
 8004c30:	4635      	mov	r5, r6
 8004c32:	f7ff bb47 	b.w	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004c36:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8004c3a:	f43f ab23 	beq.w	8004284 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8004c3e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8004c42:	f43f ab1f 	beq.w	8004284 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = HAL_ERROR;
 8004c46:	2601      	movs	r6, #1
 8004c48:	4635      	mov	r5, r6
 8004c4a:	f7ff bb20 	b.w	800428e <HAL_RCCEx_PeriphCLKConfig+0xbe>
    switch(PeriphClkInit->QspiClockSelection)
 8004c4e:	2a00      	cmp	r2, #0
 8004c50:	f43f ae70 	beq.w	8004934 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8004c54:	f7ff bb44 	b.w	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      ret = HAL_ERROR;
 8004c58:	2601      	movs	r6, #1
 8004c5a:	f7ff bad7 	b.w	800420c <HAL_RCCEx_PeriphCLKConfig+0x3c>
        tickstart = HAL_GetTick();
 8004c5e:	f7fb fb9f 	bl	80003a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c62:	4f10      	ldr	r7, [pc, #64]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
        tickstart = HAL_GetTick();
 8004c64:	4681      	mov	r9, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c66:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c6a:	e006      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c6c:	f7fb fb98 	bl	80003a0 <HAL_GetTick>
 8004c70:	eba0 0009 	sub.w	r0, r0, r9
 8004c74:	4540      	cmp	r0, r8
 8004c76:	f63f af62 	bhi.w	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x96e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c7c:	079b      	lsls	r3, r3, #30
 8004c7e:	d5f5      	bpl.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0xa9c>
 8004c80:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8004c84:	e55d      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x572>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c86:	4807      	ldr	r0, [pc, #28]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004c88:	4b07      	ldr	r3, [pc, #28]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xad8>)
 8004c8a:	6901      	ldr	r1, [r0, #16]
 8004c8c:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 8004c90:	f421 527c 	bic.w	r2, r1, #16128	; 0x3f00
 8004c94:	4313      	orrs	r3, r2
 8004c96:	6103      	str	r3, [r0, #16]
 8004c98:	e55e      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004c9a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004c9c:	462e      	mov	r6, r5
 8004c9e:	f7ff bb99 	b.w	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004ca2:	bf00      	nop
 8004ca4:	58024400 	.word	0x58024400
 8004ca8:	00ffffcf 	.word	0x00ffffcf

08004cac <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cac:	4a46      	ldr	r2, [pc, #280]	; (8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
{
 8004cae:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cb0:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004cb2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004cb4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004cb6:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004cba:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d059      	beq.n	8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004cc0:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004cc4:	f3c1 1100 	ubfx	r1, r1, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cc8:	f004 0403 	and.w	r4, r4, #3
 8004ccc:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004cd0:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8004cd4:	2c01      	cmp	r4, #1
 8004cd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cda:	ee06 1a90 	vmov	s13, r1
 8004cde:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8004ce2:	d002      	beq.n	8004cea <HAL_RCCEx_GetPLL2ClockFreq+0x3e>
 8004ce4:	d34e      	bcc.n	8004d84 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 8004ce6:	2c02      	cmp	r4, #2
 8004ce8:	d049      	beq.n	8004d7e <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004cea:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8004dcc <HAL_RCCEx_GetPLL2ClockFreq+0x120>
 8004cee:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8004cf2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf8:	ee07 3a10 	vmov	s14, r3
 8004cfc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004d00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004d04:	ee37 7a25 	vadd.f32	s14, s14, s11
 8004d08:	ee77 7a26 	vadd.f32	s15, s14, s13
 8004d0c:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004d10:	4a2d      	ldr	r2, [pc, #180]	; (8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
 8004d12:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004d16:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004d18:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004d1c:	ee06 3a90 	vmov	s13, r3
 8004d20:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8004d24:	bc30      	pop	{r4, r5}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004d26:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004d2a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004d2e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004d32:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004d36:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004d38:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004d3c:	ee06 3a90 	vmov	s13, r3
 8004d40:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004d44:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004d48:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004d4c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004d50:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004d54:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004d56:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004d5a:	ee07 3a10 	vmov	s14, r3
 8004d5e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004d62:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004d66:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004d6a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004d6e:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8004d72:	4770      	bx	lr
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d74:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d78:	6083      	str	r3, [r0, #8]
}
 8004d7a:	bc30      	pop	{r4, r5}
 8004d7c:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d7e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8004d82:	e7b4      	b.n	8004cee <HAL_RCCEx_GetPLL2ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d84:	6813      	ldr	r3, [r2, #0]
 8004d86:	069b      	lsls	r3, r3, #26
 8004d88:	d51a      	bpl.n	8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d8a:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d8c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d90:	4910      	ldr	r1, [pc, #64]	; (8004dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8004d92:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d96:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d98:	40e1      	lsrs	r1, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9e:	ee07 1a10 	vmov	s14, r1
 8004da2:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8004da6:	ee07 3a10 	vmov	s14, r3
 8004daa:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8004dae:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8004db2:	ee76 7a05 	vadd.f32	s15, s12, s10
 8004db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dbe:	e7a7      	b.n	8004d10 <HAL_RCCEx_GetPLL2ClockFreq+0x64>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004dc0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8004dc4:	e793      	b.n	8004cee <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8004dc6:	bf00      	nop
 8004dc8:	58024400 	.word	0x58024400
 8004dcc:	4a742400 	.word	0x4a742400
 8004dd0:	4bbebc20 	.word	0x4bbebc20
 8004dd4:	03d09000 	.word	0x03d09000
 8004dd8:	4c742400 	.word	0x4c742400

08004ddc <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ddc:	4a46      	ldr	r2, [pc, #280]	; (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
{
 8004dde:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004de0:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004de2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004de4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004de6:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004dea:	6c55      	ldr	r5, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d059      	beq.n	8004ea4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004df0:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004df4:	f3c1 2100 	ubfx	r1, r1, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004df8:	f004 0403 	and.w	r4, r4, #3
 8004dfc:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004e00:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8004e04:	2c01      	cmp	r4, #1
 8004e06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e0a:	ee06 1a90 	vmov	s13, r1
 8004e0e:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8004e12:	d002      	beq.n	8004e1a <HAL_RCCEx_GetPLL3ClockFreq+0x3e>
 8004e14:	d34e      	bcc.n	8004eb4 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8004e16:	2c02      	cmp	r4, #2
 8004e18:	d049      	beq.n	8004eae <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e1a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8004efc <HAL_RCCEx_GetPLL3ClockFreq+0x120>
 8004e1e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8004e22:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e28:	ee07 3a10 	vmov	s14, r3
 8004e2c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004e30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004e34:	ee37 7a25 	vadd.f32	s14, s14, s11
 8004e38:	ee77 7a26 	vadd.f32	s15, s14, s13
 8004e3c:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004e40:	4a2d      	ldr	r2, [pc, #180]	; (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
 8004e42:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004e46:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004e48:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004e4c:	ee06 3a90 	vmov	s13, r3
 8004e50:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8004e54:	bc30      	pop	{r4, r5}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004e56:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004e5a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004e5e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004e62:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004e66:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004e68:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004e6c:	ee06 3a90 	vmov	s13, r3
 8004e70:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004e74:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004e78:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004e7c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004e80:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004e84:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004e86:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004e8a:	ee07 3a10 	vmov	s14, r3
 8004e8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004e92:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004e96:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004e9a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004e9e:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8004ea2:	4770      	bx	lr
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ea4:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ea8:	6083      	str	r3, [r0, #8]
}
 8004eaa:	bc30      	pop	{r4, r5}
 8004eac:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004eae:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004f00 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8004eb2:	e7b4      	b.n	8004e1e <HAL_RCCEx_GetPLL3ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004eb4:	6813      	ldr	r3, [r2, #0]
 8004eb6:	069b      	lsls	r3, r3, #26
 8004eb8:	d51a      	bpl.n	8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004eba:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ebc:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ec0:	4910      	ldr	r1, [pc, #64]	; (8004f04 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8004ec2:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ec6:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ec8:	40e1      	lsrs	r1, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ece:	ee07 1a10 	vmov	s14, r1
 8004ed2:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8004ed6:	ee07 3a10 	vmov	s14, r3
 8004eda:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8004ede:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8004ee2:	ee76 7a05 	vadd.f32	s15, s12, s10
 8004ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eee:	e7a7      	b.n	8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x64>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ef0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8004ef4:	e793      	b.n	8004e1e <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 8004ef6:	bf00      	nop
 8004ef8:	58024400 	.word	0x58024400
 8004efc:	4a742400 	.word	0x4a742400
 8004f00:	4bbebc20 	.word	0x4bbebc20
 8004f04:	03d09000 	.word	0x03d09000
 8004f08:	4c742400 	.word	0x4c742400

08004f0c <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f0c:	4a46      	ldr	r2, [pc, #280]	; (8005028 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
{
 8004f0e:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f10:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8004f12:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004f14:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8004f16:	f3c3 1305 	ubfx	r3, r3, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004f1a:	6b55      	ldr	r5, [r2, #52]	; 0x34
  if (pll1m != 0U)
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d059      	beq.n	8004fd4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004f20:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004f24:	f001 0101 	and.w	r1, r1, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f28:	f004 0403 	and.w	r4, r4, #3
 8004f2c:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004f30:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8004f34:	2c01      	cmp	r4, #1
 8004f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f3a:	ee06 1a90 	vmov	s13, r1
 8004f3e:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8004f42:	d002      	beq.n	8004f4a <HAL_RCCEx_GetPLL1ClockFreq+0x3e>
 8004f44:	d34e      	bcc.n	8004fe4 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 8004f46:	2c02      	cmp	r4, #2
 8004f48:	d049      	beq.n	8004fde <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f4a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800502c <HAL_RCCEx_GetPLL1ClockFreq+0x120>
 8004f4e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8004f52:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f58:	ee07 3a10 	vmov	s14, r3
 8004f5c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004f60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004f64:	ee37 7a25 	vadd.f32	s14, s14, s11
 8004f68:	ee77 7a26 	vadd.f32	s15, s14, s13
 8004f6c:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8004f70:	4a2d      	ldr	r2, [pc, #180]	; (8005028 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
 8004f72:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004f76:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004f78:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004f7c:	ee06 3a90 	vmov	s13, r3
 8004f80:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8004f84:	bc30      	pop	{r4, r5}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8004f86:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004f8a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004f8e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004f92:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8004f96:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004f98:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004f9c:	ee06 3a90 	vmov	s13, r3
 8004fa0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004fa4:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004fa8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004fac:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004fb0:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8004fb4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004fb6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004fba:	ee07 3a10 	vmov	s14, r3
 8004fbe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004fc2:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004fc6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004fca:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004fce:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8004fd2:	4770      	bx	lr
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004fd4:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004fd8:	6083      	str	r3, [r0, #8]
}
 8004fda:	bc30      	pop	{r4, r5}
 8004fdc:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004fde:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005030 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8004fe2:	e7b4      	b.n	8004f4e <HAL_RCCEx_GetPLL1ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fe4:	6813      	ldr	r3, [r2, #0]
 8004fe6:	069b      	lsls	r3, r3, #26
 8004fe8:	d51a      	bpl.n	8005020 <HAL_RCCEx_GetPLL1ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004fea:	6814      	ldr	r4, [r2, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004fec:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ff0:	4910      	ldr	r1, [pc, #64]	; (8005034 <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 8004ff2:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ff6:	6b13      	ldr	r3, [r2, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ff8:	40e1      	lsrs	r1, r4
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ffe:	ee07 1a10 	vmov	s14, r1
 8005002:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8005006:	ee07 3a10 	vmov	s14, r3
 800500a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800500e:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8005012:	ee76 7a05 	vadd.f32	s15, s12, s10
 8005016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800501a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800501e:	e7a7      	b.n	8004f70 <HAL_RCCEx_GetPLL1ClockFreq+0x64>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005020:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005038 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 8005024:	e793      	b.n	8004f4e <HAL_RCCEx_GetPLL1ClockFreq+0x42>
 8005026:	bf00      	nop
 8005028:	58024400 	.word	0x58024400
 800502c:	4a742400 	.word	0x4a742400
 8005030:	4bbebc20 	.word	0x4bbebc20
 8005034:	03d09000 	.word	0x03d09000
 8005038:	4c742400 	.word	0x4c742400

0800503c <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800503c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8005040:	b500      	push	{lr}
 8005042:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005044:	d02d      	beq.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005046:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800504a:	d018      	beq.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800504c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8005050:	d04e      	beq.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005052:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8005056:	d037      	beq.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005058:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800505c:	f000 808b 	beq.w	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005060:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8005064:	f000 80ac 	beq.w	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005068:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800506c:	f000 80b6 	beq.w	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005070:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8005074:	d062      	beq.n	800513c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
          frequency = 0;
 8005076:	2000      	movs	r0, #0
}
 8005078:	b005      	add	sp, #20
 800507a:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800507e:	4a70      	ldr	r2, [pc, #448]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8005080:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005082:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8005086:	2b80      	cmp	r3, #128	; 0x80
 8005088:	d043      	beq.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800508a:	d86a      	bhi.n	8005162 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 800508c:	2b00      	cmp	r3, #0
 800508e:	d039      	beq.n	8005104 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8005090:	2b40      	cmp	r3, #64	; 0x40
 8005092:	d1f0      	bne.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005094:	a801      	add	r0, sp, #4
 8005096:	f7ff fe09 	bl	8004cac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800509a:	9801      	ldr	r0, [sp, #4]
}
 800509c:	b005      	add	sp, #20
 800509e:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80050a2:	4b67      	ldr	r3, [pc, #412]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80050a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a6:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 80050aa:	2b04      	cmp	r3, #4
 80050ac:	d8e3      	bhi.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80050ae:	a201      	add	r2, pc, #4	; (adr r2, 80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x78>)
 80050b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b4:	08005105 	.word	0x08005105
 80050b8:	08005095 	.word	0x08005095
 80050bc:	08005113 	.word	0x08005113
 80050c0:	080050e9 	.word	0x080050e9
 80050c4:	08005121 	.word	0x08005121
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80050c8:	4a5d      	ldr	r2, [pc, #372]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80050ca:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80050cc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 80050d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050d4:	d01d      	beq.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80050d6:	d85c      	bhi.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 80050d8:	b1a3      	cbz	r3, 8005104 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 80050da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050de:	d0d9      	beq.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 80050e0:	e7c9      	b.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 80050e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80050e6:	d15b      	bne.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
          frequency = EXTERNAL_CLOCK_VALUE;
 80050e8:	4856      	ldr	r0, [pc, #344]	; (8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
}
 80050ea:	b005      	add	sp, #20
 80050ec:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80050f0:	4a53      	ldr	r2, [pc, #332]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80050f2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80050f4:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 80050f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050fc:	d009      	beq.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80050fe:	d8f0      	bhi.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8005100:	2b00      	cmp	r3, #0
 8005102:	d151      	bne.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005104:	a801      	add	r0, sp, #4
 8005106:	f7ff ff01 	bl	8004f0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800510a:	9802      	ldr	r0, [sp, #8]
}
 800510c:	b005      	add	sp, #20
 800510e:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005112:	a801      	add	r0, sp, #4
 8005114:	f7ff fe62 	bl	8004ddc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005118:	9801      	ldr	r0, [sp, #4]
}
 800511a:	b005      	add	sp, #20
 800511c:	f85d fb04 	ldr.w	pc, [sp], #4
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005120:	4b47      	ldr	r3, [pc, #284]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8005122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005124:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8005128:	d019      	beq.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800512a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800512e:	d062      	beq.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
            frequency = HSE_VALUE;
 8005130:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005134:	4844      	ldr	r0, [pc, #272]	; (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 8005136:	bf18      	it	ne
 8005138:	2000      	movne	r0, #0
 800513a:	e79d      	b.n	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800513c:	4b40      	ldr	r3, [pc, #256]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800513e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005140:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8005144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005148:	d068      	beq.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800514a:	d95b      	bls.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 800514c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005150:	d051      	beq.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8005152:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005156:	d05f      	beq.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8005158:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800515c:	d18b      	bne.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
            frequency = HSI_VALUE;
 800515e:	483b      	ldr	r0, [pc, #236]	; (800524c <HAL_RCCEx_GetPeriphCLKFreq+0x210>)
 8005160:	e78a      	b.n	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (saiclocksource)
 8005162:	2bc0      	cmp	r3, #192	; 0xc0
 8005164:	d0c0      	beq.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8005166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800516a:	d184      	bne.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800516c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800516e:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8005172:	d1da      	bne.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8005174:	e7f3      	b.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005176:	4a32      	ldr	r2, [pc, #200]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8005178:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800517a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 800517e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005182:	d0c6      	beq.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8005184:	d815      	bhi.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0bc      	beq.n	8005104 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 800518a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800518e:	d081      	beq.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8005190:	e771      	b.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 8005192:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005196:	d0a7      	beq.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8005198:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800519c:	d0e6      	beq.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800519e:	e76a      	b.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 80051a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051a4:	d0e2      	beq.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 80051a6:	e766      	b.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80051a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051ac:	f43f af72 	beq.w	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 80051b0:	e761      	b.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (srcclk)
 80051b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80051b6:	d097      	beq.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 80051b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051bc:	d0d6      	beq.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 80051be:	e75a      	b.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80051c0:	4a1f      	ldr	r2, [pc, #124]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80051c2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80051c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 80051c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051cc:	d015      	beq.n	80051fa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80051ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051d2:	d0cb      	beq.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f47f af4e 	bne.w	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80051da:	e75b      	b.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80051dc:	4b18      	ldr	r3, [pc, #96]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80051de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 80051e0:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80051e4:	d08e      	beq.n	8005104 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f43f af45 	beq.w	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051ec:	a801      	add	r0, sp, #4
 80051ee:	f7ff fd5d 	bl	8004cac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80051f2:	9803      	ldr	r0, [sp, #12]
          break;
 80051f4:	e740      	b.n	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
            frequency = CSI_VALUE;
 80051f6:	4816      	ldr	r0, [pc, #88]	; (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x214>)
 80051f8:	e73e      	b.n	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051fa:	a801      	add	r0, sp, #4
 80051fc:	f7ff fdee 	bl	8004ddc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005200:	9803      	ldr	r0, [sp, #12]
          break;
 8005202:	e739      	b.n	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 8005204:	b17b      	cbz	r3, 8005226 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005206:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800520a:	f47f af34 	bne.w	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800520e:	a801      	add	r0, sp, #4
 8005210:	f7ff fd4c 	bl	8004cac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005214:	9802      	ldr	r0, [sp, #8]
          break;
 8005216:	e72f      	b.n	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          frequency = HSE_VALUE;
 8005218:	480b      	ldr	r0, [pc, #44]	; (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
          break;
 800521a:	e72d      	b.n	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800521c:	a801      	add	r0, sp, #4
 800521e:	f7ff fddd 	bl	8004ddc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005222:	9802      	ldr	r0, [sp, #8]
          break;
 8005224:	e728      	b.n	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005226:	f7fe fe33 	bl	8003e90 <HAL_RCC_GetHCLKFreq>
 800522a:	4b05      	ldr	r3, [pc, #20]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800522c:	4a09      	ldr	r2, [pc, #36]	; (8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x218>)
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005234:	5cd3      	ldrb	r3, [r2, r3]
 8005236:	f003 031f 	and.w	r3, r3, #31
 800523a:	40d8      	lsrs	r0, r3
          break;
 800523c:	e71c      	b.n	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800523e:	bf00      	nop
 8005240:	58024400 	.word	0x58024400
 8005244:	00bb8000 	.word	0x00bb8000
 8005248:	017d7840 	.word	0x017d7840
 800524c:	03d09000 	.word	0x03d09000
 8005250:	003d0900 	.word	0x003d0900
 8005254:	0800c184 	.word	0x0800c184

08005258 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005258:	b390      	cbz	r0, 80052c0 <HAL_RNG_Init+0x68>
{
 800525a:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800525c:	7a43      	ldrb	r3, [r0, #9]
 800525e:	4604      	mov	r4, r0
 8005260:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005264:	b343      	cbz	r3, 80052b8 <HAL_RNG_Init+0x60>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005266:	2302      	movs	r3, #2
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8005268:	e9d4 2100 	ldrd	r2, r1, [r4]
  hrng->State = HAL_RNG_STATE_BUSY;
 800526c:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800526e:	6813      	ldr	r3, [r2, #0]
 8005270:	f023 0320 	bic.w	r3, r3, #32
 8005274:	430b      	orrs	r3, r1
 8005276:	6013      	str	r3, [r2, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005278:	6822      	ldr	r2, [r4, #0]
 800527a:	6813      	ldr	r3, [r2, #0]
 800527c:	f043 0304 	orr.w	r3, r3, #4
 8005280:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	065b      	lsls	r3, r3, #25
 8005288:	d503      	bpl.n	8005292 <HAL_RNG_Init+0x3a>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800528a:	2304      	movs	r3, #4
    return HAL_ERROR;
 800528c:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 800528e:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 8005290:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 8005292:	f7fb f885 	bl	80003a0 <HAL_GetTick>
 8005296:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005298:	e004      	b.n	80052a4 <HAL_RNG_Init+0x4c>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800529a:	f7fb f881 	bl	80003a0 <HAL_GetTick>
 800529e:	1b40      	subs	r0, r0, r5
 80052a0:	2802      	cmp	r0, #2
 80052a2:	d80f      	bhi.n	80052c4 <HAL_RNG_Init+0x6c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f013 0304 	ands.w	r3, r3, #4
 80052ac:	d1f5      	bne.n	800529a <HAL_RNG_Init+0x42>
  hrng->State = HAL_RNG_STATE_READY;
 80052ae:	2201      	movs	r2, #1
  return HAL_OK;
 80052b0:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 80052b2:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80052b4:	60e3      	str	r3, [r4, #12]
}
 80052b6:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 80052b8:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 80052ba:	f003 ffe3 	bl	8009284 <HAL_RNG_MspInit>
 80052be:	e7d2      	b.n	8005266 <HAL_RNG_Init+0xe>
    return HAL_ERROR;
 80052c0:	2001      	movs	r0, #1
}
 80052c2:	4770      	bx	lr
      hrng->State = HAL_RNG_STATE_ERROR;
 80052c4:	2204      	movs	r2, #4
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80052c6:	2302      	movs	r3, #2
      return HAL_ERROR;
 80052c8:	2001      	movs	r0, #1
      hrng->State = HAL_RNG_STATE_ERROR;
 80052ca:	7262      	strb	r2, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80052cc:	60e3      	str	r3, [r4, #12]
}
 80052ce:	bd38      	pop	{r3, r4, r5, pc}

080052d0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80052d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 80052d2:	7a03      	ldrb	r3, [r0, #8]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d00b      	beq.n	80052f0 <HAL_RNG_GenerateRandomNumber+0x20>
 80052d8:	4604      	mov	r4, r0
 80052da:	2001      	movs	r0, #1
 80052dc:	460e      	mov	r6, r1

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80052de:	7a63      	ldrb	r3, [r4, #9]
  __HAL_LOCK(hrng);
 80052e0:	7220      	strb	r0, [r4, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 80052e2:	4283      	cmp	r3, r0
 80052e4:	d006      	beq.n	80052f4 <HAL_RNG_GenerateRandomNumber+0x24>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80052e6:	2304      	movs	r3, #4
 80052e8:	60e3      	str	r3, [r4, #12]
    status = HAL_ERROR;
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80052ea:	2300      	movs	r3, #0
 80052ec:	7223      	strb	r3, [r4, #8]

  return status;
}
 80052ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrng);
 80052f0:	2002      	movs	r0, #2
}
 80052f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 80052f4:	2302      	movs	r3, #2
 80052f6:	7263      	strb	r3, [r4, #9]
    tickstart = HAL_GetTick();
 80052f8:	f7fb f852 	bl	80003a0 <HAL_GetTick>
 80052fc:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80052fe:	e004      	b.n	800530a <HAL_RNG_GenerateRandomNumber+0x3a>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005300:	f7fb f84e 	bl	80003a0 <HAL_GetTick>
 8005304:	1bc0      	subs	r0, r0, r7
 8005306:	2802      	cmp	r0, #2
 8005308:	d80b      	bhi.n	8005322 <HAL_RNG_GenerateRandomNumber+0x52>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800530a:	6822      	ldr	r2, [r4, #0]
 800530c:	6855      	ldr	r5, [r2, #4]
 800530e:	f015 0501 	ands.w	r5, r5, #1
 8005312:	d0f5      	beq.n	8005300 <HAL_RNG_GenerateRandomNumber+0x30>
    hrng->RandomNumber = hrng->Instance->DR;
 8005314:	6893      	ldr	r3, [r2, #8]
    hrng->State = HAL_RNG_STATE_READY;
 8005316:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 8005318:	2000      	movs	r0, #0
    hrng->RandomNumber = hrng->Instance->DR;
 800531a:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 800531c:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
 800531e:	7262      	strb	r2, [r4, #9]
 8005320:	e7e3      	b.n	80052ea <HAL_RNG_GenerateRandomNumber+0x1a>
        hrng->State = HAL_RNG_STATE_READY;
 8005322:	2001      	movs	r0, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005324:	2302      	movs	r3, #2
        __HAL_UNLOCK(hrng);
 8005326:	7225      	strb	r5, [r4, #8]
        hrng->State = HAL_RNG_STATE_READY;
 8005328:	7260      	strb	r0, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800532a:	60e3      	str	r3, [r4, #12]
}
 800532c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800532e:	bf00      	nop

08005330 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8005332:	2904      	cmp	r1, #4
 8005334:	d813      	bhi.n	800535e <HAL_SAI_InitProtocol+0x2e>
 8005336:	e8df f001 	tbb	[pc, r1]
 800533a:	3535      	.short	0x3535
 800533c:	1435      	.short	0x1435
 800533e:	14          	.byte	0x14
 800533f:	00          	.byte	0x00
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8005340:	4a8b      	ldr	r2, [pc, #556]	; (8005570 <HAL_SAI_InitProtocol+0x240>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d005      	beq.n	8005352 <HAL_SAI_InitProtocol+0x22>
 8005346:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 800534a:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 800534e:	4293      	cmp	r3, r2
 8005350:	d105      	bne.n	800535e <HAL_SAI_InitProtocol+0x2e>
 8005352:	6862      	ldr	r2, [r4, #4]
 8005354:	2a01      	cmp	r2, #1
 8005356:	d102      	bne.n	800535e <HAL_SAI_InitProtocol+0x2e>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8005358:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800535a:	2a00      	cmp	r2, #0
 800535c:	d053      	beq.n	8005406 <HAL_SAI_InitProtocol+0xd6>
  hsai->SlotInit.SlotNumber      = nbslot;

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
  {
    return HAL_ERROR;
 800535e:	2001      	movs	r0, #1
}
 8005360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005362:	6845      	ldr	r5, [r0, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005364:	2400      	movs	r4, #0
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8005366:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
  hsai->SlotInit.FirstBitOffset  = 0;
  hsai->SlotInit.SlotNumber      = nbslot;
 800536a:	6703      	str	r3, [r0, #112]	; 0x70
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800536c:	f035 0502 	bics.w	r5, r5, #2
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8005370:	f44f 2580 	mov.w	r5, #262144	; 0x40000
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005374:	6444      	str	r4, [r0, #68]	; 0x44
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005376:	bf0c      	ite	eq
 8005378:	2701      	moveq	r7, #1
 800537a:	4627      	movne	r7, r4
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;

  if (protocol == SAI_PCM_SHORT)
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800537c:	2904      	cmp	r1, #4
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800537e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005382:	6507      	str	r7, [r0, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 1;
 8005384:	bf14      	ite	ne
 8005386:	270d      	movne	r7, #13
 8005388:	2701      	moveq	r7, #1
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800538a:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800538c:	65c4      	str	r4, [r0, #92]	; 0x5c
 800538e:	6587      	str	r7, [r0, #88]	; 0x58
  hsai->SlotInit.FirstBitOffset  = 0;
 8005390:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005392:	6741      	str	r1, [r0, #116]	; 0x74
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8005394:	e9c0 6518 	strd	r6, r5, [r0, #96]	; 0x60
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
  }

  switch (datasize)
 8005398:	2a03      	cmp	r2, #3
 800539a:	d8e0      	bhi.n	800535e <HAL_SAI_InitProtocol+0x2e>
 800539c:	e8df f002 	tbb	[pc, r2]
 80053a0:	259e9197 	.word	0x259e9197
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80053a4:	6845      	ldr	r5, [r0, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80053a6:	2400      	movs	r4, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 80053a8:	6703      	str	r3, [r0, #112]	; 0x70
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80053aa:	f035 0502 	bics.w	r5, r5, #2
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80053ae:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80053b0:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80053b2:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80053b6:	bf08      	it	eq
 80053b8:	4626      	moveq	r6, r4
  hsai->SlotInit.FirstBitOffset  = 0;
 80053ba:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80053bc:	f64f 74ff 	movw	r4, #65535	; 0xffff
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80053c0:	bf18      	it	ne
 80053c2:	2601      	movne	r6, #1
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80053c4:	65c5      	str	r5, [r0, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80053c6:	6744      	str	r4, [r0, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
 80053c8:	f013 0401 	ands.w	r4, r3, #1
 80053cc:	6506      	str	r6, [r0, #80]	; 0x50
 80053ce:	d1c6      	bne.n	800535e <HAL_SAI_InitProtocol+0x2e>
  if (protocol == SAI_I2S_STANDARD)
 80053d0:	2900      	cmp	r1, #0
 80053d2:	f000 808a 	beq.w	80054ea <HAL_SAI_InitProtocol+0x1ba>
 80053d6:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 80053da:	e9c0 5418 	strd	r5, r4, [r0, #96]	; 0x60
  switch (datasize)
 80053de:	2a03      	cmp	r2, #3
 80053e0:	d8bd      	bhi.n	800535e <HAL_SAI_InitProtocol+0x2e>
 80053e2:	e8df f002 	tbb	[pc, r2]
 80053e6:	a0b0      	.short	0xa0b0
 80053e8:	ba8f      	.short	0xba8f
      hsai->FrameInit.FrameLength = 32U * nbslot;
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
      break;
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80053ea:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80053ec:	21e0      	movs	r1, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80053ee:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80053f0:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80053f2:	6481      	str	r1, [r0, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80053f4:	66c2      	str	r2, [r0, #108]	; 0x6c
 80053f6:	4604      	mov	r4, r0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80053f8:	f7fa ffea 	bl	80003d0 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80053fc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8005400:	2b01      	cmp	r3, #1
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8005402:	6823      	ldr	r3, [r4, #0]
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8005404:	d09c      	beq.n	8005340 <HAL_SAI_InitProtocol+0x10>
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005406:	4a5a      	ldr	r2, [pc, #360]	; (8005570 <HAL_SAI_InitProtocol+0x240>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d079      	beq.n	8005500 <HAL_SAI_InitProtocol+0x1d0>
 800540c:	3220      	adds	r2, #32
 800540e:	4293      	cmp	r3, r2
 8005410:	d076      	beq.n	8005500 <HAL_SAI_InitProtocol+0x1d0>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005412:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8005416:	4293      	cmp	r3, r2
 8005418:	f000 8195 	beq.w	8005746 <HAL_SAI_InitProtocol+0x416>
 800541c:	3220      	adds	r2, #32
 800541e:	4293      	cmp	r3, r2
 8005420:	f000 8191 	beq.w	8005746 <HAL_SAI_InitProtocol+0x416>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8005424:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8005428:	4293      	cmp	r3, r2
 800542a:	f000 81bd 	beq.w	80057a8 <HAL_SAI_InitProtocol+0x478>
 800542e:	3220      	adds	r2, #32
 8005430:	4293      	cmp	r3, r2
 8005432:	f000 81b9 	beq.w	80057a8 <HAL_SAI_InitProtocol+0x478>
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8005436:	4a4f      	ldr	r2, [pc, #316]	; (8005574 <HAL_SAI_InitProtocol+0x244>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d002      	beq.n	8005442 <HAL_SAI_InitProtocol+0x112>
 800543c:	3220      	adds	r2, #32
 800543e:	4293      	cmp	r3, r2
 8005440:	d18d      	bne.n	800535e <HAL_SAI_InitProtocol+0x2e>
    SaiBaseAddress = SAI4;
 8005442:	4d4d      	ldr	r5, [pc, #308]	; (8005578 <HAL_SAI_InitProtocol+0x248>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8005444:	f894 2091 	ldrb.w	r2, [r4, #145]	; 0x91
 8005448:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800544c:	2a00      	cmp	r2, #0
 800544e:	f000 8173 	beq.w	8005738 <HAL_SAI_InitProtocol+0x408>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005452:	4a4a      	ldr	r2, [pc, #296]	; (800557c <HAL_SAI_InitProtocol+0x24c>)
 8005454:	484a      	ldr	r0, [pc, #296]	; (8005580 <HAL_SAI_InitProtocol+0x250>)
 8005456:	6812      	ldr	r2, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005458:	6819      	ldr	r1, [r3, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800545a:	fba0 0202 	umull	r0, r2, r0, r2
  __HAL_SAI_DISABLE(hsai);
 800545e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005462:	0b12      	lsrs	r2, r2, #12
  __HAL_SAI_DISABLE(hsai);
 8005464:	6019      	str	r1, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005466:	0093      	lsls	r3, r2, #2
 8005468:	2a00      	cmp	r2, #0
 800546a:	f000 815d 	beq.w	8005728 <HAL_SAI_InitProtocol+0x3f8>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800546e:	6821      	ldr	r1, [r4, #0]
    count--;
 8005470:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005472:	680a      	ldr	r2, [r1, #0]
 8005474:	03d7      	lsls	r7, r2, #15
 8005476:	d506      	bpl.n	8005486 <HAL_SAI_InitProtocol+0x156>
    if (count == 0U)
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 8155 	beq.w	8005728 <HAL_SAI_InitProtocol+0x3f8>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800547e:	680a      	ldr	r2, [r1, #0]
    count--;
 8005480:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005482:	03d2      	lsls	r2, r2, #15
 8005484:	d4f8      	bmi.n	8005478 <HAL_SAI_InitProtocol+0x148>
  switch (hsai->Init.SynchroExt)
 8005486:	68e3      	ldr	r3, [r4, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
 8005488:	2202      	movs	r2, #2
  switch (hsai->Init.SynchroExt)
 800548a:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
 800548c:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 8005490:	f000 8185 	beq.w	800579e <HAL_SAI_InitProtocol+0x46e>
 8005494:	4293      	cmp	r3, r2
 8005496:	bf15      	itete	ne
 8005498:	4610      	movne	r0, r2
 800549a:	2123      	moveq	r1, #35	; 0x23
 800549c:	2103      	movne	r1, #3
 800549e:	2022      	moveq	r0, #34	; 0x22
 80054a0:	bf0b      	itete	eq
 80054a2:	2621      	moveq	r6, #33	; 0x21
 80054a4:	2601      	movne	r6, #1
 80054a6:	2220      	moveq	r2, #32
 80054a8:	2200      	movne	r2, #0
  switch (hsai->Init.Synchro)
 80054aa:	68a3      	ldr	r3, [r4, #8]
 80054ac:	3b01      	subs	r3, #1
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	f200 8138 	bhi.w	8005724 <HAL_SAI_InitProtocol+0x3f4>
 80054b4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80054b8:	0069012f 	.word	0x0069012f
 80054bc:	00680132 	.word	0x00680132
 80054c0:	0180      	.short	0x0180
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80054c2:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80054c4:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80054c6:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80054c8:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80054ca:	66c2      	str	r2, [r0, #108]	; 0x6c
 80054cc:	e793      	b.n	80053f6 <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80054ce:	011b      	lsls	r3, r3, #4
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80054d0:	2180      	movs	r1, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80054d2:	2240      	movs	r2, #64	; 0x40
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80054d4:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80054d6:	6481      	str	r1, [r0, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80054d8:	66c2      	str	r2, [r0, #108]	; 0x6c
 80054da:	e78c      	b.n	80053f6 <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80054dc:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80054de:	21c0      	movs	r1, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80054e0:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80054e2:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80054e4:	6481      	str	r1, [r0, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80054e6:	66c2      	str	r2, [r0, #108]	; 0x6c
 80054e8:	e785      	b.n	80053f6 <HAL_SAI_InitProtocol+0xc6>
 80054ea:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80054ee:	e9c0 1418 	strd	r1, r4, [r0, #96]	; 0x60
  switch (datasize)
 80054f2:	2a03      	cmp	r2, #3
 80054f4:	f63f af33 	bhi.w	800535e <HAL_SAI_InitProtocol+0x2e>
 80054f8:	e8df f002 	tbb	[pc, r2]
 80054fc:	2f041525 	.word	0x2f041525
    SaiBaseAddress = SAI1;
 8005500:	4d20      	ldr	r5, [pc, #128]	; (8005584 <HAL_SAI_InitProtocol+0x254>)
 8005502:	e79f      	b.n	8005444 <HAL_SAI_InitProtocol+0x114>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005504:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005506:	25c0      	movs	r5, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005508:	2480      	movs	r4, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800550a:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800550c:	ea4f 1283 	mov.w	r2, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005510:	6485      	str	r5, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005512:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005516:	66c4      	str	r4, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005518:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800551c:	f47f af6b 	bne.w	80053f6 <HAL_SAI_InitProtocol+0xc6>
      hsai->SlotInit.FirstBitOffset = 8;
 8005520:	2308      	movs	r3, #8
 8005522:	6683      	str	r3, [r0, #104]	; 0x68
 8005524:	e767      	b.n	80053f6 <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005526:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005528:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800552a:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800552c:	ea4f 1483 	mov.w	r4, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005530:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005532:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005536:	66c2      	str	r2, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005538:	e9c0 4315 	strd	r4, r3, [r0, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800553c:	f47f af5b 	bne.w	80053f6 <HAL_SAI_InitProtocol+0xc6>
      hsai->SlotInit.FirstBitOffset = 16;
 8005540:	2310      	movs	r3, #16
 8005542:	6683      	str	r3, [r0, #104]	; 0x68
 8005544:	e757      	b.n	80053f6 <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8005546:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005548:	2480      	movs	r4, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800554a:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800554c:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800554e:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005550:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005552:	66c1      	str	r1, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005554:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
 8005558:	e74d      	b.n	80053f6 <HAL_SAI_InitProtocol+0xc6>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800555a:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800555c:	24e0      	movs	r4, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800555e:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005560:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005562:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005564:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005566:	66c1      	str	r1, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005568:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
 800556c:	e743      	b.n	80053f6 <HAL_SAI_InitProtocol+0xc6>
 800556e:	bf00      	nop
 8005570:	40015804 	.word	0x40015804
 8005574:	58005404 	.word	0x58005404
 8005578:	58005400 	.word	0x58005400
 800557c:	20000018 	.word	0x20000018
 8005580:	95cbec1b 	.word	0x95cbec1b
 8005584:	40015800 	.word	0x40015800
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8005588:	4602      	mov	r2, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800558a:	f44f 6600 	mov.w	r6, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
 800558e:	602a      	str	r2, [r5, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005590:	6a23      	ldr	r3, [r4, #32]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d045      	beq.n	8005622 <HAL_SAI_InitProtocol+0x2f2>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	4a98      	ldr	r2, [pc, #608]	; (80057fc <HAL_SAI_InitProtocol+0x4cc>)
 800559a:	4293      	cmp	r3, r2
 800559c:	f000 811c 	beq.w	80057d8 <HAL_SAI_InitProtocol+0x4a8>
 80055a0:	4897      	ldr	r0, [pc, #604]	; (8005800 <HAL_SAI_InitProtocol+0x4d0>)
 80055a2:	1a18      	subs	r0, r3, r0
 80055a4:	fab0 f080 	clz	r0, r0
 80055a8:	0940      	lsrs	r0, r0, #5
 80055aa:	2800      	cmp	r0, #0
 80055ac:	f040 8114 	bne.w	80057d8 <HAL_SAI_InitProtocol+0x4a8>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80055b0:	4a94      	ldr	r2, [pc, #592]	; (8005804 <HAL_SAI_InitProtocol+0x4d4>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	f000 810a 	beq.w	80057cc <HAL_SAI_InitProtocol+0x49c>
 80055b8:	3220      	adds	r2, #32
 80055ba:	4293      	cmp	r3, r2
 80055bc:	f000 8106 	beq.w	80057cc <HAL_SAI_InitProtocol+0x49c>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80055c0:	4a91      	ldr	r2, [pc, #580]	; (8005808 <HAL_SAI_InitProtocol+0x4d8>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	f000 80fc 	beq.w	80057c0 <HAL_SAI_InitProtocol+0x490>
 80055c8:	3220      	adds	r2, #32
 80055ca:	4293      	cmp	r3, r2
 80055cc:	f000 80f8 	beq.w	80057c0 <HAL_SAI_InitProtocol+0x490>
    if (hsai->Instance == SAI4_Block_A)
 80055d0:	4a8e      	ldr	r2, [pc, #568]	; (800580c <HAL_SAI_InitProtocol+0x4dc>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	f000 810b 	beq.w	80057ee <HAL_SAI_InitProtocol+0x4be>
    if (hsai->Instance == SAI4_Block_B)
 80055d8:	4a8d      	ldr	r2, [pc, #564]	; (8005810 <HAL_SAI_InitProtocol+0x4e0>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	f000 8102 	beq.w	80057e4 <HAL_SAI_InitProtocol+0x4b4>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80055e0:	69a2      	ldr	r2, [r4, #24]
 80055e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80055e6:	6a23      	ldr	r3, [r4, #32]
 80055e8:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 80055ec:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80055f0:	f000 80dc 	beq.w	80057ac <HAL_SAI_InitProtocol+0x47c>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80055f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80055f6:	021b      	lsls	r3, r3, #8
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80055f8:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 80055fc:	bf14      	ite	ne
 80055fe:	2201      	movne	r2, #1
 8005600:	2202      	moveq	r2, #2
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8005602:	fb02 f303 	mul.w	r3, r2, r3
 8005606:	fbb0 f3f3 	udiv	r3, r0, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 800560a:	4a82      	ldr	r2, [pc, #520]	; (8005814 <HAL_SAI_InitProtocol+0x4e4>)
 800560c:	fba2 1203 	umull	r1, r2, r2, r3
 8005610:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
 8005612:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005616:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 800561a:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
 800561c:	bf08      	it	eq
 800561e:	3201      	addeq	r2, #1
 8005620:	6262      	str	r2, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005622:	6863      	ldr	r3, [r4, #4]
 8005624:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005626:	f033 0702 	bics.w	r7, r3, #2
 800562a:	f040 80b2 	bne.w	8005792 <HAL_SAI_InitProtocol+0x462>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800562e:	2a01      	cmp	r2, #1
 8005630:	bf18      	it	ne
 8005632:	f44f 7700 	movne.w	r7, #512	; 0x200
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8005636:	f7fa fecb 	bl	80003d0 <HAL_GetREVID>
 800563a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800563e:	6822      	ldr	r2, [r4, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8005640:	f0c0 8096 	bcc.w	8005770 <HAL_SAI_InitProtocol+0x440>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005644:	6811      	ldr	r1, [r2, #0]
 8005646:	4b74      	ldr	r3, [pc, #464]	; (8005818 <HAL_SAI_InitProtocol+0x4e8>)
 8005648:	400b      	ands	r3, r1
 800564a:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800564c:	6863      	ldr	r3, [r4, #4]
 800564e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005650:	e9d4 1211 	ldrd	r1, r2, [r4, #68]	; 0x44
 8005654:	430b      	orrs	r3, r1
 8005656:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005658:	4313      	orrs	r3, r2
 800565a:	6962      	ldr	r2, [r4, #20]
 800565c:	4303      	orrs	r3, r0
 800565e:	69a0      	ldr	r0, [r4, #24]
 8005660:	430b      	orrs	r3, r1
 8005662:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005664:	4313      	orrs	r3, r2
 8005666:	6922      	ldr	r2, [r4, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005668:	4303      	orrs	r3, r0
 800566a:	6820      	ldr	r0, [r4, #0]
 800566c:	430b      	orrs	r3, r1
 800566e:	6801      	ldr	r1, [r0, #0]
 8005670:	4313      	orrs	r3, r2
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005672:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005674:	430b      	orrs	r3, r1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005676:	f24f 0120 	movw	r1, #61472	; 0xf020
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800567a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800567e:	4333      	orrs	r3, r6
 8005680:	433b      	orrs	r3, r7
 8005682:	6003      	str	r3, [r0, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005684:	6826      	ldr	r6, [r4, #0]
 8005686:	4b65      	ldr	r3, [pc, #404]	; (800581c <HAL_SAI_InitProtocol+0x4ec>)
 8005688:	6872      	ldr	r2, [r6, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800568a:	4865      	ldr	r0, [pc, #404]	; (8005820 <HAL_SAI_InitProtocol+0x4f0>)
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800568c:	4013      	ands	r3, r2
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800568e:	4a5b      	ldr	r2, [pc, #364]	; (80057fc <HAL_SAI_InitProtocol+0x4cc>)
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005690:	6073      	str	r3, [r6, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005692:	69e3      	ldr	r3, [r4, #28]
 8005694:	e9d4 760c 	ldrd	r7, r6, [r4, #48]	; 0x30
 8005698:	433b      	orrs	r3, r7
 800569a:	6827      	ldr	r7, [r4, #0]
 800569c:	4333      	orrs	r3, r6
 800569e:	687e      	ldr	r6, [r7, #4]
 80056a0:	4333      	orrs	r3, r6
 80056a2:	607b      	str	r3, [r7, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80056a4:	6823      	ldr	r3, [r4, #0]
 80056a6:	689e      	ldr	r6, [r3, #8]
 80056a8:	4030      	ands	r0, r6
 80056aa:	6098      	str	r0, [r3, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80056ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056ae:	6827      	ldr	r7, [r4, #0]
 80056b0:	e9d4 6017 	ldrd	r6, r0, [r4, #92]	; 0x5c
 80056b4:	4333      	orrs	r3, r6
 80056b6:	6d66      	ldr	r6, [r4, #84]	; 0x54
 80056b8:	4303      	orrs	r3, r0
 80056ba:	68b8      	ldr	r0, [r7, #8]
 80056bc:	3e01      	subs	r6, #1
 80056be:	4303      	orrs	r3, r0
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80056c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80056c2:	4333      	orrs	r3, r6
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80056c4:	3801      	subs	r0, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80056c6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80056ca:	60bb      	str	r3, [r7, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80056cc:	6820      	ldr	r0, [r4, #0]
 80056ce:	68c3      	ldr	r3, [r0, #12]
 80056d0:	400b      	ands	r3, r1
 80056d2:	60c3      	str	r3, [r0, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80056d4:	6820      	ldr	r0, [r4, #0]
 80056d6:	e9d4 361a 	ldrd	r3, r6, [r4, #104]	; 0x68
 80056da:	68c1      	ldr	r1, [r0, #12]
 80056dc:	4333      	orrs	r3, r6
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80056de:	6f66      	ldr	r6, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80056e0:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80056e2:	6f21      	ldr	r1, [r4, #112]	; 0x70
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80056e4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80056e8:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80056ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80056ee:	60c3      	str	r3, [r0, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80056f0:	6823      	ldr	r3, [r4, #0]
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d029      	beq.n	800574a <HAL_SAI_InitProtocol+0x41a>
 80056f6:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 80056fa:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 80056fe:	4293      	cmp	r3, r2
 8005700:	d023      	beq.n	800574a <HAL_SAI_InitProtocol+0x41a>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005702:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 8005704:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005706:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
 800570a:	4618      	mov	r0, r3
  __HAL_UNLOCK(hsai);
 800570c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  hsai->State = HAL_SAI_STATE_READY;
 8005710:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
}
 8005714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005716:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800571a:	e738      	b.n	800558e <HAL_SAI_InitProtocol+0x25e>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800571c:	4632      	mov	r2, r6
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800571e:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8005722:	e734      	b.n	800558e <HAL_SAI_InitProtocol+0x25e>
      syncen_bits = 0;
 8005724:	2600      	movs	r6, #0
 8005726:	e732      	b.n	800558e <HAL_SAI_InitProtocol+0x25e>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005728:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    return HAL_ERROR;
 800572c:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800572e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005732:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 8005736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hsai->Lock = HAL_UNLOCKED;
 8005738:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 800573c:	4620      	mov	r0, r4
 800573e:	f003 fdfd 	bl	800933c <HAL_SAI_MspInit>
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	e685      	b.n	8005452 <HAL_SAI_InitProtocol+0x122>
    SaiBaseAddress = SAI2;
 8005746:	4d37      	ldr	r5, [pc, #220]	; (8005824 <HAL_SAI_InitProtocol+0x4f4>)
 8005748:	e67c      	b.n	8005444 <HAL_SAI_InitProtocol+0x114>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800574a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800574c:	f023 0301 	bic.w	r3, r3, #1
 8005750:	646b      	str	r3, [r5, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8005752:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8005756:	2b01      	cmp	r3, #1
 8005758:	d1d3      	bne.n	8005702 <HAL_SAI_InitProtocol+0x3d2>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800575a:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800575e:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8005760:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8005764:	646b      	str	r3, [r5, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8005766:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005768:	f043 0301 	orr.w	r3, r3, #1
 800576c:	646b      	str	r3, [r5, #68]	; 0x44
 800576e:	e7c8      	b.n	8005702 <HAL_SAI_InitProtocol+0x3d2>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005770:	6811      	ldr	r1, [r2, #0]
 8005772:	4b2d      	ldr	r3, [pc, #180]	; (8005828 <HAL_SAI_InitProtocol+0x4f8>)
 8005774:	400b      	ands	r3, r1
 8005776:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005778:	6863      	ldr	r3, [r4, #4]
 800577a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800577c:	e9d4 2011 	ldrd	r2, r0, [r4, #68]	; 0x44
 8005780:	4313      	orrs	r3, r2
 8005782:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005784:	4303      	orrs	r3, r0
 8005786:	6960      	ldr	r0, [r4, #20]
 8005788:	430b      	orrs	r3, r1
 800578a:	69a1      	ldr	r1, [r4, #24]
 800578c:	4313      	orrs	r3, r2
 800578e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005790:	e76a      	b.n	8005668 <HAL_SAI_InitProtocol+0x338>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005792:	2a01      	cmp	r2, #1
 8005794:	bf14      	ite	ne
 8005796:	2700      	movne	r7, #0
 8005798:	f44f 7700 	moveq.w	r7, #512	; 0x200
 800579c:	e74b      	b.n	8005636 <HAL_SAI_InitProtocol+0x306>
  switch (hsai->Init.SynchroExt)
 800579e:	2113      	movs	r1, #19
 80057a0:	2012      	movs	r0, #18
 80057a2:	2611      	movs	r6, #17
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80057a4:	2210      	movs	r2, #16
 80057a6:	e680      	b.n	80054aa <HAL_SAI_InitProtocol+0x17a>
    SaiBaseAddress = SAI3;
 80057a8:	4d20      	ldr	r5, [pc, #128]	; (800582c <HAL_SAI_InitProtocol+0x4fc>)
 80057aa:	e64b      	b.n	8005444 <HAL_SAI_InitProtocol+0x114>
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * hsai->FrameInit.FrameLength);
 80057ac:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80057ae:	fb02 f303 	mul.w	r3, r2, r3
 80057b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80057b6:	e728      	b.n	800560a <HAL_SAI_InitProtocol+0x2da>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 80057b8:	460a      	mov	r2, r1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80057ba:	f44f 6600 	mov.w	r6, #2048	; 0x800
 80057be:	e6e6      	b.n	800558e <HAL_SAI_InitProtocol+0x25e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 80057c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80057c4:	f7ff fc3a 	bl	800503c <HAL_RCCEx_GetPeriphCLKFreq>
 80057c8:	6823      	ldr	r3, [r4, #0]
 80057ca:	e701      	b.n	80055d0 <HAL_SAI_InitProtocol+0x2a0>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80057cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80057d0:	f7ff fc34 	bl	800503c <HAL_RCCEx_GetPeriphCLKFreq>
 80057d4:	6823      	ldr	r3, [r4, #0]
 80057d6:	e6f3      	b.n	80055c0 <HAL_SAI_InitProtocol+0x290>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80057d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80057dc:	f7ff fc2e 	bl	800503c <HAL_RCCEx_GetPeriphCLKFreq>
 80057e0:	6823      	ldr	r3, [r4, #0]
 80057e2:	e6e5      	b.n	80055b0 <HAL_SAI_InitProtocol+0x280>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80057e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80057e8:	f7ff fc28 	bl	800503c <HAL_RCCEx_GetPeriphCLKFreq>
 80057ec:	e6f8      	b.n	80055e0 <HAL_SAI_InitProtocol+0x2b0>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 80057ee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80057f2:	f7ff fc23 	bl	800503c <HAL_RCCEx_GetPeriphCLKFreq>
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	e6ee      	b.n	80055d8 <HAL_SAI_InitProtocol+0x2a8>
 80057fa:	bf00      	nop
 80057fc:	40015804 	.word	0x40015804
 8005800:	40015824 	.word	0x40015824
 8005804:	40015c04 	.word	0x40015c04
 8005808:	40016004 	.word	0x40016004
 800580c:	58005404 	.word	0x58005404
 8005810:	58005424 	.word	0x58005424
 8005814:	cccccccd 	.word	0xcccccccd
 8005818:	f005c010 	.word	0xf005c010
 800581c:	ffff1ff0 	.word	0xffff1ff0
 8005820:	fff88000 	.word	0xfff88000
 8005824:	40015c00 	.word	0x40015c00
 8005828:	f805c010 	.word	0xf805c010
 800582c:	40016000 	.word	0x40016000

08005830 <HAL_SAI_Abort>:
{
 8005830:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hsai);
 8005832:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 8005836:	2b01      	cmp	r3, #1
 8005838:	d047      	beq.n	80058ca <HAL_SAI_Abort+0x9a>
 800583a:	2601      	movs	r6, #1
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800583c:	6803      	ldr	r3, [r0, #0]
 800583e:	4604      	mov	r4, r0
  __HAL_LOCK(hsai);
 8005840:	f880 6090 	strb.w	r6, [r0, #144]	; 0x90
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005844:	681d      	ldr	r5, [r3, #0]
 8005846:	f415 3500 	ands.w	r5, r5, #131072	; 0x20000
 800584a:	d00d      	beq.n	8005868 <HAL_SAI_Abort+0x38>
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005852:	601a      	str	r2, [r3, #0]
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 8005854:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 8005858:	2b12      	cmp	r3, #18
 800585a:	d04f      	beq.n	80058fc <HAL_SAI_Abort+0xcc>
  HAL_StatusTypeDef status = HAL_OK;
 800585c:	2500      	movs	r5, #0
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800585e:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 8005862:	2b22      	cmp	r3, #34	; 0x22
 8005864:	d034      	beq.n	80058d0 <HAL_SAI_Abort+0xa0>
 8005866:	6823      	ldr	r3, [r4, #0]
  hsai->Instance->IMR = 0;
 8005868:	2000      	movs	r0, #0
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800586a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800586e:	4a2e      	ldr	r2, [pc, #184]	; (8005928 <HAL_SAI_Abort+0xf8>)
  hsai->Instance->IMR = 0;
 8005870:	6118      	str	r0, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005872:	6823      	ldr	r3, [r4, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005874:	6812      	ldr	r2, [r2, #0]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005876:	6199      	str	r1, [r3, #24]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005878:	482c      	ldr	r0, [pc, #176]	; (800592c <HAL_SAI_Abort+0xfc>)
  __HAL_SAI_DISABLE(hsai);
 800587a:	6821      	ldr	r1, [r4, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800587c:	fba0 0202 	umull	r0, r2, r0, r2
  __HAL_SAI_DISABLE(hsai);
 8005880:	680b      	ldr	r3, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005882:	0b12      	lsrs	r2, r2, #12
  __HAL_SAI_DISABLE(hsai);
 8005884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005888:	600b      	str	r3, [r1, #0]
    if (count == 0U)
 800588a:	0093      	lsls	r3, r2, #2
 800588c:	6821      	ldr	r1, [r4, #0]
 800588e:	b1a2      	cbz	r2, 80058ba <HAL_SAI_Abort+0x8a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005890:	680a      	ldr	r2, [r1, #0]
    count--;
 8005892:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005894:	03d0      	lsls	r0, r2, #15
 8005896:	d504      	bpl.n	80058a2 <HAL_SAI_Abort+0x72>
    if (count == 0U)
 8005898:	b17b      	cbz	r3, 80058ba <HAL_SAI_Abort+0x8a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800589a:	680a      	ldr	r2, [r1, #0]
    count--;
 800589c:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800589e:	03d2      	lsls	r2, r2, #15
 80058a0:	d4fa      	bmi.n	8005898 <HAL_SAI_Abort+0x68>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80058a2:	684b      	ldr	r3, [r1, #4]
  hsai->State = HAL_SAI_STATE_READY;
 80058a4:	2001      	movs	r0, #1
  __HAL_UNLOCK(hsai);
 80058a6:	2200      	movs	r2, #0
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80058a8:	f043 0308 	orr.w	r3, r3, #8
 80058ac:	604b      	str	r3, [r1, #4]
  hsai->State = HAL_SAI_STATE_READY;
 80058ae:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
}
 80058b2:	4628      	mov	r0, r5
  __HAL_UNLOCK(hsai);
 80058b4:	f884 2090 	strb.w	r2, [r4, #144]	; 0x90
}
 80058b8:	bd70      	pop	{r4, r5, r6, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80058ba:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    status = HAL_ERROR;
 80058be:	2501      	movs	r5, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80058c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058c4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 80058c8:	e7eb      	b.n	80058a2 <HAL_SAI_Abort+0x72>
  __HAL_LOCK(hsai);
 80058ca:	2502      	movs	r5, #2
}
 80058cc:	4628      	mov	r0, r5
 80058ce:	bd70      	pop	{r4, r5, r6, pc}
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 80058d0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80058d4:	2800      	cmp	r0, #0
 80058d6:	d0c6      	beq.n	8005866 <HAL_SAI_Abort+0x36>
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 80058d8:	f7fc f9de 	bl	8001c98 <HAL_DMA_Abort>
 80058dc:	2800      	cmp	r0, #0
 80058de:	d0c2      	beq.n	8005866 <HAL_SAI_Abort+0x36>
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80058e0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80058e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e6:	2b80      	cmp	r3, #128	; 0x80
 80058e8:	d0bd      	beq.n	8005866 <HAL_SAI_Abort+0x36>
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80058ea:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
          status = HAL_ERROR;
 80058ee:	2501      	movs	r5, #1
 80058f0:	6823      	ldr	r3, [r4, #0]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80058f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058f6:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
 80058fa:	e7b5      	b.n	8005868 <HAL_SAI_Abort+0x38>
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 80058fc:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8005900:	2800      	cmp	r0, #0
 8005902:	d0ab      	beq.n	800585c <HAL_SAI_Abort+0x2c>
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8005904:	f7fc f9c8 	bl	8001c98 <HAL_DMA_Abort>
 8005908:	2800      	cmp	r0, #0
 800590a:	d0a7      	beq.n	800585c <HAL_SAI_Abort+0x2c>
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800590c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8005910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005912:	2b80      	cmp	r3, #128	; 0x80
 8005914:	d0a2      	beq.n	800585c <HAL_SAI_Abort+0x2c>
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005916:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
          status = HAL_ERROR;
 800591a:	4635      	mov	r5, r6
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800591c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005920:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8005924:	e79b      	b.n	800585e <HAL_SAI_Abort+0x2e>
 8005926:	bf00      	nop
 8005928:	20000018 	.word	0x20000018
 800592c:	95cbec1b 	.word	0x95cbec1b

08005930 <HAL_SAI_Transmit_DMA>:
{
 8005930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005934:	460f      	mov	r7, r1
 8005936:	4604      	mov	r4, r0
 8005938:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800593a:	f7fa fd31 	bl	80003a0 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 800593e:	2f00      	cmp	r7, #0
 8005940:	d064      	beq.n	8005a0c <HAL_SAI_Transmit_DMA+0xdc>
 8005942:	fab8 f588 	clz	r5, r8
 8005946:	096d      	lsrs	r5, r5, #5
 8005948:	2d00      	cmp	r5, #0
 800594a:	d15f      	bne.n	8005a0c <HAL_SAI_Transmit_DMA+0xdc>
  if (hsai->State == HAL_SAI_STATE_READY)
 800594c:	f894 6091 	ldrb.w	r6, [r4, #145]	; 0x91
 8005950:	b2f6      	uxtb	r6, r6
 8005952:	2e01      	cmp	r6, #1
 8005954:	d156      	bne.n	8005a04 <HAL_SAI_Transmit_DMA+0xd4>
    __HAL_LOCK(hsai);
 8005956:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 800595a:	2b01      	cmp	r3, #1
 800595c:	d052      	beq.n	8005a04 <HAL_SAI_Transmit_DMA+0xd4>
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800595e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005962:	2112      	movs	r1, #18
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8005964:	4a37      	ldr	r2, [pc, #220]	; (8005a44 <HAL_SAI_Transmit_DMA+0x114>)
 8005966:	4681      	mov	r9, r0
    hsai->pBuffPtr = pData;
 8005968:	67a7      	str	r7, [r4, #120]	; 0x78
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800596a:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
    hsai->XferSize = Size;
 800596e:	f8a4 807c 	strh.w	r8, [r4, #124]	; 0x7c
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005972:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
    __HAL_LOCK(hsai);
 8005976:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
    hsai->XferCount = Size;
 800597a:	f8a4 807e 	strh.w	r8, [r4, #126]	; 0x7e
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800597e:	4932      	ldr	r1, [pc, #200]	; (8005a48 <HAL_SAI_Transmit_DMA+0x118>)
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8005980:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005982:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8005986:	4a31      	ldr	r2, [pc, #196]	; (8005a4c <HAL_SAI_Transmit_DMA+0x11c>)
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005988:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800598a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800598e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 8005990:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8005994:	651d      	str	r5, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8005996:	6822      	ldr	r2, [r4, #0]
 8005998:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 800599c:	321c      	adds	r2, #28
 800599e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80059a0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80059a4:	f7fb feaa 	bl	80016fc <HAL_DMA_Start_IT>
 80059a8:	4607      	mov	r7, r0
 80059aa:	2800      	cmp	r0, #0
 80059ac:	d132      	bne.n	8005a14 <HAL_SAI_Transmit_DMA+0xe4>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80059ae:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80059b0:	6863      	ldr	r3, [r4, #4]
 80059b2:	2a08      	cmp	r2, #8
 80059b4:	d03c      	beq.n	8005a30 <HAL_SAI_Transmit_DMA+0x100>
 80059b6:	2005      	movs	r0, #5
 80059b8:	2261      	movs	r2, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80059ba:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80059bc:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_WCKCFG;
 80059be:	2b01      	cmp	r3, #1
 80059c0:	bf88      	it	hi
 80059c2:	4602      	movhi	r2, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80059c4:	690b      	ldr	r3, [r1, #16]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80059ca:	6822      	ldr	r2, [r4, #0]
 80059cc:	6813      	ldr	r3, [r2, #0]
 80059ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059d2:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80059d4:	e006      	b.n	80059e4 <HAL_SAI_Transmit_DMA+0xb4>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 80059d6:	f7fa fce3 	bl	80003a0 <HAL_GetTick>
 80059da:	eba0 0009 	sub.w	r0, r0, r9
 80059de:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80059e2:	d81b      	bhi.n	8005a1c <HAL_SAI_Transmit_DMA+0xec>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80059e4:	6822      	ldr	r2, [r4, #0]
 80059e6:	6955      	ldr	r5, [r2, #20]
 80059e8:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 80059ec:	d0f3      	beq.n	80059d6 <HAL_SAI_Transmit_DMA+0xa6>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80059ee:	6813      	ldr	r3, [r2, #0]
 80059f0:	03db      	lsls	r3, r3, #15
 80059f2:	d403      	bmi.n	80059fc <HAL_SAI_Transmit_DMA+0xcc>
      __HAL_SAI_ENABLE(hsai);
 80059f4:	6813      	ldr	r3, [r2, #0]
 80059f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059fa:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 80059fc:	2300      	movs	r3, #0
 80059fe:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 8005a02:	e000      	b.n	8005a06 <HAL_SAI_Transmit_DMA+0xd6>
    return HAL_BUSY;
 8005a04:	2702      	movs	r7, #2
}
 8005a06:	4638      	mov	r0, r7
 8005a08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return  HAL_ERROR;
 8005a0c:	2701      	movs	r7, #1
}
 8005a0e:	4638      	mov	r0, r7
 8005a10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_UNLOCK(hsai);
 8005a14:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
      return  HAL_ERROR;
 8005a18:	4637      	mov	r7, r6
 8005a1a:	e7f4      	b.n	8005a06 <HAL_SAI_Transmit_DMA+0xd6>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005a1c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 8005a20:	2703      	movs	r7, #3
        __HAL_UNLOCK(hsai);
 8005a22:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a2a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 8005a2e:	e7ea      	b.n	8005a06 <HAL_SAI_Transmit_DMA+0xd6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005a30:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005a34:	2a01      	cmp	r2, #1
 8005a36:	bf0b      	itete	eq
 8005a38:	2015      	moveq	r0, #21
 8005a3a:	2005      	movne	r0, #5
 8005a3c:	2271      	moveq	r2, #113	; 0x71
 8005a3e:	2261      	movne	r2, #97	; 0x61
 8005a40:	e7bb      	b.n	80059ba <HAL_SAI_Transmit_DMA+0x8a>
 8005a42:	bf00      	nop
 8005a44:	08005b9d 	.word	0x08005b9d
 8005a48:	08005b35 	.word	0x08005b35
 8005a4c:	08005c19 	.word	0x08005c19

08005a50 <HAL_SAI_Receive_DMA>:
  if ((pData == NULL) || (Size == 0U))
 8005a50:	2900      	cmp	r1, #0
 8005a52:	d057      	beq.n	8005b04 <HAL_SAI_Receive_DMA+0xb4>
{
 8005a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((pData == NULL) || (Size == 0U))
 8005a56:	fab2 f582 	clz	r5, r2
 8005a5a:	096d      	lsrs	r5, r5, #5
 8005a5c:	2d00      	cmp	r5, #0
 8005a5e:	d14f      	bne.n	8005b00 <HAL_SAI_Receive_DMA+0xb0>
  if (hsai->State == HAL_SAI_STATE_READY)
 8005a60:	f890 6091 	ldrb.w	r6, [r0, #145]	; 0x91
 8005a64:	b2f6      	uxtb	r6, r6
 8005a66:	2e01      	cmp	r6, #1
 8005a68:	d148      	bne.n	8005afc <HAL_SAI_Receive_DMA+0xac>
    __HAL_LOCK(hsai);
 8005a6a:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d044      	beq.n	8005afc <HAL_SAI_Receive_DMA+0xac>
 8005a72:	4604      	mov	r4, r0
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8005a74:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8005a78:	2722      	movs	r7, #34	; 0x22
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8005a7a:	482a      	ldr	r0, [pc, #168]	; (8005b24 <HAL_SAI_Receive_DMA+0xd4>)
    hsai->pBuffPtr = pData;
 8005a7c:	67a1      	str	r1, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 8005a7e:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005a82:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
    hsai->XferCount = Size;
 8005a86:	f8a4 207e 	strh.w	r2, [r4, #126]	; 0x7e
    __HAL_LOCK(hsai);
 8005a8a:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8005a8e:	f884 7091 	strb.w	r7, [r4, #145]	; 0x91
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8005a92:	4925      	ldr	r1, [pc, #148]	; (8005b28 <HAL_SAI_Receive_DMA+0xd8>)
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8005a94:	6418      	str	r0, [r3, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8005a96:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8005a9a:	4a24      	ldr	r2, [pc, #144]	; (8005b2c <HAL_SAI_Receive_DMA+0xdc>)
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8005a9c:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8005a9e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005aa2:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 8005aa4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005aa8:	651d      	str	r5, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8005aaa:	6821      	ldr	r1, [r4, #0]
 8005aac:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8005ab0:	311c      	adds	r1, #28
 8005ab2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8005ab4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8005ab8:	f7fb fe20 	bl	80016fc <HAL_DMA_Start_IT>
 8005abc:	bb20      	cbnz	r0, 8005b08 <HAL_SAI_Receive_DMA+0xb8>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005abe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005ac0:	6863      	ldr	r3, [r4, #4]
 8005ac2:	2a08      	cmp	r2, #8
 8005ac4:	d024      	beq.n	8005b10 <HAL_SAI_Receive_DMA+0xc0>
 8005ac6:	2505      	movs	r5, #5
 8005ac8:	2261      	movs	r2, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005aca:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005acc:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_WCKCFG;
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	bf88      	it	hi
 8005ad2:	462a      	movhi	r2, r5
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005ad4:	690b      	ldr	r3, [r1, #16]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005ada:	6822      	ldr	r2, [r4, #0]
 8005adc:	6813      	ldr	r3, [r2, #0]
 8005ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ae2:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	03d2      	lsls	r2, r2, #15
 8005aea:	d403      	bmi.n	8005af4 <HAL_SAI_Receive_DMA+0xa4>
      __HAL_SAI_ENABLE(hsai);
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005af2:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8005af4:	2300      	movs	r3, #0
 8005af6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 8005afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8005afc:	2002      	movs	r0, #2
}
 8005afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 8005b00:	2001      	movs	r0, #1
}
 8005b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 8005b04:	2001      	movs	r0, #1
}
 8005b06:	4770      	bx	lr
      __HAL_UNLOCK(hsai);
 8005b08:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
      return  HAL_ERROR;
 8005b0c:	4630      	mov	r0, r6
}
 8005b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005b10:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005b14:	2a01      	cmp	r2, #1
 8005b16:	bf0b      	itete	eq
 8005b18:	2515      	moveq	r5, #21
 8005b1a:	2505      	movne	r5, #5
 8005b1c:	2271      	moveq	r2, #113	; 0x71
 8005b1e:	2261      	movne	r2, #97	; 0x61
 8005b20:	e7d3      	b.n	8005aca <HAL_SAI_Receive_DMA+0x7a>
 8005b22:	bf00      	nop
 8005b24:	08005c0d 	.word	0x08005c0d
 8005b28:	08005ba9 	.word	0x08005ba9
 8005b2c:	08005c19 	.word	0x08005c19

08005b30 <HAL_SAI_TxCpltCallback>:
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop

08005b34 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005b34:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005b36:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b38:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b3e:	d01a      	beq.n	8005b76 <SAI_DMATxCplt+0x42>
  {
    hsai->XferCount = 0;
 8005b40:	2300      	movs	r3, #0

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005b42:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 8005b44:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005b48:	6813      	ldr	r3, [r2, #0]
 8005b4a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b4e:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005b50:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005b52:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005b54:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005b56:	d011      	beq.n	8005b7c <SAI_DMATxCplt+0x48>
 8005b58:	f06f 0261 	mvn.w	r2, #97	; 0x61
 8005b5c:	f06f 0505 	mvn.w	r5, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005b60:	3b02      	subs	r3, #2

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005b62:	6801      	ldr	r1, [r0, #0]

    hsai->State = HAL_SAI_STATE_READY;
 8005b64:	2401      	movs	r4, #1
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005b66:	42a3      	cmp	r3, r4
 8005b68:	bf88      	it	hi
 8005b6a:	462a      	movhi	r2, r5
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005b6c:	690b      	ldr	r3, [r1, #16]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 8005b72:	f880 4091 	strb.w	r4, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8005b76:	f7ff ffdb 	bl	8005b30 <HAL_SAI_TxCpltCallback>
#endif
}
 8005b7a:	bd38      	pop	{r3, r4, r5, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005b7c:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005b80:	2a01      	cmp	r2, #1
 8005b82:	bf0b      	itete	eq
 8005b84:	f06f 0271 	mvneq.w	r2, #113	; 0x71
 8005b88:	f06f 0261 	mvnne.w	r2, #97	; 0x61
 8005b8c:	f06f 0515 	mvneq.w	r5, #21
 8005b90:	f06f 0505 	mvnne.w	r5, #5
 8005b94:	e7e4      	b.n	8005b60 <SAI_DMATxCplt+0x2c>
 8005b96:	bf00      	nop

08005b98 <HAL_SAI_TxHalfCpltCallback>:
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop

08005b9c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b9c:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8005b9e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005ba0:	f7ff fffa 	bl	8005b98 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8005ba4:	bd08      	pop	{r3, pc}
 8005ba6:	bf00      	nop

08005ba8 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005ba8:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005baa:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bac:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb2:	d01a      	beq.n	8005bea <SAI_DMARxCplt+0x42>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005bb4:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 8005bb6:	2100      	movs	r1, #0
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005bb8:	6813      	ldr	r3, [r2, #0]
 8005bba:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005bbe:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005bc0:	6c43      	ldr	r3, [r0, #68]	; 0x44
    hsai->XferCount = 0;
 8005bc2:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005bc6:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005bc8:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005bca:	d011      	beq.n	8005bf0 <SAI_DMARxCplt+0x48>
 8005bcc:	f06f 0261 	mvn.w	r2, #97	; 0x61
 8005bd0:	f06f 0505 	mvn.w	r5, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005bd4:	3b02      	subs	r3, #2

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005bd6:	6801      	ldr	r1, [r0, #0]

    hsai->State = HAL_SAI_STATE_READY;
 8005bd8:	2401      	movs	r4, #1
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005bda:	42a3      	cmp	r3, r4
 8005bdc:	bf88      	it	hi
 8005bde:	462a      	movhi	r2, r5
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005be0:	690b      	ldr	r3, [r1, #16]
 8005be2:	4013      	ands	r3, r2
 8005be4:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 8005be6:	f880 4091 	strb.w	r4, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8005bea:	f002 fc71 	bl	80084d0 <HAL_SAI_RxCpltCallback>
#endif
}
 8005bee:	bd38      	pop	{r3, r4, r5, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005bf0:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005bf4:	2a01      	cmp	r2, #1
 8005bf6:	bf0b      	itete	eq
 8005bf8:	f06f 0271 	mvneq.w	r2, #113	; 0x71
 8005bfc:	f06f 0261 	mvnne.w	r2, #97	; 0x61
 8005c00:	f06f 0515 	mvneq.w	r5, #21
 8005c04:	f06f 0505 	mvnne.w	r5, #5
 8005c08:	e7e4      	b.n	8005bd4 <SAI_DMARxCplt+0x2c>
 8005c0a:	bf00      	nop

08005c0c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c0c:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8005c0e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005c10:	f002 fc62 	bl	80084d8 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8005c14:	bd08      	pop	{r3, pc}
 8005c16:	bf00      	nop

08005c18 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c18:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c1a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005c1c:	f7fc ffb4 	bl	8002b88 <HAL_DMA_GetError>
 8005c20:	2802      	cmp	r0, #2
 8005c22:	d02a      	beq.n	8005c7a <SAI_DMAError+0x62>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005c24:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005c28:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005c2e:	4a17      	ldr	r2, [pc, #92]	; (8005c8c <SAI_DMAError+0x74>)
 8005c30:	4d17      	ldr	r5, [pc, #92]	; (8005c90 <SAI_DMAError+0x78>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005c32:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005c36:	680b      	ldr	r3, [r1, #0]
 8005c38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c3c:	600b      	str	r3, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005c3e:	6812      	ldr	r2, [r2, #0]
  __HAL_SAI_DISABLE(hsai);
 8005c40:	6820      	ldr	r0, [r4, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005c42:	fba5 3202 	umull	r3, r2, r5, r2
  __HAL_SAI_DISABLE(hsai);
 8005c46:	6801      	ldr	r1, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005c48:	0b12      	lsrs	r2, r2, #12
  __HAL_SAI_DISABLE(hsai);
 8005c4a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
    if (count == 0U)
 8005c4e:	0093      	lsls	r3, r2, #2
  __HAL_SAI_DISABLE(hsai);
 8005c50:	6001      	str	r1, [r0, #0]
    if (count == 0U)
 8005c52:	b19a      	cbz	r2, 8005c7c <SAI_DMAError+0x64>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005c54:	6821      	ldr	r1, [r4, #0]
    count--;
 8005c56:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005c58:	680a      	ldr	r2, [r1, #0]
 8005c5a:	03d0      	lsls	r0, r2, #15
 8005c5c:	d504      	bpl.n	8005c68 <SAI_DMAError+0x50>
    if (count == 0U)
 8005c5e:	b16b      	cbz	r3, 8005c7c <SAI_DMAError+0x64>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005c60:	680a      	ldr	r2, [r1, #0]
    count--;
 8005c62:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005c64:	03d2      	lsls	r2, r2, #15
 8005c66:	d4fa      	bmi.n	8005c5e <SAI_DMAError+0x46>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8005c68:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8005c6a:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8005c6c:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
 8005c6e:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 8005c72:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 8005c76:	f002 fc29 	bl	80084cc <HAL_SAI_ErrorCallback>
#endif
  }
}
 8005c7a:	bd38      	pop	{r3, r4, r5, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005c7c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c84:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8005c88:	e7ee      	b.n	8005c68 <SAI_DMAError+0x50>
 8005c8a:	bf00      	nop
 8005c8c:	20000018 	.word	0x20000018
 8005c90:	95cbec1b 	.word	0x95cbec1b

08005c94 <HAL_SAI_IRQHandler>:
  if (hsai->State != HAL_SAI_STATE_RESET)
 8005c94:	f890 2091 	ldrb.w	r2, [r0, #145]	; 0x91
 8005c98:	2a00      	cmp	r2, #0
 8005c9a:	d030      	beq.n	8005cfe <HAL_SAI_IRQHandler+0x6a>
{
 8005c9c:	b570      	push	{r4, r5, r6, lr}
    uint32_t itflags = hsai->Instance->SR;
 8005c9e:	6802      	ldr	r2, [r0, #0]
 8005ca0:	4604      	mov	r4, r0
 8005ca2:	6951      	ldr	r1, [r2, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8005ca4:	6915      	ldr	r5, [r2, #16]
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8005ca6:	070b      	lsls	r3, r1, #28
    uint32_t cr1config = hsai->Instance->CR1;
 8005ca8:	6816      	ldr	r6, [r2, #0]
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8005caa:	d506      	bpl.n	8005cba <HAL_SAI_IRQHandler+0x26>
 8005cac:	072b      	lsls	r3, r5, #28
 8005cae:	d504      	bpl.n	8005cba <HAL_SAI_IRQHandler+0x26>
      hsai->InterruptServiceRoutine(hsai);
 8005cb0:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
}
 8005cb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hsai->InterruptServiceRoutine(hsai);
 8005cb8:	4718      	bx	r3
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8005cba:	07cb      	lsls	r3, r1, #31
 8005cbc:	d512      	bpl.n	8005ce4 <HAL_SAI_IRQHandler+0x50>
 8005cbe:	07e8      	lsls	r0, r5, #31
 8005cc0:	d510      	bpl.n	8005ce4 <HAL_SAI_IRQHandler+0x50>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8005cc2:	2301      	movs	r3, #1
      HAL_SAI_ErrorCallback(hsai);
 8005cc4:	4620      	mov	r0, r4
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8005cc6:	6193      	str	r3, [r2, #24]
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8005cc8:	f894 2091 	ldrb.w	r2, [r4, #145]	; 0x91
      hsai->ErrorCode |= tmperror;
 8005ccc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8005cd0:	2a22      	cmp	r2, #34	; 0x22
 8005cd2:	bf0c      	ite	eq
 8005cd4:	2201      	moveq	r2, #1
 8005cd6:	2202      	movne	r2, #2
      hsai->ErrorCode |= tmperror;
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      HAL_SAI_ErrorCallback(hsai);
 8005cde:	f002 fbf5 	bl	80084cc <HAL_SAI_ErrorCallback>
}
 8005ce2:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8005ce4:	078b      	lsls	r3, r1, #30
 8005ce6:	d50b      	bpl.n	8005d00 <HAL_SAI_IRQHandler+0x6c>
 8005ce8:	07a8      	lsls	r0, r5, #30
 8005cea:	d509      	bpl.n	8005d00 <HAL_SAI_IRQHandler+0x6c>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8005cec:	2302      	movs	r3, #2
 8005cee:	6193      	str	r3, [r2, #24]
      if (hsai->mutecallback != NULL)
 8005cf0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d0f4      	beq.n	8005ce2 <HAL_SAI_IRQHandler+0x4e>
}
 8005cf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hsai->mutecallback();
 8005cfc:	4718      	bx	r3
 8005cfe:	4770      	bx	lr
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8005d00:	068b      	lsls	r3, r1, #26
 8005d02:	d512      	bpl.n	8005d2a <HAL_SAI_IRQHandler+0x96>
 8005d04:	06a8      	lsls	r0, r5, #26
 8005d06:	d510      	bpl.n	8005d2a <HAL_SAI_IRQHandler+0x96>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8005d08:	2320      	movs	r3, #32
 8005d0a:	6193      	str	r3, [r2, #24]
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005d0c:	03b2      	lsls	r2, r6, #14
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8005d0e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005d12:	f043 0304 	orr.w	r3, r3, #4
 8005d16:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005d1a:	d424      	bmi.n	8005d66 <HAL_SAI_IRQHandler+0xd2>
        (void) HAL_SAI_Abort(hsai);
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	f7ff fd87 	bl	8005830 <HAL_SAI_Abort>
        HAL_SAI_ErrorCallback(hsai);
 8005d22:	4620      	mov	r0, r4
 8005d24:	f002 fbd2 	bl	80084cc <HAL_SAI_ErrorCallback>
}
 8005d28:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8005d2a:	064b      	lsls	r3, r1, #25
 8005d2c:	d50c      	bpl.n	8005d48 <HAL_SAI_IRQHandler+0xb4>
 8005d2e:	0668      	lsls	r0, r5, #25
 8005d30:	d50a      	bpl.n	8005d48 <HAL_SAI_IRQHandler+0xb4>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8005d32:	2340      	movs	r3, #64	; 0x40
 8005d34:	6193      	str	r3, [r2, #24]
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005d36:	03b2      	lsls	r2, r6, #14
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8005d38:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005d3c:	f043 0308 	orr.w	r3, r3, #8
 8005d40:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005d44:	d5ea      	bpl.n	8005d1c <HAL_SAI_IRQHandler+0x88>
 8005d46:	e00e      	b.n	8005d66 <HAL_SAI_IRQHandler+0xd2>
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8005d48:	074b      	lsls	r3, r1, #29
 8005d4a:	d52c      	bpl.n	8005da6 <HAL_SAI_IRQHandler+0x112>
 8005d4c:	0768      	lsls	r0, r5, #29
 8005d4e:	d52a      	bpl.n	8005da6 <HAL_SAI_IRQHandler+0x112>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8005d50:	2304      	movs	r3, #4
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005d52:	f416 3600 	ands.w	r6, r6, #131072	; 0x20000
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8005d56:	6193      	str	r3, [r2, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8005d58:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005d5c:	f043 0320 	orr.w	r3, r3, #32
 8005d60:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005d64:	d039      	beq.n	8005dda <HAL_SAI_IRQHandler+0x146>
        if (hsai->hdmatx != NULL)
 8005d66:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8005d6a:	b133      	cbz	r3, 8005d7a <HAL_SAI_IRQHandler+0xe6>
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005d6c:	4a22      	ldr	r2, [pc, #136]	; (8005df8 <HAL_SAI_IRQHandler+0x164>)
 8005d6e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005d70:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005d74:	f7fc f9b0 	bl	80020d8 <HAL_DMA_Abort_IT>
 8005d78:	bb28      	cbnz	r0, 8005dc6 <HAL_SAI_IRQHandler+0x132>
        if (hsai->hdmarx != NULL)
 8005d7a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0af      	beq.n	8005ce2 <HAL_SAI_IRQHandler+0x4e>
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005d82:	4a1d      	ldr	r2, [pc, #116]	; (8005df8 <HAL_SAI_IRQHandler+0x164>)
 8005d84:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005d86:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8005d8a:	f7fc f9a5 	bl	80020d8 <HAL_DMA_Abort_IT>
 8005d8e:	2800      	cmp	r0, #0
 8005d90:	d0a7      	beq.n	8005ce2 <HAL_SAI_IRQHandler+0x4e>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005d92:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 8005d96:	4620      	mov	r0, r4
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d9c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 8005da0:	f002 fb94 	bl	80084cc <HAL_SAI_ErrorCallback>
}
 8005da4:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8005da6:	06c9      	lsls	r1, r1, #27
 8005da8:	d59b      	bpl.n	8005ce2 <HAL_SAI_IRQHandler+0x4e>
 8005daa:	06eb      	lsls	r3, r5, #27
 8005dac:	d599      	bpl.n	8005ce2 <HAL_SAI_IRQHandler+0x4e>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8005dae:	2310      	movs	r3, #16
      HAL_SAI_ErrorCallback(hsai);
 8005db0:	4620      	mov	r0, r4
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8005db2:	6193      	str	r3, [r2, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8005db4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005db8:	f043 0310 	orr.w	r3, r3, #16
 8005dbc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      HAL_SAI_ErrorCallback(hsai);
 8005dc0:	f002 fb84 	bl	80084cc <HAL_SAI_ErrorCallback>
}
 8005dc4:	bd70      	pop	{r4, r5, r6, pc}
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005dc6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 8005dca:	4620      	mov	r0, r4
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 8005dd4:	f002 fb7a 	bl	80084cc <HAL_SAI_ErrorCallback>
 8005dd8:	e7cf      	b.n	8005d7a <HAL_SAI_IRQHandler+0xe6>
        hsai->Instance->IMR = 0U;
 8005dda:	6822      	ldr	r2, [r4, #0]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005ddc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
        hsai->State = HAL_SAI_STATE_READY;
 8005de0:	2301      	movs	r3, #1
        HAL_SAI_ErrorCallback(hsai);
 8005de2:	4620      	mov	r0, r4
        hsai->Instance->IMR = 0U;
 8005de4:	6116      	str	r6, [r2, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005de6:	6822      	ldr	r2, [r4, #0]
 8005de8:	6191      	str	r1, [r2, #24]
        hsai->XferCount = 0U;
 8005dea:	f8a4 607e 	strh.w	r6, [r4, #126]	; 0x7e
        hsai->State = HAL_SAI_STATE_READY;
 8005dee:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
        HAL_SAI_ErrorCallback(hsai);
 8005df2:	f002 fb6b 	bl	80084cc <HAL_SAI_ErrorCallback>
}
 8005df6:	bd70      	pop	{r4, r5, r6, pc}
 8005df8:	08005dfd 	.word	0x08005dfd

08005dfc <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005dfc:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dfe:	6b82      	ldr	r2, [r0, #56]	; 0x38

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8005e00:	2400      	movs	r4, #0
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005e02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005e06:	6811      	ldr	r1, [r2, #0]
 8005e08:	680b      	ldr	r3, [r1, #0]
 8005e0a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e0e:	600b      	str	r3, [r1, #0]
  hsai->Instance->IMR = 0U;
 8005e10:	6813      	ldr	r3, [r2, #0]
 8005e12:	611c      	str	r4, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005e14:	6813      	ldr	r3, [r2, #0]
 8005e16:	6198      	str	r0, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8005e18:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005e1c:	2b20      	cmp	r3, #32
 8005e1e:	d01a      	beq.n	8005e56 <SAI_DMAAbort+0x5a>
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005e20:	4915      	ldr	r1, [pc, #84]	; (8005e78 <SAI_DMAAbort+0x7c>)
 8005e22:	4b16      	ldr	r3, [pc, #88]	; (8005e7c <SAI_DMAAbort+0x80>)
 8005e24:	6809      	ldr	r1, [r1, #0]
  __HAL_SAI_DISABLE(hsai);
 8005e26:	6814      	ldr	r4, [r2, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005e28:	fba3 3101 	umull	r3, r1, r3, r1
  __HAL_SAI_DISABLE(hsai);
 8005e2c:	6820      	ldr	r0, [r4, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005e2e:	0b09      	lsrs	r1, r1, #12
  __HAL_SAI_DISABLE(hsai);
 8005e30:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    if (count == 0U)
 8005e34:	008b      	lsls	r3, r1, #2
  __HAL_SAI_DISABLE(hsai);
 8005e36:	6020      	str	r0, [r4, #0]
 8005e38:	6810      	ldr	r0, [r2, #0]
    if (count == 0U)
 8005e3a:	b1b1      	cbz	r1, 8005e6a <SAI_DMAAbort+0x6e>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005e3c:	6801      	ldr	r1, [r0, #0]
    count--;
 8005e3e:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005e40:	03cc      	lsls	r4, r1, #15
 8005e42:	d504      	bpl.n	8005e4e <SAI_DMAAbort+0x52>
    if (count == 0U)
 8005e44:	b18b      	cbz	r3, 8005e6a <SAI_DMAAbort+0x6e>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005e46:	6801      	ldr	r1, [r0, #0]
    count--;
 8005e48:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005e4a:	03c9      	lsls	r1, r1, #15
 8005e4c:	d4fa      	bmi.n	8005e44 <SAI_DMAAbort+0x48>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005e4e:	6843      	ldr	r3, [r0, #4]
 8005e50:	f043 0308 	orr.w	r3, r3, #8
 8005e54:	6043      	str	r3, [r0, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8005e56:	2101      	movs	r1, #1

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8005e58:	2300      	movs	r3, #0

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005e5a:	4610      	mov	r0, r2
  hsai->State = HAL_SAI_STATE_READY;
 8005e5c:	f882 1091 	strb.w	r1, [r2, #145]	; 0x91
  hsai->XferCount = 0U;
 8005e60:	f8a2 307e 	strh.w	r3, [r2, #126]	; 0x7e
  HAL_SAI_ErrorCallback(hsai);
 8005e64:	f002 fb32 	bl	80084cc <HAL_SAI_ErrorCallback>
#endif
}
 8005e68:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005e6a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005e76:	e7ea      	b.n	8005e4e <SAI_DMAAbort+0x52>
 8005e78:	20000018 	.word	0x20000018
 8005e7c:	95cbec1b 	.word	0x95cbec1b

08005e80 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e84:	4605      	mov	r5, r0
 8005e86:	b087      	sub	sp, #28
 8005e88:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005e8a:	f7fa fa89 	bl	80003a0 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005e8e:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8005e90:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005e92:	6828      	ldr	r0, [r5, #0]
 8005e94:	f001 f9aa 	bl	80071ec <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e98:	4604      	mov	r4, r0
 8005e9a:	b118      	cbz	r0, 8005ea4 <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	b007      	add	sp, #28
 8005ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005ea4:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8005ea6:	6828      	ldr	r0, [r5, #0]
 8005ea8:	0409      	lsls	r1, r1, #16
 8005eaa:	f001 fc0b 	bl	80076c4 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005eae:	4604      	mov	r4, r0
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	d1f3      	bne.n	8005e9c <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  config.DataLength    = 8U;
 8005eb8:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005eba:	2130      	movs	r1, #48	; 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005ebc:	9004      	str	r0, [sp, #16]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005ebe:	9200      	str	r2, [sp, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005ec0:	2202      	movs	r2, #2
  config.DataLength    = 8U;
 8005ec2:	9301      	str	r3, [sp, #4]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005ec4:	2301      	movs	r3, #1
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005ec6:	9102      	str	r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005ec8:	4669      	mov	r1, sp
 8005eca:	6828      	ldr	r0, [r5, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005ecc:	9203      	str	r2, [sp, #12]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005ece:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005ed0:	f001 f976 	bl	80071c0 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005ed4:	6828      	ldr	r0, [r5, #0]
 8005ed6:	f001 fcb1 	bl	800783c <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005eda:	4604      	mov	r4, r0
 8005edc:	2800      	cmp	r0, #0
 8005ede:	d1dd      	bne.n	8005e9c <SD_FindSCR+0x1c>
  uint32_t index = 0U;
 8005ee0:	4681      	mov	r9, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 8005ee2:	4683      	mov	fp, r0
 8005ee4:	4682      	mov	sl, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8005ee6:	f240 582a 	movw	r8, #1322	; 0x52a
 8005eea:	e004      	b.n	8005ef6 <SD_FindSCR+0x76>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005eec:	f7fa fa58 	bl	80003a0 <HAL_GetTick>
 8005ef0:	1b80      	subs	r0, r0, r6
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	d025      	beq.n	8005f42 <SD_FindSCR+0xc2>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8005ef6:	6828      	ldr	r0, [r5, #0]
 8005ef8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005efa:	ea13 0f08 	tst.w	r3, r8
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8005efe:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8005f00:	d10e      	bne.n	8005f20 <SD_FindSCR+0xa0>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8005f02:	031b      	lsls	r3, r3, #12
 8005f04:	d4f2      	bmi.n	8005eec <SD_FindSCR+0x6c>
 8005f06:	f1b9 0f00 	cmp.w	r9, #0
 8005f0a:	d1ef      	bne.n	8005eec <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8005f0c:	f001 f93e 	bl	800718c <SDMMC_ReadFIFO>
 8005f10:	4682      	mov	sl, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8005f12:	6828      	ldr	r0, [r5, #0]
      index++;
 8005f14:	f04f 0901 	mov.w	r9, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8005f18:	f001 f938 	bl	800718c <SDMMC_ReadFIFO>
 8005f1c:	4683      	mov	fp, r0
 8005f1e:	e7e5      	b.n	8005eec <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005f20:	0719      	lsls	r1, r3, #28
 8005f22:	d411      	bmi.n	8005f48 <SD_FindSCR+0xc8>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005f24:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005f26:	079a      	lsls	r2, r3, #30
 8005f28:	d411      	bmi.n	8005f4e <SD_FindSCR+0xce>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005f2a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005f2c:	069b      	lsls	r3, r3, #26
 8005f2e:	d411      	bmi.n	8005f54 <SD_FindSCR+0xd4>
 8005f30:	fa9b f28b 	rev.w	r2, fp
 8005f34:	fa9a f38a 	rev.w	r3, sl
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005f38:	4908      	ldr	r1, [pc, #32]	; (8005f5c <SD_FindSCR+0xdc>)
 8005f3a:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005f3c:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 8005f40:	e7ac      	b.n	8005e9c <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 8005f42:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005f46:	e7a9      	b.n	8005e9c <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005f48:	2408      	movs	r4, #8
 8005f4a:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005f4c:	e7a6      	b.n	8005e9c <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005f4e:	2402      	movs	r4, #2
 8005f50:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005f52:	e7a3      	b.n	8005e9c <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005f54:	2420      	movs	r4, #32
 8005f56:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8005f58:	e7a0      	b.n	8005e9c <SD_FindSCR+0x1c>
 8005f5a:	bf00      	nop
 8005f5c:	18000f3a 	.word	0x18000f3a

08005f60 <HAL_SD_ReadBlocks>:
{
 8005f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f64:	460d      	mov	r5, r1
 8005f66:	b086      	sub	sp, #24
 8005f68:	4604      	mov	r4, r0
 8005f6a:	4690      	mov	r8, r2
 8005f6c:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 8005f6e:	f7fa fa17 	bl	80003a0 <HAL_GetTick>
  if(NULL == pData)
 8005f72:	2d00      	cmp	r5, #0
 8005f74:	d070      	beq.n	8006058 <HAL_SD_ReadBlocks+0xf8>
 8005f76:	4607      	mov	r7, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8005f78:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8005f7c:	b2c0      	uxtb	r0, r0
 8005f7e:	2801      	cmp	r0, #1
 8005f80:	d007      	beq.n	8005f92 <HAL_SD_ReadBlocks+0x32>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005f82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005f84:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005f86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f8a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8005f8c:	b006      	add	sp, #24
 8005f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005f92:	eb08 0306 	add.w	r3, r8, r6
 8005f96:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f98:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005f9a:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f9c:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005f9e:	d863      	bhi.n	8006068 <HAL_SD_ReadBlocks+0x108>
    hsd->Instance->DCTRL = 0U;
 8005fa0:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8005fa2:	2203      	movs	r2, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005fa4:	f04f 0902 	mov.w	r9, #2
    hsd->State = HAL_SD_STATE_BUSY;
 8005fa8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005fac:	2290      	movs	r2, #144	; 0x90
    hsd->Instance->DCTRL = 0U;
 8005fae:	62d9      	str	r1, [r3, #44]	; 0x2c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005fb0:	0271      	lsls	r1, r6, #9
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005fb2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005fb4:	9101      	str	r1, [sp, #4]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005fb6:	4669      	mov	r1, sp
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005fb8:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005fbe:	6820      	ldr	r0, [r4, #0]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005fc0:	9300      	str	r3, [sp, #0]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005fc2:	f04f 0300 	mov.w	r3, #0
      add *= 512U;
 8005fc6:	bf18      	it	ne
 8005fc8:	ea4f 2848 	movne.w	r8, r8, lsl #9
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005fcc:	9202      	str	r2, [sp, #8]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005fce:	9305      	str	r3, [sp, #20]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005fd0:	e9cd 9303 	strd	r9, r3, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005fd4:	f001 f8f4 	bl	80071c0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005fd8:	6822      	ldr	r2, [r4, #0]
    if(NumberOfBlocks > 1U)
 8005fda:	2e01      	cmp	r6, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005fdc:	68d3      	ldr	r3, [r2, #12]
 8005fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fe2:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 8005fe4:	d953      	bls.n	800608e <HAL_SD_ReadBlocks+0x12e>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005fe6:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005fea:	4641      	mov	r1, r8
 8005fec:	6820      	ldr	r0, [r4, #0]
 8005fee:	f001 f985 	bl	80072fc <SDMMC_CmdReadMultiBlock>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	6820      	ldr	r0, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d13d      	bne.n	8006076 <HAL_SD_ReadBlocks+0x116>
    dataremaining = config.DataLength;
 8005ffa:	f8dd 9004 	ldr.w	r9, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005ffe:	e006      	b.n	800600e <HAL_SD_ReadBlocks+0xae>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006000:	f7fa f9ce 	bl	80003a0 <HAL_GetTick>
 8006004:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006006:	1bc0      	subs	r0, r0, r7
 8006008:	4298      	cmp	r0, r3
 800600a:	d274      	bcs.n	80060f6 <HAL_SD_ReadBlocks+0x196>
 800600c:	6820      	ldr	r0, [r4, #0]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800600e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006010:	f413 7f95 	tst.w	r3, #298	; 0x12a
 8006014:	d143      	bne.n	800609e <HAL_SD_ReadBlocks+0x13e>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8006016:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006018:	0419      	lsls	r1, r3, #16
 800601a:	d5f1      	bpl.n	8006000 <HAL_SD_ReadBlocks+0xa0>
 800601c:	f1b9 0f1f 	cmp.w	r9, #31
 8006020:	d9ee      	bls.n	8006000 <HAL_SD_ReadBlocks+0xa0>
 8006022:	f105 0a04 	add.w	sl, r5, #4
 8006026:	f105 0824 	add.w	r8, r5, #36	; 0x24
 800602a:	e000      	b.n	800602e <HAL_SD_ReadBlocks+0xce>
 800602c:	6820      	ldr	r0, [r4, #0]
          data = SDMMC_ReadFIFO(hsd->Instance);
 800602e:	f001 f8ad 	bl	800718c <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006032:	f80a 0c04 	strb.w	r0, [sl, #-4]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006036:	0a02      	lsrs	r2, r0, #8
 8006038:	f10a 0a04 	add.w	sl, sl, #4
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800603c:	0c03      	lsrs	r3, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800603e:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006040:	f80a 2c07 	strb.w	r2, [sl, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006044:	f80a 3c06 	strb.w	r3, [sl, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006048:	f80a 0c05 	strb.w	r0, [sl, #-5]
        for(count = 0U; count < 8U; count++)
 800604c:	45c2      	cmp	sl, r8
 800604e:	d1ed      	bne.n	800602c <HAL_SD_ReadBlocks+0xcc>
 8006050:	3520      	adds	r5, #32
        dataremaining -= 32U;
 8006052:	f1a9 0920 	sub.w	r9, r9, #32
 8006056:	e7d3      	b.n	8006000 <HAL_SD_ReadBlocks+0xa0>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006058:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800605a:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800605c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006060:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8006062:	b006      	add	sp, #24
 8006064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006068:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800606a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800606e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8006070:	b006      	add	sp, #24
 8006072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006076:	4a39      	ldr	r2, [pc, #228]	; (800615c <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 8006078:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 800607a:	2500      	movs	r5, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800607c:	6382      	str	r2, [r0, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800607e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          return HAL_ERROR;
 8006080:	4608      	mov	r0, r1
          hsd->ErrorCode |= errorstate;
 8006082:	4313      	orrs	r3, r2
 8006084:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006086:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800608a:	6325      	str	r5, [r4, #48]	; 0x30
          return HAL_ERROR;
 800608c:	e77e      	b.n	8005f8c <HAL_SD_ReadBlocks+0x2c>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800608e:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006090:	4641      	mov	r1, r8
 8006092:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006094:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006096:	f001 f8ed 	bl	8007274 <SDMMC_CmdReadSingleBlock>
 800609a:	4603      	mov	r3, r0
 800609c:	e7aa      	b.n	8005ff4 <HAL_SD_ReadBlocks+0x94>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800609e:	68c3      	ldr	r3, [r0, #12]
 80060a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060a4:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060aa:	05d2      	lsls	r2, r2, #23
 80060ac:	d50b      	bpl.n	80060c6 <HAL_SD_ReadBlocks+0x166>
 80060ae:	2e01      	cmp	r6, #1
 80060b0:	d909      	bls.n	80060c6 <HAL_SD_ReadBlocks+0x166>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80060b2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80060b4:	2a03      	cmp	r2, #3
 80060b6:	d006      	beq.n	80060c6 <HAL_SD_ReadBlocks+0x166>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80060b8:	4618      	mov	r0, r3
 80060ba:	f001 f9eb 	bl	8007494 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80060be:	4603      	mov	r3, r0
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d145      	bne.n	8006150 <HAL_SD_ReadBlocks+0x1f0>
 80060c4:	6823      	ldr	r3, [r4, #0]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80060c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060c8:	f012 0208 	ands.w	r2, r2, #8
 80060cc:	d121      	bne.n	8006112 <HAL_SD_ReadBlocks+0x1b2>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80060ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80060d0:	f011 0102 	ands.w	r1, r1, #2
 80060d4:	d12a      	bne.n	800612c <HAL_SD_ReadBlocks+0x1cc>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80060d6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80060d8:	f010 0020 	ands.w	r0, r0, #32
 80060dc:	d032      	beq.n	8006144 <HAL_SD_ReadBlocks+0x1e4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060de:	481f      	ldr	r0, [pc, #124]	; (800615c <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 80060e0:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060e2:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 80060e4:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80060e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80060e8:	f043 0320 	orr.w	r3, r3, #32
 80060ec:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060ee:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060f2:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 80060f4:	e74a      	b.n	8005f8c <HAL_SD_ReadBlocks+0x2c>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060f6:	6823      	ldr	r3, [r4, #0]
        hsd->State= HAL_SD_STATE_READY;
 80060f8:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060fa:	4d18      	ldr	r5, [pc, #96]	; (800615c <HAL_SD_ReadBlocks+0x1fc>)
        hsd->Context = SD_CONTEXT_NONE;
 80060fc:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 80060fe:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006100:	639d      	str	r5, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006102:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006104:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006108:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800610a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800610e:	6322      	str	r2, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8006110:	e73c      	b.n	8005f8c <HAL_SD_ReadBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006112:	4812      	ldr	r0, [pc, #72]	; (800615c <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 8006114:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8006116:	2100      	movs	r1, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006118:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 800611a:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800611c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800611e:	f043 0308 	orr.w	r3, r3, #8
 8006122:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006124:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006128:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 800612a:	e72f      	b.n	8005f8c <HAL_SD_ReadBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800612c:	480b      	ldr	r0, [pc, #44]	; (800615c <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 800612e:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006130:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006132:	4608      	mov	r0, r1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006134:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006136:	f043 0302 	orr.w	r3, r3, #2
 800613a:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800613c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006140:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8006142:	e723      	b.n	8005f8c <HAL_SD_ReadBlocks+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006144:	4906      	ldr	r1, [pc, #24]	; (8006160 <HAL_SD_ReadBlocks+0x200>)
    hsd->State = HAL_SD_STATE_READY;
 8006146:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006148:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800614a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 800614e:	e71d      	b.n	8005f8c <HAL_SD_ReadBlocks+0x2c>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006150:	6822      	ldr	r2, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 8006152:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006154:	4801      	ldr	r0, [pc, #4]	; (800615c <HAL_SD_ReadBlocks+0x1fc>)
          hsd->Context = SD_CONTEXT_NONE;
 8006156:	2500      	movs	r5, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006158:	6390      	str	r0, [r2, #56]	; 0x38
 800615a:	e790      	b.n	800607e <HAL_SD_ReadBlocks+0x11e>
 800615c:	1fe00fff 	.word	0x1fe00fff
 8006160:	18000f3a 	.word	0x18000f3a

08006164 <HAL_SD_WriteBlocks>:
{
 8006164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006168:	460d      	mov	r5, r1
 800616a:	b089      	sub	sp, #36	; 0x24
 800616c:	4604      	mov	r4, r0
 800616e:	4616      	mov	r6, r2
 8006170:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8006172:	f7fa f915 	bl	80003a0 <HAL_GetTick>
  if(NULL == pData)
 8006176:	2d00      	cmp	r5, #0
 8006178:	d05d      	beq.n	8006236 <HAL_SD_WriteBlocks+0xd2>
 800617a:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 800617c:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8006180:	b2c0      	uxtb	r0, r0
 8006182:	2801      	cmp	r0, #1
 8006184:	d007      	beq.n	8006196 <HAL_SD_WriteBlocks+0x32>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006186:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8006188:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800618a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800618e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8006190:	b009      	add	sp, #36	; 0x24
 8006192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006196:	19f3      	adds	r3, r6, r7
 8006198:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800619a:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800619c:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800619e:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80061a0:	d851      	bhi.n	8006246 <HAL_SD_WriteBlocks+0xe2>
    hsd->Instance->DCTRL = 0U;
 80061a2:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 80061a4:	2203      	movs	r2, #3
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80061a6:	0278      	lsls	r0, r7, #9
    hsd->State = HAL_SD_STATE_BUSY;
 80061a8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80061ac:	2290      	movs	r2, #144	; 0x90
    hsd->Instance->DCTRL = 0U;
 80061ae:	62d9      	str	r1, [r3, #44]	; 0x2c
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80061b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80061b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80061b6:	9102      	str	r1, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80061b8:	a902      	add	r1, sp, #8
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80061ba:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80061bc:	f04f 0300 	mov.w	r3, #0
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80061c0:	e9cd 0203 	strd	r0, r2, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80061c4:	6820      	ldr	r0, [r4, #0]
      add *= 512U;
 80061c6:	bf18      	it	ne
 80061c8:	0276      	lslne	r6, r6, #9
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80061ca:	9307      	str	r3, [sp, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80061cc:	e9cd 3305 	strd	r3, r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80061d0:	f000 fff6 	bl	80071c0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80061d4:	6822      	ldr	r2, [r4, #0]
    if(NumberOfBlocks > 1U)
 80061d6:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80061d8:	68d3      	ldr	r3, [r2, #12]
 80061da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061de:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 80061e0:	d944      	bls.n	800626c <HAL_SD_WriteBlocks+0x108>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80061e2:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80061e4:	4631      	mov	r1, r6
 80061e6:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80061e8:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80061ea:	f001 f90f 	bl	800740c <SDMMC_CmdWriteMultiBlock>
 80061ee:	4603      	mov	r3, r0
 80061f0:	6820      	ldr	r0, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 80061f2:	bb7b      	cbnz	r3, 8006254 <HAL_SD_WriteBlocks+0xf0>
    dataremaining = config.DataLength;
 80061f4:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80061f6:	e007      	b.n	8006208 <HAL_SD_WriteBlocks+0xa4>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80061f8:	f7fa f8d2 	bl	80003a0 <HAL_GetTick>
 80061fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80061fe:	eba0 0008 	sub.w	r0, r0, r8
 8006202:	4298      	cmp	r0, r3
 8006204:	d266      	bcs.n	80062d4 <HAL_SD_WriteBlocks+0x170>
 8006206:	6820      	ldr	r0, [r4, #0]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006208:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800620a:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 800620e:	d135      	bne.n	800627c <HAL_SD_WriteBlocks+0x118>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8006210:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006212:	0459      	lsls	r1, r3, #17
 8006214:	d5f0      	bpl.n	80061f8 <HAL_SD_WriteBlocks+0x94>
 8006216:	2e1f      	cmp	r6, #31
 8006218:	d9ee      	bls.n	80061f8 <HAL_SD_WriteBlocks+0x94>
 800621a:	f105 0920 	add.w	r9, r5, #32
 800621e:	e000      	b.n	8006222 <HAL_SD_WriteBlocks+0xbe>
 8006220:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006222:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006226:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006228:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800622a:	f000 ffb3 	bl	8007194 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800622e:	454d      	cmp	r5, r9
 8006230:	d1f6      	bne.n	8006220 <HAL_SD_WriteBlocks+0xbc>
        dataremaining -= 32U;
 8006232:	3e20      	subs	r6, #32
 8006234:	e7e0      	b.n	80061f8 <HAL_SD_WriteBlocks+0x94>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006236:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8006238:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800623a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800623e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8006240:	b009      	add	sp, #36	; 0x24
 8006242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006246:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006248:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800624c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800624e:	b009      	add	sp, #36	; 0x24
 8006250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006254:	4a38      	ldr	r2, [pc, #224]	; (8006338 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 8006256:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 8006258:	2500      	movs	r5, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800625a:	6382      	str	r2, [r0, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800625c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          return HAL_ERROR;
 800625e:	4608      	mov	r0, r1
          hsd->ErrorCode |= errorstate;
 8006260:	4313      	orrs	r3, r2
 8006262:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006264:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006268:	6325      	str	r5, [r4, #48]	; 0x30
          return HAL_ERROR;
 800626a:	e791      	b.n	8006190 <HAL_SD_WriteBlocks+0x2c>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800626c:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800626e:	4631      	mov	r1, r6
 8006270:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006272:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006274:	f001 f886 	bl	8007384 <SDMMC_CmdWriteSingleBlock>
 8006278:	4603      	mov	r3, r0
 800627a:	e7b9      	b.n	80061f0 <HAL_SD_WriteBlocks+0x8c>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800627c:	68c3      	ldr	r3, [r0, #12]
 800627e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006282:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006284:	6823      	ldr	r3, [r4, #0]
 8006286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006288:	05d2      	lsls	r2, r2, #23
 800628a:	d50b      	bpl.n	80062a4 <HAL_SD_WriteBlocks+0x140>
 800628c:	2f01      	cmp	r7, #1
 800628e:	d909      	bls.n	80062a4 <HAL_SD_WriteBlocks+0x140>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006290:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006292:	2a03      	cmp	r2, #3
 8006294:	d006      	beq.n	80062a4 <HAL_SD_WriteBlocks+0x140>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006296:	4618      	mov	r0, r3
 8006298:	f001 f8fc 	bl	8007494 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800629c:	4603      	mov	r3, r0
 800629e:	2800      	cmp	r0, #0
 80062a0:	d143      	bne.n	800632a <HAL_SD_WriteBlocks+0x1c6>
 80062a2:	6823      	ldr	r3, [r4, #0]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80062a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062a6:	f012 0208 	ands.w	r2, r2, #8
 80062aa:	d11f      	bne.n	80062ec <HAL_SD_WriteBlocks+0x188>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80062ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80062ae:	f011 0102 	ands.w	r1, r1, #2
 80062b2:	d128      	bne.n	8006306 <HAL_SD_WriteBlocks+0x1a2>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80062b4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80062b6:	f010 0010 	ands.w	r0, r0, #16
 80062ba:	d030      	beq.n	800631e <HAL_SD_WriteBlocks+0x1ba>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062bc:	481e      	ldr	r0, [pc, #120]	; (8006338 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 80062be:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062c0:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 80062c2:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80062c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80062c6:	f043 0310 	orr.w	r3, r3, #16
 80062ca:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80062cc:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80062d0:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 80062d2:	e75d      	b.n	8006190 <HAL_SD_WriteBlocks+0x2c>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062d4:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 80062d6:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062d8:	4d17      	ldr	r5, [pc, #92]	; (8006338 <HAL_SD_WriteBlocks+0x1d4>)
        hsd->Context = SD_CONTEXT_NONE;
 80062da:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80062dc:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062de:	638d      	str	r5, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80062e0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80062e2:	63a1      	str	r1, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80062e4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80062e8:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 80062ea:	e751      	b.n	8006190 <HAL_SD_WriteBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062ec:	4812      	ldr	r0, [pc, #72]	; (8006338 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 80062ee:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 80062f0:	2100      	movs	r1, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062f2:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 80062f4:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80062f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80062f8:	f043 0308 	orr.w	r3, r3, #8
 80062fc:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80062fe:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006302:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8006304:	e744      	b.n	8006190 <HAL_SD_WriteBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006306:	480c      	ldr	r0, [pc, #48]	; (8006338 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 8006308:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800630a:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 800630c:	4608      	mov	r0, r1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800630e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006310:	f043 0302 	orr.w	r3, r3, #2
 8006314:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006316:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800631a:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 800631c:	e738      	b.n	8006190 <HAL_SD_WriteBlocks+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800631e:	4907      	ldr	r1, [pc, #28]	; (800633c <HAL_SD_WriteBlocks+0x1d8>)
    hsd->State = HAL_SD_STATE_READY;
 8006320:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006322:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006324:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 8006328:	e732      	b.n	8006190 <HAL_SD_WriteBlocks+0x2c>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800632a:	6822      	ldr	r2, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 800632c:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800632e:	4802      	ldr	r0, [pc, #8]	; (8006338 <HAL_SD_WriteBlocks+0x1d4>)
          hsd->Context = SD_CONTEXT_NONE;
 8006330:	2500      	movs	r5, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006332:	6390      	str	r0, [r2, #56]	; 0x38
 8006334:	e792      	b.n	800625c <HAL_SD_WriteBlocks+0xf8>
 8006336:	bf00      	nop
 8006338:	1fe00fff 	.word	0x1fe00fff
 800633c:	18000f3a 	.word	0x18000f3a

08006340 <HAL_SD_ErrorCallback>:
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop

08006344 <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop

08006348 <HAL_SD_GetCardCSD>:
{
 8006348:	4603      	mov	r3, r0
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800634a:	2000      	movs	r0, #0
{
 800634c:	b430      	push	{r4, r5}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800634e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006350:	0f92      	lsrs	r2, r2, #30
 8006352:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006354:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006356:	f3c2 6283 	ubfx	r2, r2, #26, #4
 800635a:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800635c:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
 8006360:	f002 0203 	and.w	r2, r2, #3
 8006364:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006366:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 800636a:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800636c:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 8006370:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006372:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8006376:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006378:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800637a:	0d12      	lsrs	r2, r2, #20
 800637c:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800637e:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8006382:	f002 020f 	and.w	r2, r2, #15
 8006386:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006388:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800638a:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800638e:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006390:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006392:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8006396:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006398:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800639a:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800639e:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80063a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80063a2:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80063a6:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80063a8:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80063aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063ac:	2a00      	cmp	r2, #0
 80063ae:	f040 8086 	bne.w	80064be <HAL_SD_GetCardCSD+0x176>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80063b2:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80063b4:	f640 72fc 	movw	r2, #4092	; 0xffc
 80063b8:	6e98      	ldr	r0, [r3, #104]	; 0x68
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80063ba:	2401      	movs	r4, #1
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80063bc:	ea02 0285 	and.w	r2, r2, r5, lsl #2
    hsd->SdCard.LogBlockSize = 512U;
 80063c0:	f44f 7500 	mov.w	r5, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80063c4:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 80063c8:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80063ca:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80063cc:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 80063d0:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80063d2:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
 80063d6:	f002 0207 	and.w	r2, r2, #7
 80063da:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80063dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80063de:	f3c2 5242 	ubfx	r2, r2, #21, #3
 80063e2:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80063e4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80063e6:	f3c2 4282 	ubfx	r2, r2, #18, #3
 80063ea:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80063ec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80063ee:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 80063f2:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80063f4:	690a      	ldr	r2, [r1, #16]
 80063f6:	4422      	add	r2, r4
 80063f8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80063fa:	7e08      	ldrb	r0, [r1, #24]
 80063fc:	f000 0007 	and.w	r0, r0, #7
 8006400:	3002      	adds	r0, #2
 8006402:	4082      	lsls	r2, r0
 8006404:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006406:	7a08      	ldrb	r0, [r1, #8]
    hsd->SdCard.LogBlockSize = 512U;
 8006408:	659d      	str	r5, [r3, #88]	; 0x58
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800640a:	f000 000f 	and.w	r0, r0, #15
 800640e:	fa04 f000 	lsl.w	r0, r4, r0
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006412:	0a44      	lsrs	r4, r0, #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006414:	6518      	str	r0, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006416:	fb02 f204 	mul.w	r2, r2, r4
 800641a:	655a      	str	r2, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800641c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  pCSD->Reserved3 = 0;
 800641e:	2500      	movs	r5, #0
  pCSD->Reserved4 = 1;
 8006420:	2401      	movs	r4, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006422:	f3c2 3280 	ubfx	r2, r2, #14, #1
  return HAL_OK;
 8006426:	4628      	mov	r0, r5
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006428:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800642a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800642c:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 8006430:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006432:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006434:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006438:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800643a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800643c:	0fd2      	lsrs	r2, r2, #31
 800643e:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006440:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006442:	f3c2 7241 	ubfx	r2, r2, #29, #2
 8006446:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006448:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800644a:	f3c2 6282 	ubfx	r2, r2, #26, #3
 800644e:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006450:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006452:	f3c2 5283 	ubfx	r2, r2, #22, #4
 8006456:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006458:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800645a:	f3c2 5240 	ubfx	r2, r2, #21, #1
 800645e:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8006462:	f881 5021 	strb.w	r5, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006466:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 800646a:	4022      	ands	r2, r4
 800646c:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006470:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006472:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8006476:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800647a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800647c:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8006480:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006484:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006486:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800648a:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800648e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006490:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8006494:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006498:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800649a:	f3c2 2281 	ubfx	r2, r2, #10, #2
 800649e:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80064a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80064a4:	f3c2 2201 	ubfx	r2, r2, #8, #2
 80064a8:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80064ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ae:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80064b2:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80064b6:	f881 402a 	strb.w	r4, [r1, #42]	; 0x2a
}
 80064ba:	bc30      	pop	{r4, r5}
 80064bc:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80064be:	2a01      	cmp	r2, #1
 80064c0:	d00c      	beq.n	80064dc <HAL_SD_GetCardCSD+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064c2:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 80064c4:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064c6:	4c0e      	ldr	r4, [pc, #56]	; (8006500 <HAL_SD_GetCardCSD+0x1b8>)
    return HAL_ERROR;
 80064c8:	4608      	mov	r0, r1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064ca:	6394      	str	r4, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80064cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80064d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80064d4:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 80064d8:	bc30      	pop	{r4, r5}
 80064da:	4770      	bx	lr
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80064dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    hsd->SdCard.BlockSize = 512U;
 80064de:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80064e2:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
 80064e6:	0412      	lsls	r2, r2, #16
 80064e8:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 80064ec:	4322      	orrs	r2, r4
 80064ee:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80064f0:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 80064f2:	6518      	str	r0, [r3, #80]	; 0x50
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80064f4:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80064f6:	6598      	str	r0, [r3, #88]	; 0x58
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80064f8:	0292      	lsls	r2, r2, #10
 80064fa:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80064fc:	655a      	str	r2, [r3, #84]	; 0x54
 80064fe:	e78d      	b.n	800641c <HAL_SD_GetCardCSD+0xd4>
 8006500:	1fe00fff 	.word	0x1fe00fff

08006504 <HAL_SD_InitCard>:
{
 8006504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8006508:	6982      	ldr	r2, [r0, #24]
{
 800650a:	b098      	sub	sp, #96	; 0x60
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800650c:	2300      	movs	r3, #0
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800650e:	21fa      	movs	r1, #250	; 0xfa
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8006510:	2a02      	cmp	r2, #2
{
 8006512:	4604      	mov	r4, r0
 8006514:	6805      	ldr	r5, [r0, #0]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006516:	910b      	str	r1, [sp, #44]	; 0x2c
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006518:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800651c:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8006520:	d104      	bne.n	800652c <HAL_SD_InitCard+0x28>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8006522:	682b      	ldr	r3, [r5, #0]
 8006524:	f043 0310 	orr.w	r3, r3, #16
 8006528:	602b      	str	r3, [r5, #0]
 800652a:	6805      	ldr	r5, [r0, #0]
  (void)SDMMC_Init(hsd->Instance, Init);
 800652c:	aa0a      	add	r2, sp, #40	; 0x28
 800652e:	ab07      	add	r3, sp, #28
 8006530:	ca07      	ldmia	r2, {r0, r1, r2}
 8006532:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006536:	4628      	mov	r0, r5
 8006538:	cb0e      	ldmia	r3, {r1, r2, r3}
 800653a:	f000 fe0d 	bl	8007158 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800653e:	6820      	ldr	r0, [r4, #0]
 8006540:	f000 fe2e 	bl	80071a0 <SDMMC_PowerState_ON>
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 8006544:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006548:	f7fe fd78 	bl	800503c <HAL_RCCEx_GetPeriphCLKFreq>
 800654c:	4ba3      	ldr	r3, [pc, #652]	; (80067dc <HAL_SD_InitCard+0x2d8>)
 800654e:	fba3 3000 	umull	r3, r0, r3, r0
  if(sdmmc_clk != 0U)
 8006552:	0940      	lsrs	r0, r0, #5
 8006554:	d019      	beq.n	800658a <HAL_SD_InitCard+0x86>
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8006556:	4ba2      	ldr	r3, [pc, #648]	; (80067e0 <HAL_SD_InitCard+0x2dc>)
 8006558:	fbb3 f0f0 	udiv	r0, r3, r0
 800655c:	3001      	adds	r0, #1
 800655e:	f7f9 ff25 	bl	80003ac <HAL_Delay>
  __IO uint32_t count = 0U;
 8006562:	2300      	movs	r3, #0
 8006564:	9306      	str	r3, [sp, #24]
  uint32_t tickstart = HAL_GetTick();
 8006566:	f7f9 ff1b 	bl	80003a0 <HAL_GetTick>
 800656a:	4680      	mov	r8, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800656c:	6820      	ldr	r0, [r4, #0]
 800656e:	f001 f83b 	bl	80075e8 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006572:	4605      	mov	r5, r0
 8006574:	b168      	cbz	r0, 8006592 <HAL_SD_InitCard+0x8e>
    hsd->State = HAL_SD_STATE_READY;
 8006576:	2601      	movs	r6, #1
 8006578:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800657c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800657e:	431d      	orrs	r5, r3
 8006580:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8006582:	4630      	mov	r0, r6
 8006584:	b018      	add	sp, #96	; 0x60
 8006586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_Delay(2U);
 800658a:	2002      	movs	r0, #2
 800658c:	f7f9 ff0e 	bl	80003ac <HAL_Delay>
 8006590:	e7e7      	b.n	8006562 <HAL_SD_InitCard+0x5e>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006592:	6820      	ldr	r0, [r4, #0]
 8006594:	f001 f856 	bl	8007644 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006598:	2800      	cmp	r0, #0
 800659a:	d179      	bne.n	8006690 <HAL_SD_InitCard+0x18c>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800659c:	2301      	movs	r3, #1
 800659e:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80065a0:	2100      	movs	r1, #0
 80065a2:	6820      	ldr	r0, [r4, #0]
 80065a4:	f001 f88e 	bl	80076c4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80065a8:	bb08      	cbnz	r0, 80065ee <HAL_SD_InitCard+0xea>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80065aa:	9b06      	ldr	r3, [sp, #24]
 80065ac:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 80065b0:	42b3      	cmp	r3, r6
 80065b2:	f200 8109 	bhi.w	80067c8 <HAL_SD_InitCard+0x2c4>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80065b6:	4f8b      	ldr	r7, [pc, #556]	; (80067e4 <HAL_SD_InitCard+0x2e0>)
 80065b8:	e00c      	b.n	80065d4 <HAL_SD_InitCard+0xd0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80065ba:	4601      	mov	r1, r0
 80065bc:	6820      	ldr	r0, [r4, #0]
 80065be:	f000 fdfb 	bl	80071b8 <SDMMC_GetResponse>
    count++;
 80065c2:	9b06      	ldr	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80065c4:	1e02      	subs	r2, r0, #0
    count++;
 80065c6:	f103 0301 	add.w	r3, r3, #1
 80065ca:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80065cc:	9b06      	ldr	r3, [sp, #24]
 80065ce:	db11      	blt.n	80065f4 <HAL_SD_InitCard+0xf0>
 80065d0:	42b3      	cmp	r3, r6
 80065d2:	d80f      	bhi.n	80065f4 <HAL_SD_InitCard+0xf0>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80065d4:	2100      	movs	r1, #0
 80065d6:	6820      	ldr	r0, [r4, #0]
 80065d8:	f001 f874 	bl	80076c4 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80065dc:	4639      	mov	r1, r7
    if(errorstate != HAL_SD_ERROR_NONE)
 80065de:	4605      	mov	r5, r0
 80065e0:	2800      	cmp	r0, #0
 80065e2:	d1c8      	bne.n	8006576 <HAL_SD_InitCard+0x72>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80065e4:	6820      	ldr	r0, [r4, #0]
 80065e6:	f001 f8b1 	bl	800774c <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80065ea:	2800      	cmp	r0, #0
 80065ec:	d0e5      	beq.n	80065ba <HAL_SD_InitCard+0xb6>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80065ee:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80065f2:	e7c0      	b.n	8006576 <HAL_SD_InitCard+0x72>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80065f4:	9906      	ldr	r1, [sp, #24]
 80065f6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80065fa:	4299      	cmp	r1, r3
 80065fc:	f200 809d 	bhi.w	800673a <HAL_SD_InitCard+0x236>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006600:	0057      	lsls	r7, r2, #1
 8006602:	6820      	ldr	r0, [r4, #0]
 8006604:	d504      	bpl.n	8006610 <HAL_SD_InitCard+0x10c>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8006606:	69a3      	ldr	r3, [r4, #24]
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006608:	2101      	movs	r1, #1
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800660a:	2b02      	cmp	r3, #2
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800660c:	63e1      	str	r1, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800660e:	d051      	beq.n	80066b4 <HAL_SD_InitCard+0x1b0>
  uint16_t sd_rca = 1U;
 8006610:	2301      	movs	r3, #1
 8006612:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006616:	f000 fdcb 	bl	80071b0 <SDMMC_GetPowerState>
 800661a:	2800      	cmp	r0, #0
 800661c:	d044      	beq.n	80066a8 <HAL_SD_InitCard+0x1a4>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800661e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006620:	6823      	ldr	r3, [r4, #0]
 8006622:	2a03      	cmp	r2, #3
 8006624:	d125      	bne.n	8006672 <HAL_SD_InitCard+0x16e>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006626:	4618      	mov	r0, r3
 8006628:	2104      	movs	r1, #4
 800662a:	f000 fdc5 	bl	80071b8 <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800662e:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006630:	0d03      	lsrs	r3, r0, #20
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006632:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006634:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006636:	f7ff fe87 	bl	8006348 <HAL_SD_GetCardCSD>
 800663a:	4606      	mov	r6, r0
 800663c:	2800      	cmp	r0, #0
 800663e:	d136      	bne.n	80066ae <HAL_SD_InitCard+0x1aa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006640:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006642:	4603      	mov	r3, r0
 8006644:	6820      	ldr	r0, [r4, #0]
 8006646:	0412      	lsls	r2, r2, #16
 8006648:	f000 ff8a 	bl	8007560 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800664c:	b9b0      	cbnz	r0, 800667c <HAL_SD_InitCard+0x178>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800664e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006652:	6820      	ldr	r0, [r4, #0]
 8006654:	f000 fdca 	bl	80071ec <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006658:	2800      	cmp	r0, #0
 800665a:	d092      	beq.n	8006582 <HAL_SD_InitCard+0x7e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800665c:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800665e:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006660:	4961      	ldr	r1, [pc, #388]	; (80067e8 <HAL_SD_InitCard+0x2e4>)
    return HAL_ERROR;
 8006662:	4616      	mov	r6, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006664:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006666:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006668:	4318      	orrs	r0, r3
 800666a:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800666c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_ERROR;
 8006670:	e787      	b.n	8006582 <HAL_SD_InitCard+0x7e>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006672:	4618      	mov	r0, r3
 8006674:	f001 f928 	bl	80078c8 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006678:	2800      	cmp	r0, #0
 800667a:	d061      	beq.n	8006740 <HAL_SD_InitCard+0x23c>
    hsd->State = HAL_SD_STATE_READY;
 800667c:	2601      	movs	r6, #1
 800667e:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006682:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006684:	4308      	orrs	r0, r1
 8006686:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8006688:	4630      	mov	r0, r6
 800668a:	b018      	add	sp, #96	; 0x60
 800668c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006690:	6425      	str	r5, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006692:	6820      	ldr	r0, [r4, #0]
 8006694:	f000 ffa8 	bl	80075e8 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006698:	4605      	mov	r5, r0
 800669a:	2800      	cmp	r0, #0
 800669c:	f47f af6b 	bne.w	8006576 <HAL_SD_InitCard+0x72>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80066a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d181      	bne.n	80065aa <HAL_SD_InitCard+0xa6>
 80066a6:	e77b      	b.n	80065a0 <HAL_SD_InitCard+0x9c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80066a8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80066ac:	e7e6      	b.n	800667c <HAL_SD_InitCard+0x178>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066ae:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80066b2:	e7e3      	b.n	800667c <HAL_SD_InitCard+0x178>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80066b4:	01d6      	lsls	r6, r2, #7
 80066b6:	d5ab      	bpl.n	8006610 <HAL_SD_InitCard+0x10c>
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80066b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066bc:	65e3      	str	r3, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80066be:	6803      	ldr	r3, [r0, #0]
 80066c0:	f043 0308 	orr.w	r3, r3, #8
 80066c4:	6003      	str	r3, [r0, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80066c6:	6820      	ldr	r0, [r4, #0]
 80066c8:	f001 fa54 	bl	8007b74 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 80066cc:	4605      	mov	r5, r0
 80066ce:	b130      	cbz	r0, 80066de <HAL_SD_InitCard+0x1da>
 80066d0:	e751      	b.n	8006576 <HAL_SD_InitCard+0x72>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80066d2:	f7f9 fe65 	bl	80003a0 <HAL_GetTick>
 80066d6:	eba0 0008 	sub.w	r0, r0, r8
 80066da:	3001      	adds	r0, #1
 80066dc:	d079      	beq.n	80067d2 <HAL_SD_InitCard+0x2ce>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066e2:	0155      	lsls	r5, r2, #5
 80066e4:	d5f5      	bpl.n	80066d2 <HAL_SD_InitCard+0x1ce>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80066e6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80066ea:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80066ec:	6823      	ldr	r3, [r4, #0]
 80066ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f0:	02d8      	lsls	r0, r3, #11
 80066f2:	f57f af7c 	bpl.w	80065ee <HAL_SD_InitCard+0xea>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 80066f6:	2001      	movs	r0, #1
 80066f8:	f7ff fe24 	bl	8006344 <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80066fc:	6822      	ldr	r2, [r4, #0]
 80066fe:	6813      	ldr	r3, [r2, #0]
 8006700:	f043 0304 	orr.w	r3, r3, #4
 8006704:	6013      	str	r3, [r2, #0]
 8006706:	e005      	b.n	8006714 <HAL_SD_InitCard+0x210>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006708:	f7f9 fe4a 	bl	80003a0 <HAL_GetTick>
 800670c:	eba0 0008 	sub.w	r0, r0, r8
 8006710:	3001      	adds	r0, #1
 8006712:	d05e      	beq.n	80067d2 <HAL_SD_InitCard+0x2ce>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006714:	6823      	ldr	r3, [r4, #0]
 8006716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006718:	0191      	lsls	r1, r2, #6
 800671a:	d5f5      	bpl.n	8006708 <HAL_SD_InitCard+0x204>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800671c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006720:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006726:	02d2      	lsls	r2, r2, #11
 8006728:	d407      	bmi.n	800673a <HAL_SD_InitCard+0x236>
          hsd->Instance->POWER = 0x13U;
 800672a:	2113      	movs	r1, #19
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800672c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
          hsd->Instance->POWER = 0x13U;
 8006730:	6019      	str	r1, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8006732:	6823      	ldr	r3, [r4, #0]
 8006734:	639a      	str	r2, [r3, #56]	; 0x38
 8006736:	6820      	ldr	r0, [r4, #0]
 8006738:	e76a      	b.n	8006610 <HAL_SD_InitCard+0x10c>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800673a:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800673e:	e71a      	b.n	8006576 <HAL_SD_InitCard+0x72>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006740:	4601      	mov	r1, r0
 8006742:	6820      	ldr	r0, [r4, #0]
 8006744:	f000 fd38 	bl	80071b8 <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006748:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800674a:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800674c:	6820      	ldr	r0, [r4, #0]
 800674e:	f000 fd33 	bl	80071b8 <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006752:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006754:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006756:	6820      	ldr	r0, [r4, #0]
 8006758:	f000 fd2e 	bl	80071b8 <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800675c:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800675e:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006760:	6820      	ldr	r0, [r4, #0]
 8006762:	f000 fd29 	bl	80071b8 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006766:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006768:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 800676a:	2b03      	cmp	r3, #3
 800676c:	d034      	beq.n	80067d8 <HAL_SD_InitCard+0x2d4>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800676e:	f10d 0116 	add.w	r1, sp, #22
 8006772:	6820      	ldr	r0, [r4, #0]
 8006774:	f001 f920 	bl	80079b8 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006778:	2800      	cmp	r0, #0
 800677a:	f47f af7f 	bne.w	800667c <HAL_SD_InitCard+0x178>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800677e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006780:	6823      	ldr	r3, [r4, #0]
 8006782:	2a03      	cmp	r2, #3
 8006784:	f43f af4f 	beq.w	8006626 <HAL_SD_InitCard+0x122>
    hsd->SdCard.RelCardAdd = sd_rca;
 8006788:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800678c:	4618      	mov	r0, r3
    hsd->SdCard.RelCardAdd = sd_rca;
 800678e:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006790:	0409      	lsls	r1, r1, #16
 8006792:	f001 f8d5 	bl	8007940 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006796:	2800      	cmp	r0, #0
 8006798:	f47f af70 	bne.w	800667c <HAL_SD_InitCard+0x178>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800679c:	4601      	mov	r1, r0
 800679e:	6820      	ldr	r0, [r4, #0]
 80067a0:	f000 fd0a 	bl	80071b8 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80067a4:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80067a6:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80067a8:	6820      	ldr	r0, [r4, #0]
 80067aa:	f000 fd05 	bl	80071b8 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80067ae:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80067b0:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80067b2:	6820      	ldr	r0, [r4, #0]
 80067b4:	f000 fd00 	bl	80071b8 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80067b8:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80067ba:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80067bc:	6820      	ldr	r0, [r4, #0]
 80067be:	f000 fcfb 	bl	80071b8 <SDMMC_GetResponse>
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	66e0      	str	r0, [r4, #108]	; 0x6c
 80067c6:	e72e      	b.n	8006626 <HAL_SD_InitCard+0x122>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80067c8:	9b06      	ldr	r3, [sp, #24]
 80067ca:	42b3      	cmp	r3, r6
 80067cc:	d8b5      	bhi.n	800673a <HAL_SD_InitCard+0x236>
 80067ce:	6820      	ldr	r0, [r4, #0]
 80067d0:	e71e      	b.n	8006610 <HAL_SD_InitCard+0x10c>
            return HAL_SD_ERROR_TIMEOUT;
 80067d2:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80067d6:	e6ce      	b.n	8006576 <HAL_SD_InitCard+0x72>
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	e724      	b.n	8006626 <HAL_SD_InitCard+0x122>
 80067dc:	10624dd3 	.word	0x10624dd3
 80067e0:	00012110 	.word	0x00012110
 80067e4:	c1100000 	.word	0xc1100000
 80067e8:	1fe00fff 	.word	0x1fe00fff

080067ec <HAL_SD_GetCardStatus>:
{
 80067ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067f0:	4604      	mov	r4, r0
 80067f2:	b097      	sub	sp, #92	; 0x5c
 80067f4:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80067f6:	f7f9 fdd3 	bl	80003a0 <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80067fa:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 80067fc:	4680      	mov	r8, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80067fe:	6820      	ldr	r0, [r4, #0]
 8006800:	f000 fcda 	bl	80071b8 <SDMMC_GetResponse>
 8006804:	0187      	lsls	r7, r0, #6
 8006806:	d422      	bmi.n	800684e <HAL_SD_GetCardStatus+0x62>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006808:	2140      	movs	r1, #64	; 0x40
 800680a:	6820      	ldr	r0, [r4, #0]
 800680c:	f000 fcee 	bl	80071ec <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006810:	b308      	cbz	r0, 8006856 <HAL_SD_GetCardStatus+0x6a>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006812:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006814:	63a3      	str	r3, [r4, #56]	; 0x38
 8006816:	6823      	ldr	r3, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006818:	495b      	ldr	r1, [pc, #364]	; (8006988 <HAL_SD_GetCardStatus+0x19c>)
    hsd->State = HAL_SD_STATE_READY;
 800681a:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800681c:	6399      	str	r1, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800681e:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
 8006820:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006822:	4318      	orrs	r0, r3
 8006824:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006826:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800682a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800682e:	6820      	ldr	r0, [r4, #0]
 8006830:	f000 fcdc 	bl	80071ec <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006834:	b138      	cbz	r0, 8006846 <HAL_SD_GetCardStatus+0x5a>
    hsd->State = HAL_SD_STATE_READY;
 8006836:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006838:	6822      	ldr	r2, [r4, #0]
 800683a:	4953      	ldr	r1, [pc, #332]	; (8006988 <HAL_SD_GetCardStatus+0x19c>)
    status = HAL_ERROR;
 800683c:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800683e:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006840:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006842:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8006846:	4630      	mov	r0, r6
 8006848:	b017      	add	sp, #92	; 0x5c
 800684a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800684e:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006850:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006854:	e7e0      	b.n	8006818 <HAL_SD_GetCardStatus+0x2c>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006856:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006858:	6820      	ldr	r0, [r4, #0]
 800685a:	0409      	lsls	r1, r1, #16
 800685c:	f000 ff32 	bl	80076c4 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006860:	2800      	cmp	r0, #0
 8006862:	d1d6      	bne.n	8006812 <HAL_SD_GetCardStatus+0x26>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006864:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  config.DataLength    = 64U;
 8006868:	2340      	movs	r3, #64	; 0x40
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800686a:	2160      	movs	r1, #96	; 0x60
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800686c:	9004      	str	r0, [sp, #16]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800686e:	9200      	str	r2, [sp, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006870:	2202      	movs	r2, #2
  config.DataLength    = 64U;
 8006872:	9301      	str	r3, [sp, #4]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006874:	2301      	movs	r3, #1
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006876:	9102      	str	r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006878:	4669      	mov	r1, sp
 800687a:	6820      	ldr	r0, [r4, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800687c:	9203      	str	r2, [sp, #12]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800687e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006880:	f000 fc9e 	bl	80071c0 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006884:	6820      	ldr	r0, [r4, #0]
 8006886:	f001 f92f 	bl	8007ae8 <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 800688a:	2800      	cmp	r0, #0
 800688c:	d1c1      	bne.n	8006812 <HAL_SD_GetCardStatus+0x26>
  uint32_t *pData = pSDstatus;
 800688e:	af06      	add	r7, sp, #24
 8006890:	e005      	b.n	800689e <HAL_SD_GetCardStatus+0xb2>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006892:	f7f9 fd85 	bl	80003a0 <HAL_GetTick>
 8006896:	eba0 0008 	sub.w	r0, r0, r8
 800689a:	3001      	adds	r0, #1
 800689c:	d013      	beq.n	80068c6 <HAL_SD_GetCardStatus+0xda>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068a2:	f412 7f95 	tst.w	r2, #298	; 0x12a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80068a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80068a8:	d110      	bne.n	80068cc <HAL_SD_GetCardStatus+0xe0>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80068aa:	0416      	lsls	r6, r2, #16
 80068ac:	d5f1      	bpl.n	8006892 <HAL_SD_GetCardStatus+0xa6>
 80068ae:	f107 0620 	add.w	r6, r7, #32
 80068b2:	e000      	b.n	80068b6 <HAL_SD_GetCardStatus+0xca>
 80068b4:	6823      	ldr	r3, [r4, #0]
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 fc68 	bl	800718c <SDMMC_ReadFIFO>
 80068bc:	f847 0b04 	str.w	r0, [r7], #4
      for(count = 0U; count < 8U; count++)
 80068c0:	42b7      	cmp	r7, r6
 80068c2:	d1f7      	bne.n	80068b4 <HAL_SD_GetCardStatus+0xc8>
 80068c4:	e7e5      	b.n	8006892 <HAL_SD_GetCardStatus+0xa6>
      return HAL_SD_ERROR_TIMEOUT;
 80068c6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80068ca:	e7a4      	b.n	8006816 <HAL_SD_GetCardStatus+0x2a>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80068cc:	0710      	lsls	r0, r2, #28
 80068ce:	d455      	bmi.n	800697c <HAL_SD_GetCardStatus+0x190>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80068d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068d2:	0791      	lsls	r1, r2, #30
 80068d4:	d454      	bmi.n	8006980 <HAL_SD_GetCardStatus+0x194>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80068d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068d8:	0692      	lsls	r2, r2, #26
 80068da:	d50b      	bpl.n	80068f4 <HAL_SD_GetCardStatus+0x108>
 80068dc:	e052      	b.n	8006984 <HAL_SD_GetCardStatus+0x198>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80068de:	f000 fc55 	bl	800718c <SDMMC_ReadFIFO>
 80068e2:	f847 0b04 	str.w	r0, [r7], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80068e6:	f7f9 fd5b 	bl	80003a0 <HAL_GetTick>
 80068ea:	eba0 0008 	sub.w	r0, r0, r8
 80068ee:	3001      	adds	r0, #1
 80068f0:	d0e9      	beq.n	80068c6 <HAL_SD_GetCardStatus+0xda>
 80068f2:	6823      	ldr	r3, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80068f4:	6b5e      	ldr	r6, [r3, #52]	; 0x34
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80068f6:	4618      	mov	r0, r3
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80068f8:	f416 5680 	ands.w	r6, r6, #4096	; 0x1000
 80068fc:	d1ef      	bne.n	80068de <HAL_SD_GetCardStatus+0xf2>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80068fe:	9f06      	ldr	r7, [sp, #24]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006900:	9808      	ldr	r0, [sp, #32]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006902:	0a39      	lsrs	r1, r7, #8
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006904:	f3c7 1e81 	ubfx	lr, r7, #6, #2
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006908:	ea4f 4810 	mov.w	r8, r0, lsr #16
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800690c:	f3c7 1c40 	ubfx	ip, r7, #5, #1
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006910:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006914:	9a09      	ldr	r2, [sp, #36]	; 0x24
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006916:	ea41 6117 	orr.w	r1, r1, r7, lsr #24
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800691a:	f028 07ff 	bic.w	r7, r8, #255	; 0xff
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800691e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800698c <HAL_SD_GetCardStatus+0x1a0>
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006922:	fa5f f982 	uxtb.w	r9, r2
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006926:	b289      	uxth	r1, r1
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006928:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800692c:	fa5f f880 	uxtb.w	r8, r0
 8006930:	9b07      	ldr	r3, [sp, #28]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006932:	ea47 0709 	orr.w	r7, r7, r9
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006936:	f885 e000 	strb.w	lr, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800693a:	f885 c001 	strb.w	ip, [r5, #1]
 800693e:	fa93 fe83 	rev.w	lr, r3
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006942:	8069      	strh	r1, [r5, #2]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006944:	f3c0 5303 	ubfx	r3, r0, #20, #4
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006948:	f3c0 2107 	ubfx	r1, r0, #8, #8
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800694c:	f8c5 e004 	str.w	lr, [r5, #4]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006950:	f3c2 2c85 	ubfx	ip, r2, #10, #6
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006954:	f885 8008 	strb.w	r8, [r5, #8]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006958:	f3c2 2001 	ubfx	r0, r2, #8, #2
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800695c:	7269      	strb	r1, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800695e:	72ab      	strb	r3, [r5, #10]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006960:	f3c2 1103 	ubfx	r1, r2, #4, #4
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006964:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006968:	f002 020f 	and.w	r2, r2, #15
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800696c:	81af      	strh	r7, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800696e:	f885 c00e 	strb.w	ip, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006972:	73e8      	strb	r0, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006974:	7429      	strb	r1, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006976:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006978:	74ab      	strb	r3, [r5, #18]
 800697a:	e756      	b.n	800682a <HAL_SD_GetCardStatus+0x3e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800697c:	2008      	movs	r0, #8
 800697e:	e74b      	b.n	8006818 <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006980:	2002      	movs	r0, #2
 8006982:	e749      	b.n	8006818 <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_RX_OVERRUN;
 8006984:	2020      	movs	r0, #32
 8006986:	e747      	b.n	8006818 <HAL_SD_GetCardStatus+0x2c>
 8006988:	1fe00fff 	.word	0x1fe00fff
 800698c:	18000f3a 	.word	0x18000f3a

08006990 <HAL_SD_GetCardInfo>:
{
 8006990:	4603      	mov	r3, r0
}
 8006992:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006994:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006996:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800699a:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800699c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800699e:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80069a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069a2:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80069a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069a6:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80069a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069aa:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80069ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069ae:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80069b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b2:	61cb      	str	r3, [r1, #28]
}
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop

080069b8 <HAL_SD_ConfigWideBusOperation>:
{
 80069b8:	b570      	push	{r4, r5, r6, lr}
  if(hsd->SdCard.CardType != CARD_SECURED)
 80069ba:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  hsd->State = HAL_SD_STATE_BUSY;
 80069bc:	2303      	movs	r3, #3
{
 80069be:	b08a      	sub	sp, #40	; 0x28
 80069c0:	4604      	mov	r4, r0
  if(hsd->SdCard.CardType != CARD_SECURED)
 80069c2:	2a03      	cmp	r2, #3
  hsd->State = HAL_SD_STATE_BUSY;
 80069c4:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 80069c8:	460d      	mov	r5, r1
 80069ca:	6803      	ldr	r3, [r0, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 80069cc:	d025      	beq.n	8006a1a <HAL_SD_ConfigWideBusOperation+0x62>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80069ce:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80069d2:	d022      	beq.n	8006a1a <HAL_SD_ConfigWideBusOperation+0x62>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80069d4:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80069d8:	d064      	beq.n	8006aa4 <HAL_SD_ConfigWideBusOperation+0xec>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80069da:	2900      	cmp	r1, #0
 80069dc:	d043      	beq.n	8006a66 <HAL_SD_ConfigWideBusOperation+0xae>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80069de:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80069e0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80069e4:	6382      	str	r2, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80069e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80069e8:	b9f2      	cbnz	r2, 8006a28 <HAL_SD_ConfigWideBusOperation+0x70>
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 80069ea:	6962      	ldr	r2, [r4, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80069ec:	6921      	ldr	r1, [r4, #16]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 80069ee:	2a03      	cmp	r2, #3
    Init.BusWide             = WideMode;
 80069f0:	9506      	str	r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80069f2:	9107      	str	r1, [sp, #28]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80069f4:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 80069f8:	e9cd 6004 	strd	r6, r0, [sp, #16]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 80069fc:	d92a      	bls.n	8006a54 <HAL_SD_ConfigWideBusOperation+0x9c>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 80069fe:	9208      	str	r2, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8006a00:	aa0a      	add	r2, sp, #40	; 0x28
 8006a02:	ae04      	add	r6, sp, #16
  HAL_StatusTypeDef status = HAL_OK;
 8006a04:	2500      	movs	r5, #0
    (void)SDMMC_Init(hsd->Instance, Init);
 8006a06:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 8006a0a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8006a14:	f000 fba0 	bl	8007158 <SDMMC_Init>
 8006a18:	e009      	b.n	8006a2e <HAL_SD_ConfigWideBusOperation+0x76>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a1a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006a1c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006a20:	63a2      	str	r2, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006a22:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006a24:	2a00      	cmp	r2, #0
 8006a26:	d0e0      	beq.n	80069ea <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a28:	4a33      	ldr	r2, [pc, #204]	; (8006af8 <HAL_SD_ConfigWideBusOperation+0x140>)
    status = HAL_ERROR;
 8006a2a:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a2c:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006a2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a32:	6820      	ldr	r0, [r4, #0]
 8006a34:	f000 fbda 	bl	80071ec <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a38:	b130      	cbz	r0, 8006a48 <HAL_SD_ConfigWideBusOperation+0x90>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a3a:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 8006a3c:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a3e:	4a2e      	ldr	r2, [pc, #184]	; (8006af8 <HAL_SD_ConfigWideBusOperation+0x140>)
 8006a40:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006a42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a44:	4318      	orrs	r0, r3
 8006a46:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8006a48:	2301      	movs	r3, #1
}
 8006a4a:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8006a4c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8006a50:	b00a      	add	sp, #40	; 0x28
 8006a52:	bd70      	pop	{r4, r5, r6, pc}
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006a54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006a56:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006a5a:	d0d0      	beq.n	80069fe <HAL_SD_ConfigWideBusOperation+0x46>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006a5c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006a60:	d02d      	beq.n	8006abe <HAL_SD_ConfigWideBusOperation+0x106>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8006a62:	2204      	movs	r2, #4
 8006a64:	e7cb      	b.n	80069fe <HAL_SD_ConfigWideBusOperation+0x46>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006a66:	4618      	mov	r0, r3
  uint32_t scr[2U] = {0UL, 0UL};
 8006a68:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006a6c:	f000 fba4 	bl	80071b8 <SDMMC_GetResponse>
 8006a70:	0181      	lsls	r1, r0, #6
 8006a72:	d420      	bmi.n	8006ab6 <HAL_SD_ConfigWideBusOperation+0xfe>
  errorstate = SD_FindSCR(hsd, scr);
 8006a74:	a904      	add	r1, sp, #16
 8006a76:	4620      	mov	r0, r4
 8006a78:	f7ff fa02 	bl	8005e80 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a7c:	b968      	cbnz	r0, 8006a9a <HAL_SD_ConfigWideBusOperation+0xe2>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006a7e:	9a05      	ldr	r2, [sp, #20]
 8006a80:	6823      	ldr	r3, [r4, #0]
 8006a82:	03d2      	lsls	r2, r2, #15
 8006a84:	d534      	bpl.n	8006af0 <HAL_SD_ConfigWideBusOperation+0x138>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a86:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006a88:	4618      	mov	r0, r3
 8006a8a:	0409      	lsls	r1, r1, #16
 8006a8c:	f000 fe1a 	bl	80076c4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a90:	b918      	cbnz	r0, 8006a9a <HAL_SD_ConfigWideBusOperation+0xe2>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006a92:	4601      	mov	r1, r0
 8006a94:	6820      	ldr	r0, [r4, #0]
 8006a96:	f000 fe8d 	bl	80077b4 <SDMMC_CmdBusWidth>
 8006a9a:	6823      	ldr	r3, [r4, #0]
      hsd->ErrorCode |= errorstate;
 8006a9c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006a9e:	4310      	orrs	r0, r2
 8006aa0:	63a0      	str	r0, [r4, #56]	; 0x38
 8006aa2:	e7be      	b.n	8006a22 <HAL_SD_ConfigWideBusOperation+0x6a>
  uint32_t scr[2U] = {0UL, 0UL};
 8006aa4:	2200      	movs	r2, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	4611      	mov	r1, r2
  uint32_t scr[2U] = {0UL, 0UL};
 8006aaa:	e9cd 2204 	strd	r2, r2, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006aae:	f000 fb83 	bl	80071b8 <SDMMC_GetResponse>
 8006ab2:	0186      	lsls	r6, r0, #6
 8006ab4:	d506      	bpl.n	8006ac4 <HAL_SD_ConfigWideBusOperation+0x10c>
 8006ab6:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006ab8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006abc:	e7ee      	b.n	8006a9c <HAL_SD_ConfigWideBusOperation+0xe4>
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8006abe:	2202      	movs	r2, #2
 8006ac0:	9208      	str	r2, [sp, #32]
 8006ac2:	e79d      	b.n	8006a00 <HAL_SD_ConfigWideBusOperation+0x48>
  errorstate = SD_FindSCR(hsd, scr);
 8006ac4:	a904      	add	r1, sp, #16
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f7ff f9da 	bl	8005e80 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d1e4      	bne.n	8006a9a <HAL_SD_ConfigWideBusOperation+0xe2>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006ad0:	9a05      	ldr	r2, [sp, #20]
 8006ad2:	6823      	ldr	r3, [r4, #0]
 8006ad4:	0350      	lsls	r0, r2, #13
 8006ad6:	d50b      	bpl.n	8006af0 <HAL_SD_ConfigWideBusOperation+0x138>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ad8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006ada:	4618      	mov	r0, r3
 8006adc:	0409      	lsls	r1, r1, #16
 8006ade:	f000 fdf1 	bl	80076c4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	d1d9      	bne.n	8006a9a <HAL_SD_ConfigWideBusOperation+0xe2>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006ae6:	2102      	movs	r1, #2
 8006ae8:	6820      	ldr	r0, [r4, #0]
 8006aea:	f000 fe63 	bl	80077b4 <SDMMC_CmdBusWidth>
 8006aee:	e7d4      	b.n	8006a9a <HAL_SD_ConfigWideBusOperation+0xe2>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006af0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8006af4:	e7d2      	b.n	8006a9c <HAL_SD_ConfigWideBusOperation+0xe4>
 8006af6:	bf00      	nop
 8006af8:	1fe00fff 	.word	0x1fe00fff

08006afc <HAL_SD_Init>:
{
 8006afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006afe:	b087      	sub	sp, #28
  if(hsd == NULL)
 8006b00:	b1a0      	cbz	r0, 8006b2c <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 8006b02:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8006b06:	4604      	mov	r4, r0
 8006b08:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006b0c:	b93b      	cbnz	r3, 8006b1e <HAL_SD_Init+0x22>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8006b0e:	6983      	ldr	r3, [r0, #24]
    hsd->Lock = HAL_UNLOCKED;
 8006b10:	7702      	strb	r2, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8006b12:	b90b      	cbnz	r3, 8006b18 <HAL_SD_Init+0x1c>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8006b14:	2302      	movs	r3, #2
 8006b16:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f002 fd61 	bl	80095e0 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8006b1e:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006b20:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8006b22:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006b26:	f7ff fced 	bl	8006504 <HAL_SD_InitCard>
 8006b2a:	b118      	cbz	r0, 8006b34 <HAL_SD_Init+0x38>
    return HAL_ERROR;
 8006b2c:	2501      	movs	r5, #1
}
 8006b2e:	4628      	mov	r0, r5
 8006b30:	b007      	add	sp, #28
 8006b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006b34:	a901      	add	r1, sp, #4
 8006b36:	4620      	mov	r0, r4
 8006b38:	f7ff fe58 	bl	80067ec <HAL_SD_GetCardStatus>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	d1f5      	bne.n	8006b2c <HAL_SD_Init+0x30>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006b40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 8006b42:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006b46:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006b48:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 8006b4c:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006b4e:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006b50:	d029      	beq.n	8006ba6 <HAL_SD_Init+0xaa>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006b52:	65e0      	str	r0, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006b54:	68e1      	ldr	r1, [r4, #12]
 8006b56:	4620      	mov	r0, r4
 8006b58:	f7ff ff2e 	bl	80069b8 <HAL_SD_ConfigWideBusOperation>
 8006b5c:	4605      	mov	r5, r0
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	d1e4      	bne.n	8006b2c <HAL_SD_Init+0x30>
  tickstart = HAL_GetTick();
 8006b62:	f7f9 fc1d 	bl	80003a0 <HAL_GetTick>
 8006b66:	4607      	mov	r7, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006b68:	e007      	b.n	8006b7a <HAL_SD_Init+0x7e>
    hsd->ErrorCode |= errorstate;
 8006b6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b6c:	431e      	orrs	r6, r3
 8006b6e:	63a6      	str	r6, [r4, #56]	; 0x38
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8006b70:	f7f9 fc16 	bl	80003a0 <HAL_GetTick>
 8006b74:	1bc0      	subs	r0, r0, r7
 8006b76:	3001      	adds	r0, #1
 8006b78:	d01d      	beq.n	8006bb6 <HAL_SD_Init+0xba>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006b7a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006b7c:	6820      	ldr	r0, [r4, #0]
 8006b7e:	0409      	lsls	r1, r1, #16
 8006b80:	f000 ff6e 	bl	8007a60 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b84:	4606      	mov	r6, r0
 8006b86:	2800      	cmp	r0, #0
 8006b88:	d1ef      	bne.n	8006b6a <HAL_SD_Init+0x6e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006b8a:	4601      	mov	r1, r0
 8006b8c:	6820      	ldr	r0, [r4, #0]
 8006b8e:	f000 fb13 	bl	80071b8 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006b92:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006b96:	2804      	cmp	r0, #4
 8006b98:	d1ea      	bne.n	8006b70 <HAL_SD_Init+0x74>
  hsd->State = HAL_SD_STATE_READY;
 8006b9a:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b9c:	63a6      	str	r6, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8006b9e:	6326      	str	r6, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8006ba0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8006ba4:	e7c3      	b.n	8006b2e <HAL_SD_Init+0x32>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006ba6:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006ba8:	bf14      	ite	ne
 8006baa:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006bae:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8006bb2:	65e3      	str	r3, [r4, #92]	; 0x5c
 8006bb4:	e7ce      	b.n	8006b54 <HAL_SD_Init+0x58>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006bb6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State= HAL_SD_STATE_READY;
 8006bba:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8006bbc:	2503      	movs	r5, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006bbe:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8006bc0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 8006bc4:	e7b3      	b.n	8006b2e <HAL_SD_Init+0x32>
 8006bc6:	bf00      	nop

08006bc8 <HAL_SD_GetCardState>:
{
 8006bc8:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006bca:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 8006bcc:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006bce:	6800      	ldr	r0, [r0, #0]
 8006bd0:	0409      	lsls	r1, r1, #16
 8006bd2:	f000 ff45 	bl	8007a60 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bd6:	4601      	mov	r1, r0
 8006bd8:	b120      	cbz	r0, 8006be4 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 8006bda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006bdc:	2000      	movs	r0, #0
 8006bde:	4319      	orrs	r1, r3
 8006be0:	63a1      	str	r1, [r4, #56]	; 0x38
}
 8006be2:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006be4:	6820      	ldr	r0, [r4, #0]
 8006be6:	f000 fae7 	bl	80071b8 <SDMMC_GetResponse>
 8006bea:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8006bee:	bd10      	pop	{r4, pc}

08006bf0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop

08006bf4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop

08006bf8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop

08006bfc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop

08006c00 <HAL_SD_IRQHandler>:
{
 8006c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c02:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006c04:	6800      	ldr	r0, [r0, #0]
{
 8006c06:	b083      	sub	sp, #12
  uint32_t context = hsd->Context;
 8006c08:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006c0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006c0c:	041b      	lsls	r3, r3, #16
 8006c0e:	d502      	bpl.n	8006c16 <HAL_SD_IRQHandler+0x16>
 8006c10:	072f      	lsls	r7, r5, #28
 8006c12:	f100 80b6 	bmi.w	8006d82 <HAL_SD_IRQHandler+0x182>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006c16:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006c18:	05de      	lsls	r6, r3, #23
 8006c1a:	d528      	bpl.n	8006c6e <HAL_SD_IRQHandler+0x6e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006c1c:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8006c20:	4b98      	ldr	r3, [pc, #608]	; (8006e84 <HAL_SD_IRQHandler+0x284>)
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006c22:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8006c24:	6822      	ldr	r2, [r4, #0]
 8006c26:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006c28:	400b      	ands	r3, r1
 8006c2a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006c2c:	6822      	ldr	r2, [r4, #0]
 8006c2e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c34:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006c36:	6822      	ldr	r2, [r4, #0]
 8006c38:	68d3      	ldr	r3, [r2, #12]
 8006c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c3e:	60d3      	str	r3, [r2, #12]
    if((context & SD_CONTEXT_IT) != 0U)
 8006c40:	f015 0308 	ands.w	r3, r5, #8
 8006c44:	d075      	beq.n	8006d32 <HAL_SD_IRQHandler+0x132>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006c46:	f015 0f22 	tst.w	r5, #34	; 0x22
 8006c4a:	6820      	ldr	r0, [r4, #0]
 8006c4c:	f040 80be 	bne.w	8006dcc <HAL_SD_IRQHandler+0x1cc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006c50:	498d      	ldr	r1, [pc, #564]	; (8006e88 <HAL_SD_IRQHandler+0x288>)
      hsd->State = HAL_SD_STATE_READY;
 8006c52:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8006c54:	2300      	movs	r3, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006c56:	6381      	str	r1, [r0, #56]	; 0x38
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006c58:	07a9      	lsls	r1, r5, #30
      hsd->State = HAL_SD_STATE_READY;
 8006c5a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c5e:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006c60:	f000 80af 	beq.w	8006dc2 <HAL_SD_IRQHandler+0x1c2>
        HAL_SD_RxCpltCallback(hsd);
 8006c64:	4620      	mov	r0, r4
 8006c66:	f001 fc77 	bl	8008558 <HAL_SD_RxCpltCallback>
}
 8006c6a:	b003      	add	sp, #12
 8006c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006c6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006c70:	045e      	lsls	r6, r3, #17
 8006c72:	d502      	bpl.n	8006c7a <HAL_SD_IRQHandler+0x7a>
 8006c74:	0729      	lsls	r1, r5, #28
 8006c76:	f100 80b0 	bmi.w	8006dda <HAL_SD_IRQHandler+0x1da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006c7a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006c7c:	f013 0f3a 	tst.w	r3, #58	; 0x3a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006c80:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006c82:	d06d      	beq.n	8006d60 <HAL_SD_IRQHandler+0x160>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006c84:	079a      	lsls	r2, r3, #30
 8006c86:	d503      	bpl.n	8006c90 <HAL_SD_IRQHandler+0x90>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006c88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006c8a:	f043 0302 	orr.w	r3, r3, #2
 8006c8e:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006c90:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006c92:	071b      	lsls	r3, r3, #28
 8006c94:	d503      	bpl.n	8006c9e <HAL_SD_IRQHandler+0x9e>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006c96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006c98:	f043 0308 	orr.w	r3, r3, #8
 8006c9c:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006c9e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006ca0:	069f      	lsls	r7, r3, #26
 8006ca2:	d503      	bpl.n	8006cac <HAL_SD_IRQHandler+0xac>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006ca4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006ca6:	f043 0320 	orr.w	r3, r3, #32
 8006caa:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006cac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006cae:	06de      	lsls	r6, r3, #27
 8006cb0:	d503      	bpl.n	8006cba <HAL_SD_IRQHandler+0xba>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006cb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006cb4:	f043 0310 	orr.w	r3, r3, #16
 8006cb8:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006cba:	4b73      	ldr	r3, [pc, #460]	; (8006e88 <HAL_SD_IRQHandler+0x288>)
 8006cbc:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006cbe:	6822      	ldr	r2, [r4, #0]
 8006cc0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006cc2:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8006cc6:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006cc8:	6822      	ldr	r2, [r4, #0]
 8006cca:	68d3      	ldr	r3, [r2, #12]
 8006ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cd0:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8006cd2:	6822      	ldr	r2, [r4, #0]
 8006cd4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006cd6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006cda:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8006cdc:	6822      	ldr	r2, [r4, #0]
 8006cde:	68d3      	ldr	r3, [r2, #12]
 8006ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ce4:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006ce6:	6820      	ldr	r0, [r4, #0]
 8006ce8:	f000 fbd4 	bl	8007494 <SDMMC_CmdStopTransfer>
 8006cec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006cee:	6822      	ldr	r2, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006cf0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006cf4:	4318      	orrs	r0, r3
 8006cf6:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006cf8:	68d3      	ldr	r3, [r2, #12]
 8006cfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cfe:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	6399      	str	r1, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006d04:	f015 0308 	ands.w	r3, r5, #8
 8006d08:	f040 808f 	bne.w	8006e2a <HAL_SD_IRQHandler+0x22a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006d0c:	0629      	lsls	r1, r5, #24
 8006d0e:	d5ac      	bpl.n	8006c6a <HAL_SD_IRQHandler+0x6a>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006d10:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006d12:	2a00      	cmp	r2, #0
 8006d14:	d0a9      	beq.n	8006c6a <HAL_SD_IRQHandler+0x6a>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006d16:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 8006d18:	2501      	movs	r5, #1
        HAL_SD_ErrorCallback(hsd);
 8006d1a:	4620      	mov	r0, r4
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006d1c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8006d1e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006d22:	63ca      	str	r2, [r1, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006d24:	6822      	ldr	r2, [r4, #0]
 8006d26:	6513      	str	r3, [r2, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8006d28:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8006d2c:	f7ff fb08 	bl	8006340 <HAL_SD_ErrorCallback>
 8006d30:	e79b      	b.n	8006c6a <HAL_SD_IRQHandler+0x6a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006d32:	062a      	lsls	r2, r5, #24
 8006d34:	d599      	bpl.n	8006c6a <HAL_SD_IRQHandler+0x6a>
      hsd->Instance->DLEN = 0;
 8006d36:	6822      	ldr	r2, [r4, #0]
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006d38:	f015 0f22 	tst.w	r5, #34	; 0x22
      hsd->Instance->DLEN = 0;
 8006d3c:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006d3e:	6822      	ldr	r2, [r4, #0]
 8006d40:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006d42:	6822      	ldr	r2, [r4, #0]
 8006d44:	6513      	str	r3, [r2, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006d46:	f040 8088 	bne.w	8006e5a <HAL_SD_IRQHandler+0x25a>
      hsd->State = HAL_SD_STATE_READY;
 8006d4a:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8006d4c:	2300      	movs	r3, #0
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006d4e:	f015 0f30 	tst.w	r5, #48	; 0x30
      hsd->State = HAL_SD_STATE_READY;
 8006d52:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d56:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006d58:	d17b      	bne.n	8006e52 <HAL_SD_IRQHandler+0x252>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006d5a:	07af      	lsls	r7, r5, #30
 8006d5c:	d085      	beq.n	8006c6a <HAL_SD_IRQHandler+0x6a>
 8006d5e:	e781      	b.n	8006c64 <HAL_SD_IRQHandler+0x64>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006d60:	00da      	lsls	r2, r3, #3
 8006d62:	d582      	bpl.n	8006c6a <HAL_SD_IRQHandler+0x6a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006d64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d68:	f005 0520 	and.w	r5, r5, #32
 8006d6c:	6383      	str	r3, [r0, #56]	; 0x38
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8006d6e:	4620      	mov	r0, r4
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006d70:	6823      	ldr	r3, [r4, #0]
 8006d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d74:	075b      	lsls	r3, r3, #29
 8006d76:	d461      	bmi.n	8006e3c <HAL_SD_IRQHandler+0x23c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006d78:	2d00      	cmp	r5, #0
 8006d7a:	d07c      	beq.n	8006e76 <HAL_SD_IRQHandler+0x276>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8006d7c:	f7ff ff3e 	bl	8006bfc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 8006d80:	e773      	b.n	8006c6a <HAL_SD_IRQHandler+0x6a>
  if (hsd->RxXferSize >= 32U)
 8006d82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006d84:	2b1f      	cmp	r3, #31
 8006d86:	f67f af70 	bls.w	8006c6a <HAL_SD_IRQHandler+0x6a>
  tmp = hsd->pRxBuffPtr;
 8006d8a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8006d8c:	1d3d      	adds	r5, r7, #4
 8006d8e:	f107 0624 	add.w	r6, r7, #36	; 0x24
 8006d92:	e000      	b.n	8006d96 <HAL_SD_IRQHandler+0x196>
 8006d94:	6820      	ldr	r0, [r4, #0]
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006d96:	f000 f9f9 	bl	800718c <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 8006d9a:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006d9e:	0a02      	lsrs	r2, r0, #8
 8006da0:	3504      	adds	r5, #4
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006da2:	0c03      	lsrs	r3, r0, #16
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006da4:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006da6:	f805 2c07 	strb.w	r2, [r5, #-7]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006daa:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006dae:	f805 0c05 	strb.w	r0, [r5, #-5]
    for(count = 0U; count < 8U; count++)
 8006db2:	42ae      	cmp	r6, r5
 8006db4:	d1ee      	bne.n	8006d94 <HAL_SD_IRQHandler+0x194>
    hsd->RxXferSize -= 32U;
 8006db6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    hsd->pRxBuffPtr = tmp;
 8006db8:	3720      	adds	r7, #32
    hsd->RxXferSize -= 32U;
 8006dba:	3b20      	subs	r3, #32
 8006dbc:	e9c4 730a 	strd	r7, r3, [r4, #40]	; 0x28
 8006dc0:	e753      	b.n	8006c6a <HAL_SD_IRQHandler+0x6a>
        HAL_SD_TxCpltCallback(hsd);
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f001 fbc2 	bl	800854c <HAL_SD_TxCpltCallback>
}
 8006dc8:	b003      	add	sp, #12
 8006dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006dcc:	f000 fb62 	bl	8007494 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	d136      	bne.n	8006e44 <HAL_SD_IRQHandler+0x244>
 8006dd6:	6820      	ldr	r0, [r4, #0]
 8006dd8:	e73a      	b.n	8006c50 <HAL_SD_IRQHandler+0x50>
  if (hsd->TxXferSize >= 32U)
 8006dda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ddc:	2b1f      	cmp	r3, #31
 8006dde:	f67f af44 	bls.w	8006c6a <HAL_SD_IRQHandler+0x6a>
  tmp = hsd->pTxBuffPtr;
 8006de2:	6a26      	ldr	r6, [r4, #32]
 8006de4:	1d37      	adds	r7, r6, #4
 8006de6:	f106 0524 	add.w	r5, r6, #36	; 0x24
 8006dea:	e000      	b.n	8006dee <HAL_SD_IRQHandler+0x1ee>
 8006dec:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 8006dee:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8006df2:	3704      	adds	r7, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006df4:	a901      	add	r1, sp, #4
      data = (uint32_t)(*tmp);
 8006df6:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 8006df8:	f817 2c07 	ldrb.w	r2, [r7, #-7]
 8006dfc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006e00:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 8006e02:	f817 2c06 	ldrb.w	r2, [r7, #-6]
 8006e06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e0a:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 8006e0c:	f817 2c05 	ldrb.w	r2, [r7, #-5]
 8006e10:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006e14:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006e16:	f000 f9bd 	bl	8007194 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006e1a:	42bd      	cmp	r5, r7
 8006e1c:	d1e6      	bne.n	8006dec <HAL_SD_IRQHandler+0x1ec>
    hsd->TxXferSize -= 32U;
 8006e1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hsd->pTxBuffPtr = tmp;
 8006e20:	3620      	adds	r6, #32
    hsd->TxXferSize -= 32U;
 8006e22:	3b20      	subs	r3, #32
 8006e24:	e9c4 6308 	strd	r6, r3, [r4, #32]
 8006e28:	e71f      	b.n	8006c6a <HAL_SD_IRQHandler+0x6a>
      hsd->State = HAL_SD_STATE_READY;
 8006e2a:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8006e2c:	2300      	movs	r3, #0
      HAL_SD_ErrorCallback(hsd);
 8006e2e:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
 8006e30:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e34:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006e36:	f7ff fa83 	bl	8006340 <HAL_SD_ErrorCallback>
 8006e3a:	e716      	b.n	8006c6a <HAL_SD_IRQHandler+0x6a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006e3c:	b9f5      	cbnz	r5, 8006e7c <HAL_SD_IRQHandler+0x27c>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8006e3e:	f7ff fed7 	bl	8006bf0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8006e42:	e712      	b.n	8006c6a <HAL_SD_IRQHandler+0x6a>
          hsd->ErrorCode |= errorstate;
 8006e44:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006e46:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006e4c:	f7ff fa78 	bl	8006340 <HAL_SD_ErrorCallback>
 8006e50:	e7c1      	b.n	8006dd6 <HAL_SD_IRQHandler+0x1d6>
        HAL_SD_TxCpltCallback(hsd);
 8006e52:	4620      	mov	r0, r4
 8006e54:	f001 fb7a 	bl	800854c <HAL_SD_TxCpltCallback>
 8006e58:	e77f      	b.n	8006d5a <HAL_SD_IRQHandler+0x15a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006e5a:	6820      	ldr	r0, [r4, #0]
 8006e5c:	f000 fb1a 	bl	8007494 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8006e60:	4603      	mov	r3, r0
 8006e62:	2800      	cmp	r0, #0
 8006e64:	f43f af71 	beq.w	8006d4a <HAL_SD_IRQHandler+0x14a>
          hsd->ErrorCode |= errorstate;
 8006e68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006e6a:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006e70:	f7ff fa66 	bl	8006340 <HAL_SD_ErrorCallback>
 8006e74:	e769      	b.n	8006d4a <HAL_SD_IRQHandler+0x14a>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8006e76:	f7ff febd 	bl	8006bf4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 8006e7a:	e6f6      	b.n	8006c6a <HAL_SD_IRQHandler+0x6a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8006e7c:	f7ff febc 	bl	8006bf8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 8006e80:	e6f3      	b.n	8006c6a <HAL_SD_IRQHandler+0x6a>
 8006e82:	bf00      	nop
 8006e84:	ffff3ec5 	.word	0xffff3ec5
 8006e88:	18000f3a 	.word	0x18000f3a

08006e8c <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006e8c:	b310      	cbz	r0, 8006ed4 <HAL_SDRAM_Init+0x48>
{
 8006e8e:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006e90:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006e94:	4604      	mov	r4, r0
 8006e96:	460d      	mov	r5, r1
 8006e98:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006e9c:	b1ab      	cbz	r3, 8006eca <HAL_SDRAM_Init+0x3e>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006e9e:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006ea0:	1d21      	adds	r1, r4, #4
 8006ea2:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006ea4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006ea8:	f000 f854 	bl	8006f54 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006eac:	4629      	mov	r1, r5
 8006eae:	e9d4 0200 	ldrd	r0, r2, [r4]
 8006eb2:	f000 f887 	bl	8006fc4 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8006eb6:	4a08      	ldr	r2, [pc, #32]	; (8006ed8 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006eb8:	2101      	movs	r1, #1

  return HAL_OK;
 8006eba:	2000      	movs	r0, #0
  __FMC_ENABLE();
 8006ebc:	6813      	ldr	r3, [r2, #0]
 8006ebe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ec2:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006ec4:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 8006ec8:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8006eca:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8006ece:	f001 fc7f 	bl	80087d0 <HAL_SDRAM_MspInit>
 8006ed2:	e7e4      	b.n	8006e9e <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 8006ed4:	2001      	movs	r0, #1
}
 8006ed6:	4770      	bx	lr
 8006ed8:	52004000 	.word	0x52004000

08006edc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006edc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006ee0:	b2db      	uxtb	r3, r3
  
  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d015      	beq.n	8006f12 <HAL_SDRAM_SendCommand+0x36>
{
 8006ee6:	b570      	push	{r4, r5, r6, lr}
  {
    return HAL_BUSY;
  }
  else if((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006ee8:	f003 04fb 	and.w	r4, r3, #251	; 0xfb
 8006eec:	2c01      	cmp	r4, #1
 8006eee:	d001      	beq.n	8006ef4 <HAL_SDRAM_SendCommand+0x18>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 8006ef0:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8006ef2:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	4605      	mov	r5, r0
 8006ef8:	460e      	mov	r6, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006efa:	6800      	ldr	r0, [r0, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006efc:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006f00:	f000 f8a6 	bl	8007050 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006f04:	6833      	ldr	r3, [r6, #0]
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d005      	beq.n	8006f16 <HAL_SDRAM_SendCommand+0x3a>
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006f0a:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  return HAL_OK;
 8006f0e:	2000      	movs	r0, #0
}
 8006f10:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8006f12:	4618      	mov	r0, r3
}
 8006f14:	4770      	bx	lr
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006f16:	2305      	movs	r3, #5
  return HAL_OK;
 8006f18:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006f1a:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 8006f1e:	bd70      	pop	{r4, r5, r6, pc}

08006f20 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006f20:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006f22:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d006      	beq.n	8006f3a <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006f2c:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8006f30:	b2ed      	uxtb	r5, r5
 8006f32:	2d01      	cmp	r5, #1
 8006f34:	d003      	beq.n	8006f3e <HAL_SDRAM_ProgramRefreshRate+0x1e>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 8006f36:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8006f38:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8006f3a:	4618      	mov	r0, r3
}
 8006f3c:	bd38      	pop	{r3, r4, r5, pc}
 8006f3e:	4604      	mov	r4, r0
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006f40:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006f42:	6800      	ldr	r0, [r0, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006f44:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006f48:	f000 f894 	bl	8007074 <FMC_SDRAM_ProgramRefreshRate>
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006f4c:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
  return HAL_OK;
 8006f50:	2000      	movs	r0, #0
}
 8006f52:	bd38      	pop	{r3, r4, r5, pc}

08006f54 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006f54:	b470      	push	{r4, r5, r6}
 8006f56:	e9d1 3207 	ldrd	r3, r2, [r1, #28]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006f5a:	680c      	ldr	r4, [r1, #0]
 8006f5c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006f5e:	4313      	orrs	r3, r2
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006f60:	b1c4      	cbz	r4, 8006f94 <FMC_SDRAM_Init+0x40>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006f62:	6804      	ldr	r4, [r0, #0]
 8006f64:	432b      	orrs	r3, r5
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006f66:	4a16      	ldr	r2, [pc, #88]	; (8006fc0 <FMC_SDRAM_Init+0x6c>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006f68:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8006f6c:	4323      	orrs	r3, r4
 8006f6e:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006f70:	6843      	ldr	r3, [r0, #4]
 8006f72:	684c      	ldr	r4, [r1, #4]
 8006f74:	401a      	ands	r2, r3
 8006f76:	690d      	ldr	r5, [r1, #16]
 8006f78:	e9d1 3602 	ldrd	r3, r6, [r1, #8]
 8006f7c:	4322      	orrs	r2, r4
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	4333      	orrs	r3, r6
 8006f82:	e9d1 4105 	ldrd	r4, r1, [r1, #20]
 8006f86:	432b      	orrs	r3, r5
 8006f88:	4323      	orrs	r3, r4
 8006f8a:	430b      	orrs	r3, r1
 8006f8c:	6043      	str	r3, [r0, #4]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8006f8e:	2000      	movs	r0, #0
 8006f90:	bc70      	pop	{r4, r5, r6}
 8006f92:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006f94:	6804      	ldr	r4, [r0, #0]
 8006f96:	432b      	orrs	r3, r5
 8006f98:	4a09      	ldr	r2, [pc, #36]	; (8006fc0 <FMC_SDRAM_Init+0x6c>)
 8006f9a:	684d      	ldr	r5, [r1, #4]
 8006f9c:	4022      	ands	r2, r4
 8006f9e:	688c      	ldr	r4, [r1, #8]
 8006fa0:	68ce      	ldr	r6, [r1, #12]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	432b      	orrs	r3, r5
 8006fa6:	690d      	ldr	r5, [r1, #16]
 8006fa8:	4323      	orrs	r3, r4
 8006faa:	4333      	orrs	r3, r6
 8006fac:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 8006fb0:	432b      	orrs	r3, r5
 8006fb2:	4323      	orrs	r3, r4
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	6003      	str	r3, [r0, #0]
}
 8006fb8:	2000      	movs	r0, #0
 8006fba:	bc70      	pop	{r4, r5, r6}
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	ffff8000 	.word	0xffff8000

08006fc4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006fc4:	b4f0      	push	{r4, r5, r6, r7}
 8006fc6:	68cb      	ldr	r3, [r1, #12]
 8006fc8:	694c      	ldr	r4, [r1, #20]
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	3c01      	subs	r4, #1
 8006fce:	031b      	lsls	r3, r3, #12
 8006fd0:	0524      	lsls	r4, r4, #20
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006fd2:	b1fa      	cbz	r2, 8007014 <FMC_SDRAM_Timing_Init+0x50>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006fd4:	6885      	ldr	r5, [r0, #8]
 8006fd6:	4323      	orrs	r3, r4
 8006fd8:	4a1c      	ldr	r2, [pc, #112]	; (800704c <FMC_SDRAM_Timing_Init+0x88>)
 8006fda:	402a      	ands	r2, r5
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	6083      	str	r3, [r0, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006fe0:	684c      	ldr	r4, [r1, #4]
 8006fe2:	68c2      	ldr	r2, [r0, #12]
 8006fe4:	680d      	ldr	r5, [r1, #0]
 8006fe6:	1e63      	subs	r3, r4, #1
 8006fe8:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8006fec:	688c      	ldr	r4, [r1, #8]
 8006fee:	1e6e      	subs	r6, r5, #1
 8006ff0:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 8006ff4:	1e65      	subs	r5, r4, #1
 8006ff6:	690c      	ldr	r4, [r1, #16]
 8006ff8:	4333      	orrs	r3, r6
 8006ffa:	698a      	ldr	r2, [r1, #24]
 8006ffc:	1e61      	subs	r1, r4, #1
 8006ffe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8007002:	3a01      	subs	r2, #1
 8007004:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007008:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800700c:	60c3      	str	r3, [r0, #12]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800700e:	2000      	movs	r0, #0
 8007010:	bcf0      	pop	{r4, r5, r6, r7}
 8007012:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007014:	680a      	ldr	r2, [r1, #0]
 8007016:	4323      	orrs	r3, r4
 8007018:	6887      	ldr	r7, [r0, #8]
 800701a:	3a01      	subs	r2, #1
 800701c:	684c      	ldr	r4, [r1, #4]
 800701e:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
 8007022:	688d      	ldr	r5, [r1, #8]
 8007024:	4313      	orrs	r3, r2
 8007026:	1e66      	subs	r6, r4, #1
 8007028:	3d01      	subs	r5, #1
 800702a:	690c      	ldr	r4, [r1, #16]
 800702c:	433b      	orrs	r3, r7
 800702e:	698a      	ldr	r2, [r1, #24]
 8007030:	1e61      	subs	r1, r4, #1
 8007032:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 8007036:	3a01      	subs	r2, #1
 8007038:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800703c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007040:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007044:	6083      	str	r3, [r0, #8]
}
 8007046:	2000      	movs	r0, #0
 8007048:	bcf0      	pop	{r4, r5, r6, r7}
 800704a:	4770      	bx	lr
 800704c:	ff0f0fff 	.word	0xff0f0fff

08007050 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007050:	b470      	push	{r4, r5, r6}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
 8007052:	e9d1 3200 	ldrd	r3, r2, [r1]
{
 8007056:	4604      	mov	r4, r0
                          (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos)   |
                          ((Command->ModeRegisterDefinition)   << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8007058:	2000      	movs	r0, #0
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
 800705a:	4313      	orrs	r3, r2
 800705c:	6926      	ldr	r6, [r4, #16]
 800705e:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8007062:	4333      	orrs	r3, r6
 8007064:	3a01      	subs	r2, #1
 8007066:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
 800706a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800706e:	6123      	str	r3, [r4, #16]
}
 8007070:	bc70      	pop	{r4, r5, r6}
 8007072:	4770      	bx	lr

08007074 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007074:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007076:	4b05      	ldr	r3, [pc, #20]	; (800708c <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 8007078:	2000      	movs	r0, #0
{
 800707a:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800707c:	6954      	ldr	r4, [r2, #20]
 800707e:	4023      	ands	r3, r4
 8007080:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8007084:	6151      	str	r1, [r2, #20]
}
 8007086:	f85d 4b04 	ldr.w	r4, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	ffffc001 	.word	0xffffc001

08007090 <SDMMC_GetCmdResp1.part.2>:
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007090:	4b30      	ldr	r3, [pc, #192]	; (8007154 <SDMMC_GetCmdResp1.part.2+0xc4>)
  return (*(__IO uint32_t *) tmp);
 8007092:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007094:	4013      	ands	r3, r2
 8007096:	b34b      	cbz	r3, 80070ec <SDMMC_GetCmdResp1.part.2+0x5c>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007098:	2a00      	cmp	r2, #0
 800709a:	db29      	blt.n	80070f0 <SDMMC_GetCmdResp1.part.2+0x60>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800709c:	0051      	lsls	r1, r2, #1
 800709e:	d42d      	bmi.n	80070fc <SDMMC_GetCmdResp1.part.2+0x6c>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80070a0:	0093      	lsls	r3, r2, #2
 80070a2:	d42d      	bmi.n	8007100 <SDMMC_GetCmdResp1.part.2+0x70>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80070a4:	00d1      	lsls	r1, r2, #3
 80070a6:	d426      	bmi.n	80070f6 <SDMMC_GetCmdResp1.part.2+0x66>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80070a8:	0113      	lsls	r3, r2, #4
 80070aa:	d42e      	bmi.n	800710a <SDMMC_GetCmdResp1.part.2+0x7a>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80070ac:	0151      	lsls	r1, r2, #5
 80070ae:	d42f      	bmi.n	8007110 <SDMMC_GetCmdResp1.part.2+0x80>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80070b0:	01d3      	lsls	r3, r2, #7
 80070b2:	d427      	bmi.n	8007104 <SDMMC_GetCmdResp1.part.2+0x74>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80070b4:	0211      	lsls	r1, r2, #8
 80070b6:	d42e      	bmi.n	8007116 <SDMMC_GetCmdResp1.part.2+0x86>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80070b8:	0253      	lsls	r3, r2, #9
 80070ba:	d42f      	bmi.n	800711c <SDMMC_GetCmdResp1.part.2+0x8c>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80070bc:	0291      	lsls	r1, r2, #10
 80070be:	d430      	bmi.n	8007122 <SDMMC_GetCmdResp1.part.2+0x92>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80070c0:	02d3      	lsls	r3, r2, #11
 80070c2:	d431      	bmi.n	8007128 <SDMMC_GetCmdResp1.part.2+0x98>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80070c4:	0351      	lsls	r1, r2, #13
 80070c6:	d432      	bmi.n	800712e <SDMMC_GetCmdResp1.part.2+0x9e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80070c8:	0393      	lsls	r3, r2, #14
 80070ca:	d433      	bmi.n	8007134 <SDMMC_GetCmdResp1.part.2+0xa4>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80070cc:	03d1      	lsls	r1, r2, #15
 80070ce:	d434      	bmi.n	800713a <SDMMC_GetCmdResp1.part.2+0xaa>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80070d0:	0413      	lsls	r3, r2, #16
 80070d2:	d435      	bmi.n	8007140 <SDMMC_GetCmdResp1.part.2+0xb0>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80070d4:	0451      	lsls	r1, r2, #17
 80070d6:	d436      	bmi.n	8007146 <SDMMC_GetCmdResp1.part.2+0xb6>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80070d8:	0493      	lsls	r3, r2, #18
 80070da:	d437      	bmi.n	800714c <SDMMC_GetCmdResp1.part.2+0xbc>
  {
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80070dc:	f012 0f08 	tst.w	r2, #8
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80070e0:	bf14      	ite	ne
 80070e2:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 80070e6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80070ea:	4770      	bx	lr
    return SDMMC_ERROR_NONE;
 80070ec:	4618      	mov	r0, r3
 80070ee:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80070f0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80070f4:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80070f6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80070fa:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80070fc:	2040      	movs	r0, #64	; 0x40
 80070fe:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007100:	2080      	movs	r0, #128	; 0x80
 8007102:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007104:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007108:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800710a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800710e:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007110:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007114:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007116:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800711a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800711c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007120:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007122:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007126:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8007128:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800712c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800712e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007132:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007134:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007138:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800713a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800713e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007140:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007144:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007146:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800714a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800714c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  }
}
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	fdffe008 	.word	0xfdffe008

08007158 <SDMMC_Init>:
{
 8007158:	b084      	sub	sp, #16
 800715a:	b470      	push	{r4, r5, r6}
 800715c:	ad04      	add	r5, sp, #16
 800715e:	4606      	mov	r6, r0
             Init.BusWide             |\
 8007160:	9c07      	ldr	r4, [sp, #28]
}
 8007162:	2000      	movs	r0, #0
{
 8007164:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8007168:	460b      	mov	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800716a:	6875      	ldr	r5, [r6, #4]
             Init.ClockPowerSave      |\
 800716c:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
  tmpreg |= (Init.ClockEdge           |\
 8007170:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8007172:	9908      	ldr	r1, [sp, #32]
             Init.ClockPowerSave      |\
 8007174:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007176:	4a04      	ldr	r2, [pc, #16]	; (8007188 <SDMMC_Init+0x30>)
             Init.BusWide             |\
 8007178:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800717a:	402a      	ands	r2, r5
             Init.HardwareFlowControl |\
 800717c:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800717e:	4313      	orrs	r3, r2
 8007180:	6073      	str	r3, [r6, #4]
}
 8007182:	bc70      	pop	{r4, r5, r6}
 8007184:	b004      	add	sp, #16
 8007186:	4770      	bx	lr
 8007188:	ffc02c00 	.word	0xffc02c00

0800718c <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 800718c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop

08007194 <SDMMC_WriteFIFO>:
{
 8007194:	4603      	mov	r3, r0
  SDMMCx->FIFO = *pWriteData;
 8007196:	680a      	ldr	r2, [r1, #0]
}
 8007198:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 800719a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800719e:	4770      	bx	lr

080071a0 <SDMMC_PowerState_ON>:
{
 80071a0:	4602      	mov	r2, r0
}
 80071a2:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80071a4:	6813      	ldr	r3, [r2, #0]
 80071a6:	f043 0303 	orr.w	r3, r3, #3
 80071aa:	6013      	str	r3, [r2, #0]
}
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop

080071b0 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80071b0:	6800      	ldr	r0, [r0, #0]
}
 80071b2:	f000 0003 	and.w	r0, r0, #3
 80071b6:	4770      	bx	lr

080071b8 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80071b8:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 80071ba:	5840      	ldr	r0, [r0, r1]
}
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop

080071c0 <SDMMC_ConfigData>:
{
 80071c0:	b430      	push	{r4, r5}
 80071c2:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
 80071c4:	680b      	ldr	r3, [r1, #0]
}
 80071c6:	2000      	movs	r0, #0
  SDMMCx->DTIMER = Data->DataTimeOut;
 80071c8:	6253      	str	r3, [r2, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 80071ca:	684b      	ldr	r3, [r1, #4]
 80071cc:	6293      	str	r3, [r2, #40]	; 0x28
                       Data->TransferDir   |\
 80071ce:	690d      	ldr	r5, [r1, #16]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80071d0:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 80071d4:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 80071d6:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80071d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                       Data->TransferDir   |\
 80071da:	432b      	orrs	r3, r5
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80071dc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
                       Data->TransferMode  |\
 80071e0:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80071e2:	430b      	orrs	r3, r1
 80071e4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80071e6:	bc30      	pop	{r4, r5}
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop

080071ec <SDMMC_CmdBlockLength>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80071ec:	4a1c      	ldr	r2, [pc, #112]	; (8007260 <SDMMC_CmdBlockLength+0x74>)
 80071ee:	4b1d      	ldr	r3, [pc, #116]	; (8007264 <SDMMC_CmdBlockLength+0x78>)
{
 80071f0:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80071f2:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80071f4:	f241 1410 	movw	r4, #4368	; 0x1110
  SDMMCx->ARG = Command->Argument;
 80071f8:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80071fa:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80071fe:	68c1      	ldr	r1, [r0, #12]
 8007200:	4d19      	ldr	r5, [pc, #100]	; (8007268 <SDMMC_CmdBlockLength+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007202:	f241 3388 	movw	r3, #5000	; 0x1388
 8007206:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007208:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800720a:	4918      	ldr	r1, [pc, #96]	; (800726c <SDMMC_CmdBlockLength+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800720c:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007210:	432c      	orrs	r4, r5
 8007212:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8007214:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007218:	d312      	bcc.n	8007240 <SDMMC_CmdBlockLength+0x54>
    sta_reg = SDMMCx->STA;
 800721a:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800721c:	420a      	tst	r2, r1
 800721e:	d0f9      	beq.n	8007214 <SDMMC_CmdBlockLength+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007220:	0494      	lsls	r4, r2, #18
 8007222:	d4f7      	bmi.n	8007214 <SDMMC_CmdBlockLength+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007224:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007226:	075a      	lsls	r2, r3, #29
 8007228:	d413      	bmi.n	8007252 <SDMMC_CmdBlockLength+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800722a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800722c:	07db      	lsls	r3, r3, #31
 800722e:	d40b      	bmi.n	8007248 <SDMMC_CmdBlockLength+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007230:	4b0f      	ldr	r3, [pc, #60]	; (8007270 <SDMMC_CmdBlockLength+0x84>)
 8007232:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007234:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b10      	cmp	r3, #16
 800723a:	d00e      	beq.n	800725a <SDMMC_CmdBlockLength+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800723c:	2001      	movs	r0, #1
  return errorstate;
 800723e:	e001      	b.n	8007244 <SDMMC_CmdBlockLength+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8007240:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007244:	bc30      	pop	{r4, r5}
 8007246:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007248:	2301      	movs	r3, #1
 800724a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800724c:	4618      	mov	r0, r3
}
 800724e:	bc30      	pop	{r4, r5}
 8007250:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007252:	2304      	movs	r3, #4
 8007254:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007256:	4618      	mov	r0, r3
 8007258:	e7f4      	b.n	8007244 <SDMMC_CmdBlockLength+0x58>
}
 800725a:	bc30      	pop	{r4, r5}
 800725c:	f7ff bf18 	b.w	8007090 <SDMMC_GetCmdResp1.part.2>
 8007260:	20000018 	.word	0x20000018
 8007264:	10624dd3 	.word	0x10624dd3
 8007268:	fffee0c0 	.word	0xfffee0c0
 800726c:	00200045 	.word	0x00200045
 8007270:	002000c5 	.word	0x002000c5

08007274 <SDMMC_CmdReadSingleBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007274:	4a1c      	ldr	r2, [pc, #112]	; (80072e8 <SDMMC_CmdReadSingleBlock+0x74>)
 8007276:	4b1d      	ldr	r3, [pc, #116]	; (80072ec <SDMMC_CmdReadSingleBlock+0x78>)
{
 8007278:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800727a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800727c:	f241 1411 	movw	r4, #4369	; 0x1111
  SDMMCx->ARG = Command->Argument;
 8007280:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007282:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007286:	68c1      	ldr	r1, [r0, #12]
 8007288:	4d19      	ldr	r5, [pc, #100]	; (80072f0 <SDMMC_CmdReadSingleBlock+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800728a:	f241 3388 	movw	r3, #5000	; 0x1388
 800728e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007290:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007292:	4918      	ldr	r1, [pc, #96]	; (80072f4 <SDMMC_CmdReadSingleBlock+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007294:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007298:	432c      	orrs	r4, r5
 800729a:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800729c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80072a0:	d312      	bcc.n	80072c8 <SDMMC_CmdReadSingleBlock+0x54>
    sta_reg = SDMMCx->STA;
 80072a2:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80072a4:	420a      	tst	r2, r1
 80072a6:	d0f9      	beq.n	800729c <SDMMC_CmdReadSingleBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80072a8:	0494      	lsls	r4, r2, #18
 80072aa:	d4f7      	bmi.n	800729c <SDMMC_CmdReadSingleBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80072ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80072ae:	075a      	lsls	r2, r3, #29
 80072b0:	d413      	bmi.n	80072da <SDMMC_CmdReadSingleBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80072b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80072b4:	07db      	lsls	r3, r3, #31
 80072b6:	d40b      	bmi.n	80072d0 <SDMMC_CmdReadSingleBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80072b8:	4b0f      	ldr	r3, [pc, #60]	; (80072f8 <SDMMC_CmdReadSingleBlock+0x84>)
 80072ba:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80072bc:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b11      	cmp	r3, #17
 80072c2:	d00e      	beq.n	80072e2 <SDMMC_CmdReadSingleBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072c4:	2001      	movs	r0, #1
  return errorstate;
 80072c6:	e001      	b.n	80072cc <SDMMC_CmdReadSingleBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 80072c8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80072cc:	bc30      	pop	{r4, r5}
 80072ce:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80072d0:	2301      	movs	r3, #1
 80072d2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072d4:	4618      	mov	r0, r3
}
 80072d6:	bc30      	pop	{r4, r5}
 80072d8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80072da:	2304      	movs	r3, #4
 80072dc:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80072de:	4618      	mov	r0, r3
 80072e0:	e7f4      	b.n	80072cc <SDMMC_CmdReadSingleBlock+0x58>
}
 80072e2:	bc30      	pop	{r4, r5}
 80072e4:	f7ff bed4 	b.w	8007090 <SDMMC_GetCmdResp1.part.2>
 80072e8:	20000018 	.word	0x20000018
 80072ec:	10624dd3 	.word	0x10624dd3
 80072f0:	fffee0c0 	.word	0xfffee0c0
 80072f4:	00200045 	.word	0x00200045
 80072f8:	002000c5 	.word	0x002000c5

080072fc <SDMMC_CmdReadMultiBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80072fc:	4a1c      	ldr	r2, [pc, #112]	; (8007370 <SDMMC_CmdReadMultiBlock+0x74>)
 80072fe:	4b1d      	ldr	r3, [pc, #116]	; (8007374 <SDMMC_CmdReadMultiBlock+0x78>)
{
 8007300:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007302:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007304:	f241 1412 	movw	r4, #4370	; 0x1112
  SDMMCx->ARG = Command->Argument;
 8007308:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800730a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800730e:	68c1      	ldr	r1, [r0, #12]
 8007310:	4d19      	ldr	r5, [pc, #100]	; (8007378 <SDMMC_CmdReadMultiBlock+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007312:	f241 3388 	movw	r3, #5000	; 0x1388
 8007316:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007318:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800731a:	4918      	ldr	r1, [pc, #96]	; (800737c <SDMMC_CmdReadMultiBlock+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800731c:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007320:	432c      	orrs	r4, r5
 8007322:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8007324:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007328:	d312      	bcc.n	8007350 <SDMMC_CmdReadMultiBlock+0x54>
    sta_reg = SDMMCx->STA;
 800732a:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800732c:	420a      	tst	r2, r1
 800732e:	d0f9      	beq.n	8007324 <SDMMC_CmdReadMultiBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007330:	0494      	lsls	r4, r2, #18
 8007332:	d4f7      	bmi.n	8007324 <SDMMC_CmdReadMultiBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007334:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007336:	075a      	lsls	r2, r3, #29
 8007338:	d413      	bmi.n	8007362 <SDMMC_CmdReadMultiBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800733a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800733c:	07db      	lsls	r3, r3, #31
 800733e:	d40b      	bmi.n	8007358 <SDMMC_CmdReadMultiBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007340:	4b0f      	ldr	r3, [pc, #60]	; (8007380 <SDMMC_CmdReadMultiBlock+0x84>)
 8007342:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007344:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b12      	cmp	r3, #18
 800734a:	d00e      	beq.n	800736a <SDMMC_CmdReadMultiBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800734c:	2001      	movs	r0, #1
  return errorstate;
 800734e:	e001      	b.n	8007354 <SDMMC_CmdReadMultiBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8007350:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007354:	bc30      	pop	{r4, r5}
 8007356:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007358:	2301      	movs	r3, #1
 800735a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800735c:	4618      	mov	r0, r3
}
 800735e:	bc30      	pop	{r4, r5}
 8007360:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007362:	2304      	movs	r3, #4
 8007364:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007366:	4618      	mov	r0, r3
 8007368:	e7f4      	b.n	8007354 <SDMMC_CmdReadMultiBlock+0x58>
}
 800736a:	bc30      	pop	{r4, r5}
 800736c:	f7ff be90 	b.w	8007090 <SDMMC_GetCmdResp1.part.2>
 8007370:	20000018 	.word	0x20000018
 8007374:	10624dd3 	.word	0x10624dd3
 8007378:	fffee0c0 	.word	0xfffee0c0
 800737c:	00200045 	.word	0x00200045
 8007380:	002000c5 	.word	0x002000c5

08007384 <SDMMC_CmdWriteSingleBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007384:	4a1c      	ldr	r2, [pc, #112]	; (80073f8 <SDMMC_CmdWriteSingleBlock+0x74>)
 8007386:	4b1d      	ldr	r3, [pc, #116]	; (80073fc <SDMMC_CmdWriteSingleBlock+0x78>)
{
 8007388:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800738a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800738c:	f241 1418 	movw	r4, #4376	; 0x1118
  SDMMCx->ARG = Command->Argument;
 8007390:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007392:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007396:	68c1      	ldr	r1, [r0, #12]
 8007398:	4d19      	ldr	r5, [pc, #100]	; (8007400 <SDMMC_CmdWriteSingleBlock+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800739a:	f241 3388 	movw	r3, #5000	; 0x1388
 800739e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80073a0:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80073a2:	4918      	ldr	r1, [pc, #96]	; (8007404 <SDMMC_CmdWriteSingleBlock+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80073a4:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80073a8:	432c      	orrs	r4, r5
 80073aa:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80073ac:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80073b0:	d312      	bcc.n	80073d8 <SDMMC_CmdWriteSingleBlock+0x54>
    sta_reg = SDMMCx->STA;
 80073b2:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80073b4:	420a      	tst	r2, r1
 80073b6:	d0f9      	beq.n	80073ac <SDMMC_CmdWriteSingleBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80073b8:	0494      	lsls	r4, r2, #18
 80073ba:	d4f7      	bmi.n	80073ac <SDMMC_CmdWriteSingleBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80073bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80073be:	075a      	lsls	r2, r3, #29
 80073c0:	d413      	bmi.n	80073ea <SDMMC_CmdWriteSingleBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80073c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80073c4:	07db      	lsls	r3, r3, #31
 80073c6:	d40b      	bmi.n	80073e0 <SDMMC_CmdWriteSingleBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80073c8:	4b0f      	ldr	r3, [pc, #60]	; (8007408 <SDMMC_CmdWriteSingleBlock+0x84>)
 80073ca:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80073cc:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b18      	cmp	r3, #24
 80073d2:	d00e      	beq.n	80073f2 <SDMMC_CmdWriteSingleBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80073d4:	2001      	movs	r0, #1
  return errorstate;
 80073d6:	e001      	b.n	80073dc <SDMMC_CmdWriteSingleBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 80073d8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80073dc:	bc30      	pop	{r4, r5}
 80073de:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80073e0:	2301      	movs	r3, #1
 80073e2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80073e4:	4618      	mov	r0, r3
}
 80073e6:	bc30      	pop	{r4, r5}
 80073e8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80073ea:	2304      	movs	r3, #4
 80073ec:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80073ee:	4618      	mov	r0, r3
 80073f0:	e7f4      	b.n	80073dc <SDMMC_CmdWriteSingleBlock+0x58>
}
 80073f2:	bc30      	pop	{r4, r5}
 80073f4:	f7ff be4c 	b.w	8007090 <SDMMC_GetCmdResp1.part.2>
 80073f8:	20000018 	.word	0x20000018
 80073fc:	10624dd3 	.word	0x10624dd3
 8007400:	fffee0c0 	.word	0xfffee0c0
 8007404:	00200045 	.word	0x00200045
 8007408:	002000c5 	.word	0x002000c5

0800740c <SDMMC_CmdWriteMultiBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800740c:	4a1c      	ldr	r2, [pc, #112]	; (8007480 <SDMMC_CmdWriteMultiBlock+0x74>)
 800740e:	4b1d      	ldr	r3, [pc, #116]	; (8007484 <SDMMC_CmdWriteMultiBlock+0x78>)
{
 8007410:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007412:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007414:	f241 1419 	movw	r4, #4377	; 0x1119
  SDMMCx->ARG = Command->Argument;
 8007418:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800741a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800741e:	68c1      	ldr	r1, [r0, #12]
 8007420:	4d19      	ldr	r5, [pc, #100]	; (8007488 <SDMMC_CmdWriteMultiBlock+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007422:	f241 3388 	movw	r3, #5000	; 0x1388
 8007426:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007428:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800742a:	4918      	ldr	r1, [pc, #96]	; (800748c <SDMMC_CmdWriteMultiBlock+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800742c:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007430:	432c      	orrs	r4, r5
 8007432:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8007434:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007438:	d312      	bcc.n	8007460 <SDMMC_CmdWriteMultiBlock+0x54>
    sta_reg = SDMMCx->STA;
 800743a:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800743c:	420a      	tst	r2, r1
 800743e:	d0f9      	beq.n	8007434 <SDMMC_CmdWriteMultiBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007440:	0494      	lsls	r4, r2, #18
 8007442:	d4f7      	bmi.n	8007434 <SDMMC_CmdWriteMultiBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007444:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007446:	075a      	lsls	r2, r3, #29
 8007448:	d413      	bmi.n	8007472 <SDMMC_CmdWriteMultiBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800744a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800744c:	07db      	lsls	r3, r3, #31
 800744e:	d40b      	bmi.n	8007468 <SDMMC_CmdWriteMultiBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007450:	4b0f      	ldr	r3, [pc, #60]	; (8007490 <SDMMC_CmdWriteMultiBlock+0x84>)
 8007452:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007454:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007456:	b2db      	uxtb	r3, r3
 8007458:	2b19      	cmp	r3, #25
 800745a:	d00e      	beq.n	800747a <SDMMC_CmdWriteMultiBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800745c:	2001      	movs	r0, #1
  return errorstate;
 800745e:	e001      	b.n	8007464 <SDMMC_CmdWriteMultiBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8007460:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007464:	bc30      	pop	{r4, r5}
 8007466:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007468:	2301      	movs	r3, #1
 800746a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800746c:	4618      	mov	r0, r3
}
 800746e:	bc30      	pop	{r4, r5}
 8007470:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007472:	2304      	movs	r3, #4
 8007474:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007476:	4618      	mov	r0, r3
 8007478:	e7f4      	b.n	8007464 <SDMMC_CmdWriteMultiBlock+0x58>
}
 800747a:	bc30      	pop	{r4, r5}
 800747c:	f7ff be08 	b.w	8007090 <SDMMC_GetCmdResp1.part.2>
 8007480:	20000018 	.word	0x20000018
 8007484:	10624dd3 	.word	0x10624dd3
 8007488:	fffee0c0 	.word	0xfffee0c0
 800748c:	00200045 	.word	0x00200045
 8007490:	002000c5 	.word	0x002000c5

08007494 <SDMMC_CmdStopTransfer>:
{
 8007494:	b570      	push	{r4, r5, r6, lr}
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8007496:	68c3      	ldr	r3, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 8007498:	2600      	movs	r6, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800749a:	4a2b      	ldr	r2, [pc, #172]	; (8007548 <SDMMC_CmdStopTransfer+0xb4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800749c:	f241 140c 	movw	r4, #4364	; 0x110c
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80074a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80074a4:	4d29      	ldr	r5, [pc, #164]	; (800754c <SDMMC_CmdStopTransfer+0xb8>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80074a6:	6812      	ldr	r2, [r2, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80074a8:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80074aa:	68c1      	ldr	r1, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80074ac:	4b28      	ldr	r3, [pc, #160]	; (8007550 <SDMMC_CmdStopTransfer+0xbc>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80074ae:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80074b2:	fba3 3202 	umull	r3, r2, r3, r2
 80074b6:	4b27      	ldr	r3, [pc, #156]	; (8007554 <SDMMC_CmdStopTransfer+0xc0>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80074b8:	60c1      	str	r1, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 80074ba:	6086      	str	r6, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80074bc:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80074be:	68c1      	ldr	r1, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80074c0:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80074c4:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80074c6:	4924      	ldr	r1, [pc, #144]	; (8007558 <SDMMC_CmdStopTransfer+0xc4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80074c8:	432c      	orrs	r4, r5
 80074ca:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80074cc:	b1c3      	cbz	r3, 8007500 <SDMMC_CmdStopTransfer+0x6c>
    sta_reg = SDMMCx->STA;
 80074ce:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80074d0:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80074d2:	420a      	tst	r2, r1
 80074d4:	d0fa      	beq.n	80074cc <SDMMC_CmdStopTransfer+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80074d6:	0492      	lsls	r2, r2, #18
 80074d8:	d4f8      	bmi.n	80074cc <SDMMC_CmdStopTransfer+0x38>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80074da:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80074dc:	075b      	lsls	r3, r3, #29
 80074de:	d41f      	bmi.n	8007520 <SDMMC_CmdStopTransfer+0x8c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80074e0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80074e2:	f014 0401 	ands.w	r4, r4, #1
 80074e6:	d113      	bne.n	8007510 <SDMMC_CmdStopTransfer+0x7c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80074e8:	4b1c      	ldr	r3, [pc, #112]	; (800755c <SDMMC_CmdStopTransfer+0xc8>)
 80074ea:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80074ec:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b0c      	cmp	r3, #12
 80074f2:	d01c      	beq.n	800752e <SDMMC_CmdStopTransfer+0x9a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80074f4:	68c3      	ldr	r3, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80074f6:	2401      	movs	r4, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80074f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074fc:	60c3      	str	r3, [r0, #12]
 80074fe:	e005      	b.n	800750c <SDMMC_CmdStopTransfer+0x78>
 8007500:	68c3      	ldr	r3, [r0, #12]
      return SDMMC_ERROR_TIMEOUT;
 8007502:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8007506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800750a:	60c3      	str	r3, [r0, #12]
}
 800750c:	4620      	mov	r0, r4
 800750e:	bd70      	pop	{r4, r5, r6, pc}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007510:	2401      	movs	r4, #1
 8007512:	6384      	str	r4, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8007514:	68c3      	ldr	r3, [r0, #12]
 8007516:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800751a:	60c3      	str	r3, [r0, #12]
}
 800751c:	4620      	mov	r0, r4
 800751e:	bd70      	pop	{r4, r5, r6, pc}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007520:	2404      	movs	r4, #4
 8007522:	6384      	str	r4, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8007524:	68c3      	ldr	r3, [r0, #12]
 8007526:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800752a:	60c3      	str	r3, [r0, #12]
 800752c:	e7ee      	b.n	800750c <SDMMC_CmdStopTransfer+0x78>
 800752e:	4605      	mov	r5, r0
 8007530:	f7ff fdae 	bl	8007090 <SDMMC_GetCmdResp1.part.2>
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8007534:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8007538:	bf18      	it	ne
 800753a:	4604      	movne	r4, r0
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800753c:	68eb      	ldr	r3, [r5, #12]
 800753e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007542:	60eb      	str	r3, [r5, #12]
 8007544:	e7e2      	b.n	800750c <SDMMC_CmdStopTransfer+0x78>
 8007546:	bf00      	nop
 8007548:	20000018 	.word	0x20000018
 800754c:	fffee0c0 	.word	0xfffee0c0
 8007550:	10624dd3 	.word	0x10624dd3
 8007554:	05f5e100 	.word	0x05f5e100
 8007558:	00200045 	.word	0x00200045
 800755c:	002000c5 	.word	0x002000c5

08007560 <SDMMC_CmdSelDesel>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007560:	4b1c      	ldr	r3, [pc, #112]	; (80075d4 <SDMMC_CmdSelDesel+0x74>)
 8007562:	491d      	ldr	r1, [pc, #116]	; (80075d8 <SDMMC_CmdSelDesel+0x78>)
{
 8007564:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007566:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007568:	f241 1407 	movw	r4, #4359	; 0x1107
  SDMMCx->ARG = Command->Argument;
 800756c:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800756e:	4d1b      	ldr	r5, [pc, #108]	; (80075dc <SDMMC_CmdSelDesel+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007570:	fba1 3203 	umull	r3, r2, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007574:	68c1      	ldr	r1, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007576:	f241 3388 	movw	r3, #5000	; 0x1388
 800757a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800757c:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800757e:	4918      	ldr	r1, [pc, #96]	; (80075e0 <SDMMC_CmdSelDesel+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007580:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007584:	432c      	orrs	r4, r5
 8007586:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8007588:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800758c:	d312      	bcc.n	80075b4 <SDMMC_CmdSelDesel+0x54>
    sta_reg = SDMMCx->STA;
 800758e:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007590:	420a      	tst	r2, r1
 8007592:	d0f9      	beq.n	8007588 <SDMMC_CmdSelDesel+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007594:	0494      	lsls	r4, r2, #18
 8007596:	d4f7      	bmi.n	8007588 <SDMMC_CmdSelDesel+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007598:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800759a:	075a      	lsls	r2, r3, #29
 800759c:	d413      	bmi.n	80075c6 <SDMMC_CmdSelDesel+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800759e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80075a0:	07db      	lsls	r3, r3, #31
 80075a2:	d40b      	bmi.n	80075bc <SDMMC_CmdSelDesel+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80075a4:	4b0f      	ldr	r3, [pc, #60]	; (80075e4 <SDMMC_CmdSelDesel+0x84>)
 80075a6:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80075a8:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b07      	cmp	r3, #7
 80075ae:	d00e      	beq.n	80075ce <SDMMC_CmdSelDesel+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80075b0:	2001      	movs	r0, #1
  return errorstate;
 80075b2:	e001      	b.n	80075b8 <SDMMC_CmdSelDesel+0x58>
      return SDMMC_ERROR_TIMEOUT;
 80075b4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80075b8:	bc30      	pop	{r4, r5}
 80075ba:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80075bc:	2301      	movs	r3, #1
 80075be:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80075c0:	4618      	mov	r0, r3
}
 80075c2:	bc30      	pop	{r4, r5}
 80075c4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80075c6:	2304      	movs	r3, #4
 80075c8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80075ca:	4618      	mov	r0, r3
 80075cc:	e7f4      	b.n	80075b8 <SDMMC_CmdSelDesel+0x58>
}
 80075ce:	bc30      	pop	{r4, r5}
 80075d0:	f7ff bd5e 	b.w	8007090 <SDMMC_GetCmdResp1.part.2>
 80075d4:	20000018 	.word	0x20000018
 80075d8:	10624dd3 	.word	0x10624dd3
 80075dc:	fffee0c0 	.word	0xfffee0c0
 80075e0:	00200045 	.word	0x00200045
 80075e4:	002000c5 	.word	0x002000c5

080075e8 <SDMMC_CmdGoIdleState>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80075e8:	4b12      	ldr	r3, [pc, #72]	; (8007634 <SDMMC_CmdGoIdleState+0x4c>)
{
 80075ea:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 80075ec:	2200      	movs	r2, #0
{
 80075ee:	b410      	push	{r4}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80075f0:	4c11      	ldr	r4, [pc, #68]	; (8007638 <SDMMC_CmdGoIdleState+0x50>)
 80075f2:	6818      	ldr	r0, [r3, #0]
 80075f4:	f241 3388 	movw	r3, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 80075f8:	608a      	str	r2, [r1, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80075fa:	fba4 4000 	umull	r4, r0, r4, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80075fe:	4a0f      	ldr	r2, [pc, #60]	; (800763c <SDMMC_CmdGoIdleState+0x54>)
 8007600:	68cc      	ldr	r4, [r1, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007602:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007604:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007606:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800760a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800760e:	60ca      	str	r2, [r1, #12]
 8007610:	e002      	b.n	8007618 <SDMMC_CmdGoIdleState+0x30>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007612:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8007614:	0612      	lsls	r2, r2, #24
 8007616:	d407      	bmi.n	8007628 <SDMMC_CmdGoIdleState+0x40>
    if (count-- == 0U)
 8007618:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800761c:	d2f9      	bcs.n	8007612 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800761e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007622:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007626:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007628:	4b05      	ldr	r3, [pc, #20]	; (8007640 <SDMMC_CmdGoIdleState+0x58>)
  return SDMMC_ERROR_NONE;
 800762a:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800762c:	638b      	str	r3, [r1, #56]	; 0x38
}
 800762e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007632:	4770      	bx	lr
 8007634:	20000018 	.word	0x20000018
 8007638:	10624dd3 	.word	0x10624dd3
 800763c:	fffee0c0 	.word	0xfffee0c0
 8007640:	002000c5 	.word	0x002000c5

08007644 <SDMMC_CmdOperCond>:
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007644:	4a1c      	ldr	r2, [pc, #112]	; (80076b8 <SDMMC_CmdOperCond+0x74>)
{
 8007646:	4601      	mov	r1, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007648:	4b1c      	ldr	r3, [pc, #112]	; (80076bc <SDMMC_CmdOperCond+0x78>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800764a:	f241 1008 	movw	r0, #4360	; 0x1108
{
 800764e:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8007650:	f44f 74d5 	mov.w	r4, #426	; 0x1aa
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007654:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8007656:	608c      	str	r4, [r1, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007658:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800765c:	68cd      	ldr	r5, [r1, #12]
 800765e:	4c18      	ldr	r4, [pc, #96]	; (80076c0 <SDMMC_CmdOperCond+0x7c>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007660:	f241 3388 	movw	r3, #5000	; 0x1388
 8007664:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007666:	402c      	ands	r4, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007668:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800766c:	4320      	orrs	r0, r4
 800766e:	60c8      	str	r0, [r1, #12]

  do
  {
    if (count-- == 0U)
 8007670:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007674:	d313      	bcc.n	800769e <SDMMC_CmdOperCond+0x5a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8007676:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007678:	f012 0f45 	tst.w	r2, #69	; 0x45
 800767c:	d0f8      	beq.n	8007670 <SDMMC_CmdOperCond+0x2c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800767e:	0492      	lsls	r2, r2, #18
 8007680:	d4f6      	bmi.n	8007670 <SDMMC_CmdOperCond+0x2c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007682:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8007684:	075b      	lsls	r3, r3, #29
 8007686:	d412      	bmi.n	80076ae <SDMMC_CmdOperCond+0x6a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007688:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800768a:	f010 0001 	ands.w	r0, r0, #1
 800768e:	d10a      	bne.n	80076a6 <SDMMC_CmdOperCond+0x62>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007690:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8007692:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8007696:	d00d      	beq.n	80076b4 <SDMMC_CmdOperCond+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007698:	2340      	movs	r3, #64	; 0x40
 800769a:	638b      	str	r3, [r1, #56]	; 0x38
 800769c:	e001      	b.n	80076a2 <SDMMC_CmdOperCond+0x5e>
      return SDMMC_ERROR_TIMEOUT;
 800769e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80076a2:	bc30      	pop	{r4, r5}
 80076a4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80076a6:	2001      	movs	r0, #1
 80076a8:	6388      	str	r0, [r1, #56]	; 0x38
}
 80076aa:	bc30      	pop	{r4, r5}
 80076ac:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80076ae:	2004      	movs	r0, #4
 80076b0:	6388      	str	r0, [r1, #56]	; 0x38
 80076b2:	e7f6      	b.n	80076a2 <SDMMC_CmdOperCond+0x5e>
  }

  return SDMMC_ERROR_NONE;
 80076b4:	4618      	mov	r0, r3
  return errorstate;
 80076b6:	e7f4      	b.n	80076a2 <SDMMC_CmdOperCond+0x5e>
 80076b8:	20000018 	.word	0x20000018
 80076bc:	10624dd3 	.word	0x10624dd3
 80076c0:	fffee0c0 	.word	0xfffee0c0

080076c4 <SDMMC_CmdAppCommand>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80076c4:	4a1c      	ldr	r2, [pc, #112]	; (8007738 <SDMMC_CmdAppCommand+0x74>)
 80076c6:	4b1d      	ldr	r3, [pc, #116]	; (800773c <SDMMC_CmdAppCommand+0x78>)
{
 80076c8:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80076ca:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80076cc:	f241 1437 	movw	r4, #4407	; 0x1137
  SDMMCx->ARG = Command->Argument;
 80076d0:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80076d2:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80076d6:	68c1      	ldr	r1, [r0, #12]
 80076d8:	4d19      	ldr	r5, [pc, #100]	; (8007740 <SDMMC_CmdAppCommand+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80076da:	f241 3388 	movw	r3, #5000	; 0x1388
 80076de:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80076e0:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80076e2:	4918      	ldr	r1, [pc, #96]	; (8007744 <SDMMC_CmdAppCommand+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80076e4:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80076e8:	432c      	orrs	r4, r5
 80076ea:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80076ec:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80076f0:	d312      	bcc.n	8007718 <SDMMC_CmdAppCommand+0x54>
    sta_reg = SDMMCx->STA;
 80076f2:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80076f4:	420a      	tst	r2, r1
 80076f6:	d0f9      	beq.n	80076ec <SDMMC_CmdAppCommand+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80076f8:	0494      	lsls	r4, r2, #18
 80076fa:	d4f7      	bmi.n	80076ec <SDMMC_CmdAppCommand+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80076fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80076fe:	075a      	lsls	r2, r3, #29
 8007700:	d413      	bmi.n	800772a <SDMMC_CmdAppCommand+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007702:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007704:	07db      	lsls	r3, r3, #31
 8007706:	d40b      	bmi.n	8007720 <SDMMC_CmdAppCommand+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007708:	4b0f      	ldr	r3, [pc, #60]	; (8007748 <SDMMC_CmdAppCommand+0x84>)
 800770a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800770c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800770e:	b2db      	uxtb	r3, r3
 8007710:	2b37      	cmp	r3, #55	; 0x37
 8007712:	d00e      	beq.n	8007732 <SDMMC_CmdAppCommand+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007714:	2001      	movs	r0, #1
  return errorstate;
 8007716:	e001      	b.n	800771c <SDMMC_CmdAppCommand+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8007718:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800771c:	bc30      	pop	{r4, r5}
 800771e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007720:	2301      	movs	r3, #1
 8007722:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007724:	4618      	mov	r0, r3
}
 8007726:	bc30      	pop	{r4, r5}
 8007728:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800772a:	2304      	movs	r3, #4
 800772c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800772e:	4618      	mov	r0, r3
 8007730:	e7f4      	b.n	800771c <SDMMC_CmdAppCommand+0x58>
}
 8007732:	bc30      	pop	{r4, r5}
 8007734:	f7ff bcac 	b.w	8007090 <SDMMC_GetCmdResp1.part.2>
 8007738:	20000018 	.word	0x20000018
 800773c:	10624dd3 	.word	0x10624dd3
 8007740:	fffee0c0 	.word	0xfffee0c0
 8007744:	00200045 	.word	0x00200045
 8007748:	002000c5 	.word	0x002000c5

0800774c <SDMMC_CmdAppOperCommand>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800774c:	4a15      	ldr	r2, [pc, #84]	; (80077a4 <SDMMC_CmdAppOperCommand+0x58>)
 800774e:	4b16      	ldr	r3, [pc, #88]	; (80077a8 <SDMMC_CmdAppOperCommand+0x5c>)
{
 8007750:	b430      	push	{r4, r5}
 8007752:	4604      	mov	r4, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007754:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007756:	f241 1029 	movw	r0, #4393	; 0x1129
  SDMMCx->ARG = Command->Argument;
 800775a:	60a1      	str	r1, [r4, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800775c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007760:	68e5      	ldr	r5, [r4, #12]
 8007762:	4912      	ldr	r1, [pc, #72]	; (80077ac <SDMMC_CmdAppOperCommand+0x60>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007764:	f241 3388 	movw	r3, #5000	; 0x1388
 8007768:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800776a:	4029      	ands	r1, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800776c:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007770:	4308      	orrs	r0, r1
 8007772:	60e0      	str	r0, [r4, #12]
    if (count-- == 0U)
 8007774:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007778:	d30d      	bcc.n	8007796 <SDMMC_CmdAppOperCommand+0x4a>
    sta_reg = SDMMCx->STA;
 800777a:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800777c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007780:	d0f8      	beq.n	8007774 <SDMMC_CmdAppOperCommand+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007782:	0492      	lsls	r2, r2, #18
 8007784:	d4f6      	bmi.n	8007774 <SDMMC_CmdAppOperCommand+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007786:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007788:	f010 0004 	ands.w	r0, r0, #4
 800778c:	d107      	bne.n	800779e <SDMMC_CmdAppOperCommand+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800778e:	4b08      	ldr	r3, [pc, #32]	; (80077b0 <SDMMC_CmdAppOperCommand+0x64>)
 8007790:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8007792:	bc30      	pop	{r4, r5}
 8007794:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007796:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800779a:	bc30      	pop	{r4, r5}
 800779c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800779e:	2004      	movs	r0, #4
 80077a0:	63a0      	str	r0, [r4, #56]	; 0x38
 80077a2:	e7fa      	b.n	800779a <SDMMC_CmdAppOperCommand+0x4e>
 80077a4:	20000018 	.word	0x20000018
 80077a8:	10624dd3 	.word	0x10624dd3
 80077ac:	fffee0c0 	.word	0xfffee0c0
 80077b0:	002000c5 	.word	0x002000c5

080077b4 <SDMMC_CmdBusWidth>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80077b4:	4a1c      	ldr	r2, [pc, #112]	; (8007828 <SDMMC_CmdBusWidth+0x74>)
 80077b6:	4b1d      	ldr	r3, [pc, #116]	; (800782c <SDMMC_CmdBusWidth+0x78>)
{
 80077b8:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80077ba:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80077bc:	f241 1406 	movw	r4, #4358	; 0x1106
  SDMMCx->ARG = Command->Argument;
 80077c0:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80077c2:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80077c6:	68c1      	ldr	r1, [r0, #12]
 80077c8:	4d19      	ldr	r5, [pc, #100]	; (8007830 <SDMMC_CmdBusWidth+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80077ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80077ce:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80077d0:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80077d2:	4918      	ldr	r1, [pc, #96]	; (8007834 <SDMMC_CmdBusWidth+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80077d4:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80077d8:	432c      	orrs	r4, r5
 80077da:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80077dc:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80077e0:	d312      	bcc.n	8007808 <SDMMC_CmdBusWidth+0x54>
    sta_reg = SDMMCx->STA;
 80077e2:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80077e4:	420a      	tst	r2, r1
 80077e6:	d0f9      	beq.n	80077dc <SDMMC_CmdBusWidth+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80077e8:	0494      	lsls	r4, r2, #18
 80077ea:	d4f7      	bmi.n	80077dc <SDMMC_CmdBusWidth+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80077ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80077ee:	075a      	lsls	r2, r3, #29
 80077f0:	d413      	bmi.n	800781a <SDMMC_CmdBusWidth+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80077f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80077f4:	07db      	lsls	r3, r3, #31
 80077f6:	d40b      	bmi.n	8007810 <SDMMC_CmdBusWidth+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80077f8:	4b0f      	ldr	r3, [pc, #60]	; (8007838 <SDMMC_CmdBusWidth+0x84>)
 80077fa:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80077fc:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	2b06      	cmp	r3, #6
 8007802:	d00e      	beq.n	8007822 <SDMMC_CmdBusWidth+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007804:	2001      	movs	r0, #1
  return errorstate;
 8007806:	e001      	b.n	800780c <SDMMC_CmdBusWidth+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8007808:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800780c:	bc30      	pop	{r4, r5}
 800780e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007810:	2301      	movs	r3, #1
 8007812:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007814:	4618      	mov	r0, r3
}
 8007816:	bc30      	pop	{r4, r5}
 8007818:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800781a:	2304      	movs	r3, #4
 800781c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800781e:	4618      	mov	r0, r3
 8007820:	e7f4      	b.n	800780c <SDMMC_CmdBusWidth+0x58>
}
 8007822:	bc30      	pop	{r4, r5}
 8007824:	f7ff bc34 	b.w	8007090 <SDMMC_GetCmdResp1.part.2>
 8007828:	20000018 	.word	0x20000018
 800782c:	10624dd3 	.word	0x10624dd3
 8007830:	fffee0c0 	.word	0xfffee0c0
 8007834:	00200045 	.word	0x00200045
 8007838:	002000c5 	.word	0x002000c5

0800783c <SDMMC_CmdSendSCR>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800783c:	4a1d      	ldr	r2, [pc, #116]	; (80078b4 <SDMMC_CmdSendSCR+0x78>)
  SDMMCx->ARG = Command->Argument;
 800783e:	2100      	movs	r1, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007840:	4b1d      	ldr	r3, [pc, #116]	; (80078b8 <SDMMC_CmdSendSCR+0x7c>)
{
 8007842:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007844:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007846:	f241 1433 	movw	r4, #4403	; 0x1133
  SDMMCx->ARG = Command->Argument;
 800784a:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800784c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007850:	68c1      	ldr	r1, [r0, #12]
 8007852:	4d1a      	ldr	r5, [pc, #104]	; (80078bc <SDMMC_CmdSendSCR+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007854:	f241 3388 	movw	r3, #5000	; 0x1388
 8007858:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800785a:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800785c:	4918      	ldr	r1, [pc, #96]	; (80078c0 <SDMMC_CmdSendSCR+0x84>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800785e:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007862:	432c      	orrs	r4, r5
 8007864:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8007866:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800786a:	d312      	bcc.n	8007892 <SDMMC_CmdSendSCR+0x56>
    sta_reg = SDMMCx->STA;
 800786c:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800786e:	420a      	tst	r2, r1
 8007870:	d0f9      	beq.n	8007866 <SDMMC_CmdSendSCR+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007872:	0494      	lsls	r4, r2, #18
 8007874:	d4f7      	bmi.n	8007866 <SDMMC_CmdSendSCR+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007876:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007878:	075a      	lsls	r2, r3, #29
 800787a:	d413      	bmi.n	80078a4 <SDMMC_CmdSendSCR+0x68>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800787c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800787e:	07db      	lsls	r3, r3, #31
 8007880:	d40b      	bmi.n	800789a <SDMMC_CmdSendSCR+0x5e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007882:	4b10      	ldr	r3, [pc, #64]	; (80078c4 <SDMMC_CmdSendSCR+0x88>)
 8007884:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007886:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b33      	cmp	r3, #51	; 0x33
 800788c:	d00e      	beq.n	80078ac <SDMMC_CmdSendSCR+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800788e:	2001      	movs	r0, #1
  return errorstate;
 8007890:	e001      	b.n	8007896 <SDMMC_CmdSendSCR+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 8007892:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007896:	bc30      	pop	{r4, r5}
 8007898:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800789a:	2301      	movs	r3, #1
 800789c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800789e:	4618      	mov	r0, r3
}
 80078a0:	bc30      	pop	{r4, r5}
 80078a2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80078a4:	2304      	movs	r3, #4
 80078a6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80078a8:	4618      	mov	r0, r3
 80078aa:	e7f4      	b.n	8007896 <SDMMC_CmdSendSCR+0x5a>
}
 80078ac:	bc30      	pop	{r4, r5}
 80078ae:	f7ff bbef 	b.w	8007090 <SDMMC_GetCmdResp1.part.2>
 80078b2:	bf00      	nop
 80078b4:	20000018 	.word	0x20000018
 80078b8:	10624dd3 	.word	0x10624dd3
 80078bc:	fffee0c0 	.word	0xfffee0c0
 80078c0:	00200045 	.word	0x00200045
 80078c4:	002000c5 	.word	0x002000c5

080078c8 <SDMMC_CmdSendCID>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078c8:	4a19      	ldr	r2, [pc, #100]	; (8007930 <SDMMC_CmdSendCID+0x68>)
{
 80078ca:	4601      	mov	r1, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078cc:	4b19      	ldr	r3, [pc, #100]	; (8007934 <SDMMC_CmdSendCID+0x6c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80078ce:	f241 3002 	movw	r0, #4866	; 0x1302
{
 80078d2:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 80078d4:	2400      	movs	r4, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078d6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 80078d8:	608c      	str	r4, [r1, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078da:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80078de:	68cd      	ldr	r5, [r1, #12]
 80078e0:	4c15      	ldr	r4, [pc, #84]	; (8007938 <SDMMC_CmdSendCID+0x70>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80078e6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80078e8:	402c      	ands	r4, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078ea:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80078ee:	4320      	orrs	r0, r4
 80078f0:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 80078f2:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80078f6:	d310      	bcc.n	800791a <SDMMC_CmdSendCID+0x52>
    sta_reg = SDMMCx->STA;
 80078f8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80078fa:	f012 0f45 	tst.w	r2, #69	; 0x45
 80078fe:	d0f8      	beq.n	80078f2 <SDMMC_CmdSendCID+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007900:	0492      	lsls	r2, r2, #18
 8007902:	d4f6      	bmi.n	80078f2 <SDMMC_CmdSendCID+0x2a>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007904:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8007906:	075b      	lsls	r3, r3, #29
 8007908:	d40f      	bmi.n	800792a <SDMMC_CmdSendCID+0x62>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800790a:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800790c:	f010 0001 	ands.w	r0, r0, #1
 8007910:	d107      	bne.n	8007922 <SDMMC_CmdSendCID+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007912:	4b0a      	ldr	r3, [pc, #40]	; (800793c <SDMMC_CmdSendCID+0x74>)
 8007914:	638b      	str	r3, [r1, #56]	; 0x38
}
 8007916:	bc30      	pop	{r4, r5}
 8007918:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800791a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800791e:	bc30      	pop	{r4, r5}
 8007920:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007922:	2001      	movs	r0, #1
 8007924:	6388      	str	r0, [r1, #56]	; 0x38
}
 8007926:	bc30      	pop	{r4, r5}
 8007928:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800792a:	2004      	movs	r0, #4
 800792c:	6388      	str	r0, [r1, #56]	; 0x38
 800792e:	e7f6      	b.n	800791e <SDMMC_CmdSendCID+0x56>
 8007930:	20000018 	.word	0x20000018
 8007934:	10624dd3 	.word	0x10624dd3
 8007938:	fffee0c0 	.word	0xfffee0c0
 800793c:	002000c5 	.word	0x002000c5

08007940 <SDMMC_CmdSendCSD>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007940:	4a19      	ldr	r2, [pc, #100]	; (80079a8 <SDMMC_CmdSendCSD+0x68>)
 8007942:	4b1a      	ldr	r3, [pc, #104]	; (80079ac <SDMMC_CmdSendCSD+0x6c>)
{
 8007944:	b430      	push	{r4, r5}
 8007946:	4604      	mov	r4, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007948:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800794a:	f241 3009 	movw	r0, #4873	; 0x1309
  SDMMCx->ARG = Command->Argument;
 800794e:	60a1      	str	r1, [r4, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007950:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007954:	68e5      	ldr	r5, [r4, #12]
 8007956:	4916      	ldr	r1, [pc, #88]	; (80079b0 <SDMMC_CmdSendCSD+0x70>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007958:	f241 3388 	movw	r3, #5000	; 0x1388
 800795c:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800795e:	4029      	ands	r1, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007960:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007964:	4308      	orrs	r0, r1
 8007966:	60e0      	str	r0, [r4, #12]
    if (count-- == 0U)
 8007968:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800796c:	d310      	bcc.n	8007990 <SDMMC_CmdSendCSD+0x50>
    sta_reg = SDMMCx->STA;
 800796e:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007970:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007974:	d0f8      	beq.n	8007968 <SDMMC_CmdSendCSD+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007976:	0492      	lsls	r2, r2, #18
 8007978:	d4f6      	bmi.n	8007968 <SDMMC_CmdSendCSD+0x28>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800797a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800797c:	075b      	lsls	r3, r3, #29
 800797e:	d40f      	bmi.n	80079a0 <SDMMC_CmdSendCSD+0x60>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007980:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007982:	f010 0001 	ands.w	r0, r0, #1
 8007986:	d107      	bne.n	8007998 <SDMMC_CmdSendCSD+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007988:	4b0a      	ldr	r3, [pc, #40]	; (80079b4 <SDMMC_CmdSendCSD+0x74>)
 800798a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800798c:	bc30      	pop	{r4, r5}
 800798e:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007990:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007994:	bc30      	pop	{r4, r5}
 8007996:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007998:	2001      	movs	r0, #1
 800799a:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800799c:	bc30      	pop	{r4, r5}
 800799e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80079a0:	2004      	movs	r0, #4
 80079a2:	63a0      	str	r0, [r4, #56]	; 0x38
 80079a4:	e7f6      	b.n	8007994 <SDMMC_CmdSendCSD+0x54>
 80079a6:	bf00      	nop
 80079a8:	20000018 	.word	0x20000018
 80079ac:	10624dd3 	.word	0x10624dd3
 80079b0:	fffee0c0 	.word	0xfffee0c0
 80079b4:	002000c5 	.word	0x002000c5

080079b8 <SDMMC_CmdSetRelAdd>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80079b8:	4b25      	ldr	r3, [pc, #148]	; (8007a50 <SDMMC_CmdSetRelAdd+0x98>)
 80079ba:	4a26      	ldr	r2, [pc, #152]	; (8007a54 <SDMMC_CmdSetRelAdd+0x9c>)
{
 80079bc:	b470      	push	{r4, r5, r6}
  SDMMCx->ARG = Command->Argument;
 80079be:	2400      	movs	r4, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80079c0:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80079c2:	4d25      	ldr	r5, [pc, #148]	; (8007a58 <SDMMC_CmdSetRelAdd+0xa0>)
  SDMMCx->ARG = Command->Argument;
 80079c4:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80079c6:	f241 1403 	movw	r4, #4355	; 0x1103
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80079ca:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80079ce:	68c6      	ldr	r6, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80079d0:	0a5a      	lsrs	r2, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80079d2:	4035      	ands	r5, r6
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80079d4:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80079d8:	432c      	orrs	r4, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80079da:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80079de:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80079e0:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80079e4:	d311      	bcc.n	8007a0a <SDMMC_CmdSetRelAdd+0x52>
    sta_reg = SDMMCx->STA;
 80079e6:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80079e8:	f012 0f45 	tst.w	r2, #69	; 0x45
 80079ec:	d0f8      	beq.n	80079e0 <SDMMC_CmdSetRelAdd+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80079ee:	0496      	lsls	r6, r2, #18
 80079f0:	d4f6      	bmi.n	80079e0 <SDMMC_CmdSetRelAdd+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80079f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80079f4:	075d      	lsls	r5, r3, #29
 80079f6:	d411      	bmi.n	8007a1c <SDMMC_CmdSetRelAdd+0x64>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80079f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80079fa:	07dc      	lsls	r4, r3, #31
 80079fc:	d409      	bmi.n	8007a12 <SDMMC_CmdSetRelAdd+0x5a>
  return (uint8_t)(SDMMCx->RESPCMD);
 80079fe:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	d00e      	beq.n	8007a24 <SDMMC_CmdSetRelAdd+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a06:	2001      	movs	r0, #1
 8007a08:	e001      	b.n	8007a0e <SDMMC_CmdSetRelAdd+0x56>
      return SDMMC_ERROR_TIMEOUT;
 8007a0a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007a0e:	bc70      	pop	{r4, r5, r6}
 8007a10:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007a12:	2301      	movs	r3, #1
 8007a14:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a16:	4618      	mov	r0, r3
}
 8007a18:	bc70      	pop	{r4, r5, r6}
 8007a1a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a1c:	2304      	movs	r3, #4
 8007a1e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a20:	4618      	mov	r0, r3
 8007a22:	e7f4      	b.n	8007a0e <SDMMC_CmdSetRelAdd+0x56>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007a24:	4b0d      	ldr	r3, [pc, #52]	; (8007a5c <SDMMC_CmdSetRelAdd+0xa4>)
 8007a26:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8007a28:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007a2a:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8007a2e:	d009      	beq.n	8007a44 <SDMMC_CmdSetRelAdd+0x8c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007a30:	045a      	lsls	r2, r3, #17
 8007a32:	d40a      	bmi.n	8007a4a <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007a34:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8007a38:	bf0c      	ite	eq
 8007a3a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8007a3e:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8007a42:	e7e4      	b.n	8007a0e <SDMMC_CmdSetRelAdd+0x56>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007a44:	0c1b      	lsrs	r3, r3, #16
 8007a46:	800b      	strh	r3, [r1, #0]
 8007a48:	e7e1      	b.n	8007a0e <SDMMC_CmdSetRelAdd+0x56>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007a4a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007a4e:	e7de      	b.n	8007a0e <SDMMC_CmdSetRelAdd+0x56>
 8007a50:	20000018 	.word	0x20000018
 8007a54:	10624dd3 	.word	0x10624dd3
 8007a58:	fffee0c0 	.word	0xfffee0c0
 8007a5c:	002000c5 	.word	0x002000c5

08007a60 <SDMMC_CmdSendStatus>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007a60:	4a1c      	ldr	r2, [pc, #112]	; (8007ad4 <SDMMC_CmdSendStatus+0x74>)
 8007a62:	4b1d      	ldr	r3, [pc, #116]	; (8007ad8 <SDMMC_CmdSendStatus+0x78>)
{
 8007a64:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007a66:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007a68:	f241 140d 	movw	r4, #4365	; 0x110d
  SDMMCx->ARG = Command->Argument;
 8007a6c:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007a6e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007a72:	68c1      	ldr	r1, [r0, #12]
 8007a74:	4d19      	ldr	r5, [pc, #100]	; (8007adc <SDMMC_CmdSendStatus+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007a76:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a7a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007a7c:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007a7e:	4918      	ldr	r1, [pc, #96]	; (8007ae0 <SDMMC_CmdSendStatus+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007a80:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007a84:	432c      	orrs	r4, r5
 8007a86:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8007a88:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007a8c:	d312      	bcc.n	8007ab4 <SDMMC_CmdSendStatus+0x54>
    sta_reg = SDMMCx->STA;
 8007a8e:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007a90:	420a      	tst	r2, r1
 8007a92:	d0f9      	beq.n	8007a88 <SDMMC_CmdSendStatus+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007a94:	0494      	lsls	r4, r2, #18
 8007a96:	d4f7      	bmi.n	8007a88 <SDMMC_CmdSendStatus+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007a98:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007a9a:	075a      	lsls	r2, r3, #29
 8007a9c:	d413      	bmi.n	8007ac6 <SDMMC_CmdSendStatus+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007a9e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007aa0:	07db      	lsls	r3, r3, #31
 8007aa2:	d40b      	bmi.n	8007abc <SDMMC_CmdSendStatus+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007aa4:	4b0f      	ldr	r3, [pc, #60]	; (8007ae4 <SDMMC_CmdSendStatus+0x84>)
 8007aa6:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007aa8:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	2b0d      	cmp	r3, #13
 8007aae:	d00e      	beq.n	8007ace <SDMMC_CmdSendStatus+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ab0:	2001      	movs	r0, #1
  return errorstate;
 8007ab2:	e001      	b.n	8007ab8 <SDMMC_CmdSendStatus+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8007ab4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007ab8:	bc30      	pop	{r4, r5}
 8007aba:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007abc:	2301      	movs	r3, #1
 8007abe:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ac0:	4618      	mov	r0, r3
}
 8007ac2:	bc30      	pop	{r4, r5}
 8007ac4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007ac6:	2304      	movs	r3, #4
 8007ac8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007aca:	4618      	mov	r0, r3
 8007acc:	e7f4      	b.n	8007ab8 <SDMMC_CmdSendStatus+0x58>
}
 8007ace:	bc30      	pop	{r4, r5}
 8007ad0:	f7ff bade 	b.w	8007090 <SDMMC_GetCmdResp1.part.2>
 8007ad4:	20000018 	.word	0x20000018
 8007ad8:	10624dd3 	.word	0x10624dd3
 8007adc:	fffee0c0 	.word	0xfffee0c0
 8007ae0:	00200045 	.word	0x00200045
 8007ae4:	002000c5 	.word	0x002000c5

08007ae8 <SDMMC_CmdStatusRegister>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007ae8:	4a1d      	ldr	r2, [pc, #116]	; (8007b60 <SDMMC_CmdStatusRegister+0x78>)
  SDMMCx->ARG = Command->Argument;
 8007aea:	2100      	movs	r1, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007aec:	4b1d      	ldr	r3, [pc, #116]	; (8007b64 <SDMMC_CmdStatusRegister+0x7c>)
{
 8007aee:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007af0:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007af2:	f241 140d 	movw	r4, #4365	; 0x110d
  SDMMCx->ARG = Command->Argument;
 8007af6:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007af8:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007afc:	68c1      	ldr	r1, [r0, #12]
 8007afe:	4d1a      	ldr	r5, [pc, #104]	; (8007b68 <SDMMC_CmdStatusRegister+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007b00:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b04:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007b06:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007b08:	4918      	ldr	r1, [pc, #96]	; (8007b6c <SDMMC_CmdStatusRegister+0x84>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007b0a:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007b0e:	432c      	orrs	r4, r5
 8007b10:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8007b12:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007b16:	d312      	bcc.n	8007b3e <SDMMC_CmdStatusRegister+0x56>
    sta_reg = SDMMCx->STA;
 8007b18:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007b1a:	420a      	tst	r2, r1
 8007b1c:	d0f9      	beq.n	8007b12 <SDMMC_CmdStatusRegister+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007b1e:	0494      	lsls	r4, r2, #18
 8007b20:	d4f7      	bmi.n	8007b12 <SDMMC_CmdStatusRegister+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007b22:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007b24:	075a      	lsls	r2, r3, #29
 8007b26:	d413      	bmi.n	8007b50 <SDMMC_CmdStatusRegister+0x68>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007b28:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007b2a:	07db      	lsls	r3, r3, #31
 8007b2c:	d40b      	bmi.n	8007b46 <SDMMC_CmdStatusRegister+0x5e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007b2e:	4b10      	ldr	r3, [pc, #64]	; (8007b70 <SDMMC_CmdStatusRegister+0x88>)
 8007b30:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007b32:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b0d      	cmp	r3, #13
 8007b38:	d00e      	beq.n	8007b58 <SDMMC_CmdStatusRegister+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b3a:	2001      	movs	r0, #1
  return errorstate;
 8007b3c:	e001      	b.n	8007b42 <SDMMC_CmdStatusRegister+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 8007b3e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007b42:	bc30      	pop	{r4, r5}
 8007b44:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007b46:	2301      	movs	r3, #1
 8007b48:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b4a:	4618      	mov	r0, r3
}
 8007b4c:	bc30      	pop	{r4, r5}
 8007b4e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007b50:	2304      	movs	r3, #4
 8007b52:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b54:	4618      	mov	r0, r3
 8007b56:	e7f4      	b.n	8007b42 <SDMMC_CmdStatusRegister+0x5a>
}
 8007b58:	bc30      	pop	{r4, r5}
 8007b5a:	f7ff ba99 	b.w	8007090 <SDMMC_GetCmdResp1.part.2>
 8007b5e:	bf00      	nop
 8007b60:	20000018 	.word	0x20000018
 8007b64:	10624dd3 	.word	0x10624dd3
 8007b68:	fffee0c0 	.word	0xfffee0c0
 8007b6c:	00200045 	.word	0x00200045
 8007b70:	002000c5 	.word	0x002000c5

08007b74 <SDMMC_CmdVoltageSwitch>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007b74:	4a1d      	ldr	r2, [pc, #116]	; (8007bec <SDMMC_CmdVoltageSwitch+0x78>)
  SDMMCx->ARG = Command->Argument;
 8007b76:	2100      	movs	r1, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007b78:	4b1d      	ldr	r3, [pc, #116]	; (8007bf0 <SDMMC_CmdVoltageSwitch+0x7c>)
{
 8007b7a:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007b7c:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007b7e:	f241 140b 	movw	r4, #4363	; 0x110b
  SDMMCx->ARG = Command->Argument;
 8007b82:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007b84:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007b88:	68c1      	ldr	r1, [r0, #12]
 8007b8a:	4d1a      	ldr	r5, [pc, #104]	; (8007bf4 <SDMMC_CmdVoltageSwitch+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007b8c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b90:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007b92:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007b94:	4918      	ldr	r1, [pc, #96]	; (8007bf8 <SDMMC_CmdVoltageSwitch+0x84>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007b96:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007b9a:	432c      	orrs	r4, r5
 8007b9c:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8007b9e:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8007ba2:	d312      	bcc.n	8007bca <SDMMC_CmdVoltageSwitch+0x56>
    sta_reg = SDMMCx->STA;
 8007ba4:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007ba6:	420a      	tst	r2, r1
 8007ba8:	d0f9      	beq.n	8007b9e <SDMMC_CmdVoltageSwitch+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007baa:	0494      	lsls	r4, r2, #18
 8007bac:	d4f7      	bmi.n	8007b9e <SDMMC_CmdVoltageSwitch+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007bae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007bb0:	075a      	lsls	r2, r3, #29
 8007bb2:	d413      	bmi.n	8007bdc <SDMMC_CmdVoltageSwitch+0x68>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007bb4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007bb6:	07db      	lsls	r3, r3, #31
 8007bb8:	d40b      	bmi.n	8007bd2 <SDMMC_CmdVoltageSwitch+0x5e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007bba:	4b10      	ldr	r3, [pc, #64]	; (8007bfc <SDMMC_CmdVoltageSwitch+0x88>)
 8007bbc:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007bbe:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	2b0b      	cmp	r3, #11
 8007bc4:	d00e      	beq.n	8007be4 <SDMMC_CmdVoltageSwitch+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007bc6:	2001      	movs	r0, #1
  return errorstate;
 8007bc8:	e001      	b.n	8007bce <SDMMC_CmdVoltageSwitch+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 8007bca:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007bce:	bc30      	pop	{r4, r5}
 8007bd0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007bd6:	4618      	mov	r0, r3
}
 8007bd8:	bc30      	pop	{r4, r5}
 8007bda:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007bdc:	2304      	movs	r3, #4
 8007bde:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007be0:	4618      	mov	r0, r3
 8007be2:	e7f4      	b.n	8007bce <SDMMC_CmdVoltageSwitch+0x5a>
}
 8007be4:	bc30      	pop	{r4, r5}
 8007be6:	f7ff ba53 	b.w	8007090 <SDMMC_GetCmdResp1.part.2>
 8007bea:	bf00      	nop
 8007bec:	20000018 	.word	0x20000018
 8007bf0:	10624dd3 	.word	0x10624dd3
 8007bf4:	fffee0c0 	.word	0xfffee0c0
 8007bf8:	00200045 	.word	0x00200045
 8007bfc:	002000c5 	.word	0x002000c5

08007c00 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8007c00:	4b11      	ldr	r3, [pc, #68]	; (8007c48 <FATFS_LinkDriver+0x48>)
 8007c02:	7a5a      	ldrb	r2, [r3, #9]
 8007c04:	b10a      	cbz	r2, 8007c0a <FATFS_LinkDriver+0xa>
  uint8_t ret = 1;
 8007c06:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8007c08:	4770      	bx	lr
{
 8007c0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c0c:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    disk.is_initialized[disk.nbr] = 0;
 8007c10:	f893 e009 	ldrb.w	lr, [r3, #9]
    disk.drv[disk.nbr] = drv;
 8007c14:	7a5e      	ldrb	r6, [r3, #9]
    path[1] = ':';
 8007c16:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
    disk.lun[disk.nbr] = lun;
 8007c1a:	7a5d      	ldrb	r5, [r3, #9]
    path[2] = '/';
 8007c1c:	272f      	movs	r7, #47	; 0x2f
    DiskNum = disk.nbr++;
 8007c1e:	7a5a      	ldrb	r2, [r3, #9]
    disk.drv[disk.nbr] = drv;
 8007c20:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    disk.lun[disk.nbr] = lun;
 8007c24:	441d      	add	r5, r3
    disk.is_initialized[disk.nbr] = 0;
 8007c26:	f803 400e 	strb.w	r4, [r3, lr]
    DiskNum = disk.nbr++;
 8007c2a:	b2d2      	uxtb	r2, r2
    disk.drv[disk.nbr] = drv;
 8007c2c:	6070      	str	r0, [r6, #4]
    disk.lun[disk.nbr] = lun;
 8007c2e:	722c      	strb	r4, [r5, #8]
    DiskNum = disk.nbr++;
 8007c30:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 8007c32:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 8007c34:	b2c0      	uxtb	r0, r0
 8007c36:	7258      	strb	r0, [r3, #9]
    path[3] = 0;
 8007c38:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 8007c3a:	700a      	strb	r2, [r1, #0]
    path[3] = 0;
 8007c3c:	70cc      	strb	r4, [r1, #3]
    path[1] = ':';
 8007c3e:	f881 c001 	strb.w	ip, [r1, #1]
    path[2] = '/';
 8007c42:	708f      	strb	r7, [r1, #2]
}
 8007c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c46:	bf00      	nop
 8007c48:	200001a4 	.word	0x200001a4

08007c4c <MX_ADC1_Init>:
  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8007c4c:	4b78      	ldr	r3, [pc, #480]	; (8007e30 <MX_ADC1_Init+0x1e4>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8007c4e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007c52:	2008      	movs	r0, #8
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.NbrOfConversion = 12;
 8007c54:	220c      	movs	r2, #12
{
 8007c56:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 8007c58:	4c76      	ldr	r4, [pc, #472]	; (8007e34 <MX_ADC1_Init+0x1e8>)
{
 8007c5a:	b08b      	sub	sp, #44	; 0x2c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8007c5c:	6059      	str	r1, [r3, #4]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
  hadc1.Init.OversamplingMode = ENABLE;
  hadc1.Init.Oversampling.Ratio = 2;
 8007c5e:	2102      	movs	r1, #2
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007c60:	6118      	str	r0, [r3, #16]
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8007c62:	2020      	movs	r0, #32
  hadc1.Init.NbrOfDiscConversion = 4;
 8007c64:	2504      	movs	r5, #4
  hadc1.Instance = ADC1;
 8007c66:	601c      	str	r4, [r3, #0]
  hadc1.Init.NbrOfConversion = 12;
 8007c68:	619a      	str	r2, [r3, #24]
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8007c6a:	2403      	movs	r4, #3
  ADC_MultiModeTypeDef multimode = {0};
 8007c6c:	2200      	movs	r2, #0
  hadc1.Init.Oversampling.Ratio = 2;
 8007c6e:	63d9      	str	r1, [r3, #60]	; 0x3c
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007c70:	2101      	movs	r1, #1
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8007c72:	6418      	str	r0, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007c74:	4618      	mov	r0, r3
  hadc1.Init.NbrOfDiscConversion = 4;
 8007c76:	621d      	str	r5, [r3, #32]
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8007c78:	62dc      	str	r4, [r3, #44]	; 0x2c
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8007c7a:	609a      	str	r2, [r3, #8]
  ADC_MultiModeTypeDef multimode = {0};
 8007c7c:	9200      	str	r2, [sp, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 8007c7e:	9203      	str	r2, [sp, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007c80:	751a      	strb	r2, [r3, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007c82:	771a      	strb	r2, [r3, #28]
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8007c84:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007c86:	60d9      	str	r1, [r3, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007c88:	7559      	strb	r1, [r3, #21]
  hadc1.Init.OversamplingMode = ENABLE;
 8007c8a:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8007c8e:	6499      	str	r1, [r3, #72]	; 0x48
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007c90:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8007c94:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
  ADC_MultiModeTypeDef multimode = {0};
 8007c98:	e9cd 2201 	strd	r2, r2, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8007c9c:	e9cd 2204 	strd	r2, r2, [sp, #16]
 8007ca0:	e9cd 2206 	strd	r2, r2, [sp, #24]
 8007ca4:	e9cd 2208 	strd	r2, r2, [sp, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007ca8:	f7f8 ff80 	bl	8000bac <HAL_ADC_Init>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	f040 80bb 	bne.w	8007e28 <MX_ADC1_Init+0x1dc>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007cb2:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007cb4:	4669      	mov	r1, sp
 8007cb6:	485e      	ldr	r0, [pc, #376]	; (8007e30 <MX_ADC1_Init+0x1e4>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007cb8:	9300      	str	r3, [sp, #0]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007cba:	f7f9 f891 	bl	8000de0 <HAL_ADCEx_MultiModeConfigChannel>
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	f040 80af 	bne.w	8007e22 <MX_ADC1_Init+0x1d6>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8007cc4:	495c      	ldr	r1, [pc, #368]	; (8007e38 <MX_ADC1_Init+0x1ec>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007cc6:	2006      	movs	r0, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8007cc8:	2304      	movs	r3, #4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007cca:	f240 74ff 	movw	r4, #2047	; 0x7ff
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 32768;
 8007cce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  sConfig.Channel = ADC_CHANNEL_9;
 8007cd2:	9103      	str	r1, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007cd4:	9004      	str	r0, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007cd6:	a903      	add	r1, sp, #12
 8007cd8:	4855      	ldr	r0, [pc, #340]	; (8007e30 <MX_ADC1_Init+0x1e4>)
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8007cda:	9305      	str	r3, [sp, #20]
  sConfig.Offset = 32768;
 8007cdc:	9208      	str	r2, [sp, #32]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007cde:	e9cd 4306 	strd	r4, r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007ce2:	f7f8 fca3 	bl	800062c <HAL_ADC_ConfigChannel>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	f040 8098 	bne.w	8007e1c <MX_ADC1_Init+0x1d0>
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8007cec:	230c      	movs	r3, #12
  sConfig.Channel = ADC_CHANNEL_5;
 8007cee:	4a53      	ldr	r2, [pc, #332]	; (8007e3c <MX_ADC1_Init+0x1f0>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007cf0:	484f      	ldr	r0, [pc, #316]	; (8007e30 <MX_ADC1_Init+0x1e4>)
 8007cf2:	eb0d 0103 	add.w	r1, sp, r3
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8007cf6:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007cfa:	f7f8 fc97 	bl	800062c <HAL_ADC_ConfigChannel>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	f040 8089 	bne.w	8007e16 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8007d04:	4a4e      	ldr	r2, [pc, #312]	; (8007e40 <MX_ADC1_Init+0x1f4>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8007d06:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007d08:	a903      	add	r1, sp, #12
 8007d0a:	4849      	ldr	r0, [pc, #292]	; (8007e30 <MX_ADC1_Init+0x1e4>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8007d0c:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007d10:	f7f8 fc8c 	bl	800062c <HAL_ADC_ConfigChannel>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	d17b      	bne.n	8007e10 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8007d18:	4a4a      	ldr	r2, [pc, #296]	; (8007e44 <MX_ADC1_Init+0x1f8>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8007d1a:	2318      	movs	r3, #24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007d1c:	a903      	add	r1, sp, #12
 8007d1e:	4844      	ldr	r0, [pc, #272]	; (8007e30 <MX_ADC1_Init+0x1e4>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8007d20:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007d24:	f7f8 fc82 	bl	800062c <HAL_ADC_ConfigChannel>
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	d16e      	bne.n	8007e0a <MX_ADC1_Init+0x1be>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8007d2c:	4c46      	ldr	r4, [pc, #280]	; (8007e48 <MX_ADC1_Init+0x1fc>)
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8007d2e:	f44f 7280 	mov.w	r2, #256	; 0x100
  sConfig.Offset = 0;
 8007d32:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007d34:	a903      	add	r1, sp, #12
 8007d36:	483e      	ldr	r0, [pc, #248]	; (8007e30 <MX_ADC1_Init+0x1e4>)
  sConfig.Offset = 0;
 8007d38:	9308      	str	r3, [sp, #32]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8007d3a:	e9cd 4203 	strd	r4, r2, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007d3e:	f7f8 fc75 	bl	800062c <HAL_ADC_ConfigChannel>
 8007d42:	2800      	cmp	r0, #0
 8007d44:	d15e      	bne.n	8007e04 <MX_ADC1_Init+0x1b8>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8007d46:	4a41      	ldr	r2, [pc, #260]	; (8007e4c <MX_ADC1_Init+0x200>)
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8007d48:	f44f 7383 	mov.w	r3, #262	; 0x106
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007d4c:	a903      	add	r1, sp, #12
 8007d4e:	4838      	ldr	r0, [pc, #224]	; (8007e30 <MX_ADC1_Init+0x1e4>)
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8007d50:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007d54:	f7f8 fc6a 	bl	800062c <HAL_ADC_ConfigChannel>
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d150      	bne.n	8007dfe <MX_ADC1_Init+0x1b2>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8007d5c:	4a3c      	ldr	r2, [pc, #240]	; (8007e50 <MX_ADC1_Init+0x204>)
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8007d5e:	f44f 7386 	mov.w	r3, #268	; 0x10c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007d62:	a903      	add	r1, sp, #12
 8007d64:	4832      	ldr	r0, [pc, #200]	; (8007e30 <MX_ADC1_Init+0x1e4>)
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8007d66:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007d6a:	f7f8 fc5f 	bl	800062c <HAL_ADC_ConfigChannel>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	d142      	bne.n	8007df8 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8007d72:	4a38      	ldr	r2, [pc, #224]	; (8007e54 <MX_ADC1_Init+0x208>)
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8007d74:	f44f 7389 	mov.w	r3, #274	; 0x112
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007d78:	a903      	add	r1, sp, #12
 8007d7a:	482d      	ldr	r0, [pc, #180]	; (8007e30 <MX_ADC1_Init+0x1e4>)
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8007d7c:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007d80:	f7f8 fc54 	bl	800062c <HAL_ADC_ConfigChannel>
 8007d84:	2800      	cmp	r0, #0
 8007d86:	d134      	bne.n	8007df2 <MX_ADC1_Init+0x1a6>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8007d88:	4a33      	ldr	r2, [pc, #204]	; (8007e58 <MX_ADC1_Init+0x20c>)
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8007d8a:	f44f 738c 	mov.w	r3, #280	; 0x118
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007d8e:	a903      	add	r1, sp, #12
 8007d90:	4827      	ldr	r0, [pc, #156]	; (8007e30 <MX_ADC1_Init+0x1e4>)
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8007d92:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007d96:	f7f8 fc49 	bl	800062c <HAL_ADC_ConfigChannel>
 8007d9a:	bb38      	cbnz	r0, 8007dec <MX_ADC1_Init+0x1a0>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8007d9c:	4a2f      	ldr	r2, [pc, #188]	; (8007e5c <MX_ADC1_Init+0x210>)
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8007d9e:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007da2:	a903      	add	r1, sp, #12
 8007da4:	4822      	ldr	r0, [pc, #136]	; (8007e30 <MX_ADC1_Init+0x1e4>)
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8007da6:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007daa:	f7f8 fc3f 	bl	800062c <HAL_ADC_ConfigChannel>
 8007dae:	b9d0      	cbnz	r0, 8007de6 <MX_ADC1_Init+0x19a>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8007db0:	4a2b      	ldr	r2, [pc, #172]	; (8007e60 <MX_ADC1_Init+0x214>)
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8007db2:	f240 2306 	movw	r3, #518	; 0x206
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007db6:	a903      	add	r1, sp, #12
 8007db8:	481d      	ldr	r0, [pc, #116]	; (8007e30 <MX_ADC1_Init+0x1e4>)
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8007dba:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007dbe:	f7f8 fc35 	bl	800062c <HAL_ADC_ConfigChannel>
 8007dc2:	b968      	cbnz	r0, 8007de0 <MX_ADC1_Init+0x194>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8007dc4:	4a27      	ldr	r2, [pc, #156]	; (8007e64 <MX_ADC1_Init+0x218>)
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8007dc6:	f44f 7303 	mov.w	r3, #524	; 0x20c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007dca:	a903      	add	r1, sp, #12
 8007dcc:	4818      	ldr	r0, [pc, #96]	; (8007e30 <MX_ADC1_Init+0x1e4>)
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8007dce:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007dd2:	f7f8 fc2b 	bl	800062c <HAL_ADC_ConfigChannel>
 8007dd6:	b108      	cbz	r0, 8007ddc <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 8007dd8:	f001 fa3e 	bl	8009258 <Error_Handler>
  }

}
 8007ddc:	b00b      	add	sp, #44	; 0x2c
 8007dde:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8007de0:	f001 fa3a 	bl	8009258 <Error_Handler>
 8007de4:	e7ee      	b.n	8007dc4 <MX_ADC1_Init+0x178>
    Error_Handler();
 8007de6:	f001 fa37 	bl	8009258 <Error_Handler>
 8007dea:	e7e1      	b.n	8007db0 <MX_ADC1_Init+0x164>
    Error_Handler();
 8007dec:	f001 fa34 	bl	8009258 <Error_Handler>
 8007df0:	e7d4      	b.n	8007d9c <MX_ADC1_Init+0x150>
    Error_Handler();
 8007df2:	f001 fa31 	bl	8009258 <Error_Handler>
 8007df6:	e7c7      	b.n	8007d88 <MX_ADC1_Init+0x13c>
    Error_Handler();
 8007df8:	f001 fa2e 	bl	8009258 <Error_Handler>
 8007dfc:	e7b9      	b.n	8007d72 <MX_ADC1_Init+0x126>
    Error_Handler();
 8007dfe:	f001 fa2b 	bl	8009258 <Error_Handler>
 8007e02:	e7ab      	b.n	8007d5c <MX_ADC1_Init+0x110>
    Error_Handler();
 8007e04:	f001 fa28 	bl	8009258 <Error_Handler>
 8007e08:	e79d      	b.n	8007d46 <MX_ADC1_Init+0xfa>
    Error_Handler();
 8007e0a:	f001 fa25 	bl	8009258 <Error_Handler>
 8007e0e:	e78d      	b.n	8007d2c <MX_ADC1_Init+0xe0>
    Error_Handler();
 8007e10:	f001 fa22 	bl	8009258 <Error_Handler>
 8007e14:	e780      	b.n	8007d18 <MX_ADC1_Init+0xcc>
    Error_Handler();
 8007e16:	f001 fa1f 	bl	8009258 <Error_Handler>
 8007e1a:	e773      	b.n	8007d04 <MX_ADC1_Init+0xb8>
    Error_Handler();
 8007e1c:	f001 fa1c 	bl	8009258 <Error_Handler>
 8007e20:	e764      	b.n	8007cec <MX_ADC1_Init+0xa0>
    Error_Handler();
 8007e22:	f001 fa19 	bl	8009258 <Error_Handler>
 8007e26:	e74d      	b.n	8007cc4 <MX_ADC1_Init+0x78>
    Error_Handler();
 8007e28:	f001 fa16 	bl	8009258 <Error_Handler>
 8007e2c:	e741      	b.n	8007cb2 <MX_ADC1_Init+0x66>
 8007e2e:	bf00      	nop
 8007e30:	200001cc 	.word	0x200001cc
 8007e34:	40022000 	.word	0x40022000
 8007e38:	25b00200 	.word	0x25b00200
 8007e3c:	14f00020 	.word	0x14f00020
 8007e40:	10c00010 	.word	0x10c00010
 8007e44:	21800100 	.word	0x21800100
 8007e48:	0c900008 	.word	0x0c900008
 8007e4c:	1d500080 	.word	0x1d500080
 8007e50:	3ef08000 	.word	0x3ef08000
 8007e54:	3ac04000 	.word	0x3ac04000
 8007e58:	47520000 	.word	0x47520000
 8007e5c:	43210000 	.word	0x43210000
 8007e60:	4b840000 	.word	0x4b840000
 8007e64:	4fb80000 	.word	0x4fb80000

08007e68 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007e68:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8007e6a:	4b3f      	ldr	r3, [pc, #252]	; (8007f68 <HAL_ADC_MspInit+0x100>)
{
 8007e6c:	b08b      	sub	sp, #44	; 0x2c
  if(adcHandle->Instance==ADC1)
 8007e6e:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e70:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 8007e72:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e74:	9409      	str	r4, [sp, #36]	; 0x24
 8007e76:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8007e7a:	e9cd 4407 	strd	r4, r4, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8007e7e:	d001      	beq.n	8007e84 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8007e80:	b00b      	add	sp, #44	; 0x2c
 8007e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC12_CLK_ENABLE();
 8007e84:	4b39      	ldr	r3, [pc, #228]	; (8007f6c <HAL_ADC_MspInit+0x104>)
 8007e86:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8007e88:	20ff      	movs	r0, #255	; 0xff
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007e8a:	2703      	movs	r7, #3
    __HAL_RCC_ADC12_CLK_ENABLE();
 8007e8c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e90:	a905      	add	r1, sp, #20
    hdma_adc1.Instance = DMA1_Stream0;
 8007e92:	4d37      	ldr	r5, [pc, #220]	; (8007f70 <HAL_ADC_MspInit+0x108>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8007e94:	f042 0220 	orr.w	r2, r2, #32
 8007e98:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8007e9c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8007ea0:	f002 0220 	and.w	r2, r2, #32
 8007ea4:	9201      	str	r2, [sp, #4]
 8007ea6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ea8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007eac:	f042 0201 	orr.w	r2, r2, #1
 8007eb0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007eb4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007eb8:	f002 0201 	and.w	r2, r2, #1
 8007ebc:	9202      	str	r2, [sp, #8]
 8007ebe:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ec0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007ec4:	f042 0204 	orr.w	r2, r2, #4
 8007ec8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007ecc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007ed0:	f002 0204 	and.w	r2, r2, #4
 8007ed4:	9203      	str	r2, [sp, #12]
 8007ed6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ed8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007edc:	f042 0202 	orr.w	r2, r2, #2
 8007ee0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8007ee8:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007eea:	f003 0302 	and.w	r3, r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007eee:	4821      	ldr	r0, [pc, #132]	; (8007f74 <HAL_ADC_MspInit+0x10c>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007ef0:	9706      	str	r7, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ef2:	9304      	str	r3, [sp, #16]
 8007ef4:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ef6:	f7fa fe49 	bl	8002b8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007efa:	2330      	movs	r3, #48	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007efc:	a905      	add	r1, sp, #20
 8007efe:	481e      	ldr	r0, [pc, #120]	; (8007f78 <HAL_ADC_MspInit+0x110>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007f00:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f02:	e9cd 7406 	strd	r7, r4, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f06:	f7fa fe41 	bl	8002b8c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f0a:	a905      	add	r1, sp, #20
 8007f0c:	481b      	ldr	r0, [pc, #108]	; (8007f7c <HAL_ADC_MspInit+0x114>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f0e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007f10:	e9cd 7705 	strd	r7, r7, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f14:	f7fa fe3a 	bl	8002b8c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8007f18:	4b19      	ldr	r3, [pc, #100]	; (8007f80 <HAL_ADC_MspInit+0x118>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007f1a:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8007f1e:	f04f 0e09 	mov.w	lr, #9
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007f22:	62af      	str	r7, [r5, #40]	; 0x28
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007f24:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007f28:	f44f 4780 	mov.w	r7, #16384	; 0x4000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007f2c:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007f30:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_adc1.Instance = DMA1_Stream0;
 8007f34:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007f36:	2304      	movs	r3, #4
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007f38:	6128      	str	r0, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007f3a:	4628      	mov	r0, r5
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8007f3c:	62ec      	str	r4, [r5, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007f3e:	632c      	str	r4, [r5, #48]	; 0x30
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8007f40:	f8c5 e004 	str.w	lr, [r5, #4]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007f44:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007f46:	e9c5 4402 	strd	r4, r4, [r5, #8]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007f4a:	e9c5 c705 	strd	ip, r7, [r5, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007f4e:	e9c5 1207 	strd	r1, r2, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007f52:	f7f9 f8fd 	bl	8001150 <HAL_DMA_Init>
 8007f56:	b918      	cbnz	r0, 8007f60 <HAL_ADC_MspInit+0xf8>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8007f58:	64f5      	str	r5, [r6, #76]	; 0x4c
 8007f5a:	63ae      	str	r6, [r5, #56]	; 0x38
}
 8007f5c:	b00b      	add	sp, #44	; 0x2c
 8007f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8007f60:	f001 f97a 	bl	8009258 <Error_Handler>
 8007f64:	e7f8      	b.n	8007f58 <HAL_ADC_MspInit+0xf0>
 8007f66:	bf00      	nop
 8007f68:	40022000 	.word	0x40022000
 8007f6c:	58024400 	.word	0x58024400
 8007f70:	20000230 	.word	0x20000230
 8007f74:	58020000 	.word	0x58020000
 8007f78:	58020800 	.word	0x58020800
 8007f7c:	58020400 	.word	0x58020400
 8007f80:	40020010 	.word	0x40020010

08007f84 <audioInit>:
float params[8];

void CycleCounterTrackMinAndMax( int whichCount);

void audioInit(I2C_HandleTypeDef* hi2c, SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 8007f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, AUDIO_FRAME_SIZE, smallMemory, SMALL_MEM_SIZE, &randomNumber);
 8007f88:	4b4c      	ldr	r3, [pc, #304]	; (80080bc <audioInit+0x138>)
{
 8007f8a:	4680      	mov	r8, r0
	LEAF_init(&leaf, SAMPLE_RATE, AUDIO_FRAME_SIZE, smallMemory, SMALL_MEM_SIZE, &randomNumber);
 8007f8c:	4d4c      	ldr	r5, [pc, #304]	; (80080c0 <audioInit+0x13c>)
{
 8007f8e:	468a      	mov	sl, r1
	LEAF_init(&leaf, SAMPLE_RATE, AUDIO_FRAME_SIZE, smallMemory, SMALL_MEM_SIZE, &randomNumber);
 8007f90:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 80080c4 <audioInit+0x140>
 8007f94:	2180      	movs	r1, #128	; 0x80
 8007f96:	4628      	mov	r0, r5
{
 8007f98:	4691      	mov	r9, r2
	LEAF_init(&leaf, SAMPLE_RATE, AUDIO_FRAME_SIZE, smallMemory, SMALL_MEM_SIZE, &randomNumber);
 8007f9a:	4a4b      	ldr	r2, [pc, #300]	; (80080c8 <audioInit+0x144>)

	tMempool_init (&mediumPool, mediumMemory, MEDIUM_MEM_SIZE, &leaf);
	tMempool_init (&largePool, largeMemory, LARGE_MEM_SIZE, &leaf);

	HAL_Delay(10);
	leaf.clearOnAllocation = 1;
 8007f9c:	2401      	movs	r4, #1

	tVZFilter_init(&shelf1, Lowshelf, 80.0f * invOsRatio, 6.0f, &leaf);
 8007f9e:	4e4b      	ldr	r6, [pc, #300]	; (80080cc <audioInit+0x148>)
	tVZFilter_init(&lp2, Lowpass, 19000.0f, 0.5f, &leaf);
	tOversampler_init(&os, osRatio, 0, &leaf);

	for(int i = 0; i < NUM_ADC_CHANNELS; i++)
	{
		tExpSmooth_init(&adcSmooth[i], 0.0f, 0.1f, &leaf);
 8007fa0:	462f      	mov	r7, r5
{
 8007fa2:	ed2d 8b02 	vpush	{d8}
 8007fa6:	b082      	sub	sp, #8
		tExpSmooth_init(&adcSmooth[i], 0.0f, 0.1f, &leaf);
 8007fa8:	eddf 8a49 	vldr	s17, [pc, #292]	; 80080d0 <audioInit+0x14c>
 8007fac:	ed9f 8a49 	vldr	s16, [pc, #292]	; 80080d4 <audioInit+0x150>
	LEAF_init(&leaf, SAMPLE_RATE, AUDIO_FRAME_SIZE, smallMemory, SMALL_MEM_SIZE, &randomNumber);
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	f242 7310 	movw	r3, #10000	; 0x2710
 8007fb6:	f002 fddd 	bl	800ab74 <LEAF_init>
	tMempool_init (&mediumPool, mediumMemory, MEDIUM_MEM_SIZE, &leaf);
 8007fba:	462b      	mov	r3, r5
 8007fbc:	4a46      	ldr	r2, [pc, #280]	; (80080d8 <audioInit+0x154>)
 8007fbe:	4947      	ldr	r1, [pc, #284]	; (80080dc <audioInit+0x158>)
 8007fc0:	4847      	ldr	r0, [pc, #284]	; (80080e0 <audioInit+0x15c>)
 8007fc2:	f002 fd59 	bl	800aa78 <tMempool_init>
	tMempool_init (&largePool, largeMemory, LARGE_MEM_SIZE, &leaf);
 8007fc6:	462b      	mov	r3, r5
 8007fc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007fcc:	4945      	ldr	r1, [pc, #276]	; (80080e4 <audioInit+0x160>)
 8007fce:	4846      	ldr	r0, [pc, #280]	; (80080e8 <audioInit+0x164>)
 8007fd0:	f002 fd52 	bl	800aa78 <tMempool_init>
	HAL_Delay(10);
 8007fd4:	200a      	movs	r0, #10
 8007fd6:	f7f8 f9e9 	bl	80003ac <HAL_Delay>
	tVZFilter_init(&shelf1, Lowshelf, 80.0f * invOsRatio, 6.0f, &leaf);
 8007fda:	ed96 0a00 	vldr	s0, [r6]
 8007fde:	eddf 7a43 	vldr	s15, [pc, #268]	; 80080ec <audioInit+0x168>
 8007fe2:	462a      	mov	r2, r5
 8007fe4:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8007fe8:	2106      	movs	r1, #6
 8007fea:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007fee:	4840      	ldr	r0, [pc, #256]	; (80080f0 <audioInit+0x16c>)
	leaf.clearOnAllocation = 1;
 8007ff0:	616c      	str	r4, [r5, #20]
	tVZFilter_init(&shelf1, Lowshelf, 80.0f * invOsRatio, 6.0f, &leaf);
 8007ff2:	f001 fe67 	bl	8009cc4 <tVZFilter_init>
	tVZFilter_init(&shelf2, Highshelf, 12000.0f * invOsRatio, 6.0f, &leaf);
 8007ff6:	ed96 0a00 	vldr	s0, [r6]
 8007ffa:	462a      	mov	r2, r5
 8007ffc:	eddf 7a3d 	vldr	s15, [pc, #244]	; 80080f4 <audioInit+0x170>
 8008000:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8008004:	2107      	movs	r1, #7
 8008006:	483c      	ldr	r0, [pc, #240]	; (80080f8 <audioInit+0x174>)
 8008008:	ee20 0a27 	vmul.f32	s0, s0, s15
 800800c:	f001 fe5a 	bl	8009cc4 <tVZFilter_init>
	tVZFilter_init(&bell1, Bell, 1000.0f * invOsRatio, 1.9f, &leaf);
 8008010:	eddf 7a3a 	vldr	s15, [pc, #232]	; 80080fc <audioInit+0x178>
 8008014:	ed96 0a00 	vldr	s0, [r6]
 8008018:	462a      	mov	r2, r5
 800801a:	eddf 0a39 	vldr	s1, [pc, #228]	; 8008100 <audioInit+0x17c>
 800801e:	2105      	movs	r1, #5
 8008020:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008024:	4837      	ldr	r0, [pc, #220]	; (8008104 <audioInit+0x180>)
 8008026:	f001 fe4d 	bl	8009cc4 <tVZFilter_init>
	tVZFilter_init(&lp1, Lowpass, 19000.0f, 0.5f, &leaf);
 800802a:	4621      	mov	r1, r4
 800802c:	462a      	mov	r2, r5
 800802e:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8008032:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8008108 <audioInit+0x184>
 8008036:	4835      	ldr	r0, [pc, #212]	; (800810c <audioInit+0x188>)
 8008038:	f001 fe44 	bl	8009cc4 <tVZFilter_init>
	tVZFilter_init(&lp2, Lowpass, 19000.0f, 0.5f, &leaf);
 800803c:	4621      	mov	r1, r4
 800803e:	462a      	mov	r2, r5
 8008040:	4833      	ldr	r0, [pc, #204]	; (8008110 <audioInit+0x18c>)
 8008042:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8008046:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8008108 <audioInit+0x184>
 800804a:	f001 fe3b 	bl	8009cc4 <tVZFilter_init>
	tOversampler_init(&os, osRatio, 0, &leaf);
 800804e:	4931      	ldr	r1, [pc, #196]	; (8008114 <audioInit+0x190>)
 8008050:	4c31      	ldr	r4, [pc, #196]	; (8008118 <audioInit+0x194>)
 8008052:	462b      	mov	r3, r5
 8008054:	2200      	movs	r2, #0
 8008056:	4831      	ldr	r0, [pc, #196]	; (800811c <audioInit+0x198>)
 8008058:	6809      	ldr	r1, [r1, #0]
 800805a:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800805e:	f001 fd2d 	bl	8009abc <tOversampler_init>
		tExpSmooth_init(&adcSmooth[i], 0.0f, 0.1f, &leaf);
 8008062:	4620      	mov	r0, r4
 8008064:	3404      	adds	r4, #4
 8008066:	4639      	mov	r1, r7
 8008068:	eef0 0a68 	vmov.f32	s1, s17
 800806c:	eeb0 0a48 	vmov.f32	s0, s16
 8008070:	f001 fdee 	bl	8009c50 <tExpSmooth_init>
	for(int i = 0; i < NUM_ADC_CHANNELS; i++)
 8008074:	42a6      	cmp	r6, r4
 8008076:	d1f4      	bne.n	8008062 <audioInit+0xde>
	}

	leaf.clearOnAllocation = 0;
 8008078:	2100      	movs	r1, #0
 800807a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800807e:	4828      	ldr	r0, [pc, #160]	; (8008120 <audioInit+0x19c>)
 8008080:	6169      	str	r1, [r5, #20]
 8008082:	f002 fe01 	bl	800ac88 <memset>
	{
		audioOutBuffer[i] = 0;
	}


	HAL_Delay(1);
 8008086:	2001      	movs	r0, #1
 8008088:	f7f8 f990 	bl	80003ac <HAL_Delay>

	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 800808c:	4650      	mov	r0, sl
 800808e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008092:	4923      	ldr	r1, [pc, #140]	; (8008120 <audioInit+0x19c>)
 8008094:	f7fd fc4c 	bl	8005930 <HAL_SAI_Transmit_DMA>
 8008098:	4b22      	ldr	r3, [pc, #136]	; (8008124 <audioInit+0x1a0>)
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 800809a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800809e:	4922      	ldr	r1, [pc, #136]	; (8008128 <audioInit+0x1a4>)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 80080a0:	7018      	strb	r0, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 80080a2:	4648      	mov	r0, r9
 80080a4:	f7fd fcd4 	bl	8005a50 <HAL_SAI_Receive_DMA>
 80080a8:	4b20      	ldr	r3, [pc, #128]	; (800812c <audioInit+0x1a8>)
 80080aa:	7018      	strb	r0, [r3, #0]
	// so while we used to set up codec before starting SAI, now we need to set up codec afterwards, and set a flag to make sure it's ready



	//now to send all the necessary messages to the codec
	AudioCodec_init(hi2c);
 80080ac:	4640      	mov	r0, r8

}
 80080ae:	b002      	add	sp, #8
 80080b0:	ecbd 8b02 	vpop	{d8}
 80080b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	AudioCodec_init(hi2c);
 80080b8:	f000 ba7a 	b.w	80085b0 <AudioCodec_init>
 80080bc:	08008f85 	.word	0x08008f85
 80080c0:	200002c8 	.word	0x200002c8
 80080c4:	483b8000 	.word	0x483b8000
 80080c8:	200003b4 	.word	0x200003b4
 80080cc:	20000008 	.word	0x20000008
 80080d0:	3dcccccd 	.word	0x3dcccccd
 80080d4:	00000000 	.word	0x00000000
 80080d8:	0007eb58 	.word	0x0007eb58
 80080dc:	24000000 	.word	0x24000000
 80080e0:	20000350 	.word	0x20000350
 80080e4:	60000000 	.word	0x60000000
 80080e8:	20000338 	.word	0x20000338
 80080ec:	42a00000 	.word	0x42a00000
 80080f0:	20000334 	.word	0x20000334
 80080f4:	463b8000 	.word	0x463b8000
 80080f8:	2000032c 	.word	0x2000032c
 80080fc:	447a0000 	.word	0x447a0000
 8008100:	3ff33333 	.word	0x3ff33333
 8008104:	20000328 	.word	0x20000328
 8008108:	46947000 	.word	0x46947000
 800810c:	20002ac4 	.word	0x20002ac4
 8008110:	20000320 	.word	0x20000320
 8008114:	2000000c 	.word	0x2000000c
 8008118:	20000354 	.word	0x20000354
 800811c:	20000330 	.word	0x20000330
 8008120:	30000000 	.word	0x30000000
 8008124:	20000324 	.word	0x20000324
 8008128:	30000800 	.word	0x30000800
 800812c:	2000034c 	.word	0x2000034c

08008130 <audioTick>:

// CV input jacks 1-4 add to knobs 1-4.


float audioTick(float* samples)
{
 8008130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	//stuff for cycle counting
	volatile uint32_t tempCount5 = 0;
 8008134:	2500      	movs	r5, #0
{
 8008136:	4683      	mov	fp, r0
 8008138:	ed2d 8b02 	vpush	{d8}
 800813c:	b083      	sub	sp, #12
	volatile uint32_t tempCount5 = 0;
 800813e:	9500      	str	r5, [sp, #0]
	volatile uint32_t tempCount6 = 0;
 8008140:	9501      	str	r5, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8008142:	b672      	cpsid	i
	__disable_irq();
	tempCount5 = DWT->CYCCNT;
 8008144:	4b41      	ldr	r3, [pc, #260]	; (800824c <audioTick+0x11c>)

	//start of audio code
	float sample = samples[0];

	sample = tVZFilter_tickEfficient(&lp1, sample);
 8008146:	ed90 0a00 	vldr	s0, [r0]
	tempCount5 = DWT->CYCCNT;
 800814a:	685b      	ldr	r3, [r3, #4]
	sample = tVZFilter_tickEfficient(&lp1, sample);
 800814c:	4840      	ldr	r0, [pc, #256]	; (8008250 <audioTick+0x120>)
	sample = tVZFilter_tickEfficient(&lp2, sample);
    sample = sample * params[0];
 800814e:	4e41      	ldr	r6, [pc, #260]	; (8008254 <audioTick+0x124>)
	tempCount5 = DWT->CYCCNT;
 8008150:	9300      	str	r3, [sp, #0]
	sample = tVZFilter_tickEfficient(&lp1, sample);
 8008152:	f001 ffa7 	bl	800a0a4 <tVZFilter_tickEfficient>
	sample = tVZFilter_tickEfficient(&lp2, sample);
 8008156:	4840      	ldr	r0, [pc, #256]	; (8008258 <audioTick+0x128>)
 8008158:	f001 ffa4 	bl	800a0a4 <tVZFilter_tickEfficient>
    sample = sample * params[0];
 800815c:	edd6 7a00 	vldr	s15, [r6]



    tOversampler_upsample(&os, sample, osArray);

    for (int i = 0; i < osRatio; i++)
 8008160:	4f3e      	ldr	r7, [pc, #248]	; (800825c <audioTick+0x12c>)
    tOversampler_upsample(&os, sample, osArray);
 8008162:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008166:	493e      	ldr	r1, [pc, #248]	; (8008260 <audioTick+0x130>)
 8008168:	483e      	ldr	r0, [pc, #248]	; (8008264 <audioTick+0x134>)
 800816a:	f001 fcf7 	bl	8009b5c <tOversampler_upsample>
    for (int i = 0; i < osRatio; i++)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	42ab      	cmp	r3, r5
 8008172:	dd31      	ble.n	80081d8 <audioTick+0xa8>
 8008174:	4c3a      	ldr	r4, [pc, #232]	; (8008260 <audioTick+0x130>)
 8008176:	f8df a104 	ldr.w	sl, [pc, #260]	; 800827c <audioTick+0x14c>
		else
		{
			osArray[i] = tanhf(osArray[i]);
		}

		osArray[i]= tVZFilter_tickEfficient(&shelf1, osArray[i]); //put it through the low shelf
 800817a:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8008280 <audioTick+0x150>
		osArray[i] = tVZFilter_tickEfficient(&shelf2, osArray[i]); // now put that result through the high shelf
 800817e:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8008284 <audioTick+0x154>
		osArray[i] = tVZFilter_tickEfficient(&bell1, osArray[i]); // now add a bell (or peaking eq) filter

		osArray[i] = tanhf(osArray[i] * 0.9f) * params[4];
 8008182:	ed9f 8a39 	vldr	s16, [pc, #228]	; 8008268 <audioTick+0x138>
		if (distortionMode > 0)
 8008186:	f8da 3000 	ldr.w	r3, [sl]
			osArray[i] = LEAF_shaper(osArray[i], 1.0f);
 800818a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800818e:	ecf4 7a01 	vldmia	r4!, {s15}
		if (distortionMode > 0)
 8008192:	2b00      	cmp	r3, #0
			osArray[i] = tanhf(osArray[i]);
 8008194:	eeb0 0a67 	vmov.f32	s0, s15
		if (distortionMode > 0)
 8008198:	dc41      	bgt.n	800821e <audioTick+0xee>
			osArray[i] = tanhf(osArray[i]);
 800819a:	f002 ffeb 	bl	800b174 <tanhf>
 800819e:	ed04 0a01 	vstr	s0, [r4, #-4]
		osArray[i]= tVZFilter_tickEfficient(&shelf1, osArray[i]); //put it through the low shelf
 80081a2:	4648      	mov	r0, r9
    for (int i = 0; i < osRatio; i++)
 80081a4:	3501      	adds	r5, #1
		osArray[i]= tVZFilter_tickEfficient(&shelf1, osArray[i]); //put it through the low shelf
 80081a6:	f001 ff7d 	bl	800a0a4 <tVZFilter_tickEfficient>
		osArray[i] = tVZFilter_tickEfficient(&shelf2, osArray[i]); // now put that result through the high shelf
 80081aa:	4640      	mov	r0, r8
		osArray[i]= tVZFilter_tickEfficient(&shelf1, osArray[i]); //put it through the low shelf
 80081ac:	ed04 0a01 	vstr	s0, [r4, #-4]
		osArray[i] = tVZFilter_tickEfficient(&shelf2, osArray[i]); // now put that result through the high shelf
 80081b0:	f001 ff78 	bl	800a0a4 <tVZFilter_tickEfficient>
		osArray[i] = tVZFilter_tickEfficient(&bell1, osArray[i]); // now add a bell (or peaking eq) filter
 80081b4:	482d      	ldr	r0, [pc, #180]	; (800826c <audioTick+0x13c>)
		osArray[i] = tVZFilter_tickEfficient(&shelf2, osArray[i]); // now put that result through the high shelf
 80081b6:	ed04 0a01 	vstr	s0, [r4, #-4]
		osArray[i] = tVZFilter_tickEfficient(&bell1, osArray[i]); // now add a bell (or peaking eq) filter
 80081ba:	f001 ff73 	bl	800a0a4 <tVZFilter_tickEfficient>
		osArray[i] = tanhf(osArray[i] * 0.9f) * params[4];
 80081be:	ee20 0a08 	vmul.f32	s0, s0, s16
 80081c2:	f002 ffd7 	bl	800b174 <tanhf>
 80081c6:	edd6 7a04 	vldr	s15, [r6, #16]
    for (int i = 0; i < osRatio; i++)
 80081ca:	683b      	ldr	r3, [r7, #0]
		osArray[i] = tanhf(osArray[i] * 0.9f) * params[4];
 80081cc:	ee27 0a80 	vmul.f32	s0, s15, s0
    for (int i = 0; i < osRatio; i++)
 80081d0:	42ab      	cmp	r3, r5
		osArray[i] = tanhf(osArray[i] * 0.9f) * params[4];
 80081d2:	ed04 0a01 	vstr	s0, [r4, #-4]
    for (int i = 0; i < osRatio; i++)
 80081d6:	dcd6      	bgt.n	8008186 <audioTick+0x56>
		sample = tVZFilter_tickEfficient(&bell1, sample); // now add a bell (or peaking eq) filter

		sample = tanhf(sample * 0.9f) * params[4];
		*/
    }
    sample = tOversampler_downsample(&os, osArray);
 80081d8:	4921      	ldr	r1, [pc, #132]	; (8008260 <audioTick+0x130>)
 80081da:	4822      	ldr	r0, [pc, #136]	; (8008264 <audioTick+0x134>)
 80081dc:	f001 fd08 	bl	8009bf0 <tOversampler_downsample>
   	samples[0] = sample;
   	samples[1] = sample;


   	//cycle counting stuff below. At 192k you have at most 2500 cycles per sample (when running at 480MHz). There is also overhead from the frame processing and function calls, so in reality less than that.
	tempCount6 = DWT->CYCCNT;
 80081e0:	4b1a      	ldr	r3, [pc, #104]	; (800824c <audioTick+0x11c>)
   	samples[0] = sample;
 80081e2:	ed8b 0a00 	vstr	s0, [fp]
   	samples[1] = sample;
 80081e6:	ed8b 0a01 	vstr	s0, [fp, #4]
	tempCount6 = DWT->CYCCNT;
 80081ea:	685a      	ldr	r2, [r3, #4]

	cycleCountVals[0] = tempCount6-tempCount5;
 80081ec:	4b20      	ldr	r3, [pc, #128]	; (8008270 <audioTick+0x140>)
	tempCount6 = DWT->CYCCNT;
 80081ee:	9201      	str	r2, [sp, #4]
	cycleCountVals[0] = tempCount6-tempCount5;
 80081f0:	9a01      	ldr	r2, [sp, #4]
 80081f2:	9900      	ldr	r1, [sp, #0]
 80081f4:	1a52      	subs	r2, r2, r1
 80081f6:	601a      	str	r2, [r3, #0]


//this keeps min and max, but doesn't do the array for averaging - a bit less expensive
void CycleCounterTrackMinAndMax( int whichCount)
{
	if (cycleCountVals[whichCount] > 0)
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	2a00      	cmp	r2, #0
 80081fc:	dc14      	bgt.n	8008228 <audioTick+0xf8>
	if (cycleCountVals[0] > 2500)
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8008204:	429a      	cmp	r2, r3
 8008206:	dd02      	ble.n	800820e <audioTick+0xde>
		setLED_D(255);
 8008208:	20ff      	movs	r0, #255	; 0xff
 800820a:	f001 fb75 	bl	80098f8 <setLED_D>
  __ASM volatile ("cpsie i" : : : "memory");
 800820e:	b662      	cpsie	i
}
 8008210:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8008274 <audioTick+0x144>
 8008214:	b003      	add	sp, #12
 8008216:	ecbd 8b02 	vpop	{d8}
 800821a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			osArray[i] = LEAF_shaper(osArray[i], 1.0f);
 800821e:	f002 fb33 	bl	800a888 <LEAF_shaper>
 8008222:	ed04 0a01 	vstr	s0, [r4, #-4]
 8008226:	e7bc      	b.n	80081a2 <audioTick+0x72>
	{
		if ((cycleCountVals[whichCount] < cycleCountMinMax[whichCount][0]) || (cycleCountMinMax[whichCount][0] == 0))
 8008228:	4a13      	ldr	r2, [pc, #76]	; (8008278 <audioTick+0x148>)
 800822a:	6818      	ldr	r0, [r3, #0]
 800822c:	6811      	ldr	r1, [r2, #0]
 800822e:	4288      	cmp	r0, r1
 8008230:	db08      	blt.n	8008244 <audioTick+0x114>
 8008232:	6811      	ldr	r1, [r2, #0]
 8008234:	b131      	cbz	r1, 8008244 <audioTick+0x114>
		{
			cycleCountMinMax[whichCount][0] = cycleCountVals[whichCount];
		}
		//update max value ([2])
		if (cycleCountVals[whichCount] > cycleCountMinMax[whichCount][1])
 8008236:	6818      	ldr	r0, [r3, #0]
 8008238:	6851      	ldr	r1, [r2, #4]
 800823a:	4288      	cmp	r0, r1
 800823c:	dddf      	ble.n	80081fe <audioTick+0xce>
		{
			cycleCountMinMax[whichCount][1] = cycleCountVals[whichCount];
 800823e:	6819      	ldr	r1, [r3, #0]
 8008240:	6051      	str	r1, [r2, #4]
 8008242:	e7dc      	b.n	80081fe <audioTick+0xce>
			cycleCountMinMax[whichCount][0] = cycleCountVals[whichCount];
 8008244:	6819      	ldr	r1, [r3, #0]
 8008246:	6011      	str	r1, [r2, #0]
 8008248:	e7f5      	b.n	8008236 <audioTick+0x106>
 800824a:	bf00      	nop
 800824c:	e0001000 	.word	0xe0001000
 8008250:	20002ac4 	.word	0x20002ac4
 8008254:	200002a8 	.word	0x200002a8
 8008258:	20000320 	.word	0x20000320
 800825c:	2000000c 	.word	0x2000000c
 8008260:	20000310 	.word	0x20000310
 8008264:	20000330 	.word	0x20000330
 8008268:	3f666666 	.word	0x3f666666
 800826c:	20000328 	.word	0x20000328
 8008270:	2000033c 	.word	0x2000033c
 8008274:	00000000 	.word	0x00000000
 8008278:	20002ac8 	.word	0x20002ac8
 800827c:	200001b4 	.word	0x200001b4
 8008280:	20000334 	.word	0x20000334
 8008284:	2000032c 	.word	0x2000032c

08008288 <audioFrame>:
{
 8008288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800828c:	4c78      	ldr	r4, [pc, #480]	; (8008470 <audioFrame+0x1e8>)
 800828e:	4607      	mov	r7, r0
 8008290:	4e78      	ldr	r6, [pc, #480]	; (8008474 <audioFrame+0x1ec>)
 8008292:	f104 0830 	add.w	r8, r4, #48	; 0x30
	buttonCheck();
 8008296:	4635      	mov	r5, r6
{
 8008298:	ed2d 8b02 	vpush	{d8}
		tExpSmooth_setDest(&adcSmooth[i], (ADC_values[i] * INV_TWO_TO_16));
 800829c:	ed9f 8a76 	vldr	s16, [pc, #472]	; 8008478 <audioFrame+0x1f0>
{
 80082a0:	b083      	sub	sp, #12
	buttonCheck();
 80082a2:	f001 fb37 	bl	8009914 <buttonCheck>
		tExpSmooth_setDest(&adcSmooth[i], (ADC_values[i] * INV_TWO_TO_16));
 80082a6:	ecb4 0a01 	vldmia	r4!, {s0}
 80082aa:	4628      	mov	r0, r5
 80082ac:	3504      	adds	r5, #4
 80082ae:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80082b2:	ee20 0a08 	vmul.f32	s0, s0, s16
 80082b6:	f001 fcf1 	bl	8009c9c <tExpSmooth_setDest>
	for (int i = 0; i < NUM_ADC_CHANNELS; i++)
 80082ba:	4544      	cmp	r4, r8
 80082bc:	d1f3      	bne.n	80082a6 <audioFrame+0x1e>
 80082be:	4d6f      	ldr	r5, [pc, #444]	; (800847c <audioFrame+0x1f4>)
		smoothedADC[i] = 1.0f - tExpSmooth_tick(&adcSmooth[i]);
 80082c0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80082c4:	462c      	mov	r4, r5
 80082c6:	f105 0820 	add.w	r8, r5, #32
 80082ca:	4630      	mov	r0, r6
 80082cc:	3604      	adds	r6, #4
 80082ce:	f001 fce9 	bl	8009ca4 <tExpSmooth_tick>
 80082d2:	ee38 0a40 	vsub.f32	s0, s16, s0
 80082d6:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 8; i++)
 80082da:	4544      	cmp	r4, r8
 80082dc:	d1f5      	bne.n	80082ca <audioFrame+0x42>
		smoothedADC[i] = tExpSmooth_tick(&adcSmooth[i]);
 80082de:	4868      	ldr	r0, [pc, #416]	; (8008480 <audioFrame+0x1f8>)
 80082e0:	f001 fce0 	bl	8009ca4 <tExpSmooth_tick>
 80082e4:	4867      	ldr	r0, [pc, #412]	; (8008484 <audioFrame+0x1fc>)
 80082e6:	ed85 0a08 	vstr	s0, [r5, #32]
 80082ea:	f001 fcdb 	bl	8009ca4 <tExpSmooth_tick>
 80082ee:	4866      	ldr	r0, [pc, #408]	; (8008488 <audioFrame+0x200>)
 80082f0:	ed85 0a09 	vstr	s0, [r5, #36]	; 0x24
 80082f4:	f001 fcd6 	bl	8009ca4 <tExpSmooth_tick>
 80082f8:	4864      	ldr	r0, [pc, #400]	; (800848c <audioFrame+0x204>)
 80082fa:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
 80082fe:	f001 fcd1 	bl	8009ca4 <tExpSmooth_tick>
	params[0] = LEAF_clip(0.0f,(((smoothedADC[0] + smoothedADC[8]) * 20.0f) + 1.0f), 40.0f);
 8008302:	edd5 6a08 	vldr	s13, [r5, #32]
 8008306:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800830a:	edd5 7a00 	vldr	s15, [r5]
 800830e:	eef0 0a48 	vmov.f32	s1, s16
		smoothedADC[i] = tExpSmooth_tick(&adcSmooth[i]);
 8008312:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
	params[0] = LEAF_clip(0.0f,(((smoothedADC[0] + smoothedADC[8]) * 20.0f) + 1.0f), 40.0f);
 8008316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800831a:	ed9f 1a5d 	vldr	s2, [pc, #372]	; 8008490 <audioFrame+0x208>
 800831e:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8008494 <audioFrame+0x20c>
 8008322:	4c5d      	ldr	r4, [pc, #372]	; (8008498 <audioFrame+0x210>)
 8008324:	eee7 0a87 	vfma.f32	s1, s15, s14
 8008328:	f002 faf0 	bl	800a90c <LEAF_clip>
    params[1] = LEAF_clip(-30.0f, ((smoothedADC[1] + smoothedADC[9]) * 30.0f) - 15.0f, 30.0f);
 800832c:	ed95 7a09 	vldr	s14, [r5, #36]	; 0x24
 8008330:	edd5 7a01 	vldr	s15, [r5, #4]
 8008334:	eeb3 1a0e 	vmov.f32	s2, #62	; 0x41f00000  30.0
 8008338:	eefa 0a0e 	vmov.f32	s1, #174	; 0xc1700000 -15.0
	params[0] = LEAF_clip(0.0f,(((smoothedADC[0] + smoothedADC[8]) * 20.0f) + 1.0f), 40.0f);
 800833c:	ed84 0a00 	vstr	s0, [r4]
    params[1] = LEAF_clip(-30.0f, ((smoothedADC[1] + smoothedADC[9]) * 30.0f) - 15.0f, 30.0f);
 8008340:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008344:	eebb 0a0e 	vmov.f32	s0, #190	; 0xc1f00000 -30.0
 8008348:	eee7 0a81 	vfma.f32	s1, s15, s2
 800834c:	f002 fade 	bl	800a90c <LEAF_clip>
    params[2] = LEAF_clip(-34.0f, ((smoothedADC[2] + smoothedADC[10]) * 34.0f) - 17.0f, 34.0f);
 8008350:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8008354:	edd5 7a02 	vldr	s15, [r5, #8]
 8008358:	eefb 0a01 	vmov.f32	s1, #177	; 0xc1880000 -17.0
 800835c:	ed9f 1a4f 	vldr	s2, [pc, #316]	; 800849c <audioFrame+0x214>
 8008360:	ee77 7a87 	vadd.f32	s15, s15, s14
    params[1] = LEAF_clip(-30.0f, ((smoothedADC[1] + smoothedADC[9]) * 30.0f) - 15.0f, 30.0f);
 8008364:	ed84 0a01 	vstr	s0, [r4, #4]
    params[2] = LEAF_clip(-34.0f, ((smoothedADC[2] + smoothedADC[10]) * 34.0f) - 17.0f, 34.0f);
 8008368:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80084a0 <audioFrame+0x218>
 800836c:	eee7 0a81 	vfma.f32	s1, s15, s2
 8008370:	f002 facc 	bl	800a90c <LEAF_clip>
    params[3] = LEAF_clip(10.0f, faster_mtof((smoothedADC[3] + smoothedADC[11]) * 77.0f + 42.0f), 18000.0f);
 8008374:	ed95 7a0b 	vldr	s14, [r5, #44]	; 0x2c
 8008378:	edd5 7a03 	vldr	s15, [r5, #12]
 800837c:	eddf 6a49 	vldr	s13, [pc, #292]	; 80084a4 <audioFrame+0x21c>
 8008380:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008384:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80084a8 <audioFrame+0x220>
    params[2] = LEAF_clip(-34.0f, ((smoothedADC[2] + smoothedADC[10]) * 34.0f) - 17.0f, 34.0f);
 8008388:	ed84 0a02 	vstr	s0, [r4, #8]
    params[3] = LEAF_clip(10.0f, faster_mtof((smoothedADC[3] + smoothedADC[11]) * 77.0f + 42.0f), 18000.0f);
 800838c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8008390:	eeb0 0a47 	vmov.f32	s0, s14
 8008394:	f002 face 	bl	800a934 <faster_mtof>
 8008398:	ed9f 1a44 	vldr	s2, [pc, #272]	; 80084ac <audioFrame+0x224>
 800839c:	eef0 0a40 	vmov.f32	s1, s0
 80083a0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80083a4:	f002 fab2 	bl	800a90c <LEAF_clip>
    tVZFilter_setGain(&shelf1, fastdbtoa(-1.0f * params[1]));
 80083a8:	edd4 7a01 	vldr	s15, [r4, #4]
    params[4] = smoothedADC[4];
 80083ac:	692b      	ldr	r3, [r5, #16]
    params[3] = LEAF_clip(10.0f, faster_mtof((smoothedADC[3] + smoothedADC[11]) * 77.0f + 42.0f), 18000.0f);
 80083ae:	ed84 0a03 	vstr	s0, [r4, #12]
    tVZFilter_setGain(&shelf1, fastdbtoa(-1.0f * params[1]));
 80083b2:	eeb1 0a67 	vneg.f32	s0, s15
    params[4] = smoothedADC[4];
 80083b6:	6123      	str	r3, [r4, #16]
    tVZFilter_setGain(&shelf1, fastdbtoa(-1.0f * params[1]));
 80083b8:	f002 fae0 	bl	800a97c <fastdbtoa>
 80083bc:	483c      	ldr	r0, [pc, #240]	; (80084b0 <audioFrame+0x228>)
 80083be:	f002 f881 	bl	800a4c4 <tVZFilter_setGain>
    tVZFilter_setGain(&shelf2, fastdbtoa(params[1]));
 80083c2:	ed94 0a01 	vldr	s0, [r4, #4]
 80083c6:	f002 fad9 	bl	800a97c <fastdbtoa>
 80083ca:	483a      	ldr	r0, [pc, #232]	; (80084b4 <audioFrame+0x22c>)
 80083cc:	f002 f87a 	bl	800a4c4 <tVZFilter_setGain>
    tVZFilter_setFreq(&bell1, params[3]*invOsRatio);
 80083d0:	4b39      	ldr	r3, [pc, #228]	; (80084b8 <audioFrame+0x230>)
 80083d2:	ed94 0a03 	vldr	s0, [r4, #12]
 80083d6:	edd3 7a00 	vldr	s15, [r3]
 80083da:	4838      	ldr	r0, [pc, #224]	; (80084bc <audioFrame+0x234>)
 80083dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80083e0:	f001 fe92 	bl	800a108 <tVZFilter_setFreq>
    tVZFilter_setGain(&bell1, fastdbtoa(params[2]));
 80083e4:	ed94 0a02 	vldr	s0, [r4, #8]
 80083e8:	f002 fac8 	bl	800a97c <fastdbtoa>
 80083ec:	4833      	ldr	r0, [pc, #204]	; (80084bc <audioFrame+0x234>)
 80083ee:	f002 f869 	bl	800a4c4 <tVZFilter_setGain>
	if (codecReady)
 80083f2:	4b33      	ldr	r3, [pc, #204]	; (80084c0 <audioFrame+0x238>)
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	b3b3      	cbz	r3, 8008466 <audioFrame+0x1de>
 80083f8:	1c7c      	adds	r4, r7, #1
 80083fa:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80084c8 <audioFrame+0x240>
		for (i = 0; i < (HALF_BUFFER_SIZE); i = i + 2)
 80083fe:	2500      	movs	r5, #0
			inputSamples[0] = (audioInBuffer[buffer_offset + i]) * INV_TWO_TO_31;
 8008400:	ed9f 8a30 	vldr	s16, [pc, #192]	; 80084c4 <audioFrame+0x23c>
 8008404:	00a4      	lsls	r4, r4, #2
 8008406:	f508 6900 	add.w	r9, r8, #2048	; 0x800
			inputSamples[1] = (audioInBuffer[buffer_offset + i + 1]) * INV_TWO_TO_31;
 800840a:	f859 3004 	ldr.w	r3, [r9, r4]
 800840e:	19ee      	adds	r6, r5, r7
			audioTick(inputSamples);
 8008410:	4668      	mov	r0, sp
		for (i = 0; i < (HALF_BUFFER_SIZE); i = i + 2)
 8008412:	3502      	adds	r5, #2
			inputSamples[1] = (audioInBuffer[buffer_offset + i + 1]) * INV_TWO_TO_31;
 8008414:	ee07 3a90 	vmov	s15, r3
			inputSamples[0] = (audioInBuffer[buffer_offset + i]) * INV_TWO_TO_31;
 8008418:	f859 3026 	ldr.w	r3, [r9, r6, lsl #2]
			inputSamples[1] = (audioInBuffer[buffer_offset + i + 1]) * INV_TWO_TO_31;
 800841c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
			inputSamples[0] = (audioInBuffer[buffer_offset + i]) * INV_TWO_TO_31;
 8008420:	ee07 3a90 	vmov	s15, r3
 8008424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			inputSamples[1] = (audioInBuffer[buffer_offset + i + 1]) * INV_TWO_TO_31;
 8008428:	ee27 7a08 	vmul.f32	s14, s14, s16
			inputSamples[0] = (audioInBuffer[buffer_offset + i]) * INV_TWO_TO_31;
 800842c:	ee67 7a88 	vmul.f32	s15, s15, s16
			inputSamples[1] = (audioInBuffer[buffer_offset + i + 1]) * INV_TWO_TO_31;
 8008430:	ed8d 7a01 	vstr	s14, [sp, #4]
			inputSamples[0] = (audioInBuffer[buffer_offset + i]) * INV_TWO_TO_31;
 8008434:	edcd 7a00 	vstr	s15, [sp]
			audioTick(inputSamples);
 8008438:	f7ff fe7a 	bl	8008130 <audioTick>
			audioOutBuffer[buffer_offset + i] = (int32_t)(inputSamples[0] * TWO_TO_31);
 800843c:	ed9d 7a00 	vldr	s14, [sp]
		for (i = 0; i < (HALF_BUFFER_SIZE); i = i + 2)
 8008440:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
			audioOutBuffer[buffer_offset + i + 1] = (int32_t)(inputSamples[1] * TWO_TO_31);;
 8008444:	eddd 7a01 	vldr	s15, [sp, #4]
			audioOutBuffer[buffer_offset + i] = (int32_t)(inputSamples[0] * TWO_TO_31);
 8008448:	eebe 7ae0 	vcvt.s32.f32	s14, s14, #31
			audioOutBuffer[buffer_offset + i + 1] = (int32_t)(inputSamples[1] * TWO_TO_31);;
 800844c:	eefe 7ae0 	vcvt.s32.f32	s15, s15, #31
			audioOutBuffer[buffer_offset + i] = (int32_t)(inputSamples[0] * TWO_TO_31);
 8008450:	ee17 3a10 	vmov	r3, s14
 8008454:	f848 3026 	str.w	r3, [r8, r6, lsl #2]
			audioOutBuffer[buffer_offset + i + 1] = (int32_t)(inputSamples[1] * TWO_TO_31);;
 8008458:	ee17 3a90 	vmov	r3, s15
 800845c:	f848 3004 	str.w	r3, [r8, r4]
 8008460:	f104 0408 	add.w	r4, r4, #8
		for (i = 0; i < (HALF_BUFFER_SIZE); i = i + 2)
 8008464:	d1d1      	bne.n	800840a <audioFrame+0x182>
}
 8008466:	b003      	add	sp, #12
 8008468:	ecbd 8b02 	vpop	{d8}
 800846c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008470:	30001000 	.word	0x30001000
 8008474:	20000354 	.word	0x20000354
 8008478:	377ffff6 	.word	0x377ffff6
 800847c:	20000384 	.word	0x20000384
 8008480:	20000374 	.word	0x20000374
 8008484:	20000378 	.word	0x20000378
 8008488:	2000037c 	.word	0x2000037c
 800848c:	20000380 	.word	0x20000380
 8008490:	42200000 	.word	0x42200000
 8008494:	00000000 	.word	0x00000000
 8008498:	200002a8 	.word	0x200002a8
 800849c:	42080000 	.word	0x42080000
 80084a0:	c2080000 	.word	0xc2080000
 80084a4:	429a0000 	.word	0x429a0000
 80084a8:	42280000 	.word	0x42280000
 80084ac:	468ca000 	.word	0x468ca000
 80084b0:	20000334 	.word	0x20000334
 80084b4:	2000032c 	.word	0x2000032c
 80084b8:	20000008 	.word	0x20000008
 80084bc:	20000328 	.word	0x20000328
 80084c0:	200001b0 	.word	0x200001b0
 80084c4:	2ffffff6 	.word	0x2ffffff6
 80084c8:	30000000 	.word	0x30000000

080084cc <HAL_SAI_ErrorCallback>:


void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
	;
}
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop

080084d0 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
	audioFrame(HALF_BUFFER_SIZE);
 80084d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80084d4:	f7ff bed8 	b.w	8008288 <audioFrame>

080084d8 <HAL_SAI_RxHalfCpltCallback>:
}

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
	audioFrame(0);
 80084d8:	2000      	movs	r0, #0
 80084da:	f7ff bed5 	b.w	8008288 <audioFrame>
 80084de:	bf00      	nop

080084e0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80084e0:	b500      	push	{lr}
 80084e2:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	4613      	mov	r3, r2
 80084e8:	460a      	mov	r2, r1
 80084ea:	4601      	mov	r1, r0
 80084ec:	4804      	ldr	r0, [pc, #16]	; (8008500 <BSP_SD_ReadBlocks+0x20>)
 80084ee:	f7fd fd37 	bl	8005f60 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;  
}
 80084f2:	3000      	adds	r0, #0
 80084f4:	bf18      	it	ne
 80084f6:	2001      	movne	r0, #1
 80084f8:	b003      	add	sp, #12
 80084fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80084fe:	bf00      	nop
 8008500:	2000fdb4 	.word	0x2000fdb4

08008504 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008504:	b500      	push	{lr}
 8008506:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	4613      	mov	r3, r2
 800850c:	460a      	mov	r2, r1
 800850e:	4601      	mov	r1, r0
 8008510:	4804      	ldr	r0, [pc, #16]	; (8008524 <BSP_SD_WriteBlocks+0x20>)
 8008512:	f7fd fe27 	bl	8006164 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;  
}
 8008516:	3000      	adds	r0, #0
 8008518:	bf18      	it	ne
 800851a:	2001      	movne	r0, #1
 800851c:	b003      	add	sp, #12
 800851e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008522:	bf00      	nop
 8008524:	2000fdb4 	.word	0x2000fdb4

08008528 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008528:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800852a:	4803      	ldr	r0, [pc, #12]	; (8008538 <BSP_SD_GetCardState+0x10>)
 800852c:	f7fe fb4c 	bl	8006bc8 <HAL_SD_GetCardState>
}
 8008530:	3804      	subs	r0, #4
 8008532:	bf18      	it	ne
 8008534:	2001      	movne	r0, #1
 8008536:	bd08      	pop	{r3, pc}
 8008538:	2000fdb4 	.word	0x2000fdb4

0800853c <BSP_SD_GetCardInfo>:
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800853c:	4601      	mov	r1, r0
 800853e:	4801      	ldr	r0, [pc, #4]	; (8008544 <BSP_SD_GetCardInfo+0x8>)
 8008540:	f7fe ba26 	b.w	8006990 <HAL_SD_GetCardInfo>
 8008544:	2000fdb4 	.word	0x2000fdb4

08008548 <BSP_SD_WriteCpltCallback>:
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop

0800854c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800854c:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800854e:	f7ff fffb 	bl	8008548 <BSP_SD_WriteCpltCallback>
}
 8008552:	bd08      	pop	{r3, pc}

08008554 <BSP_SD_ReadCpltCallback>:
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop

08008558 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008558:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800855a:	f7ff fffb 	bl	8008554 <BSP_SD_ReadCpltCallback>
}
 800855e:	bd08      	pop	{r3, pc}

08008560 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008560:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
 8008562:	2301      	movs	r3, #1
{
 8008564:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8008566:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800856a:	f000 f8eb 	bl	8008744 <BSP_PlatformIsDetected>
 800856e:	b908      	cbnz	r0, 8008574 <BSP_SD_IsDetected+0x14>
  {
    status = SD_NOT_PRESENT;
 8008570:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 8008574:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8008578:	b003      	add	sp, #12
 800857a:	f85d fb04 	ldr.w	pc, [sp], #4
 800857e:	bf00      	nop

08008580 <BSP_SD_Init>:
{
 8008580:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008582:	f7ff ffed 	bl	8008560 <BSP_SD_IsDetected>
 8008586:	2801      	cmp	r0, #1
 8008588:	d001      	beq.n	800858e <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 800858a:	2002      	movs	r0, #2
}
 800858c:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 800858e:	4807      	ldr	r0, [pc, #28]	; (80085ac <BSP_SD_Init+0x2c>)
 8008590:	f7fe fab4 	bl	8006afc <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8008594:	2800      	cmp	r0, #0
 8008596:	d1f9      	bne.n	800858c <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8008598:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800859c:	4803      	ldr	r0, [pc, #12]	; (80085ac <BSP_SD_Init+0x2c>)
 800859e:	f7fe fa0b 	bl	80069b8 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 80085a2:	3000      	adds	r0, #0
 80085a4:	bf18      	it	ne
 80085a6:	2001      	movne	r0, #1
}
 80085a8:	bd08      	pop	{r3, pc}
 80085aa:	bf00      	nop
 80085ac:	2000fdb4 	.word	0x2000fdb4

080085b0 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 80085b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80085b4:	2201      	movs	r2, #1
void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 80085b6:	b082      	sub	sp, #8
 80085b8:	4605      	mov	r5, r0

	HAL_Delay(2);
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
	myI2cData[1] = 0x03;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80085ba:	4e40      	ldr	r6, [pc, #256]	; (80086bc <AudioCodec_init+0x10c>)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80085bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80085c0:	483f      	ldr	r0, [pc, #252]	; (80086c0 <AudioCodec_init+0x110>)
 80085c2:	f7fa fc0d 	bl	8002de0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80085c6:	2002      	movs	r0, #2
	myI2cData[0] = 0x07;
 80085c8:	4c3e      	ldr	r4, [pc, #248]	; (80086c4 <AudioCodec_init+0x114>)
	HAL_Delay(2);
 80085ca:	f7f7 feef 	bl	80003ac <HAL_Delay>
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80085ce:	4f3e      	ldr	r7, [pc, #248]	; (80086c8 <AudioCodec_init+0x118>)
	myI2cData[0] = 0x07;
 80085d0:	f240 3c07 	movw	ip, #775	; 0x307
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80085d4:	6831      	ldr	r1, [r6, #0]
 80085d6:	4622      	mov	r2, r4
 80085d8:	883b      	ldrh	r3, [r7, #0]
 80085da:	4628      	mov	r0, r5
 80085dc:	9100      	str	r1, [sp, #0]
 80085de:	2120      	movs	r1, #32
 80085e0:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 80086d0 <AudioCodec_init+0x120>
	myI2cData[0] = 0x07;
 80085e4:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80085e8:	f7fa fe7e 	bl	80032e8 <HAL_I2C_Master_Transmit>

	myI2cData[0] = 0x01;
	myI2cData[1] = 0xe1; //0x41 for 48k, 0x81 for 96k, 0xe1 for 192k
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80085ec:	6831      	ldr	r1, [r6, #0]
	myI2cData[0] = 0x01;
 80085ee:	f24e 1c01 	movw	ip, #57601	; 0xe101
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80085f2:	883b      	ldrh	r3, [r7, #0]
 80085f4:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80085f6:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80085fa:	4628      	mov	r0, r5
 80085fc:	9100      	str	r1, [sp, #0]
 80085fe:	2120      	movs	r1, #32
	myI2cData[0] = 0x01;
 8008600:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8008604:	f7fa fe70 	bl	80032e8 <HAL_I2C_Master_Transmit>

	myI2cData[0] = 0x02;
	myI2cData[1] = 0x00;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8008608:	6832      	ldr	r2, [r6, #0]
	myI2cData[0] = 0x02;
 800860a:	f04f 0c02 	mov.w	ip, #2
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800860e:	883b      	ldrh	r3, [r7, #0]
 8008610:	2120      	movs	r1, #32
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8008612:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8008616:	4628      	mov	r0, r5
 8008618:	9200      	str	r2, [sp, #0]
 800861a:	4622      	mov	r2, r4
	myI2cData[0] = 0x02;
 800861c:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8008620:	f7fa fe62 	bl	80032e8 <HAL_I2C_Master_Transmit>

	myI2cData[0] = 0x03;
	myI2cData[1] = 0x79;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8008624:	6831      	ldr	r1, [r6, #0]
	myI2cData[0] = 0x03;
 8008626:	f647 1c03 	movw	ip, #30979	; 0x7903
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800862a:	883b      	ldrh	r3, [r7, #0]
 800862c:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800862e:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8008632:	4628      	mov	r0, r5
 8008634:	9100      	str	r1, [sp, #0]
 8008636:	2120      	movs	r1, #32
	myI2cData[0] = 0x03;
 8008638:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800863c:	f7fa fe54 	bl	80032e8 <HAL_I2C_Master_Transmit>

	myI2cData[0] = 0x04;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8008640:	6832      	ldr	r2, [r6, #0]
	myI2cData[0] = 0x04;
 8008642:	f44f 7c82 	mov.w	ip, #260	; 0x104
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8008646:	883b      	ldrh	r3, [r7, #0]
 8008648:	2120      	movs	r1, #32
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800864a:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800864e:	4628      	mov	r0, r5
 8008650:	9200      	str	r2, [sp, #0]
 8008652:	4622      	mov	r2, r4
	myI2cData[0] = 0x04;
 8008654:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8008658:	f7fa fe46 	bl	80032e8 <HAL_I2C_Master_Transmit>

	myI2cData[0] = 0x05;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800865c:	6831      	ldr	r1, [r6, #0]
	myI2cData[0] = 0x05;
 800865e:	f240 1c05 	movw	ip, #261	; 0x105
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8008662:	883b      	ldrh	r3, [r7, #0]
 8008664:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8008666:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800866a:	4628      	mov	r0, r5
 800866c:	9100      	str	r1, [sp, #0]
 800866e:	2120      	movs	r1, #32
	myI2cData[0] = 0x05;
 8008670:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8008674:	f7fa fe38 	bl	80032e8 <HAL_I2C_Master_Transmit>

	myI2cData[0] = 0x06;
	myI2cData[1] = 0x10;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8008678:	6832      	ldr	r2, [r6, #0]
	myI2cData[0] = 0x06;
 800867a:	f241 0c06 	movw	ip, #4102	; 0x1006
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800867e:	883b      	ldrh	r3, [r7, #0]
 8008680:	2120      	movs	r1, #32
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8008682:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8008686:	4628      	mov	r0, r5
 8008688:	9200      	str	r2, [sp, #0]
 800868a:	4622      	mov	r2, r4
	myI2cData[0] = 0x06;
 800868c:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8008690:	f7fa fe2a 	bl	80032e8 <HAL_I2C_Master_Transmit>

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
	myI2cData[1] = 0x02;
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8008694:	6831      	ldr	r1, [r6, #0]
 8008696:	4622      	mov	r2, r4
 8008698:	883b      	ldrh	r3, [r7, #0]
	myI2cData[0] = 0x07;
 800869a:	f240 2707 	movw	r7, #519	; 0x207
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800869e:	f888 0000 	strb.w	r0, [r8]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80086a2:	4628      	mov	r0, r5
 80086a4:	9100      	str	r1, [sp, #0]
 80086a6:	2120      	movs	r1, #32
	myI2cData[0] = 0x07;
 80086a8:	8027      	strh	r7, [r4, #0]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80086aa:	f7fa fe1d 	bl	80032e8 <HAL_I2C_Master_Transmit>


	codecReady = 1;
 80086ae:	4b07      	ldr	r3, [pc, #28]	; (80086cc <AudioCodec_init+0x11c>)
 80086b0:	2201      	movs	r2, #1
 80086b2:	701a      	strb	r2, [r3, #0]
}
 80086b4:	b002      	add	sp, #8
 80086b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086ba:	bf00      	nop
 80086bc:	20000010 	.word	0x20000010
 80086c0:	58020800 	.word	0x58020800
 80086c4:	200001b8 	.word	0x200001b8
 80086c8:	20000014 	.word	0x20000014
 80086cc:	200001b0 	.word	0x200001b0
 80086d0:	20002ae8 	.word	0x20002ae8

080086d4 <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80086d4:	4b13      	ldr	r3, [pc, #76]	; (8008724 <MX_DMA_Init+0x50>)

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 80086d6:	2101      	movs	r1, #1
 80086d8:	2200      	movs	r2, #0
 80086da:	200b      	movs	r0, #11
{
 80086dc:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80086de:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 80086e2:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 80086e4:	430c      	orrs	r4, r1
 80086e6:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 80086ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80086ee:	400b      	ands	r3, r1
 80086f0:	9301      	str	r3, [sp, #4]
 80086f2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 80086f4:	f7f8 fc08 	bl	8000f08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80086f8:	200b      	movs	r0, #11
 80086fa:	f7f8 fc3b 	bl	8000f74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 80086fe:	2200      	movs	r2, #0
 8008700:	2102      	movs	r1, #2
 8008702:	200c      	movs	r0, #12
 8008704:	f7f8 fc00 	bl	8000f08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8008708:	200c      	movs	r0, #12
 800870a:	f7f8 fc33 	bl	8000f74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 3, 0);
 800870e:	2200      	movs	r2, #0
 8008710:	2103      	movs	r1, #3
 8008712:	200d      	movs	r0, #13
 8008714:	f7f8 fbf8 	bl	8000f08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8008718:	200d      	movs	r0, #13

}
 800871a:	b002      	add	sp, #8
 800871c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8008720:	f7f8 bc28 	b.w	8000f74 <HAL_NVIC_EnableIRQ>
 8008724:	58024400 	.word	0x58024400

08008728 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8008728:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800872a:	4903      	ldr	r1, [pc, #12]	; (8008738 <MX_FATFS_Init+0x10>)
 800872c:	4803      	ldr	r0, [pc, #12]	; (800873c <MX_FATFS_Init+0x14>)
 800872e:	f7ff fa67 	bl	8007c00 <FATFS_LinkDriver>
 8008732:	4b03      	ldr	r3, [pc, #12]	; (8008740 <MX_FATFS_Init+0x18>)
 8008734:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8008736:	bd08      	pop	{r3, pc}
 8008738:	20002af0 	.word	0x20002af0
 800873c:	0800c170 	.word	0x0800c170
 8008740:	20002aec 	.word	0x20002aec

08008744 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008744:	b510      	push	{r4, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008746:	4c08      	ldr	r4, [pc, #32]	; (8008768 <BSP_PlatformIsDetected+0x24>)
 8008748:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800874c:	4620      	mov	r0, r4
 800874e:	f7fa fb41 	bl	8002dd4 <HAL_GPIO_ReadPin>
        status = SD_NOT_PRESENT;
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    status = SD_PRESENT;
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 8008752:	4620      	mov	r0, r4
 8008754:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008758:	f7fa fb3c 	bl	8002dd4 <HAL_GPIO_ReadPin>
    {
        status = SD_NOT_PRESENT;
    }
    /* USER CODE END 1 */ 
    return status;
}  
 800875c:	f1a0 0001 	sub.w	r0, r0, #1
 8008760:	fab0 f080 	clz	r0, r0
 8008764:	0940      	lsrs	r0, r0, #5
 8008766:	bd10      	pop	{r4, pc}
 8008768:	58020800 	.word	0x58020800

0800876c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800876c:	b570      	push	{r4, r5, r6, lr}
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800876e:	4b16      	ldr	r3, [pc, #88]	; (80087c8 <MX_FMC_Init+0x5c>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8008770:	2001      	movs	r0, #1
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8008772:	4d16      	ldr	r5, [pc, #88]	; (80087cc <MX_FMC_Init+0x60>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8008774:	2108      	movs	r1, #8
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8008776:	2410      	movs	r4, #16
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8008778:	2240      	movs	r2, #64	; 0x40
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800877a:	601d      	str	r5, [r3, #0]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800877c:	f44f 7580 	mov.w	r5, #256	; 0x100
{
 8008780:	b088      	sub	sp, #32
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
  SdramTiming.ExitSelfRefreshDelay = 6;
  SdramTiming.SelfRefreshTime = 4;
 8008782:	2604      	movs	r6, #4
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8008784:	6098      	str	r0, [r3, #8]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8008786:	f44f 6040 	mov.w	r0, #3072	; 0xc00
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800878a:	60d9      	str	r1, [r3, #12]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800878c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8008790:	611c      	str	r4, [r3, #16]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8008792:	2400      	movs	r4, #0
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8008794:	615a      	str	r2, [r3, #20]
  SdramTiming.LoadToActiveDelay = 2;
 8008796:	2202      	movs	r2, #2
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8008798:	619d      	str	r5, [r3, #24]
  SdramTiming.ExitSelfRefreshDelay = 6;
 800879a:	2506      	movs	r5, #6
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 800879c:	6218      	str	r0, [r3, #32]
  SdramTiming.RowCycleDelay = 6;
  SdramTiming.WriteRecoveryTime = 2;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800879e:	4618      	mov	r0, r3
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80087a0:	6259      	str	r1, [r3, #36]	; 0x24
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80087a2:	eb0d 0106 	add.w	r1, sp, r6
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80087a6:	605c      	str	r4, [r3, #4]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80087a8:	61dc      	str	r4, [r3, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80087aa:	629c      	str	r4, [r3, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 80087ac:	9201      	str	r2, [sp, #4]
  SdramTiming.RCDDelay = 2;
 80087ae:	9207      	str	r2, [sp, #28]
  SdramTiming.ExitSelfRefreshDelay = 6;
 80087b0:	9502      	str	r5, [sp, #8]
  SdramTiming.RPDelay = 2;
 80087b2:	e9cd 2205 	strd	r2, r2, [sp, #20]
  SdramTiming.SelfRefreshTime = 4;
 80087b6:	e9cd 6503 	strd	r6, r5, [sp, #12]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80087ba:	f7fe fb67 	bl	8006e8c <HAL_SDRAM_Init>
 80087be:	b108      	cbz	r0, 80087c4 <MX_FMC_Init+0x58>
  {
    Error_Handler( );
 80087c0:	f000 fd4a 	bl	8009258 <Error_Handler>
  }

}
 80087c4:	b008      	add	sp, #32
 80087c6:	bd70      	pop	{r4, r5, r6, pc}
 80087c8:	20002f58 	.word	0x20002f58
 80087cc:	52004140 	.word	0x52004140

080087d0 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 80087d0:	4a2a      	ldr	r2, [pc, #168]	; (800887c <HAL_SDRAM_MspInit+0xac>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087d2:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80087d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087d6:	b087      	sub	sp, #28
  if (FMC_Initialized) {
 80087d8:	6814      	ldr	r4, [r2, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087da:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80087de:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80087e2:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 80087e4:	b10c      	cbz	r4, 80087ea <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80087e6:	b007      	add	sp, #28
 80087e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_RCC_FMC_CLK_ENABLE();
 80087ea:	4b25      	ldr	r3, [pc, #148]	; (8008880 <HAL_SDRAM_MspInit+0xb0>)
  FMC_Initialized = 1;
 80087ec:	2101      	movs	r1, #1
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80087ee:	f64f 003f 	movw	r0, #63551	; 0xf83f
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087f2:	2702      	movs	r7, #2
  FMC_Initialized = 1;
 80087f4:	6011      	str	r1, [r2, #0]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087f6:	2603      	movs	r6, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 80087f8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80087fc:	250c      	movs	r5, #12
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80087fe:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8008800:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008804:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8008808:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800880c:	9001      	str	r0, [sp, #4]
  __HAL_RCC_FMC_CLK_ENABLE();
 800880e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008812:	481c      	ldr	r0, [pc, #112]	; (8008884 <HAL_SDRAM_MspInit+0xb4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008814:	9702      	str	r7, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 8008816:	9300      	str	r3, [sp, #0]
 8008818:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800881a:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800881e:	f7fa f9b5 	bl	8002b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8008822:	230d      	movs	r3, #13
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008824:	a901      	add	r1, sp, #4
 8008826:	4818      	ldr	r0, [pc, #96]	; (8008888 <HAL_SDRAM_MspInit+0xb8>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8008828:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800882a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800882c:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800882e:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008832:	f7fa f9ab 	bl	8002b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 8008836:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800883a:	a901      	add	r1, sp, #4
 800883c:	4813      	ldr	r0, [pc, #76]	; (800888c <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 800883e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008840:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008842:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008844:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008848:	f7fa f9a0 	bl	8002b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800884c:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008850:	a901      	add	r1, sp, #4
 8008852:	480f      	ldr	r0, [pc, #60]	; (8008890 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8008854:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008856:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008858:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800885a:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800885e:	f7fa f995 	bl	8002b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8008862:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008866:	a901      	add	r1, sp, #4
 8008868:	480a      	ldr	r0, [pc, #40]	; (8008894 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800886a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800886c:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 800886e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008870:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008874:	f7fa f98a 	bl	8002b8c <HAL_GPIO_Init>
}
 8008878:	b007      	add	sp, #28
 800887a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800887c:	200001bc 	.word	0x200001bc
 8008880:	58024400 	.word	0x58024400
 8008884:	58021400 	.word	0x58021400
 8008888:	58020800 	.word	0x58020800
 800888c:	58021800 	.word	0x58021800
 8008890:	58021000 	.word	0x58021000
 8008894:	58020c00 	.word	0x58020c00

08008898 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8008898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800889c:	4b6c      	ldr	r3, [pc, #432]	; (8008a50 <MX_GPIO_Init+0x1b8>)
{
 800889e:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088a0:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80088a2:	2701      	movs	r7, #1
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80088a4:	f04f 0a02 	mov.w	sl, #2
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80088a8:	4e6a      	ldr	r6, [pc, #424]	; (8008a54 <MX_GPIO_Init+0x1bc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088aa:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80088ac:	4622      	mov	r2, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088ae:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80088b0:	f44f 5800 	mov.w	r8, #8192	; 0x2000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088b4:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80088b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088ba:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PC15 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80088bc:	2503      	movs	r5, #3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088be:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80088c0:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80088c4:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8008a64 <MX_GPIO_Init+0x1cc>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80088c8:	f040 0010 	orr.w	r0, r0, #16
 80088cc:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 80088d0:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 80088d4:	f000 0010 	and.w	r0, r0, #16
 80088d8:	9001      	str	r0, [sp, #4]
 80088da:	9801      	ldr	r0, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80088dc:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 80088e0:	f040 0004 	orr.w	r0, r0, #4
 80088e4:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 80088e8:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 80088ec:	f000 0004 	and.w	r0, r0, #4
 80088f0:	9002      	str	r0, [sp, #8]
 80088f2:	9802      	ldr	r0, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80088f4:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 80088f8:	f040 0020 	orr.w	r0, r0, #32
 80088fc:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8008900:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8008904:	f000 0020 	and.w	r0, r0, #32
 8008908:	9003      	str	r0, [sp, #12]
 800890a:	9803      	ldr	r0, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800890c:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8008910:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8008914:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8008918:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 800891c:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8008920:	9004      	str	r0, [sp, #16]
 8008922:	9804      	ldr	r0, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008924:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8008928:	4338      	orrs	r0, r7
 800892a:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 800892e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8008932:	4038      	ands	r0, r7
 8008934:	9005      	str	r0, [sp, #20]
 8008936:	9805      	ldr	r0, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008938:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 800893c:	ea40 000a 	orr.w	r0, r0, sl
 8008940:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8008944:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8008948:	ea00 000a 	and.w	r0, r0, sl
 800894c:	9006      	str	r0, [sp, #24]
 800894e:	9806      	ldr	r0, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008950:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8008954:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8008958:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 800895c:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8008960:	f000 0040 	and.w	r0, r0, #64	; 0x40
 8008964:	9007      	str	r0, [sp, #28]
 8008966:	9807      	ldr	r0, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008968:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 800896c:	f040 0008 	orr.w	r0, r0, #8
 8008970:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8008974:	4630      	mov	r0, r6
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800897a:	f003 0308 	and.w	r3, r3, #8
 800897e:	9308      	str	r3, [sp, #32]
 8008980:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8008982:	f7fa fa2d 	bl	8002de0 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008986:	a909      	add	r1, sp, #36	; 0x24
 8008988:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800898a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800898e:	e9cd 8409 	strd	r8, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008992:	f7fa f8fb 	bl	8002b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8008996:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800899a:	a909      	add	r1, sp, #36	; 0x24
 800899c:	4630      	mov	r0, r6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800899e:	e9cd a40b 	strd	sl, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80089a2:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80089a6:	f7fa f8f1 	bl	8002b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 80089aa:	f248 0302 	movw	r3, #32770	; 0x8002
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80089ae:	a909      	add	r1, sp, #36	; 0x24
 80089b0:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089b2:	940b      	str	r4, [sp, #44]	; 0x2c
                           PG12 PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80089b4:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8008a68 <MX_GPIO_Init+0x1d0>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80089b8:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80089bc:	f7fa f8e6 	bl	8002b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 80089c0:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80089c4:	a909      	add	r1, sp, #36	; 0x24
 80089c6:	4824      	ldr	r0, [pc, #144]	; (8008a58 <MX_GPIO_Init+0x1c0>)
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 80089c8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089ca:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80089ce:	f7fa f8dd 	bl	8002b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 80089d2:	f24f 33f4 	movw	r3, #62452	; 0xf3f4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80089d6:	a909      	add	r1, sp, #36	; 0x24
 80089d8:	4820      	ldr	r0, [pc, #128]	; (8008a5c <MX_GPIO_Init+0x1c4>)
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 80089da:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089dc:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80089e0:	f7fa f8d4 	bl	8002b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_4 
 80089e4:	f641 03f8 	movw	r3, #6392	; 0x18f8
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80089e8:	a909      	add	r1, sp, #36	; 0x24
 80089ea:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_4 
 80089ec:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089ee:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80089f2:	f7fa f8cb 	bl	8002b8c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80089f6:	4648      	mov	r0, r9
 80089f8:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80089fa:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80089fc:	e9cd 8409 	strd	r8, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008a00:	f7fa f8c4 	bl	8002b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8008a04:	f647 6308 	movw	r3, #32264	; 0x7e08
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008a08:	a909      	add	r1, sp, #36	; 0x24
 8008a0a:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8008a0c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a0e:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008a12:	f7fa f8bb 	bl	8002b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008a16:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008a18:	4650      	mov	r0, sl
 8008a1a:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008a1c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008a1e:	e9cd 470a 	strd	r4, r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008a22:	f7fa f8b3 	bl	8002b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008a26:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008a28:	4630      	mov	r0, r6
 8008a2a:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008a2c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008a2e:	e9cd 470a 	strd	r4, r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008a32:	f7fa f8ab 	bl	8002b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8008a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a3a:	a909      	add	r1, sp, #36	; 0x24
 8008a3c:	4808      	ldr	r0, [pc, #32]	; (8008a60 <MX_GPIO_Init+0x1c8>)
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8008a3e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a40:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a44:	f7fa f8a2 	bl	8002b8c <HAL_GPIO_Init>

}
 8008a48:	b00e      	add	sp, #56	; 0x38
 8008a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a4e:	bf00      	nop
 8008a50:	58024400 	.word	0x58024400
 8008a54:	58020800 	.word	0x58020800
 8008a58:	58021400 	.word	0x58021400
 8008a5c:	58020400 	.word	0x58020400
 8008a60:	58020000 	.word	0x58020000
 8008a64:	58020c00 	.word	0x58020c00
 8008a68:	58021800 	.word	0x58021800

08008a6c <MX_HRTIM_Init>:

HRTIM_HandleTypeDef hhrtim;

/* HRTIM init function */
void MX_HRTIM_Init(void)
{
 8008a6c:	b530      	push	{r4, r5, lr}
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
  HRTIM_SimplePWMChannelCfgTypeDef pSimplePWMChannelCfg = {0};

  hhrtim.Instance = HRTIM1;
 8008a6e:	4c62      	ldr	r4, [pc, #392]	; (8008bf8 <MX_HRTIM_Init+0x18c>)
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8008a70:	2300      	movs	r3, #0
{
 8008a72:	b08f      	sub	sp, #60	; 0x3c
  hhrtim.Instance = HRTIM1;
 8008a74:	4a61      	ldr	r2, [pc, #388]	; (8008bfc <MX_HRTIM_Init+0x190>)
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8008a76:	4620      	mov	r0, r4
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8008a78:	60a3      	str	r3, [r4, #8]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8008a7a:	9305      	str	r3, [sp, #20]
  HRTIM_SimplePWMChannelCfgTypeDef pSimplePWMChannelCfg = {0};
 8008a7c:	9302      	str	r3, [sp, #8]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8008a7e:	9308      	str	r3, [sp, #32]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8008a80:	e9c4 2300 	strd	r2, r3, [r4]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8008a84:	e9cd 3306 	strd	r3, r3, [sp, #24]
  HRTIM_SimplePWMChannelCfgTypeDef pSimplePWMChannelCfg = {0};
 8008a88:	e9cd 3303 	strd	r3, r3, [sp, #12]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8008a8c:	f7fa f9ac 	bl	8002de8 <HAL_HRTIM_Init>
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d17f      	bne.n	8008b94 <MX_HRTIM_Init+0x128>
  {
    Error_Handler();
  }
  pTimeBaseCfg.Period = 0x3fff;
 8008a94:	f643 72ff 	movw	r2, #16383	; 0x3fff
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8008a98:	2100      	movs	r1, #0
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8008a9a:	2005      	movs	r0, #5
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8008a9c:	2308      	movs	r3, #8
  pTimeBaseCfg.Period = 0x3fff;
 8008a9e:	9205      	str	r2, [sp, #20]
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8008aa0:	aa05      	add	r2, sp, #20
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8008aa2:	9106      	str	r1, [sp, #24]
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8008aa4:	2101      	movs	r1, #1
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8008aa6:	9007      	str	r0, [sp, #28]
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8008aa8:	4853      	ldr	r0, [pc, #332]	; (8008bf8 <MX_HRTIM_Init+0x18c>)
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8008aaa:	9308      	str	r3, [sp, #32]
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8008aac:	f7fa fa10 	bl	8002ed0 <HAL_HRTIM_TimeBaseConfig>
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	d16c      	bne.n	8008b8e <MX_HRTIM_Init+0x122>
  {
    Error_Handler();
  }
  pSimplePWMChannelCfg.Pulse = 0x7ff;
 8008ab4:	f240 70ff 	movw	r0, #2047	; 0x7ff
  pSimplePWMChannelCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8008ab8:	2500      	movs	r5, #0
  pSimplePWMChannelCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
  if (HAL_HRTIM_SimplePWMChannelConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pSimplePWMChannelCfg) != HAL_OK)
 8008aba:	ab02      	add	r3, sp, #8
 8008abc:	2208      	movs	r2, #8
  pSimplePWMChannelCfg.Pulse = 0x7ff;
 8008abe:	9002      	str	r0, [sp, #8]
  if (HAL_HRTIM_SimplePWMChannelConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pSimplePWMChannelCfg) != HAL_OK)
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	484d      	ldr	r0, [pc, #308]	; (8008bf8 <MX_HRTIM_Init+0x18c>)
  pSimplePWMChannelCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8008ac4:	e9cd 5503 	strd	r5, r5, [sp, #12]
  if (HAL_HRTIM_SimplePWMChannelConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pSimplePWMChannelCfg) != HAL_OK)
 8008ac8:	f7fa fa40 	bl	8002f4c <HAL_HRTIM_SimplePWMChannelConfig>
 8008acc:	2800      	cmp	r0, #0
 8008ace:	d15b      	bne.n	8008b88 <MX_HRTIM_Init+0x11c>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8008ad0:	aa05      	add	r2, sp, #20
 8008ad2:	2102      	movs	r1, #2
 8008ad4:	4848      	ldr	r0, [pc, #288]	; (8008bf8 <MX_HRTIM_Init+0x18c>)
 8008ad6:	f7fa f9fb 	bl	8002ed0 <HAL_HRTIM_TimeBaseConfig>
 8008ada:	2800      	cmp	r0, #0
 8008adc:	d151      	bne.n	8008b82 <MX_HRTIM_Init+0x116>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_SimplePWMChannelConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pSimplePWMChannelCfg) != HAL_OK)
 8008ade:	ab02      	add	r3, sp, #8
 8008ae0:	2210      	movs	r2, #16
 8008ae2:	2102      	movs	r1, #2
 8008ae4:	4844      	ldr	r0, [pc, #272]	; (8008bf8 <MX_HRTIM_Init+0x18c>)
 8008ae6:	f7fa fa31 	bl	8002f4c <HAL_HRTIM_SimplePWMChannelConfig>
 8008aea:	2800      	cmp	r0, #0
 8008aec:	d146      	bne.n	8008b7c <MX_HRTIM_Init+0x110>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_SimplePWMChannelConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pSimplePWMChannelCfg) != HAL_OK)
 8008aee:	ab02      	add	r3, sp, #8
 8008af0:	2220      	movs	r2, #32
 8008af2:	2102      	movs	r1, #2
 8008af4:	4840      	ldr	r0, [pc, #256]	; (8008bf8 <MX_HRTIM_Init+0x18c>)
 8008af6:	f7fa fa29 	bl	8002f4c <HAL_HRTIM_SimplePWMChannelConfig>
 8008afa:	2800      	cmp	r0, #0
 8008afc:	d13b      	bne.n	8008b76 <MX_HRTIM_Init+0x10a>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8008afe:	aa05      	add	r2, sp, #20
 8008b00:	2103      	movs	r1, #3
 8008b02:	483d      	ldr	r0, [pc, #244]	; (8008bf8 <MX_HRTIM_Init+0x18c>)
 8008b04:	f7fa f9e4 	bl	8002ed0 <HAL_HRTIM_TimeBaseConfig>
 8008b08:	bb90      	cbnz	r0, 8008b70 <MX_HRTIM_Init+0x104>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_SimplePWMChannelConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pSimplePWMChannelCfg) != HAL_OK)
 8008b0a:	ab02      	add	r3, sp, #8
 8008b0c:	2240      	movs	r2, #64	; 0x40
 8008b0e:	2103      	movs	r1, #3
 8008b10:	4839      	ldr	r0, [pc, #228]	; (8008bf8 <MX_HRTIM_Init+0x18c>)
 8008b12:	f7fa fa1b 	bl	8002f4c <HAL_HRTIM_SimplePWMChannelConfig>
 8008b16:	bb40      	cbnz	r0, 8008b6a <MX_HRTIM_Init+0xfe>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_SimplePWMChannelConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pSimplePWMChannelCfg) != HAL_OK)
 8008b18:	ab02      	add	r3, sp, #8
 8008b1a:	2280      	movs	r2, #128	; 0x80
 8008b1c:	2103      	movs	r1, #3
 8008b1e:	4836      	ldr	r0, [pc, #216]	; (8008bf8 <MX_HRTIM_Init+0x18c>)
 8008b20:	f7fa fa14 	bl	8002f4c <HAL_HRTIM_SimplePWMChannelConfig>
 8008b24:	b9f0      	cbnz	r0, 8008b64 <MX_HRTIM_Init+0xf8>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8008b26:	aa05      	add	r2, sp, #20
 8008b28:	2104      	movs	r1, #4
 8008b2a:	4833      	ldr	r0, [pc, #204]	; (8008bf8 <MX_HRTIM_Init+0x18c>)
 8008b2c:	f7fa f9d0 	bl	8002ed0 <HAL_HRTIM_TimeBaseConfig>
 8008b30:	b9a8      	cbnz	r0, 8008b5e <MX_HRTIM_Init+0xf2>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_SimplePWMChannelConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE2, &pSimplePWMChannelCfg) != HAL_OK)
 8008b32:	ab02      	add	r3, sp, #8
 8008b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b38:	2104      	movs	r1, #4
 8008b3a:	482f      	ldr	r0, [pc, #188]	; (8008bf8 <MX_HRTIM_Init+0x18c>)
 8008b3c:	f7fa fa06 	bl	8002f4c <HAL_HRTIM_SimplePWMChannelConfig>
 8008b40:	b108      	cbz	r0, 8008b46 <MX_HRTIM_Init+0xda>
  {
    Error_Handler();
 8008b42:	f000 fb89 	bl	8009258 <Error_Handler>

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hrtimHandle->Instance==HRTIM1)
 8008b46:	6822      	ldr	r2, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b48:	2400      	movs	r4, #0
  if(hrtimHandle->Instance==HRTIM1)
 8008b4a:	4b2c      	ldr	r3, [pc, #176]	; (8008bfc <MX_HRTIM_Init+0x190>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b4c:	940d      	str	r4, [sp, #52]	; 0x34
  if(hrtimHandle->Instance==HRTIM1)
 8008b4e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b50:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8008b54:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  if(hrtimHandle->Instance==HRTIM1)
 8008b58:	d01f      	beq.n	8008b9a <MX_HRTIM_Init+0x12e>
}
 8008b5a:	b00f      	add	sp, #60	; 0x3c
 8008b5c:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8008b5e:	f000 fb7b 	bl	8009258 <Error_Handler>
 8008b62:	e7e6      	b.n	8008b32 <MX_HRTIM_Init+0xc6>
    Error_Handler();
 8008b64:	f000 fb78 	bl	8009258 <Error_Handler>
 8008b68:	e7dd      	b.n	8008b26 <MX_HRTIM_Init+0xba>
    Error_Handler();
 8008b6a:	f000 fb75 	bl	8009258 <Error_Handler>
 8008b6e:	e7d3      	b.n	8008b18 <MX_HRTIM_Init+0xac>
    Error_Handler();
 8008b70:	f000 fb72 	bl	8009258 <Error_Handler>
 8008b74:	e7c9      	b.n	8008b0a <MX_HRTIM_Init+0x9e>
    Error_Handler();
 8008b76:	f000 fb6f 	bl	8009258 <Error_Handler>
 8008b7a:	e7c0      	b.n	8008afe <MX_HRTIM_Init+0x92>
    Error_Handler();
 8008b7c:	f000 fb6c 	bl	8009258 <Error_Handler>
 8008b80:	e7b5      	b.n	8008aee <MX_HRTIM_Init+0x82>
    Error_Handler();
 8008b82:	f000 fb69 	bl	8009258 <Error_Handler>
 8008b86:	e7aa      	b.n	8008ade <MX_HRTIM_Init+0x72>
    Error_Handler();
 8008b88:	f000 fb66 	bl	8009258 <Error_Handler>
 8008b8c:	e7a0      	b.n	8008ad0 <MX_HRTIM_Init+0x64>
    Error_Handler();
 8008b8e:	f000 fb63 	bl	8009258 <Error_Handler>
 8008b92:	e78f      	b.n	8008ab4 <MX_HRTIM_Init+0x48>
    Error_Handler();
 8008b94:	f000 fb60 	bl	8009258 <Error_Handler>
 8008b98:	e77c      	b.n	8008a94 <MX_HRTIM_Init+0x28>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008b9a:	4b19      	ldr	r3, [pc, #100]	; (8008c00 <MX_HRTIM_Init+0x194>)
    PA9     ------> HRTIM_CHC1
    PA10     ------> HRTIM_CHC2
    PA11     ------> HRTIM_CHD1
    PA12     ------> HRTIM_CHD2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008b9c:	2080      	movs	r0, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b9e:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008ba0:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008ba2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008ba6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008baa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008bae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008bb2:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8008bb6:	9200      	str	r2, [sp, #0]
 8008bb8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008bbe:	f042 0201 	orr.w	r2, r2, #1
 8008bc2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008bca:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bcc:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008bd0:	480c      	ldr	r0, [pc, #48]	; (8008c04 <MX_HRTIM_Init+0x198>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bd2:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bd4:	9301      	str	r3, [sp, #4]
 8008bd6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8008bd8:	950d      	str	r5, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008bda:	f7f9 ffd7 	bl	8002b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8008bde:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008be2:	a909      	add	r1, sp, #36	; 0x24
 8008be4:	4808      	ldr	r0, [pc, #32]	; (8008c08 <MX_HRTIM_Init+0x19c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008be6:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8008be8:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8008bea:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bec:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bf0:	f7f9 ffcc 	bl	8002b8c <HAL_GPIO_Init>
}
 8008bf4:	b00f      	add	sp, #60	; 0x3c
 8008bf6:	bd30      	pop	{r4, r5, pc}
 8008bf8:	20002f8c 	.word	0x20002f8c
 8008bfc:	40017400 	.word	0x40017400
 8008c00:	58024400 	.word	0x58024400
 8008c04:	58021800 	.word	0x58021800
 8008c08:	58020000 	.word	0x58020000

08008c0c <HAL_HRTIM_MspInit>:
  if(hrtimHandle->Instance==HRTIM1)
 8008c0c:	6802      	ldr	r2, [r0, #0]
 8008c0e:	4b0a      	ldr	r3, [pc, #40]	; (8008c38 <HAL_HRTIM_MspInit+0x2c>)
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d000      	beq.n	8008c16 <HAL_HRTIM_MspInit+0xa>
 8008c14:	4770      	bx	lr
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8008c16:	4b09      	ldr	r3, [pc, #36]	; (8008c3c <HAL_HRTIM_MspInit+0x30>)
{
 8008c18:	b082      	sub	sp, #8
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8008c1a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8008c1e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8008c22:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8008c26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008c2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c2e:	9301      	str	r3, [sp, #4]
 8008c30:	9b01      	ldr	r3, [sp, #4]
}
 8008c32:	b002      	add	sp, #8
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	40017400 	.word	0x40017400
 8008c3c:	58024400 	.word	0x58024400

08008c40 <HAL_HRTIM_MspPostInit>:
{
 8008c40:	b530      	push	{r4, r5, lr}
  if(hrtimHandle->Instance==HRTIM1)
 8008c42:	4b1e      	ldr	r3, [pc, #120]	; (8008cbc <HAL_HRTIM_MspPostInit+0x7c>)
{
 8008c44:	b089      	sub	sp, #36	; 0x24
  if(hrtimHandle->Instance==HRTIM1)
 8008c46:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c48:	2400      	movs	r4, #0
  if(hrtimHandle->Instance==HRTIM1)
 8008c4a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c4c:	9407      	str	r4, [sp, #28]
 8008c4e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8008c52:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hrtimHandle->Instance==HRTIM1)
 8008c56:	d001      	beq.n	8008c5c <HAL_HRTIM_MspPostInit+0x1c>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8008c58:	b009      	add	sp, #36	; 0x24
 8008c5a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008c5c:	4b18      	ldr	r3, [pc, #96]	; (8008cc0 <HAL_HRTIM_MspPostInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008c5e:	2080      	movs	r0, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c60:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008c62:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008c64:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008c68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c6c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008c70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008c74:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8008c78:	9201      	str	r2, [sp, #4]
 8008c7a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c7c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008c80:	f042 0201 	orr.w	r2, r2, #1
 8008c84:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008c8c:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c8e:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008c92:	480c      	ldr	r0, [pc, #48]	; (8008cc4 <HAL_HRTIM_MspPostInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c94:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c96:	9302      	str	r3, [sp, #8]
 8008c98:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8008c9a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008c9c:	f7f9 ff76 	bl	8002b8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8008ca0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ca4:	a903      	add	r1, sp, #12
 8008ca6:	4808      	ldr	r0, [pc, #32]	; (8008cc8 <HAL_HRTIM_MspPostInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ca8:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8008caa:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8008cac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cae:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cb2:	f7f9 ff6b 	bl	8002b8c <HAL_GPIO_Init>
}
 8008cb6:	b009      	add	sp, #36	; 0x24
 8008cb8:	bd30      	pop	{r4, r5, pc}
 8008cba:	bf00      	nop
 8008cbc:	40017400 	.word	0x40017400
 8008cc0:	58024400 	.word	0x58024400
 8008cc4:	58021800 	.word	0x58021800
 8008cc8:	58020000 	.word	0x58020000

08008ccc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8008ccc:	b538      	push	{r3, r4, r5, lr}

  hi2c2.Instance = I2C2;
 8008cce:	4b13      	ldr	r3, [pc, #76]	; (8008d1c <MX_I2C2_Init+0x50>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
 8008cd0:	2200      	movs	r2, #0
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008cd2:	2101      	movs	r1, #1
  hi2c2.Instance = I2C2;
 8008cd4:	4d12      	ldr	r5, [pc, #72]	; (8008d20 <MX_I2C2_Init+0x54>)
  hi2c2.Init.Timing = 0x00B03FDB;
 8008cd6:	4c13      	ldr	r4, [pc, #76]	; (8008d24 <MX_I2C2_Init+0x58>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008cd8:	4618      	mov	r0, r3
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008cda:	621a      	str	r2, [r3, #32]
  hi2c2.Init.Timing = 0x00B03FDB;
 8008cdc:	e9c3 5400 	strd	r5, r4, [r3]
  hi2c2.Init.OwnAddress1 = 0;
 8008ce0:	e9c3 2102 	strd	r2, r1, [r3, #8]
  hi2c2.Init.OwnAddress2 = 0;
 8008ce4:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008ce8:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008cec:	f7fa fa9e 	bl	800322c <HAL_I2C_Init>
 8008cf0:	b988      	cbnz	r0, 8008d16 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	4809      	ldr	r0, [pc, #36]	; (8008d1c <MX_I2C2_Init+0x50>)
 8008cf6:	f7fa fbc5 	bl	8003484 <HAL_I2CEx_ConfigAnalogFilter>
 8008cfa:	b948      	cbnz	r0, 8008d10 <MX_I2C2_Init+0x44>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	4807      	ldr	r0, [pc, #28]	; (8008d1c <MX_I2C2_Init+0x50>)
 8008d00:	f7fa fbee 	bl	80034e0 <HAL_I2CEx_ConfigDigitalFilter>
 8008d04:	b900      	cbnz	r0, 8008d08 <MX_I2C2_Init+0x3c>
  {
    Error_Handler();
  }

}
 8008d06:	bd38      	pop	{r3, r4, r5, pc}
 8008d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8008d0c:	f000 baa4 	b.w	8009258 <Error_Handler>
    Error_Handler();
 8008d10:	f000 faa2 	bl	8009258 <Error_Handler>
 8008d14:	e7f2      	b.n	8008cfc <MX_I2C2_Init+0x30>
    Error_Handler();
 8008d16:	f000 fa9f 	bl	8009258 <Error_Handler>
 8008d1a:	e7ea      	b.n	8008cf2 <MX_I2C2_Init+0x26>
 8008d1c:	20003068 	.word	0x20003068
 8008d20:	40005800 	.word	0x40005800
 8008d24:	00b03fdb 	.word	0x00b03fdb

08008d28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008d28:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C2)
 8008d2a:	4a1a      	ldr	r2, [pc, #104]	; (8008d94 <HAL_I2C_MspInit+0x6c>)
{
 8008d2c:	b088      	sub	sp, #32
  if(i2cHandle->Instance==I2C2)
 8008d2e:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d30:	2300      	movs	r3, #0
  if(i2cHandle->Instance==I2C2)
 8008d32:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d34:	9307      	str	r3, [sp, #28]
 8008d36:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8008d3a:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(i2cHandle->Instance==I2C2)
 8008d3e:	d001      	beq.n	8008d44 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8008d40:	b008      	add	sp, #32
 8008d42:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d44:	4c14      	ldr	r4, [pc, #80]	; (8008d98 <HAL_I2C_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008d46:	2012      	movs	r0, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8008d48:	2204      	movs	r2, #4
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008d4a:	f44f 6640 	mov.w	r6, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d4e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d52:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d54:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d56:	f043 0302 	orr.w	r3, r3, #2
 8008d5a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8008d5e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008d62:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d64:	f003 0302 	and.w	r3, r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d68:	480c      	ldr	r0, [pc, #48]	; (8008d9c <HAL_I2C_MspInit+0x74>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008d6a:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d6c:	9301      	str	r3, [sp, #4]
 8008d6e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8008d70:	e9cd 5206 	strd	r5, r2, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d74:	f7f9 ff0a 	bl	8002b8c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8008d78:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8008d7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008d80:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8008d84:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8008d88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d8c:	9302      	str	r3, [sp, #8]
 8008d8e:	9b02      	ldr	r3, [sp, #8]
}
 8008d90:	b008      	add	sp, #32
 8008d92:	bd70      	pop	{r4, r5, r6, pc}
 8008d94:	40005800 	.word	0x40005800
 8008d98:	58024400 	.word	0x58024400
 8008d9c:	58020400 	.word	0x58020400

08008da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008da4:	b0cc      	sub	sp, #304	; 0x130
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008da6:	224c      	movs	r2, #76	; 0x4c
 8008da8:	2100      	movs	r1, #0
 8008daa:	a80a      	add	r0, sp, #40	; 0x28
 8008dac:	f001 ff6c 	bl	800ac88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008db0:	2220      	movs	r2, #32
 8008db2:	2100      	movs	r1, #0
 8008db4:	a802      	add	r0, sp, #8
 8008db6:	f001 ff67 	bl	800ac88 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008dba:	22bc      	movs	r2, #188	; 0xbc
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	a81d      	add	r0, sp, #116	; 0x74
 8008dc0:	f001 ff62 	bl	800ac88 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8008dc4:	2002      	movs	r0, #2
 8008dc6:	f7fa fbb7 	bl	8003538 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8008dca:	4b3c      	ldr	r3, [pc, #240]	; (8008ebc <SystemClock_Config+0x11c>)
 8008dcc:	2100      	movs	r1, #0
 8008dce:	4a3c      	ldr	r2, [pc, #240]	; (8008ec0 <SystemClock_Config+0x120>)

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8008dd0:	4618      	mov	r0, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8008dd2:	9101      	str	r1, [sp, #4]
 8008dd4:	6999      	ldr	r1, [r3, #24]
 8008dd6:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8008dda:	6199      	str	r1, [r3, #24]
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008de2:	9301      	str	r3, [sp, #4]
 8008de4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008de6:	f043 0301 	orr.w	r3, r3, #1
 8008dea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008dec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008dee:	f003 0301 	and.w	r3, r3, #1
 8008df2:	9301      	str	r3, [sp, #4]
 8008df4:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8008df6:	6983      	ldr	r3, [r0, #24]
 8008df8:	049b      	lsls	r3, r3, #18
 8008dfa:	d5fc      	bpl.n	8008df6 <SystemClock_Config+0x56>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8008dfc:	4a31      	ldr	r2, [pc, #196]	; (8008ec4 <SystemClock_Config+0x124>)
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008dfe:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
 8008e00:	2005      	movs	r0, #5
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8008e02:	2601      	movs	r6, #1
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8008e04:	6a93      	ldr	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8008e06:	f04f 0c23 	mov.w	ip, #35	; 0x23
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008e0a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008e0e:	2540      	movs	r5, #64	; 0x40
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8008e10:	f023 0303 	bic.w	r3, r3, #3
  RCC_OscInitStruct.PLL.PLLN = 192;
 8008e14:	21c0      	movs	r1, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8008e16:	f04f 0808 	mov.w	r8, #8
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8008e1a:	4323      	orrs	r3, r4
 8008e1c:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8008e1e:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLM = 5;
 8008e20:	9015      	str	r0, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008e22:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8008e24:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008e28:	970b      	str	r7, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8008e2a:	960d      	str	r6, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8008e2c:	9610      	str	r6, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008e2e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLR = 2;
 8008e30:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLN = 192;
 8008e32:	9116      	str	r1, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8008e34:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008e36:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008e3a:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8008e3e:	e9cd 831a 	strd	r8, r3, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008e42:	f7fa fb9f 	bl	8003584 <HAL_RCC_OscConfig>
 8008e46:	b100      	cbz	r0, 8008e4a <SystemClock_Config+0xaa>
 8008e48:	e7fe      	b.n	8008e48 <SystemClock_Config+0xa8>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8008e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008e4e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008e52:	2203      	movs	r2, #3
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8008e54:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8008e56:	2104      	movs	r1, #4
 8008e58:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8008e5a:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8008e5c:	f8cd 8014 	str.w	r8, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8008e60:	9509      	str	r5, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8008e62:	e9cd 5506 	strd	r5, r5, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008e66:	e9cd c202 	strd	ip, r2, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8008e6a:	f7fa fee1 	bl	8003c30 <HAL_RCC_ClockConfig>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	b100      	cbz	r0, 8008e74 <SystemClock_Config+0xd4>
 8008e72:	e7fe      	b.n	8008e72 <SystemClock_Config+0xd2>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1|RCC_PERIPHCLK_RNG
 8008e74:	f8df e050 	ldr.w	lr, [pc, #80]	; 8008ec8 <SystemClock_Config+0x128>
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_ADC
                              |RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8008e78:	f04f 0c19 	mov.w	ip, #25
  PeriphClkInitStruct.PLL2.PLL2N = 344;
  PeriphClkInitStruct.PLL2.PLL2P = 7;
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8008e7c:	9421      	str	r4, [sp, #132]	; 0x84
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 8008e7e:	f44f 75ac 	mov.w	r5, #344	; 0x158
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8008e82:	9422      	str	r4, [sp, #136]	; 0x88
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8008e84:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 8008e88:	2407      	movs	r4, #7
  PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_CPUCLK;
 8008e8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008e8e:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8008e90:	9323      	str	r3, [sp, #140]	; 0x8c
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8008e92:	932e      	str	r3, [sp, #184]	; 0xb8
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8008e94:	9730      	str	r7, [sp, #192]	; 0xc0
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8008e96:	9145      	str	r1, [sp, #276]	; 0x114
  PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_CPUCLK;
 8008e98:	924a      	str	r2, [sp, #296]	; 0x128
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8008e9a:	e9cd 3324 	strd	r3, r3, [sp, #144]	; 0x90
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8008e9e:	e9cd 3631 	strd	r3, r6, [sp, #196]	; 0xc4
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8008ea2:	e9cd 333c 	strd	r3, r3, [sp, #240]	; 0xf0
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8008ea6:	e9cd ec1d 	strd	lr, ip, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 8008eaa:	e9cd 541f 	strd	r5, r4, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008eae:	f7fb f98f 	bl	80041d0 <HAL_RCCEx_PeriphCLKConfig>
 8008eb2:	b100      	cbz	r0, 8008eb6 <SystemClock_Config+0x116>
 8008eb4:	e7fe      	b.n	8008eb4 <SystemClock_Config+0x114>
  {
    Error_Handler();
  }
}
 8008eb6:	b04c      	add	sp, #304	; 0x130
 8008eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ebc:	58024800 	.word	0x58024800
 8008ec0:	58000400 	.word	0x58000400
 8008ec4:	58024400 	.word	0x58024400
 8008ec8:	910b0108 	.word	0x910b0108

08008ecc <SDRAM_Initialization_sequence>:
#define SDRAM_MODEREG_WRITEBURST_MODE_SINGLE     ((uint16_t)0x0200)

//#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)956)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)0x0569)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
void SDRAM_Initialization_sequence(void)
{
 8008ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 1;
    Command.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008ed0:	4c2b      	ldr	r4, [pc, #172]	; (8008f80 <SDRAM_Initialization_sequence+0xb4>)
{
 8008ed2:	b087      	sub	sp, #28
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8008ed4:	2501      	movs	r5, #1
    __IO uint32_t tmpmrd = 0;
 8008ed6:	2600      	movs	r6, #0
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8008ed8:	2710      	movs	r7, #16
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008eda:	a902      	add	r1, sp, #8
 8008edc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ee0:	4620      	mov	r0, r4
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);

    /* Step 4: Configure the 1st Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 8;
 8008ee2:	f04f 0808 	mov.w	r8, #8
    __IO uint32_t tmpmrd = 0;
 8008ee6:	9601      	str	r6, [sp, #4]
    Command.ModeRegisterDefinition = 0;
 8008ee8:	9605      	str	r6, [sp, #20]
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8008eea:	f04f 0903 	mov.w	r9, #3
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8008eee:	9502      	str	r5, [sp, #8]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8008ef0:	e9cd 7503 	strd	r7, r5, [sp, #12]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008ef4:	f7fd fff2 	bl	8006edc <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 8008ef8:	4628      	mov	r0, r5
 8008efa:	f7f7 fa57 	bl	80003ac <HAL_Delay>
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 8008efe:	2302      	movs	r3, #2
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008f00:	eb0d 0108 	add.w	r1, sp, r8
 8008f04:	4620      	mov	r0, r4
 8008f06:	f64f 72ff 	movw	r2, #65535	; 0xffff
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 8008f0a:	9302      	str	r3, [sp, #8]
    Command.ModeRegisterDefinition = 0;
 8008f0c:	9605      	str	r6, [sp, #20]
    Command.AutoRefreshNumber = 1;
 8008f0e:	e9cd 7503 	strd	r7, r5, [sp, #12]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008f12:	f7fd ffe3 	bl	8006edc <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 8008f16:	f240 2222 	movw	r2, #546	; 0x222
    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8008f1a:	2304      	movs	r3, #4
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008f1c:	eb0d 0108 	add.w	r1, sp, r8
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 8008f20:	9201      	str	r2, [sp, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008f22:	4620      	mov	r0, r4
    Command.ModeRegisterDefinition = tmpmrd;
 8008f24:	f8dd c004 	ldr.w	ip, [sp, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008f28:	f64f 72ff 	movw	r2, #65535	; 0xffff
    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8008f2c:	9302      	str	r3, [sp, #8]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8008f2e:	9703      	str	r7, [sp, #12]
    Command.ModeRegisterDefinition = tmpmrd;
 8008f30:	e9cd 5c04 	strd	r5, ip, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008f34:	f7fd ffd2 	bl	8006edc <HAL_SDRAM_SendCommand>
    Command.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008f38:	eb0d 0108 	add.w	r1, sp, r8
 8008f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f40:	4620      	mov	r0, r4
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8008f42:	9703      	str	r7, [sp, #12]
    Command.ModeRegisterDefinition = 0;
 8008f44:	9605      	str	r6, [sp, #20]
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8008f46:	f8cd 9008 	str.w	r9, [sp, #8]
    Command.AutoRefreshNumber = 8;
 8008f4a:	f8cd 8010 	str.w	r8, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008f4e:	f7fd ffc5 	bl	8006edc <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8008f52:	4628      	mov	r0, r5
 8008f54:	f7f7 fa2a 	bl	80003ac <HAL_Delay>
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 8;
    Command.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008f58:	eb0d 0108 	add.w	r1, sp, r8
 8008f5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f60:	4620      	mov	r0, r4
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8008f62:	e9cd 9702 	strd	r9, r7, [sp, #8]
    Command.ModeRegisterDefinition = 0;
 8008f66:	e9cd 8604 	strd	r8, r6, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8008f6a:	f7fd ffb7 	bl	8006edc <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, SDRAM_REFRESH_COUNT);
 8008f6e:	f240 5169 	movw	r1, #1385	; 0x569
 8008f72:	4620      	mov	r0, r4
 8008f74:	f7fd ffd4 	bl	8006f20 <HAL_SDRAM_ProgramRefreshRate>
}
 8008f78:	b007      	add	sp, #28
 8008f7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f7e:	bf00      	nop
 8008f80:	20002f58 	.word	0x20002f58

08008f84 <randomNumber>:
  DWT->CTRL = 0x40000001;

}


float randomNumber(void) {
 8008f84:	b500      	push	{lr}
 8008f86:	b083      	sub	sp, #12

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8008f88:	4807      	ldr	r0, [pc, #28]	; (8008fa8 <randomNumber+0x24>)
 8008f8a:	a901      	add	r1, sp, #4
 8008f8c:	f7fc f9a0 	bl	80052d0 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 8008f90:	eddd 7a01 	vldr	s15, [sp, #4]
 8008f94:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8008fac <randomNumber+0x28>
 8008f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
	return num;
}
 8008f9c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008fa0:	b003      	add	sp, #12
 8008fa2:	f85d fb04 	ldr.w	pc, [sp], #4
 8008fa6:	bf00      	nop
 8008fa8:	2000fb80 	.word	0x2000fb80
 8008fac:	2f80000d 	.word	0x2f80000d

08008fb0 <startTimersForLEDs>:

  /* Error */
  //Error_Handler();
}
void startTimersForLEDs(void)
{
 8008fb0:	b4f0      	push	{r4, r5, r6, r7}


	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].TIMxCR = HRTIM_TIMCR_CONT + HRTIM_TIMCR_PREEN + HRTIM_TIMCR_TREPU;
 8008fb2:	4b24      	ldr	r3, [pc, #144]	; (8009044 <startTimersForLEDs+0x94>)
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].PERxR = 0x3fff;
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP1xR = 200;
 8008fb4:	21c8      	movs	r1, #200	; 0xc8
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP2xR = 200;
	/* TD1 output set on TIMC period and reset on TIMC CMP1 event*/
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].RSTx1R = HRTIM_RST1R_CMP1;
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].SETx1R = HRTIM_RST1R_PER;
 8008fb6:	2204      	movs	r2, #4
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].PERxR = 0x3fff;
 8008fb8:	f643 70ff 	movw	r0, #16383	; 0x3fff
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].TIMxCR = HRTIM_TIMCR_CONT + HRTIM_TIMCR_PREEN + HRTIM_TIMCR_TREPU;
 8008fbc:	4d22      	ldr	r5, [pc, #136]	; (8009048 <startTimersForLEDs+0x98>)

	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].RSTx2R = HRTIM_RST2R_CMP2;
 8008fbe:	2410      	movs	r4, #16
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].RSTx1R = HRTIM_RST1R_CMP1;
 8008fc0:	2608      	movs	r6, #8
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].RSTx2R = HRTIM_SET2R_CMP2;
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx2R = HRTIM_RST2R_PER;


	HRTIM1->sMasterRegs.MCR = HRTIM_MCR_TBCEN + HRTIM_MCR_TECEN + HRTIM_MCR_TCCEN + HRTIM_MCR_TDCEN;
	HRTIM1->sCommonRegs.OENR = HRTIM_OENR_TB2OEN + HRTIM_OENR_TE2OEN + HRTIM_OENR_TC1OEN + HRTIM_OENR_TC2OEN + HRTIM_OENR_TD1OEN + HRTIM_OENR_TD2OEN ;
 8008fc2:	f44f 773e 	mov.w	r7, #760	; 0x2f8
	HRTIM1->sMasterRegs.MCR = HRTIM_MCR_TBCEN + HRTIM_MCR_TECEN + HRTIM_MCR_TCCEN + HRTIM_MCR_TDCEN;
 8008fc6:	f44f 1c70 	mov.w	ip, #3932160	; 0x3c0000
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].TIMxCR = HRTIM_TIMCR_CONT + HRTIM_TIMCR_PREEN + HRTIM_TIMCR_TREPU;
 8008fca:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].PERxR = 0x3fff;
 8008fce:	f8c3 0194 	str.w	r0, [r3, #404]	; 0x194
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP1xR = 200;
 8008fd2:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP2xR = 200;
 8008fd6:	f8c3 11a4 	str.w	r1, [r3, #420]	; 0x1a4
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].RSTx1R = HRTIM_RST1R_CMP1;
 8008fda:	f8c3 61c0 	str.w	r6, [r3, #448]	; 0x1c0
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].SETx1R = HRTIM_RST1R_PER;
 8008fde:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].RSTx2R = HRTIM_RST2R_CMP2;
 8008fe2:	f8c3 41c8 	str.w	r4, [r3, #456]	; 0x1c8
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].SETx2R = HRTIM_RST2R_PER;
 8008fe6:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_E].TIMxCR = HRTIM_TIMCR_CONT + HRTIM_TIMCR_PREEN + HRTIM_TIMCR_TREPU;
 8008fea:	f8c3 5280 	str.w	r5, [r3, #640]	; 0x280
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_E].PERxR = 0x3fff;
 8008fee:	f8c3 0294 	str.w	r0, [r3, #660]	; 0x294
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_E].CMP2xR = 200;
 8008ff2:	f8c3 12a4 	str.w	r1, [r3, #676]	; 0x2a4
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_E].RSTx2R = HRTIM_SET2R_CMP2;
 8008ff6:	f8c3 42c8 	str.w	r4, [r3, #712]	; 0x2c8
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_E].SETx2R = HRTIM_RST2R_PER;
 8008ffa:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].TIMxCR = HRTIM_TIMCR_CONT + HRTIM_TIMCR_PREEN + HRTIM_TIMCR_TREPU;
 8008ffe:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].PERxR = 0x3fff;
 8009002:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP2xR = 200;
 8009006:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].RSTx2R = HRTIM_SET2R_CMP2;
 800900a:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].SETx2R = HRTIM_RST2R_PER;
 800900e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].TIMxCR = HRTIM_TIMCR_CONT + HRTIM_TIMCR_PREEN + HRTIM_TIMCR_TREPU;
 8009012:	f8c3 5200 	str.w	r5, [r3, #512]	; 0x200
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].PERxR = 0x3fff;
 8009016:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR = 200;
 800901a:	f8c3 121c 	str.w	r1, [r3, #540]	; 0x21c
	HAL_HRTIM_MspPostInit(&hhrtim);
 800901e:	480b      	ldr	r0, [pc, #44]	; (800904c <startTimersForLEDs+0x9c>)
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP2xR = 200;
 8009020:	f8c3 1224 	str.w	r1, [r3, #548]	; 0x224
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].RSTx1R = HRTIM_SET1R_CMP1;
 8009024:	f8c3 6240 	str.w	r6, [r3, #576]	; 0x240
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R = HRTIM_RST1R_PER;
 8009028:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].RSTx2R = HRTIM_SET2R_CMP2;
 800902c:	f8c3 4248 	str.w	r4, [r3, #584]	; 0x248
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx2R = HRTIM_RST2R_PER;
 8009030:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	HRTIM1->sMasterRegs.MCR = HRTIM_MCR_TBCEN + HRTIM_MCR_TECEN + HRTIM_MCR_TCCEN + HRTIM_MCR_TDCEN;
 8009034:	f8c3 c000 	str.w	ip, [r3]
	HRTIM1->sCommonRegs.OENR = HRTIM_OENR_TB2OEN + HRTIM_OENR_TE2OEN + HRTIM_OENR_TC1OEN + HRTIM_OENR_TC2OEN + HRTIM_OENR_TD1OEN + HRTIM_OENR_TD2OEN ;
 8009038:	f8c3 7394 	str.w	r7, [r3, #916]	; 0x394
}
 800903c:	bcf0      	pop	{r4, r5, r6, r7}
	HAL_HRTIM_MspPostInit(&hhrtim);
 800903e:	f7ff bdff 	b.w	8008c40 <HAL_HRTIM_MspPostInit>
 8009042:	bf00      	nop
 8009044:	40017400 	.word	0x40017400
 8009048:	08020008 	.word	0x08020008
 800904c:	20002f8c 	.word	0x20002f8c

08009050 <MPU_Conf>:

		SDWriteIndex++;
	}
}
void MPU_Conf(void)
{
 8009050:	b510      	push	{r4, lr}
 8009052:	b084      	sub	sp, #16
	  //now set up D3 domain RAM

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;

	 	  //D2 Domain�SRAM1
	 	  MPU_InitStruct.BaseAddress = 0x38000000;
 8009054:	f04f 5460 	mov.w	r4, #939524096	; 0x38000000
	  HAL_MPU_Disable();
 8009058:	f7f7 ffb2 	bl	8000fc0 <HAL_MPU_Disable>
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800905c:	2301      	movs	r3, #1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 800905e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8009062:	4a0d      	ldr	r2, [pc, #52]	; (8009098 <MPU_Conf+0x48>)
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8009064:	4668      	mov	r0, sp
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8009066:	f8ad 3000 	strh.w	r3, [sp]
	  MPU_InitStruct.BaseAddress = 0x30000000;
 800906a:	9101      	str	r1, [sp, #4]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800906c:	e9cd 2302 	strd	r2, r3, [sp, #8]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8009070:	f7f7 ffc8 	bl	8001004 <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8009074:	f240 1101 	movw	r1, #257	; 0x101


	 	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8009078:	4a08      	ldr	r2, [pc, #32]	; (800909c <MPU_Conf+0x4c>)


	 	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;


	 	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800907a:	4668      	mov	r0, sp
	 	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800907c:	4b08      	ldr	r3, [pc, #32]	; (80090a0 <MPU_Conf+0x50>)
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800907e:	f8ad 1000 	strh.w	r1, [sp]
	 	  MPU_InitStruct.BaseAddress = 0x38000000;
 8009082:	9401      	str	r4, [sp, #4]
	 	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8009084:	e9cd 2302 	strd	r2, r3, [sp, #8]
	 	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8009088:	f7f7 ffbc 	bl	8001004 <HAL_MPU_ConfigRegion>


	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800908c:	2004      	movs	r0, #4
 800908e:	f7f7 ffa7 	bl	8000fe0 <HAL_MPU_Enable>
}
 8009092:	b004      	add	sp, #16
 8009094:	bd10      	pop	{r4, pc}
 8009096:	bf00      	nop
 8009098:	03010011 	.word	0x03010011
 800909c:	0301000f 	.word	0x0301000f
 80090a0:	01010100 	.word	0x01010100

080090a4 <main>:
{
 80090a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MPU_Conf();
 80090a6:	f7ff ffd3 	bl	8009050 <MPU_Conf>
  __ASM volatile ("dsb 0xF":::"memory");
 80090aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80090ae:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80090b2:	485a      	ldr	r0, [pc, #360]	; (800921c <main+0x178>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	f8c0 2250 	str.w	r2, [r0, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80090ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80090be:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80090c2:	6943      	ldr	r3, [r0, #20]
 80090c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090c8:	6143      	str	r3, [r0, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80090ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80090ce:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80090d2:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80090d6:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80090da:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80090de:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80090e2:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80090e6:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80090ea:	07b7      	lsls	r7, r6, #30
 80090ec:	015c      	lsls	r4, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80090ee:	ea04 050c 	and.w	r5, r4, ip
 80090f2:	4639      	mov	r1, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80090f4:	4632      	mov	r2, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80090f6:	ea45 0301 	orr.w	r3, r5, r1
      } while (ways-- != 0U);
 80090fa:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80090fc:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
 8009100:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8009104:	1c53      	adds	r3, r2, #1
 8009106:	d1f6      	bne.n	80090f6 <main+0x52>
 8009108:	3c20      	subs	r4, #32
    } while(sets-- != 0U);
 800910a:	f114 0f20 	cmn.w	r4, #32
 800910e:	d1ee      	bne.n	80090ee <main+0x4a>
 8009110:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8009114:	6943      	ldr	r3, [r0, #20]
 8009116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800911a:	6143      	str	r3, [r0, #20]
 800911c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009120:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8009124:	f7f7 f8fe 	bl	8000324 <HAL_Init>
  SystemClock_Config();
 8009128:	f7ff fe3a 	bl	8008da0 <SystemClock_Config>
  MX_GPIO_Init();
 800912c:	f7ff fbb4 	bl	8008898 <MX_GPIO_Init>
  MX_DMA_Init();
 8009130:	f7ff fad0 	bl	80086d4 <MX_DMA_Init>
  MX_FMC_Init();
 8009134:	f7ff fb1a 	bl	800876c <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 8009138:	f000 fa3c 	bl	80095b4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800913c:	f7ff faf4 	bl	8008728 <MX_FATFS_Init>
  MX_SAI1_Init();
 8009140:	f000 f8ba 	bl	80092b8 <MX_SAI1_Init>
  MX_RNG_Init();
 8009144:	f000 f88a 	bl	800925c <MX_RNG_Init>
  MX_I2C2_Init();
 8009148:	f7ff fdc0 	bl	8008ccc <MX_I2C2_Init>
  MX_ADC1_Init();
 800914c:	f7fe fd7e 	bl	8007c4c <MX_ADC1_Init>
  MX_HRTIM_Init();
 8009150:	f7ff fc8c 	bl	8008a6c <MX_HRTIM_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8009154:	2200      	movs	r2, #0
 8009156:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800915a:	4831      	ldr	r0, [pc, #196]	; (8009220 <main+0x17c>)
 800915c:	f7f9 fe40 	bl	8002de0 <HAL_GPIO_WritePin>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8009160:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 8009164:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 8009168:	eee1 3a10 	vmsr	fpscr, r3
 800916c:	482d      	ldr	r0, [pc, #180]	; (8009224 <main+0x180>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800916e:	2201      	movs	r2, #1
 8009170:	2400      	movs	r4, #0
	  SPI_TX[i] = counter++;
 8009172:	4d2d      	ldr	r5, [pc, #180]	; (8009228 <main+0x184>)
 8009174:	7803      	ldrb	r3, [r0, #0]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8009176:	2140      	movs	r1, #64	; 0x40
 8009178:	189e      	adds	r6, r3, r2
 800917a:	f363 0407 	bfi	r4, r3, #0, #8
 800917e:	f103 0710 	add.w	r7, r3, #16
 8009182:	f366 240f 	bfi	r4, r6, #8, #8
 8009186:	1c9e      	adds	r6, r3, #2
 8009188:	3303      	adds	r3, #3
 800918a:	7007      	strb	r7, [r0, #0]
 800918c:	f366 4417 	bfi	r4, r6, #16, #8
 8009190:	4823      	ldr	r0, [pc, #140]	; (8009220 <main+0x17c>)
 8009192:	f363 641f 	bfi	r4, r3, #24, #8
 8009196:	f004 337f 	and.w	r3, r4, #2139062143	; 0x7f7f7f7f
 800919a:	f004 3680 	and.w	r6, r4, #2155905152	; 0x80808080
	  SPI_TX[i] = counter++;
 800919e:	602c      	str	r4, [r5, #0]
 80091a0:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 80091a4:	4073      	eors	r3, r6
 80091a6:	f003 367f 	and.w	r6, r3, #2139062143	; 0x7f7f7f7f
 80091aa:	f003 3480 	and.w	r4, r3, #2155905152	; 0x80808080
 80091ae:	606b      	str	r3, [r5, #4]
 80091b0:	f106 3304 	add.w	r3, r6, #67372036	; 0x4040404
 80091b4:	4063      	eors	r3, r4
 80091b6:	f003 367f 	and.w	r6, r3, #2139062143	; 0x7f7f7f7f
 80091ba:	f003 3480 	and.w	r4, r3, #2155905152	; 0x80808080
 80091be:	60ab      	str	r3, [r5, #8]
 80091c0:	f106 3304 	add.w	r3, r6, #67372036	; 0x4040404
 80091c4:	4063      	eors	r3, r4
 80091c6:	60eb      	str	r3, [r5, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80091c8:	f7f9 fe0a 	bl	8002de0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80091cc:	200a      	movs	r0, #10
 80091ce:	f7f7 f8ed 	bl	80003ac <HAL_Delay>
  SDRAM_Initialization_sequence();
 80091d2:	f7ff fe7b 	bl	8008ecc <SDRAM_Initialization_sequence>
  HAL_Delay(10);
 80091d6:	200a      	movs	r0, #10
 80091d8:	f7f7 f8e8 	bl	80003ac <HAL_Delay>
  if (HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values, NUM_ADC_CHANNELS) != HAL_OK)
 80091dc:	220c      	movs	r2, #12
 80091de:	4913      	ldr	r1, [pc, #76]	; (800922c <main+0x188>)
 80091e0:	4813      	ldr	r0, [pc, #76]	; (8009230 <main+0x18c>)
 80091e2:	f7f7 f8fb 	bl	80003dc <HAL_ADC_Start_DMA>
 80091e6:	b100      	cbz	r0, 80091ea <main+0x146>
 80091e8:	e7fe      	b.n	80091e8 <main+0x144>
    audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 80091ea:	4a12      	ldr	r2, [pc, #72]	; (8009234 <main+0x190>)
 80091ec:	4912      	ldr	r1, [pc, #72]	; (8009238 <main+0x194>)
 80091ee:	4813      	ldr	r0, [pc, #76]	; (800923c <main+0x198>)
 80091f0:	f7fe fec8 	bl	8007f84 <audioInit>
    startTimersForLEDs();
 80091f4:	f7ff fedc 	bl	8008fb0 <startTimersForLEDs>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80091f8:	4a11      	ldr	r2, [pc, #68]	; (8009240 <main+0x19c>)
  if ((*(uint32_t*)0xE0001FB4) & 1)
 80091fa:	4912      	ldr	r1, [pc, #72]	; (8009244 <main+0x1a0>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80091fc:	68d3      	ldr	r3, [r2, #12]
  if ((*(uint32_t*)0xE0001FB4) & 1)
 80091fe:	6809      	ldr	r1, [r1, #0]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8009200:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009204:	60d3      	str	r3, [r2, #12]
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8009206:	07cb      	lsls	r3, r1, #31
 8009208:	d502      	bpl.n	8009210 <main+0x16c>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
 800920a:	4b0f      	ldr	r3, [pc, #60]	; (8009248 <main+0x1a4>)
 800920c:	4a0f      	ldr	r2, [pc, #60]	; (800924c <main+0x1a8>)
 800920e:	601a      	str	r2, [r3, #0]
  DWT->CYCCNT = 0;
 8009210:	4b0f      	ldr	r3, [pc, #60]	; (8009250 <main+0x1ac>)
 8009212:	2100      	movs	r1, #0
  DWT->CTRL = 0x40000001;
 8009214:	4a0f      	ldr	r2, [pc, #60]	; (8009254 <main+0x1b0>)
  DWT->CYCCNT = 0;
 8009216:	6059      	str	r1, [r3, #4]
  DWT->CTRL = 0x40000001;
 8009218:	601a      	str	r2, [r3, #0]
 800921a:	e7fe      	b.n	800921a <main+0x176>
 800921c:	e000ed00 	.word	0xe000ed00
 8009220:	58020800 	.word	0x58020800
 8009224:	2000f4e3 	.word	0x2000f4e3
 8009228:	30001040 	.word	0x30001040
 800922c:	30001000 	.word	0x30001000
 8009230:	200001cc 	.word	0x200001cc
 8009234:	2000fb94 	.word	0x2000fb94
 8009238:	2000fd1c 	.word	0x2000fd1c
 800923c:	20003068 	.word	0x20003068
 8009240:	e000edf0 	.word	0xe000edf0
 8009244:	e0001fb4 	.word	0xe0001fb4
 8009248:	e0001fb0 	.word	0xe0001fb0
 800924c:	c5acce55 	.word	0xc5acce55
 8009250:	e0001000 	.word	0xe0001000
 8009254:	40000001 	.word	0x40000001

08009258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009258:	e7fe      	b.n	8009258 <Error_Handler>
 800925a:	bf00      	nop

0800925c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800925c:	b508      	push	{r3, lr}

  hrng.Instance = RNG;
 800925e:	4b07      	ldr	r3, [pc, #28]	; (800927c <MX_RNG_Init+0x20>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8009260:	2100      	movs	r1, #0
  hrng.Instance = RNG;
 8009262:	4a07      	ldr	r2, [pc, #28]	; (8009280 <MX_RNG_Init+0x24>)
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8009264:	4618      	mov	r0, r3
  hrng.Instance = RNG;
 8009266:	e9c3 2100 	strd	r2, r1, [r3]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800926a:	f7fb fff5 	bl	8005258 <HAL_RNG_Init>
 800926e:	b900      	cbnz	r0, 8009272 <MX_RNG_Init+0x16>
  {
    Error_Handler();
  }

}
 8009270:	bd08      	pop	{r3, pc}
 8009272:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8009276:	f7ff bfef 	b.w	8009258 <Error_Handler>
 800927a:	bf00      	nop
 800927c:	2000fb80 	.word	0x2000fb80
 8009280:	48021800 	.word	0x48021800

08009284 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{

  if(rngHandle->Instance==RNG)
 8009284:	6802      	ldr	r2, [r0, #0]
 8009286:	4b0a      	ldr	r3, [pc, #40]	; (80092b0 <HAL_RNG_MspInit+0x2c>)
 8009288:	429a      	cmp	r2, r3
 800928a:	d000      	beq.n	800928e <HAL_RNG_MspInit+0xa>
 800928c:	4770      	bx	lr
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800928e:	4b09      	ldr	r3, [pc, #36]	; (80092b4 <HAL_RNG_MspInit+0x30>)
{
 8009290:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 8009292:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8009296:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800929a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800929e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80092a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a6:	9301      	str	r3, [sp, #4]
 80092a8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80092aa:	b002      	add	sp, #8
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop
 80092b0:	48021800 	.word	0x48021800
 80092b4:	58024400 	.word	0x58024400

080092b8 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80092b8:	b538      	push	{r3, r4, r5, lr}

  hsai_BlockA1.Instance = SAI1_Block_A;
 80092ba:	481b      	ldr	r0, [pc, #108]	; (8009328 <MX_SAI1_Init+0x70>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80092bc:	2500      	movs	r5, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
 80092be:	4c1b      	ldr	r4, [pc, #108]	; (800932c <MX_SAI1_Init+0x74>)
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 80092c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 80092c4:	2304      	movs	r3, #4
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80092c6:	4a1a      	ldr	r2, [pc, #104]	; (8009330 <MX_SAI1_Init+0x78>)
  hsai_BlockA1.Instance = SAI1_Block_A;
 80092c8:	6020      	str	r0, [r4, #0]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 80092ca:	4620      	mov	r0, r4
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 80092cc:	6161      	str	r1, [r4, #20]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 80092ce:	4629      	mov	r1, r5
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 80092d0:	61e3      	str	r3, [r4, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 80092d2:	2302      	movs	r3, #2
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80092d4:	6222      	str	r2, [r4, #32]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 80092d6:	2203      	movs	r2, #3
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80092d8:	61a5      	str	r5, [r4, #24]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80092da:	60e5      	str	r5, [r4, #12]
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80092dc:	6365      	str	r5, [r4, #52]	; 0x34
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80092de:	e9c4 5501 	strd	r5, r5, [r4, #4]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80092e2:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 80092e6:	f7fc f823 	bl	8005330 <HAL_SAI_InitProtocol>
 80092ea:	b9d0      	cbnz	r0, 8009322 <MX_SAI1_Init+0x6a>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 80092ec:	4c11      	ldr	r4, [pc, #68]	; (8009334 <MX_SAI1_Init+0x7c>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80092ee:	2500      	movs	r5, #0
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80092f0:	2303      	movs	r3, #3
  hsai_BlockB1.Instance = SAI1_Block_B;
 80092f2:	4811      	ldr	r0, [pc, #68]	; (8009338 <MX_SAI1_Init+0x80>)
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80092f4:	2201      	movs	r2, #1
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 80092f6:	2104      	movs	r1, #4
  hsai_BlockB1.Instance = SAI1_Block_B;
 80092f8:	6020      	str	r0, [r4, #0]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 80092fa:	4620      	mov	r0, r4
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80092fc:	60a2      	str	r2, [r4, #8]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 80092fe:	461a      	mov	r2, r3
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8009300:	61e1      	str	r1, [r4, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8009302:	4629      	mov	r1, r5
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8009304:	6063      	str	r3, [r4, #4]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8009306:	2302      	movs	r3, #2
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8009308:	6165      	str	r5, [r4, #20]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800930a:	60e5      	str	r5, [r4, #12]
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800930c:	6365      	str	r5, [r4, #52]	; 0x34
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800930e:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8009312:	f7fc f80d 	bl	8005330 <HAL_SAI_InitProtocol>
 8009316:	b900      	cbnz	r0, 800931a <MX_SAI1_Init+0x62>
  {
    Error_Handler();
  }

}
 8009318:	bd38      	pop	{r3, r4, r5, pc}
 800931a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800931e:	f7ff bf9b 	b.w	8009258 <Error_Handler>
    Error_Handler();
 8009322:	f7ff ff99 	bl	8009258 <Error_Handler>
 8009326:	e7e1      	b.n	80092ec <MX_SAI1_Init+0x34>
 8009328:	40015804 	.word	0x40015804
 800932c:	2000fd1c 	.word	0x2000fd1c
 8009330:	0002ee00 	.word	0x0002ee00
 8009334:	2000fb94 	.word	0x2000fb94
 8009338:	40015824 	.word	0x40015824

0800933c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800933c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800933e:	4a58      	ldr	r2, [pc, #352]	; (80094a0 <HAL_SAI_MspInit+0x164>)
{
 8009340:	b089      	sub	sp, #36	; 0x24
    if(hsai->Instance==SAI1_Block_A)
 8009342:	6803      	ldr	r3, [r0, #0]
{
 8009344:	4605      	mov	r5, r0
    if(hsai->Instance==SAI1_Block_A)
 8009346:	4293      	cmp	r3, r2
 8009348:	d03f      	beq.n	80093ca <HAL_SAI_MspInit+0x8e>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
    }
    if(hsai->Instance==SAI1_Block_B)
 800934a:	4a56      	ldr	r2, [pc, #344]	; (80094a4 <HAL_SAI_MspInit+0x168>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d001      	beq.n	8009354 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
    }
}
 8009350:	b009      	add	sp, #36	; 0x24
 8009352:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (SAI1_client == 0)
 8009354:	4c54      	ldr	r4, [pc, #336]	; (80094a8 <HAL_SAI_MspInit+0x16c>)
 8009356:	6822      	ldr	r2, [r4, #0]
 8009358:	2a00      	cmp	r2, #0
 800935a:	d06f      	beq.n	800943c <HAL_SAI_MspInit+0x100>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800935c:	2108      	movs	r1, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800935e:	2002      	movs	r0, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009360:	2600      	movs	r6, #0
    SAI1_client ++;
 8009362:	3201      	adds	r2, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009364:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8009366:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009368:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800936a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800936c:	9004      	str	r0, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800936e:	484f      	ldr	r0, [pc, #316]	; (80094ac <HAL_SAI_MspInit+0x170>)
    SAI1_client ++;
 8009370:	6022      	str	r2, [r4, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8009372:	9307      	str	r3, [sp, #28]
    hdma_sai1_b.Instance = DMA1_Stream2;
 8009374:	4c4e      	ldr	r4, [pc, #312]	; (80094b0 <HAL_SAI_MspInit+0x174>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009376:	e9cd 6705 	strd	r6, r7, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800937a:	f7f9 fc07 	bl	8002b8c <HAL_GPIO_Init>
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800937e:	2358      	movs	r3, #88	; 0x58
    hdma_sai1_b.Instance = DMA1_Stream2;
 8009380:	4a4c      	ldr	r2, [pc, #304]	; (80094b4 <HAL_SAI_MspInit+0x178>)
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009382:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8009386:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800938a:	62a7      	str	r7, [r4, #40]	; 0x28
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800938c:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009390:	f44f 4780 	mov.w	r7, #16384	; 0x4000
    hdma_sai1_b.Instance = DMA1_Stream2;
 8009394:	6022      	str	r2, [r4, #0]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009396:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800939a:	6063      	str	r3, [r4, #4]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800939c:	2304      	movs	r3, #4
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800939e:	60a6      	str	r6, [r4, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80093a0:	60e6      	str	r6, [r4, #12]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80093a2:	e9c4 c004 	strd	ip, r0, [r4, #16]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80093a6:	4620      	mov	r0, r4
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80093a8:	e9c4 660b 	strd	r6, r6, [r4, #44]	; 0x2c
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80093ac:	e9c4 7106 	strd	r7, r1, [r4, #24]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80093b0:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80093b4:	f7f7 fecc 	bl	8001150 <HAL_DMA_Init>
 80093b8:	2800      	cmp	r0, #0
 80093ba:	d155      	bne.n	8009468 <HAL_SAI_MspInit+0x12c>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 80093bc:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
 80093c0:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 80093c2:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
}
 80093c6:	b009      	add	sp, #36	; 0x24
 80093c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SAI1_client == 0)
 80093ca:	4c37      	ldr	r4, [pc, #220]	; (80094a8 <HAL_SAI_MspInit+0x16c>)
 80093cc:	6822      	ldr	r2, [r4, #0]
 80093ce:	2a00      	cmp	r2, #0
 80093d0:	d050      	beq.n	8009474 <HAL_SAI_MspInit+0x138>
    SAI1_client ++;
 80093d2:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80093d4:	2174      	movs	r1, #116	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093d6:	2002      	movs	r0, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093d8:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093da:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80093dc:	2306      	movs	r3, #6
    SAI1_client ++;
 80093de:	6022      	str	r2, [r4, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80093e0:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80093e2:	a903      	add	r1, sp, #12
    hdma_sai1_a.Instance = DMA1_Stream1;
 80093e4:	4c34      	ldr	r4, [pc, #208]	; (80094b8 <HAL_SAI_MspInit+0x17c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093e6:	9004      	str	r0, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80093e8:	4830      	ldr	r0, [pc, #192]	; (80094ac <HAL_SAI_MspInit+0x170>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80093ea:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093ec:	e9cd 6705 	strd	r6, r7, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80093f0:	f7f9 fbcc 	bl	8002b8c <HAL_GPIO_Init>
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 80093f4:	2257      	movs	r2, #87	; 0x57
    hdma_sai1_a.Instance = DMA1_Stream1;
 80093f6:	4931      	ldr	r1, [pc, #196]	; (80094bc <HAL_SAI_MspInit+0x180>)
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80093f8:	2340      	movs	r3, #64	; 0x40
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80093fa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80093fe:	62a7      	str	r7, [r4, #40]	; 0x28
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8009400:	f44f 6780 	mov.w	r7, #1024	; 0x400
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8009404:	60e6      	str	r6, [r4, #12]
    hdma_sai1_a.Instance = DMA1_Stream1;
 8009406:	6021      	str	r1, [r4, #0]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8009408:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800940c:	6062      	str	r2, [r4, #4]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800940e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009412:	60a3      	str	r3, [r4, #8]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8009414:	2304      	movs	r3, #4
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8009416:	e9c4 660b 	strd	r6, r6, [r4, #44]	; 0x2c
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800941a:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800941e:	e9c4 7004 	strd	r7, r0, [r4, #16]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8009422:	4620      	mov	r0, r4
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8009424:	e9c4 6106 	strd	r6, r1, [r4, #24]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8009428:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800942c:	f7f7 fe90 	bl	8001150 <HAL_DMA_Init>
 8009430:	b9e8      	cbnz	r0, 800946e <HAL_SAI_MspInit+0x132>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8009432:	63a5      	str	r5, [r4, #56]	; 0x38
 8009434:	682b      	ldr	r3, [r5, #0]
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8009436:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
 800943a:	e786      	b.n	800934a <HAL_SAI_MspInit+0xe>
       __HAL_RCC_SAI1_CLK_ENABLE();
 800943c:	4b20      	ldr	r3, [pc, #128]	; (80094c0 <HAL_SAI_MspInit+0x184>)
      HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 800943e:	4611      	mov	r1, r2
 8009440:	2057      	movs	r0, #87	; 0x57
       __HAL_RCC_SAI1_CLK_ENABLE();
 8009442:	f8d3 60f0 	ldr.w	r6, [r3, #240]	; 0xf0
 8009446:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
 800944a:	f8c3 60f0 	str.w	r6, [r3, #240]	; 0xf0
 800944e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009456:	9302      	str	r3, [sp, #8]
 8009458:	9b02      	ldr	r3, [sp, #8]
      HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 800945a:	f7f7 fd55 	bl	8000f08 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI1_IRQn);
 800945e:	2057      	movs	r0, #87	; 0x57
 8009460:	f7f7 fd88 	bl	8000f74 <HAL_NVIC_EnableIRQ>
 8009464:	6822      	ldr	r2, [r4, #0]
 8009466:	e779      	b.n	800935c <HAL_SAI_MspInit+0x20>
      Error_Handler();
 8009468:	f7ff fef6 	bl	8009258 <Error_Handler>
 800946c:	e7a6      	b.n	80093bc <HAL_SAI_MspInit+0x80>
      Error_Handler();
 800946e:	f7ff fef3 	bl	8009258 <Error_Handler>
 8009472:	e7de      	b.n	8009432 <HAL_SAI_MspInit+0xf6>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8009474:	4b12      	ldr	r3, [pc, #72]	; (80094c0 <HAL_SAI_MspInit+0x184>)
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8009476:	4611      	mov	r1, r2
 8009478:	2057      	movs	r0, #87	; 0x57
       __HAL_RCC_SAI1_CLK_ENABLE();
 800947a:	f8d3 60f0 	ldr.w	r6, [r3, #240]	; 0xf0
 800947e:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
 8009482:	f8c3 60f0 	str.w	r6, [r3, #240]	; 0xf0
 8009486:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800948a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800948e:	9301      	str	r3, [sp, #4]
 8009490:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8009492:	f7f7 fd39 	bl	8000f08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8009496:	2057      	movs	r0, #87	; 0x57
 8009498:	f7f7 fd6c 	bl	8000f74 <HAL_NVIC_EnableIRQ>
 800949c:	6822      	ldr	r2, [r4, #0]
 800949e:	e798      	b.n	80093d2 <HAL_SAI_MspInit+0x96>
 80094a0:	40015804 	.word	0x40015804
 80094a4:	40015824 	.word	0x40015824
 80094a8:	200001c0 	.word	0x200001c0
 80094ac:	58021000 	.word	0x58021000
 80094b0:	2000fca4 	.word	0x2000fca4
 80094b4:	40020040 	.word	0x40020040
 80094b8:	2000fc2c 	.word	0x2000fc2c
 80094bc:	40020028 	.word	0x40020028
 80094c0:	58024400 	.word	0x58024400

080094c4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80094c4:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;  
 80094c6:	4c0a      	ldr	r4, [pc, #40]	; (80094f0 <SD_initialize+0x2c>)
 80094c8:	2501      	movs	r5, #1
 80094ca:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80094cc:	f7ff f858 	bl	8008580 <BSP_SD_Init>
 80094d0:	b108      	cbz	r0, 80094d6 <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80094d2:	7820      	ldrb	r0, [r4, #0]
}
 80094d4:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 80094d6:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 80094d8:	f7ff f826 	bl	8008528 <BSP_SD_GetCardState>
 80094dc:	b918      	cbnz	r0, 80094e6 <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 80094de:	7823      	ldrb	r3, [r4, #0]
 80094e0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80094e4:	7023      	strb	r3, [r4, #0]
  return Stat;
 80094e6:	7823      	ldrb	r3, [r4, #0]
 80094e8:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 80094ea:	7023      	strb	r3, [r4, #0]
  return Stat;
 80094ec:	7820      	ldrb	r0, [r4, #0]
}
 80094ee:	bd38      	pop	{r3, r4, r5, pc}
 80094f0:	20000016 	.word	0x20000016

080094f4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80094f4:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80094f6:	2301      	movs	r3, #1
 80094f8:	4c05      	ldr	r4, [pc, #20]	; (8009510 <SD_status+0x1c>)
 80094fa:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 80094fc:	f7ff f814 	bl	8008528 <BSP_SD_GetCardState>
 8009500:	b918      	cbnz	r0, 800950a <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 8009502:	7823      	ldrb	r3, [r4, #0]
 8009504:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009508:	7023      	strb	r3, [r4, #0]
  return Stat;
 800950a:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 800950c:	bd10      	pop	{r4, pc}
 800950e:	bf00      	nop
 8009510:	20000016 	.word	0x20000016

08009514 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009514:	b508      	push	{r3, lr}
 8009516:	4608      	mov	r0, r1
 8009518:	4611      	mov	r1, r2
 800951a:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800951c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009520:	f7fe ffde 	bl	80084e0 <BSP_SD_ReadBlocks>
 8009524:	b920      	cbnz	r0, 8009530 <SD_read+0x1c>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8009526:	f7fe ffff 	bl	8008528 <BSP_SD_GetCardState>
 800952a:	2800      	cmp	r0, #0
 800952c:	d1fb      	bne.n	8009526 <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 800952e:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8009530:	2001      	movs	r0, #1
}
 8009532:	bd08      	pop	{r3, pc}

08009534 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009534:	4b16      	ldr	r3, [pc, #88]	; (8009590 <SD_ioctl+0x5c>)
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	07db      	lsls	r3, r3, #31
 800953a:	d408      	bmi.n	800954e <SD_ioctl+0x1a>
{
 800953c:	b510      	push	{r4, lr}
 800953e:	4614      	mov	r4, r2
 8009540:	b08a      	sub	sp, #40	; 0x28

  switch (cmd)
 8009542:	2903      	cmp	r1, #3
 8009544:	d821      	bhi.n	800958a <SD_ioctl+0x56>
 8009546:	e8df f001 	tbb	[pc, r1]
 800954a:	0704      	.short	0x0704
 800954c:	170f      	.short	0x170f
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800954e:	2003      	movs	r0, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8009550:	4770      	bx	lr
    res = RES_OK;
 8009552:	2000      	movs	r0, #0
}
 8009554:	b00a      	add	sp, #40	; 0x28
 8009556:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8009558:	a801      	add	r0, sp, #4
 800955a:	f7fe ffef 	bl	800853c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800955e:	9b07      	ldr	r3, [sp, #28]
    res = RES_OK;
 8009560:	2000      	movs	r0, #0
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009562:	6023      	str	r3, [r4, #0]
}
 8009564:	b00a      	add	sp, #40	; 0x28
 8009566:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8009568:	a801      	add	r0, sp, #4
 800956a:	f7fe ffe7 	bl	800853c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800956e:	9b08      	ldr	r3, [sp, #32]
    res = RES_OK;
 8009570:	2000      	movs	r0, #0
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009572:	8023      	strh	r3, [r4, #0]
}
 8009574:	b00a      	add	sp, #40	; 0x28
 8009576:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8009578:	a801      	add	r0, sp, #4
 800957a:	f7fe ffdf 	bl	800853c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800957e:	9b08      	ldr	r3, [sp, #32]
 8009580:	2000      	movs	r0, #0
 8009582:	0a5b      	lsrs	r3, r3, #9
 8009584:	6023      	str	r3, [r4, #0]
}
 8009586:	b00a      	add	sp, #40	; 0x28
 8009588:	bd10      	pop	{r4, pc}
    res = RES_PARERR;
 800958a:	2004      	movs	r0, #4
}
 800958c:	b00a      	add	sp, #40	; 0x28
 800958e:	bd10      	pop	{r4, pc}
 8009590:	20000016 	.word	0x20000016

08009594 <SD_write>:
{
 8009594:	b508      	push	{r3, lr}
 8009596:	4608      	mov	r0, r1
 8009598:	4611      	mov	r1, r2
 800959a:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800959c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095a0:	f7fe ffb0 	bl	8008504 <BSP_SD_WriteBlocks>
 80095a4:	b920      	cbnz	r0, 80095b0 <SD_write+0x1c>
    while(BSP_SD_GetCardState()!= MSD_OK)
 80095a6:	f7fe ffbf 	bl	8008528 <BSP_SD_GetCardState>
 80095aa:	2800      	cmp	r0, #0
 80095ac:	d1fb      	bne.n	80095a6 <SD_write+0x12>
}
 80095ae:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 80095b0:	2001      	movs	r0, #1
}
 80095b2:	bd08      	pop	{r3, pc}

080095b4 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80095b4:	b430      	push	{r4, r5}

  hsd1.Instance = SDMMC1;
 80095b6:	4b08      	ldr	r3, [pc, #32]	; (80095d8 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80095b8:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  hsd1.Instance = SDMMC1;
 80095bc:	4d07      	ldr	r5, [pc, #28]	; (80095dc <MX_SDMMC1_SD_Init+0x28>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80095be:	2200      	movs	r2, #0
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 16;
 80095c0:	2010      	movs	r0, #16
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80095c2:	2101      	movs	r1, #1
  hsd1.Instance = SDMMC1;
 80095c4:	601d      	str	r5, [r3, #0]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80095c6:	60dc      	str	r4, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80095c8:	611a      	str	r2, [r3, #16]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80095ca:	e9c3 0105 	strd	r0, r1, [r3, #20]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80095ce:	e9c3 2201 	strd	r2, r2, [r3, #4]

}
 80095d2:	bc30      	pop	{r4, r5}
 80095d4:	4770      	bx	lr
 80095d6:	bf00      	nop
 80095d8:	2000fdb4 	.word	0x2000fdb4
 80095dc:	52007000 	.word	0x52007000

080095e0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80095e0:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
 80095e2:	4b2b      	ldr	r3, [pc, #172]	; (8009690 <HAL_SD_MspInit+0xb0>)
{
 80095e4:	b089      	sub	sp, #36	; 0x24
  if(sdHandle->Instance==SDMMC1)
 80095e6:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095e8:	2400      	movs	r4, #0
  if(sdHandle->Instance==SDMMC1)
 80095ea:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095ec:	9407      	str	r4, [sp, #28]
 80095ee:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80095f2:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(sdHandle->Instance==SDMMC1)
 80095f6:	d001      	beq.n	80095fc <HAL_SD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80095f8:	b009      	add	sp, #36	; 0x24
 80095fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80095fc:	4b25      	ldr	r3, [pc, #148]	; (8009694 <HAL_SD_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80095fe:	260c      	movs	r6, #12
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8009600:	f44f 50f8 	mov.w	r0, #7936	; 0x1f00
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009604:	2501      	movs	r5, #1
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8009606:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800960a:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800960c:	eb0d 0106 	add.w	r1, sp, r6
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8009610:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009614:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8009618:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800961c:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8009620:	9200      	str	r2, [sp, #0]
 8009622:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009624:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009628:	f042 0204 	orr.w	r2, r2, #4
 800962c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009630:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009634:	f002 0204 	and.w	r2, r2, #4
 8009638:	9201      	str	r2, [sp, #4]
 800963a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800963c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009640:	f042 0208 	orr.w	r2, r2, #8
 8009644:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800964c:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800964e:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009652:	4811      	ldr	r0, [pc, #68]	; (8009698 <HAL_SD_MspInit+0xb8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009654:	9704      	str	r7, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009656:	9302      	str	r3, [sp, #8]
 8009658:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800965a:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800965c:	e9cd 5505 	strd	r5, r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009660:	f7f9 fa94 	bl	8002b8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009664:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009666:	eb0d 0106 	add.w	r1, sp, r6
 800966a:	480c      	ldr	r0, [pc, #48]	; (800969c <HAL_SD_MspInit+0xbc>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800966c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800966e:	e9cd 7504 	strd	r7, r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8009672:	e9cd 5606 	strd	r5, r6, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009676:	f7f9 fa89 	bl	8002b8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 7, 0);
 800967a:	4622      	mov	r2, r4
 800967c:	2107      	movs	r1, #7
 800967e:	2031      	movs	r0, #49	; 0x31
 8009680:	f7f7 fc42 	bl	8000f08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8009684:	2031      	movs	r0, #49	; 0x31
 8009686:	f7f7 fc75 	bl	8000f74 <HAL_NVIC_EnableIRQ>
}
 800968a:	b009      	add	sp, #36	; 0x24
 800968c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800968e:	bf00      	nop
 8009690:	52007000 	.word	0x52007000
 8009694:	58024400 	.word	0x58024400
 8009698:	58020800 	.word	0x58020800
 800969c:	58020c00 	.word	0x58020c00

080096a0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80096a0:	4b07      	ldr	r3, [pc, #28]	; (80096c0 <HAL_MspInit+0x20>)
{
 80096a2:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80096a4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80096a8:	f042 0202 	orr.w	r2, r2, #2
 80096ac:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80096b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80096b4:	f003 0302 	and.w	r3, r3, #2
 80096b8:	9301      	str	r3, [sp, #4]
 80096ba:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80096bc:	b002      	add	sp, #8
 80096be:	4770      	bx	lr
 80096c0:	58024400 	.word	0x58024400

080096c4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80096c4:	4770      	bx	lr
 80096c6:	bf00      	nop

080096c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80096c8:	e7fe      	b.n	80096c8 <HardFault_Handler>
 80096ca:	bf00      	nop

080096cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80096cc:	e7fe      	b.n	80096cc <MemManage_Handler>
 80096ce:	bf00      	nop

080096d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80096d0:	e7fe      	b.n	80096d0 <BusFault_Handler>
 80096d2:	bf00      	nop

080096d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80096d4:	e7fe      	b.n	80096d4 <UsageFault_Handler>
 80096d6:	bf00      	nop

080096d8 <SVC_Handler>:
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop

080096dc <DebugMon_Handler>:
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop

080096e0 <PendSV_Handler>:
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop

080096e4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80096e4:	f7f6 be50 	b.w	8000388 <HAL_IncTick>

080096e8 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80096e8:	4801      	ldr	r0, [pc, #4]	; (80096f0 <DMA1_Stream0_IRQHandler+0x8>)
 80096ea:	f7f8 be2f 	b.w	800234c <HAL_DMA_IRQHandler>
 80096ee:	bf00      	nop
 80096f0:	20000230 	.word	0x20000230

080096f4 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80096f4:	4801      	ldr	r0, [pc, #4]	; (80096fc <DMA1_Stream1_IRQHandler+0x8>)
 80096f6:	f7f8 be29 	b.w	800234c <HAL_DMA_IRQHandler>
 80096fa:	bf00      	nop
 80096fc:	2000fc2c 	.word	0x2000fc2c

08009700 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8009700:	4801      	ldr	r0, [pc, #4]	; (8009708 <DMA1_Stream2_IRQHandler+0x8>)
 8009702:	f7f8 be23 	b.w	800234c <HAL_DMA_IRQHandler>
 8009706:	bf00      	nop
 8009708:	2000fca4 	.word	0x2000fca4

0800970c <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800970c:	4801      	ldr	r0, [pc, #4]	; (8009714 <SDMMC1_IRQHandler+0x8>)
 800970e:	f7fd ba77 	b.w	8006c00 <HAL_SD_IRQHandler>
 8009712:	bf00      	nop
 8009714:	2000fdb4 	.word	0x2000fdb4

08009718 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8009718:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 800971a:	4804      	ldr	r0, [pc, #16]	; (800972c <SAI1_IRQHandler+0x14>)
 800971c:	f7fc faba 	bl	8005c94 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB1);
 8009720:	4803      	ldr	r0, [pc, #12]	; (8009730 <SAI1_IRQHandler+0x18>)
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8009722:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SAI_IRQHandler(&hsai_BlockB1);
 8009726:	f7fc bab5 	b.w	8005c94 <HAL_SAI_IRQHandler>
 800972a:	bf00      	nop
 800972c:	2000fd1c 	.word	0x2000fd1c
 8009730:	2000fb94 	.word	0x2000fb94

08009734 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009734:	b430      	push	{r4, r5}
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009736:	4c19      	ldr	r4, [pc, #100]	; (800979c <SystemInit+0x68>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009738:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 800973a:	4b19      	ldr	r3, [pc, #100]	; (80097a0 <SystemInit+0x6c>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800973c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8009740:	4818      	ldr	r0, [pc, #96]	; (80097a4 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009742:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8009746:	4d18      	ldr	r5, [pc, #96]	; (80097a8 <SystemInit+0x74>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009748:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 800974c:	681c      	ldr	r4, [r3, #0]
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800974e:	4917      	ldr	r1, [pc, #92]	; (80097ac <SystemInit+0x78>)
  RCC->CR |= RCC_CR_HSION;
 8009750:	f044 0401 	orr.w	r4, r4, #1
 8009754:	601c      	str	r4, [r3, #0]
  RCC->CFGR = 0x00000000;
 8009756:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8009758:	681c      	ldr	r4, [r3, #0]
 800975a:	4020      	ands	r0, r4
 800975c:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 800975e:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8009760:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8009762:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 8009764:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 8009766:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 8009768:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 800976a:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 800976c:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 800976e:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 8009770:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8009772:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8009774:	6818      	ldr	r0, [r3, #0]
 8009776:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800977a:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 800977c:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800977e:	682b      	ldr	r3, [r5, #0]
 8009780:	4019      	ands	r1, r3
 8009782:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8009786:	d202      	bcs.n	800978e <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8009788:	4b09      	ldr	r3, [pc, #36]	; (80097b0 <SystemInit+0x7c>)
 800978a:	2201      	movs	r2, #1
 800978c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800978e:	4b03      	ldr	r3, [pc, #12]	; (800979c <SystemInit+0x68>)
 8009790:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009794:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8009796:	bc30      	pop	{r4, r5}
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	e000ed00 	.word	0xe000ed00
 80097a0:	58024400 	.word	0x58024400
 80097a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80097a8:	5c001000 	.word	0x5c001000
 80097ac:	ffff0000 	.word	0xffff0000
 80097b0:	51008108 	.word	0x51008108

080097b4 <RGB_LED_setColor>:
	fractPart = floatyPoint - ((float)intPart);
	endValue = (redScaled[intPart] * 1.2f * (1.0f - fractPart)) + (redScaled[intPart + 1] * 1.2f* (fractPart));

	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_E].CMP2xR = (uint16_t)endValue;

	floatyPoint = ((float)Green) * 0.0625f;
 80097b4:	ee07 1a10 	vmov	s14, r1
	floatyPoint = ((float)Red) * 0.0625f;
 80097b8:	ee07 0a90 	vmov	s15, r0
	fractPart = floatyPoint - ((float)intPart);
	endValue = (greenScaled[intPart] * (1.0f - fractPart)) + (greenScaled[intPart + 1] * (fractPart));

	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP2xR =(uint16_t)endValue;

	floatyPoint = ((float)Blue) * 0.0625f;
 80097bc:	ee06 2a90 	vmov	s13, r2
	endValue = (redScaled[intPart] * 1.2f * (1.0f - fractPart)) + (redScaled[intPart + 1] * 1.2f* (fractPart));
 80097c0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
	floatyPoint = ((float)Green) * 0.0625f;
 80097c4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	endValue = (redScaled[intPart] * 1.2f * (1.0f - fractPart)) + (redScaled[intPart + 1] * 1.2f* (fractPart));
 80097c8:	eddf 4a45 	vldr	s9, [pc, #276]	; 80098e0 <RGB_LED_setColor+0x12c>
	floatyPoint = ((float)Red) * 0.0625f;
 80097cc:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80097d0:	eddf 7a44 	vldr	s15, [pc, #272]	; 80098e4 <RGB_LED_setColor+0x130>
	floatyPoint = ((float)Blue) * 0.0625f;
 80097d4:	eef8 6a66 	vcvt.f32.u32	s13, s13
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_E].CMP2xR = (uint16_t)endValue;
 80097d8:	4843      	ldr	r0, [pc, #268]	; (80098e8 <RGB_LED_setColor+0x134>)
	floatyPoint = ((float)Green) * 0.0625f;
 80097da:	ee27 7a27 	vmul.f32	s14, s14, s15
	floatyPoint = ((float)Red) * 0.0625f;
 80097de:	ee26 6a27 	vmul.f32	s12, s12, s15
	floatyPoint = ((float)Blue) * 0.0625f;
 80097e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
	intPart = (uint8_t)floatyPoint;
 80097e6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
	intPart = (uint8_t)floatyPoint;
 80097ea:	eebc 5ac6 	vcvt.u32.f32	s10, s12
{
 80097ee:	b4f0      	push	{r4, r5, r6, r7}
 80097f0:	b082      	sub	sp, #8
	endValue = (redScaled[intPart] * 1.2f * (1.0f - fractPart)) + (redScaled[intPart + 1] * 1.2f* (fractPart));
 80097f2:	4e3e      	ldr	r6, [pc, #248]	; (80098ec <RGB_LED_setColor+0x138>)
	endValue = (greenScaled[intPart] * (1.0f - fractPart)) + (greenScaled[intPart + 1] * (fractPart));
 80097f4:	4d3e      	ldr	r5, [pc, #248]	; (80098f0 <RGB_LED_setColor+0x13c>)
	intPart = (uint8_t)floatyPoint;
 80097f6:	edcd 7a01 	vstr	s15, [sp, #4]
	intPart = (uint8_t)floatyPoint;
 80097fa:	eefc 7ae6 	vcvt.u32.f32	s15, s13
	intPart = (uint8_t)floatyPoint;
 80097fe:	ed8d 5a00 	vstr	s10, [sp]
 8009802:	f89d 3000 	ldrb.w	r3, [sp]
	intPart = (uint8_t)floatyPoint;
 8009806:	edcd 7a00 	vstr	s15, [sp]
	endValue = (redScaled[intPart] * 1.2f * (1.0f - fractPart)) + (redScaled[intPart + 1] * 1.2f* (fractPart));
 800980a:	1c5a      	adds	r2, r3, #1
	fractPart = floatyPoint - ((float)intPart);
 800980c:	ee07 3a90 	vmov	s15, r3
	endValue = (redScaled[intPart] * 1.2f * (1.0f - fractPart)) + (redScaled[intPart + 1] * 1.2f* (fractPart));
 8009810:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
	fractPart = floatyPoint - ((float)intPart);
 8009814:	eeb8 4a67 	vcvt.f32.u32	s8, s15
	intPart = (uint8_t)floatyPoint;
 8009818:	f89d 1004 	ldrb.w	r1, [sp, #4]
	endValue = (redScaled[intPart] * 1.2f * (1.0f - fractPart)) + (redScaled[intPart + 1] * 1.2f* (fractPart));
 800981c:	ee05 3a10 	vmov	s10, r3
 8009820:	f836 3012 	ldrh.w	r3, [r6, r2, lsl #1]
	intPart = (uint8_t)floatyPoint;
 8009824:	f89d 2000 	ldrb.w	r2, [sp]
	endValue = (greenScaled[intPart] * (1.0f - fractPart)) + (greenScaled[intPart + 1] * (fractPart));
 8009828:	1c4f      	adds	r7, r1, #1
	endValue = (redScaled[intPart] * 1.2f * (1.0f - fractPart)) + (redScaled[intPart + 1] * 1.2f* (fractPart));
 800982a:	ee07 3a90 	vmov	s15, r3
	fractPart = floatyPoint - ((float)intPart);
 800982e:	ee36 6a44 	vsub.f32	s12, s12, s8
	endValue = (redScaled[intPart] * 1.2f * (1.0f - fractPart)) + (redScaled[intPart + 1] * 1.2f* (fractPart));
 8009832:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
	fractPart = floatyPoint - ((float)intPart);
	endValue = (blueScaled[intPart] * (1.0f - fractPart)) + (blueScaled[intPart + 1] * (fractPart));
 8009836:	4c2f      	ldr	r4, [pc, #188]	; (80098f4 <RGB_LED_setColor+0x140>)
	endValue = (redScaled[intPart] * 1.2f * (1.0f - fractPart)) + (redScaled[intPart + 1] * 1.2f* (fractPart));
 8009838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	endValue = (blueScaled[intPart] * (1.0f - fractPart)) + (blueScaled[intPart + 1] * (fractPart));
 800983c:	1c56      	adds	r6, r2, #1
	endValue = (redScaled[intPart] * 1.2f * (1.0f - fractPart)) + (redScaled[intPart + 1] * 1.2f* (fractPart));
 800983e:	ee35 4ac6 	vsub.f32	s8, s11, s12
 8009842:	ee67 7a86 	vmul.f32	s15, s15, s12
	fractPart = floatyPoint - ((float)intPart);
 8009846:	ee06 1a10 	vmov	s12, r1
 800984a:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	endValue = (redScaled[intPart] * 1.2f * (1.0f - fractPart)) + (redScaled[intPart + 1] * 1.2f* (fractPart));
 800984e:	eee5 7a04 	vfma.f32	s15, s10, s8
	fractPart = floatyPoint - ((float)intPart);
 8009852:	ee37 6a46 	vsub.f32	s12, s14, s12
	fractPart = floatyPoint - ((float)intPart);
 8009856:	ee07 2a10 	vmov	s14, r2
 800985a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	endValue = (greenScaled[intPart] * (1.0f - fractPart)) + (greenScaled[intPart + 1] * (fractPart));
 800985e:	ee35 5ac6 	vsub.f32	s10, s11, s12
	endValue = (redScaled[intPart] * 1.2f * (1.0f - fractPart)) + (redScaled[intPart + 1] * 1.2f* (fractPart));
 8009862:	ee67 7aa4 	vmul.f32	s15, s15, s9
	fractPart = floatyPoint - ((float)intPart);
 8009866:	ee76 6ac7 	vsub.f32	s13, s13, s14
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_E].CMP2xR = (uint16_t)endValue;
 800986a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	endValue = (blueScaled[intPart] * (1.0f - fractPart)) + (blueScaled[intPart + 1] * (fractPart));
 800986e:	ee75 5ae6 	vsub.f32	s11, s11, s13
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_E].CMP2xR = (uint16_t)endValue;
 8009872:	ee17 3a90 	vmov	r3, s15
 8009876:	b29b      	uxth	r3, r3
 8009878:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
	endValue = (greenScaled[intPart] * (1.0f - fractPart)) + (greenScaled[intPart + 1] * (fractPart));
 800987c:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
 8009880:	ee07 3a10 	vmov	s14, r3
 8009884:	f835 3011 	ldrh.w	r3, [r5, r1, lsl #1]
 8009888:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800988c:	ee07 3a90 	vmov	s15, r3
 8009890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009894:	ee27 7a06 	vmul.f32	s14, s14, s12
 8009898:	eea7 7a85 	vfma.f32	s14, s15, s10
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP2xR =(uint16_t)endValue;
 800989c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80098a0:	ee17 3a10 	vmov	r3, s14
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
	endValue = (blueScaled[intPart] * (1.0f - fractPart)) + (blueScaled[intPart + 1] * (fractPart));
 80098aa:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
 80098ae:	ee07 3a90 	vmov	s15, r3
 80098b2:	f834 3012 	ldrh.w	r3, [r4, r2, lsl #1]
 80098b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098ba:	ee07 3a10 	vmov	s14, r3
 80098be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80098c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80098c6:	eee7 7a25 	vfma.f32	s15, s14, s11

	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP1xR =(uint16_t)endValue;
 80098ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098ce:	ee17 3a90 	vmov	r3, s15
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	f8c0 319c 	str.w	r3, [r0, #412]	; 0x19c

}
 80098d8:	b002      	add	sp, #8
 80098da:	bcf0      	pop	{r4, r5, r6, r7}
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	3f99999a 	.word	0x3f99999a
 80098e4:	3d800000 	.word	0x3d800000
 80098e8:	40017400 	.word	0x40017400
 80098ec:	2000007c 	.word	0x2000007c
 80098f0:	20000058 	.word	0x20000058
 80098f4:	20000020 	.word	0x20000020

080098f8 <setLED_D>:
}


void setLED_D(uint8_t brightness)//inputs between 0-255
{
	if (brightness > 5)
 80098f8:	2805      	cmp	r0, #5
 80098fa:	d804      	bhi.n	8009906 <setLED_D+0xe>
	{
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP2xR =((uint16_t)brightness) << 6;
	}
	else
	{
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP2xR = 200;
 80098fc:	4b04      	ldr	r3, [pc, #16]	; (8009910 <setLED_D+0x18>)
 80098fe:	22c8      	movs	r2, #200	; 0xc8
 8009900:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	}
}
 8009904:	4770      	bx	lr
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP2xR =((uint16_t)brightness) << 6;
 8009906:	0180      	lsls	r0, r0, #6
 8009908:	4b01      	ldr	r3, [pc, #4]	; (8009910 <setLED_D+0x18>)
 800990a:	f8c3 0224 	str.w	r0, [r3, #548]	; 0x224
 800990e:	4770      	bx	lr
 8009910:	40017400 	.word	0x40017400

08009914 <buttonCheck>:


uint8_t buttonState[10];

void buttonCheck(void)
{
 8009914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (codecReady)
 8009916:	4b5a      	ldr	r3, [pc, #360]	; (8009a80 <buttonCheck+0x16c>)
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	b903      	cbnz	r3, 800991e <buttonCheck+0xa>

		}


	}
}
 800991c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		buttonValues[0] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13);//A
 800991e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009922:	4858      	ldr	r0, [pc, #352]	; (8009a84 <buttonCheck+0x170>)
 8009924:	f7f9 fa56 	bl	8002dd4 <HAL_GPIO_ReadPin>
 8009928:	fab0 f380 	clz	r3, r0
 800992c:	4c56      	ldr	r4, [pc, #344]	; (8009a88 <buttonCheck+0x174>)
		buttonValues[1] = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6); //B
 800992e:	2140      	movs	r1, #64	; 0x40
		buttonValues[0] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13);//A
 8009930:	095b      	lsrs	r3, r3, #5
		buttonValues[1] = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6); //B
 8009932:	4856      	ldr	r0, [pc, #344]	; (8009a8c <buttonCheck+0x178>)
		buttonValues[0] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13);//A
 8009934:	7023      	strb	r3, [r4, #0]
		buttonValues[1] = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6); //B
 8009936:	f7f9 fa4d 	bl	8002dd4 <HAL_GPIO_ReadPin>
 800993a:	fab0 f380 	clz	r3, r0
		buttonValues[2] = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7); //C
 800993e:	2180      	movs	r1, #128	; 0x80
 8009940:	4852      	ldr	r0, [pc, #328]	; (8009a8c <buttonCheck+0x178>)
		buttonValues[1] = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6); //B
 8009942:	095b      	lsrs	r3, r3, #5
 8009944:	7063      	strb	r3, [r4, #1]
		buttonValues[2] = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7); //C
 8009946:	f7f9 fa45 	bl	8002dd4 <HAL_GPIO_ReadPin>
 800994a:	fab0 f380 	clz	r3, r0
		buttonValues[3] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_6); //D
 800994e:	2140      	movs	r1, #64	; 0x40
 8009950:	484f      	ldr	r0, [pc, #316]	; (8009a90 <buttonCheck+0x17c>)
		buttonValues[2] = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7); //C
 8009952:	095b      	lsrs	r3, r3, #5
 8009954:	70a3      	strb	r3, [r4, #2]
		buttonValues[3] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_6); //D
 8009956:	f7f9 fa3d 	bl	8002dd4 <HAL_GPIO_ReadPin>
			if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] < 1))
 800995a:	4a4e      	ldr	r2, [pc, #312]	; (8009a94 <buttonCheck+0x180>)
		buttonValues[3] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_6); //D
 800995c:	fab0 f180 	clz	r1, r0
			if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] < 1))
 8009960:	7826      	ldrb	r6, [r4, #0]
 8009962:	7813      	ldrb	r3, [r2, #0]
		buttonValues[3] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_6); //D
 8009964:	0949      	lsrs	r1, r1, #5
			if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] < 1))
 8009966:	42b3      	cmp	r3, r6
		buttonValues[3] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_6); //D
 8009968:	70e1      	strb	r1, [r4, #3]
			if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] < 1))
 800996a:	d060      	beq.n	8009a2e <buttonCheck+0x11a>
 800996c:	4b4a      	ldr	r3, [pc, #296]	; (8009a98 <buttonCheck+0x184>)
 800996e:	681d      	ldr	r5, [r3, #0]
 8009970:	2d00      	cmp	r5, #0
 8009972:	d134      	bne.n	80099de <buttonCheck+0xca>
				buttonCounters[i]++;
 8009974:	2601      	movs	r6, #1
 8009976:	4d49      	ldr	r5, [pc, #292]	; (8009a9c <buttonCheck+0x188>)
 8009978:	601e      	str	r6, [r3, #0]
			if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] < 1))
 800997a:	7866      	ldrb	r6, [r4, #1]
 800997c:	7853      	ldrb	r3, [r2, #1]
 800997e:	42b3      	cmp	r3, r6
 8009980:	d005      	beq.n	800998e <buttonCheck+0x7a>
 8009982:	4b45      	ldr	r3, [pc, #276]	; (8009a98 <buttonCheck+0x184>)
 8009984:	685f      	ldr	r7, [r3, #4]
 8009986:	2f00      	cmp	r7, #0
 8009988:	d13b      	bne.n	8009a02 <buttonCheck+0xee>
				buttonCounters[i]++;
 800998a:	2601      	movs	r6, #1
 800998c:	605e      	str	r6, [r3, #4]
			if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] < 1))
 800998e:	78a4      	ldrb	r4, [r4, #2]
 8009990:	7893      	ldrb	r3, [r2, #2]
 8009992:	42a3      	cmp	r3, r4
 8009994:	d005      	beq.n	80099a2 <buttonCheck+0x8e>
 8009996:	4b40      	ldr	r3, [pc, #256]	; (8009a98 <buttonCheck+0x184>)
 8009998:	689e      	ldr	r6, [r3, #8]
 800999a:	2e00      	cmp	r6, #0
 800999c:	d13d      	bne.n	8009a1a <buttonCheck+0x106>
				buttonCounters[i]++;
 800999e:	2401      	movs	r4, #1
 80099a0:	609c      	str	r4, [r3, #8]
			if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] < 1))
 80099a2:	78d3      	ldrb	r3, [r2, #3]
 80099a4:	428b      	cmp	r3, r1
 80099a6:	d004      	beq.n	80099b2 <buttonCheck+0x9e>
 80099a8:	4b3b      	ldr	r3, [pc, #236]	; (8009a98 <buttonCheck+0x184>)
 80099aa:	68dc      	ldr	r4, [r3, #12]
 80099ac:	bb04      	cbnz	r4, 80099f0 <buttonCheck+0xdc>
				buttonCounters[i]++;
 80099ae:	2201      	movs	r2, #1
 80099b0:	60da      	str	r2, [r3, #12]
		if (buttonPressed[0] == 1)
 80099b2:	782b      	ldrb	r3, [r5, #0]
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d03c      	beq.n	8009a32 <buttonCheck+0x11e>
		if (buttonPressed[1] == 1)
 80099b8:	786b      	ldrb	r3, [r5, #1]
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d1ae      	bne.n	800991c <buttonCheck+0x8>
			distortionMode = !distortionMode;
 80099be:	4a38      	ldr	r2, [pc, #224]	; (8009aa0 <buttonCheck+0x18c>)
 80099c0:	6813      	ldr	r3, [r2, #0]
 80099c2:	fab3 f383 	clz	r3, r3
 80099c6:	095b      	lsrs	r3, r3, #5
 80099c8:	6013      	str	r3, [r2, #0]
	if (brightness > 5)
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d041      	beq.n	8009a52 <buttonCheck+0x13e>
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP2xR =((uint16_t)brightness) << 6;
 80099ce:	4b35      	ldr	r3, [pc, #212]	; (8009aa4 <buttonCheck+0x190>)
 80099d0:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 80099d4:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
			buttonPressed[1] = 0;
 80099d8:	2300      	movs	r3, #0
 80099da:	706b      	strb	r3, [r5, #1]
}
 80099dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (buttonValues[i] == 1)
 80099de:	2e01      	cmp	r6, #1
 80099e0:	d048      	beq.n	8009a74 <buttonCheck+0x160>
				else if (buttonValues[i] == 0)
 80099e2:	2e00      	cmp	r6, #0
 80099e4:	d03a      	beq.n	8009a5c <buttonCheck+0x148>
 80099e6:	4d2d      	ldr	r5, [pc, #180]	; (8009a9c <buttonCheck+0x188>)
				buttonCounters[i] = 0;
 80099e8:	2700      	movs	r7, #0
				buttonValuesPrev[i] = buttonValues[i];
 80099ea:	7016      	strb	r6, [r2, #0]
				buttonCounters[i] = 0;
 80099ec:	601f      	str	r7, [r3, #0]
 80099ee:	e7c4      	b.n	800997a <buttonCheck+0x66>
				if (buttonValues[i] == 1)
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d03a      	beq.n	8009a6a <buttonCheck+0x156>
					buttonReleased[i] = 1;
 80099f4:	482c      	ldr	r0, [pc, #176]	; (8009aa8 <buttonCheck+0x194>)
 80099f6:	2401      	movs	r4, #1
 80099f8:	70c4      	strb	r4, [r0, #3]
				buttonCounters[i] = 0;
 80099fa:	2000      	movs	r0, #0
				buttonValuesPrev[i] = buttonValues[i];
 80099fc:	70d1      	strb	r1, [r2, #3]
				buttonCounters[i] = 0;
 80099fe:	60d8      	str	r0, [r3, #12]
 8009a00:	e7d7      	b.n	80099b2 <buttonCheck+0x9e>
				if (buttonValues[i] == 1)
 8009a02:	2e01      	cmp	r6, #1
 8009a04:	d034      	beq.n	8009a70 <buttonCheck+0x15c>
				else if (buttonValues[i] == 0)
 8009a06:	b926      	cbnz	r6, 8009a12 <buttonCheck+0xfe>
					buttonReleased[i] = 1;
 8009a08:	4f27      	ldr	r7, [pc, #156]	; (8009aa8 <buttonCheck+0x194>)
 8009a0a:	f04f 0c01 	mov.w	ip, #1
 8009a0e:	f887 c001 	strb.w	ip, [r7, #1]
				buttonCounters[i] = 0;
 8009a12:	2700      	movs	r7, #0
				buttonValuesPrev[i] = buttonValues[i];
 8009a14:	7056      	strb	r6, [r2, #1]
				buttonCounters[i] = 0;
 8009a16:	605f      	str	r7, [r3, #4]
 8009a18:	e7b9      	b.n	800998e <buttonCheck+0x7a>
				if (buttonValues[i] == 1)
 8009a1a:	2c01      	cmp	r4, #1
 8009a1c:	d02d      	beq.n	8009a7a <buttonCheck+0x166>
				else if (buttonValues[i] == 0)
 8009a1e:	b914      	cbnz	r4, 8009a26 <buttonCheck+0x112>
					buttonReleased[i] = 1;
 8009a20:	4e21      	ldr	r6, [pc, #132]	; (8009aa8 <buttonCheck+0x194>)
 8009a22:	2701      	movs	r7, #1
 8009a24:	70b7      	strb	r7, [r6, #2]
				buttonCounters[i] = 0;
 8009a26:	2600      	movs	r6, #0
				buttonValuesPrev[i] = buttonValues[i];
 8009a28:	7094      	strb	r4, [r2, #2]
				buttonCounters[i] = 0;
 8009a2a:	609e      	str	r6, [r3, #8]
 8009a2c:	e7b9      	b.n	80099a2 <buttonCheck+0x8e>
 8009a2e:	4d1b      	ldr	r5, [pc, #108]	; (8009a9c <buttonCheck+0x188>)
 8009a30:	e7a3      	b.n	800997a <buttonCheck+0x66>
			previousPreset = currentPreset;
 8009a32:	4e1e      	ldr	r6, [pc, #120]	; (8009aac <buttonCheck+0x198>)
			if (currentPreset >= PresetNil - 1) currentPreset = 0;
 8009a34:	2400      	movs	r4, #0

void displayColorsForCurrentPreset(void)
{
	RGB_LED_setColor(colorsForPresets[currentPreset][0], colorsForPresets[currentPreset][1], colorsForPresets[currentPreset][2]);
 8009a36:	481e      	ldr	r0, [pc, #120]	; (8009ab0 <buttonCheck+0x19c>)
			previousPreset = currentPreset;
 8009a38:	7831      	ldrb	r1, [r6, #0]
 8009a3a:	4a1e      	ldr	r2, [pc, #120]	; (8009ab4 <buttonCheck+0x1a0>)
			loadingPreset = 1;
 8009a3c:	4f1e      	ldr	r7, [pc, #120]	; (8009ab8 <buttonCheck+0x1a4>)
			previousPreset = currentPreset;
 8009a3e:	7011      	strb	r1, [r2, #0]
	RGB_LED_setColor(colorsForPresets[currentPreset][0], colorsForPresets[currentPreset][1], colorsForPresets[currentPreset][2]);
 8009a40:	7882      	ldrb	r2, [r0, #2]
 8009a42:	7841      	ldrb	r1, [r0, #1]
 8009a44:	7800      	ldrb	r0, [r0, #0]
			if (currentPreset >= PresetNil - 1) currentPreset = 0;
 8009a46:	7034      	strb	r4, [r6, #0]
			loadingPreset = 1;
 8009a48:	703b      	strb	r3, [r7, #0]
	RGB_LED_setColor(colorsForPresets[currentPreset][0], colorsForPresets[currentPreset][1], colorsForPresets[currentPreset][2]);
 8009a4a:	f7ff feb3 	bl	80097b4 <RGB_LED_setColor>
			buttonPressed[0] = 0;
 8009a4e:	702c      	strb	r4, [r5, #0]
 8009a50:	e7b2      	b.n	80099b8 <buttonCheck+0xa4>
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP2xR = 200;
 8009a52:	4b14      	ldr	r3, [pc, #80]	; (8009aa4 <buttonCheck+0x190>)
 8009a54:	22c8      	movs	r2, #200	; 0xc8
 8009a56:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 8009a5a:	e7bd      	b.n	80099d8 <buttonCheck+0xc4>
					buttonReleased[i] = 1;
 8009a5c:	4f12      	ldr	r7, [pc, #72]	; (8009aa8 <buttonCheck+0x194>)
 8009a5e:	f04f 0c01 	mov.w	ip, #1
 8009a62:	4d0e      	ldr	r5, [pc, #56]	; (8009a9c <buttonCheck+0x188>)
 8009a64:	f887 c000 	strb.w	ip, [r7]
 8009a68:	e7be      	b.n	80099e8 <buttonCheck+0xd4>
					buttonPressed[i] = 1;
 8009a6a:	2001      	movs	r0, #1
 8009a6c:	70e8      	strb	r0, [r5, #3]
 8009a6e:	e7c4      	b.n	80099fa <buttonCheck+0xe6>
 8009a70:	706e      	strb	r6, [r5, #1]
 8009a72:	e7ce      	b.n	8009a12 <buttonCheck+0xfe>
 8009a74:	4d09      	ldr	r5, [pc, #36]	; (8009a9c <buttonCheck+0x188>)
 8009a76:	702e      	strb	r6, [r5, #0]
 8009a78:	e7b6      	b.n	80099e8 <buttonCheck+0xd4>
 8009a7a:	70ac      	strb	r4, [r5, #2]
 8009a7c:	e7d3      	b.n	8009a26 <buttonCheck+0x112>
 8009a7e:	bf00      	nop
 8009a80:	200001b0 	.word	0x200001b0
 8009a84:	58020c00 	.word	0x58020c00
 8009a88:	2000fe5c 	.word	0x2000fe5c
 8009a8c:	58020800 	.word	0x58020800
 8009a90:	58021800 	.word	0x58021800
 8009a94:	2000fe34 	.word	0x2000fe34
 8009a98:	2000fe4c 	.word	0x2000fe4c
 8009a9c:	2000fe48 	.word	0x2000fe48
 8009aa0:	200001b4 	.word	0x200001b4
 8009aa4:	40017400 	.word	0x40017400
 8009aa8:	2000fe38 	.word	0x2000fe38
 8009aac:	200001c4 	.word	0x200001c4
 8009ab0:	20000044 	.word	0x20000044
 8009ab4:	2000007a 	.word	0x2000007a
 8009ab8:	200001c5 	.word	0x200001c5

08009abc <tOversampler_init>:
//============================================================================================================
// Oversampler
//============================================================================================================
// Latency is equal to the phase length (numTaps / ratio)
void tOversampler_init (tOversampler* const osr, int ratio, int extraQuality, LEAF* const leaf)
{
 8009abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    tOversampler_initToPool(osr, ratio, extraQuality, &leaf->mempool);
}

void tOversampler_initToPool (tOversampler* const osr, int ratio, int extraQuality, tMempool* const mp)
{
    _tMempool* m = *mp;
 8009ac0:	699e      	ldr	r6, [r3, #24]
{
 8009ac2:	4617      	mov	r7, r2
 8009ac4:	460d      	mov	r5, r1
 8009ac6:	4680      	mov	r8, r0
    _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
 8009ac8:	4631      	mov	r1, r6
 8009aca:	201c      	movs	r0, #28
 8009acc:	f000 ff7c 	bl	800a9c8 <mpool_alloc>
    os->mempool = m;
    
    uint8_t offset = 0;
    if (extraQuality) offset = 6;
 8009ad0:	2f00      	cmp	r7, #0
    if (ratio == 2 || ratio == 4  ||
 8009ad2:	f1a5 0202 	sub.w	r2, r5, #2
    _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
 8009ad6:	f8c8 0000 	str.w	r0, [r8]
    if (extraQuality) offset = 6;
 8009ada:	bf18      	it	ne
 8009adc:	2706      	movne	r7, #6
    _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
 8009ade:	4604      	mov	r4, r0
    if (ratio == 2 || ratio == 4  ||
 8009ae0:	2a1e      	cmp	r2, #30
    os->mempool = m;
 8009ae2:	6006      	str	r6, [r0, #0]
    if (ratio == 2 || ratio == 4  ||
 8009ae4:	d92d      	bls.n	8009b42 <tOversampler_init+0x86>
        ratio == 8 || ratio == 16 ||
        ratio == 32 || ratio == 64) {
 8009ae6:	2d40      	cmp	r5, #64	; 0x40
 8009ae8:	d129      	bne.n	8009b3e <tOversampler_init+0x82>
        os->ratio = ratio;
        int idx = (int)(log2f(os->ratio))-1+offset;
 8009aea:	ee07 5a90 	vmov	s15, r5
        os->ratio = ratio;
 8009aee:	6065      	str	r5, [r4, #4]
        int idx = (int)(log2f(os->ratio))-1+offset;
 8009af0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8009af4:	f001 f956 	bl	800ada4 <log2f>
 8009af8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 8009afc:	4814      	ldr	r0, [pc, #80]	; (8009b50 <tOversampler_init+0x94>)
        os->phaseLength = os->numTaps / os->ratio;
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8009afe:	4631      	mov	r1, r6
        int idx = (int)(log2f(os->ratio))-1+offset;
 8009b00:	ee10 3a10 	vmov	r3, s0
 8009b04:	3b01      	subs	r3, #1
 8009b06:	19da      	adds	r2, r3, r7
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
 8009b08:	4f12      	ldr	r7, [pc, #72]	; (8009b54 <tOversampler_init+0x98>)
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 8009b0a:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8009b0e:	edd3 7a00 	vldr	s15, [r3]
 8009b12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009b16:	ee17 0a90 	vmov	r0, s15
 8009b1a:	edc4 7a05 	vstr	s15, [r4, #20]
        os->phaseLength = os->numTaps / os->ratio;
 8009b1e:	fb90 f5f5 	sdiv	r5, r0, r5
 8009b22:	61a5      	str	r5, [r4, #24]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8009b24:	00c0      	lsls	r0, r0, #3
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
 8009b26:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
 8009b2a:	60a3      	str	r3, [r4, #8]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8009b2c:	f000 ff4c 	bl	800a9c8 <mpool_alloc>
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8009b30:	6963      	ldr	r3, [r4, #20]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8009b32:	60e0      	str	r0, [r4, #12]
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8009b34:	4631      	mov	r1, r6
 8009b36:	00d8      	lsls	r0, r3, #3
 8009b38:	f000 ff46 	bl	800a9c8 <mpool_alloc>
 8009b3c:	6120      	str	r0, [r4, #16]
}
 8009b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (ratio == 2 || ratio == 4  ||
 8009b42:	4b05      	ldr	r3, [pc, #20]	; (8009b58 <tOversampler_init+0x9c>)
 8009b44:	40d3      	lsrs	r3, r2
 8009b46:	07db      	lsls	r3, r3, #31
 8009b48:	d4cf      	bmi.n	8009aea <tOversampler_init+0x2e>
}
 8009b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b4e:	bf00      	nop
 8009b50:	0800f814 	.word	0x0800f814
 8009b54:	200000a0 	.word	0x200000a0
 8009b58:	40004045 	.word	0x40004045

08009b5c <tOversampler_upsample>:
    return tOversampler_downsample(osr, oversample);
}

// From CMSIS DSP Library
void tOversampler_upsample(tOversampler* const osr, float input, float* output)
{
 8009b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _tOversampler* os = *osr;
 8009b60:	f8d0 c000 	ldr.w	ip, [r0]
    
    float *pState = os->upState;                 /* State pointer */
 8009b64:	f8dc 700c 	ldr.w	r7, [ip, #12]
    float *pStateCur;
    float *ptr1;                               /* Temporary pointer for state buffer */
    float *ptr2;                               /* Temporary pointer for coefficient buffer */
    float sum0;                                /* Accumulators */
    uint32_t i, tapCnt;                    /* Loop counters */
    uint32_t phaseLen = os->phaseLength;            /* Length of each polyphase filter component */
 8009b68:	f8dc 5018 	ldr.w	r5, [ip, #24]
    float *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
 8009b6c:	f8dc e008 	ldr.w	lr, [ip, #8]
    /* os->pState buffer contains previous frame (phaseLen - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->upState + (phaseLen - 1U);
    
    /* Copy new input sample into the state buffer */
    *pStateCur = input;
 8009b70:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 8009b74:	ed03 0a01 	vstr	s0, [r3, #-4]
    
    /* Address modifier index of coefficient buffer */
    j = 1U;
    
    /* Loop over the Interpolation factor. */
    i = os->ratio;
 8009b78:	f8dc 4004 	ldr.w	r4, [ip, #4]
    
    while (i > 0U)
 8009b7c:	b324      	cbz	r4, 8009bc8 <tOversampler_upsample+0x6c>
 8009b7e:	f104 0801 	add.w	r8, r4, #1
    j = 1U;
 8009b82:	2601      	movs	r6, #1
         Repeat until we've computed numTaps-(4*os->L) coefficients. */
        
        /* Initialize tapCnt with number of samples */
        tapCnt = phaseLen;
        
        while (tapCnt > 0U)
 8009b84:	eddf 5a19 	vldr	s11, [pc, #100]	; 8009bec <tOversampler_upsample+0x90>
        ptr2 = pCoeffs + (os->ratio - j);
 8009b88:	1ba3      	subs	r3, r4, r6
 8009b8a:	ee07 4a90 	vmov	s15, r4
 8009b8e:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 8009b92:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
        while (tapCnt > 0U)
 8009b96:	b32d      	cbz	r5, 8009be4 <tOversampler_upsample+0x88>
            sum0 += *ptr1++ * *ptr2;
            
            /* Upsampling is done by stuffing L-1 zeros between each sample.
             * So instead of multiplying zeros with coefficients,
             * Increment the coefficient pointer by interpolation factor times. */
            ptr2 += os->ratio;
 8009b98:	00a4      	lsls	r4, r4, #2
 8009b9a:	462a      	mov	r2, r5
        ptr1 = pState;
 8009b9c:	4638      	mov	r0, r7
        sum0 = 0.0f;
 8009b9e:	eddf 7a13 	vldr	s15, [pc, #76]	; 8009bec <tOversampler_upsample+0x90>
            sum0 += *ptr1++ * *ptr2;
 8009ba2:	ed93 7a00 	vldr	s14, [r3]
        while (tapCnt > 0U)
 8009ba6:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
 8009ba8:	ecf0 6a01 	vldmia	r0!, {s13}
            ptr2 += os->ratio;
 8009bac:	4423      	add	r3, r4
            sum0 += *ptr1++ * *ptr2;
 8009bae:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
 8009bb2:	d1f6      	bne.n	8009ba2 <tOversampler_upsample+0x46>
 8009bb4:	ee67 7a86 	vmul.f32	s15, s15, s12
        
        /* The result is in the accumulator, store in the destination buffer. */
        *output++ = sum0 * os->ratio;
        
        /* Increment the address modifier index of coefficient buffer */
        j++;
 8009bb8:	3601      	adds	r6, #1
        *output++ = sum0 * os->ratio;
 8009bba:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
 8009bbe:	4546      	cmp	r6, r8
 8009bc0:	d002      	beq.n	8009bc8 <tOversampler_upsample+0x6c>
 8009bc2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8009bc6:	e7df      	b.n	8009b88 <tOversampler_upsample+0x2c>
    
    /* Initialize tapCnt with number of samples */
    tapCnt = (phaseLen - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
 8009bc8:	1e6b      	subs	r3, r5, #1
    pState = pState + 1;
 8009bca:	f107 0204 	add.w	r2, r7, #4
    pStateCur = os->upState;
 8009bce:	f8dc 100c 	ldr.w	r1, [ip, #12]
    while (tapCnt > 0U)
 8009bd2:	d005      	beq.n	8009be0 <tOversampler_upsample+0x84>
    {
        *pStateCur++ = *pState++;
 8009bd4:	f852 0b04 	ldr.w	r0, [r2], #4
    while (tapCnt > 0U)
 8009bd8:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
 8009bda:	f841 0b04 	str.w	r0, [r1], #4
    while (tapCnt > 0U)
 8009bde:	d1f9      	bne.n	8009bd4 <tOversampler_upsample+0x78>
        
        /* Decrement loop counter */
        tapCnt--;
    }
}
 8009be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (tapCnt > 0U)
 8009be4:	eef0 7a65 	vmov.f32	s15, s11
 8009be8:	e7e6      	b.n	8009bb8 <tOversampler_upsample+0x5c>
 8009bea:	bf00      	nop
 8009bec:	00000000 	.word	0x00000000

08009bf0 <tOversampler_downsample>:

// From CMSIS DSP Library
float tOversampler_downsample(tOversampler *const osr, float* input)
{
 8009bf0:	b4f0      	push	{r4, r5, r6, r7}
    _tOversampler* os = *osr;
 8009bf2:	6806      	ldr	r6, [r0, #0]
    uint32_t i, tapCnt;
    float output;
    
    /* os->pState buffer contains previous frame (numTaps - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->downState + (numTaps - 1U);
 8009bf4:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
    float *pState = os->downState;                 /* State pointer */
 8009bf8:	e9d6 0704 	ldrd	r0, r7, [r6, #16]
    
    /* Copy decimation factor number of new input samples into the state buffer */
    i = os->ratio;
 8009bfc:	e9d6 3501 	ldrd	r3, r5, [r6, #4]
    pStateCur = os->downState + (numTaps - 1U);
 8009c00:	443a      	add	r2, r7
 8009c02:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    
    do
    {
        *pStateCur++ = *input++;
 8009c06:	f851 4b04 	ldr.w	r4, [r1], #4
        
    } while (--i);
 8009c0a:	3b01      	subs	r3, #1
        *pStateCur++ = *input++;
 8009c0c:	f842 4b04 	str.w	r4, [r2], #4
    } while (--i);
 8009c10:	d1f9      	bne.n	8009c06 <tOversampler_downsample+0x16>
 8009c12:	1e7b      	subs	r3, r7, #1
 8009c14:	6871      	ldr	r1, [r6, #4]
 8009c16:	6934      	ldr	r4, [r6, #16]
 8009c18:	461a      	mov	r2, r3
 8009c1a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    
    /* Set accumulator to zero */
    acc0 = 0.0f;
 8009c1e:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8009c4c <tOversampler_downsample+0x5c>
    pb = pCoeffs;
    
    /* Initialize tapCnt with number of taps */
    tapCnt = numTaps;
    
    while (tapCnt > 0U)
 8009c22:	b90f      	cbnz	r7, 8009c28 <tOversampler_downsample+0x38>
 8009c24:	e009      	b.n	8009c3a <tOversampler_downsample+0x4a>
 8009c26:	3a01      	subs	r2, #1
        
        /* Fetch 1 state variable */
        x0 = *px0++;
        
        /* Perform the multiply-accumulate */
        acc0 += x0 * c0;
 8009c28:	ecb5 7a01 	vldmia	r5!, {s14}
 8009c2c:	ecf0 7a01 	vldmia	r0!, {s15}
 8009c30:	eea7 0a27 	vfma.f32	s0, s14, s15
    while (tapCnt > 0U)
 8009c34:	2a00      	cmp	r2, #0
 8009c36:	d1f6      	bne.n	8009c26 <tOversampler_downsample+0x36>
    
    /* Initialize tapCnt with number of taps */
    tapCnt = (numTaps - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
 8009c38:	b133      	cbz	r3, 8009c48 <tOversampler_downsample+0x58>
 8009c3a:	4622      	mov	r2, r4
    {
        *pStateCur++ = *pState++;
 8009c3c:	f851 0b04 	ldr.w	r0, [r1], #4
    while (tapCnt > 0U)
 8009c40:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
 8009c42:	f842 0b04 	str.w	r0, [r2], #4
    while (tapCnt > 0U)
 8009c46:	d1f9      	bne.n	8009c3c <tOversampler_downsample+0x4c>
        /* Decrement loop counter */
        tapCnt--;
    }
    
    return output;
}
 8009c48:	bcf0      	pop	{r4, r5, r6, r7}
 8009c4a:	4770      	bx	lr
 8009c4c:	00000000 	.word	0x00000000

08009c50 <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, float val, float factor, LEAF* const leaf)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8009c50:	b538      	push	{r3, r4, r5, lr}
 8009c52:	ed2d 8b02 	vpush	{d8}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, float val, float factor, tMempool* const mp)
{
    _tMempool* m = *mp;
 8009c56:	698c      	ldr	r4, [r1, #24]
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8009c58:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8009c5a:	2014      	movs	r0, #20
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8009c5c:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8009c60:	4621      	mov	r1, r4
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8009c62:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8009c66:	f000 feaf 	bl	800a9c8 <mpool_alloc>
 8009c6a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009c6e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8009c98 <tExpSmooth_init+0x48>
 8009c72:	6028      	str	r0, [r5, #0]
 8009c74:	fec8 0a67 	vminnm.f32	s1, s16, s15
 8009c78:	fec0 0a87 	vmaxnm.f32	s1, s1, s14
    smooth->curr=val;
    smooth->dest=val;
    if (factor<0) factor=0;
    if (factor>1) factor=1;
    smooth->factor=factor;
    smooth->oneminusfactor=1.0f-factor;
 8009c7c:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
 8009c80:	6004      	str	r4, [r0, #0]
    smooth->curr=val;
 8009c82:	edc0 8a03 	vstr	s17, [r0, #12]
    smooth->dest=val;
 8009c86:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->factor=factor;
 8009c8a:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->oneminusfactor=1.0f-factor;
 8009c8e:	edc0 7a02 	vstr	s15, [r0, #8]
}
 8009c92:	ecbd 8b02 	vpop	{d8}
 8009c96:	bd38      	pop	{r3, r4, r5, pc}
 8009c98:	00000000 	.word	0x00000000

08009c9c <tExpSmooth_setDest>:
    smooth->oneminusfactor=1.0f-factor;
}

void     tExpSmooth_setDest(tExpSmooth* const expsmooth, float dest)
{
    _tExpSmooth* smooth = *expsmooth;
 8009c9c:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
 8009c9e:	ed83 0a04 	vstr	s0, [r3, #16]
}
 8009ca2:	4770      	bx	lr

08009ca4 <tExpSmooth_tick>:
    smooth->dest=val;
}

float   tExpSmooth_tick(tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
 8009ca4:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor*smooth->dest+smooth->oneminusfactor*smooth->curr;
 8009ca6:	edd3 7a03 	vldr	s15, [r3, #12]
 8009caa:	ed93 0a02 	vldr	s0, [r3, #8]
 8009cae:	ed93 7a01 	vldr	s14, [r3, #4]
 8009cb2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009cb6:	edd3 7a04 	vldr	s15, [r3, #16]
 8009cba:	eea7 0a27 	vfma.f32	s0, s14, s15
 8009cbe:	ed83 0a03 	vstr	s0, [r3, #12]
    return smooth->curr;
}
 8009cc2:	4770      	bx	lr

08009cc4 <tVZFilter_init>:
}

/////

void    tVZFilter_init  (tVZFilter* const vf, VZFilterType type, float freq, float bandWidth, LEAF* const leaf)
{
 8009cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc6:	ed2d 8b04 	vpush	{d8-d9}
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
}

void    tVZFilter_initToPool     (tVZFilter* const vf, VZFilterType type, float freq, float bandWidth, tMempool* const mp)
{
    _tMempool* m = *mp;
 8009cca:	6994      	ldr	r4, [r2, #24]
{
 8009ccc:	4605      	mov	r5, r0
 8009cce:	eef0 8a40 	vmov.f32	s17, s0
 8009cd2:	460f      	mov	r7, r1
 8009cd4:	eeb0 8a60 	vmov.f32	s16, s1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8009cd8:	4621      	mov	r1, r4
 8009cda:	2044      	movs	r0, #68	; 0x44
    
    LEAF* leaf = f->mempool->leaf;
    
    f->fc   = freq;
    f->type = type;
    f->G    = ONE_OVER_SQRT2;
 8009cdc:	4ec2      	ldr	r6, [pc, #776]	; (8009fe8 <tVZFilter_init+0x324>)
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8009cde:	f000 fe73 	bl	800a9c8 <mpool_alloc>
    f->invG    = 1.0f/ONE_OVER_SQRT2;
    f->B    = bandWidth;
    f->m    = 0.0f;
 8009ce2:	2300      	movs	r3, #0
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8009ce4:	6028      	str	r0, [r5, #0]
    f->invG    = 1.0f/ONE_OVER_SQRT2;
 8009ce6:	49c1      	ldr	r1, [pc, #772]	; (8009fec <tVZFilter_init+0x328>)
    f->mempool = m;
 8009ce8:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 8009cea:	6862      	ldr	r2, [r4, #4]
    f->fc   = freq;
 8009cec:	edc0 8a0a 	vstr	s17, [r0, #40]	; 0x28
    f->type = type;
 8009cf0:	7107      	strb	r7, [r0, #4]
    f->B    = bandWidth;
 8009cf2:	ed80 8a0d 	vstr	s16, [r0, #52]	; 0x34
    f->G    = ONE_OVER_SQRT2;
 8009cf6:	62c6      	str	r6, [r0, #44]	; 0x2c
    f->invG    = 1.0f/ONE_OVER_SQRT2;
 8009cf8:	6301      	str	r1, [r0, #48]	; 0x30
    f->m    = 0.0f;
 8009cfa:	6383      	str	r3, [r0, #56]	; 0x38
    f->s1 = 0.0f;
 8009cfc:	6083      	str	r3, [r0, #8]
    f->s2 = 0.0f;
 8009cfe:	60c3      	str	r3, [r0, #12]
    f->sr = leaf->sampleRate;
 8009d00:	6813      	ldr	r3, [r2, #0]

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{

    _tVZFilter* f = *vf;
    f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 8009d02:	eddf 7abb 	vldr	s15, [pc, #748]	; 8009ff0 <tVZFilter_init+0x32c>
    f->sr = leaf->sampleRate;
 8009d06:	63c3      	str	r3, [r0, #60]	; 0x3c
    f->inv_sr = leaf->invSampleRate;
 8009d08:	6853      	ldr	r3, [r2, #4]
 8009d0a:	6403      	str	r3, [r0, #64]	; 0x40
    _tVZFilter* f = *vf;
 8009d0c:	682c      	ldr	r4, [r5, #0]
    f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 8009d0e:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 8009d12:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 8009d16:	ee28 8a07 	vmul.f32	s16, s16, s14
 8009d1a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8009d1e:	eeb0 0a48 	vmov.f32	s0, s16
 8009d22:	f001 f9ff 	bl	800b124 <tanf>

      switch( f->type )
 8009d26:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 8009d28:	eef0 8a40 	vmov.f32	s17, s0
 8009d2c:	ed84 0a04 	vstr	s0, [r4, #16]
      switch( f->type )
 8009d30:	2b0a      	cmp	r3, #10
 8009d32:	f200 81b3 	bhi.w	800a09c <tVZFilter_init+0x3d8>
 8009d36:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009d3a:	0053      	.short	0x0053
 8009d3c:	0069005e 	.word	0x0069005e
 8009d40:	00ab0074 	.word	0x00ab0074
 8009d44:	011600e3 	.word	0x011600e3
 8009d48:	01610136 	.word	0x01610136
 8009d4c:	000b01a6 	.word	0x000b01a6
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8009d50:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8009d54:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
    _tVZFilter* f = *vf;
 8009d58:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8009d5a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8009d5e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009d62:	f001 f8a1 	bl	800aea8 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8009d66:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8009d6a:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8009d6e:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8009ff0 <tVZFilter_init+0x32c>
 8009d72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009d76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009d7a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009d7e:	f001 f9d1 	bl	800b124 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8009d82:	ed95 7a04 	vldr	s14, [r5, #16]
                               // unwarped: r = pow(2, -B/2) -> approximation for low
                               // center-frequencies
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8009d86:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8009d8a:	ee80 0a07 	vdiv.f32	s0, s0, s14
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8009d8e:	edc4 7a07 	vstr	s15, [r4, #28]
 8009d92:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8009d96:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009d9a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009d9e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009da2:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009da6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009daa:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8009dae:	eef1 7ac7 	vsqrt.f32	s15, s14
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8009db2:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8009db6:	eeb1 7a67 	vneg.f32	s14, s15
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8009dba:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8009dbe:	ed84 7a08 	vstr	s14, [r4, #32]
      f->h = 1.0f / (1.0f + f->R2*f->g + f->g*f->g);  // factor for feedback precomputation
 8009dc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009dc6:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8009dca:	eef0 6a47 	vmov.f32	s13, s14
 8009dce:	eee7 6aa8 	vfma.f32	s13, s15, s17
 8009dd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009dd6:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8009dda:	ecbd 8b04 	vpop	{d8-d9}
 8009dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8009de0:	2300      	movs	r3, #0
 8009de2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 8009de6:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8009dea:	6262      	str	r2, [r4, #36]	; 0x24
            f->R2 = f->invG;
 8009dec:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8009df0:	61e3      	str	r3, [r4, #28]
 8009df2:	6223      	str	r3, [r4, #32]
 8009df4:	e7e5      	b.n	8009dc2 <tVZFilter_init+0xfe>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8009df6:	2300      	movs	r3, #0
 8009df8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 8009dfc:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8009e00:	61e2      	str	r2, [r4, #28]
            f->R2 = f->invG;
 8009e02:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8009e06:	6223      	str	r3, [r4, #32]
 8009e08:	6263      	str	r3, [r4, #36]	; 0x24
 8009e0a:	e7da      	b.n	8009dc2 <tVZFilter_init+0xfe>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 8009e12:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8009e16:	6222      	str	r2, [r4, #32]
            f->R2 = f->invG;
 8009e18:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8009e1c:	61e3      	str	r3, [r4, #28]
 8009e1e:	6263      	str	r3, [r4, #36]	; 0x24
 8009e20:	e7cf      	b.n	8009dc2 <tVZFilter_init+0xfe>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8009e22:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8009e26:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
    _tVZFilter* f = *vf;
 8009e2a:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8009e2c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8009e30:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009e34:	f001 f838 	bl	800aea8 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8009e38:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8009e3c:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8009e40:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8009ff0 <tVZFilter_init+0x32c>
 8009e44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009e48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009e4c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009e50:	f001 f968 	bl	800b124 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8009e54:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8009e58:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 8009e5c:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8009e5e:	ee80 0a07 	vdiv.f32	s0, s0, s14
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 8009e62:	61e3      	str	r3, [r4, #28]
 8009e64:	6263      	str	r3, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8009e66:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009e6a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009e6e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009e72:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009e76:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009e7a:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8009e7e:	eef1 7ac7 	vsqrt.f32	s15, s14
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8009e82:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009e86:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 8009e8a:	edc4 7a08 	vstr	s15, [r4, #32]
 8009e8e:	e798      	b.n	8009dc2 <tVZFilter_init+0xfe>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8009e90:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8009e94:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
    _tVZFilter* f = *vf;
 8009e98:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8009e9a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8009e9e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009ea2:	f001 f801 	bl	800aea8 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8009ea6:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8009eaa:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8009eae:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8009ff0 <tVZFilter_init+0x32c>
 8009eb2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009eba:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009ebe:	f001 f931 	bl	800b124 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8009ec2:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8009ec6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8009eca:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8009ecc:	ee80 0a07 	vdiv.f32	s0, s0, s14
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8009ed0:	6223      	str	r3, [r4, #32]
 8009ed2:	edc4 7a07 	vstr	s15, [r4, #28]
 8009ed6:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8009eda:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009ede:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009ee2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009ee6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009eea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009eee:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8009ef2:	eef1 7ac7 	vsqrt.f32	s15, s14
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8009ef6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009efa:	edc4 7a05 	vstr	s15, [r4, #20]
 8009efe:	e760      	b.n	8009dc2 <tVZFilter_init+0xfe>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8009f00:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8009f04:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
 8009f08:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8009f0c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009f10:	f000 ffca 	bl	800aea8 <powf>
            float wl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8009f14:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009f18:	f001 f904 	bl	800b124 <tanf>
            float r  = f->g/wl;
 8009f1c:	ee88 0a80 	vdiv.f32	s0, s17, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8009f20:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8009f24:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009f28:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8009f2c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8009f30:	edc4 7a07 	vstr	s15, [r4, #28]
 8009f34:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8009f38:	ee67 6a26 	vmul.f32	s13, s14, s13
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8009f3c:	ee20 0a00 	vmul.f32	s0, s0, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8009f40:	eee0 7a00 	vfma.f32	s15, s0, s0
 8009f44:	ee87 6a80 	vdiv.f32	s12, s15, s0
 8009f48:	ee76 7a65 	vsub.f32	s15, s12, s11
 8009f4c:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8009f50:	eef1 7ac6 	vsqrt.f32	s15, s12
 8009f54:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8009f58:	ee27 7a27 	vmul.f32	s14, s14, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8009f5c:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8009f60:	ed84 7a08 	vstr	s14, [r4, #32]
 8009f64:	e72d      	b.n	8009dc2 <tVZFilter_init+0xfe>
            float A = sqrtf(f->G);
 8009f66:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
          f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8009f6a:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
          f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8009f6e:	eddf 7a21 	vldr	s15, [pc, #132]	; 8009ff4 <tVZFilter_init+0x330>
            float A = sqrtf(f->G);
 8009f72:	eeb1 8ac9 	vsqrt.f32	s16, s18
          f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8009f76:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8009f7a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009f7e:	eef1 7ac8 	vsqrt.f32	s15, s16
          f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8009f82:	eec8 8aa7 	vdiv.f32	s17, s17, s15
 8009f86:	edc4 8a04 	vstr	s17, [r4, #16]
          f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8009f8a:	f001 f945 	bl	800b218 <sinhf>
 8009f8e:	ee70 7a00 	vadd.f32	s15, s0, s0
          f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 8009f92:	ed84 9a07 	vstr	s18, [r4, #28]
 8009f96:	6265      	str	r5, [r4, #36]	; 0x24
 8009f98:	ee28 8a27 	vmul.f32	s16, s16, s15
          f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8009f9c:	edc4 7a05 	vstr	s15, [r4, #20]
          f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 8009fa0:	ed84 8a08 	vstr	s16, [r4, #32]
 8009fa4:	e70d      	b.n	8009dc2 <tVZFilter_init+0xfe>
          float A = sqrtf(f->G);
 8009fa6:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
          f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8009faa:	eddf 7a12 	vldr	s15, [pc, #72]	; 8009ff4 <tVZFilter_init+0x330>
          float A = sqrtf(f->G);
 8009fae:	eeb1 8ac9 	vsqrt.f32	s16, s18
          f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8009fb2:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8009fb6:	ee20 0a27 	vmul.f32	s0, s0, s15
          f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8009fba:	eef1 7ac8 	vsqrt.f32	s15, s16
 8009fbe:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8009fc2:	edc4 8a04 	vstr	s17, [r4, #16]
          f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8009fc6:	f001 f927 	bl	800b218 <sinhf>
 8009fca:	ee70 7a00 	vadd.f32	s15, s0, s0
          f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 8009fce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8009fd2:	ed84 9a09 	vstr	s18, [r4, #36]	; 0x24
 8009fd6:	ee28 8a27 	vmul.f32	s16, s16, s15
          f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8009fda:	edc4 7a05 	vstr	s15, [r4, #20]
          f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 8009fde:	61e3      	str	r3, [r4, #28]
 8009fe0:	ed84 8a08 	vstr	s16, [r4, #32]
 8009fe4:	e6ed      	b.n	8009dc2 <tVZFilter_init+0xfe>
 8009fe6:	bf00      	nop
 8009fe8:	3f3504f3 	.word	0x3f3504f3
 8009fec:	3fb504f3 	.word	0x3fb504f3
 8009ff0:	40490fdb 	.word	0x40490fdb
 8009ff4:	3eb17218 	.word	0x3eb17218
 8009ff8:	00000000 	.word	0x00000000
          float x  = 2.0f*f->m-1.0f;
 8009ffc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800a000:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 800a004:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
            f->R2 = f->invG;
 800a008:	6b23      	ldr	r3, [r4, #48]	; 0x30
          f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800a00a:	ed5f 0a05 	vldr	s1, [pc, #-20]	; 8009ff8 <tVZFilter_init+0x334>
            f->R2 = f->invG;
 800a00e:	6163      	str	r3, [r4, #20]
          float x  = 2.0f*f->m-1.0f;
 800a010:	eea7 8a27 	vfma.f32	s16, s14, s15
          f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800a014:	eef1 8a48 	vneg.f32	s17, s16
 800a018:	eeb0 0a68 	vmov.f32	s0, s17
 800a01c:	f000 fcb6 	bl	800a98c <maximum>
          f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800a020:	ed5f 0a0b 	vldr	s1, [pc, #-44]	; 8009ff8 <tVZFilter_init+0x334>
          f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800a024:	ed84 0a07 	vstr	s0, [r4, #28]
          f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800a028:	eeb0 0a48 	vmov.f32	s0, s16
 800a02c:	f000 fcb2 	bl	800a994 <minimum>
          f->cB = 1.0f-x*x;
 800a030:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
          float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 800a034:	edd4 6a07 	vldr	s13, [r4, #28]
 800a038:	edd4 7a05 	vldr	s15, [r4, #20]
          f->cB = 1.0f-x*x;
 800a03c:	eea8 7a88 	vfma.f32	s14, s17, s16
          float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 800a040:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 800a044:	ee36 5aa6 	vadd.f32	s10, s13, s13
 800a048:	edd4 8a04 	vldr	s17, [r4, #16]
 800a04c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800a050:	ee27 6a07 	vmul.f32	s12, s14, s14
 800a054:	eea6 6aa6 	vfma.f32	s12, s13, s13
 800a058:	eea0 6a00 	vfma.f32	s12, s0, s0
 800a05c:	eea0 6a45 	vfms.f32	s12, s0, s10
 800a060:	ee84 5a86 	vdiv.f32	s10, s9, s12
 800a064:	eeb1 6ac5 	vsqrt.f32	s12, s10
 800a068:	ee26 6a25 	vmul.f32	s12, s12, s11
          f->cL *= s; f->cB *= s; f->cH *= s;
 800a06c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800a070:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a074:	ee20 0a06 	vmul.f32	s0, s0, s12
 800a078:	edc4 6a07 	vstr	s13, [r4, #28]
 800a07c:	ed84 7a08 	vstr	s14, [r4, #32]
 800a080:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
 800a084:	e69d      	b.n	8009dc2 <tVZFilter_init+0xfe>
          f->cL = 1.0f;
 800a086:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
          f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 800a08a:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
          f->cL = 1.0f;
 800a08e:	61e3      	str	r3, [r4, #28]
          f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 800a090:	edc4 7a05 	vstr	s15, [r4, #20]
          f->cH = 1.0f;
 800a094:	6263      	str	r3, [r4, #36]	; 0x24
          f->cB = f->R2;
 800a096:	edc4 7a08 	vstr	s15, [r4, #32]
 800a09a:	e692      	b.n	8009dc2 <tVZFilter_init+0xfe>
 800a09c:	edd4 7a05 	vldr	s15, [r4, #20]
 800a0a0:	e68f      	b.n	8009dc2 <tVZFilter_init+0xfe>
 800a0a2:	bf00      	nop

0800a0a4 <tVZFilter_tickEfficient>:
    _tVZFilter* f = *vf;
 800a0a4:	6803      	ldr	r3, [r0, #0]
    yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
 800a0a6:	ed93 7a02 	vldr	s14, [r3, #8]
 800a0aa:	edd3 7a05 	vldr	s15, [r3, #20]
 800a0ae:	edd3 5a04 	vldr	s11, [r3, #16]
 800a0b2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800a0b6:	ed93 6a03 	vldr	s12, [r3, #12]
 800a0ba:	ed93 4a06 	vldr	s8, [r3, #24]
    return f->cL*yL + f->cB*yB + f->cH*yH;
 800a0be:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800a0c2:	edd3 4a08 	vldr	s9, [r3, #32]
 800a0c6:	ed93 5a07 	vldr	s10, [r3, #28]
    yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
 800a0ca:	eea7 0a65 	vfms.f32	s0, s14, s11
 800a0ce:	ee70 7a46 	vsub.f32	s15, s0, s12
 800a0d2:	ee67 7a84 	vmul.f32	s15, s15, s8
    yB = (f->g*yH) + f->s1;
 800a0d6:	eea5 7aa7 	vfma.f32	s14, s11, s15
    return f->cL*yL + f->cB*yB + f->cH*yH;
 800a0da:	ee27 0aa6 	vmul.f32	s0, s15, s13
    yL = (f->g*yB) + f->s2;
 800a0de:	eef0 6a46 	vmov.f32	s13, s12
 800a0e2:	eee5 6a87 	vfma.f32	s13, s11, s14
    f->s1 = f->g*yH + yB; // state update in 1st integrator
 800a0e6:	eeb0 6a47 	vmov.f32	s12, s14
    return f->cL*yL + f->cB*yB + f->cH*yH;
 800a0ea:	eea4 0a87 	vfma.f32	s0, s9, s14
    f->s1 = f->g*yH + yB; // state update in 1st integrator
 800a0ee:	eea5 6aa7 	vfma.f32	s12, s11, s15
    f->s2 = f->g*yB + yL; // state update in 2nd integrator
 800a0f2:	eef0 7a66 	vmov.f32	s15, s13
}
 800a0f6:	eea5 0a26 	vfma.f32	s0, s10, s13
    f->s2 = f->g*yB + yL; // state update in 2nd integrator
 800a0fa:	eee5 7a87 	vfma.f32	s15, s11, s14
    f->s1 = f->g*yH + yB; // state update in 1st integrator
 800a0fe:	ed83 6a02 	vstr	s12, [r3, #8]
    f->s2 = f->g*yB + yL; // state update in 2nd integrator
 800a102:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800a106:	4770      	bx	lr

0800a108 <tVZFilter_setFreq>:
{
 800a108:	b538      	push	{r3, r4, r5, lr}
    _tVZFilter* f = *vf;
 800a10a:	6804      	ldr	r4, [r0, #0]
    f->fc = LEAF_clip(0.0f, freq, 0.5f * leaf->sampleRate);
 800a10c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 800a110:	4605      	mov	r5, r0
    f->fc = LEAF_clip(0.0f, freq, 0.5f * leaf->sampleRate);
 800a112:	eef0 0a40 	vmov.f32	s1, s0
 800a116:	ed9f 0ae1 	vldr	s0, [pc, #900]	; 800a49c <tVZFilter_setFreq+0x394>
{
 800a11a:	ed2d 8b04 	vpush	{d8-d9}
    LEAF* leaf = f->mempool->leaf;
 800a11e:	6823      	ldr	r3, [r4, #0]
    f->fc = LEAF_clip(0.0f, freq, 0.5f * leaf->sampleRate);
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	ed93 1a00 	vldr	s2, [r3]
 800a126:	ee21 1a27 	vmul.f32	s2, s2, s15
 800a12a:	f000 fbef 	bl	800a90c <LEAF_clip>
 800a12e:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    _tVZFilter* f = *vf;
 800a132:	682c      	ldr	r4, [r5, #0]
    f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 800a134:	eddf 7ada 	vldr	s15, [pc, #872]	; 800a4a0 <tVZFilter_setFreq+0x398>
 800a138:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 800a13c:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 800a140:	ee28 8a07 	vmul.f32	s16, s16, s14
 800a144:	ee28 8a27 	vmul.f32	s16, s16, s15
 800a148:	eeb0 0a48 	vmov.f32	s0, s16
 800a14c:	f000 ffea 	bl	800b124 <tanf>
      switch( f->type )
 800a150:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 800a152:	eef0 8a40 	vmov.f32	s17, s0
 800a156:	ed84 0a04 	vstr	s0, [r4, #16]
      switch( f->type )
 800a15a:	2b0a      	cmp	r3, #10
 800a15c:	f200 81af 	bhi.w	800a4be <tVZFilter_setFreq+0x3b6>
 800a160:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a164:	005e0053 	.word	0x005e0053
 800a168:	00740069 	.word	0x00740069
 800a16c:	00e300ab 	.word	0x00e300ab
 800a170:	01360116 	.word	0x01360116
 800a174:	01a20156 	.word	0x01a20156
 800a178:	000b      	.short	0x000b
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800a17a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800a17e:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
    _tVZFilter* f = *vf;
 800a182:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800a184:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800a188:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a18c:	f000 fe8c 	bl	800aea8 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 800a190:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 800a194:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 800a198:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 800a4a0 <tVZFilter_setFreq+0x398>
 800a19c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a1a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a1a4:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a1a8:	f000 ffbc 	bl	800b124 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800a1ac:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800a1b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800a1b4:	ee80 0a07 	vdiv.f32	s0, s0, s14
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800a1b8:	edc4 7a07 	vstr	s15, [r4, #28]
 800a1bc:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800a1c0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800a1c4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a1c8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a1cc:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a1d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a1d4:	ee87 7a80 	vdiv.f32	s14, s15, s0
 800a1d8:	eef1 7ac7 	vsqrt.f32	s15, s14
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800a1dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800a1e0:	eeb1 7a67 	vneg.f32	s14, s15
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800a1e4:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800a1e8:	ed84 7a08 	vstr	s14, [r4, #32]
      f->h = 1.0f / (1.0f + f->R2*f->g + f->g*f->g);  // factor for feedback precomputation
 800a1ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1f0:	ee77 7aa8 	vadd.f32	s15, s15, s17
 800a1f4:	eef0 6a47 	vmov.f32	s13, s14
 800a1f8:	eee7 6aa8 	vfma.f32	s13, s15, s17
 800a1fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a200:	edc4 7a06 	vstr	s15, [r4, #24]
}
 800a204:	ecbd 8b04 	vpop	{d8-d9}
 800a208:	bd38      	pop	{r3, r4, r5, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800a20a:	2300      	movs	r3, #0
 800a20c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 800a210:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800a214:	6262      	str	r2, [r4, #36]	; 0x24
            f->R2 = f->invG;
 800a216:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800a21a:	61e3      	str	r3, [r4, #28]
 800a21c:	6223      	str	r3, [r4, #32]
 800a21e:	e7e5      	b.n	800a1ec <tVZFilter_setFreq+0xe4>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800a220:	2300      	movs	r3, #0
 800a222:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 800a226:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800a22a:	61e2      	str	r2, [r4, #28]
            f->R2 = f->invG;
 800a22c:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800a230:	6223      	str	r3, [r4, #32]
 800a232:	6263      	str	r3, [r4, #36]	; 0x24
 800a234:	e7da      	b.n	800a1ec <tVZFilter_setFreq+0xe4>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800a236:	2300      	movs	r3, #0
 800a238:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 800a23c:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800a240:	6222      	str	r2, [r4, #32]
            f->R2 = f->invG;
 800a242:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800a246:	61e3      	str	r3, [r4, #28]
 800a248:	6263      	str	r3, [r4, #36]	; 0x24
 800a24a:	e7cf      	b.n	800a1ec <tVZFilter_setFreq+0xe4>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800a24c:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800a250:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
    _tVZFilter* f = *vf;
 800a254:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800a256:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800a25a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a25e:	f000 fe23 	bl	800aea8 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 800a262:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 800a266:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 800a26a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800a4a0 <tVZFilter_setFreq+0x398>
 800a26e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a272:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a276:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a27a:	f000 ff53 	bl	800b124 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800a27e:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800a282:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 800a286:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800a288:	ee80 0a07 	vdiv.f32	s0, s0, s14
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 800a28c:	61e3      	str	r3, [r4, #28]
 800a28e:	6263      	str	r3, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800a290:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800a294:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a298:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a29c:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a2a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a2a4:	ee87 7a80 	vdiv.f32	s14, s15, s0
 800a2a8:	eef1 7ac7 	vsqrt.f32	s15, s14
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800a2ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a2b0:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 800a2b4:	edc4 7a08 	vstr	s15, [r4, #32]
 800a2b8:	e798      	b.n	800a1ec <tVZFilter_setFreq+0xe4>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800a2ba:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800a2be:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
    _tVZFilter* f = *vf;
 800a2c2:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800a2c4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800a2c8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a2cc:	f000 fdec 	bl	800aea8 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 800a2d0:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 800a2d4:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 800a2d8:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800a4a0 <tVZFilter_setFreq+0x398>
 800a2dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a2e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a2e4:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a2e8:	f000 ff1c 	bl	800b124 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800a2ec:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800a2f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800a2f4:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800a2f6:	ee80 0a07 	vdiv.f32	s0, s0, s14
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800a2fa:	6223      	str	r3, [r4, #32]
 800a2fc:	edc4 7a07 	vstr	s15, [r4, #28]
 800a300:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800a304:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800a308:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a30c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a310:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a314:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a318:	ee87 7a80 	vdiv.f32	s14, s15, s0
 800a31c:	eef1 7ac7 	vsqrt.f32	s15, s14
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800a320:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a324:	edc4 7a05 	vstr	s15, [r4, #20]
 800a328:	e760      	b.n	800a1ec <tVZFilter_setFreq+0xe4>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 800a32a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800a32e:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
 800a332:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800a336:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a33a:	f000 fdb5 	bl	800aea8 <powf>
            float wl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 800a33e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800a342:	f000 feef 	bl	800b124 <tanf>
            float r  = f->g/wl;
 800a346:	ee88 0a80 	vdiv.f32	s0, s17, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800a34a:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 800a34e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a352:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a356:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800a35a:	edc4 7a07 	vstr	s15, [r4, #28]
 800a35e:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800a362:	ee67 6a26 	vmul.f32	s13, s14, s13
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 800a366:	ee20 0a00 	vmul.f32	s0, s0, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800a36a:	eee0 7a00 	vfma.f32	s15, s0, s0
 800a36e:	ee87 6a80 	vdiv.f32	s12, s15, s0
 800a372:	ee76 7a65 	vsub.f32	s15, s12, s11
 800a376:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800a37a:	eef1 7ac6 	vsqrt.f32	s15, s12
 800a37e:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800a382:	ee27 7a27 	vmul.f32	s14, s14, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800a386:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800a38a:	ed84 7a08 	vstr	s14, [r4, #32]
 800a38e:	e72d      	b.n	800a1ec <tVZFilter_setFreq+0xe4>
            float A = sqrtf(f->G);
 800a390:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
          f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800a394:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
          f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 800a398:	eddf 7a42 	vldr	s15, [pc, #264]	; 800a4a4 <tVZFilter_setFreq+0x39c>
            float A = sqrtf(f->G);
 800a39c:	eeb1 8ac9 	vsqrt.f32	s16, s18
          f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 800a3a0:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 800a3a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a3a8:	eef1 7ac8 	vsqrt.f32	s15, s16
          f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800a3ac:	eec8 8aa7 	vdiv.f32	s17, s17, s15
 800a3b0:	edc4 8a04 	vstr	s17, [r4, #16]
          f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 800a3b4:	f000 ff30 	bl	800b218 <sinhf>
 800a3b8:	ee70 7a00 	vadd.f32	s15, s0, s0
          f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 800a3bc:	ed84 9a07 	vstr	s18, [r4, #28]
 800a3c0:	6265      	str	r5, [r4, #36]	; 0x24
 800a3c2:	ee28 8a27 	vmul.f32	s16, s16, s15
          f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 800a3c6:	edc4 7a05 	vstr	s15, [r4, #20]
          f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 800a3ca:	ed84 8a08 	vstr	s16, [r4, #32]
 800a3ce:	e70d      	b.n	800a1ec <tVZFilter_setFreq+0xe4>
          float A = sqrtf(f->G);
 800a3d0:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
          f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 800a3d4:	eddf 7a33 	vldr	s15, [pc, #204]	; 800a4a4 <tVZFilter_setFreq+0x39c>
          float A = sqrtf(f->G);
 800a3d8:	eeb1 8ac9 	vsqrt.f32	s16, s18
          f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 800a3dc:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 800a3e0:	ee20 0a27 	vmul.f32	s0, s0, s15
          f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800a3e4:	eef1 7ac8 	vsqrt.f32	s15, s16
 800a3e8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800a3ec:	edc4 8a04 	vstr	s17, [r4, #16]
          f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 800a3f0:	f000 ff12 	bl	800b218 <sinhf>
 800a3f4:	ee70 7a00 	vadd.f32	s15, s0, s0
          f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 800a3f8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a3fc:	ed84 9a09 	vstr	s18, [r4, #36]	; 0x24
 800a400:	ee28 8a27 	vmul.f32	s16, s16, s15
          f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 800a404:	edc4 7a05 	vstr	s15, [r4, #20]
          f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 800a408:	61e3      	str	r3, [r4, #28]
 800a40a:	ed84 8a08 	vstr	s16, [r4, #32]
 800a40e:	e6ed      	b.n	800a1ec <tVZFilter_setFreq+0xe4>
          float x  = 2.0f*f->m-1.0f;
 800a410:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800a414:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 800a418:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
            f->R2 = f->invG;
 800a41c:	6b23      	ldr	r3, [r4, #48]	; 0x30
          f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800a41e:	eddf 0a1f 	vldr	s1, [pc, #124]	; 800a49c <tVZFilter_setFreq+0x394>
            f->R2 = f->invG;
 800a422:	6163      	str	r3, [r4, #20]
          float x  = 2.0f*f->m-1.0f;
 800a424:	eea7 8a27 	vfma.f32	s16, s14, s15
          f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800a428:	eef1 8a48 	vneg.f32	s17, s16
 800a42c:	eeb0 0a68 	vmov.f32	s0, s17
 800a430:	f000 faac 	bl	800a98c <maximum>
          f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800a434:	eddf 0a19 	vldr	s1, [pc, #100]	; 800a49c <tVZFilter_setFreq+0x394>
          f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800a438:	ed84 0a07 	vstr	s0, [r4, #28]
          f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800a43c:	eeb0 0a48 	vmov.f32	s0, s16
 800a440:	f000 faa8 	bl	800a994 <minimum>
          f->cB = 1.0f-x*x;
 800a444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
          float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 800a448:	edd4 6a07 	vldr	s13, [r4, #28]
 800a44c:	edd4 7a05 	vldr	s15, [r4, #20]
          f->cB = 1.0f-x*x;
 800a450:	eea8 7a88 	vfma.f32	s14, s17, s16
          float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 800a454:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 800a458:	ee36 5aa6 	vadd.f32	s10, s13, s13
 800a45c:	edd4 8a04 	vldr	s17, [r4, #16]
 800a460:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800a464:	ee27 6a07 	vmul.f32	s12, s14, s14
 800a468:	eea6 6aa6 	vfma.f32	s12, s13, s13
 800a46c:	eea0 6a00 	vfma.f32	s12, s0, s0
 800a470:	eea0 6a45 	vfms.f32	s12, s0, s10
 800a474:	ee84 5a86 	vdiv.f32	s10, s9, s12
 800a478:	eeb1 6ac5 	vsqrt.f32	s12, s10
 800a47c:	ee26 6a25 	vmul.f32	s12, s12, s11
          f->cL *= s; f->cB *= s; f->cH *= s;
 800a480:	ee66 6a86 	vmul.f32	s13, s13, s12
 800a484:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a488:	ee20 0a06 	vmul.f32	s0, s0, s12
 800a48c:	edc4 6a07 	vstr	s13, [r4, #28]
 800a490:	ed84 7a08 	vstr	s14, [r4, #32]
 800a494:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
 800a498:	e6a8      	b.n	800a1ec <tVZFilter_setFreq+0xe4>
 800a49a:	bf00      	nop
 800a49c:	00000000 	.word	0x00000000
 800a4a0:	40490fdb 	.word	0x40490fdb
 800a4a4:	3eb17218 	.word	0x3eb17218
          f->cL = 1.0f;
 800a4a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
          f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 800a4ac:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
          f->cL = 1.0f;
 800a4b0:	61e3      	str	r3, [r4, #28]
          f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 800a4b2:	edc4 7a05 	vstr	s15, [r4, #20]
          f->cH = 1.0f;
 800a4b6:	6263      	str	r3, [r4, #36]	; 0x24
          f->cB = f->R2;
 800a4b8:	edc4 7a08 	vstr	s15, [r4, #32]
 800a4bc:	e696      	b.n	800a1ec <tVZFilter_setFreq+0xe4>
 800a4be:	edd4 7a05 	vldr	s15, [r4, #20]
 800a4c2:	e693      	b.n	800a1ec <tVZFilter_setFreq+0xe4>

0800a4c4 <tVZFilter_setGain>:
{
 800a4c4:	b538      	push	{r3, r4, r5, lr}
    f->G = LEAF_clip(0.000001f, gain, 100.0f);
 800a4c6:	eef0 0a40 	vmov.f32	s1, s0
 800a4ca:	ed9f 1ae3 	vldr	s2, [pc, #908]	; 800a858 <tVZFilter_setGain+0x394>
 800a4ce:	ed9f 0ae3 	vldr	s0, [pc, #908]	; 800a85c <tVZFilter_setGain+0x398>
{
 800a4d2:	4605      	mov	r5, r0
    _tVZFilter* f = *vf;
 800a4d4:	6804      	ldr	r4, [r0, #0]
{
 800a4d6:	ed2d 8b04 	vpush	{d8-d9}
    f->G = LEAF_clip(0.000001f, gain, 100.0f);
 800a4da:	f000 fa17 	bl	800a90c <LEAF_clip>
    f->invG = 1.0f/f->G;
 800a4de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    f->G = LEAF_clip(0.000001f, gain, 100.0f);
 800a4e2:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 800a4e6:	eddf 7ade 	vldr	s15, [pc, #888]	; 800a860 <tVZFilter_setGain+0x39c>
    f->invG = 1.0f/f->G;
 800a4ea:	ee86 7a80 	vdiv.f32	s14, s13, s0
 800a4ee:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    _tVZFilter* f = *vf;
 800a4f2:	682c      	ldr	r4, [r5, #0]
    f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 800a4f4:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 800a4f8:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 800a4fc:	ee28 8a07 	vmul.f32	s16, s16, s14
 800a500:	ee28 8a27 	vmul.f32	s16, s16, s15
 800a504:	eeb0 0a48 	vmov.f32	s0, s16
 800a508:	f000 fe0c 	bl	800b124 <tanf>
      switch( f->type )
 800a50c:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 800a50e:	eef0 8a40 	vmov.f32	s17, s0
 800a512:	ed84 0a04 	vstr	s0, [r4, #16]
      switch( f->type )
 800a516:	2b0a      	cmp	r3, #10
 800a518:	f200 81b3 	bhi.w	800a882 <tVZFilter_setGain+0x3be>
 800a51c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a520:	005e0053 	.word	0x005e0053
 800a524:	00740069 	.word	0x00740069
 800a528:	00e300ab 	.word	0x00e300ab
 800a52c:	01360116 	.word	0x01360116
 800a530:	01a60156 	.word	0x01a60156
 800a534:	000b      	.short	0x000b
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800a536:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800a53a:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
    _tVZFilter* f = *vf;
 800a53e:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800a540:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800a544:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a548:	f000 fcae 	bl	800aea8 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 800a54c:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 800a550:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 800a554:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 800a860 <tVZFilter_setGain+0x39c>
 800a558:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a55c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a560:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a564:	f000 fdde 	bl	800b124 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800a568:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800a56c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800a570:	ee80 0a07 	vdiv.f32	s0, s0, s14
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800a574:	edc4 7a07 	vstr	s15, [r4, #28]
 800a578:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800a57c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800a580:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a584:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a588:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a58c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a590:	ee87 7a80 	vdiv.f32	s14, s15, s0
 800a594:	eef1 7ac7 	vsqrt.f32	s15, s14
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800a598:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800a59c:	eeb1 7a67 	vneg.f32	s14, s15
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800a5a0:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800a5a4:	ed84 7a08 	vstr	s14, [r4, #32]
      f->h = 1.0f / (1.0f + f->R2*f->g + f->g*f->g);  // factor for feedback precomputation
 800a5a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5ac:	ee77 7aa8 	vadd.f32	s15, s15, s17
 800a5b0:	eef0 6a47 	vmov.f32	s13, s14
 800a5b4:	eee7 6aa8 	vfma.f32	s13, s15, s17
 800a5b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a5bc:	edc4 7a06 	vstr	s15, [r4, #24]
}
 800a5c0:	ecbd 8b04 	vpop	{d8-d9}
 800a5c4:	bd38      	pop	{r3, r4, r5, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 800a5cc:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800a5d0:	6262      	str	r2, [r4, #36]	; 0x24
            f->R2 = f->invG;
 800a5d2:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800a5d6:	61e3      	str	r3, [r4, #28]
 800a5d8:	6223      	str	r3, [r4, #32]
 800a5da:	e7e5      	b.n	800a5a8 <tVZFilter_setGain+0xe4>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 800a5e2:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800a5e6:	61e2      	str	r2, [r4, #28]
            f->R2 = f->invG;
 800a5e8:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800a5ec:	6223      	str	r3, [r4, #32]
 800a5ee:	6263      	str	r3, [r4, #36]	; 0x24
 800a5f0:	e7da      	b.n	800a5a8 <tVZFilter_setGain+0xe4>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 800a5f8:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800a5fc:	6222      	str	r2, [r4, #32]
            f->R2 = f->invG;
 800a5fe:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800a602:	61e3      	str	r3, [r4, #28]
 800a604:	6263      	str	r3, [r4, #36]	; 0x24
 800a606:	e7cf      	b.n	800a5a8 <tVZFilter_setGain+0xe4>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800a608:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800a60c:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
    _tVZFilter* f = *vf;
 800a610:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800a612:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800a616:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a61a:	f000 fc45 	bl	800aea8 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 800a61e:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 800a622:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 800a626:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 800a860 <tVZFilter_setGain+0x39c>
 800a62a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a62e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a632:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a636:	f000 fd75 	bl	800b124 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800a63a:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800a63e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 800a642:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800a644:	ee80 0a07 	vdiv.f32	s0, s0, s14
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 800a648:	61e3      	str	r3, [r4, #28]
 800a64a:	6263      	str	r3, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800a64c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800a650:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a654:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a658:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a65c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a660:	ee87 7a80 	vdiv.f32	s14, s15, s0
 800a664:	eef1 7ac7 	vsqrt.f32	s15, s14
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800a668:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a66c:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 800a670:	edc4 7a08 	vstr	s15, [r4, #32]
 800a674:	e798      	b.n	800a5a8 <tVZFilter_setGain+0xe4>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800a676:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800a67a:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
    _tVZFilter* f = *vf;
 800a67e:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800a680:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800a684:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a688:	f000 fc0e 	bl	800aea8 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 800a68c:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 800a690:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 800a694:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800a860 <tVZFilter_setGain+0x39c>
 800a698:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a69c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a6a0:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a6a4:	f000 fd3e 	bl	800b124 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800a6a8:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800a6ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800a6b0:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800a6b2:	ee80 0a07 	vdiv.f32	s0, s0, s14
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800a6b6:	6223      	str	r3, [r4, #32]
 800a6b8:	edc4 7a07 	vstr	s15, [r4, #28]
 800a6bc:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800a6c0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800a6c4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a6c8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a6cc:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a6d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a6d4:	ee87 7a80 	vdiv.f32	s14, s15, s0
 800a6d8:	eef1 7ac7 	vsqrt.f32	s15, s14
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800a6dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a6e0:	edc4 7a05 	vstr	s15, [r4, #20]
 800a6e4:	e760      	b.n	800a5a8 <tVZFilter_setGain+0xe4>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 800a6e6:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800a6ea:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
 800a6ee:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800a6f2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a6f6:	f000 fbd7 	bl	800aea8 <powf>
            float wl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 800a6fa:	ee28 0a00 	vmul.f32	s0, s16, s0
 800a6fe:	f000 fd11 	bl	800b124 <tanf>
            float r  = f->g/wl;
 800a702:	ee88 0a80 	vdiv.f32	s0, s17, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800a706:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 800a70a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a70e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a712:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800a716:	edc4 7a07 	vstr	s15, [r4, #28]
 800a71a:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800a71e:	ee67 6a26 	vmul.f32	s13, s14, s13
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 800a722:	ee20 0a00 	vmul.f32	s0, s0, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800a726:	eee0 7a00 	vfma.f32	s15, s0, s0
 800a72a:	ee87 6a80 	vdiv.f32	s12, s15, s0
 800a72e:	ee76 7a65 	vsub.f32	s15, s12, s11
 800a732:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800a736:	eef1 7ac6 	vsqrt.f32	s15, s12
 800a73a:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800a73e:	ee27 7a27 	vmul.f32	s14, s14, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800a742:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800a746:	ed84 7a08 	vstr	s14, [r4, #32]
 800a74a:	e72d      	b.n	800a5a8 <tVZFilter_setGain+0xe4>
            float A = sqrtf(f->G);
 800a74c:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
          f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800a750:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
          f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 800a754:	eddf 7a43 	vldr	s15, [pc, #268]	; 800a864 <tVZFilter_setGain+0x3a0>
            float A = sqrtf(f->G);
 800a758:	eeb1 8ac9 	vsqrt.f32	s16, s18
          f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 800a75c:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 800a760:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a764:	eef1 7ac8 	vsqrt.f32	s15, s16
          f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800a768:	eec8 8aa7 	vdiv.f32	s17, s17, s15
 800a76c:	edc4 8a04 	vstr	s17, [r4, #16]
          f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 800a770:	f000 fd52 	bl	800b218 <sinhf>
 800a774:	ee70 7a00 	vadd.f32	s15, s0, s0
          f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 800a778:	ed84 9a07 	vstr	s18, [r4, #28]
 800a77c:	6265      	str	r5, [r4, #36]	; 0x24
 800a77e:	ee28 8a27 	vmul.f32	s16, s16, s15
          f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 800a782:	edc4 7a05 	vstr	s15, [r4, #20]
          f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 800a786:	ed84 8a08 	vstr	s16, [r4, #32]
 800a78a:	e70d      	b.n	800a5a8 <tVZFilter_setGain+0xe4>
          float A = sqrtf(f->G);
 800a78c:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
          f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 800a790:	eddf 7a34 	vldr	s15, [pc, #208]	; 800a864 <tVZFilter_setGain+0x3a0>
          float A = sqrtf(f->G);
 800a794:	eeb1 8ac9 	vsqrt.f32	s16, s18
          f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 800a798:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 800a79c:	ee20 0a27 	vmul.f32	s0, s0, s15
          f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800a7a0:	eef1 7ac8 	vsqrt.f32	s15, s16
 800a7a4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800a7a8:	edc4 8a04 	vstr	s17, [r4, #16]
          f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 800a7ac:	f000 fd34 	bl	800b218 <sinhf>
 800a7b0:	ee70 7a00 	vadd.f32	s15, s0, s0
          f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 800a7b4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a7b8:	ed84 9a09 	vstr	s18, [r4, #36]	; 0x24
 800a7bc:	ee28 8a27 	vmul.f32	s16, s16, s15
          f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 800a7c0:	edc4 7a05 	vstr	s15, [r4, #20]
          f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 800a7c4:	61e3      	str	r3, [r4, #28]
 800a7c6:	ed84 8a08 	vstr	s16, [r4, #32]
 800a7ca:	e6ed      	b.n	800a5a8 <tVZFilter_setGain+0xe4>
          float x  = 2.0f*f->m-1.0f;
 800a7cc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800a7d0:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 800a7d4:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
            f->R2 = f->invG;
 800a7d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
          f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800a7da:	eddf 0a23 	vldr	s1, [pc, #140]	; 800a868 <tVZFilter_setGain+0x3a4>
            f->R2 = f->invG;
 800a7de:	6163      	str	r3, [r4, #20]
          float x  = 2.0f*f->m-1.0f;
 800a7e0:	eea7 8a27 	vfma.f32	s16, s14, s15
          f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800a7e4:	eef1 8a48 	vneg.f32	s17, s16
 800a7e8:	eeb0 0a68 	vmov.f32	s0, s17
 800a7ec:	f000 f8ce 	bl	800a98c <maximum>
          f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800a7f0:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800a868 <tVZFilter_setGain+0x3a4>
          f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800a7f4:	ed84 0a07 	vstr	s0, [r4, #28]
          f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800a7f8:	eeb0 0a48 	vmov.f32	s0, s16
 800a7fc:	f000 f8ca 	bl	800a994 <minimum>
          f->cB = 1.0f-x*x;
 800a800:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
          float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 800a804:	edd4 6a07 	vldr	s13, [r4, #28]
 800a808:	edd4 7a05 	vldr	s15, [r4, #20]
          f->cB = 1.0f-x*x;
 800a80c:	eea8 7a88 	vfma.f32	s14, s17, s16
          float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 800a810:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 800a814:	ee36 5aa6 	vadd.f32	s10, s13, s13
 800a818:	edd4 8a04 	vldr	s17, [r4, #16]
 800a81c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800a820:	ee27 6a07 	vmul.f32	s12, s14, s14
 800a824:	eea6 6aa6 	vfma.f32	s12, s13, s13
 800a828:	eea0 6a00 	vfma.f32	s12, s0, s0
 800a82c:	eea0 6a45 	vfms.f32	s12, s0, s10
 800a830:	ee84 5a86 	vdiv.f32	s10, s9, s12
 800a834:	eeb1 6ac5 	vsqrt.f32	s12, s10
 800a838:	ee26 6a25 	vmul.f32	s12, s12, s11
          f->cL *= s; f->cB *= s; f->cH *= s;
 800a83c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800a840:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a844:	ee20 0a06 	vmul.f32	s0, s0, s12
 800a848:	edc4 6a07 	vstr	s13, [r4, #28]
 800a84c:	ed84 7a08 	vstr	s14, [r4, #32]
 800a850:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
 800a854:	e6a8      	b.n	800a5a8 <tVZFilter_setGain+0xe4>
 800a856:	bf00      	nop
 800a858:	42c80000 	.word	0x42c80000
 800a85c:	358637bd 	.word	0x358637bd
 800a860:	40490fdb 	.word	0x40490fdb
 800a864:	3eb17218 	.word	0x3eb17218
 800a868:	00000000 	.word	0x00000000
          f->cL = 1.0f;
 800a86c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
          f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 800a870:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
          f->cL = 1.0f;
 800a874:	61e3      	str	r3, [r4, #28]
          f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 800a876:	edc4 7a05 	vstr	s15, [r4, #20]
          f->cH = 1.0f;
 800a87a:	6263      	str	r3, [r4, #36]	; 0x24
          f->cB = f->R2;
 800a87c:	edc4 7a08 	vstr	s15, [r4, #32]
 800a880:	e692      	b.n	800a5a8 <tVZFilter_setGain+0xe4>
 800a882:	edd4 7a05 	vldr	s15, [r4, #20]
 800a886:	e68f      	b.n	800a5a8 <tVZFilter_setGain+0xe4>

0800a888 <LEAF_shaper>:
}

// Jones shaper
float LEAF_shaper(float input, float m_drive)
{
    float fx = input * 2.0f;    // prescale
 800a888:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a88c:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800a8f8 <LEAF_shaper+0x70>
 800a890:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800a8fc <LEAF_shaper+0x74>
    
    xc = LEAF_clip(-SQRT8, fx, SQRT8);
    xc2 = xc*xc;
    c = 0.5f*fx*(3.0f - (xc2));
    xc4 = xc2 * xc2;
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 800a894:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 800a898:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 800a89c:	ed9f 4a18 	vldr	s8, [pc, #96]	; 800a900 <LEAF_shaper+0x78>
 800a8a0:	fec0 7a67 	vminnm.f32	s15, s0, s15
 800a8a4:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
    xc2 = xc*xc;
 800a8a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 800a8ac:	eddf 4a15 	vldr	s9, [pc, #84]	; 800a904 <LEAF_shaper+0x7c>
 800a8b0:	ee20 6a06 	vmul.f32	s12, s0, s12
    shaperOut *= 0.5f;    // post_scale
 800a8b4:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800a908 <LEAF_shaper+0x80>
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 800a8b8:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 800a8bc:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800a8c0:	ee27 7a67 	vnmul.f32	s14, s14, s15
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 800a8c4:	ee27 0aa4 	vmul.f32	s0, s15, s9
    c = 0.5f*fx*(3.0f - (xc2));
 800a8c8:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 800a8cc:	eea3 7a84 	vfma.f32	s14, s7, s8
 800a8d0:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    c = 0.5f*fx*(3.0f - (xc2));
 800a8d4:	ee75 5ae7 	vsub.f32	s11, s11, s15
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 800a8d8:	ee70 0aa6 	vadd.f32	s1, s1, s13
 800a8dc:	eef0 7a40 	vmov.f32	s15, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 800a8e0:	ee37 7a24 	vadd.f32	s14, s14, s9
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 800a8e4:	eee5 7a86 	vfma.f32	s15, s11, s12
    shaperOut *= 0.5f;    // post_scale
 800a8e8:	ee20 0a85 	vmul.f32	s0, s1, s10
 800a8ec:	ee27 0a00 	vmul.f32	s0, s14, s0
    return shaperOut;
}
 800a8f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	c03504f3 	.word	0xc03504f3
 800a8fc:	403504f3 	.word	0x403504f3
 800a900:	3c800000 	.word	0x3c800000
 800a904:	3d4ccccd 	.word	0x3d4ccccd
 800a908:	3f272f05 	.word	0x3f272f05

0800a90c <LEAF_clip>:

float   LEAF_clip(float min, float val, float max)
{
    float tempmin = min;
    float tempmax = max;
    if (min > max)
 800a90c:	eeb4 0ac1 	vcmpe.f32	s0, s2
 800a910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a914:	dd05      	ble.n	800a922 <LEAF_clip+0x16>
 800a916:	eef0 7a40 	vmov.f32	s15, s0
    {
        tempmin = max;
 800a91a:	eeb0 0a41 	vmov.f32	s0, s2
        tempmax = min;
 800a91e:	eeb0 1a67 	vmov.f32	s2, s15
    }
    if (val < tempmin)
 800a922:	eeb4 0ae0 	vcmpe.f32	s0, s1
 800a926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a92a:	dc01      	bgt.n	800a930 <LEAF_clip+0x24>
 800a92c:	fe81 0a60 	vminnm.f32	s0, s2, s1
    }
    else
    {
        return val;
    }
}
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop

0800a934 <faster_mtof>:
 800a934:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a938:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800a974 <faster_mtof+0x40>
 800a93c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800a978 <faster_mtof+0x44>
 800a940:	eee0 7a26 	vfma.f32	s15, s0, s13
 800a944:	ee27 0aa7 	vmul.f32	s0, s15, s15
 800a948:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a94c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a950:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a954:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a958:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a95c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a960:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a964:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a968:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a96c:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a970:	4770      	bx	lr
 800a972:	bf00      	nop
 800a974:	386c9820 	.word	0x386c9820
 800a978:	4102d013 	.word	0x4102d013

0800a97c <fastdbtoa>:


float fastdbtoa(float db)
{
    //return powf(10.0f, db * 0.05f);
    return expf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
 800a97c:	eddf 7a02 	vldr	s15, [pc, #8]	; 800a988 <fastdbtoa+0xc>
 800a980:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a984:	f000 b988 	b.w	800ac98 <expf>
 800a988:	3debc8e3 	.word	0x3debc8e3

0800a98c <maximum>:


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
 800a98c:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop

0800a994 <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
 800a994:	fe80 0ac0 	vminnm.f32	s0, s1, s0
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop

0800a99c <leaf_pool_init>:
/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800a99c:	6a03      	ldr	r3, [r0, #32]
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 800a99e:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800a9a0:	2510      	movs	r5, #16
    pool->usize  = 0;
 800a9a2:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800a9a4:	635d      	str	r5, [r3, #52]	; 0x34
    mpool_create(memory, size, &leaf->_internal_mempool);
 800a9a6:	f100 051c 	add.w	r5, r0, #28
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800a9aa:	6a03      	ldr	r3, [r0, #32]
    pool->mpool = (char*)memory;
 800a9ac:	6241      	str	r1, [r0, #36]	; 0x24
    pool->usize  = 0;
 800a9ae:	e9c0 420a 	strd	r4, r2, [r0, #40]	; 0x28
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800a9b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
    node->next = next;
 800a9b4:	604c      	str	r4, [r1, #4]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800a9b6:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
 800a9b8:	440b      	add	r3, r1
    node->prev = prev;
 800a9ba:	608c      	str	r4, [r1, #8]
    node->pool = block_location + header_size;
 800a9bc:	600b      	str	r3, [r1, #0]
    node->size = size;
 800a9be:	60ca      	str	r2, [r1, #12]
    leaf->mempool = &leaf->_internal_mempool;
 800a9c0:	6185      	str	r5, [r0, #24]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800a9c2:	6301      	str	r1, [r0, #48]	; 0x30
}
 800a9c4:	bc30      	pop	{r4, r5}
 800a9c6:	4770      	bx	lr

0800a9c8 <mpool_alloc>:
{
 800a9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pool->head == NULL)
 800a9ca:	694c      	ldr	r4, [r1, #20]
 800a9cc:	2c00      	cmp	r4, #0
 800a9ce:	d038      	beq.n	800aa42 <mpool_alloc+0x7a>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 800a9d0:	1dc5      	adds	r5, r0, #7
 800a9d2:	f025 0507 	bic.w	r5, r5, #7
    while (node_to_alloc->size < size_to_alloc)
 800a9d6:	e002      	b.n	800a9de <mpool_alloc+0x16>
        if (node_to_alloc == NULL)
 800a9d8:	4614      	mov	r4, r2
 800a9da:	2a00      	cmp	r2, #0
 800a9dc:	d031      	beq.n	800aa42 <mpool_alloc+0x7a>
    while (node_to_alloc->size < size_to_alloc)
 800a9de:	68e3      	ldr	r3, [r4, #12]
 800a9e0:	6862      	ldr	r2, [r4, #4]
 800a9e2:	42ab      	cmp	r3, r5
 800a9e4:	d3f8      	bcc.n	800a9d8 <mpool_alloc+0x10>
    node_to_alloc->size = size_to_alloc;
 800a9e6:	60e5      	str	r5, [r4, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 800a9e8:	1b5e      	subs	r6, r3, r5
    if (leftover > pool->leaf->header_size)
 800a9ea:	6848      	ldr	r0, [r1, #4]
 800a9ec:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800a9ee:	42b0      	cmp	r0, r6
 800a9f0:	d334      	bcc.n	800aa5c <mpool_alloc+0x94>
        node_to_alloc->size += leftover;
 800a9f2:	4617      	mov	r7, r2
 800a9f4:	60e3      	str	r3, [r4, #12]
    if (pool->head == node_to_alloc)
 800a9f6:	694b      	ldr	r3, [r1, #20]
 800a9f8:	42a3      	cmp	r3, r4
        pool->head = new_node;
 800a9fa:	bf08      	it	eq
 800a9fc:	614f      	streq	r7, [r1, #20]
 800a9fe:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 800aa02:	b10a      	cbz	r2, 800aa08 <mpool_alloc+0x40>
    {
        // Close the link
        node->next->prev = node->prev;
 800aa04:	6093      	str	r3, [r2, #8]
 800aa06:	68a3      	ldr	r3, [r4, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 800aa08:	b10b      	cbz	r3, 800aa0e <mpool_alloc+0x46>
    {
        // Close the link
        node->prev->next = node->next;
 800aa0a:	6862      	ldr	r2, [r4, #4]
 800aa0c:	605a      	str	r2, [r3, #4]
    }
    
    node->next = NULL;
 800aa0e:	2300      	movs	r3, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800aa10:	68e5      	ldr	r5, [r4, #12]
    node->prev = NULL;
 800aa12:	e9c4 3301 	strd	r3, r3, [r4, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800aa16:	6848      	ldr	r0, [r1, #4]
 800aa18:	68ca      	ldr	r2, [r1, #12]
 800aa1a:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800aa1c:	4432      	add	r2, r6
 800aa1e:	442a      	add	r2, r5
 800aa20:	60ca      	str	r2, [r1, #12]
    if (pool->leaf->clearOnAllocation > 0)
 800aa22:	6942      	ldr	r2, [r0, #20]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	dd0a      	ble.n	800aa3e <mpool_alloc+0x76>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800aa28:	68e2      	ldr	r2, [r4, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 800aa2a:	6820      	ldr	r0, [r4, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800aa2c:	b142      	cbz	r2, 800aa40 <mpool_alloc+0x78>
 800aa2e:	3801      	subs	r0, #1
 800aa30:	4619      	mov	r1, r3
 800aa32:	f800 1f01 	strb.w	r1, [r0, #1]!
 800aa36:	3301      	adds	r3, #1
 800aa38:	68e2      	ldr	r2, [r4, #12]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d8f9      	bhi.n	800aa32 <mpool_alloc+0x6a>
 800aa3e:	6820      	ldr	r0, [r4, #0]
}
 800aa40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if ((pool->msize - pool->usize) > asize)
 800aa42:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
 800aa46:	6849      	ldr	r1, [r1, #4]
 800aa48:	1a9b      	subs	r3, r3, r2
 800aa4a:	4283      	cmp	r3, r0
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800aa4c:	4608      	mov	r0, r1
 800aa4e:	bf8c      	ite	hi
 800aa50:	2101      	movhi	r1, #1
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800aa52:	4621      	movls	r1, r4
 800aa54:	f000 f8ba 	bl	800abcc <LEAF_internalErrorCallback>
            return NULL;
 800aa58:	4620      	mov	r0, r4
}
 800aa5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800aa5c:	688b      	ldr	r3, [r1, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 800aa5e:	4405      	add	r5, r0
                               node_to_alloc->prev,
 800aa60:	f8d4 c008 	ldr.w	ip, [r4, #8]
        new_node = create_node(&pool->mpool[offset],
 800aa64:	1a36      	subs	r6, r6, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800aa66:	1ae7      	subs	r7, r4, r3
        offset += pool->leaf->header_size + node_to_alloc->size;
 800aa68:	443d      	add	r5, r7
        new_node = create_node(&pool->mpool[offset],
 800aa6a:	195f      	adds	r7, r3, r5
    node->pool = block_location + header_size;
 800aa6c:	4438      	add	r0, r7
 800aa6e:	5158      	str	r0, [r3, r5]
    node->size = size;
 800aa70:	60fe      	str	r6, [r7, #12]
    node->prev = prev;
 800aa72:	e9c7 2c01 	strd	r2, ip, [r7, #4]
 800aa76:	e7be      	b.n	800a9f6 <mpool_alloc+0x2e>

0800aa78 <tMempool_init>:
}

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
 800aa78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
 800aa7c:	699e      	ldr	r6, [r3, #24]
{
 800aa7e:	b083      	sub	sp, #12
 800aa80:	4605      	mov	r5, r0
    if (pool->head == NULL)
 800aa82:	6973      	ldr	r3, [r6, #20]
 800aa84:	b91b      	cbnz	r3, 800aa8e <tMempool_init+0x16>
 800aa86:	e050      	b.n	800ab2a <tMempool_init+0xb2>
        if (node_to_alloc == NULL)
 800aa88:	4623      	mov	r3, r4
 800aa8a:	2c00      	cmp	r4, #0
 800aa8c:	d04d      	beq.n	800ab2a <tMempool_init+0xb2>
    while (node_to_alloc->size < size_to_alloc)
 800aa8e:	68d8      	ldr	r0, [r3, #12]
 800aa90:	685c      	ldr	r4, [r3, #4]
 800aa92:	2817      	cmp	r0, #23
 800aa94:	d9f8      	bls.n	800aa88 <tMempool_init+0x10>
    node_to_alloc->size = size_to_alloc;
 800aa96:	2718      	movs	r7, #24
    size_t leftover = node_to_alloc->size - size_to_alloc;
 800aa98:	f1a0 0c18 	sub.w	ip, r0, #24
    node_to_alloc->size = size_to_alloc;
 800aa9c:	60df      	str	r7, [r3, #12]
    if (leftover > pool->leaf->header_size)
 800aa9e:	6877      	ldr	r7, [r6, #4]
 800aaa0:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 800aaa2:	45bc      	cmp	ip, r7
 800aaa4:	d84f      	bhi.n	800ab46 <tMempool_init+0xce>
        node_to_alloc->size += leftover;
 800aaa6:	46a4      	mov	ip, r4
 800aaa8:	60d8      	str	r0, [r3, #12]
    if (pool->head == node_to_alloc)
 800aaaa:	6970      	ldr	r0, [r6, #20]
 800aaac:	4283      	cmp	r3, r0
        pool->head = new_node;
 800aaae:	bf08      	it	eq
 800aab0:	f8c6 c014 	streq.w	ip, [r6, #20]
 800aab4:	e9d3 4001 	ldrd	r4, r0, [r3, #4]
    if (node->next != NULL)
 800aab8:	b10c      	cbz	r4, 800aabe <tMempool_init+0x46>
        node->next->prev = node->prev;
 800aaba:	60a0      	str	r0, [r4, #8]
 800aabc:	6898      	ldr	r0, [r3, #8]
    if (node->prev != NULL)
 800aabe:	b108      	cbz	r0, 800aac4 <tMempool_init+0x4c>
        node->prev->next = node->next;
 800aac0:	685c      	ldr	r4, [r3, #4]
 800aac2:	6044      	str	r4, [r0, #4]
    node->next = NULL;
 800aac4:	2400      	movs	r4, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800aac6:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
 800aac8:	e9c3 4401 	strd	r4, r4, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800aacc:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800aad0:	9001      	str	r0, [sp, #4]
 800aad2:	68f7      	ldr	r7, [r6, #12]
 800aad4:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800aad8:	4407      	add	r7, r0
 800aada:	4638      	mov	r0, r7
 800aadc:	9f01      	ldr	r7, [sp, #4]
 800aade:	4407      	add	r7, r0
 800aae0:	60f7      	str	r7, [r6, #12]
    if (pool->leaf->clearOnAllocation > 0)
 800aae2:	f8dc 0014 	ldr.w	r0, [ip, #20]
 800aae6:	42a0      	cmp	r0, r4
 800aae8:	dd0a      	ble.n	800ab00 <tMempool_init+0x88>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800aaea:	68de      	ldr	r6, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 800aaec:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800aaee:	b146      	cbz	r6, 800ab02 <tMempool_init+0x8a>
 800aaf0:	3801      	subs	r0, #1
 800aaf2:	4627      	mov	r7, r4
 800aaf4:	f800 7f01 	strb.w	r7, [r0, #1]!
 800aaf8:	3401      	adds	r4, #1
 800aafa:	68de      	ldr	r6, [r3, #12]
 800aafc:	42b4      	cmp	r4, r6
 800aafe:	d3f9      	bcc.n	800aaf4 <tMempool_init+0x7c>
 800ab00:	6818      	ldr	r0, [r3, #0]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 800ab02:	6028      	str	r0, [r5, #0]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800ab04:	2510      	movs	r5, #16
 800ab06:	6843      	ldr	r3, [r0, #4]
    pool->usize  = 0;
 800ab08:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800ab0a:	635d      	str	r5, [r3, #52]	; 0x34
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800ab0c:	6843      	ldr	r3, [r0, #4]
    pool->mpool = (char*)memory;
 800ab0e:	6081      	str	r1, [r0, #8]
    pool->usize  = 0;
 800ab10:	e9c0 4203 	strd	r4, r2, [r0, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800ab14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    node->next = next;
 800ab16:	604c      	str	r4, [r1, #4]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800ab18:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
 800ab1a:	440b      	add	r3, r1
    node->size = size;
 800ab1c:	e9c1 4202 	strd	r4, r2, [r1, #8]
    node->pool = block_location + header_size;
 800ab20:	600b      	str	r3, [r1, #0]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800ab22:	6141      	str	r1, [r0, #20]
}
 800ab24:	b003      	add	sp, #12
 800ab26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if ((pool->msize - pool->usize) > asize)
 800ab2a:	e9d6 1203 	ldrd	r1, r2, [r6, #12]
 800ab2e:	6870      	ldr	r0, [r6, #4]
 800ab30:	1a52      	subs	r2, r2, r1
 800ab32:	2a18      	cmp	r2, #24
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800ab34:	bf94      	ite	ls
 800ab36:	4619      	movls	r1, r3
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800ab38:	2101      	movhi	r1, #1
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800ab3a:	f000 f847 	bl	800abcc <LEAF_internalErrorCallback>
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 800ab3e:	2300      	movs	r3, #0
 800ab40:	602b      	str	r3, [r5, #0]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	deff      	udf	#255	; 0xff
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800ab46:	f8d6 8008 	ldr.w	r8, [r6, #8]
        new_node = create_node(&pool->mpool[offset],
 800ab4a:	ebac 0007 	sub.w	r0, ip, r7
        offset += pool->leaf->header_size + node_to_alloc->size;
 800ab4e:	f107 0e18 	add.w	lr, r7, #24
                               node_to_alloc->prev,
 800ab52:	f8d3 9008 	ldr.w	r9, [r3, #8]
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800ab56:	eba3 0c08 	sub.w	ip, r3, r8
        offset += pool->leaf->header_size + node_to_alloc->size;
 800ab5a:	44e6      	add	lr, ip
        new_node = create_node(&pool->mpool[offset],
 800ab5c:	eb08 0c0e 	add.w	ip, r8, lr
    node->pool = block_location + header_size;
 800ab60:	4467      	add	r7, ip
 800ab62:	f848 700e 	str.w	r7, [r8, lr]
    node->size = size;
 800ab66:	f8cc 000c 	str.w	r0, [ip, #12]
    node->prev = prev;
 800ab6a:	e9cc 4901 	strd	r4, r9, [ip, #4]
 800ab6e:	e79c      	b.n	800aaaa <tMempool_init+0x32>

0800ab70 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 800ab70:	4770      	bx	lr
 800ab72:	bf00      	nop

0800ab74 <LEAF_init>:
{
 800ab74:	b570      	push	{r4, r5, r6, lr}
 800ab76:	4604      	mov	r4, r0
 800ab78:	4615      	mov	r5, r2
 800ab7a:	460e      	mov	r6, r1
    leaf_pool_init(leaf, memory, memorysize);
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	4629      	mov	r1, r5
{
 800ab80:	ed2d 8b02 	vpush	{d8}
    leaf->_internal_mempool.leaf = leaf;
 800ab84:	6220      	str	r0, [r4, #32]
{
 800ab86:	eeb0 8a40 	vmov.f32	s16, s0
 800ab8a:	9d06      	ldr	r5, [sp, #24]
    leaf_pool_init(leaf, memory, memorysize);
 800ab8c:	f7ff ff06 	bl	800a99c <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
 800ab90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 800ab94:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800abc4 <LEAF_init+0x50>
    leaf->clearOnAllocation = 0;
 800ab98:	2300      	movs	r3, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 800ab9a:	4a0b      	ldr	r2, [pc, #44]	; (800abc8 <LEAF_init+0x54>)
    leaf->sampleRate = sr;
 800ab9c:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
 800aba0:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->blockSize = blocksize;
 800aba4:	60a6      	str	r6, [r4, #8]
    leaf->random = random;
 800aba6:	6125      	str	r5, [r4, #16]
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 800aba8:	63a2      	str	r2, [r4, #56]	; 0x38
    leaf->clearOnAllocation = 0;
 800abaa:	6163      	str	r3, [r4, #20]
        leaf->errorState[i] = 0;
 800abac:	6463      	str	r3, [r4, #68]	; 0x44
 800abae:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 800abb2:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
 800abb6:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 800abba:	edc4 7a03 	vstr	s15, [r4, #12]
}
 800abbe:	ecbd 8b02 	vpop	{d8}
 800abc2:	bd70      	pop	{r4, r5, r6, pc}
 800abc4:	40c90fdb 	.word	0x40c90fdb
 800abc8:	0800ab71 	.word	0x0800ab71

0800abcc <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 800abcc:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
 800abce:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 800abd2:	2401      	movs	r4, #1
 800abd4:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
 800abd6:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
 800abda:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800abdc:	4718      	bx	r3
 800abde:	bf00      	nop

0800abe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 800abe0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ac18 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800abe4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800abe6:	e003      	b.n	800abf0 <LoopCopyDataInit>

0800abe8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800abe8:	4b0c      	ldr	r3, [pc, #48]	; (800ac1c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800abea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800abec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800abee:	3104      	adds	r1, #4

0800abf0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800abf0:	480b      	ldr	r0, [pc, #44]	; (800ac20 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800abf2:	4b0c      	ldr	r3, [pc, #48]	; (800ac24 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800abf4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800abf6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800abf8:	d3f6      	bcc.n	800abe8 <CopyDataInit>
  ldr  r2, =_sbss
 800abfa:	4a0b      	ldr	r2, [pc, #44]	; (800ac28 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800abfc:	e002      	b.n	800ac04 <LoopFillZerobss>

0800abfe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800abfe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ac00:	f842 3b04 	str.w	r3, [r2], #4

0800ac04 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ac04:	4b09      	ldr	r3, [pc, #36]	; (800ac2c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ac06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ac08:	d3f9      	bcc.n	800abfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ac0a:	f7fe fd93 	bl	8009734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ac0e:	f000 f817 	bl	800ac40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ac12:	f7fe fa47 	bl	80090a4 <main>
  bx  lr    
 800ac16:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 800ac18:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800ac1c:	08010008 	.word	0x08010008
  ldr  r0, =_sdata
 800ac20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ac24:	20000188 	.word	0x20000188
  ldr  r2, =_sbss
 800ac28:	20000188 	.word	0x20000188
  ldr  r3, = _ebss
 800ac2c:	2000fe64 	.word	0x2000fe64

0800ac30 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ac30:	e7fe      	b.n	800ac30 <ADC3_IRQHandler>
	...

0800ac34 <__errno>:
 800ac34:	4b01      	ldr	r3, [pc, #4]	; (800ac3c <__errno+0x8>)
 800ac36:	6818      	ldr	r0, [r3, #0]
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop
 800ac3c:	20000120 	.word	0x20000120

0800ac40 <__libc_init_array>:
 800ac40:	b570      	push	{r4, r5, r6, lr}
 800ac42:	4e0d      	ldr	r6, [pc, #52]	; (800ac78 <__libc_init_array+0x38>)
 800ac44:	4c0d      	ldr	r4, [pc, #52]	; (800ac7c <__libc_init_array+0x3c>)
 800ac46:	1ba4      	subs	r4, r4, r6
 800ac48:	10a4      	asrs	r4, r4, #2
 800ac4a:	2500      	movs	r5, #0
 800ac4c:	42a5      	cmp	r5, r4
 800ac4e:	d109      	bne.n	800ac64 <__libc_init_array+0x24>
 800ac50:	4e0b      	ldr	r6, [pc, #44]	; (800ac80 <__libc_init_array+0x40>)
 800ac52:	4c0c      	ldr	r4, [pc, #48]	; (800ac84 <__libc_init_array+0x44>)
 800ac54:	f001 fa7c 	bl	800c150 <_init>
 800ac58:	1ba4      	subs	r4, r4, r6
 800ac5a:	10a4      	asrs	r4, r4, #2
 800ac5c:	2500      	movs	r5, #0
 800ac5e:	42a5      	cmp	r5, r4
 800ac60:	d105      	bne.n	800ac6e <__libc_init_array+0x2e>
 800ac62:	bd70      	pop	{r4, r5, r6, pc}
 800ac64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac68:	4798      	blx	r3
 800ac6a:	3501      	adds	r5, #1
 800ac6c:	e7ee      	b.n	800ac4c <__libc_init_array+0xc>
 800ac6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac72:	4798      	blx	r3
 800ac74:	3501      	adds	r5, #1
 800ac76:	e7f2      	b.n	800ac5e <__libc_init_array+0x1e>
 800ac78:	08010000 	.word	0x08010000
 800ac7c:	08010000 	.word	0x08010000
 800ac80:	08010000 	.word	0x08010000
 800ac84:	08010004 	.word	0x08010004

0800ac88 <memset>:
 800ac88:	4402      	add	r2, r0
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d100      	bne.n	800ac92 <memset+0xa>
 800ac90:	4770      	bx	lr
 800ac92:	f803 1b01 	strb.w	r1, [r3], #1
 800ac96:	e7f9      	b.n	800ac8c <memset+0x4>

0800ac98 <expf>:
 800ac98:	ee10 2a10 	vmov	r2, s0
 800ac9c:	f240 412a 	movw	r1, #1066	; 0x42a
 800aca0:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800aca4:	428b      	cmp	r3, r1
 800aca6:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
 800acaa:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800acae:	d92e      	bls.n	800ad0e <expf+0x76>
 800acb0:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800acb4:	d061      	beq.n	800ad7a <expf+0xe2>
 800acb6:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800acba:	d304      	bcc.n	800acc6 <expf+0x2e>
 800acbc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800acc0:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800acc4:	4770      	bx	lr
 800acc6:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800ad80 <expf+0xe8>
 800acca:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800acce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acd2:	dd04      	ble.n	800acde <expf+0x46>
 800acd4:	2000      	movs	r0, #0
 800acd6:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800acda:	f001 b82f 	b.w	800bd3c <__math_oflowf>
 800acde:	eddf 7a29 	vldr	s15, [pc, #164]	; 800ad84 <expf+0xec>
 800ace2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ace6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acea:	d504      	bpl.n	800acf6 <expf+0x5e>
 800acec:	2000      	movs	r0, #0
 800acee:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800acf2:	f001 b817 	b.w	800bd24 <__math_uflowf>
 800acf6:	eddf 7a24 	vldr	s15, [pc, #144]	; 800ad88 <expf+0xf0>
 800acfa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800acfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad02:	d504      	bpl.n	800ad0e <expf+0x76>
 800ad04:	2000      	movs	r0, #0
 800ad06:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800ad0a:	f001 b811 	b.w	800bd30 <__math_may_uflowf>
 800ad0e:	491f      	ldr	r1, [pc, #124]	; (800ad8c <expf+0xf4>)
 800ad10:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ad14:	ed91 5b4a 	vldr	d5, [r1, #296]	; 0x128
 800ad18:	ed91 7b48 	vldr	d7, [r1, #288]	; 0x120
 800ad1c:	eeb0 4b47 	vmov.f64	d4, d7
 800ad20:	eea5 4b06 	vfma.f64	d4, d5, d6
 800ad24:	ec55 4b14 	vmov	r4, r5, d4
 800ad28:	ee34 7b47 	vsub.f64	d7, d4, d7
 800ad2c:	f004 021f 	and.w	r2, r4, #31
 800ad30:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800ad34:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800ad38:	ed91 6b50 	vldr	d6, [r1, #320]	; 0x140
 800ad3c:	e9d2 4500 	ldrd	r4, r5, [r2]
 800ad40:	eea6 0b07 	vfma.f64	d0, d6, d7
 800ad44:	ee14 0a10 	vmov	r0, s8
 800ad48:	ed91 5b4c 	vldr	d5, [r1, #304]	; 0x130
 800ad4c:	ed91 6b4e 	vldr	d6, [r1, #312]	; 0x138
 800ad50:	f04f 0b00 	mov.w	fp, #0
 800ad54:	eb1b 0204 	adds.w	r2, fp, r4
 800ad58:	ea4f 3cc0 	mov.w	ip, r0, lsl #15
 800ad5c:	eb4c 0305 	adc.w	r3, ip, r5
 800ad60:	eea5 6b07 	vfma.f64	d6, d5, d7
 800ad64:	ee27 7b07 	vmul.f64	d7, d7, d7
 800ad68:	eea6 0b07 	vfma.f64	d0, d6, d7
 800ad6c:	ec43 2b17 	vmov	d7, r2, r3
 800ad70:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ad74:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ad78:	e7a2      	b.n	800acc0 <expf+0x28>
 800ad7a:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800ad90 <expf+0xf8>
 800ad7e:	e79f      	b.n	800acc0 <expf+0x28>
 800ad80:	42b17217 	.word	0x42b17217
 800ad84:	c2cff1b4 	.word	0xc2cff1b4
 800ad88:	c2ce8ecf 	.word	0xc2ce8ecf
 800ad8c:	0800f898 	.word	0x0800f898
 800ad90:	00000000 	.word	0x00000000

0800ad94 <fabsf>:
 800ad94:	ee10 3a10 	vmov	r3, s0
 800ad98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad9c:	ee00 3a10 	vmov	s0, r3
 800ada0:	4770      	bx	lr
	...

0800ada4 <log2f>:
 800ada4:	ee10 2a10 	vmov	r2, s0
 800ada8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800adac:	b410      	push	{r4}
 800adae:	d057      	beq.n	800ae60 <log2f+0xbc>
 800adb0:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
 800adb4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800adb8:	d31a      	bcc.n	800adf0 <log2f+0x4c>
 800adba:	0053      	lsls	r3, r2, #1
 800adbc:	d104      	bne.n	800adc8 <log2f+0x24>
 800adbe:	2001      	movs	r0, #1
 800adc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adc4:	f000 bfc0 	b.w	800bd48 <__math_divzerof>
 800adc8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800adcc:	d045      	beq.n	800ae5a <log2f+0xb6>
 800adce:	2a00      	cmp	r2, #0
 800add0:	db02      	blt.n	800add8 <log2f+0x34>
 800add2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800add6:	d303      	bcc.n	800ade0 <log2f+0x3c>
 800add8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800addc:	f000 bfc4 	b.w	800bd68 <__math_invalidf>
 800ade0:	eddf 7a21 	vldr	s15, [pc, #132]	; 800ae68 <log2f+0xc4>
 800ade4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ade8:	ee10 3a10 	vmov	r3, s0
 800adec:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
 800adf0:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
 800adf4:	491d      	ldr	r1, [pc, #116]	; (800ae6c <log2f+0xc8>)
 800adf6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800adfa:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 800adfe:	f3c3 40c3 	ubfx	r0, r3, #19, #4
 800ae02:	0ddc      	lsrs	r4, r3, #23
 800ae04:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800ae08:	05e4      	lsls	r4, r4, #23
 800ae0a:	ed90 5b00 	vldr	d5, [r0]
 800ae0e:	1b12      	subs	r2, r2, r4
 800ae10:	ee07 2a90 	vmov	s15, r2
 800ae14:	ed91 4b42 	vldr	d4, [r1, #264]	; 0x108
 800ae18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ae1c:	eea5 6b07 	vfma.f64	d6, d5, d7
 800ae20:	eeb0 7b46 	vmov.f64	d7, d6
 800ae24:	ee26 5b06 	vmul.f64	d5, d6, d6
 800ae28:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 800ae2c:	eea4 6b07 	vfma.f64	d6, d4, d7
 800ae30:	ed91 4b40 	vldr	d4, [r1, #256]	; 0x100
 800ae34:	15db      	asrs	r3, r3, #23
 800ae36:	eea4 6b05 	vfma.f64	d6, d4, d5
 800ae3a:	ed90 4b02 	vldr	d4, [r0, #8]
 800ae3e:	ee00 3a10 	vmov	s0, r3
 800ae42:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800ae46:	ee30 0b04 	vadd.f64	d0, d0, d4
 800ae4a:	ed91 4b46 	vldr	d4, [r1, #280]	; 0x118
 800ae4e:	eea4 0b07 	vfma.f64	d0, d4, d7
 800ae52:	eea5 0b06 	vfma.f64	d0, d5, d6
 800ae56:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ae5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae5e:	4770      	bx	lr
 800ae60:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800ae70 <log2f+0xcc>
 800ae64:	e7f9      	b.n	800ae5a <log2f+0xb6>
 800ae66:	bf00      	nop
 800ae68:	4b000000 	.word	0x4b000000
 800ae6c:	0800f9e0 	.word	0x0800f9e0
 800ae70:	00000000 	.word	0x00000000

0800ae74 <checkint>:
 800ae74:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ae78:	2b7e      	cmp	r3, #126	; 0x7e
 800ae7a:	dd10      	ble.n	800ae9e <checkint+0x2a>
 800ae7c:	2b96      	cmp	r3, #150	; 0x96
 800ae7e:	dc0c      	bgt.n	800ae9a <checkint+0x26>
 800ae80:	2201      	movs	r2, #1
 800ae82:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800ae86:	fa02 f303 	lsl.w	r3, r2, r3
 800ae8a:	1e5a      	subs	r2, r3, #1
 800ae8c:	4202      	tst	r2, r0
 800ae8e:	d106      	bne.n	800ae9e <checkint+0x2a>
 800ae90:	4203      	tst	r3, r0
 800ae92:	bf0c      	ite	eq
 800ae94:	2002      	moveq	r0, #2
 800ae96:	2001      	movne	r0, #1
 800ae98:	4770      	bx	lr
 800ae9a:	2002      	movs	r0, #2
 800ae9c:	4770      	bx	lr
 800ae9e:	2000      	movs	r0, #0
 800aea0:	4770      	bx	lr
 800aea2:	0000      	movs	r0, r0
 800aea4:	0000      	movs	r0, r0
	...

0800aea8 <powf>:
 800aea8:	ee10 1a10 	vmov	r1, s0
 800aeac:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800aeb0:	ee10 4a90 	vmov	r4, s1
 800aeb4:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800aeb8:	0062      	lsls	r2, r4, #1
 800aeba:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800aebe:	eef0 4a60 	vmov.f32	s9, s1
 800aec2:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800aec6:	4b92      	ldr	r3, [pc, #584]	; (800b110 <powf+0x268>)
 800aec8:	d255      	bcs.n	800af76 <powf+0xce>
 800aeca:	4298      	cmp	r0, r3
 800aecc:	d855      	bhi.n	800af7a <powf+0xd2>
 800aece:	2000      	movs	r0, #0
 800aed0:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 800aed4:	4a8f      	ldr	r2, [pc, #572]	; (800b114 <powf+0x26c>)
 800aed6:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
 800aeda:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 800aede:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 800aee2:	0ddb      	lsrs	r3, r3, #23
 800aee4:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 800aee8:	05db      	lsls	r3, r3, #23
 800aeea:	ed94 6b00 	vldr	d6, [r4]
 800aeee:	1ac9      	subs	r1, r1, r3
 800aef0:	ee07 1a90 	vmov	s15, r1
 800aef4:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 800aef8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800aefc:	eea6 2b07 	vfma.f64	d2, d6, d7
 800af00:	ed92 7b42 	vldr	d7, [r2, #264]	; 0x108
 800af04:	ee22 6b02 	vmul.f64	d6, d2, d2
 800af08:	eea2 7b05 	vfma.f64	d7, d2, d5
 800af0c:	15db      	asrs	r3, r3, #23
 800af0e:	ed94 5b02 	vldr	d5, [r4, #8]
 800af12:	ee00 3a10 	vmov	s0, r3
 800af16:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800af1a:	ee30 0b05 	vadd.f64	d0, d0, d5
 800af1e:	ed92 5b48 	vldr	d5, [r2, #288]	; 0x120
 800af22:	ed92 3b44 	vldr	d3, [r2, #272]	; 0x110
 800af26:	eea2 0b05 	vfma.f64	d0, d2, d5
 800af2a:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 800af2e:	eea2 5b03 	vfma.f64	d5, d2, d3
 800af32:	eea6 0b05 	vfma.f64	d0, d6, d5
 800af36:	ee26 6b06 	vmul.f64	d6, d6, d6
 800af3a:	eea7 0b06 	vfma.f64	d0, d7, d6
 800af3e:	eeb7 7ae4 	vcvt.f64.f32	d7, s9
 800af42:	ee20 0b07 	vmul.f64	d0, d0, d7
 800af46:	ee10 3a90 	vmov	r3, s1
 800af4a:	2500      	movs	r5, #0
 800af4c:	0bda      	lsrs	r2, r3, #15
 800af4e:	2300      	movs	r3, #0
 800af50:	b292      	uxth	r2, r2
 800af52:	f248 04be 	movw	r4, #32958	; 0x80be
 800af56:	429d      	cmp	r5, r3
 800af58:	bf08      	it	eq
 800af5a:	4294      	cmpeq	r4, r2
 800af5c:	f080 8094 	bcs.w	800b088 <powf+0x1e0>
 800af60:	ed9f 7b65 	vldr	d7, [pc, #404]	; 800b0f8 <powf+0x250>
 800af64:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800af68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af6c:	dd76      	ble.n	800b05c <powf+0x1b4>
 800af6e:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800af72:	f000 bee3 	b.w	800bd3c <__math_oflowf>
 800af76:	4298      	cmp	r0, r3
 800af78:	d92d      	bls.n	800afd6 <powf+0x12e>
 800af7a:	b952      	cbnz	r2, 800af92 <powf+0xea>
 800af7c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800af80:	005b      	lsls	r3, r3, #1
 800af82:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800af86:	f240 80ae 	bls.w	800b0e6 <powf+0x23e>
 800af8a:	ee30 0a24 	vadd.f32	s0, s0, s9
 800af8e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800af92:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800af96:	d105      	bne.n	800afa4 <powf+0xfc>
 800af98:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800af9c:	0064      	lsls	r4, r4, #1
 800af9e:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800afa2:	e7f0      	b.n	800af86 <powf+0xde>
 800afa4:	004b      	lsls	r3, r1, #1
 800afa6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800afaa:	d8ee      	bhi.n	800af8a <powf+0xe2>
 800afac:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800afb0:	d1eb      	bne.n	800af8a <powf+0xe2>
 800afb2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800afb6:	f000 8096 	beq.w	800b0e6 <powf+0x23e>
 800afba:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800afbe:	ea6f 0404 	mvn.w	r4, r4
 800afc2:	bf34      	ite	cc
 800afc4:	2300      	movcc	r3, #0
 800afc6:	2301      	movcs	r3, #1
 800afc8:	0fe4      	lsrs	r4, r4, #31
 800afca:	42a3      	cmp	r3, r4
 800afcc:	f040 808e 	bne.w	800b0ec <powf+0x244>
 800afd0:	ee24 0aa4 	vmul.f32	s0, s9, s9
 800afd4:	e7db      	b.n	800af8e <powf+0xe6>
 800afd6:	004d      	lsls	r5, r1, #1
 800afd8:	1e6a      	subs	r2, r5, #1
 800afda:	429a      	cmp	r2, r3
 800afdc:	d91b      	bls.n	800b016 <powf+0x16e>
 800afde:	2900      	cmp	r1, #0
 800afe0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800afe4:	da0e      	bge.n	800b004 <powf+0x15c>
 800afe6:	ee10 0a90 	vmov	r0, s1
 800afea:	f7ff ff43 	bl	800ae74 <checkint>
 800afee:	2801      	cmp	r0, #1
 800aff0:	d108      	bne.n	800b004 <powf+0x15c>
 800aff2:	eeb1 0a40 	vneg.f32	s0, s0
 800aff6:	b93d      	cbnz	r5, 800b008 <powf+0x160>
 800aff8:	2c00      	cmp	r4, #0
 800affa:	dac8      	bge.n	800af8e <powf+0xe6>
 800affc:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800b000:	f000 bea2 	b.w	800bd48 <__math_divzerof>
 800b004:	2000      	movs	r0, #0
 800b006:	e7f6      	b.n	800aff6 <powf+0x14e>
 800b008:	2c00      	cmp	r4, #0
 800b00a:	dac0      	bge.n	800af8e <powf+0xe6>
 800b00c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b010:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800b014:	e7bb      	b.n	800af8e <powf+0xe6>
 800b016:	2900      	cmp	r1, #0
 800b018:	da1e      	bge.n	800b058 <powf+0x1b0>
 800b01a:	ee10 0a90 	vmov	r0, s1
 800b01e:	f7ff ff29 	bl	800ae74 <checkint>
 800b022:	b918      	cbnz	r0, 800b02c <powf+0x184>
 800b024:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800b028:	f000 be9e 	b.w	800bd68 <__math_invalidf>
 800b02c:	2801      	cmp	r0, #1
 800b02e:	bf0c      	ite	eq
 800b030:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800b034:	2000      	movne	r0, #0
 800b036:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b03a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800b03e:	f4bf af47 	bcs.w	800aed0 <powf+0x28>
 800b042:	eddf 0a35 	vldr	s1, [pc, #212]	; 800b118 <powf+0x270>
 800b046:	ee20 0a20 	vmul.f32	s0, s0, s1
 800b04a:	ee10 3a10 	vmov	r3, s0
 800b04e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b052:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800b056:	e73b      	b.n	800aed0 <powf+0x28>
 800b058:	2000      	movs	r0, #0
 800b05a:	e7ee      	b.n	800b03a <powf+0x192>
 800b05c:	ed9f 7b28 	vldr	d7, [pc, #160]	; 800b100 <powf+0x258>
 800b060:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b068:	d803      	bhi.n	800b072 <powf+0x1ca>
 800b06a:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800b06e:	f000 be59 	b.w	800bd24 <__math_uflowf>
 800b072:	ed9f 7b25 	vldr	d7, [pc, #148]	; 800b108 <powf+0x260>
 800b076:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b07a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b07e:	d503      	bpl.n	800b088 <powf+0x1e0>
 800b080:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800b084:	f000 be54 	b.w	800bd30 <__math_may_uflowf>
 800b088:	4924      	ldr	r1, [pc, #144]	; (800b11c <powf+0x274>)
 800b08a:	ed91 7b40 	vldr	d7, [r1, #256]	; 0x100
 800b08e:	ee30 6b07 	vadd.f64	d6, d0, d7
 800b092:	ec55 4b16 	vmov	r4, r5, d6
 800b096:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b09a:	f004 021f 	and.w	r2, r4, #31
 800b09e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800b0a2:	ed91 6b46 	vldr	d6, [r1, #280]	; 0x118
 800b0a6:	ee30 0b47 	vsub.f64	d0, d0, d7
 800b0aa:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800b0ae:	e9d2 6700 	ldrd	r6, r7, [r2]
 800b0b2:	eea0 7b06 	vfma.f64	d7, d0, d6
 800b0b6:	1824      	adds	r4, r4, r0
 800b0b8:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 800b0bc:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 800b0c0:	2000      	movs	r0, #0
 800b0c2:	1982      	adds	r2, r0, r6
 800b0c4:	ea4f 31c4 	mov.w	r1, r4, lsl #15
 800b0c8:	eb41 0307 	adc.w	r3, r1, r7
 800b0cc:	eea0 6b05 	vfma.f64	d6, d0, d5
 800b0d0:	ee20 0b00 	vmul.f64	d0, d0, d0
 800b0d4:	eea6 7b00 	vfma.f64	d7, d6, d0
 800b0d8:	ec43 2b16 	vmov	d6, r2, r3
 800b0dc:	ee27 0b06 	vmul.f64	d0, d7, d6
 800b0e0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b0e4:	e753      	b.n	800af8e <powf+0xe6>
 800b0e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b0ea:	e750      	b.n	800af8e <powf+0xe6>
 800b0ec:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800b120 <powf+0x278>
 800b0f0:	e74d      	b.n	800af8e <powf+0xe6>
 800b0f2:	bf00      	nop
 800b0f4:	f3af 8000 	nop.w
 800b0f8:	ffd1d571 	.word	0xffd1d571
 800b0fc:	405fffff 	.word	0x405fffff
 800b100:	00000000 	.word	0x00000000
 800b104:	c062c000 	.word	0xc062c000
 800b108:	00000000 	.word	0x00000000
 800b10c:	c062a000 	.word	0xc062a000
 800b110:	fefffffe 	.word	0xfefffffe
 800b114:	0800fb00 	.word	0x0800fb00
 800b118:	4b000000 	.word	0x4b000000
 800b11c:	0800f898 	.word	0x0800f898
 800b120:	00000000 	.word	0x00000000

0800b124 <tanf>:
 800b124:	ee10 3a10 	vmov	r3, s0
 800b128:	b507      	push	{r0, r1, r2, lr}
 800b12a:	4a10      	ldr	r2, [pc, #64]	; (800b16c <tanf+0x48>)
 800b12c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b130:	4293      	cmp	r3, r2
 800b132:	dc05      	bgt.n	800b140 <tanf+0x1c>
 800b134:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800b170 <tanf+0x4c>
 800b138:	2001      	movs	r0, #1
 800b13a:	f000 fcf5 	bl	800bb28 <__kernel_tanf>
 800b13e:	e004      	b.n	800b14a <tanf+0x26>
 800b140:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b144:	db04      	blt.n	800b150 <tanf+0x2c>
 800b146:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b14a:	b003      	add	sp, #12
 800b14c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b150:	4668      	mov	r0, sp
 800b152:	f000 f8cd 	bl	800b2f0 <__ieee754_rem_pio2f>
 800b156:	0040      	lsls	r0, r0, #1
 800b158:	f000 0002 	and.w	r0, r0, #2
 800b15c:	f1c0 0001 	rsb	r0, r0, #1
 800b160:	eddd 0a01 	vldr	s1, [sp, #4]
 800b164:	ed9d 0a00 	vldr	s0, [sp]
 800b168:	e7e7      	b.n	800b13a <tanf+0x16>
 800b16a:	bf00      	nop
 800b16c:	3f490fda 	.word	0x3f490fda
 800b170:	00000000 	.word	0x00000000

0800b174 <tanhf>:
 800b174:	b510      	push	{r4, lr}
 800b176:	ee10 4a10 	vmov	r4, s0
 800b17a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b17e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b182:	ed2d 8b02 	vpush	{d8}
 800b186:	eef0 7a40 	vmov.f32	s15, s0
 800b18a:	db0c      	blt.n	800b1a6 <tanhf+0x32>
 800b18c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b190:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b194:	2c00      	cmp	r4, #0
 800b196:	bfac      	ite	ge
 800b198:	ee30 0a07 	vaddge.f32	s0, s0, s14
 800b19c:	ee30 0a47 	vsublt.f32	s0, s0, s14
 800b1a0:	ecbd 8b02 	vpop	{d8}
 800b1a4:	bd10      	pop	{r4, pc}
 800b1a6:	4a1b      	ldr	r2, [pc, #108]	; (800b214 <tanhf+0xa0>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	dc30      	bgt.n	800b20e <tanhf+0x9a>
 800b1ac:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800b1b0:	da06      	bge.n	800b1c0 <tanhf+0x4c>
 800b1b2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b1b6:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b1ba:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b1be:	e7ef      	b.n	800b1a0 <tanhf+0x2c>
 800b1c0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800b1c4:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 800b1c8:	db12      	blt.n	800b1f0 <tanhf+0x7c>
 800b1ca:	f7ff fde3 	bl	800ad94 <fabsf>
 800b1ce:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b1d2:	f000 fddb 	bl	800bd8c <expm1f>
 800b1d6:	ee30 0a08 	vadd.f32	s0, s0, s16
 800b1da:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800b1de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b1e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b1e6:	2c00      	cmp	r4, #0
 800b1e8:	bfb8      	it	lt
 800b1ea:	eeb1 0a40 	vneglt.f32	s0, s0
 800b1ee:	e7d7      	b.n	800b1a0 <tanhf+0x2c>
 800b1f0:	f7ff fdd0 	bl	800ad94 <fabsf>
 800b1f4:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800b1f8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b1fc:	f000 fdc6 	bl	800bd8c <expm1f>
 800b200:	ee70 7a08 	vadd.f32	s15, s0, s16
 800b204:	eeb1 7a40 	vneg.f32	s14, s0
 800b208:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b20c:	e7eb      	b.n	800b1e6 <tanhf+0x72>
 800b20e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b212:	e7e8      	b.n	800b1e6 <tanhf+0x72>
 800b214:	41afffff 	.word	0x41afffff

0800b218 <sinhf>:
 800b218:	b530      	push	{r4, r5, lr}
 800b21a:	ed2d 8b02 	vpush	{d8}
 800b21e:	4c32      	ldr	r4, [pc, #200]	; (800b2e8 <sinhf+0xd0>)
 800b220:	b08b      	sub	sp, #44	; 0x2c
 800b222:	eef0 8a40 	vmov.f32	s17, s0
 800b226:	f000 f98f 	bl	800b548 <__ieee754_sinhf>
 800b22a:	f994 3000 	ldrsb.w	r3, [r4]
 800b22e:	3301      	adds	r3, #1
 800b230:	eeb0 8a40 	vmov.f32	s16, s0
 800b234:	d030      	beq.n	800b298 <sinhf+0x80>
 800b236:	f000 fed3 	bl	800bfe0 <finitef>
 800b23a:	4605      	mov	r5, r0
 800b23c:	bb60      	cbnz	r0, 800b298 <sinhf+0x80>
 800b23e:	eeb0 0a68 	vmov.f32	s0, s17
 800b242:	f000 fecd 	bl	800bfe0 <finitef>
 800b246:	b338      	cbz	r0, 800b298 <sinhf+0x80>
 800b248:	2303      	movs	r3, #3
 800b24a:	9300      	str	r3, [sp, #0]
 800b24c:	4b27      	ldr	r3, [pc, #156]	; (800b2ec <sinhf+0xd4>)
 800b24e:	9301      	str	r3, [sp, #4]
 800b250:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
 800b254:	f994 3000 	ldrsb.w	r3, [r4]
 800b258:	9508      	str	r5, [sp, #32]
 800b25a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b25e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b262:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800b266:	b9eb      	cbnz	r3, 800b2a4 <sinhf+0x8c>
 800b268:	ed9f 7b17 	vldr	d7, [pc, #92]	; 800b2c8 <sinhf+0xb0>
 800b26c:	ed9f 6b18 	vldr	d6, [pc, #96]	; 800b2d0 <sinhf+0xb8>
 800b270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b274:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800b278:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b27c:	4668      	mov	r0, sp
 800b27e:	f000 fd82 	bl	800bd86 <matherr>
 800b282:	b1d8      	cbz	r0, 800b2bc <sinhf+0xa4>
 800b284:	9b08      	ldr	r3, [sp, #32]
 800b286:	b11b      	cbz	r3, 800b290 <sinhf+0x78>
 800b288:	f7ff fcd4 	bl	800ac34 <__errno>
 800b28c:	9b08      	ldr	r3, [sp, #32]
 800b28e:	6003      	str	r3, [r0, #0]
 800b290:	ed9d 8b06 	vldr	d8, [sp, #24]
 800b294:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
 800b298:	eeb0 0a48 	vmov.f32	s0, s16
 800b29c:	b00b      	add	sp, #44	; 0x2c
 800b29e:	ecbd 8b02 	vpop	{d8}
 800b2a2:	bd30      	pop	{r4, r5, pc}
 800b2a4:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800b2d8 <sinhf+0xc0>
 800b2a8:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800b2e0 <sinhf+0xc8>
 800b2ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2b0:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800b2b4:	2b02      	cmp	r3, #2
 800b2b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b2ba:	d1df      	bne.n	800b27c <sinhf+0x64>
 800b2bc:	f7ff fcba 	bl	800ac34 <__errno>
 800b2c0:	2322      	movs	r3, #34	; 0x22
 800b2c2:	6003      	str	r3, [r0, #0]
 800b2c4:	e7de      	b.n	800b284 <sinhf+0x6c>
 800b2c6:	bf00      	nop
 800b2c8:	e0000000 	.word	0xe0000000
 800b2cc:	47efffff 	.word	0x47efffff
 800b2d0:	e0000000 	.word	0xe0000000
 800b2d4:	c7efffff 	.word	0xc7efffff
 800b2d8:	00000000 	.word	0x00000000
 800b2dc:	7ff00000 	.word	0x7ff00000
 800b2e0:	00000000 	.word	0x00000000
 800b2e4:	fff00000 	.word	0xfff00000
 800b2e8:	20000184 	.word	0x20000184
 800b2ec:	0800fc28 	.word	0x0800fc28

0800b2f0 <__ieee754_rem_pio2f>:
 800b2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2f2:	ee10 6a10 	vmov	r6, s0
 800b2f6:	4b86      	ldr	r3, [pc, #536]	; (800b510 <__ieee754_rem_pio2f+0x220>)
 800b2f8:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800b2fc:	429c      	cmp	r4, r3
 800b2fe:	b087      	sub	sp, #28
 800b300:	4605      	mov	r5, r0
 800b302:	dc05      	bgt.n	800b310 <__ieee754_rem_pio2f+0x20>
 800b304:	2300      	movs	r3, #0
 800b306:	ed85 0a00 	vstr	s0, [r5]
 800b30a:	6043      	str	r3, [r0, #4]
 800b30c:	2000      	movs	r0, #0
 800b30e:	e020      	b.n	800b352 <__ieee754_rem_pio2f+0x62>
 800b310:	4b80      	ldr	r3, [pc, #512]	; (800b514 <__ieee754_rem_pio2f+0x224>)
 800b312:	429c      	cmp	r4, r3
 800b314:	dc38      	bgt.n	800b388 <__ieee754_rem_pio2f+0x98>
 800b316:	2e00      	cmp	r6, #0
 800b318:	f024 040f 	bic.w	r4, r4, #15
 800b31c:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800b518 <__ieee754_rem_pio2f+0x228>
 800b320:	4b7e      	ldr	r3, [pc, #504]	; (800b51c <__ieee754_rem_pio2f+0x22c>)
 800b322:	dd18      	ble.n	800b356 <__ieee754_rem_pio2f+0x66>
 800b324:	429c      	cmp	r4, r3
 800b326:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b32a:	bf09      	itett	eq
 800b32c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800b520 <__ieee754_rem_pio2f+0x230>
 800b330:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800b524 <__ieee754_rem_pio2f+0x234>
 800b334:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b338:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800b528 <__ieee754_rem_pio2f+0x238>
 800b33c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b340:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b344:	edc0 6a00 	vstr	s13, [r0]
 800b348:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b34c:	edc0 7a01 	vstr	s15, [r0, #4]
 800b350:	2001      	movs	r0, #1
 800b352:	b007      	add	sp, #28
 800b354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b356:	429c      	cmp	r4, r3
 800b358:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b35c:	bf09      	itett	eq
 800b35e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800b520 <__ieee754_rem_pio2f+0x230>
 800b362:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800b524 <__ieee754_rem_pio2f+0x234>
 800b366:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b36a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800b528 <__ieee754_rem_pio2f+0x238>
 800b36e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b372:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b376:	edc0 6a00 	vstr	s13, [r0]
 800b37a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b37e:	edc0 7a01 	vstr	s15, [r0, #4]
 800b382:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b386:	e7e4      	b.n	800b352 <__ieee754_rem_pio2f+0x62>
 800b388:	4b68      	ldr	r3, [pc, #416]	; (800b52c <__ieee754_rem_pio2f+0x23c>)
 800b38a:	429c      	cmp	r4, r3
 800b38c:	dc71      	bgt.n	800b472 <__ieee754_rem_pio2f+0x182>
 800b38e:	f7ff fd01 	bl	800ad94 <fabsf>
 800b392:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800b530 <__ieee754_rem_pio2f+0x240>
 800b396:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b39a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b39e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3a2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800b3a6:	ee17 0a90 	vmov	r0, s15
 800b3aa:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800b518 <__ieee754_rem_pio2f+0x228>
 800b3ae:	eeb1 7a46 	vneg.f32	s14, s12
 800b3b2:	eea7 0a27 	vfma.f32	s0, s14, s15
 800b3b6:	281f      	cmp	r0, #31
 800b3b8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800b524 <__ieee754_rem_pio2f+0x234>
 800b3bc:	ee66 7a27 	vmul.f32	s15, s12, s15
 800b3c0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b3c4:	ee16 3a90 	vmov	r3, s13
 800b3c8:	dc1c      	bgt.n	800b404 <__ieee754_rem_pio2f+0x114>
 800b3ca:	1e47      	subs	r7, r0, #1
 800b3cc:	4959      	ldr	r1, [pc, #356]	; (800b534 <__ieee754_rem_pio2f+0x244>)
 800b3ce:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800b3d2:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800b3d6:	428a      	cmp	r2, r1
 800b3d8:	d014      	beq.n	800b404 <__ieee754_rem_pio2f+0x114>
 800b3da:	602b      	str	r3, [r5, #0]
 800b3dc:	ed95 7a00 	vldr	s14, [r5]
 800b3e0:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b3e4:	2e00      	cmp	r6, #0
 800b3e6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b3ea:	ed85 0a01 	vstr	s0, [r5, #4]
 800b3ee:	dab0      	bge.n	800b352 <__ieee754_rem_pio2f+0x62>
 800b3f0:	eeb1 7a47 	vneg.f32	s14, s14
 800b3f4:	eeb1 0a40 	vneg.f32	s0, s0
 800b3f8:	ed85 7a00 	vstr	s14, [r5]
 800b3fc:	ed85 0a01 	vstr	s0, [r5, #4]
 800b400:	4240      	negs	r0, r0
 800b402:	e7a6      	b.n	800b352 <__ieee754_rem_pio2f+0x62>
 800b404:	15e4      	asrs	r4, r4, #23
 800b406:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b40a:	1aa2      	subs	r2, r4, r2
 800b40c:	2a08      	cmp	r2, #8
 800b40e:	dde4      	ble.n	800b3da <__ieee754_rem_pio2f+0xea>
 800b410:	eddf 7a43 	vldr	s15, [pc, #268]	; 800b520 <__ieee754_rem_pio2f+0x230>
 800b414:	eef0 6a40 	vmov.f32	s13, s0
 800b418:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b41c:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b420:	eea7 0a27 	vfma.f32	s0, s14, s15
 800b424:	eddf 7a40 	vldr	s15, [pc, #256]	; 800b528 <__ieee754_rem_pio2f+0x238>
 800b428:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800b42c:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800b430:	eef0 7a40 	vmov.f32	s15, s0
 800b434:	ee15 3a90 	vmov	r3, s11
 800b438:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b43c:	1aa4      	subs	r4, r4, r2
 800b43e:	2c19      	cmp	r4, #25
 800b440:	dc04      	bgt.n	800b44c <__ieee754_rem_pio2f+0x15c>
 800b442:	edc5 5a00 	vstr	s11, [r5]
 800b446:	eeb0 0a66 	vmov.f32	s0, s13
 800b44a:	e7c7      	b.n	800b3dc <__ieee754_rem_pio2f+0xec>
 800b44c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800b538 <__ieee754_rem_pio2f+0x248>
 800b450:	eeb0 0a66 	vmov.f32	s0, s13
 800b454:	eea7 0a25 	vfma.f32	s0, s14, s11
 800b458:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b45c:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b460:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800b53c <__ieee754_rem_pio2f+0x24c>
 800b464:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800b468:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b46c:	ed85 7a00 	vstr	s14, [r5]
 800b470:	e7b4      	b.n	800b3dc <__ieee754_rem_pio2f+0xec>
 800b472:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800b476:	db06      	blt.n	800b486 <__ieee754_rem_pio2f+0x196>
 800b478:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b47c:	edc0 7a01 	vstr	s15, [r0, #4]
 800b480:	edc0 7a00 	vstr	s15, [r0]
 800b484:	e742      	b.n	800b30c <__ieee754_rem_pio2f+0x1c>
 800b486:	15e2      	asrs	r2, r4, #23
 800b488:	3a86      	subs	r2, #134	; 0x86
 800b48a:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800b48e:	ee07 3a90 	vmov	s15, r3
 800b492:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b496:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800b540 <__ieee754_rem_pio2f+0x250>
 800b49a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b49e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b4a2:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b4a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b4aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b4ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b4b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b4b6:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b4ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b4be:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4c6:	edcd 7a05 	vstr	s15, [sp, #20]
 800b4ca:	d11e      	bne.n	800b50a <__ieee754_rem_pio2f+0x21a>
 800b4cc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b4d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4d4:	bf0c      	ite	eq
 800b4d6:	2301      	moveq	r3, #1
 800b4d8:	2302      	movne	r3, #2
 800b4da:	491a      	ldr	r1, [pc, #104]	; (800b544 <__ieee754_rem_pio2f+0x254>)
 800b4dc:	9101      	str	r1, [sp, #4]
 800b4de:	2102      	movs	r1, #2
 800b4e0:	9100      	str	r1, [sp, #0]
 800b4e2:	a803      	add	r0, sp, #12
 800b4e4:	4629      	mov	r1, r5
 800b4e6:	f000 f89d 	bl	800b624 <__kernel_rem_pio2f>
 800b4ea:	2e00      	cmp	r6, #0
 800b4ec:	f6bf af31 	bge.w	800b352 <__ieee754_rem_pio2f+0x62>
 800b4f0:	edd5 7a00 	vldr	s15, [r5]
 800b4f4:	eef1 7a67 	vneg.f32	s15, s15
 800b4f8:	edc5 7a00 	vstr	s15, [r5]
 800b4fc:	edd5 7a01 	vldr	s15, [r5, #4]
 800b500:	eef1 7a67 	vneg.f32	s15, s15
 800b504:	edc5 7a01 	vstr	s15, [r5, #4]
 800b508:	e77a      	b.n	800b400 <__ieee754_rem_pio2f+0x110>
 800b50a:	2303      	movs	r3, #3
 800b50c:	e7e5      	b.n	800b4da <__ieee754_rem_pio2f+0x1ea>
 800b50e:	bf00      	nop
 800b510:	3f490fd8 	.word	0x3f490fd8
 800b514:	4016cbe3 	.word	0x4016cbe3
 800b518:	3fc90f80 	.word	0x3fc90f80
 800b51c:	3fc90fd0 	.word	0x3fc90fd0
 800b520:	37354400 	.word	0x37354400
 800b524:	37354443 	.word	0x37354443
 800b528:	2e85a308 	.word	0x2e85a308
 800b52c:	43490f80 	.word	0x43490f80
 800b530:	3f22f984 	.word	0x3f22f984
 800b534:	0800fc30 	.word	0x0800fc30
 800b538:	2e85a300 	.word	0x2e85a300
 800b53c:	248d3132 	.word	0x248d3132
 800b540:	43800000 	.word	0x43800000
 800b544:	0800fcb0 	.word	0x0800fcb0

0800b548 <__ieee754_sinhf>:
 800b548:	b510      	push	{r4, lr}
 800b54a:	ee10 3a10 	vmov	r3, s0
 800b54e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800b552:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800b556:	ed2d 8b02 	vpush	{d8}
 800b55a:	eef0 7a40 	vmov.f32	s15, s0
 800b55e:	db06      	blt.n	800b56e <__ieee754_sinhf+0x26>
 800b560:	ee70 7a00 	vadd.f32	s15, s0, s0
 800b564:	ecbd 8b02 	vpop	{d8}
 800b568:	eeb0 0a67 	vmov.f32	s0, s15
 800b56c:	bd10      	pop	{r4, pc}
 800b56e:	2b00      	cmp	r3, #0
 800b570:	4b28      	ldr	r3, [pc, #160]	; (800b614 <__ieee754_sinhf+0xcc>)
 800b572:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 800b576:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 800b57a:	fe28 8a88 	vselge.f32	s16, s17, s16
 800b57e:	429c      	cmp	r4, r3
 800b580:	dc2a      	bgt.n	800b5d8 <__ieee754_sinhf+0x90>
 800b582:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 800b586:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800b58a:	da08      	bge.n	800b59e <__ieee754_sinhf+0x56>
 800b58c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800b618 <__ieee754_sinhf+0xd0>
 800b590:	ee30 7a07 	vadd.f32	s14, s0, s14
 800b594:	eeb4 7ae8 	vcmpe.f32	s14, s17
 800b598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b59c:	dce2      	bgt.n	800b564 <__ieee754_sinhf+0x1c>
 800b59e:	eeb0 0a67 	vmov.f32	s0, s15
 800b5a2:	f7ff fbf7 	bl	800ad94 <fabsf>
 800b5a6:	f000 fbf1 	bl	800bd8c <expm1f>
 800b5aa:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800b5ae:	bfbb      	ittet	lt
 800b5b0:	ee20 7a00 	vmullt.f32	s14, s0, s0
 800b5b4:	ee70 8a28 	vaddlt.f32	s17, s0, s17
 800b5b8:	ee70 8a28 	vaddge.f32	s17, s0, s17
 800b5bc:	eec7 7a28 	vdivlt.f32	s15, s14, s17
 800b5c0:	bfad      	iteet	ge
 800b5c2:	eec0 7a28 	vdivge.f32	s15, s0, s17
 800b5c6:	eeb0 7a00 	vmovlt.f32	s14, #0	; 0x40000000  2.0
 800b5ca:	eed0 7a07 	vfnmslt.f32	s15, s0, s14
 800b5ce:	ee77 7a80 	vaddge.f32	s15, s15, s0
 800b5d2:	ee67 7a88 	vmul.f32	s15, s15, s16
 800b5d6:	e7c5      	b.n	800b564 <__ieee754_sinhf+0x1c>
 800b5d8:	4b10      	ldr	r3, [pc, #64]	; (800b61c <__ieee754_sinhf+0xd4>)
 800b5da:	429c      	cmp	r4, r3
 800b5dc:	dc06      	bgt.n	800b5ec <__ieee754_sinhf+0xa4>
 800b5de:	f7ff fbd9 	bl	800ad94 <fabsf>
 800b5e2:	f7ff fb59 	bl	800ac98 <expf>
 800b5e6:	ee60 7a08 	vmul.f32	s15, s0, s16
 800b5ea:	e7bb      	b.n	800b564 <__ieee754_sinhf+0x1c>
 800b5ec:	4b0c      	ldr	r3, [pc, #48]	; (800b620 <__ieee754_sinhf+0xd8>)
 800b5ee:	429c      	cmp	r4, r3
 800b5f0:	dc0a      	bgt.n	800b608 <__ieee754_sinhf+0xc0>
 800b5f2:	f7ff fbcf 	bl	800ad94 <fabsf>
 800b5f6:	ee20 0a28 	vmul.f32	s0, s0, s17
 800b5fa:	f7ff fb4d 	bl	800ac98 <expf>
 800b5fe:	ee68 7a00 	vmul.f32	s15, s16, s0
 800b602:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b606:	e7ad      	b.n	800b564 <__ieee754_sinhf+0x1c>
 800b608:	ed9f 7a03 	vldr	s14, [pc, #12]	; 800b618 <__ieee754_sinhf+0xd0>
 800b60c:	ee60 7a07 	vmul.f32	s15, s0, s14
 800b610:	e7a8      	b.n	800b564 <__ieee754_sinhf+0x1c>
 800b612:	bf00      	nop
 800b614:	41afffff 	.word	0x41afffff
 800b618:	7cf0bdc2 	.word	0x7cf0bdc2
 800b61c:	42b17217 	.word	0x42b17217
 800b620:	42b2d4fc 	.word	0x42b2d4fc

0800b624 <__kernel_rem_pio2f>:
 800b624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b628:	ed2d 8b04 	vpush	{d8-d9}
 800b62c:	b0d7      	sub	sp, #348	; 0x15c
 800b62e:	469b      	mov	fp, r3
 800b630:	460e      	mov	r6, r1
 800b632:	4bbe      	ldr	r3, [pc, #760]	; (800b92c <__kernel_rem_pio2f+0x308>)
 800b634:	9964      	ldr	r1, [sp, #400]	; 0x190
 800b636:	9002      	str	r0, [sp, #8]
 800b638:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800b63c:	9865      	ldr	r0, [sp, #404]	; 0x194
 800b63e:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800b93c <__kernel_rem_pio2f+0x318>
 800b642:	1ed1      	subs	r1, r2, #3
 800b644:	2308      	movs	r3, #8
 800b646:	fb91 f1f3 	sdiv	r1, r1, r3
 800b64a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800b64e:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 800b652:	1c4c      	adds	r4, r1, #1
 800b654:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800b658:	eba1 050a 	sub.w	r5, r1, sl
 800b65c:	aa1a      	add	r2, sp, #104	; 0x68
 800b65e:	eb09 070a 	add.w	r7, r9, sl
 800b662:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800b666:	4696      	mov	lr, r2
 800b668:	2300      	movs	r3, #0
 800b66a:	42bb      	cmp	r3, r7
 800b66c:	dd0f      	ble.n	800b68e <__kernel_rem_pio2f+0x6a>
 800b66e:	af42      	add	r7, sp, #264	; 0x108
 800b670:	2200      	movs	r2, #0
 800b672:	454a      	cmp	r2, r9
 800b674:	dc27      	bgt.n	800b6c6 <__kernel_rem_pio2f+0xa2>
 800b676:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800b67a:	eb0b 0302 	add.w	r3, fp, r2
 800b67e:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800b682:	9d02      	ldr	r5, [sp, #8]
 800b684:	eddf 7aad 	vldr	s15, [pc, #692]	; 800b93c <__kernel_rem_pio2f+0x318>
 800b688:	f04f 0c00 	mov.w	ip, #0
 800b68c:	e015      	b.n	800b6ba <__kernel_rem_pio2f+0x96>
 800b68e:	42dd      	cmn	r5, r3
 800b690:	bf5d      	ittte	pl
 800b692:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800b696:	ee07 2a90 	vmovpl	s15, r2
 800b69a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b69e:	eef0 7a47 	vmovmi.f32	s15, s14
 800b6a2:	ecee 7a01 	vstmia	lr!, {s15}
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	e7df      	b.n	800b66a <__kernel_rem_pio2f+0x46>
 800b6aa:	ecf5 6a01 	vldmia	r5!, {s13}
 800b6ae:	ed33 7a01 	vldmdb	r3!, {s14}
 800b6b2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b6b6:	f10c 0c01 	add.w	ip, ip, #1
 800b6ba:	45d4      	cmp	ip, sl
 800b6bc:	ddf5      	ble.n	800b6aa <__kernel_rem_pio2f+0x86>
 800b6be:	ece7 7a01 	vstmia	r7!, {s15}
 800b6c2:	3201      	adds	r2, #1
 800b6c4:	e7d5      	b.n	800b672 <__kernel_rem_pio2f+0x4e>
 800b6c6:	ab06      	add	r3, sp, #24
 800b6c8:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800b6cc:	9304      	str	r3, [sp, #16]
 800b6ce:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800b938 <__kernel_rem_pio2f+0x314>
 800b6d2:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800b934 <__kernel_rem_pio2f+0x310>
 800b6d6:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800b6da:	9303      	str	r3, [sp, #12]
 800b6dc:	464d      	mov	r5, r9
 800b6de:	ab56      	add	r3, sp, #344	; 0x158
 800b6e0:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800b6e4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800b6e8:	3f01      	subs	r7, #1
 800b6ea:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800b6ee:	00bf      	lsls	r7, r7, #2
 800b6f0:	ab56      	add	r3, sp, #344	; 0x158
 800b6f2:	19da      	adds	r2, r3, r7
 800b6f4:	3a4c      	subs	r2, #76	; 0x4c
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	1ae9      	subs	r1, r5, r3
 800b6fa:	2900      	cmp	r1, #0
 800b6fc:	dc4c      	bgt.n	800b798 <__kernel_rem_pio2f+0x174>
 800b6fe:	4620      	mov	r0, r4
 800b700:	f000 fcba 	bl	800c078 <scalbnf>
 800b704:	eeb0 8a40 	vmov.f32	s16, s0
 800b708:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800b70c:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b710:	f000 fc70 	bl	800bff4 <floorf>
 800b714:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800b718:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b71c:	2c00      	cmp	r4, #0
 800b71e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b722:	edcd 7a01 	vstr	s15, [sp, #4]
 800b726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b72a:	ee38 8a67 	vsub.f32	s16, s16, s15
 800b72e:	dd48      	ble.n	800b7c2 <__kernel_rem_pio2f+0x19e>
 800b730:	1e69      	subs	r1, r5, #1
 800b732:	ab06      	add	r3, sp, #24
 800b734:	f1c4 0008 	rsb	r0, r4, #8
 800b738:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800b73c:	9a01      	ldr	r2, [sp, #4]
 800b73e:	fa4c f300 	asr.w	r3, ip, r0
 800b742:	441a      	add	r2, r3
 800b744:	4083      	lsls	r3, r0
 800b746:	9201      	str	r2, [sp, #4]
 800b748:	ebac 0203 	sub.w	r2, ip, r3
 800b74c:	ab06      	add	r3, sp, #24
 800b74e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800b752:	f1c4 0307 	rsb	r3, r4, #7
 800b756:	fa42 f803 	asr.w	r8, r2, r3
 800b75a:	f1b8 0f00 	cmp.w	r8, #0
 800b75e:	dd41      	ble.n	800b7e4 <__kernel_rem_pio2f+0x1c0>
 800b760:	9b01      	ldr	r3, [sp, #4]
 800b762:	2000      	movs	r0, #0
 800b764:	3301      	adds	r3, #1
 800b766:	9301      	str	r3, [sp, #4]
 800b768:	4601      	mov	r1, r0
 800b76a:	4285      	cmp	r5, r0
 800b76c:	dc6d      	bgt.n	800b84a <__kernel_rem_pio2f+0x226>
 800b76e:	2c00      	cmp	r4, #0
 800b770:	dd04      	ble.n	800b77c <__kernel_rem_pio2f+0x158>
 800b772:	2c01      	cmp	r4, #1
 800b774:	d07e      	beq.n	800b874 <__kernel_rem_pio2f+0x250>
 800b776:	2c02      	cmp	r4, #2
 800b778:	f000 8086 	beq.w	800b888 <__kernel_rem_pio2f+0x264>
 800b77c:	f1b8 0f02 	cmp.w	r8, #2
 800b780:	d130      	bne.n	800b7e4 <__kernel_rem_pio2f+0x1c0>
 800b782:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b786:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b78a:	b359      	cbz	r1, 800b7e4 <__kernel_rem_pio2f+0x1c0>
 800b78c:	4620      	mov	r0, r4
 800b78e:	f000 fc73 	bl	800c078 <scalbnf>
 800b792:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b796:	e025      	b.n	800b7e4 <__kernel_rem_pio2f+0x1c0>
 800b798:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b79c:	a806      	add	r0, sp, #24
 800b79e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b7a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7a6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b7aa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b7ae:	ee10 1a10 	vmov	r1, s0
 800b7b2:	ed32 0a01 	vldmdb	r2!, {s0}
 800b7b6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800b7ba:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b7be:	3301      	adds	r3, #1
 800b7c0:	e79a      	b.n	800b6f8 <__kernel_rem_pio2f+0xd4>
 800b7c2:	d106      	bne.n	800b7d2 <__kernel_rem_pio2f+0x1ae>
 800b7c4:	1e6b      	subs	r3, r5, #1
 800b7c6:	aa06      	add	r2, sp, #24
 800b7c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b7cc:	ea4f 2822 	mov.w	r8, r2, asr #8
 800b7d0:	e7c3      	b.n	800b75a <__kernel_rem_pio2f+0x136>
 800b7d2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b7d6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b7da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7de:	da31      	bge.n	800b844 <__kernel_rem_pio2f+0x220>
 800b7e0:	f04f 0800 	mov.w	r8, #0
 800b7e4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b7e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7ec:	f040 80a8 	bne.w	800b940 <__kernel_rem_pio2f+0x31c>
 800b7f0:	1e6b      	subs	r3, r5, #1
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	4548      	cmp	r0, r9
 800b7f8:	da4d      	bge.n	800b896 <__kernel_rem_pio2f+0x272>
 800b7fa:	2a00      	cmp	r2, #0
 800b7fc:	f000 8087 	beq.w	800b90e <__kernel_rem_pio2f+0x2ea>
 800b800:	aa06      	add	r2, sp, #24
 800b802:	3c08      	subs	r4, #8
 800b804:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b808:	2900      	cmp	r1, #0
 800b80a:	f000 808d 	beq.w	800b928 <__kernel_rem_pio2f+0x304>
 800b80e:	4620      	mov	r0, r4
 800b810:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b814:	9302      	str	r3, [sp, #8]
 800b816:	f000 fc2f 	bl	800c078 <scalbnf>
 800b81a:	9b02      	ldr	r3, [sp, #8]
 800b81c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800b938 <__kernel_rem_pio2f+0x314>
 800b820:	0099      	lsls	r1, r3, #2
 800b822:	aa42      	add	r2, sp, #264	; 0x108
 800b824:	1850      	adds	r0, r2, r1
 800b826:	1d05      	adds	r5, r0, #4
 800b828:	461c      	mov	r4, r3
 800b82a:	2c00      	cmp	r4, #0
 800b82c:	f280 80b8 	bge.w	800b9a0 <__kernel_rem_pio2f+0x37c>
 800b830:	2500      	movs	r5, #0
 800b832:	1b5c      	subs	r4, r3, r5
 800b834:	2c00      	cmp	r4, #0
 800b836:	f2c0 80d8 	blt.w	800b9ea <__kernel_rem_pio2f+0x3c6>
 800b83a:	4f3d      	ldr	r7, [pc, #244]	; (800b930 <__kernel_rem_pio2f+0x30c>)
 800b83c:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800b93c <__kernel_rem_pio2f+0x318>
 800b840:	2400      	movs	r4, #0
 800b842:	e0c6      	b.n	800b9d2 <__kernel_rem_pio2f+0x3ae>
 800b844:	f04f 0802 	mov.w	r8, #2
 800b848:	e78a      	b.n	800b760 <__kernel_rem_pio2f+0x13c>
 800b84a:	ab06      	add	r3, sp, #24
 800b84c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b850:	b949      	cbnz	r1, 800b866 <__kernel_rem_pio2f+0x242>
 800b852:	b12b      	cbz	r3, 800b860 <__kernel_rem_pio2f+0x23c>
 800b854:	aa06      	add	r2, sp, #24
 800b856:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800b85a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800b85e:	2301      	movs	r3, #1
 800b860:	3001      	adds	r0, #1
 800b862:	4619      	mov	r1, r3
 800b864:	e781      	b.n	800b76a <__kernel_rem_pio2f+0x146>
 800b866:	aa06      	add	r2, sp, #24
 800b868:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800b86c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800b870:	460b      	mov	r3, r1
 800b872:	e7f5      	b.n	800b860 <__kernel_rem_pio2f+0x23c>
 800b874:	1e68      	subs	r0, r5, #1
 800b876:	ab06      	add	r3, sp, #24
 800b878:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b87c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b880:	aa06      	add	r2, sp, #24
 800b882:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800b886:	e779      	b.n	800b77c <__kernel_rem_pio2f+0x158>
 800b888:	1e68      	subs	r0, r5, #1
 800b88a:	ab06      	add	r3, sp, #24
 800b88c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b894:	e7f4      	b.n	800b880 <__kernel_rem_pio2f+0x25c>
 800b896:	a906      	add	r1, sp, #24
 800b898:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b89c:	3801      	subs	r0, #1
 800b89e:	430a      	orrs	r2, r1
 800b8a0:	e7a9      	b.n	800b7f6 <__kernel_rem_pio2f+0x1d2>
 800b8a2:	f10c 0c01 	add.w	ip, ip, #1
 800b8a6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b8aa:	2a00      	cmp	r2, #0
 800b8ac:	d0f9      	beq.n	800b8a2 <__kernel_rem_pio2f+0x27e>
 800b8ae:	eb0b 0305 	add.w	r3, fp, r5
 800b8b2:	aa1a      	add	r2, sp, #104	; 0x68
 800b8b4:	009b      	lsls	r3, r3, #2
 800b8b6:	1898      	adds	r0, r3, r2
 800b8b8:	3004      	adds	r0, #4
 800b8ba:	1c69      	adds	r1, r5, #1
 800b8bc:	3704      	adds	r7, #4
 800b8be:	2200      	movs	r2, #0
 800b8c0:	4465      	add	r5, ip
 800b8c2:	9005      	str	r0, [sp, #20]
 800b8c4:	428d      	cmp	r5, r1
 800b8c6:	f6ff af0a 	blt.w	800b6de <__kernel_rem_pio2f+0xba>
 800b8ca:	a81a      	add	r0, sp, #104	; 0x68
 800b8cc:	eb02 0c03 	add.w	ip, r2, r3
 800b8d0:	4484      	add	ip, r0
 800b8d2:	9803      	ldr	r0, [sp, #12]
 800b8d4:	f8dd e008 	ldr.w	lr, [sp, #8]
 800b8d8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800b8dc:	9001      	str	r0, [sp, #4]
 800b8de:	ee07 0a90 	vmov	s15, r0
 800b8e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8e6:	9805      	ldr	r0, [sp, #20]
 800b8e8:	edcc 7a00 	vstr	s15, [ip]
 800b8ec:	eddf 7a13 	vldr	s15, [pc, #76]	; 800b93c <__kernel_rem_pio2f+0x318>
 800b8f0:	eb00 0802 	add.w	r8, r0, r2
 800b8f4:	f04f 0c00 	mov.w	ip, #0
 800b8f8:	45d4      	cmp	ip, sl
 800b8fa:	dd0c      	ble.n	800b916 <__kernel_rem_pio2f+0x2f2>
 800b8fc:	eb02 0c07 	add.w	ip, r2, r7
 800b900:	a842      	add	r0, sp, #264	; 0x108
 800b902:	4484      	add	ip, r0
 800b904:	edcc 7a01 	vstr	s15, [ip, #4]
 800b908:	3101      	adds	r1, #1
 800b90a:	3204      	adds	r2, #4
 800b90c:	e7da      	b.n	800b8c4 <__kernel_rem_pio2f+0x2a0>
 800b90e:	9b04      	ldr	r3, [sp, #16]
 800b910:	f04f 0c01 	mov.w	ip, #1
 800b914:	e7c7      	b.n	800b8a6 <__kernel_rem_pio2f+0x282>
 800b916:	ecfe 6a01 	vldmia	lr!, {s13}
 800b91a:	ed38 7a01 	vldmdb	r8!, {s14}
 800b91e:	f10c 0c01 	add.w	ip, ip, #1
 800b922:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b926:	e7e7      	b.n	800b8f8 <__kernel_rem_pio2f+0x2d4>
 800b928:	3b01      	subs	r3, #1
 800b92a:	e769      	b.n	800b800 <__kernel_rem_pio2f+0x1dc>
 800b92c:	0800fff4 	.word	0x0800fff4
 800b930:	0800ffc8 	.word	0x0800ffc8
 800b934:	43800000 	.word	0x43800000
 800b938:	3b800000 	.word	0x3b800000
 800b93c:	00000000 	.word	0x00000000
 800b940:	4260      	negs	r0, r4
 800b942:	eeb0 0a48 	vmov.f32	s0, s16
 800b946:	f000 fb97 	bl	800c078 <scalbnf>
 800b94a:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800b934 <__kernel_rem_pio2f+0x310>
 800b94e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b956:	db1a      	blt.n	800b98e <__kernel_rem_pio2f+0x36a>
 800b958:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800b938 <__kernel_rem_pio2f+0x314>
 800b95c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b960:	aa06      	add	r2, sp, #24
 800b962:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b966:	a906      	add	r1, sp, #24
 800b968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b96c:	3408      	adds	r4, #8
 800b96e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b976:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b97a:	ee10 3a10 	vmov	r3, s0
 800b97e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800b982:	1c6b      	adds	r3, r5, #1
 800b984:	ee17 2a90 	vmov	r2, s15
 800b988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b98c:	e73f      	b.n	800b80e <__kernel_rem_pio2f+0x1ea>
 800b98e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b992:	aa06      	add	r2, sp, #24
 800b994:	ee10 3a10 	vmov	r3, s0
 800b998:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800b99c:	462b      	mov	r3, r5
 800b99e:	e736      	b.n	800b80e <__kernel_rem_pio2f+0x1ea>
 800b9a0:	aa06      	add	r2, sp, #24
 800b9a2:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800b9a6:	9202      	str	r2, [sp, #8]
 800b9a8:	ee07 2a90 	vmov	s15, r2
 800b9ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9b0:	3c01      	subs	r4, #1
 800b9b2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b9b6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b9ba:	ed65 7a01 	vstmdb	r5!, {s15}
 800b9be:	e734      	b.n	800b82a <__kernel_rem_pio2f+0x206>
 800b9c0:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800b9c4:	ecf7 6a01 	vldmia	r7!, {s13}
 800b9c8:	ed9c 7a00 	vldr	s14, [ip]
 800b9cc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b9d0:	3401      	adds	r4, #1
 800b9d2:	454c      	cmp	r4, r9
 800b9d4:	dc01      	bgt.n	800b9da <__kernel_rem_pio2f+0x3b6>
 800b9d6:	42a5      	cmp	r5, r4
 800b9d8:	daf2      	bge.n	800b9c0 <__kernel_rem_pio2f+0x39c>
 800b9da:	aa56      	add	r2, sp, #344	; 0x158
 800b9dc:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800b9e0:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800b9e4:	3501      	adds	r5, #1
 800b9e6:	3804      	subs	r0, #4
 800b9e8:	e723      	b.n	800b832 <__kernel_rem_pio2f+0x20e>
 800b9ea:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800b9ec:	2a03      	cmp	r2, #3
 800b9ee:	d84d      	bhi.n	800ba8c <__kernel_rem_pio2f+0x468>
 800b9f0:	e8df f002 	tbb	[pc, r2]
 800b9f4:	021f1f3e 	.word	0x021f1f3e
 800b9f8:	aa56      	add	r2, sp, #344	; 0x158
 800b9fa:	4411      	add	r1, r2
 800b9fc:	399c      	subs	r1, #156	; 0x9c
 800b9fe:	4608      	mov	r0, r1
 800ba00:	461c      	mov	r4, r3
 800ba02:	2c00      	cmp	r4, #0
 800ba04:	dc5f      	bgt.n	800bac6 <__kernel_rem_pio2f+0x4a2>
 800ba06:	4608      	mov	r0, r1
 800ba08:	461c      	mov	r4, r3
 800ba0a:	2c01      	cmp	r4, #1
 800ba0c:	dc6b      	bgt.n	800bae6 <__kernel_rem_pio2f+0x4c2>
 800ba0e:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800b93c <__kernel_rem_pio2f+0x318>
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	dc77      	bgt.n	800bb06 <__kernel_rem_pio2f+0x4e2>
 800ba16:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800ba1a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800ba1e:	f1b8 0f00 	cmp.w	r8, #0
 800ba22:	d176      	bne.n	800bb12 <__kernel_rem_pio2f+0x4ee>
 800ba24:	edc6 6a00 	vstr	s13, [r6]
 800ba28:	ed86 7a01 	vstr	s14, [r6, #4]
 800ba2c:	edc6 7a02 	vstr	s15, [r6, #8]
 800ba30:	e02c      	b.n	800ba8c <__kernel_rem_pio2f+0x468>
 800ba32:	aa56      	add	r2, sp, #344	; 0x158
 800ba34:	4411      	add	r1, r2
 800ba36:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800b93c <__kernel_rem_pio2f+0x318>
 800ba3a:	399c      	subs	r1, #156	; 0x9c
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	da32      	bge.n	800baa8 <__kernel_rem_pio2f+0x484>
 800ba42:	f1b8 0f00 	cmp.w	r8, #0
 800ba46:	d035      	beq.n	800bab4 <__kernel_rem_pio2f+0x490>
 800ba48:	eef1 7a47 	vneg.f32	s15, s14
 800ba4c:	edc6 7a00 	vstr	s15, [r6]
 800ba50:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800ba54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba58:	a82f      	add	r0, sp, #188	; 0xbc
 800ba5a:	2101      	movs	r1, #1
 800ba5c:	428b      	cmp	r3, r1
 800ba5e:	da2c      	bge.n	800baba <__kernel_rem_pio2f+0x496>
 800ba60:	f1b8 0f00 	cmp.w	r8, #0
 800ba64:	d001      	beq.n	800ba6a <__kernel_rem_pio2f+0x446>
 800ba66:	eef1 7a67 	vneg.f32	s15, s15
 800ba6a:	edc6 7a01 	vstr	s15, [r6, #4]
 800ba6e:	e00d      	b.n	800ba8c <__kernel_rem_pio2f+0x468>
 800ba70:	aa56      	add	r2, sp, #344	; 0x158
 800ba72:	4411      	add	r1, r2
 800ba74:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800b93c <__kernel_rem_pio2f+0x318>
 800ba78:	399c      	subs	r1, #156	; 0x9c
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	da0e      	bge.n	800ba9c <__kernel_rem_pio2f+0x478>
 800ba7e:	f1b8 0f00 	cmp.w	r8, #0
 800ba82:	d001      	beq.n	800ba88 <__kernel_rem_pio2f+0x464>
 800ba84:	eef1 7a67 	vneg.f32	s15, s15
 800ba88:	edc6 7a00 	vstr	s15, [r6]
 800ba8c:	9b01      	ldr	r3, [sp, #4]
 800ba8e:	f003 0007 	and.w	r0, r3, #7
 800ba92:	b057      	add	sp, #348	; 0x15c
 800ba94:	ecbd 8b04 	vpop	{d8-d9}
 800ba98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba9c:	ed31 7a01 	vldmdb	r1!, {s14}
 800baa0:	3b01      	subs	r3, #1
 800baa2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800baa6:	e7e8      	b.n	800ba7a <__kernel_rem_pio2f+0x456>
 800baa8:	ed71 7a01 	vldmdb	r1!, {s15}
 800baac:	3801      	subs	r0, #1
 800baae:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bab2:	e7c4      	b.n	800ba3e <__kernel_rem_pio2f+0x41a>
 800bab4:	eef0 7a47 	vmov.f32	s15, s14
 800bab8:	e7c8      	b.n	800ba4c <__kernel_rem_pio2f+0x428>
 800baba:	ecb0 7a01 	vldmia	r0!, {s14}
 800babe:	3101      	adds	r1, #1
 800bac0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bac4:	e7ca      	b.n	800ba5c <__kernel_rem_pio2f+0x438>
 800bac6:	ed50 7a02 	vldr	s15, [r0, #-8]
 800baca:	ed70 6a01 	vldmdb	r0!, {s13}
 800bace:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bad2:	3c01      	subs	r4, #1
 800bad4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bad8:	ed00 7a01 	vstr	s14, [r0, #-4]
 800badc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bae0:	edc0 7a00 	vstr	s15, [r0]
 800bae4:	e78d      	b.n	800ba02 <__kernel_rem_pio2f+0x3de>
 800bae6:	ed50 7a02 	vldr	s15, [r0, #-8]
 800baea:	ed70 6a01 	vldmdb	r0!, {s13}
 800baee:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800baf2:	3c01      	subs	r4, #1
 800baf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800baf8:	ed00 7a01 	vstr	s14, [r0, #-4]
 800bafc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb00:	edc0 7a00 	vstr	s15, [r0]
 800bb04:	e781      	b.n	800ba0a <__kernel_rem_pio2f+0x3e6>
 800bb06:	ed31 7a01 	vldmdb	r1!, {s14}
 800bb0a:	3b01      	subs	r3, #1
 800bb0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb10:	e77f      	b.n	800ba12 <__kernel_rem_pio2f+0x3ee>
 800bb12:	eef1 6a66 	vneg.f32	s13, s13
 800bb16:	eeb1 7a47 	vneg.f32	s14, s14
 800bb1a:	edc6 6a00 	vstr	s13, [r6]
 800bb1e:	ed86 7a01 	vstr	s14, [r6, #4]
 800bb22:	eef1 7a67 	vneg.f32	s15, s15
 800bb26:	e781      	b.n	800ba2c <__kernel_rem_pio2f+0x408>

0800bb28 <__kernel_tanf>:
 800bb28:	b508      	push	{r3, lr}
 800bb2a:	ee10 3a10 	vmov	r3, s0
 800bb2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bb32:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800bb36:	eef0 7a40 	vmov.f32	s15, s0
 800bb3a:	da17      	bge.n	800bb6c <__kernel_tanf+0x44>
 800bb3c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800bb40:	ee17 1a10 	vmov	r1, s14
 800bb44:	bb41      	cbnz	r1, 800bb98 <__kernel_tanf+0x70>
 800bb46:	1c43      	adds	r3, r0, #1
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	d108      	bne.n	800bb5e <__kernel_tanf+0x36>
 800bb4c:	f7ff f922 	bl	800ad94 <fabsf>
 800bb50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb54:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bb58:	eeb0 0a67 	vmov.f32	s0, s15
 800bb5c:	bd08      	pop	{r3, pc}
 800bb5e:	2801      	cmp	r0, #1
 800bb60:	d0fa      	beq.n	800bb58 <__kernel_tanf+0x30>
 800bb62:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800bb66:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bb6a:	e7f5      	b.n	800bb58 <__kernel_tanf+0x30>
 800bb6c:	494e      	ldr	r1, [pc, #312]	; (800bca8 <__kernel_tanf+0x180>)
 800bb6e:	428a      	cmp	r2, r1
 800bb70:	dd12      	ble.n	800bb98 <__kernel_tanf+0x70>
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800bcac <__kernel_tanf+0x184>
 800bb78:	bfb8      	it	lt
 800bb7a:	eef1 7a40 	vneglt.f32	s15, s0
 800bb7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb82:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800bcb0 <__kernel_tanf+0x188>
 800bb86:	bfb8      	it	lt
 800bb88:	eef1 0a60 	vneglt.f32	s1, s1
 800bb8c:	ee77 0a60 	vsub.f32	s1, s14, s1
 800bb90:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800bb94:	eddf 0a47 	vldr	s1, [pc, #284]	; 800bcb4 <__kernel_tanf+0x18c>
 800bb98:	ed9f 6a47 	vldr	s12, [pc, #284]	; 800bcb8 <__kernel_tanf+0x190>
 800bb9c:	eddf 5a47 	vldr	s11, [pc, #284]	; 800bcbc <__kernel_tanf+0x194>
 800bba0:	ed9f 5a47 	vldr	s10, [pc, #284]	; 800bcc0 <__kernel_tanf+0x198>
 800bba4:	4940      	ldr	r1, [pc, #256]	; (800bca8 <__kernel_tanf+0x180>)
 800bba6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800bbaa:	428a      	cmp	r2, r1
 800bbac:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800bbb0:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800bbb4:	eee7 5a06 	vfma.f32	s11, s14, s12
 800bbb8:	ed9f 6a42 	vldr	s12, [pc, #264]	; 800bcc4 <__kernel_tanf+0x19c>
 800bbbc:	eea5 6a87 	vfma.f32	s12, s11, s14
 800bbc0:	eddf 5a41 	vldr	s11, [pc, #260]	; 800bcc8 <__kernel_tanf+0x1a0>
 800bbc4:	eee6 5a07 	vfma.f32	s11, s12, s14
 800bbc8:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800bccc <__kernel_tanf+0x1a4>
 800bbcc:	eea5 6a87 	vfma.f32	s12, s11, s14
 800bbd0:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800bcd0 <__kernel_tanf+0x1a8>
 800bbd4:	eee6 5a07 	vfma.f32	s11, s12, s14
 800bbd8:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800bcd4 <__kernel_tanf+0x1ac>
 800bbdc:	eea7 6a05 	vfma.f32	s12, s14, s10
 800bbe0:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800bcd8 <__kernel_tanf+0x1b0>
 800bbe4:	eea6 5a07 	vfma.f32	s10, s12, s14
 800bbe8:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 800bcdc <__kernel_tanf+0x1b4>
 800bbec:	eea5 6a07 	vfma.f32	s12, s10, s14
 800bbf0:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 800bce0 <__kernel_tanf+0x1b8>
 800bbf4:	eea6 5a07 	vfma.f32	s10, s12, s14
 800bbf8:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 800bce4 <__kernel_tanf+0x1bc>
 800bbfc:	eea5 6a07 	vfma.f32	s12, s10, s14
 800bc00:	eeb0 7a46 	vmov.f32	s14, s12
 800bc04:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800bc08:	eeb0 6a60 	vmov.f32	s12, s1
 800bc0c:	eea7 6a24 	vfma.f32	s12, s14, s9
 800bc10:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800bce8 <__kernel_tanf+0x1c0>
 800bc14:	eee6 0a26 	vfma.f32	s1, s12, s13
 800bc18:	eee4 0a87 	vfma.f32	s1, s9, s14
 800bc1c:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800bc20:	dd1d      	ble.n	800bc5e <__kernel_tanf+0x136>
 800bc22:	ee07 0a10 	vmov	s14, r0
 800bc26:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bc2a:	ee66 5aa6 	vmul.f32	s11, s13, s13
 800bc2e:	ee76 6a87 	vadd.f32	s13, s13, s14
 800bc32:	179b      	asrs	r3, r3, #30
 800bc34:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 800bc38:	f003 0302 	and.w	r3, r3, #2
 800bc3c:	f1c3 0301 	rsb	r3, r3, #1
 800bc40:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800bc44:	ee76 0a60 	vsub.f32	s1, s12, s1
 800bc48:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800bc4c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800bc50:	ee07 3a90 	vmov	s15, r3
 800bc54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc5c:	e77c      	b.n	800bb58 <__kernel_tanf+0x30>
 800bc5e:	2801      	cmp	r0, #1
 800bc60:	d01f      	beq.n	800bca2 <__kernel_tanf+0x17a>
 800bc62:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800bc66:	eec7 5a26 	vdiv.f32	s11, s14, s13
 800bc6a:	4b20      	ldr	r3, [pc, #128]	; (800bcec <__kernel_tanf+0x1c4>)
 800bc6c:	ee16 2a90 	vmov	r2, s13
 800bc70:	401a      	ands	r2, r3
 800bc72:	ee06 2a10 	vmov	s12, r2
 800bc76:	ee15 2a90 	vmov	r2, s11
 800bc7a:	4013      	ands	r3, r2
 800bc7c:	ee07 3a10 	vmov	s14, r3
 800bc80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc84:	eee6 6a07 	vfma.f32	s13, s12, s14
 800bc88:	ee76 7a67 	vsub.f32	s15, s12, s15
 800bc8c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800bc90:	eef0 7a66 	vmov.f32	s15, s13
 800bc94:	eee7 7a20 	vfma.f32	s15, s14, s1
 800bc98:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800bc9c:	eef0 7a47 	vmov.f32	s15, s14
 800bca0:	e75a      	b.n	800bb58 <__kernel_tanf+0x30>
 800bca2:	eef0 7a66 	vmov.f32	s15, s13
 800bca6:	e757      	b.n	800bb58 <__kernel_tanf+0x30>
 800bca8:	3f2ca13f 	.word	0x3f2ca13f
 800bcac:	3f490fda 	.word	0x3f490fda
 800bcb0:	33222168 	.word	0x33222168
 800bcb4:	00000000 	.word	0x00000000
 800bcb8:	37d95384 	.word	0x37d95384
 800bcbc:	3895c07a 	.word	0x3895c07a
 800bcc0:	b79bae5f 	.word	0xb79bae5f
 800bcc4:	398137b9 	.word	0x398137b9
 800bcc8:	3abede48 	.word	0x3abede48
 800bccc:	3c11371f 	.word	0x3c11371f
 800bcd0:	3d5d0dd1 	.word	0x3d5d0dd1
 800bcd4:	38a3f445 	.word	0x38a3f445
 800bcd8:	3a1a26c8 	.word	0x3a1a26c8
 800bcdc:	3b6b6916 	.word	0x3b6b6916
 800bce0:	3cb327a4 	.word	0x3cb327a4
 800bce4:	3e088889 	.word	0x3e088889
 800bce8:	3eaaaaab 	.word	0x3eaaaaab
 800bcec:	fffff000 	.word	0xfffff000

0800bcf0 <with_errnof>:
 800bcf0:	b510      	push	{r4, lr}
 800bcf2:	ed2d 8b02 	vpush	{d8}
 800bcf6:	eeb0 8a40 	vmov.f32	s16, s0
 800bcfa:	4604      	mov	r4, r0
 800bcfc:	f7fe ff9a 	bl	800ac34 <__errno>
 800bd00:	eeb0 0a48 	vmov.f32	s0, s16
 800bd04:	ecbd 8b02 	vpop	{d8}
 800bd08:	6004      	str	r4, [r0, #0]
 800bd0a:	bd10      	pop	{r4, pc}

0800bd0c <xflowf>:
 800bd0c:	b130      	cbz	r0, 800bd1c <xflowf+0x10>
 800bd0e:	eef1 7a40 	vneg.f32	s15, s0
 800bd12:	2022      	movs	r0, #34	; 0x22
 800bd14:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bd18:	f7ff bfea 	b.w	800bcf0 <with_errnof>
 800bd1c:	eef0 7a40 	vmov.f32	s15, s0
 800bd20:	e7f7      	b.n	800bd12 <xflowf+0x6>
	...

0800bd24 <__math_uflowf>:
 800bd24:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bd2c <__math_uflowf+0x8>
 800bd28:	f7ff bff0 	b.w	800bd0c <xflowf>
 800bd2c:	10000000 	.word	0x10000000

0800bd30 <__math_may_uflowf>:
 800bd30:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bd38 <__math_may_uflowf+0x8>
 800bd34:	f7ff bfea 	b.w	800bd0c <xflowf>
 800bd38:	1a200000 	.word	0x1a200000

0800bd3c <__math_oflowf>:
 800bd3c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bd44 <__math_oflowf+0x8>
 800bd40:	f7ff bfe4 	b.w	800bd0c <xflowf>
 800bd44:	70000000 	.word	0x70000000

0800bd48 <__math_divzerof>:
 800bd48:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bd4c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800bd50:	2800      	cmp	r0, #0
 800bd52:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800bd56:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800bd64 <__math_divzerof+0x1c>
 800bd5a:	2022      	movs	r0, #34	; 0x22
 800bd5c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800bd60:	f7ff bfc6 	b.w	800bcf0 <with_errnof>
 800bd64:	00000000 	.word	0x00000000

0800bd68 <__math_invalidf>:
 800bd68:	eef0 7a40 	vmov.f32	s15, s0
 800bd6c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800bd70:	eef4 7a67 	vcmp.f32	s15, s15
 800bd74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd78:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800bd7c:	d602      	bvs.n	800bd84 <__math_invalidf+0x1c>
 800bd7e:	2021      	movs	r0, #33	; 0x21
 800bd80:	f7ff bfb6 	b.w	800bcf0 <with_errnof>
 800bd84:	4770      	bx	lr

0800bd86 <matherr>:
 800bd86:	2000      	movs	r0, #0
 800bd88:	4770      	bx	lr
	...

0800bd8c <expm1f>:
 800bd8c:	ee10 2a10 	vmov	r2, s0
 800bd90:	4984      	ldr	r1, [pc, #528]	; (800bfa4 <expm1f+0x218>)
 800bd92:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800bd96:	428b      	cmp	r3, r1
 800bd98:	d923      	bls.n	800bde2 <expm1f+0x56>
 800bd9a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bd9e:	d902      	bls.n	800bda6 <expm1f+0x1a>
 800bda0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bda4:	4770      	bx	lr
 800bda6:	d105      	bne.n	800bdb4 <expm1f+0x28>
 800bda8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800bdac:	2a00      	cmp	r2, #0
 800bdae:	fe20 0a27 	vselge.f32	s0, s0, s15
 800bdb2:	4770      	bx	lr
 800bdb4:	2a00      	cmp	r2, #0
 800bdb6:	db08      	blt.n	800bdca <expm1f+0x3e>
 800bdb8:	4a7b      	ldr	r2, [pc, #492]	; (800bfa8 <expm1f+0x21c>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	f240 80ea 	bls.w	800bf94 <expm1f+0x208>
 800bdc0:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 800bfac <expm1f+0x220>
 800bdc4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800bdc8:	4770      	bx	lr
 800bdca:	eddf 7a79 	vldr	s15, [pc, #484]	; 800bfb0 <expm1f+0x224>
 800bdce:	ee70 7a27 	vadd.f32	s15, s0, s15
 800bdd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bdd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdda:	d554      	bpl.n	800be86 <expm1f+0xfa>
 800bddc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800bde0:	4770      	bx	lr
 800bde2:	4974      	ldr	r1, [pc, #464]	; (800bfb4 <expm1f+0x228>)
 800bde4:	428b      	cmp	r3, r1
 800bde6:	d96c      	bls.n	800bec2 <expm1f+0x136>
 800bde8:	4973      	ldr	r1, [pc, #460]	; (800bfb8 <expm1f+0x22c>)
 800bdea:	428b      	cmp	r3, r1
 800bdec:	d84b      	bhi.n	800be86 <expm1f+0xfa>
 800bdee:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800bfbc <expm1f+0x230>
 800bdf2:	2a00      	cmp	r2, #0
 800bdf4:	bfa7      	ittee	ge
 800bdf6:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800bdfa:	eddf 7a71 	vldrge	s15, [pc, #452]	; 800bfc0 <expm1f+0x234>
 800bdfe:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 800bfc4 <expm1f+0x238>
 800be02:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800be06:	bfac      	ite	ge
 800be08:	2301      	movge	r3, #1
 800be0a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800be0e:	ee37 0a67 	vsub.f32	s0, s14, s15
 800be12:	ee37 7a40 	vsub.f32	s14, s14, s0
 800be16:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be1a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800be1e:	ee20 5a25 	vmul.f32	s10, s0, s11
 800be22:	eddf 6a69 	vldr	s13, [pc, #420]	; 800bfc8 <expm1f+0x23c>
 800be26:	ed9f 6a69 	vldr	s12, [pc, #420]	; 800bfcc <expm1f+0x240>
 800be2a:	ee20 7a05 	vmul.f32	s14, s0, s10
 800be2e:	eea7 6a26 	vfma.f32	s12, s14, s13
 800be32:	eddf 6a67 	vldr	s13, [pc, #412]	; 800bfd0 <expm1f+0x244>
 800be36:	eee6 6a07 	vfma.f32	s13, s12, s14
 800be3a:	ed9f 6a66 	vldr	s12, [pc, #408]	; 800bfd4 <expm1f+0x248>
 800be3e:	eea6 6a87 	vfma.f32	s12, s13, s14
 800be42:	eddf 6a65 	vldr	s13, [pc, #404]	; 800bfd8 <expm1f+0x24c>
 800be46:	eee6 6a07 	vfma.f32	s13, s12, s14
 800be4a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800be4e:	eef0 4a46 	vmov.f32	s9, s12
 800be52:	eee6 4a87 	vfma.f32	s9, s13, s14
 800be56:	eef0 6a64 	vmov.f32	s13, s9
 800be5a:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800be5e:	eee5 4a66 	vfms.f32	s9, s10, s13
 800be62:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800be66:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800be6a:	eee0 6a64 	vfms.f32	s13, s0, s9
 800be6e:	eef0 4a66 	vmov.f32	s9, s13
 800be72:	eec5 6a24 	vdiv.f32	s13, s10, s9
 800be76:	ee66 6a87 	vmul.f32	s13, s13, s14
 800be7a:	bb83      	cbnz	r3, 800bede <expm1f+0x152>
 800be7c:	eef0 7a47 	vmov.f32	s15, s14
 800be80:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800be84:	e026      	b.n	800bed4 <expm1f+0x148>
 800be86:	eddf 7a55 	vldr	s15, [pc, #340]	; 800bfdc <expm1f+0x250>
 800be8a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800be8e:	ee20 7a27 	vmul.f32	s14, s0, s15
 800be92:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800be96:	2a00      	cmp	r2, #0
 800be98:	fe66 7aa7 	vselge.f32	s15, s13, s15
 800be9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bea0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800bfbc <expm1f+0x230>
 800bea4:	eddf 6a46 	vldr	s13, [pc, #280]	; 800bfc0 <expm1f+0x234>
 800bea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800beac:	ee17 3a90 	vmov	r3, s15
 800beb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800beb4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800beb8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bebc:	eeb0 7a40 	vmov.f32	s14, s0
 800bec0:	e7a5      	b.n	800be0e <expm1f+0x82>
 800bec2:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800bec6:	d208      	bcs.n	800beda <expm1f+0x14e>
 800bec8:	eddf 7a38 	vldr	s15, [pc, #224]	; 800bfac <expm1f+0x220>
 800becc:	ee70 7a27 	vadd.f32	s15, s0, s15
 800bed0:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800bed4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bed8:	4770      	bx	lr
 800beda:	2300      	movs	r3, #0
 800bedc:	e79d      	b.n	800be1a <expm1f+0x8e>
 800bede:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800bee2:	1c5a      	adds	r2, r3, #1
 800bee4:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800bee8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800beec:	d106      	bne.n	800befc <expm1f+0x170>
 800beee:	ee70 7a67 	vsub.f32	s15, s0, s15
 800bef2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800bef6:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800befa:	4770      	bx	lr
 800befc:	2b01      	cmp	r3, #1
 800befe:	d118      	bne.n	800bf32 <expm1f+0x1a6>
 800bf00:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800bf04:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800bf08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf0c:	bf41      	itttt	mi
 800bf0e:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800bf12:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 800bf16:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 800bf1a:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 800bf1e:	bf5f      	itttt	pl
 800bf20:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 800bf24:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 800bf28:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 800bf2c:	eeb0 0a46 	vmovpl.f32	s0, s12
 800bf30:	4770      	bx	lr
 800bf32:	1c5a      	adds	r2, r3, #1
 800bf34:	2a39      	cmp	r2, #57	; 0x39
 800bf36:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800bf3a:	d90b      	bls.n	800bf54 <expm1f+0x1c8>
 800bf3c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800bf40:	ee36 0a40 	vsub.f32	s0, s12, s0
 800bf44:	ee10 3a10 	vmov	r3, s0
 800bf48:	440b      	add	r3, r1
 800bf4a:	ee00 3a10 	vmov	s0, r3
 800bf4e:	ee30 0a46 	vsub.f32	s0, s0, s12
 800bf52:	4770      	bx	lr
 800bf54:	2b16      	cmp	r3, #22
 800bf56:	dc11      	bgt.n	800bf7c <expm1f+0x1f0>
 800bf58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bf5c:	fa42 f303 	asr.w	r3, r2, r3
 800bf60:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800bf64:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800bf68:	ee07 3a90 	vmov	s15, r3
 800bf6c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800bf70:	ee10 3a10 	vmov	r3, s0
 800bf74:	440b      	add	r3, r1
 800bf76:	ee00 3a10 	vmov	s0, r3
 800bf7a:	4770      	bx	lr
 800bf7c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800bf80:	05db      	lsls	r3, r3, #23
 800bf82:	ee07 3a10 	vmov	s14, r3
 800bf86:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bf8a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bf8e:	ee30 0a06 	vadd.f32	s0, s0, s12
 800bf92:	e7ed      	b.n	800bf70 <expm1f+0x1e4>
 800bf94:	eddf 7a11 	vldr	s15, [pc, #68]	; 800bfdc <expm1f+0x250>
 800bf98:	ee20 7a27 	vmul.f32	s14, s0, s15
 800bf9c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bfa0:	e77c      	b.n	800be9c <expm1f+0x110>
 800bfa2:	bf00      	nop
 800bfa4:	4195b843 	.word	0x4195b843
 800bfa8:	42b17217 	.word	0x42b17217
 800bfac:	7149f2ca 	.word	0x7149f2ca
 800bfb0:	0da24260 	.word	0x0da24260
 800bfb4:	3eb17218 	.word	0x3eb17218
 800bfb8:	3f851591 	.word	0x3f851591
 800bfbc:	3f317180 	.word	0x3f317180
 800bfc0:	3717f7d1 	.word	0x3717f7d1
 800bfc4:	b717f7d1 	.word	0xb717f7d1
 800bfc8:	b457edbb 	.word	0xb457edbb
 800bfcc:	36867e54 	.word	0x36867e54
 800bfd0:	b8a670cd 	.word	0xb8a670cd
 800bfd4:	3ad00d01 	.word	0x3ad00d01
 800bfd8:	bd088889 	.word	0xbd088889
 800bfdc:	3fb8aa3b 	.word	0x3fb8aa3b

0800bfe0 <finitef>:
 800bfe0:	ee10 3a10 	vmov	r3, s0
 800bfe4:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800bfe8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800bfec:	bfac      	ite	ge
 800bfee:	2000      	movge	r0, #0
 800bff0:	2001      	movlt	r0, #1
 800bff2:	4770      	bx	lr

0800bff4 <floorf>:
 800bff4:	ee10 3a10 	vmov	r3, s0
 800bff8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bffc:	0dca      	lsrs	r2, r1, #23
 800bffe:	3a7f      	subs	r2, #127	; 0x7f
 800c000:	2a16      	cmp	r2, #22
 800c002:	dc2a      	bgt.n	800c05a <floorf+0x66>
 800c004:	2a00      	cmp	r2, #0
 800c006:	da11      	bge.n	800c02c <floorf+0x38>
 800c008:	eddf 7a18 	vldr	s15, [pc, #96]	; 800c06c <floorf+0x78>
 800c00c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c010:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c018:	dd05      	ble.n	800c026 <floorf+0x32>
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	da23      	bge.n	800c066 <floorf+0x72>
 800c01e:	4a14      	ldr	r2, [pc, #80]	; (800c070 <floorf+0x7c>)
 800c020:	2900      	cmp	r1, #0
 800c022:	bf18      	it	ne
 800c024:	4613      	movne	r3, r2
 800c026:	ee00 3a10 	vmov	s0, r3
 800c02a:	4770      	bx	lr
 800c02c:	4911      	ldr	r1, [pc, #68]	; (800c074 <floorf+0x80>)
 800c02e:	4111      	asrs	r1, r2
 800c030:	420b      	tst	r3, r1
 800c032:	d0fa      	beq.n	800c02a <floorf+0x36>
 800c034:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800c06c <floorf+0x78>
 800c038:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c03c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c044:	ddef      	ble.n	800c026 <floorf+0x32>
 800c046:	2b00      	cmp	r3, #0
 800c048:	bfbe      	ittt	lt
 800c04a:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800c04e:	fa40 f202 	asrlt.w	r2, r0, r2
 800c052:	189b      	addlt	r3, r3, r2
 800c054:	ea23 0301 	bic.w	r3, r3, r1
 800c058:	e7e5      	b.n	800c026 <floorf+0x32>
 800c05a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c05e:	d3e4      	bcc.n	800c02a <floorf+0x36>
 800c060:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c064:	4770      	bx	lr
 800c066:	2300      	movs	r3, #0
 800c068:	e7dd      	b.n	800c026 <floorf+0x32>
 800c06a:	bf00      	nop
 800c06c:	7149f2ca 	.word	0x7149f2ca
 800c070:	bf800000 	.word	0xbf800000
 800c074:	007fffff 	.word	0x007fffff

0800c078 <scalbnf>:
 800c078:	b508      	push	{r3, lr}
 800c07a:	ee10 2a10 	vmov	r2, s0
 800c07e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800c082:	ed2d 8b02 	vpush	{d8}
 800c086:	eef0 0a40 	vmov.f32	s1, s0
 800c08a:	d004      	beq.n	800c096 <scalbnf+0x1e>
 800c08c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c090:	d306      	bcc.n	800c0a0 <scalbnf+0x28>
 800c092:	ee70 0a00 	vadd.f32	s1, s0, s0
 800c096:	ecbd 8b02 	vpop	{d8}
 800c09a:	eeb0 0a60 	vmov.f32	s0, s1
 800c09e:	bd08      	pop	{r3, pc}
 800c0a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c0a4:	d21c      	bcs.n	800c0e0 <scalbnf+0x68>
 800c0a6:	4b1f      	ldr	r3, [pc, #124]	; (800c124 <scalbnf+0xac>)
 800c0a8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c128 <scalbnf+0xb0>
 800c0ac:	4298      	cmp	r0, r3
 800c0ae:	ee60 0a27 	vmul.f32	s1, s0, s15
 800c0b2:	db10      	blt.n	800c0d6 <scalbnf+0x5e>
 800c0b4:	ee10 2a90 	vmov	r2, s1
 800c0b8:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800c0bc:	3b19      	subs	r3, #25
 800c0be:	4403      	add	r3, r0
 800c0c0:	2bfe      	cmp	r3, #254	; 0xfe
 800c0c2:	dd0f      	ble.n	800c0e4 <scalbnf+0x6c>
 800c0c4:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800c12c <scalbnf+0xb4>
 800c0c8:	eeb0 0a48 	vmov.f32	s0, s16
 800c0cc:	f000 f834 	bl	800c138 <copysignf>
 800c0d0:	ee60 0a08 	vmul.f32	s1, s0, s16
 800c0d4:	e7df      	b.n	800c096 <scalbnf+0x1e>
 800c0d6:	eddf 7a16 	vldr	s15, [pc, #88]	; 800c130 <scalbnf+0xb8>
 800c0da:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800c0de:	e7da      	b.n	800c096 <scalbnf+0x1e>
 800c0e0:	0ddb      	lsrs	r3, r3, #23
 800c0e2:	e7ec      	b.n	800c0be <scalbnf+0x46>
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	dd06      	ble.n	800c0f6 <scalbnf+0x7e>
 800c0e8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800c0ec:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800c0f0:	ee00 3a90 	vmov	s1, r3
 800c0f4:	e7cf      	b.n	800c096 <scalbnf+0x1e>
 800c0f6:	f113 0f16 	cmn.w	r3, #22
 800c0fa:	da06      	bge.n	800c10a <scalbnf+0x92>
 800c0fc:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c100:	4298      	cmp	r0, r3
 800c102:	dcdf      	bgt.n	800c0c4 <scalbnf+0x4c>
 800c104:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800c130 <scalbnf+0xb8>
 800c108:	e7de      	b.n	800c0c8 <scalbnf+0x50>
 800c10a:	3319      	adds	r3, #25
 800c10c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800c110:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800c114:	eddf 7a07 	vldr	s15, [pc, #28]	; 800c134 <scalbnf+0xbc>
 800c118:	ee07 3a10 	vmov	s14, r3
 800c11c:	ee67 0a27 	vmul.f32	s1, s14, s15
 800c120:	e7b9      	b.n	800c096 <scalbnf+0x1e>
 800c122:	bf00      	nop
 800c124:	ffff3cb0 	.word	0xffff3cb0
 800c128:	4c000000 	.word	0x4c000000
 800c12c:	7149f2ca 	.word	0x7149f2ca
 800c130:	0da24260 	.word	0x0da24260
 800c134:	33000000 	.word	0x33000000

0800c138 <copysignf>:
 800c138:	ee10 3a10 	vmov	r3, s0
 800c13c:	ee10 2a90 	vmov	r2, s1
 800c140:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c144:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800c148:	4313      	orrs	r3, r2
 800c14a:	ee00 3a10 	vmov	s0, r3
 800c14e:	4770      	bx	lr

0800c150 <_init>:
 800c150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c152:	bf00      	nop
 800c154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c156:	bc08      	pop	{r3}
 800c158:	469e      	mov	lr, r3
 800c15a:	4770      	bx	lr

0800c15c <_fini>:
 800c15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c15e:	bf00      	nop
 800c160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c162:	bc08      	pop	{r3}
 800c164:	469e      	mov	lr, r3
 800c166:	4770      	bx	lr
