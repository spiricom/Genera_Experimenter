
cube_for_new_genera_brain4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ce4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0010bb1c  08009f7c  08009f7c  00019f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08115a98  08115a98  00125a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08115a9c  08115a9c  00125a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000290  20000000  08115aa0  00130000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002ff4  20000290  08115d30  00130290  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20003284  08115d30  00133284  2**0
                  ALLOC
  8 .RAM_D1       0007a120  24000000  24000000  00140000  2**5
                  ALLOC
  9 .RAM_D2       00000530  30000000  30000000  00140000  2**5
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00130290  2**0
                  CONTENTS, READONLY
 11 .debug_info   000514cd  00000000  00000000  001302be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000079e4  00000000  00000000  0018178b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001bd92  00000000  00000000  0018916f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022a0  00000000  00000000  001a4f08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002678  00000000  00000000  001a71a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003fa2e  00000000  00000000  001a9820  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000257b7  00000000  00000000  001e924e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0017863e  00000000  00000000  0020ea05  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00387043  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006300  00000000  00000000  003870c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000290 	.word	0x20000290
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009f64 	.word	0x08009f64

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000294 	.word	0x20000294
 80002d4:	08009f64 	.word	0x08009f64

080002d8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80002d8:	4b10      	ldr	r3, [pc, #64]	; (800031c <HAL_InitTick+0x44>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	b90b      	cbnz	r3, 80002e2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80002de:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80002e0:	4770      	bx	lr
{
 80002e2:	b510      	push	{r4, lr}
 80002e4:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80002e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80002ee:	4a0c      	ldr	r2, [pc, #48]	; (8000320 <HAL_InitTick+0x48>)
 80002f0:	6810      	ldr	r0, [r2, #0]
 80002f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80002f6:	f000 ff25 	bl	8001144 <HAL_SYSTICK_Config>
 80002fa:	b968      	cbnz	r0, 8000318 <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002fc:	2c0f      	cmp	r4, #15
 80002fe:	d901      	bls.n	8000304 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000300:	2001      	movs	r0, #1
 8000302:	e00a      	b.n	800031a <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000304:	2200      	movs	r2, #0
 8000306:	4621      	mov	r1, r4
 8000308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800030c:	f000 feda 	bl	80010c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000310:	4b02      	ldr	r3, [pc, #8]	; (800031c <HAL_InitTick+0x44>)
 8000312:	605c      	str	r4, [r3, #4]
  return HAL_OK;
 8000314:	2000      	movs	r0, #0
 8000316:	e000      	b.n	800031a <HAL_InitTick+0x42>
    return HAL_ERROR;
 8000318:	2001      	movs	r0, #1
}
 800031a:	bd10      	pop	{r4, pc}
 800031c:	20000000 	.word	0x20000000
 8000320:	20000288 	.word	0x20000288

08000324 <HAL_Init>:
{
 8000324:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000326:	2003      	movs	r0, #3
 8000328:	f000 feba 	bl	80010a0 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800032c:	f003 f804 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 8000330:	490f      	ldr	r1, [pc, #60]	; (8000370 <HAL_Init+0x4c>)
 8000332:	698b      	ldr	r3, [r1, #24]
 8000334:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000338:	4a0e      	ldr	r2, [pc, #56]	; (8000374 <HAL_Init+0x50>)
 800033a:	5cd3      	ldrb	r3, [r2, r3]
 800033c:	f003 031f 	and.w	r3, r3, #31
 8000340:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000342:	698b      	ldr	r3, [r1, #24]
 8000344:	f003 030f 	and.w	r3, r3, #15
 8000348:	5cd3      	ldrb	r3, [r2, r3]
 800034a:	f003 031f 	and.w	r3, r3, #31
 800034e:	fa20 f303 	lsr.w	r3, r0, r3
 8000352:	4a09      	ldr	r2, [pc, #36]	; (8000378 <HAL_Init+0x54>)
 8000354:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8000356:	4b09      	ldr	r3, [pc, #36]	; (800037c <HAL_Init+0x58>)
 8000358:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800035a:	2000      	movs	r0, #0
 800035c:	f7ff ffbc 	bl	80002d8 <HAL_InitTick>
 8000360:	b110      	cbz	r0, 8000368 <HAL_Init+0x44>
    return HAL_ERROR;
 8000362:	2401      	movs	r4, #1
}
 8000364:	4620      	mov	r0, r4
 8000366:	bd10      	pop	{r4, pc}
 8000368:	4604      	mov	r4, r0
  HAL_MspInit();
 800036a:	f008 fb67 	bl	8008a3c <HAL_MspInit>
  return HAL_OK;
 800036e:	e7f9      	b.n	8000364 <HAL_Init+0x40>
 8000370:	58024400 	.word	0x58024400
 8000374:	08009f98 	.word	0x08009f98
 8000378:	2000028c 	.word	0x2000028c
 800037c:	20000288 	.word	0x20000288

08000380 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000380:	4b03      	ldr	r3, [pc, #12]	; (8000390 <HAL_IncTick+0x10>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	4a03      	ldr	r2, [pc, #12]	; (8000394 <HAL_IncTick+0x14>)
 8000386:	6811      	ldr	r1, [r2, #0]
 8000388:	440b      	add	r3, r1
 800038a:	6013      	str	r3, [r2, #0]
}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	20000000 	.word	0x20000000
 8000394:	2000037c 	.word	0x2000037c

08000398 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000398:	4b01      	ldr	r3, [pc, #4]	; (80003a0 <HAL_GetTick+0x8>)
 800039a:	6818      	ldr	r0, [r3, #0]
}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	2000037c 	.word	0x2000037c

080003a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003a4:	b538      	push	{r3, r4, r5, lr}
 80003a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80003a8:	f7ff fff6 	bl	8000398 <HAL_GetTick>
 80003ac:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003ae:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80003b2:	d002      	beq.n	80003ba <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80003b4:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <HAL_Delay+0x24>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80003ba:	f7ff ffed 	bl	8000398 <HAL_GetTick>
 80003be:	1b40      	subs	r0, r0, r5
 80003c0:	42a0      	cmp	r0, r4
 80003c2:	d3fa      	bcc.n	80003ba <HAL_Delay+0x16>
  {
  }
}
 80003c4:	bd38      	pop	{r3, r4, r5, pc}
 80003c6:	bf00      	nop
 80003c8:	20000000 	.word	0x20000000

080003cc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80003cc:	4b01      	ldr	r3, [pc, #4]	; (80003d4 <HAL_GetREVID+0x8>)
 80003ce:	6818      	ldr	r0, [r3, #0]
}
 80003d0:	0c00      	lsrs	r0, r0, #16
 80003d2:	4770      	bx	lr
 80003d4:	5c001000 	.word	0x5c001000

080003d8 <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 80003d8:	4a03      	ldr	r2, [pc, #12]	; (80003e8 <HAL_SetFMCMemorySwappingConfig+0x10>)
 80003da:	6813      	ldr	r3, [r2, #0]
 80003dc:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80003e0:	4318      	orrs	r0, r3
 80003e2:	6010      	str	r0, [r2, #0]
}
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	52004000 	.word	0x52004000

080003ec <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80003ec:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80003ee:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80003f0:	f007 fbcc 	bl	8007b8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80003f4:	bd08      	pop	{r3, pc}

080003f6 <HAL_ADC_ErrorCallback>:
}
 80003f6:	4770      	bx	lr

080003f8 <ADC_DMAConvCplt>:
{
 80003f8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80003fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80003fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80003fe:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000402:	d131      	bne.n	8000468 <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000404:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800040a:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	6811      	ldr	r1, [r2, #0]
 8000410:	f011 0f08 	tst.w	r1, #8
 8000414:	d014      	beq.n	8000440 <ADC_DMAConvCplt+0x48>
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000416:	68d1      	ldr	r1, [r2, #12]
 8000418:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 800041c:	d120      	bne.n	8000460 <ADC_DMAConvCplt+0x68>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800041e:	68d2      	ldr	r2, [r2, #12]
 8000420:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8000424:	d11c      	bne.n	8000460 <ADC_DMAConvCplt+0x68>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000426:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000428:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800042c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800042e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000430:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8000434:	d114      	bne.n	8000460 <ADC_DMAConvCplt+0x68>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000436:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000438:	f042 0201 	orr.w	r2, r2, #1
 800043c:	655a      	str	r2, [r3, #84]	; 0x54
 800043e:	e00f      	b.n	8000460 <ADC_DMAConvCplt+0x68>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8000440:	68d2      	ldr	r2, [r2, #12]
 8000442:	f012 0f03 	tst.w	r2, #3
 8000446:	d10b      	bne.n	8000460 <ADC_DMAConvCplt+0x68>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800044a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800044e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000450:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000452:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8000456:	d103      	bne.n	8000460 <ADC_DMAConvCplt+0x68>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000458:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800045a:	f042 0201 	orr.w	r2, r2, #1
 800045e:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8000460:	4618      	mov	r0, r3
 8000462:	f007 fb53 	bl	8007b0c <HAL_ADC_ConvCpltCallback>
}
 8000466:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8000468:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800046a:	f012 0f10 	tst.w	r2, #16
 800046e:	d103      	bne.n	8000478 <ADC_DMAConvCplt+0x80>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000474:	4798      	blx	r3
}
 8000476:	e7f6      	b.n	8000466 <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff ffbc 	bl	80003f6 <HAL_ADC_ErrorCallback>
 800047e:	e7f2      	b.n	8000466 <ADC_DMAConvCplt+0x6e>

08000480 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8000480:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000482:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000484:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800048a:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800048c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800048e:	f043 0304 	orr.w	r3, r3, #4
 8000492:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000494:	f7ff ffaf 	bl	80003f6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000498:	bd08      	pop	{r3, pc}
	...

0800049c <HAL_ADC_ConfigChannel>:
{
 800049c:	b4f0      	push	{r4, r5, r6, r7}
 800049e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 80004a0:	2200      	movs	r2, #0
 80004a2:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80004a4:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80004a8:	2a01      	cmp	r2, #1
 80004aa:	f000 823b 	beq.w	8000924 <HAL_ADC_ConfigChannel+0x488>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2201      	movs	r2, #1
 80004b2:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80004b6:	6804      	ldr	r4, [r0, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80004b8:	68a2      	ldr	r2, [r4, #8]
 80004ba:	f012 0204 	ands.w	r2, r2, #4
 80004be:	d00a      	beq.n	80004d6 <HAL_ADC_ConfigChannel+0x3a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80004c0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80004c2:	f042 0220 	orr.w	r2, r2, #32
 80004c6:	6542      	str	r2, [r0, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80004c8:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80004ca:	2200      	movs	r2, #0
 80004cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80004d0:	b002      	add	sp, #8
 80004d2:	bcf0      	pop	{r4, r5, r6, r7}
 80004d4:	4770      	bx	lr
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80004d6:	6808      	ldr	r0, [r1, #0]
 80004d8:	f3c0 0513 	ubfx	r5, r0, #0, #20
 80004dc:	2d00      	cmp	r5, #0
 80004de:	d150      	bne.n	8000582 <HAL_ADC_ConfigChannel+0xe6>
 80004e0:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80004e4:	2501      	movs	r5, #1
 80004e6:	4085      	lsls	r5, r0
 80004e8:	69e0      	ldr	r0, [r4, #28]
 80004ea:	4328      	orrs	r0, r5
 80004ec:	61e0      	str	r0, [r4, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80004ee:	681f      	ldr	r7, [r3, #0]
 80004f0:	684e      	ldr	r6, [r1, #4]
 80004f2:	680d      	ldr	r5, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80004f4:	3730      	adds	r7, #48	; 0x30
 80004f6:	0a30      	lsrs	r0, r6, #8
 80004f8:	0080      	lsls	r0, r0, #2
 80004fa:	f000 000c 	and.w	r0, r0, #12
  MODIFY_REG(*preg,
 80004fe:	583c      	ldr	r4, [r7, r0]
 8000500:	f006 061f 	and.w	r6, r6, #31
 8000504:	f04f 0c1f 	mov.w	ip, #31
 8000508:	fa0c fc06 	lsl.w	ip, ip, r6
 800050c:	ea24 040c 	bic.w	r4, r4, ip
 8000510:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8000514:	40b5      	lsls	r5, r6
 8000516:	432c      	orrs	r4, r5
 8000518:	503c      	str	r4, [r7, r0]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800051a:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800051c:	6884      	ldr	r4, [r0, #8]
 800051e:	f014 0f04 	tst.w	r4, #4
 8000522:	d037      	beq.n	8000594 <HAL_ADC_ConfigChannel+0xf8>
 8000524:	2401      	movs	r4, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000526:	6885      	ldr	r5, [r0, #8]
 8000528:	f015 0f08 	tst.w	r5, #8
 800052c:	d034      	beq.n	8000598 <HAL_ADC_ConfigChannel+0xfc>
 800052e:	2501      	movs	r5, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000530:	432c      	orrs	r4, r5
 8000532:	d165      	bne.n	8000600 <HAL_ADC_ConfigChannel+0x164>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000534:	680f      	ldr	r7, [r1, #0]
 8000536:	688c      	ldr	r4, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000538:	f100 0514 	add.w	r5, r0, #20
 800053c:	0e78      	lsrs	r0, r7, #25
 800053e:	0080      	lsls	r0, r0, #2
 8000540:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8000544:	582e      	ldr	r6, [r5, r0]
 8000546:	f3c7 5704 	ubfx	r7, r7, #20, #5
 800054a:	f04f 0c07 	mov.w	ip, #7
 800054e:	fa0c fc07 	lsl.w	ip, ip, r7
 8000552:	ea26 060c 	bic.w	r6, r6, ip
 8000556:	40bc      	lsls	r4, r7
 8000558:	4334      	orrs	r4, r6
 800055a:	502c      	str	r4, [r5, r0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800055c:	48a9      	ldr	r0, [pc, #676]	; (8000804 <HAL_ADC_ConfigChannel+0x368>)
 800055e:	6800      	ldr	r0, [r0, #0]
 8000560:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8000564:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8000568:	d018      	beq.n	800059c <HAL_ADC_ConfigChannel+0x100>
 800056a:	681c      	ldr	r4, [r3, #0]
 800056c:	68e0      	ldr	r0, [r4, #12]
 800056e:	f010 0f10 	tst.w	r0, #16
 8000572:	d167      	bne.n	8000644 <HAL_ADC_ConfigChannel+0x1a8>
 8000574:	6948      	ldr	r0, [r1, #20]
 8000576:	68e4      	ldr	r4, [r4, #12]
 8000578:	f3c4 0482 	ubfx	r4, r4, #2, #3
 800057c:	0064      	lsls	r4, r4, #1
 800057e:	40a0      	lsls	r0, r4
 8000580:	e013      	b.n	80005aa <HAL_ADC_ConfigChannel+0x10e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000582:	fa90 f0a0 	rbit	r0, r0
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8000586:	fab0 f080 	clz	r0, r0
 800058a:	f000 001f 	and.w	r0, r0, #31
 800058e:	2501      	movs	r5, #1
 8000590:	4085      	lsls	r5, r0
 8000592:	e7a9      	b.n	80004e8 <HAL_ADC_ConfigChannel+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000594:	2400      	movs	r4, #0
 8000596:	e7c6      	b.n	8000526 <HAL_ADC_ConfigChannel+0x8a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000598:	2500      	movs	r5, #0
 800059a:	e7c9      	b.n	8000530 <HAL_ADC_ConfigChannel+0x94>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800059c:	6948      	ldr	r0, [r1, #20]
 800059e:	681c      	ldr	r4, [r3, #0]
 80005a0:	68e4      	ldr	r4, [r4, #12]
 80005a2:	f3c4 0482 	ubfx	r4, r4, #2, #3
 80005a6:	0064      	lsls	r4, r4, #1
 80005a8:	40a0      	lsls	r0, r4
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80005aa:	690d      	ldr	r5, [r1, #16]
 80005ac:	2d04      	cmp	r5, #4
 80005ae:	d057      	beq.n	8000660 <HAL_ADC_ConfigChannel+0x1c4>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80005b0:	681f      	ldr	r7, [r3, #0]
 80005b2:	680e      	ldr	r6, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80005b4:	3760      	adds	r7, #96	; 0x60
  MODIFY_REG(*preg,
 80005b6:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
 80005ba:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 80005be:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80005c2:	4330      	orrs	r0, r6
 80005c4:	4320      	orrs	r0, r4
 80005c6:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80005ca:	6818      	ldr	r0, [r3, #0]
 80005cc:	690e      	ldr	r6, [r1, #16]
 80005ce:	7e4c      	ldrb	r4, [r1, #25]
 80005d0:	2c01      	cmp	r4, #1
 80005d2:	d03f      	beq.n	8000654 <HAL_ADC_ConfigChannel+0x1b8>
 80005d4:	4615      	mov	r5, r2
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80005d6:	3060      	adds	r0, #96	; 0x60
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80005d8:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 80005dc:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80005e0:	432c      	orrs	r4, r5
 80005e2:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80005e6:	681d      	ldr	r5, [r3, #0]
 80005e8:	690c      	ldr	r4, [r1, #16]
 80005ea:	7e08      	ldrb	r0, [r1, #24]
 80005ec:	2801      	cmp	r0, #1
 80005ee:	d034      	beq.n	800065a <HAL_ADC_ConfigChannel+0x1be>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80005f0:	6928      	ldr	r0, [r5, #16]
 80005f2:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 80005f6:	f004 041f 	and.w	r4, r4, #31
 80005fa:	40a2      	lsls	r2, r4
 80005fc:	4302      	orrs	r2, r0
 80005fe:	612a      	str	r2, [r5, #16]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000600:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000602:	6882      	ldr	r2, [r0, #8]
 8000604:	f012 0f01 	tst.w	r2, #1
 8000608:	f040 8188 	bne.w	800091c <HAL_ADC_ConfigChannel+0x480>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800060c:	680a      	ldr	r2, [r1, #0]
 800060e:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8000610:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
 8000614:	f3c2 0613 	ubfx	r6, r2, #0, #20
 8000618:	ea24 0406 	bic.w	r4, r4, r6
 800061c:	f005 0618 	and.w	r6, r5, #24
 8000620:	4d79      	ldr	r5, [pc, #484]	; (8000808 <HAL_ADC_ConfigChannel+0x36c>)
 8000622:	40f5      	lsrs	r5, r6
 8000624:	402a      	ands	r2, r5
 8000626:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800062a:	4322      	orrs	r2, r4
 800062c:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000630:	68c8      	ldr	r0, [r1, #12]
 8000632:	4a76      	ldr	r2, [pc, #472]	; (800080c <HAL_ADC_ConfigChannel+0x370>)
 8000634:	4290      	cmp	r0, r2
 8000636:	d047      	beq.n	80006c8 <HAL_ADC_ConfigChannel+0x22c>
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000638:	680a      	ldr	r2, [r1, #0]
 800063a:	2a00      	cmp	r2, #0
 800063c:	f2c0 80e8 	blt.w	8000810 <HAL_ADC_ConfigChannel+0x374>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000640:	2000      	movs	r0, #0
 8000642:	e742      	b.n	80004ca <HAL_ADC_ConfigChannel+0x2e>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000644:	6948      	ldr	r0, [r1, #20]
 8000646:	68e4      	ldr	r4, [r4, #12]
 8000648:	08a4      	lsrs	r4, r4, #2
 800064a:	f004 0404 	and.w	r4, r4, #4
 800064e:	0064      	lsls	r4, r4, #1
 8000650:	40a0      	lsls	r0, r4
 8000652:	e7aa      	b.n	80005aa <HAL_ADC_ConfigChannel+0x10e>
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8000654:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8000658:	e7bd      	b.n	80005d6 <HAL_ADC_ConfigChannel+0x13a>
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800065a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800065e:	e7c7      	b.n	80005f0 <HAL_ADC_ConfigChannel+0x154>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000660:	6818      	ldr	r0, [r3, #0]
 8000662:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000664:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000668:	680c      	ldr	r4, [r1, #0]
 800066a:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800066e:	d01c      	beq.n	80006aa <HAL_ADC_ConfigChannel+0x20e>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000670:	6818      	ldr	r0, [r3, #0]
 8000672:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8000674:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000678:	680c      	ldr	r4, [r1, #0]
 800067a:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800067e:	d019      	beq.n	80006b4 <HAL_ADC_ConfigChannel+0x218>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000680:	6818      	ldr	r0, [r3, #0]
 8000682:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8000684:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000688:	680c      	ldr	r4, [r1, #0]
 800068a:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800068e:	d016      	beq.n	80006be <HAL_ADC_ConfigChannel+0x222>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000690:	6818      	ldr	r0, [r3, #0]
 8000692:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8000694:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000698:	680c      	ldr	r4, [r1, #0]
 800069a:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800069e:	d1af      	bne.n	8000600 <HAL_ADC_ConfigChannel+0x164>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80006a0:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80006a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80006a6:	66c2      	str	r2, [r0, #108]	; 0x6c
 80006a8:	e7aa      	b.n	8000600 <HAL_ADC_ConfigChannel+0x164>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80006aa:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80006ac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80006b0:	6602      	str	r2, [r0, #96]	; 0x60
 80006b2:	e7dd      	b.n	8000670 <HAL_ADC_ConfigChannel+0x1d4>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80006b4:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80006b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80006ba:	6642      	str	r2, [r0, #100]	; 0x64
 80006bc:	e7e0      	b.n	8000680 <HAL_ADC_ConfigChannel+0x1e4>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80006be:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80006c0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80006c4:	6682      	str	r2, [r0, #104]	; 0x68
 80006c6:	e7e3      	b.n	8000690 <HAL_ADC_ConfigChannel+0x1f4>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80006c8:	681d      	ldr	r5, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80006ca:	680a      	ldr	r2, [r1, #0]
 80006cc:	f3c2 0613 	ubfx	r6, r2, #0, #20
 80006d0:	bb96      	cbnz	r6, 8000738 <HAL_ADC_ConfigChannel+0x29c>
 80006d2:	0e90      	lsrs	r0, r2, #26
 80006d4:	3001      	adds	r0, #1
 80006d6:	f000 001f 	and.w	r0, r0, #31
 80006da:	2809      	cmp	r0, #9
 80006dc:	bf8c      	ite	hi
 80006de:	2000      	movhi	r0, #0
 80006e0:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80006e2:	2800      	cmp	r0, #0
 80006e4:	d052      	beq.n	800078c <HAL_ADC_ConfigChannel+0x2f0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80006e6:	bb9e      	cbnz	r6, 8000750 <HAL_ADC_ConfigChannel+0x2b4>
 80006e8:	0e94      	lsrs	r4, r2, #26
 80006ea:	3401      	adds	r4, #1
 80006ec:	06a4      	lsls	r4, r4, #26
 80006ee:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80006f2:	bbb6      	cbnz	r6, 8000762 <HAL_ADC_ConfigChannel+0x2c6>
 80006f4:	0e90      	lsrs	r0, r2, #26
 80006f6:	3001      	adds	r0, #1
 80006f8:	f000 071f 	and.w	r7, r0, #31
 80006fc:	2001      	movs	r0, #1
 80006fe:	40b8      	lsls	r0, r7
 8000700:	4304      	orrs	r4, r0
 8000702:	bbc6      	cbnz	r6, 8000776 <HAL_ADC_ConfigChannel+0x2da>
 8000704:	0e92      	lsrs	r2, r2, #26
 8000706:	3201      	adds	r2, #1
 8000708:	f002 021f 	and.w	r2, r2, #31
 800070c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000710:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000712:	4322      	orrs	r2, r4
 8000714:	688c      	ldr	r4, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000716:	3514      	adds	r5, #20
 8000718:	0e50      	lsrs	r0, r2, #25
 800071a:	0080      	lsls	r0, r0, #2
 800071c:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8000720:	582e      	ldr	r6, [r5, r0]
 8000722:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8000726:	2707      	movs	r7, #7
 8000728:	4097      	lsls	r7, r2
 800072a:	ea26 0607 	bic.w	r6, r6, r7
 800072e:	fa04 f202 	lsl.w	r2, r4, r2
 8000732:	4332      	orrs	r2, r6
 8000734:	502a      	str	r2, [r5, r0]
 8000736:	e77f      	b.n	8000638 <HAL_ADC_ConfigChannel+0x19c>
 8000738:	fa92 f0a2 	rbit	r0, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800073c:	fab0 f080 	clz	r0, r0
 8000740:	3001      	adds	r0, #1
 8000742:	f000 001f 	and.w	r0, r0, #31
 8000746:	2809      	cmp	r0, #9
 8000748:	bf8c      	ite	hi
 800074a:	2000      	movhi	r0, #0
 800074c:	2001      	movls	r0, #1
 800074e:	e7c8      	b.n	80006e2 <HAL_ADC_ConfigChannel+0x246>
 8000750:	fa92 f4a2 	rbit	r4, r2
 8000754:	fab4 f484 	clz	r4, r4
 8000758:	3401      	adds	r4, #1
 800075a:	06a4      	lsls	r4, r4, #26
 800075c:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8000760:	e7c7      	b.n	80006f2 <HAL_ADC_ConfigChannel+0x256>
 8000762:	fa92 f0a2 	rbit	r0, r2
 8000766:	fab0 f080 	clz	r0, r0
 800076a:	3001      	adds	r0, #1
 800076c:	f000 071f 	and.w	r7, r0, #31
 8000770:	2001      	movs	r0, #1
 8000772:	40b8      	lsls	r0, r7
 8000774:	e7c4      	b.n	8000700 <HAL_ADC_ConfigChannel+0x264>
 8000776:	fa92 f2a2 	rbit	r2, r2
 800077a:	fab2 f282 	clz	r2, r2
 800077e:	3201      	adds	r2, #1
 8000780:	f002 021f 	and.w	r2, r2, #31
 8000784:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000788:	0512      	lsls	r2, r2, #20
 800078a:	e7c2      	b.n	8000712 <HAL_ADC_ConfigChannel+0x276>
 800078c:	b9ce      	cbnz	r6, 80007c2 <HAL_ADC_ConfigChannel+0x326>
 800078e:	0e94      	lsrs	r4, r2, #26
 8000790:	3401      	adds	r4, #1
 8000792:	06a4      	lsls	r4, r4, #26
 8000794:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8000798:	b9e6      	cbnz	r6, 80007d4 <HAL_ADC_ConfigChannel+0x338>
 800079a:	0e90      	lsrs	r0, r2, #26
 800079c:	3001      	adds	r0, #1
 800079e:	f000 071f 	and.w	r7, r0, #31
 80007a2:	2001      	movs	r0, #1
 80007a4:	40b8      	lsls	r0, r7
 80007a6:	4304      	orrs	r4, r0
 80007a8:	b9f6      	cbnz	r6, 80007e8 <HAL_ADC_ConfigChannel+0x34c>
 80007aa:	0e90      	lsrs	r0, r2, #26
 80007ac:	3001      	adds	r0, #1
 80007ae:	f000 001f 	and.w	r0, r0, #31
 80007b2:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80007b6:	3a1e      	subs	r2, #30
 80007b8:	0512      	lsls	r2, r2, #20
 80007ba:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80007be:	4322      	orrs	r2, r4
 80007c0:	e7a8      	b.n	8000714 <HAL_ADC_ConfigChannel+0x278>
 80007c2:	fa92 f4a2 	rbit	r4, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80007c6:	fab4 f484 	clz	r4, r4
 80007ca:	3401      	adds	r4, #1
 80007cc:	06a4      	lsls	r4, r4, #26
 80007ce:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80007d2:	e7e1      	b.n	8000798 <HAL_ADC_ConfigChannel+0x2fc>
 80007d4:	fa92 f0a2 	rbit	r0, r2
 80007d8:	fab0 f080 	clz	r0, r0
 80007dc:	3001      	adds	r0, #1
 80007de:	f000 071f 	and.w	r7, r0, #31
 80007e2:	2001      	movs	r0, #1
 80007e4:	40b8      	lsls	r0, r7
 80007e6:	e7de      	b.n	80007a6 <HAL_ADC_ConfigChannel+0x30a>
 80007e8:	fa92 f0a2 	rbit	r0, r2
 80007ec:	fab0 f080 	clz	r0, r0
 80007f0:	3001      	adds	r0, #1
 80007f2:	f000 001f 	and.w	r0, r0, #31
 80007f6:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80007fa:	3a1e      	subs	r2, #30
 80007fc:	0512      	lsls	r2, r2, #20
 80007fe:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000802:	e7dc      	b.n	80007be <HAL_ADC_ConfigChannel+0x322>
 8000804:	5c001000 	.word	0x5c001000
 8000808:	000fffff 	.word	0x000fffff
 800080c:	47ff0000 	.word	0x47ff0000
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000810:	6819      	ldr	r1, [r3, #0]
 8000812:	4845      	ldr	r0, [pc, #276]	; (8000928 <HAL_ADC_ConfigChannel+0x48c>)
 8000814:	4c45      	ldr	r4, [pc, #276]	; (800092c <HAL_ADC_ConfigChannel+0x490>)
 8000816:	42a1      	cmp	r1, r4
 8000818:	bf18      	it	ne
 800081a:	4281      	cmpne	r1, r0
 800081c:	bf0c      	ite	eq
 800081e:	2001      	moveq	r0, #1
 8000820:	2000      	movne	r0, #0
 8000822:	d121      	bne.n	8000868 <HAL_ADC_ConfigChannel+0x3cc>
 8000824:	4d42      	ldr	r5, [pc, #264]	; (8000930 <HAL_ADC_ConfigChannel+0x494>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000826:	68ac      	ldr	r4, [r5, #8]
 8000828:	f004 76e0 	and.w	r6, r4, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800082c:	b310      	cbz	r0, 8000874 <HAL_ADC_ConfigChannel+0x3d8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800082e:	483e      	ldr	r0, [pc, #248]	; (8000928 <HAL_ADC_ConfigChannel+0x48c>)
 8000830:	6880      	ldr	r0, [r0, #8]
 8000832:	f010 0f01 	tst.w	r0, #1
 8000836:	d019      	beq.n	800086c <HAL_ADC_ConfigChannel+0x3d0>
 8000838:	2001      	movs	r0, #1
 800083a:	4f3c      	ldr	r7, [pc, #240]	; (800092c <HAL_ADC_ConfigChannel+0x490>)
 800083c:	68bf      	ldr	r7, [r7, #8]
 800083e:	f017 0f01 	tst.w	r7, #1
 8000842:	d015      	beq.n	8000870 <HAL_ADC_ConfigChannel+0x3d4>
 8000844:	2701      	movs	r7, #1
 8000846:	4338      	orrs	r0, r7
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	2800      	cmp	r0, #0
 8000850:	d05e      	beq.n	8000910 <HAL_ADC_ConfigChannel+0x474>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000852:	4838      	ldr	r0, [pc, #224]	; (8000934 <HAL_ADC_ConfigChannel+0x498>)
 8000854:	4282      	cmp	r2, r0
 8000856:	d018      	beq.n	800088a <HAL_ADC_ConfigChannel+0x3ee>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000858:	4837      	ldr	r0, [pc, #220]	; (8000938 <HAL_ADC_ConfigChannel+0x49c>)
 800085a:	4282      	cmp	r2, r0
 800085c:	d036      	beq.n	80008cc <HAL_ADC_ConfigChannel+0x430>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800085e:	4837      	ldr	r0, [pc, #220]	; (800093c <HAL_ADC_ConfigChannel+0x4a0>)
 8000860:	4282      	cmp	r2, r0
 8000862:	d044      	beq.n	80008ee <HAL_ADC_ConfigChannel+0x452>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000864:	2000      	movs	r0, #0
 8000866:	e630      	b.n	80004ca <HAL_ADC_ConfigChannel+0x2e>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000868:	4d35      	ldr	r5, [pc, #212]	; (8000940 <HAL_ADC_ConfigChannel+0x4a4>)
 800086a:	e7dc      	b.n	8000826 <HAL_ADC_ConfigChannel+0x38a>
 800086c:	2000      	movs	r0, #0
 800086e:	e7e4      	b.n	800083a <HAL_ADC_ConfigChannel+0x39e>
 8000870:	2700      	movs	r7, #0
 8000872:	e7e8      	b.n	8000846 <HAL_ADC_ConfigChannel+0x3aa>
 8000874:	4833      	ldr	r0, [pc, #204]	; (8000944 <HAL_ADC_ConfigChannel+0x4a8>)
 8000876:	6880      	ldr	r0, [r0, #8]
 8000878:	f010 0f01 	tst.w	r0, #1
 800087c:	d003      	beq.n	8000886 <HAL_ADC_ConfigChannel+0x3ea>
 800087e:	2001      	movs	r0, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000880:	f080 0001 	eor.w	r0, r0, #1
 8000884:	e7e3      	b.n	800084e <HAL_ADC_ConfigChannel+0x3b2>
 8000886:	2000      	movs	r0, #0
 8000888:	e7fa      	b.n	8000880 <HAL_ADC_ConfigChannel+0x3e4>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800088a:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
 800088e:	d1e3      	bne.n	8000858 <HAL_ADC_ConfigChannel+0x3bc>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8000890:	4a2c      	ldr	r2, [pc, #176]	; (8000944 <HAL_ADC_ConfigChannel+0x4a8>)
 8000892:	4291      	cmp	r1, r2
 8000894:	d001      	beq.n	800089a <HAL_ADC_ConfigChannel+0x3fe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000896:	2000      	movs	r0, #0
 8000898:	e617      	b.n	80004ca <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800089a:	f446 0200 	orr.w	r2, r6, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800089e:	68a9      	ldr	r1, [r5, #8]
 80008a0:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80008a4:	430a      	orrs	r2, r1
 80008a6:	60aa      	str	r2, [r5, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80008a8:	4a27      	ldr	r2, [pc, #156]	; (8000948 <HAL_ADC_ConfigChannel+0x4ac>)
 80008aa:	6812      	ldr	r2, [r2, #0]
 80008ac:	0992      	lsrs	r2, r2, #6
 80008ae:	4927      	ldr	r1, [pc, #156]	; (800094c <HAL_ADC_ConfigChannel+0x4b0>)
 80008b0:	fba1 1202 	umull	r1, r2, r1, r2
 80008b4:	0992      	lsrs	r2, r2, #6
 80008b6:	0052      	lsls	r2, r2, #1
 80008b8:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 80008ba:	e002      	b.n	80008c2 <HAL_ADC_ConfigChannel+0x426>
                wait_loop_index--;
 80008bc:	9a01      	ldr	r2, [sp, #4]
 80008be:	3a01      	subs	r2, #1
 80008c0:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 80008c2:	9a01      	ldr	r2, [sp, #4]
 80008c4:	2a00      	cmp	r2, #0
 80008c6:	d1f9      	bne.n	80008bc <HAL_ADC_ConfigChannel+0x420>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008c8:	2000      	movs	r0, #0
 80008ca:	e5fe      	b.n	80004ca <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80008cc:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
 80008d0:	d1c5      	bne.n	800085e <HAL_ADC_ConfigChannel+0x3c2>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80008d2:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <HAL_ADC_ConfigChannel+0x4a8>)
 80008d4:	4291      	cmp	r1, r2
 80008d6:	d001      	beq.n	80008dc <HAL_ADC_ConfigChannel+0x440>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008d8:	2000      	movs	r0, #0
 80008da:	e5f6      	b.n	80004ca <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80008dc:	f046 7280 	orr.w	r2, r6, #16777216	; 0x1000000
 80008e0:	68a9      	ldr	r1, [r5, #8]
 80008e2:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80008e6:	430a      	orrs	r2, r1
 80008e8:	60aa      	str	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008ea:	2000      	movs	r0, #0
 80008ec:	e5ed      	b.n	80004ca <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80008ee:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
 80008f2:	d115      	bne.n	8000920 <HAL_ADC_ConfigChannel+0x484>
            if (ADC_VREFINT_INSTANCE(hadc))
 80008f4:	4a13      	ldr	r2, [pc, #76]	; (8000944 <HAL_ADC_ConfigChannel+0x4a8>)
 80008f6:	4291      	cmp	r1, r2
 80008f8:	d001      	beq.n	80008fe <HAL_ADC_ConfigChannel+0x462>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008fa:	2000      	movs	r0, #0
 80008fc:	e5e5      	b.n	80004ca <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80008fe:	f446 0280 	orr.w	r2, r6, #4194304	; 0x400000
 8000902:	68a9      	ldr	r1, [r5, #8]
 8000904:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000908:	430a      	orrs	r2, r1
 800090a:	60aa      	str	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800090c:	2000      	movs	r0, #0
 800090e:	e5dc      	b.n	80004ca <HAL_ADC_ConfigChannel+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000910:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000912:	f042 0220 	orr.w	r2, r2, #32
 8000916:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8000918:	2001      	movs	r0, #1
 800091a:	e5d6      	b.n	80004ca <HAL_ADC_ConfigChannel+0x2e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800091c:	2000      	movs	r0, #0
 800091e:	e5d4      	b.n	80004ca <HAL_ADC_ConfigChannel+0x2e>
 8000920:	2000      	movs	r0, #0
 8000922:	e5d2      	b.n	80004ca <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8000924:	2002      	movs	r0, #2
 8000926:	e5d3      	b.n	80004d0 <HAL_ADC_ConfigChannel+0x34>
 8000928:	40022000 	.word	0x40022000
 800092c:	40022100 	.word	0x40022100
 8000930:	40022300 	.word	0x40022300
 8000934:	cb840000 	.word	0xcb840000
 8000938:	c7520000 	.word	0xc7520000
 800093c:	cfb80000 	.word	0xcfb80000
 8000940:	58026300 	.word	0x58026300
 8000944:	58026000 	.word	0x58026000
 8000948:	20000288 	.word	0x20000288
 800094c:	053e2d63 	.word	0x053e2d63

08000950 <ADC_Enable>:
{
 8000950:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000952:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000954:	689a      	ldr	r2, [r3, #8]
 8000956:	f012 0f01 	tst.w	r2, #1
 800095a:	d152      	bne.n	8000a02 <ADC_Enable+0xb2>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800095c:	6899      	ldr	r1, [r3, #8]
 800095e:	4a2a      	ldr	r2, [pc, #168]	; (8000a08 <ADC_Enable+0xb8>)
 8000960:	4211      	tst	r1, r2
 8000962:	d009      	beq.n	8000978 <ADC_Enable+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000964:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000966:	f043 0310 	orr.w	r3, r3, #16
 800096a:	6543      	str	r3, [r0, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800096c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8000974:	2001      	movs	r0, #1
 8000976:	e045      	b.n	8000a04 <ADC_Enable+0xb4>
 8000978:	4604      	mov	r4, r0
  MODIFY_REG(ADCx->CR,
 800097a:	6899      	ldr	r1, [r3, #8]
 800097c:	4a23      	ldr	r2, [pc, #140]	; (8000a0c <ADC_Enable+0xbc>)
 800097e:	400a      	ands	r2, r1
 8000980:	f042 0201 	orr.w	r2, r2, #1
 8000984:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000986:	f7ff fd07 	bl	8000398 <HAL_GetTick>
 800098a:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800098c:	6823      	ldr	r3, [r4, #0]
 800098e:	4920      	ldr	r1, [pc, #128]	; (8000a10 <ADC_Enable+0xc0>)
 8000990:	4a20      	ldr	r2, [pc, #128]	; (8000a14 <ADC_Enable+0xc4>)
 8000992:	4293      	cmp	r3, r2
 8000994:	bf18      	it	ne
 8000996:	428b      	cmpne	r3, r1
 8000998:	d10d      	bne.n	80009b6 <ADC_Enable+0x66>
 800099a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800099e:	6892      	ldr	r2, [r2, #8]
 80009a0:	f002 021f 	and.w	r2, r2, #31
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80009a4:	491b      	ldr	r1, [pc, #108]	; (8000a14 <ADC_Enable+0xc4>)
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d007      	beq.n	80009ba <ADC_Enable+0x6a>
 80009aa:	4619      	mov	r1, r3
 80009ac:	4299      	cmp	r1, r3
 80009ae:	d00c      	beq.n	80009ca <ADC_Enable+0x7a>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80009b0:	b15a      	cbz	r2, 80009ca <ADC_Enable+0x7a>
  return HAL_OK;
 80009b2:	2000      	movs	r0, #0
 80009b4:	e026      	b.n	8000a04 <ADC_Enable+0xb4>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80009b6:	4a18      	ldr	r2, [pc, #96]	; (8000a18 <ADC_Enable+0xc8>)
 80009b8:	e7f1      	b.n	800099e <ADC_Enable+0x4e>
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80009ba:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 80009be:	e7f5      	b.n	80009ac <ADC_Enable+0x5c>
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80009c0:	f7ff fcea 	bl	8000398 <HAL_GetTick>
 80009c4:	1b40      	subs	r0, r0, r5
 80009c6:	2802      	cmp	r0, #2
 80009c8:	d80f      	bhi.n	80009ea <ADC_Enable+0x9a>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80009ca:	6823      	ldr	r3, [r4, #0]
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	f012 0f01 	tst.w	r2, #1
 80009d2:	d114      	bne.n	80009fe <ADC_Enable+0xae>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80009d4:	689a      	ldr	r2, [r3, #8]
 80009d6:	f012 0f01 	tst.w	r2, #1
 80009da:	d1f1      	bne.n	80009c0 <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 80009dc:	6899      	ldr	r1, [r3, #8]
 80009de:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <ADC_Enable+0xbc>)
 80009e0:	400a      	ands	r2, r1
 80009e2:	f042 0201 	orr.w	r2, r2, #1
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	e7ea      	b.n	80009c0 <ADC_Enable+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80009ec:	f043 0310 	orr.w	r3, r3, #16
 80009f0:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 80009fa:	2001      	movs	r0, #1
 80009fc:	e002      	b.n	8000a04 <ADC_Enable+0xb4>
  return HAL_OK;
 80009fe:	2000      	movs	r0, #0
 8000a00:	e000      	b.n	8000a04 <ADC_Enable+0xb4>
 8000a02:	2000      	movs	r0, #0
}
 8000a04:	bd38      	pop	{r3, r4, r5, pc}
 8000a06:	bf00      	nop
 8000a08:	8000003f 	.word	0x8000003f
 8000a0c:	7fffffc0 	.word	0x7fffffc0
 8000a10:	40022000 	.word	0x40022000
 8000a14:	40022100 	.word	0x40022100
 8000a18:	58026300 	.word	0x58026300

08000a1c <HAL_ADC_Start_DMA>:
{
 8000a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000a1e:	6804      	ldr	r4, [r0, #0]
 8000a20:	4e41      	ldr	r6, [pc, #260]	; (8000b28 <HAL_ADC_Start_DMA+0x10c>)
 8000a22:	4d42      	ldr	r5, [pc, #264]	; (8000b2c <HAL_ADC_Start_DMA+0x110>)
 8000a24:	42ac      	cmp	r4, r5
 8000a26:	bf18      	it	ne
 8000a28:	42b4      	cmpne	r4, r6
 8000a2a:	d11e      	bne.n	8000a6a <HAL_ADC_Start_DMA+0x4e>
 8000a2c:	f505 7500 	add.w	r5, r5, #512	; 0x200
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000a30:	68ad      	ldr	r5, [r5, #8]
 8000a32:	f005 051f 	and.w	r5, r5, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000a36:	68a4      	ldr	r4, [r4, #8]
 8000a38:	f014 0f04 	tst.w	r4, #4
 8000a3c:	d16e      	bne.n	8000b1c <HAL_ADC_Start_DMA+0x100>
    __HAL_LOCK(hadc);
 8000a3e:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8000a42:	2c01      	cmp	r4, #1
 8000a44:	d06d      	beq.n	8000b22 <HAL_ADC_Start_DMA+0x106>
 8000a46:	2301      	movs	r3, #1
 8000a48:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000a4c:	2d05      	cmp	r5, #5
 8000a4e:	bf14      	ite	ne
 8000a50:	2400      	movne	r4, #0
 8000a52:	2401      	moveq	r4, #1
 8000a54:	2d00      	cmp	r5, #0
 8000a56:	bf08      	it	eq
 8000a58:	461c      	moveq	r4, r3
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000a5a:	b944      	cbnz	r4, 8000a6e <HAL_ADC_Start_DMA+0x52>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000a5c:	2d09      	cmp	r5, #9
 8000a5e:	d006      	beq.n	8000a6e <HAL_ADC_Start_DMA+0x52>
      __HAL_UNLOCK(hadc);
 8000a60:	2300      	movs	r3, #0
 8000a62:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
      tmp_hal_status = HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e059      	b.n	8000b1e <HAL_ADC_Start_DMA+0x102>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000a6a:	4d31      	ldr	r5, [pc, #196]	; (8000b30 <HAL_ADC_Start_DMA+0x114>)
 8000a6c:	e7e0      	b.n	8000a30 <HAL_ADC_Start_DMA+0x14>
 8000a6e:	4616      	mov	r6, r2
 8000a70:	460f      	mov	r7, r1
 8000a72:	4604      	mov	r4, r0
      tmp_hal_status = ADC_Enable(hadc);
 8000a74:	f7ff ff6c 	bl	8000950 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2800      	cmp	r0, #0
 8000a7c:	d14a      	bne.n	8000b14 <HAL_ADC_Start_DMA+0xf8>
        ADC_STATE_CLR_SET(hadc->State,
 8000a7e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000a80:	4b2c      	ldr	r3, [pc, #176]	; (8000b34 <HAL_ADC_Start_DMA+0x118>)
 8000a82:	4013      	ands	r3, r2
 8000a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a88:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000a8a:	6823      	ldr	r3, [r4, #0]
 8000a8c:	4a27      	ldr	r2, [pc, #156]	; (8000b2c <HAL_ADC_Start_DMA+0x110>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d03a      	beq.n	8000b08 <HAL_ADC_Start_DMA+0xec>
 8000a92:	461a      	mov	r2, r3
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d000      	beq.n	8000a9a <HAL_ADC_Start_DMA+0x7e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000a98:	b91d      	cbnz	r5, 8000aa2 <HAL_ADC_Start_DMA+0x86>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a9c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000aa0:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000aa2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000aa4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000aa8:	d031      	beq.n	8000b0e <HAL_ADC_Start_DMA+0xf2>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000aaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000aac:	f023 0306 	bic.w	r3, r3, #6
 8000ab0:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ab2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000ab4:	4a20      	ldr	r2, [pc, #128]	; (8000b38 <HAL_ADC_Start_DMA+0x11c>)
 8000ab6:	63da      	str	r2, [r3, #60]	; 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000ab8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000aba:	4a20      	ldr	r2, [pc, #128]	; (8000b3c <HAL_ADC_Start_DMA+0x120>)
 8000abc:	641a      	str	r2, [r3, #64]	; 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000abe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000ac0:	4a1f      	ldr	r2, [pc, #124]	; (8000b40 <HAL_ADC_Start_DMA+0x124>)
 8000ac2:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000ac4:	6823      	ldr	r3, [r4, #0]
 8000ac6:	221c      	movs	r2, #28
 8000ac8:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8000aca:	2300      	movs	r3, #0
 8000acc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000ad0:	6822      	ldr	r2, [r4, #0]
 8000ad2:	6853      	ldr	r3, [r2, #4]
 8000ad4:	f043 0310 	orr.w	r3, r3, #16
 8000ad8:	6053      	str	r3, [r2, #4]
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8000ada:	6821      	ldr	r1, [r4, #0]
 8000adc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8000ade:	68ca      	ldr	r2, [r1, #12]
 8000ae0:	f022 0203 	bic.w	r2, r2, #3
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	60cb      	str	r3, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000ae8:	6821      	ldr	r1, [r4, #0]
 8000aea:	4633      	mov	r3, r6
 8000aec:	463a      	mov	r2, r7
 8000aee:	3140      	adds	r1, #64	; 0x40
 8000af0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000af2:	f000 ff67 	bl	80019c4 <HAL_DMA_Start_IT>
 8000af6:	4603      	mov	r3, r0
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000af8:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8000afa:	6888      	ldr	r0, [r1, #8]
 8000afc:	4a11      	ldr	r2, [pc, #68]	; (8000b44 <HAL_ADC_Start_DMA+0x128>)
 8000afe:	4002      	ands	r2, r0
 8000b00:	f042 0204 	orr.w	r2, r2, #4
 8000b04:	608a      	str	r2, [r1, #8]
 8000b06:	e00a      	b.n	8000b1e <HAL_ADC_Start_DMA+0x102>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000b08:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8000b0c:	e7c2      	b.n	8000a94 <HAL_ADC_Start_DMA+0x78>
          ADC_CLEAR_ERRORCODE(hadc);
 8000b0e:	2300      	movs	r3, #0
 8000b10:	65a3      	str	r3, [r4, #88]	; 0x58
 8000b12:	e7ce      	b.n	8000ab2 <HAL_ADC_Start_DMA+0x96>
        __HAL_UNLOCK(hadc);
 8000b14:	2200      	movs	r2, #0
 8000b16:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 8000b1a:	e000      	b.n	8000b1e <HAL_ADC_Start_DMA+0x102>
    tmp_hal_status = HAL_BUSY;
 8000b1c:	2302      	movs	r3, #2
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8000b22:	2302      	movs	r3, #2
 8000b24:	e7fb      	b.n	8000b1e <HAL_ADC_Start_DMA+0x102>
 8000b26:	bf00      	nop
 8000b28:	40022000 	.word	0x40022000
 8000b2c:	40022100 	.word	0x40022100
 8000b30:	58026300 	.word	0x58026300
 8000b34:	fffff0fe 	.word	0xfffff0fe
 8000b38:	080003f9 	.word	0x080003f9
 8000b3c:	080003ed 	.word	0x080003ed
 8000b40:	08000481 	.word	0x08000481
 8000b44:	7fffffc0 	.word	0x7fffffc0

08000b48 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8000b48:	b538      	push	{r3, r4, r5, lr}
 8000b4a:	4605      	mov	r5, r0
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8000b4c:	6803      	ldr	r3, [r0, #0]
 8000b4e:	494f      	ldr	r1, [pc, #316]	; (8000c8c <ADC_ConfigureBoostMode+0x144>)
 8000b50:	4a4f      	ldr	r2, [pc, #316]	; (8000c90 <ADC_ConfigureBoostMode+0x148>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	bf18      	it	ne
 8000b56:	428b      	cmpne	r3, r1
 8000b58:	d123      	bne.n	8000ba2 <ADC_ConfigureBoostMode+0x5a>
 8000b5a:	4b4e      	ldr	r3, [pc, #312]	; (8000c94 <ADC_ConfigureBoostMode+0x14c>)
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000b62:	bf14      	ite	ne
 8000b64:	2301      	movne	r3, #1
 8000b66:	2300      	moveq	r3, #0
 8000b68:	b34b      	cbz	r3, 8000bbe <ADC_ConfigureBoostMode+0x76>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8000b6a:	f002 fe25 	bl	80037b8 <HAL_RCC_GetHCLKFreq>
 8000b6e:	4604      	mov	r4, r0
    switch(hadc->Init.ClockPrescaler)
 8000b70:	686b      	ldr	r3, [r5, #4]
 8000b72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000b76:	d01c      	beq.n	8000bb2 <ADC_ConfigureBoostMode+0x6a>
 8000b78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000b7c:	d01d      	beq.n	8000bba <ADC_ConfigureBoostMode+0x72>
 8000b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b82:	d016      	beq.n	8000bb2 <ADC_ConfigureBoostMode+0x6a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8000b84:	f7ff fc22 	bl	80003cc <HAL_GetREVID>
 8000b88:	f241 0303 	movw	r3, #4099	; 0x1003
 8000b8c:	4298      	cmp	r0, r3
 8000b8e:	d856      	bhi.n	8000c3e <ADC_ConfigureBoostMode+0xf6>
  {
    if(freq > 20000000UL)
 8000b90:	4b41      	ldr	r3, [pc, #260]	; (8000c98 <ADC_ConfigureBoostMode+0x150>)
 8000b92:	429c      	cmp	r4, r3
 8000b94:	d94d      	bls.n	8000c32 <ADC_ConfigureBoostMode+0xea>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8000b96:	682a      	ldr	r2, [r5, #0]
 8000b98:	6893      	ldr	r3, [r2, #8]
 8000b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b9e:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8000ba0:	bd38      	pop	{r3, r4, r5, pc}
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8000ba2:	4b3e      	ldr	r3, [pc, #248]	; (8000c9c <ADC_ConfigureBoostMode+0x154>)
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000baa:	bf14      	ite	ne
 8000bac:	2301      	movne	r3, #1
 8000bae:	2300      	moveq	r3, #0
 8000bb0:	e7da      	b.n	8000b68 <ADC_ConfigureBoostMode+0x20>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8000bb2:	0c1b      	lsrs	r3, r3, #16
 8000bb4:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8000bb8:	e7e4      	b.n	8000b84 <ADC_ConfigureBoostMode+0x3c>
        freq /= 4UL;
 8000bba:	0884      	lsrs	r4, r0, #2
        break;
 8000bbc:	e7e2      	b.n	8000b84 <ADC_ConfigureBoostMode+0x3c>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8000bbe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000bc2:	f003 fec3 	bl	800494c <HAL_RCCEx_GetPeriphCLKFreq>
 8000bc6:	4604      	mov	r4, r0
    switch(hadc->Init.ClockPrescaler)
 8000bc8:	686b      	ldr	r3, [r5, #4]
 8000bca:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8000bce:	d016      	beq.n	8000bfe <ADC_ConfigureBoostMode+0xb6>
 8000bd0:	d90b      	bls.n	8000bea <ADC_ConfigureBoostMode+0xa2>
 8000bd2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8000bd6:	d028      	beq.n	8000c2a <ADC_ConfigureBoostMode+0xe2>
 8000bd8:	d81d      	bhi.n	8000c16 <ADC_ConfigureBoostMode+0xce>
 8000bda:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8000bde:	d022      	beq.n	8000c26 <ADC_ConfigureBoostMode+0xde>
 8000be0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000be4:	d1ce      	bne.n	8000b84 <ADC_ConfigureBoostMode+0x3c>
        freq /= 32UL;
 8000be6:	0944      	lsrs	r4, r0, #5
        break;
 8000be8:	e7cc      	b.n	8000b84 <ADC_ConfigureBoostMode+0x3c>
    switch(hadc->Init.ClockPrescaler)
 8000bea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000bee:	d006      	beq.n	8000bfe <ADC_ConfigureBoostMode+0xb6>
 8000bf0:	d80a      	bhi.n	8000c08 <ADC_ConfigureBoostMode+0xc0>
 8000bf2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000bf6:	d002      	beq.n	8000bfe <ADC_ConfigureBoostMode+0xb6>
 8000bf8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000bfc:	d1c2      	bne.n	8000b84 <ADC_ConfigureBoostMode+0x3c>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8000bfe:	0c9b      	lsrs	r3, r3, #18
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8000c06:	e7bd      	b.n	8000b84 <ADC_ConfigureBoostMode+0x3c>
    switch(hadc->Init.ClockPrescaler)
 8000c08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000c0c:	d0f7      	beq.n	8000bfe <ADC_ConfigureBoostMode+0xb6>
 8000c0e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8000c12:	d1b7      	bne.n	8000b84 <ADC_ConfigureBoostMode+0x3c>
 8000c14:	e7f3      	b.n	8000bfe <ADC_ConfigureBoostMode+0xb6>
 8000c16:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8000c1a:	d008      	beq.n	8000c2e <ADC_ConfigureBoostMode+0xe6>
 8000c1c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8000c20:	d1b0      	bne.n	8000b84 <ADC_ConfigureBoostMode+0x3c>
        freq /= 256UL;
 8000c22:	0a04      	lsrs	r4, r0, #8
        break;
 8000c24:	e7ae      	b.n	8000b84 <ADC_ConfigureBoostMode+0x3c>
        freq /= 16UL;
 8000c26:	0904      	lsrs	r4, r0, #4
      break;
 8000c28:	e7ac      	b.n	8000b84 <ADC_ConfigureBoostMode+0x3c>
        freq /= 64UL;
 8000c2a:	0984      	lsrs	r4, r0, #6
        break;
 8000c2c:	e7aa      	b.n	8000b84 <ADC_ConfigureBoostMode+0x3c>
        freq /= 128UL;
 8000c2e:	09c4      	lsrs	r4, r0, #7
        break;
 8000c30:	e7a8      	b.n	8000b84 <ADC_ConfigureBoostMode+0x3c>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8000c32:	682a      	ldr	r2, [r5, #0]
 8000c34:	6893      	ldr	r3, [r2, #8]
 8000c36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c3a:	6093      	str	r3, [r2, #8]
 8000c3c:	e7b0      	b.n	8000ba0 <ADC_ConfigureBoostMode+0x58>
    freq /= 2U; /* divider by 2 for Rev.V */
 8000c3e:	0864      	lsrs	r4, r4, #1
    if (freq <= 6250000UL)
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <ADC_ConfigureBoostMode+0x158>)
 8000c42:	429c      	cmp	r4, r3
 8000c44:	d90b      	bls.n	8000c5e <ADC_ConfigureBoostMode+0x116>
    else if(freq <= 12500000UL)
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <ADC_ConfigureBoostMode+0x15c>)
 8000c48:	429c      	cmp	r4, r3
 8000c4a:	d90e      	bls.n	8000c6a <ADC_ConfigureBoostMode+0x122>
    else if(freq <= 25000000UL)
 8000c4c:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <ADC_ConfigureBoostMode+0x160>)
 8000c4e:	429c      	cmp	r4, r3
 8000c50:	d913      	bls.n	8000c7a <ADC_ConfigureBoostMode+0x132>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8000c52:	682a      	ldr	r2, [r5, #0]
 8000c54:	6893      	ldr	r3, [r2, #8]
 8000c56:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000c5a:	6093      	str	r3, [r2, #8]
}
 8000c5c:	e7a0      	b.n	8000ba0 <ADC_ConfigureBoostMode+0x58>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8000c5e:	682a      	ldr	r2, [r5, #0]
 8000c60:	6893      	ldr	r3, [r2, #8]
 8000c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c66:	6093      	str	r3, [r2, #8]
 8000c68:	e79a      	b.n	8000ba0 <ADC_ConfigureBoostMode+0x58>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8000c6a:	682a      	ldr	r2, [r5, #0]
 8000c6c:	6893      	ldr	r3, [r2, #8]
 8000c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c76:	6093      	str	r3, [r2, #8]
 8000c78:	e792      	b.n	8000ba0 <ADC_ConfigureBoostMode+0x58>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8000c7a:	682a      	ldr	r2, [r5, #0]
 8000c7c:	6893      	ldr	r3, [r2, #8]
 8000c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c86:	6093      	str	r3, [r2, #8]
 8000c88:	e78a      	b.n	8000ba0 <ADC_ConfigureBoostMode+0x58>
 8000c8a:	bf00      	nop
 8000c8c:	40022000 	.word	0x40022000
 8000c90:	40022100 	.word	0x40022100
 8000c94:	40022300 	.word	0x40022300
 8000c98:	01312d00 	.word	0x01312d00
 8000c9c:	58026300 	.word	0x58026300
 8000ca0:	005f5e10 	.word	0x005f5e10
 8000ca4:	00bebc20 	.word	0x00bebc20
 8000ca8:	017d7840 	.word	0x017d7840

08000cac <HAL_ADC_Init>:
{
 8000cac:	b530      	push	{r4, r5, lr}
 8000cae:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8000cb4:	2800      	cmp	r0, #0
 8000cb6:	f000 811c 	beq.w	8000ef2 <HAL_ADC_Init+0x246>
 8000cba:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cbc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000cbe:	b1e3      	cbz	r3, 8000cfa <HAL_ADC_Init+0x4e>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000cc0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000cc2:	689a      	ldr	r2, [r3, #8]
 8000cc4:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8000cc8:	d003      	beq.n	8000cd2 <HAL_ADC_Init+0x26>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000cca:	6899      	ldr	r1, [r3, #8]
 8000ccc:	4a8a      	ldr	r2, [pc, #552]	; (8000ef8 <HAL_ADC_Init+0x24c>)
 8000cce:	400a      	ands	r2, r1
 8000cd0:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000cd2:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000cd4:	689a      	ldr	r2, [r3, #8]
 8000cd6:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000cda:	d11b      	bne.n	8000d14 <HAL_ADC_Init+0x68>
  MODIFY_REG(ADCx->CR,
 8000cdc:	6899      	ldr	r1, [r3, #8]
 8000cde:	4a87      	ldr	r2, [pc, #540]	; (8000efc <HAL_ADC_Init+0x250>)
 8000ce0:	400a      	ands	r2, r1
 8000ce2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ce6:	609a      	str	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000ce8:	4b85      	ldr	r3, [pc, #532]	; (8000f00 <HAL_ADC_Init+0x254>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	099b      	lsrs	r3, r3, #6
 8000cee:	4a85      	ldr	r2, [pc, #532]	; (8000f04 <HAL_ADC_Init+0x258>)
 8000cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf4:	099b      	lsrs	r3, r3, #6
 8000cf6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000cf8:	e009      	b.n	8000d0e <HAL_ADC_Init+0x62>
    HAL_ADC_MspInit(hadc);
 8000cfa:	f006 fce5 	bl	80076c8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8000cfe:	2300      	movs	r3, #0
 8000d00:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8000d02:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000d06:	e7db      	b.n	8000cc0 <HAL_ADC_Init+0x14>
      wait_loop_index--;
 8000d08:	9b01      	ldr	r3, [sp, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000d0e:	9b01      	ldr	r3, [sp, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1f9      	bne.n	8000d08 <HAL_ADC_Init+0x5c>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d14:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000d1c:	f040 809d 	bne.w	8000e5a <HAL_ADC_Init+0x1ae>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d20:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000d22:	f042 0210 	orr.w	r2, r2, #16
 8000d26:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d28:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000d2a:	f042 0201 	orr.w	r2, r2, #1
 8000d2e:	65a2      	str	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8000d30:	2501      	movs	r5, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d32:	689a      	ldr	r2, [r3, #8]
 8000d34:	f012 0f04 	tst.w	r2, #4
 8000d38:	f000 8091 	beq.w	8000e5e <HAL_ADC_Init+0x1b2>
 8000d3c:	2101      	movs	r1, #1
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000d3e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000d40:	f012 0f10 	tst.w	r2, #16
 8000d44:	f040 80cd 	bne.w	8000ee2 <HAL_ADC_Init+0x236>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	f040 80ca 	bne.w	8000ee2 <HAL_ADC_Init+0x236>
    ADC_STATE_CLR_SET(hadc->State,
 8000d4e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000d50:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8000d54:	f042 0202 	orr.w	r2, r2, #2
 8000d58:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d5a:	689a      	ldr	r2, [r3, #8]
 8000d5c:	f012 0f01 	tst.w	r2, #1
 8000d60:	d121      	bne.n	8000da6 <HAL_ADC_Init+0xfa>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000d62:	4969      	ldr	r1, [pc, #420]	; (8000f08 <HAL_ADC_Init+0x25c>)
 8000d64:	4a69      	ldr	r2, [pc, #420]	; (8000f0c <HAL_ADC_Init+0x260>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	bf18      	it	ne
 8000d6a:	428b      	cmpne	r3, r1
 8000d6c:	bf0c      	ite	eq
 8000d6e:	2301      	moveq	r3, #1
 8000d70:	2300      	movne	r3, #0
 8000d72:	d17a      	bne.n	8000e6a <HAL_ADC_Init+0x1be>
 8000d74:	688a      	ldr	r2, [r1, #8]
 8000d76:	f012 0f01 	tst.w	r2, #1
 8000d7a:	d072      	beq.n	8000e62 <HAL_ADC_Init+0x1b6>
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	4963      	ldr	r1, [pc, #396]	; (8000f0c <HAL_ADC_Init+0x260>)
 8000d80:	6889      	ldr	r1, [r1, #8]
 8000d82:	f011 0f01 	tst.w	r1, #1
 8000d86:	d06e      	beq.n	8000e66 <HAL_ADC_Init+0x1ba>
 8000d88:	2101      	movs	r1, #1
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	bf0c      	ite	eq
 8000d8e:	2201      	moveq	r2, #1
 8000d90:	2200      	movne	r2, #0
 8000d92:	b142      	cbz	r2, 8000da6 <HAL_ADC_Init+0xfa>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d073      	beq.n	8000e80 <HAL_ADC_Init+0x1d4>
 8000d98:	495d      	ldr	r1, [pc, #372]	; (8000f10 <HAL_ADC_Init+0x264>)
 8000d9a:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d9c:	688a      	ldr	r2, [r1, #8]
 8000d9e:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000da2:	4313      	orrs	r3, r2
 8000da4:	608b      	str	r3, [r1, #8]
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000da6:	f7ff fb11 	bl	80003cc <HAL_GetREVID>
 8000daa:	f241 0303 	movw	r3, #4099	; 0x1003
 8000dae:	4298      	cmp	r0, r3
 8000db0:	d902      	bls.n	8000db8 <HAL_ADC_Init+0x10c>
 8000db2:	68a3      	ldr	r3, [r4, #8]
 8000db4:	2b10      	cmp	r3, #16
 8000db6:	d065      	beq.n	8000e84 <HAL_ADC_Init+0x1d8>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000db8:	7d62      	ldrb	r2, [r4, #21]
                  hadc->Init.Overrun                                                    |
 8000dba:	6b23      	ldr	r3, [r4, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000dbc:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                  hadc->Init.Resolution                                                 |
 8000dc0:	68a2      	ldr	r2, [r4, #8]
                  hadc->Init.Overrun                                                    |
 8000dc2:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8000dc4:	7f22      	ldrb	r2, [r4, #28]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000dc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000dca:	7f22      	ldrb	r2, [r4, #28]
 8000dcc:	2a01      	cmp	r2, #1
 8000dce:	d064      	beq.n	8000e9a <HAL_ADC_Init+0x1ee>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000dd2:	b122      	cbz	r2, 8000dde <HAL_ADC_Init+0x132>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000dd4:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000dd8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000dda:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000ddc:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000dde:	6821      	ldr	r1, [r4, #0]
 8000de0:	68c8      	ldr	r0, [r1, #12]
 8000de2:	4a4c      	ldr	r2, [pc, #304]	; (8000f14 <HAL_ADC_Init+0x268>)
 8000de4:	4002      	ands	r2, r0
 8000de6:	4313      	orrs	r3, r2
 8000de8:	60cb      	str	r3, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000dea:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000dec:	689a      	ldr	r2, [r3, #8]
 8000dee:	f012 0f04 	tst.w	r2, #4
 8000df2:	d057      	beq.n	8000ea4 <HAL_ADC_Init+0x1f8>
 8000df4:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	f012 0f08 	tst.w	r2, #8
 8000dfc:	d054      	beq.n	8000ea8 <HAL_ADC_Init+0x1fc>
 8000dfe:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000e00:	430a      	orrs	r2, r1
 8000e02:	d11b      	bne.n	8000e3c <HAL_ADC_Init+0x190>
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e04:	7d21      	ldrb	r1, [r4, #20]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8000e06:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      tmpCFGR = (
 8000e08:	ea42 3181 	orr.w	r1, r2, r1, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000e0c:	68d8      	ldr	r0, [r3, #12]
 8000e0e:	4a42      	ldr	r2, [pc, #264]	; (8000f18 <HAL_ADC_Init+0x26c>)
 8000e10:	4002      	ands	r2, r0
 8000e12:	430a      	orrs	r2, r1
 8000e14:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8000e16:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d046      	beq.n	8000eac <HAL_ADC_Init+0x200>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000e1e:	6822      	ldr	r2, [r4, #0]
 8000e20:	6913      	ldr	r3, [r2, #16]
 8000e22:	f023 0301 	bic.w	r3, r3, #1
 8000e26:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000e28:	6822      	ldr	r2, [r4, #0]
 8000e2a:	6913      	ldr	r3, [r2, #16]
 8000e2c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000e30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000e32:	430b      	orrs	r3, r1
 8000e34:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8000e36:	4620      	mov	r0, r4
 8000e38:	f7ff fe86 	bl	8000b48 <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e3c:	68e3      	ldr	r3, [r4, #12]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d046      	beq.n	8000ed0 <HAL_ADC_Init+0x224>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000e42:	6822      	ldr	r2, [r4, #0]
 8000e44:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e46:	f023 030f 	bic.w	r3, r3, #15
 8000e4a:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000e4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e4e:	f023 0303 	bic.w	r3, r3, #3
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	6563      	str	r3, [r4, #84]	; 0x54
 8000e58:	e048      	b.n	8000eec <HAL_ADC_Init+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e5a:	2500      	movs	r5, #0
 8000e5c:	e769      	b.n	8000d32 <HAL_ADC_Init+0x86>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e5e:	2100      	movs	r1, #0
 8000e60:	e76d      	b.n	8000d3e <HAL_ADC_Init+0x92>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e62:	2200      	movs	r2, #0
 8000e64:	e78b      	b.n	8000d7e <HAL_ADC_Init+0xd2>
 8000e66:	2100      	movs	r1, #0
 8000e68:	e78f      	b.n	8000d8a <HAL_ADC_Init+0xde>
 8000e6a:	4a2c      	ldr	r2, [pc, #176]	; (8000f1c <HAL_ADC_Init+0x270>)
 8000e6c:	6892      	ldr	r2, [r2, #8]
 8000e6e:	f012 0f01 	tst.w	r2, #1
 8000e72:	d003      	beq.n	8000e7c <HAL_ADC_Init+0x1d0>
 8000e74:	2201      	movs	r2, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e76:	f082 0201 	eor.w	r2, r2, #1
 8000e7a:	e78a      	b.n	8000d92 <HAL_ADC_Init+0xe6>
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	e7fa      	b.n	8000e76 <HAL_ADC_Init+0x1ca>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000e80:	4927      	ldr	r1, [pc, #156]	; (8000f20 <HAL_ADC_Init+0x274>)
 8000e82:	e78a      	b.n	8000d9a <HAL_ADC_Init+0xee>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000e84:	7d61      	ldrb	r1, [r4, #21]
                  hadc->Init.Overrun                                                    |
 8000e86:	6b22      	ldr	r2, [r4, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000e88:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
                  hadc->Init.Overrun                                                    |
 8000e8c:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8000e8e:	7f22      	ldrb	r2, [r4, #28]
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8000e90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000e94:	f043 030c 	orr.w	r3, r3, #12
 8000e98:	e797      	b.n	8000dca <HAL_ADC_Init+0x11e>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000e9a:	6a22      	ldr	r2, [r4, #32]
 8000e9c:	3a01      	subs	r2, #1
 8000e9e:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000ea2:	e795      	b.n	8000dd0 <HAL_ADC_Init+0x124>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	e7a6      	b.n	8000df6 <HAL_ADC_Init+0x14a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	e7a9      	b.n	8000e00 <HAL_ADC_Init+0x154>
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000eac:	6820      	ldr	r0, [r4, #0]
 8000eae:	6902      	ldr	r2, [r0, #16]
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <HAL_ADC_Init+0x278>)
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000eb6:	1e51      	subs	r1, r2, #1
 8000eb8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000eba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ebe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6103      	str	r3, [r0, #16]
 8000ece:	e7ab      	b.n	8000e28 <HAL_ADC_Init+0x17c>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000ed0:	6821      	ldr	r1, [r4, #0]
 8000ed2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000ed4:	f023 030f 	bic.w	r3, r3, #15
 8000ed8:	69a2      	ldr	r2, [r4, #24]
 8000eda:	3a01      	subs	r2, #1
 8000edc:	4313      	orrs	r3, r2
 8000ede:	630b      	str	r3, [r1, #48]	; 0x30
 8000ee0:	e7b4      	b.n	8000e4c <HAL_ADC_Init+0x1a0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ee2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ee4:	f043 0310 	orr.w	r3, r3, #16
 8000ee8:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000eea:	2501      	movs	r5, #1
}
 8000eec:	4628      	mov	r0, r5
 8000eee:	b003      	add	sp, #12
 8000ef0:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8000ef2:	2501      	movs	r5, #1
 8000ef4:	e7fa      	b.n	8000eec <HAL_ADC_Init+0x240>
 8000ef6:	bf00      	nop
 8000ef8:	5fffffc0 	.word	0x5fffffc0
 8000efc:	6fffffc0 	.word	0x6fffffc0
 8000f00:	20000288 	.word	0x20000288
 8000f04:	053e2d63 	.word	0x053e2d63
 8000f08:	40022000 	.word	0x40022000
 8000f0c:	40022100 	.word	0x40022100
 8000f10:	40022300 	.word	0x40022300
 8000f14:	fff0c003 	.word	0xfff0c003
 8000f18:	ffffbffc 	.word	0xffffbffc
 8000f1c:	58026000 	.word	0x58026000
 8000f20:	58026300 	.word	0x58026300
 8000f24:	fc00f81e 	.word	0xfc00f81e

08000f28 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f28:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8000f2c:	2a01      	cmp	r2, #1
 8000f2e:	f000 80aa 	beq.w	8001086 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
{
 8000f32:	b430      	push	{r4, r5}
 8000f34:	b09a      	sub	sp, #104	; 0x68
 8000f36:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000f3e:	6802      	ldr	r2, [r0, #0]
 8000f40:	4852      	ldr	r0, [pc, #328]	; (800108c <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 8000f42:	4282      	cmp	r2, r0
 8000f44:	d043      	beq.n	8000fce <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8000f46:	2000      	movs	r0, #0
 8000f48:	9001      	str	r0, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8000f4a:	9801      	ldr	r0, [sp, #4]
 8000f4c:	2800      	cmp	r0, #0
 8000f4e:	d042      	beq.n	8000fd6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f50:	6880      	ldr	r0, [r0, #8]
 8000f52:	f010 0f04 	tst.w	r0, #4
 8000f56:	d047      	beq.n	8000fe8 <HAL_ADCEx_MultiModeConfigChannel+0xc0>
 8000f58:	2401      	movs	r4, #1
 8000f5a:	6890      	ldr	r0, [r2, #8]
 8000f5c:	f010 0f04 	tst.w	r0, #4
 8000f60:	f040 8082 	bne.w	8001068 <HAL_ADCEx_MultiModeConfigChannel+0x140>
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 8000f64:	2c00      	cmp	r4, #0
 8000f66:	d17f      	bne.n	8001068 <HAL_ADCEx_MultiModeConfigChannel+0x140>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8000f68:	4c48      	ldr	r4, [pc, #288]	; (800108c <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 8000f6a:	4849      	ldr	r0, [pc, #292]	; (8001090 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	bf18      	it	ne
 8000f70:	42a2      	cmpne	r2, r4
 8000f72:	d13b      	bne.n	8000fec <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8000f74:	f500 7000 	add.w	r0, r0, #512	; 0x200

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8000f78:	680a      	ldr	r2, [r1, #0]
 8000f7a:	2a00      	cmp	r2, #0
 8000f7c:	d047      	beq.n	800100e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8000f7e:	6882      	ldr	r2, [r0, #8]
 8000f80:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8000f84:	684c      	ldr	r4, [r1, #4]
 8000f86:	4322      	orrs	r2, r4
 8000f88:	6082      	str	r2, [r0, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4d3f      	ldr	r5, [pc, #252]	; (800108c <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 8000f8e:	4c40      	ldr	r4, [pc, #256]	; (8001090 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 8000f90:	42a2      	cmp	r2, r4
 8000f92:	bf18      	it	ne
 8000f94:	42aa      	cmpne	r2, r5
 8000f96:	d12f      	bne.n	8000ff8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f98:	68aa      	ldr	r2, [r5, #8]
 8000f9a:	f012 0f01 	tst.w	r2, #1
 8000f9e:	d027      	beq.n	8000ff0 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
 8000fa0:	2401      	movs	r4, #1
 8000fa2:	4a3b      	ldr	r2, [pc, #236]	; (8001090 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 8000fa4:	6892      	ldr	r2, [r2, #8]
 8000fa6:	f012 0f01 	tst.w	r2, #1
 8000faa:	d023      	beq.n	8000ff4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8000fac:	2201      	movs	r2, #1
 8000fae:	4322      	orrs	r2, r4
 8000fb0:	bf0c      	ite	eq
 8000fb2:	2201      	moveq	r2, #1
 8000fb4:	2200      	movne	r2, #0
 8000fb6:	2a00      	cmp	r2, #0
 8000fb8:	d061      	beq.n	800107e <HAL_ADCEx_MultiModeConfigChannel+0x156>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8000fba:	6884      	ldr	r4, [r0, #8]
 8000fbc:	4a35      	ldr	r2, [pc, #212]	; (8001094 <HAL_ADCEx_MultiModeConfigChannel+0x16c>)
 8000fbe:	4022      	ands	r2, r4
 8000fc0:	680c      	ldr	r4, [r1, #0]
 8000fc2:	6889      	ldr	r1, [r1, #8]
 8000fc4:	4321      	orrs	r1, r4
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fca:	2000      	movs	r0, #0
 8000fcc:	e051      	b.n	8001072 <HAL_ADCEx_MultiModeConfigChannel+0x14a>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000fce:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8000fd2:	9001      	str	r0, [sp, #4]
 8000fd4:	e7b9      	b.n	8000f4a <HAL_ADCEx_MultiModeConfigChannel+0x22>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fd6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000fd8:	f042 0220 	orr.w	r2, r2, #32
 8000fdc:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	e047      	b.n	8001078 <HAL_ADCEx_MultiModeConfigChannel+0x150>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fe8:	2400      	movs	r4, #0
 8000fea:	e7b6      	b.n	8000f5a <HAL_ADCEx_MultiModeConfigChannel+0x32>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8000fec:	482a      	ldr	r0, [pc, #168]	; (8001098 <HAL_ADCEx_MultiModeConfigChannel+0x170>)
 8000fee:	e7c3      	b.n	8000f78 <HAL_ADCEx_MultiModeConfigChannel+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ff0:	2400      	movs	r4, #0
 8000ff2:	e7d6      	b.n	8000fa2 <HAL_ADCEx_MultiModeConfigChannel+0x7a>
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	e7da      	b.n	8000fae <HAL_ADCEx_MultiModeConfigChannel+0x86>
 8000ff8:	4a28      	ldr	r2, [pc, #160]	; (800109c <HAL_ADCEx_MultiModeConfigChannel+0x174>)
 8000ffa:	6892      	ldr	r2, [r2, #8]
 8000ffc:	f012 0f01 	tst.w	r2, #1
 8001000:	d003      	beq.n	800100a <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 8001002:	2201      	movs	r2, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001004:	f082 0201 	eor.w	r2, r2, #1
 8001008:	e7d5      	b.n	8000fb6 <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 800100a:	2200      	movs	r2, #0
 800100c:	e7fa      	b.n	8001004 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800100e:	6881      	ldr	r1, [r0, #8]
 8001010:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8001014:	6081      	str	r1, [r0, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001016:	6819      	ldr	r1, [r3, #0]
 8001018:	4d1c      	ldr	r5, [pc, #112]	; (800108c <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 800101a:	4c1d      	ldr	r4, [pc, #116]	; (8001090 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 800101c:	42a1      	cmp	r1, r4
 800101e:	bf18      	it	ne
 8001020:	42a9      	cmpne	r1, r5
 8001022:	d117      	bne.n	8001054 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
 8001024:	68a9      	ldr	r1, [r5, #8]
 8001026:	f011 0f01 	tst.w	r1, #1
 800102a:	d011      	beq.n	8001050 <HAL_ADCEx_MultiModeConfigChannel+0x128>
 800102c:	2401      	movs	r4, #1
 800102e:	4918      	ldr	r1, [pc, #96]	; (8001090 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 8001030:	6889      	ldr	r1, [r1, #8]
 8001032:	f011 0f01 	tst.w	r1, #1
 8001036:	d000      	beq.n	800103a <HAL_ADCEx_MultiModeConfigChannel+0x112>
 8001038:	2201      	movs	r2, #1
 800103a:	4322      	orrs	r2, r4
 800103c:	bf0c      	ite	eq
 800103e:	2201      	moveq	r2, #1
 8001040:	2200      	movne	r2, #0
 8001042:	b1f2      	cbz	r2, 8001082 <HAL_ADCEx_MultiModeConfigChannel+0x15a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001044:	6881      	ldr	r1, [r0, #8]
 8001046:	4a13      	ldr	r2, [pc, #76]	; (8001094 <HAL_ADCEx_MultiModeConfigChannel+0x16c>)
 8001048:	400a      	ands	r2, r1
 800104a:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800104c:	2000      	movs	r0, #0
 800104e:	e010      	b.n	8001072 <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 8001050:	4614      	mov	r4, r2
 8001052:	e7ec      	b.n	800102e <HAL_ADCEx_MultiModeConfigChannel+0x106>
 8001054:	4911      	ldr	r1, [pc, #68]	; (800109c <HAL_ADCEx_MultiModeConfigChannel+0x174>)
 8001056:	6889      	ldr	r1, [r1, #8]
 8001058:	f011 0f01 	tst.w	r1, #1
 800105c:	d000      	beq.n	8001060 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800105e:	2201      	movs	r2, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001060:	fab2 f282 	clz	r2, r2
 8001064:	0952      	lsrs	r2, r2, #5
 8001066:	e7ec      	b.n	8001042 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001068:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800106a:	f042 0220 	orr.w	r2, r2, #32
 800106e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001070:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8001078:	b01a      	add	sp, #104	; 0x68
 800107a:	bc30      	pop	{r4, r5}
 800107c:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800107e:	2000      	movs	r0, #0
 8001080:	e7f7      	b.n	8001072 <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 8001082:	2000      	movs	r0, #0
 8001084:	e7f5      	b.n	8001072 <HAL_ADCEx_MultiModeConfigChannel+0x14a>
  __HAL_LOCK(hadc);
 8001086:	2002      	movs	r0, #2
}
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40022000 	.word	0x40022000
 8001090:	40022100 	.word	0x40022100
 8001094:	fffff0e0 	.word	0xfffff0e0
 8001098:	58026300 	.word	0x58026300
 800109c:	58026000 	.word	0x58026000

080010a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a0:	4906      	ldr	r1, [pc, #24]	; (80010bc <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80010a2:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010a8:	041b      	lsls	r3, r3, #16
 80010aa:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ac:	0200      	lsls	r0, r0, #8
 80010ae:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80010b4:	4a02      	ldr	r2, [pc, #8]	; (80010c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80010b6:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80010b8:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00
 80010c0:	05fa0000 	.word	0x05fa0000

080010c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <HAL_NVIC_SetPriority+0x58>)
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ce:	f1c3 0407 	rsb	r4, r3, #7
 80010d2:	2c04      	cmp	r4, #4
 80010d4:	bf28      	it	cs
 80010d6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d8:	1d1d      	adds	r5, r3, #4
 80010da:	2d06      	cmp	r5, #6
 80010dc:	d914      	bls.n	8001108 <HAL_NVIC_SetPriority+0x44>
 80010de:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80010e4:	fa05 f404 	lsl.w	r4, r5, r4
 80010e8:	ea21 0104 	bic.w	r1, r1, r4
 80010ec:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ee:	fa05 f303 	lsl.w	r3, r5, r3
 80010f2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80010f8:	2800      	cmp	r0, #0
 80010fa:	db07      	blt.n	800110c <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	0109      	lsls	r1, r1, #4
 80010fe:	b2c9      	uxtb	r1, r1
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <HAL_NVIC_SetPriority+0x5c>)
 8001102:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001104:	bc30      	pop	{r4, r5}
 8001106:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001108:	2300      	movs	r3, #0
 800110a:	e7e9      	b.n	80010e0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110c:	f000 000f 	and.w	r0, r0, #15
 8001110:	0109      	lsls	r1, r1, #4
 8001112:	b2c9      	uxtb	r1, r1
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <HAL_NVIC_SetPriority+0x60>)
 8001116:	5419      	strb	r1, [r3, r0]
 8001118:	e7f4      	b.n	8001104 <HAL_NVIC_SetPriority+0x40>
 800111a:	bf00      	nop
 800111c:	e000ed00 	.word	0xe000ed00
 8001120:	e000e400 	.word	0xe000e400
 8001124:	e000ed14 	.word	0xe000ed14

08001128 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001128:	2800      	cmp	r0, #0
 800112a:	db07      	blt.n	800113c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112c:	f000 021f 	and.w	r2, r0, #31
 8001130:	0940      	lsrs	r0, r0, #5
 8001132:	2301      	movs	r3, #1
 8001134:	4093      	lsls	r3, r2
 8001136:	4a02      	ldr	r2, [pc, #8]	; (8001140 <HAL_NVIC_EnableIRQ+0x18>)
 8001138:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e100 	.word	0xe000e100

08001144 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001144:	3801      	subs	r0, #1
 8001146:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800114a:	d20a      	bcs.n	8001162 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_SYSTICK_Config+0x24>)
 800114e:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001150:	4a06      	ldr	r2, [pc, #24]	; (800116c <HAL_SYSTICK_Config+0x28>)
 8001152:	21f0      	movs	r1, #240	; 0xf0
 8001154:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001158:	2000      	movs	r0, #0
 800115a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115c:	2207      	movs	r2, #7
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001162:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000e010 	.word	0xe000e010
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8001170:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001174:	4a04      	ldr	r2, [pc, #16]	; (8001188 <HAL_MPU_Disable+0x18>)
 8001176:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800117c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800117e:	4b03      	ldr	r3, [pc, #12]	; (800118c <HAL_MPU_Disable+0x1c>)
 8001180:	2200      	movs	r2, #0
 8001182:	605a      	str	r2, [r3, #4]
}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000ed00 	.word	0xe000ed00
 800118c:	e000ed90 	.word	0xe000ed90

08001190 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001190:	f040 0001 	orr.w	r0, r0, #1
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <HAL_MPU_Enable+0x1c>)
 8001196:	6058      	str	r0, [r3, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001198:	4a05      	ldr	r2, [pc, #20]	; (80011b0 <HAL_MPU_Enable+0x20>)
 800119a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800119c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80011a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011a6:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80011aa:	4770      	bx	lr
 80011ac:	e000ed90 	.word	0xe000ed90
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80011b4:	7842      	ldrb	r2, [r0, #1]
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <HAL_MPU_ConfigRegion+0x50>)
 80011b8:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80011ba:	7803      	ldrb	r3, [r0, #0]
 80011bc:	b923      	cbnz	r3, 80011c8 <HAL_MPU_ConfigRegion+0x14>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_MPU_ConfigRegion+0x50>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80011c4:	611a      	str	r2, [r3, #16]
  }
}
 80011c6:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 80011c8:	6843      	ldr	r3, [r0, #4]
 80011ca:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <HAL_MPU_ConfigRegion+0x50>)
 80011cc:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011ce:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011d0:	7ac3      	ldrb	r3, [r0, #11]
 80011d2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011d4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011d8:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011da:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011de:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011e0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011e4:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011e6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011ea:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011f0:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011f2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011f6:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011f8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80011fc:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011fe:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001200:	6113      	str	r3, [r2, #16]
 8001202:	4770      	bx	lr
 8001204:	e000ed90 	.word	0xe000ed90

08001208 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001208:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800120a:	6d87      	ldr	r7, [r0, #88]	; 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800120c:	6804      	ldr	r4, [r0, #0]
 800120e:	4e65      	ldr	r6, [pc, #404]	; (80013a4 <DMA_SetConfig+0x19c>)
 8001210:	4d65      	ldr	r5, [pc, #404]	; (80013a8 <DMA_SetConfig+0x1a0>)
 8001212:	42ac      	cmp	r4, r5
 8001214:	bf18      	it	ne
 8001216:	42b4      	cmpne	r4, r6
 8001218:	d042      	beq.n	80012a0 <DMA_SetConfig+0x98>
 800121a:	3518      	adds	r5, #24
 800121c:	42ac      	cmp	r4, r5
 800121e:	d03f      	beq.n	80012a0 <DMA_SetConfig+0x98>
 8001220:	3518      	adds	r5, #24
 8001222:	42ac      	cmp	r4, r5
 8001224:	d03c      	beq.n	80012a0 <DMA_SetConfig+0x98>
 8001226:	3518      	adds	r5, #24
 8001228:	42ac      	cmp	r4, r5
 800122a:	d039      	beq.n	80012a0 <DMA_SetConfig+0x98>
 800122c:	3518      	adds	r5, #24
 800122e:	42ac      	cmp	r4, r5
 8001230:	d036      	beq.n	80012a0 <DMA_SetConfig+0x98>
 8001232:	3518      	adds	r5, #24
 8001234:	42ac      	cmp	r4, r5
 8001236:	d033      	beq.n	80012a0 <DMA_SetConfig+0x98>
 8001238:	3518      	adds	r5, #24
 800123a:	42ac      	cmp	r4, r5
 800123c:	d030      	beq.n	80012a0 <DMA_SetConfig+0x98>
 800123e:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8001242:	42ac      	cmp	r4, r5
 8001244:	d02c      	beq.n	80012a0 <DMA_SetConfig+0x98>
 8001246:	3518      	adds	r5, #24
 8001248:	42ac      	cmp	r4, r5
 800124a:	d029      	beq.n	80012a0 <DMA_SetConfig+0x98>
 800124c:	3518      	adds	r5, #24
 800124e:	42ac      	cmp	r4, r5
 8001250:	d026      	beq.n	80012a0 <DMA_SetConfig+0x98>
 8001252:	3518      	adds	r5, #24
 8001254:	42ac      	cmp	r4, r5
 8001256:	d023      	beq.n	80012a0 <DMA_SetConfig+0x98>
 8001258:	3518      	adds	r5, #24
 800125a:	42ac      	cmp	r4, r5
 800125c:	d020      	beq.n	80012a0 <DMA_SetConfig+0x98>
 800125e:	3518      	adds	r5, #24
 8001260:	42ac      	cmp	r4, r5
 8001262:	d01d      	beq.n	80012a0 <DMA_SetConfig+0x98>
 8001264:	3518      	adds	r5, #24
 8001266:	42ac      	cmp	r4, r5
 8001268:	d01a      	beq.n	80012a0 <DMA_SetConfig+0x98>
 800126a:	3518      	adds	r5, #24
 800126c:	42ac      	cmp	r4, r5
 800126e:	d017      	beq.n	80012a0 <DMA_SetConfig+0x98>
 8001270:	4d4e      	ldr	r5, [pc, #312]	; (80013ac <DMA_SetConfig+0x1a4>)
 8001272:	42ac      	cmp	r4, r5
 8001274:	d014      	beq.n	80012a0 <DMA_SetConfig+0x98>
 8001276:	3514      	adds	r5, #20
 8001278:	42ac      	cmp	r4, r5
 800127a:	d011      	beq.n	80012a0 <DMA_SetConfig+0x98>
 800127c:	3514      	adds	r5, #20
 800127e:	42ac      	cmp	r4, r5
 8001280:	d00e      	beq.n	80012a0 <DMA_SetConfig+0x98>
 8001282:	3514      	adds	r5, #20
 8001284:	42ac      	cmp	r4, r5
 8001286:	d00b      	beq.n	80012a0 <DMA_SetConfig+0x98>
 8001288:	3514      	adds	r5, #20
 800128a:	42ac      	cmp	r4, r5
 800128c:	d008      	beq.n	80012a0 <DMA_SetConfig+0x98>
 800128e:	3514      	adds	r5, #20
 8001290:	42ac      	cmp	r4, r5
 8001292:	d005      	beq.n	80012a0 <DMA_SetConfig+0x98>
 8001294:	3514      	adds	r5, #20
 8001296:	42ac      	cmp	r4, r5
 8001298:	d002      	beq.n	80012a0 <DMA_SetConfig+0x98>
 800129a:	3514      	adds	r5, #20
 800129c:	42ac      	cmp	r4, r5
 800129e:	d107      	bne.n	80012b0 <DMA_SetConfig+0xa8>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012a0:	6e44      	ldr	r4, [r0, #100]	; 0x64
 80012a2:	6e85      	ldr	r5, [r0, #104]	; 0x68
 80012a4:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80012a6:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 80012a8:	b114      	cbz	r4, 80012b0 <DMA_SetConfig+0xa8>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012aa:	6f04      	ldr	r4, [r0, #112]	; 0x70
 80012ac:	6f45      	ldr	r5, [r0, #116]	; 0x74
 80012ae:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80012b0:	6804      	ldr	r4, [r0, #0]
 80012b2:	4e3c      	ldr	r6, [pc, #240]	; (80013a4 <DMA_SetConfig+0x19c>)
 80012b4:	4d3c      	ldr	r5, [pc, #240]	; (80013a8 <DMA_SetConfig+0x1a0>)
 80012b6:	42ac      	cmp	r4, r5
 80012b8:	bf18      	it	ne
 80012ba:	42b4      	cmpne	r4, r6
 80012bc:	d052      	beq.n	8001364 <DMA_SetConfig+0x15c>
 80012be:	3518      	adds	r5, #24
 80012c0:	42ac      	cmp	r4, r5
 80012c2:	d04f      	beq.n	8001364 <DMA_SetConfig+0x15c>
 80012c4:	3518      	adds	r5, #24
 80012c6:	42ac      	cmp	r4, r5
 80012c8:	d04c      	beq.n	8001364 <DMA_SetConfig+0x15c>
 80012ca:	3518      	adds	r5, #24
 80012cc:	42ac      	cmp	r4, r5
 80012ce:	d049      	beq.n	8001364 <DMA_SetConfig+0x15c>
 80012d0:	3518      	adds	r5, #24
 80012d2:	42ac      	cmp	r4, r5
 80012d4:	d046      	beq.n	8001364 <DMA_SetConfig+0x15c>
 80012d6:	3518      	adds	r5, #24
 80012d8:	42ac      	cmp	r4, r5
 80012da:	d043      	beq.n	8001364 <DMA_SetConfig+0x15c>
 80012dc:	3518      	adds	r5, #24
 80012de:	42ac      	cmp	r4, r5
 80012e0:	d040      	beq.n	8001364 <DMA_SetConfig+0x15c>
 80012e2:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80012e6:	42ac      	cmp	r4, r5
 80012e8:	d03c      	beq.n	8001364 <DMA_SetConfig+0x15c>
 80012ea:	3518      	adds	r5, #24
 80012ec:	42ac      	cmp	r4, r5
 80012ee:	d039      	beq.n	8001364 <DMA_SetConfig+0x15c>
 80012f0:	3518      	adds	r5, #24
 80012f2:	42ac      	cmp	r4, r5
 80012f4:	d036      	beq.n	8001364 <DMA_SetConfig+0x15c>
 80012f6:	3518      	adds	r5, #24
 80012f8:	42ac      	cmp	r4, r5
 80012fa:	d033      	beq.n	8001364 <DMA_SetConfig+0x15c>
 80012fc:	3518      	adds	r5, #24
 80012fe:	42ac      	cmp	r4, r5
 8001300:	d030      	beq.n	8001364 <DMA_SetConfig+0x15c>
 8001302:	3518      	adds	r5, #24
 8001304:	42ac      	cmp	r4, r5
 8001306:	d02d      	beq.n	8001364 <DMA_SetConfig+0x15c>
 8001308:	3518      	adds	r5, #24
 800130a:	42ac      	cmp	r4, r5
 800130c:	d02a      	beq.n	8001364 <DMA_SetConfig+0x15c>
 800130e:	3518      	adds	r5, #24
 8001310:	42ac      	cmp	r4, r5
 8001312:	d027      	beq.n	8001364 <DMA_SetConfig+0x15c>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001314:	4e25      	ldr	r6, [pc, #148]	; (80013ac <DMA_SetConfig+0x1a4>)
 8001316:	4d26      	ldr	r5, [pc, #152]	; (80013b0 <DMA_SetConfig+0x1a8>)
 8001318:	42ac      	cmp	r4, r5
 800131a:	bf18      	it	ne
 800131c:	42b4      	cmpne	r4, r6
 800131e:	d011      	beq.n	8001344 <DMA_SetConfig+0x13c>
 8001320:	4d24      	ldr	r5, [pc, #144]	; (80013b4 <DMA_SetConfig+0x1ac>)
 8001322:	42ac      	cmp	r4, r5
 8001324:	d00e      	beq.n	8001344 <DMA_SetConfig+0x13c>
 8001326:	3514      	adds	r5, #20
 8001328:	42ac      	cmp	r4, r5
 800132a:	d00b      	beq.n	8001344 <DMA_SetConfig+0x13c>
 800132c:	3514      	adds	r5, #20
 800132e:	42ac      	cmp	r4, r5
 8001330:	d008      	beq.n	8001344 <DMA_SetConfig+0x13c>
 8001332:	3514      	adds	r5, #20
 8001334:	42ac      	cmp	r4, r5
 8001336:	d005      	beq.n	8001344 <DMA_SetConfig+0x13c>
 8001338:	3514      	adds	r5, #20
 800133a:	42ac      	cmp	r4, r5
 800133c:	d002      	beq.n	8001344 <DMA_SetConfig+0x13c>
 800133e:	3514      	adds	r5, #20
 8001340:	42ac      	cmp	r4, r5
 8001342:	d123      	bne.n	800138c <DMA_SetConfig+0x184>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001344:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8001346:	f004 051f 	and.w	r5, r4, #31
 800134a:	2401      	movs	r4, #1
 800134c:	40ac      	lsls	r4, r5
 800134e:	607c      	str	r4, [r7, #4]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8001350:	6804      	ldr	r4, [r0, #0]
 8001352:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001354:	6883      	ldr	r3, [r0, #8]
 8001356:	2b40      	cmp	r3, #64	; 0x40
 8001358:	d01f      	beq.n	800139a <DMA_SetConfig+0x192>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800135a:	6803      	ldr	r3, [r0, #0]
 800135c:	6099      	str	r1, [r3, #8]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800135e:	6803      	ldr	r3, [r0, #0]
 8001360:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8001362:	e013      	b.n	800138c <DMA_SetConfig+0x184>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001364:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8001366:	f004 051f 	and.w	r5, r4, #31
 800136a:	243f      	movs	r4, #63	; 0x3f
 800136c:	40ac      	lsls	r4, r5
 800136e:	60bc      	str	r4, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001370:	6805      	ldr	r5, [r0, #0]
 8001372:	682c      	ldr	r4, [r5, #0]
 8001374:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001378:	602c      	str	r4, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800137a:	6804      	ldr	r4, [r0, #0]
 800137c:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800137e:	6883      	ldr	r3, [r0, #8]
 8001380:	2b40      	cmp	r3, #64	; 0x40
 8001382:	d005      	beq.n	8001390 <DMA_SetConfig+0x188>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8001384:	6803      	ldr	r3, [r0, #0]
 8001386:	6099      	str	r1, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8001388:	6803      	ldr	r3, [r0, #0]
 800138a:	60da      	str	r2, [r3, #12]
}
 800138c:	bcf0      	pop	{r4, r5, r6, r7}
 800138e:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8001390:	6803      	ldr	r3, [r0, #0]
 8001392:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8001394:	6803      	ldr	r3, [r0, #0]
 8001396:	60d9      	str	r1, [r3, #12]
 8001398:	e7f8      	b.n	800138c <DMA_SetConfig+0x184>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800139a:	6803      	ldr	r3, [r0, #0]
 800139c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800139e:	6803      	ldr	r3, [r0, #0]
 80013a0:	60d9      	str	r1, [r3, #12]
 80013a2:	e7f3      	b.n	800138c <DMA_SetConfig+0x184>
 80013a4:	40020010 	.word	0x40020010
 80013a8:	40020028 	.word	0x40020028
 80013ac:	58025408 	.word	0x58025408
 80013b0:	5802541c 	.word	0x5802541c
 80013b4:	58025430 	.word	0x58025430

080013b8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80013b8:	6802      	ldr	r2, [r0, #0]
 80013ba:	4928      	ldr	r1, [pc, #160]	; (800145c <DMA_CalcBaseAndBitshift+0xa4>)
 80013bc:	4b28      	ldr	r3, [pc, #160]	; (8001460 <DMA_CalcBaseAndBitshift+0xa8>)
 80013be:	429a      	cmp	r2, r3
 80013c0:	bf18      	it	ne
 80013c2:	428a      	cmpne	r2, r1
 80013c4:	d02f      	beq.n	8001426 <DMA_CalcBaseAndBitshift+0x6e>
 80013c6:	3318      	adds	r3, #24
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d02c      	beq.n	8001426 <DMA_CalcBaseAndBitshift+0x6e>
 80013cc:	3318      	adds	r3, #24
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d029      	beq.n	8001426 <DMA_CalcBaseAndBitshift+0x6e>
 80013d2:	3318      	adds	r3, #24
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d026      	beq.n	8001426 <DMA_CalcBaseAndBitshift+0x6e>
 80013d8:	3318      	adds	r3, #24
 80013da:	429a      	cmp	r2, r3
 80013dc:	d023      	beq.n	8001426 <DMA_CalcBaseAndBitshift+0x6e>
 80013de:	3318      	adds	r3, #24
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d020      	beq.n	8001426 <DMA_CalcBaseAndBitshift+0x6e>
 80013e4:	3318      	adds	r3, #24
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d01d      	beq.n	8001426 <DMA_CalcBaseAndBitshift+0x6e>
 80013ea:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d019      	beq.n	8001426 <DMA_CalcBaseAndBitshift+0x6e>
 80013f2:	3318      	adds	r3, #24
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d016      	beq.n	8001426 <DMA_CalcBaseAndBitshift+0x6e>
 80013f8:	3318      	adds	r3, #24
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d013      	beq.n	8001426 <DMA_CalcBaseAndBitshift+0x6e>
 80013fe:	3318      	adds	r3, #24
 8001400:	429a      	cmp	r2, r3
 8001402:	d010      	beq.n	8001426 <DMA_CalcBaseAndBitshift+0x6e>
 8001404:	3318      	adds	r3, #24
 8001406:	429a      	cmp	r2, r3
 8001408:	d00d      	beq.n	8001426 <DMA_CalcBaseAndBitshift+0x6e>
 800140a:	3318      	adds	r3, #24
 800140c:	429a      	cmp	r2, r3
 800140e:	d00a      	beq.n	8001426 <DMA_CalcBaseAndBitshift+0x6e>
 8001410:	3318      	adds	r3, #24
 8001412:	429a      	cmp	r2, r3
 8001414:	d007      	beq.n	8001426 <DMA_CalcBaseAndBitshift+0x6e>
 8001416:	3318      	adds	r3, #24
 8001418:	429a      	cmp	r2, r3
 800141a:	d004      	beq.n	8001426 <DMA_CalcBaseAndBitshift+0x6e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800141c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001420:	6582      	str	r2, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 8001422:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001424:	4770      	bx	lr
{
 8001426:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001428:	b2d3      	uxtb	r3, r2
 800142a:	3b10      	subs	r3, #16
 800142c:	490d      	ldr	r1, [pc, #52]	; (8001464 <DMA_CalcBaseAndBitshift+0xac>)
 800142e:	fba1 1303 	umull	r1, r3, r1, r3
 8001432:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001434:	f003 0107 	and.w	r1, r3, #7
 8001438:	4c0b      	ldr	r4, [pc, #44]	; (8001468 <DMA_CalcBaseAndBitshift+0xb0>)
 800143a:	5c61      	ldrb	r1, [r4, r1]
 800143c:	65c1      	str	r1, [r0, #92]	; 0x5c
    if (stream_number > 3U)
 800143e:	2b03      	cmp	r3, #3
 8001440:	d806      	bhi.n	8001450 <DMA_CalcBaseAndBitshift+0x98>
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <DMA_CalcBaseAndBitshift+0xb4>)
 8001444:	4013      	ands	r3, r2
 8001446:	6583      	str	r3, [r0, #88]	; 0x58
}
 8001448:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800144a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800144e:	4770      	bx	lr
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <DMA_CalcBaseAndBitshift+0xb4>)
 8001452:	4013      	ands	r3, r2
 8001454:	3304      	adds	r3, #4
 8001456:	6583      	str	r3, [r0, #88]	; 0x58
 8001458:	e7f6      	b.n	8001448 <DMA_CalcBaseAndBitshift+0x90>
 800145a:	bf00      	nop
 800145c:	40020010 	.word	0x40020010
 8001460:	40020028 	.word	0x40020028
 8001464:	aaaaaaab 	.word	0xaaaaaaab
 8001468:	08009f7c 	.word	0x08009f7c
 800146c:	fffffc00 	.word	0xfffffc00

08001470 <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001470:	6983      	ldr	r3, [r0, #24]
 8001472:	b99b      	cbnz	r3, 800149c <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 8001474:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001476:	2b01      	cmp	r3, #1
 8001478:	d00a      	beq.n	8001490 <DMA_CheckFifoParam+0x20>
 800147a:	b11b      	cbz	r3, 8001484 <DMA_CheckFifoParam+0x14>
 800147c:	2b02      	cmp	r3, #2
 800147e:	d001      	beq.n	8001484 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8001480:	2000      	movs	r0, #0
 8001482:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001484:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001486:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800148a:	d12e      	bne.n	80014ea <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 800148c:	2000      	movs	r0, #0
 800148e:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001490:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001492:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001496:	d02a      	beq.n	80014ee <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001498:	2000      	movs	r0, #0
 800149a:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800149c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014a0:	d006      	beq.n	80014b0 <DMA_CheckFifoParam+0x40>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80014a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d92a      	bls.n	80014fe <DMA_CheckFifoParam+0x8e>
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	d016      	beq.n	80014da <DMA_CheckFifoParam+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
 80014ac:	2000      	movs	r0, #0
 80014ae:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 80014b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d803      	bhi.n	80014be <DMA_CheckFifoParam+0x4e>
 80014b6:	e8df f003 	tbb	[pc, r3]
 80014ba:	041c      	.short	0x041c
 80014bc:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 80014be:	2000      	movs	r0, #0
 80014c0:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80014c4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80014c8:	d115      	bne.n	80014f6 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 80014ca:	2000      	movs	r0, #0
 80014cc:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014ce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80014d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014d4:	d011      	beq.n	80014fa <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 80014d6:	2000      	movs	r0, #0
 80014d8:	4770      	bx	lr
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80014dc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80014e0:	d001      	beq.n	80014e6 <DMA_CheckFifoParam+0x76>
        {
          status = HAL_ERROR;
 80014e2:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 80014e4:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 80014e6:	2000      	movs	r0, #0
 80014e8:	4770      	bx	lr
          status = HAL_ERROR;
 80014ea:	2001      	movs	r0, #1
 80014ec:	4770      	bx	lr
          status = HAL_ERROR;
 80014ee:	2001      	movs	r0, #1
 80014f0:	4770      	bx	lr
        status = HAL_ERROR;
 80014f2:	2001      	movs	r0, #1
 80014f4:	4770      	bx	lr
          status = HAL_ERROR;
 80014f6:	2001      	movs	r0, #1
 80014f8:	4770      	bx	lr
          status = HAL_ERROR;
 80014fa:	2001      	movs	r0, #1
 80014fc:	4770      	bx	lr
        status = HAL_ERROR;
 80014fe:	2001      	movs	r0, #1
 8001500:	4770      	bx	lr
	...

08001504 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8001504:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001506:	4922      	ldr	r1, [pc, #136]	; (8001590 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001508:	4a22      	ldr	r2, [pc, #136]	; (8001594 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 800150a:	4293      	cmp	r3, r2
 800150c:	bf18      	it	ne
 800150e:	428b      	cmpne	r3, r1
 8001510:	d028      	beq.n	8001564 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001512:	3214      	adds	r2, #20
 8001514:	4293      	cmp	r3, r2
 8001516:	d025      	beq.n	8001564 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001518:	3214      	adds	r2, #20
 800151a:	4293      	cmp	r3, r2
 800151c:	d022      	beq.n	8001564 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 800151e:	3214      	adds	r2, #20
 8001520:	4293      	cmp	r3, r2
 8001522:	d01f      	beq.n	8001564 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001524:	3214      	adds	r2, #20
 8001526:	4293      	cmp	r3, r2
 8001528:	d01c      	beq.n	8001564 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 800152a:	3214      	adds	r2, #20
 800152c:	4293      	cmp	r3, r2
 800152e:	d019      	beq.n	8001564 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001530:	3214      	adds	r2, #20
 8001532:	4293      	cmp	r3, r2
 8001534:	d016      	beq.n	8001564 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001536:	b2da      	uxtb	r2, r3
 8001538:	3a10      	subs	r2, #16
 800153a:	4917      	ldr	r1, [pc, #92]	; (8001598 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
 800153c:	fba1 1202 	umull	r1, r2, r1, r2
 8001540:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001542:	4916      	ldr	r1, [pc, #88]	; (800159c <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
 8001544:	4419      	add	r1, r3
 8001546:	29a8      	cmp	r1, #168	; 0xa8
 8001548:	d91f      	bls.n	800158a <DMA_CalcDMAMUXChannelBaseAndMask+0x86>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
 800154c:	4413      	add	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	6603      	str	r3, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001552:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8001554:	6643      	str	r3, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001556:	f002 021f 	and.w	r2, r2, #31
 800155a:	2301      	movs	r3, #1
 800155c:	fa03 f202 	lsl.w	r2, r3, r2
 8001560:	6682      	str	r2, [r0, #104]	; 0x68
  }
}
 8001562:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001564:	b2db      	uxtb	r3, r3
 8001566:	3b08      	subs	r3, #8
 8001568:	4a0f      	ldr	r2, [pc, #60]	; (80015a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 800156a:	fba2 2303 	umull	r2, r3, r2, r3
 800156e:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001570:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8001572:	441a      	add	r2, r3
 8001574:	0092      	lsls	r2, r2, #2
 8001576:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001578:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 800157a:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800157c:	f003 031f 	and.w	r3, r3, #31
 8001580:	2201      	movs	r2, #1
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	6683      	str	r3, [r0, #104]	; 0x68
 8001588:	4770      	bx	lr
      stream_number += 8U;
 800158a:	3208      	adds	r2, #8
 800158c:	e7dd      	b.n	800154a <DMA_CalcDMAMUXChannelBaseAndMask+0x46>
 800158e:	bf00      	nop
 8001590:	58025408 	.word	0x58025408
 8001594:	5802541c 	.word	0x5802541c
 8001598:	aaaaaaab 	.word	0xaaaaaaab
 800159c:	bffdfbf0 	.word	0xbffdfbf0
 80015a0:	10008200 	.word	0x10008200
 80015a4:	40020880 	.word	0x40020880
 80015a8:	cccccccd 	.word	0xcccccccd
 80015ac:	16009600 	.word	0x16009600
 80015b0:	58025880 	.word	0x58025880

080015b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80015b4:	7901      	ldrb	r1, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80015b6:	1e4a      	subs	r2, r1, #1
 80015b8:	2a07      	cmp	r2, #7
 80015ba:	d82c      	bhi.n	8001616 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x62>
{
 80015bc:	b430      	push	{r4, r5}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80015be:	6803      	ldr	r3, [r0, #0]
 80015c0:	4d15      	ldr	r5, [pc, #84]	; (8001618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 80015c2:	4c16      	ldr	r4, [pc, #88]	; (800161c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 80015c4:	42a3      	cmp	r3, r4
 80015c6:	bf18      	it	ne
 80015c8:	42ab      	cmpne	r3, r5
 80015ca:	d018      	beq.n	80015fe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80015cc:	3414      	adds	r4, #20
 80015ce:	42a3      	cmp	r3, r4
 80015d0:	d015      	beq.n	80015fe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80015d2:	3414      	adds	r4, #20
 80015d4:	42a3      	cmp	r3, r4
 80015d6:	d012      	beq.n	80015fe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80015d8:	3414      	adds	r4, #20
 80015da:	42a3      	cmp	r3, r4
 80015dc:	d00f      	beq.n	80015fe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80015de:	3414      	adds	r4, #20
 80015e0:	42a3      	cmp	r3, r4
 80015e2:	d00c      	beq.n	80015fe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80015e4:	3414      	adds	r4, #20
 80015e6:	42a3      	cmp	r3, r4
 80015e8:	d009      	beq.n	80015fe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80015ea:	3414      	adds	r4, #20
 80015ec:	42a3      	cmp	r3, r4
 80015ee:	d006      	beq.n	80015fe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 80015f2:	440b      	add	r3, r1
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>)
 80015fa:	6703      	str	r3, [r0, #112]	; 0x70
 80015fc:	e005      	b.n	800160a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x56>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80015fe:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 8001600:	440b      	add	r3, r1
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
 8001608:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800160a:	2301      	movs	r3, #1
 800160c:	fa03 f202 	lsl.w	r2, r3, r2
 8001610:	6742      	str	r2, [r0, #116]	; 0x74
  }
}
 8001612:	bc30      	pop	{r4, r5}
 8001614:	4770      	bx	lr
 8001616:	4770      	bx	lr
 8001618:	58025408 	.word	0x58025408
 800161c:	5802541c 	.word	0x5802541c
 8001620:	1000823f 	.word	0x1000823f
 8001624:	40020940 	.word	0x40020940
 8001628:	1600963f 	.word	0x1600963f
 800162c:	58025940 	.word	0x58025940

08001630 <HAL_DMA_Init>:
{
 8001630:	b570      	push	{r4, r5, r6, lr}
 8001632:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001634:	f7fe feb0 	bl	8000398 <HAL_GetTick>
  if(hdma == NULL)
 8001638:	2c00      	cmp	r4, #0
 800163a:	f000 81bd 	beq.w	80019b8 <HAL_DMA_Init+0x388>
 800163e:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001640:	6823      	ldr	r3, [r4, #0]
 8001642:	49b7      	ldr	r1, [pc, #732]	; (8001920 <HAL_DMA_Init+0x2f0>)
 8001644:	4ab7      	ldr	r2, [pc, #732]	; (8001924 <HAL_DMA_Init+0x2f4>)
 8001646:	4293      	cmp	r3, r2
 8001648:	bf18      	it	ne
 800164a:	428b      	cmpne	r3, r1
 800164c:	bf0c      	ite	eq
 800164e:	2201      	moveq	r2, #1
 8001650:	2200      	movne	r2, #0
 8001652:	d050      	beq.n	80016f6 <HAL_DMA_Init+0xc6>
 8001654:	3130      	adds	r1, #48	; 0x30
 8001656:	428b      	cmp	r3, r1
 8001658:	d04d      	beq.n	80016f6 <HAL_DMA_Init+0xc6>
 800165a:	3118      	adds	r1, #24
 800165c:	428b      	cmp	r3, r1
 800165e:	d04a      	beq.n	80016f6 <HAL_DMA_Init+0xc6>
 8001660:	3118      	adds	r1, #24
 8001662:	428b      	cmp	r3, r1
 8001664:	d047      	beq.n	80016f6 <HAL_DMA_Init+0xc6>
 8001666:	3118      	adds	r1, #24
 8001668:	428b      	cmp	r3, r1
 800166a:	d044      	beq.n	80016f6 <HAL_DMA_Init+0xc6>
 800166c:	3118      	adds	r1, #24
 800166e:	428b      	cmp	r3, r1
 8001670:	d041      	beq.n	80016f6 <HAL_DMA_Init+0xc6>
 8001672:	3118      	adds	r1, #24
 8001674:	428b      	cmp	r3, r1
 8001676:	d03e      	beq.n	80016f6 <HAL_DMA_Init+0xc6>
 8001678:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800167c:	428b      	cmp	r3, r1
 800167e:	d03a      	beq.n	80016f6 <HAL_DMA_Init+0xc6>
 8001680:	3118      	adds	r1, #24
 8001682:	428b      	cmp	r3, r1
 8001684:	d037      	beq.n	80016f6 <HAL_DMA_Init+0xc6>
 8001686:	3118      	adds	r1, #24
 8001688:	428b      	cmp	r3, r1
 800168a:	d034      	beq.n	80016f6 <HAL_DMA_Init+0xc6>
 800168c:	3118      	adds	r1, #24
 800168e:	428b      	cmp	r3, r1
 8001690:	d031      	beq.n	80016f6 <HAL_DMA_Init+0xc6>
 8001692:	3118      	adds	r1, #24
 8001694:	428b      	cmp	r3, r1
 8001696:	d02e      	beq.n	80016f6 <HAL_DMA_Init+0xc6>
 8001698:	3118      	adds	r1, #24
 800169a:	428b      	cmp	r3, r1
 800169c:	d02b      	beq.n	80016f6 <HAL_DMA_Init+0xc6>
 800169e:	3118      	adds	r1, #24
 80016a0:	428b      	cmp	r3, r1
 80016a2:	d028      	beq.n	80016f6 <HAL_DMA_Init+0xc6>
 80016a4:	3118      	adds	r1, #24
 80016a6:	428b      	cmp	r3, r1
 80016a8:	d025      	beq.n	80016f6 <HAL_DMA_Init+0xc6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80016aa:	499f      	ldr	r1, [pc, #636]	; (8001928 <HAL_DMA_Init+0x2f8>)
 80016ac:	4a9f      	ldr	r2, [pc, #636]	; (800192c <HAL_DMA_Init+0x2fc>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	bf18      	it	ne
 80016b2:	428b      	cmpne	r3, r1
 80016b4:	f000 8124 	beq.w	8001900 <HAL_DMA_Init+0x2d0>
 80016b8:	4a9d      	ldr	r2, [pc, #628]	; (8001930 <HAL_DMA_Init+0x300>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	f000 8120 	beq.w	8001900 <HAL_DMA_Init+0x2d0>
 80016c0:	3214      	adds	r2, #20
 80016c2:	4293      	cmp	r3, r2
 80016c4:	f000 811c 	beq.w	8001900 <HAL_DMA_Init+0x2d0>
 80016c8:	3214      	adds	r2, #20
 80016ca:	4293      	cmp	r3, r2
 80016cc:	f000 8118 	beq.w	8001900 <HAL_DMA_Init+0x2d0>
 80016d0:	3214      	adds	r2, #20
 80016d2:	4293      	cmp	r3, r2
 80016d4:	f000 8114 	beq.w	8001900 <HAL_DMA_Init+0x2d0>
 80016d8:	3214      	adds	r2, #20
 80016da:	4293      	cmp	r3, r2
 80016dc:	f000 8110 	beq.w	8001900 <HAL_DMA_Init+0x2d0>
 80016e0:	3214      	adds	r2, #20
 80016e2:	4293      	cmp	r3, r2
 80016e4:	f000 810c 	beq.w	8001900 <HAL_DMA_Init+0x2d0>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016e8:	2340      	movs	r3, #64	; 0x40
 80016ea:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80016ec:	2303      	movs	r3, #3
 80016ee:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 80016f2:	2001      	movs	r0, #1
 80016f4:	e04a      	b.n	800178c <HAL_DMA_Init+0x15c>
    __HAL_UNLOCK(hdma);
 80016f6:	2100      	movs	r1, #0
 80016f8:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 80016fc:	2102      	movs	r1, #2
 80016fe:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001702:	bb7a      	cbnz	r2, 8001764 <HAL_DMA_Init+0x134>
 8001704:	4a8b      	ldr	r2, [pc, #556]	; (8001934 <HAL_DMA_Init+0x304>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d02c      	beq.n	8001764 <HAL_DMA_Init+0x134>
 800170a:	3218      	adds	r2, #24
 800170c:	4293      	cmp	r3, r2
 800170e:	d029      	beq.n	8001764 <HAL_DMA_Init+0x134>
 8001710:	3218      	adds	r2, #24
 8001712:	4293      	cmp	r3, r2
 8001714:	d026      	beq.n	8001764 <HAL_DMA_Init+0x134>
 8001716:	3218      	adds	r2, #24
 8001718:	4293      	cmp	r3, r2
 800171a:	d023      	beq.n	8001764 <HAL_DMA_Init+0x134>
 800171c:	3218      	adds	r2, #24
 800171e:	4293      	cmp	r3, r2
 8001720:	d020      	beq.n	8001764 <HAL_DMA_Init+0x134>
 8001722:	3218      	adds	r2, #24
 8001724:	4293      	cmp	r3, r2
 8001726:	d01d      	beq.n	8001764 <HAL_DMA_Init+0x134>
 8001728:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800172c:	4293      	cmp	r3, r2
 800172e:	d019      	beq.n	8001764 <HAL_DMA_Init+0x134>
 8001730:	3218      	adds	r2, #24
 8001732:	4293      	cmp	r3, r2
 8001734:	d016      	beq.n	8001764 <HAL_DMA_Init+0x134>
 8001736:	3218      	adds	r2, #24
 8001738:	4293      	cmp	r3, r2
 800173a:	d013      	beq.n	8001764 <HAL_DMA_Init+0x134>
 800173c:	3218      	adds	r2, #24
 800173e:	4293      	cmp	r3, r2
 8001740:	d010      	beq.n	8001764 <HAL_DMA_Init+0x134>
 8001742:	3218      	adds	r2, #24
 8001744:	4293      	cmp	r3, r2
 8001746:	d00d      	beq.n	8001764 <HAL_DMA_Init+0x134>
 8001748:	3218      	adds	r2, #24
 800174a:	4293      	cmp	r3, r2
 800174c:	d00a      	beq.n	8001764 <HAL_DMA_Init+0x134>
 800174e:	3218      	adds	r2, #24
 8001750:	4293      	cmp	r3, r2
 8001752:	d007      	beq.n	8001764 <HAL_DMA_Init+0x134>
 8001754:	3218      	adds	r2, #24
 8001756:	4293      	cmp	r3, r2
 8001758:	d004      	beq.n	8001764 <HAL_DMA_Init+0x134>
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	f022 0201 	bic.w	r2, r2, #1
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	e003      	b.n	800176c <HAL_DMA_Init+0x13c>
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	f022 0201 	bic.w	r2, r2, #1
 800176a:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800176c:	6823      	ldr	r3, [r4, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	f012 0f01 	tst.w	r2, #1
 8001774:	d00b      	beq.n	800178e <HAL_DMA_Init+0x15e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001776:	f7fe fe0f 	bl	8000398 <HAL_GetTick>
 800177a:	1b40      	subs	r0, r0, r5
 800177c:	2805      	cmp	r0, #5
 800177e:	d9f5      	bls.n	800176c <HAL_DMA_Init+0x13c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001780:	2320      	movs	r3, #32
 8001782:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8001784:	2303      	movs	r3, #3
 8001786:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 800178a:	2001      	movs	r0, #1
}
 800178c:	bd70      	pop	{r4, r5, r6, pc}
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800178e:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001790:	4869      	ldr	r0, [pc, #420]	; (8001938 <HAL_DMA_Init+0x308>)
 8001792:	4010      	ands	r0, r2
    registerValue |=  hdma->Init.Direction           |
 8001794:	68a1      	ldr	r1, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001796:	68e2      	ldr	r2, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 8001798:	430a      	orrs	r2, r1
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800179a:	6921      	ldr	r1, [r4, #16]
 800179c:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800179e:	6961      	ldr	r1, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a0:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a2:	69a1      	ldr	r1, [r4, #24]
 80017a4:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 80017a6:	69e1      	ldr	r1, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a8:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 80017aa:	6a21      	ldr	r1, [r4, #32]
 80017ac:	430a      	orrs	r2, r1
    registerValue |=  hdma->Init.Direction           |
 80017ae:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80017b2:	2904      	cmp	r1, #4
 80017b4:	f000 8099 	beq.w	80018ea <HAL_DMA_Init+0x2ba>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80017b8:	4960      	ldr	r1, [pc, #384]	; (800193c <HAL_DMA_Init+0x30c>)
 80017ba:	6808      	ldr	r0, [r1, #0]
 80017bc:	4960      	ldr	r1, [pc, #384]	; (8001940 <HAL_DMA_Init+0x310>)
 80017be:	4001      	ands	r1, r0
 80017c0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80017c4:	d311      	bcc.n	80017ea <HAL_DMA_Init+0x1ba>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80017c6:	6861      	ldr	r1, [r4, #4]
 80017c8:	f1a1 0529 	sub.w	r5, r1, #41	; 0x29
 80017cc:	f1a1 003f 	sub.w	r0, r1, #63	; 0x3f
 80017d0:	2803      	cmp	r0, #3
 80017d2:	bf88      	it	hi
 80017d4:	2d05      	cmphi	r5, #5
 80017d6:	d906      	bls.n	80017e6 <HAL_DMA_Init+0x1b6>
 80017d8:	f1a1 0047 	sub.w	r0, r1, #71	; 0x47
 80017dc:	2801      	cmp	r0, #1
 80017de:	d902      	bls.n	80017e6 <HAL_DMA_Init+0x1b6>
 80017e0:	394f      	subs	r1, #79	; 0x4f
 80017e2:	2903      	cmp	r1, #3
 80017e4:	d801      	bhi.n	80017ea <HAL_DMA_Init+0x1ba>
        registerValue |= DMA_SxCR_TRBUFF;
 80017e6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80017ea:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80017ec:	6826      	ldr	r6, [r4, #0]
 80017ee:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017f0:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 80017f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017f6:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d108      	bne.n	800180e <HAL_DMA_Init+0x1de>
      registerValue |= hdma->Init.FIFOThreshold;
 80017fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017fe:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001800:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001802:	b123      	cbz	r3, 800180e <HAL_DMA_Init+0x1de>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001804:	4620      	mov	r0, r4
 8001806:	f7ff fe33 	bl	8001470 <DMA_CheckFifoParam>
 800180a:	2800      	cmp	r0, #0
 800180c:	d172      	bne.n	80018f4 <HAL_DMA_Init+0x2c4>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800180e:	6175      	str	r5, [r6, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001810:	4620      	mov	r0, r4
 8001812:	f7ff fdd1 	bl	80013b8 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001816:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001818:	f003 021f 	and.w	r2, r3, #31
 800181c:	233f      	movs	r3, #63	; 0x3f
 800181e:	4093      	lsls	r3, r2
 8001820:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001822:	6823      	ldr	r3, [r4, #0]
 8001824:	493e      	ldr	r1, [pc, #248]	; (8001920 <HAL_DMA_Init+0x2f0>)
 8001826:	4a3f      	ldr	r2, [pc, #252]	; (8001924 <HAL_DMA_Init+0x2f4>)
 8001828:	4293      	cmp	r3, r2
 800182a:	bf18      	it	ne
 800182c:	428b      	cmpne	r3, r1
 800182e:	d042      	beq.n	80018b6 <HAL_DMA_Init+0x286>
 8001830:	3218      	adds	r2, #24
 8001832:	4293      	cmp	r3, r2
 8001834:	d03f      	beq.n	80018b6 <HAL_DMA_Init+0x286>
 8001836:	3218      	adds	r2, #24
 8001838:	4293      	cmp	r3, r2
 800183a:	d03c      	beq.n	80018b6 <HAL_DMA_Init+0x286>
 800183c:	3218      	adds	r2, #24
 800183e:	4293      	cmp	r3, r2
 8001840:	d039      	beq.n	80018b6 <HAL_DMA_Init+0x286>
 8001842:	3218      	adds	r2, #24
 8001844:	4293      	cmp	r3, r2
 8001846:	d036      	beq.n	80018b6 <HAL_DMA_Init+0x286>
 8001848:	3218      	adds	r2, #24
 800184a:	4293      	cmp	r3, r2
 800184c:	d033      	beq.n	80018b6 <HAL_DMA_Init+0x286>
 800184e:	3218      	adds	r2, #24
 8001850:	4293      	cmp	r3, r2
 8001852:	d030      	beq.n	80018b6 <HAL_DMA_Init+0x286>
 8001854:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001858:	4293      	cmp	r3, r2
 800185a:	d02c      	beq.n	80018b6 <HAL_DMA_Init+0x286>
 800185c:	3218      	adds	r2, #24
 800185e:	4293      	cmp	r3, r2
 8001860:	d029      	beq.n	80018b6 <HAL_DMA_Init+0x286>
 8001862:	3218      	adds	r2, #24
 8001864:	4293      	cmp	r3, r2
 8001866:	d026      	beq.n	80018b6 <HAL_DMA_Init+0x286>
 8001868:	3218      	adds	r2, #24
 800186a:	4293      	cmp	r3, r2
 800186c:	d023      	beq.n	80018b6 <HAL_DMA_Init+0x286>
 800186e:	3218      	adds	r2, #24
 8001870:	4293      	cmp	r3, r2
 8001872:	d020      	beq.n	80018b6 <HAL_DMA_Init+0x286>
 8001874:	3218      	adds	r2, #24
 8001876:	4293      	cmp	r3, r2
 8001878:	d01d      	beq.n	80018b6 <HAL_DMA_Init+0x286>
 800187a:	3218      	adds	r2, #24
 800187c:	4293      	cmp	r3, r2
 800187e:	d01a      	beq.n	80018b6 <HAL_DMA_Init+0x286>
 8001880:	3218      	adds	r2, #24
 8001882:	4293      	cmp	r3, r2
 8001884:	d017      	beq.n	80018b6 <HAL_DMA_Init+0x286>
 8001886:	4a28      	ldr	r2, [pc, #160]	; (8001928 <HAL_DMA_Init+0x2f8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d014      	beq.n	80018b6 <HAL_DMA_Init+0x286>
 800188c:	3214      	adds	r2, #20
 800188e:	4293      	cmp	r3, r2
 8001890:	d011      	beq.n	80018b6 <HAL_DMA_Init+0x286>
 8001892:	3214      	adds	r2, #20
 8001894:	4293      	cmp	r3, r2
 8001896:	d00e      	beq.n	80018b6 <HAL_DMA_Init+0x286>
 8001898:	3214      	adds	r2, #20
 800189a:	4293      	cmp	r3, r2
 800189c:	d00b      	beq.n	80018b6 <HAL_DMA_Init+0x286>
 800189e:	3214      	adds	r2, #20
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d008      	beq.n	80018b6 <HAL_DMA_Init+0x286>
 80018a4:	3214      	adds	r2, #20
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d005      	beq.n	80018b6 <HAL_DMA_Init+0x286>
 80018aa:	3214      	adds	r2, #20
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d002      	beq.n	80018b6 <HAL_DMA_Init+0x286>
 80018b0:	3214      	adds	r2, #20
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d113      	bne.n	80018de <HAL_DMA_Init+0x2ae>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80018b6:	4620      	mov	r0, r4
 80018b8:	f7ff fe24 	bl	8001504 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80018bc:	68a3      	ldr	r3, [r4, #8]
 80018be:	2b80      	cmp	r3, #128	; 0x80
 80018c0:	d06d      	beq.n	800199e <HAL_DMA_Init+0x36e>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80018c2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80018c4:	7922      	ldrb	r2, [r4, #4]
 80018c6:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80018ca:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80018cc:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80018ce:	6863      	ldr	r3, [r4, #4]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	2b07      	cmp	r3, #7
 80018d4:	d966      	bls.n	80019a4 <HAL_DMA_Init+0x374>
      hdma->DMAmuxRequestGen = 0U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	66e3      	str	r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80018da:	6723      	str	r3, [r4, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80018dc:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018de:	2000      	movs	r0, #0
 80018e0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80018e2:	2301      	movs	r3, #1
 80018e4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80018e8:	e750      	b.n	800178c <HAL_DMA_Init+0x15c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018ea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80018ec:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80018ee:	4301      	orrs	r1, r0
 80018f0:	430a      	orrs	r2, r1
 80018f2:	e761      	b.n	80017b8 <HAL_DMA_Init+0x188>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018f4:	2340      	movs	r3, #64	; 0x40
 80018f6:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80018f8:	2001      	movs	r0, #1
 80018fa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          return HAL_ERROR;
 80018fe:	e745      	b.n	800178c <HAL_DMA_Init+0x15c>
    __HAL_UNLOCK(hdma);
 8001900:	2200      	movs	r2, #0
 8001902:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8001906:	2202      	movs	r2, #2
 8001908:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800190c:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800190e:	490d      	ldr	r1, [pc, #52]	; (8001944 <HAL_DMA_Init+0x314>)
 8001910:	4011      	ands	r1, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001912:	68a2      	ldr	r2, [r4, #8]
 8001914:	2a40      	cmp	r2, #64	; 0x40
 8001916:	d01a      	beq.n	800194e <HAL_DMA_Init+0x31e>
 8001918:	2a80      	cmp	r2, #128	; 0x80
 800191a:	d015      	beq.n	8001948 <HAL_DMA_Init+0x318>
 800191c:	2200      	movs	r2, #0
 800191e:	e017      	b.n	8001950 <HAL_DMA_Init+0x320>
 8001920:	40020010 	.word	0x40020010
 8001924:	40020028 	.word	0x40020028
 8001928:	58025408 	.word	0x58025408
 800192c:	5802541c 	.word	0x5802541c
 8001930:	58025430 	.word	0x58025430
 8001934:	40020040 	.word	0x40020040
 8001938:	fe10803f 	.word	0xfe10803f
 800193c:	5c001000 	.word	0x5c001000
 8001940:	ffff0000 	.word	0xffff0000
 8001944:	fffe000f 	.word	0xfffe000f
 8001948:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800194c:	e000      	b.n	8001950 <HAL_DMA_Init+0x320>
 800194e:	2210      	movs	r2, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001950:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001952:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001956:	6920      	ldr	r0, [r4, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001958:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800195c:	6960      	ldr	r0, [r4, #20]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800195e:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001962:	69a0      	ldr	r0, [r4, #24]
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001964:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001968:	69e0      	ldr	r0, [r4, #28]
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800196a:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800196e:	6a20      	ldr	r0, [r4, #32]
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001970:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001974:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001976:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001978:	6822      	ldr	r2, [r4, #0]
 800197a:	4b10      	ldr	r3, [pc, #64]	; (80019bc <HAL_DMA_Init+0x38c>)
 800197c:	4413      	add	r3, r2
 800197e:	4a10      	ldr	r2, [pc, #64]	; (80019c0 <HAL_DMA_Init+0x390>)
 8001980:	fba2 2303 	umull	r2, r3, r2, r3
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800198a:	4620      	mov	r0, r4
 800198c:	f7ff fd14 	bl	80013b8 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001990:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001992:	f003 021f 	and.w	r2, r3, #31
 8001996:	2301      	movs	r3, #1
 8001998:	4093      	lsls	r3, r2
 800199a:	6043      	str	r3, [r0, #4]
 800199c:	e741      	b.n	8001822 <HAL_DMA_Init+0x1f2>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800199e:	2300      	movs	r3, #0
 80019a0:	6063      	str	r3, [r4, #4]
 80019a2:	e78e      	b.n	80018c2 <HAL_DMA_Init+0x292>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80019a4:	4620      	mov	r0, r4
 80019a6:	f7ff fe05 	bl	80015b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80019aa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019b0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80019b2:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	e792      	b.n	80018de <HAL_DMA_Init+0x2ae>
    return HAL_ERROR;
 80019b8:	2001      	movs	r0, #1
 80019ba:	e6e7      	b.n	800178c <HAL_DMA_Init+0x15c>
 80019bc:	a7fdabf8 	.word	0xa7fdabf8
 80019c0:	cccccccd 	.word	0xcccccccd

080019c4 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 80019c4:	2800      	cmp	r0, #0
 80019c6:	f000 813e 	beq.w	8001c46 <HAL_DMA_Start_IT+0x282>
{
 80019ca:	b570      	push	{r4, r5, r6, lr}
 80019cc:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80019ce:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80019d2:	2801      	cmp	r0, #1
 80019d4:	f000 8139 	beq.w	8001c4a <HAL_DMA_Start_IT+0x286>
 80019d8:	2001      	movs	r0, #1
 80019da:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80019de:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 80019e2:	b2c0      	uxtb	r0, r0
 80019e4:	2801      	cmp	r0, #1
 80019e6:	d007      	beq.n	80019f8 <HAL_DMA_Start_IT+0x34>
    __HAL_UNLOCK(hdma);
 80019e8:	2300      	movs	r3, #0
 80019ea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80019ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019f2:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 80019f4:	2001      	movs	r0, #1
}
 80019f6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80019f8:	2002      	movs	r0, #2
 80019fa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019fe:	2000      	movs	r0, #0
 8001a00:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8001a02:	6820      	ldr	r0, [r4, #0]
 8001a04:	4e92      	ldr	r6, [pc, #584]	; (8001c50 <HAL_DMA_Start_IT+0x28c>)
 8001a06:	4d93      	ldr	r5, [pc, #588]	; (8001c54 <HAL_DMA_Start_IT+0x290>)
 8001a08:	42a8      	cmp	r0, r5
 8001a0a:	bf18      	it	ne
 8001a0c:	42b0      	cmpne	r0, r6
 8001a0e:	d02f      	beq.n	8001a70 <HAL_DMA_Start_IT+0xac>
 8001a10:	3518      	adds	r5, #24
 8001a12:	42a8      	cmp	r0, r5
 8001a14:	d02c      	beq.n	8001a70 <HAL_DMA_Start_IT+0xac>
 8001a16:	3518      	adds	r5, #24
 8001a18:	42a8      	cmp	r0, r5
 8001a1a:	d029      	beq.n	8001a70 <HAL_DMA_Start_IT+0xac>
 8001a1c:	3518      	adds	r5, #24
 8001a1e:	42a8      	cmp	r0, r5
 8001a20:	d026      	beq.n	8001a70 <HAL_DMA_Start_IT+0xac>
 8001a22:	3518      	adds	r5, #24
 8001a24:	42a8      	cmp	r0, r5
 8001a26:	d023      	beq.n	8001a70 <HAL_DMA_Start_IT+0xac>
 8001a28:	3518      	adds	r5, #24
 8001a2a:	42a8      	cmp	r0, r5
 8001a2c:	d020      	beq.n	8001a70 <HAL_DMA_Start_IT+0xac>
 8001a2e:	3518      	adds	r5, #24
 8001a30:	42a8      	cmp	r0, r5
 8001a32:	d01d      	beq.n	8001a70 <HAL_DMA_Start_IT+0xac>
 8001a34:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8001a38:	42a8      	cmp	r0, r5
 8001a3a:	d019      	beq.n	8001a70 <HAL_DMA_Start_IT+0xac>
 8001a3c:	3518      	adds	r5, #24
 8001a3e:	42a8      	cmp	r0, r5
 8001a40:	d016      	beq.n	8001a70 <HAL_DMA_Start_IT+0xac>
 8001a42:	3518      	adds	r5, #24
 8001a44:	42a8      	cmp	r0, r5
 8001a46:	d013      	beq.n	8001a70 <HAL_DMA_Start_IT+0xac>
 8001a48:	3518      	adds	r5, #24
 8001a4a:	42a8      	cmp	r0, r5
 8001a4c:	d010      	beq.n	8001a70 <HAL_DMA_Start_IT+0xac>
 8001a4e:	3518      	adds	r5, #24
 8001a50:	42a8      	cmp	r0, r5
 8001a52:	d00d      	beq.n	8001a70 <HAL_DMA_Start_IT+0xac>
 8001a54:	3518      	adds	r5, #24
 8001a56:	42a8      	cmp	r0, r5
 8001a58:	d00a      	beq.n	8001a70 <HAL_DMA_Start_IT+0xac>
 8001a5a:	3518      	adds	r5, #24
 8001a5c:	42a8      	cmp	r0, r5
 8001a5e:	d007      	beq.n	8001a70 <HAL_DMA_Start_IT+0xac>
 8001a60:	3518      	adds	r5, #24
 8001a62:	42a8      	cmp	r0, r5
 8001a64:	d004      	beq.n	8001a70 <HAL_DMA_Start_IT+0xac>
 8001a66:	6805      	ldr	r5, [r0, #0]
 8001a68:	f025 0501 	bic.w	r5, r5, #1
 8001a6c:	6005      	str	r5, [r0, #0]
 8001a6e:	e003      	b.n	8001a78 <HAL_DMA_Start_IT+0xb4>
 8001a70:	6805      	ldr	r5, [r0, #0]
 8001a72:	f025 0501 	bic.w	r5, r5, #1
 8001a76:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f7ff fbc5 	bl	8001208 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a7e:	6823      	ldr	r3, [r4, #0]
 8001a80:	4973      	ldr	r1, [pc, #460]	; (8001c50 <HAL_DMA_Start_IT+0x28c>)
 8001a82:	4a74      	ldr	r2, [pc, #464]	; (8001c54 <HAL_DMA_Start_IT+0x290>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	bf18      	it	ne
 8001a88:	428b      	cmpne	r3, r1
 8001a8a:	d038      	beq.n	8001afe <HAL_DMA_Start_IT+0x13a>
 8001a8c:	3218      	adds	r2, #24
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d035      	beq.n	8001afe <HAL_DMA_Start_IT+0x13a>
 8001a92:	3218      	adds	r2, #24
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d032      	beq.n	8001afe <HAL_DMA_Start_IT+0x13a>
 8001a98:	3218      	adds	r2, #24
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d02f      	beq.n	8001afe <HAL_DMA_Start_IT+0x13a>
 8001a9e:	3218      	adds	r2, #24
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d02c      	beq.n	8001afe <HAL_DMA_Start_IT+0x13a>
 8001aa4:	3218      	adds	r2, #24
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d029      	beq.n	8001afe <HAL_DMA_Start_IT+0x13a>
 8001aaa:	3218      	adds	r2, #24
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d026      	beq.n	8001afe <HAL_DMA_Start_IT+0x13a>
 8001ab0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d022      	beq.n	8001afe <HAL_DMA_Start_IT+0x13a>
 8001ab8:	3218      	adds	r2, #24
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d01f      	beq.n	8001afe <HAL_DMA_Start_IT+0x13a>
 8001abe:	3218      	adds	r2, #24
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d01c      	beq.n	8001afe <HAL_DMA_Start_IT+0x13a>
 8001ac4:	3218      	adds	r2, #24
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d019      	beq.n	8001afe <HAL_DMA_Start_IT+0x13a>
 8001aca:	3218      	adds	r2, #24
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d016      	beq.n	8001afe <HAL_DMA_Start_IT+0x13a>
 8001ad0:	3218      	adds	r2, #24
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d013      	beq.n	8001afe <HAL_DMA_Start_IT+0x13a>
 8001ad6:	3218      	adds	r2, #24
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d010      	beq.n	8001afe <HAL_DMA_Start_IT+0x13a>
 8001adc:	3218      	adds	r2, #24
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d00d      	beq.n	8001afe <HAL_DMA_Start_IT+0x13a>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	f022 020e 	bic.w	r2, r2, #14
 8001ae8:	f042 020a 	orr.w	r2, r2, #10
 8001aec:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001aee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001af0:	b193      	cbz	r3, 8001b18 <HAL_DMA_Start_IT+0x154>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001af2:	6822      	ldr	r2, [r4, #0]
 8001af4:	6813      	ldr	r3, [r2, #0]
 8001af6:	f043 0304 	orr.w	r3, r3, #4
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	e00c      	b.n	8001b18 <HAL_DMA_Start_IT+0x154>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	f022 021e 	bic.w	r2, r2, #30
 8001b04:	f042 0216 	orr.w	r2, r2, #22
 8001b08:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001b0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b0c:	b123      	cbz	r3, 8001b18 <HAL_DMA_Start_IT+0x154>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001b0e:	6822      	ldr	r2, [r4, #0]
 8001b10:	6813      	ldr	r3, [r2, #0]
 8001b12:	f043 0308 	orr.w	r3, r3, #8
 8001b16:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b18:	6823      	ldr	r3, [r4, #0]
 8001b1a:	494d      	ldr	r1, [pc, #308]	; (8001c50 <HAL_DMA_Start_IT+0x28c>)
 8001b1c:	4a4d      	ldr	r2, [pc, #308]	; (8001c54 <HAL_DMA_Start_IT+0x290>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	bf18      	it	ne
 8001b22:	428b      	cmpne	r3, r1
 8001b24:	d042      	beq.n	8001bac <HAL_DMA_Start_IT+0x1e8>
 8001b26:	3218      	adds	r2, #24
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d03f      	beq.n	8001bac <HAL_DMA_Start_IT+0x1e8>
 8001b2c:	3218      	adds	r2, #24
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d03c      	beq.n	8001bac <HAL_DMA_Start_IT+0x1e8>
 8001b32:	3218      	adds	r2, #24
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d039      	beq.n	8001bac <HAL_DMA_Start_IT+0x1e8>
 8001b38:	3218      	adds	r2, #24
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d036      	beq.n	8001bac <HAL_DMA_Start_IT+0x1e8>
 8001b3e:	3218      	adds	r2, #24
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d033      	beq.n	8001bac <HAL_DMA_Start_IT+0x1e8>
 8001b44:	3218      	adds	r2, #24
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d030      	beq.n	8001bac <HAL_DMA_Start_IT+0x1e8>
 8001b4a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d02c      	beq.n	8001bac <HAL_DMA_Start_IT+0x1e8>
 8001b52:	3218      	adds	r2, #24
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d029      	beq.n	8001bac <HAL_DMA_Start_IT+0x1e8>
 8001b58:	3218      	adds	r2, #24
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d026      	beq.n	8001bac <HAL_DMA_Start_IT+0x1e8>
 8001b5e:	3218      	adds	r2, #24
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d023      	beq.n	8001bac <HAL_DMA_Start_IT+0x1e8>
 8001b64:	3218      	adds	r2, #24
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d020      	beq.n	8001bac <HAL_DMA_Start_IT+0x1e8>
 8001b6a:	3218      	adds	r2, #24
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d01d      	beq.n	8001bac <HAL_DMA_Start_IT+0x1e8>
 8001b70:	3218      	adds	r2, #24
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d01a      	beq.n	8001bac <HAL_DMA_Start_IT+0x1e8>
 8001b76:	3218      	adds	r2, #24
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d017      	beq.n	8001bac <HAL_DMA_Start_IT+0x1e8>
 8001b7c:	4a36      	ldr	r2, [pc, #216]	; (8001c58 <HAL_DMA_Start_IT+0x294>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d014      	beq.n	8001bac <HAL_DMA_Start_IT+0x1e8>
 8001b82:	3214      	adds	r2, #20
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d011      	beq.n	8001bac <HAL_DMA_Start_IT+0x1e8>
 8001b88:	3214      	adds	r2, #20
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d00e      	beq.n	8001bac <HAL_DMA_Start_IT+0x1e8>
 8001b8e:	3214      	adds	r2, #20
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d00b      	beq.n	8001bac <HAL_DMA_Start_IT+0x1e8>
 8001b94:	3214      	adds	r2, #20
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d008      	beq.n	8001bac <HAL_DMA_Start_IT+0x1e8>
 8001b9a:	3214      	adds	r2, #20
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d005      	beq.n	8001bac <HAL_DMA_Start_IT+0x1e8>
 8001ba0:	3214      	adds	r2, #20
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d002      	beq.n	8001bac <HAL_DMA_Start_IT+0x1e8>
 8001ba6:	3214      	adds	r2, #20
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d10e      	bne.n	8001bca <HAL_DMA_Start_IT+0x206>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001bac:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001bb4:	d003      	beq.n	8001bbe <HAL_DMA_Start_IT+0x1fa>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bbc:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8001bbe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001bc0:	b11b      	cbz	r3, 8001bca <HAL_DMA_Start_IT+0x206>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bc8:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8001bca:	6823      	ldr	r3, [r4, #0]
 8001bcc:	4920      	ldr	r1, [pc, #128]	; (8001c50 <HAL_DMA_Start_IT+0x28c>)
 8001bce:	4a21      	ldr	r2, [pc, #132]	; (8001c54 <HAL_DMA_Start_IT+0x290>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	bf18      	it	ne
 8001bd4:	428b      	cmpne	r3, r1
 8001bd6:	d030      	beq.n	8001c3a <HAL_DMA_Start_IT+0x276>
 8001bd8:	3218      	adds	r2, #24
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d02d      	beq.n	8001c3a <HAL_DMA_Start_IT+0x276>
 8001bde:	3218      	adds	r2, #24
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d02a      	beq.n	8001c3a <HAL_DMA_Start_IT+0x276>
 8001be4:	3218      	adds	r2, #24
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d027      	beq.n	8001c3a <HAL_DMA_Start_IT+0x276>
 8001bea:	3218      	adds	r2, #24
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d024      	beq.n	8001c3a <HAL_DMA_Start_IT+0x276>
 8001bf0:	3218      	adds	r2, #24
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d021      	beq.n	8001c3a <HAL_DMA_Start_IT+0x276>
 8001bf6:	3218      	adds	r2, #24
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d01e      	beq.n	8001c3a <HAL_DMA_Start_IT+0x276>
 8001bfc:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d01a      	beq.n	8001c3a <HAL_DMA_Start_IT+0x276>
 8001c04:	3218      	adds	r2, #24
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d017      	beq.n	8001c3a <HAL_DMA_Start_IT+0x276>
 8001c0a:	3218      	adds	r2, #24
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d014      	beq.n	8001c3a <HAL_DMA_Start_IT+0x276>
 8001c10:	3218      	adds	r2, #24
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d011      	beq.n	8001c3a <HAL_DMA_Start_IT+0x276>
 8001c16:	3218      	adds	r2, #24
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d00e      	beq.n	8001c3a <HAL_DMA_Start_IT+0x276>
 8001c1c:	3218      	adds	r2, #24
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d00b      	beq.n	8001c3a <HAL_DMA_Start_IT+0x276>
 8001c22:	3218      	adds	r2, #24
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d008      	beq.n	8001c3a <HAL_DMA_Start_IT+0x276>
 8001c28:	3218      	adds	r2, #24
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d005      	beq.n	8001c3a <HAL_DMA_Start_IT+0x276>
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	f042 0201 	orr.w	r2, r2, #1
 8001c34:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c36:	2000      	movs	r0, #0
 8001c38:	e6dd      	b.n	80019f6 <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_ENABLE(hdma);
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	f042 0201 	orr.w	r2, r2, #1
 8001c40:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c42:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001c44:	e6d7      	b.n	80019f6 <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 8001c46:	2001      	movs	r0, #1
}
 8001c48:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8001c4a:	2002      	movs	r0, #2
 8001c4c:	e6d3      	b.n	80019f6 <HAL_DMA_Start_IT+0x32>
 8001c4e:	bf00      	nop
 8001c50:	40020010 	.word	0x40020010
 8001c54:	40020028 	.word	0x40020028
 8001c58:	58025408 	.word	0x58025408

08001c5c <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8001c5c:	2800      	cmp	r0, #0
 8001c5e:	f000 813a 	beq.w	8001ed6 <HAL_DMA_Abort_IT+0x27a>
{
 8001c62:	b508      	push	{r3, lr}
 8001c64:	4602      	mov	r2, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c66:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d003      	beq.n	8001c78 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001c74:	2001      	movs	r0, #1
}
 8001c76:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c78:	6803      	ldr	r3, [r0, #0]
 8001c7a:	4899      	ldr	r0, [pc, #612]	; (8001ee0 <HAL_DMA_Abort_IT+0x284>)
 8001c7c:	4999      	ldr	r1, [pc, #612]	; (8001ee4 <HAL_DMA_Abort_IT+0x288>)
 8001c7e:	428b      	cmp	r3, r1
 8001c80:	bf18      	it	ne
 8001c82:	4283      	cmpne	r3, r0
 8001c84:	bf0c      	ite	eq
 8001c86:	2101      	moveq	r1, #1
 8001c88:	2100      	movne	r1, #0
 8001c8a:	f000 80e4 	beq.w	8001e56 <HAL_DMA_Abort_IT+0x1fa>
 8001c8e:	3030      	adds	r0, #48	; 0x30
 8001c90:	4283      	cmp	r3, r0
 8001c92:	f000 80e0 	beq.w	8001e56 <HAL_DMA_Abort_IT+0x1fa>
 8001c96:	3018      	adds	r0, #24
 8001c98:	4283      	cmp	r3, r0
 8001c9a:	f000 80dc 	beq.w	8001e56 <HAL_DMA_Abort_IT+0x1fa>
 8001c9e:	3018      	adds	r0, #24
 8001ca0:	4283      	cmp	r3, r0
 8001ca2:	f000 80d8 	beq.w	8001e56 <HAL_DMA_Abort_IT+0x1fa>
 8001ca6:	3018      	adds	r0, #24
 8001ca8:	4283      	cmp	r3, r0
 8001caa:	f000 80d4 	beq.w	8001e56 <HAL_DMA_Abort_IT+0x1fa>
 8001cae:	3018      	adds	r0, #24
 8001cb0:	4283      	cmp	r3, r0
 8001cb2:	f000 80d0 	beq.w	8001e56 <HAL_DMA_Abort_IT+0x1fa>
 8001cb6:	3018      	adds	r0, #24
 8001cb8:	4283      	cmp	r3, r0
 8001cba:	f000 80cc 	beq.w	8001e56 <HAL_DMA_Abort_IT+0x1fa>
 8001cbe:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8001cc2:	4283      	cmp	r3, r0
 8001cc4:	f000 80c7 	beq.w	8001e56 <HAL_DMA_Abort_IT+0x1fa>
 8001cc8:	3018      	adds	r0, #24
 8001cca:	4283      	cmp	r3, r0
 8001ccc:	f000 80c3 	beq.w	8001e56 <HAL_DMA_Abort_IT+0x1fa>
 8001cd0:	3018      	adds	r0, #24
 8001cd2:	4283      	cmp	r3, r0
 8001cd4:	f000 80bf 	beq.w	8001e56 <HAL_DMA_Abort_IT+0x1fa>
 8001cd8:	3018      	adds	r0, #24
 8001cda:	4283      	cmp	r3, r0
 8001cdc:	f000 80bb 	beq.w	8001e56 <HAL_DMA_Abort_IT+0x1fa>
 8001ce0:	3018      	adds	r0, #24
 8001ce2:	4283      	cmp	r3, r0
 8001ce4:	f000 80b7 	beq.w	8001e56 <HAL_DMA_Abort_IT+0x1fa>
 8001ce8:	3018      	adds	r0, #24
 8001cea:	4283      	cmp	r3, r0
 8001cec:	f000 80b3 	beq.w	8001e56 <HAL_DMA_Abort_IT+0x1fa>
 8001cf0:	3018      	adds	r0, #24
 8001cf2:	4283      	cmp	r3, r0
 8001cf4:	f000 80af 	beq.w	8001e56 <HAL_DMA_Abort_IT+0x1fa>
 8001cf8:	3018      	adds	r0, #24
 8001cfa:	4283      	cmp	r3, r0
 8001cfc:	f000 80ab 	beq.w	8001e56 <HAL_DMA_Abort_IT+0x1fa>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d00:	6819      	ldr	r1, [r3, #0]
 8001d02:	f021 010e 	bic.w	r1, r1, #14
 8001d06:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8001d08:	6813      	ldr	r3, [r2, #0]
 8001d0a:	f5a0 6095 	sub.w	r0, r0, #1192	; 0x4a8
 8001d0e:	4975      	ldr	r1, [pc, #468]	; (8001ee4 <HAL_DMA_Abort_IT+0x288>)
 8001d10:	428b      	cmp	r3, r1
 8001d12:	bf18      	it	ne
 8001d14:	4283      	cmpne	r3, r0
 8001d16:	d02b      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x114>
 8001d18:	4973      	ldr	r1, [pc, #460]	; (8001ee8 <HAL_DMA_Abort_IT+0x28c>)
 8001d1a:	428b      	cmp	r3, r1
 8001d1c:	d028      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x114>
 8001d1e:	3118      	adds	r1, #24
 8001d20:	428b      	cmp	r3, r1
 8001d22:	d025      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x114>
 8001d24:	3118      	adds	r1, #24
 8001d26:	428b      	cmp	r3, r1
 8001d28:	d022      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x114>
 8001d2a:	3118      	adds	r1, #24
 8001d2c:	428b      	cmp	r3, r1
 8001d2e:	d01f      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x114>
 8001d30:	3118      	adds	r1, #24
 8001d32:	428b      	cmp	r3, r1
 8001d34:	d01c      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x114>
 8001d36:	3118      	adds	r1, #24
 8001d38:	428b      	cmp	r3, r1
 8001d3a:	d019      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x114>
 8001d3c:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8001d40:	428b      	cmp	r3, r1
 8001d42:	d015      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x114>
 8001d44:	3118      	adds	r1, #24
 8001d46:	428b      	cmp	r3, r1
 8001d48:	d012      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x114>
 8001d4a:	3118      	adds	r1, #24
 8001d4c:	428b      	cmp	r3, r1
 8001d4e:	d00f      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x114>
 8001d50:	3118      	adds	r1, #24
 8001d52:	428b      	cmp	r3, r1
 8001d54:	d00c      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x114>
 8001d56:	3118      	adds	r1, #24
 8001d58:	428b      	cmp	r3, r1
 8001d5a:	d009      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x114>
 8001d5c:	3118      	adds	r1, #24
 8001d5e:	428b      	cmp	r3, r1
 8001d60:	d006      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x114>
 8001d62:	3118      	adds	r1, #24
 8001d64:	428b      	cmp	r3, r1
 8001d66:	d003      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x114>
 8001d68:	3118      	adds	r1, #24
 8001d6a:	428b      	cmp	r3, r1
 8001d6c:	f040 80ae 	bne.w	8001ecc <HAL_DMA_Abort_IT+0x270>
 8001d70:	6819      	ldr	r1, [r3, #0]
 8001d72:	f021 0101 	bic.w	r1, r1, #1
 8001d76:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d78:	6813      	ldr	r3, [r2, #0]
 8001d7a:	4859      	ldr	r0, [pc, #356]	; (8001ee0 <HAL_DMA_Abort_IT+0x284>)
 8001d7c:	4959      	ldr	r1, [pc, #356]	; (8001ee4 <HAL_DMA_Abort_IT+0x288>)
 8001d7e:	428b      	cmp	r3, r1
 8001d80:	bf18      	it	ne
 8001d82:	4283      	cmpne	r3, r0
 8001d84:	d042      	beq.n	8001e0c <HAL_DMA_Abort_IT+0x1b0>
 8001d86:	3118      	adds	r1, #24
 8001d88:	428b      	cmp	r3, r1
 8001d8a:	d03f      	beq.n	8001e0c <HAL_DMA_Abort_IT+0x1b0>
 8001d8c:	3118      	adds	r1, #24
 8001d8e:	428b      	cmp	r3, r1
 8001d90:	d03c      	beq.n	8001e0c <HAL_DMA_Abort_IT+0x1b0>
 8001d92:	3118      	adds	r1, #24
 8001d94:	428b      	cmp	r3, r1
 8001d96:	d039      	beq.n	8001e0c <HAL_DMA_Abort_IT+0x1b0>
 8001d98:	3118      	adds	r1, #24
 8001d9a:	428b      	cmp	r3, r1
 8001d9c:	d036      	beq.n	8001e0c <HAL_DMA_Abort_IT+0x1b0>
 8001d9e:	3118      	adds	r1, #24
 8001da0:	428b      	cmp	r3, r1
 8001da2:	d033      	beq.n	8001e0c <HAL_DMA_Abort_IT+0x1b0>
 8001da4:	3118      	adds	r1, #24
 8001da6:	428b      	cmp	r3, r1
 8001da8:	d030      	beq.n	8001e0c <HAL_DMA_Abort_IT+0x1b0>
 8001daa:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8001dae:	428b      	cmp	r3, r1
 8001db0:	d02c      	beq.n	8001e0c <HAL_DMA_Abort_IT+0x1b0>
 8001db2:	3118      	adds	r1, #24
 8001db4:	428b      	cmp	r3, r1
 8001db6:	d029      	beq.n	8001e0c <HAL_DMA_Abort_IT+0x1b0>
 8001db8:	3118      	adds	r1, #24
 8001dba:	428b      	cmp	r3, r1
 8001dbc:	d026      	beq.n	8001e0c <HAL_DMA_Abort_IT+0x1b0>
 8001dbe:	3118      	adds	r1, #24
 8001dc0:	428b      	cmp	r3, r1
 8001dc2:	d023      	beq.n	8001e0c <HAL_DMA_Abort_IT+0x1b0>
 8001dc4:	3118      	adds	r1, #24
 8001dc6:	428b      	cmp	r3, r1
 8001dc8:	d020      	beq.n	8001e0c <HAL_DMA_Abort_IT+0x1b0>
 8001dca:	3118      	adds	r1, #24
 8001dcc:	428b      	cmp	r3, r1
 8001dce:	d01d      	beq.n	8001e0c <HAL_DMA_Abort_IT+0x1b0>
 8001dd0:	3118      	adds	r1, #24
 8001dd2:	428b      	cmp	r3, r1
 8001dd4:	d01a      	beq.n	8001e0c <HAL_DMA_Abort_IT+0x1b0>
 8001dd6:	3118      	adds	r1, #24
 8001dd8:	428b      	cmp	r3, r1
 8001dda:	d017      	beq.n	8001e0c <HAL_DMA_Abort_IT+0x1b0>
 8001ddc:	4943      	ldr	r1, [pc, #268]	; (8001eec <HAL_DMA_Abort_IT+0x290>)
 8001dde:	428b      	cmp	r3, r1
 8001de0:	d014      	beq.n	8001e0c <HAL_DMA_Abort_IT+0x1b0>
 8001de2:	3114      	adds	r1, #20
 8001de4:	428b      	cmp	r3, r1
 8001de6:	d011      	beq.n	8001e0c <HAL_DMA_Abort_IT+0x1b0>
 8001de8:	3114      	adds	r1, #20
 8001dea:	428b      	cmp	r3, r1
 8001dec:	d00e      	beq.n	8001e0c <HAL_DMA_Abort_IT+0x1b0>
 8001dee:	3114      	adds	r1, #20
 8001df0:	428b      	cmp	r3, r1
 8001df2:	d00b      	beq.n	8001e0c <HAL_DMA_Abort_IT+0x1b0>
 8001df4:	3114      	adds	r1, #20
 8001df6:	428b      	cmp	r3, r1
 8001df8:	d008      	beq.n	8001e0c <HAL_DMA_Abort_IT+0x1b0>
 8001dfa:	3114      	adds	r1, #20
 8001dfc:	428b      	cmp	r3, r1
 8001dfe:	d005      	beq.n	8001e0c <HAL_DMA_Abort_IT+0x1b0>
 8001e00:	3114      	adds	r1, #20
 8001e02:	428b      	cmp	r3, r1
 8001e04:	d002      	beq.n	8001e0c <HAL_DMA_Abort_IT+0x1b0>
 8001e06:	3114      	adds	r1, #20
 8001e08:	428b      	cmp	r3, r1
 8001e0a:	d117      	bne.n	8001e3c <HAL_DMA_Abort_IT+0x1e0>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e0c:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001e0e:	680b      	ldr	r3, [r1, #0]
 8001e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e14:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e16:	6d90      	ldr	r0, [r2, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e18:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8001e1a:	f003 011f 	and.w	r1, r3, #31
 8001e1e:	2301      	movs	r3, #1
 8001e20:	408b      	lsls	r3, r1
 8001e22:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e24:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8001e26:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8001e28:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8001e2a:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 8001e2c:	b133      	cbz	r3, 8001e3c <HAL_DMA_Abort_IT+0x1e0>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e2e:	6819      	ldr	r1, [r3, #0]
 8001e30:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001e34:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e36:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001e38:	6f51      	ldr	r1, [r2, #116]	; 0x74
 8001e3a:	6059      	str	r1, [r3, #4]
      __HAL_UNLOCK(hdma);
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001e42:	2301      	movs	r3, #1
 8001e44:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8001e48:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d045      	beq.n	8001eda <HAL_DMA_Abort_IT+0x27e>
 8001e4e:	4610      	mov	r0, r2
        hdma->XferAbortCallback(hdma);
 8001e50:	4798      	blx	r3
  return HAL_OK;
 8001e52:	2000      	movs	r0, #0
 8001e54:	e70f      	b.n	8001c76 <HAL_DMA_Abort_IT+0x1a>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e56:	2004      	movs	r0, #4
 8001e58:	f882 0035 	strb.w	r0, [r2, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001e5c:	bb81      	cbnz	r1, 8001ec0 <HAL_DMA_Abort_IT+0x264>
 8001e5e:	4a22      	ldr	r2, [pc, #136]	; (8001ee8 <HAL_DMA_Abort_IT+0x28c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d02d      	beq.n	8001ec0 <HAL_DMA_Abort_IT+0x264>
 8001e64:	3218      	adds	r2, #24
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d02a      	beq.n	8001ec0 <HAL_DMA_Abort_IT+0x264>
 8001e6a:	3218      	adds	r2, #24
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d027      	beq.n	8001ec0 <HAL_DMA_Abort_IT+0x264>
 8001e70:	3218      	adds	r2, #24
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d024      	beq.n	8001ec0 <HAL_DMA_Abort_IT+0x264>
 8001e76:	3218      	adds	r2, #24
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d021      	beq.n	8001ec0 <HAL_DMA_Abort_IT+0x264>
 8001e7c:	3218      	adds	r2, #24
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d01e      	beq.n	8001ec0 <HAL_DMA_Abort_IT+0x264>
 8001e82:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d01a      	beq.n	8001ec0 <HAL_DMA_Abort_IT+0x264>
 8001e8a:	3218      	adds	r2, #24
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d017      	beq.n	8001ec0 <HAL_DMA_Abort_IT+0x264>
 8001e90:	3218      	adds	r2, #24
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d014      	beq.n	8001ec0 <HAL_DMA_Abort_IT+0x264>
 8001e96:	3218      	adds	r2, #24
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d011      	beq.n	8001ec0 <HAL_DMA_Abort_IT+0x264>
 8001e9c:	3218      	adds	r2, #24
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d00e      	beq.n	8001ec0 <HAL_DMA_Abort_IT+0x264>
 8001ea2:	3218      	adds	r2, #24
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d00b      	beq.n	8001ec0 <HAL_DMA_Abort_IT+0x264>
 8001ea8:	3218      	adds	r2, #24
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d008      	beq.n	8001ec0 <HAL_DMA_Abort_IT+0x264>
 8001eae:	3218      	adds	r2, #24
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d005      	beq.n	8001ec0 <HAL_DMA_Abort_IT+0x264>
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	f022 0201 	bic.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	e6da      	b.n	8001c76 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	f022 0201 	bic.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001ec8:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 8001eca:	e6d4      	b.n	8001c76 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8001ecc:	6819      	ldr	r1, [r3, #0]
 8001ece:	f021 0101 	bic.w	r1, r1, #1
 8001ed2:	6019      	str	r1, [r3, #0]
 8001ed4:	e750      	b.n	8001d78 <HAL_DMA_Abort_IT+0x11c>
    return HAL_ERROR;
 8001ed6:	2001      	movs	r0, #1
}
 8001ed8:	4770      	bx	lr
  return HAL_OK;
 8001eda:	2000      	movs	r0, #0
 8001edc:	e6cb      	b.n	8001c76 <HAL_DMA_Abort_IT+0x1a>
 8001ede:	bf00      	nop
 8001ee0:	40020010 	.word	0x40020010
 8001ee4:	40020028 	.word	0x40020028
 8001ee8:	40020040 	.word	0x40020040
 8001eec:	58025408 	.word	0x58025408

08001ef0 <HAL_DMA_IRQHandler>:
{
 8001ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001efa:	4ba2      	ldr	r3, [pc, #648]	; (8002184 <HAL_DMA_IRQHandler+0x294>)
 8001efc:	681d      	ldr	r5, [r3, #0]
 8001efe:	4ba2      	ldr	r3, [pc, #648]	; (8002188 <HAL_DMA_IRQHandler+0x298>)
 8001f00:	fba3 3505 	umull	r3, r5, r3, r5
 8001f04:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f06:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr_dma  = regs_dma->ISR;
 8001f08:	683e      	ldr	r6, [r7, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8001f0a:	f8d7 c000 	ldr.w	ip, [r7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001f0e:	6803      	ldr	r3, [r0, #0]
 8001f10:	499e      	ldr	r1, [pc, #632]	; (800218c <HAL_DMA_IRQHandler+0x29c>)
 8001f12:	489f      	ldr	r0, [pc, #636]	; (8002190 <HAL_DMA_IRQHandler+0x2a0>)
 8001f14:	4283      	cmp	r3, r0
 8001f16:	bf18      	it	ne
 8001f18:	428b      	cmpne	r3, r1
 8001f1a:	bf0c      	ite	eq
 8001f1c:	2001      	moveq	r0, #1
 8001f1e:	2000      	movne	r0, #0
 8001f20:	d061      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0xf6>
 8001f22:	4a9c      	ldr	r2, [pc, #624]	; (8002194 <HAL_DMA_IRQHandler+0x2a4>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d05e      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0xf6>
 8001f28:	3218      	adds	r2, #24
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d05b      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0xf6>
 8001f2e:	3218      	adds	r2, #24
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d058      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0xf6>
 8001f34:	3218      	adds	r2, #24
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d055      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0xf6>
 8001f3a:	3218      	adds	r2, #24
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d052      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0xf6>
 8001f40:	3218      	adds	r2, #24
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d04f      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0xf6>
 8001f46:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d04b      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0xf6>
 8001f4e:	3218      	adds	r2, #24
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d048      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0xf6>
 8001f54:	3218      	adds	r2, #24
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d045      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0xf6>
 8001f5a:	3218      	adds	r2, #24
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d042      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0xf6>
 8001f60:	3218      	adds	r2, #24
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d03f      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0xf6>
 8001f66:	3218      	adds	r2, #24
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d03c      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0xf6>
 8001f6c:	3218      	adds	r2, #24
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d039      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0xf6>
 8001f72:	3218      	adds	r2, #24
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d036      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0xf6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8001f78:	4987      	ldr	r1, [pc, #540]	; (8002198 <HAL_DMA_IRQHandler+0x2a8>)
 8001f7a:	4a88      	ldr	r2, [pc, #544]	; (800219c <HAL_DMA_IRQHandler+0x2ac>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	bf18      	it	ne
 8001f80:	428b      	cmpne	r3, r1
 8001f82:	d012      	beq.n	8001faa <HAL_DMA_IRQHandler+0xba>
 8001f84:	4a86      	ldr	r2, [pc, #536]	; (80021a0 <HAL_DMA_IRQHandler+0x2b0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00f      	beq.n	8001faa <HAL_DMA_IRQHandler+0xba>
 8001f8a:	3214      	adds	r2, #20
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d00c      	beq.n	8001faa <HAL_DMA_IRQHandler+0xba>
 8001f90:	3214      	adds	r2, #20
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d009      	beq.n	8001faa <HAL_DMA_IRQHandler+0xba>
 8001f96:	3214      	adds	r2, #20
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d006      	beq.n	8001faa <HAL_DMA_IRQHandler+0xba>
 8001f9c:	3214      	adds	r2, #20
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d003      	beq.n	8001faa <HAL_DMA_IRQHandler+0xba>
 8001fa2:	3214      	adds	r2, #20
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	f040 8262 	bne.w	800246e <HAL_DMA_IRQHandler+0x57e>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8001faa:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8001fac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001fae:	f001 011f 	and.w	r1, r1, #31
 8001fb2:	2004      	movs	r0, #4
 8001fb4:	4088      	lsls	r0, r1
 8001fb6:	ea10 0f0c 	tst.w	r0, ip
 8001fba:	f000 82a8 	beq.w	800250e <HAL_DMA_IRQHandler+0x61e>
 8001fbe:	f012 0f04 	tst.w	r2, #4
 8001fc2:	f000 82a4 	beq.w	800250e <HAL_DMA_IRQHandler+0x61e>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8001fc6:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001fc8:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001fcc:	f000 825b 	beq.w	8002486 <HAL_DMA_IRQHandler+0x596>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001fd0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001fd4:	f040 8251 	bne.w	800247a <HAL_DMA_IRQHandler+0x58a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fd8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 8247 	beq.w	800246e <HAL_DMA_IRQHandler+0x57e>
            hdma->XferM1HalfCpltCallback(hdma);
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	4798      	blx	r3
 8001fe4:	e243      	b.n	800246e <HAL_DMA_IRQHandler+0x57e>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001fe6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001fe8:	f002 011f 	and.w	r1, r2, #31
 8001fec:	2208      	movs	r2, #8
 8001fee:	408a      	lsls	r2, r1
 8001ff0:	4232      	tst	r2, r6
 8001ff2:	d041      	beq.n	8002078 <HAL_DMA_IRQHandler+0x188>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001ff4:	bb70      	cbnz	r0, 8002054 <HAL_DMA_IRQHandler+0x164>
 8001ff6:	4a67      	ldr	r2, [pc, #412]	; (8002194 <HAL_DMA_IRQHandler+0x2a4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d02b      	beq.n	8002054 <HAL_DMA_IRQHandler+0x164>
 8001ffc:	3218      	adds	r2, #24
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d028      	beq.n	8002054 <HAL_DMA_IRQHandler+0x164>
 8002002:	3218      	adds	r2, #24
 8002004:	4293      	cmp	r3, r2
 8002006:	d025      	beq.n	8002054 <HAL_DMA_IRQHandler+0x164>
 8002008:	3218      	adds	r2, #24
 800200a:	4293      	cmp	r3, r2
 800200c:	d022      	beq.n	8002054 <HAL_DMA_IRQHandler+0x164>
 800200e:	3218      	adds	r2, #24
 8002010:	4293      	cmp	r3, r2
 8002012:	d01f      	beq.n	8002054 <HAL_DMA_IRQHandler+0x164>
 8002014:	3218      	adds	r2, #24
 8002016:	4293      	cmp	r3, r2
 8002018:	d01c      	beq.n	8002054 <HAL_DMA_IRQHandler+0x164>
 800201a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800201e:	4293      	cmp	r3, r2
 8002020:	d018      	beq.n	8002054 <HAL_DMA_IRQHandler+0x164>
 8002022:	3218      	adds	r2, #24
 8002024:	4293      	cmp	r3, r2
 8002026:	d015      	beq.n	8002054 <HAL_DMA_IRQHandler+0x164>
 8002028:	3218      	adds	r2, #24
 800202a:	4293      	cmp	r3, r2
 800202c:	d012      	beq.n	8002054 <HAL_DMA_IRQHandler+0x164>
 800202e:	3218      	adds	r2, #24
 8002030:	4293      	cmp	r3, r2
 8002032:	d00f      	beq.n	8002054 <HAL_DMA_IRQHandler+0x164>
 8002034:	3218      	adds	r2, #24
 8002036:	4293      	cmp	r3, r2
 8002038:	d00c      	beq.n	8002054 <HAL_DMA_IRQHandler+0x164>
 800203a:	3218      	adds	r2, #24
 800203c:	4293      	cmp	r3, r2
 800203e:	d009      	beq.n	8002054 <HAL_DMA_IRQHandler+0x164>
 8002040:	3218      	adds	r2, #24
 8002042:	4293      	cmp	r3, r2
 8002044:	d006      	beq.n	8002054 <HAL_DMA_IRQHandler+0x164>
 8002046:	3218      	adds	r2, #24
 8002048:	4293      	cmp	r3, r2
 800204a:	d003      	beq.n	8002054 <HAL_DMA_IRQHandler+0x164>
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8002052:	e002      	b.n	800205a <HAL_DMA_IRQHandler+0x16a>
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800205a:	b16a      	cbz	r2, 8002078 <HAL_DMA_IRQHandler+0x188>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	f022 0204 	bic.w	r2, r2, #4
 8002062:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002064:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002066:	f003 021f 	and.w	r2, r3, #31
 800206a:	2308      	movs	r3, #8
 800206c:	4093      	lsls	r3, r2
 800206e:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002070:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002078:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800207a:	f002 021f 	and.w	r2, r2, #31
 800207e:	fa26 f302 	lsr.w	r3, r6, r2
 8002082:	f013 0f01 	tst.w	r3, #1
 8002086:	d037      	beq.n	80020f8 <HAL_DMA_IRQHandler+0x208>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002088:	6823      	ldr	r3, [r4, #0]
 800208a:	4840      	ldr	r0, [pc, #256]	; (800218c <HAL_DMA_IRQHandler+0x29c>)
 800208c:	4940      	ldr	r1, [pc, #256]	; (8002190 <HAL_DMA_IRQHandler+0x2a0>)
 800208e:	428b      	cmp	r3, r1
 8002090:	bf18      	it	ne
 8002092:	4283      	cmpne	r3, r0
 8002094:	d02c      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x200>
 8002096:	3118      	adds	r1, #24
 8002098:	428b      	cmp	r3, r1
 800209a:	d029      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x200>
 800209c:	3118      	adds	r1, #24
 800209e:	428b      	cmp	r3, r1
 80020a0:	d026      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x200>
 80020a2:	3118      	adds	r1, #24
 80020a4:	428b      	cmp	r3, r1
 80020a6:	d023      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x200>
 80020a8:	3118      	adds	r1, #24
 80020aa:	428b      	cmp	r3, r1
 80020ac:	d020      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x200>
 80020ae:	3118      	adds	r1, #24
 80020b0:	428b      	cmp	r3, r1
 80020b2:	d01d      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x200>
 80020b4:	3118      	adds	r1, #24
 80020b6:	428b      	cmp	r3, r1
 80020b8:	d01a      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x200>
 80020ba:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80020be:	428b      	cmp	r3, r1
 80020c0:	d016      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x200>
 80020c2:	3118      	adds	r1, #24
 80020c4:	428b      	cmp	r3, r1
 80020c6:	d013      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x200>
 80020c8:	3118      	adds	r1, #24
 80020ca:	428b      	cmp	r3, r1
 80020cc:	d010      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x200>
 80020ce:	3118      	adds	r1, #24
 80020d0:	428b      	cmp	r3, r1
 80020d2:	d00d      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x200>
 80020d4:	3118      	adds	r1, #24
 80020d6:	428b      	cmp	r3, r1
 80020d8:	d00a      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x200>
 80020da:	3118      	adds	r1, #24
 80020dc:	428b      	cmp	r3, r1
 80020de:	d007      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x200>
 80020e0:	3118      	adds	r1, #24
 80020e2:	428b      	cmp	r3, r1
 80020e4:	d004      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x200>
 80020e6:	3118      	adds	r1, #24
 80020e8:	428b      	cmp	r3, r1
 80020ea:	d001      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x200>
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	e003      	b.n	80020f8 <HAL_DMA_IRQHandler+0x208>
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80020f6:	d13b      	bne.n	8002170 <HAL_DMA_IRQHandler+0x280>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80020f8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80020fa:	f003 031f 	and.w	r3, r3, #31
 80020fe:	2204      	movs	r2, #4
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	4233      	tst	r3, r6
 8002106:	d051      	beq.n	80021ac <HAL_DMA_IRQHandler+0x2bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002108:	6822      	ldr	r2, [r4, #0]
 800210a:	4820      	ldr	r0, [pc, #128]	; (800218c <HAL_DMA_IRQHandler+0x29c>)
 800210c:	4920      	ldr	r1, [pc, #128]	; (8002190 <HAL_DMA_IRQHandler+0x2a0>)
 800210e:	428a      	cmp	r2, r1
 8002110:	bf18      	it	ne
 8002112:	4282      	cmpne	r2, r0
 8002114:	d046      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x2b4>
 8002116:	3118      	adds	r1, #24
 8002118:	428a      	cmp	r2, r1
 800211a:	d043      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x2b4>
 800211c:	3118      	adds	r1, #24
 800211e:	428a      	cmp	r2, r1
 8002120:	d040      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x2b4>
 8002122:	3118      	adds	r1, #24
 8002124:	428a      	cmp	r2, r1
 8002126:	d03d      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x2b4>
 8002128:	3118      	adds	r1, #24
 800212a:	428a      	cmp	r2, r1
 800212c:	d03a      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x2b4>
 800212e:	3118      	adds	r1, #24
 8002130:	428a      	cmp	r2, r1
 8002132:	d037      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x2b4>
 8002134:	3118      	adds	r1, #24
 8002136:	428a      	cmp	r2, r1
 8002138:	d034      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x2b4>
 800213a:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800213e:	428a      	cmp	r2, r1
 8002140:	d030      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x2b4>
 8002142:	3118      	adds	r1, #24
 8002144:	428a      	cmp	r2, r1
 8002146:	d02d      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x2b4>
 8002148:	3118      	adds	r1, #24
 800214a:	428a      	cmp	r2, r1
 800214c:	d02a      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x2b4>
 800214e:	3118      	adds	r1, #24
 8002150:	428a      	cmp	r2, r1
 8002152:	d027      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x2b4>
 8002154:	3118      	adds	r1, #24
 8002156:	428a      	cmp	r2, r1
 8002158:	d024      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x2b4>
 800215a:	3118      	adds	r1, #24
 800215c:	428a      	cmp	r2, r1
 800215e:	d021      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x2b4>
 8002160:	3118      	adds	r1, #24
 8002162:	428a      	cmp	r2, r1
 8002164:	d01e      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x2b4>
 8002166:	3118      	adds	r1, #24
 8002168:	428a      	cmp	r2, r1
 800216a:	d01b      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x2b4>
 800216c:	6813      	ldr	r3, [r2, #0]
 800216e:	e01d      	b.n	80021ac <HAL_DMA_IRQHandler+0x2bc>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002170:	2301      	movs	r3, #1
 8002172:	fa03 f202 	lsl.w	r2, r3, r2
 8002176:	60ba      	str	r2, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002178:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800217a:	f043 0302 	orr.w	r3, r3, #2
 800217e:	6563      	str	r3, [r4, #84]	; 0x54
 8002180:	e7ba      	b.n	80020f8 <HAL_DMA_IRQHandler+0x208>
 8002182:	bf00      	nop
 8002184:	20000288 	.word	0x20000288
 8002188:	1b4e81b5 	.word	0x1b4e81b5
 800218c:	40020010 	.word	0x40020010
 8002190:	40020028 	.word	0x40020028
 8002194:	40020040 	.word	0x40020040
 8002198:	58025408 	.word	0x58025408
 800219c:	5802541c 	.word	0x5802541c
 80021a0:	58025430 	.word	0x58025430
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80021a4:	6812      	ldr	r2, [r2, #0]
 80021a6:	f012 0f02 	tst.w	r2, #2
 80021aa:	d13d      	bne.n	8002228 <HAL_DMA_IRQHandler+0x338>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80021ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80021ae:	f003 031f 	and.w	r3, r3, #31
 80021b2:	2210      	movs	r2, #16
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	4233      	tst	r3, r6
 80021ba:	d05f      	beq.n	800227c <HAL_DMA_IRQHandler+0x38c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80021bc:	6822      	ldr	r2, [r4, #0]
 80021be:	489b      	ldr	r0, [pc, #620]	; (800242c <HAL_DMA_IRQHandler+0x53c>)
 80021c0:	499b      	ldr	r1, [pc, #620]	; (8002430 <HAL_DMA_IRQHandler+0x540>)
 80021c2:	428a      	cmp	r2, r1
 80021c4:	bf18      	it	ne
 80021c6:	4282      	cmpne	r2, r0
 80021c8:	d034      	beq.n	8002234 <HAL_DMA_IRQHandler+0x344>
 80021ca:	3118      	adds	r1, #24
 80021cc:	428a      	cmp	r2, r1
 80021ce:	d031      	beq.n	8002234 <HAL_DMA_IRQHandler+0x344>
 80021d0:	3118      	adds	r1, #24
 80021d2:	428a      	cmp	r2, r1
 80021d4:	d02e      	beq.n	8002234 <HAL_DMA_IRQHandler+0x344>
 80021d6:	3118      	adds	r1, #24
 80021d8:	428a      	cmp	r2, r1
 80021da:	d02b      	beq.n	8002234 <HAL_DMA_IRQHandler+0x344>
 80021dc:	3118      	adds	r1, #24
 80021de:	428a      	cmp	r2, r1
 80021e0:	d028      	beq.n	8002234 <HAL_DMA_IRQHandler+0x344>
 80021e2:	3118      	adds	r1, #24
 80021e4:	428a      	cmp	r2, r1
 80021e6:	d025      	beq.n	8002234 <HAL_DMA_IRQHandler+0x344>
 80021e8:	3118      	adds	r1, #24
 80021ea:	428a      	cmp	r2, r1
 80021ec:	d022      	beq.n	8002234 <HAL_DMA_IRQHandler+0x344>
 80021ee:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80021f2:	428a      	cmp	r2, r1
 80021f4:	d01e      	beq.n	8002234 <HAL_DMA_IRQHandler+0x344>
 80021f6:	3118      	adds	r1, #24
 80021f8:	428a      	cmp	r2, r1
 80021fa:	d01b      	beq.n	8002234 <HAL_DMA_IRQHandler+0x344>
 80021fc:	3118      	adds	r1, #24
 80021fe:	428a      	cmp	r2, r1
 8002200:	d018      	beq.n	8002234 <HAL_DMA_IRQHandler+0x344>
 8002202:	3118      	adds	r1, #24
 8002204:	428a      	cmp	r2, r1
 8002206:	d015      	beq.n	8002234 <HAL_DMA_IRQHandler+0x344>
 8002208:	3118      	adds	r1, #24
 800220a:	428a      	cmp	r2, r1
 800220c:	d012      	beq.n	8002234 <HAL_DMA_IRQHandler+0x344>
 800220e:	3118      	adds	r1, #24
 8002210:	428a      	cmp	r2, r1
 8002212:	d00f      	beq.n	8002234 <HAL_DMA_IRQHandler+0x344>
 8002214:	3118      	adds	r1, #24
 8002216:	428a      	cmp	r2, r1
 8002218:	d00c      	beq.n	8002234 <HAL_DMA_IRQHandler+0x344>
 800221a:	3118      	adds	r1, #24
 800221c:	428a      	cmp	r2, r1
 800221e:	d009      	beq.n	8002234 <HAL_DMA_IRQHandler+0x344>
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8002226:	e008      	b.n	800223a <HAL_DMA_IRQHandler+0x34a>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002228:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800222a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800222c:	f043 0304 	orr.w	r3, r3, #4
 8002230:	6563      	str	r3, [r4, #84]	; 0x54
 8002232:	e7bb      	b.n	80021ac <HAL_DMA_IRQHandler+0x2bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800223a:	b1fa      	cbz	r2, 800227c <HAL_DMA_IRQHandler+0x38c>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800223c:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002246:	d00d      	beq.n	8002264 <HAL_DMA_IRQHandler+0x374>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800224e:	d104      	bne.n	800225a <HAL_DMA_IRQHandler+0x36a>
            if(hdma->XferHalfCpltCallback != NULL)
 8002250:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002252:	b19b      	cbz	r3, 800227c <HAL_DMA_IRQHandler+0x38c>
              hdma->XferHalfCpltCallback(hdma);
 8002254:	4620      	mov	r0, r4
 8002256:	4798      	blx	r3
 8002258:	e010      	b.n	800227c <HAL_DMA_IRQHandler+0x38c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800225a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800225c:	b173      	cbz	r3, 800227c <HAL_DMA_IRQHandler+0x38c>
              hdma->XferM1HalfCpltCallback(hdma);
 800225e:	4620      	mov	r0, r4
 8002260:	4798      	blx	r3
 8002262:	e00b      	b.n	800227c <HAL_DMA_IRQHandler+0x38c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	f412 7f80 	tst.w	r2, #256	; 0x100
 800226a:	d103      	bne.n	8002274 <HAL_DMA_IRQHandler+0x384>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	f022 0208 	bic.w	r2, r2, #8
 8002272:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8002274:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002276:	b10b      	cbz	r3, 800227c <HAL_DMA_IRQHandler+0x38c>
            hdma->XferHalfCpltCallback(hdma);
 8002278:	4620      	mov	r0, r4
 800227a:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800227c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800227e:	f003 031f 	and.w	r3, r3, #31
 8002282:	2220      	movs	r2, #32
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	4233      	tst	r3, r6
 800228a:	f000 808e 	beq.w	80023aa <HAL_DMA_IRQHandler+0x4ba>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800228e:	6822      	ldr	r2, [r4, #0]
 8002290:	4866      	ldr	r0, [pc, #408]	; (800242c <HAL_DMA_IRQHandler+0x53c>)
 8002292:	4967      	ldr	r1, [pc, #412]	; (8002430 <HAL_DMA_IRQHandler+0x540>)
 8002294:	428a      	cmp	r2, r1
 8002296:	bf18      	it	ne
 8002298:	4282      	cmpne	r2, r0
 800229a:	d02e      	beq.n	80022fa <HAL_DMA_IRQHandler+0x40a>
 800229c:	3118      	adds	r1, #24
 800229e:	428a      	cmp	r2, r1
 80022a0:	d02b      	beq.n	80022fa <HAL_DMA_IRQHandler+0x40a>
 80022a2:	3118      	adds	r1, #24
 80022a4:	428a      	cmp	r2, r1
 80022a6:	d028      	beq.n	80022fa <HAL_DMA_IRQHandler+0x40a>
 80022a8:	3118      	adds	r1, #24
 80022aa:	428a      	cmp	r2, r1
 80022ac:	d025      	beq.n	80022fa <HAL_DMA_IRQHandler+0x40a>
 80022ae:	3118      	adds	r1, #24
 80022b0:	428a      	cmp	r2, r1
 80022b2:	d022      	beq.n	80022fa <HAL_DMA_IRQHandler+0x40a>
 80022b4:	3118      	adds	r1, #24
 80022b6:	428a      	cmp	r2, r1
 80022b8:	d01f      	beq.n	80022fa <HAL_DMA_IRQHandler+0x40a>
 80022ba:	3118      	adds	r1, #24
 80022bc:	428a      	cmp	r2, r1
 80022be:	d01c      	beq.n	80022fa <HAL_DMA_IRQHandler+0x40a>
 80022c0:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80022c4:	428a      	cmp	r2, r1
 80022c6:	d018      	beq.n	80022fa <HAL_DMA_IRQHandler+0x40a>
 80022c8:	3118      	adds	r1, #24
 80022ca:	428a      	cmp	r2, r1
 80022cc:	d015      	beq.n	80022fa <HAL_DMA_IRQHandler+0x40a>
 80022ce:	3118      	adds	r1, #24
 80022d0:	428a      	cmp	r2, r1
 80022d2:	d012      	beq.n	80022fa <HAL_DMA_IRQHandler+0x40a>
 80022d4:	3118      	adds	r1, #24
 80022d6:	428a      	cmp	r2, r1
 80022d8:	d00f      	beq.n	80022fa <HAL_DMA_IRQHandler+0x40a>
 80022da:	3118      	adds	r1, #24
 80022dc:	428a      	cmp	r2, r1
 80022de:	d00c      	beq.n	80022fa <HAL_DMA_IRQHandler+0x40a>
 80022e0:	3118      	adds	r1, #24
 80022e2:	428a      	cmp	r2, r1
 80022e4:	d009      	beq.n	80022fa <HAL_DMA_IRQHandler+0x40a>
 80022e6:	3118      	adds	r1, #24
 80022e8:	428a      	cmp	r2, r1
 80022ea:	d006      	beq.n	80022fa <HAL_DMA_IRQHandler+0x40a>
 80022ec:	3118      	adds	r1, #24
 80022ee:	428a      	cmp	r2, r1
 80022f0:	d003      	beq.n	80022fa <HAL_DMA_IRQHandler+0x40a>
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80022f8:	e002      	b.n	8002300 <HAL_DMA_IRQHandler+0x410>
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002300:	2a00      	cmp	r2, #0
 8002302:	d052      	beq.n	80023aa <HAL_DMA_IRQHandler+0x4ba>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002304:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002306:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b04      	cmp	r3, #4
 800230e:	d00e      	beq.n	800232e <HAL_DMA_IRQHandler+0x43e>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002318:	d035      	beq.n	8002386 <HAL_DMA_IRQHandler+0x496>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002320:	d12c      	bne.n	800237c <HAL_DMA_IRQHandler+0x48c>
            if(hdma->XferM1CpltCallback != NULL)
 8002322:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002324:	2b00      	cmp	r3, #0
 8002326:	d040      	beq.n	80023aa <HAL_DMA_IRQHandler+0x4ba>
              hdma->XferM1CpltCallback(hdma);
 8002328:	4620      	mov	r0, r4
 800232a:	4798      	blx	r3
 800232c:	e03d      	b.n	80023aa <HAL_DMA_IRQHandler+0x4ba>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800232e:	6822      	ldr	r2, [r4, #0]
 8002330:	6813      	ldr	r3, [r2, #0]
 8002332:	f023 0316 	bic.w	r3, r3, #22
 8002336:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002338:	6822      	ldr	r2, [r4, #0]
 800233a:	6953      	ldr	r3, [r2, #20]
 800233c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002340:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002342:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002344:	b1b3      	cbz	r3, 8002374 <HAL_DMA_IRQHandler+0x484>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002346:	6822      	ldr	r2, [r4, #0]
 8002348:	6813      	ldr	r3, [r2, #0]
 800234a:	f023 0308 	bic.w	r3, r3, #8
 800234e:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002350:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002352:	f003 021f 	and.w	r2, r3, #31
 8002356:	233f      	movs	r3, #63	; 0x3f
 8002358:	4093      	lsls	r3, r2
 800235a:	60bb      	str	r3, [r7, #8]
          __HAL_UNLOCK(hdma);
 800235c:	2300      	movs	r3, #0
 800235e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002362:	2301      	movs	r3, #1
 8002364:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 8002368:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800236a:	2b00      	cmp	r3, #0
 800236c:	d07f      	beq.n	800246e <HAL_DMA_IRQHandler+0x57e>
            hdma->XferAbortCallback(hdma);
 800236e:	4620      	mov	r0, r4
 8002370:	4798      	blx	r3
 8002372:	e07c      	b.n	800246e <HAL_DMA_IRQHandler+0x57e>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002374:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1e5      	bne.n	8002346 <HAL_DMA_IRQHandler+0x456>
 800237a:	e7e9      	b.n	8002350 <HAL_DMA_IRQHandler+0x460>
            if(hdma->XferCpltCallback != NULL)
 800237c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800237e:	b1a3      	cbz	r3, 80023aa <HAL_DMA_IRQHandler+0x4ba>
              hdma->XferCpltCallback(hdma);
 8002380:	4620      	mov	r0, r4
 8002382:	4798      	blx	r3
 8002384:	e011      	b.n	80023aa <HAL_DMA_IRQHandler+0x4ba>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	f412 7f80 	tst.w	r2, #256	; 0x100
 800238c:	d109      	bne.n	80023a2 <HAL_DMA_IRQHandler+0x4b2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	f022 0210 	bic.w	r2, r2, #16
 8002394:	601a      	str	r2, [r3, #0]
            __HAL_UNLOCK(hdma);
 8002396:	2300      	movs	r3, #0
 8002398:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 800239c:	2301      	movs	r3, #1
 800239e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferCpltCallback != NULL)
 80023a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80023a4:	b10b      	cbz	r3, 80023aa <HAL_DMA_IRQHandler+0x4ba>
            hdma->XferCpltCallback(hdma);
 80023a6:	4620      	mov	r0, r4
 80023a8:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d05e      	beq.n	800246e <HAL_DMA_IRQHandler+0x57e>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80023b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80023b2:	f013 0f01 	tst.w	r3, #1
 80023b6:	d056      	beq.n	8002466 <HAL_DMA_IRQHandler+0x576>
        hdma->State = HAL_DMA_STATE_ABORT;
 80023b8:	2304      	movs	r3, #4
 80023ba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 80023be:	6823      	ldr	r3, [r4, #0]
 80023c0:	491a      	ldr	r1, [pc, #104]	; (800242c <HAL_DMA_IRQHandler+0x53c>)
 80023c2:	4a1b      	ldr	r2, [pc, #108]	; (8002430 <HAL_DMA_IRQHandler+0x540>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	bf18      	it	ne
 80023c8:	428b      	cmpne	r3, r1
 80023ca:	d033      	beq.n	8002434 <HAL_DMA_IRQHandler+0x544>
 80023cc:	3218      	adds	r2, #24
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d030      	beq.n	8002434 <HAL_DMA_IRQHandler+0x544>
 80023d2:	3218      	adds	r2, #24
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d02d      	beq.n	8002434 <HAL_DMA_IRQHandler+0x544>
 80023d8:	3218      	adds	r2, #24
 80023da:	4293      	cmp	r3, r2
 80023dc:	d02a      	beq.n	8002434 <HAL_DMA_IRQHandler+0x544>
 80023de:	3218      	adds	r2, #24
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d027      	beq.n	8002434 <HAL_DMA_IRQHandler+0x544>
 80023e4:	3218      	adds	r2, #24
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d024      	beq.n	8002434 <HAL_DMA_IRQHandler+0x544>
 80023ea:	3218      	adds	r2, #24
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d021      	beq.n	8002434 <HAL_DMA_IRQHandler+0x544>
 80023f0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d01d      	beq.n	8002434 <HAL_DMA_IRQHandler+0x544>
 80023f8:	3218      	adds	r2, #24
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d01a      	beq.n	8002434 <HAL_DMA_IRQHandler+0x544>
 80023fe:	3218      	adds	r2, #24
 8002400:	4293      	cmp	r3, r2
 8002402:	d017      	beq.n	8002434 <HAL_DMA_IRQHandler+0x544>
 8002404:	3218      	adds	r2, #24
 8002406:	4293      	cmp	r3, r2
 8002408:	d014      	beq.n	8002434 <HAL_DMA_IRQHandler+0x544>
 800240a:	3218      	adds	r2, #24
 800240c:	4293      	cmp	r3, r2
 800240e:	d011      	beq.n	8002434 <HAL_DMA_IRQHandler+0x544>
 8002410:	3218      	adds	r2, #24
 8002412:	4293      	cmp	r3, r2
 8002414:	d00e      	beq.n	8002434 <HAL_DMA_IRQHandler+0x544>
 8002416:	3218      	adds	r2, #24
 8002418:	4293      	cmp	r3, r2
 800241a:	d00b      	beq.n	8002434 <HAL_DMA_IRQHandler+0x544>
 800241c:	3218      	adds	r2, #24
 800241e:	4293      	cmp	r3, r2
 8002420:	d008      	beq.n	8002434 <HAL_DMA_IRQHandler+0x544>
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	f022 0201 	bic.w	r2, r2, #1
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	e007      	b.n	800243c <HAL_DMA_IRQHandler+0x54c>
 800242c:	40020010 	.word	0x40020010
 8002430:	40020028 	.word	0x40020028
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	f022 0201 	bic.w	r2, r2, #1
 800243a:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 800243c:	9b01      	ldr	r3, [sp, #4]
 800243e:	3301      	adds	r3, #1
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	42ab      	cmp	r3, r5
 8002444:	d804      	bhi.n	8002450 <HAL_DMA_IRQHandler+0x560>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002446:	6823      	ldr	r3, [r4, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f013 0f01 	tst.w	r3, #1
 800244e:	d1f5      	bne.n	800243c <HAL_DMA_IRQHandler+0x54c>
        __HAL_UNLOCK(hdma);
 8002450:	2300      	movs	r3, #0
 8002452:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002456:	6823      	ldr	r3, [r4, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f013 0f01 	tst.w	r3, #1
 800245e:	d008      	beq.n	8002472 <HAL_DMA_IRQHandler+0x582>
          hdma->State = HAL_DMA_STATE_ERROR;
 8002460:	2303      	movs	r3, #3
 8002462:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 8002466:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002468:	b10b      	cbz	r3, 800246e <HAL_DMA_IRQHandler+0x57e>
        hdma->XferErrorCallback(hdma);
 800246a:	4620      	mov	r0, r4
 800246c:	4798      	blx	r3
}
 800246e:	b003      	add	sp, #12
 8002470:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hdma->State = HAL_DMA_STATE_READY;
 8002472:	2301      	movs	r3, #1
 8002474:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8002478:	e7f5      	b.n	8002466 <HAL_DMA_IRQHandler+0x576>
          if(hdma->XferHalfCpltCallback != NULL)
 800247a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f6      	beq.n	800246e <HAL_DMA_IRQHandler+0x57e>
            hdma->XferHalfCpltCallback(hdma);
 8002480:	4620      	mov	r0, r4
 8002482:	4798      	blx	r3
 8002484:	e7f3      	b.n	800246e <HAL_DMA_IRQHandler+0x57e>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002486:	f012 0f20 	tst.w	r2, #32
 800248a:	d135      	bne.n	80024f8 <HAL_DMA_IRQHandler+0x608>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800248c:	6823      	ldr	r3, [r4, #0]
 800248e:	4964      	ldr	r1, [pc, #400]	; (8002620 <HAL_DMA_IRQHandler+0x730>)
 8002490:	4a64      	ldr	r2, [pc, #400]	; (8002624 <HAL_DMA_IRQHandler+0x734>)
 8002492:	4293      	cmp	r3, r2
 8002494:	bf18      	it	ne
 8002496:	428b      	cmpne	r3, r1
 8002498:	d02a      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x600>
 800249a:	3218      	adds	r2, #24
 800249c:	4293      	cmp	r3, r2
 800249e:	d027      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x600>
 80024a0:	3218      	adds	r2, #24
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d024      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x600>
 80024a6:	3218      	adds	r2, #24
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d021      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x600>
 80024ac:	3218      	adds	r2, #24
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d01e      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x600>
 80024b2:	3218      	adds	r2, #24
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d01b      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x600>
 80024b8:	3218      	adds	r2, #24
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d018      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x600>
 80024be:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d014      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x600>
 80024c6:	3218      	adds	r2, #24
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d011      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x600>
 80024cc:	3218      	adds	r2, #24
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d00e      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x600>
 80024d2:	3218      	adds	r2, #24
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d00b      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x600>
 80024d8:	3218      	adds	r2, #24
 80024da:	4293      	cmp	r3, r2
 80024dc:	d008      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x600>
 80024de:	3218      	adds	r2, #24
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d005      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x600>
 80024e4:	3218      	adds	r2, #24
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d002      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x600>
 80024ea:	3218      	adds	r2, #24
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d109      	bne.n	8002504 <HAL_DMA_IRQHandler+0x614>
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	f022 0208 	bic.w	r2, r2, #8
 80024f6:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 80024f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0b7      	beq.n	800246e <HAL_DMA_IRQHandler+0x57e>
          hdma->XferHalfCpltCallback(hdma);
 80024fe:	4620      	mov	r0, r4
 8002500:	4798      	blx	r3
 8002502:	e7b4      	b.n	800246e <HAL_DMA_IRQHandler+0x57e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	f022 0204 	bic.w	r2, r2, #4
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	e7f4      	b.n	80024f8 <HAL_DMA_IRQHandler+0x608>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800250e:	2002      	movs	r0, #2
 8002510:	4088      	lsls	r0, r1
 8002512:	ea10 0f0c 	tst.w	r0, ip
 8002516:	d060      	beq.n	80025da <HAL_DMA_IRQHandler+0x6ea>
 8002518:	f012 0f02 	tst.w	r2, #2
 800251c:	d05d      	beq.n	80025da <HAL_DMA_IRQHandler+0x6ea>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800251e:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002520:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002524:	d00e      	beq.n	8002544 <HAL_DMA_IRQHandler+0x654>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002526:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800252a:	d105      	bne.n	8002538 <HAL_DMA_IRQHandler+0x648>
          if(hdma->XferM1CpltCallback != NULL)
 800252c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800252e:	2b00      	cmp	r3, #0
 8002530:	d09d      	beq.n	800246e <HAL_DMA_IRQHandler+0x57e>
            hdma->XferM1CpltCallback(hdma);
 8002532:	4620      	mov	r0, r4
 8002534:	4798      	blx	r3
 8002536:	e79a      	b.n	800246e <HAL_DMA_IRQHandler+0x57e>
          if(hdma->XferCpltCallback != NULL)
 8002538:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800253a:	2b00      	cmp	r3, #0
 800253c:	d097      	beq.n	800246e <HAL_DMA_IRQHandler+0x57e>
            hdma->XferCpltCallback(hdma);
 800253e:	4620      	mov	r0, r4
 8002540:	4798      	blx	r3
 8002542:	e794      	b.n	800246e <HAL_DMA_IRQHandler+0x57e>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002544:	f012 0f20 	tst.w	r2, #32
 8002548:	d13b      	bne.n	80025c2 <HAL_DMA_IRQHandler+0x6d2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800254a:	6823      	ldr	r3, [r4, #0]
 800254c:	4934      	ldr	r1, [pc, #208]	; (8002620 <HAL_DMA_IRQHandler+0x730>)
 800254e:	4a35      	ldr	r2, [pc, #212]	; (8002624 <HAL_DMA_IRQHandler+0x734>)
 8002550:	4293      	cmp	r3, r2
 8002552:	bf18      	it	ne
 8002554:	428b      	cmpne	r3, r1
 8002556:	d02a      	beq.n	80025ae <HAL_DMA_IRQHandler+0x6be>
 8002558:	3218      	adds	r2, #24
 800255a:	4293      	cmp	r3, r2
 800255c:	d027      	beq.n	80025ae <HAL_DMA_IRQHandler+0x6be>
 800255e:	3218      	adds	r2, #24
 8002560:	4293      	cmp	r3, r2
 8002562:	d024      	beq.n	80025ae <HAL_DMA_IRQHandler+0x6be>
 8002564:	3218      	adds	r2, #24
 8002566:	4293      	cmp	r3, r2
 8002568:	d021      	beq.n	80025ae <HAL_DMA_IRQHandler+0x6be>
 800256a:	3218      	adds	r2, #24
 800256c:	4293      	cmp	r3, r2
 800256e:	d01e      	beq.n	80025ae <HAL_DMA_IRQHandler+0x6be>
 8002570:	3218      	adds	r2, #24
 8002572:	4293      	cmp	r3, r2
 8002574:	d01b      	beq.n	80025ae <HAL_DMA_IRQHandler+0x6be>
 8002576:	3218      	adds	r2, #24
 8002578:	4293      	cmp	r3, r2
 800257a:	d018      	beq.n	80025ae <HAL_DMA_IRQHandler+0x6be>
 800257c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002580:	4293      	cmp	r3, r2
 8002582:	d014      	beq.n	80025ae <HAL_DMA_IRQHandler+0x6be>
 8002584:	3218      	adds	r2, #24
 8002586:	4293      	cmp	r3, r2
 8002588:	d011      	beq.n	80025ae <HAL_DMA_IRQHandler+0x6be>
 800258a:	3218      	adds	r2, #24
 800258c:	4293      	cmp	r3, r2
 800258e:	d00e      	beq.n	80025ae <HAL_DMA_IRQHandler+0x6be>
 8002590:	3218      	adds	r2, #24
 8002592:	4293      	cmp	r3, r2
 8002594:	d00b      	beq.n	80025ae <HAL_DMA_IRQHandler+0x6be>
 8002596:	3218      	adds	r2, #24
 8002598:	4293      	cmp	r3, r2
 800259a:	d008      	beq.n	80025ae <HAL_DMA_IRQHandler+0x6be>
 800259c:	3218      	adds	r2, #24
 800259e:	4293      	cmp	r3, r2
 80025a0:	d005      	beq.n	80025ae <HAL_DMA_IRQHandler+0x6be>
 80025a2:	3218      	adds	r2, #24
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d002      	beq.n	80025ae <HAL_DMA_IRQHandler+0x6be>
 80025a8:	3218      	adds	r2, #24
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d110      	bne.n	80025d0 <HAL_DMA_IRQHandler+0x6e0>
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	f022 0214 	bic.w	r2, r2, #20
 80025b4:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 80025b6:	2300      	movs	r3, #0
 80025b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80025bc:	2301      	movs	r3, #1
 80025be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80025c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f43f af52 	beq.w	800246e <HAL_DMA_IRQHandler+0x57e>
          hdma->XferCpltCallback(hdma);
 80025ca:	4620      	mov	r0, r4
 80025cc:	4798      	blx	r3
 80025ce:	e74e      	b.n	800246e <HAL_DMA_IRQHandler+0x57e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	f022 020a 	bic.w	r2, r2, #10
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	e7ed      	b.n	80025b6 <HAL_DMA_IRQHandler+0x6c6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80025da:	2008      	movs	r0, #8
 80025dc:	fa00 f101 	lsl.w	r1, r0, r1
 80025e0:	ea11 0f0c 	tst.w	r1, ip
 80025e4:	f43f af43 	beq.w	800246e <HAL_DMA_IRQHandler+0x57e>
 80025e8:	f012 0f08 	tst.w	r2, #8
 80025ec:	f43f af3f 	beq.w	800246e <HAL_DMA_IRQHandler+0x57e>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	f022 020e 	bic.w	r2, r2, #14
 80025f6:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80025f8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80025fa:	f003 031f 	and.w	r3, r3, #31
 80025fe:	2201      	movs	r2, #1
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	607b      	str	r3, [r7, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002606:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8002608:	2300      	movs	r3, #0
 800260a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800260e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8002612:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002614:	2b00      	cmp	r3, #0
 8002616:	f43f af2a 	beq.w	800246e <HAL_DMA_IRQHandler+0x57e>
        hdma->XferErrorCallback(hdma);
 800261a:	4620      	mov	r0, r4
 800261c:	4798      	blx	r3
 800261e:	e726      	b.n	800246e <HAL_DMA_IRQHandler+0x57e>
 8002620:	40020010 	.word	0x40020010
 8002624:	40020028 	.word	0x40020028

08002628 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8002628:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800262a:	4770      	bx	lr

0800262c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800262c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800262e:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8002630:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002632:	e03a      	b.n	80026aa <HAL_GPIO_Init+0x7e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002634:	2409      	movs	r4, #9
 8002636:	e000      	b.n	800263a <HAL_GPIO_Init+0xe>
 8002638:	2400      	movs	r4, #0
 800263a:	40b4      	lsls	r4, r6
 800263c:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800263e:	3502      	adds	r5, #2
 8002640:	4e6e      	ldr	r6, [pc, #440]	; (80027fc <HAL_GPIO_Init+0x1d0>)
 8002642:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002646:	4c6e      	ldr	r4, [pc, #440]	; (8002800 <HAL_GPIO_Init+0x1d4>)
 8002648:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800264a:	43d4      	mvns	r4, r2
 800264c:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002650:	684f      	ldr	r7, [r1, #4]
 8002652:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002656:	d001      	beq.n	800265c <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8002658:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800265c:	4d68      	ldr	r5, [pc, #416]	; (8002800 <HAL_GPIO_Init+0x1d4>)
 800265e:	602e      	str	r6, [r5, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002660:	686e      	ldr	r6, [r5, #4]
        temp &= ~(iocurrent);
 8002662:	ea04 0506 	and.w	r5, r4, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002666:	684f      	ldr	r7, [r1, #4]
 8002668:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800266c:	d001      	beq.n	8002672 <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 800266e:	ea42 0506 	orr.w	r5, r2, r6
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002672:	4e63      	ldr	r6, [pc, #396]	; (8002800 <HAL_GPIO_Init+0x1d4>)
 8002674:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002676:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800267a:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 800267c:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002680:	684f      	ldr	r7, [r1, #4]
 8002682:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002686:	d001      	beq.n	800268c <HAL_GPIO_Init+0x60>
        {
          temp |= iocurrent;
 8002688:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800268c:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002690:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8002692:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002694:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002696:	684e      	ldr	r6, [r1, #4]
 8002698:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800269c:	d001      	beq.n	80026a2 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 800269e:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80026a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026a6:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 80026a8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026aa:	680a      	ldr	r2, [r1, #0]
 80026ac:	fa32 f403 	lsrs.w	r4, r2, r3
 80026b0:	f000 80a2 	beq.w	80027f8 <HAL_GPIO_Init+0x1cc>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026b4:	2401      	movs	r4, #1
 80026b6:	409c      	lsls	r4, r3
    if (iocurrent != 0x00U)
 80026b8:	4022      	ands	r2, r4
 80026ba:	d0f5      	beq.n	80026a8 <HAL_GPIO_Init+0x7c>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026bc:	684d      	ldr	r5, [r1, #4]
 80026be:	1e6e      	subs	r6, r5, #1
 80026c0:	2d11      	cmp	r5, #17
 80026c2:	bf18      	it	ne
 80026c4:	2e01      	cmpne	r6, #1
 80026c6:	d901      	bls.n	80026cc <HAL_GPIO_Init+0xa0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026c8:	2d12      	cmp	r5, #18
 80026ca:	d112      	bne.n	80026f2 <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR;
 80026cc:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026ce:	005f      	lsls	r7, r3, #1
 80026d0:	2503      	movs	r5, #3
 80026d2:	40bd      	lsls	r5, r7
 80026d4:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026d8:	68cd      	ldr	r5, [r1, #12]
 80026da:	40bd      	lsls	r5, r7
 80026dc:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80026de:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80026e0:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026e2:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026e6:	684d      	ldr	r5, [r1, #4]
 80026e8:	f3c5 1400 	ubfx	r4, r5, #4, #1
 80026ec:	409c      	lsls	r4, r3
 80026ee:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 80026f0:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 80026f2:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026f4:	005f      	lsls	r7, r3, #1
 80026f6:	2503      	movs	r5, #3
 80026f8:	40bd      	lsls	r5, r7
 80026fa:	43ec      	mvns	r4, r5
 80026fc:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026fe:	688d      	ldr	r5, [r1, #8]
 8002700:	40bd      	lsls	r5, r7
 8002702:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8002704:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002706:	684d      	ldr	r5, [r1, #4]
 8002708:	2d12      	cmp	r5, #18
 800270a:	bf18      	it	ne
 800270c:	2d02      	cmpne	r5, #2
 800270e:	d113      	bne.n	8002738 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8002710:	08de      	lsrs	r6, r3, #3
 8002712:	3608      	adds	r6, #8
 8002714:	f850 e026 	ldr.w	lr, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002718:	f003 0507 	and.w	r5, r3, #7
 800271c:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8002720:	250f      	movs	r5, #15
 8002722:	fa05 f50c 	lsl.w	r5, r5, ip
 8002726:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800272a:	690d      	ldr	r5, [r1, #16]
 800272c:	fa05 f50c 	lsl.w	r5, r5, ip
 8002730:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002734:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8002738:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800273a:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800273c:	684c      	ldr	r4, [r1, #4]
 800273e:	f004 0403 	and.w	r4, r4, #3
 8002742:	40bc      	lsls	r4, r7
 8002744:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8002746:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002748:	684c      	ldr	r4, [r1, #4]
 800274a:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800274e:	d0ab      	beq.n	80026a8 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002750:	4c2c      	ldr	r4, [pc, #176]	; (8002804 <HAL_GPIO_Init+0x1d8>)
 8002752:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 8002756:	f045 0502 	orr.w	r5, r5, #2
 800275a:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 800275e:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 8002762:	f004 0402 	and.w	r4, r4, #2
 8002766:	9401      	str	r4, [sp, #4]
 8002768:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800276a:	089d      	lsrs	r5, r3, #2
 800276c:	1cae      	adds	r6, r5, #2
 800276e:	4c23      	ldr	r4, [pc, #140]	; (80027fc <HAL_GPIO_Init+0x1d0>)
 8002770:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002774:	f003 0403 	and.w	r4, r3, #3
 8002778:	00a6      	lsls	r6, r4, #2
 800277a:	240f      	movs	r4, #15
 800277c:	40b4      	lsls	r4, r6
 800277e:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002782:	4c21      	ldr	r4, [pc, #132]	; (8002808 <HAL_GPIO_Init+0x1dc>)
 8002784:	42a0      	cmp	r0, r4
 8002786:	f43f af57 	beq.w	8002638 <HAL_GPIO_Init+0xc>
 800278a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800278e:	42a0      	cmp	r0, r4
 8002790:	d022      	beq.n	80027d8 <HAL_GPIO_Init+0x1ac>
 8002792:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002796:	42a0      	cmp	r0, r4
 8002798:	d020      	beq.n	80027dc <HAL_GPIO_Init+0x1b0>
 800279a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800279e:	42a0      	cmp	r0, r4
 80027a0:	d01e      	beq.n	80027e0 <HAL_GPIO_Init+0x1b4>
 80027a2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027a6:	42a0      	cmp	r0, r4
 80027a8:	d01c      	beq.n	80027e4 <HAL_GPIO_Init+0x1b8>
 80027aa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027ae:	42a0      	cmp	r0, r4
 80027b0:	d01a      	beq.n	80027e8 <HAL_GPIO_Init+0x1bc>
 80027b2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027b6:	42a0      	cmp	r0, r4
 80027b8:	d018      	beq.n	80027ec <HAL_GPIO_Init+0x1c0>
 80027ba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027be:	42a0      	cmp	r0, r4
 80027c0:	d016      	beq.n	80027f0 <HAL_GPIO_Init+0x1c4>
 80027c2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027c6:	42a0      	cmp	r0, r4
 80027c8:	d014      	beq.n	80027f4 <HAL_GPIO_Init+0x1c8>
 80027ca:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027ce:	42a0      	cmp	r0, r4
 80027d0:	f43f af30 	beq.w	8002634 <HAL_GPIO_Init+0x8>
 80027d4:	240a      	movs	r4, #10
 80027d6:	e730      	b.n	800263a <HAL_GPIO_Init+0xe>
 80027d8:	2401      	movs	r4, #1
 80027da:	e72e      	b.n	800263a <HAL_GPIO_Init+0xe>
 80027dc:	2402      	movs	r4, #2
 80027de:	e72c      	b.n	800263a <HAL_GPIO_Init+0xe>
 80027e0:	2403      	movs	r4, #3
 80027e2:	e72a      	b.n	800263a <HAL_GPIO_Init+0xe>
 80027e4:	2404      	movs	r4, #4
 80027e6:	e728      	b.n	800263a <HAL_GPIO_Init+0xe>
 80027e8:	2405      	movs	r4, #5
 80027ea:	e726      	b.n	800263a <HAL_GPIO_Init+0xe>
 80027ec:	2406      	movs	r4, #6
 80027ee:	e724      	b.n	800263a <HAL_GPIO_Init+0xe>
 80027f0:	2407      	movs	r4, #7
 80027f2:	e722      	b.n	800263a <HAL_GPIO_Init+0xe>
 80027f4:	2408      	movs	r4, #8
 80027f6:	e720      	b.n	800263a <HAL_GPIO_Init+0xe>
  }
}
 80027f8:	b003      	add	sp, #12
 80027fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027fc:	58000400 	.word	0x58000400
 8002800:	58000080 	.word	0x58000080
 8002804:	58024400 	.word	0x58024400
 8002808:	58020000 	.word	0x58020000

0800280c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800280c:	6903      	ldr	r3, [r0, #16]
 800280e:	4219      	tst	r1, r3
 8002810:	d101      	bne.n	8002816 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002812:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002814:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8002816:	2001      	movs	r0, #1
 8002818:	4770      	bx	lr

0800281a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800281a:	b912      	cbnz	r2, 8002822 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800281c:	0409      	lsls	r1, r1, #16
 800281e:	6181      	str	r1, [r0, #24]
  }
}
 8002820:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8002822:	6181      	str	r1, [r0, #24]
 8002824:	4770      	bx	lr

08002826 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002826:	6803      	ldr	r3, [r0, #0]
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	f012 0f02 	tst.w	r2, #2
 800282e:	d001      	beq.n	8002834 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002830:	2200      	movs	r2, #0
 8002832:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002834:	6803      	ldr	r3, [r0, #0]
 8002836:	699a      	ldr	r2, [r3, #24]
 8002838:	f012 0f01 	tst.w	r2, #1
 800283c:	d103      	bne.n	8002846 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800283e:	699a      	ldr	r2, [r3, #24]
 8002840:	f042 0201 	orr.w	r2, r2, #1
 8002844:	619a      	str	r2, [r3, #24]
  }
}
 8002846:	4770      	bx	lr

08002848 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002848:	b470      	push	{r4, r5, r6}
 800284a:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800284c:	6805      	ldr	r5, [r0, #0]
 800284e:	6868      	ldr	r0, [r5, #4]
 8002850:	0d74      	lsrs	r4, r6, #21
 8002852:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8002856:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800285a:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800285e:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8002862:	f044 0403 	orr.w	r4, r4, #3
 8002866:	ea20 0004 	bic.w	r0, r0, r4
 800286a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800286e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002872:	4319      	orrs	r1, r3
 8002874:	4331      	orrs	r1, r6
 8002876:	4301      	orrs	r1, r0
 8002878:	6069      	str	r1, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800287a:	bc70      	pop	{r4, r5, r6}
 800287c:	4770      	bx	lr

0800287e <I2C_IsAcknowledgeFailed>:
{
 800287e:	b570      	push	{r4, r5, r6, lr}
 8002880:	4604      	mov	r4, r0
 8002882:	460d      	mov	r5, r1
 8002884:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002886:	6803      	ldr	r3, [r0, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	f013 0f10 	tst.w	r3, #16
 800288e:	d01c      	beq.n	80028ca <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	699a      	ldr	r2, [r3, #24]
 8002894:	f012 0f20 	tst.w	r2, #32
 8002898:	d119      	bne.n	80028ce <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 800289a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800289e:	d0f7      	beq.n	8002890 <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028a0:	f7fd fd7a 	bl	8000398 <HAL_GetTick>
 80028a4:	1b80      	subs	r0, r0, r6
 80028a6:	42a8      	cmp	r0, r5
 80028a8:	d801      	bhi.n	80028ae <I2C_IsAcknowledgeFailed+0x30>
 80028aa:	2d00      	cmp	r5, #0
 80028ac:	d1f0      	bne.n	8002890 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80028b0:	f043 0320 	orr.w	r3, r3, #32
 80028b4:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028b6:	2320      	movs	r3, #32
 80028b8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028bc:	2300      	movs	r3, #0
 80028be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80028c2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 80028c6:	2001      	movs	r0, #1
 80028c8:	e020      	b.n	800290c <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 80028ca:	2000      	movs	r0, #0
 80028cc:	e01e      	b.n	800290c <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028ce:	2210      	movs	r2, #16
 80028d0:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028d2:	6823      	ldr	r3, [r4, #0]
 80028d4:	2520      	movs	r5, #32
 80028d6:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80028d8:	4620      	mov	r0, r4
 80028da:	f7ff ffa4 	bl	8002826 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80028de:	6822      	ldr	r2, [r4, #0]
 80028e0:	6853      	ldr	r3, [r2, #4]
 80028e2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80028e6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80028ea:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80028ee:	f023 0301 	bic.w	r3, r3, #1
 80028f2:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80028f6:	f043 0304 	orr.w	r3, r3, #4
 80028fa:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028fc:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002900:	2300      	movs	r3, #0
 8002902:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002906:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 800290a:	2001      	movs	r0, #1
}
 800290c:	bd70      	pop	{r4, r5, r6, pc}

0800290e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800290e:	b570      	push	{r4, r5, r6, lr}
 8002910:	4604      	mov	r4, r0
 8002912:	460d      	mov	r5, r1
 8002914:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002916:	6823      	ldr	r3, [r4, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	f013 0f02 	tst.w	r3, #2
 800291e:	d11d      	bne.n	800295c <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002920:	4632      	mov	r2, r6
 8002922:	4629      	mov	r1, r5
 8002924:	4620      	mov	r0, r4
 8002926:	f7ff ffaa 	bl	800287e <I2C_IsAcknowledgeFailed>
 800292a:	b9c8      	cbnz	r0, 8002960 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800292c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002930:	d0f1      	beq.n	8002916 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002932:	f7fd fd31 	bl	8000398 <HAL_GetTick>
 8002936:	1b80      	subs	r0, r0, r6
 8002938:	42a8      	cmp	r0, r5
 800293a:	d801      	bhi.n	8002940 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800293c:	2d00      	cmp	r5, #0
 800293e:	d1ea      	bne.n	8002916 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002940:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002942:	f043 0320 	orr.w	r3, r3, #32
 8002946:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002948:	2320      	movs	r3, #32
 800294a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800294e:	2300      	movs	r3, #0
 8002950:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002954:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002958:	2001      	movs	r0, #1
 800295a:	e000      	b.n	800295e <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 800295c:	2000      	movs	r0, #0
}
 800295e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002960:	2001      	movs	r0, #1
 8002962:	e7fc      	b.n	800295e <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08002964 <I2C_WaitOnFlagUntilTimeout>:
{
 8002964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002966:	4605      	mov	r5, r0
 8002968:	460f      	mov	r7, r1
 800296a:	4616      	mov	r6, r2
 800296c:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800296e:	682b      	ldr	r3, [r5, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	ea37 0303 	bics.w	r3, r7, r3
 8002976:	bf0c      	ite	eq
 8002978:	2301      	moveq	r3, #1
 800297a:	2300      	movne	r3, #0
 800297c:	42b3      	cmp	r3, r6
 800297e:	d118      	bne.n	80029b2 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8002980:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002984:	d0f3      	beq.n	800296e <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002986:	f7fd fd07 	bl	8000398 <HAL_GetTick>
 800298a:	9b06      	ldr	r3, [sp, #24]
 800298c:	1ac0      	subs	r0, r0, r3
 800298e:	42a0      	cmp	r0, r4
 8002990:	d801      	bhi.n	8002996 <I2C_WaitOnFlagUntilTimeout+0x32>
 8002992:	2c00      	cmp	r4, #0
 8002994:	d1eb      	bne.n	800296e <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002996:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002998:	f043 0320 	orr.w	r3, r3, #32
 800299c:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800299e:	2320      	movs	r3, #32
 80029a0:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a4:	2300      	movs	r3, #0
 80029a6:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80029aa:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 80029ae:	2001      	movs	r0, #1
 80029b0:	e000      	b.n	80029b4 <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 80029b2:	2000      	movs	r0, #0
}
 80029b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080029b6 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80029b6:	b570      	push	{r4, r5, r6, lr}
 80029b8:	4605      	mov	r5, r0
 80029ba:	460c      	mov	r4, r1
 80029bc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029be:	682b      	ldr	r3, [r5, #0]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	f013 0f20 	tst.w	r3, #32
 80029c6:	d11a      	bne.n	80029fe <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c8:	4632      	mov	r2, r6
 80029ca:	4621      	mov	r1, r4
 80029cc:	4628      	mov	r0, r5
 80029ce:	f7ff ff56 	bl	800287e <I2C_IsAcknowledgeFailed>
 80029d2:	b9b0      	cbnz	r0, 8002a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d4:	f7fd fce0 	bl	8000398 <HAL_GetTick>
 80029d8:	1b80      	subs	r0, r0, r6
 80029da:	42a0      	cmp	r0, r4
 80029dc:	d801      	bhi.n	80029e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80029de:	2c00      	cmp	r4, #0
 80029e0:	d1ed      	bne.n	80029be <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029e2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80029e4:	f043 0320 	orr.w	r3, r3, #32
 80029e8:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029ea:	2320      	movs	r3, #32
 80029ec:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f0:	2300      	movs	r3, #0
 80029f2:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80029f6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80029fa:	2001      	movs	r0, #1
}
 80029fc:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80029fe:	2000      	movs	r0, #0
 8002a00:	e7fc      	b.n	80029fc <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8002a02:	2001      	movs	r0, #1
 8002a04:	e7fa      	b.n	80029fc <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
	...

08002a08 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002a08:	2800      	cmp	r0, #0
 8002a0a:	d057      	beq.n	8002abc <HAL_I2C_Init+0xb4>
{
 8002a0c:	b510      	push	{r4, lr}
 8002a0e:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a10:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d041      	beq.n	8002a9c <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a18:	2324      	movs	r3, #36	; 0x24
 8002a1a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002a1e:	6822      	ldr	r2, [r4, #0]
 8002a20:	6813      	ldr	r3, [r2, #0]
 8002a22:	f023 0301 	bic.w	r3, r3, #1
 8002a26:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a28:	6863      	ldr	r3, [r4, #4]
 8002a2a:	6822      	ldr	r2, [r4, #0]
 8002a2c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002a30:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a32:	6822      	ldr	r2, [r4, #0]
 8002a34:	6893      	ldr	r3, [r2, #8]
 8002a36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002a3a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a3c:	68e3      	ldr	r3, [r4, #12]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d031      	beq.n	8002aa6 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a42:	68a3      	ldr	r3, [r4, #8]
 8002a44:	6822      	ldr	r2, [r4, #0]
 8002a46:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8002a4a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a4c:	68e3      	ldr	r3, [r4, #12]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d02f      	beq.n	8002ab2 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a52:	6822      	ldr	r2, [r4, #0]
 8002a54:	6851      	ldr	r1, [r2, #4]
 8002a56:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <HAL_I2C_Init+0xb8>)
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a5c:	6822      	ldr	r2, [r4, #0]
 8002a5e:	68d3      	ldr	r3, [r2, #12]
 8002a60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002a64:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002a66:	6923      	ldr	r3, [r4, #16]
 8002a68:	6962      	ldr	r2, [r4, #20]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	69a1      	ldr	r1, [r4, #24]
 8002a6e:	6822      	ldr	r2, [r4, #0]
 8002a70:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002a74:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a76:	69e3      	ldr	r3, [r4, #28]
 8002a78:	6a21      	ldr	r1, [r4, #32]
 8002a7a:	6822      	ldr	r2, [r4, #0]
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002a80:	6822      	ldr	r2, [r4, #0]
 8002a82:	6813      	ldr	r3, [r2, #0]
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a8e:	2320      	movs	r3, #32
 8002a90:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a94:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a96:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002a9a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002a9c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002aa0:	f005 fb5e 	bl	8008160 <HAL_I2C_MspInit>
 8002aa4:	e7b8      	b.n	8002a18 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002aa6:	68a3      	ldr	r3, [r4, #8]
 8002aa8:	6822      	ldr	r2, [r4, #0]
 8002aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aae:	6093      	str	r3, [r2, #8]
 8002ab0:	e7cc      	b.n	8002a4c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ab2:	6823      	ldr	r3, [r4, #0]
 8002ab4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	e7ca      	b.n	8002a52 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8002abc:	2001      	movs	r0, #1
}
 8002abe:	4770      	bx	lr
 8002ac0:	02008000 	.word	0x02008000

08002ac4 <HAL_I2C_Master_Transmit>:
{
 8002ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ac8:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aca:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8002ace:	b2ed      	uxtb	r5, r5
 8002ad0:	2d20      	cmp	r5, #32
 8002ad2:	f040 80a4 	bne.w	8002c1e <HAL_I2C_Master_Transmit+0x15a>
    __HAL_LOCK(hi2c);
 8002ad6:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002ada:	2c01      	cmp	r4, #1
 8002adc:	f000 80a4 	beq.w	8002c28 <HAL_I2C_Master_Transmit+0x164>
 8002ae0:	4698      	mov	r8, r3
 8002ae2:	4617      	mov	r7, r2
 8002ae4:	460e      	mov	r6, r1
 8002ae6:	4604      	mov	r4, r0
 8002ae8:	f04f 0901 	mov.w	r9, #1
 8002aec:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002af0:	f7fd fc52 	bl	8000398 <HAL_GetTick>
 8002af4:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002af6:	9000      	str	r0, [sp, #0]
 8002af8:	2319      	movs	r3, #25
 8002afa:	464a      	mov	r2, r9
 8002afc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b00:	4620      	mov	r0, r4
 8002b02:	f7ff ff2f 	bl	8002964 <I2C_WaitOnFlagUntilTimeout>
 8002b06:	2800      	cmp	r0, #0
 8002b08:	f040 8090 	bne.w	8002c2c <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b0c:	2321      	movs	r3, #33	; 0x21
 8002b0e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b12:	2310      	movs	r3, #16
 8002b14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002b1c:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b1e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b22:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2bff      	cmp	r3, #255	; 0xff
 8002b2a:	d90a      	bls.n	8002b42 <HAL_I2C_Master_Transmit+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b2c:	22ff      	movs	r2, #255	; 0xff
 8002b2e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b30:	4b42      	ldr	r3, [pc, #264]	; (8002c3c <HAL_I2C_Master_Transmit+0x178>)
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b38:	4631      	mov	r1, r6
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f7ff fe84 	bl	8002848 <I2C_TransferConfig>
 8002b40:	e018      	b.n	8002b74 <HAL_I2C_Master_Transmit+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 8002b42:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002b44:	b292      	uxth	r2, r2
 8002b46:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002b48:	4b3c      	ldr	r3, [pc, #240]	; (8002c3c <HAL_I2C_Master_Transmit+0x178>)
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	4631      	mov	r1, r6
 8002b54:	4620      	mov	r0, r4
 8002b56:	f7ff fe77 	bl	8002848 <I2C_TransferConfig>
 8002b5a:	e00b      	b.n	8002b74 <HAL_I2C_Master_Transmit+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 8002b5c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002b5e:	b292      	uxth	r2, r2
 8002b60:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b62:	2300      	movs	r3, #0
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	4631      	mov	r1, r6
 8002b6e:	4620      	mov	r0, r4
 8002b70:	f7ff fe6a 	bl	8002848 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d033      	beq.n	8002be4 <HAL_I2C_Master_Transmit+0x120>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b7c:	462a      	mov	r2, r5
 8002b7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002b80:	4620      	mov	r0, r4
 8002b82:	f7ff fec4 	bl	800290e <I2C_WaitOnTXISFlagUntilTimeout>
 8002b86:	2800      	cmp	r0, #0
 8002b88:	d152      	bne.n	8002c30 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b8c:	6823      	ldr	r3, [r4, #0]
 8002b8e:	7812      	ldrb	r2, [r2, #0]
 8002b90:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002b92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b94:	3301      	adds	r3, #1
 8002b96:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002b98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002ba0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ba8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002baa:	b292      	uxth	r2, r2
 8002bac:	2a00      	cmp	r2, #0
 8002bae:	d0e1      	beq.n	8002b74 <HAL_I2C_Master_Transmit+0xb0>
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1df      	bne.n	8002b74 <HAL_I2C_Master_Transmit+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bb4:	9500      	str	r5, [sp, #0]
 8002bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2180      	movs	r1, #128	; 0x80
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	f7ff fed1 	bl	8002964 <I2C_WaitOnFlagUntilTimeout>
 8002bc2:	2800      	cmp	r0, #0
 8002bc4:	d136      	bne.n	8002c34 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bc6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2bff      	cmp	r3, #255	; 0xff
 8002bcc:	d9c6      	bls.n	8002b5c <HAL_I2C_Master_Transmit+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bce:	22ff      	movs	r2, #255	; 0xff
 8002bd0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bda:	4631      	mov	r1, r6
 8002bdc:	4620      	mov	r0, r4
 8002bde:	f7ff fe33 	bl	8002848 <I2C_TransferConfig>
 8002be2:	e7c7      	b.n	8002b74 <HAL_I2C_Master_Transmit+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be4:	462a      	mov	r2, r5
 8002be6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002be8:	4620      	mov	r0, r4
 8002bea:	f7ff fee4 	bl	80029b6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	bb10      	cbnz	r0, 8002c38 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bf2:	6822      	ldr	r2, [r4, #0]
 8002bf4:	2120      	movs	r1, #32
 8002bf6:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8002bf8:	6820      	ldr	r0, [r4, #0]
 8002bfa:	6842      	ldr	r2, [r0, #4]
 8002bfc:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002c00:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002c04:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002c08:	f022 0201 	bic.w	r2, r2, #1
 8002c0c:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002c0e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c12:	2200      	movs	r2, #0
 8002c14:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002c18:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8002c1c:	e000      	b.n	8002c20 <HAL_I2C_Master_Transmit+0x15c>
    return HAL_BUSY;
 8002c1e:	2302      	movs	r3, #2
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	b003      	add	sp, #12
 8002c24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e7f9      	b.n	8002c20 <HAL_I2C_Master_Transmit+0x15c>
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e7f7      	b.n	8002c20 <HAL_I2C_Master_Transmit+0x15c>
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e7f5      	b.n	8002c20 <HAL_I2C_Master_Transmit+0x15c>
          return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e7f3      	b.n	8002c20 <HAL_I2C_Master_Transmit+0x15c>
      return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e7f1      	b.n	8002c20 <HAL_I2C_Master_Transmit+0x15c>
 8002c3c:	80002000 	.word	0x80002000

08002c40 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c40:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b20      	cmp	r3, #32
 8002c48:	d124      	bne.n	8002c94 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c4a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d022      	beq.n	8002c98 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002c52:	2301      	movs	r3, #1
 8002c54:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c58:	2324      	movs	r3, #36	; 0x24
 8002c5a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c5e:	6802      	ldr	r2, [r0, #0]
 8002c60:	6813      	ldr	r3, [r2, #0]
 8002c62:	f023 0301 	bic.w	r3, r3, #1
 8002c66:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c68:	6802      	ldr	r2, [r0, #0]
 8002c6a:	6813      	ldr	r3, [r2, #0]
 8002c6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c70:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c72:	6802      	ldr	r2, [r0, #0]
 8002c74:	6813      	ldr	r3, [r2, #0]
 8002c76:	4319      	orrs	r1, r3
 8002c78:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c7a:	6802      	ldr	r2, [r0, #0]
 8002c7c:	6813      	ldr	r3, [r2, #0]
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c84:	2320      	movs	r3, #32
 8002c86:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002c90:	4618      	mov	r0, r3
 8002c92:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002c94:	2002      	movs	r0, #2
 8002c96:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002c98:	2002      	movs	r0, #2
  }
}
 8002c9a:	4770      	bx	lr

08002c9c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c9c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b20      	cmp	r3, #32
 8002ca4:	d122      	bne.n	8002cec <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d020      	beq.n	8002cf0 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8002cae:	2301      	movs	r3, #1
 8002cb0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cb4:	2324      	movs	r3, #36	; 0x24
 8002cb6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cba:	6802      	ldr	r2, [r0, #0]
 8002cbc:	6813      	ldr	r3, [r2, #0]
 8002cbe:	f023 0301 	bic.w	r3, r3, #1
 8002cc2:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002cc4:	6802      	ldr	r2, [r0, #0]
 8002cc6:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002cc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ccc:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002cd0:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cd2:	6802      	ldr	r2, [r0, #0]
 8002cd4:	6813      	ldr	r3, [r2, #0]
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cdc:	2320      	movs	r3, #32
 8002cde:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002ce8:	4618      	mov	r0, r3
 8002cea:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002cec:	2002      	movs	r0, #2
 8002cee:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002cf0:	2002      	movs	r0, #2
  }
}
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002cf4:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <HAL_PWREx_ConfigSupply+0x50>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f013 0f04 	tst.w	r3, #4
 8002cfc:	d107      	bne.n	8002d0e <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002cfe:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <HAL_PWREx_ConfigSupply+0x50>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	4283      	cmp	r3, r0
 8002d08:	d01a      	beq.n	8002d40 <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	4770      	bx	lr
{
 8002d0e:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002d10:	4a0c      	ldr	r2, [pc, #48]	; (8002d44 <HAL_PWREx_ConfigSupply+0x50>)
 8002d12:	68d3      	ldr	r3, [r2, #12]
 8002d14:	f023 0307 	bic.w	r3, r3, #7
 8002d18:	4318      	orrs	r0, r3
 8002d1a:	60d0      	str	r0, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002d1c:	f7fd fb3c 	bl	8000398 <HAL_GetTick>
 8002d20:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d22:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <HAL_PWREx_ConfigSupply+0x50>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002d2a:	d107      	bne.n	8002d3c <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002d2c:	f7fd fb34 	bl	8000398 <HAL_GetTick>
 8002d30:	1b00      	subs	r0, r0, r4
 8002d32:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002d36:	d9f4      	bls.n	8002d22 <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 8002d38:	2001      	movs	r0, #1
 8002d3a:	e000      	b.n	8002d3e <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002d3c:	2000      	movs	r0, #0
}
 8002d3e:	bd10      	pop	{r4, pc}
      return HAL_OK;
 8002d40:	2000      	movs	r0, #0
}
 8002d42:	4770      	bx	lr
 8002d44:	58024800 	.word	0x58024800

08002d48 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d48:	2800      	cmp	r0, #0
 8002d4a:	f000 82e6 	beq.w	800331a <HAL_RCC_OscConfig+0x5d2>
{
 8002d4e:	b538      	push	{r3, r4, r5, lr}
 8002d50:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d52:	6803      	ldr	r3, [r0, #0]
 8002d54:	f013 0f01 	tst.w	r3, #1
 8002d58:	d025      	beq.n	8002da6 <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d5a:	4aaa      	ldr	r2, [pc, #680]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002d5c:	6913      	ldr	r3, [r2, #16]
 8002d5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d62:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d64:	2b10      	cmp	r3, #16
 8002d66:	d015      	beq.n	8002d94 <HAL_RCC_OscConfig+0x4c>
 8002d68:	2b18      	cmp	r3, #24
 8002d6a:	d00f      	beq.n	8002d8c <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d6c:	6863      	ldr	r3, [r4, #4]
 8002d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d72:	d03e      	beq.n	8002df2 <HAL_RCC_OscConfig+0xaa>
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d152      	bne.n	8002e1e <HAL_RCC_OscConfig+0xd6>
 8002d78:	4ba2      	ldr	r3, [pc, #648]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	e037      	b.n	8002dfc <HAL_RCC_OscConfig+0xb4>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d8c:	f002 0203 	and.w	r2, r2, #3
 8002d90:	2a02      	cmp	r2, #2
 8002d92:	d1eb      	bne.n	8002d6c <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d94:	4b9b      	ldr	r3, [pc, #620]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002d9c:	d003      	beq.n	8002da6 <HAL_RCC_OscConfig+0x5e>
 8002d9e:	6863      	ldr	r3, [r4, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 82bc 	beq.w	800331e <HAL_RCC_OscConfig+0x5d6>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	f013 0f02 	tst.w	r3, #2
 8002dac:	d077      	beq.n	8002e9e <HAL_RCC_OscConfig+0x156>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dae:	4a95      	ldr	r2, [pc, #596]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002db0:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002db2:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002db4:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8002db8:	d05a      	beq.n	8002e70 <HAL_RCC_OscConfig+0x128>
 8002dba:	2b18      	cmp	r3, #24
 8002dbc:	d055      	beq.n	8002e6a <HAL_RCC_OscConfig+0x122>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dbe:	68e3      	ldr	r3, [r4, #12]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80b2 	beq.w	8002f2a <HAL_RCC_OscConfig+0x1e2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002dc6:	498f      	ldr	r1, [pc, #572]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002dc8:	680a      	ldr	r2, [r1, #0]
 8002dca:	f022 0219 	bic.w	r2, r2, #25
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd2:	f7fd fae1 	bl	8000398 <HAL_GetTick>
 8002dd6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dd8:	4b8a      	ldr	r3, [pc, #552]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f013 0f04 	tst.w	r3, #4
 8002de0:	f040 808b 	bne.w	8002efa <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002de4:	f7fd fad8 	bl	8000398 <HAL_GetTick>
 8002de8:	1b40      	subs	r0, r0, r5
 8002dea:	2802      	cmp	r0, #2
 8002dec:	d9f4      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x90>
          {
            return HAL_TIMEOUT;
 8002dee:	2003      	movs	r0, #3
 8002df0:	e29a      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002df2:	4a84      	ldr	r2, [pc, #528]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002df4:	6813      	ldr	r3, [r2, #0]
 8002df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfa:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dfc:	6863      	ldr	r3, [r4, #4]
 8002dfe:	b32b      	cbz	r3, 8002e4c <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 8002e00:	f7fd faca 	bl	8000398 <HAL_GetTick>
 8002e04:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e06:	4b7f      	ldr	r3, [pc, #508]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002e0e:	d1ca      	bne.n	8002da6 <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e10:	f7fd fac2 	bl	8000398 <HAL_GetTick>
 8002e14:	1b40      	subs	r0, r0, r5
 8002e16:	2864      	cmp	r0, #100	; 0x64
 8002e18:	d9f5      	bls.n	8002e06 <HAL_RCC_OscConfig+0xbe>
            return HAL_TIMEOUT;
 8002e1a:	2003      	movs	r0, #3
 8002e1c:	e284      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e22:	d009      	beq.n	8002e38 <HAL_RCC_OscConfig+0xf0>
 8002e24:	4b77      	ldr	r3, [pc, #476]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	e7e1      	b.n	8002dfc <HAL_RCC_OscConfig+0xb4>
 8002e38:	4b72      	ldr	r3, [pc, #456]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	e7d7      	b.n	8002dfc <HAL_RCC_OscConfig+0xb4>
        tickstart = HAL_GetTick();
 8002e4c:	f7fd faa4 	bl	8000398 <HAL_GetTick>
 8002e50:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e52:	4b6c      	ldr	r3, [pc, #432]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002e5a:	d0a4      	beq.n	8002da6 <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e5c:	f7fd fa9c 	bl	8000398 <HAL_GetTick>
 8002e60:	1b40      	subs	r0, r0, r5
 8002e62:	2864      	cmp	r0, #100	; 0x64
 8002e64:	d9f5      	bls.n	8002e52 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8002e66:	2003      	movs	r0, #3
 8002e68:	e25e      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e6a:	f012 0f03 	tst.w	r2, #3
 8002e6e:	d1a6      	bne.n	8002dbe <HAL_RCC_OscConfig+0x76>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e70:	4b64      	ldr	r3, [pc, #400]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f013 0f04 	tst.w	r3, #4
 8002e78:	d003      	beq.n	8002e82 <HAL_RCC_OscConfig+0x13a>
 8002e7a:	68e3      	ldr	r3, [r4, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 8250 	beq.w	8003322 <HAL_RCC_OscConfig+0x5da>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e82:	f7fd faa3 	bl	80003cc <HAL_GetREVID>
 8002e86:	f241 0303 	movw	r3, #4099	; 0x1003
 8002e8a:	4298      	cmp	r0, r3
 8002e8c:	d82c      	bhi.n	8002ee8 <HAL_RCC_OscConfig+0x1a0>
 8002e8e:	4a5d      	ldr	r2, [pc, #372]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002e90:	6853      	ldr	r3, [r2, #4]
 8002e92:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002e96:	6921      	ldr	r1, [r4, #16]
 8002e98:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8002e9c:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	f013 0f10 	tst.w	r3, #16
 8002ea4:	d071      	beq.n	8002f8a <HAL_RCC_OscConfig+0x242>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ea6:	4a57      	ldr	r2, [pc, #348]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002ea8:	6913      	ldr	r3, [r2, #16]
 8002eaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002eae:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d052      	beq.n	8002f5a <HAL_RCC_OscConfig+0x212>
 8002eb4:	2b18      	cmp	r3, #24
 8002eb6:	d04c      	beq.n	8002f52 <HAL_RCC_OscConfig+0x20a>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002eb8:	69e3      	ldr	r3, [r4, #28]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 80a4 	beq.w	8003008 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002ec0:	4a50      	ldr	r2, [pc, #320]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002ec2:	6813      	ldr	r3, [r2, #0]
 8002ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eca:	f7fd fa65 	bl	8000398 <HAL_GetTick>
 8002ece:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ed0:	4b4c      	ldr	r3, [pc, #304]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ed8:	d17b      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x28a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002eda:	f7fd fa5d 	bl	8000398 <HAL_GetTick>
 8002ede:	1b40      	subs	r0, r0, r5
 8002ee0:	2802      	cmp	r0, #2
 8002ee2:	d9f5      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002ee4:	2003      	movs	r0, #3
 8002ee6:	e21f      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee8:	4a46      	ldr	r2, [pc, #280]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002eea:	6853      	ldr	r3, [r2, #4]
 8002eec:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002ef0:	6921      	ldr	r1, [r4, #16]
 8002ef2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002ef6:	6053      	str	r3, [r2, #4]
 8002ef8:	e7d1      	b.n	8002e9e <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efa:	f7fd fa67 	bl	80003cc <HAL_GetREVID>
 8002efe:	f241 0303 	movw	r3, #4099	; 0x1003
 8002f02:	4298      	cmp	r0, r3
 8002f04:	d808      	bhi.n	8002f18 <HAL_RCC_OscConfig+0x1d0>
 8002f06:	4a3f      	ldr	r2, [pc, #252]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002f08:	6853      	ldr	r3, [r2, #4]
 8002f0a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002f0e:	6921      	ldr	r1, [r4, #16]
 8002f10:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8002f14:	6053      	str	r3, [r2, #4]
 8002f16:	e7c2      	b.n	8002e9e <HAL_RCC_OscConfig+0x156>
 8002f18:	4a3a      	ldr	r2, [pc, #232]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002f1a:	6853      	ldr	r3, [r2, #4]
 8002f1c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002f20:	6921      	ldr	r1, [r4, #16]
 8002f22:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002f26:	6053      	str	r3, [r2, #4]
 8002f28:	e7b9      	b.n	8002e9e <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_HSI_DISABLE();
 8002f2a:	4a36      	ldr	r2, [pc, #216]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002f2c:	6813      	ldr	r3, [r2, #0]
 8002f2e:	f023 0301 	bic.w	r3, r3, #1
 8002f32:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002f34:	f7fd fa30 	bl	8000398 <HAL_GetTick>
 8002f38:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f3a:	4b32      	ldr	r3, [pc, #200]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f013 0f04 	tst.w	r3, #4
 8002f42:	d0ac      	beq.n	8002e9e <HAL_RCC_OscConfig+0x156>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f44:	f7fd fa28 	bl	8000398 <HAL_GetTick>
 8002f48:	1b40      	subs	r0, r0, r5
 8002f4a:	2802      	cmp	r0, #2
 8002f4c:	d9f5      	bls.n	8002f3a <HAL_RCC_OscConfig+0x1f2>
            return HAL_TIMEOUT;
 8002f4e:	2003      	movs	r0, #3
 8002f50:	e1ea      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002f52:	f002 0203 	and.w	r2, r2, #3
 8002f56:	2a01      	cmp	r2, #1
 8002f58:	d1ae      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x170>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f5a:	4b2a      	ldr	r3, [pc, #168]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f62:	d004      	beq.n	8002f6e <HAL_RCC_OscConfig+0x226>
 8002f64:	69e3      	ldr	r3, [r4, #28]
 8002f66:	2b80      	cmp	r3, #128	; 0x80
 8002f68:	d001      	beq.n	8002f6e <HAL_RCC_OscConfig+0x226>
        return HAL_ERROR;
 8002f6a:	2001      	movs	r0, #1
 8002f6c:	e1dc      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f6e:	f7fd fa2d 	bl	80003cc <HAL_GetREVID>
 8002f72:	f241 0303 	movw	r3, #4099	; 0x1003
 8002f76:	4298      	cmp	r0, r3
 8002f78:	d822      	bhi.n	8002fc0 <HAL_RCC_OscConfig+0x278>
 8002f7a:	4a22      	ldr	r2, [pc, #136]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002f7c:	6853      	ldr	r3, [r2, #4]
 8002f7e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002f82:	6a21      	ldr	r1, [r4, #32]
 8002f84:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8002f88:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f8a:	6823      	ldr	r3, [r4, #0]
 8002f8c:	f013 0f08 	tst.w	r3, #8
 8002f90:	d062      	beq.n	8003058 <HAL_RCC_OscConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f92:	6963      	ldr	r3, [r4, #20]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d04b      	beq.n	8003030 <HAL_RCC_OscConfig+0x2e8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f98:	4a1a      	ldr	r2, [pc, #104]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002f9a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa2:	f7fd f9f9 	bl	8000398 <HAL_GetTick>
 8002fa6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fa8:	4b16      	ldr	r3, [pc, #88]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fac:	f013 0f02 	tst.w	r3, #2
 8002fb0:	d152      	bne.n	8003058 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fb2:	f7fd f9f1 	bl	8000398 <HAL_GetTick>
 8002fb6:	1b40      	subs	r0, r0, r5
 8002fb8:	2802      	cmp	r0, #2
 8002fba:	d9f5      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x260>
        {
          return HAL_TIMEOUT;
 8002fbc:	2003      	movs	r0, #3
 8002fbe:	e1b3      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fc0:	4a10      	ldr	r2, [pc, #64]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002fc2:	68d3      	ldr	r3, [r2, #12]
 8002fc4:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8002fc8:	6a21      	ldr	r1, [r4, #32]
 8002fca:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002fce:	60d3      	str	r3, [r2, #12]
 8002fd0:	e7db      	b.n	8002f8a <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fd2:	f7fd f9fb 	bl	80003cc <HAL_GetREVID>
 8002fd6:	f241 0303 	movw	r3, #4099	; 0x1003
 8002fda:	4298      	cmp	r0, r3
 8002fdc:	d808      	bhi.n	8002ff0 <HAL_RCC_OscConfig+0x2a8>
 8002fde:	4a09      	ldr	r2, [pc, #36]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002fe0:	6853      	ldr	r3, [r2, #4]
 8002fe2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002fe6:	6a21      	ldr	r1, [r4, #32]
 8002fe8:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8002fec:	6053      	str	r3, [r2, #4]
 8002fee:	e7cc      	b.n	8002f8a <HAL_RCC_OscConfig+0x242>
 8002ff0:	4a04      	ldr	r2, [pc, #16]	; (8003004 <HAL_RCC_OscConfig+0x2bc>)
 8002ff2:	68d3      	ldr	r3, [r2, #12]
 8002ff4:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8002ff8:	6a21      	ldr	r1, [r4, #32]
 8002ffa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002ffe:	60d3      	str	r3, [r2, #12]
 8003000:	e7c3      	b.n	8002f8a <HAL_RCC_OscConfig+0x242>
 8003002:	bf00      	nop
 8003004:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_DISABLE();
 8003008:	4aad      	ldr	r2, [pc, #692]	; (80032c0 <HAL_RCC_OscConfig+0x578>)
 800300a:	6813      	ldr	r3, [r2, #0]
 800300c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003010:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003012:	f7fd f9c1 	bl	8000398 <HAL_GetTick>
 8003016:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003018:	4ba9      	ldr	r3, [pc, #676]	; (80032c0 <HAL_RCC_OscConfig+0x578>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003020:	d0b3      	beq.n	8002f8a <HAL_RCC_OscConfig+0x242>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003022:	f7fd f9b9 	bl	8000398 <HAL_GetTick>
 8003026:	1b40      	subs	r0, r0, r5
 8003028:	2802      	cmp	r0, #2
 800302a:	d9f5      	bls.n	8003018 <HAL_RCC_OscConfig+0x2d0>
            return HAL_TIMEOUT;
 800302c:	2003      	movs	r0, #3
 800302e:	e17b      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003030:	4aa3      	ldr	r2, [pc, #652]	; (80032c0 <HAL_RCC_OscConfig+0x578>)
 8003032:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8003034:	f023 0301 	bic.w	r3, r3, #1
 8003038:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303a:	f7fd f9ad 	bl	8000398 <HAL_GetTick>
 800303e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003040:	4b9f      	ldr	r3, [pc, #636]	; (80032c0 <HAL_RCC_OscConfig+0x578>)
 8003042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003044:	f013 0f02 	tst.w	r3, #2
 8003048:	d006      	beq.n	8003058 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800304a:	f7fd f9a5 	bl	8000398 <HAL_GetTick>
 800304e:	1b40      	subs	r0, r0, r5
 8003050:	2802      	cmp	r0, #2
 8003052:	d9f5      	bls.n	8003040 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003054:	2003      	movs	r0, #3
 8003056:	e167      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003058:	6823      	ldr	r3, [r4, #0]
 800305a:	f013 0f20 	tst.w	r3, #32
 800305e:	d029      	beq.n	80030b4 <HAL_RCC_OscConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003060:	69a3      	ldr	r3, [r4, #24]
 8003062:	b19b      	cbz	r3, 800308c <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003064:	4a96      	ldr	r2, [pc, #600]	; (80032c0 <HAL_RCC_OscConfig+0x578>)
 8003066:	6813      	ldr	r3, [r2, #0]
 8003068:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800306c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800306e:	f7fd f993 	bl	8000398 <HAL_GetTick>
 8003072:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003074:	4b92      	ldr	r3, [pc, #584]	; (80032c0 <HAL_RCC_OscConfig+0x578>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800307c:	d11a      	bne.n	80030b4 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800307e:	f7fd f98b 	bl	8000398 <HAL_GetTick>
 8003082:	1b40      	subs	r0, r0, r5
 8003084:	2802      	cmp	r0, #2
 8003086:	d9f5      	bls.n	8003074 <HAL_RCC_OscConfig+0x32c>
        {
          return HAL_TIMEOUT;
 8003088:	2003      	movs	r0, #3
 800308a:	e14d      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800308c:	4a8c      	ldr	r2, [pc, #560]	; (80032c0 <HAL_RCC_OscConfig+0x578>)
 800308e:	6813      	ldr	r3, [r2, #0]
 8003090:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003094:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003096:	f7fd f97f 	bl	8000398 <HAL_GetTick>
 800309a:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800309c:	4b88      	ldr	r3, [pc, #544]	; (80032c0 <HAL_RCC_OscConfig+0x578>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80030a4:	d006      	beq.n	80030b4 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80030a6:	f7fd f977 	bl	8000398 <HAL_GetTick>
 80030aa:	1b40      	subs	r0, r0, r5
 80030ac:	2802      	cmp	r0, #2
 80030ae:	d9f5      	bls.n	800309c <HAL_RCC_OscConfig+0x354>
        {
          return HAL_TIMEOUT;
 80030b0:	2003      	movs	r0, #3
 80030b2:	e139      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b4:	6823      	ldr	r3, [r4, #0]
 80030b6:	f013 0f04 	tst.w	r3, #4
 80030ba:	d121      	bne.n	8003100 <HAL_RCC_OscConfig+0x3b8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 8131 	beq.w	8003326 <HAL_RCC_OscConfig+0x5de>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80030c4:	4a7e      	ldr	r2, [pc, #504]	; (80032c0 <HAL_RCC_OscConfig+0x578>)
 80030c6:	6912      	ldr	r2, [r2, #16]
 80030c8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80030cc:	2a18      	cmp	r2, #24
 80030ce:	f000 80ea 	beq.w	80032a6 <HAL_RCC_OscConfig+0x55e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d075      	beq.n	80031c2 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d6:	4a7a      	ldr	r2, [pc, #488]	; (80032c0 <HAL_RCC_OscConfig+0x578>)
 80030d8:	6813      	ldr	r3, [r2, #0]
 80030da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7fd f95a 	bl	8000398 <HAL_GetTick>
 80030e4:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030e6:	4b76      	ldr	r3, [pc, #472]	; (80032c0 <HAL_RCC_OscConfig+0x578>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80030ee:	f000 80d8 	beq.w	80032a2 <HAL_RCC_OscConfig+0x55a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f2:	f7fd f951 	bl	8000398 <HAL_GetTick>
 80030f6:	1b00      	subs	r0, r0, r4
 80030f8:	2802      	cmp	r0, #2
 80030fa:	d9f4      	bls.n	80030e6 <HAL_RCC_OscConfig+0x39e>
          {
            return HAL_TIMEOUT;
 80030fc:	2003      	movs	r0, #3
 80030fe:	e113      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
    PWR->CR1 |= PWR_CR1_DBP;
 8003100:	4a70      	ldr	r2, [pc, #448]	; (80032c4 <HAL_RCC_OscConfig+0x57c>)
 8003102:	6813      	ldr	r3, [r2, #0]
 8003104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003108:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800310a:	f7fd f945 	bl	8000398 <HAL_GetTick>
 800310e:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003110:	4b6c      	ldr	r3, [pc, #432]	; (80032c4 <HAL_RCC_OscConfig+0x57c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003118:	d106      	bne.n	8003128 <HAL_RCC_OscConfig+0x3e0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800311a:	f7fd f93d 	bl	8000398 <HAL_GetTick>
 800311e:	1b40      	subs	r0, r0, r5
 8003120:	2864      	cmp	r0, #100	; 0x64
 8003122:	d9f5      	bls.n	8003110 <HAL_RCC_OscConfig+0x3c8>
        return HAL_TIMEOUT;
 8003124:	2003      	movs	r0, #3
 8003126:	e0ff      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003128:	68a3      	ldr	r3, [r4, #8]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d00a      	beq.n	8003144 <HAL_RCC_OscConfig+0x3fc>
 800312e:	bb0b      	cbnz	r3, 8003174 <HAL_RCC_OscConfig+0x42c>
 8003130:	4b63      	ldr	r3, [pc, #396]	; (80032c0 <HAL_RCC_OscConfig+0x578>)
 8003132:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003134:	f022 0201 	bic.w	r2, r2, #1
 8003138:	671a      	str	r2, [r3, #112]	; 0x70
 800313a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800313c:	f022 0204 	bic.w	r2, r2, #4
 8003140:	671a      	str	r2, [r3, #112]	; 0x70
 8003142:	e004      	b.n	800314e <HAL_RCC_OscConfig+0x406>
 8003144:	4a5e      	ldr	r2, [pc, #376]	; (80032c0 <HAL_RCC_OscConfig+0x578>)
 8003146:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800314e:	68a3      	ldr	r3, [r4, #8]
 8003150:	b333      	cbz	r3, 80031a0 <HAL_RCC_OscConfig+0x458>
      tickstart = HAL_GetTick();
 8003152:	f7fd f921 	bl	8000398 <HAL_GetTick>
 8003156:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003158:	4b59      	ldr	r3, [pc, #356]	; (80032c0 <HAL_RCC_OscConfig+0x578>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	f013 0f02 	tst.w	r3, #2
 8003160:	d1ac      	bne.n	80030bc <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003162:	f7fd f919 	bl	8000398 <HAL_GetTick>
 8003166:	1b40      	subs	r0, r0, r5
 8003168:	f241 3388 	movw	r3, #5000	; 0x1388
 800316c:	4298      	cmp	r0, r3
 800316e:	d9f3      	bls.n	8003158 <HAL_RCC_OscConfig+0x410>
          return HAL_TIMEOUT;
 8003170:	2003      	movs	r0, #3
 8003172:	e0d9      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003174:	2b05      	cmp	r3, #5
 8003176:	d009      	beq.n	800318c <HAL_RCC_OscConfig+0x444>
 8003178:	4b51      	ldr	r3, [pc, #324]	; (80032c0 <HAL_RCC_OscConfig+0x578>)
 800317a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800317c:	f022 0201 	bic.w	r2, r2, #1
 8003180:	671a      	str	r2, [r3, #112]	; 0x70
 8003182:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003184:	f022 0204 	bic.w	r2, r2, #4
 8003188:	671a      	str	r2, [r3, #112]	; 0x70
 800318a:	e7e0      	b.n	800314e <HAL_RCC_OscConfig+0x406>
 800318c:	4b4c      	ldr	r3, [pc, #304]	; (80032c0 <HAL_RCC_OscConfig+0x578>)
 800318e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003190:	f042 0204 	orr.w	r2, r2, #4
 8003194:	671a      	str	r2, [r3, #112]	; 0x70
 8003196:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003198:	f042 0201 	orr.w	r2, r2, #1
 800319c:	671a      	str	r2, [r3, #112]	; 0x70
 800319e:	e7d6      	b.n	800314e <HAL_RCC_OscConfig+0x406>
      tickstart = HAL_GetTick();
 80031a0:	f7fd f8fa 	bl	8000398 <HAL_GetTick>
 80031a4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031a6:	4b46      	ldr	r3, [pc, #280]	; (80032c0 <HAL_RCC_OscConfig+0x578>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031aa:	f013 0f02 	tst.w	r3, #2
 80031ae:	d085      	beq.n	80030bc <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b0:	f7fd f8f2 	bl	8000398 <HAL_GetTick>
 80031b4:	1b40      	subs	r0, r0, r5
 80031b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80031ba:	4298      	cmp	r0, r3
 80031bc:	d9f3      	bls.n	80031a6 <HAL_RCC_OscConfig+0x45e>
          return HAL_TIMEOUT;
 80031be:	2003      	movs	r0, #3
 80031c0:	e0b2      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_PLL_DISABLE();
 80031c2:	4a3f      	ldr	r2, [pc, #252]	; (80032c0 <HAL_RCC_OscConfig+0x578>)
 80031c4:	6813      	ldr	r3, [r2, #0]
 80031c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ca:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80031cc:	f7fd f8e4 	bl	8000398 <HAL_GetTick>
 80031d0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031d2:	4b3b      	ldr	r3, [pc, #236]	; (80032c0 <HAL_RCC_OscConfig+0x578>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80031da:	d006      	beq.n	80031ea <HAL_RCC_OscConfig+0x4a2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fd f8dc 	bl	8000398 <HAL_GetTick>
 80031e0:	1b40      	subs	r0, r0, r5
 80031e2:	2802      	cmp	r0, #2
 80031e4:	d9f5      	bls.n	80031d2 <HAL_RCC_OscConfig+0x48a>
            return HAL_TIMEOUT;
 80031e6:	2003      	movs	r0, #3
 80031e8:	e09e      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031ea:	4b35      	ldr	r3, [pc, #212]	; (80032c0 <HAL_RCC_OscConfig+0x578>)
 80031ec:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80031ee:	4a36      	ldr	r2, [pc, #216]	; (80032c8 <HAL_RCC_OscConfig+0x580>)
 80031f0:	400a      	ands	r2, r1
 80031f2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80031f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80031f6:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80031fa:	430a      	orrs	r2, r1
 80031fc:	629a      	str	r2, [r3, #40]	; 0x28
 80031fe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003200:	3a01      	subs	r2, #1
 8003202:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003206:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003208:	3901      	subs	r1, #1
 800320a:	0249      	lsls	r1, r1, #9
 800320c:	b289      	uxth	r1, r1
 800320e:	430a      	orrs	r2, r1
 8003210:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003212:	3901      	subs	r1, #1
 8003214:	0409      	lsls	r1, r1, #16
 8003216:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800321a:	430a      	orrs	r2, r1
 800321c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800321e:	3901      	subs	r1, #1
 8003220:	0609      	lsls	r1, r1, #24
 8003222:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8003226:	430a      	orrs	r2, r1
 8003228:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800322a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322c:	f022 0201 	bic.w	r2, r2, #1
 8003230:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003232:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003234:	4a25      	ldr	r2, [pc, #148]	; (80032cc <HAL_RCC_OscConfig+0x584>)
 8003236:	400a      	ands	r2, r1
 8003238:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800323a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800323e:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003242:	f022 020c 	bic.w	r2, r2, #12
 8003246:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003248:	430a      	orrs	r2, r1
 800324a:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800324c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800324e:	f022 0202 	bic.w	r2, r2, #2
 8003252:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003254:	430a      	orrs	r2, r1
 8003256:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800325e:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003262:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003266:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800326e:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8003270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003272:	f042 0201 	orr.w	r2, r2, #1
 8003276:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800327e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003280:	f7fd f88a 	bl	8000398 <HAL_GetTick>
 8003284:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003286:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <HAL_RCC_OscConfig+0x578>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800328e:	d106      	bne.n	800329e <HAL_RCC_OscConfig+0x556>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003290:	f7fd f882 	bl	8000398 <HAL_GetTick>
 8003294:	1b00      	subs	r0, r0, r4
 8003296:	2802      	cmp	r0, #2
 8003298:	d9f5      	bls.n	8003286 <HAL_RCC_OscConfig+0x53e>
            return HAL_TIMEOUT;
 800329a:	2003      	movs	r0, #3
 800329c:	e044      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800329e:	2000      	movs	r0, #0
 80032a0:	e042      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
 80032a2:	2000      	movs	r0, #0
 80032a4:	e040      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
      temp1_pllckcfg = RCC->PLLCKSELR;
 80032a6:	4a06      	ldr	r2, [pc, #24]	; (80032c0 <HAL_RCC_OscConfig+0x578>)
 80032a8:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80032aa:	6b10      	ldr	r0, [r2, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d03c      	beq.n	800332a <HAL_RCC_OscConfig+0x5e2>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b0:	f001 0303 	and.w	r3, r1, #3
 80032b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00a      	beq.n	80032d0 <HAL_RCC_OscConfig+0x588>
        return HAL_ERROR;
 80032ba:	2001      	movs	r0, #1
 80032bc:	e034      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
 80032be:	bf00      	nop
 80032c0:	58024400 	.word	0x58024400
 80032c4:	58024800 	.word	0x58024800
 80032c8:	fffffc0c 	.word	0xfffffc0c
 80032cc:	ffff0007 	.word	0xffff0007
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032d0:	f3c1 1105 	ubfx	r1, r1, #4, #6
 80032d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	4299      	cmp	r1, r3
 80032d8:	d001      	beq.n	80032de <HAL_RCC_OscConfig+0x596>
        return HAL_ERROR;
 80032da:	2001      	movs	r0, #1
 80032dc:	e024      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032de:	f3c0 0208 	ubfx	r2, r0, #0, #9
 80032e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80032e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d001      	beq.n	80032ee <HAL_RCC_OscConfig+0x5a6>
        return HAL_ERROR;
 80032ea:	2001      	movs	r0, #1
 80032ec:	e01c      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032ee:	f3c0 2246 	ubfx	r2, r0, #9, #7
 80032f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80032f4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d001      	beq.n	80032fe <HAL_RCC_OscConfig+0x5b6>
        return HAL_ERROR;
 80032fa:	2001      	movs	r0, #1
 80032fc:	e014      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80032fe:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8003302:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003304:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003306:	429a      	cmp	r2, r3
 8003308:	d111      	bne.n	800332e <HAL_RCC_OscConfig+0x5e6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800330a:	f3c0 6006 	ubfx	r0, r0, #24, #7
 800330e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003310:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003312:	4298      	cmp	r0, r3
 8003314:	d00d      	beq.n	8003332 <HAL_RCC_OscConfig+0x5ea>
        return HAL_ERROR;
 8003316:	2001      	movs	r0, #1
 8003318:	e006      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
    return HAL_ERROR;
 800331a:	2001      	movs	r0, #1
}
 800331c:	4770      	bx	lr
        return HAL_ERROR;
 800331e:	2001      	movs	r0, #1
 8003320:	e002      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
        return HAL_ERROR;
 8003322:	2001      	movs	r0, #1
 8003324:	e000      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
  return HAL_OK;
 8003326:	2000      	movs	r0, #0
}
 8003328:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 800332a:	2001      	movs	r0, #1
 800332c:	e7fc      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
 800332e:	2001      	movs	r0, #1
 8003330:	e7fa      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
  return HAL_OK;
 8003332:	2000      	movs	r0, #0
 8003334:	e7f8      	b.n	8003328 <HAL_RCC_OscConfig+0x5e0>
 8003336:	bf00      	nop

08003338 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003338:	4b72      	ldr	r3, [pc, #456]	; (8003504 <HAL_RCC_GetSysClockFreq+0x1cc>)
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003340:	2b10      	cmp	r3, #16
 8003342:	f000 80db 	beq.w	80034fc <HAL_RCC_GetSysClockFreq+0x1c4>
 8003346:	2b18      	cmp	r3, #24
 8003348:	d010      	beq.n	800336c <HAL_RCC_GetSysClockFreq+0x34>
 800334a:	b10b      	cbz	r3, 8003350 <HAL_RCC_GetSysClockFreq+0x18>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800334c:	486e      	ldr	r0, [pc, #440]	; (8003508 <HAL_RCC_GetSysClockFreq+0x1d0>)
 800334e:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003350:	4b6c      	ldr	r3, [pc, #432]	; (8003504 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f013 0f20 	tst.w	r3, #32
 8003358:	f000 80d2 	beq.w	8003500 <HAL_RCC_GetSysClockFreq+0x1c8>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800335c:	4b69      	ldr	r3, [pc, #420]	; (8003504 <HAL_RCC_GetSysClockFreq+0x1cc>)
 800335e:	6818      	ldr	r0, [r3, #0]
 8003360:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8003364:	4b69      	ldr	r3, [pc, #420]	; (800350c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003366:	fa23 f000 	lsr.w	r0, r3, r0
 800336a:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800336c:	4a65      	ldr	r2, [pc, #404]	; (8003504 <HAL_RCC_GetSysClockFreq+0x1cc>)
 800336e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003370:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003374:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003376:	f3c0 1005 	ubfx	r0, r0, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800337a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800337c:	f003 0301 	and.w	r3, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003380:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003382:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8003386:	fb03 f302 	mul.w	r3, r3, r2
 800338a:	ee07 3a90 	vmov	s15, r3
 800338e:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 8003392:	2800      	cmp	r0, #0
 8003394:	f000 80b5 	beq.w	8003502 <HAL_RCC_GetSysClockFreq+0x1ca>
    {
      switch (pllsource)
 8003398:	2901      	cmp	r1, #1
 800339a:	d066      	beq.n	800346a <HAL_RCC_GetSysClockFreq+0x132>
 800339c:	b1f9      	cbz	r1, 80033de <HAL_RCC_GetSysClockFreq+0xa6>
 800339e:	2902      	cmp	r1, #2
 80033a0:	f000 808f 	beq.w	80034c2 <HAL_RCC_GetSysClockFreq+0x18a>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033a4:	ee07 0a10 	vmov	s14, r0
 80033a8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80033ac:	ed9f 6a58 	vldr	s12, [pc, #352]	; 8003510 <HAL_RCC_GetSysClockFreq+0x1d8>
 80033b0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80033b4:	4b53      	ldr	r3, [pc, #332]	; (8003504 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80033b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033bc:	ee06 3a90 	vmov	s13, r3
 80033c0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80033c4:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8003514 <HAL_RCC_GetSysClockFreq+0x1dc>
 80033c8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80033cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033d8:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 80033dc:	e061      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x16a>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033de:	4b49      	ldr	r3, [pc, #292]	; (8003504 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f013 0f20 	tst.w	r3, #32
 80033e6:	d023      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0xf8>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80033e8:	4946      	ldr	r1, [pc, #280]	; (8003504 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80033ea:	680a      	ldr	r2, [r1, #0]
 80033ec:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80033f0:	4b46      	ldr	r3, [pc, #280]	; (800350c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80033f2:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033f4:	ee07 3a10 	vmov	s14, r3
 80033f8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80033fc:	ee07 0a10 	vmov	s14, r0
 8003400:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8003404:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8003408:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800340a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800340e:	ee06 3a90 	vmov	s13, r3
 8003412:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003416:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8003514 <HAL_RCC_GetSysClockFreq+0x1dc>
 800341a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800341e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800342a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800342e:	e038      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x16a>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003430:	ee07 0a10 	vmov	s14, r0
 8003434:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003438:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8003518 <HAL_RCC_GetSysClockFreq+0x1e0>
 800343c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003440:	4b30      	ldr	r3, [pc, #192]	; (8003504 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003448:	ee06 3a90 	vmov	s13, r3
 800344c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003450:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8003514 <HAL_RCC_GetSysClockFreq+0x1dc>
 8003454:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003458:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800345c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003460:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003464:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003468:	e01b      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x16a>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800346a:	ee07 0a10 	vmov	s14, r0
 800346e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003472:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8003510 <HAL_RCC_GetSysClockFreq+0x1d8>
 8003476:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800347a:	4b22      	ldr	r3, [pc, #136]	; (8003504 <HAL_RCC_GetSysClockFreq+0x1cc>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003482:	ee06 3a90 	vmov	s13, r3
 8003486:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800348a:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8003514 <HAL_RCC_GetSysClockFreq+0x1dc>
 800348e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800349a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800349e:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80034a2:	4b18      	ldr	r3, [pc, #96]	; (8003504 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80034aa:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80034ac:	ee07 3a90 	vmov	s15, r3
 80034b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80034b8:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80034bc:	ee17 0a90 	vmov	r0, s15
 80034c0:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034c2:	ee07 0a10 	vmov	s14, r0
 80034c6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80034ca:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800351c <HAL_RCC_GetSysClockFreq+0x1e4>
 80034ce:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80034d2:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034da:	ee06 3a90 	vmov	s13, r3
 80034de:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80034e2:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8003514 <HAL_RCC_GetSysClockFreq+0x1dc>
 80034e6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80034ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034f6:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 80034fa:	e7d2      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x16a>
    sysclockfreq = HSE_VALUE;
 80034fc:	4808      	ldr	r0, [pc, #32]	; (8003520 <HAL_RCC_GetSysClockFreq+0x1e8>)
 80034fe:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003500:	4802      	ldr	r0, [pc, #8]	; (800350c <HAL_RCC_GetSysClockFreq+0x1d4>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8003502:	4770      	bx	lr
 8003504:	58024400 	.word	0x58024400
 8003508:	003d0900 	.word	0x003d0900
 800350c:	03d09000 	.word	0x03d09000
 8003510:	4a742400 	.word	0x4a742400
 8003514:	39000000 	.word	0x39000000
 8003518:	4c742400 	.word	0x4c742400
 800351c:	4bbebc20 	.word	0x4bbebc20
 8003520:	017d7840 	.word	0x017d7840

08003524 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003524:	2800      	cmp	r0, #0
 8003526:	f000 8136 	beq.w	8003796 <HAL_RCC_ClockConfig+0x272>
 800352a:	4603      	mov	r3, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800352c:	4a9c      	ldr	r2, [pc, #624]	; (80037a0 <HAL_RCC_ClockConfig+0x27c>)
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	f002 020f 	and.w	r2, r2, #15
 8003534:	428a      	cmp	r2, r1
 8003536:	d20c      	bcs.n	8003552 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003538:	4899      	ldr	r0, [pc, #612]	; (80037a0 <HAL_RCC_ClockConfig+0x27c>)
 800353a:	6802      	ldr	r2, [r0, #0]
 800353c:	f022 020f 	bic.w	r2, r2, #15
 8003540:	430a      	orrs	r2, r1
 8003542:	6002      	str	r2, [r0, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003544:	6802      	ldr	r2, [r0, #0]
 8003546:	f002 020f 	and.w	r2, r2, #15
 800354a:	428a      	cmp	r2, r1
 800354c:	d001      	beq.n	8003552 <HAL_RCC_ClockConfig+0x2e>
      return HAL_ERROR;
 800354e:	2001      	movs	r0, #1
}
 8003550:	4770      	bx	lr
{
 8003552:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	f012 0f04 	tst.w	r2, #4
 800355a:	d00c      	beq.n	8003576 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800355c:	6918      	ldr	r0, [r3, #16]
 800355e:	4a91      	ldr	r2, [pc, #580]	; (80037a4 <HAL_RCC_ClockConfig+0x280>)
 8003560:	6992      	ldr	r2, [r2, #24]
 8003562:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003566:	4290      	cmp	r0, r2
 8003568:	d905      	bls.n	8003576 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800356a:	4c8e      	ldr	r4, [pc, #568]	; (80037a4 <HAL_RCC_ClockConfig+0x280>)
 800356c:	69a2      	ldr	r2, [r4, #24]
 800356e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003572:	4310      	orrs	r0, r2
 8003574:	61a0      	str	r0, [r4, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	f012 0f08 	tst.w	r2, #8
 800357c:	d00c      	beq.n	8003598 <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800357e:	6958      	ldr	r0, [r3, #20]
 8003580:	4a88      	ldr	r2, [pc, #544]	; (80037a4 <HAL_RCC_ClockConfig+0x280>)
 8003582:	69d2      	ldr	r2, [r2, #28]
 8003584:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003588:	4290      	cmp	r0, r2
 800358a:	d905      	bls.n	8003598 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800358c:	4c85      	ldr	r4, [pc, #532]	; (80037a4 <HAL_RCC_ClockConfig+0x280>)
 800358e:	69e2      	ldr	r2, [r4, #28]
 8003590:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003594:	4310      	orrs	r0, r2
 8003596:	61e0      	str	r0, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	f012 0f10 	tst.w	r2, #16
 800359e:	d00c      	beq.n	80035ba <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80035a0:	6998      	ldr	r0, [r3, #24]
 80035a2:	4a80      	ldr	r2, [pc, #512]	; (80037a4 <HAL_RCC_ClockConfig+0x280>)
 80035a4:	69d2      	ldr	r2, [r2, #28]
 80035a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80035aa:	4290      	cmp	r0, r2
 80035ac:	d905      	bls.n	80035ba <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035ae:	4c7d      	ldr	r4, [pc, #500]	; (80037a4 <HAL_RCC_ClockConfig+0x280>)
 80035b0:	69e2      	ldr	r2, [r4, #28]
 80035b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035b6:	4310      	orrs	r0, r2
 80035b8:	61e0      	str	r0, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	f012 0f20 	tst.w	r2, #32
 80035c0:	d00c      	beq.n	80035dc <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80035c2:	69d8      	ldr	r0, [r3, #28]
 80035c4:	4a77      	ldr	r2, [pc, #476]	; (80037a4 <HAL_RCC_ClockConfig+0x280>)
 80035c6:	6a12      	ldr	r2, [r2, #32]
 80035c8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80035cc:	4290      	cmp	r0, r2
 80035ce:	d905      	bls.n	80035dc <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80035d0:	4c74      	ldr	r4, [pc, #464]	; (80037a4 <HAL_RCC_ClockConfig+0x280>)
 80035d2:	6a22      	ldr	r2, [r4, #32]
 80035d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80035d8:	4310      	orrs	r0, r2
 80035da:	6220      	str	r0, [r4, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	f012 0f02 	tst.w	r2, #2
 80035e2:	d00c      	beq.n	80035fe <HAL_RCC_ClockConfig+0xda>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80035e4:	68d8      	ldr	r0, [r3, #12]
 80035e6:	4a6f      	ldr	r2, [pc, #444]	; (80037a4 <HAL_RCC_ClockConfig+0x280>)
 80035e8:	6992      	ldr	r2, [r2, #24]
 80035ea:	f002 020f 	and.w	r2, r2, #15
 80035ee:	4290      	cmp	r0, r2
 80035f0:	d905      	bls.n	80035fe <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f2:	4c6c      	ldr	r4, [pc, #432]	; (80037a4 <HAL_RCC_ClockConfig+0x280>)
 80035f4:	69a2      	ldr	r2, [r4, #24]
 80035f6:	f022 020f 	bic.w	r2, r2, #15
 80035fa:	4310      	orrs	r0, r2
 80035fc:	61a0      	str	r0, [r4, #24]
 80035fe:	461c      	mov	r4, r3
 8003600:	460d      	mov	r5, r1
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f013 0f01 	tst.w	r3, #1
 8003608:	d041      	beq.n	800368e <HAL_RCC_ClockConfig+0x16a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800360a:	4a66      	ldr	r2, [pc, #408]	; (80037a4 <HAL_RCC_ClockConfig+0x280>)
 800360c:	6993      	ldr	r3, [r2, #24]
 800360e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003612:	68a1      	ldr	r1, [r4, #8]
 8003614:	430b      	orrs	r3, r1
 8003616:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003618:	6863      	ldr	r3, [r4, #4]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d00a      	beq.n	8003634 <HAL_RCC_ClockConfig+0x110>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800361e:	2b03      	cmp	r3, #3
 8003620:	d027      	beq.n	8003672 <HAL_RCC_ClockConfig+0x14e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003622:	2b01      	cmp	r3, #1
 8003624:	d02c      	beq.n	8003680 <HAL_RCC_ClockConfig+0x15c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003626:	4a5f      	ldr	r2, [pc, #380]	; (80037a4 <HAL_RCC_ClockConfig+0x280>)
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	f012 0f04 	tst.w	r2, #4
 800362e:	d106      	bne.n	800363e <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 8003630:	2001      	movs	r0, #1
 8003632:	e0af      	b.n	8003794 <HAL_RCC_ClockConfig+0x270>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800363a:	f000 80ae 	beq.w	800379a <HAL_RCC_ClockConfig+0x276>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800363e:	4959      	ldr	r1, [pc, #356]	; (80037a4 <HAL_RCC_ClockConfig+0x280>)
 8003640:	690a      	ldr	r2, [r1, #16]
 8003642:	f022 0207 	bic.w	r2, r2, #7
 8003646:	4313      	orrs	r3, r2
 8003648:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 800364a:	f7fc fea5 	bl	8000398 <HAL_GetTick>
 800364e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003650:	4b54      	ldr	r3, [pc, #336]	; (80037a4 <HAL_RCC_ClockConfig+0x280>)
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003658:	6862      	ldr	r2, [r4, #4]
 800365a:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800365e:	d016      	beq.n	800368e <HAL_RCC_ClockConfig+0x16a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003660:	f7fc fe9a 	bl	8000398 <HAL_GetTick>
 8003664:	1b80      	subs	r0, r0, r6
 8003666:	f241 3388 	movw	r3, #5000	; 0x1388
 800366a:	4298      	cmp	r0, r3
 800366c:	d9f0      	bls.n	8003650 <HAL_RCC_ClockConfig+0x12c>
            return HAL_TIMEOUT;
 800366e:	2003      	movs	r0, #3
 8003670:	e090      	b.n	8003794 <HAL_RCC_ClockConfig+0x270>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003672:	4a4c      	ldr	r2, [pc, #304]	; (80037a4 <HAL_RCC_ClockConfig+0x280>)
 8003674:	6812      	ldr	r2, [r2, #0]
 8003676:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800367a:	d1e0      	bne.n	800363e <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 800367c:	2001      	movs	r0, #1
 800367e:	e089      	b.n	8003794 <HAL_RCC_ClockConfig+0x270>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003680:	4a48      	ldr	r2, [pc, #288]	; (80037a4 <HAL_RCC_ClockConfig+0x280>)
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003688:	d1d9      	bne.n	800363e <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 800368a:	2001      	movs	r0, #1
 800368c:	e082      	b.n	8003794 <HAL_RCC_ClockConfig+0x270>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	f013 0f02 	tst.w	r3, #2
 8003694:	d00c      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x18c>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003696:	68e2      	ldr	r2, [r4, #12]
 8003698:	4b42      	ldr	r3, [pc, #264]	; (80037a4 <HAL_RCC_ClockConfig+0x280>)
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	f003 030f 	and.w	r3, r3, #15
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d205      	bcs.n	80036b0 <HAL_RCC_ClockConfig+0x18c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a4:	493f      	ldr	r1, [pc, #252]	; (80037a4 <HAL_RCC_ClockConfig+0x280>)
 80036a6:	698b      	ldr	r3, [r1, #24]
 80036a8:	f023 030f 	bic.w	r3, r3, #15
 80036ac:	431a      	orrs	r2, r3
 80036ae:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036b0:	4b3b      	ldr	r3, [pc, #236]	; (80037a0 <HAL_RCC_ClockConfig+0x27c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	42ab      	cmp	r3, r5
 80036ba:	d90c      	bls.n	80036d6 <HAL_RCC_ClockConfig+0x1b2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036bc:	4a38      	ldr	r2, [pc, #224]	; (80037a0 <HAL_RCC_ClockConfig+0x27c>)
 80036be:	6813      	ldr	r3, [r2, #0]
 80036c0:	f023 030f 	bic.w	r3, r3, #15
 80036c4:	432b      	orrs	r3, r5
 80036c6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c8:	6813      	ldr	r3, [r2, #0]
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	42ab      	cmp	r3, r5
 80036d0:	d001      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x1b2>
      return HAL_ERROR;
 80036d2:	2001      	movs	r0, #1
 80036d4:	e05e      	b.n	8003794 <HAL_RCC_ClockConfig+0x270>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	f013 0f04 	tst.w	r3, #4
 80036dc:	d00c      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x1d4>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80036de:	6922      	ldr	r2, [r4, #16]
 80036e0:	4b30      	ldr	r3, [pc, #192]	; (80037a4 <HAL_RCC_ClockConfig+0x280>)
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d205      	bcs.n	80036f8 <HAL_RCC_ClockConfig+0x1d4>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036ec:	492d      	ldr	r1, [pc, #180]	; (80037a4 <HAL_RCC_ClockConfig+0x280>)
 80036ee:	698b      	ldr	r3, [r1, #24]
 80036f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f4:	431a      	orrs	r2, r3
 80036f6:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f8:	6823      	ldr	r3, [r4, #0]
 80036fa:	f013 0f08 	tst.w	r3, #8
 80036fe:	d00c      	beq.n	800371a <HAL_RCC_ClockConfig+0x1f6>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003700:	6962      	ldr	r2, [r4, #20]
 8003702:	4b28      	ldr	r3, [pc, #160]	; (80037a4 <HAL_RCC_ClockConfig+0x280>)
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800370a:	429a      	cmp	r2, r3
 800370c:	d205      	bcs.n	800371a <HAL_RCC_ClockConfig+0x1f6>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800370e:	4925      	ldr	r1, [pc, #148]	; (80037a4 <HAL_RCC_ClockConfig+0x280>)
 8003710:	69cb      	ldr	r3, [r1, #28]
 8003712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003716:	431a      	orrs	r2, r3
 8003718:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371a:	6823      	ldr	r3, [r4, #0]
 800371c:	f013 0f10 	tst.w	r3, #16
 8003720:	d00c      	beq.n	800373c <HAL_RCC_ClockConfig+0x218>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003722:	69a2      	ldr	r2, [r4, #24]
 8003724:	4b1f      	ldr	r3, [pc, #124]	; (80037a4 <HAL_RCC_ClockConfig+0x280>)
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800372c:	429a      	cmp	r2, r3
 800372e:	d205      	bcs.n	800373c <HAL_RCC_ClockConfig+0x218>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003730:	491c      	ldr	r1, [pc, #112]	; (80037a4 <HAL_RCC_ClockConfig+0x280>)
 8003732:	69cb      	ldr	r3, [r1, #28]
 8003734:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003738:	431a      	orrs	r2, r3
 800373a:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	f013 0f20 	tst.w	r3, #32
 8003742:	d00c      	beq.n	800375e <HAL_RCC_ClockConfig+0x23a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003744:	69e2      	ldr	r2, [r4, #28]
 8003746:	4b17      	ldr	r3, [pc, #92]	; (80037a4 <HAL_RCC_ClockConfig+0x280>)
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800374e:	429a      	cmp	r2, r3
 8003750:	d205      	bcs.n	800375e <HAL_RCC_ClockConfig+0x23a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003752:	4914      	ldr	r1, [pc, #80]	; (80037a4 <HAL_RCC_ClockConfig+0x280>)
 8003754:	6a0b      	ldr	r3, [r1, #32]
 8003756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375a:	431a      	orrs	r2, r3
 800375c:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800375e:	f7ff fdeb 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 8003762:	4910      	ldr	r1, [pc, #64]	; (80037a4 <HAL_RCC_ClockConfig+0x280>)
 8003764:	698b      	ldr	r3, [r1, #24]
 8003766:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800376a:	4a0f      	ldr	r2, [pc, #60]	; (80037a8 <HAL_RCC_ClockConfig+0x284>)
 800376c:	5cd3      	ldrb	r3, [r2, r3]
 800376e:	f003 031f 	and.w	r3, r3, #31
 8003772:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003774:	698b      	ldr	r3, [r1, #24]
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	5cd3      	ldrb	r3, [r2, r3]
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	fa20 f303 	lsr.w	r3, r0, r3
 8003784:	4a09      	ldr	r2, [pc, #36]	; (80037ac <HAL_RCC_ClockConfig+0x288>)
 8003786:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8003788:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <HAL_RCC_ClockConfig+0x28c>)
 800378a:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 800378c:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <HAL_RCC_ClockConfig+0x290>)
 800378e:	6818      	ldr	r0, [r3, #0]
 8003790:	f7fc fda2 	bl	80002d8 <HAL_InitTick>
}
 8003794:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003796:	2001      	movs	r0, #1
 8003798:	4770      	bx	lr
          return HAL_ERROR;
 800379a:	2001      	movs	r0, #1
 800379c:	e7fa      	b.n	8003794 <HAL_RCC_ClockConfig+0x270>
 800379e:	bf00      	nop
 80037a0:	52002000 	.word	0x52002000
 80037a4:	58024400 	.word	0x58024400
 80037a8:	08009f98 	.word	0x08009f98
 80037ac:	2000028c 	.word	0x2000028c
 80037b0:	20000288 	.word	0x20000288
 80037b4:	20000004 	.word	0x20000004

080037b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b8:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80037ba:	f7ff fdbd 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 80037be:	4a0b      	ldr	r2, [pc, #44]	; (80037ec <HAL_RCC_GetHCLKFreq+0x34>)
 80037c0:	6993      	ldr	r3, [r2, #24]
 80037c2:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80037c6:	490a      	ldr	r1, [pc, #40]	; (80037f0 <HAL_RCC_GetHCLKFreq+0x38>)
 80037c8:	5ccb      	ldrb	r3, [r1, r3]
 80037ca:	f003 031f 	and.w	r3, r3, #31
 80037ce:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037d2:	6992      	ldr	r2, [r2, #24]
 80037d4:	f002 020f 	and.w	r2, r2, #15
 80037d8:	5c88      	ldrb	r0, [r1, r2]
 80037da:	f000 001f 	and.w	r0, r0, #31
 80037de:	fa23 f000 	lsr.w	r0, r3, r0
 80037e2:	4a04      	ldr	r2, [pc, #16]	; (80037f4 <HAL_RCC_GetHCLKFreq+0x3c>)
 80037e4:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037e6:	4a04      	ldr	r2, [pc, #16]	; (80037f8 <HAL_RCC_GetHCLKFreq+0x40>)
 80037e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80037ea:	bd08      	pop	{r3, pc}
 80037ec:	58024400 	.word	0x58024400
 80037f0:	08009f98 	.word	0x08009f98
 80037f4:	2000028c 	.word	0x2000028c
 80037f8:	20000288 	.word	0x20000288

080037fc <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80037fc:	4b40      	ldr	r3, [pc, #256]	; (8003900 <RCCEx_PLL2_Config+0x104>)
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	2b03      	cmp	r3, #3
 8003806:	d079      	beq.n	80038fc <RCCEx_PLL2_Config+0x100>
{
 8003808:	b570      	push	{r4, r5, r6, lr}
 800380a:	460e      	mov	r6, r1
 800380c:	4604      	mov	r4, r0


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800380e:	4a3c      	ldr	r2, [pc, #240]	; (8003900 <RCCEx_PLL2_Config+0x104>)
 8003810:	6813      	ldr	r3, [r2, #0]
 8003812:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003816:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003818:	f7fc fdbe 	bl	8000398 <HAL_GetTick>
 800381c:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800381e:	4b38      	ldr	r3, [pc, #224]	; (8003900 <RCCEx_PLL2_Config+0x104>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003826:	d006      	beq.n	8003836 <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003828:	f7fc fdb6 	bl	8000398 <HAL_GetTick>
 800382c:	1b40      	subs	r0, r0, r5
 800382e:	2802      	cmp	r0, #2
 8003830:	d9f5      	bls.n	800381e <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 8003832:	2003      	movs	r0, #3

  }


  return status;
}
 8003834:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003836:	4b32      	ldr	r3, [pc, #200]	; (8003900 <RCCEx_PLL2_Config+0x104>)
 8003838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800383a:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 800383e:	6821      	ldr	r1, [r4, #0]
 8003840:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8003844:	629a      	str	r2, [r3, #40]	; 0x28
 8003846:	6862      	ldr	r2, [r4, #4]
 8003848:	3a01      	subs	r2, #1
 800384a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800384e:	68a1      	ldr	r1, [r4, #8]
 8003850:	3901      	subs	r1, #1
 8003852:	0249      	lsls	r1, r1, #9
 8003854:	b289      	uxth	r1, r1
 8003856:	430a      	orrs	r2, r1
 8003858:	68e1      	ldr	r1, [r4, #12]
 800385a:	3901      	subs	r1, #1
 800385c:	0409      	lsls	r1, r1, #16
 800385e:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8003862:	430a      	orrs	r2, r1
 8003864:	6921      	ldr	r1, [r4, #16]
 8003866:	3901      	subs	r1, #1
 8003868:	0609      	lsls	r1, r1, #24
 800386a:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800386e:	430a      	orrs	r2, r1
 8003870:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003874:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003878:	6961      	ldr	r1, [r4, #20]
 800387a:	430a      	orrs	r2, r1
 800387c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800387e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003880:	f022 0220 	bic.w	r2, r2, #32
 8003884:	69a1      	ldr	r1, [r4, #24]
 8003886:	430a      	orrs	r2, r1
 8003888:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800388a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388c:	f022 0210 	bic.w	r2, r2, #16
 8003890:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003892:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003894:	4a1b      	ldr	r2, [pc, #108]	; (8003904 <RCCEx_PLL2_Config+0x108>)
 8003896:	400a      	ands	r2, r1
 8003898:	69e1      	ldr	r1, [r4, #28]
 800389a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800389e:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 80038a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a2:	f042 0210 	orr.w	r2, r2, #16
 80038a6:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80038a8:	b9c6      	cbnz	r6, 80038dc <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80038aa:	461a      	mov	r2, r3
 80038ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038b2:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 80038b4:	4a12      	ldr	r2, [pc, #72]	; (8003900 <RCCEx_PLL2_Config+0x104>)
 80038b6:	6813      	ldr	r3, [r2, #0]
 80038b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038bc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80038be:	f7fc fd6b 	bl	8000398 <HAL_GetTick>
 80038c2:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80038c4:	4b0e      	ldr	r3, [pc, #56]	; (8003900 <RCCEx_PLL2_Config+0x104>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80038cc:	d114      	bne.n	80038f8 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80038ce:	f7fc fd63 	bl	8000398 <HAL_GetTick>
 80038d2:	1b00      	subs	r0, r0, r4
 80038d4:	2802      	cmp	r0, #2
 80038d6:	d9f5      	bls.n	80038c4 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 80038d8:	2003      	movs	r0, #3
 80038da:	e7ab      	b.n	8003834 <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 80038dc:	2e01      	cmp	r6, #1
 80038de:	d005      	beq.n	80038ec <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80038e0:	4a07      	ldr	r2, [pc, #28]	; (8003900 <RCCEx_PLL2_Config+0x104>)
 80038e2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80038e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038e8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038ea:	e7e3      	b.n	80038b4 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80038ec:	4a04      	ldr	r2, [pc, #16]	; (8003900 <RCCEx_PLL2_Config+0x104>)
 80038ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80038f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038f6:	e7dd      	b.n	80038b4 <RCCEx_PLL2_Config+0xb8>
  return status;
 80038f8:	2000      	movs	r0, #0
 80038fa:	e79b      	b.n	8003834 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 80038fc:	2001      	movs	r0, #1
}
 80038fe:	4770      	bx	lr
 8003900:	58024400 	.word	0x58024400
 8003904:	ffff0007 	.word	0xffff0007

08003908 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003908:	4b40      	ldr	r3, [pc, #256]	; (8003a0c <RCCEx_PLL3_Config+0x104>)
 800390a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390c:	f003 0303 	and.w	r3, r3, #3
 8003910:	2b03      	cmp	r3, #3
 8003912:	d079      	beq.n	8003a08 <RCCEx_PLL3_Config+0x100>
{
 8003914:	b570      	push	{r4, r5, r6, lr}
 8003916:	460e      	mov	r6, r1
 8003918:	4604      	mov	r4, r0


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800391a:	4a3c      	ldr	r2, [pc, #240]	; (8003a0c <RCCEx_PLL3_Config+0x104>)
 800391c:	6813      	ldr	r3, [r2, #0]
 800391e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003922:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003924:	f7fc fd38 	bl	8000398 <HAL_GetTick>
 8003928:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800392a:	4b38      	ldr	r3, [pc, #224]	; (8003a0c <RCCEx_PLL3_Config+0x104>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003932:	d006      	beq.n	8003942 <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003934:	f7fc fd30 	bl	8000398 <HAL_GetTick>
 8003938:	1b40      	subs	r0, r0, r5
 800393a:	2802      	cmp	r0, #2
 800393c:	d9f5      	bls.n	800392a <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 800393e:	2003      	movs	r0, #3

  }


  return status;
}
 8003940:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003942:	4b32      	ldr	r3, [pc, #200]	; (8003a0c <RCCEx_PLL3_Config+0x104>)
 8003944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003946:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 800394a:	6821      	ldr	r1, [r4, #0]
 800394c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8003950:	629a      	str	r2, [r3, #40]	; 0x28
 8003952:	6862      	ldr	r2, [r4, #4]
 8003954:	3a01      	subs	r2, #1
 8003956:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800395a:	68a1      	ldr	r1, [r4, #8]
 800395c:	3901      	subs	r1, #1
 800395e:	0249      	lsls	r1, r1, #9
 8003960:	b289      	uxth	r1, r1
 8003962:	430a      	orrs	r2, r1
 8003964:	68e1      	ldr	r1, [r4, #12]
 8003966:	3901      	subs	r1, #1
 8003968:	0409      	lsls	r1, r1, #16
 800396a:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800396e:	430a      	orrs	r2, r1
 8003970:	6921      	ldr	r1, [r4, #16]
 8003972:	3901      	subs	r1, #1
 8003974:	0609      	lsls	r1, r1, #24
 8003976:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800397a:	430a      	orrs	r2, r1
 800397c:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800397e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003980:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003984:	6961      	ldr	r1, [r4, #20]
 8003986:	430a      	orrs	r2, r1
 8003988:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800398a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003990:	69a1      	ldr	r1, [r4, #24]
 8003992:	430a      	orrs	r2, r1
 8003994:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003998:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800399c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800399e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80039a0:	4a1b      	ldr	r2, [pc, #108]	; (8003a10 <RCCEx_PLL3_Config+0x108>)
 80039a2:	400a      	ands	r2, r1
 80039a4:	69e1      	ldr	r1, [r4, #28]
 80039a6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80039aa:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 80039ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039b2:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80039b4:	b9c6      	cbnz	r6, 80039e8 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80039b6:	461a      	mov	r2, r3
 80039b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039be:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 80039c0:	4a12      	ldr	r2, [pc, #72]	; (8003a0c <RCCEx_PLL3_Config+0x104>)
 80039c2:	6813      	ldr	r3, [r2, #0]
 80039c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80039ca:	f7fc fce5 	bl	8000398 <HAL_GetTick>
 80039ce:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80039d0:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <RCCEx_PLL3_Config+0x104>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80039d8:	d114      	bne.n	8003a04 <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80039da:	f7fc fcdd 	bl	8000398 <HAL_GetTick>
 80039de:	1b00      	subs	r0, r0, r4
 80039e0:	2802      	cmp	r0, #2
 80039e2:	d9f5      	bls.n	80039d0 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 80039e4:	2003      	movs	r0, #3
 80039e6:	e7ab      	b.n	8003940 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 80039e8:	2e01      	cmp	r6, #1
 80039ea:	d005      	beq.n	80039f8 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80039ec:	4a07      	ldr	r2, [pc, #28]	; (8003a0c <RCCEx_PLL3_Config+0x104>)
 80039ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80039f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80039f6:	e7e3      	b.n	80039c0 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80039f8:	4a04      	ldr	r2, [pc, #16]	; (8003a0c <RCCEx_PLL3_Config+0x104>)
 80039fa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80039fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a00:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a02:	e7dd      	b.n	80039c0 <RCCEx_PLL3_Config+0xb8>
  return status;
 8003a04:	2000      	movs	r0, #0
 8003a06:	e79b      	b.n	8003940 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8003a08:	2001      	movs	r0, #1
}
 8003a0a:	4770      	bx	lr
 8003a0c:	58024400 	.word	0x58024400
 8003a10:	ffff0007 	.word	0xffff0007

08003a14 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a16:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a18:	6803      	ldr	r3, [r0, #0]
 8003a1a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003a1e:	d02b      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x64>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003a20:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003a22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a26:	d018      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x46>
 8003a28:	d907      	bls.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003a2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a2e:	d01d      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003a30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a34:	d12e      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x80>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a36:	2500      	movs	r5, #0
 8003a38:	e006      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x34>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003a3a:	bb5b      	cbnz	r3, 8003a94 <HAL_RCCEx_PeriphCLKConfig+0x80>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a3c:	4a93      	ldr	r2, [pc, #588]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003a3e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a44:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a46:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a48:	4a90      	ldr	r2, [pc, #576]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003a4a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003a4c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003a50:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003a52:	430b      	orrs	r3, r1
 8003a54:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a56:	2600      	movs	r6, #0
 8003a58:	e010      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a5a:	2102      	movs	r1, #2
 8003a5c:	3004      	adds	r0, #4
 8003a5e:	f7ff fecd 	bl	80037fc <RCCEx_PLL2_Config>
 8003a62:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003a64:	2d00      	cmp	r5, #0
 8003a66:	d0ef      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003a68:	462e      	mov	r6, r5
 8003a6a:	e007      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a6c:	2102      	movs	r1, #2
 8003a6e:	3024      	adds	r0, #36	; 0x24
 8003a70:	f7ff ff4a 	bl	8003908 <RCCEx_PLL3_Config>
 8003a74:	4605      	mov	r5, r0
      break;
 8003a76:	e7f5      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x50>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a78:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a7a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003a82:	d017      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003a84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d832      	bhi.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003a8a:	e8df f003 	tbb	[pc, r3]
 8003a8e:	2406      	.short	0x2406
 8003a90:	0b2a      	.short	0x0b2a
 8003a92:	0b          	.byte	0x0b
 8003a93:	00          	.byte	0x00
      ret = HAL_ERROR;
 8003a94:	2601      	movs	r6, #1
 8003a96:	4635      	mov	r5, r6
 8003a98:	e7f0      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a9a:	4a7c      	ldr	r2, [pc, #496]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003a9c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aa2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003aa4:	bb3d      	cbnz	r5, 8003af6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aa6:	4a79      	ldr	r2, [pc, #484]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003aa8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003aaa:	f023 0307 	bic.w	r3, r3, #7
 8003aae:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003ab0:	430b      	orrs	r3, r1
 8003ab2:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003aba:	d033      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003abc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003abe:	2b80      	cmp	r3, #128	; 0x80
 8003ac0:	d044      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x138>
 8003ac2:	d81a      	bhi.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8003ac4:	b30b      	cbz	r3, 8003b0a <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8003ac6:	2b40      	cmp	r3, #64	; 0x40
 8003ac8:	d11c      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003aca:	2100      	movs	r1, #0
 8003acc:	1d20      	adds	r0, r4, #4
 8003ace:	f7ff fe95 	bl	80037fc <RCCEx_PLL2_Config>
 8003ad2:	4605      	mov	r5, r0
      break;
 8003ad4:	e01e      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x100>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	1d20      	adds	r0, r4, #4
 8003ada:	f7ff fe8f 	bl	80037fc <RCCEx_PLL2_Config>
 8003ade:	4605      	mov	r5, r0
      break;
 8003ae0:	e7e0      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003ae8:	f7ff ff0e 	bl	8003908 <RCCEx_PLL3_Config>
 8003aec:	4605      	mov	r5, r0
      break;
 8003aee:	e7d9      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = HAL_ERROR;
 8003af0:	2601      	movs	r6, #1
 8003af2:	4635      	mov	r5, r6
 8003af4:	e7de      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003af6:	462e      	mov	r6, r5
 8003af8:	e7dc      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003afa:	2bc0      	cmp	r3, #192	; 0xc0
 8003afc:	d00a      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b02:	d007      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x100>
      ret = HAL_ERROR;
 8003b04:	2601      	movs	r6, #1
 8003b06:	4635      	mov	r5, r6
 8003b08:	e00c      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b0a:	4a60      	ldr	r2, [pc, #384]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003b0c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003b0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b12:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003b14:	bb0d      	cbnz	r5, 8003b5a <HAL_RCCEx_PeriphCLKConfig+0x146>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003b16:	4a5d      	ldr	r2, [pc, #372]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003b18:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003b1a:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8003b1e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003b20:	430b      	orrs	r3, r1
 8003b22:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b24:	6823      	ldr	r3, [r4, #0]
 8003b26:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003b2a:	d02f      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x178>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003b2c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8003b30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b34:	d03e      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8003b36:	d812      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003b38:	b1d3      	cbz	r3, 8003b70 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003b3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b3e:	d114      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x156>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b40:	2100      	movs	r1, #0
 8003b42:	1d20      	adds	r0, r4, #4
 8003b44:	f7ff fe5a 	bl	80037fc <RCCEx_PLL2_Config>
 8003b48:	4605      	mov	r5, r0
      break;
 8003b4a:	e016      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003b52:	f7ff fed9 	bl	8003908 <RCCEx_PLL3_Config>
 8003b56:	4605      	mov	r5, r0
      break;
 8003b58:	e7dc      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003b5a:	462e      	mov	r6, r5
 8003b5c:	e7e2      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003b5e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b62:	d00a      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b68:	d007      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = HAL_ERROR;
 8003b6a:	2601      	movs	r6, #1
 8003b6c:	4635      	mov	r5, r6
 8003b6e:	e00d      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x178>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b70:	4a46      	ldr	r2, [pc, #280]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003b72:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b78:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003b7a:	bb15      	cbnz	r5, 8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003b7c:	4a43      	ldr	r2, [pc, #268]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003b7e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003b80:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8003b84:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003b8c:	6823      	ldr	r3, [r4, #0]
 8003b8e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003b92:	d02f      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->Sai4BClockSelection)
 8003b94:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8003b98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b9c:	d037      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003b9e:	d812      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003ba0:	b1d3      	cbz	r3, 8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8003ba2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ba6:	d114      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ba8:	2100      	movs	r1, #0
 8003baa:	1d20      	adds	r0, r4, #4
 8003bac:	f7ff fe26 	bl	80037fc <RCCEx_PLL2_Config>
 8003bb0:	4605      	mov	r5, r0
      break;
 8003bb2:	e016      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003bba:	f7ff fea5 	bl	8003908 <RCCEx_PLL3_Config>
 8003bbe:	4605      	mov	r5, r0
      break;
 8003bc0:	e7db      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003bc2:	462e      	mov	r6, r5
 8003bc4:	e7e2      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x178>
    switch(PeriphClkInit->Sai4BClockSelection)
 8003bc6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bca:	d00a      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003bcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bd0:	d007      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      ret = HAL_ERROR;
 8003bd2:	2601      	movs	r6, #1
 8003bd4:	4635      	mov	r5, r6
 8003bd6:	e00d      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bd8:	4a2c      	ldr	r2, [pc, #176]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003bda:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003be0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003be2:	b9dd      	cbnz	r5, 8003c1c <HAL_RCCEx_PeriphCLKConfig+0x208>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003be4:	4a29      	ldr	r2, [pc, #164]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003be6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003be8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003bec:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003bf4:	6823      	ldr	r3, [r4, #0]
 8003bf6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003bfa:	d02a      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x23e>
    switch(PeriphClkInit->QspiClockSelection)
 8003bfc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003bfe:	2b10      	cmp	r3, #16
 8003c00:	d012      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003c02:	d90d      	bls.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d01d      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003c08:	2b30      	cmp	r3, #48	; 0x30
 8003c0a:	d012      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003c0c:	e009      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x20e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c0e:	2100      	movs	r1, #0
 8003c10:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003c14:	f7ff fe78 	bl	8003908 <RCCEx_PLL3_Config>
 8003c18:	4605      	mov	r5, r0
      break;
 8003c1a:	e7e2      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003c1c:	462e      	mov	r6, r5
 8003c1e:	e7e9      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->QspiClockSelection)
 8003c20:	b13b      	cbz	r3, 8003c32 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      ret = HAL_ERROR;
 8003c22:	2601      	movs	r6, #1
 8003c24:	4635      	mov	r5, r6
 8003c26:	e014      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c28:	4a18      	ldr	r2, [pc, #96]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003c2a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c30:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003c32:	b96d      	cbnz	r5, 8003c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c34:	4a15      	ldr	r2, [pc, #84]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003c36:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003c38:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003c3c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003c3e:	430b      	orrs	r3, r1
 8003c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c42:	e006      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x23e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c44:	2102      	movs	r1, #2
 8003c46:	1d20      	adds	r0, r4, #4
 8003c48:	f7ff fdd8 	bl	80037fc <RCCEx_PLL2_Config>
 8003c4c:	4605      	mov	r5, r0
      break;
 8003c4e:	e7f0      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003c50:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003c52:	6823      	ldr	r3, [r4, #0]
 8003c54:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003c58:	d027      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003c5a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c60:	d03e      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003c62:	d809      	bhi.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003c64:	b1a3      	cbz	r3, 8003c90 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c6a:	d10b      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x270>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	1d20      	adds	r0, r4, #4
 8003c70:	f7ff fdc4 	bl	80037fc <RCCEx_PLL2_Config>
 8003c74:	4605      	mov	r5, r0
      break;
 8003c76:	e010      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x286>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003c78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c7c:	d00d      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003c7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c82:	d00a      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x286>
      ret = HAL_ERROR;
 8003c84:	2601      	movs	r6, #1
 8003c86:	4635      	mov	r5, r6
 8003c88:	e00f      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003c8a:	bf00      	nop
 8003c8c:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c90:	4a93      	ldr	r2, [pc, #588]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003c92:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c98:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003c9a:	bb45      	cbnz	r5, 8003cee <HAL_RCCEx_PeriphCLKConfig+0x2da>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c9c:	4a90      	ldr	r2, [pc, #576]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003c9e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ca4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003ca6:	430b      	orrs	r3, r1
 8003ca8:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003cb0:	d033      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Spi45ClockSelection)
 8003cb2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003cb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cb8:	d027      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8003cba:	d81a      	bhi.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003cbc:	b13b      	cbz	r3, 8003cce <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc2:	d11f      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	1d20      	adds	r0, r4, #4
 8003cc8:	f7ff fd98 	bl	80037fc <RCCEx_PLL2_Config>
 8003ccc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003cce:	bb1d      	cbnz	r5, 8003d18 <HAL_RCCEx_PeriphCLKConfig+0x304>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003cd0:	4a83      	ldr	r2, [pc, #524]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003cd2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003cd4:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003cd8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003cda:	430b      	orrs	r3, r1
 8003cdc:	6513      	str	r3, [r2, #80]	; 0x50
 8003cde:	e01c      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x306>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003ce6:	f7ff fe0f 	bl	8003908 <RCCEx_PLL3_Config>
 8003cea:	4605      	mov	r5, r0
      break;
 8003cec:	e7d5      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003cee:	462e      	mov	r6, r5
 8003cf0:	e7db      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch(PeriphClkInit->Spi45ClockSelection)
 8003cf2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cf6:	d0ea      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003cf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cfc:	d0e7      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003cfe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d02:	d0e4      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      ret = HAL_ERROR;
 8003d04:	2601      	movs	r6, #1
 8003d06:	4635      	mov	r5, r6
 8003d08:	e007      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x306>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003d10:	f7ff fdfa 	bl	8003908 <RCCEx_PLL3_Config>
 8003d14:	4605      	mov	r5, r0
      break;
 8003d16:	e7da      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003d18:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003d20:	d02c      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x368>
    switch(PeriphClkInit->Spi6ClockSelection)
 8003d22:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8003d26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d2a:	d01f      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x358>
 8003d2c:	d812      	bhi.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x340>
 8003d2e:	b13b      	cbz	r3, 8003d40 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8003d30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d34:	d117      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x352>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d36:	2101      	movs	r1, #1
 8003d38:	1d20      	adds	r0, r4, #4
 8003d3a:	f7ff fd5f 	bl	80037fc <RCCEx_PLL2_Config>
 8003d3e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003d40:	b9dd      	cbnz	r5, 8003d7a <HAL_RCCEx_PeriphCLKConfig+0x366>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d42:	4a67      	ldr	r2, [pc, #412]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003d44:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003d46:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8003d4a:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8003d4e:	430b      	orrs	r3, r1
 8003d50:	6593      	str	r3, [r2, #88]	; 0x58
 8003d52:	e013      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x368>
    switch(PeriphClkInit->Spi6ClockSelection)
 8003d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d58:	d0f2      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8003d5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d5e:	d0ef      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8003d60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d64:	d0ec      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      ret = HAL_ERROR;
 8003d66:	2601      	movs	r6, #1
 8003d68:	4635      	mov	r5, r6
 8003d6a:	e007      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003d72:	f7ff fdc9 	bl	8003908 <RCCEx_PLL3_Config>
 8003d76:	4605      	mov	r5, r0
      break;
 8003d78:	e7e2      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8003d7a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d7c:	6823      	ldr	r3, [r4, #0]
 8003d7e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003d82:	d01f      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->FdcanClockSelection)
 8003d84:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003d86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d8a:	d006      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x386>
 8003d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d90:	d011      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8003d92:	b13b      	cbz	r3, 8003da4 <HAL_RCCEx_PeriphCLKConfig+0x390>
      ret = HAL_ERROR;
 8003d94:	2601      	movs	r6, #1
 8003d96:	4635      	mov	r5, r6
 8003d98:	e014      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d9a:	4a51      	ldr	r2, [pc, #324]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003d9c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003da4:	b96d      	cbnz	r5, 8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003da6:	4a4e      	ldr	r2, [pc, #312]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003da8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003daa:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003dae:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003db0:	430b      	orrs	r3, r1
 8003db2:	6513      	str	r3, [r2, #80]	; 0x50
 8003db4:	e006      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003db6:	2101      	movs	r1, #1
 8003db8:	1d20      	adds	r0, r4, #4
 8003dba:	f7ff fd1f 	bl	80037fc <RCCEx_PLL2_Config>
 8003dbe:	4605      	mov	r5, r0
      break;
 8003dc0:	e7f0      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8003dc2:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003dca:	d01e      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    switch(PeriphClkInit->FmcClockSelection)
 8003dcc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003dce:	2b03      	cmp	r3, #3
 8003dd0:	d817      	bhi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 8003dd2:	e8df f003 	tbb	[pc, r3]
 8003dd6:	0207      	.short	0x0207
 8003dd8:	0710      	.short	0x0710
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dda:	4a41      	ldr	r2, [pc, #260]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003ddc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003de4:	b985      	cbnz	r5, 8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003de6:	4a3e      	ldr	r2, [pc, #248]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003de8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003dea:	f023 0303 	bic.w	r3, r3, #3
 8003dee:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003df0:	430b      	orrs	r3, r1
 8003df2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003df4:	e009      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003df6:	2102      	movs	r1, #2
 8003df8:	1d20      	adds	r0, r4, #4
 8003dfa:	f7ff fcff 	bl	80037fc <RCCEx_PLL2_Config>
 8003dfe:	4605      	mov	r5, r0
      break;
 8003e00:	e7f0      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
      ret = HAL_ERROR;
 8003e02:	2601      	movs	r6, #1
 8003e04:	4635      	mov	r5, r6
 8003e06:	e000      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8003e08:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003e10:	d11f      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x43e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	f013 0f01 	tst.w	r3, #1
 8003e18:	f000 809e 	beq.w	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x544>
    switch(PeriphClkInit->Usart16ClockSelection)
 8003e1c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003e1e:	2b28      	cmp	r3, #40	; 0x28
 8003e20:	f200 8096 	bhi.w	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x53c>
 8003e24:	e8df f003 	tbb	[pc, r3]
 8003e28:	94949484 	.word	0x94949484
 8003e2c:	94949494 	.word	0x94949494
 8003e30:	9494947f 	.word	0x9494947f
 8003e34:	94949494 	.word	0x94949494
 8003e38:	9494948d 	.word	0x9494948d
 8003e3c:	94949494 	.word	0x94949494
 8003e40:	94949484 	.word	0x94949484
 8003e44:	94949494 	.word	0x94949494
 8003e48:	94949484 	.word	0x94949484
 8003e4c:	94949494 	.word	0x94949494
 8003e50:	84          	.byte	0x84
 8003e51:	00          	.byte	0x00
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e52:	4a24      	ldr	r2, [pc, #144]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8003e54:	6813      	ldr	r3, [r2, #0]
 8003e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e5a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003e5c:	f7fc fa9c 	bl	8000398 <HAL_GetTick>
 8003e60:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e62:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003e6a:	d105      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x464>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6c:	f7fc fa94 	bl	8000398 <HAL_GetTick>
 8003e70:	1bc0      	subs	r0, r0, r7
 8003e72:	2864      	cmp	r0, #100	; 0x64
 8003e74:	d9f5      	bls.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x44e>
        ret = HAL_TIMEOUT;
 8003e76:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 8003e78:	2d00      	cmp	r5, #0
 8003e7a:	d150      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x50a>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e7c:	4b18      	ldr	r3, [pc, #96]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e80:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8003e84:	4053      	eors	r3, r2
 8003e86:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003e8a:	d00c      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x492>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e8c:	4b14      	ldr	r3, [pc, #80]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003e8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e90:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e94:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003e96:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003e9a:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e9c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003e9e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003ea2:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8003ea4:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ea6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8003eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eae:	d01b      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      if(ret == HAL_OK)
 8003eb0:	2d00      	cmp	r5, #0
 8003eb2:	d136      	bne.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x50e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eb4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8003eb8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003ebc:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003ec0:	d023      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003ec2:	4a07      	ldr	r2, [pc, #28]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003ec4:	6913      	ldr	r3, [r2, #16]
 8003ec6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003eca:	6113      	str	r3, [r2, #16]
 8003ecc:	4904      	ldr	r1, [pc, #16]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003ece:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8003ed0:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8003ed4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	670b      	str	r3, [r1, #112]	; 0x70
 8003edc:	e799      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8003ede:	bf00      	nop
 8003ee0:	58024400 	.word	0x58024400
 8003ee4:	58024800 	.word	0x58024800
        tickstart = HAL_GetTick();
 8003ee8:	f7fc fa56 	bl	8000398 <HAL_GetTick>
 8003eec:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eee:	4bac      	ldr	r3, [pc, #688]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	f013 0f02 	tst.w	r3, #2
 8003ef6:	d1db      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef8:	f7fc fa4e 	bl	8000398 <HAL_GetTick>
 8003efc:	1bc0      	subs	r0, r0, r7
 8003efe:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f02:	4298      	cmp	r0, r3
 8003f04:	d9f3      	bls.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x4da>
            ret = HAL_TIMEOUT;
 8003f06:	2503      	movs	r5, #3
 8003f08:	e7d2      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f0a:	48a5      	ldr	r0, [pc, #660]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8003f0c:	6902      	ldr	r2, [r0, #16]
 8003f0e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8003f12:	49a4      	ldr	r1, [pc, #656]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x790>)
 8003f14:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	6103      	str	r3, [r0, #16]
 8003f1c:	e7d6      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      status = ret;
 8003f1e:	462e      	mov	r6, r5
 8003f20:	e777      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
        status = ret;
 8003f22:	462e      	mov	r6, r5
 8003f24:	e775      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f26:	2101      	movs	r1, #1
 8003f28:	1d20      	adds	r0, r4, #4
 8003f2a:	f7ff fc67 	bl	80037fc <RCCEx_PLL2_Config>
 8003f2e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f30:	b98d      	cbnz	r5, 8003f56 <HAL_RCCEx_PeriphCLKConfig+0x542>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f32:	4a9b      	ldr	r2, [pc, #620]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8003f34:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003f36:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003f3a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	6553      	str	r3, [r2, #84]	; 0x54
 8003f40:	e00a      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x544>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f42:	2101      	movs	r1, #1
 8003f44:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f48:	f7ff fcde 	bl	8003908 <RCCEx_PLL3_Config>
 8003f4c:	4605      	mov	r5, r0
      break;
 8003f4e:	e7ef      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x51c>
      ret = HAL_ERROR;
 8003f50:	2601      	movs	r6, #1
 8003f52:	4635      	mov	r5, r6
 8003f54:	e000      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8003f56:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f58:	6823      	ldr	r3, [r4, #0]
 8003f5a:	f013 0f02 	tst.w	r3, #2
 8003f5e:	d020      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x58e>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003f60:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003f62:	2b05      	cmp	r3, #5
 8003f64:	d819      	bhi.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003f66:	e8df f003 	tbb	[pc, r3]
 8003f6a:	0308      	.short	0x0308
 8003f6c:	08080811 	.word	0x08080811
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f70:	2101      	movs	r1, #1
 8003f72:	1d20      	adds	r0, r4, #4
 8003f74:	f7ff fc42 	bl	80037fc <RCCEx_PLL2_Config>
 8003f78:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f7a:	b98d      	cbnz	r5, 8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f7c:	4a88      	ldr	r2, [pc, #544]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8003f7e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003f80:	f023 0307 	bic.w	r3, r3, #7
 8003f84:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003f86:	430b      	orrs	r3, r1
 8003f88:	6553      	str	r3, [r2, #84]	; 0x54
 8003f8a:	e00a      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x58e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f92:	f7ff fcb9 	bl	8003908 <RCCEx_PLL3_Config>
 8003f96:	4605      	mov	r5, r0
      break;
 8003f98:	e7ef      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x566>
      ret = HAL_ERROR;
 8003f9a:	2601      	movs	r6, #1
 8003f9c:	4635      	mov	r5, r6
 8003f9e:	e000      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8003fa0:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fa2:	6823      	ldr	r3, [r4, #0]
 8003fa4:	f013 0f04 	tst.w	r3, #4
 8003fa8:	d022      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003faa:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003fae:	2b05      	cmp	r3, #5
 8003fb0:	d81a      	bhi.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003fb2:	e8df f003 	tbb	[pc, r3]
 8003fb6:	0308      	.short	0x0308
 8003fb8:	08080812 	.word	0x08080812
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	1d20      	adds	r0, r4, #4
 8003fc0:	f7ff fc1c 	bl	80037fc <RCCEx_PLL2_Config>
 8003fc4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003fc6:	b995      	cbnz	r5, 8003fee <HAL_RCCEx_PeriphCLKConfig+0x5da>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fc8:	4a75      	ldr	r2, [pc, #468]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8003fca:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003fcc:	f023 0307 	bic.w	r3, r3, #7
 8003fd0:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	6593      	str	r3, [r2, #88]	; 0x58
 8003fd8:	e00a      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fda:	2101      	movs	r1, #1
 8003fdc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003fe0:	f7ff fc92 	bl	8003908 <RCCEx_PLL3_Config>
 8003fe4:	4605      	mov	r5, r0
      break;
 8003fe6:	e7ee      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
      ret = HAL_ERROR;
 8003fe8:	2601      	movs	r6, #1
 8003fea:	4635      	mov	r5, r6
 8003fec:	e000      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
 8003fee:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ff0:	6823      	ldr	r3, [r4, #0]
 8003ff2:	f013 0f20 	tst.w	r3, #32
 8003ff6:	d02c      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003ff8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003ffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004000:	d01f      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8004002:	d812      	bhi.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x616>
 8004004:	b13b      	cbz	r3, 8004016 <HAL_RCCEx_PeriphCLKConfig+0x602>
 8004006:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800400a:	d117      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x628>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800400c:	2100      	movs	r1, #0
 800400e:	1d20      	adds	r0, r4, #4
 8004010:	f7ff fbf4 	bl	80037fc <RCCEx_PLL2_Config>
 8004014:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004016:	b9dd      	cbnz	r5, 8004050 <HAL_RCCEx_PeriphCLKConfig+0x63c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004018:	4a61      	ldr	r2, [pc, #388]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800401a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800401c:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8004020:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8004024:	430b      	orrs	r3, r1
 8004026:	6553      	str	r3, [r2, #84]	; 0x54
 8004028:	e013      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800402a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800402e:	d0f2      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x602>
 8004030:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004034:	d0ef      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x602>
 8004036:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800403a:	d0ec      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x602>
      ret = HAL_ERROR;
 800403c:	2601      	movs	r6, #1
 800403e:	4635      	mov	r5, r6
 8004040:	e007      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004042:	2102      	movs	r1, #2
 8004044:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004048:	f7ff fc5e 	bl	8003908 <RCCEx_PLL3_Config>
 800404c:	4605      	mov	r5, r0
      break;
 800404e:	e7e2      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x602>
 8004050:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004052:	6823      	ldr	r3, [r4, #0]
 8004054:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004058:	d02c      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800405a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800405e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004062:	d01f      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x690>
 8004064:	d812      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004066:	b13b      	cbz	r3, 8004078 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800406c:	d117      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x68a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800406e:	2100      	movs	r1, #0
 8004070:	1d20      	adds	r0, r4, #4
 8004072:	f7ff fbc3 	bl	80037fc <RCCEx_PLL2_Config>
 8004076:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004078:	b9dd      	cbnz	r5, 80040b2 <HAL_RCCEx_PeriphCLKConfig+0x69e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800407a:	4a49      	ldr	r2, [pc, #292]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800407c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800407e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004082:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8004086:	430b      	orrs	r3, r1
 8004088:	6593      	str	r3, [r2, #88]	; 0x58
 800408a:	e013      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800408c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004090:	d0f2      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004092:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004096:	d0ef      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004098:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800409c:	d0ec      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x664>
      ret = HAL_ERROR;
 800409e:	2601      	movs	r6, #1
 80040a0:	4635      	mov	r5, r6
 80040a2:	e007      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040a4:	2102      	movs	r1, #2
 80040a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80040aa:	f7ff fc2d 	bl	8003908 <RCCEx_PLL3_Config>
 80040ae:	4605      	mov	r5, r0
      break;
 80040b0:	e7e2      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80040b2:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80040ba:	d02c      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80040bc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80040c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040c4:	d01f      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80040c6:	d812      	bhi.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x6da>
 80040c8:	b13b      	cbz	r3, 80040da <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 80040ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ce:	d117      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040d0:	2100      	movs	r1, #0
 80040d2:	1d20      	adds	r0, r4, #4
 80040d4:	f7ff fb92 	bl	80037fc <RCCEx_PLL2_Config>
 80040d8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80040da:	b9dd      	cbnz	r5, 8004114 <HAL_RCCEx_PeriphCLKConfig+0x700>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040dc:	4a30      	ldr	r2, [pc, #192]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80040de:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80040e0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80040e4:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 80040e8:	430b      	orrs	r3, r1
 80040ea:	6593      	str	r3, [r2, #88]	; 0x58
 80040ec:	e013      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80040ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040f2:	d0f2      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 80040f4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040f8:	d0ef      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 80040fa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040fe:	d0ec      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      ret = HAL_ERROR;
 8004100:	2601      	movs	r6, #1
 8004102:	4635      	mov	r5, r6
 8004104:	e007      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x702>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004106:	2102      	movs	r1, #2
 8004108:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800410c:	f7ff fbfc 	bl	8003908 <RCCEx_PLL3_Config>
 8004110:	4605      	mov	r5, r0
      break;
 8004112:	e7e2      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8004114:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	f013 0f08 	tst.w	r3, #8
 800411c:	d00c      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x724>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800411e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004126:	d028      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x766>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004128:	4a1d      	ldr	r2, [pc, #116]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800412a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800412c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004130:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004134:	430b      	orrs	r3, r1
 8004136:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	f013 0f10 	tst.w	r3, #16
 800413e:	d00c      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x746>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004140:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004148:	d020      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x778>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800414a:	4a15      	ldr	r2, [pc, #84]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800414c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800414e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004152:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8004156:	430b      	orrs	r3, r1
 8004158:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004160:	d039      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    switch(PeriphClkInit->AdcClockSelection)
 8004162:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8004166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800416a:	d02c      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
 800416c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004170:	d01f      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
 8004172:	b1cb      	cbz	r3, 80041a8 <HAL_RCCEx_PeriphCLKConfig+0x794>
      ret = HAL_ERROR;
 8004174:	2601      	movs	r6, #1
 8004176:	4635      	mov	r5, r6
 8004178:	e02d      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800417a:	2102      	movs	r1, #2
 800417c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004180:	f7ff fbc2 	bl	8003908 <RCCEx_PLL3_Config>
 8004184:	2800      	cmp	r0, #0
 8004186:	d0cf      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x714>
          status = HAL_ERROR;
 8004188:	2601      	movs	r6, #1
 800418a:	e7cd      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x714>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800418c:	2102      	movs	r1, #2
 800418e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004192:	f7ff fbb9 	bl	8003908 <RCCEx_PLL3_Config>
 8004196:	2800      	cmp	r0, #0
 8004198:	d0d7      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x736>
        status = HAL_ERROR;
 800419a:	2601      	movs	r6, #1
 800419c:	e7d5      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x736>
 800419e:	bf00      	nop
 80041a0:	58024400 	.word	0x58024400
 80041a4:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041a8:	2100      	movs	r1, #0
 80041aa:	1d20      	adds	r0, r4, #4
 80041ac:	f7ff fb26 	bl	80037fc <RCCEx_PLL2_Config>
 80041b0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80041b2:	b97d      	cbnz	r5, 80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041b4:	4a5e      	ldr	r2, [pc, #376]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80041b6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80041b8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80041bc:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80041c0:	430b      	orrs	r3, r1
 80041c2:	6593      	str	r3, [r2, #88]	; 0x58
 80041c4:	e007      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041c6:	2102      	movs	r1, #2
 80041c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80041cc:	f7ff fb9c 	bl	8003908 <RCCEx_PLL3_Config>
 80041d0:	4605      	mov	r5, r0
      break;
 80041d2:	e7ee      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
 80041d4:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041d6:	6823      	ldr	r3, [r4, #0]
 80041d8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80041dc:	d024      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x814>
    switch(PeriphClkInit->UsbClockSelection)
 80041de:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80041e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041e6:	d017      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x804>
 80041e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041ec:	d00a      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
 80041ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041f2:	d002      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
      ret = HAL_ERROR;
 80041f4:	2601      	movs	r6, #1
 80041f6:	4635      	mov	r5, r6
 80041f8:	e016      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x814>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041fa:	4a4d      	ldr	r2, [pc, #308]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80041fc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80041fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004202:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004204:	b97d      	cbnz	r5, 8004226 <HAL_RCCEx_PeriphCLKConfig+0x812>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004206:	4a4a      	ldr	r2, [pc, #296]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004208:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800420a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800420e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8004212:	430b      	orrs	r3, r1
 8004214:	6553      	str	r3, [r2, #84]	; 0x54
 8004216:	e007      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x814>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004218:	2101      	movs	r1, #1
 800421a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800421e:	f7ff fb73 	bl	8003908 <RCCEx_PLL3_Config>
 8004222:	4605      	mov	r5, r0
      break;
 8004224:	e7ee      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
 8004226:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800422e:	d014      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x846>
    switch(PeriphClkInit->SdmmcClockSelection)
 8004230:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004232:	b12b      	cbz	r3, 8004240 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004238:	d023      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x86e>
      ret = HAL_ERROR;
 800423a:	2601      	movs	r6, #1
 800423c:	4635      	mov	r5, r6
 800423e:	e00c      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x846>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004240:	4a3b      	ldr	r2, [pc, #236]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004242:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004248:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800424a:	bb05      	cbnz	r5, 800428e <HAL_RCCEx_PeriphCLKConfig+0x87a>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800424c:	4a38      	ldr	r2, [pc, #224]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800424e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004254:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004256:	430b      	orrs	r3, r1
 8004258:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800425a:	6823      	ldr	r3, [r4, #0]
 800425c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004260:	d117      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x87e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004268:	d02d      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
    switch(PeriphClkInit->RngClockSelection)
 800426a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800426c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004270:	d01b      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x896>
 8004272:	d917      	bls.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x890>
 8004274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004278:	d01c      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 800427a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800427e:	d112      	bne.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x892>
 8004280:	e018      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004282:	2102      	movs	r1, #2
 8004284:	1d20      	adds	r0, r4, #4
 8004286:	f7ff fab9 	bl	80037fc <RCCEx_PLL2_Config>
 800428a:	4605      	mov	r5, r0
      break;
 800428c:	e7dd      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x836>
 800428e:	462e      	mov	r6, r5
 8004290:	e7e3      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x846>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004292:	2102      	movs	r1, #2
 8004294:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004298:	f7ff fb36 	bl	8003908 <RCCEx_PLL3_Config>
 800429c:	2800      	cmp	r0, #0
 800429e:	d0e0      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      status=HAL_ERROR;
 80042a0:	2601      	movs	r6, #1
 80042a2:	e7de      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    switch(PeriphClkInit->RngClockSelection)
 80042a4:	b133      	cbz	r3, 80042b4 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      ret = HAL_ERROR;
 80042a6:	2601      	movs	r6, #1
 80042a8:	e00d      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042aa:	4a21      	ldr	r2, [pc, #132]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80042ac:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80042ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042b2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80042b4:	2d00      	cmp	r5, #0
 80042b6:	d131      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x908>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042b8:	4a1d      	ldr	r2, [pc, #116]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80042ba:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80042bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80042c2:	430b      	orrs	r3, r1
 80042c4:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80042cc:	d006      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x8c8>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042ce:	4a18      	ldr	r2, [pc, #96]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80042d0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80042d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042d6:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80042d8:	430b      	orrs	r3, r1
 80042da:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80042e2:	d006      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042e4:	4a12      	ldr	r2, [pc, #72]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80042e6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80042e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042ec:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80042ee:	430b      	orrs	r3, r1
 80042f0:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80042f8:	d009      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042fa:	4b0d      	ldr	r3, [pc, #52]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80042fc:	691a      	ldr	r2, [r3, #16]
 80042fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004302:	611a      	str	r2, [r3, #16]
 8004304:	691a      	ldr	r2, [r3, #16]
 8004306:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 800430a:	430a      	orrs	r2, r1
 800430c:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	db05      	blt.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x90c>
  if (status == HAL_OK)
 8004314:	b106      	cbz	r6, 8004318 <HAL_RCCEx_PeriphCLKConfig+0x904>
  return HAL_ERROR;
 8004316:	2601      	movs	r6, #1
}
 8004318:	4630      	mov	r0, r6
 800431a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800431c:	462e      	mov	r6, r5
 800431e:	e7d2      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004320:	4a03      	ldr	r2, [pc, #12]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004322:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004324:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004328:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800432a:	430b      	orrs	r3, r1
 800432c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800432e:	e7f1      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x900>
 8004330:	58024400 	.word	0x58024400

08004334 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8004334:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004336:	f7ff fa3f 	bl	80037b8 <HAL_RCC_GetHCLKFreq>
 800433a:	4b05      	ldr	r3, [pc, #20]	; (8004350 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004342:	4a04      	ldr	r2, [pc, #16]	; (8004354 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8004344:	5cd3      	ldrb	r3, [r2, r3]
 8004346:	f003 031f 	and.w	r3, r3, #31
}
 800434a:	40d8      	lsrs	r0, r3
 800434c:	bd08      	pop	{r3, pc}
 800434e:	bf00      	nop
 8004350:	58024400 	.word	0x58024400
 8004354:	08009f98 	.word	0x08009f98

08004358 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8004358:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800435a:	4978      	ldr	r1, [pc, #480]	; (800453c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800435c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800435e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004360:	f3c2 3205 	ubfx	r2, r2, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004364:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8004366:	f3c3 1300 	ubfx	r3, r3, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800436a:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800436c:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8004370:	fb03 f301 	mul.w	r3, r3, r1
  if (pll2m != 0U)
 8004374:	2a00      	cmp	r2, #0
 8004376:	f000 80db 	beq.w	8004530 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>
 800437a:	f004 0403 	and.w	r4, r4, #3
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8004386:	2c01      	cmp	r4, #1
 8004388:	d066      	beq.n	8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 800438a:	b1fc      	cbz	r4, 80043cc <HAL_RCCEx_GetPLL2ClockFreq+0x74>
 800438c:	2c02      	cmp	r4, #2
 800438e:	f000 80b2 	beq.w	80044f6 <HAL_RCCEx_GetPLL2ClockFreq+0x19e>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004392:	ee07 2a10 	vmov	s14, r2
 8004396:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800439a:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8004540 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800439e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80043a2:	4b66      	ldr	r3, [pc, #408]	; (800453c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80043a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043aa:	ee07 3a10 	vmov	s14, r3
 80043ae:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80043b2:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80043b6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80043ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80043ca:	e061      	b.n	8004490 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043cc:	4b5b      	ldr	r3, [pc, #364]	; (800453c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f013 0f20 	tst.w	r3, #32
 80043d4:	d023      	beq.n	800441e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043d6:	4c59      	ldr	r4, [pc, #356]	; (800453c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80043d8:	6821      	ldr	r1, [r4, #0]
 80043da:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80043de:	4b5a      	ldr	r3, [pc, #360]	; (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 80043e0:	40cb      	lsrs	r3, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043e2:	ee07 3a10 	vmov	s14, r3
 80043e6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80043ea:	ee06 2a90 	vmov	s13, r2
 80043ee:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 80043f2:	eec7 6a06 	vdiv.f32	s13, s14, s12
 80043f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80043f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043fc:	ee07 3a10 	vmov	s14, r3
 8004400:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004404:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004408:	ee67 7a86 	vmul.f32	s15, s15, s12
 800440c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004410:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004414:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004418:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800441c:	e038      	b.n	8004490 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800441e:	ee07 2a10 	vmov	s14, r2
 8004422:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004426:	ed9f 6a49 	vldr	s12, [pc, #292]	; 800454c <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 800442a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800442e:	4b43      	ldr	r3, [pc, #268]	; (800453c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004436:	ee07 3a10 	vmov	s14, r3
 800443a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800443e:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004442:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800444a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800444e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004452:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004456:	e01b      	b.n	8004490 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004458:	ee07 2a10 	vmov	s14, r2
 800445c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004460:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8004540 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8004464:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004468:	4b34      	ldr	r3, [pc, #208]	; (800453c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800446a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004470:	ee07 3a10 	vmov	s14, r3
 8004474:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004478:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800447c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004484:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004488:	ee77 7a87 	vadd.f32	s15, s15, s14
 800448c:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004490:	4a2a      	ldr	r2, [pc, #168]	; (800453c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004492:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004494:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004498:	ee07 3a10 	vmov	s14, r3
 800449c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80044a0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80044a4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80044a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044b0:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80044b4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80044b6:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80044ba:	ee07 3a10 	vmov	s14, r3
 80044be:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80044c2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80044c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ce:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80044d2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80044d4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80044d8:	ee07 3a90 	vmov	s15, r3
 80044dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80044e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044e8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80044ec:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80044f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044f4:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044f6:	ee07 2a10 	vmov	s14, r2
 80044fa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80044fe:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8004550 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 8004502:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004506:	4b0d      	ldr	r3, [pc, #52]	; (800453c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800450e:	ee07 3a10 	vmov	s14, r3
 8004512:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004516:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800451a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800451e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004522:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004526:	ee77 7a87 	vadd.f32	s15, s15, s14
 800452a:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 800452e:	e7af      	b.n	8004490 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004534:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004536:	6083      	str	r3, [r0, #8]
}
 8004538:	e7da      	b.n	80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>
 800453a:	bf00      	nop
 800453c:	58024400 	.word	0x58024400
 8004540:	4a742400 	.word	0x4a742400
 8004544:	39000000 	.word	0x39000000
 8004548:	03d09000 	.word	0x03d09000
 800454c:	4c742400 	.word	0x4c742400
 8004550:	4bbebc20 	.word	0x4bbebc20

08004554 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8004554:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004556:	4978      	ldr	r1, [pc, #480]	; (8004738 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004558:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800455a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800455c:	f3c2 5205 	ubfx	r2, r2, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004560:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8004562:	f3c3 2300 	ubfx	r3, r3, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004566:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004568:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 800456c:	fb03 f301 	mul.w	r3, r3, r1
  if (pll3m != 0U)
 8004570:	2a00      	cmp	r2, #0
 8004572:	f000 80db 	beq.w	800472c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
 8004576:	f004 0403 	and.w	r4, r4, #3
 800457a:	ee07 3a90 	vmov	s15, r3
 800457e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8004582:	2c01      	cmp	r4, #1
 8004584:	d066      	beq.n	8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 8004586:	b1fc      	cbz	r4, 80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x74>
 8004588:	2c02      	cmp	r4, #2
 800458a:	f000 80b2 	beq.w	80046f2 <HAL_RCCEx_GetPLL3ClockFreq+0x19e>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800458e:	ee07 2a10 	vmov	s14, r2
 8004592:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004596:	ed9f 6a69 	vldr	s12, [pc, #420]	; 800473c <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 800459a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800459e:	4b66      	ldr	r3, [pc, #408]	; (8004738 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a6:	ee07 3a10 	vmov	s14, r3
 80045aa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80045ae:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 80045b2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80045b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80045c6:	e061      	b.n	800468c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045c8:	4b5b      	ldr	r3, [pc, #364]	; (8004738 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f013 0f20 	tst.w	r3, #32
 80045d0:	d023      	beq.n	800461a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045d2:	4c59      	ldr	r4, [pc, #356]	; (8004738 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80045d4:	6821      	ldr	r1, [r4, #0]
 80045d6:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80045da:	4b5a      	ldr	r3, [pc, #360]	; (8004744 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 80045dc:	40cb      	lsrs	r3, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045de:	ee07 3a10 	vmov	s14, r3
 80045e2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80045e6:	ee06 2a90 	vmov	s13, r2
 80045ea:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 80045ee:	eec7 6a06 	vdiv.f32	s13, s14, s12
 80045f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f8:	ee07 3a10 	vmov	s14, r3
 80045fc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004600:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004604:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004608:	ee77 7a27 	vadd.f32	s15, s14, s15
 800460c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004610:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004614:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004618:	e038      	b.n	800468c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800461a:	ee07 2a10 	vmov	s14, r2
 800461e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004622:	ed9f 6a49 	vldr	s12, [pc, #292]	; 8004748 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 8004626:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800462a:	4b43      	ldr	r3, [pc, #268]	; (8004738 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004632:	ee07 3a10 	vmov	s14, r3
 8004636:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800463a:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800463e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004646:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800464a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800464e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004652:	e01b      	b.n	800468c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004654:	ee07 2a10 	vmov	s14, r2
 8004658:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800465c:	ed9f 6a37 	vldr	s12, [pc, #220]	; 800473c <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8004660:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004664:	4b34      	ldr	r3, [pc, #208]	; (8004738 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800466c:	ee07 3a10 	vmov	s14, r3
 8004670:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004674:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004678:	ee67 7a86 	vmul.f32	s15, s15, s12
 800467c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004680:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004684:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004688:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800468c:	4a2a      	ldr	r2, [pc, #168]	; (8004738 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800468e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004690:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004694:	ee07 3a10 	vmov	s14, r3
 8004698:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800469c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80046a0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80046a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ac:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80046b0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80046b2:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80046b6:	ee07 3a10 	vmov	s14, r3
 80046ba:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80046be:	ee37 7a06 	vadd.f32	s14, s14, s12
 80046c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ca:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80046ce:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80046d0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80046d4:	ee07 3a90 	vmov	s15, r3
 80046d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046dc:	ee77 7a86 	vadd.f32	s15, s15, s12
 80046e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046e4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80046e8:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80046ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046f0:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046f2:	ee07 2a10 	vmov	s14, r2
 80046f6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80046fa:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800474c <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 80046fe:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004702:	4b0d      	ldr	r3, [pc, #52]	; (8004738 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800470a:	ee07 3a10 	vmov	s14, r3
 800470e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004712:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004716:	ee67 7a86 	vmul.f32	s15, s15, s12
 800471a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800471e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004722:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004726:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 800472a:	e7af      	b.n	800468c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004730:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004732:	6083      	str	r3, [r0, #8]
}
 8004734:	e7da      	b.n	80046ec <HAL_RCCEx_GetPLL3ClockFreq+0x198>
 8004736:	bf00      	nop
 8004738:	58024400 	.word	0x58024400
 800473c:	4a742400 	.word	0x4a742400
 8004740:	39000000 	.word	0x39000000
 8004744:	03d09000 	.word	0x03d09000
 8004748:	4c742400 	.word	0x4c742400
 800474c:	4bbebc20 	.word	0x4bbebc20

08004750 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 8004750:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004752:	4978      	ldr	r1, [pc, #480]	; (8004934 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004754:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8004756:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004758:	f3c2 1205 	ubfx	r2, r2, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800475c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800475e:	f003 0301 	and.w	r3, r3, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004762:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004764:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8004768:	fb03 f301 	mul.w	r3, r3, r1
  if (pll1m != 0U)
 800476c:	2a00      	cmp	r2, #0
 800476e:	f000 80db 	beq.w	8004928 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
 8004772:	f004 0403 	and.w	r4, r4, #3
 8004776:	ee07 3a90 	vmov	s15, r3
 800477a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 800477e:	2c01      	cmp	r4, #1
 8004780:	d066      	beq.n	8004850 <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 8004782:	b1fc      	cbz	r4, 80047c4 <HAL_RCCEx_GetPLL1ClockFreq+0x74>
 8004784:	2c02      	cmp	r4, #2
 8004786:	f000 80b2 	beq.w	80048ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800478a:	ee07 2a10 	vmov	s14, r2
 800478e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004792:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8004938 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8004796:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800479a:	4b66      	ldr	r3, [pc, #408]	; (8004934 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800479c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a2:	ee07 3a10 	vmov	s14, r3
 80047a6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80047aa:	ed9f 6a64 	vldr	s12, [pc, #400]	; 800493c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 80047ae:	ee67 7a86 	vmul.f32	s15, s15, s12
 80047b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047be:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80047c2:	e061      	b.n	8004888 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047c4:	4b5b      	ldr	r3, [pc, #364]	; (8004934 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f013 0f20 	tst.w	r3, #32
 80047cc:	d023      	beq.n	8004816 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80047ce:	4c59      	ldr	r4, [pc, #356]	; (8004934 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80047d0:	6821      	ldr	r1, [r4, #0]
 80047d2:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80047d6:	4b5a      	ldr	r3, [pc, #360]	; (8004940 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>)
 80047d8:	40cb      	lsrs	r3, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047da:	ee07 3a10 	vmov	s14, r3
 80047de:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80047e2:	ee06 2a90 	vmov	s13, r2
 80047e6:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 80047ea:	eec7 6a06 	vdiv.f32	s13, s14, s12
 80047ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80047f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f4:	ee07 3a10 	vmov	s14, r3
 80047f8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80047fc:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 800493c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8004800:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004808:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800480c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004810:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004814:	e038      	b.n	8004888 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004816:	ee07 2a10 	vmov	s14, r2
 800481a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800481e:	ed9f 6a49 	vldr	s12, [pc, #292]	; 8004944 <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 8004822:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004826:	4b43      	ldr	r3, [pc, #268]	; (8004934 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800482e:	ee07 3a10 	vmov	s14, r3
 8004832:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004836:	ed9f 6a41 	vldr	s12, [pc, #260]	; 800493c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 800483a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800483e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004842:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004846:	ee77 7a87 	vadd.f32	s15, s15, s14
 800484a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800484e:	e01b      	b.n	8004888 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004850:	ee07 2a10 	vmov	s14, r2
 8004854:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004858:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8004938 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 800485c:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004860:	4b34      	ldr	r3, [pc, #208]	; (8004934 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004868:	ee07 3a10 	vmov	s14, r3
 800486c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004870:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800493c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8004874:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800487c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004880:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004884:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8004888:	4a2a      	ldr	r2, [pc, #168]	; (8004934 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800488a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800488c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004890:	ee07 3a10 	vmov	s14, r3
 8004894:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004898:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800489c:	ee37 7a06 	vadd.f32	s14, s14, s12
 80048a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048a8:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80048ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80048ae:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80048b2:	ee07 3a10 	vmov	s14, r3
 80048b6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80048ba:	ee37 7a06 	vadd.f32	s14, s14, s12
 80048be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048c6:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80048ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80048cc:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80048d0:	ee07 3a90 	vmov	s15, r3
 80048d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d8:	ee77 7a86 	vadd.f32	s15, s15, s12
 80048dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048e0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80048e4:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80048e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048ec:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048ee:	ee07 2a10 	vmov	s14, r2
 80048f2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80048f6:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8004948 <HAL_RCCEx_GetPLL1ClockFreq+0x1f8>
 80048fa:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80048fe:	4b0d      	ldr	r3, [pc, #52]	; (8004934 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004906:	ee07 3a10 	vmov	s14, r3
 800490a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800490e:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 800493c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8004912:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800491a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800491e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004922:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8004926:	e7af      	b.n	8004888 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004928:	2300      	movs	r3, #0
 800492a:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800492c:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800492e:	6083      	str	r3, [r0, #8]
}
 8004930:	e7da      	b.n	80048e8 <HAL_RCCEx_GetPLL1ClockFreq+0x198>
 8004932:	bf00      	nop
 8004934:	58024400 	.word	0x58024400
 8004938:	4a742400 	.word	0x4a742400
 800493c:	39000000 	.word	0x39000000
 8004940:	03d09000 	.word	0x03d09000
 8004944:	4c742400 	.word	0x4c742400
 8004948:	4bbebc20 	.word	0x4bbebc20

0800494c <HAL_RCCEx_GetPeriphCLKFreq>:
{
 800494c:	b500      	push	{lr}
 800494e:	b08b      	sub	sp, #44	; 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004950:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8004954:	d01b      	beq.n	800498e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004956:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800495a:	d048      	beq.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800495c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004960:	d078      	beq.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004962:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8004966:	f000 80ab 	beq.w	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800496a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800496e:	f000 80dd 	beq.w	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004972:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8004976:	f000 810f 	beq.w	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800497a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800497e:	f000 8131 	beq.w	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004982:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8004986:	f000 8145 	beq.w	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
      frequency = 0;
 800498a:	2000      	movs	r0, #0
 800498c:	e00c      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800498e:	4b9e      	ldr	r3, [pc, #632]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004992:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8004996:	2b04      	cmp	r3, #4
 8004998:	f200 8164 	bhi.w	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800499c:	e8df f003 	tbb	[pc, r3]
 80049a0:	03110c07 	.word	0x03110c07
 80049a4:	16          	.byte	0x16
 80049a5:	00          	.byte	0x00
          frequency = EXTERNAL_CLOCK_VALUE;
 80049a6:	4899      	ldr	r0, [pc, #612]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
}
 80049a8:	b00b      	add	sp, #44	; 0x2c
 80049aa:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80049ae:	a807      	add	r0, sp, #28
 80049b0:	f7ff fece 	bl	8004750 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80049b4:	9808      	ldr	r0, [sp, #32]
          break;
 80049b6:	e7f7      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049b8:	a804      	add	r0, sp, #16
 80049ba:	f7ff fccd 	bl	8004358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80049be:	9804      	ldr	r0, [sp, #16]
          break;
 80049c0:	e7f2      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049c2:	a801      	add	r0, sp, #4
 80049c4:	f7ff fdc6 	bl	8004554 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80049c8:	9801      	ldr	r0, [sp, #4]
          break;
 80049ca:	e7ed      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80049cc:	4b8e      	ldr	r3, [pc, #568]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80049ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80049d0:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 80049d4:	f000 8148 	beq.w	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80049d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049dc:	f000 8146 	beq.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80049e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049e4:	d001      	beq.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = 0;
 80049e6:	2000      	movs	r0, #0
 80049e8:	e7de      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 80049ea:	4889      	ldr	r0, [pc, #548]	; (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80049ec:	e7dc      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80049ee:	4b86      	ldr	r3, [pc, #536]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80049f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 80049f6:	2b80      	cmp	r3, #128	; 0x80
 80049f8:	d025      	beq.n	8004a46 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80049fa:	d808      	bhi.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 80049fc:	b1f3      	cbz	r3, 8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 80049fe:	2b40      	cmp	r3, #64	; 0x40
 8004a00:	f040 8136 	bne.w	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a04:	a804      	add	r0, sp, #16
 8004a06:	f7ff fca7 	bl	8004358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a0a:	9804      	ldr	r0, [sp, #16]
          break;
 8004a0c:	e7cc      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (saiclocksource)
 8004a0e:	2bc0      	cmp	r3, #192	; 0xc0
 8004a10:	d012      	beq.n	8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a16:	f040 812b 	bne.w	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004a1a:	4b7b      	ldr	r3, [pc, #492]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004a1e:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004a22:	f000 8127 	beq.w	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004a26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a2a:	f000 8125 	beq.w	8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004a2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a32:	d00d      	beq.n	8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            frequency = 0;
 8004a34:	2000      	movs	r0, #0
 8004a36:	e7b7      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004a38:	4874      	ldr	r0, [pc, #464]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004a3a:	e7b5      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a3c:	a807      	add	r0, sp, #28
 8004a3e:	f7ff fe87 	bl	8004750 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a42:	9808      	ldr	r0, [sp, #32]
          break;
 8004a44:	e7b0      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a46:	a801      	add	r0, sp, #4
 8004a48:	f7ff fd84 	bl	8004554 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004a4c:	9801      	ldr	r0, [sp, #4]
          break;
 8004a4e:	e7ab      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8004a50:	486f      	ldr	r0, [pc, #444]	; (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004a52:	e7a9      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004a54:	4b6c      	ldr	r3, [pc, #432]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a58:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8004a5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a60:	d027      	beq.n	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004a62:	d809      	bhi.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004a64:	b303      	cbz	r3, 8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 8004a66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a6a:	f040 8107 	bne.w	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a6e:	a804      	add	r0, sp, #16
 8004a70:	f7ff fc72 	bl	8004358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a74:	9804      	ldr	r0, [sp, #16]
          break;
 8004a76:	e797      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (saiclocksource)
 8004a78:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004a7c:	d012      	beq.n	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004a7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a82:	f040 80fb 	bne.w	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004a86:	4b60      	ldr	r3, [pc, #384]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004a8a:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004a8e:	f000 80f7 	beq.w	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004a92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a96:	f000 80f5 	beq.w	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004a9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a9e:	d00d      	beq.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x170>
            frequency = 0;
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	e781      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004aa4:	4859      	ldr	r0, [pc, #356]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004aa6:	e77f      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004aa8:	a807      	add	r0, sp, #28
 8004aaa:	f7ff fe51 	bl	8004750 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004aae:	9808      	ldr	r0, [sp, #32]
          break;
 8004ab0:	e77a      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ab2:	a801      	add	r0, sp, #4
 8004ab4:	f7ff fd4e 	bl	8004554 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004ab8:	9801      	ldr	r0, [sp, #4]
          break;
 8004aba:	e775      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8004abc:	4854      	ldr	r0, [pc, #336]	; (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004abe:	e773      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004ac0:	4b51      	ldr	r3, [pc, #324]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8004ac8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004acc:	d027      	beq.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
 8004ace:	d809      	bhi.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8004ad0:	b303      	cbz	r3, 8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 8004ad2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ad6:	f040 80d7 	bne.w	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ada:	a804      	add	r0, sp, #16
 8004adc:	f7ff fc3c 	bl	8004358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ae0:	9804      	ldr	r0, [sp, #16]
          break;
 8004ae2:	e761      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (saiclocksource)
 8004ae4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ae8:	d012      	beq.n	8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8004aea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004aee:	f040 80cb 	bne.w	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004af2:	4b45      	ldr	r3, [pc, #276]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004af6:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004afa:	f000 80c7 	beq.w	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x340>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004afe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b02:	f000 80c5 	beq.w	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004b06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b0a:	d00d      	beq.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
            frequency = 0;
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	e74b      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b10:	483e      	ldr	r0, [pc, #248]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004b12:	e749      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b14:	a807      	add	r0, sp, #28
 8004b16:	f7ff fe1b 	bl	8004750 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b1a:	9808      	ldr	r0, [sp, #32]
          break;
 8004b1c:	e744      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b1e:	a801      	add	r0, sp, #4
 8004b20:	f7ff fd18 	bl	8004554 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004b24:	9801      	ldr	r0, [sp, #4]
          break;
 8004b26:	e73f      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8004b28:	4839      	ldr	r0, [pc, #228]	; (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004b2a:	e73d      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004b2c:	4b36      	ldr	r3, [pc, #216]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b30:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8004b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b38:	d027      	beq.n	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8004b3a:	d809      	bhi.n	8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 8004b3c:	b303      	cbz	r3, 8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8004b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b42:	f040 80a7 	bne.w	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b46:	a804      	add	r0, sp, #16
 8004b48:	f7ff fc06 	bl	8004358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004b4c:	9804      	ldr	r0, [sp, #16]
          break;
 8004b4e:	e72b      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (srcclk)
 8004b50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b54:	d012      	beq.n	8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8004b56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b5a:	f040 809b 	bne.w	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004b5e:	4b2a      	ldr	r3, [pc, #168]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004b62:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004b66:	f000 8097 	beq.w	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004b6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b6e:	f000 8095 	beq.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004b72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b76:	d00d      	beq.n	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
            frequency = 0;
 8004b78:	2000      	movs	r0, #0
 8004b7a:	e715      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b7c:	4823      	ldr	r0, [pc, #140]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004b7e:	e713      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b80:	a807      	add	r0, sp, #28
 8004b82:	f7ff fde5 	bl	8004750 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b86:	9808      	ldr	r0, [sp, #32]
          break;
 8004b88:	e70e      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b8a:	a801      	add	r0, sp, #4
 8004b8c:	f7ff fce2 	bl	8004554 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004b90:	9801      	ldr	r0, [sp, #4]
          break;
 8004b92:	e709      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8004b94:	481e      	ldr	r0, [pc, #120]	; (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004b96:	e707      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004b98:	4b1b      	ldr	r3, [pc, #108]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8004ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba4:	d00a      	beq.n	8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x270>
 8004ba6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004baa:	d00c      	beq.n	8004bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8004bac:	b10b      	cbz	r3, 8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
          frequency = 0;
 8004bae:	2000      	movs	r0, #0
 8004bb0:	e6fa      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bb2:	a804      	add	r0, sp, #16
 8004bb4:	f7ff fbd0 	bl	8004358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004bb8:	9804      	ldr	r0, [sp, #16]
          break;
 8004bba:	e6f5      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bbc:	a801      	add	r0, sp, #4
 8004bbe:	f7ff fcc9 	bl	8004554 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004bc2:	9803      	ldr	r0, [sp, #12]
          break;
 8004bc4:	e6f0      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004bc6:	4b10      	ldr	r3, [pc, #64]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004bca:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004bce:	d067      	beq.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004bd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bd4:	d066      	beq.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004bd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bda:	d001      	beq.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
            frequency = 0;
 8004bdc:	2000      	movs	r0, #0
 8004bde:	e6e3      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8004be0:	480b      	ldr	r0, [pc, #44]	; (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004be2:	e6e1      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004be4:	4b08      	ldr	r3, [pc, #32]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 8004be8:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8004bec:	d002      	beq.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
 8004bee:	b933      	cbnz	r3, 8004bfe <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
          frequency = 0;
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	e6d9      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004bf4:	a807      	add	r0, sp, #28
 8004bf6:	f7ff fdab 	bl	8004750 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004bfa:	9808      	ldr	r0, [sp, #32]
          break;
 8004bfc:	e6d4      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bfe:	a804      	add	r0, sp, #16
 8004c00:	f7ff fbaa 	bl	8004358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004c04:	9806      	ldr	r0, [sp, #24]
          break;
 8004c06:	e6cf      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8004c08:	58024400 	.word	0x58024400
 8004c0c:	00bb8000 	.word	0x00bb8000
 8004c10:	017d7840 	.word	0x017d7840
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004c14:	4b25      	ldr	r3, [pc, #148]	; (8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8004c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c18:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8004c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c20:	d019      	beq.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
 8004c22:	d90a      	bls.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
 8004c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c28:	d03e      	beq.n	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8004c2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c2e:	d017      	beq.n	8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8004c30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c34:	d00a      	beq.n	8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x300>
          frequency = 0;
 8004c36:	2000      	movs	r0, #0
          break;
 8004c38:	e6b6      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (srcclk)
 8004c3a:	b14b      	cbz	r3, 8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8004c3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c40:	d1f9      	bne.n	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c42:	a804      	add	r0, sp, #16
 8004c44:	f7ff fb88 	bl	8004358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004c48:	9805      	ldr	r0, [sp, #20]
          break;
 8004c4a:	e6ad      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = HSI_VALUE;
 8004c4c:	4818      	ldr	r0, [pc, #96]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8004c4e:	e6ab      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004c50:	f7ff fb70 	bl	8004334 <HAL_RCCEx_GetD3PCLK1Freq>
          break;
 8004c54:	e6a8      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c56:	a801      	add	r0, sp, #4
 8004c58:	f7ff fc7c 	bl	8004554 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004c5c:	9802      	ldr	r0, [sp, #8]
          break;
 8004c5e:	e6a3      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = HSE_VALUE;
 8004c60:	4814      	ldr	r0, [pc, #80]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
          break;
 8004c62:	e6a1      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 8004c64:	2000      	movs	r0, #0
 8004c66:	e69f      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8004c68:	4811      	ldr	r0, [pc, #68]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8004c6a:	e69d      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8004c6c:	4812      	ldr	r0, [pc, #72]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8004c6e:	e69b      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 8004c70:	2000      	movs	r0, #0
 8004c72:	e699      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8004c74:	480e      	ldr	r0, [pc, #56]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8004c76:	e697      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8004c78:	480f      	ldr	r0, [pc, #60]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8004c7a:	e695      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	e693      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8004c80:	480b      	ldr	r0, [pc, #44]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8004c82:	e691      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8004c84:	480c      	ldr	r0, [pc, #48]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8004c86:	e68f      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 8004c88:	2000      	movs	r0, #0
 8004c8a:	e68d      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8004c8c:	4808      	ldr	r0, [pc, #32]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8004c8e:	e68b      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8004c90:	4809      	ldr	r0, [pc, #36]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8004c92:	e689      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 8004c94:	2000      	movs	r0, #0
 8004c96:	e687      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8004c98:	4805      	ldr	r0, [pc, #20]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8004c9a:	e685      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8004c9c:	4806      	ldr	r0, [pc, #24]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8004c9e:	e683      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8004ca0:	4803      	ldr	r0, [pc, #12]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8004ca2:	e681      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8004ca4:	4804      	ldr	r0, [pc, #16]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8004ca6:	e67f      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = CSI_VALUE;
 8004ca8:	4803      	ldr	r0, [pc, #12]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
  return frequency;
 8004caa:	e67d      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8004cac:	58024400 	.word	0x58024400
 8004cb0:	03d09000 	.word	0x03d09000
 8004cb4:	017d7840 	.word	0x017d7840
 8004cb8:	003d0900 	.word	0x003d0900

08004cbc <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	d036      	beq.n	8004d2e <HAL_RNG_Init+0x72>
{
 8004cc0:	b538      	push	{r3, r4, r5, lr}
 8004cc2:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004cc4:	7a43      	ldrb	r3, [r0, #9]
 8004cc6:	b1b3      	cbz	r3, 8004cf6 <HAL_RNG_Init+0x3a>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004cc8:	2302      	movs	r3, #2
 8004cca:	7263      	strb	r3, [r4, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8004ccc:	6822      	ldr	r2, [r4, #0]
 8004cce:	6813      	ldr	r3, [r2, #0]
 8004cd0:	f023 0320 	bic.w	r3, r3, #32
 8004cd4:	6861      	ldr	r1, [r4, #4]
 8004cd6:	430b      	orrs	r3, r1
 8004cd8:	6013      	str	r3, [r2, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004cda:	6822      	ldr	r2, [r4, #0]
 8004cdc:	6813      	ldr	r3, [r2, #0]
 8004cde:	f043 0304 	orr.w	r3, r3, #4
 8004ce2:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004cec:	d007      	beq.n	8004cfe <HAL_RNG_Init+0x42>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8004cee:	2304      	movs	r3, #4
 8004cf0:	7263      	strb	r3, [r4, #9]
    return HAL_ERROR;
 8004cf2:	2001      	movs	r0, #1
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 8004cf4:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 8004cf6:	7203      	strb	r3, [r0, #8]
    HAL_RNG_MspInit(hrng);
 8004cf8:	f003 fc02 	bl	8008500 <HAL_RNG_MspInit>
 8004cfc:	e7e4      	b.n	8004cc8 <HAL_RNG_Init+0xc>
  tickstart = HAL_GetTick();
 8004cfe:	f7fb fb4b 	bl	8000398 <HAL_GetTick>
 8004d02:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004d04:	6823      	ldr	r3, [r4, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f013 0f04 	tst.w	r3, #4
 8004d0c:	d00a      	beq.n	8004d24 <HAL_RNG_Init+0x68>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004d0e:	f7fb fb43 	bl	8000398 <HAL_GetTick>
 8004d12:	1b40      	subs	r0, r0, r5
 8004d14:	2802      	cmp	r0, #2
 8004d16:	d9f5      	bls.n	8004d04 <HAL_RNG_Init+0x48>
      hrng->State = HAL_RNG_STATE_ERROR;
 8004d18:	2304      	movs	r3, #4
 8004d1a:	7263      	strb	r3, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	60e3      	str	r3, [r4, #12]
      return HAL_ERROR;
 8004d20:	2001      	movs	r0, #1
 8004d22:	e7e7      	b.n	8004cf4 <HAL_RNG_Init+0x38>
  hrng->State = HAL_RNG_STATE_READY;
 8004d24:	2301      	movs	r3, #1
 8004d26:	7263      	strb	r3, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004d28:	2000      	movs	r0, #0
 8004d2a:	60e0      	str	r0, [r4, #12]
  return HAL_OK;
 8004d2c:	e7e2      	b.n	8004cf4 <HAL_RNG_Init+0x38>
    return HAL_ERROR;
 8004d2e:	2001      	movs	r0, #1
}
 8004d30:	4770      	bx	lr

08004d32 <HAL_RNG_GenerateRandomNumber>:
{
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004d32:	7a03      	ldrb	r3, [r0, #8]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d02b      	beq.n	8004d90 <HAL_RNG_GenerateRandomNumber+0x5e>
{
 8004d38:	b570      	push	{r4, r5, r6, lr}
 8004d3a:	460d      	mov	r5, r1
 8004d3c:	4604      	mov	r4, r0
  __HAL_LOCK(hrng);
 8004d3e:	2301      	movs	r3, #1
 8004d40:	7203      	strb	r3, [r0, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004d42:	7a43      	ldrb	r3, [r0, #9]
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d005      	beq.n	8004d56 <HAL_RNG_GenerateRandomNumber+0x24>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004d4a:	2304      	movs	r3, #4
 8004d4c:	60c3      	str	r3, [r0, #12]
    status = HAL_ERROR;
 8004d4e:	2001      	movs	r0, #1
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004d50:	2300      	movs	r3, #0
 8004d52:	7223      	strb	r3, [r4, #8]

  return status;
}
 8004d54:	bd70      	pop	{r4, r5, r6, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8004d56:	2302      	movs	r3, #2
 8004d58:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 8004d5a:	f7fb fb1d 	bl	8000398 <HAL_GetTick>
 8004d5e:	4606      	mov	r6, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004d60:	6823      	ldr	r3, [r4, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	f012 0f01 	tst.w	r2, #1
 8004d68:	d10b      	bne.n	8004d82 <HAL_RNG_GenerateRandomNumber+0x50>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004d6a:	f7fb fb15 	bl	8000398 <HAL_GetTick>
 8004d6e:	1b80      	subs	r0, r0, r6
 8004d70:	2802      	cmp	r0, #2
 8004d72:	d9f5      	bls.n	8004d60 <HAL_RNG_GenerateRandomNumber+0x2e>
        hrng->State = HAL_RNG_STATE_READY;
 8004d74:	2001      	movs	r0, #1
 8004d76:	7260      	strb	r0, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004d78:	2302      	movs	r3, #2
 8004d7a:	60e3      	str	r3, [r4, #12]
        __HAL_UNLOCK(hrng);
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	7223      	strb	r3, [r4, #8]
        return HAL_ERROR;
 8004d80:	e7e8      	b.n	8004d54 <HAL_RNG_GenerateRandomNumber+0x22>
    hrng->RandomNumber = hrng->Instance->DR;
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 8004d86:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	7263      	strb	r3, [r4, #9]
  HAL_StatusTypeDef status = HAL_OK;
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	e7df      	b.n	8004d50 <HAL_RNG_GenerateRandomNumber+0x1e>
  __HAL_LOCK(hrng);
 8004d90:	2002      	movs	r0, #2
}
 8004d92:	4770      	bx	lr

08004d94 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004d94:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004d96:	2400      	movs	r4, #0
 8004d98:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004d9a:	64c4      	str	r4, [r0, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004d9c:	6845      	ldr	r5, [r0, #4]
 8004d9e:	2d02      	cmp	r5, #2
 8004da0:	bf14      	ite	ne
 8004da2:	2400      	movne	r4, #0
 8004da4:	2401      	moveq	r4, #1
 8004da6:	2d00      	cmp	r5, #0
 8004da8:	bf08      	it	eq
 8004daa:	2401      	moveq	r4, #1
 8004dac:	b1c4      	cbz	r4, 8004de0 <SAI_InitI2S+0x4c>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004dae:	2400      	movs	r4, #0
 8004db0:	6504      	str	r4, [r0, #80]	; 0x50
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8004db2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8004db6:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004db8:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8004dbc:	6744      	str	r4, [r0, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8004dbe:	2400      	movs	r4, #0
 8004dc0:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8004dc2:	6703      	str	r3, [r0, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8004dc4:	f013 0f01 	tst.w	r3, #1
 8004dc8:	d14b      	bne.n	8004e62 <SAI_InitI2S+0xce>
  {
    return HAL_ERROR;
  }

  if (protocol == SAI_I2S_STANDARD)
 8004dca:	b961      	cbnz	r1, 8004de6 <SAI_InitI2S+0x52>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004dcc:	6604      	str	r4, [r0, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8004dce:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8004dd2:	6644      	str	r4, [r0, #100]	; 0x64
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
  }

  /* Frame definition */
  switch (datasize)
 8004dd4:	2a03      	cmp	r2, #3
 8004dd6:	d83f      	bhi.n	8004e58 <SAI_InitI2S+0xc4>
 8004dd8:	e8df f002 	tbb	[pc, r2]
 8004ddc:	33281e0b 	.word	0x33281e0b
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004de0:	2401      	movs	r4, #1
 8004de2:	6504      	str	r4, [r0, #80]	; 0x50
 8004de4:	e7e5      	b.n	8004db2 <SAI_InitI2S+0x1e>
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8004de6:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 8004dea:	6604      	str	r4, [r0, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8004dec:	2400      	movs	r4, #0
 8004dee:	6644      	str	r4, [r0, #100]	; 0x64
 8004df0:	e7f0      	b.n	8004dd4 <SAI_InitI2S+0x40>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004df2:	2480      	movs	r4, #128	; 0x80
 8004df4:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004df6:	085b      	lsrs	r3, r3, #1
 8004df8:	015c      	lsls	r4, r3, #5
 8004dfa:	6544      	str	r4, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8004dfc:	011b      	lsls	r3, r3, #4
 8004dfe:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004e00:	2340      	movs	r3, #64	; 0x40
 8004e02:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8004e04:	2300      	movs	r3, #0
      break;
    default :
      status = HAL_ERROR;
      break;
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004e06:	2902      	cmp	r1, #2
 8004e08:	d12c      	bne.n	8004e64 <SAI_InitI2S+0xd0>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8004e0a:	2a01      	cmp	r2, #1
 8004e0c:	d026      	beq.n	8004e5c <SAI_InitI2S+0xc8>
    {
      hsai->SlotInit.FirstBitOffset = 16;
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8004e0e:	2a02      	cmp	r2, #2
 8004e10:	d128      	bne.n	8004e64 <SAI_InitI2S+0xd0>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8004e12:	2208      	movs	r2, #8
 8004e14:	6682      	str	r2, [r0, #104]	; 0x68
 8004e16:	e025      	b.n	8004e64 <SAI_InitI2S+0xd0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004e18:	2480      	movs	r4, #128	; 0x80
 8004e1a:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004e1c:	085b      	lsrs	r3, r3, #1
 8004e1e:	019d      	lsls	r5, r3, #6
 8004e20:	6545      	str	r5, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004e22:	015b      	lsls	r3, r3, #5
 8004e24:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004e26:	66c4      	str	r4, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8004e28:	2300      	movs	r3, #0
      break;
 8004e2a:	e7ec      	b.n	8004e06 <SAI_InitI2S+0x72>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004e2c:	24c0      	movs	r4, #192	; 0xc0
 8004e2e:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004e30:	085b      	lsrs	r3, r3, #1
 8004e32:	019c      	lsls	r4, r3, #6
 8004e34:	6544      	str	r4, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004e36:	015b      	lsls	r3, r3, #5
 8004e38:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004e3a:	2380      	movs	r3, #128	; 0x80
 8004e3c:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8004e3e:	2300      	movs	r3, #0
      break;
 8004e40:	e7e1      	b.n	8004e06 <SAI_InitI2S+0x72>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004e42:	24e0      	movs	r4, #224	; 0xe0
 8004e44:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004e46:	085b      	lsrs	r3, r3, #1
 8004e48:	019c      	lsls	r4, r3, #6
 8004e4a:	6544      	str	r4, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004e4c:	015b      	lsls	r3, r3, #5
 8004e4e:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004e50:	2380      	movs	r3, #128	; 0x80
 8004e52:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8004e54:	2300      	movs	r3, #0
      break;
 8004e56:	e7d6      	b.n	8004e06 <SAI_InitI2S+0x72>
      status = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e7d4      	b.n	8004e06 <SAI_InitI2S+0x72>
      hsai->SlotInit.FirstBitOffset = 16;
 8004e5c:	2110      	movs	r1, #16
 8004e5e:	6681      	str	r1, [r0, #104]	; 0x68
 8004e60:	e7d5      	b.n	8004e0e <SAI_InitI2S+0x7a>
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
    }
  }
  return status;
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	bc30      	pop	{r4, r5}
 8004e68:	4770      	bx	lr

08004e6a <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004e6a:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004e6c:	2400      	movs	r4, #0
 8004e6e:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004e70:	64c4      	str	r4, [r0, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004e72:	6845      	ldr	r5, [r0, #4]
 8004e74:	2d02      	cmp	r5, #2
 8004e76:	bf14      	ite	ne
 8004e78:	2400      	movne	r4, #0
 8004e7a:	2401      	moveq	r4, #1
 8004e7c:	2d00      	cmp	r5, #0
 8004e7e:	bf08      	it	eq
 8004e80:	2401      	moveq	r4, #1
 8004e82:	b1c4      	cbz	r4, 8004eb6 <SAI_InitPCM+0x4c>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004e84:	2401      	movs	r4, #1
 8004e86:	6504      	str	r4, [r0, #80]	; 0x50
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8004e88:	2400      	movs	r4, #0
 8004e8a:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8004e8c:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8004e90:	6605      	str	r5, [r0, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8004e92:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8004e96:	6645      	str	r5, [r0, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8004e98:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8004e9a:	6703      	str	r3, [r0, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004e9c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8004ea0:	6744      	str	r4, [r0, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8004ea2:	2904      	cmp	r1, #4
 8004ea4:	d00a      	beq.n	8004ebc <SAI_InitPCM+0x52>
      hsai->FrameInit.ActiveFrameLength = 1;
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8004ea6:	210d      	movs	r1, #13
 8004ea8:	6581      	str	r1, [r0, #88]	; 0x58
  }

  switch (datasize)
 8004eaa:	2a03      	cmp	r2, #3
 8004eac:	d829      	bhi.n	8004f02 <SAI_InitPCM+0x98>
 8004eae:	e8df f002 	tbb	[pc, r2]
 8004eb2:	1108      	.short	0x1108
 8004eb4:	2018      	.short	0x2018
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004eb6:	2400      	movs	r4, #0
 8004eb8:	6504      	str	r4, [r0, #80]	; 0x50
 8004eba:	e7e5      	b.n	8004e88 <SAI_InitPCM+0x1e>
      hsai->FrameInit.ActiveFrameLength = 1;
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	6581      	str	r1, [r0, #88]	; 0x58
 8004ec0:	e7f3      	b.n	8004eaa <SAI_InitPCM+0x40>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004ec2:	2280      	movs	r2, #128	; 0x80
 8004ec4:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004eca:	2340      	movs	r3, #64	; 0x40
 8004ecc:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8004ece:	2000      	movs	r0, #0
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8004ed0:	bc30      	pop	{r4, r5}
 8004ed2:	4770      	bx	lr
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004ed4:	2280      	movs	r2, #128	; 0x80
 8004ed6:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004ed8:	015b      	lsls	r3, r3, #5
 8004eda:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004edc:	66c2      	str	r2, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8004ede:	2000      	movs	r0, #0
      break;
 8004ee0:	e7f6      	b.n	8004ed0 <SAI_InitPCM+0x66>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004ee2:	22c0      	movs	r2, #192	; 0xc0
 8004ee4:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004ee6:	015b      	lsls	r3, r3, #5
 8004ee8:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004eea:	2380      	movs	r3, #128	; 0x80
 8004eec:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8004eee:	2000      	movs	r0, #0
      break;
 8004ef0:	e7ee      	b.n	8004ed0 <SAI_InitPCM+0x66>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004ef2:	22e0      	movs	r2, #224	; 0xe0
 8004ef4:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004ef6:	015b      	lsls	r3, r3, #5
 8004ef8:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004efa:	2380      	movs	r3, #128	; 0x80
 8004efc:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8004efe:	2000      	movs	r0, #0
      break;
 8004f00:	e7e6      	b.n	8004ed0 <SAI_InitPCM+0x66>
      status = HAL_ERROR;
 8004f02:	2001      	movs	r0, #1
 8004f04:	e7e4      	b.n	8004ed0 <SAI_InitPCM+0x66>

08004f06 <SAI_InterruptFlag>:
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if (mode == SAI_MODE_IT)
 8004f06:	2901      	cmp	r1, #1
 8004f08:	d00a      	beq.n	8004f20 <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8004f0a:	2301      	movs	r3, #1
  {
    tmpIT |= SAI_IT_FREQ;
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004f0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004f0e:	2a08      	cmp	r2, #8
 8004f10:	d008      	beq.n	8004f24 <SAI_InterruptFlag+0x1e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT |= SAI_IT_CNRDY;
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004f12:	6842      	ldr	r2, [r0, #4]
 8004f14:	3a02      	subs	r2, #2
 8004f16:	2a01      	cmp	r2, #1
 8004f18:	d90c      	bls.n	8004f34 <SAI_InterruptFlag+0x2e>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8004f1a:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 8004f1e:	4770      	bx	lr
    tmpIT |= SAI_IT_FREQ;
 8004f20:	2309      	movs	r3, #9
 8004f22:	e7f3      	b.n	8004f0c <SAI_InterruptFlag+0x6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004f24:	6842      	ldr	r2, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004f26:	2a01      	cmp	r2, #1
 8004f28:	bf18      	it	ne
 8004f2a:	2a03      	cmpne	r2, #3
 8004f2c:	d1f1      	bne.n	8004f12 <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_CNRDY;
 8004f2e:	f043 0310 	orr.w	r3, r3, #16
 8004f32:	e7ee      	b.n	8004f12 <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8004f34:	f043 0060 	orr.w	r0, r3, #96	; 0x60
 8004f38:	4770      	bx	lr
	...

08004f3c <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004f3c:	4b0e      	ldr	r3, [pc, #56]	; (8004f78 <SAI_Disable+0x3c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a0e      	ldr	r2, [pc, #56]	; (8004f7c <SAI_Disable+0x40>)
 8004f42:	fba2 2303 	umull	r2, r3, r2, r3
 8004f46:	0b1b      	lsrs	r3, r3, #12
 8004f48:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004f4a:	6801      	ldr	r1, [r0, #0]
 8004f4c:	680a      	ldr	r2, [r1, #0]
 8004f4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004f52:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004f54:	b13b      	cbz	r3, 8004f66 <SAI_Disable+0x2a>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
    count--;
 8004f56:	3b01      	subs	r3, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004f58:	6802      	ldr	r2, [r0, #0]
 8004f5a:	6812      	ldr	r2, [r2, #0]
 8004f5c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004f60:	d1f8      	bne.n	8004f54 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8004f62:	2000      	movs	r0, #0

  return status;
}
 8004f64:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004f66:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8004f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f6e:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      status = HAL_TIMEOUT;
 8004f72:	2003      	movs	r0, #3
      break;
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	20000288 	.word	0x20000288
 8004f7c:	95cbec1b 	.word	0x95cbec1b

08004f80 <HAL_SAI_Init>:
{
 8004f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hsai == NULL)
 8004f84:	2800      	cmp	r0, #0
 8004f86:	f000 81cd 	beq.w	8005324 <HAL_SAI_Init+0x3a4>
 8004f8a:	4604      	mov	r4, r0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8004f8c:	f7fb fa1e 	bl	80003cc <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8004f90:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d025      	beq.n	8004fe4 <HAL_SAI_Init+0x64>
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004f98:	6823      	ldr	r3, [r4, #0]
 8004f9a:	49b1      	ldr	r1, [pc, #708]	; (8005260 <HAL_SAI_Init+0x2e0>)
 8004f9c:	4ab1      	ldr	r2, [pc, #708]	; (8005264 <HAL_SAI_Init+0x2e4>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	bf18      	it	ne
 8004fa2:	428b      	cmpne	r3, r1
 8004fa4:	d030      	beq.n	8005008 <HAL_SAI_Init+0x88>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004fa6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004faa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	bf18      	it	ne
 8004fb2:	428b      	cmpne	r3, r1
 8004fb4:	d045      	beq.n	8005042 <HAL_SAI_Init+0xc2>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8004fb6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004fba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	bf18      	it	ne
 8004fc2:	428b      	cmpne	r3, r1
 8004fc4:	d03f      	beq.n	8005046 <HAL_SAI_Init+0xc6>
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8004fc6:	f101 51c0 	add.w	r1, r1, #402653184	; 0x18000000
 8004fca:	f5a1 3186 	sub.w	r1, r1, #68608	; 0x10c00
 8004fce:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8004fd2:	f5a2 3286 	sub.w	r2, r2, #68608	; 0x10c00
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	bf18      	it	ne
 8004fda:	428b      	cmpne	r3, r1
 8004fdc:	f040 81a8 	bne.w	8005330 <HAL_SAI_Init+0x3b0>
    SaiBaseAddress = SAI4;
 8004fe0:	4ea1      	ldr	r6, [pc, #644]	; (8005268 <HAL_SAI_Init+0x2e8>)
 8004fe2:	e012      	b.n	800500a <HAL_SAI_Init+0x8a>
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8004fe4:	6823      	ldr	r3, [r4, #0]
 8004fe6:	499e      	ldr	r1, [pc, #632]	; (8005260 <HAL_SAI_Init+0x2e0>)
 8004fe8:	4aa0      	ldr	r2, [pc, #640]	; (800526c <HAL_SAI_Init+0x2ec>)
 8004fea:	428b      	cmp	r3, r1
 8004fec:	bf18      	it	ne
 8004fee:	4293      	cmpne	r3, r2
 8004ff0:	f040 819c 	bne.w	800532c <HAL_SAI_Init+0x3ac>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004ff4:	6863      	ldr	r3, [r4, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d001      	beq.n	8004ffe <HAL_SAI_Init+0x7e>
      return HAL_ERROR;
 8004ffa:	2501      	movs	r5, #1
 8004ffc:	e193      	b.n	8005326 <HAL_SAI_Init+0x3a6>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8004ffe:	6c63      	ldr	r3, [r4, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0c9      	beq.n	8004f98 <HAL_SAI_Init+0x18>
      return HAL_ERROR;
 8005004:	2501      	movs	r5, #1
 8005006:	e18e      	b.n	8005326 <HAL_SAI_Init+0x3a6>
    SaiBaseAddress = SAI1;
 8005008:	4e99      	ldr	r6, [pc, #612]	; (8005270 <HAL_SAI_Init+0x2f0>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 800500a:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800500e:	b1e3      	cbz	r3, 800504a <HAL_SAI_Init+0xca>
  if(SAI_Disable(hsai) != HAL_OK)
 8005010:	4620      	mov	r0, r4
 8005012:	f7ff ff93 	bl	8004f3c <SAI_Disable>
 8005016:	4605      	mov	r5, r0
 8005018:	2800      	cmp	r0, #0
 800501a:	f040 818b 	bne.w	8005334 <HAL_SAI_Init+0x3b4>
  hsai->State = HAL_SAI_STATE_BUSY;
 800501e:	2302      	movs	r3, #2
 8005020:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 8005024:	68e3      	ldr	r3, [r4, #12]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d017      	beq.n	800505a <HAL_SAI_Init+0xda>
 800502a:	2b02      	cmp	r3, #2
 800502c:	d013      	beq.n	8005056 <HAL_SAI_Init+0xd6>
      tmpregisterGCR = 0;
 800502e:	2200      	movs	r2, #0
  switch (hsai->Init.Synchro)
 8005030:	68a3      	ldr	r3, [r4, #8]
 8005032:	3b01      	subs	r3, #1
 8005034:	2b04      	cmp	r3, #4
 8005036:	d812      	bhi.n	800505e <HAL_SAI_Init+0xde>
 8005038:	e8df f003 	tbb	[pc, r3]
 800503c:	1b161325 	.word	0x1b161325
 8005040:	20          	.byte	0x20
 8005041:	00          	.byte	0x00
    SaiBaseAddress = SAI2;
 8005042:	4e8c      	ldr	r6, [pc, #560]	; (8005274 <HAL_SAI_Init+0x2f4>)
 8005044:	e7e1      	b.n	800500a <HAL_SAI_Init+0x8a>
    SaiBaseAddress = SAI3;
 8005046:	4e8c      	ldr	r6, [pc, #560]	; (8005278 <HAL_SAI_Init+0x2f8>)
 8005048:	e7df      	b.n	800500a <HAL_SAI_Init+0x8a>
    hsai->Lock = HAL_UNLOCKED;
 800504a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 800504e:	4620      	mov	r0, r4
 8005050:	f003 faaa 	bl	80085a8 <HAL_SAI_MspInit>
 8005054:	e7dc      	b.n	8005010 <HAL_SAI_Init+0x90>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005056:	2220      	movs	r2, #32
      break;
 8005058:	e7ea      	b.n	8005030 <HAL_SAI_Init+0xb0>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800505a:	2210      	movs	r2, #16
 800505c:	e7e8      	b.n	8005030 <HAL_SAI_Init+0xb0>
      syncen_bits = 0;
 800505e:	2700      	movs	r7, #0
 8005060:	e013      	b.n	800508a <HAL_SAI_Init+0x10a>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005062:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8005066:	e010      	b.n	800508a <HAL_SAI_Init+0x10a>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005068:	f042 0201 	orr.w	r2, r2, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800506c:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8005070:	e00b      	b.n	800508a <HAL_SAI_Init+0x10a>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8005072:	f042 0202 	orr.w	r2, r2, #2
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005076:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 800507a:	e006      	b.n	800508a <HAL_SAI_Init+0x10a>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800507c:	f042 0203 	orr.w	r2, r2, #3
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005080:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8005084:	e001      	b.n	800508a <HAL_SAI_Init+0x10a>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005086:	f44f 6780 	mov.w	r7, #1024	; 0x400
  SaiBaseAddress->GCR = tmpregisterGCR;
 800508a:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800508c:	6a23      	ldr	r3, [r4, #32]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d043      	beq.n	800511a <HAL_SAI_Init+0x19a>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	4972      	ldr	r1, [pc, #456]	; (8005260 <HAL_SAI_Init+0x2e0>)
 8005096:	4a73      	ldr	r2, [pc, #460]	; (8005264 <HAL_SAI_Init+0x2e4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	bf18      	it	ne
 800509c:	428b      	cmpne	r3, r1
 800509e:	f000 80c5 	beq.w	800522c <HAL_SAI_Init+0x2ac>
    uint32_t freq = 0;
 80050a2:	2000      	movs	r0, #0
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	4975      	ldr	r1, [pc, #468]	; (800527c <HAL_SAI_Init+0x2fc>)
 80050a8:	4a75      	ldr	r2, [pc, #468]	; (8005280 <HAL_SAI_Init+0x300>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	bf18      	it	ne
 80050ae:	428b      	cmpne	r3, r1
 80050b0:	f000 80c1 	beq.w	8005236 <HAL_SAI_Init+0x2b6>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	4973      	ldr	r1, [pc, #460]	; (8005284 <HAL_SAI_Init+0x304>)
 80050b8:	4a73      	ldr	r2, [pc, #460]	; (8005288 <HAL_SAI_Init+0x308>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	bf18      	it	ne
 80050be:	428b      	cmpne	r3, r1
 80050c0:	f000 80be 	beq.w	8005240 <HAL_SAI_Init+0x2c0>
    if (hsai->Instance == SAI4_Block_A)
 80050c4:	6822      	ldr	r2, [r4, #0]
 80050c6:	4b69      	ldr	r3, [pc, #420]	; (800526c <HAL_SAI_Init+0x2ec>)
 80050c8:	429a      	cmp	r2, r3
 80050ca:	f000 80be 	beq.w	800524a <HAL_SAI_Init+0x2ca>
    if (hsai->Instance == SAI4_Block_B)
 80050ce:	6822      	ldr	r2, [r4, #0]
 80050d0:	4b6e      	ldr	r3, [pc, #440]	; (800528c <HAL_SAI_Init+0x30c>)
 80050d2:	429a      	cmp	r2, r3
 80050d4:	f000 80be 	beq.w	8005254 <HAL_SAI_Init+0x2d4>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80050d8:	69a3      	ldr	r3, [r4, #24]
 80050da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80050de:	f000 80df 	beq.w	80052a0 <HAL_SAI_Init+0x320>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80050e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80050e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050e8:	f000 80e4 	beq.w	80052b4 <HAL_SAI_Init+0x334>
 80050ec:	2301      	movs	r3, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80050ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80050f2:	0041      	lsls	r1, r0, #1
 80050f4:	6a22      	ldr	r2, [r4, #32]
 80050f6:	fb03 f302 	mul.w	r3, r3, r2
 80050fa:	021b      	lsls	r3, r3, #8
 80050fc:	fbb1 f1f3 	udiv	r1, r1, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 8005100:	4b63      	ldr	r3, [pc, #396]	; (8005290 <HAL_SAI_Init+0x310>)
 8005102:	fba3 2301 	umull	r2, r3, r3, r1
 8005106:	08db      	lsrs	r3, r3, #3
 8005108:	6263      	str	r3, [r4, #36]	; 0x24
    if ((tmpval % 10U) > 8U)
 800510a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800510e:	0042      	lsls	r2, r0, #1
 8005110:	1a8a      	subs	r2, r1, r2
 8005112:	2a08      	cmp	r2, #8
 8005114:	d901      	bls.n	800511a <HAL_SAI_Init+0x19a>
      hsai->Init.Mckdiv += 1U;
 8005116:	3301      	adds	r3, #1
 8005118:	6263      	str	r3, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800511a:	6862      	ldr	r2, [r4, #4]
 800511c:	2a02      	cmp	r2, #2
 800511e:	bf14      	ite	ne
 8005120:	2300      	movne	r3, #0
 8005122:	2301      	moveq	r3, #1
 8005124:	2a00      	cmp	r2, #0
 8005126:	bf08      	it	eq
 8005128:	2301      	moveq	r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 80c7 	beq.w	80052be <HAL_SAI_Init+0x33e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005130:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005132:	2b01      	cmp	r3, #1
 8005134:	f000 80c0 	beq.w	80052b8 <HAL_SAI_Init+0x338>
 8005138:	f44f 7800 	mov.w	r8, #512	; 0x200
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800513c:	f7fb f946 	bl	80003cc <HAL_GetREVID>
 8005140:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8005144:	f0c0 80c4 	bcc.w	80052d0 <HAL_SAI_Init+0x350>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005148:	6822      	ldr	r2, [r4, #0]
 800514a:	6811      	ldr	r1, [r2, #0]
 800514c:	4b51      	ldr	r3, [pc, #324]	; (8005294 <HAL_SAI_Init+0x314>)
 800514e:	400b      	ands	r3, r1
 8005150:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005152:	6821      	ldr	r1, [r4, #0]
 8005154:	680a      	ldr	r2, [r1, #0]
 8005156:	6863      	ldr	r3, [r4, #4]
 8005158:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800515a:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800515c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800515e:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005160:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005162:	4303      	orrs	r3, r0
 8005164:	ea43 0308 	orr.w	r3, r3, r8
                            ckstr_bits | syncen_bits |                             \
 8005168:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800516a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800516c:	4303      	orrs	r3, r0
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800516e:	6960      	ldr	r0, [r4, #20]
 8005170:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005172:	69a0      	ldr	r0, [r4, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005174:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005176:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005178:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800517c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800517e:	4303      	orrs	r3, r0
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8005180:	6920      	ldr	r0, [r4, #16]
 8005182:	4303      	orrs	r3, r0
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005184:	4313      	orrs	r3, r2
 8005186:	600b      	str	r3, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005188:	6822      	ldr	r2, [r4, #0]
 800518a:	6851      	ldr	r1, [r2, #4]
 800518c:	4b42      	ldr	r3, [pc, #264]	; (8005298 <HAL_SAI_Init+0x318>)
 800518e:	400b      	ands	r3, r1
 8005190:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005192:	6821      	ldr	r1, [r4, #0]
 8005194:	684a      	ldr	r2, [r1, #4]
 8005196:	69e3      	ldr	r3, [r4, #28]
 8005198:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800519a:	4303      	orrs	r3, r0
 800519c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800519e:	4303      	orrs	r3, r0
 80051a0:	4313      	orrs	r3, r2
 80051a2:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80051a4:	6822      	ldr	r2, [r4, #0]
 80051a6:	6891      	ldr	r1, [r2, #8]
 80051a8:	4b3c      	ldr	r3, [pc, #240]	; (800529c <HAL_SAI_Init+0x31c>)
 80051aa:	400b      	ands	r3, r1
 80051ac:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80051ae:	6820      	ldr	r0, [r4, #0]
 80051b0:	6882      	ldr	r2, [r0, #8]
 80051b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80051b4:	3b01      	subs	r3, #1
                           hsai->FrameInit.FSOffset |
 80051b6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80051b8:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSDefinition |
 80051ba:	6de1      	ldr	r1, [r4, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 80051bc:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSPolarity   |
 80051be:	6e21      	ldr	r1, [r4, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 80051c0:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80051c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80051c4:	3901      	subs	r1, #1
                           hsai->FrameInit.FSPolarity   |
 80051c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80051ca:	4313      	orrs	r3, r2
 80051cc:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80051ce:	6822      	ldr	r2, [r4, #0]
 80051d0:	68d3      	ldr	r3, [r2, #12]
 80051d2:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 80051d6:	f023 030f 	bic.w	r3, r3, #15
 80051da:	041b      	lsls	r3, r3, #16
 80051dc:	0c1b      	lsrs	r3, r3, #16
 80051de:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80051e0:	6820      	ldr	r0, [r4, #0]
 80051e2:	68c2      	ldr	r2, [r0, #12]
 80051e4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80051e6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80051e8:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80051ea:	6f61      	ldr	r1, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80051ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80051f0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80051f2:	3901      	subs	r1, #1
 80051f4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60c3      	str	r3, [r0, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80051fc:	6823      	ldr	r3, [r4, #0]
 80051fe:	4918      	ldr	r1, [pc, #96]	; (8005260 <HAL_SAI_Init+0x2e0>)
 8005200:	4a1a      	ldr	r2, [pc, #104]	; (800526c <HAL_SAI_Init+0x2ec>)
 8005202:	4293      	cmp	r3, r2
 8005204:	bf18      	it	ne
 8005206:	428b      	cmpne	r3, r1
 8005208:	d107      	bne.n	800521a <HAL_SAI_Init+0x29a>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800520a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800520c:	f023 0301 	bic.w	r3, r3, #1
 8005210:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8005212:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8005216:	2b01      	cmp	r3, #1
 8005218:	d079      	beq.n	800530e <HAL_SAI_Init+0x38e>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800521a:	2300      	movs	r3, #0
 800521c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  hsai->State = HAL_SAI_STATE_READY;
 8005220:	2201      	movs	r2, #1
 8005222:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 8005226:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  return HAL_OK;
 800522a:	e07c      	b.n	8005326 <HAL_SAI_Init+0x3a6>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800522c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005230:	f7ff fb8c 	bl	800494c <HAL_RCCEx_GetPeriphCLKFreq>
 8005234:	e736      	b.n	80050a4 <HAL_SAI_Init+0x124>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005236:	f44f 7000 	mov.w	r0, #512	; 0x200
 800523a:	f7ff fb87 	bl	800494c <HAL_RCCEx_GetPeriphCLKFreq>
 800523e:	e739      	b.n	80050b4 <HAL_SAI_Init+0x134>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8005240:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005244:	f7ff fb82 	bl	800494c <HAL_RCCEx_GetPeriphCLKFreq>
 8005248:	e73c      	b.n	80050c4 <HAL_SAI_Init+0x144>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800524a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800524e:	f7ff fb7d 	bl	800494c <HAL_RCCEx_GetPeriphCLKFreq>
 8005252:	e73c      	b.n	80050ce <HAL_SAI_Init+0x14e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8005254:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005258:	f7ff fb78 	bl	800494c <HAL_RCCEx_GetPeriphCLKFreq>
 800525c:	e73c      	b.n	80050d8 <HAL_SAI_Init+0x158>
 800525e:	bf00      	nop
 8005260:	40015804 	.word	0x40015804
 8005264:	40015824 	.word	0x40015824
 8005268:	58005400 	.word	0x58005400
 800526c:	58005404 	.word	0x58005404
 8005270:	40015800 	.word	0x40015800
 8005274:	40015c00 	.word	0x40015c00
 8005278:	40016000 	.word	0x40016000
 800527c:	40015c04 	.word	0x40015c04
 8005280:	40015c24 	.word	0x40015c24
 8005284:	40016004 	.word	0x40016004
 8005288:	40016024 	.word	0x40016024
 800528c:	58005424 	.word	0x58005424
 8005290:	cccccccd 	.word	0xcccccccd
 8005294:	f005c010 	.word	0xf005c010
 8005298:	ffff1ff0 	.word	0xffff1ff0
 800529c:	fff88000 	.word	0xfff88000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * hsai->FrameInit.FrameLength);
 80052a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80052a4:	0041      	lsls	r1, r0, #1
 80052a6:	6a22      	ldr	r2, [r4, #32]
 80052a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80052aa:	fb03 f302 	mul.w	r3, r3, r2
 80052ae:	fbb1 f1f3 	udiv	r1, r1, r3
 80052b2:	e725      	b.n	8005100 <HAL_SAI_Init+0x180>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80052b4:	2302      	movs	r3, #2
 80052b6:	e71a      	b.n	80050ee <HAL_SAI_Init+0x16e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80052b8:	f04f 0800 	mov.w	r8, #0
 80052bc:	e73e      	b.n	800513c <HAL_SAI_Init+0x1bc>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80052be:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d002      	beq.n	80052ca <HAL_SAI_Init+0x34a>
 80052c4:	f04f 0800 	mov.w	r8, #0
 80052c8:	e738      	b.n	800513c <HAL_SAI_Init+0x1bc>
 80052ca:	f44f 7800 	mov.w	r8, #512	; 0x200
 80052ce:	e735      	b.n	800513c <HAL_SAI_Init+0x1bc>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80052d0:	6822      	ldr	r2, [r4, #0]
 80052d2:	6811      	ldr	r1, [r2, #0]
 80052d4:	4b18      	ldr	r3, [pc, #96]	; (8005338 <HAL_SAI_Init+0x3b8>)
 80052d6:	400b      	ands	r3, r1
 80052d8:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80052da:	6821      	ldr	r1, [r4, #0]
 80052dc:	680a      	ldr	r2, [r1, #0]
 80052de:	6863      	ldr	r3, [r4, #4]
 80052e0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80052e2:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80052e4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80052e6:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80052e8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80052ea:	4303      	orrs	r3, r0
 80052ec:	ea43 0308 	orr.w	r3, r3, r8
                            ckstr_bits | syncen_bits |                             \
 80052f0:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80052f2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 80052f4:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80052f6:	6967      	ldr	r7, [r4, #20]
 80052f8:	433b      	orrs	r3, r7
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80052fa:	69a0      	ldr	r0, [r4, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80052fc:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80052fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005300:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                            hsai->Init.MckOverSampling);
 8005304:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005306:	4303      	orrs	r3, r0
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005308:	4313      	orrs	r3, r2
 800530a:	600b      	str	r3, [r1, #0]
 800530c:	e73c      	b.n	8005188 <HAL_SAI_Init+0x208>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800530e:	6c23      	ldr	r3, [r4, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8005310:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005312:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8005314:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8005318:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800531a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	6473      	str	r3, [r6, #68]	; 0x44
 8005322:	e77a      	b.n	800521a <HAL_SAI_Init+0x29a>
    return HAL_ERROR;
 8005324:	2501      	movs	r5, #1
}
 8005326:	4628      	mov	r0, r5
 8005328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 800532c:	2501      	movs	r5, #1
 800532e:	e7fa      	b.n	8005326 <HAL_SAI_Init+0x3a6>
    return HAL_ERROR;
 8005330:	2501      	movs	r5, #1
 8005332:	e7f8      	b.n	8005326 <HAL_SAI_Init+0x3a6>
    return HAL_ERROR;
 8005334:	2501      	movs	r5, #1
 8005336:	e7f6      	b.n	8005326 <HAL_SAI_Init+0x3a6>
 8005338:	f805c010 	.word	0xf805c010

0800533c <HAL_SAI_InitProtocol>:
{
 800533c:	b510      	push	{r4, lr}
 800533e:	4604      	mov	r4, r0
  switch (protocol)
 8005340:	2904      	cmp	r1, #4
 8005342:	d811      	bhi.n	8005368 <HAL_SAI_InitProtocol+0x2c>
 8005344:	e8df f001 	tbb	[pc, r1]
 8005348:	08030303 	.word	0x08030303
 800534c:	08          	.byte	0x08
 800534d:	00          	.byte	0x00
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800534e:	4620      	mov	r0, r4
 8005350:	f7ff fd20 	bl	8004d94 <SAI_InitI2S>
  if (status == HAL_OK)
 8005354:	b120      	cbz	r0, 8005360 <HAL_SAI_InitProtocol+0x24>
}
 8005356:	bd10      	pop	{r4, pc}
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8005358:	4620      	mov	r0, r4
 800535a:	f7ff fd86 	bl	8004e6a <SAI_InitPCM>
      break;
 800535e:	e7f9      	b.n	8005354 <HAL_SAI_InitProtocol+0x18>
    status = HAL_SAI_Init(hsai);
 8005360:	4620      	mov	r0, r4
 8005362:	f7ff fe0d 	bl	8004f80 <HAL_SAI_Init>
 8005366:	e7f6      	b.n	8005356 <HAL_SAI_InitProtocol+0x1a>
      status = HAL_ERROR;
 8005368:	2001      	movs	r0, #1
 800536a:	e7f4      	b.n	8005356 <HAL_SAI_InitProtocol+0x1a>

0800536c <HAL_SAI_Transmit_DMA>:
{
 800536c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536e:	4604      	mov	r4, r0
 8005370:	460e      	mov	r6, r1
 8005372:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8005374:	f7fb f810 	bl	8000398 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 8005378:	fab5 f385 	clz	r3, r5
 800537c:	095b      	lsrs	r3, r3, #5
 800537e:	2e00      	cmp	r6, #0
 8005380:	bf08      	it	eq
 8005382:	2301      	moveq	r3, #1
 8005384:	2b00      	cmp	r3, #0
 8005386:	d165      	bne.n	8005454 <HAL_SAI_Transmit_DMA+0xe8>
 8005388:	4607      	mov	r7, r0
  if (hsai->State == HAL_SAI_STATE_READY)
 800538a:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b01      	cmp	r3, #1
 8005392:	d162      	bne.n	800545a <HAL_SAI_Transmit_DMA+0xee>
    __HAL_LOCK(hsai);
 8005394:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8005398:	2b01      	cmp	r3, #1
 800539a:	d060      	beq.n	800545e <HAL_SAI_Transmit_DMA+0xf2>
 800539c:	2301      	movs	r3, #1
 800539e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    hsai->pBuffPtr = pData;
 80053a2:	67a6      	str	r6, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 80053a4:	f8a4 507c 	strh.w	r5, [r4, #124]	; 0x7c
    hsai->XferCount = Size;
 80053a8:	f8a4 507e 	strh.w	r5, [r4, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80053ac:	2300      	movs	r3, #0
 80053ae:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80053b2:	2212      	movs	r2, #18
 80053b4:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80053b8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80053bc:	4929      	ldr	r1, [pc, #164]	; (8005464 <HAL_SAI_Transmit_DMA+0xf8>)
 80053be:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80053c0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80053c4:	4928      	ldr	r1, [pc, #160]	; (8005468 <HAL_SAI_Transmit_DMA+0xfc>)
 80053c6:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80053c8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80053cc:	4927      	ldr	r1, [pc, #156]	; (800546c <HAL_SAI_Transmit_DMA+0x100>)
 80053ce:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 80053d0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80053d4:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80053d6:	6822      	ldr	r2, [r4, #0]
 80053d8:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 80053dc:	321c      	adds	r2, #28
 80053de:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80053e0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80053e4:	f7fc faee 	bl	80019c4 <HAL_DMA_Start_IT>
 80053e8:	4605      	mov	r5, r0
 80053ea:	bb10      	cbnz	r0, 8005432 <HAL_SAI_Transmit_DMA+0xc6>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80053ec:	2100      	movs	r1, #0
 80053ee:	4620      	mov	r0, r4
 80053f0:	f7ff fd89 	bl	8004f06 <SAI_InterruptFlag>
 80053f4:	6822      	ldr	r2, [r4, #0]
 80053f6:	6913      	ldr	r3, [r2, #16]
 80053f8:	4318      	orrs	r0, r3
 80053fa:	6110      	str	r0, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80053fc:	6822      	ldr	r2, [r4, #0]
 80053fe:	6813      	ldr	r3, [r2, #0]
 8005400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005404:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005406:	6823      	ldr	r3, [r4, #0]
 8005408:	695a      	ldr	r2, [r3, #20]
 800540a:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
 800540e:	d115      	bne.n	800543c <HAL_SAI_Transmit_DMA+0xd0>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8005410:	f7fa ffc2 	bl	8000398 <HAL_GetTick>
 8005414:	1bc0      	subs	r0, r0, r7
 8005416:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800541a:	d9f4      	bls.n	8005406 <HAL_SAI_Transmit_DMA+0x9a>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800541c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005424:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        __HAL_UNLOCK(hsai);
 8005428:	2300      	movs	r3, #0
 800542a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        return HAL_TIMEOUT;
 800542e:	2503      	movs	r5, #3
 8005430:	e011      	b.n	8005456 <HAL_SAI_Transmit_DMA+0xea>
      __HAL_UNLOCK(hsai);
 8005432:	2300      	movs	r3, #0
 8005434:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      return  HAL_ERROR;
 8005438:	2501      	movs	r5, #1
 800543a:	e00c      	b.n	8005456 <HAL_SAI_Transmit_DMA+0xea>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8005442:	d103      	bne.n	800544c <HAL_SAI_Transmit_DMA+0xe0>
      __HAL_SAI_ENABLE(hsai);
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800544a:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 800544c:	2300      	movs	r3, #0
 800544e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 8005452:	e000      	b.n	8005456 <HAL_SAI_Transmit_DMA+0xea>
    return  HAL_ERROR;
 8005454:	2501      	movs	r5, #1
}
 8005456:	4628      	mov	r0, r5
 8005458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800545a:	2502      	movs	r5, #2
 800545c:	e7fb      	b.n	8005456 <HAL_SAI_Transmit_DMA+0xea>
    __HAL_LOCK(hsai);
 800545e:	2502      	movs	r5, #2
 8005460:	e7f9      	b.n	8005456 <HAL_SAI_Transmit_DMA+0xea>
 8005462:	bf00      	nop
 8005464:	0800557f 	.word	0x0800557f
 8005468:	08005545 	.word	0x08005545
 800546c:	080055cd 	.word	0x080055cd

08005470 <HAL_SAI_Receive_DMA>:
{
 8005470:	b538      	push	{r3, r4, r5, lr}
  if ((pData == NULL) || (Size == 0U))
 8005472:	4614      	mov	r4, r2
 8005474:	fab2 f282 	clz	r2, r2
 8005478:	0952      	lsrs	r2, r2, #5
 800547a:	2900      	cmp	r1, #0
 800547c:	bf08      	it	eq
 800547e:	2201      	moveq	r2, #1
 8005480:	2a00      	cmp	r2, #0
 8005482:	d151      	bne.n	8005528 <HAL_SAI_Receive_DMA+0xb8>
  if (hsai->State == HAL_SAI_STATE_READY)
 8005484:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b01      	cmp	r3, #1
 800548c:	d14f      	bne.n	800552e <HAL_SAI_Receive_DMA+0xbe>
    __HAL_LOCK(hsai);
 800548e:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 8005492:	2b01      	cmp	r3, #1
 8005494:	d04d      	beq.n	8005532 <HAL_SAI_Receive_DMA+0xc2>
 8005496:	4623      	mov	r3, r4
 8005498:	4604      	mov	r4, r0
 800549a:	2201      	movs	r2, #1
 800549c:	f880 2090 	strb.w	r2, [r0, #144]	; 0x90
    hsai->pBuffPtr = pData;
 80054a0:	67a1      	str	r1, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 80054a2:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
    hsai->XferCount = Size;
 80054a6:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80054aa:	2300      	movs	r3, #0
 80054ac:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80054b0:	2222      	movs	r2, #34	; 0x22
 80054b2:	f880 2091 	strb.w	r2, [r0, #145]	; 0x91
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80054b6:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80054ba:	491f      	ldr	r1, [pc, #124]	; (8005538 <HAL_SAI_Receive_DMA+0xc8>)
 80054bc:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80054be:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80054c2:	491e      	ldr	r1, [pc, #120]	; (800553c <HAL_SAI_Receive_DMA+0xcc>)
 80054c4:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80054c6:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80054ca:	491d      	ldr	r1, [pc, #116]	; (8005540 <HAL_SAI_Receive_DMA+0xd0>)
 80054cc:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 80054ce:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80054d2:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80054d4:	6801      	ldr	r1, [r0, #0]
 80054d6:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 80054da:	6f82      	ldr	r2, [r0, #120]	; 0x78
 80054dc:	311c      	adds	r1, #28
 80054de:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 80054e2:	f7fc fa6f 	bl	80019c4 <HAL_DMA_Start_IT>
 80054e6:	4605      	mov	r5, r0
 80054e8:	b9c8      	cbnz	r0, 800551e <HAL_SAI_Receive_DMA+0xae>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80054ea:	2100      	movs	r1, #0
 80054ec:	4620      	mov	r0, r4
 80054ee:	f7ff fd0a 	bl	8004f06 <SAI_InterruptFlag>
 80054f2:	6822      	ldr	r2, [r4, #0]
 80054f4:	6913      	ldr	r3, [r2, #16]
 80054f6:	4318      	orrs	r0, r3
 80054f8:	6110      	str	r0, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80054fa:	6822      	ldr	r2, [r4, #0]
 80054fc:	6813      	ldr	r3, [r2, #0]
 80054fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005502:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800550c:	d103      	bne.n	8005516 <HAL_SAI_Receive_DMA+0xa6>
      __HAL_SAI_ENABLE(hsai);
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005514:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8005516:	2300      	movs	r3, #0
 8005518:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 800551c:	e005      	b.n	800552a <HAL_SAI_Receive_DMA+0xba>
      __HAL_UNLOCK(hsai);
 800551e:	2300      	movs	r3, #0
 8005520:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      return  HAL_ERROR;
 8005524:	2501      	movs	r5, #1
 8005526:	e000      	b.n	800552a <HAL_SAI_Receive_DMA+0xba>
    return  HAL_ERROR;
 8005528:	2501      	movs	r5, #1
}
 800552a:	4628      	mov	r0, r5
 800552c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 800552e:	2502      	movs	r5, #2
 8005530:	e7fb      	b.n	800552a <HAL_SAI_Receive_DMA+0xba>
    __HAL_LOCK(hsai);
 8005532:	2502      	movs	r5, #2
 8005534:	e7f9      	b.n	800552a <HAL_SAI_Receive_DMA+0xba>
 8005536:	bf00      	nop
 8005538:	080055c3 	.word	0x080055c3
 800553c:	08005589 	.word	0x08005589
 8005540:	080055cd 	.word	0x080055cd

08005544 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005544:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005546:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005548:	69c3      	ldr	r3, [r0, #28]
 800554a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800554e:	d012      	beq.n	8005576 <SAI_DMATxCplt+0x32>
  {
    hsai->XferCount = 0;
 8005550:	2100      	movs	r1, #0
 8005552:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005556:	6822      	ldr	r2, [r4, #0]
 8005558:	6813      	ldr	r3, [r2, #0]
 800555a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800555e:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005560:	4620      	mov	r0, r4
 8005562:	f7ff fcd0 	bl	8004f06 <SAI_InterruptFlag>
 8005566:	6822      	ldr	r2, [r4, #0]
 8005568:	6913      	ldr	r3, [r2, #16]
 800556a:	ea23 0000 	bic.w	r0, r3, r0
 800556e:	6110      	str	r0, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8005570:	2301      	movs	r3, #1
 8005572:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8005576:	4620      	mov	r0, r4
 8005578:	f002 fabb 	bl	8007af2 <HAL_SAI_TxCpltCallback>
#endif
}
 800557c:	bd10      	pop	{r4, pc}

0800557e <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800557e:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8005580:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005582:	f002 fab7 	bl	8007af4 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8005586:	bd08      	pop	{r3, pc}

08005588 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005588:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800558a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800558c:	69c3      	ldr	r3, [r0, #28]
 800558e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005592:	d012      	beq.n	80055ba <SAI_DMARxCplt+0x32>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005594:	6822      	ldr	r2, [r4, #0]
 8005596:	6813      	ldr	r3, [r2, #0]
 8005598:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800559c:	6013      	str	r3, [r2, #0]
    hsai->XferCount = 0;
 800559e:	2100      	movs	r1, #0
 80055a0:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80055a4:	4620      	mov	r0, r4
 80055a6:	f7ff fcae 	bl	8004f06 <SAI_InterruptFlag>
 80055aa:	6822      	ldr	r2, [r4, #0]
 80055ac:	6913      	ldr	r3, [r2, #16]
 80055ae:	ea23 0000 	bic.w	r0, r3, r0
 80055b2:	6110      	str	r0, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80055b4:	2301      	movs	r3, #1
 80055b6:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80055ba:	4620      	mov	r0, r4
 80055bc:	f002 fa9b 	bl	8007af6 <HAL_SAI_RxCpltCallback>
#endif
}
 80055c0:	bd10      	pop	{r4, pc}

080055c2 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80055c2:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80055c4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80055c6:	f002 fa9b 	bl	8007b00 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 80055ca:	bd08      	pop	{r3, pc}

080055cc <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80055cc:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055ce:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80055d0:	f7fd f82a 	bl	8002628 <HAL_DMA_GetError>
 80055d4:	2802      	cmp	r0, #2
 80055d6:	d016      	beq.n	8005606 <SAI_DMAError+0x3a>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80055d8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80055dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80055e4:	6822      	ldr	r2, [r4, #0]
 80055e6:	6813      	ldr	r3, [r2, #0]
 80055e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80055ec:	6013      	str	r3, [r2, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80055ee:	4620      	mov	r0, r4
 80055f0:	f7ff fca4 	bl	8004f3c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80055f4:	2301      	movs	r3, #1
 80055f6:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8005600:	4620      	mov	r0, r4
 8005602:	f002 fa75 	bl	8007af0 <HAL_SAI_ErrorCallback>
#endif
  }
}
 8005606:	bd10      	pop	{r4, pc}

08005608 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8005608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800560c:	b086      	sub	sp, #24
 800560e:	4604      	mov	r4, r0
 8005610:	460d      	mov	r5, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005612:	f7fa fec1 	bl	8000398 <HAL_GetTick>
 8005616:	4680      	mov	r8, r0
  uint32_t count;
  uint32_t *pData = pSDstatus;

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005618:	2100      	movs	r1, #0
 800561a:	6820      	ldr	r0, [r4, #0]
 800561c:	f001 fca7 	bl	8006f6e <SDMMC_GetResponse>
 8005620:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005624:	d167      	bne.n	80056f6 <SD_SendSDStatus+0xee>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8005626:	2140      	movs	r1, #64	; 0x40
 8005628:	6820      	ldr	r0, [r4, #0]
 800562a:	f001 fdbb 	bl	80071a4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800562e:	4606      	mov	r6, r0
 8005630:	b110      	cbz	r0, 8005638 <SD_SendSDStatus+0x30>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005632:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005634:	63a3      	str	r3, [r4, #56]	; 0x38
    return errorstate;
 8005636:	e060      	b.n	80056fa <SD_SendSDStatus+0xf2>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005638:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800563a:	0409      	lsls	r1, r1, #16
 800563c:	6820      	ldr	r0, [r4, #0]
 800563e:	f001 fe9f 	bl	8007380 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005642:	4606      	mov	r6, r0
 8005644:	b110      	cbz	r0, 800564c <SD_SendSDStatus+0x44>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005646:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005648:	63a3      	str	r3, [r4, #56]	; 0x38
    return errorstate;
 800564a:	e056      	b.n	80056fa <SD_SendSDStatus+0xf2>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800564c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005650:	9300      	str	r3, [sp, #0]
  config.DataLength    = 64U;
 8005652:	2340      	movs	r3, #64	; 0x40
 8005654:	9301      	str	r3, [sp, #4]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8005656:	2360      	movs	r3, #96	; 0x60
 8005658:	9302      	str	r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800565a:	2302      	movs	r3, #2
 800565c:	9303      	str	r3, [sp, #12]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800565e:	2300      	movs	r3, #0
 8005660:	9304      	str	r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005662:	2301      	movs	r3, #1
 8005664:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005666:	4669      	mov	r1, sp
 8005668:	6820      	ldr	r0, [r4, #0]
 800566a:	f001 fd89 	bl	8007180 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800566e:	6820      	ldr	r0, [r4, #0]
 8005670:	f001 ff45 	bl	80074fe <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005674:	4606      	mov	r6, r0
 8005676:	b188      	cbz	r0, 800569c <SD_SendSDStatus+0x94>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005678:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800567a:	63a3      	str	r3, [r4, #56]	; 0x38
    return errorstate;
 800567c:	e03d      	b.n	80056fa <SD_SendSDStatus+0xf2>
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
    {
      for(count = 0U; count < 8U; count++)
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800567e:	6820      	ldr	r0, [r4, #0]
 8005680:	f001 fc4e 	bl	8006f20 <SDMMC_ReadFIFO>
 8005684:	f845 0b04 	str.w	r0, [r5], #4
      for(count = 0U; count < 8U; count++)
 8005688:	3701      	adds	r7, #1
 800568a:	2f07      	cmp	r7, #7
 800568c:	d9f7      	bls.n	800567e <SD_SendSDStatus+0x76>
        pData++;
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800568e:	f7fa fe83 	bl	8000398 <HAL_GetTick>
 8005692:	eba0 0008 	sub.w	r0, r0, r8
 8005696:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800569a:	d032      	beq.n	8005702 <SD_SendSDStatus+0xfa>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800569c:	6823      	ldr	r3, [r4, #0]
 800569e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056a0:	f412 7f95 	tst.w	r2, #298	; 0x12a
 80056a4:	d105      	bne.n	80056b2 <SD_SendSDStatus+0xaa>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80056a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80056ac:	d0ef      	beq.n	800568e <SD_SendSDStatus+0x86>
      for(count = 0U; count < 8U; count++)
 80056ae:	4637      	mov	r7, r6
 80056b0:	e7eb      	b.n	800568a <SD_SendSDStatus+0x82>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80056b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056b4:	f012 0f08 	tst.w	r2, #8
 80056b8:	d126      	bne.n	8005708 <SD_SendSDStatus+0x100>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80056ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056bc:	f012 0f02 	tst.w	r2, #2
 80056c0:	d124      	bne.n	800570c <SD_SendSDStatus+0x104>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80056c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c4:	f013 0f20 	tst.w	r3, #32
 80056c8:	d122      	bne.n	8005710 <SD_SendSDStatus+0x108>
  else
  {
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80056ca:	6820      	ldr	r0, [r4, #0]
 80056cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80056ce:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80056d2:	d00d      	beq.n	80056f0 <SD_SendSDStatus+0xe8>
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80056d4:	f001 fc24 	bl	8006f20 <SDMMC_ReadFIFO>
 80056d8:	f845 0b04 	str.w	r0, [r5], #4
    pData++;

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80056dc:	f7fa fe5c 	bl	8000398 <HAL_GetTick>
 80056e0:	eba0 0008 	sub.w	r0, r0, r8
 80056e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80056e8:	d1ef      	bne.n	80056ca <SD_SendSDStatus+0xc2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80056ea:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80056ee:	e004      	b.n	80056fa <SD_SendSDStatus+0xf2>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80056f0:	4b08      	ldr	r3, [pc, #32]	; (8005714 <SD_SendSDStatus+0x10c>)
 80056f2:	6383      	str	r3, [r0, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80056f4:	e001      	b.n	80056fa <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80056f6:	f44f 6600 	mov.w	r6, #2048	; 0x800
}
 80056fa:	4630      	mov	r0, r6
 80056fc:	b006      	add	sp, #24
 80056fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_SD_ERROR_TIMEOUT;
 8005702:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005706:	e7f8      	b.n	80056fa <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005708:	2608      	movs	r6, #8
 800570a:	e7f6      	b.n	80056fa <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800570c:	2602      	movs	r6, #2
 800570e:	e7f4      	b.n	80056fa <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_RX_OVERRUN;
 8005710:	2620      	movs	r6, #32
 8005712:	e7f2      	b.n	80056fa <SD_SendSDStatus+0xf2>
 8005714:	18000f3a 	.word	0x18000f3a

08005718 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800571c:	b088      	sub	sp, #32
 800571e:	4604      	mov	r4, r0
 8005720:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005722:	f7fa fe39 	bl	8000398 <HAL_GetTick>
 8005726:	4606      	mov	r6, r0
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
 8005728:	2300      	movs	r3, #0
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	9301      	str	r3, [sp, #4]
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800572e:	2108      	movs	r1, #8
 8005730:	6820      	ldr	r0, [r4, #0]
 8005732:	f001 fd37 	bl	80071a4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005736:	4605      	mov	r5, r0
 8005738:	b118      	cbz	r0, 8005742 <SD_FindSCR+0x2a>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800573a:	4628      	mov	r0, r5
 800573c:	b008      	add	sp, #32
 800573e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005742:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005744:	0409      	lsls	r1, r1, #16
 8005746:	6820      	ldr	r0, [r4, #0]
 8005748:	f001 fe1a 	bl	8007380 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800574c:	4605      	mov	r5, r0
 800574e:	2800      	cmp	r0, #0
 8005750:	d1f3      	bne.n	800573a <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005756:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8005758:	2308      	movs	r3, #8
 800575a:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800575c:	2330      	movs	r3, #48	; 0x30
 800575e:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005760:	2302      	movs	r3, #2
 8005762:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005764:	2300      	movs	r3, #0
 8005766:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005768:	2301      	movs	r3, #1
 800576a:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800576c:	a902      	add	r1, sp, #8
 800576e:	6820      	ldr	r0, [r4, #0]
 8005770:	f001 fd06 	bl	8007180 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005774:	6820      	ldr	r0, [r4, #0]
 8005776:	f001 fe4b 	bl	8007410 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800577a:	4605      	mov	r5, r0
 800577c:	2800      	cmp	r0, #0
 800577e:	d1dc      	bne.n	800573a <SD_FindSCR+0x22>
  uint32_t index = 0U;
 8005780:	4680      	mov	r8, r0
 8005782:	e005      	b.n	8005790 <SD_FindSCR+0x78>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005784:	f7fa fe08 	bl	8000398 <HAL_GetTick>
 8005788:	1b80      	subs	r0, r0, r6
 800578a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800578e:	d048      	beq.n	8005822 <SD_FindSCR+0x10a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8005790:	6820      	ldr	r0, [r4, #0]
 8005792:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005794:	f240 532a 	movw	r3, #1322	; 0x52a
 8005798:	421a      	tst	r2, r3
 800579a:	d110      	bne.n	80057be <SD_FindSCR+0xa6>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800579c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800579e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80057a2:	d1ef      	bne.n	8005784 <SD_FindSCR+0x6c>
 80057a4:	f1b8 0f00 	cmp.w	r8, #0
 80057a8:	d1ec      	bne.n	8005784 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80057aa:	f001 fbb9 	bl	8006f20 <SDMMC_ReadFIFO>
 80057ae:	9000      	str	r0, [sp, #0]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80057b0:	6820      	ldr	r0, [r4, #0]
 80057b2:	f001 fbb5 	bl	8006f20 <SDMMC_ReadFIFO>
 80057b6:	9001      	str	r0, [sp, #4]
      index++;
 80057b8:	f108 0801 	add.w	r8, r8, #1
 80057bc:	e7e2      	b.n	8005784 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80057be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80057c0:	f013 0f08 	tst.w	r3, #8
 80057c4:	d124      	bne.n	8005810 <SD_FindSCR+0xf8>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80057c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80057c8:	f013 0f02 	tst.w	r3, #2
 80057cc:	d123      	bne.n	8005816 <SD_FindSCR+0xfe>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80057ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80057d0:	f013 0f20 	tst.w	r3, #32
 80057d4:	d122      	bne.n	800581c <SD_FindSCR+0x104>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80057d6:	4b14      	ldr	r3, [pc, #80]	; (8005828 <SD_FindSCR+0x110>)
 80057d8:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80057da:	9a01      	ldr	r2, [sp, #4]
 80057dc:	0213      	lsls	r3, r2, #8
 80057de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80057e6:	0a11      	lsrs	r1, r2, #8
 80057e8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80057ec:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80057ee:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80057f2:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80057f4:	9a00      	ldr	r2, [sp, #0]
 80057f6:	0213      	lsls	r3, r2, #8
 80057f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057fc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005800:	0a11      	lsrs	r1, r2, #8
 8005802:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005806:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800580c:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 800580e:	e794      	b.n	800573a <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005810:	2508      	movs	r5, #8
 8005812:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005814:	e791      	b.n	800573a <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005816:	2502      	movs	r5, #2
 8005818:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800581a:	e78e      	b.n	800573a <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800581c:	2520      	movs	r5, #32
 800581e:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8005820:	e78b      	b.n	800573a <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 8005822:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8005826:	e788      	b.n	800573a <SD_FindSCR+0x22>
 8005828:	18000f3a 	.word	0x18000f3a

0800582c <SD_WideBus_Enable>:
{
 800582c:	b510      	push	{r4, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 8005832:	2100      	movs	r1, #0
 8005834:	9100      	str	r1, [sp, #0]
 8005836:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005838:	6800      	ldr	r0, [r0, #0]
 800583a:	f001 fb98 	bl	8006f6e <SDMMC_GetResponse>
 800583e:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005842:	d116      	bne.n	8005872 <SD_WideBus_Enable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 8005844:	4669      	mov	r1, sp
 8005846:	4620      	mov	r0, r4
 8005848:	f7ff ff66 	bl	8005718 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800584c:	4603      	mov	r3, r0
 800584e:	b990      	cbnz	r0, 8005876 <SD_WideBus_Enable+0x4a>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005850:	9b01      	ldr	r3, [sp, #4]
 8005852:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005856:	d011      	beq.n	800587c <SD_WideBus_Enable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005858:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800585a:	0409      	lsls	r1, r1, #16
 800585c:	6820      	ldr	r0, [r4, #0]
 800585e:	f001 fd8f 	bl	8007380 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005862:	4603      	mov	r3, r0
 8005864:	b938      	cbnz	r0, 8005876 <SD_WideBus_Enable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005866:	2102      	movs	r1, #2
 8005868:	6820      	ldr	r0, [r4, #0]
 800586a:	f001 fdb8 	bl	80073de <SDMMC_CmdBusWidth>
 800586e:	4603      	mov	r3, r0
 8005870:	e001      	b.n	8005876 <SD_WideBus_Enable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005872:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8005876:	4618      	mov	r0, r3
 8005878:	b002      	add	sp, #8
 800587a:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800587c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005880:	e7f9      	b.n	8005876 <SD_WideBus_Enable+0x4a>

08005882 <SD_WideBus_Disable>:
{
 8005882:	b510      	push	{r4, lr}
 8005884:	b082      	sub	sp, #8
 8005886:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 8005888:	2100      	movs	r1, #0
 800588a:	9100      	str	r1, [sp, #0]
 800588c:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800588e:	6800      	ldr	r0, [r0, #0]
 8005890:	f001 fb6d 	bl	8006f6e <SDMMC_GetResponse>
 8005894:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005898:	d116      	bne.n	80058c8 <SD_WideBus_Disable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 800589a:	4669      	mov	r1, sp
 800589c:	4620      	mov	r0, r4
 800589e:	f7ff ff3b 	bl	8005718 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80058a2:	4603      	mov	r3, r0
 80058a4:	b990      	cbnz	r0, 80058cc <SD_WideBus_Disable+0x4a>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80058a6:	9b01      	ldr	r3, [sp, #4]
 80058a8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80058ac:	d011      	beq.n	80058d2 <SD_WideBus_Disable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80058ae:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80058b0:	0409      	lsls	r1, r1, #16
 80058b2:	6820      	ldr	r0, [r4, #0]
 80058b4:	f001 fd64 	bl	8007380 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80058b8:	4603      	mov	r3, r0
 80058ba:	b938      	cbnz	r0, 80058cc <SD_WideBus_Disable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80058bc:	2100      	movs	r1, #0
 80058be:	6820      	ldr	r0, [r4, #0]
 80058c0:	f001 fd8d 	bl	80073de <SDMMC_CmdBusWidth>
 80058c4:	4603      	mov	r3, r0
 80058c6:	e001      	b.n	80058cc <SD_WideBus_Disable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80058c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	b002      	add	sp, #8
 80058d0:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80058d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80058d6:	e7f9      	b.n	80058cc <SD_WideBus_Disable+0x4a>

080058d8 <SD_SendStatus>:
{
 80058d8:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 80058da:	b181      	cbz	r1, 80058fe <SD_SendStatus+0x26>
 80058dc:	460d      	mov	r5, r1
 80058de:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80058e0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80058e2:	0409      	lsls	r1, r1, #16
 80058e4:	6800      	ldr	r0, [r0, #0]
 80058e6:	f001 fdf1 	bl	80074cc <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80058ea:	4606      	mov	r6, r0
 80058ec:	b108      	cbz	r0, 80058f2 <SD_SendStatus+0x1a>
}
 80058ee:	4630      	mov	r0, r6
 80058f0:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80058f2:	2100      	movs	r1, #0
 80058f4:	6820      	ldr	r0, [r4, #0]
 80058f6:	f001 fb3a 	bl	8006f6e <SDMMC_GetResponse>
 80058fa:	6028      	str	r0, [r5, #0]
  return HAL_SD_ERROR_NONE;
 80058fc:	e7f7      	b.n	80058ee <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 80058fe:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 8005902:	e7f4      	b.n	80058ee <SD_SendStatus+0x16>

08005904 <HAL_SD_ReadBlocks>:
{
 8005904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005908:	b086      	sub	sp, #24
 800590a:	4604      	mov	r4, r0
 800590c:	460d      	mov	r5, r1
 800590e:	4616      	mov	r6, r2
 8005910:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8005912:	f7fa fd41 	bl	8000398 <HAL_GetTick>
  if(NULL == pData)
 8005916:	b16d      	cbz	r5, 8005934 <HAL_SD_ReadBlocks+0x30>
 8005918:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 800591a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b01      	cmp	r3, #1
 8005922:	d00d      	beq.n	8005940 <HAL_SD_ReadBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005924:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005926:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800592a:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800592c:	2001      	movs	r0, #1
}
 800592e:	b006      	add	sp, #24
 8005930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005934:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005936:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800593a:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800593c:	2001      	movs	r0, #1
 800593e:	e7f6      	b.n	800592e <HAL_SD_ReadBlocks+0x2a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005940:	2300      	movs	r3, #0
 8005942:	63a3      	str	r3, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005944:	19f3      	adds	r3, r6, r7
 8005946:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005948:	4293      	cmp	r3, r2
 800594a:	d82d      	bhi.n	80059a8 <HAL_SD_ReadBlocks+0xa4>
    hsd->State = HAL_SD_STATE_BUSY;
 800594c:	2303      	movs	r3, #3
 800594e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	2200      	movs	r2, #0
 8005956:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005958:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800595a:	2b01      	cmp	r3, #1
 800595c:	d000      	beq.n	8005960 <HAL_SD_ReadBlocks+0x5c>
      add *= 512U;
 800595e:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005964:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005966:	027b      	lsls	r3, r7, #9
 8005968:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800596a:	2390      	movs	r3, #144	; 0x90
 800596c:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800596e:	2302      	movs	r3, #2
 8005970:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005972:	2300      	movs	r3, #0
 8005974:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005976:	9305      	str	r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005978:	4669      	mov	r1, sp
 800597a:	6820      	ldr	r0, [r4, #0]
 800597c:	f001 fc00 	bl	8007180 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005980:	6822      	ldr	r2, [r4, #0]
 8005982:	68d3      	ldr	r3, [r2, #12]
 8005984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005988:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 800598a:	2f01      	cmp	r7, #1
 800598c:	d912      	bls.n	80059b4 <HAL_SD_ReadBlocks+0xb0>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800598e:	2302      	movs	r3, #2
 8005990:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005992:	4631      	mov	r1, r6
 8005994:	6820      	ldr	r0, [r4, #0]
 8005996:	f001 fc37 	bl	8007208 <SDMMC_CmdReadMultiBlock>
 800599a:	4682      	mov	sl, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 800599c:	f1ba 0f00 	cmp.w	sl, #0
 80059a0:	d110      	bne.n	80059c4 <HAL_SD_ReadBlocks+0xc0>
    dataremaining = config.DataLength;
 80059a2:	f8dd 9004 	ldr.w	r9, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80059a6:	e024      	b.n	80059f2 <HAL_SD_ReadBlocks+0xee>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80059a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80059aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80059ae:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 80059b0:	2001      	movs	r0, #1
 80059b2:	e7bc      	b.n	800592e <HAL_SD_ReadBlocks+0x2a>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80059b4:	2301      	movs	r3, #1
 80059b6:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80059b8:	4631      	mov	r1, r6
 80059ba:	6820      	ldr	r0, [r4, #0]
 80059bc:	f001 fc0b 	bl	80071d6 <SDMMC_CmdReadSingleBlock>
 80059c0:	4682      	mov	sl, r0
 80059c2:	e7eb      	b.n	800599c <HAL_SD_ReadBlocks+0x98>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	4a4c      	ldr	r2, [pc, #304]	; (8005af8 <HAL_SD_ReadBlocks+0x1f4>)
 80059c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80059ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80059cc:	ea43 030a 	orr.w	r3, r3, sl
 80059d0:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80059d2:	2001      	movs	r0, #1
 80059d4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80059d8:	2300      	movs	r3, #0
 80059da:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80059dc:	e7a7      	b.n	800592e <HAL_SD_ReadBlocks+0x2a>
        dataremaining -= 32U;
 80059de:	f1a9 0920 	sub.w	r9, r9, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80059e2:	f7fa fcd9 	bl	8000398 <HAL_GetTick>
 80059e6:	eba0 0008 	sub.w	r0, r0, r8
 80059ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059ec:	4298      	cmp	r0, r3
 80059ee:	d21e      	bcs.n	8005a2e <HAL_SD_ReadBlocks+0x12a>
 80059f0:	b1eb      	cbz	r3, 8005a2e <HAL_SD_ReadBlocks+0x12a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059f6:	f412 7f95 	tst.w	r2, #298	; 0x12a
 80059fa:	d126      	bne.n	8005a4a <HAL_SD_ReadBlocks+0x146>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80059fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fe:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005a02:	d0ee      	beq.n	80059e2 <HAL_SD_ReadBlocks+0xde>
 8005a04:	f1b9 0f1f 	cmp.w	r9, #31
 8005a08:	d9eb      	bls.n	80059e2 <HAL_SD_ReadBlocks+0xde>
        for(count = 0U; count < 8U; count++)
 8005a0a:	4656      	mov	r6, sl
 8005a0c:	2e07      	cmp	r6, #7
 8005a0e:	d8e6      	bhi.n	80059de <HAL_SD_ReadBlocks+0xda>
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005a10:	6820      	ldr	r0, [r4, #0]
 8005a12:	f001 fa85 	bl	8006f20 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005a16:	7028      	strb	r0, [r5, #0]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005a18:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8005a1c:	706b      	strb	r3, [r5, #1]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005a1e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8005a22:	70ab      	strb	r3, [r5, #2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005a24:	0e00      	lsrs	r0, r0, #24
 8005a26:	70e8      	strb	r0, [r5, #3]
          tempbuff++;
 8005a28:	3504      	adds	r5, #4
        for(count = 0U; count < 8U; count++)
 8005a2a:	3601      	adds	r6, #1
 8005a2c:	e7ee      	b.n	8005a0c <HAL_SD_ReadBlocks+0x108>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a2e:	6823      	ldr	r3, [r4, #0]
 8005a30:	4a31      	ldr	r2, [pc, #196]	; (8005af8 <HAL_SD_ReadBlocks+0x1f4>)
 8005a32:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005a34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a3a:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005a42:	2300      	movs	r3, #0
 8005a44:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8005a46:	2003      	movs	r0, #3
 8005a48:	e771      	b.n	800592e <HAL_SD_ReadBlocks+0x2a>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005a4a:	68da      	ldr	r2, [r3, #12]
 8005a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a50:	60da      	str	r2, [r3, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005a52:	6820      	ldr	r0, [r4, #0]
 8005a54:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005a56:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005a5a:	d004      	beq.n	8005a66 <HAL_SD_ReadBlocks+0x162>
 8005a5c:	2f01      	cmp	r7, #1
 8005a5e:	d902      	bls.n	8005a66 <HAL_SD_ReadBlocks+0x162>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005a60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	d118      	bne.n	8005a98 <HAL_SD_ReadBlocks+0x194>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a6a:	f012 0f08 	tst.w	r2, #8
 8005a6e:	d124      	bne.n	8005aba <HAL_SD_ReadBlocks+0x1b6>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a72:	f012 0f02 	tst.w	r2, #2
 8005a76:	d12c      	bne.n	8005ad2 <HAL_SD_ReadBlocks+0x1ce>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a7a:	f012 0f20 	tst.w	r2, #32
 8005a7e:	d034      	beq.n	8005aea <HAL_SD_ReadBlocks+0x1e6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a80:	4a1d      	ldr	r2, [pc, #116]	; (8005af8 <HAL_SD_ReadBlocks+0x1f4>)
 8005a82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005a84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a86:	f043 0320 	orr.w	r3, r3, #32
 8005a8a:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005a8c:	2001      	movs	r0, #1
 8005a8e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a92:	2300      	movs	r3, #0
 8005a94:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005a96:	e74a      	b.n	800592e <HAL_SD_ReadBlocks+0x2a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005a98:	f001 fc02 	bl	80072a0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	d0e1      	beq.n	8005a66 <HAL_SD_ReadBlocks+0x162>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005aa2:	6822      	ldr	r2, [r4, #0]
 8005aa4:	4914      	ldr	r1, [pc, #80]	; (8005af8 <HAL_SD_ReadBlocks+0x1f4>)
 8005aa6:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005aa8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005aae:	2001      	movs	r0, #1
 8005ab0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 8005ab8:	e739      	b.n	800592e <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005aba:	4a0f      	ldr	r2, [pc, #60]	; (8005af8 <HAL_SD_ReadBlocks+0x1f4>)
 8005abc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005abe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ac0:	f043 0308 	orr.w	r3, r3, #8
 8005ac4:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ac6:	2001      	movs	r0, #1
 8005ac8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005acc:	2300      	movs	r3, #0
 8005ace:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005ad0:	e72d      	b.n	800592e <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ad2:	4a09      	ldr	r2, [pc, #36]	; (8005af8 <HAL_SD_ReadBlocks+0x1f4>)
 8005ad4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005ad6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ad8:	f043 0302 	orr.w	r3, r3, #2
 8005adc:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ade:	2001      	movs	r0, #1
 8005ae0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005ae8:	e721      	b.n	800592e <HAL_SD_ReadBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005aea:	4a04      	ldr	r2, [pc, #16]	; (8005afc <HAL_SD_ReadBlocks+0x1f8>)
 8005aec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005aee:	2301      	movs	r3, #1
 8005af0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8005af4:	2000      	movs	r0, #0
 8005af6:	e71a      	b.n	800592e <HAL_SD_ReadBlocks+0x2a>
 8005af8:	1fe00fff 	.word	0x1fe00fff
 8005afc:	18000f3a 	.word	0x18000f3a

08005b00 <HAL_SD_WriteBlocks>:
{
 8005b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b04:	b088      	sub	sp, #32
 8005b06:	4604      	mov	r4, r0
 8005b08:	460d      	mov	r5, r1
 8005b0a:	4616      	mov	r6, r2
 8005b0c:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8005b0e:	f7fa fc43 	bl	8000398 <HAL_GetTick>
  if(NULL == pData)
 8005b12:	b16d      	cbz	r5, 8005b30 <HAL_SD_WriteBlocks+0x30>
 8005b14:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8005b16:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d00d      	beq.n	8005b3c <HAL_SD_WriteBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005b20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b26:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005b28:	2001      	movs	r0, #1
}
 8005b2a:	b008      	add	sp, #32
 8005b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005b30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b36:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005b38:	2001      	movs	r0, #1
 8005b3a:	e7f6      	b.n	8005b2a <HAL_SD_WriteBlocks+0x2a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	63a3      	str	r3, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005b40:	19f3      	adds	r3, r6, r7
 8005b42:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d82c      	bhi.n	8005ba2 <HAL_SD_WriteBlocks+0xa2>
    hsd->State = HAL_SD_STATE_BUSY;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	2200      	movs	r2, #0
 8005b52:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005b54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d000      	beq.n	8005b5c <HAL_SD_WriteBlocks+0x5c>
      add *= 512U;
 8005b5a:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005b5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b60:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005b62:	027b      	lsls	r3, r7, #9
 8005b64:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005b66:	2390      	movs	r3, #144	; 0x90
 8005b68:	9304      	str	r3, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	9305      	str	r3, [sp, #20]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005b6e:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005b70:	9307      	str	r3, [sp, #28]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005b72:	a902      	add	r1, sp, #8
 8005b74:	6820      	ldr	r0, [r4, #0]
 8005b76:	f001 fb03 	bl	8007180 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005b7a:	6822      	ldr	r2, [r4, #0]
 8005b7c:	68d3      	ldr	r3, [r2, #12]
 8005b7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b82:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 8005b84:	2f01      	cmp	r7, #1
 8005b86:	d912      	bls.n	8005bae <HAL_SD_WriteBlocks+0xae>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005b88:	2320      	movs	r3, #32
 8005b8a:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005b8c:	4631      	mov	r1, r6
 8005b8e:	6820      	ldr	r0, [r4, #0]
 8005b90:	f001 fb6c 	bl	800726c <SDMMC_CmdWriteMultiBlock>
 8005b94:	4682      	mov	sl, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b96:	f1ba 0f00 	cmp.w	sl, #0
 8005b9a:	d110      	bne.n	8005bbe <HAL_SD_WriteBlocks+0xbe>
    dataremaining = config.DataLength;
 8005b9c:	f8dd 900c 	ldr.w	r9, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005ba0:	e024      	b.n	8005bec <HAL_SD_WriteBlocks+0xec>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005ba2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ba4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005ba8:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8005baa:	2001      	movs	r0, #1
 8005bac:	e7bd      	b.n	8005b2a <HAL_SD_WriteBlocks+0x2a>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005bae:	2310      	movs	r3, #16
 8005bb0:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005bb2:	4631      	mov	r1, r6
 8005bb4:	6820      	ldr	r0, [r4, #0]
 8005bb6:	f001 fb40 	bl	800723a <SDMMC_CmdWriteSingleBlock>
 8005bba:	4682      	mov	sl, r0
 8005bbc:	e7eb      	b.n	8005b96 <HAL_SD_WriteBlocks+0x96>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	4a4e      	ldr	r2, [pc, #312]	; (8005cfc <HAL_SD_WriteBlocks+0x1fc>)
 8005bc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005bc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005bc6:	ea43 030a 	orr.w	r3, r3, sl
 8005bca:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005bcc:	2001      	movs	r0, #1
 8005bce:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005bd6:	e7a8      	b.n	8005b2a <HAL_SD_WriteBlocks+0x2a>
        dataremaining -= 32U;
 8005bd8:	f1a9 0920 	sub.w	r9, r9, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005bdc:	f7fa fbdc 	bl	8000398 <HAL_GetTick>
 8005be0:	eba0 0008 	sub.w	r0, r0, r8
 8005be4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005be6:	4298      	cmp	r0, r3
 8005be8:	d222      	bcs.n	8005c30 <HAL_SD_WriteBlocks+0x130>
 8005bea:	b30b      	cbz	r3, 8005c30 <HAL_SD_WriteBlocks+0x130>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005bec:	6823      	ldr	r3, [r4, #0]
 8005bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bf0:	f412 7f8d 	tst.w	r2, #282	; 0x11a
 8005bf4:	d12a      	bne.n	8005c4c <HAL_SD_WriteBlocks+0x14c>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8005bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005bfc:	d0ee      	beq.n	8005bdc <HAL_SD_WriteBlocks+0xdc>
 8005bfe:	f1b9 0f1f 	cmp.w	r9, #31
 8005c02:	d9eb      	bls.n	8005bdc <HAL_SD_WriteBlocks+0xdc>
        for(count = 0U; count < 8U; count++)
 8005c04:	4656      	mov	r6, sl
 8005c06:	2e07      	cmp	r6, #7
 8005c08:	d8e6      	bhi.n	8005bd8 <HAL_SD_WriteBlocks+0xd8>
          data = (uint32_t)(*tempbuff);
 8005c0a:	782b      	ldrb	r3, [r5, #0]
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005c0c:	786a      	ldrb	r2, [r5, #1]
 8005c0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005c12:	78aa      	ldrb	r2, [r5, #2]
 8005c14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005c18:	78ea      	ldrb	r2, [r5, #3]
 8005c1a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005c1e:	a908      	add	r1, sp, #32
 8005c20:	f841 3d1c 	str.w	r3, [r1, #-28]!
          tempbuff++;
 8005c24:	3504      	adds	r5, #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005c26:	6820      	ldr	r0, [r4, #0]
 8005c28:	f001 f97d 	bl	8006f26 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005c2c:	3601      	adds	r6, #1
 8005c2e:	e7ea      	b.n	8005c06 <HAL_SD_WriteBlocks+0x106>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c30:	6823      	ldr	r3, [r4, #0]
 8005c32:	4a32      	ldr	r2, [pc, #200]	; (8005cfc <HAL_SD_WriteBlocks+0x1fc>)
 8005c34:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005c36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c38:	ea43 030a 	orr.w	r3, r3, sl
 8005c3c:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005c44:	2300      	movs	r3, #0
 8005c46:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8005c48:	2003      	movs	r0, #3
 8005c4a:	e76e      	b.n	8005b2a <HAL_SD_WriteBlocks+0x2a>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c52:	60da      	str	r2, [r3, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005c54:	6820      	ldr	r0, [r4, #0]
 8005c56:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005c58:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005c5c:	d004      	beq.n	8005c68 <HAL_SD_WriteBlocks+0x168>
 8005c5e:	2f01      	cmp	r7, #1
 8005c60:	d902      	bls.n	8005c68 <HAL_SD_WriteBlocks+0x168>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005c62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005c64:	2b03      	cmp	r3, #3
 8005c66:	d118      	bne.n	8005c9a <HAL_SD_WriteBlocks+0x19a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c6c:	f012 0f08 	tst.w	r2, #8
 8005c70:	d124      	bne.n	8005cbc <HAL_SD_WriteBlocks+0x1bc>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c74:	f012 0f02 	tst.w	r2, #2
 8005c78:	d12c      	bne.n	8005cd4 <HAL_SD_WriteBlocks+0x1d4>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8005c7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c7c:	f012 0f10 	tst.w	r2, #16
 8005c80:	d034      	beq.n	8005cec <HAL_SD_WriteBlocks+0x1ec>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c82:	4a1e      	ldr	r2, [pc, #120]	; (8005cfc <HAL_SD_WriteBlocks+0x1fc>)
 8005c84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005c86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c88:	f043 0310 	orr.w	r3, r3, #16
 8005c8c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c8e:	2001      	movs	r0, #1
 8005c90:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c94:	2300      	movs	r3, #0
 8005c96:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005c98:	e747      	b.n	8005b2a <HAL_SD_WriteBlocks+0x2a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005c9a:	f001 fb01 	bl	80072a0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d0e1      	beq.n	8005c68 <HAL_SD_WriteBlocks+0x168>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ca4:	6822      	ldr	r2, [r4, #0]
 8005ca6:	4915      	ldr	r1, [pc, #84]	; (8005cfc <HAL_SD_WriteBlocks+0x1fc>)
 8005ca8:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005caa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005cac:	4313      	orrs	r3, r2
 8005cae:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005cb0:	2001      	movs	r0, #1
 8005cb2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 8005cba:	e736      	b.n	8005b2a <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005cbc:	4a0f      	ldr	r2, [pc, #60]	; (8005cfc <HAL_SD_WriteBlocks+0x1fc>)
 8005cbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005cc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cc2:	f043 0308 	orr.w	r3, r3, #8
 8005cc6:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005cc8:	2001      	movs	r0, #1
 8005cca:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005cd2:	e72a      	b.n	8005b2a <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005cd4:	4a09      	ldr	r2, [pc, #36]	; (8005cfc <HAL_SD_WriteBlocks+0x1fc>)
 8005cd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005cd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cda:	f043 0302 	orr.w	r3, r3, #2
 8005cde:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ce0:	2001      	movs	r0, #1
 8005ce2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005cea:	e71e      	b.n	8005b2a <HAL_SD_WriteBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005cec:	4a04      	ldr	r2, [pc, #16]	; (8005d00 <HAL_SD_WriteBlocks+0x200>)
 8005cee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	e717      	b.n	8005b2a <HAL_SD_WriteBlocks+0x2a>
 8005cfa:	bf00      	nop
 8005cfc:	1fe00fff 	.word	0x1fe00fff
 8005d00:	18000f3a 	.word	0x18000f3a

08005d04 <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 8005d04:	4770      	bx	lr
	...

08005d08 <SD_PowerON>:
{
 8005d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	9301      	str	r3, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d12:	f7fa fb41 	bl	8000398 <HAL_GetTick>
 8005d16:	4607      	mov	r7, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005d18:	6820      	ldr	r0, [r4, #0]
 8005d1a:	f001 fb06 	bl	800732a <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d1e:	4606      	mov	r6, r0
 8005d20:	b110      	cbz	r0, 8005d28 <SD_PowerON+0x20>
}
 8005d22:	4630      	mov	r0, r6
 8005d24:	b003      	add	sp, #12
 8005d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005d28:	6820      	ldr	r0, [r4, #0]
 8005d2a:	f001 fb11 	bl	8007350 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d2e:	b938      	cbnz	r0, 8005d40 <SD_PowerON+0x38>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005d30:	2301      	movs	r3, #1
 8005d32:	6423      	str	r3, [r4, #64]	; 0x40
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005d34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d00b      	beq.n	8005d52 <SD_PowerON+0x4a>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005d3a:	4635      	mov	r5, r6
 8005d3c:	4630      	mov	r0, r6
 8005d3e:	e014      	b.n	8005d6a <SD_PowerON+0x62>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005d40:	2300      	movs	r3, #0
 8005d42:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005d44:	6820      	ldr	r0, [r4, #0]
 8005d46:	f001 faf0 	bl	800732a <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	d0f2      	beq.n	8005d34 <SD_PowerON+0x2c>
      return errorstate;
 8005d4e:	4606      	mov	r6, r0
 8005d50:	e7e7      	b.n	8005d22 <SD_PowerON+0x1a>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005d52:	2100      	movs	r1, #0
 8005d54:	6820      	ldr	r0, [r4, #0]
 8005d56:	f001 fb13 	bl	8007380 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d0ed      	beq.n	8005d3a <SD_PowerON+0x32>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d5e:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8005d62:	e7de      	b.n	8005d22 <SD_PowerON+0x1a>
    count++;
 8005d64:	9b01      	ldr	r3, [sp, #4]
 8005d66:	3301      	adds	r3, #1
 8005d68:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005d6a:	9a01      	ldr	r2, [sp, #4]
 8005d6c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d815      	bhi.n	8005da0 <SD_PowerON+0x98>
 8005d74:	b9a5      	cbnz	r5, 8005da0 <SD_PowerON+0x98>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005d76:	2100      	movs	r1, #0
 8005d78:	6820      	ldr	r0, [r4, #0]
 8005d7a:	f001 fb01 	bl	8007380 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	d167      	bne.n	8005e52 <SD_PowerON+0x14a>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005d82:	493b      	ldr	r1, [pc, #236]	; (8005e70 <SD_PowerON+0x168>)
 8005d84:	6820      	ldr	r0, [r4, #0]
 8005d86:	f001 fb14 	bl	80073b2 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d8a:	4605      	mov	r5, r0
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	d162      	bne.n	8005e56 <SD_PowerON+0x14e>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005d90:	2100      	movs	r1, #0
 8005d92:	6820      	ldr	r0, [r4, #0]
 8005d94:	f001 f8eb 	bl	8006f6e <SDMMC_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005d98:	0fc3      	lsrs	r3, r0, #31
 8005d9a:	d0e3      	beq.n	8005d64 <SD_PowerON+0x5c>
 8005d9c:	461d      	mov	r5, r3
 8005d9e:	e7e1      	b.n	8005d64 <SD_PowerON+0x5c>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005da0:	9a01      	ldr	r2, [sp, #4]
 8005da2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d858      	bhi.n	8005e5c <SD_PowerON+0x154>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005daa:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005dae:	d0b8      	beq.n	8005d22 <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005db0:	2301      	movs	r3, #1
 8005db2:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8005db4:	69a3      	ldr	r3, [r4, #24]
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d1b3      	bne.n	8005d22 <SD_PowerON+0x1a>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8005dba:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8005dbe:	d0b0      	beq.n	8005d22 <SD_PowerON+0x1a>
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dc4:	65e3      	str	r3, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8005dc6:	6822      	ldr	r2, [r4, #0]
 8005dc8:	6813      	ldr	r3, [r2, #0]
 8005dca:	f043 0308 	orr.w	r3, r3, #8
 8005dce:	6013      	str	r3, [r2, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8005dd0:	6820      	ldr	r0, [r4, #0]
 8005dd2:	f001 fbad 	bl	8007530 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 8005dd6:	4606      	mov	r6, r0
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	d1a2      	bne.n	8005d22 <SD_PowerON+0x1a>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005de0:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
 8005de4:	d108      	bne.n	8005df8 <SD_PowerON+0xf0>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005de6:	f7fa fad7 	bl	8000398 <HAL_GetTick>
 8005dea:	1bc0      	subs	r0, r0, r7
 8005dec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005df0:	d1f4      	bne.n	8005ddc <SD_PowerON+0xd4>
            return HAL_SD_ERROR_TIMEOUT;
 8005df2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005df6:	e794      	b.n	8005d22 <SD_PowerON+0x1a>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8005df8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005dfc:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e02:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005e06:	d02c      	beq.n	8005e62 <SD_PowerON+0x15a>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8005e08:	2001      	movs	r0, #1
 8005e0a:	f7ff ff7b 	bl	8005d04 <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8005e0e:	6822      	ldr	r2, [r4, #0]
 8005e10:	6813      	ldr	r3, [r2, #0]
 8005e12:	f043 0304 	orr.w	r3, r3, #4
 8005e16:	6013      	str	r3, [r2, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e1c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8005e20:	d108      	bne.n	8005e34 <SD_PowerON+0x12c>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005e22:	f7fa fab9 	bl	8000398 <HAL_GetTick>
 8005e26:	1bc0      	subs	r0, r0, r7
 8005e28:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005e2c:	d1f4      	bne.n	8005e18 <SD_PowerON+0x110>
              return HAL_SD_ERROR_TIMEOUT;
 8005e2e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005e32:	e776      	b.n	8005d22 <SD_PowerON+0x1a>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8005e34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e38:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8005e3a:	6823      	ldr	r3, [r4, #0]
 8005e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e3e:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8005e42:	d111      	bne.n	8005e68 <SD_PowerON+0x160>
          hsd->Instance->POWER = 0x13U;
 8005e44:	2213      	movs	r2, #19
 8005e46:	601a      	str	r2, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e4e:	639a      	str	r2, [r3, #56]	; 0x38
 8005e50:	e767      	b.n	8005d22 <SD_PowerON+0x1a>
      return errorstate;
 8005e52:	4606      	mov	r6, r0
 8005e54:	e765      	b.n	8005d22 <SD_PowerON+0x1a>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e56:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8005e5a:	e762      	b.n	8005d22 <SD_PowerON+0x1a>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005e5c:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 8005e60:	e75f      	b.n	8005d22 <SD_PowerON+0x1a>
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8005e62:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8005e66:	e75c      	b.n	8005d22 <SD_PowerON+0x1a>
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005e68:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 8005e6c:	e759      	b.n	8005d22 <SD_PowerON+0x1a>
 8005e6e:	bf00      	nop
 8005e70:	c1100000 	.word	0xc1100000

08005e74 <HAL_SD_GetCardCSD>:
{
 8005e74:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005e76:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005e78:	0f9b      	lsrs	r3, r3, #30
 8005e7a:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005e7c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005e7e:	f3c3 6383 	ubfx	r3, r3, #26, #4
 8005e82:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005e84:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
 8005e88:	f003 0303 	and.w	r3, r3, #3
 8005e8c:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005e8e:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 8005e92:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005e94:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8005e98:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005e9a:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8005e9e:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005ea0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005ea2:	0d1b      	lsrs	r3, r3, #20
 8005ea4:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005ea6:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
 8005eaa:	f003 030f 	and.w	r3, r3, #15
 8005eae:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005eb0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005eb2:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8005eb6:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005eb8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005eba:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8005ebe:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005ec0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005ec2:	f3c3 3340 	ubfx	r3, r3, #13, #1
 8005ec6:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005ec8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005eca:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8005ece:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8005ed4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f040 8088 	bne.w	8005fec <HAL_SD_GetCardCSD+0x178>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005edc:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8005ede:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005ee2:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 8005ee6:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8005ee8:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8005eec:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005eee:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8005ef0:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 8005ef4:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005ef6:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8005efa:	f003 0307 	and.w	r3, r3, #7
 8005efe:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005f00:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8005f02:	f3c3 5342 	ubfx	r3, r3, #21, #3
 8005f06:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005f08:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8005f0a:	f3c3 4382 	ubfx	r3, r3, #18, #3
 8005f0e:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005f10:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8005f12:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 8005f16:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005f18:	690b      	ldr	r3, [r1, #16]
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005f1e:	7e0a      	ldrb	r2, [r1, #24]
 8005f20:	f002 0207 	and.w	r2, r2, #7
 8005f24:	3202      	adds	r2, #2
 8005f26:	fa03 f202 	lsl.w	r2, r3, r2
 8005f2a:	64c2      	str	r2, [r0, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005f2c:	7a0b      	ldrb	r3, [r1, #8]
 8005f2e:	f003 040f 	and.w	r4, r3, #15
 8005f32:	2301      	movs	r3, #1
 8005f34:	40a3      	lsls	r3, r4
 8005f36:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005f38:	0a5b      	lsrs	r3, r3, #9
 8005f3a:	fb03 f302 	mul.w	r3, r3, r2
 8005f3e:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8005f40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f44:	6583      	str	r3, [r0, #88]	; 0x58
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005f46:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8005f48:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8005f4c:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005f4e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8005f50:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8005f54:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005f56:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8005f58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f5c:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005f5e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005f60:	0fdb      	lsrs	r3, r3, #31
 8005f62:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005f64:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005f66:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8005f6a:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005f6c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005f6e:	f3c3 6382 	ubfx	r3, r3, #26, #3
 8005f72:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005f74:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005f76:	f3c3 5383 	ubfx	r3, r3, #22, #4
 8005f7a:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005f7c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005f7e:	f3c3 5340 	ubfx	r3, r3, #21, #1
 8005f82:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 8005f86:	2300      	movs	r3, #0
 8005f88:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005f8c:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8005f90:	f002 0201 	and.w	r2, r2, #1
 8005f94:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005f98:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8005f9a:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8005f9e:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005fa2:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8005fa4:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8005fa8:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005fac:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8005fae:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8005fb2:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005fb6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8005fb8:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8005fbc:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005fc0:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8005fc2:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8005fc6:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005fca:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8005fcc:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8005fd0:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005fd4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8005fd6:	f3c2 0246 	ubfx	r2, r2, #1, #7
 8005fda:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 8005fe4:	4618      	mov	r0, r3
}
 8005fe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fea:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d00b      	beq.n	8006008 <HAL_SD_GetCardCSD+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ff0:	6803      	ldr	r3, [r0, #0]
 8005ff2:	4a0e      	ldr	r2, [pc, #56]	; (800602c <HAL_SD_GetCardCSD+0x1b8>)
 8005ff4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ff6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ffc:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005ffe:	2301      	movs	r3, #1
 8006000:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8006004:	4618      	mov	r0, r3
 8006006:	e7ee      	b.n	8005fe6 <HAL_SD_GetCardCSD+0x172>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006008:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800600a:	041b      	lsls	r3, r3, #16
 800600c:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006010:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 8006014:	4313      	orrs	r3, r2
 8006016:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006018:	690b      	ldr	r3, [r1, #16]
 800601a:	3301      	adds	r3, #1
 800601c:	029b      	lsls	r3, r3, #10
 800601e:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006020:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8006022:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006026:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006028:	6583      	str	r3, [r0, #88]	; 0x58
 800602a:	e78c      	b.n	8005f46 <HAL_SD_GetCardCSD+0xd2>
 800602c:	1fe00fff 	.word	0x1fe00fff

08006030 <SD_InitCard>:
{
 8006030:	b510      	push	{r4, lr}
 8006032:	b08c      	sub	sp, #48	; 0x30
 8006034:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 8006036:	2301      	movs	r3, #1
 8006038:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800603c:	6800      	ldr	r0, [r0, #0]
 800603e:	f000 ff7d 	bl	8006f3c <SDMMC_GetPowerState>
 8006042:	2800      	cmp	r0, #0
 8006044:	d05c      	beq.n	8006100 <SD_InitCard+0xd0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006046:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006048:	2b03      	cmp	r3, #3
 800604a:	d136      	bne.n	80060ba <SD_InitCard+0x8a>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800604c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800604e:	2b03      	cmp	r3, #3
 8006050:	d14d      	bne.n	80060ee <SD_InitCard+0xbe>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006052:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006054:	2b03      	cmp	r3, #3
 8006056:	d01d      	beq.n	8006094 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 8006058:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800605c:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800605e:	0409      	lsls	r1, r1, #16
 8006060:	6820      	ldr	r0, [r4, #0]
 8006062:	f001 fa04 	bl	800746e <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006066:	4603      	mov	r3, r0
 8006068:	2800      	cmp	r0, #0
 800606a:	d14b      	bne.n	8006104 <SD_InitCard+0xd4>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800606c:	2100      	movs	r1, #0
 800606e:	6820      	ldr	r0, [r4, #0]
 8006070:	f000 ff7d 	bl	8006f6e <SDMMC_GetResponse>
 8006074:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006076:	2104      	movs	r1, #4
 8006078:	6820      	ldr	r0, [r4, #0]
 800607a:	f000 ff78 	bl	8006f6e <SDMMC_GetResponse>
 800607e:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006080:	2108      	movs	r1, #8
 8006082:	6820      	ldr	r0, [r4, #0]
 8006084:	f000 ff73 	bl	8006f6e <SDMMC_GetResponse>
 8006088:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800608a:	210c      	movs	r1, #12
 800608c:	6820      	ldr	r0, [r4, #0]
 800608e:	f000 ff6e 	bl	8006f6e <SDMMC_GetResponse>
 8006092:	66e0      	str	r0, [r4, #108]	; 0x6c
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006094:	2104      	movs	r1, #4
 8006096:	6820      	ldr	r0, [r4, #0]
 8006098:	f000 ff69 	bl	8006f6e <SDMMC_GetResponse>
 800609c:	0d00      	lsrs	r0, r0, #20
 800609e:	6460      	str	r0, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80060a0:	a901      	add	r1, sp, #4
 80060a2:	4620      	mov	r0, r4
 80060a4:	f7ff fee6 	bl	8005e74 <HAL_SD_GetCardCSD>
 80060a8:	bb78      	cbnz	r0, 800610a <SD_InitCard+0xda>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80060aa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80060ac:	0412      	lsls	r2, r2, #16
 80060ae:	2300      	movs	r3, #0
 80060b0:	6820      	ldr	r0, [r4, #0]
 80060b2:	f001 f921 	bl	80072f8 <SDMMC_CmdSelDesel>
 80060b6:	4603      	mov	r3, r0
 80060b8:	e024      	b.n	8006104 <SD_InitCard+0xd4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80060ba:	6820      	ldr	r0, [r4, #0]
 80060bc:	f001 f9c1 	bl	8007442 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80060c0:	4603      	mov	r3, r0
 80060c2:	b9f8      	cbnz	r0, 8006104 <SD_InitCard+0xd4>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80060c4:	2100      	movs	r1, #0
 80060c6:	6820      	ldr	r0, [r4, #0]
 80060c8:	f000 ff51 	bl	8006f6e <SDMMC_GetResponse>
 80060cc:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80060ce:	2104      	movs	r1, #4
 80060d0:	6820      	ldr	r0, [r4, #0]
 80060d2:	f000 ff4c 	bl	8006f6e <SDMMC_GetResponse>
 80060d6:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80060d8:	2108      	movs	r1, #8
 80060da:	6820      	ldr	r0, [r4, #0]
 80060dc:	f000 ff47 	bl	8006f6e <SDMMC_GetResponse>
 80060e0:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80060e2:	210c      	movs	r1, #12
 80060e4:	6820      	ldr	r0, [r4, #0]
 80060e6:	f000 ff42 	bl	8006f6e <SDMMC_GetResponse>
 80060ea:	67e0      	str	r0, [r4, #124]	; 0x7c
 80060ec:	e7ae      	b.n	800604c <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80060ee:	f10d 0102 	add.w	r1, sp, #2
 80060f2:	6820      	ldr	r0, [r4, #0]
 80060f4:	f001 f9d1 	bl	800749a <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80060f8:	4603      	mov	r3, r0
 80060fa:	2800      	cmp	r0, #0
 80060fc:	d0a9      	beq.n	8006052 <SD_InitCard+0x22>
 80060fe:	e001      	b.n	8006104 <SD_InitCard+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006100:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
}
 8006104:	4618      	mov	r0, r3
 8006106:	b00c      	add	sp, #48	; 0x30
 8006108:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800610a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800610e:	e7f9      	b.n	8006104 <SD_InitCard+0xd4>

08006110 <HAL_SD_InitCard>:
{
 8006110:	b510      	push	{r4, lr}
 8006112:	b08a      	sub	sp, #40	; 0x28
 8006114:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006116:	2300      	movs	r3, #0
 8006118:	9304      	str	r3, [sp, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800611a:	9305      	str	r3, [sp, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800611c:	9306      	str	r3, [sp, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800611e:	9307      	str	r3, [sp, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006120:	23fa      	movs	r3, #250	; 0xfa
 8006122:	9308      	str	r3, [sp, #32]
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8006124:	6983      	ldr	r3, [r0, #24]
 8006126:	2b02      	cmp	r3, #2
 8006128:	d028      	beq.n	800617c <HAL_SD_InitCard+0x6c>
  (void)SDMMC_Init(hsd->Instance, Init);
 800612a:	ab0a      	add	r3, sp, #40	; 0x28
 800612c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8006130:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006134:	ab04      	add	r3, sp, #16
 8006136:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006138:	6820      	ldr	r0, [r4, #0]
 800613a:	f000 fed7 	bl	8006eec <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800613e:	6820      	ldr	r0, [r4, #0]
 8006140:	f000 fef6 	bl	8006f30 <SDMMC_PowerState_ON>
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 8006144:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006148:	f7fe fc00 	bl	800494c <HAL_RCCEx_GetPeriphCLKFreq>
 800614c:	4b20      	ldr	r3, [pc, #128]	; (80061d0 <HAL_SD_InitCard+0xc0>)
 800614e:	fba3 3000 	umull	r3, r0, r3, r0
  if(sdmmc_clk != 0U)
 8006152:	0940      	lsrs	r0, r0, #5
 8006154:	d018      	beq.n	8006188 <HAL_SD_InitCard+0x78>
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8006156:	4b1f      	ldr	r3, [pc, #124]	; (80061d4 <HAL_SD_InitCard+0xc4>)
 8006158:	fbb3 f0f0 	udiv	r0, r3, r0
 800615c:	3001      	adds	r0, #1
 800615e:	f7fa f921 	bl	80003a4 <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 8006162:	4620      	mov	r0, r4
 8006164:	f7ff fdd0 	bl	8005d08 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006168:	4602      	mov	r2, r0
 800616a:	b188      	cbz	r0, 8006190 <HAL_SD_InitCard+0x80>
    hsd->State = HAL_SD_STATE_READY;
 800616c:	2001      	movs	r0, #1
 800616e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006172:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006174:	4313      	orrs	r3, r2
 8006176:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8006178:	b00a      	add	sp, #40	; 0x28
 800617a:	bd10      	pop	{r4, pc}
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800617c:	6802      	ldr	r2, [r0, #0]
 800617e:	6813      	ldr	r3, [r2, #0]
 8006180:	f043 0310 	orr.w	r3, r3, #16
 8006184:	6013      	str	r3, [r2, #0]
 8006186:	e7d0      	b.n	800612a <HAL_SD_InitCard+0x1a>
    HAL_Delay(2U);
 8006188:	2002      	movs	r0, #2
 800618a:	f7fa f90b 	bl	80003a4 <HAL_Delay>
 800618e:	e7e8      	b.n	8006162 <HAL_SD_InitCard+0x52>
  errorstate = SD_InitCard(hsd);
 8006190:	4620      	mov	r0, r4
 8006192:	f7ff ff4d 	bl	8006030 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006196:	4602      	mov	r2, r0
 8006198:	b130      	cbz	r0, 80061a8 <HAL_SD_InitCard+0x98>
    hsd->State = HAL_SD_STATE_READY;
 800619a:	2001      	movs	r0, #1
 800619c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80061a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80061a2:	4313      	orrs	r3, r2
 80061a4:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80061a6:	e7e7      	b.n	8006178 <HAL_SD_InitCard+0x68>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80061a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061ac:	6820      	ldr	r0, [r4, #0]
 80061ae:	f000 fff9 	bl	80071a4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80061b2:	4603      	mov	r3, r0
 80061b4:	b148      	cbz	r0, 80061ca <HAL_SD_InitCard+0xba>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061b6:	6822      	ldr	r2, [r4, #0]
 80061b8:	4907      	ldr	r1, [pc, #28]	; (80061d8 <HAL_SD_InitCard+0xc8>)
 80061ba:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80061bc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80061be:	4318      	orrs	r0, r3
 80061c0:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80061c2:	2001      	movs	r0, #1
 80061c4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    return HAL_ERROR;
 80061c8:	e7d6      	b.n	8006178 <HAL_SD_InitCard+0x68>
  return HAL_OK;
 80061ca:	2000      	movs	r0, #0
 80061cc:	e7d4      	b.n	8006178 <HAL_SD_InitCard+0x68>
 80061ce:	bf00      	nop
 80061d0:	10624dd3 	.word	0x10624dd3
 80061d4:	00012110 	.word	0x00012110
 80061d8:	1fe00fff 	.word	0x1fe00fff

080061dc <HAL_SD_GetCardStatus>:
{
 80061dc:	b530      	push	{r4, r5, lr}
 80061de:	b091      	sub	sp, #68	; 0x44
 80061e0:	4605      	mov	r5, r0
 80061e2:	460c      	mov	r4, r1
  errorstate = SD_SendSDStatus(hsd, sd_status);
 80061e4:	4669      	mov	r1, sp
 80061e6:	f7ff fa0f 	bl	8005608 <SD_SendSDStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80061ea:	b1c8      	cbz	r0, 8006220 <HAL_SD_GetCardStatus+0x44>
 80061ec:	4603      	mov	r3, r0
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061ee:	682a      	ldr	r2, [r5, #0]
 80061f0:	4929      	ldr	r1, [pc, #164]	; (8006298 <HAL_SD_GetCardStatus+0xbc>)
 80061f2:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80061f4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80061f6:	4318      	orrs	r0, r3
 80061f8:	63a8      	str	r0, [r5, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80061fa:	2401      	movs	r4, #1
 80061fc:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006200:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006204:	6828      	ldr	r0, [r5, #0]
 8006206:	f000 ffcd 	bl	80071a4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800620a:	b130      	cbz	r0, 800621a <HAL_SD_GetCardStatus+0x3e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800620c:	682a      	ldr	r2, [r5, #0]
 800620e:	4922      	ldr	r1, [pc, #136]	; (8006298 <HAL_SD_GetCardStatus+0xbc>)
 8006210:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006212:	63a8      	str	r0, [r5, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006214:	2401      	movs	r4, #1
 8006216:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
}
 800621a:	4620      	mov	r0, r4
 800621c:	b011      	add	sp, #68	; 0x44
 800621e:	bd30      	pop	{r4, r5, pc}
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006220:	9a00      	ldr	r2, [sp, #0]
 8006222:	f3c2 1381 	ubfx	r3, r2, #6, #2
 8006226:	7023      	strb	r3, [r4, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006228:	f3c2 1340 	ubfx	r3, r2, #5, #1
 800622c:	7063      	strb	r3, [r4, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800622e:	0a13      	lsrs	r3, r2, #8
 8006230:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006234:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8006238:	b29b      	uxth	r3, r3
 800623a:	8063      	strh	r3, [r4, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800623c:	9a01      	ldr	r2, [sp, #4]
 800623e:	0213      	lsls	r3, r2, #8
 8006240:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006244:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006248:	0a11      	lsrs	r1, r2, #8
 800624a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800624e:	430b      	orrs	r3, r1
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006250:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006254:	6063      	str	r3, [r4, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006256:	9b02      	ldr	r3, [sp, #8]
 8006258:	b2da      	uxtb	r2, r3
 800625a:	7222      	strb	r2, [r4, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800625c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006260:	7262      	strb	r2, [r4, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006262:	f3c3 5203 	ubfx	r2, r3, #20, #4
 8006266:	72a2      	strb	r2, [r4, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006268:	0c1b      	lsrs	r3, r3, #16
 800626a:	9a03      	ldr	r2, [sp, #12]
 800626c:	b2d1      	uxtb	r1, r2
 800626e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006272:	430b      	orrs	r3, r1
 8006274:	81a3      	strh	r3, [r4, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006276:	f3c2 2385 	ubfx	r3, r2, #10, #6
 800627a:	73a3      	strb	r3, [r4, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800627c:	f3c2 2301 	ubfx	r3, r2, #8, #2
 8006280:	73e3      	strb	r3, [r4, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006282:	f3c2 1303 	ubfx	r3, r2, #4, #4
 8006286:	7423      	strb	r3, [r4, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006288:	f002 020f 	and.w	r2, r2, #15
 800628c:	7462      	strb	r2, [r4, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800628e:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006292:	74a3      	strb	r3, [r4, #18]
  HAL_StatusTypeDef status = HAL_OK;
 8006294:	2400      	movs	r4, #0
 8006296:	e7b3      	b.n	8006200 <HAL_SD_GetCardStatus+0x24>
 8006298:	1fe00fff 	.word	0x1fe00fff

0800629c <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800629c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800629e:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80062a0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80062a2:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80062a4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80062a6:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80062a8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80062aa:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80062ac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80062ae:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80062b0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80062b2:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80062b4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80062b6:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80062b8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80062ba:	61cb      	str	r3, [r1, #28]
}
 80062bc:	2000      	movs	r0, #0
 80062be:	4770      	bx	lr

080062c0 <HAL_SD_ConfigWideBusOperation>:
{
 80062c0:	b530      	push	{r4, r5, lr}
 80062c2:	b08b      	sub	sp, #44	; 0x2c
 80062c4:	4604      	mov	r4, r0
 80062c6:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 80062c8:	2303      	movs	r3, #3
 80062ca:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 80062ce:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80062d0:	2b03      	cmp	r3, #3
 80062d2:	d01c      	beq.n	800630e <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80062d4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80062d8:	d008      	beq.n	80062ec <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80062da:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80062de:	d00a      	beq.n	80062f6 <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80062e0:	b179      	cbz	r1, 8006302 <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80062e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80062e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062e8:	6383      	str	r3, [r0, #56]	; 0x38
 80062ea:	e014      	b.n	8006316 <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80062ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062f2:	6383      	str	r3, [r0, #56]	; 0x38
 80062f4:	e00f      	b.n	8006316 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 80062f6:	f7ff fa99 	bl	800582c <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 80062fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80062fc:	4318      	orrs	r0, r3
 80062fe:	63a0      	str	r0, [r4, #56]	; 0x38
 8006300:	e009      	b.n	8006316 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 8006302:	f7ff fabe 	bl	8005882 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8006306:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006308:	4318      	orrs	r0, r3
 800630a:	63a0      	str	r0, [r4, #56]	; 0x38
 800630c:	e003      	b.n	8006316 <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800630e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006314:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006316:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006318:	b1bb      	cbz	r3, 800634a <HAL_SD_ConfigWideBusOperation+0x8a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	4a1e      	ldr	r2, [pc, #120]	; (8006398 <HAL_SD_ConfigWideBusOperation+0xd8>)
 800631e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006320:	2501      	movs	r5, #1
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006322:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006326:	6820      	ldr	r0, [r4, #0]
 8006328:	f000 ff3c 	bl	80071a4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800632c:	4603      	mov	r3, r0
 800632e:	b130      	cbz	r0, 800633e <HAL_SD_ConfigWideBusOperation+0x7e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006330:	6822      	ldr	r2, [r4, #0]
 8006332:	4919      	ldr	r1, [pc, #100]	; (8006398 <HAL_SD_ConfigWideBusOperation+0xd8>)
 8006334:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006336:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006338:	4318      	orrs	r0, r3
 800633a:	63a0      	str	r0, [r4, #56]	; 0x38
    status = HAL_ERROR;
 800633c:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 800633e:	2301      	movs	r3, #1
 8006340:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8006344:	4628      	mov	r0, r5
 8006346:	b00b      	add	sp, #44	; 0x2c
 8006348:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800634a:	6863      	ldr	r3, [r4, #4]
 800634c:	9304      	str	r3, [sp, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800634e:	68a3      	ldr	r3, [r4, #8]
 8006350:	9305      	str	r3, [sp, #20]
    Init.BusWide             = WideMode;
 8006352:	9506      	str	r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006354:	6923      	ldr	r3, [r4, #16]
 8006356:	9307      	str	r3, [sp, #28]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8006358:	6963      	ldr	r3, [r4, #20]
 800635a:	2b03      	cmp	r3, #3
 800635c:	d90c      	bls.n	8006378 <HAL_SD_ConfigWideBusOperation+0xb8>
      Init.ClockDiv = hsd->Init.ClockDiv;
 800635e:	9308      	str	r3, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8006360:	ab0a      	add	r3, sp, #40	; 0x28
 8006362:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8006366:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800636a:	ab04      	add	r3, sp, #16
 800636c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800636e:	6820      	ldr	r0, [r4, #0]
 8006370:	f000 fdbc 	bl	8006eec <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 8006374:	2500      	movs	r5, #0
 8006376:	e7d4      	b.n	8006322 <HAL_SD_ConfigWideBusOperation+0x62>
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006378:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800637a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800637e:	d005      	beq.n	800638c <HAL_SD_ConfigWideBusOperation+0xcc>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006380:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8006384:	d004      	beq.n	8006390 <HAL_SD_ConfigWideBusOperation+0xd0>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8006386:	2304      	movs	r3, #4
 8006388:	9308      	str	r3, [sp, #32]
 800638a:	e7e9      	b.n	8006360 <HAL_SD_ConfigWideBusOperation+0xa0>
      Init.ClockDiv = hsd->Init.ClockDiv;
 800638c:	9308      	str	r3, [sp, #32]
 800638e:	e7e7      	b.n	8006360 <HAL_SD_ConfigWideBusOperation+0xa0>
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8006390:	2302      	movs	r3, #2
 8006392:	9308      	str	r3, [sp, #32]
 8006394:	e7e4      	b.n	8006360 <HAL_SD_ConfigWideBusOperation+0xa0>
 8006396:	bf00      	nop
 8006398:	1fe00fff 	.word	0x1fe00fff

0800639c <HAL_SD_GetCardState>:
{
 800639c:	b510      	push	{r4, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 80063a2:	a902      	add	r1, sp, #8
 80063a4:	2300      	movs	r3, #0
 80063a6:	f841 3d04 	str.w	r3, [r1, #-4]!
  errorstate = SD_SendStatus(hsd, &resp1);
 80063aa:	f7ff fa95 	bl	80058d8 <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80063ae:	b118      	cbz	r0, 80063b8 <HAL_SD_GetCardState+0x1c>
 80063b0:	4603      	mov	r3, r0
    hsd->ErrorCode |= errorstate;
 80063b2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80063b4:	4318      	orrs	r0, r3
 80063b6:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80063b8:	9801      	ldr	r0, [sp, #4]
 80063ba:	f3c0 2043 	ubfx	r0, r0, #9, #4
 80063be:	b002      	add	sp, #8
 80063c0:	bd10      	pop	{r4, pc}

080063c2 <HAL_SD_Init>:
{
 80063c2:	b570      	push	{r4, r5, r6, lr}
 80063c4:	b086      	sub	sp, #24
  if(hsd == NULL)
 80063c6:	2800      	cmp	r0, #0
 80063c8:	d058      	beq.n	800647c <HAL_SD_Init+0xba>
 80063ca:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 80063cc:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80063d0:	b93b      	cbnz	r3, 80063e2 <HAL_SD_Init+0x20>
    hsd->Lock = HAL_UNLOCKED;
 80063d2:	7703      	strb	r3, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 80063d4:	6983      	ldr	r3, [r0, #24]
 80063d6:	b90b      	cbnz	r3, 80063dc <HAL_SD_Init+0x1a>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 80063d8:	2302      	movs	r3, #2
 80063da:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 80063dc:	4620      	mov	r0, r4
 80063de:	f002 fa1f 	bl	8008820 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 80063e2:	2303      	movs	r3, #3
 80063e4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80063e8:	4620      	mov	r0, r4
 80063ea:	f7ff fe91 	bl	8006110 <HAL_SD_InitCard>
 80063ee:	b118      	cbz	r0, 80063f8 <HAL_SD_Init+0x36>
    return HAL_ERROR;
 80063f0:	2501      	movs	r5, #1
}
 80063f2:	4628      	mov	r0, r5
 80063f4:	b006      	add	sp, #24
 80063f6:	bd70      	pop	{r4, r5, r6, pc}
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80063f8:	a901      	add	r1, sp, #4
 80063fa:	4620      	mov	r0, r4
 80063fc:	f7ff feee 	bl	80061dc <HAL_SD_GetCardStatus>
 8006400:	2800      	cmp	r0, #0
 8006402:	d13d      	bne.n	8006480 <HAL_SD_Init+0xbe>
  speedgrade = CardStatus.UhsSpeedGrade;
 8006404:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8006408:	b2da      	uxtb	r2, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 800640a:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800640e:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006410:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006412:	2901      	cmp	r1, #1
 8006414:	d00b      	beq.n	800642e <HAL_SD_Init+0x6c>
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006416:	2901      	cmp	r1, #1
 8006418:	d00f      	beq.n	800643a <HAL_SD_Init+0x78>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800641a:	2300      	movs	r3, #0
 800641c:	65e3      	str	r3, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800641e:	68e1      	ldr	r1, [r4, #12]
 8006420:	4620      	mov	r0, r4
 8006422:	f7ff ff4d 	bl	80062c0 <HAL_SD_ConfigWideBusOperation>
 8006426:	4605      	mov	r5, r0
 8006428:	b158      	cbz	r0, 8006442 <HAL_SD_Init+0x80>
    return HAL_ERROR;
 800642a:	2501      	movs	r5, #1
 800642c:	e7e1      	b.n	80063f2 <HAL_SD_Init+0x30>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800642e:	4313      	orrs	r3, r2
 8006430:	d0f1      	beq.n	8006416 <HAL_SD_Init+0x54>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006432:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006436:	65e3      	str	r3, [r4, #92]	; 0x5c
 8006438:	e7f1      	b.n	800641e <HAL_SD_Init+0x5c>
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800643a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800643e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8006440:	e7ed      	b.n	800641e <HAL_SD_Init+0x5c>
  tickstart = HAL_GetTick();
 8006442:	f7f9 ffa9 	bl	8000398 <HAL_GetTick>
 8006446:	4606      	mov	r6, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006448:	4620      	mov	r0, r4
 800644a:	f7ff ffa7 	bl	800639c <HAL_SD_GetCardState>
 800644e:	2804      	cmp	r0, #4
 8006450:	d00d      	beq.n	800646e <HAL_SD_Init+0xac>
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8006452:	f7f9 ffa1 	bl	8000398 <HAL_GetTick>
 8006456:	1b80      	subs	r0, r0, r6
 8006458:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800645c:	d1f4      	bne.n	8006448 <HAL_SD_Init+0x86>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800645e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006462:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8006464:	2301      	movs	r3, #1
 8006466:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 800646a:	2503      	movs	r5, #3
 800646c:	e7c1      	b.n	80063f2 <HAL_SD_Init+0x30>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800646e:	2300      	movs	r3, #0
 8006470:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8006472:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8006474:	2301      	movs	r3, #1
 8006476:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800647a:	e7ba      	b.n	80063f2 <HAL_SD_Init+0x30>
    return HAL_ERROR;
 800647c:	2501      	movs	r5, #1
 800647e:	e7b8      	b.n	80063f2 <HAL_SD_Init+0x30>
    return HAL_ERROR;
 8006480:	2501      	movs	r5, #1
 8006482:	e7b6      	b.n	80063f2 <HAL_SD_Init+0x30>

08006484 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006484:	b308      	cbz	r0, 80064ca <HAL_SDRAM_Init+0x46>
{
 8006486:	b538      	push	{r3, r4, r5, lr}
 8006488:	4604      	mov	r4, r0
 800648a:	460d      	mov	r5, r1
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800648c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006490:	b1b3      	cbz	r3, 80064c0 <HAL_SDRAM_Init+0x3c>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006492:	2302      	movs	r3, #2
 8006494:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006498:	4621      	mov	r1, r4
 800649a:	f851 0b04 	ldr.w	r0, [r1], #4
 800649e:	f000 fbef 	bl	8006c80 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80064a2:	6862      	ldr	r2, [r4, #4]
 80064a4:	4629      	mov	r1, r5
 80064a6:	6820      	ldr	r0, [r4, #0]
 80064a8:	f000 fc24 	bl	8006cf4 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80064ac:	4a08      	ldr	r2, [pc, #32]	; (80064d0 <HAL_SDRAM_Init+0x4c>)
 80064ae:	6813      	ldr	r3, [r2, #0]
 80064b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064b4:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80064b6:	2301      	movs	r3, #1
 80064b8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  return HAL_OK;
 80064bc:	2000      	movs	r0, #0
}
 80064be:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 80064c0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 80064c4:	f001 fd44 	bl	8007f50 <HAL_SDRAM_MspInit>
 80064c8:	e7e3      	b.n	8006492 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 80064ca:	2001      	movs	r0, #1
}
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	52004000 	.word	0x52004000

080064d4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80064d4:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 80064d6:	6802      	ldr	r2, [r0, #0]
 80064d8:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80064da:	6991      	ldr	r1, [r2, #24]
 80064dc:	f041 0108 	orr.w	r1, r1, #8
 80064e0:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80064e2:	6801      	ldr	r1, [r0, #0]
 80064e4:	698a      	ldr	r2, [r1, #24]
 80064e6:	f042 0210 	orr.w	r2, r2, #16
 80064ea:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064ec:	6801      	ldr	r1, [r0, #0]
 80064ee:	680a      	ldr	r2, [r1, #0]
 80064f0:	f022 0201 	bic.w	r2, r2, #1
 80064f4:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80064f6:	6801      	ldr	r1, [r0, #0]
 80064f8:	690c      	ldr	r4, [r1, #16]
 80064fa:	4a29      	ldr	r2, [pc, #164]	; (80065a0 <SPI_CloseTransfer+0xcc>)
 80064fc:	4022      	ands	r2, r4
 80064fe:	610a      	str	r2, [r1, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006500:	6801      	ldr	r1, [r0, #0]
 8006502:	688a      	ldr	r2, [r1, #8]
 8006504:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006508:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800650a:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	2a04      	cmp	r2, #4
 8006512:	d00d      	beq.n	8006530 <SPI_CloseTransfer+0x5c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006514:	f013 0f20 	tst.w	r3, #32
 8006518:	d00a      	beq.n	8006530 <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800651a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800651e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006522:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006526:	6801      	ldr	r1, [r0, #0]
 8006528:	698a      	ldr	r2, [r1, #24]
 800652a:	f042 0220 	orr.w	r2, r2, #32
 800652e:	618a      	str	r2, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006530:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8006534:	b2d2      	uxtb	r2, r2
 8006536:	2a03      	cmp	r2, #3
 8006538:	d00d      	beq.n	8006556 <SPI_CloseTransfer+0x82>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800653a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800653e:	d00a      	beq.n	8006556 <SPI_CloseTransfer+0x82>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006540:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006544:	f042 0204 	orr.w	r2, r2, #4
 8006548:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800654c:	6801      	ldr	r1, [r0, #0]
 800654e:	698a      	ldr	r2, [r1, #24]
 8006550:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006554:	618a      	str	r2, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006556:	f413 7f00 	tst.w	r3, #512	; 0x200
 800655a:	d00a      	beq.n	8006572 <SPI_CloseTransfer+0x9e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800655c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006560:	f042 0201 	orr.w	r2, r2, #1
 8006564:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006568:	6801      	ldr	r1, [r0, #0]
 800656a:	698a      	ldr	r2, [r1, #24]
 800656c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006570:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006572:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006576:	d00a      	beq.n	800658e <SPI_CloseTransfer+0xba>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006578:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800657c:	f043 0308 	orr.w	r3, r3, #8
 8006580:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006584:	6802      	ldr	r2, [r0, #0]
 8006586:	6993      	ldr	r3, [r2, #24]
 8006588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800658c:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800658e:	2300      	movs	r3, #0
 8006590:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006594:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8006598:	f85d 4b04 	ldr.w	r4, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	fffffc90 	.word	0xfffffc90

080065a4 <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80065a4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80065a6:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80065a8:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80065aa:	3008      	adds	r0, #8
 80065ac:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 80065ae:	fb03 0000 	mla	r0, r3, r0, r0
 80065b2:	4770      	bx	lr

080065b4 <HAL_SPI_Init>:
  if (hspi == NULL)
 80065b4:	2800      	cmp	r0, #0
 80065b6:	f000 8097 	beq.w	80066e8 <HAL_SPI_Init+0x134>
{
 80065ba:	b570      	push	{r4, r5, r6, lr}
 80065bc:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065be:	2300      	movs	r3, #0
 80065c0:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80065c2:	6805      	ldr	r5, [r0, #0]
 80065c4:	4b4c      	ldr	r3, [pc, #304]	; (80066f8 <HAL_SPI_Init+0x144>)
 80065c6:	4e4d      	ldr	r6, [pc, #308]	; (80066fc <HAL_SPI_Init+0x148>)
 80065c8:	429d      	cmp	r5, r3
 80065ca:	bf18      	it	ne
 80065cc:	42b5      	cmpne	r5, r6
 80065ce:	bf14      	ite	ne
 80065d0:	2601      	movne	r6, #1
 80065d2:	2600      	moveq	r6, #0
 80065d4:	d007      	beq.n	80065e6 <HAL_SPI_Init+0x32>
 80065d6:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 80065da:	429d      	cmp	r5, r3
 80065dc:	d003      	beq.n	80065e6 <HAL_SPI_Init+0x32>
 80065de:	68c3      	ldr	r3, [r0, #12]
 80065e0:	2b0f      	cmp	r3, #15
 80065e2:	f200 8083 	bhi.w	80066ec <HAL_SPI_Init+0x138>
  packet_length = SPI_GetPacketSize(hspi);
 80065e6:	4620      	mov	r0, r4
 80065e8:	f7ff ffdc 	bl	80065a4 <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80065ec:	b126      	cbz	r6, 80065f8 <HAL_SPI_Init+0x44>
 80065ee:	4b44      	ldr	r3, [pc, #272]	; (8006700 <HAL_SPI_Init+0x14c>)
 80065f0:	429d      	cmp	r5, r3
 80065f2:	d001      	beq.n	80065f8 <HAL_SPI_Init+0x44>
 80065f4:	2808      	cmp	r0, #8
 80065f6:	d87b      	bhi.n	80066f0 <HAL_SPI_Init+0x13c>
 80065f8:	4a3f      	ldr	r2, [pc, #252]	; (80066f8 <HAL_SPI_Init+0x144>)
 80065fa:	4b40      	ldr	r3, [pc, #256]	; (80066fc <HAL_SPI_Init+0x148>)
 80065fc:	429d      	cmp	r5, r3
 80065fe:	bf18      	it	ne
 8006600:	4295      	cmpne	r5, r2
 8006602:	d003      	beq.n	800660c <HAL_SPI_Init+0x58>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006604:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006608:	429d      	cmp	r5, r3
 800660a:	d101      	bne.n	8006610 <HAL_SPI_Init+0x5c>
 800660c:	2810      	cmp	r0, #16
 800660e:	d871      	bhi.n	80066f4 <HAL_SPI_Init+0x140>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006610:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8006614:	2b00      	cmp	r3, #0
 8006616:	d054      	beq.n	80066c2 <HAL_SPI_Init+0x10e>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006618:	2302      	movs	r3, #2
 800661a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800661e:	6822      	ldr	r2, [r4, #0]
 8006620:	6813      	ldr	r3, [r2, #0]
 8006622:	f023 0301 	bic.w	r3, r3, #1
 8006626:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8006628:	69a3      	ldr	r3, [r4, #24]
 800662a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800662e:	d04e      	beq.n	80066ce <HAL_SPI_Init+0x11a>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006630:	69e3      	ldr	r3, [r4, #28]
 8006632:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006634:	4313      	orrs	r3, r2
 8006636:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006638:	4313      	orrs	r3, r2
 800663a:	68e1      	ldr	r1, [r4, #12]
 800663c:	6822      	ldr	r2, [r4, #0]
 800663e:	430b      	orrs	r3, r1
 8006640:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8006642:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006644:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006646:	4313      	orrs	r3, r2
 8006648:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800664a:	4313      	orrs	r3, r2
 800664c:	69a2      	ldr	r2, [r4, #24]
 800664e:	4313      	orrs	r3, r2
 8006650:	6922      	ldr	r2, [r4, #16]
 8006652:	4313      	orrs	r3, r2
 8006654:	6962      	ldr	r2, [r4, #20]
 8006656:	4313      	orrs	r3, r2
 8006658:	6a22      	ldr	r2, [r4, #32]
 800665a:	4313      	orrs	r3, r2
 800665c:	6862      	ldr	r2, [r4, #4]
 800665e:	4313      	orrs	r3, r2
 8006660:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006662:	4313      	orrs	r3, r2
 8006664:	68a2      	ldr	r2, [r4, #8]
 8006666:	4313      	orrs	r3, r2
 8006668:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800666a:	4313      	orrs	r3, r2
 800666c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800666e:	6822      	ldr	r2, [r4, #0]
 8006670:	430b      	orrs	r3, r1
 8006672:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006674:	6863      	ldr	r3, [r4, #4]
 8006676:	b96b      	cbnz	r3, 8006694 <HAL_SPI_Init+0xe0>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006678:	6822      	ldr	r2, [r4, #0]
 800667a:	6893      	ldr	r3, [r2, #8]
 800667c:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8006680:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006684:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006686:	6822      	ldr	r2, [r4, #0]
 8006688:	6893      	ldr	r3, [r2, #8]
 800668a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800668e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006692:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006694:	6822      	ldr	r2, [r4, #0]
 8006696:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006698:	f023 0301 	bic.w	r3, r3, #1
 800669c:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800669e:	6863      	ldr	r3, [r4, #4]
 80066a0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80066a4:	d006      	beq.n	80066b4 <HAL_SPI_Init+0x100>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80066a6:	6822      	ldr	r2, [r4, #0]
 80066a8:	68d3      	ldr	r3, [r2, #12]
 80066aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066ae:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80066b0:	430b      	orrs	r3, r1
 80066b2:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066b4:	2000      	movs	r0, #0
 80066b6:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80066ba:	2301      	movs	r3, #1
 80066bc:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 80066c0:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 80066c2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 80066c6:	4620      	mov	r0, r4
 80066c8:	f002 f926 	bl	8008918 <HAL_SPI_MspInit>
 80066cc:	e7a4      	b.n	8006618 <HAL_SPI_Init+0x64>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80066ce:	6863      	ldr	r3, [r4, #4]
 80066d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066d4:	d1ac      	bne.n	8006630 <HAL_SPI_Init+0x7c>
 80066d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1a9      	bne.n	8006630 <HAL_SPI_Init+0x7c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80066dc:	6822      	ldr	r2, [r4, #0]
 80066de:	6813      	ldr	r3, [r2, #0]
 80066e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80066e4:	6013      	str	r3, [r2, #0]
 80066e6:	e7a3      	b.n	8006630 <HAL_SPI_Init+0x7c>
    return HAL_ERROR;
 80066e8:	2001      	movs	r0, #1
}
 80066ea:	4770      	bx	lr
    return HAL_ERROR;
 80066ec:	2001      	movs	r0, #1
 80066ee:	e7e7      	b.n	80066c0 <HAL_SPI_Init+0x10c>
    return HAL_ERROR;
 80066f0:	2001      	movs	r0, #1
 80066f2:	e7e5      	b.n	80066c0 <HAL_SPI_Init+0x10c>
 80066f4:	2001      	movs	r0, #1
 80066f6:	e7e3      	b.n	80066c0 <HAL_SPI_Init+0x10c>
 80066f8:	40013000 	.word	0x40013000
 80066fc:	40003800 	.word	0x40003800
 8006700:	40003c00 	.word	0x40003c00

08006704 <HAL_SPI_TransmitReceive_DMA>:
{
 8006704:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 8006706:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
 800670a:	2c01      	cmp	r4, #1
 800670c:	f000 8122 	beq.w	8006954 <HAL_SPI_TransmitReceive_DMA+0x250>
 8006710:	2401      	movs	r4, #1
 8006712:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
  tmp_state   = hspi->State;
 8006716:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 800671a:	b2e4      	uxtb	r4, r4
  tmp_mode    = hspi->Init.Mode;
 800671c:	6845      	ldr	r5, [r0, #4]
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 800671e:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 8006722:	d034      	beq.n	800678e <HAL_SPI_TransmitReceive_DMA+0x8a>
 8006724:	2c01      	cmp	r4, #1
 8006726:	d138      	bne.n	800679a <HAL_SPI_TransmitReceive_DMA+0x96>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006728:	fab2 f482 	clz	r4, r2
 800672c:	0964      	lsrs	r4, r4, #5
 800672e:	2900      	cmp	r1, #0
 8006730:	bf08      	it	eq
 8006732:	2401      	moveq	r4, #1
 8006734:	2c00      	cmp	r4, #0
 8006736:	d136      	bne.n	80067a6 <HAL_SPI_TransmitReceive_DMA+0xa2>
 8006738:	2b00      	cmp	r3, #0
 800673a:	d034      	beq.n	80067a6 <HAL_SPI_TransmitReceive_DMA+0xa2>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800673c:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 8006740:	b2e4      	uxtb	r4, r4
 8006742:	2c04      	cmp	r4, #4
 8006744:	d002      	beq.n	800674c <HAL_SPI_TransmitReceive_DMA+0x48>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006746:	2405      	movs	r4, #5
 8006748:	f880 4081 	strb.w	r4, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800674c:	2400      	movs	r4, #0
 800674e:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006752:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8006754:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 8006758:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800675c:	6642      	str	r2, [r0, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800675e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  hspi->RxXferCount = Size;
 8006762:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->RxISR       = NULL;
 8006766:	6704      	str	r4, [r0, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006768:	6744      	str	r4, [r0, #116]	; 0x74
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800676a:	6801      	ldr	r1, [r0, #0]
 800676c:	688a      	ldr	r2, [r1, #8]
 800676e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006772:	608a      	str	r2, [r1, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006774:	68c2      	ldr	r2, [r0, #12]
 8006776:	2a0f      	cmp	r2, #15
 8006778:	d91a      	bls.n	80067b0 <HAL_SPI_TransmitReceive_DMA+0xac>
 800677a:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 800677c:	6989      	ldr	r1, [r1, #24]
 800677e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8006782:	d015      	beq.n	80067b0 <HAL_SPI_TransmitReceive_DMA+0xac>
    __HAL_UNLOCK(hspi);
 8006784:	2300      	movs	r3, #0
 8006786:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800678a:	2201      	movs	r2, #1
 800678c:	e009      	b.n	80067a2 <HAL_SPI_TransmitReceive_DMA+0x9e>
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 800678e:	6885      	ldr	r5, [r0, #8]
 8006790:	2d00      	cmp	r5, #0
 8006792:	d1c7      	bne.n	8006724 <HAL_SPI_TransmitReceive_DMA+0x20>
 8006794:	2c04      	cmp	r4, #4
 8006796:	d1c5      	bne.n	8006724 <HAL_SPI_TransmitReceive_DMA+0x20>
 8006798:	e7c6      	b.n	8006728 <HAL_SPI_TransmitReceive_DMA+0x24>
    __HAL_UNLOCK(hspi);
 800679a:	2300      	movs	r3, #0
 800679c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 80067a0:	2202      	movs	r2, #2
}
 80067a2:	4610      	mov	r0, r2
 80067a4:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hspi);
 80067a6:	2300      	movs	r3, #0
 80067a8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 80067ac:	2201      	movs	r2, #1
 80067ae:	e7f8      	b.n	80067a2 <HAL_SPI_TransmitReceive_DMA+0x9e>
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80067b0:	2a07      	cmp	r2, #7
 80067b2:	d907      	bls.n	80067c4 <HAL_SPI_TransmitReceive_DMA+0xc0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80067b4:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 80067b6:	6989      	ldr	r1, [r1, #24]
 80067b8:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80067bc:	bf18      	it	ne
 80067be:	f5b1 4f80 	cmpne.w	r1, #16384	; 0x4000
 80067c2:	d1df      	bne.n	8006784 <HAL_SPI_TransmitReceive_DMA+0x80>
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80067c4:	2a07      	cmp	r2, #7
 80067c6:	d854      	bhi.n	8006872 <HAL_SPI_TransmitReceive_DMA+0x16e>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80067c8:	6f82      	ldr	r2, [r0, #120]	; 0x78
 80067ca:	6991      	ldr	r1, [r2, #24]
 80067cc:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80067d0:	d033      	beq.n	800683a <HAL_SPI_TransmitReceive_DMA+0x136>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80067d2:	6992      	ldr	r2, [r2, #24]
 80067d4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80067d8:	d036      	beq.n	8006848 <HAL_SPI_TransmitReceive_DMA+0x144>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80067da:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80067dc:	6991      	ldr	r1, [r2, #24]
 80067de:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80067e2:	d038      	beq.n	8006856 <HAL_SPI_TransmitReceive_DMA+0x152>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80067e4:	6992      	ldr	r2, [r2, #24]
 80067e6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80067ea:	d03b      	beq.n	8006864 <HAL_SPI_TransmitReceive_DMA+0x160>
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80067ec:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 80067f0:	b2d2      	uxtb	r2, r2
 80067f2:	2a04      	cmp	r2, #4
 80067f4:	d057      	beq.n	80068a6 <HAL_SPI_TransmitReceive_DMA+0x1a2>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80067f6:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80067f8:	4957      	ldr	r1, [pc, #348]	; (8006958 <HAL_SPI_TransmitReceive_DMA+0x254>)
 80067fa:	6411      	str	r1, [r2, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80067fc:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80067fe:	4957      	ldr	r1, [pc, #348]	; (800695c <HAL_SPI_TransmitReceive_DMA+0x258>)
 8006800:	63d1      	str	r1, [r2, #60]	; 0x3c
 8006802:	461d      	mov	r5, r3
 8006804:	4604      	mov	r4, r0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006806:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8006808:	4a55      	ldr	r2, [pc, #340]	; (8006960 <HAL_SPI_TransmitReceive_DMA+0x25c>)
 800680a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800680c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800680e:	2200      	movs	r2, #0
 8006810:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8006812:	6801      	ldr	r1, [r0, #0]
 8006814:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8006818:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800681a:	3130      	adds	r1, #48	; 0x30
 800681c:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800681e:	f7fb f8d1 	bl	80019c4 <HAL_DMA_Start_IT>
 8006822:	2800      	cmp	r0, #0
 8006824:	d046      	beq.n	80068b4 <HAL_SPI_TransmitReceive_DMA+0x1b0>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006826:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800682a:	f043 0310 	orr.w	r3, r3, #16
 800682e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006832:	2201      	movs	r2, #1
 8006834:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 8006838:	e7b3      	b.n	80067a2 <HAL_SPI_TransmitReceive_DMA+0x9e>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800683a:	f8b0 1062 	ldrh.w	r1, [r0, #98]	; 0x62
 800683e:	3101      	adds	r1, #1
 8006840:	0849      	lsrs	r1, r1, #1
 8006842:	f8a0 1062 	strh.w	r1, [r0, #98]	; 0x62
 8006846:	e7c4      	b.n	80067d2 <HAL_SPI_TransmitReceive_DMA+0xce>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8006848:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800684c:	3203      	adds	r2, #3
 800684e:	0892      	lsrs	r2, r2, #2
 8006850:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
 8006854:	e7c1      	b.n	80067da <HAL_SPI_TransmitReceive_DMA+0xd6>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8006856:	f8b0 106a 	ldrh.w	r1, [r0, #106]	; 0x6a
 800685a:	3101      	adds	r1, #1
 800685c:	0849      	lsrs	r1, r1, #1
 800685e:	f8a0 106a 	strh.w	r1, [r0, #106]	; 0x6a
 8006862:	e7bf      	b.n	80067e4 <HAL_SPI_TransmitReceive_DMA+0xe0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8006864:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 8006868:	3203      	adds	r2, #3
 800686a:	0892      	lsrs	r2, r2, #2
 800686c:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
 8006870:	e7bc      	b.n	80067ec <HAL_SPI_TransmitReceive_DMA+0xe8>
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8006872:	2a0f      	cmp	r2, #15
 8006874:	d8ba      	bhi.n	80067ec <HAL_SPI_TransmitReceive_DMA+0xe8>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006876:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8006878:	6992      	ldr	r2, [r2, #24]
 800687a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800687e:	d00b      	beq.n	8006898 <HAL_SPI_TransmitReceive_DMA+0x194>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006880:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8006882:	6992      	ldr	r2, [r2, #24]
 8006884:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8006888:	d1b0      	bne.n	80067ec <HAL_SPI_TransmitReceive_DMA+0xe8>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800688a:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 800688e:	3201      	adds	r2, #1
 8006890:	0852      	lsrs	r2, r2, #1
 8006892:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
 8006896:	e7a9      	b.n	80067ec <HAL_SPI_TransmitReceive_DMA+0xe8>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8006898:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800689c:	3201      	adds	r2, #1
 800689e:	0852      	lsrs	r2, r2, #1
 80068a0:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
 80068a4:	e7ec      	b.n	8006880 <HAL_SPI_TransmitReceive_DMA+0x17c>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80068a6:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80068a8:	492e      	ldr	r1, [pc, #184]	; (8006964 <HAL_SPI_TransmitReceive_DMA+0x260>)
 80068aa:	6411      	str	r1, [r2, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80068ac:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80068ae:	492e      	ldr	r1, [pc, #184]	; (8006968 <HAL_SPI_TransmitReceive_DMA+0x264>)
 80068b0:	63d1      	str	r1, [r2, #60]	; 0x3c
 80068b2:	e7a6      	b.n	8006802 <HAL_SPI_TransmitReceive_DMA+0xfe>
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80068b4:	6822      	ldr	r2, [r4, #0]
 80068b6:	6893      	ldr	r3, [r2, #8]
 80068b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068bc:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80068be:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80068c0:	2300      	movs	r3, #0
 80068c2:	6413      	str	r3, [r2, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80068c4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80068c6:	63d3      	str	r3, [r2, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80068c8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80068ca:	64d3      	str	r3, [r2, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80068cc:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80068ce:	6513      	str	r3, [r2, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 80068d0:	6822      	ldr	r2, [r4, #0]
 80068d2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80068d6:	3220      	adds	r2, #32
 80068d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80068da:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80068dc:	f7fb f872 	bl	80019c4 <HAL_DMA_Start_IT>
 80068e0:	4602      	mov	r2, r0
 80068e2:	bb08      	cbnz	r0, 8006928 <HAL_SPI_TransmitReceive_DMA+0x224>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80068e4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80068e6:	69db      	ldr	r3, [r3, #28]
 80068e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068ec:	d026      	beq.n	800693c <HAL_SPI_TransmitReceive_DMA+0x238>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80068ee:	6821      	ldr	r1, [r4, #0]
 80068f0:	6848      	ldr	r0, [r1, #4]
 80068f2:	4b1e      	ldr	r3, [pc, #120]	; (800696c <HAL_SPI_TransmitReceive_DMA+0x268>)
 80068f4:	4003      	ands	r3, r0
 80068f6:	432b      	orrs	r3, r5
 80068f8:	604b      	str	r3, [r1, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80068fa:	6821      	ldr	r1, [r4, #0]
 80068fc:	688b      	ldr	r3, [r1, #8]
 80068fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006902:	608b      	str	r3, [r1, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8006904:	6821      	ldr	r1, [r4, #0]
 8006906:	690b      	ldr	r3, [r1, #16]
 8006908:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 800690c:	610b      	str	r3, [r1, #16]
  __HAL_SPI_ENABLE(hspi);
 800690e:	6821      	ldr	r1, [r4, #0]
 8006910:	680b      	ldr	r3, [r1, #0]
 8006912:	f043 0301 	orr.w	r3, r3, #1
 8006916:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006918:	6863      	ldr	r3, [r4, #4]
 800691a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800691e:	d013      	beq.n	8006948 <HAL_SPI_TransmitReceive_DMA+0x244>
  __HAL_UNLOCK(hspi);
 8006920:	2300      	movs	r3, #0
 8006922:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 8006926:	e73c      	b.n	80067a2 <HAL_SPI_TransmitReceive_DMA+0x9e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006928:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800692c:	f043 0310 	orr.w	r3, r3, #16
 8006930:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006934:	2201      	movs	r2, #1
 8006936:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800693a:	e732      	b.n	80067a2 <HAL_SPI_TransmitReceive_DMA+0x9e>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800693c:	6821      	ldr	r1, [r4, #0]
 800693e:	6848      	ldr	r0, [r1, #4]
 8006940:	4b0a      	ldr	r3, [pc, #40]	; (800696c <HAL_SPI_TransmitReceive_DMA+0x268>)
 8006942:	4003      	ands	r3, r0
 8006944:	604b      	str	r3, [r1, #4]
 8006946:	e7d8      	b.n	80068fa <HAL_SPI_TransmitReceive_DMA+0x1f6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006948:	6821      	ldr	r1, [r4, #0]
 800694a:	680b      	ldr	r3, [r1, #0]
 800694c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006950:	600b      	str	r3, [r1, #0]
 8006952:	e7e5      	b.n	8006920 <HAL_SPI_TransmitReceive_DMA+0x21c>
  __HAL_LOCK(hspi);
 8006954:	2202      	movs	r2, #2
 8006956:	e724      	b.n	80067a2 <HAL_SPI_TransmitReceive_DMA+0x9e>
 8006958:	080069d9 	.word	0x080069d9
 800695c:	080069a1 	.word	0x080069a1
 8006960:	080069e5 	.word	0x080069e5
 8006964:	080069cd 	.word	0x080069cd
 8006968:	08006975 	.word	0x08006975
 800696c:	ffff0000 	.word	0xffff0000

08006970 <HAL_SPI_TxCpltCallback>:
}
 8006970:	4770      	bx	lr

08006972 <HAL_SPI_RxCpltCallback>:
}
 8006972:	4770      	bx	lr

08006974 <SPI_DMAReceiveCplt>:
{
 8006974:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006976:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 8006978:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b07      	cmp	r3, #7
 8006980:	d009      	beq.n	8006996 <SPI_DMAReceiveCplt+0x22>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006982:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800698a:	d005      	beq.n	8006998 <SPI_DMAReceiveCplt+0x24>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800698c:	6802      	ldr	r2, [r0, #0]
 800698e:	6913      	ldr	r3, [r2, #16]
 8006990:	f043 0308 	orr.w	r3, r3, #8
 8006994:	6113      	str	r3, [r2, #16]
}
 8006996:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 8006998:	f7ff ffeb 	bl	8006972 <HAL_SPI_RxCpltCallback>
 800699c:	e7fb      	b.n	8006996 <SPI_DMAReceiveCplt+0x22>

0800699e <HAL_SPI_TxRxCpltCallback>:
}
 800699e:	4770      	bx	lr

080069a0 <SPI_DMATransmitReceiveCplt>:
{
 80069a0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069a2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 80069a4:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b07      	cmp	r3, #7
 80069ac:	d009      	beq.n	80069c2 <SPI_DMATransmitReceiveCplt+0x22>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80069ae:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069b6:	d005      	beq.n	80069c4 <SPI_DMATransmitReceiveCplt+0x24>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80069b8:	6802      	ldr	r2, [r0, #0]
 80069ba:	6913      	ldr	r3, [r2, #16]
 80069bc:	f043 0308 	orr.w	r3, r3, #8
 80069c0:	6113      	str	r3, [r2, #16]
}
 80069c2:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
 80069c4:	f7ff ffeb 	bl	800699e <HAL_SPI_TxRxCpltCallback>
 80069c8:	e7fb      	b.n	80069c2 <SPI_DMATransmitReceiveCplt+0x22>

080069ca <HAL_SPI_RxHalfCpltCallback>:
}
 80069ca:	4770      	bx	lr

080069cc <SPI_DMAHalfReceiveCplt>:
{
 80069cc:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 80069ce:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80069d0:	f7ff fffb 	bl	80069ca <HAL_SPI_RxHalfCpltCallback>
}
 80069d4:	bd08      	pop	{r3, pc}

080069d6 <HAL_SPI_TxRxHalfCpltCallback>:
}
 80069d6:	4770      	bx	lr

080069d8 <SPI_DMAHalfTransmitReceiveCplt>:
{
 80069d8:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80069da:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80069dc:	f7ff fffb 	bl	80069d6 <HAL_SPI_TxRxHalfCpltCallback>
}
 80069e0:	bd08      	pop	{r3, pc}

080069e2 <HAL_SPI_ErrorCallback>:
}
 80069e2:	4770      	bx	lr

080069e4 <SPI_DMAError>:
{
 80069e4:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069e6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80069e8:	f7fb fe1e 	bl	8002628 <HAL_DMA_GetError>
 80069ec:	2802      	cmp	r0, #2
 80069ee:	d00e      	beq.n	8006a0e <SPI_DMAError+0x2a>
    SPI_CloseTransfer(hspi);
 80069f0:	4620      	mov	r0, r4
 80069f2:	f7ff fd6f 	bl	80064d4 <SPI_CloseTransfer>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80069f6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80069fa:	f043 0310 	orr.w	r3, r3, #16
 80069fe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006a02:	2301      	movs	r3, #1
 8006a04:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f7ff ffea 	bl	80069e2 <HAL_SPI_ErrorCallback>
}
 8006a0e:	bd10      	pop	{r4, pc}

08006a10 <HAL_SPI_IRQHandler>:
{
 8006a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a14:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 8006a16:	6806      	ldr	r6, [r0, #0]
 8006a18:	f8d6 9010 	ldr.w	r9, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
 8006a1c:	f8d6 8014 	ldr.w	r8, [r6, #20]
  uint32_t trigger  = itsource & itflag;
 8006a20:	ea09 0508 	and.w	r5, r9, r8
  uint32_t cfg1     = hspi->Instance->CFG1;
 8006a24:	f8d6 a008 	ldr.w	sl, [r6, #8]
  HAL_SPI_StateTypeDef State = hspi->State;
 8006a28:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
 8006a2c:	b2ff      	uxtb	r7, r7
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8006a2e:	f005 0364 	and.w	r3, r5, #100	; 0x64
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d116      	bne.n	8006a64 <HAL_SPI_IRQHandler+0x54>
    hspi->TxISR(hspi);
 8006a36:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8006a38:	4798      	blx	r3
    hspi->RxISR(hspi);
 8006a3a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	4798      	blx	r3
    handled = 1UL;
 8006a40:	2301      	movs	r3, #1
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006a42:	f005 0245 	and.w	r2, r5, #69	; 0x45
 8006a46:	2a01      	cmp	r2, #1
 8006a48:	d103      	bne.n	8006a52 <HAL_SPI_IRQHandler+0x42>
    hspi->RxISR(hspi);
 8006a4a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	4798      	blx	r3
    handled = 1UL;
 8006a50:	2301      	movs	r3, #1
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006a52:	f005 0226 	and.w	r2, r5, #38	; 0x26
 8006a56:	2a02      	cmp	r2, #2
 8006a58:	d106      	bne.n	8006a68 <HAL_SPI_IRQHandler+0x58>
    hspi->TxISR(hspi);
 8006a5a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	4798      	blx	r3
}
 8006a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint32_t handled  = 0UL;
 8006a64:	2300      	movs	r3, #0
 8006a66:	e7ec      	b.n	8006a42 <HAL_SPI_IRQHandler+0x32>
  if (handled != 0UL)
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1f9      	bne.n	8006a60 <HAL_SPI_IRQHandler+0x50>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8006a6c:	f015 0f08 	tst.w	r5, #8
 8006a70:	d06c      	beq.n	8006b4c <HAL_SPI_IRQHandler+0x13c>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006a72:	6822      	ldr	r2, [r4, #0]
 8006a74:	6993      	ldr	r3, [r2, #24]
 8006a76:	f043 0308 	orr.w	r3, r3, #8
 8006a7a:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006a7c:	6822      	ldr	r2, [r4, #0]
 8006a7e:	6993      	ldr	r3, [r2, #24]
 8006a80:	f043 0310 	orr.w	r3, r3, #16
 8006a84:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006a86:	6822      	ldr	r2, [r4, #0]
 8006a88:	6993      	ldr	r3, [r2, #24]
 8006a8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006a8e:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8006a90:	6822      	ldr	r2, [r4, #0]
 8006a92:	6913      	ldr	r3, [r2, #16]
 8006a94:	f023 0308 	bic.w	r3, r3, #8
 8006a98:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8006a9a:	f41a 4f40 	tst.w	sl, #49152	; 0xc000
 8006a9e:	d009      	beq.n	8006ab4 <HAL_SPI_IRQHandler+0xa4>
 8006aa0:	2f04      	cmp	r7, #4
 8006aa2:	d002      	beq.n	8006aaa <HAL_SPI_IRQHandler+0x9a>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8006aa4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006aa6:	69db      	ldr	r3, [r3, #28]
 8006aa8:	b123      	cbz	r3, 8006ab4 <HAL_SPI_IRQHandler+0xa4>
 8006aaa:	2f03      	cmp	r7, #3
 8006aac:	d011      	beq.n	8006ad2 <HAL_SPI_IRQHandler+0xc2>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8006aae:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	b973      	cbnz	r3, 8006ad2 <HAL_SPI_IRQHandler+0xc2>
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8006abc:	d021      	beq.n	8006b02 <HAL_SPI_IRQHandler+0xf2>
      SPI_CloseTransfer(hspi);
 8006abe:	4620      	mov	r0, r4
 8006ac0:	f7ff fd08 	bl	80064d4 <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006aca:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d130      	bne.n	8006b34 <HAL_SPI_IRQHandler+0x124>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006ad2:	2f05      	cmp	r7, #5
 8006ad4:	d032      	beq.n	8006b3c <HAL_SPI_IRQHandler+0x12c>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8006ad6:	2f04      	cmp	r7, #4
 8006ad8:	d034      	beq.n	8006b44 <HAL_SPI_IRQHandler+0x134>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8006ada:	2f03      	cmp	r7, #3
 8006adc:	d1c0      	bne.n	8006a60 <HAL_SPI_IRQHandler+0x50>
      HAL_SPI_TxCpltCallback(hspi);
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f7ff ff46 	bl	8006970 <HAL_SPI_TxCpltCallback>
 8006ae4:	e7bc      	b.n	8006a60 <HAL_SPI_IRQHandler+0x50>
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ae6:	2b07      	cmp	r3, #7
 8006ae8:	d91b      	bls.n	8006b22 <HAL_SPI_IRQHandler+0x112>
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006aea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006aec:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 8006aee:	801a      	strh	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8006af0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006af2:	3302      	adds	r3, #2
 8006af4:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8006af6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006afa:	3b01      	subs	r3, #1
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8006b02:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d0d8      	beq.n	8006abe <HAL_SPI_IRQHandler+0xae>
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006b0c:	68e3      	ldr	r3, [r4, #12]
 8006b0e:	2b0f      	cmp	r3, #15
 8006b10:	d9e9      	bls.n	8006ae6 <HAL_SPI_IRQHandler+0xd6>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006b12:	6822      	ldr	r2, [r4, #0]
 8006b14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b16:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006b18:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8006b1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	6663      	str	r3, [r4, #100]	; 0x64
 8006b20:	e7e9      	b.n	8006af6 <HAL_SPI_IRQHandler+0xe6>
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006b22:	6822      	ldr	r2, [r4, #0]
 8006b24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b26:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8006b2a:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b2e:	3301      	adds	r3, #1
 8006b30:	6663      	str	r3, [r4, #100]	; 0x64
 8006b32:	e7e0      	b.n	8006af6 <HAL_SPI_IRQHandler+0xe6>
        HAL_SPI_ErrorCallback(hspi);
 8006b34:	4620      	mov	r0, r4
 8006b36:	f7ff ff54 	bl	80069e2 <HAL_SPI_ErrorCallback>
        return;
 8006b3a:	e791      	b.n	8006a60 <HAL_SPI_IRQHandler+0x50>
      HAL_SPI_TxRxCpltCallback(hspi);
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f7ff ff2e 	bl	800699e <HAL_SPI_TxRxCpltCallback>
 8006b42:	e78d      	b.n	8006a60 <HAL_SPI_IRQHandler+0x50>
      HAL_SPI_RxCpltCallback(hspi);
 8006b44:	4620      	mov	r0, r4
 8006b46:	f7ff ff14 	bl	8006972 <HAL_SPI_RxCpltCallback>
 8006b4a:	e789      	b.n	8006a60 <HAL_SPI_IRQHandler+0x50>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006b4c:	f418 6f00 	tst.w	r8, #2048	; 0x800
 8006b50:	d002      	beq.n	8006b58 <HAL_SPI_IRQHandler+0x148>
 8006b52:	f019 0f08 	tst.w	r9, #8
 8006b56:	d174      	bne.n	8006c42 <HAL_SPI_IRQHandler+0x232>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8006b58:	f415 7f58 	tst.w	r5, #864	; 0x360
 8006b5c:	d080      	beq.n	8006a60 <HAL_SPI_IRQHandler+0x50>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8006b5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006b62:	d00a      	beq.n	8006b7a <HAL_SPI_IRQHandler+0x16a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006b64:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006b68:	f043 0304 	orr.w	r3, r3, #4
 8006b6c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b70:	6822      	ldr	r2, [r4, #0]
 8006b72:	6993      	ldr	r3, [r2, #24]
 8006b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b78:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8006b7a:	f415 7f00 	tst.w	r5, #512	; 0x200
 8006b7e:	d00a      	beq.n	8006b96 <HAL_SPI_IRQHandler+0x186>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006b80:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006b84:	f043 0301 	orr.w	r3, r3, #1
 8006b88:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006b8c:	6822      	ldr	r2, [r4, #0]
 8006b8e:	6993      	ldr	r3, [r2, #24]
 8006b90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b94:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8006b96:	f415 7f80 	tst.w	r5, #256	; 0x100
 8006b9a:	d00a      	beq.n	8006bb2 <HAL_SPI_IRQHandler+0x1a2>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006b9c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006ba0:	f043 0308 	orr.w	r3, r3, #8
 8006ba4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006ba8:	6822      	ldr	r2, [r4, #0]
 8006baa:	6993      	ldr	r3, [r2, #24]
 8006bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bb0:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8006bb2:	f015 0f20 	tst.w	r5, #32
 8006bb6:	d00a      	beq.n	8006bce <HAL_SPI_IRQHandler+0x1be>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006bb8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bc0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006bc4:	6822      	ldr	r2, [r4, #0]
 8006bc6:	6993      	ldr	r3, [r2, #24]
 8006bc8:	f043 0320 	orr.w	r3, r3, #32
 8006bcc:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bce:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f43f af44 	beq.w	8006a60 <HAL_SPI_IRQHandler+0x50>
      __HAL_SPI_DISABLE(hspi);
 8006bd8:	6822      	ldr	r2, [r4, #0]
 8006bda:	6813      	ldr	r3, [r2, #0]
 8006bdc:	f023 0301 	bic.w	r3, r3, #1
 8006be0:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8006be2:	6822      	ldr	r2, [r4, #0]
 8006be4:	6911      	ldr	r1, [r2, #16]
 8006be6:	4b1d      	ldr	r3, [pc, #116]	; (8006c5c <HAL_SPI_IRQHandler+0x24c>)
 8006be8:	400b      	ands	r3, r1
 8006bea:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006bec:	f40a 4a40 	and.w	sl, sl, #49152	; 0xc000
 8006bf0:	f5ba 4f40 	cmp.w	sl, #49152	; 0xc000
 8006bf4:	d12b      	bne.n	8006c4e <HAL_SPI_IRQHandler+0x23e>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006bf6:	6822      	ldr	r2, [r4, #0]
 8006bf8:	6893      	ldr	r3, [r2, #8]
 8006bfa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006bfe:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 8006c00:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006c02:	b15b      	cbz	r3, 8006c1c <HAL_SPI_IRQHandler+0x20c>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c04:	4a16      	ldr	r2, [pc, #88]	; (8006c60 <HAL_SPI_IRQHandler+0x250>)
 8006c06:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006c08:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006c0a:	f7fb f827 	bl	8001c5c <HAL_DMA_Abort_IT>
 8006c0e:	b128      	cbz	r0, 8006c1c <HAL_SPI_IRQHandler+0x20c>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c10:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c18:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 8006c1c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f43f af1e 	beq.w	8006a60 <HAL_SPI_IRQHandler+0x50>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c24:	4a0e      	ldr	r2, [pc, #56]	; (8006c60 <HAL_SPI_IRQHandler+0x250>)
 8006c26:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006c28:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006c2a:	f7fb f817 	bl	8001c5c <HAL_DMA_Abort_IT>
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	f43f af16 	beq.w	8006a60 <HAL_SPI_IRQHandler+0x50>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c34:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c3c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8006c40:	e70e      	b.n	8006a60 <HAL_SPI_IRQHandler+0x50>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006c42:	6822      	ldr	r2, [r4, #0]
 8006c44:	6993      	ldr	r3, [r2, #24]
 8006c46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006c4a:	6193      	str	r3, [r2, #24]
    return;
 8006c4c:	e708      	b.n	8006a60 <HAL_SPI_IRQHandler+0x50>
        hspi->State = HAL_SPI_STATE_READY;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8006c54:	4620      	mov	r0, r4
 8006c56:	f7ff fec4 	bl	80069e2 <HAL_SPI_ErrorCallback>
 8006c5a:	e701      	b.n	8006a60 <HAL_SPI_IRQHandler+0x50>
 8006c5c:	fffffc94 	.word	0xfffffc94
 8006c60:	08006c65 	.word	0x08006c65

08006c64 <SPI_DMAAbortOnError>:
{
 8006c64:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c66:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006c6e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 8006c72:	2301      	movs	r3, #1
 8006c74:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 8006c78:	f7ff feb3 	bl	80069e2 <HAL_SPI_ErrorCallback>
}
 8006c7c:	bd08      	pop	{r3, pc}
	...

08006c80 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006c80:	b410      	push	{r4}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006c82:	680b      	ldr	r3, [r1, #0]
 8006c84:	b1eb      	cbz	r3, 8006cc2 <FMC_SDRAM_Init+0x42>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006c86:	6803      	ldr	r3, [r0, #0]
 8006c88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c8c:	69ca      	ldr	r2, [r1, #28]
 8006c8e:	6a0c      	ldr	r4, [r1, #32]
 8006c90:	4322      	orrs	r2, r4
 8006c92:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8006c94:	4322      	orrs	r2, r4
 8006c96:	4313      	orrs	r3, r2
 8006c98:	6003      	str	r3, [r0, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006c9a:	6843      	ldr	r3, [r0, #4]
 8006c9c:	4a14      	ldr	r2, [pc, #80]	; (8006cf0 <FMC_SDRAM_Init+0x70>)
 8006c9e:	401a      	ands	r2, r3
 8006ca0:	684b      	ldr	r3, [r1, #4]
 8006ca2:	688c      	ldr	r4, [r1, #8]
 8006ca4:	4323      	orrs	r3, r4
 8006ca6:	68cc      	ldr	r4, [r1, #12]
 8006ca8:	4323      	orrs	r3, r4
 8006caa:	690c      	ldr	r4, [r1, #16]
 8006cac:	4323      	orrs	r3, r4
 8006cae:	694c      	ldr	r4, [r1, #20]
 8006cb0:	4323      	orrs	r3, r4
 8006cb2:	6989      	ldr	r1, [r1, #24]
 8006cb4:	430b      	orrs	r3, r1
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	6043      	str	r3, [r0, #4]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8006cba:	2000      	movs	r0, #0
 8006cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cc0:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006cc2:	6803      	ldr	r3, [r0, #0]
 8006cc4:	4a0a      	ldr	r2, [pc, #40]	; (8006cf0 <FMC_SDRAM_Init+0x70>)
 8006cc6:	401a      	ands	r2, r3
 8006cc8:	684b      	ldr	r3, [r1, #4]
 8006cca:	688c      	ldr	r4, [r1, #8]
 8006ccc:	4323      	orrs	r3, r4
 8006cce:	68cc      	ldr	r4, [r1, #12]
 8006cd0:	4323      	orrs	r3, r4
 8006cd2:	690c      	ldr	r4, [r1, #16]
 8006cd4:	4323      	orrs	r3, r4
 8006cd6:	694c      	ldr	r4, [r1, #20]
 8006cd8:	4323      	orrs	r3, r4
 8006cda:	698c      	ldr	r4, [r1, #24]
 8006cdc:	4323      	orrs	r3, r4
 8006cde:	69cc      	ldr	r4, [r1, #28]
 8006ce0:	4323      	orrs	r3, r4
 8006ce2:	6a0c      	ldr	r4, [r1, #32]
 8006ce4:	4323      	orrs	r3, r4
 8006ce6:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8006ce8:	430b      	orrs	r3, r1
 8006cea:	4313      	orrs	r3, r2
 8006cec:	6003      	str	r3, [r0, #0]
 8006cee:	e7e4      	b.n	8006cba <FMC_SDRAM_Init+0x3a>
 8006cf0:	ffff8000 	.word	0xffff8000

08006cf4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006cf4:	b410      	push	{r4}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006cf6:	b332      	cbz	r2, 8006d46 <FMC_SDRAM_Timing_Init+0x52>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006cf8:	6883      	ldr	r3, [r0, #8]
 8006cfa:	4a23      	ldr	r2, [pc, #140]	; (8006d88 <FMC_SDRAM_Timing_Init+0x94>)
 8006cfc:	401a      	ands	r2, r3
 8006cfe:	68cb      	ldr	r3, [r1, #12]
 8006d00:	1e5c      	subs	r4, r3, #1
 8006d02:	694b      	ldr	r3, [r1, #20]
 8006d04:	3b01      	subs	r3, #1
 8006d06:	051b      	lsls	r3, r3, #20
 8006d08:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	6083      	str	r3, [r0, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006d10:	68c2      	ldr	r2, [r0, #12]
 8006d12:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8006d16:	680b      	ldr	r3, [r1, #0]
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	684c      	ldr	r4, [r1, #4]
 8006d1c:	3c01      	subs	r4, #1
 8006d1e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8006d22:	688c      	ldr	r4, [r1, #8]
 8006d24:	3c01      	subs	r4, #1
 8006d26:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8006d2a:	690c      	ldr	r4, [r1, #16]
 8006d2c:	3c01      	subs	r4, #1
 8006d2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006d32:	6989      	ldr	r1, [r1, #24]
 8006d34:	3901      	subs	r1, #1
 8006d36:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	60c3      	str	r3, [r0, #12]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 8006d3e:	2000      	movs	r0, #0
 8006d40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d44:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006d46:	6882      	ldr	r2, [r0, #8]
 8006d48:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8006d4c:	680b      	ldr	r3, [r1, #0]
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	684c      	ldr	r4, [r1, #4]
 8006d52:	3c01      	subs	r4, #1
 8006d54:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8006d58:	688c      	ldr	r4, [r1, #8]
 8006d5a:	3c01      	subs	r4, #1
 8006d5c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8006d60:	68cc      	ldr	r4, [r1, #12]
 8006d62:	3c01      	subs	r4, #1
 8006d64:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 8006d68:	690c      	ldr	r4, [r1, #16]
 8006d6a:	3c01      	subs	r4, #1
 8006d6c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006d70:	694c      	ldr	r4, [r1, #20]
 8006d72:	3c01      	subs	r4, #1
 8006d74:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8006d78:	6989      	ldr	r1, [r1, #24]
 8006d7a:	3901      	subs	r1, #1
 8006d7c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006d80:	4313      	orrs	r3, r2
 8006d82:	6083      	str	r3, [r0, #8]
 8006d84:	e7db      	b.n	8006d3e <FMC_SDRAM_Timing_Init+0x4a>
 8006d86:	bf00      	nop
 8006d88:	ff0f0fff 	.word	0xff0f0fff

08006d8c <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006d8c:	4b0b      	ldr	r3, [pc, #44]	; (8006dbc <SDMMC_GetCmdError+0x30>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a0b      	ldr	r2, [pc, #44]	; (8006dc0 <SDMMC_GetCmdError+0x34>)
 8006d92:	fba2 2303 	umull	r2, r3, r2, r3
 8006d96:	0a5a      	lsrs	r2, r3, #9
 8006d98:	f241 3388 	movw	r3, #5000	; 0x1388
 8006d9c:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 8006da0:	1e5a      	subs	r2, r3, #1
 8006da2:	b143      	cbz	r3, 8006db6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006da4:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 8006da6:	4613      	mov	r3, r2
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006da8:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006dac:	d0f8      	beq.n	8006da0 <SDMMC_GetCmdError+0x14>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006dae:	4b05      	ldr	r3, [pc, #20]	; (8006dc4 <SDMMC_GetCmdError+0x38>)
 8006db0:	6383      	str	r3, [r0, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8006db2:	2000      	movs	r0, #0
 8006db4:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8006db6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006dba:	4770      	bx	lr
 8006dbc:	20000288 	.word	0x20000288
 8006dc0:	10624dd3 	.word	0x10624dd3
 8006dc4:	002000c5 	.word	0x002000c5

08006dc8 <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006dc8:	4b15      	ldr	r3, [pc, #84]	; (8006e20 <SDMMC_GetCmdResp2+0x58>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a15      	ldr	r2, [pc, #84]	; (8006e24 <SDMMC_GetCmdResp2+0x5c>)
 8006dce:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd2:	0a5a      	lsrs	r2, r3, #9
 8006dd4:	f241 3388 	movw	r3, #5000	; 0x1388
 8006dd8:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 8006ddc:	1e5a      	subs	r2, r3, #1
 8006dde:	b1db      	cbz	r3, 8006e18 <SDMMC_GetCmdResp2+0x50>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8006de0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006de2:	4613      	mov	r3, r2
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006de4:	f011 0f45 	tst.w	r1, #69	; 0x45
 8006de8:	d0f8      	beq.n	8006ddc <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006dea:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 8006dee:	d1f5      	bne.n	8006ddc <SDMMC_GetCmdResp2+0x14>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006df0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006df2:	f013 0f04 	tst.w	r3, #4
 8006df6:	d107      	bne.n	8006e08 <SDMMC_GetCmdResp2+0x40>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006df8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006dfa:	f013 0f01 	tst.w	r3, #1
 8006dfe:	d107      	bne.n	8006e10 <SDMMC_GetCmdResp2+0x48>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006e00:	4b09      	ldr	r3, [pc, #36]	; (8006e28 <SDMMC_GetCmdResp2+0x60>)
 8006e02:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006e04:	2000      	movs	r0, #0
 8006e06:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006e08:	2304      	movs	r3, #4
 8006e0a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006e10:	2301      	movs	r3, #1
 8006e12:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006e14:	4618      	mov	r0, r3
 8006e16:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8006e18:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	20000288 	.word	0x20000288
 8006e24:	10624dd3 	.word	0x10624dd3
 8006e28:	002000c5 	.word	0x002000c5

08006e2c <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e2c:	4b11      	ldr	r3, [pc, #68]	; (8006e74 <SDMMC_GetCmdResp3+0x48>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a11      	ldr	r2, [pc, #68]	; (8006e78 <SDMMC_GetCmdResp3+0x4c>)
 8006e32:	fba2 2303 	umull	r2, r3, r2, r3
 8006e36:	0a5a      	lsrs	r2, r3, #9
 8006e38:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e3c:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 8006e40:	1e5a      	subs	r2, r3, #1
 8006e42:	b19b      	cbz	r3, 8006e6c <SDMMC_GetCmdResp3+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8006e44:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006e46:	4613      	mov	r3, r2
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006e48:	f011 0f45 	tst.w	r1, #69	; 0x45
 8006e4c:	d0f8      	beq.n	8006e40 <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006e4e:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 8006e52:	d1f5      	bne.n	8006e40 <SDMMC_GetCmdResp3+0x14>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006e54:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006e56:	f013 0f04 	tst.w	r3, #4
 8006e5a:	d103      	bne.n	8006e64 <SDMMC_GetCmdResp3+0x38>
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006e5c:	4b07      	ldr	r3, [pc, #28]	; (8006e7c <SDMMC_GetCmdResp3+0x50>)
 8006e5e:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006e60:	2000      	movs	r0, #0
 8006e62:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006e64:	2304      	movs	r3, #4
 8006e66:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006e68:	4618      	mov	r0, r3
 8006e6a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8006e6c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	20000288 	.word	0x20000288
 8006e78:	10624dd3 	.word	0x10624dd3
 8006e7c:	002000c5 	.word	0x002000c5

08006e80 <SDMMC_GetCmdResp7>:
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e80:	4b18      	ldr	r3, [pc, #96]	; (8006ee4 <SDMMC_GetCmdResp7+0x64>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a18      	ldr	r2, [pc, #96]	; (8006ee8 <SDMMC_GetCmdResp7+0x68>)
 8006e86:	fba2 2303 	umull	r2, r3, r2, r3
 8006e8a:	0a5a      	lsrs	r2, r3, #9
 8006e8c:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e90:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 8006e94:	1e5a      	subs	r2, r3, #1
 8006e96:	b1fb      	cbz	r3, 8006ed8 <SDMMC_GetCmdResp7+0x58>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8006e98:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006e9a:	4613      	mov	r3, r2
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006e9c:	f011 0f45 	tst.w	r1, #69	; 0x45
 8006ea0:	d0f8      	beq.n	8006e94 <SDMMC_GetCmdResp7+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006ea2:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 8006ea6:	d1f5      	bne.n	8006e94 <SDMMC_GetCmdResp7+0x14>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006ea8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006eaa:	f013 0f04 	tst.w	r3, #4
 8006eae:	d10b      	bne.n	8006ec8 <SDMMC_GetCmdResp7+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006eb0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006eb2:	f013 0f01 	tst.w	r3, #1
 8006eb6:	d10b      	bne.n	8006ed0 <SDMMC_GetCmdResp7+0x50>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006eb8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006eba:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006ebe:	d00e      	beq.n	8006ede <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006ec0:	2340      	movs	r3, #64	; 0x40
 8006ec2:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006ec8:	2304      	movs	r3, #4
 8006eca:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006ecc:	4618      	mov	r0, r3
 8006ece:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8006ed8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8006edc:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 8006ede:	2000      	movs	r0, #0

}
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	20000288 	.word	0x20000288
 8006ee8:	10624dd3 	.word	0x10624dd3

08006eec <SDMMC_Init>:
{
 8006eec:	b084      	sub	sp, #16
 8006eee:	b410      	push	{r4}
 8006ef0:	ac02      	add	r4, sp, #8
 8006ef2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	9a03      	ldr	r2, [sp, #12]
 8006efa:	4313      	orrs	r3, r2
             Init.BusWide             |\
 8006efc:	9a04      	ldr	r2, [sp, #16]
             Init.ClockPowerSave      |\
 8006efe:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 8006f00:	9a05      	ldr	r2, [sp, #20]
             Init.BusWide             |\
 8006f02:	4313      	orrs	r3, r2
             Init.ClockDiv
 8006f04:	9a06      	ldr	r2, [sp, #24]
             Init.HardwareFlowControl |\
 8006f06:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8006f08:	6841      	ldr	r1, [r0, #4]
 8006f0a:	4a04      	ldr	r2, [pc, #16]	; (8006f1c <SDMMC_Init+0x30>)
 8006f0c:	400a      	ands	r2, r1
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	6043      	str	r3, [r0, #4]
}
 8006f12:	2000      	movs	r0, #0
 8006f14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f18:	b004      	add	sp, #16
 8006f1a:	4770      	bx	lr
 8006f1c:	ffc02c00 	.word	0xffc02c00

08006f20 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 8006f20:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8006f24:	4770      	bx	lr

08006f26 <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 8006f26:	680b      	ldr	r3, [r1, #0]
 8006f28:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	4770      	bx	lr

08006f30 <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8006f30:	6803      	ldr	r3, [r0, #0]
 8006f32:	f043 0303 	orr.w	r3, r3, #3
 8006f36:	6003      	str	r3, [r0, #0]
}
 8006f38:	2000      	movs	r0, #0
 8006f3a:	4770      	bx	lr

08006f3c <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006f3c:	6800      	ldr	r0, [r0, #0]
}
 8006f3e:	f000 0003 	and.w	r0, r0, #3
 8006f42:	4770      	bx	lr

08006f44 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 8006f44:	680b      	ldr	r3, [r1, #0]
 8006f46:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006f48:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 8006f4a:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006f4c:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 8006f4e:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 8006f50:	4313      	orrs	r3, r2
                       Command->CPSM);
 8006f52:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 8006f54:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006f56:	68c1      	ldr	r1, [r0, #12]
 8006f58:	4a02      	ldr	r2, [pc, #8]	; (8006f64 <SDMMC_SendCommand+0x20>)
 8006f5a:	400a      	ands	r2, r1
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	60c3      	str	r3, [r0, #12]
}
 8006f60:	2000      	movs	r0, #0
 8006f62:	4770      	bx	lr
 8006f64:	fffee0c0 	.word	0xfffee0c0

08006f68 <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 8006f68:	6900      	ldr	r0, [r0, #16]
}
 8006f6a:	b2c0      	uxtb	r0, r0
 8006f6c:	4770      	bx	lr

08006f6e <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8006f6e:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8006f70:	5840      	ldr	r0, [r0, r1]
}
 8006f72:	4770      	bx	lr

08006f74 <SDMMC_GetCmdResp1>:
{
 8006f74:	b538      	push	{r3, r4, r5, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006f76:	4b53      	ldr	r3, [pc, #332]	; (80070c4 <SDMMC_GetCmdResp1+0x150>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4c53      	ldr	r4, [pc, #332]	; (80070c8 <SDMMC_GetCmdResp1+0x154>)
 8006f7c:	fba4 4303 	umull	r4, r3, r4, r3
 8006f80:	0a5b      	lsrs	r3, r3, #9
 8006f82:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 8006f86:	1e54      	subs	r4, r2, #1
 8006f88:	2a00      	cmp	r2, #0
 8006f8a:	d061      	beq.n	8007050 <SDMMC_GetCmdResp1+0xdc>
    sta_reg = SDMMCx->STA;
 8006f8c:	6b45      	ldr	r5, [r0, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006f8e:	4b4f      	ldr	r3, [pc, #316]	; (80070cc <SDMMC_GetCmdResp1+0x158>)
 8006f90:	402b      	ands	r3, r5
 8006f92:	4622      	mov	r2, r4
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d0f6      	beq.n	8006f86 <SDMMC_GetCmdResp1+0x12>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006f98:	f415 5f00 	tst.w	r5, #8192	; 0x2000
 8006f9c:	d1f3      	bne.n	8006f86 <SDMMC_GetCmdResp1+0x12>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006f9e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006fa0:	f013 0f04 	tst.w	r3, #4
 8006fa4:	d107      	bne.n	8006fb6 <SDMMC_GetCmdResp1+0x42>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006fa6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006fa8:	f013 0f01 	tst.w	r3, #1
 8006fac:	d007      	beq.n	8006fbe <SDMMC_GetCmdResp1+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006fae:	2301      	movs	r3, #1
 8006fb0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	e04e      	b.n	8007054 <SDMMC_GetCmdResp1+0xe0>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006fb6:	2304      	movs	r3, #4
 8006fb8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006fba:	4618      	mov	r0, r3
 8006fbc:	e04a      	b.n	8007054 <SDMMC_GetCmdResp1+0xe0>
 8006fbe:	460d      	mov	r5, r1
 8006fc0:	4604      	mov	r4, r0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006fc2:	4b43      	ldr	r3, [pc, #268]	; (80070d0 <SDMMC_GetCmdResp1+0x15c>)
 8006fc4:	6383      	str	r3, [r0, #56]	; 0x38
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006fc6:	f7ff ffcf 	bl	8006f68 <SDMMC_GetCommandResponse>
 8006fca:	42a8      	cmp	r0, r5
 8006fcc:	d001      	beq.n	8006fd2 <SDMMC_GetCmdResp1+0x5e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006fce:	2001      	movs	r0, #1
 8006fd0:	e040      	b.n	8007054 <SDMMC_GetCmdResp1+0xe0>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	f7ff ffca 	bl	8006f6e <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006fda:	4b3e      	ldr	r3, [pc, #248]	; (80070d4 <SDMMC_GetCmdResp1+0x160>)
 8006fdc:	4003      	ands	r3, r0
 8006fde:	b3d3      	cbz	r3, 8007056 <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	db3a      	blt.n	800705a <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006fe4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006fe8:	d13a      	bne.n	8007060 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006fea:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8006fee:	d139      	bne.n	8007064 <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006ff0:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 8006ff4:	d138      	bne.n	8007068 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006ff6:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8006ffa:	d138      	bne.n	800706e <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006ffc:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8007000:	d138      	bne.n	8007074 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007002:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8007006:	d138      	bne.n	800707a <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007008:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800700c:	d138      	bne.n	8007080 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800700e:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8007012:	d138      	bne.n	8007086 <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007014:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8007018:	d138      	bne.n	800708c <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800701a:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800701e:	d138      	bne.n	8007092 <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007020:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8007024:	d138      	bne.n	8007098 <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007026:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 800702a:	d138      	bne.n	800709e <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800702c:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 8007030:	d138      	bne.n	80070a4 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007032:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8007036:	d138      	bne.n	80070aa <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007038:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 800703c:	d138      	bne.n	80070b0 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800703e:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8007042:	d138      	bne.n	80070b6 <SDMMC_GetCmdResp1+0x142>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007044:	f010 0f08 	tst.w	r0, #8
 8007048:	d038      	beq.n	80070bc <SDMMC_GetCmdResp1+0x148>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800704a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800704e:	e001      	b.n	8007054 <SDMMC_GetCmdResp1+0xe0>
      return SDMMC_ERROR_TIMEOUT;
 8007050:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007054:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_NONE;
 8007056:	2000      	movs	r0, #0
 8007058:	e7fc      	b.n	8007054 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800705a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800705e:	e7f9      	b.n	8007054 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007060:	2040      	movs	r0, #64	; 0x40
 8007062:	e7f7      	b.n	8007054 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007064:	2080      	movs	r0, #128	; 0x80
 8007066:	e7f5      	b.n	8007054 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007068:	f44f 7080 	mov.w	r0, #256	; 0x100
 800706c:	e7f2      	b.n	8007054 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800706e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007072:	e7ef      	b.n	8007054 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007074:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007078:	e7ec      	b.n	8007054 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800707a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800707e:	e7e9      	b.n	8007054 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007080:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007084:	e7e6      	b.n	8007054 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007086:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800708a:	e7e3      	b.n	8007054 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800708c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007090:	e7e0      	b.n	8007054 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CC_ERR;
 8007092:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007096:	e7dd      	b.n	8007054 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007098:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800709c:	e7da      	b.n	8007054 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800709e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80070a2:	e7d7      	b.n	8007054 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80070a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80070a8:	e7d4      	b.n	8007054 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80070aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80070ae:	e7d1      	b.n	8007054 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80070b0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80070b4:	e7ce      	b.n	8007054 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_RESET;
 80070b6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80070ba:	e7cb      	b.n	8007054 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80070bc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80070c0:	e7c8      	b.n	8007054 <SDMMC_GetCmdResp1+0xe0>
 80070c2:	bf00      	nop
 80070c4:	20000288 	.word	0x20000288
 80070c8:	10624dd3 	.word	0x10624dd3
 80070cc:	00200045 	.word	0x00200045
 80070d0:	002000c5 	.word	0x002000c5
 80070d4:	fdffe008 	.word	0xfdffe008

080070d8 <SDMMC_GetCmdResp6>:
{
 80070d8:	b570      	push	{r4, r5, r6, lr}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80070da:	4b26      	ldr	r3, [pc, #152]	; (8007174 <SDMMC_GetCmdResp6+0x9c>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4c26      	ldr	r4, [pc, #152]	; (8007178 <SDMMC_GetCmdResp6+0xa0>)
 80070e0:	fba4 4303 	umull	r4, r3, r4, r3
 80070e4:	0a5c      	lsrs	r4, r3, #9
 80070e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80070ea:	fb03 f304 	mul.w	r3, r3, r4
    if (count-- == 0U)
 80070ee:	1e5c      	subs	r4, r3, #1
 80070f0:	b3b3      	cbz	r3, 8007160 <SDMMC_GetCmdResp6+0x88>
    sta_reg = SDMMCx->STA;
 80070f2:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80070f4:	4623      	mov	r3, r4
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80070f6:	f015 0f45 	tst.w	r5, #69	; 0x45
 80070fa:	d0f8      	beq.n	80070ee <SDMMC_GetCmdResp6+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80070fc:	f415 5f00 	tst.w	r5, #8192	; 0x2000
 8007100:	d1f5      	bne.n	80070ee <SDMMC_GetCmdResp6+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007102:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007104:	f013 0f04 	tst.w	r3, #4
 8007108:	d107      	bne.n	800711a <SDMMC_GetCmdResp6+0x42>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800710a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800710c:	f013 0f01 	tst.w	r3, #1
 8007110:	d007      	beq.n	8007122 <SDMMC_GetCmdResp6+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007112:	2301      	movs	r3, #1
 8007114:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007116:	4618      	mov	r0, r3
 8007118:	e024      	b.n	8007164 <SDMMC_GetCmdResp6+0x8c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800711a:	2304      	movs	r3, #4
 800711c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800711e:	4618      	mov	r0, r3
 8007120:	e020      	b.n	8007164 <SDMMC_GetCmdResp6+0x8c>
 8007122:	4616      	mov	r6, r2
 8007124:	460d      	mov	r5, r1
 8007126:	4604      	mov	r4, r0
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007128:	f7ff ff1e 	bl	8006f68 <SDMMC_GetCommandResponse>
 800712c:	42a8      	cmp	r0, r5
 800712e:	d001      	beq.n	8007134 <SDMMC_GetCmdResp6+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007130:	2001      	movs	r0, #1
 8007132:	e017      	b.n	8007164 <SDMMC_GetCmdResp6+0x8c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007134:	4b11      	ldr	r3, [pc, #68]	; (800717c <SDMMC_GetCmdResp6+0xa4>)
 8007136:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007138:	2100      	movs	r1, #0
 800713a:	4620      	mov	r0, r4
 800713c:	f7ff ff17 	bl	8006f6e <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007140:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8007144:	d008      	beq.n	8007158 <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007146:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 800714a:	d10c      	bne.n	8007166 <SDMMC_GetCmdResp6+0x8e>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800714c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8007150:	d00c      	beq.n	800716c <SDMMC_GetCmdResp6+0x94>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007152:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007156:	e005      	b.n	8007164 <SDMMC_GetCmdResp6+0x8c>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007158:	0c00      	lsrs	r0, r0, #16
 800715a:	8030      	strh	r0, [r6, #0]
    return SDMMC_ERROR_NONE;
 800715c:	2000      	movs	r0, #0
 800715e:	e001      	b.n	8007164 <SDMMC_GetCmdResp6+0x8c>
      return SDMMC_ERROR_TIMEOUT;
 8007160:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007164:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007166:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800716a:	e7fb      	b.n	8007164 <SDMMC_GetCmdResp6+0x8c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800716c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007170:	e7f8      	b.n	8007164 <SDMMC_GetCmdResp6+0x8c>
 8007172:	bf00      	nop
 8007174:	20000288 	.word	0x20000288
 8007178:	10624dd3 	.word	0x10624dd3
 800717c:	002000c5 	.word	0x002000c5

08007180 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007180:	680b      	ldr	r3, [r1, #0]
 8007182:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8007184:	684b      	ldr	r3, [r1, #4]
 8007186:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007188:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 800718a:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800718c:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 800718e:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 8007190:	4313      	orrs	r3, r2
                       Data->DPSM);
 8007192:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 8007194:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007196:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8007198:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800719c:	4313      	orrs	r3, r2
 800719e:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80071a0:	2000      	movs	r0, #0
 80071a2:	4770      	bx	lr

080071a4 <SDMMC_CmdBlockLength>:
{
 80071a4:	b530      	push	{r4, r5, lr}
 80071a6:	b087      	sub	sp, #28
 80071a8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80071aa:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80071ac:	2410      	movs	r4, #16
 80071ae:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071b4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80071b6:	2300      	movs	r3, #0
 80071b8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071be:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071c0:	a901      	add	r1, sp, #4
 80071c2:	f7ff febf 	bl	8006f44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80071c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80071ca:	4621      	mov	r1, r4
 80071cc:	4628      	mov	r0, r5
 80071ce:	f7ff fed1 	bl	8006f74 <SDMMC_GetCmdResp1>
}
 80071d2:	b007      	add	sp, #28
 80071d4:	bd30      	pop	{r4, r5, pc}

080071d6 <SDMMC_CmdReadSingleBlock>:
{
 80071d6:	b530      	push	{r4, r5, lr}
 80071d8:	b087      	sub	sp, #28
 80071da:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80071dc:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80071de:	2411      	movs	r4, #17
 80071e0:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071e6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80071e8:	2300      	movs	r3, #0
 80071ea:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071f0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071f2:	a901      	add	r1, sp, #4
 80071f4:	f7ff fea6 	bl	8006f44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80071f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80071fc:	4621      	mov	r1, r4
 80071fe:	4628      	mov	r0, r5
 8007200:	f7ff feb8 	bl	8006f74 <SDMMC_GetCmdResp1>
}
 8007204:	b007      	add	sp, #28
 8007206:	bd30      	pop	{r4, r5, pc}

08007208 <SDMMC_CmdReadMultiBlock>:
{
 8007208:	b530      	push	{r4, r5, lr}
 800720a:	b087      	sub	sp, #28
 800720c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800720e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007210:	2412      	movs	r4, #18
 8007212:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007214:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007218:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800721a:	2300      	movs	r3, #0
 800721c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800721e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007222:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007224:	a901      	add	r1, sp, #4
 8007226:	f7ff fe8d 	bl	8006f44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800722a:	f241 3288 	movw	r2, #5000	; 0x1388
 800722e:	4621      	mov	r1, r4
 8007230:	4628      	mov	r0, r5
 8007232:	f7ff fe9f 	bl	8006f74 <SDMMC_GetCmdResp1>
}
 8007236:	b007      	add	sp, #28
 8007238:	bd30      	pop	{r4, r5, pc}

0800723a <SDMMC_CmdWriteSingleBlock>:
{
 800723a:	b530      	push	{r4, r5, lr}
 800723c:	b087      	sub	sp, #28
 800723e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007240:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007242:	2418      	movs	r4, #24
 8007244:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007246:	f44f 7380 	mov.w	r3, #256	; 0x100
 800724a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800724c:	2300      	movs	r3, #0
 800724e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007254:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007256:	a901      	add	r1, sp, #4
 8007258:	f7ff fe74 	bl	8006f44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800725c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007260:	4621      	mov	r1, r4
 8007262:	4628      	mov	r0, r5
 8007264:	f7ff fe86 	bl	8006f74 <SDMMC_GetCmdResp1>
}
 8007268:	b007      	add	sp, #28
 800726a:	bd30      	pop	{r4, r5, pc}

0800726c <SDMMC_CmdWriteMultiBlock>:
{
 800726c:	b530      	push	{r4, r5, lr}
 800726e:	b087      	sub	sp, #28
 8007270:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007272:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007274:	2419      	movs	r4, #25
 8007276:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007278:	f44f 7380 	mov.w	r3, #256	; 0x100
 800727c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800727e:	2300      	movs	r3, #0
 8007280:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007286:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007288:	a901      	add	r1, sp, #4
 800728a:	f7ff fe5b 	bl	8006f44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800728e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007292:	4621      	mov	r1, r4
 8007294:	4628      	mov	r0, r5
 8007296:	f7ff fe6d 	bl	8006f74 <SDMMC_GetCmdResp1>
}
 800729a:	b007      	add	sp, #28
 800729c:	bd30      	pop	{r4, r5, pc}
	...

080072a0 <SDMMC_CmdStopTransfer>:
{
 80072a0:	b530      	push	{r4, r5, lr}
 80072a2:	b087      	sub	sp, #28
 80072a4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80072aa:	250c      	movs	r5, #12
 80072ac:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80072ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072b2:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072b4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072ba:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80072bc:	68c3      	ldr	r3, [r0, #12]
 80072be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072c2:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80072c4:	68c3      	ldr	r3, [r0, #12]
 80072c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ca:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072cc:	a901      	add	r1, sp, #4
 80072ce:	f7ff fe39 	bl	8006f44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80072d2:	4a08      	ldr	r2, [pc, #32]	; (80072f4 <SDMMC_CmdStopTransfer+0x54>)
 80072d4:	4629      	mov	r1, r5
 80072d6:	4620      	mov	r0, r4
 80072d8:	f7ff fe4c 	bl	8006f74 <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80072dc:	68e3      	ldr	r3, [r4, #12]
 80072de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072e2:	60e3      	str	r3, [r4, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80072e4:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 80072e8:	d001      	beq.n	80072ee <SDMMC_CmdStopTransfer+0x4e>
}
 80072ea:	b007      	add	sp, #28
 80072ec:	bd30      	pop	{r4, r5, pc}
    errorstate = SDMMC_ERROR_NONE;
 80072ee:	2000      	movs	r0, #0
  return errorstate;
 80072f0:	e7fb      	b.n	80072ea <SDMMC_CmdStopTransfer+0x4a>
 80072f2:	bf00      	nop
 80072f4:	05f5e100 	.word	0x05f5e100

080072f8 <SDMMC_CmdSelDesel>:
{
 80072f8:	b530      	push	{r4, r5, lr}
 80072fa:	b087      	sub	sp, #28
 80072fc:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80072fe:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007300:	2407      	movs	r4, #7
 8007302:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007304:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007308:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800730a:	2300      	movs	r3, #0
 800730c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800730e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007312:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007314:	a901      	add	r1, sp, #4
 8007316:	f7ff fe15 	bl	8006f44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800731a:	f241 3288 	movw	r2, #5000	; 0x1388
 800731e:	4621      	mov	r1, r4
 8007320:	4628      	mov	r0, r5
 8007322:	f7ff fe27 	bl	8006f74 <SDMMC_GetCmdResp1>
}
 8007326:	b007      	add	sp, #28
 8007328:	bd30      	pop	{r4, r5, pc}

0800732a <SDMMC_CmdGoIdleState>:
{
 800732a:	b510      	push	{r4, lr}
 800732c:	b086      	sub	sp, #24
 800732e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8007330:	2300      	movs	r3, #0
 8007332:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007334:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007336:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007338:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800733a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800733e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007340:	a901      	add	r1, sp, #4
 8007342:	f7ff fdff 	bl	8006f44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007346:	4620      	mov	r0, r4
 8007348:	f7ff fd20 	bl	8006d8c <SDMMC_GetCmdError>
}
 800734c:	b006      	add	sp, #24
 800734e:	bd10      	pop	{r4, pc}

08007350 <SDMMC_CmdOperCond>:
{
 8007350:	b510      	push	{r4, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007356:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800735a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800735c:	2308      	movs	r3, #8
 800735e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007360:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007364:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007366:	2300      	movs	r3, #0
 8007368:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800736a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800736e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007370:	a901      	add	r1, sp, #4
 8007372:	f7ff fde7 	bl	8006f44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007376:	4620      	mov	r0, r4
 8007378:	f7ff fd82 	bl	8006e80 <SDMMC_GetCmdResp7>
}
 800737c:	b006      	add	sp, #24
 800737e:	bd10      	pop	{r4, pc}

08007380 <SDMMC_CmdAppCommand>:
{
 8007380:	b530      	push	{r4, r5, lr}
 8007382:	b087      	sub	sp, #28
 8007384:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007386:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007388:	2437      	movs	r4, #55	; 0x37
 800738a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800738c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007390:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007392:	2300      	movs	r3, #0
 8007394:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800739a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800739c:	a901      	add	r1, sp, #4
 800739e:	f7ff fdd1 	bl	8006f44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80073a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80073a6:	4621      	mov	r1, r4
 80073a8:	4628      	mov	r0, r5
 80073aa:	f7ff fde3 	bl	8006f74 <SDMMC_GetCmdResp1>
}
 80073ae:	b007      	add	sp, #28
 80073b0:	bd30      	pop	{r4, r5, pc}

080073b2 <SDMMC_CmdAppOperCommand>:
{
 80073b2:	b510      	push	{r4, lr}
 80073b4:	b086      	sub	sp, #24
 80073b6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80073b8:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80073ba:	2329      	movs	r3, #41	; 0x29
 80073bc:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073c2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073c4:	2300      	movs	r3, #0
 80073c6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073cc:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073ce:	a901      	add	r1, sp, #4
 80073d0:	f7ff fdb8 	bl	8006f44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80073d4:	4620      	mov	r0, r4
 80073d6:	f7ff fd29 	bl	8006e2c <SDMMC_GetCmdResp3>
}
 80073da:	b006      	add	sp, #24
 80073dc:	bd10      	pop	{r4, pc}

080073de <SDMMC_CmdBusWidth>:
{
 80073de:	b530      	push	{r4, r5, lr}
 80073e0:	b087      	sub	sp, #28
 80073e2:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80073e4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80073e6:	2406      	movs	r4, #6
 80073e8:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073ee:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073f0:	2300      	movs	r3, #0
 80073f2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073f8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073fa:	a901      	add	r1, sp, #4
 80073fc:	f7ff fda2 	bl	8006f44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007400:	f241 3288 	movw	r2, #5000	; 0x1388
 8007404:	4621      	mov	r1, r4
 8007406:	4628      	mov	r0, r5
 8007408:	f7ff fdb4 	bl	8006f74 <SDMMC_GetCmdResp1>
}
 800740c:	b007      	add	sp, #28
 800740e:	bd30      	pop	{r4, r5, pc}

08007410 <SDMMC_CmdSendSCR>:
{
 8007410:	b530      	push	{r4, r5, lr}
 8007412:	b087      	sub	sp, #28
 8007414:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8007416:	2300      	movs	r3, #0
 8007418:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800741a:	2433      	movs	r4, #51	; 0x33
 800741c:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800741e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007422:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007424:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800742a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800742c:	a901      	add	r1, sp, #4
 800742e:	f7ff fd89 	bl	8006f44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007432:	f241 3288 	movw	r2, #5000	; 0x1388
 8007436:	4621      	mov	r1, r4
 8007438:	4628      	mov	r0, r5
 800743a:	f7ff fd9b 	bl	8006f74 <SDMMC_GetCmdResp1>
}
 800743e:	b007      	add	sp, #28
 8007440:	bd30      	pop	{r4, r5, pc}

08007442 <SDMMC_CmdSendCID>:
{
 8007442:	b510      	push	{r4, lr}
 8007444:	b086      	sub	sp, #24
 8007446:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8007448:	2300      	movs	r3, #0
 800744a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800744c:	2202      	movs	r2, #2
 800744e:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007450:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007454:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007456:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800745c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800745e:	a901      	add	r1, sp, #4
 8007460:	f7ff fd70 	bl	8006f44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007464:	4620      	mov	r0, r4
 8007466:	f7ff fcaf 	bl	8006dc8 <SDMMC_GetCmdResp2>
}
 800746a:	b006      	add	sp, #24
 800746c:	bd10      	pop	{r4, pc}

0800746e <SDMMC_CmdSendCSD>:
{
 800746e:	b510      	push	{r4, lr}
 8007470:	b086      	sub	sp, #24
 8007472:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007474:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007476:	2309      	movs	r3, #9
 8007478:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800747a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800747e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007480:	2300      	movs	r3, #0
 8007482:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007488:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800748a:	a901      	add	r1, sp, #4
 800748c:	f7ff fd5a 	bl	8006f44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007490:	4620      	mov	r0, r4
 8007492:	f7ff fc99 	bl	8006dc8 <SDMMC_GetCmdResp2>
}
 8007496:	b006      	add	sp, #24
 8007498:	bd10      	pop	{r4, pc}

0800749a <SDMMC_CmdSetRelAdd>:
{
 800749a:	b570      	push	{r4, r5, r6, lr}
 800749c:	b086      	sub	sp, #24
 800749e:	4605      	mov	r5, r0
 80074a0:	460e      	mov	r6, r1
  sdmmc_cmdinit.Argument         = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80074a6:	2403      	movs	r4, #3
 80074a8:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074ae:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074b0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074b6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074b8:	a901      	add	r1, sp, #4
 80074ba:	f7ff fd43 	bl	8006f44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80074be:	4632      	mov	r2, r6
 80074c0:	4621      	mov	r1, r4
 80074c2:	4628      	mov	r0, r5
 80074c4:	f7ff fe08 	bl	80070d8 <SDMMC_GetCmdResp6>
}
 80074c8:	b006      	add	sp, #24
 80074ca:	bd70      	pop	{r4, r5, r6, pc}

080074cc <SDMMC_CmdSendStatus>:
{
 80074cc:	b530      	push	{r4, r5, lr}
 80074ce:	b087      	sub	sp, #28
 80074d0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 80074d2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80074d4:	240d      	movs	r4, #13
 80074d6:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074dc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074de:	2300      	movs	r3, #0
 80074e0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074e6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074e8:	a901      	add	r1, sp, #4
 80074ea:	f7ff fd2b 	bl	8006f44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80074ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80074f2:	4621      	mov	r1, r4
 80074f4:	4628      	mov	r0, r5
 80074f6:	f7ff fd3d 	bl	8006f74 <SDMMC_GetCmdResp1>
}
 80074fa:	b007      	add	sp, #28
 80074fc:	bd30      	pop	{r4, r5, pc}

080074fe <SDMMC_CmdStatusRegister>:
{
 80074fe:	b530      	push	{r4, r5, lr}
 8007500:	b087      	sub	sp, #28
 8007502:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8007504:	2300      	movs	r3, #0
 8007506:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8007508:	240d      	movs	r4, #13
 800750a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800750c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007510:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007512:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007518:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800751a:	a901      	add	r1, sp, #4
 800751c:	f7ff fd12 	bl	8006f44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8007520:	f241 3288 	movw	r2, #5000	; 0x1388
 8007524:	4621      	mov	r1, r4
 8007526:	4628      	mov	r0, r5
 8007528:	f7ff fd24 	bl	8006f74 <SDMMC_GetCmdResp1>
}
 800752c:	b007      	add	sp, #28
 800752e:	bd30      	pop	{r4, r5, pc}

08007530 <SDMMC_CmdVoltageSwitch>:
{
 8007530:	b530      	push	{r4, r5, lr}
 8007532:	b087      	sub	sp, #28
 8007534:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0x00000000;
 8007536:	2300      	movs	r3, #0
 8007538:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800753a:	240b      	movs	r4, #11
 800753c:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800753e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007542:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007544:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007546:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800754a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800754c:	a901      	add	r1, sp, #4
 800754e:	f7ff fcf9 	bl	8006f44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8007552:	f241 3288 	movw	r2, #5000	; 0x1388
 8007556:	4621      	mov	r1, r4
 8007558:	4628      	mov	r0, r5
 800755a:	f7ff fd0b 	bl	8006f74 <SDMMC_GetCmdResp1>
}
 800755e:	b007      	add	sp, #28
 8007560:	bd30      	pop	{r4, r5, pc}
	...

08007564 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8007564:	4b10      	ldr	r3, [pc, #64]	; (80075a8 <FATFS_LinkDriverEx+0x44>)
 8007566:	7a5b      	ldrb	r3, [r3, #9]
 8007568:	b9db      	cbnz	r3, 80075a2 <FATFS_LinkDriverEx+0x3e>
{
 800756a:	b430      	push	{r4, r5}
  {
    disk.is_initialized[disk.nbr] = 0;
 800756c:	4b0e      	ldr	r3, [pc, #56]	; (80075a8 <FATFS_LinkDriverEx+0x44>)
 800756e:	7a5d      	ldrb	r5, [r3, #9]
 8007570:	b2ed      	uxtb	r5, r5
 8007572:	2400      	movs	r4, #0
 8007574:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8007576:	7a5d      	ldrb	r5, [r3, #9]
 8007578:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800757c:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 800757e:	7a58      	ldrb	r0, [r3, #9]
 8007580:	4418      	add	r0, r3
 8007582:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8007584:	7a5a      	ldrb	r2, [r3, #9]
 8007586:	b2d2      	uxtb	r2, r2
 8007588:	1c50      	adds	r0, r2, #1
 800758a:	b2c0      	uxtb	r0, r0
 800758c:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
 800758e:	3230      	adds	r2, #48	; 0x30
 8007590:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8007592:	233a      	movs	r3, #58	; 0x3a
 8007594:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8007596:	232f      	movs	r3, #47	; 0x2f
 8007598:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800759a:	70cc      	strb	r4, [r1, #3]
    ret = 0;
 800759c:	4620      	mov	r0, r4
  }

  return ret;
}
 800759e:	bc30      	pop	{r4, r5}
 80075a0:	4770      	bx	lr
  uint8_t ret = 1;
 80075a2:	2001      	movs	r0, #1
}
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	200002ac 	.word	0x200002ac

080075ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80075ac:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 80075ae:	2200      	movs	r2, #0
 80075b0:	f7ff ffd8 	bl	8007564 <FATFS_LinkDriverEx>
}
 80075b4:	bd08      	pop	{r3, pc}
	...

080075b8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80075b8:	b500      	push	{lr}
 80075ba:	b08b      	sub	sp, #44	; 0x2c
  ADC_MultiModeTypeDef multimode = {0};
 80075bc:	2300      	movs	r3, #0
 80075be:	9307      	str	r3, [sp, #28]
 80075c0:	9308      	str	r3, [sp, #32]
 80075c2:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	9301      	str	r3, [sp, #4]
 80075c8:	9302      	str	r3, [sp, #8]
 80075ca:	9303      	str	r3, [sp, #12]
 80075cc:	9304      	str	r3, [sp, #16]
 80075ce:	9305      	str	r3, [sp, #20]
 80075d0:	9306      	str	r3, [sp, #24]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80075d2:	4837      	ldr	r0, [pc, #220]	; (80076b0 <MX_ADC1_Init+0xf8>)
 80075d4:	4a37      	ldr	r2, [pc, #220]	; (80076b4 <MX_ADC1_Init+0xfc>)
 80075d6:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80075d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80075dc:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80075de:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80075e0:	2201      	movs	r2, #1
 80075e2:	60c2      	str	r2, [r0, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80075e4:	2208      	movs	r2, #8
 80075e6:	6102      	str	r2, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80075e8:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80075ea:	7543      	strb	r3, [r0, #21]
  hadc1.Init.NbrOfConversion = 4;
 80075ec:	2204      	movs	r2, #4
 80075ee:	6182      	str	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80075f0:	7703      	strb	r3, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 80075f2:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80075f6:	6242      	str	r2, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80075f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80075fc:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80075fe:	2203      	movs	r2, #3
 8007600:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007602:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8007604:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8007606:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800760a:	f7f9 fb4f 	bl	8000cac <HAL_ADC_Init>
 800760e:	2800      	cmp	r0, #0
 8007610:	d13c      	bne.n	800768c <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007612:	a90a      	add	r1, sp, #40	; 0x28
 8007614:	2300      	movs	r3, #0
 8007616:	f841 3d0c 	str.w	r3, [r1, #-12]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800761a:	4825      	ldr	r0, [pc, #148]	; (80076b0 <MX_ADC1_Init+0xf8>)
 800761c:	f7f9 fc84 	bl	8000f28 <HAL_ADCEx_MultiModeConfigChannel>
 8007620:	2800      	cmp	r0, #0
 8007622:	d136      	bne.n	8007692 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8007624:	4b24      	ldr	r3, [pc, #144]	; (80076b8 <MX_ADC1_Init+0x100>)
 8007626:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007628:	2306      	movs	r3, #6
 800762a:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 800762c:	2303      	movs	r3, #3
 800762e:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007630:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007634:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007636:	2304      	movs	r3, #4
 8007638:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 800763a:	2300      	movs	r3, #0
 800763c:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800763e:	4669      	mov	r1, sp
 8007640:	481b      	ldr	r0, [pc, #108]	; (80076b0 <MX_ADC1_Init+0xf8>)
 8007642:	f7f8 ff2b 	bl	800049c <HAL_ADC_ConfigChannel>
 8007646:	bb38      	cbnz	r0, 8007698 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8007648:	4b1c      	ldr	r3, [pc, #112]	; (80076bc <MX_ADC1_Init+0x104>)
 800764a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800764c:	230c      	movs	r3, #12
 800764e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007650:	4669      	mov	r1, sp
 8007652:	4817      	ldr	r0, [pc, #92]	; (80076b0 <MX_ADC1_Init+0xf8>)
 8007654:	f7f8 ff22 	bl	800049c <HAL_ADC_ConfigChannel>
 8007658:	bb08      	cbnz	r0, 800769e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800765a:	4b19      	ldr	r3, [pc, #100]	; (80076c0 <MX_ADC1_Init+0x108>)
 800765c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800765e:	2312      	movs	r3, #18
 8007660:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8007662:	2304      	movs	r3, #4
 8007664:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007666:	4669      	mov	r1, sp
 8007668:	4811      	ldr	r0, [pc, #68]	; (80076b0 <MX_ADC1_Init+0xf8>)
 800766a:	f7f8 ff17 	bl	800049c <HAL_ADC_ConfigChannel>
 800766e:	b9c8      	cbnz	r0, 80076a4 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8007670:	4b14      	ldr	r3, [pc, #80]	; (80076c4 <MX_ADC1_Init+0x10c>)
 8007672:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8007674:	2318      	movs	r3, #24
 8007676:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8007678:	2303      	movs	r3, #3
 800767a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800767c:	4669      	mov	r1, sp
 800767e:	480c      	ldr	r0, [pc, #48]	; (80076b0 <MX_ADC1_Init+0xf8>)
 8007680:	f7f8 ff0c 	bl	800049c <HAL_ADC_ConfigChannel>
 8007684:	b988      	cbnz	r0, 80076aa <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
  }

}
 8007686:	b00b      	add	sp, #44	; 0x2c
 8007688:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800768c:	f000 fdfc 	bl	8008288 <Error_Handler>
 8007690:	e7bf      	b.n	8007612 <MX_ADC1_Init+0x5a>
    Error_Handler();
 8007692:	f000 fdf9 	bl	8008288 <Error_Handler>
 8007696:	e7c5      	b.n	8007624 <MX_ADC1_Init+0x6c>
    Error_Handler();
 8007698:	f000 fdf6 	bl	8008288 <Error_Handler>
 800769c:	e7d4      	b.n	8007648 <MX_ADC1_Init+0x90>
    Error_Handler();
 800769e:	f000 fdf3 	bl	8008288 <Error_Handler>
 80076a2:	e7da      	b.n	800765a <MX_ADC1_Init+0xa2>
    Error_Handler();
 80076a4:	f000 fdf0 	bl	8008288 <Error_Handler>
 80076a8:	e7e2      	b.n	8007670 <MX_ADC1_Init+0xb8>
    Error_Handler();
 80076aa:	f000 fded 	bl	8008288 <Error_Handler>
}
 80076ae:	e7ea      	b.n	8007686 <MX_ADC1_Init+0xce>
 80076b0:	20000380 	.word	0x20000380
 80076b4:	40022000 	.word	0x40022000
 80076b8:	43210000 	.word	0x43210000
 80076bc:	47520000 	.word	0x47520000
 80076c0:	3ac04000 	.word	0x3ac04000
 80076c4:	3ef08000 	.word	0x3ef08000

080076c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80076c8:	b510      	push	{r4, lr}
 80076ca:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076cc:	2300      	movs	r3, #0
 80076ce:	9303      	str	r3, [sp, #12]
 80076d0:	9304      	str	r3, [sp, #16]
 80076d2:	9305      	str	r3, [sp, #20]
 80076d4:	9306      	str	r3, [sp, #24]
 80076d6:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 80076d8:	6802      	ldr	r2, [r0, #0]
 80076da:	4b27      	ldr	r3, [pc, #156]	; (8007778 <HAL_ADC_MspInit+0xb0>)
 80076dc:	429a      	cmp	r2, r3
 80076de:	d001      	beq.n	80076e4 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80076e0:	b008      	add	sp, #32
 80076e2:	bd10      	pop	{r4, pc}
 80076e4:	4604      	mov	r4, r0
    __HAL_RCC_ADC12_CLK_ENABLE();
 80076e6:	4b25      	ldr	r3, [pc, #148]	; (800777c <HAL_ADC_MspInit+0xb4>)
 80076e8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80076ec:	f042 0220 	orr.w	r2, r2, #32
 80076f0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80076f4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80076f8:	f002 0220 	and.w	r2, r2, #32
 80076fc:	9201      	str	r2, [sp, #4]
 80076fe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007700:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007704:	f042 0201 	orr.w	r2, r2, #1
 8007708:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800770c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	9302      	str	r3, [sp, #8]
 8007716:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8007718:	230f      	movs	r3, #15
 800771a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800771c:	2303      	movs	r3, #3
 800771e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007720:	a903      	add	r1, sp, #12
 8007722:	4817      	ldr	r0, [pc, #92]	; (8007780 <HAL_ADC_MspInit+0xb8>)
 8007724:	f7fa ff82 	bl	800262c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8007728:	4816      	ldr	r0, [pc, #88]	; (8007784 <HAL_ADC_MspInit+0xbc>)
 800772a:	4b17      	ldr	r3, [pc, #92]	; (8007788 <HAL_ADC_MspInit+0xc0>)
 800772c:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800772e:	2309      	movs	r3, #9
 8007730:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007732:	2300      	movs	r3, #0
 8007734:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007736:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007738:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800773c:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800773e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007742:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007744:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007748:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800774a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800774e:	61c2      	str	r2, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007750:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007754:	6202      	str	r2, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007756:	2204      	movs	r2, #4
 8007758:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800775a:	2201      	movs	r2, #1
 800775c:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 800775e:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007760:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007762:	f7f9 ff65 	bl	8001630 <HAL_DMA_Init>
 8007766:	b918      	cbnz	r0, 8007770 <HAL_ADC_MspInit+0xa8>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8007768:	4b06      	ldr	r3, [pc, #24]	; (8007784 <HAL_ADC_MspInit+0xbc>)
 800776a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800776c:	639c      	str	r4, [r3, #56]	; 0x38
}
 800776e:	e7b7      	b.n	80076e0 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8007770:	f000 fd8a 	bl	8008288 <Error_Handler>
 8007774:	e7f8      	b.n	8007768 <HAL_ADC_MspInit+0xa0>
 8007776:	bf00      	nop
 8007778:	40022000 	.word	0x40022000
 800777c:	58024400 	.word	0x58024400
 8007780:	58020000 	.word	0x58020000
 8007784:	200003e4 	.word	0x200003e4
 8007788:	40020010 	.word	0x40020010

0800778c <audioTick>:
float noteOnAmplitude[2] = {0.0f, 0.0f};
int sampleNumGlobal = 0;

float audioTick()
{
	sample = 0.0f;
 800778c:	4b0b      	ldr	r3, [pc, #44]	; (80077bc <audioTick+0x30>)
 800778e:	2200      	movs	r2, #0
 8007790:	601a      	str	r2, [r3, #0]
		//sample = powf(sample, 0.5f);
		//sample += outOfThreshPositiveChange[0];
		//sample -= noteOnHappened[0];
	}
	*/
	if (ADC_Ready)
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	b16b      	cbz	r3, 80077b2 <audioTick+0x26>
	{
		sample = audioADCInputs[0][sampleNumGlobal];
 8007796:	4a09      	ldr	r2, [pc, #36]	; (80077bc <audioTick+0x30>)
 8007798:	6893      	ldr	r3, [r2, #8]
 800779a:	4909      	ldr	r1, [pc, #36]	; (80077c0 <audioTick+0x34>)
 800779c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80077a0:	6809      	ldr	r1, [r1, #0]
 80077a2:	6011      	str	r1, [r2, #0]
		sampleNumGlobal++;
 80077a4:	3301      	adds	r3, #1
 80077a6:	6093      	str	r3, [r2, #8]
		if (sampleNumGlobal >= ADC_RING_BUFFER_SIZE)
 80077a8:	2bff      	cmp	r3, #255	; 0xff
 80077aa:	dd02      	ble.n	80077b2 <audioTick+0x26>
		{
			sampleNumGlobal = 0;
 80077ac:	4613      	mov	r3, r2
 80077ae:	2200      	movs	r2, #0
 80077b0:	609a      	str	r2, [r3, #8]
		}
	}
	return sample;

}
 80077b2:	4b02      	ldr	r3, [pc, #8]	; (80077bc <audioTick+0x30>)
 80077b4:	ed93 0a00 	vldr	s0, [r3]
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	200002b8 	.word	0x200002b8
 80077c0:	20001904 	.word	0x20001904

080077c4 <audioFrame>:
{
 80077c4:	b538      	push	{r3, r4, r5, lr}
 80077c6:	4605      	mov	r5, r0
	if (ADC_notStarted)
 80077c8:	4b14      	ldr	r3, [pc, #80]	; (800781c <audioFrame+0x58>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	b923      	cbnz	r3, 80077d8 <audioFrame+0x14>
	if (codecReady)
 80077ce:	4b14      	ldr	r3, [pc, #80]	; (8007820 <audioFrame+0x5c>)
 80077d0:	7b1b      	ldrb	r3, [r3, #12]
 80077d2:	b30b      	cbz	r3, 8007818 <audioFrame+0x54>
		for (i = 0; i < (HALF_BUFFER_SIZE); i = i + 2)
 80077d4:	2400      	movs	r4, #0
 80077d6:	e01d      	b.n	8007814 <audioFrame+0x50>
		HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values,NUM_ADC_CHANNELS * AUDIO_FRAME_SIZE);
 80077d8:	2280      	movs	r2, #128	; 0x80
 80077da:	4912      	ldr	r1, [pc, #72]	; (8007824 <audioFrame+0x60>)
 80077dc:	4812      	ldr	r0, [pc, #72]	; (8007828 <audioFrame+0x64>)
 80077de:	f7f9 f91d 	bl	8000a1c <HAL_ADC_Start_DMA>
		ADC_notStarted = 0;
 80077e2:	4b0e      	ldr	r3, [pc, #56]	; (800781c <audioFrame+0x58>)
 80077e4:	2200      	movs	r2, #0
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	e7f1      	b.n	80077ce <audioFrame+0xa>
			audioOutBuffer[buffer_offset + i] = (int32_t)(audioTick() * TWO_TO_23);
 80077ea:	f7ff ffcf 	bl	800778c <audioTick>
 80077ee:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800782c <audioFrame+0x68>
 80077f2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80077f6:	192a      	adds	r2, r5, r4
 80077f8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80077fc:	4b09      	ldr	r3, [pc, #36]	; (8007824 <audioFrame+0x60>)
 80077fe:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8007802:	ed81 0a40 	vstr	s0, [r1, #256]	; 0x100
			audioOutBuffer[buffer_offset + i + 1] = 0;
 8007806:	3201      	adds	r2, #1
 8007808:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800780c:	2200      	movs	r2, #0
 800780e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		for (i = 0; i < (HALF_BUFFER_SIZE); i = i + 2)
 8007812:	3402      	adds	r4, #2
 8007814:	2c3f      	cmp	r4, #63	; 0x3f
 8007816:	dde8      	ble.n	80077ea <audioFrame+0x26>
}
 8007818:	bd38      	pop	{r3, r4, r5, pc}
 800781a:	bf00      	nop
 800781c:	20000008 	.word	0x20000008
 8007820:	200002b8 	.word	0x200002b8
 8007824:	30000000 	.word	0x30000000
 8007828:	20000380 	.word	0x20000380
 800782c:	4b000000 	.word	0x4b000000

08007830 <SFXRhodesAlloc>:

char* soundNames[4];

//FM Rhodes
void SFXRhodesAlloc()
{
 8007830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	soundNames[0] = "DARK  ";
 8007832:	4b23      	ldr	r3, [pc, #140]	; (80078c0 <SFXRhodesAlloc+0x90>)
 8007834:	4a23      	ldr	r2, [pc, #140]	; (80078c4 <SFXRhodesAlloc+0x94>)
 8007836:	601a      	str	r2, [r3, #0]
	soundNames[1] = "LIGHT ";
 8007838:	4a23      	ldr	r2, [pc, #140]	; (80078c8 <SFXRhodesAlloc+0x98>)
 800783a:	605a      	str	r2, [r3, #4]
	soundNames[2] = "BASS  ";
 800783c:	4a23      	ldr	r2, [pc, #140]	; (80078cc <SFXRhodesAlloc+0x9c>)
 800783e:	609a      	str	r2, [r3, #8]
	soundNames[3] = "PAD   ";
 8007840:	4a23      	ldr	r2, [pc, #140]	; (80078d0 <SFXRhodesAlloc+0xa0>)
 8007842:	60da      	str	r2, [r3, #12]
	for (int i = 0; i < NUM_VOC_VOICES; i++)
 8007844:	2700      	movs	r7, #0
 8007846:	e02b      	b.n	80078a0 <SFXRhodesAlloc+0x70>
	{
		for (int j = 0; j < 6; j++)
		{
			tCycle_initToPool(&FM_sines[i][j], &smallPool);
 8007848:	4e22      	ldr	r6, [pc, #136]	; (80078d4 <SFXRhodesAlloc+0xa4>)
 800784a:	007b      	lsls	r3, r7, #1
 800784c:	443b      	add	r3, r7
 800784e:	005c      	lsls	r4, r3, #1
 8007850:	442c      	add	r4, r5
 8007852:	00a4      	lsls	r4, r4, #2
 8007854:	4631      	mov	r1, r6
 8007856:	4820      	ldr	r0, [pc, #128]	; (80078d8 <SFXRhodesAlloc+0xa8>)
 8007858:	4420      	add	r0, r4
 800785a:	f001 fceb 	bl	8009234 <tCycle_initToPool>
			tADSR_initToPool(&FM_envs[i][j], FM_attacks[Rsound][j], FM_decays[Rsound][j], FM_sustains[Rsound][j], 100.0f, &smallPool);
 800785e:	4b1f      	ldr	r3, [pc, #124]	; (80078dc <SFXRhodesAlloc+0xac>)
 8007860:	441c      	add	r4, r3
 8007862:	4a1f      	ldr	r2, [pc, #124]	; (80078e0 <SFXRhodesAlloc+0xb0>)
 8007864:	6910      	ldr	r0, [r2, #16]
 8007866:	0041      	lsls	r1, r0, #1
 8007868:	eb01 0c00 	add.w	ip, r1, r0
 800786c:	ea4f 034c 	mov.w	r3, ip, lsl #1
 8007870:	442b      	add	r3, r5
 8007872:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007876:	4631      	mov	r1, r6
 8007878:	eddf 1a1a 	vldr	s3, [pc, #104]	; 80078e4 <SFXRhodesAlloc+0xb4>
 800787c:	ed93 1a05 	vldr	s2, [r3, #20]
 8007880:	edd3 0a1d 	vldr	s1, [r3, #116]	; 0x74
 8007884:	ed93 0a35 	vldr	s0, [r3, #212]	; 0xd4
 8007888:	4620      	mov	r0, r4
 800788a:	f001 fa27 	bl	8008cdc <tADSR_initToPool>
			tADSR_setLeakFactor(&FM_envs[i][j], 0.999987f);
 800788e:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80078e8 <SFXRhodesAlloc+0xb8>
 8007892:	4620      	mov	r0, r4
 8007894:	f001 faca 	bl	8008e2c <tADSR_setLeakFactor>
		for (int j = 0; j < 6; j++)
 8007898:	3501      	adds	r5, #1
 800789a:	2d05      	cmp	r5, #5
 800789c:	ddd4      	ble.n	8007848 <SFXRhodesAlloc+0x18>
	for (int i = 0; i < NUM_VOC_VOICES; i++)
 800789e:	3701      	adds	r7, #1
 80078a0:	2f01      	cmp	r7, #1
 80078a2:	dc01      	bgt.n	80078a8 <SFXRhodesAlloc+0x78>
		for (int j = 0; j < 6; j++)
 80078a4:	2500      	movs	r5, #0
 80078a6:	e7f8      	b.n	800789a <SFXRhodesAlloc+0x6a>
		}
	}
	tCycle_initToPool(&tremolo, &smallPool);
 80078a8:	4c10      	ldr	r4, [pc, #64]	; (80078ec <SFXRhodesAlloc+0xbc>)
 80078aa:	490a      	ldr	r1, [pc, #40]	; (80078d4 <SFXRhodesAlloc+0xa4>)
 80078ac:	4620      	mov	r0, r4
 80078ae:	f001 fcc1 	bl	8009234 <tCycle_initToPool>
	tCycle_setFreq(&tremolo, 3.0f);
 80078b2:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80078b6:	4620      	mov	r0, r4
 80078b8:	f001 fcd0 	bl	800925c <tCycle_setFreq>


}
 80078bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078be:	bf00      	nop
 80078c0:	200004d8 	.word	0x200004d8
 80078c4:	081156a8 	.word	0x081156a8
 80078c8:	081156b0 	.word	0x081156b0
 80078cc:	081156b8 	.word	0x081156b8
 80078d0:	081156c0 	.word	0x081156c0
 80078d4:	20002924 	.word	0x20002924
 80078d8:	20000488 	.word	0x20000488
 80078dc:	200004fc 	.word	0x200004fc
 80078e0:	20000008 	.word	0x20000008
 80078e4:	42c80000 	.word	0x42c80000
 80078e8:	3f7fff26 	.word	0x3f7fff26
 80078ec:	20000544 	.word	0x20000544

080078f0 <audioInit>:
{
 80078f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078f4:	ed2d 8b02 	vpush	{d8}
 80078f8:	4605      	mov	r5, r0
 80078fa:	460f      	mov	r7, r1
 80078fc:	4616      	mov	r6, r2
	whichBoard = whichBoard * 2; // get the correct board offset (2 strings per board)
 80078fe:	4a5a      	ldr	r2, [pc, #360]	; (8007a68 <audioInit+0x178>)
 8007900:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	LEAF_init(SAMPLE_RATE, AUDIO_FRAME_SIZE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 800790a:	4b58      	ldr	r3, [pc, #352]	; (8007a6c <audioInit+0x17c>)
 800790c:	4a58      	ldr	r2, [pc, #352]	; (8007a70 <audioInit+0x180>)
 800790e:	4959      	ldr	r1, [pc, #356]	; (8007a74 <audioInit+0x184>)
 8007910:	2020      	movs	r0, #32
 8007912:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8007a78 <audioInit+0x188>
 8007916:	f001 fd39 	bl	800938c <LEAF_init>
	tMempool_init (&smallPool, smallMemory, SMALL_MEM_SIZE);
 800791a:	f241 3288 	movw	r2, #5000	; 0x1388
 800791e:	4957      	ldr	r1, [pc, #348]	; (8007a7c <audioInit+0x18c>)
 8007920:	4857      	ldr	r0, [pc, #348]	; (8007a80 <audioInit+0x190>)
 8007922:	f001 fc7f 	bl	8009224 <tMempool_init>
	HAL_Delay(10);
 8007926:	200a      	movs	r0, #10
 8007928:	f7f8 fd3c 	bl	80003a4 <HAL_Delay>
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 800792c:	2300      	movs	r3, #0
 800792e:	e006      	b.n	800793e <audioInit+0x4e>
		audioOutBuffer[i] = 0;
 8007930:	4a54      	ldr	r2, [pc, #336]	; (8007a84 <audioInit+0x194>)
 8007932:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007936:	2100      	movs	r1, #0
 8007938:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 800793c:	3301      	adds	r3, #1
 800793e:	2b7f      	cmp	r3, #127	; 0x7f
 8007940:	ddf6      	ble.n	8007930 <audioInit+0x40>
	for (int i = 0; i < 2; i++)
 8007942:	f04f 0800 	mov.w	r8, #0
 8007946:	e06c      	b.n	8007a22 <audioInit+0x132>
			tSawtooth_init(&mySaw[i][j]);
 8007948:	eb04 0088 	add.w	r0, r4, r8, lsl #2
 800794c:	4b4e      	ldr	r3, [pc, #312]	; (8007a88 <audioInit+0x198>)
 800794e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007952:	f001 fcfb 	bl	800934c <tSawtooth_init>
		for (int j = 0; j < NUM_SAWTOOTHS; j++)
 8007956:	3401      	adds	r4, #1
 8007958:	2c03      	cmp	r4, #3
 800795a:	ddf5      	ble.n	8007948 <audioInit+0x58>
		tSVF_init(&myLowpass[i], SVFTypeLowpass, 5000.0f, 0.5f);
 800795c:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8007960:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8007964:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8007a8c <audioInit+0x19c>
 8007968:	2101      	movs	r1, #1
 800796a:	4849      	ldr	r0, [pc, #292]	; (8007a90 <audioInit+0x1a0>)
 800796c:	4420      	add	r0, r4
 800796e:	f001 fb2b 	bl	8008fc8 <tSVF_init>
		tCycle_init(&mySine[i]);
 8007972:	4848      	ldr	r0, [pc, #288]	; (8007a94 <audioInit+0x1a4>)
 8007974:	4420      	add	r0, r4
 8007976:	f001 fc69 	bl	800924c <tCycle_init>
		tHighpass_init(&dcBlock[i], 3000.0f);
 800797a:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8007a98 <audioInit+0x1a8>
 800797e:	4847      	ldr	r0, [pc, #284]	; (8007a9c <audioInit+0x1ac>)
 8007980:	4420      	add	r0, r4
 8007982:	f001 fb9b 	bl	80090bc <tHighpass_init>
		tExpSmooth_init(&pitchSmoother[i], 80.0f, 0.002f);
 8007986:	eddf 0a46 	vldr	s1, [pc, #280]	; 8007aa0 <audioInit+0x1b0>
 800798a:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8007aa4 <audioInit+0x1b4>
 800798e:	4846      	ldr	r0, [pc, #280]	; (8007aa8 <audioInit+0x1b8>)
 8007990:	4420      	add	r0, r4
 8007992:	f001 fab1 	bl	8008ef8 <tExpSmooth_init>
		tNoise_init(&noise[i], WhiteNoise);
 8007996:	2100      	movs	r1, #0
 8007998:	4844      	ldr	r0, [pc, #272]	; (8007aac <audioInit+0x1bc>)
 800799a:	4420      	add	r0, r4
 800799c:	f001 fcee 	bl	800937c <tNoise_init>
		tThreshold_init(&threshold[i],0.5f, 4.0f);
 80079a0:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80079a4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80079a8:	4841      	ldr	r0, [pc, #260]	; (8007ab0 <audioInit+0x1c0>)
 80079aa:	4420      	add	r0, r4
 80079ac:	f001 f8e8 	bl	8008b80 <tThreshold_init>
		tADSR_init(&envelope[i], 0.0f, 100.0f, 0.6f, 20.0f);
 80079b0:	4b40      	ldr	r3, [pc, #256]	; (8007ab4 <audioInit+0x1c4>)
 80079b2:	eb04 0903 	add.w	r9, r4, r3
 80079b6:	ed9f 8a40 	vldr	s16, [pc, #256]	; 8007ab8 <audioInit+0x1c8>
 80079ba:	eef3 1a04 	vmov.f32	s3, #52	; 0x41a00000  20.0
 80079be:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 8007abc <audioInit+0x1cc>
 80079c2:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8007ac0 <audioInit+0x1d0>
 80079c6:	eeb0 0a48 	vmov.f32	s0, s16
 80079ca:	4648      	mov	r0, r9
 80079cc:	f001 f8e0 	bl	8008b90 <tADSR_init>
		tADSR_setLeakFactor(&envelope[i], 0.999998f);
 80079d0:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8007ac4 <audioInit+0x1d4>
 80079d4:	4648      	mov	r0, r9
 80079d6:	f001 fa29 	bl	8008e2c <tADSR_setLeakFactor>
		tSlide_init(&fastSlide[i],1.0f,1110.0f);
 80079da:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8007ac8 <audioInit+0x1d8>
 80079de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80079e2:	483a      	ldr	r0, [pc, #232]	; (8007acc <audioInit+0x1dc>)
 80079e4:	4420      	add	r0, r4
 80079e6:	f001 fae7 	bl	8008fb8 <tSlide_init>
		tSlide_init(&slowSlide[i],500.0f,1.0f);
 80079ea:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80079ee:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8007ad0 <audioInit+0x1e0>
 80079f2:	4838      	ldr	r0, [pc, #224]	; (8007ad4 <audioInit+0x1e4>)
 80079f4:	4420      	add	r0, r4
 80079f6:	f001 fadf 	bl	8008fb8 <tSlide_init>
		tSVF_init(&lowpass[i], SVFTypeLowpass, 4000.0f, 1.0f);
 80079fa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80079fe:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8007ad8 <audioInit+0x1e8>
 8007a02:	2101      	movs	r1, #1
 8007a04:	4835      	ldr	r0, [pc, #212]	; (8007adc <audioInit+0x1ec>)
 8007a06:	4420      	add	r0, r4
 8007a08:	f001 fade 	bl	8008fc8 <tSVF_init>
		tRampUpDown_init(&updownRamp[i], 0.0f, 104.0f, 1); //5000 samples should be 104 ms
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	eddf 0a34 	vldr	s1, [pc, #208]	; 8007ae0 <audioInit+0x1f0>
 8007a12:	eeb0 0a48 	vmov.f32	s0, s16
 8007a16:	4833      	ldr	r0, [pc, #204]	; (8007ae4 <audioInit+0x1f4>)
 8007a18:	4420      	add	r0, r4
 8007a1a:	f001 fa65 	bl	8008ee8 <tRampUpDown_init>
	for (int i = 0; i < 2; i++)
 8007a1e:	f108 0801 	add.w	r8, r8, #1
 8007a22:	f1b8 0f01 	cmp.w	r8, #1
 8007a26:	dc01      	bgt.n	8007a2c <audioInit+0x13c>
		for (int j = 0; j < NUM_SAWTOOTHS; j++)
 8007a28:	2400      	movs	r4, #0
 8007a2a:	e795      	b.n	8007958 <audioInit+0x68>
	SFXRhodesAlloc();
 8007a2c:	f7ff ff00 	bl	8007830 <SFXRhodesAlloc>
	HAL_Delay(1);
 8007a30:	2001      	movs	r0, #1
 8007a32:	f7f8 fcb7 	bl	80003a4 <HAL_Delay>
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8007a36:	4c13      	ldr	r4, [pc, #76]	; (8007a84 <audioInit+0x194>)
 8007a38:	2280      	movs	r2, #128	; 0x80
 8007a3a:	f504 7180 	add.w	r1, r4, #256	; 0x100
 8007a3e:	4638      	mov	r0, r7
 8007a40:	f7fd fc94 	bl	800536c <HAL_SAI_Transmit_DMA>
 8007a44:	4b28      	ldr	r3, [pc, #160]	; (8007ae8 <audioInit+0x1f8>)
 8007a46:	7018      	strb	r0, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 8007a48:	2280      	movs	r2, #128	; 0x80
 8007a4a:	f504 7140 	add.w	r1, r4, #768	; 0x300
 8007a4e:	4630      	mov	r0, r6
 8007a50:	f7fd fd0e 	bl	8005470 <HAL_SAI_Receive_DMA>
 8007a54:	4b25      	ldr	r3, [pc, #148]	; (8007aec <audioInit+0x1fc>)
 8007a56:	7018      	strb	r0, [r3, #0]
	AudioCodec_init(hi2c);
 8007a58:	4628      	mov	r0, r5
 8007a5a:	f000 f8f5 	bl	8007c48 <AudioCodec_init>
}
 8007a5e:	ecbd 8b02 	vpop	{d8}
 8007a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a66:	bf00      	nop
 8007a68:	20000008 	.word	0x20000008
 8007a6c:	080081d9 	.word	0x080081d9
 8007a70:	0007a120 	.word	0x0007a120
 8007a74:	24000000 	.word	0x24000000
 8007a78:	473b8000 	.word	0x473b8000
 8007a7c:	2000054c 	.word	0x2000054c
 8007a80:	20002924 	.word	0x20002924
 8007a84:	30000000 	.word	0x30000000
 8007a88:	200018d4 	.word	0x200018d4
 8007a8c:	459c4000 	.word	0x459c4000
 8007a90:	2000045c 	.word	0x2000045c
 8007a94:	20000480 	.word	0x20000480
 8007a98:	453b8000 	.word	0x453b8000
 8007a9c:	200018f4 	.word	0x200018f4
 8007aa0:	3b03126f 	.word	0x3b03126f
 8007aa4:	42a00000 	.word	0x42a00000
 8007aa8:	200004f0 	.word	0x200004f0
 8007aac:	200018fc 	.word	0x200018fc
 8007ab0:	20000470 	.word	0x20000470
 8007ab4:	2000290c 	.word	0x2000290c
 8007ab8:	00000000 	.word	0x00000000
 8007abc:	3f19999a 	.word	0x3f19999a
 8007ac0:	42c80000 	.word	0x42c80000
 8007ac4:	3f7fffde 	.word	0x3f7fffde
 8007ac8:	448ac000 	.word	0x448ac000
 8007acc:	20002914 	.word	0x20002914
 8007ad0:	43fa0000 	.word	0x43fa0000
 8007ad4:	2000053c 	.word	0x2000053c
 8007ad8:	457a0000 	.word	0x457a0000
 8007adc:	20000478 	.word	0x20000478
 8007ae0:	42d00000 	.word	0x42d00000
 8007ae4:	200004d0 	.word	0x200004d0
 8007ae8:	200004b8 	.word	0x200004b8
 8007aec:	200004f8 	.word	0x200004f8

08007af0 <HAL_SAI_ErrorCallback>:
}

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
	;
}
 8007af0:	4770      	bx	lr

08007af2 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
	;
}
 8007af2:	4770      	bx	lr

08007af4 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
  ;
}
 8007af4:	4770      	bx	lr

08007af6 <HAL_SAI_RxCpltCallback>:


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8007af6:	b508      	push	{r3, lr}
	audioFrame(HALF_BUFFER_SIZE);
 8007af8:	2040      	movs	r0, #64	; 0x40
 8007afa:	f7ff fe63 	bl	80077c4 <audioFrame>
}
 8007afe:	bd08      	pop	{r3, pc}

08007b00 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8007b00:	b508      	push	{r3, lr}
	audioFrame(0);
 8007b02:	2000      	movs	r0, #0
 8007b04:	f7ff fe5e 	bl	80077c4 <audioFrame>
}
 8007b08:	bd08      	pop	{r3, pc}
	...

08007b0c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
		for (int i = 0; i < AUDIO_FRAME_SIZE; i++)
 8007b0c:	2000      	movs	r0, #0
 8007b0e:	e02a      	b.n	8007b66 <HAL_ADC_ConvCpltCallback+0x5a>
		{
			for (int j = 0; j < NUM_ADC_CHANNELS; j++)
			{
				int tempInt = ADC_values[(i*NUM_ADC_CHANNELS) + j];
 8007b10:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 8007b14:	4a18      	ldr	r2, [pc, #96]	; (8007b78 <HAL_ADC_ConvCpltCallback+0x6c>)
 8007b16:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8007b1a:	ee07 2a90 	vmov	s15, r2
				audioADCInputs[j][currentADCBufferPos] = ((float)(tempInt - TWO_TO_15) * INV_TWO_TO_15);
 8007b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b22:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8007b7c <HAL_ADC_ConvCpltCallback+0x70>
 8007b26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b2a:	4a15      	ldr	r2, [pc, #84]	; (8007b80 <HAL_ADC_ConvCpltCallback+0x74>)
 8007b2c:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8007b30:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007b84 <HAL_ADC_ConvCpltCallback+0x78>
 8007b34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b38:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8007b3c:	4a12      	ldr	r2, [pc, #72]	; (8007b88 <HAL_ADC_ConvCpltCallback+0x7c>)
 8007b3e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007b42:	edc2 7a00 	vstr	s15, [r2]
			for (int j = 0; j < NUM_ADC_CHANNELS; j++)
 8007b46:	3301      	adds	r3, #1
 8007b48:	2b03      	cmp	r3, #3
 8007b4a:	dde1      	ble.n	8007b10 <HAL_ADC_ConvCpltCallback+0x4>
			}
			currentADCBufferPos++;
 8007b4c:	4a0c      	ldr	r2, [pc, #48]	; (8007b80 <HAL_ADC_ConvCpltCallback+0x74>)
 8007b4e:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8007b52:	3301      	adds	r3, #1
 8007b54:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
			if (currentADCBufferPos >= ADC_RING_BUFFER_SIZE)
 8007b58:	2bff      	cmp	r3, #255	; 0xff
 8007b5a:	d903      	bls.n	8007b64 <HAL_ADC_ConvCpltCallback+0x58>
			{
				currentADCBufferPos = 0;
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (int i = 0; i < AUDIO_FRAME_SIZE; i++)
 8007b64:	3001      	adds	r0, #1
 8007b66:	281f      	cmp	r0, #31
 8007b68:	dc01      	bgt.n	8007b6e <HAL_ADC_ConvCpltCallback+0x62>
			for (int j = 0; j < NUM_ADC_CHANNELS; j++)
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	e7ec      	b.n	8007b48 <HAL_ADC_ConvCpltCallback+0x3c>
			}
		}
		ADC_Ready = 1;
 8007b6e:	4b04      	ldr	r3, [pc, #16]	; (8007b80 <HAL_ADC_ConvCpltCallback+0x74>)
 8007b70:	2201      	movs	r2, #1
 8007b72:	605a      	str	r2, [r3, #4]
}
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	30000000 	.word	0x30000000
 8007b7c:	47000000 	.word	0x47000000
 8007b80:	200002b8 	.word	0x200002b8
 8007b84:	37fffffc 	.word	0x37fffffc
 8007b88:	20001904 	.word	0x20001904

08007b8c <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{

}
 8007b8c:	4770      	bx	lr
	...

08007b90 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007b90:	b500      	push	{lr}
 8007b92:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007b94:	9300      	str	r3, [sp, #0]
 8007b96:	4613      	mov	r3, r2
 8007b98:	460a      	mov	r2, r1
 8007b9a:	4601      	mov	r1, r0
 8007b9c:	4803      	ldr	r0, [pc, #12]	; (8007bac <BSP_SD_ReadBlocks+0x1c>)
 8007b9e:	f7fd feb1 	bl	8005904 <HAL_SD_ReadBlocks>
 8007ba2:	b100      	cbz	r0, 8007ba6 <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8007ba4:	2001      	movs	r0, #1
  }

  return sd_state;  
}
 8007ba6:	b003      	add	sp, #12
 8007ba8:	f85d fb04 	ldr.w	pc, [sp], #4
 8007bac:	2000305c 	.word	0x2000305c

08007bb0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007bb0:	b500      	push	{lr}
 8007bb2:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	460a      	mov	r2, r1
 8007bba:	4601      	mov	r1, r0
 8007bbc:	4803      	ldr	r0, [pc, #12]	; (8007bcc <BSP_SD_WriteBlocks+0x1c>)
 8007bbe:	f7fd ff9f 	bl	8005b00 <HAL_SD_WriteBlocks>
 8007bc2:	b100      	cbz	r0, 8007bc6 <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8007bc4:	2001      	movs	r0, #1
  }

  return sd_state;  
}
 8007bc6:	b003      	add	sp, #12
 8007bc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8007bcc:	2000305c 	.word	0x2000305c

08007bd0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007bd0:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007bd2:	4803      	ldr	r0, [pc, #12]	; (8007be0 <BSP_SD_GetCardState+0x10>)
 8007bd4:	f7fe fbe2 	bl	800639c <HAL_SD_GetCardState>
}
 8007bd8:	3804      	subs	r0, #4
 8007bda:	bf18      	it	ne
 8007bdc:	2001      	movne	r0, #1
 8007bde:	bd08      	pop	{r3, pc}
 8007be0:	2000305c 	.word	0x2000305c

08007be4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007be4:	b508      	push	{r3, lr}
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007be6:	4601      	mov	r1, r0
 8007be8:	4801      	ldr	r0, [pc, #4]	; (8007bf0 <BSP_SD_GetCardInfo+0xc>)
 8007bea:	f7fe fb57 	bl	800629c <HAL_SD_GetCardInfo>
}
 8007bee:	bd08      	pop	{r3, pc}
 8007bf0:	2000305c 	.word	0x2000305c

08007bf4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007bf4:	b500      	push	{lr}
 8007bf6:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8007bfe:	f000 f8fd 	bl	8007dfc <BSP_PlatformIsDetected>
 8007c02:	b910      	cbnz	r0, 8007c0a <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 8007c04:	2300      	movs	r3, #0
 8007c06:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 8007c0a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8007c0e:	b003      	add	sp, #12
 8007c10:	f85d fb04 	ldr.w	pc, [sp], #4

08007c14 <BSP_SD_Init>:
{
 8007c14:	b510      	push	{r4, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007c16:	f7ff ffed 	bl	8007bf4 <BSP_SD_IsDetected>
 8007c1a:	2801      	cmp	r0, #1
 8007c1c:	d002      	beq.n	8007c24 <BSP_SD_Init+0x10>
    return MSD_ERROR_SD_NOT_PRESENT;
 8007c1e:	2402      	movs	r4, #2
}
 8007c20:	4620      	mov	r0, r4
 8007c22:	bd10      	pop	{r4, pc}
  sd_state = HAL_SD_Init(&hsd1);
 8007c24:	4807      	ldr	r0, [pc, #28]	; (8007c44 <BSP_SD_Init+0x30>)
 8007c26:	f7fe fbcc 	bl	80063c2 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	d1f7      	bne.n	8007c20 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8007c30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007c34:	4803      	ldr	r0, [pc, #12]	; (8007c44 <BSP_SD_Init+0x30>)
 8007c36:	f7fe fb43 	bl	80062c0 <HAL_SD_ConfigWideBusOperation>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	d0f0      	beq.n	8007c20 <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 8007c3e:	2401      	movs	r4, #1
 8007c40:	e7ee      	b.n	8007c20 <BSP_SD_Init+0xc>
 8007c42:	bf00      	nop
 8007c44:	2000305c 	.word	0x2000305c

08007c48 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8007c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c4c:	b083      	sub	sp, #12
 8007c4e:	4606      	mov	r6, r0

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8007c50:	2201      	movs	r2, #1
 8007c52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007c56:	483f      	ldr	r0, [pc, #252]	; (8007d54 <AudioCodec_init+0x10c>)
 8007c58:	f7fa fddf 	bl	800281a <HAL_GPIO_WritePin>

	HAL_Delay(2);
 8007c5c:	2002      	movs	r0, #2
 8007c5e:	f7f8 fba1 	bl	80003a4 <HAL_Delay>
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 8007c62:	4c3d      	ldr	r4, [pc, #244]	; (8007d58 <AudioCodec_init+0x110>)
 8007c64:	f04f 0a07 	mov.w	sl, #7
 8007c68:	f884 a000 	strb.w	sl, [r4]
	myI2cData[1] = 0x03;
 8007c6c:	f04f 0b03 	mov.w	fp, #3
 8007c70:	f884 b001 	strb.w	fp, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007c74:	4d39      	ldr	r5, [pc, #228]	; (8007d5c <AudioCodec_init+0x114>)
 8007c76:	882b      	ldrh	r3, [r5, #0]
 8007c78:	686a      	ldr	r2, [r5, #4]
 8007c7a:	9200      	str	r2, [sp, #0]
 8007c7c:	4622      	mov	r2, r4
 8007c7e:	2120      	movs	r1, #32
 8007c80:	4630      	mov	r0, r6
 8007c82:	f7fa ff1f 	bl	8002ac4 <HAL_I2C_Master_Transmit>
 8007c86:	4f36      	ldr	r7, [pc, #216]	; (8007d60 <AudioCodec_init+0x118>)
 8007c88:	7038      	strb	r0, [r7, #0]
	//HAL_Delay(2);

	myI2cData[0] = 0x01;
 8007c8a:	f04f 0801 	mov.w	r8, #1
 8007c8e:	f884 8000 	strb.w	r8, [r4]
	myI2cData[1] = 0x41;
 8007c92:	2341      	movs	r3, #65	; 0x41
 8007c94:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007c96:	882b      	ldrh	r3, [r5, #0]
 8007c98:	686a      	ldr	r2, [r5, #4]
 8007c9a:	9200      	str	r2, [sp, #0]
 8007c9c:	4622      	mov	r2, r4
 8007c9e:	2120      	movs	r1, #32
 8007ca0:	4630      	mov	r0, r6
 8007ca2:	f7fa ff0f 	bl	8002ac4 <HAL_I2C_Master_Transmit>
 8007ca6:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
 8007ca8:	f04f 0902 	mov.w	r9, #2
 8007cac:	f884 9000 	strb.w	r9, [r4]
	myI2cData[1] = 0x00;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007cb4:	882b      	ldrh	r3, [r5, #0]
 8007cb6:	686a      	ldr	r2, [r5, #4]
 8007cb8:	9200      	str	r2, [sp, #0]
 8007cba:	4622      	mov	r2, r4
 8007cbc:	2120      	movs	r1, #32
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	f7fa ff00 	bl	8002ac4 <HAL_I2C_Master_Transmit>
 8007cc4:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
 8007cc6:	f884 b000 	strb.w	fp, [r4]
	myI2cData[1] = 0x79;
 8007cca:	2379      	movs	r3, #121	; 0x79
 8007ccc:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007cce:	882b      	ldrh	r3, [r5, #0]
 8007cd0:	686a      	ldr	r2, [r5, #4]
 8007cd2:	9200      	str	r2, [sp, #0]
 8007cd4:	4622      	mov	r2, r4
 8007cd6:	2120      	movs	r1, #32
 8007cd8:	4630      	mov	r0, r6
 8007cda:	f7fa fef3 	bl	8002ac4 <HAL_I2C_Master_Transmit>
 8007cde:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
 8007ce0:	2304      	movs	r3, #4
 8007ce2:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x01;
 8007ce4:	f884 8001 	strb.w	r8, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007ce8:	882b      	ldrh	r3, [r5, #0]
 8007cea:	686a      	ldr	r2, [r5, #4]
 8007cec:	9200      	str	r2, [sp, #0]
 8007cee:	4622      	mov	r2, r4
 8007cf0:	2120      	movs	r1, #32
 8007cf2:	4630      	mov	r0, r6
 8007cf4:	f7fa fee6 	bl	8002ac4 <HAL_I2C_Master_Transmit>
 8007cf8:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
 8007cfa:	2305      	movs	r3, #5
 8007cfc:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x01;
 8007cfe:	f884 8001 	strb.w	r8, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007d02:	882b      	ldrh	r3, [r5, #0]
 8007d04:	686a      	ldr	r2, [r5, #4]
 8007d06:	9200      	str	r2, [sp, #0]
 8007d08:	4622      	mov	r2, r4
 8007d0a:	2120      	movs	r1, #32
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	f7fa fed9 	bl	8002ac4 <HAL_I2C_Master_Transmit>
 8007d12:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
 8007d14:	2306      	movs	r3, #6
 8007d16:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x10;
 8007d18:	2310      	movs	r3, #16
 8007d1a:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007d1c:	882b      	ldrh	r3, [r5, #0]
 8007d1e:	686a      	ldr	r2, [r5, #4]
 8007d20:	9200      	str	r2, [sp, #0]
 8007d22:	4622      	mov	r2, r4
 8007d24:	2120      	movs	r1, #32
 8007d26:	4630      	mov	r0, r6
 8007d28:	f7fa fecc 	bl	8002ac4 <HAL_I2C_Master_Transmit>
 8007d2c:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
 8007d2e:	f884 a000 	strb.w	sl, [r4]
	myI2cData[1] = 0x02;
 8007d32:	f884 9001 	strb.w	r9, [r4, #1]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8007d36:	882b      	ldrh	r3, [r5, #0]
 8007d38:	686a      	ldr	r2, [r5, #4]
 8007d3a:	9200      	str	r2, [sp, #0]
 8007d3c:	4622      	mov	r2, r4
 8007d3e:	2120      	movs	r1, #32
 8007d40:	4630      	mov	r0, r6
 8007d42:	f7fa febf 	bl	8002ac4 <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 8007d46:	4b07      	ldr	r3, [pc, #28]	; (8007d64 <AudioCodec_init+0x11c>)
 8007d48:	f883 8000 	strb.w	r8, [r3]

}
 8007d4c:	b003      	add	sp, #12
 8007d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d52:	bf00      	nop
 8007d54:	58020800 	.word	0x58020800
 8007d58:	20000368 	.word	0x20000368
 8007d5c:	2000027c 	.word	0x2000027c
 8007d60:	20002938 	.word	0x20002938
 8007d64:	200002c4 	.word	0x200002c4

08007d68 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8007d68:	b500      	push	{lr}
 8007d6a:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007d6c:	4b1b      	ldr	r3, [pc, #108]	; (8007ddc <MX_DMA_Init+0x74>)
 8007d6e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8007d72:	f042 0201 	orr.w	r2, r2, #1
 8007d76:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8007d7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	9301      	str	r3, [sp, #4]
 8007d84:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 8007d86:	2200      	movs	r2, #0
 8007d88:	2101      	movs	r1, #1
 8007d8a:	200b      	movs	r0, #11
 8007d8c:	f7f9 f99a 	bl	80010c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8007d90:	200b      	movs	r0, #11
 8007d92:	f7f9 f9c9 	bl	8001128 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 8007d96:	2200      	movs	r2, #0
 8007d98:	2102      	movs	r1, #2
 8007d9a:	200c      	movs	r0, #12
 8007d9c:	f7f9 f992 	bl	80010c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8007da0:	200c      	movs	r0, #12
 8007da2:	f7f9 f9c1 	bl	8001128 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 2, 0);
 8007da6:	2200      	movs	r2, #0
 8007da8:	2102      	movs	r1, #2
 8007daa:	200d      	movs	r0, #13
 8007dac:	f7f9 f98a 	bl	80010c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8007db0:	200d      	movs	r0, #13
 8007db2:	f7f9 f9b9 	bl	8001128 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 3, 0);
 8007db6:	2200      	movs	r2, #0
 8007db8:	2103      	movs	r1, #3
 8007dba:	200e      	movs	r0, #14
 8007dbc:	f7f9 f982 	bl	80010c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8007dc0:	200e      	movs	r0, #14
 8007dc2:	f7f9 f9b1 	bl	8001128 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 3, 0);
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	2103      	movs	r1, #3
 8007dca:	200f      	movs	r0, #15
 8007dcc:	f7f9 f97a 	bl	80010c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8007dd0:	200f      	movs	r0, #15
 8007dd2:	f7f9 f9a9 	bl	8001128 <HAL_NVIC_EnableIRQ>

}
 8007dd6:	b003      	add	sp, #12
 8007dd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ddc:	58024400 	.word	0x58024400

08007de0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8007de0:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007de2:	4903      	ldr	r1, [pc, #12]	; (8007df0 <MX_FATFS_Init+0x10>)
 8007de4:	4803      	ldr	r0, [pc, #12]	; (8007df4 <MX_FATFS_Init+0x14>)
 8007de6:	f7ff fbe1 	bl	80075ac <FATFS_LinkDriver>
 8007dea:	4b03      	ldr	r3, [pc, #12]	; (8007df8 <MX_FATFS_Init+0x18>)
 8007dec:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8007dee:	bd08      	pop	{r3, pc}
 8007df0:	20002940 	.word	0x20002940
 8007df4:	08009f84 	.word	0x08009f84
 8007df8:	2000293c 	.word	0x2000293c

08007dfc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007dfc:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007dfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007e02:	4804      	ldr	r0, [pc, #16]	; (8007e14 <BSP_PlatformIsDetected+0x18>)
 8007e04:	f7fa fd02 	bl	800280c <HAL_GPIO_ReadPin>
 8007e08:	b108      	cbz	r0, 8007e0e <BSP_PlatformIsDetected+0x12>
    {
        status = SD_NOT_PRESENT;
 8007e0a:	2000      	movs	r0, #0
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
}  
 8007e0c:	bd08      	pop	{r3, pc}
    uint8_t status = SD_PRESENT;
 8007e0e:	2001      	movs	r0, #1
 8007e10:	e7fc      	b.n	8007e0c <BSP_PlatformIsDetected+0x10>
 8007e12:	bf00      	nop
 8007e14:	58020800 	.word	0x58020800

08007e18 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8007e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e1a:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	9301      	str	r3, [sp, #4]
 8007e20:	9302      	str	r3, [sp, #8]
 8007e22:	9303      	str	r3, [sp, #12]
 8007e24:	9304      	str	r3, [sp, #16]
 8007e26:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8007e28:	4b27      	ldr	r3, [pc, #156]	; (8007ec8 <HAL_FMC_MspInit+0xb0>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	b10b      	cbz	r3, 8007e32 <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8007e2e:	b007      	add	sp, #28
 8007e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 8007e32:	4b25      	ldr	r3, [pc, #148]	; (8007ec8 <HAL_FMC_MspInit+0xb0>)
 8007e34:	2201      	movs	r2, #1
 8007e36:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8007e38:	4b24      	ldr	r3, [pc, #144]	; (8007ecc <HAL_FMC_MspInit+0xb4>)
 8007e3a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8007e3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e42:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8007e46:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8007e4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8007e52:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8007e56:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e58:	2602      	movs	r6, #2
 8007e5a:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e5c:	2503      	movs	r5, #3
 8007e5e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007e60:	240c      	movs	r4, #12
 8007e62:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007e64:	a901      	add	r1, sp, #4
 8007e66:	481a      	ldr	r0, [pc, #104]	; (8007ed0 <HAL_FMC_MspInit+0xb8>)
 8007e68:	f7fa fbe0 	bl	800262c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8007e6c:	2319      	movs	r3, #25
 8007e6e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e70:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e72:	2700      	movs	r7, #0
 8007e74:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e76:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007e78:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007e7a:	a901      	add	r1, sp, #4
 8007e7c:	4815      	ldr	r0, [pc, #84]	; (8007ed4 <HAL_FMC_MspInit+0xbc>)
 8007e7e:	f7fa fbd5 	bl	800262c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 8007e82:	f248 1337 	movw	r3, #33079	; 0x8137
 8007e86:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e88:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e8a:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e8c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007e8e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007e90:	a901      	add	r1, sp, #4
 8007e92:	4811      	ldr	r0, [pc, #68]	; (8007ed8 <HAL_FMC_MspInit+0xc0>)
 8007e94:	f7fa fbca 	bl	800262c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8007e98:	f64f 7383 	movw	r3, #65411	; 0xff83
 8007e9c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e9e:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ea0:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ea2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007ea4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007ea6:	a901      	add	r1, sp, #4
 8007ea8:	480c      	ldr	r0, [pc, #48]	; (8007edc <HAL_FMC_MspInit+0xc4>)
 8007eaa:	f7fa fbbf 	bl	800262c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8007eae:	f24c 7303 	movw	r3, #50947	; 0xc703
 8007eb2:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eb4:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eb6:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007eb8:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007eba:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007ebc:	a901      	add	r1, sp, #4
 8007ebe:	4808      	ldr	r0, [pc, #32]	; (8007ee0 <HAL_FMC_MspInit+0xc8>)
 8007ec0:	f7fa fbb4 	bl	800262c <HAL_GPIO_Init>
 8007ec4:	e7b3      	b.n	8007e2e <HAL_FMC_MspInit+0x16>
 8007ec6:	bf00      	nop
 8007ec8:	20000370 	.word	0x20000370
 8007ecc:	58024400 	.word	0x58024400
 8007ed0:	58021400 	.word	0x58021400
 8007ed4:	58020800 	.word	0x58020800
 8007ed8:	58021800 	.word	0x58021800
 8007edc:	58021000 	.word	0x58021000
 8007ee0:	58020c00 	.word	0x58020c00

08007ee4 <MX_FMC_Init>:
{
 8007ee4:	b500      	push	{lr}
 8007ee6:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8007ee8:	4817      	ldr	r0, [pc, #92]	; (8007f48 <MX_FMC_Init+0x64>)
 8007eea:	4b18      	ldr	r3, [pc, #96]	; (8007f4c <MX_FMC_Init+0x68>)
 8007eec:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	6082      	str	r2, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8007ef6:	2208      	movs	r2, #8
 8007ef8:	60c2      	str	r2, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8007efa:	2210      	movs	r2, #16
 8007efc:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8007efe:	2240      	movs	r2, #64	; 0x40
 8007f00:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8007f02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f06:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8007f08:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8007f0a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8007f0e:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8007f10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007f14:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8007f16:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8007f18:	2302      	movs	r3, #2
 8007f1a:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8007f1c:	2206      	movs	r2, #6
 8007f1e:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 8007f20:	2104      	movs	r1, #4
 8007f22:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 6;
 8007f24:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8007f26:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 2;
 8007f28:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 8007f2a:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8007f2c:	4469      	add	r1, sp
 8007f2e:	f7fe faa9 	bl	8006484 <HAL_SDRAM_Init>
 8007f32:	b930      	cbnz	r0, 8007f42 <MX_FMC_Init+0x5e>
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8007f34:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8007f38:	f7f8 fa4e 	bl	80003d8 <HAL_SetFMCMemorySwappingConfig>
}
 8007f3c:	b009      	add	sp, #36	; 0x24
 8007f3e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 8007f42:	f000 f9a1 	bl	8008288 <Error_Handler>
 8007f46:	e7f5      	b.n	8007f34 <MX_FMC_Init+0x50>
 8007f48:	20002da4 	.word	0x20002da4
 8007f4c:	52004140 	.word	0x52004140

08007f50 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8007f50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8007f52:	f7ff ff61 	bl	8007e18 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8007f56:	bd08      	pop	{r3, pc}

08007f58 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8007f58:	b570      	push	{r4, r5, r6, lr}
 8007f5a:	b08e      	sub	sp, #56	; 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f5c:	2400      	movs	r4, #0
 8007f5e:	9409      	str	r4, [sp, #36]	; 0x24
 8007f60:	940a      	str	r4, [sp, #40]	; 0x28
 8007f62:	940b      	str	r4, [sp, #44]	; 0x2c
 8007f64:	940c      	str	r4, [sp, #48]	; 0x30
 8007f66:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007f68:	4b60      	ldr	r3, [pc, #384]	; (80080ec <MX_GPIO_Init+0x194>)
 8007f6a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007f6e:	f042 0210 	orr.w	r2, r2, #16
 8007f72:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007f76:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007f7a:	f002 0210 	and.w	r2, r2, #16
 8007f7e:	9201      	str	r2, [sp, #4]
 8007f80:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f82:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007f86:	f042 0204 	orr.w	r2, r2, #4
 8007f8a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007f8e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007f92:	f002 0204 	and.w	r2, r2, #4
 8007f96:	9202      	str	r2, [sp, #8]
 8007f98:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007f9a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007f9e:	f042 0220 	orr.w	r2, r2, #32
 8007fa2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007fa6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007faa:	f002 0220 	and.w	r2, r2, #32
 8007fae:	9203      	str	r2, [sp, #12]
 8007fb0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007fb2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007fb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007fba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007fbe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007fc2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8007fc6:	9204      	str	r2, [sp, #16]
 8007fc8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007fce:	f042 0201 	orr.w	r2, r2, #1
 8007fd2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007fd6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007fda:	f002 0201 	and.w	r2, r2, #1
 8007fde:	9205      	str	r2, [sp, #20]
 8007fe0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007fe2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007fe6:	f042 0202 	orr.w	r2, r2, #2
 8007fea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007fee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007ff2:	f002 0202 	and.w	r2, r2, #2
 8007ff6:	9206      	str	r2, [sp, #24]
 8007ff8:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007ffa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007ffe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008002:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008006:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800800a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800800e:	9207      	str	r2, [sp, #28]
 8008010:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008012:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008016:	f042 0208 	orr.w	r2, r2, #8
 800801a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800801e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008022:	f003 0308 	and.w	r3, r3, #8
 8008026:	9308      	str	r3, [sp, #32]
 8008028:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800802a:	4e31      	ldr	r6, [pc, #196]	; (80080f0 <MX_GPIO_Init+0x198>)
 800802c:	4622      	mov	r2, r4
 800802e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008032:	4630      	mov	r0, r6
 8008034:	f7fa fbf1 	bl	800281a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008038:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800803c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800803e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008040:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008042:	a909      	add	r1, sp, #36	; 0x24
 8008044:	4630      	mov	r0, r6
 8008046:	f7fa faf1 	bl	800262c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800804a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800804e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008050:	2301      	movs	r3, #1
 8008052:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008054:	2302      	movs	r3, #2
 8008056:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008058:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800805a:	a909      	add	r1, sp, #36	; 0x24
 800805c:	4630      	mov	r0, r6
 800805e:	f7fa fae5 	bl	800262c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC1 PC2 PC5 
                           PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5 
 8008062:	f248 03e6 	movw	r3, #32998	; 0x80e6
 8008066:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008068:	2503      	movs	r5, #3
 800806a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800806c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800806e:	a909      	add	r1, sp, #36	; 0x24
 8008070:	4630      	mov	r0, r6
 8008072:	f7fa fadb 	bl	800262c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 
                           PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 8008076:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800807a:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800807c:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800807e:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008080:	a909      	add	r1, sp, #36	; 0x24
 8008082:	481c      	ldr	r0, [pc, #112]	; (80080f4 <MX_GPIO_Init+0x19c>)
 8008084:	f7fa fad2 	bl	800262c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 
                           PA8 PA9 PA10 PA11 
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
 8008088:	f649 73f0 	movw	r3, #40944	; 0x9ff0
 800808c:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800808e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008090:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008092:	a909      	add	r1, sp, #36	; 0x24
 8008094:	4818      	ldr	r0, [pc, #96]	; (80080f8 <MX_GPIO_Init+0x1a0>)
 8008096:	f7fa fac9 	bl	800262c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB4 
                           PB5 PB6 PB7 PB8 
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 800809a:	f240 33f7 	movw	r3, #1015	; 0x3f7
 800809e:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80080a0:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080a2:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80080a4:	a909      	add	r1, sp, #36	; 0x24
 80080a6:	4815      	ldr	r0, [pc, #84]	; (80080fc <MX_GPIO_Init+0x1a4>)
 80080a8:	f7fa fac0 	bl	800262c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80080ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080b0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80080b2:	4b13      	ldr	r3, [pc, #76]	; (8008100 <MX_GPIO_Init+0x1a8>)
 80080b4:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080b6:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80080b8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80080bc:	a909      	add	r1, sp, #36	; 0x24
 80080be:	4630      	mov	r0, r6
 80080c0:	f7fa fab4 	bl	800262c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD3 PD4 
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 80080c4:	f243 03f8 	movw	r3, #12536	; 0x30f8
 80080c8:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80080ca:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080cc:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80080ce:	a909      	add	r1, sp, #36	; 0x24
 80080d0:	4630      	mov	r0, r6
 80080d2:	f7fa faab 	bl	800262c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG7 PG9 
                           PG10 PG11 PG12 PG13 
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9 
 80080d6:	f647 63c8 	movw	r3, #32456	; 0x7ec8
 80080da:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80080dc:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080de:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80080e0:	a909      	add	r1, sp, #36	; 0x24
 80080e2:	4808      	ldr	r0, [pc, #32]	; (8008104 <MX_GPIO_Init+0x1ac>)
 80080e4:	f7fa faa2 	bl	800262c <HAL_GPIO_Init>

}
 80080e8:	b00e      	add	sp, #56	; 0x38
 80080ea:	bd70      	pop	{r4, r5, r6, pc}
 80080ec:	58024400 	.word	0x58024400
 80080f0:	58020800 	.word	0x58020800
 80080f4:	58021400 	.word	0x58021400
 80080f8:	58020000 	.word	0x58020000
 80080fc:	58020400 	.word	0x58020400
 8008100:	11110000 	.word	0x11110000
 8008104:	58021800 	.word	0x58021800

08008108 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8008108:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 800810a:	4812      	ldr	r0, [pc, #72]	; (8008154 <MX_I2C2_Init+0x4c>)
 800810c:	4b12      	ldr	r3, [pc, #72]	; (8008158 <MX_I2C2_Init+0x50>)
 800810e:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 8008110:	4b12      	ldr	r3, [pc, #72]	; (800815c <MX_I2C2_Init+0x54>)
 8008112:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8008114:	2300      	movs	r3, #0
 8008116:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008118:	2201      	movs	r2, #1
 800811a:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800811c:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800811e:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008120:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008122:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008124:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008126:	f7fa fc6f 	bl	8002a08 <HAL_I2C_Init>
 800812a:	b950      	cbnz	r0, 8008142 <MX_I2C2_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800812c:	2100      	movs	r1, #0
 800812e:	4809      	ldr	r0, [pc, #36]	; (8008154 <MX_I2C2_Init+0x4c>)
 8008130:	f7fa fd86 	bl	8002c40 <HAL_I2CEx_ConfigAnalogFilter>
 8008134:	b940      	cbnz	r0, 8008148 <MX_I2C2_Init+0x40>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8008136:	2100      	movs	r1, #0
 8008138:	4806      	ldr	r0, [pc, #24]	; (8008154 <MX_I2C2_Init+0x4c>)
 800813a:	f7fa fdaf 	bl	8002c9c <HAL_I2CEx_ConfigDigitalFilter>
 800813e:	b930      	cbnz	r0, 800814e <MX_I2C2_Init+0x46>
  {
    Error_Handler();
  }

}
 8008140:	bd08      	pop	{r3, pc}
    Error_Handler();
 8008142:	f000 f8a1 	bl	8008288 <Error_Handler>
 8008146:	e7f1      	b.n	800812c <MX_I2C2_Init+0x24>
    Error_Handler();
 8008148:	f000 f89e 	bl	8008288 <Error_Handler>
 800814c:	e7f3      	b.n	8008136 <MX_I2C2_Init+0x2e>
    Error_Handler();
 800814e:	f000 f89b 	bl	8008288 <Error_Handler>
}
 8008152:	e7f5      	b.n	8008140 <MX_I2C2_Init+0x38>
 8008154:	20002dd8 	.word	0x20002dd8
 8008158:	40005800 	.word	0x40005800
 800815c:	00b03fdb 	.word	0x00b03fdb

08008160 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008160:	b510      	push	{r4, lr}
 8008162:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008164:	2300      	movs	r3, #0
 8008166:	9303      	str	r3, [sp, #12]
 8008168:	9304      	str	r3, [sp, #16]
 800816a:	9305      	str	r3, [sp, #20]
 800816c:	9306      	str	r3, [sp, #24]
 800816e:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C2)
 8008170:	6802      	ldr	r2, [r0, #0]
 8008172:	4b16      	ldr	r3, [pc, #88]	; (80081cc <HAL_I2C_MspInit+0x6c>)
 8008174:	429a      	cmp	r2, r3
 8008176:	d001      	beq.n	800817c <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8008178:	b008      	add	sp, #32
 800817a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800817c:	4c14      	ldr	r4, [pc, #80]	; (80081d0 <HAL_I2C_MspInit+0x70>)
 800817e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8008182:	f043 0302 	orr.w	r3, r3, #2
 8008186:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800818a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800818e:	f003 0302 	and.w	r3, r3, #2
 8008192:	9301      	str	r3, [sp, #4]
 8008194:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008196:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800819a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800819c:	2312      	movs	r3, #18
 800819e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80081a0:	2303      	movs	r3, #3
 80081a2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80081a4:	2304      	movs	r3, #4
 80081a6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081a8:	a903      	add	r1, sp, #12
 80081aa:	480a      	ldr	r0, [pc, #40]	; (80081d4 <HAL_I2C_MspInit+0x74>)
 80081ac:	f7fa fa3e 	bl	800262c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80081b0:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 80081b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80081b8:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 80081bc:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 80081c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081c4:	9302      	str	r3, [sp, #8]
 80081c6:	9b02      	ldr	r3, [sp, #8]
}
 80081c8:	e7d6      	b.n	8008178 <HAL_I2C_MspInit+0x18>
 80081ca:	bf00      	nop
 80081cc:	40005800 	.word	0x40005800
 80081d0:	58024400 	.word	0x58024400
 80081d4:	58020400 	.word	0x58020400

080081d8 <randomNumber>:
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, SDRAM_REFRESH_COUNT);
}


float randomNumber(void) {
 80081d8:	b500      	push	{lr}
 80081da:	b083      	sub	sp, #12

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 80081dc:	a901      	add	r1, sp, #4
 80081de:	4807      	ldr	r0, [pc, #28]	; (80081fc <randomNumber+0x24>)
 80081e0:	f7fc fda7 	bl	8004d32 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 80081e4:	eddd 7a01 	vldr	s15, [sp, #4]
 80081e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
	return num;
}
 80081ec:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8008200 <randomNumber+0x28>
 80081f0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80081f4:	b003      	add	sp, #12
 80081f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80081fa:	bf00      	nop
 80081fc:	20002e28 	.word	0x20002e28
 8008200:	2f80000d 	.word	0x2f80000d

08008204 <MPU_Conf>:


void MPU_Conf(void)
{
 8008204:	b570      	push	{r4, r5, r6, lr}
 8008206:	b084      	sub	sp, #16
  //Thanks, Keshikan! This solves the issues with accessing the SRAM in the D2 area properly. -JS
	//should test the different possible settings to see what works best while avoiding needing to manually clear the cache -JS

	MPU_Region_InitTypeDef MPU_InitStruct;

	  HAL_MPU_Disable();
 8008208:	f7f8 ffb2 	bl	8001170 <HAL_MPU_Disable>

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800820c:	2401      	movs	r4, #1
 800820e:	f88d 4000 	strb.w	r4, [sp]

	  //D2 Domain�SRAM1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 8008212:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8008216:	9301      	str	r3, [sp, #4]
	  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
	  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
	  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
	  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8008218:	2311      	movs	r3, #17
 800821a:	f88d 3008 	strb.w	r3, [sp, #8]

	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800821e:	2603      	movs	r6, #3
 8008220:	f88d 600b 	strb.w	r6, [sp, #11]

	  //AN4838
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8008224:	f88d 400a 	strb.w	r4, [sp, #10]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8008228:	2500      	movs	r5, #0
 800822a:	f88d 500e 	strb.w	r5, [sp, #14]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800822e:	f88d 500f 	strb.w	r5, [sp, #15]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8008232:	f88d 500d 	strb.w	r5, [sp, #13]
//	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
//	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
//	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8008236:	f88d 5001 	strb.w	r5, [sp, #1]

	  MPU_InitStruct.SubRegionDisable = 0x00;
 800823a:	f88d 5009 	strb.w	r5, [sp, #9]


	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800823e:	f88d 400c 	strb.w	r4, [sp, #12]


	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008242:	4668      	mov	r0, sp
 8008244:	f7f8 ffb6 	bl	80011b4 <HAL_MPU_ConfigRegion>


	  //now set up D3 domain RAM

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8008248:	f88d 4000 	strb.w	r4, [sp]

	 	  //D2 Domain�SRAM1
	 	  MPU_InitStruct.BaseAddress = 0x38000000;
 800824c:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8008250:	9301      	str	r3, [sp, #4]


	 	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8008252:	230f      	movs	r3, #15
 8008254:	f88d 3008 	strb.w	r3, [sp, #8]

	 	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8008258:	f88d 600b 	strb.w	r6, [sp, #11]

	 	  //AN4838
	 	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800825c:	f88d 400a 	strb.w	r4, [sp, #10]
	 	  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8008260:	f88d 400e 	strb.w	r4, [sp, #14]
	 	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8008264:	f88d 400f 	strb.w	r4, [sp, #15]
	 	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8008268:	f88d 400d 	strb.w	r4, [sp, #13]
	 //	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	 //	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	 //	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	 	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800826c:	f88d 4001 	strb.w	r4, [sp, #1]

	 	  MPU_InitStruct.SubRegionDisable = 0x00;
 8008270:	f88d 5009 	strb.w	r5, [sp, #9]


	 	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8008274:	f88d 500c 	strb.w	r5, [sp, #12]


	 	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008278:	4668      	mov	r0, sp
 800827a:	f7f8 ff9b 	bl	80011b4 <HAL_MPU_ConfigRegion>


	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800827e:	2004      	movs	r0, #4
 8008280:	f7f8 ff86 	bl	8001190 <HAL_MPU_Enable>
}
 8008284:	b004      	add	sp, #16
 8008286:	bd70      	pop	{r4, r5, r6, pc}

08008288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008288:	e7fe      	b.n	8008288 <Error_Handler>
	...

0800828c <SystemClock_Config>:
{
 800828c:	b500      	push	{lr}
 800828e:	b0cd      	sub	sp, #308	; 0x134
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008290:	224c      	movs	r2, #76	; 0x4c
 8008292:	2100      	movs	r1, #0
 8008294:	a839      	add	r0, sp, #228	; 0xe4
 8008296:	f001 f8ed 	bl	8009474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800829a:	2220      	movs	r2, #32
 800829c:	2100      	movs	r1, #0
 800829e:	a831      	add	r0, sp, #196	; 0xc4
 80082a0:	f001 f8e8 	bl	8009474 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80082a4:	22bc      	movs	r2, #188	; 0xbc
 80082a6:	2100      	movs	r1, #0
 80082a8:	a802      	add	r0, sp, #8
 80082aa:	f001 f8e3 	bl	8009474 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80082ae:	2002      	movs	r0, #2
 80082b0:	f7fa fd20 	bl	8002cf4 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80082b4:	2300      	movs	r3, #0
 80082b6:	9301      	str	r3, [sp, #4]
 80082b8:	4b3a      	ldr	r3, [pc, #232]	; (80083a4 <SystemClock_Config+0x118>)
 80082ba:	699a      	ldr	r2, [r3, #24]
 80082bc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80082c0:	619a      	str	r2, [r3, #24]
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80082c8:	9301      	str	r3, [sp, #4]
 80082ca:	4b37      	ldr	r3, [pc, #220]	; (80083a8 <SystemClock_Config+0x11c>)
 80082cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ce:	f042 0201 	orr.w	r2, r2, #1
 80082d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80082d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	9301      	str	r3, [sp, #4]
 80082dc:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80082de:	4b31      	ldr	r3, [pc, #196]	; (80083a4 <SystemClock_Config+0x118>)
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80082e6:	d0fa      	beq.n	80082de <SystemClock_Config+0x52>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80082e8:	4a30      	ldr	r2, [pc, #192]	; (80083ac <SystemClock_Config+0x120>)
 80082ea:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80082ec:	f023 0303 	bic.w	r3, r3, #3
 80082f0:	f043 0302 	orr.w	r3, r3, #2
 80082f4:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80082f6:	2321      	movs	r3, #33	; 0x21
 80082f8:	9339      	str	r3, [sp, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80082fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80082fe:	933a      	str	r3, [sp, #232]	; 0xe8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8008300:	2301      	movs	r3, #1
 8008302:	933f      	str	r3, [sp, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008304:	2302      	movs	r3, #2
 8008306:	9342      	str	r3, [sp, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008308:	9343      	str	r3, [sp, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800830a:	2205      	movs	r2, #5
 800830c:	9244      	str	r2, [sp, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 192;
 800830e:	22c0      	movs	r2, #192	; 0xc0
 8008310:	9245      	str	r2, [sp, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8008312:	9346      	str	r3, [sp, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008314:	9347      	str	r3, [sp, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8008316:	9348      	str	r3, [sp, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8008318:	2308      	movs	r3, #8
 800831a:	9349      	str	r3, [sp, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800831c:	2300      	movs	r3, #0
 800831e:	934a      	str	r3, [sp, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8008320:	934b      	str	r3, [sp, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008322:	a839      	add	r0, sp, #228	; 0xe4
 8008324:	f7fa fd10 	bl	8002d48 <HAL_RCC_OscConfig>
 8008328:	2800      	cmp	r0, #0
 800832a:	d134      	bne.n	8008396 <SystemClock_Config+0x10a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800832c:	233f      	movs	r3, #63	; 0x3f
 800832e:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008330:	2303      	movs	r3, #3
 8008332:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8008334:	2300      	movs	r3, #0
 8008336:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8008338:	2308      	movs	r3, #8
 800833a:	9334      	str	r3, [sp, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800833c:	2340      	movs	r3, #64	; 0x40
 800833e:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8008340:	9336      	str	r3, [sp, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8008342:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008346:	9237      	str	r2, [sp, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8008348:	9338      	str	r3, [sp, #224]	; 0xe0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800834a:	2104      	movs	r1, #4
 800834c:	a831      	add	r0, sp, #196	; 0xc4
 800834e:	f7fb f8e9 	bl	8003524 <HAL_RCC_ClockConfig>
 8008352:	bb10      	cbnz	r0, 800839a <SystemClock_Config+0x10e>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_SPI2
 8008354:	4b16      	ldr	r3, [pc, #88]	; (80083b0 <SystemClock_Config+0x124>)
 8008356:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8008358:	2319      	movs	r3, #25
 800835a:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 800835c:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8008360:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 8008362:	2307      	movs	r3, #7
 8008364:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8008366:	2302      	movs	r3, #2
 8008368:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800836a:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800836c:	2300      	movs	r3, #0
 800836e:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8008370:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8008372:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8008374:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8008376:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800837a:	9215      	str	r2, [sp, #84]	; 0x54
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800837c:	2201      	movs	r2, #1
 800837e:	9217      	str	r2, [sp, #92]	; 0x5c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8008380:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8008382:	9321      	str	r3, [sp, #132]	; 0x84
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8008384:	9322      	str	r3, [sp, #136]	; 0x88
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8008386:	932a      	str	r3, [sp, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008388:	a802      	add	r0, sp, #8
 800838a:	f7fb fb43 	bl	8003a14 <HAL_RCCEx_PeriphCLKConfig>
 800838e:	b930      	cbnz	r0, 800839e <SystemClock_Config+0x112>
}
 8008390:	b04d      	add	sp, #308	; 0x134
 8008392:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8008396:	f7ff ff77 	bl	8008288 <Error_Handler>
    Error_Handler();
 800839a:	f7ff ff75 	bl	8008288 <Error_Handler>
    Error_Handler();
 800839e:	f7ff ff73 	bl	8008288 <Error_Handler>
 80083a2:	bf00      	nop
 80083a4:	58024800 	.word	0x58024800
 80083a8:	58000400 	.word	0x58000400
 80083ac:	58024400 	.word	0x58024400
 80083b0:	010b1108 	.word	0x010b1108

080083b4 <main>:
{
 80083b4:	b510      	push	{r4, lr}
  MPU_Conf();
 80083b6:	f7ff ff25 	bl	8008204 <MPU_Conf>
  __ASM volatile ("dsb 0xF":::"memory");
 80083ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80083be:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80083c2:	4b3e      	ldr	r3, [pc, #248]	; (80084bc <main+0x108>)
 80083c4:	2100      	movs	r1, #0
 80083c6:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80083ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80083ce:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80083d2:	695a      	ldr	r2, [r3, #20]
 80083d4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80083d8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80083da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80083de:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80083e2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80083e6:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80083ea:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80083ee:	f3c4 314e 	ubfx	r1, r4, #13, #15
 80083f2:	e00f      	b.n	8008414 <main+0x60>
      } while (ways-- != 0U);
 80083f4:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80083f6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80083fa:	ea03 1341 	and.w	r3, r3, r1, lsl #5
 80083fe:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8008402:	482e      	ldr	r0, [pc, #184]	; (80084bc <main+0x108>)
 8008404:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8008408:	1e53      	subs	r3, r2, #1
 800840a:	2a00      	cmp	r2, #0
 800840c:	d1f2      	bne.n	80083f4 <main+0x40>
    } while(sets-- != 0U);
 800840e:	1e4b      	subs	r3, r1, #1
 8008410:	b119      	cbz	r1, 800841a <main+0x66>
 8008412:	4619      	mov	r1, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8008414:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 8008418:	e7ed      	b.n	80083f6 <main+0x42>
 800841a:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800841e:	6943      	ldr	r3, [r0, #20]
 8008420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008424:	6143      	str	r3, [r0, #20]
 8008426:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800842a:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800842e:	f7f7 ff79 	bl	8000324 <HAL_Init>
  SystemClock_Config();
 8008432:	f7ff ff2b 	bl	800828c <SystemClock_Config>
  MX_GPIO_Init();
 8008436:	f7ff fd8f 	bl	8007f58 <MX_GPIO_Init>
  MX_DMA_Init();
 800843a:	f7ff fc95 	bl	8007d68 <MX_DMA_Init>
  MX_FMC_Init();
 800843e:	f7ff fd51 	bl	8007ee4 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 8008442:	f000 f9db 	bl	80087fc <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8008446:	f7ff fccb 	bl	8007de0 <MX_FATFS_Init>
  MX_SAI1_Init();
 800844a:	f000 f873 	bl	8008534 <MX_SAI1_Init>
  MX_RNG_Init();
 800844e:	f000 f845 	bl	80084dc <MX_RNG_Init>
  MX_SPI2_Init();
 8008452:	f000 fa3b 	bl	80088cc <MX_SPI2_Init>
  MX_I2C2_Init();
 8008456:	f7ff fe57 	bl	8008108 <MX_I2C2_Init>
  MX_ADC1_Init();
 800845a:	f7ff f8ad 	bl	80075b8 <MX_ADC1_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800845e:	2200      	movs	r2, #0
 8008460:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008464:	4816      	ldr	r0, [pc, #88]	; (80084c0 <main+0x10c>)
 8008466:	f7fa f9d8 	bl	800281a <HAL_GPIO_WritePin>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 800846a:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 800846e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 8008472:	eee1 3a10 	vmsr	fpscr, r3
  for (int i = 0; i < 16; i++)
 8008476:	2300      	movs	r3, #0
 8008478:	e006      	b.n	8008488 <main+0xd4>
	  SPI_TX[i] = counter++;
 800847a:	4912      	ldr	r1, [pc, #72]	; (80084c4 <main+0x110>)
 800847c:	780a      	ldrb	r2, [r1, #0]
 800847e:	1c50      	adds	r0, r2, #1
 8008480:	7008      	strb	r0, [r1, #0]
 8008482:	4911      	ldr	r1, [pc, #68]	; (80084c8 <main+0x114>)
 8008484:	54ca      	strb	r2, [r1, r3]
  for (int i = 0; i < 16; i++)
 8008486:	3301      	adds	r3, #1
 8008488:	2b0f      	cmp	r3, #15
 800848a:	ddf6      	ble.n	800847a <main+0xc6>
  HAL_SPI_TransmitReceive_DMA(&hspi2, SPI_TX, SPI_RX, 16);
 800848c:	490e      	ldr	r1, [pc, #56]	; (80084c8 <main+0x114>)
 800848e:	2310      	movs	r3, #16
 8008490:	f101 0220 	add.w	r2, r1, #32
 8008494:	480d      	ldr	r0, [pc, #52]	; (80084cc <main+0x118>)
 8008496:	f7fe f935 	bl	8006704 <HAL_SPI_TransmitReceive_DMA>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800849a:	2201      	movs	r2, #1
 800849c:	2140      	movs	r1, #64	; 0x40
 800849e:	4808      	ldr	r0, [pc, #32]	; (80084c0 <main+0x10c>)
 80084a0:	f7fa f9bb 	bl	800281a <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80084a4:	200a      	movs	r0, #10
 80084a6:	f7f7 ff7d 	bl	80003a4 <HAL_Delay>
  HAL_Delay(100);
 80084aa:	2064      	movs	r0, #100	; 0x64
 80084ac:	f7f7 ff7a 	bl	80003a4 <HAL_Delay>
  audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 80084b0:	4a07      	ldr	r2, [pc, #28]	; (80084d0 <main+0x11c>)
 80084b2:	4908      	ldr	r1, [pc, #32]	; (80084d4 <main+0x120>)
 80084b4:	4808      	ldr	r0, [pc, #32]	; (80084d8 <main+0x124>)
 80084b6:	f7ff fa1b 	bl	80078f0 <audioInit>
 80084ba:	e7fe      	b.n	80084ba <main+0x106>
 80084bc:	e000ed00 	.word	0xe000ed00
 80084c0:	58020800 	.word	0x58020800
 80084c4:	20002e24 	.word	0x20002e24
 80084c8:	30000500 	.word	0x30000500
 80084cc:	200030dc 	.word	0x200030dc
 80084d0:	20002e3c 	.word	0x20002e3c
 80084d4:	20002fc4 	.word	0x20002fc4
 80084d8:	20002dd8 	.word	0x20002dd8

080084dc <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80084dc:	b508      	push	{r3, lr}

  hrng.Instance = RNG;
 80084de:	4806      	ldr	r0, [pc, #24]	; (80084f8 <MX_RNG_Init+0x1c>)
 80084e0:	4b06      	ldr	r3, [pc, #24]	; (80084fc <MX_RNG_Init+0x20>)
 80084e2:	6003      	str	r3, [r0, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80084e4:	2300      	movs	r3, #0
 80084e6:	6043      	str	r3, [r0, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80084e8:	f7fc fbe8 	bl	8004cbc <HAL_RNG_Init>
 80084ec:	b900      	cbnz	r0, 80084f0 <MX_RNG_Init+0x14>
  {
    Error_Handler();
  }

}
 80084ee:	bd08      	pop	{r3, pc}
    Error_Handler();
 80084f0:	f7ff feca 	bl	8008288 <Error_Handler>
}
 80084f4:	e7fb      	b.n	80084ee <MX_RNG_Init+0x12>
 80084f6:	bf00      	nop
 80084f8:	20002e28 	.word	0x20002e28
 80084fc:	48021800 	.word	0x48021800

08008500 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{

  if(rngHandle->Instance==RNG)
 8008500:	6802      	ldr	r2, [r0, #0]
 8008502:	4b0a      	ldr	r3, [pc, #40]	; (800852c <HAL_RNG_MspInit+0x2c>)
 8008504:	429a      	cmp	r2, r3
 8008506:	d000      	beq.n	800850a <HAL_RNG_MspInit+0xa>
 8008508:	4770      	bx	lr
{
 800850a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800850c:	4b08      	ldr	r3, [pc, #32]	; (8008530 <HAL_RNG_MspInit+0x30>)
 800850e:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8008512:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008516:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800851a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800851e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008522:	9301      	str	r3, [sp, #4]
 8008524:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8008526:	b002      	add	sp, #8
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	48021800 	.word	0x48021800
 8008530:	58024400 	.word	0x58024400

08008534 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8008534:	b508      	push	{r3, lr}

  hsai_BlockA1.Instance = SAI1_Block_A;
 8008536:	4818      	ldr	r0, [pc, #96]	; (8008598 <MX_SAI1_Init+0x64>)
 8008538:	4b18      	ldr	r3, [pc, #96]	; (800859c <MX_SAI1_Init+0x68>)
 800853a:	6003      	str	r3, [r0, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800853c:	2100      	movs	r1, #0
 800853e:	6041      	str	r1, [r0, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8008540:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8008542:	6141      	str	r1, [r0, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8008544:	6181      	str	r1, [r0, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8008546:	2301      	movs	r3, #1
 8008548:	61c3      	str	r3, [r0, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800854a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800854e:	6203      	str	r3, [r0, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8008550:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8008552:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8008554:	6301      	str	r1, [r0, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8008556:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8008558:	2302      	movs	r3, #2
 800855a:	461a      	mov	r2, r3
 800855c:	f7fc feee 	bl	800533c <HAL_SAI_InitProtocol>
 8008560:	b998      	cbnz	r0, 800858a <MX_SAI1_Init+0x56>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8008562:	480f      	ldr	r0, [pc, #60]	; (80085a0 <MX_SAI1_Init+0x6c>)
 8008564:	4b0f      	ldr	r3, [pc, #60]	; (80085a4 <MX_SAI1_Init+0x70>)
 8008566:	6003      	str	r3, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8008568:	2303      	movs	r3, #3
 800856a:	6043      	str	r3, [r0, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800856c:	2301      	movs	r3, #1
 800856e:	6083      	str	r3, [r0, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8008570:	2100      	movs	r1, #0
 8008572:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8008574:	61c3      	str	r3, [r0, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8008576:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8008578:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800857a:	6301      	str	r1, [r0, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800857c:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800857e:	2302      	movs	r3, #2
 8008580:	461a      	mov	r2, r3
 8008582:	f7fc fedb 	bl	800533c <HAL_SAI_InitProtocol>
 8008586:	b918      	cbnz	r0, 8008590 <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
  }

}
 8008588:	bd08      	pop	{r3, pc}
    Error_Handler();
 800858a:	f7ff fe7d 	bl	8008288 <Error_Handler>
 800858e:	e7e8      	b.n	8008562 <MX_SAI1_Init+0x2e>
    Error_Handler();
 8008590:	f7ff fe7a 	bl	8008288 <Error_Handler>
}
 8008594:	e7f8      	b.n	8008588 <MX_SAI1_Init+0x54>
 8008596:	bf00      	nop
 8008598:	20002fc4 	.word	0x20002fc4
 800859c:	40015804 	.word	0x40015804
 80085a0:	20002e3c 	.word	0x20002e3c
 80085a4:	40015824 	.word	0x40015824

080085a8 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80085a8:	b530      	push	{r4, r5, lr}
 80085aa:	b089      	sub	sp, #36	; 0x24
 80085ac:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80085ae:	6802      	ldr	r2, [r0, #0]
 80085b0:	4b4d      	ldr	r3, [pc, #308]	; (80086e8 <HAL_SAI_MspInit+0x140>)
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d005      	beq.n	80085c2 <HAL_SAI_MspInit+0x1a>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
    }
    if(hsai->Instance==SAI1_Block_B)
 80085b6:	6822      	ldr	r2, [r4, #0]
 80085b8:	4b4c      	ldr	r3, [pc, #304]	; (80086ec <HAL_SAI_MspInit+0x144>)
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d04b      	beq.n	8008656 <HAL_SAI_MspInit+0xae>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
    }
}
 80085be:	b009      	add	sp, #36	; 0x24
 80085c0:	bd30      	pop	{r4, r5, pc}
    if (SAI1_client == 0)
 80085c2:	4b4b      	ldr	r3, [pc, #300]	; (80086f0 <HAL_SAI_MspInit+0x148>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	b963      	cbnz	r3, 80085e2 <HAL_SAI_MspInit+0x3a>
       __HAL_RCC_SAI1_CLK_ENABLE();
 80085c8:	4a4a      	ldr	r2, [pc, #296]	; (80086f4 <HAL_SAI_MspInit+0x14c>)
 80085ca:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 80085ce:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80085d2:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
 80085d6:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 80085da:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80085de:	9201      	str	r2, [sp, #4]
 80085e0:	9a01      	ldr	r2, [sp, #4]
    SAI1_client ++;
 80085e2:	3301      	adds	r3, #1
 80085e4:	4a42      	ldr	r2, [pc, #264]	; (80086f0 <HAL_SAI_MspInit+0x148>)
 80085e6:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80085e8:	2374      	movs	r3, #116	; 0x74
 80085ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085ec:	2302      	movs	r3, #2
 80085ee:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085f0:	2500      	movs	r5, #0
 80085f2:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085f4:	2303      	movs	r3, #3
 80085f6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80085f8:	2306      	movs	r3, #6
 80085fa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80085fc:	a903      	add	r1, sp, #12
 80085fe:	483e      	ldr	r0, [pc, #248]	; (80086f8 <HAL_SAI_MspInit+0x150>)
 8008600:	f7fa f814 	bl	800262c <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 8008604:	483d      	ldr	r0, [pc, #244]	; (80086fc <HAL_SAI_MspInit+0x154>)
 8008606:	4b3e      	ldr	r3, [pc, #248]	; (8008700 <HAL_SAI_MspInit+0x158>)
 8008608:	6003      	str	r3, [r0, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800860a:	2357      	movs	r3, #87	; 0x57
 800860c:	6043      	str	r3, [r0, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800860e:	2340      	movs	r3, #64	; 0x40
 8008610:	6083      	str	r3, [r0, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8008612:	60c5      	str	r5, [r0, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8008614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008618:	6103      	str	r3, [r0, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800861a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800861e:	6143      	str	r3, [r0, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008620:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008624:	6183      	str	r3, [r0, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8008626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800862a:	61c3      	str	r3, [r0, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800862c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8008630:	6203      	str	r3, [r0, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008632:	2304      	movs	r3, #4
 8008634:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8008636:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8008638:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800863a:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800863c:	f7f8 fff8 	bl	8001630 <HAL_DMA_Init>
 8008640:	b930      	cbnz	r0, 8008650 <HAL_SAI_MspInit+0xa8>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8008642:	4b2e      	ldr	r3, [pc, #184]	; (80086fc <HAL_SAI_MspInit+0x154>)
 8008644:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8008648:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 800864a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800864e:	e7b2      	b.n	80085b6 <HAL_SAI_MspInit+0xe>
      Error_Handler();
 8008650:	f7ff fe1a 	bl	8008288 <Error_Handler>
 8008654:	e7f5      	b.n	8008642 <HAL_SAI_MspInit+0x9a>
      if (SAI1_client == 0)
 8008656:	4b26      	ldr	r3, [pc, #152]	; (80086f0 <HAL_SAI_MspInit+0x148>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	b963      	cbnz	r3, 8008676 <HAL_SAI_MspInit+0xce>
       __HAL_RCC_SAI1_CLK_ENABLE();
 800865c:	4a25      	ldr	r2, [pc, #148]	; (80086f4 <HAL_SAI_MspInit+0x14c>)
 800865e:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 8008662:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8008666:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
 800866a:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 800866e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8008672:	9202      	str	r2, [sp, #8]
 8008674:	9a02      	ldr	r2, [sp, #8]
    SAI1_client ++;
 8008676:	3301      	adds	r3, #1
 8008678:	4a1d      	ldr	r2, [pc, #116]	; (80086f0 <HAL_SAI_MspInit+0x148>)
 800867a:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800867c:	2308      	movs	r3, #8
 800867e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008680:	2302      	movs	r3, #2
 8008682:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008684:	2500      	movs	r5, #0
 8008686:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008688:	2303      	movs	r3, #3
 800868a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800868c:	2306      	movs	r3, #6
 800868e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008690:	a903      	add	r1, sp, #12
 8008692:	4819      	ldr	r0, [pc, #100]	; (80086f8 <HAL_SAI_MspInit+0x150>)
 8008694:	f7f9 ffca 	bl	800262c <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 8008698:	481a      	ldr	r0, [pc, #104]	; (8008704 <HAL_SAI_MspInit+0x15c>)
 800869a:	4b1b      	ldr	r3, [pc, #108]	; (8008708 <HAL_SAI_MspInit+0x160>)
 800869c:	6003      	str	r3, [r0, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800869e:	2358      	movs	r3, #88	; 0x58
 80086a0:	6043      	str	r3, [r0, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80086a2:	6085      	str	r5, [r0, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80086a4:	60c5      	str	r5, [r0, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80086a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086aa:	6103      	str	r3, [r0, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80086ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086b0:	6143      	str	r3, [r0, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80086b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80086b6:	6183      	str	r3, [r0, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80086b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086bc:	61c3      	str	r3, [r0, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80086be:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80086c2:	6203      	str	r3, [r0, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80086c4:	2304      	movs	r3, #4
 80086c6:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80086c8:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 80086ca:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80086cc:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80086ce:	f7f8 ffaf 	bl	8001630 <HAL_DMA_Init>
 80086d2:	b930      	cbnz	r0, 80086e2 <HAL_SAI_MspInit+0x13a>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 80086d4:	4b0b      	ldr	r3, [pc, #44]	; (8008704 <HAL_SAI_MspInit+0x15c>)
 80086d6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80086da:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 80086dc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 80086e0:	e76d      	b.n	80085be <HAL_SAI_MspInit+0x16>
      Error_Handler();
 80086e2:	f7ff fdd1 	bl	8008288 <Error_Handler>
 80086e6:	e7f5      	b.n	80086d4 <HAL_SAI_MspInit+0x12c>
 80086e8:	40015804 	.word	0x40015804
 80086ec:	40015824 	.word	0x40015824
 80086f0:	20000378 	.word	0x20000378
 80086f4:	58024400 	.word	0x58024400
 80086f8:	58021000 	.word	0x58021000
 80086fc:	20002ed4 	.word	0x20002ed4
 8008700:	40020028 	.word	0x40020028
 8008704:	20002f4c 	.word	0x20002f4c
 8008708:	40020040 	.word	0x40020040

0800870c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800870c:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 800870e:	4b07      	ldr	r3, [pc, #28]	; (800872c <SD_CheckStatus+0x20>)
 8008710:	2201      	movs	r2, #1
 8008712:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008714:	f7ff fa5c 	bl	8007bd0 <BSP_SD_GetCardState>
 8008718:	b920      	cbnz	r0, 8008724 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 800871a:	4a04      	ldr	r2, [pc, #16]	; (800872c <SD_CheckStatus+0x20>)
 800871c:	7813      	ldrb	r3, [r2, #0]
 800871e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008722:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 8008724:	4b01      	ldr	r3, [pc, #4]	; (800872c <SD_CheckStatus+0x20>)
 8008726:	7818      	ldrb	r0, [r3, #0]
}
 8008728:	bd08      	pop	{r3, pc}
 800872a:	bf00      	nop
 800872c:	20000284 	.word	0x20000284

08008730 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008730:	b510      	push	{r4, lr}
 8008732:	4604      	mov	r4, r0
Stat = STA_NOINIT;  
 8008734:	4b07      	ldr	r3, [pc, #28]	; (8008754 <SD_initialize+0x24>)
 8008736:	2201      	movs	r2, #1
 8008738:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800873a:	f7ff fa6b 	bl	8007c14 <BSP_SD_Init>
 800873e:	b110      	cbz	r0, 8008746 <SD_initialize+0x16>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008740:	4b04      	ldr	r3, [pc, #16]	; (8008754 <SD_initialize+0x24>)
 8008742:	7818      	ldrb	r0, [r3, #0]
}
 8008744:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 8008746:	4620      	mov	r0, r4
 8008748:	f7ff ffe0 	bl	800870c <SD_CheckStatus>
 800874c:	4b01      	ldr	r3, [pc, #4]	; (8008754 <SD_initialize+0x24>)
 800874e:	7018      	strb	r0, [r3, #0]
 8008750:	e7f6      	b.n	8008740 <SD_initialize+0x10>
 8008752:	bf00      	nop
 8008754:	20000284 	.word	0x20000284

08008758 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008758:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 800875a:	f7ff ffd7 	bl	800870c <SD_CheckStatus>
}
 800875e:	bd08      	pop	{r3, pc}

08008760 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008760:	b508      	push	{r3, lr}
 8008762:	4608      	mov	r0, r1
 8008764:	4611      	mov	r1, r2
 8008766:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800876c:	f7ff fa10 	bl	8007b90 <BSP_SD_ReadBlocks>
 8008770:	b920      	cbnz	r0, 800877c <SD_read+0x1c>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008772:	f7ff fa2d 	bl	8007bd0 <BSP_SD_GetCardState>
 8008776:	2800      	cmp	r0, #0
 8008778:	d1fb      	bne.n	8008772 <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 800877a:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 800877c:	2001      	movs	r0, #1
 800877e:	e7fc      	b.n	800877a <SD_read+0x1a>

08008780 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008780:	b508      	push	{r3, lr}
 8008782:	4608      	mov	r0, r1
 8008784:	4611      	mov	r1, r2
 8008786:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8008788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800878c:	f7ff fa10 	bl	8007bb0 <BSP_SD_WriteBlocks>
 8008790:	b920      	cbnz	r0, 800879c <SD_write+0x1c>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8008792:	f7ff fa1d 	bl	8007bd0 <BSP_SD_GetCardState>
 8008796:	2800      	cmp	r0, #0
 8008798:	d1fb      	bne.n	8008792 <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 800879a:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 800879c:	2001      	movs	r0, #1
 800879e:	e7fc      	b.n	800879a <SD_write+0x1a>

080087a0 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80087a0:	4b15      	ldr	r3, [pc, #84]	; (80087f8 <SD_ioctl+0x58>)
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	f013 0f01 	tst.w	r3, #1
 80087a8:	d121      	bne.n	80087ee <SD_ioctl+0x4e>
{
 80087aa:	b510      	push	{r4, lr}
 80087ac:	b08a      	sub	sp, #40	; 0x28
 80087ae:	4614      	mov	r4, r2

  switch (cmd)
 80087b0:	2903      	cmp	r1, #3
 80087b2:	d81e      	bhi.n	80087f2 <SD_ioctl+0x52>
 80087b4:	e8df f001 	tbb	[pc, r1]
 80087b8:	130c0502 	.word	0x130c0502
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80087bc:	2000      	movs	r0, #0
  default:
    res = RES_PARERR;
  }

  return res;
}
 80087be:	b00a      	add	sp, #40	; 0x28
 80087c0:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 80087c2:	a801      	add	r0, sp, #4
 80087c4:	f7ff fa0e 	bl	8007be4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80087c8:	9b07      	ldr	r3, [sp, #28]
 80087ca:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 80087cc:	2000      	movs	r0, #0
    break;
 80087ce:	e7f6      	b.n	80087be <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 80087d0:	a801      	add	r0, sp, #4
 80087d2:	f7ff fa07 	bl	8007be4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80087d6:	9b08      	ldr	r3, [sp, #32]
 80087d8:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 80087da:	2000      	movs	r0, #0
    break;
 80087dc:	e7ef      	b.n	80087be <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 80087de:	a801      	add	r0, sp, #4
 80087e0:	f7ff fa00 	bl	8007be4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80087e4:	9b08      	ldr	r3, [sp, #32]
 80087e6:	0a5b      	lsrs	r3, r3, #9
 80087e8:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 80087ea:	2000      	movs	r0, #0
    break;
 80087ec:	e7e7      	b.n	80087be <SD_ioctl+0x1e>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80087ee:	2003      	movs	r0, #3
}
 80087f0:	4770      	bx	lr
    res = RES_PARERR;
 80087f2:	2004      	movs	r0, #4
 80087f4:	e7e3      	b.n	80087be <SD_ioctl+0x1e>
 80087f6:	bf00      	nop
 80087f8:	20000284 	.word	0x20000284

080087fc <MX_SDMMC1_SD_Init>:
/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{

  hsd1.Instance = SDMMC1;
 80087fc:	4b06      	ldr	r3, [pc, #24]	; (8008818 <MX_SDMMC1_SD_Init+0x1c>)
 80087fe:	4a07      	ldr	r2, [pc, #28]	; (800881c <MX_SDMMC1_SD_Init+0x20>)
 8008800:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8008802:	2200      	movs	r2, #0
 8008804:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008806:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8008808:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800880c:	60d9      	str	r1, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800880e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8008810:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8008812:	2201      	movs	r2, #1
 8008814:	619a      	str	r2, [r3, #24]

}
 8008816:	4770      	bx	lr
 8008818:	2000305c 	.word	0x2000305c
 800881c:	52007000 	.word	0x52007000

08008820 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8008820:	b570      	push	{r4, r5, r6, lr}
 8008822:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008824:	2300      	movs	r3, #0
 8008826:	9303      	str	r3, [sp, #12]
 8008828:	9304      	str	r3, [sp, #16]
 800882a:	9305      	str	r3, [sp, #20]
 800882c:	9306      	str	r3, [sp, #24]
 800882e:	9307      	str	r3, [sp, #28]
  if(sdHandle->Instance==SDMMC1)
 8008830:	6802      	ldr	r2, [r0, #0]
 8008832:	4b22      	ldr	r3, [pc, #136]	; (80088bc <HAL_SD_MspInit+0x9c>)
 8008834:	429a      	cmp	r2, r3
 8008836:	d001      	beq.n	800883c <HAL_SD_MspInit+0x1c>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8008838:	b008      	add	sp, #32
 800883a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800883c:	4b20      	ldr	r3, [pc, #128]	; (80088c0 <HAL_SD_MspInit+0xa0>)
 800883e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8008842:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008846:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800884a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800884e:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8008852:	9200      	str	r2, [sp, #0]
 8008854:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008856:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800885a:	f042 0204 	orr.w	r2, r2, #4
 800885e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008862:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008866:	f002 0204 	and.w	r2, r2, #4
 800886a:	9201      	str	r2, [sp, #4]
 800886c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800886e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008872:	f042 0208 	orr.w	r2, r2, #8
 8008876:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800887a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800887e:	f003 0308 	and.w	r3, r3, #8
 8008882:	9302      	str	r3, [sp, #8]
 8008884:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8008886:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800888a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800888c:	2602      	movs	r6, #2
 800888e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008890:	2503      	movs	r5, #3
 8008892:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8008894:	240c      	movs	r4, #12
 8008896:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008898:	eb0d 0104 	add.w	r1, sp, r4
 800889c:	4809      	ldr	r0, [pc, #36]	; (80088c4 <HAL_SD_MspInit+0xa4>)
 800889e:	f7f9 fec5 	bl	800262c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80088a2:	2304      	movs	r3, #4
 80088a4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088a6:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088a8:	2300      	movs	r3, #0
 80088aa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088ac:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80088ae:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80088b0:	eb0d 0104 	add.w	r1, sp, r4
 80088b4:	4804      	ldr	r0, [pc, #16]	; (80088c8 <HAL_SD_MspInit+0xa8>)
 80088b6:	f7f9 feb9 	bl	800262c <HAL_GPIO_Init>
}
 80088ba:	e7bd      	b.n	8008838 <HAL_SD_MspInit+0x18>
 80088bc:	52007000 	.word	0x52007000
 80088c0:	58024400 	.word	0x58024400
 80088c4:	58020800 	.word	0x58020800
 80088c8:	58020c00 	.word	0x58020c00

080088cc <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80088cc:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 80088ce:	4810      	ldr	r0, [pc, #64]	; (8008910 <MX_SPI2_Init+0x44>)
 80088d0:	4b10      	ldr	r3, [pc, #64]	; (8008914 <MX_SPI2_Init+0x48>)
 80088d2:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80088d4:	2300      	movs	r3, #0
 80088d6:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80088d8:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80088da:	2207      	movs	r2, #7
 80088dc:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80088de:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80088e0:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80088e2:	6183      	str	r3, [r0, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80088e4:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80088e6:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088e8:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80088ea:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80088ec:	6343      	str	r3, [r0, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80088ee:	6383      	str	r3, [r0, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80088f0:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80088f2:	6403      	str	r3, [r0, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80088f4:	6443      	str	r3, [r0, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80088f6:	6483      	str	r3, [r0, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80088f8:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80088fa:	6503      	str	r3, [r0, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80088fc:	6543      	str	r3, [r0, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80088fe:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8008900:	f7fd fe58 	bl	80065b4 <HAL_SPI_Init>
 8008904:	b900      	cbnz	r0, 8008908 <MX_SPI2_Init+0x3c>
  {
    Error_Handler();
  }

}
 8008906:	bd08      	pop	{r3, pc}
    Error_Handler();
 8008908:	f7ff fcbe 	bl	8008288 <Error_Handler>
}
 800890c:	e7fb      	b.n	8008906 <MX_SPI2_Init+0x3a>
 800890e:	bf00      	nop
 8008910:	200030dc 	.word	0x200030dc
 8008914:	40003800 	.word	0x40003800

08008918 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008918:	b510      	push	{r4, lr}
 800891a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800891c:	2300      	movs	r3, #0
 800891e:	9303      	str	r3, [sp, #12]
 8008920:	9304      	str	r3, [sp, #16]
 8008922:	9305      	str	r3, [sp, #20]
 8008924:	9306      	str	r3, [sp, #24]
 8008926:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 8008928:	6802      	ldr	r2, [r0, #0]
 800892a:	4b3d      	ldr	r3, [pc, #244]	; (8008a20 <HAL_SPI_MspInit+0x108>)
 800892c:	429a      	cmp	r2, r3
 800892e:	d001      	beq.n	8008934 <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8008930:	b008      	add	sp, #32
 8008932:	bd10      	pop	{r4, pc}
 8008934:	4604      	mov	r4, r0
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008936:	4b3b      	ldr	r3, [pc, #236]	; (8008a24 <HAL_SPI_MspInit+0x10c>)
 8008938:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800893c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008940:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8008944:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8008948:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800894c:	9201      	str	r2, [sp, #4]
 800894e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008950:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008954:	f042 0202 	orr.w	r2, r2, #2
 8008958:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800895c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008960:	f003 0302 	and.w	r3, r3, #2
 8008964:	9302      	str	r3, [sp, #8]
 8008966:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8008968:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800896c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800896e:	2302      	movs	r3, #2
 8008970:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008972:	2303      	movs	r3, #3
 8008974:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008976:	2305      	movs	r3, #5
 8008978:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800897a:	a903      	add	r1, sp, #12
 800897c:	482a      	ldr	r0, [pc, #168]	; (8008a28 <HAL_SPI_MspInit+0x110>)
 800897e:	f7f9 fe55 	bl	800262c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8008982:	482a      	ldr	r0, [pc, #168]	; (8008a2c <HAL_SPI_MspInit+0x114>)
 8008984:	4b2a      	ldr	r3, [pc, #168]	; (8008a30 <HAL_SPI_MspInit+0x118>)
 8008986:	6003      	str	r3, [r0, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8008988:	2327      	movs	r3, #39	; 0x27
 800898a:	6043      	str	r3, [r0, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800898c:	2300      	movs	r3, #0
 800898e:	6083      	str	r3, [r0, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008990:	60c3      	str	r3, [r0, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008992:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008996:	6102      	str	r2, [r0, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008998:	6143      	str	r3, [r0, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800899a:	6183      	str	r3, [r0, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800899c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089a0:	61c2      	str	r2, [r0, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80089a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80089a6:	6202      	str	r2, [r0, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80089a8:	2204      	movs	r2, #4
 80089aa:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80089ac:	2201      	movs	r2, #1
 80089ae:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80089b0:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80089b2:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80089b4:	f7f8 fe3c 	bl	8001630 <HAL_DMA_Init>
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d12b      	bne.n	8008a14 <HAL_SPI_MspInit+0xfc>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80089bc:	4b1b      	ldr	r3, [pc, #108]	; (8008a2c <HAL_SPI_MspInit+0x114>)
 80089be:	67e3      	str	r3, [r4, #124]	; 0x7c
 80089c0:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80089c2:	481c      	ldr	r0, [pc, #112]	; (8008a34 <HAL_SPI_MspInit+0x11c>)
 80089c4:	4b1c      	ldr	r3, [pc, #112]	; (8008a38 <HAL_SPI_MspInit+0x120>)
 80089c6:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80089c8:	2328      	movs	r3, #40	; 0x28
 80089ca:	6043      	str	r3, [r0, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80089cc:	2340      	movs	r3, #64	; 0x40
 80089ce:	6083      	str	r3, [r0, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80089d0:	2300      	movs	r3, #0
 80089d2:	60c3      	str	r3, [r0, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80089d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80089d8:	6102      	str	r2, [r0, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80089da:	6143      	str	r3, [r0, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80089dc:	6183      	str	r3, [r0, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80089de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089e2:	61c2      	str	r2, [r0, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80089e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80089e8:	6202      	str	r2, [r0, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80089ea:	2204      	movs	r2, #4
 80089ec:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80089ee:	2201      	movs	r2, #1
 80089f0:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80089f2:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80089f4:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80089f6:	f7f8 fe1b 	bl	8001630 <HAL_DMA_Init>
 80089fa:	b970      	cbnz	r0, 8008a1a <HAL_SPI_MspInit+0x102>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80089fc:	4b0d      	ldr	r3, [pc, #52]	; (8008a34 <HAL_SPI_MspInit+0x11c>)
 80089fe:	67a3      	str	r3, [r4, #120]	; 0x78
 8008a00:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8008a02:	2200      	movs	r2, #0
 8008a04:	4611      	mov	r1, r2
 8008a06:	2024      	movs	r0, #36	; 0x24
 8008a08:	f7f8 fb5c 	bl	80010c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8008a0c:	2024      	movs	r0, #36	; 0x24
 8008a0e:	f7f8 fb8b 	bl	8001128 <HAL_NVIC_EnableIRQ>
}
 8008a12:	e78d      	b.n	8008930 <HAL_SPI_MspInit+0x18>
      Error_Handler();
 8008a14:	f7ff fc38 	bl	8008288 <Error_Handler>
 8008a18:	e7d0      	b.n	80089bc <HAL_SPI_MspInit+0xa4>
      Error_Handler();
 8008a1a:	f7ff fc35 	bl	8008288 <Error_Handler>
 8008a1e:	e7ed      	b.n	80089fc <HAL_SPI_MspInit+0xe4>
 8008a20:	40003800 	.word	0x40003800
 8008a24:	58024400 	.word	0x58024400
 8008a28:	58020400 	.word	0x58020400
 8008a2c:	20003164 	.word	0x20003164
 8008a30:	40020058 	.word	0x40020058
 8008a34:	200031dc 	.word	0x200031dc
 8008a38:	40020070 	.word	0x40020070

08008a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008a3c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a3e:	4b07      	ldr	r3, [pc, #28]	; (8008a5c <HAL_MspInit+0x20>)
 8008a40:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8008a44:	f042 0202 	orr.w	r2, r2, #2
 8008a48:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8008a4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a50:	f003 0302 	and.w	r3, r3, #2
 8008a54:	9301      	str	r3, [sp, #4]
 8008a56:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008a58:	b002      	add	sp, #8
 8008a5a:	4770      	bx	lr
 8008a5c:	58024400 	.word	0x58024400

08008a60 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008a60:	4770      	bx	lr

08008a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008a62:	e7fe      	b.n	8008a62 <HardFault_Handler>

08008a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008a64:	e7fe      	b.n	8008a64 <MemManage_Handler>

08008a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008a66:	e7fe      	b.n	8008a66 <BusFault_Handler>

08008a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008a68:	e7fe      	b.n	8008a68 <UsageFault_Handler>

08008a6a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008a6a:	4770      	bx	lr

08008a6c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008a6c:	4770      	bx	lr

08008a6e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008a6e:	4770      	bx	lr

08008a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008a70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008a72:	f7f7 fc85 	bl	8000380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008a76:	bd08      	pop	{r3, pc}

08008a78 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8008a78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008a7a:	4802      	ldr	r0, [pc, #8]	; (8008a84 <DMA1_Stream0_IRQHandler+0xc>)
 8008a7c:	f7f9 fa38 	bl	8001ef0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8008a80:	bd08      	pop	{r3, pc}
 8008a82:	bf00      	nop
 8008a84:	200003e4 	.word	0x200003e4

08008a88 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8008a88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8008a8a:	4802      	ldr	r0, [pc, #8]	; (8008a94 <DMA1_Stream1_IRQHandler+0xc>)
 8008a8c:	f7f9 fa30 	bl	8001ef0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8008a90:	bd08      	pop	{r3, pc}
 8008a92:	bf00      	nop
 8008a94:	20002ed4 	.word	0x20002ed4

08008a98 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8008a98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8008a9a:	4802      	ldr	r0, [pc, #8]	; (8008aa4 <DMA1_Stream2_IRQHandler+0xc>)
 8008a9c:	f7f9 fa28 	bl	8001ef0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8008aa0:	bd08      	pop	{r3, pc}
 8008aa2:	bf00      	nop
 8008aa4:	20002f4c 	.word	0x20002f4c

08008aa8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8008aa8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8008aaa:	4802      	ldr	r0, [pc, #8]	; (8008ab4 <DMA1_Stream3_IRQHandler+0xc>)
 8008aac:	f7f9 fa20 	bl	8001ef0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8008ab0:	bd08      	pop	{r3, pc}
 8008ab2:	bf00      	nop
 8008ab4:	20003164 	.word	0x20003164

08008ab8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8008ab8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8008aba:	4802      	ldr	r0, [pc, #8]	; (8008ac4 <DMA1_Stream4_IRQHandler+0xc>)
 8008abc:	f7f9 fa18 	bl	8001ef0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8008ac0:	bd08      	pop	{r3, pc}
 8008ac2:	bf00      	nop
 8008ac4:	200031dc 	.word	0x200031dc

08008ac8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8008ac8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8008aca:	4802      	ldr	r0, [pc, #8]	; (8008ad4 <SPI2_IRQHandler+0xc>)
 8008acc:	f7fd ffa0 	bl	8006a10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8008ad0:	bd08      	pop	{r3, pc}
 8008ad2:	bf00      	nop
 8008ad4:	200030dc 	.word	0x200030dc

08008ad8 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008ad8:	4a18      	ldr	r2, [pc, #96]	; (8008b3c <SystemInit+0x64>)
 8008ada:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008ade:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ae2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008ae6:	4b16      	ldr	r3, [pc, #88]	; (8008b40 <SystemInit+0x68>)
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	f042 0201 	orr.w	r2, r2, #1
 8008aee:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008af0:	2200      	movs	r2, #0
 8008af2:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008af4:	6818      	ldr	r0, [r3, #0]
 8008af6:	4913      	ldr	r1, [pc, #76]	; (8008b44 <SystemInit+0x6c>)
 8008af8:	4001      	ands	r1, r0
 8008afa:	6019      	str	r1, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008afc:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008afe:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008b00:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8008b02:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8008b04:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8008b06:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008b08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8008b0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008b0c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8008b0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008b10:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008b12:	6819      	ldr	r1, [r3, #0]
 8008b14:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8008b18:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008b1a:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8008b1c:	4b0a      	ldr	r3, [pc, #40]	; (8008b48 <SystemInit+0x70>)
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	4b0a      	ldr	r3, [pc, #40]	; (8008b4c <SystemInit+0x74>)
 8008b22:	4013      	ands	r3, r2
 8008b24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b28:	d202      	bcs.n	8008b30 <SystemInit+0x58>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8008b2a:	4b09      	ldr	r3, [pc, #36]	; (8008b50 <SystemInit+0x78>)
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008b30:	4b02      	ldr	r3, [pc, #8]	; (8008b3c <SystemInit+0x64>)
 8008b32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008b36:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	e000ed00 	.word	0xe000ed00
 8008b40:	58024400 	.word	0x58024400
 8008b44:	eaf6ed7f 	.word	0xeaf6ed7f
 8008b48:	5c001000 	.word	0x5c001000
 8008b4c:	ffff0000 	.word	0xffff0000
 8008b50:	51008108 	.word	0x51008108

08008b54 <tThreshold_initToPool>:
{
	tThreshold_freeFromPool(th, &leaf.mempool);
}

void    tThreshold_initToPool  (tThreshold* const th, float low, float high, tMempool* const mp)
{
 8008b54:	b510      	push	{r4, lr}
 8008b56:	ed2d 8b02 	vpush	{d8}
 8008b5a:	4604      	mov	r4, r0
 8008b5c:	eeb0 8a40 	vmov.f32	s16, s0
 8008b60:	eef0 8a60 	vmov.f32	s17, s1
    _tMempool* m = *mp;
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 8008b64:	6809      	ldr	r1, [r1, #0]
 8008b66:	200c      	movs	r0, #12
 8008b68:	f000 faf2 	bl	8009150 <mpool_alloc>
 8008b6c:	6020      	str	r0, [r4, #0]

    t->highThresh = high;
 8008b6e:	edc0 8a00 	vstr	s17, [r0]
    t->lowThresh = low;
 8008b72:	ed80 8a01 	vstr	s16, [r0, #4]

    t->currentValue = 0;
 8008b76:	2300      	movs	r3, #0
 8008b78:	6083      	str	r3, [r0, #8]
}
 8008b7a:	ecbd 8b02 	vpop	{d8}
 8008b7e:	bd10      	pop	{r4, pc}

08008b80 <tThreshold_init>:
{
 8008b80:	b508      	push	{r3, lr}
	tThreshold_initToPool(th, low, high, &leaf.mempool);
 8008b82:	4902      	ldr	r1, [pc, #8]	; (8008b8c <tThreshold_init+0xc>)
 8008b84:	f7ff ffe6 	bl	8008b54 <tThreshold_initToPool>
}
 8008b88:	bd08      	pop	{r3, pc}
 8008b8a:	bf00      	nop
 8008b8c:	2000326c 	.word	0x2000326c

08008b90 <tADSR_init>:
    return env->next;
}

/* ADSR */
void    tADSR_init(tADSR* const adsrenv, float attack, float decay, float sustain, float release)
{
 8008b90:	b510      	push	{r4, lr}
 8008b92:	ed2d 8b04 	vpush	{d8-d9}
 8008b96:	4604      	mov	r4, r0
 8008b98:	eeb0 9a40 	vmov.f32	s18, s0
 8008b9c:	eef0 8a60 	vmov.f32	s17, s1
 8008ba0:	eef0 9a41 	vmov.f32	s19, s2
 8008ba4:	eeb0 8a61 	vmov.f32	s16, s3
    _tADSR* adsr = *adsrenv = (_tADSR*) leaf_alloc(sizeof(_tADSR));
 8008ba8:	204c      	movs	r0, #76	; 0x4c
 8008baa:	f000 fb23 	bl	80091f4 <leaf_alloc>
 8008bae:	6020      	str	r0, [r4, #0]
    
    adsr->exp_buff = __leaf_table_exp_decay;
 8008bb0:	4b46      	ldr	r3, [pc, #280]	; (8008ccc <tADSR_init+0x13c>)
 8008bb2:	6003      	str	r3, [r0, #0]
    adsr->inc_buff = __leaf_table_attack_decay_inc;
 8008bb4:	4b46      	ldr	r3, [pc, #280]	; (8008cd0 <tADSR_init+0x140>)
 8008bb6:	6043      	str	r3, [r0, #4]
    adsr->buff_size = sizeof(__leaf_table_exp_decay);
 8008bb8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008bbc:	6083      	str	r3, [r0, #8]
    
    if (attack > 8192.0f)
 8008bbe:	eddf 7a45 	vldr	s15, [pc, #276]	; 8008cd4 <tADSR_init+0x144>
 8008bc2:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8008bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bca:	dd01      	ble.n	8008bd0 <tADSR_init+0x40>
        attack = 8192.0f;
 8008bcc:	eeb0 9a67 	vmov.f32	s18, s15
    if (attack < 0.0f)
 8008bd0:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8008bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bd8:	d466      	bmi.n	8008ca8 <tADSR_init+0x118>
        attack = 0.0f;
    
    if (decay > 8192.0f)
 8008bda:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8008cd4 <tADSR_init+0x144>
 8008bde:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008be6:	dd01      	ble.n	8008bec <tADSR_init+0x5c>
        decay = 8192.0f;
 8008be8:	eef0 8a67 	vmov.f32	s17, s15
    if (decay < 0.0f)
 8008bec:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8008bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bf4:	d45b      	bmi.n	8008cae <tADSR_init+0x11e>
        decay = 0.0f;
    
    if (sustain > 1.0f)
 8008bf6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008bfa:	eef4 9ae7 	vcmpe.f32	s19, s15
 8008bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c02:	dd01      	ble.n	8008c08 <tADSR_init+0x78>
        sustain = 1.0f;
 8008c04:	eef0 9a67 	vmov.f32	s19, s15
    if (sustain < 0.0f)
 8008c08:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 8008c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c10:	d450      	bmi.n	8008cb4 <tADSR_init+0x124>
        sustain = 0.0f;
    
    if (release > 8192.0f)
 8008c12:	eddf 7a30 	vldr	s15, [pc, #192]	; 8008cd4 <tADSR_init+0x144>
 8008c16:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c1e:	dd01      	ble.n	8008c24 <tADSR_init+0x94>
        release = 8192.0f;
 8008c20:	eeb0 8a67 	vmov.f32	s16, s15
    if (release < 0.0f)
 8008c24:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c2c:	d445      	bmi.n	8008cba <tADSR_init+0x12a>
        release = 0.0f;
    
    int16_t attackIndex = ((int16_t)(attack * 8.0f))-1;
 8008c2e:	eebe 9aee 	vcvt.s32.f32	s18, s18, #3
 8008c32:	ee19 3a10 	vmov	r3, s18
 8008c36:	b299      	uxth	r1, r3
 8008c38:	3901      	subs	r1, #1
 8008c3a:	b209      	sxth	r1, r1
    int16_t decayIndex = ((int16_t)(decay * 8.0f))-1;
 8008c3c:	eefe 8aee 	vcvt.s32.f32	s17, s17, #3
 8008c40:	ee18 3a90 	vmov	r3, s17
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	3a01      	subs	r2, #1
 8008c48:	b212      	sxth	r2, r2
    int16_t releaseIndex = ((int16_t)(release * 8.0f))-1;
 8008c4a:	eebe 8aee 	vcvt.s32.f32	s16, s16, #3
 8008c4e:	ee18 3a10 	vmov	r3, s16
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	3b01      	subs	r3, #1
 8008c56:	b21b      	sxth	r3, r3
    int16_t rampIndex = ((int16_t)(2.0f * 8.0f))-1;
    
    if (attackIndex < 0)
 8008c58:	2900      	cmp	r1, #0
 8008c5a:	db31      	blt.n	8008cc0 <tADSR_init+0x130>
        attackIndex = 0;
    if (decayIndex < 0)
 8008c5c:	2a00      	cmp	r2, #0
 8008c5e:	db31      	blt.n	8008cc4 <tADSR_init+0x134>
        decayIndex = 0;
    if (releaseIndex < 0)
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	db31      	blt.n	8008cc8 <tADSR_init+0x138>
        releaseIndex = 0;
    if (rampIndex < 0)
        rampIndex = 0;
    
    adsr->inRamp = OFALSE;
 8008c64:	2400      	movs	r4, #0
 8008c66:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    adsr->inAttack = OFALSE;
 8008c6a:	f880 4020 	strb.w	r4, [r0, #32]
    adsr->inDecay = OFALSE;
 8008c6e:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    adsr->inSustain = OFALSE;
 8008c72:	f880 4022 	strb.w	r4, [r0, #34]	; 0x22
    adsr->inRelease = OFALSE;
 8008c76:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
    
    adsr->sustain = sustain;
 8008c7a:	edc0 9a0a 	vstr	s19, [r0, #40]	; 0x28
    
    adsr->attackInc = adsr->inc_buff[attackIndex];
 8008c7e:	4c14      	ldr	r4, [pc, #80]	; (8008cd0 <tADSR_init+0x140>)
 8008c80:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008c84:	6809      	ldr	r1, [r1, #0]
 8008c86:	6101      	str	r1, [r0, #16]
    adsr->decayInc = adsr->inc_buff[decayIndex];
 8008c88:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008c8c:	6812      	ldr	r2, [r2, #0]
 8008c8e:	6142      	str	r2, [r0, #20]
    adsr->releaseInc = adsr->inc_buff[releaseIndex];
 8008c90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	6183      	str	r3, [r0, #24]
    adsr->rampInc = adsr->inc_buff[rampIndex];
 8008c98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008c9a:	61c3      	str	r3, [r0, #28]

    adsr->leakFactor = 1.0f;
 8008c9c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008ca0:	6483      	str	r3, [r0, #72]	; 0x48

}
 8008ca2:	ecbd 8b04 	vpop	{d8-d9}
 8008ca6:	bd10      	pop	{r4, pc}
        attack = 0.0f;
 8008ca8:	ed9f 9a0b 	vldr	s18, [pc, #44]	; 8008cd8 <tADSR_init+0x148>
 8008cac:	e795      	b.n	8008bda <tADSR_init+0x4a>
        decay = 0.0f;
 8008cae:	eddf 8a0a 	vldr	s17, [pc, #40]	; 8008cd8 <tADSR_init+0x148>
 8008cb2:	e7a0      	b.n	8008bf6 <tADSR_init+0x66>
        sustain = 0.0f;
 8008cb4:	eddf 9a08 	vldr	s19, [pc, #32]	; 8008cd8 <tADSR_init+0x148>
 8008cb8:	e7ab      	b.n	8008c12 <tADSR_init+0x82>
        release = 0.0f;
 8008cba:	ed9f 8a07 	vldr	s16, [pc, #28]	; 8008cd8 <tADSR_init+0x148>
 8008cbe:	e7b6      	b.n	8008c2e <tADSR_init+0x9e>
        attackIndex = 0;
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	e7cb      	b.n	8008c5c <tADSR_init+0xcc>
        decayIndex = 0;
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	e7cb      	b.n	8008c60 <tADSR_init+0xd0>
        releaseIndex = 0;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	e7cb      	b.n	8008c64 <tADSR_init+0xd4>
 8008ccc:	0804ffa8 	.word	0x0804ffa8
 8008cd0:	0800ffa8 	.word	0x0800ffa8
 8008cd4:	46000000 	.word	0x46000000
 8008cd8:	00000000 	.word	0x00000000

08008cdc <tADSR_initToPool>:

    leaf_free(adsr);
}

void    tADSR_initToPool    (tADSR* const adsrenv, float attack, float decay, float sustain, float release, tMempool* const mp)
{
 8008cdc:	b510      	push	{r4, lr}
 8008cde:	ed2d 8b04 	vpush	{d8-d9}
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	eeb0 9a40 	vmov.f32	s18, s0
 8008ce8:	eef0 8a60 	vmov.f32	s17, s1
 8008cec:	eef0 9a41 	vmov.f32	s19, s2
 8008cf0:	eeb0 8a61 	vmov.f32	s16, s3
    _tMempool* m = *mp;
    _tADSR* adsr = *adsrenv = (_tADSR*) mpool_alloc(sizeof(_tADSR), m);
 8008cf4:	6809      	ldr	r1, [r1, #0]
 8008cf6:	204c      	movs	r0, #76	; 0x4c
 8008cf8:	f000 fa2a 	bl	8009150 <mpool_alloc>
 8008cfc:	6020      	str	r0, [r4, #0]
    
    adsr->exp_buff = __leaf_table_exp_decay;
 8008cfe:	4b47      	ldr	r3, [pc, #284]	; (8008e1c <tADSR_initToPool+0x140>)
 8008d00:	6003      	str	r3, [r0, #0]
    adsr->inc_buff = __leaf_table_attack_decay_inc;
 8008d02:	4b47      	ldr	r3, [pc, #284]	; (8008e20 <tADSR_initToPool+0x144>)
 8008d04:	6043      	str	r3, [r0, #4]
    adsr->buff_size = sizeof(__leaf_table_exp_decay);
 8008d06:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008d0a:	6083      	str	r3, [r0, #8]
    
    if (attack > 8192.0f)
 8008d0c:	eddf 7a45 	vldr	s15, [pc, #276]	; 8008e24 <tADSR_initToPool+0x148>
 8008d10:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8008d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d18:	dd01      	ble.n	8008d1e <tADSR_initToPool+0x42>
        attack = 8192.0f;
 8008d1a:	eeb0 9a67 	vmov.f32	s18, s15
    if (attack < 0.0f)
 8008d1e:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8008d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d26:	d466      	bmi.n	8008df6 <tADSR_initToPool+0x11a>
        attack = 0.0f;
    
    if (decay > 8192.0f)
 8008d28:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8008e24 <tADSR_initToPool+0x148>
 8008d2c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d34:	dd01      	ble.n	8008d3a <tADSR_initToPool+0x5e>
        decay = 8192.0f;
 8008d36:	eef0 8a67 	vmov.f32	s17, s15
    if (decay < 0.0f)
 8008d3a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8008d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d42:	d45b      	bmi.n	8008dfc <tADSR_initToPool+0x120>
        decay = 0.0f;
    
    if (sustain > 1.0f)
 8008d44:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008d48:	eef4 9ae7 	vcmpe.f32	s19, s15
 8008d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d50:	dd01      	ble.n	8008d56 <tADSR_initToPool+0x7a>
        sustain = 1.0f;
 8008d52:	eef0 9a67 	vmov.f32	s19, s15
    if (sustain < 0.0f)
 8008d56:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 8008d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d5e:	d450      	bmi.n	8008e02 <tADSR_initToPool+0x126>
        sustain = 0.0f;
    
    if (release > 8192.0f)
 8008d60:	eddf 7a30 	vldr	s15, [pc, #192]	; 8008e24 <tADSR_initToPool+0x148>
 8008d64:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d6c:	dd01      	ble.n	8008d72 <tADSR_initToPool+0x96>
        release = 8192.0f;
 8008d6e:	eeb0 8a67 	vmov.f32	s16, s15
    if (release < 0.0f)
 8008d72:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d7a:	d445      	bmi.n	8008e08 <tADSR_initToPool+0x12c>
        release = 0.0f;
    
    int16_t attackIndex = ((int16_t)(attack * 8.0f))-1;
 8008d7c:	eebe 9aee 	vcvt.s32.f32	s18, s18, #3
 8008d80:	ee19 3a10 	vmov	r3, s18
 8008d84:	b299      	uxth	r1, r3
 8008d86:	3901      	subs	r1, #1
 8008d88:	b209      	sxth	r1, r1
    int16_t decayIndex = ((int16_t)(decay * 8.0f))-1;
 8008d8a:	eefe 8aee 	vcvt.s32.f32	s17, s17, #3
 8008d8e:	ee18 3a90 	vmov	r3, s17
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	3a01      	subs	r2, #1
 8008d96:	b212      	sxth	r2, r2
    int16_t releaseIndex = ((int16_t)(release * 8.0f))-1;
 8008d98:	eebe 8aee 	vcvt.s32.f32	s16, s16, #3
 8008d9c:	ee18 3a10 	vmov	r3, s16
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	3b01      	subs	r3, #1
 8008da4:	b21b      	sxth	r3, r3
    int16_t rampIndex = ((int16_t)(2.0f * 8.0f))-1;
    
    if (attackIndex < 0)
 8008da6:	2900      	cmp	r1, #0
 8008da8:	db31      	blt.n	8008e0e <tADSR_initToPool+0x132>
        attackIndex = 0;
    if (decayIndex < 0)
 8008daa:	2a00      	cmp	r2, #0
 8008dac:	db31      	blt.n	8008e12 <tADSR_initToPool+0x136>
        decayIndex = 0;
    if (releaseIndex < 0)
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	db31      	blt.n	8008e16 <tADSR_initToPool+0x13a>
        releaseIndex = 0;
    if (rampIndex < 0)
        rampIndex = 0;
    
    adsr->inRamp = OFALSE;
 8008db2:	2400      	movs	r4, #0
 8008db4:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    adsr->inAttack = OFALSE;
 8008db8:	f880 4020 	strb.w	r4, [r0, #32]
    adsr->inDecay = OFALSE;
 8008dbc:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    adsr->inSustain = OFALSE;
 8008dc0:	f880 4022 	strb.w	r4, [r0, #34]	; 0x22
    adsr->inRelease = OFALSE;
 8008dc4:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
    
    adsr->sustain = sustain;
 8008dc8:	edc0 9a0a 	vstr	s19, [r0, #40]	; 0x28
    
    adsr->attackInc = adsr->inc_buff[attackIndex];
 8008dcc:	4c14      	ldr	r4, [pc, #80]	; (8008e20 <tADSR_initToPool+0x144>)
 8008dce:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008dd2:	6809      	ldr	r1, [r1, #0]
 8008dd4:	6101      	str	r1, [r0, #16]
    adsr->decayInc = adsr->inc_buff[decayIndex];
 8008dd6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008dda:	6812      	ldr	r2, [r2, #0]
 8008ddc:	6142      	str	r2, [r0, #20]
    adsr->releaseInc = adsr->inc_buff[releaseIndex];
 8008dde:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	6183      	str	r3, [r0, #24]
    adsr->rampInc = adsr->inc_buff[rampIndex];
 8008de6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008de8:	61c3      	str	r3, [r0, #28]

    adsr->leakFactor = 1.0f;
 8008dea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008dee:	6483      	str	r3, [r0, #72]	; 0x48
}
 8008df0:	ecbd 8b04 	vpop	{d8-d9}
 8008df4:	bd10      	pop	{r4, pc}
        attack = 0.0f;
 8008df6:	ed9f 9a0c 	vldr	s18, [pc, #48]	; 8008e28 <tADSR_initToPool+0x14c>
 8008dfa:	e795      	b.n	8008d28 <tADSR_initToPool+0x4c>
        decay = 0.0f;
 8008dfc:	eddf 8a0a 	vldr	s17, [pc, #40]	; 8008e28 <tADSR_initToPool+0x14c>
 8008e00:	e7a0      	b.n	8008d44 <tADSR_initToPool+0x68>
        sustain = 0.0f;
 8008e02:	eddf 9a09 	vldr	s19, [pc, #36]	; 8008e28 <tADSR_initToPool+0x14c>
 8008e06:	e7ab      	b.n	8008d60 <tADSR_initToPool+0x84>
        release = 0.0f;
 8008e08:	ed9f 8a07 	vldr	s16, [pc, #28]	; 8008e28 <tADSR_initToPool+0x14c>
 8008e0c:	e7b6      	b.n	8008d7c <tADSR_initToPool+0xa0>
        attackIndex = 0;
 8008e0e:	2100      	movs	r1, #0
 8008e10:	e7cb      	b.n	8008daa <tADSR_initToPool+0xce>
        decayIndex = 0;
 8008e12:	2200      	movs	r2, #0
 8008e14:	e7cb      	b.n	8008dae <tADSR_initToPool+0xd2>
        releaseIndex = 0;
 8008e16:	2300      	movs	r3, #0
 8008e18:	e7cb      	b.n	8008db2 <tADSR_initToPool+0xd6>
 8008e1a:	bf00      	nop
 8008e1c:	0804ffa8 	.word	0x0804ffa8
 8008e20:	0800ffa8 	.word	0x0800ffa8
 8008e24:	46000000 	.word	0x46000000
 8008e28:	00000000 	.word	0x00000000

08008e2c <tADSR_setLeakFactor>:
}

// 0.999999 is slow leak, 0.9 is fast leak
void     tADSR_setLeakFactor(tADSR* const adsrenv, float leakFactor)
{
    _tADSR* adsr = *adsrenv;
 8008e2c:	6803      	ldr	r3, [r0, #0]


    adsr->leakFactor = leakFactor;
 8008e2e:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
}
 8008e32:	4770      	bx	lr

08008e34 <tRampUpDown_initToPool>:
{
	tRampUpDown_freeFromPool(r, &leaf.mempool);
}

void    tRampUpDown_initToPool(tRampUpDown* const r, float upTime, float downTime, int samples_per_tick, tMempool* const mp)
{
 8008e34:	b538      	push	{r3, r4, r5, lr}
 8008e36:	ed2d 8b02 	vpush	{d8}
 8008e3a:	4605      	mov	r5, r0
 8008e3c:	eef0 8a40 	vmov.f32	s17, s0
 8008e40:	eeb0 8a60 	vmov.f32	s16, s1
 8008e44:	460c      	mov	r4, r1
    _tMempool* m = *mp;
    _tRampUpDown* ramp = *r = (_tRampUpDown*) mpool_alloc(sizeof(_tRampUpDown), m);
 8008e46:	6811      	ldr	r1, [r2, #0]
 8008e48:	2024      	movs	r0, #36	; 0x24
 8008e4a:	f000 f981 	bl	8009150 <mpool_alloc>
 8008e4e:	6028      	str	r0, [r5, #0]

    ramp->inv_sr_ms = 1.0f/(leaf.sampleRate*0.001f);
 8008e50:	4b22      	ldr	r3, [pc, #136]	; (8008edc <tRampUpDown_initToPool+0xa8>)
 8008e52:	ed93 7a00 	vldr	s14, [r3]
 8008e56:	eddf 7a22 	vldr	s15, [pc, #136]	; 8008ee0 <tRampUpDown_initToPool+0xac>
 8008e5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e66:	edc0 7a02 	vstr	s15, [r0, #8]
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 8008e6a:	ee07 4a10 	vmov	s14, r4
 8008e6e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008e72:	ee67 6a87 	vmul.f32	s13, s15, s14
 8008e76:	edc0 6a03 	vstr	s13, [r0, #12]
    ramp->curr = 0.0f;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	6103      	str	r3, [r0, #16]
    ramp->dest = 0.0f;
 8008e7e:	6143      	str	r3, [r0, #20]

    if (upTime < ramp->minimum_time)
 8008e80:	eef4 6ae8 	vcmpe.f32	s13, s17
 8008e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e88:	dd22      	ble.n	8008ed0 <tRampUpDown_initToPool+0x9c>
    {
        ramp->upTime = ramp->minimum_time;
 8008e8a:	edc0 6a06 	vstr	s13, [r0, #24]
    else
    {
        ramp->upTime = upTime;
    }

    if (downTime < ramp->minimum_time)
 8008e8e:	eef4 6ac8 	vcmpe.f32	s13, s16
 8008e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e96:	dc1e      	bgt.n	8008ed6 <tRampUpDown_initToPool+0xa2>
    {
        ramp->downTime = ramp->minimum_time;
    }
    else
    {
        ramp->downTime = downTime;
 8008e98:	ed80 8a07 	vstr	s16, [r0, #28]
    }

    ramp->samples_per_tick = samples_per_tick;
 8008e9c:	6204      	str	r4, [r0, #32]
    ramp->upInc = ((ramp->dest - ramp->curr) / ramp->upTime * ramp->inv_sr_ms) * (float)ramp->samples_per_tick;
 8008e9e:	edd0 5a06 	vldr	s11, [r0, #24]
 8008ea2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008ee4 <tRampUpDown_initToPool+0xb0>
 8008ea6:	eec6 6a25 	vdiv.f32	s13, s12, s11
 8008eaa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8008eae:	ee67 6a26 	vmul.f32	s13, s14, s13
 8008eb2:	edc0 6a00 	vstr	s13, [r0]
    ramp->downInc = ((ramp->dest - ramp->curr) / ramp->downTime * ramp->inv_sr_ms) * (float)ramp->samples_per_tick;
 8008eb6:	edd0 5a07 	vldr	s11, [r0, #28]
 8008eba:	eec6 6a25 	vdiv.f32	s13, s12, s11
 8008ebe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ec6:	edc0 7a01 	vstr	s15, [r0, #4]
}
 8008eca:	ecbd 8b02 	vpop	{d8}
 8008ece:	bd38      	pop	{r3, r4, r5, pc}
        ramp->upTime = upTime;
 8008ed0:	edc0 8a06 	vstr	s17, [r0, #24]
 8008ed4:	e7db      	b.n	8008e8e <tRampUpDown_initToPool+0x5a>
        ramp->downTime = ramp->minimum_time;
 8008ed6:	edc0 6a07 	vstr	s13, [r0, #28]
 8008eda:	e7df      	b.n	8008e9c <tRampUpDown_initToPool+0x68>
 8008edc:	20003254 	.word	0x20003254
 8008ee0:	3a83126f 	.word	0x3a83126f
 8008ee4:	00000000 	.word	0x00000000

08008ee8 <tRampUpDown_init>:
{
 8008ee8:	b508      	push	{r3, lr}
	tRampUpDown_initToPool(r, upTime, downTime, samples_per_tick, &leaf.mempool);
 8008eea:	4a02      	ldr	r2, [pc, #8]	; (8008ef4 <tRampUpDown_init+0xc>)
 8008eec:	f7ff ffa2 	bl	8008e34 <tRampUpDown_initToPool>
}
 8008ef0:	bd08      	pop	{r3, pc}
 8008ef2:	bf00      	nop
 8008ef4:	2000326c 	.word	0x2000326c

08008ef8 <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, float val, float factor)
{	// factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8008ef8:	b510      	push	{r4, lr}
 8008efa:	ed2d 8b02 	vpush	{d8}
 8008efe:	4604      	mov	r4, r0
 8008f00:	eef0 8a40 	vmov.f32	s17, s0
 8008f04:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) leaf_alloc(sizeof(_tExpSmooth));
 8008f08:	2010      	movs	r0, #16
 8008f0a:	f000 f973 	bl	80091f4 <leaf_alloc>
 8008f0e:	6020      	str	r0, [r4, #0]
    
	smooth->curr=val;
 8008f10:	edc0 8a02 	vstr	s17, [r0, #8]
	smooth->dest=val;
 8008f14:	edc0 8a03 	vstr	s17, [r0, #12]
	if (factor<0) factor=0;
 8008f18:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f20:	d413      	bmi.n	8008f4a <tExpSmooth_init+0x52>
	if (factor>1) factor=1;
 8008f22:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008f26:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f2e:	dd01      	ble.n	8008f34 <tExpSmooth_init+0x3c>
 8008f30:	eeb0 8a67 	vmov.f32	s16, s15
	smooth->factor=factor;
 8008f34:	ed80 8a00 	vstr	s16, [r0]
	smooth->oneminusfactor=1.0f-factor;
 8008f38:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008f3c:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8008f40:	ed80 8a01 	vstr	s16, [r0, #4]
}
 8008f44:	ecbd 8b02 	vpop	{d8}
 8008f48:	bd10      	pop	{r4, pc}
	if (factor<0) factor=0;
 8008f4a:	ed9f 8a01 	vldr	s16, [pc, #4]	; 8008f50 <tExpSmooth_init+0x58>
 8008f4e:	e7e8      	b.n	8008f22 <tExpSmooth_init+0x2a>
 8008f50:	00000000 	.word	0x00000000

08008f54 <tSlide_initToPool>:
void    tSlide_free          (tSlide* const sl)
{
	tSlide_freeFromPool    (sl, &leaf.mempool);
}
void    tSlide_initToPool    (tSlide* const sl, float upSlide, float downSlide, tMempool* const mp)
{
 8008f54:	b510      	push	{r4, lr}
 8008f56:	ed2d 8b02 	vpush	{d8}
 8008f5a:	4604      	mov	r4, r0
 8008f5c:	eef0 8a40 	vmov.f32	s17, s0
 8008f60:	eeb0 8a60 	vmov.f32	s16, s1
    _tMempool* m = *mp;
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8008f64:	6809      	ldr	r1, [r1, #0]
 8008f66:	2014      	movs	r0, #20
 8008f68:	f000 f8f2 	bl	8009150 <mpool_alloc>
 8008f6c:	6020      	str	r0, [r4, #0]
    s->prevIn = 0.0f;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	6083      	str	r3, [r0, #8]
    s->currentOut = 0.0f;
 8008f72:	6043      	str	r3, [r0, #4]
    s->prevOut = 0.0f;
 8008f74:	6003      	str	r3, [r0, #0]
    if (upSlide < 1.0f)
 8008f76:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008f7a:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f82:	d413      	bmi.n	8008fac <tSlide_initToPool+0x58>
    {
    	upSlide = 1.0f;
    }

    if (downSlide < 1.0f)
 8008f84:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008f88:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f90:	d40f      	bmi.n	8008fb2 <tSlide_initToPool+0x5e>
    {
    	downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 8008f92:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008f96:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8008f9a:	ed80 7a03 	vstr	s14, [r0, #12]
    s->invDownSlide = 1.0f / downSlide;
 8008f9e:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8008fa2:	ed80 7a04 	vstr	s14, [r0, #16]
}
 8008fa6:	ecbd 8b02 	vpop	{d8}
 8008faa:	bd10      	pop	{r4, pc}
    	upSlide = 1.0f;
 8008fac:	eef0 8a67 	vmov.f32	s17, s15
 8008fb0:	e7e8      	b.n	8008f84 <tSlide_initToPool+0x30>
    	downSlide = 1.0f;
 8008fb2:	eeb0 8a67 	vmov.f32	s16, s15
 8008fb6:	e7ec      	b.n	8008f92 <tSlide_initToPool+0x3e>

08008fb8 <tSlide_init>:
{
 8008fb8:	b508      	push	{r3, lr}
	tSlide_initToPool    (sl, upSlide, downSlide, &leaf.mempool);
 8008fba:	4902      	ldr	r1, [pc, #8]	; (8008fc4 <tSlide_init+0xc>)
 8008fbc:	f7ff ffca 	bl	8008f54 <tSlide_initToPool>
}
 8008fc0:	bd08      	pop	{r3, pc}
 8008fc2:	bf00      	nop
 8008fc4:	2000326c 	.word	0x2000326c

08008fc8 <tSVF_init>:
}

// Less efficient, more accurate version of SVF, in which cutoff frequency is taken as floating point Hz value and tanf
// is calculated when frequency changes.
void tSVF_init(tSVF* const svff, SVFType type, float freq, float Q)
{
 8008fc8:	b570      	push	{r4, r5, r6, lr}
 8008fca:	ed2d 8b02 	vpush	{d8}
 8008fce:	4606      	mov	r6, r0
 8008fd0:	460d      	mov	r5, r1
 8008fd2:	eeb0 8a40 	vmov.f32	s16, s0
 8008fd6:	eef0 8a60 	vmov.f32	s17, s1
    _tSVF* svf = *svff = (_tSVF*) leaf_alloc(sizeof(_tSVF));
 8008fda:	2038      	movs	r0, #56	; 0x38
 8008fdc:	f000 f90a 	bl	80091f4 <leaf_alloc>
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	6030      	str	r0, [r6, #0]
    
    svf->type = type;
 8008fe4:	7005      	strb	r5, [r0, #0]
    
    svf->ic1eq = 0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	60c3      	str	r3, [r0, #12]
    svf->ic2eq = 0;
 8008fea:	6103      	str	r3, [r0, #16]
    
    svf->g = tanf(PI * freq * leaf.invSampleRate);
 8008fec:	ed9f 0a30 	vldr	s0, [pc, #192]	; 80090b0 <tSVF_init+0xe8>
 8008ff0:	ee28 8a00 	vmul.f32	s16, s16, s0
 8008ff4:	4b2f      	ldr	r3, [pc, #188]	; (80090b4 <tSVF_init+0xec>)
 8008ff6:	ed93 0a01 	vldr	s0, [r3, #4]
 8008ffa:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008ffe:	f000 fa49 	bl	8009494 <tanf>
 8009002:	ed84 0a05 	vstr	s0, [r4, #20]
    svf->k = 1.0f/Q;
 8009006:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800900a:	eec6 6a28 	vdiv.f32	s13, s12, s17
 800900e:	edc4 6a06 	vstr	s13, [r4, #24]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8009012:	ee30 7a26 	vadd.f32	s14, s0, s13
 8009016:	ee20 7a07 	vmul.f32	s14, s0, s14
 800901a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800901e:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8009022:	edc4 7a07 	vstr	s15, [r4, #28]
    svf->a2 = svf->g*svf->a1;
 8009026:	ee60 7a27 	vmul.f32	s15, s0, s15
 800902a:	edc4 7a08 	vstr	s15, [r4, #32]
    svf->a3 = svf->g*svf->a2;
 800902e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009032:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24

    if (type == SVFTypeLowpass)
 8009036:	2d01      	cmp	r5, #1
 8009038:	d012      	beq.n	8009060 <tSVF_init+0x98>
		svf->cH = 0.0f;
		svf->cB = 0.0f;
		svf->kAmount = 0.0f;
		svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
 800903a:	2d02      	cmp	r5, #2
 800903c:	d019      	beq.n	8009072 <tSVF_init+0xaa>
		svf->cB = 1.0f;
		svf->kAmount = 0.0f;
		svf->cL = 0.0f;
    }

    else if (type == SVFTypeHighpass)
 800903e:	b305      	cbz	r5, 8009082 <tSVF_init+0xba>
		svf->cB = svf->k * -1.0f;
		svf->kAmount = 1.0f;
		svf->cL = -1.0f;
    }

    else if (type == SVFTypeNotch)
 8009040:	2d03      	cmp	r5, #3
 8009042:	d029      	beq.n	8009098 <tSVF_init+0xd0>
		svf->kAmount = 1.0f;
		svf->cL = 0.0f;
    }


    else if (type == SVFTypePeak)
 8009044:	2d04      	cmp	r5, #4
 8009046:	d111      	bne.n	800906c <tSVF_init+0xa4>
    {
		svf->cH = 1.0f;
 8009048:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800904c:	62a3      	str	r3, [r4, #40]	; 0x28
		svf->cB = svf->k * -1.0f;
 800904e:	eef1 6a66 	vneg.f32	s13, s13
 8009052:	edc4 6a0b 	vstr	s13, [r4, #44]	; 0x2c
		svf->kAmount = 1.0f;
 8009056:	6363      	str	r3, [r4, #52]	; 0x34
		svf->cL = -2.0f;
 8009058:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800905c:	6323      	str	r3, [r4, #48]	; 0x30
    // or maybe this?
    /*
     * hp=1 bp=A/Q (where A is 10^(G/40) and G is gain in decibels) and lp = 1
     */

}
 800905e:	e005      	b.n	800906c <tSVF_init+0xa4>
		svf->cH = 0.0f;
 8009060:	2300      	movs	r3, #0
 8009062:	62a3      	str	r3, [r4, #40]	; 0x28
		svf->cB = 0.0f;
 8009064:	62e3      	str	r3, [r4, #44]	; 0x2c
		svf->kAmount = 0.0f;
 8009066:	6363      	str	r3, [r4, #52]	; 0x34
		svf->cL = 1.0f;
 8009068:	ed84 6a0c 	vstr	s12, [r4, #48]	; 0x30
}
 800906c:	ecbd 8b02 	vpop	{d8}
 8009070:	bd70      	pop	{r4, r5, r6, pc}
		svf->cH = 0.0f;
 8009072:	2300      	movs	r3, #0
 8009074:	62a3      	str	r3, [r4, #40]	; 0x28
		svf->cB = 1.0f;
 8009076:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800907a:	62e2      	str	r2, [r4, #44]	; 0x2c
		svf->kAmount = 0.0f;
 800907c:	6363      	str	r3, [r4, #52]	; 0x34
		svf->cL = 0.0f;
 800907e:	6323      	str	r3, [r4, #48]	; 0x30
 8009080:	e7f4      	b.n	800906c <tSVF_init+0xa4>
		svf->cH = 1.0f;
 8009082:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8009086:	62a3      	str	r3, [r4, #40]	; 0x28
		svf->cB = svf->k * -1.0f;
 8009088:	eef1 6a66 	vneg.f32	s13, s13
 800908c:	edc4 6a0b 	vstr	s13, [r4, #44]	; 0x2c
		svf->kAmount = 1.0f;
 8009090:	6363      	str	r3, [r4, #52]	; 0x34
		svf->cL = -1.0f;
 8009092:	4b09      	ldr	r3, [pc, #36]	; (80090b8 <tSVF_init+0xf0>)
 8009094:	6323      	str	r3, [r4, #48]	; 0x30
 8009096:	e7e9      	b.n	800906c <tSVF_init+0xa4>
		svf->cH = 1.0f;
 8009098:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800909c:	62a3      	str	r3, [r4, #40]	; 0x28
		svf->cB = svf->k * -1.0f;
 800909e:	eef1 6a66 	vneg.f32	s13, s13
 80090a2:	edc4 6a0b 	vstr	s13, [r4, #44]	; 0x2c
		svf->kAmount = 1.0f;
 80090a6:	6363      	str	r3, [r4, #52]	; 0x34
		svf->cL = 0.0f;
 80090a8:	2300      	movs	r3, #0
 80090aa:	6323      	str	r3, [r4, #48]	; 0x30
 80090ac:	e7de      	b.n	800906c <tSVF_init+0xa4>
 80090ae:	bf00      	nop
 80090b0:	40490fdb 	.word	0x40490fdb
 80090b4:	20003254 	.word	0x20003254
 80090b8:	bf800000 	.word	0xbf800000

080090bc <tHighpass_init>:
    svf->a3 = svf->g * svf->a2;
}

/* Highpass */
void    tHighpass_init(tHighpass* const ft, float freq)
{
 80090bc:	b510      	push	{r4, lr}
 80090be:	ed2d 8b02 	vpush	{d8}
 80090c2:	4604      	mov	r4, r0
 80090c4:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) leaf_alloc(sizeof(_tHighpass));
 80090c8:	2010      	movs	r0, #16
 80090ca:	f000 f893 	bl	80091f4 <leaf_alloc>
 80090ce:	6020      	str	r0, [r4, #0]
    
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 80090d0:	4b09      	ldr	r3, [pc, #36]	; (80090f8 <tHighpass_init+0x3c>)
 80090d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80090d6:	ee27 7a88 	vmul.f32	s14, s15, s16
 80090da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80090de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80090e2:	edc0 7a02 	vstr	s15, [r0, #8]
    f->ys = 0.0f;
 80090e6:	2300      	movs	r3, #0
 80090e8:	6043      	str	r3, [r0, #4]
    f->xs = 0.0f;
 80090ea:	6003      	str	r3, [r0, #0]
    
    f->frequency = freq;
 80090ec:	ed80 8a03 	vstr	s16, [r0, #12]
}
 80090f0:	ecbd 8b02 	vpop	{d8}
 80090f4:	bd10      	pop	{r4, pc}
 80090f6:	bf00      	nop
 80090f8:	20003254 	.word	0x20003254

080090fc <mpool_create>:

/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
 80090fc:	b410      	push	{r4}
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 80090fe:	4c0e      	ldr	r4, [pc, #56]	; (8009138 <mpool_create+0x3c>)
 8009100:	2310      	movs	r3, #16
 8009102:	62e3      	str	r3, [r4, #44]	; 0x2c
    
    pool->mpool = (void*)memory;
 8009104:	6010      	str	r0, [r2, #0]
    pool->usize  = 0;
 8009106:	2300      	movs	r3, #0
 8009108:	6053      	str	r3, [r2, #4]
    pool->msize  = size;
 800910a:	6091      	str	r1, [r2, #8]
    
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 800910c:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 800910e:	1b09      	subs	r1, r1, r4
}

static inline mpool_node_t* create_node(void* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + leaf.header_size;
 8009110:	4404      	add	r4, r0
 8009112:	6004      	str	r4, [r0, #0]
    node->next = next;
 8009114:	6043      	str	r3, [r0, #4]
    node->prev = prev;
 8009116:	6083      	str	r3, [r0, #8]
    node->size = size;
 8009118:	60c1      	str	r1, [r0, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 800911a:	60d0      	str	r0, [r2, #12]
    for (int i = 0; i < pool->head->size; i++)
 800911c:	e005      	b.n	800912a <mpool_create+0x2e>
        memory[i+leaf.header_size]=0;
 800911e:	4906      	ldr	r1, [pc, #24]	; (8009138 <mpool_create+0x3c>)
 8009120:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8009122:	4419      	add	r1, r3
 8009124:	2400      	movs	r4, #0
 8009126:	5444      	strb	r4, [r0, r1]
    for (int i = 0; i < pool->head->size; i++)
 8009128:	3301      	adds	r3, #1
 800912a:	68d1      	ldr	r1, [r2, #12]
 800912c:	68c9      	ldr	r1, [r1, #12]
 800912e:	4299      	cmp	r1, r3
 8009130:	d8f5      	bhi.n	800911e <mpool_create+0x22>
}
 8009132:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009136:	4770      	bx	lr
 8009138:	20003254 	.word	0x20003254

0800913c <leaf_pool_init>:
{
 800913c:	b510      	push	{r4, lr}
    mpool_create(memory, size, &leaf._mempool);
 800913e:	4c03      	ldr	r4, [pc, #12]	; (800914c <leaf_pool_init+0x10>)
 8009140:	4622      	mov	r2, r4
 8009142:	f7ff ffdb 	bl	80090fc <mpool_create>
    leaf.mempool = &leaf._mempool;
 8009146:	f844 4c04 	str.w	r4, [r4, #-4]
}
 800914a:	bd10      	pop	{r4, pc}
 800914c:	20003270 	.word	0x20003270

08009150 <mpool_alloc>:
    if (pool->head == NULL) return NULL;
 8009150:	68cb      	ldr	r3, [r1, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d049      	beq.n	80091ea <mpool_alloc+0x9a>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8009156:	3007      	adds	r0, #7
 8009158:	f020 0007 	bic.w	r0, r0, #7
    while (node_to_alloc->size < size_to_alloc)
 800915c:	68da      	ldr	r2, [r3, #12]
 800915e:	4282      	cmp	r2, r0
 8009160:	d204      	bcs.n	800916c <mpool_alloc+0x1c>
        node_to_alloc = node_to_alloc->next;
 8009162:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL) return NULL;
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1f9      	bne.n	800915c <mpool_alloc+0xc>
 8009168:	2000      	movs	r0, #0
}
 800916a:	4770      	bx	lr
{
 800916c:	b4f0      	push	{r4, r5, r6, r7}
    size_t leftover = node_to_alloc->size - size_to_alloc;
 800916e:	1a15      	subs	r5, r2, r0
    node_to_alloc->size = size_to_alloc;
 8009170:	60d8      	str	r0, [r3, #12]
    if (leftover > leaf.header_size)
 8009172:	4c1f      	ldr	r4, [pc, #124]	; (80091f0 <mpool_alloc+0xa0>)
 8009174:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8009176:	42ac      	cmp	r4, r5
 8009178:	d229      	bcs.n	80091ce <mpool_alloc+0x7e>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800917a:	680e      	ldr	r6, [r1, #0]
 800917c:	1b9a      	subs	r2, r3, r6
        offset += leaf.header_size + node_to_alloc->size;
 800917e:	4420      	add	r0, r4
 8009180:	4410      	add	r0, r2
        new_node = create_node(&pool->mpool[offset],
 8009182:	1832      	adds	r2, r6, r0
                               node_to_alloc->next,
 8009184:	f8d3 c004 	ldr.w	ip, [r3, #4]
                               node_to_alloc->prev,
 8009188:	689f      	ldr	r7, [r3, #8]
        new_node = create_node(&pool->mpool[offset],
 800918a:	1b2d      	subs	r5, r5, r4
    node->pool = block_location + leaf.header_size;
 800918c:	4414      	add	r4, r2
 800918e:	5034      	str	r4, [r6, r0]
    node->next = next;
 8009190:	f8c2 c004 	str.w	ip, [r2, #4]
    node->prev = prev;
 8009194:	6097      	str	r7, [r2, #8]
    node->size = size;
 8009196:	60d5      	str	r5, [r2, #12]
    if (pool->head == node_to_alloc)
 8009198:	68c8      	ldr	r0, [r1, #12]
 800919a:	4298      	cmp	r0, r3
 800919c:	d01a      	beq.n	80091d4 <mpool_alloc+0x84>
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 800919e:	685a      	ldr	r2, [r3, #4]
 80091a0:	b10a      	cbz	r2, 80091a6 <mpool_alloc+0x56>
    {
        // Close the link
        node->next->prev = node->prev;
 80091a2:	6898      	ldr	r0, [r3, #8]
 80091a4:	6090      	str	r0, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 80091a6:	689a      	ldr	r2, [r3, #8]
 80091a8:	b10a      	cbz	r2, 80091ae <mpool_alloc+0x5e>
    {
        // Close the link
        node->prev->next = node->next;
 80091aa:	6858      	ldr	r0, [r3, #4]
 80091ac:	6050      	str	r0, [r2, #4]
    }
    
    node->next = NULL;
 80091ae:	2200      	movs	r2, #0
 80091b0:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 80091b2:	609a      	str	r2, [r3, #8]
    pool->usize += leaf.header_size + node_to_alloc->size;
 80091b4:	4c0e      	ldr	r4, [pc, #56]	; (80091f0 <mpool_alloc+0xa0>)
 80091b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80091b8:	68d8      	ldr	r0, [r3, #12]
 80091ba:	4410      	add	r0, r2
 80091bc:	684a      	ldr	r2, [r1, #4]
 80091be:	4402      	add	r2, r0
 80091c0:	604a      	str	r2, [r1, #4]
    if (leaf.clearOnAllocation > 0)
 80091c2:	6962      	ldr	r2, [r4, #20]
 80091c4:	2a00      	cmp	r2, #0
 80091c6:	dd0d      	ble.n	80091e4 <mpool_alloc+0x94>
        char* new_pool = (char*)node_to_alloc->pool;
 80091c8:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80091ca:	2200      	movs	r2, #0
 80091cc:	e007      	b.n	80091de <mpool_alloc+0x8e>
        node_to_alloc->size += leftover;
 80091ce:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 80091d0:	685a      	ldr	r2, [r3, #4]
 80091d2:	e7e1      	b.n	8009198 <mpool_alloc+0x48>
        pool->head = new_node;
 80091d4:	60ca      	str	r2, [r1, #12]
 80091d6:	e7e2      	b.n	800919e <mpool_alloc+0x4e>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80091d8:	2100      	movs	r1, #0
 80091da:	5481      	strb	r1, [r0, r2]
 80091dc:	3201      	adds	r2, #1
 80091de:	68d9      	ldr	r1, [r3, #12]
 80091e0:	4291      	cmp	r1, r2
 80091e2:	d8f9      	bhi.n	80091d8 <mpool_alloc+0x88>
    return node_to_alloc->pool;
 80091e4:	6818      	ldr	r0, [r3, #0]
}
 80091e6:	bcf0      	pop	{r4, r5, r6, r7}
 80091e8:	4770      	bx	lr
    if (pool->head == NULL) return NULL;
 80091ea:	2000      	movs	r0, #0
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop
 80091f0:	20003254 	.word	0x20003254

080091f4 <leaf_alloc>:
{
 80091f4:	b508      	push	{r3, lr}
    void* block = mpool_alloc(size, &leaf._mempool);
 80091f6:	4902      	ldr	r1, [pc, #8]	; (8009200 <leaf_alloc+0xc>)
 80091f8:	f7ff ffaa 	bl	8009150 <mpool_alloc>
}
 80091fc:	bd08      	pop	{r3, pc}
 80091fe:	bf00      	nop
 8009200:	20003270 	.word	0x20003270

08009204 <tMempool_initToPool>:
{
    tMempool_freeFromPool(mp, &leaf.mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
 8009204:	b570      	push	{r4, r5, r6, lr}
 8009206:	4606      	mov	r6, r0
 8009208:	460c      	mov	r4, r1
 800920a:	4615      	mov	r5, r2
    _tMempool* mm = *mem;
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 800920c:	6819      	ldr	r1, [r3, #0]
 800920e:	2010      	movs	r0, #16
 8009210:	f7ff ff9e 	bl	8009150 <mpool_alloc>
 8009214:	4602      	mov	r2, r0
 8009216:	6030      	str	r0, [r6, #0]
    
    mpool_create (memory, size, m);
 8009218:	4629      	mov	r1, r5
 800921a:	4620      	mov	r0, r4
 800921c:	f7ff ff6e 	bl	80090fc <mpool_create>
}
 8009220:	bd70      	pop	{r4, r5, r6, pc}
	...

08009224 <tMempool_init>:
{
 8009224:	b508      	push	{r3, lr}
    tMempool_initToPool(mp, memory, size, &leaf.mempool);
 8009226:	4b02      	ldr	r3, [pc, #8]	; (8009230 <tMempool_init+0xc>)
 8009228:	f7ff ffec 	bl	8009204 <tMempool_initToPool>
}
 800922c:	bd08      	pop	{r3, pc}
 800922e:	bf00      	nop
 8009230:	2000326c 	.word	0x2000326c

08009234 <tCycle_initToPool>:
{
    tCycle_freeFromPool(cy, &leaf.mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
 8009234:	b510      	push	{r4, lr}
 8009236:	4604      	mov	r4, r0
    _tMempool* m = *mp;
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8009238:	6809      	ldr	r1, [r1, #0]
 800923a:	200c      	movs	r0, #12
 800923c:	f7ff ff88 	bl	8009150 <mpool_alloc>
 8009240:	6020      	str	r0, [r4, #0]
    
    c->inc      =  0.0f;
 8009242:	2300      	movs	r3, #0
 8009244:	6043      	str	r3, [r0, #4]
    c->phase    =  0.0f;
 8009246:	6003      	str	r3, [r0, #0]

}
 8009248:	bd10      	pop	{r4, pc}
	...

0800924c <tCycle_init>:
{
 800924c:	b508      	push	{r3, lr}
    tCycle_initToPool(cy, &leaf.mempool);
 800924e:	4902      	ldr	r1, [pc, #8]	; (8009258 <tCycle_init+0xc>)
 8009250:	f7ff fff0 	bl	8009234 <tCycle_initToPool>
}
 8009254:	bd08      	pop	{r3, pc}
 8009256:	bf00      	nop
 8009258:	2000326c 	.word	0x2000326c

0800925c <tCycle_setFreq>:
    mpool_free(c, m);
}

void     tCycle_setFreq(tCycle* const cy, float freq)
{
    _tCycle* c = *cy;
 800925c:	6803      	ldr	r3, [r0, #0]
    
    if (freq < 0.0f) c->freq = 0.0f;
 800925e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009266:	d410      	bmi.n	800928a <tCycle_setFreq+0x2e>
    else if (freq > 20480.0f) c->freq = 20480.0f;
 8009268:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8009298 <tCycle_setFreq+0x3c>
 800926c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009274:	dc0c      	bgt.n	8009290 <tCycle_setFreq+0x34>
    else c->freq  = freq;
 8009276:	ed83 0a02 	vstr	s0, [r3, #8]

    c->inc = freq * leaf.invSampleRate;
 800927a:	4a08      	ldr	r2, [pc, #32]	; (800929c <tCycle_setFreq+0x40>)
 800927c:	edd2 7a01 	vldr	s15, [r2, #4]
 8009280:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009284:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8009288:	4770      	bx	lr
    if (freq < 0.0f) c->freq = 0.0f;
 800928a:	2200      	movs	r2, #0
 800928c:	609a      	str	r2, [r3, #8]
 800928e:	e7f4      	b.n	800927a <tCycle_setFreq+0x1e>
    else if (freq > 20480.0f) c->freq = 20480.0f;
 8009290:	edc3 7a02 	vstr	s15, [r3, #8]
 8009294:	e7f1      	b.n	800927a <tCycle_setFreq+0x1e>
 8009296:	bf00      	nop
 8009298:	46a00000 	.word	0x46a00000
 800929c:	20003254 	.word	0x20003254

080092a0 <tSawtooth_setFreq>:
    mpool_free(c, m);
}

void    tSawtooth_setFreq(tSawtooth* const cy, float freq)
{
    _tSawtooth* c = *cy;
 80092a0:	6803      	ldr	r3, [r0, #0]
    
    if (freq < 0.0f) c->freq = 0.0f;
 80092a2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80092a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092aa:	d409      	bmi.n	80092c0 <tSawtooth_setFreq+0x20>
    else if (freq > 20480.0f) c->freq = 20480.0f;
 80092ac:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800931c <tSawtooth_setFreq+0x7c>
 80092b0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80092b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092b8:	dd16      	ble.n	80092e8 <tSawtooth_setFreq+0x48>
 80092ba:	edc3 7a02 	vstr	s15, [r3, #8]
 80092be:	e001      	b.n	80092c4 <tSawtooth_setFreq+0x24>
    if (freq < 0.0f) c->freq = 0.0f;
 80092c0:	2200      	movs	r2, #0
 80092c2:	609a      	str	r2, [r3, #8]
    else c->freq  = freq;
    
    c->inc = c->freq * leaf.invSampleRate;
 80092c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80092c8:	4a15      	ldr	r2, [pc, #84]	; (8009320 <tSawtooth_setFreq+0x80>)
 80092ca:	ed92 7a01 	vldr	s14, [r2, #4]
 80092ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80092d2:	ed83 7a01 	vstr	s14, [r3, #4]
    
    c->w = c->freq * INV_20;
 80092d6:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8009324 <tSawtooth_setFreq+0x84>
 80092da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80092de:	edc3 7a04 	vstr	s15, [r3, #16]
    for (c->oct = 0; c->w > 2.0f; c->oct++)
 80092e2:	2200      	movs	r2, #0
 80092e4:	731a      	strb	r2, [r3, #12]
 80092e6:	e00b      	b.n	8009300 <tSawtooth_setFreq+0x60>
    else c->freq  = freq;
 80092e8:	ed83 0a02 	vstr	s0, [r3, #8]
 80092ec:	e7ea      	b.n	80092c4 <tSawtooth_setFreq+0x24>
    {
        c->w = 0.5f * c->w;
 80092ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80092f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80092f6:	edc3 7a04 	vstr	s15, [r3, #16]
    for (c->oct = 0; c->w > 2.0f; c->oct++)
 80092fa:	7b1a      	ldrb	r2, [r3, #12]
 80092fc:	3201      	adds	r2, #1
 80092fe:	731a      	strb	r2, [r3, #12]
 8009300:	edd3 7a04 	vldr	s15, [r3, #16]
 8009304:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009308:	eef4 7ac7 	vcmpe.f32	s15, s14
 800930c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009310:	dced      	bgt.n	80092ee <tSawtooth_setFreq+0x4e>
    }
    c->w = 2.0f - c->w;
 8009312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009316:	edc3 7a04 	vstr	s15, [r3, #16]
}
 800931a:	4770      	bx	lr
 800931c:	46a00000 	.word	0x46a00000
 8009320:	20003254 	.word	0x20003254
 8009324:	3d4ccccd 	.word	0x3d4ccccd

08009328 <tSawtooth_initToPool>:
{
 8009328:	b510      	push	{r4, lr}
 800932a:	4604      	mov	r4, r0
    _tSawtooth* c = *cy = (_tSawtooth*) mpool_alloc(sizeof(_tSawtooth), m);
 800932c:	6809      	ldr	r1, [r1, #0]
 800932e:	2014      	movs	r0, #20
 8009330:	f7ff ff0e 	bl	8009150 <mpool_alloc>
 8009334:	6020      	str	r0, [r4, #0]
    c->inc      = 0.0f;
 8009336:	2300      	movs	r3, #0
 8009338:	6043      	str	r3, [r0, #4]
    c->phase    = 0.0f;
 800933a:	6003      	str	r3, [r0, #0]
    tSawtooth_setFreq(cy, 220);
 800933c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8009348 <tSawtooth_initToPool+0x20>
 8009340:	4620      	mov	r0, r4
 8009342:	f7ff ffad 	bl	80092a0 <tSawtooth_setFreq>
}
 8009346:	bd10      	pop	{r4, pc}
 8009348:	435c0000 	.word	0x435c0000

0800934c <tSawtooth_init>:
{
 800934c:	b508      	push	{r3, lr}
    tSawtooth_initToPool(cy, &leaf.mempool);
 800934e:	4902      	ldr	r1, [pc, #8]	; (8009358 <tSawtooth_init+0xc>)
 8009350:	f7ff ffea 	bl	8009328 <tSawtooth_initToPool>
}
 8009354:	bd08      	pop	{r3, pc}
 8009356:	bf00      	nop
 8009358:	2000326c 	.word	0x2000326c

0800935c <tNoise_initToPool>:
{
    tNoise_freeFromPool(ns, &leaf.mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
 800935c:	b538      	push	{r3, r4, r5, lr}
 800935e:	4605      	mov	r5, r0
 8009360:	460c      	mov	r4, r1
    _tMempool* m = *mp;
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 8009362:	6811      	ldr	r1, [r2, #0]
 8009364:	2014      	movs	r0, #20
 8009366:	f7ff fef3 	bl	8009150 <mpool_alloc>
 800936a:	6028      	str	r0, [r5, #0]
    
    n->type = type;
 800936c:	7004      	strb	r4, [r0, #0]
    n->rand = leaf.random;
 800936e:	4b02      	ldr	r3, [pc, #8]	; (8009378 <tNoise_initToPool+0x1c>)
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	6103      	str	r3, [r0, #16]
}
 8009374:	bd38      	pop	{r3, r4, r5, pc}
 8009376:	bf00      	nop
 8009378:	20003254 	.word	0x20003254

0800937c <tNoise_init>:
{
 800937c:	b508      	push	{r3, lr}
    tNoise_initToPool(ns, type, &leaf.mempool);
 800937e:	4a02      	ldr	r2, [pc, #8]	; (8009388 <tNoise_init+0xc>)
 8009380:	f7ff ffec 	bl	800935c <tNoise_initToPool>
}
 8009384:	bd08      	pop	{r3, pc}
 8009386:	bf00      	nop
 8009388:	2000326c 	.word	0x2000326c

0800938c <LEAF_init>:

LEAF leaf;

void LEAF_init(float sr, int blocksize, char* memory, size_t memorysize, float(*random)(void))

{
 800938c:	b538      	push	{r3, r4, r5, lr}
 800938e:	ed2d 8b02 	vpush	{d8}
 8009392:	eeb0 8a40 	vmov.f32	s16, s0
 8009396:	4605      	mov	r5, r0
 8009398:	4608      	mov	r0, r1
 800939a:	461c      	mov	r4, r3
    leaf_pool_init(memory, memorysize);
 800939c:	4611      	mov	r1, r2
 800939e:	f7ff fecd 	bl	800913c <leaf_pool_init>
    
    leaf.sampleRate = sr;
 80093a2:	4b0b      	ldr	r3, [pc, #44]	; (80093d0 <LEAF_init+0x44>)
 80093a4:	ed83 8a00 	vstr	s16, [r3]

    leaf.blockSize = blocksize;
 80093a8:	609d      	str	r5, [r3, #8]
    
    leaf.invSampleRate = 1.0f/sr;
 80093aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093ae:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80093b2:	edc3 7a01 	vstr	s15, [r3, #4]
    
    leaf.twoPiTimesInvSampleRate = leaf.invSampleRate * TWO_PI;
 80093b6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80093d4 <LEAF_init+0x48>
 80093ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80093be:	edc3 7a03 	vstr	s15, [r3, #12]

    leaf.random = random;
 80093c2:	611c      	str	r4, [r3, #16]
    
    leaf.clearOnAllocation = 0;
 80093c4:	2200      	movs	r2, #0
 80093c6:	615a      	str	r2, [r3, #20]
}
 80093c8:	ecbd 8b02 	vpop	{d8}
 80093cc:	bd38      	pop	{r3, r4, r5, pc}
 80093ce:	bf00      	nop
 80093d0:	20003254 	.word	0x20003254
 80093d4:	40c90fdb 	.word	0x40c90fdb

080093d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80093d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009410 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80093dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80093de:	e003      	b.n	80093e8 <LoopCopyDataInit>

080093e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80093e0:	4b0c      	ldr	r3, [pc, #48]	; (8009414 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80093e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80093e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80093e6:	3104      	adds	r1, #4

080093e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80093e8:	480b      	ldr	r0, [pc, #44]	; (8009418 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80093ea:	4b0c      	ldr	r3, [pc, #48]	; (800941c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80093ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80093ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80093f0:	d3f6      	bcc.n	80093e0 <CopyDataInit>
  ldr  r2, =_sbss
 80093f2:	4a0b      	ldr	r2, [pc, #44]	; (8009420 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80093f4:	e002      	b.n	80093fc <LoopFillZerobss>

080093f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80093f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80093f8:	f842 3b04 	str.w	r3, [r2], #4

080093fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80093fc:	4b09      	ldr	r3, [pc, #36]	; (8009424 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80093fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009400:	d3f9      	bcc.n	80093f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009402:	f7ff fb69 	bl	8008ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009406:	f000 f811 	bl	800942c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800940a:	f7fe ffd3 	bl	80083b4 <main>
  bx  lr    
 800940e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009410:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8009414:	08115aa0 	.word	0x08115aa0
  ldr  r0, =_sdata
 8009418:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800941c:	20000290 	.word	0x20000290
  ldr  r2, =_sbss
 8009420:	20000290 	.word	0x20000290
  ldr  r3, = _ebss
 8009424:	20003284 	.word	0x20003284

08009428 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009428:	e7fe      	b.n	8009428 <ADC3_IRQHandler>
	...

0800942c <__libc_init_array>:
 800942c:	b570      	push	{r4, r5, r6, lr}
 800942e:	4e0d      	ldr	r6, [pc, #52]	; (8009464 <__libc_init_array+0x38>)
 8009430:	4c0d      	ldr	r4, [pc, #52]	; (8009468 <__libc_init_array+0x3c>)
 8009432:	1ba4      	subs	r4, r4, r6
 8009434:	10a4      	asrs	r4, r4, #2
 8009436:	2500      	movs	r5, #0
 8009438:	42a5      	cmp	r5, r4
 800943a:	d109      	bne.n	8009450 <__libc_init_array+0x24>
 800943c:	4e0b      	ldr	r6, [pc, #44]	; (800946c <__libc_init_array+0x40>)
 800943e:	4c0c      	ldr	r4, [pc, #48]	; (8009470 <__libc_init_array+0x44>)
 8009440:	f000 fd90 	bl	8009f64 <_init>
 8009444:	1ba4      	subs	r4, r4, r6
 8009446:	10a4      	asrs	r4, r4, #2
 8009448:	2500      	movs	r5, #0
 800944a:	42a5      	cmp	r5, r4
 800944c:	d105      	bne.n	800945a <__libc_init_array+0x2e>
 800944e:	bd70      	pop	{r4, r5, r6, pc}
 8009450:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009454:	4798      	blx	r3
 8009456:	3501      	adds	r5, #1
 8009458:	e7ee      	b.n	8009438 <__libc_init_array+0xc>
 800945a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800945e:	4798      	blx	r3
 8009460:	3501      	adds	r5, #1
 8009462:	e7f2      	b.n	800944a <__libc_init_array+0x1e>
 8009464:	08115a98 	.word	0x08115a98
 8009468:	08115a98 	.word	0x08115a98
 800946c:	08115a98 	.word	0x08115a98
 8009470:	08115a9c 	.word	0x08115a9c

08009474 <memset>:
 8009474:	4402      	add	r2, r0
 8009476:	4603      	mov	r3, r0
 8009478:	4293      	cmp	r3, r2
 800947a:	d100      	bne.n	800947e <memset+0xa>
 800947c:	4770      	bx	lr
 800947e:	f803 1b01 	strb.w	r1, [r3], #1
 8009482:	e7f9      	b.n	8009478 <memset+0x4>

08009484 <fabsf>:
 8009484:	ee10 3a10 	vmov	r3, s0
 8009488:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800948c:	ee00 3a10 	vmov	s0, r3
 8009490:	4770      	bx	lr
	...

08009494 <tanf>:
 8009494:	ee10 3a10 	vmov	r3, s0
 8009498:	b507      	push	{r0, r1, r2, lr}
 800949a:	4a10      	ldr	r2, [pc, #64]	; (80094dc <tanf+0x48>)
 800949c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094a0:	4293      	cmp	r3, r2
 80094a2:	dc05      	bgt.n	80094b0 <tanf+0x1c>
 80094a4:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80094e0 <tanf+0x4c>
 80094a8:	2001      	movs	r0, #1
 80094aa:	f000 fbc9 	bl	8009c40 <__kernel_tanf>
 80094ae:	e004      	b.n	80094ba <tanf+0x26>
 80094b0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80094b4:	db04      	blt.n	80094c0 <tanf+0x2c>
 80094b6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80094ba:	b003      	add	sp, #12
 80094bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80094c0:	4668      	mov	r0, sp
 80094c2:	f000 f80f 	bl	80094e4 <__ieee754_rem_pio2f>
 80094c6:	0040      	lsls	r0, r0, #1
 80094c8:	f000 0002 	and.w	r0, r0, #2
 80094cc:	f1c0 0001 	rsb	r0, r0, #1
 80094d0:	eddd 0a01 	vldr	s1, [sp, #4]
 80094d4:	ed9d 0a00 	vldr	s0, [sp]
 80094d8:	e7e7      	b.n	80094aa <tanf+0x16>
 80094da:	bf00      	nop
 80094dc:	3f490fda 	.word	0x3f490fda
 80094e0:	00000000 	.word	0x00000000

080094e4 <__ieee754_rem_pio2f>:
 80094e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094e6:	ee10 6a10 	vmov	r6, s0
 80094ea:	4b86      	ldr	r3, [pc, #536]	; (8009704 <__ieee754_rem_pio2f+0x220>)
 80094ec:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80094f0:	429c      	cmp	r4, r3
 80094f2:	b087      	sub	sp, #28
 80094f4:	4605      	mov	r5, r0
 80094f6:	dc05      	bgt.n	8009504 <__ieee754_rem_pio2f+0x20>
 80094f8:	2300      	movs	r3, #0
 80094fa:	ed85 0a00 	vstr	s0, [r5]
 80094fe:	6043      	str	r3, [r0, #4]
 8009500:	2000      	movs	r0, #0
 8009502:	e020      	b.n	8009546 <__ieee754_rem_pio2f+0x62>
 8009504:	4b80      	ldr	r3, [pc, #512]	; (8009708 <__ieee754_rem_pio2f+0x224>)
 8009506:	429c      	cmp	r4, r3
 8009508:	dc38      	bgt.n	800957c <__ieee754_rem_pio2f+0x98>
 800950a:	2e00      	cmp	r6, #0
 800950c:	f024 040f 	bic.w	r4, r4, #15
 8009510:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800970c <__ieee754_rem_pio2f+0x228>
 8009514:	4b7e      	ldr	r3, [pc, #504]	; (8009710 <__ieee754_rem_pio2f+0x22c>)
 8009516:	dd18      	ble.n	800954a <__ieee754_rem_pio2f+0x66>
 8009518:	429c      	cmp	r4, r3
 800951a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800951e:	bf09      	itett	eq
 8009520:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8009714 <__ieee754_rem_pio2f+0x230>
 8009524:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8009718 <__ieee754_rem_pio2f+0x234>
 8009528:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800952c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800971c <__ieee754_rem_pio2f+0x238>
 8009530:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8009534:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009538:	edc0 6a00 	vstr	s13, [r0]
 800953c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009540:	edc0 7a01 	vstr	s15, [r0, #4]
 8009544:	2001      	movs	r0, #1
 8009546:	b007      	add	sp, #28
 8009548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800954a:	429c      	cmp	r4, r3
 800954c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8009550:	bf09      	itett	eq
 8009552:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8009714 <__ieee754_rem_pio2f+0x230>
 8009556:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8009718 <__ieee754_rem_pio2f+0x234>
 800955a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800955e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800971c <__ieee754_rem_pio2f+0x238>
 8009562:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009566:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800956a:	edc0 6a00 	vstr	s13, [r0]
 800956e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009572:	edc0 7a01 	vstr	s15, [r0, #4]
 8009576:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800957a:	e7e4      	b.n	8009546 <__ieee754_rem_pio2f+0x62>
 800957c:	4b68      	ldr	r3, [pc, #416]	; (8009720 <__ieee754_rem_pio2f+0x23c>)
 800957e:	429c      	cmp	r4, r3
 8009580:	dc71      	bgt.n	8009666 <__ieee754_rem_pio2f+0x182>
 8009582:	f7ff ff7f 	bl	8009484 <fabsf>
 8009586:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8009724 <__ieee754_rem_pio2f+0x240>
 800958a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800958e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009592:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009596:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800959a:	ee17 0a90 	vmov	r0, s15
 800959e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800970c <__ieee754_rem_pio2f+0x228>
 80095a2:	eeb1 7a46 	vneg.f32	s14, s12
 80095a6:	eea7 0a27 	vfma.f32	s0, s14, s15
 80095aa:	281f      	cmp	r0, #31
 80095ac:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8009718 <__ieee754_rem_pio2f+0x234>
 80095b0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80095b4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80095b8:	ee16 3a90 	vmov	r3, s13
 80095bc:	dc1c      	bgt.n	80095f8 <__ieee754_rem_pio2f+0x114>
 80095be:	1e47      	subs	r7, r0, #1
 80095c0:	4959      	ldr	r1, [pc, #356]	; (8009728 <__ieee754_rem_pio2f+0x244>)
 80095c2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80095c6:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80095ca:	428a      	cmp	r2, r1
 80095cc:	d014      	beq.n	80095f8 <__ieee754_rem_pio2f+0x114>
 80095ce:	602b      	str	r3, [r5, #0]
 80095d0:	ed95 7a00 	vldr	s14, [r5]
 80095d4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80095d8:	2e00      	cmp	r6, #0
 80095da:	ee30 0a67 	vsub.f32	s0, s0, s15
 80095de:	ed85 0a01 	vstr	s0, [r5, #4]
 80095e2:	dab0      	bge.n	8009546 <__ieee754_rem_pio2f+0x62>
 80095e4:	eeb1 7a47 	vneg.f32	s14, s14
 80095e8:	eeb1 0a40 	vneg.f32	s0, s0
 80095ec:	ed85 7a00 	vstr	s14, [r5]
 80095f0:	ed85 0a01 	vstr	s0, [r5, #4]
 80095f4:	4240      	negs	r0, r0
 80095f6:	e7a6      	b.n	8009546 <__ieee754_rem_pio2f+0x62>
 80095f8:	15e4      	asrs	r4, r4, #23
 80095fa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80095fe:	1aa2      	subs	r2, r4, r2
 8009600:	2a08      	cmp	r2, #8
 8009602:	dde4      	ble.n	80095ce <__ieee754_rem_pio2f+0xea>
 8009604:	eddf 7a43 	vldr	s15, [pc, #268]	; 8009714 <__ieee754_rem_pio2f+0x230>
 8009608:	eef0 6a40 	vmov.f32	s13, s0
 800960c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009610:	ee30 0a66 	vsub.f32	s0, s0, s13
 8009614:	eea7 0a27 	vfma.f32	s0, s14, s15
 8009618:	eddf 7a40 	vldr	s15, [pc, #256]	; 800971c <__ieee754_rem_pio2f+0x238>
 800961c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8009620:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8009624:	eef0 7a40 	vmov.f32	s15, s0
 8009628:	ee15 3a90 	vmov	r3, s11
 800962c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009630:	1aa4      	subs	r4, r4, r2
 8009632:	2c19      	cmp	r4, #25
 8009634:	dc04      	bgt.n	8009640 <__ieee754_rem_pio2f+0x15c>
 8009636:	edc5 5a00 	vstr	s11, [r5]
 800963a:	eeb0 0a66 	vmov.f32	s0, s13
 800963e:	e7c7      	b.n	80095d0 <__ieee754_rem_pio2f+0xec>
 8009640:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800972c <__ieee754_rem_pio2f+0x248>
 8009644:	eeb0 0a66 	vmov.f32	s0, s13
 8009648:	eea7 0a25 	vfma.f32	s0, s14, s11
 800964c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8009650:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009654:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009730 <__ieee754_rem_pio2f+0x24c>
 8009658:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800965c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009660:	ed85 7a00 	vstr	s14, [r5]
 8009664:	e7b4      	b.n	80095d0 <__ieee754_rem_pio2f+0xec>
 8009666:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800966a:	db06      	blt.n	800967a <__ieee754_rem_pio2f+0x196>
 800966c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009670:	edc0 7a01 	vstr	s15, [r0, #4]
 8009674:	edc0 7a00 	vstr	s15, [r0]
 8009678:	e742      	b.n	8009500 <__ieee754_rem_pio2f+0x1c>
 800967a:	15e2      	asrs	r2, r4, #23
 800967c:	3a86      	subs	r2, #134	; 0x86
 800967e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8009682:	ee07 3a90 	vmov	s15, r3
 8009686:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800968a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8009734 <__ieee754_rem_pio2f+0x250>
 800968e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009692:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009696:	ed8d 7a03 	vstr	s14, [sp, #12]
 800969a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800969e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80096a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80096a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80096aa:	ed8d 7a04 	vstr	s14, [sp, #16]
 80096ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80096b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80096b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ba:	edcd 7a05 	vstr	s15, [sp, #20]
 80096be:	d11e      	bne.n	80096fe <__ieee754_rem_pio2f+0x21a>
 80096c0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80096c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096c8:	bf0c      	ite	eq
 80096ca:	2301      	moveq	r3, #1
 80096cc:	2302      	movne	r3, #2
 80096ce:	491a      	ldr	r1, [pc, #104]	; (8009738 <__ieee754_rem_pio2f+0x254>)
 80096d0:	9101      	str	r1, [sp, #4]
 80096d2:	2102      	movs	r1, #2
 80096d4:	9100      	str	r1, [sp, #0]
 80096d6:	a803      	add	r0, sp, #12
 80096d8:	4629      	mov	r1, r5
 80096da:	f000 f82f 	bl	800973c <__kernel_rem_pio2f>
 80096de:	2e00      	cmp	r6, #0
 80096e0:	f6bf af31 	bge.w	8009546 <__ieee754_rem_pio2f+0x62>
 80096e4:	edd5 7a00 	vldr	s15, [r5]
 80096e8:	eef1 7a67 	vneg.f32	s15, s15
 80096ec:	edc5 7a00 	vstr	s15, [r5]
 80096f0:	edd5 7a01 	vldr	s15, [r5, #4]
 80096f4:	eef1 7a67 	vneg.f32	s15, s15
 80096f8:	edc5 7a01 	vstr	s15, [r5, #4]
 80096fc:	e77a      	b.n	80095f4 <__ieee754_rem_pio2f+0x110>
 80096fe:	2303      	movs	r3, #3
 8009700:	e7e5      	b.n	80096ce <__ieee754_rem_pio2f+0x1ea>
 8009702:	bf00      	nop
 8009704:	3f490fd8 	.word	0x3f490fd8
 8009708:	4016cbe3 	.word	0x4016cbe3
 800970c:	3fc90f80 	.word	0x3fc90f80
 8009710:	3fc90fd0 	.word	0x3fc90fd0
 8009714:	37354400 	.word	0x37354400
 8009718:	37354443 	.word	0x37354443
 800971c:	2e85a308 	.word	0x2e85a308
 8009720:	43490f80 	.word	0x43490f80
 8009724:	3f22f984 	.word	0x3f22f984
 8009728:	081156c8 	.word	0x081156c8
 800972c:	2e85a300 	.word	0x2e85a300
 8009730:	248d3132 	.word	0x248d3132
 8009734:	43800000 	.word	0x43800000
 8009738:	08115748 	.word	0x08115748

0800973c <__kernel_rem_pio2f>:
 800973c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009740:	ed2d 8b04 	vpush	{d8-d9}
 8009744:	b0d7      	sub	sp, #348	; 0x15c
 8009746:	469b      	mov	fp, r3
 8009748:	460e      	mov	r6, r1
 800974a:	4bbe      	ldr	r3, [pc, #760]	; (8009a44 <__kernel_rem_pio2f+0x308>)
 800974c:	9964      	ldr	r1, [sp, #400]	; 0x190
 800974e:	9002      	str	r0, [sp, #8]
 8009750:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8009754:	9865      	ldr	r0, [sp, #404]	; 0x194
 8009756:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8009a54 <__kernel_rem_pio2f+0x318>
 800975a:	1ed1      	subs	r1, r2, #3
 800975c:	2308      	movs	r3, #8
 800975e:	fb91 f1f3 	sdiv	r1, r1, r3
 8009762:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8009766:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 800976a:	1c4c      	adds	r4, r1, #1
 800976c:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8009770:	eba1 050a 	sub.w	r5, r1, sl
 8009774:	aa1a      	add	r2, sp, #104	; 0x68
 8009776:	eb09 070a 	add.w	r7, r9, sl
 800977a:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800977e:	4696      	mov	lr, r2
 8009780:	2300      	movs	r3, #0
 8009782:	42bb      	cmp	r3, r7
 8009784:	dd0f      	ble.n	80097a6 <__kernel_rem_pio2f+0x6a>
 8009786:	af42      	add	r7, sp, #264	; 0x108
 8009788:	2200      	movs	r2, #0
 800978a:	454a      	cmp	r2, r9
 800978c:	dc27      	bgt.n	80097de <__kernel_rem_pio2f+0xa2>
 800978e:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8009792:	eb0b 0302 	add.w	r3, fp, r2
 8009796:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800979a:	9d02      	ldr	r5, [sp, #8]
 800979c:	eddf 7aad 	vldr	s15, [pc, #692]	; 8009a54 <__kernel_rem_pio2f+0x318>
 80097a0:	f04f 0c00 	mov.w	ip, #0
 80097a4:	e015      	b.n	80097d2 <__kernel_rem_pio2f+0x96>
 80097a6:	42dd      	cmn	r5, r3
 80097a8:	bf5d      	ittte	pl
 80097aa:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 80097ae:	ee07 2a90 	vmovpl	s15, r2
 80097b2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80097b6:	eef0 7a47 	vmovmi.f32	s15, s14
 80097ba:	ecee 7a01 	vstmia	lr!, {s15}
 80097be:	3301      	adds	r3, #1
 80097c0:	e7df      	b.n	8009782 <__kernel_rem_pio2f+0x46>
 80097c2:	ecf5 6a01 	vldmia	r5!, {s13}
 80097c6:	ed33 7a01 	vldmdb	r3!, {s14}
 80097ca:	eee6 7a87 	vfma.f32	s15, s13, s14
 80097ce:	f10c 0c01 	add.w	ip, ip, #1
 80097d2:	45d4      	cmp	ip, sl
 80097d4:	ddf5      	ble.n	80097c2 <__kernel_rem_pio2f+0x86>
 80097d6:	ece7 7a01 	vstmia	r7!, {s15}
 80097da:	3201      	adds	r2, #1
 80097dc:	e7d5      	b.n	800978a <__kernel_rem_pio2f+0x4e>
 80097de:	ab06      	add	r3, sp, #24
 80097e0:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80097e4:	9304      	str	r3, [sp, #16]
 80097e6:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8009a50 <__kernel_rem_pio2f+0x314>
 80097ea:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8009a4c <__kernel_rem_pio2f+0x310>
 80097ee:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80097f2:	9303      	str	r3, [sp, #12]
 80097f4:	464d      	mov	r5, r9
 80097f6:	ab56      	add	r3, sp, #344	; 0x158
 80097f8:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 80097fc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8009800:	3f01      	subs	r7, #1
 8009802:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8009806:	00bf      	lsls	r7, r7, #2
 8009808:	ab56      	add	r3, sp, #344	; 0x158
 800980a:	19da      	adds	r2, r3, r7
 800980c:	3a4c      	subs	r2, #76	; 0x4c
 800980e:	2300      	movs	r3, #0
 8009810:	1ae9      	subs	r1, r5, r3
 8009812:	2900      	cmp	r1, #0
 8009814:	dc4c      	bgt.n	80098b0 <__kernel_rem_pio2f+0x174>
 8009816:	4620      	mov	r0, r4
 8009818:	f000 fb38 	bl	8009e8c <scalbnf>
 800981c:	eeb0 8a40 	vmov.f32	s16, s0
 8009820:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8009824:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009828:	f000 faee 	bl	8009e08 <floorf>
 800982c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8009830:	eea0 8a67 	vfms.f32	s16, s0, s15
 8009834:	2c00      	cmp	r4, #0
 8009836:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800983a:	edcd 7a01 	vstr	s15, [sp, #4]
 800983e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009842:	ee38 8a67 	vsub.f32	s16, s16, s15
 8009846:	dd48      	ble.n	80098da <__kernel_rem_pio2f+0x19e>
 8009848:	1e69      	subs	r1, r5, #1
 800984a:	ab06      	add	r3, sp, #24
 800984c:	f1c4 0008 	rsb	r0, r4, #8
 8009850:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8009854:	9a01      	ldr	r2, [sp, #4]
 8009856:	fa4c f300 	asr.w	r3, ip, r0
 800985a:	441a      	add	r2, r3
 800985c:	4083      	lsls	r3, r0
 800985e:	9201      	str	r2, [sp, #4]
 8009860:	ebac 0203 	sub.w	r2, ip, r3
 8009864:	ab06      	add	r3, sp, #24
 8009866:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800986a:	f1c4 0307 	rsb	r3, r4, #7
 800986e:	fa42 f803 	asr.w	r8, r2, r3
 8009872:	f1b8 0f00 	cmp.w	r8, #0
 8009876:	dd41      	ble.n	80098fc <__kernel_rem_pio2f+0x1c0>
 8009878:	9b01      	ldr	r3, [sp, #4]
 800987a:	2000      	movs	r0, #0
 800987c:	3301      	adds	r3, #1
 800987e:	9301      	str	r3, [sp, #4]
 8009880:	4601      	mov	r1, r0
 8009882:	4285      	cmp	r5, r0
 8009884:	dc6d      	bgt.n	8009962 <__kernel_rem_pio2f+0x226>
 8009886:	2c00      	cmp	r4, #0
 8009888:	dd04      	ble.n	8009894 <__kernel_rem_pio2f+0x158>
 800988a:	2c01      	cmp	r4, #1
 800988c:	d07e      	beq.n	800998c <__kernel_rem_pio2f+0x250>
 800988e:	2c02      	cmp	r4, #2
 8009890:	f000 8086 	beq.w	80099a0 <__kernel_rem_pio2f+0x264>
 8009894:	f1b8 0f02 	cmp.w	r8, #2
 8009898:	d130      	bne.n	80098fc <__kernel_rem_pio2f+0x1c0>
 800989a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800989e:	ee30 8a48 	vsub.f32	s16, s0, s16
 80098a2:	b359      	cbz	r1, 80098fc <__kernel_rem_pio2f+0x1c0>
 80098a4:	4620      	mov	r0, r4
 80098a6:	f000 faf1 	bl	8009e8c <scalbnf>
 80098aa:	ee38 8a40 	vsub.f32	s16, s16, s0
 80098ae:	e025      	b.n	80098fc <__kernel_rem_pio2f+0x1c0>
 80098b0:	ee60 7a28 	vmul.f32	s15, s0, s17
 80098b4:	a806      	add	r0, sp, #24
 80098b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80098ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098be:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80098c2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80098c6:	ee10 1a10 	vmov	r1, s0
 80098ca:	ed32 0a01 	vldmdb	r2!, {s0}
 80098ce:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80098d2:	ee37 0a80 	vadd.f32	s0, s15, s0
 80098d6:	3301      	adds	r3, #1
 80098d8:	e79a      	b.n	8009810 <__kernel_rem_pio2f+0xd4>
 80098da:	d106      	bne.n	80098ea <__kernel_rem_pio2f+0x1ae>
 80098dc:	1e6b      	subs	r3, r5, #1
 80098de:	aa06      	add	r2, sp, #24
 80098e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80098e4:	ea4f 2822 	mov.w	r8, r2, asr #8
 80098e8:	e7c3      	b.n	8009872 <__kernel_rem_pio2f+0x136>
 80098ea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80098ee:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80098f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098f6:	da31      	bge.n	800995c <__kernel_rem_pio2f+0x220>
 80098f8:	f04f 0800 	mov.w	r8, #0
 80098fc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009904:	f040 80a8 	bne.w	8009a58 <__kernel_rem_pio2f+0x31c>
 8009908:	1e6b      	subs	r3, r5, #1
 800990a:	4618      	mov	r0, r3
 800990c:	2200      	movs	r2, #0
 800990e:	4548      	cmp	r0, r9
 8009910:	da4d      	bge.n	80099ae <__kernel_rem_pio2f+0x272>
 8009912:	2a00      	cmp	r2, #0
 8009914:	f000 8087 	beq.w	8009a26 <__kernel_rem_pio2f+0x2ea>
 8009918:	aa06      	add	r2, sp, #24
 800991a:	3c08      	subs	r4, #8
 800991c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009920:	2900      	cmp	r1, #0
 8009922:	f000 808d 	beq.w	8009a40 <__kernel_rem_pio2f+0x304>
 8009926:	4620      	mov	r0, r4
 8009928:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800992c:	9302      	str	r3, [sp, #8]
 800992e:	f000 faad 	bl	8009e8c <scalbnf>
 8009932:	9b02      	ldr	r3, [sp, #8]
 8009934:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8009a50 <__kernel_rem_pio2f+0x314>
 8009938:	0099      	lsls	r1, r3, #2
 800993a:	aa42      	add	r2, sp, #264	; 0x108
 800993c:	1850      	adds	r0, r2, r1
 800993e:	1d05      	adds	r5, r0, #4
 8009940:	461c      	mov	r4, r3
 8009942:	2c00      	cmp	r4, #0
 8009944:	f280 80b8 	bge.w	8009ab8 <__kernel_rem_pio2f+0x37c>
 8009948:	2500      	movs	r5, #0
 800994a:	1b5c      	subs	r4, r3, r5
 800994c:	2c00      	cmp	r4, #0
 800994e:	f2c0 80d8 	blt.w	8009b02 <__kernel_rem_pio2f+0x3c6>
 8009952:	4f3d      	ldr	r7, [pc, #244]	; (8009a48 <__kernel_rem_pio2f+0x30c>)
 8009954:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8009a54 <__kernel_rem_pio2f+0x318>
 8009958:	2400      	movs	r4, #0
 800995a:	e0c6      	b.n	8009aea <__kernel_rem_pio2f+0x3ae>
 800995c:	f04f 0802 	mov.w	r8, #2
 8009960:	e78a      	b.n	8009878 <__kernel_rem_pio2f+0x13c>
 8009962:	ab06      	add	r3, sp, #24
 8009964:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009968:	b949      	cbnz	r1, 800997e <__kernel_rem_pio2f+0x242>
 800996a:	b12b      	cbz	r3, 8009978 <__kernel_rem_pio2f+0x23c>
 800996c:	aa06      	add	r2, sp, #24
 800996e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009972:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8009976:	2301      	movs	r3, #1
 8009978:	3001      	adds	r0, #1
 800997a:	4619      	mov	r1, r3
 800997c:	e781      	b.n	8009882 <__kernel_rem_pio2f+0x146>
 800997e:	aa06      	add	r2, sp, #24
 8009980:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8009984:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8009988:	460b      	mov	r3, r1
 800998a:	e7f5      	b.n	8009978 <__kernel_rem_pio2f+0x23c>
 800998c:	1e68      	subs	r0, r5, #1
 800998e:	ab06      	add	r3, sp, #24
 8009990:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009998:	aa06      	add	r2, sp, #24
 800999a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800999e:	e779      	b.n	8009894 <__kernel_rem_pio2f+0x158>
 80099a0:	1e68      	subs	r0, r5, #1
 80099a2:	ab06      	add	r3, sp, #24
 80099a4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80099a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099ac:	e7f4      	b.n	8009998 <__kernel_rem_pio2f+0x25c>
 80099ae:	a906      	add	r1, sp, #24
 80099b0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80099b4:	3801      	subs	r0, #1
 80099b6:	430a      	orrs	r2, r1
 80099b8:	e7a9      	b.n	800990e <__kernel_rem_pio2f+0x1d2>
 80099ba:	f10c 0c01 	add.w	ip, ip, #1
 80099be:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80099c2:	2a00      	cmp	r2, #0
 80099c4:	d0f9      	beq.n	80099ba <__kernel_rem_pio2f+0x27e>
 80099c6:	eb0b 0305 	add.w	r3, fp, r5
 80099ca:	aa1a      	add	r2, sp, #104	; 0x68
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	1898      	adds	r0, r3, r2
 80099d0:	3004      	adds	r0, #4
 80099d2:	1c69      	adds	r1, r5, #1
 80099d4:	3704      	adds	r7, #4
 80099d6:	2200      	movs	r2, #0
 80099d8:	4465      	add	r5, ip
 80099da:	9005      	str	r0, [sp, #20]
 80099dc:	428d      	cmp	r5, r1
 80099de:	f6ff af0a 	blt.w	80097f6 <__kernel_rem_pio2f+0xba>
 80099e2:	a81a      	add	r0, sp, #104	; 0x68
 80099e4:	eb02 0c03 	add.w	ip, r2, r3
 80099e8:	4484      	add	ip, r0
 80099ea:	9803      	ldr	r0, [sp, #12]
 80099ec:	f8dd e008 	ldr.w	lr, [sp, #8]
 80099f0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80099f4:	9001      	str	r0, [sp, #4]
 80099f6:	ee07 0a90 	vmov	s15, r0
 80099fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099fe:	9805      	ldr	r0, [sp, #20]
 8009a00:	edcc 7a00 	vstr	s15, [ip]
 8009a04:	eddf 7a13 	vldr	s15, [pc, #76]	; 8009a54 <__kernel_rem_pio2f+0x318>
 8009a08:	eb00 0802 	add.w	r8, r0, r2
 8009a0c:	f04f 0c00 	mov.w	ip, #0
 8009a10:	45d4      	cmp	ip, sl
 8009a12:	dd0c      	ble.n	8009a2e <__kernel_rem_pio2f+0x2f2>
 8009a14:	eb02 0c07 	add.w	ip, r2, r7
 8009a18:	a842      	add	r0, sp, #264	; 0x108
 8009a1a:	4484      	add	ip, r0
 8009a1c:	edcc 7a01 	vstr	s15, [ip, #4]
 8009a20:	3101      	adds	r1, #1
 8009a22:	3204      	adds	r2, #4
 8009a24:	e7da      	b.n	80099dc <__kernel_rem_pio2f+0x2a0>
 8009a26:	9b04      	ldr	r3, [sp, #16]
 8009a28:	f04f 0c01 	mov.w	ip, #1
 8009a2c:	e7c7      	b.n	80099be <__kernel_rem_pio2f+0x282>
 8009a2e:	ecfe 6a01 	vldmia	lr!, {s13}
 8009a32:	ed38 7a01 	vldmdb	r8!, {s14}
 8009a36:	f10c 0c01 	add.w	ip, ip, #1
 8009a3a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009a3e:	e7e7      	b.n	8009a10 <__kernel_rem_pio2f+0x2d4>
 8009a40:	3b01      	subs	r3, #1
 8009a42:	e769      	b.n	8009918 <__kernel_rem_pio2f+0x1dc>
 8009a44:	08115a8c 	.word	0x08115a8c
 8009a48:	08115a60 	.word	0x08115a60
 8009a4c:	43800000 	.word	0x43800000
 8009a50:	3b800000 	.word	0x3b800000
 8009a54:	00000000 	.word	0x00000000
 8009a58:	4260      	negs	r0, r4
 8009a5a:	eeb0 0a48 	vmov.f32	s0, s16
 8009a5e:	f000 fa15 	bl	8009e8c <scalbnf>
 8009a62:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8009a4c <__kernel_rem_pio2f+0x310>
 8009a66:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8009a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a6e:	db1a      	blt.n	8009aa6 <__kernel_rem_pio2f+0x36a>
 8009a70:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8009a50 <__kernel_rem_pio2f+0x314>
 8009a74:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009a78:	aa06      	add	r2, sp, #24
 8009a7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a7e:	a906      	add	r1, sp, #24
 8009a80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a84:	3408      	adds	r4, #8
 8009a86:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009a8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a8e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009a92:	ee10 3a10 	vmov	r3, s0
 8009a96:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8009a9a:	1c6b      	adds	r3, r5, #1
 8009a9c:	ee17 2a90 	vmov	r2, s15
 8009aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009aa4:	e73f      	b.n	8009926 <__kernel_rem_pio2f+0x1ea>
 8009aa6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009aaa:	aa06      	add	r2, sp, #24
 8009aac:	ee10 3a10 	vmov	r3, s0
 8009ab0:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8009ab4:	462b      	mov	r3, r5
 8009ab6:	e736      	b.n	8009926 <__kernel_rem_pio2f+0x1ea>
 8009ab8:	aa06      	add	r2, sp, #24
 8009aba:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8009abe:	9202      	str	r2, [sp, #8]
 8009ac0:	ee07 2a90 	vmov	s15, r2
 8009ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ac8:	3c01      	subs	r4, #1
 8009aca:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009ace:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009ad2:	ed65 7a01 	vstmdb	r5!, {s15}
 8009ad6:	e734      	b.n	8009942 <__kernel_rem_pio2f+0x206>
 8009ad8:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8009adc:	ecf7 6a01 	vldmia	r7!, {s13}
 8009ae0:	ed9c 7a00 	vldr	s14, [ip]
 8009ae4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009ae8:	3401      	adds	r4, #1
 8009aea:	454c      	cmp	r4, r9
 8009aec:	dc01      	bgt.n	8009af2 <__kernel_rem_pio2f+0x3b6>
 8009aee:	42a5      	cmp	r5, r4
 8009af0:	daf2      	bge.n	8009ad8 <__kernel_rem_pio2f+0x39c>
 8009af2:	aa56      	add	r2, sp, #344	; 0x158
 8009af4:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8009af8:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8009afc:	3501      	adds	r5, #1
 8009afe:	3804      	subs	r0, #4
 8009b00:	e723      	b.n	800994a <__kernel_rem_pio2f+0x20e>
 8009b02:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8009b04:	2a03      	cmp	r2, #3
 8009b06:	d84d      	bhi.n	8009ba4 <__kernel_rem_pio2f+0x468>
 8009b08:	e8df f002 	tbb	[pc, r2]
 8009b0c:	021f1f3e 	.word	0x021f1f3e
 8009b10:	aa56      	add	r2, sp, #344	; 0x158
 8009b12:	4411      	add	r1, r2
 8009b14:	399c      	subs	r1, #156	; 0x9c
 8009b16:	4608      	mov	r0, r1
 8009b18:	461c      	mov	r4, r3
 8009b1a:	2c00      	cmp	r4, #0
 8009b1c:	dc5f      	bgt.n	8009bde <__kernel_rem_pio2f+0x4a2>
 8009b1e:	4608      	mov	r0, r1
 8009b20:	461c      	mov	r4, r3
 8009b22:	2c01      	cmp	r4, #1
 8009b24:	dc6b      	bgt.n	8009bfe <__kernel_rem_pio2f+0x4c2>
 8009b26:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8009a54 <__kernel_rem_pio2f+0x318>
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	dc77      	bgt.n	8009c1e <__kernel_rem_pio2f+0x4e2>
 8009b2e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8009b32:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8009b36:	f1b8 0f00 	cmp.w	r8, #0
 8009b3a:	d176      	bne.n	8009c2a <__kernel_rem_pio2f+0x4ee>
 8009b3c:	edc6 6a00 	vstr	s13, [r6]
 8009b40:	ed86 7a01 	vstr	s14, [r6, #4]
 8009b44:	edc6 7a02 	vstr	s15, [r6, #8]
 8009b48:	e02c      	b.n	8009ba4 <__kernel_rem_pio2f+0x468>
 8009b4a:	aa56      	add	r2, sp, #344	; 0x158
 8009b4c:	4411      	add	r1, r2
 8009b4e:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8009a54 <__kernel_rem_pio2f+0x318>
 8009b52:	399c      	subs	r1, #156	; 0x9c
 8009b54:	4618      	mov	r0, r3
 8009b56:	2800      	cmp	r0, #0
 8009b58:	da32      	bge.n	8009bc0 <__kernel_rem_pio2f+0x484>
 8009b5a:	f1b8 0f00 	cmp.w	r8, #0
 8009b5e:	d035      	beq.n	8009bcc <__kernel_rem_pio2f+0x490>
 8009b60:	eef1 7a47 	vneg.f32	s15, s14
 8009b64:	edc6 7a00 	vstr	s15, [r6]
 8009b68:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8009b6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b70:	a82f      	add	r0, sp, #188	; 0xbc
 8009b72:	2101      	movs	r1, #1
 8009b74:	428b      	cmp	r3, r1
 8009b76:	da2c      	bge.n	8009bd2 <__kernel_rem_pio2f+0x496>
 8009b78:	f1b8 0f00 	cmp.w	r8, #0
 8009b7c:	d001      	beq.n	8009b82 <__kernel_rem_pio2f+0x446>
 8009b7e:	eef1 7a67 	vneg.f32	s15, s15
 8009b82:	edc6 7a01 	vstr	s15, [r6, #4]
 8009b86:	e00d      	b.n	8009ba4 <__kernel_rem_pio2f+0x468>
 8009b88:	aa56      	add	r2, sp, #344	; 0x158
 8009b8a:	4411      	add	r1, r2
 8009b8c:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8009a54 <__kernel_rem_pio2f+0x318>
 8009b90:	399c      	subs	r1, #156	; 0x9c
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	da0e      	bge.n	8009bb4 <__kernel_rem_pio2f+0x478>
 8009b96:	f1b8 0f00 	cmp.w	r8, #0
 8009b9a:	d001      	beq.n	8009ba0 <__kernel_rem_pio2f+0x464>
 8009b9c:	eef1 7a67 	vneg.f32	s15, s15
 8009ba0:	edc6 7a00 	vstr	s15, [r6]
 8009ba4:	9b01      	ldr	r3, [sp, #4]
 8009ba6:	f003 0007 	and.w	r0, r3, #7
 8009baa:	b057      	add	sp, #348	; 0x15c
 8009bac:	ecbd 8b04 	vpop	{d8-d9}
 8009bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb4:	ed31 7a01 	vldmdb	r1!, {s14}
 8009bb8:	3b01      	subs	r3, #1
 8009bba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009bbe:	e7e8      	b.n	8009b92 <__kernel_rem_pio2f+0x456>
 8009bc0:	ed71 7a01 	vldmdb	r1!, {s15}
 8009bc4:	3801      	subs	r0, #1
 8009bc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009bca:	e7c4      	b.n	8009b56 <__kernel_rem_pio2f+0x41a>
 8009bcc:	eef0 7a47 	vmov.f32	s15, s14
 8009bd0:	e7c8      	b.n	8009b64 <__kernel_rem_pio2f+0x428>
 8009bd2:	ecb0 7a01 	vldmia	r0!, {s14}
 8009bd6:	3101      	adds	r1, #1
 8009bd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009bdc:	e7ca      	b.n	8009b74 <__kernel_rem_pio2f+0x438>
 8009bde:	ed50 7a02 	vldr	s15, [r0, #-8]
 8009be2:	ed70 6a01 	vldmdb	r0!, {s13}
 8009be6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009bea:	3c01      	subs	r4, #1
 8009bec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009bf0:	ed00 7a01 	vstr	s14, [r0, #-4]
 8009bf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bf8:	edc0 7a00 	vstr	s15, [r0]
 8009bfc:	e78d      	b.n	8009b1a <__kernel_rem_pio2f+0x3de>
 8009bfe:	ed50 7a02 	vldr	s15, [r0, #-8]
 8009c02:	ed70 6a01 	vldmdb	r0!, {s13}
 8009c06:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009c0a:	3c01      	subs	r4, #1
 8009c0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c10:	ed00 7a01 	vstr	s14, [r0, #-4]
 8009c14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c18:	edc0 7a00 	vstr	s15, [r0]
 8009c1c:	e781      	b.n	8009b22 <__kernel_rem_pio2f+0x3e6>
 8009c1e:	ed31 7a01 	vldmdb	r1!, {s14}
 8009c22:	3b01      	subs	r3, #1
 8009c24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c28:	e77f      	b.n	8009b2a <__kernel_rem_pio2f+0x3ee>
 8009c2a:	eef1 6a66 	vneg.f32	s13, s13
 8009c2e:	eeb1 7a47 	vneg.f32	s14, s14
 8009c32:	edc6 6a00 	vstr	s13, [r6]
 8009c36:	ed86 7a01 	vstr	s14, [r6, #4]
 8009c3a:	eef1 7a67 	vneg.f32	s15, s15
 8009c3e:	e781      	b.n	8009b44 <__kernel_rem_pio2f+0x408>

08009c40 <__kernel_tanf>:
 8009c40:	b508      	push	{r3, lr}
 8009c42:	ee10 3a10 	vmov	r3, s0
 8009c46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009c4a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8009c4e:	eef0 7a40 	vmov.f32	s15, s0
 8009c52:	da17      	bge.n	8009c84 <__kernel_tanf+0x44>
 8009c54:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8009c58:	ee17 1a10 	vmov	r1, s14
 8009c5c:	bb41      	cbnz	r1, 8009cb0 <__kernel_tanf+0x70>
 8009c5e:	1c43      	adds	r3, r0, #1
 8009c60:	4313      	orrs	r3, r2
 8009c62:	d108      	bne.n	8009c76 <__kernel_tanf+0x36>
 8009c64:	f7ff fc0e 	bl	8009484 <fabsf>
 8009c68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c6c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009c70:	eeb0 0a67 	vmov.f32	s0, s15
 8009c74:	bd08      	pop	{r3, pc}
 8009c76:	2801      	cmp	r0, #1
 8009c78:	d0fa      	beq.n	8009c70 <__kernel_tanf+0x30>
 8009c7a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009c7e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009c82:	e7f5      	b.n	8009c70 <__kernel_tanf+0x30>
 8009c84:	494e      	ldr	r1, [pc, #312]	; (8009dc0 <__kernel_tanf+0x180>)
 8009c86:	428a      	cmp	r2, r1
 8009c88:	dd12      	ble.n	8009cb0 <__kernel_tanf+0x70>
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8009dc4 <__kernel_tanf+0x184>
 8009c90:	bfb8      	it	lt
 8009c92:	eef1 7a40 	vneglt.f32	s15, s0
 8009c96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c9a:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8009dc8 <__kernel_tanf+0x188>
 8009c9e:	bfb8      	it	lt
 8009ca0:	eef1 0a60 	vneglt.f32	s1, s1
 8009ca4:	ee77 0a60 	vsub.f32	s1, s14, s1
 8009ca8:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8009cac:	eddf 0a47 	vldr	s1, [pc, #284]	; 8009dcc <__kernel_tanf+0x18c>
 8009cb0:	ed9f 6a47 	vldr	s12, [pc, #284]	; 8009dd0 <__kernel_tanf+0x190>
 8009cb4:	eddf 5a47 	vldr	s11, [pc, #284]	; 8009dd4 <__kernel_tanf+0x194>
 8009cb8:	ed9f 5a47 	vldr	s10, [pc, #284]	; 8009dd8 <__kernel_tanf+0x198>
 8009cbc:	4940      	ldr	r1, [pc, #256]	; (8009dc0 <__kernel_tanf+0x180>)
 8009cbe:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8009cc2:	428a      	cmp	r2, r1
 8009cc4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8009cc8:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8009ccc:	eee7 5a06 	vfma.f32	s11, s14, s12
 8009cd0:	ed9f 6a42 	vldr	s12, [pc, #264]	; 8009ddc <__kernel_tanf+0x19c>
 8009cd4:	eea5 6a87 	vfma.f32	s12, s11, s14
 8009cd8:	eddf 5a41 	vldr	s11, [pc, #260]	; 8009de0 <__kernel_tanf+0x1a0>
 8009cdc:	eee6 5a07 	vfma.f32	s11, s12, s14
 8009ce0:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8009de4 <__kernel_tanf+0x1a4>
 8009ce4:	eea5 6a87 	vfma.f32	s12, s11, s14
 8009ce8:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009de8 <__kernel_tanf+0x1a8>
 8009cec:	eee6 5a07 	vfma.f32	s11, s12, s14
 8009cf0:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8009dec <__kernel_tanf+0x1ac>
 8009cf4:	eea7 6a05 	vfma.f32	s12, s14, s10
 8009cf8:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8009df0 <__kernel_tanf+0x1b0>
 8009cfc:	eea6 5a07 	vfma.f32	s10, s12, s14
 8009d00:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 8009df4 <__kernel_tanf+0x1b4>
 8009d04:	eea5 6a07 	vfma.f32	s12, s10, s14
 8009d08:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 8009df8 <__kernel_tanf+0x1b8>
 8009d0c:	eea6 5a07 	vfma.f32	s10, s12, s14
 8009d10:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 8009dfc <__kernel_tanf+0x1bc>
 8009d14:	eea5 6a07 	vfma.f32	s12, s10, s14
 8009d18:	eeb0 7a46 	vmov.f32	s14, s12
 8009d1c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009d20:	eeb0 6a60 	vmov.f32	s12, s1
 8009d24:	eea7 6a24 	vfma.f32	s12, s14, s9
 8009d28:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8009e00 <__kernel_tanf+0x1c0>
 8009d2c:	eee6 0a26 	vfma.f32	s1, s12, s13
 8009d30:	eee4 0a87 	vfma.f32	s1, s9, s14
 8009d34:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8009d38:	dd1d      	ble.n	8009d76 <__kernel_tanf+0x136>
 8009d3a:	ee07 0a10 	vmov	s14, r0
 8009d3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009d42:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8009d46:	ee76 6a87 	vadd.f32	s13, s13, s14
 8009d4a:	179b      	asrs	r3, r3, #30
 8009d4c:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8009d50:	f003 0302 	and.w	r3, r3, #2
 8009d54:	f1c3 0301 	rsb	r3, r3, #1
 8009d58:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009d5c:	ee76 0a60 	vsub.f32	s1, s12, s1
 8009d60:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009d64:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8009d68:	ee07 3a90 	vmov	s15, r3
 8009d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d74:	e77c      	b.n	8009c70 <__kernel_tanf+0x30>
 8009d76:	2801      	cmp	r0, #1
 8009d78:	d01f      	beq.n	8009dba <__kernel_tanf+0x17a>
 8009d7a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009d7e:	eec7 5a26 	vdiv.f32	s11, s14, s13
 8009d82:	4b20      	ldr	r3, [pc, #128]	; (8009e04 <__kernel_tanf+0x1c4>)
 8009d84:	ee16 2a90 	vmov	r2, s13
 8009d88:	401a      	ands	r2, r3
 8009d8a:	ee06 2a10 	vmov	s12, r2
 8009d8e:	ee15 2a90 	vmov	r2, s11
 8009d92:	4013      	ands	r3, r2
 8009d94:	ee07 3a10 	vmov	s14, r3
 8009d98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d9c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8009da0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009da4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009da8:	eef0 7a66 	vmov.f32	s15, s13
 8009dac:	eee7 7a20 	vfma.f32	s15, s14, s1
 8009db0:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8009db4:	eef0 7a47 	vmov.f32	s15, s14
 8009db8:	e75a      	b.n	8009c70 <__kernel_tanf+0x30>
 8009dba:	eef0 7a66 	vmov.f32	s15, s13
 8009dbe:	e757      	b.n	8009c70 <__kernel_tanf+0x30>
 8009dc0:	3f2ca13f 	.word	0x3f2ca13f
 8009dc4:	3f490fda 	.word	0x3f490fda
 8009dc8:	33222168 	.word	0x33222168
 8009dcc:	00000000 	.word	0x00000000
 8009dd0:	37d95384 	.word	0x37d95384
 8009dd4:	3895c07a 	.word	0x3895c07a
 8009dd8:	b79bae5f 	.word	0xb79bae5f
 8009ddc:	398137b9 	.word	0x398137b9
 8009de0:	3abede48 	.word	0x3abede48
 8009de4:	3c11371f 	.word	0x3c11371f
 8009de8:	3d5d0dd1 	.word	0x3d5d0dd1
 8009dec:	38a3f445 	.word	0x38a3f445
 8009df0:	3a1a26c8 	.word	0x3a1a26c8
 8009df4:	3b6b6916 	.word	0x3b6b6916
 8009df8:	3cb327a4 	.word	0x3cb327a4
 8009dfc:	3e088889 	.word	0x3e088889
 8009e00:	3eaaaaab 	.word	0x3eaaaaab
 8009e04:	fffff000 	.word	0xfffff000

08009e08 <floorf>:
 8009e08:	ee10 3a10 	vmov	r3, s0
 8009e0c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009e10:	0dca      	lsrs	r2, r1, #23
 8009e12:	3a7f      	subs	r2, #127	; 0x7f
 8009e14:	2a16      	cmp	r2, #22
 8009e16:	dc2a      	bgt.n	8009e6e <floorf+0x66>
 8009e18:	2a00      	cmp	r2, #0
 8009e1a:	da11      	bge.n	8009e40 <floorf+0x38>
 8009e1c:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009e80 <floorf+0x78>
 8009e20:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009e24:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e2c:	dd05      	ble.n	8009e3a <floorf+0x32>
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	da23      	bge.n	8009e7a <floorf+0x72>
 8009e32:	4a14      	ldr	r2, [pc, #80]	; (8009e84 <floorf+0x7c>)
 8009e34:	2900      	cmp	r1, #0
 8009e36:	bf18      	it	ne
 8009e38:	4613      	movne	r3, r2
 8009e3a:	ee00 3a10 	vmov	s0, r3
 8009e3e:	4770      	bx	lr
 8009e40:	4911      	ldr	r1, [pc, #68]	; (8009e88 <floorf+0x80>)
 8009e42:	4111      	asrs	r1, r2
 8009e44:	420b      	tst	r3, r1
 8009e46:	d0fa      	beq.n	8009e3e <floorf+0x36>
 8009e48:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009e80 <floorf+0x78>
 8009e4c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009e50:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e58:	ddef      	ble.n	8009e3a <floorf+0x32>
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	bfbe      	ittt	lt
 8009e5e:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8009e62:	fa40 f202 	asrlt.w	r2, r0, r2
 8009e66:	189b      	addlt	r3, r3, r2
 8009e68:	ea23 0301 	bic.w	r3, r3, r1
 8009e6c:	e7e5      	b.n	8009e3a <floorf+0x32>
 8009e6e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009e72:	d3e4      	bcc.n	8009e3e <floorf+0x36>
 8009e74:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009e78:	4770      	bx	lr
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	e7dd      	b.n	8009e3a <floorf+0x32>
 8009e7e:	bf00      	nop
 8009e80:	7149f2ca 	.word	0x7149f2ca
 8009e84:	bf800000 	.word	0xbf800000
 8009e88:	007fffff 	.word	0x007fffff

08009e8c <scalbnf>:
 8009e8c:	b508      	push	{r3, lr}
 8009e8e:	ee10 2a10 	vmov	r2, s0
 8009e92:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8009e96:	ed2d 8b02 	vpush	{d8}
 8009e9a:	eef0 0a40 	vmov.f32	s1, s0
 8009e9e:	d004      	beq.n	8009eaa <scalbnf+0x1e>
 8009ea0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009ea4:	d306      	bcc.n	8009eb4 <scalbnf+0x28>
 8009ea6:	ee70 0a00 	vadd.f32	s1, s0, s0
 8009eaa:	ecbd 8b02 	vpop	{d8}
 8009eae:	eeb0 0a60 	vmov.f32	s0, s1
 8009eb2:	bd08      	pop	{r3, pc}
 8009eb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009eb8:	d21c      	bcs.n	8009ef4 <scalbnf+0x68>
 8009eba:	4b1f      	ldr	r3, [pc, #124]	; (8009f38 <scalbnf+0xac>)
 8009ebc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009f3c <scalbnf+0xb0>
 8009ec0:	4298      	cmp	r0, r3
 8009ec2:	ee60 0a27 	vmul.f32	s1, s0, s15
 8009ec6:	db10      	blt.n	8009eea <scalbnf+0x5e>
 8009ec8:	ee10 2a90 	vmov	r2, s1
 8009ecc:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8009ed0:	3b19      	subs	r3, #25
 8009ed2:	4403      	add	r3, r0
 8009ed4:	2bfe      	cmp	r3, #254	; 0xfe
 8009ed6:	dd0f      	ble.n	8009ef8 <scalbnf+0x6c>
 8009ed8:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8009f40 <scalbnf+0xb4>
 8009edc:	eeb0 0a48 	vmov.f32	s0, s16
 8009ee0:	f000 f834 	bl	8009f4c <copysignf>
 8009ee4:	ee60 0a08 	vmul.f32	s1, s0, s16
 8009ee8:	e7df      	b.n	8009eaa <scalbnf+0x1e>
 8009eea:	eddf 7a16 	vldr	s15, [pc, #88]	; 8009f44 <scalbnf+0xb8>
 8009eee:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009ef2:	e7da      	b.n	8009eaa <scalbnf+0x1e>
 8009ef4:	0ddb      	lsrs	r3, r3, #23
 8009ef6:	e7ec      	b.n	8009ed2 <scalbnf+0x46>
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	dd06      	ble.n	8009f0a <scalbnf+0x7e>
 8009efc:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8009f00:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8009f04:	ee00 3a90 	vmov	s1, r3
 8009f08:	e7cf      	b.n	8009eaa <scalbnf+0x1e>
 8009f0a:	f113 0f16 	cmn.w	r3, #22
 8009f0e:	da06      	bge.n	8009f1e <scalbnf+0x92>
 8009f10:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009f14:	4298      	cmp	r0, r3
 8009f16:	dcdf      	bgt.n	8009ed8 <scalbnf+0x4c>
 8009f18:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8009f44 <scalbnf+0xb8>
 8009f1c:	e7de      	b.n	8009edc <scalbnf+0x50>
 8009f1e:	3319      	adds	r3, #25
 8009f20:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8009f24:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8009f28:	eddf 7a07 	vldr	s15, [pc, #28]	; 8009f48 <scalbnf+0xbc>
 8009f2c:	ee07 3a10 	vmov	s14, r3
 8009f30:	ee67 0a27 	vmul.f32	s1, s14, s15
 8009f34:	e7b9      	b.n	8009eaa <scalbnf+0x1e>
 8009f36:	bf00      	nop
 8009f38:	ffff3cb0 	.word	0xffff3cb0
 8009f3c:	4c000000 	.word	0x4c000000
 8009f40:	7149f2ca 	.word	0x7149f2ca
 8009f44:	0da24260 	.word	0x0da24260
 8009f48:	33000000 	.word	0x33000000

08009f4c <copysignf>:
 8009f4c:	ee10 3a10 	vmov	r3, s0
 8009f50:	ee10 2a90 	vmov	r2, s1
 8009f54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f58:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	ee00 3a10 	vmov	s0, r3
 8009f62:	4770      	bx	lr

08009f64 <_init>:
 8009f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f66:	bf00      	nop
 8009f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f6a:	bc08      	pop	{r3}
 8009f6c:	469e      	mov	lr, r3
 8009f6e:	4770      	bx	lr

08009f70 <_fini>:
 8009f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f72:	bf00      	nop
 8009f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f76:	bc08      	pop	{r3}
 8009f78:	469e      	mov	lr, r3
 8009f7a:	4770      	bx	lr
