
cube_for_new_genera_brain4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d93c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00119a8c  0800dbd8  0800dbd8  0001dbd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08127664  08127664  00137664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08127668  08127668  00137668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000012c  20000000  0812766c  00140000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00012eec  20000130  08127798  00140130  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  2001301c  08127798  0014301c  2**0
                  ALLOC
  8 .RAM_D2       00008030  30000000  30000000  00150000  2**5
                  ALLOC
  9 .SDRAM        02000000  60000000  60000000  00150000  2**5
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0014012c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00060b08  00000000  00000000  0014015a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00008a63  00000000  00000000  001a0c62  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00025342  00000000  00000000  001a96c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002a80  00000000  00000000  001cea08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003060  00000000  00000000  001d1488  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0004173d  00000000  00000000  001d44e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002b5bf  00000000  00000000  00215c25  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0017ac4d  00000000  00000000  002411e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  003bbe31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f68  00000000  00000000  003bbeac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000130 	.word	0x20000130
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800dbbc 	.word	0x0800dbbc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000134 	.word	0x20000134
 80002d4:	0800dbbc 	.word	0x0800dbbc

080002d8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80002d8:	4b10      	ldr	r3, [pc, #64]	; (800031c <HAL_InitTick+0x44>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	b90b      	cbnz	r3, 80002e2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80002de:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80002e0:	4770      	bx	lr
{
 80002e2:	b510      	push	{r4, lr}
 80002e4:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80002e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80002ee:	4a0c      	ldr	r2, [pc, #48]	; (8000320 <HAL_InitTick+0x48>)
 80002f0:	6810      	ldr	r0, [r2, #0]
 80002f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80002f6:	f001 f811 	bl	800131c <HAL_SYSTICK_Config>
 80002fa:	b968      	cbnz	r0, 8000318 <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002fc:	2c0f      	cmp	r4, #15
 80002fe:	d901      	bls.n	8000304 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000300:	2001      	movs	r0, #1
 8000302:	e00a      	b.n	800031a <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000304:	2200      	movs	r2, #0
 8000306:	4621      	mov	r1, r4
 8000308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800030c:	f000 ffc6 	bl	800129c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000310:	4b02      	ldr	r3, [pc, #8]	; (800031c <HAL_InitTick+0x44>)
 8000312:	605c      	str	r4, [r3, #4]
  return HAL_OK;
 8000314:	2000      	movs	r0, #0
 8000316:	e000      	b.n	800031a <HAL_InitTick+0x42>
    return HAL_ERROR;
 8000318:	2001      	movs	r0, #1
}
 800031a:	bd10      	pop	{r4, pc}
 800031c:	20000000 	.word	0x20000000
 8000320:	200000bc 	.word	0x200000bc

08000324 <HAL_Init>:
{
 8000324:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000326:	2003      	movs	r0, #3
 8000328:	f000 ffa6 	bl	8001278 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800032c:	f003 fa90 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 8000330:	490f      	ldr	r1, [pc, #60]	; (8000370 <HAL_Init+0x4c>)
 8000332:	698b      	ldr	r3, [r1, #24]
 8000334:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000338:	4a0e      	ldr	r2, [pc, #56]	; (8000374 <HAL_Init+0x50>)
 800033a:	5cd3      	ldrb	r3, [r2, r3]
 800033c:	f003 031f 	and.w	r3, r3, #31
 8000340:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000342:	698b      	ldr	r3, [r1, #24]
 8000344:	f003 030f 	and.w	r3, r3, #15
 8000348:	5cd3      	ldrb	r3, [r2, r3]
 800034a:	f003 031f 	and.w	r3, r3, #31
 800034e:	fa20 f303 	lsr.w	r3, r0, r3
 8000352:	4a09      	ldr	r2, [pc, #36]	; (8000378 <HAL_Init+0x54>)
 8000354:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8000356:	4b09      	ldr	r3, [pc, #36]	; (800037c <HAL_Init+0x58>)
 8000358:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800035a:	2000      	movs	r0, #0
 800035c:	f7ff ffbc 	bl	80002d8 <HAL_InitTick>
 8000360:	b110      	cbz	r0, 8000368 <HAL_Init+0x44>
    return HAL_ERROR;
 8000362:	2401      	movs	r4, #1
}
 8000364:	4620      	mov	r0, r4
 8000366:	bd10      	pop	{r4, pc}
 8000368:	4604      	mov	r4, r0
  HAL_MspInit();
 800036a:	f00b f945 	bl	800b5f8 <HAL_MspInit>
  return HAL_OK;
 800036e:	e7f9      	b.n	8000364 <HAL_Init+0x40>
 8000370:	58024400 	.word	0x58024400
 8000374:	0800e064 	.word	0x0800e064
 8000378:	200000c0 	.word	0x200000c0
 800037c:	200000bc 	.word	0x200000bc

08000380 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000380:	4b03      	ldr	r3, [pc, #12]	; (8000390 <HAL_IncTick+0x10>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	4a03      	ldr	r2, [pc, #12]	; (8000394 <HAL_IncTick+0x14>)
 8000386:	6811      	ldr	r1, [r2, #0]
 8000388:	440b      	add	r3, r1
 800038a:	6013      	str	r3, [r2, #0]
}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	20000000 	.word	0x20000000
 8000394:	200004e4 	.word	0x200004e4

08000398 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000398:	4b01      	ldr	r3, [pc, #4]	; (80003a0 <HAL_GetTick+0x8>)
 800039a:	6818      	ldr	r0, [r3, #0]
}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	200004e4 	.word	0x200004e4

080003a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003a4:	b538      	push	{r3, r4, r5, lr}
 80003a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80003a8:	f7ff fff6 	bl	8000398 <HAL_GetTick>
 80003ac:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003ae:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80003b2:	d002      	beq.n	80003ba <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80003b4:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <HAL_Delay+0x24>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80003ba:	f7ff ffed 	bl	8000398 <HAL_GetTick>
 80003be:	1b40      	subs	r0, r0, r5
 80003c0:	42a0      	cmp	r0, r4
 80003c2:	d3fa      	bcc.n	80003ba <HAL_Delay+0x16>
  {
  }
}
 80003c4:	bd38      	pop	{r3, r4, r5, pc}
 80003c6:	bf00      	nop
 80003c8:	20000000 	.word	0x20000000

080003cc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80003cc:	4b01      	ldr	r3, [pc, #4]	; (80003d4 <HAL_GetREVID+0x8>)
 80003ce:	6818      	ldr	r0, [r3, #0]
}
 80003d0:	0c00      	lsrs	r0, r0, #16
 80003d2:	4770      	bx	lr
 80003d4:	5c001000 	.word	0x5c001000

080003d8 <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 80003d8:	4a03      	ldr	r2, [pc, #12]	; (80003e8 <HAL_SetFMCMemorySwappingConfig+0x10>)
 80003da:	6813      	ldr	r3, [r2, #0]
 80003dc:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80003e0:	4318      	orrs	r0, r3
 80003e2:	6010      	str	r0, [r2, #0]
}
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	52004000 	.word	0x52004000

080003ec <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80003ec:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80003ee:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80003f0:	f009 fdb6 	bl	8009f60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80003f4:	bd08      	pop	{r3, pc}

080003f6 <HAL_ADC_ErrorCallback>:
}
 80003f6:	4770      	bx	lr

080003f8 <ADC_DMAConvCplt>:
{
 80003f8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80003fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80003fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80003fe:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000402:	d131      	bne.n	8000468 <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000404:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800040a:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	6811      	ldr	r1, [r2, #0]
 8000410:	f011 0f08 	tst.w	r1, #8
 8000414:	d014      	beq.n	8000440 <ADC_DMAConvCplt+0x48>
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000416:	68d1      	ldr	r1, [r2, #12]
 8000418:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 800041c:	d120      	bne.n	8000460 <ADC_DMAConvCplt+0x68>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800041e:	68d2      	ldr	r2, [r2, #12]
 8000420:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8000424:	d11c      	bne.n	8000460 <ADC_DMAConvCplt+0x68>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000426:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000428:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800042c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800042e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000430:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8000434:	d114      	bne.n	8000460 <ADC_DMAConvCplt+0x68>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000436:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000438:	f042 0201 	orr.w	r2, r2, #1
 800043c:	655a      	str	r2, [r3, #84]	; 0x54
 800043e:	e00f      	b.n	8000460 <ADC_DMAConvCplt+0x68>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8000440:	68d2      	ldr	r2, [r2, #12]
 8000442:	f012 0f03 	tst.w	r2, #3
 8000446:	d10b      	bne.n	8000460 <ADC_DMAConvCplt+0x68>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800044a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800044e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000450:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000452:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8000456:	d103      	bne.n	8000460 <ADC_DMAConvCplt+0x68>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000458:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800045a:	f042 0201 	orr.w	r2, r2, #1
 800045e:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8000460:	4618      	mov	r0, r3
 8000462:	f009 fd77 	bl	8009f54 <HAL_ADC_ConvCpltCallback>
}
 8000466:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8000468:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800046a:	f012 0f10 	tst.w	r2, #16
 800046e:	d103      	bne.n	8000478 <ADC_DMAConvCplt+0x80>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000474:	4798      	blx	r3
}
 8000476:	e7f6      	b.n	8000466 <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff ffbc 	bl	80003f6 <HAL_ADC_ErrorCallback>
 800047e:	e7f2      	b.n	8000466 <ADC_DMAConvCplt+0x6e>

08000480 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8000480:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000482:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000484:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800048a:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800048c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800048e:	f043 0304 	orr.w	r3, r3, #4
 8000492:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000494:	f7ff ffaf 	bl	80003f6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000498:	bd08      	pop	{r3, pc}
	...

0800049c <HAL_ADC_ConfigChannel>:
{
 800049c:	b4f0      	push	{r4, r5, r6, r7}
 800049e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 80004a0:	2200      	movs	r2, #0
 80004a2:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80004a4:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80004a8:	2a01      	cmp	r2, #1
 80004aa:	f000 823b 	beq.w	8000924 <HAL_ADC_ConfigChannel+0x488>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2201      	movs	r2, #1
 80004b2:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80004b6:	6804      	ldr	r4, [r0, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80004b8:	68a2      	ldr	r2, [r4, #8]
 80004ba:	f012 0204 	ands.w	r2, r2, #4
 80004be:	d00a      	beq.n	80004d6 <HAL_ADC_ConfigChannel+0x3a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80004c0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80004c2:	f042 0220 	orr.w	r2, r2, #32
 80004c6:	6542      	str	r2, [r0, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80004c8:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80004ca:	2200      	movs	r2, #0
 80004cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80004d0:	b002      	add	sp, #8
 80004d2:	bcf0      	pop	{r4, r5, r6, r7}
 80004d4:	4770      	bx	lr
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80004d6:	6808      	ldr	r0, [r1, #0]
 80004d8:	f3c0 0513 	ubfx	r5, r0, #0, #20
 80004dc:	2d00      	cmp	r5, #0
 80004de:	d150      	bne.n	8000582 <HAL_ADC_ConfigChannel+0xe6>
 80004e0:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80004e4:	2501      	movs	r5, #1
 80004e6:	4085      	lsls	r5, r0
 80004e8:	69e0      	ldr	r0, [r4, #28]
 80004ea:	4328      	orrs	r0, r5
 80004ec:	61e0      	str	r0, [r4, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80004ee:	681f      	ldr	r7, [r3, #0]
 80004f0:	684e      	ldr	r6, [r1, #4]
 80004f2:	680d      	ldr	r5, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80004f4:	3730      	adds	r7, #48	; 0x30
 80004f6:	0a30      	lsrs	r0, r6, #8
 80004f8:	0080      	lsls	r0, r0, #2
 80004fa:	f000 000c 	and.w	r0, r0, #12
  MODIFY_REG(*preg,
 80004fe:	583c      	ldr	r4, [r7, r0]
 8000500:	f006 061f 	and.w	r6, r6, #31
 8000504:	f04f 0c1f 	mov.w	ip, #31
 8000508:	fa0c fc06 	lsl.w	ip, ip, r6
 800050c:	ea24 040c 	bic.w	r4, r4, ip
 8000510:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8000514:	40b5      	lsls	r5, r6
 8000516:	432c      	orrs	r4, r5
 8000518:	503c      	str	r4, [r7, r0]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800051a:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800051c:	6884      	ldr	r4, [r0, #8]
 800051e:	f014 0f04 	tst.w	r4, #4
 8000522:	d037      	beq.n	8000594 <HAL_ADC_ConfigChannel+0xf8>
 8000524:	2401      	movs	r4, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000526:	6885      	ldr	r5, [r0, #8]
 8000528:	f015 0f08 	tst.w	r5, #8
 800052c:	d034      	beq.n	8000598 <HAL_ADC_ConfigChannel+0xfc>
 800052e:	2501      	movs	r5, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000530:	432c      	orrs	r4, r5
 8000532:	d165      	bne.n	8000600 <HAL_ADC_ConfigChannel+0x164>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000534:	680f      	ldr	r7, [r1, #0]
 8000536:	688c      	ldr	r4, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000538:	f100 0514 	add.w	r5, r0, #20
 800053c:	0e78      	lsrs	r0, r7, #25
 800053e:	0080      	lsls	r0, r0, #2
 8000540:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8000544:	582e      	ldr	r6, [r5, r0]
 8000546:	f3c7 5704 	ubfx	r7, r7, #20, #5
 800054a:	f04f 0c07 	mov.w	ip, #7
 800054e:	fa0c fc07 	lsl.w	ip, ip, r7
 8000552:	ea26 060c 	bic.w	r6, r6, ip
 8000556:	40bc      	lsls	r4, r7
 8000558:	4334      	orrs	r4, r6
 800055a:	502c      	str	r4, [r5, r0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800055c:	48a9      	ldr	r0, [pc, #676]	; (8000804 <HAL_ADC_ConfigChannel+0x368>)
 800055e:	6800      	ldr	r0, [r0, #0]
 8000560:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8000564:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8000568:	d018      	beq.n	800059c <HAL_ADC_ConfigChannel+0x100>
 800056a:	681c      	ldr	r4, [r3, #0]
 800056c:	68e0      	ldr	r0, [r4, #12]
 800056e:	f010 0f10 	tst.w	r0, #16
 8000572:	d167      	bne.n	8000644 <HAL_ADC_ConfigChannel+0x1a8>
 8000574:	6948      	ldr	r0, [r1, #20]
 8000576:	68e4      	ldr	r4, [r4, #12]
 8000578:	f3c4 0482 	ubfx	r4, r4, #2, #3
 800057c:	0064      	lsls	r4, r4, #1
 800057e:	40a0      	lsls	r0, r4
 8000580:	e013      	b.n	80005aa <HAL_ADC_ConfigChannel+0x10e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000582:	fa90 f0a0 	rbit	r0, r0
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8000586:	fab0 f080 	clz	r0, r0
 800058a:	f000 001f 	and.w	r0, r0, #31
 800058e:	2501      	movs	r5, #1
 8000590:	4085      	lsls	r5, r0
 8000592:	e7a9      	b.n	80004e8 <HAL_ADC_ConfigChannel+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000594:	2400      	movs	r4, #0
 8000596:	e7c6      	b.n	8000526 <HAL_ADC_ConfigChannel+0x8a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000598:	2500      	movs	r5, #0
 800059a:	e7c9      	b.n	8000530 <HAL_ADC_ConfigChannel+0x94>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800059c:	6948      	ldr	r0, [r1, #20]
 800059e:	681c      	ldr	r4, [r3, #0]
 80005a0:	68e4      	ldr	r4, [r4, #12]
 80005a2:	f3c4 0482 	ubfx	r4, r4, #2, #3
 80005a6:	0064      	lsls	r4, r4, #1
 80005a8:	40a0      	lsls	r0, r4
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80005aa:	690d      	ldr	r5, [r1, #16]
 80005ac:	2d04      	cmp	r5, #4
 80005ae:	d057      	beq.n	8000660 <HAL_ADC_ConfigChannel+0x1c4>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80005b0:	681f      	ldr	r7, [r3, #0]
 80005b2:	680e      	ldr	r6, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80005b4:	3760      	adds	r7, #96	; 0x60
  MODIFY_REG(*preg,
 80005b6:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
 80005ba:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 80005be:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80005c2:	4330      	orrs	r0, r6
 80005c4:	4320      	orrs	r0, r4
 80005c6:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80005ca:	6818      	ldr	r0, [r3, #0]
 80005cc:	690e      	ldr	r6, [r1, #16]
 80005ce:	7e4c      	ldrb	r4, [r1, #25]
 80005d0:	2c01      	cmp	r4, #1
 80005d2:	d03f      	beq.n	8000654 <HAL_ADC_ConfigChannel+0x1b8>
 80005d4:	4615      	mov	r5, r2
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80005d6:	3060      	adds	r0, #96	; 0x60
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80005d8:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 80005dc:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80005e0:	432c      	orrs	r4, r5
 80005e2:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80005e6:	681d      	ldr	r5, [r3, #0]
 80005e8:	690c      	ldr	r4, [r1, #16]
 80005ea:	7e08      	ldrb	r0, [r1, #24]
 80005ec:	2801      	cmp	r0, #1
 80005ee:	d034      	beq.n	800065a <HAL_ADC_ConfigChannel+0x1be>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80005f0:	6928      	ldr	r0, [r5, #16]
 80005f2:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 80005f6:	f004 041f 	and.w	r4, r4, #31
 80005fa:	40a2      	lsls	r2, r4
 80005fc:	4302      	orrs	r2, r0
 80005fe:	612a      	str	r2, [r5, #16]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000600:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000602:	6882      	ldr	r2, [r0, #8]
 8000604:	f012 0f01 	tst.w	r2, #1
 8000608:	f040 8188 	bne.w	800091c <HAL_ADC_ConfigChannel+0x480>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800060c:	680a      	ldr	r2, [r1, #0]
 800060e:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8000610:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
 8000614:	f3c2 0613 	ubfx	r6, r2, #0, #20
 8000618:	ea24 0406 	bic.w	r4, r4, r6
 800061c:	f005 0618 	and.w	r6, r5, #24
 8000620:	4d79      	ldr	r5, [pc, #484]	; (8000808 <HAL_ADC_ConfigChannel+0x36c>)
 8000622:	40f5      	lsrs	r5, r6
 8000624:	402a      	ands	r2, r5
 8000626:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800062a:	4322      	orrs	r2, r4
 800062c:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000630:	68c8      	ldr	r0, [r1, #12]
 8000632:	4a76      	ldr	r2, [pc, #472]	; (800080c <HAL_ADC_ConfigChannel+0x370>)
 8000634:	4290      	cmp	r0, r2
 8000636:	d047      	beq.n	80006c8 <HAL_ADC_ConfigChannel+0x22c>
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000638:	680a      	ldr	r2, [r1, #0]
 800063a:	2a00      	cmp	r2, #0
 800063c:	f2c0 80e8 	blt.w	8000810 <HAL_ADC_ConfigChannel+0x374>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000640:	2000      	movs	r0, #0
 8000642:	e742      	b.n	80004ca <HAL_ADC_ConfigChannel+0x2e>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000644:	6948      	ldr	r0, [r1, #20]
 8000646:	68e4      	ldr	r4, [r4, #12]
 8000648:	08a4      	lsrs	r4, r4, #2
 800064a:	f004 0404 	and.w	r4, r4, #4
 800064e:	0064      	lsls	r4, r4, #1
 8000650:	40a0      	lsls	r0, r4
 8000652:	e7aa      	b.n	80005aa <HAL_ADC_ConfigChannel+0x10e>
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8000654:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8000658:	e7bd      	b.n	80005d6 <HAL_ADC_ConfigChannel+0x13a>
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800065a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800065e:	e7c7      	b.n	80005f0 <HAL_ADC_ConfigChannel+0x154>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000660:	6818      	ldr	r0, [r3, #0]
 8000662:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000664:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000668:	680c      	ldr	r4, [r1, #0]
 800066a:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800066e:	d01c      	beq.n	80006aa <HAL_ADC_ConfigChannel+0x20e>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000670:	6818      	ldr	r0, [r3, #0]
 8000672:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8000674:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000678:	680c      	ldr	r4, [r1, #0]
 800067a:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800067e:	d019      	beq.n	80006b4 <HAL_ADC_ConfigChannel+0x218>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000680:	6818      	ldr	r0, [r3, #0]
 8000682:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8000684:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000688:	680c      	ldr	r4, [r1, #0]
 800068a:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800068e:	d016      	beq.n	80006be <HAL_ADC_ConfigChannel+0x222>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000690:	6818      	ldr	r0, [r3, #0]
 8000692:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8000694:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000698:	680c      	ldr	r4, [r1, #0]
 800069a:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800069e:	d1af      	bne.n	8000600 <HAL_ADC_ConfigChannel+0x164>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80006a0:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80006a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80006a6:	66c2      	str	r2, [r0, #108]	; 0x6c
 80006a8:	e7aa      	b.n	8000600 <HAL_ADC_ConfigChannel+0x164>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80006aa:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80006ac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80006b0:	6602      	str	r2, [r0, #96]	; 0x60
 80006b2:	e7dd      	b.n	8000670 <HAL_ADC_ConfigChannel+0x1d4>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80006b4:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80006b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80006ba:	6642      	str	r2, [r0, #100]	; 0x64
 80006bc:	e7e0      	b.n	8000680 <HAL_ADC_ConfigChannel+0x1e4>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80006be:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80006c0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80006c4:	6682      	str	r2, [r0, #104]	; 0x68
 80006c6:	e7e3      	b.n	8000690 <HAL_ADC_ConfigChannel+0x1f4>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80006c8:	681d      	ldr	r5, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80006ca:	680a      	ldr	r2, [r1, #0]
 80006cc:	f3c2 0613 	ubfx	r6, r2, #0, #20
 80006d0:	bb96      	cbnz	r6, 8000738 <HAL_ADC_ConfigChannel+0x29c>
 80006d2:	0e90      	lsrs	r0, r2, #26
 80006d4:	3001      	adds	r0, #1
 80006d6:	f000 001f 	and.w	r0, r0, #31
 80006da:	2809      	cmp	r0, #9
 80006dc:	bf8c      	ite	hi
 80006de:	2000      	movhi	r0, #0
 80006e0:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80006e2:	2800      	cmp	r0, #0
 80006e4:	d052      	beq.n	800078c <HAL_ADC_ConfigChannel+0x2f0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80006e6:	bb9e      	cbnz	r6, 8000750 <HAL_ADC_ConfigChannel+0x2b4>
 80006e8:	0e94      	lsrs	r4, r2, #26
 80006ea:	3401      	adds	r4, #1
 80006ec:	06a4      	lsls	r4, r4, #26
 80006ee:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80006f2:	bbb6      	cbnz	r6, 8000762 <HAL_ADC_ConfigChannel+0x2c6>
 80006f4:	0e90      	lsrs	r0, r2, #26
 80006f6:	3001      	adds	r0, #1
 80006f8:	f000 071f 	and.w	r7, r0, #31
 80006fc:	2001      	movs	r0, #1
 80006fe:	40b8      	lsls	r0, r7
 8000700:	4304      	orrs	r4, r0
 8000702:	bbc6      	cbnz	r6, 8000776 <HAL_ADC_ConfigChannel+0x2da>
 8000704:	0e92      	lsrs	r2, r2, #26
 8000706:	3201      	adds	r2, #1
 8000708:	f002 021f 	and.w	r2, r2, #31
 800070c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000710:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000712:	4322      	orrs	r2, r4
 8000714:	688c      	ldr	r4, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000716:	3514      	adds	r5, #20
 8000718:	0e50      	lsrs	r0, r2, #25
 800071a:	0080      	lsls	r0, r0, #2
 800071c:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8000720:	582e      	ldr	r6, [r5, r0]
 8000722:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8000726:	2707      	movs	r7, #7
 8000728:	4097      	lsls	r7, r2
 800072a:	ea26 0607 	bic.w	r6, r6, r7
 800072e:	fa04 f202 	lsl.w	r2, r4, r2
 8000732:	4332      	orrs	r2, r6
 8000734:	502a      	str	r2, [r5, r0]
 8000736:	e77f      	b.n	8000638 <HAL_ADC_ConfigChannel+0x19c>
 8000738:	fa92 f0a2 	rbit	r0, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800073c:	fab0 f080 	clz	r0, r0
 8000740:	3001      	adds	r0, #1
 8000742:	f000 001f 	and.w	r0, r0, #31
 8000746:	2809      	cmp	r0, #9
 8000748:	bf8c      	ite	hi
 800074a:	2000      	movhi	r0, #0
 800074c:	2001      	movls	r0, #1
 800074e:	e7c8      	b.n	80006e2 <HAL_ADC_ConfigChannel+0x246>
 8000750:	fa92 f4a2 	rbit	r4, r2
 8000754:	fab4 f484 	clz	r4, r4
 8000758:	3401      	adds	r4, #1
 800075a:	06a4      	lsls	r4, r4, #26
 800075c:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8000760:	e7c7      	b.n	80006f2 <HAL_ADC_ConfigChannel+0x256>
 8000762:	fa92 f0a2 	rbit	r0, r2
 8000766:	fab0 f080 	clz	r0, r0
 800076a:	3001      	adds	r0, #1
 800076c:	f000 071f 	and.w	r7, r0, #31
 8000770:	2001      	movs	r0, #1
 8000772:	40b8      	lsls	r0, r7
 8000774:	e7c4      	b.n	8000700 <HAL_ADC_ConfigChannel+0x264>
 8000776:	fa92 f2a2 	rbit	r2, r2
 800077a:	fab2 f282 	clz	r2, r2
 800077e:	3201      	adds	r2, #1
 8000780:	f002 021f 	and.w	r2, r2, #31
 8000784:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000788:	0512      	lsls	r2, r2, #20
 800078a:	e7c2      	b.n	8000712 <HAL_ADC_ConfigChannel+0x276>
 800078c:	b9ce      	cbnz	r6, 80007c2 <HAL_ADC_ConfigChannel+0x326>
 800078e:	0e94      	lsrs	r4, r2, #26
 8000790:	3401      	adds	r4, #1
 8000792:	06a4      	lsls	r4, r4, #26
 8000794:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8000798:	b9e6      	cbnz	r6, 80007d4 <HAL_ADC_ConfigChannel+0x338>
 800079a:	0e90      	lsrs	r0, r2, #26
 800079c:	3001      	adds	r0, #1
 800079e:	f000 071f 	and.w	r7, r0, #31
 80007a2:	2001      	movs	r0, #1
 80007a4:	40b8      	lsls	r0, r7
 80007a6:	4304      	orrs	r4, r0
 80007a8:	b9f6      	cbnz	r6, 80007e8 <HAL_ADC_ConfigChannel+0x34c>
 80007aa:	0e90      	lsrs	r0, r2, #26
 80007ac:	3001      	adds	r0, #1
 80007ae:	f000 001f 	and.w	r0, r0, #31
 80007b2:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80007b6:	3a1e      	subs	r2, #30
 80007b8:	0512      	lsls	r2, r2, #20
 80007ba:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80007be:	4322      	orrs	r2, r4
 80007c0:	e7a8      	b.n	8000714 <HAL_ADC_ConfigChannel+0x278>
 80007c2:	fa92 f4a2 	rbit	r4, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80007c6:	fab4 f484 	clz	r4, r4
 80007ca:	3401      	adds	r4, #1
 80007cc:	06a4      	lsls	r4, r4, #26
 80007ce:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80007d2:	e7e1      	b.n	8000798 <HAL_ADC_ConfigChannel+0x2fc>
 80007d4:	fa92 f0a2 	rbit	r0, r2
 80007d8:	fab0 f080 	clz	r0, r0
 80007dc:	3001      	adds	r0, #1
 80007de:	f000 071f 	and.w	r7, r0, #31
 80007e2:	2001      	movs	r0, #1
 80007e4:	40b8      	lsls	r0, r7
 80007e6:	e7de      	b.n	80007a6 <HAL_ADC_ConfigChannel+0x30a>
 80007e8:	fa92 f0a2 	rbit	r0, r2
 80007ec:	fab0 f080 	clz	r0, r0
 80007f0:	3001      	adds	r0, #1
 80007f2:	f000 001f 	and.w	r0, r0, #31
 80007f6:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80007fa:	3a1e      	subs	r2, #30
 80007fc:	0512      	lsls	r2, r2, #20
 80007fe:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000802:	e7dc      	b.n	80007be <HAL_ADC_ConfigChannel+0x322>
 8000804:	5c001000 	.word	0x5c001000
 8000808:	000fffff 	.word	0x000fffff
 800080c:	47ff0000 	.word	0x47ff0000
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000810:	6819      	ldr	r1, [r3, #0]
 8000812:	4845      	ldr	r0, [pc, #276]	; (8000928 <HAL_ADC_ConfigChannel+0x48c>)
 8000814:	4c45      	ldr	r4, [pc, #276]	; (800092c <HAL_ADC_ConfigChannel+0x490>)
 8000816:	42a1      	cmp	r1, r4
 8000818:	bf18      	it	ne
 800081a:	4281      	cmpne	r1, r0
 800081c:	bf0c      	ite	eq
 800081e:	2001      	moveq	r0, #1
 8000820:	2000      	movne	r0, #0
 8000822:	d121      	bne.n	8000868 <HAL_ADC_ConfigChannel+0x3cc>
 8000824:	4d42      	ldr	r5, [pc, #264]	; (8000930 <HAL_ADC_ConfigChannel+0x494>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000826:	68ac      	ldr	r4, [r5, #8]
 8000828:	f004 76e0 	and.w	r6, r4, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800082c:	b310      	cbz	r0, 8000874 <HAL_ADC_ConfigChannel+0x3d8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800082e:	483e      	ldr	r0, [pc, #248]	; (8000928 <HAL_ADC_ConfigChannel+0x48c>)
 8000830:	6880      	ldr	r0, [r0, #8]
 8000832:	f010 0f01 	tst.w	r0, #1
 8000836:	d019      	beq.n	800086c <HAL_ADC_ConfigChannel+0x3d0>
 8000838:	2001      	movs	r0, #1
 800083a:	4f3c      	ldr	r7, [pc, #240]	; (800092c <HAL_ADC_ConfigChannel+0x490>)
 800083c:	68bf      	ldr	r7, [r7, #8]
 800083e:	f017 0f01 	tst.w	r7, #1
 8000842:	d015      	beq.n	8000870 <HAL_ADC_ConfigChannel+0x3d4>
 8000844:	2701      	movs	r7, #1
 8000846:	4338      	orrs	r0, r7
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	2800      	cmp	r0, #0
 8000850:	d05e      	beq.n	8000910 <HAL_ADC_ConfigChannel+0x474>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000852:	4838      	ldr	r0, [pc, #224]	; (8000934 <HAL_ADC_ConfigChannel+0x498>)
 8000854:	4282      	cmp	r2, r0
 8000856:	d018      	beq.n	800088a <HAL_ADC_ConfigChannel+0x3ee>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000858:	4837      	ldr	r0, [pc, #220]	; (8000938 <HAL_ADC_ConfigChannel+0x49c>)
 800085a:	4282      	cmp	r2, r0
 800085c:	d036      	beq.n	80008cc <HAL_ADC_ConfigChannel+0x430>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800085e:	4837      	ldr	r0, [pc, #220]	; (800093c <HAL_ADC_ConfigChannel+0x4a0>)
 8000860:	4282      	cmp	r2, r0
 8000862:	d044      	beq.n	80008ee <HAL_ADC_ConfigChannel+0x452>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000864:	2000      	movs	r0, #0
 8000866:	e630      	b.n	80004ca <HAL_ADC_ConfigChannel+0x2e>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000868:	4d35      	ldr	r5, [pc, #212]	; (8000940 <HAL_ADC_ConfigChannel+0x4a4>)
 800086a:	e7dc      	b.n	8000826 <HAL_ADC_ConfigChannel+0x38a>
 800086c:	2000      	movs	r0, #0
 800086e:	e7e4      	b.n	800083a <HAL_ADC_ConfigChannel+0x39e>
 8000870:	2700      	movs	r7, #0
 8000872:	e7e8      	b.n	8000846 <HAL_ADC_ConfigChannel+0x3aa>
 8000874:	4833      	ldr	r0, [pc, #204]	; (8000944 <HAL_ADC_ConfigChannel+0x4a8>)
 8000876:	6880      	ldr	r0, [r0, #8]
 8000878:	f010 0f01 	tst.w	r0, #1
 800087c:	d003      	beq.n	8000886 <HAL_ADC_ConfigChannel+0x3ea>
 800087e:	2001      	movs	r0, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000880:	f080 0001 	eor.w	r0, r0, #1
 8000884:	e7e3      	b.n	800084e <HAL_ADC_ConfigChannel+0x3b2>
 8000886:	2000      	movs	r0, #0
 8000888:	e7fa      	b.n	8000880 <HAL_ADC_ConfigChannel+0x3e4>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800088a:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
 800088e:	d1e3      	bne.n	8000858 <HAL_ADC_ConfigChannel+0x3bc>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8000890:	4a2c      	ldr	r2, [pc, #176]	; (8000944 <HAL_ADC_ConfigChannel+0x4a8>)
 8000892:	4291      	cmp	r1, r2
 8000894:	d001      	beq.n	800089a <HAL_ADC_ConfigChannel+0x3fe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000896:	2000      	movs	r0, #0
 8000898:	e617      	b.n	80004ca <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800089a:	f446 0200 	orr.w	r2, r6, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800089e:	68a9      	ldr	r1, [r5, #8]
 80008a0:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80008a4:	430a      	orrs	r2, r1
 80008a6:	60aa      	str	r2, [r5, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80008a8:	4a27      	ldr	r2, [pc, #156]	; (8000948 <HAL_ADC_ConfigChannel+0x4ac>)
 80008aa:	6812      	ldr	r2, [r2, #0]
 80008ac:	0992      	lsrs	r2, r2, #6
 80008ae:	4927      	ldr	r1, [pc, #156]	; (800094c <HAL_ADC_ConfigChannel+0x4b0>)
 80008b0:	fba1 1202 	umull	r1, r2, r1, r2
 80008b4:	0992      	lsrs	r2, r2, #6
 80008b6:	0052      	lsls	r2, r2, #1
 80008b8:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 80008ba:	e002      	b.n	80008c2 <HAL_ADC_ConfigChannel+0x426>
                wait_loop_index--;
 80008bc:	9a01      	ldr	r2, [sp, #4]
 80008be:	3a01      	subs	r2, #1
 80008c0:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 80008c2:	9a01      	ldr	r2, [sp, #4]
 80008c4:	2a00      	cmp	r2, #0
 80008c6:	d1f9      	bne.n	80008bc <HAL_ADC_ConfigChannel+0x420>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008c8:	2000      	movs	r0, #0
 80008ca:	e5fe      	b.n	80004ca <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80008cc:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
 80008d0:	d1c5      	bne.n	800085e <HAL_ADC_ConfigChannel+0x3c2>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80008d2:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <HAL_ADC_ConfigChannel+0x4a8>)
 80008d4:	4291      	cmp	r1, r2
 80008d6:	d001      	beq.n	80008dc <HAL_ADC_ConfigChannel+0x440>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008d8:	2000      	movs	r0, #0
 80008da:	e5f6      	b.n	80004ca <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80008dc:	f046 7280 	orr.w	r2, r6, #16777216	; 0x1000000
 80008e0:	68a9      	ldr	r1, [r5, #8]
 80008e2:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80008e6:	430a      	orrs	r2, r1
 80008e8:	60aa      	str	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008ea:	2000      	movs	r0, #0
 80008ec:	e5ed      	b.n	80004ca <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80008ee:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
 80008f2:	d115      	bne.n	8000920 <HAL_ADC_ConfigChannel+0x484>
            if (ADC_VREFINT_INSTANCE(hadc))
 80008f4:	4a13      	ldr	r2, [pc, #76]	; (8000944 <HAL_ADC_ConfigChannel+0x4a8>)
 80008f6:	4291      	cmp	r1, r2
 80008f8:	d001      	beq.n	80008fe <HAL_ADC_ConfigChannel+0x462>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008fa:	2000      	movs	r0, #0
 80008fc:	e5e5      	b.n	80004ca <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80008fe:	f446 0280 	orr.w	r2, r6, #4194304	; 0x400000
 8000902:	68a9      	ldr	r1, [r5, #8]
 8000904:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000908:	430a      	orrs	r2, r1
 800090a:	60aa      	str	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800090c:	2000      	movs	r0, #0
 800090e:	e5dc      	b.n	80004ca <HAL_ADC_ConfigChannel+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000910:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000912:	f042 0220 	orr.w	r2, r2, #32
 8000916:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8000918:	2001      	movs	r0, #1
 800091a:	e5d6      	b.n	80004ca <HAL_ADC_ConfigChannel+0x2e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800091c:	2000      	movs	r0, #0
 800091e:	e5d4      	b.n	80004ca <HAL_ADC_ConfigChannel+0x2e>
 8000920:	2000      	movs	r0, #0
 8000922:	e5d2      	b.n	80004ca <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8000924:	2002      	movs	r0, #2
 8000926:	e5d3      	b.n	80004d0 <HAL_ADC_ConfigChannel+0x34>
 8000928:	40022000 	.word	0x40022000
 800092c:	40022100 	.word	0x40022100
 8000930:	40022300 	.word	0x40022300
 8000934:	cb840000 	.word	0xcb840000
 8000938:	c7520000 	.word	0xc7520000
 800093c:	cfb80000 	.word	0xcfb80000
 8000940:	58026300 	.word	0x58026300
 8000944:	58026000 	.word	0x58026000
 8000948:	200000bc 	.word	0x200000bc
 800094c:	053e2d63 	.word	0x053e2d63

08000950 <ADC_ConversionStop>:
{
 8000950:	b570      	push	{r4, r5, r6, lr}
 8000952:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000954:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000956:	689a      	ldr	r2, [r3, #8]
 8000958:	f012 0f04 	tst.w	r2, #4
 800095c:	d04d      	beq.n	80009fa <ADC_ConversionStop+0xaa>
 800095e:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000960:	6898      	ldr	r0, [r3, #8]
 8000962:	f010 0f08 	tst.w	r0, #8
 8000966:	d04a      	beq.n	80009fe <ADC_ConversionStop+0xae>
 8000968:	2001      	movs	r0, #1
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800096a:	4302      	orrs	r2, r0
 800096c:	d067      	beq.n	8000a3e <ADC_ConversionStop+0xee>
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800096e:	68da      	ldr	r2, [r3, #12]
 8000970:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000974:	d004      	beq.n	8000980 <ADC_ConversionStop+0x30>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8000976:	8aa0      	ldrh	r0, [r4, #20]
 8000978:	f240 1201 	movw	r2, #257	; 0x101
 800097c:	4290      	cmp	r0, r2
 800097e:	d04a      	beq.n	8000a16 <ADC_ConversionStop+0xc6>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8000980:	2902      	cmp	r1, #2
 8000982:	d00e      	beq.n	80009a2 <ADC_ConversionStop+0x52>
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8000984:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000986:	689a      	ldr	r2, [r3, #8]
 8000988:	f012 0f04 	tst.w	r2, #4
 800098c:	d009      	beq.n	80009a2 <ADC_ConversionStop+0x52>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800098e:	689a      	ldr	r2, [r3, #8]
 8000990:	f012 0f02 	tst.w	r2, #2
 8000994:	d105      	bne.n	80009a2 <ADC_ConversionStop+0x52>
  MODIFY_REG(ADCx->CR,
 8000996:	6898      	ldr	r0, [r3, #8]
 8000998:	4a2a      	ldr	r2, [pc, #168]	; (8000a44 <ADC_ConversionStop+0xf4>)
 800099a:	4002      	ands	r2, r0
 800099c:	f042 0210 	orr.w	r2, r2, #16
 80009a0:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80009a2:	2901      	cmp	r1, #1
 80009a4:	d00e      	beq.n	80009c4 <ADC_ConversionStop+0x74>
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80009a6:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80009a8:	689a      	ldr	r2, [r3, #8]
 80009aa:	f012 0f08 	tst.w	r2, #8
 80009ae:	d009      	beq.n	80009c4 <ADC_ConversionStop+0x74>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80009b0:	689a      	ldr	r2, [r3, #8]
 80009b2:	f012 0f02 	tst.w	r2, #2
 80009b6:	d105      	bne.n	80009c4 <ADC_ConversionStop+0x74>
  MODIFY_REG(ADCx->CR,
 80009b8:	6898      	ldr	r0, [r3, #8]
 80009ba:	4a22      	ldr	r2, [pc, #136]	; (8000a44 <ADC_ConversionStop+0xf4>)
 80009bc:	4002      	ands	r2, r0
 80009be:	f042 0220 	orr.w	r2, r2, #32
 80009c2:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 80009c4:	2902      	cmp	r1, #2
 80009c6:	d036      	beq.n	8000a36 <ADC_ConversionStop+0xe6>
 80009c8:	2903      	cmp	r1, #3
 80009ca:	d132      	bne.n	8000a32 <ADC_ConversionStop+0xe2>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80009cc:	250c      	movs	r5, #12
    tickstart = HAL_GetTick();
 80009ce:	f7ff fce3 	bl	8000398 <HAL_GetTick>
 80009d2:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80009d4:	6823      	ldr	r3, [r4, #0]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	422b      	tst	r3, r5
 80009da:	d02e      	beq.n	8000a3a <ADC_ConversionStop+0xea>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80009dc:	f7ff fcdc 	bl	8000398 <HAL_GetTick>
 80009e0:	1b80      	subs	r0, r0, r6
 80009e2:	2805      	cmp	r0, #5
 80009e4:	d9f6      	bls.n	80009d4 <ADC_ConversionStop+0x84>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80009e8:	f043 0310 	orr.w	r3, r3, #16
 80009ec:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 80009f6:	2001      	movs	r0, #1
 80009f8:	e022      	b.n	8000a40 <ADC_ConversionStop+0xf0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80009fa:	2200      	movs	r2, #0
 80009fc:	e7b0      	b.n	8000960 <ADC_ConversionStop+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80009fe:	2000      	movs	r0, #0
 8000a00:	e7b3      	b.n	800096a <ADC_ConversionStop+0x1a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a02:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a04:	f043 0310 	orr.w	r3, r3, #16
 8000a08:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8000a12:	2001      	movs	r0, #1
 8000a14:	e014      	b.n	8000a40 <ADC_ConversionStop+0xf0>
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8000a16:	2200      	movs	r2, #0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8000a18:	6819      	ldr	r1, [r3, #0]
 8000a1a:	f011 0f40 	tst.w	r1, #64	; 0x40
 8000a1e:	d104      	bne.n	8000a2a <ADC_ConversionStop+0xda>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8000a20:	4909      	ldr	r1, [pc, #36]	; (8000a48 <ADC_ConversionStop+0xf8>)
 8000a22:	428a      	cmp	r2, r1
 8000a24:	d8ed      	bhi.n	8000a02 <ADC_ConversionStop+0xb2>
        Conversion_Timeout_CPU_cycles ++;
 8000a26:	3201      	adds	r2, #1
 8000a28:	e7f6      	b.n	8000a18 <ADC_ConversionStop+0xc8>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8000a2a:	2240      	movs	r2, #64	; 0x40
 8000a2c:	601a      	str	r2, [r3, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8000a2e:	2101      	movs	r1, #1
 8000a30:	e7a8      	b.n	8000984 <ADC_ConversionStop+0x34>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8000a32:	2504      	movs	r5, #4
        break;
 8000a34:	e7cb      	b.n	80009ce <ADC_ConversionStop+0x7e>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8000a36:	2508      	movs	r5, #8
 8000a38:	e7c9      	b.n	80009ce <ADC_ConversionStop+0x7e>
  return HAL_OK;
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	e000      	b.n	8000a40 <ADC_ConversionStop+0xf0>
 8000a3e:	2000      	movs	r0, #0
}
 8000a40:	bd70      	pop	{r4, r5, r6, pc}
 8000a42:	bf00      	nop
 8000a44:	7fffffc0 	.word	0x7fffffc0
 8000a48:	000cdbff 	.word	0x000cdbff

08000a4c <ADC_Enable>:
{
 8000a4c:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000a4e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000a50:	689a      	ldr	r2, [r3, #8]
 8000a52:	f012 0f01 	tst.w	r2, #1
 8000a56:	d152      	bne.n	8000afe <ADC_Enable+0xb2>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8000a58:	6899      	ldr	r1, [r3, #8]
 8000a5a:	4a2a      	ldr	r2, [pc, #168]	; (8000b04 <ADC_Enable+0xb8>)
 8000a5c:	4211      	tst	r1, r2
 8000a5e:	d009      	beq.n	8000a74 <ADC_Enable+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a60:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000a62:	f043 0310 	orr.w	r3, r3, #16
 8000a66:	6543      	str	r3, [r0, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a68:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8000a70:	2001      	movs	r0, #1
 8000a72:	e045      	b.n	8000b00 <ADC_Enable+0xb4>
 8000a74:	4604      	mov	r4, r0
  MODIFY_REG(ADCx->CR,
 8000a76:	6899      	ldr	r1, [r3, #8]
 8000a78:	4a23      	ldr	r2, [pc, #140]	; (8000b08 <ADC_Enable+0xbc>)
 8000a7a:	400a      	ands	r2, r1
 8000a7c:	f042 0201 	orr.w	r2, r2, #1
 8000a80:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000a82:	f7ff fc89 	bl	8000398 <HAL_GetTick>
 8000a86:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000a88:	6823      	ldr	r3, [r4, #0]
 8000a8a:	4920      	ldr	r1, [pc, #128]	; (8000b0c <ADC_Enable+0xc0>)
 8000a8c:	4a20      	ldr	r2, [pc, #128]	; (8000b10 <ADC_Enable+0xc4>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	bf18      	it	ne
 8000a92:	428b      	cmpne	r3, r1
 8000a94:	d10d      	bne.n	8000ab2 <ADC_Enable+0x66>
 8000a96:	f502 7200 	add.w	r2, r2, #512	; 0x200
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000a9a:	6892      	ldr	r2, [r2, #8]
 8000a9c:	f002 021f 	and.w	r2, r2, #31
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000aa0:	491b      	ldr	r1, [pc, #108]	; (8000b10 <ADC_Enable+0xc4>)
 8000aa2:	428b      	cmp	r3, r1
 8000aa4:	d007      	beq.n	8000ab6 <ADC_Enable+0x6a>
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4299      	cmp	r1, r3
 8000aaa:	d00c      	beq.n	8000ac6 <ADC_Enable+0x7a>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000aac:	b15a      	cbz	r2, 8000ac6 <ADC_Enable+0x7a>
  return HAL_OK;
 8000aae:	2000      	movs	r0, #0
 8000ab0:	e026      	b.n	8000b00 <ADC_Enable+0xb4>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000ab2:	4a18      	ldr	r2, [pc, #96]	; (8000b14 <ADC_Enable+0xc8>)
 8000ab4:	e7f1      	b.n	8000a9a <ADC_Enable+0x4e>
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000ab6:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 8000aba:	e7f5      	b.n	8000aa8 <ADC_Enable+0x5c>
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000abc:	f7ff fc6c 	bl	8000398 <HAL_GetTick>
 8000ac0:	1b40      	subs	r0, r0, r5
 8000ac2:	2802      	cmp	r0, #2
 8000ac4:	d80f      	bhi.n	8000ae6 <ADC_Enable+0x9a>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8000ac6:	6823      	ldr	r3, [r4, #0]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	f012 0f01 	tst.w	r2, #1
 8000ace:	d114      	bne.n	8000afa <ADC_Enable+0xae>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ad0:	689a      	ldr	r2, [r3, #8]
 8000ad2:	f012 0f01 	tst.w	r2, #1
 8000ad6:	d1f1      	bne.n	8000abc <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 8000ad8:	6899      	ldr	r1, [r3, #8]
 8000ada:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <ADC_Enable+0xbc>)
 8000adc:	400a      	ands	r2, r1
 8000ade:	f042 0201 	orr.w	r2, r2, #1
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	e7ea      	b.n	8000abc <ADC_Enable+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ae6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ae8:	f043 0310 	orr.w	r3, r3, #16
 8000aec:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000aee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8000af6:	2001      	movs	r0, #1
 8000af8:	e002      	b.n	8000b00 <ADC_Enable+0xb4>
  return HAL_OK;
 8000afa:	2000      	movs	r0, #0
 8000afc:	e000      	b.n	8000b00 <ADC_Enable+0xb4>
 8000afe:	2000      	movs	r0, #0
}
 8000b00:	bd38      	pop	{r3, r4, r5, pc}
 8000b02:	bf00      	nop
 8000b04:	8000003f 	.word	0x8000003f
 8000b08:	7fffffc0 	.word	0x7fffffc0
 8000b0c:	40022000 	.word	0x40022000
 8000b10:	40022100 	.word	0x40022100
 8000b14:	58026300 	.word	0x58026300

08000b18 <HAL_ADC_Start_DMA>:
{
 8000b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000b1a:	6804      	ldr	r4, [r0, #0]
 8000b1c:	4e41      	ldr	r6, [pc, #260]	; (8000c24 <HAL_ADC_Start_DMA+0x10c>)
 8000b1e:	4d42      	ldr	r5, [pc, #264]	; (8000c28 <HAL_ADC_Start_DMA+0x110>)
 8000b20:	42ac      	cmp	r4, r5
 8000b22:	bf18      	it	ne
 8000b24:	42b4      	cmpne	r4, r6
 8000b26:	d11e      	bne.n	8000b66 <HAL_ADC_Start_DMA+0x4e>
 8000b28:	f505 7500 	add.w	r5, r5, #512	; 0x200
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000b2c:	68ad      	ldr	r5, [r5, #8]
 8000b2e:	f005 051f 	and.w	r5, r5, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b32:	68a4      	ldr	r4, [r4, #8]
 8000b34:	f014 0f04 	tst.w	r4, #4
 8000b38:	d16e      	bne.n	8000c18 <HAL_ADC_Start_DMA+0x100>
    __HAL_LOCK(hadc);
 8000b3a:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8000b3e:	2c01      	cmp	r4, #1
 8000b40:	d06d      	beq.n	8000c1e <HAL_ADC_Start_DMA+0x106>
 8000b42:	2301      	movs	r3, #1
 8000b44:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000b48:	2d05      	cmp	r5, #5
 8000b4a:	bf14      	ite	ne
 8000b4c:	2400      	movne	r4, #0
 8000b4e:	2401      	moveq	r4, #1
 8000b50:	2d00      	cmp	r5, #0
 8000b52:	bf08      	it	eq
 8000b54:	461c      	moveq	r4, r3
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000b56:	b944      	cbnz	r4, 8000b6a <HAL_ADC_Start_DMA+0x52>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000b58:	2d09      	cmp	r5, #9
 8000b5a:	d006      	beq.n	8000b6a <HAL_ADC_Start_DMA+0x52>
      __HAL_UNLOCK(hadc);
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
      tmp_hal_status = HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e059      	b.n	8000c1a <HAL_ADC_Start_DMA+0x102>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000b66:	4d31      	ldr	r5, [pc, #196]	; (8000c2c <HAL_ADC_Start_DMA+0x114>)
 8000b68:	e7e0      	b.n	8000b2c <HAL_ADC_Start_DMA+0x14>
 8000b6a:	4616      	mov	r6, r2
 8000b6c:	460f      	mov	r7, r1
 8000b6e:	4604      	mov	r4, r0
      tmp_hal_status = ADC_Enable(hadc);
 8000b70:	f7ff ff6c 	bl	8000a4c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8000b74:	4603      	mov	r3, r0
 8000b76:	2800      	cmp	r0, #0
 8000b78:	d14a      	bne.n	8000c10 <HAL_ADC_Start_DMA+0xf8>
        ADC_STATE_CLR_SET(hadc->State,
 8000b7a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000b7c:	4b2c      	ldr	r3, [pc, #176]	; (8000c30 <HAL_ADC_Start_DMA+0x118>)
 8000b7e:	4013      	ands	r3, r2
 8000b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b84:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000b86:	6823      	ldr	r3, [r4, #0]
 8000b88:	4a27      	ldr	r2, [pc, #156]	; (8000c28 <HAL_ADC_Start_DMA+0x110>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d03a      	beq.n	8000c04 <HAL_ADC_Start_DMA+0xec>
 8000b8e:	461a      	mov	r2, r3
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d000      	beq.n	8000b96 <HAL_ADC_Start_DMA+0x7e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000b94:	b91d      	cbnz	r5, 8000b9e <HAL_ADC_Start_DMA+0x86>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b96:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b98:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000b9c:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000b9e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ba0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000ba4:	d031      	beq.n	8000c0a <HAL_ADC_Start_DMA+0xf2>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000ba6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000ba8:	f023 0306 	bic.w	r3, r3, #6
 8000bac:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000bae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000bb0:	4a20      	ldr	r2, [pc, #128]	; (8000c34 <HAL_ADC_Start_DMA+0x11c>)
 8000bb2:	63da      	str	r2, [r3, #60]	; 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000bb4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000bb6:	4a20      	ldr	r2, [pc, #128]	; (8000c38 <HAL_ADC_Start_DMA+0x120>)
 8000bb8:	641a      	str	r2, [r3, #64]	; 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000bba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000bbc:	4a1f      	ldr	r2, [pc, #124]	; (8000c3c <HAL_ADC_Start_DMA+0x124>)
 8000bbe:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000bc0:	6823      	ldr	r3, [r4, #0]
 8000bc2:	221c      	movs	r2, #28
 8000bc4:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000bcc:	6822      	ldr	r2, [r4, #0]
 8000bce:	6853      	ldr	r3, [r2, #4]
 8000bd0:	f043 0310 	orr.w	r3, r3, #16
 8000bd4:	6053      	str	r3, [r2, #4]
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8000bd6:	6821      	ldr	r1, [r4, #0]
 8000bd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8000bda:	68ca      	ldr	r2, [r1, #12]
 8000bdc:	f022 0203 	bic.w	r2, r2, #3
 8000be0:	4313      	orrs	r3, r2
 8000be2:	60cb      	str	r3, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000be4:	6821      	ldr	r1, [r4, #0]
 8000be6:	4633      	mov	r3, r6
 8000be8:	463a      	mov	r2, r7
 8000bea:	3140      	adds	r1, #64	; 0x40
 8000bec:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000bee:	f000 ffd5 	bl	8001b9c <HAL_DMA_Start_IT>
 8000bf2:	4603      	mov	r3, r0
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000bf4:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8000bf6:	6888      	ldr	r0, [r1, #8]
 8000bf8:	4a11      	ldr	r2, [pc, #68]	; (8000c40 <HAL_ADC_Start_DMA+0x128>)
 8000bfa:	4002      	ands	r2, r0
 8000bfc:	f042 0204 	orr.w	r2, r2, #4
 8000c00:	608a      	str	r2, [r1, #8]
 8000c02:	e00a      	b.n	8000c1a <HAL_ADC_Start_DMA+0x102>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000c04:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8000c08:	e7c2      	b.n	8000b90 <HAL_ADC_Start_DMA+0x78>
          ADC_CLEAR_ERRORCODE(hadc);
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	65a3      	str	r3, [r4, #88]	; 0x58
 8000c0e:	e7ce      	b.n	8000bae <HAL_ADC_Start_DMA+0x96>
        __HAL_UNLOCK(hadc);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 8000c16:	e000      	b.n	8000c1a <HAL_ADC_Start_DMA+0x102>
    tmp_hal_status = HAL_BUSY;
 8000c18:	2302      	movs	r3, #2
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8000c1e:	2302      	movs	r3, #2
 8000c20:	e7fb      	b.n	8000c1a <HAL_ADC_Start_DMA+0x102>
 8000c22:	bf00      	nop
 8000c24:	40022000 	.word	0x40022000
 8000c28:	40022100 	.word	0x40022100
 8000c2c:	58026300 	.word	0x58026300
 8000c30:	fffff0fe 	.word	0xfffff0fe
 8000c34:	080003f9 	.word	0x080003f9
 8000c38:	080003ed 	.word	0x080003ed
 8000c3c:	08000481 	.word	0x08000481
 8000c40:	7fffffc0 	.word	0x7fffffc0

08000c44 <ADC_Disable>:
{
 8000c44:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8000c46:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000c48:	689a      	ldr	r2, [r3, #8]
 8000c4a:	f012 0f02 	tst.w	r2, #2
 8000c4e:	d015      	beq.n	8000c7c <ADC_Disable+0x38>
 8000c50:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000c52:	689a      	ldr	r2, [r3, #8]
 8000c54:	f012 0f01 	tst.w	r2, #1
 8000c58:	d035      	beq.n	8000cc6 <ADC_Disable+0x82>
      && (tmp_adc_is_disable_on_going == 0UL)
 8000c5a:	2900      	cmp	r1, #0
 8000c5c:	d135      	bne.n	8000cca <ADC_Disable+0x86>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8000c5e:	689a      	ldr	r2, [r3, #8]
 8000c60:	f002 020d 	and.w	r2, r2, #13
 8000c64:	2a01      	cmp	r2, #1
 8000c66:	d00b      	beq.n	8000c80 <ADC_Disable+0x3c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c68:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000c6a:	f043 0310 	orr.w	r3, r3, #16
 8000c6e:	6543      	str	r3, [r0, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c70:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8000c78:	2001      	movs	r0, #1
 8000c7a:	e025      	b.n	8000cc8 <ADC_Disable+0x84>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	e7e8      	b.n	8000c52 <ADC_Disable+0xe>
 8000c80:	4604      	mov	r4, r0
  MODIFY_REG(ADCx->CR,
 8000c82:	6899      	ldr	r1, [r3, #8]
 8000c84:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <ADC_Disable+0x8c>)
 8000c86:	400a      	ands	r2, r1
 8000c88:	f042 0202 	orr.w	r2, r2, #2
 8000c8c:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8000c8e:	6803      	ldr	r3, [r0, #0]
 8000c90:	2203      	movs	r2, #3
 8000c92:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000c94:	f7ff fb80 	bl	8000398 <HAL_GetTick>
 8000c98:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8000c9a:	6823      	ldr	r3, [r4, #0]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f013 0f01 	tst.w	r3, #1
 8000ca2:	d00e      	beq.n	8000cc2 <ADC_Disable+0x7e>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ca4:	f7ff fb78 	bl	8000398 <HAL_GetTick>
 8000ca8:	1b40      	subs	r0, r0, r5
 8000caa:	2802      	cmp	r0, #2
 8000cac:	d9f5      	bls.n	8000c9a <ADC_Disable+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000cb0:	f043 0310 	orr.w	r3, r3, #16
 8000cb4:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	e002      	b.n	8000cc8 <ADC_Disable+0x84>
  return HAL_OK;
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	e000      	b.n	8000cc8 <ADC_Disable+0x84>
 8000cc6:	2000      	movs	r0, #0
}
 8000cc8:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8000cca:	2000      	movs	r0, #0
 8000ccc:	e7fc      	b.n	8000cc8 <ADC_Disable+0x84>
 8000cce:	bf00      	nop
 8000cd0:	7fffffc0 	.word	0x7fffffc0

08000cd4 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8000cd4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d01b      	beq.n	8000d14 <HAL_ADC_Stop+0x40>
{
 8000cdc:	b510      	push	{r4, lr}
 8000cde:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8000ce6:	2103      	movs	r1, #3
 8000ce8:	f7ff fe32 	bl	8000950 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8000cec:	4603      	mov	r3, r0
 8000cee:	b120      	cbz	r0, 8000cfa <HAL_ADC_Stop+0x26>
  __HAL_UNLOCK(hadc);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	f7ff ffa2 	bl	8000c44 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8000d00:	4603      	mov	r3, r0
 8000d02:	2800      	cmp	r0, #0
 8000d04:	d1f4      	bne.n	8000cf0 <HAL_ADC_Stop+0x1c>
      ADC_STATE_CLR_SET(hadc->State,
 8000d06:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000d08:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <HAL_ADC_Stop+0x48>)
 8000d0a:	400a      	ands	r2, r1
 8000d0c:	f042 0201 	orr.w	r2, r2, #1
 8000d10:	6562      	str	r2, [r4, #84]	; 0x54
 8000d12:	e7ed      	b.n	8000cf0 <HAL_ADC_Stop+0x1c>
  __HAL_LOCK(hadc);
 8000d14:	2302      	movs	r3, #2
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	ffffeefe 	.word	0xffffeefe

08000d20 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8000d20:	b538      	push	{r3, r4, r5, lr}
 8000d22:	4605      	mov	r5, r0
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8000d24:	6803      	ldr	r3, [r0, #0]
 8000d26:	494f      	ldr	r1, [pc, #316]	; (8000e64 <ADC_ConfigureBoostMode+0x144>)
 8000d28:	4a4f      	ldr	r2, [pc, #316]	; (8000e68 <ADC_ConfigureBoostMode+0x148>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	bf18      	it	ne
 8000d2e:	428b      	cmpne	r3, r1
 8000d30:	d123      	bne.n	8000d7a <ADC_ConfigureBoostMode+0x5a>
 8000d32:	4b4e      	ldr	r3, [pc, #312]	; (8000e6c <ADC_ConfigureBoostMode+0x14c>)
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000d3a:	bf14      	ite	ne
 8000d3c:	2301      	movne	r3, #1
 8000d3e:	2300      	moveq	r3, #0
 8000d40:	b34b      	cbz	r3, 8000d96 <ADC_ConfigureBoostMode+0x76>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8000d42:	f002 ffc5 	bl	8003cd0 <HAL_RCC_GetHCLKFreq>
 8000d46:	4604      	mov	r4, r0
    switch(hadc->Init.ClockPrescaler)
 8000d48:	686b      	ldr	r3, [r5, #4]
 8000d4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000d4e:	d01c      	beq.n	8000d8a <ADC_ConfigureBoostMode+0x6a>
 8000d50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000d54:	d01d      	beq.n	8000d92 <ADC_ConfigureBoostMode+0x72>
 8000d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d5a:	d016      	beq.n	8000d8a <ADC_ConfigureBoostMode+0x6a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8000d5c:	f7ff fb36 	bl	80003cc <HAL_GetREVID>
 8000d60:	f241 0303 	movw	r3, #4099	; 0x1003
 8000d64:	4298      	cmp	r0, r3
 8000d66:	d856      	bhi.n	8000e16 <ADC_ConfigureBoostMode+0xf6>
  {
    if(freq > 20000000UL)
 8000d68:	4b41      	ldr	r3, [pc, #260]	; (8000e70 <ADC_ConfigureBoostMode+0x150>)
 8000d6a:	429c      	cmp	r4, r3
 8000d6c:	d94d      	bls.n	8000e0a <ADC_ConfigureBoostMode+0xea>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8000d6e:	682a      	ldr	r2, [r5, #0]
 8000d70:	6893      	ldr	r3, [r2, #8]
 8000d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d76:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8000d78:	bd38      	pop	{r3, r4, r5, pc}
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8000d7a:	4b3e      	ldr	r3, [pc, #248]	; (8000e74 <ADC_ConfigureBoostMode+0x154>)
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000d82:	bf14      	ite	ne
 8000d84:	2301      	movne	r3, #1
 8000d86:	2300      	moveq	r3, #0
 8000d88:	e7da      	b.n	8000d40 <ADC_ConfigureBoostMode+0x20>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8000d8a:	0c1b      	lsrs	r3, r3, #16
 8000d8c:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8000d90:	e7e4      	b.n	8000d5c <ADC_ConfigureBoostMode+0x3c>
        freq /= 4UL;
 8000d92:	0884      	lsrs	r4, r0, #2
        break;
 8000d94:	e7e2      	b.n	8000d5c <ADC_ConfigureBoostMode+0x3c>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8000d96:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000d9a:	f004 f863 	bl	8004e64 <HAL_RCCEx_GetPeriphCLKFreq>
 8000d9e:	4604      	mov	r4, r0
    switch(hadc->Init.ClockPrescaler)
 8000da0:	686b      	ldr	r3, [r5, #4]
 8000da2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8000da6:	d016      	beq.n	8000dd6 <ADC_ConfigureBoostMode+0xb6>
 8000da8:	d90b      	bls.n	8000dc2 <ADC_ConfigureBoostMode+0xa2>
 8000daa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8000dae:	d028      	beq.n	8000e02 <ADC_ConfigureBoostMode+0xe2>
 8000db0:	d81d      	bhi.n	8000dee <ADC_ConfigureBoostMode+0xce>
 8000db2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8000db6:	d022      	beq.n	8000dfe <ADC_ConfigureBoostMode+0xde>
 8000db8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000dbc:	d1ce      	bne.n	8000d5c <ADC_ConfigureBoostMode+0x3c>
        freq /= 32UL;
 8000dbe:	0944      	lsrs	r4, r0, #5
        break;
 8000dc0:	e7cc      	b.n	8000d5c <ADC_ConfigureBoostMode+0x3c>
    switch(hadc->Init.ClockPrescaler)
 8000dc2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000dc6:	d006      	beq.n	8000dd6 <ADC_ConfigureBoostMode+0xb6>
 8000dc8:	d80a      	bhi.n	8000de0 <ADC_ConfigureBoostMode+0xc0>
 8000dca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000dce:	d002      	beq.n	8000dd6 <ADC_ConfigureBoostMode+0xb6>
 8000dd0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000dd4:	d1c2      	bne.n	8000d5c <ADC_ConfigureBoostMode+0x3c>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8000dd6:	0c9b      	lsrs	r3, r3, #18
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8000dde:	e7bd      	b.n	8000d5c <ADC_ConfigureBoostMode+0x3c>
    switch(hadc->Init.ClockPrescaler)
 8000de0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000de4:	d0f7      	beq.n	8000dd6 <ADC_ConfigureBoostMode+0xb6>
 8000de6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8000dea:	d1b7      	bne.n	8000d5c <ADC_ConfigureBoostMode+0x3c>
 8000dec:	e7f3      	b.n	8000dd6 <ADC_ConfigureBoostMode+0xb6>
 8000dee:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8000df2:	d008      	beq.n	8000e06 <ADC_ConfigureBoostMode+0xe6>
 8000df4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8000df8:	d1b0      	bne.n	8000d5c <ADC_ConfigureBoostMode+0x3c>
        freq /= 256UL;
 8000dfa:	0a04      	lsrs	r4, r0, #8
        break;
 8000dfc:	e7ae      	b.n	8000d5c <ADC_ConfigureBoostMode+0x3c>
        freq /= 16UL;
 8000dfe:	0904      	lsrs	r4, r0, #4
      break;
 8000e00:	e7ac      	b.n	8000d5c <ADC_ConfigureBoostMode+0x3c>
        freq /= 64UL;
 8000e02:	0984      	lsrs	r4, r0, #6
        break;
 8000e04:	e7aa      	b.n	8000d5c <ADC_ConfigureBoostMode+0x3c>
        freq /= 128UL;
 8000e06:	09c4      	lsrs	r4, r0, #7
        break;
 8000e08:	e7a8      	b.n	8000d5c <ADC_ConfigureBoostMode+0x3c>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8000e0a:	682a      	ldr	r2, [r5, #0]
 8000e0c:	6893      	ldr	r3, [r2, #8]
 8000e0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e12:	6093      	str	r3, [r2, #8]
 8000e14:	e7b0      	b.n	8000d78 <ADC_ConfigureBoostMode+0x58>
    freq /= 2U; /* divider by 2 for Rev.V */
 8000e16:	0864      	lsrs	r4, r4, #1
    if (freq <= 6250000UL)
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <ADC_ConfigureBoostMode+0x158>)
 8000e1a:	429c      	cmp	r4, r3
 8000e1c:	d90b      	bls.n	8000e36 <ADC_ConfigureBoostMode+0x116>
    else if(freq <= 12500000UL)
 8000e1e:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <ADC_ConfigureBoostMode+0x15c>)
 8000e20:	429c      	cmp	r4, r3
 8000e22:	d90e      	bls.n	8000e42 <ADC_ConfigureBoostMode+0x122>
    else if(freq <= 25000000UL)
 8000e24:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <ADC_ConfigureBoostMode+0x160>)
 8000e26:	429c      	cmp	r4, r3
 8000e28:	d913      	bls.n	8000e52 <ADC_ConfigureBoostMode+0x132>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8000e2a:	682a      	ldr	r2, [r5, #0]
 8000e2c:	6893      	ldr	r3, [r2, #8]
 8000e2e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000e32:	6093      	str	r3, [r2, #8]
}
 8000e34:	e7a0      	b.n	8000d78 <ADC_ConfigureBoostMode+0x58>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8000e36:	682a      	ldr	r2, [r5, #0]
 8000e38:	6893      	ldr	r3, [r2, #8]
 8000e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e3e:	6093      	str	r3, [r2, #8]
 8000e40:	e79a      	b.n	8000d78 <ADC_ConfigureBoostMode+0x58>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8000e42:	682a      	ldr	r2, [r5, #0]
 8000e44:	6893      	ldr	r3, [r2, #8]
 8000e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4e:	6093      	str	r3, [r2, #8]
 8000e50:	e792      	b.n	8000d78 <ADC_ConfigureBoostMode+0x58>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8000e52:	682a      	ldr	r2, [r5, #0]
 8000e54:	6893      	ldr	r3, [r2, #8]
 8000e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e5e:	6093      	str	r3, [r2, #8]
 8000e60:	e78a      	b.n	8000d78 <ADC_ConfigureBoostMode+0x58>
 8000e62:	bf00      	nop
 8000e64:	40022000 	.word	0x40022000
 8000e68:	40022100 	.word	0x40022100
 8000e6c:	40022300 	.word	0x40022300
 8000e70:	01312d00 	.word	0x01312d00
 8000e74:	58026300 	.word	0x58026300
 8000e78:	005f5e10 	.word	0x005f5e10
 8000e7c:	00bebc20 	.word	0x00bebc20
 8000e80:	017d7840 	.word	0x017d7840

08000e84 <HAL_ADC_Init>:
{
 8000e84:	b530      	push	{r4, r5, lr}
 8000e86:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8000e8c:	2800      	cmp	r0, #0
 8000e8e:	f000 811c 	beq.w	80010ca <HAL_ADC_Init+0x246>
 8000e92:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e94:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000e96:	b1e3      	cbz	r3, 8000ed2 <HAL_ADC_Init+0x4e>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000e98:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000e9a:	689a      	ldr	r2, [r3, #8]
 8000e9c:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8000ea0:	d003      	beq.n	8000eaa <HAL_ADC_Init+0x26>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ea2:	6899      	ldr	r1, [r3, #8]
 8000ea4:	4a8a      	ldr	r2, [pc, #552]	; (80010d0 <HAL_ADC_Init+0x24c>)
 8000ea6:	400a      	ands	r2, r1
 8000ea8:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000eaa:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000eb2:	d11b      	bne.n	8000eec <HAL_ADC_Init+0x68>
  MODIFY_REG(ADCx->CR,
 8000eb4:	6899      	ldr	r1, [r3, #8]
 8000eb6:	4a87      	ldr	r2, [pc, #540]	; (80010d4 <HAL_ADC_Init+0x250>)
 8000eb8:	400a      	ands	r2, r1
 8000eba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ebe:	609a      	str	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000ec0:	4b85      	ldr	r3, [pc, #532]	; (80010d8 <HAL_ADC_Init+0x254>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	099b      	lsrs	r3, r3, #6
 8000ec6:	4a85      	ldr	r2, [pc, #532]	; (80010dc <HAL_ADC_Init+0x258>)
 8000ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ecc:	099b      	lsrs	r3, r3, #6
 8000ece:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000ed0:	e009      	b.n	8000ee6 <HAL_ADC_Init+0x62>
    HAL_ADC_MspInit(hadc);
 8000ed2:	f008 fddb 	bl	8009a8c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8000eda:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000ede:	e7db      	b.n	8000e98 <HAL_ADC_Init+0x14>
      wait_loop_index--;
 8000ee0:	9b01      	ldr	r3, [sp, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000ee6:	9b01      	ldr	r3, [sp, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1f9      	bne.n	8000ee0 <HAL_ADC_Init+0x5c>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000eec:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000ef4:	f040 809d 	bne.w	8001032 <HAL_ADC_Init+0x1ae>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ef8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000efa:	f042 0210 	orr.w	r2, r2, #16
 8000efe:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f00:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000f02:	f042 0201 	orr.w	r2, r2, #1
 8000f06:	65a2      	str	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8000f08:	2501      	movs	r5, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	f012 0f04 	tst.w	r2, #4
 8000f10:	f000 8091 	beq.w	8001036 <HAL_ADC_Init+0x1b2>
 8000f14:	2101      	movs	r1, #1
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f16:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000f18:	f012 0f10 	tst.w	r2, #16
 8000f1c:	f040 80cd 	bne.w	80010ba <HAL_ADC_Init+0x236>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000f20:	2900      	cmp	r1, #0
 8000f22:	f040 80ca 	bne.w	80010ba <HAL_ADC_Init+0x236>
    ADC_STATE_CLR_SET(hadc->State,
 8000f26:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000f28:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8000f2c:	f042 0202 	orr.w	r2, r2, #2
 8000f30:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	f012 0f01 	tst.w	r2, #1
 8000f38:	d121      	bne.n	8000f7e <HAL_ADC_Init+0xfa>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000f3a:	4969      	ldr	r1, [pc, #420]	; (80010e0 <HAL_ADC_Init+0x25c>)
 8000f3c:	4a69      	ldr	r2, [pc, #420]	; (80010e4 <HAL_ADC_Init+0x260>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	bf18      	it	ne
 8000f42:	428b      	cmpne	r3, r1
 8000f44:	bf0c      	ite	eq
 8000f46:	2301      	moveq	r3, #1
 8000f48:	2300      	movne	r3, #0
 8000f4a:	d17a      	bne.n	8001042 <HAL_ADC_Init+0x1be>
 8000f4c:	688a      	ldr	r2, [r1, #8]
 8000f4e:	f012 0f01 	tst.w	r2, #1
 8000f52:	d072      	beq.n	800103a <HAL_ADC_Init+0x1b6>
 8000f54:	2201      	movs	r2, #1
 8000f56:	4963      	ldr	r1, [pc, #396]	; (80010e4 <HAL_ADC_Init+0x260>)
 8000f58:	6889      	ldr	r1, [r1, #8]
 8000f5a:	f011 0f01 	tst.w	r1, #1
 8000f5e:	d06e      	beq.n	800103e <HAL_ADC_Init+0x1ba>
 8000f60:	2101      	movs	r1, #1
 8000f62:	430a      	orrs	r2, r1
 8000f64:	bf0c      	ite	eq
 8000f66:	2201      	moveq	r2, #1
 8000f68:	2200      	movne	r2, #0
 8000f6a:	b142      	cbz	r2, 8000f7e <HAL_ADC_Init+0xfa>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d073      	beq.n	8001058 <HAL_ADC_Init+0x1d4>
 8000f70:	495d      	ldr	r1, [pc, #372]	; (80010e8 <HAL_ADC_Init+0x264>)
 8000f72:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f74:	688a      	ldr	r2, [r1, #8]
 8000f76:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	608b      	str	r3, [r1, #8]
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000f7e:	f7ff fa25 	bl	80003cc <HAL_GetREVID>
 8000f82:	f241 0303 	movw	r3, #4099	; 0x1003
 8000f86:	4298      	cmp	r0, r3
 8000f88:	d902      	bls.n	8000f90 <HAL_ADC_Init+0x10c>
 8000f8a:	68a3      	ldr	r3, [r4, #8]
 8000f8c:	2b10      	cmp	r3, #16
 8000f8e:	d065      	beq.n	800105c <HAL_ADC_Init+0x1d8>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000f90:	7d62      	ldrb	r2, [r4, #21]
                  hadc->Init.Overrun                                                    |
 8000f92:	6b23      	ldr	r3, [r4, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000f94:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                  hadc->Init.Resolution                                                 |
 8000f98:	68a2      	ldr	r2, [r4, #8]
                  hadc->Init.Overrun                                                    |
 8000f9a:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8000f9c:	7f22      	ldrb	r2, [r4, #28]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000f9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fa2:	7f22      	ldrb	r2, [r4, #28]
 8000fa4:	2a01      	cmp	r2, #1
 8000fa6:	d064      	beq.n	8001072 <HAL_ADC_Init+0x1ee>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fa8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000faa:	b122      	cbz	r2, 8000fb6 <HAL_ADC_Init+0x132>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000fac:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000fb0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000fb2:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000fb4:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000fb6:	6821      	ldr	r1, [r4, #0]
 8000fb8:	68c8      	ldr	r0, [r1, #12]
 8000fba:	4a4c      	ldr	r2, [pc, #304]	; (80010ec <HAL_ADC_Init+0x268>)
 8000fbc:	4002      	ands	r2, r0
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	60cb      	str	r3, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000fc2:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	f012 0f04 	tst.w	r2, #4
 8000fca:	d057      	beq.n	800107c <HAL_ADC_Init+0x1f8>
 8000fcc:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	f012 0f08 	tst.w	r2, #8
 8000fd4:	d054      	beq.n	8001080 <HAL_ADC_Init+0x1fc>
 8000fd6:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	d11b      	bne.n	8001014 <HAL_ADC_Init+0x190>
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000fdc:	7d21      	ldrb	r1, [r4, #20]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8000fde:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      tmpCFGR = (
 8000fe0:	ea42 3181 	orr.w	r1, r2, r1, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000fe4:	68d8      	ldr	r0, [r3, #12]
 8000fe6:	4a42      	ldr	r2, [pc, #264]	; (80010f0 <HAL_ADC_Init+0x26c>)
 8000fe8:	4002      	ands	r2, r0
 8000fea:	430a      	orrs	r2, r1
 8000fec:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8000fee:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d046      	beq.n	8001084 <HAL_ADC_Init+0x200>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000ff6:	6822      	ldr	r2, [r4, #0]
 8000ff8:	6913      	ldr	r3, [r2, #16]
 8000ffa:	f023 0301 	bic.w	r3, r3, #1
 8000ffe:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001000:	6822      	ldr	r2, [r4, #0]
 8001002:	6913      	ldr	r3, [r2, #16]
 8001004:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001008:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800100a:	430b      	orrs	r3, r1
 800100c:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 800100e:	4620      	mov	r0, r4
 8001010:	f7ff fe86 	bl	8000d20 <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001014:	68e3      	ldr	r3, [r4, #12]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d046      	beq.n	80010a8 <HAL_ADC_Init+0x224>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800101a:	6822      	ldr	r2, [r4, #0]
 800101c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800101e:	f023 030f 	bic.w	r3, r3, #15
 8001022:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001024:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001026:	f023 0303 	bic.w	r3, r3, #3
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	6563      	str	r3, [r4, #84]	; 0x54
 8001030:	e048      	b.n	80010c4 <HAL_ADC_Init+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001032:	2500      	movs	r5, #0
 8001034:	e769      	b.n	8000f0a <HAL_ADC_Init+0x86>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001036:	2100      	movs	r1, #0
 8001038:	e76d      	b.n	8000f16 <HAL_ADC_Init+0x92>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800103a:	2200      	movs	r2, #0
 800103c:	e78b      	b.n	8000f56 <HAL_ADC_Init+0xd2>
 800103e:	2100      	movs	r1, #0
 8001040:	e78f      	b.n	8000f62 <HAL_ADC_Init+0xde>
 8001042:	4a2c      	ldr	r2, [pc, #176]	; (80010f4 <HAL_ADC_Init+0x270>)
 8001044:	6892      	ldr	r2, [r2, #8]
 8001046:	f012 0f01 	tst.w	r2, #1
 800104a:	d003      	beq.n	8001054 <HAL_ADC_Init+0x1d0>
 800104c:	2201      	movs	r2, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800104e:	f082 0201 	eor.w	r2, r2, #1
 8001052:	e78a      	b.n	8000f6a <HAL_ADC_Init+0xe6>
 8001054:	2200      	movs	r2, #0
 8001056:	e7fa      	b.n	800104e <HAL_ADC_Init+0x1ca>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001058:	4927      	ldr	r1, [pc, #156]	; (80010f8 <HAL_ADC_Init+0x274>)
 800105a:	e78a      	b.n	8000f72 <HAL_ADC_Init+0xee>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800105c:	7d61      	ldrb	r1, [r4, #21]
                  hadc->Init.Overrun                                                    |
 800105e:	6b22      	ldr	r2, [r4, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001060:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
                  hadc->Init.Overrun                                                    |
 8001064:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8001066:	7f22      	ldrb	r2, [r4, #28]
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8001068:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800106c:	f043 030c 	orr.w	r3, r3, #12
 8001070:	e797      	b.n	8000fa2 <HAL_ADC_Init+0x11e>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001072:	6a22      	ldr	r2, [r4, #32]
 8001074:	3a01      	subs	r2, #1
 8001076:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800107a:	e795      	b.n	8000fa8 <HAL_ADC_Init+0x124>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800107c:	2100      	movs	r1, #0
 800107e:	e7a6      	b.n	8000fce <HAL_ADC_Init+0x14a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001080:	2200      	movs	r2, #0
 8001082:	e7a9      	b.n	8000fd8 <HAL_ADC_Init+0x154>
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001084:	6820      	ldr	r0, [r4, #0]
 8001086:	6902      	ldr	r2, [r0, #16]
 8001088:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <HAL_ADC_Init+0x278>)
 800108a:	4013      	ands	r3, r2
 800108c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800108e:	1e51      	subs	r1, r2, #1
 8001090:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001092:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001096:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001098:	430a      	orrs	r2, r1
 800109a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800109c:	430a      	orrs	r2, r1
 800109e:	4313      	orrs	r3, r2
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6103      	str	r3, [r0, #16]
 80010a6:	e7ab      	b.n	8001000 <HAL_ADC_Init+0x17c>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80010a8:	6821      	ldr	r1, [r4, #0]
 80010aa:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80010ac:	f023 030f 	bic.w	r3, r3, #15
 80010b0:	69a2      	ldr	r2, [r4, #24]
 80010b2:	3a01      	subs	r2, #1
 80010b4:	4313      	orrs	r3, r2
 80010b6:	630b      	str	r3, [r1, #48]	; 0x30
 80010b8:	e7b4      	b.n	8001024 <HAL_ADC_Init+0x1a0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80010bc:	f043 0310 	orr.w	r3, r3, #16
 80010c0:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80010c2:	2501      	movs	r5, #1
}
 80010c4:	4628      	mov	r0, r5
 80010c6:	b003      	add	sp, #12
 80010c8:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80010ca:	2501      	movs	r5, #1
 80010cc:	e7fa      	b.n	80010c4 <HAL_ADC_Init+0x240>
 80010ce:	bf00      	nop
 80010d0:	5fffffc0 	.word	0x5fffffc0
 80010d4:	6fffffc0 	.word	0x6fffffc0
 80010d8:	200000bc 	.word	0x200000bc
 80010dc:	053e2d63 	.word	0x053e2d63
 80010e0:	40022000 	.word	0x40022000
 80010e4:	40022100 	.word	0x40022100
 80010e8:	40022300 	.word	0x40022300
 80010ec:	fff0c003 	.word	0xfff0c003
 80010f0:	ffffbffc 	.word	0xffffbffc
 80010f4:	58026000 	.word	0x58026000
 80010f8:	58026300 	.word	0x58026300
 80010fc:	fc00f81e 	.word	0xfc00f81e

08001100 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001100:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8001104:	2a01      	cmp	r2, #1
 8001106:	f000 80aa 	beq.w	800125e <HAL_ADCEx_MultiModeConfigChannel+0x15e>
{
 800110a:	b430      	push	{r4, r5}
 800110c:	b09a      	sub	sp, #104	; 0x68
 800110e:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8001110:	2201      	movs	r2, #1
 8001112:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001116:	6802      	ldr	r2, [r0, #0]
 8001118:	4852      	ldr	r0, [pc, #328]	; (8001264 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 800111a:	4282      	cmp	r2, r0
 800111c:	d043      	beq.n	80011a6 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800111e:	2000      	movs	r0, #0
 8001120:	9001      	str	r0, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8001122:	9801      	ldr	r0, [sp, #4]
 8001124:	2800      	cmp	r0, #0
 8001126:	d042      	beq.n	80011ae <HAL_ADCEx_MultiModeConfigChannel+0xae>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001128:	6880      	ldr	r0, [r0, #8]
 800112a:	f010 0f04 	tst.w	r0, #4
 800112e:	d047      	beq.n	80011c0 <HAL_ADCEx_MultiModeConfigChannel+0xc0>
 8001130:	2401      	movs	r4, #1
 8001132:	6890      	ldr	r0, [r2, #8]
 8001134:	f010 0f04 	tst.w	r0, #4
 8001138:	f040 8082 	bne.w	8001240 <HAL_ADCEx_MultiModeConfigChannel+0x140>
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 800113c:	2c00      	cmp	r4, #0
 800113e:	d17f      	bne.n	8001240 <HAL_ADCEx_MultiModeConfigChannel+0x140>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001140:	4c48      	ldr	r4, [pc, #288]	; (8001264 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 8001142:	4849      	ldr	r0, [pc, #292]	; (8001268 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 8001144:	4282      	cmp	r2, r0
 8001146:	bf18      	it	ne
 8001148:	42a2      	cmpne	r2, r4
 800114a:	d13b      	bne.n	80011c4 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 800114c:	f500 7000 	add.w	r0, r0, #512	; 0x200

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001150:	680a      	ldr	r2, [r1, #0]
 8001152:	2a00      	cmp	r2, #0
 8001154:	d047      	beq.n	80011e6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8001156:	6882      	ldr	r2, [r0, #8]
 8001158:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800115c:	684c      	ldr	r4, [r1, #4]
 800115e:	4322      	orrs	r2, r4
 8001160:	6082      	str	r2, [r0, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4d3f      	ldr	r5, [pc, #252]	; (8001264 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 8001166:	4c40      	ldr	r4, [pc, #256]	; (8001268 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 8001168:	42a2      	cmp	r2, r4
 800116a:	bf18      	it	ne
 800116c:	42aa      	cmpne	r2, r5
 800116e:	d12f      	bne.n	80011d0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001170:	68aa      	ldr	r2, [r5, #8]
 8001172:	f012 0f01 	tst.w	r2, #1
 8001176:	d027      	beq.n	80011c8 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
 8001178:	2401      	movs	r4, #1
 800117a:	4a3b      	ldr	r2, [pc, #236]	; (8001268 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 800117c:	6892      	ldr	r2, [r2, #8]
 800117e:	f012 0f01 	tst.w	r2, #1
 8001182:	d023      	beq.n	80011cc <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001184:	2201      	movs	r2, #1
 8001186:	4322      	orrs	r2, r4
 8001188:	bf0c      	ite	eq
 800118a:	2201      	moveq	r2, #1
 800118c:	2200      	movne	r2, #0
 800118e:	2a00      	cmp	r2, #0
 8001190:	d061      	beq.n	8001256 <HAL_ADCEx_MultiModeConfigChannel+0x156>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001192:	6884      	ldr	r4, [r0, #8]
 8001194:	4a35      	ldr	r2, [pc, #212]	; (800126c <HAL_ADCEx_MultiModeConfigChannel+0x16c>)
 8001196:	4022      	ands	r2, r4
 8001198:	680c      	ldr	r4, [r1, #0]
 800119a:	6889      	ldr	r1, [r1, #8]
 800119c:	4321      	orrs	r1, r4
 800119e:	430a      	orrs	r2, r1
 80011a0:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a2:	2000      	movs	r0, #0
 80011a4:	e051      	b.n	800124a <HAL_ADCEx_MultiModeConfigChannel+0x14a>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80011a6:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80011aa:	9001      	str	r0, [sp, #4]
 80011ac:	e7b9      	b.n	8001122 <HAL_ADCEx_MultiModeConfigChannel+0x22>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80011b0:	f042 0220 	orr.w	r2, r2, #32
 80011b4:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80011bc:	2001      	movs	r0, #1
 80011be:	e047      	b.n	8001250 <HAL_ADCEx_MultiModeConfigChannel+0x150>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011c0:	2400      	movs	r4, #0
 80011c2:	e7b6      	b.n	8001132 <HAL_ADCEx_MultiModeConfigChannel+0x32>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80011c4:	482a      	ldr	r0, [pc, #168]	; (8001270 <HAL_ADCEx_MultiModeConfigChannel+0x170>)
 80011c6:	e7c3      	b.n	8001150 <HAL_ADCEx_MultiModeConfigChannel+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011c8:	2400      	movs	r4, #0
 80011ca:	e7d6      	b.n	800117a <HAL_ADCEx_MultiModeConfigChannel+0x7a>
 80011cc:	2200      	movs	r2, #0
 80011ce:	e7da      	b.n	8001186 <HAL_ADCEx_MultiModeConfigChannel+0x86>
 80011d0:	4a28      	ldr	r2, [pc, #160]	; (8001274 <HAL_ADCEx_MultiModeConfigChannel+0x174>)
 80011d2:	6892      	ldr	r2, [r2, #8]
 80011d4:	f012 0f01 	tst.w	r2, #1
 80011d8:	d003      	beq.n	80011e2 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 80011da:	2201      	movs	r2, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011dc:	f082 0201 	eor.w	r2, r2, #1
 80011e0:	e7d5      	b.n	800118e <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 80011e2:	2200      	movs	r2, #0
 80011e4:	e7fa      	b.n	80011dc <HAL_ADCEx_MultiModeConfigChannel+0xdc>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80011e6:	6881      	ldr	r1, [r0, #8]
 80011e8:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 80011ec:	6081      	str	r1, [r0, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011ee:	6819      	ldr	r1, [r3, #0]
 80011f0:	4d1c      	ldr	r5, [pc, #112]	; (8001264 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 80011f2:	4c1d      	ldr	r4, [pc, #116]	; (8001268 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 80011f4:	42a1      	cmp	r1, r4
 80011f6:	bf18      	it	ne
 80011f8:	42a9      	cmpne	r1, r5
 80011fa:	d117      	bne.n	800122c <HAL_ADCEx_MultiModeConfigChannel+0x12c>
 80011fc:	68a9      	ldr	r1, [r5, #8]
 80011fe:	f011 0f01 	tst.w	r1, #1
 8001202:	d011      	beq.n	8001228 <HAL_ADCEx_MultiModeConfigChannel+0x128>
 8001204:	2401      	movs	r4, #1
 8001206:	4918      	ldr	r1, [pc, #96]	; (8001268 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 8001208:	6889      	ldr	r1, [r1, #8]
 800120a:	f011 0f01 	tst.w	r1, #1
 800120e:	d000      	beq.n	8001212 <HAL_ADCEx_MultiModeConfigChannel+0x112>
 8001210:	2201      	movs	r2, #1
 8001212:	4322      	orrs	r2, r4
 8001214:	bf0c      	ite	eq
 8001216:	2201      	moveq	r2, #1
 8001218:	2200      	movne	r2, #0
 800121a:	b1f2      	cbz	r2, 800125a <HAL_ADCEx_MultiModeConfigChannel+0x15a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800121c:	6881      	ldr	r1, [r0, #8]
 800121e:	4a13      	ldr	r2, [pc, #76]	; (800126c <HAL_ADCEx_MultiModeConfigChannel+0x16c>)
 8001220:	400a      	ands	r2, r1
 8001222:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001224:	2000      	movs	r0, #0
 8001226:	e010      	b.n	800124a <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 8001228:	4614      	mov	r4, r2
 800122a:	e7ec      	b.n	8001206 <HAL_ADCEx_MultiModeConfigChannel+0x106>
 800122c:	4911      	ldr	r1, [pc, #68]	; (8001274 <HAL_ADCEx_MultiModeConfigChannel+0x174>)
 800122e:	6889      	ldr	r1, [r1, #8]
 8001230:	f011 0f01 	tst.w	r1, #1
 8001234:	d000      	beq.n	8001238 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8001236:	2201      	movs	r2, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001238:	fab2 f282 	clz	r2, r2
 800123c:	0952      	lsrs	r2, r2, #5
 800123e:	e7ec      	b.n	800121a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001240:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001242:	f042 0220 	orr.w	r2, r2, #32
 8001246:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001248:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800124a:	2200      	movs	r2, #0
 800124c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8001250:	b01a      	add	sp, #104	; 0x68
 8001252:	bc30      	pop	{r4, r5}
 8001254:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001256:	2000      	movs	r0, #0
 8001258:	e7f7      	b.n	800124a <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 800125a:	2000      	movs	r0, #0
 800125c:	e7f5      	b.n	800124a <HAL_ADCEx_MultiModeConfigChannel+0x14a>
  __HAL_LOCK(hadc);
 800125e:	2002      	movs	r0, #2
}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40022000 	.word	0x40022000
 8001268:	40022100 	.word	0x40022100
 800126c:	fffff0e0 	.word	0xfffff0e0
 8001270:	58026300 	.word	0x58026300
 8001274:	58026000 	.word	0x58026000

08001278 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001278:	4906      	ldr	r1, [pc, #24]	; (8001294 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800127a:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001280:	041b      	lsls	r3, r3, #16
 8001282:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001284:	0200      	lsls	r0, r0, #8
 8001286:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800128c:	4a02      	ldr	r2, [pc, #8]	; (8001298 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800128e:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8001290:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00
 8001298:	05fa0000 	.word	0x05fa0000

0800129c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_NVIC_SetPriority+0x58>)
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a6:	f1c3 0407 	rsb	r4, r3, #7
 80012aa:	2c04      	cmp	r4, #4
 80012ac:	bf28      	it	cs
 80012ae:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b0:	1d1d      	adds	r5, r3, #4
 80012b2:	2d06      	cmp	r5, #6
 80012b4:	d914      	bls.n	80012e0 <HAL_NVIC_SetPriority+0x44>
 80012b6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80012bc:	fa05 f404 	lsl.w	r4, r5, r4
 80012c0:	ea21 0104 	bic.w	r1, r1, r4
 80012c4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c6:	fa05 f303 	lsl.w	r3, r5, r3
 80012ca:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ce:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80012d0:	2800      	cmp	r0, #0
 80012d2:	db07      	blt.n	80012e4 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d4:	0109      	lsls	r1, r1, #4
 80012d6:	b2c9      	uxtb	r1, r1
 80012d8:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <HAL_NVIC_SetPriority+0x5c>)
 80012da:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80012dc:	bc30      	pop	{r4, r5}
 80012de:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e0:	2300      	movs	r3, #0
 80012e2:	e7e9      	b.n	80012b8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	f000 000f 	and.w	r0, r0, #15
 80012e8:	0109      	lsls	r1, r1, #4
 80012ea:	b2c9      	uxtb	r1, r1
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <HAL_NVIC_SetPriority+0x60>)
 80012ee:	5419      	strb	r1, [r3, r0]
 80012f0:	e7f4      	b.n	80012dc <HAL_NVIC_SetPriority+0x40>
 80012f2:	bf00      	nop
 80012f4:	e000ed00 	.word	0xe000ed00
 80012f8:	e000e400 	.word	0xe000e400
 80012fc:	e000ed14 	.word	0xe000ed14

08001300 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001300:	2800      	cmp	r0, #0
 8001302:	db07      	blt.n	8001314 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001304:	f000 021f 	and.w	r2, r0, #31
 8001308:	0940      	lsrs	r0, r0, #5
 800130a:	2301      	movs	r3, #1
 800130c:	4093      	lsls	r3, r2
 800130e:	4a02      	ldr	r2, [pc, #8]	; (8001318 <HAL_NVIC_EnableIRQ+0x18>)
 8001310:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000e100 	.word	0xe000e100

0800131c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800131c:	3801      	subs	r0, #1
 800131e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001322:	d20a      	bcs.n	800133a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_SYSTICK_Config+0x24>)
 8001326:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	4a06      	ldr	r2, [pc, #24]	; (8001344 <HAL_SYSTICK_Config+0x28>)
 800132a:	21f0      	movs	r1, #240	; 0xf0
 800132c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001330:	2000      	movs	r0, #0
 8001332:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001334:	2207      	movs	r2, #7
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800133a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000e010 	.word	0xe000e010
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8001348:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_MPU_Disable+0x18>)
 800134e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001354:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001356:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_MPU_Disable+0x1c>)
 8001358:	2200      	movs	r2, #0
 800135a:	605a      	str	r2, [r3, #4]
}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000ed00 	.word	0xe000ed00
 8001364:	e000ed90 	.word	0xe000ed90

08001368 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001368:	f040 0001 	orr.w	r0, r0, #1
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <HAL_MPU_Enable+0x1c>)
 800136e:	6058      	str	r0, [r3, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001370:	4a05      	ldr	r2, [pc, #20]	; (8001388 <HAL_MPU_Enable+0x20>)
 8001372:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001378:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800137a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800137e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001382:	4770      	bx	lr
 8001384:	e000ed90 	.word	0xe000ed90
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800138c:	7842      	ldrb	r2, [r0, #1]
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <HAL_MPU_ConfigRegion+0x50>)
 8001390:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001392:	7803      	ldrb	r3, [r0, #0]
 8001394:	b923      	cbnz	r3, 80013a0 <HAL_MPU_ConfigRegion+0x14>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_MPU_ConfigRegion+0x50>)
 8001398:	2200      	movs	r2, #0
 800139a:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800139c:	611a      	str	r2, [r3, #16]
  }
}
 800139e:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 80013a0:	6843      	ldr	r3, [r0, #4]
 80013a2:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <HAL_MPU_ConfigRegion+0x50>)
 80013a4:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013a6:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013a8:	7ac3      	ldrb	r3, [r0, #11]
 80013aa:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013ac:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013b0:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013b2:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013b6:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013b8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013bc:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013be:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013c2:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013c8:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013ca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013ce:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013d0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80013d4:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013d6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013d8:	6113      	str	r3, [r2, #16]
 80013da:	4770      	bx	lr
 80013dc:	e000ed90 	.word	0xe000ed90

080013e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013e0:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013e2:	6d87      	ldr	r7, [r0, #88]	; 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80013e4:	6804      	ldr	r4, [r0, #0]
 80013e6:	4e65      	ldr	r6, [pc, #404]	; (800157c <DMA_SetConfig+0x19c>)
 80013e8:	4d65      	ldr	r5, [pc, #404]	; (8001580 <DMA_SetConfig+0x1a0>)
 80013ea:	42ac      	cmp	r4, r5
 80013ec:	bf18      	it	ne
 80013ee:	42b4      	cmpne	r4, r6
 80013f0:	d042      	beq.n	8001478 <DMA_SetConfig+0x98>
 80013f2:	3518      	adds	r5, #24
 80013f4:	42ac      	cmp	r4, r5
 80013f6:	d03f      	beq.n	8001478 <DMA_SetConfig+0x98>
 80013f8:	3518      	adds	r5, #24
 80013fa:	42ac      	cmp	r4, r5
 80013fc:	d03c      	beq.n	8001478 <DMA_SetConfig+0x98>
 80013fe:	3518      	adds	r5, #24
 8001400:	42ac      	cmp	r4, r5
 8001402:	d039      	beq.n	8001478 <DMA_SetConfig+0x98>
 8001404:	3518      	adds	r5, #24
 8001406:	42ac      	cmp	r4, r5
 8001408:	d036      	beq.n	8001478 <DMA_SetConfig+0x98>
 800140a:	3518      	adds	r5, #24
 800140c:	42ac      	cmp	r4, r5
 800140e:	d033      	beq.n	8001478 <DMA_SetConfig+0x98>
 8001410:	3518      	adds	r5, #24
 8001412:	42ac      	cmp	r4, r5
 8001414:	d030      	beq.n	8001478 <DMA_SetConfig+0x98>
 8001416:	f505 7556 	add.w	r5, r5, #856	; 0x358
 800141a:	42ac      	cmp	r4, r5
 800141c:	d02c      	beq.n	8001478 <DMA_SetConfig+0x98>
 800141e:	3518      	adds	r5, #24
 8001420:	42ac      	cmp	r4, r5
 8001422:	d029      	beq.n	8001478 <DMA_SetConfig+0x98>
 8001424:	3518      	adds	r5, #24
 8001426:	42ac      	cmp	r4, r5
 8001428:	d026      	beq.n	8001478 <DMA_SetConfig+0x98>
 800142a:	3518      	adds	r5, #24
 800142c:	42ac      	cmp	r4, r5
 800142e:	d023      	beq.n	8001478 <DMA_SetConfig+0x98>
 8001430:	3518      	adds	r5, #24
 8001432:	42ac      	cmp	r4, r5
 8001434:	d020      	beq.n	8001478 <DMA_SetConfig+0x98>
 8001436:	3518      	adds	r5, #24
 8001438:	42ac      	cmp	r4, r5
 800143a:	d01d      	beq.n	8001478 <DMA_SetConfig+0x98>
 800143c:	3518      	adds	r5, #24
 800143e:	42ac      	cmp	r4, r5
 8001440:	d01a      	beq.n	8001478 <DMA_SetConfig+0x98>
 8001442:	3518      	adds	r5, #24
 8001444:	42ac      	cmp	r4, r5
 8001446:	d017      	beq.n	8001478 <DMA_SetConfig+0x98>
 8001448:	4d4e      	ldr	r5, [pc, #312]	; (8001584 <DMA_SetConfig+0x1a4>)
 800144a:	42ac      	cmp	r4, r5
 800144c:	d014      	beq.n	8001478 <DMA_SetConfig+0x98>
 800144e:	3514      	adds	r5, #20
 8001450:	42ac      	cmp	r4, r5
 8001452:	d011      	beq.n	8001478 <DMA_SetConfig+0x98>
 8001454:	3514      	adds	r5, #20
 8001456:	42ac      	cmp	r4, r5
 8001458:	d00e      	beq.n	8001478 <DMA_SetConfig+0x98>
 800145a:	3514      	adds	r5, #20
 800145c:	42ac      	cmp	r4, r5
 800145e:	d00b      	beq.n	8001478 <DMA_SetConfig+0x98>
 8001460:	3514      	adds	r5, #20
 8001462:	42ac      	cmp	r4, r5
 8001464:	d008      	beq.n	8001478 <DMA_SetConfig+0x98>
 8001466:	3514      	adds	r5, #20
 8001468:	42ac      	cmp	r4, r5
 800146a:	d005      	beq.n	8001478 <DMA_SetConfig+0x98>
 800146c:	3514      	adds	r5, #20
 800146e:	42ac      	cmp	r4, r5
 8001470:	d002      	beq.n	8001478 <DMA_SetConfig+0x98>
 8001472:	3514      	adds	r5, #20
 8001474:	42ac      	cmp	r4, r5
 8001476:	d107      	bne.n	8001488 <DMA_SetConfig+0xa8>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001478:	6e44      	ldr	r4, [r0, #100]	; 0x64
 800147a:	6e85      	ldr	r5, [r0, #104]	; 0x68
 800147c:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800147e:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 8001480:	b114      	cbz	r4, 8001488 <DMA_SetConfig+0xa8>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001482:	6f04      	ldr	r4, [r0, #112]	; 0x70
 8001484:	6f45      	ldr	r5, [r0, #116]	; 0x74
 8001486:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001488:	6804      	ldr	r4, [r0, #0]
 800148a:	4e3c      	ldr	r6, [pc, #240]	; (800157c <DMA_SetConfig+0x19c>)
 800148c:	4d3c      	ldr	r5, [pc, #240]	; (8001580 <DMA_SetConfig+0x1a0>)
 800148e:	42ac      	cmp	r4, r5
 8001490:	bf18      	it	ne
 8001492:	42b4      	cmpne	r4, r6
 8001494:	d052      	beq.n	800153c <DMA_SetConfig+0x15c>
 8001496:	3518      	adds	r5, #24
 8001498:	42ac      	cmp	r4, r5
 800149a:	d04f      	beq.n	800153c <DMA_SetConfig+0x15c>
 800149c:	3518      	adds	r5, #24
 800149e:	42ac      	cmp	r4, r5
 80014a0:	d04c      	beq.n	800153c <DMA_SetConfig+0x15c>
 80014a2:	3518      	adds	r5, #24
 80014a4:	42ac      	cmp	r4, r5
 80014a6:	d049      	beq.n	800153c <DMA_SetConfig+0x15c>
 80014a8:	3518      	adds	r5, #24
 80014aa:	42ac      	cmp	r4, r5
 80014ac:	d046      	beq.n	800153c <DMA_SetConfig+0x15c>
 80014ae:	3518      	adds	r5, #24
 80014b0:	42ac      	cmp	r4, r5
 80014b2:	d043      	beq.n	800153c <DMA_SetConfig+0x15c>
 80014b4:	3518      	adds	r5, #24
 80014b6:	42ac      	cmp	r4, r5
 80014b8:	d040      	beq.n	800153c <DMA_SetConfig+0x15c>
 80014ba:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80014be:	42ac      	cmp	r4, r5
 80014c0:	d03c      	beq.n	800153c <DMA_SetConfig+0x15c>
 80014c2:	3518      	adds	r5, #24
 80014c4:	42ac      	cmp	r4, r5
 80014c6:	d039      	beq.n	800153c <DMA_SetConfig+0x15c>
 80014c8:	3518      	adds	r5, #24
 80014ca:	42ac      	cmp	r4, r5
 80014cc:	d036      	beq.n	800153c <DMA_SetConfig+0x15c>
 80014ce:	3518      	adds	r5, #24
 80014d0:	42ac      	cmp	r4, r5
 80014d2:	d033      	beq.n	800153c <DMA_SetConfig+0x15c>
 80014d4:	3518      	adds	r5, #24
 80014d6:	42ac      	cmp	r4, r5
 80014d8:	d030      	beq.n	800153c <DMA_SetConfig+0x15c>
 80014da:	3518      	adds	r5, #24
 80014dc:	42ac      	cmp	r4, r5
 80014de:	d02d      	beq.n	800153c <DMA_SetConfig+0x15c>
 80014e0:	3518      	adds	r5, #24
 80014e2:	42ac      	cmp	r4, r5
 80014e4:	d02a      	beq.n	800153c <DMA_SetConfig+0x15c>
 80014e6:	3518      	adds	r5, #24
 80014e8:	42ac      	cmp	r4, r5
 80014ea:	d027      	beq.n	800153c <DMA_SetConfig+0x15c>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80014ec:	4e25      	ldr	r6, [pc, #148]	; (8001584 <DMA_SetConfig+0x1a4>)
 80014ee:	4d26      	ldr	r5, [pc, #152]	; (8001588 <DMA_SetConfig+0x1a8>)
 80014f0:	42ac      	cmp	r4, r5
 80014f2:	bf18      	it	ne
 80014f4:	42b4      	cmpne	r4, r6
 80014f6:	d011      	beq.n	800151c <DMA_SetConfig+0x13c>
 80014f8:	4d24      	ldr	r5, [pc, #144]	; (800158c <DMA_SetConfig+0x1ac>)
 80014fa:	42ac      	cmp	r4, r5
 80014fc:	d00e      	beq.n	800151c <DMA_SetConfig+0x13c>
 80014fe:	3514      	adds	r5, #20
 8001500:	42ac      	cmp	r4, r5
 8001502:	d00b      	beq.n	800151c <DMA_SetConfig+0x13c>
 8001504:	3514      	adds	r5, #20
 8001506:	42ac      	cmp	r4, r5
 8001508:	d008      	beq.n	800151c <DMA_SetConfig+0x13c>
 800150a:	3514      	adds	r5, #20
 800150c:	42ac      	cmp	r4, r5
 800150e:	d005      	beq.n	800151c <DMA_SetConfig+0x13c>
 8001510:	3514      	adds	r5, #20
 8001512:	42ac      	cmp	r4, r5
 8001514:	d002      	beq.n	800151c <DMA_SetConfig+0x13c>
 8001516:	3514      	adds	r5, #20
 8001518:	42ac      	cmp	r4, r5
 800151a:	d123      	bne.n	8001564 <DMA_SetConfig+0x184>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800151c:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 800151e:	f004 051f 	and.w	r5, r4, #31
 8001522:	2401      	movs	r4, #1
 8001524:	40ac      	lsls	r4, r5
 8001526:	607c      	str	r4, [r7, #4]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8001528:	6804      	ldr	r4, [r0, #0]
 800152a:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800152c:	6883      	ldr	r3, [r0, #8]
 800152e:	2b40      	cmp	r3, #64	; 0x40
 8001530:	d01f      	beq.n	8001572 <DMA_SetConfig+0x192>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8001532:	6803      	ldr	r3, [r0, #0]
 8001534:	6099      	str	r1, [r3, #8]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8001536:	6803      	ldr	r3, [r0, #0]
 8001538:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800153a:	e013      	b.n	8001564 <DMA_SetConfig+0x184>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800153c:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 800153e:	f004 051f 	and.w	r5, r4, #31
 8001542:	243f      	movs	r4, #63	; 0x3f
 8001544:	40ac      	lsls	r4, r5
 8001546:	60bc      	str	r4, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001548:	6805      	ldr	r5, [r0, #0]
 800154a:	682c      	ldr	r4, [r5, #0]
 800154c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001550:	602c      	str	r4, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8001552:	6804      	ldr	r4, [r0, #0]
 8001554:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001556:	6883      	ldr	r3, [r0, #8]
 8001558:	2b40      	cmp	r3, #64	; 0x40
 800155a:	d005      	beq.n	8001568 <DMA_SetConfig+0x188>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800155c:	6803      	ldr	r3, [r0, #0]
 800155e:	6099      	str	r1, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8001560:	6803      	ldr	r3, [r0, #0]
 8001562:	60da      	str	r2, [r3, #12]
}
 8001564:	bcf0      	pop	{r4, r5, r6, r7}
 8001566:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8001568:	6803      	ldr	r3, [r0, #0]
 800156a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800156c:	6803      	ldr	r3, [r0, #0]
 800156e:	60d9      	str	r1, [r3, #12]
 8001570:	e7f8      	b.n	8001564 <DMA_SetConfig+0x184>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8001572:	6803      	ldr	r3, [r0, #0]
 8001574:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8001576:	6803      	ldr	r3, [r0, #0]
 8001578:	60d9      	str	r1, [r3, #12]
 800157a:	e7f3      	b.n	8001564 <DMA_SetConfig+0x184>
 800157c:	40020010 	.word	0x40020010
 8001580:	40020028 	.word	0x40020028
 8001584:	58025408 	.word	0x58025408
 8001588:	5802541c 	.word	0x5802541c
 800158c:	58025430 	.word	0x58025430

08001590 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001590:	6802      	ldr	r2, [r0, #0]
 8001592:	4928      	ldr	r1, [pc, #160]	; (8001634 <DMA_CalcBaseAndBitshift+0xa4>)
 8001594:	4b28      	ldr	r3, [pc, #160]	; (8001638 <DMA_CalcBaseAndBitshift+0xa8>)
 8001596:	429a      	cmp	r2, r3
 8001598:	bf18      	it	ne
 800159a:	428a      	cmpne	r2, r1
 800159c:	d02f      	beq.n	80015fe <DMA_CalcBaseAndBitshift+0x6e>
 800159e:	3318      	adds	r3, #24
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d02c      	beq.n	80015fe <DMA_CalcBaseAndBitshift+0x6e>
 80015a4:	3318      	adds	r3, #24
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d029      	beq.n	80015fe <DMA_CalcBaseAndBitshift+0x6e>
 80015aa:	3318      	adds	r3, #24
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d026      	beq.n	80015fe <DMA_CalcBaseAndBitshift+0x6e>
 80015b0:	3318      	adds	r3, #24
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d023      	beq.n	80015fe <DMA_CalcBaseAndBitshift+0x6e>
 80015b6:	3318      	adds	r3, #24
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d020      	beq.n	80015fe <DMA_CalcBaseAndBitshift+0x6e>
 80015bc:	3318      	adds	r3, #24
 80015be:	429a      	cmp	r2, r3
 80015c0:	d01d      	beq.n	80015fe <DMA_CalcBaseAndBitshift+0x6e>
 80015c2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d019      	beq.n	80015fe <DMA_CalcBaseAndBitshift+0x6e>
 80015ca:	3318      	adds	r3, #24
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d016      	beq.n	80015fe <DMA_CalcBaseAndBitshift+0x6e>
 80015d0:	3318      	adds	r3, #24
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d013      	beq.n	80015fe <DMA_CalcBaseAndBitshift+0x6e>
 80015d6:	3318      	adds	r3, #24
 80015d8:	429a      	cmp	r2, r3
 80015da:	d010      	beq.n	80015fe <DMA_CalcBaseAndBitshift+0x6e>
 80015dc:	3318      	adds	r3, #24
 80015de:	429a      	cmp	r2, r3
 80015e0:	d00d      	beq.n	80015fe <DMA_CalcBaseAndBitshift+0x6e>
 80015e2:	3318      	adds	r3, #24
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d00a      	beq.n	80015fe <DMA_CalcBaseAndBitshift+0x6e>
 80015e8:	3318      	adds	r3, #24
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d007      	beq.n	80015fe <DMA_CalcBaseAndBitshift+0x6e>
 80015ee:	3318      	adds	r3, #24
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d004      	beq.n	80015fe <DMA_CalcBaseAndBitshift+0x6e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80015f4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015f8:	6582      	str	r2, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 80015fa:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80015fc:	4770      	bx	lr
{
 80015fe:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001600:	b2d3      	uxtb	r3, r2
 8001602:	3b10      	subs	r3, #16
 8001604:	490d      	ldr	r1, [pc, #52]	; (800163c <DMA_CalcBaseAndBitshift+0xac>)
 8001606:	fba1 1303 	umull	r1, r3, r1, r3
 800160a:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800160c:	f003 0107 	and.w	r1, r3, #7
 8001610:	4c0b      	ldr	r4, [pc, #44]	; (8001640 <DMA_CalcBaseAndBitshift+0xb0>)
 8001612:	5c61      	ldrb	r1, [r4, r1]
 8001614:	65c1      	str	r1, [r0, #92]	; 0x5c
    if (stream_number > 3U)
 8001616:	2b03      	cmp	r3, #3
 8001618:	d806      	bhi.n	8001628 <DMA_CalcBaseAndBitshift+0x98>
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800161a:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <DMA_CalcBaseAndBitshift+0xb4>)
 800161c:	4013      	ands	r3, r2
 800161e:	6583      	str	r3, [r0, #88]	; 0x58
}
 8001620:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001622:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001626:	4770      	bx	lr
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <DMA_CalcBaseAndBitshift+0xb4>)
 800162a:	4013      	ands	r3, r2
 800162c:	3304      	adds	r3, #4
 800162e:	6583      	str	r3, [r0, #88]	; 0x58
 8001630:	e7f6      	b.n	8001620 <DMA_CalcBaseAndBitshift+0x90>
 8001632:	bf00      	nop
 8001634:	40020010 	.word	0x40020010
 8001638:	40020028 	.word	0x40020028
 800163c:	aaaaaaab 	.word	0xaaaaaaab
 8001640:	0800dbd8 	.word	0x0800dbd8
 8001644:	fffffc00 	.word	0xfffffc00

08001648 <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001648:	6983      	ldr	r3, [r0, #24]
 800164a:	b99b      	cbnz	r3, 8001674 <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 800164c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800164e:	2b01      	cmp	r3, #1
 8001650:	d00a      	beq.n	8001668 <DMA_CheckFifoParam+0x20>
 8001652:	b11b      	cbz	r3, 800165c <DMA_CheckFifoParam+0x14>
 8001654:	2b02      	cmp	r3, #2
 8001656:	d001      	beq.n	800165c <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8001658:	2000      	movs	r0, #0
 800165a:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800165c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800165e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001662:	d12e      	bne.n	80016c2 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001664:	2000      	movs	r0, #0
 8001666:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001668:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800166a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800166e:	d02a      	beq.n	80016c6 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001670:	2000      	movs	r0, #0
 8001672:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001678:	d006      	beq.n	8001688 <DMA_CheckFifoParam+0x40>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800167a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800167c:	2b02      	cmp	r3, #2
 800167e:	d92a      	bls.n	80016d6 <DMA_CheckFifoParam+0x8e>
 8001680:	2b03      	cmp	r3, #3
 8001682:	d016      	beq.n	80016b2 <DMA_CheckFifoParam+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
 8001684:	2000      	movs	r0, #0
 8001686:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 8001688:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800168a:	2b03      	cmp	r3, #3
 800168c:	d803      	bhi.n	8001696 <DMA_CheckFifoParam+0x4e>
 800168e:	e8df f003 	tbb	[pc, r3]
 8001692:	041c      	.short	0x041c
 8001694:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8001696:	2000      	movs	r0, #0
 8001698:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800169a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800169c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80016a0:	d115      	bne.n	80016ce <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 80016a2:	2000      	movs	r0, #0
 80016a4:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016a6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80016a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016ac:	d011      	beq.n	80016d2 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 80016ae:	2000      	movs	r0, #0
 80016b0:	4770      	bx	lr
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80016b4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80016b8:	d001      	beq.n	80016be <DMA_CheckFifoParam+0x76>
        {
          status = HAL_ERROR;
 80016ba:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 80016bc:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 80016be:	2000      	movs	r0, #0
 80016c0:	4770      	bx	lr
          status = HAL_ERROR;
 80016c2:	2001      	movs	r0, #1
 80016c4:	4770      	bx	lr
          status = HAL_ERROR;
 80016c6:	2001      	movs	r0, #1
 80016c8:	4770      	bx	lr
        status = HAL_ERROR;
 80016ca:	2001      	movs	r0, #1
 80016cc:	4770      	bx	lr
          status = HAL_ERROR;
 80016ce:	2001      	movs	r0, #1
 80016d0:	4770      	bx	lr
          status = HAL_ERROR;
 80016d2:	2001      	movs	r0, #1
 80016d4:	4770      	bx	lr
        status = HAL_ERROR;
 80016d6:	2001      	movs	r0, #1
 80016d8:	4770      	bx	lr
	...

080016dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80016dc:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80016de:	4922      	ldr	r1, [pc, #136]	; (8001768 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80016e0:	4a22      	ldr	r2, [pc, #136]	; (800176c <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	bf18      	it	ne
 80016e6:	428b      	cmpne	r3, r1
 80016e8:	d028      	beq.n	800173c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 80016ea:	3214      	adds	r2, #20
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d025      	beq.n	800173c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 80016f0:	3214      	adds	r2, #20
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d022      	beq.n	800173c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 80016f6:	3214      	adds	r2, #20
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d01f      	beq.n	800173c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 80016fc:	3214      	adds	r2, #20
 80016fe:	4293      	cmp	r3, r2
 8001700:	d01c      	beq.n	800173c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001702:	3214      	adds	r2, #20
 8001704:	4293      	cmp	r3, r2
 8001706:	d019      	beq.n	800173c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001708:	3214      	adds	r2, #20
 800170a:	4293      	cmp	r3, r2
 800170c:	d016      	beq.n	800173c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800170e:	b2da      	uxtb	r2, r3
 8001710:	3a10      	subs	r2, #16
 8001712:	4917      	ldr	r1, [pc, #92]	; (8001770 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
 8001714:	fba1 1202 	umull	r1, r2, r1, r2
 8001718:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800171a:	4916      	ldr	r1, [pc, #88]	; (8001774 <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
 800171c:	4419      	add	r1, r3
 800171e:	29a8      	cmp	r1, #168	; 0xa8
 8001720:	d91f      	bls.n	8001762 <DMA_CalcDMAMUXChannelBaseAndMask+0x86>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
 8001724:	4413      	add	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	6603      	str	r3, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 800172c:	6643      	str	r3, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800172e:	f002 021f 	and.w	r2, r2, #31
 8001732:	2301      	movs	r3, #1
 8001734:	fa03 f202 	lsl.w	r2, r3, r2
 8001738:	6682      	str	r2, [r0, #104]	; 0x68
  }
}
 800173a:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800173c:	b2db      	uxtb	r3, r3
 800173e:	3b08      	subs	r3, #8
 8001740:	4a0f      	ldr	r2, [pc, #60]	; (8001780 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 8001742:	fba2 2303 	umull	r2, r3, r2, r3
 8001746:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001748:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 800174a:	441a      	add	r2, r3
 800174c:	0092      	lsls	r2, r2, #2
 800174e:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001750:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8001752:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001754:	f003 031f 	and.w	r3, r3, #31
 8001758:	2201      	movs	r2, #1
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	6683      	str	r3, [r0, #104]	; 0x68
 8001760:	4770      	bx	lr
      stream_number += 8U;
 8001762:	3208      	adds	r2, #8
 8001764:	e7dd      	b.n	8001722 <DMA_CalcDMAMUXChannelBaseAndMask+0x46>
 8001766:	bf00      	nop
 8001768:	58025408 	.word	0x58025408
 800176c:	5802541c 	.word	0x5802541c
 8001770:	aaaaaaab 	.word	0xaaaaaaab
 8001774:	bffdfbf0 	.word	0xbffdfbf0
 8001778:	10008200 	.word	0x10008200
 800177c:	40020880 	.word	0x40020880
 8001780:	cccccccd 	.word	0xcccccccd
 8001784:	16009600 	.word	0x16009600
 8001788:	58025880 	.word	0x58025880

0800178c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800178c:	7901      	ldrb	r1, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800178e:	1e4a      	subs	r2, r1, #1
 8001790:	2a07      	cmp	r2, #7
 8001792:	d82c      	bhi.n	80017ee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x62>
{
 8001794:	b430      	push	{r4, r5}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001796:	6803      	ldr	r3, [r0, #0]
 8001798:	4d15      	ldr	r5, [pc, #84]	; (80017f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 800179a:	4c16      	ldr	r4, [pc, #88]	; (80017f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 800179c:	42a3      	cmp	r3, r4
 800179e:	bf18      	it	ne
 80017a0:	42ab      	cmpne	r3, r5
 80017a2:	d018      	beq.n	80017d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80017a4:	3414      	adds	r4, #20
 80017a6:	42a3      	cmp	r3, r4
 80017a8:	d015      	beq.n	80017d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80017aa:	3414      	adds	r4, #20
 80017ac:	42a3      	cmp	r3, r4
 80017ae:	d012      	beq.n	80017d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80017b0:	3414      	adds	r4, #20
 80017b2:	42a3      	cmp	r3, r4
 80017b4:	d00f      	beq.n	80017d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80017b6:	3414      	adds	r4, #20
 80017b8:	42a3      	cmp	r3, r4
 80017ba:	d00c      	beq.n	80017d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80017bc:	3414      	adds	r4, #20
 80017be:	42a3      	cmp	r3, r4
 80017c0:	d009      	beq.n	80017d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80017c2:	3414      	adds	r4, #20
 80017c4:	42a3      	cmp	r3, r4
 80017c6:	d006      	beq.n	80017d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 80017ca:	440b      	add	r3, r1
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80017d0:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>)
 80017d2:	6703      	str	r3, [r0, #112]	; 0x70
 80017d4:	e005      	b.n	80017e2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x56>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 80017d8:	440b      	add	r3, r1
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
 80017e0:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80017e2:	2301      	movs	r3, #1
 80017e4:	fa03 f202 	lsl.w	r2, r3, r2
 80017e8:	6742      	str	r2, [r0, #116]	; 0x74
  }
}
 80017ea:	bc30      	pop	{r4, r5}
 80017ec:	4770      	bx	lr
 80017ee:	4770      	bx	lr
 80017f0:	58025408 	.word	0x58025408
 80017f4:	5802541c 	.word	0x5802541c
 80017f8:	1000823f 	.word	0x1000823f
 80017fc:	40020940 	.word	0x40020940
 8001800:	1600963f 	.word	0x1600963f
 8001804:	58025940 	.word	0x58025940

08001808 <HAL_DMA_Init>:
{
 8001808:	b570      	push	{r4, r5, r6, lr}
 800180a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800180c:	f7fe fdc4 	bl	8000398 <HAL_GetTick>
  if(hdma == NULL)
 8001810:	2c00      	cmp	r4, #0
 8001812:	f000 81bd 	beq.w	8001b90 <HAL_DMA_Init+0x388>
 8001816:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001818:	6823      	ldr	r3, [r4, #0]
 800181a:	49b7      	ldr	r1, [pc, #732]	; (8001af8 <HAL_DMA_Init+0x2f0>)
 800181c:	4ab7      	ldr	r2, [pc, #732]	; (8001afc <HAL_DMA_Init+0x2f4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	bf18      	it	ne
 8001822:	428b      	cmpne	r3, r1
 8001824:	bf0c      	ite	eq
 8001826:	2201      	moveq	r2, #1
 8001828:	2200      	movne	r2, #0
 800182a:	d050      	beq.n	80018ce <HAL_DMA_Init+0xc6>
 800182c:	3130      	adds	r1, #48	; 0x30
 800182e:	428b      	cmp	r3, r1
 8001830:	d04d      	beq.n	80018ce <HAL_DMA_Init+0xc6>
 8001832:	3118      	adds	r1, #24
 8001834:	428b      	cmp	r3, r1
 8001836:	d04a      	beq.n	80018ce <HAL_DMA_Init+0xc6>
 8001838:	3118      	adds	r1, #24
 800183a:	428b      	cmp	r3, r1
 800183c:	d047      	beq.n	80018ce <HAL_DMA_Init+0xc6>
 800183e:	3118      	adds	r1, #24
 8001840:	428b      	cmp	r3, r1
 8001842:	d044      	beq.n	80018ce <HAL_DMA_Init+0xc6>
 8001844:	3118      	adds	r1, #24
 8001846:	428b      	cmp	r3, r1
 8001848:	d041      	beq.n	80018ce <HAL_DMA_Init+0xc6>
 800184a:	3118      	adds	r1, #24
 800184c:	428b      	cmp	r3, r1
 800184e:	d03e      	beq.n	80018ce <HAL_DMA_Init+0xc6>
 8001850:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8001854:	428b      	cmp	r3, r1
 8001856:	d03a      	beq.n	80018ce <HAL_DMA_Init+0xc6>
 8001858:	3118      	adds	r1, #24
 800185a:	428b      	cmp	r3, r1
 800185c:	d037      	beq.n	80018ce <HAL_DMA_Init+0xc6>
 800185e:	3118      	adds	r1, #24
 8001860:	428b      	cmp	r3, r1
 8001862:	d034      	beq.n	80018ce <HAL_DMA_Init+0xc6>
 8001864:	3118      	adds	r1, #24
 8001866:	428b      	cmp	r3, r1
 8001868:	d031      	beq.n	80018ce <HAL_DMA_Init+0xc6>
 800186a:	3118      	adds	r1, #24
 800186c:	428b      	cmp	r3, r1
 800186e:	d02e      	beq.n	80018ce <HAL_DMA_Init+0xc6>
 8001870:	3118      	adds	r1, #24
 8001872:	428b      	cmp	r3, r1
 8001874:	d02b      	beq.n	80018ce <HAL_DMA_Init+0xc6>
 8001876:	3118      	adds	r1, #24
 8001878:	428b      	cmp	r3, r1
 800187a:	d028      	beq.n	80018ce <HAL_DMA_Init+0xc6>
 800187c:	3118      	adds	r1, #24
 800187e:	428b      	cmp	r3, r1
 8001880:	d025      	beq.n	80018ce <HAL_DMA_Init+0xc6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001882:	499f      	ldr	r1, [pc, #636]	; (8001b00 <HAL_DMA_Init+0x2f8>)
 8001884:	4a9f      	ldr	r2, [pc, #636]	; (8001b04 <HAL_DMA_Init+0x2fc>)
 8001886:	4293      	cmp	r3, r2
 8001888:	bf18      	it	ne
 800188a:	428b      	cmpne	r3, r1
 800188c:	f000 8124 	beq.w	8001ad8 <HAL_DMA_Init+0x2d0>
 8001890:	4a9d      	ldr	r2, [pc, #628]	; (8001b08 <HAL_DMA_Init+0x300>)
 8001892:	4293      	cmp	r3, r2
 8001894:	f000 8120 	beq.w	8001ad8 <HAL_DMA_Init+0x2d0>
 8001898:	3214      	adds	r2, #20
 800189a:	4293      	cmp	r3, r2
 800189c:	f000 811c 	beq.w	8001ad8 <HAL_DMA_Init+0x2d0>
 80018a0:	3214      	adds	r2, #20
 80018a2:	4293      	cmp	r3, r2
 80018a4:	f000 8118 	beq.w	8001ad8 <HAL_DMA_Init+0x2d0>
 80018a8:	3214      	adds	r2, #20
 80018aa:	4293      	cmp	r3, r2
 80018ac:	f000 8114 	beq.w	8001ad8 <HAL_DMA_Init+0x2d0>
 80018b0:	3214      	adds	r2, #20
 80018b2:	4293      	cmp	r3, r2
 80018b4:	f000 8110 	beq.w	8001ad8 <HAL_DMA_Init+0x2d0>
 80018b8:	3214      	adds	r2, #20
 80018ba:	4293      	cmp	r3, r2
 80018bc:	f000 810c 	beq.w	8001ad8 <HAL_DMA_Init+0x2d0>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018c0:	2340      	movs	r3, #64	; 0x40
 80018c2:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80018c4:	2303      	movs	r3, #3
 80018c6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 80018ca:	2001      	movs	r0, #1
 80018cc:	e04a      	b.n	8001964 <HAL_DMA_Init+0x15c>
    __HAL_UNLOCK(hdma);
 80018ce:	2100      	movs	r1, #0
 80018d0:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 80018d4:	2102      	movs	r1, #2
 80018d6:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80018da:	bb7a      	cbnz	r2, 800193c <HAL_DMA_Init+0x134>
 80018dc:	4a8b      	ldr	r2, [pc, #556]	; (8001b0c <HAL_DMA_Init+0x304>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d02c      	beq.n	800193c <HAL_DMA_Init+0x134>
 80018e2:	3218      	adds	r2, #24
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d029      	beq.n	800193c <HAL_DMA_Init+0x134>
 80018e8:	3218      	adds	r2, #24
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d026      	beq.n	800193c <HAL_DMA_Init+0x134>
 80018ee:	3218      	adds	r2, #24
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d023      	beq.n	800193c <HAL_DMA_Init+0x134>
 80018f4:	3218      	adds	r2, #24
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d020      	beq.n	800193c <HAL_DMA_Init+0x134>
 80018fa:	3218      	adds	r2, #24
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d01d      	beq.n	800193c <HAL_DMA_Init+0x134>
 8001900:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001904:	4293      	cmp	r3, r2
 8001906:	d019      	beq.n	800193c <HAL_DMA_Init+0x134>
 8001908:	3218      	adds	r2, #24
 800190a:	4293      	cmp	r3, r2
 800190c:	d016      	beq.n	800193c <HAL_DMA_Init+0x134>
 800190e:	3218      	adds	r2, #24
 8001910:	4293      	cmp	r3, r2
 8001912:	d013      	beq.n	800193c <HAL_DMA_Init+0x134>
 8001914:	3218      	adds	r2, #24
 8001916:	4293      	cmp	r3, r2
 8001918:	d010      	beq.n	800193c <HAL_DMA_Init+0x134>
 800191a:	3218      	adds	r2, #24
 800191c:	4293      	cmp	r3, r2
 800191e:	d00d      	beq.n	800193c <HAL_DMA_Init+0x134>
 8001920:	3218      	adds	r2, #24
 8001922:	4293      	cmp	r3, r2
 8001924:	d00a      	beq.n	800193c <HAL_DMA_Init+0x134>
 8001926:	3218      	adds	r2, #24
 8001928:	4293      	cmp	r3, r2
 800192a:	d007      	beq.n	800193c <HAL_DMA_Init+0x134>
 800192c:	3218      	adds	r2, #24
 800192e:	4293      	cmp	r3, r2
 8001930:	d004      	beq.n	800193c <HAL_DMA_Init+0x134>
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	f022 0201 	bic.w	r2, r2, #1
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	e003      	b.n	8001944 <HAL_DMA_Init+0x13c>
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	f022 0201 	bic.w	r2, r2, #1
 8001942:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001944:	6823      	ldr	r3, [r4, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	f012 0f01 	tst.w	r2, #1
 800194c:	d00b      	beq.n	8001966 <HAL_DMA_Init+0x15e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800194e:	f7fe fd23 	bl	8000398 <HAL_GetTick>
 8001952:	1b40      	subs	r0, r0, r5
 8001954:	2805      	cmp	r0, #5
 8001956:	d9f5      	bls.n	8001944 <HAL_DMA_Init+0x13c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001958:	2320      	movs	r3, #32
 800195a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800195c:	2303      	movs	r3, #3
 800195e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 8001962:	2001      	movs	r0, #1
}
 8001964:	bd70      	pop	{r4, r5, r6, pc}
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001966:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001968:	4869      	ldr	r0, [pc, #420]	; (8001b10 <HAL_DMA_Init+0x308>)
 800196a:	4010      	ands	r0, r2
    registerValue |=  hdma->Init.Direction           |
 800196c:	68a1      	ldr	r1, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800196e:	68e2      	ldr	r2, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 8001970:	430a      	orrs	r2, r1
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001972:	6921      	ldr	r1, [r4, #16]
 8001974:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001976:	6961      	ldr	r1, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001978:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800197a:	69a1      	ldr	r1, [r4, #24]
 800197c:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 800197e:	69e1      	ldr	r1, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001980:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8001982:	6a21      	ldr	r1, [r4, #32]
 8001984:	430a      	orrs	r2, r1
    registerValue |=  hdma->Init.Direction           |
 8001986:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001988:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800198a:	2904      	cmp	r1, #4
 800198c:	f000 8099 	beq.w	8001ac2 <HAL_DMA_Init+0x2ba>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001990:	4960      	ldr	r1, [pc, #384]	; (8001b14 <HAL_DMA_Init+0x30c>)
 8001992:	6808      	ldr	r0, [r1, #0]
 8001994:	4960      	ldr	r1, [pc, #384]	; (8001b18 <HAL_DMA_Init+0x310>)
 8001996:	4001      	ands	r1, r0
 8001998:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800199c:	d311      	bcc.n	80019c2 <HAL_DMA_Init+0x1ba>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800199e:	6861      	ldr	r1, [r4, #4]
 80019a0:	f1a1 0529 	sub.w	r5, r1, #41	; 0x29
 80019a4:	f1a1 003f 	sub.w	r0, r1, #63	; 0x3f
 80019a8:	2803      	cmp	r0, #3
 80019aa:	bf88      	it	hi
 80019ac:	2d05      	cmphi	r5, #5
 80019ae:	d906      	bls.n	80019be <HAL_DMA_Init+0x1b6>
 80019b0:	f1a1 0047 	sub.w	r0, r1, #71	; 0x47
 80019b4:	2801      	cmp	r0, #1
 80019b6:	d902      	bls.n	80019be <HAL_DMA_Init+0x1b6>
 80019b8:	394f      	subs	r1, #79	; 0x4f
 80019ba:	2903      	cmp	r1, #3
 80019bc:	d801      	bhi.n	80019c2 <HAL_DMA_Init+0x1ba>
        registerValue |= DMA_SxCR_TRBUFF;
 80019be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80019c2:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80019c4:	6826      	ldr	r6, [r4, #0]
 80019c6:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019c8:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 80019cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019ce:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d108      	bne.n	80019e6 <HAL_DMA_Init+0x1de>
      registerValue |= hdma->Init.FIFOThreshold;
 80019d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80019d6:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80019da:	b123      	cbz	r3, 80019e6 <HAL_DMA_Init+0x1de>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019dc:	4620      	mov	r0, r4
 80019de:	f7ff fe33 	bl	8001648 <DMA_CheckFifoParam>
 80019e2:	2800      	cmp	r0, #0
 80019e4:	d172      	bne.n	8001acc <HAL_DMA_Init+0x2c4>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80019e6:	6175      	str	r5, [r6, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019e8:	4620      	mov	r0, r4
 80019ea:	f7ff fdd1 	bl	8001590 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80019ee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80019f0:	f003 021f 	and.w	r2, r3, #31
 80019f4:	233f      	movs	r3, #63	; 0x3f
 80019f6:	4093      	lsls	r3, r2
 80019f8:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019fa:	6823      	ldr	r3, [r4, #0]
 80019fc:	493e      	ldr	r1, [pc, #248]	; (8001af8 <HAL_DMA_Init+0x2f0>)
 80019fe:	4a3f      	ldr	r2, [pc, #252]	; (8001afc <HAL_DMA_Init+0x2f4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	bf18      	it	ne
 8001a04:	428b      	cmpne	r3, r1
 8001a06:	d042      	beq.n	8001a8e <HAL_DMA_Init+0x286>
 8001a08:	3218      	adds	r2, #24
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d03f      	beq.n	8001a8e <HAL_DMA_Init+0x286>
 8001a0e:	3218      	adds	r2, #24
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d03c      	beq.n	8001a8e <HAL_DMA_Init+0x286>
 8001a14:	3218      	adds	r2, #24
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d039      	beq.n	8001a8e <HAL_DMA_Init+0x286>
 8001a1a:	3218      	adds	r2, #24
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d036      	beq.n	8001a8e <HAL_DMA_Init+0x286>
 8001a20:	3218      	adds	r2, #24
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d033      	beq.n	8001a8e <HAL_DMA_Init+0x286>
 8001a26:	3218      	adds	r2, #24
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d030      	beq.n	8001a8e <HAL_DMA_Init+0x286>
 8001a2c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d02c      	beq.n	8001a8e <HAL_DMA_Init+0x286>
 8001a34:	3218      	adds	r2, #24
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d029      	beq.n	8001a8e <HAL_DMA_Init+0x286>
 8001a3a:	3218      	adds	r2, #24
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d026      	beq.n	8001a8e <HAL_DMA_Init+0x286>
 8001a40:	3218      	adds	r2, #24
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d023      	beq.n	8001a8e <HAL_DMA_Init+0x286>
 8001a46:	3218      	adds	r2, #24
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d020      	beq.n	8001a8e <HAL_DMA_Init+0x286>
 8001a4c:	3218      	adds	r2, #24
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d01d      	beq.n	8001a8e <HAL_DMA_Init+0x286>
 8001a52:	3218      	adds	r2, #24
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d01a      	beq.n	8001a8e <HAL_DMA_Init+0x286>
 8001a58:	3218      	adds	r2, #24
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d017      	beq.n	8001a8e <HAL_DMA_Init+0x286>
 8001a5e:	4a28      	ldr	r2, [pc, #160]	; (8001b00 <HAL_DMA_Init+0x2f8>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d014      	beq.n	8001a8e <HAL_DMA_Init+0x286>
 8001a64:	3214      	adds	r2, #20
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d011      	beq.n	8001a8e <HAL_DMA_Init+0x286>
 8001a6a:	3214      	adds	r2, #20
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d00e      	beq.n	8001a8e <HAL_DMA_Init+0x286>
 8001a70:	3214      	adds	r2, #20
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d00b      	beq.n	8001a8e <HAL_DMA_Init+0x286>
 8001a76:	3214      	adds	r2, #20
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d008      	beq.n	8001a8e <HAL_DMA_Init+0x286>
 8001a7c:	3214      	adds	r2, #20
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d005      	beq.n	8001a8e <HAL_DMA_Init+0x286>
 8001a82:	3214      	adds	r2, #20
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d002      	beq.n	8001a8e <HAL_DMA_Init+0x286>
 8001a88:	3214      	adds	r2, #20
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d113      	bne.n	8001ab6 <HAL_DMA_Init+0x2ae>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a8e:	4620      	mov	r0, r4
 8001a90:	f7ff fe24 	bl	80016dc <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a94:	68a3      	ldr	r3, [r4, #8]
 8001a96:	2b80      	cmp	r3, #128	; 0x80
 8001a98:	d06d      	beq.n	8001b76 <HAL_DMA_Init+0x36e>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a9a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001a9c:	7922      	ldrb	r2, [r4, #4]
 8001a9e:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001aa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001aa2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8001aa4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001aa6:	6863      	ldr	r3, [r4, #4]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	2b07      	cmp	r3, #7
 8001aac:	d966      	bls.n	8001b7c <HAL_DMA_Init+0x374>
      hdma->DMAmuxRequestGen = 0U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	66e3      	str	r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001ab2:	6723      	str	r3, [r4, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ab4:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001aba:	2301      	movs	r3, #1
 8001abc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001ac0:	e750      	b.n	8001964 <HAL_DMA_Init+0x15c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ac2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001ac4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001ac6:	4301      	orrs	r1, r0
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	e761      	b.n	8001990 <HAL_DMA_Init+0x188>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001acc:	2340      	movs	r3, #64	; 0x40
 8001ace:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          return HAL_ERROR;
 8001ad6:	e745      	b.n	8001964 <HAL_DMA_Init+0x15c>
    __HAL_UNLOCK(hdma);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ade:	2202      	movs	r2, #2
 8001ae0:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001ae4:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001ae6:	490d      	ldr	r1, [pc, #52]	; (8001b1c <HAL_DMA_Init+0x314>)
 8001ae8:	4011      	ands	r1, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001aea:	68a2      	ldr	r2, [r4, #8]
 8001aec:	2a40      	cmp	r2, #64	; 0x40
 8001aee:	d01a      	beq.n	8001b26 <HAL_DMA_Init+0x31e>
 8001af0:	2a80      	cmp	r2, #128	; 0x80
 8001af2:	d015      	beq.n	8001b20 <HAL_DMA_Init+0x318>
 8001af4:	2200      	movs	r2, #0
 8001af6:	e017      	b.n	8001b28 <HAL_DMA_Init+0x320>
 8001af8:	40020010 	.word	0x40020010
 8001afc:	40020028 	.word	0x40020028
 8001b00:	58025408 	.word	0x58025408
 8001b04:	5802541c 	.word	0x5802541c
 8001b08:	58025430 	.word	0x58025430
 8001b0c:	40020040 	.word	0x40020040
 8001b10:	fe10803f 	.word	0xfe10803f
 8001b14:	5c001000 	.word	0x5c001000
 8001b18:	ffff0000 	.word	0xffff0000
 8001b1c:	fffe000f 	.word	0xfffe000f
 8001b20:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b24:	e000      	b.n	8001b28 <HAL_DMA_Init+0x320>
 8001b26:	2210      	movs	r2, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b28:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b2a:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b2e:	6920      	ldr	r0, [r4, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b30:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b34:	6960      	ldr	r0, [r4, #20]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b36:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b3a:	69a0      	ldr	r0, [r4, #24]
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b3c:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b40:	69e0      	ldr	r0, [r4, #28]
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b42:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001b46:	6a20      	ldr	r0, [r4, #32]
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b48:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b4c:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001b4e:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001b50:	6822      	ldr	r2, [r4, #0]
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <HAL_DMA_Init+0x38c>)
 8001b54:	4413      	add	r3, r2
 8001b56:	4a10      	ldr	r2, [pc, #64]	; (8001b98 <HAL_DMA_Init+0x390>)
 8001b58:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b62:	4620      	mov	r0, r4
 8001b64:	f7ff fd14 	bl	8001590 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b68:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001b6a:	f003 021f 	and.w	r2, r3, #31
 8001b6e:	2301      	movs	r3, #1
 8001b70:	4093      	lsls	r3, r2
 8001b72:	6043      	str	r3, [r0, #4]
 8001b74:	e741      	b.n	80019fa <HAL_DMA_Init+0x1f2>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b76:	2300      	movs	r3, #0
 8001b78:	6063      	str	r3, [r4, #4]
 8001b7a:	e78e      	b.n	8001a9a <HAL_DMA_Init+0x292>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	f7ff fe05 	bl	800178c <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b82:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b88:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001b8a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	e792      	b.n	8001ab6 <HAL_DMA_Init+0x2ae>
    return HAL_ERROR;
 8001b90:	2001      	movs	r0, #1
 8001b92:	e6e7      	b.n	8001964 <HAL_DMA_Init+0x15c>
 8001b94:	a7fdabf8 	.word	0xa7fdabf8
 8001b98:	cccccccd 	.word	0xcccccccd

08001b9c <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8001b9c:	2800      	cmp	r0, #0
 8001b9e:	f000 813e 	beq.w	8001e1e <HAL_DMA_Start_IT+0x282>
{
 8001ba2:	b570      	push	{r4, r5, r6, lr}
 8001ba4:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001ba6:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001baa:	2801      	cmp	r0, #1
 8001bac:	f000 8139 	beq.w	8001e22 <HAL_DMA_Start_IT+0x286>
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bb6:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8001bba:	b2c0      	uxtb	r0, r0
 8001bbc:	2801      	cmp	r0, #1
 8001bbe:	d007      	beq.n	8001bd0 <HAL_DMA_Start_IT+0x34>
    __HAL_UNLOCK(hdma);
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001bc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bca:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 8001bcc:	2001      	movs	r0, #1
}
 8001bce:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bd0:	2002      	movs	r0, #2
 8001bd2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8001bda:	6820      	ldr	r0, [r4, #0]
 8001bdc:	4e92      	ldr	r6, [pc, #584]	; (8001e28 <HAL_DMA_Start_IT+0x28c>)
 8001bde:	4d93      	ldr	r5, [pc, #588]	; (8001e2c <HAL_DMA_Start_IT+0x290>)
 8001be0:	42a8      	cmp	r0, r5
 8001be2:	bf18      	it	ne
 8001be4:	42b0      	cmpne	r0, r6
 8001be6:	d02f      	beq.n	8001c48 <HAL_DMA_Start_IT+0xac>
 8001be8:	3518      	adds	r5, #24
 8001bea:	42a8      	cmp	r0, r5
 8001bec:	d02c      	beq.n	8001c48 <HAL_DMA_Start_IT+0xac>
 8001bee:	3518      	adds	r5, #24
 8001bf0:	42a8      	cmp	r0, r5
 8001bf2:	d029      	beq.n	8001c48 <HAL_DMA_Start_IT+0xac>
 8001bf4:	3518      	adds	r5, #24
 8001bf6:	42a8      	cmp	r0, r5
 8001bf8:	d026      	beq.n	8001c48 <HAL_DMA_Start_IT+0xac>
 8001bfa:	3518      	adds	r5, #24
 8001bfc:	42a8      	cmp	r0, r5
 8001bfe:	d023      	beq.n	8001c48 <HAL_DMA_Start_IT+0xac>
 8001c00:	3518      	adds	r5, #24
 8001c02:	42a8      	cmp	r0, r5
 8001c04:	d020      	beq.n	8001c48 <HAL_DMA_Start_IT+0xac>
 8001c06:	3518      	adds	r5, #24
 8001c08:	42a8      	cmp	r0, r5
 8001c0a:	d01d      	beq.n	8001c48 <HAL_DMA_Start_IT+0xac>
 8001c0c:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8001c10:	42a8      	cmp	r0, r5
 8001c12:	d019      	beq.n	8001c48 <HAL_DMA_Start_IT+0xac>
 8001c14:	3518      	adds	r5, #24
 8001c16:	42a8      	cmp	r0, r5
 8001c18:	d016      	beq.n	8001c48 <HAL_DMA_Start_IT+0xac>
 8001c1a:	3518      	adds	r5, #24
 8001c1c:	42a8      	cmp	r0, r5
 8001c1e:	d013      	beq.n	8001c48 <HAL_DMA_Start_IT+0xac>
 8001c20:	3518      	adds	r5, #24
 8001c22:	42a8      	cmp	r0, r5
 8001c24:	d010      	beq.n	8001c48 <HAL_DMA_Start_IT+0xac>
 8001c26:	3518      	adds	r5, #24
 8001c28:	42a8      	cmp	r0, r5
 8001c2a:	d00d      	beq.n	8001c48 <HAL_DMA_Start_IT+0xac>
 8001c2c:	3518      	adds	r5, #24
 8001c2e:	42a8      	cmp	r0, r5
 8001c30:	d00a      	beq.n	8001c48 <HAL_DMA_Start_IT+0xac>
 8001c32:	3518      	adds	r5, #24
 8001c34:	42a8      	cmp	r0, r5
 8001c36:	d007      	beq.n	8001c48 <HAL_DMA_Start_IT+0xac>
 8001c38:	3518      	adds	r5, #24
 8001c3a:	42a8      	cmp	r0, r5
 8001c3c:	d004      	beq.n	8001c48 <HAL_DMA_Start_IT+0xac>
 8001c3e:	6805      	ldr	r5, [r0, #0]
 8001c40:	f025 0501 	bic.w	r5, r5, #1
 8001c44:	6005      	str	r5, [r0, #0]
 8001c46:	e003      	b.n	8001c50 <HAL_DMA_Start_IT+0xb4>
 8001c48:	6805      	ldr	r5, [r0, #0]
 8001c4a:	f025 0501 	bic.w	r5, r5, #1
 8001c4e:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c50:	4620      	mov	r0, r4
 8001c52:	f7ff fbc5 	bl	80013e0 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c56:	6823      	ldr	r3, [r4, #0]
 8001c58:	4973      	ldr	r1, [pc, #460]	; (8001e28 <HAL_DMA_Start_IT+0x28c>)
 8001c5a:	4a74      	ldr	r2, [pc, #464]	; (8001e2c <HAL_DMA_Start_IT+0x290>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	bf18      	it	ne
 8001c60:	428b      	cmpne	r3, r1
 8001c62:	d038      	beq.n	8001cd6 <HAL_DMA_Start_IT+0x13a>
 8001c64:	3218      	adds	r2, #24
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d035      	beq.n	8001cd6 <HAL_DMA_Start_IT+0x13a>
 8001c6a:	3218      	adds	r2, #24
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d032      	beq.n	8001cd6 <HAL_DMA_Start_IT+0x13a>
 8001c70:	3218      	adds	r2, #24
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d02f      	beq.n	8001cd6 <HAL_DMA_Start_IT+0x13a>
 8001c76:	3218      	adds	r2, #24
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d02c      	beq.n	8001cd6 <HAL_DMA_Start_IT+0x13a>
 8001c7c:	3218      	adds	r2, #24
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d029      	beq.n	8001cd6 <HAL_DMA_Start_IT+0x13a>
 8001c82:	3218      	adds	r2, #24
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d026      	beq.n	8001cd6 <HAL_DMA_Start_IT+0x13a>
 8001c88:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d022      	beq.n	8001cd6 <HAL_DMA_Start_IT+0x13a>
 8001c90:	3218      	adds	r2, #24
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d01f      	beq.n	8001cd6 <HAL_DMA_Start_IT+0x13a>
 8001c96:	3218      	adds	r2, #24
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d01c      	beq.n	8001cd6 <HAL_DMA_Start_IT+0x13a>
 8001c9c:	3218      	adds	r2, #24
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d019      	beq.n	8001cd6 <HAL_DMA_Start_IT+0x13a>
 8001ca2:	3218      	adds	r2, #24
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d016      	beq.n	8001cd6 <HAL_DMA_Start_IT+0x13a>
 8001ca8:	3218      	adds	r2, #24
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d013      	beq.n	8001cd6 <HAL_DMA_Start_IT+0x13a>
 8001cae:	3218      	adds	r2, #24
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d010      	beq.n	8001cd6 <HAL_DMA_Start_IT+0x13a>
 8001cb4:	3218      	adds	r2, #24
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d00d      	beq.n	8001cd6 <HAL_DMA_Start_IT+0x13a>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	f022 020e 	bic.w	r2, r2, #14
 8001cc0:	f042 020a 	orr.w	r2, r2, #10
 8001cc4:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001cc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cc8:	b193      	cbz	r3, 8001cf0 <HAL_DMA_Start_IT+0x154>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001cca:	6822      	ldr	r2, [r4, #0]
 8001ccc:	6813      	ldr	r3, [r2, #0]
 8001cce:	f043 0304 	orr.w	r3, r3, #4
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	e00c      	b.n	8001cf0 <HAL_DMA_Start_IT+0x154>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	f022 021e 	bic.w	r2, r2, #30
 8001cdc:	f042 0216 	orr.w	r2, r2, #22
 8001ce0:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001ce2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ce4:	b123      	cbz	r3, 8001cf0 <HAL_DMA_Start_IT+0x154>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001ce6:	6822      	ldr	r2, [r4, #0]
 8001ce8:	6813      	ldr	r3, [r2, #0]
 8001cea:	f043 0308 	orr.w	r3, r3, #8
 8001cee:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	494d      	ldr	r1, [pc, #308]	; (8001e28 <HAL_DMA_Start_IT+0x28c>)
 8001cf4:	4a4d      	ldr	r2, [pc, #308]	; (8001e2c <HAL_DMA_Start_IT+0x290>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	bf18      	it	ne
 8001cfa:	428b      	cmpne	r3, r1
 8001cfc:	d042      	beq.n	8001d84 <HAL_DMA_Start_IT+0x1e8>
 8001cfe:	3218      	adds	r2, #24
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d03f      	beq.n	8001d84 <HAL_DMA_Start_IT+0x1e8>
 8001d04:	3218      	adds	r2, #24
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d03c      	beq.n	8001d84 <HAL_DMA_Start_IT+0x1e8>
 8001d0a:	3218      	adds	r2, #24
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d039      	beq.n	8001d84 <HAL_DMA_Start_IT+0x1e8>
 8001d10:	3218      	adds	r2, #24
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d036      	beq.n	8001d84 <HAL_DMA_Start_IT+0x1e8>
 8001d16:	3218      	adds	r2, #24
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d033      	beq.n	8001d84 <HAL_DMA_Start_IT+0x1e8>
 8001d1c:	3218      	adds	r2, #24
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d030      	beq.n	8001d84 <HAL_DMA_Start_IT+0x1e8>
 8001d22:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d02c      	beq.n	8001d84 <HAL_DMA_Start_IT+0x1e8>
 8001d2a:	3218      	adds	r2, #24
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d029      	beq.n	8001d84 <HAL_DMA_Start_IT+0x1e8>
 8001d30:	3218      	adds	r2, #24
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d026      	beq.n	8001d84 <HAL_DMA_Start_IT+0x1e8>
 8001d36:	3218      	adds	r2, #24
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d023      	beq.n	8001d84 <HAL_DMA_Start_IT+0x1e8>
 8001d3c:	3218      	adds	r2, #24
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d020      	beq.n	8001d84 <HAL_DMA_Start_IT+0x1e8>
 8001d42:	3218      	adds	r2, #24
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d01d      	beq.n	8001d84 <HAL_DMA_Start_IT+0x1e8>
 8001d48:	3218      	adds	r2, #24
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d01a      	beq.n	8001d84 <HAL_DMA_Start_IT+0x1e8>
 8001d4e:	3218      	adds	r2, #24
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d017      	beq.n	8001d84 <HAL_DMA_Start_IT+0x1e8>
 8001d54:	4a36      	ldr	r2, [pc, #216]	; (8001e30 <HAL_DMA_Start_IT+0x294>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d014      	beq.n	8001d84 <HAL_DMA_Start_IT+0x1e8>
 8001d5a:	3214      	adds	r2, #20
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d011      	beq.n	8001d84 <HAL_DMA_Start_IT+0x1e8>
 8001d60:	3214      	adds	r2, #20
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d00e      	beq.n	8001d84 <HAL_DMA_Start_IT+0x1e8>
 8001d66:	3214      	adds	r2, #20
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d00b      	beq.n	8001d84 <HAL_DMA_Start_IT+0x1e8>
 8001d6c:	3214      	adds	r2, #20
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d008      	beq.n	8001d84 <HAL_DMA_Start_IT+0x1e8>
 8001d72:	3214      	adds	r2, #20
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d005      	beq.n	8001d84 <HAL_DMA_Start_IT+0x1e8>
 8001d78:	3214      	adds	r2, #20
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d002      	beq.n	8001d84 <HAL_DMA_Start_IT+0x1e8>
 8001d7e:	3214      	adds	r2, #20
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d10e      	bne.n	8001da2 <HAL_DMA_Start_IT+0x206>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001d84:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001d8c:	d003      	beq.n	8001d96 <HAL_DMA_Start_IT+0x1fa>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d94:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8001d96:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001d98:	b11b      	cbz	r3, 8001da2 <HAL_DMA_Start_IT+0x206>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001da0:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8001da2:	6823      	ldr	r3, [r4, #0]
 8001da4:	4920      	ldr	r1, [pc, #128]	; (8001e28 <HAL_DMA_Start_IT+0x28c>)
 8001da6:	4a21      	ldr	r2, [pc, #132]	; (8001e2c <HAL_DMA_Start_IT+0x290>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	bf18      	it	ne
 8001dac:	428b      	cmpne	r3, r1
 8001dae:	d030      	beq.n	8001e12 <HAL_DMA_Start_IT+0x276>
 8001db0:	3218      	adds	r2, #24
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d02d      	beq.n	8001e12 <HAL_DMA_Start_IT+0x276>
 8001db6:	3218      	adds	r2, #24
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d02a      	beq.n	8001e12 <HAL_DMA_Start_IT+0x276>
 8001dbc:	3218      	adds	r2, #24
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d027      	beq.n	8001e12 <HAL_DMA_Start_IT+0x276>
 8001dc2:	3218      	adds	r2, #24
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d024      	beq.n	8001e12 <HAL_DMA_Start_IT+0x276>
 8001dc8:	3218      	adds	r2, #24
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d021      	beq.n	8001e12 <HAL_DMA_Start_IT+0x276>
 8001dce:	3218      	adds	r2, #24
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d01e      	beq.n	8001e12 <HAL_DMA_Start_IT+0x276>
 8001dd4:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d01a      	beq.n	8001e12 <HAL_DMA_Start_IT+0x276>
 8001ddc:	3218      	adds	r2, #24
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d017      	beq.n	8001e12 <HAL_DMA_Start_IT+0x276>
 8001de2:	3218      	adds	r2, #24
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d014      	beq.n	8001e12 <HAL_DMA_Start_IT+0x276>
 8001de8:	3218      	adds	r2, #24
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d011      	beq.n	8001e12 <HAL_DMA_Start_IT+0x276>
 8001dee:	3218      	adds	r2, #24
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d00e      	beq.n	8001e12 <HAL_DMA_Start_IT+0x276>
 8001df4:	3218      	adds	r2, #24
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00b      	beq.n	8001e12 <HAL_DMA_Start_IT+0x276>
 8001dfa:	3218      	adds	r2, #24
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d008      	beq.n	8001e12 <HAL_DMA_Start_IT+0x276>
 8001e00:	3218      	adds	r2, #24
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d005      	beq.n	8001e12 <HAL_DMA_Start_IT+0x276>
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	f042 0201 	orr.w	r2, r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e0e:	2000      	movs	r0, #0
 8001e10:	e6dd      	b.n	8001bce <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_ENABLE(hdma);
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	f042 0201 	orr.w	r2, r2, #1
 8001e18:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e1a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001e1c:	e6d7      	b.n	8001bce <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 8001e1e:	2001      	movs	r0, #1
}
 8001e20:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8001e22:	2002      	movs	r0, #2
 8001e24:	e6d3      	b.n	8001bce <HAL_DMA_Start_IT+0x32>
 8001e26:	bf00      	nop
 8001e28:	40020010 	.word	0x40020010
 8001e2c:	40020028 	.word	0x40020028
 8001e30:	58025408 	.word	0x58025408

08001e34 <HAL_DMA_Abort>:
{
 8001e34:	b570      	push	{r4, r5, r6, lr}
 8001e36:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e38:	f7fe faae 	bl	8000398 <HAL_GetTick>
  if(hdma == NULL)
 8001e3c:	2c00      	cmp	r4, #0
 8001e3e:	f000 8191 	beq.w	8002164 <HAL_DMA_Abort+0x330>
 8001e42:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e44:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d006      	beq.n	8001e5c <HAL_DMA_Abort+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e4e:	2380      	movs	r3, #128	; 0x80
 8001e50:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001e52:	2300      	movs	r3, #0
 8001e54:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8001e58:	2001      	movs	r0, #1
}
 8001e5a:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e5c:	6823      	ldr	r3, [r4, #0]
 8001e5e:	498c      	ldr	r1, [pc, #560]	; (8002090 <HAL_DMA_Abort+0x25c>)
 8001e60:	4a8c      	ldr	r2, [pc, #560]	; (8002094 <HAL_DMA_Abort+0x260>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	bf18      	it	ne
 8001e66:	428b      	cmpne	r3, r1
 8001e68:	d030      	beq.n	8001ecc <HAL_DMA_Abort+0x98>
 8001e6a:	3218      	adds	r2, #24
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d02d      	beq.n	8001ecc <HAL_DMA_Abort+0x98>
 8001e70:	3218      	adds	r2, #24
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d02a      	beq.n	8001ecc <HAL_DMA_Abort+0x98>
 8001e76:	3218      	adds	r2, #24
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d027      	beq.n	8001ecc <HAL_DMA_Abort+0x98>
 8001e7c:	3218      	adds	r2, #24
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d024      	beq.n	8001ecc <HAL_DMA_Abort+0x98>
 8001e82:	3218      	adds	r2, #24
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d021      	beq.n	8001ecc <HAL_DMA_Abort+0x98>
 8001e88:	3218      	adds	r2, #24
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d01e      	beq.n	8001ecc <HAL_DMA_Abort+0x98>
 8001e8e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d01a      	beq.n	8001ecc <HAL_DMA_Abort+0x98>
 8001e96:	3218      	adds	r2, #24
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d017      	beq.n	8001ecc <HAL_DMA_Abort+0x98>
 8001e9c:	3218      	adds	r2, #24
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d014      	beq.n	8001ecc <HAL_DMA_Abort+0x98>
 8001ea2:	3218      	adds	r2, #24
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d011      	beq.n	8001ecc <HAL_DMA_Abort+0x98>
 8001ea8:	3218      	adds	r2, #24
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d00e      	beq.n	8001ecc <HAL_DMA_Abort+0x98>
 8001eae:	3218      	adds	r2, #24
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d00b      	beq.n	8001ecc <HAL_DMA_Abort+0x98>
 8001eb4:	3218      	adds	r2, #24
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d008      	beq.n	8001ecc <HAL_DMA_Abort+0x98>
 8001eba:	3218      	adds	r2, #24
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d005      	beq.n	8001ecc <HAL_DMA_Abort+0x98>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	f022 020e 	bic.w	r2, r2, #14
 8001ec6:	601a      	str	r2, [r3, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001ec8:	6826      	ldr	r6, [r4, #0]
 8001eca:	e009      	b.n	8001ee0 <HAL_DMA_Abort+0xac>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	f022 021e 	bic.w	r2, r2, #30
 8001ed2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001ed4:	6822      	ldr	r2, [r4, #0]
 8001ed6:	6953      	ldr	r3, [r2, #20]
 8001ed8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001edc:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001ede:	6826      	ldr	r6, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ee0:	6823      	ldr	r3, [r4, #0]
 8001ee2:	496b      	ldr	r1, [pc, #428]	; (8002090 <HAL_DMA_Abort+0x25c>)
 8001ee4:	4a6b      	ldr	r2, [pc, #428]	; (8002094 <HAL_DMA_Abort+0x260>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	bf18      	it	ne
 8001eea:	428b      	cmpne	r3, r1
 8001eec:	d042      	beq.n	8001f74 <HAL_DMA_Abort+0x140>
 8001eee:	3218      	adds	r2, #24
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d03f      	beq.n	8001f74 <HAL_DMA_Abort+0x140>
 8001ef4:	3218      	adds	r2, #24
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d03c      	beq.n	8001f74 <HAL_DMA_Abort+0x140>
 8001efa:	3218      	adds	r2, #24
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d039      	beq.n	8001f74 <HAL_DMA_Abort+0x140>
 8001f00:	3218      	adds	r2, #24
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d036      	beq.n	8001f74 <HAL_DMA_Abort+0x140>
 8001f06:	3218      	adds	r2, #24
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d033      	beq.n	8001f74 <HAL_DMA_Abort+0x140>
 8001f0c:	3218      	adds	r2, #24
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d030      	beq.n	8001f74 <HAL_DMA_Abort+0x140>
 8001f12:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d02c      	beq.n	8001f74 <HAL_DMA_Abort+0x140>
 8001f1a:	3218      	adds	r2, #24
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d029      	beq.n	8001f74 <HAL_DMA_Abort+0x140>
 8001f20:	3218      	adds	r2, #24
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d026      	beq.n	8001f74 <HAL_DMA_Abort+0x140>
 8001f26:	3218      	adds	r2, #24
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d023      	beq.n	8001f74 <HAL_DMA_Abort+0x140>
 8001f2c:	3218      	adds	r2, #24
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d020      	beq.n	8001f74 <HAL_DMA_Abort+0x140>
 8001f32:	3218      	adds	r2, #24
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d01d      	beq.n	8001f74 <HAL_DMA_Abort+0x140>
 8001f38:	3218      	adds	r2, #24
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d01a      	beq.n	8001f74 <HAL_DMA_Abort+0x140>
 8001f3e:	3218      	adds	r2, #24
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d017      	beq.n	8001f74 <HAL_DMA_Abort+0x140>
 8001f44:	4a54      	ldr	r2, [pc, #336]	; (8002098 <HAL_DMA_Abort+0x264>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d014      	beq.n	8001f74 <HAL_DMA_Abort+0x140>
 8001f4a:	3214      	adds	r2, #20
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d011      	beq.n	8001f74 <HAL_DMA_Abort+0x140>
 8001f50:	3214      	adds	r2, #20
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00e      	beq.n	8001f74 <HAL_DMA_Abort+0x140>
 8001f56:	3214      	adds	r2, #20
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d00b      	beq.n	8001f74 <HAL_DMA_Abort+0x140>
 8001f5c:	3214      	adds	r2, #20
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d008      	beq.n	8001f74 <HAL_DMA_Abort+0x140>
 8001f62:	3214      	adds	r2, #20
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d005      	beq.n	8001f74 <HAL_DMA_Abort+0x140>
 8001f68:	3214      	adds	r2, #20
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d002      	beq.n	8001f74 <HAL_DMA_Abort+0x140>
 8001f6e:	3214      	adds	r2, #20
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d104      	bne.n	8001f7e <HAL_DMA_Abort+0x14a>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f74:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001f76:	6813      	ldr	r3, [r2, #0]
 8001f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f7c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001f7e:	6823      	ldr	r3, [r4, #0]
 8001f80:	4943      	ldr	r1, [pc, #268]	; (8002090 <HAL_DMA_Abort+0x25c>)
 8001f82:	4a44      	ldr	r2, [pc, #272]	; (8002094 <HAL_DMA_Abort+0x260>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	bf18      	it	ne
 8001f88:	428b      	cmpne	r3, r1
 8001f8a:	d02f      	beq.n	8001fec <HAL_DMA_Abort+0x1b8>
 8001f8c:	3218      	adds	r2, #24
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d02c      	beq.n	8001fec <HAL_DMA_Abort+0x1b8>
 8001f92:	3218      	adds	r2, #24
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d029      	beq.n	8001fec <HAL_DMA_Abort+0x1b8>
 8001f98:	3218      	adds	r2, #24
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d026      	beq.n	8001fec <HAL_DMA_Abort+0x1b8>
 8001f9e:	3218      	adds	r2, #24
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d023      	beq.n	8001fec <HAL_DMA_Abort+0x1b8>
 8001fa4:	3218      	adds	r2, #24
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d020      	beq.n	8001fec <HAL_DMA_Abort+0x1b8>
 8001faa:	3218      	adds	r2, #24
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d01d      	beq.n	8001fec <HAL_DMA_Abort+0x1b8>
 8001fb0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d019      	beq.n	8001fec <HAL_DMA_Abort+0x1b8>
 8001fb8:	3218      	adds	r2, #24
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d016      	beq.n	8001fec <HAL_DMA_Abort+0x1b8>
 8001fbe:	3218      	adds	r2, #24
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d013      	beq.n	8001fec <HAL_DMA_Abort+0x1b8>
 8001fc4:	3218      	adds	r2, #24
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d010      	beq.n	8001fec <HAL_DMA_Abort+0x1b8>
 8001fca:	3218      	adds	r2, #24
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d00d      	beq.n	8001fec <HAL_DMA_Abort+0x1b8>
 8001fd0:	3218      	adds	r2, #24
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00a      	beq.n	8001fec <HAL_DMA_Abort+0x1b8>
 8001fd6:	3218      	adds	r2, #24
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d007      	beq.n	8001fec <HAL_DMA_Abort+0x1b8>
 8001fdc:	3218      	adds	r2, #24
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d004      	beq.n	8001fec <HAL_DMA_Abort+0x1b8>
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	f022 0201 	bic.w	r2, r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	e003      	b.n	8001ff4 <HAL_DMA_Abort+0x1c0>
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	f022 0201 	bic.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ff4:	6833      	ldr	r3, [r6, #0]
 8001ff6:	f013 0f01 	tst.w	r3, #1
 8001ffa:	d00e      	beq.n	800201a <HAL_DMA_Abort+0x1e6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ffc:	f7fe f9cc 	bl	8000398 <HAL_GetTick>
 8002000:	1b40      	subs	r0, r0, r5
 8002002:	2805      	cmp	r0, #5
 8002004:	d9f6      	bls.n	8001ff4 <HAL_DMA_Abort+0x1c0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002006:	2320      	movs	r3, #32
 8002008:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800200a:	2300      	movs	r3, #0
 800200c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8002010:	2303      	movs	r3, #3
 8002012:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 8002016:	2001      	movs	r0, #1
 8002018:	e71f      	b.n	8001e5a <HAL_DMA_Abort+0x26>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800201a:	6823      	ldr	r3, [r4, #0]
 800201c:	491c      	ldr	r1, [pc, #112]	; (8002090 <HAL_DMA_Abort+0x25c>)
 800201e:	4a1d      	ldr	r2, [pc, #116]	; (8002094 <HAL_DMA_Abort+0x260>)
 8002020:	4293      	cmp	r3, r2
 8002022:	bf18      	it	ne
 8002024:	428b      	cmpne	r3, r1
 8002026:	d039      	beq.n	800209c <HAL_DMA_Abort+0x268>
 8002028:	3218      	adds	r2, #24
 800202a:	4293      	cmp	r3, r2
 800202c:	d036      	beq.n	800209c <HAL_DMA_Abort+0x268>
 800202e:	3218      	adds	r2, #24
 8002030:	4293      	cmp	r3, r2
 8002032:	d033      	beq.n	800209c <HAL_DMA_Abort+0x268>
 8002034:	3218      	adds	r2, #24
 8002036:	4293      	cmp	r3, r2
 8002038:	d030      	beq.n	800209c <HAL_DMA_Abort+0x268>
 800203a:	3218      	adds	r2, #24
 800203c:	4293      	cmp	r3, r2
 800203e:	d02d      	beq.n	800209c <HAL_DMA_Abort+0x268>
 8002040:	3218      	adds	r2, #24
 8002042:	4293      	cmp	r3, r2
 8002044:	d02a      	beq.n	800209c <HAL_DMA_Abort+0x268>
 8002046:	3218      	adds	r2, #24
 8002048:	4293      	cmp	r3, r2
 800204a:	d027      	beq.n	800209c <HAL_DMA_Abort+0x268>
 800204c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002050:	4293      	cmp	r3, r2
 8002052:	d023      	beq.n	800209c <HAL_DMA_Abort+0x268>
 8002054:	3218      	adds	r2, #24
 8002056:	4293      	cmp	r3, r2
 8002058:	d020      	beq.n	800209c <HAL_DMA_Abort+0x268>
 800205a:	3218      	adds	r2, #24
 800205c:	4293      	cmp	r3, r2
 800205e:	d01d      	beq.n	800209c <HAL_DMA_Abort+0x268>
 8002060:	3218      	adds	r2, #24
 8002062:	4293      	cmp	r3, r2
 8002064:	d01a      	beq.n	800209c <HAL_DMA_Abort+0x268>
 8002066:	3218      	adds	r2, #24
 8002068:	4293      	cmp	r3, r2
 800206a:	d017      	beq.n	800209c <HAL_DMA_Abort+0x268>
 800206c:	3218      	adds	r2, #24
 800206e:	4293      	cmp	r3, r2
 8002070:	d014      	beq.n	800209c <HAL_DMA_Abort+0x268>
 8002072:	3218      	adds	r2, #24
 8002074:	4293      	cmp	r3, r2
 8002076:	d011      	beq.n	800209c <HAL_DMA_Abort+0x268>
 8002078:	3218      	adds	r2, #24
 800207a:	4293      	cmp	r3, r2
 800207c:	d00e      	beq.n	800209c <HAL_DMA_Abort+0x268>
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800207e:	6da1      	ldr	r1, [r4, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002080:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002082:	f003 021f 	and.w	r2, r3, #31
 8002086:	2301      	movs	r3, #1
 8002088:	4093      	lsls	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
 800208c:	e00d      	b.n	80020aa <HAL_DMA_Abort+0x276>
 800208e:	bf00      	nop
 8002090:	40020010 	.word	0x40020010
 8002094:	40020028 	.word	0x40020028
 8002098:	58025408 	.word	0x58025408
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800209c:	6da1      	ldr	r1, [r4, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800209e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80020a0:	f003 021f 	and.w	r2, r3, #31
 80020a4:	233f      	movs	r3, #63	; 0x3f
 80020a6:	4093      	lsls	r3, r2
 80020a8:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020aa:	6823      	ldr	r3, [r4, #0]
 80020ac:	492e      	ldr	r1, [pc, #184]	; (8002168 <HAL_DMA_Abort+0x334>)
 80020ae:	4a2f      	ldr	r2, [pc, #188]	; (800216c <HAL_DMA_Abort+0x338>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	bf18      	it	ne
 80020b4:	428b      	cmpne	r3, r1
 80020b6:	d042      	beq.n	800213e <HAL_DMA_Abort+0x30a>
 80020b8:	3218      	adds	r2, #24
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d03f      	beq.n	800213e <HAL_DMA_Abort+0x30a>
 80020be:	3218      	adds	r2, #24
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d03c      	beq.n	800213e <HAL_DMA_Abort+0x30a>
 80020c4:	3218      	adds	r2, #24
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d039      	beq.n	800213e <HAL_DMA_Abort+0x30a>
 80020ca:	3218      	adds	r2, #24
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d036      	beq.n	800213e <HAL_DMA_Abort+0x30a>
 80020d0:	3218      	adds	r2, #24
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d033      	beq.n	800213e <HAL_DMA_Abort+0x30a>
 80020d6:	3218      	adds	r2, #24
 80020d8:	4293      	cmp	r3, r2
 80020da:	d030      	beq.n	800213e <HAL_DMA_Abort+0x30a>
 80020dc:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d02c      	beq.n	800213e <HAL_DMA_Abort+0x30a>
 80020e4:	3218      	adds	r2, #24
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d029      	beq.n	800213e <HAL_DMA_Abort+0x30a>
 80020ea:	3218      	adds	r2, #24
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d026      	beq.n	800213e <HAL_DMA_Abort+0x30a>
 80020f0:	3218      	adds	r2, #24
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d023      	beq.n	800213e <HAL_DMA_Abort+0x30a>
 80020f6:	3218      	adds	r2, #24
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d020      	beq.n	800213e <HAL_DMA_Abort+0x30a>
 80020fc:	3218      	adds	r2, #24
 80020fe:	4293      	cmp	r3, r2
 8002100:	d01d      	beq.n	800213e <HAL_DMA_Abort+0x30a>
 8002102:	3218      	adds	r2, #24
 8002104:	4293      	cmp	r3, r2
 8002106:	d01a      	beq.n	800213e <HAL_DMA_Abort+0x30a>
 8002108:	3218      	adds	r2, #24
 800210a:	4293      	cmp	r3, r2
 800210c:	d017      	beq.n	800213e <HAL_DMA_Abort+0x30a>
 800210e:	4a18      	ldr	r2, [pc, #96]	; (8002170 <HAL_DMA_Abort+0x33c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d014      	beq.n	800213e <HAL_DMA_Abort+0x30a>
 8002114:	3214      	adds	r2, #20
 8002116:	4293      	cmp	r3, r2
 8002118:	d011      	beq.n	800213e <HAL_DMA_Abort+0x30a>
 800211a:	3214      	adds	r2, #20
 800211c:	4293      	cmp	r3, r2
 800211e:	d00e      	beq.n	800213e <HAL_DMA_Abort+0x30a>
 8002120:	3214      	adds	r2, #20
 8002122:	4293      	cmp	r3, r2
 8002124:	d00b      	beq.n	800213e <HAL_DMA_Abort+0x30a>
 8002126:	3214      	adds	r2, #20
 8002128:	4293      	cmp	r3, r2
 800212a:	d008      	beq.n	800213e <HAL_DMA_Abort+0x30a>
 800212c:	3214      	adds	r2, #20
 800212e:	4293      	cmp	r3, r2
 8002130:	d005      	beq.n	800213e <HAL_DMA_Abort+0x30a>
 8002132:	3214      	adds	r2, #20
 8002134:	4293      	cmp	r3, r2
 8002136:	d002      	beq.n	800213e <HAL_DMA_Abort+0x30a>
 8002138:	3214      	adds	r2, #20
 800213a:	4293      	cmp	r3, r2
 800213c:	d10b      	bne.n	8002156 <HAL_DMA_Abort+0x322>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800213e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002140:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8002142:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8002144:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002146:	b133      	cbz	r3, 8002156 <HAL_DMA_Abort+0x322>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800214e:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002150:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002152:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8002154:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8002156:	2000      	movs	r0, #0
 8002158:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800215c:	2301      	movs	r3, #1
 800215e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002162:	e67a      	b.n	8001e5a <HAL_DMA_Abort+0x26>
    return HAL_ERROR;
 8002164:	2001      	movs	r0, #1
 8002166:	e678      	b.n	8001e5a <HAL_DMA_Abort+0x26>
 8002168:	40020010 	.word	0x40020010
 800216c:	40020028 	.word	0x40020028
 8002170:	58025408 	.word	0x58025408

08002174 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8002174:	2800      	cmp	r0, #0
 8002176:	f000 813a 	beq.w	80023ee <HAL_DMA_Abort_IT+0x27a>
{
 800217a:	b508      	push	{r3, lr}
 800217c:	4602      	mov	r2, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800217e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d003      	beq.n	8002190 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800218c:	2001      	movs	r0, #1
}
 800218e:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002190:	6803      	ldr	r3, [r0, #0]
 8002192:	4899      	ldr	r0, [pc, #612]	; (80023f8 <HAL_DMA_Abort_IT+0x284>)
 8002194:	4999      	ldr	r1, [pc, #612]	; (80023fc <HAL_DMA_Abort_IT+0x288>)
 8002196:	428b      	cmp	r3, r1
 8002198:	bf18      	it	ne
 800219a:	4283      	cmpne	r3, r0
 800219c:	bf0c      	ite	eq
 800219e:	2101      	moveq	r1, #1
 80021a0:	2100      	movne	r1, #0
 80021a2:	f000 80e4 	beq.w	800236e <HAL_DMA_Abort_IT+0x1fa>
 80021a6:	3030      	adds	r0, #48	; 0x30
 80021a8:	4283      	cmp	r3, r0
 80021aa:	f000 80e0 	beq.w	800236e <HAL_DMA_Abort_IT+0x1fa>
 80021ae:	3018      	adds	r0, #24
 80021b0:	4283      	cmp	r3, r0
 80021b2:	f000 80dc 	beq.w	800236e <HAL_DMA_Abort_IT+0x1fa>
 80021b6:	3018      	adds	r0, #24
 80021b8:	4283      	cmp	r3, r0
 80021ba:	f000 80d8 	beq.w	800236e <HAL_DMA_Abort_IT+0x1fa>
 80021be:	3018      	adds	r0, #24
 80021c0:	4283      	cmp	r3, r0
 80021c2:	f000 80d4 	beq.w	800236e <HAL_DMA_Abort_IT+0x1fa>
 80021c6:	3018      	adds	r0, #24
 80021c8:	4283      	cmp	r3, r0
 80021ca:	f000 80d0 	beq.w	800236e <HAL_DMA_Abort_IT+0x1fa>
 80021ce:	3018      	adds	r0, #24
 80021d0:	4283      	cmp	r3, r0
 80021d2:	f000 80cc 	beq.w	800236e <HAL_DMA_Abort_IT+0x1fa>
 80021d6:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80021da:	4283      	cmp	r3, r0
 80021dc:	f000 80c7 	beq.w	800236e <HAL_DMA_Abort_IT+0x1fa>
 80021e0:	3018      	adds	r0, #24
 80021e2:	4283      	cmp	r3, r0
 80021e4:	f000 80c3 	beq.w	800236e <HAL_DMA_Abort_IT+0x1fa>
 80021e8:	3018      	adds	r0, #24
 80021ea:	4283      	cmp	r3, r0
 80021ec:	f000 80bf 	beq.w	800236e <HAL_DMA_Abort_IT+0x1fa>
 80021f0:	3018      	adds	r0, #24
 80021f2:	4283      	cmp	r3, r0
 80021f4:	f000 80bb 	beq.w	800236e <HAL_DMA_Abort_IT+0x1fa>
 80021f8:	3018      	adds	r0, #24
 80021fa:	4283      	cmp	r3, r0
 80021fc:	f000 80b7 	beq.w	800236e <HAL_DMA_Abort_IT+0x1fa>
 8002200:	3018      	adds	r0, #24
 8002202:	4283      	cmp	r3, r0
 8002204:	f000 80b3 	beq.w	800236e <HAL_DMA_Abort_IT+0x1fa>
 8002208:	3018      	adds	r0, #24
 800220a:	4283      	cmp	r3, r0
 800220c:	f000 80af 	beq.w	800236e <HAL_DMA_Abort_IT+0x1fa>
 8002210:	3018      	adds	r0, #24
 8002212:	4283      	cmp	r3, r0
 8002214:	f000 80ab 	beq.w	800236e <HAL_DMA_Abort_IT+0x1fa>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002218:	6819      	ldr	r1, [r3, #0]
 800221a:	f021 010e 	bic.w	r1, r1, #14
 800221e:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8002220:	6813      	ldr	r3, [r2, #0]
 8002222:	f5a0 6095 	sub.w	r0, r0, #1192	; 0x4a8
 8002226:	4975      	ldr	r1, [pc, #468]	; (80023fc <HAL_DMA_Abort_IT+0x288>)
 8002228:	428b      	cmp	r3, r1
 800222a:	bf18      	it	ne
 800222c:	4283      	cmpne	r3, r0
 800222e:	d02b      	beq.n	8002288 <HAL_DMA_Abort_IT+0x114>
 8002230:	4973      	ldr	r1, [pc, #460]	; (8002400 <HAL_DMA_Abort_IT+0x28c>)
 8002232:	428b      	cmp	r3, r1
 8002234:	d028      	beq.n	8002288 <HAL_DMA_Abort_IT+0x114>
 8002236:	3118      	adds	r1, #24
 8002238:	428b      	cmp	r3, r1
 800223a:	d025      	beq.n	8002288 <HAL_DMA_Abort_IT+0x114>
 800223c:	3118      	adds	r1, #24
 800223e:	428b      	cmp	r3, r1
 8002240:	d022      	beq.n	8002288 <HAL_DMA_Abort_IT+0x114>
 8002242:	3118      	adds	r1, #24
 8002244:	428b      	cmp	r3, r1
 8002246:	d01f      	beq.n	8002288 <HAL_DMA_Abort_IT+0x114>
 8002248:	3118      	adds	r1, #24
 800224a:	428b      	cmp	r3, r1
 800224c:	d01c      	beq.n	8002288 <HAL_DMA_Abort_IT+0x114>
 800224e:	3118      	adds	r1, #24
 8002250:	428b      	cmp	r3, r1
 8002252:	d019      	beq.n	8002288 <HAL_DMA_Abort_IT+0x114>
 8002254:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002258:	428b      	cmp	r3, r1
 800225a:	d015      	beq.n	8002288 <HAL_DMA_Abort_IT+0x114>
 800225c:	3118      	adds	r1, #24
 800225e:	428b      	cmp	r3, r1
 8002260:	d012      	beq.n	8002288 <HAL_DMA_Abort_IT+0x114>
 8002262:	3118      	adds	r1, #24
 8002264:	428b      	cmp	r3, r1
 8002266:	d00f      	beq.n	8002288 <HAL_DMA_Abort_IT+0x114>
 8002268:	3118      	adds	r1, #24
 800226a:	428b      	cmp	r3, r1
 800226c:	d00c      	beq.n	8002288 <HAL_DMA_Abort_IT+0x114>
 800226e:	3118      	adds	r1, #24
 8002270:	428b      	cmp	r3, r1
 8002272:	d009      	beq.n	8002288 <HAL_DMA_Abort_IT+0x114>
 8002274:	3118      	adds	r1, #24
 8002276:	428b      	cmp	r3, r1
 8002278:	d006      	beq.n	8002288 <HAL_DMA_Abort_IT+0x114>
 800227a:	3118      	adds	r1, #24
 800227c:	428b      	cmp	r3, r1
 800227e:	d003      	beq.n	8002288 <HAL_DMA_Abort_IT+0x114>
 8002280:	3118      	adds	r1, #24
 8002282:	428b      	cmp	r3, r1
 8002284:	f040 80ae 	bne.w	80023e4 <HAL_DMA_Abort_IT+0x270>
 8002288:	6819      	ldr	r1, [r3, #0]
 800228a:	f021 0101 	bic.w	r1, r1, #1
 800228e:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002290:	6813      	ldr	r3, [r2, #0]
 8002292:	4859      	ldr	r0, [pc, #356]	; (80023f8 <HAL_DMA_Abort_IT+0x284>)
 8002294:	4959      	ldr	r1, [pc, #356]	; (80023fc <HAL_DMA_Abort_IT+0x288>)
 8002296:	428b      	cmp	r3, r1
 8002298:	bf18      	it	ne
 800229a:	4283      	cmpne	r3, r0
 800229c:	d042      	beq.n	8002324 <HAL_DMA_Abort_IT+0x1b0>
 800229e:	3118      	adds	r1, #24
 80022a0:	428b      	cmp	r3, r1
 80022a2:	d03f      	beq.n	8002324 <HAL_DMA_Abort_IT+0x1b0>
 80022a4:	3118      	adds	r1, #24
 80022a6:	428b      	cmp	r3, r1
 80022a8:	d03c      	beq.n	8002324 <HAL_DMA_Abort_IT+0x1b0>
 80022aa:	3118      	adds	r1, #24
 80022ac:	428b      	cmp	r3, r1
 80022ae:	d039      	beq.n	8002324 <HAL_DMA_Abort_IT+0x1b0>
 80022b0:	3118      	adds	r1, #24
 80022b2:	428b      	cmp	r3, r1
 80022b4:	d036      	beq.n	8002324 <HAL_DMA_Abort_IT+0x1b0>
 80022b6:	3118      	adds	r1, #24
 80022b8:	428b      	cmp	r3, r1
 80022ba:	d033      	beq.n	8002324 <HAL_DMA_Abort_IT+0x1b0>
 80022bc:	3118      	adds	r1, #24
 80022be:	428b      	cmp	r3, r1
 80022c0:	d030      	beq.n	8002324 <HAL_DMA_Abort_IT+0x1b0>
 80022c2:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80022c6:	428b      	cmp	r3, r1
 80022c8:	d02c      	beq.n	8002324 <HAL_DMA_Abort_IT+0x1b0>
 80022ca:	3118      	adds	r1, #24
 80022cc:	428b      	cmp	r3, r1
 80022ce:	d029      	beq.n	8002324 <HAL_DMA_Abort_IT+0x1b0>
 80022d0:	3118      	adds	r1, #24
 80022d2:	428b      	cmp	r3, r1
 80022d4:	d026      	beq.n	8002324 <HAL_DMA_Abort_IT+0x1b0>
 80022d6:	3118      	adds	r1, #24
 80022d8:	428b      	cmp	r3, r1
 80022da:	d023      	beq.n	8002324 <HAL_DMA_Abort_IT+0x1b0>
 80022dc:	3118      	adds	r1, #24
 80022de:	428b      	cmp	r3, r1
 80022e0:	d020      	beq.n	8002324 <HAL_DMA_Abort_IT+0x1b0>
 80022e2:	3118      	adds	r1, #24
 80022e4:	428b      	cmp	r3, r1
 80022e6:	d01d      	beq.n	8002324 <HAL_DMA_Abort_IT+0x1b0>
 80022e8:	3118      	adds	r1, #24
 80022ea:	428b      	cmp	r3, r1
 80022ec:	d01a      	beq.n	8002324 <HAL_DMA_Abort_IT+0x1b0>
 80022ee:	3118      	adds	r1, #24
 80022f0:	428b      	cmp	r3, r1
 80022f2:	d017      	beq.n	8002324 <HAL_DMA_Abort_IT+0x1b0>
 80022f4:	4943      	ldr	r1, [pc, #268]	; (8002404 <HAL_DMA_Abort_IT+0x290>)
 80022f6:	428b      	cmp	r3, r1
 80022f8:	d014      	beq.n	8002324 <HAL_DMA_Abort_IT+0x1b0>
 80022fa:	3114      	adds	r1, #20
 80022fc:	428b      	cmp	r3, r1
 80022fe:	d011      	beq.n	8002324 <HAL_DMA_Abort_IT+0x1b0>
 8002300:	3114      	adds	r1, #20
 8002302:	428b      	cmp	r3, r1
 8002304:	d00e      	beq.n	8002324 <HAL_DMA_Abort_IT+0x1b0>
 8002306:	3114      	adds	r1, #20
 8002308:	428b      	cmp	r3, r1
 800230a:	d00b      	beq.n	8002324 <HAL_DMA_Abort_IT+0x1b0>
 800230c:	3114      	adds	r1, #20
 800230e:	428b      	cmp	r3, r1
 8002310:	d008      	beq.n	8002324 <HAL_DMA_Abort_IT+0x1b0>
 8002312:	3114      	adds	r1, #20
 8002314:	428b      	cmp	r3, r1
 8002316:	d005      	beq.n	8002324 <HAL_DMA_Abort_IT+0x1b0>
 8002318:	3114      	adds	r1, #20
 800231a:	428b      	cmp	r3, r1
 800231c:	d002      	beq.n	8002324 <HAL_DMA_Abort_IT+0x1b0>
 800231e:	3114      	adds	r1, #20
 8002320:	428b      	cmp	r3, r1
 8002322:	d117      	bne.n	8002354 <HAL_DMA_Abort_IT+0x1e0>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002324:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8002326:	680b      	ldr	r3, [r1, #0]
 8002328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800232c:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800232e:	6d90      	ldr	r0, [r2, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002330:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8002332:	f003 011f 	and.w	r1, r3, #31
 8002336:	2301      	movs	r3, #1
 8002338:	408b      	lsls	r3, r1
 800233a:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800233c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800233e:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8002340:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8002342:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 8002344:	b133      	cbz	r3, 8002354 <HAL_DMA_Abort_IT+0x1e0>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002346:	6819      	ldr	r1, [r3, #0]
 8002348:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800234c:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800234e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002350:	6f51      	ldr	r1, [r2, #116]	; 0x74
 8002352:	6059      	str	r1, [r3, #4]
      __HAL_UNLOCK(hdma);
 8002354:	2300      	movs	r3, #0
 8002356:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800235a:	2301      	movs	r3, #1
 800235c:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8002360:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002362:	2b00      	cmp	r3, #0
 8002364:	d045      	beq.n	80023f2 <HAL_DMA_Abort_IT+0x27e>
 8002366:	4610      	mov	r0, r2
        hdma->XferAbortCallback(hdma);
 8002368:	4798      	blx	r3
  return HAL_OK;
 800236a:	2000      	movs	r0, #0
 800236c:	e70f      	b.n	800218e <HAL_DMA_Abort_IT+0x1a>
      hdma->State = HAL_DMA_STATE_ABORT;
 800236e:	2004      	movs	r0, #4
 8002370:	f882 0035 	strb.w	r0, [r2, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002374:	bb81      	cbnz	r1, 80023d8 <HAL_DMA_Abort_IT+0x264>
 8002376:	4a22      	ldr	r2, [pc, #136]	; (8002400 <HAL_DMA_Abort_IT+0x28c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d02d      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x264>
 800237c:	3218      	adds	r2, #24
 800237e:	4293      	cmp	r3, r2
 8002380:	d02a      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x264>
 8002382:	3218      	adds	r2, #24
 8002384:	4293      	cmp	r3, r2
 8002386:	d027      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x264>
 8002388:	3218      	adds	r2, #24
 800238a:	4293      	cmp	r3, r2
 800238c:	d024      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x264>
 800238e:	3218      	adds	r2, #24
 8002390:	4293      	cmp	r3, r2
 8002392:	d021      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x264>
 8002394:	3218      	adds	r2, #24
 8002396:	4293      	cmp	r3, r2
 8002398:	d01e      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x264>
 800239a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800239e:	4293      	cmp	r3, r2
 80023a0:	d01a      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x264>
 80023a2:	3218      	adds	r2, #24
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d017      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x264>
 80023a8:	3218      	adds	r2, #24
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d014      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x264>
 80023ae:	3218      	adds	r2, #24
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d011      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x264>
 80023b4:	3218      	adds	r2, #24
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00e      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x264>
 80023ba:	3218      	adds	r2, #24
 80023bc:	4293      	cmp	r3, r2
 80023be:	d00b      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x264>
 80023c0:	3218      	adds	r2, #24
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d008      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x264>
 80023c6:	3218      	adds	r2, #24
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d005      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x264>
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	f022 0201 	bic.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80023d4:	2000      	movs	r0, #0
 80023d6:	e6da      	b.n	800218e <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	f022 0201 	bic.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80023e0:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 80023e2:	e6d4      	b.n	800218e <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 80023e4:	6819      	ldr	r1, [r3, #0]
 80023e6:	f021 0101 	bic.w	r1, r1, #1
 80023ea:	6019      	str	r1, [r3, #0]
 80023ec:	e750      	b.n	8002290 <HAL_DMA_Abort_IT+0x11c>
    return HAL_ERROR;
 80023ee:	2001      	movs	r0, #1
}
 80023f0:	4770      	bx	lr
  return HAL_OK;
 80023f2:	2000      	movs	r0, #0
 80023f4:	e6cb      	b.n	800218e <HAL_DMA_Abort_IT+0x1a>
 80023f6:	bf00      	nop
 80023f8:	40020010 	.word	0x40020010
 80023fc:	40020028 	.word	0x40020028
 8002400:	40020040 	.word	0x40020040
 8002404:	58025408 	.word	0x58025408

08002408 <HAL_DMA_IRQHandler>:
{
 8002408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800240a:	b083      	sub	sp, #12
 800240c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800240e:	2300      	movs	r3, #0
 8002410:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002412:	4ba2      	ldr	r3, [pc, #648]	; (800269c <HAL_DMA_IRQHandler+0x294>)
 8002414:	681d      	ldr	r5, [r3, #0]
 8002416:	4ba2      	ldr	r3, [pc, #648]	; (80026a0 <HAL_DMA_IRQHandler+0x298>)
 8002418:	fba3 3505 	umull	r3, r5, r3, r5
 800241c:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800241e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr_dma  = regs_dma->ISR;
 8002420:	683e      	ldr	r6, [r7, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8002422:	f8d7 c000 	ldr.w	ip, [r7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002426:	6803      	ldr	r3, [r0, #0]
 8002428:	499e      	ldr	r1, [pc, #632]	; (80026a4 <HAL_DMA_IRQHandler+0x29c>)
 800242a:	489f      	ldr	r0, [pc, #636]	; (80026a8 <HAL_DMA_IRQHandler+0x2a0>)
 800242c:	4283      	cmp	r3, r0
 800242e:	bf18      	it	ne
 8002430:	428b      	cmpne	r3, r1
 8002432:	bf0c      	ite	eq
 8002434:	2001      	moveq	r0, #1
 8002436:	2000      	movne	r0, #0
 8002438:	d061      	beq.n	80024fe <HAL_DMA_IRQHandler+0xf6>
 800243a:	4a9c      	ldr	r2, [pc, #624]	; (80026ac <HAL_DMA_IRQHandler+0x2a4>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d05e      	beq.n	80024fe <HAL_DMA_IRQHandler+0xf6>
 8002440:	3218      	adds	r2, #24
 8002442:	4293      	cmp	r3, r2
 8002444:	d05b      	beq.n	80024fe <HAL_DMA_IRQHandler+0xf6>
 8002446:	3218      	adds	r2, #24
 8002448:	4293      	cmp	r3, r2
 800244a:	d058      	beq.n	80024fe <HAL_DMA_IRQHandler+0xf6>
 800244c:	3218      	adds	r2, #24
 800244e:	4293      	cmp	r3, r2
 8002450:	d055      	beq.n	80024fe <HAL_DMA_IRQHandler+0xf6>
 8002452:	3218      	adds	r2, #24
 8002454:	4293      	cmp	r3, r2
 8002456:	d052      	beq.n	80024fe <HAL_DMA_IRQHandler+0xf6>
 8002458:	3218      	adds	r2, #24
 800245a:	4293      	cmp	r3, r2
 800245c:	d04f      	beq.n	80024fe <HAL_DMA_IRQHandler+0xf6>
 800245e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002462:	4293      	cmp	r3, r2
 8002464:	d04b      	beq.n	80024fe <HAL_DMA_IRQHandler+0xf6>
 8002466:	3218      	adds	r2, #24
 8002468:	4293      	cmp	r3, r2
 800246a:	d048      	beq.n	80024fe <HAL_DMA_IRQHandler+0xf6>
 800246c:	3218      	adds	r2, #24
 800246e:	4293      	cmp	r3, r2
 8002470:	d045      	beq.n	80024fe <HAL_DMA_IRQHandler+0xf6>
 8002472:	3218      	adds	r2, #24
 8002474:	4293      	cmp	r3, r2
 8002476:	d042      	beq.n	80024fe <HAL_DMA_IRQHandler+0xf6>
 8002478:	3218      	adds	r2, #24
 800247a:	4293      	cmp	r3, r2
 800247c:	d03f      	beq.n	80024fe <HAL_DMA_IRQHandler+0xf6>
 800247e:	3218      	adds	r2, #24
 8002480:	4293      	cmp	r3, r2
 8002482:	d03c      	beq.n	80024fe <HAL_DMA_IRQHandler+0xf6>
 8002484:	3218      	adds	r2, #24
 8002486:	4293      	cmp	r3, r2
 8002488:	d039      	beq.n	80024fe <HAL_DMA_IRQHandler+0xf6>
 800248a:	3218      	adds	r2, #24
 800248c:	4293      	cmp	r3, r2
 800248e:	d036      	beq.n	80024fe <HAL_DMA_IRQHandler+0xf6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002490:	4987      	ldr	r1, [pc, #540]	; (80026b0 <HAL_DMA_IRQHandler+0x2a8>)
 8002492:	4a88      	ldr	r2, [pc, #544]	; (80026b4 <HAL_DMA_IRQHandler+0x2ac>)
 8002494:	4293      	cmp	r3, r2
 8002496:	bf18      	it	ne
 8002498:	428b      	cmpne	r3, r1
 800249a:	d012      	beq.n	80024c2 <HAL_DMA_IRQHandler+0xba>
 800249c:	4a86      	ldr	r2, [pc, #536]	; (80026b8 <HAL_DMA_IRQHandler+0x2b0>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00f      	beq.n	80024c2 <HAL_DMA_IRQHandler+0xba>
 80024a2:	3214      	adds	r2, #20
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d00c      	beq.n	80024c2 <HAL_DMA_IRQHandler+0xba>
 80024a8:	3214      	adds	r2, #20
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d009      	beq.n	80024c2 <HAL_DMA_IRQHandler+0xba>
 80024ae:	3214      	adds	r2, #20
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d006      	beq.n	80024c2 <HAL_DMA_IRQHandler+0xba>
 80024b4:	3214      	adds	r2, #20
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d003      	beq.n	80024c2 <HAL_DMA_IRQHandler+0xba>
 80024ba:	3214      	adds	r2, #20
 80024bc:	4293      	cmp	r3, r2
 80024be:	f040 8262 	bne.w	8002986 <HAL_DMA_IRQHandler+0x57e>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80024c2:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80024c4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80024c6:	f001 011f 	and.w	r1, r1, #31
 80024ca:	2004      	movs	r0, #4
 80024cc:	4088      	lsls	r0, r1
 80024ce:	ea10 0f0c 	tst.w	r0, ip
 80024d2:	f000 82a8 	beq.w	8002a26 <HAL_DMA_IRQHandler+0x61e>
 80024d6:	f012 0f04 	tst.w	r2, #4
 80024da:	f000 82a4 	beq.w	8002a26 <HAL_DMA_IRQHandler+0x61e>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80024de:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80024e0:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80024e4:	f000 825b 	beq.w	800299e <HAL_DMA_IRQHandler+0x596>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80024e8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80024ec:	f040 8251 	bne.w	8002992 <HAL_DMA_IRQHandler+0x58a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 8247 	beq.w	8002986 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferM1HalfCpltCallback(hdma);
 80024f8:	4620      	mov	r0, r4
 80024fa:	4798      	blx	r3
 80024fc:	e243      	b.n	8002986 <HAL_DMA_IRQHandler+0x57e>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80024fe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002500:	f002 011f 	and.w	r1, r2, #31
 8002504:	2208      	movs	r2, #8
 8002506:	408a      	lsls	r2, r1
 8002508:	4232      	tst	r2, r6
 800250a:	d041      	beq.n	8002590 <HAL_DMA_IRQHandler+0x188>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800250c:	bb70      	cbnz	r0, 800256c <HAL_DMA_IRQHandler+0x164>
 800250e:	4a67      	ldr	r2, [pc, #412]	; (80026ac <HAL_DMA_IRQHandler+0x2a4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d02b      	beq.n	800256c <HAL_DMA_IRQHandler+0x164>
 8002514:	3218      	adds	r2, #24
 8002516:	4293      	cmp	r3, r2
 8002518:	d028      	beq.n	800256c <HAL_DMA_IRQHandler+0x164>
 800251a:	3218      	adds	r2, #24
 800251c:	4293      	cmp	r3, r2
 800251e:	d025      	beq.n	800256c <HAL_DMA_IRQHandler+0x164>
 8002520:	3218      	adds	r2, #24
 8002522:	4293      	cmp	r3, r2
 8002524:	d022      	beq.n	800256c <HAL_DMA_IRQHandler+0x164>
 8002526:	3218      	adds	r2, #24
 8002528:	4293      	cmp	r3, r2
 800252a:	d01f      	beq.n	800256c <HAL_DMA_IRQHandler+0x164>
 800252c:	3218      	adds	r2, #24
 800252e:	4293      	cmp	r3, r2
 8002530:	d01c      	beq.n	800256c <HAL_DMA_IRQHandler+0x164>
 8002532:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002536:	4293      	cmp	r3, r2
 8002538:	d018      	beq.n	800256c <HAL_DMA_IRQHandler+0x164>
 800253a:	3218      	adds	r2, #24
 800253c:	4293      	cmp	r3, r2
 800253e:	d015      	beq.n	800256c <HAL_DMA_IRQHandler+0x164>
 8002540:	3218      	adds	r2, #24
 8002542:	4293      	cmp	r3, r2
 8002544:	d012      	beq.n	800256c <HAL_DMA_IRQHandler+0x164>
 8002546:	3218      	adds	r2, #24
 8002548:	4293      	cmp	r3, r2
 800254a:	d00f      	beq.n	800256c <HAL_DMA_IRQHandler+0x164>
 800254c:	3218      	adds	r2, #24
 800254e:	4293      	cmp	r3, r2
 8002550:	d00c      	beq.n	800256c <HAL_DMA_IRQHandler+0x164>
 8002552:	3218      	adds	r2, #24
 8002554:	4293      	cmp	r3, r2
 8002556:	d009      	beq.n	800256c <HAL_DMA_IRQHandler+0x164>
 8002558:	3218      	adds	r2, #24
 800255a:	4293      	cmp	r3, r2
 800255c:	d006      	beq.n	800256c <HAL_DMA_IRQHandler+0x164>
 800255e:	3218      	adds	r2, #24
 8002560:	4293      	cmp	r3, r2
 8002562:	d003      	beq.n	800256c <HAL_DMA_IRQHandler+0x164>
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800256a:	e002      	b.n	8002572 <HAL_DMA_IRQHandler+0x16a>
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8002572:	b16a      	cbz	r2, 8002590 <HAL_DMA_IRQHandler+0x188>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	f022 0204 	bic.w	r2, r2, #4
 800257a:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800257c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800257e:	f003 021f 	and.w	r2, r3, #31
 8002582:	2308      	movs	r3, #8
 8002584:	4093      	lsls	r3, r2
 8002586:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002588:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002590:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002592:	f002 021f 	and.w	r2, r2, #31
 8002596:	fa26 f302 	lsr.w	r3, r6, r2
 800259a:	f013 0f01 	tst.w	r3, #1
 800259e:	d037      	beq.n	8002610 <HAL_DMA_IRQHandler+0x208>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80025a0:	6823      	ldr	r3, [r4, #0]
 80025a2:	4840      	ldr	r0, [pc, #256]	; (80026a4 <HAL_DMA_IRQHandler+0x29c>)
 80025a4:	4940      	ldr	r1, [pc, #256]	; (80026a8 <HAL_DMA_IRQHandler+0x2a0>)
 80025a6:	428b      	cmp	r3, r1
 80025a8:	bf18      	it	ne
 80025aa:	4283      	cmpne	r3, r0
 80025ac:	d02c      	beq.n	8002608 <HAL_DMA_IRQHandler+0x200>
 80025ae:	3118      	adds	r1, #24
 80025b0:	428b      	cmp	r3, r1
 80025b2:	d029      	beq.n	8002608 <HAL_DMA_IRQHandler+0x200>
 80025b4:	3118      	adds	r1, #24
 80025b6:	428b      	cmp	r3, r1
 80025b8:	d026      	beq.n	8002608 <HAL_DMA_IRQHandler+0x200>
 80025ba:	3118      	adds	r1, #24
 80025bc:	428b      	cmp	r3, r1
 80025be:	d023      	beq.n	8002608 <HAL_DMA_IRQHandler+0x200>
 80025c0:	3118      	adds	r1, #24
 80025c2:	428b      	cmp	r3, r1
 80025c4:	d020      	beq.n	8002608 <HAL_DMA_IRQHandler+0x200>
 80025c6:	3118      	adds	r1, #24
 80025c8:	428b      	cmp	r3, r1
 80025ca:	d01d      	beq.n	8002608 <HAL_DMA_IRQHandler+0x200>
 80025cc:	3118      	adds	r1, #24
 80025ce:	428b      	cmp	r3, r1
 80025d0:	d01a      	beq.n	8002608 <HAL_DMA_IRQHandler+0x200>
 80025d2:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80025d6:	428b      	cmp	r3, r1
 80025d8:	d016      	beq.n	8002608 <HAL_DMA_IRQHandler+0x200>
 80025da:	3118      	adds	r1, #24
 80025dc:	428b      	cmp	r3, r1
 80025de:	d013      	beq.n	8002608 <HAL_DMA_IRQHandler+0x200>
 80025e0:	3118      	adds	r1, #24
 80025e2:	428b      	cmp	r3, r1
 80025e4:	d010      	beq.n	8002608 <HAL_DMA_IRQHandler+0x200>
 80025e6:	3118      	adds	r1, #24
 80025e8:	428b      	cmp	r3, r1
 80025ea:	d00d      	beq.n	8002608 <HAL_DMA_IRQHandler+0x200>
 80025ec:	3118      	adds	r1, #24
 80025ee:	428b      	cmp	r3, r1
 80025f0:	d00a      	beq.n	8002608 <HAL_DMA_IRQHandler+0x200>
 80025f2:	3118      	adds	r1, #24
 80025f4:	428b      	cmp	r3, r1
 80025f6:	d007      	beq.n	8002608 <HAL_DMA_IRQHandler+0x200>
 80025f8:	3118      	adds	r1, #24
 80025fa:	428b      	cmp	r3, r1
 80025fc:	d004      	beq.n	8002608 <HAL_DMA_IRQHandler+0x200>
 80025fe:	3118      	adds	r1, #24
 8002600:	428b      	cmp	r3, r1
 8002602:	d001      	beq.n	8002608 <HAL_DMA_IRQHandler+0x200>
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	e003      	b.n	8002610 <HAL_DMA_IRQHandler+0x208>
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800260e:	d13b      	bne.n	8002688 <HAL_DMA_IRQHandler+0x280>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002610:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	2204      	movs	r2, #4
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	4233      	tst	r3, r6
 800261e:	d051      	beq.n	80026c4 <HAL_DMA_IRQHandler+0x2bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002620:	6822      	ldr	r2, [r4, #0]
 8002622:	4820      	ldr	r0, [pc, #128]	; (80026a4 <HAL_DMA_IRQHandler+0x29c>)
 8002624:	4920      	ldr	r1, [pc, #128]	; (80026a8 <HAL_DMA_IRQHandler+0x2a0>)
 8002626:	428a      	cmp	r2, r1
 8002628:	bf18      	it	ne
 800262a:	4282      	cmpne	r2, r0
 800262c:	d046      	beq.n	80026bc <HAL_DMA_IRQHandler+0x2b4>
 800262e:	3118      	adds	r1, #24
 8002630:	428a      	cmp	r2, r1
 8002632:	d043      	beq.n	80026bc <HAL_DMA_IRQHandler+0x2b4>
 8002634:	3118      	adds	r1, #24
 8002636:	428a      	cmp	r2, r1
 8002638:	d040      	beq.n	80026bc <HAL_DMA_IRQHandler+0x2b4>
 800263a:	3118      	adds	r1, #24
 800263c:	428a      	cmp	r2, r1
 800263e:	d03d      	beq.n	80026bc <HAL_DMA_IRQHandler+0x2b4>
 8002640:	3118      	adds	r1, #24
 8002642:	428a      	cmp	r2, r1
 8002644:	d03a      	beq.n	80026bc <HAL_DMA_IRQHandler+0x2b4>
 8002646:	3118      	adds	r1, #24
 8002648:	428a      	cmp	r2, r1
 800264a:	d037      	beq.n	80026bc <HAL_DMA_IRQHandler+0x2b4>
 800264c:	3118      	adds	r1, #24
 800264e:	428a      	cmp	r2, r1
 8002650:	d034      	beq.n	80026bc <HAL_DMA_IRQHandler+0x2b4>
 8002652:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002656:	428a      	cmp	r2, r1
 8002658:	d030      	beq.n	80026bc <HAL_DMA_IRQHandler+0x2b4>
 800265a:	3118      	adds	r1, #24
 800265c:	428a      	cmp	r2, r1
 800265e:	d02d      	beq.n	80026bc <HAL_DMA_IRQHandler+0x2b4>
 8002660:	3118      	adds	r1, #24
 8002662:	428a      	cmp	r2, r1
 8002664:	d02a      	beq.n	80026bc <HAL_DMA_IRQHandler+0x2b4>
 8002666:	3118      	adds	r1, #24
 8002668:	428a      	cmp	r2, r1
 800266a:	d027      	beq.n	80026bc <HAL_DMA_IRQHandler+0x2b4>
 800266c:	3118      	adds	r1, #24
 800266e:	428a      	cmp	r2, r1
 8002670:	d024      	beq.n	80026bc <HAL_DMA_IRQHandler+0x2b4>
 8002672:	3118      	adds	r1, #24
 8002674:	428a      	cmp	r2, r1
 8002676:	d021      	beq.n	80026bc <HAL_DMA_IRQHandler+0x2b4>
 8002678:	3118      	adds	r1, #24
 800267a:	428a      	cmp	r2, r1
 800267c:	d01e      	beq.n	80026bc <HAL_DMA_IRQHandler+0x2b4>
 800267e:	3118      	adds	r1, #24
 8002680:	428a      	cmp	r2, r1
 8002682:	d01b      	beq.n	80026bc <HAL_DMA_IRQHandler+0x2b4>
 8002684:	6813      	ldr	r3, [r2, #0]
 8002686:	e01d      	b.n	80026c4 <HAL_DMA_IRQHandler+0x2bc>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002688:	2301      	movs	r3, #1
 800268a:	fa03 f202 	lsl.w	r2, r3, r2
 800268e:	60ba      	str	r2, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002690:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002692:	f043 0302 	orr.w	r3, r3, #2
 8002696:	6563      	str	r3, [r4, #84]	; 0x54
 8002698:	e7ba      	b.n	8002610 <HAL_DMA_IRQHandler+0x208>
 800269a:	bf00      	nop
 800269c:	200000bc 	.word	0x200000bc
 80026a0:	1b4e81b5 	.word	0x1b4e81b5
 80026a4:	40020010 	.word	0x40020010
 80026a8:	40020028 	.word	0x40020028
 80026ac:	40020040 	.word	0x40020040
 80026b0:	58025408 	.word	0x58025408
 80026b4:	5802541c 	.word	0x5802541c
 80026b8:	58025430 	.word	0x58025430
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80026bc:	6812      	ldr	r2, [r2, #0]
 80026be:	f012 0f02 	tst.w	r2, #2
 80026c2:	d13d      	bne.n	8002740 <HAL_DMA_IRQHandler+0x338>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80026c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	2210      	movs	r2, #16
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	4233      	tst	r3, r6
 80026d2:	d05f      	beq.n	8002794 <HAL_DMA_IRQHandler+0x38c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80026d4:	6822      	ldr	r2, [r4, #0]
 80026d6:	489b      	ldr	r0, [pc, #620]	; (8002944 <HAL_DMA_IRQHandler+0x53c>)
 80026d8:	499b      	ldr	r1, [pc, #620]	; (8002948 <HAL_DMA_IRQHandler+0x540>)
 80026da:	428a      	cmp	r2, r1
 80026dc:	bf18      	it	ne
 80026de:	4282      	cmpne	r2, r0
 80026e0:	d034      	beq.n	800274c <HAL_DMA_IRQHandler+0x344>
 80026e2:	3118      	adds	r1, #24
 80026e4:	428a      	cmp	r2, r1
 80026e6:	d031      	beq.n	800274c <HAL_DMA_IRQHandler+0x344>
 80026e8:	3118      	adds	r1, #24
 80026ea:	428a      	cmp	r2, r1
 80026ec:	d02e      	beq.n	800274c <HAL_DMA_IRQHandler+0x344>
 80026ee:	3118      	adds	r1, #24
 80026f0:	428a      	cmp	r2, r1
 80026f2:	d02b      	beq.n	800274c <HAL_DMA_IRQHandler+0x344>
 80026f4:	3118      	adds	r1, #24
 80026f6:	428a      	cmp	r2, r1
 80026f8:	d028      	beq.n	800274c <HAL_DMA_IRQHandler+0x344>
 80026fa:	3118      	adds	r1, #24
 80026fc:	428a      	cmp	r2, r1
 80026fe:	d025      	beq.n	800274c <HAL_DMA_IRQHandler+0x344>
 8002700:	3118      	adds	r1, #24
 8002702:	428a      	cmp	r2, r1
 8002704:	d022      	beq.n	800274c <HAL_DMA_IRQHandler+0x344>
 8002706:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800270a:	428a      	cmp	r2, r1
 800270c:	d01e      	beq.n	800274c <HAL_DMA_IRQHandler+0x344>
 800270e:	3118      	adds	r1, #24
 8002710:	428a      	cmp	r2, r1
 8002712:	d01b      	beq.n	800274c <HAL_DMA_IRQHandler+0x344>
 8002714:	3118      	adds	r1, #24
 8002716:	428a      	cmp	r2, r1
 8002718:	d018      	beq.n	800274c <HAL_DMA_IRQHandler+0x344>
 800271a:	3118      	adds	r1, #24
 800271c:	428a      	cmp	r2, r1
 800271e:	d015      	beq.n	800274c <HAL_DMA_IRQHandler+0x344>
 8002720:	3118      	adds	r1, #24
 8002722:	428a      	cmp	r2, r1
 8002724:	d012      	beq.n	800274c <HAL_DMA_IRQHandler+0x344>
 8002726:	3118      	adds	r1, #24
 8002728:	428a      	cmp	r2, r1
 800272a:	d00f      	beq.n	800274c <HAL_DMA_IRQHandler+0x344>
 800272c:	3118      	adds	r1, #24
 800272e:	428a      	cmp	r2, r1
 8002730:	d00c      	beq.n	800274c <HAL_DMA_IRQHandler+0x344>
 8002732:	3118      	adds	r1, #24
 8002734:	428a      	cmp	r2, r1
 8002736:	d009      	beq.n	800274c <HAL_DMA_IRQHandler+0x344>
 8002738:	6812      	ldr	r2, [r2, #0]
 800273a:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800273e:	e008      	b.n	8002752 <HAL_DMA_IRQHandler+0x34a>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002740:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002742:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002744:	f043 0304 	orr.w	r3, r3, #4
 8002748:	6563      	str	r3, [r4, #84]	; 0x54
 800274a:	e7bb      	b.n	80026c4 <HAL_DMA_IRQHandler+0x2bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8002752:	b1fa      	cbz	r2, 8002794 <HAL_DMA_IRQHandler+0x38c>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002754:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002756:	6823      	ldr	r3, [r4, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800275e:	d00d      	beq.n	800277c <HAL_DMA_IRQHandler+0x374>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002766:	d104      	bne.n	8002772 <HAL_DMA_IRQHandler+0x36a>
            if(hdma->XferHalfCpltCallback != NULL)
 8002768:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800276a:	b19b      	cbz	r3, 8002794 <HAL_DMA_IRQHandler+0x38c>
              hdma->XferHalfCpltCallback(hdma);
 800276c:	4620      	mov	r0, r4
 800276e:	4798      	blx	r3
 8002770:	e010      	b.n	8002794 <HAL_DMA_IRQHandler+0x38c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002772:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002774:	b173      	cbz	r3, 8002794 <HAL_DMA_IRQHandler+0x38c>
              hdma->XferM1HalfCpltCallback(hdma);
 8002776:	4620      	mov	r0, r4
 8002778:	4798      	blx	r3
 800277a:	e00b      	b.n	8002794 <HAL_DMA_IRQHandler+0x38c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002782:	d103      	bne.n	800278c <HAL_DMA_IRQHandler+0x384>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	f022 0208 	bic.w	r2, r2, #8
 800278a:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800278c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800278e:	b10b      	cbz	r3, 8002794 <HAL_DMA_IRQHandler+0x38c>
            hdma->XferHalfCpltCallback(hdma);
 8002790:	4620      	mov	r0, r4
 8002792:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002794:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	2220      	movs	r2, #32
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	4233      	tst	r3, r6
 80027a2:	f000 808e 	beq.w	80028c2 <HAL_DMA_IRQHandler+0x4ba>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80027a6:	6822      	ldr	r2, [r4, #0]
 80027a8:	4866      	ldr	r0, [pc, #408]	; (8002944 <HAL_DMA_IRQHandler+0x53c>)
 80027aa:	4967      	ldr	r1, [pc, #412]	; (8002948 <HAL_DMA_IRQHandler+0x540>)
 80027ac:	428a      	cmp	r2, r1
 80027ae:	bf18      	it	ne
 80027b0:	4282      	cmpne	r2, r0
 80027b2:	d02e      	beq.n	8002812 <HAL_DMA_IRQHandler+0x40a>
 80027b4:	3118      	adds	r1, #24
 80027b6:	428a      	cmp	r2, r1
 80027b8:	d02b      	beq.n	8002812 <HAL_DMA_IRQHandler+0x40a>
 80027ba:	3118      	adds	r1, #24
 80027bc:	428a      	cmp	r2, r1
 80027be:	d028      	beq.n	8002812 <HAL_DMA_IRQHandler+0x40a>
 80027c0:	3118      	adds	r1, #24
 80027c2:	428a      	cmp	r2, r1
 80027c4:	d025      	beq.n	8002812 <HAL_DMA_IRQHandler+0x40a>
 80027c6:	3118      	adds	r1, #24
 80027c8:	428a      	cmp	r2, r1
 80027ca:	d022      	beq.n	8002812 <HAL_DMA_IRQHandler+0x40a>
 80027cc:	3118      	adds	r1, #24
 80027ce:	428a      	cmp	r2, r1
 80027d0:	d01f      	beq.n	8002812 <HAL_DMA_IRQHandler+0x40a>
 80027d2:	3118      	adds	r1, #24
 80027d4:	428a      	cmp	r2, r1
 80027d6:	d01c      	beq.n	8002812 <HAL_DMA_IRQHandler+0x40a>
 80027d8:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80027dc:	428a      	cmp	r2, r1
 80027de:	d018      	beq.n	8002812 <HAL_DMA_IRQHandler+0x40a>
 80027e0:	3118      	adds	r1, #24
 80027e2:	428a      	cmp	r2, r1
 80027e4:	d015      	beq.n	8002812 <HAL_DMA_IRQHandler+0x40a>
 80027e6:	3118      	adds	r1, #24
 80027e8:	428a      	cmp	r2, r1
 80027ea:	d012      	beq.n	8002812 <HAL_DMA_IRQHandler+0x40a>
 80027ec:	3118      	adds	r1, #24
 80027ee:	428a      	cmp	r2, r1
 80027f0:	d00f      	beq.n	8002812 <HAL_DMA_IRQHandler+0x40a>
 80027f2:	3118      	adds	r1, #24
 80027f4:	428a      	cmp	r2, r1
 80027f6:	d00c      	beq.n	8002812 <HAL_DMA_IRQHandler+0x40a>
 80027f8:	3118      	adds	r1, #24
 80027fa:	428a      	cmp	r2, r1
 80027fc:	d009      	beq.n	8002812 <HAL_DMA_IRQHandler+0x40a>
 80027fe:	3118      	adds	r1, #24
 8002800:	428a      	cmp	r2, r1
 8002802:	d006      	beq.n	8002812 <HAL_DMA_IRQHandler+0x40a>
 8002804:	3118      	adds	r1, #24
 8002806:	428a      	cmp	r2, r1
 8002808:	d003      	beq.n	8002812 <HAL_DMA_IRQHandler+0x40a>
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8002810:	e002      	b.n	8002818 <HAL_DMA_IRQHandler+0x410>
 8002812:	6812      	ldr	r2, [r2, #0]
 8002814:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002818:	2a00      	cmp	r2, #0
 800281a:	d052      	beq.n	80028c2 <HAL_DMA_IRQHandler+0x4ba>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800281c:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800281e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b04      	cmp	r3, #4
 8002826:	d00e      	beq.n	8002846 <HAL_DMA_IRQHandler+0x43e>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002828:	6823      	ldr	r3, [r4, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002830:	d035      	beq.n	800289e <HAL_DMA_IRQHandler+0x496>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002838:	d12c      	bne.n	8002894 <HAL_DMA_IRQHandler+0x48c>
            if(hdma->XferM1CpltCallback != NULL)
 800283a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800283c:	2b00      	cmp	r3, #0
 800283e:	d040      	beq.n	80028c2 <HAL_DMA_IRQHandler+0x4ba>
              hdma->XferM1CpltCallback(hdma);
 8002840:	4620      	mov	r0, r4
 8002842:	4798      	blx	r3
 8002844:	e03d      	b.n	80028c2 <HAL_DMA_IRQHandler+0x4ba>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002846:	6822      	ldr	r2, [r4, #0]
 8002848:	6813      	ldr	r3, [r2, #0]
 800284a:	f023 0316 	bic.w	r3, r3, #22
 800284e:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002850:	6822      	ldr	r2, [r4, #0]
 8002852:	6953      	ldr	r3, [r2, #20]
 8002854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002858:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800285a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800285c:	b1b3      	cbz	r3, 800288c <HAL_DMA_IRQHandler+0x484>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800285e:	6822      	ldr	r2, [r4, #0]
 8002860:	6813      	ldr	r3, [r2, #0]
 8002862:	f023 0308 	bic.w	r3, r3, #8
 8002866:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002868:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800286a:	f003 021f 	and.w	r2, r3, #31
 800286e:	233f      	movs	r3, #63	; 0x3f
 8002870:	4093      	lsls	r3, r2
 8002872:	60bb      	str	r3, [r7, #8]
          __HAL_UNLOCK(hdma);
 8002874:	2300      	movs	r3, #0
 8002876:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800287a:	2301      	movs	r3, #1
 800287c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 8002880:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002882:	2b00      	cmp	r3, #0
 8002884:	d07f      	beq.n	8002986 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferAbortCallback(hdma);
 8002886:	4620      	mov	r0, r4
 8002888:	4798      	blx	r3
 800288a:	e07c      	b.n	8002986 <HAL_DMA_IRQHandler+0x57e>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800288c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1e5      	bne.n	800285e <HAL_DMA_IRQHandler+0x456>
 8002892:	e7e9      	b.n	8002868 <HAL_DMA_IRQHandler+0x460>
            if(hdma->XferCpltCallback != NULL)
 8002894:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002896:	b1a3      	cbz	r3, 80028c2 <HAL_DMA_IRQHandler+0x4ba>
              hdma->XferCpltCallback(hdma);
 8002898:	4620      	mov	r0, r4
 800289a:	4798      	blx	r3
 800289c:	e011      	b.n	80028c2 <HAL_DMA_IRQHandler+0x4ba>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	f412 7f80 	tst.w	r2, #256	; 0x100
 80028a4:	d109      	bne.n	80028ba <HAL_DMA_IRQHandler+0x4b2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	f022 0210 	bic.w	r2, r2, #16
 80028ac:	601a      	str	r2, [r3, #0]
            __HAL_UNLOCK(hdma);
 80028ae:	2300      	movs	r3, #0
 80028b0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 80028b4:	2301      	movs	r3, #1
 80028b6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferCpltCallback != NULL)
 80028ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80028bc:	b10b      	cbz	r3, 80028c2 <HAL_DMA_IRQHandler+0x4ba>
            hdma->XferCpltCallback(hdma);
 80028be:	4620      	mov	r0, r4
 80028c0:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d05e      	beq.n	8002986 <HAL_DMA_IRQHandler+0x57e>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80028c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80028ca:	f013 0f01 	tst.w	r3, #1
 80028ce:	d056      	beq.n	800297e <HAL_DMA_IRQHandler+0x576>
        hdma->State = HAL_DMA_STATE_ABORT;
 80028d0:	2304      	movs	r3, #4
 80028d2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 80028d6:	6823      	ldr	r3, [r4, #0]
 80028d8:	491a      	ldr	r1, [pc, #104]	; (8002944 <HAL_DMA_IRQHandler+0x53c>)
 80028da:	4a1b      	ldr	r2, [pc, #108]	; (8002948 <HAL_DMA_IRQHandler+0x540>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	bf18      	it	ne
 80028e0:	428b      	cmpne	r3, r1
 80028e2:	d033      	beq.n	800294c <HAL_DMA_IRQHandler+0x544>
 80028e4:	3218      	adds	r2, #24
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d030      	beq.n	800294c <HAL_DMA_IRQHandler+0x544>
 80028ea:	3218      	adds	r2, #24
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d02d      	beq.n	800294c <HAL_DMA_IRQHandler+0x544>
 80028f0:	3218      	adds	r2, #24
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d02a      	beq.n	800294c <HAL_DMA_IRQHandler+0x544>
 80028f6:	3218      	adds	r2, #24
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d027      	beq.n	800294c <HAL_DMA_IRQHandler+0x544>
 80028fc:	3218      	adds	r2, #24
 80028fe:	4293      	cmp	r3, r2
 8002900:	d024      	beq.n	800294c <HAL_DMA_IRQHandler+0x544>
 8002902:	3218      	adds	r2, #24
 8002904:	4293      	cmp	r3, r2
 8002906:	d021      	beq.n	800294c <HAL_DMA_IRQHandler+0x544>
 8002908:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800290c:	4293      	cmp	r3, r2
 800290e:	d01d      	beq.n	800294c <HAL_DMA_IRQHandler+0x544>
 8002910:	3218      	adds	r2, #24
 8002912:	4293      	cmp	r3, r2
 8002914:	d01a      	beq.n	800294c <HAL_DMA_IRQHandler+0x544>
 8002916:	3218      	adds	r2, #24
 8002918:	4293      	cmp	r3, r2
 800291a:	d017      	beq.n	800294c <HAL_DMA_IRQHandler+0x544>
 800291c:	3218      	adds	r2, #24
 800291e:	4293      	cmp	r3, r2
 8002920:	d014      	beq.n	800294c <HAL_DMA_IRQHandler+0x544>
 8002922:	3218      	adds	r2, #24
 8002924:	4293      	cmp	r3, r2
 8002926:	d011      	beq.n	800294c <HAL_DMA_IRQHandler+0x544>
 8002928:	3218      	adds	r2, #24
 800292a:	4293      	cmp	r3, r2
 800292c:	d00e      	beq.n	800294c <HAL_DMA_IRQHandler+0x544>
 800292e:	3218      	adds	r2, #24
 8002930:	4293      	cmp	r3, r2
 8002932:	d00b      	beq.n	800294c <HAL_DMA_IRQHandler+0x544>
 8002934:	3218      	adds	r2, #24
 8002936:	4293      	cmp	r3, r2
 8002938:	d008      	beq.n	800294c <HAL_DMA_IRQHandler+0x544>
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	f022 0201 	bic.w	r2, r2, #1
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	e007      	b.n	8002954 <HAL_DMA_IRQHandler+0x54c>
 8002944:	40020010 	.word	0x40020010
 8002948:	40020028 	.word	0x40020028
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	f022 0201 	bic.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 8002954:	9b01      	ldr	r3, [sp, #4]
 8002956:	3301      	adds	r3, #1
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	42ab      	cmp	r3, r5
 800295c:	d804      	bhi.n	8002968 <HAL_DMA_IRQHandler+0x560>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800295e:	6823      	ldr	r3, [r4, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f013 0f01 	tst.w	r3, #1
 8002966:	d1f5      	bne.n	8002954 <HAL_DMA_IRQHandler+0x54c>
        __HAL_UNLOCK(hdma);
 8002968:	2300      	movs	r3, #0
 800296a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800296e:	6823      	ldr	r3, [r4, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f013 0f01 	tst.w	r3, #1
 8002976:	d008      	beq.n	800298a <HAL_DMA_IRQHandler+0x582>
          hdma->State = HAL_DMA_STATE_ERROR;
 8002978:	2303      	movs	r3, #3
 800297a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 800297e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002980:	b10b      	cbz	r3, 8002986 <HAL_DMA_IRQHandler+0x57e>
        hdma->XferErrorCallback(hdma);
 8002982:	4620      	mov	r0, r4
 8002984:	4798      	blx	r3
}
 8002986:	b003      	add	sp, #12
 8002988:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hdma->State = HAL_DMA_STATE_READY;
 800298a:	2301      	movs	r3, #1
 800298c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8002990:	e7f5      	b.n	800297e <HAL_DMA_IRQHandler+0x576>
          if(hdma->XferHalfCpltCallback != NULL)
 8002992:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0f6      	beq.n	8002986 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferHalfCpltCallback(hdma);
 8002998:	4620      	mov	r0, r4
 800299a:	4798      	blx	r3
 800299c:	e7f3      	b.n	8002986 <HAL_DMA_IRQHandler+0x57e>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800299e:	f012 0f20 	tst.w	r2, #32
 80029a2:	d135      	bne.n	8002a10 <HAL_DMA_IRQHandler+0x608>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029a4:	6823      	ldr	r3, [r4, #0]
 80029a6:	4964      	ldr	r1, [pc, #400]	; (8002b38 <HAL_DMA_IRQHandler+0x730>)
 80029a8:	4a64      	ldr	r2, [pc, #400]	; (8002b3c <HAL_DMA_IRQHandler+0x734>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	bf18      	it	ne
 80029ae:	428b      	cmpne	r3, r1
 80029b0:	d02a      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x600>
 80029b2:	3218      	adds	r2, #24
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d027      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x600>
 80029b8:	3218      	adds	r2, #24
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d024      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x600>
 80029be:	3218      	adds	r2, #24
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d021      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x600>
 80029c4:	3218      	adds	r2, #24
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d01e      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x600>
 80029ca:	3218      	adds	r2, #24
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d01b      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x600>
 80029d0:	3218      	adds	r2, #24
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d018      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x600>
 80029d6:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80029da:	4293      	cmp	r3, r2
 80029dc:	d014      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x600>
 80029de:	3218      	adds	r2, #24
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d011      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x600>
 80029e4:	3218      	adds	r2, #24
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00e      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x600>
 80029ea:	3218      	adds	r2, #24
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00b      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x600>
 80029f0:	3218      	adds	r2, #24
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d008      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x600>
 80029f6:	3218      	adds	r2, #24
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d005      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x600>
 80029fc:	3218      	adds	r2, #24
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d002      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x600>
 8002a02:	3218      	adds	r2, #24
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d109      	bne.n	8002a1c <HAL_DMA_IRQHandler+0x614>
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	f022 0208 	bic.w	r2, r2, #8
 8002a0e:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8002a10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0b7      	beq.n	8002986 <HAL_DMA_IRQHandler+0x57e>
          hdma->XferHalfCpltCallback(hdma);
 8002a16:	4620      	mov	r0, r4
 8002a18:	4798      	blx	r3
 8002a1a:	e7b4      	b.n	8002986 <HAL_DMA_IRQHandler+0x57e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	f022 0204 	bic.w	r2, r2, #4
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	e7f4      	b.n	8002a10 <HAL_DMA_IRQHandler+0x608>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002a26:	2002      	movs	r0, #2
 8002a28:	4088      	lsls	r0, r1
 8002a2a:	ea10 0f0c 	tst.w	r0, ip
 8002a2e:	d060      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x6ea>
 8002a30:	f012 0f02 	tst.w	r2, #2
 8002a34:	d05d      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x6ea>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002a36:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a38:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002a3c:	d00e      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x654>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002a3e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002a42:	d105      	bne.n	8002a50 <HAL_DMA_IRQHandler+0x648>
          if(hdma->XferM1CpltCallback != NULL)
 8002a44:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d09d      	beq.n	8002986 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferM1CpltCallback(hdma);
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	4798      	blx	r3
 8002a4e:	e79a      	b.n	8002986 <HAL_DMA_IRQHandler+0x57e>
          if(hdma->XferCpltCallback != NULL)
 8002a50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d097      	beq.n	8002986 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferCpltCallback(hdma);
 8002a56:	4620      	mov	r0, r4
 8002a58:	4798      	blx	r3
 8002a5a:	e794      	b.n	8002986 <HAL_DMA_IRQHandler+0x57e>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002a5c:	f012 0f20 	tst.w	r2, #32
 8002a60:	d13b      	bne.n	8002ada <HAL_DMA_IRQHandler+0x6d2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	4934      	ldr	r1, [pc, #208]	; (8002b38 <HAL_DMA_IRQHandler+0x730>)
 8002a66:	4a35      	ldr	r2, [pc, #212]	; (8002b3c <HAL_DMA_IRQHandler+0x734>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	bf18      	it	ne
 8002a6c:	428b      	cmpne	r3, r1
 8002a6e:	d02a      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x6be>
 8002a70:	3218      	adds	r2, #24
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d027      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x6be>
 8002a76:	3218      	adds	r2, #24
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d024      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x6be>
 8002a7c:	3218      	adds	r2, #24
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d021      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x6be>
 8002a82:	3218      	adds	r2, #24
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d01e      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x6be>
 8002a88:	3218      	adds	r2, #24
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d01b      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x6be>
 8002a8e:	3218      	adds	r2, #24
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d018      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x6be>
 8002a94:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d014      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x6be>
 8002a9c:	3218      	adds	r2, #24
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d011      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x6be>
 8002aa2:	3218      	adds	r2, #24
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00e      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x6be>
 8002aa8:	3218      	adds	r2, #24
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d00b      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x6be>
 8002aae:	3218      	adds	r2, #24
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d008      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x6be>
 8002ab4:	3218      	adds	r2, #24
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d005      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x6be>
 8002aba:	3218      	adds	r2, #24
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d002      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x6be>
 8002ac0:	3218      	adds	r2, #24
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d110      	bne.n	8002ae8 <HAL_DMA_IRQHandler+0x6e0>
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	f022 0214 	bic.w	r2, r2, #20
 8002acc:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8002ada:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f43f af52 	beq.w	8002986 <HAL_DMA_IRQHandler+0x57e>
          hdma->XferCpltCallback(hdma);
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	4798      	blx	r3
 8002ae6:	e74e      	b.n	8002986 <HAL_DMA_IRQHandler+0x57e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	f022 020a 	bic.w	r2, r2, #10
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	e7ed      	b.n	8002ace <HAL_DMA_IRQHandler+0x6c6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002af2:	2008      	movs	r0, #8
 8002af4:	fa00 f101 	lsl.w	r1, r0, r1
 8002af8:	ea11 0f0c 	tst.w	r1, ip
 8002afc:	f43f af43 	beq.w	8002986 <HAL_DMA_IRQHandler+0x57e>
 8002b00:	f012 0f08 	tst.w	r2, #8
 8002b04:	f43f af3f 	beq.w	8002986 <HAL_DMA_IRQHandler+0x57e>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	f022 020e 	bic.w	r2, r2, #14
 8002b0e:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002b10:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002b12:	f003 031f 	and.w	r3, r3, #31
 8002b16:	2201      	movs	r2, #1
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	607b      	str	r3, [r7, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b1e:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8002b20:	2300      	movs	r3, #0
 8002b22:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002b26:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8002b2a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f43f af2a 	beq.w	8002986 <HAL_DMA_IRQHandler+0x57e>
        hdma->XferErrorCallback(hdma);
 8002b32:	4620      	mov	r0, r4
 8002b34:	4798      	blx	r3
 8002b36:	e726      	b.n	8002986 <HAL_DMA_IRQHandler+0x57e>
 8002b38:	40020010 	.word	0x40020010
 8002b3c:	40020028 	.word	0x40020028

08002b40 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8002b40:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8002b42:	4770      	bx	lr

08002b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b46:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8002b48:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b4a:	e03a      	b.n	8002bc2 <HAL_GPIO_Init+0x7e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b4c:	2409      	movs	r4, #9
 8002b4e:	e000      	b.n	8002b52 <HAL_GPIO_Init+0xe>
 8002b50:	2400      	movs	r4, #0
 8002b52:	40b4      	lsls	r4, r6
 8002b54:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b56:	3502      	adds	r5, #2
 8002b58:	4e6e      	ldr	r6, [pc, #440]	; (8002d14 <HAL_GPIO_Init+0x1d0>)
 8002b5a:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002b5e:	4c6e      	ldr	r4, [pc, #440]	; (8002d18 <HAL_GPIO_Init+0x1d4>)
 8002b60:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8002b62:	43d4      	mvns	r4, r2
 8002b64:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b68:	684f      	ldr	r7, [r1, #4]
 8002b6a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002b6e:	d001      	beq.n	8002b74 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8002b70:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002b74:	4d68      	ldr	r5, [pc, #416]	; (8002d18 <HAL_GPIO_Init+0x1d4>)
 8002b76:	602e      	str	r6, [r5, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002b78:	686e      	ldr	r6, [r5, #4]
        temp &= ~(iocurrent);
 8002b7a:	ea04 0506 	and.w	r5, r4, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b7e:	684f      	ldr	r7, [r1, #4]
 8002b80:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002b84:	d001      	beq.n	8002b8a <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 8002b86:	ea42 0506 	orr.w	r5, r2, r6
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002b8a:	4e63      	ldr	r6, [pc, #396]	; (8002d18 <HAL_GPIO_Init+0x1d4>)
 8002b8c:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b8e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002b92:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8002b94:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b98:	684f      	ldr	r7, [r1, #4]
 8002b9a:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002b9e:	d001      	beq.n	8002ba4 <HAL_GPIO_Init+0x60>
        {
          temp |= iocurrent;
 8002ba0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8002ba4:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002ba8:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8002baa:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002bac:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bae:	684e      	ldr	r6, [r1, #4]
 8002bb0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002bb4:	d001      	beq.n	8002bba <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8002bb6:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8002bba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bbe:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 8002bc0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002bc2:	680a      	ldr	r2, [r1, #0]
 8002bc4:	fa32 f403 	lsrs.w	r4, r2, r3
 8002bc8:	f000 80a2 	beq.w	8002d10 <HAL_GPIO_Init+0x1cc>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002bcc:	2401      	movs	r4, #1
 8002bce:	409c      	lsls	r4, r3
    if (iocurrent != 0x00U)
 8002bd0:	4022      	ands	r2, r4
 8002bd2:	d0f5      	beq.n	8002bc0 <HAL_GPIO_Init+0x7c>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bd4:	684d      	ldr	r5, [r1, #4]
 8002bd6:	1e6e      	subs	r6, r5, #1
 8002bd8:	2d11      	cmp	r5, #17
 8002bda:	bf18      	it	ne
 8002bdc:	2e01      	cmpne	r6, #1
 8002bde:	d901      	bls.n	8002be4 <HAL_GPIO_Init+0xa0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002be0:	2d12      	cmp	r5, #18
 8002be2:	d112      	bne.n	8002c0a <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR;
 8002be4:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002be6:	005f      	lsls	r7, r3, #1
 8002be8:	2503      	movs	r5, #3
 8002bea:	40bd      	lsls	r5, r7
 8002bec:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bf0:	68cd      	ldr	r5, [r1, #12]
 8002bf2:	40bd      	lsls	r5, r7
 8002bf4:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8002bf6:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8002bf8:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bfa:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002bfe:	684d      	ldr	r5, [r1, #4]
 8002c00:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8002c04:	409c      	lsls	r4, r3
 8002c06:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8002c08:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8002c0a:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c0c:	005f      	lsls	r7, r3, #1
 8002c0e:	2503      	movs	r5, #3
 8002c10:	40bd      	lsls	r5, r7
 8002c12:	43ec      	mvns	r4, r5
 8002c14:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c16:	688d      	ldr	r5, [r1, #8]
 8002c18:	40bd      	lsls	r5, r7
 8002c1a:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8002c1c:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c1e:	684d      	ldr	r5, [r1, #4]
 8002c20:	2d12      	cmp	r5, #18
 8002c22:	bf18      	it	ne
 8002c24:	2d02      	cmpne	r5, #2
 8002c26:	d113      	bne.n	8002c50 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8002c28:	08de      	lsrs	r6, r3, #3
 8002c2a:	3608      	adds	r6, #8
 8002c2c:	f850 e026 	ldr.w	lr, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c30:	f003 0507 	and.w	r5, r3, #7
 8002c34:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8002c38:	250f      	movs	r5, #15
 8002c3a:	fa05 f50c 	lsl.w	r5, r5, ip
 8002c3e:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c42:	690d      	ldr	r5, [r1, #16]
 8002c44:	fa05 f50c 	lsl.w	r5, r5, ip
 8002c48:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002c4c:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8002c50:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c52:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c54:	684c      	ldr	r4, [r1, #4]
 8002c56:	f004 0403 	and.w	r4, r4, #3
 8002c5a:	40bc      	lsls	r4, r7
 8002c5c:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8002c5e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c60:	684c      	ldr	r4, [r1, #4]
 8002c62:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8002c66:	d0ab      	beq.n	8002bc0 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c68:	4c2c      	ldr	r4, [pc, #176]	; (8002d1c <HAL_GPIO_Init+0x1d8>)
 8002c6a:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 8002c6e:	f045 0502 	orr.w	r5, r5, #2
 8002c72:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 8002c76:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 8002c7a:	f004 0402 	and.w	r4, r4, #2
 8002c7e:	9401      	str	r4, [sp, #4]
 8002c80:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002c82:	089d      	lsrs	r5, r3, #2
 8002c84:	1cae      	adds	r6, r5, #2
 8002c86:	4c23      	ldr	r4, [pc, #140]	; (8002d14 <HAL_GPIO_Init+0x1d0>)
 8002c88:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c8c:	f003 0403 	and.w	r4, r3, #3
 8002c90:	00a6      	lsls	r6, r4, #2
 8002c92:	240f      	movs	r4, #15
 8002c94:	40b4      	lsls	r4, r6
 8002c96:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c9a:	4c21      	ldr	r4, [pc, #132]	; (8002d20 <HAL_GPIO_Init+0x1dc>)
 8002c9c:	42a0      	cmp	r0, r4
 8002c9e:	f43f af57 	beq.w	8002b50 <HAL_GPIO_Init+0xc>
 8002ca2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ca6:	42a0      	cmp	r0, r4
 8002ca8:	d022      	beq.n	8002cf0 <HAL_GPIO_Init+0x1ac>
 8002caa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002cae:	42a0      	cmp	r0, r4
 8002cb0:	d020      	beq.n	8002cf4 <HAL_GPIO_Init+0x1b0>
 8002cb2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002cb6:	42a0      	cmp	r0, r4
 8002cb8:	d01e      	beq.n	8002cf8 <HAL_GPIO_Init+0x1b4>
 8002cba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002cbe:	42a0      	cmp	r0, r4
 8002cc0:	d01c      	beq.n	8002cfc <HAL_GPIO_Init+0x1b8>
 8002cc2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002cc6:	42a0      	cmp	r0, r4
 8002cc8:	d01a      	beq.n	8002d00 <HAL_GPIO_Init+0x1bc>
 8002cca:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002cce:	42a0      	cmp	r0, r4
 8002cd0:	d018      	beq.n	8002d04 <HAL_GPIO_Init+0x1c0>
 8002cd2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002cd6:	42a0      	cmp	r0, r4
 8002cd8:	d016      	beq.n	8002d08 <HAL_GPIO_Init+0x1c4>
 8002cda:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002cde:	42a0      	cmp	r0, r4
 8002ce0:	d014      	beq.n	8002d0c <HAL_GPIO_Init+0x1c8>
 8002ce2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ce6:	42a0      	cmp	r0, r4
 8002ce8:	f43f af30 	beq.w	8002b4c <HAL_GPIO_Init+0x8>
 8002cec:	240a      	movs	r4, #10
 8002cee:	e730      	b.n	8002b52 <HAL_GPIO_Init+0xe>
 8002cf0:	2401      	movs	r4, #1
 8002cf2:	e72e      	b.n	8002b52 <HAL_GPIO_Init+0xe>
 8002cf4:	2402      	movs	r4, #2
 8002cf6:	e72c      	b.n	8002b52 <HAL_GPIO_Init+0xe>
 8002cf8:	2403      	movs	r4, #3
 8002cfa:	e72a      	b.n	8002b52 <HAL_GPIO_Init+0xe>
 8002cfc:	2404      	movs	r4, #4
 8002cfe:	e728      	b.n	8002b52 <HAL_GPIO_Init+0xe>
 8002d00:	2405      	movs	r4, #5
 8002d02:	e726      	b.n	8002b52 <HAL_GPIO_Init+0xe>
 8002d04:	2406      	movs	r4, #6
 8002d06:	e724      	b.n	8002b52 <HAL_GPIO_Init+0xe>
 8002d08:	2407      	movs	r4, #7
 8002d0a:	e722      	b.n	8002b52 <HAL_GPIO_Init+0xe>
 8002d0c:	2408      	movs	r4, #8
 8002d0e:	e720      	b.n	8002b52 <HAL_GPIO_Init+0xe>
  }
}
 8002d10:	b003      	add	sp, #12
 8002d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d14:	58000400 	.word	0x58000400
 8002d18:	58000080 	.word	0x58000080
 8002d1c:	58024400 	.word	0x58024400
 8002d20:	58020000 	.word	0x58020000

08002d24 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002d24:	6903      	ldr	r3, [r0, #16]
 8002d26:	4219      	tst	r1, r3
 8002d28:	d101      	bne.n	8002d2e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d2a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002d2c:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8002d2e:	2001      	movs	r0, #1
 8002d30:	4770      	bx	lr

08002d32 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d32:	b912      	cbnz	r2, 8002d3a <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d34:	0409      	lsls	r1, r1, #16
 8002d36:	6181      	str	r1, [r0, #24]
  }
}
 8002d38:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8002d3a:	6181      	str	r1, [r0, #24]
 8002d3c:	4770      	bx	lr

08002d3e <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d3e:	6803      	ldr	r3, [r0, #0]
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	f012 0f02 	tst.w	r2, #2
 8002d46:	d001      	beq.n	8002d4c <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d48:	2200      	movs	r2, #0
 8002d4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d4c:	6803      	ldr	r3, [r0, #0]
 8002d4e:	699a      	ldr	r2, [r3, #24]
 8002d50:	f012 0f01 	tst.w	r2, #1
 8002d54:	d103      	bne.n	8002d5e <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d56:	699a      	ldr	r2, [r3, #24]
 8002d58:	f042 0201 	orr.w	r2, r2, #1
 8002d5c:	619a      	str	r2, [r3, #24]
  }
}
 8002d5e:	4770      	bx	lr

08002d60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002d60:	b470      	push	{r4, r5, r6}
 8002d62:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d64:	6805      	ldr	r5, [r0, #0]
 8002d66:	6868      	ldr	r0, [r5, #4]
 8002d68:	0d74      	lsrs	r4, r6, #21
 8002d6a:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8002d6e:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8002d72:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8002d76:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8002d7a:	f044 0403 	orr.w	r4, r4, #3
 8002d7e:	ea20 0004 	bic.w	r0, r0, r4
 8002d82:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002d86:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002d8a:	4319      	orrs	r1, r3
 8002d8c:	4331      	orrs	r1, r6
 8002d8e:	4301      	orrs	r1, r0
 8002d90:	6069      	str	r1, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002d92:	bc70      	pop	{r4, r5, r6}
 8002d94:	4770      	bx	lr

08002d96 <I2C_IsAcknowledgeFailed>:
{
 8002d96:	b570      	push	{r4, r5, r6, lr}
 8002d98:	4604      	mov	r4, r0
 8002d9a:	460d      	mov	r5, r1
 8002d9c:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d9e:	6803      	ldr	r3, [r0, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f013 0f10 	tst.w	r3, #16
 8002da6:	d01c      	beq.n	8002de2 <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002da8:	6823      	ldr	r3, [r4, #0]
 8002daa:	699a      	ldr	r2, [r3, #24]
 8002dac:	f012 0f20 	tst.w	r2, #32
 8002db0:	d119      	bne.n	8002de6 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8002db2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002db6:	d0f7      	beq.n	8002da8 <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db8:	f7fd faee 	bl	8000398 <HAL_GetTick>
 8002dbc:	1b80      	subs	r0, r0, r6
 8002dbe:	42a8      	cmp	r0, r5
 8002dc0:	d801      	bhi.n	8002dc6 <I2C_IsAcknowledgeFailed+0x30>
 8002dc2:	2d00      	cmp	r5, #0
 8002dc4:	d1f0      	bne.n	8002da8 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002dc8:	f043 0320 	orr.w	r3, r3, #32
 8002dcc:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002dce:	2320      	movs	r3, #32
 8002dd0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8002dda:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8002dde:	2001      	movs	r0, #1
 8002de0:	e020      	b.n	8002e24 <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 8002de2:	2000      	movs	r0, #0
 8002de4:	e01e      	b.n	8002e24 <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002de6:	2210      	movs	r2, #16
 8002de8:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dea:	6823      	ldr	r3, [r4, #0]
 8002dec:	2520      	movs	r5, #32
 8002dee:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002df0:	4620      	mov	r0, r4
 8002df2:	f7ff ffa4 	bl	8002d3e <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002df6:	6822      	ldr	r2, [r4, #0]
 8002df8:	6853      	ldr	r3, [r2, #4]
 8002dfa:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002dfe:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002e02:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002e06:	f023 0301 	bic.w	r3, r3, #1
 8002e0a:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e0e:	f043 0304 	orr.w	r3, r3, #4
 8002e12:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e14:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002e1e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8002e22:	2001      	movs	r0, #1
}
 8002e24:	bd70      	pop	{r4, r5, r6, pc}

08002e26 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002e26:	b570      	push	{r4, r5, r6, lr}
 8002e28:	4604      	mov	r4, r0
 8002e2a:	460d      	mov	r5, r1
 8002e2c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e2e:	6823      	ldr	r3, [r4, #0]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f013 0f02 	tst.w	r3, #2
 8002e36:	d11d      	bne.n	8002e74 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e38:	4632      	mov	r2, r6
 8002e3a:	4629      	mov	r1, r5
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	f7ff ffaa 	bl	8002d96 <I2C_IsAcknowledgeFailed>
 8002e42:	b9c8      	cbnz	r0, 8002e78 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8002e44:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002e48:	d0f1      	beq.n	8002e2e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e4a:	f7fd faa5 	bl	8000398 <HAL_GetTick>
 8002e4e:	1b80      	subs	r0, r0, r6
 8002e50:	42a8      	cmp	r0, r5
 8002e52:	d801      	bhi.n	8002e58 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002e54:	2d00      	cmp	r5, #0
 8002e56:	d1ea      	bne.n	8002e2e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e5a:	f043 0320 	orr.w	r3, r3, #32
 8002e5e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e60:	2320      	movs	r3, #32
 8002e62:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e66:	2300      	movs	r3, #0
 8002e68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002e6c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002e70:	2001      	movs	r0, #1
 8002e72:	e000      	b.n	8002e76 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8002e74:	2000      	movs	r0, #0
}
 8002e76:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002e78:	2001      	movs	r0, #1
 8002e7a:	e7fc      	b.n	8002e76 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08002e7c <I2C_WaitOnFlagUntilTimeout>:
{
 8002e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7e:	4605      	mov	r5, r0
 8002e80:	460f      	mov	r7, r1
 8002e82:	4616      	mov	r6, r2
 8002e84:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e86:	682b      	ldr	r3, [r5, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	ea37 0303 	bics.w	r3, r7, r3
 8002e8e:	bf0c      	ite	eq
 8002e90:	2301      	moveq	r3, #1
 8002e92:	2300      	movne	r3, #0
 8002e94:	42b3      	cmp	r3, r6
 8002e96:	d118      	bne.n	8002eca <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8002e98:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002e9c:	d0f3      	beq.n	8002e86 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e9e:	f7fd fa7b 	bl	8000398 <HAL_GetTick>
 8002ea2:	9b06      	ldr	r3, [sp, #24]
 8002ea4:	1ac0      	subs	r0, r0, r3
 8002ea6:	42a0      	cmp	r0, r4
 8002ea8:	d801      	bhi.n	8002eae <I2C_WaitOnFlagUntilTimeout+0x32>
 8002eaa:	2c00      	cmp	r4, #0
 8002eac:	d1eb      	bne.n	8002e86 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eae:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002eb0:	f043 0320 	orr.w	r3, r3, #32
 8002eb4:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002eb6:	2320      	movs	r3, #32
 8002eb8:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002ec2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8002ec6:	2001      	movs	r0, #1
 8002ec8:	e000      	b.n	8002ecc <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 8002eca:	2000      	movs	r0, #0
}
 8002ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002ece <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002ece:	b570      	push	{r4, r5, r6, lr}
 8002ed0:	4605      	mov	r5, r0
 8002ed2:	460c      	mov	r4, r1
 8002ed4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ed6:	682b      	ldr	r3, [r5, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	f013 0f20 	tst.w	r3, #32
 8002ede:	d11a      	bne.n	8002f16 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ee0:	4632      	mov	r2, r6
 8002ee2:	4621      	mov	r1, r4
 8002ee4:	4628      	mov	r0, r5
 8002ee6:	f7ff ff56 	bl	8002d96 <I2C_IsAcknowledgeFailed>
 8002eea:	b9b0      	cbnz	r0, 8002f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eec:	f7fd fa54 	bl	8000398 <HAL_GetTick>
 8002ef0:	1b80      	subs	r0, r0, r6
 8002ef2:	42a0      	cmp	r0, r4
 8002ef4:	d801      	bhi.n	8002efa <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8002ef6:	2c00      	cmp	r4, #0
 8002ef8:	d1ed      	bne.n	8002ed6 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002efa:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002efc:	f043 0320 	orr.w	r3, r3, #32
 8002f00:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f02:	2320      	movs	r3, #32
 8002f04:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002f0e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8002f12:	2001      	movs	r0, #1
}
 8002f14:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002f16:	2000      	movs	r0, #0
 8002f18:	e7fc      	b.n	8002f14 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8002f1a:	2001      	movs	r0, #1
 8002f1c:	e7fa      	b.n	8002f14 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
	...

08002f20 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002f20:	2800      	cmp	r0, #0
 8002f22:	d057      	beq.n	8002fd4 <HAL_I2C_Init+0xb4>
{
 8002f24:	b510      	push	{r4, lr}
 8002f26:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f28:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d041      	beq.n	8002fb4 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f30:	2324      	movs	r3, #36	; 0x24
 8002f32:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002f36:	6822      	ldr	r2, [r4, #0]
 8002f38:	6813      	ldr	r3, [r2, #0]
 8002f3a:	f023 0301 	bic.w	r3, r3, #1
 8002f3e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f40:	6863      	ldr	r3, [r4, #4]
 8002f42:	6822      	ldr	r2, [r4, #0]
 8002f44:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002f48:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f4a:	6822      	ldr	r2, [r4, #0]
 8002f4c:	6893      	ldr	r3, [r2, #8]
 8002f4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f52:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f54:	68e3      	ldr	r3, [r4, #12]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d031      	beq.n	8002fbe <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f5a:	68a3      	ldr	r3, [r4, #8]
 8002f5c:	6822      	ldr	r2, [r4, #0]
 8002f5e:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8002f62:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f64:	68e3      	ldr	r3, [r4, #12]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d02f      	beq.n	8002fca <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f6a:	6822      	ldr	r2, [r4, #0]
 8002f6c:	6851      	ldr	r1, [r2, #4]
 8002f6e:	4b1a      	ldr	r3, [pc, #104]	; (8002fd8 <HAL_I2C_Init+0xb8>)
 8002f70:	430b      	orrs	r3, r1
 8002f72:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f74:	6822      	ldr	r2, [r4, #0]
 8002f76:	68d3      	ldr	r3, [r2, #12]
 8002f78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f7c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002f7e:	6923      	ldr	r3, [r4, #16]
 8002f80:	6962      	ldr	r2, [r4, #20]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	69a1      	ldr	r1, [r4, #24]
 8002f86:	6822      	ldr	r2, [r4, #0]
 8002f88:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002f8c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f8e:	69e3      	ldr	r3, [r4, #28]
 8002f90:	6a21      	ldr	r1, [r4, #32]
 8002f92:	6822      	ldr	r2, [r4, #0]
 8002f94:	430b      	orrs	r3, r1
 8002f96:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002f98:	6822      	ldr	r2, [r4, #0]
 8002f9a:	6813      	ldr	r3, [r2, #0]
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fa6:	2320      	movs	r3, #32
 8002fa8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fac:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fae:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002fb2:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002fb4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002fb8:	f007 fb04 	bl	800a5c4 <HAL_I2C_MspInit>
 8002fbc:	e7b8      	b.n	8002f30 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fbe:	68a3      	ldr	r3, [r4, #8]
 8002fc0:	6822      	ldr	r2, [r4, #0]
 8002fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fc6:	6093      	str	r3, [r2, #8]
 8002fc8:	e7cc      	b.n	8002f64 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002fca:	6823      	ldr	r3, [r4, #0]
 8002fcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	e7ca      	b.n	8002f6a <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8002fd4:	2001      	movs	r0, #1
}
 8002fd6:	4770      	bx	lr
 8002fd8:	02008000 	.word	0x02008000

08002fdc <HAL_I2C_Master_Transmit>:
{
 8002fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fe0:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe2:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8002fe6:	b2ed      	uxtb	r5, r5
 8002fe8:	2d20      	cmp	r5, #32
 8002fea:	f040 80a4 	bne.w	8003136 <HAL_I2C_Master_Transmit+0x15a>
    __HAL_LOCK(hi2c);
 8002fee:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002ff2:	2c01      	cmp	r4, #1
 8002ff4:	f000 80a4 	beq.w	8003140 <HAL_I2C_Master_Transmit+0x164>
 8002ff8:	4698      	mov	r8, r3
 8002ffa:	4617      	mov	r7, r2
 8002ffc:	460e      	mov	r6, r1
 8002ffe:	4604      	mov	r4, r0
 8003000:	f04f 0901 	mov.w	r9, #1
 8003004:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003008:	f7fd f9c6 	bl	8000398 <HAL_GetTick>
 800300c:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800300e:	9000      	str	r0, [sp, #0]
 8003010:	2319      	movs	r3, #25
 8003012:	464a      	mov	r2, r9
 8003014:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003018:	4620      	mov	r0, r4
 800301a:	f7ff ff2f 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 800301e:	2800      	cmp	r0, #0
 8003020:	f040 8090 	bne.w	8003144 <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003024:	2321      	movs	r3, #33	; 0x21
 8003026:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800302a:	2310      	movs	r3, #16
 800302c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003030:	2300      	movs	r3, #0
 8003032:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003034:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003036:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800303a:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800303c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800303e:	b29b      	uxth	r3, r3
 8003040:	2bff      	cmp	r3, #255	; 0xff
 8003042:	d90a      	bls.n	800305a <HAL_I2C_Master_Transmit+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003044:	22ff      	movs	r2, #255	; 0xff
 8003046:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003048:	4b42      	ldr	r3, [pc, #264]	; (8003154 <HAL_I2C_Master_Transmit+0x178>)
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003050:	4631      	mov	r1, r6
 8003052:	4620      	mov	r0, r4
 8003054:	f7ff fe84 	bl	8002d60 <I2C_TransferConfig>
 8003058:	e018      	b.n	800308c <HAL_I2C_Master_Transmit+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 800305a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800305c:	b292      	uxth	r2, r2
 800305e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003060:	4b3c      	ldr	r3, [pc, #240]	; (8003154 <HAL_I2C_Master_Transmit+0x178>)
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	4631      	mov	r1, r6
 800306c:	4620      	mov	r0, r4
 800306e:	f7ff fe77 	bl	8002d60 <I2C_TransferConfig>
 8003072:	e00b      	b.n	800308c <HAL_I2C_Master_Transmit+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 8003074:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003076:	b292      	uxth	r2, r2
 8003078:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800307a:	2300      	movs	r3, #0
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	4631      	mov	r1, r6
 8003086:	4620      	mov	r0, r4
 8003088:	f7ff fe6a 	bl	8002d60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800308c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800308e:	b29b      	uxth	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d033      	beq.n	80030fc <HAL_I2C_Master_Transmit+0x120>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003094:	462a      	mov	r2, r5
 8003096:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003098:	4620      	mov	r0, r4
 800309a:	f7ff fec4 	bl	8002e26 <I2C_WaitOnTXISFlagUntilTimeout>
 800309e:	2800      	cmp	r0, #0
 80030a0:	d152      	bne.n	8003148 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80030a4:	6823      	ldr	r3, [r4, #0]
 80030a6:	7812      	ldrb	r2, [r2, #0]
 80030a8:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80030aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030ac:	3301      	adds	r3, #1
 80030ae:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80030b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80030b2:	3b01      	subs	r3, #1
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80030b8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29b      	uxth	r3, r3
 80030be:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030c0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80030c2:	b292      	uxth	r2, r2
 80030c4:	2a00      	cmp	r2, #0
 80030c6:	d0e1      	beq.n	800308c <HAL_I2C_Master_Transmit+0xb0>
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1df      	bne.n	800308c <HAL_I2C_Master_Transmit+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030cc:	9500      	str	r5, [sp, #0]
 80030ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030d0:	2200      	movs	r2, #0
 80030d2:	2180      	movs	r1, #128	; 0x80
 80030d4:	4620      	mov	r0, r4
 80030d6:	f7ff fed1 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 80030da:	2800      	cmp	r0, #0
 80030dc:	d136      	bne.n	800314c <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2bff      	cmp	r3, #255	; 0xff
 80030e4:	d9c6      	bls.n	8003074 <HAL_I2C_Master_Transmit+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030e6:	22ff      	movs	r2, #255	; 0xff
 80030e8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80030ea:	2300      	movs	r3, #0
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030f2:	4631      	mov	r1, r6
 80030f4:	4620      	mov	r0, r4
 80030f6:	f7ff fe33 	bl	8002d60 <I2C_TransferConfig>
 80030fa:	e7c7      	b.n	800308c <HAL_I2C_Master_Transmit+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030fc:	462a      	mov	r2, r5
 80030fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003100:	4620      	mov	r0, r4
 8003102:	f7ff fee4 	bl	8002ece <I2C_WaitOnSTOPFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	bb10      	cbnz	r0, 8003150 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800310a:	6822      	ldr	r2, [r4, #0]
 800310c:	2120      	movs	r1, #32
 800310e:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8003110:	6820      	ldr	r0, [r4, #0]
 8003112:	6842      	ldr	r2, [r0, #4]
 8003114:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003118:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800311c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003120:	f022 0201 	bic.w	r2, r2, #1
 8003124:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003126:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800312a:	2200      	movs	r2, #0
 800312c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003130:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8003134:	e000      	b.n	8003138 <HAL_I2C_Master_Transmit+0x15c>
    return HAL_BUSY;
 8003136:	2302      	movs	r3, #2
}
 8003138:	4618      	mov	r0, r3
 800313a:	b003      	add	sp, #12
 800313c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8003140:	2302      	movs	r3, #2
 8003142:	e7f9      	b.n	8003138 <HAL_I2C_Master_Transmit+0x15c>
      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e7f7      	b.n	8003138 <HAL_I2C_Master_Transmit+0x15c>
        return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e7f5      	b.n	8003138 <HAL_I2C_Master_Transmit+0x15c>
          return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e7f3      	b.n	8003138 <HAL_I2C_Master_Transmit+0x15c>
      return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e7f1      	b.n	8003138 <HAL_I2C_Master_Transmit+0x15c>
 8003154:	80002000 	.word	0x80002000

08003158 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003158:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b20      	cmp	r3, #32
 8003160:	d124      	bne.n	80031ac <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003162:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003166:	2b01      	cmp	r3, #1
 8003168:	d022      	beq.n	80031b0 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800316a:	2301      	movs	r3, #1
 800316c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003170:	2324      	movs	r3, #36	; 0x24
 8003172:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003176:	6802      	ldr	r2, [r0, #0]
 8003178:	6813      	ldr	r3, [r2, #0]
 800317a:	f023 0301 	bic.w	r3, r3, #1
 800317e:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003180:	6802      	ldr	r2, [r0, #0]
 8003182:	6813      	ldr	r3, [r2, #0]
 8003184:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003188:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800318a:	6802      	ldr	r2, [r0, #0]
 800318c:	6813      	ldr	r3, [r2, #0]
 800318e:	4319      	orrs	r1, r3
 8003190:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003192:	6802      	ldr	r2, [r0, #0]
 8003194:	6813      	ldr	r3, [r2, #0]
 8003196:	f043 0301 	orr.w	r3, r3, #1
 800319a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800319c:	2320      	movs	r3, #32
 800319e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a2:	2300      	movs	r3, #0
 80031a4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80031a8:	4618      	mov	r0, r3
 80031aa:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80031ac:	2002      	movs	r0, #2
 80031ae:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80031b0:	2002      	movs	r0, #2
  }
}
 80031b2:	4770      	bx	lr

080031b4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d122      	bne.n	8003204 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031be:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d020      	beq.n	8003208 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80031c6:	2301      	movs	r3, #1
 80031c8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031cc:	2324      	movs	r3, #36	; 0x24
 80031ce:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031d2:	6802      	ldr	r2, [r0, #0]
 80031d4:	6813      	ldr	r3, [r2, #0]
 80031d6:	f023 0301 	bic.w	r3, r3, #1
 80031da:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031dc:	6802      	ldr	r2, [r0, #0]
 80031de:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031e4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031e8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031ea:	6802      	ldr	r2, [r0, #0]
 80031ec:	6813      	ldr	r3, [r2, #0]
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f4:	2320      	movs	r3, #32
 80031f6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031fa:	2300      	movs	r3, #0
 80031fc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003200:	4618      	mov	r0, r3
 8003202:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8003204:	2002      	movs	r0, #2
 8003206:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8003208:	2002      	movs	r0, #2
  }
}
 800320a:	4770      	bx	lr

0800320c <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800320c:	4b13      	ldr	r3, [pc, #76]	; (800325c <HAL_PWREx_ConfigSupply+0x50>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f013 0f04 	tst.w	r3, #4
 8003214:	d107      	bne.n	8003226 <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003216:	4b11      	ldr	r3, [pc, #68]	; (800325c <HAL_PWREx_ConfigSupply+0x50>)
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	4283      	cmp	r3, r0
 8003220:	d01a      	beq.n	8003258 <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003222:	2001      	movs	r0, #1
 8003224:	4770      	bx	lr
{
 8003226:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003228:	4a0c      	ldr	r2, [pc, #48]	; (800325c <HAL_PWREx_ConfigSupply+0x50>)
 800322a:	68d3      	ldr	r3, [r2, #12]
 800322c:	f023 0307 	bic.w	r3, r3, #7
 8003230:	4318      	orrs	r0, r3
 8003232:	60d0      	str	r0, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003234:	f7fd f8b0 	bl	8000398 <HAL_GetTick>
 8003238:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800323a:	4b08      	ldr	r3, [pc, #32]	; (800325c <HAL_PWREx_ConfigSupply+0x50>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003242:	d107      	bne.n	8003254 <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003244:	f7fd f8a8 	bl	8000398 <HAL_GetTick>
 8003248:	1b00      	subs	r0, r0, r4
 800324a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800324e:	d9f4      	bls.n	800323a <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 8003250:	2001      	movs	r0, #1
 8003252:	e000      	b.n	8003256 <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003254:	2000      	movs	r0, #0
}
 8003256:	bd10      	pop	{r4, pc}
      return HAL_OK;
 8003258:	2000      	movs	r0, #0
}
 800325a:	4770      	bx	lr
 800325c:	58024800 	.word	0x58024800

08003260 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003260:	2800      	cmp	r0, #0
 8003262:	f000 82e6 	beq.w	8003832 <HAL_RCC_OscConfig+0x5d2>
{
 8003266:	b538      	push	{r3, r4, r5, lr}
 8003268:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800326a:	6803      	ldr	r3, [r0, #0]
 800326c:	f013 0f01 	tst.w	r3, #1
 8003270:	d025      	beq.n	80032be <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003272:	4aaa      	ldr	r2, [pc, #680]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 8003274:	6913      	ldr	r3, [r2, #16]
 8003276:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800327a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800327c:	2b10      	cmp	r3, #16
 800327e:	d015      	beq.n	80032ac <HAL_RCC_OscConfig+0x4c>
 8003280:	2b18      	cmp	r3, #24
 8003282:	d00f      	beq.n	80032a4 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003284:	6863      	ldr	r3, [r4, #4]
 8003286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800328a:	d03e      	beq.n	800330a <HAL_RCC_OscConfig+0xaa>
 800328c:	2b00      	cmp	r3, #0
 800328e:	d152      	bne.n	8003336 <HAL_RCC_OscConfig+0xd6>
 8003290:	4ba2      	ldr	r3, [pc, #648]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	e037      	b.n	8003314 <HAL_RCC_OscConfig+0xb4>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80032a4:	f002 0203 	and.w	r2, r2, #3
 80032a8:	2a02      	cmp	r2, #2
 80032aa:	d1eb      	bne.n	8003284 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ac:	4b9b      	ldr	r3, [pc, #620]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80032b4:	d003      	beq.n	80032be <HAL_RCC_OscConfig+0x5e>
 80032b6:	6863      	ldr	r3, [r4, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 82bc 	beq.w	8003836 <HAL_RCC_OscConfig+0x5d6>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	f013 0f02 	tst.w	r3, #2
 80032c4:	d077      	beq.n	80033b6 <HAL_RCC_OscConfig+0x156>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032c6:	4a95      	ldr	r2, [pc, #596]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 80032c8:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032ca:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80032cc:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80032d0:	d05a      	beq.n	8003388 <HAL_RCC_OscConfig+0x128>
 80032d2:	2b18      	cmp	r3, #24
 80032d4:	d055      	beq.n	8003382 <HAL_RCC_OscConfig+0x122>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032d6:	68e3      	ldr	r3, [r4, #12]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 80b2 	beq.w	8003442 <HAL_RCC_OscConfig+0x1e2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80032de:	498f      	ldr	r1, [pc, #572]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 80032e0:	680a      	ldr	r2, [r1, #0]
 80032e2:	f022 0219 	bic.w	r2, r2, #25
 80032e6:	4313      	orrs	r3, r2
 80032e8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ea:	f7fd f855 	bl	8000398 <HAL_GetTick>
 80032ee:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032f0:	4b8a      	ldr	r3, [pc, #552]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f013 0f04 	tst.w	r3, #4
 80032f8:	f040 808b 	bne.w	8003412 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032fc:	f7fd f84c 	bl	8000398 <HAL_GetTick>
 8003300:	1b40      	subs	r0, r0, r5
 8003302:	2802      	cmp	r0, #2
 8003304:	d9f4      	bls.n	80032f0 <HAL_RCC_OscConfig+0x90>
          {
            return HAL_TIMEOUT;
 8003306:	2003      	movs	r0, #3
 8003308:	e29a      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800330a:	4a84      	ldr	r2, [pc, #528]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 800330c:	6813      	ldr	r3, [r2, #0]
 800330e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003312:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003314:	6863      	ldr	r3, [r4, #4]
 8003316:	b32b      	cbz	r3, 8003364 <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 8003318:	f7fd f83e 	bl	8000398 <HAL_GetTick>
 800331c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800331e:	4b7f      	ldr	r3, [pc, #508]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003326:	d1ca      	bne.n	80032be <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003328:	f7fd f836 	bl	8000398 <HAL_GetTick>
 800332c:	1b40      	subs	r0, r0, r5
 800332e:	2864      	cmp	r0, #100	; 0x64
 8003330:	d9f5      	bls.n	800331e <HAL_RCC_OscConfig+0xbe>
            return HAL_TIMEOUT;
 8003332:	2003      	movs	r0, #3
 8003334:	e284      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003336:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800333a:	d009      	beq.n	8003350 <HAL_RCC_OscConfig+0xf0>
 800333c:	4b77      	ldr	r3, [pc, #476]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	e7e1      	b.n	8003314 <HAL_RCC_OscConfig+0xb4>
 8003350:	4b72      	ldr	r3, [pc, #456]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	e7d7      	b.n	8003314 <HAL_RCC_OscConfig+0xb4>
        tickstart = HAL_GetTick();
 8003364:	f7fd f818 	bl	8000398 <HAL_GetTick>
 8003368:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800336a:	4b6c      	ldr	r3, [pc, #432]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003372:	d0a4      	beq.n	80032be <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003374:	f7fd f810 	bl	8000398 <HAL_GetTick>
 8003378:	1b40      	subs	r0, r0, r5
 800337a:	2864      	cmp	r0, #100	; 0x64
 800337c:	d9f5      	bls.n	800336a <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 800337e:	2003      	movs	r0, #3
 8003380:	e25e      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003382:	f012 0f03 	tst.w	r2, #3
 8003386:	d1a6      	bne.n	80032d6 <HAL_RCC_OscConfig+0x76>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003388:	4b64      	ldr	r3, [pc, #400]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f013 0f04 	tst.w	r3, #4
 8003390:	d003      	beq.n	800339a <HAL_RCC_OscConfig+0x13a>
 8003392:	68e3      	ldr	r3, [r4, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8250 	beq.w	800383a <HAL_RCC_OscConfig+0x5da>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339a:	f7fd f817 	bl	80003cc <HAL_GetREVID>
 800339e:	f241 0303 	movw	r3, #4099	; 0x1003
 80033a2:	4298      	cmp	r0, r3
 80033a4:	d82c      	bhi.n	8003400 <HAL_RCC_OscConfig+0x1a0>
 80033a6:	4a5d      	ldr	r2, [pc, #372]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 80033a8:	6853      	ldr	r3, [r2, #4]
 80033aa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80033ae:	6921      	ldr	r1, [r4, #16]
 80033b0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80033b4:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	f013 0f10 	tst.w	r3, #16
 80033bc:	d071      	beq.n	80034a2 <HAL_RCC_OscConfig+0x242>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033be:	4a57      	ldr	r2, [pc, #348]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 80033c0:	6913      	ldr	r3, [r2, #16]
 80033c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033c6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d052      	beq.n	8003472 <HAL_RCC_OscConfig+0x212>
 80033cc:	2b18      	cmp	r3, #24
 80033ce:	d04c      	beq.n	800346a <HAL_RCC_OscConfig+0x20a>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80033d0:	69e3      	ldr	r3, [r4, #28]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 80a4 	beq.w	8003520 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80033d8:	4a50      	ldr	r2, [pc, #320]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 80033da:	6813      	ldr	r3, [r2, #0]
 80033dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e2:	f7fc ffd9 	bl	8000398 <HAL_GetTick>
 80033e6:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033e8:	4b4c      	ldr	r3, [pc, #304]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f413 7f80 	tst.w	r3, #256	; 0x100
 80033f0:	d17b      	bne.n	80034ea <HAL_RCC_OscConfig+0x28a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80033f2:	f7fc ffd1 	bl	8000398 <HAL_GetTick>
 80033f6:	1b40      	subs	r0, r0, r5
 80033f8:	2802      	cmp	r0, #2
 80033fa:	d9f5      	bls.n	80033e8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80033fc:	2003      	movs	r0, #3
 80033fe:	e21f      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003400:	4a46      	ldr	r2, [pc, #280]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 8003402:	6853      	ldr	r3, [r2, #4]
 8003404:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003408:	6921      	ldr	r1, [r4, #16]
 800340a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800340e:	6053      	str	r3, [r2, #4]
 8003410:	e7d1      	b.n	80033b6 <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003412:	f7fc ffdb 	bl	80003cc <HAL_GetREVID>
 8003416:	f241 0303 	movw	r3, #4099	; 0x1003
 800341a:	4298      	cmp	r0, r3
 800341c:	d808      	bhi.n	8003430 <HAL_RCC_OscConfig+0x1d0>
 800341e:	4a3f      	ldr	r2, [pc, #252]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 8003420:	6853      	ldr	r3, [r2, #4]
 8003422:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003426:	6921      	ldr	r1, [r4, #16]
 8003428:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800342c:	6053      	str	r3, [r2, #4]
 800342e:	e7c2      	b.n	80033b6 <HAL_RCC_OscConfig+0x156>
 8003430:	4a3a      	ldr	r2, [pc, #232]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 8003432:	6853      	ldr	r3, [r2, #4]
 8003434:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003438:	6921      	ldr	r1, [r4, #16]
 800343a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800343e:	6053      	str	r3, [r2, #4]
 8003440:	e7b9      	b.n	80033b6 <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_HSI_DISABLE();
 8003442:	4a36      	ldr	r2, [pc, #216]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 8003444:	6813      	ldr	r3, [r2, #0]
 8003446:	f023 0301 	bic.w	r3, r3, #1
 800344a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800344c:	f7fc ffa4 	bl	8000398 <HAL_GetTick>
 8003450:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003452:	4b32      	ldr	r3, [pc, #200]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f013 0f04 	tst.w	r3, #4
 800345a:	d0ac      	beq.n	80033b6 <HAL_RCC_OscConfig+0x156>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800345c:	f7fc ff9c 	bl	8000398 <HAL_GetTick>
 8003460:	1b40      	subs	r0, r0, r5
 8003462:	2802      	cmp	r0, #2
 8003464:	d9f5      	bls.n	8003452 <HAL_RCC_OscConfig+0x1f2>
            return HAL_TIMEOUT;
 8003466:	2003      	movs	r0, #3
 8003468:	e1ea      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800346a:	f002 0203 	and.w	r2, r2, #3
 800346e:	2a01      	cmp	r2, #1
 8003470:	d1ae      	bne.n	80033d0 <HAL_RCC_OscConfig+0x170>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003472:	4b2a      	ldr	r3, [pc, #168]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f413 7f80 	tst.w	r3, #256	; 0x100
 800347a:	d004      	beq.n	8003486 <HAL_RCC_OscConfig+0x226>
 800347c:	69e3      	ldr	r3, [r4, #28]
 800347e:	2b80      	cmp	r3, #128	; 0x80
 8003480:	d001      	beq.n	8003486 <HAL_RCC_OscConfig+0x226>
        return HAL_ERROR;
 8003482:	2001      	movs	r0, #1
 8003484:	e1dc      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003486:	f7fc ffa1 	bl	80003cc <HAL_GetREVID>
 800348a:	f241 0303 	movw	r3, #4099	; 0x1003
 800348e:	4298      	cmp	r0, r3
 8003490:	d822      	bhi.n	80034d8 <HAL_RCC_OscConfig+0x278>
 8003492:	4a22      	ldr	r2, [pc, #136]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 8003494:	6853      	ldr	r3, [r2, #4]
 8003496:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800349a:	6a21      	ldr	r1, [r4, #32]
 800349c:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 80034a0:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	f013 0f08 	tst.w	r3, #8
 80034a8:	d062      	beq.n	8003570 <HAL_RCC_OscConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034aa:	6963      	ldr	r3, [r4, #20]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d04b      	beq.n	8003548 <HAL_RCC_OscConfig+0x2e8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b0:	4a1a      	ldr	r2, [pc, #104]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 80034b2:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ba:	f7fc ff6d 	bl	8000398 <HAL_GetTick>
 80034be:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80034c0:	4b16      	ldr	r3, [pc, #88]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 80034c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c4:	f013 0f02 	tst.w	r3, #2
 80034c8:	d152      	bne.n	8003570 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ca:	f7fc ff65 	bl	8000398 <HAL_GetTick>
 80034ce:	1b40      	subs	r0, r0, r5
 80034d0:	2802      	cmp	r0, #2
 80034d2:	d9f5      	bls.n	80034c0 <HAL_RCC_OscConfig+0x260>
        {
          return HAL_TIMEOUT;
 80034d4:	2003      	movs	r0, #3
 80034d6:	e1b3      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034d8:	4a10      	ldr	r2, [pc, #64]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 80034da:	68d3      	ldr	r3, [r2, #12]
 80034dc:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80034e0:	6a21      	ldr	r1, [r4, #32]
 80034e2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80034e6:	60d3      	str	r3, [r2, #12]
 80034e8:	e7db      	b.n	80034a2 <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034ea:	f7fc ff6f 	bl	80003cc <HAL_GetREVID>
 80034ee:	f241 0303 	movw	r3, #4099	; 0x1003
 80034f2:	4298      	cmp	r0, r3
 80034f4:	d808      	bhi.n	8003508 <HAL_RCC_OscConfig+0x2a8>
 80034f6:	4a09      	ldr	r2, [pc, #36]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 80034f8:	6853      	ldr	r3, [r2, #4]
 80034fa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80034fe:	6a21      	ldr	r1, [r4, #32]
 8003500:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8003504:	6053      	str	r3, [r2, #4]
 8003506:	e7cc      	b.n	80034a2 <HAL_RCC_OscConfig+0x242>
 8003508:	4a04      	ldr	r2, [pc, #16]	; (800351c <HAL_RCC_OscConfig+0x2bc>)
 800350a:	68d3      	ldr	r3, [r2, #12]
 800350c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003510:	6a21      	ldr	r1, [r4, #32]
 8003512:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003516:	60d3      	str	r3, [r2, #12]
 8003518:	e7c3      	b.n	80034a2 <HAL_RCC_OscConfig+0x242>
 800351a:	bf00      	nop
 800351c:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_DISABLE();
 8003520:	4aad      	ldr	r2, [pc, #692]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 8003522:	6813      	ldr	r3, [r2, #0]
 8003524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003528:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800352a:	f7fc ff35 	bl	8000398 <HAL_GetTick>
 800352e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003530:	4ba9      	ldr	r3, [pc, #676]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003538:	d0b3      	beq.n	80034a2 <HAL_RCC_OscConfig+0x242>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800353a:	f7fc ff2d 	bl	8000398 <HAL_GetTick>
 800353e:	1b40      	subs	r0, r0, r5
 8003540:	2802      	cmp	r0, #2
 8003542:	d9f5      	bls.n	8003530 <HAL_RCC_OscConfig+0x2d0>
            return HAL_TIMEOUT;
 8003544:	2003      	movs	r0, #3
 8003546:	e17b      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003548:	4aa3      	ldr	r2, [pc, #652]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 800354a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800354c:	f023 0301 	bic.w	r3, r3, #1
 8003550:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003552:	f7fc ff21 	bl	8000398 <HAL_GetTick>
 8003556:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003558:	4b9f      	ldr	r3, [pc, #636]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 800355a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355c:	f013 0f02 	tst.w	r3, #2
 8003560:	d006      	beq.n	8003570 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003562:	f7fc ff19 	bl	8000398 <HAL_GetTick>
 8003566:	1b40      	subs	r0, r0, r5
 8003568:	2802      	cmp	r0, #2
 800356a:	d9f5      	bls.n	8003558 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800356c:	2003      	movs	r0, #3
 800356e:	e167      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003570:	6823      	ldr	r3, [r4, #0]
 8003572:	f013 0f20 	tst.w	r3, #32
 8003576:	d029      	beq.n	80035cc <HAL_RCC_OscConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003578:	69a3      	ldr	r3, [r4, #24]
 800357a:	b19b      	cbz	r3, 80035a4 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800357c:	4a96      	ldr	r2, [pc, #600]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 800357e:	6813      	ldr	r3, [r2, #0]
 8003580:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003584:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003586:	f7fc ff07 	bl	8000398 <HAL_GetTick>
 800358a:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800358c:	4b92      	ldr	r3, [pc, #584]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003594:	d11a      	bne.n	80035cc <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003596:	f7fc feff 	bl	8000398 <HAL_GetTick>
 800359a:	1b40      	subs	r0, r0, r5
 800359c:	2802      	cmp	r0, #2
 800359e:	d9f5      	bls.n	800358c <HAL_RCC_OscConfig+0x32c>
        {
          return HAL_TIMEOUT;
 80035a0:	2003      	movs	r0, #3
 80035a2:	e14d      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035a4:	4a8c      	ldr	r2, [pc, #560]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 80035a6:	6813      	ldr	r3, [r2, #0]
 80035a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035ae:	f7fc fef3 	bl	8000398 <HAL_GetTick>
 80035b2:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035b4:	4b88      	ldr	r3, [pc, #544]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80035bc:	d006      	beq.n	80035cc <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80035be:	f7fc feeb 	bl	8000398 <HAL_GetTick>
 80035c2:	1b40      	subs	r0, r0, r5
 80035c4:	2802      	cmp	r0, #2
 80035c6:	d9f5      	bls.n	80035b4 <HAL_RCC_OscConfig+0x354>
        {
          return HAL_TIMEOUT;
 80035c8:	2003      	movs	r0, #3
 80035ca:	e139      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	f013 0f04 	tst.w	r3, #4
 80035d2:	d121      	bne.n	8003618 <HAL_RCC_OscConfig+0x3b8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 8131 	beq.w	800383e <HAL_RCC_OscConfig+0x5de>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80035dc:	4a7e      	ldr	r2, [pc, #504]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 80035de:	6912      	ldr	r2, [r2, #16]
 80035e0:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80035e4:	2a18      	cmp	r2, #24
 80035e6:	f000 80ea 	beq.w	80037be <HAL_RCC_OscConfig+0x55e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d075      	beq.n	80036da <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ee:	4a7a      	ldr	r2, [pc, #488]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 80035f0:	6813      	ldr	r3, [r2, #0]
 80035f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f8:	f7fc fece 	bl	8000398 <HAL_GetTick>
 80035fc:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035fe:	4b76      	ldr	r3, [pc, #472]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003606:	f000 80d8 	beq.w	80037ba <HAL_RCC_OscConfig+0x55a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800360a:	f7fc fec5 	bl	8000398 <HAL_GetTick>
 800360e:	1b00      	subs	r0, r0, r4
 8003610:	2802      	cmp	r0, #2
 8003612:	d9f4      	bls.n	80035fe <HAL_RCC_OscConfig+0x39e>
          {
            return HAL_TIMEOUT;
 8003614:	2003      	movs	r0, #3
 8003616:	e113      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
    PWR->CR1 |= PWR_CR1_DBP;
 8003618:	4a70      	ldr	r2, [pc, #448]	; (80037dc <HAL_RCC_OscConfig+0x57c>)
 800361a:	6813      	ldr	r3, [r2, #0]
 800361c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003620:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003622:	f7fc feb9 	bl	8000398 <HAL_GetTick>
 8003626:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003628:	4b6c      	ldr	r3, [pc, #432]	; (80037dc <HAL_RCC_OscConfig+0x57c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003630:	d106      	bne.n	8003640 <HAL_RCC_OscConfig+0x3e0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003632:	f7fc feb1 	bl	8000398 <HAL_GetTick>
 8003636:	1b40      	subs	r0, r0, r5
 8003638:	2864      	cmp	r0, #100	; 0x64
 800363a:	d9f5      	bls.n	8003628 <HAL_RCC_OscConfig+0x3c8>
        return HAL_TIMEOUT;
 800363c:	2003      	movs	r0, #3
 800363e:	e0ff      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003640:	68a3      	ldr	r3, [r4, #8]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d00a      	beq.n	800365c <HAL_RCC_OscConfig+0x3fc>
 8003646:	bb0b      	cbnz	r3, 800368c <HAL_RCC_OscConfig+0x42c>
 8003648:	4b63      	ldr	r3, [pc, #396]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 800364a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800364c:	f022 0201 	bic.w	r2, r2, #1
 8003650:	671a      	str	r2, [r3, #112]	; 0x70
 8003652:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003654:	f022 0204 	bic.w	r2, r2, #4
 8003658:	671a      	str	r2, [r3, #112]	; 0x70
 800365a:	e004      	b.n	8003666 <HAL_RCC_OscConfig+0x406>
 800365c:	4a5e      	ldr	r2, [pc, #376]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 800365e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003660:	f043 0301 	orr.w	r3, r3, #1
 8003664:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003666:	68a3      	ldr	r3, [r4, #8]
 8003668:	b333      	cbz	r3, 80036b8 <HAL_RCC_OscConfig+0x458>
      tickstart = HAL_GetTick();
 800366a:	f7fc fe95 	bl	8000398 <HAL_GetTick>
 800366e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003670:	4b59      	ldr	r3, [pc, #356]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 8003672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003674:	f013 0f02 	tst.w	r3, #2
 8003678:	d1ac      	bne.n	80035d4 <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800367a:	f7fc fe8d 	bl	8000398 <HAL_GetTick>
 800367e:	1b40      	subs	r0, r0, r5
 8003680:	f241 3388 	movw	r3, #5000	; 0x1388
 8003684:	4298      	cmp	r0, r3
 8003686:	d9f3      	bls.n	8003670 <HAL_RCC_OscConfig+0x410>
          return HAL_TIMEOUT;
 8003688:	2003      	movs	r0, #3
 800368a:	e0d9      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800368c:	2b05      	cmp	r3, #5
 800368e:	d009      	beq.n	80036a4 <HAL_RCC_OscConfig+0x444>
 8003690:	4b51      	ldr	r3, [pc, #324]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 8003692:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003694:	f022 0201 	bic.w	r2, r2, #1
 8003698:	671a      	str	r2, [r3, #112]	; 0x70
 800369a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800369c:	f022 0204 	bic.w	r2, r2, #4
 80036a0:	671a      	str	r2, [r3, #112]	; 0x70
 80036a2:	e7e0      	b.n	8003666 <HAL_RCC_OscConfig+0x406>
 80036a4:	4b4c      	ldr	r3, [pc, #304]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 80036a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036a8:	f042 0204 	orr.w	r2, r2, #4
 80036ac:	671a      	str	r2, [r3, #112]	; 0x70
 80036ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036b0:	f042 0201 	orr.w	r2, r2, #1
 80036b4:	671a      	str	r2, [r3, #112]	; 0x70
 80036b6:	e7d6      	b.n	8003666 <HAL_RCC_OscConfig+0x406>
      tickstart = HAL_GetTick();
 80036b8:	f7fc fe6e 	bl	8000398 <HAL_GetTick>
 80036bc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036be:	4b46      	ldr	r3, [pc, #280]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 80036c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c2:	f013 0f02 	tst.w	r3, #2
 80036c6:	d085      	beq.n	80035d4 <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c8:	f7fc fe66 	bl	8000398 <HAL_GetTick>
 80036cc:	1b40      	subs	r0, r0, r5
 80036ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80036d2:	4298      	cmp	r0, r3
 80036d4:	d9f3      	bls.n	80036be <HAL_RCC_OscConfig+0x45e>
          return HAL_TIMEOUT;
 80036d6:	2003      	movs	r0, #3
 80036d8:	e0b2      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_PLL_DISABLE();
 80036da:	4a3f      	ldr	r2, [pc, #252]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 80036dc:	6813      	ldr	r3, [r2, #0]
 80036de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036e2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80036e4:	f7fc fe58 	bl	8000398 <HAL_GetTick>
 80036e8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036ea:	4b3b      	ldr	r3, [pc, #236]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80036f2:	d006      	beq.n	8003702 <HAL_RCC_OscConfig+0x4a2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f4:	f7fc fe50 	bl	8000398 <HAL_GetTick>
 80036f8:	1b40      	subs	r0, r0, r5
 80036fa:	2802      	cmp	r0, #2
 80036fc:	d9f5      	bls.n	80036ea <HAL_RCC_OscConfig+0x48a>
            return HAL_TIMEOUT;
 80036fe:	2003      	movs	r0, #3
 8003700:	e09e      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003702:	4b35      	ldr	r3, [pc, #212]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 8003704:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003706:	4a36      	ldr	r2, [pc, #216]	; (80037e0 <HAL_RCC_OscConfig+0x580>)
 8003708:	400a      	ands	r2, r1
 800370a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800370c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800370e:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8003712:	430a      	orrs	r2, r1
 8003714:	629a      	str	r2, [r3, #40]	; 0x28
 8003716:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003718:	3a01      	subs	r2, #1
 800371a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800371e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003720:	3901      	subs	r1, #1
 8003722:	0249      	lsls	r1, r1, #9
 8003724:	b289      	uxth	r1, r1
 8003726:	430a      	orrs	r2, r1
 8003728:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800372a:	3901      	subs	r1, #1
 800372c:	0409      	lsls	r1, r1, #16
 800372e:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8003732:	430a      	orrs	r2, r1
 8003734:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003736:	3901      	subs	r1, #1
 8003738:	0609      	lsls	r1, r1, #24
 800373a:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800373e:	430a      	orrs	r2, r1
 8003740:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8003742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003744:	f022 0201 	bic.w	r2, r2, #1
 8003748:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800374a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800374c:	4a25      	ldr	r2, [pc, #148]	; (80037e4 <HAL_RCC_OscConfig+0x584>)
 800374e:	400a      	ands	r2, r1
 8003750:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003752:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003756:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375a:	f022 020c 	bic.w	r2, r2, #12
 800375e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003760:	430a      	orrs	r2, r1
 8003762:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003766:	f022 0202 	bic.w	r2, r2, #2
 800376a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800376c:	430a      	orrs	r2, r1
 800376e:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003772:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003776:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800377e:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003782:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003786:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8003788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003796:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003798:	f7fc fdfe 	bl	8000398 <HAL_GetTick>
 800379c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800379e:	4b0e      	ldr	r3, [pc, #56]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80037a6:	d106      	bne.n	80037b6 <HAL_RCC_OscConfig+0x556>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a8:	f7fc fdf6 	bl	8000398 <HAL_GetTick>
 80037ac:	1b00      	subs	r0, r0, r4
 80037ae:	2802      	cmp	r0, #2
 80037b0:	d9f5      	bls.n	800379e <HAL_RCC_OscConfig+0x53e>
            return HAL_TIMEOUT;
 80037b2:	2003      	movs	r0, #3
 80037b4:	e044      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80037b6:	2000      	movs	r0, #0
 80037b8:	e042      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
 80037ba:	2000      	movs	r0, #0
 80037bc:	e040      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
      temp1_pllckcfg = RCC->PLLCKSELR;
 80037be:	4a06      	ldr	r2, [pc, #24]	; (80037d8 <HAL_RCC_OscConfig+0x578>)
 80037c0:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80037c2:	6b10      	ldr	r0, [r2, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d03c      	beq.n	8003842 <HAL_RCC_OscConfig+0x5e2>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c8:	f001 0303 	and.w	r3, r1, #3
 80037cc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d00a      	beq.n	80037e8 <HAL_RCC_OscConfig+0x588>
        return HAL_ERROR;
 80037d2:	2001      	movs	r0, #1
 80037d4:	e034      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
 80037d6:	bf00      	nop
 80037d8:	58024400 	.word	0x58024400
 80037dc:	58024800 	.word	0x58024800
 80037e0:	fffffc0c 	.word	0xfffffc0c
 80037e4:	ffff0007 	.word	0xffff0007
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037e8:	f3c1 1105 	ubfx	r1, r1, #4, #6
 80037ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ee:	4299      	cmp	r1, r3
 80037f0:	d001      	beq.n	80037f6 <HAL_RCC_OscConfig+0x596>
        return HAL_ERROR;
 80037f2:	2001      	movs	r0, #1
 80037f4:	e024      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037f6:	f3c0 0208 	ubfx	r2, r0, #0, #9
 80037fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80037fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037fe:	429a      	cmp	r2, r3
 8003800:	d001      	beq.n	8003806 <HAL_RCC_OscConfig+0x5a6>
        return HAL_ERROR;
 8003802:	2001      	movs	r0, #1
 8003804:	e01c      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003806:	f3c0 2246 	ubfx	r2, r0, #9, #7
 800380a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800380c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800380e:	429a      	cmp	r2, r3
 8003810:	d001      	beq.n	8003816 <HAL_RCC_OscConfig+0x5b6>
        return HAL_ERROR;
 8003812:	2001      	movs	r0, #1
 8003814:	e014      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003816:	f3c0 4206 	ubfx	r2, r0, #16, #7
 800381a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800381c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800381e:	429a      	cmp	r2, r3
 8003820:	d111      	bne.n	8003846 <HAL_RCC_OscConfig+0x5e6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003822:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8003826:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003828:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800382a:	4298      	cmp	r0, r3
 800382c:	d00d      	beq.n	800384a <HAL_RCC_OscConfig+0x5ea>
        return HAL_ERROR;
 800382e:	2001      	movs	r0, #1
 8003830:	e006      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
    return HAL_ERROR;
 8003832:	2001      	movs	r0, #1
}
 8003834:	4770      	bx	lr
        return HAL_ERROR;
 8003836:	2001      	movs	r0, #1
 8003838:	e002      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
        return HAL_ERROR;
 800383a:	2001      	movs	r0, #1
 800383c:	e000      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
  return HAL_OK;
 800383e:	2000      	movs	r0, #0
}
 8003840:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8003842:	2001      	movs	r0, #1
 8003844:	e7fc      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
 8003846:	2001      	movs	r0, #1
 8003848:	e7fa      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
  return HAL_OK;
 800384a:	2000      	movs	r0, #0
 800384c:	e7f8      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
 800384e:	bf00      	nop

08003850 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003850:	4b72      	ldr	r3, [pc, #456]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003858:	2b10      	cmp	r3, #16
 800385a:	f000 80db 	beq.w	8003a14 <HAL_RCC_GetSysClockFreq+0x1c4>
 800385e:	2b18      	cmp	r3, #24
 8003860:	d010      	beq.n	8003884 <HAL_RCC_GetSysClockFreq+0x34>
 8003862:	b10b      	cbz	r3, 8003868 <HAL_RCC_GetSysClockFreq+0x18>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003864:	486e      	ldr	r0, [pc, #440]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x1d0>)
 8003866:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003868:	4b6c      	ldr	r3, [pc, #432]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x1cc>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f013 0f20 	tst.w	r3, #32
 8003870:	f000 80d2 	beq.w	8003a18 <HAL_RCC_GetSysClockFreq+0x1c8>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003874:	4b69      	ldr	r3, [pc, #420]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800387c:	4b69      	ldr	r3, [pc, #420]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800387e:	fa23 f000 	lsr.w	r0, r3, r0
 8003882:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003884:	4a65      	ldr	r2, [pc, #404]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003886:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003888:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800388c:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800388e:	f3c0 1005 	ubfx	r0, r0, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003892:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003894:	f003 0301 	and.w	r3, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003898:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800389a:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 800389e:	fb03 f302 	mul.w	r3, r3, r2
 80038a2:	ee07 3a90 	vmov	s15, r3
 80038a6:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 80038aa:	2800      	cmp	r0, #0
 80038ac:	f000 80b5 	beq.w	8003a1a <HAL_RCC_GetSysClockFreq+0x1ca>
    {
      switch (pllsource)
 80038b0:	2901      	cmp	r1, #1
 80038b2:	d066      	beq.n	8003982 <HAL_RCC_GetSysClockFreq+0x132>
 80038b4:	b1f9      	cbz	r1, 80038f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80038b6:	2902      	cmp	r1, #2
 80038b8:	f000 808f 	beq.w	80039da <HAL_RCC_GetSysClockFreq+0x18a>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038bc:	ee07 0a10 	vmov	s14, r0
 80038c0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80038c4:	ed9f 6a58 	vldr	s12, [pc, #352]	; 8003a28 <HAL_RCC_GetSysClockFreq+0x1d8>
 80038c8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80038cc:	4b53      	ldr	r3, [pc, #332]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x1cc>)
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d4:	ee06 3a90 	vmov	s13, r3
 80038d8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80038dc:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8003a2c <HAL_RCC_GetSysClockFreq+0x1dc>
 80038e0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80038e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038f0:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 80038f4:	e061      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x16a>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038f6:	4b49      	ldr	r3, [pc, #292]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x1cc>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f013 0f20 	tst.w	r3, #32
 80038fe:	d023      	beq.n	8003948 <HAL_RCC_GetSysClockFreq+0xf8>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003900:	4946      	ldr	r1, [pc, #280]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003902:	680a      	ldr	r2, [r1, #0]
 8003904:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003908:	4b46      	ldr	r3, [pc, #280]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800390a:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800390c:	ee07 3a10 	vmov	s14, r3
 8003910:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003914:	ee07 0a10 	vmov	s14, r0
 8003918:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800391c:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8003920:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003926:	ee06 3a90 	vmov	s13, r3
 800392a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800392e:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8003a2c <HAL_RCC_GetSysClockFreq+0x1dc>
 8003932:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800393a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800393e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003942:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003946:	e038      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x16a>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003948:	ee07 0a10 	vmov	s14, r0
 800394c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003950:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8003a30 <HAL_RCC_GetSysClockFreq+0x1e0>
 8003954:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003958:	4b30      	ldr	r3, [pc, #192]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x1cc>)
 800395a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003960:	ee06 3a90 	vmov	s13, r3
 8003964:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003968:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8003a2c <HAL_RCC_GetSysClockFreq+0x1dc>
 800396c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003970:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003974:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003978:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800397c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003980:	e01b      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x16a>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003982:	ee07 0a10 	vmov	s14, r0
 8003986:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800398a:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8003a28 <HAL_RCC_GetSysClockFreq+0x1d8>
 800398e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003992:	4b22      	ldr	r3, [pc, #136]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800399a:	ee06 3a90 	vmov	s13, r3
 800399e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80039a2:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8003a2c <HAL_RCC_GetSysClockFreq+0x1dc>
 80039a6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80039aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039b6:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80039ba:	4b18      	ldr	r3, [pc, #96]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x1cc>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80039c2:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80039c4:	ee07 3a90 	vmov	s15, r3
 80039c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80039d0:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80039d4:	ee17 0a90 	vmov	r0, s15
 80039d8:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039da:	ee07 0a10 	vmov	s14, r0
 80039de:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80039e2:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8003a34 <HAL_RCC_GetSysClockFreq+0x1e4>
 80039e6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80039ea:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x1cc>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f2:	ee06 3a90 	vmov	s13, r3
 80039f6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80039fa:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8003a2c <HAL_RCC_GetSysClockFreq+0x1dc>
 80039fe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a0e:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8003a12:	e7d2      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x16a>
    sysclockfreq = HSE_VALUE;
 8003a14:	4808      	ldr	r0, [pc, #32]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x1e8>)
 8003a16:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a18:	4802      	ldr	r0, [pc, #8]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x1d4>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8003a1a:	4770      	bx	lr
 8003a1c:	58024400 	.word	0x58024400
 8003a20:	003d0900 	.word	0x003d0900
 8003a24:	03d09000 	.word	0x03d09000
 8003a28:	4a742400 	.word	0x4a742400
 8003a2c:	39000000 	.word	0x39000000
 8003a30:	4c742400 	.word	0x4c742400
 8003a34:	4bbebc20 	.word	0x4bbebc20
 8003a38:	017d7840 	.word	0x017d7840

08003a3c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	f000 8136 	beq.w	8003cae <HAL_RCC_ClockConfig+0x272>
 8003a42:	4603      	mov	r3, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a44:	4a9c      	ldr	r2, [pc, #624]	; (8003cb8 <HAL_RCC_ClockConfig+0x27c>)
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	f002 020f 	and.w	r2, r2, #15
 8003a4c:	428a      	cmp	r2, r1
 8003a4e:	d20c      	bcs.n	8003a6a <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a50:	4899      	ldr	r0, [pc, #612]	; (8003cb8 <HAL_RCC_ClockConfig+0x27c>)
 8003a52:	6802      	ldr	r2, [r0, #0]
 8003a54:	f022 020f 	bic.w	r2, r2, #15
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	6002      	str	r2, [r0, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5c:	6802      	ldr	r2, [r0, #0]
 8003a5e:	f002 020f 	and.w	r2, r2, #15
 8003a62:	428a      	cmp	r2, r1
 8003a64:	d001      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x2e>
      return HAL_ERROR;
 8003a66:	2001      	movs	r0, #1
}
 8003a68:	4770      	bx	lr
{
 8003a6a:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	f012 0f04 	tst.w	r2, #4
 8003a72:	d00c      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a74:	6918      	ldr	r0, [r3, #16]
 8003a76:	4a91      	ldr	r2, [pc, #580]	; (8003cbc <HAL_RCC_ClockConfig+0x280>)
 8003a78:	6992      	ldr	r2, [r2, #24]
 8003a7a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003a7e:	4290      	cmp	r0, r2
 8003a80:	d905      	bls.n	8003a8e <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a82:	4c8e      	ldr	r4, [pc, #568]	; (8003cbc <HAL_RCC_ClockConfig+0x280>)
 8003a84:	69a2      	ldr	r2, [r4, #24]
 8003a86:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a8a:	4310      	orrs	r0, r2
 8003a8c:	61a0      	str	r0, [r4, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	f012 0f08 	tst.w	r2, #8
 8003a94:	d00c      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a96:	6958      	ldr	r0, [r3, #20]
 8003a98:	4a88      	ldr	r2, [pc, #544]	; (8003cbc <HAL_RCC_ClockConfig+0x280>)
 8003a9a:	69d2      	ldr	r2, [r2, #28]
 8003a9c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003aa0:	4290      	cmp	r0, r2
 8003aa2:	d905      	bls.n	8003ab0 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003aa4:	4c85      	ldr	r4, [pc, #532]	; (8003cbc <HAL_RCC_ClockConfig+0x280>)
 8003aa6:	69e2      	ldr	r2, [r4, #28]
 8003aa8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003aac:	4310      	orrs	r0, r2
 8003aae:	61e0      	str	r0, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	f012 0f10 	tst.w	r2, #16
 8003ab6:	d00c      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ab8:	6998      	ldr	r0, [r3, #24]
 8003aba:	4a80      	ldr	r2, [pc, #512]	; (8003cbc <HAL_RCC_ClockConfig+0x280>)
 8003abc:	69d2      	ldr	r2, [r2, #28]
 8003abe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003ac2:	4290      	cmp	r0, r2
 8003ac4:	d905      	bls.n	8003ad2 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ac6:	4c7d      	ldr	r4, [pc, #500]	; (8003cbc <HAL_RCC_ClockConfig+0x280>)
 8003ac8:	69e2      	ldr	r2, [r4, #28]
 8003aca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ace:	4310      	orrs	r0, r2
 8003ad0:	61e0      	str	r0, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	f012 0f20 	tst.w	r2, #32
 8003ad8:	d00c      	beq.n	8003af4 <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003ada:	69d8      	ldr	r0, [r3, #28]
 8003adc:	4a77      	ldr	r2, [pc, #476]	; (8003cbc <HAL_RCC_ClockConfig+0x280>)
 8003ade:	6a12      	ldr	r2, [r2, #32]
 8003ae0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003ae4:	4290      	cmp	r0, r2
 8003ae6:	d905      	bls.n	8003af4 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003ae8:	4c74      	ldr	r4, [pc, #464]	; (8003cbc <HAL_RCC_ClockConfig+0x280>)
 8003aea:	6a22      	ldr	r2, [r4, #32]
 8003aec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003af0:	4310      	orrs	r0, r2
 8003af2:	6220      	str	r0, [r4, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	f012 0f02 	tst.w	r2, #2
 8003afa:	d00c      	beq.n	8003b16 <HAL_RCC_ClockConfig+0xda>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003afc:	68d8      	ldr	r0, [r3, #12]
 8003afe:	4a6f      	ldr	r2, [pc, #444]	; (8003cbc <HAL_RCC_ClockConfig+0x280>)
 8003b00:	6992      	ldr	r2, [r2, #24]
 8003b02:	f002 020f 	and.w	r2, r2, #15
 8003b06:	4290      	cmp	r0, r2
 8003b08:	d905      	bls.n	8003b16 <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b0a:	4c6c      	ldr	r4, [pc, #432]	; (8003cbc <HAL_RCC_ClockConfig+0x280>)
 8003b0c:	69a2      	ldr	r2, [r4, #24]
 8003b0e:	f022 020f 	bic.w	r2, r2, #15
 8003b12:	4310      	orrs	r0, r2
 8003b14:	61a0      	str	r0, [r4, #24]
 8003b16:	461c      	mov	r4, r3
 8003b18:	460d      	mov	r5, r1
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f013 0f01 	tst.w	r3, #1
 8003b20:	d041      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x16a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003b22:	4a66      	ldr	r2, [pc, #408]	; (8003cbc <HAL_RCC_ClockConfig+0x280>)
 8003b24:	6993      	ldr	r3, [r2, #24]
 8003b26:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b2a:	68a1      	ldr	r1, [r4, #8]
 8003b2c:	430b      	orrs	r3, r1
 8003b2e:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b30:	6863      	ldr	r3, [r4, #4]
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d00a      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x110>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b36:	2b03      	cmp	r3, #3
 8003b38:	d027      	beq.n	8003b8a <HAL_RCC_ClockConfig+0x14e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d02c      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x15c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b3e:	4a5f      	ldr	r2, [pc, #380]	; (8003cbc <HAL_RCC_ClockConfig+0x280>)
 8003b40:	6812      	ldr	r2, [r2, #0]
 8003b42:	f012 0f04 	tst.w	r2, #4
 8003b46:	d106      	bne.n	8003b56 <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 8003b48:	2001      	movs	r0, #1
 8003b4a:	e0af      	b.n	8003cac <HAL_RCC_ClockConfig+0x270>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b4c:	6812      	ldr	r2, [r2, #0]
 8003b4e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003b52:	f000 80ae 	beq.w	8003cb2 <HAL_RCC_ClockConfig+0x276>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b56:	4959      	ldr	r1, [pc, #356]	; (8003cbc <HAL_RCC_ClockConfig+0x280>)
 8003b58:	690a      	ldr	r2, [r1, #16]
 8003b5a:	f022 0207 	bic.w	r2, r2, #7
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 8003b62:	f7fc fc19 	bl	8000398 <HAL_GetTick>
 8003b66:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b68:	4b54      	ldr	r3, [pc, #336]	; (8003cbc <HAL_RCC_ClockConfig+0x280>)
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b70:	6862      	ldr	r2, [r4, #4]
 8003b72:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8003b76:	d016      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x16a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b78:	f7fc fc0e 	bl	8000398 <HAL_GetTick>
 8003b7c:	1b80      	subs	r0, r0, r6
 8003b7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b82:	4298      	cmp	r0, r3
 8003b84:	d9f0      	bls.n	8003b68 <HAL_RCC_ClockConfig+0x12c>
            return HAL_TIMEOUT;
 8003b86:	2003      	movs	r0, #3
 8003b88:	e090      	b.n	8003cac <HAL_RCC_ClockConfig+0x270>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b8a:	4a4c      	ldr	r2, [pc, #304]	; (8003cbc <HAL_RCC_ClockConfig+0x280>)
 8003b8c:	6812      	ldr	r2, [r2, #0]
 8003b8e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003b92:	d1e0      	bne.n	8003b56 <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 8003b94:	2001      	movs	r0, #1
 8003b96:	e089      	b.n	8003cac <HAL_RCC_ClockConfig+0x270>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b98:	4a48      	ldr	r2, [pc, #288]	; (8003cbc <HAL_RCC_ClockConfig+0x280>)
 8003b9a:	6812      	ldr	r2, [r2, #0]
 8003b9c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003ba0:	d1d9      	bne.n	8003b56 <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	e082      	b.n	8003cac <HAL_RCC_ClockConfig+0x270>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	f013 0f02 	tst.w	r3, #2
 8003bac:	d00c      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x18c>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003bae:	68e2      	ldr	r2, [r4, #12]
 8003bb0:	4b42      	ldr	r3, [pc, #264]	; (8003cbc <HAL_RCC_ClockConfig+0x280>)
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	f003 030f 	and.w	r3, r3, #15
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d205      	bcs.n	8003bc8 <HAL_RCC_ClockConfig+0x18c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bbc:	493f      	ldr	r1, [pc, #252]	; (8003cbc <HAL_RCC_ClockConfig+0x280>)
 8003bbe:	698b      	ldr	r3, [r1, #24]
 8003bc0:	f023 030f 	bic.w	r3, r3, #15
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc8:	4b3b      	ldr	r3, [pc, #236]	; (8003cb8 <HAL_RCC_ClockConfig+0x27c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 030f 	and.w	r3, r3, #15
 8003bd0:	42ab      	cmp	r3, r5
 8003bd2:	d90c      	bls.n	8003bee <HAL_RCC_ClockConfig+0x1b2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd4:	4a38      	ldr	r2, [pc, #224]	; (8003cb8 <HAL_RCC_ClockConfig+0x27c>)
 8003bd6:	6813      	ldr	r3, [r2, #0]
 8003bd8:	f023 030f 	bic.w	r3, r3, #15
 8003bdc:	432b      	orrs	r3, r5
 8003bde:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be0:	6813      	ldr	r3, [r2, #0]
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	42ab      	cmp	r3, r5
 8003be8:	d001      	beq.n	8003bee <HAL_RCC_ClockConfig+0x1b2>
      return HAL_ERROR;
 8003bea:	2001      	movs	r0, #1
 8003bec:	e05e      	b.n	8003cac <HAL_RCC_ClockConfig+0x270>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	f013 0f04 	tst.w	r3, #4
 8003bf4:	d00c      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x1d4>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003bf6:	6922      	ldr	r2, [r4, #16]
 8003bf8:	4b30      	ldr	r3, [pc, #192]	; (8003cbc <HAL_RCC_ClockConfig+0x280>)
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d205      	bcs.n	8003c10 <HAL_RCC_ClockConfig+0x1d4>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c04:	492d      	ldr	r1, [pc, #180]	; (8003cbc <HAL_RCC_ClockConfig+0x280>)
 8003c06:	698b      	ldr	r3, [r1, #24]
 8003c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c10:	6823      	ldr	r3, [r4, #0]
 8003c12:	f013 0f08 	tst.w	r3, #8
 8003c16:	d00c      	beq.n	8003c32 <HAL_RCC_ClockConfig+0x1f6>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c18:	6962      	ldr	r2, [r4, #20]
 8003c1a:	4b28      	ldr	r3, [pc, #160]	; (8003cbc <HAL_RCC_ClockConfig+0x280>)
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d205      	bcs.n	8003c32 <HAL_RCC_ClockConfig+0x1f6>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c26:	4925      	ldr	r1, [pc, #148]	; (8003cbc <HAL_RCC_ClockConfig+0x280>)
 8003c28:	69cb      	ldr	r3, [r1, #28]
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	f013 0f10 	tst.w	r3, #16
 8003c38:	d00c      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x218>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c3a:	69a2      	ldr	r2, [r4, #24]
 8003c3c:	4b1f      	ldr	r3, [pc, #124]	; (8003cbc <HAL_RCC_ClockConfig+0x280>)
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d205      	bcs.n	8003c54 <HAL_RCC_ClockConfig+0x218>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c48:	491c      	ldr	r1, [pc, #112]	; (8003cbc <HAL_RCC_ClockConfig+0x280>)
 8003c4a:	69cb      	ldr	r3, [r1, #28]
 8003c4c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003c50:	431a      	orrs	r2, r3
 8003c52:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	f013 0f20 	tst.w	r3, #32
 8003c5a:	d00c      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x23a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c5c:	69e2      	ldr	r2, [r4, #28]
 8003c5e:	4b17      	ldr	r3, [pc, #92]	; (8003cbc <HAL_RCC_ClockConfig+0x280>)
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d205      	bcs.n	8003c76 <HAL_RCC_ClockConfig+0x23a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003c6a:	4914      	ldr	r1, [pc, #80]	; (8003cbc <HAL_RCC_ClockConfig+0x280>)
 8003c6c:	6a0b      	ldr	r3, [r1, #32]
 8003c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c72:	431a      	orrs	r2, r3
 8003c74:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c76:	f7ff fdeb 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 8003c7a:	4910      	ldr	r1, [pc, #64]	; (8003cbc <HAL_RCC_ClockConfig+0x280>)
 8003c7c:	698b      	ldr	r3, [r1, #24]
 8003c7e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003c82:	4a0f      	ldr	r2, [pc, #60]	; (8003cc0 <HAL_RCC_ClockConfig+0x284>)
 8003c84:	5cd3      	ldrb	r3, [r2, r3]
 8003c86:	f003 031f 	and.w	r3, r3, #31
 8003c8a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c8c:	698b      	ldr	r3, [r1, #24]
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	5cd3      	ldrb	r3, [r2, r3]
 8003c94:	f003 031f 	and.w	r3, r3, #31
 8003c98:	fa20 f303 	lsr.w	r3, r0, r3
 8003c9c:	4a09      	ldr	r2, [pc, #36]	; (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003c9e:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8003ca0:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <HAL_RCC_ClockConfig+0x28c>)
 8003ca2:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8003ca4:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <HAL_RCC_ClockConfig+0x290>)
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	f7fc fb16 	bl	80002d8 <HAL_InitTick>
}
 8003cac:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003cae:	2001      	movs	r0, #1
 8003cb0:	4770      	bx	lr
          return HAL_ERROR;
 8003cb2:	2001      	movs	r0, #1
 8003cb4:	e7fa      	b.n	8003cac <HAL_RCC_ClockConfig+0x270>
 8003cb6:	bf00      	nop
 8003cb8:	52002000 	.word	0x52002000
 8003cbc:	58024400 	.word	0x58024400
 8003cc0:	0800e064 	.word	0x0800e064
 8003cc4:	200000c0 	.word	0x200000c0
 8003cc8:	200000bc 	.word	0x200000bc
 8003ccc:	20000004 	.word	0x20000004

08003cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd0:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003cd2:	f7ff fdbd 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 8003cd6:	4a0b      	ldr	r2, [pc, #44]	; (8003d04 <HAL_RCC_GetHCLKFreq+0x34>)
 8003cd8:	6993      	ldr	r3, [r2, #24]
 8003cda:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003cde:	490a      	ldr	r1, [pc, #40]	; (8003d08 <HAL_RCC_GetHCLKFreq+0x38>)
 8003ce0:	5ccb      	ldrb	r3, [r1, r3]
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cea:	6992      	ldr	r2, [r2, #24]
 8003cec:	f002 020f 	and.w	r2, r2, #15
 8003cf0:	5c88      	ldrb	r0, [r1, r2]
 8003cf2:	f000 001f 	and.w	r0, r0, #31
 8003cf6:	fa23 f000 	lsr.w	r0, r3, r0
 8003cfa:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <HAL_RCC_GetHCLKFreq+0x3c>)
 8003cfc:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cfe:	4a04      	ldr	r2, [pc, #16]	; (8003d10 <HAL_RCC_GetHCLKFreq+0x40>)
 8003d00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8003d02:	bd08      	pop	{r3, pc}
 8003d04:	58024400 	.word	0x58024400
 8003d08:	0800e064 	.word	0x0800e064
 8003d0c:	200000c0 	.word	0x200000c0
 8003d10:	200000bc 	.word	0x200000bc

08003d14 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d14:	4b40      	ldr	r3, [pc, #256]	; (8003e18 <RCCEx_PLL2_Config+0x104>)
 8003d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d18:	f003 0303 	and.w	r3, r3, #3
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	d079      	beq.n	8003e14 <RCCEx_PLL2_Config+0x100>
{
 8003d20:	b570      	push	{r4, r5, r6, lr}
 8003d22:	460e      	mov	r6, r1
 8003d24:	4604      	mov	r4, r0


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003d26:	4a3c      	ldr	r2, [pc, #240]	; (8003e18 <RCCEx_PLL2_Config+0x104>)
 8003d28:	6813      	ldr	r3, [r2, #0]
 8003d2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d30:	f7fc fb32 	bl	8000398 <HAL_GetTick>
 8003d34:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d36:	4b38      	ldr	r3, [pc, #224]	; (8003e18 <RCCEx_PLL2_Config+0x104>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003d3e:	d006      	beq.n	8003d4e <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003d40:	f7fc fb2a 	bl	8000398 <HAL_GetTick>
 8003d44:	1b40      	subs	r0, r0, r5
 8003d46:	2802      	cmp	r0, #2
 8003d48:	d9f5      	bls.n	8003d36 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 8003d4a:	2003      	movs	r0, #3

  }


  return status;
}
 8003d4c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003d4e:	4b32      	ldr	r3, [pc, #200]	; (8003e18 <RCCEx_PLL2_Config+0x104>)
 8003d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d52:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8003d56:	6821      	ldr	r1, [r4, #0]
 8003d58:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8003d5c:	629a      	str	r2, [r3, #40]	; 0x28
 8003d5e:	6862      	ldr	r2, [r4, #4]
 8003d60:	3a01      	subs	r2, #1
 8003d62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d66:	68a1      	ldr	r1, [r4, #8]
 8003d68:	3901      	subs	r1, #1
 8003d6a:	0249      	lsls	r1, r1, #9
 8003d6c:	b289      	uxth	r1, r1
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	68e1      	ldr	r1, [r4, #12]
 8003d72:	3901      	subs	r1, #1
 8003d74:	0409      	lsls	r1, r1, #16
 8003d76:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	6921      	ldr	r1, [r4, #16]
 8003d7e:	3901      	subs	r1, #1
 8003d80:	0609      	lsls	r1, r1, #24
 8003d82:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8003d86:	430a      	orrs	r2, r1
 8003d88:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003d90:	6961      	ldr	r1, [r4, #20]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d98:	f022 0220 	bic.w	r2, r2, #32
 8003d9c:	69a1      	ldr	r1, [r4, #24]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da4:	f022 0210 	bic.w	r2, r2, #16
 8003da8:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003daa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003dac:	4a1b      	ldr	r2, [pc, #108]	; (8003e1c <RCCEx_PLL2_Config+0x108>)
 8003dae:	400a      	ands	r2, r1
 8003db0:	69e1      	ldr	r1, [r4, #28]
 8003db2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003db6:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dba:	f042 0210 	orr.w	r2, r2, #16
 8003dbe:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8003dc0:	b9c6      	cbnz	r6, 8003df4 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003dca:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 8003dcc:	4a12      	ldr	r2, [pc, #72]	; (8003e18 <RCCEx_PLL2_Config+0x104>)
 8003dce:	6813      	ldr	r3, [r2, #0]
 8003dd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dd4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003dd6:	f7fc fadf 	bl	8000398 <HAL_GetTick>
 8003dda:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ddc:	4b0e      	ldr	r3, [pc, #56]	; (8003e18 <RCCEx_PLL2_Config+0x104>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003de4:	d114      	bne.n	8003e10 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003de6:	f7fc fad7 	bl	8000398 <HAL_GetTick>
 8003dea:	1b00      	subs	r0, r0, r4
 8003dec:	2802      	cmp	r0, #2
 8003dee:	d9f5      	bls.n	8003ddc <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8003df0:	2003      	movs	r0, #3
 8003df2:	e7ab      	b.n	8003d4c <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8003df4:	2e01      	cmp	r6, #1
 8003df6:	d005      	beq.n	8003e04 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003df8:	4a07      	ldr	r2, [pc, #28]	; (8003e18 <RCCEx_PLL2_Config+0x104>)
 8003dfa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003dfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e00:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e02:	e7e3      	b.n	8003dcc <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003e04:	4a04      	ldr	r2, [pc, #16]	; (8003e18 <RCCEx_PLL2_Config+0x104>)
 8003e06:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003e08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e0c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e0e:	e7dd      	b.n	8003dcc <RCCEx_PLL2_Config+0xb8>
  return status;
 8003e10:	2000      	movs	r0, #0
 8003e12:	e79b      	b.n	8003d4c <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8003e14:	2001      	movs	r0, #1
}
 8003e16:	4770      	bx	lr
 8003e18:	58024400 	.word	0x58024400
 8003e1c:	ffff0007 	.word	0xffff0007

08003e20 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e20:	4b40      	ldr	r3, [pc, #256]	; (8003f24 <RCCEx_PLL3_Config+0x104>)
 8003e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e24:	f003 0303 	and.w	r3, r3, #3
 8003e28:	2b03      	cmp	r3, #3
 8003e2a:	d079      	beq.n	8003f20 <RCCEx_PLL3_Config+0x100>
{
 8003e2c:	b570      	push	{r4, r5, r6, lr}
 8003e2e:	460e      	mov	r6, r1
 8003e30:	4604      	mov	r4, r0


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e32:	4a3c      	ldr	r2, [pc, #240]	; (8003f24 <RCCEx_PLL3_Config+0x104>)
 8003e34:	6813      	ldr	r3, [r2, #0]
 8003e36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e3c:	f7fc faac 	bl	8000398 <HAL_GetTick>
 8003e40:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e42:	4b38      	ldr	r3, [pc, #224]	; (8003f24 <RCCEx_PLL3_Config+0x104>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003e4a:	d006      	beq.n	8003e5a <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003e4c:	f7fc faa4 	bl	8000398 <HAL_GetTick>
 8003e50:	1b40      	subs	r0, r0, r5
 8003e52:	2802      	cmp	r0, #2
 8003e54:	d9f5      	bls.n	8003e42 <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 8003e56:	2003      	movs	r0, #3

  }


  return status;
}
 8003e58:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003e5a:	4b32      	ldr	r3, [pc, #200]	; (8003f24 <RCCEx_PLL3_Config+0x104>)
 8003e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e5e:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 8003e62:	6821      	ldr	r1, [r4, #0]
 8003e64:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8003e68:	629a      	str	r2, [r3, #40]	; 0x28
 8003e6a:	6862      	ldr	r2, [r4, #4]
 8003e6c:	3a01      	subs	r2, #1
 8003e6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e72:	68a1      	ldr	r1, [r4, #8]
 8003e74:	3901      	subs	r1, #1
 8003e76:	0249      	lsls	r1, r1, #9
 8003e78:	b289      	uxth	r1, r1
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	68e1      	ldr	r1, [r4, #12]
 8003e7e:	3901      	subs	r1, #1
 8003e80:	0409      	lsls	r1, r1, #16
 8003e82:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8003e86:	430a      	orrs	r2, r1
 8003e88:	6921      	ldr	r1, [r4, #16]
 8003e8a:	3901      	subs	r1, #1
 8003e8c:	0609      	lsls	r1, r1, #24
 8003e8e:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8003e92:	430a      	orrs	r2, r1
 8003e94:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e98:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003e9c:	6961      	ldr	r1, [r4, #20]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ea8:	69a1      	ldr	r1, [r4, #24]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eb4:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003eb6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003eb8:	4a1b      	ldr	r2, [pc, #108]	; (8003f28 <RCCEx_PLL3_Config+0x108>)
 8003eba:	400a      	ands	r2, r1
 8003ebc:	69e1      	ldr	r1, [r4, #28]
 8003ebe:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003ec2:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eca:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8003ecc:	b9c6      	cbnz	r6, 8003f00 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003ece:	461a      	mov	r2, r3
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ed6:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8003ed8:	4a12      	ldr	r2, [pc, #72]	; (8003f24 <RCCEx_PLL3_Config+0x104>)
 8003eda:	6813      	ldr	r3, [r2, #0]
 8003edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003ee2:	f7fc fa59 	bl	8000398 <HAL_GetTick>
 8003ee6:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ee8:	4b0e      	ldr	r3, [pc, #56]	; (8003f24 <RCCEx_PLL3_Config+0x104>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003ef0:	d114      	bne.n	8003f1c <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003ef2:	f7fc fa51 	bl	8000398 <HAL_GetTick>
 8003ef6:	1b00      	subs	r0, r0, r4
 8003ef8:	2802      	cmp	r0, #2
 8003efa:	d9f5      	bls.n	8003ee8 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 8003efc:	2003      	movs	r0, #3
 8003efe:	e7ab      	b.n	8003e58 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8003f00:	2e01      	cmp	r6, #1
 8003f02:	d005      	beq.n	8003f10 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003f04:	4a07      	ldr	r2, [pc, #28]	; (8003f24 <RCCEx_PLL3_Config+0x104>)
 8003f06:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003f08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f0c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f0e:	e7e3      	b.n	8003ed8 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003f10:	4a04      	ldr	r2, [pc, #16]	; (8003f24 <RCCEx_PLL3_Config+0x104>)
 8003f12:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003f14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f18:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f1a:	e7dd      	b.n	8003ed8 <RCCEx_PLL3_Config+0xb8>
  return status;
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	e79b      	b.n	8003e58 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8003f20:	2001      	movs	r0, #1
}
 8003f22:	4770      	bx	lr
 8003f24:	58024400 	.word	0x58024400
 8003f28:	ffff0007 	.word	0xffff0007

08003f2c <HAL_RCCEx_PeriphCLKConfig>:
{
 8003f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f30:	6803      	ldr	r3, [r0, #0]
 8003f32:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003f36:	d02b      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x64>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003f38:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003f3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f3e:	d018      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8003f40:	d907      	bls.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003f42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f46:	d01d      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003f48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f4c:	d12e      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x80>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f4e:	2500      	movs	r5, #0
 8003f50:	e006      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x34>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003f52:	bb5b      	cbnz	r3, 8003fac <HAL_RCCEx_PeriphCLKConfig+0x80>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f54:	4a93      	ldr	r2, [pc, #588]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003f56:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f5c:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f5e:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003f60:	4a90      	ldr	r2, [pc, #576]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003f62:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003f64:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003f68:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003f6a:	430b      	orrs	r3, r1
 8003f6c:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f6e:	2600      	movs	r6, #0
 8003f70:	e010      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f72:	2102      	movs	r1, #2
 8003f74:	3004      	adds	r0, #4
 8003f76:	f7ff fecd 	bl	8003d14 <RCCEx_PLL2_Config>
 8003f7a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f7c:	2d00      	cmp	r5, #0
 8003f7e:	d0ef      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003f80:	462e      	mov	r6, r5
 8003f82:	e007      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f84:	2102      	movs	r1, #2
 8003f86:	3024      	adds	r0, #36	; 0x24
 8003f88:	f7ff ff4a 	bl	8003e20 <RCCEx_PLL3_Config>
 8003f8c:	4605      	mov	r5, r0
      break;
 8003f8e:	e7f5      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x50>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f90:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f92:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003f9a:	d017      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003f9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d832      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003fa2:	e8df f003 	tbb	[pc, r3]
 8003fa6:	2406      	.short	0x2406
 8003fa8:	0b2a      	.short	0x0b2a
 8003faa:	0b          	.byte	0x0b
 8003fab:	00          	.byte	0x00
      ret = HAL_ERROR;
 8003fac:	2601      	movs	r6, #1
 8003fae:	4635      	mov	r5, r6
 8003fb0:	e7f0      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb2:	4a7c      	ldr	r2, [pc, #496]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003fb4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fba:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003fbc:	bb3d      	cbnz	r5, 800400e <HAL_RCCEx_PeriphCLKConfig+0xe2>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fbe:	4a79      	ldr	r2, [pc, #484]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003fc0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003fc2:	f023 0307 	bic.w	r3, r3, #7
 8003fc6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003fd2:	d033      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003fd4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fd6:	2b80      	cmp	r3, #128	; 0x80
 8003fd8:	d044      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8003fda:	d81a      	bhi.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8003fdc:	b30b      	cbz	r3, 8004022 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8003fde:	2b40      	cmp	r3, #64	; 0x40
 8003fe0:	d11c      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xf0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	1d20      	adds	r0, r4, #4
 8003fe6:	f7ff fe95 	bl	8003d14 <RCCEx_PLL2_Config>
 8003fea:	4605      	mov	r5, r0
      break;
 8003fec:	e01e      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x100>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fee:	2100      	movs	r1, #0
 8003ff0:	1d20      	adds	r0, r4, #4
 8003ff2:	f7ff fe8f 	bl	8003d14 <RCCEx_PLL2_Config>
 8003ff6:	4605      	mov	r5, r0
      break;
 8003ff8:	e7e0      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004000:	f7ff ff0e 	bl	8003e20 <RCCEx_PLL3_Config>
 8004004:	4605      	mov	r5, r0
      break;
 8004006:	e7d9      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = HAL_ERROR;
 8004008:	2601      	movs	r6, #1
 800400a:	4635      	mov	r5, r6
 800400c:	e7de      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800400e:	462e      	mov	r6, r5
 8004010:	e7dc      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai23ClockSelection)
 8004012:	2bc0      	cmp	r3, #192	; 0xc0
 8004014:	d00a      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x100>
 8004016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800401a:	d007      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x100>
      ret = HAL_ERROR;
 800401c:	2601      	movs	r6, #1
 800401e:	4635      	mov	r5, r6
 8004020:	e00c      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x110>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004022:	4a60      	ldr	r2, [pc, #384]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004024:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800402a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800402c:	bb0d      	cbnz	r5, 8004072 <HAL_RCCEx_PeriphCLKConfig+0x146>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800402e:	4a5d      	ldr	r2, [pc, #372]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004030:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004032:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8004036:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004038:	430b      	orrs	r3, r1
 800403a:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800403c:	6823      	ldr	r3, [r4, #0]
 800403e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004042:	d02f      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004044:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8004048:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800404c:	d03e      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 800404e:	d812      	bhi.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004050:	b1d3      	cbz	r3, 8004088 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004052:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004056:	d114      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x156>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004058:	2100      	movs	r1, #0
 800405a:	1d20      	adds	r0, r4, #4
 800405c:	f7ff fe5a 	bl	8003d14 <RCCEx_PLL2_Config>
 8004060:	4605      	mov	r5, r0
      break;
 8004062:	e016      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004064:	2100      	movs	r1, #0
 8004066:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800406a:	f7ff fed9 	bl	8003e20 <RCCEx_PLL3_Config>
 800406e:	4605      	mov	r5, r0
      break;
 8004070:	e7dc      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x100>
 8004072:	462e      	mov	r6, r5
 8004074:	e7e2      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004076:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800407a:	d00a      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800407c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004080:	d007      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = HAL_ERROR;
 8004082:	2601      	movs	r6, #1
 8004084:	4635      	mov	r5, r6
 8004086:	e00d      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004088:	4a46      	ldr	r2, [pc, #280]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800408a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800408c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004090:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004092:	bb15      	cbnz	r5, 80040da <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004094:	4a43      	ldr	r2, [pc, #268]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004096:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004098:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800409c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80040a0:	430b      	orrs	r3, r1
 80040a2:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80040aa:	d02f      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->Sai4BClockSelection)
 80040ac:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80040b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040b4:	d037      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80040b6:	d812      	bhi.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80040b8:	b1d3      	cbz	r3, 80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 80040ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040be:	d114      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040c0:	2100      	movs	r1, #0
 80040c2:	1d20      	adds	r0, r4, #4
 80040c4:	f7ff fe26 	bl	8003d14 <RCCEx_PLL2_Config>
 80040c8:	4605      	mov	r5, r0
      break;
 80040ca:	e016      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80040cc:	2100      	movs	r1, #0
 80040ce:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80040d2:	f7ff fea5 	bl	8003e20 <RCCEx_PLL3_Config>
 80040d6:	4605      	mov	r5, r0
      break;
 80040d8:	e7db      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80040da:	462e      	mov	r6, r5
 80040dc:	e7e2      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
    switch(PeriphClkInit->Sai4BClockSelection)
 80040de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040e2:	d00a      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80040e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040e8:	d007      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      ret = HAL_ERROR;
 80040ea:	2601      	movs	r6, #1
 80040ec:	4635      	mov	r5, r6
 80040ee:	e00d      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f0:	4a2c      	ldr	r2, [pc, #176]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80040f2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80040f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80040fa:	b9dd      	cbnz	r5, 8004134 <HAL_RCCEx_PeriphCLKConfig+0x208>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80040fc:	4a29      	ldr	r2, [pc, #164]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80040fe:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004100:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004104:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8004108:	430b      	orrs	r3, r1
 800410a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004112:	d02a      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x23e>
    switch(PeriphClkInit->QspiClockSelection)
 8004114:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004116:	2b10      	cmp	r3, #16
 8004118:	d012      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x214>
 800411a:	d90d      	bls.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800411c:	2b20      	cmp	r3, #32
 800411e:	d01d      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004120:	2b30      	cmp	r3, #48	; 0x30
 8004122:	d012      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004124:	e009      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x20e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004126:	2100      	movs	r1, #0
 8004128:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800412c:	f7ff fe78 	bl	8003e20 <RCCEx_PLL3_Config>
 8004130:	4605      	mov	r5, r0
      break;
 8004132:	e7e2      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004134:	462e      	mov	r6, r5
 8004136:	e7e9      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->QspiClockSelection)
 8004138:	b13b      	cbz	r3, 800414a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      ret = HAL_ERROR;
 800413a:	2601      	movs	r6, #1
 800413c:	4635      	mov	r5, r6
 800413e:	e014      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004140:	4a18      	ldr	r2, [pc, #96]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004142:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004148:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800414a:	b96d      	cbnz	r5, 8004168 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800414c:	4a15      	ldr	r2, [pc, #84]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800414e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004150:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004154:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004156:	430b      	orrs	r3, r1
 8004158:	64d3      	str	r3, [r2, #76]	; 0x4c
 800415a:	e006      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x23e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800415c:	2102      	movs	r1, #2
 800415e:	1d20      	adds	r0, r4, #4
 8004160:	f7ff fdd8 	bl	8003d14 <RCCEx_PLL2_Config>
 8004164:	4605      	mov	r5, r0
      break;
 8004166:	e7f0      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004168:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004170:	d027      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch(PeriphClkInit->Spi123ClockSelection)
 8004172:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004178:	d03e      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800417a:	d809      	bhi.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800417c:	b1a3      	cbz	r3, 80041a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800417e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004182:	d10b      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x270>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004184:	2100      	movs	r1, #0
 8004186:	1d20      	adds	r0, r4, #4
 8004188:	f7ff fdc4 	bl	8003d14 <RCCEx_PLL2_Config>
 800418c:	4605      	mov	r5, r0
      break;
 800418e:	e010      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    switch(PeriphClkInit->Spi123ClockSelection)
 8004190:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004194:	d00d      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004196:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800419a:	d00a      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
      ret = HAL_ERROR;
 800419c:	2601      	movs	r6, #1
 800419e:	4635      	mov	r5, r6
 80041a0:	e00f      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80041a2:	bf00      	nop
 80041a4:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041a8:	4a93      	ldr	r2, [pc, #588]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80041aa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80041ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80041b2:	bb45      	cbnz	r5, 8004206 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80041b4:	4a90      	ldr	r2, [pc, #576]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80041b6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80041b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041bc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80041be:	430b      	orrs	r3, r1
 80041c0:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80041c2:	6823      	ldr	r3, [r4, #0]
 80041c4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80041c8:	d033      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Spi45ClockSelection)
 80041ca:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80041cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041d0:	d027      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 80041d2:	d81a      	bhi.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80041d4:	b13b      	cbz	r3, 80041e6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80041d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041da:	d11f      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041dc:	2101      	movs	r1, #1
 80041de:	1d20      	adds	r0, r4, #4
 80041e0:	f7ff fd98 	bl	8003d14 <RCCEx_PLL2_Config>
 80041e4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80041e6:	bb1d      	cbnz	r5, 8004230 <HAL_RCCEx_PeriphCLKConfig+0x304>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80041e8:	4a83      	ldr	r2, [pc, #524]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80041ea:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80041ec:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80041f0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80041f2:	430b      	orrs	r3, r1
 80041f4:	6513      	str	r3, [r2, #80]	; 0x50
 80041f6:	e01c      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x306>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80041f8:	2100      	movs	r1, #0
 80041fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80041fe:	f7ff fe0f 	bl	8003e20 <RCCEx_PLL3_Config>
 8004202:	4605      	mov	r5, r0
      break;
 8004204:	e7d5      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004206:	462e      	mov	r6, r5
 8004208:	e7db      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch(PeriphClkInit->Spi45ClockSelection)
 800420a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800420e:	d0ea      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004214:	d0e7      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004216:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800421a:	d0e4      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      ret = HAL_ERROR;
 800421c:	2601      	movs	r6, #1
 800421e:	4635      	mov	r5, r6
 8004220:	e007      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x306>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004222:	2101      	movs	r1, #1
 8004224:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004228:	f7ff fdfa 	bl	8003e20 <RCCEx_PLL3_Config>
 800422c:	4605      	mov	r5, r0
      break;
 800422e:	e7da      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004230:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004238:	d02c      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x368>
    switch(PeriphClkInit->Spi6ClockSelection)
 800423a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800423e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004242:	d01f      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8004244:	d812      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x340>
 8004246:	b13b      	cbz	r3, 8004258 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8004248:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800424c:	d117      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x352>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800424e:	2101      	movs	r1, #1
 8004250:	1d20      	adds	r0, r4, #4
 8004252:	f7ff fd5f 	bl	8003d14 <RCCEx_PLL2_Config>
 8004256:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004258:	b9dd      	cbnz	r5, 8004292 <HAL_RCCEx_PeriphCLKConfig+0x366>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800425a:	4a67      	ldr	r2, [pc, #412]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 800425c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800425e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8004262:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8004266:	430b      	orrs	r3, r1
 8004268:	6593      	str	r3, [r2, #88]	; 0x58
 800426a:	e013      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x368>
    switch(PeriphClkInit->Spi6ClockSelection)
 800426c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004270:	d0f2      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8004272:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004276:	d0ef      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8004278:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800427c:	d0ec      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      ret = HAL_ERROR;
 800427e:	2601      	movs	r6, #1
 8004280:	4635      	mov	r5, r6
 8004282:	e007      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004284:	2101      	movs	r1, #1
 8004286:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800428a:	f7ff fdc9 	bl	8003e20 <RCCEx_PLL3_Config>
 800428e:	4605      	mov	r5, r0
      break;
 8004290:	e7e2      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8004292:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004294:	6823      	ldr	r3, [r4, #0]
 8004296:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800429a:	d01f      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->FdcanClockSelection)
 800429c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800429e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042a2:	d006      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80042a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042a8:	d011      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 80042aa:	b13b      	cbz	r3, 80042bc <HAL_RCCEx_PeriphCLKConfig+0x390>
      ret = HAL_ERROR;
 80042ac:	2601      	movs	r6, #1
 80042ae:	4635      	mov	r5, r6
 80042b0:	e014      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042b2:	4a51      	ldr	r2, [pc, #324]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80042b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80042b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ba:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80042bc:	b96d      	cbnz	r5, 80042da <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80042be:	4a4e      	ldr	r2, [pc, #312]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80042c0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80042c2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80042c6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80042c8:	430b      	orrs	r3, r1
 80042ca:	6513      	str	r3, [r2, #80]	; 0x50
 80042cc:	e006      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042ce:	2101      	movs	r1, #1
 80042d0:	1d20      	adds	r0, r4, #4
 80042d2:	f7ff fd1f 	bl	8003d14 <RCCEx_PLL2_Config>
 80042d6:	4605      	mov	r5, r0
      break;
 80042d8:	e7f0      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x390>
 80042da:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80042e2:	d01e      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    switch(PeriphClkInit->FmcClockSelection)
 80042e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80042e6:	2b03      	cmp	r3, #3
 80042e8:	d817      	bhi.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 80042ea:	e8df f003 	tbb	[pc, r3]
 80042ee:	0207      	.short	0x0207
 80042f0:	0710      	.short	0x0710
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042f2:	4a41      	ldr	r2, [pc, #260]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80042f4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80042f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042fa:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80042fc:	b985      	cbnz	r5, 8004320 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80042fe:	4a3e      	ldr	r2, [pc, #248]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004300:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004302:	f023 0303 	bic.w	r3, r3, #3
 8004306:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004308:	430b      	orrs	r3, r1
 800430a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800430c:	e009      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800430e:	2102      	movs	r1, #2
 8004310:	1d20      	adds	r0, r4, #4
 8004312:	f7ff fcff 	bl	8003d14 <RCCEx_PLL2_Config>
 8004316:	4605      	mov	r5, r0
      break;
 8004318:	e7f0      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
      ret = HAL_ERROR;
 800431a:	2601      	movs	r6, #1
 800431c:	4635      	mov	r5, r6
 800431e:	e000      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8004320:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004328:	d11f      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x43e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800432a:	6823      	ldr	r3, [r4, #0]
 800432c:	f013 0f01 	tst.w	r3, #1
 8004330:	f000 809e 	beq.w	8004470 <HAL_RCCEx_PeriphCLKConfig+0x544>
    switch(PeriphClkInit->Usart16ClockSelection)
 8004334:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8004336:	2b28      	cmp	r3, #40	; 0x28
 8004338:	f200 8096 	bhi.w	8004468 <HAL_RCCEx_PeriphCLKConfig+0x53c>
 800433c:	e8df f003 	tbb	[pc, r3]
 8004340:	94949484 	.word	0x94949484
 8004344:	94949494 	.word	0x94949494
 8004348:	9494947f 	.word	0x9494947f
 800434c:	94949494 	.word	0x94949494
 8004350:	9494948d 	.word	0x9494948d
 8004354:	94949494 	.word	0x94949494
 8004358:	94949484 	.word	0x94949484
 800435c:	94949494 	.word	0x94949494
 8004360:	94949484 	.word	0x94949484
 8004364:	94949494 	.word	0x94949494
 8004368:	84          	.byte	0x84
 8004369:	00          	.byte	0x00
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800436a:	4a24      	ldr	r2, [pc, #144]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800436c:	6813      	ldr	r3, [r2, #0]
 800436e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004372:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004374:	f7fc f810 	bl	8000398 <HAL_GetTick>
 8004378:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800437a:	4b20      	ldr	r3, [pc, #128]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004382:	d105      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x464>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004384:	f7fc f808 	bl	8000398 <HAL_GetTick>
 8004388:	1bc0      	subs	r0, r0, r7
 800438a:	2864      	cmp	r0, #100	; 0x64
 800438c:	d9f5      	bls.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x44e>
        ret = HAL_TIMEOUT;
 800438e:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 8004390:	2d00      	cmp	r5, #0
 8004392:	d150      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004394:	4b18      	ldr	r3, [pc, #96]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004398:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800439c:	4053      	eors	r3, r2
 800439e:	f413 7f40 	tst.w	r3, #768	; 0x300
 80043a2:	d00c      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x492>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043a4:	4b14      	ldr	r3, [pc, #80]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80043a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80043ac:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80043ae:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80043b2:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80043b6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80043ba:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80043bc:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80043be:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80043c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043c6:	d01b      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      if(ret == HAL_OK)
 80043c8:	2d00      	cmp	r5, #0
 80043ca:	d136      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x50e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043cc:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80043d0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80043d4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80043d8:	d023      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80043da:	4a07      	ldr	r2, [pc, #28]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80043dc:	6913      	ldr	r3, [r2, #16]
 80043de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80043e2:	6113      	str	r3, [r2, #16]
 80043e4:	4904      	ldr	r1, [pc, #16]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80043e6:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80043e8:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80043ec:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80043f0:	4313      	orrs	r3, r2
 80043f2:	670b      	str	r3, [r1, #112]	; 0x70
 80043f4:	e799      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 80043f6:	bf00      	nop
 80043f8:	58024400 	.word	0x58024400
 80043fc:	58024800 	.word	0x58024800
        tickstart = HAL_GetTick();
 8004400:	f7fb ffca 	bl	8000398 <HAL_GetTick>
 8004404:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004406:	4bac      	ldr	r3, [pc, #688]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440a:	f013 0f02 	tst.w	r3, #2
 800440e:	d1db      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004410:	f7fb ffc2 	bl	8000398 <HAL_GetTick>
 8004414:	1bc0      	subs	r0, r0, r7
 8004416:	f241 3388 	movw	r3, #5000	; 0x1388
 800441a:	4298      	cmp	r0, r3
 800441c:	d9f3      	bls.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x4da>
            ret = HAL_TIMEOUT;
 800441e:	2503      	movs	r5, #3
 8004420:	e7d2      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004422:	48a5      	ldr	r0, [pc, #660]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004424:	6902      	ldr	r2, [r0, #16]
 8004426:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800442a:	49a4      	ldr	r1, [pc, #656]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x790>)
 800442c:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8004430:	4313      	orrs	r3, r2
 8004432:	6103      	str	r3, [r0, #16]
 8004434:	e7d6      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      status = ret;
 8004436:	462e      	mov	r6, r5
 8004438:	e777      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
        status = ret;
 800443a:	462e      	mov	r6, r5
 800443c:	e775      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800443e:	2101      	movs	r1, #1
 8004440:	1d20      	adds	r0, r4, #4
 8004442:	f7ff fc67 	bl	8003d14 <RCCEx_PLL2_Config>
 8004446:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004448:	b98d      	cbnz	r5, 800446e <HAL_RCCEx_PeriphCLKConfig+0x542>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800444a:	4a9b      	ldr	r2, [pc, #620]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800444c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800444e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004452:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004454:	430b      	orrs	r3, r1
 8004456:	6553      	str	r3, [r2, #84]	; 0x54
 8004458:	e00a      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x544>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800445a:	2101      	movs	r1, #1
 800445c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004460:	f7ff fcde 	bl	8003e20 <RCCEx_PLL3_Config>
 8004464:	4605      	mov	r5, r0
      break;
 8004466:	e7ef      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x51c>
      ret = HAL_ERROR;
 8004468:	2601      	movs	r6, #1
 800446a:	4635      	mov	r5, r6
 800446c:	e000      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x544>
 800446e:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	f013 0f02 	tst.w	r3, #2
 8004476:	d020      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x58e>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004478:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800447a:	2b05      	cmp	r3, #5
 800447c:	d819      	bhi.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800447e:	e8df f003 	tbb	[pc, r3]
 8004482:	0308      	.short	0x0308
 8004484:	08080811 	.word	0x08080811
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004488:	2101      	movs	r1, #1
 800448a:	1d20      	adds	r0, r4, #4
 800448c:	f7ff fc42 	bl	8003d14 <RCCEx_PLL2_Config>
 8004490:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004492:	b98d      	cbnz	r5, 80044b8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004494:	4a88      	ldr	r2, [pc, #544]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004496:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004498:	f023 0307 	bic.w	r3, r3, #7
 800449c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800449e:	430b      	orrs	r3, r1
 80044a0:	6553      	str	r3, [r2, #84]	; 0x54
 80044a2:	e00a      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x58e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044a4:	2101      	movs	r1, #1
 80044a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80044aa:	f7ff fcb9 	bl	8003e20 <RCCEx_PLL3_Config>
 80044ae:	4605      	mov	r5, r0
      break;
 80044b0:	e7ef      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x566>
      ret = HAL_ERROR;
 80044b2:	2601      	movs	r6, #1
 80044b4:	4635      	mov	r5, r6
 80044b6:	e000      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x58e>
 80044b8:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	f013 0f04 	tst.w	r3, #4
 80044c0:	d022      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80044c2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80044c6:	2b05      	cmp	r3, #5
 80044c8:	d81a      	bhi.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80044ca:	e8df f003 	tbb	[pc, r3]
 80044ce:	0308      	.short	0x0308
 80044d0:	08080812 	.word	0x08080812
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044d4:	2101      	movs	r1, #1
 80044d6:	1d20      	adds	r0, r4, #4
 80044d8:	f7ff fc1c 	bl	8003d14 <RCCEx_PLL2_Config>
 80044dc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80044de:	b995      	cbnz	r5, 8004506 <HAL_RCCEx_PeriphCLKConfig+0x5da>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044e0:	4a75      	ldr	r2, [pc, #468]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80044e2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80044e4:	f023 0307 	bic.w	r3, r3, #7
 80044e8:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80044ec:	430b      	orrs	r3, r1
 80044ee:	6593      	str	r3, [r2, #88]	; 0x58
 80044f0:	e00a      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044f2:	2101      	movs	r1, #1
 80044f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80044f8:	f7ff fc92 	bl	8003e20 <RCCEx_PLL3_Config>
 80044fc:	4605      	mov	r5, r0
      break;
 80044fe:	e7ee      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x5b2>
      ret = HAL_ERROR;
 8004500:	2601      	movs	r6, #1
 8004502:	4635      	mov	r5, r6
 8004504:	e000      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
 8004506:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004508:	6823      	ldr	r3, [r4, #0]
 800450a:	f013 0f20 	tst.w	r3, #32
 800450e:	d02c      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004510:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004518:	d01f      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x62e>
 800451a:	d812      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x616>
 800451c:	b13b      	cbz	r3, 800452e <HAL_RCCEx_PeriphCLKConfig+0x602>
 800451e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004522:	d117      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x628>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004524:	2100      	movs	r1, #0
 8004526:	1d20      	adds	r0, r4, #4
 8004528:	f7ff fbf4 	bl	8003d14 <RCCEx_PLL2_Config>
 800452c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800452e:	b9dd      	cbnz	r5, 8004568 <HAL_RCCEx_PeriphCLKConfig+0x63c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004530:	4a61      	ldr	r2, [pc, #388]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004532:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004534:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8004538:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800453c:	430b      	orrs	r3, r1
 800453e:	6553      	str	r3, [r2, #84]	; 0x54
 8004540:	e013      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004546:	d0f2      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x602>
 8004548:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800454c:	d0ef      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x602>
 800454e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004552:	d0ec      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x602>
      ret = HAL_ERROR;
 8004554:	2601      	movs	r6, #1
 8004556:	4635      	mov	r5, r6
 8004558:	e007      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x63e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800455a:	2102      	movs	r1, #2
 800455c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004560:	f7ff fc5e 	bl	8003e20 <RCCEx_PLL3_Config>
 8004564:	4605      	mov	r5, r0
      break;
 8004566:	e7e2      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x602>
 8004568:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004570:	d02c      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004572:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8004576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800457a:	d01f      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x690>
 800457c:	d812      	bhi.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800457e:	b13b      	cbz	r3, 8004590 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004584:	d117      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004586:	2100      	movs	r1, #0
 8004588:	1d20      	adds	r0, r4, #4
 800458a:	f7ff fbc3 	bl	8003d14 <RCCEx_PLL2_Config>
 800458e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004590:	b9dd      	cbnz	r5, 80045ca <HAL_RCCEx_PeriphCLKConfig+0x69e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004592:	4a49      	ldr	r2, [pc, #292]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004594:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004596:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800459a:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800459e:	430b      	orrs	r3, r1
 80045a0:	6593      	str	r3, [r2, #88]	; 0x58
 80045a2:	e013      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80045a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a8:	d0f2      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80045aa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80045ae:	d0ef      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80045b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045b4:	d0ec      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x664>
      ret = HAL_ERROR;
 80045b6:	2601      	movs	r6, #1
 80045b8:	4635      	mov	r5, r6
 80045ba:	e007      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80045bc:	2102      	movs	r1, #2
 80045be:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80045c2:	f7ff fc2d 	bl	8003e20 <RCCEx_PLL3_Config>
 80045c6:	4605      	mov	r5, r0
      break;
 80045c8:	e7e2      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80045ca:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80045cc:	6823      	ldr	r3, [r4, #0]
 80045ce:	f013 0f80 	tst.w	r3, #128	; 0x80
 80045d2:	d02c      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80045d4:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80045d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045dc:	d01f      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80045de:	d812      	bhi.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 80045e0:	b13b      	cbz	r3, 80045f2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 80045e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045e6:	d117      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045e8:	2100      	movs	r1, #0
 80045ea:	1d20      	adds	r0, r4, #4
 80045ec:	f7ff fb92 	bl	8003d14 <RCCEx_PLL2_Config>
 80045f0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80045f2:	b9dd      	cbnz	r5, 800462c <HAL_RCCEx_PeriphCLKConfig+0x700>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80045f4:	4a30      	ldr	r2, [pc, #192]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80045f6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80045f8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80045fc:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8004600:	430b      	orrs	r3, r1
 8004602:	6593      	str	r3, [r2, #88]	; 0x58
 8004604:	e013      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004606:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800460a:	d0f2      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 800460c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004610:	d0ef      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8004612:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004616:	d0ec      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      ret = HAL_ERROR;
 8004618:	2601      	movs	r6, #1
 800461a:	4635      	mov	r5, r6
 800461c:	e007      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x702>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800461e:	2102      	movs	r1, #2
 8004620:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004624:	f7ff fbfc 	bl	8003e20 <RCCEx_PLL3_Config>
 8004628:	4605      	mov	r5, r0
      break;
 800462a:	e7e2      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 800462c:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	f013 0f08 	tst.w	r3, #8
 8004634:	d00c      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x724>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004636:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800463a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800463e:	d028      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x766>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004640:	4a1d      	ldr	r2, [pc, #116]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004642:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004644:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004648:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800464c:	430b      	orrs	r3, r1
 800464e:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	f013 0f10 	tst.w	r3, #16
 8004656:	d00c      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x746>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004658:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800465c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004660:	d020      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004662:	4a15      	ldr	r2, [pc, #84]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004664:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800466a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800466e:	430b      	orrs	r3, r1
 8004670:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004678:	d039      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    switch(PeriphClkInit->AdcClockSelection)
 800467a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800467e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004682:	d02c      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x7b2>
 8004684:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004688:	d01f      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
 800468a:	b1cb      	cbz	r3, 80046c0 <HAL_RCCEx_PeriphCLKConfig+0x794>
      ret = HAL_ERROR;
 800468c:	2601      	movs	r6, #1
 800468e:	4635      	mov	r5, r6
 8004690:	e02d      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004692:	2102      	movs	r1, #2
 8004694:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004698:	f7ff fbc2 	bl	8003e20 <RCCEx_PLL3_Config>
 800469c:	2800      	cmp	r0, #0
 800469e:	d0cf      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x714>
          status = HAL_ERROR;
 80046a0:	2601      	movs	r6, #1
 80046a2:	e7cd      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x714>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80046a4:	2102      	movs	r1, #2
 80046a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80046aa:	f7ff fbb9 	bl	8003e20 <RCCEx_PLL3_Config>
 80046ae:	2800      	cmp	r0, #0
 80046b0:	d0d7      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x736>
        status = HAL_ERROR;
 80046b2:	2601      	movs	r6, #1
 80046b4:	e7d5      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x736>
 80046b6:	bf00      	nop
 80046b8:	58024400 	.word	0x58024400
 80046bc:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046c0:	2100      	movs	r1, #0
 80046c2:	1d20      	adds	r0, r4, #4
 80046c4:	f7ff fb26 	bl	8003d14 <RCCEx_PLL2_Config>
 80046c8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80046ca:	b97d      	cbnz	r5, 80046ec <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046cc:	4a5e      	ldr	r2, [pc, #376]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80046ce:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80046d0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80046d4:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80046d8:	430b      	orrs	r3, r1
 80046da:	6593      	str	r3, [r2, #88]	; 0x58
 80046dc:	e007      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046de:	2102      	movs	r1, #2
 80046e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80046e4:	f7ff fb9c 	bl	8003e20 <RCCEx_PLL3_Config>
 80046e8:	4605      	mov	r5, r0
      break;
 80046ea:	e7ee      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
 80046ec:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80046f4:	d024      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x814>
    switch(PeriphClkInit->UsbClockSelection)
 80046f6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80046fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046fe:	d017      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x804>
 8004700:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004704:	d00a      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
 8004706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800470a:	d002      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
      ret = HAL_ERROR;
 800470c:	2601      	movs	r6, #1
 800470e:	4635      	mov	r5, r6
 8004710:	e016      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x814>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004712:	4a4d      	ldr	r2, [pc, #308]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004714:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800471a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800471c:	b97d      	cbnz	r5, 800473e <HAL_RCCEx_PeriphCLKConfig+0x812>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800471e:	4a4a      	ldr	r2, [pc, #296]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004720:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004722:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004726:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800472a:	430b      	orrs	r3, r1
 800472c:	6553      	str	r3, [r2, #84]	; 0x54
 800472e:	e007      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x814>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004730:	2101      	movs	r1, #1
 8004732:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004736:	f7ff fb73 	bl	8003e20 <RCCEx_PLL3_Config>
 800473a:	4605      	mov	r5, r0
      break;
 800473c:	e7ee      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
 800473e:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004746:	d014      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x846>
    switch(PeriphClkInit->SdmmcClockSelection)
 8004748:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800474a:	b12b      	cbz	r3, 8004758 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800474c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004750:	d023      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x86e>
      ret = HAL_ERROR;
 8004752:	2601      	movs	r6, #1
 8004754:	4635      	mov	r5, r6
 8004756:	e00c      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x846>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004758:	4a3b      	ldr	r2, [pc, #236]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800475a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800475c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004760:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004762:	bb05      	cbnz	r5, 80047a6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004764:	4a38      	ldr	r2, [pc, #224]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004766:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800476c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800476e:	430b      	orrs	r3, r1
 8004770:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004778:	d117      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x87e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004780:	d02d      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x8b2>
    switch(PeriphClkInit->RngClockSelection)
 8004782:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004788:	d01b      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x896>
 800478a:	d917      	bls.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x890>
 800478c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004790:	d01c      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 8004792:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004796:	d112      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x892>
 8004798:	e018      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800479a:	2102      	movs	r1, #2
 800479c:	1d20      	adds	r0, r4, #4
 800479e:	f7ff fab9 	bl	8003d14 <RCCEx_PLL2_Config>
 80047a2:	4605      	mov	r5, r0
      break;
 80047a4:	e7dd      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x836>
 80047a6:	462e      	mov	r6, r5
 80047a8:	e7e3      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x846>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80047aa:	2102      	movs	r1, #2
 80047ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80047b0:	f7ff fb36 	bl	8003e20 <RCCEx_PLL3_Config>
 80047b4:	2800      	cmp	r0, #0
 80047b6:	d0e0      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      status=HAL_ERROR;
 80047b8:	2601      	movs	r6, #1
 80047ba:	e7de      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    switch(PeriphClkInit->RngClockSelection)
 80047bc:	b133      	cbz	r3, 80047cc <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      ret = HAL_ERROR;
 80047be:	2601      	movs	r6, #1
 80047c0:	e00d      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047c2:	4a21      	ldr	r2, [pc, #132]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80047c4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80047c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ca:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80047cc:	2d00      	cmp	r5, #0
 80047ce:	d131      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x908>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047d0:	4a1d      	ldr	r2, [pc, #116]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80047d2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80047d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047d8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80047da:	430b      	orrs	r3, r1
 80047dc:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80047e4:	d006      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047e6:	4a18      	ldr	r2, [pc, #96]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80047e8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80047ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047ee:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80047f0:	430b      	orrs	r3, r1
 80047f2:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80047fa:	d006      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047fc:	4a12      	ldr	r2, [pc, #72]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80047fe:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004800:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004804:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8004806:	430b      	orrs	r3, r1
 8004808:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004810:	d009      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004812:	4b0d      	ldr	r3, [pc, #52]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004814:	691a      	ldr	r2, [r3, #16]
 8004816:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800481a:	611a      	str	r2, [r3, #16]
 800481c:	691a      	ldr	r2, [r3, #16]
 800481e:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8004822:	430a      	orrs	r2, r1
 8004824:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	db05      	blt.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x90c>
  if (status == HAL_OK)
 800482c:	b106      	cbz	r6, 8004830 <HAL_RCCEx_PeriphCLKConfig+0x904>
  return HAL_ERROR;
 800482e:	2601      	movs	r6, #1
}
 8004830:	4630      	mov	r0, r6
 8004832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004834:	462e      	mov	r6, r5
 8004836:	e7d2      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x8b2>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004838:	4a03      	ldr	r2, [pc, #12]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800483a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800483c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004840:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004842:	430b      	orrs	r3, r1
 8004844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004846:	e7f1      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x900>
 8004848:	58024400 	.word	0x58024400

0800484c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800484c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800484e:	f7ff fa3f 	bl	8003cd0 <HAL_RCC_GetHCLKFreq>
 8004852:	4b05      	ldr	r3, [pc, #20]	; (8004868 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800485a:	4a04      	ldr	r2, [pc, #16]	; (800486c <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800485c:	5cd3      	ldrb	r3, [r2, r3]
 800485e:	f003 031f 	and.w	r3, r3, #31
}
 8004862:	40d8      	lsrs	r0, r3
 8004864:	bd08      	pop	{r3, pc}
 8004866:	bf00      	nop
 8004868:	58024400 	.word	0x58024400
 800486c:	0800e064 	.word	0x0800e064

08004870 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8004870:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004872:	4978      	ldr	r1, [pc, #480]	; (8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004874:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004876:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004878:	f3c2 3205 	ubfx	r2, r2, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800487c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800487e:	f3c3 1300 	ubfx	r3, r3, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004882:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8004884:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8004888:	fb03 f301 	mul.w	r3, r3, r1
  if (pll2m != 0U)
 800488c:	2a00      	cmp	r2, #0
 800488e:	f000 80db 	beq.w	8004a48 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>
 8004892:	f004 0403 	and.w	r4, r4, #3
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 800489e:	2c01      	cmp	r4, #1
 80048a0:	d066      	beq.n	8004970 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 80048a2:	b1fc      	cbz	r4, 80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x74>
 80048a4:	2c02      	cmp	r4, #2
 80048a6:	f000 80b2 	beq.w	8004a0e <HAL_RCCEx_GetPLL2ClockFreq+0x19e>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80048aa:	ee07 2a10 	vmov	s14, r2
 80048ae:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80048b2:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80048b6:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80048ba:	4b66      	ldr	r3, [pc, #408]	; (8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c2:	ee07 3a10 	vmov	s14, r3
 80048c6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80048ca:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80048ce:	ee67 7a86 	vmul.f32	s15, s15, s12
 80048d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048de:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80048e2:	e061      	b.n	80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048e4:	4b5b      	ldr	r3, [pc, #364]	; (8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f013 0f20 	tst.w	r3, #32
 80048ec:	d023      	beq.n	8004936 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80048ee:	4c59      	ldr	r4, [pc, #356]	; (8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80048f0:	6821      	ldr	r1, [r4, #0]
 80048f2:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80048f6:	4b5a      	ldr	r3, [pc, #360]	; (8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 80048f8:	40cb      	lsrs	r3, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80048fa:	ee07 3a10 	vmov	s14, r3
 80048fe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004902:	ee06 2a90 	vmov	s13, r2
 8004906:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 800490a:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800490e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004914:	ee07 3a10 	vmov	s14, r3
 8004918:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800491c:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004920:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004928:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800492c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004930:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004934:	e038      	b.n	80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004936:	ee07 2a10 	vmov	s14, r2
 800493a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800493e:	ed9f 6a49 	vldr	s12, [pc, #292]	; 8004a64 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 8004942:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004946:	4b43      	ldr	r3, [pc, #268]	; (8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800494e:	ee07 3a10 	vmov	s14, r3
 8004952:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004956:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800495a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800495e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004962:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004966:	ee77 7a87 	vadd.f32	s15, s15, s14
 800496a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800496e:	e01b      	b.n	80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004970:	ee07 2a10 	vmov	s14, r2
 8004974:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004978:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800497c:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004980:	4b34      	ldr	r3, [pc, #208]	; (8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004988:	ee07 3a10 	vmov	s14, r3
 800498c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004990:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004994:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800499c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80049a8:	4a2a      	ldr	r2, [pc, #168]	; (8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80049aa:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80049ac:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80049b0:	ee07 3a10 	vmov	s14, r3
 80049b4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80049b8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80049bc:	ee37 7a06 	vadd.f32	s14, s14, s12
 80049c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049c8:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80049cc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80049ce:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80049d2:	ee07 3a10 	vmov	s14, r3
 80049d6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80049da:	ee37 7a06 	vadd.f32	s14, s14, s12
 80049de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049e6:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80049ea:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80049ec:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80049f0:	ee07 3a90 	vmov	s15, r3
 80049f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f8:	ee77 7a86 	vadd.f32	s15, s15, s12
 80049fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a00:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004a04:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8004a08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a0c:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004a0e:	ee07 2a10 	vmov	s14, r2
 8004a12:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004a16:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 8004a1a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004a1e:	4b0d      	ldr	r3, [pc, #52]	; (8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a26:	ee07 3a10 	vmov	s14, r3
 8004a2a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004a2e:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004a32:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a42:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8004a46:	e7af      	b.n	80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a4c:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a4e:	6083      	str	r3, [r0, #8]
}
 8004a50:	e7da      	b.n	8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0x198>
 8004a52:	bf00      	nop
 8004a54:	58024400 	.word	0x58024400
 8004a58:	4a742400 	.word	0x4a742400
 8004a5c:	39000000 	.word	0x39000000
 8004a60:	03d09000 	.word	0x03d09000
 8004a64:	4c742400 	.word	0x4c742400
 8004a68:	4bbebc20 	.word	0x4bbebc20

08004a6c <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8004a6c:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a6e:	4978      	ldr	r1, [pc, #480]	; (8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004a70:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004a72:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004a74:	f3c2 5205 	ubfx	r2, r2, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a78:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8004a7a:	f3c3 2300 	ubfx	r3, r3, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004a7e:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004a80:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8004a84:	fb03 f301 	mul.w	r3, r3, r1
  if (pll3m != 0U)
 8004a88:	2a00      	cmp	r2, #0
 8004a8a:	f000 80db 	beq.w	8004c44 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
 8004a8e:	f004 0403 	and.w	r4, r4, #3
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8004a9a:	2c01      	cmp	r4, #1
 8004a9c:	d066      	beq.n	8004b6c <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 8004a9e:	b1fc      	cbz	r4, 8004ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x74>
 8004aa0:	2c02      	cmp	r4, #2
 8004aa2:	f000 80b2 	beq.w	8004c0a <HAL_RCCEx_GetPLL3ClockFreq+0x19e>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004aa6:	ee07 2a10 	vmov	s14, r2
 8004aaa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004aae:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8004ab2:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004ab6:	4b66      	ldr	r3, [pc, #408]	; (8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004abe:	ee07 3a10 	vmov	s14, r3
 8004ac2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004ac6:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8004c58 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004aca:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004ace:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ad2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ad6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ada:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8004ade:	e061      	b.n	8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ae0:	4b5b      	ldr	r3, [pc, #364]	; (8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f013 0f20 	tst.w	r3, #32
 8004ae8:	d023      	beq.n	8004b32 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004aea:	4c59      	ldr	r4, [pc, #356]	; (8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004aec:	6821      	ldr	r1, [r4, #0]
 8004aee:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8004af2:	4b5a      	ldr	r3, [pc, #360]	; (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 8004af4:	40cb      	lsrs	r3, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004af6:	ee07 3a10 	vmov	s14, r3
 8004afa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004afe:	ee06 2a90 	vmov	s13, r2
 8004b02:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8004b06:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8004b0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b10:	ee07 3a10 	vmov	s14, r3
 8004b14:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004b18:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8004c58 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004b1c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b2c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004b30:	e038      	b.n	8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b32:	ee07 2a10 	vmov	s14, r2
 8004b36:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004b3a:	ed9f 6a49 	vldr	s12, [pc, #292]	; 8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 8004b3e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004b42:	4b43      	ldr	r3, [pc, #268]	; (8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b4a:	ee07 3a10 	vmov	s14, r3
 8004b4e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004b52:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8004c58 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004b56:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b66:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004b6a:	e01b      	b.n	8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b6c:	ee07 2a10 	vmov	s14, r2
 8004b70:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004b74:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8004b78:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004b7c:	4b34      	ldr	r3, [pc, #208]	; (8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b84:	ee07 3a10 	vmov	s14, r3
 8004b88:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004b8c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8004c58 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004b90:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ba0:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004ba4:	4a2a      	ldr	r2, [pc, #168]	; (8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004ba6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004ba8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004bac:	ee07 3a10 	vmov	s14, r3
 8004bb0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004bb4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004bb8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004bbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bc4:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004bc8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004bca:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004bce:	ee07 3a10 	vmov	s14, r3
 8004bd2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004bd6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004bda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004be2:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004be6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004be8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004bec:	ee07 3a90 	vmov	s15, r3
 8004bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf4:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004bf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bfc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004c00:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8004c04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c08:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c0a:	ee07 2a10 	vmov	s14, r2
 8004c0e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004c12:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 8004c16:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004c1a:	4b0d      	ldr	r3, [pc, #52]	; (8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c22:	ee07 3a10 	vmov	s14, r3
 8004c26:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004c2a:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8004c58 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004c2e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8004c42:	e7af      	b.n	8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c48:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c4a:	6083      	str	r3, [r0, #8]
}
 8004c4c:	e7da      	b.n	8004c04 <HAL_RCCEx_GetPLL3ClockFreq+0x198>
 8004c4e:	bf00      	nop
 8004c50:	58024400 	.word	0x58024400
 8004c54:	4a742400 	.word	0x4a742400
 8004c58:	39000000 	.word	0x39000000
 8004c5c:	03d09000 	.word	0x03d09000
 8004c60:	4c742400 	.word	0x4c742400
 8004c64:	4bbebc20 	.word	0x4bbebc20

08004c68 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 8004c68:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c6a:	4978      	ldr	r1, [pc, #480]	; (8004e4c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004c6c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8004c6e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004c70:	f3c2 1205 	ubfx	r2, r2, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004c74:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8004c76:	f003 0301 	and.w	r3, r3, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004c7a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004c7c:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8004c80:	fb03 f301 	mul.w	r3, r3, r1
  if (pll1m != 0U)
 8004c84:	2a00      	cmp	r2, #0
 8004c86:	f000 80db 	beq.w	8004e40 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
 8004c8a:	f004 0403 	and.w	r4, r4, #3
 8004c8e:	ee07 3a90 	vmov	s15, r3
 8004c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8004c96:	2c01      	cmp	r4, #1
 8004c98:	d066      	beq.n	8004d68 <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 8004c9a:	b1fc      	cbz	r4, 8004cdc <HAL_RCCEx_GetPLL1ClockFreq+0x74>
 8004c9c:	2c02      	cmp	r4, #2
 8004c9e:	f000 80b2 	beq.w	8004e06 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ca2:	ee07 2a10 	vmov	s14, r2
 8004ca6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004caa:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8004e50 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8004cae:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004cb2:	4b66      	ldr	r3, [pc, #408]	; (8004e4c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cba:	ee07 3a10 	vmov	s14, r3
 8004cbe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004cc2:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8004e54 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8004cc6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cd6:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8004cda:	e061      	b.n	8004da0 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cdc:	4b5b      	ldr	r3, [pc, #364]	; (8004e4c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f013 0f20 	tst.w	r3, #32
 8004ce4:	d023      	beq.n	8004d2e <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ce6:	4c59      	ldr	r4, [pc, #356]	; (8004e4c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004ce8:	6821      	ldr	r1, [r4, #0]
 8004cea:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8004cee:	4b5a      	ldr	r3, [pc, #360]	; (8004e58 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>)
 8004cf0:	40cb      	lsrs	r3, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004cf2:	ee07 3a10 	vmov	s14, r3
 8004cf6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004cfa:	ee06 2a90 	vmov	s13, r2
 8004cfe:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8004d02:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8004d06:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d0c:	ee07 3a10 	vmov	s14, r3
 8004d10:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004d14:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8004e54 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8004d18:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d28:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004d2c:	e038      	b.n	8004da0 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d2e:	ee07 2a10 	vmov	s14, r2
 8004d32:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004d36:	ed9f 6a49 	vldr	s12, [pc, #292]	; 8004e5c <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 8004d3a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004d3e:	4b43      	ldr	r3, [pc, #268]	; (8004e4c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d46:	ee07 3a10 	vmov	s14, r3
 8004d4a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004d4e:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8004e54 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8004d52:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d62:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004d66:	e01b      	b.n	8004da0 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d68:	ee07 2a10 	vmov	s14, r2
 8004d6c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004d70:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8004e50 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8004d74:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004d78:	4b34      	ldr	r3, [pc, #208]	; (8004e4c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d80:	ee07 3a10 	vmov	s14, r3
 8004d84:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004d88:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8004e54 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8004d8c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8004da0:	4a2a      	ldr	r2, [pc, #168]	; (8004e4c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004da2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004da4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004da8:	ee07 3a10 	vmov	s14, r3
 8004dac:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004db0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004db4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dc0:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8004dc4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004dc6:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004dca:	ee07 3a10 	vmov	s14, r3
 8004dce:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004dd2:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dde:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8004de2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004de4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004de8:	ee07 3a90 	vmov	s15, r3
 8004dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df0:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004df4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004df8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004dfc:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8004e00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e04:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e06:	ee07 2a10 	vmov	s14, r2
 8004e0a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004e0e:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8004e60 <HAL_RCCEx_GetPLL1ClockFreq+0x1f8>
 8004e12:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004e16:	4b0d      	ldr	r3, [pc, #52]	; (8004e4c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e1e:	ee07 3a10 	vmov	s14, r3
 8004e22:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004e26:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8004e54 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8004e2a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e3a:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8004e3e:	e7af      	b.n	8004da0 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004e44:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004e46:	6083      	str	r3, [r0, #8]
}
 8004e48:	e7da      	b.n	8004e00 <HAL_RCCEx_GetPLL1ClockFreq+0x198>
 8004e4a:	bf00      	nop
 8004e4c:	58024400 	.word	0x58024400
 8004e50:	4a742400 	.word	0x4a742400
 8004e54:	39000000 	.word	0x39000000
 8004e58:	03d09000 	.word	0x03d09000
 8004e5c:	4c742400 	.word	0x4c742400
 8004e60:	4bbebc20 	.word	0x4bbebc20

08004e64 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8004e64:	b500      	push	{lr}
 8004e66:	b08b      	sub	sp, #44	; 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004e68:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8004e6c:	d01b      	beq.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004e6e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004e72:	d048      	beq.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004e74:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004e78:	d078      	beq.n	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004e7a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8004e7e:	f000 80ab 	beq.w	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004e82:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8004e86:	f000 80dd 	beq.w	8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004e8a:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8004e8e:	f000 810f 	beq.w	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004e92:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8004e96:	f000 8131 	beq.w	80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004e9a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8004e9e:	f000 8145 	beq.w	800512c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
      frequency = 0;
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	e00c      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004ea6:	4b9e      	ldr	r3, [pc, #632]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eaa:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	f200 8164 	bhi.w	800517c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8004eb4:	e8df f003 	tbb	[pc, r3]
 8004eb8:	03110c07 	.word	0x03110c07
 8004ebc:	16          	.byte	0x16
 8004ebd:	00          	.byte	0x00
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ebe:	4899      	ldr	r0, [pc, #612]	; (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
}
 8004ec0:	b00b      	add	sp, #44	; 0x2c
 8004ec2:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ec6:	a807      	add	r0, sp, #28
 8004ec8:	f7ff fece 	bl	8004c68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ecc:	9808      	ldr	r0, [sp, #32]
          break;
 8004ece:	e7f7      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ed0:	a804      	add	r0, sp, #16
 8004ed2:	f7ff fccd 	bl	8004870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ed6:	9804      	ldr	r0, [sp, #16]
          break;
 8004ed8:	e7f2      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004eda:	a801      	add	r0, sp, #4
 8004edc:	f7ff fdc6 	bl	8004a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004ee0:	9801      	ldr	r0, [sp, #4]
          break;
 8004ee2:	e7ed      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004ee4:	4b8e      	ldr	r3, [pc, #568]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004ee8:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004eec:	f000 8148 	beq.w	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004ef0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ef4:	f000 8146 	beq.w	8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004efc:	d001      	beq.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = 0;
 8004efe:	2000      	movs	r0, #0
 8004f00:	e7de      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8004f02:	4889      	ldr	r0, [pc, #548]	; (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004f04:	e7dc      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8004f06:	4b86      	ldr	r3, [pc, #536]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f0a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8004f0e:	2b80      	cmp	r3, #128	; 0x80
 8004f10:	d025      	beq.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8004f12:	d808      	bhi.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 8004f14:	b1f3      	cbz	r3, 8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8004f16:	2b40      	cmp	r3, #64	; 0x40
 8004f18:	f040 8136 	bne.w	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f1c:	a804      	add	r0, sp, #16
 8004f1e:	f7ff fca7 	bl	8004870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f22:	9804      	ldr	r0, [sp, #16]
          break;
 8004f24:	e7cc      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (saiclocksource)
 8004f26:	2bc0      	cmp	r3, #192	; 0xc0
 8004f28:	d012      	beq.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f2e:	f040 812b 	bne.w	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004f32:	4b7b      	ldr	r3, [pc, #492]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004f36:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004f3a:	f000 8127 	beq.w	800518c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004f3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f42:	f000 8125 	beq.w	8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004f46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f4a:	d00d      	beq.n	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            frequency = 0;
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	e7b7      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004f50:	4874      	ldr	r0, [pc, #464]	; (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004f52:	e7b5      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f54:	a807      	add	r0, sp, #28
 8004f56:	f7ff fe87 	bl	8004c68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f5a:	9808      	ldr	r0, [sp, #32]
          break;
 8004f5c:	e7b0      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f5e:	a801      	add	r0, sp, #4
 8004f60:	f7ff fd84 	bl	8004a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f64:	9801      	ldr	r0, [sp, #4]
          break;
 8004f66:	e7ab      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8004f68:	486f      	ldr	r0, [pc, #444]	; (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004f6a:	e7a9      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004f6c:	4b6c      	ldr	r3, [pc, #432]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f70:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8004f74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f78:	d027      	beq.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004f7a:	d809      	bhi.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004f7c:	b303      	cbz	r3, 8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 8004f7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f82:	f040 8107 	bne.w	8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f86:	a804      	add	r0, sp, #16
 8004f88:	f7ff fc72 	bl	8004870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f8c:	9804      	ldr	r0, [sp, #16]
          break;
 8004f8e:	e797      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (saiclocksource)
 8004f90:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004f94:	d012      	beq.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004f96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f9a:	f040 80fb 	bne.w	8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004f9e:	4b60      	ldr	r3, [pc, #384]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004fa2:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004fa6:	f000 80f7 	beq.w	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004faa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fae:	f000 80f5 	beq.w	800519c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004fb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fb6:	d00d      	beq.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
            frequency = 0;
 8004fb8:	2000      	movs	r0, #0
 8004fba:	e781      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004fbc:	4859      	ldr	r0, [pc, #356]	; (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004fbe:	e77f      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004fc0:	a807      	add	r0, sp, #28
 8004fc2:	f7ff fe51 	bl	8004c68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004fc6:	9808      	ldr	r0, [sp, #32]
          break;
 8004fc8:	e77a      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fca:	a801      	add	r0, sp, #4
 8004fcc:	f7ff fd4e 	bl	8004a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004fd0:	9801      	ldr	r0, [sp, #4]
          break;
 8004fd2:	e775      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8004fd4:	4854      	ldr	r0, [pc, #336]	; (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004fd6:	e773      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004fd8:	4b51      	ldr	r3, [pc, #324]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fdc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8004fe0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fe4:	d027      	beq.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
 8004fe6:	d809      	bhi.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8004fe8:	b303      	cbz	r3, 800502c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 8004fea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fee:	f040 80d7 	bne.w	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ff2:	a804      	add	r0, sp, #16
 8004ff4:	f7ff fc3c 	bl	8004870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ff8:	9804      	ldr	r0, [sp, #16]
          break;
 8004ffa:	e761      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (saiclocksource)
 8004ffc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005000:	d012      	beq.n	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8005002:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005006:	f040 80cb 	bne.w	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800500a:	4b45      	ldr	r3, [pc, #276]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800500c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800500e:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8005012:	f000 80c7 	beq.w	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005016:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800501a:	f000 80c5 	beq.w	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800501e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005022:	d00d      	beq.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
            frequency = 0;
 8005024:	2000      	movs	r0, #0
 8005026:	e74b      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 8005028:	483e      	ldr	r0, [pc, #248]	; (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800502a:	e749      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800502c:	a807      	add	r0, sp, #28
 800502e:	f7ff fe1b 	bl	8004c68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005032:	9808      	ldr	r0, [sp, #32]
          break;
 8005034:	e744      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005036:	a801      	add	r0, sp, #4
 8005038:	f7ff fd18 	bl	8004a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800503c:	9801      	ldr	r0, [sp, #4]
          break;
 800503e:	e73f      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8005040:	4839      	ldr	r0, [pc, #228]	; (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005042:	e73d      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005044:	4b36      	ldr	r3, [pc, #216]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005048:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 800504c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005050:	d027      	beq.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005052:	d809      	bhi.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 8005054:	b303      	cbz	r3, 8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8005056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800505a:	f040 80a7 	bne.w	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x348>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800505e:	a804      	add	r0, sp, #16
 8005060:	f7ff fc06 	bl	8004870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005064:	9804      	ldr	r0, [sp, #16]
          break;
 8005066:	e72b      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (srcclk)
 8005068:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800506c:	d012      	beq.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 800506e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005072:	f040 809b 	bne.w	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x348>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005076:	4b2a      	ldr	r3, [pc, #168]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800507a:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 800507e:	f000 8097 	beq.w	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005082:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005086:	f000 8095 	beq.w	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800508a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800508e:	d00d      	beq.n	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x248>
            frequency = 0;
 8005090:	2000      	movs	r0, #0
 8005092:	e715      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 8005094:	4823      	ldr	r0, [pc, #140]	; (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005096:	e713      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005098:	a807      	add	r0, sp, #28
 800509a:	f7ff fde5 	bl	8004c68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800509e:	9808      	ldr	r0, [sp, #32]
          break;
 80050a0:	e70e      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050a2:	a801      	add	r0, sp, #4
 80050a4:	f7ff fce2 	bl	8004a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80050a8:	9801      	ldr	r0, [sp, #4]
          break;
 80050aa:	e709      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 80050ac:	481e      	ldr	r0, [pc, #120]	; (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80050ae:	e707      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80050b0:	4b1b      	ldr	r3, [pc, #108]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80050b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 80050b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050bc:	d00a      	beq.n	80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
 80050be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050c2:	d00c      	beq.n	80050de <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80050c4:	b10b      	cbz	r3, 80050ca <HAL_RCCEx_GetPeriphCLKFreq+0x266>
          frequency = 0;
 80050c6:	2000      	movs	r0, #0
 80050c8:	e6fa      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050ca:	a804      	add	r0, sp, #16
 80050cc:	f7ff fbd0 	bl	8004870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80050d0:	9804      	ldr	r0, [sp, #16]
          break;
 80050d2:	e6f5      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050d4:	a801      	add	r0, sp, #4
 80050d6:	f7ff fcc9 	bl	8004a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80050da:	9803      	ldr	r0, [sp, #12]
          break;
 80050dc:	e6f0      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80050de:	4b10      	ldr	r3, [pc, #64]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80050e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80050e2:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 80050e6:	d067      	beq.n	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80050e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050ec:	d066      	beq.n	80051bc <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80050ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050f2:	d001      	beq.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
            frequency = 0;
 80050f4:	2000      	movs	r0, #0
 80050f6:	e6e3      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 80050f8:	480b      	ldr	r0, [pc, #44]	; (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80050fa:	e6e1      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80050fc:	4b08      	ldr	r3, [pc, #32]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80050fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 8005100:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8005104:	d002      	beq.n	800510c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
 8005106:	b933      	cbnz	r3, 8005116 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
          frequency = 0;
 8005108:	2000      	movs	r0, #0
 800510a:	e6d9      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800510c:	a807      	add	r0, sp, #28
 800510e:	f7ff fdab 	bl	8004c68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005112:	9808      	ldr	r0, [sp, #32]
          break;
 8005114:	e6d4      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005116:	a804      	add	r0, sp, #16
 8005118:	f7ff fbaa 	bl	8004870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800511c:	9806      	ldr	r0, [sp, #24]
          break;
 800511e:	e6cf      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8005120:	58024400 	.word	0x58024400
 8005124:	00bb8000 	.word	0x00bb8000
 8005128:	017d7840 	.word	0x017d7840
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800512c:	4b25      	ldr	r3, [pc, #148]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 800512e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005130:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8005134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005138:	d019      	beq.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
 800513a:	d90a      	bls.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
 800513c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005140:	d03e      	beq.n	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8005142:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005146:	d017      	beq.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005148:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800514c:	d00a      	beq.n	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
          frequency = 0;
 800514e:	2000      	movs	r0, #0
          break;
 8005150:	e6b6      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (srcclk)
 8005152:	b14b      	cbz	r3, 8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005154:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005158:	d1f9      	bne.n	800514e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800515a:	a804      	add	r0, sp, #16
 800515c:	f7ff fb88 	bl	8004870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005160:	9805      	ldr	r0, [sp, #20]
          break;
 8005162:	e6ad      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = HSI_VALUE;
 8005164:	4818      	ldr	r0, [pc, #96]	; (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8005166:	e6ab      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005168:	f7ff fb70 	bl	800484c <HAL_RCCEx_GetD3PCLK1Freq>
          break;
 800516c:	e6a8      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800516e:	a801      	add	r0, sp, #4
 8005170:	f7ff fc7c 	bl	8004a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005174:	9802      	ldr	r0, [sp, #8]
          break;
 8005176:	e6a3      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = HSE_VALUE;
 8005178:	4814      	ldr	r0, [pc, #80]	; (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
          break;
 800517a:	e6a1      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 800517c:	2000      	movs	r0, #0
 800517e:	e69f      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8005180:	4811      	ldr	r0, [pc, #68]	; (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8005182:	e69d      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8005184:	4812      	ldr	r0, [pc, #72]	; (80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8005186:	e69b      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 8005188:	2000      	movs	r0, #0
 800518a:	e699      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 800518c:	480e      	ldr	r0, [pc, #56]	; (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 800518e:	e697      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8005190:	480f      	ldr	r0, [pc, #60]	; (80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8005192:	e695      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 8005194:	2000      	movs	r0, #0
 8005196:	e693      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8005198:	480b      	ldr	r0, [pc, #44]	; (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 800519a:	e691      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 800519c:	480c      	ldr	r0, [pc, #48]	; (80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800519e:	e68f      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 80051a0:	2000      	movs	r0, #0
 80051a2:	e68d      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 80051a4:	4808      	ldr	r0, [pc, #32]	; (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80051a6:	e68b      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 80051a8:	4809      	ldr	r0, [pc, #36]	; (80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80051aa:	e689      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 80051ac:	2000      	movs	r0, #0
 80051ae:	e687      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 80051b0:	4805      	ldr	r0, [pc, #20]	; (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80051b2:	e685      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 80051b4:	4806      	ldr	r0, [pc, #24]	; (80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80051b6:	e683      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 80051b8:	4803      	ldr	r0, [pc, #12]	; (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80051ba:	e681      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 80051bc:	4804      	ldr	r0, [pc, #16]	; (80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80051be:	e67f      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = CSI_VALUE;
 80051c0:	4803      	ldr	r0, [pc, #12]	; (80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
  return frequency;
 80051c2:	e67d      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 80051c4:	58024400 	.word	0x58024400
 80051c8:	03d09000 	.word	0x03d09000
 80051cc:	017d7840 	.word	0x017d7840
 80051d0:	003d0900 	.word	0x003d0900

080051d4 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80051d4:	2800      	cmp	r0, #0
 80051d6:	d036      	beq.n	8005246 <HAL_RNG_Init+0x72>
{
 80051d8:	b538      	push	{r3, r4, r5, lr}
 80051da:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80051dc:	7a43      	ldrb	r3, [r0, #9]
 80051de:	b1b3      	cbz	r3, 800520e <HAL_RNG_Init+0x3a>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80051e0:	2302      	movs	r3, #2
 80051e2:	7263      	strb	r3, [r4, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80051e4:	6822      	ldr	r2, [r4, #0]
 80051e6:	6813      	ldr	r3, [r2, #0]
 80051e8:	f023 0320 	bic.w	r3, r3, #32
 80051ec:	6861      	ldr	r1, [r4, #4]
 80051ee:	430b      	orrs	r3, r1
 80051f0:	6013      	str	r3, [r2, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80051f2:	6822      	ldr	r2, [r4, #0]
 80051f4:	6813      	ldr	r3, [r2, #0]
 80051f6:	f043 0304 	orr.w	r3, r3, #4
 80051fa:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80051fc:	6823      	ldr	r3, [r4, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005204:	d007      	beq.n	8005216 <HAL_RNG_Init+0x42>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8005206:	2304      	movs	r3, #4
 8005208:	7263      	strb	r3, [r4, #9]
    return HAL_ERROR;
 800520a:	2001      	movs	r0, #1
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 800520c:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 800520e:	7203      	strb	r3, [r0, #8]
    HAL_RNG_MspInit(hrng);
 8005210:	f005 ff4a 	bl	800b0a8 <HAL_RNG_MspInit>
 8005214:	e7e4      	b.n	80051e0 <HAL_RNG_Init+0xc>
  tickstart = HAL_GetTick();
 8005216:	f7fb f8bf 	bl	8000398 <HAL_GetTick>
 800521a:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f013 0f04 	tst.w	r3, #4
 8005224:	d00a      	beq.n	800523c <HAL_RNG_Init+0x68>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005226:	f7fb f8b7 	bl	8000398 <HAL_GetTick>
 800522a:	1b40      	subs	r0, r0, r5
 800522c:	2802      	cmp	r0, #2
 800522e:	d9f5      	bls.n	800521c <HAL_RNG_Init+0x48>
      hrng->State = HAL_RNG_STATE_ERROR;
 8005230:	2304      	movs	r3, #4
 8005232:	7263      	strb	r3, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005234:	2302      	movs	r3, #2
 8005236:	60e3      	str	r3, [r4, #12]
      return HAL_ERROR;
 8005238:	2001      	movs	r0, #1
 800523a:	e7e7      	b.n	800520c <HAL_RNG_Init+0x38>
  hrng->State = HAL_RNG_STATE_READY;
 800523c:	2301      	movs	r3, #1
 800523e:	7263      	strb	r3, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005240:	2000      	movs	r0, #0
 8005242:	60e0      	str	r0, [r4, #12]
  return HAL_OK;
 8005244:	e7e2      	b.n	800520c <HAL_RNG_Init+0x38>
    return HAL_ERROR;
 8005246:	2001      	movs	r0, #1
}
 8005248:	4770      	bx	lr

0800524a <HAL_RNG_GenerateRandomNumber>:
{
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 800524a:	7a03      	ldrb	r3, [r0, #8]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d02b      	beq.n	80052a8 <HAL_RNG_GenerateRandomNumber+0x5e>
{
 8005250:	b570      	push	{r4, r5, r6, lr}
 8005252:	460d      	mov	r5, r1
 8005254:	4604      	mov	r4, r0
  __HAL_LOCK(hrng);
 8005256:	2301      	movs	r3, #1
 8005258:	7203      	strb	r3, [r0, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800525a:	7a43      	ldrb	r3, [r0, #9]
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b01      	cmp	r3, #1
 8005260:	d005      	beq.n	800526e <HAL_RNG_GenerateRandomNumber+0x24>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005262:	2304      	movs	r3, #4
 8005264:	60c3      	str	r3, [r0, #12]
    status = HAL_ERROR;
 8005266:	2001      	movs	r0, #1
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005268:	2300      	movs	r3, #0
 800526a:	7223      	strb	r3, [r4, #8]

  return status;
}
 800526c:	bd70      	pop	{r4, r5, r6, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 800526e:	2302      	movs	r3, #2
 8005270:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 8005272:	f7fb f891 	bl	8000398 <HAL_GetTick>
 8005276:	4606      	mov	r6, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	f012 0f01 	tst.w	r2, #1
 8005280:	d10b      	bne.n	800529a <HAL_RNG_GenerateRandomNumber+0x50>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005282:	f7fb f889 	bl	8000398 <HAL_GetTick>
 8005286:	1b80      	subs	r0, r0, r6
 8005288:	2802      	cmp	r0, #2
 800528a:	d9f5      	bls.n	8005278 <HAL_RNG_GenerateRandomNumber+0x2e>
        hrng->State = HAL_RNG_STATE_READY;
 800528c:	2001      	movs	r0, #1
 800528e:	7260      	strb	r0, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005290:	2302      	movs	r3, #2
 8005292:	60e3      	str	r3, [r4, #12]
        __HAL_UNLOCK(hrng);
 8005294:	2300      	movs	r3, #0
 8005296:	7223      	strb	r3, [r4, #8]
        return HAL_ERROR;
 8005298:	e7e8      	b.n	800526c <HAL_RNG_GenerateRandomNumber+0x22>
    hrng->RandomNumber = hrng->Instance->DR;
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 800529e:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
 80052a0:	2301      	movs	r3, #1
 80052a2:	7263      	strb	r3, [r4, #9]
  HAL_StatusTypeDef status = HAL_OK;
 80052a4:	2000      	movs	r0, #0
 80052a6:	e7df      	b.n	8005268 <HAL_RNG_GenerateRandomNumber+0x1e>
  __HAL_LOCK(hrng);
 80052a8:	2002      	movs	r0, #2
}
 80052aa:	4770      	bx	lr

080052ac <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80052ac:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80052ae:	2400      	movs	r4, #0
 80052b0:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80052b2:	64c4      	str	r4, [r0, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80052b4:	6845      	ldr	r5, [r0, #4]
 80052b6:	2d02      	cmp	r5, #2
 80052b8:	bf14      	ite	ne
 80052ba:	2400      	movne	r4, #0
 80052bc:	2401      	moveq	r4, #1
 80052be:	2d00      	cmp	r5, #0
 80052c0:	bf08      	it	eq
 80052c2:	2401      	moveq	r4, #1
 80052c4:	b1c4      	cbz	r4, 80052f8 <SAI_InitI2S+0x4c>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80052c6:	2400      	movs	r4, #0
 80052c8:	6504      	str	r4, [r0, #80]	; 0x50
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80052ca:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80052ce:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80052d0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80052d4:	6744      	str	r4, [r0, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 80052d6:	2400      	movs	r4, #0
 80052d8:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80052da:	6703      	str	r3, [r0, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80052dc:	f013 0f01 	tst.w	r3, #1
 80052e0:	d14b      	bne.n	800537a <SAI_InitI2S+0xce>
  {
    return HAL_ERROR;
  }

  if (protocol == SAI_I2S_STANDARD)
 80052e2:	b961      	cbnz	r1, 80052fe <SAI_InitI2S+0x52>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80052e4:	6604      	str	r4, [r0, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80052e6:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80052ea:	6644      	str	r4, [r0, #100]	; 0x64
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
  }

  /* Frame definition */
  switch (datasize)
 80052ec:	2a03      	cmp	r2, #3
 80052ee:	d83f      	bhi.n	8005370 <SAI_InitI2S+0xc4>
 80052f0:	e8df f002 	tbb	[pc, r2]
 80052f4:	33281e0b 	.word	0x33281e0b
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80052f8:	2401      	movs	r4, #1
 80052fa:	6504      	str	r4, [r0, #80]	; 0x50
 80052fc:	e7e5      	b.n	80052ca <SAI_InitI2S+0x1e>
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80052fe:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 8005302:	6604      	str	r4, [r0, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8005304:	2400      	movs	r4, #0
 8005306:	6644      	str	r4, [r0, #100]	; 0x64
 8005308:	e7f0      	b.n	80052ec <SAI_InitI2S+0x40>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800530a:	2480      	movs	r4, #128	; 0x80
 800530c:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800530e:	085b      	lsrs	r3, r3, #1
 8005310:	015c      	lsls	r4, r3, #5
 8005312:	6544      	str	r4, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005318:	2340      	movs	r3, #64	; 0x40
 800531a:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 800531c:	2300      	movs	r3, #0
      break;
    default :
      status = HAL_ERROR;
      break;
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800531e:	2902      	cmp	r1, #2
 8005320:	d12c      	bne.n	800537c <SAI_InitI2S+0xd0>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8005322:	2a01      	cmp	r2, #1
 8005324:	d026      	beq.n	8005374 <SAI_InitI2S+0xc8>
    {
      hsai->SlotInit.FirstBitOffset = 16;
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8005326:	2a02      	cmp	r2, #2
 8005328:	d128      	bne.n	800537c <SAI_InitI2S+0xd0>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800532a:	2208      	movs	r2, #8
 800532c:	6682      	str	r2, [r0, #104]	; 0x68
 800532e:	e025      	b.n	800537c <SAI_InitI2S+0xd0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005330:	2480      	movs	r4, #128	; 0x80
 8005332:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005334:	085b      	lsrs	r3, r3, #1
 8005336:	019d      	lsls	r5, r3, #6
 8005338:	6545      	str	r5, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800533a:	015b      	lsls	r3, r3, #5
 800533c:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800533e:	66c4      	str	r4, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8005340:	2300      	movs	r3, #0
      break;
 8005342:	e7ec      	b.n	800531e <SAI_InitI2S+0x72>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005344:	24c0      	movs	r4, #192	; 0xc0
 8005346:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005348:	085b      	lsrs	r3, r3, #1
 800534a:	019c      	lsls	r4, r3, #6
 800534c:	6544      	str	r4, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800534e:	015b      	lsls	r3, r3, #5
 8005350:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005352:	2380      	movs	r3, #128	; 0x80
 8005354:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8005356:	2300      	movs	r3, #0
      break;
 8005358:	e7e1      	b.n	800531e <SAI_InitI2S+0x72>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800535a:	24e0      	movs	r4, #224	; 0xe0
 800535c:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800535e:	085b      	lsrs	r3, r3, #1
 8005360:	019c      	lsls	r4, r3, #6
 8005362:	6544      	str	r4, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005364:	015b      	lsls	r3, r3, #5
 8005366:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005368:	2380      	movs	r3, #128	; 0x80
 800536a:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 800536c:	2300      	movs	r3, #0
      break;
 800536e:	e7d6      	b.n	800531e <SAI_InitI2S+0x72>
      status = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e7d4      	b.n	800531e <SAI_InitI2S+0x72>
      hsai->SlotInit.FirstBitOffset = 16;
 8005374:	2110      	movs	r1, #16
 8005376:	6681      	str	r1, [r0, #104]	; 0x68
 8005378:	e7d5      	b.n	8005326 <SAI_InitI2S+0x7a>
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
    }
  }
  return status;
}
 800537c:	4618      	mov	r0, r3
 800537e:	bc30      	pop	{r4, r5}
 8005380:	4770      	bx	lr

08005382 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005382:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005384:	2400      	movs	r4, #0
 8005386:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005388:	64c4      	str	r4, [r0, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800538a:	6845      	ldr	r5, [r0, #4]
 800538c:	2d02      	cmp	r5, #2
 800538e:	bf14      	ite	ne
 8005390:	2400      	movne	r4, #0
 8005392:	2401      	moveq	r4, #1
 8005394:	2d00      	cmp	r5, #0
 8005396:	bf08      	it	eq
 8005398:	2401      	moveq	r4, #1
 800539a:	b1c4      	cbz	r4, 80053ce <SAI_InitPCM+0x4c>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800539c:	2401      	movs	r4, #1
 800539e:	6504      	str	r4, [r0, #80]	; 0x50
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80053a0:	2400      	movs	r4, #0
 80053a2:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80053a4:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 80053a8:	6605      	str	r5, [r0, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80053aa:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 80053ae:	6645      	str	r5, [r0, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 80053b0:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80053b2:	6703      	str	r3, [r0, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80053b4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80053b8:	6744      	str	r4, [r0, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 80053ba:	2904      	cmp	r1, #4
 80053bc:	d00a      	beq.n	80053d4 <SAI_InitPCM+0x52>
      hsai->FrameInit.ActiveFrameLength = 1;
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 80053be:	210d      	movs	r1, #13
 80053c0:	6581      	str	r1, [r0, #88]	; 0x58
  }

  switch (datasize)
 80053c2:	2a03      	cmp	r2, #3
 80053c4:	d829      	bhi.n	800541a <SAI_InitPCM+0x98>
 80053c6:	e8df f002 	tbb	[pc, r2]
 80053ca:	1108      	.short	0x1108
 80053cc:	2018      	.short	0x2018
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80053ce:	2400      	movs	r4, #0
 80053d0:	6504      	str	r4, [r0, #80]	; 0x50
 80053d2:	e7e5      	b.n	80053a0 <SAI_InitPCM+0x1e>
      hsai->FrameInit.ActiveFrameLength = 1;
 80053d4:	2101      	movs	r1, #1
 80053d6:	6581      	str	r1, [r0, #88]	; 0x58
 80053d8:	e7f3      	b.n	80053c2 <SAI_InitPCM+0x40>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80053da:	2280      	movs	r2, #128	; 0x80
 80053dc:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80053e2:	2340      	movs	r3, #64	; 0x40
 80053e4:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 80053e6:	2000      	movs	r0, #0
      status = HAL_ERROR;
      break;
  }

  return status;
}
 80053e8:	bc30      	pop	{r4, r5}
 80053ea:	4770      	bx	lr
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80053ec:	2280      	movs	r2, #128	; 0x80
 80053ee:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80053f0:	015b      	lsls	r3, r3, #5
 80053f2:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80053f4:	66c2      	str	r2, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 80053f6:	2000      	movs	r0, #0
      break;
 80053f8:	e7f6      	b.n	80053e8 <SAI_InitPCM+0x66>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80053fa:	22c0      	movs	r2, #192	; 0xc0
 80053fc:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80053fe:	015b      	lsls	r3, r3, #5
 8005400:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005402:	2380      	movs	r3, #128	; 0x80
 8005404:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8005406:	2000      	movs	r0, #0
      break;
 8005408:	e7ee      	b.n	80053e8 <SAI_InitPCM+0x66>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800540a:	22e0      	movs	r2, #224	; 0xe0
 800540c:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800540e:	015b      	lsls	r3, r3, #5
 8005410:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005412:	2380      	movs	r3, #128	; 0x80
 8005414:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8005416:	2000      	movs	r0, #0
      break;
 8005418:	e7e6      	b.n	80053e8 <SAI_InitPCM+0x66>
      status = HAL_ERROR;
 800541a:	2001      	movs	r0, #1
 800541c:	e7e4      	b.n	80053e8 <SAI_InitPCM+0x66>

0800541e <SAI_InterruptFlag>:
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if (mode == SAI_MODE_IT)
 800541e:	2901      	cmp	r1, #1
 8005420:	d00a      	beq.n	8005438 <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8005422:	2301      	movs	r3, #1
  {
    tmpIT |= SAI_IT_FREQ;
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005424:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005426:	2a08      	cmp	r2, #8
 8005428:	d008      	beq.n	800543c <SAI_InterruptFlag+0x1e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT |= SAI_IT_CNRDY;
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800542a:	6842      	ldr	r2, [r0, #4]
 800542c:	3a02      	subs	r2, #2
 800542e:	2a01      	cmp	r2, #1
 8005430:	d90c      	bls.n	800544c <SAI_InterruptFlag+0x2e>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8005432:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 8005436:	4770      	bx	lr
    tmpIT |= SAI_IT_FREQ;
 8005438:	2309      	movs	r3, #9
 800543a:	e7f3      	b.n	8005424 <SAI_InterruptFlag+0x6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800543c:	6842      	ldr	r2, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800543e:	2a01      	cmp	r2, #1
 8005440:	bf18      	it	ne
 8005442:	2a03      	cmpne	r2, #3
 8005444:	d1f1      	bne.n	800542a <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_CNRDY;
 8005446:	f043 0310 	orr.w	r3, r3, #16
 800544a:	e7ee      	b.n	800542a <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800544c:	f043 0060 	orr.w	r0, r3, #96	; 0x60
 8005450:	4770      	bx	lr
	...

08005454 <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005454:	4b0e      	ldr	r3, [pc, #56]	; (8005490 <SAI_Disable+0x3c>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a0e      	ldr	r2, [pc, #56]	; (8005494 <SAI_Disable+0x40>)
 800545a:	fba2 2303 	umull	r2, r3, r2, r3
 800545e:	0b1b      	lsrs	r3, r3, #12
 8005460:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005462:	6801      	ldr	r1, [r0, #0]
 8005464:	680a      	ldr	r2, [r1, #0]
 8005466:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800546a:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800546c:	b13b      	cbz	r3, 800547e <SAI_Disable+0x2a>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
    count--;
 800546e:	3b01      	subs	r3, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005470:	6802      	ldr	r2, [r0, #0]
 8005472:	6812      	ldr	r2, [r2, #0]
 8005474:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8005478:	d1f8      	bne.n	800546c <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800547a:	2000      	movs	r0, #0

  return status;
}
 800547c:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800547e:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8005482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005486:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      status = HAL_TIMEOUT;
 800548a:	2003      	movs	r0, #3
      break;
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	200000bc 	.word	0x200000bc
 8005494:	95cbec1b 	.word	0x95cbec1b

08005498 <HAL_SAI_Init>:
{
 8005498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hsai == NULL)
 800549c:	2800      	cmp	r0, #0
 800549e:	f000 81cd 	beq.w	800583c <HAL_SAI_Init+0x3a4>
 80054a2:	4604      	mov	r4, r0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80054a4:	f7fa ff92 	bl	80003cc <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80054a8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d025      	beq.n	80054fc <HAL_SAI_Init+0x64>
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	49b1      	ldr	r1, [pc, #708]	; (8005778 <HAL_SAI_Init+0x2e0>)
 80054b4:	4ab1      	ldr	r2, [pc, #708]	; (800577c <HAL_SAI_Init+0x2e4>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	bf18      	it	ne
 80054ba:	428b      	cmpne	r3, r1
 80054bc:	d030      	beq.n	8005520 <HAL_SAI_Init+0x88>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80054be:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80054c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054c6:	4293      	cmp	r3, r2
 80054c8:	bf18      	it	ne
 80054ca:	428b      	cmpne	r3, r1
 80054cc:	d045      	beq.n	800555a <HAL_SAI_Init+0xc2>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80054ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80054d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054d6:	4293      	cmp	r3, r2
 80054d8:	bf18      	it	ne
 80054da:	428b      	cmpne	r3, r1
 80054dc:	d03f      	beq.n	800555e <HAL_SAI_Init+0xc6>
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 80054de:	f101 51c0 	add.w	r1, r1, #402653184	; 0x18000000
 80054e2:	f5a1 3186 	sub.w	r1, r1, #68608	; 0x10c00
 80054e6:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 80054ea:	f5a2 3286 	sub.w	r2, r2, #68608	; 0x10c00
 80054ee:	4293      	cmp	r3, r2
 80054f0:	bf18      	it	ne
 80054f2:	428b      	cmpne	r3, r1
 80054f4:	f040 81a8 	bne.w	8005848 <HAL_SAI_Init+0x3b0>
    SaiBaseAddress = SAI4;
 80054f8:	4ea1      	ldr	r6, [pc, #644]	; (8005780 <HAL_SAI_Init+0x2e8>)
 80054fa:	e012      	b.n	8005522 <HAL_SAI_Init+0x8a>
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	499e      	ldr	r1, [pc, #632]	; (8005778 <HAL_SAI_Init+0x2e0>)
 8005500:	4aa0      	ldr	r2, [pc, #640]	; (8005784 <HAL_SAI_Init+0x2ec>)
 8005502:	428b      	cmp	r3, r1
 8005504:	bf18      	it	ne
 8005506:	4293      	cmpne	r3, r2
 8005508:	f040 819c 	bne.w	8005844 <HAL_SAI_Init+0x3ac>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800550c:	6863      	ldr	r3, [r4, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800550e:	2b01      	cmp	r3, #1
 8005510:	d001      	beq.n	8005516 <HAL_SAI_Init+0x7e>
      return HAL_ERROR;
 8005512:	2501      	movs	r5, #1
 8005514:	e193      	b.n	800583e <HAL_SAI_Init+0x3a6>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8005516:	6c63      	ldr	r3, [r4, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0c9      	beq.n	80054b0 <HAL_SAI_Init+0x18>
      return HAL_ERROR;
 800551c:	2501      	movs	r5, #1
 800551e:	e18e      	b.n	800583e <HAL_SAI_Init+0x3a6>
    SaiBaseAddress = SAI1;
 8005520:	4e99      	ldr	r6, [pc, #612]	; (8005788 <HAL_SAI_Init+0x2f0>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8005522:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 8005526:	b1e3      	cbz	r3, 8005562 <HAL_SAI_Init+0xca>
  if(SAI_Disable(hsai) != HAL_OK)
 8005528:	4620      	mov	r0, r4
 800552a:	f7ff ff93 	bl	8005454 <SAI_Disable>
 800552e:	4605      	mov	r5, r0
 8005530:	2800      	cmp	r0, #0
 8005532:	f040 818b 	bne.w	800584c <HAL_SAI_Init+0x3b4>
  hsai->State = HAL_SAI_STATE_BUSY;
 8005536:	2302      	movs	r3, #2
 8005538:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 800553c:	68e3      	ldr	r3, [r4, #12]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d017      	beq.n	8005572 <HAL_SAI_Init+0xda>
 8005542:	2b02      	cmp	r3, #2
 8005544:	d013      	beq.n	800556e <HAL_SAI_Init+0xd6>
      tmpregisterGCR = 0;
 8005546:	2200      	movs	r2, #0
  switch (hsai->Init.Synchro)
 8005548:	68a3      	ldr	r3, [r4, #8]
 800554a:	3b01      	subs	r3, #1
 800554c:	2b04      	cmp	r3, #4
 800554e:	d812      	bhi.n	8005576 <HAL_SAI_Init+0xde>
 8005550:	e8df f003 	tbb	[pc, r3]
 8005554:	1b161325 	.word	0x1b161325
 8005558:	20          	.byte	0x20
 8005559:	00          	.byte	0x00
    SaiBaseAddress = SAI2;
 800555a:	4e8c      	ldr	r6, [pc, #560]	; (800578c <HAL_SAI_Init+0x2f4>)
 800555c:	e7e1      	b.n	8005522 <HAL_SAI_Init+0x8a>
    SaiBaseAddress = SAI3;
 800555e:	4e8c      	ldr	r6, [pc, #560]	; (8005790 <HAL_SAI_Init+0x2f8>)
 8005560:	e7df      	b.n	8005522 <HAL_SAI_Init+0x8a>
    hsai->Lock = HAL_UNLOCKED;
 8005562:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 8005566:	4620      	mov	r0, r4
 8005568:	f005 fdf2 	bl	800b150 <HAL_SAI_MspInit>
 800556c:	e7dc      	b.n	8005528 <HAL_SAI_Init+0x90>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800556e:	2220      	movs	r2, #32
      break;
 8005570:	e7ea      	b.n	8005548 <HAL_SAI_Init+0xb0>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005572:	2210      	movs	r2, #16
 8005574:	e7e8      	b.n	8005548 <HAL_SAI_Init+0xb0>
      syncen_bits = 0;
 8005576:	2700      	movs	r7, #0
 8005578:	e013      	b.n	80055a2 <HAL_SAI_Init+0x10a>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800557a:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 800557e:	e010      	b.n	80055a2 <HAL_SAI_Init+0x10a>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005580:	f042 0201 	orr.w	r2, r2, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005584:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8005588:	e00b      	b.n	80055a2 <HAL_SAI_Init+0x10a>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800558a:	f042 0202 	orr.w	r2, r2, #2
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800558e:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8005592:	e006      	b.n	80055a2 <HAL_SAI_Init+0x10a>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8005594:	f042 0203 	orr.w	r2, r2, #3
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005598:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 800559c:	e001      	b.n	80055a2 <HAL_SAI_Init+0x10a>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800559e:	f44f 6780 	mov.w	r7, #1024	; 0x400
  SaiBaseAddress->GCR = tmpregisterGCR;
 80055a2:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80055a4:	6a23      	ldr	r3, [r4, #32]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d043      	beq.n	8005632 <HAL_SAI_Init+0x19a>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	4972      	ldr	r1, [pc, #456]	; (8005778 <HAL_SAI_Init+0x2e0>)
 80055ae:	4a73      	ldr	r2, [pc, #460]	; (800577c <HAL_SAI_Init+0x2e4>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	bf18      	it	ne
 80055b4:	428b      	cmpne	r3, r1
 80055b6:	f000 80c5 	beq.w	8005744 <HAL_SAI_Init+0x2ac>
    uint32_t freq = 0;
 80055ba:	2000      	movs	r0, #0
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	4975      	ldr	r1, [pc, #468]	; (8005794 <HAL_SAI_Init+0x2fc>)
 80055c0:	4a75      	ldr	r2, [pc, #468]	; (8005798 <HAL_SAI_Init+0x300>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	bf18      	it	ne
 80055c6:	428b      	cmpne	r3, r1
 80055c8:	f000 80c1 	beq.w	800574e <HAL_SAI_Init+0x2b6>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80055cc:	6823      	ldr	r3, [r4, #0]
 80055ce:	4973      	ldr	r1, [pc, #460]	; (800579c <HAL_SAI_Init+0x304>)
 80055d0:	4a73      	ldr	r2, [pc, #460]	; (80057a0 <HAL_SAI_Init+0x308>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	bf18      	it	ne
 80055d6:	428b      	cmpne	r3, r1
 80055d8:	f000 80be 	beq.w	8005758 <HAL_SAI_Init+0x2c0>
    if (hsai->Instance == SAI4_Block_A)
 80055dc:	6822      	ldr	r2, [r4, #0]
 80055de:	4b69      	ldr	r3, [pc, #420]	; (8005784 <HAL_SAI_Init+0x2ec>)
 80055e0:	429a      	cmp	r2, r3
 80055e2:	f000 80be 	beq.w	8005762 <HAL_SAI_Init+0x2ca>
    if (hsai->Instance == SAI4_Block_B)
 80055e6:	6822      	ldr	r2, [r4, #0]
 80055e8:	4b6e      	ldr	r3, [pc, #440]	; (80057a4 <HAL_SAI_Init+0x30c>)
 80055ea:	429a      	cmp	r2, r3
 80055ec:	f000 80be 	beq.w	800576c <HAL_SAI_Init+0x2d4>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80055f0:	69a3      	ldr	r3, [r4, #24]
 80055f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055f6:	f000 80df 	beq.w	80057b8 <HAL_SAI_Init+0x320>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80055fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80055fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005600:	f000 80e4 	beq.w	80057cc <HAL_SAI_Init+0x334>
 8005604:	2301      	movs	r3, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8005606:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800560a:	0041      	lsls	r1, r0, #1
 800560c:	6a22      	ldr	r2, [r4, #32]
 800560e:	fb03 f302 	mul.w	r3, r3, r2
 8005612:	021b      	lsls	r3, r3, #8
 8005614:	fbb1 f1f3 	udiv	r1, r1, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 8005618:	4b63      	ldr	r3, [pc, #396]	; (80057a8 <HAL_SAI_Init+0x310>)
 800561a:	fba3 2301 	umull	r2, r3, r3, r1
 800561e:	08db      	lsrs	r3, r3, #3
 8005620:	6263      	str	r3, [r4, #36]	; 0x24
    if ((tmpval % 10U) > 8U)
 8005622:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8005626:	0042      	lsls	r2, r0, #1
 8005628:	1a8a      	subs	r2, r1, r2
 800562a:	2a08      	cmp	r2, #8
 800562c:	d901      	bls.n	8005632 <HAL_SAI_Init+0x19a>
      hsai->Init.Mckdiv += 1U;
 800562e:	3301      	adds	r3, #1
 8005630:	6263      	str	r3, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005632:	6862      	ldr	r2, [r4, #4]
 8005634:	2a02      	cmp	r2, #2
 8005636:	bf14      	ite	ne
 8005638:	2300      	movne	r3, #0
 800563a:	2301      	moveq	r3, #1
 800563c:	2a00      	cmp	r2, #0
 800563e:	bf08      	it	eq
 8005640:	2301      	moveq	r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 80c7 	beq.w	80057d6 <HAL_SAI_Init+0x33e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005648:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800564a:	2b01      	cmp	r3, #1
 800564c:	f000 80c0 	beq.w	80057d0 <HAL_SAI_Init+0x338>
 8005650:	f44f 7800 	mov.w	r8, #512	; 0x200
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8005654:	f7fa feba 	bl	80003cc <HAL_GetREVID>
 8005658:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800565c:	f0c0 80c4 	bcc.w	80057e8 <HAL_SAI_Init+0x350>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005660:	6822      	ldr	r2, [r4, #0]
 8005662:	6811      	ldr	r1, [r2, #0]
 8005664:	4b51      	ldr	r3, [pc, #324]	; (80057ac <HAL_SAI_Init+0x314>)
 8005666:	400b      	ands	r3, r1
 8005668:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800566a:	6821      	ldr	r1, [r4, #0]
 800566c:	680a      	ldr	r2, [r1, #0]
 800566e:	6863      	ldr	r3, [r4, #4]
 8005670:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005672:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005674:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005676:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005678:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800567a:	4303      	orrs	r3, r0
 800567c:	ea43 0308 	orr.w	r3, r3, r8
                            ckstr_bits | syncen_bits |                             \
 8005680:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005682:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8005684:	4303      	orrs	r3, r0
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005686:	6960      	ldr	r0, [r4, #20]
 8005688:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800568a:	69a0      	ldr	r0, [r4, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800568c:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800568e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005690:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8005694:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005696:	4303      	orrs	r3, r0
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8005698:	6920      	ldr	r0, [r4, #16]
 800569a:	4303      	orrs	r3, r0
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800569c:	4313      	orrs	r3, r2
 800569e:	600b      	str	r3, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80056a0:	6822      	ldr	r2, [r4, #0]
 80056a2:	6851      	ldr	r1, [r2, #4]
 80056a4:	4b42      	ldr	r3, [pc, #264]	; (80057b0 <HAL_SAI_Init+0x318>)
 80056a6:	400b      	ands	r3, r1
 80056a8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80056aa:	6821      	ldr	r1, [r4, #0]
 80056ac:	684a      	ldr	r2, [r1, #4]
 80056ae:	69e3      	ldr	r3, [r4, #28]
 80056b0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80056b2:	4303      	orrs	r3, r0
 80056b4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80056b6:	4303      	orrs	r3, r0
 80056b8:	4313      	orrs	r3, r2
 80056ba:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80056bc:	6822      	ldr	r2, [r4, #0]
 80056be:	6891      	ldr	r1, [r2, #8]
 80056c0:	4b3c      	ldr	r3, [pc, #240]	; (80057b4 <HAL_SAI_Init+0x31c>)
 80056c2:	400b      	ands	r3, r1
 80056c4:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80056c6:	6820      	ldr	r0, [r4, #0]
 80056c8:	6882      	ldr	r2, [r0, #8]
 80056ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80056cc:	3b01      	subs	r3, #1
                           hsai->FrameInit.FSOffset |
 80056ce:	6e61      	ldr	r1, [r4, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80056d0:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSDefinition |
 80056d2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 80056d4:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSPolarity   |
 80056d6:	6e21      	ldr	r1, [r4, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 80056d8:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80056da:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80056dc:	3901      	subs	r1, #1
                           hsai->FrameInit.FSPolarity   |
 80056de:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80056e2:	4313      	orrs	r3, r2
 80056e4:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80056e6:	6822      	ldr	r2, [r4, #0]
 80056e8:	68d3      	ldr	r3, [r2, #12]
 80056ea:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 80056ee:	f023 030f 	bic.w	r3, r3, #15
 80056f2:	041b      	lsls	r3, r3, #16
 80056f4:	0c1b      	lsrs	r3, r3, #16
 80056f6:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80056f8:	6820      	ldr	r0, [r4, #0]
 80056fa:	68c2      	ldr	r2, [r0, #12]
 80056fc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80056fe:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8005700:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005702:	6f61      	ldr	r1, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005704:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005708:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800570a:	3901      	subs	r1, #1
 800570c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005710:	4313      	orrs	r3, r2
 8005712:	60c3      	str	r3, [r0, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8005714:	6823      	ldr	r3, [r4, #0]
 8005716:	4918      	ldr	r1, [pc, #96]	; (8005778 <HAL_SAI_Init+0x2e0>)
 8005718:	4a1a      	ldr	r2, [pc, #104]	; (8005784 <HAL_SAI_Init+0x2ec>)
 800571a:	4293      	cmp	r3, r2
 800571c:	bf18      	it	ne
 800571e:	428b      	cmpne	r3, r1
 8005720:	d107      	bne.n	8005732 <HAL_SAI_Init+0x29a>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8005722:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8005724:	f023 0301 	bic.w	r3, r3, #1
 8005728:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800572a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800572e:	2b01      	cmp	r3, #1
 8005730:	d079      	beq.n	8005826 <HAL_SAI_Init+0x38e>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005732:	2300      	movs	r3, #0
 8005734:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  hsai->State = HAL_SAI_STATE_READY;
 8005738:	2201      	movs	r2, #1
 800573a:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 800573e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  return HAL_OK;
 8005742:	e07c      	b.n	800583e <HAL_SAI_Init+0x3a6>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005744:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005748:	f7ff fb8c 	bl	8004e64 <HAL_RCCEx_GetPeriphCLKFreq>
 800574c:	e736      	b.n	80055bc <HAL_SAI_Init+0x124>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800574e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005752:	f7ff fb87 	bl	8004e64 <HAL_RCCEx_GetPeriphCLKFreq>
 8005756:	e739      	b.n	80055cc <HAL_SAI_Init+0x134>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8005758:	f44f 7000 	mov.w	r0, #512	; 0x200
 800575c:	f7ff fb82 	bl	8004e64 <HAL_RCCEx_GetPeriphCLKFreq>
 8005760:	e73c      	b.n	80055dc <HAL_SAI_Init+0x144>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8005762:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005766:	f7ff fb7d 	bl	8004e64 <HAL_RCCEx_GetPeriphCLKFreq>
 800576a:	e73c      	b.n	80055e6 <HAL_SAI_Init+0x14e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800576c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005770:	f7ff fb78 	bl	8004e64 <HAL_RCCEx_GetPeriphCLKFreq>
 8005774:	e73c      	b.n	80055f0 <HAL_SAI_Init+0x158>
 8005776:	bf00      	nop
 8005778:	40015804 	.word	0x40015804
 800577c:	40015824 	.word	0x40015824
 8005780:	58005400 	.word	0x58005400
 8005784:	58005404 	.word	0x58005404
 8005788:	40015800 	.word	0x40015800
 800578c:	40015c00 	.word	0x40015c00
 8005790:	40016000 	.word	0x40016000
 8005794:	40015c04 	.word	0x40015c04
 8005798:	40015c24 	.word	0x40015c24
 800579c:	40016004 	.word	0x40016004
 80057a0:	40016024 	.word	0x40016024
 80057a4:	58005424 	.word	0x58005424
 80057a8:	cccccccd 	.word	0xcccccccd
 80057ac:	f005c010 	.word	0xf005c010
 80057b0:	ffff1ff0 	.word	0xffff1ff0
 80057b4:	fff88000 	.word	0xfff88000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * hsai->FrameInit.FrameLength);
 80057b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80057bc:	0041      	lsls	r1, r0, #1
 80057be:	6a22      	ldr	r2, [r4, #32]
 80057c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80057c2:	fb03 f302 	mul.w	r3, r3, r2
 80057c6:	fbb1 f1f3 	udiv	r1, r1, r3
 80057ca:	e725      	b.n	8005618 <HAL_SAI_Init+0x180>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80057cc:	2302      	movs	r3, #2
 80057ce:	e71a      	b.n	8005606 <HAL_SAI_Init+0x16e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80057d0:	f04f 0800 	mov.w	r8, #0
 80057d4:	e73e      	b.n	8005654 <HAL_SAI_Init+0x1bc>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80057d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d002      	beq.n	80057e2 <HAL_SAI_Init+0x34a>
 80057dc:	f04f 0800 	mov.w	r8, #0
 80057e0:	e738      	b.n	8005654 <HAL_SAI_Init+0x1bc>
 80057e2:	f44f 7800 	mov.w	r8, #512	; 0x200
 80057e6:	e735      	b.n	8005654 <HAL_SAI_Init+0x1bc>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80057e8:	6822      	ldr	r2, [r4, #0]
 80057ea:	6811      	ldr	r1, [r2, #0]
 80057ec:	4b18      	ldr	r3, [pc, #96]	; (8005850 <HAL_SAI_Init+0x3b8>)
 80057ee:	400b      	ands	r3, r1
 80057f0:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80057f2:	6821      	ldr	r1, [r4, #0]
 80057f4:	680a      	ldr	r2, [r1, #0]
 80057f6:	6863      	ldr	r3, [r4, #4]
 80057f8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80057fa:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80057fc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80057fe:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005800:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005802:	4303      	orrs	r3, r0
 8005804:	ea43 0308 	orr.w	r3, r3, r8
                            ckstr_bits | syncen_bits |                             \
 8005808:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800580a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800580c:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800580e:	6967      	ldr	r7, [r4, #20]
 8005810:	433b      	orrs	r3, r7
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005812:	69a0      	ldr	r0, [r4, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005814:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005816:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005818:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                            hsai->Init.MckOverSampling);
 800581c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800581e:	4303      	orrs	r3, r0
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005820:	4313      	orrs	r3, r2
 8005822:	600b      	str	r3, [r1, #0]
 8005824:	e73c      	b.n	80056a0 <HAL_SAI_Init+0x208>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8005826:	6c23      	ldr	r3, [r4, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8005828:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800582a:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800582c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8005830:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8005832:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8005834:	f043 0301 	orr.w	r3, r3, #1
 8005838:	6473      	str	r3, [r6, #68]	; 0x44
 800583a:	e77a      	b.n	8005732 <HAL_SAI_Init+0x29a>
    return HAL_ERROR;
 800583c:	2501      	movs	r5, #1
}
 800583e:	4628      	mov	r0, r5
 8005840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8005844:	2501      	movs	r5, #1
 8005846:	e7fa      	b.n	800583e <HAL_SAI_Init+0x3a6>
    return HAL_ERROR;
 8005848:	2501      	movs	r5, #1
 800584a:	e7f8      	b.n	800583e <HAL_SAI_Init+0x3a6>
    return HAL_ERROR;
 800584c:	2501      	movs	r5, #1
 800584e:	e7f6      	b.n	800583e <HAL_SAI_Init+0x3a6>
 8005850:	f805c010 	.word	0xf805c010

08005854 <HAL_SAI_InitProtocol>:
{
 8005854:	b510      	push	{r4, lr}
 8005856:	4604      	mov	r4, r0
  switch (protocol)
 8005858:	2904      	cmp	r1, #4
 800585a:	d811      	bhi.n	8005880 <HAL_SAI_InitProtocol+0x2c>
 800585c:	e8df f001 	tbb	[pc, r1]
 8005860:	08030303 	.word	0x08030303
 8005864:	08          	.byte	0x08
 8005865:	00          	.byte	0x00
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8005866:	4620      	mov	r0, r4
 8005868:	f7ff fd20 	bl	80052ac <SAI_InitI2S>
  if (status == HAL_OK)
 800586c:	b120      	cbz	r0, 8005878 <HAL_SAI_InitProtocol+0x24>
}
 800586e:	bd10      	pop	{r4, pc}
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8005870:	4620      	mov	r0, r4
 8005872:	f7ff fd86 	bl	8005382 <SAI_InitPCM>
      break;
 8005876:	e7f9      	b.n	800586c <HAL_SAI_InitProtocol+0x18>
    status = HAL_SAI_Init(hsai);
 8005878:	4620      	mov	r0, r4
 800587a:	f7ff fe0d 	bl	8005498 <HAL_SAI_Init>
 800587e:	e7f6      	b.n	800586e <HAL_SAI_InitProtocol+0x1a>
      status = HAL_ERROR;
 8005880:	2001      	movs	r0, #1
 8005882:	e7f4      	b.n	800586e <HAL_SAI_InitProtocol+0x1a>

08005884 <HAL_SAI_DMAStop>:
{
 8005884:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
 8005886:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 800588a:	2b01      	cmp	r3, #1
 800588c:	d053      	beq.n	8005936 <HAL_SAI_DMAStop+0xb2>
 800588e:	4604      	mov	r4, r0
 8005890:	2301      	movs	r3, #1
 8005892:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005896:	6802      	ldr	r2, [r0, #0]
 8005898:	6813      	ldr	r3, [r2, #0]
 800589a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800589e:	6013      	str	r3, [r2, #0]
  if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 80058a0:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b12      	cmp	r3, #18
 80058a8:	d017      	beq.n	80058da <HAL_SAI_DMAStop+0x56>
  HAL_StatusTypeDef status = HAL_OK;
 80058aa:	2500      	movs	r5, #0
  if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 80058ac:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b22      	cmp	r3, #34	; 0x22
 80058b4:	d02a      	beq.n	800590c <HAL_SAI_DMAStop+0x88>
  if (SAI_Disable(hsai) != HAL_OK)
 80058b6:	4620      	mov	r0, r4
 80058b8:	f7ff fdcc 	bl	8005454 <SAI_Disable>
 80058bc:	b100      	cbz	r0, 80058c0 <HAL_SAI_DMAStop+0x3c>
    status = HAL_ERROR;
 80058be:	2501      	movs	r5, #1
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80058c0:	6822      	ldr	r2, [r4, #0]
 80058c2:	6853      	ldr	r3, [r2, #4]
 80058c4:	f043 0308 	orr.w	r3, r3, #8
 80058c8:	6053      	str	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
 80058ca:	2301      	movs	r3, #1
 80058cc:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 80058d0:	2300      	movs	r3, #0
 80058d2:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 80058d6:	4628      	mov	r0, r5
 80058d8:	bd38      	pop	{r3, r4, r5, pc}
  if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 80058da:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 80058de:	b188      	cbz	r0, 8005904 <HAL_SAI_DMAStop+0x80>
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 80058e0:	f7fc faa8 	bl	8001e34 <HAL_DMA_Abort>
 80058e4:	4605      	mov	r5, r0
 80058e6:	2800      	cmp	r0, #0
 80058e8:	d0e0      	beq.n	80058ac <HAL_SAI_DMAStop+0x28>
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80058ea:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80058ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f0:	2b80      	cmp	r3, #128	; 0x80
 80058f2:	d009      	beq.n	8005908 <HAL_SAI_DMAStop+0x84>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80058f4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80058f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058fc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        status = HAL_ERROR;
 8005900:	2501      	movs	r5, #1
 8005902:	e7d3      	b.n	80058ac <HAL_SAI_DMAStop+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8005904:	2500      	movs	r5, #0
 8005906:	e7d1      	b.n	80058ac <HAL_SAI_DMAStop+0x28>
 8005908:	2500      	movs	r5, #0
 800590a:	e7cf      	b.n	80058ac <HAL_SAI_DMAStop+0x28>
  if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800590c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8005910:	2800      	cmp	r0, #0
 8005912:	d0d0      	beq.n	80058b6 <HAL_SAI_DMAStop+0x32>
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8005914:	f7fc fa8e 	bl	8001e34 <HAL_DMA_Abort>
 8005918:	2800      	cmp	r0, #0
 800591a:	d0cc      	beq.n	80058b6 <HAL_SAI_DMAStop+0x32>
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800591c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005922:	2b80      	cmp	r3, #128	; 0x80
 8005924:	d0c7      	beq.n	80058b6 <HAL_SAI_DMAStop+0x32>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005926:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800592a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800592e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        status = HAL_ERROR;
 8005932:	2501      	movs	r5, #1
 8005934:	e7bf      	b.n	80058b6 <HAL_SAI_DMAStop+0x32>
  __HAL_LOCK(hsai);
 8005936:	2502      	movs	r5, #2
 8005938:	e7cd      	b.n	80058d6 <HAL_SAI_DMAStop+0x52>
	...

0800593c <HAL_SAI_Transmit_DMA>:
{
 800593c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593e:	4604      	mov	r4, r0
 8005940:	460e      	mov	r6, r1
 8005942:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8005944:	f7fa fd28 	bl	8000398 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 8005948:	fab5 f385 	clz	r3, r5
 800594c:	095b      	lsrs	r3, r3, #5
 800594e:	2e00      	cmp	r6, #0
 8005950:	bf08      	it	eq
 8005952:	2301      	moveq	r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	d165      	bne.n	8005a24 <HAL_SAI_Transmit_DMA+0xe8>
 8005958:	4607      	mov	r7, r0
  if (hsai->State == HAL_SAI_STATE_READY)
 800595a:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b01      	cmp	r3, #1
 8005962:	d162      	bne.n	8005a2a <HAL_SAI_Transmit_DMA+0xee>
    __HAL_LOCK(hsai);
 8005964:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8005968:	2b01      	cmp	r3, #1
 800596a:	d060      	beq.n	8005a2e <HAL_SAI_Transmit_DMA+0xf2>
 800596c:	2301      	movs	r3, #1
 800596e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    hsai->pBuffPtr = pData;
 8005972:	67a6      	str	r6, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 8005974:	f8a4 507c 	strh.w	r5, [r4, #124]	; 0x7c
    hsai->XferCount = Size;
 8005978:	f8a4 507e 	strh.w	r5, [r4, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800597c:	2300      	movs	r3, #0
 800597e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005982:	2212      	movs	r2, #18
 8005984:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8005988:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800598c:	4929      	ldr	r1, [pc, #164]	; (8005a34 <HAL_SAI_Transmit_DMA+0xf8>)
 800598e:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005990:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005994:	4928      	ldr	r1, [pc, #160]	; (8005a38 <HAL_SAI_Transmit_DMA+0xfc>)
 8005996:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8005998:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800599c:	4927      	ldr	r1, [pc, #156]	; (8005a3c <HAL_SAI_Transmit_DMA+0x100>)
 800599e:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 80059a0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80059a4:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80059a6:	6822      	ldr	r2, [r4, #0]
 80059a8:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 80059ac:	321c      	adds	r2, #28
 80059ae:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80059b0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80059b4:	f7fc f8f2 	bl	8001b9c <HAL_DMA_Start_IT>
 80059b8:	4605      	mov	r5, r0
 80059ba:	bb10      	cbnz	r0, 8005a02 <HAL_SAI_Transmit_DMA+0xc6>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80059bc:	2100      	movs	r1, #0
 80059be:	4620      	mov	r0, r4
 80059c0:	f7ff fd2d 	bl	800541e <SAI_InterruptFlag>
 80059c4:	6822      	ldr	r2, [r4, #0]
 80059c6:	6913      	ldr	r3, [r2, #16]
 80059c8:	4318      	orrs	r0, r3
 80059ca:	6110      	str	r0, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80059cc:	6822      	ldr	r2, [r4, #0]
 80059ce:	6813      	ldr	r3, [r2, #0]
 80059d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059d4:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	695a      	ldr	r2, [r3, #20]
 80059da:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
 80059de:	d115      	bne.n	8005a0c <HAL_SAI_Transmit_DMA+0xd0>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 80059e0:	f7fa fcda 	bl	8000398 <HAL_GetTick>
 80059e4:	1bc0      	subs	r0, r0, r7
 80059e6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80059ea:	d9f4      	bls.n	80059d6 <HAL_SAI_Transmit_DMA+0x9a>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80059ec:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80059f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059f4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        __HAL_UNLOCK(hsai);
 80059f8:	2300      	movs	r3, #0
 80059fa:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        return HAL_TIMEOUT;
 80059fe:	2503      	movs	r5, #3
 8005a00:	e011      	b.n	8005a26 <HAL_SAI_Transmit_DMA+0xea>
      __HAL_UNLOCK(hsai);
 8005a02:	2300      	movs	r3, #0
 8005a04:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      return  HAL_ERROR;
 8005a08:	2501      	movs	r5, #1
 8005a0a:	e00c      	b.n	8005a26 <HAL_SAI_Transmit_DMA+0xea>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8005a12:	d103      	bne.n	8005a1c <HAL_SAI_Transmit_DMA+0xe0>
      __HAL_SAI_ENABLE(hsai);
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005a1a:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 8005a22:	e000      	b.n	8005a26 <HAL_SAI_Transmit_DMA+0xea>
    return  HAL_ERROR;
 8005a24:	2501      	movs	r5, #1
}
 8005a26:	4628      	mov	r0, r5
 8005a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8005a2a:	2502      	movs	r5, #2
 8005a2c:	e7fb      	b.n	8005a26 <HAL_SAI_Transmit_DMA+0xea>
    __HAL_LOCK(hsai);
 8005a2e:	2502      	movs	r5, #2
 8005a30:	e7f9      	b.n	8005a26 <HAL_SAI_Transmit_DMA+0xea>
 8005a32:	bf00      	nop
 8005a34:	08005b4f 	.word	0x08005b4f
 8005a38:	08005b15 	.word	0x08005b15
 8005a3c:	08005b9d 	.word	0x08005b9d

08005a40 <HAL_SAI_Receive_DMA>:
{
 8005a40:	b538      	push	{r3, r4, r5, lr}
  if ((pData == NULL) || (Size == 0U))
 8005a42:	4614      	mov	r4, r2
 8005a44:	fab2 f282 	clz	r2, r2
 8005a48:	0952      	lsrs	r2, r2, #5
 8005a4a:	2900      	cmp	r1, #0
 8005a4c:	bf08      	it	eq
 8005a4e:	2201      	moveq	r2, #1
 8005a50:	2a00      	cmp	r2, #0
 8005a52:	d151      	bne.n	8005af8 <HAL_SAI_Receive_DMA+0xb8>
  if (hsai->State == HAL_SAI_STATE_READY)
 8005a54:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d14f      	bne.n	8005afe <HAL_SAI_Receive_DMA+0xbe>
    __HAL_LOCK(hsai);
 8005a5e:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d04d      	beq.n	8005b02 <HAL_SAI_Receive_DMA+0xc2>
 8005a66:	4623      	mov	r3, r4
 8005a68:	4604      	mov	r4, r0
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f880 2090 	strb.w	r2, [r0, #144]	; 0x90
    hsai->pBuffPtr = pData;
 8005a70:	67a1      	str	r1, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 8005a72:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
    hsai->XferCount = Size;
 8005a76:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8005a80:	2222      	movs	r2, #34	; 0x22
 8005a82:	f880 2091 	strb.w	r2, [r0, #145]	; 0x91
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8005a86:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8005a8a:	491f      	ldr	r1, [pc, #124]	; (8005b08 <HAL_SAI_Receive_DMA+0xc8>)
 8005a8c:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8005a8e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8005a92:	491e      	ldr	r1, [pc, #120]	; (8005b0c <HAL_SAI_Receive_DMA+0xcc>)
 8005a94:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8005a96:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8005a9a:	491d      	ldr	r1, [pc, #116]	; (8005b10 <HAL_SAI_Receive_DMA+0xd0>)
 8005a9c:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 8005a9e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8005aa2:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8005aa4:	6801      	ldr	r1, [r0, #0]
 8005aa6:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 8005aaa:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8005aac:	311c      	adds	r1, #28
 8005aae:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 8005ab2:	f7fc f873 	bl	8001b9c <HAL_DMA_Start_IT>
 8005ab6:	4605      	mov	r5, r0
 8005ab8:	b9c8      	cbnz	r0, 8005aee <HAL_SAI_Receive_DMA+0xae>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005aba:	2100      	movs	r1, #0
 8005abc:	4620      	mov	r0, r4
 8005abe:	f7ff fcae 	bl	800541e <SAI_InterruptFlag>
 8005ac2:	6822      	ldr	r2, [r4, #0]
 8005ac4:	6913      	ldr	r3, [r2, #16]
 8005ac6:	4318      	orrs	r0, r3
 8005ac8:	6110      	str	r0, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005aca:	6822      	ldr	r2, [r4, #0]
 8005acc:	6813      	ldr	r3, [r2, #0]
 8005ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ad2:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8005adc:	d103      	bne.n	8005ae6 <HAL_SAI_Receive_DMA+0xa6>
      __HAL_SAI_ENABLE(hsai);
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005ae4:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 8005aec:	e005      	b.n	8005afa <HAL_SAI_Receive_DMA+0xba>
      __HAL_UNLOCK(hsai);
 8005aee:	2300      	movs	r3, #0
 8005af0:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      return  HAL_ERROR;
 8005af4:	2501      	movs	r5, #1
 8005af6:	e000      	b.n	8005afa <HAL_SAI_Receive_DMA+0xba>
    return  HAL_ERROR;
 8005af8:	2501      	movs	r5, #1
}
 8005afa:	4628      	mov	r0, r5
 8005afc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8005afe:	2502      	movs	r5, #2
 8005b00:	e7fb      	b.n	8005afa <HAL_SAI_Receive_DMA+0xba>
    __HAL_LOCK(hsai);
 8005b02:	2502      	movs	r5, #2
 8005b04:	e7f9      	b.n	8005afa <HAL_SAI_Receive_DMA+0xba>
 8005b06:	bf00      	nop
 8005b08:	08005b93 	.word	0x08005b93
 8005b0c:	08005b59 	.word	0x08005b59
 8005b10:	08005b9d 	.word	0x08005b9d

08005b14 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005b14:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b16:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005b18:	69c3      	ldr	r3, [r0, #28]
 8005b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b1e:	d012      	beq.n	8005b46 <SAI_DMATxCplt+0x32>
  {
    hsai->XferCount = 0;
 8005b20:	2100      	movs	r1, #0
 8005b22:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005b26:	6822      	ldr	r2, [r4, #0]
 8005b28:	6813      	ldr	r3, [r2, #0]
 8005b2a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b2e:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005b30:	4620      	mov	r0, r4
 8005b32:	f7ff fc74 	bl	800541e <SAI_InterruptFlag>
 8005b36:	6822      	ldr	r2, [r4, #0]
 8005b38:	6913      	ldr	r3, [r2, #16]
 8005b3a:	ea23 0000 	bic.w	r0, r3, r0
 8005b3e:	6110      	str	r0, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8005b40:	2301      	movs	r3, #1
 8005b42:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8005b46:	4620      	mov	r0, r4
 8005b48:	f004 f963 	bl	8009e12 <HAL_SAI_TxCpltCallback>
#endif
}
 8005b4c:	bd10      	pop	{r4, pc}

08005b4e <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b4e:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8005b50:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005b52:	f004 f95f 	bl	8009e14 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8005b56:	bd08      	pop	{r3, pc}

08005b58 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005b58:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b5a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005b5c:	69c3      	ldr	r3, [r0, #28]
 8005b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b62:	d012      	beq.n	8005b8a <SAI_DMARxCplt+0x32>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005b64:	6822      	ldr	r2, [r4, #0]
 8005b66:	6813      	ldr	r3, [r2, #0]
 8005b68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b6c:	6013      	str	r3, [r2, #0]
    hsai->XferCount = 0;
 8005b6e:	2100      	movs	r1, #0
 8005b70:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005b74:	4620      	mov	r0, r4
 8005b76:	f7ff fc52 	bl	800541e <SAI_InterruptFlag>
 8005b7a:	6822      	ldr	r2, [r4, #0]
 8005b7c:	6913      	ldr	r3, [r2, #16]
 8005b7e:	ea23 0000 	bic.w	r0, r3, r0
 8005b82:	6110      	str	r0, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8005b84:	2301      	movs	r3, #1
 8005b86:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	f004 f943 	bl	8009e16 <HAL_SAI_RxCpltCallback>
#endif
}
 8005b90:	bd10      	pop	{r4, pc}

08005b92 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b92:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8005b94:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005b96:	f004 f944 	bl	8009e22 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8005b9a:	bd08      	pop	{r3, pc}

08005b9c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b9c:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b9e:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005ba0:	f7fc ffce 	bl	8002b40 <HAL_DMA_GetError>
 8005ba4:	2802      	cmp	r0, #2
 8005ba6:	d016      	beq.n	8005bd6 <SAI_DMAError+0x3a>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005ba8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005bb4:	6822      	ldr	r2, [r4, #0]
 8005bb6:	6813      	ldr	r3, [r2, #0]
 8005bb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005bbc:	6013      	str	r3, [r2, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	f7ff fc48 	bl	8005454 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	f004 f91d 	bl	8009e10 <HAL_SAI_ErrorCallback>
#endif
  }
}
 8005bd6:	bd10      	pop	{r4, pc}

08005bd8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005bd8:	b570      	push	{r4, r5, r6, lr}
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005bda:	6a84      	ldr	r4, [r0, #40]	; 0x28

  if (hsd->RxXferSize >= 32U)
 8005bdc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005bde:	2b1f      	cmp	r3, #31
 8005be0:	d916      	bls.n	8005c10 <SD_Read_IT+0x38>
 8005be2:	4606      	mov	r6, r0
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005be4:	2500      	movs	r5, #0
 8005be6:	e00d      	b.n	8005c04 <SD_Read_IT+0x2c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8005be8:	6830      	ldr	r0, [r6, #0]
 8005bea:	f001 fe39 	bl	8007860 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 8005bee:	7020      	strb	r0, [r4, #0]
      tmp++;
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005bf0:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8005bf4:	7063      	strb	r3, [r4, #1]
      tmp++;
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005bf6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8005bfa:	70a3      	strb	r3, [r4, #2]
      tmp++;
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005bfc:	0e00      	lsrs	r0, r0, #24
 8005bfe:	70e0      	strb	r0, [r4, #3]
      tmp++;
 8005c00:	3404      	adds	r4, #4
    for(count = 0U; count < 8U; count++)
 8005c02:	3501      	adds	r5, #1
 8005c04:	2d07      	cmp	r5, #7
 8005c06:	d9ef      	bls.n	8005be8 <SD_Read_IT+0x10>
    }

    hsd->pRxBuffPtr = tmp;
 8005c08:	62b4      	str	r4, [r6, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 8005c0a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8005c0c:	3b20      	subs	r3, #32
 8005c0e:	62f3      	str	r3, [r6, #44]	; 0x2c
  }
}
 8005c10:	bd70      	pop	{r4, r5, r6, pc}

08005c12 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005c12:	b570      	push	{r4, r5, r6, lr}
 8005c14:	b082      	sub	sp, #8
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005c16:	6a04      	ldr	r4, [r0, #32]

  if (hsd->TxXferSize >= 32U)
 8005c18:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005c1a:	2b1f      	cmp	r3, #31
 8005c1c:	d91d      	bls.n	8005c5a <SD_Write_IT+0x48>
 8005c1e:	4606      	mov	r6, r0
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005c20:	2500      	movs	r5, #0
 8005c22:	e014      	b.n	8005c4e <SD_Write_IT+0x3c>
    {
      data = (uint32_t)(*tmp);
 8005c24:	7823      	ldrb	r3, [r4, #0]
 8005c26:	9301      	str	r3, [sp, #4]
      tmp++;
      data |= ((uint32_t)(*tmp) << 8U);
 8005c28:	7862      	ldrb	r2, [r4, #1]
 8005c2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005c2e:	9301      	str	r3, [sp, #4]
      tmp++;
      data |= ((uint32_t)(*tmp) << 16U);
 8005c30:	78a2      	ldrb	r2, [r4, #2]
 8005c32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c36:	9301      	str	r3, [sp, #4]
      tmp++;
      data |= ((uint32_t)(*tmp) << 24U);
 8005c38:	78e2      	ldrb	r2, [r4, #3]
 8005c3a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005c3e:	a902      	add	r1, sp, #8
 8005c40:	f841 3d04 	str.w	r3, [r1, #-4]!
      tmp++;
 8005c44:	3404      	adds	r4, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005c46:	6830      	ldr	r0, [r6, #0]
 8005c48:	f001 fe0d 	bl	8007866 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005c4c:	3501      	adds	r5, #1
 8005c4e:	2d07      	cmp	r5, #7
 8005c50:	d9e8      	bls.n	8005c24 <SD_Write_IT+0x12>
    }

    hsd->pTxBuffPtr = tmp;
 8005c52:	6234      	str	r4, [r6, #32]
    hsd->TxXferSize -= 32U;
 8005c54:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005c56:	3b20      	subs	r3, #32
 8005c58:	6273      	str	r3, [r6, #36]	; 0x24
  }
}
 8005c5a:	b002      	add	sp, #8
 8005c5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005c60 <SD_SendSDStatus>:
{
 8005c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c64:	b086      	sub	sp, #24
 8005c66:	4604      	mov	r4, r0
 8005c68:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8005c6a:	f7fa fb95 	bl	8000398 <HAL_GetTick>
 8005c6e:	4680      	mov	r8, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005c70:	2100      	movs	r1, #0
 8005c72:	6820      	ldr	r0, [r4, #0]
 8005c74:	f001 fe1b 	bl	80078ae <SDMMC_GetResponse>
 8005c78:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005c7c:	d167      	bne.n	8005d4e <SD_SendSDStatus+0xee>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8005c7e:	2140      	movs	r1, #64	; 0x40
 8005c80:	6820      	ldr	r0, [r4, #0]
 8005c82:	f001 ff2f 	bl	8007ae4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c86:	4606      	mov	r6, r0
 8005c88:	b110      	cbz	r0, 8005c90 <SD_SendSDStatus+0x30>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005c8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c8c:	63a3      	str	r3, [r4, #56]	; 0x38
    return errorstate;
 8005c8e:	e060      	b.n	8005d52 <SD_SendSDStatus+0xf2>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005c92:	0409      	lsls	r1, r1, #16
 8005c94:	6820      	ldr	r0, [r4, #0]
 8005c96:	f002 f813 	bl	8007cc0 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c9a:	4606      	mov	r6, r0
 8005c9c:	b110      	cbz	r0, 8005ca4 <SD_SendSDStatus+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005c9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ca0:	63a3      	str	r3, [r4, #56]	; 0x38
    return errorstate;
 8005ca2:	e056      	b.n	8005d52 <SD_SendSDStatus+0xf2>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ca8:	9300      	str	r3, [sp, #0]
  config.DataLength    = 64U;
 8005caa:	2340      	movs	r3, #64	; 0x40
 8005cac:	9301      	str	r3, [sp, #4]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8005cae:	2360      	movs	r3, #96	; 0x60
 8005cb0:	9302      	str	r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	9303      	str	r3, [sp, #12]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	9304      	str	r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005cbe:	4669      	mov	r1, sp
 8005cc0:	6820      	ldr	r0, [r4, #0]
 8005cc2:	f001 fefd 	bl	8007ac0 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8005cc6:	6820      	ldr	r0, [r4, #0]
 8005cc8:	f002 f8b9 	bl	8007e3e <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ccc:	4606      	mov	r6, r0
 8005cce:	b188      	cbz	r0, 8005cf4 <SD_SendSDStatus+0x94>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005cd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cd2:	63a3      	str	r3, [r4, #56]	; 0x38
    return errorstate;
 8005cd4:	e03d      	b.n	8005d52 <SD_SendSDStatus+0xf2>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005cd6:	6820      	ldr	r0, [r4, #0]
 8005cd8:	f001 fdc2 	bl	8007860 <SDMMC_ReadFIFO>
 8005cdc:	f845 0b04 	str.w	r0, [r5], #4
      for(count = 0U; count < 8U; count++)
 8005ce0:	3701      	adds	r7, #1
 8005ce2:	2f07      	cmp	r7, #7
 8005ce4:	d9f7      	bls.n	8005cd6 <SD_SendSDStatus+0x76>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005ce6:	f7fa fb57 	bl	8000398 <HAL_GetTick>
 8005cea:	eba0 0008 	sub.w	r0, r0, r8
 8005cee:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005cf2:	d032      	beq.n	8005d5a <SD_SendSDStatus+0xfa>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005cf4:	6823      	ldr	r3, [r4, #0]
 8005cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cf8:	f412 7f95 	tst.w	r2, #298	; 0x12a
 8005cfc:	d105      	bne.n	8005d0a <SD_SendSDStatus+0xaa>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d00:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005d04:	d0ef      	beq.n	8005ce6 <SD_SendSDStatus+0x86>
      for(count = 0U; count < 8U; count++)
 8005d06:	4637      	mov	r7, r6
 8005d08:	e7eb      	b.n	8005ce2 <SD_SendSDStatus+0x82>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d0c:	f012 0f08 	tst.w	r2, #8
 8005d10:	d126      	bne.n	8005d60 <SD_SendSDStatus+0x100>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d14:	f012 0f02 	tst.w	r2, #2
 8005d18:	d124      	bne.n	8005d64 <SD_SendSDStatus+0x104>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d1c:	f013 0f20 	tst.w	r3, #32
 8005d20:	d122      	bne.n	8005d68 <SD_SendSDStatus+0x108>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8005d22:	6820      	ldr	r0, [r4, #0]
 8005d24:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005d26:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005d2a:	d00d      	beq.n	8005d48 <SD_SendSDStatus+0xe8>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005d2c:	f001 fd98 	bl	8007860 <SDMMC_ReadFIFO>
 8005d30:	f845 0b04 	str.w	r0, [r5], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005d34:	f7fa fb30 	bl	8000398 <HAL_GetTick>
 8005d38:	eba0 0008 	sub.w	r0, r0, r8
 8005d3c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005d40:	d1ef      	bne.n	8005d22 <SD_SendSDStatus+0xc2>
      return HAL_SD_ERROR_TIMEOUT;
 8005d42:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005d46:	e004      	b.n	8005d52 <SD_SendSDStatus+0xf2>
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005d48:	4b08      	ldr	r3, [pc, #32]	; (8005d6c <SD_SendSDStatus+0x10c>)
 8005d4a:	6383      	str	r3, [r0, #56]	; 0x38
  return HAL_SD_ERROR_NONE;
 8005d4c:	e001      	b.n	8005d52 <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005d4e:	f44f 6600 	mov.w	r6, #2048	; 0x800
}
 8005d52:	4630      	mov	r0, r6
 8005d54:	b006      	add	sp, #24
 8005d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_SD_ERROR_TIMEOUT;
 8005d5a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005d5e:	e7f8      	b.n	8005d52 <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005d60:	2608      	movs	r6, #8
 8005d62:	e7f6      	b.n	8005d52 <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005d64:	2602      	movs	r6, #2
 8005d66:	e7f4      	b.n	8005d52 <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_RX_OVERRUN;
 8005d68:	2620      	movs	r6, #32
 8005d6a:	e7f2      	b.n	8005d52 <SD_SendSDStatus+0xf2>
 8005d6c:	18000f3a 	.word	0x18000f3a

08005d70 <SD_FindSCR>:
{
 8005d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d74:	b088      	sub	sp, #32
 8005d76:	4604      	mov	r4, r0
 8005d78:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8005d7a:	f7fa fb0d 	bl	8000398 <HAL_GetTick>
 8005d7e:	4606      	mov	r6, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 8005d80:	2300      	movs	r3, #0
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005d86:	2108      	movs	r1, #8
 8005d88:	6820      	ldr	r0, [r4, #0]
 8005d8a:	f001 feab 	bl	8007ae4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d8e:	4605      	mov	r5, r0
 8005d90:	b118      	cbz	r0, 8005d9a <SD_FindSCR+0x2a>
}
 8005d92:	4628      	mov	r0, r5
 8005d94:	b008      	add	sp, #32
 8005d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005d9a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005d9c:	0409      	lsls	r1, r1, #16
 8005d9e:	6820      	ldr	r0, [r4, #0]
 8005da0:	f001 ff8e 	bl	8007cc0 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005da4:	4605      	mov	r5, r0
 8005da6:	2800      	cmp	r0, #0
 8005da8:	d1f3      	bne.n	8005d92 <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dae:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8005db0:	2308      	movs	r3, #8
 8005db2:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005db4:	2330      	movs	r3, #48	; 0x30
 8005db6:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005db8:	2302      	movs	r3, #2
 8005dba:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005dc4:	a902      	add	r1, sp, #8
 8005dc6:	6820      	ldr	r0, [r4, #0]
 8005dc8:	f001 fe7a 	bl	8007ac0 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005dcc:	6820      	ldr	r0, [r4, #0]
 8005dce:	f001 ffbf 	bl	8007d50 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005dd2:	4605      	mov	r5, r0
 8005dd4:	2800      	cmp	r0, #0
 8005dd6:	d1dc      	bne.n	8005d92 <SD_FindSCR+0x22>
  uint32_t index = 0U;
 8005dd8:	4680      	mov	r8, r0
 8005dda:	e005      	b.n	8005de8 <SD_FindSCR+0x78>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005ddc:	f7fa fadc 	bl	8000398 <HAL_GetTick>
 8005de0:	1b80      	subs	r0, r0, r6
 8005de2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005de6:	d048      	beq.n	8005e7a <SD_FindSCR+0x10a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8005de8:	6820      	ldr	r0, [r4, #0]
 8005dea:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005dec:	f240 532a 	movw	r3, #1322	; 0x52a
 8005df0:	421a      	tst	r2, r3
 8005df2:	d110      	bne.n	8005e16 <SD_FindSCR+0xa6>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8005df4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005df6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005dfa:	d1ef      	bne.n	8005ddc <SD_FindSCR+0x6c>
 8005dfc:	f1b8 0f00 	cmp.w	r8, #0
 8005e00:	d1ec      	bne.n	8005ddc <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8005e02:	f001 fd2d 	bl	8007860 <SDMMC_ReadFIFO>
 8005e06:	9000      	str	r0, [sp, #0]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8005e08:	6820      	ldr	r0, [r4, #0]
 8005e0a:	f001 fd29 	bl	8007860 <SDMMC_ReadFIFO>
 8005e0e:	9001      	str	r0, [sp, #4]
      index++;
 8005e10:	f108 0801 	add.w	r8, r8, #1
 8005e14:	e7e2      	b.n	8005ddc <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005e16:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005e18:	f013 0f08 	tst.w	r3, #8
 8005e1c:	d124      	bne.n	8005e68 <SD_FindSCR+0xf8>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005e1e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005e20:	f013 0f02 	tst.w	r3, #2
 8005e24:	d123      	bne.n	8005e6e <SD_FindSCR+0xfe>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005e26:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005e28:	f013 0f20 	tst.w	r3, #32
 8005e2c:	d122      	bne.n	8005e74 <SD_FindSCR+0x104>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005e2e:	4b14      	ldr	r3, [pc, #80]	; (8005e80 <SD_FindSCR+0x110>)
 8005e30:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005e32:	9a01      	ldr	r2, [sp, #4]
 8005e34:	0213      	lsls	r3, r2, #8
 8005e36:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e3a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005e3e:	0a11      	lsrs	r1, r2, #8
 8005e40:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005e44:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005e46:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005e4a:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005e4c:	9a00      	ldr	r2, [sp, #0]
 8005e4e:	0213      	lsls	r3, r2, #8
 8005e50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e54:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005e58:	0a11      	lsrs	r1, r2, #8
 8005e5a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005e5e:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005e60:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005e64:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 8005e66:	e794      	b.n	8005d92 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005e68:	2508      	movs	r5, #8
 8005e6a:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005e6c:	e791      	b.n	8005d92 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005e6e:	2502      	movs	r5, #2
 8005e70:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005e72:	e78e      	b.n	8005d92 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005e74:	2520      	movs	r5, #32
 8005e76:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8005e78:	e78b      	b.n	8005d92 <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 8005e7a:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8005e7e:	e788      	b.n	8005d92 <SD_FindSCR+0x22>
 8005e80:	18000f3a 	.word	0x18000f3a

08005e84 <SD_WideBus_Enable>:
{
 8005e84:	b510      	push	{r4, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	9100      	str	r1, [sp, #0]
 8005e8e:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005e90:	6800      	ldr	r0, [r0, #0]
 8005e92:	f001 fd0c 	bl	80078ae <SDMMC_GetResponse>
 8005e96:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005e9a:	d116      	bne.n	8005eca <SD_WideBus_Enable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 8005e9c:	4669      	mov	r1, sp
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f7ff ff66 	bl	8005d70 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	b990      	cbnz	r0, 8005ece <SD_WideBus_Enable+0x4a>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005ea8:	9b01      	ldr	r3, [sp, #4]
 8005eaa:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005eae:	d011      	beq.n	8005ed4 <SD_WideBus_Enable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005eb0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005eb2:	0409      	lsls	r1, r1, #16
 8005eb4:	6820      	ldr	r0, [r4, #0]
 8005eb6:	f001 ff03 	bl	8007cc0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005eba:	4603      	mov	r3, r0
 8005ebc:	b938      	cbnz	r0, 8005ece <SD_WideBus_Enable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005ebe:	2102      	movs	r1, #2
 8005ec0:	6820      	ldr	r0, [r4, #0]
 8005ec2:	f001 ff2c 	bl	8007d1e <SDMMC_CmdBusWidth>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	e001      	b.n	8005ece <SD_WideBus_Enable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005eca:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	b002      	add	sp, #8
 8005ed2:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005ed4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005ed8:	e7f9      	b.n	8005ece <SD_WideBus_Enable+0x4a>

08005eda <SD_WideBus_Disable>:
{
 8005eda:	b510      	push	{r4, lr}
 8005edc:	b082      	sub	sp, #8
 8005ede:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	9100      	str	r1, [sp, #0]
 8005ee4:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005ee6:	6800      	ldr	r0, [r0, #0]
 8005ee8:	f001 fce1 	bl	80078ae <SDMMC_GetResponse>
 8005eec:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005ef0:	d116      	bne.n	8005f20 <SD_WideBus_Disable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 8005ef2:	4669      	mov	r1, sp
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	f7ff ff3b 	bl	8005d70 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005efa:	4603      	mov	r3, r0
 8005efc:	b990      	cbnz	r0, 8005f24 <SD_WideBus_Disable+0x4a>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005efe:	9b01      	ldr	r3, [sp, #4]
 8005f00:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005f04:	d011      	beq.n	8005f2a <SD_WideBus_Disable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f06:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005f08:	0409      	lsls	r1, r1, #16
 8005f0a:	6820      	ldr	r0, [r4, #0]
 8005f0c:	f001 fed8 	bl	8007cc0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f10:	4603      	mov	r3, r0
 8005f12:	b938      	cbnz	r0, 8005f24 <SD_WideBus_Disable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005f14:	2100      	movs	r1, #0
 8005f16:	6820      	ldr	r0, [r4, #0]
 8005f18:	f001 ff01 	bl	8007d1e <SDMMC_CmdBusWidth>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	e001      	b.n	8005f24 <SD_WideBus_Disable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005f20:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	b002      	add	sp, #8
 8005f28:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005f2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005f2e:	e7f9      	b.n	8005f24 <SD_WideBus_Disable+0x4a>

08005f30 <SD_SendStatus>:
{
 8005f30:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 8005f32:	b181      	cbz	r1, 8005f56 <SD_SendStatus+0x26>
 8005f34:	460d      	mov	r5, r1
 8005f36:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f38:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005f3a:	0409      	lsls	r1, r1, #16
 8005f3c:	6800      	ldr	r0, [r0, #0]
 8005f3e:	f001 ff65 	bl	8007e0c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f42:	4606      	mov	r6, r0
 8005f44:	b108      	cbz	r0, 8005f4a <SD_SendStatus+0x1a>
}
 8005f46:	4630      	mov	r0, r6
 8005f48:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	6820      	ldr	r0, [r4, #0]
 8005f4e:	f001 fcae 	bl	80078ae <SDMMC_GetResponse>
 8005f52:	6028      	str	r0, [r5, #0]
  return HAL_SD_ERROR_NONE;
 8005f54:	e7f7      	b.n	8005f46 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 8005f56:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 8005f5a:	e7f4      	b.n	8005f46 <SD_SendStatus+0x16>

08005f5c <HAL_SD_ReadBlocks>:
{
 8005f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f60:	b086      	sub	sp, #24
 8005f62:	4604      	mov	r4, r0
 8005f64:	460d      	mov	r5, r1
 8005f66:	4616      	mov	r6, r2
 8005f68:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8005f6a:	f7fa fa15 	bl	8000398 <HAL_GetTick>
  if(NULL == pData)
 8005f6e:	b16d      	cbz	r5, 8005f8c <HAL_SD_ReadBlocks+0x30>
 8005f70:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8005f72:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d00d      	beq.n	8005f98 <HAL_SD_ReadBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005f7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f82:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005f84:	2001      	movs	r0, #1
}
 8005f86:	b006      	add	sp, #24
 8005f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005f8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f92:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005f94:	2001      	movs	r0, #1
 8005f96:	e7f6      	b.n	8005f86 <HAL_SD_ReadBlocks+0x2a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	63a3      	str	r3, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005f9c:	19f3      	adds	r3, r6, r7
 8005f9e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d82d      	bhi.n	8006000 <HAL_SD_ReadBlocks+0xa4>
    hsd->State = HAL_SD_STATE_BUSY;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	2200      	movs	r2, #0
 8005fae:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005fb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d000      	beq.n	8005fb8 <HAL_SD_ReadBlocks+0x5c>
      add *= 512U;
 8005fb6:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005fb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fbc:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005fbe:	027b      	lsls	r3, r7, #9
 8005fc0:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005fc2:	2390      	movs	r3, #144	; 0x90
 8005fc4:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005fce:	9305      	str	r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005fd0:	4669      	mov	r1, sp
 8005fd2:	6820      	ldr	r0, [r4, #0]
 8005fd4:	f001 fd74 	bl	8007ac0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005fd8:	6822      	ldr	r2, [r4, #0]
 8005fda:	68d3      	ldr	r3, [r2, #12]
 8005fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fe0:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 8005fe2:	2f01      	cmp	r7, #1
 8005fe4:	d912      	bls.n	800600c <HAL_SD_ReadBlocks+0xb0>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005fea:	4631      	mov	r1, r6
 8005fec:	6820      	ldr	r0, [r4, #0]
 8005fee:	f001 fdab 	bl	8007b48 <SDMMC_CmdReadMultiBlock>
 8005ff2:	4682      	mov	sl, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ff4:	f1ba 0f00 	cmp.w	sl, #0
 8005ff8:	d110      	bne.n	800601c <HAL_SD_ReadBlocks+0xc0>
    dataremaining = config.DataLength;
 8005ffa:	f8dd 9004 	ldr.w	r9, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005ffe:	e024      	b.n	800604a <HAL_SD_ReadBlocks+0xee>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006000:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006002:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006006:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8006008:	2001      	movs	r0, #1
 800600a:	e7bc      	b.n	8005f86 <HAL_SD_ReadBlocks+0x2a>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800600c:	2301      	movs	r3, #1
 800600e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006010:	4631      	mov	r1, r6
 8006012:	6820      	ldr	r0, [r4, #0]
 8006014:	f001 fd7f 	bl	8007b16 <SDMMC_CmdReadSingleBlock>
 8006018:	4682      	mov	sl, r0
 800601a:	e7eb      	b.n	8005ff4 <HAL_SD_ReadBlocks+0x98>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	4a4c      	ldr	r2, [pc, #304]	; (8006150 <HAL_SD_ReadBlocks+0x1f4>)
 8006020:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006022:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006024:	ea43 030a 	orr.w	r3, r3, sl
 8006028:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800602a:	2001      	movs	r0, #1
 800602c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006030:	2300      	movs	r3, #0
 8006032:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8006034:	e7a7      	b.n	8005f86 <HAL_SD_ReadBlocks+0x2a>
        dataremaining -= 32U;
 8006036:	f1a9 0920 	sub.w	r9, r9, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800603a:	f7fa f9ad 	bl	8000398 <HAL_GetTick>
 800603e:	eba0 0008 	sub.w	r0, r0, r8
 8006042:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006044:	4298      	cmp	r0, r3
 8006046:	d21e      	bcs.n	8006086 <HAL_SD_ReadBlocks+0x12a>
 8006048:	b1eb      	cbz	r3, 8006086 <HAL_SD_ReadBlocks+0x12a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800604e:	f412 7f95 	tst.w	r2, #298	; 0x12a
 8006052:	d126      	bne.n	80060a2 <HAL_SD_ReadBlocks+0x146>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8006054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006056:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800605a:	d0ee      	beq.n	800603a <HAL_SD_ReadBlocks+0xde>
 800605c:	f1b9 0f1f 	cmp.w	r9, #31
 8006060:	d9eb      	bls.n	800603a <HAL_SD_ReadBlocks+0xde>
        for(count = 0U; count < 8U; count++)
 8006062:	4656      	mov	r6, sl
 8006064:	2e07      	cmp	r6, #7
 8006066:	d8e6      	bhi.n	8006036 <HAL_SD_ReadBlocks+0xda>
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006068:	6820      	ldr	r0, [r4, #0]
 800606a:	f001 fbf9 	bl	8007860 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 800606e:	7028      	strb	r0, [r5, #0]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006070:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006074:	706b      	strb	r3, [r5, #1]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006076:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800607a:	70ab      	strb	r3, [r5, #2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800607c:	0e00      	lsrs	r0, r0, #24
 800607e:	70e8      	strb	r0, [r5, #3]
          tempbuff++;
 8006080:	3504      	adds	r5, #4
        for(count = 0U; count < 8U; count++)
 8006082:	3601      	adds	r6, #1
 8006084:	e7ee      	b.n	8006064 <HAL_SD_ReadBlocks+0x108>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	4a31      	ldr	r2, [pc, #196]	; (8006150 <HAL_SD_ReadBlocks+0x1f4>)
 800608a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800608c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800608e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006092:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006094:	2301      	movs	r3, #1
 8006096:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800609a:	2300      	movs	r3, #0
 800609c:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 800609e:	2003      	movs	r0, #3
 80060a0:	e771      	b.n	8005f86 <HAL_SD_ReadBlocks+0x2a>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060a8:	60da      	str	r2, [r3, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80060aa:	6820      	ldr	r0, [r4, #0]
 80060ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80060ae:	f413 7f80 	tst.w	r3, #256	; 0x100
 80060b2:	d004      	beq.n	80060be <HAL_SD_ReadBlocks+0x162>
 80060b4:	2f01      	cmp	r7, #1
 80060b6:	d902      	bls.n	80060be <HAL_SD_ReadBlocks+0x162>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80060b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80060ba:	2b03      	cmp	r3, #3
 80060bc:	d118      	bne.n	80060f0 <HAL_SD_ReadBlocks+0x194>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060c2:	f012 0f08 	tst.w	r2, #8
 80060c6:	d124      	bne.n	8006112 <HAL_SD_ReadBlocks+0x1b6>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80060c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060ca:	f012 0f02 	tst.w	r2, #2
 80060ce:	d12c      	bne.n	800612a <HAL_SD_ReadBlocks+0x1ce>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80060d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060d2:	f012 0f20 	tst.w	r2, #32
 80060d6:	d034      	beq.n	8006142 <HAL_SD_ReadBlocks+0x1e6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060d8:	4a1d      	ldr	r2, [pc, #116]	; (8006150 <HAL_SD_ReadBlocks+0x1f4>)
 80060da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80060dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80060de:	f043 0320 	orr.w	r3, r3, #32
 80060e2:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060e4:	2001      	movs	r0, #1
 80060e6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060ea:	2300      	movs	r3, #0
 80060ec:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80060ee:	e74a      	b.n	8005f86 <HAL_SD_ReadBlocks+0x2a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80060f0:	f001 fd76 	bl	8007be0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80060f4:	4603      	mov	r3, r0
 80060f6:	2800      	cmp	r0, #0
 80060f8:	d0e1      	beq.n	80060be <HAL_SD_ReadBlocks+0x162>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060fa:	6822      	ldr	r2, [r4, #0]
 80060fc:	4914      	ldr	r1, [pc, #80]	; (8006150 <HAL_SD_ReadBlocks+0x1f4>)
 80060fe:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006100:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006102:	4313      	orrs	r3, r2
 8006104:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006106:	2001      	movs	r0, #1
 8006108:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800610c:	2300      	movs	r3, #0
 800610e:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 8006110:	e739      	b.n	8005f86 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006112:	4a0f      	ldr	r2, [pc, #60]	; (8006150 <HAL_SD_ReadBlocks+0x1f4>)
 8006114:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006116:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006118:	f043 0308 	orr.w	r3, r3, #8
 800611c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800611e:	2001      	movs	r0, #1
 8006120:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006124:	2300      	movs	r3, #0
 8006126:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8006128:	e72d      	b.n	8005f86 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800612a:	4a09      	ldr	r2, [pc, #36]	; (8006150 <HAL_SD_ReadBlocks+0x1f4>)
 800612c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800612e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006130:	f043 0302 	orr.w	r3, r3, #2
 8006134:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006136:	2001      	movs	r0, #1
 8006138:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800613c:	2300      	movs	r3, #0
 800613e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8006140:	e721      	b.n	8005f86 <HAL_SD_ReadBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006142:	4a04      	ldr	r2, [pc, #16]	; (8006154 <HAL_SD_ReadBlocks+0x1f8>)
 8006144:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006146:	2301      	movs	r3, #1
 8006148:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 800614c:	2000      	movs	r0, #0
 800614e:	e71a      	b.n	8005f86 <HAL_SD_ReadBlocks+0x2a>
 8006150:	1fe00fff 	.word	0x1fe00fff
 8006154:	18000f3a 	.word	0x18000f3a

08006158 <HAL_SD_WriteBlocks>:
{
 8006158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800615c:	b088      	sub	sp, #32
 800615e:	4604      	mov	r4, r0
 8006160:	460d      	mov	r5, r1
 8006162:	4616      	mov	r6, r2
 8006164:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8006166:	f7fa f917 	bl	8000398 <HAL_GetTick>
  if(NULL == pData)
 800616a:	b16d      	cbz	r5, 8006188 <HAL_SD_WriteBlocks+0x30>
 800616c:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 800616e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b01      	cmp	r3, #1
 8006176:	d00d      	beq.n	8006194 <HAL_SD_WriteBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006178:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800617a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800617e:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8006180:	2001      	movs	r0, #1
}
 8006182:	b008      	add	sp, #32
 8006184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006188:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800618a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800618e:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8006190:	2001      	movs	r0, #1
 8006192:	e7f6      	b.n	8006182 <HAL_SD_WriteBlocks+0x2a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006194:	2300      	movs	r3, #0
 8006196:	63a3      	str	r3, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006198:	19f3      	adds	r3, r6, r7
 800619a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800619c:	4293      	cmp	r3, r2
 800619e:	d82c      	bhi.n	80061fa <HAL_SD_WriteBlocks+0xa2>
    hsd->State = HAL_SD_STATE_BUSY;
 80061a0:	2303      	movs	r3, #3
 80061a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	2200      	movs	r2, #0
 80061aa:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80061ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d000      	beq.n	80061b4 <HAL_SD_WriteBlocks+0x5c>
      add *= 512U;
 80061b2:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80061b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061b8:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80061ba:	027b      	lsls	r3, r7, #9
 80061bc:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80061be:	2390      	movs	r3, #144	; 0x90
 80061c0:	9304      	str	r3, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80061c2:	2300      	movs	r3, #0
 80061c4:	9305      	str	r3, [sp, #20]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80061c6:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80061c8:	9307      	str	r3, [sp, #28]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80061ca:	a902      	add	r1, sp, #8
 80061cc:	6820      	ldr	r0, [r4, #0]
 80061ce:	f001 fc77 	bl	8007ac0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80061d2:	6822      	ldr	r2, [r4, #0]
 80061d4:	68d3      	ldr	r3, [r2, #12]
 80061d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061da:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 80061dc:	2f01      	cmp	r7, #1
 80061de:	d912      	bls.n	8006206 <HAL_SD_WriteBlocks+0xae>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80061e0:	2320      	movs	r3, #32
 80061e2:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80061e4:	4631      	mov	r1, r6
 80061e6:	6820      	ldr	r0, [r4, #0]
 80061e8:	f001 fce0 	bl	8007bac <SDMMC_CmdWriteMultiBlock>
 80061ec:	4682      	mov	sl, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 80061ee:	f1ba 0f00 	cmp.w	sl, #0
 80061f2:	d110      	bne.n	8006216 <HAL_SD_WriteBlocks+0xbe>
    dataremaining = config.DataLength;
 80061f4:	f8dd 900c 	ldr.w	r9, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80061f8:	e024      	b.n	8006244 <HAL_SD_WriteBlocks+0xec>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80061fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80061fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006200:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8006202:	2001      	movs	r0, #1
 8006204:	e7bd      	b.n	8006182 <HAL_SD_WriteBlocks+0x2a>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006206:	2310      	movs	r3, #16
 8006208:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800620a:	4631      	mov	r1, r6
 800620c:	6820      	ldr	r0, [r4, #0]
 800620e:	f001 fcb4 	bl	8007b7a <SDMMC_CmdWriteSingleBlock>
 8006212:	4682      	mov	sl, r0
 8006214:	e7eb      	b.n	80061ee <HAL_SD_WriteBlocks+0x96>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	4a4e      	ldr	r2, [pc, #312]	; (8006354 <HAL_SD_WriteBlocks+0x1fc>)
 800621a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800621c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800621e:	ea43 030a 	orr.w	r3, r3, sl
 8006222:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006224:	2001      	movs	r0, #1
 8006226:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800622a:	2300      	movs	r3, #0
 800622c:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800622e:	e7a8      	b.n	8006182 <HAL_SD_WriteBlocks+0x2a>
        dataremaining -= 32U;
 8006230:	f1a9 0920 	sub.w	r9, r9, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006234:	f7fa f8b0 	bl	8000398 <HAL_GetTick>
 8006238:	eba0 0008 	sub.w	r0, r0, r8
 800623c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800623e:	4298      	cmp	r0, r3
 8006240:	d222      	bcs.n	8006288 <HAL_SD_WriteBlocks+0x130>
 8006242:	b30b      	cbz	r3, 8006288 <HAL_SD_WriteBlocks+0x130>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006248:	f412 7f8d 	tst.w	r2, #282	; 0x11a
 800624c:	d12a      	bne.n	80062a4 <HAL_SD_WriteBlocks+0x14c>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800624e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006250:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006254:	d0ee      	beq.n	8006234 <HAL_SD_WriteBlocks+0xdc>
 8006256:	f1b9 0f1f 	cmp.w	r9, #31
 800625a:	d9eb      	bls.n	8006234 <HAL_SD_WriteBlocks+0xdc>
        for(count = 0U; count < 8U; count++)
 800625c:	4656      	mov	r6, sl
 800625e:	2e07      	cmp	r6, #7
 8006260:	d8e6      	bhi.n	8006230 <HAL_SD_WriteBlocks+0xd8>
          data = (uint32_t)(*tempbuff);
 8006262:	782b      	ldrb	r3, [r5, #0]
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006264:	786a      	ldrb	r2, [r5, #1]
 8006266:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
          data |= ((uint32_t)(*tempbuff) << 16U);
 800626a:	78aa      	ldrb	r2, [r5, #2]
 800626c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006270:	78ea      	ldrb	r2, [r5, #3]
 8006272:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006276:	a908      	add	r1, sp, #32
 8006278:	f841 3d1c 	str.w	r3, [r1, #-28]!
          tempbuff++;
 800627c:	3504      	adds	r5, #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800627e:	6820      	ldr	r0, [r4, #0]
 8006280:	f001 faf1 	bl	8007866 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006284:	3601      	adds	r6, #1
 8006286:	e7ea      	b.n	800625e <HAL_SD_WriteBlocks+0x106>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006288:	6823      	ldr	r3, [r4, #0]
 800628a:	4a32      	ldr	r2, [pc, #200]	; (8006354 <HAL_SD_WriteBlocks+0x1fc>)
 800628c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800628e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006290:	ea43 030a 	orr.w	r3, r3, sl
 8006294:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006296:	2301      	movs	r3, #1
 8006298:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800629c:	2300      	movs	r3, #0
 800629e:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 80062a0:	2003      	movs	r0, #3
 80062a2:	e76e      	b.n	8006182 <HAL_SD_WriteBlocks+0x2a>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80062a4:	68da      	ldr	r2, [r3, #12]
 80062a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062aa:	60da      	str	r2, [r3, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80062ac:	6820      	ldr	r0, [r4, #0]
 80062ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80062b0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80062b4:	d004      	beq.n	80062c0 <HAL_SD_WriteBlocks+0x168>
 80062b6:	2f01      	cmp	r7, #1
 80062b8:	d902      	bls.n	80062c0 <HAL_SD_WriteBlocks+0x168>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80062ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80062bc:	2b03      	cmp	r3, #3
 80062be:	d118      	bne.n	80062f2 <HAL_SD_WriteBlocks+0x19a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062c4:	f012 0f08 	tst.w	r2, #8
 80062c8:	d124      	bne.n	8006314 <HAL_SD_WriteBlocks+0x1bc>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80062ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062cc:	f012 0f02 	tst.w	r2, #2
 80062d0:	d12c      	bne.n	800632c <HAL_SD_WriteBlocks+0x1d4>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80062d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062d4:	f012 0f10 	tst.w	r2, #16
 80062d8:	d034      	beq.n	8006344 <HAL_SD_WriteBlocks+0x1ec>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062da:	4a1e      	ldr	r2, [pc, #120]	; (8006354 <HAL_SD_WriteBlocks+0x1fc>)
 80062dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80062de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80062e0:	f043 0310 	orr.w	r3, r3, #16
 80062e4:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80062e6:	2001      	movs	r0, #1
 80062e8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80062ec:	2300      	movs	r3, #0
 80062ee:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80062f0:	e747      	b.n	8006182 <HAL_SD_WriteBlocks+0x2a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80062f2:	f001 fc75 	bl	8007be0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80062f6:	4603      	mov	r3, r0
 80062f8:	2800      	cmp	r0, #0
 80062fa:	d0e1      	beq.n	80062c0 <HAL_SD_WriteBlocks+0x168>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062fc:	6822      	ldr	r2, [r4, #0]
 80062fe:	4915      	ldr	r1, [pc, #84]	; (8006354 <HAL_SD_WriteBlocks+0x1fc>)
 8006300:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006302:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006304:	4313      	orrs	r3, r2
 8006306:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006308:	2001      	movs	r0, #1
 800630a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800630e:	2300      	movs	r3, #0
 8006310:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 8006312:	e736      	b.n	8006182 <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006314:	4a0f      	ldr	r2, [pc, #60]	; (8006354 <HAL_SD_WriteBlocks+0x1fc>)
 8006316:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006318:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800631a:	f043 0308 	orr.w	r3, r3, #8
 800631e:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006320:	2001      	movs	r0, #1
 8006322:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006326:	2300      	movs	r3, #0
 8006328:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800632a:	e72a      	b.n	8006182 <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800632c:	4a09      	ldr	r2, [pc, #36]	; (8006354 <HAL_SD_WriteBlocks+0x1fc>)
 800632e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006330:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006332:	f043 0302 	orr.w	r3, r3, #2
 8006336:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006338:	2001      	movs	r0, #1
 800633a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800633e:	2300      	movs	r3, #0
 8006340:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8006342:	e71e      	b.n	8006182 <HAL_SD_WriteBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006344:	4a04      	ldr	r2, [pc, #16]	; (8006358 <HAL_SD_WriteBlocks+0x200>)
 8006346:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006348:	2301      	movs	r3, #1
 800634a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 800634e:	2000      	movs	r0, #0
 8006350:	e717      	b.n	8006182 <HAL_SD_WriteBlocks+0x2a>
 8006352:	bf00      	nop
 8006354:	1fe00fff 	.word	0x1fe00fff
 8006358:	18000f3a 	.word	0x18000f3a

0800635c <HAL_SD_ErrorCallback>:
}
 800635c:	4770      	bx	lr

0800635e <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 800635e:	4770      	bx	lr

08006360 <SD_PowerON>:
{
 8006360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006362:	b083      	sub	sp, #12
 8006364:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8006366:	2300      	movs	r3, #0
 8006368:	9301      	str	r3, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800636a:	f7fa f815 	bl	8000398 <HAL_GetTick>
 800636e:	4607      	mov	r7, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006370:	6820      	ldr	r0, [r4, #0]
 8006372:	f001 fc7a 	bl	8007c6a <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006376:	4606      	mov	r6, r0
 8006378:	b110      	cbz	r0, 8006380 <SD_PowerON+0x20>
}
 800637a:	4630      	mov	r0, r6
 800637c:	b003      	add	sp, #12
 800637e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006380:	6820      	ldr	r0, [r4, #0]
 8006382:	f001 fc85 	bl	8007c90 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006386:	b938      	cbnz	r0, 8006398 <SD_PowerON+0x38>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006388:	2301      	movs	r3, #1
 800638a:	6423      	str	r3, [r4, #64]	; 0x40
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800638c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800638e:	2b01      	cmp	r3, #1
 8006390:	d00b      	beq.n	80063aa <SD_PowerON+0x4a>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006392:	4635      	mov	r5, r6
 8006394:	4630      	mov	r0, r6
 8006396:	e014      	b.n	80063c2 <SD_PowerON+0x62>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006398:	2300      	movs	r3, #0
 800639a:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800639c:	6820      	ldr	r0, [r4, #0]
 800639e:	f001 fc64 	bl	8007c6a <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 80063a2:	2800      	cmp	r0, #0
 80063a4:	d0f2      	beq.n	800638c <SD_PowerON+0x2c>
      return errorstate;
 80063a6:	4606      	mov	r6, r0
 80063a8:	e7e7      	b.n	800637a <SD_PowerON+0x1a>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80063aa:	2100      	movs	r1, #0
 80063ac:	6820      	ldr	r0, [r4, #0]
 80063ae:	f001 fc87 	bl	8007cc0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80063b2:	2800      	cmp	r0, #0
 80063b4:	d0ed      	beq.n	8006392 <SD_PowerON+0x32>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063b6:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 80063ba:	e7de      	b.n	800637a <SD_PowerON+0x1a>
    count++;
 80063bc:	9b01      	ldr	r3, [sp, #4]
 80063be:	3301      	adds	r3, #1
 80063c0:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80063c2:	9a01      	ldr	r2, [sp, #4]
 80063c4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d815      	bhi.n	80063f8 <SD_PowerON+0x98>
 80063cc:	b9a5      	cbnz	r5, 80063f8 <SD_PowerON+0x98>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80063ce:	2100      	movs	r1, #0
 80063d0:	6820      	ldr	r0, [r4, #0]
 80063d2:	f001 fc75 	bl	8007cc0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d167      	bne.n	80064aa <SD_PowerON+0x14a>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80063da:	493b      	ldr	r1, [pc, #236]	; (80064c8 <SD_PowerON+0x168>)
 80063dc:	6820      	ldr	r0, [r4, #0]
 80063de:	f001 fc88 	bl	8007cf2 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80063e2:	4605      	mov	r5, r0
 80063e4:	2800      	cmp	r0, #0
 80063e6:	d162      	bne.n	80064ae <SD_PowerON+0x14e>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80063e8:	2100      	movs	r1, #0
 80063ea:	6820      	ldr	r0, [r4, #0]
 80063ec:	f001 fa5f 	bl	80078ae <SDMMC_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80063f0:	0fc3      	lsrs	r3, r0, #31
 80063f2:	d0e3      	beq.n	80063bc <SD_PowerON+0x5c>
 80063f4:	461d      	mov	r5, r3
 80063f6:	e7e1      	b.n	80063bc <SD_PowerON+0x5c>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80063f8:	9a01      	ldr	r2, [sp, #4]
 80063fa:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80063fe:	429a      	cmp	r2, r3
 8006400:	d858      	bhi.n	80064b4 <SD_PowerON+0x154>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006402:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006406:	d0b8      	beq.n	800637a <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006408:	2301      	movs	r3, #1
 800640a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800640c:	69a3      	ldr	r3, [r4, #24]
 800640e:	2b02      	cmp	r3, #2
 8006410:	d1b3      	bne.n	800637a <SD_PowerON+0x1a>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8006412:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8006416:	d0b0      	beq.n	800637a <SD_PowerON+0x1a>
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800641c:	65e3      	str	r3, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800641e:	6822      	ldr	r2, [r4, #0]
 8006420:	6813      	ldr	r3, [r2, #0]
 8006422:	f043 0308 	orr.w	r3, r3, #8
 8006426:	6013      	str	r3, [r2, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8006428:	6820      	ldr	r0, [r4, #0]
 800642a:	f001 fd21 	bl	8007e70 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 800642e:	4606      	mov	r6, r0
 8006430:	2800      	cmp	r0, #0
 8006432:	d1a2      	bne.n	800637a <SD_PowerON+0x1a>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006438:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
 800643c:	d108      	bne.n	8006450 <SD_PowerON+0xf0>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800643e:	f7f9 ffab 	bl	8000398 <HAL_GetTick>
 8006442:	1bc0      	subs	r0, r0, r7
 8006444:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006448:	d1f4      	bne.n	8006434 <SD_PowerON+0xd4>
            return HAL_SD_ERROR_TIMEOUT;
 800644a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800644e:	e794      	b.n	800637a <SD_PowerON+0x1a>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8006450:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006454:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800645a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800645e:	d02c      	beq.n	80064ba <SD_PowerON+0x15a>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8006460:	2001      	movs	r0, #1
 8006462:	f7ff ff7c 	bl	800635e <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8006466:	6822      	ldr	r2, [r4, #0]
 8006468:	6813      	ldr	r3, [r2, #0]
 800646a:	f043 0304 	orr.w	r3, r3, #4
 800646e:	6013      	str	r3, [r2, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006474:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006478:	d108      	bne.n	800648c <SD_PowerON+0x12c>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800647a:	f7f9 ff8d 	bl	8000398 <HAL_GetTick>
 800647e:	1bc0      	subs	r0, r0, r7
 8006480:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006484:	d1f4      	bne.n	8006470 <SD_PowerON+0x110>
              return HAL_SD_ERROR_TIMEOUT;
 8006486:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800648a:	e776      	b.n	800637a <SD_PowerON+0x1a>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800648c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006490:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006496:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800649a:	d111      	bne.n	80064c0 <SD_PowerON+0x160>
          hsd->Instance->POWER = 0x13U;
 800649c:	2213      	movs	r2, #19
 800649e:	601a      	str	r2, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064a6:	639a      	str	r2, [r3, #56]	; 0x38
 80064a8:	e767      	b.n	800637a <SD_PowerON+0x1a>
      return errorstate;
 80064aa:	4606      	mov	r6, r0
 80064ac:	e765      	b.n	800637a <SD_PowerON+0x1a>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80064ae:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 80064b2:	e762      	b.n	800637a <SD_PowerON+0x1a>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80064b4:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 80064b8:	e75f      	b.n	800637a <SD_PowerON+0x1a>
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80064ba:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 80064be:	e75c      	b.n	800637a <SD_PowerON+0x1a>
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80064c0:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 80064c4:	e759      	b.n	800637a <SD_PowerON+0x1a>
 80064c6:	bf00      	nop
 80064c8:	c1100000 	.word	0xc1100000

080064cc <HAL_SD_GetCardCSD>:
{
 80064cc:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80064ce:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80064d0:	0f9b      	lsrs	r3, r3, #30
 80064d2:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80064d4:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80064d6:	f3c3 6383 	ubfx	r3, r3, #26, #4
 80064da:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80064dc:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
 80064e0:	f003 0303 	and.w	r3, r3, #3
 80064e4:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80064e6:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 80064ea:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80064ec:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 80064f0:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80064f2:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80064f6:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80064f8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80064fa:	0d1b      	lsrs	r3, r3, #20
 80064fc:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80064fe:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
 8006502:	f003 030f 	and.w	r3, r3, #15
 8006506:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006508:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800650a:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 800650e:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006510:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006512:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8006516:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006518:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800651a:	f3c3 3340 	ubfx	r3, r3, #13, #1
 800651e:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006520:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006522:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006526:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006528:	2300      	movs	r3, #0
 800652a:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800652c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800652e:	2b00      	cmp	r3, #0
 8006530:	f040 8088 	bne.w	8006644 <HAL_SD_GetCardCSD+0x178>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006534:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8006536:	f640 73fc 	movw	r3, #4092	; 0xffc
 800653a:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 800653e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8006540:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8006544:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006546:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006548:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 800654c:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800654e:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006558:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800655a:	f3c3 5342 	ubfx	r3, r3, #21, #3
 800655e:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006560:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006562:	f3c3 4382 	ubfx	r3, r3, #18, #3
 8006566:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006568:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800656a:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 800656e:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006570:	690b      	ldr	r3, [r1, #16]
 8006572:	3301      	adds	r3, #1
 8006574:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006576:	7e0a      	ldrb	r2, [r1, #24]
 8006578:	f002 0207 	and.w	r2, r2, #7
 800657c:	3202      	adds	r2, #2
 800657e:	fa03 f202 	lsl.w	r2, r3, r2
 8006582:	64c2      	str	r2, [r0, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006584:	7a0b      	ldrb	r3, [r1, #8]
 8006586:	f003 040f 	and.w	r4, r3, #15
 800658a:	2301      	movs	r3, #1
 800658c:	40a3      	lsls	r3, r4
 800658e:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006590:	0a5b      	lsrs	r3, r3, #9
 8006592:	fb03 f302 	mul.w	r3, r3, r2
 8006596:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8006598:	f44f 7300 	mov.w	r3, #512	; 0x200
 800659c:	6583      	str	r3, [r0, #88]	; 0x58
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800659e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80065a0:	f3c3 3380 	ubfx	r3, r3, #14, #1
 80065a4:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80065a6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80065a8:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 80065ac:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80065ae:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80065b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065b4:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80065b6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80065b8:	0fdb      	lsrs	r3, r3, #31
 80065ba:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80065bc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80065be:	f3c3 7341 	ubfx	r3, r3, #29, #2
 80065c2:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80065c4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80065c6:	f3c3 6382 	ubfx	r3, r3, #26, #3
 80065ca:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80065cc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80065ce:	f3c3 5383 	ubfx	r3, r3, #22, #4
 80065d2:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80065d4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80065d6:	f3c3 5340 	ubfx	r3, r3, #21, #1
 80065da:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 80065de:	2300      	movs	r3, #0
 80065e0:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80065e4:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 80065e8:	f002 0201 	and.w	r2, r2, #1
 80065ec:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80065f0:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80065f2:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80065f6:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80065fa:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80065fc:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8006600:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006604:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006606:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800660a:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800660e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006610:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8006614:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006618:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800661a:	f3c2 2281 	ubfx	r2, r2, #10, #2
 800661e:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006622:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006624:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8006628:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800662c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800662e:	f3c2 0246 	ubfx	r2, r2, #1, #7
 8006632:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8006636:	2201      	movs	r2, #1
 8006638:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 800663c:	4618      	mov	r0, r3
}
 800663e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006642:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006644:	2b01      	cmp	r3, #1
 8006646:	d00b      	beq.n	8006660 <HAL_SD_GetCardCSD+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006648:	6803      	ldr	r3, [r0, #0]
 800664a:	4a0e      	ldr	r2, [pc, #56]	; (8006684 <HAL_SD_GetCardCSD+0x1b8>)
 800664c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800664e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006654:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006656:	2301      	movs	r3, #1
 8006658:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 800665c:	4618      	mov	r0, r3
 800665e:	e7ee      	b.n	800663e <HAL_SD_GetCardCSD+0x172>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006660:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006662:	041b      	lsls	r3, r3, #16
 8006664:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006668:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 800666c:	4313      	orrs	r3, r2
 800666e:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006670:	690b      	ldr	r3, [r1, #16]
 8006672:	3301      	adds	r3, #1
 8006674:	029b      	lsls	r3, r3, #10
 8006676:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006678:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800667a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800667e:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006680:	6583      	str	r3, [r0, #88]	; 0x58
 8006682:	e78c      	b.n	800659e <HAL_SD_GetCardCSD+0xd2>
 8006684:	1fe00fff 	.word	0x1fe00fff

08006688 <SD_InitCard>:
{
 8006688:	b510      	push	{r4, lr}
 800668a:	b08c      	sub	sp, #48	; 0x30
 800668c:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 800668e:	2301      	movs	r3, #1
 8006690:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006694:	6800      	ldr	r0, [r0, #0]
 8006696:	f001 f8f1 	bl	800787c <SDMMC_GetPowerState>
 800669a:	2800      	cmp	r0, #0
 800669c:	d05c      	beq.n	8006758 <SD_InitCard+0xd0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800669e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	d136      	bne.n	8006712 <SD_InitCard+0x8a>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80066a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	d14d      	bne.n	8006746 <SD_InitCard+0xbe>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80066aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80066ac:	2b03      	cmp	r3, #3
 80066ae:	d01d      	beq.n	80066ec <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 80066b0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80066b4:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80066b6:	0409      	lsls	r1, r1, #16
 80066b8:	6820      	ldr	r0, [r4, #0]
 80066ba:	f001 fb78 	bl	8007dae <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80066be:	4603      	mov	r3, r0
 80066c0:	2800      	cmp	r0, #0
 80066c2:	d14b      	bne.n	800675c <SD_InitCard+0xd4>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80066c4:	2100      	movs	r1, #0
 80066c6:	6820      	ldr	r0, [r4, #0]
 80066c8:	f001 f8f1 	bl	80078ae <SDMMC_GetResponse>
 80066cc:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80066ce:	2104      	movs	r1, #4
 80066d0:	6820      	ldr	r0, [r4, #0]
 80066d2:	f001 f8ec 	bl	80078ae <SDMMC_GetResponse>
 80066d6:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80066d8:	2108      	movs	r1, #8
 80066da:	6820      	ldr	r0, [r4, #0]
 80066dc:	f001 f8e7 	bl	80078ae <SDMMC_GetResponse>
 80066e0:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80066e2:	210c      	movs	r1, #12
 80066e4:	6820      	ldr	r0, [r4, #0]
 80066e6:	f001 f8e2 	bl	80078ae <SDMMC_GetResponse>
 80066ea:	66e0      	str	r0, [r4, #108]	; 0x6c
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80066ec:	2104      	movs	r1, #4
 80066ee:	6820      	ldr	r0, [r4, #0]
 80066f0:	f001 f8dd 	bl	80078ae <SDMMC_GetResponse>
 80066f4:	0d00      	lsrs	r0, r0, #20
 80066f6:	6460      	str	r0, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80066f8:	a901      	add	r1, sp, #4
 80066fa:	4620      	mov	r0, r4
 80066fc:	f7ff fee6 	bl	80064cc <HAL_SD_GetCardCSD>
 8006700:	bb78      	cbnz	r0, 8006762 <SD_InitCard+0xda>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006702:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006704:	0412      	lsls	r2, r2, #16
 8006706:	2300      	movs	r3, #0
 8006708:	6820      	ldr	r0, [r4, #0]
 800670a:	f001 fa95 	bl	8007c38 <SDMMC_CmdSelDesel>
 800670e:	4603      	mov	r3, r0
 8006710:	e024      	b.n	800675c <SD_InitCard+0xd4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006712:	6820      	ldr	r0, [r4, #0]
 8006714:	f001 fb35 	bl	8007d82 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006718:	4603      	mov	r3, r0
 800671a:	b9f8      	cbnz	r0, 800675c <SD_InitCard+0xd4>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800671c:	2100      	movs	r1, #0
 800671e:	6820      	ldr	r0, [r4, #0]
 8006720:	f001 f8c5 	bl	80078ae <SDMMC_GetResponse>
 8006724:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006726:	2104      	movs	r1, #4
 8006728:	6820      	ldr	r0, [r4, #0]
 800672a:	f001 f8c0 	bl	80078ae <SDMMC_GetResponse>
 800672e:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006730:	2108      	movs	r1, #8
 8006732:	6820      	ldr	r0, [r4, #0]
 8006734:	f001 f8bb 	bl	80078ae <SDMMC_GetResponse>
 8006738:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800673a:	210c      	movs	r1, #12
 800673c:	6820      	ldr	r0, [r4, #0]
 800673e:	f001 f8b6 	bl	80078ae <SDMMC_GetResponse>
 8006742:	67e0      	str	r0, [r4, #124]	; 0x7c
 8006744:	e7ae      	b.n	80066a4 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006746:	f10d 0102 	add.w	r1, sp, #2
 800674a:	6820      	ldr	r0, [r4, #0]
 800674c:	f001 fb45 	bl	8007dda <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006750:	4603      	mov	r3, r0
 8006752:	2800      	cmp	r0, #0
 8006754:	d0a9      	beq.n	80066aa <SD_InitCard+0x22>
 8006756:	e001      	b.n	800675c <SD_InitCard+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006758:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
}
 800675c:	4618      	mov	r0, r3
 800675e:	b00c      	add	sp, #48	; 0x30
 8006760:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006762:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006766:	e7f9      	b.n	800675c <SD_InitCard+0xd4>

08006768 <HAL_SD_InitCard>:
{
 8006768:	b510      	push	{r4, lr}
 800676a:	b08a      	sub	sp, #40	; 0x28
 800676c:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800676e:	2300      	movs	r3, #0
 8006770:	9304      	str	r3, [sp, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006772:	9305      	str	r3, [sp, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006774:	9306      	str	r3, [sp, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006776:	9307      	str	r3, [sp, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006778:	23fa      	movs	r3, #250	; 0xfa
 800677a:	9308      	str	r3, [sp, #32]
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800677c:	6983      	ldr	r3, [r0, #24]
 800677e:	2b02      	cmp	r3, #2
 8006780:	d028      	beq.n	80067d4 <HAL_SD_InitCard+0x6c>
  (void)SDMMC_Init(hsd->Instance, Init);
 8006782:	ab0a      	add	r3, sp, #40	; 0x28
 8006784:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8006788:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800678c:	ab04      	add	r3, sp, #16
 800678e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006790:	6820      	ldr	r0, [r4, #0]
 8006792:	f001 f84b 	bl	800782c <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006796:	6820      	ldr	r0, [r4, #0]
 8006798:	f001 f86a 	bl	8007870 <SDMMC_PowerState_ON>
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 800679c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80067a0:	f7fe fb60 	bl	8004e64 <HAL_RCCEx_GetPeriphCLKFreq>
 80067a4:	4b20      	ldr	r3, [pc, #128]	; (8006828 <HAL_SD_InitCard+0xc0>)
 80067a6:	fba3 3000 	umull	r3, r0, r3, r0
  if(sdmmc_clk != 0U)
 80067aa:	0940      	lsrs	r0, r0, #5
 80067ac:	d018      	beq.n	80067e0 <HAL_SD_InitCard+0x78>
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80067ae:	4b1f      	ldr	r3, [pc, #124]	; (800682c <HAL_SD_InitCard+0xc4>)
 80067b0:	fbb3 f0f0 	udiv	r0, r3, r0
 80067b4:	3001      	adds	r0, #1
 80067b6:	f7f9 fdf5 	bl	80003a4 <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 80067ba:	4620      	mov	r0, r4
 80067bc:	f7ff fdd0 	bl	8006360 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 80067c0:	4602      	mov	r2, r0
 80067c2:	b188      	cbz	r0, 80067e8 <HAL_SD_InitCard+0x80>
    hsd->State = HAL_SD_STATE_READY;
 80067c4:	2001      	movs	r0, #1
 80067c6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80067ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80067cc:	4313      	orrs	r3, r2
 80067ce:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80067d0:	b00a      	add	sp, #40	; 0x28
 80067d2:	bd10      	pop	{r4, pc}
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80067d4:	6802      	ldr	r2, [r0, #0]
 80067d6:	6813      	ldr	r3, [r2, #0]
 80067d8:	f043 0310 	orr.w	r3, r3, #16
 80067dc:	6013      	str	r3, [r2, #0]
 80067de:	e7d0      	b.n	8006782 <HAL_SD_InitCard+0x1a>
    HAL_Delay(2U);
 80067e0:	2002      	movs	r0, #2
 80067e2:	f7f9 fddf 	bl	80003a4 <HAL_Delay>
 80067e6:	e7e8      	b.n	80067ba <HAL_SD_InitCard+0x52>
  errorstate = SD_InitCard(hsd);
 80067e8:	4620      	mov	r0, r4
 80067ea:	f7ff ff4d 	bl	8006688 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 80067ee:	4602      	mov	r2, r0
 80067f0:	b130      	cbz	r0, 8006800 <HAL_SD_InitCard+0x98>
    hsd->State = HAL_SD_STATE_READY;
 80067f2:	2001      	movs	r0, #1
 80067f4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80067f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80067fa:	4313      	orrs	r3, r2
 80067fc:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80067fe:	e7e7      	b.n	80067d0 <HAL_SD_InitCard+0x68>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006804:	6820      	ldr	r0, [r4, #0]
 8006806:	f001 f96d 	bl	8007ae4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800680a:	4603      	mov	r3, r0
 800680c:	b148      	cbz	r0, 8006822 <HAL_SD_InitCard+0xba>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800680e:	6822      	ldr	r2, [r4, #0]
 8006810:	4907      	ldr	r1, [pc, #28]	; (8006830 <HAL_SD_InitCard+0xc8>)
 8006812:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006814:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006816:	4318      	orrs	r0, r3
 8006818:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800681a:	2001      	movs	r0, #1
 800681c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    return HAL_ERROR;
 8006820:	e7d6      	b.n	80067d0 <HAL_SD_InitCard+0x68>
  return HAL_OK;
 8006822:	2000      	movs	r0, #0
 8006824:	e7d4      	b.n	80067d0 <HAL_SD_InitCard+0x68>
 8006826:	bf00      	nop
 8006828:	10624dd3 	.word	0x10624dd3
 800682c:	00012110 	.word	0x00012110
 8006830:	1fe00fff 	.word	0x1fe00fff

08006834 <HAL_SD_GetCardStatus>:
{
 8006834:	b530      	push	{r4, r5, lr}
 8006836:	b091      	sub	sp, #68	; 0x44
 8006838:	4605      	mov	r5, r0
 800683a:	460c      	mov	r4, r1
  errorstate = SD_SendSDStatus(hsd, sd_status);
 800683c:	4669      	mov	r1, sp
 800683e:	f7ff fa0f 	bl	8005c60 <SD_SendSDStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006842:	b1c8      	cbz	r0, 8006878 <HAL_SD_GetCardStatus+0x44>
 8006844:	4603      	mov	r3, r0
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006846:	682a      	ldr	r2, [r5, #0]
 8006848:	4929      	ldr	r1, [pc, #164]	; (80068f0 <HAL_SD_GetCardStatus+0xbc>)
 800684a:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800684c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800684e:	4318      	orrs	r0, r3
 8006850:	63a8      	str	r0, [r5, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006852:	2401      	movs	r4, #1
 8006854:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006858:	f44f 7100 	mov.w	r1, #512	; 0x200
 800685c:	6828      	ldr	r0, [r5, #0]
 800685e:	f001 f941 	bl	8007ae4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006862:	b130      	cbz	r0, 8006872 <HAL_SD_GetCardStatus+0x3e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006864:	682a      	ldr	r2, [r5, #0]
 8006866:	4922      	ldr	r1, [pc, #136]	; (80068f0 <HAL_SD_GetCardStatus+0xbc>)
 8006868:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800686a:	63a8      	str	r0, [r5, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800686c:	2401      	movs	r4, #1
 800686e:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
}
 8006872:	4620      	mov	r0, r4
 8006874:	b011      	add	sp, #68	; 0x44
 8006876:	bd30      	pop	{r4, r5, pc}
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006878:	9a00      	ldr	r2, [sp, #0]
 800687a:	f3c2 1381 	ubfx	r3, r2, #6, #2
 800687e:	7023      	strb	r3, [r4, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006880:	f3c2 1340 	ubfx	r3, r2, #5, #1
 8006884:	7063      	strb	r3, [r4, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006886:	0a13      	lsrs	r3, r2, #8
 8006888:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800688c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8006890:	b29b      	uxth	r3, r3
 8006892:	8063      	strh	r3, [r4, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006894:	9a01      	ldr	r2, [sp, #4]
 8006896:	0213      	lsls	r3, r2, #8
 8006898:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800689c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80068a0:	0a11      	lsrs	r1, r2, #8
 80068a2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80068a6:	430b      	orrs	r3, r1
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80068a8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80068ac:	6063      	str	r3, [r4, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80068ae:	9b02      	ldr	r3, [sp, #8]
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	7222      	strb	r2, [r4, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80068b4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80068b8:	7262      	strb	r2, [r4, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80068ba:	f3c3 5203 	ubfx	r2, r3, #20, #4
 80068be:	72a2      	strb	r2, [r4, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80068c0:	0c1b      	lsrs	r3, r3, #16
 80068c2:	9a03      	ldr	r2, [sp, #12]
 80068c4:	b2d1      	uxtb	r1, r2
 80068c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80068ca:	430b      	orrs	r3, r1
 80068cc:	81a3      	strh	r3, [r4, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80068ce:	f3c2 2385 	ubfx	r3, r2, #10, #6
 80068d2:	73a3      	strb	r3, [r4, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80068d4:	f3c2 2301 	ubfx	r3, r2, #8, #2
 80068d8:	73e3      	strb	r3, [r4, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80068da:	f3c2 1303 	ubfx	r3, r2, #4, #4
 80068de:	7423      	strb	r3, [r4, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80068e0:	f002 020f 	and.w	r2, r2, #15
 80068e4:	7462      	strb	r2, [r4, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80068e6:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80068ea:	74a3      	strb	r3, [r4, #18]
  HAL_StatusTypeDef status = HAL_OK;
 80068ec:	2400      	movs	r4, #0
 80068ee:	e7b3      	b.n	8006858 <HAL_SD_GetCardStatus+0x24>
 80068f0:	1fe00fff 	.word	0x1fe00fff

080068f4 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80068f4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80068f6:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80068f8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80068fa:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80068fc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80068fe:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006900:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006902:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006904:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006906:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006908:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800690a:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800690c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800690e:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006910:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006912:	61cb      	str	r3, [r1, #28]
}
 8006914:	2000      	movs	r0, #0
 8006916:	4770      	bx	lr

08006918 <HAL_SD_ConfigWideBusOperation>:
{
 8006918:	b530      	push	{r4, r5, lr}
 800691a:	b08b      	sub	sp, #44	; 0x2c
 800691c:	4604      	mov	r4, r0
 800691e:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8006920:	2303      	movs	r3, #3
 8006922:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006926:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006928:	2b03      	cmp	r3, #3
 800692a:	d01c      	beq.n	8006966 <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800692c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006930:	d008      	beq.n	8006944 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006932:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8006936:	d00a      	beq.n	800694e <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006938:	b179      	cbz	r1, 800695a <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800693a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800693c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006940:	6383      	str	r3, [r0, #56]	; 0x38
 8006942:	e014      	b.n	800696e <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006944:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800694a:	6383      	str	r3, [r0, #56]	; 0x38
 800694c:	e00f      	b.n	800696e <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 800694e:	f7ff fa99 	bl	8005e84 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8006952:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006954:	4318      	orrs	r0, r3
 8006956:	63a0      	str	r0, [r4, #56]	; 0x38
 8006958:	e009      	b.n	800696e <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 800695a:	f7ff fabe 	bl	8005eda <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 800695e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006960:	4318      	orrs	r0, r3
 8006962:	63a0      	str	r0, [r4, #56]	; 0x38
 8006964:	e003      	b.n	800696e <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006966:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800696c:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800696e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006970:	b1bb      	cbz	r3, 80069a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	4a1e      	ldr	r2, [pc, #120]	; (80069f0 <HAL_SD_ConfigWideBusOperation+0xd8>)
 8006976:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006978:	2501      	movs	r5, #1
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800697a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800697e:	6820      	ldr	r0, [r4, #0]
 8006980:	f001 f8b0 	bl	8007ae4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006984:	4603      	mov	r3, r0
 8006986:	b130      	cbz	r0, 8006996 <HAL_SD_ConfigWideBusOperation+0x7e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006988:	6822      	ldr	r2, [r4, #0]
 800698a:	4919      	ldr	r1, [pc, #100]	; (80069f0 <HAL_SD_ConfigWideBusOperation+0xd8>)
 800698c:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800698e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006990:	4318      	orrs	r0, r3
 8006992:	63a0      	str	r0, [r4, #56]	; 0x38
    status = HAL_ERROR;
 8006994:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 8006996:	2301      	movs	r3, #1
 8006998:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800699c:	4628      	mov	r0, r5
 800699e:	b00b      	add	sp, #44	; 0x2c
 80069a0:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80069a2:	6863      	ldr	r3, [r4, #4]
 80069a4:	9304      	str	r3, [sp, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80069a6:	68a3      	ldr	r3, [r4, #8]
 80069a8:	9305      	str	r3, [sp, #20]
    Init.BusWide             = WideMode;
 80069aa:	9506      	str	r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80069ac:	6923      	ldr	r3, [r4, #16]
 80069ae:	9307      	str	r3, [sp, #28]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 80069b0:	6963      	ldr	r3, [r4, #20]
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	d90c      	bls.n	80069d0 <HAL_SD_ConfigWideBusOperation+0xb8>
      Init.ClockDiv = hsd->Init.ClockDiv;
 80069b6:	9308      	str	r3, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 80069b8:	ab0a      	add	r3, sp, #40	; 0x28
 80069ba:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80069be:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80069c2:	ab04      	add	r3, sp, #16
 80069c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069c6:	6820      	ldr	r0, [r4, #0]
 80069c8:	f000 ff30 	bl	800782c <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 80069cc:	2500      	movs	r5, #0
 80069ce:	e7d4      	b.n	800697a <HAL_SD_ConfigWideBusOperation+0x62>
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80069d0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80069d2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80069d6:	d005      	beq.n	80069e4 <HAL_SD_ConfigWideBusOperation+0xcc>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80069d8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80069dc:	d004      	beq.n	80069e8 <HAL_SD_ConfigWideBusOperation+0xd0>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 80069de:	2304      	movs	r3, #4
 80069e0:	9308      	str	r3, [sp, #32]
 80069e2:	e7e9      	b.n	80069b8 <HAL_SD_ConfigWideBusOperation+0xa0>
      Init.ClockDiv = hsd->Init.ClockDiv;
 80069e4:	9308      	str	r3, [sp, #32]
 80069e6:	e7e7      	b.n	80069b8 <HAL_SD_ConfigWideBusOperation+0xa0>
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 80069e8:	2302      	movs	r3, #2
 80069ea:	9308      	str	r3, [sp, #32]
 80069ec:	e7e4      	b.n	80069b8 <HAL_SD_ConfigWideBusOperation+0xa0>
 80069ee:	bf00      	nop
 80069f0:	1fe00fff 	.word	0x1fe00fff

080069f4 <HAL_SD_GetCardState>:
{
 80069f4:	b510      	push	{r4, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 80069fa:	a902      	add	r1, sp, #8
 80069fc:	2300      	movs	r3, #0
 80069fe:	f841 3d04 	str.w	r3, [r1, #-4]!
  errorstate = SD_SendStatus(hsd, &resp1);
 8006a02:	f7ff fa95 	bl	8005f30 <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a06:	b118      	cbz	r0, 8006a10 <HAL_SD_GetCardState+0x1c>
 8006a08:	4603      	mov	r3, r0
    hsd->ErrorCode |= errorstate;
 8006a0a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006a0c:	4318      	orrs	r0, r3
 8006a0e:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8006a10:	9801      	ldr	r0, [sp, #4]
 8006a12:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8006a16:	b002      	add	sp, #8
 8006a18:	bd10      	pop	{r4, pc}

08006a1a <HAL_SD_Init>:
{
 8006a1a:	b570      	push	{r4, r5, r6, lr}
 8006a1c:	b086      	sub	sp, #24
  if(hsd == NULL)
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	d058      	beq.n	8006ad4 <HAL_SD_Init+0xba>
 8006a22:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 8006a24:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8006a28:	b93b      	cbnz	r3, 8006a3a <HAL_SD_Init+0x20>
    hsd->Lock = HAL_UNLOCKED;
 8006a2a:	7703      	strb	r3, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8006a2c:	6983      	ldr	r3, [r0, #24]
 8006a2e:	b90b      	cbnz	r3, 8006a34 <HAL_SD_Init+0x1a>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8006a30:	2302      	movs	r3, #2
 8006a32:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 8006a34:	4620      	mov	r0, r4
 8006a36:	f004 fcc9 	bl	800b3cc <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006a40:	4620      	mov	r0, r4
 8006a42:	f7ff fe91 	bl	8006768 <HAL_SD_InitCard>
 8006a46:	b118      	cbz	r0, 8006a50 <HAL_SD_Init+0x36>
    return HAL_ERROR;
 8006a48:	2501      	movs	r5, #1
}
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	b006      	add	sp, #24
 8006a4e:	bd70      	pop	{r4, r5, r6, pc}
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006a50:	a901      	add	r1, sp, #4
 8006a52:	4620      	mov	r0, r4
 8006a54:	f7ff feee 	bl	8006834 <HAL_SD_GetCardStatus>
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	d13d      	bne.n	8006ad8 <HAL_SD_Init+0xbe>
  speedgrade = CardStatus.UhsSpeedGrade;
 8006a5c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8006a60:	b2da      	uxtb	r2, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006a62:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8006a66:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006a68:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006a6a:	2901      	cmp	r1, #1
 8006a6c:	d00b      	beq.n	8006a86 <HAL_SD_Init+0x6c>
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006a6e:	2901      	cmp	r1, #1
 8006a70:	d00f      	beq.n	8006a92 <HAL_SD_Init+0x78>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006a72:	2300      	movs	r3, #0
 8006a74:	65e3      	str	r3, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006a76:	68e1      	ldr	r1, [r4, #12]
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f7ff ff4d 	bl	8006918 <HAL_SD_ConfigWideBusOperation>
 8006a7e:	4605      	mov	r5, r0
 8006a80:	b158      	cbz	r0, 8006a9a <HAL_SD_Init+0x80>
    return HAL_ERROR;
 8006a82:	2501      	movs	r5, #1
 8006a84:	e7e1      	b.n	8006a4a <HAL_SD_Init+0x30>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006a86:	4313      	orrs	r3, r2
 8006a88:	d0f1      	beq.n	8006a6e <HAL_SD_Init+0x54>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006a8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a8e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8006a90:	e7f1      	b.n	8006a76 <HAL_SD_Init+0x5c>
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006a92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a96:	65e3      	str	r3, [r4, #92]	; 0x5c
 8006a98:	e7ed      	b.n	8006a76 <HAL_SD_Init+0x5c>
  tickstart = HAL_GetTick();
 8006a9a:	f7f9 fc7d 	bl	8000398 <HAL_GetTick>
 8006a9e:	4606      	mov	r6, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f7ff ffa7 	bl	80069f4 <HAL_SD_GetCardState>
 8006aa6:	2804      	cmp	r0, #4
 8006aa8:	d00d      	beq.n	8006ac6 <HAL_SD_Init+0xac>
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8006aaa:	f7f9 fc75 	bl	8000398 <HAL_GetTick>
 8006aae:	1b80      	subs	r0, r0, r6
 8006ab0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006ab4:	d1f4      	bne.n	8006aa0 <HAL_SD_Init+0x86>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006ab6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006aba:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8006abc:	2301      	movs	r3, #1
 8006abe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 8006ac2:	2503      	movs	r5, #3
 8006ac4:	e7c1      	b.n	8006a4a <HAL_SD_Init+0x30>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8006aca:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8006acc:	2301      	movs	r3, #1
 8006ace:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8006ad2:	e7ba      	b.n	8006a4a <HAL_SD_Init+0x30>
    return HAL_ERROR;
 8006ad4:	2501      	movs	r5, #1
 8006ad6:	e7b8      	b.n	8006a4a <HAL_SD_Init+0x30>
    return HAL_ERROR;
 8006ad8:	2501      	movs	r5, #1
 8006ada:	e7b6      	b.n	8006a4a <HAL_SD_Init+0x30>

08006adc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8006adc:	4770      	bx	lr

08006ade <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8006ade:	4770      	bx	lr

08006ae0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8006ae0:	4770      	bx	lr

08006ae2 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8006ae2:	4770      	bx	lr

08006ae4 <HAL_SD_IRQHandler>:
{
 8006ae4:	b538      	push	{r3, r4, r5, lr}
 8006ae6:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 8006ae8:	6b05      	ldr	r5, [r0, #48]	; 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006aea:	6803      	ldr	r3, [r0, #0]
 8006aec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006aee:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8006af2:	d002      	beq.n	8006afa <HAL_SD_IRQHandler+0x16>
 8006af4:	f015 0f08 	tst.w	r5, #8
 8006af8:	d12a      	bne.n	8006b50 <HAL_SD_IRQHandler+0x6c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006afc:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006b00:	d067      	beq.n	8006bd2 <HAL_SD_IRQHandler+0xee>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006b02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b06:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8006b08:	6822      	ldr	r2, [r4, #0]
 8006b0a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006b0c:	4b7e      	ldr	r3, [pc, #504]	; (8006d08 <HAL_SD_IRQHandler+0x224>)
 8006b0e:	400b      	ands	r3, r1
 8006b10:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006b12:	6822      	ldr	r2, [r4, #0]
 8006b14:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b1a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006b1c:	6822      	ldr	r2, [r4, #0]
 8006b1e:	68d3      	ldr	r3, [r2, #12]
 8006b20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b24:	60d3      	str	r3, [r2, #12]
    if((context & SD_CONTEXT_IT) != 0U)
 8006b26:	f015 0f08 	tst.w	r5, #8
 8006b2a:	d025      	beq.n	8006b78 <HAL_SD_IRQHandler+0x94>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006b2c:	f015 0f22 	tst.w	r5, #34	; 0x22
 8006b30:	d111      	bne.n	8006b56 <HAL_SD_IRQHandler+0x72>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	4a75      	ldr	r2, [pc, #468]	; (8006d0c <HAL_SD_IRQHandler+0x228>)
 8006b36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006b42:	f015 0f03 	tst.w	r5, #3
 8006b46:	d013      	beq.n	8006b70 <HAL_SD_IRQHandler+0x8c>
        HAL_SD_RxCpltCallback(hsd);
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f003 fa47 	bl	8009fdc <HAL_SD_RxCpltCallback>
 8006b4e:	e001      	b.n	8006b54 <HAL_SD_IRQHandler+0x70>
    SD_Read_IT(hsd);
 8006b50:	f7ff f842 	bl	8005bd8 <SD_Read_IT>
}
 8006b54:	bd38      	pop	{r3, r4, r5, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006b56:	6820      	ldr	r0, [r4, #0]
 8006b58:	f001 f842 	bl	8007be0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	d0e7      	beq.n	8006b32 <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
 8006b62:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006b64:	4313      	orrs	r3, r2
 8006b66:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006b68:	4620      	mov	r0, r4
 8006b6a:	f7ff fbf7 	bl	800635c <HAL_SD_ErrorCallback>
 8006b6e:	e7e0      	b.n	8006b32 <HAL_SD_IRQHandler+0x4e>
        HAL_SD_TxCpltCallback(hsd);
 8006b70:	4620      	mov	r0, r4
 8006b72:	f003 fa2e 	bl	8009fd2 <HAL_SD_TxCpltCallback>
 8006b76:	e7ed      	b.n	8006b54 <HAL_SD_IRQHandler+0x70>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006b78:	f015 0f80 	tst.w	r5, #128	; 0x80
 8006b7c:	d0ea      	beq.n	8006b54 <HAL_SD_IRQHandler+0x70>
      hsd->Instance->DLEN = 0;
 8006b7e:	6822      	ldr	r2, [r4, #0]
 8006b80:	2300      	movs	r3, #0
 8006b82:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006b84:	6822      	ldr	r2, [r4, #0]
 8006b86:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006b88:	6822      	ldr	r2, [r4, #0]
 8006b8a:	6513      	str	r3, [r2, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006b8c:	f015 0f22 	tst.w	r5, #34	; 0x22
 8006b90:	d10e      	bne.n	8006bb0 <HAL_SD_IRQHandler+0xcc>
      hsd->State = HAL_SD_STATE_READY;
 8006b92:	2301      	movs	r3, #1
 8006b94:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006b9c:	f015 0f30 	tst.w	r5, #48	; 0x30
 8006ba0:	d113      	bne.n	8006bca <HAL_SD_IRQHandler+0xe6>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006ba2:	f015 0f03 	tst.w	r5, #3
 8006ba6:	d0d5      	beq.n	8006b54 <HAL_SD_IRQHandler+0x70>
        HAL_SD_RxCpltCallback(hsd);
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f003 fa17 	bl	8009fdc <HAL_SD_RxCpltCallback>
 8006bae:	e7d1      	b.n	8006b54 <HAL_SD_IRQHandler+0x70>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006bb0:	6820      	ldr	r0, [r4, #0]
 8006bb2:	f001 f815 	bl	8007be0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d0ea      	beq.n	8006b92 <HAL_SD_IRQHandler+0xae>
          hsd->ErrorCode |= errorstate;
 8006bbc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	f7ff fbca 	bl	800635c <HAL_SD_ErrorCallback>
 8006bc8:	e7e3      	b.n	8006b92 <HAL_SD_IRQHandler+0xae>
        HAL_SD_TxCpltCallback(hsd);
 8006bca:	4620      	mov	r0, r4
 8006bcc:	f003 fa01 	bl	8009fd2 <HAL_SD_TxCpltCallback>
 8006bd0:	e7e7      	b.n	8006ba2 <HAL_SD_IRQHandler+0xbe>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006bd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bd4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8006bd8:	d002      	beq.n	8006be0 <HAL_SD_IRQHandler+0xfc>
 8006bda:	f015 0f08 	tst.w	r5, #8
 8006bde:	d162      	bne.n	8006ca6 <HAL_SD_IRQHandler+0x1c2>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006be2:	f012 0f3a 	tst.w	r2, #58	; 0x3a
 8006be6:	d06b      	beq.n	8006cc0 <HAL_SD_IRQHandler+0x1dc>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bea:	f012 0f02 	tst.w	r2, #2
 8006bee:	d003      	beq.n	8006bf8 <HAL_SD_IRQHandler+0x114>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006bf0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006bf2:	f042 0202 	orr.w	r2, r2, #2
 8006bf6:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bfa:	f012 0f08 	tst.w	r2, #8
 8006bfe:	d003      	beq.n	8006c08 <HAL_SD_IRQHandler+0x124>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006c00:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006c02:	f042 0208 	orr.w	r2, r2, #8
 8006c06:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c0a:	f012 0f20 	tst.w	r2, #32
 8006c0e:	d003      	beq.n	8006c18 <HAL_SD_IRQHandler+0x134>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006c10:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006c12:	f042 0220 	orr.w	r2, r2, #32
 8006c16:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c1a:	f012 0f10 	tst.w	r2, #16
 8006c1e:	d003      	beq.n	8006c28 <HAL_SD_IRQHandler+0x144>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006c20:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006c22:	f042 0210 	orr.w	r2, r2, #16
 8006c26:	63a2      	str	r2, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006c28:	4a38      	ldr	r2, [pc, #224]	; (8006d0c <HAL_SD_IRQHandler+0x228>)
 8006c2a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006c2c:	6822      	ldr	r2, [r4, #0]
 8006c2e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006c30:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8006c34:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006c36:	6822      	ldr	r2, [r4, #0]
 8006c38:	68d3      	ldr	r3, [r2, #12]
 8006c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c3e:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8006c40:	6822      	ldr	r2, [r4, #0]
 8006c42:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006c44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006c48:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8006c4a:	6822      	ldr	r2, [r4, #0]
 8006c4c:	68d3      	ldr	r3, [r2, #12]
 8006c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c52:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006c54:	6820      	ldr	r0, [r4, #0]
 8006c56:	f000 ffc3 	bl	8007be0 <SDMMC_CmdStopTransfer>
 8006c5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006c5c:	4318      	orrs	r0, r3
 8006c5e:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006c60:	6822      	ldr	r2, [r4, #0]
 8006c62:	68d3      	ldr	r3, [r2, #12]
 8006c64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c68:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c70:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006c72:	f015 0f08 	tst.w	r5, #8
 8006c76:	d11a      	bne.n	8006cae <HAL_SD_IRQHandler+0x1ca>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006c78:	f015 0f80 	tst.w	r5, #128	; 0x80
 8006c7c:	f43f af6a 	beq.w	8006b54 <HAL_SD_IRQHandler+0x70>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006c80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f43f af66 	beq.w	8006b54 <HAL_SD_IRQHandler+0x70>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006c88:	6822      	ldr	r2, [r4, #0]
 8006c8a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c90:	63d3      	str	r3, [r2, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	2200      	movs	r2, #0
 8006c96:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f7ff fb5c 	bl	800635c <HAL_SD_ErrorCallback>
 8006ca4:	e756      	b.n	8006b54 <HAL_SD_IRQHandler+0x70>
    SD_Write_IT(hsd);
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	f7fe ffb3 	bl	8005c12 <SD_Write_IT>
 8006cac:	e752      	b.n	8006b54 <HAL_SD_IRQHandler+0x70>
      hsd->State = HAL_SD_STATE_READY;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f7ff fb4f 	bl	800635c <HAL_SD_ErrorCallback>
 8006cbe:	e749      	b.n	8006b54 <HAL_SD_IRQHandler+0x70>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cc2:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8006cc6:	f43f af45 	beq.w	8006b54 <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cce:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd4:	f013 0f04 	tst.w	r3, #4
 8006cd8:	d10a      	bne.n	8006cf0 <HAL_SD_IRQHandler+0x20c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006cda:	f015 0f20 	tst.w	r5, #32
 8006cde:	d003      	beq.n	8006ce8 <HAL_SD_IRQHandler+0x204>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	f7ff fefe 	bl	8006ae2 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 8006ce6:	e735      	b.n	8006b54 <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8006ce8:	4620      	mov	r0, r4
 8006cea:	f7ff fef8 	bl	8006ade <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 8006cee:	e731      	b.n	8006b54 <HAL_SD_IRQHandler+0x70>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006cf0:	f015 0f20 	tst.w	r5, #32
 8006cf4:	d103      	bne.n	8006cfe <HAL_SD_IRQHandler+0x21a>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	f7ff fef0 	bl	8006adc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8006cfc:	e72a      	b.n	8006b54 <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f7ff feee 	bl	8006ae0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 8006d04:	e726      	b.n	8006b54 <HAL_SD_IRQHandler+0x70>
 8006d06:	bf00      	nop
 8006d08:	ffff3ec5 	.word	0xffff3ec5
 8006d0c:	18000f3a 	.word	0x18000f3a

08006d10 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006d10:	b308      	cbz	r0, 8006d56 <HAL_SDRAM_Init+0x46>
{
 8006d12:	b538      	push	{r3, r4, r5, lr}
 8006d14:	4604      	mov	r4, r0
 8006d16:	460d      	mov	r5, r1
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006d18:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006d1c:	b1b3      	cbz	r3, 8006d4c <HAL_SDRAM_Init+0x3c>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006d1e:	2302      	movs	r3, #2
 8006d20:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006d24:	4621      	mov	r1, r4
 8006d26:	f851 0b04 	ldr.w	r0, [r1], #4
 8006d2a:	f000 fc2d 	bl	8007588 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006d2e:	6862      	ldr	r2, [r4, #4]
 8006d30:	4629      	mov	r1, r5
 8006d32:	6820      	ldr	r0, [r4, #0]
 8006d34:	f000 fc62 	bl	80075fc <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8006d38:	4a08      	ldr	r2, [pc, #32]	; (8006d5c <HAL_SDRAM_Init+0x4c>)
 8006d3a:	6813      	ldr	r3, [r2, #0]
 8006d3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d40:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006d42:	2301      	movs	r3, #1
 8006d44:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  return HAL_OK;
 8006d48:	2000      	movs	r0, #0
}
 8006d4a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8006d4c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8006d50:	f003 fafc 	bl	800a34c <HAL_SDRAM_MspInit>
 8006d54:	e7e3      	b.n	8006d1e <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8006d56:	2001      	movs	r0, #1
}
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	52004000 	.word	0x52004000

08006d60 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006d60:	b538      	push	{r3, r4, r5, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006d62:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006d66:	b2db      	uxtb	r3, r3
  
  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d01a      	beq.n	8006da2 <HAL_SDRAM_SendCommand+0x42>
  {
    return HAL_BUSY;
  }
  else if((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006d6c:	2b05      	cmp	r3, #5
 8006d6e:	bf18      	it	ne
 8006d70:	2b01      	cmpne	r3, #1
 8006d72:	d001      	beq.n	8006d78 <HAL_SDRAM_SendCommand+0x18>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 8006d74:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8006d76:	bd38      	pop	{r3, r4, r5, pc}
 8006d78:	460d      	mov	r5, r1
 8006d7a:	4604      	mov	r4, r0
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006d82:	6800      	ldr	r0, [r0, #0]
 8006d84:	f000 fc86 	bl	8007694 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006d88:	682b      	ldr	r3, [r5, #0]
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d004      	beq.n	8006d98 <HAL_SDRAM_SendCommand+0x38>
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8006d94:	2000      	movs	r0, #0
 8006d96:	e7ee      	b.n	8006d76 <HAL_SDRAM_SendCommand+0x16>
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006d98:	2305      	movs	r3, #5
 8006d9a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8006d9e:	2000      	movs	r0, #0
 8006da0:	e7e9      	b.n	8006d76 <HAL_SDRAM_SendCommand+0x16>
    return HAL_BUSY;
 8006da2:	2002      	movs	r0, #2
 8006da4:	e7e7      	b.n	8006d76 <HAL_SDRAM_SendCommand+0x16>

08006da6 <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006da6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d013      	beq.n	8006dd8 <HAL_SDRAM_ProgramRefreshRate+0x32>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006db0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d001      	beq.n	8006dbe <HAL_SDRAM_ProgramRefreshRate+0x18>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 8006dba:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8006dbc:	4770      	bx	lr
{
 8006dbe:	b510      	push	{r4, lr}
 8006dc0:	4604      	mov	r4, r0
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006dc8:	6800      	ldr	r0, [r0, #0]
 8006dca:	f000 fc75 	bl	80076b8 <FMC_SDRAM_ProgramRefreshRate>
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8006dd4:	2000      	movs	r0, #0
}
 8006dd6:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8006dd8:	2002      	movs	r0, #2
 8006dda:	4770      	bx	lr

08006ddc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006ddc:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 8006dde:	6802      	ldr	r2, [r0, #0]
 8006de0:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006de2:	6991      	ldr	r1, [r2, #24]
 8006de4:	f041 0108 	orr.w	r1, r1, #8
 8006de8:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006dea:	6801      	ldr	r1, [r0, #0]
 8006dec:	698a      	ldr	r2, [r1, #24]
 8006dee:	f042 0210 	orr.w	r2, r2, #16
 8006df2:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006df4:	6801      	ldr	r1, [r0, #0]
 8006df6:	680a      	ldr	r2, [r1, #0]
 8006df8:	f022 0201 	bic.w	r2, r2, #1
 8006dfc:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8006dfe:	6801      	ldr	r1, [r0, #0]
 8006e00:	690c      	ldr	r4, [r1, #16]
 8006e02:	4a29      	ldr	r2, [pc, #164]	; (8006ea8 <SPI_CloseTransfer+0xcc>)
 8006e04:	4022      	ands	r2, r4
 8006e06:	610a      	str	r2, [r1, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006e08:	6801      	ldr	r1, [r0, #0]
 8006e0a:	688a      	ldr	r2, [r1, #8]
 8006e0c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006e10:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e12:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8006e16:	b2d2      	uxtb	r2, r2
 8006e18:	2a04      	cmp	r2, #4
 8006e1a:	d00d      	beq.n	8006e38 <SPI_CloseTransfer+0x5c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006e1c:	f013 0f20 	tst.w	r3, #32
 8006e20:	d00a      	beq.n	8006e38 <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006e22:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006e26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e2a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006e2e:	6801      	ldr	r1, [r0, #0]
 8006e30:	698a      	ldr	r2, [r1, #24]
 8006e32:	f042 0220 	orr.w	r2, r2, #32
 8006e36:	618a      	str	r2, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006e38:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8006e3c:	b2d2      	uxtb	r2, r2
 8006e3e:	2a03      	cmp	r2, #3
 8006e40:	d00d      	beq.n	8006e5e <SPI_CloseTransfer+0x82>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006e42:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006e46:	d00a      	beq.n	8006e5e <SPI_CloseTransfer+0x82>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006e48:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006e4c:	f042 0204 	orr.w	r2, r2, #4
 8006e50:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e54:	6801      	ldr	r1, [r0, #0]
 8006e56:	698a      	ldr	r2, [r1, #24]
 8006e58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e5c:	618a      	str	r2, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006e5e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006e62:	d00a      	beq.n	8006e7a <SPI_CloseTransfer+0x9e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006e64:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006e68:	f042 0201 	orr.w	r2, r2, #1
 8006e6c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006e70:	6801      	ldr	r1, [r0, #0]
 8006e72:	698a      	ldr	r2, [r1, #24]
 8006e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e78:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006e7a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006e7e:	d00a      	beq.n	8006e96 <SPI_CloseTransfer+0xba>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006e80:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006e84:	f043 0308 	orr.w	r3, r3, #8
 8006e88:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006e8c:	6802      	ldr	r2, [r0, #0]
 8006e8e:	6993      	ldr	r3, [r2, #24]
 8006e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e94:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006e96:	2300      	movs	r3, #0
 8006e98:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006e9c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8006ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	fffffc90 	.word	0xfffffc90

08006eac <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006eac:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006eae:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006eb0:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006eb2:	3008      	adds	r0, #8
 8006eb4:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 8006eb6:	fb03 0000 	mla	r0, r3, r0, r0
 8006eba:	4770      	bx	lr

08006ebc <HAL_SPI_Init>:
  if (hspi == NULL)
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	f000 8097 	beq.w	8006ff0 <HAL_SPI_Init+0x134>
{
 8006ec2:	b570      	push	{r4, r5, r6, lr}
 8006ec4:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006eca:	6805      	ldr	r5, [r0, #0]
 8006ecc:	4b4c      	ldr	r3, [pc, #304]	; (8007000 <HAL_SPI_Init+0x144>)
 8006ece:	4e4d      	ldr	r6, [pc, #308]	; (8007004 <HAL_SPI_Init+0x148>)
 8006ed0:	429d      	cmp	r5, r3
 8006ed2:	bf18      	it	ne
 8006ed4:	42b5      	cmpne	r5, r6
 8006ed6:	bf14      	ite	ne
 8006ed8:	2601      	movne	r6, #1
 8006eda:	2600      	moveq	r6, #0
 8006edc:	d007      	beq.n	8006eee <HAL_SPI_Init+0x32>
 8006ede:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8006ee2:	429d      	cmp	r5, r3
 8006ee4:	d003      	beq.n	8006eee <HAL_SPI_Init+0x32>
 8006ee6:	68c3      	ldr	r3, [r0, #12]
 8006ee8:	2b0f      	cmp	r3, #15
 8006eea:	f200 8083 	bhi.w	8006ff4 <HAL_SPI_Init+0x138>
  packet_length = SPI_GetPacketSize(hspi);
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f7ff ffdc 	bl	8006eac <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006ef4:	b126      	cbz	r6, 8006f00 <HAL_SPI_Init+0x44>
 8006ef6:	4b44      	ldr	r3, [pc, #272]	; (8007008 <HAL_SPI_Init+0x14c>)
 8006ef8:	429d      	cmp	r5, r3
 8006efa:	d001      	beq.n	8006f00 <HAL_SPI_Init+0x44>
 8006efc:	2808      	cmp	r0, #8
 8006efe:	d87b      	bhi.n	8006ff8 <HAL_SPI_Init+0x13c>
 8006f00:	4a3f      	ldr	r2, [pc, #252]	; (8007000 <HAL_SPI_Init+0x144>)
 8006f02:	4b40      	ldr	r3, [pc, #256]	; (8007004 <HAL_SPI_Init+0x148>)
 8006f04:	429d      	cmp	r5, r3
 8006f06:	bf18      	it	ne
 8006f08:	4295      	cmpne	r5, r2
 8006f0a:	d003      	beq.n	8006f14 <HAL_SPI_Init+0x58>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006f0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f10:	429d      	cmp	r5, r3
 8006f12:	d101      	bne.n	8006f18 <HAL_SPI_Init+0x5c>
 8006f14:	2810      	cmp	r0, #16
 8006f16:	d871      	bhi.n	8006ffc <HAL_SPI_Init+0x140>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f18:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d054      	beq.n	8006fca <HAL_SPI_Init+0x10e>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006f20:	2302      	movs	r3, #2
 8006f22:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8006f26:	6822      	ldr	r2, [r4, #0]
 8006f28:	6813      	ldr	r3, [r2, #0]
 8006f2a:	f023 0301 	bic.w	r3, r3, #1
 8006f2e:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8006f30:	69a3      	ldr	r3, [r4, #24]
 8006f32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f36:	d04e      	beq.n	8006fd6 <HAL_SPI_Init+0x11a>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006f38:	69e3      	ldr	r3, [r4, #28]
 8006f3a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006f40:	4313      	orrs	r3, r2
 8006f42:	68e1      	ldr	r1, [r4, #12]
 8006f44:	6822      	ldr	r2, [r4, #0]
 8006f46:	430b      	orrs	r3, r1
 8006f48:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8006f4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f4c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006f52:	4313      	orrs	r3, r2
 8006f54:	69a2      	ldr	r2, [r4, #24]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	6922      	ldr	r2, [r4, #16]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	6962      	ldr	r2, [r4, #20]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	6a22      	ldr	r2, [r4, #32]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	6862      	ldr	r2, [r4, #4]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	68a2      	ldr	r2, [r4, #8]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006f72:	4313      	orrs	r3, r2
 8006f74:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006f76:	6822      	ldr	r2, [r4, #0]
 8006f78:	430b      	orrs	r3, r1
 8006f7a:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006f7c:	6863      	ldr	r3, [r4, #4]
 8006f7e:	b96b      	cbnz	r3, 8006f9c <HAL_SPI_Init+0xe0>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006f80:	6822      	ldr	r2, [r4, #0]
 8006f82:	6893      	ldr	r3, [r2, #8]
 8006f84:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8006f88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006f8c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006f8e:	6822      	ldr	r2, [r4, #0]
 8006f90:	6893      	ldr	r3, [r2, #8]
 8006f92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006f96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f9a:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f9c:	6822      	ldr	r2, [r4, #0]
 8006f9e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006fa0:	f023 0301 	bic.w	r3, r3, #1
 8006fa4:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006fa6:	6863      	ldr	r3, [r4, #4]
 8006fa8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006fac:	d006      	beq.n	8006fbc <HAL_SPI_Init+0x100>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006fae:	6822      	ldr	r2, [r4, #0]
 8006fb0:	68d3      	ldr	r3, [r2, #12]
 8006fb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fb6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006fb8:	430b      	orrs	r3, r1
 8006fba:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fbc:	2000      	movs	r0, #0
 8006fbe:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8006fc8:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8006fca:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f004 fa80 	bl	800b4d4 <HAL_SPI_MspInit>
 8006fd4:	e7a4      	b.n	8006f20 <HAL_SPI_Init+0x64>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8006fd6:	6863      	ldr	r3, [r4, #4]
 8006fd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fdc:	d1ac      	bne.n	8006f38 <HAL_SPI_Init+0x7c>
 8006fde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1a9      	bne.n	8006f38 <HAL_SPI_Init+0x7c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006fe4:	6822      	ldr	r2, [r4, #0]
 8006fe6:	6813      	ldr	r3, [r2, #0]
 8006fe8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006fec:	6013      	str	r3, [r2, #0]
 8006fee:	e7a3      	b.n	8006f38 <HAL_SPI_Init+0x7c>
    return HAL_ERROR;
 8006ff0:	2001      	movs	r0, #1
}
 8006ff2:	4770      	bx	lr
    return HAL_ERROR;
 8006ff4:	2001      	movs	r0, #1
 8006ff6:	e7e7      	b.n	8006fc8 <HAL_SPI_Init+0x10c>
    return HAL_ERROR;
 8006ff8:	2001      	movs	r0, #1
 8006ffa:	e7e5      	b.n	8006fc8 <HAL_SPI_Init+0x10c>
 8006ffc:	2001      	movs	r0, #1
 8006ffe:	e7e3      	b.n	8006fc8 <HAL_SPI_Init+0x10c>
 8007000:	40013000 	.word	0x40013000
 8007004:	40003800 	.word	0x40003800
 8007008:	40003c00 	.word	0x40003c00

0800700c <HAL_SPI_TransmitReceive_DMA>:
{
 800700c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 800700e:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
 8007012:	2c01      	cmp	r4, #1
 8007014:	f000 8122 	beq.w	800725c <HAL_SPI_TransmitReceive_DMA+0x250>
 8007018:	2401      	movs	r4, #1
 800701a:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
  tmp_state   = hspi->State;
 800701e:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 8007022:	b2e4      	uxtb	r4, r4
  tmp_mode    = hspi->Init.Mode;
 8007024:	6845      	ldr	r5, [r0, #4]
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 8007026:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 800702a:	d034      	beq.n	8007096 <HAL_SPI_TransmitReceive_DMA+0x8a>
 800702c:	2c01      	cmp	r4, #1
 800702e:	d138      	bne.n	80070a2 <HAL_SPI_TransmitReceive_DMA+0x96>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007030:	fab2 f482 	clz	r4, r2
 8007034:	0964      	lsrs	r4, r4, #5
 8007036:	2900      	cmp	r1, #0
 8007038:	bf08      	it	eq
 800703a:	2401      	moveq	r4, #1
 800703c:	2c00      	cmp	r4, #0
 800703e:	d136      	bne.n	80070ae <HAL_SPI_TransmitReceive_DMA+0xa2>
 8007040:	2b00      	cmp	r3, #0
 8007042:	d034      	beq.n	80070ae <HAL_SPI_TransmitReceive_DMA+0xa2>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007044:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 8007048:	b2e4      	uxtb	r4, r4
 800704a:	2c04      	cmp	r4, #4
 800704c:	d002      	beq.n	8007054 <HAL_SPI_TransmitReceive_DMA+0x48>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800704e:	2405      	movs	r4, #5
 8007050:	f880 4081 	strb.w	r4, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007054:	2400      	movs	r4, #0
 8007056:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800705a:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800705c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007060:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007064:	6642      	str	r2, [r0, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8007066:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  hspi->RxXferCount = Size;
 800706a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->RxISR       = NULL;
 800706e:	6704      	str	r4, [r0, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007070:	6744      	str	r4, [r0, #116]	; 0x74
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007072:	6801      	ldr	r1, [r0, #0]
 8007074:	688a      	ldr	r2, [r1, #8]
 8007076:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800707a:	608a      	str	r2, [r1, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800707c:	68c2      	ldr	r2, [r0, #12]
 800707e:	2a0f      	cmp	r2, #15
 8007080:	d91a      	bls.n	80070b8 <HAL_SPI_TransmitReceive_DMA+0xac>
 8007082:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 8007084:	6989      	ldr	r1, [r1, #24]
 8007086:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800708a:	d015      	beq.n	80070b8 <HAL_SPI_TransmitReceive_DMA+0xac>
    __HAL_UNLOCK(hspi);
 800708c:	2300      	movs	r3, #0
 800708e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 8007092:	2201      	movs	r2, #1
 8007094:	e009      	b.n	80070aa <HAL_SPI_TransmitReceive_DMA+0x9e>
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 8007096:	6885      	ldr	r5, [r0, #8]
 8007098:	2d00      	cmp	r5, #0
 800709a:	d1c7      	bne.n	800702c <HAL_SPI_TransmitReceive_DMA+0x20>
 800709c:	2c04      	cmp	r4, #4
 800709e:	d1c5      	bne.n	800702c <HAL_SPI_TransmitReceive_DMA+0x20>
 80070a0:	e7c6      	b.n	8007030 <HAL_SPI_TransmitReceive_DMA+0x24>
    __HAL_UNLOCK(hspi);
 80070a2:	2300      	movs	r3, #0
 80070a4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 80070a8:	2202      	movs	r2, #2
}
 80070aa:	4610      	mov	r0, r2
 80070ac:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hspi);
 80070ae:	2300      	movs	r3, #0
 80070b0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 80070b4:	2201      	movs	r2, #1
 80070b6:	e7f8      	b.n	80070aa <HAL_SPI_TransmitReceive_DMA+0x9e>
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80070b8:	2a07      	cmp	r2, #7
 80070ba:	d907      	bls.n	80070cc <HAL_SPI_TransmitReceive_DMA+0xc0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80070bc:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 80070be:	6989      	ldr	r1, [r1, #24]
 80070c0:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80070c4:	bf18      	it	ne
 80070c6:	f5b1 4f80 	cmpne.w	r1, #16384	; 0x4000
 80070ca:	d1df      	bne.n	800708c <HAL_SPI_TransmitReceive_DMA+0x80>
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80070cc:	2a07      	cmp	r2, #7
 80070ce:	d854      	bhi.n	800717a <HAL_SPI_TransmitReceive_DMA+0x16e>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80070d0:	6f82      	ldr	r2, [r0, #120]	; 0x78
 80070d2:	6991      	ldr	r1, [r2, #24]
 80070d4:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80070d8:	d033      	beq.n	8007142 <HAL_SPI_TransmitReceive_DMA+0x136>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80070da:	6992      	ldr	r2, [r2, #24]
 80070dc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80070e0:	d036      	beq.n	8007150 <HAL_SPI_TransmitReceive_DMA+0x144>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80070e2:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80070e4:	6991      	ldr	r1, [r2, #24]
 80070e6:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80070ea:	d038      	beq.n	800715e <HAL_SPI_TransmitReceive_DMA+0x152>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80070ec:	6992      	ldr	r2, [r2, #24]
 80070ee:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80070f2:	d03b      	beq.n	800716c <HAL_SPI_TransmitReceive_DMA+0x160>
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80070f4:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 80070f8:	b2d2      	uxtb	r2, r2
 80070fa:	2a04      	cmp	r2, #4
 80070fc:	d057      	beq.n	80071ae <HAL_SPI_TransmitReceive_DMA+0x1a2>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80070fe:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8007100:	4957      	ldr	r1, [pc, #348]	; (8007260 <HAL_SPI_TransmitReceive_DMA+0x254>)
 8007102:	6411      	str	r1, [r2, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007104:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8007106:	4957      	ldr	r1, [pc, #348]	; (8007264 <HAL_SPI_TransmitReceive_DMA+0x258>)
 8007108:	63d1      	str	r1, [r2, #60]	; 0x3c
 800710a:	461d      	mov	r5, r3
 800710c:	4604      	mov	r4, r0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800710e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8007110:	4a55      	ldr	r2, [pc, #340]	; (8007268 <HAL_SPI_TransmitReceive_DMA+0x25c>)
 8007112:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 8007114:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8007116:	2200      	movs	r2, #0
 8007118:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800711a:	6801      	ldr	r1, [r0, #0]
 800711c:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8007120:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8007122:	3130      	adds	r1, #48	; 0x30
 8007124:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8007126:	f7fa fd39 	bl	8001b9c <HAL_DMA_Start_IT>
 800712a:	2800      	cmp	r0, #0
 800712c:	d046      	beq.n	80071bc <HAL_SPI_TransmitReceive_DMA+0x1b0>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800712e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007132:	f043 0310 	orr.w	r3, r3, #16
 8007136:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800713a:	2201      	movs	r2, #1
 800713c:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 8007140:	e7b3      	b.n	80070aa <HAL_SPI_TransmitReceive_DMA+0x9e>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007142:	f8b0 1062 	ldrh.w	r1, [r0, #98]	; 0x62
 8007146:	3101      	adds	r1, #1
 8007148:	0849      	lsrs	r1, r1, #1
 800714a:	f8a0 1062 	strh.w	r1, [r0, #98]	; 0x62
 800714e:	e7c4      	b.n	80070da <HAL_SPI_TransmitReceive_DMA+0xce>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8007150:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 8007154:	3203      	adds	r2, #3
 8007156:	0892      	lsrs	r2, r2, #2
 8007158:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
 800715c:	e7c1      	b.n	80070e2 <HAL_SPI_TransmitReceive_DMA+0xd6>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800715e:	f8b0 106a 	ldrh.w	r1, [r0, #106]	; 0x6a
 8007162:	3101      	adds	r1, #1
 8007164:	0849      	lsrs	r1, r1, #1
 8007166:	f8a0 106a 	strh.w	r1, [r0, #106]	; 0x6a
 800716a:	e7bf      	b.n	80070ec <HAL_SPI_TransmitReceive_DMA+0xe0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800716c:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 8007170:	3203      	adds	r2, #3
 8007172:	0892      	lsrs	r2, r2, #2
 8007174:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
 8007178:	e7bc      	b.n	80070f4 <HAL_SPI_TransmitReceive_DMA+0xe8>
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800717a:	2a0f      	cmp	r2, #15
 800717c:	d8ba      	bhi.n	80070f4 <HAL_SPI_TransmitReceive_DMA+0xe8>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800717e:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8007180:	6992      	ldr	r2, [r2, #24]
 8007182:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8007186:	d00b      	beq.n	80071a0 <HAL_SPI_TransmitReceive_DMA+0x194>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007188:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800718a:	6992      	ldr	r2, [r2, #24]
 800718c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8007190:	d1b0      	bne.n	80070f4 <HAL_SPI_TransmitReceive_DMA+0xe8>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8007192:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 8007196:	3201      	adds	r2, #1
 8007198:	0852      	lsrs	r2, r2, #1
 800719a:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
 800719e:	e7a9      	b.n	80070f4 <HAL_SPI_TransmitReceive_DMA+0xe8>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80071a0:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 80071a4:	3201      	adds	r2, #1
 80071a6:	0852      	lsrs	r2, r2, #1
 80071a8:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
 80071ac:	e7ec      	b.n	8007188 <HAL_SPI_TransmitReceive_DMA+0x17c>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80071ae:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80071b0:	492e      	ldr	r1, [pc, #184]	; (800726c <HAL_SPI_TransmitReceive_DMA+0x260>)
 80071b2:	6411      	str	r1, [r2, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80071b4:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80071b6:	492e      	ldr	r1, [pc, #184]	; (8007270 <HAL_SPI_TransmitReceive_DMA+0x264>)
 80071b8:	63d1      	str	r1, [r2, #60]	; 0x3c
 80071ba:	e7a6      	b.n	800710a <HAL_SPI_TransmitReceive_DMA+0xfe>
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80071bc:	6822      	ldr	r2, [r4, #0]
 80071be:	6893      	ldr	r3, [r2, #8]
 80071c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071c4:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80071c6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80071c8:	2300      	movs	r3, #0
 80071ca:	6413      	str	r3, [r2, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80071cc:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80071ce:	63d3      	str	r3, [r2, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80071d0:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80071d2:	64d3      	str	r3, [r2, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80071d4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80071d6:	6513      	str	r3, [r2, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 80071d8:	6822      	ldr	r2, [r4, #0]
 80071da:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80071de:	3220      	adds	r2, #32
 80071e0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80071e2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80071e4:	f7fa fcda 	bl	8001b9c <HAL_DMA_Start_IT>
 80071e8:	4602      	mov	r2, r0
 80071ea:	bb08      	cbnz	r0, 8007230 <HAL_SPI_TransmitReceive_DMA+0x224>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80071ec:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80071ee:	69db      	ldr	r3, [r3, #28]
 80071f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071f4:	d026      	beq.n	8007244 <HAL_SPI_TransmitReceive_DMA+0x238>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80071f6:	6821      	ldr	r1, [r4, #0]
 80071f8:	6848      	ldr	r0, [r1, #4]
 80071fa:	4b1e      	ldr	r3, [pc, #120]	; (8007274 <HAL_SPI_TransmitReceive_DMA+0x268>)
 80071fc:	4003      	ands	r3, r0
 80071fe:	432b      	orrs	r3, r5
 8007200:	604b      	str	r3, [r1, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007202:	6821      	ldr	r1, [r4, #0]
 8007204:	688b      	ldr	r3, [r1, #8]
 8007206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800720a:	608b      	str	r3, [r1, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800720c:	6821      	ldr	r1, [r4, #0]
 800720e:	690b      	ldr	r3, [r1, #16]
 8007210:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 8007214:	610b      	str	r3, [r1, #16]
  __HAL_SPI_ENABLE(hspi);
 8007216:	6821      	ldr	r1, [r4, #0]
 8007218:	680b      	ldr	r3, [r1, #0]
 800721a:	f043 0301 	orr.w	r3, r3, #1
 800721e:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007220:	6863      	ldr	r3, [r4, #4]
 8007222:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007226:	d013      	beq.n	8007250 <HAL_SPI_TransmitReceive_DMA+0x244>
  __HAL_UNLOCK(hspi);
 8007228:	2300      	movs	r3, #0
 800722a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 800722e:	e73c      	b.n	80070aa <HAL_SPI_TransmitReceive_DMA+0x9e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007230:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007234:	f043 0310 	orr.w	r3, r3, #16
 8007238:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800723c:	2201      	movs	r2, #1
 800723e:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 8007242:	e732      	b.n	80070aa <HAL_SPI_TransmitReceive_DMA+0x9e>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8007244:	6821      	ldr	r1, [r4, #0]
 8007246:	6848      	ldr	r0, [r1, #4]
 8007248:	4b0a      	ldr	r3, [pc, #40]	; (8007274 <HAL_SPI_TransmitReceive_DMA+0x268>)
 800724a:	4003      	ands	r3, r0
 800724c:	604b      	str	r3, [r1, #4]
 800724e:	e7d8      	b.n	8007202 <HAL_SPI_TransmitReceive_DMA+0x1f6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007250:	6821      	ldr	r1, [r4, #0]
 8007252:	680b      	ldr	r3, [r1, #0]
 8007254:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007258:	600b      	str	r3, [r1, #0]
 800725a:	e7e5      	b.n	8007228 <HAL_SPI_TransmitReceive_DMA+0x21c>
  __HAL_LOCK(hspi);
 800725c:	2202      	movs	r2, #2
 800725e:	e724      	b.n	80070aa <HAL_SPI_TransmitReceive_DMA+0x9e>
 8007260:	080072e1 	.word	0x080072e1
 8007264:	080072a9 	.word	0x080072a9
 8007268:	080072ed 	.word	0x080072ed
 800726c:	080072d5 	.word	0x080072d5
 8007270:	0800727d 	.word	0x0800727d
 8007274:	ffff0000 	.word	0xffff0000

08007278 <HAL_SPI_TxCpltCallback>:
}
 8007278:	4770      	bx	lr

0800727a <HAL_SPI_RxCpltCallback>:
}
 800727a:	4770      	bx	lr

0800727c <SPI_DMAReceiveCplt>:
{
 800727c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800727e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 8007280:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b07      	cmp	r3, #7
 8007288:	d009      	beq.n	800729e <SPI_DMAReceiveCplt+0x22>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800728a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800728c:	69db      	ldr	r3, [r3, #28]
 800728e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007292:	d005      	beq.n	80072a0 <SPI_DMAReceiveCplt+0x24>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8007294:	6802      	ldr	r2, [r0, #0]
 8007296:	6913      	ldr	r3, [r2, #16]
 8007298:	f043 0308 	orr.w	r3, r3, #8
 800729c:	6113      	str	r3, [r2, #16]
}
 800729e:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 80072a0:	f7ff ffeb 	bl	800727a <HAL_SPI_RxCpltCallback>
 80072a4:	e7fb      	b.n	800729e <SPI_DMAReceiveCplt+0x22>

080072a6 <HAL_SPI_TxRxCpltCallback>:
}
 80072a6:	4770      	bx	lr

080072a8 <SPI_DMATransmitReceiveCplt>:
{
 80072a8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 80072ac:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b07      	cmp	r3, #7
 80072b4:	d009      	beq.n	80072ca <SPI_DMATransmitReceiveCplt+0x22>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80072b6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072be:	d005      	beq.n	80072cc <SPI_DMATransmitReceiveCplt+0x24>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80072c0:	6802      	ldr	r2, [r0, #0]
 80072c2:	6913      	ldr	r3, [r2, #16]
 80072c4:	f043 0308 	orr.w	r3, r3, #8
 80072c8:	6113      	str	r3, [r2, #16]
}
 80072ca:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
 80072cc:	f7ff ffeb 	bl	80072a6 <HAL_SPI_TxRxCpltCallback>
 80072d0:	e7fb      	b.n	80072ca <SPI_DMATransmitReceiveCplt+0x22>

080072d2 <HAL_SPI_RxHalfCpltCallback>:
}
 80072d2:	4770      	bx	lr

080072d4 <SPI_DMAHalfReceiveCplt>:
{
 80072d4:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 80072d6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80072d8:	f7ff fffb 	bl	80072d2 <HAL_SPI_RxHalfCpltCallback>
}
 80072dc:	bd08      	pop	{r3, pc}

080072de <HAL_SPI_TxRxHalfCpltCallback>:
}
 80072de:	4770      	bx	lr

080072e0 <SPI_DMAHalfTransmitReceiveCplt>:
{
 80072e0:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80072e2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80072e4:	f7ff fffb 	bl	80072de <HAL_SPI_TxRxHalfCpltCallback>
}
 80072e8:	bd08      	pop	{r3, pc}

080072ea <HAL_SPI_ErrorCallback>:
}
 80072ea:	4770      	bx	lr

080072ec <SPI_DMAError>:
{
 80072ec:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072ee:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80072f0:	f7fb fc26 	bl	8002b40 <HAL_DMA_GetError>
 80072f4:	2802      	cmp	r0, #2
 80072f6:	d00e      	beq.n	8007316 <SPI_DMAError+0x2a>
    SPI_CloseTransfer(hspi);
 80072f8:	4620      	mov	r0, r4
 80072fa:	f7ff fd6f 	bl	8006ddc <SPI_CloseTransfer>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80072fe:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007302:	f043 0310 	orr.w	r3, r3, #16
 8007306:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800730a:	2301      	movs	r3, #1
 800730c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 8007310:	4620      	mov	r0, r4
 8007312:	f7ff ffea 	bl	80072ea <HAL_SPI_ErrorCallback>
}
 8007316:	bd10      	pop	{r4, pc}

08007318 <HAL_SPI_IRQHandler>:
{
 8007318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800731c:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800731e:	6806      	ldr	r6, [r0, #0]
 8007320:	f8d6 9010 	ldr.w	r9, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
 8007324:	f8d6 8014 	ldr.w	r8, [r6, #20]
  uint32_t trigger  = itsource & itflag;
 8007328:	ea09 0508 	and.w	r5, r9, r8
  uint32_t cfg1     = hspi->Instance->CFG1;
 800732c:	f8d6 a008 	ldr.w	sl, [r6, #8]
  HAL_SPI_StateTypeDef State = hspi->State;
 8007330:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
 8007334:	b2ff      	uxtb	r7, r7
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007336:	f005 0364 	and.w	r3, r5, #100	; 0x64
 800733a:	2b04      	cmp	r3, #4
 800733c:	d116      	bne.n	800736c <HAL_SPI_IRQHandler+0x54>
    hspi->TxISR(hspi);
 800733e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8007340:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007342:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007344:	4620      	mov	r0, r4
 8007346:	4798      	blx	r3
    handled = 1UL;
 8007348:	2301      	movs	r3, #1
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800734a:	f005 0245 	and.w	r2, r5, #69	; 0x45
 800734e:	2a01      	cmp	r2, #1
 8007350:	d103      	bne.n	800735a <HAL_SPI_IRQHandler+0x42>
    hspi->RxISR(hspi);
 8007352:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007354:	4620      	mov	r0, r4
 8007356:	4798      	blx	r3
    handled = 1UL;
 8007358:	2301      	movs	r3, #1
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800735a:	f005 0226 	and.w	r2, r5, #38	; 0x26
 800735e:	2a02      	cmp	r2, #2
 8007360:	d106      	bne.n	8007370 <HAL_SPI_IRQHandler+0x58>
    hspi->TxISR(hspi);
 8007362:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007364:	4620      	mov	r0, r4
 8007366:	4798      	blx	r3
}
 8007368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint32_t handled  = 0UL;
 800736c:	2300      	movs	r3, #0
 800736e:	e7ec      	b.n	800734a <HAL_SPI_IRQHandler+0x32>
  if (handled != 0UL)
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1f9      	bne.n	8007368 <HAL_SPI_IRQHandler+0x50>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007374:	f015 0f08 	tst.w	r5, #8
 8007378:	d06c      	beq.n	8007454 <HAL_SPI_IRQHandler+0x13c>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800737a:	6822      	ldr	r2, [r4, #0]
 800737c:	6993      	ldr	r3, [r2, #24]
 800737e:	f043 0308 	orr.w	r3, r3, #8
 8007382:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007384:	6822      	ldr	r2, [r4, #0]
 8007386:	6993      	ldr	r3, [r2, #24]
 8007388:	f043 0310 	orr.w	r3, r3, #16
 800738c:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800738e:	6822      	ldr	r2, [r4, #0]
 8007390:	6993      	ldr	r3, [r2, #24]
 8007392:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007396:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007398:	6822      	ldr	r2, [r4, #0]
 800739a:	6913      	ldr	r3, [r2, #16]
 800739c:	f023 0308 	bic.w	r3, r3, #8
 80073a0:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 80073a2:	f41a 4f40 	tst.w	sl, #49152	; 0xc000
 80073a6:	d009      	beq.n	80073bc <HAL_SPI_IRQHandler+0xa4>
 80073a8:	2f04      	cmp	r7, #4
 80073aa:	d002      	beq.n	80073b2 <HAL_SPI_IRQHandler+0x9a>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 80073ac:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	b123      	cbz	r3, 80073bc <HAL_SPI_IRQHandler+0xa4>
 80073b2:	2f03      	cmp	r7, #3
 80073b4:	d011      	beq.n	80073da <HAL_SPI_IRQHandler+0xc2>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 80073b6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80073b8:	69db      	ldr	r3, [r3, #28]
 80073ba:	b973      	cbnz	r3, 80073da <HAL_SPI_IRQHandler+0xc2>
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80073bc:	6823      	ldr	r3, [r4, #0]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 80073c4:	d021      	beq.n	800740a <HAL_SPI_IRQHandler+0xf2>
      SPI_CloseTransfer(hspi);
 80073c6:	4620      	mov	r0, r4
 80073c8:	f7ff fd08 	bl	8006ddc <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 80073cc:	2301      	movs	r3, #1
 80073ce:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073d2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d130      	bne.n	800743c <HAL_SPI_IRQHandler+0x124>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80073da:	2f05      	cmp	r7, #5
 80073dc:	d032      	beq.n	8007444 <HAL_SPI_IRQHandler+0x12c>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80073de:	2f04      	cmp	r7, #4
 80073e0:	d034      	beq.n	800744c <HAL_SPI_IRQHandler+0x134>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80073e2:	2f03      	cmp	r7, #3
 80073e4:	d1c0      	bne.n	8007368 <HAL_SPI_IRQHandler+0x50>
      HAL_SPI_TxCpltCallback(hspi);
 80073e6:	4620      	mov	r0, r4
 80073e8:	f7ff ff46 	bl	8007278 <HAL_SPI_TxCpltCallback>
 80073ec:	e7bc      	b.n	8007368 <HAL_SPI_IRQHandler+0x50>
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073ee:	2b07      	cmp	r3, #7
 80073f0:	d91b      	bls.n	800742a <HAL_SPI_IRQHandler+0x112>
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80073f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073f4:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 80073f6:	801a      	strh	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint16_t);
 80073f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073fa:	3302      	adds	r3, #2
 80073fc:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 80073fe:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8007402:	3b01      	subs	r3, #1
 8007404:	b29b      	uxth	r3, r3
 8007406:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800740a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800740e:	b29b      	uxth	r3, r3
 8007410:	2b00      	cmp	r3, #0
 8007412:	d0d8      	beq.n	80073c6 <HAL_SPI_IRQHandler+0xae>
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007414:	68e3      	ldr	r3, [r4, #12]
 8007416:	2b0f      	cmp	r3, #15
 8007418:	d9e9      	bls.n	80073ee <HAL_SPI_IRQHandler+0xd6>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800741a:	6822      	ldr	r2, [r4, #0]
 800741c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800741e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007420:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8007422:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007424:	3304      	adds	r3, #4
 8007426:	6663      	str	r3, [r4, #100]	; 0x64
 8007428:	e7e9      	b.n	80073fe <HAL_SPI_IRQHandler+0xe6>
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800742a:	6822      	ldr	r2, [r4, #0]
 800742c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800742e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8007432:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8007434:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007436:	3301      	adds	r3, #1
 8007438:	6663      	str	r3, [r4, #100]	; 0x64
 800743a:	e7e0      	b.n	80073fe <HAL_SPI_IRQHandler+0xe6>
        HAL_SPI_ErrorCallback(hspi);
 800743c:	4620      	mov	r0, r4
 800743e:	f7ff ff54 	bl	80072ea <HAL_SPI_ErrorCallback>
        return;
 8007442:	e791      	b.n	8007368 <HAL_SPI_IRQHandler+0x50>
      HAL_SPI_TxRxCpltCallback(hspi);
 8007444:	4620      	mov	r0, r4
 8007446:	f7ff ff2e 	bl	80072a6 <HAL_SPI_TxRxCpltCallback>
 800744a:	e78d      	b.n	8007368 <HAL_SPI_IRQHandler+0x50>
      HAL_SPI_RxCpltCallback(hspi);
 800744c:	4620      	mov	r0, r4
 800744e:	f7ff ff14 	bl	800727a <HAL_SPI_RxCpltCallback>
 8007452:	e789      	b.n	8007368 <HAL_SPI_IRQHandler+0x50>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007454:	f418 6f00 	tst.w	r8, #2048	; 0x800
 8007458:	d002      	beq.n	8007460 <HAL_SPI_IRQHandler+0x148>
 800745a:	f019 0f08 	tst.w	r9, #8
 800745e:	d174      	bne.n	800754a <HAL_SPI_IRQHandler+0x232>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007460:	f415 7f58 	tst.w	r5, #864	; 0x360
 8007464:	d080      	beq.n	8007368 <HAL_SPI_IRQHandler+0x50>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007466:	f015 0f40 	tst.w	r5, #64	; 0x40
 800746a:	d00a      	beq.n	8007482 <HAL_SPI_IRQHandler+0x16a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800746c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007470:	f043 0304 	orr.w	r3, r3, #4
 8007474:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007478:	6822      	ldr	r2, [r4, #0]
 800747a:	6993      	ldr	r3, [r2, #24]
 800747c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007480:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007482:	f415 7f00 	tst.w	r5, #512	; 0x200
 8007486:	d00a      	beq.n	800749e <HAL_SPI_IRQHandler+0x186>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007488:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800748c:	f043 0301 	orr.w	r3, r3, #1
 8007490:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007494:	6822      	ldr	r2, [r4, #0]
 8007496:	6993      	ldr	r3, [r2, #24]
 8007498:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800749c:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800749e:	f415 7f80 	tst.w	r5, #256	; 0x100
 80074a2:	d00a      	beq.n	80074ba <HAL_SPI_IRQHandler+0x1a2>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80074a4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80074a8:	f043 0308 	orr.w	r3, r3, #8
 80074ac:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80074b0:	6822      	ldr	r2, [r4, #0]
 80074b2:	6993      	ldr	r3, [r2, #24]
 80074b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074b8:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80074ba:	f015 0f20 	tst.w	r5, #32
 80074be:	d00a      	beq.n	80074d6 <HAL_SPI_IRQHandler+0x1be>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80074c0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80074c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80074cc:	6822      	ldr	r2, [r4, #0]
 80074ce:	6993      	ldr	r3, [r2, #24]
 80074d0:	f043 0320 	orr.w	r3, r3, #32
 80074d4:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074d6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f43f af44 	beq.w	8007368 <HAL_SPI_IRQHandler+0x50>
      __HAL_SPI_DISABLE(hspi);
 80074e0:	6822      	ldr	r2, [r4, #0]
 80074e2:	6813      	ldr	r3, [r2, #0]
 80074e4:	f023 0301 	bic.w	r3, r3, #1
 80074e8:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 80074ea:	6822      	ldr	r2, [r4, #0]
 80074ec:	6911      	ldr	r1, [r2, #16]
 80074ee:	4b1d      	ldr	r3, [pc, #116]	; (8007564 <HAL_SPI_IRQHandler+0x24c>)
 80074f0:	400b      	ands	r3, r1
 80074f2:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80074f4:	f40a 4a40 	and.w	sl, sl, #49152	; 0xc000
 80074f8:	f5ba 4f40 	cmp.w	sl, #49152	; 0xc000
 80074fc:	d12b      	bne.n	8007556 <HAL_SPI_IRQHandler+0x23e>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80074fe:	6822      	ldr	r2, [r4, #0]
 8007500:	6893      	ldr	r3, [r2, #8]
 8007502:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007506:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 8007508:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800750a:	b15b      	cbz	r3, 8007524 <HAL_SPI_IRQHandler+0x20c>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800750c:	4a16      	ldr	r2, [pc, #88]	; (8007568 <HAL_SPI_IRQHandler+0x250>)
 800750e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007510:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8007512:	f7fa fe2f 	bl	8002174 <HAL_DMA_Abort_IT>
 8007516:	b128      	cbz	r0, 8007524 <HAL_SPI_IRQHandler+0x20c>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007518:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800751c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007520:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 8007524:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8007526:	2b00      	cmp	r3, #0
 8007528:	f43f af1e 	beq.w	8007368 <HAL_SPI_IRQHandler+0x50>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800752c:	4a0e      	ldr	r2, [pc, #56]	; (8007568 <HAL_SPI_IRQHandler+0x250>)
 800752e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007530:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8007532:	f7fa fe1f 	bl	8002174 <HAL_DMA_Abort_IT>
 8007536:	2800      	cmp	r0, #0
 8007538:	f43f af16 	beq.w	8007368 <HAL_SPI_IRQHandler+0x50>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800753c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007544:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8007548:	e70e      	b.n	8007368 <HAL_SPI_IRQHandler+0x50>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800754a:	6822      	ldr	r2, [r4, #0]
 800754c:	6993      	ldr	r3, [r2, #24]
 800754e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007552:	6193      	str	r3, [r2, #24]
    return;
 8007554:	e708      	b.n	8007368 <HAL_SPI_IRQHandler+0x50>
        hspi->State = HAL_SPI_STATE_READY;
 8007556:	2301      	movs	r3, #1
 8007558:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800755c:	4620      	mov	r0, r4
 800755e:	f7ff fec4 	bl	80072ea <HAL_SPI_ErrorCallback>
 8007562:	e701      	b.n	8007368 <HAL_SPI_IRQHandler+0x50>
 8007564:	fffffc94 	.word	0xfffffc94
 8007568:	0800756d 	.word	0x0800756d

0800756c <SPI_DMAAbortOnError>:
{
 800756c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800756e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 8007570:	2300      	movs	r3, #0
 8007572:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007576:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800757a:	2301      	movs	r3, #1
 800757c:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 8007580:	f7ff feb3 	bl	80072ea <HAL_SPI_ErrorCallback>
}
 8007584:	bd08      	pop	{r3, pc}
	...

08007588 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007588:	b410      	push	{r4}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800758a:	680b      	ldr	r3, [r1, #0]
 800758c:	b1eb      	cbz	r3, 80075ca <FMC_SDRAM_Init+0x42>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800758e:	6803      	ldr	r3, [r0, #0]
 8007590:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007594:	69ca      	ldr	r2, [r1, #28]
 8007596:	6a0c      	ldr	r4, [r1, #32]
 8007598:	4322      	orrs	r2, r4
 800759a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800759c:	4322      	orrs	r2, r4
 800759e:	4313      	orrs	r3, r2
 80075a0:	6003      	str	r3, [r0, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80075a2:	6843      	ldr	r3, [r0, #4]
 80075a4:	4a14      	ldr	r2, [pc, #80]	; (80075f8 <FMC_SDRAM_Init+0x70>)
 80075a6:	401a      	ands	r2, r3
 80075a8:	684b      	ldr	r3, [r1, #4]
 80075aa:	688c      	ldr	r4, [r1, #8]
 80075ac:	4323      	orrs	r3, r4
 80075ae:	68cc      	ldr	r4, [r1, #12]
 80075b0:	4323      	orrs	r3, r4
 80075b2:	690c      	ldr	r4, [r1, #16]
 80075b4:	4323      	orrs	r3, r4
 80075b6:	694c      	ldr	r4, [r1, #20]
 80075b8:	4323      	orrs	r3, r4
 80075ba:	6989      	ldr	r1, [r1, #24]
 80075bc:	430b      	orrs	r3, r1
 80075be:	4313      	orrs	r3, r2
 80075c0:	6043      	str	r3, [r0, #4]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 80075c2:	2000      	movs	r0, #0
 80075c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075c8:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80075ca:	6803      	ldr	r3, [r0, #0]
 80075cc:	4a0a      	ldr	r2, [pc, #40]	; (80075f8 <FMC_SDRAM_Init+0x70>)
 80075ce:	401a      	ands	r2, r3
 80075d0:	684b      	ldr	r3, [r1, #4]
 80075d2:	688c      	ldr	r4, [r1, #8]
 80075d4:	4323      	orrs	r3, r4
 80075d6:	68cc      	ldr	r4, [r1, #12]
 80075d8:	4323      	orrs	r3, r4
 80075da:	690c      	ldr	r4, [r1, #16]
 80075dc:	4323      	orrs	r3, r4
 80075de:	694c      	ldr	r4, [r1, #20]
 80075e0:	4323      	orrs	r3, r4
 80075e2:	698c      	ldr	r4, [r1, #24]
 80075e4:	4323      	orrs	r3, r4
 80075e6:	69cc      	ldr	r4, [r1, #28]
 80075e8:	4323      	orrs	r3, r4
 80075ea:	6a0c      	ldr	r4, [r1, #32]
 80075ec:	4323      	orrs	r3, r4
 80075ee:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80075f0:	430b      	orrs	r3, r1
 80075f2:	4313      	orrs	r3, r2
 80075f4:	6003      	str	r3, [r0, #0]
 80075f6:	e7e4      	b.n	80075c2 <FMC_SDRAM_Init+0x3a>
 80075f8:	ffff8000 	.word	0xffff8000

080075fc <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80075fc:	b410      	push	{r4}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80075fe:	b332      	cbz	r2, 800764e <FMC_SDRAM_Timing_Init+0x52>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007600:	6883      	ldr	r3, [r0, #8]
 8007602:	4a23      	ldr	r2, [pc, #140]	; (8007690 <FMC_SDRAM_Timing_Init+0x94>)
 8007604:	401a      	ands	r2, r3
 8007606:	68cb      	ldr	r3, [r1, #12]
 8007608:	1e5c      	subs	r4, r3, #1
 800760a:	694b      	ldr	r3, [r1, #20]
 800760c:	3b01      	subs	r3, #1
 800760e:	051b      	lsls	r3, r3, #20
 8007610:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 8007614:	4313      	orrs	r3, r2
 8007616:	6083      	str	r3, [r0, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007618:	68c2      	ldr	r2, [r0, #12]
 800761a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800761e:	680b      	ldr	r3, [r1, #0]
 8007620:	3b01      	subs	r3, #1
 8007622:	684c      	ldr	r4, [r1, #4]
 8007624:	3c01      	subs	r4, #1
 8007626:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800762a:	688c      	ldr	r4, [r1, #8]
 800762c:	3c01      	subs	r4, #1
 800762e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8007632:	690c      	ldr	r4, [r1, #16]
 8007634:	3c01      	subs	r4, #1
 8007636:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800763a:	6989      	ldr	r1, [r1, #24]
 800763c:	3901      	subs	r1, #1
 800763e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007642:	4313      	orrs	r3, r2
 8007644:	60c3      	str	r3, [r0, #12]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 8007646:	2000      	movs	r0, #0
 8007648:	f85d 4b04 	ldr.w	r4, [sp], #4
 800764c:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800764e:	6882      	ldr	r2, [r0, #8]
 8007650:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8007654:	680b      	ldr	r3, [r1, #0]
 8007656:	3b01      	subs	r3, #1
 8007658:	684c      	ldr	r4, [r1, #4]
 800765a:	3c01      	subs	r4, #1
 800765c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8007660:	688c      	ldr	r4, [r1, #8]
 8007662:	3c01      	subs	r4, #1
 8007664:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8007668:	68cc      	ldr	r4, [r1, #12]
 800766a:	3c01      	subs	r4, #1
 800766c:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 8007670:	690c      	ldr	r4, [r1, #16]
 8007672:	3c01      	subs	r4, #1
 8007674:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007678:	694c      	ldr	r4, [r1, #20]
 800767a:	3c01      	subs	r4, #1
 800767c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8007680:	6989      	ldr	r1, [r1, #24]
 8007682:	3901      	subs	r1, #1
 8007684:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007688:	4313      	orrs	r3, r2
 800768a:	6083      	str	r3, [r0, #8]
 800768c:	e7db      	b.n	8007646 <FMC_SDRAM_Timing_Init+0x4a>
 800768e:	bf00      	nop
 8007690:	ff0f0fff 	.word	0xff0f0fff

08007694 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007694:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
 8007696:	6902      	ldr	r2, [r0, #16]
 8007698:	680b      	ldr	r3, [r1, #0]
 800769a:	684c      	ldr	r4, [r1, #4]
 800769c:	4323      	orrs	r3, r4
 800769e:	688c      	ldr	r4, [r1, #8]
 80076a0:	3c01      	subs	r4, #1
 80076a2:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 80076a6:	68c9      	ldr	r1, [r1, #12]
 80076a8:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 80076ac:	4313      	orrs	r3, r2
 80076ae:	6103      	str	r3, [r0, #16]
                          (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos)   |
                          ((Command->ModeRegisterDefinition)   << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 80076b0:	2000      	movs	r0, #0
 80076b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80076b8:	6942      	ldr	r2, [r0, #20]
 80076ba:	4b03      	ldr	r3, [pc, #12]	; (80076c8 <FMC_SDRAM_ProgramRefreshRate+0x10>)
 80076bc:	4013      	ands	r3, r2
 80076be:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 80076c2:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 80076c4:	2000      	movs	r0, #0
 80076c6:	4770      	bx	lr
 80076c8:	ffffc001 	.word	0xffffc001

080076cc <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80076cc:	4b0b      	ldr	r3, [pc, #44]	; (80076fc <SDMMC_GetCmdError+0x30>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a0b      	ldr	r2, [pc, #44]	; (8007700 <SDMMC_GetCmdError+0x34>)
 80076d2:	fba2 2303 	umull	r2, r3, r2, r3
 80076d6:	0a5a      	lsrs	r2, r3, #9
 80076d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80076dc:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 80076e0:	1e5a      	subs	r2, r3, #1
 80076e2:	b143      	cbz	r3, 80076f6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80076e4:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 80076e6:	4613      	mov	r3, r2
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80076e8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80076ec:	d0f8      	beq.n	80076e0 <SDMMC_GetCmdError+0x14>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80076ee:	4b05      	ldr	r3, [pc, #20]	; (8007704 <SDMMC_GetCmdError+0x38>)
 80076f0:	6383      	str	r3, [r0, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80076f2:	2000      	movs	r0, #0
 80076f4:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80076f6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80076fa:	4770      	bx	lr
 80076fc:	200000bc 	.word	0x200000bc
 8007700:	10624dd3 	.word	0x10624dd3
 8007704:	002000c5 	.word	0x002000c5

08007708 <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007708:	4b15      	ldr	r3, [pc, #84]	; (8007760 <SDMMC_GetCmdResp2+0x58>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a15      	ldr	r2, [pc, #84]	; (8007764 <SDMMC_GetCmdResp2+0x5c>)
 800770e:	fba2 2303 	umull	r2, r3, r2, r3
 8007712:	0a5a      	lsrs	r2, r3, #9
 8007714:	f241 3388 	movw	r3, #5000	; 0x1388
 8007718:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 800771c:	1e5a      	subs	r2, r3, #1
 800771e:	b1db      	cbz	r3, 8007758 <SDMMC_GetCmdResp2+0x50>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8007720:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007722:	4613      	mov	r3, r2
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007724:	f011 0f45 	tst.w	r1, #69	; 0x45
 8007728:	d0f8      	beq.n	800771c <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800772a:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 800772e:	d1f5      	bne.n	800771c <SDMMC_GetCmdResp2+0x14>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007730:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007732:	f013 0f04 	tst.w	r3, #4
 8007736:	d107      	bne.n	8007748 <SDMMC_GetCmdResp2+0x40>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007738:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800773a:	f013 0f01 	tst.w	r3, #1
 800773e:	d107      	bne.n	8007750 <SDMMC_GetCmdResp2+0x48>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007740:	4b09      	ldr	r3, [pc, #36]	; (8007768 <SDMMC_GetCmdResp2+0x60>)
 8007742:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007744:	2000      	movs	r0, #0
 8007746:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007748:	2304      	movs	r3, #4
 800774a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800774c:	4618      	mov	r0, r3
 800774e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007750:	2301      	movs	r3, #1
 8007752:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007754:	4618      	mov	r0, r3
 8007756:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007758:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	200000bc 	.word	0x200000bc
 8007764:	10624dd3 	.word	0x10624dd3
 8007768:	002000c5 	.word	0x002000c5

0800776c <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800776c:	4b11      	ldr	r3, [pc, #68]	; (80077b4 <SDMMC_GetCmdResp3+0x48>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a11      	ldr	r2, [pc, #68]	; (80077b8 <SDMMC_GetCmdResp3+0x4c>)
 8007772:	fba2 2303 	umull	r2, r3, r2, r3
 8007776:	0a5a      	lsrs	r2, r3, #9
 8007778:	f241 3388 	movw	r3, #5000	; 0x1388
 800777c:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 8007780:	1e5a      	subs	r2, r3, #1
 8007782:	b19b      	cbz	r3, 80077ac <SDMMC_GetCmdResp3+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8007784:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007786:	4613      	mov	r3, r2
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007788:	f011 0f45 	tst.w	r1, #69	; 0x45
 800778c:	d0f8      	beq.n	8007780 <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800778e:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 8007792:	d1f5      	bne.n	8007780 <SDMMC_GetCmdResp3+0x14>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007794:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007796:	f013 0f04 	tst.w	r3, #4
 800779a:	d103      	bne.n	80077a4 <SDMMC_GetCmdResp3+0x38>
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800779c:	4b07      	ldr	r3, [pc, #28]	; (80077bc <SDMMC_GetCmdResp3+0x50>)
 800779e:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80077a0:	2000      	movs	r0, #0
 80077a2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80077a4:	2304      	movs	r3, #4
 80077a6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80077a8:	4618      	mov	r0, r3
 80077aa:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80077ac:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	200000bc 	.word	0x200000bc
 80077b8:	10624dd3 	.word	0x10624dd3
 80077bc:	002000c5 	.word	0x002000c5

080077c0 <SDMMC_GetCmdResp7>:
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80077c0:	4b18      	ldr	r3, [pc, #96]	; (8007824 <SDMMC_GetCmdResp7+0x64>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a18      	ldr	r2, [pc, #96]	; (8007828 <SDMMC_GetCmdResp7+0x68>)
 80077c6:	fba2 2303 	umull	r2, r3, r2, r3
 80077ca:	0a5a      	lsrs	r2, r3, #9
 80077cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80077d0:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 80077d4:	1e5a      	subs	r2, r3, #1
 80077d6:	b1fb      	cbz	r3, 8007818 <SDMMC_GetCmdResp7+0x58>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 80077d8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80077da:	4613      	mov	r3, r2
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80077dc:	f011 0f45 	tst.w	r1, #69	; 0x45
 80077e0:	d0f8      	beq.n	80077d4 <SDMMC_GetCmdResp7+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80077e2:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 80077e6:	d1f5      	bne.n	80077d4 <SDMMC_GetCmdResp7+0x14>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80077e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80077ea:	f013 0f04 	tst.w	r3, #4
 80077ee:	d10b      	bne.n	8007808 <SDMMC_GetCmdResp7+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80077f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80077f2:	f013 0f01 	tst.w	r3, #1
 80077f6:	d10b      	bne.n	8007810 <SDMMC_GetCmdResp7+0x50>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80077f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80077fa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80077fe:	d00e      	beq.n	800781e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007800:	2340      	movs	r3, #64	; 0x40
 8007802:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007804:	2000      	movs	r0, #0
 8007806:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007808:	2304      	movs	r3, #4
 800780a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800780c:	4618      	mov	r0, r3
 800780e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007810:	2301      	movs	r3, #1
 8007812:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007814:	4618      	mov	r0, r3
 8007816:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007818:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800781c:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 800781e:	2000      	movs	r0, #0

}
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	200000bc 	.word	0x200000bc
 8007828:	10624dd3 	.word	0x10624dd3

0800782c <SDMMC_Init>:
{
 800782c:	b084      	sub	sp, #16
 800782e:	b410      	push	{r4}
 8007830:	ac02      	add	r4, sp, #8
 8007832:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8007836:	460b      	mov	r3, r1
 8007838:	9a03      	ldr	r2, [sp, #12]
 800783a:	4313      	orrs	r3, r2
             Init.BusWide             |\
 800783c:	9a04      	ldr	r2, [sp, #16]
             Init.ClockPowerSave      |\
 800783e:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 8007840:	9a05      	ldr	r2, [sp, #20]
             Init.BusWide             |\
 8007842:	4313      	orrs	r3, r2
             Init.ClockDiv
 8007844:	9a06      	ldr	r2, [sp, #24]
             Init.HardwareFlowControl |\
 8007846:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007848:	6841      	ldr	r1, [r0, #4]
 800784a:	4a04      	ldr	r2, [pc, #16]	; (800785c <SDMMC_Init+0x30>)
 800784c:	400a      	ands	r2, r1
 800784e:	4313      	orrs	r3, r2
 8007850:	6043      	str	r3, [r0, #4]
}
 8007852:	2000      	movs	r0, #0
 8007854:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007858:	b004      	add	sp, #16
 800785a:	4770      	bx	lr
 800785c:	ffc02c00 	.word	0xffc02c00

08007860 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 8007860:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8007864:	4770      	bx	lr

08007866 <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 8007866:	680b      	ldr	r3, [r1, #0]
 8007868:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 800786c:	2000      	movs	r0, #0
 800786e:	4770      	bx	lr

08007870 <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8007870:	6803      	ldr	r3, [r0, #0]
 8007872:	f043 0303 	orr.w	r3, r3, #3
 8007876:	6003      	str	r3, [r0, #0]
}
 8007878:	2000      	movs	r0, #0
 800787a:	4770      	bx	lr

0800787c <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800787c:	6800      	ldr	r0, [r0, #0]
}
 800787e:	f000 0003 	and.w	r0, r0, #3
 8007882:	4770      	bx	lr

08007884 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 8007884:	680b      	ldr	r3, [r1, #0]
 8007886:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007888:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 800788a:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800788c:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 800788e:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 8007890:	4313      	orrs	r3, r2
                       Command->CPSM);
 8007892:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 8007894:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007896:	68c1      	ldr	r1, [r0, #12]
 8007898:	4a02      	ldr	r2, [pc, #8]	; (80078a4 <SDMMC_SendCommand+0x20>)
 800789a:	400a      	ands	r2, r1
 800789c:	4313      	orrs	r3, r2
 800789e:	60c3      	str	r3, [r0, #12]
}
 80078a0:	2000      	movs	r0, #0
 80078a2:	4770      	bx	lr
 80078a4:	fffee0c0 	.word	0xfffee0c0

080078a8 <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 80078a8:	6900      	ldr	r0, [r0, #16]
}
 80078aa:	b2c0      	uxtb	r0, r0
 80078ac:	4770      	bx	lr

080078ae <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80078ae:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 80078b0:	5840      	ldr	r0, [r0, r1]
}
 80078b2:	4770      	bx	lr

080078b4 <SDMMC_GetCmdResp1>:
{
 80078b4:	b538      	push	{r3, r4, r5, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80078b6:	4b53      	ldr	r3, [pc, #332]	; (8007a04 <SDMMC_GetCmdResp1+0x150>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4c53      	ldr	r4, [pc, #332]	; (8007a08 <SDMMC_GetCmdResp1+0x154>)
 80078bc:	fba4 4303 	umull	r4, r3, r4, r3
 80078c0:	0a5b      	lsrs	r3, r3, #9
 80078c2:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 80078c6:	1e54      	subs	r4, r2, #1
 80078c8:	2a00      	cmp	r2, #0
 80078ca:	d061      	beq.n	8007990 <SDMMC_GetCmdResp1+0xdc>
    sta_reg = SDMMCx->STA;
 80078cc:	6b45      	ldr	r5, [r0, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80078ce:	4b4f      	ldr	r3, [pc, #316]	; (8007a0c <SDMMC_GetCmdResp1+0x158>)
 80078d0:	402b      	ands	r3, r5
 80078d2:	4622      	mov	r2, r4
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d0f6      	beq.n	80078c6 <SDMMC_GetCmdResp1+0x12>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80078d8:	f415 5f00 	tst.w	r5, #8192	; 0x2000
 80078dc:	d1f3      	bne.n	80078c6 <SDMMC_GetCmdResp1+0x12>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80078de:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80078e0:	f013 0f04 	tst.w	r3, #4
 80078e4:	d107      	bne.n	80078f6 <SDMMC_GetCmdResp1+0x42>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80078e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80078e8:	f013 0f01 	tst.w	r3, #1
 80078ec:	d007      	beq.n	80078fe <SDMMC_GetCmdResp1+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80078ee:	2301      	movs	r3, #1
 80078f0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80078f2:	4618      	mov	r0, r3
 80078f4:	e04e      	b.n	8007994 <SDMMC_GetCmdResp1+0xe0>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80078f6:	2304      	movs	r3, #4
 80078f8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80078fa:	4618      	mov	r0, r3
 80078fc:	e04a      	b.n	8007994 <SDMMC_GetCmdResp1+0xe0>
 80078fe:	460d      	mov	r5, r1
 8007900:	4604      	mov	r4, r0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007902:	4b43      	ldr	r3, [pc, #268]	; (8007a10 <SDMMC_GetCmdResp1+0x15c>)
 8007904:	6383      	str	r3, [r0, #56]	; 0x38
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007906:	f7ff ffcf 	bl	80078a8 <SDMMC_GetCommandResponse>
 800790a:	42a8      	cmp	r0, r5
 800790c:	d001      	beq.n	8007912 <SDMMC_GetCmdResp1+0x5e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800790e:	2001      	movs	r0, #1
 8007910:	e040      	b.n	8007994 <SDMMC_GetCmdResp1+0xe0>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007912:	2100      	movs	r1, #0
 8007914:	4620      	mov	r0, r4
 8007916:	f7ff ffca 	bl	80078ae <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800791a:	4b3e      	ldr	r3, [pc, #248]	; (8007a14 <SDMMC_GetCmdResp1+0x160>)
 800791c:	4003      	ands	r3, r0
 800791e:	b3d3      	cbz	r3, 8007996 <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007920:	2800      	cmp	r0, #0
 8007922:	db3a      	blt.n	800799a <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007924:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007928:	d13a      	bne.n	80079a0 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800792a:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 800792e:	d139      	bne.n	80079a4 <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007930:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 8007934:	d138      	bne.n	80079a8 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007936:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 800793a:	d138      	bne.n	80079ae <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800793c:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8007940:	d138      	bne.n	80079b4 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007942:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8007946:	d138      	bne.n	80079ba <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007948:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800794c:	d138      	bne.n	80079c0 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800794e:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8007952:	d138      	bne.n	80079c6 <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007954:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8007958:	d138      	bne.n	80079cc <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800795a:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800795e:	d138      	bne.n	80079d2 <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007960:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8007964:	d138      	bne.n	80079d8 <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007966:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 800796a:	d138      	bne.n	80079de <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800796c:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 8007970:	d138      	bne.n	80079e4 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007972:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8007976:	d138      	bne.n	80079ea <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007978:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 800797c:	d138      	bne.n	80079f0 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800797e:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8007982:	d138      	bne.n	80079f6 <SDMMC_GetCmdResp1+0x142>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007984:	f010 0f08 	tst.w	r0, #8
 8007988:	d038      	beq.n	80079fc <SDMMC_GetCmdResp1+0x148>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800798a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800798e:	e001      	b.n	8007994 <SDMMC_GetCmdResp1+0xe0>
      return SDMMC_ERROR_TIMEOUT;
 8007990:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007994:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_NONE;
 8007996:	2000      	movs	r0, #0
 8007998:	e7fc      	b.n	8007994 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800799a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800799e:	e7f9      	b.n	8007994 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80079a0:	2040      	movs	r0, #64	; 0x40
 80079a2:	e7f7      	b.n	8007994 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80079a4:	2080      	movs	r0, #128	; 0x80
 80079a6:	e7f5      	b.n	8007994 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80079a8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80079ac:	e7f2      	b.n	8007994 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80079ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80079b2:	e7ef      	b.n	8007994 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80079b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80079b8:	e7ec      	b.n	8007994 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80079ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80079be:	e7e9      	b.n	8007994 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80079c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80079c4:	e7e6      	b.n	8007994 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80079c6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80079ca:	e7e3      	b.n	8007994 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80079cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80079d0:	e7e0      	b.n	8007994 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CC_ERR;
 80079d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80079d6:	e7dd      	b.n	8007994 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80079d8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80079dc:	e7da      	b.n	8007994 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80079de:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80079e2:	e7d7      	b.n	8007994 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80079e4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80079e8:	e7d4      	b.n	8007994 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80079ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80079ee:	e7d1      	b.n	8007994 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80079f0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80079f4:	e7ce      	b.n	8007994 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_RESET;
 80079f6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80079fa:	e7cb      	b.n	8007994 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80079fc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007a00:	e7c8      	b.n	8007994 <SDMMC_GetCmdResp1+0xe0>
 8007a02:	bf00      	nop
 8007a04:	200000bc 	.word	0x200000bc
 8007a08:	10624dd3 	.word	0x10624dd3
 8007a0c:	00200045 	.word	0x00200045
 8007a10:	002000c5 	.word	0x002000c5
 8007a14:	fdffe008 	.word	0xfdffe008

08007a18 <SDMMC_GetCmdResp6>:
{
 8007a18:	b570      	push	{r4, r5, r6, lr}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a1a:	4b26      	ldr	r3, [pc, #152]	; (8007ab4 <SDMMC_GetCmdResp6+0x9c>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4c26      	ldr	r4, [pc, #152]	; (8007ab8 <SDMMC_GetCmdResp6+0xa0>)
 8007a20:	fba4 4303 	umull	r4, r3, r4, r3
 8007a24:	0a5c      	lsrs	r4, r3, #9
 8007a26:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a2a:	fb03 f304 	mul.w	r3, r3, r4
    if (count-- == 0U)
 8007a2e:	1e5c      	subs	r4, r3, #1
 8007a30:	b3b3      	cbz	r3, 8007aa0 <SDMMC_GetCmdResp6+0x88>
    sta_reg = SDMMCx->STA;
 8007a32:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8007a34:	4623      	mov	r3, r4
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007a36:	f015 0f45 	tst.w	r5, #69	; 0x45
 8007a3a:	d0f8      	beq.n	8007a2e <SDMMC_GetCmdResp6+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a3c:	f415 5f00 	tst.w	r5, #8192	; 0x2000
 8007a40:	d1f5      	bne.n	8007a2e <SDMMC_GetCmdResp6+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007a42:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007a44:	f013 0f04 	tst.w	r3, #4
 8007a48:	d107      	bne.n	8007a5a <SDMMC_GetCmdResp6+0x42>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007a4a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007a4c:	f013 0f01 	tst.w	r3, #1
 8007a50:	d007      	beq.n	8007a62 <SDMMC_GetCmdResp6+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007a52:	2301      	movs	r3, #1
 8007a54:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a56:	4618      	mov	r0, r3
 8007a58:	e024      	b.n	8007aa4 <SDMMC_GetCmdResp6+0x8c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a5a:	2304      	movs	r3, #4
 8007a5c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a5e:	4618      	mov	r0, r3
 8007a60:	e020      	b.n	8007aa4 <SDMMC_GetCmdResp6+0x8c>
 8007a62:	4616      	mov	r6, r2
 8007a64:	460d      	mov	r5, r1
 8007a66:	4604      	mov	r4, r0
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007a68:	f7ff ff1e 	bl	80078a8 <SDMMC_GetCommandResponse>
 8007a6c:	42a8      	cmp	r0, r5
 8007a6e:	d001      	beq.n	8007a74 <SDMMC_GetCmdResp6+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a70:	2001      	movs	r0, #1
 8007a72:	e017      	b.n	8007aa4 <SDMMC_GetCmdResp6+0x8c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007a74:	4b11      	ldr	r3, [pc, #68]	; (8007abc <SDMMC_GetCmdResp6+0xa4>)
 8007a76:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007a78:	2100      	movs	r1, #0
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f7ff ff17 	bl	80078ae <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007a80:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8007a84:	d008      	beq.n	8007a98 <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007a86:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8007a8a:	d10c      	bne.n	8007aa6 <SDMMC_GetCmdResp6+0x8e>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007a8c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8007a90:	d00c      	beq.n	8007aac <SDMMC_GetCmdResp6+0x94>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007a92:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007a96:	e005      	b.n	8007aa4 <SDMMC_GetCmdResp6+0x8c>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007a98:	0c00      	lsrs	r0, r0, #16
 8007a9a:	8030      	strh	r0, [r6, #0]
    return SDMMC_ERROR_NONE;
 8007a9c:	2000      	movs	r0, #0
 8007a9e:	e001      	b.n	8007aa4 <SDMMC_GetCmdResp6+0x8c>
      return SDMMC_ERROR_TIMEOUT;
 8007aa0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007aa4:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007aa6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007aaa:	e7fb      	b.n	8007aa4 <SDMMC_GetCmdResp6+0x8c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007aac:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007ab0:	e7f8      	b.n	8007aa4 <SDMMC_GetCmdResp6+0x8c>
 8007ab2:	bf00      	nop
 8007ab4:	200000bc 	.word	0x200000bc
 8007ab8:	10624dd3 	.word	0x10624dd3
 8007abc:	002000c5 	.word	0x002000c5

08007ac0 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007ac0:	680b      	ldr	r3, [r1, #0]
 8007ac2:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8007ac4:	684b      	ldr	r3, [r1, #4]
 8007ac6:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007ac8:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 8007aca:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007acc:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 8007ace:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 8007ad0:	4313      	orrs	r3, r2
                       Data->DPSM);
 8007ad2:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 8007ad4:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007ad6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8007ad8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007adc:	4313      	orrs	r3, r2
 8007ade:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	4770      	bx	lr

08007ae4 <SDMMC_CmdBlockLength>:
{
 8007ae4:	b530      	push	{r4, r5, lr}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007aea:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007aec:	2410      	movs	r4, #16
 8007aee:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007af0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007af4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007af6:	2300      	movs	r3, #0
 8007af8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007afe:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b00:	a901      	add	r1, sp, #4
 8007b02:	f7ff febf 	bl	8007884 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b0a:	4621      	mov	r1, r4
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	f7ff fed1 	bl	80078b4 <SDMMC_GetCmdResp1>
}
 8007b12:	b007      	add	sp, #28
 8007b14:	bd30      	pop	{r4, r5, pc}

08007b16 <SDMMC_CmdReadSingleBlock>:
{
 8007b16:	b530      	push	{r4, r5, lr}
 8007b18:	b087      	sub	sp, #28
 8007b1a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007b1c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007b1e:	2411      	movs	r4, #17
 8007b20:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b26:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b30:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b32:	a901      	add	r1, sp, #4
 8007b34:	f7ff fea6 	bl	8007884 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b3c:	4621      	mov	r1, r4
 8007b3e:	4628      	mov	r0, r5
 8007b40:	f7ff feb8 	bl	80078b4 <SDMMC_GetCmdResp1>
}
 8007b44:	b007      	add	sp, #28
 8007b46:	bd30      	pop	{r4, r5, pc}

08007b48 <SDMMC_CmdReadMultiBlock>:
{
 8007b48:	b530      	push	{r4, r5, lr}
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007b4e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007b50:	2412      	movs	r4, #18
 8007b52:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b58:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b62:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b64:	a901      	add	r1, sp, #4
 8007b66:	f7ff fe8d 	bl	8007884 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b6e:	4621      	mov	r1, r4
 8007b70:	4628      	mov	r0, r5
 8007b72:	f7ff fe9f 	bl	80078b4 <SDMMC_GetCmdResp1>
}
 8007b76:	b007      	add	sp, #28
 8007b78:	bd30      	pop	{r4, r5, pc}

08007b7a <SDMMC_CmdWriteSingleBlock>:
{
 8007b7a:	b530      	push	{r4, r5, lr}
 8007b7c:	b087      	sub	sp, #28
 8007b7e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007b80:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007b82:	2418      	movs	r4, #24
 8007b84:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b8a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b94:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b96:	a901      	add	r1, sp, #4
 8007b98:	f7ff fe74 	bl	8007884 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ba0:	4621      	mov	r1, r4
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	f7ff fe86 	bl	80078b4 <SDMMC_GetCmdResp1>
}
 8007ba8:	b007      	add	sp, #28
 8007baa:	bd30      	pop	{r4, r5, pc}

08007bac <SDMMC_CmdWriteMultiBlock>:
{
 8007bac:	b530      	push	{r4, r5, lr}
 8007bae:	b087      	sub	sp, #28
 8007bb0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007bb2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007bb4:	2419      	movs	r4, #25
 8007bb6:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007bb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bbc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bc6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007bc8:	a901      	add	r1, sp, #4
 8007bca:	f7ff fe5b 	bl	8007884 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	f7ff fe6d 	bl	80078b4 <SDMMC_GetCmdResp1>
}
 8007bda:	b007      	add	sp, #28
 8007bdc:	bd30      	pop	{r4, r5, pc}
	...

08007be0 <SDMMC_CmdStopTransfer>:
{
 8007be0:	b530      	push	{r4, r5, lr}
 8007be2:	b087      	sub	sp, #28
 8007be4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007bea:	250c      	movs	r5, #12
 8007bec:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007bee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bf2:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007bf4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bfa:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8007bfc:	68c3      	ldr	r3, [r0, #12]
 8007bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c02:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8007c04:	68c3      	ldr	r3, [r0, #12]
 8007c06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c0a:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c0c:	a901      	add	r1, sp, #4
 8007c0e:	f7ff fe39 	bl	8007884 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8007c12:	4a08      	ldr	r2, [pc, #32]	; (8007c34 <SDMMC_CmdStopTransfer+0x54>)
 8007c14:	4629      	mov	r1, r5
 8007c16:	4620      	mov	r0, r4
 8007c18:	f7ff fe4c 	bl	80078b4 <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8007c1c:	68e3      	ldr	r3, [r4, #12]
 8007c1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c22:	60e3      	str	r3, [r4, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8007c24:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8007c28:	d001      	beq.n	8007c2e <SDMMC_CmdStopTransfer+0x4e>
}
 8007c2a:	b007      	add	sp, #28
 8007c2c:	bd30      	pop	{r4, r5, pc}
    errorstate = SDMMC_ERROR_NONE;
 8007c2e:	2000      	movs	r0, #0
  return errorstate;
 8007c30:	e7fb      	b.n	8007c2a <SDMMC_CmdStopTransfer+0x4a>
 8007c32:	bf00      	nop
 8007c34:	05f5e100 	.word	0x05f5e100

08007c38 <SDMMC_CmdSelDesel>:
{
 8007c38:	b530      	push	{r4, r5, lr}
 8007c3a:	b087      	sub	sp, #28
 8007c3c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007c3e:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007c40:	2407      	movs	r4, #7
 8007c42:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007c44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c48:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c52:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c54:	a901      	add	r1, sp, #4
 8007c56:	f7ff fe15 	bl	8007884 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c5e:	4621      	mov	r1, r4
 8007c60:	4628      	mov	r0, r5
 8007c62:	f7ff fe27 	bl	80078b4 <SDMMC_GetCmdResp1>
}
 8007c66:	b007      	add	sp, #28
 8007c68:	bd30      	pop	{r4, r5, pc}

08007c6a <SDMMC_CmdGoIdleState>:
{
 8007c6a:	b510      	push	{r4, lr}
 8007c6c:	b086      	sub	sp, #24
 8007c6e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8007c70:	2300      	movs	r3, #0
 8007c72:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007c74:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007c76:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c78:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c7e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c80:	a901      	add	r1, sp, #4
 8007c82:	f7ff fdff 	bl	8007884 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007c86:	4620      	mov	r0, r4
 8007c88:	f7ff fd20 	bl	80076cc <SDMMC_GetCmdError>
}
 8007c8c:	b006      	add	sp, #24
 8007c8e:	bd10      	pop	{r4, pc}

08007c90 <SDMMC_CmdOperCond>:
{
 8007c90:	b510      	push	{r4, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007c96:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007c9a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007c9c:	2308      	movs	r3, #8
 8007c9e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ca4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cae:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007cb0:	a901      	add	r1, sp, #4
 8007cb2:	f7ff fde7 	bl	8007884 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f7ff fd82 	bl	80077c0 <SDMMC_GetCmdResp7>
}
 8007cbc:	b006      	add	sp, #24
 8007cbe:	bd10      	pop	{r4, pc}

08007cc0 <SDMMC_CmdAppCommand>:
{
 8007cc0:	b530      	push	{r4, r5, lr}
 8007cc2:	b087      	sub	sp, #28
 8007cc4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007cc6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007cc8:	2437      	movs	r4, #55	; 0x37
 8007cca:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ccc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cd0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cda:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007cdc:	a901      	add	r1, sp, #4
 8007cde:	f7ff fdd1 	bl	8007884 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ce6:	4621      	mov	r1, r4
 8007ce8:	4628      	mov	r0, r5
 8007cea:	f7ff fde3 	bl	80078b4 <SDMMC_GetCmdResp1>
}
 8007cee:	b007      	add	sp, #28
 8007cf0:	bd30      	pop	{r4, r5, pc}

08007cf2 <SDMMC_CmdAppOperCommand>:
{
 8007cf2:	b510      	push	{r4, lr}
 8007cf4:	b086      	sub	sp, #24
 8007cf6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007cf8:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007cfa:	2329      	movs	r3, #41	; 0x29
 8007cfc:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007cfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d02:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d04:	2300      	movs	r3, #0
 8007d06:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d0c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d0e:	a901      	add	r1, sp, #4
 8007d10:	f7ff fdb8 	bl	8007884 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007d14:	4620      	mov	r0, r4
 8007d16:	f7ff fd29 	bl	800776c <SDMMC_GetCmdResp3>
}
 8007d1a:	b006      	add	sp, #24
 8007d1c:	bd10      	pop	{r4, pc}

08007d1e <SDMMC_CmdBusWidth>:
{
 8007d1e:	b530      	push	{r4, r5, lr}
 8007d20:	b087      	sub	sp, #28
 8007d22:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007d24:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007d26:	2406      	movs	r4, #6
 8007d28:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d2e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d30:	2300      	movs	r3, #0
 8007d32:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d38:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d3a:	a901      	add	r1, sp, #4
 8007d3c:	f7ff fda2 	bl	8007884 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d44:	4621      	mov	r1, r4
 8007d46:	4628      	mov	r0, r5
 8007d48:	f7ff fdb4 	bl	80078b4 <SDMMC_GetCmdResp1>
}
 8007d4c:	b007      	add	sp, #28
 8007d4e:	bd30      	pop	{r4, r5, pc}

08007d50 <SDMMC_CmdSendSCR>:
{
 8007d50:	b530      	push	{r4, r5, lr}
 8007d52:	b087      	sub	sp, #28
 8007d54:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8007d56:	2300      	movs	r3, #0
 8007d58:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007d5a:	2433      	movs	r4, #51	; 0x33
 8007d5c:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d62:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d64:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d6a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d6c:	a901      	add	r1, sp, #4
 8007d6e:	f7ff fd89 	bl	8007884 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d76:	4621      	mov	r1, r4
 8007d78:	4628      	mov	r0, r5
 8007d7a:	f7ff fd9b 	bl	80078b4 <SDMMC_GetCmdResp1>
}
 8007d7e:	b007      	add	sp, #28
 8007d80:	bd30      	pop	{r4, r5, pc}

08007d82 <SDMMC_CmdSendCID>:
{
 8007d82:	b510      	push	{r4, lr}
 8007d84:	b086      	sub	sp, #24
 8007d86:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007d8c:	2202      	movs	r2, #2
 8007d8e:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007d90:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007d94:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d96:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d9c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d9e:	a901      	add	r1, sp, #4
 8007da0:	f7ff fd70 	bl	8007884 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007da4:	4620      	mov	r0, r4
 8007da6:	f7ff fcaf 	bl	8007708 <SDMMC_GetCmdResp2>
}
 8007daa:	b006      	add	sp, #24
 8007dac:	bd10      	pop	{r4, pc}

08007dae <SDMMC_CmdSendCSD>:
{
 8007dae:	b510      	push	{r4, lr}
 8007db0:	b086      	sub	sp, #24
 8007db2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007db4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007db6:	2309      	movs	r3, #9
 8007db8:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007dba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007dbe:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007dc8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007dca:	a901      	add	r1, sp, #4
 8007dcc:	f7ff fd5a 	bl	8007884 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	f7ff fc99 	bl	8007708 <SDMMC_GetCmdResp2>
}
 8007dd6:	b006      	add	sp, #24
 8007dd8:	bd10      	pop	{r4, pc}

08007dda <SDMMC_CmdSetRelAdd>:
{
 8007dda:	b570      	push	{r4, r5, r6, lr}
 8007ddc:	b086      	sub	sp, #24
 8007dde:	4605      	mov	r5, r0
 8007de0:	460e      	mov	r6, r1
  sdmmc_cmdinit.Argument         = 0U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007de6:	2403      	movs	r4, #3
 8007de8:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007dea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007dee:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007df0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007df6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007df8:	a901      	add	r1, sp, #4
 8007dfa:	f7ff fd43 	bl	8007884 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007dfe:	4632      	mov	r2, r6
 8007e00:	4621      	mov	r1, r4
 8007e02:	4628      	mov	r0, r5
 8007e04:	f7ff fe08 	bl	8007a18 <SDMMC_GetCmdResp6>
}
 8007e08:	b006      	add	sp, #24
 8007e0a:	bd70      	pop	{r4, r5, r6, pc}

08007e0c <SDMMC_CmdSendStatus>:
{
 8007e0c:	b530      	push	{r4, r5, lr}
 8007e0e:	b087      	sub	sp, #28
 8007e10:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007e12:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007e14:	240d      	movs	r4, #13
 8007e16:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e1c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e26:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e28:	a901      	add	r1, sp, #4
 8007e2a:	f7ff fd2b 	bl	8007884 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e32:	4621      	mov	r1, r4
 8007e34:	4628      	mov	r0, r5
 8007e36:	f7ff fd3d 	bl	80078b4 <SDMMC_GetCmdResp1>
}
 8007e3a:	b007      	add	sp, #28
 8007e3c:	bd30      	pop	{r4, r5, pc}

08007e3e <SDMMC_CmdStatusRegister>:
{
 8007e3e:	b530      	push	{r4, r5, lr}
 8007e40:	b087      	sub	sp, #28
 8007e42:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8007e44:	2300      	movs	r3, #0
 8007e46:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8007e48:	240d      	movs	r4, #13
 8007e4a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e50:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e52:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e58:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e5a:	a901      	add	r1, sp, #4
 8007e5c:	f7ff fd12 	bl	8007884 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8007e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e64:	4621      	mov	r1, r4
 8007e66:	4628      	mov	r0, r5
 8007e68:	f7ff fd24 	bl	80078b4 <SDMMC_GetCmdResp1>
}
 8007e6c:	b007      	add	sp, #28
 8007e6e:	bd30      	pop	{r4, r5, pc}

08007e70 <SDMMC_CmdVoltageSwitch>:
{
 8007e70:	b530      	push	{r4, r5, lr}
 8007e72:	b087      	sub	sp, #28
 8007e74:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0x00000000;
 8007e76:	2300      	movs	r3, #0
 8007e78:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8007e7a:	240b      	movs	r4, #11
 8007e7c:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e82:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e84:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e8a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e8c:	a901      	add	r1, sp, #4
 8007e8e:	f7ff fcf9 	bl	8007884 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8007e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e96:	4621      	mov	r1, r4
 8007e98:	4628      	mov	r0, r5
 8007e9a:	f7ff fd0b 	bl	80078b4 <SDMMC_GetCmdResp1>
}
 8007e9e:	b007      	add	sp, #28
 8007ea0:	bd30      	pop	{r4, r5, pc}
	...

08007ea4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007ea4:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007ea6:	4b04      	ldr	r3, [pc, #16]	; (8007eb8 <disk_status+0x14>)
 8007ea8:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8007eac:	6852      	ldr	r2, [r2, #4]
 8007eae:	6852      	ldr	r2, [r2, #4]
 8007eb0:	4403      	add	r3, r0
 8007eb2:	7a18      	ldrb	r0, [r3, #8]
 8007eb4:	4790      	blx	r2
  return stat;
}
 8007eb6:	bd08      	pop	{r3, pc}
 8007eb8:	20000374 	.word	0x20000374

08007ebc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007ebc:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8007ebe:	4b08      	ldr	r3, [pc, #32]	; (8007ee0 <disk_initialize+0x24>)
 8007ec0:	5c1b      	ldrb	r3, [r3, r0]
 8007ec2:	b953      	cbnz	r3, 8007eda <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 8007ec4:	4b06      	ldr	r3, [pc, #24]	; (8007ee0 <disk_initialize+0x24>)
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007eca:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8007ece:	6852      	ldr	r2, [r2, #4]
 8007ed0:	6812      	ldr	r2, [r2, #0]
 8007ed2:	4418      	add	r0, r3
 8007ed4:	7a00      	ldrb	r0, [r0, #8]
 8007ed6:	4790      	blx	r2
  }
  return stat;
}
 8007ed8:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 8007eda:	2000      	movs	r0, #0
 8007edc:	e7fc      	b.n	8007ed8 <disk_initialize+0x1c>
 8007ede:	bf00      	nop
 8007ee0:	20000374 	.word	0x20000374

08007ee4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007ee4:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007ee6:	4c04      	ldr	r4, [pc, #16]	; (8007ef8 <disk_read+0x14>)
 8007ee8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8007eec:	686d      	ldr	r5, [r5, #4]
 8007eee:	68ad      	ldr	r5, [r5, #8]
 8007ef0:	4404      	add	r4, r0
 8007ef2:	7a20      	ldrb	r0, [r4, #8]
 8007ef4:	47a8      	blx	r5
  return res;
}
 8007ef6:	bd38      	pop	{r3, r4, r5, pc}
 8007ef8:	20000374 	.word	0x20000374

08007efc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007efc:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007efe:	4c04      	ldr	r4, [pc, #16]	; (8007f10 <disk_write+0x14>)
 8007f00:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8007f04:	686d      	ldr	r5, [r5, #4]
 8007f06:	68ed      	ldr	r5, [r5, #12]
 8007f08:	4404      	add	r4, r0
 8007f0a:	7a20      	ldrb	r0, [r4, #8]
 8007f0c:	47a8      	blx	r5
  return res;
}
 8007f0e:	bd38      	pop	{r3, r4, r5, pc}
 8007f10:	20000374 	.word	0x20000374

08007f14 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007f14:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007f16:	4b04      	ldr	r3, [pc, #16]	; (8007f28 <disk_ioctl+0x14>)
 8007f18:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8007f1c:	6864      	ldr	r4, [r4, #4]
 8007f1e:	6924      	ldr	r4, [r4, #16]
 8007f20:	4403      	add	r3, r0
 8007f22:	7a18      	ldrb	r0, [r3, #8]
 8007f24:	47a0      	blx	r4
  return res;
}
 8007f26:	bd10      	pop	{r4, pc}
 8007f28:	20000374 	.word	0x20000374

08007f2c <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 8007f2c:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 8007f2e:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8007f30:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8007f34:	4770      	bx	lr

08007f36 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 8007f36:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 8007f38:	7883      	ldrb	r3, [r0, #2]
 8007f3a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 8007f3e:	7843      	ldrb	r3, [r0, #1]
 8007f40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8007f44:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8007f46:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8007f4a:	4770      	bx	lr

08007f4c <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8007f4c:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 8007f4e:	0a09      	lsrs	r1, r1, #8
 8007f50:	7041      	strb	r1, [r0, #1]
}
 8007f52:	4770      	bx	lr

08007f54 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8007f54:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f56:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8007f5a:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f5c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8007f60:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8007f62:	0e09      	lsrs	r1, r1, #24
 8007f64:	70c1      	strb	r1, [r0, #3]
}
 8007f66:	4770      	bx	lr

08007f68 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 8007f68:	4613      	mov	r3, r2
 8007f6a:	b12a      	cbz	r2, 8007f78 <mem_cpy+0x10>
		do {
			*d++ = *s++;
 8007f6c:	780a      	ldrb	r2, [r1, #0]
 8007f6e:	7002      	strb	r2, [r0, #0]
 8007f70:	3001      	adds	r0, #1
 8007f72:	3101      	adds	r1, #1
		} while (--cnt);
 8007f74:	3b01      	subs	r3, #1
 8007f76:	d1f9      	bne.n	8007f6c <mem_cpy+0x4>
	}
}
 8007f78:	4770      	bx	lr

08007f7a <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8007f7a:	7001      	strb	r1, [r0, #0]
 8007f7c:	3001      	adds	r0, #1
	} while (--cnt);
 8007f7e:	3a01      	subs	r2, #1
 8007f80:	d1fb      	bne.n	8007f7a <mem_set>
}
 8007f82:	4770      	bx	lr

08007f84 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007f84:	b430      	push	{r4, r5}
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 8007f86:	1c45      	adds	r5, r0, #1
 8007f88:	7803      	ldrb	r3, [r0, #0]
 8007f8a:	7808      	ldrb	r0, [r1, #0]
 8007f8c:	1a1b      	subs	r3, r3, r0
	} while (--cnt && r == 0);
 8007f8e:	3a01      	subs	r2, #1
 8007f90:	d004      	beq.n	8007f9c <mem_cmp+0x18>
 8007f92:	1c4c      	adds	r4, r1, #1
		r = *d++ - *s++;
 8007f94:	4628      	mov	r0, r5
 8007f96:	4621      	mov	r1, r4
	} while (--cnt && r == 0);
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d0f4      	beq.n	8007f86 <mem_cmp+0x2>

	return r;
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	bc30      	pop	{r4, r5}
 8007fa0:	4770      	bx	lr

08007fa2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
	while (*str && *str != chr) str++;
 8007fa2:	e000      	b.n	8007fa6 <chk_chr+0x4>
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	7803      	ldrb	r3, [r0, #0]
 8007fa8:	b10b      	cbz	r3, 8007fae <chk_chr+0xc>
 8007faa:	428b      	cmp	r3, r1
 8007fac:	d1fa      	bne.n	8007fa4 <chk_chr+0x2>
	return *str;
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	4770      	bx	lr
	...

08007fb4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007fb4:	b430      	push	{r4, r5}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007fb6:	2500      	movs	r5, #0
 8007fb8:	462b      	mov	r3, r5
 8007fba:	e001      	b.n	8007fc0 <chk_lock+0xc>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8007fbc:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d815      	bhi.n	8007ff0 <chk_lock+0x3c>
		if (Files[i].fs) {	/* Existing entry */
 8007fc4:	011a      	lsls	r2, r3, #4
 8007fc6:	4c17      	ldr	r4, [pc, #92]	; (8008024 <chk_lock+0x70>)
 8007fc8:	58a2      	ldr	r2, [r4, r2]
 8007fca:	2a00      	cmp	r2, #0
 8007fcc:	d0f6      	beq.n	8007fbc <chk_lock+0x8>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007fce:	6804      	ldr	r4, [r0, #0]
 8007fd0:	42a2      	cmp	r2, r4
 8007fd2:	d1f4      	bne.n	8007fbe <chk_lock+0xa>
				Files[i].clu == dp->obj.sclust &&
 8007fd4:	4a13      	ldr	r2, [pc, #76]	; (8008024 <chk_lock+0x70>)
 8007fd6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8007fda:	6854      	ldr	r4, [r2, #4]
 8007fdc:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007fde:	4294      	cmp	r4, r2
 8007fe0:	d1ed      	bne.n	8007fbe <chk_lock+0xa>
				Files[i].ofs == dp->dptr) break;
 8007fe2:	4a10      	ldr	r2, [pc, #64]	; (8008024 <chk_lock+0x70>)
 8007fe4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8007fe8:	6894      	ldr	r4, [r2, #8]
 8007fea:	6942      	ldr	r2, [r0, #20]
				Files[i].clu == dp->obj.sclust &&
 8007fec:	4294      	cmp	r4, r2
 8007fee:	d1e6      	bne.n	8007fbe <chk_lock+0xa>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d00a      	beq.n	800800a <chk_lock+0x56>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007ff4:	b9a1      	cbnz	r1, 8008020 <chk_lock+0x6c>
 8007ff6:	4a0b      	ldr	r2, [pc, #44]	; (8008024 <chk_lock+0x70>)
 8007ff8:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8007ffc:	899b      	ldrh	r3, [r3, #12]
 8007ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008002:	d009      	beq.n	8008018 <chk_lock+0x64>
 8008004:	2000      	movs	r0, #0
}
 8008006:	bc30      	pop	{r4, r5}
 8008008:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800800a:	2902      	cmp	r1, #2
 800800c:	bf08      	it	eq
 800800e:	f045 0501 	orreq.w	r5, r5, #1
 8008012:	b11d      	cbz	r5, 800801c <chk_lock+0x68>
 8008014:	2000      	movs	r0, #0
 8008016:	e7f6      	b.n	8008006 <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008018:	2010      	movs	r0, #16
 800801a:	e7f4      	b.n	8008006 <chk_lock+0x52>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800801c:	2012      	movs	r0, #18
 800801e:	e7f2      	b.n	8008006 <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008020:	2010      	movs	r0, #16
 8008022:	e7f0      	b.n	8008006 <chk_lock+0x52>
 8008024:	2000014c 	.word	0x2000014c

08008028 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008028:	2000      	movs	r0, #0
 800802a:	e000      	b.n	800802e <enq_lock+0x6>
 800802c:	3001      	adds	r0, #1
 800802e:	2801      	cmp	r0, #1
 8008030:	d804      	bhi.n	800803c <enq_lock+0x14>
 8008032:	0103      	lsls	r3, r0, #4
 8008034:	4a03      	ldr	r2, [pc, #12]	; (8008044 <enq_lock+0x1c>)
 8008036:	58d3      	ldr	r3, [r2, r3]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1f7      	bne.n	800802c <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
}
 800803c:	3802      	subs	r0, #2
 800803e:	bf18      	it	ne
 8008040:	2001      	movne	r0, #1
 8008042:	4770      	bx	lr
 8008044:	2000014c 	.word	0x2000014c

08008048 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008048:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800804a:	2300      	movs	r3, #0
 800804c:	e000      	b.n	8008050 <inc_lock+0x8>
 800804e:	3301      	adds	r3, #1
 8008050:	2b01      	cmp	r3, #1
 8008052:	d813      	bhi.n	800807c <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
 8008054:	011a      	lsls	r2, r3, #4
 8008056:	4c24      	ldr	r4, [pc, #144]	; (80080e8 <inc_lock+0xa0>)
 8008058:	58a4      	ldr	r4, [r4, r2]
 800805a:	6802      	ldr	r2, [r0, #0]
 800805c:	4294      	cmp	r4, r2
 800805e:	d1f6      	bne.n	800804e <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
 8008060:	4a21      	ldr	r2, [pc, #132]	; (80080e8 <inc_lock+0xa0>)
 8008062:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8008066:	6854      	ldr	r4, [r2, #4]
 8008068:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 800806a:	4294      	cmp	r4, r2
 800806c:	d1ef      	bne.n	800804e <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
 800806e:	4a1e      	ldr	r2, [pc, #120]	; (80080e8 <inc_lock+0xa0>)
 8008070:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8008074:	6894      	ldr	r4, [r2, #8]
 8008076:	6942      	ldr	r2, [r0, #20]
			Files[i].clu == dp->obj.sclust &&
 8008078:	4294      	cmp	r4, r2
 800807a:	d1e8      	bne.n	800804e <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800807c:	2b02      	cmp	r3, #2
 800807e:	d029      	beq.n	80080d4 <inc_lock+0x8c>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008080:	b121      	cbz	r1, 800808c <inc_lock+0x44>
 8008082:	4a19      	ldr	r2, [pc, #100]	; (80080e8 <inc_lock+0xa0>)
 8008084:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8008088:	8992      	ldrh	r2, [r2, #12]
 800808a:	bb52      	cbnz	r2, 80080e2 <inc_lock+0x9a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800808c:	bb21      	cbnz	r1, 80080d8 <inc_lock+0x90>
 800808e:	4a16      	ldr	r2, [pc, #88]	; (80080e8 <inc_lock+0xa0>)
 8008090:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8008094:	8991      	ldrh	r1, [r2, #12]
 8008096:	3101      	adds	r1, #1
 8008098:	b289      	uxth	r1, r1
 800809a:	4a13      	ldr	r2, [pc, #76]	; (80080e8 <inc_lock+0xa0>)
 800809c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80080a0:	8191      	strh	r1, [r2, #12]

	return i + 1;
 80080a2:	1c58      	adds	r0, r3, #1
}
 80080a4:	bc70      	pop	{r4, r5, r6}
 80080a6:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80080a8:	3301      	adds	r3, #1
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d804      	bhi.n	80080b8 <inc_lock+0x70>
 80080ae:	011a      	lsls	r2, r3, #4
 80080b0:	4c0d      	ldr	r4, [pc, #52]	; (80080e8 <inc_lock+0xa0>)
 80080b2:	58a2      	ldr	r2, [r4, r2]
 80080b4:	2a00      	cmp	r2, #0
 80080b6:	d1f7      	bne.n	80080a8 <inc_lock+0x60>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d010      	beq.n	80080de <inc_lock+0x96>
		Files[i].fs = dp->obj.fs;
 80080bc:	6806      	ldr	r6, [r0, #0]
 80080be:	4d0a      	ldr	r5, [pc, #40]	; (80080e8 <inc_lock+0xa0>)
 80080c0:	011c      	lsls	r4, r3, #4
 80080c2:	192a      	adds	r2, r5, r4
 80080c4:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 80080c6:	6884      	ldr	r4, [r0, #8]
 80080c8:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 80080ca:	6940      	ldr	r0, [r0, #20]
 80080cc:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 80080ce:	2000      	movs	r0, #0
 80080d0:	8190      	strh	r0, [r2, #12]
 80080d2:	e7d5      	b.n	8008080 <inc_lock+0x38>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80080d4:	2300      	movs	r3, #0
 80080d6:	e7e8      	b.n	80080aa <inc_lock+0x62>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80080d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80080dc:	e7dd      	b.n	800809a <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80080de:	2000      	movs	r0, #0
 80080e0:	e7e0      	b.n	80080a4 <inc_lock+0x5c>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80080e2:	2000      	movs	r0, #0
 80080e4:	e7de      	b.n	80080a4 <inc_lock+0x5c>
 80080e6:	bf00      	nop
 80080e8:	2000014c 	.word	0x2000014c

080080ec <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80080ec:	3801      	subs	r0, #1
 80080ee:	2801      	cmp	r0, #1
 80080f0:	d815      	bhi.n	800811e <dec_lock+0x32>
		n = Files[i].ctr;
 80080f2:	4b0d      	ldr	r3, [pc, #52]	; (8008128 <dec_lock+0x3c>)
 80080f4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80080f8:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80080fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080fe:	d003      	beq.n	8008108 <dec_lock+0x1c>
		if (n > 0) n--;				/* Decrement read mode open count */
 8008100:	b11b      	cbz	r3, 800810a <dec_lock+0x1e>
 8008102:	3b01      	subs	r3, #1
 8008104:	b29b      	uxth	r3, r3
 8008106:	e000      	b.n	800810a <dec_lock+0x1e>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008108:	2300      	movs	r3, #0
		Files[i].ctr = n;
 800810a:	4a07      	ldr	r2, [pc, #28]	; (8008128 <dec_lock+0x3c>)
 800810c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8008110:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008112:	b933      	cbnz	r3, 8008122 <dec_lock+0x36>
 8008114:	0103      	lsls	r3, r0, #4
 8008116:	2000      	movs	r0, #0
 8008118:	4a03      	ldr	r2, [pc, #12]	; (8008128 <dec_lock+0x3c>)
 800811a:	50d0      	str	r0, [r2, r3]
 800811c:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800811e:	2002      	movs	r0, #2
 8008120:	4770      	bx	lr
		res = FR_OK;
 8008122:	2000      	movs	r0, #0
	}
	return res;
}
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	2000014c 	.word	0x2000014c

0800812c <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800812c:	2300      	movs	r3, #0
 800812e:	e003      	b.n	8008138 <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 8008130:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008134:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
 8008136:	3301      	adds	r3, #1
 8008138:	2b01      	cmp	r3, #1
 800813a:	d811      	bhi.n	8008160 <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800813c:	011a      	lsls	r2, r3, #4
 800813e:	4909      	ldr	r1, [pc, #36]	; (8008164 <clear_lock+0x38>)
 8008140:	588a      	ldr	r2, [r1, r2]
 8008142:	4282      	cmp	r2, r0
 8008144:	d1f7      	bne.n	8008136 <clear_lock+0xa>
{
 8008146:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008148:	011a      	lsls	r2, r3, #4
 800814a:	2400      	movs	r4, #0
 800814c:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 800814e:	3301      	adds	r3, #1
 8008150:	2b01      	cmp	r3, #1
 8008152:	d8ed      	bhi.n	8008130 <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008154:	011a      	lsls	r2, r3, #4
 8008156:	4903      	ldr	r1, [pc, #12]	; (8008164 <clear_lock+0x38>)
 8008158:	588a      	ldr	r2, [r1, r2]
 800815a:	4282      	cmp	r2, r0
 800815c:	d1f7      	bne.n	800814e <clear_lock+0x22>
 800815e:	e7f3      	b.n	8008148 <clear_lock+0x1c>
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	2000014c 	.word	0x2000014c

08008168 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8008168:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800816a:	6983      	ldr	r3, [r0, #24]
 800816c:	3b02      	subs	r3, #2
 800816e:	428b      	cmp	r3, r1
 8008170:	d904      	bls.n	800817c <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 8008172:	8943      	ldrh	r3, [r0, #10]
 8008174:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8008176:	fb01 0003 	mla	r0, r1, r3, r0
 800817a:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800817c:	2000      	movs	r0, #0
}
 800817e:	4770      	bx	lr

08008180 <clmt_clust>:
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008180:	6802      	ldr	r2, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008182:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008184:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008186:	0a49      	lsrs	r1, r1, #9
 8008188:	8952      	ldrh	r2, [r2, #10]
 800818a:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800818e:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008190:	b130      	cbz	r0, 80081a0 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8008192:	4281      	cmp	r1, r0
 8008194:	d302      	bcc.n	800819c <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 8008196:	1a09      	subs	r1, r1, r0
 8008198:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800819a:	e7f8      	b.n	800818e <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 800819c:	6858      	ldr	r0, [r3, #4]
 800819e:	4408      	add	r0, r1
}
 80081a0:	4770      	bx	lr

080081a2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80081a2:	b570      	push	{r4, r5, r6, lr}
 80081a4:	4606      	mov	r6, r0
 80081a6:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80081a8:	f101 001a 	add.w	r0, r1, #26
 80081ac:	f7ff febe 	bl	8007f2c <ld_word>
	if (fs->fs_type == FS_FAT32) {
 80081b0:	7833      	ldrb	r3, [r6, #0]
 80081b2:	2b03      	cmp	r3, #3
 80081b4:	d000      	beq.n	80081b8 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 80081b6:	bd70      	pop	{r4, r5, r6, pc}
 80081b8:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80081ba:	f105 0014 	add.w	r0, r5, #20
 80081be:	f7ff feb5 	bl	8007f2c <ld_word>
 80081c2:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 80081c6:	e7f6      	b.n	80081b6 <ld_clust+0x14>

080081c8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80081c8:	b570      	push	{r4, r5, r6, lr}
 80081ca:	4606      	mov	r6, r0
 80081cc:	460c      	mov	r4, r1
 80081ce:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80081d0:	b291      	uxth	r1, r2
 80081d2:	f104 001a 	add.w	r0, r4, #26
 80081d6:	f7ff feb9 	bl	8007f4c <st_word>
	if (fs->fs_type == FS_FAT32) {
 80081da:	7833      	ldrb	r3, [r6, #0]
 80081dc:	2b03      	cmp	r3, #3
 80081de:	d000      	beq.n	80081e2 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 80081e0:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80081e2:	0c29      	lsrs	r1, r5, #16
 80081e4:	f104 0014 	add.w	r0, r4, #20
 80081e8:	f7ff feb0 	bl	8007f4c <st_word>
}
 80081ec:	e7f8      	b.n	80081e0 <st_clust+0x18>
	...

080081f0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80081f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081f4:	4680      	mov	r8, r0
 80081f6:	460f      	mov	r7, r1
 80081f8:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80081fa:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80081fc:	230f      	movs	r3, #15
 80081fe:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 8008200:	2400      	movs	r4, #0
 8008202:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
 8008204:	4621      	mov	r1, r4
 8008206:	f107 001a 	add.w	r0, r7, #26
 800820a:	f7ff fe9f 	bl	8007f4c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800820e:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 8008212:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8008216:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
 800821a:	4625      	mov	r5, r4
 800821c:	e002      	b.n	8008224 <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
 800821e:	3401      	adds	r4, #1
 8008220:	2c0c      	cmp	r4, #12
 8008222:	d811      	bhi.n	8008248 <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008224:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008228:	429d      	cmp	r5, r3
 800822a:	d002      	beq.n	8008232 <put_lfn+0x42>
 800822c:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 8008230:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008232:	4b0c      	ldr	r3, [pc, #48]	; (8008264 <put_lfn+0x74>)
 8008234:	5d18      	ldrb	r0, [r3, r4]
 8008236:	4629      	mov	r1, r5
 8008238:	4438      	add	r0, r7
 800823a:	f7ff fe87 	bl	8007f4c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800823e:	2d00      	cmp	r5, #0
 8008240:	d1ed      	bne.n	800821e <put_lfn+0x2e>
 8008242:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8008246:	e7ea      	b.n	800821e <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008248:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800824c:	429d      	cmp	r5, r3
 800824e:	d002      	beq.n	8008256 <put_lfn+0x66>
 8008250:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 8008254:	b90b      	cbnz	r3, 800825a <put_lfn+0x6a>
 8008256:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800825a:	f887 9000 	strb.w	r9, [r7]
}
 800825e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008262:	bf00      	nop
 8008264:	0800dbe0 	.word	0x0800dbe0

08008268 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008268:	b570      	push	{r4, r5, r6, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	4605      	mov	r5, r0
 800826e:	4616      	mov	r6, r2
 8008270:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008272:	220b      	movs	r2, #11
 8008274:	f7ff fe78 	bl	8007f68 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008278:	2c05      	cmp	r4, #5
 800827a:	d811      	bhi.n	80082a0 <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
 800827c:	2207      	movs	r2, #7
 800827e:	e01d      	b.n	80082bc <gen_numname+0x54>
 8008280:	3201      	adds	r2, #1
 8008282:	2a0f      	cmp	r2, #15
 8008284:	d80c      	bhi.n	80082a0 <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
 8008286:	f003 0101 	and.w	r1, r3, #1
 800828a:	eb01 0444 	add.w	r4, r1, r4, lsl #1
				wc >>= 1;
 800828e:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8008290:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8008294:	d0f4      	beq.n	8008280 <gen_numname+0x18>
 8008296:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
 800829a:	f084 0421 	eor.w	r4, r4, #33	; 0x21
 800829e:	e7ef      	b.n	8008280 <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC */
 80082a0:	8833      	ldrh	r3, [r6, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d0ea      	beq.n	800827c <gen_numname+0x14>
			wc = *lfn++;
 80082a6:	3602      	adds	r6, #2
			for (i = 0; i < 16; i++) {
 80082a8:	2200      	movs	r2, #0
 80082aa:	e7ea      	b.n	8008282 <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
 80082ac:	1e53      	subs	r3, r2, #1
 80082ae:	a802      	add	r0, sp, #8
 80082b0:	4402      	add	r2, r0
 80082b2:	f802 1c08 	strb.w	r1, [r2, #-8]
		seq /= 16;
	} while (seq);
 80082b6:	0924      	lsrs	r4, r4, #4
 80082b8:	d009      	beq.n	80082ce <gen_numname+0x66>
		ns[i--] = c;
 80082ba:	461a      	mov	r2, r3
		c = (BYTE)((seq % 16) + '0');
 80082bc:	f004 030f 	and.w	r3, r4, #15
 80082c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
		if (c > '9') c += 7;
 80082c4:	2939      	cmp	r1, #57	; 0x39
 80082c6:	d9f1      	bls.n	80082ac <gen_numname+0x44>
 80082c8:	f103 0137 	add.w	r1, r3, #55	; 0x37
 80082cc:	e7ee      	b.n	80082ac <gen_numname+0x44>
	ns[i] = '~';
 80082ce:	217e      	movs	r1, #126	; 0x7e
 80082d0:	4602      	mov	r2, r0
 80082d2:	441a      	add	r2, r3
 80082d4:	f802 1c08 	strb.w	r1, [r2, #-8]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80082d8:	e000      	b.n	80082dc <gen_numname+0x74>
 80082da:	3401      	adds	r4, #1
 80082dc:	429c      	cmp	r4, r3
 80082de:	d209      	bcs.n	80082f4 <gen_numname+0x8c>
 80082e0:	5d2a      	ldrb	r2, [r5, r4]
 80082e2:	2a20      	cmp	r2, #32
 80082e4:	d1f9      	bne.n	80082da <gen_numname+0x72>
 80082e6:	e005      	b.n	80082f4 <gen_numname+0x8c>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80082e8:	2120      	movs	r1, #32
 80082ea:	1c62      	adds	r2, r4, #1
 80082ec:	5529      	strb	r1, [r5, r4]
	} while (j < 8);
 80082ee:	2a07      	cmp	r2, #7
 80082f0:	d808      	bhi.n	8008304 <gen_numname+0x9c>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80082f2:	4614      	mov	r4, r2
 80082f4:	2b07      	cmp	r3, #7
 80082f6:	d8f7      	bhi.n	80082e8 <gen_numname+0x80>
 80082f8:	aa02      	add	r2, sp, #8
 80082fa:	441a      	add	r2, r3
 80082fc:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 8008300:	3301      	adds	r3, #1
 8008302:	e7f2      	b.n	80082ea <gen_numname+0x82>
}
 8008304:	b002      	add	sp, #8
 8008306:	bd70      	pop	{r4, r5, r6, pc}

08008308 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008308:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 800830a:	220b      	movs	r2, #11
	BYTE sum = 0;
 800830c:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800830e:	01c3      	lsls	r3, r0, #7
 8008310:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8008314:	7808      	ldrb	r0, [r1, #0]
 8008316:	fa50 f383 	uxtab	r3, r0, r3
 800831a:	b2d8      	uxtb	r0, r3
 800831c:	3101      	adds	r1, #1
	} while (--n);
 800831e:	3a01      	subs	r2, #1
 8008320:	d1f5      	bne.n	800830e <sum_sfn+0x6>
	return sum;
}
 8008322:	4770      	bx	lr

08008324 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008324:	6801      	ldr	r1, [r0, #0]
 8008326:	b109      	cbz	r1, 800832c <get_ldnumber+0x8>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008328:	460a      	mov	r2, r1
 800832a:	e003      	b.n	8008334 <get_ldnumber+0x10>
	int vol = -1;
 800832c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008330:	e008      	b.n	8008344 <get_ldnumber+0x20>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008332:	3201      	adds	r2, #1
 8008334:	7813      	ldrb	r3, [r2, #0]
 8008336:	2b3a      	cmp	r3, #58	; 0x3a
 8008338:	bf18      	it	ne
 800833a:	2b1f      	cmpne	r3, #31
 800833c:	d8f9      	bhi.n	8008332 <get_ldnumber+0xe>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800833e:	2b3a      	cmp	r3, #58	; 0x3a
 8008340:	d002      	beq.n	8008348 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008342:	2300      	movs	r3, #0
#endif
	}
	return vol;
}
 8008344:	4618      	mov	r0, r3
 8008346:	4770      	bx	lr
{
 8008348:	b410      	push	{r4}
			i = *tp++ - '0';
 800834a:	1c4c      	adds	r4, r1, #1
 800834c:	780b      	ldrb	r3, [r1, #0]
 800834e:	3b30      	subs	r3, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008350:	2b09      	cmp	r3, #9
 8008352:	bf98      	it	ls
 8008354:	42a2      	cmpls	r2, r4
 8008356:	d106      	bne.n	8008366 <get_ldnumber+0x42>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008358:	b943      	cbnz	r3, 800836c <get_ldnumber+0x48>
					*path = ++tt;
 800835a:	3201      	adds	r2, #1
 800835c:	6002      	str	r2, [r0, #0]
}
 800835e:	4618      	mov	r0, r3
 8008360:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008364:	4770      	bx	lr
	int vol = -1;
 8008366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800836a:	e7f8      	b.n	800835e <get_ldnumber+0x3a>
 800836c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008370:	e7f5      	b.n	800835e <get_ldnumber+0x3a>

08008372 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008372:	b538      	push	{r3, r4, r5, lr}
 8008374:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008376:	b1a8      	cbz	r0, 80083a4 <validate+0x32>
 8008378:	4604      	mov	r4, r0
 800837a:	6803      	ldr	r3, [r0, #0]
 800837c:	b1ab      	cbz	r3, 80083aa <validate+0x38>
 800837e:	781a      	ldrb	r2, [r3, #0]
 8008380:	b1aa      	cbz	r2, 80083ae <validate+0x3c>
 8008382:	8881      	ldrh	r1, [r0, #4]
 8008384:	88da      	ldrh	r2, [r3, #6]
 8008386:	4291      	cmp	r1, r2
 8008388:	d003      	beq.n	8008392 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 800838a:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800838c:	2300      	movs	r3, #0
 800838e:	602b      	str	r3, [r5, #0]
	return res;
}
 8008390:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008392:	7858      	ldrb	r0, [r3, #1]
 8008394:	f7ff fd86 	bl	8007ea4 <disk_status>
 8008398:	f010 0f01 	tst.w	r0, #1
 800839c:	d10a      	bne.n	80083b4 <validate+0x42>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800839e:	6823      	ldr	r3, [r4, #0]
			res = FR_OK;
 80083a0:	2000      	movs	r0, #0
 80083a2:	e7f4      	b.n	800838e <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 80083a4:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80083a6:	2300      	movs	r3, #0
 80083a8:	e7f1      	b.n	800838e <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 80083aa:	2009      	movs	r0, #9
 80083ac:	e7ef      	b.n	800838e <validate+0x1c>
 80083ae:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80083b0:	2300      	movs	r3, #0
 80083b2:	e7ec      	b.n	800838e <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 80083b4:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80083b6:	2300      	movs	r3, #0
 80083b8:	e7e9      	b.n	800838e <validate+0x1c>

080083ba <sync_window>:
{
 80083ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80083bc:	78c3      	ldrb	r3, [r0, #3]
 80083be:	b90b      	cbnz	r3, 80083c4 <sync_window+0xa>
	FRESULT res = FR_OK;
 80083c0:	2000      	movs	r0, #0
}
 80083c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083c4:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 80083c6:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80083c8:	f100 0734 	add.w	r7, r0, #52	; 0x34
 80083cc:	2301      	movs	r3, #1
 80083ce:	462a      	mov	r2, r5
 80083d0:	4639      	mov	r1, r7
 80083d2:	7840      	ldrb	r0, [r0, #1]
 80083d4:	f7ff fd92 	bl	8007efc <disk_write>
 80083d8:	b9a8      	cbnz	r0, 8008406 <sync_window+0x4c>
			fs->wflag = 0;
 80083da:	2300      	movs	r3, #0
 80083dc:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80083de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083e0:	1aeb      	subs	r3, r5, r3
 80083e2:	69e2      	ldr	r2, [r4, #28]
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d210      	bcs.n	800840a <sync_window+0x50>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80083e8:	78a6      	ldrb	r6, [r4, #2]
 80083ea:	2e01      	cmp	r6, #1
 80083ec:	d909      	bls.n	8008402 <sync_window+0x48>
					wsect += fs->fsize;
 80083ee:	69e3      	ldr	r3, [r4, #28]
 80083f0:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80083f2:	2301      	movs	r3, #1
 80083f4:	462a      	mov	r2, r5
 80083f6:	4639      	mov	r1, r7
 80083f8:	7860      	ldrb	r0, [r4, #1]
 80083fa:	f7ff fd7f 	bl	8007efc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80083fe:	3e01      	subs	r6, #1
 8008400:	e7f3      	b.n	80083ea <sync_window+0x30>
	FRESULT res = FR_OK;
 8008402:	2000      	movs	r0, #0
 8008404:	e7dd      	b.n	80083c2 <sync_window+0x8>
			res = FR_DISK_ERR;
 8008406:	2001      	movs	r0, #1
 8008408:	e7db      	b.n	80083c2 <sync_window+0x8>
	FRESULT res = FR_OK;
 800840a:	2000      	movs	r0, #0
 800840c:	e7d9      	b.n	80083c2 <sync_window+0x8>

0800840e <move_window>:
{
 800840e:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008410:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008412:	428b      	cmp	r3, r1
 8008414:	d012      	beq.n	800843c <move_window+0x2e>
 8008416:	4604      	mov	r4, r0
 8008418:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 800841a:	f7ff ffce 	bl	80083ba <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800841e:	4606      	mov	r6, r0
 8008420:	b968      	cbnz	r0, 800843e <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008422:	2301      	movs	r3, #1
 8008424:	462a      	mov	r2, r5
 8008426:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800842a:	7860      	ldrb	r0, [r4, #1]
 800842c:	f7ff fd5a 	bl	8007ee4 <disk_read>
 8008430:	b110      	cbz	r0, 8008438 <move_window+0x2a>
				res = FR_DISK_ERR;
 8008432:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008434:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			fs->winsect = sector;
 8008438:	6325      	str	r5, [r4, #48]	; 0x30
 800843a:	e000      	b.n	800843e <move_window+0x30>
	FRESULT res = FR_OK;
 800843c:	2600      	movs	r6, #0
}
 800843e:	4630      	mov	r0, r6
 8008440:	bd70      	pop	{r4, r5, r6, pc}
	...

08008444 <check_fs>:
{
 8008444:	b510      	push	{r4, lr}
 8008446:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008448:	2300      	movs	r3, #0
 800844a:	70c3      	strb	r3, [r0, #3]
 800844c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008450:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008452:	f7ff ffdc 	bl	800840e <move_window>
 8008456:	bb18      	cbnz	r0, 80084a0 <check_fs+0x5c>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008458:	f204 2032 	addw	r0, r4, #562	; 0x232
 800845c:	f7ff fd66 	bl	8007f2c <ld_word>
 8008460:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008464:	4298      	cmp	r0, r3
 8008466:	d11d      	bne.n	80084a4 <check_fs+0x60>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008468:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800846c:	2be9      	cmp	r3, #233	; 0xe9
 800846e:	d005      	beq.n	800847c <check_fs+0x38>
 8008470:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008472:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8008476:	4a0f      	ldr	r2, [pc, #60]	; (80084b4 <check_fs+0x70>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d115      	bne.n	80084a8 <check_fs+0x64>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800847c:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 8008480:	f7ff fd59 	bl	8007f36 <ld_dword>
 8008484:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8008488:	4b0b      	ldr	r3, [pc, #44]	; (80084b8 <check_fs+0x74>)
 800848a:	4298      	cmp	r0, r3
 800848c:	d00e      	beq.n	80084ac <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800848e:	f104 0086 	add.w	r0, r4, #134	; 0x86
 8008492:	f7ff fd50 	bl	8007f36 <ld_dword>
 8008496:	4b09      	ldr	r3, [pc, #36]	; (80084bc <check_fs+0x78>)
 8008498:	4298      	cmp	r0, r3
 800849a:	d109      	bne.n	80084b0 <check_fs+0x6c>
 800849c:	2000      	movs	r0, #0
 800849e:	e002      	b.n	80084a6 <check_fs+0x62>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80084a0:	2004      	movs	r0, #4
 80084a2:	e000      	b.n	80084a6 <check_fs+0x62>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80084a4:	2003      	movs	r0, #3
}
 80084a6:	bd10      	pop	{r4, pc}
	return 2;
 80084a8:	2002      	movs	r0, #2
 80084aa:	e7fc      	b.n	80084a6 <check_fs+0x62>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80084ac:	2000      	movs	r0, #0
 80084ae:	e7fa      	b.n	80084a6 <check_fs+0x62>
	return 2;
 80084b0:	2002      	movs	r0, #2
 80084b2:	e7f8      	b.n	80084a6 <check_fs+0x62>
 80084b4:	009000eb 	.word	0x009000eb
 80084b8:	00544146 	.word	0x00544146
 80084bc:	33544146 	.word	0x33544146

080084c0 <find_volume>:
{
 80084c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084c4:	b084      	sub	sp, #16
 80084c6:	460f      	mov	r7, r1
 80084c8:	4616      	mov	r6, r2
	*rfs = 0;
 80084ca:	2300      	movs	r3, #0
 80084cc:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 80084ce:	f7ff ff29 	bl	8008324 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80084d2:	1e05      	subs	r5, r0, #0
 80084d4:	f2c0 8147 	blt.w	8008766 <find_volume+0x2a6>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80084d8:	4bb8      	ldr	r3, [pc, #736]	; (80087bc <find_volume+0x2fc>)
 80084da:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80084de:	6a1c      	ldr	r4, [r3, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80084e0:	2c00      	cmp	r4, #0
 80084e2:	f000 8144 	beq.w	800876e <find_volume+0x2ae>
	*rfs = fs;							/* Return pointer to the file system object */
 80084e6:	603c      	str	r4, [r7, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80084e8:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80084ec:	7823      	ldrb	r3, [r4, #0]
 80084ee:	b173      	cbz	r3, 800850e <find_volume+0x4e>
		stat = disk_status(fs->drv);
 80084f0:	7860      	ldrb	r0, [r4, #1]
 80084f2:	f7ff fcd7 	bl	8007ea4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80084f6:	f010 0f01 	tst.w	r0, #1
 80084fa:	d108      	bne.n	800850e <find_volume+0x4e>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80084fc:	2e00      	cmp	r6, #0
 80084fe:	f000 8138 	beq.w	8008772 <find_volume+0x2b2>
 8008502:	f010 0f04 	tst.w	r0, #4
 8008506:	f040 8136 	bne.w	8008776 <find_volume+0x2b6>
			return FR_OK;				/* The file system object is valid */
 800850a:	2000      	movs	r0, #0
 800850c:	e12c      	b.n	8008768 <find_volume+0x2a8>
	fs->fs_type = 0;					/* Clear the file system object */
 800850e:	2300      	movs	r3, #0
 8008510:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008512:	b2e8      	uxtb	r0, r5
 8008514:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008516:	f7ff fcd1 	bl	8007ebc <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800851a:	f010 0f01 	tst.w	r0, #1
 800851e:	f040 812c 	bne.w	800877a <find_volume+0x2ba>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008522:	b11e      	cbz	r6, 800852c <find_volume+0x6c>
 8008524:	f010 0f04 	tst.w	r0, #4
 8008528:	f040 8129 	bne.w	800877e <find_volume+0x2be>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800852c:	2100      	movs	r1, #0
 800852e:	4620      	mov	r0, r4
 8008530:	f7ff ff88 	bl	8008444 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008534:	2802      	cmp	r0, #2
 8008536:	f000 80b8 	beq.w	80086aa <find_volume+0x1ea>
	bsect = 0;
 800853a:	2600      	movs	r6, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800853c:	2804      	cmp	r0, #4
 800853e:	f000 8120 	beq.w	8008782 <find_volume+0x2c2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008542:	2801      	cmp	r0, #1
 8008544:	f200 811f 	bhi.w	8008786 <find_volume+0x2c6>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008548:	f104 003f 	add.w	r0, r4, #63	; 0x3f
 800854c:	f7ff fcee 	bl	8007f2c <ld_word>
 8008550:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8008554:	f040 8119 	bne.w	800878a <find_volume+0x2ca>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008558:	f104 004a 	add.w	r0, r4, #74	; 0x4a
 800855c:	f7ff fce6 	bl	8007f2c <ld_word>
 8008560:	4607      	mov	r7, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008562:	b920      	cbnz	r0, 800856e <find_volume+0xae>
 8008564:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008568:	f7ff fce5 	bl	8007f36 <ld_dword>
 800856c:	4607      	mov	r7, r0
		fs->fsize = fasize;
 800856e:	61e7      	str	r7, [r4, #28]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008570:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8008574:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008576:	1e53      	subs	r3, r2, #1
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b01      	cmp	r3, #1
 800857c:	f200 8107 	bhi.w	800878e <find_volume+0x2ce>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008580:	fb07 f502 	mul.w	r5, r7, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008584:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
 8008588:	f8a4 800a 	strh.w	r8, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800858c:	f1b8 0f00 	cmp.w	r8, #0
 8008590:	f000 80ff 	beq.w	8008792 <find_volume+0x2d2>
 8008594:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8008598:	ea18 0f03 	tst.w	r8, r3
 800859c:	f040 80fb 	bne.w	8008796 <find_volume+0x2d6>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80085a0:	f104 0045 	add.w	r0, r4, #69	; 0x45
 80085a4:	f7ff fcc2 	bl	8007f2c <ld_word>
 80085a8:	4682      	mov	sl, r0
 80085aa:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80085ac:	f010 0f0f 	tst.w	r0, #15
 80085b0:	f040 80f3 	bne.w	800879a <find_volume+0x2da>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80085b4:	f104 0047 	add.w	r0, r4, #71	; 0x47
 80085b8:	f7ff fcb8 	bl	8007f2c <ld_word>
 80085bc:	4681      	mov	r9, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80085be:	b920      	cbnz	r0, 80085ca <find_volume+0x10a>
 80085c0:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80085c4:	f7ff fcb7 	bl	8007f36 <ld_dword>
 80085c8:	4681      	mov	r9, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80085ca:	f104 0042 	add.w	r0, r4, #66	; 0x42
 80085ce:	f7ff fcad 	bl	8007f2c <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80085d2:	4601      	mov	r1, r0
 80085d4:	2800      	cmp	r0, #0
 80085d6:	f000 80e2 	beq.w	800879e <find_volume+0x2de>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80085da:	1942      	adds	r2, r0, r5
 80085dc:	eb02 121a 	add.w	r2, r2, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80085e0:	4591      	cmp	r9, r2
 80085e2:	f0c0 80de 	bcc.w	80087a2 <find_volume+0x2e2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80085e6:	eba9 0302 	sub.w	r3, r9, r2
 80085ea:	fbb3 f3f8 	udiv	r3, r3, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f000 80d9 	beq.w	80087a6 <find_volume+0x2e6>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80085f4:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 80085f8:	4283      	cmp	r3, r0
 80085fa:	d96e      	bls.n	80086da <find_volume+0x21a>
		fmt = FS_FAT32;
 80085fc:	f04f 0903 	mov.w	r9, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008600:	f640 70f5 	movw	r0, #4085	; 0xff5
 8008604:	4283      	cmp	r3, r0
 8008606:	d801      	bhi.n	800860c <find_volume+0x14c>
 8008608:	f04f 0901 	mov.w	r9, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800860c:	f103 0802 	add.w	r8, r3, #2
 8008610:	f8c4 8018 	str.w	r8, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008614:	6226      	str	r6, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008616:	198b      	adds	r3, r1, r6
 8008618:	6263      	str	r3, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800861a:	4432      	add	r2, r6
 800861c:	62e2      	str	r2, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800861e:	f1b9 0f03 	cmp.w	r9, #3
 8008622:	d05d      	beq.n	80086e0 <find_volume+0x220>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008624:	f1ba 0f00 	cmp.w	sl, #0
 8008628:	f000 80c3 	beq.w	80087b2 <find_volume+0x2f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800862c:	442b      	add	r3, r5
 800862e:	62a3      	str	r3, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008630:	f1b9 0f02 	cmp.w	r9, #2
 8008634:	d065      	beq.n	8008702 <find_volume+0x242>
 8008636:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 800863a:	f008 0301 	and.w	r3, r8, #1
 800863e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008642:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008646:	ebb7 2f53 	cmp.w	r7, r3, lsr #9
 800864a:	f0c0 80b4 	bcc.w	80087b6 <find_volume+0x2f6>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800864e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008652:	6163      	str	r3, [r4, #20]
 8008654:	6123      	str	r3, [r4, #16]
		fs->fsi_flag = 0x80;
 8008656:	2380      	movs	r3, #128	; 0x80
 8008658:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800865a:	f1b9 0f03 	cmp.w	r9, #3
 800865e:	d053      	beq.n	8008708 <find_volume+0x248>
	fs->fs_type = fmt;		/* FAT sub-type */
 8008660:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 8008664:	4a55      	ldr	r2, [pc, #340]	; (80087bc <find_volume+0x2fc>)
 8008666:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 8008668:	3301      	adds	r3, #1
 800866a:	b29b      	uxth	r3, r3
 800866c:	8493      	strh	r3, [r2, #36]	; 0x24
 800866e:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008670:	3228      	adds	r2, #40	; 0x28
 8008672:	60e2      	str	r2, [r4, #12]
	clear_lock(fs);
 8008674:	4620      	mov	r0, r4
 8008676:	f7ff fd59 	bl	800812c <clear_lock>
	return FR_OK;
 800867a:	2000      	movs	r0, #0
 800867c:	e074      	b.n	8008768 <find_volume+0x2a8>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800867e:	2000      	movs	r0, #0
 8008680:	ab04      	add	r3, sp, #16
 8008682:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8008686:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800868a:	3501      	adds	r5, #1
 800868c:	2d03      	cmp	r5, #3
 800868e:	d80e      	bhi.n	80086ae <find_volume+0x1ee>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008690:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8008694:	012b      	lsls	r3, r5, #4
 8008696:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800869a:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800869c:	7903      	ldrb	r3, [r0, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d0ed      	beq.n	800867e <find_volume+0x1be>
 80086a2:	3008      	adds	r0, #8
 80086a4:	f7ff fc47 	bl	8007f36 <ld_dword>
 80086a8:	e7ea      	b.n	8008680 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80086aa:	2500      	movs	r5, #0
 80086ac:	e7ee      	b.n	800868c <find_volume+0x1cc>
 80086ae:	2500      	movs	r5, #0
 80086b0:	e00a      	b.n	80086c8 <find_volume+0x208>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80086b2:	4631      	mov	r1, r6
 80086b4:	4620      	mov	r0, r4
 80086b6:	f7ff fec5 	bl	8008444 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80086ba:	2801      	cmp	r0, #1
 80086bc:	f67f af3e 	bls.w	800853c <find_volume+0x7c>
 80086c0:	3501      	adds	r5, #1
 80086c2:	2d03      	cmp	r5, #3
 80086c4:	f63f af3a 	bhi.w	800853c <find_volume+0x7c>
			bsect = br[i];
 80086c8:	ab04      	add	r3, sp, #16
 80086ca:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80086ce:	f853 6c10 	ldr.w	r6, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80086d2:	2e00      	cmp	r6, #0
 80086d4:	d1ed      	bne.n	80086b2 <find_volume+0x1f2>
 80086d6:	2003      	movs	r0, #3
 80086d8:	e7f2      	b.n	80086c0 <find_volume+0x200>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80086da:	f04f 0902 	mov.w	r9, #2
 80086de:	e78f      	b.n	8008600 <find_volume+0x140>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80086e0:	f104 005e 	add.w	r0, r4, #94	; 0x5e
 80086e4:	f7ff fc22 	bl	8007f2c <ld_word>
 80086e8:	2800      	cmp	r0, #0
 80086ea:	d15e      	bne.n	80087aa <find_volume+0x2ea>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80086ec:	f1ba 0f00 	cmp.w	sl, #0
 80086f0:	d15d      	bne.n	80087ae <find_volume+0x2ee>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80086f2:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80086f6:	f7ff fc1e 	bl	8007f36 <ld_dword>
 80086fa:	62a0      	str	r0, [r4, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80086fc:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8008700:	e79f      	b.n	8008642 <find_volume+0x182>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008702:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8008706:	e79c      	b.n	8008642 <find_volume+0x182>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008708:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800870c:	f7ff fc0e 	bl	8007f2c <ld_word>
 8008710:	2801      	cmp	r0, #1
 8008712:	d1a5      	bne.n	8008660 <find_volume+0x1a0>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008714:	1c71      	adds	r1, r6, #1
 8008716:	4620      	mov	r0, r4
 8008718:	f7ff fe79 	bl	800840e <move_window>
 800871c:	2800      	cmp	r0, #0
 800871e:	d19f      	bne.n	8008660 <find_volume+0x1a0>
			fs->fsi_flag = 0;
 8008720:	2300      	movs	r3, #0
 8008722:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008724:	f204 2032 	addw	r0, r4, #562	; 0x232
 8008728:	f7ff fc00 	bl	8007f2c <ld_word>
 800872c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008730:	4298      	cmp	r0, r3
 8008732:	d195      	bne.n	8008660 <find_volume+0x1a0>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008734:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8008738:	f7ff fbfd 	bl	8007f36 <ld_dword>
 800873c:	4b20      	ldr	r3, [pc, #128]	; (80087c0 <find_volume+0x300>)
 800873e:	4298      	cmp	r0, r3
 8008740:	d18e      	bne.n	8008660 <find_volume+0x1a0>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008742:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8008746:	f7ff fbf6 	bl	8007f36 <ld_dword>
 800874a:	4b1e      	ldr	r3, [pc, #120]	; (80087c4 <find_volume+0x304>)
 800874c:	4298      	cmp	r0, r3
 800874e:	d187      	bne.n	8008660 <find_volume+0x1a0>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008750:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8008754:	f7ff fbef 	bl	8007f36 <ld_dword>
 8008758:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800875a:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800875e:	f7ff fbea 	bl	8007f36 <ld_dword>
 8008762:	6120      	str	r0, [r4, #16]
 8008764:	e77c      	b.n	8008660 <find_volume+0x1a0>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008766:	200b      	movs	r0, #11
}
 8008768:	b004      	add	sp, #16
 800876a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800876e:	200c      	movs	r0, #12
 8008770:	e7fa      	b.n	8008768 <find_volume+0x2a8>
			return FR_OK;				/* The file system object is valid */
 8008772:	2000      	movs	r0, #0
 8008774:	e7f8      	b.n	8008768 <find_volume+0x2a8>
				return FR_WRITE_PROTECTED;
 8008776:	200a      	movs	r0, #10
 8008778:	e7f6      	b.n	8008768 <find_volume+0x2a8>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800877a:	2003      	movs	r0, #3
 800877c:	e7f4      	b.n	8008768 <find_volume+0x2a8>
		return FR_WRITE_PROTECTED;
 800877e:	200a      	movs	r0, #10
 8008780:	e7f2      	b.n	8008768 <find_volume+0x2a8>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008782:	2001      	movs	r0, #1
 8008784:	e7f0      	b.n	8008768 <find_volume+0x2a8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008786:	200d      	movs	r0, #13
 8008788:	e7ee      	b.n	8008768 <find_volume+0x2a8>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800878a:	200d      	movs	r0, #13
 800878c:	e7ec      	b.n	8008768 <find_volume+0x2a8>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800878e:	200d      	movs	r0, #13
 8008790:	e7ea      	b.n	8008768 <find_volume+0x2a8>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008792:	200d      	movs	r0, #13
 8008794:	e7e8      	b.n	8008768 <find_volume+0x2a8>
 8008796:	200d      	movs	r0, #13
 8008798:	e7e6      	b.n	8008768 <find_volume+0x2a8>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800879a:	200d      	movs	r0, #13
 800879c:	e7e4      	b.n	8008768 <find_volume+0x2a8>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800879e:	200d      	movs	r0, #13
 80087a0:	e7e2      	b.n	8008768 <find_volume+0x2a8>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80087a2:	200d      	movs	r0, #13
 80087a4:	e7e0      	b.n	8008768 <find_volume+0x2a8>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80087a6:	200d      	movs	r0, #13
 80087a8:	e7de      	b.n	8008768 <find_volume+0x2a8>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80087aa:	200d      	movs	r0, #13
 80087ac:	e7dc      	b.n	8008768 <find_volume+0x2a8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80087ae:	200d      	movs	r0, #13
 80087b0:	e7da      	b.n	8008768 <find_volume+0x2a8>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80087b2:	200d      	movs	r0, #13
 80087b4:	e7d8      	b.n	8008768 <find_volume+0x2a8>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80087b6:	200d      	movs	r0, #13
 80087b8:	e7d6      	b.n	8008768 <find_volume+0x2a8>
 80087ba:	bf00      	nop
 80087bc:	2000014c 	.word	0x2000014c
 80087c0:	41615252 	.word	0x41615252
 80087c4:	61417272 	.word	0x61417272

080087c8 <put_fat>:
{
 80087c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80087cc:	2901      	cmp	r1, #1
 80087ce:	d97a      	bls.n	80088c6 <put_fat+0xfe>
 80087d0:	6983      	ldr	r3, [r0, #24]
 80087d2:	428b      	cmp	r3, r1
 80087d4:	d979      	bls.n	80088ca <put_fat+0x102>
 80087d6:	4617      	mov	r7, r2
 80087d8:	460c      	mov	r4, r1
 80087da:	4606      	mov	r6, r0
		switch (fs->fs_type) {
 80087dc:	7803      	ldrb	r3, [r0, #0]
 80087de:	2b02      	cmp	r3, #2
 80087e0:	d043      	beq.n	800886a <put_fat+0xa2>
 80087e2:	2b03      	cmp	r3, #3
 80087e4:	d054      	beq.n	8008890 <put_fat+0xc8>
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d001      	beq.n	80087ee <put_fat+0x26>
	FRESULT res = FR_INT_ERR;
 80087ea:	2502      	movs	r5, #2
 80087ec:	e06e      	b.n	80088cc <put_fat+0x104>
			bc = (UINT)clst; bc += bc / 2;
 80087ee:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80087f2:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80087f4:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 80087f8:	f7ff fe09 	bl	800840e <move_window>
			if (res != FR_OK) break;
 80087fc:	4605      	mov	r5, r0
 80087fe:	2800      	cmp	r0, #0
 8008800:	d164      	bne.n	80088cc <put_fat+0x104>
			p = fs->win + bc++ % SS(fs);
 8008802:	f106 0a34 	add.w	sl, r6, #52	; 0x34
 8008806:	f108 0901 	add.w	r9, r8, #1
 800880a:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800880e:	f014 0401 	ands.w	r4, r4, #1
 8008812:	d01f      	beq.n	8008854 <put_fat+0x8c>
 8008814:	f91a 3008 	ldrsb.w	r3, [sl, r8]
 8008818:	f003 030f 	and.w	r3, r3, #15
 800881c:	013a      	lsls	r2, r7, #4
 800881e:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8008822:	4313      	orrs	r3, r2
 8008824:	b2db      	uxtb	r3, r3
 8008826:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 800882a:	2301      	movs	r3, #1
 800882c:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800882e:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8008830:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 8008834:	4630      	mov	r0, r6
 8008836:	f7ff fdea 	bl	800840e <move_window>
			if (res != FR_OK) break;
 800883a:	4605      	mov	r5, r0
 800883c:	2800      	cmp	r0, #0
 800883e:	d145      	bne.n	80088cc <put_fat+0x104>
			p = fs->win + bc % SS(fs);
 8008840:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008844:	b144      	cbz	r4, 8008858 <put_fat+0x90>
 8008846:	f3c7 1207 	ubfx	r2, r7, #4, #8
 800884a:	f80a 2009 	strb.w	r2, [sl, r9]
			fs->wflag = 1;
 800884e:	2301      	movs	r3, #1
 8008850:	70f3      	strb	r3, [r6, #3]
			break;
 8008852:	e03b      	b.n	80088cc <put_fat+0x104>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008854:	b2fb      	uxtb	r3, r7
 8008856:	e7e6      	b.n	8008826 <put_fat+0x5e>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008858:	f91a 2009 	ldrsb.w	r2, [sl, r9]
 800885c:	f022 020f 	bic.w	r2, r2, #15
 8008860:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8008864:	433a      	orrs	r2, r7
 8008866:	b2d2      	uxtb	r2, r2
 8008868:	e7ef      	b.n	800884a <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800886a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800886c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8008870:	f7ff fdcd 	bl	800840e <move_window>
			if (res != FR_OK) break;
 8008874:	4605      	mov	r5, r0
 8008876:	bb48      	cbnz	r0, 80088cc <put_fat+0x104>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008878:	f106 0034 	add.w	r0, r6, #52	; 0x34
 800887c:	0064      	lsls	r4, r4, #1
 800887e:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8008882:	b2b9      	uxth	r1, r7
 8008884:	4420      	add	r0, r4
 8008886:	f7ff fb61 	bl	8007f4c <st_word>
			fs->wflag = 1;
 800888a:	2301      	movs	r3, #1
 800888c:	70f3      	strb	r3, [r6, #3]
			break;
 800888e:	e01d      	b.n	80088cc <put_fat+0x104>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008890:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008892:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8008896:	f7ff fdba 	bl	800840e <move_window>
			if (res != FR_OK) break;
 800889a:	4605      	mov	r5, r0
 800889c:	b9b0      	cbnz	r0, 80088cc <put_fat+0x104>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800889e:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 80088a2:	f106 0334 	add.w	r3, r6, #52	; 0x34
 80088a6:	00a1      	lsls	r1, r4, #2
 80088a8:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
 80088ac:	185c      	adds	r4, r3, r1
 80088ae:	4620      	mov	r0, r4
 80088b0:	f7ff fb41 	bl	8007f36 <ld_dword>
 80088b4:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80088b8:	4339      	orrs	r1, r7
 80088ba:	4620      	mov	r0, r4
 80088bc:	f7ff fb4a 	bl	8007f54 <st_dword>
			fs->wflag = 1;
 80088c0:	2301      	movs	r3, #1
 80088c2:	70f3      	strb	r3, [r6, #3]
			break;
 80088c4:	e002      	b.n	80088cc <put_fat+0x104>
	FRESULT res = FR_INT_ERR;
 80088c6:	2502      	movs	r5, #2
 80088c8:	e000      	b.n	80088cc <put_fat+0x104>
 80088ca:	2502      	movs	r5, #2
}
 80088cc:	4628      	mov	r0, r5
 80088ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080088d2 <get_fat>:
{
 80088d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 80088d4:	6806      	ldr	r6, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80088d6:	2901      	cmp	r1, #1
 80088d8:	d953      	bls.n	8008982 <get_fat+0xb0>
 80088da:	69b3      	ldr	r3, [r6, #24]
 80088dc:	428b      	cmp	r3, r1
 80088de:	d952      	bls.n	8008986 <get_fat+0xb4>
 80088e0:	460c      	mov	r4, r1
		switch (fs->fs_type) {
 80088e2:	7833      	ldrb	r3, [r6, #0]
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d02b      	beq.n	8008940 <get_fat+0x6e>
 80088e8:	2b03      	cmp	r3, #3
 80088ea:	d039      	beq.n	8008960 <get_fat+0x8e>
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d001      	beq.n	80088f4 <get_fat+0x22>
			val = 1;	/* Internal error */
 80088f0:	2001      	movs	r0, #1
 80088f2:	e047      	b.n	8008984 <get_fat+0xb2>
			bc = (UINT)clst; bc += bc / 2;
 80088f4:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088f8:	6a71      	ldr	r1, [r6, #36]	; 0x24
 80088fa:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 80088fe:	4630      	mov	r0, r6
 8008900:	f7ff fd85 	bl	800840e <move_window>
 8008904:	2800      	cmp	r0, #0
 8008906:	d140      	bne.n	800898a <get_fat+0xb8>
			wc = fs->win[bc++ % SS(fs)];
 8008908:	1c6f      	adds	r7, r5, #1
 800890a:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800890e:	4435      	add	r5, r6
 8008910:	f895 5034 	ldrb.w	r5, [r5, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008914:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8008916:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800891a:	4630      	mov	r0, r6
 800891c:	f7ff fd77 	bl	800840e <move_window>
 8008920:	bbb0      	cbnz	r0, 8008990 <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008922:	f3c7 0308 	ubfx	r3, r7, #0, #9
 8008926:	4433      	add	r3, r6
 8008928:	f893 0034 	ldrb.w	r0, [r3, #52]	; 0x34
 800892c:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008930:	f014 0f01 	tst.w	r4, #1
 8008934:	d001      	beq.n	800893a <get_fat+0x68>
 8008936:	0900      	lsrs	r0, r0, #4
 8008938:	e024      	b.n	8008984 <get_fat+0xb2>
 800893a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800893e:	e021      	b.n	8008984 <get_fat+0xb2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008940:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8008942:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8008946:	4630      	mov	r0, r6
 8008948:	f7ff fd61 	bl	800840e <move_window>
 800894c:	bb18      	cbnz	r0, 8008996 <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800894e:	f106 0034 	add.w	r0, r6, #52	; 0x34
 8008952:	0061      	lsls	r1, r4, #1
 8008954:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 8008958:	4408      	add	r0, r1
 800895a:	f7ff fae7 	bl	8007f2c <ld_word>
			break;
 800895e:	e011      	b.n	8008984 <get_fat+0xb2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008960:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8008962:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8008966:	4630      	mov	r0, r6
 8008968:	f7ff fd51 	bl	800840e <move_window>
 800896c:	b9b0      	cbnz	r0, 800899c <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800896e:	3634      	adds	r6, #52	; 0x34
 8008970:	00a1      	lsls	r1, r4, #2
 8008972:	f401 70fe 	and.w	r0, r1, #508	; 0x1fc
 8008976:	4430      	add	r0, r6
 8008978:	f7ff fadd 	bl	8007f36 <ld_dword>
 800897c:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8008980:	e000      	b.n	8008984 <get_fat+0xb2>
		val = 1;	/* Internal error */
 8008982:	2001      	movs	r0, #1
}
 8008984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8008986:	2001      	movs	r0, #1
 8008988:	e7fc      	b.n	8008984 <get_fat+0xb2>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800898a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800898e:	e7f9      	b.n	8008984 <get_fat+0xb2>
 8008990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008994:	e7f6      	b.n	8008984 <get_fat+0xb2>
 8008996:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800899a:	e7f3      	b.n	8008984 <get_fat+0xb2>
 800899c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return val;
 80089a0:	e7f0      	b.n	8008984 <get_fat+0xb2>

080089a2 <dir_sdi>:
{
 80089a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 80089a6:	6807      	ldr	r7, [r0, #0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80089a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80089ac:	d23b      	bcs.n	8008a26 <dir_sdi+0x84>
 80089ae:	4606      	mov	r6, r0
 80089b0:	460d      	mov	r5, r1
 80089b2:	f011 0f1f 	tst.w	r1, #31
 80089b6:	d139      	bne.n	8008a2c <dir_sdi+0x8a>
	dp->dptr = ofs;				/* Set current offset */
 80089b8:	6171      	str	r1, [r6, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80089ba:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80089bc:	b91c      	cbnz	r4, 80089c6 <dir_sdi+0x24>
 80089be:	783b      	ldrb	r3, [r7, #0]
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d900      	bls.n	80089c6 <dir_sdi+0x24>
		clst = fs->dirbase;
 80089c4:	6abc      	ldr	r4, [r7, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80089c6:	b994      	cbnz	r4, 80089ee <dir_sdi+0x4c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80089c8:	893b      	ldrh	r3, [r7, #8]
 80089ca:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 80089ce:	d92f      	bls.n	8008a30 <dir_sdi+0x8e>
		dp->sect = fs->dirbase;
 80089d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d2:	61f3      	str	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 80089d4:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 80089d6:	69f3      	ldr	r3, [r6, #28]
 80089d8:	b393      	cbz	r3, 8008a40 <dir_sdi+0x9e>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80089da:	eb03 2355 	add.w	r3, r3, r5, lsr #9
 80089de:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80089e0:	3734      	adds	r7, #52	; 0x34
 80089e2:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80089e6:	443d      	add	r5, r7
 80089e8:	6235      	str	r5, [r6, #32]
	return FR_OK;
 80089ea:	2000      	movs	r0, #0
 80089ec:	e01c      	b.n	8008a28 <dir_sdi+0x86>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80089ee:	f8b7 800a 	ldrh.w	r8, [r7, #10]
 80089f2:	ea4f 2848 	mov.w	r8, r8, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 80089f6:	4545      	cmp	r5, r8
 80089f8:	d30f      	bcc.n	8008a1a <dir_sdi+0x78>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80089fa:	4621      	mov	r1, r4
 80089fc:	4630      	mov	r0, r6
 80089fe:	f7ff ff68 	bl	80088d2 <get_fat>
 8008a02:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008a04:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008a08:	d014      	beq.n	8008a34 <dir_sdi+0x92>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008a0a:	2801      	cmp	r0, #1
 8008a0c:	d914      	bls.n	8008a38 <dir_sdi+0x96>
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	4283      	cmp	r3, r0
 8008a12:	d913      	bls.n	8008a3c <dir_sdi+0x9a>
			ofs -= csz;
 8008a14:	eba5 0508 	sub.w	r5, r5, r8
 8008a18:	e7ed      	b.n	80089f6 <dir_sdi+0x54>
		dp->sect = clust2sect(fs, clst);
 8008a1a:	4621      	mov	r1, r4
 8008a1c:	4638      	mov	r0, r7
 8008a1e:	f7ff fba3 	bl	8008168 <clust2sect>
 8008a22:	61f0      	str	r0, [r6, #28]
 8008a24:	e7d6      	b.n	80089d4 <dir_sdi+0x32>
		return FR_INT_ERR;
 8008a26:	2002      	movs	r0, #2
}
 8008a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
 8008a2c:	2002      	movs	r0, #2
 8008a2e:	e7fb      	b.n	8008a28 <dir_sdi+0x86>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008a30:	2002      	movs	r0, #2
 8008a32:	e7f9      	b.n	8008a28 <dir_sdi+0x86>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008a34:	2001      	movs	r0, #1
 8008a36:	e7f7      	b.n	8008a28 <dir_sdi+0x86>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008a38:	2002      	movs	r0, #2
 8008a3a:	e7f5      	b.n	8008a28 <dir_sdi+0x86>
 8008a3c:	2002      	movs	r0, #2
 8008a3e:	e7f3      	b.n	8008a28 <dir_sdi+0x86>
	if (!dp->sect) return FR_INT_ERR;
 8008a40:	2002      	movs	r0, #2
 8008a42:	e7f1      	b.n	8008a28 <dir_sdi+0x86>

08008a44 <create_chain>:
{
 8008a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a48:	4607      	mov	r7, r0
	FATFS *fs = obj->fs;
 8008a4a:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8008a4c:	4688      	mov	r8, r1
 8008a4e:	b931      	cbnz	r1, 8008a5e <create_chain+0x1a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008a50:	6935      	ldr	r5, [r6, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008a52:	b18d      	cbz	r5, 8008a78 <create_chain+0x34>
 8008a54:	69b3      	ldr	r3, [r6, #24]
 8008a56:	42ab      	cmp	r3, r5
 8008a58:	d80f      	bhi.n	8008a7a <create_chain+0x36>
 8008a5a:	2501      	movs	r5, #1
 8008a5c:	e00d      	b.n	8008a7a <create_chain+0x36>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008a5e:	f7ff ff38 	bl	80088d2 <get_fat>
 8008a62:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008a64:	2801      	cmp	r0, #1
 8008a66:	d94c      	bls.n	8008b02 <create_chain+0xbe>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008a68:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008a6c:	d04e      	beq.n	8008b0c <create_chain+0xc8>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008a6e:	69b2      	ldr	r2, [r6, #24]
 8008a70:	4282      	cmp	r2, r0
 8008a72:	d84b      	bhi.n	8008b0c <create_chain+0xc8>
		scl = clst;
 8008a74:	4645      	mov	r5, r8
 8008a76:	e000      	b.n	8008a7a <create_chain+0x36>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008a78:	2501      	movs	r5, #1
		ncl = scl;	/* Start cluster */
 8008a7a:	462c      	mov	r4, r5
 8008a7c:	e00c      	b.n	8008a98 <create_chain+0x54>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008a7e:	4621      	mov	r1, r4
 8008a80:	4638      	mov	r0, r7
 8008a82:	f7ff ff26 	bl	80088d2 <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 8008a86:	4603      	mov	r3, r0
 8008a88:	b170      	cbz	r0, 8008aa8 <create_chain+0x64>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008a8a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008a8e:	bf18      	it	ne
 8008a90:	2801      	cmpne	r0, #1
 8008a92:	d03b      	beq.n	8008b0c <create_chain+0xc8>
			if (ncl == scl) return 0;		/* No free cluster */
 8008a94:	42ac      	cmp	r4, r5
 8008a96:	d038      	beq.n	8008b0a <create_chain+0xc6>
			ncl++;							/* Next cluster */
 8008a98:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008a9a:	69b3      	ldr	r3, [r6, #24]
 8008a9c:	42a3      	cmp	r3, r4
 8008a9e:	d8ee      	bhi.n	8008a7e <create_chain+0x3a>
				if (ncl > scl) return 0;	/* No free cluster */
 8008aa0:	2d01      	cmp	r5, #1
 8008aa2:	d930      	bls.n	8008b06 <create_chain+0xc2>
				ncl = 2;
 8008aa4:	2402      	movs	r4, #2
 8008aa6:	e7ea      	b.n	8008a7e <create_chain+0x3a>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008aa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008aac:	4621      	mov	r1, r4
 8008aae:	4630      	mov	r0, r6
 8008ab0:	f7ff fe8a 	bl	80087c8 <put_fat>
		if (res == FR_OK && clst != 0) {
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	f118 0300 	adds.w	r3, r8, #0
 8008aba:	bf18      	it	ne
 8008abc:	2301      	movne	r3, #1
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	bf0c      	ite	eq
 8008ac2:	4618      	moveq	r0, r3
 8008ac4:	2000      	movne	r0, #0
 8008ac6:	b970      	cbnz	r0, 8008ae6 <create_chain+0xa2>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008ac8:	b9a2      	cbnz	r2, 8008af4 <create_chain+0xb0>
		fs->last_clst = ncl;
 8008aca:	6134      	str	r4, [r6, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008acc:	6972      	ldr	r2, [r6, #20]
 8008ace:	69b3      	ldr	r3, [r6, #24]
 8008ad0:	3b02      	subs	r3, #2
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d801      	bhi.n	8008ada <create_chain+0x96>
 8008ad6:	3a01      	subs	r2, #1
 8008ad8:	6172      	str	r2, [r6, #20]
		fs->fsi_flag |= 1;
 8008ada:	7933      	ldrb	r3, [r6, #4]
 8008adc:	f043 0301 	orr.w	r3, r3, #1
 8008ae0:	7133      	strb	r3, [r6, #4]
 8008ae2:	4623      	mov	r3, r4
 8008ae4:	e012      	b.n	8008b0c <create_chain+0xc8>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008ae6:	4622      	mov	r2, r4
 8008ae8:	4641      	mov	r1, r8
 8008aea:	4630      	mov	r0, r6
 8008aec:	f7ff fe6c 	bl	80087c8 <put_fat>
 8008af0:	4602      	mov	r2, r0
 8008af2:	e7e9      	b.n	8008ac8 <create_chain+0x84>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008af4:	2a01      	cmp	r2, #1
 8008af6:	d001      	beq.n	8008afc <create_chain+0xb8>
 8008af8:	2301      	movs	r3, #1
 8008afa:	e007      	b.n	8008b0c <create_chain+0xc8>
 8008afc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b00:	e004      	b.n	8008b0c <create_chain+0xc8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008b02:	2301      	movs	r3, #1
 8008b04:	e002      	b.n	8008b0c <create_chain+0xc8>
				if (ncl > scl) return 0;	/* No free cluster */
 8008b06:	2300      	movs	r3, #0
 8008b08:	e000      	b.n	8008b0c <create_chain+0xc8>
			if (ncl == scl) return 0;		/* No free cluster */
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008b12 <remove_chain>:
{
 8008b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b14:	460e      	mov	r6, r1
	FATFS *fs = obj->fs;
 8008b16:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008b18:	2901      	cmp	r1, #1
 8008b1a:	d92e      	bls.n	8008b7a <remove_chain+0x68>
 8008b1c:	4607      	mov	r7, r0
 8008b1e:	4611      	mov	r1, r2
 8008b20:	69ab      	ldr	r3, [r5, #24]
 8008b22:	42b3      	cmp	r3, r6
 8008b24:	d92c      	bls.n	8008b80 <remove_chain+0x6e>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008b26:	b152      	cbz	r2, 8008b3e <remove_chain+0x2c>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008b28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	f7ff fe4b 	bl	80087c8 <put_fat>
		if (res != FR_OK) return res;
 8008b32:	4684      	mov	ip, r0
 8008b34:	b118      	cbz	r0, 8008b3e <remove_chain+0x2c>
 8008b36:	e025      	b.n	8008b84 <remove_chain+0x72>
		clst = nxt;					/* Next cluster */
 8008b38:	4626      	mov	r6, r4
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008b3a:	42a2      	cmp	r2, r4
 8008b3c:	d922      	bls.n	8008b84 <remove_chain+0x72>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008b3e:	4631      	mov	r1, r6
 8008b40:	4638      	mov	r0, r7
 8008b42:	f7ff fec6 	bl	80088d2 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 8008b46:	4604      	mov	r4, r0
 8008b48:	b1f0      	cbz	r0, 8008b88 <remove_chain+0x76>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008b4a:	2801      	cmp	r0, #1
 8008b4c:	d01f      	beq.n	8008b8e <remove_chain+0x7c>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008b4e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008b52:	d01f      	beq.n	8008b94 <remove_chain+0x82>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008b54:	2200      	movs	r2, #0
 8008b56:	4631      	mov	r1, r6
 8008b58:	4628      	mov	r0, r5
 8008b5a:	f7ff fe35 	bl	80087c8 <put_fat>
			if (res != FR_OK) return res;
 8008b5e:	4684      	mov	ip, r0
 8008b60:	b980      	cbnz	r0, 8008b84 <remove_chain+0x72>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008b62:	696b      	ldr	r3, [r5, #20]
 8008b64:	69aa      	ldr	r2, [r5, #24]
 8008b66:	1e91      	subs	r1, r2, #2
 8008b68:	428b      	cmp	r3, r1
 8008b6a:	d2e5      	bcs.n	8008b38 <remove_chain+0x26>
			fs->free_clst++;
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 8008b70:	792b      	ldrb	r3, [r5, #4]
 8008b72:	f043 0301 	orr.w	r3, r3, #1
 8008b76:	712b      	strb	r3, [r5, #4]
 8008b78:	e7de      	b.n	8008b38 <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008b7a:	f04f 0c02 	mov.w	ip, #2
 8008b7e:	e001      	b.n	8008b84 <remove_chain+0x72>
 8008b80:	f04f 0c02 	mov.w	ip, #2
}
 8008b84:	4660      	mov	r0, ip
 8008b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 8008b88:	f04f 0c00 	mov.w	ip, #0
 8008b8c:	e7fa      	b.n	8008b84 <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008b8e:	f04f 0c02 	mov.w	ip, #2
 8008b92:	e7f7      	b.n	8008b84 <remove_chain+0x72>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008b94:	f04f 0c01 	mov.w	ip, #1
 8008b98:	e7f4      	b.n	8008b84 <remove_chain+0x72>

08008b9a <dir_next>:
{
 8008b9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
 8008b9e:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008ba0:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008ba2:	69c3      	ldr	r3, [r0, #28]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d06e      	beq.n	8008c86 <dir_next+0xec>
 8008ba8:	3520      	adds	r5, #32
 8008baa:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8008bae:	d26c      	bcs.n	8008c8a <dir_next+0xf0>
 8008bb0:	4688      	mov	r8, r1
 8008bb2:	4604      	mov	r4, r0
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008bb4:	f3c5 0708 	ubfx	r7, r5, #0, #9
 8008bb8:	b93f      	cbnz	r7, 8008bca <dir_next+0x30>
		dp->sect++;				/* Next sector */
 8008bba:	3301      	adds	r3, #1
 8008bbc:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8008bbe:	6981      	ldr	r1, [r0, #24]
 8008bc0:	b979      	cbnz	r1, 8008be2 <dir_next+0x48>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008bc2:	8933      	ldrh	r3, [r6, #8]
 8008bc4:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8008bc8:	d907      	bls.n	8008bda <dir_next+0x40>
	dp->dptr = ofs;						/* Current entry */
 8008bca:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008bcc:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8008bd0:	443b      	add	r3, r7
 8008bd2:	6223      	str	r3, [r4, #32]
	return FR_OK;
 8008bd4:	2000      	movs	r0, #0
}
 8008bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				dp->sect = 0; return FR_NO_FILE;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	61c3      	str	r3, [r0, #28]
 8008bde:	2004      	movs	r0, #4
 8008be0:	e7f9      	b.n	8008bd6 <dir_next+0x3c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008be2:	8973      	ldrh	r3, [r6, #10]
 8008be4:	3b01      	subs	r3, #1
 8008be6:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 8008bea:	d1ee      	bne.n	8008bca <dir_next+0x30>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008bec:	f7ff fe71 	bl	80088d2 <get_fat>
 8008bf0:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008bf2:	2801      	cmp	r0, #1
 8008bf4:	d94b      	bls.n	8008c8e <dir_next+0xf4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008bf6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008bfa:	d04a      	beq.n	8008c92 <dir_next+0xf8>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008bfc:	69b3      	ldr	r3, [r6, #24]
 8008bfe:	4283      	cmp	r3, r0
 8008c00:	d839      	bhi.n	8008c76 <dir_next+0xdc>
					if (!stretch) {								/* If no stretch, report EOT */
 8008c02:	f1b8 0f00 	cmp.w	r8, #0
 8008c06:	d011      	beq.n	8008c2c <dir_next+0x92>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008c08:	69a1      	ldr	r1, [r4, #24]
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f7ff ff1a 	bl	8008a44 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008c10:	4681      	mov	r9, r0
 8008c12:	2800      	cmp	r0, #0
 8008c14:	d03f      	beq.n	8008c96 <dir_next+0xfc>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008c16:	2801      	cmp	r0, #1
 8008c18:	d03f      	beq.n	8008c9a <dir_next+0x100>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008c1a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008c1e:	d03e      	beq.n	8008c9e <dir_next+0x104>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008c20:	4630      	mov	r0, r6
 8008c22:	f7ff fbca 	bl	80083ba <sync_window>
 8008c26:	b128      	cbz	r0, 8008c34 <dir_next+0x9a>
 8008c28:	2001      	movs	r0, #1
 8008c2a:	e7d4      	b.n	8008bd6 <dir_next+0x3c>
						dp->sect = 0; return FR_NO_FILE;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	61e3      	str	r3, [r4, #28]
 8008c30:	2004      	movs	r0, #4
 8008c32:	e7d0      	b.n	8008bd6 <dir_next+0x3c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c38:	2100      	movs	r1, #0
 8008c3a:	f106 0034 	add.w	r0, r6, #52	; 0x34
 8008c3e:	f7ff f99c 	bl	8007f7a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008c42:	4649      	mov	r1, r9
 8008c44:	4630      	mov	r0, r6
 8008c46:	f7ff fa8f 	bl	8008168 <clust2sect>
 8008c4a:	6330      	str	r0, [r6, #48]	; 0x30
 8008c4c:	f04f 0800 	mov.w	r8, #0
 8008c50:	8973      	ldrh	r3, [r6, #10]
 8008c52:	4598      	cmp	r8, r3
 8008c54:	d20b      	bcs.n	8008c6e <dir_next+0xd4>
						fs->wflag = 1;
 8008c56:	2301      	movs	r3, #1
 8008c58:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	f7ff fbad 	bl	80083ba <sync_window>
 8008c60:	b9f8      	cbnz	r0, 8008ca2 <dir_next+0x108>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008c62:	f108 0801 	add.w	r8, r8, #1
 8008c66:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8008c68:	3301      	adds	r3, #1
 8008c6a:	6333      	str	r3, [r6, #48]	; 0x30
 8008c6c:	e7f0      	b.n	8008c50 <dir_next+0xb6>
					fs->winsect -= n;							/* Restore window offset */
 8008c6e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8008c70:	eba3 0308 	sub.w	r3, r3, r8
 8008c74:	6333      	str	r3, [r6, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 8008c76:	f8c4 9018 	str.w	r9, [r4, #24]
				dp->sect = clust2sect(fs, clst);
 8008c7a:	4649      	mov	r1, r9
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	f7ff fa73 	bl	8008168 <clust2sect>
 8008c82:	61e0      	str	r0, [r4, #28]
 8008c84:	e7a1      	b.n	8008bca <dir_next+0x30>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008c86:	2004      	movs	r0, #4
 8008c88:	e7a5      	b.n	8008bd6 <dir_next+0x3c>
 8008c8a:	2004      	movs	r0, #4
 8008c8c:	e7a3      	b.n	8008bd6 <dir_next+0x3c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008c8e:	2002      	movs	r0, #2
 8008c90:	e7a1      	b.n	8008bd6 <dir_next+0x3c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008c92:	2001      	movs	r0, #1
 8008c94:	e79f      	b.n	8008bd6 <dir_next+0x3c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008c96:	2007      	movs	r0, #7
 8008c98:	e79d      	b.n	8008bd6 <dir_next+0x3c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008c9a:	2002      	movs	r0, #2
 8008c9c:	e79b      	b.n	8008bd6 <dir_next+0x3c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008c9e:	2001      	movs	r0, #1
 8008ca0:	e799      	b.n	8008bd6 <dir_next+0x3c>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008ca2:	2001      	movs	r0, #1
 8008ca4:	e797      	b.n	8008bd6 <dir_next+0x3c>

08008ca6 <dir_alloc>:
{
 8008ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca8:	4604      	mov	r4, r0
 8008caa:	460f      	mov	r7, r1
	FATFS *fs = dp->obj.fs;
 8008cac:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 8008cae:	2100      	movs	r1, #0
 8008cb0:	f7ff fe77 	bl	80089a2 <dir_sdi>
	if (res == FR_OK) {
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	b9b8      	cbnz	r0, 8008ce8 <dir_alloc+0x42>
		n = 0;
 8008cb8:	2500      	movs	r5, #0
 8008cba:	e006      	b.n	8008cca <dir_alloc+0x24>
				n = 0;					/* Not a blank entry. Restart to search */
 8008cbc:	2500      	movs	r5, #0
			res = dir_next(dp, 1);
 8008cbe:	2101      	movs	r1, #1
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	f7ff ff6a 	bl	8008b9a <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	b970      	cbnz	r0, 8008ce8 <dir_alloc+0x42>
			res = move_window(fs, dp->sect);
 8008cca:	69e1      	ldr	r1, [r4, #28]
 8008ccc:	4630      	mov	r0, r6
 8008cce:	f7ff fb9e 	bl	800840e <move_window>
			if (res != FR_OK) break;
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	b940      	cbnz	r0, 8008ce8 <dir_alloc+0x42>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008cd6:	6a23      	ldr	r3, [r4, #32]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	bf18      	it	ne
 8008cde:	2be5      	cmpne	r3, #229	; 0xe5
 8008ce0:	d1ec      	bne.n	8008cbc <dir_alloc+0x16>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008ce2:	3501      	adds	r5, #1
 8008ce4:	42bd      	cmp	r5, r7
 8008ce6:	d1ea      	bne.n	8008cbe <dir_alloc+0x18>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008ce8:	2a04      	cmp	r2, #4
 8008cea:	d001      	beq.n	8008cf0 <dir_alloc+0x4a>
}
 8008cec:	4610      	mov	r0, r2
 8008cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008cf0:	2207      	movs	r2, #7
 8008cf2:	e7fb      	b.n	8008cec <dir_alloc+0x46>

08008cf4 <create_name>:
{
 8008cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf8:	b083      	sub	sp, #12
 8008cfa:	4681      	mov	r9, r0
 8008cfc:	468a      	mov	sl, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008cfe:	f8d1 8000 	ldr.w	r8, [r1]
 8008d02:	6803      	ldr	r3, [r0, #0]
 8008d04:	68dd      	ldr	r5, [r3, #12]
 8008d06:	2400      	movs	r4, #0
 8008d08:	e011      	b.n	8008d2e <create_name+0x3a>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008d0a:	3701      	adds	r7, #1
 8008d0c:	f818 3007 	ldrb.w	r3, [r8, r7]
 8008d10:	2b5c      	cmp	r3, #92	; 0x5c
 8008d12:	bf18      	it	ne
 8008d14:	2b2f      	cmpne	r3, #47	; 0x2f
 8008d16:	d0f8      	beq.n	8008d0a <create_name+0x16>
	*path = &p[si];						/* Return pointer to the next segment */
 8008d18:	4447      	add	r7, r8
 8008d1a:	f8ca 7000 	str.w	r7, [sl]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008d1e:	281f      	cmp	r0, #31
 8008d20:	d822      	bhi.n	8008d68 <create_name+0x74>
 8008d22:	f04f 0804 	mov.w	r8, #4
 8008d26:	e023      	b.n	8008d70 <create_name+0x7c>
		lfn[di++] = w;					/* Store the Unicode character */
 8008d28:	f825 6014 	strh.w	r6, [r5, r4, lsl #1]
		w = p[si++];					/* Get a character */
 8008d2c:	463c      	mov	r4, r7
 8008d2e:	1c67      	adds	r7, r4, #1
 8008d30:	f818 0004 	ldrb.w	r0, [r8, r4]
		if (w < ' ') break;				/* Break if end of the path name */
 8008d34:	281f      	cmp	r0, #31
 8008d36:	d9ef      	bls.n	8008d18 <create_name+0x24>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008d38:	285c      	cmp	r0, #92	; 0x5c
 8008d3a:	bf18      	it	ne
 8008d3c:	282f      	cmpne	r0, #47	; 0x2f
 8008d3e:	d0e5      	beq.n	8008d0c <create_name+0x18>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008d40:	2cfe      	cmp	r4, #254	; 0xfe
 8008d42:	f200 80e3 	bhi.w	8008f0c <create_name+0x218>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008d46:	2101      	movs	r1, #1
 8008d48:	f000 fdaa 	bl	80098a0 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008d4c:	4606      	mov	r6, r0
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	f000 80de 	beq.w	8008f10 <create_name+0x21c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008d54:	287f      	cmp	r0, #127	; 0x7f
 8008d56:	d8e7      	bhi.n	8008d28 <create_name+0x34>
 8008d58:	4601      	mov	r1, r0
 8008d5a:	486f      	ldr	r0, [pc, #444]	; (8008f18 <create_name+0x224>)
 8008d5c:	f7ff f921 	bl	8007fa2 <chk_chr>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d0e1      	beq.n	8008d28 <create_name+0x34>
 8008d64:	2006      	movs	r0, #6
 8008d66:	e07a      	b.n	8008e5e <create_name+0x16a>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008d68:	f04f 0800 	mov.w	r8, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008d6c:	e000      	b.n	8008d70 <create_name+0x7c>
		di--;
 8008d6e:	3c01      	subs	r4, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008d70:	b144      	cbz	r4, 8008d84 <create_name+0x90>
		w = lfn[di - 1];
 8008d72:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008d76:	4423      	add	r3, r4
 8008d78:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (w != ' ' && w != '.') break;
 8008d7c:	2b20      	cmp	r3, #32
 8008d7e:	bf18      	it	ne
 8008d80:	2b2e      	cmpne	r3, #46	; 0x2e
 8008d82:	d0f4      	beq.n	8008d6e <create_name+0x7a>
	lfn[di] = 0;						/* LFN is created */
 8008d84:	2300      	movs	r3, #0
 8008d86:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008d8a:	2c00      	cmp	r4, #0
 8008d8c:	f000 80c2 	beq.w	8008f14 <create_name+0x220>
	mem_set(dp->fn, ' ', 11);
 8008d90:	220b      	movs	r2, #11
 8008d92:	2120      	movs	r1, #32
 8008d94:	f109 0024 	add.w	r0, r9, #36	; 0x24
 8008d98:	f7ff f8ef 	bl	8007f7a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	e000      	b.n	8008da2 <create_name+0xae>
 8008da0:	3301      	adds	r3, #1
 8008da2:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 8008da6:	2a2e      	cmp	r2, #46	; 0x2e
 8008da8:	bf18      	it	ne
 8008daa:	2a20      	cmpne	r2, #32
 8008dac:	d0f8      	beq.n	8008da0 <create_name+0xac>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008dae:	b11b      	cbz	r3, 8008db8 <create_name+0xc4>
 8008db0:	f048 0803 	orr.w	r8, r8, #3
 8008db4:	e000      	b.n	8008db8 <create_name+0xc4>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008db6:	3c01      	subs	r4, #1
 8008db8:	b16c      	cbz	r4, 8008dd6 <create_name+0xe2>
 8008dba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008dbe:	4422      	add	r2, r4
 8008dc0:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 8008dc4:	2a2e      	cmp	r2, #46	; 0x2e
 8008dc6:	d1f6      	bne.n	8008db6 <create_name+0xc2>
 8008dc8:	f04f 0b08 	mov.w	fp, #8
 8008dcc:	f04f 0a00 	mov.w	sl, #0
 8008dd0:	f8cd a004 	str.w	sl, [sp, #4]
 8008dd4:	e008      	b.n	8008de8 <create_name+0xf4>
 8008dd6:	46a2      	mov	sl, r4
 8008dd8:	f04f 0b08 	mov.w	fp, #8
 8008ddc:	2200      	movs	r2, #0
 8008dde:	9201      	str	r2, [sp, #4]
 8008de0:	e002      	b.n	8008de8 <create_name+0xf4>
			cf |= NS_LOSS | NS_LFN; continue;
 8008de2:	f048 0803 	orr.w	r8, r8, #3
		w = lfn[si++];					/* Get an LFN character */
 8008de6:	463b      	mov	r3, r7
 8008de8:	1c5f      	adds	r7, r3, #1
 8008dea:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 8008dee:	b1be      	cbz	r6, 8008e20 <create_name+0x12c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008df0:	2e20      	cmp	r6, #32
 8008df2:	d0f6      	beq.n	8008de2 <create_name+0xee>
 8008df4:	2e2e      	cmp	r6, #46	; 0x2e
 8008df6:	bf14      	ite	ne
 8008df8:	2300      	movne	r3, #0
 8008dfa:	2301      	moveq	r3, #1
 8008dfc:	42bc      	cmp	r4, r7
 8008dfe:	bf08      	it	eq
 8008e00:	2300      	moveq	r3, #0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1ed      	bne.n	8008de2 <create_name+0xee>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008e06:	42bc      	cmp	r4, r7
 8008e08:	bf18      	it	ne
 8008e0a:	45da      	cmpne	sl, fp
 8008e0c:	d337      	bcc.n	8008e7e <create_name+0x18a>
			if (ni == 11) {				/* Long extension */
 8008e0e:	f1bb 0f0b 	cmp.w	fp, #11
 8008e12:	d027      	beq.n	8008e64 <create_name+0x170>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008e14:	42bc      	cmp	r4, r7
 8008e16:	d001      	beq.n	8008e1c <create_name+0x128>
 8008e18:	f048 0803 	orr.w	r8, r8, #3
			if (si > di) break;			/* No extension */
 8008e1c:	42bc      	cmp	r4, r7
 8008e1e:	d224      	bcs.n	8008e6a <create_name+0x176>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008e20:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
 8008e24:	2be5      	cmp	r3, #229	; 0xe5
 8008e26:	d062      	beq.n	8008eee <create_name+0x1fa>
	if (ni == 8) b <<= 2;
 8008e28:	f1bb 0f08 	cmp.w	fp, #8
 8008e2c:	d063      	beq.n	8008ef6 <create_name+0x202>
 8008e2e:	9b01      	ldr	r3, [sp, #4]
 8008e30:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008e34:	2a0c      	cmp	r2, #12
 8008e36:	d003      	beq.n	8008e40 <create_name+0x14c>
 8008e38:	f003 0303 	and.w	r3, r3, #3
 8008e3c:	2b03      	cmp	r3, #3
 8008e3e:	d101      	bne.n	8008e44 <create_name+0x150>
 8008e40:	f048 0802 	orr.w	r8, r8, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008e44:	f018 0f02 	tst.w	r8, #2
 8008e48:	d106      	bne.n	8008e58 <create_name+0x164>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008e4a:	9b01      	ldr	r3, [sp, #4]
 8008e4c:	f003 0303 	and.w	r3, r3, #3
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d055      	beq.n	8008f00 <create_name+0x20c>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008e54:	2a04      	cmp	r2, #4
 8008e56:	d056      	beq.n	8008f06 <create_name+0x212>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008e58:	f889 802f 	strb.w	r8, [r9, #47]	; 0x2f
	return FR_OK;
 8008e5c:	2000      	movs	r0, #0
}
 8008e5e:	b003      	add	sp, #12
 8008e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN; break;
 8008e64:	f048 0803 	orr.w	r8, r8, #3
 8008e68:	e7da      	b.n	8008e20 <create_name+0x12c>
			b <<= 2; continue;
 8008e6a:	9b01      	ldr	r3, [sp, #4]
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008e72:	4623      	mov	r3, r4
 8008e74:	f04f 0b0b 	mov.w	fp, #11
 8008e78:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 8008e7c:	e7b4      	b.n	8008de8 <create_name+0xf4>
		if (w >= 0x80) {				/* Non ASCII character */
 8008e7e:	2e7f      	cmp	r6, #127	; 0x7f
 8008e80:	d80b      	bhi.n	8008e9a <create_name+0x1a6>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008e82:	b9c6      	cbnz	r6, 8008eb6 <create_name+0x1c2>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008e84:	f048 0803 	orr.w	r8, r8, #3
 8008e88:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 8008e8a:	eb09 030a 	add.w	r3, r9, sl
 8008e8e:	f883 6024 	strb.w	r6, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008e92:	463b      	mov	r3, r7
		dp->fn[i++] = (BYTE)w;
 8008e94:	f10a 0a01 	add.w	sl, sl, #1
 8008e98:	e7a6      	b.n	8008de8 <create_name+0xf4>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	f000 fcff 	bl	80098a0 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008ea2:	4606      	mov	r6, r0
 8008ea4:	b120      	cbz	r0, 8008eb0 <create_name+0x1bc>
 8008ea6:	f1a0 0680 	sub.w	r6, r0, #128	; 0x80
 8008eaa:	4b1c      	ldr	r3, [pc, #112]	; (8008f1c <create_name+0x228>)
 8008eac:	4433      	add	r3, r6
 8008eae:	7c1e      	ldrb	r6, [r3, #16]
			cf |= NS_LFN;				/* Force create LFN entry */
 8008eb0:	f048 0802 	orr.w	r8, r8, #2
 8008eb4:	e7e5      	b.n	8008e82 <create_name+0x18e>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008eb6:	4631      	mov	r1, r6
 8008eb8:	4819      	ldr	r0, [pc, #100]	; (8008f20 <create_name+0x22c>)
 8008eba:	f7ff f872 	bl	8007fa2 <chk_chr>
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	d1e0      	bne.n	8008e84 <create_name+0x190>
				if (IsUpper(w)) {		/* ASCII large capital */
 8008ec2:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	2b19      	cmp	r3, #25
 8008eca:	d804      	bhi.n	8008ed6 <create_name+0x1e2>
					b |= 2;
 8008ecc:	9b01      	ldr	r3, [sp, #4]
 8008ece:	f043 0302 	orr.w	r3, r3, #2
 8008ed2:	9301      	str	r3, [sp, #4]
 8008ed4:	e7d9      	b.n	8008e8a <create_name+0x196>
					if (IsLower(w)) {	/* ASCII small capital */
 8008ed6:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	2b19      	cmp	r3, #25
 8008ede:	d8d4      	bhi.n	8008e8a <create_name+0x196>
						b |= 1; w -= 0x20;
 8008ee0:	9b01      	ldr	r3, [sp, #4]
 8008ee2:	f043 0301 	orr.w	r3, r3, #1
 8008ee6:	9301      	str	r3, [sp, #4]
 8008ee8:	3e20      	subs	r6, #32
 8008eea:	b2b6      	uxth	r6, r6
 8008eec:	e7cd      	b.n	8008e8a <create_name+0x196>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008eee:	2305      	movs	r3, #5
 8008ef0:	f889 3024 	strb.w	r3, [r9, #36]	; 0x24
 8008ef4:	e798      	b.n	8008e28 <create_name+0x134>
	if (ni == 8) b <<= 2;
 8008ef6:	9b01      	ldr	r3, [sp, #4]
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	9301      	str	r3, [sp, #4]
 8008efe:	e796      	b.n	8008e2e <create_name+0x13a>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008f00:	f048 0810 	orr.w	r8, r8, #16
 8008f04:	e7a6      	b.n	8008e54 <create_name+0x160>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008f06:	f048 0808 	orr.w	r8, r8, #8
 8008f0a:	e7a5      	b.n	8008e58 <create_name+0x164>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008f0c:	2006      	movs	r0, #6
 8008f0e:	e7a6      	b.n	8008e5e <create_name+0x16a>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008f10:	2006      	movs	r0, #6
 8008f12:	e7a4      	b.n	8008e5e <create_name+0x16a>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008f14:	2006      	movs	r0, #6
 8008f16:	e7a2      	b.n	8008e5e <create_name+0x16a>
 8008f18:	08126e80 	.word	0x08126e80
 8008f1c:	0800dbe0 	.word	0x0800dbe0
 8008f20:	08126e8c 	.word	0x08126e8c

08008f24 <cmp_lfn>:
{
 8008f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f28:	4681      	mov	r9, r0
 8008f2a:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008f2c:	f101 001a 	add.w	r0, r1, #26
 8008f30:	f7fe fffc 	bl	8007f2c <ld_word>
 8008f34:	bbb8      	cbnz	r0, 8008fa6 <cmp_lfn+0x82>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008f36:	783d      	ldrb	r5, [r7, #0]
 8008f38:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8008f3c:	3d01      	subs	r5, #1
 8008f3e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8008f42:	eb05 0583 	add.w	r5, r5, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008f46:	f04f 0801 	mov.w	r8, #1
 8008f4a:	2400      	movs	r4, #0
 8008f4c:	e004      	b.n	8008f58 <cmp_lfn+0x34>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008f4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f52:	4298      	cmp	r0, r3
 8008f54:	d12e      	bne.n	8008fb4 <cmp_lfn+0x90>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008f56:	3401      	adds	r4, #1
 8008f58:	2c0c      	cmp	r4, #12
 8008f5a:	d818      	bhi.n	8008f8e <cmp_lfn+0x6a>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008f5c:	4b19      	ldr	r3, [pc, #100]	; (8008fc4 <cmp_lfn+0xa0>)
 8008f5e:	5d18      	ldrb	r0, [r3, r4]
 8008f60:	4438      	add	r0, r7
 8008f62:	f7fe ffe3 	bl	8007f2c <ld_word>
 8008f66:	4606      	mov	r6, r0
		if (wc) {
 8008f68:	f1b8 0f00 	cmp.w	r8, #0
 8008f6c:	d0ef      	beq.n	8008f4e <cmp_lfn+0x2a>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008f6e:	2dfe      	cmp	r5, #254	; 0xfe
 8008f70:	d81c      	bhi.n	8008fac <cmp_lfn+0x88>
 8008f72:	f000 fcb1 	bl	80098d8 <ff_wtoupper>
 8008f76:	4680      	mov	r8, r0
 8008f78:	f105 0a01 	add.w	sl, r5, #1
 8008f7c:	f839 0015 	ldrh.w	r0, [r9, r5, lsl #1]
 8008f80:	f000 fcaa 	bl	80098d8 <ff_wtoupper>
 8008f84:	4580      	cmp	r8, r0
 8008f86:	d113      	bne.n	8008fb0 <cmp_lfn+0x8c>
			wc = uc;
 8008f88:	46b0      	mov	r8, r6
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008f8a:	4655      	mov	r5, sl
 8008f8c:	e7e3      	b.n	8008f56 <cmp_lfn+0x32>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008f8e:	783b      	ldrb	r3, [r7, #0]
 8008f90:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008f94:	d010      	beq.n	8008fb8 <cmp_lfn+0x94>
 8008f96:	f1b8 0f00 	cmp.w	r8, #0
 8008f9a:	d00f      	beq.n	8008fbc <cmp_lfn+0x98>
 8008f9c:	f839 3015 	ldrh.w	r3, [r9, r5, lsl #1]
 8008fa0:	b973      	cbnz	r3, 8008fc0 <cmp_lfn+0x9c>
	return 1;		/* The part of LFN matched */
 8008fa2:	2001      	movs	r0, #1
 8008fa4:	e000      	b.n	8008fa8 <cmp_lfn+0x84>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008fa6:	2000      	movs	r0, #0
}
 8008fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return 0;					/* Not matched */
 8008fac:	2000      	movs	r0, #0
 8008fae:	e7fb      	b.n	8008fa8 <cmp_lfn+0x84>
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	e7f9      	b.n	8008fa8 <cmp_lfn+0x84>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	e7f7      	b.n	8008fa8 <cmp_lfn+0x84>
	return 1;		/* The part of LFN matched */
 8008fb8:	2001      	movs	r0, #1
 8008fba:	e7f5      	b.n	8008fa8 <cmp_lfn+0x84>
 8008fbc:	2001      	movs	r0, #1
 8008fbe:	e7f3      	b.n	8008fa8 <cmp_lfn+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	e7f1      	b.n	8008fa8 <cmp_lfn+0x84>
 8008fc4:	0800dbe0 	.word	0x0800dbe0

08008fc8 <dir_find>:
{
 8008fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fcc:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8008fce:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	f7ff fce5 	bl	80089a2 <dir_sdi>
	if (res != FR_OK) return res;
 8008fd8:	4606      	mov	r6, r0
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	d164      	bne.n	80090a8 <dir_find+0xe0>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fe2:	6323      	str	r3, [r4, #48]	; 0x30
 8008fe4:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8008fe8:	464f      	mov	r7, r9
 8008fea:	e00a      	b.n	8009002 <dir_find+0x3a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008fec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ff0:	6323      	str	r3, [r4, #48]	; 0x30
 8008ff2:	27ff      	movs	r7, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	f7ff fdcf 	bl	8008b9a <dir_next>
	} while (res == FR_OK);
 8008ffc:	4606      	mov	r6, r0
 8008ffe:	2800      	cmp	r0, #0
 8009000:	d152      	bne.n	80090a8 <dir_find+0xe0>
		res = move_window(fs, dp->sect);
 8009002:	69e1      	ldr	r1, [r4, #28]
 8009004:	4640      	mov	r0, r8
 8009006:	f7ff fa02 	bl	800840e <move_window>
		if (res != FR_OK) break;
 800900a:	4606      	mov	r6, r0
 800900c:	2800      	cmp	r0, #0
 800900e:	d14b      	bne.n	80090a8 <dir_find+0xe0>
		c = dp->dir[DIR_Name];
 8009010:	6a25      	ldr	r5, [r4, #32]
 8009012:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009014:	2b00      	cmp	r3, #0
 8009016:	d046      	beq.n	80090a6 <dir_find+0xde>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009018:	7ae9      	ldrb	r1, [r5, #11]
 800901a:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 800901e:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009020:	2be5      	cmp	r3, #229	; 0xe5
 8009022:	d0e3      	beq.n	8008fec <dir_find+0x24>
 8009024:	f011 0f08 	tst.w	r1, #8
 8009028:	d001      	beq.n	800902e <dir_find+0x66>
 800902a:	2a0f      	cmp	r2, #15
 800902c:	d1de      	bne.n	8008fec <dir_find+0x24>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800902e:	2a0f      	cmp	r2, #15
 8009030:	d016      	beq.n	8009060 <dir_find+0x98>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009032:	b927      	cbnz	r7, 800903e <dir_find+0x76>
 8009034:	4628      	mov	r0, r5
 8009036:	f7ff f967 	bl	8008308 <sum_sfn>
 800903a:	4548      	cmp	r0, r9
 800903c:	d034      	beq.n	80090a8 <dir_find+0xe0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800903e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8009042:	f013 0f01 	tst.w	r3, #1
 8009046:	d106      	bne.n	8009056 <dir_find+0x8e>
 8009048:	220b      	movs	r2, #11
 800904a:	f104 0124 	add.w	r1, r4, #36	; 0x24
 800904e:	4628      	mov	r0, r5
 8009050:	f7fe ff98 	bl	8007f84 <mem_cmp>
 8009054:	b340      	cbz	r0, 80090a8 <dir_find+0xe0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800905a:	6323      	str	r3, [r4, #48]	; 0x30
 800905c:	27ff      	movs	r7, #255	; 0xff
 800905e:	e7c9      	b.n	8008ff4 <dir_find+0x2c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009060:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 8009064:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009068:	d1c4      	bne.n	8008ff4 <dir_find+0x2c>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800906a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800906e:	d006      	beq.n	800907e <dir_find+0xb6>
						sum = dp->dir[LDIR_Chksum];
 8009070:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009074:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009078:	6962      	ldr	r2, [r4, #20]
 800907a:	6322      	str	r2, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800907c:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800907e:	42bb      	cmp	r3, r7
 8009080:	d001      	beq.n	8009086 <dir_find+0xbe>
 8009082:	27ff      	movs	r7, #255	; 0xff
 8009084:	e7b6      	b.n	8008ff4 <dir_find+0x2c>
 8009086:	7b6b      	ldrb	r3, [r5, #13]
 8009088:	454b      	cmp	r3, r9
 800908a:	d001      	beq.n	8009090 <dir_find+0xc8>
 800908c:	27ff      	movs	r7, #255	; 0xff
 800908e:	e7b1      	b.n	8008ff4 <dir_find+0x2c>
 8009090:	4629      	mov	r1, r5
 8009092:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8009096:	f7ff ff45 	bl	8008f24 <cmp_lfn>
 800909a:	b110      	cbz	r0, 80090a2 <dir_find+0xda>
 800909c:	3f01      	subs	r7, #1
 800909e:	b2ff      	uxtb	r7, r7
 80090a0:	e7a8      	b.n	8008ff4 <dir_find+0x2c>
 80090a2:	27ff      	movs	r7, #255	; 0xff
 80090a4:	e7a6      	b.n	8008ff4 <dir_find+0x2c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80090a6:	2604      	movs	r6, #4
}
 80090a8:	4630      	mov	r0, r6
 80090aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080090ae <follow_path>:
{
 80090ae:	b530      	push	{r4, r5, lr}
 80090b0:	b083      	sub	sp, #12
 80090b2:	4604      	mov	r4, r0
 80090b4:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 80090b6:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80090b8:	e001      	b.n	80090be <follow_path+0x10>
 80090ba:	3301      	adds	r3, #1
 80090bc:	9301      	str	r3, [sp, #4]
 80090be:	9b01      	ldr	r3, [sp, #4]
 80090c0:	781a      	ldrb	r2, [r3, #0]
 80090c2:	2a5c      	cmp	r2, #92	; 0x5c
 80090c4:	bf18      	it	ne
 80090c6:	2a2f      	cmpne	r2, #47	; 0x2f
 80090c8:	d0f7      	beq.n	80090ba <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 80090ca:	2200      	movs	r2, #0
 80090cc:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	2b1f      	cmp	r3, #31
 80090d2:	d91e      	bls.n	8009112 <follow_path+0x64>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80090d4:	a901      	add	r1, sp, #4
 80090d6:	4620      	mov	r0, r4
 80090d8:	f7ff fe0c 	bl	8008cf4 <create_name>
			if (res != FR_OK) break;
 80090dc:	4603      	mov	r3, r0
 80090de:	bb00      	cbnz	r0, 8009122 <follow_path+0x74>
			res = dir_find(dp);				/* Find an object with the segment name */
 80090e0:	4620      	mov	r0, r4
 80090e2:	f7ff ff71 	bl	8008fc8 <dir_find>
			ns = dp->fn[NSFLAG];
 80090e6:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80090ea:	4603      	mov	r3, r0
 80090ec:	b9e0      	cbnz	r0, 8009128 <follow_path+0x7a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80090ee:	f012 0f04 	tst.w	r2, #4
 80090f2:	d116      	bne.n	8009122 <follow_path+0x74>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80090f4:	79a3      	ldrb	r3, [r4, #6]
 80090f6:	f013 0f10 	tst.w	r3, #16
 80090fa:	d01c      	beq.n	8009136 <follow_path+0x88>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80090fc:	f105 0134 	add.w	r1, r5, #52	; 0x34
 8009100:	6963      	ldr	r3, [r4, #20]
 8009102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009106:	4419      	add	r1, r3
 8009108:	4628      	mov	r0, r5
 800910a:	f7ff f84a 	bl	80081a2 <ld_clust>
 800910e:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009110:	e7e0      	b.n	80090d4 <follow_path+0x26>
		dp->fn[NSFLAG] = NS_NONAME;
 8009112:	2380      	movs	r3, #128	; 0x80
 8009114:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009118:	4611      	mov	r1, r2
 800911a:	4620      	mov	r0, r4
 800911c:	f7ff fc41 	bl	80089a2 <dir_sdi>
 8009120:	4603      	mov	r3, r0
}
 8009122:	4618      	mov	r0, r3
 8009124:	b003      	add	sp, #12
 8009126:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009128:	2804      	cmp	r0, #4
 800912a:	d1fa      	bne.n	8009122 <follow_path+0x74>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800912c:	f012 0f04 	tst.w	r2, #4
 8009130:	d1f7      	bne.n	8009122 <follow_path+0x74>
 8009132:	2305      	movs	r3, #5
 8009134:	e7f5      	b.n	8009122 <follow_path+0x74>
				res = FR_NO_PATH; break;
 8009136:	2305      	movs	r3, #5
 8009138:	e7f3      	b.n	8009122 <follow_path+0x74>
	...

0800913c <dir_register>:
{
 800913c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009140:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 8009142:	6806      	ldr	r6, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009144:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8009148:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800914c:	f040 808d 	bne.w	800926a <dir_register+0x12e>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009150:	2400      	movs	r4, #0
 8009152:	e000      	b.n	8009156 <dir_register+0x1a>
 8009154:	3401      	adds	r4, #1
 8009156:	68f3      	ldr	r3, [r6, #12]
 8009158:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1f9      	bne.n	8009154 <dir_register+0x18>
 8009160:	4605      	mov	r5, r0
	mem_cpy(sn, dp->fn, 12);
 8009162:	f100 0724 	add.w	r7, r0, #36	; 0x24
 8009166:	220c      	movs	r2, #12
 8009168:	4639      	mov	r1, r7
 800916a:	a801      	add	r0, sp, #4
 800916c:	f7fe fefc 	bl	8007f68 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009170:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8009174:	f013 0f01 	tst.w	r3, #1
 8009178:	d01f      	beq.n	80091ba <dir_register+0x7e>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800917a:	2340      	movs	r3, #64	; 0x40
 800917c:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009180:	f04f 0801 	mov.w	r8, #1
 8009184:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 8009188:	d80d      	bhi.n	80091a6 <dir_register+0x6a>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800918a:	4643      	mov	r3, r8
 800918c:	68f2      	ldr	r2, [r6, #12]
 800918e:	a901      	add	r1, sp, #4
 8009190:	4638      	mov	r0, r7
 8009192:	f7ff f869 	bl	8008268 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009196:	4628      	mov	r0, r5
 8009198:	f7ff ff16 	bl	8008fc8 <dir_find>
			if (res != FR_OK) break;
 800919c:	4681      	mov	r9, r0
 800919e:	b910      	cbnz	r0, 80091a6 <dir_register+0x6a>
		for (n = 1; n < 100; n++) {
 80091a0:	f108 0801 	add.w	r8, r8, #1
 80091a4:	e7ee      	b.n	8009184 <dir_register+0x48>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80091a6:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
 80091aa:	d064      	beq.n	8009276 <dir_register+0x13a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80091ac:	f1b9 0f04 	cmp.w	r9, #4
 80091b0:	d15d      	bne.n	800926e <dir_register+0x132>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80091b2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80091b6:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80091ba:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80091be:	f013 0f02 	tst.w	r3, #2
 80091c2:	d02a      	beq.n	800921a <dir_register+0xde>
 80091c4:	340c      	adds	r4, #12
 80091c6:	4b2d      	ldr	r3, [pc, #180]	; (800927c <dir_register+0x140>)
 80091c8:	fba3 3404 	umull	r3, r4, r3, r4
 80091cc:	08a4      	lsrs	r4, r4, #2
 80091ce:	3401      	adds	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80091d0:	4621      	mov	r1, r4
 80091d2:	4628      	mov	r0, r5
 80091d4:	f7ff fd67 	bl	8008ca6 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80091d8:	4681      	mov	r9, r0
 80091da:	b908      	cbnz	r0, 80091e0 <dir_register+0xa4>
 80091dc:	3c01      	subs	r4, #1
 80091de:	d11e      	bne.n	800921e <dir_register+0xe2>
	if (res == FR_OK) {
 80091e0:	f1b9 0f00 	cmp.w	r9, #0
 80091e4:	d143      	bne.n	800926e <dir_register+0x132>
		res = move_window(fs, dp->sect);
 80091e6:	69e9      	ldr	r1, [r5, #28]
 80091e8:	4630      	mov	r0, r6
 80091ea:	f7ff f910 	bl	800840e <move_window>
		if (res == FR_OK) {
 80091ee:	4681      	mov	r9, r0
 80091f0:	2800      	cmp	r0, #0
 80091f2:	d13c      	bne.n	800926e <dir_register+0x132>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80091f4:	2220      	movs	r2, #32
 80091f6:	2100      	movs	r1, #0
 80091f8:	6a28      	ldr	r0, [r5, #32]
 80091fa:	f7fe febe 	bl	8007f7a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80091fe:	220b      	movs	r2, #11
 8009200:	4639      	mov	r1, r7
 8009202:	6a28      	ldr	r0, [r5, #32]
 8009204:	f7fe feb0 	bl	8007f68 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009208:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800920c:	6a2a      	ldr	r2, [r5, #32]
 800920e:	f003 0318 	and.w	r3, r3, #24
 8009212:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 8009214:	2301      	movs	r3, #1
 8009216:	70f3      	strb	r3, [r6, #3]
 8009218:	e029      	b.n	800926e <dir_register+0x132>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800921a:	2401      	movs	r4, #1
 800921c:	e7d8      	b.n	80091d0 <dir_register+0x94>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800921e:	6969      	ldr	r1, [r5, #20]
 8009220:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 8009224:	4628      	mov	r0, r5
 8009226:	f7ff fbbc 	bl	80089a2 <dir_sdi>
		if (res == FR_OK) {
 800922a:	4681      	mov	r9, r0
 800922c:	2800      	cmp	r0, #0
 800922e:	d1d7      	bne.n	80091e0 <dir_register+0xa4>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009230:	4638      	mov	r0, r7
 8009232:	f7ff f869 	bl	8008308 <sum_sfn>
 8009236:	4680      	mov	r8, r0
				res = move_window(fs, dp->sect);
 8009238:	69e9      	ldr	r1, [r5, #28]
 800923a:	4630      	mov	r0, r6
 800923c:	f7ff f8e7 	bl	800840e <move_window>
				if (res != FR_OK) break;
 8009240:	4681      	mov	r9, r0
 8009242:	2800      	cmp	r0, #0
 8009244:	d1cc      	bne.n	80091e0 <dir_register+0xa4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009246:	4643      	mov	r3, r8
 8009248:	b2e2      	uxtb	r2, r4
 800924a:	6a29      	ldr	r1, [r5, #32]
 800924c:	68f0      	ldr	r0, [r6, #12]
 800924e:	f7fe ffcf 	bl	80081f0 <put_lfn>
				fs->wflag = 1;
 8009252:	2301      	movs	r3, #1
 8009254:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009256:	2100      	movs	r1, #0
 8009258:	4628      	mov	r0, r5
 800925a:	f7ff fc9e 	bl	8008b9a <dir_next>
			} while (res == FR_OK && --nent);
 800925e:	4681      	mov	r9, r0
 8009260:	2800      	cmp	r0, #0
 8009262:	d1bd      	bne.n	80091e0 <dir_register+0xa4>
 8009264:	3c01      	subs	r4, #1
 8009266:	d1e7      	bne.n	8009238 <dir_register+0xfc>
 8009268:	e7ba      	b.n	80091e0 <dir_register+0xa4>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800926a:	f04f 0906 	mov.w	r9, #6
}
 800926e:	4648      	mov	r0, r9
 8009270:	b005      	add	sp, #20
 8009272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009276:	f04f 0907 	mov.w	r9, #7
 800927a:	e7f8      	b.n	800926e <dir_register+0x132>
 800927c:	4ec4ec4f 	.word	0x4ec4ec4f

08009280 <sync_fs>:
{
 8009280:	b570      	push	{r4, r5, r6, lr}
 8009282:	4604      	mov	r4, r0
	res = sync_window(fs);
 8009284:	f7ff f899 	bl	80083ba <sync_window>
	if (res == FR_OK) {
 8009288:	4605      	mov	r5, r0
 800928a:	b948      	cbnz	r0, 80092a0 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800928c:	7823      	ldrb	r3, [r4, #0]
 800928e:	2b03      	cmp	r3, #3
 8009290:	d008      	beq.n	80092a4 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009292:	2200      	movs	r2, #0
 8009294:	4611      	mov	r1, r2
 8009296:	7860      	ldrb	r0, [r4, #1]
 8009298:	f7fe fe3c 	bl	8007f14 <disk_ioctl>
 800929c:	b100      	cbz	r0, 80092a0 <sync_fs+0x20>
 800929e:	2501      	movs	r5, #1
}
 80092a0:	4628      	mov	r0, r5
 80092a2:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80092a4:	7923      	ldrb	r3, [r4, #4]
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d1f3      	bne.n	8009292 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 80092aa:	f104 0634 	add.w	r6, r4, #52	; 0x34
 80092ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092b2:	2100      	movs	r1, #0
 80092b4:	4630      	mov	r0, r6
 80092b6:	f7fe fe60 	bl	8007f7a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80092ba:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80092be:	f204 2032 	addw	r0, r4, #562	; 0x232
 80092c2:	f7fe fe43 	bl	8007f4c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80092c6:	490f      	ldr	r1, [pc, #60]	; (8009304 <sync_fs+0x84>)
 80092c8:	4630      	mov	r0, r6
 80092ca:	f7fe fe43 	bl	8007f54 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80092ce:	490e      	ldr	r1, [pc, #56]	; (8009308 <sync_fs+0x88>)
 80092d0:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80092d4:	f7fe fe3e 	bl	8007f54 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80092d8:	6961      	ldr	r1, [r4, #20]
 80092da:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80092de:	f7fe fe39 	bl	8007f54 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80092e2:	6921      	ldr	r1, [r4, #16]
 80092e4:	f504 7008 	add.w	r0, r4, #544	; 0x220
 80092e8:	f7fe fe34 	bl	8007f54 <st_dword>
			fs->winsect = fs->volbase + 1;
 80092ec:	6a22      	ldr	r2, [r4, #32]
 80092ee:	3201      	adds	r2, #1
 80092f0:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80092f2:	2301      	movs	r3, #1
 80092f4:	4631      	mov	r1, r6
 80092f6:	7860      	ldrb	r0, [r4, #1]
 80092f8:	f7fe fe00 	bl	8007efc <disk_write>
			fs->fsi_flag = 0;
 80092fc:	2300      	movs	r3, #0
 80092fe:	7123      	strb	r3, [r4, #4]
 8009300:	e7c7      	b.n	8009292 <sync_fs+0x12>
 8009302:	bf00      	nop
 8009304:	41615252 	.word	0x41615252
 8009308:	61417272 	.word	0x61417272

0800930c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800930c:	b570      	push	{r4, r5, r6, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	9001      	str	r0, [sp, #4]
 8009312:	9100      	str	r1, [sp, #0]
 8009314:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009316:	a804      	add	r0, sp, #16
 8009318:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800931c:	f7ff f802 	bl	8008324 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8009320:	1e05      	subs	r5, r0, #0
 8009322:	db23      	blt.n	800936c <f_mount+0x60>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009324:	4b12      	ldr	r3, [pc, #72]	; (8009370 <f_mount+0x64>)
 8009326:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800932a:	6a1e      	ldr	r6, [r3, #32]

	if (cfs) {
 800932c:	b126      	cbz	r6, 8009338 <f_mount+0x2c>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800932e:	4630      	mov	r0, r6
 8009330:	f7fe fefc 	bl	800812c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009334:	2300      	movs	r3, #0
 8009336:	7033      	strb	r3, [r6, #0]
	}

	if (fs) {
 8009338:	9b01      	ldr	r3, [sp, #4]
 800933a:	b10b      	cbz	r3, 8009340 <f_mount+0x34>
		fs->fs_type = 0;				/* Clear new fs object */
 800933c:	2200      	movs	r2, #0
 800933e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009340:	9b01      	ldr	r3, [sp, #4]
 8009342:	480b      	ldr	r0, [pc, #44]	; (8009370 <f_mount+0x64>)
 8009344:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8009348:	6203      	str	r3, [r0, #32]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800934a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 800934e:	bf18      	it	ne
 8009350:	2401      	movne	r4, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	bf08      	it	eq
 8009356:	2401      	moveq	r4, #1
 8009358:	b114      	cbz	r4, 8009360 <f_mount+0x54>
 800935a:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800935c:	b004      	add	sp, #16
 800935e:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009360:	2200      	movs	r2, #0
 8009362:	a901      	add	r1, sp, #4
 8009364:	4668      	mov	r0, sp
 8009366:	f7ff f8ab 	bl	80084c0 <find_volume>
	LEAVE_FF(fs, res);
 800936a:	e7f7      	b.n	800935c <f_mount+0x50>
	if (vol < 0) return FR_INVALID_DRIVE;
 800936c:	200b      	movs	r0, #11
 800936e:	e7f5      	b.n	800935c <f_mount+0x50>
 8009370:	2000014c 	.word	0x2000014c

08009374 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009378:	b091      	sub	sp, #68	; 0x44
 800937a:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800937c:	2800      	cmp	r0, #0
 800937e:	f000 8115 	beq.w	80095ac <f_open+0x238>
 8009382:	4605      	mov	r5, r0
 8009384:	4616      	mov	r6, r2

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009386:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800938a:	463a      	mov	r2, r7
 800938c:	a902      	add	r1, sp, #8
 800938e:	a801      	add	r0, sp, #4
 8009390:	f7ff f896 	bl	80084c0 <find_volume>
	if (res == FR_OK) {
 8009394:	4604      	mov	r4, r0
 8009396:	b130      	cbz	r0, 80093a6 <f_open+0x32>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009398:	b10c      	cbz	r4, 800939e <f_open+0x2a>
 800939a:	2300      	movs	r3, #0
 800939c:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 800939e:	4620      	mov	r0, r4
 80093a0:	b011      	add	sp, #68	; 0x44
 80093a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 80093a6:	9b02      	ldr	r3, [sp, #8]
 80093a8:	9303      	str	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80093aa:	9901      	ldr	r1, [sp, #4]
 80093ac:	a803      	add	r0, sp, #12
 80093ae:	f7ff fe7e 	bl	80090ae <follow_path>
		if (res == FR_OK) {
 80093b2:	4604      	mov	r4, r0
 80093b4:	b960      	cbnz	r0, 80093d0 <f_open+0x5c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80093b6:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	db51      	blt.n	8009462 <f_open+0xee>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80093be:	f037 0301 	bics.w	r3, r7, #1
 80093c2:	bf14      	ite	ne
 80093c4:	2101      	movne	r1, #1
 80093c6:	2100      	moveq	r1, #0
 80093c8:	a803      	add	r0, sp, #12
 80093ca:	f7fe fdf3 	bl	8007fb4 <chk_lock>
 80093ce:	4604      	mov	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80093d0:	f016 0f1c 	tst.w	r6, #28
 80093d4:	d05b      	beq.n	800948e <f_open+0x11a>
			if (res != FR_OK) {					/* No file, create new */
 80093d6:	2c00      	cmp	r4, #0
 80093d8:	d04f      	beq.n	800947a <f_open+0x106>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80093da:	2c04      	cmp	r4, #4
 80093dc:	d043      	beq.n	8009466 <f_open+0xf2>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80093de:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80093e2:	2c00      	cmp	r4, #0
 80093e4:	d162      	bne.n	80094ac <f_open+0x138>
 80093e6:	f017 0f08 	tst.w	r7, #8
 80093ea:	d05f      	beq.n	80094ac <f_open+0x138>
				dw = GET_FATTIME();
 80093ec:	f000 fefe 	bl	800a1ec <get_fattime>
 80093f0:	4606      	mov	r6, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80093f2:	4601      	mov	r1, r0
 80093f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80093f6:	300e      	adds	r0, #14
 80093f8:	f7fe fdac 	bl	8007f54 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80093fc:	4631      	mov	r1, r6
 80093fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009400:	3016      	adds	r0, #22
 8009402:	f7fe fda7 	bl	8007f54 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009406:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009408:	2220      	movs	r2, #32
 800940a:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800940c:	9e02      	ldr	r6, [sp, #8]
 800940e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8009412:	4641      	mov	r1, r8
 8009414:	4630      	mov	r0, r6
 8009416:	f7fe fec4 	bl	80081a2 <ld_clust>
 800941a:	4681      	mov	r9, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800941c:	2200      	movs	r2, #0
 800941e:	4641      	mov	r1, r8
 8009420:	4630      	mov	r0, r6
 8009422:	f7fe fed1 	bl	80081c8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009426:	2100      	movs	r1, #0
 8009428:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800942a:	301c      	adds	r0, #28
 800942c:	f7fe fd92 	bl	8007f54 <st_dword>
					fs->wflag = 1;
 8009430:	9b02      	ldr	r3, [sp, #8]
 8009432:	2201      	movs	r2, #1
 8009434:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8009436:	f1b9 0f00 	cmp.w	r9, #0
 800943a:	d037      	beq.n	80094ac <f_open+0x138>
						dw = fs->winsect;
 800943c:	9b02      	ldr	r3, [sp, #8]
 800943e:	6b1e      	ldr	r6, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 8009440:	2200      	movs	r2, #0
 8009442:	4649      	mov	r1, r9
 8009444:	a803      	add	r0, sp, #12
 8009446:	f7ff fb64 	bl	8008b12 <remove_chain>
						if (res == FR_OK) {
 800944a:	4604      	mov	r4, r0
 800944c:	bb70      	cbnz	r0, 80094ac <f_open+0x138>
							res = move_window(fs, dw);
 800944e:	4631      	mov	r1, r6
 8009450:	9802      	ldr	r0, [sp, #8]
 8009452:	f7fe ffdc 	bl	800840e <move_window>
 8009456:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009458:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800945c:	9a02      	ldr	r2, [sp, #8]
 800945e:	6113      	str	r3, [r2, #16]
 8009460:	e024      	b.n	80094ac <f_open+0x138>
				res = FR_INVALID_NAME;
 8009462:	2406      	movs	r4, #6
 8009464:	e7b4      	b.n	80093d0 <f_open+0x5c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009466:	f7fe fddf 	bl	8008028 <enq_lock>
 800946a:	b908      	cbnz	r0, 8009470 <f_open+0xfc>
 800946c:	2412      	movs	r4, #18
 800946e:	e7b6      	b.n	80093de <f_open+0x6a>
 8009470:	a803      	add	r0, sp, #12
 8009472:	f7ff fe63 	bl	800913c <dir_register>
 8009476:	4604      	mov	r4, r0
 8009478:	e7b1      	b.n	80093de <f_open+0x6a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800947a:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800947e:	f013 0f11 	tst.w	r3, #17
 8009482:	d112      	bne.n	80094aa <f_open+0x136>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009484:	f016 0f04 	tst.w	r6, #4
 8009488:	d0ab      	beq.n	80093e2 <f_open+0x6e>
 800948a:	2408      	movs	r4, #8
 800948c:	e00e      	b.n	80094ac <f_open+0x138>
			if (res == FR_OK) {					/* Following succeeded */
 800948e:	b96c      	cbnz	r4, 80094ac <f_open+0x138>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009490:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8009494:	f013 0f10 	tst.w	r3, #16
 8009498:	d14e      	bne.n	8009538 <f_open+0x1c4>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800949a:	f016 0f02 	tst.w	r6, #2
 800949e:	d005      	beq.n	80094ac <f_open+0x138>
 80094a0:	f013 0f01 	tst.w	r3, #1
 80094a4:	d002      	beq.n	80094ac <f_open+0x138>
						res = FR_DENIED;
 80094a6:	2407      	movs	r4, #7
 80094a8:	e016      	b.n	80094d8 <f_open+0x164>
					res = FR_DENIED;
 80094aa:	2407      	movs	r4, #7
		if (res == FR_OK) {
 80094ac:	b9a4      	cbnz	r4, 80094d8 <f_open+0x164>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80094ae:	f017 0f08 	tst.w	r7, #8
 80094b2:	d001      	beq.n	80094b8 <f_open+0x144>
				mode |= FA_MODIFIED;
 80094b4:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80094b8:	9b02      	ldr	r3, [sp, #8]
 80094ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094bc:	626b      	str	r3, [r5, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80094be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094c0:	62ab      	str	r3, [r5, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80094c2:	f037 0301 	bics.w	r3, r7, #1
 80094c6:	bf14      	ite	ne
 80094c8:	2101      	movne	r1, #1
 80094ca:	2100      	moveq	r1, #0
 80094cc:	a803      	add	r0, sp, #12
 80094ce:	f7fe fdbb 	bl	8008048 <inc_lock>
 80094d2:	6128      	str	r0, [r5, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80094d4:	2800      	cmp	r0, #0
 80094d6:	d067      	beq.n	80095a8 <f_open+0x234>
		if (res == FR_OK) {
 80094d8:	2c00      	cmp	r4, #0
 80094da:	f47f af5d 	bne.w	8009398 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80094de:	9e02      	ldr	r6, [sp, #8]
 80094e0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80094e4:	4641      	mov	r1, r8
 80094e6:	4630      	mov	r0, r6
 80094e8:	f7fe fe5b 	bl	80081a2 <ld_clust>
 80094ec:	60a8      	str	r0, [r5, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80094ee:	f108 001c 	add.w	r0, r8, #28
 80094f2:	f7fe fd20 	bl	8007f36 <ld_dword>
 80094f6:	60e8      	str	r0, [r5, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80094f8:	2100      	movs	r1, #0
 80094fa:	62e9      	str	r1, [r5, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 80094fc:	602e      	str	r6, [r5, #0]
			fp->obj.id = fs->id;
 80094fe:	88f3      	ldrh	r3, [r6, #6]
 8009500:	80ab      	strh	r3, [r5, #4]
			fp->flag = mode;		/* Set file access mode */
 8009502:	752f      	strb	r7, [r5, #20]
			fp->err = 0;			/* Clear error flag */
 8009504:	7569      	strb	r1, [r5, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009506:	6229      	str	r1, [r5, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009508:	61a9      	str	r1, [r5, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800950a:	f105 0630 	add.w	r6, r5, #48	; 0x30
 800950e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009512:	4630      	mov	r0, r6
 8009514:	f7fe fd31 	bl	8007f7a <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009518:	f017 0f20 	tst.w	r7, #32
 800951c:	f43f af3c 	beq.w	8009398 <f_open+0x24>
 8009520:	68ef      	ldr	r7, [r5, #12]
 8009522:	2f00      	cmp	r7, #0
 8009524:	f43f af38 	beq.w	8009398 <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009528:	61af      	str	r7, [r5, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800952a:	9b02      	ldr	r3, [sp, #8]
 800952c:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 8009530:	ea4f 2848 	mov.w	r8, r8, lsl #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009534:	68a9      	ldr	r1, [r5, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009536:	e006      	b.n	8009546 <f_open+0x1d2>
					res = FR_NO_FILE;
 8009538:	2404      	movs	r4, #4
 800953a:	e7cd      	b.n	80094d8 <f_open+0x164>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800953c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8009540:	d011      	beq.n	8009566 <f_open+0x1f2>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009542:	eba7 0708 	sub.w	r7, r7, r8
 8009546:	4547      	cmp	r7, r8
 8009548:	bf94      	ite	ls
 800954a:	2300      	movls	r3, #0
 800954c:	2301      	movhi	r3, #1
 800954e:	2c00      	cmp	r4, #0
 8009550:	bf18      	it	ne
 8009552:	2300      	movne	r3, #0
 8009554:	b14b      	cbz	r3, 800956a <f_open+0x1f6>
					clst = get_fat(&fp->obj, clst);
 8009556:	4628      	mov	r0, r5
 8009558:	f7ff f9bb 	bl	80088d2 <get_fat>
 800955c:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800955e:	2801      	cmp	r0, #1
 8009560:	d8ec      	bhi.n	800953c <f_open+0x1c8>
 8009562:	2402      	movs	r4, #2
 8009564:	e7ea      	b.n	800953c <f_open+0x1c8>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009566:	2401      	movs	r4, #1
 8009568:	e7eb      	b.n	8009542 <f_open+0x1ce>
				fp->clust = clst;
 800956a:	61e9      	str	r1, [r5, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800956c:	2c00      	cmp	r4, #0
 800956e:	f47f af13 	bne.w	8009398 <f_open+0x24>
 8009572:	f3c7 0308 	ubfx	r3, r7, #0, #9
 8009576:	2b00      	cmp	r3, #0
 8009578:	f43f af0e 	beq.w	8009398 <f_open+0x24>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800957c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009580:	4640      	mov	r0, r8
 8009582:	f7fe fdf1 	bl	8008168 <clust2sect>
 8009586:	b908      	cbnz	r0, 800958c <f_open+0x218>
						res = FR_INT_ERR;
 8009588:	2402      	movs	r4, #2
 800958a:	e706      	b.n	800939a <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800958c:	eb00 2257 	add.w	r2, r0, r7, lsr #9
 8009590:	622a      	str	r2, [r5, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009592:	2301      	movs	r3, #1
 8009594:	4631      	mov	r1, r6
 8009596:	f898 0001 	ldrb.w	r0, [r8, #1]
 800959a:	f7fe fca3 	bl	8007ee4 <disk_read>
 800959e:	2800      	cmp	r0, #0
 80095a0:	f43f aefa 	beq.w	8009398 <f_open+0x24>
 80095a4:	2401      	movs	r4, #1
 80095a6:	e6f8      	b.n	800939a <f_open+0x26>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80095a8:	2402      	movs	r4, #2
 80095aa:	e6f5      	b.n	8009398 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 80095ac:	2409      	movs	r4, #9
 80095ae:	e6f6      	b.n	800939e <f_open+0x2a>

080095b0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80095b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b4:	b085      	sub	sp, #20
 80095b6:	4604      	mov	r4, r0
 80095b8:	4688      	mov	r8, r1
 80095ba:	4615      	mov	r5, r2
 80095bc:	4699      	mov	r9, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 80095be:	2300      	movs	r3, #0
 80095c0:	f8c9 3000 	str.w	r3, [r9]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80095c4:	9000      	str	r0, [sp, #0]
 80095c6:	a903      	add	r1, sp, #12
 80095c8:	f7fe fed3 	bl	8008372 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80095cc:	4607      	mov	r7, r0
 80095ce:	2800      	cmp	r0, #0
 80095d0:	d142      	bne.n	8009658 <f_write+0xa8>
 80095d2:	7d67      	ldrb	r7, [r4, #21]
 80095d4:	2f00      	cmp	r7, #0
 80095d6:	d13f      	bne.n	8009658 <f_write+0xa8>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80095d8:	7d23      	ldrb	r3, [r4, #20]
 80095da:	f013 0f02 	tst.w	r3, #2
 80095de:	f000 80c8 	beq.w	8009772 <f_write+0x1c2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80095e2:	69a3      	ldr	r3, [r4, #24]
 80095e4:	42eb      	cmn	r3, r5
 80095e6:	f0c0 809a 	bcc.w	800971e <f_write+0x16e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80095ea:	43dd      	mvns	r5, r3
 80095ec:	e097      	b.n	800971e <f_write+0x16e>
					if (clst == 0) {		/* If no cluster is allocated, */
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80095ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d035      	beq.n	8009660 <f_write+0xb0>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80095f4:	4620      	mov	r0, r4
 80095f6:	f7fe fdc3 	bl	8008180 <clmt_clust>
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80095fa:	2800      	cmp	r0, #0
 80095fc:	f000 80b4 	beq.w	8009768 <f_write+0x1b8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009600:	2801      	cmp	r0, #1
 8009602:	d032      	beq.n	800966a <f_write+0xba>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009604:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009608:	d032      	beq.n	8009670 <f_write+0xc0>
				fp->clust = clst;			/* Update current cluster */
 800960a:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800960c:	68a3      	ldr	r3, [r4, #8]
 800960e:	b903      	cbnz	r3, 8009612 <f_write+0x62>
 8009610:	60a0      	str	r0, [r4, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009612:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8009616:	2b00      	cmp	r3, #0
 8009618:	db2d      	blt.n	8009676 <f_write+0xc6>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800961a:	9b03      	ldr	r3, [sp, #12]
 800961c:	9301      	str	r3, [sp, #4]
 800961e:	69e1      	ldr	r1, [r4, #28]
 8009620:	4618      	mov	r0, r3
 8009622:	f7fe fda1 	bl	8008168 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009626:	4682      	mov	sl, r0
 8009628:	2800      	cmp	r0, #0
 800962a:	d035      	beq.n	8009698 <f_write+0xe8>
			sect += csect;
 800962c:	44b2      	add	sl, r6
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
			if (cc) {						/* Write maximum contiguous sectors directly */
 800962e:	ea5f 2b55 	movs.w	fp, r5, lsr #9
 8009632:	d049      	beq.n	80096c8 <f_write+0x118>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009634:	eb06 030b 	add.w	r3, r6, fp
 8009638:	9a01      	ldr	r2, [sp, #4]
 800963a:	8952      	ldrh	r2, [r2, #10]
 800963c:	4293      	cmp	r3, r2
 800963e:	d901      	bls.n	8009644 <f_write+0x94>
					cc = fs->csize - csect;
 8009640:	eba2 0b06 	sub.w	fp, r2, r6
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009644:	465b      	mov	r3, fp
 8009646:	4652      	mov	r2, sl
 8009648:	4641      	mov	r1, r8
 800964a:	9801      	ldr	r0, [sp, #4]
 800964c:	7840      	ldrb	r0, [r0, #1]
 800964e:	f7fe fc55 	bl	8007efc <disk_write>
 8009652:	b320      	cbz	r0, 800969e <f_write+0xee>
 8009654:	2701      	movs	r7, #1
 8009656:	7567      	strb	r7, [r4, #21]
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 8009658:	4638      	mov	r0, r7
 800965a:	b005      	add	sp, #20
 800965c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009660:	69e1      	ldr	r1, [r4, #28]
 8009662:	9800      	ldr	r0, [sp, #0]
 8009664:	f7ff f9ee 	bl	8008a44 <create_chain>
 8009668:	e7c7      	b.n	80095fa <f_write+0x4a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800966a:	2702      	movs	r7, #2
 800966c:	7567      	strb	r7, [r4, #21]
 800966e:	e7f3      	b.n	8009658 <f_write+0xa8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009670:	2701      	movs	r7, #1
 8009672:	7567      	strb	r7, [r4, #21]
 8009674:	e7f0      	b.n	8009658 <f_write+0xa8>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009676:	2301      	movs	r3, #1
 8009678:	6a22      	ldr	r2, [r4, #32]
 800967a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800967e:	9803      	ldr	r0, [sp, #12]
 8009680:	7840      	ldrb	r0, [r0, #1]
 8009682:	f7fe fc3b 	bl	8007efc <disk_write>
 8009686:	b920      	cbnz	r0, 8009692 <f_write+0xe2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009688:	7d23      	ldrb	r3, [r4, #20]
 800968a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800968e:	7523      	strb	r3, [r4, #20]
 8009690:	e7c3      	b.n	800961a <f_write+0x6a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009692:	2701      	movs	r7, #1
 8009694:	7567      	strb	r7, [r4, #21]
 8009696:	e7df      	b.n	8009658 <f_write+0xa8>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009698:	2702      	movs	r7, #2
 800969a:	7567      	strb	r7, [r4, #21]
 800969c:	e7dc      	b.n	8009658 <f_write+0xa8>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800969e:	6a21      	ldr	r1, [r4, #32]
 80096a0:	eba1 010a 	sub.w	r1, r1, sl
 80096a4:	4559      	cmp	r1, fp
 80096a6:	d302      	bcc.n	80096ae <f_write+0xfe>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80096a8:	ea4f 264b 	mov.w	r6, fp, lsl #9
				continue;
 80096ac:	e028      	b.n	8009700 <f_write+0x150>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80096ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096b2:	eb08 2141 	add.w	r1, r8, r1, lsl #9
 80096b6:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80096ba:	f7fe fc55 	bl	8007f68 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80096be:	7d23      	ldrb	r3, [r4, #20]
 80096c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096c4:	7523      	strb	r3, [r4, #20]
 80096c6:	e7ef      	b.n	80096a8 <f_write+0xf8>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80096c8:	6a23      	ldr	r3, [r4, #32]
 80096ca:	4553      	cmp	r3, sl
 80096cc:	d003      	beq.n	80096d6 <f_write+0x126>
				fp->fptr < fp->obj.objsize &&
 80096ce:	69a2      	ldr	r2, [r4, #24]
 80096d0:	68e3      	ldr	r3, [r4, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d33b      	bcc.n	800974e <f_write+0x19e>
			fp->sect = sect;
 80096d6:	f8c4 a020 	str.w	sl, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80096da:	69a3      	ldr	r3, [r4, #24]
 80096dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e0:	f5c3 7600 	rsb	r6, r3, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80096e4:	42b5      	cmp	r5, r6
 80096e6:	d200      	bcs.n	80096ea <f_write+0x13a>
 80096e8:	462e      	mov	r6, r5
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80096ea:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80096ee:	4632      	mov	r2, r6
 80096f0:	4641      	mov	r1, r8
 80096f2:	4418      	add	r0, r3
 80096f4:	f7fe fc38 	bl	8007f68 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80096f8:	7d23      	ldrb	r3, [r4, #20]
 80096fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80096fe:	7523      	strb	r3, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009700:	44b0      	add	r8, r6
 8009702:	69a3      	ldr	r3, [r4, #24]
 8009704:	4433      	add	r3, r6
 8009706:	61a3      	str	r3, [r4, #24]
 8009708:	68e2      	ldr	r2, [r4, #12]
 800970a:	4293      	cmp	r3, r2
 800970c:	bf38      	it	cc
 800970e:	4613      	movcc	r3, r2
 8009710:	60e3      	str	r3, [r4, #12]
 8009712:	f8d9 3000 	ldr.w	r3, [r9]
 8009716:	4433      	add	r3, r6
 8009718:	f8c9 3000 	str.w	r3, [r9]
 800971c:	1bad      	subs	r5, r5, r6
	for ( ;  btw;							/* Repeat until all data written */
 800971e:	b31d      	cbz	r5, 8009768 <f_write+0x1b8>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009720:	69a1      	ldr	r1, [r4, #24]
 8009722:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8009726:	2b00      	cmp	r3, #0
 8009728:	d1d7      	bne.n	80096da <f_write+0x12a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800972a:	9b03      	ldr	r3, [sp, #12]
 800972c:	895e      	ldrh	r6, [r3, #10]
 800972e:	3e01      	subs	r6, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8009730:	ea16 2651 	ands.w	r6, r6, r1, lsr #9
 8009734:	f47f af6d 	bne.w	8009612 <f_write+0x62>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009738:	2900      	cmp	r1, #0
 800973a:	f47f af58 	bne.w	80095ee <f_write+0x3e>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800973e:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8009740:	2800      	cmp	r0, #0
 8009742:	f47f af5a 	bne.w	80095fa <f_write+0x4a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009746:	9800      	ldr	r0, [sp, #0]
 8009748:	f7ff f97c 	bl	8008a44 <create_chain>
 800974c:	e755      	b.n	80095fa <f_write+0x4a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800974e:	2301      	movs	r3, #1
 8009750:	4652      	mov	r2, sl
 8009752:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8009756:	9801      	ldr	r0, [sp, #4]
 8009758:	7840      	ldrb	r0, [r0, #1]
 800975a:	f7fe fbc3 	bl	8007ee4 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800975e:	2800      	cmp	r0, #0
 8009760:	d0b9      	beq.n	80096d6 <f_write+0x126>
					ABORT(fs, FR_DISK_ERR);
 8009762:	2701      	movs	r7, #1
 8009764:	7567      	strb	r7, [r4, #21]
 8009766:	e777      	b.n	8009658 <f_write+0xa8>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009768:	7d23      	ldrb	r3, [r4, #20]
 800976a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800976e:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8009770:	e772      	b.n	8009658 <f_write+0xa8>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009772:	2707      	movs	r7, #7
 8009774:	e770      	b.n	8009658 <f_write+0xa8>

08009776 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009776:	b570      	push	{r4, r5, r6, lr}
 8009778:	b082      	sub	sp, #8
 800977a:	4604      	mov	r4, r0
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800977c:	a901      	add	r1, sp, #4
 800977e:	f7fe fdf8 	bl	8008372 <validate>
	if (res == FR_OK) {
 8009782:	4603      	mov	r3, r0
 8009784:	b978      	cbnz	r0, 80097a6 <f_sync+0x30>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009786:	7d22      	ldrb	r2, [r4, #20]
 8009788:	f012 0f40 	tst.w	r2, #64	; 0x40
 800978c:	d00b      	beq.n	80097a6 <f_sync+0x30>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800978e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8009792:	d10b      	bne.n	80097ac <f_sync+0x36>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009794:	f000 fd2a 	bl	800a1ec <get_fattime>
 8009798:	4606      	mov	r6, r0
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800979a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800979c:	9801      	ldr	r0, [sp, #4]
 800979e:	f7fe fe36 	bl	800840e <move_window>
				if (res == FR_OK) {
 80097a2:	4603      	mov	r3, r0
 80097a4:	b180      	cbz	r0, 80097c8 <f_sync+0x52>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	b002      	add	sp, #8
 80097aa:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80097ac:	2301      	movs	r3, #1
 80097ae:	6a22      	ldr	r2, [r4, #32]
 80097b0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80097b4:	9801      	ldr	r0, [sp, #4]
 80097b6:	7840      	ldrb	r0, [r0, #1]
 80097b8:	f7fe fba0 	bl	8007efc <disk_write>
 80097bc:	bb48      	cbnz	r0, 8009812 <f_sync+0x9c>
				fp->flag &= (BYTE)~FA_DIRTY;
 80097be:	7d23      	ldrb	r3, [r4, #20]
 80097c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097c4:	7523      	strb	r3, [r4, #20]
 80097c6:	e7e5      	b.n	8009794 <f_sync+0x1e>
					dir = fp->dir_ptr;
 80097c8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80097ca:	7aeb      	ldrb	r3, [r5, #11]
 80097cc:	f043 0320 	orr.w	r3, r3, #32
 80097d0:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80097d2:	68a2      	ldr	r2, [r4, #8]
 80097d4:	4629      	mov	r1, r5
 80097d6:	6820      	ldr	r0, [r4, #0]
 80097d8:	f7fe fcf6 	bl	80081c8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80097dc:	68e1      	ldr	r1, [r4, #12]
 80097de:	f105 001c 	add.w	r0, r5, #28
 80097e2:	f7fe fbb7 	bl	8007f54 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80097e6:	4631      	mov	r1, r6
 80097e8:	f105 0016 	add.w	r0, r5, #22
 80097ec:	f7fe fbb2 	bl	8007f54 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80097f0:	2100      	movs	r1, #0
 80097f2:	f105 0012 	add.w	r0, r5, #18
 80097f6:	f7fe fba9 	bl	8007f4c <st_word>
					fs->wflag = 1;
 80097fa:	9b01      	ldr	r3, [sp, #4]
 80097fc:	2201      	movs	r2, #1
 80097fe:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009800:	9801      	ldr	r0, [sp, #4]
 8009802:	f7ff fd3d 	bl	8009280 <sync_fs>
 8009806:	4603      	mov	r3, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009808:	7d22      	ldrb	r2, [r4, #20]
 800980a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800980e:	7522      	strb	r2, [r4, #20]
 8009810:	e7c9      	b.n	80097a6 <f_sync+0x30>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009812:	2301      	movs	r3, #1
 8009814:	e7c7      	b.n	80097a6 <f_sync+0x30>

08009816 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009816:	b510      	push	{r4, lr}
 8009818:	b082      	sub	sp, #8
 800981a:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800981c:	f7ff ffab 	bl	8009776 <f_sync>
	if (res == FR_OK)
 8009820:	4603      	mov	r3, r0
 8009822:	b110      	cbz	r0, 800982a <f_close+0x14>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8009824:	4618      	mov	r0, r3
 8009826:	b002      	add	sp, #8
 8009828:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800982a:	a901      	add	r1, sp, #4
 800982c:	4620      	mov	r0, r4
 800982e:	f7fe fda0 	bl	8008372 <validate>
		if (res == FR_OK) {
 8009832:	4603      	mov	r3, r0
 8009834:	2800      	cmp	r0, #0
 8009836:	d1f5      	bne.n	8009824 <f_close+0xe>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009838:	6920      	ldr	r0, [r4, #16]
 800983a:	f7fe fc57 	bl	80080ec <dec_lock>
			if (res == FR_OK)
 800983e:	4603      	mov	r3, r0
 8009840:	2800      	cmp	r0, #0
 8009842:	d1ef      	bne.n	8009824 <f_close+0xe>
				fp->obj.fs = 0;			/* Invalidate file object */
 8009844:	2200      	movs	r2, #0
 8009846:	6022      	str	r2, [r4, #0]
 8009848:	e7ec      	b.n	8009824 <f_close+0xe>
	...

0800984c <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800984c:	4b10      	ldr	r3, [pc, #64]	; (8009890 <FATFS_LinkDriverEx+0x44>)
 800984e:	7a5b      	ldrb	r3, [r3, #9]
 8009850:	b9db      	cbnz	r3, 800988a <FATFS_LinkDriverEx+0x3e>
{
 8009852:	b430      	push	{r4, r5}
  {
    disk.is_initialized[disk.nbr] = 0;
 8009854:	4b0e      	ldr	r3, [pc, #56]	; (8009890 <FATFS_LinkDriverEx+0x44>)
 8009856:	7a5d      	ldrb	r5, [r3, #9]
 8009858:	b2ed      	uxtb	r5, r5
 800985a:	2400      	movs	r4, #0
 800985c:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 800985e:	7a5d      	ldrb	r5, [r3, #9]
 8009860:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8009864:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8009866:	7a58      	ldrb	r0, [r3, #9]
 8009868:	4418      	add	r0, r3
 800986a:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800986c:	7a5a      	ldrb	r2, [r3, #9]
 800986e:	b2d2      	uxtb	r2, r2
 8009870:	1c50      	adds	r0, r2, #1
 8009872:	b2c0      	uxtb	r0, r0
 8009874:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
 8009876:	3230      	adds	r2, #48	; 0x30
 8009878:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800987a:	233a      	movs	r3, #58	; 0x3a
 800987c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800987e:	232f      	movs	r3, #47	; 0x2f
 8009880:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8009882:	70cc      	strb	r4, [r1, #3]
    ret = 0;
 8009884:	4620      	mov	r0, r4
  }

  return ret;
}
 8009886:	bc30      	pop	{r4, r5}
 8009888:	4770      	bx	lr
  uint8_t ret = 1;
 800988a:	2001      	movs	r0, #1
}
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	20000374 	.word	0x20000374

08009894 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009894:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8009896:	2200      	movs	r2, #0
 8009898:	f7ff ffd8 	bl	800984c <FATFS_LinkDriverEx>
}
 800989c:	bd08      	pop	{r3, pc}
	...

080098a0 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80098a0:	287f      	cmp	r0, #127	; 0x7f
 80098a2:	d916      	bls.n	80098d2 <ff_convert+0x32>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 80098a4:	b131      	cbz	r1, 80098b4 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80098a6:	28ff      	cmp	r0, #255	; 0xff
 80098a8:	d812      	bhi.n	80098d0 <ff_convert+0x30>
 80098aa:	3880      	subs	r0, #128	; 0x80
 80098ac:	4b09      	ldr	r3, [pc, #36]	; (80098d4 <ff_convert+0x34>)
 80098ae:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80098b2:	4770      	bx	lr

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80098b4:	2300      	movs	r3, #0
 80098b6:	2b7f      	cmp	r3, #127	; 0x7f
 80098b8:	d807      	bhi.n	80098ca <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 80098ba:	4a06      	ldr	r2, [pc, #24]	; (80098d4 <ff_convert+0x34>)
 80098bc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80098c0:	4282      	cmp	r2, r0
 80098c2:	d002      	beq.n	80098ca <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 80098c4:	3301      	adds	r3, #1
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	e7f5      	b.n	80098b6 <ff_convert+0x16>
			}
			c = (c + 0x80) & 0xFF;
 80098ca:	3380      	adds	r3, #128	; 0x80
 80098cc:	b2d8      	uxtb	r0, r3
 80098ce:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80098d0:	2000      	movs	r0, #0
		}
	}

	return c;
}
 80098d2:	4770      	bx	lr
 80098d4:	0800dca0 	.word	0x0800dca0

080098d8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80098d8:	b4f0      	push	{r4, r5, r6, r7}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80098da:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80098de:	d201      	bcs.n	80098e4 <ff_wtoupper+0xc>
 80098e0:	4b21      	ldr	r3, [pc, #132]	; (8009968 <ff_wtoupper+0x90>)
 80098e2:	e002      	b.n	80098ea <ff_wtoupper+0x12>
 80098e4:	4b21      	ldr	r3, [pc, #132]	; (800996c <ff_wtoupper+0x94>)
 80098e6:	e000      	b.n	80098ea <ff_wtoupper+0x12>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80098e8:	462b      	mov	r3, r5
		bc = *p++;								/* Get block base */
 80098ea:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 80098ec:	4290      	cmp	r0, r2
 80098ee:	bf2c      	ite	cs
 80098f0:	2100      	movcs	r1, #0
 80098f2:	2101      	movcc	r1, #1
 80098f4:	2a00      	cmp	r2, #0
 80098f6:	bf08      	it	eq
 80098f8:	2101      	moveq	r1, #1
 80098fa:	b9b9      	cbnz	r1, 800992c <ff_wtoupper+0x54>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80098fc:	1d1d      	adds	r5, r3, #4
 80098fe:	885b      	ldrh	r3, [r3, #2]
 8009900:	0a19      	lsrs	r1, r3, #8
 8009902:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 8009904:	189c      	adds	r4, r3, r2
 8009906:	42a0      	cmp	r0, r4
 8009908:	db04      	blt.n	8009914 <ff_wtoupper+0x3c>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800990a:	2900      	cmp	r1, #0
 800990c:	d1ec      	bne.n	80098e8 <ff_wtoupper+0x10>
 800990e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8009912:	e7ea      	b.n	80098ea <ff_wtoupper+0x12>
			switch (cmd) {
 8009914:	2908      	cmp	r1, #8
 8009916:	d809      	bhi.n	800992c <ff_wtoupper+0x54>
 8009918:	e8df f001 	tbb	[pc, r1]
 800991c:	13100a05 	.word	0x13100a05
 8009920:	1f1c1916 	.word	0x1f1c1916
 8009924:	22          	.byte	0x22
 8009925:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009926:	1a86      	subs	r6, r0, r2
 8009928:	f835 0016 	ldrh.w	r0, [r5, r6, lsl #1]
	}

	return chr;
}
 800992c:	bcf0      	pop	{r4, r5, r6, r7}
 800992e:	4770      	bx	lr
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009930:	1a82      	subs	r2, r0, r2
 8009932:	f002 0301 	and.w	r3, r2, #1
 8009936:	1ac0      	subs	r0, r0, r3
 8009938:	b280      	uxth	r0, r0
 800993a:	e7f7      	b.n	800992c <ff_wtoupper+0x54>
			case 2: chr -= 16; break;				/* Shift -16 */
 800993c:	3810      	subs	r0, #16
 800993e:	b280      	uxth	r0, r0
 8009940:	e7f4      	b.n	800992c <ff_wtoupper+0x54>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009942:	3820      	subs	r0, #32
 8009944:	b280      	uxth	r0, r0
 8009946:	e7f1      	b.n	800992c <ff_wtoupper+0x54>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009948:	3830      	subs	r0, #48	; 0x30
 800994a:	b280      	uxth	r0, r0
 800994c:	e7ee      	b.n	800992c <ff_wtoupper+0x54>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800994e:	381a      	subs	r0, #26
 8009950:	b280      	uxth	r0, r0
 8009952:	e7eb      	b.n	800992c <ff_wtoupper+0x54>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009954:	3008      	adds	r0, #8
 8009956:	b280      	uxth	r0, r0
 8009958:	e7e8      	b.n	800992c <ff_wtoupper+0x54>
			case 7: chr -= 80; break;				/* Shift -80 */
 800995a:	3850      	subs	r0, #80	; 0x50
 800995c:	b280      	uxth	r0, r0
 800995e:	e7e5      	b.n	800992c <ff_wtoupper+0x54>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009960:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8009964:	b280      	uxth	r0, r0
 8009966:	e7e1      	b.n	800992c <ff_wtoupper+0x54>
 8009968:	0800de5c 	.word	0x0800de5c
 800996c:	0800dda0 	.word	0x0800dda0

08009970 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8009970:	b500      	push	{lr}
 8009972:	b08b      	sub	sp, #44	; 0x2c
  ADC_MultiModeTypeDef multimode = {0};
 8009974:	2300      	movs	r3, #0
 8009976:	9307      	str	r3, [sp, #28]
 8009978:	9308      	str	r3, [sp, #32]
 800997a:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 800997c:	9300      	str	r3, [sp, #0]
 800997e:	9301      	str	r3, [sp, #4]
 8009980:	9302      	str	r3, [sp, #8]
 8009982:	9303      	str	r3, [sp, #12]
 8009984:	9304      	str	r3, [sp, #16]
 8009986:	9305      	str	r3, [sp, #20]
 8009988:	9306      	str	r3, [sp, #24]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800998a:	483a      	ldr	r0, [pc, #232]	; (8009a74 <MX_ADC1_Init+0x104>)
 800998c:	4a3a      	ldr	r2, [pc, #232]	; (8009a78 <MX_ADC1_Init+0x108>)
 800998e:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8009990:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009994:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8009996:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8009998:	2201      	movs	r2, #1
 800999a:	60c2      	str	r2, [r0, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800999c:	2108      	movs	r1, #8
 800999e:	6101      	str	r1, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80099a0:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80099a2:	7543      	strb	r3, [r0, #21]
  hadc1.Init.NbrOfConversion = 4;
 80099a4:	2104      	movs	r1, #4
 80099a6:	6181      	str	r1, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80099a8:	7703      	strb	r3, [r0, #28]
  hadc1.Init.NbrOfDiscConversion = 4;
 80099aa:	6201      	str	r1, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 80099ac:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 80099b0:	6241      	str	r1, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80099b2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80099b6:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80099b8:	2103      	movs	r1, #3
 80099ba:	62c1      	str	r1, [r0, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80099bc:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80099be:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 80099c0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = 2;
 80099c4:	2202      	movs	r2, #2
 80099c6:	63c2      	str	r2, [r0, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 80099c8:	2220      	movs	r2, #32
 80099ca:	6402      	str	r2, [r0, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80099cc:	6443      	str	r3, [r0, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 80099ce:	f240 4301 	movw	r3, #1025	; 0x401
 80099d2:	6483      	str	r3, [r0, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80099d4:	f7f7 fa56 	bl	8000e84 <HAL_ADC_Init>
 80099d8:	2800      	cmp	r0, #0
 80099da:	d139      	bne.n	8009a50 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80099dc:	a90a      	add	r1, sp, #40	; 0x28
 80099de:	2300      	movs	r3, #0
 80099e0:	f841 3d0c 	str.w	r3, [r1, #-12]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80099e4:	4823      	ldr	r0, [pc, #140]	; (8009a74 <MX_ADC1_Init+0x104>)
 80099e6:	f7f7 fb8b 	bl	8001100 <HAL_ADCEx_MultiModeConfigChannel>
 80099ea:	2800      	cmp	r0, #0
 80099ec:	d133      	bne.n	8009a56 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80099ee:	4b23      	ldr	r3, [pc, #140]	; (8009a7c <MX_ADC1_Init+0x10c>)
 80099f0:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80099f2:	2306      	movs	r3, #6
 80099f4:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 80099f6:	2303      	movs	r3, #3
 80099f8:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80099fa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80099fe:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8009a00:	2304      	movs	r3, #4
 8009a02:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 32768;
 8009a04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a08:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009a0a:	4669      	mov	r1, sp
 8009a0c:	4819      	ldr	r0, [pc, #100]	; (8009a74 <MX_ADC1_Init+0x104>)
 8009a0e:	f7f6 fd45 	bl	800049c <HAL_ADC_ConfigChannel>
 8009a12:	bb18      	cbnz	r0, 8009a5c <MX_ADC1_Init+0xec>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8009a14:	4b1a      	ldr	r3, [pc, #104]	; (8009a80 <MX_ADC1_Init+0x110>)
 8009a16:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8009a18:	230c      	movs	r3, #12
 8009a1a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009a1c:	4669      	mov	r1, sp
 8009a1e:	4815      	ldr	r0, [pc, #84]	; (8009a74 <MX_ADC1_Init+0x104>)
 8009a20:	f7f6 fd3c 	bl	800049c <HAL_ADC_ConfigChannel>
 8009a24:	b9e8      	cbnz	r0, 8009a62 <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8009a26:	4b17      	ldr	r3, [pc, #92]	; (8009a84 <MX_ADC1_Init+0x114>)
 8009a28:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8009a2a:	2312      	movs	r3, #18
 8009a2c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009a2e:	4669      	mov	r1, sp
 8009a30:	4810      	ldr	r0, [pc, #64]	; (8009a74 <MX_ADC1_Init+0x104>)
 8009a32:	f7f6 fd33 	bl	800049c <HAL_ADC_ConfigChannel>
 8009a36:	b9b8      	cbnz	r0, 8009a68 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8009a38:	4b13      	ldr	r3, [pc, #76]	; (8009a88 <MX_ADC1_Init+0x118>)
 8009a3a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8009a3c:	2318      	movs	r3, #24
 8009a3e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009a40:	4669      	mov	r1, sp
 8009a42:	480c      	ldr	r0, [pc, #48]	; (8009a74 <MX_ADC1_Init+0x104>)
 8009a44:	f7f6 fd2a 	bl	800049c <HAL_ADC_ConfigChannel>
 8009a48:	b988      	cbnz	r0, 8009a6e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
  }

}
 8009a4a:	b00b      	add	sp, #44	; 0x2c
 8009a4c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8009a50:	f001 f9da 	bl	800ae08 <Error_Handler>
 8009a54:	e7c2      	b.n	80099dc <MX_ADC1_Init+0x6c>
    Error_Handler();
 8009a56:	f001 f9d7 	bl	800ae08 <Error_Handler>
 8009a5a:	e7c8      	b.n	80099ee <MX_ADC1_Init+0x7e>
    Error_Handler();
 8009a5c:	f001 f9d4 	bl	800ae08 <Error_Handler>
 8009a60:	e7d8      	b.n	8009a14 <MX_ADC1_Init+0xa4>
    Error_Handler();
 8009a62:	f001 f9d1 	bl	800ae08 <Error_Handler>
 8009a66:	e7de      	b.n	8009a26 <MX_ADC1_Init+0xb6>
    Error_Handler();
 8009a68:	f001 f9ce 	bl	800ae08 <Error_Handler>
 8009a6c:	e7e4      	b.n	8009a38 <MX_ADC1_Init+0xc8>
    Error_Handler();
 8009a6e:	f001 f9cb 	bl	800ae08 <Error_Handler>
}
 8009a72:	e7ea      	b.n	8009a4a <MX_ADC1_Init+0xda>
 8009a74:	200004e8 	.word	0x200004e8
 8009a78:	40022000 	.word	0x40022000
 8009a7c:	3ef08000 	.word	0x3ef08000
 8009a80:	47520000 	.word	0x47520000
 8009a84:	3ac04000 	.word	0x3ac04000
 8009a88:	43210000 	.word	0x43210000

08009a8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8009a8c:	b510      	push	{r4, lr}
 8009a8e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a90:	2300      	movs	r3, #0
 8009a92:	9303      	str	r3, [sp, #12]
 8009a94:	9304      	str	r3, [sp, #16]
 8009a96:	9305      	str	r3, [sp, #20]
 8009a98:	9306      	str	r3, [sp, #24]
 8009a9a:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8009a9c:	6802      	ldr	r2, [r0, #0]
 8009a9e:	4b27      	ldr	r3, [pc, #156]	; (8009b3c <HAL_ADC_MspInit+0xb0>)
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d001      	beq.n	8009aa8 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8009aa4:	b008      	add	sp, #32
 8009aa6:	bd10      	pop	{r4, pc}
 8009aa8:	4604      	mov	r4, r0
    __HAL_RCC_ADC12_CLK_ENABLE();
 8009aaa:	4b25      	ldr	r3, [pc, #148]	; (8009b40 <HAL_ADC_MspInit+0xb4>)
 8009aac:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8009ab0:	f042 0220 	orr.w	r2, r2, #32
 8009ab4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8009ab8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8009abc:	f002 0220 	and.w	r2, r2, #32
 8009ac0:	9201      	str	r2, [sp, #4]
 8009ac2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ac4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009ac8:	f042 0201 	orr.w	r2, r2, #1
 8009acc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ad4:	f003 0301 	and.w	r3, r3, #1
 8009ad8:	9302      	str	r3, [sp, #8]
 8009ada:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8009adc:	230f      	movs	r3, #15
 8009ade:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009ae0:	2303      	movs	r3, #3
 8009ae2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ae4:	a903      	add	r1, sp, #12
 8009ae6:	4817      	ldr	r0, [pc, #92]	; (8009b44 <HAL_ADC_MspInit+0xb8>)
 8009ae8:	f7f9 f82c 	bl	8002b44 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8009aec:	4816      	ldr	r0, [pc, #88]	; (8009b48 <HAL_ADC_MspInit+0xbc>)
 8009aee:	4b17      	ldr	r3, [pc, #92]	; (8009b4c <HAL_ADC_MspInit+0xc0>)
 8009af0:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8009af2:	2309      	movs	r3, #9
 8009af4:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009af6:	2300      	movs	r3, #0
 8009af8:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8009afa:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8009afc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009b00:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009b02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009b06:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009b08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009b0c:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8009b0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b12:	61c2      	str	r2, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009b14:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009b18:	6202      	str	r2, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8009b1a:	2204      	movs	r2, #4
 8009b1c:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8009b1e:	2201      	movs	r2, #1
 8009b20:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8009b22:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8009b24:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8009b26:	f7f7 fe6f 	bl	8001808 <HAL_DMA_Init>
 8009b2a:	b918      	cbnz	r0, 8009b34 <HAL_ADC_MspInit+0xa8>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8009b2c:	4b06      	ldr	r3, [pc, #24]	; (8009b48 <HAL_ADC_MspInit+0xbc>)
 8009b2e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009b30:	639c      	str	r4, [r3, #56]	; 0x38
}
 8009b32:	e7b7      	b.n	8009aa4 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8009b34:	f001 f968 	bl	800ae08 <Error_Handler>
 8009b38:	e7f8      	b.n	8009b2c <HAL_ADC_MspInit+0xa0>
 8009b3a:	bf00      	nop
 8009b3c:	40022000 	.word	0x40022000
 8009b40:	58024400 	.word	0x58024400
 8009b44:	58020000 	.word	0x58020000
 8009b48:	2000054c 	.word	0x2000054c
 8009b4c:	40020010 	.word	0x40020010

08009b50 <audioInit>:
	TRUE
} BOOL;


void audioInit(I2C_HandleTypeDef* hi2c, SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 8009b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b54:	4606      	mov	r6, r0
 8009b56:	4688      	mov	r8, r1
 8009b58:	4617      	mov	r7, r2
	// Initialize LEAF.

	LEAF_init(SAMPLE_RATE, AUDIO_FRAME_SIZE, smallMemory, SMALL_MEM_SIZE, &randomNumber);
 8009b5a:	4b65      	ldr	r3, [pc, #404]	; (8009cf0 <audioInit+0x1a0>)
 8009b5c:	f242 7210 	movw	r2, #10000	; 0x2710
 8009b60:	4964      	ldr	r1, [pc, #400]	; (8009cf4 <audioInit+0x1a4>)
 8009b62:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009b66:	ed9f 0a64 	vldr	s0, [pc, #400]	; 8009cf8 <audioInit+0x1a8>
 8009b6a:	f002 fc09 	bl	800c380 <LEAF_init>

	//tMempool_init (&mediumPool, mediumMemory, MEDIUM_MEM_SIZE);
	//tMempool_init (&largePool, largeMemory, LARGE_MEM_SIZE);

	HAL_Delay(10);
 8009b6e:	200a      	movs	r0, #10
 8009b70:	f7f6 fc18 	bl	80003a4 <HAL_Delay>

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8009b74:	2300      	movs	r3, #0
 8009b76:	e004      	b.n	8009b82 <audioInit+0x32>
	{
		audioOutBuffer[i] = 0;
 8009b78:	4a60      	ldr	r2, [pc, #384]	; (8009cfc <audioInit+0x1ac>)
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8009b80:	3301      	adds	r3, #1
 8009b82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b86:	dbf7      	blt.n	8009b78 <audioInit+0x28>
	}

	for (int i = 0; i < NUM_ADC_CHANNELS * FILTER_ORDER; i++)
 8009b88:	2400      	movs	r4, #0
 8009b8a:	e010      	b.n	8009bae <audioInit+0x5e>
	{
		tHighpass_init(&opticalHighpass[i], 100.0f);
 8009b8c:	00a5      	lsls	r5, r4, #2
 8009b8e:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8009d00 <audioInit+0x1b0>
 8009b92:	485c      	ldr	r0, [pc, #368]	; (8009d04 <audioInit+0x1b4>)
 8009b94:	4428      	add	r0, r5
 8009b96:	f002 f815 	bl	800bbc4 <tHighpass_init>
		tVZFilter_init(&opticalLowpass[i], Lowpass, 1000.0f, 0.6f);
 8009b9a:	eddf 0a5b 	vldr	s1, [pc, #364]	; 8009d08 <audioInit+0x1b8>
 8009b9e:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8009d0c <audioInit+0x1bc>
 8009ba2:	2101      	movs	r1, #1
 8009ba4:	485a      	ldr	r0, [pc, #360]	; (8009d10 <audioInit+0x1c0>)
 8009ba6:	4428      	add	r0, r5
 8009ba8:	f002 f9ee 	bl	800bf88 <tVZFilter_init>
	for (int i = 0; i < NUM_ADC_CHANNELS * FILTER_ORDER; i++)
 8009bac:	3401      	adds	r4, #1
 8009bae:	2c2f      	cmp	r4, #47	; 0x2f
 8009bb0:	ddec      	ble.n	8009b8c <audioInit+0x3c>
	}
	LEAF_generate_atodb(atodbTable, ATODB_TABLE_SIZE);
 8009bb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009bb6:	4857      	ldr	r0, [pc, #348]	; (8009d14 <audioInit+0x1c4>)
 8009bb8:	f002 f9f6 	bl	800bfa8 <LEAF_generate_atodb>

	tSimplePoly_init(&poly,1);
 8009bbc:	4c56      	ldr	r4, [pc, #344]	; (8009d18 <audioInit+0x1c8>)
 8009bbe:	2101      	movs	r1, #1
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	f002 fb55 	bl	800c270 <tSimplePoly_init>
	tSimplePoly_setNumVoices(&poly,1);
 8009bc6:	2101      	movs	r1, #1
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f002 fb59 	bl	800c280 <tSimplePoly_setNumVoices>
	poly->recover_stolen = 0;
 8009bce:	6823      	ldr	r3, [r4, #0]
 8009bd0:	2500      	movs	r5, #0
 8009bd2:	619d      	str	r5, [r3, #24]
	tExpSmooth_init(&gainSmoothed, 0.0f, 0.01f);
 8009bd4:	eddf 0a51 	vldr	s1, [pc, #324]	; 8009d1c <audioInit+0x1cc>
 8009bd8:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8009d20 <audioInit+0x1d0>
 8009bdc:	4851      	ldr	r0, [pc, #324]	; (8009d24 <audioInit+0x1d4>)
 8009bde:	f001 ff0d 	bl	800b9fc <tExpSmooth_init>
		tSVF_init(&lowpass[i], SVFTypeLowpass, 1000.0f, 1.0f);
	}
	*/


	for (int i = 0; i < NUM_STRINGS; i++)
 8009be2:	e068      	b.n	8009cb6 <audioInit+0x166>
	{
		for (int j = 0; j < NUM_SAWTOOTHS; j++)
		{
			tSawtooth_init(&mySaw[i][j]);
 8009be4:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 8009be8:	4b4f      	ldr	r3, [pc, #316]	; (8009d28 <audioInit+0x1d8>)
 8009bea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009bee:	f002 fba5 	bl	800c33c <tSawtooth_init>
		for (int j = 0; j < NUM_SAWTOOTHS; j++)
 8009bf2:	3401      	adds	r4, #1
 8009bf4:	2c03      	cmp	r4, #3
 8009bf6:	ddf5      	ble.n	8009be4 <audioInit+0x94>
		}
		tSVF_init(&myLowpass[i], SVFTypeLowpass, 5000.0f, 0.5f);
 8009bf8:	00ac      	lsls	r4, r5, #2
 8009bfa:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8009bfe:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8009d2c <audioInit+0x1dc>
 8009c02:	2101      	movs	r1, #1
 8009c04:	484a      	ldr	r0, [pc, #296]	; (8009d30 <audioInit+0x1e0>)
 8009c06:	4420      	add	r0, r4
 8009c08:	f001 ffb2 	bl	800bb70 <tSVF_init>
		tCycle_init(&mySine[i]);
 8009c0c:	4849      	ldr	r0, [pc, #292]	; (8009d34 <audioInit+0x1e4>)
 8009c0e:	4420      	add	r0, r4
 8009c10:	f002 fb4a 	bl	800c2a8 <tCycle_init>
		tHighpass_init(&dcBlock[i], 3000.0f);
 8009c14:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8009d38 <audioInit+0x1e8>
 8009c18:	4848      	ldr	r0, [pc, #288]	; (8009d3c <audioInit+0x1ec>)
 8009c1a:	4420      	add	r0, r4
 8009c1c:	f001 ffd2 	bl	800bbc4 <tHighpass_init>
		tExpSmooth_init(&pitchSmoother[i], 80.0f, 0.002f);
 8009c20:	eddf 0a47 	vldr	s1, [pc, #284]	; 8009d40 <audioInit+0x1f0>
 8009c24:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8009d44 <audioInit+0x1f4>
 8009c28:	4847      	ldr	r0, [pc, #284]	; (8009d48 <audioInit+0x1f8>)
 8009c2a:	4420      	add	r0, r4
 8009c2c:	f001 fee6 	bl	800b9fc <tExpSmooth_init>
		tNoise_init(&noise[i], WhiteNoise);
 8009c30:	2100      	movs	r1, #0
 8009c32:	4846      	ldr	r0, [pc, #280]	; (8009d4c <audioInit+0x1fc>)
 8009c34:	4420      	add	r0, r4
 8009c36:	f002 fb9b 	bl	800c370 <tNoise_init>
		tThreshold_init(&threshold[i],0.5f, 8.0f);
 8009c3a:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 8009c3e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8009c42:	4843      	ldr	r0, [pc, #268]	; (8009d50 <audioInit+0x200>)
 8009c44:	4420      	add	r0, r4
 8009c46:	f001 fd83 	bl	800b750 <tThreshold_init>
		tADSR_init(&envelope[i], 6.0f, 100.0f, 0.6f, 20.0f);
 8009c4a:	4b42      	ldr	r3, [pc, #264]	; (8009d54 <audioInit+0x204>)
 8009c4c:	eb04 0903 	add.w	r9, r4, r3
 8009c50:	eef3 1a04 	vmov.f32	s3, #52	; 0x41a00000  20.0
 8009c54:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 8009d08 <audioInit+0x1b8>
 8009c58:	eddf 0a29 	vldr	s1, [pc, #164]	; 8009d00 <audioInit+0x1b0>
 8009c5c:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8009c60:	4648      	mov	r0, r9
 8009c62:	f001 fe29 	bl	800b8b8 <tADSR_init>
		tADSR_setLeakFactor(&envelope[i], 0.99998f);
 8009c66:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8009d58 <audioInit+0x208>
 8009c6a:	4648      	mov	r0, r9
 8009c6c:	f001 fe2c 	bl	800b8c8 <tADSR_setLeakFactor>
		tSlide_init(&fastSlide[i],1.0f,1110.0f);
 8009c70:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8009d5c <audioInit+0x20c>
 8009c74:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009c78:	4839      	ldr	r0, [pc, #228]	; (8009d60 <audioInit+0x210>)
 8009c7a:	4420      	add	r0, r4
 8009c7c:	f001 fefc 	bl	800ba78 <tSlide_init>
		tSlide_init(&slowSlide[i],500.0f,1.0f);
 8009c80:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8009c84:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8009d64 <audioInit+0x214>
 8009c88:	4837      	ldr	r0, [pc, #220]	; (8009d68 <audioInit+0x218>)
 8009c8a:	4420      	add	r0, r4
 8009c8c:	f001 fef4 	bl	800ba78 <tSlide_init>
		tSVF_init(&lowpass[i], SVFTypeLowpass, 4000.0f, 1.0f);
 8009c90:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8009c94:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8009d6c <audioInit+0x21c>
 8009c98:	2101      	movs	r1, #1
 8009c9a:	4835      	ldr	r0, [pc, #212]	; (8009d70 <audioInit+0x220>)
 8009c9c:	4420      	add	r0, r4
 8009c9e:	f001 ff67 	bl	800bb70 <tSVF_init>
		tRampUpDown_init(&updownRamp[i], 0.0f, 104.0f, 1); //5000 samples should be 104 ms
 8009ca2:	2101      	movs	r1, #1
 8009ca4:	eddf 0a33 	vldr	s1, [pc, #204]	; 8009d74 <audioInit+0x224>
 8009ca8:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8009d20 <audioInit+0x1d0>
 8009cac:	4832      	ldr	r0, [pc, #200]	; (8009d78 <audioInit+0x228>)
 8009cae:	4420      	add	r0, r4
 8009cb0:	f001 fe6a 	bl	800b988 <tRampUpDown_init>
	for (int i = 0; i < NUM_STRINGS; i++)
 8009cb4:	3501      	adds	r5, #1
 8009cb6:	2d03      	cmp	r5, #3
 8009cb8:	dc01      	bgt.n	8009cbe <audioInit+0x16e>
		for (int j = 0; j < NUM_SAWTOOTHS; j++)
 8009cba:	2400      	movs	r4, #0
 8009cbc:	e79a      	b.n	8009bf4 <audioInit+0xa4>
	}

	HAL_Delay(1);
 8009cbe:	2001      	movs	r0, #1
 8009cc0:	f7f6 fb70 	bl	80003a4 <HAL_Delay>

	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8009cc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009cc8:	490c      	ldr	r1, [pc, #48]	; (8009cfc <audioInit+0x1ac>)
 8009cca:	4640      	mov	r0, r8
 8009ccc:	f7fb fe36 	bl	800593c <HAL_SAI_Transmit_DMA>
 8009cd0:	4b2a      	ldr	r3, [pc, #168]	; (8009d7c <audioInit+0x22c>)
 8009cd2:	7018      	strb	r0, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 8009cd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009cd8:	4929      	ldr	r1, [pc, #164]	; (8009d80 <audioInit+0x230>)
 8009cda:	4638      	mov	r0, r7
 8009cdc:	f7fb feb0 	bl	8005a40 <HAL_SAI_Receive_DMA>
 8009ce0:	4b28      	ldr	r3, [pc, #160]	; (8009d84 <audioInit+0x234>)
 8009ce2:	7018      	strb	r0, [r3, #0]
	// with the CS4271 codec IC, the SAI Transmit and Receive must be happening before the chip will respond to
	// I2C setup messages (it seems to use the masterclock input as it's own internal clock for i2c data, etc)
	// so while we used to set up codec before starting SAI, now we need to set up codec afterwards, and set a flag to make sure it's ready

	//now to send all the necessary messages to the codec
	AudioCodec_init(hi2c);
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	f000 f9a7 	bl	800a038 <AudioCodec_init>

}
 8009cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cee:	bf00      	nop
 8009cf0:	0800a6ed 	.word	0x0800a6ed
 8009cf4:	20003440 	.word	0x20003440
 8009cf8:	473b8000 	.word	0x473b8000
 8009cfc:	30006000 	.word	0x30006000
 8009d00:	42c80000 	.word	0x42c80000
 8009d04:	20000a10 	.word	0x20000a10
 8009d08:	3f19999a 	.word	0x3f19999a
 8009d0c:	447a0000 	.word	0x447a0000
 8009d10:	20003380 	.word	0x20003380
 8009d14:	20002b80 	.word	0x20002b80
 8009d18:	20000b10 	.word	0x20000b10
 8009d1c:	3c23d70a 	.word	0x3c23d70a
 8009d20:	00000000 	.word	0x00000000
 8009d24:	200009fc 	.word	0x200009fc
 8009d28:	20005b50 	.word	0x20005b50
 8009d2c:	459c4000 	.word	0x459c4000
 8009d30:	200005c4 	.word	0x200005c4
 8009d34:	20000ad0 	.word	0x20000ad0
 8009d38:	453b8000 	.word	0x453b8000
 8009d3c:	20005b94 	.word	0x20005b94
 8009d40:	3b03126f 	.word	0x3b03126f
 8009d44:	42a00000 	.word	0x42a00000
 8009d48:	20000b24 	.word	0x20000b24
 8009d4c:	20005ba4 	.word	0x20005ba4
 8009d50:	200009ec 	.word	0x200009ec
 8009d54:	20005bc4 	.word	0x20005bc4
 8009d58:	3f7ffeb0 	.word	0x3f7ffeb0
 8009d5c:	448ac000 	.word	0x448ac000
 8009d60:	20005bd4 	.word	0x20005bd4
 8009d64:	43fa0000 	.word	0x43fa0000
 8009d68:	20000b6c 	.word	0x20000b6c
 8009d6c:	457a0000 	.word	0x457a0000
 8009d70:	20000a00 	.word	0x20000a00
 8009d74:	42d00000 	.word	0x42d00000
 8009d78:	20000b00 	.word	0x20000b00
 8009d7c:	20000ae0 	.word	0x20000ae0
 8009d80:	30004000 	.word	0x30004000
 8009d84:	20000b34 	.word	0x20000b34

08009d88 <audioTick>:


int distanceBetweenReadAndWrite = 0;
float audioTick()
{
	sample = 0.0f;
 8009d88:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8009d94 <audioTick+0xc>
 8009d8c:	4b02      	ldr	r3, [pc, #8]	; (8009d98 <audioTick+0x10>)
 8009d8e:	ed83 0a00 	vstr	s0, [r3]
	sample = tempSample;
	sample = tanhf(sample);
	*/
	return sample;

}
 8009d92:	4770      	bx	lr
 8009d94:	00000000 	.word	0x00000000
 8009d98:	20000380 	.word	0x20000380

08009d9c <audioFrame>:
{
 8009d9c:	b538      	push	{r3, r4, r5, lr}
 8009d9e:	4605      	mov	r5, r0
	if (ADC_notStarted)
 8009da0:	4b15      	ldr	r3, [pc, #84]	; (8009df8 <audioFrame+0x5c>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	b93b      	cbnz	r3, 8009db6 <audioFrame+0x1a>
	frameCount++;
 8009da6:	4b15      	ldr	r3, [pc, #84]	; (8009dfc <audioFrame+0x60>)
 8009da8:	685a      	ldr	r2, [r3, #4]
 8009daa:	3201      	adds	r2, #1
 8009dac:	605a      	str	r2, [r3, #4]
	if (codecReady)
 8009dae:	7a1b      	ldrb	r3, [r3, #8]
 8009db0:	b30b      	cbz	r3, 8009df6 <audioFrame+0x5a>
		for (i = 0; i < (HALF_BUFFER_SIZE); i = i + 2)
 8009db2:	2400      	movs	r4, #0
 8009db4:	e01c      	b.n	8009df0 <audioFrame+0x54>
		HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values,NUM_ADC_CHANNELS * ADC_BUFFER_SIZE);
 8009db6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009dba:	4911      	ldr	r1, [pc, #68]	; (8009e00 <audioFrame+0x64>)
 8009dbc:	4811      	ldr	r0, [pc, #68]	; (8009e04 <audioFrame+0x68>)
 8009dbe:	f7f6 feab 	bl	8000b18 <HAL_ADC_Start_DMA>
		ADC_notStarted = 0;
 8009dc2:	4b0d      	ldr	r3, [pc, #52]	; (8009df8 <audioFrame+0x5c>)
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	601a      	str	r2, [r3, #0]
 8009dc8:	e7ed      	b.n	8009da6 <audioFrame+0xa>
			audioOutBuffer[buffer_offset + i] = (int32_t)(audioTick() * TWO_TO_23);
 8009dca:	f7ff ffdd 	bl	8009d88 <audioTick>
 8009dce:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8009e08 <audioFrame+0x6c>
 8009dd2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009dd6:	192b      	adds	r3, r5, r4
 8009dd8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009ddc:	4a0b      	ldr	r2, [pc, #44]	; (8009e0c <audioFrame+0x70>)
 8009dde:	ee10 1a10 	vmov	r1, s0
 8009de2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			audioOutBuffer[buffer_offset + i + 1] = 0;
 8009de6:	3301      	adds	r3, #1
 8009de8:	2100      	movs	r1, #0
 8009dea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (i = 0; i < (HALF_BUFFER_SIZE); i = i + 2)
 8009dee:	3402      	adds	r4, #2
 8009df0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8009df4:	dbe9      	blt.n	8009dca <audioFrame+0x2e>
}
 8009df6:	bd38      	pop	{r3, r4, r5, pc}
 8009df8:	20000008 	.word	0x20000008
 8009dfc:	20000380 	.word	0x20000380
 8009e00:	30000000 	.word	0x30000000
 8009e04:	200004e8 	.word	0x200004e8
 8009e08:	4b000000 	.word	0x4b000000
 8009e0c:	30006000 	.word	0x30006000

08009e10 <HAL_SAI_ErrorCallback>:
}

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
	;
}
 8009e10:	4770      	bx	lr

08009e12 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
	;
}
 8009e12:	4770      	bx	lr

08009e14 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
  ;
}
 8009e14:	4770      	bx	lr

08009e16 <HAL_SAI_RxCpltCallback>:


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8009e16:	b508      	push	{r3, lr}
	audioFrame(HALF_BUFFER_SIZE);
 8009e18:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009e1c:	f7ff ffbe 	bl	8009d9c <audioFrame>
}
 8009e20:	bd08      	pop	{r3, pc}

08009e22 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8009e22:	b508      	push	{r3, lr}
	audioFrame(0);
 8009e24:	2000      	movs	r0, #0
 8009e26:	f7ff ffb9 	bl	8009d9c <audioFrame>
}
 8009e2a:	bd08      	pop	{r3, pc}

08009e2c <ADC_Frame>:
uint8_t currentSamp;

uint64_t SDWriteIndex = 0;

void ADC_Frame(int offset)
{
 8009e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	4607      	mov	r7, r0
	//HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_11);

	sampRecords[currentSamp] = frameCount;
 8009e32:	4a3b      	ldr	r2, [pc, #236]	; (8009f20 <ADC_Frame+0xf4>)
 8009e34:	7813      	ldrb	r3, [r2, #0]
 8009e36:	493b      	ldr	r1, [pc, #236]	; (8009f24 <ADC_Frame+0xf8>)
 8009e38:	6848      	ldr	r0, [r1, #4]
 8009e3a:	493b      	ldr	r1, [pc, #236]	; (8009f28 <ADC_Frame+0xfc>)
 8009e3c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	currentSamp++;
 8009e40:	3301      	adds	r3, #1
 8009e42:	7013      	strb	r3, [r2, #0]
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 8009e44:	463e      	mov	r6, r7
 8009e46:	e054      	b.n	8009ef2 <ADC_Frame+0xc6>
			stringPositions[j] =  ((uint16_t)SPI_RX[j * 2] << 8) + ((uint16_t)SPI_RX[(j * 2) + 1] & 0xff);
			if (stringPositions[j] == 65535)
			{
				stringPositions[j] = 0;
			}
			stringTouchLH[j] = (SPI_RX[8] >> j) & 1;
 8009e48:	4b38      	ldr	r3, [pc, #224]	; (8009f2c <ADC_Frame+0x100>)
 8009e4a:	7a1a      	ldrb	r2, [r3, #8]
 8009e4c:	fa42 f304 	asr.w	r3, r2, r4
 8009e50:	f003 0301 	and.w	r3, r3, #1
 8009e54:	4833      	ldr	r0, [pc, #204]	; (8009f24 <ADC_Frame+0xf8>)
 8009e56:	4420      	add	r0, r4
 8009e58:	f880 3094 	strb.w	r3, [r0, #148]	; 0x94
			stringTouchRH[j] = (SPI_RX[8] >> (j + 4)) & 1;
 8009e5c:	1d25      	adds	r5, r4, #4
 8009e5e:	412a      	asrs	r2, r5
 8009e60:	f002 0501 	and.w	r5, r2, #1
 8009e64:	f880 5098 	strb.w	r5, [r0, #152]	; 0x98

			//tempSamp = tHighpass_tick(&opticalHighpass[j+NUM_STRINGS], tHighpass_tick(&opticalHighpass[j], tempSamp));
			//itoa(SDWriteIndex, wtext, 4);

			if (SDReady)
 8009e68:	4a31      	ldr	r2, [pc, #196]	; (8009f30 <ADC_Frame+0x104>)
 8009e6a:	6812      	ldr	r2, [r2, #0]
 8009e6c:	b9e2      	cbnz	r2, 8009ea8 <ADC_Frame+0x7c>
		for (int j = 0; j < NUM_ADC_CHANNELS; j++)
 8009e6e:	3401      	adds	r4, #1
 8009e70:	2c03      	cmp	r4, #3
 8009e72:	dc39      	bgt.n	8009ee8 <ADC_Frame+0xbc>
			int tempInt = ADC_values[(i*NUM_ADC_CHANNELS) + j];
 8009e74:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009e78:	4a2e      	ldr	r2, [pc, #184]	; (8009f34 <ADC_Frame+0x108>)
 8009e7a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
			stringPositions[j] =  ((uint16_t)SPI_RX[j * 2] << 8) + ((uint16_t)SPI_RX[(j * 2) + 1] & 0xff);
 8009e7e:	0062      	lsls	r2, r4, #1
 8009e80:	482a      	ldr	r0, [pc, #168]	; (8009f2c <ADC_Frame+0x100>)
 8009e82:	f810 5014 	ldrb.w	r5, [r0, r4, lsl #1]
 8009e86:	3201      	adds	r2, #1
 8009e88:	5c83      	ldrb	r3, [r0, r2]
 8009e8a:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	4a29      	ldr	r2, [pc, #164]	; (8009f38 <ADC_Frame+0x10c>)
 8009e92:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
			if (stringPositions[j] == 65535)
 8009e96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d1d4      	bne.n	8009e48 <ADC_Frame+0x1c>
				stringPositions[j] = 0;
 8009e9e:	4b26      	ldr	r3, [pc, #152]	; (8009f38 <ADC_Frame+0x10c>)
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8009ea6:	e7cf      	b.n	8009e48 <ADC_Frame+0x1c>
			{
				writeToSD(SDWriteIndex, tempInt, (int)stringPositions[j],(int) stringTouchLH[j], (int)stringTouchRH[j], j);
 8009ea8:	4a23      	ldr	r2, [pc, #140]	; (8009f38 <ADC_Frame+0x10c>)
 8009eaa:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
 8009eae:	481d      	ldr	r0, [pc, #116]	; (8009f24 <ADC_Frame+0xf8>)
 8009eb0:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
 8009eb4:	9401      	str	r4, [sp, #4]
 8009eb6:	9500      	str	r5, [sp, #0]
 8009eb8:	f000 fc70 	bl	800a79c <writeToSD>

				if (memoryPointer >= (LARGE_MEM_SIZE - 300))
 8009ebc:	4b1f      	ldr	r3, [pc, #124]	; (8009f3c <ADC_Frame+0x110>)
 8009ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec2:	481f      	ldr	r0, [pc, #124]	; (8009f40 <ADC_Frame+0x114>)
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	4299      	cmp	r1, r3
 8009ec8:	bf08      	it	eq
 8009eca:	4290      	cmpeq	r0, r2
 8009ecc:	d2cf      	bcs.n	8009e6e <ADC_Frame+0x42>
				{
					finishSD = 1;
 8009ece:	4b1d      	ldr	r3, [pc, #116]	; (8009f44 <ADC_Frame+0x118>)
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	601a      	str	r2, [r3, #0]
					HAL_ADC_Stop(&hadc1);
 8009ed4:	481c      	ldr	r0, [pc, #112]	; (8009f48 <ADC_Frame+0x11c>)
 8009ed6:	f7f6 fefd 	bl	8000cd4 <HAL_ADC_Stop>
					HAL_SAI_DMAStop(&hsai_BlockA1);
 8009eda:	481c      	ldr	r0, [pc, #112]	; (8009f4c <ADC_Frame+0x120>)
 8009edc:	f7fb fcd2 	bl	8005884 <HAL_SAI_DMAStop>
					HAL_SAI_DMAStop(&hsai_BlockB1);
 8009ee0:	481b      	ldr	r0, [pc, #108]	; (8009f50 <ADC_Frame+0x124>)
 8009ee2:	f7fb fccf 	bl	8005884 <HAL_SAI_DMAStop>
 8009ee6:	e7c2      	b.n	8009e6e <ADC_Frame+0x42>

			attackDetect2(j, tempSamp);
			processString(j, tempSamp);
			*/
		}
		whichVal++;
 8009ee8:	4a0e      	ldr	r2, [pc, #56]	; (8009f24 <ADC_Frame+0xf8>)
 8009eea:	69d3      	ldr	r3, [r2, #28]
 8009eec:	3301      	adds	r3, #1
 8009eee:	61d3      	str	r3, [r2, #28]
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 8009ef0:	3601      	adds	r6, #1
 8009ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ef6:	42b3      	cmp	r3, r6
 8009ef8:	dd01      	ble.n	8009efe <ADC_Frame+0xd2>
		for (int j = 0; j < NUM_ADC_CHANNELS; j++)
 8009efa:	2400      	movs	r4, #0
 8009efc:	e7b8      	b.n	8009e70 <ADC_Frame+0x44>

	}
	if (whichVal > 3000)
 8009efe:	4b09      	ldr	r3, [pc, #36]	; (8009f24 <ADC_Frame+0xf8>)
 8009f00:	69da      	ldr	r2, [r3, #28]
 8009f02:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009f06:	429a      	cmp	r2, r3
 8009f08:	dd03      	ble.n	8009f12 <ADC_Frame+0xe6>
	{
		waitTimeOver = 1;
 8009f0a:	4b06      	ldr	r3, [pc, #24]	; (8009f24 <ADC_Frame+0xf8>)
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
	ADC_Ready = 1;
 8009f12:	4b04      	ldr	r3, [pc, #16]	; (8009f24 <ADC_Frame+0xf8>)
 8009f14:	2201      	movs	r2, #1
 8009f16:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

}
 8009f1a:	b003      	add	sp, #12
 8009f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	20005b90 	.word	0x20005b90
 8009f24:	20000380 	.word	0x20000380
 8009f28:	200005d4 	.word	0x200005d4
 8009f2c:	30008020 	.word	0x30008020
 8009f30:	200004d0 	.word	0x200004d0
 8009f34:	30000000 	.word	0x30000000
 8009f38:	200009d4 	.word	0x200009d4
 8009f3c:	200004d8 	.word	0x200004d8
 8009f40:	01fffed3 	.word	0x01fffed3
 8009f44:	200004d4 	.word	0x200004d4
 8009f48:	200004e8 	.word	0x200004e8
 8009f4c:	20012d5c 	.word	0x20012d5c
 8009f50:	20012bd4 	.word	0x20012bd4

08009f54 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009f54:	b508      	push	{r3, lr}


	ADC_Frame(ADC_FRAME_SIZE);
 8009f56:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009f5a:	f7ff ff67 	bl	8009e2c <ADC_Frame>


}
 8009f5e:	bd08      	pop	{r3, pc}

08009f60 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009f60:	b508      	push	{r3, lr}
	ADC_Frame(0);
 8009f62:	2000      	movs	r0, #0
 8009f64:	f7ff ff62 	bl	8009e2c <ADC_Frame>
}
 8009f68:	bd08      	pop	{r3, pc}
	...

08009f6c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009f6c:	b500      	push	{lr}
 8009f6e:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009f70:	9300      	str	r3, [sp, #0]
 8009f72:	4613      	mov	r3, r2
 8009f74:	460a      	mov	r2, r1
 8009f76:	4601      	mov	r1, r0
 8009f78:	4803      	ldr	r0, [pc, #12]	; (8009f88 <BSP_SD_ReadBlocks+0x1c>)
 8009f7a:	f7fb ffef 	bl	8005f5c <HAL_SD_ReadBlocks>
 8009f7e:	b100      	cbz	r0, 8009f82 <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8009f80:	2001      	movs	r0, #1
  }

  return sd_state;  
}
 8009f82:	b003      	add	sp, #12
 8009f84:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f88:	20012df4 	.word	0x20012df4

08009f8c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009f8c:	b500      	push	{lr}
 8009f8e:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8009f90:	9300      	str	r3, [sp, #0]
 8009f92:	4613      	mov	r3, r2
 8009f94:	460a      	mov	r2, r1
 8009f96:	4601      	mov	r1, r0
 8009f98:	4803      	ldr	r0, [pc, #12]	; (8009fa8 <BSP_SD_WriteBlocks+0x1c>)
 8009f9a:	f7fc f8dd 	bl	8006158 <HAL_SD_WriteBlocks>
 8009f9e:	b100      	cbz	r0, 8009fa2 <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8009fa0:	2001      	movs	r0, #1
  }

  return sd_state;  
}
 8009fa2:	b003      	add	sp, #12
 8009fa4:	f85d fb04 	ldr.w	pc, [sp], #4
 8009fa8:	20012df4 	.word	0x20012df4

08009fac <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009fac:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009fae:	4803      	ldr	r0, [pc, #12]	; (8009fbc <BSP_SD_GetCardState+0x10>)
 8009fb0:	f7fc fd20 	bl	80069f4 <HAL_SD_GetCardState>
}
 8009fb4:	3804      	subs	r0, #4
 8009fb6:	bf18      	it	ne
 8009fb8:	2001      	movne	r0, #1
 8009fba:	bd08      	pop	{r3, pc}
 8009fbc:	20012df4 	.word	0x20012df4

08009fc0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009fc0:	b508      	push	{r3, lr}
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009fc2:	4601      	mov	r1, r0
 8009fc4:	4801      	ldr	r0, [pc, #4]	; (8009fcc <BSP_SD_GetCardInfo+0xc>)
 8009fc6:	f7fc fc95 	bl	80068f4 <HAL_SD_GetCardInfo>
}
 8009fca:	bd08      	pop	{r3, pc}
 8009fcc:	20012df4 	.word	0x20012df4

08009fd0 <BSP_SD_WriteCpltCallback>:
  * @retval None
  */
__weak void BSP_SD_WriteCpltCallback(void)
{

}
 8009fd0:	4770      	bx	lr

08009fd2 <HAL_SD_TxCpltCallback>:
{
 8009fd2:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8009fd4:	f7ff fffc 	bl	8009fd0 <BSP_SD_WriteCpltCallback>
}
 8009fd8:	bd08      	pop	{r3, pc}

08009fda <BSP_SD_ReadCpltCallback>:
  * @retval None
  */
__weak void BSP_SD_ReadCpltCallback(void)
{

}
 8009fda:	4770      	bx	lr

08009fdc <HAL_SD_RxCpltCallback>:
{
 8009fdc:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8009fde:	f7ff fffc 	bl	8009fda <BSP_SD_ReadCpltCallback>
}
 8009fe2:	bd08      	pop	{r3, pc}

08009fe4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009fe4:	b500      	push	{lr}
 8009fe6:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8009fee:	f000 f8ff 	bl	800a1f0 <BSP_PlatformIsDetected>
 8009ff2:	b910      	cbnz	r0, 8009ffa <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 8009ffa:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8009ffe:	b003      	add	sp, #12
 800a000:	f85d fb04 	ldr.w	pc, [sp], #4

0800a004 <BSP_SD_Init>:
{
 800a004:	b510      	push	{r4, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a006:	f7ff ffed 	bl	8009fe4 <BSP_SD_IsDetected>
 800a00a:	2801      	cmp	r0, #1
 800a00c:	d002      	beq.n	800a014 <BSP_SD_Init+0x10>
    return MSD_ERROR_SD_NOT_PRESENT;
 800a00e:	2402      	movs	r4, #2
}
 800a010:	4620      	mov	r0, r4
 800a012:	bd10      	pop	{r4, pc}
  sd_state = HAL_SD_Init(&hsd1);
 800a014:	4807      	ldr	r0, [pc, #28]	; (800a034 <BSP_SD_Init+0x30>)
 800a016:	f7fc fd00 	bl	8006a1a <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800a01a:	4604      	mov	r4, r0
 800a01c:	2800      	cmp	r0, #0
 800a01e:	d1f7      	bne.n	800a010 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800a020:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a024:	4803      	ldr	r0, [pc, #12]	; (800a034 <BSP_SD_Init+0x30>)
 800a026:	f7fc fc77 	bl	8006918 <HAL_SD_ConfigWideBusOperation>
 800a02a:	2800      	cmp	r0, #0
 800a02c:	d0f0      	beq.n	800a010 <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 800a02e:	2401      	movs	r4, #1
 800a030:	e7ee      	b.n	800a010 <BSP_SD_Init+0xc>
 800a032:	bf00      	nop
 800a034:	20012df4 	.word	0x20012df4

0800a038 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 800a038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a03c:	b083      	sub	sp, #12
 800a03e:	4606      	mov	r6, r0

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800a040:	2201      	movs	r2, #1
 800a042:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a046:	483f      	ldr	r0, [pc, #252]	; (800a144 <AudioCodec_init+0x10c>)
 800a048:	f7f8 fe73 	bl	8002d32 <HAL_GPIO_WritePin>

	HAL_Delay(2);
 800a04c:	2002      	movs	r0, #2
 800a04e:	f7f6 f9a9 	bl	80003a4 <HAL_Delay>
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 800a052:	4c3d      	ldr	r4, [pc, #244]	; (800a148 <AudioCodec_init+0x110>)
 800a054:	f04f 0a07 	mov.w	sl, #7
 800a058:	f884 a000 	strb.w	sl, [r4]
	myI2cData[1] = 0x03;
 800a05c:	f04f 0b03 	mov.w	fp, #3
 800a060:	f884 b001 	strb.w	fp, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a064:	4d39      	ldr	r5, [pc, #228]	; (800a14c <AudioCodec_init+0x114>)
 800a066:	882b      	ldrh	r3, [r5, #0]
 800a068:	686a      	ldr	r2, [r5, #4]
 800a06a:	9200      	str	r2, [sp, #0]
 800a06c:	4622      	mov	r2, r4
 800a06e:	2120      	movs	r1, #32
 800a070:	4630      	mov	r0, r6
 800a072:	f7f8 ffb3 	bl	8002fdc <HAL_I2C_Master_Transmit>
 800a076:	4f36      	ldr	r7, [pc, #216]	; (800a150 <AudioCodec_init+0x118>)
 800a078:	7038      	strb	r0, [r7, #0]
	//HAL_Delay(2);

	myI2cData[0] = 0x01;
 800a07a:	f04f 0801 	mov.w	r8, #1
 800a07e:	f884 8000 	strb.w	r8, [r4]
	myI2cData[1] = 0x41;
 800a082:	2341      	movs	r3, #65	; 0x41
 800a084:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a086:	882b      	ldrh	r3, [r5, #0]
 800a088:	686a      	ldr	r2, [r5, #4]
 800a08a:	9200      	str	r2, [sp, #0]
 800a08c:	4622      	mov	r2, r4
 800a08e:	2120      	movs	r1, #32
 800a090:	4630      	mov	r0, r6
 800a092:	f7f8 ffa3 	bl	8002fdc <HAL_I2C_Master_Transmit>
 800a096:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
 800a098:	f04f 0902 	mov.w	r9, #2
 800a09c:	f884 9000 	strb.w	r9, [r4]
	myI2cData[1] = 0x00;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a0a4:	882b      	ldrh	r3, [r5, #0]
 800a0a6:	686a      	ldr	r2, [r5, #4]
 800a0a8:	9200      	str	r2, [sp, #0]
 800a0aa:	4622      	mov	r2, r4
 800a0ac:	2120      	movs	r1, #32
 800a0ae:	4630      	mov	r0, r6
 800a0b0:	f7f8 ff94 	bl	8002fdc <HAL_I2C_Master_Transmit>
 800a0b4:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
 800a0b6:	f884 b000 	strb.w	fp, [r4]
	myI2cData[1] = 0x79;
 800a0ba:	2379      	movs	r3, #121	; 0x79
 800a0bc:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a0be:	882b      	ldrh	r3, [r5, #0]
 800a0c0:	686a      	ldr	r2, [r5, #4]
 800a0c2:	9200      	str	r2, [sp, #0]
 800a0c4:	4622      	mov	r2, r4
 800a0c6:	2120      	movs	r1, #32
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	f7f8 ff87 	bl	8002fdc <HAL_I2C_Master_Transmit>
 800a0ce:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
 800a0d0:	2304      	movs	r3, #4
 800a0d2:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x01;
 800a0d4:	f884 8001 	strb.w	r8, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a0d8:	882b      	ldrh	r3, [r5, #0]
 800a0da:	686a      	ldr	r2, [r5, #4]
 800a0dc:	9200      	str	r2, [sp, #0]
 800a0de:	4622      	mov	r2, r4
 800a0e0:	2120      	movs	r1, #32
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	f7f8 ff7a 	bl	8002fdc <HAL_I2C_Master_Transmit>
 800a0e8:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
 800a0ea:	2305      	movs	r3, #5
 800a0ec:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x01;
 800a0ee:	f884 8001 	strb.w	r8, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a0f2:	882b      	ldrh	r3, [r5, #0]
 800a0f4:	686a      	ldr	r2, [r5, #4]
 800a0f6:	9200      	str	r2, [sp, #0]
 800a0f8:	4622      	mov	r2, r4
 800a0fa:	2120      	movs	r1, #32
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	f7f8 ff6d 	bl	8002fdc <HAL_I2C_Master_Transmit>
 800a102:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
 800a104:	2306      	movs	r3, #6
 800a106:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x10;
 800a108:	2310      	movs	r3, #16
 800a10a:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a10c:	882b      	ldrh	r3, [r5, #0]
 800a10e:	686a      	ldr	r2, [r5, #4]
 800a110:	9200      	str	r2, [sp, #0]
 800a112:	4622      	mov	r2, r4
 800a114:	2120      	movs	r1, #32
 800a116:	4630      	mov	r0, r6
 800a118:	f7f8 ff60 	bl	8002fdc <HAL_I2C_Master_Transmit>
 800a11c:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
 800a11e:	f884 a000 	strb.w	sl, [r4]
	myI2cData[1] = 0x02;
 800a122:	f884 9001 	strb.w	r9, [r4, #1]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a126:	882b      	ldrh	r3, [r5, #0]
 800a128:	686a      	ldr	r2, [r5, #4]
 800a12a:	9200      	str	r2, [sp, #0]
 800a12c:	4622      	mov	r2, r4
 800a12e:	2120      	movs	r1, #32
 800a130:	4630      	mov	r0, r6
 800a132:	f7f8 ff53 	bl	8002fdc <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 800a136:	4b07      	ldr	r3, [pc, #28]	; (800a154 <AudioCodec_init+0x11c>)
 800a138:	f883 8000 	strb.w	r8, [r3]

}
 800a13c:	b003      	add	sp, #12
 800a13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a142:	bf00      	nop
 800a144:	58020800 	.word	0x58020800
 800a148:	200004c0 	.word	0x200004c0
 800a14c:	2000009c 	.word	0x2000009c
 800a150:	20005c04 	.word	0x20005c04
 800a154:	20000388 	.word	0x20000388

0800a158 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800a158:	b500      	push	{lr}
 800a15a:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a15c:	4b1b      	ldr	r3, [pc, #108]	; (800a1cc <MX_DMA_Init+0x74>)
 800a15e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800a162:	f042 0201 	orr.w	r2, r2, #1
 800a166:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800a16a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a16e:	f003 0301 	and.w	r3, r3, #1
 800a172:	9301      	str	r3, [sp, #4]
 800a174:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
 800a176:	2200      	movs	r2, #0
 800a178:	2102      	movs	r1, #2
 800a17a:	200b      	movs	r0, #11
 800a17c:	f7f7 f88e 	bl	800129c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800a180:	200b      	movs	r0, #11
 800a182:	f7f7 f8bd 	bl	8001300 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 3, 0);
 800a186:	2200      	movs	r2, #0
 800a188:	2103      	movs	r1, #3
 800a18a:	200c      	movs	r0, #12
 800a18c:	f7f7 f886 	bl	800129c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800a190:	200c      	movs	r0, #12
 800a192:	f7f7 f8b5 	bl	8001300 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 4, 0);
 800a196:	2200      	movs	r2, #0
 800a198:	2104      	movs	r1, #4
 800a19a:	200d      	movs	r0, #13
 800a19c:	f7f7 f87e 	bl	800129c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800a1a0:	200d      	movs	r0, #13
 800a1a2:	f7f7 f8ad 	bl	8001300 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 1, 0);
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	2101      	movs	r1, #1
 800a1aa:	200e      	movs	r0, #14
 800a1ac:	f7f7 f876 	bl	800129c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800a1b0:	200e      	movs	r0, #14
 800a1b2:	f7f7 f8a5 	bl	8001300 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 1, 0);
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	2101      	movs	r1, #1
 800a1ba:	200f      	movs	r0, #15
 800a1bc:	f7f7 f86e 	bl	800129c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800a1c0:	200f      	movs	r0, #15
 800a1c2:	f7f7 f89d 	bl	8001300 <HAL_NVIC_EnableIRQ>

}
 800a1c6:	b003      	add	sp, #12
 800a1c8:	f85d fb04 	ldr.w	pc, [sp], #4
 800a1cc:	58024400 	.word	0x58024400

0800a1d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800a1d0:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a1d2:	4903      	ldr	r1, [pc, #12]	; (800a1e0 <MX_FATFS_Init+0x10>)
 800a1d4:	4803      	ldr	r0, [pc, #12]	; (800a1e4 <MX_FATFS_Init+0x14>)
 800a1d6:	f7ff fb5d 	bl	8009894 <FATFS_LinkDriver>
 800a1da:	4b03      	ldr	r3, [pc, #12]	; (800a1e8 <MX_FATFS_Init+0x18>)
 800a1dc:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800a1de:	bd08      	pop	{r3, pc}
 800a1e0:	20005c0c 	.word	0x20005c0c
 800a1e4:	0800e050 	.word	0x0800e050
 800a1e8:	20005c08 	.word	0x20005c08

0800a1ec <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 800a1ec:	2000      	movs	r0, #0
 800a1ee:	4770      	bx	lr

0800a1f0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a1f0:	b510      	push	{r4, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a1f2:	4c07      	ldr	r4, [pc, #28]	; (800a210 <BSP_PlatformIsDetected+0x20>)
 800a1f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	f7f8 fd93 	bl	8002d24 <HAL_GPIO_ReadPin>
        status = SD_NOT_PRESENT;
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    status = SD_PRESENT;
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 800a1fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a202:	4620      	mov	r0, r4
 800a204:	f7f8 fd8e 	bl	8002d24 <HAL_GPIO_ReadPin>
 800a208:	2801      	cmp	r0, #1
 800a20a:	d000      	beq.n	800a20e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a20c:	2000      	movs	r0, #0
    }
    /* USER CODE END 1 */ 
    return status;
}  
 800a20e:	bd10      	pop	{r4, pc}
 800a210:	58020800 	.word	0x58020800

0800a214 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800a214:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a216:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a218:	2300      	movs	r3, #0
 800a21a:	9301      	str	r3, [sp, #4]
 800a21c:	9302      	str	r3, [sp, #8]
 800a21e:	9303      	str	r3, [sp, #12]
 800a220:	9304      	str	r3, [sp, #16]
 800a222:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 800a224:	4b27      	ldr	r3, [pc, #156]	; (800a2c4 <HAL_FMC_MspInit+0xb0>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	b10b      	cbz	r3, 800a22e <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800a22a:	b007      	add	sp, #28
 800a22c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 800a22e:	4b25      	ldr	r3, [pc, #148]	; (800a2c4 <HAL_FMC_MspInit+0xb0>)
 800a230:	2201      	movs	r2, #1
 800a232:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 800a234:	4b24      	ldr	r3, [pc, #144]	; (800a2c8 <HAL_FMC_MspInit+0xb4>)
 800a236:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800a23a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a23e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800a242:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a246:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a24a:	9300      	str	r3, [sp, #0]
 800a24c:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800a24e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800a252:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a254:	2602      	movs	r6, #2
 800a256:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a258:	2503      	movs	r5, #3
 800a25a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a25c:	240c      	movs	r4, #12
 800a25e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a260:	a901      	add	r1, sp, #4
 800a262:	481a      	ldr	r0, [pc, #104]	; (800a2cc <HAL_FMC_MspInit+0xb8>)
 800a264:	f7f8 fc6e 	bl	8002b44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 800a268:	2319      	movs	r3, #25
 800a26a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a26c:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a26e:	2700      	movs	r7, #0
 800a270:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a272:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a274:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a276:	a901      	add	r1, sp, #4
 800a278:	4815      	ldr	r0, [pc, #84]	; (800a2d0 <HAL_FMC_MspInit+0xbc>)
 800a27a:	f7f8 fc63 	bl	8002b44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 800a27e:	f248 1337 	movw	r3, #33079	; 0x8137
 800a282:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a284:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a286:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a288:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a28a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a28c:	a901      	add	r1, sp, #4
 800a28e:	4811      	ldr	r0, [pc, #68]	; (800a2d4 <HAL_FMC_MspInit+0xc0>)
 800a290:	f7f8 fc58 	bl	8002b44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800a294:	f64f 7383 	movw	r3, #65411	; 0xff83
 800a298:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a29a:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a29c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a29e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a2a0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a2a2:	a901      	add	r1, sp, #4
 800a2a4:	480c      	ldr	r0, [pc, #48]	; (800a2d8 <HAL_FMC_MspInit+0xc4>)
 800a2a6:	f7f8 fc4d 	bl	8002b44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 800a2aa:	f24c 7303 	movw	r3, #50947	; 0xc703
 800a2ae:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2b0:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2b2:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2b4:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a2b6:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a2b8:	a901      	add	r1, sp, #4
 800a2ba:	4808      	ldr	r0, [pc, #32]	; (800a2dc <HAL_FMC_MspInit+0xc8>)
 800a2bc:	f7f8 fc42 	bl	8002b44 <HAL_GPIO_Init>
 800a2c0:	e7b3      	b.n	800a22a <HAL_FMC_MspInit+0x16>
 800a2c2:	bf00      	nop
 800a2c4:	200004c8 	.word	0x200004c8
 800a2c8:	58024400 	.word	0x58024400
 800a2cc:	58021400 	.word	0x58021400
 800a2d0:	58020800 	.word	0x58020800
 800a2d4:	58021800 	.word	0x58021800
 800a2d8:	58021000 	.word	0x58021000
 800a2dc:	58020c00 	.word	0x58020c00

0800a2e0 <MX_FMC_Init>:
{
 800a2e0:	b500      	push	{lr}
 800a2e2:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800a2e4:	4817      	ldr	r0, [pc, #92]	; (800a344 <MX_FMC_Init+0x64>)
 800a2e6:	4b18      	ldr	r3, [pc, #96]	; (800a348 <MX_FMC_Init+0x68>)
 800a2e8:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	6082      	str	r2, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800a2f2:	2208      	movs	r2, #8
 800a2f4:	60c2      	str	r2, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800a2f6:	2210      	movs	r2, #16
 800a2f8:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800a2fa:	2240      	movs	r2, #64	; 0x40
 800a2fc:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800a2fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a302:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800a304:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 800a306:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800a30a:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800a30c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a310:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800a312:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 800a314:	2302      	movs	r3, #2
 800a316:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 800a318:	2206      	movs	r2, #6
 800a31a:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 800a31c:	2104      	movs	r1, #4
 800a31e:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 6;
 800a320:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 2;
 800a322:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 2;
 800a324:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 800a326:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800a328:	4469      	add	r1, sp
 800a32a:	f7fc fcf1 	bl	8006d10 <HAL_SDRAM_Init>
 800a32e:	b930      	cbnz	r0, 800a33e <MX_FMC_Init+0x5e>
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 800a330:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800a334:	f7f6 f850 	bl	80003d8 <HAL_SetFMCMemorySwappingConfig>
}
 800a338:	b009      	add	sp, #36	; 0x24
 800a33a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 800a33e:	f000 fd63 	bl	800ae08 <Error_Handler>
 800a342:	e7f5      	b.n	800a330 <MX_FMC_Init+0x50>
 800a344:	20006074 	.word	0x20006074
 800a348:	52004140 	.word	0x52004140

0800a34c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800a34c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800a34e:	f7ff ff61 	bl	800a214 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800a352:	bd08      	pop	{r3, pc}

0800a354 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 800a354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a358:	b08e      	sub	sp, #56	; 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a35a:	2400      	movs	r4, #0
 800a35c:	9409      	str	r4, [sp, #36]	; 0x24
 800a35e:	940a      	str	r4, [sp, #40]	; 0x28
 800a360:	940b      	str	r4, [sp, #44]	; 0x2c
 800a362:	940c      	str	r4, [sp, #48]	; 0x30
 800a364:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a366:	4b79      	ldr	r3, [pc, #484]	; (800a54c <MX_GPIO_Init+0x1f8>)
 800a368:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a36c:	f042 0210 	orr.w	r2, r2, #16
 800a370:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a374:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a378:	f002 0210 	and.w	r2, r2, #16
 800a37c:	9201      	str	r2, [sp, #4]
 800a37e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a380:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a384:	f042 0204 	orr.w	r2, r2, #4
 800a388:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a38c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a390:	f002 0204 	and.w	r2, r2, #4
 800a394:	9202      	str	r2, [sp, #8]
 800a396:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a398:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a39c:	f042 0220 	orr.w	r2, r2, #32
 800a3a0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a3a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a3a8:	f002 0220 	and.w	r2, r2, #32
 800a3ac:	9203      	str	r2, [sp, #12]
 800a3ae:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a3b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a3b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a3b8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a3bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a3c0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800a3c4:	9204      	str	r2, [sp, #16]
 800a3c6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a3cc:	f042 0201 	orr.w	r2, r2, #1
 800a3d0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a3d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a3d8:	f002 0201 	and.w	r2, r2, #1
 800a3dc:	9205      	str	r2, [sp, #20]
 800a3de:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a3e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a3e4:	f042 0202 	orr.w	r2, r2, #2
 800a3e8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a3ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a3f0:	f002 0202 	and.w	r2, r2, #2
 800a3f4:	9206      	str	r2, [sp, #24]
 800a3f6:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a3f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a3fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a400:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a404:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a408:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800a40c:	9207      	str	r2, [sp, #28]
 800a40e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a410:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a414:	f042 0208 	orr.w	r2, r2, #8
 800a418:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a41c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a420:	f003 0308 	and.w	r3, r3, #8
 800a424:	9308      	str	r3, [sp, #32]
 800a426:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800a428:	f8df 8134 	ldr.w	r8, [pc, #308]	; 800a560 <MX_GPIO_Init+0x20c>
 800a42c:	4622      	mov	r2, r4
 800a42e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a432:	4640      	mov	r0, r8
 800a434:	f7f8 fc7d 	bl	8002d32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800a438:	f8df a128 	ldr.w	sl, [pc, #296]	; 800a564 <MX_GPIO_Init+0x210>
 800a43c:	4622      	mov	r2, r4
 800a43e:	f44f 6168 	mov.w	r1, #3712	; 0xe80
 800a442:	4650      	mov	r0, sl
 800a444:	f7f8 fc75 	bl	8002d32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800a448:	4f41      	ldr	r7, [pc, #260]	; (800a550 <MX_GPIO_Init+0x1fc>)
 800a44a:	4622      	mov	r2, r4
 800a44c:	2180      	movs	r1, #128	; 0x80
 800a44e:	4638      	mov	r0, r7
 800a450:	f7f8 fc6f 	bl	8002d32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800a454:	f8df 9110 	ldr.w	r9, [pc, #272]	; 800a568 <MX_GPIO_Init+0x214>
 800a458:	4622      	mov	r2, r4
 800a45a:	2110      	movs	r1, #16
 800a45c:	4648      	mov	r0, r9
 800a45e:	f7f8 fc68 	bl	8002d32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800a462:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a466:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a468:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a46a:	2502      	movs	r5, #2
 800a46c:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a46e:	a909      	add	r1, sp, #36	; 0x24
 800a470:	4640      	mov	r0, r8
 800a472:	f7f8 fb67 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800a476:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a47a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a47c:	2601      	movs	r6, #1
 800a47e:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a480:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a482:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a484:	a909      	add	r1, sp, #36	; 0x24
 800a486:	4640      	mov	r0, r8
 800a488:	f7f8 fb5c 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC1 PC2 PC5 
                           PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5 
 800a48c:	f248 03e6 	movw	r3, #32998	; 0x80e6
 800a490:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a492:	2503      	movs	r5, #3
 800a494:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a496:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a498:	a909      	add	r1, sp, #36	; 0x24
 800a49a:	4640      	mov	r0, r8
 800a49c:	f7f8 fb52 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 
                           PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 800a4a0:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800a4a4:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a4a6:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4a8:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a4aa:	a909      	add	r1, sp, #36	; 0x24
 800a4ac:	4829      	ldr	r0, [pc, #164]	; (800a554 <MX_GPIO_Init+0x200>)
 800a4ae:	f7f8 fb49 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 
                           PA8 PA9 PA10 PA11 
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
 800a4b2:	f649 73f0 	movw	r3, #40944	; 0x9ff0
 800a4b6:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a4b8:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4ba:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4bc:	a909      	add	r1, sp, #36	; 0x24
 800a4be:	4826      	ldr	r0, [pc, #152]	; (800a558 <MX_GPIO_Init+0x204>)
 800a4c0:	f7f8 fb40 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB5 
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5 
 800a4c4:	f240 33e7 	movw	r3, #999	; 0x3e7
 800a4c8:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a4ca:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4cc:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a4ce:	a909      	add	r1, sp, #36	; 0x24
 800a4d0:	4648      	mov	r0, r9
 800a4d2:	f7f8 fb37 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800a4d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a4da:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a4dc:	4b1f      	ldr	r3, [pc, #124]	; (800a55c <MX_GPIO_Init+0x208>)
 800a4de:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4e0:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a4e2:	a909      	add	r1, sp, #36	; 0x24
 800a4e4:	4638      	mov	r0, r7
 800a4e6:	f7f8 fb2d 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD3 PD4 
                           PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 800a4ea:	f243 0378 	movw	r3, #12408	; 0x3078
 800a4ee:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a4f0:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4f2:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a4f4:	a909      	add	r1, sp, #36	; 0x24
 800a4f6:	4638      	mov	r0, r7
 800a4f8:	f7f8 fb24 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG12 PG13 
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13 
 800a4fc:	f247 0348 	movw	r3, #28744	; 0x7048
 800a500:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a502:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a504:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a506:	a909      	add	r1, sp, #36	; 0x24
 800a508:	4650      	mov	r0, sl
 800a50a:	f7f8 fb1b 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG9 PG10 PG11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800a50e:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 800a512:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a514:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a516:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a518:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a51a:	a909      	add	r1, sp, #36	; 0x24
 800a51c:	4650      	mov	r0, sl
 800a51e:	f7f8 fb11 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800a522:	2380      	movs	r3, #128	; 0x80
 800a524:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a526:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a528:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a52a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a52c:	a909      	add	r1, sp, #36	; 0x24
 800a52e:	4638      	mov	r0, r7
 800a530:	f7f8 fb08 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800a534:	2310      	movs	r3, #16
 800a536:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a538:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a53a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a53c:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a53e:	a909      	add	r1, sp, #36	; 0x24
 800a540:	4648      	mov	r0, r9
 800a542:	f7f8 faff 	bl	8002b44 <HAL_GPIO_Init>

}
 800a546:	b00e      	add	sp, #56	; 0x38
 800a548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a54c:	58024400 	.word	0x58024400
 800a550:	58020c00 	.word	0x58020c00
 800a554:	58021400 	.word	0x58021400
 800a558:	58020000 	.word	0x58020000
 800a55c:	11110000 	.word	0x11110000
 800a560:	58020800 	.word	0x58020800
 800a564:	58021800 	.word	0x58021800
 800a568:	58020400 	.word	0x58020400

0800a56c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800a56c:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 800a56e:	4812      	ldr	r0, [pc, #72]	; (800a5b8 <MX_I2C2_Init+0x4c>)
 800a570:	4b12      	ldr	r3, [pc, #72]	; (800a5bc <MX_I2C2_Init+0x50>)
 800a572:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 800a574:	4b12      	ldr	r3, [pc, #72]	; (800a5c0 <MX_I2C2_Init+0x54>)
 800a576:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800a578:	2300      	movs	r3, #0
 800a57a:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a57c:	2201      	movs	r2, #1
 800a57e:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a580:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800a582:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a584:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a586:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a588:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a58a:	f7f8 fcc9 	bl	8002f20 <HAL_I2C_Init>
 800a58e:	b950      	cbnz	r0, 800a5a6 <MX_I2C2_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a590:	2100      	movs	r1, #0
 800a592:	4809      	ldr	r0, [pc, #36]	; (800a5b8 <MX_I2C2_Init+0x4c>)
 800a594:	f7f8 fde0 	bl	8003158 <HAL_I2CEx_ConfigAnalogFilter>
 800a598:	b940      	cbnz	r0, 800a5ac <MX_I2C2_Init+0x40>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800a59a:	2100      	movs	r1, #0
 800a59c:	4806      	ldr	r0, [pc, #24]	; (800a5b8 <MX_I2C2_Init+0x4c>)
 800a59e:	f7f8 fe09 	bl	80031b4 <HAL_I2CEx_ConfigDigitalFilter>
 800a5a2:	b930      	cbnz	r0, 800a5b2 <MX_I2C2_Init+0x46>
  {
    Error_Handler();
  }

}
 800a5a4:	bd08      	pop	{r3, pc}
    Error_Handler();
 800a5a6:	f000 fc2f 	bl	800ae08 <Error_Handler>
 800a5aa:	e7f1      	b.n	800a590 <MX_I2C2_Init+0x24>
    Error_Handler();
 800a5ac:	f000 fc2c 	bl	800ae08 <Error_Handler>
 800a5b0:	e7f3      	b.n	800a59a <MX_I2C2_Init+0x2e>
    Error_Handler();
 800a5b2:	f000 fc29 	bl	800ae08 <Error_Handler>
}
 800a5b6:	e7f5      	b.n	800a5a4 <MX_I2C2_Init+0x38>
 800a5b8:	200060a8 	.word	0x200060a8
 800a5bc:	40005800 	.word	0x40005800
 800a5c0:	00b03fdb 	.word	0x00b03fdb

0800a5c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a5c4:	b510      	push	{r4, lr}
 800a5c6:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	9303      	str	r3, [sp, #12]
 800a5cc:	9304      	str	r3, [sp, #16]
 800a5ce:	9305      	str	r3, [sp, #20]
 800a5d0:	9306      	str	r3, [sp, #24]
 800a5d2:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C2)
 800a5d4:	6802      	ldr	r2, [r0, #0]
 800a5d6:	4b16      	ldr	r3, [pc, #88]	; (800a630 <HAL_I2C_MspInit+0x6c>)
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d001      	beq.n	800a5e0 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800a5dc:	b008      	add	sp, #32
 800a5de:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a5e0:	4c14      	ldr	r4, [pc, #80]	; (800a634 <HAL_I2C_MspInit+0x70>)
 800a5e2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a5e6:	f043 0302 	orr.w	r3, r3, #2
 800a5ea:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a5ee:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a5f2:	f003 0302 	and.w	r3, r3, #2
 800a5f6:	9301      	str	r3, [sp, #4]
 800a5f8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a5fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a5fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a600:	2312      	movs	r3, #18
 800a602:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a604:	2303      	movs	r3, #3
 800a606:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a608:	2304      	movs	r3, #4
 800a60a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a60c:	a903      	add	r1, sp, #12
 800a60e:	480a      	ldr	r0, [pc, #40]	; (800a638 <HAL_I2C_MspInit+0x74>)
 800a610:	f7f8 fa98 	bl	8002b44 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a614:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800a618:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a61c:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 800a620:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800a624:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a628:	9302      	str	r3, [sp, #8]
 800a62a:	9b02      	ldr	r3, [sp, #8]
}
 800a62c:	e7d6      	b.n	800a5dc <HAL_I2C_MspInit+0x18>
 800a62e:	bf00      	nop
 800a630:	40005800 	.word	0x40005800
 800a634:	58024400 	.word	0x58024400
 800a638:	58020400 	.word	0x58020400

0800a63c <SDRAM_Initialization_sequence>:
#define SDRAM_MODEREG_WRITEBURST_MODE_SINGLE     ((uint16_t)0x0200)

//#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)956)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)0x0569)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
void SDRAM_Initialization_sequence(void)
{
 800a63c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a640:	b087      	sub	sp, #28
    __IO uint32_t tmpmrd = 0;
 800a642:	2600      	movs	r6, #0
 800a644:	9605      	str	r6, [sp, #20]
    FMC_SDRAM_CommandTypeDef Command;
    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800a646:	2501      	movs	r5, #1
 800a648:	9501      	str	r5, [sp, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800a64a:	2710      	movs	r7, #16
 800a64c:	9702      	str	r7, [sp, #8]
    Command.AutoRefreshNumber = 1;
 800a64e:	9503      	str	r5, [sp, #12]
    Command.ModeRegisterDefinition = 0;
 800a650:	9604      	str	r6, [sp, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800a652:	4c25      	ldr	r4, [pc, #148]	; (800a6e8 <SDRAM_Initialization_sequence+0xac>)
 800a654:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a658:	a901      	add	r1, sp, #4
 800a65a:	4620      	mov	r0, r4
 800a65c:	f7fc fb80 	bl	8006d60 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 800a660:	4628      	mov	r0, r5
 800a662:	f7f5 fe9f 	bl	80003a4 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 800a666:	2302      	movs	r3, #2
 800a668:	9301      	str	r3, [sp, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800a66a:	9702      	str	r7, [sp, #8]
    Command.AutoRefreshNumber = 1;
 800a66c:	9503      	str	r5, [sp, #12]
    Command.ModeRegisterDefinition = 0;
 800a66e:	9604      	str	r6, [sp, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800a670:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a674:	a901      	add	r1, sp, #4
 800a676:	4620      	mov	r0, r4
 800a678:	f7fc fb72 	bl	8006d60 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 800a67c:	f240 2322 	movw	r3, #546	; 0x222
 800a680:	9305      	str	r3, [sp, #20]
        | SDRAM_MODEREG_CAS_LATENCY_2 | SDRAM_MODEREG_OPERATING_MODE_STANDARD
        | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800a682:	2304      	movs	r3, #4
 800a684:	9301      	str	r3, [sp, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800a686:	9702      	str	r7, [sp, #8]
    Command.AutoRefreshNumber = 1;
 800a688:	9503      	str	r5, [sp, #12]
    Command.ModeRegisterDefinition = tmpmrd;
 800a68a:	9b05      	ldr	r3, [sp, #20]
 800a68c:	9304      	str	r3, [sp, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800a68e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a692:	a901      	add	r1, sp, #4
 800a694:	4620      	mov	r0, r4
 800a696:	f7fc fb63 	bl	8006d60 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure the 1st Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800a69a:	f04f 0903 	mov.w	r9, #3
 800a69e:	f8cd 9004 	str.w	r9, [sp, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800a6a2:	9702      	str	r7, [sp, #8]
    Command.AutoRefreshNumber = 8;
 800a6a4:	f04f 0808 	mov.w	r8, #8
 800a6a8:	f8cd 800c 	str.w	r8, [sp, #12]
    Command.ModeRegisterDefinition = 0;
 800a6ac:	9604      	str	r6, [sp, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800a6ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a6b2:	a901      	add	r1, sp, #4
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	f7fc fb53 	bl	8006d60 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	f7f5 fe72 	bl	80003a4 <HAL_Delay>

    /* Step 5: Configure the 2nd Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800a6c0:	f8cd 9004 	str.w	r9, [sp, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800a6c4:	9702      	str	r7, [sp, #8]
    Command.AutoRefreshNumber = 8;
 800a6c6:	f8cd 800c 	str.w	r8, [sp, #12]
    Command.ModeRegisterDefinition = 0;
 800a6ca:	9604      	str	r6, [sp, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800a6cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a6d0:	a901      	add	r1, sp, #4
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f7fc fb44 	bl	8006d60 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, SDRAM_REFRESH_COUNT);
 800a6d8:	f240 5169 	movw	r1, #1385	; 0x569
 800a6dc:	4620      	mov	r0, r4
 800a6de:	f7fc fb62 	bl	8006da6 <HAL_SDRAM_ProgramRefreshRate>
}
 800a6e2:	b007      	add	sp, #28
 800a6e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6e8:	20006074 	.word	0x20006074

0800a6ec <randomNumber>:


float randomNumber(void) {
 800a6ec:	b500      	push	{lr}
 800a6ee:	b083      	sub	sp, #12

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 800a6f0:	a901      	add	r1, sp, #4
 800a6f2:	4807      	ldr	r0, [pc, #28]	; (800a710 <randomNumber+0x24>)
 800a6f4:	f7fa fda9 	bl	800524a <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 800a6f8:	eddd 7a01 	vldr	s15, [sp, #4]
 800a6fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
	return num;
}
 800a700:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800a714 <randomNumber+0x28>
 800a704:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a708:	b003      	add	sp, #12
 800a70a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a70e:	bf00      	nop
 800a710:	20012bc0 	.word	0x20012bc0
 800a714:	2f80000d 	.word	0x2f80000d

0800a718 <FS_FileOperations>:
uint8_t tempText[30];
int testNumber = 55559;
int8_t filename[30];
uint8_t fileExt[] = ".txt";
static void FS_FileOperations(void)
{
 800a718:	b538      	push	{r3, r4, r5, lr}
	  f_close(&myFile);
	}
  }
#endif

  int theNumber = randomNumber() * 65535;
 800a71a:	f7ff ffe7 	bl	800a6ec <randomNumber>
 800a71e:	eddf 7a16 	vldr	s15, [pc, #88]	; 800a778 <FS_FileOperations+0x60>
 800a722:	ee20 0a27 	vmul.f32	s0, s0, s15
  itoa(theNumber,tempText, 10);
 800a726:	4d15      	ldr	r5, [pc, #84]	; (800a77c <FS_FileOperations+0x64>)
 800a728:	220a      	movs	r2, #10
 800a72a:	4629      	mov	r1, r5
 800a72c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a730:	ee17 0a90 	vmov	r0, s15
 800a734:	f001 feb8 	bl	800c4a8 <itoa>
  strncat(filename, tempText, sizeof(tempText));
 800a738:	4c11      	ldr	r4, [pc, #68]	; (800a780 <FS_FileOperations+0x68>)
 800a73a:	221e      	movs	r2, #30
 800a73c:	4629      	mov	r1, r5
 800a73e:	4620      	mov	r0, r4
 800a740:	f001 febc 	bl	800c4bc <strncat>
  strncat(filename, fileExt, sizeof(fileExt));
 800a744:	2205      	movs	r2, #5
 800a746:	490f      	ldr	r1, [pc, #60]	; (800a784 <FS_FileOperations+0x6c>)
 800a748:	4620      	mov	r0, r4
 800a74a:	f001 feb7 	bl	800c4bc <strncat>
  statusH = disk_initialize(0);
 800a74e:	2000      	movs	r0, #0
 800a750:	f7fd fbb4 	bl	8007ebc <disk_initialize>
 800a754:	4b0c      	ldr	r3, [pc, #48]	; (800a788 <FS_FileOperations+0x70>)
 800a756:	7018      	strb	r0, [r3, #0]
  /* Register the file system object to the FatFs module */
  if(f_mount(&MMCFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 800a758:	2200      	movs	r2, #0
 800a75a:	490c      	ldr	r1, [pc, #48]	; (800a78c <FS_FileOperations+0x74>)
 800a75c:	480c      	ldr	r0, [pc, #48]	; (800a790 <FS_FileOperations+0x78>)
 800a75e:	f7fe fdd5 	bl	800930c <f_mount>
 800a762:	b940      	cbnz	r0, 800a776 <FS_FileOperations+0x5e>

	   //res = f_mkfs(SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer));


	  {
		  if(f_open(&myFile, filename, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 800a764:	220a      	movs	r2, #10
 800a766:	4621      	mov	r1, r4
 800a768:	480a      	ldr	r0, [pc, #40]	; (800a794 <FS_FileOperations+0x7c>)
 800a76a:	f7fe fe03 	bl	8009374 <f_open>
 800a76e:	b910      	cbnz	r0, 800a776 <FS_FileOperations+0x5e>
		  {
			SDReady = 1;
 800a770:	4b09      	ldr	r3, [pc, #36]	; (800a798 <FS_FileOperations+0x80>)
 800a772:	2201      	movs	r2, #1
 800a774:	601a      	str	r2, [r3, #0]

  }

  /* Error */
  //Error_Handler();
}
 800a776:	bd38      	pop	{r3, r4, r5, pc}
 800a778:	477fff00 	.word	0x477fff00
 800a77c:	20012504 	.word	0x20012504
 800a780:	200120e4 	.word	0x200120e4
 800a784:	200000a4 	.word	0x200000a4
 800a788:	20012522 	.word	0x20012522
 800a78c:	20005c0c 	.word	0x20005c0c
 800a790:	20012524 	.word	0x20012524
 800a794:	200060f4 	.word	0x200060f4
 800a798:	200004d0 	.word	0x200004d0

0800a79c <writeToSD>:
		SDWriteIndex++;
	}
}
*/
void writeToSD(int theIndex, int theNumber, int myPos, int lh, int rh, int whichString)
{
 800a79c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7a0:	4698      	mov	r8, r3
 800a7a2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	if(finishSD == 1)
 800a7a4:	4ba2      	ldr	r3, [pc, #648]	; (800aa30 <writeToSD+0x294>)
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d009      	beq.n	800a7c0 <writeToSD+0x24>
 800a7ac:	460f      	mov	r7, r1
 800a7ae:	4691      	mov	r9, r2
		 {
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
		 }

	}
	else if (whichString == 0)
 800a7b0:	2c00      	cmp	r4, #0
 800a7b2:	d03b      	beq.n	800a82c <writeToSD+0x90>
		}
		largeMemory[memoryPointer] = 32;
		memoryPointer++;

	}
	else if ((whichString > 0) && (whichString < 3))
 800a7b4:	3c01      	subs	r4, #1
 800a7b6:	2c01      	cmp	r4, #1
 800a7b8:	f240 8138 	bls.w	800aa2c <writeToSD+0x290>
		largeMemory[memoryPointer] = 32;
		memoryPointer++;
	}
	else
	{
		for (int i = 0; i < 30; i++)
 800a7bc:	2300      	movs	r3, #0
 800a7be:	e1fc      	b.n	800abba <writeToSD+0x41e>
		SDReady = 0;
 800a7c0:	4a9b      	ldr	r2, [pc, #620]	; (800aa30 <writeToSD+0x294>)
 800a7c2:	2400      	movs	r4, #0
 800a7c4:	6014      	str	r4, [r2, #0]
		largeMemory[memoryPointer] = 0;
 800a7c6:	e9d2 7802 	ldrd	r7, r8, [r2, #8]
 800a7ca:	4e9a      	ldr	r6, [pc, #616]	; (800aa34 <writeToSD+0x298>)
 800a7cc:	19f3      	adds	r3, r6, r7
 800a7ce:	701c      	strb	r4, [r3, #0]
		memoryPointer++;
 800a7d0:	1c78      	adds	r0, r7, #1
 800a7d2:	f148 0100 	adc.w	r1, r8, #0
 800a7d6:	e9c2 0102 	strd	r0, r1, [r2, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7da:	b672      	cpsid	i
		 f_write(&myFile, largeMemory, memoryPointer, (void *)&byteswritten);
 800a7dc:	4d96      	ldr	r5, [pc, #600]	; (800aa38 <writeToSD+0x29c>)
 800a7de:	4b97      	ldr	r3, [pc, #604]	; (800aa3c <writeToSD+0x2a0>)
 800a7e0:	6892      	ldr	r2, [r2, #8]
 800a7e2:	4631      	mov	r1, r6
 800a7e4:	4628      	mov	r0, r5
 800a7e6:	f7fe fee3 	bl	80095b0 <f_write>
		 res2 = f_close(&myFile);
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	f7ff f813 	bl	8009816 <f_close>
 800a7f0:	4d93      	ldr	r5, [pc, #588]	; (800aa40 <writeToSD+0x2a4>)
 800a7f2:	7028      	strb	r0, [r5, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a7f4:	b662      	cpsie	i
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800a7f6:	4622      	mov	r2, r4
 800a7f8:	2110      	movs	r1, #16
 800a7fa:	4892      	ldr	r0, [pc, #584]	; (800aa44 <writeToSD+0x2a8>)
 800a7fc:	f7f8 fa99 	bl	8002d32 <HAL_GPIO_WritePin>
		 if (res2 == FR_OK)
 800a800:	782b      	ldrb	r3, [r5, #0]
 800a802:	2b00      	cmp	r3, #0
 800a804:	f040 8103 	bne.w	800aa0e <writeToSD+0x272>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800a808:	2201      	movs	r2, #1
 800a80a:	2110      	movs	r1, #16
 800a80c:	488d      	ldr	r0, [pc, #564]	; (800aa44 <writeToSD+0x2a8>)
 800a80e:	f7f8 fa90 	bl	8002d32 <HAL_GPIO_WritePin>
 800a812:	e0fc      	b.n	800aa0e <writeToSD+0x272>
			tempText[i] = 0;
 800a814:	4a8c      	ldr	r2, [pc, #560]	; (800aa48 <writeToSD+0x2ac>)
 800a816:	2100      	movs	r1, #0
 800a818:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 10; i++)
 800a81a:	3301      	adds	r3, #1
 800a81c:	2b09      	cmp	r3, #9
 800a81e:	ddf9      	ble.n	800a814 <writeToSD+0x78>
		itoa(theIndex,tempText, 10);
 800a820:	220a      	movs	r2, #10
 800a822:	4989      	ldr	r1, [pc, #548]	; (800aa48 <writeToSD+0x2ac>)
 800a824:	f001 fe40 	bl	800c4a8 <itoa>
		for (int i = 0; i < 10; i++)
 800a828:	4623      	mov	r3, r4
 800a82a:	e002      	b.n	800a832 <writeToSD+0x96>
		for (int i = 0; i < 10; i++)
 800a82c:	4623      	mov	r3, r4
 800a82e:	e7f5      	b.n	800a81c <writeToSD+0x80>
		for (int i = 0; i < 10; i++)
 800a830:	3301      	adds	r3, #1
 800a832:	2b09      	cmp	r3, #9
 800a834:	dc12      	bgt.n	800a85c <writeToSD+0xc0>
			if (tempText[i] != 0)
 800a836:	4a84      	ldr	r2, [pc, #528]	; (800aa48 <writeToSD+0x2ac>)
 800a838:	5cd2      	ldrb	r2, [r2, r3]
 800a83a:	2a00      	cmp	r2, #0
 800a83c:	d0f8      	beq.n	800a830 <writeToSD+0x94>
				largeMemory[memoryPointer] = tempText[i];
 800a83e:	4d7c      	ldr	r5, [pc, #496]	; (800aa30 <writeToSD+0x294>)
 800a840:	e9d5 ab02 	ldrd	sl, fp, [r5, #8]
 800a844:	4e7b      	ldr	r6, [pc, #492]	; (800aa34 <writeToSD+0x298>)
 800a846:	eb06 0c0a 	add.w	ip, r6, sl
 800a84a:	f88c 2000 	strb.w	r2, [ip]
				memoryPointer++;
 800a84e:	f11a 0001 	adds.w	r0, sl, #1
 800a852:	f14b 0100 	adc.w	r1, fp, #0
 800a856:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a85a:	e7e9      	b.n	800a830 <writeToSD+0x94>
		largeMemory[memoryPointer] = 44;
 800a85c:	4874      	ldr	r0, [pc, #464]	; (800aa30 <writeToSD+0x294>)
 800a85e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800a862:	4974      	ldr	r1, [pc, #464]	; (800aa34 <writeToSD+0x298>)
 800a864:	eb01 0c02 	add.w	ip, r1, r2
 800a868:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
 800a86c:	f88c e000 	strb.w	lr, [ip]
		memoryPointer++;
 800a870:	1c55      	adds	r5, r2, #1
 800a872:	f143 0600 	adc.w	r6, r3, #0
		largeMemory[memoryPointer] = 32;
 800a876:	4429      	add	r1, r5
 800a878:	f04f 0c20 	mov.w	ip, #32
 800a87c:	f881 c000 	strb.w	ip, [r1]
		memoryPointer++;
 800a880:	1c6a      	adds	r2, r5, #1
 800a882:	f146 0300 	adc.w	r3, r6, #0
 800a886:	e9c0 2302 	strd	r2, r3, [r0, #8]
		for (int i = 0; i < 10; i++)
 800a88a:	4623      	mov	r3, r4
 800a88c:	e003      	b.n	800a896 <writeToSD+0xfa>
			tempText[i] = 0;
 800a88e:	4a6e      	ldr	r2, [pc, #440]	; (800aa48 <writeToSD+0x2ac>)
 800a890:	2100      	movs	r1, #0
 800a892:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 10; i++)
 800a894:	3301      	adds	r3, #1
 800a896:	2b09      	cmp	r3, #9
 800a898:	ddf9      	ble.n	800a88e <writeToSD+0xf2>
		itoa(theNumber,tempText, 10);
 800a89a:	220a      	movs	r2, #10
 800a89c:	496a      	ldr	r1, [pc, #424]	; (800aa48 <writeToSD+0x2ac>)
 800a89e:	4638      	mov	r0, r7
 800a8a0:	f001 fe02 	bl	800c4a8 <itoa>
		for (int i = 0; i < 5; i++)
 800a8a4:	4623      	mov	r3, r4
 800a8a6:	e000      	b.n	800a8aa <writeToSD+0x10e>
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	2b04      	cmp	r3, #4
 800a8ac:	dc10      	bgt.n	800a8d0 <writeToSD+0x134>
			if (tempText[i] != 0)
 800a8ae:	4a66      	ldr	r2, [pc, #408]	; (800aa48 <writeToSD+0x2ac>)
 800a8b0:	5cd2      	ldrb	r2, [r2, r3]
 800a8b2:	2a00      	cmp	r2, #0
 800a8b4:	d0f8      	beq.n	800a8a8 <writeToSD+0x10c>
				largeMemory[memoryPointer] = tempText[i];
 800a8b6:	4d5e      	ldr	r5, [pc, #376]	; (800aa30 <writeToSD+0x294>)
 800a8b8:	e9d5 ab02 	ldrd	sl, fp, [r5, #8]
 800a8bc:	4f5d      	ldr	r7, [pc, #372]	; (800aa34 <writeToSD+0x298>)
 800a8be:	4457      	add	r7, sl
 800a8c0:	703a      	strb	r2, [r7, #0]
				memoryPointer++;
 800a8c2:	f11a 0001 	adds.w	r0, sl, #1
 800a8c6:	f14b 0100 	adc.w	r1, fp, #0
 800a8ca:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a8ce:	e7eb      	b.n	800a8a8 <writeToSD+0x10c>
		largeMemory[memoryPointer] = 32;
 800a8d0:	4857      	ldr	r0, [pc, #348]	; (800aa30 <writeToSD+0x294>)
 800a8d2:	e9d0 5602 	ldrd	r5, r6, [r0, #8]
 800a8d6:	4957      	ldr	r1, [pc, #348]	; (800aa34 <writeToSD+0x298>)
 800a8d8:	4429      	add	r1, r5
 800a8da:	2720      	movs	r7, #32
 800a8dc:	700f      	strb	r7, [r1, #0]
		memoryPointer++;
 800a8de:	1c6a      	adds	r2, r5, #1
 800a8e0:	f146 0300 	adc.w	r3, r6, #0
 800a8e4:	e9c0 2302 	strd	r2, r3, [r0, #8]
		for (int i = 0; i < 1; i++)
 800a8e8:	4623      	mov	r3, r4
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	dd01      	ble.n	800a8f2 <writeToSD+0x156>
		for (int i = 0; i < 10; i++)
 800a8ee:	4623      	mov	r3, r4
 800a8f0:	e008      	b.n	800a904 <writeToSD+0x168>
			tempText[i] = 0;
 800a8f2:	4a55      	ldr	r2, [pc, #340]	; (800aa48 <writeToSD+0x2ac>)
 800a8f4:	2100      	movs	r1, #0
 800a8f6:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 1; i++)
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	e7f6      	b.n	800a8ea <writeToSD+0x14e>
			tempText[i] = 0;
 800a8fc:	4a52      	ldr	r2, [pc, #328]	; (800aa48 <writeToSD+0x2ac>)
 800a8fe:	2100      	movs	r1, #0
 800a900:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 10; i++)
 800a902:	3301      	adds	r3, #1
 800a904:	2b09      	cmp	r3, #9
 800a906:	ddf9      	ble.n	800a8fc <writeToSD+0x160>
		itoa(myPos,tempText, 10);
 800a908:	220a      	movs	r2, #10
 800a90a:	494f      	ldr	r1, [pc, #316]	; (800aa48 <writeToSD+0x2ac>)
 800a90c:	4648      	mov	r0, r9
 800a90e:	f001 fdcb 	bl	800c4a8 <itoa>
		for (int i = 0; i < 10; i++)
 800a912:	4623      	mov	r3, r4
 800a914:	e000      	b.n	800a918 <writeToSD+0x17c>
 800a916:	3301      	adds	r3, #1
 800a918:	2b09      	cmp	r3, #9
 800a91a:	dc10      	bgt.n	800a93e <writeToSD+0x1a2>
			if (tempText[i] != 0)
 800a91c:	4a4a      	ldr	r2, [pc, #296]	; (800aa48 <writeToSD+0x2ac>)
 800a91e:	5cd2      	ldrb	r2, [r2, r3]
 800a920:	2a00      	cmp	r2, #0
 800a922:	d0f8      	beq.n	800a916 <writeToSD+0x17a>
				largeMemory[memoryPointer] = tempText[i];
 800a924:	4f42      	ldr	r7, [pc, #264]	; (800aa30 <writeToSD+0x294>)
 800a926:	e9d7 9a02 	ldrd	r9, sl, [r7, #8]
 800a92a:	4e42      	ldr	r6, [pc, #264]	; (800aa34 <writeToSD+0x298>)
 800a92c:	444e      	add	r6, r9
 800a92e:	7032      	strb	r2, [r6, #0]
				memoryPointer++;
 800a930:	f119 0001 	adds.w	r0, r9, #1
 800a934:	f14a 0100 	adc.w	r1, sl, #0
 800a938:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800a93c:	e7eb      	b.n	800a916 <writeToSD+0x17a>
		largeMemory[memoryPointer] = 32;
 800a93e:	483c      	ldr	r0, [pc, #240]	; (800aa30 <writeToSD+0x294>)
 800a940:	e9d0 9a02 	ldrd	r9, sl, [r0, #8]
 800a944:	493b      	ldr	r1, [pc, #236]	; (800aa34 <writeToSD+0x298>)
 800a946:	4449      	add	r1, r9
 800a948:	2620      	movs	r6, #32
 800a94a:	700e      	strb	r6, [r1, #0]
		memoryPointer++;
 800a94c:	f119 0201 	adds.w	r2, r9, #1
 800a950:	f14a 0300 	adc.w	r3, sl, #0
 800a954:	e9c0 2302 	strd	r2, r3, [r0, #8]
		for (int i = 0; i < 10; i++)
 800a958:	4623      	mov	r3, r4
 800a95a:	e003      	b.n	800a964 <writeToSD+0x1c8>
			tempText[i] = 0;
 800a95c:	4a3a      	ldr	r2, [pc, #232]	; (800aa48 <writeToSD+0x2ac>)
 800a95e:	2100      	movs	r1, #0
 800a960:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 10; i++)
 800a962:	3301      	adds	r3, #1
 800a964:	2b09      	cmp	r3, #9
 800a966:	ddf9      	ble.n	800a95c <writeToSD+0x1c0>
		itoa(lh,tempText, 10);
 800a968:	220a      	movs	r2, #10
 800a96a:	4937      	ldr	r1, [pc, #220]	; (800aa48 <writeToSD+0x2ac>)
 800a96c:	4640      	mov	r0, r8
 800a96e:	f001 fd9b 	bl	800c4a8 <itoa>
		for (int i = 0; i < 10; i++)
 800a972:	4623      	mov	r3, r4
 800a974:	e000      	b.n	800a978 <writeToSD+0x1dc>
 800a976:	3301      	adds	r3, #1
 800a978:	2b09      	cmp	r3, #9
 800a97a:	dc0f      	bgt.n	800a99c <writeToSD+0x200>
			if (tempText[i] != 0)
 800a97c:	4a32      	ldr	r2, [pc, #200]	; (800aa48 <writeToSD+0x2ac>)
 800a97e:	5cd2      	ldrb	r2, [r2, r3]
 800a980:	2a00      	cmp	r2, #0
 800a982:	d0f8      	beq.n	800a976 <writeToSD+0x1da>
				largeMemory[memoryPointer] = tempText[i];
 800a984:	4e2a      	ldr	r6, [pc, #168]	; (800aa30 <writeToSD+0x294>)
 800a986:	e9d6 7802 	ldrd	r7, r8, [r6, #8]
 800a98a:	4d2a      	ldr	r5, [pc, #168]	; (800aa34 <writeToSD+0x298>)
 800a98c:	443d      	add	r5, r7
 800a98e:	702a      	strb	r2, [r5, #0]
				memoryPointer++;
 800a990:	1c78      	adds	r0, r7, #1
 800a992:	f148 0100 	adc.w	r1, r8, #0
 800a996:	e9c6 0102 	strd	r0, r1, [r6, #8]
 800a99a:	e7ec      	b.n	800a976 <writeToSD+0x1da>
		largeMemory[memoryPointer] = 32;
 800a99c:	4824      	ldr	r0, [pc, #144]	; (800aa30 <writeToSD+0x294>)
 800a99e:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
 800a9a2:	4924      	ldr	r1, [pc, #144]	; (800aa34 <writeToSD+0x298>)
 800a9a4:	4431      	add	r1, r6
 800a9a6:	2520      	movs	r5, #32
 800a9a8:	700d      	strb	r5, [r1, #0]
		memoryPointer++;
 800a9aa:	1c72      	adds	r2, r6, #1
 800a9ac:	f147 0300 	adc.w	r3, r7, #0
 800a9b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
		for (int i = 0; i < 30; i++)
 800a9b4:	4623      	mov	r3, r4
 800a9b6:	e003      	b.n	800a9c0 <writeToSD+0x224>
			tempText[i] = 0;
 800a9b8:	4a23      	ldr	r2, [pc, #140]	; (800aa48 <writeToSD+0x2ac>)
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 30; i++)
 800a9be:	3301      	adds	r3, #1
 800a9c0:	2b1d      	cmp	r3, #29
 800a9c2:	ddf9      	ble.n	800a9b8 <writeToSD+0x21c>
		itoa(rh,tempText, 10);
 800a9c4:	220a      	movs	r2, #10
 800a9c6:	4920      	ldr	r1, [pc, #128]	; (800aa48 <writeToSD+0x2ac>)
 800a9c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a9ca:	f001 fd6d 	bl	800c4a8 <itoa>
		for (int i = 0; i < 10; i++)
 800a9ce:	e000      	b.n	800a9d2 <writeToSD+0x236>
 800a9d0:	3401      	adds	r4, #1
 800a9d2:	2c09      	cmp	r4, #9
 800a9d4:	dc0f      	bgt.n	800a9f6 <writeToSD+0x25a>
			if (tempText[i] != 0)
 800a9d6:	4b1c      	ldr	r3, [pc, #112]	; (800aa48 <writeToSD+0x2ac>)
 800a9d8:	5d1b      	ldrb	r3, [r3, r4]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d0f8      	beq.n	800a9d0 <writeToSD+0x234>
				largeMemory[memoryPointer] = tempText[i];
 800a9de:	4d14      	ldr	r5, [pc, #80]	; (800aa30 <writeToSD+0x294>)
 800a9e0:	e9d5 6702 	ldrd	r6, r7, [r5, #8]
 800a9e4:	4a13      	ldr	r2, [pc, #76]	; (800aa34 <writeToSD+0x298>)
 800a9e6:	4432      	add	r2, r6
 800a9e8:	7013      	strb	r3, [r2, #0]
				memoryPointer++;
 800a9ea:	1c70      	adds	r0, r6, #1
 800a9ec:	f147 0100 	adc.w	r1, r7, #0
 800a9f0:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a9f4:	e7ec      	b.n	800a9d0 <writeToSD+0x234>
		largeMemory[memoryPointer] = 32;
 800a9f6:	480e      	ldr	r0, [pc, #56]	; (800aa30 <writeToSD+0x294>)
 800a9f8:	e9d0 5602 	ldrd	r5, r6, [r0, #8]
 800a9fc:	490d      	ldr	r1, [pc, #52]	; (800aa34 <writeToSD+0x298>)
 800a9fe:	4429      	add	r1, r5
 800aa00:	2420      	movs	r4, #32
 800aa02:	700c      	strb	r4, [r1, #0]
		memoryPointer++;
 800aa04:	1c6a      	adds	r2, r5, #1
 800aa06:	f146 0300 	adc.w	r3, r6, #0
 800aa0a:	e9c0 2302 	strd	r2, r3, [r0, #8]
		largeMemory[memoryPointer] = 10;
		memoryPointer++;

		SDWriteIndex++;
	}
}
 800aa0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tempText[i] = 0;
 800aa12:	4a0d      	ldr	r2, [pc, #52]	; (800aa48 <writeToSD+0x2ac>)
 800aa14:	2100      	movs	r1, #0
 800aa16:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 30; i++)
 800aa18:	3301      	adds	r3, #1
 800aa1a:	2b1d      	cmp	r3, #29
 800aa1c:	ddf9      	ble.n	800aa12 <writeToSD+0x276>
		itoa(theNumber,tempText, 10);
 800aa1e:	220a      	movs	r2, #10
 800aa20:	4909      	ldr	r1, [pc, #36]	; (800aa48 <writeToSD+0x2ac>)
 800aa22:	4638      	mov	r0, r7
 800aa24:	f001 fd40 	bl	800c4a8 <itoa>
		for (int i = 0; i < 10; i++)
 800aa28:	2300      	movs	r3, #0
 800aa2a:	e010      	b.n	800aa4e <writeToSD+0x2b2>
		for (int i = 0; i < 30; i++)
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	e7f4      	b.n	800aa1a <writeToSD+0x27e>
 800aa30:	200004d0 	.word	0x200004d0
 800aa34:	60000000 	.word	0x60000000
 800aa38:	200060f4 	.word	0x200060f4
 800aa3c:	2000655c 	.word	0x2000655c
 800aa40:	20006324 	.word	0x20006324
 800aa44:	58020400 	.word	0x58020400
 800aa48:	20012504 	.word	0x20012504
		for (int i = 0; i < 10; i++)
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	2b09      	cmp	r3, #9
 800aa50:	dc0f      	bgt.n	800aa72 <writeToSD+0x2d6>
			if (tempText[i] != 0)
 800aa52:	4aa1      	ldr	r2, [pc, #644]	; (800acd8 <writeToSD+0x53c>)
 800aa54:	5cd2      	ldrb	r2, [r2, r3]
 800aa56:	2a00      	cmp	r2, #0
 800aa58:	d0f8      	beq.n	800aa4c <writeToSD+0x2b0>
				largeMemory[memoryPointer] = tempText[i];
 800aa5a:	4fa0      	ldr	r7, [pc, #640]	; (800acdc <writeToSD+0x540>)
 800aa5c:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 800aa60:	4c9f      	ldr	r4, [pc, #636]	; (800ace0 <writeToSD+0x544>)
 800aa62:	442c      	add	r4, r5
 800aa64:	7022      	strb	r2, [r4, #0]
				memoryPointer++;
 800aa66:	1c68      	adds	r0, r5, #1
 800aa68:	f146 0100 	adc.w	r1, r6, #0
 800aa6c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800aa70:	e7ec      	b.n	800aa4c <writeToSD+0x2b0>
		largeMemory[memoryPointer] = 32;
 800aa72:	489a      	ldr	r0, [pc, #616]	; (800acdc <writeToSD+0x540>)
 800aa74:	e9d0 5602 	ldrd	r5, r6, [r0, #8]
 800aa78:	4999      	ldr	r1, [pc, #612]	; (800ace0 <writeToSD+0x544>)
 800aa7a:	4429      	add	r1, r5
 800aa7c:	2420      	movs	r4, #32
 800aa7e:	700c      	strb	r4, [r1, #0]
		memoryPointer++;
 800aa80:	1c6a      	adds	r2, r5, #1
 800aa82:	f146 0300 	adc.w	r3, r6, #0
 800aa86:	e9c0 2302 	strd	r2, r3, [r0, #8]
		for (int i = 0; i < 1; i++)
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	dd01      	ble.n	800aa94 <writeToSD+0x2f8>
		for (int i = 0; i < 10; i++)
 800aa90:	2300      	movs	r3, #0
 800aa92:	e008      	b.n	800aaa6 <writeToSD+0x30a>
			tempText[i] = 0;
 800aa94:	4a90      	ldr	r2, [pc, #576]	; (800acd8 <writeToSD+0x53c>)
 800aa96:	2100      	movs	r1, #0
 800aa98:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 1; i++)
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	e7f6      	b.n	800aa8c <writeToSD+0x2f0>
			tempText[i] = 0;
 800aa9e:	4a8e      	ldr	r2, [pc, #568]	; (800acd8 <writeToSD+0x53c>)
 800aaa0:	2100      	movs	r1, #0
 800aaa2:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 10; i++)
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	2b09      	cmp	r3, #9
 800aaa8:	ddf9      	ble.n	800aa9e <writeToSD+0x302>
		itoa(myPos,tempText, 10);
 800aaaa:	220a      	movs	r2, #10
 800aaac:	498a      	ldr	r1, [pc, #552]	; (800acd8 <writeToSD+0x53c>)
 800aaae:	4648      	mov	r0, r9
 800aab0:	f001 fcfa 	bl	800c4a8 <itoa>
		for (int i = 0; i < 10; i++)
 800aab4:	2300      	movs	r3, #0
 800aab6:	e000      	b.n	800aaba <writeToSD+0x31e>
 800aab8:	3301      	adds	r3, #1
 800aaba:	2b09      	cmp	r3, #9
 800aabc:	dc10      	bgt.n	800aae0 <writeToSD+0x344>
			if (tempText[i] != 0)
 800aabe:	4a86      	ldr	r2, [pc, #536]	; (800acd8 <writeToSD+0x53c>)
 800aac0:	5cd2      	ldrb	r2, [r2, r3]
 800aac2:	2a00      	cmp	r2, #0
 800aac4:	d0f8      	beq.n	800aab8 <writeToSD+0x31c>
				largeMemory[memoryPointer] = tempText[i];
 800aac6:	4e85      	ldr	r6, [pc, #532]	; (800acdc <writeToSD+0x540>)
 800aac8:	e9d6 9a02 	ldrd	r9, sl, [r6, #8]
 800aacc:	4c84      	ldr	r4, [pc, #528]	; (800ace0 <writeToSD+0x544>)
 800aace:	444c      	add	r4, r9
 800aad0:	7022      	strb	r2, [r4, #0]
				memoryPointer++;
 800aad2:	f119 0001 	adds.w	r0, r9, #1
 800aad6:	f14a 0100 	adc.w	r1, sl, #0
 800aada:	e9c6 0102 	strd	r0, r1, [r6, #8]
 800aade:	e7eb      	b.n	800aab8 <writeToSD+0x31c>
		largeMemory[memoryPointer] = 32;
 800aae0:	487e      	ldr	r0, [pc, #504]	; (800acdc <writeToSD+0x540>)
 800aae2:	e9d0 5602 	ldrd	r5, r6, [r0, #8]
 800aae6:	497e      	ldr	r1, [pc, #504]	; (800ace0 <writeToSD+0x544>)
 800aae8:	4429      	add	r1, r5
 800aaea:	2420      	movs	r4, #32
 800aaec:	700c      	strb	r4, [r1, #0]
		memoryPointer++;
 800aaee:	1c6a      	adds	r2, r5, #1
 800aaf0:	f146 0300 	adc.w	r3, r6, #0
 800aaf4:	e9c0 2302 	strd	r2, r3, [r0, #8]
		for (int i = 0; i < 10; i++)
 800aaf8:	2300      	movs	r3, #0
 800aafa:	e003      	b.n	800ab04 <writeToSD+0x368>
			tempText[i] = 0;
 800aafc:	4a76      	ldr	r2, [pc, #472]	; (800acd8 <writeToSD+0x53c>)
 800aafe:	2100      	movs	r1, #0
 800ab00:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 10; i++)
 800ab02:	3301      	adds	r3, #1
 800ab04:	2b09      	cmp	r3, #9
 800ab06:	ddf9      	ble.n	800aafc <writeToSD+0x360>
		itoa(lh,tempText, 10);
 800ab08:	220a      	movs	r2, #10
 800ab0a:	4973      	ldr	r1, [pc, #460]	; (800acd8 <writeToSD+0x53c>)
 800ab0c:	4640      	mov	r0, r8
 800ab0e:	f001 fccb 	bl	800c4a8 <itoa>
		for (int i = 0; i < 10; i++)
 800ab12:	2300      	movs	r3, #0
 800ab14:	e000      	b.n	800ab18 <writeToSD+0x37c>
 800ab16:	3301      	adds	r3, #1
 800ab18:	2b09      	cmp	r3, #9
 800ab1a:	dc0f      	bgt.n	800ab3c <writeToSD+0x3a0>
			if (tempText[i] != 0)
 800ab1c:	4a6e      	ldr	r2, [pc, #440]	; (800acd8 <writeToSD+0x53c>)
 800ab1e:	5cd2      	ldrb	r2, [r2, r3]
 800ab20:	2a00      	cmp	r2, #0
 800ab22:	d0f8      	beq.n	800ab16 <writeToSD+0x37a>
				largeMemory[memoryPointer] = tempText[i];
 800ab24:	4d6d      	ldr	r5, [pc, #436]	; (800acdc <writeToSD+0x540>)
 800ab26:	e9d5 6702 	ldrd	r6, r7, [r5, #8]
 800ab2a:	4c6d      	ldr	r4, [pc, #436]	; (800ace0 <writeToSD+0x544>)
 800ab2c:	4434      	add	r4, r6
 800ab2e:	7022      	strb	r2, [r4, #0]
				memoryPointer++;
 800ab30:	1c70      	adds	r0, r6, #1
 800ab32:	f147 0100 	adc.w	r1, r7, #0
 800ab36:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800ab3a:	e7ec      	b.n	800ab16 <writeToSD+0x37a>
		largeMemory[memoryPointer] = 32;
 800ab3c:	4867      	ldr	r0, [pc, #412]	; (800acdc <writeToSD+0x540>)
 800ab3e:	e9d0 5602 	ldrd	r5, r6, [r0, #8]
 800ab42:	4967      	ldr	r1, [pc, #412]	; (800ace0 <writeToSD+0x544>)
 800ab44:	4429      	add	r1, r5
 800ab46:	2420      	movs	r4, #32
 800ab48:	700c      	strb	r4, [r1, #0]
		memoryPointer++;
 800ab4a:	1c6a      	adds	r2, r5, #1
 800ab4c:	f146 0300 	adc.w	r3, r6, #0
 800ab50:	e9c0 2302 	strd	r2, r3, [r0, #8]
		for (int i = 0; i < 30; i++)
 800ab54:	2300      	movs	r3, #0
 800ab56:	e003      	b.n	800ab60 <writeToSD+0x3c4>
			tempText[i] = 0;
 800ab58:	4a5f      	ldr	r2, [pc, #380]	; (800acd8 <writeToSD+0x53c>)
 800ab5a:	2100      	movs	r1, #0
 800ab5c:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 30; i++)
 800ab5e:	3301      	adds	r3, #1
 800ab60:	2b1d      	cmp	r3, #29
 800ab62:	ddf9      	ble.n	800ab58 <writeToSD+0x3bc>
		itoa(rh,tempText, 10);
 800ab64:	220a      	movs	r2, #10
 800ab66:	495c      	ldr	r1, [pc, #368]	; (800acd8 <writeToSD+0x53c>)
 800ab68:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ab6a:	f001 fc9d 	bl	800c4a8 <itoa>
		for (int i = 0; i < 10; i++)
 800ab6e:	2300      	movs	r3, #0
 800ab70:	e000      	b.n	800ab74 <writeToSD+0x3d8>
 800ab72:	3301      	adds	r3, #1
 800ab74:	2b09      	cmp	r3, #9
 800ab76:	dc0f      	bgt.n	800ab98 <writeToSD+0x3fc>
			if (tempText[i] != 0)
 800ab78:	4a57      	ldr	r2, [pc, #348]	; (800acd8 <writeToSD+0x53c>)
 800ab7a:	5cd2      	ldrb	r2, [r2, r3]
 800ab7c:	2a00      	cmp	r2, #0
 800ab7e:	d0f8      	beq.n	800ab72 <writeToSD+0x3d6>
				largeMemory[memoryPointer] = tempText[i];
 800ab80:	4d56      	ldr	r5, [pc, #344]	; (800acdc <writeToSD+0x540>)
 800ab82:	e9d5 6702 	ldrd	r6, r7, [r5, #8]
 800ab86:	4c56      	ldr	r4, [pc, #344]	; (800ace0 <writeToSD+0x544>)
 800ab88:	4434      	add	r4, r6
 800ab8a:	7022      	strb	r2, [r4, #0]
				memoryPointer++;
 800ab8c:	1c70      	adds	r0, r6, #1
 800ab8e:	f147 0100 	adc.w	r1, r7, #0
 800ab92:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800ab96:	e7ec      	b.n	800ab72 <writeToSD+0x3d6>
		largeMemory[memoryPointer] = 32;
 800ab98:	4850      	ldr	r0, [pc, #320]	; (800acdc <writeToSD+0x540>)
 800ab9a:	e9d0 5602 	ldrd	r5, r6, [r0, #8]
 800ab9e:	4950      	ldr	r1, [pc, #320]	; (800ace0 <writeToSD+0x544>)
 800aba0:	4429      	add	r1, r5
 800aba2:	2420      	movs	r4, #32
 800aba4:	700c      	strb	r4, [r1, #0]
		memoryPointer++;
 800aba6:	1c6a      	adds	r2, r5, #1
 800aba8:	f146 0300 	adc.w	r3, r6, #0
 800abac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800abb0:	e72d      	b.n	800aa0e <writeToSD+0x272>
			tempText[i] = 0;
 800abb2:	4a49      	ldr	r2, [pc, #292]	; (800acd8 <writeToSD+0x53c>)
 800abb4:	2100      	movs	r1, #0
 800abb6:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 30; i++)
 800abb8:	3301      	adds	r3, #1
 800abba:	2b1d      	cmp	r3, #29
 800abbc:	ddf9      	ble.n	800abb2 <writeToSD+0x416>
		itoa(theNumber,tempText, 10);
 800abbe:	220a      	movs	r2, #10
 800abc0:	4945      	ldr	r1, [pc, #276]	; (800acd8 <writeToSD+0x53c>)
 800abc2:	4638      	mov	r0, r7
 800abc4:	f001 fc70 	bl	800c4a8 <itoa>
		for (int i = 0; i < 10; i++)
 800abc8:	2300      	movs	r3, #0
 800abca:	e000      	b.n	800abce <writeToSD+0x432>
 800abcc:	3301      	adds	r3, #1
 800abce:	2b09      	cmp	r3, #9
 800abd0:	dc0f      	bgt.n	800abf2 <writeToSD+0x456>
			if (tempText[i] != 0)
 800abd2:	4a41      	ldr	r2, [pc, #260]	; (800acd8 <writeToSD+0x53c>)
 800abd4:	5cd2      	ldrb	r2, [r2, r3]
 800abd6:	2a00      	cmp	r2, #0
 800abd8:	d0f8      	beq.n	800abcc <writeToSD+0x430>
				largeMemory[memoryPointer] = tempText[i];
 800abda:	4f40      	ldr	r7, [pc, #256]	; (800acdc <writeToSD+0x540>)
 800abdc:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 800abe0:	4c3f      	ldr	r4, [pc, #252]	; (800ace0 <writeToSD+0x544>)
 800abe2:	442c      	add	r4, r5
 800abe4:	7022      	strb	r2, [r4, #0]
				memoryPointer++;
 800abe6:	1c68      	adds	r0, r5, #1
 800abe8:	f146 0100 	adc.w	r1, r6, #0
 800abec:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800abf0:	e7ec      	b.n	800abcc <writeToSD+0x430>
		largeMemory[memoryPointer] = 32;
 800abf2:	483a      	ldr	r0, [pc, #232]	; (800acdc <writeToSD+0x540>)
 800abf4:	e9d0 5602 	ldrd	r5, r6, [r0, #8]
 800abf8:	4939      	ldr	r1, [pc, #228]	; (800ace0 <writeToSD+0x544>)
 800abfa:	4429      	add	r1, r5
 800abfc:	2420      	movs	r4, #32
 800abfe:	700c      	strb	r4, [r1, #0]
		memoryPointer++;
 800ac00:	1c6a      	adds	r2, r5, #1
 800ac02:	f146 0300 	adc.w	r3, r6, #0
 800ac06:	e9c0 2302 	strd	r2, r3, [r0, #8]
		for (int i = 0; i < 1; i++)
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	dd01      	ble.n	800ac14 <writeToSD+0x478>
		for (int i = 0; i < 10; i++)
 800ac10:	2300      	movs	r3, #0
 800ac12:	e008      	b.n	800ac26 <writeToSD+0x48a>
			tempText[i] = 0;
 800ac14:	4a30      	ldr	r2, [pc, #192]	; (800acd8 <writeToSD+0x53c>)
 800ac16:	2100      	movs	r1, #0
 800ac18:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 1; i++)
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	e7f6      	b.n	800ac0c <writeToSD+0x470>
			tempText[i] = 0;
 800ac1e:	4a2e      	ldr	r2, [pc, #184]	; (800acd8 <writeToSD+0x53c>)
 800ac20:	2100      	movs	r1, #0
 800ac22:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 10; i++)
 800ac24:	3301      	adds	r3, #1
 800ac26:	2b09      	cmp	r3, #9
 800ac28:	ddf9      	ble.n	800ac1e <writeToSD+0x482>
		itoa(myPos,tempText, 10);
 800ac2a:	220a      	movs	r2, #10
 800ac2c:	492a      	ldr	r1, [pc, #168]	; (800acd8 <writeToSD+0x53c>)
 800ac2e:	4648      	mov	r0, r9
 800ac30:	f001 fc3a 	bl	800c4a8 <itoa>
		for (int i = 0; i < 10; i++)
 800ac34:	2300      	movs	r3, #0
 800ac36:	e000      	b.n	800ac3a <writeToSD+0x49e>
 800ac38:	3301      	adds	r3, #1
 800ac3a:	2b09      	cmp	r3, #9
 800ac3c:	dc10      	bgt.n	800ac60 <writeToSD+0x4c4>
			if (tempText[i] != 0)
 800ac3e:	4a26      	ldr	r2, [pc, #152]	; (800acd8 <writeToSD+0x53c>)
 800ac40:	5cd2      	ldrb	r2, [r2, r3]
 800ac42:	2a00      	cmp	r2, #0
 800ac44:	d0f8      	beq.n	800ac38 <writeToSD+0x49c>
				largeMemory[memoryPointer] = tempText[i];
 800ac46:	4e25      	ldr	r6, [pc, #148]	; (800acdc <writeToSD+0x540>)
 800ac48:	e9d6 9a02 	ldrd	r9, sl, [r6, #8]
 800ac4c:	4c24      	ldr	r4, [pc, #144]	; (800ace0 <writeToSD+0x544>)
 800ac4e:	444c      	add	r4, r9
 800ac50:	7022      	strb	r2, [r4, #0]
				memoryPointer++;
 800ac52:	f119 0001 	adds.w	r0, r9, #1
 800ac56:	f14a 0100 	adc.w	r1, sl, #0
 800ac5a:	e9c6 0102 	strd	r0, r1, [r6, #8]
 800ac5e:	e7eb      	b.n	800ac38 <writeToSD+0x49c>
		largeMemory[memoryPointer] = 32;
 800ac60:	481e      	ldr	r0, [pc, #120]	; (800acdc <writeToSD+0x540>)
 800ac62:	e9d0 5602 	ldrd	r5, r6, [r0, #8]
 800ac66:	491e      	ldr	r1, [pc, #120]	; (800ace0 <writeToSD+0x544>)
 800ac68:	4429      	add	r1, r5
 800ac6a:	2420      	movs	r4, #32
 800ac6c:	700c      	strb	r4, [r1, #0]
		memoryPointer++;
 800ac6e:	1c6a      	adds	r2, r5, #1
 800ac70:	f146 0300 	adc.w	r3, r6, #0
 800ac74:	e9c0 2302 	strd	r2, r3, [r0, #8]
		for (int i = 0; i < 10; i++)
 800ac78:	2300      	movs	r3, #0
 800ac7a:	e003      	b.n	800ac84 <writeToSD+0x4e8>
			tempText[i] = 0;
 800ac7c:	4a16      	ldr	r2, [pc, #88]	; (800acd8 <writeToSD+0x53c>)
 800ac7e:	2100      	movs	r1, #0
 800ac80:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 10; i++)
 800ac82:	3301      	adds	r3, #1
 800ac84:	2b09      	cmp	r3, #9
 800ac86:	ddf9      	ble.n	800ac7c <writeToSD+0x4e0>
		itoa(lh,tempText, 10);
 800ac88:	220a      	movs	r2, #10
 800ac8a:	4913      	ldr	r1, [pc, #76]	; (800acd8 <writeToSD+0x53c>)
 800ac8c:	4640      	mov	r0, r8
 800ac8e:	f001 fc0b 	bl	800c4a8 <itoa>
		for (int i = 0; i < 10; i++)
 800ac92:	2300      	movs	r3, #0
 800ac94:	e000      	b.n	800ac98 <writeToSD+0x4fc>
 800ac96:	3301      	adds	r3, #1
 800ac98:	2b09      	cmp	r3, #9
 800ac9a:	dc0f      	bgt.n	800acbc <writeToSD+0x520>
			if (tempText[i] != 0)
 800ac9c:	4a0e      	ldr	r2, [pc, #56]	; (800acd8 <writeToSD+0x53c>)
 800ac9e:	5cd2      	ldrb	r2, [r2, r3]
 800aca0:	2a00      	cmp	r2, #0
 800aca2:	d0f8      	beq.n	800ac96 <writeToSD+0x4fa>
				largeMemory[memoryPointer] = tempText[i];
 800aca4:	4d0d      	ldr	r5, [pc, #52]	; (800acdc <writeToSD+0x540>)
 800aca6:	e9d5 6702 	ldrd	r6, r7, [r5, #8]
 800acaa:	4c0d      	ldr	r4, [pc, #52]	; (800ace0 <writeToSD+0x544>)
 800acac:	4434      	add	r4, r6
 800acae:	7022      	strb	r2, [r4, #0]
				memoryPointer++;
 800acb0:	1c70      	adds	r0, r6, #1
 800acb2:	f147 0100 	adc.w	r1, r7, #0
 800acb6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800acba:	e7ec      	b.n	800ac96 <writeToSD+0x4fa>
		largeMemory[memoryPointer] = 32;
 800acbc:	4807      	ldr	r0, [pc, #28]	; (800acdc <writeToSD+0x540>)
 800acbe:	e9d0 5602 	ldrd	r5, r6, [r0, #8]
 800acc2:	4907      	ldr	r1, [pc, #28]	; (800ace0 <writeToSD+0x544>)
 800acc4:	4429      	add	r1, r5
 800acc6:	2420      	movs	r4, #32
 800acc8:	700c      	strb	r4, [r1, #0]
		memoryPointer++;
 800acca:	1c6a      	adds	r2, r5, #1
 800accc:	f146 0300 	adc.w	r3, r6, #0
 800acd0:	e9c0 2302 	strd	r2, r3, [r0, #8]
		for (int i = 0; i < 30; i++)
 800acd4:	2300      	movs	r3, #0
 800acd6:	e009      	b.n	800acec <writeToSD+0x550>
 800acd8:	20012504 	.word	0x20012504
 800acdc:	200004d0 	.word	0x200004d0
 800ace0:	60000000 	.word	0x60000000
			tempText[i] = 0;
 800ace4:	4a23      	ldr	r2, [pc, #140]	; (800ad74 <writeToSD+0x5d8>)
 800ace6:	2100      	movs	r1, #0
 800ace8:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 30; i++)
 800acea:	3301      	adds	r3, #1
 800acec:	2b1d      	cmp	r3, #29
 800acee:	ddf9      	ble.n	800ace4 <writeToSD+0x548>
		itoa(rh,tempText, 10);
 800acf0:	220a      	movs	r2, #10
 800acf2:	4920      	ldr	r1, [pc, #128]	; (800ad74 <writeToSD+0x5d8>)
 800acf4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800acf6:	f001 fbd7 	bl	800c4a8 <itoa>
		for (int i = 0; i < 10; i++)
 800acfa:	2300      	movs	r3, #0
 800acfc:	e000      	b.n	800ad00 <writeToSD+0x564>
 800acfe:	3301      	adds	r3, #1
 800ad00:	2b09      	cmp	r3, #9
 800ad02:	dc0f      	bgt.n	800ad24 <writeToSD+0x588>
			if (tempText[i] != 0)
 800ad04:	4a1b      	ldr	r2, [pc, #108]	; (800ad74 <writeToSD+0x5d8>)
 800ad06:	5cd2      	ldrb	r2, [r2, r3]
 800ad08:	2a00      	cmp	r2, #0
 800ad0a:	d0f8      	beq.n	800acfe <writeToSD+0x562>
				largeMemory[memoryPointer] = tempText[i];
 800ad0c:	4d1a      	ldr	r5, [pc, #104]	; (800ad78 <writeToSD+0x5dc>)
 800ad0e:	e9d5 6702 	ldrd	r6, r7, [r5, #8]
 800ad12:	4c1a      	ldr	r4, [pc, #104]	; (800ad7c <writeToSD+0x5e0>)
 800ad14:	4434      	add	r4, r6
 800ad16:	7022      	strb	r2, [r4, #0]
				memoryPointer++;
 800ad18:	1c70      	adds	r0, r6, #1
 800ad1a:	f147 0100 	adc.w	r1, r7, #0
 800ad1e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800ad22:	e7ec      	b.n	800acfe <writeToSD+0x562>
		largeMemory[memoryPointer] = 32;
 800ad24:	4814      	ldr	r0, [pc, #80]	; (800ad78 <writeToSD+0x5dc>)
 800ad26:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800ad2a:	4914      	ldr	r1, [pc, #80]	; (800ad7c <writeToSD+0x5e0>)
 800ad2c:	188c      	adds	r4, r1, r2
 800ad2e:	2520      	movs	r5, #32
 800ad30:	7025      	strb	r5, [r4, #0]
		memoryPointer++;
 800ad32:	1c56      	adds	r6, r2, #1
 800ad34:	f143 0700 	adc.w	r7, r3, #0
		largeMemory[memoryPointer] = 59;
 800ad38:	198c      	adds	r4, r1, r6
 800ad3a:	253b      	movs	r5, #59	; 0x3b
 800ad3c:	7025      	strb	r5, [r4, #0]
		memoryPointer++;
 800ad3e:	1c72      	adds	r2, r6, #1
 800ad40:	f147 0300 	adc.w	r3, r7, #0
		largeMemory[memoryPointer] = 13;
 800ad44:	188c      	adds	r4, r1, r2
 800ad46:	250d      	movs	r5, #13
 800ad48:	7025      	strb	r5, [r4, #0]
		memoryPointer++;
 800ad4a:	1c55      	adds	r5, r2, #1
 800ad4c:	f143 0600 	adc.w	r6, r3, #0
		largeMemory[memoryPointer] = 10;
 800ad50:	4429      	add	r1, r5
 800ad52:	240a      	movs	r4, #10
 800ad54:	700c      	strb	r4, [r1, #0]
		memoryPointer++;
 800ad56:	1c6a      	adds	r2, r5, #1
 800ad58:	f146 0300 	adc.w	r3, r6, #0
 800ad5c:	e9c0 2302 	strd	r2, r3, [r0, #8]
		SDWriteIndex++;
 800ad60:	4907      	ldr	r1, [pc, #28]	; (800ad80 <writeToSD+0x5e4>)
 800ad62:	e9d1 2300 	ldrd	r2, r3, [r1]
 800ad66:	1c54      	adds	r4, r2, #1
 800ad68:	f143 0500 	adc.w	r5, r3, #0
 800ad6c:	e9c1 4500 	strd	r4, r5, [r1]
}
 800ad70:	e64d      	b.n	800aa0e <writeToSD+0x272>
 800ad72:	bf00      	nop
 800ad74:	20012504 	.word	0x20012504
 800ad78:	200004d0 	.word	0x200004d0
 800ad7c:	60000000 	.word	0x60000000
 800ad80:	20000460 	.word	0x20000460

0800ad84 <MPU_Conf>:
void MPU_Conf(void)
{
 800ad84:	b570      	push	{r4, r5, r6, lr}
 800ad86:	b084      	sub	sp, #16
  //Thanks, Keshikan! This solves the issues with accessing the SRAM in the D2 area properly. -JS
	//should test the different possible settings to see what works best while avoiding needing to manually clear the cache -JS

	MPU_Region_InitTypeDef MPU_InitStruct;

	  HAL_MPU_Disable();
 800ad88:	f7f6 fade 	bl	8001348 <HAL_MPU_Disable>

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800ad8c:	2401      	movs	r4, #1
 800ad8e:	f88d 4000 	strb.w	r4, [sp]

	  //D2 Domain�SRAM1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 800ad92:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800ad96:	9301      	str	r3, [sp, #4]
	  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
	  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
	  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
	  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800ad98:	2311      	movs	r3, #17
 800ad9a:	f88d 3008 	strb.w	r3, [sp, #8]

	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800ad9e:	2603      	movs	r6, #3
 800ada0:	f88d 600b 	strb.w	r6, [sp, #11]

	  //AN4838
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800ada4:	f88d 400a 	strb.w	r4, [sp, #10]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800ada8:	2500      	movs	r5, #0
 800adaa:	f88d 500e 	strb.w	r5, [sp, #14]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800adae:	f88d 500f 	strb.w	r5, [sp, #15]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800adb2:	f88d 500d 	strb.w	r5, [sp, #13]
//	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
//	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
//	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800adb6:	f88d 5001 	strb.w	r5, [sp, #1]

	  MPU_InitStruct.SubRegionDisable = 0x00;
 800adba:	f88d 5009 	strb.w	r5, [sp, #9]


	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800adbe:	f88d 400c 	strb.w	r4, [sp, #12]


	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800adc2:	4668      	mov	r0, sp
 800adc4:	f7f6 fae2 	bl	800138c <HAL_MPU_ConfigRegion>


	  //now set up D3 domain RAM

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800adc8:	f88d 4000 	strb.w	r4, [sp]

	 	  //D2 Domain�SRAM1
	 	  MPU_InitStruct.BaseAddress = 0x38000000;
 800adcc:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800add0:	9301      	str	r3, [sp, #4]


	 	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800add2:	230f      	movs	r3, #15
 800add4:	f88d 3008 	strb.w	r3, [sp, #8]

	 	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800add8:	f88d 600b 	strb.w	r6, [sp, #11]

	 	  //AN4838
	 	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800addc:	f88d 400a 	strb.w	r4, [sp, #10]
	 	  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800ade0:	f88d 400e 	strb.w	r4, [sp, #14]
	 	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800ade4:	f88d 400f 	strb.w	r4, [sp, #15]
	 	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800ade8:	f88d 400d 	strb.w	r4, [sp, #13]
	 //	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	 //	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	 //	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	 	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800adec:	f88d 4001 	strb.w	r4, [sp, #1]

	 	  MPU_InitStruct.SubRegionDisable = 0x00;
 800adf0:	f88d 5009 	strb.w	r5, [sp, #9]


	 	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800adf4:	f88d 500c 	strb.w	r5, [sp, #12]


	 	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800adf8:	4668      	mov	r0, sp
 800adfa:	f7f6 fac7 	bl	800138c <HAL_MPU_ConfigRegion>


	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800adfe:	2004      	movs	r0, #4
 800ae00:	f7f6 fab2 	bl	8001368 <HAL_MPU_Enable>
}
 800ae04:	b004      	add	sp, #16
 800ae06:	bd70      	pop	{r4, r5, r6, pc}

0800ae08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ae08:	e7fe      	b.n	800ae08 <Error_Handler>
	...

0800ae0c <SystemClock_Config>:
{
 800ae0c:	b500      	push	{lr}
 800ae0e:	b0cd      	sub	sp, #308	; 0x134
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ae10:	224c      	movs	r2, #76	; 0x4c
 800ae12:	2100      	movs	r1, #0
 800ae14:	a839      	add	r0, sp, #228	; 0xe4
 800ae16:	f001 fb49 	bl	800c4ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ae1a:	2220      	movs	r2, #32
 800ae1c:	2100      	movs	r1, #0
 800ae1e:	a831      	add	r0, sp, #196	; 0xc4
 800ae20:	f001 fb44 	bl	800c4ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ae24:	22bc      	movs	r2, #188	; 0xbc
 800ae26:	2100      	movs	r1, #0
 800ae28:	a802      	add	r0, sp, #8
 800ae2a:	f001 fb3f 	bl	800c4ac <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800ae2e:	2002      	movs	r0, #2
 800ae30:	f7f8 f9ec 	bl	800320c <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800ae34:	2300      	movs	r3, #0
 800ae36:	9301      	str	r3, [sp, #4]
 800ae38:	4b3d      	ldr	r3, [pc, #244]	; (800af30 <SystemClock_Config+0x124>)
 800ae3a:	699a      	ldr	r2, [r3, #24]
 800ae3c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800ae40:	619a      	str	r2, [r3, #24]
 800ae42:	699b      	ldr	r3, [r3, #24]
 800ae44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ae48:	9301      	str	r3, [sp, #4]
 800ae4a:	4b3a      	ldr	r3, [pc, #232]	; (800af34 <SystemClock_Config+0x128>)
 800ae4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae4e:	f042 0201 	orr.w	r2, r2, #1
 800ae52:	62da      	str	r2, [r3, #44]	; 0x2c
 800ae54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae56:	f003 0301 	and.w	r3, r3, #1
 800ae5a:	9301      	str	r3, [sp, #4]
 800ae5c:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800ae5e:	4b34      	ldr	r3, [pc, #208]	; (800af30 <SystemClock_Config+0x124>)
 800ae60:	699b      	ldr	r3, [r3, #24]
 800ae62:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800ae66:	d0fa      	beq.n	800ae5e <SystemClock_Config+0x52>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800ae68:	4a33      	ldr	r2, [pc, #204]	; (800af38 <SystemClock_Config+0x12c>)
 800ae6a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800ae6c:	f023 0303 	bic.w	r3, r3, #3
 800ae70:	f043 0302 	orr.w	r3, r3, #2
 800ae74:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800ae76:	2323      	movs	r3, #35	; 0x23
 800ae78:	9339      	str	r3, [sp, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ae7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ae7e:	933a      	str	r3, [sp, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800ae80:	2301      	movs	r3, #1
 800ae82:	933c      	str	r3, [sp, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800ae84:	2240      	movs	r2, #64	; 0x40
 800ae86:	923d      	str	r2, [sp, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800ae88:	933f      	str	r3, [sp, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ae8a:	2302      	movs	r3, #2
 800ae8c:	9342      	str	r3, [sp, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ae8e:	9343      	str	r3, [sp, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800ae90:	2205      	movs	r2, #5
 800ae92:	9244      	str	r2, [sp, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 192;
 800ae94:	22c0      	movs	r2, #192	; 0xc0
 800ae96:	9245      	str	r2, [sp, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800ae98:	9346      	str	r3, [sp, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800ae9a:	9347      	str	r3, [sp, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800ae9c:	9348      	str	r3, [sp, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800ae9e:	2308      	movs	r3, #8
 800aea0:	9349      	str	r3, [sp, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800aea2:	2300      	movs	r3, #0
 800aea4:	934a      	str	r3, [sp, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800aea6:	934b      	str	r3, [sp, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800aea8:	a839      	add	r0, sp, #228	; 0xe4
 800aeaa:	f7f8 f9d9 	bl	8003260 <HAL_RCC_OscConfig>
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	d137      	bne.n	800af22 <SystemClock_Config+0x116>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800aeb2:	233f      	movs	r3, #63	; 0x3f
 800aeb4:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800aeb6:	2303      	movs	r3, #3
 800aeb8:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800aeba:	2300      	movs	r3, #0
 800aebc:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800aebe:	2308      	movs	r3, #8
 800aec0:	9334      	str	r3, [sp, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800aec2:	2340      	movs	r3, #64	; 0x40
 800aec4:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800aec6:	9336      	str	r3, [sp, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800aec8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aecc:	9237      	str	r2, [sp, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800aece:	9338      	str	r3, [sp, #224]	; 0xe0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800aed0:	2104      	movs	r1, #4
 800aed2:	a831      	add	r0, sp, #196	; 0xc4
 800aed4:	f7f8 fdb2 	bl	8003a3c <HAL_RCC_ClockConfig>
 800aed8:	bb28      	cbnz	r0, 800af26 <SystemClock_Config+0x11a>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_SPI2
 800aeda:	4b18      	ldr	r3, [pc, #96]	; (800af3c <SystemClock_Config+0x130>)
 800aedc:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 800aede:	2319      	movs	r3, #25
 800aee0:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 800aee2:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800aee6:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 800aee8:	2307      	movs	r3, #7
 800aeea:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800aeec:	2302      	movs	r3, #2
 800aeee:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800aef0:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800aef2:	2300      	movs	r3, #0
 800aef4:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800aef6:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800aef8:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800aefa:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800aefc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800af00:	9215      	str	r2, [sp, #84]	; 0x54
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800af02:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800af04:	2201      	movs	r2, #1
 800af06:	9217      	str	r2, [sp, #92]	; 0x5c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800af08:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800af0a:	9321      	str	r3, [sp, #132]	; 0x84
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800af0c:	9322      	str	r3, [sp, #136]	; 0x88
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 800af0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800af12:	932a      	str	r3, [sp, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800af14:	a802      	add	r0, sp, #8
 800af16:	f7f9 f809 	bl	8003f2c <HAL_RCCEx_PeriphCLKConfig>
 800af1a:	b930      	cbnz	r0, 800af2a <SystemClock_Config+0x11e>
}
 800af1c:	b04d      	add	sp, #308	; 0x134
 800af1e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800af22:	f7ff ff71 	bl	800ae08 <Error_Handler>
    Error_Handler();
 800af26:	f7ff ff6f 	bl	800ae08 <Error_Handler>
    Error_Handler();
 800af2a:	f7ff ff6d 	bl	800ae08 <Error_Handler>
 800af2e:	bf00      	nop
 800af30:	58024800 	.word	0x58024800
 800af34:	58000400 	.word	0x58000400
 800af38:	58024400 	.word	0x58024400
 800af3c:	810b1108 	.word	0x810b1108

0800af40 <main>:
{
 800af40:	b510      	push	{r4, lr}
  MPU_Conf();
 800af42:	f7ff ff1f 	bl	800ad84 <MPU_Conf>
  __ASM volatile ("dsb 0xF":::"memory");
 800af46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800af4a:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800af4e:	4b45      	ldr	r3, [pc, #276]	; (800b064 <main+0x124>)
 800af50:	2100      	movs	r1, #0
 800af52:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800af56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800af5a:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800af5e:	695a      	ldr	r2, [r3, #20]
 800af60:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800af64:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800af66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800af6a:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800af6e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800af72:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800af76:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800af7a:	f3c4 314e 	ubfx	r1, r4, #13, #15
 800af7e:	e00f      	b.n	800afa0 <main+0x60>
      } while (ways-- != 0U);
 800af80:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800af82:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800af86:	ea03 1341 	and.w	r3, r3, r1, lsl #5
 800af8a:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800af8e:	4835      	ldr	r0, [pc, #212]	; (800b064 <main+0x124>)
 800af90:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 800af94:	1e53      	subs	r3, r2, #1
 800af96:	2a00      	cmp	r2, #0
 800af98:	d1f2      	bne.n	800af80 <main+0x40>
    } while(sets-- != 0U);
 800af9a:	1e4b      	subs	r3, r1, #1
 800af9c:	b119      	cbz	r1, 800afa6 <main+0x66>
 800af9e:	4619      	mov	r1, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800afa0:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 800afa4:	e7ed      	b.n	800af82 <main+0x42>
 800afa6:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800afaa:	6943      	ldr	r3, [r0, #20]
 800afac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afb0:	6143      	str	r3, [r0, #20]
 800afb2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800afb6:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800afba:	f7f5 f9b3 	bl	8000324 <HAL_Init>
  SystemClock_Config();
 800afbe:	f7ff ff25 	bl	800ae0c <SystemClock_Config>
  MX_GPIO_Init();
 800afc2:	f7ff f9c7 	bl	800a354 <MX_GPIO_Init>
  MX_DMA_Init();
 800afc6:	f7ff f8c7 	bl	800a158 <MX_DMA_Init>
  MX_FMC_Init();
 800afca:	f7ff f989 	bl	800a2e0 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 800afce:	f000 f9e9 	bl	800b3a4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800afd2:	f7ff f8fd 	bl	800a1d0 <MX_FATFS_Init>
  MX_SAI1_Init();
 800afd6:	f000 f881 	bl	800b0dc <MX_SAI1_Init>
  MX_RNG_Init();
 800afda:	f000 f853 	bl	800b084 <MX_RNG_Init>
  MX_SPI2_Init();
 800afde:	f000 fa53 	bl	800b488 <MX_SPI2_Init>
  MX_I2C2_Init();
 800afe2:	f7ff fac3 	bl	800a56c <MX_I2C2_Init>
  MX_ADC1_Init();
 800afe6:	f7fe fcc3 	bl	8009970 <MX_ADC1_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800afea:	2200      	movs	r2, #0
 800afec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800aff0:	481d      	ldr	r0, [pc, #116]	; (800b068 <main+0x128>)
 800aff2:	f7f7 fe9e 	bl	8002d32 <HAL_GPIO_WritePin>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 800aff6:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 800affa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 800affe:	eee1 3a10 	vmsr	fpscr, r3
  for (int i = 0; i < 16; i++)
 800b002:	2300      	movs	r3, #0
 800b004:	e006      	b.n	800b014 <main+0xd4>
	  SPI_TX[i] = counter++;
 800b006:	4919      	ldr	r1, [pc, #100]	; (800b06c <main+0x12c>)
 800b008:	780a      	ldrb	r2, [r1, #0]
 800b00a:	1c50      	adds	r0, r2, #1
 800b00c:	7008      	strb	r0, [r1, #0]
 800b00e:	4918      	ldr	r1, [pc, #96]	; (800b070 <main+0x130>)
 800b010:	54ca      	strb	r2, [r1, r3]
  for (int i = 0; i < 16; i++)
 800b012:	3301      	adds	r3, #1
 800b014:	2b0f      	cmp	r3, #15
 800b016:	ddf6      	ble.n	800b006 <main+0xc6>
  HAL_SPI_TransmitReceive_DMA(&hspi2, SPI_TX, SPI_RX, 16);
 800b018:	4915      	ldr	r1, [pc, #84]	; (800b070 <main+0x130>)
 800b01a:	2310      	movs	r3, #16
 800b01c:	f101 0220 	add.w	r2, r1, #32
 800b020:	4814      	ldr	r0, [pc, #80]	; (800b074 <main+0x134>)
 800b022:	f7fb fff3 	bl	800700c <HAL_SPI_TransmitReceive_DMA>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800b026:	2201      	movs	r2, #1
 800b028:	2140      	movs	r1, #64	; 0x40
 800b02a:	480f      	ldr	r0, [pc, #60]	; (800b068 <main+0x128>)
 800b02c:	f7f7 fe81 	bl	8002d32 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800b030:	200a      	movs	r0, #10
 800b032:	f7f5 f9b7 	bl	80003a4 <HAL_Delay>
  SDRAM_Initialization_sequence();
 800b036:	f7ff fb01 	bl	800a63c <SDRAM_Initialization_sequence>
  HAL_Delay(10);
 800b03a:	200a      	movs	r0, #10
 800b03c:	f7f5 f9b2 	bl	80003a4 <HAL_Delay>
	 if(BSP_SD_IsDetected())
 800b040:	f7fe ffd0 	bl	8009fe4 <BSP_SD_IsDetected>
 800b044:	b950      	cbnz	r0, 800b05c <main+0x11c>
     audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 800b046:	4a0c      	ldr	r2, [pc, #48]	; (800b078 <main+0x138>)
 800b048:	490c      	ldr	r1, [pc, #48]	; (800b07c <main+0x13c>)
 800b04a:	480d      	ldr	r0, [pc, #52]	; (800b080 <main+0x140>)
 800b04c:	f7fe fd80 	bl	8009b50 <audioInit>
	  int tempIntGP = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800b050:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b054:	4804      	ldr	r0, [pc, #16]	; (800b068 <main+0x128>)
 800b056:	f7f7 fe65 	bl	8002d24 <HAL_GPIO_ReadPin>
 800b05a:	e7f9      	b.n	800b050 <main+0x110>
	   FS_FileOperations();
 800b05c:	f7ff fb5c 	bl	800a718 <FS_FileOperations>
 800b060:	e7f1      	b.n	800b046 <main+0x106>
 800b062:	bf00      	nop
 800b064:	e000ed00 	.word	0xe000ed00
 800b068:	58020800 	.word	0x58020800
 800b06c:	20012523 	.word	0x20012523
 800b070:	30008000 	.word	0x30008000
 800b074:	20012e74 	.word	0x20012e74
 800b078:	20012bd4 	.word	0x20012bd4
 800b07c:	20012d5c 	.word	0x20012d5c
 800b080:	200060a8 	.word	0x200060a8

0800b084 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800b084:	b508      	push	{r3, lr}

  hrng.Instance = RNG;
 800b086:	4806      	ldr	r0, [pc, #24]	; (800b0a0 <MX_RNG_Init+0x1c>)
 800b088:	4b06      	ldr	r3, [pc, #24]	; (800b0a4 <MX_RNG_Init+0x20>)
 800b08a:	6003      	str	r3, [r0, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800b08c:	2300      	movs	r3, #0
 800b08e:	6043      	str	r3, [r0, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800b090:	f7fa f8a0 	bl	80051d4 <HAL_RNG_Init>
 800b094:	b900      	cbnz	r0, 800b098 <MX_RNG_Init+0x14>
  {
    Error_Handler();
  }

}
 800b096:	bd08      	pop	{r3, pc}
    Error_Handler();
 800b098:	f7ff feb6 	bl	800ae08 <Error_Handler>
}
 800b09c:	e7fb      	b.n	800b096 <MX_RNG_Init+0x12>
 800b09e:	bf00      	nop
 800b0a0:	20012bc0 	.word	0x20012bc0
 800b0a4:	48021800 	.word	0x48021800

0800b0a8 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{

  if(rngHandle->Instance==RNG)
 800b0a8:	6802      	ldr	r2, [r0, #0]
 800b0aa:	4b0a      	ldr	r3, [pc, #40]	; (800b0d4 <HAL_RNG_MspInit+0x2c>)
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d000      	beq.n	800b0b2 <HAL_RNG_MspInit+0xa>
 800b0b0:	4770      	bx	lr
{
 800b0b2:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800b0b4:	4b08      	ldr	r3, [pc, #32]	; (800b0d8 <HAL_RNG_MspInit+0x30>)
 800b0b6:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800b0ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b0be:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800b0c2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b0c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0ca:	9301      	str	r3, [sp, #4]
 800b0cc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800b0ce:	b002      	add	sp, #8
 800b0d0:	4770      	bx	lr
 800b0d2:	bf00      	nop
 800b0d4:	48021800 	.word	0x48021800
 800b0d8:	58024400 	.word	0x58024400

0800b0dc <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800b0dc:	b508      	push	{r3, lr}

  hsai_BlockA1.Instance = SAI1_Block_A;
 800b0de:	4818      	ldr	r0, [pc, #96]	; (800b140 <MX_SAI1_Init+0x64>)
 800b0e0:	4b18      	ldr	r3, [pc, #96]	; (800b144 <MX_SAI1_Init+0x68>)
 800b0e2:	6003      	str	r3, [r0, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800b0e4:	2100      	movs	r1, #0
 800b0e6:	6041      	str	r1, [r0, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800b0e8:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800b0ea:	6141      	str	r1, [r0, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800b0ec:	6181      	str	r1, [r0, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	61c3      	str	r3, [r0, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800b0f2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b0f6:	6203      	str	r3, [r0, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800b0f8:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800b0fa:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800b0fc:	6301      	str	r1, [r0, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800b0fe:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800b100:	2302      	movs	r3, #2
 800b102:	461a      	mov	r2, r3
 800b104:	f7fa fba6 	bl	8005854 <HAL_SAI_InitProtocol>
 800b108:	b998      	cbnz	r0, 800b132 <MX_SAI1_Init+0x56>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 800b10a:	480f      	ldr	r0, [pc, #60]	; (800b148 <MX_SAI1_Init+0x6c>)
 800b10c:	4b0f      	ldr	r3, [pc, #60]	; (800b14c <MX_SAI1_Init+0x70>)
 800b10e:	6003      	str	r3, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800b110:	2303      	movs	r3, #3
 800b112:	6043      	str	r3, [r0, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800b114:	2301      	movs	r3, #1
 800b116:	6083      	str	r3, [r0, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800b118:	2100      	movs	r1, #0
 800b11a:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800b11c:	61c3      	str	r3, [r0, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800b11e:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800b120:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800b122:	6301      	str	r1, [r0, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800b124:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800b126:	2302      	movs	r3, #2
 800b128:	461a      	mov	r2, r3
 800b12a:	f7fa fb93 	bl	8005854 <HAL_SAI_InitProtocol>
 800b12e:	b918      	cbnz	r0, 800b138 <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
  }

}
 800b130:	bd08      	pop	{r3, pc}
    Error_Handler();
 800b132:	f7ff fe69 	bl	800ae08 <Error_Handler>
 800b136:	e7e8      	b.n	800b10a <MX_SAI1_Init+0x2e>
    Error_Handler();
 800b138:	f7ff fe66 	bl	800ae08 <Error_Handler>
}
 800b13c:	e7f8      	b.n	800b130 <MX_SAI1_Init+0x54>
 800b13e:	bf00      	nop
 800b140:	20012d5c 	.word	0x20012d5c
 800b144:	40015804 	.word	0x40015804
 800b148:	20012bd4 	.word	0x20012bd4
 800b14c:	40015824 	.word	0x40015824

0800b150 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800b150:	b530      	push	{r4, r5, lr}
 800b152:	b089      	sub	sp, #36	; 0x24
 800b154:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800b156:	6802      	ldr	r2, [r0, #0]
 800b158:	4b4d      	ldr	r3, [pc, #308]	; (800b290 <HAL_SAI_MspInit+0x140>)
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d005      	beq.n	800b16a <HAL_SAI_MspInit+0x1a>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
    }
    if(hsai->Instance==SAI1_Block_B)
 800b15e:	6822      	ldr	r2, [r4, #0]
 800b160:	4b4c      	ldr	r3, [pc, #304]	; (800b294 <HAL_SAI_MspInit+0x144>)
 800b162:	429a      	cmp	r2, r3
 800b164:	d04b      	beq.n	800b1fe <HAL_SAI_MspInit+0xae>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
    }
}
 800b166:	b009      	add	sp, #36	; 0x24
 800b168:	bd30      	pop	{r4, r5, pc}
    if (SAI1_client == 0)
 800b16a:	4b4b      	ldr	r3, [pc, #300]	; (800b298 <HAL_SAI_MspInit+0x148>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	b963      	cbnz	r3, 800b18a <HAL_SAI_MspInit+0x3a>
       __HAL_RCC_SAI1_CLK_ENABLE();
 800b170:	4a4a      	ldr	r2, [pc, #296]	; (800b29c <HAL_SAI_MspInit+0x14c>)
 800b172:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 800b176:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 800b17a:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
 800b17e:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 800b182:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800b186:	9201      	str	r2, [sp, #4]
 800b188:	9a01      	ldr	r2, [sp, #4]
    SAI1_client ++;
 800b18a:	3301      	adds	r3, #1
 800b18c:	4a42      	ldr	r2, [pc, #264]	; (800b298 <HAL_SAI_MspInit+0x148>)
 800b18e:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800b190:	2374      	movs	r3, #116	; 0x74
 800b192:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b194:	2302      	movs	r3, #2
 800b196:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b198:	2500      	movs	r5, #0
 800b19a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b19c:	2303      	movs	r3, #3
 800b19e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800b1a0:	2306      	movs	r3, #6
 800b1a2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b1a4:	a903      	add	r1, sp, #12
 800b1a6:	483e      	ldr	r0, [pc, #248]	; (800b2a0 <HAL_SAI_MspInit+0x150>)
 800b1a8:	f7f7 fccc 	bl	8002b44 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 800b1ac:	483d      	ldr	r0, [pc, #244]	; (800b2a4 <HAL_SAI_MspInit+0x154>)
 800b1ae:	4b3e      	ldr	r3, [pc, #248]	; (800b2a8 <HAL_SAI_MspInit+0x158>)
 800b1b0:	6003      	str	r3, [r0, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800b1b2:	2357      	movs	r3, #87	; 0x57
 800b1b4:	6043      	str	r3, [r0, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b1b6:	2340      	movs	r3, #64	; 0x40
 800b1b8:	6083      	str	r3, [r0, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800b1ba:	60c5      	str	r5, [r0, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800b1bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1c0:	6103      	str	r3, [r0, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b1c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1c6:	6143      	str	r3, [r0, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b1c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b1cc:	6183      	str	r3, [r0, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800b1ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1d2:	61c3      	str	r3, [r0, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800b1d4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800b1d8:	6203      	str	r3, [r0, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b1da:	2304      	movs	r3, #4
 800b1dc:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800b1de:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 800b1e0:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800b1e2:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800b1e4:	f7f6 fb10 	bl	8001808 <HAL_DMA_Init>
 800b1e8:	b930      	cbnz	r0, 800b1f8 <HAL_SAI_MspInit+0xa8>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 800b1ea:	4b2e      	ldr	r3, [pc, #184]	; (800b2a4 <HAL_SAI_MspInit+0x154>)
 800b1ec:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800b1f0:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 800b1f2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800b1f6:	e7b2      	b.n	800b15e <HAL_SAI_MspInit+0xe>
      Error_Handler();
 800b1f8:	f7ff fe06 	bl	800ae08 <Error_Handler>
 800b1fc:	e7f5      	b.n	800b1ea <HAL_SAI_MspInit+0x9a>
      if (SAI1_client == 0)
 800b1fe:	4b26      	ldr	r3, [pc, #152]	; (800b298 <HAL_SAI_MspInit+0x148>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	b963      	cbnz	r3, 800b21e <HAL_SAI_MspInit+0xce>
       __HAL_RCC_SAI1_CLK_ENABLE();
 800b204:	4a25      	ldr	r2, [pc, #148]	; (800b29c <HAL_SAI_MspInit+0x14c>)
 800b206:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 800b20a:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 800b20e:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
 800b212:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 800b216:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800b21a:	9202      	str	r2, [sp, #8]
 800b21c:	9a02      	ldr	r2, [sp, #8]
    SAI1_client ++;
 800b21e:	3301      	adds	r3, #1
 800b220:	4a1d      	ldr	r2, [pc, #116]	; (800b298 <HAL_SAI_MspInit+0x148>)
 800b222:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800b224:	2308      	movs	r3, #8
 800b226:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b228:	2302      	movs	r3, #2
 800b22a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b22c:	2500      	movs	r5, #0
 800b22e:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b230:	2303      	movs	r3, #3
 800b232:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800b234:	2306      	movs	r3, #6
 800b236:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b238:	a903      	add	r1, sp, #12
 800b23a:	4819      	ldr	r0, [pc, #100]	; (800b2a0 <HAL_SAI_MspInit+0x150>)
 800b23c:	f7f7 fc82 	bl	8002b44 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 800b240:	481a      	ldr	r0, [pc, #104]	; (800b2ac <HAL_SAI_MspInit+0x15c>)
 800b242:	4b1b      	ldr	r3, [pc, #108]	; (800b2b0 <HAL_SAI_MspInit+0x160>)
 800b244:	6003      	str	r3, [r0, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800b246:	2358      	movs	r3, #88	; 0x58
 800b248:	6043      	str	r3, [r0, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b24a:	6085      	str	r5, [r0, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800b24c:	60c5      	str	r5, [r0, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800b24e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b252:	6103      	str	r3, [r0, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b258:	6143      	str	r3, [r0, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b25a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b25e:	6183      	str	r3, [r0, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800b260:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b264:	61c3      	str	r3, [r0, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800b266:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800b26a:	6203      	str	r3, [r0, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b26c:	2304      	movs	r3, #4
 800b26e:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800b270:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 800b272:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800b274:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800b276:	f7f6 fac7 	bl	8001808 <HAL_DMA_Init>
 800b27a:	b930      	cbnz	r0, 800b28a <HAL_SAI_MspInit+0x13a>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800b27c:	4b0b      	ldr	r3, [pc, #44]	; (800b2ac <HAL_SAI_MspInit+0x15c>)
 800b27e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800b282:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800b284:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 800b288:	e76d      	b.n	800b166 <HAL_SAI_MspInit+0x16>
      Error_Handler();
 800b28a:	f7ff fdbd 	bl	800ae08 <Error_Handler>
 800b28e:	e7f5      	b.n	800b27c <HAL_SAI_MspInit+0x12c>
 800b290:	40015804 	.word	0x40015804
 800b294:	40015824 	.word	0x40015824
 800b298:	200004e0 	.word	0x200004e0
 800b29c:	58024400 	.word	0x58024400
 800b2a0:	58021000 	.word	0x58021000
 800b2a4:	20012c6c 	.word	0x20012c6c
 800b2a8:	40020028 	.word	0x40020028
 800b2ac:	20012ce4 	.word	0x20012ce4
 800b2b0:	40020040 	.word	0x40020040

0800b2b4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b2b4:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 800b2b6:	4b07      	ldr	r3, [pc, #28]	; (800b2d4 <SD_CheckStatus+0x20>)
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b2bc:	f7fe fe76 	bl	8009fac <BSP_SD_GetCardState>
 800b2c0:	b920      	cbnz	r0, 800b2cc <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 800b2c2:	4a04      	ldr	r2, [pc, #16]	; (800b2d4 <SD_CheckStatus+0x20>)
 800b2c4:	7813      	ldrb	r3, [r2, #0]
 800b2c6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b2ca:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 800b2cc:	4b01      	ldr	r3, [pc, #4]	; (800b2d4 <SD_CheckStatus+0x20>)
 800b2ce:	7818      	ldrb	r0, [r3, #0]
}
 800b2d0:	bd08      	pop	{r3, pc}
 800b2d2:	bf00      	nop
 800b2d4:	200000b8 	.word	0x200000b8

0800b2d8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b2d8:	b510      	push	{r4, lr}
 800b2da:	4604      	mov	r4, r0
Stat = STA_NOINIT;  
 800b2dc:	4b07      	ldr	r3, [pc, #28]	; (800b2fc <SD_initialize+0x24>)
 800b2de:	2201      	movs	r2, #1
 800b2e0:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b2e2:	f7fe fe8f 	bl	800a004 <BSP_SD_Init>
 800b2e6:	b110      	cbz	r0, 800b2ee <SD_initialize+0x16>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b2e8:	4b04      	ldr	r3, [pc, #16]	; (800b2fc <SD_initialize+0x24>)
 800b2ea:	7818      	ldrb	r0, [r3, #0]
}
 800b2ec:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	f7ff ffe0 	bl	800b2b4 <SD_CheckStatus>
 800b2f4:	4b01      	ldr	r3, [pc, #4]	; (800b2fc <SD_initialize+0x24>)
 800b2f6:	7018      	strb	r0, [r3, #0]
 800b2f8:	e7f6      	b.n	800b2e8 <SD_initialize+0x10>
 800b2fa:	bf00      	nop
 800b2fc:	200000b8 	.word	0x200000b8

0800b300 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b300:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 800b302:	f7ff ffd7 	bl	800b2b4 <SD_CheckStatus>
}
 800b306:	bd08      	pop	{r3, pc}

0800b308 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b308:	b508      	push	{r3, lr}
 800b30a:	4608      	mov	r0, r1
 800b30c:	4611      	mov	r1, r2
 800b30e:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b310:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b314:	f7fe fe2a 	bl	8009f6c <BSP_SD_ReadBlocks>
 800b318:	b920      	cbnz	r0, 800b324 <SD_read+0x1c>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b31a:	f7fe fe47 	bl	8009fac <BSP_SD_GetCardState>
 800b31e:	2800      	cmp	r0, #0
 800b320:	d1fb      	bne.n	800b31a <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 800b322:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 800b324:	2001      	movs	r0, #1
 800b326:	e7fc      	b.n	800b322 <SD_read+0x1a>

0800b328 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b328:	b508      	push	{r3, lr}
 800b32a:	4608      	mov	r0, r1
 800b32c:	4611      	mov	r1, r2
 800b32e:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b334:	f7fe fe2a 	bl	8009f8c <BSP_SD_WriteBlocks>
 800b338:	b920      	cbnz	r0, 800b344 <SD_write+0x1c>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b33a:	f7fe fe37 	bl	8009fac <BSP_SD_GetCardState>
 800b33e:	2800      	cmp	r0, #0
 800b340:	d1fb      	bne.n	800b33a <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 800b342:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 800b344:	2001      	movs	r0, #1
 800b346:	e7fc      	b.n	800b342 <SD_write+0x1a>

0800b348 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b348:	4b15      	ldr	r3, [pc, #84]	; (800b3a0 <SD_ioctl+0x58>)
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	f013 0f01 	tst.w	r3, #1
 800b350:	d121      	bne.n	800b396 <SD_ioctl+0x4e>
{
 800b352:	b510      	push	{r4, lr}
 800b354:	b08a      	sub	sp, #40	; 0x28
 800b356:	4614      	mov	r4, r2

  switch (cmd)
 800b358:	2903      	cmp	r1, #3
 800b35a:	d81e      	bhi.n	800b39a <SD_ioctl+0x52>
 800b35c:	e8df f001 	tbb	[pc, r1]
 800b360:	130c0502 	.word	0x130c0502
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b364:	2000      	movs	r0, #0
  default:
    res = RES_PARERR;
  }

  return res;
}
 800b366:	b00a      	add	sp, #40	; 0x28
 800b368:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800b36a:	a801      	add	r0, sp, #4
 800b36c:	f7fe fe28 	bl	8009fc0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b370:	9b07      	ldr	r3, [sp, #28]
 800b372:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 800b374:	2000      	movs	r0, #0
    break;
 800b376:	e7f6      	b.n	800b366 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 800b378:	a801      	add	r0, sp, #4
 800b37a:	f7fe fe21 	bl	8009fc0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b37e:	9b08      	ldr	r3, [sp, #32]
 800b380:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 800b382:	2000      	movs	r0, #0
    break;
 800b384:	e7ef      	b.n	800b366 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 800b386:	a801      	add	r0, sp, #4
 800b388:	f7fe fe1a 	bl	8009fc0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b38c:	9b08      	ldr	r3, [sp, #32]
 800b38e:	0a5b      	lsrs	r3, r3, #9
 800b390:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 800b392:	2000      	movs	r0, #0
    break;
 800b394:	e7e7      	b.n	800b366 <SD_ioctl+0x1e>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b396:	2003      	movs	r0, #3
}
 800b398:	4770      	bx	lr
    res = RES_PARERR;
 800b39a:	2004      	movs	r0, #4
 800b39c:	e7e3      	b.n	800b366 <SD_ioctl+0x1e>
 800b39e:	bf00      	nop
 800b3a0:	200000b8 	.word	0x200000b8

0800b3a4 <MX_SDMMC1_SD_Init>:
/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{

  hsd1.Instance = SDMMC1;
 800b3a4:	4b07      	ldr	r3, [pc, #28]	; (800b3c4 <MX_SDMMC1_SD_Init+0x20>)
 800b3a6:	4a08      	ldr	r2, [pc, #32]	; (800b3c8 <MX_SDMMC1_SD_Init+0x24>)
 800b3a8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b3ae:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800b3b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b3b4:	60d9      	str	r1, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b3b6:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 16;
 800b3b8:	2210      	movs	r2, #16
 800b3ba:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 800b3bc:	2201      	movs	r2, #1
 800b3be:	619a      	str	r2, [r3, #24]

}
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	20012df4 	.word	0x20012df4
 800b3c8:	52007000 	.word	0x52007000

0800b3cc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800b3cc:	b570      	push	{r4, r5, r6, lr}
 800b3ce:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	9303      	str	r3, [sp, #12]
 800b3d4:	9304      	str	r3, [sp, #16]
 800b3d6:	9305      	str	r3, [sp, #20]
 800b3d8:	9306      	str	r3, [sp, #24]
 800b3da:	9307      	str	r3, [sp, #28]
  if(sdHandle->Instance==SDMMC1)
 800b3dc:	6802      	ldr	r2, [r0, #0]
 800b3de:	4b26      	ldr	r3, [pc, #152]	; (800b478 <HAL_SD_MspInit+0xac>)
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d001      	beq.n	800b3e8 <HAL_SD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800b3e4:	b008      	add	sp, #32
 800b3e6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800b3e8:	4b24      	ldr	r3, [pc, #144]	; (800b47c <HAL_SD_MspInit+0xb0>)
 800b3ea:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800b3ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b3f2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800b3f6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800b3fa:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 800b3fe:	9200      	str	r2, [sp, #0]
 800b400:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b402:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b406:	f042 0204 	orr.w	r2, r2, #4
 800b40a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b40e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b412:	f002 0204 	and.w	r2, r2, #4
 800b416:	9201      	str	r2, [sp, #4]
 800b418:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b41a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b41e:	f042 0208 	orr.w	r2, r2, #8
 800b422:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b42a:	f003 0308 	and.w	r3, r3, #8
 800b42e:	9302      	str	r3, [sp, #8]
 800b430:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800b432:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800b436:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b438:	2602      	movs	r6, #2
 800b43a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b43c:	2401      	movs	r4, #1
 800b43e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800b440:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800b442:	250c      	movs	r5, #12
 800b444:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b446:	eb0d 0105 	add.w	r1, sp, r5
 800b44a:	480d      	ldr	r0, [pc, #52]	; (800b480 <HAL_SD_MspInit+0xb4>)
 800b44c:	f7f7 fb7a 	bl	8002b44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b450:	2304      	movs	r3, #4
 800b452:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b454:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b456:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800b458:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800b45a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b45c:	eb0d 0105 	add.w	r1, sp, r5
 800b460:	4808      	ldr	r0, [pc, #32]	; (800b484 <HAL_SD_MspInit+0xb8>)
 800b462:	f7f7 fb6f 	bl	8002b44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 7, 0);
 800b466:	2200      	movs	r2, #0
 800b468:	2107      	movs	r1, #7
 800b46a:	2031      	movs	r0, #49	; 0x31
 800b46c:	f7f5 ff16 	bl	800129c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800b470:	2031      	movs	r0, #49	; 0x31
 800b472:	f7f5 ff45 	bl	8001300 <HAL_NVIC_EnableIRQ>
}
 800b476:	e7b5      	b.n	800b3e4 <HAL_SD_MspInit+0x18>
 800b478:	52007000 	.word	0x52007000
 800b47c:	58024400 	.word	0x58024400
 800b480:	58020800 	.word	0x58020800
 800b484:	58020c00 	.word	0x58020c00

0800b488 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800b488:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 800b48a:	4810      	ldr	r0, [pc, #64]	; (800b4cc <MX_SPI2_Init+0x44>)
 800b48c:	4b10      	ldr	r3, [pc, #64]	; (800b4d0 <MX_SPI2_Init+0x48>)
 800b48e:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800b490:	2300      	movs	r3, #0
 800b492:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800b494:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800b496:	2207      	movs	r2, #7
 800b498:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b49a:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b49c:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800b49e:	6183      	str	r3, [r0, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b4a0:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800b4a2:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b4a4:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800b4a6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800b4a8:	6343      	str	r3, [r0, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800b4aa:	6383      	str	r3, [r0, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800b4ac:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800b4ae:	6403      	str	r3, [r0, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800b4b0:	6443      	str	r3, [r0, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800b4b2:	6483      	str	r3, [r0, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800b4b4:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800b4b6:	6503      	str	r3, [r0, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800b4b8:	6543      	str	r3, [r0, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800b4ba:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800b4bc:	f7fb fcfe 	bl	8006ebc <HAL_SPI_Init>
 800b4c0:	b900      	cbnz	r0, 800b4c4 <MX_SPI2_Init+0x3c>
  {
    Error_Handler();
  }

}
 800b4c2:	bd08      	pop	{r3, pc}
    Error_Handler();
 800b4c4:	f7ff fca0 	bl	800ae08 <Error_Handler>
}
 800b4c8:	e7fb      	b.n	800b4c2 <MX_SPI2_Init+0x3a>
 800b4ca:	bf00      	nop
 800b4cc:	20012e74 	.word	0x20012e74
 800b4d0:	40003800 	.word	0x40003800

0800b4d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800b4d4:	b510      	push	{r4, lr}
 800b4d6:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4d8:	2300      	movs	r3, #0
 800b4da:	9303      	str	r3, [sp, #12]
 800b4dc:	9304      	str	r3, [sp, #16]
 800b4de:	9305      	str	r3, [sp, #20]
 800b4e0:	9306      	str	r3, [sp, #24]
 800b4e2:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 800b4e4:	6802      	ldr	r2, [r0, #0]
 800b4e6:	4b3d      	ldr	r3, [pc, #244]	; (800b5dc <HAL_SPI_MspInit+0x108>)
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d001      	beq.n	800b4f0 <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800b4ec:	b008      	add	sp, #32
 800b4ee:	bd10      	pop	{r4, pc}
 800b4f0:	4604      	mov	r4, r0
    __HAL_RCC_SPI2_CLK_ENABLE();
 800b4f2:	4b3b      	ldr	r3, [pc, #236]	; (800b5e0 <HAL_SPI_MspInit+0x10c>)
 800b4f4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800b4f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b4fc:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800b500:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800b504:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800b508:	9201      	str	r2, [sp, #4]
 800b50a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b50c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b510:	f042 0202 	orr.w	r2, r2, #2
 800b514:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b51c:	f003 0302 	and.w	r3, r3, #2
 800b520:	9302      	str	r3, [sp, #8]
 800b522:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800b524:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b528:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b52a:	2302      	movs	r3, #2
 800b52c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b52e:	2303      	movs	r3, #3
 800b530:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b532:	2305      	movs	r3, #5
 800b534:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b536:	a903      	add	r1, sp, #12
 800b538:	482a      	ldr	r0, [pc, #168]	; (800b5e4 <HAL_SPI_MspInit+0x110>)
 800b53a:	f7f7 fb03 	bl	8002b44 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800b53e:	482a      	ldr	r0, [pc, #168]	; (800b5e8 <HAL_SPI_MspInit+0x114>)
 800b540:	4b2a      	ldr	r3, [pc, #168]	; (800b5ec <HAL_SPI_MspInit+0x118>)
 800b542:	6003      	str	r3, [r0, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800b544:	2327      	movs	r3, #39	; 0x27
 800b546:	6043      	str	r3, [r0, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b548:	2300      	movs	r3, #0
 800b54a:	6083      	str	r3, [r0, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b54c:	60c3      	str	r3, [r0, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b54e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b552:	6102      	str	r2, [r0, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b554:	6143      	str	r3, [r0, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b556:	6183      	str	r3, [r0, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800b558:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b55c:	61c2      	str	r2, [r0, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800b55e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b562:	6202      	str	r2, [r0, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b564:	2204      	movs	r2, #4
 800b566:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800b568:	2201      	movs	r2, #1
 800b56a:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800b56c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800b56e:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800b570:	f7f6 f94a 	bl	8001808 <HAL_DMA_Init>
 800b574:	2800      	cmp	r0, #0
 800b576:	d12b      	bne.n	800b5d0 <HAL_SPI_MspInit+0xfc>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800b578:	4b1b      	ldr	r3, [pc, #108]	; (800b5e8 <HAL_SPI_MspInit+0x114>)
 800b57a:	67e3      	str	r3, [r4, #124]	; 0x7c
 800b57c:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800b57e:	481c      	ldr	r0, [pc, #112]	; (800b5f0 <HAL_SPI_MspInit+0x11c>)
 800b580:	4b1c      	ldr	r3, [pc, #112]	; (800b5f4 <HAL_SPI_MspInit+0x120>)
 800b582:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800b584:	2328      	movs	r3, #40	; 0x28
 800b586:	6043      	str	r3, [r0, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b588:	2340      	movs	r3, #64	; 0x40
 800b58a:	6083      	str	r3, [r0, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b58c:	2300      	movs	r3, #0
 800b58e:	60c3      	str	r3, [r0, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b590:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b594:	6102      	str	r2, [r0, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b596:	6143      	str	r3, [r0, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b598:	6183      	str	r3, [r0, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800b59a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b59e:	61c2      	str	r2, [r0, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800b5a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b5a4:	6202      	str	r2, [r0, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b5a6:	2204      	movs	r2, #4
 800b5a8:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800b5ae:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800b5b0:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800b5b2:	f7f6 f929 	bl	8001808 <HAL_DMA_Init>
 800b5b6:	b970      	cbnz	r0, 800b5d6 <HAL_SPI_MspInit+0x102>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800b5b8:	4b0d      	ldr	r3, [pc, #52]	; (800b5f0 <HAL_SPI_MspInit+0x11c>)
 800b5ba:	67a3      	str	r3, [r4, #120]	; 0x78
 800b5bc:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800b5be:	2200      	movs	r2, #0
 800b5c0:	4611      	mov	r1, r2
 800b5c2:	2024      	movs	r0, #36	; 0x24
 800b5c4:	f7f5 fe6a 	bl	800129c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800b5c8:	2024      	movs	r0, #36	; 0x24
 800b5ca:	f7f5 fe99 	bl	8001300 <HAL_NVIC_EnableIRQ>
}
 800b5ce:	e78d      	b.n	800b4ec <HAL_SPI_MspInit+0x18>
      Error_Handler();
 800b5d0:	f7ff fc1a 	bl	800ae08 <Error_Handler>
 800b5d4:	e7d0      	b.n	800b578 <HAL_SPI_MspInit+0xa4>
      Error_Handler();
 800b5d6:	f7ff fc17 	bl	800ae08 <Error_Handler>
 800b5da:	e7ed      	b.n	800b5b8 <HAL_SPI_MspInit+0xe4>
 800b5dc:	40003800 	.word	0x40003800
 800b5e0:	58024400 	.word	0x58024400
 800b5e4:	58020400 	.word	0x58020400
 800b5e8:	20012efc 	.word	0x20012efc
 800b5ec:	40020058 	.word	0x40020058
 800b5f0:	20012f74 	.word	0x20012f74
 800b5f4:	40020070 	.word	0x40020070

0800b5f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b5f8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b5fa:	4b07      	ldr	r3, [pc, #28]	; (800b618 <HAL_MspInit+0x20>)
 800b5fc:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800b600:	f042 0202 	orr.w	r2, r2, #2
 800b604:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800b608:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b60c:	f003 0302 	and.w	r3, r3, #2
 800b610:	9301      	str	r3, [sp, #4]
 800b612:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b614:	b002      	add	sp, #8
 800b616:	4770      	bx	lr
 800b618:	58024400 	.word	0x58024400

0800b61c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b61c:	4770      	bx	lr

0800b61e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b61e:	e7fe      	b.n	800b61e <HardFault_Handler>

0800b620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b620:	e7fe      	b.n	800b620 <MemManage_Handler>

0800b622 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b622:	e7fe      	b.n	800b622 <BusFault_Handler>

0800b624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b624:	e7fe      	b.n	800b624 <UsageFault_Handler>

0800b626 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b626:	4770      	bx	lr

0800b628 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b628:	4770      	bx	lr

0800b62a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b62a:	4770      	bx	lr

0800b62c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b62c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b62e:	f7f4 fea7 	bl	8000380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b632:	bd08      	pop	{r3, pc}

0800b634 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800b634:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800b636:	4802      	ldr	r0, [pc, #8]	; (800b640 <DMA1_Stream0_IRQHandler+0xc>)
 800b638:	f7f6 fee6 	bl	8002408 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800b63c:	bd08      	pop	{r3, pc}
 800b63e:	bf00      	nop
 800b640:	2000054c 	.word	0x2000054c

0800b644 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800b644:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800b646:	4802      	ldr	r0, [pc, #8]	; (800b650 <DMA1_Stream1_IRQHandler+0xc>)
 800b648:	f7f6 fede 	bl	8002408 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800b64c:	bd08      	pop	{r3, pc}
 800b64e:	bf00      	nop
 800b650:	20012c6c 	.word	0x20012c6c

0800b654 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800b654:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800b656:	4802      	ldr	r0, [pc, #8]	; (800b660 <DMA1_Stream2_IRQHandler+0xc>)
 800b658:	f7f6 fed6 	bl	8002408 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800b65c:	bd08      	pop	{r3, pc}
 800b65e:	bf00      	nop
 800b660:	20012ce4 	.word	0x20012ce4

0800b664 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800b664:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800b666:	4802      	ldr	r0, [pc, #8]	; (800b670 <DMA1_Stream3_IRQHandler+0xc>)
 800b668:	f7f6 fece 	bl	8002408 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800b66c:	bd08      	pop	{r3, pc}
 800b66e:	bf00      	nop
 800b670:	20012efc 	.word	0x20012efc

0800b674 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800b674:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800b676:	4802      	ldr	r0, [pc, #8]	; (800b680 <DMA1_Stream4_IRQHandler+0xc>)
 800b678:	f7f6 fec6 	bl	8002408 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800b67c:	bd08      	pop	{r3, pc}
 800b67e:	bf00      	nop
 800b680:	20012f74 	.word	0x20012f74

0800b684 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800b684:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800b686:	4802      	ldr	r0, [pc, #8]	; (800b690 <SPI2_IRQHandler+0xc>)
 800b688:	f7fb fe46 	bl	8007318 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800b68c:	bd08      	pop	{r3, pc}
 800b68e:	bf00      	nop
 800b690:	20012e74 	.word	0x20012e74

0800b694 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800b694:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800b696:	4802      	ldr	r0, [pc, #8]	; (800b6a0 <SDMMC1_IRQHandler+0xc>)
 800b698:	f7fb fa24 	bl	8006ae4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800b69c:	bd08      	pop	{r3, pc}
 800b69e:	bf00      	nop
 800b6a0:	20012df4 	.word	0x20012df4

0800b6a4 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800b6a4:	4a18      	ldr	r2, [pc, #96]	; (800b708 <SystemInit+0x64>)
 800b6a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b6aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b6ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800b6b2:	4b16      	ldr	r3, [pc, #88]	; (800b70c <SystemInit+0x68>)
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	f042 0201 	orr.w	r2, r2, #1
 800b6ba:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b6bc:	2200      	movs	r2, #0
 800b6be:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800b6c0:	6818      	ldr	r0, [r3, #0]
 800b6c2:	4913      	ldr	r1, [pc, #76]	; (800b710 <SystemInit+0x6c>)
 800b6c4:	4001      	ands	r1, r0
 800b6c6:	6019      	str	r1, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800b6c8:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800b6ca:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800b6cc:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800b6ce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800b6d0:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800b6d2:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800b6d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800b6d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800b6d8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800b6da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800b6dc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b6de:	6819      	ldr	r1, [r3, #0]
 800b6e0:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800b6e4:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800b6e6:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800b6e8:	4b0a      	ldr	r3, [pc, #40]	; (800b714 <SystemInit+0x70>)
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	4b0a      	ldr	r3, [pc, #40]	; (800b718 <SystemInit+0x74>)
 800b6ee:	4013      	ands	r3, r2
 800b6f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6f4:	d202      	bcs.n	800b6fc <SystemInit+0x58>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800b6f6:	4b09      	ldr	r3, [pc, #36]	; (800b71c <SystemInit+0x78>)
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b6fc:	4b02      	ldr	r3, [pc, #8]	; (800b708 <SystemInit+0x64>)
 800b6fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b702:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop
 800b708:	e000ed00 	.word	0xe000ed00
 800b70c:	58024400 	.word	0x58024400
 800b710:	eaf6ed7f 	.word	0xeaf6ed7f
 800b714:	5c001000 	.word	0x5c001000
 800b718:	ffff0000 	.word	0xffff0000
 800b71c:	51008108 	.word	0x51008108

0800b720 <tThreshold_initToPool>:
{
	tThreshold_initToPool(th, low, high, &leaf.mempool);
}

void tThreshold_initToPool (tThreshold* const th, float low, float high, tMempool* const mp)
{
 800b720:	b538      	push	{r3, r4, r5, lr}
 800b722:	ed2d 8b02 	vpush	{d8}
 800b726:	4605      	mov	r5, r0
 800b728:	eeb0 8a40 	vmov.f32	s16, s0
 800b72c:	eef0 8a60 	vmov.f32	s17, s1
    _tMempool* m = *mp;
 800b730:	680c      	ldr	r4, [r1, #0]
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 800b732:	4621      	mov	r1, r4
 800b734:	2010      	movs	r0, #16
 800b736:	f000 fc97 	bl	800c068 <mpool_alloc>
 800b73a:	6028      	str	r0, [r5, #0]
    t->mempool = m;
 800b73c:	6004      	str	r4, [r0, #0]
    
    t->highThresh = high;
 800b73e:	edc0 8a01 	vstr	s17, [r0, #4]
    t->lowThresh = low;
 800b742:	ed80 8a02 	vstr	s16, [r0, #8]

    t->currentValue = 0;
 800b746:	2300      	movs	r3, #0
 800b748:	60c3      	str	r3, [r0, #12]
}
 800b74a:	ecbd 8b02 	vpop	{d8}
 800b74e:	bd38      	pop	{r3, r4, r5, pc}

0800b750 <tThreshold_init>:
{
 800b750:	b508      	push	{r3, lr}
	tThreshold_initToPool(th, low, high, &leaf.mempool);
 800b752:	4902      	ldr	r1, [pc, #8]	; (800b75c <tThreshold_init+0xc>)
 800b754:	f7ff ffe4 	bl	800b720 <tThreshold_initToPool>
}
 800b758:	bd08      	pop	{r3, pc}
 800b75a:	bf00      	nop
 800b75c:	20013004 	.word	0x20013004

0800b760 <tADSR_initToPool>:
{
    tADSR_initToPool(adsrenv, attack, decay, sustain, release, &leaf.mempool);
}

void    tADSR_initToPool    (tADSR* const adsrenv, float attack, float decay, float sustain, float release, tMempool* const mp)
{
 800b760:	b538      	push	{r3, r4, r5, lr}
 800b762:	ed2d 8b04 	vpush	{d8-d9}
 800b766:	4605      	mov	r5, r0
 800b768:	eeb0 9a40 	vmov.f32	s18, s0
 800b76c:	eef0 8a60 	vmov.f32	s17, s1
 800b770:	eef0 9a41 	vmov.f32	s19, s2
 800b774:	eeb0 8a61 	vmov.f32	s16, s3
    _tMempool* m = *mp;
 800b778:	680c      	ldr	r4, [r1, #0]
    _tADSR* adsr = *adsrenv = (_tADSR*) mpool_alloc(sizeof(_tADSR), m);
 800b77a:	4621      	mov	r1, r4
 800b77c:	2050      	movs	r0, #80	; 0x50
 800b77e:	f000 fc73 	bl	800c068 <mpool_alloc>
 800b782:	6028      	str	r0, [r5, #0]
    adsr->mempool = m;
 800b784:	6004      	str	r4, [r0, #0]

    adsr->exp_buff = __leaf_table_exp_decay;
 800b786:	4b48      	ldr	r3, [pc, #288]	; (800b8a8 <tADSR_initToPool+0x148>)
 800b788:	6043      	str	r3, [r0, #4]
    adsr->inc_buff = __leaf_table_attack_decay_inc;
 800b78a:	4b48      	ldr	r3, [pc, #288]	; (800b8ac <tADSR_initToPool+0x14c>)
 800b78c:	6083      	str	r3, [r0, #8]
    adsr->buff_size = sizeof(__leaf_table_exp_decay);
 800b78e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b792:	60c3      	str	r3, [r0, #12]

    if (attack > 8192.0f)
 800b794:	eddf 7a46 	vldr	s15, [pc, #280]	; 800b8b0 <tADSR_initToPool+0x150>
 800b798:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800b79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7a0:	dd01      	ble.n	800b7a6 <tADSR_initToPool+0x46>
        attack = 8192.0f;
 800b7a2:	eeb0 9a67 	vmov.f32	s18, s15
    if (attack < 0.0f)
 800b7a6:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800b7aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7ae:	d468      	bmi.n	800b882 <tADSR_initToPool+0x122>
        attack = 0.0f;

    if (decay > 8192.0f)
 800b7b0:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800b8b0 <tADSR_initToPool+0x150>
 800b7b4:	eef4 8ae7 	vcmpe.f32	s17, s15
 800b7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7bc:	dd01      	ble.n	800b7c2 <tADSR_initToPool+0x62>
        decay = 8192.0f;
 800b7be:	eef0 8a67 	vmov.f32	s17, s15
    if (decay < 0.0f)
 800b7c2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800b7c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7ca:	d45d      	bmi.n	800b888 <tADSR_initToPool+0x128>
        decay = 0.0f;

    if (sustain > 1.0f)
 800b7cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b7d0:	eef4 9ae7 	vcmpe.f32	s19, s15
 800b7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7d8:	dd01      	ble.n	800b7de <tADSR_initToPool+0x7e>
        sustain = 1.0f;
 800b7da:	eef0 9a67 	vmov.f32	s19, s15
    if (sustain < 0.0f)
 800b7de:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 800b7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7e6:	d452      	bmi.n	800b88e <tADSR_initToPool+0x12e>
        sustain = 0.0f;

    if (release > 8192.0f)
 800b7e8:	eddf 7a31 	vldr	s15, [pc, #196]	; 800b8b0 <tADSR_initToPool+0x150>
 800b7ec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7f4:	dd01      	ble.n	800b7fa <tADSR_initToPool+0x9a>
        release = 8192.0f;
 800b7f6:	eeb0 8a67 	vmov.f32	s16, s15
    if (release < 0.0f)
 800b7fa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b802:	d447      	bmi.n	800b894 <tADSR_initToPool+0x134>
        release = 0.0f;

    int16_t attackIndex = ((int16_t)(attack * 8.0f))-1;
 800b804:	eebe 9aee 	vcvt.s32.f32	s18, s18, #3
 800b808:	ee19 3a10 	vmov	r3, s18
 800b80c:	b299      	uxth	r1, r3
 800b80e:	3901      	subs	r1, #1
 800b810:	b209      	sxth	r1, r1
    int16_t decayIndex = ((int16_t)(decay * 8.0f))-1;
 800b812:	eefe 8aee 	vcvt.s32.f32	s17, s17, #3
 800b816:	ee18 3a90 	vmov	r3, s17
 800b81a:	b29a      	uxth	r2, r3
 800b81c:	3a01      	subs	r2, #1
 800b81e:	b212      	sxth	r2, r2
    int16_t releaseIndex = ((int16_t)(release * 8.0f))-1;
 800b820:	eebe 8aee 	vcvt.s32.f32	s16, s16, #3
 800b824:	ee18 3a10 	vmov	r3, s16
 800b828:	b29b      	uxth	r3, r3
 800b82a:	3b01      	subs	r3, #1
 800b82c:	b21b      	sxth	r3, r3
    int16_t rampIndex = ((int16_t)(2.0f * 8.0f))-1;

    if (attackIndex < 0)
 800b82e:	2900      	cmp	r1, #0
 800b830:	db33      	blt.n	800b89a <tADSR_initToPool+0x13a>
        attackIndex = 0;
    if (decayIndex < 0)
 800b832:	2a00      	cmp	r2, #0
 800b834:	db33      	blt.n	800b89e <tADSR_initToPool+0x13e>
        decayIndex = 0;
    if (releaseIndex < 0)
 800b836:	2b00      	cmp	r3, #0
 800b838:	db33      	blt.n	800b8a2 <tADSR_initToPool+0x142>
        releaseIndex = 0;
    if (rampIndex < 0)
        rampIndex = 0;

    adsr->next = 0.0f;
 800b83a:	2400      	movs	r4, #0
 800b83c:	6104      	str	r4, [r0, #16]

    adsr->inRamp = OFALSE;
 800b83e:	2400      	movs	r4, #0
 800b840:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    adsr->inAttack = OFALSE;
 800b844:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    adsr->inDecay = OFALSE;
 800b848:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    adsr->inSustain = OFALSE;
 800b84c:	f880 4026 	strb.w	r4, [r0, #38]	; 0x26
    adsr->inRelease = OFALSE;
 800b850:	f880 4027 	strb.w	r4, [r0, #39]	; 0x27

    adsr->sustain = sustain;
 800b854:	edc0 9a0b 	vstr	s19, [r0, #44]	; 0x2c

    adsr->attackInc = adsr->inc_buff[attackIndex];
 800b858:	4c14      	ldr	r4, [pc, #80]	; (800b8ac <tADSR_initToPool+0x14c>)
 800b85a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800b85e:	6809      	ldr	r1, [r1, #0]
 800b860:	6141      	str	r1, [r0, #20]
    adsr->decayInc = adsr->inc_buff[decayIndex];
 800b862:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b866:	6812      	ldr	r2, [r2, #0]
 800b868:	6182      	str	r2, [r0, #24]
    adsr->releaseInc = adsr->inc_buff[releaseIndex];
 800b86a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	61c3      	str	r3, [r0, #28]
    adsr->rampInc = adsr->inc_buff[rampIndex];
 800b872:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b874:	6203      	str	r3, [r0, #32]

    adsr->leakFactor = 1.0f;
 800b876:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b87a:	64c3      	str	r3, [r0, #76]	; 0x4c
}
 800b87c:	ecbd 8b04 	vpop	{d8-d9}
 800b880:	bd38      	pop	{r3, r4, r5, pc}
        attack = 0.0f;
 800b882:	ed9f 9a0c 	vldr	s18, [pc, #48]	; 800b8b4 <tADSR_initToPool+0x154>
 800b886:	e793      	b.n	800b7b0 <tADSR_initToPool+0x50>
        decay = 0.0f;
 800b888:	eddf 8a0a 	vldr	s17, [pc, #40]	; 800b8b4 <tADSR_initToPool+0x154>
 800b88c:	e79e      	b.n	800b7cc <tADSR_initToPool+0x6c>
        sustain = 0.0f;
 800b88e:	eddf 9a09 	vldr	s19, [pc, #36]	; 800b8b4 <tADSR_initToPool+0x154>
 800b892:	e7a9      	b.n	800b7e8 <tADSR_initToPool+0x88>
        release = 0.0f;
 800b894:	ed9f 8a07 	vldr	s16, [pc, #28]	; 800b8b4 <tADSR_initToPool+0x154>
 800b898:	e7b4      	b.n	800b804 <tADSR_initToPool+0xa4>
        attackIndex = 0;
 800b89a:	2100      	movs	r1, #0
 800b89c:	e7c9      	b.n	800b832 <tADSR_initToPool+0xd2>
        decayIndex = 0;
 800b89e:	2200      	movs	r2, #0
 800b8a0:	e7c9      	b.n	800b836 <tADSR_initToPool+0xd6>
        releaseIndex = 0;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	e7c9      	b.n	800b83a <tADSR_initToPool+0xda>
 800b8a6:	bf00      	nop
 800b8a8:	08061780 	.word	0x08061780
 800b8ac:	08021780 	.word	0x08021780
 800b8b0:	46000000 	.word	0x46000000
 800b8b4:	00000000 	.word	0x00000000

0800b8b8 <tADSR_init>:
{
 800b8b8:	b508      	push	{r3, lr}
    tADSR_initToPool(adsrenv, attack, decay, sustain, release, &leaf.mempool);
 800b8ba:	4902      	ldr	r1, [pc, #8]	; (800b8c4 <tADSR_init+0xc>)
 800b8bc:	f7ff ff50 	bl	800b760 <tADSR_initToPool>
}
 800b8c0:	bd08      	pop	{r3, pc}
 800b8c2:	bf00      	nop
 800b8c4:	20013004 	.word	0x20013004

0800b8c8 <tADSR_setLeakFactor>:
}

// 0.999999 is slow leak, 0.9 is fast leak
void     tADSR_setLeakFactor(tADSR* const adsrenv, float leakFactor)
{
    _tADSR* adsr = *adsrenv;
 800b8c8:	6803      	ldr	r3, [r0, #0]


    adsr->leakFactor = leakFactor;
 800b8ca:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
 800b8ce:	4770      	bx	lr

0800b8d0 <tRampUpDown_initToPool>:
{
	tRampUpDown_initToPool(r, upTime, downTime, samples_per_tick, &leaf.mempool);
}

void    tRampUpDown_initToPool(tRampUpDown* const r, float upTime, float downTime, int samples_per_tick, tMempool* const mp)
{
 800b8d0:	b570      	push	{r4, r5, r6, lr}
 800b8d2:	ed2d 8b02 	vpush	{d8}
 800b8d6:	4606      	mov	r6, r0
 800b8d8:	eef0 8a40 	vmov.f32	s17, s0
 800b8dc:	eeb0 8a60 	vmov.f32	s16, s1
 800b8e0:	460c      	mov	r4, r1
    _tMempool* m = *mp;
 800b8e2:	6815      	ldr	r5, [r2, #0]
    _tRampUpDown* ramp = *r = (_tRampUpDown*) mpool_alloc(sizeof(_tRampUpDown), m);
 800b8e4:	4629      	mov	r1, r5
 800b8e6:	2028      	movs	r0, #40	; 0x28
 800b8e8:	f000 fbbe 	bl	800c068 <mpool_alloc>
 800b8ec:	6030      	str	r0, [r6, #0]
    ramp->mempool = m;
 800b8ee:	6005      	str	r5, [r0, #0]

    ramp->inv_sr_ms = 1.0f/(leaf.sampleRate*0.001f);
 800b8f0:	4b22      	ldr	r3, [pc, #136]	; (800b97c <tRampUpDown_initToPool+0xac>)
 800b8f2:	ed93 7a00 	vldr	s14, [r3]
 800b8f6:	eddf 7a22 	vldr	s15, [pc, #136]	; 800b980 <tRampUpDown_initToPool+0xb0>
 800b8fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b8fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b906:	edc0 7a03 	vstr	s15, [r0, #12]
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 800b90a:	ee07 4a10 	vmov	s14, r4
 800b90e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b912:	ee67 6a87 	vmul.f32	s13, s15, s14
 800b916:	edc0 6a04 	vstr	s13, [r0, #16]
    ramp->curr = 0.0f;
 800b91a:	2300      	movs	r3, #0
 800b91c:	6143      	str	r3, [r0, #20]
    ramp->dest = 0.0f;
 800b91e:	6183      	str	r3, [r0, #24]

    if (upTime < ramp->minimum_time)
 800b920:	eef4 6ae8 	vcmpe.f32	s13, s17
 800b924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b928:	dd22      	ble.n	800b970 <tRampUpDown_initToPool+0xa0>
    {
        ramp->upTime = ramp->minimum_time;
 800b92a:	edc0 6a07 	vstr	s13, [r0, #28]
    else
    {
        ramp->upTime = upTime;
    }

    if (downTime < ramp->minimum_time)
 800b92e:	eef4 6ac8 	vcmpe.f32	s13, s16
 800b932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b936:	dc1e      	bgt.n	800b976 <tRampUpDown_initToPool+0xa6>
    {
        ramp->downTime = ramp->minimum_time;
    }
    else
    {
        ramp->downTime = downTime;
 800b938:	ed80 8a08 	vstr	s16, [r0, #32]
    }

    ramp->samples_per_tick = samples_per_tick;
 800b93c:	6244      	str	r4, [r0, #36]	; 0x24
    ramp->upInc = ((ramp->dest - ramp->curr) / ramp->upTime * ramp->inv_sr_ms) * (float)ramp->samples_per_tick;
 800b93e:	edd0 5a07 	vldr	s11, [r0, #28]
 800b942:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800b984 <tRampUpDown_initToPool+0xb4>
 800b946:	eec6 6a25 	vdiv.f32	s13, s12, s11
 800b94a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b94e:	ee67 6a26 	vmul.f32	s13, s14, s13
 800b952:	edc0 6a01 	vstr	s13, [r0, #4]
    ramp->downInc = ((ramp->dest - ramp->curr) / ramp->downTime * ramp->inv_sr_ms) * (float)ramp->samples_per_tick;
 800b956:	edd0 5a08 	vldr	s11, [r0, #32]
 800b95a:	eec6 6a25 	vdiv.f32	s13, s12, s11
 800b95e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b962:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b966:	edc0 7a02 	vstr	s15, [r0, #8]
}
 800b96a:	ecbd 8b02 	vpop	{d8}
 800b96e:	bd70      	pop	{r4, r5, r6, pc}
        ramp->upTime = upTime;
 800b970:	edc0 8a07 	vstr	s17, [r0, #28]
 800b974:	e7db      	b.n	800b92e <tRampUpDown_initToPool+0x5e>
        ramp->downTime = ramp->minimum_time;
 800b976:	edc0 6a08 	vstr	s13, [r0, #32]
 800b97a:	e7df      	b.n	800b93c <tRampUpDown_initToPool+0x6c>
 800b97c:	20012fec 	.word	0x20012fec
 800b980:	3a83126f 	.word	0x3a83126f
 800b984:	00000000 	.word	0x00000000

0800b988 <tRampUpDown_init>:
{
 800b988:	b508      	push	{r3, lr}
	tRampUpDown_initToPool(r, upTime, downTime, samples_per_tick, &leaf.mempool);
 800b98a:	4a02      	ldr	r2, [pc, #8]	; (800b994 <tRampUpDown_init+0xc>)
 800b98c:	f7ff ffa0 	bl	800b8d0 <tRampUpDown_initToPool>
}
 800b990:	bd08      	pop	{r3, pc}
 800b992:	bf00      	nop
 800b994:	20013004 	.word	0x20013004

0800b998 <tExpSmooth_initToPool>:
{	// factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf.mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, float val, float factor, tMempool* const mp)
{
 800b998:	b538      	push	{r3, r4, r5, lr}
 800b99a:	ed2d 8b02 	vpush	{d8}
 800b99e:	4605      	mov	r5, r0
 800b9a0:	eef0 8a40 	vmov.f32	s17, s0
 800b9a4:	eeb0 8a60 	vmov.f32	s16, s1
    _tMempool* m = *mp;
 800b9a8:	680c      	ldr	r4, [r1, #0]
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 800b9aa:	4621      	mov	r1, r4
 800b9ac:	2014      	movs	r0, #20
 800b9ae:	f000 fb5b 	bl	800c068 <mpool_alloc>
 800b9b2:	6028      	str	r0, [r5, #0]
    smooth->mempool = m;
 800b9b4:	6004      	str	r4, [r0, #0]
    
    smooth->curr=val;
 800b9b6:	edc0 8a03 	vstr	s17, [r0, #12]
    smooth->dest=val;
 800b9ba:	edc0 8a04 	vstr	s17, [r0, #16]
    if (factor<0) factor=0;
 800b9be:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9c6:	d413      	bmi.n	800b9f0 <tExpSmooth_initToPool+0x58>
    if (factor>1) factor=1;
 800b9c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b9cc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9d4:	dd01      	ble.n	800b9da <tExpSmooth_initToPool+0x42>
 800b9d6:	eeb0 8a67 	vmov.f32	s16, s15
    smooth->factor=factor;
 800b9da:	ed80 8a01 	vstr	s16, [r0, #4]
    smooth->oneminusfactor=1.0f-factor;
 800b9de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b9e2:	ee37 8ac8 	vsub.f32	s16, s15, s16
 800b9e6:	ed80 8a02 	vstr	s16, [r0, #8]
}
 800b9ea:	ecbd 8b02 	vpop	{d8}
 800b9ee:	bd38      	pop	{r3, r4, r5, pc}
    if (factor<0) factor=0;
 800b9f0:	ed9f 8a01 	vldr	s16, [pc, #4]	; 800b9f8 <tExpSmooth_initToPool+0x60>
 800b9f4:	e7e8      	b.n	800b9c8 <tExpSmooth_initToPool+0x30>
 800b9f6:	bf00      	nop
 800b9f8:	00000000 	.word	0x00000000

0800b9fc <tExpSmooth_init>:
{	// factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 800b9fc:	b508      	push	{r3, lr}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf.mempool);
 800b9fe:	4902      	ldr	r1, [pc, #8]	; (800ba08 <tExpSmooth_init+0xc>)
 800ba00:	f7ff ffca 	bl	800b998 <tExpSmooth_initToPool>
}
 800ba04:	bd08      	pop	{r3, pc}
 800ba06:	bf00      	nop
 800ba08:	20013004 	.word	0x20013004

0800ba0c <tSlide_initToPool>:
{
	tSlide_initToPool    (sl, upSlide, downSlide, &leaf.mempool);
}

void    tSlide_initToPool    (tSlide* const sl, float upSlide, float downSlide, tMempool* const mp)
{
 800ba0c:	b538      	push	{r3, r4, r5, lr}
 800ba0e:	ed2d 8b02 	vpush	{d8}
 800ba12:	4605      	mov	r5, r0
 800ba14:	eef0 8a40 	vmov.f32	s17, s0
 800ba18:	eeb0 8a60 	vmov.f32	s16, s1
    _tMempool* m = *mp;
 800ba1c:	680c      	ldr	r4, [r1, #0]
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 800ba1e:	4621      	mov	r1, r4
 800ba20:	201c      	movs	r0, #28
 800ba22:	f000 fb21 	bl	800c068 <mpool_alloc>
 800ba26:	6028      	str	r0, [r5, #0]
    s->mempool = m;
 800ba28:	6004      	str	r4, [r0, #0]
    
    s->prevIn = 0.0f;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 800ba2e:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 800ba30:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 800ba32:	6183      	str	r3, [r0, #24]
    if (upSlide < 1.0f)
 800ba34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ba38:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ba3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba40:	d413      	bmi.n	800ba6a <tSlide_initToPool+0x5e>
    {
    	upSlide = 1.0f;
    }

    if (downSlide < 1.0f)
 800ba42:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ba46:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ba4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba4e:	d40f      	bmi.n	800ba70 <tSlide_initToPool+0x64>
    {
    	downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 800ba50:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ba54:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800ba58:	ed80 7a04 	vstr	s14, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 800ba5c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800ba60:	ed80 7a05 	vstr	s14, [r0, #20]
}
 800ba64:	ecbd 8b02 	vpop	{d8}
 800ba68:	bd38      	pop	{r3, r4, r5, pc}
    	upSlide = 1.0f;
 800ba6a:	eef0 8a67 	vmov.f32	s17, s15
 800ba6e:	e7e8      	b.n	800ba42 <tSlide_initToPool+0x36>
    	downSlide = 1.0f;
 800ba70:	eeb0 8a67 	vmov.f32	s16, s15
 800ba74:	e7ec      	b.n	800ba50 <tSlide_initToPool+0x44>
	...

0800ba78 <tSlide_init>:
{
 800ba78:	b508      	push	{r3, lr}
	tSlide_initToPool    (sl, upSlide, downSlide, &leaf.mempool);
 800ba7a:	4902      	ldr	r1, [pc, #8]	; (800ba84 <tSlide_init+0xc>)
 800ba7c:	f7ff ffc6 	bl	800ba0c <tSlide_initToPool>
}
 800ba80:	bd08      	pop	{r3, pc}
 800ba82:	bf00      	nop
 800ba84:	20013004 	.word	0x20013004

0800ba88 <tSVF_initToPool>:
     */

}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, float freq, float Q, tMempool* const mp)
{
 800ba88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba8a:	ed2d 8b02 	vpush	{d8}
 800ba8e:	4607      	mov	r7, r0
 800ba90:	460e      	mov	r6, r1
 800ba92:	eeb0 8a40 	vmov.f32	s16, s0
 800ba96:	eef0 8a60 	vmov.f32	s17, s1
    _tMempool* m = *mp;
 800ba9a:	6815      	ldr	r5, [r2, #0]
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 800ba9c:	4629      	mov	r1, r5
 800ba9e:	203c      	movs	r0, #60	; 0x3c
 800baa0:	f000 fae2 	bl	800c068 <mpool_alloc>
 800baa4:	4604      	mov	r4, r0
 800baa6:	6038      	str	r0, [r7, #0]
    svf->mempool = m;
 800baa8:	6005      	str	r5, [r0, #0]

    svf->type = type;
 800baaa:	7106      	strb	r6, [r0, #4]

    svf->ic1eq = 0;
 800baac:	2500      	movs	r5, #0
 800baae:	6105      	str	r5, [r0, #16]
    svf->ic2eq = 0;
 800bab0:	6145      	str	r5, [r0, #20]
    svf->Q = Q;
 800bab2:	edc0 8a03 	vstr	s17, [r0, #12]
    svf->cutoff = freq;
 800bab6:	ed80 8a02 	vstr	s16, [r0, #8]
    svf->g = tanf(PI * freq * leaf.invSampleRate);
 800baba:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 800bb64 <tSVF_initToPool+0xdc>
 800babe:	ee28 8a00 	vmul.f32	s16, s16, s0
 800bac2:	4b29      	ldr	r3, [pc, #164]	; (800bb68 <tSVF_initToPool+0xe0>)
 800bac4:	ed93 0a01 	vldr	s0, [r3, #4]
 800bac8:	ee28 0a00 	vmul.f32	s0, s16, s0
 800bacc:	f000 ff8e 	bl	800c9ec <tanf>
 800bad0:	ed84 0a06 	vstr	s0, [r4, #24]
    svf->k = 1.0f/Q;
 800bad4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bad8:	eec6 7aa8 	vdiv.f32	s15, s13, s17
 800badc:	edc4 7a07 	vstr	s15, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800bae0:	ee70 7a27 	vadd.f32	s15, s0, s15
 800bae4:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bae8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800baf0:	ed84 7a08 	vstr	s14, [r4, #32]
    svf->a2 = svf->g*svf->a1;
 800baf4:	ee60 7a07 	vmul.f32	s15, s0, s14
 800baf8:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
 800bafc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bb00:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    svf->cH = 0.0f;
 800bb04:	62e5      	str	r5, [r4, #44]	; 0x2c
    svf->cB = 0.0f;
 800bb06:	6325      	str	r5, [r4, #48]	; 0x30
    svf->cL = 1.0f;
 800bb08:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34

    if (type == SVFTypeLowpass)
 800bb0c:	2e01      	cmp	r6, #1
 800bb0e:	d00f      	beq.n	800bb30 <tSVF_initToPool+0xa8>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
 800bb10:	2e02      	cmp	r6, #2
 800bb12:	d011      	beq.n	800bb38 <tSVF_initToPool+0xb0>
        svf->cB = 1.0f;
        svf->cBK = 0.0f;
        svf->cL = 0.0f;
    }

    else if (type == SVFTypeHighpass)
 800bb14:	b1be      	cbz	r6, 800bb46 <tSVF_initToPool+0xbe>
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = -1.0f;
    }

    else if (type == SVFTypeNotch)
 800bb16:	2e03      	cmp	r6, #3
 800bb18:	d01c      	beq.n	800bb54 <tSVF_initToPool+0xcc>
        svf->cBK = -1.0f;
        svf->cL = 0.0f;
    }


    else if (type == SVFTypePeak)
 800bb1a:	2e04      	cmp	r6, #4
 800bb1c:	d109      	bne.n	800bb32 <tSVF_initToPool+0xaa>
    {
        svf->cH = 1.0f;
 800bb1e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bb22:	62e3      	str	r3, [r4, #44]	; 0x2c
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
 800bb24:	4b11      	ldr	r3, [pc, #68]	; (800bb6c <tSVF_initToPool+0xe4>)
 800bb26:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = -2.0f;
 800bb28:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800bb2c:	6363      	str	r3, [r4, #52]	; 0x34
    }
}
 800bb2e:	e000      	b.n	800bb32 <tSVF_initToPool+0xaa>
        svf->cBK = 0.0f;
 800bb30:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800bb32:	ecbd 8b02 	vpop	{d8}
 800bb36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cB = 1.0f;
 800bb38:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bb3c:	6323      	str	r3, [r4, #48]	; 0x30
        svf->cBK = 0.0f;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = 0.0f;
 800bb42:	6363      	str	r3, [r4, #52]	; 0x34
 800bb44:	e7f5      	b.n	800bb32 <tSVF_initToPool+0xaa>
        svf->cH = 1.0f;
 800bb46:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bb4a:	62e3      	str	r3, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
 800bb4c:	4b07      	ldr	r3, [pc, #28]	; (800bb6c <tSVF_initToPool+0xe4>)
 800bb4e:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = -1.0f;
 800bb50:	6363      	str	r3, [r4, #52]	; 0x34
 800bb52:	e7ee      	b.n	800bb32 <tSVF_initToPool+0xaa>
        svf->cH = 1.0f;
 800bb54:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bb58:	62e3      	str	r3, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
 800bb5a:	4b04      	ldr	r3, [pc, #16]	; (800bb6c <tSVF_initToPool+0xe4>)
 800bb5c:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = 0.0f;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	6363      	str	r3, [r4, #52]	; 0x34
 800bb62:	e7e6      	b.n	800bb32 <tSVF_initToPool+0xaa>
 800bb64:	40490fdb 	.word	0x40490fdb
 800bb68:	20012fec 	.word	0x20012fec
 800bb6c:	bf800000 	.word	0xbf800000

0800bb70 <tSVF_init>:
{
 800bb70:	b508      	push	{r3, lr}
    tSVF_initToPool     (svff, type, freq, Q, &leaf.mempool);
 800bb72:	4a02      	ldr	r2, [pc, #8]	; (800bb7c <tSVF_init+0xc>)
 800bb74:	f7ff ff88 	bl	800ba88 <tSVF_initToPool>
}
 800bb78:	bd08      	pop	{r3, pc}
 800bb7a:	bf00      	nop
 800bb7c:	20013004 	.word	0x20013004

0800bb80 <tHighpass_initToPool>:
{
    tHighpass_initToPool(ft, freq, &leaf.mempool);
}

void    tHighpass_initToPool    (tHighpass* const ft, float freq, tMempool* const mp)
{
 800bb80:	b538      	push	{r3, r4, r5, lr}
 800bb82:	ed2d 8b02 	vpush	{d8}
 800bb86:	4605      	mov	r5, r0
 800bb88:	eeb0 8a40 	vmov.f32	s16, s0
    _tMempool* m = *mp;
 800bb8c:	680c      	ldr	r4, [r1, #0]
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 800bb8e:	4621      	mov	r1, r4
 800bb90:	2014      	movs	r0, #20
 800bb92:	f000 fabd 	bl	800c110 <mpool_calloc>
 800bb96:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 800bb98:	6004      	str	r4, [r0, #0]
    
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 800bb9a:	4b09      	ldr	r3, [pc, #36]	; (800bbc0 <tHighpass_initToPool+0x40>)
 800bb9c:	edd3 7a03 	vldr	s15, [r3, #12]
 800bba0:	ee27 7a88 	vmul.f32	s14, s15, s16
 800bba4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bba8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bbac:	edc0 7a03 	vstr	s15, [r0, #12]
    f->ys = 0.0f;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	6083      	str	r3, [r0, #8]
    f->xs = 0.0f;
 800bbb4:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
 800bbb6:	ed80 8a04 	vstr	s16, [r0, #16]
}
 800bbba:	ecbd 8b02 	vpop	{d8}
 800bbbe:	bd38      	pop	{r3, r4, r5, pc}
 800bbc0:	20012fec 	.word	0x20012fec

0800bbc4 <tHighpass_init>:
{
 800bbc4:	b508      	push	{r3, lr}
    tHighpass_initToPool(ft, freq, &leaf.mempool);
 800bbc6:	4902      	ldr	r1, [pc, #8]	; (800bbd0 <tHighpass_init+0xc>)
 800bbc8:	f7ff ffda 	bl	800bb80 <tHighpass_initToPool>
}
 800bbcc:	bd08      	pop	{r3, pc}
 800bbce:	bf00      	nop
 800bbd0:	20013004 	.word	0x20013004

0800bbd4 <tVZFilter_BandwidthToR>:
	f->type = type;
	tVZFilter_calcCoeffs(vf);
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
 800bbd4:	b510      	push	{r4, lr}
 800bbd6:	ed2d 8b02 	vpush	{d8}
	_tVZFilter* f = *vf;
 800bbda:	6804      	ldr	r4, [r0, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800bbdc:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 800bbe0:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800bbe4:	ee60 0a60 	vnmul.f32	s1, s0, s1
 800bbe8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800bbec:	f000 fdc0 	bl	800c770 <powf>
 800bbf0:	ee28 0a00 	vmul.f32	s0, s16, s0
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 800bbf4:	ed9f 8a11 	vldr	s16, [pc, #68]	; 800bc3c <tVZFilter_BandwidthToR+0x68>
 800bbf8:	ee20 0a08 	vmul.f32	s0, s0, s16
 800bbfc:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 800bc00:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bc04:	f000 fef2 	bl	800c9ec <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800bc08:	edd4 7a04 	vldr	s15, [r4, #16]
 800bc0c:	ee80 7a27 	vdiv.f32	s14, s0, s15
							   // unwarped: r = pow(2, -B/2) -> approximation for low
							   // center-frequencies
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800bc10:	ee27 0a07 	vmul.f32	s0, s14, s14
 800bc14:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bc18:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bc1c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bc20:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 800bc24:	ee27 0a00 	vmul.f32	s0, s14, s0
 800bc28:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bc2c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800bc30:	f000 ffe2 	bl	800cbf8 <sqrtf>
}
 800bc34:	ecbd 8b02 	vpop	{d8}
 800bc38:	bd10      	pop	{r4, pc}
 800bc3a:	bf00      	nop
 800bc3c:	40490fdb 	.word	0x40490fdb

0800bc40 <tVZFilter_calcCoeffs>:
{
 800bc40:	b538      	push	{r3, r4, r5, lr}
 800bc42:	ed2d 8b04 	vpush	{d8-d9}
 800bc46:	4605      	mov	r5, r0
	_tVZFilter* f = *vf;
 800bc48:	6804      	ldr	r4, [r0, #0]
	f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 800bc4a:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 800bc4e:	eddf 7ab4 	vldr	s15, [pc, #720]	; 800bf20 <tVZFilter_calcCoeffs+0x2e0>
 800bc52:	ee68 7a27 	vmul.f32	s15, s16, s15
 800bc56:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 800bc5a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bc5e:	f000 fec5 	bl	800c9ec <tanf>
 800bc62:	ed84 0a04 	vstr	s0, [r4, #16]
	  switch( f->type )
 800bc66:	7923      	ldrb	r3, [r4, #4]
 800bc68:	2b0a      	cmp	r3, #10
 800bc6a:	d813      	bhi.n	800bc94 <tVZFilter_calcCoeffs+0x54>
 800bc6c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bc70:	00270030 	.word	0x00270030
 800bc74:	00420039 	.word	0x00420039
 800bc78:	00610051 	.word	0x00610051
 800bc7c:	00ca00a2 	.word	0x00ca00a2
 800bc80:	000b0104 	.word	0x000b0104
 800bc84:	00f2      	.short	0x00f2
		  f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 800bc86:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bc88:	6162      	str	r2, [r4, #20]
		  f->cL = 1.0f;
 800bc8a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bc8e:	61e3      	str	r3, [r4, #28]
		  f->cB = f->R2;
 800bc90:	6222      	str	r2, [r4, #32]
		  f->cH = 1.0f;
 800bc92:	6263      	str	r3, [r4, #36]	; 0x24
	  f->h = 1.0f / (1.0f + f->R2*f->g + f->g*f->g);  // factor for feedback precomputation
 800bc94:	edd4 7a05 	vldr	s15, [r4, #20]
 800bc98:	ed94 7a04 	vldr	s14, [r4, #16]
 800bc9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bca0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bca4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bca8:	ee27 7a07 	vmul.f32	s14, s14, s14
 800bcac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bcb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcb4:	ed84 7a06 	vstr	s14, [r4, #24]
}
 800bcb8:	ecbd 8b04 	vpop	{d8-d9}
 800bcbc:	bd38      	pop	{r3, r4, r5, pc}
			f->R2 = f->invG;
 800bcbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bcc0:	6163      	str	r3, [r4, #20]
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800bcc2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bcc6:	61e3      	str	r3, [r4, #28]
 800bcc8:	2300      	movs	r3, #0
 800bcca:	6223      	str	r3, [r4, #32]
 800bccc:	6263      	str	r3, [r4, #36]	; 0x24
		break;
 800bcce:	e7e1      	b.n	800bc94 <tVZFilter_calcCoeffs+0x54>
			f->R2 = f->invG;
 800bcd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bcd2:	6163      	str	r3, [r4, #20]
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	61e3      	str	r3, [r4, #28]
 800bcd8:	6223      	str	r3, [r4, #32]
 800bcda:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bcde:	6263      	str	r3, [r4, #36]	; 0x24
		break;
 800bce0:	e7d8      	b.n	800bc94 <tVZFilter_calcCoeffs+0x54>
			f->R2 = f->invG;
 800bce2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bce4:	6163      	str	r3, [r4, #20]
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800bce6:	2300      	movs	r3, #0
 800bce8:	61e3      	str	r3, [r4, #28]
 800bcea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800bcee:	6222      	str	r2, [r4, #32]
 800bcf0:	6263      	str	r3, [r4, #36]	; 0x24
		break;
 800bcf2:	e7cf      	b.n	800bc94 <tVZFilter_calcCoeffs+0x54>
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800bcf4:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 800bcf8:	4628      	mov	r0, r5
 800bcfa:	f7ff ff6b 	bl	800bbd4 <tVZFilter_BandwidthToR>
 800bcfe:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bd02:	ed84 0a05 	vstr	s0, [r4, #20]
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 800bd06:	2300      	movs	r3, #0
 800bd08:	61e3      	str	r3, [r4, #28]
 800bd0a:	ed84 0a08 	vstr	s0, [r4, #32]
 800bd0e:	6263      	str	r3, [r4, #36]	; 0x24
		break;
 800bd10:	e7c0      	b.n	800bc94 <tVZFilter_calcCoeffs+0x54>
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800bd12:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 800bd16:	4628      	mov	r0, r5
 800bd18:	f7ff ff5c 	bl	800bbd4 <tVZFilter_BandwidthToR>
 800bd1c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bd20:	ed84 0a05 	vstr	s0, [r4, #20]
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800bd24:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bd28:	61e3      	str	r3, [r4, #28]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	6222      	str	r2, [r4, #32]
 800bd2e:	6263      	str	r3, [r4, #36]	; 0x24
		break;
 800bd30:	e7b0      	b.n	800bc94 <tVZFilter_calcCoeffs+0x54>
			float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 800bd32:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
 800bd36:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bd3a:	ee60 0ae7 	vnmul.f32	s1, s1, s15
 800bd3e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800bd42:	f000 fd15 	bl	800c770 <powf>
 800bd46:	ee28 0a00 	vmul.f32	s0, s16, s0
			float wl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 800bd4a:	ed9f 8a75 	vldr	s16, [pc, #468]	; 800bf20 <tVZFilter_calcCoeffs+0x2e0>
 800bd4e:	ee20 0a08 	vmul.f32	s0, s0, s16
 800bd52:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 800bd56:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bd5a:	f000 fe47 	bl	800c9ec <tanf>
			float r  = f->g/wl;
 800bd5e:	edd4 7a04 	vldr	s15, [r4, #16]
 800bd62:	ee87 0a80 	vdiv.f32	s0, s15, s0
			r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 800bd66:	ee20 0a00 	vmul.f32	s0, s0, s0
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800bd6a:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bd6e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800bd72:	ee37 7a08 	vadd.f32	s14, s14, s16
 800bd76:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bd7a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800bd7e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800bd82:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800bd86:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800bd8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd8e:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800bd92:	f000 ff31 	bl	800cbf8 <sqrtf>
 800bd96:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bd9a:	ed84 0a05 	vstr	s0, [r4, #20]
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800bd9e:	ed84 8a07 	vstr	s16, [r4, #28]
 800bda2:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800bda6:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bdaa:	ed84 0a08 	vstr	s0, [r4, #32]
 800bdae:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
		break;
 800bdb2:	e76f      	b.n	800bc94 <tVZFilter_calcCoeffs+0x54>
			float A = sqrtf(f->G);
 800bdb4:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 800bdb8:	f000 ff1e 	bl	800cbf8 <sqrtf>
 800bdbc:	eeb0 8a40 	vmov.f32	s16, s0
		  f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800bdc0:	f000 ff1a 	bl	800cbf8 <sqrtf>
 800bdc4:	edd4 7a04 	vldr	s15, [r4, #16]
 800bdc8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800bdcc:	ed84 0a04 	vstr	s0, [r4, #16]
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 800bdd0:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800bdd4:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800bf24 <tVZFilter_calcCoeffs+0x2e4>
 800bdd8:	ee67 7a80 	vmul.f32	s15, s15, s0
 800bddc:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800bde0:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bde4:	f000 fe9c 	bl	800cb20 <sinhf>
 800bde8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bdec:	ed84 0a05 	vstr	s0, [r4, #20]
		  f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 800bdf0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bdf2:	61e3      	str	r3, [r4, #28]
 800bdf4:	ee20 0a08 	vmul.f32	s0, s0, s16
 800bdf8:	ed84 0a08 	vstr	s0, [r4, #32]
 800bdfc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800be00:	6263      	str	r3, [r4, #36]	; 0x24
		break;
 800be02:	e747      	b.n	800bc94 <tVZFilter_calcCoeffs+0x54>
		  float A = sqrtf(f->G);
 800be04:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 800be08:	f000 fef6 	bl	800cbf8 <sqrtf>
 800be0c:	eeb0 8a40 	vmov.f32	s16, s0
		  f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800be10:	f000 fef2 	bl	800cbf8 <sqrtf>
 800be14:	edd4 7a04 	vldr	s15, [r4, #16]
 800be18:	ee27 0a80 	vmul.f32	s0, s15, s0
 800be1c:	ed84 0a04 	vstr	s0, [r4, #16]
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 800be20:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800be24:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 800bf24 <tVZFilter_calcCoeffs+0x2e4>
 800be28:	ee67 7a80 	vmul.f32	s15, s15, s0
 800be2c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800be30:	ee27 0a80 	vmul.f32	s0, s15, s0
 800be34:	f000 fe74 	bl	800cb20 <sinhf>
 800be38:	ee30 0a00 	vadd.f32	s0, s0, s0
 800be3c:	ed84 0a05 	vstr	s0, [r4, #20]
		  f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 800be40:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800be44:	61e3      	str	r3, [r4, #28]
 800be46:	ee20 0a08 	vmul.f32	s0, s0, s16
 800be4a:	ed84 0a08 	vstr	s0, [r4, #32]
 800be4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800be50:	6263      	str	r3, [r4, #36]	; 0x24
		break;
 800be52:	e71f      	b.n	800bc94 <tVZFilter_calcCoeffs+0x54>
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800be54:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 800be58:	4628      	mov	r0, r5
 800be5a:	f7ff febb 	bl	800bbd4 <tVZFilter_BandwidthToR>
 800be5e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800be62:	ed84 0a05 	vstr	s0, [r4, #20]
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800be66:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800be6a:	61e3      	str	r3, [r4, #28]
 800be6c:	eeb1 0a40 	vneg.f32	s0, s0
 800be70:	ed84 0a08 	vstr	s0, [r4, #32]
 800be74:	6263      	str	r3, [r4, #36]	; 0x24
		break;
 800be76:	e70d      	b.n	800bc94 <tVZFilter_calcCoeffs+0x54>
			f->R2 = f->invG;
 800be78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800be7a:	6163      	str	r3, [r4, #20]
		  float x  = 2.0f*f->m-1.0f;
 800be7c:	ed94 8a0e 	vldr	s16, [r4, #56]	; 0x38
 800be80:	ee38 8a08 	vadd.f32	s16, s16, s16
 800be84:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800be88:	ee38 8a68 	vsub.f32	s16, s16, s17
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800be8c:	ed9f 9a26 	vldr	s18, [pc, #152]	; 800bf28 <tVZFilter_calcCoeffs+0x2e8>
 800be90:	eef0 0a49 	vmov.f32	s1, s18
 800be94:	eeb1 0a48 	vneg.f32	s0, s16
 800be98:	f000 f8aa 	bl	800bff0 <maximum>
 800be9c:	ed84 0a07 	vstr	s0, [r4, #28]
		  f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800bea0:	eef0 0a49 	vmov.f32	s1, s18
 800bea4:	eeb0 0a48 	vmov.f32	s0, s16
 800bea8:	f000 f8ad 	bl	800c006 <minimum>
 800beac:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
		  f->cB = 1.0f-x*x;
 800beb0:	ee28 8a08 	vmul.f32	s16, s16, s16
 800beb4:	ee38 8ac8 	vsub.f32	s16, s17, s16
 800beb8:	ed84 8a08 	vstr	s16, [r4, #32]
		  float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 800bebc:	edd4 8a0b 	vldr	s17, [r4, #44]	; 0x2c
 800bec0:	edd4 7a05 	vldr	s15, [r4, #20]
 800bec4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800bec8:	ed94 7a07 	vldr	s14, [r4, #28]
 800becc:	ee67 7a07 	vmul.f32	s15, s14, s14
 800bed0:	ee28 8a08 	vmul.f32	s16, s16, s16
 800bed4:	ee37 8a88 	vadd.f32	s16, s15, s16
 800bed8:	ee60 7a00 	vmul.f32	s15, s0, s0
 800bedc:	ee38 8a27 	vadd.f32	s16, s16, s15
 800bee0:	ee37 7a07 	vadd.f32	s14, s14, s14
 800bee4:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bee8:	ee38 0a40 	vsub.f32	s0, s16, s0
 800beec:	ee86 0a80 	vdiv.f32	s0, s13, s0
 800bef0:	f000 fe82 	bl	800cbf8 <sqrtf>
 800bef4:	ee28 0a80 	vmul.f32	s0, s17, s0
		  f->cL *= s; f->cB *= s; f->cH *= s;
 800bef8:	edd4 7a07 	vldr	s15, [r4, #28]
 800befc:	ee67 7a80 	vmul.f32	s15, s15, s0
 800bf00:	edc4 7a07 	vstr	s15, [r4, #28]
 800bf04:	edd4 7a08 	vldr	s15, [r4, #32]
 800bf08:	ee67 7a80 	vmul.f32	s15, s15, s0
 800bf0c:	edc4 7a08 	vstr	s15, [r4, #32]
 800bf10:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 800bf14:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bf18:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
		break;
 800bf1c:	e6ba      	b.n	800bc94 <tVZFilter_calcCoeffs+0x54>
 800bf1e:	bf00      	nop
 800bf20:	40490fdb 	.word	0x40490fdb
 800bf24:	3f317218 	.word	0x3f317218
 800bf28:	00000000 	.word	0x00000000

0800bf2c <tVZFilter_initToPool>:
{
 800bf2c:	b570      	push	{r4, r5, r6, lr}
 800bf2e:	ed2d 8b02 	vpush	{d8}
 800bf32:	4604      	mov	r4, r0
 800bf34:	460e      	mov	r6, r1
 800bf36:	eef0 8a40 	vmov.f32	s17, s0
 800bf3a:	eeb0 8a60 	vmov.f32	s16, s1
    _tMempool* m = *mp;
 800bf3e:	6815      	ldr	r5, [r2, #0]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 800bf40:	4629      	mov	r1, r5
 800bf42:	2044      	movs	r0, #68	; 0x44
 800bf44:	f000 f890 	bl	800c068 <mpool_alloc>
 800bf48:	6020      	str	r0, [r4, #0]
    f->mempool = m;
 800bf4a:	6005      	str	r5, [r0, #0]
	f->fc   = freq;
 800bf4c:	edc0 8a0a 	vstr	s17, [r0, #40]	; 0x28
	f->type = type;
 800bf50:	7106      	strb	r6, [r0, #4]
	f->G    = ONE_OVER_SQRT2;
 800bf52:	4b0a      	ldr	r3, [pc, #40]	; (800bf7c <tVZFilter_initToPool+0x50>)
 800bf54:	62c3      	str	r3, [r0, #44]	; 0x2c
	f->invG    = 1.0f/ONE_OVER_SQRT2;
 800bf56:	4b0a      	ldr	r3, [pc, #40]	; (800bf80 <tVZFilter_initToPool+0x54>)
 800bf58:	6303      	str	r3, [r0, #48]	; 0x30
	f->B    = bandWidth;
 800bf5a:	ed80 8a0d 	vstr	s16, [r0, #52]	; 0x34
	f->m    = 0.0f;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	6383      	str	r3, [r0, #56]	; 0x38
	f->s1 = 0.0f;
 800bf62:	6083      	str	r3, [r0, #8]
	f->s2 = 0.0f;
 800bf64:	60c3      	str	r3, [r0, #12]
	f->sr = leaf.sampleRate;
 800bf66:	4b07      	ldr	r3, [pc, #28]	; (800bf84 <tVZFilter_initToPool+0x58>)
 800bf68:	681a      	ldr	r2, [r3, #0]
 800bf6a:	63c2      	str	r2, [r0, #60]	; 0x3c
	f->inv_sr = leaf.invSampleRate;
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	6403      	str	r3, [r0, #64]	; 0x40
	tVZFilter_calcCoeffs(vf);
 800bf70:	4620      	mov	r0, r4
 800bf72:	f7ff fe65 	bl	800bc40 <tVZFilter_calcCoeffs>
}
 800bf76:	ecbd 8b02 	vpop	{d8}
 800bf7a:	bd70      	pop	{r4, r5, r6, pc}
 800bf7c:	3f3504f3 	.word	0x3f3504f3
 800bf80:	3fb504f3 	.word	0x3fb504f3
 800bf84:	20012fec 	.word	0x20012fec

0800bf88 <tVZFilter_init>:
{
 800bf88:	b508      	push	{r3, lr}
	tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf.mempool);
 800bf8a:	4a02      	ldr	r2, [pc, #8]	; (800bf94 <tVZFilter_init+0xc>)
 800bf8c:	f7ff ffce 	bl	800bf2c <tVZFilter_initToPool>
}
 800bf90:	bd08      	pop	{r3, pc}
 800bf92:	bf00      	nop
 800bf94:	20013004 	.word	0x20013004

0800bf98 <atodb>:
    return (expf((LOGTEN * 0.05f) * (f-100.0f)));
}


float atodb(float a)
{
 800bf98:	b508      	push	{r3, lr}
    return 20.0f*log10f(a);
 800bf9a:	f000 fd4f 	bl	800ca3c <log10f>
}
 800bf9e:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 800bfa2:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bfa6:	bd08      	pop	{r3, pc}

0800bfa8 <LEAF_generate_atodb>:
{
 800bfa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfaa:	ed2d 8b02 	vpush	{d8}
 800bfae:	4607      	mov	r7, r0
 800bfb0:	460e      	mov	r6, r1
    float increment = 1.0f / (float)size;
 800bfb2:	ee07 1a90 	vmov	s15, r1
 800bfb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bfba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bfbe:	eec7 8a27 	vdiv.f32	s17, s14, s15
    for (int i = 0; i < size; i++)
 800bfc2:	2400      	movs	r4, #0
    float x = 0.0f;
 800bfc4:	ed9f 8a09 	vldr	s16, [pc, #36]	; 800bfec <LEAF_generate_atodb+0x44>
    for (int i = 0; i < size; i++)
 800bfc8:	e00a      	b.n	800bfe0 <LEAF_generate_atodb+0x38>
        buffer[i] = atodb(x);
 800bfca:	eb07 0584 	add.w	r5, r7, r4, lsl #2
 800bfce:	eeb0 0a48 	vmov.f32	s0, s16
 800bfd2:	f7ff ffe1 	bl	800bf98 <atodb>
 800bfd6:	ed85 0a00 	vstr	s0, [r5]
        x += increment;
 800bfda:	ee38 8a28 	vadd.f32	s16, s16, s17
    for (int i = 0; i < size; i++)
 800bfde:	3401      	adds	r4, #1
 800bfe0:	42b4      	cmp	r4, r6
 800bfe2:	dbf2      	blt.n	800bfca <LEAF_generate_atodb+0x22>
}
 800bfe4:	ecbd 8b02 	vpop	{d8}
 800bfe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfea:	bf00      	nop
 800bfec:	00000000 	.word	0x00000000

0800bff0 <maximum>:
}


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
 800bff0:	eeb4 0ae0 	vcmpe.f32	s0, s1
 800bff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bff8:	dc02      	bgt.n	800c000 <maximum+0x10>
}
 800bffa:	eeb0 0a60 	vmov.f32	s0, s1
 800bffe:	4770      	bx	lr
    return (num1 > num2 ) ? num1 : num2;
 800c000:	eef0 0a40 	vmov.f32	s1, s0
 800c004:	e7f9      	b.n	800bffa <maximum+0xa>

0800c006 <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
 800c006:	eeb4 0ae0 	vcmpe.f32	s0, s1
 800c00a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c00e:	d402      	bmi.n	800c016 <minimum+0x10>
}
 800c010:	eeb0 0a60 	vmov.f32	s0, s1
 800c014:	4770      	bx	lr
    return (num1 < num2 ) ? num1 : num2;
 800c016:	eef0 0a40 	vmov.f32	s1, s0
 800c01a:	e7f9      	b.n	800c010 <minimum+0xa>

0800c01c <mpool_create>:

/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
 800c01c:	b410      	push	{r4}
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 800c01e:	4b09      	ldr	r3, [pc, #36]	; (800c044 <mpool_create+0x28>)
 800c020:	2410      	movs	r4, #16
 800c022:	62dc      	str	r4, [r3, #44]	; 0x2c
    
    pool->mpool = (char*)memory;
 800c024:	6010      	str	r0, [r2, #0]
    pool->usize  = 0;
 800c026:	2400      	movs	r4, #0
 800c028:	6054      	str	r4, [r2, #4]
    pool->msize  = size;
 800c02a:	6091      	str	r1, [r2, #8]
    
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 800c02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c02e:	1ac9      	subs	r1, r1, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + leaf.header_size;
 800c030:	4403      	add	r3, r0
 800c032:	6003      	str	r3, [r0, #0]
    node->next = next;
 800c034:	6044      	str	r4, [r0, #4]
    node->prev = prev;
 800c036:	6084      	str	r4, [r0, #8]
    node->size = size;
 800c038:	60c1      	str	r1, [r0, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 800c03a:	60d0      	str	r0, [r2, #12]
}
 800c03c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	20012fec 	.word	0x20012fec

0800c048 <leaf_pool_init>:
{
 800c048:	b510      	push	{r4, lr}
    mpool_create(memory, size, &leaf._mempool);
 800c04a:	4c03      	ldr	r4, [pc, #12]	; (800c058 <leaf_pool_init+0x10>)
 800c04c:	4622      	mov	r2, r4
 800c04e:	f7ff ffe5 	bl	800c01c <mpool_create>
    leaf.mempool = &leaf._mempool;
 800c052:	f844 4c04 	str.w	r4, [r4, #-4]
}
 800c056:	bd10      	pop	{r4, pc}
 800c058:	20013008 	.word	0x20013008

0800c05c <leaf_mempool_overrun>:
    node->next = NULL;
    node->prev = NULL;
}

void leaf_mempool_overrun(void)
{
 800c05c:	b508      	push	{r3, lr}
    LEAF_error(1);
 800c05e:	2001      	movs	r0, #1
 800c060:	f000 f9b4 	bl	800c3cc <LEAF_error>
    //TODO: we should make a set of real error codes that are in an enum type
}
 800c064:	bd08      	pop	{r3, pc}
	...

0800c068 <mpool_alloc>:
{
 800c068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pool->head == NULL)
 800c06a:	68cb      	ldr	r3, [r1, #12]
 800c06c:	b163      	cbz	r3, 800c088 <mpool_alloc+0x20>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 800c06e:	3007      	adds	r0, #7
 800c070:	f020 0007 	bic.w	r0, r0, #7
    while (node_to_alloc->size < size_to_alloc)
 800c074:	68da      	ldr	r2, [r3, #12]
 800c076:	4282      	cmp	r2, r0
 800c078:	d20a      	bcs.n	800c090 <mpool_alloc+0x28>
        node_to_alloc = node_to_alloc->next;
 800c07a:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d1f9      	bne.n	800c074 <mpool_alloc+0xc>
            leaf_mempool_overrun();
 800c080:	f7ff ffec 	bl	800c05c <leaf_mempool_overrun>
            return NULL;
 800c084:	2000      	movs	r0, #0
 800c086:	e03f      	b.n	800c108 <mpool_alloc+0xa0>
        leaf_mempool_overrun();
 800c088:	f7ff ffe8 	bl	800c05c <leaf_mempool_overrun>
        return NULL;
 800c08c:	2000      	movs	r0, #0
 800c08e:	e03b      	b.n	800c108 <mpool_alloc+0xa0>
    size_t leftover = node_to_alloc->size - size_to_alloc;
 800c090:	1a15      	subs	r5, r2, r0
    node_to_alloc->size = size_to_alloc;
 800c092:	60d8      	str	r0, [r3, #12]
    if (leftover > leaf.header_size)
 800c094:	4c1d      	ldr	r4, [pc, #116]	; (800c10c <mpool_alloc+0xa4>)
 800c096:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 800c098:	42ac      	cmp	r4, r5
 800c09a:	d229      	bcs.n	800c0f0 <mpool_alloc+0x88>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800c09c:	680e      	ldr	r6, [r1, #0]
 800c09e:	1b9a      	subs	r2, r3, r6
        offset += leaf.header_size + node_to_alloc->size;
 800c0a0:	4420      	add	r0, r4
 800c0a2:	4410      	add	r0, r2
        new_node = create_node(&pool->mpool[offset],
 800c0a4:	1832      	adds	r2, r6, r0
                               node_to_alloc->next,
 800c0a6:	f8d3 c004 	ldr.w	ip, [r3, #4]
                               node_to_alloc->prev,
 800c0aa:	689f      	ldr	r7, [r3, #8]
        new_node = create_node(&pool->mpool[offset],
 800c0ac:	1b2d      	subs	r5, r5, r4
    node->pool = block_location + leaf.header_size;
 800c0ae:	4414      	add	r4, r2
 800c0b0:	5034      	str	r4, [r6, r0]
    node->next = next;
 800c0b2:	f8c2 c004 	str.w	ip, [r2, #4]
    node->prev = prev;
 800c0b6:	6097      	str	r7, [r2, #8]
    node->size = size;
 800c0b8:	60d5      	str	r5, [r2, #12]
    if (pool->head == node_to_alloc)
 800c0ba:	68c8      	ldr	r0, [r1, #12]
 800c0bc:	4298      	cmp	r0, r3
 800c0be:	d01a      	beq.n	800c0f6 <mpool_alloc+0x8e>
    if (node->next != NULL)
 800c0c0:	685a      	ldr	r2, [r3, #4]
 800c0c2:	b10a      	cbz	r2, 800c0c8 <mpool_alloc+0x60>
        node->next->prev = node->prev;
 800c0c4:	6898      	ldr	r0, [r3, #8]
 800c0c6:	6090      	str	r0, [r2, #8]
    if (node->prev != NULL)
 800c0c8:	689a      	ldr	r2, [r3, #8]
 800c0ca:	b10a      	cbz	r2, 800c0d0 <mpool_alloc+0x68>
        node->prev->next = node->next;
 800c0cc:	6858      	ldr	r0, [r3, #4]
 800c0ce:	6050      	str	r0, [r2, #4]
    node->next = NULL;
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 800c0d4:	609a      	str	r2, [r3, #8]
    pool->usize += leaf.header_size + node_to_alloc->size;
 800c0d6:	4c0d      	ldr	r4, [pc, #52]	; (800c10c <mpool_alloc+0xa4>)
 800c0d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c0da:	68d8      	ldr	r0, [r3, #12]
 800c0dc:	4410      	add	r0, r2
 800c0de:	684a      	ldr	r2, [r1, #4]
 800c0e0:	4402      	add	r2, r0
 800c0e2:	604a      	str	r2, [r1, #4]
    if (leaf.clearOnAllocation > 0)
 800c0e4:	6962      	ldr	r2, [r4, #20]
 800c0e6:	2a00      	cmp	r2, #0
 800c0e8:	dd0d      	ble.n	800c106 <mpool_alloc+0x9e>
        char* new_pool = (char*)node_to_alloc->pool;
 800c0ea:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	e007      	b.n	800c100 <mpool_alloc+0x98>
        node_to_alloc->size += leftover;
 800c0f0:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 800c0f2:	685a      	ldr	r2, [r3, #4]
 800c0f4:	e7e1      	b.n	800c0ba <mpool_alloc+0x52>
        pool->head = new_node;
 800c0f6:	60ca      	str	r2, [r1, #12]
 800c0f8:	e7e2      	b.n	800c0c0 <mpool_alloc+0x58>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800c0fa:	2100      	movs	r1, #0
 800c0fc:	5481      	strb	r1, [r0, r2]
 800c0fe:	3201      	adds	r2, #1
 800c100:	68d9      	ldr	r1, [r3, #12]
 800c102:	4291      	cmp	r1, r2
 800c104:	d8f9      	bhi.n	800c0fa <mpool_alloc+0x92>
    return node_to_alloc->pool;
 800c106:	6818      	ldr	r0, [r3, #0]
}
 800c108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c10a:	bf00      	nop
 800c10c:	20012fec 	.word	0x20012fec

0800c110 <mpool_calloc>:
{
 800c110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pool->head == NULL)
 800c112:	68cb      	ldr	r3, [r1, #12]
 800c114:	b163      	cbz	r3, 800c130 <mpool_calloc+0x20>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 800c116:	3007      	adds	r0, #7
 800c118:	f020 0007 	bic.w	r0, r0, #7
    while (node_to_alloc->size < size_to_alloc)
 800c11c:	68da      	ldr	r2, [r3, #12]
 800c11e:	4282      	cmp	r2, r0
 800c120:	d20a      	bcs.n	800c138 <mpool_calloc+0x28>
        node_to_alloc = node_to_alloc->next;
 800c122:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 800c124:	2b00      	cmp	r3, #0
 800c126:	d1f9      	bne.n	800c11c <mpool_calloc+0xc>
            leaf_mempool_overrun();
 800c128:	f7ff ff98 	bl	800c05c <leaf_mempool_overrun>
            return NULL;
 800c12c:	2000      	movs	r0, #0
 800c12e:	e03b      	b.n	800c1a8 <mpool_calloc+0x98>
        leaf_mempool_overrun();
 800c130:	f7ff ff94 	bl	800c05c <leaf_mempool_overrun>
        return NULL;
 800c134:	2000      	movs	r0, #0
 800c136:	e037      	b.n	800c1a8 <mpool_calloc+0x98>
    size_t leftover = node_to_alloc->size - size_to_alloc;
 800c138:	1a15      	subs	r5, r2, r0
    node_to_alloc->size = size_to_alloc;
 800c13a:	60d8      	str	r0, [r3, #12]
    if (leftover > leaf.header_size)
 800c13c:	4c1b      	ldr	r4, [pc, #108]	; (800c1ac <mpool_calloc+0x9c>)
 800c13e:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 800c140:	42ac      	cmp	r4, r5
 800c142:	d225      	bcs.n	800c190 <mpool_calloc+0x80>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800c144:	680e      	ldr	r6, [r1, #0]
 800c146:	1b9a      	subs	r2, r3, r6
        offset += leaf.header_size + node_to_alloc->size;
 800c148:	4420      	add	r0, r4
 800c14a:	4410      	add	r0, r2
        new_node = create_node(&pool->mpool[offset],
 800c14c:	1832      	adds	r2, r6, r0
                               node_to_alloc->next,
 800c14e:	f8d3 c004 	ldr.w	ip, [r3, #4]
                               node_to_alloc->prev,
 800c152:	689f      	ldr	r7, [r3, #8]
        new_node = create_node(&pool->mpool[offset],
 800c154:	1b2d      	subs	r5, r5, r4
    node->pool = block_location + leaf.header_size;
 800c156:	4414      	add	r4, r2
 800c158:	5034      	str	r4, [r6, r0]
    node->next = next;
 800c15a:	f8c2 c004 	str.w	ip, [r2, #4]
    node->prev = prev;
 800c15e:	6097      	str	r7, [r2, #8]
    node->size = size;
 800c160:	60d5      	str	r5, [r2, #12]
    if (pool->head == node_to_alloc)
 800c162:	68c8      	ldr	r0, [r1, #12]
 800c164:	4298      	cmp	r0, r3
 800c166:	d016      	beq.n	800c196 <mpool_calloc+0x86>
    if (node->next != NULL)
 800c168:	685a      	ldr	r2, [r3, #4]
 800c16a:	b10a      	cbz	r2, 800c170 <mpool_calloc+0x60>
        node->next->prev = node->prev;
 800c16c:	6898      	ldr	r0, [r3, #8]
 800c16e:	6090      	str	r0, [r2, #8]
    if (node->prev != NULL)
 800c170:	689a      	ldr	r2, [r3, #8]
 800c172:	b10a      	cbz	r2, 800c178 <mpool_calloc+0x68>
        node->prev->next = node->next;
 800c174:	6858      	ldr	r0, [r3, #4]
 800c176:	6050      	str	r0, [r2, #4]
    node->next = NULL;
 800c178:	2200      	movs	r2, #0
 800c17a:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 800c17c:	609a      	str	r2, [r3, #8]
    pool->usize += leaf.header_size + node_to_alloc->size;
 800c17e:	480b      	ldr	r0, [pc, #44]	; (800c1ac <mpool_calloc+0x9c>)
 800c180:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800c182:	68dc      	ldr	r4, [r3, #12]
 800c184:	4404      	add	r4, r0
 800c186:	6848      	ldr	r0, [r1, #4]
 800c188:	4420      	add	r0, r4
 800c18a:	6048      	str	r0, [r1, #4]
    char* new_pool = (char*)node_to_alloc->pool;
 800c18c:	6818      	ldr	r0, [r3, #0]
    for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800c18e:	e007      	b.n	800c1a0 <mpool_calloc+0x90>
        node_to_alloc->size += leftover;
 800c190:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 800c192:	685a      	ldr	r2, [r3, #4]
 800c194:	e7e5      	b.n	800c162 <mpool_calloc+0x52>
        pool->head = new_node;
 800c196:	60ca      	str	r2, [r1, #12]
 800c198:	e7e6      	b.n	800c168 <mpool_calloc+0x58>
    for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800c19a:	2100      	movs	r1, #0
 800c19c:	5481      	strb	r1, [r0, r2]
 800c19e:	3201      	adds	r2, #1
 800c1a0:	68d9      	ldr	r1, [r3, #12]
 800c1a2:	4291      	cmp	r1, r2
 800c1a4:	d8f9      	bhi.n	800c19a <mpool_calloc+0x8a>
    return node_to_alloc->pool;
 800c1a6:	6818      	ldr	r0, [r3, #0]
}
 800c1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	20012fec 	.word	0x20012fec

0800c1b0 <tStack_initToPool>:
{
    tStack_initToPool(stack, &leaf.mempool);
}

void    tStack_initToPool           (tStack* const stack, tMempool* const mp)
{
 800c1b0:	b538      	push	{r3, r4, r5, lr}
 800c1b2:	4605      	mov	r5, r0
    _tMempool* m = *mp;
 800c1b4:	680c      	ldr	r4, [r1, #0]
    _tStack* ns = *stack = (_tStack*) mpool_alloc(sizeof(_tStack), m);
 800c1b6:	4621      	mov	r1, r4
 800c1b8:	f44f 7003 	mov.w	r0, #524	; 0x20c
 800c1bc:	f7ff ff54 	bl	800c068 <mpool_alloc>
 800c1c0:	6028      	str	r0, [r5, #0]
    ns->mempool = m;
 800c1c2:	6004      	str	r4, [r0, #0]
    
    ns->ordered = OFALSE;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	f880 320a 	strb.w	r3, [r0, #522]	; 0x20a
    ns->size = 0;
 800c1ca:	f8a0 3206 	strh.w	r3, [r0, #518]	; 0x206
    ns->pos = 0;
 800c1ce:	f8a0 3204 	strh.w	r3, [r0, #516]	; 0x204
    ns->capacity = STACK_SIZE;
 800c1d2:	2280      	movs	r2, #128	; 0x80
 800c1d4:	f8a0 2208 	strh.w	r2, [r0, #520]	; 0x208
    
    for (int i = 0; i < STACK_SIZE; i++) ns->data[i] = -1;
 800c1d8:	e005      	b.n	800c1e6 <tStack_initToPool+0x36>
 800c1da:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800c1de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c1e2:	6051      	str	r1, [r2, #4]
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	2b7f      	cmp	r3, #127	; 0x7f
 800c1e8:	ddf7      	ble.n	800c1da <tStack_initToPool+0x2a>
}
 800c1ea:	bd38      	pop	{r3, r4, r5, pc}

0800c1ec <tSimplePoly_initToPool>:
{
    tSimplePoly_initToPool(polyh, maxNumVoices, &leaf.mempool);
}

void    tSimplePoly_initToPool            (tSimplePoly* const polyh, int maxNumVoices, tMempool* const mp)
{
 800c1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1f0:	4680      	mov	r8, r0
 800c1f2:	460e      	mov	r6, r1
 800c1f4:	4617      	mov	r7, r2
    _tMempool* m = *mp;
 800c1f6:	6815      	ldr	r5, [r2, #0]
    _tSimplePoly* poly = *polyh = (_tSimplePoly*) mpool_alloc(sizeof(_tSimplePoly), m);
 800c1f8:	4629      	mov	r1, r5
 800c1fa:	f240 401c 	movw	r0, #1052	; 0x41c
 800c1fe:	f7ff ff33 	bl	800c068 <mpool_alloc>
 800c202:	4604      	mov	r4, r0
 800c204:	f8c8 0000 	str.w	r0, [r8]
    poly->mempool = m;
 800c208:	6005      	str	r5, [r0, #0]

    poly->numVoices = maxNumVoices;
 800c20a:	6086      	str	r6, [r0, #8]
    poly->maxNumVoices = maxNumVoices;
 800c20c:	60c6      	str	r6, [r0, #12]

    for (int i = 0; i < 128; i++)
 800c20e:	2300      	movs	r3, #0
 800c210:	e00a      	b.n	800c228 <tSimplePoly_initToPool+0x3c>
    {
        poly->notes[i][0] = -1;
 800c212:	1cda      	adds	r2, r3, #3
 800c214:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800c218:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c21c:	6051      	str	r1, [r2, #4]
        poly->notes[i][1] = 0;
 800c21e:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 800c222:	2100      	movs	r1, #0
 800c224:	6211      	str	r1, [r2, #32]
    for (int i = 0; i < 128; i++)
 800c226:	3301      	adds	r3, #1
 800c228:	2b7f      	cmp	r3, #127	; 0x7f
 800c22a:	ddf2      	ble.n	800c212 <tSimplePoly_initToPool+0x26>
    }
    poly->stealing_on = 1;
 800c22c:	2301      	movs	r3, #1
 800c22e:	6163      	str	r3, [r4, #20]
    poly->recover_stolen = 1;
 800c230:	61a3      	str	r3, [r4, #24]
    poly->voices = (int**) mpool_alloc(sizeof(int*) * poly->maxNumVoices, m);
 800c232:	4629      	mov	r1, r5
 800c234:	00b0      	lsls	r0, r6, #2
 800c236:	f7ff ff17 	bl	800c068 <mpool_alloc>
 800c23a:	6120      	str	r0, [r4, #16]

    for (int i = 0; i < poly->maxNumVoices; ++i)
 800c23c:	2600      	movs	r6, #0
 800c23e:	e00e      	b.n	800c25e <tSimplePoly_initToPool+0x72>
    {
        poly->voices[i] = (int*) mpool_alloc(sizeof(int) * 3, m);
 800c240:	f8d4 8010 	ldr.w	r8, [r4, #16]
 800c244:	4629      	mov	r1, r5
 800c246:	200c      	movs	r0, #12
 800c248:	f7ff ff0e 	bl	800c068 <mpool_alloc>
 800c24c:	f848 0026 	str.w	r0, [r8, r6, lsl #2]
        poly->voices[i][0] = -1;
 800c250:	6923      	ldr	r3, [r4, #16]
 800c252:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800c256:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c25a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < poly->maxNumVoices; ++i)
 800c25c:	3601      	adds	r6, #1
 800c25e:	68e3      	ldr	r3, [r4, #12]
 800c260:	42b3      	cmp	r3, r6
 800c262:	dced      	bgt.n	800c240 <tSimplePoly_initToPool+0x54>
    }
    tStack_initToPool(&poly->stack, mp);
 800c264:	4639      	mov	r1, r7
 800c266:	1d20      	adds	r0, r4, #4
 800c268:	f7ff ffa2 	bl	800c1b0 <tStack_initToPool>

}
 800c26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c270 <tSimplePoly_init>:
{
 800c270:	b508      	push	{r3, lr}
    tSimplePoly_initToPool(polyh, maxNumVoices, &leaf.mempool);
 800c272:	4a02      	ldr	r2, [pc, #8]	; (800c27c <tSimplePoly_init+0xc>)
 800c274:	f7ff ffba 	bl	800c1ec <tSimplePoly_initToPool>
}
 800c278:	bd08      	pop	{r3, pc}
 800c27a:	bf00      	nop
 800c27c:	20013004 	.word	0x20013004

0800c280 <tSimplePoly_setNumVoices>:
    return deactivatedVoice;
}

void tSimplePoly_setNumVoices(tSimplePoly* const polyh, uint8_t numVoices)
{
    _tSimplePoly* poly = *polyh;
 800c280:	6802      	ldr	r2, [r0, #0]
    poly->numVoices = (numVoices > poly->maxNumVoices) ? poly->maxNumVoices : numVoices;
 800c282:	68d3      	ldr	r3, [r2, #12]
 800c284:	4299      	cmp	r1, r3
 800c286:	bfa8      	it	ge
 800c288:	4619      	movge	r1, r3
 800c28a:	6091      	str	r1, [r2, #8]
}
 800c28c:	4770      	bx	lr

0800c28e <tCycle_initToPool>:
{
    tCycle_initToPool(cy, &leaf.mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
 800c28e:	b538      	push	{r3, r4, r5, lr}
 800c290:	4605      	mov	r5, r0
    _tMempool* m = *mp;
 800c292:	680c      	ldr	r4, [r1, #0]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 800c294:	4621      	mov	r1, r4
 800c296:	2010      	movs	r0, #16
 800c298:	f7ff fee6 	bl	800c068 <mpool_alloc>
 800c29c:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 800c29e:	6004      	str	r4, [r0, #0]
    
    c->inc      =  0.0f;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	6083      	str	r3, [r0, #8]
    c->phase    =  0.0f;
 800c2a4:	6043      	str	r3, [r0, #4]
}
 800c2a6:	bd38      	pop	{r3, r4, r5, pc}

0800c2a8 <tCycle_init>:
{
 800c2a8:	b508      	push	{r3, lr}
    tCycle_initToPool(cy, &leaf.mempool);
 800c2aa:	4902      	ldr	r1, [pc, #8]	; (800c2b4 <tCycle_init+0xc>)
 800c2ac:	f7ff ffef 	bl	800c28e <tCycle_initToPool>
}
 800c2b0:	bd08      	pop	{r3, pc}
 800c2b2:	bf00      	nop
 800c2b4:	20013004 	.word	0x20013004

0800c2b8 <tSawtooth_setFreq>:
    mpool_free((char*)c, c->mempool);
}

void    tSawtooth_setFreq(tSawtooth* const cy, float freq)
{
    _tSawtooth* c = *cy;
 800c2b8:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
 800c2ba:	ed83 0a03 	vstr	s0, [r3, #12]
    
    c->inc = c->freq * leaf.invSampleRate;
 800c2be:	4a13      	ldr	r2, [pc, #76]	; (800c30c <tSawtooth_setFreq+0x54>)
 800c2c0:	edd2 7a01 	vldr	s15, [r2, #4]
 800c2c4:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c2c8:	edc3 7a02 	vstr	s15, [r3, #8]
    
    c->w = c->freq * INV_20;
 800c2cc:	eddf 7a10 	vldr	s15, [pc, #64]	; 800c310 <tSawtooth_setFreq+0x58>
 800c2d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c2d4:	ed83 0a05 	vstr	s0, [r3, #20]
    for (c->oct = 0; c->w > 2.0f; c->oct++)
 800c2d8:	2200      	movs	r2, #0
 800c2da:	611a      	str	r2, [r3, #16]
 800c2dc:	e008      	b.n	800c2f0 <tSawtooth_setFreq+0x38>
    {
        c->w = 0.5f * c->w;
 800c2de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c2e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c2e6:	edc3 7a05 	vstr	s15, [r3, #20]
    for (c->oct = 0; c->w > 2.0f; c->oct++)
 800c2ea:	691a      	ldr	r2, [r3, #16]
 800c2ec:	3201      	adds	r2, #1
 800c2ee:	611a      	str	r2, [r3, #16]
 800c2f0:	edd3 7a05 	vldr	s15, [r3, #20]
 800c2f4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800c2f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c2fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c300:	dced      	bgt.n	800c2de <tSawtooth_setFreq+0x26>
    }
    c->w = 2.0f - c->w;
 800c302:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c306:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800c30a:	4770      	bx	lr
 800c30c:	20012fec 	.word	0x20012fec
 800c310:	3d4ccccd 	.word	0x3d4ccccd

0800c314 <tSawtooth_initToPool>:
{
 800c314:	b538      	push	{r3, r4, r5, lr}
 800c316:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 800c318:	680d      	ldr	r5, [r1, #0]
    _tSawtooth* c = *cy = (_tSawtooth*) mpool_alloc(sizeof(_tSawtooth), m);
 800c31a:	4629      	mov	r1, r5
 800c31c:	2018      	movs	r0, #24
 800c31e:	f7ff fea3 	bl	800c068 <mpool_alloc>
 800c322:	6020      	str	r0, [r4, #0]
    c->mempool = m;
 800c324:	6005      	str	r5, [r0, #0]
    c->inc      = 0.0f;
 800c326:	2300      	movs	r3, #0
 800c328:	6083      	str	r3, [r0, #8]
    c->phase    = 0.0f;
 800c32a:	6043      	str	r3, [r0, #4]
    tSawtooth_setFreq(cy, 220);
 800c32c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800c338 <tSawtooth_initToPool+0x24>
 800c330:	4620      	mov	r0, r4
 800c332:	f7ff ffc1 	bl	800c2b8 <tSawtooth_setFreq>
}
 800c336:	bd38      	pop	{r3, r4, r5, pc}
 800c338:	435c0000 	.word	0x435c0000

0800c33c <tSawtooth_init>:
{
 800c33c:	b508      	push	{r3, lr}
    tSawtooth_initToPool(cy, &leaf.mempool);
 800c33e:	4902      	ldr	r1, [pc, #8]	; (800c348 <tSawtooth_init+0xc>)
 800c340:	f7ff ffe8 	bl	800c314 <tSawtooth_initToPool>
}
 800c344:	bd08      	pop	{r3, pc}
 800c346:	bf00      	nop
 800c348:	20013004 	.word	0x20013004

0800c34c <tNoise_initToPool>:
{
    tNoise_initToPool(ns, type, &leaf.mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
 800c34c:	b570      	push	{r4, r5, r6, lr}
 800c34e:	4606      	mov	r6, r0
 800c350:	460d      	mov	r5, r1
    _tMempool* m = *mp;
 800c352:	6814      	ldr	r4, [r2, #0]
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 800c354:	4621      	mov	r1, r4
 800c356:	2018      	movs	r0, #24
 800c358:	f7ff fe86 	bl	800c068 <mpool_alloc>
 800c35c:	6030      	str	r0, [r6, #0]
    n->mempool = m;
 800c35e:	6004      	str	r4, [r0, #0]
    
    n->type = type;
 800c360:	7105      	strb	r5, [r0, #4]
    n->rand = leaf.random;
 800c362:	4b02      	ldr	r3, [pc, #8]	; (800c36c <tNoise_initToPool+0x20>)
 800c364:	691b      	ldr	r3, [r3, #16]
 800c366:	6143      	str	r3, [r0, #20]
}
 800c368:	bd70      	pop	{r4, r5, r6, pc}
 800c36a:	bf00      	nop
 800c36c:	20012fec 	.word	0x20012fec

0800c370 <tNoise_init>:
{
 800c370:	b508      	push	{r3, lr}
    tNoise_initToPool(ns, type, &leaf.mempool);
 800c372:	4a02      	ldr	r2, [pc, #8]	; (800c37c <tNoise_init+0xc>)
 800c374:	f7ff ffea 	bl	800c34c <tNoise_initToPool>
}
 800c378:	bd08      	pop	{r3, pc}
 800c37a:	bf00      	nop
 800c37c:	20013004 	.word	0x20013004

0800c380 <LEAF_init>:

LEAF leaf;

void LEAF_init(float sr, int blocksize, char* memory, size_t memorysize, float(*random)(void))

{
 800c380:	b538      	push	{r3, r4, r5, lr}
 800c382:	ed2d 8b02 	vpush	{d8}
 800c386:	eeb0 8a40 	vmov.f32	s16, s0
 800c38a:	4605      	mov	r5, r0
 800c38c:	4608      	mov	r0, r1
 800c38e:	461c      	mov	r4, r3
    leaf_pool_init(memory, memorysize);
 800c390:	4611      	mov	r1, r2
 800c392:	f7ff fe59 	bl	800c048 <leaf_pool_init>
    
    leaf.sampleRate = sr;
 800c396:	4b0b      	ldr	r3, [pc, #44]	; (800c3c4 <LEAF_init+0x44>)
 800c398:	ed83 8a00 	vstr	s16, [r3]

    leaf.blockSize = blocksize;
 800c39c:	609d      	str	r5, [r3, #8]
    
    leaf.invSampleRate = 1.0f/sr;
 800c39e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c3a2:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800c3a6:	edc3 7a01 	vstr	s15, [r3, #4]
    
    leaf.twoPiTimesInvSampleRate = leaf.invSampleRate * TWO_PI;
 800c3aa:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800c3c8 <LEAF_init+0x48>
 800c3ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c3b2:	edc3 7a03 	vstr	s15, [r3, #12]

    leaf.random = random;
 800c3b6:	611c      	str	r4, [r3, #16]
    
    leaf.clearOnAllocation = 0;
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	615a      	str	r2, [r3, #20]
}
 800c3bc:	ecbd 8b02 	vpop	{d8}
 800c3c0:	bd38      	pop	{r3, r4, r5, pc}
 800c3c2:	bf00      	nop
 800c3c4:	20012fec 	.word	0x20012fec
 800c3c8:	40c90fdb 	.word	0x40c90fdb

0800c3cc <LEAF_error>:
//implement a function called this in your user code to catch errors
//__attribute__((weak))
uint8_t LEAF_error(uint8_t whichone)
{
    return whichone;
}
 800c3cc:	4770      	bx	lr
	...

0800c3d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 800c3d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c408 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c3d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c3d6:	e003      	b.n	800c3e0 <LoopCopyDataInit>

0800c3d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c3d8:	4b0c      	ldr	r3, [pc, #48]	; (800c40c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c3da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c3dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c3de:	3104      	adds	r1, #4

0800c3e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c3e0:	480b      	ldr	r0, [pc, #44]	; (800c410 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c3e2:	4b0c      	ldr	r3, [pc, #48]	; (800c414 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c3e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c3e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c3e8:	d3f6      	bcc.n	800c3d8 <CopyDataInit>
  ldr  r2, =_sbss
 800c3ea:	4a0b      	ldr	r2, [pc, #44]	; (800c418 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c3ec:	e002      	b.n	800c3f4 <LoopFillZerobss>

0800c3ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c3ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c3f0:	f842 3b04 	str.w	r3, [r2], #4

0800c3f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c3f4:	4b09      	ldr	r3, [pc, #36]	; (800c41c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c3f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c3f8:	d3f9      	bcc.n	800c3ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c3fa:	f7ff f953 	bl	800b6a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c3fe:	f000 f817 	bl	800c430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c402:	f7fe fd9d 	bl	800af40 <main>
  bx  lr    
 800c406:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 800c408:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800c40c:	0812766c 	.word	0x0812766c
  ldr  r0, =_sdata
 800c410:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c414:	2000012c 	.word	0x2000012c
  ldr  r2, =_sbss
 800c418:	20000130 	.word	0x20000130
  ldr  r3, = _ebss
 800c41c:	2001301c 	.word	0x2001301c

0800c420 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c420:	e7fe      	b.n	800c420 <ADC3_IRQHandler>
	...

0800c424 <__errno>:
 800c424:	4b01      	ldr	r3, [pc, #4]	; (800c42c <__errno+0x8>)
 800c426:	6818      	ldr	r0, [r3, #0]
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	200000c4 	.word	0x200000c4

0800c430 <__libc_init_array>:
 800c430:	b570      	push	{r4, r5, r6, lr}
 800c432:	4e0d      	ldr	r6, [pc, #52]	; (800c468 <__libc_init_array+0x38>)
 800c434:	4c0d      	ldr	r4, [pc, #52]	; (800c46c <__libc_init_array+0x3c>)
 800c436:	1ba4      	subs	r4, r4, r6
 800c438:	10a4      	asrs	r4, r4, #2
 800c43a:	2500      	movs	r5, #0
 800c43c:	42a5      	cmp	r5, r4
 800c43e:	d109      	bne.n	800c454 <__libc_init_array+0x24>
 800c440:	4e0b      	ldr	r6, [pc, #44]	; (800c470 <__libc_init_array+0x40>)
 800c442:	4c0c      	ldr	r4, [pc, #48]	; (800c474 <__libc_init_array+0x44>)
 800c444:	f001 fbba 	bl	800dbbc <_init>
 800c448:	1ba4      	subs	r4, r4, r6
 800c44a:	10a4      	asrs	r4, r4, #2
 800c44c:	2500      	movs	r5, #0
 800c44e:	42a5      	cmp	r5, r4
 800c450:	d105      	bne.n	800c45e <__libc_init_array+0x2e>
 800c452:	bd70      	pop	{r4, r5, r6, pc}
 800c454:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c458:	4798      	blx	r3
 800c45a:	3501      	adds	r5, #1
 800c45c:	e7ee      	b.n	800c43c <__libc_init_array+0xc>
 800c45e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c462:	4798      	blx	r3
 800c464:	3501      	adds	r5, #1
 800c466:	e7f2      	b.n	800c44e <__libc_init_array+0x1e>
 800c468:	08127664 	.word	0x08127664
 800c46c:	08127664 	.word	0x08127664
 800c470:	08127664 	.word	0x08127664
 800c474:	08127668 	.word	0x08127668

0800c478 <__itoa>:
 800c478:	1e93      	subs	r3, r2, #2
 800c47a:	2b22      	cmp	r3, #34	; 0x22
 800c47c:	b510      	push	{r4, lr}
 800c47e:	460c      	mov	r4, r1
 800c480:	d904      	bls.n	800c48c <__itoa+0x14>
 800c482:	2300      	movs	r3, #0
 800c484:	700b      	strb	r3, [r1, #0]
 800c486:	461c      	mov	r4, r3
 800c488:	4620      	mov	r0, r4
 800c48a:	bd10      	pop	{r4, pc}
 800c48c:	2a0a      	cmp	r2, #10
 800c48e:	d109      	bne.n	800c4a4 <__itoa+0x2c>
 800c490:	2800      	cmp	r0, #0
 800c492:	da07      	bge.n	800c4a4 <__itoa+0x2c>
 800c494:	232d      	movs	r3, #45	; 0x2d
 800c496:	700b      	strb	r3, [r1, #0]
 800c498:	4240      	negs	r0, r0
 800c49a:	2101      	movs	r1, #1
 800c49c:	4421      	add	r1, r4
 800c49e:	f000 f821 	bl	800c4e4 <__utoa>
 800c4a2:	e7f1      	b.n	800c488 <__itoa+0x10>
 800c4a4:	2100      	movs	r1, #0
 800c4a6:	e7f9      	b.n	800c49c <__itoa+0x24>

0800c4a8 <itoa>:
 800c4a8:	f7ff bfe6 	b.w	800c478 <__itoa>

0800c4ac <memset>:
 800c4ac:	4402      	add	r2, r0
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d100      	bne.n	800c4b6 <memset+0xa>
 800c4b4:	4770      	bx	lr
 800c4b6:	f803 1b01 	strb.w	r1, [r3], #1
 800c4ba:	e7f9      	b.n	800c4b0 <memset+0x4>

0800c4bc <strncat>:
 800c4bc:	b530      	push	{r4, r5, lr}
 800c4be:	4603      	mov	r3, r0
 800c4c0:	781c      	ldrb	r4, [r3, #0]
 800c4c2:	1c5d      	adds	r5, r3, #1
 800c4c4:	b944      	cbnz	r4, 800c4d8 <strncat+0x1c>
 800c4c6:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 800c4ca:	d304      	bcc.n	800c4d6 <strncat+0x1a>
 800c4cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4d0:	f803 4b01 	strb.w	r4, [r3], #1
 800c4d4:	b914      	cbnz	r4, 800c4dc <strncat+0x20>
 800c4d6:	bd30      	pop	{r4, r5, pc}
 800c4d8:	462b      	mov	r3, r5
 800c4da:	e7f1      	b.n	800c4c0 <strncat+0x4>
 800c4dc:	2a00      	cmp	r2, #0
 800c4de:	d1f2      	bne.n	800c4c6 <strncat+0xa>
 800c4e0:	701a      	strb	r2, [r3, #0]
 800c4e2:	e7f0      	b.n	800c4c6 <strncat+0xa>

0800c4e4 <__utoa>:
 800c4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4e6:	4b1d      	ldr	r3, [pc, #116]	; (800c55c <__utoa+0x78>)
 800c4e8:	b08b      	sub	sp, #44	; 0x2c
 800c4ea:	4605      	mov	r5, r0
 800c4ec:	460c      	mov	r4, r1
 800c4ee:	466e      	mov	r6, sp
 800c4f0:	f103 0c20 	add.w	ip, r3, #32
 800c4f4:	6818      	ldr	r0, [r3, #0]
 800c4f6:	6859      	ldr	r1, [r3, #4]
 800c4f8:	4637      	mov	r7, r6
 800c4fa:	c703      	stmia	r7!, {r0, r1}
 800c4fc:	3308      	adds	r3, #8
 800c4fe:	4563      	cmp	r3, ip
 800c500:	463e      	mov	r6, r7
 800c502:	d1f7      	bne.n	800c4f4 <__utoa+0x10>
 800c504:	6818      	ldr	r0, [r3, #0]
 800c506:	791b      	ldrb	r3, [r3, #4]
 800c508:	713b      	strb	r3, [r7, #4]
 800c50a:	1e93      	subs	r3, r2, #2
 800c50c:	2b22      	cmp	r3, #34	; 0x22
 800c50e:	6038      	str	r0, [r7, #0]
 800c510:	f04f 0300 	mov.w	r3, #0
 800c514:	d904      	bls.n	800c520 <__utoa+0x3c>
 800c516:	7023      	strb	r3, [r4, #0]
 800c518:	461c      	mov	r4, r3
 800c51a:	4620      	mov	r0, r4
 800c51c:	b00b      	add	sp, #44	; 0x2c
 800c51e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c520:	1e66      	subs	r6, r4, #1
 800c522:	fbb5 f0f2 	udiv	r0, r5, r2
 800c526:	af0a      	add	r7, sp, #40	; 0x28
 800c528:	fb02 5510 	mls	r5, r2, r0, r5
 800c52c:	443d      	add	r5, r7
 800c52e:	1c59      	adds	r1, r3, #1
 800c530:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800c534:	f806 5f01 	strb.w	r5, [r6, #1]!
 800c538:	4605      	mov	r5, r0
 800c53a:	b968      	cbnz	r0, 800c558 <__utoa+0x74>
 800c53c:	5460      	strb	r0, [r4, r1]
 800c53e:	4423      	add	r3, r4
 800c540:	4622      	mov	r2, r4
 800c542:	1b19      	subs	r1, r3, r4
 800c544:	1b10      	subs	r0, r2, r4
 800c546:	4281      	cmp	r1, r0
 800c548:	dde7      	ble.n	800c51a <__utoa+0x36>
 800c54a:	7811      	ldrb	r1, [r2, #0]
 800c54c:	7818      	ldrb	r0, [r3, #0]
 800c54e:	f802 0b01 	strb.w	r0, [r2], #1
 800c552:	f803 1901 	strb.w	r1, [r3], #-1
 800c556:	e7f4      	b.n	800c542 <__utoa+0x5e>
 800c558:	460b      	mov	r3, r1
 800c55a:	e7e2      	b.n	800c522 <__utoa+0x3e>
 800c55c:	08126ec8 	.word	0x08126ec8

0800c560 <expf>:
 800c560:	ee10 2a10 	vmov	r2, s0
 800c564:	f240 412a 	movw	r1, #1066	; 0x42a
 800c568:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800c56c:	428b      	cmp	r3, r1
 800c56e:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
 800c572:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800c576:	d92e      	bls.n	800c5d6 <expf+0x76>
 800c578:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800c57c:	d061      	beq.n	800c642 <expf+0xe2>
 800c57e:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800c582:	d304      	bcc.n	800c58e <expf+0x2e>
 800c584:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c588:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800c58c:	4770      	bx	lr
 800c58e:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800c648 <expf+0xe8>
 800c592:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c59a:	dd04      	ble.n	800c5a6 <expf+0x46>
 800c59c:	2000      	movs	r0, #0
 800c59e:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800c5a2:	f001 b8f9 	b.w	800d798 <__math_oflowf>
 800c5a6:	eddf 7a29 	vldr	s15, [pc, #164]	; 800c64c <expf+0xec>
 800c5aa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5b2:	d504      	bpl.n	800c5be <expf+0x5e>
 800c5b4:	2000      	movs	r0, #0
 800c5b6:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800c5ba:	f001 b8e1 	b.w	800d780 <__math_uflowf>
 800c5be:	eddf 7a24 	vldr	s15, [pc, #144]	; 800c650 <expf+0xf0>
 800c5c2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5ca:	d504      	bpl.n	800c5d6 <expf+0x76>
 800c5cc:	2000      	movs	r0, #0
 800c5ce:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800c5d2:	f001 b8db 	b.w	800d78c <__math_may_uflowf>
 800c5d6:	491f      	ldr	r1, [pc, #124]	; (800c654 <expf+0xf4>)
 800c5d8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c5dc:	ed91 5b4a 	vldr	d5, [r1, #296]	; 0x128
 800c5e0:	ed91 7b48 	vldr	d7, [r1, #288]	; 0x120
 800c5e4:	eeb0 4b47 	vmov.f64	d4, d7
 800c5e8:	eea5 4b06 	vfma.f64	d4, d5, d6
 800c5ec:	ec55 4b14 	vmov	r4, r5, d4
 800c5f0:	ee34 7b47 	vsub.f64	d7, d4, d7
 800c5f4:	f004 021f 	and.w	r2, r4, #31
 800c5f8:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800c5fc:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800c600:	ed91 6b50 	vldr	d6, [r1, #320]	; 0x140
 800c604:	e9d2 4500 	ldrd	r4, r5, [r2]
 800c608:	eea6 0b07 	vfma.f64	d0, d6, d7
 800c60c:	ee14 0a10 	vmov	r0, s8
 800c610:	ed91 5b4c 	vldr	d5, [r1, #304]	; 0x130
 800c614:	ed91 6b4e 	vldr	d6, [r1, #312]	; 0x138
 800c618:	f04f 0b00 	mov.w	fp, #0
 800c61c:	eb1b 0204 	adds.w	r2, fp, r4
 800c620:	ea4f 3cc0 	mov.w	ip, r0, lsl #15
 800c624:	eb4c 0305 	adc.w	r3, ip, r5
 800c628:	eea5 6b07 	vfma.f64	d6, d5, d7
 800c62c:	ee27 7b07 	vmul.f64	d7, d7, d7
 800c630:	eea6 0b07 	vfma.f64	d0, d6, d7
 800c634:	ec43 2b17 	vmov	d7, r2, r3
 800c638:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c63c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c640:	e7a2      	b.n	800c588 <expf+0x28>
 800c642:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800c658 <expf+0xf8>
 800c646:	e79f      	b.n	800c588 <expf+0x28>
 800c648:	42b17217 	.word	0x42b17217
 800c64c:	c2cff1b4 	.word	0xc2cff1b4
 800c650:	c2ce8ecf 	.word	0xc2ce8ecf
 800c654:	08126ef0 	.word	0x08126ef0
 800c658:	00000000 	.word	0x00000000

0800c65c <fabsf>:
 800c65c:	ee10 3a10 	vmov	r3, s0
 800c660:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c664:	ee00 3a10 	vmov	s0, r3
 800c668:	4770      	bx	lr
	...

0800c66c <logf>:
 800c66c:	ee10 3a10 	vmov	r3, s0
 800c670:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800c674:	b410      	push	{r4}
 800c676:	d057      	beq.n	800c728 <logf+0xbc>
 800c678:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 800c67c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800c680:	d31a      	bcc.n	800c6b8 <logf+0x4c>
 800c682:	005a      	lsls	r2, r3, #1
 800c684:	d104      	bne.n	800c690 <logf+0x24>
 800c686:	2001      	movs	r0, #1
 800c688:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c68c:	f001 b88a 	b.w	800d7a4 <__math_divzerof>
 800c690:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c694:	d045      	beq.n	800c722 <logf+0xb6>
 800c696:	2b00      	cmp	r3, #0
 800c698:	db02      	blt.n	800c6a0 <logf+0x34>
 800c69a:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800c69e:	d303      	bcc.n	800c6a8 <logf+0x3c>
 800c6a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6a4:	f001 b88e 	b.w	800d7c4 <__math_invalidf>
 800c6a8:	eddf 7a21 	vldr	s15, [pc, #132]	; 800c730 <logf+0xc4>
 800c6ac:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c6b0:	ee10 3a10 	vmov	r3, s0
 800c6b4:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 800c6b8:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 800c6bc:	491d      	ldr	r1, [pc, #116]	; (800c734 <logf+0xc8>)
 800c6be:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800c6c2:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800c6c6:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800c6ca:	0dd4      	lsrs	r4, r2, #23
 800c6cc:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800c6d0:	05e4      	lsls	r4, r4, #23
 800c6d2:	ed90 5b00 	vldr	d5, [r0]
 800c6d6:	1b1b      	subs	r3, r3, r4
 800c6d8:	ee07 3a90 	vmov	s15, r3
 800c6dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c6e0:	eea5 6b07 	vfma.f64	d6, d5, d7
 800c6e4:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 800c6e8:	ee26 3b06 	vmul.f64	d3, d6, d6
 800c6ec:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 800c6f0:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c6f4:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 800c6f8:	15d2      	asrs	r2, r2, #23
 800c6fa:	ed91 4b40 	vldr	d4, [r1, #256]	; 0x100
 800c6fe:	eea5 7b03 	vfma.f64	d7, d5, d3
 800c702:	eeb0 5b47 	vmov.f64	d5, d7
 800c706:	ed90 0b02 	vldr	d0, [r0, #8]
 800c70a:	ee07 2a90 	vmov	s15, r2
 800c70e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c712:	eea7 0b04 	vfma.f64	d0, d7, d4
 800c716:	ee30 0b06 	vadd.f64	d0, d0, d6
 800c71a:	eea3 0b05 	vfma.f64	d0, d3, d5
 800c71e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c722:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c726:	4770      	bx	lr
 800c728:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800c738 <logf+0xcc>
 800c72c:	e7f9      	b.n	800c722 <logf+0xb6>
 800c72e:	bf00      	nop
 800c730:	4b000000 	.word	0x4b000000
 800c734:	08127038 	.word	0x08127038
 800c738:	00000000 	.word	0x00000000

0800c73c <checkint>:
 800c73c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c740:	2b7e      	cmp	r3, #126	; 0x7e
 800c742:	dd10      	ble.n	800c766 <checkint+0x2a>
 800c744:	2b96      	cmp	r3, #150	; 0x96
 800c746:	dc0c      	bgt.n	800c762 <checkint+0x26>
 800c748:	2201      	movs	r2, #1
 800c74a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800c74e:	fa02 f303 	lsl.w	r3, r2, r3
 800c752:	1e5a      	subs	r2, r3, #1
 800c754:	4202      	tst	r2, r0
 800c756:	d106      	bne.n	800c766 <checkint+0x2a>
 800c758:	4203      	tst	r3, r0
 800c75a:	bf0c      	ite	eq
 800c75c:	2002      	moveq	r0, #2
 800c75e:	2001      	movne	r0, #1
 800c760:	4770      	bx	lr
 800c762:	2002      	movs	r0, #2
 800c764:	4770      	bx	lr
 800c766:	2000      	movs	r0, #0
 800c768:	4770      	bx	lr
 800c76a:	0000      	movs	r0, r0
 800c76c:	0000      	movs	r0, r0
	...

0800c770 <powf>:
 800c770:	ee10 1a10 	vmov	r1, s0
 800c774:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800c778:	ee10 4a90 	vmov	r4, s1
 800c77c:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800c780:	0062      	lsls	r2, r4, #1
 800c782:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800c786:	eef0 4a60 	vmov.f32	s9, s1
 800c78a:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800c78e:	4b92      	ldr	r3, [pc, #584]	; (800c9d8 <powf+0x268>)
 800c790:	d255      	bcs.n	800c83e <powf+0xce>
 800c792:	4298      	cmp	r0, r3
 800c794:	d855      	bhi.n	800c842 <powf+0xd2>
 800c796:	2000      	movs	r0, #0
 800c798:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 800c79c:	4a8f      	ldr	r2, [pc, #572]	; (800c9dc <powf+0x26c>)
 800c79e:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
 800c7a2:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 800c7a6:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 800c7aa:	0ddb      	lsrs	r3, r3, #23
 800c7ac:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 800c7b0:	05db      	lsls	r3, r3, #23
 800c7b2:	ed94 6b00 	vldr	d6, [r4]
 800c7b6:	1ac9      	subs	r1, r1, r3
 800c7b8:	ee07 1a90 	vmov	s15, r1
 800c7bc:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 800c7c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c7c4:	eea6 2b07 	vfma.f64	d2, d6, d7
 800c7c8:	ed92 7b42 	vldr	d7, [r2, #264]	; 0x108
 800c7cc:	ee22 6b02 	vmul.f64	d6, d2, d2
 800c7d0:	eea2 7b05 	vfma.f64	d7, d2, d5
 800c7d4:	15db      	asrs	r3, r3, #23
 800c7d6:	ed94 5b02 	vldr	d5, [r4, #8]
 800c7da:	ee00 3a10 	vmov	s0, r3
 800c7de:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800c7e2:	ee30 0b05 	vadd.f64	d0, d0, d5
 800c7e6:	ed92 5b48 	vldr	d5, [r2, #288]	; 0x120
 800c7ea:	ed92 3b44 	vldr	d3, [r2, #272]	; 0x110
 800c7ee:	eea2 0b05 	vfma.f64	d0, d2, d5
 800c7f2:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 800c7f6:	eea2 5b03 	vfma.f64	d5, d2, d3
 800c7fa:	eea6 0b05 	vfma.f64	d0, d6, d5
 800c7fe:	ee26 6b06 	vmul.f64	d6, d6, d6
 800c802:	eea7 0b06 	vfma.f64	d0, d7, d6
 800c806:	eeb7 7ae4 	vcvt.f64.f32	d7, s9
 800c80a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c80e:	ee10 3a90 	vmov	r3, s1
 800c812:	2500      	movs	r5, #0
 800c814:	0bda      	lsrs	r2, r3, #15
 800c816:	2300      	movs	r3, #0
 800c818:	b292      	uxth	r2, r2
 800c81a:	f248 04be 	movw	r4, #32958	; 0x80be
 800c81e:	429d      	cmp	r5, r3
 800c820:	bf08      	it	eq
 800c822:	4294      	cmpeq	r4, r2
 800c824:	f080 8094 	bcs.w	800c950 <powf+0x1e0>
 800c828:	ed9f 7b65 	vldr	d7, [pc, #404]	; 800c9c0 <powf+0x250>
 800c82c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c834:	dd76      	ble.n	800c924 <powf+0x1b4>
 800c836:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800c83a:	f000 bfad 	b.w	800d798 <__math_oflowf>
 800c83e:	4298      	cmp	r0, r3
 800c840:	d92d      	bls.n	800c89e <powf+0x12e>
 800c842:	b952      	cbnz	r2, 800c85a <powf+0xea>
 800c844:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800c848:	005b      	lsls	r3, r3, #1
 800c84a:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800c84e:	f240 80ae 	bls.w	800c9ae <powf+0x23e>
 800c852:	ee30 0a24 	vadd.f32	s0, s0, s9
 800c856:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800c85a:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800c85e:	d105      	bne.n	800c86c <powf+0xfc>
 800c860:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800c864:	0064      	lsls	r4, r4, #1
 800c866:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800c86a:	e7f0      	b.n	800c84e <powf+0xde>
 800c86c:	004b      	lsls	r3, r1, #1
 800c86e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800c872:	d8ee      	bhi.n	800c852 <powf+0xe2>
 800c874:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800c878:	d1eb      	bne.n	800c852 <powf+0xe2>
 800c87a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800c87e:	f000 8096 	beq.w	800c9ae <powf+0x23e>
 800c882:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800c886:	ea6f 0404 	mvn.w	r4, r4
 800c88a:	bf34      	ite	cc
 800c88c:	2300      	movcc	r3, #0
 800c88e:	2301      	movcs	r3, #1
 800c890:	0fe4      	lsrs	r4, r4, #31
 800c892:	42a3      	cmp	r3, r4
 800c894:	f040 808e 	bne.w	800c9b4 <powf+0x244>
 800c898:	ee24 0aa4 	vmul.f32	s0, s9, s9
 800c89c:	e7db      	b.n	800c856 <powf+0xe6>
 800c89e:	004d      	lsls	r5, r1, #1
 800c8a0:	1e6a      	subs	r2, r5, #1
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d91b      	bls.n	800c8de <powf+0x16e>
 800c8a6:	2900      	cmp	r1, #0
 800c8a8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c8ac:	da0e      	bge.n	800c8cc <powf+0x15c>
 800c8ae:	ee10 0a90 	vmov	r0, s1
 800c8b2:	f7ff ff43 	bl	800c73c <checkint>
 800c8b6:	2801      	cmp	r0, #1
 800c8b8:	d108      	bne.n	800c8cc <powf+0x15c>
 800c8ba:	eeb1 0a40 	vneg.f32	s0, s0
 800c8be:	b93d      	cbnz	r5, 800c8d0 <powf+0x160>
 800c8c0:	2c00      	cmp	r4, #0
 800c8c2:	dac8      	bge.n	800c856 <powf+0xe6>
 800c8c4:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800c8c8:	f000 bf6c 	b.w	800d7a4 <__math_divzerof>
 800c8cc:	2000      	movs	r0, #0
 800c8ce:	e7f6      	b.n	800c8be <powf+0x14e>
 800c8d0:	2c00      	cmp	r4, #0
 800c8d2:	dac0      	bge.n	800c856 <powf+0xe6>
 800c8d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c8d8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800c8dc:	e7bb      	b.n	800c856 <powf+0xe6>
 800c8de:	2900      	cmp	r1, #0
 800c8e0:	da1e      	bge.n	800c920 <powf+0x1b0>
 800c8e2:	ee10 0a90 	vmov	r0, s1
 800c8e6:	f7ff ff29 	bl	800c73c <checkint>
 800c8ea:	b918      	cbnz	r0, 800c8f4 <powf+0x184>
 800c8ec:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800c8f0:	f000 bf68 	b.w	800d7c4 <__math_invalidf>
 800c8f4:	2801      	cmp	r0, #1
 800c8f6:	bf0c      	ite	eq
 800c8f8:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c8fc:	2000      	movne	r0, #0
 800c8fe:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c902:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800c906:	f4bf af47 	bcs.w	800c798 <powf+0x28>
 800c90a:	eddf 0a35 	vldr	s1, [pc, #212]	; 800c9e0 <powf+0x270>
 800c90e:	ee20 0a20 	vmul.f32	s0, s0, s1
 800c912:	ee10 3a10 	vmov	r3, s0
 800c916:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c91a:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800c91e:	e73b      	b.n	800c798 <powf+0x28>
 800c920:	2000      	movs	r0, #0
 800c922:	e7ee      	b.n	800c902 <powf+0x192>
 800c924:	ed9f 7b28 	vldr	d7, [pc, #160]	; 800c9c8 <powf+0x258>
 800c928:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c930:	d803      	bhi.n	800c93a <powf+0x1ca>
 800c932:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800c936:	f000 bf23 	b.w	800d780 <__math_uflowf>
 800c93a:	ed9f 7b25 	vldr	d7, [pc, #148]	; 800c9d0 <powf+0x260>
 800c93e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c946:	d503      	bpl.n	800c950 <powf+0x1e0>
 800c948:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800c94c:	f000 bf1e 	b.w	800d78c <__math_may_uflowf>
 800c950:	4924      	ldr	r1, [pc, #144]	; (800c9e4 <powf+0x274>)
 800c952:	ed91 7b40 	vldr	d7, [r1, #256]	; 0x100
 800c956:	ee30 6b07 	vadd.f64	d6, d0, d7
 800c95a:	ec55 4b16 	vmov	r4, r5, d6
 800c95e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c962:	f004 021f 	and.w	r2, r4, #31
 800c966:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800c96a:	ed91 6b46 	vldr	d6, [r1, #280]	; 0x118
 800c96e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800c972:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800c976:	e9d2 6700 	ldrd	r6, r7, [r2]
 800c97a:	eea0 7b06 	vfma.f64	d7, d0, d6
 800c97e:	1824      	adds	r4, r4, r0
 800c980:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 800c984:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 800c988:	2000      	movs	r0, #0
 800c98a:	1982      	adds	r2, r0, r6
 800c98c:	ea4f 31c4 	mov.w	r1, r4, lsl #15
 800c990:	eb41 0307 	adc.w	r3, r1, r7
 800c994:	eea0 6b05 	vfma.f64	d6, d0, d5
 800c998:	ee20 0b00 	vmul.f64	d0, d0, d0
 800c99c:	eea6 7b00 	vfma.f64	d7, d6, d0
 800c9a0:	ec43 2b16 	vmov	d6, r2, r3
 800c9a4:	ee27 0b06 	vmul.f64	d0, d7, d6
 800c9a8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c9ac:	e753      	b.n	800c856 <powf+0xe6>
 800c9ae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c9b2:	e750      	b.n	800c856 <powf+0xe6>
 800c9b4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800c9e8 <powf+0x278>
 800c9b8:	e74d      	b.n	800c856 <powf+0xe6>
 800c9ba:	bf00      	nop
 800c9bc:	f3af 8000 	nop.w
 800c9c0:	ffd1d571 	.word	0xffd1d571
 800c9c4:	405fffff 	.word	0x405fffff
 800c9c8:	00000000 	.word	0x00000000
 800c9cc:	c062c000 	.word	0xc062c000
 800c9d0:	00000000 	.word	0x00000000
 800c9d4:	c062a000 	.word	0xc062a000
 800c9d8:	fefffffe 	.word	0xfefffffe
 800c9dc:	08127158 	.word	0x08127158
 800c9e0:	4b000000 	.word	0x4b000000
 800c9e4:	08126ef0 	.word	0x08126ef0
 800c9e8:	00000000 	.word	0x00000000

0800c9ec <tanf>:
 800c9ec:	ee10 3a10 	vmov	r3, s0
 800c9f0:	b507      	push	{r0, r1, r2, lr}
 800c9f2:	4a10      	ldr	r2, [pc, #64]	; (800ca34 <tanf+0x48>)
 800c9f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	dc05      	bgt.n	800ca08 <tanf+0x1c>
 800c9fc:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800ca38 <tanf+0x4c>
 800ca00:	2001      	movs	r0, #1
 800ca02:	f000 fdbf 	bl	800d584 <__kernel_tanf>
 800ca06:	e004      	b.n	800ca12 <tanf+0x26>
 800ca08:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ca0c:	db04      	blt.n	800ca18 <tanf+0x2c>
 800ca0e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ca12:	b003      	add	sp, #12
 800ca14:	f85d fb04 	ldr.w	pc, [sp], #4
 800ca18:	4668      	mov	r0, sp
 800ca1a:	f000 f993 	bl	800cd44 <__ieee754_rem_pio2f>
 800ca1e:	0040      	lsls	r0, r0, #1
 800ca20:	f000 0002 	and.w	r0, r0, #2
 800ca24:	f1c0 0001 	rsb	r0, r0, #1
 800ca28:	eddd 0a01 	vldr	s1, [sp, #4]
 800ca2c:	ed9d 0a00 	vldr	s0, [sp]
 800ca30:	e7e7      	b.n	800ca02 <tanf+0x16>
 800ca32:	bf00      	nop
 800ca34:	3f490fda 	.word	0x3f490fda
 800ca38:	00000000 	.word	0x00000000

0800ca3c <log10f>:
 800ca3c:	b500      	push	{lr}
 800ca3e:	ed2d 8b02 	vpush	{d8}
 800ca42:	b08b      	sub	sp, #44	; 0x2c
 800ca44:	eeb0 8a40 	vmov.f32	s16, s0
 800ca48:	f000 f926 	bl	800cc98 <__ieee754_log10f>
 800ca4c:	4b2f      	ldr	r3, [pc, #188]	; (800cb0c <log10f+0xd0>)
 800ca4e:	f993 3000 	ldrsb.w	r3, [r3]
 800ca52:	1c5a      	adds	r2, r3, #1
 800ca54:	d055      	beq.n	800cb02 <log10f+0xc6>
 800ca56:	eeb4 8a48 	vcmp.f32	s16, s16
 800ca5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca5e:	d650      	bvs.n	800cb02 <log10f+0xc6>
 800ca60:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ca64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca68:	d84b      	bhi.n	800cb02 <log10f+0xc6>
 800ca6a:	4a29      	ldr	r2, [pc, #164]	; (800cb10 <log10f+0xd4>)
 800ca6c:	9201      	str	r2, [sp, #4]
 800ca6e:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
 800ca72:	2200      	movs	r2, #0
 800ca74:	9208      	str	r2, [sp, #32]
 800ca76:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ca7a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ca7e:	b993      	cbnz	r3, 800caa6 <log10f+0x6a>
 800ca80:	4924      	ldr	r1, [pc, #144]	; (800cb14 <log10f+0xd8>)
 800ca82:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ca86:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 800ca8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ca92:	d025      	beq.n	800cae0 <log10f+0xa4>
 800ca94:	2201      	movs	r2, #1
 800ca96:	2b02      	cmp	r3, #2
 800ca98:	9200      	str	r2, [sp, #0]
 800ca9a:	d116      	bne.n	800caca <log10f+0x8e>
 800ca9c:	f7ff fcc2 	bl	800c424 <__errno>
 800caa0:	2321      	movs	r3, #33	; 0x21
 800caa2:	6003      	str	r3, [r0, #0]
 800caa4:	e016      	b.n	800cad4 <log10f+0x98>
 800caa6:	491c      	ldr	r1, [pc, #112]	; (800cb18 <log10f+0xdc>)
 800caa8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800caac:	2000      	movs	r0, #0
 800caae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cab2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cab6:	d1ed      	bne.n	800ca94 <log10f+0x58>
 800cab8:	2202      	movs	r2, #2
 800caba:	4293      	cmp	r3, r2
 800cabc:	9200      	str	r2, [sp, #0]
 800cabe:	d111      	bne.n	800cae4 <log10f+0xa8>
 800cac0:	f7ff fcb0 	bl	800c424 <__errno>
 800cac4:	2322      	movs	r3, #34	; 0x22
 800cac6:	6003      	str	r3, [r0, #0]
 800cac8:	e011      	b.n	800caee <log10f+0xb2>
 800caca:	4668      	mov	r0, sp
 800cacc:	f000 fe89 	bl	800d7e2 <matherr>
 800cad0:	2800      	cmp	r0, #0
 800cad2:	d0e3      	beq.n	800ca9c <log10f+0x60>
 800cad4:	4811      	ldr	r0, [pc, #68]	; (800cb1c <log10f+0xe0>)
 800cad6:	f000 fe87 	bl	800d7e8 <nan>
 800cada:	ed8d 0b06 	vstr	d0, [sp, #24]
 800cade:	e006      	b.n	800caee <log10f+0xb2>
 800cae0:	2302      	movs	r3, #2
 800cae2:	9300      	str	r3, [sp, #0]
 800cae4:	4668      	mov	r0, sp
 800cae6:	f000 fe7c 	bl	800d7e2 <matherr>
 800caea:	2800      	cmp	r0, #0
 800caec:	d0e8      	beq.n	800cac0 <log10f+0x84>
 800caee:	9b08      	ldr	r3, [sp, #32]
 800caf0:	b11b      	cbz	r3, 800cafa <log10f+0xbe>
 800caf2:	f7ff fc97 	bl	800c424 <__errno>
 800caf6:	9b08      	ldr	r3, [sp, #32]
 800caf8:	6003      	str	r3, [r0, #0]
 800cafa:	ed9d 0b06 	vldr	d0, [sp, #24]
 800cafe:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800cb02:	b00b      	add	sp, #44	; 0x2c
 800cb04:	ecbd 8b02 	vpop	{d8}
 800cb08:	f85d fb04 	ldr.w	pc, [sp], #4
 800cb0c:	20000128 	.word	0x20000128
 800cb10:	08127280 	.word	0x08127280
 800cb14:	c7efffff 	.word	0xc7efffff
 800cb18:	fff00000 	.word	0xfff00000
 800cb1c:	08127286 	.word	0x08127286

0800cb20 <sinhf>:
 800cb20:	b530      	push	{r4, r5, lr}
 800cb22:	ed2d 8b02 	vpush	{d8}
 800cb26:	4c32      	ldr	r4, [pc, #200]	; (800cbf0 <sinhf+0xd0>)
 800cb28:	b08b      	sub	sp, #44	; 0x2c
 800cb2a:	eef0 8a40 	vmov.f32	s17, s0
 800cb2e:	f000 fa35 	bl	800cf9c <__ieee754_sinhf>
 800cb32:	f994 3000 	ldrsb.w	r3, [r4]
 800cb36:	3301      	adds	r3, #1
 800cb38:	eeb0 8a40 	vmov.f32	s16, s0
 800cb3c:	d030      	beq.n	800cba0 <sinhf+0x80>
 800cb3e:	f000 ff85 	bl	800da4c <finitef>
 800cb42:	4605      	mov	r5, r0
 800cb44:	bb60      	cbnz	r0, 800cba0 <sinhf+0x80>
 800cb46:	eeb0 0a68 	vmov.f32	s0, s17
 800cb4a:	f000 ff7f 	bl	800da4c <finitef>
 800cb4e:	b338      	cbz	r0, 800cba0 <sinhf+0x80>
 800cb50:	2303      	movs	r3, #3
 800cb52:	9300      	str	r3, [sp, #0]
 800cb54:	4b27      	ldr	r3, [pc, #156]	; (800cbf4 <sinhf+0xd4>)
 800cb56:	9301      	str	r3, [sp, #4]
 800cb58:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
 800cb5c:	f994 3000 	ldrsb.w	r3, [r4]
 800cb60:	9508      	str	r5, [sp, #32]
 800cb62:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cb66:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cb6a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800cb6e:	b9eb      	cbnz	r3, 800cbac <sinhf+0x8c>
 800cb70:	ed9f 7b17 	vldr	d7, [pc, #92]	; 800cbd0 <sinhf+0xb0>
 800cb74:	ed9f 6b18 	vldr	d6, [pc, #96]	; 800cbd8 <sinhf+0xb8>
 800cb78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb7c:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800cb80:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cb84:	4668      	mov	r0, sp
 800cb86:	f000 fe2c 	bl	800d7e2 <matherr>
 800cb8a:	b1d8      	cbz	r0, 800cbc4 <sinhf+0xa4>
 800cb8c:	9b08      	ldr	r3, [sp, #32]
 800cb8e:	b11b      	cbz	r3, 800cb98 <sinhf+0x78>
 800cb90:	f7ff fc48 	bl	800c424 <__errno>
 800cb94:	9b08      	ldr	r3, [sp, #32]
 800cb96:	6003      	str	r3, [r0, #0]
 800cb98:	ed9d 8b06 	vldr	d8, [sp, #24]
 800cb9c:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
 800cba0:	eeb0 0a48 	vmov.f32	s0, s16
 800cba4:	b00b      	add	sp, #44	; 0x2c
 800cba6:	ecbd 8b02 	vpop	{d8}
 800cbaa:	bd30      	pop	{r4, r5, pc}
 800cbac:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800cbe0 <sinhf+0xc0>
 800cbb0:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800cbe8 <sinhf+0xc8>
 800cbb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbb8:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800cbbc:	2b02      	cmp	r3, #2
 800cbbe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cbc2:	d1df      	bne.n	800cb84 <sinhf+0x64>
 800cbc4:	f7ff fc2e 	bl	800c424 <__errno>
 800cbc8:	2322      	movs	r3, #34	; 0x22
 800cbca:	6003      	str	r3, [r0, #0]
 800cbcc:	e7de      	b.n	800cb8c <sinhf+0x6c>
 800cbce:	bf00      	nop
 800cbd0:	e0000000 	.word	0xe0000000
 800cbd4:	47efffff 	.word	0x47efffff
 800cbd8:	e0000000 	.word	0xe0000000
 800cbdc:	c7efffff 	.word	0xc7efffff
 800cbe0:	00000000 	.word	0x00000000
 800cbe4:	7ff00000 	.word	0x7ff00000
 800cbe8:	00000000 	.word	0x00000000
 800cbec:	fff00000 	.word	0xfff00000
 800cbf0:	20000128 	.word	0x20000128
 800cbf4:	08127287 	.word	0x08127287

0800cbf8 <sqrtf>:
 800cbf8:	b500      	push	{lr}
 800cbfa:	ed2d 8b02 	vpush	{d8}
 800cbfe:	b08b      	sub	sp, #44	; 0x2c
 800cc00:	eeb0 8a40 	vmov.f32	s16, s0
 800cc04:	f000 fa38 	bl	800d078 <__ieee754_sqrtf>
 800cc08:	4b21      	ldr	r3, [pc, #132]	; (800cc90 <sqrtf+0x98>)
 800cc0a:	f993 3000 	ldrsb.w	r3, [r3]
 800cc0e:	1c5a      	adds	r2, r3, #1
 800cc10:	d028      	beq.n	800cc64 <sqrtf+0x6c>
 800cc12:	eeb4 8a48 	vcmp.f32	s16, s16
 800cc16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc1a:	d623      	bvs.n	800cc64 <sqrtf+0x6c>
 800cc1c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cc20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc24:	d51e      	bpl.n	800cc64 <sqrtf+0x6c>
 800cc26:	2201      	movs	r2, #1
 800cc28:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 800cc2c:	9200      	str	r2, [sp, #0]
 800cc2e:	4a19      	ldr	r2, [pc, #100]	; (800cc94 <sqrtf+0x9c>)
 800cc30:	9201      	str	r2, [sp, #4]
 800cc32:	2200      	movs	r2, #0
 800cc34:	9208      	str	r2, [sp, #32]
 800cc36:	ed8d 8b04 	vstr	d8, [sp, #16]
 800cc3a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cc3e:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800cc88 <sqrtf+0x90>
 800cc42:	b9a3      	cbnz	r3, 800cc6e <sqrtf+0x76>
 800cc44:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cc48:	4668      	mov	r0, sp
 800cc4a:	f000 fdca 	bl	800d7e2 <matherr>
 800cc4e:	b1a0      	cbz	r0, 800cc7a <sqrtf+0x82>
 800cc50:	9b08      	ldr	r3, [sp, #32]
 800cc52:	b11b      	cbz	r3, 800cc5c <sqrtf+0x64>
 800cc54:	f7ff fbe6 	bl	800c424 <__errno>
 800cc58:	9b08      	ldr	r3, [sp, #32]
 800cc5a:	6003      	str	r3, [r0, #0]
 800cc5c:	ed9d 0b06 	vldr	d0, [sp, #24]
 800cc60:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800cc64:	b00b      	add	sp, #44	; 0x2c
 800cc66:	ecbd 8b02 	vpop	{d8}
 800cc6a:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc6e:	2b02      	cmp	r3, #2
 800cc70:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800cc74:	ed8d 6b06 	vstr	d6, [sp, #24]
 800cc78:	d1e6      	bne.n	800cc48 <sqrtf+0x50>
 800cc7a:	f7ff fbd3 	bl	800c424 <__errno>
 800cc7e:	2321      	movs	r3, #33	; 0x21
 800cc80:	6003      	str	r3, [r0, #0]
 800cc82:	e7e5      	b.n	800cc50 <sqrtf+0x58>
 800cc84:	f3af 8000 	nop.w
	...
 800cc90:	20000128 	.word	0x20000128
 800cc94:	0812728d 	.word	0x0812728d

0800cc98 <__ieee754_log10f>:
 800cc98:	b508      	push	{r3, lr}
 800cc9a:	ee10 2a10 	vmov	r2, s0
 800cc9e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800cca2:	ed2d 8b02 	vpush	{d8}
 800cca6:	d108      	bne.n	800ccba <__ieee754_log10f+0x22>
 800cca8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800cd2c <__ieee754_log10f+0x94>
 800ccac:	eddf 7a20 	vldr	s15, [pc, #128]	; 800cd30 <__ieee754_log10f+0x98>
 800ccb0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800ccb4:	ecbd 8b02 	vpop	{d8}
 800ccb8:	bd08      	pop	{r3, pc}
 800ccba:	2a00      	cmp	r2, #0
 800ccbc:	da02      	bge.n	800ccc4 <__ieee754_log10f+0x2c>
 800ccbe:	ee30 7a40 	vsub.f32	s14, s0, s0
 800ccc2:	e7f3      	b.n	800ccac <__ieee754_log10f+0x14>
 800ccc4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ccc8:	db02      	blt.n	800ccd0 <__ieee754_log10f+0x38>
 800ccca:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ccce:	e7f1      	b.n	800ccb4 <__ieee754_log10f+0x1c>
 800ccd0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800ccd4:	bfbf      	itttt	lt
 800ccd6:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 800cd34 <__ieee754_log10f+0x9c>
 800ccda:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800ccde:	f06f 0118 	mvnlt.w	r1, #24
 800cce2:	ee17 2a90 	vmovlt	r2, s15
 800cce6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800ccea:	bfa8      	it	ge
 800ccec:	2100      	movge	r1, #0
 800ccee:	3b7f      	subs	r3, #127	; 0x7f
 800ccf0:	440b      	add	r3, r1
 800ccf2:	0fd9      	lsrs	r1, r3, #31
 800ccf4:	440b      	add	r3, r1
 800ccf6:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800ccfa:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 800ccfe:	ee07 3a90 	vmov	s15, r3
 800cd02:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 800cd06:	ee00 3a10 	vmov	s0, r3
 800cd0a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800cd0e:	f7ff fcad 	bl	800c66c <logf>
 800cd12:	eddf 7a09 	vldr	s15, [pc, #36]	; 800cd38 <__ieee754_log10f+0xa0>
 800cd16:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cd1a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800cd3c <__ieee754_log10f+0xa4>
 800cd1e:	eea8 0a27 	vfma.f32	s0, s16, s15
 800cd22:	eddf 7a07 	vldr	s15, [pc, #28]	; 800cd40 <__ieee754_log10f+0xa8>
 800cd26:	eea8 0a27 	vfma.f32	s0, s16, s15
 800cd2a:	e7c3      	b.n	800ccb4 <__ieee754_log10f+0x1c>
 800cd2c:	cc000000 	.word	0xcc000000
 800cd30:	00000000 	.word	0x00000000
 800cd34:	4c000000 	.word	0x4c000000
 800cd38:	3ede5bd9 	.word	0x3ede5bd9
 800cd3c:	355427db 	.word	0x355427db
 800cd40:	3e9a2080 	.word	0x3e9a2080

0800cd44 <__ieee754_rem_pio2f>:
 800cd44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd46:	ee10 6a10 	vmov	r6, s0
 800cd4a:	4b86      	ldr	r3, [pc, #536]	; (800cf64 <__ieee754_rem_pio2f+0x220>)
 800cd4c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800cd50:	429c      	cmp	r4, r3
 800cd52:	b087      	sub	sp, #28
 800cd54:	4605      	mov	r5, r0
 800cd56:	dc05      	bgt.n	800cd64 <__ieee754_rem_pio2f+0x20>
 800cd58:	2300      	movs	r3, #0
 800cd5a:	ed85 0a00 	vstr	s0, [r5]
 800cd5e:	6043      	str	r3, [r0, #4]
 800cd60:	2000      	movs	r0, #0
 800cd62:	e020      	b.n	800cda6 <__ieee754_rem_pio2f+0x62>
 800cd64:	4b80      	ldr	r3, [pc, #512]	; (800cf68 <__ieee754_rem_pio2f+0x224>)
 800cd66:	429c      	cmp	r4, r3
 800cd68:	dc38      	bgt.n	800cddc <__ieee754_rem_pio2f+0x98>
 800cd6a:	2e00      	cmp	r6, #0
 800cd6c:	f024 040f 	bic.w	r4, r4, #15
 800cd70:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800cf6c <__ieee754_rem_pio2f+0x228>
 800cd74:	4b7e      	ldr	r3, [pc, #504]	; (800cf70 <__ieee754_rem_pio2f+0x22c>)
 800cd76:	dd18      	ble.n	800cdaa <__ieee754_rem_pio2f+0x66>
 800cd78:	429c      	cmp	r4, r3
 800cd7a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800cd7e:	bf09      	itett	eq
 800cd80:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800cf74 <__ieee754_rem_pio2f+0x230>
 800cd84:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800cf78 <__ieee754_rem_pio2f+0x234>
 800cd88:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800cd8c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800cf7c <__ieee754_rem_pio2f+0x238>
 800cd90:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800cd94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cd98:	edc0 6a00 	vstr	s13, [r0]
 800cd9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cda0:	edc0 7a01 	vstr	s15, [r0, #4]
 800cda4:	2001      	movs	r0, #1
 800cda6:	b007      	add	sp, #28
 800cda8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdaa:	429c      	cmp	r4, r3
 800cdac:	ee70 7a07 	vadd.f32	s15, s0, s14
 800cdb0:	bf09      	itett	eq
 800cdb2:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800cf74 <__ieee754_rem_pio2f+0x230>
 800cdb6:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800cf78 <__ieee754_rem_pio2f+0x234>
 800cdba:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800cdbe:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800cf7c <__ieee754_rem_pio2f+0x238>
 800cdc2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cdc6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cdca:	edc0 6a00 	vstr	s13, [r0]
 800cdce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cdd2:	edc0 7a01 	vstr	s15, [r0, #4]
 800cdd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cdda:	e7e4      	b.n	800cda6 <__ieee754_rem_pio2f+0x62>
 800cddc:	4b68      	ldr	r3, [pc, #416]	; (800cf80 <__ieee754_rem_pio2f+0x23c>)
 800cdde:	429c      	cmp	r4, r3
 800cde0:	dc71      	bgt.n	800cec6 <__ieee754_rem_pio2f+0x182>
 800cde2:	f7ff fc3b 	bl	800c65c <fabsf>
 800cde6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800cf84 <__ieee754_rem_pio2f+0x240>
 800cdea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cdee:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cdf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cdf6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800cdfa:	ee17 0a90 	vmov	r0, s15
 800cdfe:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800cf6c <__ieee754_rem_pio2f+0x228>
 800ce02:	eeb1 7a46 	vneg.f32	s14, s12
 800ce06:	eea7 0a27 	vfma.f32	s0, s14, s15
 800ce0a:	281f      	cmp	r0, #31
 800ce0c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800cf78 <__ieee754_rem_pio2f+0x234>
 800ce10:	ee66 7a27 	vmul.f32	s15, s12, s15
 800ce14:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ce18:	ee16 3a90 	vmov	r3, s13
 800ce1c:	dc1c      	bgt.n	800ce58 <__ieee754_rem_pio2f+0x114>
 800ce1e:	1e47      	subs	r7, r0, #1
 800ce20:	4959      	ldr	r1, [pc, #356]	; (800cf88 <__ieee754_rem_pio2f+0x244>)
 800ce22:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800ce26:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800ce2a:	428a      	cmp	r2, r1
 800ce2c:	d014      	beq.n	800ce58 <__ieee754_rem_pio2f+0x114>
 800ce2e:	602b      	str	r3, [r5, #0]
 800ce30:	ed95 7a00 	vldr	s14, [r5]
 800ce34:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ce38:	2e00      	cmp	r6, #0
 800ce3a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ce3e:	ed85 0a01 	vstr	s0, [r5, #4]
 800ce42:	dab0      	bge.n	800cda6 <__ieee754_rem_pio2f+0x62>
 800ce44:	eeb1 7a47 	vneg.f32	s14, s14
 800ce48:	eeb1 0a40 	vneg.f32	s0, s0
 800ce4c:	ed85 7a00 	vstr	s14, [r5]
 800ce50:	ed85 0a01 	vstr	s0, [r5, #4]
 800ce54:	4240      	negs	r0, r0
 800ce56:	e7a6      	b.n	800cda6 <__ieee754_rem_pio2f+0x62>
 800ce58:	15e4      	asrs	r4, r4, #23
 800ce5a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ce5e:	1aa2      	subs	r2, r4, r2
 800ce60:	2a08      	cmp	r2, #8
 800ce62:	dde4      	ble.n	800ce2e <__ieee754_rem_pio2f+0xea>
 800ce64:	eddf 7a43 	vldr	s15, [pc, #268]	; 800cf74 <__ieee754_rem_pio2f+0x230>
 800ce68:	eef0 6a40 	vmov.f32	s13, s0
 800ce6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ce70:	ee30 0a66 	vsub.f32	s0, s0, s13
 800ce74:	eea7 0a27 	vfma.f32	s0, s14, s15
 800ce78:	eddf 7a40 	vldr	s15, [pc, #256]	; 800cf7c <__ieee754_rem_pio2f+0x238>
 800ce7c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800ce80:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800ce84:	eef0 7a40 	vmov.f32	s15, s0
 800ce88:	ee15 3a90 	vmov	r3, s11
 800ce8c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ce90:	1aa4      	subs	r4, r4, r2
 800ce92:	2c19      	cmp	r4, #25
 800ce94:	dc04      	bgt.n	800cea0 <__ieee754_rem_pio2f+0x15c>
 800ce96:	edc5 5a00 	vstr	s11, [r5]
 800ce9a:	eeb0 0a66 	vmov.f32	s0, s13
 800ce9e:	e7c7      	b.n	800ce30 <__ieee754_rem_pio2f+0xec>
 800cea0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800cf8c <__ieee754_rem_pio2f+0x248>
 800cea4:	eeb0 0a66 	vmov.f32	s0, s13
 800cea8:	eea7 0a25 	vfma.f32	s0, s14, s11
 800ceac:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800ceb0:	eee7 7a25 	vfma.f32	s15, s14, s11
 800ceb4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800cf90 <__ieee754_rem_pio2f+0x24c>
 800ceb8:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800cebc:	ee30 7a67 	vsub.f32	s14, s0, s15
 800cec0:	ed85 7a00 	vstr	s14, [r5]
 800cec4:	e7b4      	b.n	800ce30 <__ieee754_rem_pio2f+0xec>
 800cec6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800ceca:	db06      	blt.n	800ceda <__ieee754_rem_pio2f+0x196>
 800cecc:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ced0:	edc0 7a01 	vstr	s15, [r0, #4]
 800ced4:	edc0 7a00 	vstr	s15, [r0]
 800ced8:	e742      	b.n	800cd60 <__ieee754_rem_pio2f+0x1c>
 800ceda:	15e2      	asrs	r2, r4, #23
 800cedc:	3a86      	subs	r2, #134	; 0x86
 800cede:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800cee2:	ee07 3a90 	vmov	s15, r3
 800cee6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ceea:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800cf94 <__ieee754_rem_pio2f+0x250>
 800ceee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cef2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cef6:	ed8d 7a03 	vstr	s14, [sp, #12]
 800cefa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cefe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800cf02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cf06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cf0a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800cf0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cf12:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cf16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf1a:	edcd 7a05 	vstr	s15, [sp, #20]
 800cf1e:	d11e      	bne.n	800cf5e <__ieee754_rem_pio2f+0x21a>
 800cf20:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cf24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf28:	bf0c      	ite	eq
 800cf2a:	2301      	moveq	r3, #1
 800cf2c:	2302      	movne	r3, #2
 800cf2e:	491a      	ldr	r1, [pc, #104]	; (800cf98 <__ieee754_rem_pio2f+0x254>)
 800cf30:	9101      	str	r1, [sp, #4]
 800cf32:	2102      	movs	r1, #2
 800cf34:	9100      	str	r1, [sp, #0]
 800cf36:	a803      	add	r0, sp, #12
 800cf38:	4629      	mov	r1, r5
 800cf3a:	f000 f8a1 	bl	800d080 <__kernel_rem_pio2f>
 800cf3e:	2e00      	cmp	r6, #0
 800cf40:	f6bf af31 	bge.w	800cda6 <__ieee754_rem_pio2f+0x62>
 800cf44:	edd5 7a00 	vldr	s15, [r5]
 800cf48:	eef1 7a67 	vneg.f32	s15, s15
 800cf4c:	edc5 7a00 	vstr	s15, [r5]
 800cf50:	edd5 7a01 	vldr	s15, [r5, #4]
 800cf54:	eef1 7a67 	vneg.f32	s15, s15
 800cf58:	edc5 7a01 	vstr	s15, [r5, #4]
 800cf5c:	e77a      	b.n	800ce54 <__ieee754_rem_pio2f+0x110>
 800cf5e:	2303      	movs	r3, #3
 800cf60:	e7e5      	b.n	800cf2e <__ieee754_rem_pio2f+0x1ea>
 800cf62:	bf00      	nop
 800cf64:	3f490fd8 	.word	0x3f490fd8
 800cf68:	4016cbe3 	.word	0x4016cbe3
 800cf6c:	3fc90f80 	.word	0x3fc90f80
 800cf70:	3fc90fd0 	.word	0x3fc90fd0
 800cf74:	37354400 	.word	0x37354400
 800cf78:	37354443 	.word	0x37354443
 800cf7c:	2e85a308 	.word	0x2e85a308
 800cf80:	43490f80 	.word	0x43490f80
 800cf84:	3f22f984 	.word	0x3f22f984
 800cf88:	08127294 	.word	0x08127294
 800cf8c:	2e85a300 	.word	0x2e85a300
 800cf90:	248d3132 	.word	0x248d3132
 800cf94:	43800000 	.word	0x43800000
 800cf98:	08127314 	.word	0x08127314

0800cf9c <__ieee754_sinhf>:
 800cf9c:	b510      	push	{r4, lr}
 800cf9e:	ee10 3a10 	vmov	r3, s0
 800cfa2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800cfa6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800cfaa:	ed2d 8b02 	vpush	{d8}
 800cfae:	eef0 7a40 	vmov.f32	s15, s0
 800cfb2:	db06      	blt.n	800cfc2 <__ieee754_sinhf+0x26>
 800cfb4:	ee70 7a00 	vadd.f32	s15, s0, s0
 800cfb8:	ecbd 8b02 	vpop	{d8}
 800cfbc:	eeb0 0a67 	vmov.f32	s0, s15
 800cfc0:	bd10      	pop	{r4, pc}
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	4b28      	ldr	r3, [pc, #160]	; (800d068 <__ieee754_sinhf+0xcc>)
 800cfc6:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 800cfca:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 800cfce:	fe28 8a88 	vselge.f32	s16, s17, s16
 800cfd2:	429c      	cmp	r4, r3
 800cfd4:	dc2a      	bgt.n	800d02c <__ieee754_sinhf+0x90>
 800cfd6:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 800cfda:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800cfde:	da08      	bge.n	800cff2 <__ieee754_sinhf+0x56>
 800cfe0:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800d06c <__ieee754_sinhf+0xd0>
 800cfe4:	ee30 7a07 	vadd.f32	s14, s0, s14
 800cfe8:	eeb4 7ae8 	vcmpe.f32	s14, s17
 800cfec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cff0:	dce2      	bgt.n	800cfb8 <__ieee754_sinhf+0x1c>
 800cff2:	eeb0 0a67 	vmov.f32	s0, s15
 800cff6:	f7ff fb31 	bl	800c65c <fabsf>
 800cffa:	f000 fbfd 	bl	800d7f8 <expm1f>
 800cffe:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800d002:	bfbb      	ittet	lt
 800d004:	ee20 7a00 	vmullt.f32	s14, s0, s0
 800d008:	ee70 8a28 	vaddlt.f32	s17, s0, s17
 800d00c:	ee70 8a28 	vaddge.f32	s17, s0, s17
 800d010:	eec7 7a28 	vdivlt.f32	s15, s14, s17
 800d014:	bfad      	iteet	ge
 800d016:	eec0 7a28 	vdivge.f32	s15, s0, s17
 800d01a:	eeb0 7a00 	vmovlt.f32	s14, #0	; 0x40000000  2.0
 800d01e:	eed0 7a07 	vfnmslt.f32	s15, s0, s14
 800d022:	ee77 7a80 	vaddge.f32	s15, s15, s0
 800d026:	ee67 7a88 	vmul.f32	s15, s15, s16
 800d02a:	e7c5      	b.n	800cfb8 <__ieee754_sinhf+0x1c>
 800d02c:	4b10      	ldr	r3, [pc, #64]	; (800d070 <__ieee754_sinhf+0xd4>)
 800d02e:	429c      	cmp	r4, r3
 800d030:	dc06      	bgt.n	800d040 <__ieee754_sinhf+0xa4>
 800d032:	f7ff fb13 	bl	800c65c <fabsf>
 800d036:	f7ff fa93 	bl	800c560 <expf>
 800d03a:	ee60 7a08 	vmul.f32	s15, s0, s16
 800d03e:	e7bb      	b.n	800cfb8 <__ieee754_sinhf+0x1c>
 800d040:	4b0c      	ldr	r3, [pc, #48]	; (800d074 <__ieee754_sinhf+0xd8>)
 800d042:	429c      	cmp	r4, r3
 800d044:	dc0a      	bgt.n	800d05c <__ieee754_sinhf+0xc0>
 800d046:	f7ff fb09 	bl	800c65c <fabsf>
 800d04a:	ee20 0a28 	vmul.f32	s0, s0, s17
 800d04e:	f7ff fa87 	bl	800c560 <expf>
 800d052:	ee68 7a00 	vmul.f32	s15, s16, s0
 800d056:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d05a:	e7ad      	b.n	800cfb8 <__ieee754_sinhf+0x1c>
 800d05c:	ed9f 7a03 	vldr	s14, [pc, #12]	; 800d06c <__ieee754_sinhf+0xd0>
 800d060:	ee60 7a07 	vmul.f32	s15, s0, s14
 800d064:	e7a8      	b.n	800cfb8 <__ieee754_sinhf+0x1c>
 800d066:	bf00      	nop
 800d068:	41afffff 	.word	0x41afffff
 800d06c:	7cf0bdc2 	.word	0x7cf0bdc2
 800d070:	42b17217 	.word	0x42b17217
 800d074:	42b2d4fc 	.word	0x42b2d4fc

0800d078 <__ieee754_sqrtf>:
 800d078:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d07c:	4770      	bx	lr
	...

0800d080 <__kernel_rem_pio2f>:
 800d080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d084:	ed2d 8b04 	vpush	{d8-d9}
 800d088:	b0d7      	sub	sp, #348	; 0x15c
 800d08a:	469b      	mov	fp, r3
 800d08c:	460e      	mov	r6, r1
 800d08e:	4bbe      	ldr	r3, [pc, #760]	; (800d388 <__kernel_rem_pio2f+0x308>)
 800d090:	9964      	ldr	r1, [sp, #400]	; 0x190
 800d092:	9002      	str	r0, [sp, #8]
 800d094:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800d098:	9865      	ldr	r0, [sp, #404]	; 0x194
 800d09a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800d398 <__kernel_rem_pio2f+0x318>
 800d09e:	1ed1      	subs	r1, r2, #3
 800d0a0:	2308      	movs	r3, #8
 800d0a2:	fb91 f1f3 	sdiv	r1, r1, r3
 800d0a6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800d0aa:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 800d0ae:	1c4c      	adds	r4, r1, #1
 800d0b0:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800d0b4:	eba1 050a 	sub.w	r5, r1, sl
 800d0b8:	aa1a      	add	r2, sp, #104	; 0x68
 800d0ba:	eb09 070a 	add.w	r7, r9, sl
 800d0be:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800d0c2:	4696      	mov	lr, r2
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	42bb      	cmp	r3, r7
 800d0c8:	dd0f      	ble.n	800d0ea <__kernel_rem_pio2f+0x6a>
 800d0ca:	af42      	add	r7, sp, #264	; 0x108
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	454a      	cmp	r2, r9
 800d0d0:	dc27      	bgt.n	800d122 <__kernel_rem_pio2f+0xa2>
 800d0d2:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800d0d6:	eb0b 0302 	add.w	r3, fp, r2
 800d0da:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800d0de:	9d02      	ldr	r5, [sp, #8]
 800d0e0:	eddf 7aad 	vldr	s15, [pc, #692]	; 800d398 <__kernel_rem_pio2f+0x318>
 800d0e4:	f04f 0c00 	mov.w	ip, #0
 800d0e8:	e015      	b.n	800d116 <__kernel_rem_pio2f+0x96>
 800d0ea:	42dd      	cmn	r5, r3
 800d0ec:	bf5d      	ittte	pl
 800d0ee:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800d0f2:	ee07 2a90 	vmovpl	s15, r2
 800d0f6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d0fa:	eef0 7a47 	vmovmi.f32	s15, s14
 800d0fe:	ecee 7a01 	vstmia	lr!, {s15}
 800d102:	3301      	adds	r3, #1
 800d104:	e7df      	b.n	800d0c6 <__kernel_rem_pio2f+0x46>
 800d106:	ecf5 6a01 	vldmia	r5!, {s13}
 800d10a:	ed33 7a01 	vldmdb	r3!, {s14}
 800d10e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d112:	f10c 0c01 	add.w	ip, ip, #1
 800d116:	45d4      	cmp	ip, sl
 800d118:	ddf5      	ble.n	800d106 <__kernel_rem_pio2f+0x86>
 800d11a:	ece7 7a01 	vstmia	r7!, {s15}
 800d11e:	3201      	adds	r2, #1
 800d120:	e7d5      	b.n	800d0ce <__kernel_rem_pio2f+0x4e>
 800d122:	ab06      	add	r3, sp, #24
 800d124:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800d128:	9304      	str	r3, [sp, #16]
 800d12a:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800d394 <__kernel_rem_pio2f+0x314>
 800d12e:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800d390 <__kernel_rem_pio2f+0x310>
 800d132:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800d136:	9303      	str	r3, [sp, #12]
 800d138:	464d      	mov	r5, r9
 800d13a:	ab56      	add	r3, sp, #344	; 0x158
 800d13c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800d140:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800d144:	3f01      	subs	r7, #1
 800d146:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800d14a:	00bf      	lsls	r7, r7, #2
 800d14c:	ab56      	add	r3, sp, #344	; 0x158
 800d14e:	19da      	adds	r2, r3, r7
 800d150:	3a4c      	subs	r2, #76	; 0x4c
 800d152:	2300      	movs	r3, #0
 800d154:	1ae9      	subs	r1, r5, r3
 800d156:	2900      	cmp	r1, #0
 800d158:	dc4c      	bgt.n	800d1f4 <__kernel_rem_pio2f+0x174>
 800d15a:	4620      	mov	r0, r4
 800d15c:	f000 fcc2 	bl	800dae4 <scalbnf>
 800d160:	eeb0 8a40 	vmov.f32	s16, s0
 800d164:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800d168:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d16c:	f000 fc78 	bl	800da60 <floorf>
 800d170:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800d174:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d178:	2c00      	cmp	r4, #0
 800d17a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d17e:	edcd 7a01 	vstr	s15, [sp, #4]
 800d182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d186:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d18a:	dd48      	ble.n	800d21e <__kernel_rem_pio2f+0x19e>
 800d18c:	1e69      	subs	r1, r5, #1
 800d18e:	ab06      	add	r3, sp, #24
 800d190:	f1c4 0008 	rsb	r0, r4, #8
 800d194:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800d198:	9a01      	ldr	r2, [sp, #4]
 800d19a:	fa4c f300 	asr.w	r3, ip, r0
 800d19e:	441a      	add	r2, r3
 800d1a0:	4083      	lsls	r3, r0
 800d1a2:	9201      	str	r2, [sp, #4]
 800d1a4:	ebac 0203 	sub.w	r2, ip, r3
 800d1a8:	ab06      	add	r3, sp, #24
 800d1aa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800d1ae:	f1c4 0307 	rsb	r3, r4, #7
 800d1b2:	fa42 f803 	asr.w	r8, r2, r3
 800d1b6:	f1b8 0f00 	cmp.w	r8, #0
 800d1ba:	dd41      	ble.n	800d240 <__kernel_rem_pio2f+0x1c0>
 800d1bc:	9b01      	ldr	r3, [sp, #4]
 800d1be:	2000      	movs	r0, #0
 800d1c0:	3301      	adds	r3, #1
 800d1c2:	9301      	str	r3, [sp, #4]
 800d1c4:	4601      	mov	r1, r0
 800d1c6:	4285      	cmp	r5, r0
 800d1c8:	dc6d      	bgt.n	800d2a6 <__kernel_rem_pio2f+0x226>
 800d1ca:	2c00      	cmp	r4, #0
 800d1cc:	dd04      	ble.n	800d1d8 <__kernel_rem_pio2f+0x158>
 800d1ce:	2c01      	cmp	r4, #1
 800d1d0:	d07e      	beq.n	800d2d0 <__kernel_rem_pio2f+0x250>
 800d1d2:	2c02      	cmp	r4, #2
 800d1d4:	f000 8086 	beq.w	800d2e4 <__kernel_rem_pio2f+0x264>
 800d1d8:	f1b8 0f02 	cmp.w	r8, #2
 800d1dc:	d130      	bne.n	800d240 <__kernel_rem_pio2f+0x1c0>
 800d1de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d1e2:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d1e6:	b359      	cbz	r1, 800d240 <__kernel_rem_pio2f+0x1c0>
 800d1e8:	4620      	mov	r0, r4
 800d1ea:	f000 fc7b 	bl	800dae4 <scalbnf>
 800d1ee:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d1f2:	e025      	b.n	800d240 <__kernel_rem_pio2f+0x1c0>
 800d1f4:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d1f8:	a806      	add	r0, sp, #24
 800d1fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d1fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d202:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d206:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d20a:	ee10 1a10 	vmov	r1, s0
 800d20e:	ed32 0a01 	vldmdb	r2!, {s0}
 800d212:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800d216:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d21a:	3301      	adds	r3, #1
 800d21c:	e79a      	b.n	800d154 <__kernel_rem_pio2f+0xd4>
 800d21e:	d106      	bne.n	800d22e <__kernel_rem_pio2f+0x1ae>
 800d220:	1e6b      	subs	r3, r5, #1
 800d222:	aa06      	add	r2, sp, #24
 800d224:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d228:	ea4f 2822 	mov.w	r8, r2, asr #8
 800d22c:	e7c3      	b.n	800d1b6 <__kernel_rem_pio2f+0x136>
 800d22e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d232:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d23a:	da31      	bge.n	800d2a0 <__kernel_rem_pio2f+0x220>
 800d23c:	f04f 0800 	mov.w	r8, #0
 800d240:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d248:	f040 80a8 	bne.w	800d39c <__kernel_rem_pio2f+0x31c>
 800d24c:	1e6b      	subs	r3, r5, #1
 800d24e:	4618      	mov	r0, r3
 800d250:	2200      	movs	r2, #0
 800d252:	4548      	cmp	r0, r9
 800d254:	da4d      	bge.n	800d2f2 <__kernel_rem_pio2f+0x272>
 800d256:	2a00      	cmp	r2, #0
 800d258:	f000 8087 	beq.w	800d36a <__kernel_rem_pio2f+0x2ea>
 800d25c:	aa06      	add	r2, sp, #24
 800d25e:	3c08      	subs	r4, #8
 800d260:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d264:	2900      	cmp	r1, #0
 800d266:	f000 808d 	beq.w	800d384 <__kernel_rem_pio2f+0x304>
 800d26a:	4620      	mov	r0, r4
 800d26c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d270:	9302      	str	r3, [sp, #8]
 800d272:	f000 fc37 	bl	800dae4 <scalbnf>
 800d276:	9b02      	ldr	r3, [sp, #8]
 800d278:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800d394 <__kernel_rem_pio2f+0x314>
 800d27c:	0099      	lsls	r1, r3, #2
 800d27e:	aa42      	add	r2, sp, #264	; 0x108
 800d280:	1850      	adds	r0, r2, r1
 800d282:	1d05      	adds	r5, r0, #4
 800d284:	461c      	mov	r4, r3
 800d286:	2c00      	cmp	r4, #0
 800d288:	f280 80b8 	bge.w	800d3fc <__kernel_rem_pio2f+0x37c>
 800d28c:	2500      	movs	r5, #0
 800d28e:	1b5c      	subs	r4, r3, r5
 800d290:	2c00      	cmp	r4, #0
 800d292:	f2c0 80d8 	blt.w	800d446 <__kernel_rem_pio2f+0x3c6>
 800d296:	4f3d      	ldr	r7, [pc, #244]	; (800d38c <__kernel_rem_pio2f+0x30c>)
 800d298:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800d398 <__kernel_rem_pio2f+0x318>
 800d29c:	2400      	movs	r4, #0
 800d29e:	e0c6      	b.n	800d42e <__kernel_rem_pio2f+0x3ae>
 800d2a0:	f04f 0802 	mov.w	r8, #2
 800d2a4:	e78a      	b.n	800d1bc <__kernel_rem_pio2f+0x13c>
 800d2a6:	ab06      	add	r3, sp, #24
 800d2a8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d2ac:	b949      	cbnz	r1, 800d2c2 <__kernel_rem_pio2f+0x242>
 800d2ae:	b12b      	cbz	r3, 800d2bc <__kernel_rem_pio2f+0x23c>
 800d2b0:	aa06      	add	r2, sp, #24
 800d2b2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800d2b6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	3001      	adds	r0, #1
 800d2be:	4619      	mov	r1, r3
 800d2c0:	e781      	b.n	800d1c6 <__kernel_rem_pio2f+0x146>
 800d2c2:	aa06      	add	r2, sp, #24
 800d2c4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800d2c8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	e7f5      	b.n	800d2bc <__kernel_rem_pio2f+0x23c>
 800d2d0:	1e68      	subs	r0, r5, #1
 800d2d2:	ab06      	add	r3, sp, #24
 800d2d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d2d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2dc:	aa06      	add	r2, sp, #24
 800d2de:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d2e2:	e779      	b.n	800d1d8 <__kernel_rem_pio2f+0x158>
 800d2e4:	1e68      	subs	r0, r5, #1
 800d2e6:	ab06      	add	r3, sp, #24
 800d2e8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d2ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2f0:	e7f4      	b.n	800d2dc <__kernel_rem_pio2f+0x25c>
 800d2f2:	a906      	add	r1, sp, #24
 800d2f4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d2f8:	3801      	subs	r0, #1
 800d2fa:	430a      	orrs	r2, r1
 800d2fc:	e7a9      	b.n	800d252 <__kernel_rem_pio2f+0x1d2>
 800d2fe:	f10c 0c01 	add.w	ip, ip, #1
 800d302:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d306:	2a00      	cmp	r2, #0
 800d308:	d0f9      	beq.n	800d2fe <__kernel_rem_pio2f+0x27e>
 800d30a:	eb0b 0305 	add.w	r3, fp, r5
 800d30e:	aa1a      	add	r2, sp, #104	; 0x68
 800d310:	009b      	lsls	r3, r3, #2
 800d312:	1898      	adds	r0, r3, r2
 800d314:	3004      	adds	r0, #4
 800d316:	1c69      	adds	r1, r5, #1
 800d318:	3704      	adds	r7, #4
 800d31a:	2200      	movs	r2, #0
 800d31c:	4465      	add	r5, ip
 800d31e:	9005      	str	r0, [sp, #20]
 800d320:	428d      	cmp	r5, r1
 800d322:	f6ff af0a 	blt.w	800d13a <__kernel_rem_pio2f+0xba>
 800d326:	a81a      	add	r0, sp, #104	; 0x68
 800d328:	eb02 0c03 	add.w	ip, r2, r3
 800d32c:	4484      	add	ip, r0
 800d32e:	9803      	ldr	r0, [sp, #12]
 800d330:	f8dd e008 	ldr.w	lr, [sp, #8]
 800d334:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800d338:	9001      	str	r0, [sp, #4]
 800d33a:	ee07 0a90 	vmov	s15, r0
 800d33e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d342:	9805      	ldr	r0, [sp, #20]
 800d344:	edcc 7a00 	vstr	s15, [ip]
 800d348:	eddf 7a13 	vldr	s15, [pc, #76]	; 800d398 <__kernel_rem_pio2f+0x318>
 800d34c:	eb00 0802 	add.w	r8, r0, r2
 800d350:	f04f 0c00 	mov.w	ip, #0
 800d354:	45d4      	cmp	ip, sl
 800d356:	dd0c      	ble.n	800d372 <__kernel_rem_pio2f+0x2f2>
 800d358:	eb02 0c07 	add.w	ip, r2, r7
 800d35c:	a842      	add	r0, sp, #264	; 0x108
 800d35e:	4484      	add	ip, r0
 800d360:	edcc 7a01 	vstr	s15, [ip, #4]
 800d364:	3101      	adds	r1, #1
 800d366:	3204      	adds	r2, #4
 800d368:	e7da      	b.n	800d320 <__kernel_rem_pio2f+0x2a0>
 800d36a:	9b04      	ldr	r3, [sp, #16]
 800d36c:	f04f 0c01 	mov.w	ip, #1
 800d370:	e7c7      	b.n	800d302 <__kernel_rem_pio2f+0x282>
 800d372:	ecfe 6a01 	vldmia	lr!, {s13}
 800d376:	ed38 7a01 	vldmdb	r8!, {s14}
 800d37a:	f10c 0c01 	add.w	ip, ip, #1
 800d37e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d382:	e7e7      	b.n	800d354 <__kernel_rem_pio2f+0x2d4>
 800d384:	3b01      	subs	r3, #1
 800d386:	e769      	b.n	800d25c <__kernel_rem_pio2f+0x1dc>
 800d388:	08127658 	.word	0x08127658
 800d38c:	0812762c 	.word	0x0812762c
 800d390:	43800000 	.word	0x43800000
 800d394:	3b800000 	.word	0x3b800000
 800d398:	00000000 	.word	0x00000000
 800d39c:	4260      	negs	r0, r4
 800d39e:	eeb0 0a48 	vmov.f32	s0, s16
 800d3a2:	f000 fb9f 	bl	800dae4 <scalbnf>
 800d3a6:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800d390 <__kernel_rem_pio2f+0x310>
 800d3aa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d3ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3b2:	db1a      	blt.n	800d3ea <__kernel_rem_pio2f+0x36a>
 800d3b4:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800d394 <__kernel_rem_pio2f+0x314>
 800d3b8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d3bc:	aa06      	add	r2, sp, #24
 800d3be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d3c2:	a906      	add	r1, sp, #24
 800d3c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3c8:	3408      	adds	r4, #8
 800d3ca:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d3ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d3d2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d3d6:	ee10 3a10 	vmov	r3, s0
 800d3da:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d3de:	1c6b      	adds	r3, r5, #1
 800d3e0:	ee17 2a90 	vmov	r2, s15
 800d3e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d3e8:	e73f      	b.n	800d26a <__kernel_rem_pio2f+0x1ea>
 800d3ea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d3ee:	aa06      	add	r2, sp, #24
 800d3f0:	ee10 3a10 	vmov	r3, s0
 800d3f4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d3f8:	462b      	mov	r3, r5
 800d3fa:	e736      	b.n	800d26a <__kernel_rem_pio2f+0x1ea>
 800d3fc:	aa06      	add	r2, sp, #24
 800d3fe:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800d402:	9202      	str	r2, [sp, #8]
 800d404:	ee07 2a90 	vmov	s15, r2
 800d408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d40c:	3c01      	subs	r4, #1
 800d40e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d412:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d416:	ed65 7a01 	vstmdb	r5!, {s15}
 800d41a:	e734      	b.n	800d286 <__kernel_rem_pio2f+0x206>
 800d41c:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800d420:	ecf7 6a01 	vldmia	r7!, {s13}
 800d424:	ed9c 7a00 	vldr	s14, [ip]
 800d428:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d42c:	3401      	adds	r4, #1
 800d42e:	454c      	cmp	r4, r9
 800d430:	dc01      	bgt.n	800d436 <__kernel_rem_pio2f+0x3b6>
 800d432:	42a5      	cmp	r5, r4
 800d434:	daf2      	bge.n	800d41c <__kernel_rem_pio2f+0x39c>
 800d436:	aa56      	add	r2, sp, #344	; 0x158
 800d438:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800d43c:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800d440:	3501      	adds	r5, #1
 800d442:	3804      	subs	r0, #4
 800d444:	e723      	b.n	800d28e <__kernel_rem_pio2f+0x20e>
 800d446:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800d448:	2a03      	cmp	r2, #3
 800d44a:	d84d      	bhi.n	800d4e8 <__kernel_rem_pio2f+0x468>
 800d44c:	e8df f002 	tbb	[pc, r2]
 800d450:	021f1f3e 	.word	0x021f1f3e
 800d454:	aa56      	add	r2, sp, #344	; 0x158
 800d456:	4411      	add	r1, r2
 800d458:	399c      	subs	r1, #156	; 0x9c
 800d45a:	4608      	mov	r0, r1
 800d45c:	461c      	mov	r4, r3
 800d45e:	2c00      	cmp	r4, #0
 800d460:	dc5f      	bgt.n	800d522 <__kernel_rem_pio2f+0x4a2>
 800d462:	4608      	mov	r0, r1
 800d464:	461c      	mov	r4, r3
 800d466:	2c01      	cmp	r4, #1
 800d468:	dc6b      	bgt.n	800d542 <__kernel_rem_pio2f+0x4c2>
 800d46a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800d398 <__kernel_rem_pio2f+0x318>
 800d46e:	2b01      	cmp	r3, #1
 800d470:	dc77      	bgt.n	800d562 <__kernel_rem_pio2f+0x4e2>
 800d472:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800d476:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800d47a:	f1b8 0f00 	cmp.w	r8, #0
 800d47e:	d176      	bne.n	800d56e <__kernel_rem_pio2f+0x4ee>
 800d480:	edc6 6a00 	vstr	s13, [r6]
 800d484:	ed86 7a01 	vstr	s14, [r6, #4]
 800d488:	edc6 7a02 	vstr	s15, [r6, #8]
 800d48c:	e02c      	b.n	800d4e8 <__kernel_rem_pio2f+0x468>
 800d48e:	aa56      	add	r2, sp, #344	; 0x158
 800d490:	4411      	add	r1, r2
 800d492:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800d398 <__kernel_rem_pio2f+0x318>
 800d496:	399c      	subs	r1, #156	; 0x9c
 800d498:	4618      	mov	r0, r3
 800d49a:	2800      	cmp	r0, #0
 800d49c:	da32      	bge.n	800d504 <__kernel_rem_pio2f+0x484>
 800d49e:	f1b8 0f00 	cmp.w	r8, #0
 800d4a2:	d035      	beq.n	800d510 <__kernel_rem_pio2f+0x490>
 800d4a4:	eef1 7a47 	vneg.f32	s15, s14
 800d4a8:	edc6 7a00 	vstr	s15, [r6]
 800d4ac:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800d4b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d4b4:	a82f      	add	r0, sp, #188	; 0xbc
 800d4b6:	2101      	movs	r1, #1
 800d4b8:	428b      	cmp	r3, r1
 800d4ba:	da2c      	bge.n	800d516 <__kernel_rem_pio2f+0x496>
 800d4bc:	f1b8 0f00 	cmp.w	r8, #0
 800d4c0:	d001      	beq.n	800d4c6 <__kernel_rem_pio2f+0x446>
 800d4c2:	eef1 7a67 	vneg.f32	s15, s15
 800d4c6:	edc6 7a01 	vstr	s15, [r6, #4]
 800d4ca:	e00d      	b.n	800d4e8 <__kernel_rem_pio2f+0x468>
 800d4cc:	aa56      	add	r2, sp, #344	; 0x158
 800d4ce:	4411      	add	r1, r2
 800d4d0:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800d398 <__kernel_rem_pio2f+0x318>
 800d4d4:	399c      	subs	r1, #156	; 0x9c
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	da0e      	bge.n	800d4f8 <__kernel_rem_pio2f+0x478>
 800d4da:	f1b8 0f00 	cmp.w	r8, #0
 800d4de:	d001      	beq.n	800d4e4 <__kernel_rem_pio2f+0x464>
 800d4e0:	eef1 7a67 	vneg.f32	s15, s15
 800d4e4:	edc6 7a00 	vstr	s15, [r6]
 800d4e8:	9b01      	ldr	r3, [sp, #4]
 800d4ea:	f003 0007 	and.w	r0, r3, #7
 800d4ee:	b057      	add	sp, #348	; 0x15c
 800d4f0:	ecbd 8b04 	vpop	{d8-d9}
 800d4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4f8:	ed31 7a01 	vldmdb	r1!, {s14}
 800d4fc:	3b01      	subs	r3, #1
 800d4fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d502:	e7e8      	b.n	800d4d6 <__kernel_rem_pio2f+0x456>
 800d504:	ed71 7a01 	vldmdb	r1!, {s15}
 800d508:	3801      	subs	r0, #1
 800d50a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d50e:	e7c4      	b.n	800d49a <__kernel_rem_pio2f+0x41a>
 800d510:	eef0 7a47 	vmov.f32	s15, s14
 800d514:	e7c8      	b.n	800d4a8 <__kernel_rem_pio2f+0x428>
 800d516:	ecb0 7a01 	vldmia	r0!, {s14}
 800d51a:	3101      	adds	r1, #1
 800d51c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d520:	e7ca      	b.n	800d4b8 <__kernel_rem_pio2f+0x438>
 800d522:	ed50 7a02 	vldr	s15, [r0, #-8]
 800d526:	ed70 6a01 	vldmdb	r0!, {s13}
 800d52a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d52e:	3c01      	subs	r4, #1
 800d530:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d534:	ed00 7a01 	vstr	s14, [r0, #-4]
 800d538:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d53c:	edc0 7a00 	vstr	s15, [r0]
 800d540:	e78d      	b.n	800d45e <__kernel_rem_pio2f+0x3de>
 800d542:	ed50 7a02 	vldr	s15, [r0, #-8]
 800d546:	ed70 6a01 	vldmdb	r0!, {s13}
 800d54a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d54e:	3c01      	subs	r4, #1
 800d550:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d554:	ed00 7a01 	vstr	s14, [r0, #-4]
 800d558:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d55c:	edc0 7a00 	vstr	s15, [r0]
 800d560:	e781      	b.n	800d466 <__kernel_rem_pio2f+0x3e6>
 800d562:	ed31 7a01 	vldmdb	r1!, {s14}
 800d566:	3b01      	subs	r3, #1
 800d568:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d56c:	e77f      	b.n	800d46e <__kernel_rem_pio2f+0x3ee>
 800d56e:	eef1 6a66 	vneg.f32	s13, s13
 800d572:	eeb1 7a47 	vneg.f32	s14, s14
 800d576:	edc6 6a00 	vstr	s13, [r6]
 800d57a:	ed86 7a01 	vstr	s14, [r6, #4]
 800d57e:	eef1 7a67 	vneg.f32	s15, s15
 800d582:	e781      	b.n	800d488 <__kernel_rem_pio2f+0x408>

0800d584 <__kernel_tanf>:
 800d584:	b508      	push	{r3, lr}
 800d586:	ee10 3a10 	vmov	r3, s0
 800d58a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d58e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800d592:	eef0 7a40 	vmov.f32	s15, s0
 800d596:	da17      	bge.n	800d5c8 <__kernel_tanf+0x44>
 800d598:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800d59c:	ee17 1a10 	vmov	r1, s14
 800d5a0:	bb41      	cbnz	r1, 800d5f4 <__kernel_tanf+0x70>
 800d5a2:	1c43      	adds	r3, r0, #1
 800d5a4:	4313      	orrs	r3, r2
 800d5a6:	d108      	bne.n	800d5ba <__kernel_tanf+0x36>
 800d5a8:	f7ff f858 	bl	800c65c <fabsf>
 800d5ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d5b0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d5b4:	eeb0 0a67 	vmov.f32	s0, s15
 800d5b8:	bd08      	pop	{r3, pc}
 800d5ba:	2801      	cmp	r0, #1
 800d5bc:	d0fa      	beq.n	800d5b4 <__kernel_tanf+0x30>
 800d5be:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d5c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d5c6:	e7f5      	b.n	800d5b4 <__kernel_tanf+0x30>
 800d5c8:	494e      	ldr	r1, [pc, #312]	; (800d704 <__kernel_tanf+0x180>)
 800d5ca:	428a      	cmp	r2, r1
 800d5cc:	dd12      	ble.n	800d5f4 <__kernel_tanf+0x70>
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800d708 <__kernel_tanf+0x184>
 800d5d4:	bfb8      	it	lt
 800d5d6:	eef1 7a40 	vneglt.f32	s15, s0
 800d5da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5de:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800d70c <__kernel_tanf+0x188>
 800d5e2:	bfb8      	it	lt
 800d5e4:	eef1 0a60 	vneglt.f32	s1, s1
 800d5e8:	ee77 0a60 	vsub.f32	s1, s14, s1
 800d5ec:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800d5f0:	eddf 0a47 	vldr	s1, [pc, #284]	; 800d710 <__kernel_tanf+0x18c>
 800d5f4:	ed9f 6a47 	vldr	s12, [pc, #284]	; 800d714 <__kernel_tanf+0x190>
 800d5f8:	eddf 5a47 	vldr	s11, [pc, #284]	; 800d718 <__kernel_tanf+0x194>
 800d5fc:	ed9f 5a47 	vldr	s10, [pc, #284]	; 800d71c <__kernel_tanf+0x198>
 800d600:	4940      	ldr	r1, [pc, #256]	; (800d704 <__kernel_tanf+0x180>)
 800d602:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800d606:	428a      	cmp	r2, r1
 800d608:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800d60c:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800d610:	eee7 5a06 	vfma.f32	s11, s14, s12
 800d614:	ed9f 6a42 	vldr	s12, [pc, #264]	; 800d720 <__kernel_tanf+0x19c>
 800d618:	eea5 6a87 	vfma.f32	s12, s11, s14
 800d61c:	eddf 5a41 	vldr	s11, [pc, #260]	; 800d724 <__kernel_tanf+0x1a0>
 800d620:	eee6 5a07 	vfma.f32	s11, s12, s14
 800d624:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800d728 <__kernel_tanf+0x1a4>
 800d628:	eea5 6a87 	vfma.f32	s12, s11, s14
 800d62c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800d72c <__kernel_tanf+0x1a8>
 800d630:	eee6 5a07 	vfma.f32	s11, s12, s14
 800d634:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800d730 <__kernel_tanf+0x1ac>
 800d638:	eea7 6a05 	vfma.f32	s12, s14, s10
 800d63c:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800d734 <__kernel_tanf+0x1b0>
 800d640:	eea6 5a07 	vfma.f32	s10, s12, s14
 800d644:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 800d738 <__kernel_tanf+0x1b4>
 800d648:	eea5 6a07 	vfma.f32	s12, s10, s14
 800d64c:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 800d73c <__kernel_tanf+0x1b8>
 800d650:	eea6 5a07 	vfma.f32	s10, s12, s14
 800d654:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 800d740 <__kernel_tanf+0x1bc>
 800d658:	eea5 6a07 	vfma.f32	s12, s10, s14
 800d65c:	eeb0 7a46 	vmov.f32	s14, s12
 800d660:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d664:	eeb0 6a60 	vmov.f32	s12, s1
 800d668:	eea7 6a24 	vfma.f32	s12, s14, s9
 800d66c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800d744 <__kernel_tanf+0x1c0>
 800d670:	eee6 0a26 	vfma.f32	s1, s12, s13
 800d674:	eee4 0a87 	vfma.f32	s1, s9, s14
 800d678:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800d67c:	dd1d      	ble.n	800d6ba <__kernel_tanf+0x136>
 800d67e:	ee07 0a10 	vmov	s14, r0
 800d682:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d686:	ee66 5aa6 	vmul.f32	s11, s13, s13
 800d68a:	ee76 6a87 	vadd.f32	s13, s13, s14
 800d68e:	179b      	asrs	r3, r3, #30
 800d690:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 800d694:	f003 0302 	and.w	r3, r3, #2
 800d698:	f1c3 0301 	rsb	r3, r3, #1
 800d69c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d6a0:	ee76 0a60 	vsub.f32	s1, s12, s1
 800d6a4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d6a8:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800d6ac:	ee07 3a90 	vmov	s15, r3
 800d6b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6b8:	e77c      	b.n	800d5b4 <__kernel_tanf+0x30>
 800d6ba:	2801      	cmp	r0, #1
 800d6bc:	d01f      	beq.n	800d6fe <__kernel_tanf+0x17a>
 800d6be:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d6c2:	eec7 5a26 	vdiv.f32	s11, s14, s13
 800d6c6:	4b20      	ldr	r3, [pc, #128]	; (800d748 <__kernel_tanf+0x1c4>)
 800d6c8:	ee16 2a90 	vmov	r2, s13
 800d6cc:	401a      	ands	r2, r3
 800d6ce:	ee06 2a10 	vmov	s12, r2
 800d6d2:	ee15 2a90 	vmov	r2, s11
 800d6d6:	4013      	ands	r3, r2
 800d6d8:	ee07 3a10 	vmov	s14, r3
 800d6dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6e0:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d6e4:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d6e8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800d6ec:	eef0 7a66 	vmov.f32	s15, s13
 800d6f0:	eee7 7a20 	vfma.f32	s15, s14, s1
 800d6f4:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800d6f8:	eef0 7a47 	vmov.f32	s15, s14
 800d6fc:	e75a      	b.n	800d5b4 <__kernel_tanf+0x30>
 800d6fe:	eef0 7a66 	vmov.f32	s15, s13
 800d702:	e757      	b.n	800d5b4 <__kernel_tanf+0x30>
 800d704:	3f2ca13f 	.word	0x3f2ca13f
 800d708:	3f490fda 	.word	0x3f490fda
 800d70c:	33222168 	.word	0x33222168
 800d710:	00000000 	.word	0x00000000
 800d714:	37d95384 	.word	0x37d95384
 800d718:	3895c07a 	.word	0x3895c07a
 800d71c:	b79bae5f 	.word	0xb79bae5f
 800d720:	398137b9 	.word	0x398137b9
 800d724:	3abede48 	.word	0x3abede48
 800d728:	3c11371f 	.word	0x3c11371f
 800d72c:	3d5d0dd1 	.word	0x3d5d0dd1
 800d730:	38a3f445 	.word	0x38a3f445
 800d734:	3a1a26c8 	.word	0x3a1a26c8
 800d738:	3b6b6916 	.word	0x3b6b6916
 800d73c:	3cb327a4 	.word	0x3cb327a4
 800d740:	3e088889 	.word	0x3e088889
 800d744:	3eaaaaab 	.word	0x3eaaaaab
 800d748:	fffff000 	.word	0xfffff000

0800d74c <with_errnof>:
 800d74c:	b510      	push	{r4, lr}
 800d74e:	ed2d 8b02 	vpush	{d8}
 800d752:	eeb0 8a40 	vmov.f32	s16, s0
 800d756:	4604      	mov	r4, r0
 800d758:	f7fe fe64 	bl	800c424 <__errno>
 800d75c:	eeb0 0a48 	vmov.f32	s0, s16
 800d760:	ecbd 8b02 	vpop	{d8}
 800d764:	6004      	str	r4, [r0, #0]
 800d766:	bd10      	pop	{r4, pc}

0800d768 <xflowf>:
 800d768:	b130      	cbz	r0, 800d778 <xflowf+0x10>
 800d76a:	eef1 7a40 	vneg.f32	s15, s0
 800d76e:	2022      	movs	r0, #34	; 0x22
 800d770:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d774:	f7ff bfea 	b.w	800d74c <with_errnof>
 800d778:	eef0 7a40 	vmov.f32	s15, s0
 800d77c:	e7f7      	b.n	800d76e <xflowf+0x6>
	...

0800d780 <__math_uflowf>:
 800d780:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d788 <__math_uflowf+0x8>
 800d784:	f7ff bff0 	b.w	800d768 <xflowf>
 800d788:	10000000 	.word	0x10000000

0800d78c <__math_may_uflowf>:
 800d78c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d794 <__math_may_uflowf+0x8>
 800d790:	f7ff bfea 	b.w	800d768 <xflowf>
 800d794:	1a200000 	.word	0x1a200000

0800d798 <__math_oflowf>:
 800d798:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d7a0 <__math_oflowf+0x8>
 800d79c:	f7ff bfe4 	b.w	800d768 <xflowf>
 800d7a0:	70000000 	.word	0x70000000

0800d7a4 <__math_divzerof>:
 800d7a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d7a8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800d7ac:	2800      	cmp	r0, #0
 800d7ae:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800d7b2:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800d7c0 <__math_divzerof+0x1c>
 800d7b6:	2022      	movs	r0, #34	; 0x22
 800d7b8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800d7bc:	f7ff bfc6 	b.w	800d74c <with_errnof>
 800d7c0:	00000000 	.word	0x00000000

0800d7c4 <__math_invalidf>:
 800d7c4:	eef0 7a40 	vmov.f32	s15, s0
 800d7c8:	ee30 7a40 	vsub.f32	s14, s0, s0
 800d7cc:	eef4 7a67 	vcmp.f32	s15, s15
 800d7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7d4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800d7d8:	d602      	bvs.n	800d7e0 <__math_invalidf+0x1c>
 800d7da:	2021      	movs	r0, #33	; 0x21
 800d7dc:	f7ff bfb6 	b.w	800d74c <with_errnof>
 800d7e0:	4770      	bx	lr

0800d7e2 <matherr>:
 800d7e2:	2000      	movs	r0, #0
 800d7e4:	4770      	bx	lr
	...

0800d7e8 <nan>:
 800d7e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d7f0 <nan+0x8>
 800d7ec:	4770      	bx	lr
 800d7ee:	bf00      	nop
 800d7f0:	00000000 	.word	0x00000000
 800d7f4:	7ff80000 	.word	0x7ff80000

0800d7f8 <expm1f>:
 800d7f8:	ee10 2a10 	vmov	r2, s0
 800d7fc:	4984      	ldr	r1, [pc, #528]	; (800da10 <expm1f+0x218>)
 800d7fe:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800d802:	428b      	cmp	r3, r1
 800d804:	d923      	bls.n	800d84e <expm1f+0x56>
 800d806:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d80a:	d902      	bls.n	800d812 <expm1f+0x1a>
 800d80c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d810:	4770      	bx	lr
 800d812:	d105      	bne.n	800d820 <expm1f+0x28>
 800d814:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800d818:	2a00      	cmp	r2, #0
 800d81a:	fe20 0a27 	vselge.f32	s0, s0, s15
 800d81e:	4770      	bx	lr
 800d820:	2a00      	cmp	r2, #0
 800d822:	db08      	blt.n	800d836 <expm1f+0x3e>
 800d824:	4a7b      	ldr	r2, [pc, #492]	; (800da14 <expm1f+0x21c>)
 800d826:	4293      	cmp	r3, r2
 800d828:	f240 80ea 	bls.w	800da00 <expm1f+0x208>
 800d82c:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 800da18 <expm1f+0x220>
 800d830:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d834:	4770      	bx	lr
 800d836:	eddf 7a79 	vldr	s15, [pc, #484]	; 800da1c <expm1f+0x224>
 800d83a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d83e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d846:	d554      	bpl.n	800d8f2 <expm1f+0xfa>
 800d848:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800d84c:	4770      	bx	lr
 800d84e:	4974      	ldr	r1, [pc, #464]	; (800da20 <expm1f+0x228>)
 800d850:	428b      	cmp	r3, r1
 800d852:	d96c      	bls.n	800d92e <expm1f+0x136>
 800d854:	4973      	ldr	r1, [pc, #460]	; (800da24 <expm1f+0x22c>)
 800d856:	428b      	cmp	r3, r1
 800d858:	d84b      	bhi.n	800d8f2 <expm1f+0xfa>
 800d85a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800da28 <expm1f+0x230>
 800d85e:	2a00      	cmp	r2, #0
 800d860:	bfa7      	ittee	ge
 800d862:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800d866:	eddf 7a71 	vldrge	s15, [pc, #452]	; 800da2c <expm1f+0x234>
 800d86a:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 800da30 <expm1f+0x238>
 800d86e:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800d872:	bfac      	ite	ge
 800d874:	2301      	movge	r3, #1
 800d876:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d87a:	ee37 0a67 	vsub.f32	s0, s14, s15
 800d87e:	ee37 7a40 	vsub.f32	s14, s14, s0
 800d882:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d886:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800d88a:	ee20 5a25 	vmul.f32	s10, s0, s11
 800d88e:	eddf 6a69 	vldr	s13, [pc, #420]	; 800da34 <expm1f+0x23c>
 800d892:	ed9f 6a69 	vldr	s12, [pc, #420]	; 800da38 <expm1f+0x240>
 800d896:	ee20 7a05 	vmul.f32	s14, s0, s10
 800d89a:	eea7 6a26 	vfma.f32	s12, s14, s13
 800d89e:	eddf 6a67 	vldr	s13, [pc, #412]	; 800da3c <expm1f+0x244>
 800d8a2:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d8a6:	ed9f 6a66 	vldr	s12, [pc, #408]	; 800da40 <expm1f+0x248>
 800d8aa:	eea6 6a87 	vfma.f32	s12, s13, s14
 800d8ae:	eddf 6a65 	vldr	s13, [pc, #404]	; 800da44 <expm1f+0x24c>
 800d8b2:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d8b6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d8ba:	eef0 4a46 	vmov.f32	s9, s12
 800d8be:	eee6 4a87 	vfma.f32	s9, s13, s14
 800d8c2:	eef0 6a64 	vmov.f32	s13, s9
 800d8c6:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800d8ca:	eee5 4a66 	vfms.f32	s9, s10, s13
 800d8ce:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800d8d2:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800d8d6:	eee0 6a64 	vfms.f32	s13, s0, s9
 800d8da:	eef0 4a66 	vmov.f32	s9, s13
 800d8de:	eec5 6a24 	vdiv.f32	s13, s10, s9
 800d8e2:	ee66 6a87 	vmul.f32	s13, s13, s14
 800d8e6:	bb83      	cbnz	r3, 800d94a <expm1f+0x152>
 800d8e8:	eef0 7a47 	vmov.f32	s15, s14
 800d8ec:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800d8f0:	e026      	b.n	800d940 <expm1f+0x148>
 800d8f2:	eddf 7a55 	vldr	s15, [pc, #340]	; 800da48 <expm1f+0x250>
 800d8f6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800d8fa:	ee20 7a27 	vmul.f32	s14, s0, s15
 800d8fe:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800d902:	2a00      	cmp	r2, #0
 800d904:	fe66 7aa7 	vselge.f32	s15, s13, s15
 800d908:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d90c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800da28 <expm1f+0x230>
 800d910:	eddf 6a46 	vldr	s13, [pc, #280]	; 800da2c <expm1f+0x234>
 800d914:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d918:	ee17 3a90 	vmov	r3, s15
 800d91c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d920:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d924:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d928:	eeb0 7a40 	vmov.f32	s14, s0
 800d92c:	e7a5      	b.n	800d87a <expm1f+0x82>
 800d92e:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800d932:	d208      	bcs.n	800d946 <expm1f+0x14e>
 800d934:	eddf 7a38 	vldr	s15, [pc, #224]	; 800da18 <expm1f+0x220>
 800d938:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d93c:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800d940:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d944:	4770      	bx	lr
 800d946:	2300      	movs	r3, #0
 800d948:	e79d      	b.n	800d886 <expm1f+0x8e>
 800d94a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d94e:	1c5a      	adds	r2, r3, #1
 800d950:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800d954:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d958:	d106      	bne.n	800d968 <expm1f+0x170>
 800d95a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800d95e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800d962:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800d966:	4770      	bx	lr
 800d968:	2b01      	cmp	r3, #1
 800d96a:	d118      	bne.n	800d99e <expm1f+0x1a6>
 800d96c:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800d970:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d978:	bf41      	itttt	mi
 800d97a:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800d97e:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 800d982:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 800d986:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 800d98a:	bf5f      	itttt	pl
 800d98c:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 800d990:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 800d994:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 800d998:	eeb0 0a46 	vmovpl.f32	s0, s12
 800d99c:	4770      	bx	lr
 800d99e:	1c5a      	adds	r2, r3, #1
 800d9a0:	2a39      	cmp	r2, #57	; 0x39
 800d9a2:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800d9a6:	d90b      	bls.n	800d9c0 <expm1f+0x1c8>
 800d9a8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d9ac:	ee36 0a40 	vsub.f32	s0, s12, s0
 800d9b0:	ee10 3a10 	vmov	r3, s0
 800d9b4:	440b      	add	r3, r1
 800d9b6:	ee00 3a10 	vmov	s0, r3
 800d9ba:	ee30 0a46 	vsub.f32	s0, s0, s12
 800d9be:	4770      	bx	lr
 800d9c0:	2b16      	cmp	r3, #22
 800d9c2:	dc11      	bgt.n	800d9e8 <expm1f+0x1f0>
 800d9c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d9c8:	fa42 f303 	asr.w	r3, r2, r3
 800d9cc:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800d9d0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d9d4:	ee07 3a90 	vmov	s15, r3
 800d9d8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d9dc:	ee10 3a10 	vmov	r3, s0
 800d9e0:	440b      	add	r3, r1
 800d9e2:	ee00 3a10 	vmov	s0, r3
 800d9e6:	4770      	bx	lr
 800d9e8:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800d9ec:	05db      	lsls	r3, r3, #23
 800d9ee:	ee07 3a10 	vmov	s14, r3
 800d9f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d9f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d9fa:	ee30 0a06 	vadd.f32	s0, s0, s12
 800d9fe:	e7ed      	b.n	800d9dc <expm1f+0x1e4>
 800da00:	eddf 7a11 	vldr	s15, [pc, #68]	; 800da48 <expm1f+0x250>
 800da04:	ee20 7a27 	vmul.f32	s14, s0, s15
 800da08:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800da0c:	e77c      	b.n	800d908 <expm1f+0x110>
 800da0e:	bf00      	nop
 800da10:	4195b843 	.word	0x4195b843
 800da14:	42b17217 	.word	0x42b17217
 800da18:	7149f2ca 	.word	0x7149f2ca
 800da1c:	0da24260 	.word	0x0da24260
 800da20:	3eb17218 	.word	0x3eb17218
 800da24:	3f851591 	.word	0x3f851591
 800da28:	3f317180 	.word	0x3f317180
 800da2c:	3717f7d1 	.word	0x3717f7d1
 800da30:	b717f7d1 	.word	0xb717f7d1
 800da34:	b457edbb 	.word	0xb457edbb
 800da38:	36867e54 	.word	0x36867e54
 800da3c:	b8a670cd 	.word	0xb8a670cd
 800da40:	3ad00d01 	.word	0x3ad00d01
 800da44:	bd088889 	.word	0xbd088889
 800da48:	3fb8aa3b 	.word	0x3fb8aa3b

0800da4c <finitef>:
 800da4c:	ee10 3a10 	vmov	r3, s0
 800da50:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800da54:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800da58:	bfac      	ite	ge
 800da5a:	2000      	movge	r0, #0
 800da5c:	2001      	movlt	r0, #1
 800da5e:	4770      	bx	lr

0800da60 <floorf>:
 800da60:	ee10 3a10 	vmov	r3, s0
 800da64:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800da68:	0dca      	lsrs	r2, r1, #23
 800da6a:	3a7f      	subs	r2, #127	; 0x7f
 800da6c:	2a16      	cmp	r2, #22
 800da6e:	dc2a      	bgt.n	800dac6 <floorf+0x66>
 800da70:	2a00      	cmp	r2, #0
 800da72:	da11      	bge.n	800da98 <floorf+0x38>
 800da74:	eddf 7a18 	vldr	s15, [pc, #96]	; 800dad8 <floorf+0x78>
 800da78:	ee30 0a27 	vadd.f32	s0, s0, s15
 800da7c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800da80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da84:	dd05      	ble.n	800da92 <floorf+0x32>
 800da86:	2b00      	cmp	r3, #0
 800da88:	da23      	bge.n	800dad2 <floorf+0x72>
 800da8a:	4a14      	ldr	r2, [pc, #80]	; (800dadc <floorf+0x7c>)
 800da8c:	2900      	cmp	r1, #0
 800da8e:	bf18      	it	ne
 800da90:	4613      	movne	r3, r2
 800da92:	ee00 3a10 	vmov	s0, r3
 800da96:	4770      	bx	lr
 800da98:	4911      	ldr	r1, [pc, #68]	; (800dae0 <floorf+0x80>)
 800da9a:	4111      	asrs	r1, r2
 800da9c:	420b      	tst	r3, r1
 800da9e:	d0fa      	beq.n	800da96 <floorf+0x36>
 800daa0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800dad8 <floorf+0x78>
 800daa4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800daa8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800daac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dab0:	ddef      	ble.n	800da92 <floorf+0x32>
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	bfbe      	ittt	lt
 800dab6:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800daba:	fa40 f202 	asrlt.w	r2, r0, r2
 800dabe:	189b      	addlt	r3, r3, r2
 800dac0:	ea23 0301 	bic.w	r3, r3, r1
 800dac4:	e7e5      	b.n	800da92 <floorf+0x32>
 800dac6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800daca:	d3e4      	bcc.n	800da96 <floorf+0x36>
 800dacc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dad0:	4770      	bx	lr
 800dad2:	2300      	movs	r3, #0
 800dad4:	e7dd      	b.n	800da92 <floorf+0x32>
 800dad6:	bf00      	nop
 800dad8:	7149f2ca 	.word	0x7149f2ca
 800dadc:	bf800000 	.word	0xbf800000
 800dae0:	007fffff 	.word	0x007fffff

0800dae4 <scalbnf>:
 800dae4:	b508      	push	{r3, lr}
 800dae6:	ee10 2a10 	vmov	r2, s0
 800daea:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800daee:	ed2d 8b02 	vpush	{d8}
 800daf2:	eef0 0a40 	vmov.f32	s1, s0
 800daf6:	d004      	beq.n	800db02 <scalbnf+0x1e>
 800daf8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dafc:	d306      	bcc.n	800db0c <scalbnf+0x28>
 800dafe:	ee70 0a00 	vadd.f32	s1, s0, s0
 800db02:	ecbd 8b02 	vpop	{d8}
 800db06:	eeb0 0a60 	vmov.f32	s0, s1
 800db0a:	bd08      	pop	{r3, pc}
 800db0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800db10:	d21c      	bcs.n	800db4c <scalbnf+0x68>
 800db12:	4b1f      	ldr	r3, [pc, #124]	; (800db90 <scalbnf+0xac>)
 800db14:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800db94 <scalbnf+0xb0>
 800db18:	4298      	cmp	r0, r3
 800db1a:	ee60 0a27 	vmul.f32	s1, s0, s15
 800db1e:	db10      	blt.n	800db42 <scalbnf+0x5e>
 800db20:	ee10 2a90 	vmov	r2, s1
 800db24:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800db28:	3b19      	subs	r3, #25
 800db2a:	4403      	add	r3, r0
 800db2c:	2bfe      	cmp	r3, #254	; 0xfe
 800db2e:	dd0f      	ble.n	800db50 <scalbnf+0x6c>
 800db30:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800db98 <scalbnf+0xb4>
 800db34:	eeb0 0a48 	vmov.f32	s0, s16
 800db38:	f000 f834 	bl	800dba4 <copysignf>
 800db3c:	ee60 0a08 	vmul.f32	s1, s0, s16
 800db40:	e7df      	b.n	800db02 <scalbnf+0x1e>
 800db42:	eddf 7a16 	vldr	s15, [pc, #88]	; 800db9c <scalbnf+0xb8>
 800db46:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800db4a:	e7da      	b.n	800db02 <scalbnf+0x1e>
 800db4c:	0ddb      	lsrs	r3, r3, #23
 800db4e:	e7ec      	b.n	800db2a <scalbnf+0x46>
 800db50:	2b00      	cmp	r3, #0
 800db52:	dd06      	ble.n	800db62 <scalbnf+0x7e>
 800db54:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800db58:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800db5c:	ee00 3a90 	vmov	s1, r3
 800db60:	e7cf      	b.n	800db02 <scalbnf+0x1e>
 800db62:	f113 0f16 	cmn.w	r3, #22
 800db66:	da06      	bge.n	800db76 <scalbnf+0x92>
 800db68:	f24c 3350 	movw	r3, #50000	; 0xc350
 800db6c:	4298      	cmp	r0, r3
 800db6e:	dcdf      	bgt.n	800db30 <scalbnf+0x4c>
 800db70:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800db9c <scalbnf+0xb8>
 800db74:	e7de      	b.n	800db34 <scalbnf+0x50>
 800db76:	3319      	adds	r3, #25
 800db78:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800db7c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800db80:	eddf 7a07 	vldr	s15, [pc, #28]	; 800dba0 <scalbnf+0xbc>
 800db84:	ee07 3a10 	vmov	s14, r3
 800db88:	ee67 0a27 	vmul.f32	s1, s14, s15
 800db8c:	e7b9      	b.n	800db02 <scalbnf+0x1e>
 800db8e:	bf00      	nop
 800db90:	ffff3cb0 	.word	0xffff3cb0
 800db94:	4c000000 	.word	0x4c000000
 800db98:	7149f2ca 	.word	0x7149f2ca
 800db9c:	0da24260 	.word	0x0da24260
 800dba0:	33000000 	.word	0x33000000

0800dba4 <copysignf>:
 800dba4:	ee10 3a10 	vmov	r3, s0
 800dba8:	ee10 2a90 	vmov	r2, s1
 800dbac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dbb0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	ee00 3a10 	vmov	s0, r3
 800dbba:	4770      	bx	lr

0800dbbc <_init>:
 800dbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbbe:	bf00      	nop
 800dbc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbc2:	bc08      	pop	{r3}
 800dbc4:	469e      	mov	lr, r3
 800dbc6:	4770      	bx	lr

0800dbc8 <_fini>:
 800dbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbca:	bf00      	nop
 800dbcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbce:	bc08      	pop	{r3}
 800dbd0:	469e      	mov	lr, r3
 800dbd2:	4770      	bx	lr
