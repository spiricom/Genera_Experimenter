
cube_for_new_genera_brain4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b76c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0010b73c  0800ba04  0800ba04  0001ba04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08117140  08117140  00127140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08117148  08117148  00127148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0811714c  0811714c  0012714c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000001c  20000000  08117150  00130000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e7c  2000001c  0811716c  0013001c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000e98  0811716c  00130e98  2**0
                  ALLOC
  9 .RAM_D1       0007a120  24000000  24000000  00140000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 10 .RAM_D2       0000040c  30000000  30000000  001c0000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ARM.attributes 0000002e  00000000  00000000  001c040c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005b265  00000000  00000000  001c043a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008c96  00000000  00000000  0021b69f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001e890  00000000  00000000  00224335  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000027a8  00000000  00000000  00242bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000029a8  00000000  00000000  00245370  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00042f33  00000000  00000000  00247d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0002e564  00000000  00000000  0028ac4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00188643  00000000  00000000  002b91af  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  004417f2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007324  00000000  00000000  00441870  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2000001c 	.word	0x2000001c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b9ec 	.word	0x0800b9ec

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000020 	.word	0x20000020
 80002d4:	0800b9ec 	.word	0x0800b9ec

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80005d8:	4b10      	ldr	r3, [pc, #64]	; (800061c <HAL_InitTick+0x44>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b90b      	cbnz	r3, 80005e2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80005de:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005e0:	4770      	bx	lr
{
 80005e2:	b510      	push	{r4, lr}
 80005e4:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80005e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80005ee:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <HAL_InitTick+0x48>)
 80005f0:	6810      	ldr	r0, [r2, #0]
 80005f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80005f6:	f001 f88d 	bl	8001714 <HAL_SYSTICK_Config>
 80005fa:	b968      	cbnz	r0, 8000618 <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005fc:	2c0f      	cmp	r4, #15
 80005fe:	d901      	bls.n	8000604 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000600:	2001      	movs	r0, #1
 8000602:	e00a      	b.n	800061a <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000604:	2200      	movs	r2, #0
 8000606:	4621      	mov	r1, r4
 8000608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800060c:	f001 f842 	bl	8001694 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000610:	4b02      	ldr	r3, [pc, #8]	; (800061c <HAL_InitTick+0x44>)
 8000612:	605c      	str	r4, [r3, #4]
  return HAL_OK;
 8000614:	2000      	movs	r0, #0
 8000616:	e000      	b.n	800061a <HAL_InitTick+0x42>
    return HAL_ERROR;
 8000618:	2001      	movs	r0, #1
}
 800061a:	bd10      	pop	{r4, pc}
 800061c:	20000000 	.word	0x20000000
 8000620:	20000014 	.word	0x20000014

08000624 <HAL_Init>:
{
 8000624:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000626:	2003      	movs	r0, #3
 8000628:	f001 f822 	bl	8001670 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800062c:	f002 ff56 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 8000630:	490f      	ldr	r1, [pc, #60]	; (8000670 <HAL_Init+0x4c>)
 8000632:	698b      	ldr	r3, [r1, #24]
 8000634:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000638:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <HAL_Init+0x50>)
 800063a:	5cd3      	ldrb	r3, [r2, r3]
 800063c:	f003 031f 	and.w	r3, r3, #31
 8000640:	40d8      	lsrs	r0, r3
 8000642:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <HAL_Init+0x54>)
 8000644:	6018      	str	r0, [r3, #0]
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000646:	698b      	ldr	r3, [r1, #24]
 8000648:	f003 030f 	and.w	r3, r3, #15
 800064c:	5cd3      	ldrb	r3, [r2, r3]
 800064e:	f003 031f 	and.w	r3, r3, #31
 8000652:	40d8      	lsrs	r0, r3
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <HAL_Init+0x58>)
 8000656:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000658:	2000      	movs	r0, #0
 800065a:	f7ff ffbd 	bl	80005d8 <HAL_InitTick>
 800065e:	b110      	cbz	r0, 8000666 <HAL_Init+0x42>
    return HAL_ERROR;
 8000660:	2401      	movs	r4, #1
}
 8000662:	4620      	mov	r0, r4
 8000664:	bd10      	pop	{r4, pc}
 8000666:	4604      	mov	r4, r0
  HAL_MspInit();
 8000668:	f00a faf0 	bl	800ac4c <HAL_MspInit>
  return HAL_OK;
 800066c:	e7f9      	b.n	8000662 <HAL_Init+0x3e>
 800066e:	bf00      	nop
 8000670:	58024400 	.word	0x58024400
 8000674:	0800ba30 	.word	0x0800ba30
 8000678:	20000014 	.word	0x20000014
 800067c:	20000018 	.word	0x20000018

08000680 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <HAL_IncTick+0x10>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4a03      	ldr	r2, [pc, #12]	; (8000694 <HAL_IncTick+0x14>)
 8000686:	6811      	ldr	r1, [r2, #0]
 8000688:	440b      	add	r3, r1
 800068a:	6013      	str	r3, [r2, #0]
}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000000 	.word	0x20000000
 8000694:	2000006c 	.word	0x2000006c

08000698 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000698:	4b01      	ldr	r3, [pc, #4]	; (80006a0 <HAL_GetTick+0x8>)
 800069a:	6818      	ldr	r0, [r3, #0]
}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	2000006c 	.word	0x2000006c

080006a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006a4:	b538      	push	{r3, r4, r5, lr}
 80006a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006a8:	f7ff fff6 	bl	8000698 <HAL_GetTick>
 80006ac:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ae:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80006b2:	d002      	beq.n	80006ba <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <HAL_Delay+0x24>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006ba:	f7ff ffed 	bl	8000698 <HAL_GetTick>
 80006be:	1b40      	subs	r0, r0, r5
 80006c0:	42a0      	cmp	r0, r4
 80006c2:	d3fa      	bcc.n	80006ba <HAL_Delay+0x16>
  {
  }
}
 80006c4:	bd38      	pop	{r3, r4, r5, pc}
 80006c6:	bf00      	nop
 80006c8:	20000000 	.word	0x20000000

080006cc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80006cc:	4b01      	ldr	r3, [pc, #4]	; (80006d4 <HAL_GetREVID+0x8>)
 80006ce:	6818      	ldr	r0, [r3, #0]
}
 80006d0:	0c00      	lsrs	r0, r0, #16
 80006d2:	4770      	bx	lr
 80006d4:	5c001000 	.word	0x5c001000

080006d8 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80006d8:	4770      	bx	lr

080006da <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80006da:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80006dc:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80006de:	f7ff fffb 	bl	80006d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80006e2:	bd08      	pop	{r3, pc}

080006e4 <HAL_ADC_LevelOutOfWindowCallback>:
}
 80006e4:	4770      	bx	lr

080006e6 <HAL_ADC_ErrorCallback>:
}
 80006e6:	4770      	bx	lr

080006e8 <HAL_ADC_IRQHandler>:
{
 80006e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ea:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 80006ec:	6803      	ldr	r3, [r0, #0]
 80006ee:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80006f0:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80006f2:	49a6      	ldr	r1, [pc, #664]	; (800098c <HAL_ADC_IRQHandler+0x2a4>)
 80006f4:	4aa6      	ldr	r2, [pc, #664]	; (8000990 <HAL_ADC_IRQHandler+0x2a8>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	bf18      	it	ne
 80006fa:	428b      	cmpne	r3, r1
 80006fc:	d140      	bne.n	8000780 <HAL_ADC_IRQHandler+0x98>
 80006fe:	4ba5      	ldr	r3, [pc, #660]	; (8000994 <HAL_ADC_IRQHandler+0x2ac>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000700:	689f      	ldr	r7, [r3, #8]
 8000702:	f007 071f 	and.w	r7, r7, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8000706:	f015 0f02 	tst.w	r5, #2
 800070a:	d010      	beq.n	800072e <HAL_ADC_IRQHandler+0x46>
 800070c:	f016 0f02 	tst.w	r6, #2
 8000710:	d00d      	beq.n	800072e <HAL_ADC_IRQHandler+0x46>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000712:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000714:	f013 0f10 	tst.w	r3, #16
 8000718:	d103      	bne.n	8000722 <HAL_ADC_IRQHandler+0x3a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800071a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800071c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000720:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8000722:	4620      	mov	r0, r4
 8000724:	f000 fee6 	bl	80014f4 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8000728:	6823      	ldr	r3, [r4, #0]
 800072a:	2202      	movs	r2, #2
 800072c:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800072e:	f015 0f04 	tst.w	r5, #4
 8000732:	d002      	beq.n	800073a <HAL_ADC_IRQHandler+0x52>
 8000734:	f016 0f04 	tst.w	r6, #4
 8000738:	d105      	bne.n	8000746 <HAL_ADC_IRQHandler+0x5e>
 800073a:	f015 0f08 	tst.w	r5, #8
 800073e:	d04f      	beq.n	80007e0 <HAL_ADC_IRQHandler+0xf8>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000740:	f016 0f08 	tst.w	r6, #8
 8000744:	d04c      	beq.n	80007e0 <HAL_ADC_IRQHandler+0xf8>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000746:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000748:	f013 0f10 	tst.w	r3, #16
 800074c:	d103      	bne.n	8000756 <HAL_ADC_IRQHandler+0x6e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800074e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000750:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000754:	6563      	str	r3, [r4, #84]	; 0x54
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000756:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000758:	68da      	ldr	r2, [r3, #12]
 800075a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800075e:	d139      	bne.n	80007d4 <HAL_ADC_IRQHandler+0xec>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000760:	4a8b      	ldr	r2, [pc, #556]	; (8000990 <HAL_ADC_IRQHandler+0x2a8>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d00e      	beq.n	8000784 <HAL_ADC_IRQHandler+0x9c>
 8000766:	461a      	mov	r2, r3
 8000768:	4293      	cmp	r3, r2
 800076a:	d00e      	beq.n	800078a <HAL_ADC_IRQHandler+0xa2>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800076c:	2f05      	cmp	r7, #5
 800076e:	bf14      	ite	ne
 8000770:	2100      	movne	r1, #0
 8000772:	2101      	moveq	r1, #1
 8000774:	b14f      	cbz	r7, 800078a <HAL_ADC_IRQHandler+0xa2>
 8000776:	b941      	cbnz	r1, 800078a <HAL_ADC_IRQHandler+0xa2>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000778:	2f09      	cmp	r7, #9
 800077a:	d006      	beq.n	800078a <HAL_ADC_IRQHandler+0xa2>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800077c:	68d2      	ldr	r2, [r2, #12]
 800077e:	e005      	b.n	800078c <HAL_ADC_IRQHandler+0xa4>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000780:	4b85      	ldr	r3, [pc, #532]	; (8000998 <HAL_ADC_IRQHandler+0x2b0>)
 8000782:	e7bd      	b.n	8000700 <HAL_ADC_IRQHandler+0x18>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000784:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8000788:	e7ee      	b.n	8000768 <HAL_ADC_IRQHandler+0x80>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800078a:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800078c:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8000790:	d120      	bne.n	80007d4 <HAL_ADC_IRQHandler+0xec>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	f012 0f08 	tst.w	r2, #8
 8000798:	d01c      	beq.n	80007d4 <HAL_ADC_IRQHandler+0xec>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800079a:	689a      	ldr	r2, [r3, #8]
 800079c:	f012 0f04 	tst.w	r2, #4
 80007a0:	d110      	bne.n	80007c4 <HAL_ADC_IRQHandler+0xdc>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80007a2:	685a      	ldr	r2, [r3, #4]
 80007a4:	f022 020c 	bic.w	r2, r2, #12
 80007a8:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80007aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80007ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007b0:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80007b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80007b4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80007b8:	d10c      	bne.n	80007d4 <HAL_ADC_IRQHandler+0xec>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80007ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6563      	str	r3, [r4, #84]	; 0x54
 80007c2:	e007      	b.n	80007d4 <HAL_ADC_IRQHandler+0xec>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80007c6:	f043 0310 	orr.w	r3, r3, #16
 80007ca:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 80007d4:	4620      	mov	r0, r4
 80007d6:	f009 fe1b 	bl	800a410 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80007da:	6823      	ldr	r3, [r4, #0]
 80007dc:	220c      	movs	r2, #12
 80007de:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80007e0:	f015 0f20 	tst.w	r5, #32
 80007e4:	d002      	beq.n	80007ec <HAL_ADC_IRQHandler+0x104>
 80007e6:	f016 0f20 	tst.w	r6, #32
 80007ea:	d105      	bne.n	80007f8 <HAL_ADC_IRQHandler+0x110>
 80007ec:	f015 0f40 	tst.w	r5, #64	; 0x40
 80007f0:	d063      	beq.n	80008ba <HAL_ADC_IRQHandler+0x1d2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80007f2:	f016 0f40 	tst.w	r6, #64	; 0x40
 80007f6:	d060      	beq.n	80008ba <HAL_ADC_IRQHandler+0x1d2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80007f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80007fa:	f013 0f10 	tst.w	r3, #16
 80007fe:	d103      	bne.n	8000808 <HAL_ADC_IRQHandler+0x120>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000800:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000802:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000806:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8000808:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800080a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800080c:	f412 7fc0 	tst.w	r2, #384	; 0x180
 8000810:	d119      	bne.n	8000846 <HAL_ADC_IRQHandler+0x15e>
 8000812:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000814:	68da      	ldr	r2, [r3, #12]
 8000816:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800081a:	d116      	bne.n	800084a <HAL_ADC_IRQHandler+0x162>
 800081c:	2001      	movs	r0, #1
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800081e:	4a5c      	ldr	r2, [pc, #368]	; (8000990 <HAL_ADC_IRQHandler+0x2a8>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d014      	beq.n	800084e <HAL_ADC_IRQHandler+0x166>
 8000824:	461a      	mov	r2, r3
 8000826:	4293      	cmp	r3, r2
 8000828:	d014      	beq.n	8000854 <HAL_ADC_IRQHandler+0x16c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800082a:	2f06      	cmp	r7, #6
 800082c:	bf14      	ite	ne
 800082e:	f04f 0c00 	movne.w	ip, #0
 8000832:	f04f 0c01 	moveq.w	ip, #1
 8000836:	b16f      	cbz	r7, 8000854 <HAL_ADC_IRQHandler+0x16c>
 8000838:	f1bc 0f00 	cmp.w	ip, #0
 800083c:	d10a      	bne.n	8000854 <HAL_ADC_IRQHandler+0x16c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800083e:	2f07      	cmp	r7, #7
 8000840:	d008      	beq.n	8000854 <HAL_ADC_IRQHandler+0x16c>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000842:	68d2      	ldr	r2, [r2, #12]
 8000844:	e007      	b.n	8000856 <HAL_ADC_IRQHandler+0x16e>
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000846:	2100      	movs	r1, #0
 8000848:	e7e4      	b.n	8000814 <HAL_ADC_IRQHandler+0x12c>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800084a:	2000      	movs	r0, #0
 800084c:	e7e7      	b.n	800081e <HAL_ADC_IRQHandler+0x136>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800084e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8000852:	e7e8      	b.n	8000826 <HAL_ADC_IRQHandler+0x13e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000854:	68da      	ldr	r2, [r3, #12]
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8000856:	b931      	cbnz	r1, 8000866 <HAL_ADC_IRQHandler+0x17e>
 8000858:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800085c:	d127      	bne.n	80008ae <HAL_ADC_IRQHandler+0x1c6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800085e:	b330      	cbz	r0, 80008ae <HAL_ADC_IRQHandler+0x1c6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8000860:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8000864:	d123      	bne.n	80008ae <HAL_ADC_IRQHandler+0x1c6>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8000866:	6819      	ldr	r1, [r3, #0]
 8000868:	f011 0f40 	tst.w	r1, #64	; 0x40
 800086c:	d01f      	beq.n	80008ae <HAL_ADC_IRQHandler+0x1c6>
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800086e:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8000872:	d11c      	bne.n	80008ae <HAL_ADC_IRQHandler+0x1c6>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000874:	689a      	ldr	r2, [r3, #8]
 8000876:	f012 0f08 	tst.w	r2, #8
 800087a:	d110      	bne.n	800089e <HAL_ADC_IRQHandler+0x1b6>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800087c:	685a      	ldr	r2, [r3, #4]
 800087e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000882:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000884:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000886:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800088a:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800088c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800088e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000892:	d10c      	bne.n	80008ae <HAL_ADC_IRQHandler+0x1c6>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000894:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	6563      	str	r3, [r4, #84]	; 0x54
 800089c:	e007      	b.n	80008ae <HAL_ADC_IRQHandler+0x1c6>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800089e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008a0:	f043 0310 	orr.w	r3, r3, #16
 80008a4:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80008ae:	4620      	mov	r0, r4
 80008b0:	f000 fe1c 	bl	80014ec <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80008b4:	6823      	ldr	r3, [r4, #0]
 80008b6:	2260      	movs	r2, #96	; 0x60
 80008b8:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80008ba:	f015 0f80 	tst.w	r5, #128	; 0x80
 80008be:	d002      	beq.n	80008c6 <HAL_ADC_IRQHandler+0x1de>
 80008c0:	f016 0f80 	tst.w	r6, #128	; 0x80
 80008c4:	d136      	bne.n	8000934 <HAL_ADC_IRQHandler+0x24c>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80008c6:	f415 7f80 	tst.w	r5, #256	; 0x100
 80008ca:	d002      	beq.n	80008d2 <HAL_ADC_IRQHandler+0x1ea>
 80008cc:	f416 7f80 	tst.w	r6, #256	; 0x100
 80008d0:	d13b      	bne.n	800094a <HAL_ADC_IRQHandler+0x262>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80008d2:	f415 7f00 	tst.w	r5, #512	; 0x200
 80008d6:	d002      	beq.n	80008de <HAL_ADC_IRQHandler+0x1f6>
 80008d8:	f416 7f00 	tst.w	r6, #512	; 0x200
 80008dc:	d141      	bne.n	8000962 <HAL_ADC_IRQHandler+0x27a>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80008de:	f015 0f10 	tst.w	r5, #16
 80008e2:	d020      	beq.n	8000926 <HAL_ADC_IRQHandler+0x23e>
 80008e4:	f016 0f10 	tst.w	r6, #16
 80008e8:	d01d      	beq.n	8000926 <HAL_ADC_IRQHandler+0x23e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80008ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008ec:	b16b      	cbz	r3, 800090a <HAL_ADC_IRQHandler+0x222>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80008ee:	2f00      	cmp	r7, #0
 80008f0:	d045      	beq.n	800097e <HAL_ADC_IRQHandler+0x296>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80008f2:	6823      	ldr	r3, [r4, #0]
 80008f4:	4925      	ldr	r1, [pc, #148]	; (800098c <HAL_ADC_IRQHandler+0x2a4>)
 80008f6:	4a26      	ldr	r2, [pc, #152]	; (8000990 <HAL_ADC_IRQHandler+0x2a8>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	bf18      	it	ne
 80008fc:	428b      	cmpne	r3, r1
 80008fe:	d13c      	bne.n	800097a <HAL_ADC_IRQHandler+0x292>
 8000900:	4b24      	ldr	r3, [pc, #144]	; (8000994 <HAL_ADC_IRQHandler+0x2ac>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8000908:	d00a      	beq.n	8000920 <HAL_ADC_IRQHandler+0x238>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800090a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800090c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000910:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000912:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 800091a:	4620      	mov	r0, r4
 800091c:	f7ff fee3 	bl	80006e6 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000920:	6823      	ldr	r3, [r4, #0]
 8000922:	2210      	movs	r2, #16
 8000924:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8000926:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800092a:	d002      	beq.n	8000932 <HAL_ADC_IRQHandler+0x24a>
 800092c:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8000930:	d134      	bne.n	800099c <HAL_ADC_IRQHandler+0x2b4>
}
 8000932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000934:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800093a:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800093c:	4620      	mov	r0, r4
 800093e:	f7ff fed1 	bl	80006e4 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8000942:	6823      	ldr	r3, [r4, #0]
 8000944:	2280      	movs	r2, #128	; 0x80
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	e7bd      	b.n	80008c6 <HAL_ADC_IRQHandler+0x1de>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800094a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800094c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000950:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000952:	4620      	mov	r0, r4
 8000954:	f000 fdcc 	bl	80014f0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8000958:	6823      	ldr	r3, [r4, #0]
 800095a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	e7b7      	b.n	80008d2 <HAL_ADC_IRQHandler+0x1ea>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8000962:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000968:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800096a:	4620      	mov	r0, r4
 800096c:	f000 fdc1 	bl	80014f2 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8000970:	6823      	ldr	r3, [r4, #0]
 8000972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	e7b1      	b.n	80008de <HAL_ADC_IRQHandler+0x1f6>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800097a:	4b07      	ldr	r3, [pc, #28]	; (8000998 <HAL_ADC_IRQHandler+0x2b0>)
 800097c:	e7c1      	b.n	8000902 <HAL_ADC_IRQHandler+0x21a>
      if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800097e:	6823      	ldr	r3, [r4, #0]
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	f013 0f03 	tst.w	r3, #3
 8000986:	d0cb      	beq.n	8000920 <HAL_ADC_IRQHandler+0x238>
 8000988:	e7bf      	b.n	800090a <HAL_ADC_IRQHandler+0x222>
 800098a:	bf00      	nop
 800098c:	40022000 	.word	0x40022000
 8000990:	40022100 	.word	0x40022100
 8000994:	40022300 	.word	0x40022300
 8000998:	58026300 	.word	0x58026300
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800099c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800099e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a2:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80009a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80009a6:	f043 0308 	orr.w	r3, r3, #8
 80009aa:	65a3      	str	r3, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80009ac:	6823      	ldr	r3, [r4, #0]
 80009ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009b2:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80009b4:	4620      	mov	r0, r4
 80009b6:	f000 fd9a 	bl	80014ee <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 80009ba:	e7ba      	b.n	8000932 <HAL_ADC_IRQHandler+0x24a>

080009bc <ADC_DMAConvCplt>:
{
 80009bc:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80009be:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80009c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80009c2:	f012 0f50 	tst.w	r2, #80	; 0x50
 80009c6:	d131      	bne.n	8000a2c <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80009c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80009ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80009ce:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	6811      	ldr	r1, [r2, #0]
 80009d4:	f011 0f08 	tst.w	r1, #8
 80009d8:	d014      	beq.n	8000a04 <ADC_DMAConvCplt+0x48>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80009da:	68d1      	ldr	r1, [r2, #12]
 80009dc:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 80009e0:	d120      	bne.n	8000a24 <ADC_DMAConvCplt+0x68>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80009e2:	68d2      	ldr	r2, [r2, #12]
 80009e4:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 80009e8:	d11c      	bne.n	8000a24 <ADC_DMAConvCplt+0x68>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80009ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80009ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80009f0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80009f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80009f4:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 80009f8:	d114      	bne.n	8000a24 <ADC_DMAConvCplt+0x68>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80009fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80009fc:	f042 0201 	orr.w	r2, r2, #1
 8000a00:	655a      	str	r2, [r3, #84]	; 0x54
 8000a02:	e00f      	b.n	8000a24 <ADC_DMAConvCplt+0x68>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8000a04:	68d2      	ldr	r2, [r2, #12]
 8000a06:	f012 0f03 	tst.w	r2, #3
 8000a0a:	d10b      	bne.n	8000a24 <ADC_DMAConvCplt+0x68>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000a0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000a0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000a12:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000a14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000a16:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8000a1a:	d103      	bne.n	8000a24 <ADC_DMAConvCplt+0x68>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000a1e:	f042 0201 	orr.w	r2, r2, #1
 8000a22:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8000a24:	4618      	mov	r0, r3
 8000a26:	f009 fcf3 	bl	800a410 <HAL_ADC_ConvCpltCallback>
}
 8000a2a:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8000a2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000a2e:	f012 0f10 	tst.w	r2, #16
 8000a32:	d103      	bne.n	8000a3c <ADC_DMAConvCplt+0x80>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a38:	4798      	blx	r3
}
 8000a3a:	e7f6      	b.n	8000a2a <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fe52 	bl	80006e6 <HAL_ADC_ErrorCallback>
 8000a42:	e7f2      	b.n	8000a2a <ADC_DMAConvCplt+0x6e>

08000a44 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8000a44:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000a46:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000a48:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a4e:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000a50:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000a52:	f043 0304 	orr.w	r3, r3, #4
 8000a56:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000a58:	f7ff fe45 	bl	80006e6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000a5c:	bd08      	pop	{r3, pc}
	...

08000a60 <HAL_ADC_ConfigChannel>:
{
 8000a60:	b4f0      	push	{r4, r5, r6, r7}
 8000a62:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8000a64:	2200      	movs	r2, #0
 8000a66:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8000a68:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8000a6c:	2a01      	cmp	r2, #1
 8000a6e:	f000 823b 	beq.w	8000ee8 <HAL_ADC_ConfigChannel+0x488>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2201      	movs	r2, #1
 8000a76:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000a7a:	6804      	ldr	r4, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000a7c:	68a2      	ldr	r2, [r4, #8]
 8000a7e:	f012 0204 	ands.w	r2, r2, #4
 8000a82:	d00a      	beq.n	8000a9a <HAL_ADC_ConfigChannel+0x3a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a84:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8000a86:	f042 0220 	orr.w	r2, r2, #32
 8000a8a:	6542      	str	r2, [r0, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000a8c:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8000a94:	b002      	add	sp, #8
 8000a96:	bcf0      	pop	{r4, r5, r6, r7}
 8000a98:	4770      	bx	lr
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8000a9a:	6808      	ldr	r0, [r1, #0]
 8000a9c:	f3c0 0513 	ubfx	r5, r0, #0, #20
 8000aa0:	2d00      	cmp	r5, #0
 8000aa2:	d150      	bne.n	8000b46 <HAL_ADC_ConfigChannel+0xe6>
 8000aa4:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8000aa8:	2501      	movs	r5, #1
 8000aaa:	4085      	lsls	r5, r0
 8000aac:	69e0      	ldr	r0, [r4, #28]
 8000aae:	4328      	orrs	r0, r5
 8000ab0:	61e0      	str	r0, [r4, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000ab2:	681f      	ldr	r7, [r3, #0]
 8000ab4:	684e      	ldr	r6, [r1, #4]
 8000ab6:	680d      	ldr	r5, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000ab8:	3730      	adds	r7, #48	; 0x30
 8000aba:	0a30      	lsrs	r0, r6, #8
 8000abc:	0080      	lsls	r0, r0, #2
 8000abe:	f000 000c 	and.w	r0, r0, #12
  MODIFY_REG(*preg,
 8000ac2:	583c      	ldr	r4, [r7, r0]
 8000ac4:	f006 061f 	and.w	r6, r6, #31
 8000ac8:	f04f 0c1f 	mov.w	ip, #31
 8000acc:	fa0c fc06 	lsl.w	ip, ip, r6
 8000ad0:	ea24 040c 	bic.w	r4, r4, ip
 8000ad4:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8000ad8:	40b5      	lsls	r5, r6
 8000ada:	432c      	orrs	r4, r5
 8000adc:	503c      	str	r4, [r7, r0]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ade:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ae0:	6884      	ldr	r4, [r0, #8]
 8000ae2:	f014 0f04 	tst.w	r4, #4
 8000ae6:	d037      	beq.n	8000b58 <HAL_ADC_ConfigChannel+0xf8>
 8000ae8:	2401      	movs	r4, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000aea:	6885      	ldr	r5, [r0, #8]
 8000aec:	f015 0f08 	tst.w	r5, #8
 8000af0:	d034      	beq.n	8000b5c <HAL_ADC_ConfigChannel+0xfc>
 8000af2:	2501      	movs	r5, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000af4:	432c      	orrs	r4, r5
 8000af6:	d165      	bne.n	8000bc4 <HAL_ADC_ConfigChannel+0x164>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000af8:	680f      	ldr	r7, [r1, #0]
 8000afa:	688c      	ldr	r4, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000afc:	f100 0514 	add.w	r5, r0, #20
 8000b00:	0e78      	lsrs	r0, r7, #25
 8000b02:	0080      	lsls	r0, r0, #2
 8000b04:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8000b08:	582e      	ldr	r6, [r5, r0]
 8000b0a:	f3c7 5704 	ubfx	r7, r7, #20, #5
 8000b0e:	f04f 0c07 	mov.w	ip, #7
 8000b12:	fa0c fc07 	lsl.w	ip, ip, r7
 8000b16:	ea26 060c 	bic.w	r6, r6, ip
 8000b1a:	40bc      	lsls	r4, r7
 8000b1c:	4334      	orrs	r4, r6
 8000b1e:	502c      	str	r4, [r5, r0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000b20:	48a9      	ldr	r0, [pc, #676]	; (8000dc8 <HAL_ADC_ConfigChannel+0x368>)
 8000b22:	6800      	ldr	r0, [r0, #0]
 8000b24:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8000b28:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8000b2c:	d018      	beq.n	8000b60 <HAL_ADC_ConfigChannel+0x100>
 8000b2e:	681c      	ldr	r4, [r3, #0]
 8000b30:	68e0      	ldr	r0, [r4, #12]
 8000b32:	f010 0f10 	tst.w	r0, #16
 8000b36:	d167      	bne.n	8000c08 <HAL_ADC_ConfigChannel+0x1a8>
 8000b38:	6948      	ldr	r0, [r1, #20]
 8000b3a:	68e4      	ldr	r4, [r4, #12]
 8000b3c:	f3c4 0482 	ubfx	r4, r4, #2, #3
 8000b40:	0064      	lsls	r4, r4, #1
 8000b42:	40a0      	lsls	r0, r4
 8000b44:	e013      	b.n	8000b6e <HAL_ADC_ConfigChannel+0x10e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b46:	fa90 f0a0 	rbit	r0, r0
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8000b4a:	fab0 f080 	clz	r0, r0
 8000b4e:	f000 001f 	and.w	r0, r0, #31
 8000b52:	2501      	movs	r5, #1
 8000b54:	4085      	lsls	r5, r0
 8000b56:	e7a9      	b.n	8000aac <HAL_ADC_ConfigChannel+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b58:	2400      	movs	r4, #0
 8000b5a:	e7c6      	b.n	8000aea <HAL_ADC_ConfigChannel+0x8a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000b5c:	2500      	movs	r5, #0
 8000b5e:	e7c9      	b.n	8000af4 <HAL_ADC_ConfigChannel+0x94>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000b60:	6948      	ldr	r0, [r1, #20]
 8000b62:	681c      	ldr	r4, [r3, #0]
 8000b64:	68e4      	ldr	r4, [r4, #12]
 8000b66:	f3c4 0482 	ubfx	r4, r4, #2, #3
 8000b6a:	0064      	lsls	r4, r4, #1
 8000b6c:	40a0      	lsls	r0, r4
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000b6e:	690d      	ldr	r5, [r1, #16]
 8000b70:	2d04      	cmp	r5, #4
 8000b72:	d057      	beq.n	8000c24 <HAL_ADC_ConfigChannel+0x1c4>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000b74:	681f      	ldr	r7, [r3, #0]
 8000b76:	680e      	ldr	r6, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b78:	3760      	adds	r7, #96	; 0x60
  MODIFY_REG(*preg,
 8000b7a:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
 8000b7e:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 8000b82:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8000b86:	4330      	orrs	r0, r6
 8000b88:	4320      	orrs	r0, r4
 8000b8a:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8000b8e:	6818      	ldr	r0, [r3, #0]
 8000b90:	690e      	ldr	r6, [r1, #16]
 8000b92:	7e4c      	ldrb	r4, [r1, #25]
 8000b94:	2c01      	cmp	r4, #1
 8000b96:	d03f      	beq.n	8000c18 <HAL_ADC_ConfigChannel+0x1b8>
 8000b98:	4615      	mov	r5, r2
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b9a:	3060      	adds	r0, #96	; 0x60
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000b9c:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8000ba0:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8000ba4:	432c      	orrs	r4, r5
 8000ba6:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8000baa:	681d      	ldr	r5, [r3, #0]
 8000bac:	690c      	ldr	r4, [r1, #16]
 8000bae:	7e08      	ldrb	r0, [r1, #24]
 8000bb0:	2801      	cmp	r0, #1
 8000bb2:	d034      	beq.n	8000c1e <HAL_ADC_ConfigChannel+0x1be>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000bb4:	6928      	ldr	r0, [r5, #16]
 8000bb6:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8000bba:	f004 041f 	and.w	r4, r4, #31
 8000bbe:	40a2      	lsls	r2, r4
 8000bc0:	4302      	orrs	r2, r0
 8000bc2:	612a      	str	r2, [r5, #16]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000bc4:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000bc6:	6882      	ldr	r2, [r0, #8]
 8000bc8:	f012 0f01 	tst.w	r2, #1
 8000bcc:	f040 8188 	bne.w	8000ee0 <HAL_ADC_ConfigChannel+0x480>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000bd0:	680a      	ldr	r2, [r1, #0]
 8000bd2:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8000bd4:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
 8000bd8:	f3c2 0613 	ubfx	r6, r2, #0, #20
 8000bdc:	ea24 0406 	bic.w	r4, r4, r6
 8000be0:	f005 0618 	and.w	r6, r5, #24
 8000be4:	4d79      	ldr	r5, [pc, #484]	; (8000dcc <HAL_ADC_ConfigChannel+0x36c>)
 8000be6:	40f5      	lsrs	r5, r6
 8000be8:	402a      	ands	r2, r5
 8000bea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8000bee:	4322      	orrs	r2, r4
 8000bf0:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000bf4:	68c8      	ldr	r0, [r1, #12]
 8000bf6:	4a76      	ldr	r2, [pc, #472]	; (8000dd0 <HAL_ADC_ConfigChannel+0x370>)
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	d047      	beq.n	8000c8c <HAL_ADC_ConfigChannel+0x22c>
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000bfc:	680a      	ldr	r2, [r1, #0]
 8000bfe:	2a00      	cmp	r2, #0
 8000c00:	f2c0 80e8 	blt.w	8000dd4 <HAL_ADC_ConfigChannel+0x374>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c04:	2000      	movs	r0, #0
 8000c06:	e742      	b.n	8000a8e <HAL_ADC_ConfigChannel+0x2e>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000c08:	6948      	ldr	r0, [r1, #20]
 8000c0a:	68e4      	ldr	r4, [r4, #12]
 8000c0c:	08a4      	lsrs	r4, r4, #2
 8000c0e:	f004 0404 	and.w	r4, r4, #4
 8000c12:	0064      	lsls	r4, r4, #1
 8000c14:	40a0      	lsls	r0, r4
 8000c16:	e7aa      	b.n	8000b6e <HAL_ADC_ConfigChannel+0x10e>
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8000c18:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8000c1c:	e7bd      	b.n	8000b9a <HAL_ADC_ConfigChannel+0x13a>
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8000c1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c22:	e7c7      	b.n	8000bb4 <HAL_ADC_ConfigChannel+0x154>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000c24:	6818      	ldr	r0, [r3, #0]
 8000c26:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000c28:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000c2c:	680c      	ldr	r4, [r1, #0]
 8000c2e:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8000c32:	d01c      	beq.n	8000c6e <HAL_ADC_ConfigChannel+0x20e>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000c34:	6818      	ldr	r0, [r3, #0]
 8000c36:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8000c38:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000c3c:	680c      	ldr	r4, [r1, #0]
 8000c3e:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8000c42:	d019      	beq.n	8000c78 <HAL_ADC_ConfigChannel+0x218>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000c44:	6818      	ldr	r0, [r3, #0]
 8000c46:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8000c48:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000c4c:	680c      	ldr	r4, [r1, #0]
 8000c4e:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8000c52:	d016      	beq.n	8000c82 <HAL_ADC_ConfigChannel+0x222>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000c54:	6818      	ldr	r0, [r3, #0]
 8000c56:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8000c58:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000c5c:	680c      	ldr	r4, [r1, #0]
 8000c5e:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8000c62:	d1af      	bne.n	8000bc4 <HAL_ADC_ConfigChannel+0x164>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8000c64:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8000c66:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000c6a:	66c2      	str	r2, [r0, #108]	; 0x6c
 8000c6c:	e7aa      	b.n	8000bc4 <HAL_ADC_ConfigChannel+0x164>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8000c6e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000c70:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000c74:	6602      	str	r2, [r0, #96]	; 0x60
 8000c76:	e7dd      	b.n	8000c34 <HAL_ADC_ConfigChannel+0x1d4>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8000c78:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8000c7a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000c7e:	6642      	str	r2, [r0, #100]	; 0x64
 8000c80:	e7e0      	b.n	8000c44 <HAL_ADC_ConfigChannel+0x1e4>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8000c82:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8000c84:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000c88:	6682      	str	r2, [r0, #104]	; 0x68
 8000c8a:	e7e3      	b.n	8000c54 <HAL_ADC_ConfigChannel+0x1f4>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000c8c:	681d      	ldr	r5, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000c8e:	680a      	ldr	r2, [r1, #0]
 8000c90:	f3c2 0613 	ubfx	r6, r2, #0, #20
 8000c94:	bb96      	cbnz	r6, 8000cfc <HAL_ADC_ConfigChannel+0x29c>
 8000c96:	0e90      	lsrs	r0, r2, #26
 8000c98:	3001      	adds	r0, #1
 8000c9a:	f000 001f 	and.w	r0, r0, #31
 8000c9e:	2809      	cmp	r0, #9
 8000ca0:	bf8c      	ite	hi
 8000ca2:	2000      	movhi	r0, #0
 8000ca4:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000ca6:	2800      	cmp	r0, #0
 8000ca8:	d052      	beq.n	8000d50 <HAL_ADC_ConfigChannel+0x2f0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000caa:	bb9e      	cbnz	r6, 8000d14 <HAL_ADC_ConfigChannel+0x2b4>
 8000cac:	0e94      	lsrs	r4, r2, #26
 8000cae:	3401      	adds	r4, #1
 8000cb0:	06a4      	lsls	r4, r4, #26
 8000cb2:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8000cb6:	bbb6      	cbnz	r6, 8000d26 <HAL_ADC_ConfigChannel+0x2c6>
 8000cb8:	0e90      	lsrs	r0, r2, #26
 8000cba:	3001      	adds	r0, #1
 8000cbc:	f000 071f 	and.w	r7, r0, #31
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	40b8      	lsls	r0, r7
 8000cc4:	4304      	orrs	r4, r0
 8000cc6:	bbc6      	cbnz	r6, 8000d3a <HAL_ADC_ConfigChannel+0x2da>
 8000cc8:	0e92      	lsrs	r2, r2, #26
 8000cca:	3201      	adds	r2, #1
 8000ccc:	f002 021f 	and.w	r2, r2, #31
 8000cd0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000cd4:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000cd6:	4322      	orrs	r2, r4
 8000cd8:	688c      	ldr	r4, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000cda:	3514      	adds	r5, #20
 8000cdc:	0e50      	lsrs	r0, r2, #25
 8000cde:	0080      	lsls	r0, r0, #2
 8000ce0:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8000ce4:	582e      	ldr	r6, [r5, r0]
 8000ce6:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8000cea:	2707      	movs	r7, #7
 8000cec:	4097      	lsls	r7, r2
 8000cee:	ea26 0607 	bic.w	r6, r6, r7
 8000cf2:	fa04 f202 	lsl.w	r2, r4, r2
 8000cf6:	4332      	orrs	r2, r6
 8000cf8:	502a      	str	r2, [r5, r0]
 8000cfa:	e77f      	b.n	8000bfc <HAL_ADC_ConfigChannel+0x19c>
 8000cfc:	fa92 f0a2 	rbit	r0, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000d00:	fab0 f080 	clz	r0, r0
 8000d04:	3001      	adds	r0, #1
 8000d06:	f000 001f 	and.w	r0, r0, #31
 8000d0a:	2809      	cmp	r0, #9
 8000d0c:	bf8c      	ite	hi
 8000d0e:	2000      	movhi	r0, #0
 8000d10:	2001      	movls	r0, #1
 8000d12:	e7c8      	b.n	8000ca6 <HAL_ADC_ConfigChannel+0x246>
 8000d14:	fa92 f4a2 	rbit	r4, r2
 8000d18:	fab4 f484 	clz	r4, r4
 8000d1c:	3401      	adds	r4, #1
 8000d1e:	06a4      	lsls	r4, r4, #26
 8000d20:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8000d24:	e7c7      	b.n	8000cb6 <HAL_ADC_ConfigChannel+0x256>
 8000d26:	fa92 f0a2 	rbit	r0, r2
 8000d2a:	fab0 f080 	clz	r0, r0
 8000d2e:	3001      	adds	r0, #1
 8000d30:	f000 071f 	and.w	r7, r0, #31
 8000d34:	2001      	movs	r0, #1
 8000d36:	40b8      	lsls	r0, r7
 8000d38:	e7c4      	b.n	8000cc4 <HAL_ADC_ConfigChannel+0x264>
 8000d3a:	fa92 f2a2 	rbit	r2, r2
 8000d3e:	fab2 f282 	clz	r2, r2
 8000d42:	3201      	adds	r2, #1
 8000d44:	f002 021f 	and.w	r2, r2, #31
 8000d48:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000d4c:	0512      	lsls	r2, r2, #20
 8000d4e:	e7c2      	b.n	8000cd6 <HAL_ADC_ConfigChannel+0x276>
 8000d50:	b9ce      	cbnz	r6, 8000d86 <HAL_ADC_ConfigChannel+0x326>
 8000d52:	0e94      	lsrs	r4, r2, #26
 8000d54:	3401      	adds	r4, #1
 8000d56:	06a4      	lsls	r4, r4, #26
 8000d58:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8000d5c:	b9e6      	cbnz	r6, 8000d98 <HAL_ADC_ConfigChannel+0x338>
 8000d5e:	0e90      	lsrs	r0, r2, #26
 8000d60:	3001      	adds	r0, #1
 8000d62:	f000 071f 	and.w	r7, r0, #31
 8000d66:	2001      	movs	r0, #1
 8000d68:	40b8      	lsls	r0, r7
 8000d6a:	4304      	orrs	r4, r0
 8000d6c:	b9f6      	cbnz	r6, 8000dac <HAL_ADC_ConfigChannel+0x34c>
 8000d6e:	0e90      	lsrs	r0, r2, #26
 8000d70:	3001      	adds	r0, #1
 8000d72:	f000 001f 	and.w	r0, r0, #31
 8000d76:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8000d7a:	3a1e      	subs	r2, #30
 8000d7c:	0512      	lsls	r2, r2, #20
 8000d7e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000d82:	4322      	orrs	r2, r4
 8000d84:	e7a8      	b.n	8000cd8 <HAL_ADC_ConfigChannel+0x278>
 8000d86:	fa92 f4a2 	rbit	r4, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000d8a:	fab4 f484 	clz	r4, r4
 8000d8e:	3401      	adds	r4, #1
 8000d90:	06a4      	lsls	r4, r4, #26
 8000d92:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8000d96:	e7e1      	b.n	8000d5c <HAL_ADC_ConfigChannel+0x2fc>
 8000d98:	fa92 f0a2 	rbit	r0, r2
 8000d9c:	fab0 f080 	clz	r0, r0
 8000da0:	3001      	adds	r0, #1
 8000da2:	f000 071f 	and.w	r7, r0, #31
 8000da6:	2001      	movs	r0, #1
 8000da8:	40b8      	lsls	r0, r7
 8000daa:	e7de      	b.n	8000d6a <HAL_ADC_ConfigChannel+0x30a>
 8000dac:	fa92 f0a2 	rbit	r0, r2
 8000db0:	fab0 f080 	clz	r0, r0
 8000db4:	3001      	adds	r0, #1
 8000db6:	f000 001f 	and.w	r0, r0, #31
 8000dba:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8000dbe:	3a1e      	subs	r2, #30
 8000dc0:	0512      	lsls	r2, r2, #20
 8000dc2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000dc6:	e7dc      	b.n	8000d82 <HAL_ADC_ConfigChannel+0x322>
 8000dc8:	5c001000 	.word	0x5c001000
 8000dcc:	000fffff 	.word	0x000fffff
 8000dd0:	47ff0000 	.word	0x47ff0000
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000dd4:	6819      	ldr	r1, [r3, #0]
 8000dd6:	4845      	ldr	r0, [pc, #276]	; (8000eec <HAL_ADC_ConfigChannel+0x48c>)
 8000dd8:	4c45      	ldr	r4, [pc, #276]	; (8000ef0 <HAL_ADC_ConfigChannel+0x490>)
 8000dda:	42a1      	cmp	r1, r4
 8000ddc:	bf18      	it	ne
 8000dde:	4281      	cmpne	r1, r0
 8000de0:	bf0c      	ite	eq
 8000de2:	2001      	moveq	r0, #1
 8000de4:	2000      	movne	r0, #0
 8000de6:	d121      	bne.n	8000e2c <HAL_ADC_ConfigChannel+0x3cc>
 8000de8:	4d42      	ldr	r5, [pc, #264]	; (8000ef4 <HAL_ADC_ConfigChannel+0x494>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000dea:	68ac      	ldr	r4, [r5, #8]
 8000dec:	f004 76e0 	and.w	r6, r4, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000df0:	b310      	cbz	r0, 8000e38 <HAL_ADC_ConfigChannel+0x3d8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000df2:	483e      	ldr	r0, [pc, #248]	; (8000eec <HAL_ADC_ConfigChannel+0x48c>)
 8000df4:	6880      	ldr	r0, [r0, #8]
 8000df6:	f010 0f01 	tst.w	r0, #1
 8000dfa:	d019      	beq.n	8000e30 <HAL_ADC_ConfigChannel+0x3d0>
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	4f3c      	ldr	r7, [pc, #240]	; (8000ef0 <HAL_ADC_ConfigChannel+0x490>)
 8000e00:	68bf      	ldr	r7, [r7, #8]
 8000e02:	f017 0f01 	tst.w	r7, #1
 8000e06:	d015      	beq.n	8000e34 <HAL_ADC_ConfigChannel+0x3d4>
 8000e08:	2701      	movs	r7, #1
 8000e0a:	4338      	orrs	r0, r7
 8000e0c:	bf0c      	ite	eq
 8000e0e:	2001      	moveq	r0, #1
 8000e10:	2000      	movne	r0, #0
 8000e12:	2800      	cmp	r0, #0
 8000e14:	d05e      	beq.n	8000ed4 <HAL_ADC_ConfigChannel+0x474>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000e16:	4838      	ldr	r0, [pc, #224]	; (8000ef8 <HAL_ADC_ConfigChannel+0x498>)
 8000e18:	4282      	cmp	r2, r0
 8000e1a:	d018      	beq.n	8000e4e <HAL_ADC_ConfigChannel+0x3ee>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000e1c:	4837      	ldr	r0, [pc, #220]	; (8000efc <HAL_ADC_ConfigChannel+0x49c>)
 8000e1e:	4282      	cmp	r2, r0
 8000e20:	d036      	beq.n	8000e90 <HAL_ADC_ConfigChannel+0x430>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000e22:	4837      	ldr	r0, [pc, #220]	; (8000f00 <HAL_ADC_ConfigChannel+0x4a0>)
 8000e24:	4282      	cmp	r2, r0
 8000e26:	d044      	beq.n	8000eb2 <HAL_ADC_ConfigChannel+0x452>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e28:	2000      	movs	r0, #0
 8000e2a:	e630      	b.n	8000a8e <HAL_ADC_ConfigChannel+0x2e>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000e2c:	4d35      	ldr	r5, [pc, #212]	; (8000f04 <HAL_ADC_ConfigChannel+0x4a4>)
 8000e2e:	e7dc      	b.n	8000dea <HAL_ADC_ConfigChannel+0x38a>
 8000e30:	2000      	movs	r0, #0
 8000e32:	e7e4      	b.n	8000dfe <HAL_ADC_ConfigChannel+0x39e>
 8000e34:	2700      	movs	r7, #0
 8000e36:	e7e8      	b.n	8000e0a <HAL_ADC_ConfigChannel+0x3aa>
 8000e38:	4833      	ldr	r0, [pc, #204]	; (8000f08 <HAL_ADC_ConfigChannel+0x4a8>)
 8000e3a:	6880      	ldr	r0, [r0, #8]
 8000e3c:	f010 0f01 	tst.w	r0, #1
 8000e40:	d003      	beq.n	8000e4a <HAL_ADC_ConfigChannel+0x3ea>
 8000e42:	2001      	movs	r0, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e44:	f080 0001 	eor.w	r0, r0, #1
 8000e48:	e7e3      	b.n	8000e12 <HAL_ADC_ConfigChannel+0x3b2>
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	e7fa      	b.n	8000e44 <HAL_ADC_ConfigChannel+0x3e4>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000e4e:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
 8000e52:	d1e3      	bne.n	8000e1c <HAL_ADC_ConfigChannel+0x3bc>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8000e54:	4a2c      	ldr	r2, [pc, #176]	; (8000f08 <HAL_ADC_ConfigChannel+0x4a8>)
 8000e56:	4291      	cmp	r1, r2
 8000e58:	d001      	beq.n	8000e5e <HAL_ADC_ConfigChannel+0x3fe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	e617      	b.n	8000a8e <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8000e5e:	f446 0200 	orr.w	r2, r6, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e62:	68a9      	ldr	r1, [r5, #8]
 8000e64:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	60aa      	str	r2, [r5, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000e6c:	4a27      	ldr	r2, [pc, #156]	; (8000f0c <HAL_ADC_ConfigChannel+0x4ac>)
 8000e6e:	6812      	ldr	r2, [r2, #0]
 8000e70:	0992      	lsrs	r2, r2, #6
 8000e72:	4927      	ldr	r1, [pc, #156]	; (8000f10 <HAL_ADC_ConfigChannel+0x4b0>)
 8000e74:	fba1 1202 	umull	r1, r2, r1, r2
 8000e78:	0992      	lsrs	r2, r2, #6
 8000e7a:	0052      	lsls	r2, r2, #1
 8000e7c:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 8000e7e:	e002      	b.n	8000e86 <HAL_ADC_ConfigChannel+0x426>
                wait_loop_index--;
 8000e80:	9a01      	ldr	r2, [sp, #4]
 8000e82:	3a01      	subs	r2, #1
 8000e84:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 8000e86:	9a01      	ldr	r2, [sp, #4]
 8000e88:	2a00      	cmp	r2, #0
 8000e8a:	d1f9      	bne.n	8000e80 <HAL_ADC_ConfigChannel+0x420>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	e5fe      	b.n	8000a8e <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000e90:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
 8000e94:	d1c5      	bne.n	8000e22 <HAL_ADC_ConfigChannel+0x3c2>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8000e96:	4a1c      	ldr	r2, [pc, #112]	; (8000f08 <HAL_ADC_ConfigChannel+0x4a8>)
 8000e98:	4291      	cmp	r1, r2
 8000e9a:	d001      	beq.n	8000ea0 <HAL_ADC_ConfigChannel+0x440>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	e5f6      	b.n	8000a8e <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8000ea0:	f046 7280 	orr.w	r2, r6, #16777216	; 0x1000000
 8000ea4:	68a9      	ldr	r1, [r5, #8]
 8000ea6:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	60aa      	str	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eae:	2000      	movs	r0, #0
 8000eb0:	e5ed      	b.n	8000a8e <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000eb2:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
 8000eb6:	d115      	bne.n	8000ee4 <HAL_ADC_ConfigChannel+0x484>
            if (ADC_VREFINT_INSTANCE(hadc))
 8000eb8:	4a13      	ldr	r2, [pc, #76]	; (8000f08 <HAL_ADC_ConfigChannel+0x4a8>)
 8000eba:	4291      	cmp	r1, r2
 8000ebc:	d001      	beq.n	8000ec2 <HAL_ADC_ConfigChannel+0x462>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	e5e5      	b.n	8000a8e <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8000ec2:	f446 0280 	orr.w	r2, r6, #4194304	; 0x400000
 8000ec6:	68a9      	ldr	r1, [r5, #8]
 8000ec8:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	60aa      	str	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	e5dc      	b.n	8000a8e <HAL_ADC_ConfigChannel+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ed4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000ed6:	f042 0220 	orr.w	r2, r2, #32
 8000eda:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8000edc:	2001      	movs	r0, #1
 8000ede:	e5d6      	b.n	8000a8e <HAL_ADC_ConfigChannel+0x2e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	e5d4      	b.n	8000a8e <HAL_ADC_ConfigChannel+0x2e>
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	e5d2      	b.n	8000a8e <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8000ee8:	2002      	movs	r0, #2
 8000eea:	e5d3      	b.n	8000a94 <HAL_ADC_ConfigChannel+0x34>
 8000eec:	40022000 	.word	0x40022000
 8000ef0:	40022100 	.word	0x40022100
 8000ef4:	40022300 	.word	0x40022300
 8000ef8:	cb840000 	.word	0xcb840000
 8000efc:	c7520000 	.word	0xc7520000
 8000f00:	cfb80000 	.word	0xcfb80000
 8000f04:	58026300 	.word	0x58026300
 8000f08:	58026000 	.word	0x58026000
 8000f0c:	20000014 	.word	0x20000014
 8000f10:	053e2d63 	.word	0x053e2d63

08000f14 <ADC_Enable>:
{
 8000f14:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f16:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	f012 0f01 	tst.w	r2, #1
 8000f1e:	d152      	bne.n	8000fc6 <ADC_Enable+0xb2>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8000f20:	6899      	ldr	r1, [r3, #8]
 8000f22:	4a2a      	ldr	r2, [pc, #168]	; (8000fcc <ADC_Enable+0xb8>)
 8000f24:	4211      	tst	r1, r2
 8000f26:	d009      	beq.n	8000f3c <ADC_Enable+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f28:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000f2a:	f043 0310 	orr.w	r3, r3, #16
 8000f2e:	6543      	str	r3, [r0, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f30:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8000f38:	2001      	movs	r0, #1
 8000f3a:	e045      	b.n	8000fc8 <ADC_Enable+0xb4>
 8000f3c:	4604      	mov	r4, r0
  MODIFY_REG(ADCx->CR,
 8000f3e:	6899      	ldr	r1, [r3, #8]
 8000f40:	4a23      	ldr	r2, [pc, #140]	; (8000fd0 <ADC_Enable+0xbc>)
 8000f42:	400a      	ands	r2, r1
 8000f44:	f042 0201 	orr.w	r2, r2, #1
 8000f48:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000f4a:	f7ff fba5 	bl	8000698 <HAL_GetTick>
 8000f4e:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000f50:	6823      	ldr	r3, [r4, #0]
 8000f52:	4920      	ldr	r1, [pc, #128]	; (8000fd4 <ADC_Enable+0xc0>)
 8000f54:	4a20      	ldr	r2, [pc, #128]	; (8000fd8 <ADC_Enable+0xc4>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	bf18      	it	ne
 8000f5a:	428b      	cmpne	r3, r1
 8000f5c:	d10d      	bne.n	8000f7a <ADC_Enable+0x66>
 8000f5e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000f62:	6892      	ldr	r2, [r2, #8]
 8000f64:	f002 021f 	and.w	r2, r2, #31
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000f68:	491b      	ldr	r1, [pc, #108]	; (8000fd8 <ADC_Enable+0xc4>)
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d007      	beq.n	8000f7e <ADC_Enable+0x6a>
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4299      	cmp	r1, r3
 8000f72:	d00c      	beq.n	8000f8e <ADC_Enable+0x7a>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000f74:	b15a      	cbz	r2, 8000f8e <ADC_Enable+0x7a>
  return HAL_OK;
 8000f76:	2000      	movs	r0, #0
 8000f78:	e026      	b.n	8000fc8 <ADC_Enable+0xb4>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000f7a:	4a18      	ldr	r2, [pc, #96]	; (8000fdc <ADC_Enable+0xc8>)
 8000f7c:	e7f1      	b.n	8000f62 <ADC_Enable+0x4e>
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000f7e:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 8000f82:	e7f5      	b.n	8000f70 <ADC_Enable+0x5c>
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f84:	f7ff fb88 	bl	8000698 <HAL_GetTick>
 8000f88:	1b40      	subs	r0, r0, r5
 8000f8a:	2802      	cmp	r0, #2
 8000f8c:	d80f      	bhi.n	8000fae <ADC_Enable+0x9a>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8000f8e:	6823      	ldr	r3, [r4, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	f012 0f01 	tst.w	r2, #1
 8000f96:	d114      	bne.n	8000fc2 <ADC_Enable+0xae>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	f012 0f01 	tst.w	r2, #1
 8000f9e:	d1f1      	bne.n	8000f84 <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 8000fa0:	6899      	ldr	r1, [r3, #8]
 8000fa2:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <ADC_Enable+0xbc>)
 8000fa4:	400a      	ands	r2, r1
 8000fa6:	f042 0201 	orr.w	r2, r2, #1
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	e7ea      	b.n	8000f84 <ADC_Enable+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000fb0:	f043 0310 	orr.w	r3, r3, #16
 8000fb4:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	e002      	b.n	8000fc8 <ADC_Enable+0xb4>
  return HAL_OK;
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	e000      	b.n	8000fc8 <ADC_Enable+0xb4>
 8000fc6:	2000      	movs	r0, #0
}
 8000fc8:	bd38      	pop	{r3, r4, r5, pc}
 8000fca:	bf00      	nop
 8000fcc:	8000003f 	.word	0x8000003f
 8000fd0:	7fffffc0 	.word	0x7fffffc0
 8000fd4:	40022000 	.word	0x40022000
 8000fd8:	40022100 	.word	0x40022100
 8000fdc:	58026300 	.word	0x58026300

08000fe0 <HAL_ADC_Start_DMA>:
{
 8000fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000fe2:	6804      	ldr	r4, [r0, #0]
 8000fe4:	4e3d      	ldr	r6, [pc, #244]	; (80010dc <HAL_ADC_Start_DMA+0xfc>)
 8000fe6:	4d3e      	ldr	r5, [pc, #248]	; (80010e0 <HAL_ADC_Start_DMA+0x100>)
 8000fe8:	42ac      	cmp	r4, r5
 8000fea:	bf18      	it	ne
 8000fec:	42b4      	cmpne	r4, r6
 8000fee:	d11e      	bne.n	800102e <HAL_ADC_Start_DMA+0x4e>
 8000ff0:	f505 7500 	add.w	r5, r5, #512	; 0x200
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000ff4:	68ad      	ldr	r5, [r5, #8]
 8000ff6:	f005 051f 	and.w	r5, r5, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ffa:	68a4      	ldr	r4, [r4, #8]
 8000ffc:	f014 0f04 	tst.w	r4, #4
 8001000:	d167      	bne.n	80010d2 <HAL_ADC_Start_DMA+0xf2>
    __HAL_LOCK(hadc);
 8001002:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8001006:	2c01      	cmp	r4, #1
 8001008:	d066      	beq.n	80010d8 <HAL_ADC_Start_DMA+0xf8>
 800100a:	2301      	movs	r3, #1
 800100c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001010:	2d05      	cmp	r5, #5
 8001012:	bf14      	ite	ne
 8001014:	2400      	movne	r4, #0
 8001016:	2401      	moveq	r4, #1
 8001018:	2d00      	cmp	r5, #0
 800101a:	bf08      	it	eq
 800101c:	461c      	moveq	r4, r3
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800101e:	b944      	cbnz	r4, 8001032 <HAL_ADC_Start_DMA+0x52>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001020:	2d09      	cmp	r5, #9
 8001022:	d006      	beq.n	8001032 <HAL_ADC_Start_DMA+0x52>
      __HAL_UNLOCK(hadc);
 8001024:	2300      	movs	r3, #0
 8001026:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
      tmp_hal_status = HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e052      	b.n	80010d4 <HAL_ADC_Start_DMA+0xf4>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800102e:	4d2d      	ldr	r5, [pc, #180]	; (80010e4 <HAL_ADC_Start_DMA+0x104>)
 8001030:	e7e0      	b.n	8000ff4 <HAL_ADC_Start_DMA+0x14>
 8001032:	4616      	mov	r6, r2
 8001034:	460f      	mov	r7, r1
 8001036:	4604      	mov	r4, r0
      tmp_hal_status = ADC_Enable(hadc);
 8001038:	f7ff ff6c 	bl	8000f14 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 800103c:	4603      	mov	r3, r0
 800103e:	2800      	cmp	r0, #0
 8001040:	d143      	bne.n	80010ca <HAL_ADC_Start_DMA+0xea>
        ADC_STATE_CLR_SET(hadc->State,
 8001042:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001044:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <HAL_ADC_Start_DMA+0x108>)
 8001046:	4013      	ands	r3, r2
 8001048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104c:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800104e:	6823      	ldr	r3, [r4, #0]
 8001050:	4a23      	ldr	r2, [pc, #140]	; (80010e0 <HAL_ADC_Start_DMA+0x100>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d033      	beq.n	80010be <HAL_ADC_Start_DMA+0xde>
 8001056:	461a      	mov	r2, r3
 8001058:	4293      	cmp	r3, r2
 800105a:	d000      	beq.n	800105e <HAL_ADC_Start_DMA+0x7e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800105c:	b91d      	cbnz	r5, 8001066 <HAL_ADC_Start_DMA+0x86>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800105e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001060:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001064:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001066:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001068:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800106c:	d02a      	beq.n	80010c4 <HAL_ADC_Start_DMA+0xe4>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800106e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001070:	f023 0306 	bic.w	r3, r3, #6
 8001074:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001076:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001078:	4a1c      	ldr	r2, [pc, #112]	; (80010ec <HAL_ADC_Start_DMA+0x10c>)
 800107a:	63da      	str	r2, [r3, #60]	; 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800107c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800107e:	4a1c      	ldr	r2, [pc, #112]	; (80010f0 <HAL_ADC_Start_DMA+0x110>)
 8001080:	641a      	str	r2, [r3, #64]	; 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001082:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001084:	4a1b      	ldr	r2, [pc, #108]	; (80010f4 <HAL_ADC_Start_DMA+0x114>)
 8001086:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001088:	6823      	ldr	r3, [r4, #0]
 800108a:	221c      	movs	r2, #28
 800108c:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 800108e:	2300      	movs	r3, #0
 8001090:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001094:	6822      	ldr	r2, [r4, #0]
 8001096:	6853      	ldr	r3, [r2, #4]
 8001098:	f043 0310 	orr.w	r3, r3, #16
 800109c:	6053      	str	r3, [r2, #4]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800109e:	6821      	ldr	r1, [r4, #0]
 80010a0:	4633      	mov	r3, r6
 80010a2:	463a      	mov	r2, r7
 80010a4:	3140      	adds	r1, #64	; 0x40
 80010a6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80010a8:	f000 fec2 	bl	8001e30 <HAL_DMA_Start_IT>
 80010ac:	4603      	mov	r3, r0
        LL_ADC_REG_StartConversion(hadc->Instance);
 80010ae:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80010b0:	6888      	ldr	r0, [r1, #8]
 80010b2:	4a11      	ldr	r2, [pc, #68]	; (80010f8 <HAL_ADC_Start_DMA+0x118>)
 80010b4:	4002      	ands	r2, r0
 80010b6:	f042 0204 	orr.w	r2, r2, #4
 80010ba:	608a      	str	r2, [r1, #8]
 80010bc:	e00a      	b.n	80010d4 <HAL_ADC_Start_DMA+0xf4>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80010be:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80010c2:	e7c9      	b.n	8001058 <HAL_ADC_Start_DMA+0x78>
          ADC_CLEAR_ERRORCODE(hadc);
 80010c4:	2300      	movs	r3, #0
 80010c6:	65a3      	str	r3, [r4, #88]	; 0x58
 80010c8:	e7d5      	b.n	8001076 <HAL_ADC_Start_DMA+0x96>
        __HAL_UNLOCK(hadc);
 80010ca:	2200      	movs	r2, #0
 80010cc:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 80010d0:	e000      	b.n	80010d4 <HAL_ADC_Start_DMA+0xf4>
    tmp_hal_status = HAL_BUSY;
 80010d2:	2302      	movs	r3, #2
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 80010d8:	2302      	movs	r3, #2
 80010da:	e7fb      	b.n	80010d4 <HAL_ADC_Start_DMA+0xf4>
 80010dc:	40022000 	.word	0x40022000
 80010e0:	40022100 	.word	0x40022100
 80010e4:	58026300 	.word	0x58026300
 80010e8:	fffff0fe 	.word	0xfffff0fe
 80010ec:	080009bd 	.word	0x080009bd
 80010f0:	080006db 	.word	0x080006db
 80010f4:	08000a45 	.word	0x08000a45
 80010f8:	7fffffc0 	.word	0x7fffffc0

080010fc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 80010fc:	b538      	push	{r3, r4, r5, lr}
 80010fe:	4605      	mov	r5, r0
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001100:	6803      	ldr	r3, [r0, #0]
 8001102:	4951      	ldr	r1, [pc, #324]	; (8001248 <ADC_ConfigureBoostMode+0x14c>)
 8001104:	4a51      	ldr	r2, [pc, #324]	; (800124c <ADC_ConfigureBoostMode+0x150>)
 8001106:	4293      	cmp	r3, r2
 8001108:	bf18      	it	ne
 800110a:	428b      	cmpne	r3, r1
 800110c:	d123      	bne.n	8001156 <ADC_ConfigureBoostMode+0x5a>
 800110e:	4b50      	ldr	r3, [pc, #320]	; (8001250 <ADC_ConfigureBoostMode+0x154>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8001116:	bf14      	ite	ne
 8001118:	2301      	movne	r3, #1
 800111a:	2300      	moveq	r3, #0
 800111c:	b34b      	cbz	r3, 8001172 <ADC_ConfigureBoostMode+0x76>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800111e:	f002 fc11 	bl	8003944 <HAL_RCC_GetHCLKFreq>
 8001122:	4604      	mov	r4, r0
    switch(hadc->Init.ClockPrescaler)
 8001124:	686b      	ldr	r3, [r5, #4]
 8001126:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800112a:	d01c      	beq.n	8001166 <ADC_ConfigureBoostMode+0x6a>
 800112c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001130:	d01d      	beq.n	800116e <ADC_ConfigureBoostMode+0x72>
 8001132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001136:	d016      	beq.n	8001166 <ADC_ConfigureBoostMode+0x6a>
      default:
        break;
    }
  }

  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001138:	f7ff fac8 	bl	80006cc <HAL_GetREVID>
 800113c:	f241 0303 	movw	r3, #4099	; 0x1003
 8001140:	4298      	cmp	r0, r3
 8001142:	d856      	bhi.n	80011f2 <ADC_ConfigureBoostMode+0xf6>
  {
    if(freq > 20000000UL)
 8001144:	4b43      	ldr	r3, [pc, #268]	; (8001254 <ADC_ConfigureBoostMode+0x158>)
 8001146:	429c      	cmp	r4, r3
 8001148:	d94d      	bls.n	80011e6 <ADC_ConfigureBoostMode+0xea>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800114a:	682a      	ldr	r2, [r5, #0]
 800114c:	6893      	ldr	r3, [r2, #8]
 800114e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001152:	6093      	str	r3, [r2, #8]
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
}
 8001154:	bd38      	pop	{r3, r4, r5, pc}
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001156:	4b40      	ldr	r3, [pc, #256]	; (8001258 <ADC_ConfigureBoostMode+0x15c>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 800115e:	bf14      	ite	ne
 8001160:	2301      	movne	r3, #1
 8001162:	2300      	moveq	r3, #0
 8001164:	e7da      	b.n	800111c <ADC_ConfigureBoostMode+0x20>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001166:	0c1b      	lsrs	r3, r3, #16
 8001168:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 800116c:	e7e4      	b.n	8001138 <ADC_ConfigureBoostMode+0x3c>
        freq /= 4UL;
 800116e:	0884      	lsrs	r4, r0, #2
        break;
 8001170:	e7e2      	b.n	8001138 <ADC_ConfigureBoostMode+0x3c>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001172:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001176:	f003 fccf 	bl	8004b18 <HAL_RCCEx_GetPeriphCLKFreq>
 800117a:	4604      	mov	r4, r0
    switch(hadc->Init.ClockPrescaler)
 800117c:	686b      	ldr	r3, [r5, #4]
 800117e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001182:	d016      	beq.n	80011b2 <ADC_ConfigureBoostMode+0xb6>
 8001184:	d90b      	bls.n	800119e <ADC_ConfigureBoostMode+0xa2>
 8001186:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800118a:	d028      	beq.n	80011de <ADC_ConfigureBoostMode+0xe2>
 800118c:	d81d      	bhi.n	80011ca <ADC_ConfigureBoostMode+0xce>
 800118e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001192:	d022      	beq.n	80011da <ADC_ConfigureBoostMode+0xde>
 8001194:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001198:	d1ce      	bne.n	8001138 <ADC_ConfigureBoostMode+0x3c>
        freq /= 32UL;
 800119a:	0944      	lsrs	r4, r0, #5
        break;
 800119c:	e7cc      	b.n	8001138 <ADC_ConfigureBoostMode+0x3c>
    switch(hadc->Init.ClockPrescaler)
 800119e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80011a2:	d006      	beq.n	80011b2 <ADC_ConfigureBoostMode+0xb6>
 80011a4:	d80a      	bhi.n	80011bc <ADC_ConfigureBoostMode+0xc0>
 80011a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80011aa:	d002      	beq.n	80011b2 <ADC_ConfigureBoostMode+0xb6>
 80011ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80011b0:	d1c2      	bne.n	8001138 <ADC_ConfigureBoostMode+0x3c>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80011b2:	0c9b      	lsrs	r3, r3, #18
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 80011ba:	e7bd      	b.n	8001138 <ADC_ConfigureBoostMode+0x3c>
    switch(hadc->Init.ClockPrescaler)
 80011bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80011c0:	d0f7      	beq.n	80011b2 <ADC_ConfigureBoostMode+0xb6>
 80011c2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80011c6:	d1b7      	bne.n	8001138 <ADC_ConfigureBoostMode+0x3c>
 80011c8:	e7f3      	b.n	80011b2 <ADC_ConfigureBoostMode+0xb6>
 80011ca:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80011ce:	d008      	beq.n	80011e2 <ADC_ConfigureBoostMode+0xe6>
 80011d0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80011d4:	d1b0      	bne.n	8001138 <ADC_ConfigureBoostMode+0x3c>
        freq /= 256UL;
 80011d6:	0a04      	lsrs	r4, r0, #8
        break;
 80011d8:	e7ae      	b.n	8001138 <ADC_ConfigureBoostMode+0x3c>
        freq /= 16UL;
 80011da:	0904      	lsrs	r4, r0, #4
      break;
 80011dc:	e7ac      	b.n	8001138 <ADC_ConfigureBoostMode+0x3c>
        freq /= 64UL;
 80011de:	0984      	lsrs	r4, r0, #6
        break;
 80011e0:	e7aa      	b.n	8001138 <ADC_ConfigureBoostMode+0x3c>
        freq /= 128UL;
 80011e2:	09c4      	lsrs	r4, r0, #7
        break;
 80011e4:	e7a8      	b.n	8001138 <ADC_ConfigureBoostMode+0x3c>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80011e6:	682a      	ldr	r2, [r5, #0]
 80011e8:	6893      	ldr	r3, [r2, #8]
 80011ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011ee:	6093      	str	r3, [r2, #8]
 80011f0:	e7b0      	b.n	8001154 <ADC_ConfigureBoostMode+0x58>
    freq /= 2U; /* divider by 2 for Rev.V */
 80011f2:	0864      	lsrs	r4, r4, #1
    if (freq <= 6250000UL)
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <ADC_ConfigureBoostMode+0x160>)
 80011f6:	429c      	cmp	r4, r3
 80011f8:	d90f      	bls.n	800121a <ADC_ConfigureBoostMode+0x11e>
    else if((freq > 6250000UL) && (freq <= 12500000UL))
 80011fa:	4b19      	ldr	r3, [pc, #100]	; (8001260 <ADC_ConfigureBoostMode+0x164>)
 80011fc:	4423      	add	r3, r4
 80011fe:	4a19      	ldr	r2, [pc, #100]	; (8001264 <ADC_ConfigureBoostMode+0x168>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d910      	bls.n	8001226 <ADC_ConfigureBoostMode+0x12a>
    else if((freq > 12500000UL) && (freq <= 25000000UL))
 8001204:	4b18      	ldr	r3, [pc, #96]	; (8001268 <ADC_ConfigureBoostMode+0x16c>)
 8001206:	4423      	add	r3, r4
 8001208:	4a18      	ldr	r2, [pc, #96]	; (800126c <ADC_ConfigureBoostMode+0x170>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d913      	bls.n	8001236 <ADC_ConfigureBoostMode+0x13a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800120e:	682a      	ldr	r2, [r5, #0]
 8001210:	6893      	ldr	r3, [r2, #8]
 8001212:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001216:	6093      	str	r3, [r2, #8]
}
 8001218:	e79c      	b.n	8001154 <ADC_ConfigureBoostMode+0x58>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800121a:	682a      	ldr	r2, [r5, #0]
 800121c:	6893      	ldr	r3, [r2, #8]
 800121e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001222:	6093      	str	r3, [r2, #8]
 8001224:	e796      	b.n	8001154 <ADC_ConfigureBoostMode+0x58>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001226:	682a      	ldr	r2, [r5, #0]
 8001228:	6893      	ldr	r3, [r2, #8]
 800122a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800122e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001232:	6093      	str	r3, [r2, #8]
 8001234:	e78e      	b.n	8001154 <ADC_ConfigureBoostMode+0x58>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001236:	682a      	ldr	r2, [r5, #0]
 8001238:	6893      	ldr	r3, [r2, #8]
 800123a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800123e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001242:	6093      	str	r3, [r2, #8]
 8001244:	e786      	b.n	8001154 <ADC_ConfigureBoostMode+0x58>
 8001246:	bf00      	nop
 8001248:	40022000 	.word	0x40022000
 800124c:	40022100 	.word	0x40022100
 8001250:	40022300 	.word	0x40022300
 8001254:	01312d00 	.word	0x01312d00
 8001258:	58026300 	.word	0x58026300
 800125c:	005f5e10 	.word	0x005f5e10
 8001260:	ffa0a1ef 	.word	0xffa0a1ef
 8001264:	005f5e0f 	.word	0x005f5e0f
 8001268:	ff4143df 	.word	0xff4143df
 800126c:	00bebc1f 	.word	0x00bebc1f

08001270 <HAL_ADC_Init>:
{
 8001270:	b530      	push	{r4, r5, lr}
 8001272:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8001274:	2300      	movs	r3, #0
 8001276:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8001278:	2800      	cmp	r0, #0
 800127a:	f000 811c 	beq.w	80014b6 <HAL_ADC_Init+0x246>
 800127e:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001280:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001282:	b1e3      	cbz	r3, 80012be <HAL_ADC_Init+0x4e>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001284:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 800128c:	d003      	beq.n	8001296 <HAL_ADC_Init+0x26>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800128e:	6899      	ldr	r1, [r3, #8]
 8001290:	4a8a      	ldr	r2, [pc, #552]	; (80014bc <HAL_ADC_Init+0x24c>)
 8001292:	400a      	ands	r2, r1
 8001294:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001296:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800129e:	d11b      	bne.n	80012d8 <HAL_ADC_Init+0x68>
  MODIFY_REG(ADCx->CR,
 80012a0:	6899      	ldr	r1, [r3, #8]
 80012a2:	4a87      	ldr	r2, [pc, #540]	; (80014c0 <HAL_ADC_Init+0x250>)
 80012a4:	400a      	ands	r2, r1
 80012a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012aa:	609a      	str	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80012ac:	4b85      	ldr	r3, [pc, #532]	; (80014c4 <HAL_ADC_Init+0x254>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	099b      	lsrs	r3, r3, #6
 80012b2:	4a85      	ldr	r2, [pc, #532]	; (80014c8 <HAL_ADC_Init+0x258>)
 80012b4:	fba2 2303 	umull	r2, r3, r2, r3
 80012b8:	099b      	lsrs	r3, r3, #6
 80012ba:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80012bc:	e009      	b.n	80012d2 <HAL_ADC_Init+0x62>
    HAL_ADC_MspInit(hadc);
 80012be:	f008 fa95 	bl	80097ec <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80012c2:	2300      	movs	r3, #0
 80012c4:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 80012c6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80012ca:	e7db      	b.n	8001284 <HAL_ADC_Init+0x14>
      wait_loop_index--;
 80012cc:	9b01      	ldr	r3, [sp, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80012d2:	9b01      	ldr	r3, [sp, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1f9      	bne.n	80012cc <HAL_ADC_Init+0x5c>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012d8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80012e0:	f040 809d 	bne.w	800141e <HAL_ADC_Init+0x1ae>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012e4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80012e6:	f042 0210 	orr.w	r2, r2, #16
 80012ea:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ec:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80012ee:	f042 0201 	orr.w	r2, r2, #1
 80012f2:	65a2      	str	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80012f4:	2501      	movs	r5, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	f012 0f04 	tst.w	r2, #4
 80012fc:	f000 8091 	beq.w	8001422 <HAL_ADC_Init+0x1b2>
 8001300:	2101      	movs	r1, #1
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001302:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001304:	f012 0f10 	tst.w	r2, #16
 8001308:	f040 80cd 	bne.w	80014a6 <HAL_ADC_Init+0x236>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800130c:	2900      	cmp	r1, #0
 800130e:	f040 80ca 	bne.w	80014a6 <HAL_ADC_Init+0x236>
    ADC_STATE_CLR_SET(hadc->State,
 8001312:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001314:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8001318:	f042 0202 	orr.w	r2, r2, #2
 800131c:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	f012 0f01 	tst.w	r2, #1
 8001324:	d121      	bne.n	800136a <HAL_ADC_Init+0xfa>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001326:	4969      	ldr	r1, [pc, #420]	; (80014cc <HAL_ADC_Init+0x25c>)
 8001328:	4a69      	ldr	r2, [pc, #420]	; (80014d0 <HAL_ADC_Init+0x260>)
 800132a:	4293      	cmp	r3, r2
 800132c:	bf18      	it	ne
 800132e:	428b      	cmpne	r3, r1
 8001330:	bf0c      	ite	eq
 8001332:	2301      	moveq	r3, #1
 8001334:	2300      	movne	r3, #0
 8001336:	d17a      	bne.n	800142e <HAL_ADC_Init+0x1be>
 8001338:	688a      	ldr	r2, [r1, #8]
 800133a:	f012 0f01 	tst.w	r2, #1
 800133e:	d072      	beq.n	8001426 <HAL_ADC_Init+0x1b6>
 8001340:	2201      	movs	r2, #1
 8001342:	4963      	ldr	r1, [pc, #396]	; (80014d0 <HAL_ADC_Init+0x260>)
 8001344:	6889      	ldr	r1, [r1, #8]
 8001346:	f011 0f01 	tst.w	r1, #1
 800134a:	d06e      	beq.n	800142a <HAL_ADC_Init+0x1ba>
 800134c:	2101      	movs	r1, #1
 800134e:	430a      	orrs	r2, r1
 8001350:	bf0c      	ite	eq
 8001352:	2201      	moveq	r2, #1
 8001354:	2200      	movne	r2, #0
 8001356:	b142      	cbz	r2, 800136a <HAL_ADC_Init+0xfa>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001358:	2b00      	cmp	r3, #0
 800135a:	d073      	beq.n	8001444 <HAL_ADC_Init+0x1d4>
 800135c:	495d      	ldr	r1, [pc, #372]	; (80014d4 <HAL_ADC_Init+0x264>)
 800135e:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001360:	688a      	ldr	r2, [r1, #8]
 8001362:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8001366:	4313      	orrs	r3, r2
 8001368:	608b      	str	r3, [r1, #8]
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800136a:	f7ff f9af 	bl	80006cc <HAL_GetREVID>
 800136e:	f241 0303 	movw	r3, #4099	; 0x1003
 8001372:	4298      	cmp	r0, r3
 8001374:	d902      	bls.n	800137c <HAL_ADC_Init+0x10c>
 8001376:	68a3      	ldr	r3, [r4, #8]
 8001378:	2b10      	cmp	r3, #16
 800137a:	d065      	beq.n	8001448 <HAL_ADC_Init+0x1d8>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800137c:	7d62      	ldrb	r2, [r4, #21]
                  hadc->Init.Overrun                                                    |
 800137e:	6b23      	ldr	r3, [r4, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001380:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                  hadc->Init.Resolution                                                 |
 8001384:	68a2      	ldr	r2, [r4, #8]
                  hadc->Init.Overrun                                                    |
 8001386:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8001388:	7f22      	ldrb	r2, [r4, #28]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800138a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800138e:	7f22      	ldrb	r2, [r4, #28]
 8001390:	2a01      	cmp	r2, #1
 8001392:	d064      	beq.n	800145e <HAL_ADC_Init+0x1ee>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001394:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001396:	b122      	cbz	r2, 80013a2 <HAL_ADC_Init+0x132>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001398:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800139c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800139e:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013a0:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80013a2:	6821      	ldr	r1, [r4, #0]
 80013a4:	68c8      	ldr	r0, [r1, #12]
 80013a6:	4a4c      	ldr	r2, [pc, #304]	; (80014d8 <HAL_ADC_Init+0x268>)
 80013a8:	4002      	ands	r2, r0
 80013aa:	4313      	orrs	r3, r2
 80013ac:	60cb      	str	r3, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013ae:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	f012 0f04 	tst.w	r2, #4
 80013b6:	d057      	beq.n	8001468 <HAL_ADC_Init+0x1f8>
 80013b8:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	f012 0f08 	tst.w	r2, #8
 80013c0:	d054      	beq.n	800146c <HAL_ADC_Init+0x1fc>
 80013c2:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013c4:	430a      	orrs	r2, r1
 80013c6:	d11b      	bne.n	8001400 <HAL_ADC_Init+0x190>
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013c8:	7d21      	ldrb	r1, [r4, #20]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80013ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      tmpCFGR = (
 80013cc:	ea42 3181 	orr.w	r1, r2, r1, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80013d0:	68d8      	ldr	r0, [r3, #12]
 80013d2:	4a42      	ldr	r2, [pc, #264]	; (80014dc <HAL_ADC_Init+0x26c>)
 80013d4:	4002      	ands	r2, r0
 80013d6:	430a      	orrs	r2, r1
 80013d8:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80013da:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d046      	beq.n	8001470 <HAL_ADC_Init+0x200>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80013e2:	6822      	ldr	r2, [r4, #0]
 80013e4:	6913      	ldr	r3, [r2, #16]
 80013e6:	f023 0301 	bic.w	r3, r3, #1
 80013ea:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80013ec:	6822      	ldr	r2, [r4, #0]
 80013ee:	6913      	ldr	r3, [r2, #16]
 80013f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80013f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013f6:	430b      	orrs	r3, r1
 80013f8:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 80013fa:	4620      	mov	r0, r4
 80013fc:	f7ff fe7e 	bl	80010fc <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001400:	68e3      	ldr	r3, [r4, #12]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d046      	beq.n	8001494 <HAL_ADC_Init+0x224>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001406:	6822      	ldr	r2, [r4, #0]
 8001408:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800140a:	f023 030f 	bic.w	r3, r3, #15
 800140e:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001410:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001412:	f023 0303 	bic.w	r3, r3, #3
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6563      	str	r3, [r4, #84]	; 0x54
 800141c:	e048      	b.n	80014b0 <HAL_ADC_Init+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800141e:	2500      	movs	r5, #0
 8001420:	e769      	b.n	80012f6 <HAL_ADC_Init+0x86>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001422:	2100      	movs	r1, #0
 8001424:	e76d      	b.n	8001302 <HAL_ADC_Init+0x92>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001426:	2200      	movs	r2, #0
 8001428:	e78b      	b.n	8001342 <HAL_ADC_Init+0xd2>
 800142a:	2100      	movs	r1, #0
 800142c:	e78f      	b.n	800134e <HAL_ADC_Init+0xde>
 800142e:	4a2c      	ldr	r2, [pc, #176]	; (80014e0 <HAL_ADC_Init+0x270>)
 8001430:	6892      	ldr	r2, [r2, #8]
 8001432:	f012 0f01 	tst.w	r2, #1
 8001436:	d003      	beq.n	8001440 <HAL_ADC_Init+0x1d0>
 8001438:	2201      	movs	r2, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800143a:	f082 0201 	eor.w	r2, r2, #1
 800143e:	e78a      	b.n	8001356 <HAL_ADC_Init+0xe6>
 8001440:	2200      	movs	r2, #0
 8001442:	e7fa      	b.n	800143a <HAL_ADC_Init+0x1ca>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001444:	4927      	ldr	r1, [pc, #156]	; (80014e4 <HAL_ADC_Init+0x274>)
 8001446:	e78a      	b.n	800135e <HAL_ADC_Init+0xee>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001448:	7d61      	ldrb	r1, [r4, #21]
                  hadc->Init.Overrun                                                    |
 800144a:	6b22      	ldr	r2, [r4, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800144c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
                  hadc->Init.Overrun                                                    |
 8001450:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8001452:	7f22      	ldrb	r2, [r4, #28]
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8001454:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001458:	f043 030c 	orr.w	r3, r3, #12
 800145c:	e797      	b.n	800138e <HAL_ADC_Init+0x11e>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800145e:	6a22      	ldr	r2, [r4, #32]
 8001460:	3a01      	subs	r2, #1
 8001462:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001466:	e795      	b.n	8001394 <HAL_ADC_Init+0x124>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001468:	2100      	movs	r1, #0
 800146a:	e7a6      	b.n	80013ba <HAL_ADC_Init+0x14a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800146c:	2200      	movs	r2, #0
 800146e:	e7a9      	b.n	80013c4 <HAL_ADC_Init+0x154>
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001470:	6820      	ldr	r0, [r4, #0]
 8001472:	6902      	ldr	r2, [r0, #16]
 8001474:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <HAL_ADC_Init+0x278>)
 8001476:	4013      	ands	r3, r2
 8001478:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800147a:	1e51      	subs	r1, r2, #1
 800147c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800147e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001482:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001484:	430a      	orrs	r2, r1
 8001486:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001488:	430a      	orrs	r2, r1
 800148a:	4313      	orrs	r3, r2
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6103      	str	r3, [r0, #16]
 8001492:	e7ab      	b.n	80013ec <HAL_ADC_Init+0x17c>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001494:	6821      	ldr	r1, [r4, #0]
 8001496:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001498:	f023 030f 	bic.w	r3, r3, #15
 800149c:	69a2      	ldr	r2, [r4, #24]
 800149e:	3a01      	subs	r2, #1
 80014a0:	4313      	orrs	r3, r2
 80014a2:	630b      	str	r3, [r1, #48]	; 0x30
 80014a4:	e7b4      	b.n	8001410 <HAL_ADC_Init+0x1a0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80014a8:	f043 0310 	orr.w	r3, r3, #16
 80014ac:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80014ae:	2501      	movs	r5, #1
}
 80014b0:	4628      	mov	r0, r5
 80014b2:	b003      	add	sp, #12
 80014b4:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80014b6:	2501      	movs	r5, #1
 80014b8:	e7fa      	b.n	80014b0 <HAL_ADC_Init+0x240>
 80014ba:	bf00      	nop
 80014bc:	5fffffc0 	.word	0x5fffffc0
 80014c0:	6fffffc0 	.word	0x6fffffc0
 80014c4:	20000014 	.word	0x20000014
 80014c8:	053e2d63 	.word	0x053e2d63
 80014cc:	40022000 	.word	0x40022000
 80014d0:	40022100 	.word	0x40022100
 80014d4:	40022300 	.word	0x40022300
 80014d8:	fff0c003 	.word	0xfff0c003
 80014dc:	ffffbffc 	.word	0xffffbffc
 80014e0:	58026000 	.word	0x58026000
 80014e4:	58026300 	.word	0x58026300
 80014e8:	fc00f81e 	.word	0xfc00f81e

080014ec <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80014ec:	4770      	bx	lr

080014ee <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80014ee:	4770      	bx	lr

080014f0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80014f0:	4770      	bx	lr

080014f2 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80014f2:	4770      	bx	lr

080014f4 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80014f4:	4770      	bx	lr
	...

080014f8 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80014f8:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80014fc:	2a01      	cmp	r2, #1
 80014fe:	f000 80aa 	beq.w	8001656 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
{
 8001502:	b430      	push	{r4, r5}
 8001504:	b09a      	sub	sp, #104	; 0x68
 8001506:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8001508:	2201      	movs	r2, #1
 800150a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800150e:	6802      	ldr	r2, [r0, #0]
 8001510:	4852      	ldr	r0, [pc, #328]	; (800165c <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 8001512:	4282      	cmp	r2, r0
 8001514:	d043      	beq.n	800159e <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8001516:	2000      	movs	r0, #0
 8001518:	9001      	str	r0, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 800151a:	9801      	ldr	r0, [sp, #4]
 800151c:	2800      	cmp	r0, #0
 800151e:	d042      	beq.n	80015a6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001520:	6880      	ldr	r0, [r0, #8]
 8001522:	f010 0f04 	tst.w	r0, #4
 8001526:	d047      	beq.n	80015b8 <HAL_ADCEx_MultiModeConfigChannel+0xc0>
 8001528:	2401      	movs	r4, #1
 800152a:	6890      	ldr	r0, [r2, #8]
 800152c:	f010 0f04 	tst.w	r0, #4
 8001530:	f040 8082 	bne.w	8001638 <HAL_ADCEx_MultiModeConfigChannel+0x140>
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001534:	2c00      	cmp	r4, #0
 8001536:	d17f      	bne.n	8001638 <HAL_ADCEx_MultiModeConfigChannel+0x140>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001538:	4c48      	ldr	r4, [pc, #288]	; (800165c <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 800153a:	4849      	ldr	r0, [pc, #292]	; (8001660 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 800153c:	4282      	cmp	r2, r0
 800153e:	bf18      	it	ne
 8001540:	42a2      	cmpne	r2, r4
 8001542:	d13b      	bne.n	80015bc <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8001544:	f500 7000 	add.w	r0, r0, #512	; 0x200

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001548:	680a      	ldr	r2, [r1, #0]
 800154a:	2a00      	cmp	r2, #0
 800154c:	d047      	beq.n	80015de <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800154e:	6882      	ldr	r2, [r0, #8]
 8001550:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001554:	684c      	ldr	r4, [r1, #4]
 8001556:	4322      	orrs	r2, r4
 8001558:	6082      	str	r2, [r0, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4d3f      	ldr	r5, [pc, #252]	; (800165c <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 800155e:	4c40      	ldr	r4, [pc, #256]	; (8001660 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 8001560:	42a2      	cmp	r2, r4
 8001562:	bf18      	it	ne
 8001564:	42aa      	cmpne	r2, r5
 8001566:	d12f      	bne.n	80015c8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001568:	68aa      	ldr	r2, [r5, #8]
 800156a:	f012 0f01 	tst.w	r2, #1
 800156e:	d027      	beq.n	80015c0 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
 8001570:	2401      	movs	r4, #1
 8001572:	4a3b      	ldr	r2, [pc, #236]	; (8001660 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 8001574:	6892      	ldr	r2, [r2, #8]
 8001576:	f012 0f01 	tst.w	r2, #1
 800157a:	d023      	beq.n	80015c4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800157c:	2201      	movs	r2, #1
 800157e:	4322      	orrs	r2, r4
 8001580:	bf0c      	ite	eq
 8001582:	2201      	moveq	r2, #1
 8001584:	2200      	movne	r2, #0
 8001586:	2a00      	cmp	r2, #0
 8001588:	d061      	beq.n	800164e <HAL_ADCEx_MultiModeConfigChannel+0x156>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800158a:	6884      	ldr	r4, [r0, #8]
 800158c:	4a35      	ldr	r2, [pc, #212]	; (8001664 <HAL_ADCEx_MultiModeConfigChannel+0x16c>)
 800158e:	4022      	ands	r2, r4
 8001590:	680c      	ldr	r4, [r1, #0]
 8001592:	6889      	ldr	r1, [r1, #8]
 8001594:	4321      	orrs	r1, r4
 8001596:	430a      	orrs	r2, r1
 8001598:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800159a:	2000      	movs	r0, #0
 800159c:	e051      	b.n	8001642 <HAL_ADCEx_MultiModeConfigChannel+0x14a>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800159e:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80015a2:	9001      	str	r0, [sp, #4]
 80015a4:	e7b9      	b.n	800151a <HAL_ADCEx_MultiModeConfigChannel+0x22>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80015a8:	f042 0220 	orr.w	r2, r2, #32
 80015ac:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80015b4:	2001      	movs	r0, #1
 80015b6:	e047      	b.n	8001648 <HAL_ADCEx_MultiModeConfigChannel+0x150>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015b8:	2400      	movs	r4, #0
 80015ba:	e7b6      	b.n	800152a <HAL_ADCEx_MultiModeConfigChannel+0x32>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80015bc:	482a      	ldr	r0, [pc, #168]	; (8001668 <HAL_ADCEx_MultiModeConfigChannel+0x170>)
 80015be:	e7c3      	b.n	8001548 <HAL_ADCEx_MultiModeConfigChannel+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015c0:	2400      	movs	r4, #0
 80015c2:	e7d6      	b.n	8001572 <HAL_ADCEx_MultiModeConfigChannel+0x7a>
 80015c4:	2200      	movs	r2, #0
 80015c6:	e7da      	b.n	800157e <HAL_ADCEx_MultiModeConfigChannel+0x86>
 80015c8:	4a28      	ldr	r2, [pc, #160]	; (800166c <HAL_ADCEx_MultiModeConfigChannel+0x174>)
 80015ca:	6892      	ldr	r2, [r2, #8]
 80015cc:	f012 0f01 	tst.w	r2, #1
 80015d0:	d003      	beq.n	80015da <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 80015d2:	2201      	movs	r2, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015d4:	f082 0201 	eor.w	r2, r2, #1
 80015d8:	e7d5      	b.n	8001586 <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 80015da:	2200      	movs	r2, #0
 80015dc:	e7fa      	b.n	80015d4 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80015de:	6881      	ldr	r1, [r0, #8]
 80015e0:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 80015e4:	6081      	str	r1, [r0, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015e6:	6819      	ldr	r1, [r3, #0]
 80015e8:	4d1c      	ldr	r5, [pc, #112]	; (800165c <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 80015ea:	4c1d      	ldr	r4, [pc, #116]	; (8001660 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 80015ec:	42a1      	cmp	r1, r4
 80015ee:	bf18      	it	ne
 80015f0:	42a9      	cmpne	r1, r5
 80015f2:	d117      	bne.n	8001624 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
 80015f4:	68a9      	ldr	r1, [r5, #8]
 80015f6:	f011 0f01 	tst.w	r1, #1
 80015fa:	d011      	beq.n	8001620 <HAL_ADCEx_MultiModeConfigChannel+0x128>
 80015fc:	2401      	movs	r4, #1
 80015fe:	4918      	ldr	r1, [pc, #96]	; (8001660 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 8001600:	6889      	ldr	r1, [r1, #8]
 8001602:	f011 0f01 	tst.w	r1, #1
 8001606:	d000      	beq.n	800160a <HAL_ADCEx_MultiModeConfigChannel+0x112>
 8001608:	2201      	movs	r2, #1
 800160a:	4322      	orrs	r2, r4
 800160c:	bf0c      	ite	eq
 800160e:	2201      	moveq	r2, #1
 8001610:	2200      	movne	r2, #0
 8001612:	b1f2      	cbz	r2, 8001652 <HAL_ADCEx_MultiModeConfigChannel+0x15a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001614:	6881      	ldr	r1, [r0, #8]
 8001616:	4a13      	ldr	r2, [pc, #76]	; (8001664 <HAL_ADCEx_MultiModeConfigChannel+0x16c>)
 8001618:	400a      	ands	r2, r1
 800161a:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800161c:	2000      	movs	r0, #0
 800161e:	e010      	b.n	8001642 <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 8001620:	4614      	mov	r4, r2
 8001622:	e7ec      	b.n	80015fe <HAL_ADCEx_MultiModeConfigChannel+0x106>
 8001624:	4911      	ldr	r1, [pc, #68]	; (800166c <HAL_ADCEx_MultiModeConfigChannel+0x174>)
 8001626:	6889      	ldr	r1, [r1, #8]
 8001628:	f011 0f01 	tst.w	r1, #1
 800162c:	d000      	beq.n	8001630 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800162e:	2201      	movs	r2, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001630:	fab2 f282 	clz	r2, r2
 8001634:	0952      	lsrs	r2, r2, #5
 8001636:	e7ec      	b.n	8001612 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800163a:	f042 0220 	orr.w	r2, r2, #32
 800163e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001640:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8001648:	b01a      	add	sp, #104	; 0x68
 800164a:	bc30      	pop	{r4, r5}
 800164c:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800164e:	2000      	movs	r0, #0
 8001650:	e7f7      	b.n	8001642 <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 8001652:	2000      	movs	r0, #0
 8001654:	e7f5      	b.n	8001642 <HAL_ADCEx_MultiModeConfigChannel+0x14a>
  __HAL_LOCK(hadc);
 8001656:	2002      	movs	r0, #2
}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40022000 	.word	0x40022000
 8001660:	40022100 	.word	0x40022100
 8001664:	fffff0e0 	.word	0xfffff0e0
 8001668:	58026300 	.word	0x58026300
 800166c:	58026000 	.word	0x58026000

08001670 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001670:	4906      	ldr	r1, [pc, #24]	; (800168c <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8001672:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001674:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001678:	041b      	lsls	r3, r3, #16
 800167a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800167c:	0200      	lsls	r0, r0, #8
 800167e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001682:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001684:	4a02      	ldr	r2, [pc, #8]	; (8001690 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001686:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8001688:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800168a:	4770      	bx	lr
 800168c:	e000ed00 	.word	0xe000ed00
 8001690:	05fa0000 	.word	0x05fa0000

08001694 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001694:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <HAL_NVIC_SetPriority+0x58>)
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800169e:	f1c3 0407 	rsb	r4, r3, #7
 80016a2:	2c04      	cmp	r4, #4
 80016a4:	bf28      	it	cs
 80016a6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a8:	1d1d      	adds	r5, r3, #4
 80016aa:	2d06      	cmp	r5, #6
 80016ac:	d914      	bls.n	80016d8 <HAL_NVIC_SetPriority+0x44>
 80016ae:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80016b4:	fa05 f404 	lsl.w	r4, r5, r4
 80016b8:	ea21 0104 	bic.w	r1, r1, r4
 80016bc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016be:	fa05 f303 	lsl.w	r3, r5, r3
 80016c2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80016c8:	2800      	cmp	r0, #0
 80016ca:	db07      	blt.n	80016dc <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016cc:	0109      	lsls	r1, r1, #4
 80016ce:	b2c9      	uxtb	r1, r1
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <HAL_NVIC_SetPriority+0x5c>)
 80016d2:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80016d4:	bc30      	pop	{r4, r5}
 80016d6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d8:	2300      	movs	r3, #0
 80016da:	e7e9      	b.n	80016b0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016dc:	f000 000f 	and.w	r0, r0, #15
 80016e0:	0109      	lsls	r1, r1, #4
 80016e2:	b2c9      	uxtb	r1, r1
 80016e4:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <HAL_NVIC_SetPriority+0x60>)
 80016e6:	5419      	strb	r1, [r3, r0]
 80016e8:	e7f4      	b.n	80016d4 <HAL_NVIC_SetPriority+0x40>
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00
 80016f0:	e000e400 	.word	0xe000e400
 80016f4:	e000ed14 	.word	0xe000ed14

080016f8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80016f8:	2800      	cmp	r0, #0
 80016fa:	db07      	blt.n	800170c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fc:	f000 021f 	and.w	r2, r0, #31
 8001700:	0940      	lsrs	r0, r0, #5
 8001702:	2301      	movs	r3, #1
 8001704:	4093      	lsls	r3, r2
 8001706:	4a02      	ldr	r2, [pc, #8]	; (8001710 <HAL_NVIC_EnableIRQ+0x18>)
 8001708:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000e100 	.word	0xe000e100

08001714 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001714:	3801      	subs	r0, #1
 8001716:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800171a:	d20a      	bcs.n	8001732 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_SYSTICK_Config+0x24>)
 800171e:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001720:	4a06      	ldr	r2, [pc, #24]	; (800173c <HAL_SYSTICK_Config+0x28>)
 8001722:	21f0      	movs	r1, #240	; 0xf0
 8001724:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001728:	2000      	movs	r0, #0
 800172a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172c:	2207      	movs	r2, #7
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001732:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000e010 	.word	0xe000e010
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8001740:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001744:	4a04      	ldr	r2, [pc, #16]	; (8001758 <HAL_MPU_Disable+0x18>)
 8001746:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800174c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800174e:	4b03      	ldr	r3, [pc, #12]	; (800175c <HAL_MPU_Disable+0x1c>)
 8001750:	2200      	movs	r2, #0
 8001752:	605a      	str	r2, [r3, #4]
}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00
 800175c:	e000ed90 	.word	0xe000ed90

08001760 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001760:	f040 0001 	orr.w	r0, r0, #1
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <HAL_MPU_Enable+0x1c>)
 8001766:	6058      	str	r0, [r3, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001768:	4a05      	ldr	r2, [pc, #20]	; (8001780 <HAL_MPU_Enable+0x20>)
 800176a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800176c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001770:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001772:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001776:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800177a:	4770      	bx	lr
 800177c:	e000ed90 	.word	0xe000ed90
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001784:	7842      	ldrb	r2, [r0, #1]
 8001786:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <HAL_MPU_ConfigRegion+0x50>)
 8001788:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800178a:	7803      	ldrb	r3, [r0, #0]
 800178c:	b923      	cbnz	r3, 8001798 <HAL_MPU_ConfigRegion+0x14>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <HAL_MPU_ConfigRegion+0x50>)
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001794:	611a      	str	r2, [r3, #16]
  }
}
 8001796:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 8001798:	6843      	ldr	r3, [r0, #4]
 800179a:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <HAL_MPU_ConfigRegion+0x50>)
 800179c:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800179e:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017a0:	7ac3      	ldrb	r3, [r0, #11]
 80017a2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017a4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017a8:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017aa:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017ae:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017b0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017b4:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017b6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017ba:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017c0:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017c2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017c6:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017c8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80017cc:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017ce:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017d0:	6113      	str	r3, [r2, #16]
 80017d2:	4770      	bx	lr
 80017d4:	e000ed90 	.word	0xe000ed90

080017d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017d8:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017da:	6d87      	ldr	r7, [r0, #88]	; 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017dc:	6e44      	ldr	r4, [r0, #100]	; 0x64
 80017de:	6e85      	ldr	r5, [r0, #104]	; 0x68
 80017e0:	6065      	str	r5, [r4, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80017e2:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 80017e4:	b114      	cbz	r4, 80017ec <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017e6:	6f04      	ldr	r4, [r0, #112]	; 0x70
 80017e8:	6f45      	ldr	r5, [r0, #116]	; 0x74
 80017ea:	6065      	str	r5, [r4, #4]
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017ec:	6804      	ldr	r4, [r0, #0]
 80017ee:	4e3c      	ldr	r6, [pc, #240]	; (80018e0 <DMA_SetConfig+0x108>)
 80017f0:	4d3c      	ldr	r5, [pc, #240]	; (80018e4 <DMA_SetConfig+0x10c>)
 80017f2:	42ac      	cmp	r4, r5
 80017f4:	bf18      	it	ne
 80017f6:	42b4      	cmpne	r4, r6
 80017f8:	d052      	beq.n	80018a0 <DMA_SetConfig+0xc8>
 80017fa:	3518      	adds	r5, #24
 80017fc:	42ac      	cmp	r4, r5
 80017fe:	d04f      	beq.n	80018a0 <DMA_SetConfig+0xc8>
 8001800:	3518      	adds	r5, #24
 8001802:	42ac      	cmp	r4, r5
 8001804:	d04c      	beq.n	80018a0 <DMA_SetConfig+0xc8>
 8001806:	3518      	adds	r5, #24
 8001808:	42ac      	cmp	r4, r5
 800180a:	d049      	beq.n	80018a0 <DMA_SetConfig+0xc8>
 800180c:	3518      	adds	r5, #24
 800180e:	42ac      	cmp	r4, r5
 8001810:	d046      	beq.n	80018a0 <DMA_SetConfig+0xc8>
 8001812:	3518      	adds	r5, #24
 8001814:	42ac      	cmp	r4, r5
 8001816:	d043      	beq.n	80018a0 <DMA_SetConfig+0xc8>
 8001818:	3518      	adds	r5, #24
 800181a:	42ac      	cmp	r4, r5
 800181c:	d040      	beq.n	80018a0 <DMA_SetConfig+0xc8>
 800181e:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8001822:	42ac      	cmp	r4, r5
 8001824:	d03c      	beq.n	80018a0 <DMA_SetConfig+0xc8>
 8001826:	3518      	adds	r5, #24
 8001828:	42ac      	cmp	r4, r5
 800182a:	d039      	beq.n	80018a0 <DMA_SetConfig+0xc8>
 800182c:	3518      	adds	r5, #24
 800182e:	42ac      	cmp	r4, r5
 8001830:	d036      	beq.n	80018a0 <DMA_SetConfig+0xc8>
 8001832:	3518      	adds	r5, #24
 8001834:	42ac      	cmp	r4, r5
 8001836:	d033      	beq.n	80018a0 <DMA_SetConfig+0xc8>
 8001838:	3518      	adds	r5, #24
 800183a:	42ac      	cmp	r4, r5
 800183c:	d030      	beq.n	80018a0 <DMA_SetConfig+0xc8>
 800183e:	3518      	adds	r5, #24
 8001840:	42ac      	cmp	r4, r5
 8001842:	d02d      	beq.n	80018a0 <DMA_SetConfig+0xc8>
 8001844:	3518      	adds	r5, #24
 8001846:	42ac      	cmp	r4, r5
 8001848:	d02a      	beq.n	80018a0 <DMA_SetConfig+0xc8>
 800184a:	3518      	adds	r5, #24
 800184c:	42ac      	cmp	r4, r5
 800184e:	d027      	beq.n	80018a0 <DMA_SetConfig+0xc8>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001850:	4e25      	ldr	r6, [pc, #148]	; (80018e8 <DMA_SetConfig+0x110>)
 8001852:	4d26      	ldr	r5, [pc, #152]	; (80018ec <DMA_SetConfig+0x114>)
 8001854:	42ac      	cmp	r4, r5
 8001856:	bf18      	it	ne
 8001858:	42b4      	cmpne	r4, r6
 800185a:	d011      	beq.n	8001880 <DMA_SetConfig+0xa8>
 800185c:	4d24      	ldr	r5, [pc, #144]	; (80018f0 <DMA_SetConfig+0x118>)
 800185e:	42ac      	cmp	r4, r5
 8001860:	d00e      	beq.n	8001880 <DMA_SetConfig+0xa8>
 8001862:	3514      	adds	r5, #20
 8001864:	42ac      	cmp	r4, r5
 8001866:	d00b      	beq.n	8001880 <DMA_SetConfig+0xa8>
 8001868:	3514      	adds	r5, #20
 800186a:	42ac      	cmp	r4, r5
 800186c:	d008      	beq.n	8001880 <DMA_SetConfig+0xa8>
 800186e:	3514      	adds	r5, #20
 8001870:	42ac      	cmp	r4, r5
 8001872:	d005      	beq.n	8001880 <DMA_SetConfig+0xa8>
 8001874:	3514      	adds	r5, #20
 8001876:	42ac      	cmp	r4, r5
 8001878:	d002      	beq.n	8001880 <DMA_SetConfig+0xa8>
 800187a:	3514      	adds	r5, #20
 800187c:	42ac      	cmp	r4, r5
 800187e:	d123      	bne.n	80018c8 <DMA_SetConfig+0xf0>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001880:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8001882:	f004 051f 	and.w	r5, r4, #31
 8001886:	2401      	movs	r4, #1
 8001888:	40ac      	lsls	r4, r5
 800188a:	607c      	str	r4, [r7, #4]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800188c:	6804      	ldr	r4, [r0, #0]
 800188e:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001890:	6883      	ldr	r3, [r0, #8]
 8001892:	2b40      	cmp	r3, #64	; 0x40
 8001894:	d01f      	beq.n	80018d6 <DMA_SetConfig+0xfe>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8001896:	6803      	ldr	r3, [r0, #0]
 8001898:	6099      	str	r1, [r3, #8]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800189a:	6803      	ldr	r3, [r0, #0]
 800189c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800189e:	e013      	b.n	80018c8 <DMA_SetConfig+0xf0>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80018a0:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 80018a2:	f004 051f 	and.w	r5, r4, #31
 80018a6:	243f      	movs	r4, #63	; 0x3f
 80018a8:	40ac      	lsls	r4, r5
 80018aa:	60bc      	str	r4, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018ac:	6805      	ldr	r5, [r0, #0]
 80018ae:	682c      	ldr	r4, [r5, #0]
 80018b0:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80018b4:	602c      	str	r4, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80018b6:	6804      	ldr	r4, [r0, #0]
 80018b8:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018ba:	6883      	ldr	r3, [r0, #8]
 80018bc:	2b40      	cmp	r3, #64	; 0x40
 80018be:	d005      	beq.n	80018cc <DMA_SetConfig+0xf4>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80018c0:	6803      	ldr	r3, [r0, #0]
 80018c2:	6099      	str	r1, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80018c4:	6803      	ldr	r3, [r0, #0]
 80018c6:	60da      	str	r2, [r3, #12]
}
 80018c8:	bcf0      	pop	{r4, r5, r6, r7}
 80018ca:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80018cc:	6803      	ldr	r3, [r0, #0]
 80018ce:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80018d0:	6803      	ldr	r3, [r0, #0]
 80018d2:	60d9      	str	r1, [r3, #12]
 80018d4:	e7f8      	b.n	80018c8 <DMA_SetConfig+0xf0>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80018d6:	6803      	ldr	r3, [r0, #0]
 80018d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80018da:	6803      	ldr	r3, [r0, #0]
 80018dc:	60d9      	str	r1, [r3, #12]
 80018de:	e7f3      	b.n	80018c8 <DMA_SetConfig+0xf0>
 80018e0:	40020010 	.word	0x40020010
 80018e4:	40020028 	.word	0x40020028
 80018e8:	58025408 	.word	0x58025408
 80018ec:	5802541c 	.word	0x5802541c
 80018f0:	58025430 	.word	0x58025430

080018f4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018f4:	6802      	ldr	r2, [r0, #0]
 80018f6:	4928      	ldr	r1, [pc, #160]	; (8001998 <DMA_CalcBaseAndBitshift+0xa4>)
 80018f8:	4b28      	ldr	r3, [pc, #160]	; (800199c <DMA_CalcBaseAndBitshift+0xa8>)
 80018fa:	429a      	cmp	r2, r3
 80018fc:	bf18      	it	ne
 80018fe:	428a      	cmpne	r2, r1
 8001900:	d02f      	beq.n	8001962 <DMA_CalcBaseAndBitshift+0x6e>
 8001902:	3318      	adds	r3, #24
 8001904:	429a      	cmp	r2, r3
 8001906:	d02c      	beq.n	8001962 <DMA_CalcBaseAndBitshift+0x6e>
 8001908:	3318      	adds	r3, #24
 800190a:	429a      	cmp	r2, r3
 800190c:	d029      	beq.n	8001962 <DMA_CalcBaseAndBitshift+0x6e>
 800190e:	3318      	adds	r3, #24
 8001910:	429a      	cmp	r2, r3
 8001912:	d026      	beq.n	8001962 <DMA_CalcBaseAndBitshift+0x6e>
 8001914:	3318      	adds	r3, #24
 8001916:	429a      	cmp	r2, r3
 8001918:	d023      	beq.n	8001962 <DMA_CalcBaseAndBitshift+0x6e>
 800191a:	3318      	adds	r3, #24
 800191c:	429a      	cmp	r2, r3
 800191e:	d020      	beq.n	8001962 <DMA_CalcBaseAndBitshift+0x6e>
 8001920:	3318      	adds	r3, #24
 8001922:	429a      	cmp	r2, r3
 8001924:	d01d      	beq.n	8001962 <DMA_CalcBaseAndBitshift+0x6e>
 8001926:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800192a:	429a      	cmp	r2, r3
 800192c:	d019      	beq.n	8001962 <DMA_CalcBaseAndBitshift+0x6e>
 800192e:	3318      	adds	r3, #24
 8001930:	429a      	cmp	r2, r3
 8001932:	d016      	beq.n	8001962 <DMA_CalcBaseAndBitshift+0x6e>
 8001934:	3318      	adds	r3, #24
 8001936:	429a      	cmp	r2, r3
 8001938:	d013      	beq.n	8001962 <DMA_CalcBaseAndBitshift+0x6e>
 800193a:	3318      	adds	r3, #24
 800193c:	429a      	cmp	r2, r3
 800193e:	d010      	beq.n	8001962 <DMA_CalcBaseAndBitshift+0x6e>
 8001940:	3318      	adds	r3, #24
 8001942:	429a      	cmp	r2, r3
 8001944:	d00d      	beq.n	8001962 <DMA_CalcBaseAndBitshift+0x6e>
 8001946:	3318      	adds	r3, #24
 8001948:	429a      	cmp	r2, r3
 800194a:	d00a      	beq.n	8001962 <DMA_CalcBaseAndBitshift+0x6e>
 800194c:	3318      	adds	r3, #24
 800194e:	429a      	cmp	r2, r3
 8001950:	d007      	beq.n	8001962 <DMA_CalcBaseAndBitshift+0x6e>
 8001952:	3318      	adds	r3, #24
 8001954:	429a      	cmp	r2, r3
 8001956:	d004      	beq.n	8001962 <DMA_CalcBaseAndBitshift+0x6e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8001958:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800195c:	6582      	str	r2, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 800195e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001960:	4770      	bx	lr
{
 8001962:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001964:	b2d3      	uxtb	r3, r2
 8001966:	3b10      	subs	r3, #16
 8001968:	490d      	ldr	r1, [pc, #52]	; (80019a0 <DMA_CalcBaseAndBitshift+0xac>)
 800196a:	fba1 1303 	umull	r1, r3, r1, r3
 800196e:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001970:	f003 0107 	and.w	r1, r3, #7
 8001974:	4c0b      	ldr	r4, [pc, #44]	; (80019a4 <DMA_CalcBaseAndBitshift+0xb0>)
 8001976:	5c61      	ldrb	r1, [r4, r1]
 8001978:	65c1      	str	r1, [r0, #92]	; 0x5c
    if (stream_number > 3U)
 800197a:	2b03      	cmp	r3, #3
 800197c:	d806      	bhi.n	800198c <DMA_CalcBaseAndBitshift+0x98>
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <DMA_CalcBaseAndBitshift+0xb4>)
 8001980:	4013      	ands	r3, r2
 8001982:	6583      	str	r3, [r0, #88]	; 0x58
}
 8001984:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001986:	f85d 4b04 	ldr.w	r4, [sp], #4
 800198a:	4770      	bx	lr
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <DMA_CalcBaseAndBitshift+0xb4>)
 800198e:	4013      	ands	r3, r2
 8001990:	3304      	adds	r3, #4
 8001992:	6583      	str	r3, [r0, #88]	; 0x58
 8001994:	e7f6      	b.n	8001984 <DMA_CalcBaseAndBitshift+0x90>
 8001996:	bf00      	nop
 8001998:	40020010 	.word	0x40020010
 800199c:	40020028 	.word	0x40020028
 80019a0:	aaaaaaab 	.word	0xaaaaaaab
 80019a4:	0800ba04 	.word	0x0800ba04
 80019a8:	fffffc00 	.word	0xfffffc00

080019ac <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019ac:	6983      	ldr	r3, [r0, #24]
 80019ae:	b99b      	cbnz	r3, 80019d8 <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 80019b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d00a      	beq.n	80019cc <DMA_CheckFifoParam+0x20>
 80019b6:	b11b      	cbz	r3, 80019c0 <DMA_CheckFifoParam+0x14>
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d001      	beq.n	80019c0 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 80019bc:	2000      	movs	r0, #0
 80019be:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019c0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80019c2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80019c6:	d12e      	bne.n	8001a26 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80019c8:	2000      	movs	r0, #0
 80019ca:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019cc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80019ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019d2:	d02a      	beq.n	8001a2a <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 80019d4:	2000      	movs	r0, #0
 80019d6:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019dc:	d006      	beq.n	80019ec <DMA_CheckFifoParam+0x40>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80019de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d92a      	bls.n	8001a3a <DMA_CheckFifoParam+0x8e>
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	d016      	beq.n	8001a16 <DMA_CheckFifoParam+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
 80019e8:	2000      	movs	r0, #0
 80019ea:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 80019ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d803      	bhi.n	80019fa <DMA_CheckFifoParam+0x4e>
 80019f2:	e8df f003 	tbb	[pc, r3]
 80019f6:	041c      	.short	0x041c
 80019f8:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 80019fa:	2000      	movs	r0, #0
 80019fc:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019fe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a00:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001a04:	d115      	bne.n	8001a32 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8001a06:	2000      	movs	r0, #0
 8001a08:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a0a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a10:	d011      	beq.n	8001a36 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001a12:	2000      	movs	r0, #0
 8001a14:	4770      	bx	lr
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a16:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a18:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001a1c:	d001      	beq.n	8001a22 <DMA_CheckFifoParam+0x76>
        {
          status = HAL_ERROR;
 8001a1e:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 8001a20:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8001a22:	2000      	movs	r0, #0
 8001a24:	4770      	bx	lr
          status = HAL_ERROR;
 8001a26:	2001      	movs	r0, #1
 8001a28:	4770      	bx	lr
          status = HAL_ERROR;
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	4770      	bx	lr
        status = HAL_ERROR;
 8001a2e:	2001      	movs	r0, #1
 8001a30:	4770      	bx	lr
          status = HAL_ERROR;
 8001a32:	2001      	movs	r0, #1
 8001a34:	4770      	bx	lr
          status = HAL_ERROR;
 8001a36:	2001      	movs	r0, #1
 8001a38:	4770      	bx	lr
        status = HAL_ERROR;
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	4770      	bx	lr
	...

08001a40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8001a40:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001a42:	4922      	ldr	r1, [pc, #136]	; (8001acc <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001a44:	4a22      	ldr	r2, [pc, #136]	; (8001ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	bf18      	it	ne
 8001a4a:	428b      	cmpne	r3, r1
 8001a4c:	d028      	beq.n	8001aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001a4e:	3214      	adds	r2, #20
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d025      	beq.n	8001aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001a54:	3214      	adds	r2, #20
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d022      	beq.n	8001aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001a5a:	3214      	adds	r2, #20
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d01f      	beq.n	8001aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001a60:	3214      	adds	r2, #20
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d01c      	beq.n	8001aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001a66:	3214      	adds	r2, #20
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d019      	beq.n	8001aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8001a6c:	3214      	adds	r2, #20
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d016      	beq.n	8001aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	3a10      	subs	r2, #16
 8001a76:	4917      	ldr	r1, [pc, #92]	; (8001ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
 8001a78:	fba1 1202 	umull	r1, r2, r1, r2
 8001a7c:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001a7e:	4916      	ldr	r1, [pc, #88]	; (8001ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
 8001a80:	4419      	add	r1, r3
 8001a82:	29a8      	cmp	r1, #168	; 0xa8
 8001a84:	d91f      	bls.n	8001ac6 <DMA_CalcDMAMUXChannelBaseAndMask+0x86>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
 8001a88:	4413      	add	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	6603      	str	r3, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001a8e:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8001a90:	6643      	str	r3, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001a92:	f002 021f 	and.w	r2, r2, #31
 8001a96:	2301      	movs	r3, #1
 8001a98:	fa03 f202 	lsl.w	r2, r3, r2
 8001a9c:	6682      	str	r2, [r0, #104]	; 0x68
  }
}
 8001a9e:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	3b08      	subs	r3, #8
 8001aa4:	4a0f      	ldr	r2, [pc, #60]	; (8001ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 8001aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aaa:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001aac:	4a0e      	ldr	r2, [pc, #56]	; (8001ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8001aae:	441a      	add	r2, r3
 8001ab0:	0092      	lsls	r2, r2, #2
 8001ab2:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8001ab6:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001ab8:	f003 031f 	and.w	r3, r3, #31
 8001abc:	2201      	movs	r2, #1
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	6683      	str	r3, [r0, #104]	; 0x68
 8001ac4:	4770      	bx	lr
      stream_number += 8U;
 8001ac6:	3208      	adds	r2, #8
 8001ac8:	e7dd      	b.n	8001a86 <DMA_CalcDMAMUXChannelBaseAndMask+0x46>
 8001aca:	bf00      	nop
 8001acc:	58025408 	.word	0x58025408
 8001ad0:	5802541c 	.word	0x5802541c
 8001ad4:	aaaaaaab 	.word	0xaaaaaaab
 8001ad8:	bffdfbf0 	.word	0xbffdfbf0
 8001adc:	10008200 	.word	0x10008200
 8001ae0:	40020880 	.word	0x40020880
 8001ae4:	cccccccd 	.word	0xcccccccd
 8001ae8:	16009600 	.word	0x16009600
 8001aec:	58025880 	.word	0x58025880

08001af0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001af0:	7901      	ldrb	r1, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8001af2:	1e4a      	subs	r2, r1, #1
 8001af4:	2a07      	cmp	r2, #7
 8001af6:	d82c      	bhi.n	8001b52 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x62>
{
 8001af8:	b430      	push	{r4, r5}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001afa:	6803      	ldr	r3, [r0, #0]
 8001afc:	4d15      	ldr	r5, [pc, #84]	; (8001b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 8001afe:	4c16      	ldr	r4, [pc, #88]	; (8001b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 8001b00:	42a3      	cmp	r3, r4
 8001b02:	bf18      	it	ne
 8001b04:	42ab      	cmpne	r3, r5
 8001b06:	d018      	beq.n	8001b3a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8001b08:	3414      	adds	r4, #20
 8001b0a:	42a3      	cmp	r3, r4
 8001b0c:	d015      	beq.n	8001b3a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8001b0e:	3414      	adds	r4, #20
 8001b10:	42a3      	cmp	r3, r4
 8001b12:	d012      	beq.n	8001b3a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8001b14:	3414      	adds	r4, #20
 8001b16:	42a3      	cmp	r3, r4
 8001b18:	d00f      	beq.n	8001b3a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8001b1a:	3414      	adds	r4, #20
 8001b1c:	42a3      	cmp	r3, r4
 8001b1e:	d00c      	beq.n	8001b3a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8001b20:	3414      	adds	r4, #20
 8001b22:	42a3      	cmp	r3, r4
 8001b24:	d009      	beq.n	8001b3a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8001b26:	3414      	adds	r4, #20
 8001b28:	42a3      	cmp	r3, r4
 8001b2a:	d006      	beq.n	8001b3a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 8001b2e:	440b      	add	r3, r1
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>)
 8001b36:	6703      	str	r3, [r0, #112]	; 0x70
 8001b38:	e005      	b.n	8001b46 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x56>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 8001b3c:	440b      	add	r3, r1
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
 8001b44:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8001b46:	2301      	movs	r3, #1
 8001b48:	fa03 f202 	lsl.w	r2, r3, r2
 8001b4c:	6742      	str	r2, [r0, #116]	; 0x74
  }
}
 8001b4e:	bc30      	pop	{r4, r5}
 8001b50:	4770      	bx	lr
 8001b52:	4770      	bx	lr
 8001b54:	58025408 	.word	0x58025408
 8001b58:	5802541c 	.word	0x5802541c
 8001b5c:	1000823f 	.word	0x1000823f
 8001b60:	40020940 	.word	0x40020940
 8001b64:	1600963f 	.word	0x1600963f
 8001b68:	58025940 	.word	0x58025940

08001b6c <HAL_DMA_Init>:
{
 8001b6c:	b570      	push	{r4, r5, r6, lr}
 8001b6e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001b70:	f7fe fd92 	bl	8000698 <HAL_GetTick>
  if(hdma == NULL)
 8001b74:	2c00      	cmp	r4, #0
 8001b76:	f000 8144 	beq.w	8001e02 <HAL_DMA_Init+0x296>
 8001b7a:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b7c:	6823      	ldr	r3, [r4, #0]
 8001b7e:	49a2      	ldr	r1, [pc, #648]	; (8001e08 <HAL_DMA_Init+0x29c>)
 8001b80:	4aa2      	ldr	r2, [pc, #648]	; (8001e0c <HAL_DMA_Init+0x2a0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	bf18      	it	ne
 8001b86:	428b      	cmpne	r3, r1
 8001b88:	bf0c      	ite	eq
 8001b8a:	2201      	moveq	r2, #1
 8001b8c:	2200      	movne	r2, #0
 8001b8e:	d050      	beq.n	8001c32 <HAL_DMA_Init+0xc6>
 8001b90:	3130      	adds	r1, #48	; 0x30
 8001b92:	428b      	cmp	r3, r1
 8001b94:	d04d      	beq.n	8001c32 <HAL_DMA_Init+0xc6>
 8001b96:	3118      	adds	r1, #24
 8001b98:	428b      	cmp	r3, r1
 8001b9a:	d04a      	beq.n	8001c32 <HAL_DMA_Init+0xc6>
 8001b9c:	3118      	adds	r1, #24
 8001b9e:	428b      	cmp	r3, r1
 8001ba0:	d047      	beq.n	8001c32 <HAL_DMA_Init+0xc6>
 8001ba2:	3118      	adds	r1, #24
 8001ba4:	428b      	cmp	r3, r1
 8001ba6:	d044      	beq.n	8001c32 <HAL_DMA_Init+0xc6>
 8001ba8:	3118      	adds	r1, #24
 8001baa:	428b      	cmp	r3, r1
 8001bac:	d041      	beq.n	8001c32 <HAL_DMA_Init+0xc6>
 8001bae:	3118      	adds	r1, #24
 8001bb0:	428b      	cmp	r3, r1
 8001bb2:	d03e      	beq.n	8001c32 <HAL_DMA_Init+0xc6>
 8001bb4:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8001bb8:	428b      	cmp	r3, r1
 8001bba:	d03a      	beq.n	8001c32 <HAL_DMA_Init+0xc6>
 8001bbc:	3118      	adds	r1, #24
 8001bbe:	428b      	cmp	r3, r1
 8001bc0:	d037      	beq.n	8001c32 <HAL_DMA_Init+0xc6>
 8001bc2:	3118      	adds	r1, #24
 8001bc4:	428b      	cmp	r3, r1
 8001bc6:	d034      	beq.n	8001c32 <HAL_DMA_Init+0xc6>
 8001bc8:	3118      	adds	r1, #24
 8001bca:	428b      	cmp	r3, r1
 8001bcc:	d031      	beq.n	8001c32 <HAL_DMA_Init+0xc6>
 8001bce:	3118      	adds	r1, #24
 8001bd0:	428b      	cmp	r3, r1
 8001bd2:	d02e      	beq.n	8001c32 <HAL_DMA_Init+0xc6>
 8001bd4:	3118      	adds	r1, #24
 8001bd6:	428b      	cmp	r3, r1
 8001bd8:	d02b      	beq.n	8001c32 <HAL_DMA_Init+0xc6>
 8001bda:	3118      	adds	r1, #24
 8001bdc:	428b      	cmp	r3, r1
 8001bde:	d028      	beq.n	8001c32 <HAL_DMA_Init+0xc6>
 8001be0:	3118      	adds	r1, #24
 8001be2:	428b      	cmp	r3, r1
 8001be4:	d025      	beq.n	8001c32 <HAL_DMA_Init+0xc6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001be6:	498a      	ldr	r1, [pc, #552]	; (8001e10 <HAL_DMA_Init+0x2a4>)
 8001be8:	4a8a      	ldr	r2, [pc, #552]	; (8001e14 <HAL_DMA_Init+0x2a8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	bf18      	it	ne
 8001bee:	428b      	cmpne	r3, r1
 8001bf0:	f000 80bf 	beq.w	8001d72 <HAL_DMA_Init+0x206>
 8001bf4:	4a88      	ldr	r2, [pc, #544]	; (8001e18 <HAL_DMA_Init+0x2ac>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	f000 80bb 	beq.w	8001d72 <HAL_DMA_Init+0x206>
 8001bfc:	3214      	adds	r2, #20
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	f000 80b7 	beq.w	8001d72 <HAL_DMA_Init+0x206>
 8001c04:	3214      	adds	r2, #20
 8001c06:	4293      	cmp	r3, r2
 8001c08:	f000 80b3 	beq.w	8001d72 <HAL_DMA_Init+0x206>
 8001c0c:	3214      	adds	r2, #20
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	f000 80af 	beq.w	8001d72 <HAL_DMA_Init+0x206>
 8001c14:	3214      	adds	r2, #20
 8001c16:	4293      	cmp	r3, r2
 8001c18:	f000 80ab 	beq.w	8001d72 <HAL_DMA_Init+0x206>
 8001c1c:	3214      	adds	r2, #20
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	f000 80a7 	beq.w	8001d72 <HAL_DMA_Init+0x206>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c24:	2340      	movs	r3, #64	; 0x40
 8001c26:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8001c2e:	2001      	movs	r0, #1
 8001c30:	e04a      	b.n	8001cc8 <HAL_DMA_Init+0x15c>
    __HAL_UNLOCK(hdma);
 8001c32:	2100      	movs	r1, #0
 8001c34:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c38:	2102      	movs	r1, #2
 8001c3a:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001c3e:	bb7a      	cbnz	r2, 8001ca0 <HAL_DMA_Init+0x134>
 8001c40:	4a76      	ldr	r2, [pc, #472]	; (8001e1c <HAL_DMA_Init+0x2b0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d02c      	beq.n	8001ca0 <HAL_DMA_Init+0x134>
 8001c46:	3218      	adds	r2, #24
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d029      	beq.n	8001ca0 <HAL_DMA_Init+0x134>
 8001c4c:	3218      	adds	r2, #24
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d026      	beq.n	8001ca0 <HAL_DMA_Init+0x134>
 8001c52:	3218      	adds	r2, #24
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d023      	beq.n	8001ca0 <HAL_DMA_Init+0x134>
 8001c58:	3218      	adds	r2, #24
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d020      	beq.n	8001ca0 <HAL_DMA_Init+0x134>
 8001c5e:	3218      	adds	r2, #24
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d01d      	beq.n	8001ca0 <HAL_DMA_Init+0x134>
 8001c64:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d019      	beq.n	8001ca0 <HAL_DMA_Init+0x134>
 8001c6c:	3218      	adds	r2, #24
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d016      	beq.n	8001ca0 <HAL_DMA_Init+0x134>
 8001c72:	3218      	adds	r2, #24
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d013      	beq.n	8001ca0 <HAL_DMA_Init+0x134>
 8001c78:	3218      	adds	r2, #24
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d010      	beq.n	8001ca0 <HAL_DMA_Init+0x134>
 8001c7e:	3218      	adds	r2, #24
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d00d      	beq.n	8001ca0 <HAL_DMA_Init+0x134>
 8001c84:	3218      	adds	r2, #24
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00a      	beq.n	8001ca0 <HAL_DMA_Init+0x134>
 8001c8a:	3218      	adds	r2, #24
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d007      	beq.n	8001ca0 <HAL_DMA_Init+0x134>
 8001c90:	3218      	adds	r2, #24
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d004      	beq.n	8001ca0 <HAL_DMA_Init+0x134>
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	f022 0201 	bic.w	r2, r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	e003      	b.n	8001ca8 <HAL_DMA_Init+0x13c>
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	f022 0201 	bic.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	f012 0f01 	tst.w	r2, #1
 8001cb0:	d00b      	beq.n	8001cca <HAL_DMA_Init+0x15e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cb2:	f7fe fcf1 	bl	8000698 <HAL_GetTick>
 8001cb6:	1b40      	subs	r0, r0, r5
 8001cb8:	2805      	cmp	r0, #5
 8001cba:	d9f5      	bls.n	8001ca8 <HAL_DMA_Init+0x13c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cbc:	2320      	movs	r3, #32
 8001cbe:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 8001cc6:	2001      	movs	r0, #1
}
 8001cc8:	bd70      	pop	{r4, r5, r6, pc}
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001cca:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ccc:	4854      	ldr	r0, [pc, #336]	; (8001e20 <HAL_DMA_Init+0x2b4>)
 8001cce:	4010      	ands	r0, r2
    registerValue |=  hdma->Init.Direction           |
 8001cd0:	68a1      	ldr	r1, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cd2:	68e2      	ldr	r2, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 8001cd4:	430a      	orrs	r2, r1
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cd6:	6921      	ldr	r1, [r4, #16]
 8001cd8:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cda:	6961      	ldr	r1, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cdc:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cde:	69a1      	ldr	r1, [r4, #24]
 8001ce0:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ce2:	69e1      	ldr	r1, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ce4:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ce6:	6a21      	ldr	r1, [r4, #32]
 8001ce8:	430a      	orrs	r2, r1
    registerValue |=  hdma->Init.Direction           |
 8001cea:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001cee:	2904      	cmp	r1, #4
 8001cf0:	d034      	beq.n	8001d5c <HAL_DMA_Init+0x1f0>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001cf2:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001cf4:	6826      	ldr	r6, [r4, #0]
 8001cf6:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cf8:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 8001cfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cfe:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d107      	bne.n	8001d14 <HAL_DMA_Init+0x1a8>
      registerValue |= hdma->Init.FIFOThreshold;
 8001d04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d06:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d0a:	b11b      	cbz	r3, 8001d14 <HAL_DMA_Init+0x1a8>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	f7ff fe4d 	bl	80019ac <DMA_CheckFifoParam>
 8001d12:	bb40      	cbnz	r0, 8001d66 <HAL_DMA_Init+0x1fa>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001d14:	6175      	str	r5, [r6, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d16:	4620      	mov	r0, r4
 8001d18:	f7ff fdec 	bl	80018f4 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d1c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001d1e:	f003 021f 	and.w	r2, r3, #31
 8001d22:	233f      	movs	r3, #63	; 0x3f
 8001d24:	4093      	lsls	r3, r2
 8001d26:	6083      	str	r3, [r0, #8]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d28:	4620      	mov	r0, r4
 8001d2a:	f7ff fe89 	bl	8001a40 <DMA_CalcDMAMUXChannelBaseAndMask>
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d2e:	68a3      	ldr	r3, [r4, #8]
 8001d30:	2b80      	cmp	r3, #128	; 0x80
 8001d32:	d059      	beq.n	8001de8 <HAL_DMA_Init+0x27c>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d34:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001d36:	7922      	ldrb	r2, [r4, #4]
 8001d38:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d3c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8001d3e:	605a      	str	r2, [r3, #4]
  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001d40:	6863      	ldr	r3, [r4, #4]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	2b07      	cmp	r3, #7
 8001d46:	d952      	bls.n	8001dee <HAL_DMA_Init+0x282>
    hdma->DMAmuxRequestGen = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	66e3      	str	r3, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8001d4c:	6723      	str	r3, [r4, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d4e:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d50:	2000      	movs	r0, #0
 8001d52:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001d54:	2301      	movs	r3, #1
 8001d56:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001d5a:	e7b5      	b.n	8001cc8 <HAL_DMA_Init+0x15c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d5c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001d5e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001d60:	4301      	orrs	r1, r0
 8001d62:	430a      	orrs	r2, r1
 8001d64:	e7c5      	b.n	8001cf2 <HAL_DMA_Init+0x186>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d66:	2340      	movs	r3, #64	; 0x40
 8001d68:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          return HAL_ERROR;
 8001d70:	e7aa      	b.n	8001cc8 <HAL_DMA_Init+0x15c>
    __HAL_UNLOCK(hdma);
 8001d72:	2200      	movs	r2, #0
 8001d74:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d78:	2202      	movs	r2, #2
 8001d7a:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001d7e:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001d80:	4928      	ldr	r1, [pc, #160]	; (8001e24 <HAL_DMA_Init+0x2b8>)
 8001d82:	4011      	ands	r1, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 8001d84:	68a2      	ldr	r2, [r4, #8]
 8001d86:	2a40      	cmp	r2, #64	; 0x40
 8001d88:	d006      	beq.n	8001d98 <HAL_DMA_Init+0x22c>
 8001d8a:	2a80      	cmp	r2, #128	; 0x80
 8001d8c:	d001      	beq.n	8001d92 <HAL_DMA_Init+0x226>
 8001d8e:	2200      	movs	r2, #0
 8001d90:	e003      	b.n	8001d9a <HAL_DMA_Init+0x22e>
 8001d92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d96:	e000      	b.n	8001d9a <HAL_DMA_Init+0x22e>
 8001d98:	2210      	movs	r2, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       | \
 8001d9a:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 8001d9c:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              | \
 8001da0:	6920      	ldr	r0, [r4, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       | \
 8001da2:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) | \
 8001da6:	6960      	ldr	r0, [r4, #20]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              | \
 8001da8:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    | \
 8001dac:	69a0      	ldr	r0, [r4, #24]
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) | \
 8001dae:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      | \
 8001db2:	69e0      	ldr	r0, [r4, #28]
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    | \
 8001db4:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001db8:	6a20      	ldr	r0, [r4, #32]
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      | \
 8001dba:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 8001dbe:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001dc0:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001dc2:	6822      	ldr	r2, [r4, #0]
 8001dc4:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <HAL_DMA_Init+0x2bc>)
 8001dc6:	4413      	add	r3, r2
 8001dc8:	4a18      	ldr	r2, [pc, #96]	; (8001e2c <HAL_DMA_Init+0x2c0>)
 8001dca:	fba2 2303 	umull	r2, r3, r2, r3
 8001dce:	091b      	lsrs	r3, r3, #4
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	f7ff fd8d 	bl	80018f4 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001dda:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	2301      	movs	r3, #1
 8001de2:	4093      	lsls	r3, r2
 8001de4:	6043      	str	r3, [r0, #4]
 8001de6:	e79f      	b.n	8001d28 <HAL_DMA_Init+0x1bc>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001de8:	2300      	movs	r3, #0
 8001dea:	6063      	str	r3, [r4, #4]
 8001dec:	e7a2      	b.n	8001d34 <HAL_DMA_Init+0x1c8>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001dee:	4620      	mov	r0, r4
 8001df0:	f7ff fe7e 	bl	8001af0 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001df4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dfa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001dfc:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	e7a6      	b.n	8001d50 <HAL_DMA_Init+0x1e4>
    return HAL_ERROR;
 8001e02:	2001      	movs	r0, #1
 8001e04:	e760      	b.n	8001cc8 <HAL_DMA_Init+0x15c>
 8001e06:	bf00      	nop
 8001e08:	40020010 	.word	0x40020010
 8001e0c:	40020028 	.word	0x40020028
 8001e10:	58025408 	.word	0x58025408
 8001e14:	5802541c 	.word	0x5802541c
 8001e18:	58025430 	.word	0x58025430
 8001e1c:	40020040 	.word	0x40020040
 8001e20:	fe10803f 	.word	0xfe10803f
 8001e24:	fffe000f 	.word	0xfffe000f
 8001e28:	a7fdabf8 	.word	0xa7fdabf8
 8001e2c:	cccccccd 	.word	0xcccccccd

08001e30 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8001e30:	2800      	cmp	r0, #0
 8001e32:	f000 80f4 	beq.w	800201e <HAL_DMA_Start_IT+0x1ee>
{
 8001e36:	b570      	push	{r4, r5, r6, lr}
 8001e38:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001e3a:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001e3e:	2801      	cmp	r0, #1
 8001e40:	f000 80ef 	beq.w	8002022 <HAL_DMA_Start_IT+0x1f2>
 8001e44:	2001      	movs	r0, #1
 8001e46:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e4a:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8001e4e:	b2c0      	uxtb	r0, r0
 8001e50:	2801      	cmp	r0, #1
 8001e52:	d007      	beq.n	8001e64 <HAL_DMA_Start_IT+0x34>
    __HAL_UNLOCK(hdma);
 8001e54:	2300      	movs	r3, #0
 8001e56:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001e5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e5e:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 8001e60:	2001      	movs	r0, #1
}
 8001e62:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e64:	2002      	movs	r0, #2
 8001e66:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8001e6e:	6820      	ldr	r0, [r4, #0]
 8001e70:	4e6d      	ldr	r6, [pc, #436]	; (8002028 <HAL_DMA_Start_IT+0x1f8>)
 8001e72:	4d6e      	ldr	r5, [pc, #440]	; (800202c <HAL_DMA_Start_IT+0x1fc>)
 8001e74:	42a8      	cmp	r0, r5
 8001e76:	bf18      	it	ne
 8001e78:	42b0      	cmpne	r0, r6
 8001e7a:	d02f      	beq.n	8001edc <HAL_DMA_Start_IT+0xac>
 8001e7c:	3518      	adds	r5, #24
 8001e7e:	42a8      	cmp	r0, r5
 8001e80:	d02c      	beq.n	8001edc <HAL_DMA_Start_IT+0xac>
 8001e82:	3518      	adds	r5, #24
 8001e84:	42a8      	cmp	r0, r5
 8001e86:	d029      	beq.n	8001edc <HAL_DMA_Start_IT+0xac>
 8001e88:	3518      	adds	r5, #24
 8001e8a:	42a8      	cmp	r0, r5
 8001e8c:	d026      	beq.n	8001edc <HAL_DMA_Start_IT+0xac>
 8001e8e:	3518      	adds	r5, #24
 8001e90:	42a8      	cmp	r0, r5
 8001e92:	d023      	beq.n	8001edc <HAL_DMA_Start_IT+0xac>
 8001e94:	3518      	adds	r5, #24
 8001e96:	42a8      	cmp	r0, r5
 8001e98:	d020      	beq.n	8001edc <HAL_DMA_Start_IT+0xac>
 8001e9a:	3518      	adds	r5, #24
 8001e9c:	42a8      	cmp	r0, r5
 8001e9e:	d01d      	beq.n	8001edc <HAL_DMA_Start_IT+0xac>
 8001ea0:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8001ea4:	42a8      	cmp	r0, r5
 8001ea6:	d019      	beq.n	8001edc <HAL_DMA_Start_IT+0xac>
 8001ea8:	3518      	adds	r5, #24
 8001eaa:	42a8      	cmp	r0, r5
 8001eac:	d016      	beq.n	8001edc <HAL_DMA_Start_IT+0xac>
 8001eae:	3518      	adds	r5, #24
 8001eb0:	42a8      	cmp	r0, r5
 8001eb2:	d013      	beq.n	8001edc <HAL_DMA_Start_IT+0xac>
 8001eb4:	3518      	adds	r5, #24
 8001eb6:	42a8      	cmp	r0, r5
 8001eb8:	d010      	beq.n	8001edc <HAL_DMA_Start_IT+0xac>
 8001eba:	3518      	adds	r5, #24
 8001ebc:	42a8      	cmp	r0, r5
 8001ebe:	d00d      	beq.n	8001edc <HAL_DMA_Start_IT+0xac>
 8001ec0:	3518      	adds	r5, #24
 8001ec2:	42a8      	cmp	r0, r5
 8001ec4:	d00a      	beq.n	8001edc <HAL_DMA_Start_IT+0xac>
 8001ec6:	3518      	adds	r5, #24
 8001ec8:	42a8      	cmp	r0, r5
 8001eca:	d007      	beq.n	8001edc <HAL_DMA_Start_IT+0xac>
 8001ecc:	3518      	adds	r5, #24
 8001ece:	42a8      	cmp	r0, r5
 8001ed0:	d004      	beq.n	8001edc <HAL_DMA_Start_IT+0xac>
 8001ed2:	6805      	ldr	r5, [r0, #0]
 8001ed4:	f025 0501 	bic.w	r5, r5, #1
 8001ed8:	6005      	str	r5, [r0, #0]
 8001eda:	e003      	b.n	8001ee4 <HAL_DMA_Start_IT+0xb4>
 8001edc:	6805      	ldr	r5, [r0, #0]
 8001ede:	f025 0501 	bic.w	r5, r5, #1
 8001ee2:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	f7ff fc77 	bl	80017d8 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001eea:	6823      	ldr	r3, [r4, #0]
 8001eec:	494e      	ldr	r1, [pc, #312]	; (8002028 <HAL_DMA_Start_IT+0x1f8>)
 8001eee:	4a4f      	ldr	r2, [pc, #316]	; (800202c <HAL_DMA_Start_IT+0x1fc>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	bf18      	it	ne
 8001ef4:	428b      	cmpne	r3, r1
 8001ef6:	d038      	beq.n	8001f6a <HAL_DMA_Start_IT+0x13a>
 8001ef8:	3218      	adds	r2, #24
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d035      	beq.n	8001f6a <HAL_DMA_Start_IT+0x13a>
 8001efe:	3218      	adds	r2, #24
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d032      	beq.n	8001f6a <HAL_DMA_Start_IT+0x13a>
 8001f04:	3218      	adds	r2, #24
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d02f      	beq.n	8001f6a <HAL_DMA_Start_IT+0x13a>
 8001f0a:	3218      	adds	r2, #24
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d02c      	beq.n	8001f6a <HAL_DMA_Start_IT+0x13a>
 8001f10:	3218      	adds	r2, #24
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d029      	beq.n	8001f6a <HAL_DMA_Start_IT+0x13a>
 8001f16:	3218      	adds	r2, #24
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d026      	beq.n	8001f6a <HAL_DMA_Start_IT+0x13a>
 8001f1c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d022      	beq.n	8001f6a <HAL_DMA_Start_IT+0x13a>
 8001f24:	3218      	adds	r2, #24
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d01f      	beq.n	8001f6a <HAL_DMA_Start_IT+0x13a>
 8001f2a:	3218      	adds	r2, #24
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d01c      	beq.n	8001f6a <HAL_DMA_Start_IT+0x13a>
 8001f30:	3218      	adds	r2, #24
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d019      	beq.n	8001f6a <HAL_DMA_Start_IT+0x13a>
 8001f36:	3218      	adds	r2, #24
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d016      	beq.n	8001f6a <HAL_DMA_Start_IT+0x13a>
 8001f3c:	3218      	adds	r2, #24
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d013      	beq.n	8001f6a <HAL_DMA_Start_IT+0x13a>
 8001f42:	3218      	adds	r2, #24
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d010      	beq.n	8001f6a <HAL_DMA_Start_IT+0x13a>
 8001f48:	3218      	adds	r2, #24
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00d      	beq.n	8001f6a <HAL_DMA_Start_IT+0x13a>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	f022 020e 	bic.w	r2, r2, #14
 8001f54:	f042 020a 	orr.w	r2, r2, #10
 8001f58:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001f5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f5c:	b193      	cbz	r3, 8001f84 <HAL_DMA_Start_IT+0x154>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001f5e:	6822      	ldr	r2, [r4, #0]
 8001f60:	6813      	ldr	r3, [r2, #0]
 8001f62:	f043 0304 	orr.w	r3, r3, #4
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	e00c      	b.n	8001f84 <HAL_DMA_Start_IT+0x154>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	f022 021e 	bic.w	r2, r2, #30
 8001f70:	f042 0216 	orr.w	r2, r2, #22
 8001f74:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001f76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f78:	b123      	cbz	r3, 8001f84 <HAL_DMA_Start_IT+0x154>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001f7a:	6822      	ldr	r2, [r4, #0]
 8001f7c:	6813      	ldr	r3, [r2, #0]
 8001f7e:	f043 0308 	orr.w	r3, r3, #8
 8001f82:	6013      	str	r3, [r2, #0]
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001f84:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001f8c:	d003      	beq.n	8001f96 <HAL_DMA_Start_IT+0x166>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f94:	601a      	str	r2, [r3, #0]
    if(hdma->DMAmuxRequestGen != 0U)
 8001f96:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001f98:	b11b      	cbz	r3, 8001fa2 <HAL_DMA_Start_IT+0x172>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fa0:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8001fa2:	6823      	ldr	r3, [r4, #0]
 8001fa4:	4920      	ldr	r1, [pc, #128]	; (8002028 <HAL_DMA_Start_IT+0x1f8>)
 8001fa6:	4a21      	ldr	r2, [pc, #132]	; (800202c <HAL_DMA_Start_IT+0x1fc>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	bf18      	it	ne
 8001fac:	428b      	cmpne	r3, r1
 8001fae:	d030      	beq.n	8002012 <HAL_DMA_Start_IT+0x1e2>
 8001fb0:	3218      	adds	r2, #24
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d02d      	beq.n	8002012 <HAL_DMA_Start_IT+0x1e2>
 8001fb6:	3218      	adds	r2, #24
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d02a      	beq.n	8002012 <HAL_DMA_Start_IT+0x1e2>
 8001fbc:	3218      	adds	r2, #24
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d027      	beq.n	8002012 <HAL_DMA_Start_IT+0x1e2>
 8001fc2:	3218      	adds	r2, #24
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d024      	beq.n	8002012 <HAL_DMA_Start_IT+0x1e2>
 8001fc8:	3218      	adds	r2, #24
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d021      	beq.n	8002012 <HAL_DMA_Start_IT+0x1e2>
 8001fce:	3218      	adds	r2, #24
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d01e      	beq.n	8002012 <HAL_DMA_Start_IT+0x1e2>
 8001fd4:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d01a      	beq.n	8002012 <HAL_DMA_Start_IT+0x1e2>
 8001fdc:	3218      	adds	r2, #24
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d017      	beq.n	8002012 <HAL_DMA_Start_IT+0x1e2>
 8001fe2:	3218      	adds	r2, #24
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d014      	beq.n	8002012 <HAL_DMA_Start_IT+0x1e2>
 8001fe8:	3218      	adds	r2, #24
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d011      	beq.n	8002012 <HAL_DMA_Start_IT+0x1e2>
 8001fee:	3218      	adds	r2, #24
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d00e      	beq.n	8002012 <HAL_DMA_Start_IT+0x1e2>
 8001ff4:	3218      	adds	r2, #24
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d00b      	beq.n	8002012 <HAL_DMA_Start_IT+0x1e2>
 8001ffa:	3218      	adds	r2, #24
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d008      	beq.n	8002012 <HAL_DMA_Start_IT+0x1e2>
 8002000:	3218      	adds	r2, #24
 8002002:	4293      	cmp	r3, r2
 8002004:	d005      	beq.n	8002012 <HAL_DMA_Start_IT+0x1e2>
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	f042 0201 	orr.w	r2, r2, #1
 800200c:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800200e:	2000      	movs	r0, #0
 8002010:	e727      	b.n	8001e62 <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_ENABLE(hdma);
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	f042 0201 	orr.w	r2, r2, #1
 8002018:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800201a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800201c:	e721      	b.n	8001e62 <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 800201e:	2001      	movs	r0, #1
}
 8002020:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8002022:	2002      	movs	r0, #2
 8002024:	e71d      	b.n	8001e62 <HAL_DMA_Start_IT+0x32>
 8002026:	bf00      	nop
 8002028:	40020010 	.word	0x40020010
 800202c:	40020028 	.word	0x40020028

08002030 <HAL_DMA_IRQHandler>:
{
 8002030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002032:	b083      	sub	sp, #12
 8002034:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800203a:	4ba2      	ldr	r3, [pc, #648]	; (80022c4 <HAL_DMA_IRQHandler+0x294>)
 800203c:	681d      	ldr	r5, [r3, #0]
 800203e:	4ba2      	ldr	r3, [pc, #648]	; (80022c8 <HAL_DMA_IRQHandler+0x298>)
 8002040:	fba3 3505 	umull	r3, r5, r3, r5
 8002044:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002046:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr_dma  = regs_dma->ISR;
 8002048:	683e      	ldr	r6, [r7, #0]
  tmpisr_bdma = regs_bdma->ISR;
 800204a:	f8d7 c000 	ldr.w	ip, [r7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800204e:	6803      	ldr	r3, [r0, #0]
 8002050:	499e      	ldr	r1, [pc, #632]	; (80022cc <HAL_DMA_IRQHandler+0x29c>)
 8002052:	489f      	ldr	r0, [pc, #636]	; (80022d0 <HAL_DMA_IRQHandler+0x2a0>)
 8002054:	4283      	cmp	r3, r0
 8002056:	bf18      	it	ne
 8002058:	428b      	cmpne	r3, r1
 800205a:	bf0c      	ite	eq
 800205c:	2001      	moveq	r0, #1
 800205e:	2000      	movne	r0, #0
 8002060:	d061      	beq.n	8002126 <HAL_DMA_IRQHandler+0xf6>
 8002062:	4a9c      	ldr	r2, [pc, #624]	; (80022d4 <HAL_DMA_IRQHandler+0x2a4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d05e      	beq.n	8002126 <HAL_DMA_IRQHandler+0xf6>
 8002068:	3218      	adds	r2, #24
 800206a:	4293      	cmp	r3, r2
 800206c:	d05b      	beq.n	8002126 <HAL_DMA_IRQHandler+0xf6>
 800206e:	3218      	adds	r2, #24
 8002070:	4293      	cmp	r3, r2
 8002072:	d058      	beq.n	8002126 <HAL_DMA_IRQHandler+0xf6>
 8002074:	3218      	adds	r2, #24
 8002076:	4293      	cmp	r3, r2
 8002078:	d055      	beq.n	8002126 <HAL_DMA_IRQHandler+0xf6>
 800207a:	3218      	adds	r2, #24
 800207c:	4293      	cmp	r3, r2
 800207e:	d052      	beq.n	8002126 <HAL_DMA_IRQHandler+0xf6>
 8002080:	3218      	adds	r2, #24
 8002082:	4293      	cmp	r3, r2
 8002084:	d04f      	beq.n	8002126 <HAL_DMA_IRQHandler+0xf6>
 8002086:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800208a:	4293      	cmp	r3, r2
 800208c:	d04b      	beq.n	8002126 <HAL_DMA_IRQHandler+0xf6>
 800208e:	3218      	adds	r2, #24
 8002090:	4293      	cmp	r3, r2
 8002092:	d048      	beq.n	8002126 <HAL_DMA_IRQHandler+0xf6>
 8002094:	3218      	adds	r2, #24
 8002096:	4293      	cmp	r3, r2
 8002098:	d045      	beq.n	8002126 <HAL_DMA_IRQHandler+0xf6>
 800209a:	3218      	adds	r2, #24
 800209c:	4293      	cmp	r3, r2
 800209e:	d042      	beq.n	8002126 <HAL_DMA_IRQHandler+0xf6>
 80020a0:	3218      	adds	r2, #24
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d03f      	beq.n	8002126 <HAL_DMA_IRQHandler+0xf6>
 80020a6:	3218      	adds	r2, #24
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d03c      	beq.n	8002126 <HAL_DMA_IRQHandler+0xf6>
 80020ac:	3218      	adds	r2, #24
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d039      	beq.n	8002126 <HAL_DMA_IRQHandler+0xf6>
 80020b2:	3218      	adds	r2, #24
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d036      	beq.n	8002126 <HAL_DMA_IRQHandler+0xf6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80020b8:	4987      	ldr	r1, [pc, #540]	; (80022d8 <HAL_DMA_IRQHandler+0x2a8>)
 80020ba:	4a88      	ldr	r2, [pc, #544]	; (80022dc <HAL_DMA_IRQHandler+0x2ac>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	bf18      	it	ne
 80020c0:	428b      	cmpne	r3, r1
 80020c2:	d012      	beq.n	80020ea <HAL_DMA_IRQHandler+0xba>
 80020c4:	4a86      	ldr	r2, [pc, #536]	; (80022e0 <HAL_DMA_IRQHandler+0x2b0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d00f      	beq.n	80020ea <HAL_DMA_IRQHandler+0xba>
 80020ca:	3214      	adds	r2, #20
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d00c      	beq.n	80020ea <HAL_DMA_IRQHandler+0xba>
 80020d0:	3214      	adds	r2, #20
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d009      	beq.n	80020ea <HAL_DMA_IRQHandler+0xba>
 80020d6:	3214      	adds	r2, #20
 80020d8:	4293      	cmp	r3, r2
 80020da:	d006      	beq.n	80020ea <HAL_DMA_IRQHandler+0xba>
 80020dc:	3214      	adds	r2, #20
 80020de:	4293      	cmp	r3, r2
 80020e0:	d003      	beq.n	80020ea <HAL_DMA_IRQHandler+0xba>
 80020e2:	3214      	adds	r2, #20
 80020e4:	4293      	cmp	r3, r2
 80020e6:	f040 8262 	bne.w	80025ae <HAL_DMA_IRQHandler+0x57e>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80020ea:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80020ec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80020ee:	f001 011f 	and.w	r1, r1, #31
 80020f2:	2004      	movs	r0, #4
 80020f4:	4088      	lsls	r0, r1
 80020f6:	ea10 0f0c 	tst.w	r0, ip
 80020fa:	f000 82a8 	beq.w	800264e <HAL_DMA_IRQHandler+0x61e>
 80020fe:	f012 0f04 	tst.w	r2, #4
 8002102:	f000 82a4 	beq.w	800264e <HAL_DMA_IRQHandler+0x61e>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002106:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002108:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800210c:	f000 825b 	beq.w	80025c6 <HAL_DMA_IRQHandler+0x596>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002110:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002114:	f040 8251 	bne.w	80025ba <HAL_DMA_IRQHandler+0x58a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002118:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 8247 	beq.w	80025ae <HAL_DMA_IRQHandler+0x57e>
            hdma->XferM1HalfCpltCallback(hdma);
 8002120:	4620      	mov	r0, r4
 8002122:	4798      	blx	r3
 8002124:	e243      	b.n	80025ae <HAL_DMA_IRQHandler+0x57e>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002126:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002128:	f002 011f 	and.w	r1, r2, #31
 800212c:	2208      	movs	r2, #8
 800212e:	408a      	lsls	r2, r1
 8002130:	4232      	tst	r2, r6
 8002132:	d041      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x188>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002134:	bb70      	cbnz	r0, 8002194 <HAL_DMA_IRQHandler+0x164>
 8002136:	4a67      	ldr	r2, [pc, #412]	; (80022d4 <HAL_DMA_IRQHandler+0x2a4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d02b      	beq.n	8002194 <HAL_DMA_IRQHandler+0x164>
 800213c:	3218      	adds	r2, #24
 800213e:	4293      	cmp	r3, r2
 8002140:	d028      	beq.n	8002194 <HAL_DMA_IRQHandler+0x164>
 8002142:	3218      	adds	r2, #24
 8002144:	4293      	cmp	r3, r2
 8002146:	d025      	beq.n	8002194 <HAL_DMA_IRQHandler+0x164>
 8002148:	3218      	adds	r2, #24
 800214a:	4293      	cmp	r3, r2
 800214c:	d022      	beq.n	8002194 <HAL_DMA_IRQHandler+0x164>
 800214e:	3218      	adds	r2, #24
 8002150:	4293      	cmp	r3, r2
 8002152:	d01f      	beq.n	8002194 <HAL_DMA_IRQHandler+0x164>
 8002154:	3218      	adds	r2, #24
 8002156:	4293      	cmp	r3, r2
 8002158:	d01c      	beq.n	8002194 <HAL_DMA_IRQHandler+0x164>
 800215a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800215e:	4293      	cmp	r3, r2
 8002160:	d018      	beq.n	8002194 <HAL_DMA_IRQHandler+0x164>
 8002162:	3218      	adds	r2, #24
 8002164:	4293      	cmp	r3, r2
 8002166:	d015      	beq.n	8002194 <HAL_DMA_IRQHandler+0x164>
 8002168:	3218      	adds	r2, #24
 800216a:	4293      	cmp	r3, r2
 800216c:	d012      	beq.n	8002194 <HAL_DMA_IRQHandler+0x164>
 800216e:	3218      	adds	r2, #24
 8002170:	4293      	cmp	r3, r2
 8002172:	d00f      	beq.n	8002194 <HAL_DMA_IRQHandler+0x164>
 8002174:	3218      	adds	r2, #24
 8002176:	4293      	cmp	r3, r2
 8002178:	d00c      	beq.n	8002194 <HAL_DMA_IRQHandler+0x164>
 800217a:	3218      	adds	r2, #24
 800217c:	4293      	cmp	r3, r2
 800217e:	d009      	beq.n	8002194 <HAL_DMA_IRQHandler+0x164>
 8002180:	3218      	adds	r2, #24
 8002182:	4293      	cmp	r3, r2
 8002184:	d006      	beq.n	8002194 <HAL_DMA_IRQHandler+0x164>
 8002186:	3218      	adds	r2, #24
 8002188:	4293      	cmp	r3, r2
 800218a:	d003      	beq.n	8002194 <HAL_DMA_IRQHandler+0x164>
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8002192:	e002      	b.n	800219a <HAL_DMA_IRQHandler+0x16a>
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800219a:	b16a      	cbz	r2, 80021b8 <HAL_DMA_IRQHandler+0x188>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	f022 0204 	bic.w	r2, r2, #4
 80021a2:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80021a4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80021a6:	f003 021f 	and.w	r2, r3, #31
 80021aa:	2308      	movs	r3, #8
 80021ac:	4093      	lsls	r3, r2
 80021ae:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80021b8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80021ba:	f002 021f 	and.w	r2, r2, #31
 80021be:	fa26 f302 	lsr.w	r3, r6, r2
 80021c2:	f013 0f01 	tst.w	r3, #1
 80021c6:	d037      	beq.n	8002238 <HAL_DMA_IRQHandler+0x208>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80021c8:	6823      	ldr	r3, [r4, #0]
 80021ca:	4840      	ldr	r0, [pc, #256]	; (80022cc <HAL_DMA_IRQHandler+0x29c>)
 80021cc:	4940      	ldr	r1, [pc, #256]	; (80022d0 <HAL_DMA_IRQHandler+0x2a0>)
 80021ce:	428b      	cmp	r3, r1
 80021d0:	bf18      	it	ne
 80021d2:	4283      	cmpne	r3, r0
 80021d4:	d02c      	beq.n	8002230 <HAL_DMA_IRQHandler+0x200>
 80021d6:	3118      	adds	r1, #24
 80021d8:	428b      	cmp	r3, r1
 80021da:	d029      	beq.n	8002230 <HAL_DMA_IRQHandler+0x200>
 80021dc:	3118      	adds	r1, #24
 80021de:	428b      	cmp	r3, r1
 80021e0:	d026      	beq.n	8002230 <HAL_DMA_IRQHandler+0x200>
 80021e2:	3118      	adds	r1, #24
 80021e4:	428b      	cmp	r3, r1
 80021e6:	d023      	beq.n	8002230 <HAL_DMA_IRQHandler+0x200>
 80021e8:	3118      	adds	r1, #24
 80021ea:	428b      	cmp	r3, r1
 80021ec:	d020      	beq.n	8002230 <HAL_DMA_IRQHandler+0x200>
 80021ee:	3118      	adds	r1, #24
 80021f0:	428b      	cmp	r3, r1
 80021f2:	d01d      	beq.n	8002230 <HAL_DMA_IRQHandler+0x200>
 80021f4:	3118      	adds	r1, #24
 80021f6:	428b      	cmp	r3, r1
 80021f8:	d01a      	beq.n	8002230 <HAL_DMA_IRQHandler+0x200>
 80021fa:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80021fe:	428b      	cmp	r3, r1
 8002200:	d016      	beq.n	8002230 <HAL_DMA_IRQHandler+0x200>
 8002202:	3118      	adds	r1, #24
 8002204:	428b      	cmp	r3, r1
 8002206:	d013      	beq.n	8002230 <HAL_DMA_IRQHandler+0x200>
 8002208:	3118      	adds	r1, #24
 800220a:	428b      	cmp	r3, r1
 800220c:	d010      	beq.n	8002230 <HAL_DMA_IRQHandler+0x200>
 800220e:	3118      	adds	r1, #24
 8002210:	428b      	cmp	r3, r1
 8002212:	d00d      	beq.n	8002230 <HAL_DMA_IRQHandler+0x200>
 8002214:	3118      	adds	r1, #24
 8002216:	428b      	cmp	r3, r1
 8002218:	d00a      	beq.n	8002230 <HAL_DMA_IRQHandler+0x200>
 800221a:	3118      	adds	r1, #24
 800221c:	428b      	cmp	r3, r1
 800221e:	d007      	beq.n	8002230 <HAL_DMA_IRQHandler+0x200>
 8002220:	3118      	adds	r1, #24
 8002222:	428b      	cmp	r3, r1
 8002224:	d004      	beq.n	8002230 <HAL_DMA_IRQHandler+0x200>
 8002226:	3118      	adds	r1, #24
 8002228:	428b      	cmp	r3, r1
 800222a:	d001      	beq.n	8002230 <HAL_DMA_IRQHandler+0x200>
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	e003      	b.n	8002238 <HAL_DMA_IRQHandler+0x208>
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002236:	d13b      	bne.n	80022b0 <HAL_DMA_IRQHandler+0x280>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002238:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800223a:	f003 031f 	and.w	r3, r3, #31
 800223e:	2204      	movs	r2, #4
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	4233      	tst	r3, r6
 8002246:	d051      	beq.n	80022ec <HAL_DMA_IRQHandler+0x2bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002248:	6822      	ldr	r2, [r4, #0]
 800224a:	4820      	ldr	r0, [pc, #128]	; (80022cc <HAL_DMA_IRQHandler+0x29c>)
 800224c:	4920      	ldr	r1, [pc, #128]	; (80022d0 <HAL_DMA_IRQHandler+0x2a0>)
 800224e:	428a      	cmp	r2, r1
 8002250:	bf18      	it	ne
 8002252:	4282      	cmpne	r2, r0
 8002254:	d046      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x2b4>
 8002256:	3118      	adds	r1, #24
 8002258:	428a      	cmp	r2, r1
 800225a:	d043      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x2b4>
 800225c:	3118      	adds	r1, #24
 800225e:	428a      	cmp	r2, r1
 8002260:	d040      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x2b4>
 8002262:	3118      	adds	r1, #24
 8002264:	428a      	cmp	r2, r1
 8002266:	d03d      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x2b4>
 8002268:	3118      	adds	r1, #24
 800226a:	428a      	cmp	r2, r1
 800226c:	d03a      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x2b4>
 800226e:	3118      	adds	r1, #24
 8002270:	428a      	cmp	r2, r1
 8002272:	d037      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x2b4>
 8002274:	3118      	adds	r1, #24
 8002276:	428a      	cmp	r2, r1
 8002278:	d034      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x2b4>
 800227a:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800227e:	428a      	cmp	r2, r1
 8002280:	d030      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x2b4>
 8002282:	3118      	adds	r1, #24
 8002284:	428a      	cmp	r2, r1
 8002286:	d02d      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x2b4>
 8002288:	3118      	adds	r1, #24
 800228a:	428a      	cmp	r2, r1
 800228c:	d02a      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x2b4>
 800228e:	3118      	adds	r1, #24
 8002290:	428a      	cmp	r2, r1
 8002292:	d027      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x2b4>
 8002294:	3118      	adds	r1, #24
 8002296:	428a      	cmp	r2, r1
 8002298:	d024      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x2b4>
 800229a:	3118      	adds	r1, #24
 800229c:	428a      	cmp	r2, r1
 800229e:	d021      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x2b4>
 80022a0:	3118      	adds	r1, #24
 80022a2:	428a      	cmp	r2, r1
 80022a4:	d01e      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x2b4>
 80022a6:	3118      	adds	r1, #24
 80022a8:	428a      	cmp	r2, r1
 80022aa:	d01b      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x2b4>
 80022ac:	6813      	ldr	r3, [r2, #0]
 80022ae:	e01d      	b.n	80022ec <HAL_DMA_IRQHandler+0x2bc>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80022b0:	2301      	movs	r3, #1
 80022b2:	fa03 f202 	lsl.w	r2, r3, r2
 80022b6:	60ba      	str	r2, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80022ba:	f043 0302 	orr.w	r3, r3, #2
 80022be:	6563      	str	r3, [r4, #84]	; 0x54
 80022c0:	e7ba      	b.n	8002238 <HAL_DMA_IRQHandler+0x208>
 80022c2:	bf00      	nop
 80022c4:	20000014 	.word	0x20000014
 80022c8:	1b4e81b5 	.word	0x1b4e81b5
 80022cc:	40020010 	.word	0x40020010
 80022d0:	40020028 	.word	0x40020028
 80022d4:	40020040 	.word	0x40020040
 80022d8:	58025408 	.word	0x58025408
 80022dc:	5802541c 	.word	0x5802541c
 80022e0:	58025430 	.word	0x58025430
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	f012 0f02 	tst.w	r2, #2
 80022ea:	d13d      	bne.n	8002368 <HAL_DMA_IRQHandler+0x338>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80022ec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80022ee:	f003 031f 	and.w	r3, r3, #31
 80022f2:	2210      	movs	r2, #16
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	4233      	tst	r3, r6
 80022fa:	d05f      	beq.n	80023bc <HAL_DMA_IRQHandler+0x38c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80022fc:	6822      	ldr	r2, [r4, #0]
 80022fe:	489b      	ldr	r0, [pc, #620]	; (800256c <HAL_DMA_IRQHandler+0x53c>)
 8002300:	499b      	ldr	r1, [pc, #620]	; (8002570 <HAL_DMA_IRQHandler+0x540>)
 8002302:	428a      	cmp	r2, r1
 8002304:	bf18      	it	ne
 8002306:	4282      	cmpne	r2, r0
 8002308:	d034      	beq.n	8002374 <HAL_DMA_IRQHandler+0x344>
 800230a:	3118      	adds	r1, #24
 800230c:	428a      	cmp	r2, r1
 800230e:	d031      	beq.n	8002374 <HAL_DMA_IRQHandler+0x344>
 8002310:	3118      	adds	r1, #24
 8002312:	428a      	cmp	r2, r1
 8002314:	d02e      	beq.n	8002374 <HAL_DMA_IRQHandler+0x344>
 8002316:	3118      	adds	r1, #24
 8002318:	428a      	cmp	r2, r1
 800231a:	d02b      	beq.n	8002374 <HAL_DMA_IRQHandler+0x344>
 800231c:	3118      	adds	r1, #24
 800231e:	428a      	cmp	r2, r1
 8002320:	d028      	beq.n	8002374 <HAL_DMA_IRQHandler+0x344>
 8002322:	3118      	adds	r1, #24
 8002324:	428a      	cmp	r2, r1
 8002326:	d025      	beq.n	8002374 <HAL_DMA_IRQHandler+0x344>
 8002328:	3118      	adds	r1, #24
 800232a:	428a      	cmp	r2, r1
 800232c:	d022      	beq.n	8002374 <HAL_DMA_IRQHandler+0x344>
 800232e:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002332:	428a      	cmp	r2, r1
 8002334:	d01e      	beq.n	8002374 <HAL_DMA_IRQHandler+0x344>
 8002336:	3118      	adds	r1, #24
 8002338:	428a      	cmp	r2, r1
 800233a:	d01b      	beq.n	8002374 <HAL_DMA_IRQHandler+0x344>
 800233c:	3118      	adds	r1, #24
 800233e:	428a      	cmp	r2, r1
 8002340:	d018      	beq.n	8002374 <HAL_DMA_IRQHandler+0x344>
 8002342:	3118      	adds	r1, #24
 8002344:	428a      	cmp	r2, r1
 8002346:	d015      	beq.n	8002374 <HAL_DMA_IRQHandler+0x344>
 8002348:	3118      	adds	r1, #24
 800234a:	428a      	cmp	r2, r1
 800234c:	d012      	beq.n	8002374 <HAL_DMA_IRQHandler+0x344>
 800234e:	3118      	adds	r1, #24
 8002350:	428a      	cmp	r2, r1
 8002352:	d00f      	beq.n	8002374 <HAL_DMA_IRQHandler+0x344>
 8002354:	3118      	adds	r1, #24
 8002356:	428a      	cmp	r2, r1
 8002358:	d00c      	beq.n	8002374 <HAL_DMA_IRQHandler+0x344>
 800235a:	3118      	adds	r1, #24
 800235c:	428a      	cmp	r2, r1
 800235e:	d009      	beq.n	8002374 <HAL_DMA_IRQHandler+0x344>
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8002366:	e008      	b.n	800237a <HAL_DMA_IRQHandler+0x34a>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002368:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800236a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800236c:	f043 0304 	orr.w	r3, r3, #4
 8002370:	6563      	str	r3, [r4, #84]	; 0x54
 8002372:	e7bb      	b.n	80022ec <HAL_DMA_IRQHandler+0x2bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002374:	6812      	ldr	r2, [r2, #0]
 8002376:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800237a:	b1fa      	cbz	r2, 80023bc <HAL_DMA_IRQHandler+0x38c>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800237c:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800237e:	6823      	ldr	r3, [r4, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002386:	d00d      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x374>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800238e:	d104      	bne.n	800239a <HAL_DMA_IRQHandler+0x36a>
            if(hdma->XferHalfCpltCallback != NULL)
 8002390:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002392:	b19b      	cbz	r3, 80023bc <HAL_DMA_IRQHandler+0x38c>
              hdma->XferHalfCpltCallback(hdma);
 8002394:	4620      	mov	r0, r4
 8002396:	4798      	blx	r3
 8002398:	e010      	b.n	80023bc <HAL_DMA_IRQHandler+0x38c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800239a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800239c:	b173      	cbz	r3, 80023bc <HAL_DMA_IRQHandler+0x38c>
              hdma->XferM1HalfCpltCallback(hdma);
 800239e:	4620      	mov	r0, r4
 80023a0:	4798      	blx	r3
 80023a2:	e00b      	b.n	80023bc <HAL_DMA_IRQHandler+0x38c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	f412 7f80 	tst.w	r2, #256	; 0x100
 80023aa:	d103      	bne.n	80023b4 <HAL_DMA_IRQHandler+0x384>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	f022 0208 	bic.w	r2, r2, #8
 80023b2:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80023b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023b6:	b10b      	cbz	r3, 80023bc <HAL_DMA_IRQHandler+0x38c>
            hdma->XferHalfCpltCallback(hdma);
 80023b8:	4620      	mov	r0, r4
 80023ba:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80023bc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	2220      	movs	r2, #32
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	4233      	tst	r3, r6
 80023ca:	f000 808e 	beq.w	80024ea <HAL_DMA_IRQHandler+0x4ba>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80023ce:	6822      	ldr	r2, [r4, #0]
 80023d0:	4866      	ldr	r0, [pc, #408]	; (800256c <HAL_DMA_IRQHandler+0x53c>)
 80023d2:	4967      	ldr	r1, [pc, #412]	; (8002570 <HAL_DMA_IRQHandler+0x540>)
 80023d4:	428a      	cmp	r2, r1
 80023d6:	bf18      	it	ne
 80023d8:	4282      	cmpne	r2, r0
 80023da:	d02e      	beq.n	800243a <HAL_DMA_IRQHandler+0x40a>
 80023dc:	3118      	adds	r1, #24
 80023de:	428a      	cmp	r2, r1
 80023e0:	d02b      	beq.n	800243a <HAL_DMA_IRQHandler+0x40a>
 80023e2:	3118      	adds	r1, #24
 80023e4:	428a      	cmp	r2, r1
 80023e6:	d028      	beq.n	800243a <HAL_DMA_IRQHandler+0x40a>
 80023e8:	3118      	adds	r1, #24
 80023ea:	428a      	cmp	r2, r1
 80023ec:	d025      	beq.n	800243a <HAL_DMA_IRQHandler+0x40a>
 80023ee:	3118      	adds	r1, #24
 80023f0:	428a      	cmp	r2, r1
 80023f2:	d022      	beq.n	800243a <HAL_DMA_IRQHandler+0x40a>
 80023f4:	3118      	adds	r1, #24
 80023f6:	428a      	cmp	r2, r1
 80023f8:	d01f      	beq.n	800243a <HAL_DMA_IRQHandler+0x40a>
 80023fa:	3118      	adds	r1, #24
 80023fc:	428a      	cmp	r2, r1
 80023fe:	d01c      	beq.n	800243a <HAL_DMA_IRQHandler+0x40a>
 8002400:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002404:	428a      	cmp	r2, r1
 8002406:	d018      	beq.n	800243a <HAL_DMA_IRQHandler+0x40a>
 8002408:	3118      	adds	r1, #24
 800240a:	428a      	cmp	r2, r1
 800240c:	d015      	beq.n	800243a <HAL_DMA_IRQHandler+0x40a>
 800240e:	3118      	adds	r1, #24
 8002410:	428a      	cmp	r2, r1
 8002412:	d012      	beq.n	800243a <HAL_DMA_IRQHandler+0x40a>
 8002414:	3118      	adds	r1, #24
 8002416:	428a      	cmp	r2, r1
 8002418:	d00f      	beq.n	800243a <HAL_DMA_IRQHandler+0x40a>
 800241a:	3118      	adds	r1, #24
 800241c:	428a      	cmp	r2, r1
 800241e:	d00c      	beq.n	800243a <HAL_DMA_IRQHandler+0x40a>
 8002420:	3118      	adds	r1, #24
 8002422:	428a      	cmp	r2, r1
 8002424:	d009      	beq.n	800243a <HAL_DMA_IRQHandler+0x40a>
 8002426:	3118      	adds	r1, #24
 8002428:	428a      	cmp	r2, r1
 800242a:	d006      	beq.n	800243a <HAL_DMA_IRQHandler+0x40a>
 800242c:	3118      	adds	r1, #24
 800242e:	428a      	cmp	r2, r1
 8002430:	d003      	beq.n	800243a <HAL_DMA_IRQHandler+0x40a>
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8002438:	e002      	b.n	8002440 <HAL_DMA_IRQHandler+0x410>
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002440:	2a00      	cmp	r2, #0
 8002442:	d052      	beq.n	80024ea <HAL_DMA_IRQHandler+0x4ba>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002444:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002446:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b04      	cmp	r3, #4
 800244e:	d00e      	beq.n	800246e <HAL_DMA_IRQHandler+0x43e>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002450:	6823      	ldr	r3, [r4, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002458:	d035      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x496>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002460:	d12c      	bne.n	80024bc <HAL_DMA_IRQHandler+0x48c>
            if(hdma->XferM1CpltCallback != NULL)
 8002462:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002464:	2b00      	cmp	r3, #0
 8002466:	d040      	beq.n	80024ea <HAL_DMA_IRQHandler+0x4ba>
              hdma->XferM1CpltCallback(hdma);
 8002468:	4620      	mov	r0, r4
 800246a:	4798      	blx	r3
 800246c:	e03d      	b.n	80024ea <HAL_DMA_IRQHandler+0x4ba>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800246e:	6822      	ldr	r2, [r4, #0]
 8002470:	6813      	ldr	r3, [r2, #0]
 8002472:	f023 0316 	bic.w	r3, r3, #22
 8002476:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002478:	6822      	ldr	r2, [r4, #0]
 800247a:	6953      	ldr	r3, [r2, #20]
 800247c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002480:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002482:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002484:	b1b3      	cbz	r3, 80024b4 <HAL_DMA_IRQHandler+0x484>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002486:	6822      	ldr	r2, [r4, #0]
 8002488:	6813      	ldr	r3, [r2, #0]
 800248a:	f023 0308 	bic.w	r3, r3, #8
 800248e:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002490:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002492:	f003 021f 	and.w	r2, r3, #31
 8002496:	233f      	movs	r3, #63	; 0x3f
 8002498:	4093      	lsls	r3, r2
 800249a:	60bb      	str	r3, [r7, #8]
          __HAL_UNLOCK(hdma);
 800249c:	2300      	movs	r3, #0
 800249e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80024a2:	2301      	movs	r3, #1
 80024a4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 80024a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d07f      	beq.n	80025ae <HAL_DMA_IRQHandler+0x57e>
            hdma->XferAbortCallback(hdma);
 80024ae:	4620      	mov	r0, r4
 80024b0:	4798      	blx	r3
 80024b2:	e07c      	b.n	80025ae <HAL_DMA_IRQHandler+0x57e>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1e5      	bne.n	8002486 <HAL_DMA_IRQHandler+0x456>
 80024ba:	e7e9      	b.n	8002490 <HAL_DMA_IRQHandler+0x460>
            if(hdma->XferCpltCallback != NULL)
 80024bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024be:	b1a3      	cbz	r3, 80024ea <HAL_DMA_IRQHandler+0x4ba>
              hdma->XferCpltCallback(hdma);
 80024c0:	4620      	mov	r0, r4
 80024c2:	4798      	blx	r3
 80024c4:	e011      	b.n	80024ea <HAL_DMA_IRQHandler+0x4ba>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80024cc:	d109      	bne.n	80024e2 <HAL_DMA_IRQHandler+0x4b2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	f022 0210 	bic.w	r2, r2, #16
 80024d4:	601a      	str	r2, [r3, #0]
            __HAL_UNLOCK(hdma);
 80024d6:	2300      	movs	r3, #0
 80024d8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 80024dc:	2301      	movs	r3, #1
 80024de:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferCpltCallback != NULL)
 80024e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024e4:	b10b      	cbz	r3, 80024ea <HAL_DMA_IRQHandler+0x4ba>
            hdma->XferCpltCallback(hdma);
 80024e6:	4620      	mov	r0, r4
 80024e8:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d05e      	beq.n	80025ae <HAL_DMA_IRQHandler+0x57e>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80024f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80024f2:	f013 0f01 	tst.w	r3, #1
 80024f6:	d056      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x576>
        hdma->State = HAL_DMA_STATE_ABORT;
 80024f8:	2304      	movs	r3, #4
 80024fa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 80024fe:	6823      	ldr	r3, [r4, #0]
 8002500:	491a      	ldr	r1, [pc, #104]	; (800256c <HAL_DMA_IRQHandler+0x53c>)
 8002502:	4a1b      	ldr	r2, [pc, #108]	; (8002570 <HAL_DMA_IRQHandler+0x540>)
 8002504:	4293      	cmp	r3, r2
 8002506:	bf18      	it	ne
 8002508:	428b      	cmpne	r3, r1
 800250a:	d033      	beq.n	8002574 <HAL_DMA_IRQHandler+0x544>
 800250c:	3218      	adds	r2, #24
 800250e:	4293      	cmp	r3, r2
 8002510:	d030      	beq.n	8002574 <HAL_DMA_IRQHandler+0x544>
 8002512:	3218      	adds	r2, #24
 8002514:	4293      	cmp	r3, r2
 8002516:	d02d      	beq.n	8002574 <HAL_DMA_IRQHandler+0x544>
 8002518:	3218      	adds	r2, #24
 800251a:	4293      	cmp	r3, r2
 800251c:	d02a      	beq.n	8002574 <HAL_DMA_IRQHandler+0x544>
 800251e:	3218      	adds	r2, #24
 8002520:	4293      	cmp	r3, r2
 8002522:	d027      	beq.n	8002574 <HAL_DMA_IRQHandler+0x544>
 8002524:	3218      	adds	r2, #24
 8002526:	4293      	cmp	r3, r2
 8002528:	d024      	beq.n	8002574 <HAL_DMA_IRQHandler+0x544>
 800252a:	3218      	adds	r2, #24
 800252c:	4293      	cmp	r3, r2
 800252e:	d021      	beq.n	8002574 <HAL_DMA_IRQHandler+0x544>
 8002530:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002534:	4293      	cmp	r3, r2
 8002536:	d01d      	beq.n	8002574 <HAL_DMA_IRQHandler+0x544>
 8002538:	3218      	adds	r2, #24
 800253a:	4293      	cmp	r3, r2
 800253c:	d01a      	beq.n	8002574 <HAL_DMA_IRQHandler+0x544>
 800253e:	3218      	adds	r2, #24
 8002540:	4293      	cmp	r3, r2
 8002542:	d017      	beq.n	8002574 <HAL_DMA_IRQHandler+0x544>
 8002544:	3218      	adds	r2, #24
 8002546:	4293      	cmp	r3, r2
 8002548:	d014      	beq.n	8002574 <HAL_DMA_IRQHandler+0x544>
 800254a:	3218      	adds	r2, #24
 800254c:	4293      	cmp	r3, r2
 800254e:	d011      	beq.n	8002574 <HAL_DMA_IRQHandler+0x544>
 8002550:	3218      	adds	r2, #24
 8002552:	4293      	cmp	r3, r2
 8002554:	d00e      	beq.n	8002574 <HAL_DMA_IRQHandler+0x544>
 8002556:	3218      	adds	r2, #24
 8002558:	4293      	cmp	r3, r2
 800255a:	d00b      	beq.n	8002574 <HAL_DMA_IRQHandler+0x544>
 800255c:	3218      	adds	r2, #24
 800255e:	4293      	cmp	r3, r2
 8002560:	d008      	beq.n	8002574 <HAL_DMA_IRQHandler+0x544>
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	f022 0201 	bic.w	r2, r2, #1
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	e007      	b.n	800257c <HAL_DMA_IRQHandler+0x54c>
 800256c:	40020010 	.word	0x40020010
 8002570:	40020028 	.word	0x40020028
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	f022 0201 	bic.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 800257c:	9b01      	ldr	r3, [sp, #4]
 800257e:	3301      	adds	r3, #1
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	42ab      	cmp	r3, r5
 8002584:	d804      	bhi.n	8002590 <HAL_DMA_IRQHandler+0x560>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002586:	6823      	ldr	r3, [r4, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f013 0f01 	tst.w	r3, #1
 800258e:	d1f5      	bne.n	800257c <HAL_DMA_IRQHandler+0x54c>
        __HAL_UNLOCK(hdma);
 8002590:	2300      	movs	r3, #0
 8002592:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002596:	6823      	ldr	r3, [r4, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f013 0f01 	tst.w	r3, #1
 800259e:	d008      	beq.n	80025b2 <HAL_DMA_IRQHandler+0x582>
          hdma->State = HAL_DMA_STATE_ERROR;
 80025a0:	2303      	movs	r3, #3
 80025a2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 80025a6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80025a8:	b10b      	cbz	r3, 80025ae <HAL_DMA_IRQHandler+0x57e>
        hdma->XferErrorCallback(hdma);
 80025aa:	4620      	mov	r0, r4
 80025ac:	4798      	blx	r3
}
 80025ae:	b003      	add	sp, #12
 80025b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hdma->State = HAL_DMA_STATE_READY;
 80025b2:	2301      	movs	r3, #1
 80025b4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 80025b8:	e7f5      	b.n	80025a6 <HAL_DMA_IRQHandler+0x576>
          if(hdma->XferHalfCpltCallback != NULL)
 80025ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f6      	beq.n	80025ae <HAL_DMA_IRQHandler+0x57e>
            hdma->XferHalfCpltCallback(hdma);
 80025c0:	4620      	mov	r0, r4
 80025c2:	4798      	blx	r3
 80025c4:	e7f3      	b.n	80025ae <HAL_DMA_IRQHandler+0x57e>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80025c6:	f012 0f20 	tst.w	r2, #32
 80025ca:	d135      	bne.n	8002638 <HAL_DMA_IRQHandler+0x608>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	4964      	ldr	r1, [pc, #400]	; (8002760 <HAL_DMA_IRQHandler+0x730>)
 80025d0:	4a64      	ldr	r2, [pc, #400]	; (8002764 <HAL_DMA_IRQHandler+0x734>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	bf18      	it	ne
 80025d6:	428b      	cmpne	r3, r1
 80025d8:	d02a      	beq.n	8002630 <HAL_DMA_IRQHandler+0x600>
 80025da:	3218      	adds	r2, #24
 80025dc:	4293      	cmp	r3, r2
 80025de:	d027      	beq.n	8002630 <HAL_DMA_IRQHandler+0x600>
 80025e0:	3218      	adds	r2, #24
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d024      	beq.n	8002630 <HAL_DMA_IRQHandler+0x600>
 80025e6:	3218      	adds	r2, #24
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d021      	beq.n	8002630 <HAL_DMA_IRQHandler+0x600>
 80025ec:	3218      	adds	r2, #24
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d01e      	beq.n	8002630 <HAL_DMA_IRQHandler+0x600>
 80025f2:	3218      	adds	r2, #24
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d01b      	beq.n	8002630 <HAL_DMA_IRQHandler+0x600>
 80025f8:	3218      	adds	r2, #24
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d018      	beq.n	8002630 <HAL_DMA_IRQHandler+0x600>
 80025fe:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002602:	4293      	cmp	r3, r2
 8002604:	d014      	beq.n	8002630 <HAL_DMA_IRQHandler+0x600>
 8002606:	3218      	adds	r2, #24
 8002608:	4293      	cmp	r3, r2
 800260a:	d011      	beq.n	8002630 <HAL_DMA_IRQHandler+0x600>
 800260c:	3218      	adds	r2, #24
 800260e:	4293      	cmp	r3, r2
 8002610:	d00e      	beq.n	8002630 <HAL_DMA_IRQHandler+0x600>
 8002612:	3218      	adds	r2, #24
 8002614:	4293      	cmp	r3, r2
 8002616:	d00b      	beq.n	8002630 <HAL_DMA_IRQHandler+0x600>
 8002618:	3218      	adds	r2, #24
 800261a:	4293      	cmp	r3, r2
 800261c:	d008      	beq.n	8002630 <HAL_DMA_IRQHandler+0x600>
 800261e:	3218      	adds	r2, #24
 8002620:	4293      	cmp	r3, r2
 8002622:	d005      	beq.n	8002630 <HAL_DMA_IRQHandler+0x600>
 8002624:	3218      	adds	r2, #24
 8002626:	4293      	cmp	r3, r2
 8002628:	d002      	beq.n	8002630 <HAL_DMA_IRQHandler+0x600>
 800262a:	3218      	adds	r2, #24
 800262c:	4293      	cmp	r3, r2
 800262e:	d109      	bne.n	8002644 <HAL_DMA_IRQHandler+0x614>
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	f022 0208 	bic.w	r2, r2, #8
 8002636:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8002638:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0b7      	beq.n	80025ae <HAL_DMA_IRQHandler+0x57e>
          hdma->XferHalfCpltCallback(hdma);
 800263e:	4620      	mov	r0, r4
 8002640:	4798      	blx	r3
 8002642:	e7b4      	b.n	80025ae <HAL_DMA_IRQHandler+0x57e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	f022 0204 	bic.w	r2, r2, #4
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	e7f4      	b.n	8002638 <HAL_DMA_IRQHandler+0x608>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800264e:	2002      	movs	r0, #2
 8002650:	4088      	lsls	r0, r1
 8002652:	ea10 0f0c 	tst.w	r0, ip
 8002656:	d060      	beq.n	800271a <HAL_DMA_IRQHandler+0x6ea>
 8002658:	f012 0f02 	tst.w	r2, #2
 800265c:	d05d      	beq.n	800271a <HAL_DMA_IRQHandler+0x6ea>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800265e:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002660:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002664:	d00e      	beq.n	8002684 <HAL_DMA_IRQHandler+0x654>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002666:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800266a:	d105      	bne.n	8002678 <HAL_DMA_IRQHandler+0x648>
          if(hdma->XferM1CpltCallback != NULL)
 800266c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800266e:	2b00      	cmp	r3, #0
 8002670:	d09d      	beq.n	80025ae <HAL_DMA_IRQHandler+0x57e>
            hdma->XferM1CpltCallback(hdma);
 8002672:	4620      	mov	r0, r4
 8002674:	4798      	blx	r3
 8002676:	e79a      	b.n	80025ae <HAL_DMA_IRQHandler+0x57e>
          if(hdma->XferCpltCallback != NULL)
 8002678:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800267a:	2b00      	cmp	r3, #0
 800267c:	d097      	beq.n	80025ae <HAL_DMA_IRQHandler+0x57e>
            hdma->XferCpltCallback(hdma);
 800267e:	4620      	mov	r0, r4
 8002680:	4798      	blx	r3
 8002682:	e794      	b.n	80025ae <HAL_DMA_IRQHandler+0x57e>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002684:	f012 0f20 	tst.w	r2, #32
 8002688:	d13b      	bne.n	8002702 <HAL_DMA_IRQHandler+0x6d2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	4934      	ldr	r1, [pc, #208]	; (8002760 <HAL_DMA_IRQHandler+0x730>)
 800268e:	4a35      	ldr	r2, [pc, #212]	; (8002764 <HAL_DMA_IRQHandler+0x734>)
 8002690:	4293      	cmp	r3, r2
 8002692:	bf18      	it	ne
 8002694:	428b      	cmpne	r3, r1
 8002696:	d02a      	beq.n	80026ee <HAL_DMA_IRQHandler+0x6be>
 8002698:	3218      	adds	r2, #24
 800269a:	4293      	cmp	r3, r2
 800269c:	d027      	beq.n	80026ee <HAL_DMA_IRQHandler+0x6be>
 800269e:	3218      	adds	r2, #24
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d024      	beq.n	80026ee <HAL_DMA_IRQHandler+0x6be>
 80026a4:	3218      	adds	r2, #24
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d021      	beq.n	80026ee <HAL_DMA_IRQHandler+0x6be>
 80026aa:	3218      	adds	r2, #24
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d01e      	beq.n	80026ee <HAL_DMA_IRQHandler+0x6be>
 80026b0:	3218      	adds	r2, #24
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d01b      	beq.n	80026ee <HAL_DMA_IRQHandler+0x6be>
 80026b6:	3218      	adds	r2, #24
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d018      	beq.n	80026ee <HAL_DMA_IRQHandler+0x6be>
 80026bc:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d014      	beq.n	80026ee <HAL_DMA_IRQHandler+0x6be>
 80026c4:	3218      	adds	r2, #24
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d011      	beq.n	80026ee <HAL_DMA_IRQHandler+0x6be>
 80026ca:	3218      	adds	r2, #24
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d00e      	beq.n	80026ee <HAL_DMA_IRQHandler+0x6be>
 80026d0:	3218      	adds	r2, #24
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d00b      	beq.n	80026ee <HAL_DMA_IRQHandler+0x6be>
 80026d6:	3218      	adds	r2, #24
 80026d8:	4293      	cmp	r3, r2
 80026da:	d008      	beq.n	80026ee <HAL_DMA_IRQHandler+0x6be>
 80026dc:	3218      	adds	r2, #24
 80026de:	4293      	cmp	r3, r2
 80026e0:	d005      	beq.n	80026ee <HAL_DMA_IRQHandler+0x6be>
 80026e2:	3218      	adds	r2, #24
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d002      	beq.n	80026ee <HAL_DMA_IRQHandler+0x6be>
 80026e8:	3218      	adds	r2, #24
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d110      	bne.n	8002710 <HAL_DMA_IRQHandler+0x6e0>
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	f022 0214 	bic.w	r2, r2, #20
 80026f4:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 80026f6:	2300      	movs	r3, #0
 80026f8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80026fc:	2301      	movs	r3, #1
 80026fe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8002702:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002704:	2b00      	cmp	r3, #0
 8002706:	f43f af52 	beq.w	80025ae <HAL_DMA_IRQHandler+0x57e>
          hdma->XferCpltCallback(hdma);
 800270a:	4620      	mov	r0, r4
 800270c:	4798      	blx	r3
 800270e:	e74e      	b.n	80025ae <HAL_DMA_IRQHandler+0x57e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	f022 020a 	bic.w	r2, r2, #10
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	e7ed      	b.n	80026f6 <HAL_DMA_IRQHandler+0x6c6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800271a:	2008      	movs	r0, #8
 800271c:	fa00 f101 	lsl.w	r1, r0, r1
 8002720:	ea11 0f0c 	tst.w	r1, ip
 8002724:	f43f af43 	beq.w	80025ae <HAL_DMA_IRQHandler+0x57e>
 8002728:	f012 0f08 	tst.w	r2, #8
 800272c:	f43f af3f 	beq.w	80025ae <HAL_DMA_IRQHandler+0x57e>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	f022 020e 	bic.w	r2, r2, #14
 8002736:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002738:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800273a:	f003 031f 	and.w	r3, r3, #31
 800273e:	2201      	movs	r2, #1
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	607b      	str	r3, [r7, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002746:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8002748:	2300      	movs	r3, #0
 800274a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800274e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8002752:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002754:	2b00      	cmp	r3, #0
 8002756:	f43f af2a 	beq.w	80025ae <HAL_DMA_IRQHandler+0x57e>
        hdma->XferErrorCallback(hdma);
 800275a:	4620      	mov	r0, r4
 800275c:	4798      	blx	r3
 800275e:	e726      	b.n	80025ae <HAL_DMA_IRQHandler+0x57e>
 8002760:	40020010 	.word	0x40020010
 8002764:	40020028 	.word	0x40020028

08002768 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8002768:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800276a:	4770      	bx	lr

0800276c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800276c:	b4f0      	push	{r4, r5, r6, r7}
 800276e:	b082      	sub	sp, #8
  uint32_t position = 0x00U;
 8002770:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002772:	e03a      	b.n	80027ea <HAL_GPIO_Init+0x7e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002774:	2409      	movs	r4, #9
 8002776:	e000      	b.n	800277a <HAL_GPIO_Init+0xe>
 8002778:	2400      	movs	r4, #0
 800277a:	40b4      	lsls	r4, r6
 800277c:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800277e:	3502      	adds	r5, #2
 8002780:	4e6f      	ldr	r6, [pc, #444]	; (8002940 <HAL_GPIO_Init+0x1d4>)
 8002782:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002786:	4c6f      	ldr	r4, [pc, #444]	; (8002944 <HAL_GPIO_Init+0x1d8>)
 8002788:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800278a:	43d4      	mvns	r4, r2
 800278c:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002790:	684f      	ldr	r7, [r1, #4]
 8002792:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002796:	d001      	beq.n	800279c <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8002798:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800279c:	4d69      	ldr	r5, [pc, #420]	; (8002944 <HAL_GPIO_Init+0x1d8>)
 800279e:	602e      	str	r6, [r5, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80027a0:	686e      	ldr	r6, [r5, #4]
        temp &= ~(iocurrent);
 80027a2:	ea04 0506 	and.w	r5, r4, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027a6:	684f      	ldr	r7, [r1, #4]
 80027a8:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80027ac:	d001      	beq.n	80027b2 <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 80027ae:	ea42 0506 	orr.w	r5, r2, r6
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80027b2:	4e64      	ldr	r6, [pc, #400]	; (8002944 <HAL_GPIO_Init+0x1d8>)
 80027b4:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027b6:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80027ba:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 80027bc:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027c0:	684f      	ldr	r7, [r1, #4]
 80027c2:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80027c6:	d001      	beq.n	80027cc <HAL_GPIO_Init+0x60>
        {
          temp |= iocurrent;
 80027c8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80027cc:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80027d0:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80027d2:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80027d4:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027d6:	684e      	ldr	r6, [r1, #4]
 80027d8:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80027dc:	d001      	beq.n	80027e2 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80027de:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80027e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027e6:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 80027e8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027ea:	680a      	ldr	r2, [r1, #0]
 80027ec:	fa32 f403 	lsrs.w	r4, r2, r3
 80027f0:	f000 80a2 	beq.w	8002938 <HAL_GPIO_Init+0x1cc>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80027f4:	2401      	movs	r4, #1
 80027f6:	409c      	lsls	r4, r3
    if (iocurrent != 0x00U)
 80027f8:	4022      	ands	r2, r4
 80027fa:	d0f5      	beq.n	80027e8 <HAL_GPIO_Init+0x7c>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027fc:	684d      	ldr	r5, [r1, #4]
 80027fe:	2d12      	cmp	r5, #18
 8002800:	bf18      	it	ne
 8002802:	2d02      	cmpne	r5, #2
 8002804:	d110      	bne.n	8002828 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 8002806:	08de      	lsrs	r6, r3, #3
 8002808:	3608      	adds	r6, #8
 800280a:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800280e:	f003 0507 	and.w	r5, r3, #7
 8002812:	00af      	lsls	r7, r5, #2
 8002814:	250f      	movs	r5, #15
 8002816:	40bd      	lsls	r5, r7
 8002818:	ea2c 0c05 	bic.w	ip, ip, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800281c:	690d      	ldr	r5, [r1, #16]
 800281e:	40bd      	lsls	r5, r7
 8002820:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8002824:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8002828:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800282a:	005f      	lsls	r7, r3, #1
 800282c:	2503      	movs	r5, #3
 800282e:	40bd      	lsls	r5, r7
 8002830:	43ed      	mvns	r5, r5
 8002832:	ea05 0c06 	and.w	ip, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002836:	684e      	ldr	r6, [r1, #4]
 8002838:	f006 0603 	and.w	r6, r6, #3
 800283c:	40be      	lsls	r6, r7
 800283e:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->MODER = temp;
 8002842:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002844:	684e      	ldr	r6, [r1, #4]
 8002846:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800284a:	2e11      	cmp	r6, #17
 800284c:	bf18      	it	ne
 800284e:	f1bc 0f01 	cmpne.w	ip, #1
 8002852:	d901      	bls.n	8002858 <HAL_GPIO_Init+0xec>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002854:	2e12      	cmp	r6, #18
 8002856:	d111      	bne.n	800287c <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR;
 8002858:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800285a:	ea05 0c06 	and.w	ip, r5, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800285e:	68ce      	ldr	r6, [r1, #12]
 8002860:	40be      	lsls	r6, r7
 8002862:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OSPEEDR = temp;
 8002866:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8002868:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800286a:	ea26 0c04 	bic.w	ip, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800286e:	684e      	ldr	r6, [r1, #4]
 8002870:	f3c6 1400 	ubfx	r4, r6, #4, #1
 8002874:	409c      	lsls	r4, r3
 8002876:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 800287a:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 800287c:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800287e:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002880:	688c      	ldr	r4, [r1, #8]
 8002882:	40bc      	lsls	r4, r7
 8002884:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8002886:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002888:	684c      	ldr	r4, [r1, #4]
 800288a:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800288e:	d0ab      	beq.n	80027e8 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002890:	4c2d      	ldr	r4, [pc, #180]	; (8002948 <HAL_GPIO_Init+0x1dc>)
 8002892:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 8002896:	f045 0502 	orr.w	r5, r5, #2
 800289a:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 800289e:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 80028a2:	f004 0402 	and.w	r4, r4, #2
 80028a6:	9401      	str	r4, [sp, #4]
 80028a8:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80028aa:	089d      	lsrs	r5, r3, #2
 80028ac:	1cae      	adds	r6, r5, #2
 80028ae:	4c24      	ldr	r4, [pc, #144]	; (8002940 <HAL_GPIO_Init+0x1d4>)
 80028b0:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028b4:	f003 0403 	and.w	r4, r3, #3
 80028b8:	00a6      	lsls	r6, r4, #2
 80028ba:	240f      	movs	r4, #15
 80028bc:	40b4      	lsls	r4, r6
 80028be:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028c2:	4c22      	ldr	r4, [pc, #136]	; (800294c <HAL_GPIO_Init+0x1e0>)
 80028c4:	42a0      	cmp	r0, r4
 80028c6:	f43f af57 	beq.w	8002778 <HAL_GPIO_Init+0xc>
 80028ca:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80028ce:	42a0      	cmp	r0, r4
 80028d0:	d022      	beq.n	8002918 <HAL_GPIO_Init+0x1ac>
 80028d2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80028d6:	42a0      	cmp	r0, r4
 80028d8:	d020      	beq.n	800291c <HAL_GPIO_Init+0x1b0>
 80028da:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80028de:	42a0      	cmp	r0, r4
 80028e0:	d01e      	beq.n	8002920 <HAL_GPIO_Init+0x1b4>
 80028e2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80028e6:	42a0      	cmp	r0, r4
 80028e8:	d01c      	beq.n	8002924 <HAL_GPIO_Init+0x1b8>
 80028ea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80028ee:	42a0      	cmp	r0, r4
 80028f0:	d01a      	beq.n	8002928 <HAL_GPIO_Init+0x1bc>
 80028f2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80028f6:	42a0      	cmp	r0, r4
 80028f8:	d018      	beq.n	800292c <HAL_GPIO_Init+0x1c0>
 80028fa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80028fe:	42a0      	cmp	r0, r4
 8002900:	d016      	beq.n	8002930 <HAL_GPIO_Init+0x1c4>
 8002902:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002906:	42a0      	cmp	r0, r4
 8002908:	d014      	beq.n	8002934 <HAL_GPIO_Init+0x1c8>
 800290a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800290e:	42a0      	cmp	r0, r4
 8002910:	f43f af30 	beq.w	8002774 <HAL_GPIO_Init+0x8>
 8002914:	240a      	movs	r4, #10
 8002916:	e730      	b.n	800277a <HAL_GPIO_Init+0xe>
 8002918:	2401      	movs	r4, #1
 800291a:	e72e      	b.n	800277a <HAL_GPIO_Init+0xe>
 800291c:	2402      	movs	r4, #2
 800291e:	e72c      	b.n	800277a <HAL_GPIO_Init+0xe>
 8002920:	2403      	movs	r4, #3
 8002922:	e72a      	b.n	800277a <HAL_GPIO_Init+0xe>
 8002924:	2404      	movs	r4, #4
 8002926:	e728      	b.n	800277a <HAL_GPIO_Init+0xe>
 8002928:	2405      	movs	r4, #5
 800292a:	e726      	b.n	800277a <HAL_GPIO_Init+0xe>
 800292c:	2406      	movs	r4, #6
 800292e:	e724      	b.n	800277a <HAL_GPIO_Init+0xe>
 8002930:	2407      	movs	r4, #7
 8002932:	e722      	b.n	800277a <HAL_GPIO_Init+0xe>
 8002934:	2408      	movs	r4, #8
 8002936:	e720      	b.n	800277a <HAL_GPIO_Init+0xe>
  }
}
 8002938:	b002      	add	sp, #8
 800293a:	bcf0      	pop	{r4, r5, r6, r7}
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	58000400 	.word	0x58000400
 8002944:	58000080 	.word	0x58000080
 8002948:	58024400 	.word	0x58024400
 800294c:	58020000 	.word	0x58020000

08002950 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002950:	6903      	ldr	r3, [r0, #16]
 8002952:	4219      	tst	r1, r3
 8002954:	d101      	bne.n	800295a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002956:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002958:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 800295a:	2001      	movs	r0, #1
 800295c:	4770      	bx	lr

0800295e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800295e:	b912      	cbnz	r2, 8002966 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002960:	0409      	lsls	r1, r1, #16
 8002962:	6181      	str	r1, [r0, #24]
  }
}
 8002964:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8002966:	6181      	str	r1, [r0, #24]
 8002968:	4770      	bx	lr

0800296a <HAL_HCD_Init>:
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800296a:	2800      	cmp	r0, #0
 800296c:	d045      	beq.n	80029fa <HAL_HCD_Init+0x90>
{
 800296e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002970:	b08b      	sub	sp, #44	; 0x2c
 8002972:	4606      	mov	r6, r0
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002974:	6804      	ldr	r4, [r0, #0]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002976:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
 800297a:	2b00      	cmp	r3, #0
 800297c:	d038      	beq.n	80029f0 <HAL_HCD_Init+0x86>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800297e:	2303      	movs	r3, #3
 8002980:	f886 32b9 	strb.w	r3, [r6, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002984:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002986:	f413 7f80 	tst.w	r3, #256	; 0x100
 800298a:	d101      	bne.n	8002990 <HAL_HCD_Init+0x26>
  {
    hhcd->Init.dma_enable = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	6133      	str	r3, [r6, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002990:	6830      	ldr	r0, [r6, #0]
 8002992:	f006 fd0f 	bl	80093b4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002996:	4634      	mov	r4, r6
 8002998:	f854 cb10 	ldr.w	ip, [r4], #16
 800299c:	466d      	mov	r5, sp
 800299e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80029ae:	1d37      	adds	r7, r6, #4
 80029b0:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80029b4:	4660      	mov	r0, ip
 80029b6:	f006 fcb7 	bl	8009328 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80029ba:	2101      	movs	r1, #1
 80029bc:	6830      	ldr	r0, [r6, #0]
 80029be:	f006 fcff 	bl	80093c0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80029c2:	4634      	mov	r4, r6
 80029c4:	f854 cb10 	ldr.w	ip, [r4], #16
 80029c8:	466d      	mov	r5, sp
 80029ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80029da:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80029de:	4660      	mov	r0, ip
 80029e0:	f006 fd50 	bl	8009484 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80029e4:	2301      	movs	r3, #1
 80029e6:	f886 32b9 	strb.w	r3, [r6, #697]	; 0x2b9

  return HAL_OK;
 80029ea:	2000      	movs	r0, #0
}
 80029ec:	b00b      	add	sp, #44	; 0x2c
 80029ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hhcd->Lock = HAL_UNLOCKED;
 80029f0:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 80029f4:	f008 fc4e 	bl	800b294 <HAL_HCD_MspInit>
 80029f8:	e7c1      	b.n	800297e <HAL_HCD_Init+0x14>
    return HAL_ERROR;
 80029fa:	2001      	movs	r0, #1
}
 80029fc:	4770      	bx	lr

080029fe <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029fe:	6803      	ldr	r3, [r0, #0]
 8002a00:	699a      	ldr	r2, [r3, #24]
 8002a02:	f012 0f02 	tst.w	r2, #2
 8002a06:	d001      	beq.n	8002a0c <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a08:	2200      	movs	r2, #0
 8002a0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a0c:	6803      	ldr	r3, [r0, #0]
 8002a0e:	699a      	ldr	r2, [r3, #24]
 8002a10:	f012 0f01 	tst.w	r2, #1
 8002a14:	d103      	bne.n	8002a1e <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a16:	699a      	ldr	r2, [r3, #24]
 8002a18:	f042 0201 	orr.w	r2, r2, #1
 8002a1c:	619a      	str	r2, [r3, #24]
  }
}
 8002a1e:	4770      	bx	lr

08002a20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002a20:	b470      	push	{r4, r5, r6}
 8002a22:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002a24:	6805      	ldr	r5, [r0, #0]
 8002a26:	6868      	ldr	r0, [r5, #4]
 8002a28:	0d74      	lsrs	r4, r6, #21
 8002a2a:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8002a2e:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8002a32:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8002a36:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8002a3a:	f044 0403 	orr.w	r4, r4, #3
 8002a3e:	ea20 0004 	bic.w	r0, r0, r4
 8002a42:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002a46:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002a4a:	4319      	orrs	r1, r3
 8002a4c:	4331      	orrs	r1, r6
 8002a4e:	4301      	orrs	r1, r0
 8002a50:	6069      	str	r1, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002a52:	bc70      	pop	{r4, r5, r6}
 8002a54:	4770      	bx	lr

08002a56 <I2C_IsAcknowledgeFailed>:
{
 8002a56:	b570      	push	{r4, r5, r6, lr}
 8002a58:	4604      	mov	r4, r0
 8002a5a:	460d      	mov	r5, r1
 8002a5c:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a5e:	6803      	ldr	r3, [r0, #0]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	f013 0f10 	tst.w	r3, #16
 8002a66:	d01c      	beq.n	8002aa2 <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a68:	6823      	ldr	r3, [r4, #0]
 8002a6a:	699a      	ldr	r2, [r3, #24]
 8002a6c:	f012 0f20 	tst.w	r2, #32
 8002a70:	d119      	bne.n	8002aa6 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8002a72:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002a76:	d0f7      	beq.n	8002a68 <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a78:	f7fd fe0e 	bl	8000698 <HAL_GetTick>
 8002a7c:	1b80      	subs	r0, r0, r6
 8002a7e:	42a8      	cmp	r0, r5
 8002a80:	d801      	bhi.n	8002a86 <I2C_IsAcknowledgeFailed+0x30>
 8002a82:	2d00      	cmp	r5, #0
 8002a84:	d1f0      	bne.n	8002a68 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a86:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a88:	f043 0320 	orr.w	r3, r3, #32
 8002a8c:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a8e:	2320      	movs	r3, #32
 8002a90:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a94:	2300      	movs	r3, #0
 8002a96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8002a9a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8002a9e:	2001      	movs	r0, #1
 8002aa0:	e020      	b.n	8002ae4 <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	e01e      	b.n	8002ae4 <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aa6:	2210      	movs	r2, #16
 8002aa8:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aaa:	6823      	ldr	r3, [r4, #0]
 8002aac:	2520      	movs	r5, #32
 8002aae:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	f7ff ffa4 	bl	80029fe <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002ab6:	6822      	ldr	r2, [r4, #0]
 8002ab8:	6853      	ldr	r3, [r2, #4]
 8002aba:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002abe:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002ac2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002ac6:	f023 0301 	bic.w	r3, r3, #1
 8002aca:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002acc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ace:	f043 0304 	orr.w	r3, r3, #4
 8002ad2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ad4:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002ade:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8002ae2:	2001      	movs	r0, #1
}
 8002ae4:	bd70      	pop	{r4, r5, r6, pc}

08002ae6 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002ae6:	b570      	push	{r4, r5, r6, lr}
 8002ae8:	4604      	mov	r4, r0
 8002aea:	460d      	mov	r5, r1
 8002aec:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002aee:	6823      	ldr	r3, [r4, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f013 0f02 	tst.w	r3, #2
 8002af6:	d11d      	bne.n	8002b34 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002af8:	4632      	mov	r2, r6
 8002afa:	4629      	mov	r1, r5
 8002afc:	4620      	mov	r0, r4
 8002afe:	f7ff ffaa 	bl	8002a56 <I2C_IsAcknowledgeFailed>
 8002b02:	b9c8      	cbnz	r0, 8002b38 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8002b04:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002b08:	d0f1      	beq.n	8002aee <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b0a:	f7fd fdc5 	bl	8000698 <HAL_GetTick>
 8002b0e:	1b80      	subs	r0, r0, r6
 8002b10:	42a8      	cmp	r0, r5
 8002b12:	d801      	bhi.n	8002b18 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002b14:	2d00      	cmp	r5, #0
 8002b16:	d1ea      	bne.n	8002aee <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b18:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b1a:	f043 0320 	orr.w	r3, r3, #32
 8002b1e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b20:	2320      	movs	r3, #32
 8002b22:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002b2c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002b30:	2001      	movs	r0, #1
 8002b32:	e000      	b.n	8002b36 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8002b34:	2000      	movs	r0, #0
}
 8002b36:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002b38:	2001      	movs	r0, #1
 8002b3a:	e7fc      	b.n	8002b36 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08002b3c <I2C_WaitOnFlagUntilTimeout>:
{
 8002b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b3e:	4605      	mov	r5, r0
 8002b40:	460f      	mov	r7, r1
 8002b42:	4616      	mov	r6, r2
 8002b44:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b46:	682b      	ldr	r3, [r5, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	ea37 0303 	bics.w	r3, r7, r3
 8002b4e:	bf0c      	ite	eq
 8002b50:	2301      	moveq	r3, #1
 8002b52:	2300      	movne	r3, #0
 8002b54:	42b3      	cmp	r3, r6
 8002b56:	d118      	bne.n	8002b8a <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8002b58:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002b5c:	d0f3      	beq.n	8002b46 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b5e:	f7fd fd9b 	bl	8000698 <HAL_GetTick>
 8002b62:	9b06      	ldr	r3, [sp, #24]
 8002b64:	1ac0      	subs	r0, r0, r3
 8002b66:	42a0      	cmp	r0, r4
 8002b68:	d801      	bhi.n	8002b6e <I2C_WaitOnFlagUntilTimeout+0x32>
 8002b6a:	2c00      	cmp	r4, #0
 8002b6c:	d1eb      	bne.n	8002b46 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b6e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002b70:	f043 0320 	orr.w	r3, r3, #32
 8002b74:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b76:	2320      	movs	r3, #32
 8002b78:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002b82:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8002b86:	2001      	movs	r0, #1
 8002b88:	e000      	b.n	8002b8c <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 8002b8a:	2000      	movs	r0, #0
}
 8002b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002b8e <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002b8e:	b570      	push	{r4, r5, r6, lr}
 8002b90:	4605      	mov	r5, r0
 8002b92:	460c      	mov	r4, r1
 8002b94:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b96:	682b      	ldr	r3, [r5, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f013 0f20 	tst.w	r3, #32
 8002b9e:	d11a      	bne.n	8002bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ba0:	4632      	mov	r2, r6
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	4628      	mov	r0, r5
 8002ba6:	f7ff ff56 	bl	8002a56 <I2C_IsAcknowledgeFailed>
 8002baa:	b9b0      	cbnz	r0, 8002bda <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bac:	f7fd fd74 	bl	8000698 <HAL_GetTick>
 8002bb0:	1b80      	subs	r0, r0, r6
 8002bb2:	42a0      	cmp	r0, r4
 8002bb4:	d801      	bhi.n	8002bba <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8002bb6:	2c00      	cmp	r4, #0
 8002bb8:	d1ed      	bne.n	8002b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bba:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002bbc:	f043 0320 	orr.w	r3, r3, #32
 8002bc0:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002bc2:	2320      	movs	r3, #32
 8002bc4:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002bce:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8002bd2:	2001      	movs	r0, #1
}
 8002bd4:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	e7fc      	b.n	8002bd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8002bda:	2001      	movs	r0, #1
 8002bdc:	e7fa      	b.n	8002bd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
	...

08002be0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002be0:	2800      	cmp	r0, #0
 8002be2:	d057      	beq.n	8002c94 <HAL_I2C_Init+0xb4>
{
 8002be4:	b510      	push	{r4, lr}
 8002be6:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002be8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d041      	beq.n	8002c74 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bf0:	2324      	movs	r3, #36	; 0x24
 8002bf2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002bf6:	6822      	ldr	r2, [r4, #0]
 8002bf8:	6813      	ldr	r3, [r2, #0]
 8002bfa:	f023 0301 	bic.w	r3, r3, #1
 8002bfe:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c00:	6863      	ldr	r3, [r4, #4]
 8002c02:	6822      	ldr	r2, [r4, #0]
 8002c04:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002c08:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c0a:	6822      	ldr	r2, [r4, #0]
 8002c0c:	6893      	ldr	r3, [r2, #8]
 8002c0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c12:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c14:	68e3      	ldr	r3, [r4, #12]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d031      	beq.n	8002c7e <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c1a:	68a3      	ldr	r3, [r4, #8]
 8002c1c:	6822      	ldr	r2, [r4, #0]
 8002c1e:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8002c22:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c24:	68e3      	ldr	r3, [r4, #12]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d02f      	beq.n	8002c8a <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c2a:	6822      	ldr	r2, [r4, #0]
 8002c2c:	6851      	ldr	r1, [r2, #4]
 8002c2e:	4b1a      	ldr	r3, [pc, #104]	; (8002c98 <HAL_I2C_Init+0xb8>)
 8002c30:	430b      	orrs	r3, r1
 8002c32:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c34:	6822      	ldr	r2, [r4, #0]
 8002c36:	68d3      	ldr	r3, [r2, #12]
 8002c38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c3c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c3e:	6923      	ldr	r3, [r4, #16]
 8002c40:	6962      	ldr	r2, [r4, #20]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	69a1      	ldr	r1, [r4, #24]
 8002c46:	6822      	ldr	r2, [r4, #0]
 8002c48:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002c4c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c4e:	69e3      	ldr	r3, [r4, #28]
 8002c50:	6a21      	ldr	r1, [r4, #32]
 8002c52:	6822      	ldr	r2, [r4, #0]
 8002c54:	430b      	orrs	r3, r1
 8002c56:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002c58:	6822      	ldr	r2, [r4, #0]
 8002c5a:	6813      	ldr	r3, [r2, #0]
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c62:	2000      	movs	r0, #0
 8002c64:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c66:	2320      	movs	r3, #32
 8002c68:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c6c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c6e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002c72:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002c74:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002c78:	f007 fb90 	bl	800a39c <HAL_I2C_MspInit>
 8002c7c:	e7b8      	b.n	8002bf0 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c7e:	68a3      	ldr	r3, [r4, #8]
 8002c80:	6822      	ldr	r2, [r4, #0]
 8002c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c86:	6093      	str	r3, [r2, #8]
 8002c88:	e7cc      	b.n	8002c24 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c8a:	6823      	ldr	r3, [r4, #0]
 8002c8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	e7ca      	b.n	8002c2a <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8002c94:	2001      	movs	r0, #1
}
 8002c96:	4770      	bx	lr
 8002c98:	02008000 	.word	0x02008000

08002c9c <HAL_I2C_Master_Transmit>:
{
 8002c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ca0:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ca2:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8002ca6:	b2ed      	uxtb	r5, r5
 8002ca8:	2d20      	cmp	r5, #32
 8002caa:	f040 80a4 	bne.w	8002df6 <HAL_I2C_Master_Transmit+0x15a>
    __HAL_LOCK(hi2c);
 8002cae:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002cb2:	2c01      	cmp	r4, #1
 8002cb4:	f000 80a4 	beq.w	8002e00 <HAL_I2C_Master_Transmit+0x164>
 8002cb8:	4698      	mov	r8, r3
 8002cba:	4617      	mov	r7, r2
 8002cbc:	460e      	mov	r6, r1
 8002cbe:	4604      	mov	r4, r0
 8002cc0:	f04f 0901 	mov.w	r9, #1
 8002cc4:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002cc8:	f7fd fce6 	bl	8000698 <HAL_GetTick>
 8002ccc:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cce:	9000      	str	r0, [sp, #0]
 8002cd0:	2319      	movs	r3, #25
 8002cd2:	464a      	mov	r2, r9
 8002cd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cd8:	4620      	mov	r0, r4
 8002cda:	f7ff ff2f 	bl	8002b3c <I2C_WaitOnFlagUntilTimeout>
 8002cde:	2800      	cmp	r0, #0
 8002ce0:	f040 8090 	bne.w	8002e04 <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ce4:	2321      	movs	r3, #33	; 0x21
 8002ce6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002cea:	2310      	movs	r3, #16
 8002cec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002cf4:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cf6:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cfa:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cfc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	2bff      	cmp	r3, #255	; 0xff
 8002d02:	d90a      	bls.n	8002d1a <HAL_I2C_Master_Transmit+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d04:	22ff      	movs	r2, #255	; 0xff
 8002d06:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d08:	4b42      	ldr	r3, [pc, #264]	; (8002e14 <HAL_I2C_Master_Transmit+0x178>)
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d10:	4631      	mov	r1, r6
 8002d12:	4620      	mov	r0, r4
 8002d14:	f7ff fe84 	bl	8002a20 <I2C_TransferConfig>
 8002d18:	e018      	b.n	8002d4c <HAL_I2C_Master_Transmit+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 8002d1a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002d1c:	b292      	uxth	r2, r2
 8002d1e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002d20:	4b3c      	ldr	r3, [pc, #240]	; (8002e14 <HAL_I2C_Master_Transmit+0x178>)
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	4631      	mov	r1, r6
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	f7ff fe77 	bl	8002a20 <I2C_TransferConfig>
 8002d32:	e00b      	b.n	8002d4c <HAL_I2C_Master_Transmit+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 8002d34:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002d36:	b292      	uxth	r2, r2
 8002d38:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	4631      	mov	r1, r6
 8002d46:	4620      	mov	r0, r4
 8002d48:	f7ff fe6a 	bl	8002a20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d4c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d033      	beq.n	8002dbc <HAL_I2C_Master_Transmit+0x120>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d54:	462a      	mov	r2, r5
 8002d56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f7ff fec4 	bl	8002ae6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d5e:	2800      	cmp	r0, #0
 8002d60:	d152      	bne.n	8002e08 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d62:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	7812      	ldrb	r2, [r2, #0]
 8002d68:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002d6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002d70:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d72:	3b01      	subs	r3, #1
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002d78:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d80:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002d82:	b292      	uxth	r2, r2
 8002d84:	2a00      	cmp	r2, #0
 8002d86:	d0e1      	beq.n	8002d4c <HAL_I2C_Master_Transmit+0xb0>
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1df      	bne.n	8002d4c <HAL_I2C_Master_Transmit+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d8c:	9500      	str	r5, [sp, #0]
 8002d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d90:	2200      	movs	r2, #0
 8002d92:	2180      	movs	r1, #128	; 0x80
 8002d94:	4620      	mov	r0, r4
 8002d96:	f7ff fed1 	bl	8002b3c <I2C_WaitOnFlagUntilTimeout>
 8002d9a:	2800      	cmp	r0, #0
 8002d9c:	d136      	bne.n	8002e0c <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2bff      	cmp	r3, #255	; 0xff
 8002da4:	d9c6      	bls.n	8002d34 <HAL_I2C_Master_Transmit+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002da6:	22ff      	movs	r2, #255	; 0xff
 8002da8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002daa:	2300      	movs	r3, #0
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002db2:	4631      	mov	r1, r6
 8002db4:	4620      	mov	r0, r4
 8002db6:	f7ff fe33 	bl	8002a20 <I2C_TransferConfig>
 8002dba:	e7c7      	b.n	8002d4c <HAL_I2C_Master_Transmit+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dbc:	462a      	mov	r2, r5
 8002dbe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002dc0:	4620      	mov	r0, r4
 8002dc2:	f7ff fee4 	bl	8002b8e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	bb10      	cbnz	r0, 8002e10 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dca:	6822      	ldr	r2, [r4, #0]
 8002dcc:	2120      	movs	r1, #32
 8002dce:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8002dd0:	6820      	ldr	r0, [r4, #0]
 8002dd2:	6842      	ldr	r2, [r0, #4]
 8002dd4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002dd8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002ddc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002de0:	f022 0201 	bic.w	r2, r2, #1
 8002de4:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002de6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dea:	2200      	movs	r2, #0
 8002dec:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002df0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8002df4:	e000      	b.n	8002df8 <HAL_I2C_Master_Transmit+0x15c>
    return HAL_BUSY;
 8002df6:	2302      	movs	r3, #2
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	b003      	add	sp, #12
 8002dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8002e00:	2302      	movs	r3, #2
 8002e02:	e7f9      	b.n	8002df8 <HAL_I2C_Master_Transmit+0x15c>
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e7f7      	b.n	8002df8 <HAL_I2C_Master_Transmit+0x15c>
        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e7f5      	b.n	8002df8 <HAL_I2C_Master_Transmit+0x15c>
          return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e7f3      	b.n	8002df8 <HAL_I2C_Master_Transmit+0x15c>
      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e7f1      	b.n	8002df8 <HAL_I2C_Master_Transmit+0x15c>
 8002e14:	80002000 	.word	0x80002000

08002e18 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e18:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	d124      	bne.n	8002e6c <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e22:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d022      	beq.n	8002e70 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e30:	2324      	movs	r3, #36	; 0x24
 8002e32:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e36:	6802      	ldr	r2, [r0, #0]
 8002e38:	6813      	ldr	r3, [r2, #0]
 8002e3a:	f023 0301 	bic.w	r3, r3, #1
 8002e3e:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e40:	6802      	ldr	r2, [r0, #0]
 8002e42:	6813      	ldr	r3, [r2, #0]
 8002e44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e48:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e4a:	6802      	ldr	r2, [r0, #0]
 8002e4c:	6813      	ldr	r3, [r2, #0]
 8002e4e:	4319      	orrs	r1, r3
 8002e50:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e52:	6802      	ldr	r2, [r0, #0]
 8002e54:	6813      	ldr	r3, [r2, #0]
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e5c:	2320      	movs	r3, #32
 8002e5e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e62:	2300      	movs	r3, #0
 8002e64:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002e68:	4618      	mov	r0, r3
 8002e6a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002e6c:	2002      	movs	r0, #2
 8002e6e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002e70:	2002      	movs	r0, #2
  }
}
 8002e72:	4770      	bx	lr

08002e74 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e74:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	d122      	bne.n	8002ec4 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e7e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d020      	beq.n	8002ec8 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8002e86:	2301      	movs	r3, #1
 8002e88:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e8c:	2324      	movs	r3, #36	; 0x24
 8002e8e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e92:	6802      	ldr	r2, [r0, #0]
 8002e94:	6813      	ldr	r3, [r2, #0]
 8002e96:	f023 0301 	bic.w	r3, r3, #1
 8002e9a:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e9c:	6802      	ldr	r2, [r0, #0]
 8002e9e:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ea0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ea4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ea8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002eaa:	6802      	ldr	r2, [r0, #0]
 8002eac:	6813      	ldr	r3, [r2, #0]
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eb4:	2320      	movs	r3, #32
 8002eb6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002ec4:	2002      	movs	r0, #2
 8002ec6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002ec8:	2002      	movs	r0, #2
  }
}
 8002eca:	4770      	bx	lr

08002ecc <HAL_PWREx_ConfigSupply>:
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8002ecc:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <HAL_PWREx_ConfigSupply+0x4c>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f013 0f04 	tst.w	r3, #4
 8002ed4:	d107      	bne.n	8002ee6 <HAL_PWREx_ConfigSupply+0x1a>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002ed6:	4b10      	ldr	r3, [pc, #64]	; (8002f18 <HAL_PWREx_ConfigSupply+0x4c>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	4283      	cmp	r3, r0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_PWREx_ConfigSupply+0x1a>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8002ee2:	2001      	movs	r0, #1
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
}
 8002ee4:	4770      	bx	lr
{
 8002ee6:	b510      	push	{r4, lr}
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002ee8:	4a0b      	ldr	r2, [pc, #44]	; (8002f18 <HAL_PWREx_ConfigSupply+0x4c>)
 8002eea:	68d3      	ldr	r3, [r2, #12]
 8002eec:	f023 0307 	bic.w	r3, r3, #7
 8002ef0:	4318      	orrs	r0, r3
 8002ef2:	60d0      	str	r0, [r2, #12]
  tickstart = HAL_GetTick();
 8002ef4:	f7fd fbd0 	bl	8000698 <HAL_GetTick>
 8002ef8:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8002efa:	4b07      	ldr	r3, [pc, #28]	; (8002f18 <HAL_PWREx_ConfigSupply+0x4c>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002f02:	d107      	bne.n	8002f14 <HAL_PWREx_ConfigSupply+0x48>
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8002f04:	f7fd fbc8 	bl	8000698 <HAL_GetTick>
 8002f08:	1b00      	subs	r0, r0, r4
 8002f0a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002f0e:	d9f4      	bls.n	8002efa <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_TIMEOUT;
 8002f10:	2003      	movs	r0, #3
 8002f12:	e000      	b.n	8002f16 <HAL_PWREx_ConfigSupply+0x4a>
  return HAL_OK;
 8002f14:	2000      	movs	r0, #0
}
 8002f16:	bd10      	pop	{r4, pc}
 8002f18:	58024800 	.word	0x58024800

08002f1c <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None
  */
void HAL_PWREx_EnableUSBVoltageDetector(void)
{
  /* Enable the USB voltage detector */
  SET_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 8002f1c:	4a02      	ldr	r2, [pc, #8]	; (8002f28 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8002f1e:	68d3      	ldr	r3, [r2, #12]
 8002f20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f24:	60d3      	str	r3, [r2, #12]
}
 8002f26:	4770      	bx	lr
 8002f28:	58024800 	.word	0x58024800

08002f2c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f2c:	2800      	cmp	r0, #0
 8002f2e:	f000 82cb 	beq.w	80034c8 <HAL_RCC_OscConfig+0x59c>
{
 8002f32:	b538      	push	{r3, r4, r5, lr}
 8002f34:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f36:	6803      	ldr	r3, [r0, #0]
 8002f38:	f013 0f01 	tst.w	r3, #1
 8002f3c:	d025      	beq.n	8002f8a <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f3e:	4aa9      	ldr	r2, [pc, #676]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 8002f40:	6913      	ldr	r3, [r2, #16]
 8002f42:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f46:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002f48:	2b10      	cmp	r3, #16
 8002f4a:	d015      	beq.n	8002f78 <HAL_RCC_OscConfig+0x4c>
 8002f4c:	2b18      	cmp	r3, #24
 8002f4e:	d00f      	beq.n	8002f70 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f50:	6863      	ldr	r3, [r4, #4]
 8002f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f56:	d03f      	beq.n	8002fd8 <HAL_RCC_OscConfig+0xac>
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d153      	bne.n	8003004 <HAL_RCC_OscConfig+0xd8>
 8002f5c:	4ba1      	ldr	r3, [pc, #644]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	e038      	b.n	8002fe2 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002f70:	f002 0203 	and.w	r2, r2, #3
 8002f74:	2a02      	cmp	r2, #2
 8002f76:	d1eb      	bne.n	8002f50 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f78:	4b9a      	ldr	r3, [pc, #616]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002f80:	d003      	beq.n	8002f8a <HAL_RCC_OscConfig+0x5e>
 8002f82:	6863      	ldr	r3, [r4, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 82a1 	beq.w	80034cc <HAL_RCC_OscConfig+0x5a0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8a:	6823      	ldr	r3, [r4, #0]
 8002f8c:	f013 0f02 	tst.w	r3, #2
 8002f90:	f000 808e 	beq.w	80030b0 <HAL_RCC_OscConfig+0x184>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f94:	4a93      	ldr	r2, [pc, #588]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 8002f96:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f98:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002f9a:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8002f9e:	d05a      	beq.n	8003056 <HAL_RCC_OscConfig+0x12a>
 8002fa0:	2b18      	cmp	r3, #24
 8002fa2:	d055      	beq.n	8003050 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fa4:	68e3      	ldr	r3, [r4, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 80c8 	beq.w	800313c <HAL_RCC_OscConfig+0x210>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002fac:	498d      	ldr	r1, [pc, #564]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 8002fae:	680a      	ldr	r2, [r1, #0]
 8002fb0:	f022 0219 	bic.w	r2, r2, #25
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb8:	f7fd fb6e 	bl	8000698 <HAL_GetTick>
 8002fbc:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fbe:	4b89      	ldr	r3, [pc, #548]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f013 0f04 	tst.w	r3, #4
 8002fc6:	f040 80a1 	bne.w	800310c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fca:	f7fd fb65 	bl	8000698 <HAL_GetTick>
 8002fce:	1b40      	subs	r0, r0, r5
 8002fd0:	2802      	cmp	r0, #2
 8002fd2:	d9f4      	bls.n	8002fbe <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8002fd4:	2003      	movs	r0, #3
 8002fd6:	e27e      	b.n	80034d6 <HAL_RCC_OscConfig+0x5aa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd8:	4a82      	ldr	r2, [pc, #520]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 8002fda:	6813      	ldr	r3, [r2, #0]
 8002fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe0:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fe2:	6863      	ldr	r3, [r4, #4]
 8002fe4:	b32b      	cbz	r3, 8003032 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8002fe6:	f7fd fb57 	bl	8000698 <HAL_GetTick>
 8002fea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fec:	4b7d      	ldr	r3, [pc, #500]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002ff4:	d1c9      	bne.n	8002f8a <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ff6:	f7fd fb4f 	bl	8000698 <HAL_GetTick>
 8002ffa:	1b40      	subs	r0, r0, r5
 8002ffc:	2864      	cmp	r0, #100	; 0x64
 8002ffe:	d9f5      	bls.n	8002fec <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8003000:	2003      	movs	r0, #3
 8003002:	e268      	b.n	80034d6 <HAL_RCC_OscConfig+0x5aa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003008:	d009      	beq.n	800301e <HAL_RCC_OscConfig+0xf2>
 800300a:	4b76      	ldr	r3, [pc, #472]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	e7e1      	b.n	8002fe2 <HAL_RCC_OscConfig+0xb6>
 800301e:	4b71      	ldr	r3, [pc, #452]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	e7d7      	b.n	8002fe2 <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8003032:	f7fd fb31 	bl	8000698 <HAL_GetTick>
 8003036:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003038:	4b6a      	ldr	r3, [pc, #424]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003040:	d0a3      	beq.n	8002f8a <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003042:	f7fd fb29 	bl	8000698 <HAL_GetTick>
 8003046:	1b40      	subs	r0, r0, r5
 8003048:	2864      	cmp	r0, #100	; 0x64
 800304a:	d9f5      	bls.n	8003038 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 800304c:	2003      	movs	r0, #3
 800304e:	e242      	b.n	80034d6 <HAL_RCC_OscConfig+0x5aa>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003050:	f012 0f03 	tst.w	r2, #3
 8003054:	d1a6      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x78>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003056:	4b63      	ldr	r3, [pc, #396]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f013 0f04 	tst.w	r3, #4
 800305e:	d003      	beq.n	8003068 <HAL_RCC_OscConfig+0x13c>
 8003060:	68e3      	ldr	r3, [r4, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 8234 	beq.w	80034d0 <HAL_RCC_OscConfig+0x5a4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003068:	4a5e      	ldr	r2, [pc, #376]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 800306a:	6813      	ldr	r3, [r2, #0]
 800306c:	f023 0319 	bic.w	r3, r3, #25
 8003070:	68e1      	ldr	r1, [r4, #12]
 8003072:	430b      	orrs	r3, r1
 8003074:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003076:	f7fd fb0f 	bl	8000698 <HAL_GetTick>
 800307a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800307c:	4b59      	ldr	r3, [pc, #356]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f013 0f04 	tst.w	r3, #4
 8003084:	d106      	bne.n	8003094 <HAL_RCC_OscConfig+0x168>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003086:	f7fd fb07 	bl	8000698 <HAL_GetTick>
 800308a:	1b40      	subs	r0, r0, r5
 800308c:	2802      	cmp	r0, #2
 800308e:	d9f5      	bls.n	800307c <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8003090:	2003      	movs	r0, #3
 8003092:	e220      	b.n	80034d6 <HAL_RCC_OscConfig+0x5aa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003094:	f7fd fb1a 	bl	80006cc <HAL_GetREVID>
 8003098:	f241 0303 	movw	r3, #4099	; 0x1003
 800309c:	4298      	cmp	r0, r3
 800309e:	d82c      	bhi.n	80030fa <HAL_RCC_OscConfig+0x1ce>
 80030a0:	4a50      	ldr	r2, [pc, #320]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 80030a2:	6853      	ldr	r3, [r2, #4]
 80030a4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80030a8:	6921      	ldr	r1, [r4, #16]
 80030aa:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80030ae:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	f013 0f10 	tst.w	r3, #16
 80030b6:	d071      	beq.n	800319c <HAL_RCC_OscConfig+0x270>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030b8:	4a4a      	ldr	r2, [pc, #296]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 80030ba:	6913      	ldr	r3, [r2, #16]
 80030bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030c0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d052      	beq.n	800316c <HAL_RCC_OscConfig+0x240>
 80030c6:	2b18      	cmp	r3, #24
 80030c8:	d04c      	beq.n	8003164 <HAL_RCC_OscConfig+0x238>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80030ca:	69e3      	ldr	r3, [r4, #28]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 80a3 	beq.w	8003218 <HAL_RCC_OscConfig+0x2ec>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80030d2:	4a44      	ldr	r2, [pc, #272]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 80030d4:	6813      	ldr	r3, [r2, #0]
 80030d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030dc:	f7fd fadc 	bl	8000698 <HAL_GetTick>
 80030e0:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030e2:	4b40      	ldr	r3, [pc, #256]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80030ea:	d17d      	bne.n	80031e8 <HAL_RCC_OscConfig+0x2bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80030ec:	f7fd fad4 	bl	8000698 <HAL_GetTick>
 80030f0:	1b40      	subs	r0, r0, r5
 80030f2:	2802      	cmp	r0, #2
 80030f4:	d9f5      	bls.n	80030e2 <HAL_RCC_OscConfig+0x1b6>
          {
            return HAL_TIMEOUT;
 80030f6:	2003      	movs	r0, #3
 80030f8:	e1ed      	b.n	80034d6 <HAL_RCC_OscConfig+0x5aa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fa:	4a3a      	ldr	r2, [pc, #232]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 80030fc:	6853      	ldr	r3, [r2, #4]
 80030fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003102:	6921      	ldr	r1, [r4, #16]
 8003104:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003108:	6053      	str	r3, [r2, #4]
 800310a:	e7d1      	b.n	80030b0 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310c:	f7fd fade 	bl	80006cc <HAL_GetREVID>
 8003110:	f241 0303 	movw	r3, #4099	; 0x1003
 8003114:	4298      	cmp	r0, r3
 8003116:	d808      	bhi.n	800312a <HAL_RCC_OscConfig+0x1fe>
 8003118:	4a32      	ldr	r2, [pc, #200]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 800311a:	6853      	ldr	r3, [r2, #4]
 800311c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003120:	6921      	ldr	r1, [r4, #16]
 8003122:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8003126:	6053      	str	r3, [r2, #4]
 8003128:	e7c2      	b.n	80030b0 <HAL_RCC_OscConfig+0x184>
 800312a:	4a2e      	ldr	r2, [pc, #184]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 800312c:	6853      	ldr	r3, [r2, #4]
 800312e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003132:	6921      	ldr	r1, [r4, #16]
 8003134:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003138:	6053      	str	r3, [r2, #4]
 800313a:	e7b9      	b.n	80030b0 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_DISABLE();
 800313c:	4a29      	ldr	r2, [pc, #164]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 800313e:	6813      	ldr	r3, [r2, #0]
 8003140:	f023 0301 	bic.w	r3, r3, #1
 8003144:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003146:	f7fd faa7 	bl	8000698 <HAL_GetTick>
 800314a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800314c:	4b25      	ldr	r3, [pc, #148]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f013 0f04 	tst.w	r3, #4
 8003154:	d0ac      	beq.n	80030b0 <HAL_RCC_OscConfig+0x184>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003156:	f7fd fa9f 	bl	8000698 <HAL_GetTick>
 800315a:	1b40      	subs	r0, r0, r5
 800315c:	2802      	cmp	r0, #2
 800315e:	d9f5      	bls.n	800314c <HAL_RCC_OscConfig+0x220>
            return HAL_TIMEOUT;
 8003160:	2003      	movs	r0, #3
 8003162:	e1b8      	b.n	80034d6 <HAL_RCC_OscConfig+0x5aa>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003164:	f002 0203 	and.w	r2, r2, #3
 8003168:	2a01      	cmp	r2, #1
 800316a:	d1ae      	bne.n	80030ca <HAL_RCC_OscConfig+0x19e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800316c:	4b1d      	ldr	r3, [pc, #116]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003174:	d004      	beq.n	8003180 <HAL_RCC_OscConfig+0x254>
 8003176:	69e3      	ldr	r3, [r4, #28]
 8003178:	2b80      	cmp	r3, #128	; 0x80
 800317a:	d001      	beq.n	8003180 <HAL_RCC_OscConfig+0x254>
        return HAL_ERROR;
 800317c:	2001      	movs	r0, #1
 800317e:	e1aa      	b.n	80034d6 <HAL_RCC_OscConfig+0x5aa>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003180:	f7fd faa4 	bl	80006cc <HAL_GetREVID>
 8003184:	f241 0303 	movw	r3, #4099	; 0x1003
 8003188:	4298      	cmp	r0, r3
 800318a:	d822      	bhi.n	80031d2 <HAL_RCC_OscConfig+0x2a6>
 800318c:	4a15      	ldr	r2, [pc, #84]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 800318e:	6853      	ldr	r3, [r2, #4]
 8003190:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003194:	6a21      	ldr	r1, [r4, #32]
 8003196:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 800319a:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800319c:	6823      	ldr	r3, [r4, #0]
 800319e:	f013 0f08 	tst.w	r3, #8
 80031a2:	d061      	beq.n	8003268 <HAL_RCC_OscConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031a4:	6963      	ldr	r3, [r4, #20]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d04a      	beq.n	8003240 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031aa:	4a0e      	ldr	r2, [pc, #56]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 80031ac:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b4:	f7fd fa70 	bl	8000698 <HAL_GetTick>
 80031b8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031ba:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 80031bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031be:	f013 0f02 	tst.w	r3, #2
 80031c2:	d151      	bne.n	8003268 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031c4:	f7fd fa68 	bl	8000698 <HAL_GetTick>
 80031c8:	1b40      	subs	r0, r0, r5
 80031ca:	2802      	cmp	r0, #2
 80031cc:	d9f5      	bls.n	80031ba <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80031ce:	2003      	movs	r0, #3
 80031d0:	e181      	b.n	80034d6 <HAL_RCC_OscConfig+0x5aa>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031d2:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <HAL_RCC_OscConfig+0x2b8>)
 80031d4:	68d3      	ldr	r3, [r2, #12]
 80031d6:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80031da:	6a21      	ldr	r1, [r4, #32]
 80031dc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80031e0:	60d3      	str	r3, [r2, #12]
 80031e2:	e7db      	b.n	800319c <HAL_RCC_OscConfig+0x270>
 80031e4:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031e8:	f7fd fa70 	bl	80006cc <HAL_GetREVID>
 80031ec:	f241 0303 	movw	r3, #4099	; 0x1003
 80031f0:	4298      	cmp	r0, r3
 80031f2:	d808      	bhi.n	8003206 <HAL_RCC_OscConfig+0x2da>
 80031f4:	4aae      	ldr	r2, [pc, #696]	; (80034b0 <HAL_RCC_OscConfig+0x584>)
 80031f6:	6853      	ldr	r3, [r2, #4]
 80031f8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80031fc:	6a21      	ldr	r1, [r4, #32]
 80031fe:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8003202:	6053      	str	r3, [r2, #4]
 8003204:	e7ca      	b.n	800319c <HAL_RCC_OscConfig+0x270>
 8003206:	4aaa      	ldr	r2, [pc, #680]	; (80034b0 <HAL_RCC_OscConfig+0x584>)
 8003208:	68d3      	ldr	r3, [r2, #12]
 800320a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800320e:	6a21      	ldr	r1, [r4, #32]
 8003210:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003214:	60d3      	str	r3, [r2, #12]
 8003216:	e7c1      	b.n	800319c <HAL_RCC_OscConfig+0x270>
        __HAL_RCC_CSI_DISABLE();
 8003218:	4aa5      	ldr	r2, [pc, #660]	; (80034b0 <HAL_RCC_OscConfig+0x584>)
 800321a:	6813      	ldr	r3, [r2, #0]
 800321c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003220:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003222:	f7fd fa39 	bl	8000698 <HAL_GetTick>
 8003226:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003228:	4ba1      	ldr	r3, [pc, #644]	; (80034b0 <HAL_RCC_OscConfig+0x584>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003230:	d0b4      	beq.n	800319c <HAL_RCC_OscConfig+0x270>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003232:	f7fd fa31 	bl	8000698 <HAL_GetTick>
 8003236:	1b40      	subs	r0, r0, r5
 8003238:	2802      	cmp	r0, #2
 800323a:	d9f5      	bls.n	8003228 <HAL_RCC_OscConfig+0x2fc>
            return HAL_TIMEOUT;
 800323c:	2003      	movs	r0, #3
 800323e:	e14a      	b.n	80034d6 <HAL_RCC_OscConfig+0x5aa>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003240:	4a9b      	ldr	r2, [pc, #620]	; (80034b0 <HAL_RCC_OscConfig+0x584>)
 8003242:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8003244:	f023 0301 	bic.w	r3, r3, #1
 8003248:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324a:	f7fd fa25 	bl	8000698 <HAL_GetTick>
 800324e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003250:	4b97      	ldr	r3, [pc, #604]	; (80034b0 <HAL_RCC_OscConfig+0x584>)
 8003252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003254:	f013 0f02 	tst.w	r3, #2
 8003258:	d006      	beq.n	8003268 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800325a:	f7fd fa1d 	bl	8000698 <HAL_GetTick>
 800325e:	1b40      	subs	r0, r0, r5
 8003260:	2802      	cmp	r0, #2
 8003262:	d9f5      	bls.n	8003250 <HAL_RCC_OscConfig+0x324>
        {
          return HAL_TIMEOUT;
 8003264:	2003      	movs	r0, #3
 8003266:	e136      	b.n	80034d6 <HAL_RCC_OscConfig+0x5aa>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	f013 0f20 	tst.w	r3, #32
 800326e:	d029      	beq.n	80032c4 <HAL_RCC_OscConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003270:	69a3      	ldr	r3, [r4, #24]
 8003272:	b19b      	cbz	r3, 800329c <HAL_RCC_OscConfig+0x370>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003274:	4a8e      	ldr	r2, [pc, #568]	; (80034b0 <HAL_RCC_OscConfig+0x584>)
 8003276:	6813      	ldr	r3, [r2, #0]
 8003278:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800327c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800327e:	f7fd fa0b 	bl	8000698 <HAL_GetTick>
 8003282:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003284:	4b8a      	ldr	r3, [pc, #552]	; (80034b0 <HAL_RCC_OscConfig+0x584>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800328c:	d11a      	bne.n	80032c4 <HAL_RCC_OscConfig+0x398>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800328e:	f7fd fa03 	bl	8000698 <HAL_GetTick>
 8003292:	1b40      	subs	r0, r0, r5
 8003294:	2802      	cmp	r0, #2
 8003296:	d9f5      	bls.n	8003284 <HAL_RCC_OscConfig+0x358>
        {
          return HAL_TIMEOUT;
 8003298:	2003      	movs	r0, #3
 800329a:	e11c      	b.n	80034d6 <HAL_RCC_OscConfig+0x5aa>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800329c:	4a84      	ldr	r2, [pc, #528]	; (80034b0 <HAL_RCC_OscConfig+0x584>)
 800329e:	6813      	ldr	r3, [r2, #0]
 80032a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032a6:	f7fd f9f7 	bl	8000698 <HAL_GetTick>
 80032aa:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032ac:	4b80      	ldr	r3, [pc, #512]	; (80034b0 <HAL_RCC_OscConfig+0x584>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80032b4:	d006      	beq.n	80032c4 <HAL_RCC_OscConfig+0x398>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80032b6:	f7fd f9ef 	bl	8000698 <HAL_GetTick>
 80032ba:	1b40      	subs	r0, r0, r5
 80032bc:	2802      	cmp	r0, #2
 80032be:	d9f5      	bls.n	80032ac <HAL_RCC_OscConfig+0x380>
        {
          return HAL_TIMEOUT;
 80032c0:	2003      	movs	r0, #3
 80032c2:	e108      	b.n	80034d6 <HAL_RCC_OscConfig+0x5aa>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032c4:	6823      	ldr	r3, [r4, #0]
 80032c6:	f013 0f04 	tst.w	r3, #4
 80032ca:	d121      	bne.n	8003310 <HAL_RCC_OscConfig+0x3e4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 8100 	beq.w	80034d4 <HAL_RCC_OscConfig+0x5a8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80032d4:	4a76      	ldr	r2, [pc, #472]	; (80034b0 <HAL_RCC_OscConfig+0x584>)
 80032d6:	6912      	ldr	r2, [r2, #16]
 80032d8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80032dc:	2a18      	cmp	r2, #24
 80032de:	f000 80fb 	beq.w	80034d8 <HAL_RCC_OscConfig+0x5ac>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d075      	beq.n	80033d2 <HAL_RCC_OscConfig+0x4a6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e6:	4a72      	ldr	r2, [pc, #456]	; (80034b0 <HAL_RCC_OscConfig+0x584>)
 80032e8:	6813      	ldr	r3, [r2, #0]
 80032ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f0:	f7fd f9d2 	bl	8000698 <HAL_GetTick>
 80032f4:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032f6:	4b6e      	ldr	r3, [pc, #440]	; (80034b0 <HAL_RCC_OscConfig+0x584>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80032fe:	f000 80e1 	beq.w	80034c4 <HAL_RCC_OscConfig+0x598>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003302:	f7fd f9c9 	bl	8000698 <HAL_GetTick>
 8003306:	1b00      	subs	r0, r0, r4
 8003308:	2802      	cmp	r0, #2
 800330a:	d9f4      	bls.n	80032f6 <HAL_RCC_OscConfig+0x3ca>
          {
            return HAL_TIMEOUT;
 800330c:	2003      	movs	r0, #3
 800330e:	e0e2      	b.n	80034d6 <HAL_RCC_OscConfig+0x5aa>
    PWR->CR1 |= PWR_CR1_DBP;
 8003310:	4a68      	ldr	r2, [pc, #416]	; (80034b4 <HAL_RCC_OscConfig+0x588>)
 8003312:	6813      	ldr	r3, [r2, #0]
 8003314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003318:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800331a:	f7fd f9bd 	bl	8000698 <HAL_GetTick>
 800331e:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003320:	4b64      	ldr	r3, [pc, #400]	; (80034b4 <HAL_RCC_OscConfig+0x588>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003328:	d106      	bne.n	8003338 <HAL_RCC_OscConfig+0x40c>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800332a:	f7fd f9b5 	bl	8000698 <HAL_GetTick>
 800332e:	1b40      	subs	r0, r0, r5
 8003330:	2864      	cmp	r0, #100	; 0x64
 8003332:	d9f5      	bls.n	8003320 <HAL_RCC_OscConfig+0x3f4>
        return HAL_TIMEOUT;
 8003334:	2003      	movs	r0, #3
 8003336:	e0ce      	b.n	80034d6 <HAL_RCC_OscConfig+0x5aa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003338:	68a3      	ldr	r3, [r4, #8]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d00a      	beq.n	8003354 <HAL_RCC_OscConfig+0x428>
 800333e:	bb0b      	cbnz	r3, 8003384 <HAL_RCC_OscConfig+0x458>
 8003340:	4b5b      	ldr	r3, [pc, #364]	; (80034b0 <HAL_RCC_OscConfig+0x584>)
 8003342:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	671a      	str	r2, [r3, #112]	; 0x70
 800334a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800334c:	f022 0204 	bic.w	r2, r2, #4
 8003350:	671a      	str	r2, [r3, #112]	; 0x70
 8003352:	e004      	b.n	800335e <HAL_RCC_OscConfig+0x432>
 8003354:	4a56      	ldr	r2, [pc, #344]	; (80034b0 <HAL_RCC_OscConfig+0x584>)
 8003356:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800335e:	68a3      	ldr	r3, [r4, #8]
 8003360:	b333      	cbz	r3, 80033b0 <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 8003362:	f7fd f999 	bl	8000698 <HAL_GetTick>
 8003366:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003368:	4b51      	ldr	r3, [pc, #324]	; (80034b0 <HAL_RCC_OscConfig+0x584>)
 800336a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336c:	f013 0f02 	tst.w	r3, #2
 8003370:	d1ac      	bne.n	80032cc <HAL_RCC_OscConfig+0x3a0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003372:	f7fd f991 	bl	8000698 <HAL_GetTick>
 8003376:	1b40      	subs	r0, r0, r5
 8003378:	f241 3388 	movw	r3, #5000	; 0x1388
 800337c:	4298      	cmp	r0, r3
 800337e:	d9f3      	bls.n	8003368 <HAL_RCC_OscConfig+0x43c>
          return HAL_TIMEOUT;
 8003380:	2003      	movs	r0, #3
 8003382:	e0a8      	b.n	80034d6 <HAL_RCC_OscConfig+0x5aa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003384:	2b05      	cmp	r3, #5
 8003386:	d009      	beq.n	800339c <HAL_RCC_OscConfig+0x470>
 8003388:	4b49      	ldr	r3, [pc, #292]	; (80034b0 <HAL_RCC_OscConfig+0x584>)
 800338a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800338c:	f022 0201 	bic.w	r2, r2, #1
 8003390:	671a      	str	r2, [r3, #112]	; 0x70
 8003392:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003394:	f022 0204 	bic.w	r2, r2, #4
 8003398:	671a      	str	r2, [r3, #112]	; 0x70
 800339a:	e7e0      	b.n	800335e <HAL_RCC_OscConfig+0x432>
 800339c:	4b44      	ldr	r3, [pc, #272]	; (80034b0 <HAL_RCC_OscConfig+0x584>)
 800339e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033a0:	f042 0204 	orr.w	r2, r2, #4
 80033a4:	671a      	str	r2, [r3, #112]	; 0x70
 80033a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033a8:	f042 0201 	orr.w	r2, r2, #1
 80033ac:	671a      	str	r2, [r3, #112]	; 0x70
 80033ae:	e7d6      	b.n	800335e <HAL_RCC_OscConfig+0x432>
      tickstart = HAL_GetTick();
 80033b0:	f7fd f972 	bl	8000698 <HAL_GetTick>
 80033b4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033b6:	4b3e      	ldr	r3, [pc, #248]	; (80034b0 <HAL_RCC_OscConfig+0x584>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ba:	f013 0f02 	tst.w	r3, #2
 80033be:	d085      	beq.n	80032cc <HAL_RCC_OscConfig+0x3a0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c0:	f7fd f96a 	bl	8000698 <HAL_GetTick>
 80033c4:	1b40      	subs	r0, r0, r5
 80033c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80033ca:	4298      	cmp	r0, r3
 80033cc:	d9f3      	bls.n	80033b6 <HAL_RCC_OscConfig+0x48a>
          return HAL_TIMEOUT;
 80033ce:	2003      	movs	r0, #3
 80033d0:	e081      	b.n	80034d6 <HAL_RCC_OscConfig+0x5aa>
        __HAL_RCC_PLL_DISABLE();
 80033d2:	4a37      	ldr	r2, [pc, #220]	; (80034b0 <HAL_RCC_OscConfig+0x584>)
 80033d4:	6813      	ldr	r3, [r2, #0]
 80033d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033da:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80033dc:	f7fd f95c 	bl	8000698 <HAL_GetTick>
 80033e0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033e2:	4b33      	ldr	r3, [pc, #204]	; (80034b0 <HAL_RCC_OscConfig+0x584>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80033ea:	d006      	beq.n	80033fa <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ec:	f7fd f954 	bl	8000698 <HAL_GetTick>
 80033f0:	1b40      	subs	r0, r0, r5
 80033f2:	2802      	cmp	r0, #2
 80033f4:	d9f5      	bls.n	80033e2 <HAL_RCC_OscConfig+0x4b6>
            return HAL_TIMEOUT;
 80033f6:	2003      	movs	r0, #3
 80033f8:	e06d      	b.n	80034d6 <HAL_RCC_OscConfig+0x5aa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033fa:	4b2d      	ldr	r3, [pc, #180]	; (80034b0 <HAL_RCC_OscConfig+0x584>)
 80033fc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80033fe:	4a2e      	ldr	r2, [pc, #184]	; (80034b8 <HAL_RCC_OscConfig+0x58c>)
 8003400:	400a      	ands	r2, r1
 8003402:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003404:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003406:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800340a:	430a      	orrs	r2, r1
 800340c:	629a      	str	r2, [r3, #40]	; 0x28
 800340e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003410:	3a01      	subs	r2, #1
 8003412:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003416:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003418:	3901      	subs	r1, #1
 800341a:	0249      	lsls	r1, r1, #9
 800341c:	b289      	uxth	r1, r1
 800341e:	430a      	orrs	r2, r1
 8003420:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003422:	3901      	subs	r1, #1
 8003424:	0409      	lsls	r1, r1, #16
 8003426:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800342a:	430a      	orrs	r2, r1
 800342c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800342e:	3901      	subs	r1, #1
 8003430:	0609      	lsls	r1, r1, #24
 8003432:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8003436:	430a      	orrs	r2, r1
 8003438:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800343a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343c:	f022 0201 	bic.w	r2, r2, #1
 8003440:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003442:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003444:	4a1d      	ldr	r2, [pc, #116]	; (80034bc <HAL_RCC_OscConfig+0x590>)
 8003446:	400a      	ands	r2, r1
 8003448:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800344a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800344e:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003452:	f022 020c 	bic.w	r2, r2, #12
 8003456:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003458:	430a      	orrs	r2, r1
 800345a:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800345c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800345e:	f022 0202 	bic.w	r2, r2, #2
 8003462:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003464:	430a      	orrs	r2, r1
 8003466:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800346a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800346e:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003472:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003476:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800347e:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8003480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800348e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003490:	f7fd f902 	bl	8000698 <HAL_GetTick>
 8003494:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003496:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <HAL_RCC_OscConfig+0x584>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800349e:	d10f      	bne.n	80034c0 <HAL_RCC_OscConfig+0x594>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a0:	f7fd f8fa 	bl	8000698 <HAL_GetTick>
 80034a4:	1b00      	subs	r0, r0, r4
 80034a6:	2802      	cmp	r0, #2
 80034a8:	d9f5      	bls.n	8003496 <HAL_RCC_OscConfig+0x56a>
            return HAL_TIMEOUT;
 80034aa:	2003      	movs	r0, #3
 80034ac:	e013      	b.n	80034d6 <HAL_RCC_OscConfig+0x5aa>
 80034ae:	bf00      	nop
 80034b0:	58024400 	.word	0x58024400
 80034b4:	58024800 	.word	0x58024800
 80034b8:	fffffc0c 	.word	0xfffffc0c
 80034bc:	ffff0007 	.word	0xffff0007
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80034c0:	2000      	movs	r0, #0
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x5aa>
 80034c4:	2000      	movs	r0, #0
 80034c6:	e006      	b.n	80034d6 <HAL_RCC_OscConfig+0x5aa>
    return HAL_ERROR;
 80034c8:	2001      	movs	r0, #1
}
 80034ca:	4770      	bx	lr
        return HAL_ERROR;
 80034cc:	2001      	movs	r0, #1
 80034ce:	e002      	b.n	80034d6 <HAL_RCC_OscConfig+0x5aa>
        return HAL_ERROR;
 80034d0:	2001      	movs	r0, #1
 80034d2:	e000      	b.n	80034d6 <HAL_RCC_OscConfig+0x5aa>
  return HAL_OK;
 80034d4:	2000      	movs	r0, #0
}
 80034d6:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80034d8:	2001      	movs	r0, #1
 80034da:	e7fc      	b.n	80034d6 <HAL_RCC_OscConfig+0x5aa>

080034dc <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034dc:	4b72      	ldr	r3, [pc, #456]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034e4:	2b10      	cmp	r3, #16
 80034e6:	f000 80db 	beq.w	80036a0 <HAL_RCC_GetSysClockFreq+0x1c4>
 80034ea:	2b18      	cmp	r3, #24
 80034ec:	d010      	beq.n	8003510 <HAL_RCC_GetSysClockFreq+0x34>
 80034ee:	b10b      	cbz	r3, 80034f4 <HAL_RCC_GetSysClockFreq+0x18>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80034f0:	486e      	ldr	r0, [pc, #440]	; (80036ac <HAL_RCC_GetSysClockFreq+0x1d0>)
 80034f2:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034f4:	4b6c      	ldr	r3, [pc, #432]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f013 0f20 	tst.w	r3, #32
 80034fc:	f000 80d2 	beq.w	80036a4 <HAL_RCC_GetSysClockFreq+0x1c8>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003500:	4b69      	ldr	r3, [pc, #420]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003502:	6818      	ldr	r0, [r3, #0]
 8003504:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8003508:	4b69      	ldr	r3, [pc, #420]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800350a:	fa23 f000 	lsr.w	r0, r3, r0
 800350e:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003510:	4a65      	ldr	r2, [pc, #404]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003512:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003514:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003518:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800351a:	f3c0 1005 	ubfx	r0, r0, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800351e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003520:	f003 0301 	and.w	r3, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003524:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003526:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 800352a:	fb03 f302 	mul.w	r3, r3, r2
 800352e:	ee07 3a90 	vmov	s15, r3
 8003532:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 8003536:	2800      	cmp	r0, #0
 8003538:	f000 80b5 	beq.w	80036a6 <HAL_RCC_GetSysClockFreq+0x1ca>
    {
      switch (pllsource)
 800353c:	2901      	cmp	r1, #1
 800353e:	d066      	beq.n	800360e <HAL_RCC_GetSysClockFreq+0x132>
 8003540:	b1f9      	cbz	r1, 8003582 <HAL_RCC_GetSysClockFreq+0xa6>
 8003542:	2902      	cmp	r1, #2
 8003544:	f000 808f 	beq.w	8003666 <HAL_RCC_GetSysClockFreq+0x18a>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003548:	ee07 0a10 	vmov	s14, r0
 800354c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003550:	ed9f 6a58 	vldr	s12, [pc, #352]	; 80036b4 <HAL_RCC_GetSysClockFreq+0x1d8>
 8003554:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003558:	4b53      	ldr	r3, [pc, #332]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x1cc>)
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003560:	ee06 3a90 	vmov	s13, r3
 8003564:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003568:	ed9f 6a53 	vldr	s12, [pc, #332]	; 80036b8 <HAL_RCC_GetSysClockFreq+0x1dc>
 800356c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003570:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003574:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003578:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800357c:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8003580:	e061      	b.n	8003646 <HAL_RCC_GetSysClockFreq+0x16a>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003582:	4b49      	ldr	r3, [pc, #292]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f013 0f20 	tst.w	r3, #32
 800358a:	d023      	beq.n	80035d4 <HAL_RCC_GetSysClockFreq+0xf8>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800358c:	4946      	ldr	r1, [pc, #280]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x1cc>)
 800358e:	680a      	ldr	r2, [r1, #0]
 8003590:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003594:	4b46      	ldr	r3, [pc, #280]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003596:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003598:	ee07 3a10 	vmov	s14, r3
 800359c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80035a0:	ee07 0a10 	vmov	s14, r0
 80035a4:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 80035a8:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80035ac:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80035ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b2:	ee06 3a90 	vmov	s13, r3
 80035b6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80035ba:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 80036b8 <HAL_RCC_GetSysClockFreq+0x1dc>
 80035be:	ee67 7a86 	vmul.f32	s15, s15, s12
 80035c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035d2:	e038      	b.n	8003646 <HAL_RCC_GetSysClockFreq+0x16a>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035d4:	ee07 0a10 	vmov	s14, r0
 80035d8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80035dc:	ed9f 6a37 	vldr	s12, [pc, #220]	; 80036bc <HAL_RCC_GetSysClockFreq+0x1e0>
 80035e0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80035e4:	4b30      	ldr	r3, [pc, #192]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80035e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ec:	ee06 3a90 	vmov	s13, r3
 80035f0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80035f4:	ed9f 6a30 	vldr	s12, [pc, #192]	; 80036b8 <HAL_RCC_GetSysClockFreq+0x1dc>
 80035f8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80035fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003600:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003604:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003608:	ee27 7a27 	vmul.f32	s14, s14, s15
 800360c:	e01b      	b.n	8003646 <HAL_RCC_GetSysClockFreq+0x16a>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800360e:	ee07 0a10 	vmov	s14, r0
 8003612:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003616:	ed9f 6a27 	vldr	s12, [pc, #156]	; 80036b4 <HAL_RCC_GetSysClockFreq+0x1d8>
 800361a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800361e:	4b22      	ldr	r3, [pc, #136]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003626:	ee06 3a90 	vmov	s13, r3
 800362a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800362e:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80036b8 <HAL_RCC_GetSysClockFreq+0x1dc>
 8003632:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800363a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800363e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003642:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003646:	4b18      	ldr	r3, [pc, #96]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800364e:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003650:	ee07 3a90 	vmov	s15, r3
 8003654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003658:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800365c:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8003660:	ee17 0a90 	vmov	r0, s15
 8003664:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003666:	ee07 0a10 	vmov	s14, r0
 800366a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800366e:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80036c0 <HAL_RCC_GetSysClockFreq+0x1e4>
 8003672:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003676:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800367e:	ee06 3a90 	vmov	s13, r3
 8003682:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003686:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 80036b8 <HAL_RCC_GetSysClockFreq+0x1dc>
 800368a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800368e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800369a:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800369e:	e7d2      	b.n	8003646 <HAL_RCC_GetSysClockFreq+0x16a>
    sysclockfreq = HSE_VALUE;
 80036a0:	4808      	ldr	r0, [pc, #32]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x1e8>)
 80036a2:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80036a4:	4802      	ldr	r0, [pc, #8]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x1d4>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80036a6:	4770      	bx	lr
 80036a8:	58024400 	.word	0x58024400
 80036ac:	003d0900 	.word	0x003d0900
 80036b0:	03d09000 	.word	0x03d09000
 80036b4:	4a742400 	.word	0x4a742400
 80036b8:	39000000 	.word	0x39000000
 80036bc:	4c742400 	.word	0x4c742400
 80036c0:	4bbebc20 	.word	0x4bbebc20
 80036c4:	017d7840 	.word	0x017d7840

080036c8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80036c8:	2800      	cmp	r0, #0
 80036ca:	f000 812c 	beq.w	8003926 <HAL_RCC_ClockConfig+0x25e>
 80036ce:	4603      	mov	r3, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036d0:	4a97      	ldr	r2, [pc, #604]	; (8003930 <HAL_RCC_ClockConfig+0x268>)
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	f002 020f 	and.w	r2, r2, #15
 80036d8:	428a      	cmp	r2, r1
 80036da:	d20c      	bcs.n	80036f6 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036dc:	4894      	ldr	r0, [pc, #592]	; (8003930 <HAL_RCC_ClockConfig+0x268>)
 80036de:	6802      	ldr	r2, [r0, #0]
 80036e0:	f022 020f 	bic.w	r2, r2, #15
 80036e4:	430a      	orrs	r2, r1
 80036e6:	6002      	str	r2, [r0, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e8:	6802      	ldr	r2, [r0, #0]
 80036ea:	f002 020f 	and.w	r2, r2, #15
 80036ee:	428a      	cmp	r2, r1
 80036f0:	d001      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x2e>
      return HAL_ERROR;
 80036f2:	2001      	movs	r0, #1
}
 80036f4:	4770      	bx	lr
{
 80036f6:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	f012 0f04 	tst.w	r2, #4
 80036fe:	d00c      	beq.n	800371a <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003700:	6918      	ldr	r0, [r3, #16]
 8003702:	4a8c      	ldr	r2, [pc, #560]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 8003704:	6992      	ldr	r2, [r2, #24]
 8003706:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800370a:	4290      	cmp	r0, r2
 800370c:	d905      	bls.n	800371a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800370e:	4c89      	ldr	r4, [pc, #548]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 8003710:	69a2      	ldr	r2, [r4, #24]
 8003712:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003716:	4310      	orrs	r0, r2
 8003718:	61a0      	str	r0, [r4, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	f012 0f08 	tst.w	r2, #8
 8003720:	d00c      	beq.n	800373c <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003722:	6958      	ldr	r0, [r3, #20]
 8003724:	4a83      	ldr	r2, [pc, #524]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 8003726:	69d2      	ldr	r2, [r2, #28]
 8003728:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800372c:	4290      	cmp	r0, r2
 800372e:	d905      	bls.n	800373c <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003730:	4c80      	ldr	r4, [pc, #512]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 8003732:	69e2      	ldr	r2, [r4, #28]
 8003734:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003738:	4310      	orrs	r0, r2
 800373a:	61e0      	str	r0, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	f012 0f10 	tst.w	r2, #16
 8003742:	d00c      	beq.n	800375e <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003744:	6998      	ldr	r0, [r3, #24]
 8003746:	4a7b      	ldr	r2, [pc, #492]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 8003748:	69d2      	ldr	r2, [r2, #28]
 800374a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800374e:	4290      	cmp	r0, r2
 8003750:	d905      	bls.n	800375e <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003752:	4c78      	ldr	r4, [pc, #480]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 8003754:	69e2      	ldr	r2, [r4, #28]
 8003756:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800375a:	4310      	orrs	r0, r2
 800375c:	61e0      	str	r0, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	f012 0f20 	tst.w	r2, #32
 8003764:	d00c      	beq.n	8003780 <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003766:	69d8      	ldr	r0, [r3, #28]
 8003768:	4a72      	ldr	r2, [pc, #456]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 800376a:	6a12      	ldr	r2, [r2, #32]
 800376c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003770:	4290      	cmp	r0, r2
 8003772:	d905      	bls.n	8003780 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003774:	4c6f      	ldr	r4, [pc, #444]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 8003776:	6a22      	ldr	r2, [r4, #32]
 8003778:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800377c:	4310      	orrs	r0, r2
 800377e:	6220      	str	r0, [r4, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	f012 0f02 	tst.w	r2, #2
 8003786:	d00c      	beq.n	80037a2 <HAL_RCC_ClockConfig+0xda>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003788:	68d8      	ldr	r0, [r3, #12]
 800378a:	4a6a      	ldr	r2, [pc, #424]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 800378c:	6992      	ldr	r2, [r2, #24]
 800378e:	f002 020f 	and.w	r2, r2, #15
 8003792:	4290      	cmp	r0, r2
 8003794:	d905      	bls.n	80037a2 <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003796:	4c67      	ldr	r4, [pc, #412]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 8003798:	69a2      	ldr	r2, [r4, #24]
 800379a:	f022 020f 	bic.w	r2, r2, #15
 800379e:	4310      	orrs	r0, r2
 80037a0:	61a0      	str	r0, [r4, #24]
 80037a2:	461c      	mov	r4, r3
 80037a4:	460d      	mov	r5, r1
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f013 0f01 	tst.w	r3, #1
 80037ac:	d041      	beq.n	8003832 <HAL_RCC_ClockConfig+0x16a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80037ae:	4a61      	ldr	r2, [pc, #388]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 80037b0:	6993      	ldr	r3, [r2, #24]
 80037b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037b6:	68a1      	ldr	r1, [r4, #8]
 80037b8:	430b      	orrs	r3, r1
 80037ba:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037bc:	6863      	ldr	r3, [r4, #4]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d00a      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x110>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	d027      	beq.n	8003816 <HAL_RCC_ClockConfig+0x14e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d02c      	beq.n	8003824 <HAL_RCC_ClockConfig+0x15c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037ca:	4a5a      	ldr	r2, [pc, #360]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	f012 0f04 	tst.w	r2, #4
 80037d2:	d106      	bne.n	80037e2 <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 80037d4:	2001      	movs	r0, #1
 80037d6:	e0a5      	b.n	8003924 <HAL_RCC_ClockConfig+0x25c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037d8:	6812      	ldr	r2, [r2, #0]
 80037da:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80037de:	f000 80a4 	beq.w	800392a <HAL_RCC_ClockConfig+0x262>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037e2:	4954      	ldr	r1, [pc, #336]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 80037e4:	690a      	ldr	r2, [r1, #16]
 80037e6:	f022 0207 	bic.w	r2, r2, #7
 80037ea:	4313      	orrs	r3, r2
 80037ec:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 80037ee:	f7fc ff53 	bl	8000698 <HAL_GetTick>
 80037f2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f4:	4b4f      	ldr	r3, [pc, #316]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037fc:	6862      	ldr	r2, [r4, #4]
 80037fe:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8003802:	d016      	beq.n	8003832 <HAL_RCC_ClockConfig+0x16a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003804:	f7fc ff48 	bl	8000698 <HAL_GetTick>
 8003808:	1b80      	subs	r0, r0, r6
 800380a:	f241 3388 	movw	r3, #5000	; 0x1388
 800380e:	4298      	cmp	r0, r3
 8003810:	d9f0      	bls.n	80037f4 <HAL_RCC_ClockConfig+0x12c>
            return HAL_TIMEOUT;
 8003812:	2003      	movs	r0, #3
 8003814:	e086      	b.n	8003924 <HAL_RCC_ClockConfig+0x25c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003816:	4a47      	ldr	r2, [pc, #284]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 8003818:	6812      	ldr	r2, [r2, #0]
 800381a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800381e:	d1e0      	bne.n	80037e2 <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 8003820:	2001      	movs	r0, #1
 8003822:	e07f      	b.n	8003924 <HAL_RCC_ClockConfig+0x25c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003824:	4a43      	ldr	r2, [pc, #268]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	f412 7f80 	tst.w	r2, #256	; 0x100
 800382c:	d1d9      	bne.n	80037e2 <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 800382e:	2001      	movs	r0, #1
 8003830:	e078      	b.n	8003924 <HAL_RCC_ClockConfig+0x25c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	f013 0f02 	tst.w	r3, #2
 8003838:	d00c      	beq.n	8003854 <HAL_RCC_ClockConfig+0x18c>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800383a:	68e2      	ldr	r2, [r4, #12]
 800383c:	4b3d      	ldr	r3, [pc, #244]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	f003 030f 	and.w	r3, r3, #15
 8003844:	429a      	cmp	r2, r3
 8003846:	d205      	bcs.n	8003854 <HAL_RCC_ClockConfig+0x18c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003848:	493a      	ldr	r1, [pc, #232]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 800384a:	698b      	ldr	r3, [r1, #24]
 800384c:	f023 030f 	bic.w	r3, r3, #15
 8003850:	431a      	orrs	r2, r3
 8003852:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003854:	4b36      	ldr	r3, [pc, #216]	; (8003930 <HAL_RCC_ClockConfig+0x268>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	42ab      	cmp	r3, r5
 800385e:	d90c      	bls.n	800387a <HAL_RCC_ClockConfig+0x1b2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003860:	4a33      	ldr	r2, [pc, #204]	; (8003930 <HAL_RCC_ClockConfig+0x268>)
 8003862:	6813      	ldr	r3, [r2, #0]
 8003864:	f023 030f 	bic.w	r3, r3, #15
 8003868:	432b      	orrs	r3, r5
 800386a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800386c:	6813      	ldr	r3, [r2, #0]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	42ab      	cmp	r3, r5
 8003874:	d001      	beq.n	800387a <HAL_RCC_ClockConfig+0x1b2>
      return HAL_ERROR;
 8003876:	2001      	movs	r0, #1
 8003878:	e054      	b.n	8003924 <HAL_RCC_ClockConfig+0x25c>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800387a:	6823      	ldr	r3, [r4, #0]
 800387c:	f013 0f04 	tst.w	r3, #4
 8003880:	d00c      	beq.n	800389c <HAL_RCC_ClockConfig+0x1d4>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003882:	6922      	ldr	r2, [r4, #16]
 8003884:	4b2b      	ldr	r3, [pc, #172]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800388c:	429a      	cmp	r2, r3
 800388e:	d205      	bcs.n	800389c <HAL_RCC_ClockConfig+0x1d4>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003890:	4928      	ldr	r1, [pc, #160]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 8003892:	698b      	ldr	r3, [r1, #24]
 8003894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003898:	431a      	orrs	r2, r3
 800389a:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800389c:	6823      	ldr	r3, [r4, #0]
 800389e:	f013 0f08 	tst.w	r3, #8
 80038a2:	d00c      	beq.n	80038be <HAL_RCC_ClockConfig+0x1f6>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80038a4:	6962      	ldr	r2, [r4, #20]
 80038a6:	4b23      	ldr	r3, [pc, #140]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d205      	bcs.n	80038be <HAL_RCC_ClockConfig+0x1f6>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038b2:	4920      	ldr	r1, [pc, #128]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 80038b4:	69cb      	ldr	r3, [r1, #28]
 80038b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ba:	431a      	orrs	r2, r3
 80038bc:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	f013 0f10 	tst.w	r3, #16
 80038c4:	d00c      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x218>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80038c6:	69a2      	ldr	r2, [r4, #24]
 80038c8:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d205      	bcs.n	80038e0 <HAL_RCC_ClockConfig+0x218>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038d4:	4917      	ldr	r1, [pc, #92]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 80038d6:	69cb      	ldr	r3, [r1, #28]
 80038d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80038dc:	431a      	orrs	r2, r3
 80038de:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80038e0:	6823      	ldr	r3, [r4, #0]
 80038e2:	f013 0f20 	tst.w	r3, #32
 80038e6:	d00c      	beq.n	8003902 <HAL_RCC_ClockConfig+0x23a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80038e8:	69e2      	ldr	r2, [r4, #28]
 80038ea:	4b12      	ldr	r3, [pc, #72]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d205      	bcs.n	8003902 <HAL_RCC_ClockConfig+0x23a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80038f6:	490f      	ldr	r1, [pc, #60]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 80038f8:	6a0b      	ldr	r3, [r1, #32]
 80038fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fe:	431a      	orrs	r2, r3
 8003900:	620a      	str	r2, [r1, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003902:	f7ff fdeb 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 8003906:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800390e:	4a0a      	ldr	r2, [pc, #40]	; (8003938 <HAL_RCC_ClockConfig+0x270>)
 8003910:	5cd3      	ldrb	r3, [r2, r3]
 8003912:	f003 031f 	and.w	r3, r3, #31
 8003916:	40d8      	lsrs	r0, r3
 8003918:	4b08      	ldr	r3, [pc, #32]	; (800393c <HAL_RCC_ClockConfig+0x274>)
 800391a:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 800391c:	4b08      	ldr	r3, [pc, #32]	; (8003940 <HAL_RCC_ClockConfig+0x278>)
 800391e:	6818      	ldr	r0, [r3, #0]
 8003920:	f7fc fe5a 	bl	80005d8 <HAL_InitTick>
}
 8003924:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003926:	2001      	movs	r0, #1
 8003928:	4770      	bx	lr
          return HAL_ERROR;
 800392a:	2001      	movs	r0, #1
 800392c:	e7fa      	b.n	8003924 <HAL_RCC_ClockConfig+0x25c>
 800392e:	bf00      	nop
 8003930:	52002000 	.word	0x52002000
 8003934:	58024400 	.word	0x58024400
 8003938:	0800ba30 	.word	0x0800ba30
 800393c:	20000014 	.word	0x20000014
 8003940:	20000004 	.word	0x20000004

08003944 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003944:	b508      	push	{r3, lr}
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003946:	f001 fa6d 	bl	8004e24 <HAL_RCCEx_GetD1SysClockFreq>
 800394a:	4b06      	ldr	r3, [pc, #24]	; (8003964 <HAL_RCC_GetHCLKFreq+0x20>)
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	4a05      	ldr	r2, [pc, #20]	; (8003968 <HAL_RCC_GetHCLKFreq+0x24>)
 8003954:	5cd3      	ldrb	r3, [r2, r3]
 8003956:	f003 031f 	and.w	r3, r3, #31
 800395a:	40d8      	lsrs	r0, r3
 800395c:	4b03      	ldr	r3, [pc, #12]	; (800396c <HAL_RCC_GetHCLKFreq+0x28>)
 800395e:	6018      	str	r0, [r3, #0]
  return SystemD2Clock;
}
 8003960:	bd08      	pop	{r3, pc}
 8003962:	bf00      	nop
 8003964:	58024400 	.word	0x58024400
 8003968:	0800ba30 	.word	0x0800ba30
 800396c:	20000018 	.word	0x20000018

08003970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003970:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003972:	f7ff ffe7 	bl	8003944 <HAL_RCC_GetHCLKFreq>
 8003976:	4b05      	ldr	r3, [pc, #20]	; (800398c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800397e:	4a04      	ldr	r2, [pc, #16]	; (8003990 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003980:	5cd3      	ldrb	r3, [r2, r3]
 8003982:	f003 031f 	and.w	r3, r3, #31
}
 8003986:	40d8      	lsrs	r0, r3
 8003988:	bd08      	pop	{r3, pc}
 800398a:	bf00      	nop
 800398c:	58024400 	.word	0x58024400
 8003990:	0800ba30 	.word	0x0800ba30

08003994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003994:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003996:	f7ff ffd5 	bl	8003944 <HAL_RCC_GetHCLKFreq>
 800399a:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80039a2:	4a04      	ldr	r2, [pc, #16]	; (80039b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039a4:	5cd3      	ldrb	r3, [r2, r3]
 80039a6:	f003 031f 	and.w	r3, r3, #31
}
 80039aa:	40d8      	lsrs	r0, r3
 80039ac:	bd08      	pop	{r3, pc}
 80039ae:	bf00      	nop
 80039b0:	58024400 	.word	0x58024400
 80039b4:	0800ba30 	.word	0x0800ba30

080039b8 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80039b8:	4b40      	ldr	r3, [pc, #256]	; (8003abc <RCCEx_PLL2_Config+0x104>)
 80039ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039bc:	f003 0303 	and.w	r3, r3, #3
 80039c0:	2b03      	cmp	r3, #3
 80039c2:	d079      	beq.n	8003ab8 <RCCEx_PLL2_Config+0x100>
{
 80039c4:	b570      	push	{r4, r5, r6, lr}
 80039c6:	460e      	mov	r6, r1
 80039c8:	4604      	mov	r4, r0


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80039ca:	4a3c      	ldr	r2, [pc, #240]	; (8003abc <RCCEx_PLL2_Config+0x104>)
 80039cc:	6813      	ldr	r3, [r2, #0]
 80039ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039d4:	f7fc fe60 	bl	8000698 <HAL_GetTick>
 80039d8:	4605      	mov	r5, r0

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80039da:	4b38      	ldr	r3, [pc, #224]	; (8003abc <RCCEx_PLL2_Config+0x104>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80039e2:	d006      	beq.n	80039f2 <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80039e4:	f7fc fe58 	bl	8000698 <HAL_GetTick>
 80039e8:	1b40      	subs	r0, r0, r5
 80039ea:	2802      	cmp	r0, #2
 80039ec:	d9f5      	bls.n	80039da <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 80039ee:	2003      	movs	r0, #3

  }


  return status;
}
 80039f0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80039f2:	4b32      	ldr	r3, [pc, #200]	; (8003abc <RCCEx_PLL2_Config+0x104>)
 80039f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039f6:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 80039fa:	6821      	ldr	r1, [r4, #0]
 80039fc:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8003a00:	629a      	str	r2, [r3, #40]	; 0x28
 8003a02:	6862      	ldr	r2, [r4, #4]
 8003a04:	3a01      	subs	r2, #1
 8003a06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a0a:	68a1      	ldr	r1, [r4, #8]
 8003a0c:	3901      	subs	r1, #1
 8003a0e:	0249      	lsls	r1, r1, #9
 8003a10:	b289      	uxth	r1, r1
 8003a12:	430a      	orrs	r2, r1
 8003a14:	68e1      	ldr	r1, [r4, #12]
 8003a16:	3901      	subs	r1, #1
 8003a18:	0409      	lsls	r1, r1, #16
 8003a1a:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	6921      	ldr	r1, [r4, #16]
 8003a22:	3901      	subs	r1, #1
 8003a24:	0609      	lsls	r1, r1, #24
 8003a26:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a30:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003a34:	6961      	ldr	r1, [r4, #20]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3c:	f022 0220 	bic.w	r2, r2, #32
 8003a40:	69a1      	ldr	r1, [r4, #24]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a48:	f022 0210 	bic.w	r2, r2, #16
 8003a4c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003a4e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003a50:	4a1b      	ldr	r2, [pc, #108]	; (8003ac0 <RCCEx_PLL2_Config+0x108>)
 8003a52:	400a      	ands	r2, r1
 8003a54:	69e1      	ldr	r1, [r4, #28]
 8003a56:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003a5a:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a5e:	f042 0210 	orr.w	r2, r2, #16
 8003a62:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8003a64:	b9c6      	cbnz	r6, 8003a98 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003a66:	461a      	mov	r2, r3
 8003a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a6e:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 8003a70:	4a12      	ldr	r2, [pc, #72]	; (8003abc <RCCEx_PLL2_Config+0x104>)
 8003a72:	6813      	ldr	r3, [r2, #0]
 8003a74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a78:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003a7a:	f7fc fe0d 	bl	8000698 <HAL_GetTick>
 8003a7e:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a80:	4b0e      	ldr	r3, [pc, #56]	; (8003abc <RCCEx_PLL2_Config+0x104>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003a88:	d114      	bne.n	8003ab4 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003a8a:	f7fc fe05 	bl	8000698 <HAL_GetTick>
 8003a8e:	1b00      	subs	r0, r0, r4
 8003a90:	2802      	cmp	r0, #2
 8003a92:	d9f5      	bls.n	8003a80 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8003a94:	2003      	movs	r0, #3
 8003a96:	e7ab      	b.n	80039f0 <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8003a98:	2e01      	cmp	r6, #1
 8003a9a:	d005      	beq.n	8003aa8 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003a9c:	4a07      	ldr	r2, [pc, #28]	; (8003abc <RCCEx_PLL2_Config+0x104>)
 8003a9e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003aa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003aa4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003aa6:	e7e3      	b.n	8003a70 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003aa8:	4a04      	ldr	r2, [pc, #16]	; (8003abc <RCCEx_PLL2_Config+0x104>)
 8003aaa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003aac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ab0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ab2:	e7dd      	b.n	8003a70 <RCCEx_PLL2_Config+0xb8>
  return status;
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	e79b      	b.n	80039f0 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8003ab8:	2001      	movs	r0, #1
}
 8003aba:	4770      	bx	lr
 8003abc:	58024400 	.word	0x58024400
 8003ac0:	ffff0007 	.word	0xffff0007

08003ac4 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ac4:	4b40      	ldr	r3, [pc, #256]	; (8003bc8 <RCCEx_PLL3_Config+0x104>)
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac8:	f003 0303 	and.w	r3, r3, #3
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d079      	beq.n	8003bc4 <RCCEx_PLL3_Config+0x100>
{
 8003ad0:	b570      	push	{r4, r5, r6, lr}
 8003ad2:	460e      	mov	r6, r1
 8003ad4:	4604      	mov	r4, r0


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003ad6:	4a3c      	ldr	r2, [pc, #240]	; (8003bc8 <RCCEx_PLL3_Config+0x104>)
 8003ad8:	6813      	ldr	r3, [r2, #0]
 8003ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ade:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ae0:	f7fc fdda 	bl	8000698 <HAL_GetTick>
 8003ae4:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ae6:	4b38      	ldr	r3, [pc, #224]	; (8003bc8 <RCCEx_PLL3_Config+0x104>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003aee:	d006      	beq.n	8003afe <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003af0:	f7fc fdd2 	bl	8000698 <HAL_GetTick>
 8003af4:	1b40      	subs	r0, r0, r5
 8003af6:	2802      	cmp	r0, #2
 8003af8:	d9f5      	bls.n	8003ae6 <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 8003afa:	2003      	movs	r0, #3

  }


  return status;
}
 8003afc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003afe:	4b32      	ldr	r3, [pc, #200]	; (8003bc8 <RCCEx_PLL3_Config+0x104>)
 8003b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b02:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 8003b06:	6821      	ldr	r1, [r4, #0]
 8003b08:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8003b0c:	629a      	str	r2, [r3, #40]	; 0x28
 8003b0e:	6862      	ldr	r2, [r4, #4]
 8003b10:	3a01      	subs	r2, #1
 8003b12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b16:	68a1      	ldr	r1, [r4, #8]
 8003b18:	3901      	subs	r1, #1
 8003b1a:	0249      	lsls	r1, r1, #9
 8003b1c:	b289      	uxth	r1, r1
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	68e1      	ldr	r1, [r4, #12]
 8003b22:	3901      	subs	r1, #1
 8003b24:	0409      	lsls	r1, r1, #16
 8003b26:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	6921      	ldr	r1, [r4, #16]
 8003b2e:	3901      	subs	r1, #1
 8003b30:	0609      	lsls	r1, r1, #24
 8003b32:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8003b36:	430a      	orrs	r2, r1
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b40:	6961      	ldr	r1, [r4, #20]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b4c:	69a1      	ldr	r1, [r4, #24]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b58:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003b5a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003b5c:	4a1b      	ldr	r2, [pc, #108]	; (8003bcc <RCCEx_PLL3_Config+0x108>)
 8003b5e:	400a      	ands	r2, r1
 8003b60:	69e1      	ldr	r1, [r4, #28]
 8003b62:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003b66:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b6e:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8003b70:	b9c6      	cbnz	r6, 8003ba4 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003b72:	461a      	mov	r2, r3
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b7a:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8003b7c:	4a12      	ldr	r2, [pc, #72]	; (8003bc8 <RCCEx_PLL3_Config+0x104>)
 8003b7e:	6813      	ldr	r3, [r2, #0]
 8003b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b84:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003b86:	f7fc fd87 	bl	8000698 <HAL_GetTick>
 8003b8a:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003b8c:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <RCCEx_PLL3_Config+0x104>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003b94:	d114      	bne.n	8003bc0 <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003b96:	f7fc fd7f 	bl	8000698 <HAL_GetTick>
 8003b9a:	1b00      	subs	r0, r0, r4
 8003b9c:	2802      	cmp	r0, #2
 8003b9e:	d9f5      	bls.n	8003b8c <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 8003ba0:	2003      	movs	r0, #3
 8003ba2:	e7ab      	b.n	8003afc <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8003ba4:	2e01      	cmp	r6, #1
 8003ba6:	d005      	beq.n	8003bb4 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003ba8:	4a07      	ldr	r2, [pc, #28]	; (8003bc8 <RCCEx_PLL3_Config+0x104>)
 8003baa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003bac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bb0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003bb2:	e7e3      	b.n	8003b7c <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003bb4:	4a04      	ldr	r2, [pc, #16]	; (8003bc8 <RCCEx_PLL3_Config+0x104>)
 8003bb6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003bb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bbc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003bbe:	e7dd      	b.n	8003b7c <RCCEx_PLL3_Config+0xb8>
  return status;
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	e79b      	b.n	8003afc <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8003bc4:	2001      	movs	r0, #1
}
 8003bc6:	4770      	bx	lr
 8003bc8:	58024400 	.word	0x58024400
 8003bcc:	ffff0007 	.word	0xffff0007

08003bd0 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bd4:	6803      	ldr	r3, [r0, #0]
 8003bd6:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003bda:	d02b      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x64>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003bdc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003bde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003be2:	d018      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8003be4:	d907      	bls.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003be6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bea:	d01d      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003bec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bf0:	d12e      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x80>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bf2:	2500      	movs	r5, #0
 8003bf4:	e006      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x34>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003bf6:	bb5b      	cbnz	r3, 8003c50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bf8:	4a93      	ldr	r2, [pc, #588]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003bfa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c00:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c02:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c04:	4a90      	ldr	r2, [pc, #576]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003c06:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003c08:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003c0c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003c0e:	430b      	orrs	r3, r1
 8003c10:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c12:	2600      	movs	r6, #0
 8003c14:	e010      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c16:	2102      	movs	r1, #2
 8003c18:	3004      	adds	r0, #4
 8003c1a:	f7ff fecd 	bl	80039b8 <RCCEx_PLL2_Config>
 8003c1e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003c20:	2d00      	cmp	r5, #0
 8003c22:	d0ef      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003c24:	462e      	mov	r6, r5
 8003c26:	e007      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c28:	2102      	movs	r1, #2
 8003c2a:	3024      	adds	r0, #36	; 0x24
 8003c2c:	f7ff ff4a 	bl	8003ac4 <RCCEx_PLL3_Config>
 8003c30:	4605      	mov	r5, r0
      break;
 8003c32:	e7f5      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x50>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c34:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c36:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c38:	6823      	ldr	r3, [r4, #0]
 8003c3a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003c3e:	d017      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003c40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d832      	bhi.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003c46:	e8df f003 	tbb	[pc, r3]
 8003c4a:	2406      	.short	0x2406
 8003c4c:	0b2a      	.short	0x0b2a
 8003c4e:	0b          	.byte	0x0b
 8003c4f:	00          	.byte	0x00
      ret = HAL_ERROR;
 8003c50:	2601      	movs	r6, #1
 8003c52:	4635      	mov	r5, r6
 8003c54:	e7f0      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c56:	4a7c      	ldr	r2, [pc, #496]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003c58:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c5e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003c60:	bb3d      	cbnz	r5, 8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c62:	4a79      	ldr	r2, [pc, #484]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003c64:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003c66:	f023 0307 	bic.w	r3, r3, #7
 8003c6a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003c76:	d033      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003c78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c7a:	2b80      	cmp	r3, #128	; 0x80
 8003c7c:	d044      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8003c7e:	d81a      	bhi.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8003c80:	b30b      	cbz	r3, 8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8003c82:	2b40      	cmp	r3, #64	; 0x40
 8003c84:	d11c      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c86:	2100      	movs	r1, #0
 8003c88:	1d20      	adds	r0, r4, #4
 8003c8a:	f7ff fe95 	bl	80039b8 <RCCEx_PLL2_Config>
 8003c8e:	4605      	mov	r5, r0
      break;
 8003c90:	e01e      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x100>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c92:	2100      	movs	r1, #0
 8003c94:	1d20      	adds	r0, r4, #4
 8003c96:	f7ff fe8f 	bl	80039b8 <RCCEx_PLL2_Config>
 8003c9a:	4605      	mov	r5, r0
      break;
 8003c9c:	e7e0      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003ca4:	f7ff ff0e 	bl	8003ac4 <RCCEx_PLL3_Config>
 8003ca8:	4605      	mov	r5, r0
      break;
 8003caa:	e7d9      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = HAL_ERROR;
 8003cac:	2601      	movs	r6, #1
 8003cae:	4635      	mov	r5, r6
 8003cb0:	e7de      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003cb2:	462e      	mov	r6, r5
 8003cb4:	e7dc      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003cb6:	2bc0      	cmp	r3, #192	; 0xc0
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cbe:	d007      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x100>
      ret = HAL_ERROR;
 8003cc0:	2601      	movs	r6, #1
 8003cc2:	4635      	mov	r5, r6
 8003cc4:	e00c      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cc6:	4a60      	ldr	r2, [pc, #384]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003cc8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cce:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003cd0:	bb0d      	cbnz	r5, 8003d16 <HAL_RCCEx_PeriphCLKConfig+0x146>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003cd2:	4a5d      	ldr	r2, [pc, #372]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003cd4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003cd6:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8003cda:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003cdc:	430b      	orrs	r3, r1
 8003cde:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003ce0:	6823      	ldr	r3, [r4, #0]
 8003ce2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003ce6:	d02f      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x178>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003ce8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8003cec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cf0:	d03e      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8003cf2:	d812      	bhi.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003cf4:	b1d3      	cbz	r3, 8003d2c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003cf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cfa:	d114      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x156>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	1d20      	adds	r0, r4, #4
 8003d00:	f7ff fe5a 	bl	80039b8 <RCCEx_PLL2_Config>
 8003d04:	4605      	mov	r5, r0
      break;
 8003d06:	e016      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d08:	2100      	movs	r1, #0
 8003d0a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003d0e:	f7ff fed9 	bl	8003ac4 <RCCEx_PLL3_Config>
 8003d12:	4605      	mov	r5, r0
      break;
 8003d14:	e7dc      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003d16:	462e      	mov	r6, r5
 8003d18:	e7e2      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003d1a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003d1e:	d00a      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003d20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d24:	d007      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = HAL_ERROR;
 8003d26:	2601      	movs	r6, #1
 8003d28:	4635      	mov	r5, r6
 8003d2a:	e00d      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x178>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d2c:	4a46      	ldr	r2, [pc, #280]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003d2e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d34:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003d36:	bb15      	cbnz	r5, 8003d7e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003d38:	4a43      	ldr	r2, [pc, #268]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003d3a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003d3c:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8003d40:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8003d44:	430b      	orrs	r3, r1
 8003d46:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003d48:	6823      	ldr	r3, [r4, #0]
 8003d4a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003d4e:	d02f      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->Sai4BClockSelection)
 8003d50:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8003d54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d58:	d037      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003d5a:	d812      	bhi.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003d5c:	b1d3      	cbz	r3, 8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8003d5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d62:	d114      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x1be>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d64:	2100      	movs	r1, #0
 8003d66:	1d20      	adds	r0, r4, #4
 8003d68:	f7ff fe26 	bl	80039b8 <RCCEx_PLL2_Config>
 8003d6c:	4605      	mov	r5, r0
      break;
 8003d6e:	e016      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d70:	2100      	movs	r1, #0
 8003d72:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003d76:	f7ff fea5 	bl	8003ac4 <RCCEx_PLL3_Config>
 8003d7a:	4605      	mov	r5, r0
      break;
 8003d7c:	e7db      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003d7e:	462e      	mov	r6, r5
 8003d80:	e7e2      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x178>
    switch(PeriphClkInit->Sai4BClockSelection)
 8003d82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d86:	d00a      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003d88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d8c:	d007      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      ret = HAL_ERROR;
 8003d8e:	2601      	movs	r6, #1
 8003d90:	4635      	mov	r5, r6
 8003d92:	e00d      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d94:	4a2c      	ldr	r2, [pc, #176]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003d96:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003d9e:	b9dd      	cbnz	r5, 8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x208>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003da0:	4a29      	ldr	r2, [pc, #164]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003da2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003da4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003da8:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8003dac:	430b      	orrs	r3, r1
 8003dae:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003db0:	6823      	ldr	r3, [r4, #0]
 8003db2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003db6:	d02a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x23e>
    switch(PeriphClkInit->QspiClockSelection)
 8003db8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003dba:	2b10      	cmp	r3, #16
 8003dbc:	d012      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003dbe:	d90d      	bls.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8003dc0:	2b20      	cmp	r3, #32
 8003dc2:	d01d      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003dc4:	2b30      	cmp	r3, #48	; 0x30
 8003dc6:	d012      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003dc8:	e009      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x20e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003dca:	2100      	movs	r1, #0
 8003dcc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003dd0:	f7ff fe78 	bl	8003ac4 <RCCEx_PLL3_Config>
 8003dd4:	4605      	mov	r5, r0
      break;
 8003dd6:	e7e2      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003dd8:	462e      	mov	r6, r5
 8003dda:	e7e9      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->QspiClockSelection)
 8003ddc:	b13b      	cbz	r3, 8003dee <HAL_RCCEx_PeriphCLKConfig+0x21e>
      ret = HAL_ERROR;
 8003dde:	2601      	movs	r6, #1
 8003de0:	4635      	mov	r5, r6
 8003de2:	e014      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003de4:	4a18      	ldr	r2, [pc, #96]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003de6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dec:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003dee:	b96d      	cbnz	r5, 8003e0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003df0:	4a15      	ldr	r2, [pc, #84]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003df2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003df4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003df8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dfe:	e006      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x23e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e00:	2102      	movs	r1, #2
 8003e02:	1d20      	adds	r0, r4, #4
 8003e04:	f7ff fdd8 	bl	80039b8 <RCCEx_PLL2_Config>
 8003e08:	4605      	mov	r5, r0
      break;
 8003e0a:	e7f0      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003e0c:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003e14:	d027      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003e16:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e1c:	d03e      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003e1e:	d809      	bhi.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003e20:	b1a3      	cbz	r3, 8003e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e26:	d10b      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x270>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e28:	2100      	movs	r1, #0
 8003e2a:	1d20      	adds	r0, r4, #4
 8003e2c:	f7ff fdc4 	bl	80039b8 <RCCEx_PLL2_Config>
 8003e30:	4605      	mov	r5, r0
      break;
 8003e32:	e010      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x286>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003e34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e38:	d00d      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003e3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e3e:	d00a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x286>
      ret = HAL_ERROR;
 8003e40:	2601      	movs	r6, #1
 8003e42:	4635      	mov	r5, r6
 8003e44:	e00f      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003e46:	bf00      	nop
 8003e48:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e4c:	4a93      	ldr	r2, [pc, #588]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003e4e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e54:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003e56:	bb45      	cbnz	r5, 8003eaa <HAL_RCCEx_PeriphCLKConfig+0x2da>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e58:	4a90      	ldr	r2, [pc, #576]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003e5a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e60:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003e62:	430b      	orrs	r3, r1
 8003e64:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e66:	6823      	ldr	r3, [r4, #0]
 8003e68:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003e6c:	d033      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Spi45ClockSelection)
 8003e6e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003e70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e74:	d027      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8003e76:	d81a      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003e78:	b13b      	cbz	r3, 8003e8a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e7e:	d11f      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e80:	2101      	movs	r1, #1
 8003e82:	1d20      	adds	r0, r4, #4
 8003e84:	f7ff fd98 	bl	80039b8 <RCCEx_PLL2_Config>
 8003e88:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003e8a:	bb1d      	cbnz	r5, 8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x304>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003e8c:	4a83      	ldr	r2, [pc, #524]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003e8e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003e90:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003e94:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003e96:	430b      	orrs	r3, r1
 8003e98:	6513      	str	r3, [r2, #80]	; 0x50
 8003e9a:	e01c      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x306>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003ea2:	f7ff fe0f 	bl	8003ac4 <RCCEx_PLL3_Config>
 8003ea6:	4605      	mov	r5, r0
      break;
 8003ea8:	e7d5      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003eaa:	462e      	mov	r6, r5
 8003eac:	e7db      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch(PeriphClkInit->Spi45ClockSelection)
 8003eae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003eb2:	d0ea      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eb8:	d0e7      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003eba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ebe:	d0e4      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      ret = HAL_ERROR;
 8003ec0:	2601      	movs	r6, #1
 8003ec2:	4635      	mov	r5, r6
 8003ec4:	e007      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x306>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003ecc:	f7ff fdfa 	bl	8003ac4 <RCCEx_PLL3_Config>
 8003ed0:	4605      	mov	r5, r0
      break;
 8003ed2:	e7da      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003ed4:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003edc:	d02c      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x368>
    switch(PeriphClkInit->Spi6ClockSelection)
 8003ede:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8003ee2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ee6:	d01f      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8003ee8:	d812      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x340>
 8003eea:	b13b      	cbz	r3, 8003efc <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8003eec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ef0:	d117      	bne.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x352>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	1d20      	adds	r0, r4, #4
 8003ef6:	f7ff fd5f 	bl	80039b8 <RCCEx_PLL2_Config>
 8003efa:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003efc:	b9dd      	cbnz	r5, 8003f36 <HAL_RCCEx_PeriphCLKConfig+0x366>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003efe:	4a67      	ldr	r2, [pc, #412]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003f00:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003f02:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8003f06:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8003f0a:	430b      	orrs	r3, r1
 8003f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8003f0e:	e013      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x368>
    switch(PeriphClkInit->Spi6ClockSelection)
 8003f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f14:	d0f2      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8003f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f1a:	d0ef      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8003f1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f20:	d0ec      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x32c>
      ret = HAL_ERROR;
 8003f22:	2601      	movs	r6, #1
 8003f24:	4635      	mov	r5, r6
 8003f26:	e007      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f28:	2101      	movs	r1, #1
 8003f2a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f2e:	f7ff fdc9 	bl	8003ac4 <RCCEx_PLL3_Config>
 8003f32:	4605      	mov	r5, r0
      break;
 8003f34:	e7e2      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8003f36:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003f3e:	d01f      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->FdcanClockSelection)
 8003f40:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003f42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f46:	d006      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8003f48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f4c:	d011      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8003f4e:	b13b      	cbz	r3, 8003f60 <HAL_RCCEx_PeriphCLKConfig+0x390>
      ret = HAL_ERROR;
 8003f50:	2601      	movs	r6, #1
 8003f52:	4635      	mov	r5, r6
 8003f54:	e014      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f56:	4a51      	ldr	r2, [pc, #324]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003f58:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f5e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003f60:	b96d      	cbnz	r5, 8003f7e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f62:	4a4e      	ldr	r2, [pc, #312]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003f64:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003f66:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003f6a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	6513      	str	r3, [r2, #80]	; 0x50
 8003f70:	e006      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f72:	2101      	movs	r1, #1
 8003f74:	1d20      	adds	r0, r4, #4
 8003f76:	f7ff fd1f 	bl	80039b8 <RCCEx_PLL2_Config>
 8003f7a:	4605      	mov	r5, r0
      break;
 8003f7c:	e7f0      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8003f7e:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003f80:	6823      	ldr	r3, [r4, #0]
 8003f82:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003f86:	d01e      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    switch(PeriphClkInit->FmcClockSelection)
 8003f88:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003f8a:	2b03      	cmp	r3, #3
 8003f8c:	d817      	bhi.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 8003f8e:	e8df f003 	tbb	[pc, r3]
 8003f92:	0207      	.short	0x0207
 8003f94:	0710      	.short	0x0710
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f96:	4a41      	ldr	r2, [pc, #260]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003f98:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f9e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003fa0:	b985      	cbnz	r5, 8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003fa2:	4a3e      	ldr	r2, [pc, #248]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8003fa4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003fa6:	f023 0303 	bic.w	r3, r3, #3
 8003faa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003fac:	430b      	orrs	r3, r1
 8003fae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fb0:	e009      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003fb2:	2102      	movs	r1, #2
 8003fb4:	1d20      	adds	r0, r4, #4
 8003fb6:	f7ff fcff 	bl	80039b8 <RCCEx_PLL2_Config>
 8003fba:	4605      	mov	r5, r0
      break;
 8003fbc:	e7f0      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
      ret = HAL_ERROR;
 8003fbe:	2601      	movs	r6, #1
 8003fc0:	4635      	mov	r5, r6
 8003fc2:	e000      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8003fc4:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003fcc:	d11f      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x43e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	f013 0f01 	tst.w	r3, #1
 8003fd4:	f000 809e 	beq.w	8004114 <HAL_RCCEx_PeriphCLKConfig+0x544>
    switch(PeriphClkInit->Usart16ClockSelection)
 8003fd8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003fda:	2b28      	cmp	r3, #40	; 0x28
 8003fdc:	f200 8096 	bhi.w	800410c <HAL_RCCEx_PeriphCLKConfig+0x53c>
 8003fe0:	e8df f003 	tbb	[pc, r3]
 8003fe4:	94949484 	.word	0x94949484
 8003fe8:	94949494 	.word	0x94949494
 8003fec:	9494947f 	.word	0x9494947f
 8003ff0:	94949494 	.word	0x94949494
 8003ff4:	9494948d 	.word	0x9494948d
 8003ff8:	94949494 	.word	0x94949494
 8003ffc:	94949484 	.word	0x94949484
 8004000:	94949494 	.word	0x94949494
 8004004:	94949484 	.word	0x94949484
 8004008:	94949494 	.word	0x94949494
 800400c:	84          	.byte	0x84
 800400d:	00          	.byte	0x00
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800400e:	4a24      	ldr	r2, [pc, #144]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004010:	6813      	ldr	r3, [r2, #0]
 8004012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004016:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004018:	f7fc fb3e 	bl	8000698 <HAL_GetTick>
 800401c:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800401e:	4b20      	ldr	r3, [pc, #128]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004026:	d105      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x464>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004028:	f7fc fb36 	bl	8000698 <HAL_GetTick>
 800402c:	1bc0      	subs	r0, r0, r7
 800402e:	2864      	cmp	r0, #100	; 0x64
 8004030:	d9f5      	bls.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x44e>
        ret = HAL_TIMEOUT;
 8004032:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 8004034:	2d00      	cmp	r5, #0
 8004036:	d150      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x50a>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004038:	4b18      	ldr	r3, [pc, #96]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 800403a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403c:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8004040:	4053      	eors	r3, r2
 8004042:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004046:	d00c      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x492>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004048:	4b14      	ldr	r3, [pc, #80]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 800404a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800404c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8004050:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004052:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004056:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004058:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800405a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800405e:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8004060:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004062:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8004066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800406a:	d01b      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      if(ret == HAL_OK)
 800406c:	2d00      	cmp	r5, #0
 800406e:	d136      	bne.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x50e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004070:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8004074:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004078:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800407c:	d023      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800407e:	4a07      	ldr	r2, [pc, #28]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004080:	6913      	ldr	r3, [r2, #16]
 8004082:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004086:	6113      	str	r3, [r2, #16]
 8004088:	4904      	ldr	r1, [pc, #16]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 800408a:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800408c:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8004090:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004094:	4313      	orrs	r3, r2
 8004096:	670b      	str	r3, [r1, #112]	; 0x70
 8004098:	e799      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800409a:	bf00      	nop
 800409c:	58024400 	.word	0x58024400
 80040a0:	58024800 	.word	0x58024800
        tickstart = HAL_GetTick();
 80040a4:	f7fc faf8 	bl	8000698 <HAL_GetTick>
 80040a8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040aa:	4baa      	ldr	r3, [pc, #680]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x784>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ae:	f013 0f02 	tst.w	r3, #2
 80040b2:	d1db      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x49c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b4:	f7fc faf0 	bl	8000698 <HAL_GetTick>
 80040b8:	1bc0      	subs	r0, r0, r7
 80040ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80040be:	4298      	cmp	r0, r3
 80040c0:	d9f3      	bls.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x4da>
            ret = HAL_TIMEOUT;
 80040c2:	2503      	movs	r5, #3
 80040c4:	e7d2      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x49c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040c6:	48a3      	ldr	r0, [pc, #652]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x784>)
 80040c8:	6902      	ldr	r2, [r0, #16]
 80040ca:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80040ce:	49a2      	ldr	r1, [pc, #648]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 80040d0:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 80040d4:	4313      	orrs	r3, r2
 80040d6:	6103      	str	r3, [r0, #16]
 80040d8:	e7d6      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      status = ret;
 80040da:	462e      	mov	r6, r5
 80040dc:	e777      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x3fe>
        status = ret;
 80040de:	462e      	mov	r6, r5
 80040e0:	e775      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040e2:	2101      	movs	r1, #1
 80040e4:	1d20      	adds	r0, r4, #4
 80040e6:	f7ff fc67 	bl	80039b8 <RCCEx_PLL2_Config>
 80040ea:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80040ec:	b98d      	cbnz	r5, 8004112 <HAL_RCCEx_PeriphCLKConfig+0x542>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80040ee:	4a99      	ldr	r2, [pc, #612]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x784>)
 80040f0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80040f2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80040f6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80040f8:	430b      	orrs	r3, r1
 80040fa:	6553      	str	r3, [r2, #84]	; 0x54
 80040fc:	e00a      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x544>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040fe:	2101      	movs	r1, #1
 8004100:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004104:	f7ff fcde 	bl	8003ac4 <RCCEx_PLL3_Config>
 8004108:	4605      	mov	r5, r0
      break;
 800410a:	e7ef      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x51c>
      ret = HAL_ERROR;
 800410c:	2601      	movs	r6, #1
 800410e:	4635      	mov	r5, r6
 8004110:	e000      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8004112:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004114:	6823      	ldr	r3, [r4, #0]
 8004116:	f013 0f02 	tst.w	r3, #2
 800411a:	d020      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x58e>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800411c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800411e:	2b05      	cmp	r3, #5
 8004120:	d819      	bhi.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8004122:	e8df f003 	tbb	[pc, r3]
 8004126:	0308      	.short	0x0308
 8004128:	08080811 	.word	0x08080811
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800412c:	2101      	movs	r1, #1
 800412e:	1d20      	adds	r0, r4, #4
 8004130:	f7ff fc42 	bl	80039b8 <RCCEx_PLL2_Config>
 8004134:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004136:	b98d      	cbnz	r5, 800415c <HAL_RCCEx_PeriphCLKConfig+0x58c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004138:	4a86      	ldr	r2, [pc, #536]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x784>)
 800413a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800413c:	f023 0307 	bic.w	r3, r3, #7
 8004140:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004142:	430b      	orrs	r3, r1
 8004144:	6553      	str	r3, [r2, #84]	; 0x54
 8004146:	e00a      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x58e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004148:	2101      	movs	r1, #1
 800414a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800414e:	f7ff fcb9 	bl	8003ac4 <RCCEx_PLL3_Config>
 8004152:	4605      	mov	r5, r0
      break;
 8004154:	e7ef      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x566>
      ret = HAL_ERROR;
 8004156:	2601      	movs	r6, #1
 8004158:	4635      	mov	r5, r6
 800415a:	e000      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x58e>
 800415c:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	f013 0f04 	tst.w	r3, #4
 8004164:	d022      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004166:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800416a:	2b05      	cmp	r3, #5
 800416c:	d81a      	bhi.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800416e:	e8df f003 	tbb	[pc, r3]
 8004172:	0308      	.short	0x0308
 8004174:	08080812 	.word	0x08080812
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004178:	2101      	movs	r1, #1
 800417a:	1d20      	adds	r0, r4, #4
 800417c:	f7ff fc1c 	bl	80039b8 <RCCEx_PLL2_Config>
 8004180:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004182:	b995      	cbnz	r5, 80041aa <HAL_RCCEx_PeriphCLKConfig+0x5da>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004184:	4a73      	ldr	r2, [pc, #460]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x784>)
 8004186:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004188:	f023 0307 	bic.w	r3, r3, #7
 800418c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8004190:	430b      	orrs	r3, r1
 8004192:	6593      	str	r3, [r2, #88]	; 0x58
 8004194:	e00a      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004196:	2101      	movs	r1, #1
 8004198:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800419c:	f7ff fc92 	bl	8003ac4 <RCCEx_PLL3_Config>
 80041a0:	4605      	mov	r5, r0
      break;
 80041a2:	e7ee      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
      ret = HAL_ERROR;
 80041a4:	2601      	movs	r6, #1
 80041a6:	4635      	mov	r5, r6
 80041a8:	e000      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x5dc>
 80041aa:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	f013 0f20 	tst.w	r3, #32
 80041b2:	d02c      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80041b4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80041b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041bc:	d01f      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
 80041be:	d812      	bhi.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x616>
 80041c0:	b13b      	cbz	r3, 80041d2 <HAL_RCCEx_PeriphCLKConfig+0x602>
 80041c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041c6:	d117      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x628>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041c8:	2100      	movs	r1, #0
 80041ca:	1d20      	adds	r0, r4, #4
 80041cc:	f7ff fbf4 	bl	80039b8 <RCCEx_PLL2_Config>
 80041d0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80041d2:	b9dd      	cbnz	r5, 800420c <HAL_RCCEx_PeriphCLKConfig+0x63c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041d4:	4a5f      	ldr	r2, [pc, #380]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x784>)
 80041d6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80041d8:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80041dc:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80041e0:	430b      	orrs	r3, r1
 80041e2:	6553      	str	r3, [r2, #84]	; 0x54
 80041e4:	e013      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80041e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ea:	d0f2      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x602>
 80041ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041f0:	d0ef      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x602>
 80041f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041f6:	d0ec      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x602>
      ret = HAL_ERROR;
 80041f8:	2601      	movs	r6, #1
 80041fa:	4635      	mov	r5, r6
 80041fc:	e007      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x63e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041fe:	2102      	movs	r1, #2
 8004200:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004204:	f7ff fc5e 	bl	8003ac4 <RCCEx_PLL3_Config>
 8004208:	4605      	mov	r5, r0
      break;
 800420a:	e7e2      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x602>
 800420c:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004214:	d02c      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004216:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800421a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800421e:	d01f      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x690>
 8004220:	d812      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004222:	b13b      	cbz	r3, 8004234 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004228:	d117      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x68a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800422a:	2100      	movs	r1, #0
 800422c:	1d20      	adds	r0, r4, #4
 800422e:	f7ff fbc3 	bl	80039b8 <RCCEx_PLL2_Config>
 8004232:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004234:	b9dd      	cbnz	r5, 800426e <HAL_RCCEx_PeriphCLKConfig+0x69e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004236:	4a47      	ldr	r2, [pc, #284]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x784>)
 8004238:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800423a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800423e:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8004242:	430b      	orrs	r3, r1
 8004244:	6593      	str	r3, [r2, #88]	; 0x58
 8004246:	e013      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424c:	d0f2      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800424e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004252:	d0ef      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004254:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004258:	d0ec      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x664>
      ret = HAL_ERROR;
 800425a:	2601      	movs	r6, #1
 800425c:	4635      	mov	r5, r6
 800425e:	e007      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004260:	2102      	movs	r1, #2
 8004262:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004266:	f7ff fc2d 	bl	8003ac4 <RCCEx_PLL3_Config>
 800426a:	4605      	mov	r5, r0
      break;
 800426c:	e7e2      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800426e:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004270:	6823      	ldr	r3, [r4, #0]
 8004272:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004276:	d02c      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004278:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800427c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004280:	d01f      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004282:	d812      	bhi.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8004284:	b13b      	cbz	r3, 8004296 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8004286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800428a:	d117      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800428c:	2100      	movs	r1, #0
 800428e:	1d20      	adds	r0, r4, #4
 8004290:	f7ff fb92 	bl	80039b8 <RCCEx_PLL2_Config>
 8004294:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004296:	b9dd      	cbnz	r5, 80042d0 <HAL_RCCEx_PeriphCLKConfig+0x700>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004298:	4a2e      	ldr	r2, [pc, #184]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x784>)
 800429a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800429c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80042a0:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 80042a4:	430b      	orrs	r3, r1
 80042a6:	6593      	str	r3, [r2, #88]	; 0x58
 80042a8:	e013      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80042aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ae:	d0f2      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 80042b0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042b4:	d0ef      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 80042b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042ba:	d0ec      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      ret = HAL_ERROR;
 80042bc:	2601      	movs	r6, #1
 80042be:	4635      	mov	r5, r6
 80042c0:	e007      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042c2:	2102      	movs	r1, #2
 80042c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80042c8:	f7ff fbfc 	bl	8003ac4 <RCCEx_PLL3_Config>
 80042cc:	4605      	mov	r5, r0
      break;
 80042ce:	e7e2      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 80042d0:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	f013 0f08 	tst.w	r3, #8
 80042d8:	d00a      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80042da:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80042de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e2:	d024      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x75e>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80042e4:	491b      	ldr	r1, [pc, #108]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x784>)
 80042e6:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80042e8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80042ec:	4313      	orrs	r3, r2
 80042ee:	654b      	str	r3, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	f013 0f10 	tst.w	r3, #16
 80042f6:	d00a      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80042f8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80042fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004300:	d01e      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x770>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004302:	4914      	ldr	r1, [pc, #80]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x784>)
 8004304:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8004306:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800430a:	4313      	orrs	r3, r2
 800430c:	658b      	str	r3, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004314:	d039      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x7ba>
    switch(PeriphClkInit->AdcClockSelection)
 8004316:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800431a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800431e:	d02c      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8004320:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004324:	d01f      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x796>
 8004326:	b1cb      	cbz	r3, 800435c <HAL_RCCEx_PeriphCLKConfig+0x78c>
      ret = HAL_ERROR;
 8004328:	2601      	movs	r6, #1
 800432a:	4635      	mov	r5, r6
 800432c:	e02d      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x7ba>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800432e:	2102      	movs	r1, #2
 8004330:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004334:	f7ff fbc6 	bl	8003ac4 <RCCEx_PLL3_Config>
 8004338:	2800      	cmp	r0, #0
 800433a:	d0d9      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x720>
          status = HAL_ERROR;
 800433c:	2601      	movs	r6, #1
 800433e:	e7d7      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x720>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004340:	2102      	movs	r1, #2
 8004342:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004346:	f7ff fbbd 	bl	8003ac4 <RCCEx_PLL3_Config>
 800434a:	2800      	cmp	r0, #0
 800434c:	d0df      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x73e>
        status = HAL_ERROR;
 800434e:	2601      	movs	r6, #1
 8004350:	e7dd      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004352:	bf00      	nop
 8004354:	58024400 	.word	0x58024400
 8004358:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800435c:	2100      	movs	r1, #0
 800435e:	1d20      	adds	r0, r4, #4
 8004360:	f7ff fb2a 	bl	80039b8 <RCCEx_PLL2_Config>
 8004364:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004366:	b97d      	cbnz	r5, 8004388 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004368:	4a64      	ldr	r2, [pc, #400]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x92c>)
 800436a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800436c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004370:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8004374:	430b      	orrs	r3, r1
 8004376:	6593      	str	r3, [r2, #88]	; 0x58
 8004378:	e007      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x7ba>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800437a:	2102      	movs	r1, #2
 800437c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004380:	f7ff fba0 	bl	8003ac4 <RCCEx_PLL3_Config>
 8004384:	4605      	mov	r5, r0
      break;
 8004386:	e7ee      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x796>
 8004388:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004390:	d024      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    switch(PeriphClkInit->UsbClockSelection)
 8004392:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004396:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800439a:	d017      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
 800439c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043a0:	d00a      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
 80043a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043a6:	d002      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x7de>
      ret = HAL_ERROR;
 80043a8:	2601      	movs	r6, #1
 80043aa:	4635      	mov	r5, r6
 80043ac:	e016      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x80c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043ae:	4a53      	ldr	r2, [pc, #332]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x92c>)
 80043b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80043b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043b6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80043b8:	b97d      	cbnz	r5, 80043da <HAL_RCCEx_PeriphCLKConfig+0x80a>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043ba:	4a50      	ldr	r2, [pc, #320]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x92c>)
 80043bc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80043be:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80043c2:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80043c6:	430b      	orrs	r3, r1
 80043c8:	6553      	str	r3, [r2, #84]	; 0x54
 80043ca:	e007      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x80c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043cc:	2101      	movs	r1, #1
 80043ce:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80043d2:	f7ff fb77 	bl	8003ac4 <RCCEx_PLL3_Config>
 80043d6:	4605      	mov	r5, r0
      break;
 80043d8:	e7ee      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
 80043da:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80043dc:	6823      	ldr	r3, [r4, #0]
 80043de:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80043e2:	d014      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    switch(PeriphClkInit->SdmmcClockSelection)
 80043e4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80043e6:	b12b      	cbz	r3, 80043f4 <HAL_RCCEx_PeriphCLKConfig+0x824>
 80043e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ec:	d023      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x866>
      ret = HAL_ERROR;
 80043ee:	2601      	movs	r6, #1
 80043f0:	4635      	mov	r5, r6
 80043f2:	e00c      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x83e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043f4:	4a41      	ldr	r2, [pc, #260]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x92c>)
 80043f6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80043f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80043fe:	bb05      	cbnz	r5, 8004442 <HAL_RCCEx_PeriphCLKConfig+0x872>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004400:	4a3e      	ldr	r2, [pc, #248]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x92c>)
 8004402:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004408:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800440a:	430b      	orrs	r3, r1
 800440c:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004414:	d117      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x876>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800441c:	d02d      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
    switch(PeriphClkInit->RngClockSelection)
 800441e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004424:	d01b      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8004426:	d917      	bls.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8004428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800442c:	d01c      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x898>
 800442e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004432:	d112      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x88a>
 8004434:	e018      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x898>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004436:	2102      	movs	r1, #2
 8004438:	1d20      	adds	r0, r4, #4
 800443a:	f7ff fabd 	bl	80039b8 <RCCEx_PLL2_Config>
 800443e:	4605      	mov	r5, r0
      break;
 8004440:	e7dd      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8004442:	462e      	mov	r6, r5
 8004444:	e7e3      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004446:	2102      	movs	r1, #2
 8004448:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800444c:	f7ff fb3a 	bl	8003ac4 <RCCEx_PLL3_Config>
 8004450:	2800      	cmp	r0, #0
 8004452:	d0e0      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x846>
      status=HAL_ERROR;
 8004454:	2601      	movs	r6, #1
 8004456:	e7de      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x846>
    switch(PeriphClkInit->RngClockSelection)
 8004458:	b133      	cbz	r3, 8004468 <HAL_RCCEx_PeriphCLKConfig+0x898>
      ret = HAL_ERROR;
 800445a:	2601      	movs	r6, #1
 800445c:	e00d      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800445e:	4a27      	ldr	r2, [pc, #156]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x92c>)
 8004460:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004466:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004468:	2d00      	cmp	r5, #0
 800446a:	d13d      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800446c:	4a23      	ldr	r2, [pc, #140]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x92c>)
 800446e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004474:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004476:	430b      	orrs	r3, r1
 8004478:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004480:	d006      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004482:	4a1e      	ldr	r2, [pc, #120]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x92c>)
 8004484:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004486:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800448a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800448c:	430b      	orrs	r3, r1
 800448e:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004490:	6823      	ldr	r3, [r4, #0]
 8004492:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004496:	d007      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004498:	4a18      	ldr	r2, [pc, #96]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x92c>)
 800449a:	6913      	ldr	r3, [r2, #16]
 800449c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044a0:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 80044a4:	430b      	orrs	r3, r1
 80044a6:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80044ae:	d006      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044b0:	4a12      	ldr	r2, [pc, #72]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x92c>)
 80044b2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80044b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044b8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80044ba:	430b      	orrs	r3, r1
 80044bc:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80044c4:	d009      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x90a>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044c6:	4b0d      	ldr	r3, [pc, #52]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x92c>)
 80044c8:	691a      	ldr	r2, [r3, #16]
 80044ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044ce:	611a      	str	r2, [r3, #16]
 80044d0:	691a      	ldr	r2, [r3, #16]
 80044d2:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 80044d6:	430a      	orrs	r2, r1
 80044d8:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	db05      	blt.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x91c>
  if (status == HAL_OK)
 80044e0:	b106      	cbz	r6, 80044e4 <HAL_RCCEx_PeriphCLKConfig+0x914>
  return HAL_ERROR;
 80044e2:	2601      	movs	r6, #1
}
 80044e4:	4630      	mov	r0, r6
 80044e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044e8:	462e      	mov	r6, r5
 80044ea:	e7c6      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80044ec:	4a03      	ldr	r2, [pc, #12]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x92c>)
 80044ee:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80044f0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80044f4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80044f6:	430b      	orrs	r3, r1
 80044f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044fa:	e7f1      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x910>
 80044fc:	58024400 	.word	0x58024400

08004500 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8004500:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004502:	f7ff fa1f 	bl	8003944 <HAL_RCC_GetHCLKFreq>
 8004506:	4b05      	ldr	r3, [pc, #20]	; (800451c <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800450e:	4a04      	ldr	r2, [pc, #16]	; (8004520 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8004510:	5cd3      	ldrb	r3, [r2, r3]
 8004512:	f003 031f 	and.w	r3, r3, #31
}
 8004516:	40d8      	lsrs	r0, r3
 8004518:	bd08      	pop	{r3, pc}
 800451a:	bf00      	nop
 800451c:	58024400 	.word	0x58024400
 8004520:	0800ba30 	.word	0x0800ba30

08004524 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8004524:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004526:	4978      	ldr	r1, [pc, #480]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004528:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 800452a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800452c:	f3c2 3205 	ubfx	r2, r2, #12, #6
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8004530:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8004532:	f003 0310 	and.w	r3, r3, #16
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004536:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8004538:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 800453c:	fb03 f301 	mul.w	r3, r3, r1
  if (pll2m != 0U)
 8004540:	2a00      	cmp	r2, #0
 8004542:	f000 80db 	beq.w	80046fc <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>
 8004546:	f004 0403 	and.w	r4, r4, #3
 800454a:	ee07 3a90 	vmov	s15, r3
 800454e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8004552:	2c01      	cmp	r4, #1
 8004554:	d066      	beq.n	8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 8004556:	b1fc      	cbz	r4, 8004598 <HAL_RCCEx_GetPLL2ClockFreq+0x74>
 8004558:	2c02      	cmp	r4, #2
 800455a:	f000 80b2 	beq.w	80046c2 <HAL_RCCEx_GetPLL2ClockFreq+0x19e>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800455e:	ee07 2a10 	vmov	s14, r2
 8004562:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004566:	ed9f 6a69 	vldr	s12, [pc, #420]	; 800470c <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800456a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800456e:	4b66      	ldr	r3, [pc, #408]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004576:	ee07 3a10 	vmov	s14, r3
 800457a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800457e:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004582:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004586:	ee77 7a27 	vadd.f32	s15, s14, s15
 800458a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800458e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004592:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8004596:	e061      	b.n	800465c <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004598:	4b5b      	ldr	r3, [pc, #364]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f013 0f20 	tst.w	r3, #32
 80045a0:	d023      	beq.n	80045ea <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045a2:	4c59      	ldr	r4, [pc, #356]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80045a4:	6821      	ldr	r1, [r4, #0]
 80045a6:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80045aa:	4b5a      	ldr	r3, [pc, #360]	; (8004714 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 80045ac:	40cb      	lsrs	r3, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045ae:	ee07 3a10 	vmov	s14, r3
 80045b2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80045b6:	ee06 2a90 	vmov	s13, r2
 80045ba:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 80045be:	eec7 6a06 	vdiv.f32	s13, s14, s12
 80045c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c8:	ee07 3a10 	vmov	s14, r3
 80045cc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80045d0:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80045d4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80045d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80045e8:	e038      	b.n	800465c <HAL_RCCEx_GetPLL2ClockFreq+0x138>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045ea:	ee07 2a10 	vmov	s14, r2
 80045ee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80045f2:	ed9f 6a49 	vldr	s12, [pc, #292]	; 8004718 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 80045f6:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80045fa:	4b43      	ldr	r3, [pc, #268]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80045fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004602:	ee07 3a10 	vmov	s14, r3
 8004606:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800460a:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800460e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004616:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800461a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800461e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004622:	e01b      	b.n	800465c <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004624:	ee07 2a10 	vmov	s14, r2
 8004628:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800462c:	ed9f 6a37 	vldr	s12, [pc, #220]	; 800470c <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8004630:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004634:	4b34      	ldr	r3, [pc, #208]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800463c:	ee07 3a10 	vmov	s14, r3
 8004640:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004644:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004648:	ee67 7a86 	vmul.f32	s15, s15, s12
 800464c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004650:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004654:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004658:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800465c:	4a2a      	ldr	r2, [pc, #168]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800465e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004660:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004664:	ee07 3a10 	vmov	s14, r3
 8004668:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800466c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004670:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800467c:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004680:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004682:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004686:	ee07 3a10 	vmov	s14, r3
 800468a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800468e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800469a:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800469e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80046a0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80046a4:	ee07 3a90 	vmov	s15, r3
 80046a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ac:	ee77 7a86 	vadd.f32	s15, s15, s12
 80046b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046b4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80046b8:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80046bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046c0:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046c2:	ee07 2a10 	vmov	s14, r2
 80046c6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80046ca:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800471c <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 80046ce:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80046d2:	4b0d      	ldr	r3, [pc, #52]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80046d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046da:	ee07 3a10 	vmov	s14, r3
 80046de:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80046e2:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80046e6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80046ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80046fa:	e7af      	b.n	800465c <HAL_RCCEx_GetPLL2ClockFreq+0x138>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004700:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004702:	6083      	str	r3, [r0, #8]
}
 8004704:	e7da      	b.n	80046bc <HAL_RCCEx_GetPLL2ClockFreq+0x198>
 8004706:	bf00      	nop
 8004708:	58024400 	.word	0x58024400
 800470c:	4a742400 	.word	0x4a742400
 8004710:	39000000 	.word	0x39000000
 8004714:	03d09000 	.word	0x03d09000
 8004718:	4c742400 	.word	0x4c742400
 800471c:	4bbebc20 	.word	0x4bbebc20

08004720 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8004720:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004722:	4978      	ldr	r1, [pc, #480]	; (8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004724:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004726:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004728:	f3c2 5205 	ubfx	r2, r2, #20, #6
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 800472c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800472e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004732:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004734:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8004738:	fb03 f301 	mul.w	r3, r3, r1
  if (pll3m != 0U)
 800473c:	2a00      	cmp	r2, #0
 800473e:	f000 80db 	beq.w	80048f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
 8004742:	f004 0403 	and.w	r4, r4, #3
 8004746:	ee07 3a90 	vmov	s15, r3
 800474a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 800474e:	2c01      	cmp	r4, #1
 8004750:	d066      	beq.n	8004820 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 8004752:	b1fc      	cbz	r4, 8004794 <HAL_RCCEx_GetPLL3ClockFreq+0x74>
 8004754:	2c02      	cmp	r4, #2
 8004756:	f000 80b2 	beq.w	80048be <HAL_RCCEx_GetPLL3ClockFreq+0x19e>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800475a:	ee07 2a10 	vmov	s14, r2
 800475e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004762:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8004908 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8004766:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800476a:	4b66      	ldr	r3, [pc, #408]	; (8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004772:	ee07 3a10 	vmov	s14, r3
 8004776:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800477a:	ed9f 6a64 	vldr	s12, [pc, #400]	; 800490c <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800477e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004786:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800478a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800478e:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8004792:	e061      	b.n	8004858 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004794:	4b5b      	ldr	r3, [pc, #364]	; (8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f013 0f20 	tst.w	r3, #32
 800479c:	d023      	beq.n	80047e6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800479e:	4c59      	ldr	r4, [pc, #356]	; (8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80047a0:	6821      	ldr	r1, [r4, #0]
 80047a2:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80047a6:	4b5a      	ldr	r3, [pc, #360]	; (8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 80047a8:	40cb      	lsrs	r3, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047aa:	ee07 3a10 	vmov	s14, r3
 80047ae:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80047b2:	ee06 2a90 	vmov	s13, r2
 80047b6:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 80047ba:	eec7 6a06 	vdiv.f32	s13, s14, s12
 80047be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c4:	ee07 3a10 	vmov	s14, r3
 80047c8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80047cc:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 800490c <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 80047d0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80047d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80047e4:	e038      	b.n	8004858 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047e6:	ee07 2a10 	vmov	s14, r2
 80047ea:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80047ee:	ed9f 6a49 	vldr	s12, [pc, #292]	; 8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 80047f2:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80047f6:	4b43      	ldr	r3, [pc, #268]	; (8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047fe:	ee07 3a10 	vmov	s14, r3
 8004802:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004806:	ed9f 6a41 	vldr	s12, [pc, #260]	; 800490c <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800480a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800480e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004812:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004816:	ee77 7a87 	vadd.f32	s15, s15, s14
 800481a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800481e:	e01b      	b.n	8004858 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004820:	ee07 2a10 	vmov	s14, r2
 8004824:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004828:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8004908 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 800482c:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004830:	4b34      	ldr	r3, [pc, #208]	; (8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004838:	ee07 3a10 	vmov	s14, r3
 800483c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004840:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800490c <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004844:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800484c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004850:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004854:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004858:	4a2a      	ldr	r2, [pc, #168]	; (8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800485a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800485c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004860:	ee07 3a10 	vmov	s14, r3
 8004864:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004868:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800486c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004878:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800487c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800487e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004882:	ee07 3a10 	vmov	s14, r3
 8004886:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800488a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800488e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004896:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800489a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800489c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80048a0:	ee07 3a90 	vmov	s15, r3
 80048a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a8:	ee77 7a86 	vadd.f32	s15, s15, s12
 80048ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80048b4:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80048b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048bc:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048be:	ee07 2a10 	vmov	s14, r2
 80048c2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80048c6:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8004918 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 80048ca:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80048ce:	4b0d      	ldr	r3, [pc, #52]	; (8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d6:	ee07 3a10 	vmov	s14, r3
 80048da:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80048de:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 800490c <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 80048e2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80048e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80048f6:	e7af      	b.n	8004858 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80048fc:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80048fe:	6083      	str	r3, [r0, #8]
}
 8004900:	e7da      	b.n	80048b8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>
 8004902:	bf00      	nop
 8004904:	58024400 	.word	0x58024400
 8004908:	4a742400 	.word	0x4a742400
 800490c:	39000000 	.word	0x39000000
 8004910:	03d09000 	.word	0x03d09000
 8004914:	4c742400 	.word	0x4c742400
 8004918:	4bbebc20 	.word	0x4bbebc20

0800491c <HAL_RCCEx_GetPLL1ClockFreq>:
{
 800491c:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800491e:	4978      	ldr	r1, [pc, #480]	; (8004b00 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004920:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8004922:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004924:	f3c2 1205 	ubfx	r2, r2, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004928:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800492a:	f003 0301 	and.w	r3, r3, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800492e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004930:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8004934:	fb03 f301 	mul.w	r3, r3, r1
  if (pll1m != 0U)
 8004938:	2a00      	cmp	r2, #0
 800493a:	f000 80db 	beq.w	8004af4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
 800493e:	f004 0403 	and.w	r4, r4, #3
 8004942:	ee07 3a90 	vmov	s15, r3
 8004946:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 800494a:	2c01      	cmp	r4, #1
 800494c:	d066      	beq.n	8004a1c <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 800494e:	b1fc      	cbz	r4, 8004990 <HAL_RCCEx_GetPLL1ClockFreq+0x74>
 8004950:	2c02      	cmp	r4, #2
 8004952:	f000 80b2 	beq.w	8004aba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004956:	ee07 2a10 	vmov	s14, r2
 800495a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800495e:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8004b04 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8004962:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004966:	4b66      	ldr	r3, [pc, #408]	; (8004b00 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800496e:	ee07 3a10 	vmov	s14, r3
 8004972:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004976:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8004b08 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 800497a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800497e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004982:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004986:	ee77 7a87 	vadd.f32	s15, s15, s14
 800498a:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 800498e:	e061      	b.n	8004a54 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004990:	4b5b      	ldr	r3, [pc, #364]	; (8004b00 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f013 0f20 	tst.w	r3, #32
 8004998:	d023      	beq.n	80049e2 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800499a:	4c59      	ldr	r4, [pc, #356]	; (8004b00 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800499c:	6821      	ldr	r1, [r4, #0]
 800499e:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80049a2:	4b5a      	ldr	r3, [pc, #360]	; (8004b0c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>)
 80049a4:	40cb      	lsrs	r3, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049a6:	ee07 3a10 	vmov	s14, r3
 80049aa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80049ae:	ee06 2a90 	vmov	s13, r2
 80049b2:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 80049b6:	eec7 6a06 	vdiv.f32	s13, s14, s12
 80049ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80049bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c0:	ee07 3a10 	vmov	s14, r3
 80049c4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80049c8:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8004b08 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 80049cc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80049d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80049e0:	e038      	b.n	8004a54 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049e2:	ee07 2a10 	vmov	s14, r2
 80049e6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80049ea:	ed9f 6a49 	vldr	s12, [pc, #292]	; 8004b10 <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 80049ee:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80049f2:	4b43      	ldr	r3, [pc, #268]	; (8004b00 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80049f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049fa:	ee07 3a10 	vmov	s14, r3
 80049fe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004a02:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8004b08 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8004a06:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a16:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004a1a:	e01b      	b.n	8004a54 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a1c:	ee07 2a10 	vmov	s14, r2
 8004a20:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004a24:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8004b04 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8004a28:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004a2c:	4b34      	ldr	r3, [pc, #208]	; (8004b00 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a34:	ee07 3a10 	vmov	s14, r3
 8004a38:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004a3c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8004b08 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8004a40:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a50:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8004a54:	4a2a      	ldr	r2, [pc, #168]	; (8004b00 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004a56:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004a58:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004a5c:	ee07 3a10 	vmov	s14, r3
 8004a60:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004a64:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004a68:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a74:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8004a78:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004a7a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004a7e:	ee07 3a10 	vmov	s14, r3
 8004a82:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004a86:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004a8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a92:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8004a96:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004a98:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004a9c:	ee07 3a90 	vmov	s15, r3
 8004aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa4:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004aa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aac:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004ab0:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8004ab4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ab8:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004aba:	ee07 2a10 	vmov	s14, r2
 8004abe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004ac2:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8004b14 <HAL_RCCEx_GetPLL1ClockFreq+0x1f8>
 8004ac6:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004aca:	4b0d      	ldr	r3, [pc, #52]	; (8004b00 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad2:	ee07 3a10 	vmov	s14, r3
 8004ad6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004ada:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8004b08 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8004ade:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ae6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004aea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004aee:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8004af2:	e7af      	b.n	8004a54 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004af8:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004afa:	6083      	str	r3, [r0, #8]
}
 8004afc:	e7da      	b.n	8004ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x198>
 8004afe:	bf00      	nop
 8004b00:	58024400 	.word	0x58024400
 8004b04:	4a742400 	.word	0x4a742400
 8004b08:	39000000 	.word	0x39000000
 8004b0c:	03d09000 	.word	0x03d09000
 8004b10:	4c742400 	.word	0x4c742400
 8004b14:	4bbebc20 	.word	0x4bbebc20

08004b18 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8004b18:	b500      	push	{lr}
 8004b1a:	b08b      	sub	sp, #44	; 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004b1c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8004b20:	d017      	beq.n	8004b52 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004b22:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004b26:	d044      	beq.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004b28:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004b2c:	d074      	beq.n	8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004b2e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8004b32:	f000 80a7 	beq.w	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004b36:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8004b3a:	f000 80d9 	beq.w	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004b3e:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8004b42:	f000 8107 	beq.w	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004b46:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8004b4a:	f000 8129 	beq.w	8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
      frequency = 0;
 8004b4e:	2000      	movs	r0, #0
 8004b50:	e00c      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004b52:	4ba3      	ldr	r3, [pc, #652]	; (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b56:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	f200 8132 	bhi.w	8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 8004b60:	e8df f003 	tbb	[pc, r3]
 8004b64:	03110c07 	.word	0x03110c07
 8004b68:	16          	.byte	0x16
 8004b69:	00          	.byte	0x00
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b6a:	489e      	ldr	r0, [pc, #632]	; (8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
}
 8004b6c:	b00b      	add	sp, #44	; 0x2c
 8004b6e:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b72:	a807      	add	r0, sp, #28
 8004b74:	f7ff fed2 	bl	800491c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b78:	9808      	ldr	r0, [sp, #32]
          break;
 8004b7a:	e7f7      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b7c:	a804      	add	r0, sp, #16
 8004b7e:	f7ff fcd1 	bl	8004524 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004b82:	9804      	ldr	r0, [sp, #16]
          break;
 8004b84:	e7f2      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b86:	a801      	add	r0, sp, #4
 8004b88:	f7ff fdca 	bl	8004720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004b8c:	9801      	ldr	r0, [sp, #4]
          break;
 8004b8e:	e7ed      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004b90:	4b93      	ldr	r3, [pc, #588]	; (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== 0U)
 8004b94:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004b98:	f000 8116 	beq.w	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8004b9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ba0:	f000 8114 	beq.w	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8004ba4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ba8:	d001      	beq.n	8004bae <HAL_RCCEx_GetPeriphCLKFreq+0x96>
            frequency = 0;
 8004baa:	2000      	movs	r0, #0
 8004bac:	e7de      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
            frequency = HSE_VALUE;
 8004bae:	488e      	ldr	r0, [pc, #568]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004bb0:	e7dc      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8004bb2:	4b8b      	ldr	r3, [pc, #556]	; (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8004bba:	2b80      	cmp	r3, #128	; 0x80
 8004bbc:	d025      	beq.n	8004c0a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8004bbe:	d808      	bhi.n	8004bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8004bc0:	b1f3      	cbz	r3, 8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8004bc2:	2b40      	cmp	r3, #64	; 0x40
 8004bc4:	f040 8104 	bne.w	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bc8:	a804      	add	r0, sp, #16
 8004bca:	f7ff fcab 	bl	8004524 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004bce:	9804      	ldr	r0, [sp, #16]
          break;
 8004bd0:	e7cc      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
      switch (saiclocksource)
 8004bd2:	2bc0      	cmp	r3, #192	; 0xc0
 8004bd4:	d012      	beq.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8004bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bda:	f040 80f9 	bne.w	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004bde:	4b80      	ldr	r3, [pc, #512]	; (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== 0U)
 8004be2:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004be6:	f000 80f5 	beq.w	8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8004bea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bee:	f000 80f3 	beq.w	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8004bf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bf6:	d00d      	beq.n	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
            frequency = 0;
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	e7b7      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004bfc:	4879      	ldr	r0, [pc, #484]	; (8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004bfe:	e7b5      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c00:	a807      	add	r0, sp, #28
 8004c02:	f7ff fe8b 	bl	800491c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c06:	9808      	ldr	r0, [sp, #32]
          break;
 8004c08:	e7b0      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c0a:	a801      	add	r0, sp, #4
 8004c0c:	f7ff fd88 	bl	8004720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004c10:	9801      	ldr	r0, [sp, #4]
          break;
 8004c12:	e7ab      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
            frequency = HSE_VALUE;
 8004c14:	4874      	ldr	r0, [pc, #464]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004c16:	e7a9      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004c18:	4b71      	ldr	r3, [pc, #452]	; (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1c:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8004c20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c24:	d027      	beq.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8004c26:	d809      	bhi.n	8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8004c28:	b303      	cbz	r3, 8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004c2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c2e:	f040 80d5 	bne.w	8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c32:	a804      	add	r0, sp, #16
 8004c34:	f7ff fc76 	bl	8004524 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004c38:	9804      	ldr	r0, [sp, #16]
          break;
 8004c3a:	e797      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
      switch (saiclocksource)
 8004c3c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c40:	d012      	beq.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8004c42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c46:	f040 80c9 	bne.w	8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004c4a:	4b65      	ldr	r3, [pc, #404]	; (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== 0U)
 8004c4e:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004c52:	f000 80cf 	beq.w	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8004c56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c5a:	f000 80cd 	beq.w	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8004c5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c62:	d00d      	beq.n	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            frequency = 0;
 8004c64:	2000      	movs	r0, #0
 8004c66:	e781      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c68:	485e      	ldr	r0, [pc, #376]	; (8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004c6a:	e77f      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c6c:	a807      	add	r0, sp, #28
 8004c6e:	f7ff fe55 	bl	800491c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c72:	9808      	ldr	r0, [sp, #32]
          break;
 8004c74:	e77a      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c76:	a801      	add	r0, sp, #4
 8004c78:	f7ff fd52 	bl	8004720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004c7c:	9801      	ldr	r0, [sp, #4]
          break;
 8004c7e:	e775      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
            frequency = HSE_VALUE;
 8004c80:	4859      	ldr	r0, [pc, #356]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004c82:	e773      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004c84:	4b56      	ldr	r3, [pc, #344]	; (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c88:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8004c8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c90:	d027      	beq.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8004c92:	d809      	bhi.n	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8004c94:	b303      	cbz	r3, 8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
 8004c96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c9a:	f040 80af 	bne.w	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c9e:	a804      	add	r0, sp, #16
 8004ca0:	f7ff fc40 	bl	8004524 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ca4:	9804      	ldr	r0, [sp, #16]
          break;
 8004ca6:	e761      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
      switch (saiclocksource)
 8004ca8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004cac:	d012      	beq.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004cae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cb2:	f040 80a3 	bne.w	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004cb6:	4b4a      	ldr	r3, [pc, #296]	; (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== 0U)
 8004cba:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004cbe:	f000 809f 	beq.w	8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8004cc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cc6:	f000 809d 	beq.w	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8004cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cce:	d00d      	beq.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
            frequency = 0;
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	e74b      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004cd4:	4843      	ldr	r0, [pc, #268]	; (8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004cd6:	e749      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004cd8:	a807      	add	r0, sp, #28
 8004cda:	f7ff fe1f 	bl	800491c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004cde:	9808      	ldr	r0, [sp, #32]
          break;
 8004ce0:	e744      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ce2:	a801      	add	r0, sp, #4
 8004ce4:	f7ff fd1c 	bl	8004720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004ce8:	9801      	ldr	r0, [sp, #4]
          break;
 8004cea:	e73f      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
            frequency = HSE_VALUE;
 8004cec:	483e      	ldr	r0, [pc, #248]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004cee:	e73d      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004cf0:	4b3b      	ldr	r3, [pc, #236]	; (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8004cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cfc:	d023      	beq.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004cfe:	d808      	bhi.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0x1fa>
 8004d00:	b1e3      	cbz	r3, 8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8004d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d06:	d17f      	bne.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d08:	a804      	add	r0, sp, #16
 8004d0a:	f7ff fc0b 	bl	8004524 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004d0e:	9804      	ldr	r0, [sp, #16]
          break;
 8004d10:	e72c      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
      switch (srcclk)
 8004d12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d16:	d00f      	beq.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 8004d18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d1c:	d174      	bne.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004d1e:	4b30      	ldr	r3, [pc, #192]	; (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004d22:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004d26:	d071      	beq.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004d28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d2c:	d070      	beq.n	8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d32:	d00d      	beq.n	8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
            frequency = 0;
 8004d34:	2000      	movs	r0, #0
 8004d36:	e719      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d38:	482a      	ldr	r0, [pc, #168]	; (8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004d3a:	e717      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d3c:	a807      	add	r0, sp, #28
 8004d3e:	f7ff fded 	bl	800491c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d42:	9808      	ldr	r0, [sp, #32]
          break;
 8004d44:	e712      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d46:	a801      	add	r0, sp, #4
 8004d48:	f7ff fcea 	bl	8004720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004d4c:	9801      	ldr	r0, [sp, #4]
          break;
 8004d4e:	e70d      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
            frequency = HSE_VALUE;
 8004d50:	4825      	ldr	r0, [pc, #148]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004d52:	e70b      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004d54:	4b22      	ldr	r3, [pc, #136]	; (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8004d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d60:	d00a      	beq.n	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004d62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d66:	d00c      	beq.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004d68:	b10b      	cbz	r3, 8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
          frequency = 0;
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	e6fe      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d6e:	a804      	add	r0, sp, #16
 8004d70:	f7ff fbd8 	bl	8004524 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004d74:	9804      	ldr	r0, [sp, #16]
          break;
 8004d76:	e6f9      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d78:	a801      	add	r0, sp, #4
 8004d7a:	f7ff fcd1 	bl	8004720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004d7e:	9803      	ldr	r0, [sp, #12]
          break;
 8004d80:	e6f4      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004d82:	4b17      	ldr	r3, [pc, #92]	; (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004d86:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8004d8a:	d043      	beq.n	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004d8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d90:	d042      	beq.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004d92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d96:	d001      	beq.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x284>
            frequency = 0;
 8004d98:	2000      	movs	r0, #0
 8004d9a:	e6e7      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
            frequency = HSE_VALUE;
 8004d9c:	4812      	ldr	r0, [pc, #72]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004d9e:	e6e5      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004da0:	4b0f      	ldr	r3, [pc, #60]	; (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 8004da4:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8004da8:	d002      	beq.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
 8004daa:	b933      	cbnz	r3, 8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
          frequency = 0;
 8004dac:	2000      	movs	r0, #0
  return frequency;
 8004dae:	e6dd      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004db0:	a807      	add	r0, sp, #28
 8004db2:	f7ff fdb3 	bl	800491c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004db6:	9808      	ldr	r0, [sp, #32]
          break;
 8004db8:	e6d8      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dba:	a804      	add	r0, sp, #16
 8004dbc:	f7ff fbb2 	bl	8004524 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004dc0:	9806      	ldr	r0, [sp, #24]
          break;
 8004dc2:	e6d3      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = 0;
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	e6d1      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
            frequency = HSI_VALUE;
 8004dc8:	4808      	ldr	r0, [pc, #32]	; (8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004dca:	e6cf      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
            frequency = CSI_VALUE;
 8004dcc:	4808      	ldr	r0, [pc, #32]	; (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004dce:	e6cd      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = 0;
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	e6cb      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
            frequency = HSI_VALUE;
 8004dd4:	4805      	ldr	r0, [pc, #20]	; (8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004dd6:	e6c9      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
            frequency = CSI_VALUE;
 8004dd8:	4805      	ldr	r0, [pc, #20]	; (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004dda:	e6c7      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = 0;
 8004ddc:	2000      	movs	r0, #0
 8004dde:	e6c5      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8004de0:	58024400 	.word	0x58024400
 8004de4:	00bb8000 	.word	0x00bb8000
 8004de8:	017d7840 	.word	0x017d7840
 8004dec:	03d09000 	.word	0x03d09000
 8004df0:	003d0900 	.word	0x003d0900
            frequency = HSI_VALUE;
 8004df4:	4809      	ldr	r0, [pc, #36]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8004df6:	e6b9      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
            frequency = CSI_VALUE;
 8004df8:	4809      	ldr	r0, [pc, #36]	; (8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8004dfa:	e6b7      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = 0;
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	e6b5      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
            frequency = HSI_VALUE;
 8004e00:	4806      	ldr	r0, [pc, #24]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8004e02:	e6b3      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
            frequency = CSI_VALUE;
 8004e04:	4806      	ldr	r0, [pc, #24]	; (8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8004e06:	e6b1      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          frequency = 0;
 8004e08:	2000      	movs	r0, #0
 8004e0a:	e6af      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
            frequency = HSI_VALUE;
 8004e0c:	4803      	ldr	r0, [pc, #12]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8004e0e:	e6ad      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
            frequency = CSI_VALUE;
 8004e10:	4803      	ldr	r0, [pc, #12]	; (8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8004e12:	e6ab      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
            frequency = HSI_VALUE;
 8004e14:	4801      	ldr	r0, [pc, #4]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8004e16:	e6a9      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
            frequency = CSI_VALUE;
 8004e18:	4801      	ldr	r0, [pc, #4]	; (8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8004e1a:	e6a7      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8004e1c:	03d09000 	.word	0x03d09000
 8004e20:	003d0900 	.word	0x003d0900

08004e24 <HAL_RCCEx_GetD1SysClockFreq>:
{
 8004e24:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004e26:	f7fe fb59 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 8004e2a:	4b06      	ldr	r3, [pc, #24]	; (8004e44 <HAL_RCCEx_GetD1SysClockFreq+0x20>)
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004e32:	4a05      	ldr	r2, [pc, #20]	; (8004e48 <HAL_RCCEx_GetD1SysClockFreq+0x24>)
 8004e34:	5cd3      	ldrb	r3, [r2, r3]
 8004e36:	f003 031f 	and.w	r3, r3, #31
 8004e3a:	40d8      	lsrs	r0, r3
 8004e3c:	4b03      	ldr	r3, [pc, #12]	; (8004e4c <HAL_RCCEx_GetD1SysClockFreq+0x28>)
 8004e3e:	6018      	str	r0, [r3, #0]
}
 8004e40:	bd08      	pop	{r3, pc}
 8004e42:	bf00      	nop
 8004e44:	58024400 	.word	0x58024400
 8004e48:	0800ba30 	.word	0x0800ba30
 8004e4c:	20000014 	.word	0x20000014

08004e50 <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004e50:	b1d0      	cbz	r0, 8004e88 <HAL_RNG_Init+0x38>
{
 8004e52:	b510      	push	{r4, lr}
 8004e54:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004e56:	7a43      	ldrb	r3, [r0, #9]
 8004e58:	b193      	cbz	r3, 8004e80 <HAL_RNG_Init+0x30>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	7263      	strb	r3, [r4, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8004e5e:	6822      	ldr	r2, [r4, #0]
 8004e60:	6813      	ldr	r3, [r2, #0]
 8004e62:	f023 0320 	bic.w	r3, r3, #32
 8004e66:	6861      	ldr	r1, [r4, #4]
 8004e68:	430b      	orrs	r3, r1
 8004e6a:	6013      	str	r3, [r2, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004e6c:	6822      	ldr	r2, [r4, #0]
 8004e6e:	6813      	ldr	r3, [r2, #0]
 8004e70:	f043 0304 	orr.w	r3, r3, #4
 8004e74:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004e76:	2301      	movs	r3, #1
 8004e78:	7263      	strb	r3, [r4, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	60e0      	str	r0, [r4, #12]

  /* Return function status */
  return HAL_OK;
}
 8004e7e:	bd10      	pop	{r4, pc}
    hrng->Lock = HAL_UNLOCKED;
 8004e80:	7203      	strb	r3, [r0, #8]
    HAL_RNG_MspInit(hrng);
 8004e82:	f005 fc5f 	bl	800a744 <HAL_RNG_MspInit>
 8004e86:	e7e8      	b.n	8004e5a <HAL_RNG_Init+0xa>
    return HAL_ERROR;
 8004e88:	2001      	movs	r0, #1
}
 8004e8a:	4770      	bx	lr

08004e8c <HAL_RNG_GenerateRandomNumber>:
{
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004e8c:	7a03      	ldrb	r3, [r0, #8]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d02b      	beq.n	8004eea <HAL_RNG_GenerateRandomNumber+0x5e>
{
 8004e92:	b570      	push	{r4, r5, r6, lr}
 8004e94:	460d      	mov	r5, r1
 8004e96:	4604      	mov	r4, r0
  __HAL_LOCK(hrng);
 8004e98:	2301      	movs	r3, #1
 8004e9a:	7203      	strb	r3, [r0, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004e9c:	7a43      	ldrb	r3, [r0, #9]
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d003      	beq.n	8004eac <HAL_RNG_GenerateRandomNumber+0x20>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    status = HAL_ERROR;
 8004ea4:	2001      	movs	r0, #1
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	7223      	strb	r3, [r4, #8]

  return status;
}
 8004eaa:	bd70      	pop	{r4, r5, r6, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8004eac:	2302      	movs	r3, #2
 8004eae:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 8004eb0:	f7fb fbf2 	bl	8000698 <HAL_GetTick>
 8004eb4:	4606      	mov	r6, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	f012 0f01 	tst.w	r2, #1
 8004ebe:	d10d      	bne.n	8004edc <HAL_RNG_GenerateRandomNumber+0x50>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004ec0:	f7fb fbea 	bl	8000698 <HAL_GetTick>
 8004ec4:	1b80      	subs	r0, r0, r6
 8004ec6:	2802      	cmp	r0, #2
 8004ec8:	d9f5      	bls.n	8004eb6 <HAL_RNG_GenerateRandomNumber+0x2a>
        hrng->State = HAL_RNG_STATE_READY;
 8004eca:	2001      	movs	r0, #1
 8004ecc:	7260      	strb	r0, [r4, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 8004ece:	68e3      	ldr	r3, [r4, #12]
 8004ed0:	f043 0302 	orr.w	r3, r3, #2
 8004ed4:	60e3      	str	r3, [r4, #12]
        __HAL_UNLOCK(hrng);
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	7223      	strb	r3, [r4, #8]
        return HAL_ERROR;
 8004eda:	e7e6      	b.n	8004eaa <HAL_RNG_GenerateRandomNumber+0x1e>
    hrng->RandomNumber = hrng->Instance->DR;
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 8004ee0:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	7263      	strb	r3, [r4, #9]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	e7dd      	b.n	8004ea6 <HAL_RNG_GenerateRandomNumber+0x1a>
  __HAL_LOCK(hrng);
 8004eea:	2002      	movs	r0, #2
}
 8004eec:	4770      	bx	lr

08004eee <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004eee:	b470      	push	{r4, r5, r6}
 8004ef0:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004ef6:	64e0      	str	r0, [r4, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004ef8:	6865      	ldr	r5, [r4, #4]
 8004efa:	2d02      	cmp	r5, #2
 8004efc:	bf14      	ite	ne
 8004efe:	2000      	movne	r0, #0
 8004f00:	2001      	moveq	r0, #1
 8004f02:	2d00      	cmp	r5, #0
 8004f04:	bf08      	it	eq
 8004f06:	2001      	moveq	r0, #1
 8004f08:	b1b0      	cbz	r0, 8004f38 <SAI_InitI2S+0x4a>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	6520      	str	r0, [r4, #80]	; 0x50
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8004f0e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004f12:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004f14:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004f18:	6760      	str	r0, [r4, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8004f1e:	6723      	str	r3, [r4, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8004f20:	f013 0f01 	tst.w	r3, #1
 8004f24:	d14c      	bne.n	8004fc0 <SAI_InitI2S+0xd2>
  {
    return HAL_ERROR;
  }

  switch (protocol)
 8004f26:	b151      	cbz	r1, 8004f3e <SAI_InitI2S+0x50>
 8004f28:	2902      	cmp	r1, #2
 8004f2a:	d813      	bhi.n	8004f54 <SAI_InitI2S+0x66>
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
      break;
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8004f2c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004f30:	6620      	str	r0, [r4, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8004f32:	2000      	movs	r0, #0
 8004f34:	6660      	str	r0, [r4, #100]	; 0x64
      break;
 8004f36:	e007      	b.n	8004f48 <SAI_InitI2S+0x5a>
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004f38:	2001      	movs	r0, #1
 8004f3a:	6520      	str	r0, [r4, #80]	; 0x50
 8004f3c:	e7e7      	b.n	8004f0e <SAI_InitI2S+0x20>
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004f3e:	2000      	movs	r0, #0
 8004f40:	6620      	str	r0, [r4, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8004f42:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8004f46:	6665      	str	r5, [r4, #100]	; 0x64
      status = HAL_ERROR;
      break;
  }

  /* Frame definition */
  switch (datasize)
 8004f48:	2a03      	cmp	r2, #3
 8004f4a:	d834      	bhi.n	8004fb6 <SAI_InitI2S+0xc8>
 8004f4c:	e8df f002 	tbb	[pc, r2]
 8004f50:	291f1604 	.word	0x291f1604
      status = HAL_ERROR;
 8004f54:	2001      	movs	r0, #1
 8004f56:	e7f7      	b.n	8004f48 <SAI_InitI2S+0x5a>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004f58:	2580      	movs	r5, #128	; 0x80
 8004f5a:	64a5      	str	r5, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004f5c:	085b      	lsrs	r3, r3, #1
 8004f5e:	015d      	lsls	r5, r3, #5
 8004f60:	6565      	str	r5, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8004f62:	011b      	lsls	r3, r3, #4
 8004f64:	65a3      	str	r3, [r4, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004f66:	2340      	movs	r3, #64	; 0x40
 8004f68:	66e3      	str	r3, [r4, #108]	; 0x6c
      break;
    default :
      status = HAL_ERROR;
      break;
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004f6a:	2902      	cmp	r1, #2
 8004f6c:	d129      	bne.n	8004fc2 <SAI_InitI2S+0xd4>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8004f6e:	2a01      	cmp	r2, #1
 8004f70:	d023      	beq.n	8004fba <SAI_InitI2S+0xcc>
    {
      hsai->SlotInit.FirstBitOffset = 16;
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8004f72:	2a02      	cmp	r2, #2
 8004f74:	d125      	bne.n	8004fc2 <SAI_InitI2S+0xd4>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8004f76:	2308      	movs	r3, #8
 8004f78:	66a3      	str	r3, [r4, #104]	; 0x68
 8004f7a:	e022      	b.n	8004fc2 <SAI_InitI2S+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004f7c:	2580      	movs	r5, #128	; 0x80
 8004f7e:	64a5      	str	r5, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004f80:	085b      	lsrs	r3, r3, #1
 8004f82:	019e      	lsls	r6, r3, #6
 8004f84:	6566      	str	r6, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004f86:	015b      	lsls	r3, r3, #5
 8004f88:	65a3      	str	r3, [r4, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004f8a:	66e5      	str	r5, [r4, #108]	; 0x6c
      break;
 8004f8c:	e7ed      	b.n	8004f6a <SAI_InitI2S+0x7c>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004f8e:	25c0      	movs	r5, #192	; 0xc0
 8004f90:	64a5      	str	r5, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004f92:	085b      	lsrs	r3, r3, #1
 8004f94:	019d      	lsls	r5, r3, #6
 8004f96:	6565      	str	r5, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004f98:	015b      	lsls	r3, r3, #5
 8004f9a:	65a3      	str	r3, [r4, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004f9c:	2380      	movs	r3, #128	; 0x80
 8004f9e:	66e3      	str	r3, [r4, #108]	; 0x6c
      break;
 8004fa0:	e7e3      	b.n	8004f6a <SAI_InitI2S+0x7c>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004fa2:	25e0      	movs	r5, #224	; 0xe0
 8004fa4:	64a5      	str	r5, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004fa6:	085b      	lsrs	r3, r3, #1
 8004fa8:	019d      	lsls	r5, r3, #6
 8004faa:	6565      	str	r5, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004fac:	015b      	lsls	r3, r3, #5
 8004fae:	65a3      	str	r3, [r4, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004fb0:	2380      	movs	r3, #128	; 0x80
 8004fb2:	66e3      	str	r3, [r4, #108]	; 0x6c
      break;
 8004fb4:	e7d9      	b.n	8004f6a <SAI_InitI2S+0x7c>
      status = HAL_ERROR;
 8004fb6:	2001      	movs	r0, #1
 8004fb8:	e7d7      	b.n	8004f6a <SAI_InitI2S+0x7c>
      hsai->SlotInit.FirstBitOffset = 16;
 8004fba:	2310      	movs	r3, #16
 8004fbc:	66a3      	str	r3, [r4, #104]	; 0x68
 8004fbe:	e7d8      	b.n	8004f72 <SAI_InitI2S+0x84>
    return HAL_ERROR;
 8004fc0:	2001      	movs	r0, #1
    }
  }
  return status;
}
 8004fc2:	bc70      	pop	{r4, r5, r6}
 8004fc4:	4770      	bx	lr

08004fc6 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004fc6:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004fc8:	2400      	movs	r4, #0
 8004fca:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004fcc:	64c4      	str	r4, [r0, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004fce:	6845      	ldr	r5, [r0, #4]
 8004fd0:	2d02      	cmp	r5, #2
 8004fd2:	bf14      	ite	ne
 8004fd4:	2400      	movne	r4, #0
 8004fd6:	2401      	moveq	r4, #1
 8004fd8:	2d00      	cmp	r5, #0
 8004fda:	bf08      	it	eq
 8004fdc:	2401      	moveq	r4, #1
 8004fde:	b1dc      	cbz	r4, 8005018 <SAI_InitPCM+0x52>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004fe0:	2401      	movs	r4, #1
 8004fe2:	6504      	str	r4, [r0, #80]	; 0x50
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8004fe4:	2400      	movs	r4, #0
 8004fe6:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8004fe8:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8004fec:	6605      	str	r5, [r0, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8004fee:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8004ff2:	6645      	str	r5, [r0, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8004ff4:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8004ff6:	6703      	str	r3, [r0, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004ff8:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8004ffc:	6744      	str	r4, [r0, #116]	; 0x74

  switch (protocol)
 8004ffe:	2903      	cmp	r1, #3
 8005000:	d00d      	beq.n	800501e <SAI_InitPCM+0x58>
 8005002:	2904      	cmp	r1, #4
 8005004:	d10f      	bne.n	8005026 <SAI_InitPCM+0x60>
  {
    case SAI_PCM_SHORT :
      hsai->FrameInit.ActiveFrameLength = 1;
 8005006:	2101      	movs	r1, #1
 8005008:	6581      	str	r1, [r0, #88]	; 0x58
  HAL_StatusTypeDef status = HAL_OK;
 800500a:	2100      	movs	r1, #0
    default :
      status = HAL_ERROR;
      break;
  }

  switch (datasize)
 800500c:	2a03      	cmp	r2, #3
 800500e:	d829      	bhi.n	8005064 <SAI_InitPCM+0x9e>
 8005010:	e8df f002 	tbb	[pc, r2]
 8005014:	211a140b 	.word	0x211a140b
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005018:	2400      	movs	r4, #0
 800501a:	6504      	str	r4, [r0, #80]	; 0x50
 800501c:	e7e2      	b.n	8004fe4 <SAI_InitPCM+0x1e>
      hsai->FrameInit.ActiveFrameLength = 13;
 800501e:	210d      	movs	r1, #13
 8005020:	6581      	str	r1, [r0, #88]	; 0x58
  HAL_StatusTypeDef status = HAL_OK;
 8005022:	2100      	movs	r1, #0
      break;
 8005024:	e7f2      	b.n	800500c <SAI_InitPCM+0x46>
      status = HAL_ERROR;
 8005026:	2101      	movs	r1, #1
 8005028:	e7f0      	b.n	800500c <SAI_InitPCM+0x46>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800502a:	2280      	movs	r2, #128	; 0x80
 800502c:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005032:	2340      	movs	r3, #64	; 0x40
 8005034:	66c3      	str	r3, [r0, #108]	; 0x6c
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8005036:	4608      	mov	r0, r1
 8005038:	bc30      	pop	{r4, r5}
 800503a:	4770      	bx	lr
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800503c:	2280      	movs	r2, #128	; 0x80
 800503e:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005040:	015b      	lsls	r3, r3, #5
 8005042:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005044:	66c2      	str	r2, [r0, #108]	; 0x6c
      break;
 8005046:	e7f6      	b.n	8005036 <SAI_InitPCM+0x70>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005048:	22c0      	movs	r2, #192	; 0xc0
 800504a:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800504c:	015b      	lsls	r3, r3, #5
 800504e:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005050:	2380      	movs	r3, #128	; 0x80
 8005052:	66c3      	str	r3, [r0, #108]	; 0x6c
      break;
 8005054:	e7ef      	b.n	8005036 <SAI_InitPCM+0x70>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005056:	22e0      	movs	r2, #224	; 0xe0
 8005058:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800505a:	015b      	lsls	r3, r3, #5
 800505c:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800505e:	2380      	movs	r3, #128	; 0x80
 8005060:	66c3      	str	r3, [r0, #108]	; 0x6c
      break;
 8005062:	e7e8      	b.n	8005036 <SAI_InitPCM+0x70>
      status = HAL_ERROR;
 8005064:	2101      	movs	r1, #1
 8005066:	e7e6      	b.n	8005036 <SAI_InitPCM+0x70>

08005068 <SAI_InterruptFlag>:
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if (mode == SAI_MODE_IT)
 8005068:	2901      	cmp	r1, #1
 800506a:	d00a      	beq.n	8005082 <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800506c:	2301      	movs	r3, #1
  {
    tmpIT |= SAI_IT_FREQ;
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800506e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005070:	2a08      	cmp	r2, #8
 8005072:	d008      	beq.n	8005086 <SAI_InterruptFlag+0x1e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT |= SAI_IT_CNRDY;
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005074:	6842      	ldr	r2, [r0, #4]
 8005076:	3a02      	subs	r2, #2
 8005078:	2a01      	cmp	r2, #1
 800507a:	d90c      	bls.n	8005096 <SAI_InterruptFlag+0x2e>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800507c:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 8005080:	4770      	bx	lr
    tmpIT |= SAI_IT_FREQ;
 8005082:	2309      	movs	r3, #9
 8005084:	e7f3      	b.n	800506e <SAI_InterruptFlag+0x6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005086:	6842      	ldr	r2, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005088:	2a01      	cmp	r2, #1
 800508a:	bf18      	it	ne
 800508c:	2a03      	cmpne	r2, #3
 800508e:	d1f1      	bne.n	8005074 <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_CNRDY;
 8005090:	f043 0310 	orr.w	r3, r3, #16
 8005094:	e7ee      	b.n	8005074 <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005096:	f043 0060 	orr.w	r0, r3, #96	; 0x60
 800509a:	4770      	bx	lr

0800509c <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800509c:	4b0e      	ldr	r3, [pc, #56]	; (80050d8 <SAI_Disable+0x3c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a0e      	ldr	r2, [pc, #56]	; (80050dc <SAI_Disable+0x40>)
 80050a2:	fba2 2303 	umull	r2, r3, r2, r3
 80050a6:	0b1b      	lsrs	r3, r3, #12
 80050a8:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80050aa:	6801      	ldr	r1, [r0, #0]
 80050ac:	680a      	ldr	r2, [r1, #0]
 80050ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80050b2:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80050b4:	b13b      	cbz	r3, 80050c6 <SAI_Disable+0x2a>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
    count--;
 80050b6:	3b01      	subs	r3, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80050b8:	6802      	ldr	r2, [r0, #0]
 80050ba:	6812      	ldr	r2, [r2, #0]
 80050bc:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80050c0:	d1f8      	bne.n	80050b4 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80050c2:	2000      	movs	r0, #0

  return status;
}
 80050c4:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80050c6:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 80050ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050ce:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      status = HAL_TIMEOUT;
 80050d2:	2003      	movs	r0, #3
      break;
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	20000014 	.word	0x20000014
 80050dc:	95cbec1b 	.word	0x95cbec1b

080050e0 <HAL_SAI_Init>:
{
 80050e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hsai == NULL)
 80050e4:	2800      	cmp	r0, #0
 80050e6:	f000 81c0 	beq.w	800546a <HAL_SAI_Init+0x38a>
 80050ea:	4604      	mov	r4, r0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80050ec:	f7fb faee 	bl	80006cc <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80050f0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d018      	beq.n	800512a <HAL_SAI_Init+0x4a>
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	49b2      	ldr	r1, [pc, #712]	; (80053c4 <HAL_SAI_Init+0x2e4>)
 80050fc:	4ab2      	ldr	r2, [pc, #712]	; (80053c8 <HAL_SAI_Init+0x2e8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	bf18      	it	ne
 8005102:	428b      	cmpne	r3, r1
 8005104:	d023      	beq.n	800514e <HAL_SAI_Init+0x6e>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005106:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800510a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800510e:	4293      	cmp	r3, r2
 8005110:	bf18      	it	ne
 8005112:	428b      	cmpne	r3, r1
 8005114:	d038      	beq.n	8005188 <HAL_SAI_Init+0xa8>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8005116:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800511a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800511e:	4293      	cmp	r3, r2
 8005120:	bf18      	it	ne
 8005122:	428b      	cmpne	r3, r1
 8005124:	d132      	bne.n	800518c <HAL_SAI_Init+0xac>
    SaiBaseAddress = SAI3;
 8005126:	4ea9      	ldr	r6, [pc, #676]	; (80053cc <HAL_SAI_Init+0x2ec>)
 8005128:	e012      	b.n	8005150 <HAL_SAI_Init+0x70>
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	49a5      	ldr	r1, [pc, #660]	; (80053c4 <HAL_SAI_Init+0x2e4>)
 800512e:	4aa8      	ldr	r2, [pc, #672]	; (80053d0 <HAL_SAI_Init+0x2f0>)
 8005130:	428b      	cmp	r3, r1
 8005132:	bf18      	it	ne
 8005134:	4293      	cmpne	r3, r2
 8005136:	f040 819c 	bne.w	8005472 <HAL_SAI_Init+0x392>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800513a:	6863      	ldr	r3, [r4, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800513c:	2b01      	cmp	r3, #1
 800513e:	d001      	beq.n	8005144 <HAL_SAI_Init+0x64>
      return HAL_ERROR;
 8005140:	2501      	movs	r5, #1
 8005142:	e193      	b.n	800546c <HAL_SAI_Init+0x38c>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8005144:	6c63      	ldr	r3, [r4, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0d6      	beq.n	80050f8 <HAL_SAI_Init+0x18>
      return HAL_ERROR;
 800514a:	2501      	movs	r5, #1
 800514c:	e18e      	b.n	800546c <HAL_SAI_Init+0x38c>
    SaiBaseAddress = SAI1;
 800514e:	4ea1      	ldr	r6, [pc, #644]	; (80053d4 <HAL_SAI_Init+0x2f4>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8005150:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 8005154:	b1e3      	cbz	r3, 8005190 <HAL_SAI_Init+0xb0>
  if(SAI_Disable(hsai) != HAL_OK)
 8005156:	4620      	mov	r0, r4
 8005158:	f7ff ffa0 	bl	800509c <SAI_Disable>
 800515c:	4605      	mov	r5, r0
 800515e:	2800      	cmp	r0, #0
 8005160:	f040 8189 	bne.w	8005476 <HAL_SAI_Init+0x396>
  hsai->State = HAL_SAI_STATE_BUSY;
 8005164:	2302      	movs	r3, #2
 8005166:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 800516a:	68e3      	ldr	r3, [r4, #12]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d017      	beq.n	80051a0 <HAL_SAI_Init+0xc0>
 8005170:	2b02      	cmp	r3, #2
 8005172:	d013      	beq.n	800519c <HAL_SAI_Init+0xbc>
      tmpregisterGCR = 0;
 8005174:	2200      	movs	r2, #0
  switch (hsai->Init.Synchro)
 8005176:	68a3      	ldr	r3, [r4, #8]
 8005178:	3b01      	subs	r3, #1
 800517a:	2b04      	cmp	r3, #4
 800517c:	d812      	bhi.n	80051a4 <HAL_SAI_Init+0xc4>
 800517e:	e8df f003 	tbb	[pc, r3]
 8005182:	1325      	.short	0x1325
 8005184:	1b16      	.short	0x1b16
 8005186:	20          	.byte	0x20
 8005187:	00          	.byte	0x00
    SaiBaseAddress = SAI2;
 8005188:	4e93      	ldr	r6, [pc, #588]	; (80053d8 <HAL_SAI_Init+0x2f8>)
 800518a:	e7e1      	b.n	8005150 <HAL_SAI_Init+0x70>
    SaiBaseAddress = SAI4;
 800518c:	4e93      	ldr	r6, [pc, #588]	; (80053dc <HAL_SAI_Init+0x2fc>)
 800518e:	e7df      	b.n	8005150 <HAL_SAI_Init+0x70>
    hsai->Lock = HAL_UNLOCKED;
 8005190:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 8005194:	4620      	mov	r0, r4
 8005196:	f005 fb29 	bl	800a7ec <HAL_SAI_MspInit>
 800519a:	e7dc      	b.n	8005156 <HAL_SAI_Init+0x76>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800519c:	2220      	movs	r2, #32
      break;
 800519e:	e7ea      	b.n	8005176 <HAL_SAI_Init+0x96>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80051a0:	2210      	movs	r2, #16
 80051a2:	e7e8      	b.n	8005176 <HAL_SAI_Init+0x96>
      syncen_bits = 0;
 80051a4:	2700      	movs	r7, #0
 80051a6:	e013      	b.n	80051d0 <HAL_SAI_Init+0xf0>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80051a8:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 80051ac:	e010      	b.n	80051d0 <HAL_SAI_Init+0xf0>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80051ae:	f042 0201 	orr.w	r2, r2, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80051b2:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 80051b6:	e00b      	b.n	80051d0 <HAL_SAI_Init+0xf0>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 80051b8:	f042 0202 	orr.w	r2, r2, #2
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80051bc:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 80051c0:	e006      	b.n	80051d0 <HAL_SAI_Init+0xf0>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 80051c2:	f042 0203 	orr.w	r2, r2, #3
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80051c6:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 80051ca:	e001      	b.n	80051d0 <HAL_SAI_Init+0xf0>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80051cc:	f44f 6780 	mov.w	r7, #1024	; 0x400
  SaiBaseAddress->GCR = tmpregisterGCR;
 80051d0:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80051d2:	6a23      	ldr	r3, [r4, #32]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d043      	beq.n	8005260 <HAL_SAI_Init+0x180>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	497a      	ldr	r1, [pc, #488]	; (80053c4 <HAL_SAI_Init+0x2e4>)
 80051dc:	4a7a      	ldr	r2, [pc, #488]	; (80053c8 <HAL_SAI_Init+0x2e8>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	bf18      	it	ne
 80051e2:	428b      	cmpne	r3, r1
 80051e4:	f000 80c5 	beq.w	8005372 <HAL_SAI_Init+0x292>
    uint32_t freq = 0;
 80051e8:	2000      	movs	r0, #0
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	497c      	ldr	r1, [pc, #496]	; (80053e0 <HAL_SAI_Init+0x300>)
 80051ee:	4a7d      	ldr	r2, [pc, #500]	; (80053e4 <HAL_SAI_Init+0x304>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	bf18      	it	ne
 80051f4:	428b      	cmpne	r3, r1
 80051f6:	f000 80c1 	beq.w	800537c <HAL_SAI_Init+0x29c>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80051fa:	6823      	ldr	r3, [r4, #0]
 80051fc:	497a      	ldr	r1, [pc, #488]	; (80053e8 <HAL_SAI_Init+0x308>)
 80051fe:	4a7b      	ldr	r2, [pc, #492]	; (80053ec <HAL_SAI_Init+0x30c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	bf18      	it	ne
 8005204:	428b      	cmpne	r3, r1
 8005206:	f000 80be 	beq.w	8005386 <HAL_SAI_Init+0x2a6>
    if (hsai->Instance == SAI4_Block_A)
 800520a:	6822      	ldr	r2, [r4, #0]
 800520c:	4b70      	ldr	r3, [pc, #448]	; (80053d0 <HAL_SAI_Init+0x2f0>)
 800520e:	429a      	cmp	r2, r3
 8005210:	f000 80be 	beq.w	8005390 <HAL_SAI_Init+0x2b0>
    if (hsai->Instance == SAI4_Block_B)
 8005214:	6822      	ldr	r2, [r4, #0]
 8005216:	4b76      	ldr	r3, [pc, #472]	; (80053f0 <HAL_SAI_Init+0x310>)
 8005218:	429a      	cmp	r2, r3
 800521a:	f000 80be 	beq.w	800539a <HAL_SAI_Init+0x2ba>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800521e:	69a3      	ldr	r3, [r4, #24]
 8005220:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005224:	f000 80be 	beq.w	80053a4 <HAL_SAI_Init+0x2c4>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8005228:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800522a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800522e:	f000 80c3 	beq.w	80053b8 <HAL_SAI_Init+0x2d8>
 8005232:	2301      	movs	r3, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8005234:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005238:	0041      	lsls	r1, r0, #1
 800523a:	6a22      	ldr	r2, [r4, #32]
 800523c:	fb03 f302 	mul.w	r3, r3, r2
 8005240:	021b      	lsls	r3, r3, #8
 8005242:	fbb1 f1f3 	udiv	r1, r1, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 8005246:	4b6b      	ldr	r3, [pc, #428]	; (80053f4 <HAL_SAI_Init+0x314>)
 8005248:	fba3 2301 	umull	r2, r3, r3, r1
 800524c:	08db      	lsrs	r3, r3, #3
 800524e:	6263      	str	r3, [r4, #36]	; 0x24
    if ((tmpval % 10U) > 8U)
 8005250:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8005254:	0042      	lsls	r2, r0, #1
 8005256:	1a8a      	subs	r2, r1, r2
 8005258:	2a08      	cmp	r2, #8
 800525a:	d901      	bls.n	8005260 <HAL_SAI_Init+0x180>
      hsai->Init.Mckdiv += 1U;
 800525c:	3301      	adds	r3, #1
 800525e:	6263      	str	r3, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005260:	6862      	ldr	r2, [r4, #4]
 8005262:	2a02      	cmp	r2, #2
 8005264:	bf14      	ite	ne
 8005266:	2300      	movne	r3, #0
 8005268:	2301      	moveq	r3, #1
 800526a:	2a00      	cmp	r2, #0
 800526c:	bf08      	it	eq
 800526e:	2301      	moveq	r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 80c7 	beq.w	8005404 <HAL_SAI_Init+0x324>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005276:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005278:	2b01      	cmp	r3, #1
 800527a:	f000 809f 	beq.w	80053bc <HAL_SAI_Init+0x2dc>
 800527e:	f44f 7800 	mov.w	r8, #512	; 0x200
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8005282:	f7fb fa23 	bl	80006cc <HAL_GetREVID>
 8005286:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800528a:	f0c0 80c4 	bcc.w	8005416 <HAL_SAI_Init+0x336>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800528e:	6822      	ldr	r2, [r4, #0]
 8005290:	6811      	ldr	r1, [r2, #0]
 8005292:	4b59      	ldr	r3, [pc, #356]	; (80053f8 <HAL_SAI_Init+0x318>)
 8005294:	400b      	ands	r3, r1
 8005296:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005298:	6821      	ldr	r1, [r4, #0]
 800529a:	680a      	ldr	r2, [r1, #0]
 800529c:	6863      	ldr	r3, [r4, #4]
 800529e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80052a0:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80052a2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80052a4:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80052a6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80052a8:	4303      	orrs	r3, r0
 80052aa:	ea43 0308 	orr.w	r3, r3, r8
                            ckstr_bits | syncen_bits |                             \
 80052ae:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80052b0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 80052b2:	4303      	orrs	r3, r0
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80052b4:	6960      	ldr	r0, [r4, #20]
 80052b6:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80052b8:	69a0      	ldr	r0, [r4, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80052ba:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80052bc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80052be:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80052c2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80052c4:	4303      	orrs	r3, r0
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80052c6:	6920      	ldr	r0, [r4, #16]
 80052c8:	4303      	orrs	r3, r0
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80052ca:	4313      	orrs	r3, r2
 80052cc:	600b      	str	r3, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80052ce:	6822      	ldr	r2, [r4, #0]
 80052d0:	6851      	ldr	r1, [r2, #4]
 80052d2:	4b4a      	ldr	r3, [pc, #296]	; (80053fc <HAL_SAI_Init+0x31c>)
 80052d4:	400b      	ands	r3, r1
 80052d6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80052d8:	6821      	ldr	r1, [r4, #0]
 80052da:	684a      	ldr	r2, [r1, #4]
 80052dc:	69e3      	ldr	r3, [r4, #28]
 80052de:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80052e0:	4303      	orrs	r3, r0
 80052e2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80052e4:	4303      	orrs	r3, r0
 80052e6:	4313      	orrs	r3, r2
 80052e8:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80052ea:	6822      	ldr	r2, [r4, #0]
 80052ec:	6891      	ldr	r1, [r2, #8]
 80052ee:	4b44      	ldr	r3, [pc, #272]	; (8005400 <HAL_SAI_Init+0x320>)
 80052f0:	400b      	ands	r3, r1
 80052f2:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80052f4:	6820      	ldr	r0, [r4, #0]
 80052f6:	6882      	ldr	r2, [r0, #8]
 80052f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80052fa:	3b01      	subs	r3, #1
                           hsai->FrameInit.FSOffset |
 80052fc:	6e61      	ldr	r1, [r4, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80052fe:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSDefinition |
 8005300:	6de1      	ldr	r1, [r4, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8005302:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSPolarity   |
 8005304:	6e21      	ldr	r1, [r4, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8005306:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005308:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800530a:	3901      	subs	r1, #1
                           hsai->FrameInit.FSPolarity   |
 800530c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005310:	4313      	orrs	r3, r2
 8005312:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005314:	6822      	ldr	r2, [r4, #0]
 8005316:	68d3      	ldr	r3, [r2, #12]
 8005318:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 800531c:	f023 030f 	bic.w	r3, r3, #15
 8005320:	041b      	lsls	r3, r3, #16
 8005322:	0c1b      	lsrs	r3, r3, #16
 8005324:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005326:	6820      	ldr	r0, [r4, #0]
 8005328:	68c2      	ldr	r2, [r0, #12]
 800532a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800532c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800532e:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005330:	6f61      	ldr	r1, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005336:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8005338:	3901      	subs	r1, #1
 800533a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800533e:	4313      	orrs	r3, r2
 8005340:	60c3      	str	r3, [r0, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	491f      	ldr	r1, [pc, #124]	; (80053c4 <HAL_SAI_Init+0x2e4>)
 8005346:	4a22      	ldr	r2, [pc, #136]	; (80053d0 <HAL_SAI_Init+0x2f0>)
 8005348:	4293      	cmp	r3, r2
 800534a:	bf18      	it	ne
 800534c:	428b      	cmpne	r3, r1
 800534e:	d107      	bne.n	8005360 <HAL_SAI_Init+0x280>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8005350:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8005352:	f023 0301 	bic.w	r3, r3, #1
 8005356:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8005358:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800535c:	2b01      	cmp	r3, #1
 800535e:	d079      	beq.n	8005454 <HAL_SAI_Init+0x374>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005360:	2300      	movs	r3, #0
 8005362:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  hsai->State = HAL_SAI_STATE_READY;
 8005366:	2201      	movs	r2, #1
 8005368:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 800536c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  return HAL_OK;
 8005370:	e07c      	b.n	800546c <HAL_SAI_Init+0x38c>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005372:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005376:	f7ff fbcf 	bl	8004b18 <HAL_RCCEx_GetPeriphCLKFreq>
 800537a:	e736      	b.n	80051ea <HAL_SAI_Init+0x10a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800537c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005380:	f7ff fbca 	bl	8004b18 <HAL_RCCEx_GetPeriphCLKFreq>
 8005384:	e739      	b.n	80051fa <HAL_SAI_Init+0x11a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8005386:	f44f 7000 	mov.w	r0, #512	; 0x200
 800538a:	f7ff fbc5 	bl	8004b18 <HAL_RCCEx_GetPeriphCLKFreq>
 800538e:	e73c      	b.n	800520a <HAL_SAI_Init+0x12a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8005390:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005394:	f7ff fbc0 	bl	8004b18 <HAL_RCCEx_GetPeriphCLKFreq>
 8005398:	e73c      	b.n	8005214 <HAL_SAI_Init+0x134>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800539a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800539e:	f7ff fbbb 	bl	8004b18 <HAL_RCCEx_GetPeriphCLKFreq>
 80053a2:	e73c      	b.n	800521e <HAL_SAI_Init+0x13e>
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * hsai->FrameInit.FrameLength);
 80053a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80053a8:	0041      	lsls	r1, r0, #1
 80053aa:	6a22      	ldr	r2, [r4, #32]
 80053ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80053ae:	fb03 f302 	mul.w	r3, r3, r2
 80053b2:	fbb1 f1f3 	udiv	r1, r1, r3
 80053b6:	e746      	b.n	8005246 <HAL_SAI_Init+0x166>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80053b8:	2302      	movs	r3, #2
 80053ba:	e73b      	b.n	8005234 <HAL_SAI_Init+0x154>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80053bc:	f04f 0800 	mov.w	r8, #0
 80053c0:	e75f      	b.n	8005282 <HAL_SAI_Init+0x1a2>
 80053c2:	bf00      	nop
 80053c4:	40015804 	.word	0x40015804
 80053c8:	40015824 	.word	0x40015824
 80053cc:	40016000 	.word	0x40016000
 80053d0:	58005404 	.word	0x58005404
 80053d4:	40015800 	.word	0x40015800
 80053d8:	40015c00 	.word	0x40015c00
 80053dc:	58005400 	.word	0x58005400
 80053e0:	40015c04 	.word	0x40015c04
 80053e4:	40015c24 	.word	0x40015c24
 80053e8:	40016004 	.word	0x40016004
 80053ec:	40016024 	.word	0x40016024
 80053f0:	58005424 	.word	0x58005424
 80053f4:	cccccccd 	.word	0xcccccccd
 80053f8:	f005c010 	.word	0xf005c010
 80053fc:	ffff1ff0 	.word	0xffff1ff0
 8005400:	fff88000 	.word	0xfff88000
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005404:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005406:	2b01      	cmp	r3, #1
 8005408:	d002      	beq.n	8005410 <HAL_SAI_Init+0x330>
 800540a:	f04f 0800 	mov.w	r8, #0
 800540e:	e738      	b.n	8005282 <HAL_SAI_Init+0x1a2>
 8005410:	f44f 7800 	mov.w	r8, #512	; 0x200
 8005414:	e735      	b.n	8005282 <HAL_SAI_Init+0x1a2>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005416:	6822      	ldr	r2, [r4, #0]
 8005418:	6811      	ldr	r1, [r2, #0]
 800541a:	4b18      	ldr	r3, [pc, #96]	; (800547c <HAL_SAI_Init+0x39c>)
 800541c:	400b      	ands	r3, r1
 800541e:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005420:	6821      	ldr	r1, [r4, #0]
 8005422:	680a      	ldr	r2, [r1, #0]
 8005424:	6863      	ldr	r3, [r4, #4]
 8005426:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005428:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800542a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800542c:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800542e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005430:	4303      	orrs	r3, r0
 8005432:	ea43 0308 	orr.w	r3, r3, r8
                            ckstr_bits | syncen_bits |                             \
 8005436:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005438:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800543a:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800543c:	6967      	ldr	r7, [r4, #20]
 800543e:	433b      	orrs	r3, r7
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005440:	69a0      	ldr	r0, [r4, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005442:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005444:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005446:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                            hsai->Init.MckOverSampling);
 800544a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800544c:	4303      	orrs	r3, r0
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800544e:	4313      	orrs	r3, r2
 8005450:	600b      	str	r3, [r1, #0]
 8005452:	e73c      	b.n	80052ce <HAL_SAI_Init+0x1ee>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8005454:	6c23      	ldr	r3, [r4, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8005456:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005458:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800545a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800545e:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8005460:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8005462:	f043 0301 	orr.w	r3, r3, #1
 8005466:	6473      	str	r3, [r6, #68]	; 0x44
 8005468:	e77a      	b.n	8005360 <HAL_SAI_Init+0x280>
    return HAL_ERROR;
 800546a:	2501      	movs	r5, #1
}
 800546c:	4628      	mov	r0, r5
 800546e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8005472:	2501      	movs	r5, #1
 8005474:	e7fa      	b.n	800546c <HAL_SAI_Init+0x38c>
    return HAL_ERROR;
 8005476:	2501      	movs	r5, #1
 8005478:	e7f8      	b.n	800546c <HAL_SAI_Init+0x38c>
 800547a:	bf00      	nop
 800547c:	f805c010 	.word	0xf805c010

08005480 <HAL_SAI_InitProtocol>:
{
 8005480:	b510      	push	{r4, lr}
 8005482:	4604      	mov	r4, r0
  switch (protocol)
 8005484:	2904      	cmp	r1, #4
 8005486:	d811      	bhi.n	80054ac <HAL_SAI_InitProtocol+0x2c>
 8005488:	e8df f001 	tbb	[pc, r1]
 800548c:	08030303 	.word	0x08030303
 8005490:	08          	.byte	0x08
 8005491:	00          	.byte	0x00
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8005492:	4620      	mov	r0, r4
 8005494:	f7ff fd2b 	bl	8004eee <SAI_InitI2S>
  if (status == HAL_OK)
 8005498:	b120      	cbz	r0, 80054a4 <HAL_SAI_InitProtocol+0x24>
}
 800549a:	bd10      	pop	{r4, pc}
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800549c:	4620      	mov	r0, r4
 800549e:	f7ff fd92 	bl	8004fc6 <SAI_InitPCM>
      break;
 80054a2:	e7f9      	b.n	8005498 <HAL_SAI_InitProtocol+0x18>
    status = HAL_SAI_Init(hsai);
 80054a4:	4620      	mov	r0, r4
 80054a6:	f7ff fe1b 	bl	80050e0 <HAL_SAI_Init>
 80054aa:	e7f6      	b.n	800549a <HAL_SAI_InitProtocol+0x1a>
      status = HAL_ERROR;
 80054ac:	2001      	movs	r0, #1
 80054ae:	e7f4      	b.n	800549a <HAL_SAI_InitProtocol+0x1a>

080054b0 <HAL_SAI_Transmit_DMA>:
{
 80054b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b2:	4604      	mov	r4, r0
 80054b4:	460e      	mov	r6, r1
 80054b6:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 80054b8:	f7fb f8ee 	bl	8000698 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 80054bc:	fab5 f385 	clz	r3, r5
 80054c0:	095b      	lsrs	r3, r3, #5
 80054c2:	2e00      	cmp	r6, #0
 80054c4:	bf08      	it	eq
 80054c6:	2301      	moveq	r3, #1
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d165      	bne.n	8005598 <HAL_SAI_Transmit_DMA+0xe8>
 80054cc:	4607      	mov	r7, r0
  if (hsai->State == HAL_SAI_STATE_READY)
 80054ce:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d162      	bne.n	800559e <HAL_SAI_Transmit_DMA+0xee>
    __HAL_LOCK(hsai);
 80054d8:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d060      	beq.n	80055a2 <HAL_SAI_Transmit_DMA+0xf2>
 80054e0:	2301      	movs	r3, #1
 80054e2:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    hsai->pBuffPtr = pData;
 80054e6:	67a6      	str	r6, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 80054e8:	f8a4 507c 	strh.w	r5, [r4, #124]	; 0x7c
    hsai->XferCount = Size;
 80054ec:	f8a4 507e 	strh.w	r5, [r4, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80054f0:	2300      	movs	r3, #0
 80054f2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80054f6:	2212      	movs	r2, #18
 80054f8:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80054fc:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005500:	4929      	ldr	r1, [pc, #164]	; (80055a8 <HAL_SAI_Transmit_DMA+0xf8>)
 8005502:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005504:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005508:	4928      	ldr	r1, [pc, #160]	; (80055ac <HAL_SAI_Transmit_DMA+0xfc>)
 800550a:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800550c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005510:	4927      	ldr	r1, [pc, #156]	; (80055b0 <HAL_SAI_Transmit_DMA+0x100>)
 8005512:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 8005514:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005518:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800551a:	6822      	ldr	r2, [r4, #0]
 800551c:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8005520:	321c      	adds	r2, #28
 8005522:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8005524:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005528:	f7fc fc82 	bl	8001e30 <HAL_DMA_Start_IT>
 800552c:	4605      	mov	r5, r0
 800552e:	bb10      	cbnz	r0, 8005576 <HAL_SAI_Transmit_DMA+0xc6>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005530:	2100      	movs	r1, #0
 8005532:	4620      	mov	r0, r4
 8005534:	f7ff fd98 	bl	8005068 <SAI_InterruptFlag>
 8005538:	6822      	ldr	r2, [r4, #0]
 800553a:	6913      	ldr	r3, [r2, #16]
 800553c:	4318      	orrs	r0, r3
 800553e:	6110      	str	r0, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005540:	6822      	ldr	r2, [r4, #0]
 8005542:	6813      	ldr	r3, [r2, #0]
 8005544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005548:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	695a      	ldr	r2, [r3, #20]
 800554e:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
 8005552:	d115      	bne.n	8005580 <HAL_SAI_Transmit_DMA+0xd0>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8005554:	f7fb f8a0 	bl	8000698 <HAL_GetTick>
 8005558:	1bc0      	subs	r0, r0, r7
 800555a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800555e:	d9f4      	bls.n	800554a <HAL_SAI_Transmit_DMA+0x9a>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005560:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005568:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        __HAL_UNLOCK(hsai);
 800556c:	2300      	movs	r3, #0
 800556e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        return HAL_TIMEOUT;
 8005572:	2503      	movs	r5, #3
 8005574:	e011      	b.n	800559a <HAL_SAI_Transmit_DMA+0xea>
      __HAL_UNLOCK(hsai);
 8005576:	2300      	movs	r3, #0
 8005578:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      return  HAL_ERROR;
 800557c:	2501      	movs	r5, #1
 800557e:	e00c      	b.n	800559a <HAL_SAI_Transmit_DMA+0xea>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8005586:	d103      	bne.n	8005590 <HAL_SAI_Transmit_DMA+0xe0>
      __HAL_SAI_ENABLE(hsai);
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800558e:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8005590:	2300      	movs	r3, #0
 8005592:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 8005596:	e000      	b.n	800559a <HAL_SAI_Transmit_DMA+0xea>
    return  HAL_ERROR;
 8005598:	2501      	movs	r5, #1
}
 800559a:	4628      	mov	r0, r5
 800559c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800559e:	2502      	movs	r5, #2
 80055a0:	e7fb      	b.n	800559a <HAL_SAI_Transmit_DMA+0xea>
    __HAL_LOCK(hsai);
 80055a2:	2502      	movs	r5, #2
 80055a4:	e7f9      	b.n	800559a <HAL_SAI_Transmit_DMA+0xea>
 80055a6:	bf00      	nop
 80055a8:	080056c3 	.word	0x080056c3
 80055ac:	08005689 	.word	0x08005689
 80055b0:	08005711 	.word	0x08005711

080055b4 <HAL_SAI_Receive_DMA>:
{
 80055b4:	b538      	push	{r3, r4, r5, lr}
  if ((pData == NULL) || (Size == 0U))
 80055b6:	4614      	mov	r4, r2
 80055b8:	fab2 f282 	clz	r2, r2
 80055bc:	0952      	lsrs	r2, r2, #5
 80055be:	2900      	cmp	r1, #0
 80055c0:	bf08      	it	eq
 80055c2:	2201      	moveq	r2, #1
 80055c4:	2a00      	cmp	r2, #0
 80055c6:	d151      	bne.n	800566c <HAL_SAI_Receive_DMA+0xb8>
  if (hsai->State == HAL_SAI_STATE_READY)
 80055c8:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d14f      	bne.n	8005672 <HAL_SAI_Receive_DMA+0xbe>
    __HAL_LOCK(hsai);
 80055d2:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d04d      	beq.n	8005676 <HAL_SAI_Receive_DMA+0xc2>
 80055da:	4623      	mov	r3, r4
 80055dc:	4604      	mov	r4, r0
 80055de:	2201      	movs	r2, #1
 80055e0:	f880 2090 	strb.w	r2, [r0, #144]	; 0x90
    hsai->pBuffPtr = pData;
 80055e4:	67a1      	str	r1, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 80055e6:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
    hsai->XferCount = Size;
 80055ea:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80055ee:	2300      	movs	r3, #0
 80055f0:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80055f4:	2222      	movs	r2, #34	; 0x22
 80055f6:	f880 2091 	strb.w	r2, [r0, #145]	; 0x91
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80055fa:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80055fe:	491f      	ldr	r1, [pc, #124]	; (800567c <HAL_SAI_Receive_DMA+0xc8>)
 8005600:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8005602:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8005606:	491e      	ldr	r1, [pc, #120]	; (8005680 <HAL_SAI_Receive_DMA+0xcc>)
 8005608:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800560a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800560e:	491d      	ldr	r1, [pc, #116]	; (8005684 <HAL_SAI_Receive_DMA+0xd0>)
 8005610:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 8005612:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8005616:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8005618:	6801      	ldr	r1, [r0, #0]
 800561a:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 800561e:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8005620:	311c      	adds	r1, #28
 8005622:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 8005626:	f7fc fc03 	bl	8001e30 <HAL_DMA_Start_IT>
 800562a:	4605      	mov	r5, r0
 800562c:	b9c8      	cbnz	r0, 8005662 <HAL_SAI_Receive_DMA+0xae>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8005636:	d103      	bne.n	8005640 <HAL_SAI_Receive_DMA+0x8c>
      __HAL_SAI_ENABLE(hsai);
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800563e:	601a      	str	r2, [r3, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005640:	2100      	movs	r1, #0
 8005642:	4620      	mov	r0, r4
 8005644:	f7ff fd10 	bl	8005068 <SAI_InterruptFlag>
 8005648:	6822      	ldr	r2, [r4, #0]
 800564a:	6913      	ldr	r3, [r2, #16]
 800564c:	4318      	orrs	r0, r3
 800564e:	6110      	str	r0, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005650:	6822      	ldr	r2, [r4, #0]
 8005652:	6813      	ldr	r3, [r2, #0]
 8005654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005658:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 800565a:	2300      	movs	r3, #0
 800565c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 8005660:	e005      	b.n	800566e <HAL_SAI_Receive_DMA+0xba>
      __HAL_UNLOCK(hsai);
 8005662:	2300      	movs	r3, #0
 8005664:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      return  HAL_ERROR;
 8005668:	2501      	movs	r5, #1
 800566a:	e000      	b.n	800566e <HAL_SAI_Receive_DMA+0xba>
    return  HAL_ERROR;
 800566c:	2501      	movs	r5, #1
}
 800566e:	4628      	mov	r0, r5
 8005670:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8005672:	2502      	movs	r5, #2
 8005674:	e7fb      	b.n	800566e <HAL_SAI_Receive_DMA+0xba>
    __HAL_LOCK(hsai);
 8005676:	2502      	movs	r5, #2
 8005678:	e7f9      	b.n	800566e <HAL_SAI_Receive_DMA+0xba>
 800567a:	bf00      	nop
 800567c:	08005707 	.word	0x08005707
 8005680:	080056cd 	.word	0x080056cd
 8005684:	08005711 	.word	0x08005711

08005688 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005688:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800568a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800568c:	69c3      	ldr	r3, [r0, #28]
 800568e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005692:	d012      	beq.n	80056ba <SAI_DMATxCplt+0x32>
  {
    hsai->XferCount = 0;
 8005694:	2100      	movs	r1, #0
 8005696:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800569a:	6822      	ldr	r2, [r4, #0]
 800569c:	6813      	ldr	r3, [r2, #0]
 800569e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80056a2:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80056a4:	4620      	mov	r0, r4
 80056a6:	f7ff fcdf 	bl	8005068 <SAI_InterruptFlag>
 80056aa:	6822      	ldr	r2, [r4, #0]
 80056ac:	6913      	ldr	r3, [r2, #16]
 80056ae:	ea23 0000 	bic.w	r0, r3, r0
 80056b2:	6110      	str	r0, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80056b4:	2301      	movs	r3, #1
 80056b6:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80056ba:	4620      	mov	r0, r4
 80056bc:	f004 fb59 	bl	8009d72 <HAL_SAI_TxCpltCallback>
#endif
}
 80056c0:	bd10      	pop	{r4, pc}

080056c2 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80056c2:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80056c4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80056c6:	f004 fb55 	bl	8009d74 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 80056ca:	bd08      	pop	{r3, pc}

080056cc <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80056cc:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056ce:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80056d0:	69c3      	ldr	r3, [r0, #28]
 80056d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056d6:	d012      	beq.n	80056fe <SAI_DMARxCplt+0x32>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80056d8:	6822      	ldr	r2, [r4, #0]
 80056da:	6813      	ldr	r3, [r2, #0]
 80056dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80056e0:	6013      	str	r3, [r2, #0]
    hsai->XferCount = 0;
 80056e2:	2100      	movs	r1, #0
 80056e4:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80056e8:	4620      	mov	r0, r4
 80056ea:	f7ff fcbd 	bl	8005068 <SAI_InterruptFlag>
 80056ee:	6822      	ldr	r2, [r4, #0]
 80056f0:	6913      	ldr	r3, [r2, #16]
 80056f2:	ea23 0000 	bic.w	r0, r3, r0
 80056f6:	6110      	str	r0, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80056f8:	2301      	movs	r3, #1
 80056fa:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80056fe:	4620      	mov	r0, r4
 8005700:	f004 fb39 	bl	8009d76 <HAL_SAI_RxCpltCallback>
#endif
}
 8005704:	bd10      	pop	{r4, pc}

08005706 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005706:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8005708:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800570a:	f004 fb39 	bl	8009d80 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800570e:	bd08      	pop	{r3, pc}

08005710 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005710:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005712:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005714:	f7fd f828 	bl	8002768 <HAL_DMA_GetError>
 8005718:	2802      	cmp	r0, #2
 800571a:	d016      	beq.n	800574a <SAI_DMAError+0x3a>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800571c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005724:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005728:	6822      	ldr	r2, [r4, #0]
 800572a:	6813      	ldr	r3, [r2, #0]
 800572c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005730:	6013      	str	r3, [r2, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8005732:	4620      	mov	r0, r4
 8005734:	f7ff fcb2 	bl	800509c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8005738:	2301      	movs	r3, #1
 800573a:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8005744:	4620      	mov	r0, r4
 8005746:	f004 fb13 	bl	8009d70 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800574a:	bd10      	pop	{r4, pc}

0800574c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800574c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005750:	b086      	sub	sp, #24
 8005752:	4604      	mov	r4, r0
 8005754:	460d      	mov	r5, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005756:	f7fa ff9f 	bl	8000698 <HAL_GetTick>
 800575a:	4680      	mov	r8, r0
  uint32_t count;
  uint32_t *pData = pSDstatus;

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800575c:	2100      	movs	r1, #0
 800575e:	6820      	ldr	r0, [r4, #0]
 8005760:	f003 facf 	bl	8008d02 <SDMMC_GetResponse>
 8005764:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005768:	d167      	bne.n	800583a <SD_SendSDStatus+0xee>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800576a:	2140      	movs	r1, #64	; 0x40
 800576c:	6820      	ldr	r0, [r4, #0]
 800576e:	f003 fbe3 	bl	8008f38 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005772:	4606      	mov	r6, r0
 8005774:	b110      	cbz	r0, 800577c <SD_SendSDStatus+0x30>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005776:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005778:	63a3      	str	r3, [r4, #56]	; 0x38
    return errorstate;
 800577a:	e060      	b.n	800583e <SD_SendSDStatus+0xf2>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800577c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800577e:	0409      	lsls	r1, r1, #16
 8005780:	6820      	ldr	r0, [r4, #0]
 8005782:	f003 fcc1 	bl	8009108 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005786:	4606      	mov	r6, r0
 8005788:	b110      	cbz	r0, 8005790 <SD_SendSDStatus+0x44>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800578a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800578c:	63a3      	str	r3, [r4, #56]	; 0x38
    return errorstate;
 800578e:	e056      	b.n	800583e <SD_SendSDStatus+0xf2>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005790:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005794:	9300      	str	r3, [sp, #0]
  config.DataLength    = 64U;
 8005796:	2340      	movs	r3, #64	; 0x40
 8005798:	9301      	str	r3, [sp, #4]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800579a:	2360      	movs	r3, #96	; 0x60
 800579c:	9302      	str	r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800579e:	2302      	movs	r3, #2
 80057a0:	9303      	str	r3, [sp, #12]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	9304      	str	r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80057a6:	2301      	movs	r3, #1
 80057a8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80057aa:	4669      	mov	r1, sp
 80057ac:	6820      	ldr	r0, [r4, #0]
 80057ae:	f003 fbb1 	bl	8008f14 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80057b2:	6820      	ldr	r0, [r4, #0]
 80057b4:	f003 fd67 	bl	8009286 <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 80057b8:	4606      	mov	r6, r0
 80057ba:	b188      	cbz	r0, 80057e0 <SD_SendSDStatus+0x94>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80057bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80057be:	63a3      	str	r3, [r4, #56]	; 0x38
    return errorstate;
 80057c0:	e03d      	b.n	800583e <SD_SendSDStatus+0xf2>
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
    {
      for(count = 0U; count < 8U; count++)
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80057c2:	6820      	ldr	r0, [r4, #0]
 80057c4:	f003 fa76 	bl	8008cb4 <SDMMC_ReadFIFO>
 80057c8:	f845 0b04 	str.w	r0, [r5], #4
      for(count = 0U; count < 8U; count++)
 80057cc:	3701      	adds	r7, #1
 80057ce:	2f07      	cmp	r7, #7
 80057d0:	d9f7      	bls.n	80057c2 <SD_SendSDStatus+0x76>
        pData++;
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80057d2:	f7fa ff61 	bl	8000698 <HAL_GetTick>
 80057d6:	eba0 0008 	sub.w	r0, r0, r8
 80057da:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80057de:	d032      	beq.n	8005846 <SD_SendSDStatus+0xfa>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80057e0:	6823      	ldr	r3, [r4, #0]
 80057e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057e4:	f412 7f95 	tst.w	r2, #298	; 0x12a
 80057e8:	d105      	bne.n	80057f6 <SD_SendSDStatus+0xaa>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80057ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ec:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80057f0:	d0ef      	beq.n	80057d2 <SD_SendSDStatus+0x86>
      for(count = 0U; count < 8U; count++)
 80057f2:	4637      	mov	r7, r6
 80057f4:	e7eb      	b.n	80057ce <SD_SendSDStatus+0x82>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80057f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057f8:	f012 0f08 	tst.w	r2, #8
 80057fc:	d126      	bne.n	800584c <SD_SendSDStatus+0x100>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80057fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005800:	f012 0f02 	tst.w	r2, #2
 8005804:	d124      	bne.n	8005850 <SD_SendSDStatus+0x104>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005808:	f013 0f20 	tst.w	r3, #32
 800580c:	d122      	bne.n	8005854 <SD_SendSDStatus+0x108>
  else
  {
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800580e:	6820      	ldr	r0, [r4, #0]
 8005810:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005812:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005816:	d00d      	beq.n	8005834 <SD_SendSDStatus+0xe8>
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005818:	f003 fa4c 	bl	8008cb4 <SDMMC_ReadFIFO>
 800581c:	f845 0b04 	str.w	r0, [r5], #4
    pData++;

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005820:	f7fa ff3a 	bl	8000698 <HAL_GetTick>
 8005824:	eba0 0008 	sub.w	r0, r0, r8
 8005828:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800582c:	d1ef      	bne.n	800580e <SD_SendSDStatus+0xc2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800582e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005832:	e004      	b.n	800583e <SD_SendSDStatus+0xf2>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005834:	4b08      	ldr	r3, [pc, #32]	; (8005858 <SD_SendSDStatus+0x10c>)
 8005836:	6383      	str	r3, [r0, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8005838:	e001      	b.n	800583e <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800583a:	f44f 6600 	mov.w	r6, #2048	; 0x800
}
 800583e:	4630      	mov	r0, r6
 8005840:	b006      	add	sp, #24
 8005842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_SD_ERROR_TIMEOUT;
 8005846:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800584a:	e7f8      	b.n	800583e <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800584c:	2608      	movs	r6, #8
 800584e:	e7f6      	b.n	800583e <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005850:	2602      	movs	r6, #2
 8005852:	e7f4      	b.n	800583e <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_RX_OVERRUN;
 8005854:	2620      	movs	r6, #32
 8005856:	e7f2      	b.n	800583e <SD_SendSDStatus+0xf2>
 8005858:	18000f3a 	.word	0x18000f3a

0800585c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800585c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005860:	b088      	sub	sp, #32
 8005862:	4604      	mov	r4, r0
 8005864:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005866:	f7fa ff17 	bl	8000698 <HAL_GetTick>
 800586a:	4606      	mov	r6, r0
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
 800586c:	2300      	movs	r3, #0
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	9301      	str	r3, [sp, #4]
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005872:	2108      	movs	r1, #8
 8005874:	6820      	ldr	r0, [r4, #0]
 8005876:	f003 fb5f 	bl	8008f38 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800587a:	4605      	mov	r5, r0
 800587c:	b118      	cbz	r0, 8005886 <SD_FindSCR+0x2a>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800587e:	4628      	mov	r0, r5
 8005880:	b008      	add	sp, #32
 8005882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005886:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005888:	0409      	lsls	r1, r1, #16
 800588a:	6820      	ldr	r0, [r4, #0]
 800588c:	f003 fc3c 	bl	8009108 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005890:	4605      	mov	r5, r0
 8005892:	2800      	cmp	r0, #0
 8005894:	d1f3      	bne.n	800587e <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800589a:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 800589c:	2308      	movs	r3, #8
 800589e:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80058a0:	2330      	movs	r3, #48	; 0x30
 80058a2:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80058a4:	2302      	movs	r3, #2
 80058a6:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80058a8:	2300      	movs	r3, #0
 80058aa:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80058ac:	2301      	movs	r3, #1
 80058ae:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80058b0:	a902      	add	r1, sp, #8
 80058b2:	6820      	ldr	r0, [r4, #0]
 80058b4:	f003 fb2e 	bl	8008f14 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80058b8:	6820      	ldr	r0, [r4, #0]
 80058ba:	f003 fc6d 	bl	8009198 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80058be:	4605      	mov	r5, r0
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d1dc      	bne.n	800587e <SD_FindSCR+0x22>
  uint32_t index = 0U;
 80058c4:	4680      	mov	r8, r0
 80058c6:	e005      	b.n	80058d4 <SD_FindSCR+0x78>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80058c8:	f7fa fee6 	bl	8000698 <HAL_GetTick>
 80058cc:	1b80      	subs	r0, r0, r6
 80058ce:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80058d2:	d048      	beq.n	8005966 <SD_FindSCR+0x10a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80058d4:	6820      	ldr	r0, [r4, #0]
 80058d6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80058d8:	f240 532a 	movw	r3, #1322	; 0x52a
 80058dc:	421a      	tst	r2, r3
 80058de:	d110      	bne.n	8005902 <SD_FindSCR+0xa6>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80058e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80058e2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80058e6:	d1ef      	bne.n	80058c8 <SD_FindSCR+0x6c>
 80058e8:	f1b8 0f00 	cmp.w	r8, #0
 80058ec:	d1ec      	bne.n	80058c8 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80058ee:	f003 f9e1 	bl	8008cb4 <SDMMC_ReadFIFO>
 80058f2:	9000      	str	r0, [sp, #0]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80058f4:	6820      	ldr	r0, [r4, #0]
 80058f6:	f003 f9dd 	bl	8008cb4 <SDMMC_ReadFIFO>
 80058fa:	9001      	str	r0, [sp, #4]
      index++;
 80058fc:	f108 0801 	add.w	r8, r8, #1
 8005900:	e7e2      	b.n	80058c8 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005902:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005904:	f013 0f08 	tst.w	r3, #8
 8005908:	d124      	bne.n	8005954 <SD_FindSCR+0xf8>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800590a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800590c:	f013 0f02 	tst.w	r3, #2
 8005910:	d123      	bne.n	800595a <SD_FindSCR+0xfe>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005912:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005914:	f013 0f20 	tst.w	r3, #32
 8005918:	d122      	bne.n	8005960 <SD_FindSCR+0x104>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800591a:	4b14      	ldr	r3, [pc, #80]	; (800596c <SD_FindSCR+0x110>)
 800591c:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800591e:	9a01      	ldr	r2, [sp, #4]
 8005920:	0213      	lsls	r3, r2, #8
 8005922:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005926:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800592a:	0a11      	lsrs	r1, r2, #8
 800592c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005930:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005932:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005936:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005938:	9a00      	ldr	r2, [sp, #0]
 800593a:	0213      	lsls	r3, r2, #8
 800593c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005940:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005944:	0a11      	lsrs	r1, r2, #8
 8005946:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800594a:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800594c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005950:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 8005952:	e794      	b.n	800587e <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005954:	2508      	movs	r5, #8
 8005956:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005958:	e791      	b.n	800587e <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800595a:	2502      	movs	r5, #2
 800595c:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800595e:	e78e      	b.n	800587e <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005960:	2520      	movs	r5, #32
 8005962:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8005964:	e78b      	b.n	800587e <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 8005966:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800596a:	e788      	b.n	800587e <SD_FindSCR+0x22>
 800596c:	18000f3a 	.word	0x18000f3a

08005970 <SD_WideBus_Enable>:
{
 8005970:	b510      	push	{r4, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 8005976:	2100      	movs	r1, #0
 8005978:	9100      	str	r1, [sp, #0]
 800597a:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800597c:	6800      	ldr	r0, [r0, #0]
 800597e:	f003 f9c0 	bl	8008d02 <SDMMC_GetResponse>
 8005982:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005986:	d116      	bne.n	80059b6 <SD_WideBus_Enable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 8005988:	4669      	mov	r1, sp
 800598a:	4620      	mov	r0, r4
 800598c:	f7ff ff66 	bl	800585c <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005990:	4603      	mov	r3, r0
 8005992:	b990      	cbnz	r0, 80059ba <SD_WideBus_Enable+0x4a>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005994:	9b01      	ldr	r3, [sp, #4]
 8005996:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800599a:	d011      	beq.n	80059c0 <SD_WideBus_Enable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800599c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800599e:	0409      	lsls	r1, r1, #16
 80059a0:	6820      	ldr	r0, [r4, #0]
 80059a2:	f003 fbb1 	bl	8009108 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80059a6:	4603      	mov	r3, r0
 80059a8:	b938      	cbnz	r0, 80059ba <SD_WideBus_Enable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80059aa:	2102      	movs	r1, #2
 80059ac:	6820      	ldr	r0, [r4, #0]
 80059ae:	f003 fbda 	bl	8009166 <SDMMC_CmdBusWidth>
 80059b2:	4603      	mov	r3, r0
 80059b4:	e001      	b.n	80059ba <SD_WideBus_Enable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80059b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	b002      	add	sp, #8
 80059be:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80059c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80059c4:	e7f9      	b.n	80059ba <SD_WideBus_Enable+0x4a>

080059c6 <SD_WideBus_Disable>:
{
 80059c6:	b510      	push	{r4, lr}
 80059c8:	b082      	sub	sp, #8
 80059ca:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 80059cc:	2100      	movs	r1, #0
 80059ce:	9100      	str	r1, [sp, #0]
 80059d0:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80059d2:	6800      	ldr	r0, [r0, #0]
 80059d4:	f003 f995 	bl	8008d02 <SDMMC_GetResponse>
 80059d8:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80059dc:	d116      	bne.n	8005a0c <SD_WideBus_Disable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 80059de:	4669      	mov	r1, sp
 80059e0:	4620      	mov	r0, r4
 80059e2:	f7ff ff3b 	bl	800585c <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80059e6:	4603      	mov	r3, r0
 80059e8:	b990      	cbnz	r0, 8005a10 <SD_WideBus_Disable+0x4a>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80059ea:	9b01      	ldr	r3, [sp, #4]
 80059ec:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80059f0:	d011      	beq.n	8005a16 <SD_WideBus_Disable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80059f2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80059f4:	0409      	lsls	r1, r1, #16
 80059f6:	6820      	ldr	r0, [r4, #0]
 80059f8:	f003 fb86 	bl	8009108 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80059fc:	4603      	mov	r3, r0
 80059fe:	b938      	cbnz	r0, 8005a10 <SD_WideBus_Disable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005a00:	2100      	movs	r1, #0
 8005a02:	6820      	ldr	r0, [r4, #0]
 8005a04:	f003 fbaf 	bl	8009166 <SDMMC_CmdBusWidth>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	e001      	b.n	8005a10 <SD_WideBus_Disable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005a0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	b002      	add	sp, #8
 8005a14:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005a16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005a1a:	e7f9      	b.n	8005a10 <SD_WideBus_Disable+0x4a>

08005a1c <SD_SendStatus>:
{
 8005a1c:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 8005a1e:	b181      	cbz	r1, 8005a42 <SD_SendStatus+0x26>
 8005a20:	460d      	mov	r5, r1
 8005a22:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a24:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005a26:	0409      	lsls	r1, r1, #16
 8005a28:	6800      	ldr	r0, [r0, #0]
 8005a2a:	f003 fc13 	bl	8009254 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a2e:	4606      	mov	r6, r0
 8005a30:	b108      	cbz	r0, 8005a36 <SD_SendStatus+0x1a>
}
 8005a32:	4630      	mov	r0, r6
 8005a34:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005a36:	2100      	movs	r1, #0
 8005a38:	6820      	ldr	r0, [r4, #0]
 8005a3a:	f003 f962 	bl	8008d02 <SDMMC_GetResponse>
 8005a3e:	6028      	str	r0, [r5, #0]
  return HAL_SD_ERROR_NONE;
 8005a40:	e7f7      	b.n	8005a32 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 8005a42:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 8005a46:	e7f4      	b.n	8005a32 <SD_SendStatus+0x16>

08005a48 <HAL_SD_ReadBlocks>:
{
 8005a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a4c:	b086      	sub	sp, #24
 8005a4e:	4604      	mov	r4, r0
 8005a50:	460d      	mov	r5, r1
 8005a52:	4690      	mov	r8, r2
 8005a54:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 8005a56:	f7fa fe1f 	bl	8000698 <HAL_GetTick>
  if(NULL == pData)
 8005a5a:	b16d      	cbz	r5, 8005a78 <HAL_SD_ReadBlocks+0x30>
 8005a5c:	4607      	mov	r7, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8005a5e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d00d      	beq.n	8005a84 <HAL_SD_ReadBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005a68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a6e:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005a70:	2001      	movs	r0, #1
}
 8005a72:	b006      	add	sp, #24
 8005a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005a78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a7e:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005a80:	2001      	movs	r0, #1
 8005a82:	e7f6      	b.n	8005a72 <HAL_SD_ReadBlocks+0x2a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005a84:	2300      	movs	r3, #0
 8005a86:	63a3      	str	r3, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005a88:	eb08 0306 	add.w	r3, r8, r6
 8005a8c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d81b      	bhi.n	8005aca <HAL_SD_ReadBlocks+0x82>
    hsd->State = HAL_SD_STATE_BUSY;
 8005a92:	2303      	movs	r3, #3
 8005a94:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005a9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d001      	beq.n	8005aa8 <HAL_SD_ReadBlocks+0x60>
      add *= 512U;
 8005aa4:	ea4f 2848 	mov.w	r8, r8, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005aa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005aac:	6820      	ldr	r0, [r4, #0]
 8005aae:	f003 fa43 	bl	8008f38 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	b178      	cbz	r0, 8005ad6 <HAL_SD_ReadBlocks+0x8e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ab6:	6822      	ldr	r2, [r4, #0]
 8005ab8:	4969      	ldr	r1, [pc, #420]	; (8005c60 <HAL_SD_ReadBlocks+0x218>)
 8005aba:	6391      	str	r1, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005abc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005abe:	4318      	orrs	r0, r3
 8005ac0:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ac2:	2001      	movs	r0, #1
 8005ac4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8005ac8:	e7d3      	b.n	8005a72 <HAL_SD_ReadBlocks+0x2a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005aca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005acc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005ad0:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8005ad2:	2001      	movs	r0, #1
 8005ad4:	e7cd      	b.n	8005a72 <HAL_SD_ReadBlocks+0x2a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ada:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005adc:	0273      	lsls	r3, r6, #9
 8005ade:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005ae0:	2390      	movs	r3, #144	; 0x90
 8005ae2:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005aec:	9305      	str	r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005aee:	4669      	mov	r1, sp
 8005af0:	6820      	ldr	r0, [r4, #0]
 8005af2:	f003 fa0f 	bl	8008f14 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005af6:	6822      	ldr	r2, [r4, #0]
 8005af8:	68d3      	ldr	r3, [r2, #12]
 8005afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005afe:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 8005b00:	2e01      	cmp	r6, #1
 8005b02:	d90c      	bls.n	8005b1e <HAL_SD_ReadBlocks+0xd6>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005b04:	2302      	movs	r3, #2
 8005b06:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005b08:	4641      	mov	r1, r8
 8005b0a:	6820      	ldr	r0, [r4, #0]
 8005b0c:	f003 fa46 	bl	8008f9c <SDMMC_CmdReadMultiBlock>
 8005b10:	4682      	mov	sl, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b12:	f1ba 0f00 	cmp.w	sl, #0
 8005b16:	d10a      	bne.n	8005b2e <HAL_SD_ReadBlocks+0xe6>
    dataremaining = config.DataLength;
 8005b18:	f8dd 9004 	ldr.w	r9, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005b1c:	e02f      	b.n	8005b7e <HAL_SD_ReadBlocks+0x136>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005b22:	4641      	mov	r1, r8
 8005b24:	6820      	ldr	r0, [r4, #0]
 8005b26:	f003 fa20 	bl	8008f6a <SDMMC_CmdReadSingleBlock>
 8005b2a:	4682      	mov	sl, r0
 8005b2c:	e7f1      	b.n	8005b12 <HAL_SD_ReadBlocks+0xca>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	4a4b      	ldr	r2, [pc, #300]	; (8005c60 <HAL_SD_ReadBlocks+0x218>)
 8005b32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005b34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b36:	ea43 030a 	orr.w	r3, r3, sl
 8005b3a:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005b3c:	2001      	movs	r0, #1
 8005b3e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b42:	2300      	movs	r3, #0
 8005b44:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005b46:	e794      	b.n	8005a72 <HAL_SD_ReadBlocks+0x2a>
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005b48:	6820      	ldr	r0, [r4, #0]
 8005b4a:	f003 f8b3 	bl	8008cb4 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005b4e:	7028      	strb	r0, [r5, #0]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005b50:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8005b54:	706b      	strb	r3, [r5, #1]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005b56:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8005b5a:	70ab      	strb	r3, [r5, #2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005b5c:	0e00      	lsrs	r0, r0, #24
 8005b5e:	70e8      	strb	r0, [r5, #3]
          tempbuff++;
 8005b60:	3504      	adds	r5, #4
        for(count = 0U; count < 8U; count++)
 8005b62:	f108 0801 	add.w	r8, r8, #1
 8005b66:	f1b8 0f07 	cmp.w	r8, #7
 8005b6a:	d9ed      	bls.n	8005b48 <HAL_SD_ReadBlocks+0x100>
        dataremaining -= 32U;
 8005b6c:	f1a9 0920 	sub.w	r9, r9, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005b70:	f7fa fd92 	bl	8000698 <HAL_GetTick>
 8005b74:	1bc0      	subs	r0, r0, r7
 8005b76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b78:	4298      	cmp	r0, r3
 8005b7a:	d20e      	bcs.n	8005b9a <HAL_SD_ReadBlocks+0x152>
 8005b7c:	b16b      	cbz	r3, 8005b9a <HAL_SD_ReadBlocks+0x152>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b82:	f412 7f95 	tst.w	r2, #298	; 0x12a
 8005b86:	d116      	bne.n	8005bb6 <HAL_SD_ReadBlocks+0x16e>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8005b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b8a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005b8e:	d0ef      	beq.n	8005b70 <HAL_SD_ReadBlocks+0x128>
 8005b90:	f1b9 0f1f 	cmp.w	r9, #31
 8005b94:	d9ec      	bls.n	8005b70 <HAL_SD_ReadBlocks+0x128>
        for(count = 0U; count < 8U; count++)
 8005b96:	46d0      	mov	r8, sl
 8005b98:	e7e5      	b.n	8005b66 <HAL_SD_ReadBlocks+0x11e>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	4a30      	ldr	r2, [pc, #192]	; (8005c60 <HAL_SD_ReadBlocks+0x218>)
 8005b9e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005ba0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ba6:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8005bb2:	2003      	movs	r0, #3
 8005bb4:	e75d      	b.n	8005a72 <HAL_SD_ReadBlocks+0x2a>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bbc:	60da      	str	r2, [r3, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005bbe:	6820      	ldr	r0, [r4, #0]
 8005bc0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005bc2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005bc6:	d007      	beq.n	8005bd8 <HAL_SD_ReadBlocks+0x190>
 8005bc8:	2e01      	cmp	r6, #1
 8005bca:	d905      	bls.n	8005bd8 <HAL_SD_ReadBlocks+0x190>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005bcc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	d002      	beq.n	8005bd8 <HAL_SD_ReadBlocks+0x190>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005bd2:	f003 fa2f 	bl	8009034 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8005bd6:	b9c0      	cbnz	r0, 8005c0a <HAL_SD_ReadBlocks+0x1c2>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bdc:	f012 0f08 	tst.w	r2, #8
 8005be0:	d11f      	bne.n	8005c22 <HAL_SD_ReadBlocks+0x1da>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005be4:	f012 0f02 	tst.w	r2, #2
 8005be8:	d127      	bne.n	8005c3a <HAL_SD_ReadBlocks+0x1f2>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bec:	f012 0f20 	tst.w	r2, #32
 8005bf0:	d02f      	beq.n	8005c52 <HAL_SD_ReadBlocks+0x20a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bf2:	4a1b      	ldr	r2, [pc, #108]	; (8005c60 <HAL_SD_ReadBlocks+0x218>)
 8005bf4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005bf6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005bf8:	f043 0320 	orr.w	r3, r3, #32
 8005bfc:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005bfe:	2001      	movs	r0, #1
 8005c00:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c04:	2300      	movs	r3, #0
 8005c06:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005c08:	e733      	b.n	8005a72 <HAL_SD_ReadBlocks+0x2a>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	4914      	ldr	r1, [pc, #80]	; (8005c60 <HAL_SD_ReadBlocks+0x218>)
 8005c0e:	6399      	str	r1, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005c10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c12:	4303      	orrs	r3, r0
 8005c14:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005c16:	2001      	movs	r0, #1
 8005c18:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 8005c20:	e727      	b.n	8005a72 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c22:	4a0f      	ldr	r2, [pc, #60]	; (8005c60 <HAL_SD_ReadBlocks+0x218>)
 8005c24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005c26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c28:	f043 0308 	orr.w	r3, r3, #8
 8005c2c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c2e:	2001      	movs	r0, #1
 8005c30:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c34:	2300      	movs	r3, #0
 8005c36:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005c38:	e71b      	b.n	8005a72 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c3a:	4a09      	ldr	r2, [pc, #36]	; (8005c60 <HAL_SD_ReadBlocks+0x218>)
 8005c3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005c3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c40:	f043 0302 	orr.w	r3, r3, #2
 8005c44:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c46:	2001      	movs	r0, #1
 8005c48:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005c50:	e70f      	b.n	8005a72 <HAL_SD_ReadBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005c52:	4a04      	ldr	r2, [pc, #16]	; (8005c64 <HAL_SD_ReadBlocks+0x21c>)
 8005c54:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005c56:	2301      	movs	r3, #1
 8005c58:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	e708      	b.n	8005a72 <HAL_SD_ReadBlocks+0x2a>
 8005c60:	1fe00fff 	.word	0x1fe00fff
 8005c64:	18000f3a 	.word	0x18000f3a

08005c68 <HAL_SD_WriteBlocks>:
{
 8005c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c6c:	b088      	sub	sp, #32
 8005c6e:	4604      	mov	r4, r0
 8005c70:	460d      	mov	r5, r1
 8005c72:	4690      	mov	r8, r2
 8005c74:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 8005c76:	f7fa fd0f 	bl	8000698 <HAL_GetTick>
  if(NULL == pData)
 8005c7a:	b16d      	cbz	r5, 8005c98 <HAL_SD_WriteBlocks+0x30>
 8005c7c:	4607      	mov	r7, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8005c7e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d00d      	beq.n	8005ca4 <HAL_SD_WriteBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005c88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c8e:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005c90:	2001      	movs	r0, #1
}
 8005c92:	b008      	add	sp, #32
 8005c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005c98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c9e:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005ca0:	2001      	movs	r0, #1
 8005ca2:	e7f6      	b.n	8005c92 <HAL_SD_WriteBlocks+0x2a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	63a3      	str	r3, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005ca8:	eb08 0306 	add.w	r3, r8, r6
 8005cac:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d81b      	bhi.n	8005cea <HAL_SD_WriteBlocks+0x82>
    hsd->State = HAL_SD_STATE_BUSY;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8005cb8:	6823      	ldr	r3, [r4, #0]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005cbe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d001      	beq.n	8005cc8 <HAL_SD_WriteBlocks+0x60>
      add *= 512U;
 8005cc4:	ea4f 2848 	mov.w	r8, r8, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005cc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ccc:	6820      	ldr	r0, [r4, #0]
 8005cce:	f003 f933 	bl	8008f38 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	b178      	cbz	r0, 8005cf6 <HAL_SD_WriteBlocks+0x8e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005cd6:	6822      	ldr	r2, [r4, #0]
 8005cd8:	496b      	ldr	r1, [pc, #428]	; (8005e88 <HAL_SD_WriteBlocks+0x220>)
 8005cda:	6391      	str	r1, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005cdc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005cde:	4318      	orrs	r0, r3
 8005ce0:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ce2:	2001      	movs	r0, #1
 8005ce4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8005ce8:	e7d3      	b.n	8005c92 <HAL_SD_WriteBlocks+0x2a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005cea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005cf0:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8005cf2:	2001      	movs	r0, #1
 8005cf4:	e7cd      	b.n	8005c92 <HAL_SD_WriteBlocks+0x2a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cfa:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005cfc:	0273      	lsls	r3, r6, #9
 8005cfe:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005d00:	2390      	movs	r3, #144	; 0x90
 8005d02:	9304      	str	r3, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005d04:	2300      	movs	r3, #0
 8005d06:	9305      	str	r3, [sp, #20]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005d08:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005d0a:	9307      	str	r3, [sp, #28]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005d0c:	a902      	add	r1, sp, #8
 8005d0e:	6820      	ldr	r0, [r4, #0]
 8005d10:	f003 f900 	bl	8008f14 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005d14:	6822      	ldr	r2, [r4, #0]
 8005d16:	68d3      	ldr	r3, [r2, #12]
 8005d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d1c:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 8005d1e:	2e01      	cmp	r6, #1
 8005d20:	d90c      	bls.n	8005d3c <HAL_SD_WriteBlocks+0xd4>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005d22:	2320      	movs	r3, #32
 8005d24:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005d26:	4641      	mov	r1, r8
 8005d28:	6820      	ldr	r0, [r4, #0]
 8005d2a:	f003 f969 	bl	8009000 <SDMMC_CmdWriteMultiBlock>
 8005d2e:	4682      	mov	sl, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d30:	f1ba 0f00 	cmp.w	sl, #0
 8005d34:	d10a      	bne.n	8005d4c <HAL_SD_WriteBlocks+0xe4>
    dataremaining = config.DataLength;
 8005d36:	f8dd 900c 	ldr.w	r9, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005d3a:	e033      	b.n	8005da4 <HAL_SD_WriteBlocks+0x13c>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005d3c:	2310      	movs	r3, #16
 8005d3e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005d40:	4641      	mov	r1, r8
 8005d42:	6820      	ldr	r0, [r4, #0]
 8005d44:	f003 f943 	bl	8008fce <SDMMC_CmdWriteSingleBlock>
 8005d48:	4682      	mov	sl, r0
 8005d4a:	e7f1      	b.n	8005d30 <HAL_SD_WriteBlocks+0xc8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	4a4e      	ldr	r2, [pc, #312]	; (8005e88 <HAL_SD_WriteBlocks+0x220>)
 8005d50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005d52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d54:	ea43 030a 	orr.w	r3, r3, sl
 8005d58:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d5a:	2001      	movs	r0, #1
 8005d5c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d60:	2300      	movs	r3, #0
 8005d62:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005d64:	e795      	b.n	8005c92 <HAL_SD_WriteBlocks+0x2a>
          data = (uint32_t)(*tempbuff);
 8005d66:	782b      	ldrb	r3, [r5, #0]
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005d68:	786a      	ldrb	r2, [r5, #1]
 8005d6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005d6e:	78aa      	ldrb	r2, [r5, #2]
 8005d70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005d74:	78ea      	ldrb	r2, [r5, #3]
 8005d76:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005d7a:	a908      	add	r1, sp, #32
 8005d7c:	f841 3d1c 	str.w	r3, [r1, #-28]!
          tempbuff++;
 8005d80:	3504      	adds	r5, #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005d82:	6820      	ldr	r0, [r4, #0]
 8005d84:	f002 ff99 	bl	8008cba <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005d88:	f108 0801 	add.w	r8, r8, #1
 8005d8c:	f1b8 0f07 	cmp.w	r8, #7
 8005d90:	d9e9      	bls.n	8005d66 <HAL_SD_WriteBlocks+0xfe>
        dataremaining -= 32U;
 8005d92:	f1a9 0920 	sub.w	r9, r9, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005d96:	f7fa fc7f 	bl	8000698 <HAL_GetTick>
 8005d9a:	1bc0      	subs	r0, r0, r7
 8005d9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d9e:	4298      	cmp	r0, r3
 8005da0:	d20e      	bcs.n	8005dc0 <HAL_SD_WriteBlocks+0x158>
 8005da2:	b16b      	cbz	r3, 8005dc0 <HAL_SD_WriteBlocks+0x158>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005da8:	f412 7f8d 	tst.w	r2, #282	; 0x11a
 8005dac:	d116      	bne.n	8005ddc <HAL_SD_WriteBlocks+0x174>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8005dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005db4:	d0ef      	beq.n	8005d96 <HAL_SD_WriteBlocks+0x12e>
 8005db6:	f1b9 0f1f 	cmp.w	r9, #31
 8005dba:	d9ec      	bls.n	8005d96 <HAL_SD_WriteBlocks+0x12e>
        for(count = 0U; count < 8U; count++)
 8005dbc:	46d0      	mov	r8, sl
 8005dbe:	e7e5      	b.n	8005d8c <HAL_SD_WriteBlocks+0x124>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005dc0:	6823      	ldr	r3, [r4, #0]
 8005dc2:	4a31      	ldr	r2, [pc, #196]	; (8005e88 <HAL_SD_WriteBlocks+0x220>)
 8005dc4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005dc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005dc8:	ea43 030a 	orr.w	r3, r3, sl
 8005dcc:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8005dd8:	2003      	movs	r0, #3
 8005dda:	e75a      	b.n	8005c92 <HAL_SD_WriteBlocks+0x2a>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005de2:	60da      	str	r2, [r3, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005de4:	6820      	ldr	r0, [r4, #0]
 8005de6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005de8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005dec:	d007      	beq.n	8005dfe <HAL_SD_WriteBlocks+0x196>
 8005dee:	2e01      	cmp	r6, #1
 8005df0:	d905      	bls.n	8005dfe <HAL_SD_WriteBlocks+0x196>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005df2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005df4:	2b03      	cmp	r3, #3
 8005df6:	d002      	beq.n	8005dfe <HAL_SD_WriteBlocks+0x196>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005df8:	f003 f91c 	bl	8009034 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8005dfc:	b9c0      	cbnz	r0, 8005e30 <HAL_SD_WriteBlocks+0x1c8>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e02:	f012 0f08 	tst.w	r2, #8
 8005e06:	d11f      	bne.n	8005e48 <HAL_SD_WriteBlocks+0x1e0>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e0a:	f012 0f02 	tst.w	r2, #2
 8005e0e:	d127      	bne.n	8005e60 <HAL_SD_WriteBlocks+0x1f8>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8005e10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e12:	f012 0f10 	tst.w	r2, #16
 8005e16:	d02f      	beq.n	8005e78 <HAL_SD_WriteBlocks+0x210>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e18:	4a1b      	ldr	r2, [pc, #108]	; (8005e88 <HAL_SD_WriteBlocks+0x220>)
 8005e1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005e1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e1e:	f043 0310 	orr.w	r3, r3, #16
 8005e22:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e24:	2001      	movs	r0, #1
 8005e26:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005e2e:	e730      	b.n	8005c92 <HAL_SD_WriteBlocks+0x2a>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e30:	6823      	ldr	r3, [r4, #0]
 8005e32:	4915      	ldr	r1, [pc, #84]	; (8005e88 <HAL_SD_WriteBlocks+0x220>)
 8005e34:	6399      	str	r1, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005e36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e38:	4303      	orrs	r3, r0
 8005e3a:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005e3c:	2001      	movs	r0, #1
 8005e3e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005e42:	2300      	movs	r3, #0
 8005e44:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 8005e46:	e724      	b.n	8005c92 <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e48:	4a0f      	ldr	r2, [pc, #60]	; (8005e88 <HAL_SD_WriteBlocks+0x220>)
 8005e4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005e4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e4e:	f043 0308 	orr.w	r3, r3, #8
 8005e52:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e54:	2001      	movs	r0, #1
 8005e56:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005e5e:	e718      	b.n	8005c92 <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e60:	4a09      	ldr	r2, [pc, #36]	; (8005e88 <HAL_SD_WriteBlocks+0x220>)
 8005e62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005e64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e66:	f043 0302 	orr.w	r3, r3, #2
 8005e6a:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e6c:	2001      	movs	r0, #1
 8005e6e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e72:	2300      	movs	r3, #0
 8005e74:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005e76:	e70c      	b.n	8005c92 <HAL_SD_WriteBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005e78:	4a04      	ldr	r2, [pc, #16]	; (8005e8c <HAL_SD_WriteBlocks+0x224>)
 8005e7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8005e82:	2000      	movs	r0, #0
 8005e84:	e705      	b.n	8005c92 <HAL_SD_WriteBlocks+0x2a>
 8005e86:	bf00      	nop
 8005e88:	1fe00fff 	.word	0x1fe00fff
 8005e8c:	18000f3a 	.word	0x18000f3a

08005e90 <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 8005e90:	4770      	bx	lr
	...

08005e94 <SD_PowerON>:
{
 8005e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e96:	b083      	sub	sp, #12
 8005e98:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	9301      	str	r3, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e9e:	f7fa fbfb 	bl	8000698 <HAL_GetTick>
 8005ea2:	4607      	mov	r7, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005ea4:	6820      	ldr	r0, [r4, #0]
 8005ea6:	f003 f904 	bl	80090b2 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005eaa:	4606      	mov	r6, r0
 8005eac:	b110      	cbz	r0, 8005eb4 <SD_PowerON+0x20>
}
 8005eae:	4630      	mov	r0, r6
 8005eb0:	b003      	add	sp, #12
 8005eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005eb4:	6820      	ldr	r0, [r4, #0]
 8005eb6:	f003 f90f 	bl	80090d8 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005eba:	b938      	cbnz	r0, 8005ecc <SD_PowerON+0x38>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	6423      	str	r3, [r4, #64]	; 0x40
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005ec0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d00b      	beq.n	8005ede <SD_PowerON+0x4a>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005ec6:	4635      	mov	r5, r6
 8005ec8:	4630      	mov	r0, r6
 8005eca:	e014      	b.n	8005ef6 <SD_PowerON+0x62>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005ed0:	6820      	ldr	r0, [r4, #0]
 8005ed2:	f003 f8ee 	bl	80090b2 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ed6:	2800      	cmp	r0, #0
 8005ed8:	d0f2      	beq.n	8005ec0 <SD_PowerON+0x2c>
      return errorstate;
 8005eda:	4606      	mov	r6, r0
 8005edc:	e7e7      	b.n	8005eae <SD_PowerON+0x1a>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005ede:	2100      	movs	r1, #0
 8005ee0:	6820      	ldr	r0, [r4, #0]
 8005ee2:	f003 f911 	bl	8009108 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d0ed      	beq.n	8005ec6 <SD_PowerON+0x32>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005eea:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8005eee:	e7de      	b.n	8005eae <SD_PowerON+0x1a>
    count++;
 8005ef0:	9b01      	ldr	r3, [sp, #4]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005ef6:	9a01      	ldr	r2, [sp, #4]
 8005ef8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d815      	bhi.n	8005f2c <SD_PowerON+0x98>
 8005f00:	b9a5      	cbnz	r5, 8005f2c <SD_PowerON+0x98>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005f02:	2100      	movs	r1, #0
 8005f04:	6820      	ldr	r0, [r4, #0]
 8005f06:	f003 f8ff 	bl	8009108 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	d16a      	bne.n	8005fe4 <SD_PowerON+0x150>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005f0e:	493c      	ldr	r1, [pc, #240]	; (8006000 <SD_PowerON+0x16c>)
 8005f10:	6820      	ldr	r0, [r4, #0]
 8005f12:	f003 f912 	bl	800913a <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f16:	4605      	mov	r5, r0
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	d165      	bne.n	8005fe8 <SD_PowerON+0x154>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	6820      	ldr	r0, [r4, #0]
 8005f20:	f002 feef 	bl	8008d02 <SDMMC_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005f24:	0fc3      	lsrs	r3, r0, #31
 8005f26:	d0e3      	beq.n	8005ef0 <SD_PowerON+0x5c>
 8005f28:	461d      	mov	r5, r3
 8005f2a:	e7e1      	b.n	8005ef0 <SD_PowerON+0x5c>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005f2c:	9a01      	ldr	r2, [sp, #4]
 8005f2e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d85b      	bhi.n	8005fee <SD_PowerON+0x15a>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005f36:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005f3a:	d0b8      	beq.n	8005eae <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8005f40:	69a3      	ldr	r3, [r4, #24]
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d1b3      	bne.n	8005eae <SD_PowerON+0x1a>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8005f46:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8005f4a:	d0b0      	beq.n	8005eae <SD_PowerON+0x1a>
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f50:	65e3      	str	r3, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8005f52:	6822      	ldr	r2, [r4, #0]
 8005f54:	6813      	ldr	r3, [r2, #0]
 8005f56:	f043 0308 	orr.w	r3, r3, #8
 8005f5a:	6013      	str	r3, [r2, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8005f5c:	6820      	ldr	r0, [r4, #0]
 8005f5e:	f003 f9ab 	bl	80092b8 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 8005f62:	4606      	mov	r6, r0
 8005f64:	2800      	cmp	r0, #0
 8005f66:	d1a2      	bne.n	8005eae <SD_PowerON+0x1a>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8005f68:	6823      	ldr	r3, [r4, #0]
 8005f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f6c:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
 8005f70:	d108      	bne.n	8005f84 <SD_PowerON+0xf0>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005f72:	f7fa fb91 	bl	8000698 <HAL_GetTick>
 8005f76:	1bc0      	subs	r0, r0, r7
 8005f78:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005f7c:	d1f4      	bne.n	8005f68 <SD_PowerON+0xd4>
            return HAL_SD_ERROR_TIMEOUT;
 8005f7e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005f82:	e794      	b.n	8005eae <SD_PowerON+0x1a>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8005f84:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005f88:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8005f8a:	6823      	ldr	r3, [r4, #0]
 8005f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005f92:	d02f      	beq.n	8005ff4 <SD_PowerON+0x160>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8005f94:	2001      	movs	r0, #1
 8005f96:	f7ff ff7b 	bl	8005e90 <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8005f9a:	6822      	ldr	r2, [r4, #0]
 8005f9c:	6813      	ldr	r3, [r2, #0]
 8005f9e:	f043 0304 	orr.w	r3, r3, #4
 8005fa2:	6013      	str	r3, [r2, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8005fa4:	6823      	ldr	r3, [r4, #0]
 8005fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fa8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8005fac:	d108      	bne.n	8005fc0 <SD_PowerON+0x12c>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005fae:	f7fa fb73 	bl	8000698 <HAL_GetTick>
 8005fb2:	1bc0      	subs	r0, r0, r7
 8005fb4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005fb8:	d1f4      	bne.n	8005fa4 <SD_PowerON+0x110>
              return HAL_SD_ERROR_TIMEOUT;
 8005fba:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005fbe:	e776      	b.n	8005eae <SD_PowerON+0x1a>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8005fc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005fc4:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fca:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8005fce:	d114      	bne.n	8005ffa <SD_PowerON+0x166>
          hsd->Instance->POWER = 0x13U;
 8005fd0:	2213      	movs	r2, #19
 8005fd2:	601a      	str	r2, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fda:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fe0:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005fe2:	e764      	b.n	8005eae <SD_PowerON+0x1a>
      return errorstate;
 8005fe4:	4606      	mov	r6, r0
 8005fe6:	e762      	b.n	8005eae <SD_PowerON+0x1a>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005fe8:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8005fec:	e75f      	b.n	8005eae <SD_PowerON+0x1a>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005fee:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 8005ff2:	e75c      	b.n	8005eae <SD_PowerON+0x1a>
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8005ff4:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8005ff8:	e759      	b.n	8005eae <SD_PowerON+0x1a>
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005ffa:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 8005ffe:	e756      	b.n	8005eae <SD_PowerON+0x1a>
 8006000:	c1100000 	.word	0xc1100000

08006004 <HAL_SD_GetCardCSD>:
{
 8006004:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006006:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006008:	0f9b      	lsrs	r3, r3, #30
 800600a:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800600c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800600e:	f3c3 6383 	ubfx	r3, r3, #26, #4
 8006012:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006014:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
 8006018:	f003 0303 	and.w	r3, r3, #3
 800601c:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800601e:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 8006022:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006024:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8006028:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800602a:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800602e:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006030:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006032:	0d1b      	lsrs	r3, r3, #20
 8006034:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006036:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
 800603a:	f003 030f 	and.w	r3, r3, #15
 800603e:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006040:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006042:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8006046:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006048:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800604a:	f3c3 3380 	ubfx	r3, r3, #14, #1
 800604e:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006050:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006052:	f3c3 3340 	ubfx	r3, r3, #13, #1
 8006056:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006058:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800605a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800605e:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006060:	2300      	movs	r3, #0
 8006062:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8006064:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006066:	2b00      	cmp	r3, #0
 8006068:	f040 8088 	bne.w	800617c <HAL_SD_GetCardCSD+0x178>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800606c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800606e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006072:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 8006076:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8006078:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 800607c:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800607e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006080:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 8006084:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006086:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800608a:	f003 0307 	and.w	r3, r3, #7
 800608e:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006090:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006092:	f3c3 5342 	ubfx	r3, r3, #21, #3
 8006096:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006098:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800609a:	f3c3 4382 	ubfx	r3, r3, #18, #3
 800609e:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80060a0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80060a2:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 80060a6:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80060a8:	690b      	ldr	r3, [r1, #16]
 80060aa:	3301      	adds	r3, #1
 80060ac:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80060ae:	7e0a      	ldrb	r2, [r1, #24]
 80060b0:	f002 0207 	and.w	r2, r2, #7
 80060b4:	3202      	adds	r2, #2
 80060b6:	fa03 f202 	lsl.w	r2, r3, r2
 80060ba:	64c2      	str	r2, [r0, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80060bc:	7a0b      	ldrb	r3, [r1, #8]
 80060be:	f003 040f 	and.w	r4, r3, #15
 80060c2:	2301      	movs	r3, #1
 80060c4:	40a3      	lsls	r3, r4
 80060c6:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80060c8:	0a5b      	lsrs	r3, r3, #9
 80060ca:	fb03 f302 	mul.w	r3, r3, r2
 80060ce:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80060d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060d4:	6583      	str	r3, [r0, #88]	; 0x58
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80060d6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80060d8:	f3c3 3380 	ubfx	r3, r3, #14, #1
 80060dc:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80060de:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80060e0:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 80060e4:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80060e6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80060e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ec:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80060ee:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80060f0:	0fdb      	lsrs	r3, r3, #31
 80060f2:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80060f4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80060f6:	f3c3 7341 	ubfx	r3, r3, #29, #2
 80060fa:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80060fc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80060fe:	f3c3 6382 	ubfx	r3, r3, #26, #3
 8006102:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006104:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006106:	f3c3 5383 	ubfx	r3, r3, #22, #4
 800610a:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800610c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800610e:	f3c3 5340 	ubfx	r3, r3, #21, #1
 8006112:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 8006116:	2300      	movs	r3, #0
 8006118:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800611c:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8006120:	f002 0201 	and.w	r2, r2, #1
 8006124:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006128:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800612a:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800612e:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006132:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006134:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8006138:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800613c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800613e:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8006142:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006146:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006148:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800614c:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006150:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006152:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8006156:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800615a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800615c:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8006160:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006164:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006166:	f3c2 0246 	ubfx	r2, r2, #1, #7
 800616a:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800616e:	2201      	movs	r2, #1
 8006170:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 8006174:	4618      	mov	r0, r3
}
 8006176:	f85d 4b04 	ldr.w	r4, [sp], #4
 800617a:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800617c:	2b01      	cmp	r3, #1
 800617e:	d00b      	beq.n	8006198 <HAL_SD_GetCardCSD+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006180:	6803      	ldr	r3, [r0, #0]
 8006182:	4a0e      	ldr	r2, [pc, #56]	; (80061bc <HAL_SD_GetCardCSD+0x1b8>)
 8006184:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006186:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800618c:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800618e:	2301      	movs	r3, #1
 8006190:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8006194:	4618      	mov	r0, r3
 8006196:	e7ee      	b.n	8006176 <HAL_SD_GetCardCSD+0x172>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006198:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800619a:	041b      	lsls	r3, r3, #16
 800619c:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80061a0:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 80061a4:	4313      	orrs	r3, r2
 80061a6:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80061a8:	690b      	ldr	r3, [r1, #16]
 80061aa:	3301      	adds	r3, #1
 80061ac:	029b      	lsls	r3, r3, #10
 80061ae:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80061b0:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80061b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061b6:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80061b8:	6583      	str	r3, [r0, #88]	; 0x58
 80061ba:	e78c      	b.n	80060d6 <HAL_SD_GetCardCSD+0xd2>
 80061bc:	1fe00fff 	.word	0x1fe00fff

080061c0 <SD_InitCard>:
{
 80061c0:	b510      	push	{r4, lr}
 80061c2:	b08c      	sub	sp, #48	; 0x30
 80061c4:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 80061c6:	2301      	movs	r3, #1
 80061c8:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80061cc:	6800      	ldr	r0, [r0, #0]
 80061ce:	f002 fd7f 	bl	8008cd0 <SDMMC_GetPowerState>
 80061d2:	2800      	cmp	r0, #0
 80061d4:	d05c      	beq.n	8006290 <SD_InitCard+0xd0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80061d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80061d8:	2b03      	cmp	r3, #3
 80061da:	d136      	bne.n	800624a <SD_InitCard+0x8a>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80061dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80061de:	2b03      	cmp	r3, #3
 80061e0:	d14d      	bne.n	800627e <SD_InitCard+0xbe>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80061e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80061e4:	2b03      	cmp	r3, #3
 80061e6:	d01d      	beq.n	8006224 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 80061e8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80061ec:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80061ee:	0409      	lsls	r1, r1, #16
 80061f0:	6820      	ldr	r0, [r4, #0]
 80061f2:	f003 f800 	bl	80091f6 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80061f6:	4603      	mov	r3, r0
 80061f8:	2800      	cmp	r0, #0
 80061fa:	d14b      	bne.n	8006294 <SD_InitCard+0xd4>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80061fc:	2100      	movs	r1, #0
 80061fe:	6820      	ldr	r0, [r4, #0]
 8006200:	f002 fd7f 	bl	8008d02 <SDMMC_GetResponse>
 8006204:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006206:	2104      	movs	r1, #4
 8006208:	6820      	ldr	r0, [r4, #0]
 800620a:	f002 fd7a 	bl	8008d02 <SDMMC_GetResponse>
 800620e:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006210:	2108      	movs	r1, #8
 8006212:	6820      	ldr	r0, [r4, #0]
 8006214:	f002 fd75 	bl	8008d02 <SDMMC_GetResponse>
 8006218:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800621a:	210c      	movs	r1, #12
 800621c:	6820      	ldr	r0, [r4, #0]
 800621e:	f002 fd70 	bl	8008d02 <SDMMC_GetResponse>
 8006222:	66e0      	str	r0, [r4, #108]	; 0x6c
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006224:	2104      	movs	r1, #4
 8006226:	6820      	ldr	r0, [r4, #0]
 8006228:	f002 fd6b 	bl	8008d02 <SDMMC_GetResponse>
 800622c:	0d00      	lsrs	r0, r0, #20
 800622e:	6460      	str	r0, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006230:	a901      	add	r1, sp, #4
 8006232:	4620      	mov	r0, r4
 8006234:	f7ff fee6 	bl	8006004 <HAL_SD_GetCardCSD>
 8006238:	bb78      	cbnz	r0, 800629a <SD_InitCard+0xda>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800623a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800623c:	0412      	lsls	r2, r2, #16
 800623e:	2300      	movs	r3, #0
 8006240:	6820      	ldr	r0, [r4, #0]
 8006242:	f002 ff1d 	bl	8009080 <SDMMC_CmdSelDesel>
 8006246:	4603      	mov	r3, r0
 8006248:	e024      	b.n	8006294 <SD_InitCard+0xd4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800624a:	6820      	ldr	r0, [r4, #0]
 800624c:	f002 ffbd 	bl	80091ca <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006250:	4603      	mov	r3, r0
 8006252:	b9f8      	cbnz	r0, 8006294 <SD_InitCard+0xd4>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006254:	2100      	movs	r1, #0
 8006256:	6820      	ldr	r0, [r4, #0]
 8006258:	f002 fd53 	bl	8008d02 <SDMMC_GetResponse>
 800625c:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800625e:	2104      	movs	r1, #4
 8006260:	6820      	ldr	r0, [r4, #0]
 8006262:	f002 fd4e 	bl	8008d02 <SDMMC_GetResponse>
 8006266:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006268:	2108      	movs	r1, #8
 800626a:	6820      	ldr	r0, [r4, #0]
 800626c:	f002 fd49 	bl	8008d02 <SDMMC_GetResponse>
 8006270:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006272:	210c      	movs	r1, #12
 8006274:	6820      	ldr	r0, [r4, #0]
 8006276:	f002 fd44 	bl	8008d02 <SDMMC_GetResponse>
 800627a:	67e0      	str	r0, [r4, #124]	; 0x7c
 800627c:	e7ae      	b.n	80061dc <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800627e:	f10d 0102 	add.w	r1, sp, #2
 8006282:	6820      	ldr	r0, [r4, #0]
 8006284:	f002 ffcd 	bl	8009222 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006288:	4603      	mov	r3, r0
 800628a:	2800      	cmp	r0, #0
 800628c:	d0a9      	beq.n	80061e2 <SD_InitCard+0x22>
 800628e:	e001      	b.n	8006294 <SD_InitCard+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006290:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
}
 8006294:	4618      	mov	r0, r3
 8006296:	b00c      	add	sp, #48	; 0x30
 8006298:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800629a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800629e:	e7f9      	b.n	8006294 <SD_InitCard+0xd4>

080062a0 <HAL_SD_InitCard>:
{
 80062a0:	b530      	push	{r4, r5, lr}
 80062a2:	b08b      	sub	sp, #44	; 0x2c
 80062a4:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80062a6:	2300      	movs	r3, #0
 80062a8:	9304      	str	r3, [sp, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80062aa:	9305      	str	r3, [sp, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80062ac:	9306      	str	r3, [sp, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80062ae:	9307      	str	r3, [sp, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80062b0:	23fa      	movs	r3, #250	; 0xfa
 80062b2:	9308      	str	r3, [sp, #32]
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80062b4:	6983      	ldr	r3, [r0, #24]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d00e      	beq.n	80062d8 <HAL_SD_InitCard+0x38>
  status = SDMMC_Init(hsd->Instance, Init);
 80062ba:	ab0a      	add	r3, sp, #40	; 0x28
 80062bc:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80062c0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80062c4:	ab04      	add	r3, sp, #16
 80062c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062c8:	6820      	ldr	r0, [r4, #0]
 80062ca:	f002 fcd9 	bl	8008c80 <SDMMC_Init>
  if(status != HAL_OK)
 80062ce:	b148      	cbz	r0, 80062e4 <HAL_SD_InitCard+0x44>
    return HAL_ERROR;
 80062d0:	2501      	movs	r5, #1
}
 80062d2:	4628      	mov	r0, r5
 80062d4:	b00b      	add	sp, #44	; 0x2c
 80062d6:	bd30      	pop	{r4, r5, pc}
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80062d8:	6802      	ldr	r2, [r0, #0]
 80062da:	6813      	ldr	r3, [r2, #0]
 80062dc:	f043 0310 	orr.w	r3, r3, #16
 80062e0:	6013      	str	r3, [r2, #0]
 80062e2:	e7ea      	b.n	80062ba <HAL_SD_InitCard+0x1a>
  status = SDMMC_PowerState_ON(hsd->Instance);
 80062e4:	6820      	ldr	r0, [r4, #0]
 80062e6:	f002 fced 	bl	8008cc4 <SDMMC_PowerState_ON>
  if(status != HAL_OK)
 80062ea:	4605      	mov	r5, r0
 80062ec:	b108      	cbz	r0, 80062f2 <HAL_SD_InitCard+0x52>
    return HAL_ERROR;
 80062ee:	2501      	movs	r5, #1
 80062f0:	e7ef      	b.n	80062d2 <HAL_SD_InitCard+0x32>
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 80062f2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80062f6:	f7fe fc0f 	bl	8004b18 <HAL_RCCEx_GetPeriphCLKFreq>
 80062fa:	4b13      	ldr	r3, [pc, #76]	; (8006348 <HAL_SD_InitCard+0xa8>)
 80062fc:	fba3 3000 	umull	r3, r0, r3, r0
  if(sdmmc_clk != 0U)
 8006300:	0940      	lsrs	r0, r0, #5
 8006302:	d011      	beq.n	8006328 <HAL_SD_InitCard+0x88>
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8006304:	4b11      	ldr	r3, [pc, #68]	; (800634c <HAL_SD_InitCard+0xac>)
 8006306:	fbb3 f0f0 	udiv	r0, r3, r0
 800630a:	3001      	adds	r0, #1
 800630c:	f7fa f9ca 	bl	80006a4 <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 8006310:	4620      	mov	r0, r4
 8006312:	f7ff fdbf 	bl	8005e94 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006316:	4603      	mov	r3, r0
 8006318:	b150      	cbz	r0, 8006330 <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
 800631a:	2501      	movs	r5, #1
 800631c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006320:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006322:	4318      	orrs	r0, r3
 8006324:	63a0      	str	r0, [r4, #56]	; 0x38
    return HAL_ERROR;
 8006326:	e7d4      	b.n	80062d2 <HAL_SD_InitCard+0x32>
    HAL_Delay(2U);
 8006328:	2002      	movs	r0, #2
 800632a:	f7fa f9bb 	bl	80006a4 <HAL_Delay>
 800632e:	e7ef      	b.n	8006310 <HAL_SD_InitCard+0x70>
  errorstate = SD_InitCard(hsd);
 8006330:	4620      	mov	r0, r4
 8006332:	f7ff ff45 	bl	80061c0 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006336:	2800      	cmp	r0, #0
 8006338:	d0cb      	beq.n	80062d2 <HAL_SD_InitCard+0x32>
    hsd->State = HAL_SD_STATE_READY;
 800633a:	2501      	movs	r5, #1
 800633c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006340:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006342:	4303      	orrs	r3, r0
 8006344:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8006346:	e7c4      	b.n	80062d2 <HAL_SD_InitCard+0x32>
 8006348:	10624dd3 	.word	0x10624dd3
 800634c:	00012110 	.word	0x00012110

08006350 <HAL_SD_GetCardStatus>:
{
 8006350:	b530      	push	{r4, r5, lr}
 8006352:	b091      	sub	sp, #68	; 0x44
 8006354:	4605      	mov	r5, r0
 8006356:	460c      	mov	r4, r1
  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006358:	4669      	mov	r1, sp
 800635a:	f7ff f9f7 	bl	800574c <SD_SendSDStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800635e:	2800      	cmp	r0, #0
 8006360:	d13c      	bne.n	80063dc <HAL_SD_GetCardStatus+0x8c>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006362:	9a00      	ldr	r2, [sp, #0]
 8006364:	f3c2 1381 	ubfx	r3, r2, #6, #2
 8006368:	7023      	strb	r3, [r4, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800636a:	f3c2 1340 	ubfx	r3, r2, #5, #1
 800636e:	7063      	strb	r3, [r4, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006370:	0a13      	lsrs	r3, r2, #8
 8006372:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006376:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800637a:	b29b      	uxth	r3, r3
 800637c:	8063      	strh	r3, [r4, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800637e:	9a01      	ldr	r2, [sp, #4]
 8006380:	0213      	lsls	r3, r2, #8
 8006382:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006386:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800638a:	0a11      	lsrs	r1, r2, #8
 800638c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006390:	430b      	orrs	r3, r1
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006392:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006396:	6063      	str	r3, [r4, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006398:	9b02      	ldr	r3, [sp, #8]
 800639a:	b2da      	uxtb	r2, r3
 800639c:	7222      	strb	r2, [r4, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800639e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80063a2:	7262      	strb	r2, [r4, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80063a4:	f3c3 5203 	ubfx	r2, r3, #20, #4
 80063a8:	72a2      	strb	r2, [r4, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80063aa:	0c1b      	lsrs	r3, r3, #16
 80063ac:	9a03      	ldr	r2, [sp, #12]
 80063ae:	b2d1      	uxtb	r1, r2
 80063b0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80063b4:	430b      	orrs	r3, r1
 80063b6:	81a3      	strh	r3, [r4, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80063b8:	f3c2 2385 	ubfx	r3, r2, #10, #6
 80063bc:	73a3      	strb	r3, [r4, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80063be:	f3c2 2301 	ubfx	r3, r2, #8, #2
 80063c2:	73e3      	strb	r3, [r4, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80063c4:	f3c2 1303 	ubfx	r3, r2, #4, #4
 80063c8:	7423      	strb	r3, [r4, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80063ca:	f002 020f 	and.w	r2, r2, #15
 80063ce:	7462      	strb	r2, [r4, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80063d0:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80063d4:	74a3      	strb	r3, [r4, #18]
  return HAL_OK;
 80063d6:	2000      	movs	r0, #0
}
 80063d8:	b011      	add	sp, #68	; 0x44
 80063da:	bd30      	pop	{r4, r5, pc}
 80063dc:	4603      	mov	r3, r0
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063de:	682a      	ldr	r2, [r5, #0]
 80063e0:	4904      	ldr	r1, [pc, #16]	; (80063f4 <HAL_SD_GetCardStatus+0xa4>)
 80063e2:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80063e4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80063e6:	4318      	orrs	r0, r3
 80063e8:	63a8      	str	r0, [r5, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80063ea:	2001      	movs	r0, #1
 80063ec:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    return HAL_ERROR;
 80063f0:	e7f2      	b.n	80063d8 <HAL_SD_GetCardStatus+0x88>
 80063f2:	bf00      	nop
 80063f4:	1fe00fff 	.word	0x1fe00fff

080063f8 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80063f8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80063fa:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80063fc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80063fe:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006400:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006402:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006404:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006406:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006408:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800640a:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800640c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800640e:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006410:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006412:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006414:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006416:	61cb      	str	r3, [r1, #28]
}
 8006418:	2000      	movs	r0, #0
 800641a:	4770      	bx	lr

0800641c <HAL_SD_ConfigWideBusOperation>:
{
 800641c:	b530      	push	{r4, r5, lr}
 800641e:	b08b      	sub	sp, #44	; 0x2c
 8006420:	4604      	mov	r4, r0
 8006422:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8006424:	2303      	movs	r3, #3
 8006426:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 800642a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800642c:	2b03      	cmp	r3, #3
 800642e:	d01c      	beq.n	800646a <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006430:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006434:	d008      	beq.n	8006448 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006436:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800643a:	d00a      	beq.n	8006452 <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800643c:	b179      	cbz	r1, 800645e <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800643e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006440:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006444:	6383      	str	r3, [r0, #56]	; 0x38
 8006446:	e014      	b.n	8006472 <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006448:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800644a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800644e:	6383      	str	r3, [r0, #56]	; 0x38
 8006450:	e00f      	b.n	8006472 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 8006452:	f7ff fa8d 	bl	8005970 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8006456:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006458:	4318      	orrs	r0, r3
 800645a:	63a0      	str	r0, [r4, #56]	; 0x38
 800645c:	e009      	b.n	8006472 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 800645e:	f7ff fab2 	bl	80059c6 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8006462:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006464:	4318      	orrs	r0, r3
 8006466:	63a0      	str	r0, [r4, #56]	; 0x38
 8006468:	e003      	b.n	8006472 <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800646a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800646c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006470:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006472:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006474:	b9d3      	cbnz	r3, 80064ac <HAL_SD_ConfigWideBusOperation+0x90>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006476:	6863      	ldr	r3, [r4, #4]
 8006478:	9304      	str	r3, [sp, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800647a:	68a3      	ldr	r3, [r4, #8]
 800647c:	9305      	str	r3, [sp, #20]
    Init.BusWide             = WideMode;
 800647e:	9506      	str	r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006480:	6923      	ldr	r3, [r4, #16]
 8006482:	9307      	str	r3, [sp, #28]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8006484:	6963      	ldr	r3, [r4, #20]
 8006486:	2b03      	cmp	r3, #3
 8006488:	d917      	bls.n	80064ba <HAL_SD_ConfigWideBusOperation+0x9e>
      Init.ClockDiv = hsd->Init.ClockDiv;
 800648a:	9308      	str	r3, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800648c:	ab0a      	add	r3, sp, #40	; 0x28
 800648e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8006492:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006496:	ab04      	add	r3, sp, #16
 8006498:	cb0e      	ldmia	r3, {r1, r2, r3}
 800649a:	6820      	ldr	r0, [r4, #0]
 800649c:	f002 fbf0 	bl	8008c80 <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 80064a0:	2301      	movs	r3, #1
 80064a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80064a6:	2000      	movs	r0, #0
}
 80064a8:	b00b      	add	sp, #44	; 0x2c
 80064aa:	bd30      	pop	{r4, r5, pc}
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064ac:	6823      	ldr	r3, [r4, #0]
 80064ae:	4a0a      	ldr	r2, [pc, #40]	; (80064d8 <HAL_SD_ConfigWideBusOperation+0xbc>)
 80064b0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80064b2:	2001      	movs	r0, #1
 80064b4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    return HAL_ERROR;
 80064b8:	e7f6      	b.n	80064a8 <HAL_SD_ConfigWideBusOperation+0x8c>
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80064ba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80064bc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80064c0:	d005      	beq.n	80064ce <HAL_SD_ConfigWideBusOperation+0xb2>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80064c2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80064c6:	d004      	beq.n	80064d2 <HAL_SD_ConfigWideBusOperation+0xb6>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 80064c8:	2304      	movs	r3, #4
 80064ca:	9308      	str	r3, [sp, #32]
 80064cc:	e7de      	b.n	800648c <HAL_SD_ConfigWideBusOperation+0x70>
      Init.ClockDiv = hsd->Init.ClockDiv;
 80064ce:	9308      	str	r3, [sp, #32]
 80064d0:	e7dc      	b.n	800648c <HAL_SD_ConfigWideBusOperation+0x70>
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 80064d2:	2302      	movs	r3, #2
 80064d4:	9308      	str	r3, [sp, #32]
 80064d6:	e7d9      	b.n	800648c <HAL_SD_ConfigWideBusOperation+0x70>
 80064d8:	1fe00fff 	.word	0x1fe00fff

080064dc <HAL_SD_GetCardState>:
{
 80064dc:	b510      	push	{r4, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 80064e2:	a902      	add	r1, sp, #8
 80064e4:	2300      	movs	r3, #0
 80064e6:	f841 3d04 	str.w	r3, [r1, #-4]!
  errorstate = SD_SendStatus(hsd, &resp1);
 80064ea:	f7ff fa97 	bl	8005a1c <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80064ee:	b118      	cbz	r0, 80064f8 <HAL_SD_GetCardState+0x1c>
 80064f0:	4603      	mov	r3, r0
    hsd->ErrorCode |= errorstate;
 80064f2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80064f4:	4318      	orrs	r0, r3
 80064f6:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80064f8:	9801      	ldr	r0, [sp, #4]
 80064fa:	f3c0 2043 	ubfx	r0, r0, #9, #4
 80064fe:	b002      	add	sp, #8
 8006500:	bd10      	pop	{r4, pc}

08006502 <HAL_SD_Init>:
{
 8006502:	b570      	push	{r4, r5, r6, lr}
 8006504:	b086      	sub	sp, #24
  if(hsd == NULL)
 8006506:	2800      	cmp	r0, #0
 8006508:	d058      	beq.n	80065bc <HAL_SD_Init+0xba>
 800650a:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 800650c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8006510:	b93b      	cbnz	r3, 8006522 <HAL_SD_Init+0x20>
    hsd->Lock = HAL_UNLOCKED;
 8006512:	7703      	strb	r3, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8006514:	6983      	ldr	r3, [r0, #24]
 8006516:	b90b      	cbnz	r3, 800651c <HAL_SD_Init+0x1a>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8006518:	2302      	movs	r3, #2
 800651a:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 800651c:	4620      	mov	r0, r4
 800651e:	f004 faaf 	bl	800aa80 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8006522:	2303      	movs	r3, #3
 8006524:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006528:	4620      	mov	r0, r4
 800652a:	f7ff feb9 	bl	80062a0 <HAL_SD_InitCard>
 800652e:	b118      	cbz	r0, 8006538 <HAL_SD_Init+0x36>
    return HAL_ERROR;
 8006530:	2501      	movs	r5, #1
}
 8006532:	4628      	mov	r0, r5
 8006534:	b006      	add	sp, #24
 8006536:	bd70      	pop	{r4, r5, r6, pc}
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006538:	a901      	add	r1, sp, #4
 800653a:	4620      	mov	r0, r4
 800653c:	f7ff ff08 	bl	8006350 <HAL_SD_GetCardStatus>
 8006540:	2800      	cmp	r0, #0
 8006542:	d13d      	bne.n	80065c0 <HAL_SD_Init+0xbe>
  speedgrade = CardStatus.UhsSpeedGrade;
 8006544:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8006548:	b2da      	uxtb	r2, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 800654a:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800654e:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006550:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006552:	2901      	cmp	r1, #1
 8006554:	d00b      	beq.n	800656e <HAL_SD_Init+0x6c>
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006556:	2901      	cmp	r1, #1
 8006558:	d00f      	beq.n	800657a <HAL_SD_Init+0x78>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800655a:	2300      	movs	r3, #0
 800655c:	65e3      	str	r3, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800655e:	68e1      	ldr	r1, [r4, #12]
 8006560:	4620      	mov	r0, r4
 8006562:	f7ff ff5b 	bl	800641c <HAL_SD_ConfigWideBusOperation>
 8006566:	4605      	mov	r5, r0
 8006568:	b158      	cbz	r0, 8006582 <HAL_SD_Init+0x80>
    return HAL_ERROR;
 800656a:	2501      	movs	r5, #1
 800656c:	e7e1      	b.n	8006532 <HAL_SD_Init+0x30>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800656e:	4313      	orrs	r3, r2
 8006570:	d0f1      	beq.n	8006556 <HAL_SD_Init+0x54>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006572:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006576:	65e3      	str	r3, [r4, #92]	; 0x5c
 8006578:	e7f1      	b.n	800655e <HAL_SD_Init+0x5c>
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800657a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800657e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8006580:	e7ed      	b.n	800655e <HAL_SD_Init+0x5c>
  tickstart = HAL_GetTick();
 8006582:	f7fa f889 	bl	8000698 <HAL_GetTick>
 8006586:	4606      	mov	r6, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006588:	4620      	mov	r0, r4
 800658a:	f7ff ffa7 	bl	80064dc <HAL_SD_GetCardState>
 800658e:	2804      	cmp	r0, #4
 8006590:	d00d      	beq.n	80065ae <HAL_SD_Init+0xac>
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8006592:	f7fa f881 	bl	8000698 <HAL_GetTick>
 8006596:	1b80      	subs	r0, r0, r6
 8006598:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800659c:	d1f4      	bne.n	8006588 <HAL_SD_Init+0x86>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800659e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80065a2:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80065a4:	2301      	movs	r3, #1
 80065a6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 80065aa:	2503      	movs	r5, #3
 80065ac:	e7c1      	b.n	8006532 <HAL_SD_Init+0x30>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80065ae:	2300      	movs	r3, #0
 80065b0:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80065b2:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80065b4:	2301      	movs	r3, #1
 80065b6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80065ba:	e7ba      	b.n	8006532 <HAL_SD_Init+0x30>
    return HAL_ERROR;
 80065bc:	2501      	movs	r5, #1
 80065be:	e7b8      	b.n	8006532 <HAL_SD_Init+0x30>
    return HAL_ERROR;
 80065c0:	2501      	movs	r5, #1
 80065c2:	e7b6      	b.n	8006532 <HAL_SD_Init+0x30>

080065c4 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80065c4:	b308      	cbz	r0, 800660a <HAL_SDRAM_Init+0x46>
{
 80065c6:	b538      	push	{r3, r4, r5, lr}
 80065c8:	4604      	mov	r4, r0
 80065ca:	460d      	mov	r5, r1
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80065cc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80065d0:	b1b3      	cbz	r3, 8006600 <HAL_SDRAM_Init+0x3c>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80065d2:	2302      	movs	r3, #2
 80065d4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80065d8:	4621      	mov	r1, r4
 80065da:	f851 0b04 	ldr.w	r0, [r1], #4
 80065de:	f002 fa19 	bl	8008a14 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80065e2:	6862      	ldr	r2, [r4, #4]
 80065e4:	4629      	mov	r1, r5
 80065e6:	6820      	ldr	r0, [r4, #0]
 80065e8:	f002 fa4e 	bl	8008a88 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80065ec:	4a08      	ldr	r2, [pc, #32]	; (8006610 <HAL_SDRAM_Init+0x4c>)
 80065ee:	6813      	ldr	r3, [r2, #0]
 80065f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065f4:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80065f6:	2301      	movs	r3, #1
 80065f8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  return HAL_OK;
 80065fc:	2000      	movs	r0, #0
}
 80065fe:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8006600:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8006604:	f003 fd86 	bl	800a114 <HAL_SDRAM_MspInit>
 8006608:	e7e3      	b.n	80065d2 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 800660a:	2001      	movs	r0, #1
}
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	52004000 	.word	0x52004000

08006614 <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006614:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006616:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006618:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800661a:	3008      	adds	r0, #8
 800661c:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 800661e:	fb03 0000 	mla	r0, r3, r0, r0
 8006622:	4770      	bx	lr

08006624 <HAL_SPI_Init>:
  if (hspi == NULL)
 8006624:	2800      	cmp	r0, #0
 8006626:	f000 8097 	beq.w	8006758 <HAL_SPI_Init+0x134>
{
 800662a:	b570      	push	{r4, r5, r6, lr}
 800662c:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800662e:	2300      	movs	r3, #0
 8006630:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006632:	6805      	ldr	r5, [r0, #0]
 8006634:	4b4c      	ldr	r3, [pc, #304]	; (8006768 <HAL_SPI_Init+0x144>)
 8006636:	4e4d      	ldr	r6, [pc, #308]	; (800676c <HAL_SPI_Init+0x148>)
 8006638:	429d      	cmp	r5, r3
 800663a:	bf18      	it	ne
 800663c:	42b5      	cmpne	r5, r6
 800663e:	bf14      	ite	ne
 8006640:	2601      	movne	r6, #1
 8006642:	2600      	moveq	r6, #0
 8006644:	d007      	beq.n	8006656 <HAL_SPI_Init+0x32>
 8006646:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 800664a:	429d      	cmp	r5, r3
 800664c:	d003      	beq.n	8006656 <HAL_SPI_Init+0x32>
 800664e:	68c3      	ldr	r3, [r0, #12]
 8006650:	2b0f      	cmp	r3, #15
 8006652:	f200 8083 	bhi.w	800675c <HAL_SPI_Init+0x138>
  packet_length = SPI_GetPacketSize(hspi);
 8006656:	4620      	mov	r0, r4
 8006658:	f7ff ffdc 	bl	8006614 <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800665c:	b126      	cbz	r6, 8006668 <HAL_SPI_Init+0x44>
 800665e:	4b44      	ldr	r3, [pc, #272]	; (8006770 <HAL_SPI_Init+0x14c>)
 8006660:	429d      	cmp	r5, r3
 8006662:	d001      	beq.n	8006668 <HAL_SPI_Init+0x44>
 8006664:	2808      	cmp	r0, #8
 8006666:	d87b      	bhi.n	8006760 <HAL_SPI_Init+0x13c>
 8006668:	4a3f      	ldr	r2, [pc, #252]	; (8006768 <HAL_SPI_Init+0x144>)
 800666a:	4b40      	ldr	r3, [pc, #256]	; (800676c <HAL_SPI_Init+0x148>)
 800666c:	429d      	cmp	r5, r3
 800666e:	bf18      	it	ne
 8006670:	4295      	cmpne	r5, r2
 8006672:	d003      	beq.n	800667c <HAL_SPI_Init+0x58>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006674:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006678:	429d      	cmp	r5, r3
 800667a:	d101      	bne.n	8006680 <HAL_SPI_Init+0x5c>
 800667c:	2810      	cmp	r0, #16
 800667e:	d871      	bhi.n	8006764 <HAL_SPI_Init+0x140>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006680:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8006684:	2b00      	cmp	r3, #0
 8006686:	d054      	beq.n	8006732 <HAL_SPI_Init+0x10e>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006688:	2302      	movs	r3, #2
 800668a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800668e:	6822      	ldr	r2, [r4, #0]
 8006690:	6813      	ldr	r3, [r2, #0]
 8006692:	f023 0301 	bic.w	r3, r3, #1
 8006696:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8006698:	69a3      	ldr	r3, [r4, #24]
 800669a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800669e:	d04e      	beq.n	800673e <HAL_SPI_Init+0x11a>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80066a0:	69e3      	ldr	r3, [r4, #28]
 80066a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80066a4:	4313      	orrs	r3, r2
 80066a6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80066a8:	4313      	orrs	r3, r2
 80066aa:	68e1      	ldr	r1, [r4, #12]
 80066ac:	6822      	ldr	r2, [r4, #0]
 80066ae:	430b      	orrs	r3, r1
 80066b0:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80066b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80066b6:	4313      	orrs	r3, r2
 80066b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80066ba:	4313      	orrs	r3, r2
 80066bc:	69a2      	ldr	r2, [r4, #24]
 80066be:	4313      	orrs	r3, r2
 80066c0:	6922      	ldr	r2, [r4, #16]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	6962      	ldr	r2, [r4, #20]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	6a22      	ldr	r2, [r4, #32]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	6862      	ldr	r2, [r4, #4]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80066d2:	4313      	orrs	r3, r2
 80066d4:	68a2      	ldr	r2, [r4, #8]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80066da:	4313      	orrs	r3, r2
 80066dc:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80066de:	6822      	ldr	r2, [r4, #0]
 80066e0:	430b      	orrs	r3, r1
 80066e2:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80066e4:	6863      	ldr	r3, [r4, #4]
 80066e6:	b96b      	cbnz	r3, 8006704 <HAL_SPI_Init+0xe0>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80066e8:	6822      	ldr	r2, [r4, #0]
 80066ea:	6893      	ldr	r3, [r2, #8]
 80066ec:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80066f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80066f4:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80066f6:	6822      	ldr	r2, [r4, #0]
 80066f8:	6893      	ldr	r3, [r2, #8]
 80066fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80066fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006702:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006704:	6822      	ldr	r2, [r4, #0]
 8006706:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006708:	f023 0301 	bic.w	r3, r3, #1
 800670c:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800670e:	6863      	ldr	r3, [r4, #4]
 8006710:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006714:	d006      	beq.n	8006724 <HAL_SPI_Init+0x100>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006716:	6822      	ldr	r2, [r4, #0]
 8006718:	68d3      	ldr	r3, [r2, #12]
 800671a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800671e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006720:	430b      	orrs	r3, r1
 8006722:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006724:	2000      	movs	r0, #0
 8006726:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800672a:	2301      	movs	r3, #1
 800672c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8006730:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8006732:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8006736:	4620      	mov	r0, r4
 8006738:	f004 fa36 	bl	800aba8 <HAL_SPI_MspInit>
 800673c:	e7a4      	b.n	8006688 <HAL_SPI_Init+0x64>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800673e:	6863      	ldr	r3, [r4, #4]
 8006740:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006744:	d1ac      	bne.n	80066a0 <HAL_SPI_Init+0x7c>
 8006746:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1a9      	bne.n	80066a0 <HAL_SPI_Init+0x7c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800674c:	6822      	ldr	r2, [r4, #0]
 800674e:	6813      	ldr	r3, [r2, #0]
 8006750:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	e7a3      	b.n	80066a0 <HAL_SPI_Init+0x7c>
    return HAL_ERROR;
 8006758:	2001      	movs	r0, #1
}
 800675a:	4770      	bx	lr
    return HAL_ERROR;
 800675c:	2001      	movs	r0, #1
 800675e:	e7e7      	b.n	8006730 <HAL_SPI_Init+0x10c>
    return HAL_ERROR;
 8006760:	2001      	movs	r0, #1
 8006762:	e7e5      	b.n	8006730 <HAL_SPI_Init+0x10c>
 8006764:	2001      	movs	r0, #1
 8006766:	e7e3      	b.n	8006730 <HAL_SPI_Init+0x10c>
 8006768:	40013000 	.word	0x40013000
 800676c:	40003800 	.word	0x40003800
 8006770:	40003c00 	.word	0x40003c00

08006774 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006774:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006776:	6a03      	ldr	r3, [r0, #32]
 8006778:	f023 0301 	bic.w	r3, r3, #1
 800677c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006780:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006782:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006784:	4a1e      	ldr	r2, [pc, #120]	; (8006800 <TIM_OC1_SetConfig+0x8c>)
 8006786:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006788:	680e      	ldr	r6, [r1, #0]
 800678a:	4316      	orrs	r6, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800678c:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006790:	688d      	ldr	r5, [r1, #8]
 8006792:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006794:	4a1b      	ldr	r2, [pc, #108]	; (8006804 <TIM_OC1_SetConfig+0x90>)
 8006796:	4d1c      	ldr	r5, [pc, #112]	; (8006808 <TIM_OC1_SetConfig+0x94>)
 8006798:	42a8      	cmp	r0, r5
 800679a:	bf18      	it	ne
 800679c:	4290      	cmpne	r0, r2
 800679e:	bf0c      	ite	eq
 80067a0:	2201      	moveq	r2, #1
 80067a2:	2200      	movne	r2, #0
 80067a4:	d00c      	beq.n	80067c0 <TIM_OC1_SetConfig+0x4c>
 80067a6:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 80067aa:	42a8      	cmp	r0, r5
 80067ac:	bf14      	ite	ne
 80067ae:	2500      	movne	r5, #0
 80067b0:	2501      	moveq	r5, #1
 80067b2:	4f16      	ldr	r7, [pc, #88]	; (800680c <TIM_OC1_SetConfig+0x98>)
 80067b4:	42b8      	cmp	r0, r7
 80067b6:	d003      	beq.n	80067c0 <TIM_OC1_SetConfig+0x4c>
 80067b8:	b915      	cbnz	r5, 80067c0 <TIM_OC1_SetConfig+0x4c>
 80067ba:	4d15      	ldr	r5, [pc, #84]	; (8006810 <TIM_OC1_SetConfig+0x9c>)
 80067bc:	42a8      	cmp	r0, r5
 80067be:	d105      	bne.n	80067cc <TIM_OC1_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067c0:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067c4:	68cd      	ldr	r5, [r1, #12]
 80067c6:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067c8:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067cc:	b95a      	cbnz	r2, 80067e6 <TIM_OC1_SetConfig+0x72>
 80067ce:	4a11      	ldr	r2, [pc, #68]	; (8006814 <TIM_OC1_SetConfig+0xa0>)
 80067d0:	4290      	cmp	r0, r2
 80067d2:	bf14      	ite	ne
 80067d4:	2200      	movne	r2, #0
 80067d6:	2201      	moveq	r2, #1
 80067d8:	4d0c      	ldr	r5, [pc, #48]	; (800680c <TIM_OC1_SetConfig+0x98>)
 80067da:	42a8      	cmp	r0, r5
 80067dc:	d003      	beq.n	80067e6 <TIM_OC1_SetConfig+0x72>
 80067de:	b912      	cbnz	r2, 80067e6 <TIM_OC1_SetConfig+0x72>
 80067e0:	4a0b      	ldr	r2, [pc, #44]	; (8006810 <TIM_OC1_SetConfig+0x9c>)
 80067e2:	4290      	cmp	r0, r2
 80067e4:	d105      	bne.n	80067f2 <TIM_OC1_SetConfig+0x7e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067e6:	f424 7240 	bic.w	r2, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067ea:	694c      	ldr	r4, [r1, #20]
 80067ec:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067ee:	698a      	ldr	r2, [r1, #24]
 80067f0:	4314      	orrs	r4, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067f2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067f4:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067f6:	684a      	ldr	r2, [r1, #4]
 80067f8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067fa:	6203      	str	r3, [r0, #32]
}
 80067fc:	bcf0      	pop	{r4, r5, r6, r7}
 80067fe:	4770      	bx	lr
 8006800:	fffeff8c 	.word	0xfffeff8c
 8006804:	40010000 	.word	0x40010000
 8006808:	40010400 	.word	0x40010400
 800680c:	40014000 	.word	0x40014000
 8006810:	40014800 	.word	0x40014800
 8006814:	40014400 	.word	0x40014400

08006818 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006818:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800681a:	6a03      	ldr	r3, [r0, #32]
 800681c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006820:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006822:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006824:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006826:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006828:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800682c:	680e      	ldr	r6, [r1, #0]
 800682e:	4316      	orrs	r6, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006830:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006834:	688a      	ldr	r2, [r1, #8]
 8006836:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800683a:	4a16      	ldr	r2, [pc, #88]	; (8006894 <TIM_OC3_SetConfig+0x7c>)
 800683c:	4d16      	ldr	r5, [pc, #88]	; (8006898 <TIM_OC3_SetConfig+0x80>)
 800683e:	42a8      	cmp	r0, r5
 8006840:	bf18      	it	ne
 8006842:	4290      	cmpne	r0, r2
 8006844:	bf0c      	ite	eq
 8006846:	2201      	moveq	r2, #1
 8006848:	2200      	movne	r2, #0
 800684a:	d106      	bne.n	800685a <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800684c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006850:	68cd      	ldr	r5, [r1, #12]
 8006852:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006856:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800685a:	b95a      	cbnz	r2, 8006874 <TIM_OC3_SetConfig+0x5c>
 800685c:	4a0f      	ldr	r2, [pc, #60]	; (800689c <TIM_OC3_SetConfig+0x84>)
 800685e:	4290      	cmp	r0, r2
 8006860:	bf14      	ite	ne
 8006862:	2200      	movne	r2, #0
 8006864:	2201      	moveq	r2, #1
 8006866:	4d0e      	ldr	r5, [pc, #56]	; (80068a0 <TIM_OC3_SetConfig+0x88>)
 8006868:	42a8      	cmp	r0, r5
 800686a:	d003      	beq.n	8006874 <TIM_OC3_SetConfig+0x5c>
 800686c:	b912      	cbnz	r2, 8006874 <TIM_OC3_SetConfig+0x5c>
 800686e:	4a0d      	ldr	r2, [pc, #52]	; (80068a4 <TIM_OC3_SetConfig+0x8c>)
 8006870:	4290      	cmp	r0, r2
 8006872:	d107      	bne.n	8006884 <TIM_OC3_SetConfig+0x6c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006874:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006878:	694a      	ldr	r2, [r1, #20]
 800687a:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800687e:	698a      	ldr	r2, [r1, #24]
 8006880:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006884:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006886:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006888:	684a      	ldr	r2, [r1, #4]
 800688a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800688c:	6203      	str	r3, [r0, #32]
}
 800688e:	bc70      	pop	{r4, r5, r6}
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	40010000 	.word	0x40010000
 8006898:	40010400 	.word	0x40010400
 800689c:	40014400 	.word	0x40014400
 80068a0:	40014000 	.word	0x40014000
 80068a4:	40014800 	.word	0x40014800

080068a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068a8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068aa:	6a03      	ldr	r3, [r0, #32]
 80068ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068b0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068b2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068b4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068b6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068b8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068bc:	680d      	ldr	r5, [r1, #0]
 80068be:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068c6:	688d      	ldr	r5, [r1, #8]
 80068c8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068cc:	4e0f      	ldr	r6, [pc, #60]	; (800690c <TIM_OC4_SetConfig+0x64>)
 80068ce:	4d10      	ldr	r5, [pc, #64]	; (8006910 <TIM_OC4_SetConfig+0x68>)
 80068d0:	42a8      	cmp	r0, r5
 80068d2:	bf18      	it	ne
 80068d4:	42b0      	cmpne	r0, r6
 80068d6:	d00d      	beq.n	80068f4 <TIM_OC4_SetConfig+0x4c>
 80068d8:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 80068dc:	42a8      	cmp	r0, r5
 80068de:	bf14      	ite	ne
 80068e0:	2500      	movne	r5, #0
 80068e2:	2501      	moveq	r5, #1
 80068e4:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 80068e8:	42b0      	cmp	r0, r6
 80068ea:	d003      	beq.n	80068f4 <TIM_OC4_SetConfig+0x4c>
 80068ec:	b915      	cbnz	r5, 80068f4 <TIM_OC4_SetConfig+0x4c>
 80068ee:	4d09      	ldr	r5, [pc, #36]	; (8006914 <TIM_OC4_SetConfig+0x6c>)
 80068f0:	42a8      	cmp	r0, r5
 80068f2:	d104      	bne.n	80068fe <TIM_OC4_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068f4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068f8:	694d      	ldr	r5, [r1, #20]
 80068fa:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068fe:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006900:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006902:	684a      	ldr	r2, [r1, #4]
 8006904:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006906:	6203      	str	r3, [r0, #32]
}
 8006908:	bc70      	pop	{r4, r5, r6}
 800690a:	4770      	bx	lr
 800690c:	40010000 	.word	0x40010000
 8006910:	40010400 	.word	0x40010400
 8006914:	40014800 	.word	0x40014800

08006918 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006918:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800691a:	6a03      	ldr	r3, [r0, #32]
 800691c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006920:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006922:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006924:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006926:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006928:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800692c:	680d      	ldr	r5, [r1, #0]
 800692e:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006930:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006934:	688d      	ldr	r5, [r1, #8]
 8006936:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800693a:	4e10      	ldr	r6, [pc, #64]	; (800697c <TIM_OC5_SetConfig+0x64>)
 800693c:	4d10      	ldr	r5, [pc, #64]	; (8006980 <TIM_OC5_SetConfig+0x68>)
 800693e:	42a8      	cmp	r0, r5
 8006940:	bf18      	it	ne
 8006942:	42b0      	cmpne	r0, r6
 8006944:	d00d      	beq.n	8006962 <TIM_OC5_SetConfig+0x4a>
 8006946:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 800694a:	42a8      	cmp	r0, r5
 800694c:	bf14      	ite	ne
 800694e:	2500      	movne	r5, #0
 8006950:	2501      	moveq	r5, #1
 8006952:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8006956:	42b0      	cmp	r0, r6
 8006958:	d003      	beq.n	8006962 <TIM_OC5_SetConfig+0x4a>
 800695a:	b915      	cbnz	r5, 8006962 <TIM_OC5_SetConfig+0x4a>
 800695c:	4d09      	ldr	r5, [pc, #36]	; (8006984 <TIM_OC5_SetConfig+0x6c>)
 800695e:	42a8      	cmp	r0, r5
 8006960:	d104      	bne.n	800696c <TIM_OC5_SetConfig+0x54>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006962:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006966:	694d      	ldr	r5, [r1, #20]
 8006968:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800696c:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800696e:	6544      	str	r4, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006970:	684a      	ldr	r2, [r1, #4]
 8006972:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006974:	6203      	str	r3, [r0, #32]
}
 8006976:	bc70      	pop	{r4, r5, r6}
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	40010000 	.word	0x40010000
 8006980:	40010400 	.word	0x40010400
 8006984:	40014800 	.word	0x40014800

08006988 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006988:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800698a:	6a03      	ldr	r3, [r0, #32]
 800698c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006990:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006992:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006994:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006996:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006998:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800699c:	680d      	ldr	r5, [r1, #0]
 800699e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069a6:	688d      	ldr	r5, [r1, #8]
 80069a8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ac:	4e0f      	ldr	r6, [pc, #60]	; (80069ec <TIM_OC6_SetConfig+0x64>)
 80069ae:	4d10      	ldr	r5, [pc, #64]	; (80069f0 <TIM_OC6_SetConfig+0x68>)
 80069b0:	42a8      	cmp	r0, r5
 80069b2:	bf18      	it	ne
 80069b4:	42b0      	cmpne	r0, r6
 80069b6:	d00d      	beq.n	80069d4 <TIM_OC6_SetConfig+0x4c>
 80069b8:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 80069bc:	42a8      	cmp	r0, r5
 80069be:	bf14      	ite	ne
 80069c0:	2500      	movne	r5, #0
 80069c2:	2501      	moveq	r5, #1
 80069c4:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 80069c8:	42b0      	cmp	r0, r6
 80069ca:	d003      	beq.n	80069d4 <TIM_OC6_SetConfig+0x4c>
 80069cc:	b915      	cbnz	r5, 80069d4 <TIM_OC6_SetConfig+0x4c>
 80069ce:	4d09      	ldr	r5, [pc, #36]	; (80069f4 <TIM_OC6_SetConfig+0x6c>)
 80069d0:	42a8      	cmp	r0, r5
 80069d2:	d104      	bne.n	80069de <TIM_OC6_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80069d4:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069d8:	694d      	ldr	r5, [r1, #20]
 80069da:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069de:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069e0:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069e2:	684a      	ldr	r2, [r1, #4]
 80069e4:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069e6:	6203      	str	r3, [r0, #32]
}
 80069e8:	bc70      	pop	{r4, r5, r6}
 80069ea:	4770      	bx	lr
 80069ec:	40010000 	.word	0x40010000
 80069f0:	40010400 	.word	0x40010400
 80069f4:	40014800 	.word	0x40014800

080069f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069f8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069fa:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069fc:	6a04      	ldr	r4, [r0, #32]
 80069fe:	f024 0401 	bic.w	r4, r4, #1
 8006a02:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a04:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a06:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a0a:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a0e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8006a12:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a14:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006a16:	6203      	str	r3, [r0, #32]
}
 8006a18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a1e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a20:	6a03      	ldr	r3, [r0, #32]
 8006a22:	f023 0310 	bic.w	r3, r3, #16
 8006a26:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a28:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8006a2a:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a2c:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a30:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a38:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a3c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006a3e:	6203      	str	r3, [r0, #32]
}
 8006a40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a44:	4770      	bx	lr
	...

08006a48 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a48:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a4a:	4b03      	ldr	r3, [pc, #12]	; (8006a58 <TIM_ITRx_SetConfig+0x10>)
 8006a4c:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a4e:	4319      	orrs	r1, r3
 8006a50:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a54:	6081      	str	r1, [r0, #8]
}
 8006a56:	4770      	bx	lr
 8006a58:	ffcfff8f 	.word	0xffcfff8f

08006a5c <TIM_Base_SetConfig>:
{
 8006a5c:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 8006a5e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a60:	4c37      	ldr	r4, [pc, #220]	; (8006b40 <TIM_Base_SetConfig+0xe4>)
 8006a62:	42a0      	cmp	r0, r4
 8006a64:	bf14      	ite	ne
 8006a66:	2400      	movne	r4, #0
 8006a68:	2401      	moveq	r4, #1
 8006a6a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006a6e:	bf14      	ite	ne
 8006a70:	4622      	movne	r2, r4
 8006a72:	f044 0201 	orreq.w	r2, r4, #1
 8006a76:	b9aa      	cbnz	r2, 8006aa4 <TIM_Base_SetConfig+0x48>
 8006a78:	4d32      	ldr	r5, [pc, #200]	; (8006b44 <TIM_Base_SetConfig+0xe8>)
 8006a7a:	42a8      	cmp	r0, r5
 8006a7c:	bf14      	ite	ne
 8006a7e:	2500      	movne	r5, #0
 8006a80:	2501      	moveq	r5, #1
 8006a82:	4e31      	ldr	r6, [pc, #196]	; (8006b48 <TIM_Base_SetConfig+0xec>)
 8006a84:	42b0      	cmp	r0, r6
 8006a86:	d00d      	beq.n	8006aa4 <TIM_Base_SetConfig+0x48>
 8006a88:	b965      	cbnz	r5, 8006aa4 <TIM_Base_SetConfig+0x48>
 8006a8a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8006a8e:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8006a92:	42a8      	cmp	r0, r5
 8006a94:	bf14      	ite	ne
 8006a96:	2500      	movne	r5, #0
 8006a98:	2501      	moveq	r5, #1
 8006a9a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006a9e:	42b0      	cmp	r0, r6
 8006aa0:	d000      	beq.n	8006aa4 <TIM_Base_SetConfig+0x48>
 8006aa2:	b11d      	cbz	r5, 8006aac <TIM_Base_SetConfig+0x50>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006aa8:	684d      	ldr	r5, [r1, #4]
 8006aaa:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006aac:	bb12      	cbnz	r2, 8006af4 <TIM_Base_SetConfig+0x98>
 8006aae:	4a25      	ldr	r2, [pc, #148]	; (8006b44 <TIM_Base_SetConfig+0xe8>)
 8006ab0:	4290      	cmp	r0, r2
 8006ab2:	bf14      	ite	ne
 8006ab4:	2200      	movne	r2, #0
 8006ab6:	2201      	moveq	r2, #1
 8006ab8:	4d23      	ldr	r5, [pc, #140]	; (8006b48 <TIM_Base_SetConfig+0xec>)
 8006aba:	42a8      	cmp	r0, r5
 8006abc:	d01a      	beq.n	8006af4 <TIM_Base_SetConfig+0x98>
 8006abe:	b9ca      	cbnz	r2, 8006af4 <TIM_Base_SetConfig+0x98>
 8006ac0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006ac4:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8006ac8:	4290      	cmp	r0, r2
 8006aca:	bf14      	ite	ne
 8006acc:	2200      	movne	r2, #0
 8006ace:	2201      	moveq	r2, #1
 8006ad0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006ad4:	42a8      	cmp	r0, r5
 8006ad6:	d00d      	beq.n	8006af4 <TIM_Base_SetConfig+0x98>
 8006ad8:	b962      	cbnz	r2, 8006af4 <TIM_Base_SetConfig+0x98>
 8006ada:	4a1c      	ldr	r2, [pc, #112]	; (8006b4c <TIM_Base_SetConfig+0xf0>)
 8006adc:	4290      	cmp	r0, r2
 8006ade:	bf14      	ite	ne
 8006ae0:	2200      	movne	r2, #0
 8006ae2:	2201      	moveq	r2, #1
 8006ae4:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8006ae8:	42a8      	cmp	r0, r5
 8006aea:	d003      	beq.n	8006af4 <TIM_Base_SetConfig+0x98>
 8006aec:	b912      	cbnz	r2, 8006af4 <TIM_Base_SetConfig+0x98>
 8006aee:	4a18      	ldr	r2, [pc, #96]	; (8006b50 <TIM_Base_SetConfig+0xf4>)
 8006af0:	4290      	cmp	r0, r2
 8006af2:	d103      	bne.n	8006afc <TIM_Base_SetConfig+0xa0>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006af8:	68ca      	ldr	r2, [r1, #12]
 8006afa:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006afc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b00:	694a      	ldr	r2, [r1, #20]
 8006b02:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006b04:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b06:	688a      	ldr	r2, [r1, #8]
 8006b08:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006b0a:	680a      	ldr	r2, [r1, #0]
 8006b0c:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b0e:	4b11      	ldr	r3, [pc, #68]	; (8006b54 <TIM_Base_SetConfig+0xf8>)
 8006b10:	4298      	cmp	r0, r3
 8006b12:	bf14      	ite	ne
 8006b14:	4623      	movne	r3, r4
 8006b16:	f044 0301 	orreq.w	r3, r4, #1
 8006b1a:	b95b      	cbnz	r3, 8006b34 <TIM_Base_SetConfig+0xd8>
 8006b1c:	4b0b      	ldr	r3, [pc, #44]	; (8006b4c <TIM_Base_SetConfig+0xf0>)
 8006b1e:	4298      	cmp	r0, r3
 8006b20:	bf14      	ite	ne
 8006b22:	2300      	movne	r3, #0
 8006b24:	2301      	moveq	r3, #1
 8006b26:	4a0c      	ldr	r2, [pc, #48]	; (8006b58 <TIM_Base_SetConfig+0xfc>)
 8006b28:	4290      	cmp	r0, r2
 8006b2a:	d003      	beq.n	8006b34 <TIM_Base_SetConfig+0xd8>
 8006b2c:	b913      	cbnz	r3, 8006b34 <TIM_Base_SetConfig+0xd8>
 8006b2e:	4b08      	ldr	r3, [pc, #32]	; (8006b50 <TIM_Base_SetConfig+0xf4>)
 8006b30:	4298      	cmp	r0, r3
 8006b32:	d101      	bne.n	8006b38 <TIM_Base_SetConfig+0xdc>
    TIMx->RCR = Structure->RepetitionCounter;
 8006b34:	690b      	ldr	r3, [r1, #16]
 8006b36:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	6143      	str	r3, [r0, #20]
}
 8006b3c:	bc70      	pop	{r4, r5, r6}
 8006b3e:	4770      	bx	lr
 8006b40:	40010000 	.word	0x40010000
 8006b44:	40000800 	.word	0x40000800
 8006b48:	40000400 	.word	0x40000400
 8006b4c:	40014400 	.word	0x40014400
 8006b50:	40014800 	.word	0x40014800
 8006b54:	40010400 	.word	0x40010400
 8006b58:	40014000 	.word	0x40014000

08006b5c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006b5c:	b1a8      	cbz	r0, 8006b8a <HAL_TIM_Base_Init+0x2e>
{
 8006b5e:	b510      	push	{r4, lr}
 8006b60:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006b62:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006b66:	b15b      	cbz	r3, 8006b80 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8006b68:	2302      	movs	r3, #2
 8006b6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b6e:	1d21      	adds	r1, r4, #4
 8006b70:	6820      	ldr	r0, [r4, #0]
 8006b72:	f7ff ff73 	bl	8006a5c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8006b76:	2301      	movs	r3, #1
 8006b78:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006b7c:	2000      	movs	r0, #0
}
 8006b7e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006b80:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006b84:	f004 f91e 	bl	800adc4 <HAL_TIM_Base_MspInit>
 8006b88:	e7ee      	b.n	8006b68 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8006b8a:	2001      	movs	r0, #1
}
 8006b8c:	4770      	bx	lr

08006b8e <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006b8e:	b1a8      	cbz	r0, 8006bbc <HAL_TIM_PWM_Init+0x2e>
{
 8006b90:	b510      	push	{r4, lr}
 8006b92:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006b94:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006b98:	b15b      	cbz	r3, 8006bb2 <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ba0:	1d21      	adds	r1, r4, #4
 8006ba2:	6820      	ldr	r0, [r4, #0]
 8006ba4:	f7ff ff5a 	bl	8006a5c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006bae:	2000      	movs	r0, #0
}
 8006bb0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006bb2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006bb6:	f004 f8eb 	bl	800ad90 <HAL_TIM_PWM_MspInit>
 8006bba:	e7ee      	b.n	8006b9a <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8006bbc:	2001      	movs	r0, #1
}
 8006bbe:	4770      	bx	lr

08006bc0 <TIM_OC2_SetConfig>:
{
 8006bc0:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bc2:	6a03      	ldr	r3, [r0, #32]
 8006bc4:	f023 0310 	bic.w	r3, r3, #16
 8006bc8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006bca:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006bcc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006bce:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bd0:	4a1a      	ldr	r2, [pc, #104]	; (8006c3c <TIM_OC2_SetConfig+0x7c>)
 8006bd2:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bd4:	680e      	ldr	r6, [r1, #0]
 8006bd6:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8006bda:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bde:	688a      	ldr	r2, [r1, #8]
 8006be0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006be4:	4a16      	ldr	r2, [pc, #88]	; (8006c40 <TIM_OC2_SetConfig+0x80>)
 8006be6:	4d17      	ldr	r5, [pc, #92]	; (8006c44 <TIM_OC2_SetConfig+0x84>)
 8006be8:	42a8      	cmp	r0, r5
 8006bea:	bf18      	it	ne
 8006bec:	4290      	cmpne	r0, r2
 8006bee:	bf0c      	ite	eq
 8006bf0:	2201      	moveq	r2, #1
 8006bf2:	2200      	movne	r2, #0
 8006bf4:	d106      	bne.n	8006c04 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bfa:	68cd      	ldr	r5, [r1, #12]
 8006bfc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c04:	b95a      	cbnz	r2, 8006c1e <TIM_OC2_SetConfig+0x5e>
 8006c06:	4a10      	ldr	r2, [pc, #64]	; (8006c48 <TIM_OC2_SetConfig+0x88>)
 8006c08:	4290      	cmp	r0, r2
 8006c0a:	bf14      	ite	ne
 8006c0c:	2200      	movne	r2, #0
 8006c0e:	2201      	moveq	r2, #1
 8006c10:	4d0e      	ldr	r5, [pc, #56]	; (8006c4c <TIM_OC2_SetConfig+0x8c>)
 8006c12:	42a8      	cmp	r0, r5
 8006c14:	d003      	beq.n	8006c1e <TIM_OC2_SetConfig+0x5e>
 8006c16:	b912      	cbnz	r2, 8006c1e <TIM_OC2_SetConfig+0x5e>
 8006c18:	4a0d      	ldr	r2, [pc, #52]	; (8006c50 <TIM_OC2_SetConfig+0x90>)
 8006c1a:	4290      	cmp	r0, r2
 8006c1c:	d107      	bne.n	8006c2e <TIM_OC2_SetConfig+0x6e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c1e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c22:	694a      	ldr	r2, [r1, #20]
 8006c24:	ea44 0482 	orr.w	r4, r4, r2, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c28:	698a      	ldr	r2, [r1, #24]
 8006c2a:	ea44 0482 	orr.w	r4, r4, r2, lsl #2
  TIMx->CR2 = tmpcr2;
 8006c2e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006c30:	6186      	str	r6, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006c32:	684a      	ldr	r2, [r1, #4]
 8006c34:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006c36:	6203      	str	r3, [r0, #32]
}
 8006c38:	bc70      	pop	{r4, r5, r6}
 8006c3a:	4770      	bx	lr
 8006c3c:	feff8cff 	.word	0xfeff8cff
 8006c40:	40010000 	.word	0x40010000
 8006c44:	40010400 	.word	0x40010400
 8006c48:	40014400 	.word	0x40014400
 8006c4c:	40014000 	.word	0x40014000
 8006c50:	40014800 	.word	0x40014800

08006c54 <HAL_TIM_PWM_ConfigChannel>:
{
 8006c54:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006c56:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	f000 8092 	beq.w	8006d84 <HAL_TIM_PWM_ConfigChannel+0x130>
 8006c60:	460d      	mov	r5, r1
 8006c62:	4604      	mov	r4, r0
 8006c64:	2301      	movs	r3, #1
 8006c66:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8006c70:	2a14      	cmp	r2, #20
 8006c72:	d81e      	bhi.n	8006cb2 <HAL_TIM_PWM_ConfigChannel+0x5e>
 8006c74:	e8df f002 	tbb	[pc, r2]
 8006c78:	1d1d1d0b 	.word	0x1d1d1d0b
 8006c7c:	1d1d1d24 	.word	0x1d1d1d24
 8006c80:	1d1d1d38 	.word	0x1d1d1d38
 8006c84:	1d1d1d4b 	.word	0x1d1d1d4b
 8006c88:	1d1d1d5f 	.word	0x1d1d1d5f
 8006c8c:	72          	.byte	0x72
 8006c8d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c8e:	6800      	ldr	r0, [r0, #0]
 8006c90:	f7ff fd70 	bl	8006774 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c94:	6822      	ldr	r2, [r4, #0]
 8006c96:	6993      	ldr	r3, [r2, #24]
 8006c98:	f043 0308 	orr.w	r3, r3, #8
 8006c9c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c9e:	6822      	ldr	r2, [r4, #0]
 8006ca0:	6993      	ldr	r3, [r2, #24]
 8006ca2:	f023 0304 	bic.w	r3, r3, #4
 8006ca6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ca8:	6822      	ldr	r2, [r4, #0]
 8006caa:	6993      	ldr	r3, [r2, #24]
 8006cac:	6929      	ldr	r1, [r5, #16]
 8006cae:	430b      	orrs	r3, r1
 8006cb0:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006cb8:	2000      	movs	r0, #0
 8006cba:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006cbe:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cc0:	6800      	ldr	r0, [r0, #0]
 8006cc2:	f7ff ff7d 	bl	8006bc0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cc6:	6822      	ldr	r2, [r4, #0]
 8006cc8:	6993      	ldr	r3, [r2, #24]
 8006cca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006cce:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006cd0:	6822      	ldr	r2, [r4, #0]
 8006cd2:	6993      	ldr	r3, [r2, #24]
 8006cd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cd8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cda:	6822      	ldr	r2, [r4, #0]
 8006cdc:	6993      	ldr	r3, [r2, #24]
 8006cde:	6929      	ldr	r1, [r5, #16]
 8006ce0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006ce4:	6193      	str	r3, [r2, #24]
      break;
 8006ce6:	e7e4      	b.n	8006cb2 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ce8:	6800      	ldr	r0, [r0, #0]
 8006cea:	f7ff fd95 	bl	8006818 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cee:	6822      	ldr	r2, [r4, #0]
 8006cf0:	69d3      	ldr	r3, [r2, #28]
 8006cf2:	f043 0308 	orr.w	r3, r3, #8
 8006cf6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cf8:	6822      	ldr	r2, [r4, #0]
 8006cfa:	69d3      	ldr	r3, [r2, #28]
 8006cfc:	f023 0304 	bic.w	r3, r3, #4
 8006d00:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d02:	6822      	ldr	r2, [r4, #0]
 8006d04:	69d3      	ldr	r3, [r2, #28]
 8006d06:	6929      	ldr	r1, [r5, #16]
 8006d08:	430b      	orrs	r3, r1
 8006d0a:	61d3      	str	r3, [r2, #28]
      break;
 8006d0c:	e7d1      	b.n	8006cb2 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d0e:	6800      	ldr	r0, [r0, #0]
 8006d10:	f7ff fdca 	bl	80068a8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d14:	6822      	ldr	r2, [r4, #0]
 8006d16:	69d3      	ldr	r3, [r2, #28]
 8006d18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d1c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d1e:	6822      	ldr	r2, [r4, #0]
 8006d20:	69d3      	ldr	r3, [r2, #28]
 8006d22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d26:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d28:	6822      	ldr	r2, [r4, #0]
 8006d2a:	69d3      	ldr	r3, [r2, #28]
 8006d2c:	6929      	ldr	r1, [r5, #16]
 8006d2e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006d32:	61d3      	str	r3, [r2, #28]
      break;
 8006d34:	e7bd      	b.n	8006cb2 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d36:	6800      	ldr	r0, [r0, #0]
 8006d38:	f7ff fdee 	bl	8006918 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d3c:	6822      	ldr	r2, [r4, #0]
 8006d3e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006d40:	f043 0308 	orr.w	r3, r3, #8
 8006d44:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006d46:	6822      	ldr	r2, [r4, #0]
 8006d48:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006d4a:	f023 0304 	bic.w	r3, r3, #4
 8006d4e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d50:	6822      	ldr	r2, [r4, #0]
 8006d52:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006d54:	6929      	ldr	r1, [r5, #16]
 8006d56:	430b      	orrs	r3, r1
 8006d58:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8006d5a:	e7aa      	b.n	8006cb2 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d5c:	6800      	ldr	r0, [r0, #0]
 8006d5e:	f7ff fe13 	bl	8006988 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d62:	6822      	ldr	r2, [r4, #0]
 8006d64:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006d66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d6a:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d6c:	6822      	ldr	r2, [r4, #0]
 8006d6e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006d70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d74:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d76:	6822      	ldr	r2, [r4, #0]
 8006d78:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006d7a:	6929      	ldr	r1, [r5, #16]
 8006d7c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006d80:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8006d82:	e796      	b.n	8006cb2 <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 8006d84:	2002      	movs	r0, #2
 8006d86:	e79a      	b.n	8006cbe <HAL_TIM_PWM_ConfigChannel+0x6a>

08006d88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d88:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d8a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d8c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d90:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8006d94:	430b      	orrs	r3, r1
 8006d96:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d98:	6083      	str	r3, [r0, #8]
}
 8006d9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006da0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d074      	beq.n	8006e92 <HAL_TIM_ConfigClockSource+0xf2>
{
 8006da8:	b510      	push	{r4, lr}
 8006daa:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8006dac:	2301      	movs	r3, #1
 8006dae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006db2:	2302      	movs	r3, #2
 8006db4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006db8:	6802      	ldr	r2, [r0, #0]
 8006dba:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dbc:	4b36      	ldr	r3, [pc, #216]	; (8006e98 <HAL_TIM_ConfigClockSource+0xf8>)
 8006dbe:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8006dc0:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8006dc2:	680b      	ldr	r3, [r1, #0]
 8006dc4:	2b60      	cmp	r3, #96	; 0x60
 8006dc6:	d050      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0xca>
 8006dc8:	d91d      	bls.n	8006e06 <HAL_TIM_ConfigClockSource+0x66>
 8006dca:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006dce:	d02e      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x8e>
 8006dd0:	d835      	bhi.n	8006e3e <HAL_TIM_ConfigClockSource+0x9e>
 8006dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dd6:	d03c      	beq.n	8006e52 <HAL_TIM_ConfigClockSource+0xb2>
 8006dd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ddc:	d027      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x8e>
 8006dde:	2b70      	cmp	r3, #112	; 0x70
 8006de0:	d10a      	bne.n	8006df8 <HAL_TIM_ConfigClockSource+0x58>
      TIM_ETR_SetConfig(htim->Instance,
 8006de2:	68cb      	ldr	r3, [r1, #12]
 8006de4:	684a      	ldr	r2, [r1, #4]
 8006de6:	6889      	ldr	r1, [r1, #8]
 8006de8:	6820      	ldr	r0, [r4, #0]
 8006dea:	f7ff ffcd 	bl	8006d88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006dee:	6822      	ldr	r2, [r4, #0]
 8006df0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006df2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8006df6:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006dfe:	2000      	movs	r0, #0
 8006e00:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006e04:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8006e06:	2b20      	cmp	r3, #32
 8006e08:	d011      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x8e>
 8006e0a:	d90d      	bls.n	8006e28 <HAL_TIM_ConfigClockSource+0x88>
 8006e0c:	2b40      	cmp	r3, #64	; 0x40
 8006e0e:	d036      	beq.n	8006e7e <HAL_TIM_ConfigClockSource+0xde>
 8006e10:	2b50      	cmp	r3, #80	; 0x50
 8006e12:	d111      	bne.n	8006e38 <HAL_TIM_ConfigClockSource+0x98>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e14:	68ca      	ldr	r2, [r1, #12]
 8006e16:	6849      	ldr	r1, [r1, #4]
 8006e18:	6820      	ldr	r0, [r4, #0]
 8006e1a:	f7ff fded 	bl	80069f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e1e:	2150      	movs	r1, #80	; 0x50
 8006e20:	6820      	ldr	r0, [r4, #0]
 8006e22:	f7ff fe11 	bl	8006a48 <TIM_ITRx_SetConfig>
      break;
 8006e26:	e7e7      	b.n	8006df8 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8006e28:	b10b      	cbz	r3, 8006e2e <HAL_TIM_ConfigClockSource+0x8e>
 8006e2a:	2b10      	cmp	r3, #16
 8006e2c:	d1e4      	bne.n	8006df8 <HAL_TIM_ConfigClockSource+0x58>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e2e:	4619      	mov	r1, r3
 8006e30:	6820      	ldr	r0, [r4, #0]
 8006e32:	f7ff fe09 	bl	8006a48 <TIM_ITRx_SetConfig>
      break;
 8006e36:	e7df      	b.n	8006df8 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8006e38:	2b30      	cmp	r3, #48	; 0x30
 8006e3a:	d1dd      	bne.n	8006df8 <HAL_TIM_ConfigClockSource+0x58>
 8006e3c:	e7f7      	b.n	8006e2e <HAL_TIM_ConfigClockSource+0x8e>
 8006e3e:	4a17      	ldr	r2, [pc, #92]	; (8006e9c <HAL_TIM_ConfigClockSource+0xfc>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d0f4      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x8e>
 8006e44:	3210      	adds	r2, #16
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d0f1      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x8e>
 8006e4a:	3a20      	subs	r2, #32
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d1d3      	bne.n	8006df8 <HAL_TIM_ConfigClockSource+0x58>
 8006e50:	e7ed      	b.n	8006e2e <HAL_TIM_ConfigClockSource+0x8e>
      TIM_ETR_SetConfig(htim->Instance,
 8006e52:	68cb      	ldr	r3, [r1, #12]
 8006e54:	684a      	ldr	r2, [r1, #4]
 8006e56:	6889      	ldr	r1, [r1, #8]
 8006e58:	6820      	ldr	r0, [r4, #0]
 8006e5a:	f7ff ff95 	bl	8006d88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e5e:	6822      	ldr	r2, [r4, #0]
 8006e60:	6893      	ldr	r3, [r2, #8]
 8006e62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e66:	6093      	str	r3, [r2, #8]
      break;
 8006e68:	e7c6      	b.n	8006df8 <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e6a:	68ca      	ldr	r2, [r1, #12]
 8006e6c:	6849      	ldr	r1, [r1, #4]
 8006e6e:	6820      	ldr	r0, [r4, #0]
 8006e70:	f7ff fdd5 	bl	8006a1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e74:	2160      	movs	r1, #96	; 0x60
 8006e76:	6820      	ldr	r0, [r4, #0]
 8006e78:	f7ff fde6 	bl	8006a48 <TIM_ITRx_SetConfig>
      break;
 8006e7c:	e7bc      	b.n	8006df8 <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e7e:	68ca      	ldr	r2, [r1, #12]
 8006e80:	6849      	ldr	r1, [r1, #4]
 8006e82:	6820      	ldr	r0, [r4, #0]
 8006e84:	f7ff fdb8 	bl	80069f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e88:	2140      	movs	r1, #64	; 0x40
 8006e8a:	6820      	ldr	r0, [r4, #0]
 8006e8c:	f7ff fddc 	bl	8006a48 <TIM_ITRx_SetConfig>
      break;
 8006e90:	e7b2      	b.n	8006df8 <HAL_TIM_ConfigClockSource+0x58>
  __HAL_LOCK(htim);
 8006e92:	2002      	movs	r0, #2
}
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	ffce0088 	.word	0xffce0088
 8006e9c:	00100030 	.word	0x00100030

08006ea0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ea0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d027      	beq.n	8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
{
 8006ea8:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8006eaa:	2301      	movs	r3, #1
 8006eac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006eb6:	6803      	ldr	r3, [r0, #0]
 8006eb8:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006eba:	689d      	ldr	r5, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ebc:	4e0f      	ldr	r6, [pc, #60]	; (8006efc <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8006ebe:	4c10      	ldr	r4, [pc, #64]	; (8006f00 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8006ec0:	42a3      	cmp	r3, r4
 8006ec2:	bf18      	it	ne
 8006ec4:	42b3      	cmpne	r3, r6
 8006ec6:	d103      	bne.n	8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0x30>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ec8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ecc:	684c      	ldr	r4, [r1, #4]
 8006ece:	4322      	orrs	r2, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ed0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ed4:	680c      	ldr	r4, [r1, #0]
 8006ed6:	4322      	orrs	r2, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006ed8:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006edc:	6889      	ldr	r1, [r1, #8]
 8006ede:	4321      	orrs	r1, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ee0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006ee2:	6803      	ldr	r3, [r0, #0]
 8006ee4:	6099      	str	r1, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006eec:	2300      	movs	r3, #0
 8006eee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8006ef2:	4618      	mov	r0, r3
}
 8006ef4:	bc70      	pop	{r4, r5, r6}
 8006ef6:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006ef8:	2002      	movs	r0, #2
}
 8006efa:	4770      	bx	lr
 8006efc:	40010000 	.word	0x40010000
 8006f00:	40010400 	.word	0x40010400

08006f04 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f04:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d03c      	beq.n	8006f86 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
{
 8006f0c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8006f0e:	2301      	movs	r3, #1
 8006f10:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f14:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f1a:	688a      	ldr	r2, [r1, #8]
 8006f1c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f22:	684a      	ldr	r2, [r1, #4]
 8006f24:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f2a:	680a      	ldr	r2, [r1, #0]
 8006f2c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f32:	690a      	ldr	r2, [r1, #16]
 8006f34:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f3a:	694a      	ldr	r2, [r1, #20]
 8006f3c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f42:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8006f44:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006f46:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8006f4a:	698a      	ldr	r2, [r1, #24]
 8006f4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006f50:	6802      	ldr	r2, [r0, #0]
 8006f52:	4d0e      	ldr	r5, [pc, #56]	; (8006f8c <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8006f54:	4c0e      	ldr	r4, [pc, #56]	; (8006f90 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8006f56:	42a2      	cmp	r2, r4
 8006f58:	bf18      	it	ne
 8006f5a:	42aa      	cmpne	r2, r5
 8006f5c:	d10c      	bne.n	8006f78 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006f5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f62:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8006f64:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006f68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f6c:	69cc      	ldr	r4, [r1, #28]
 8006f6e:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f70:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006f74:	6a09      	ldr	r1, [r1, #32]
 8006f76:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f78:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8006f80:	4618      	mov	r0, r3
}
 8006f82:	bc30      	pop	{r4, r5}
 8006f84:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006f86:	2002      	movs	r0, #2
}
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	40010000 	.word	0x40010000
 8006f90:	40010400 	.word	0x40010400
 8006f94:	00000000 	.word	0x00000000

08006f98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f9c:	b087      	sub	sp, #28
 8006f9e:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006fa0:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fa2:	6883      	ldr	r3, [r0, #8]
 8006fa4:	6902      	ldr	r2, [r0, #16]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	6942      	ldr	r2, [r0, #20]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	69c2      	ldr	r2, [r0, #28]
 8006fae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)huart->FifoMode;
 8006fb0:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8006fb2:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fb4:	6808      	ldr	r0, [r1, #0]
 8006fb6:	4a87      	ldr	r2, [pc, #540]	; (80071d4 <UART_SetConfig+0x23c>)
 8006fb8:	4002      	ands	r2, r0
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	600a      	str	r2, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fbe:	6822      	ldr	r2, [r4, #0]
 8006fc0:	6853      	ldr	r3, [r2, #4]
 8006fc2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006fc6:	68e1      	ldr	r1, [r4, #12]
 8006fc8:	430b      	orrs	r3, r1
 8006fca:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fcc:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fce:	6822      	ldr	r2, [r4, #0]
 8006fd0:	4b81      	ldr	r3, [pc, #516]	; (80071d8 <UART_SetConfig+0x240>)
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d001      	beq.n	8006fda <UART_SetConfig+0x42>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fd6:	6a23      	ldr	r3, [r4, #32]
 8006fd8:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fda:	6890      	ldr	r0, [r2, #8]
 8006fdc:	4b7f      	ldr	r3, [pc, #508]	; (80071dc <UART_SetConfig+0x244>)
 8006fde:	4003      	ands	r3, r0
 8006fe0:	430b      	orrs	r3, r1
 8006fe2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006fe4:	6822      	ldr	r2, [r4, #0]
 8006fe6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006fe8:	f023 030f 	bic.w	r3, r3, #15
 8006fec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006fee:	430b      	orrs	r3, r1
 8006ff0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	4a7a      	ldr	r2, [pc, #488]	; (80071e0 <UART_SetConfig+0x248>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d01f      	beq.n	800703a <UART_SetConfig+0xa2>
 8006ffa:	4a7a      	ldr	r2, [pc, #488]	; (80071e4 <UART_SetConfig+0x24c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d059      	beq.n	80070b4 <UART_SetConfig+0x11c>
 8007000:	4a79      	ldr	r2, [pc, #484]	; (80071e8 <UART_SetConfig+0x250>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d070      	beq.n	80070e8 <UART_SetConfig+0x150>
 8007006:	4a79      	ldr	r2, [pc, #484]	; (80071ec <UART_SetConfig+0x254>)
 8007008:	4293      	cmp	r3, r2
 800700a:	f000 8087 	beq.w	800711c <UART_SetConfig+0x184>
 800700e:	4a78      	ldr	r2, [pc, #480]	; (80071f0 <UART_SetConfig+0x258>)
 8007010:	4293      	cmp	r3, r2
 8007012:	f000 809d 	beq.w	8007150 <UART_SetConfig+0x1b8>
 8007016:	4a77      	ldr	r2, [pc, #476]	; (80071f4 <UART_SetConfig+0x25c>)
 8007018:	4293      	cmp	r3, r2
 800701a:	f000 80b3 	beq.w	8007184 <UART_SetConfig+0x1ec>
 800701e:	4a76      	ldr	r2, [pc, #472]	; (80071f8 <UART_SetConfig+0x260>)
 8007020:	4293      	cmp	r3, r2
 8007022:	f000 80f1 	beq.w	8007208 <UART_SetConfig+0x270>
 8007026:	4a75      	ldr	r2, [pc, #468]	; (80071fc <UART_SetConfig+0x264>)
 8007028:	4293      	cmp	r3, r2
 800702a:	f000 8104 	beq.w	8007236 <UART_SetConfig+0x29e>
 800702e:	4a6a      	ldr	r2, [pc, #424]	; (80071d8 <UART_SetConfig+0x240>)
 8007030:	4293      	cmp	r3, r2
 8007032:	f000 8117 	beq.w	8007264 <UART_SetConfig+0x2cc>
 8007036:	2580      	movs	r5, #128	; 0x80
 8007038:	e12d      	b.n	8007296 <UART_SetConfig+0x2fe>
 800703a:	4a71      	ldr	r2, [pc, #452]	; (8007200 <UART_SetConfig+0x268>)
 800703c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800703e:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8007042:	2a28      	cmp	r2, #40	; 0x28
 8007044:	d834      	bhi.n	80070b0 <UART_SetConfig+0x118>
 8007046:	e8df f012 	tbh	[pc, r2, lsl #1]
 800704a:	0029      	.short	0x0029
 800704c:	00330033 	.word	0x00330033
 8007050:	00330033 	.word	0x00330033
 8007054:	00330033 	.word	0x00330033
 8007058:	01250033 	.word	0x01250033
 800705c:	00330033 	.word	0x00330033
 8007060:	00330033 	.word	0x00330033
 8007064:	00330033 	.word	0x00330033
 8007068:	002b0033 	.word	0x002b0033
 800706c:	00330033 	.word	0x00330033
 8007070:	00330033 	.word	0x00330033
 8007074:	00330033 	.word	0x00330033
 8007078:	002d0033 	.word	0x002d0033
 800707c:	00330033 	.word	0x00330033
 8007080:	00330033 	.word	0x00330033
 8007084:	00330033 	.word	0x00330033
 8007088:	002f0033 	.word	0x002f0033
 800708c:	00330033 	.word	0x00330033
 8007090:	00330033 	.word	0x00330033
 8007094:	00330033 	.word	0x00330033
 8007098:	00310033 	.word	0x00310033
 800709c:	2501      	movs	r5, #1
 800709e:	e0fa      	b.n	8007296 <UART_SetConfig+0x2fe>
 80070a0:	2508      	movs	r5, #8
 80070a2:	e0f8      	b.n	8007296 <UART_SetConfig+0x2fe>
 80070a4:	2510      	movs	r5, #16
 80070a6:	e0f6      	b.n	8007296 <UART_SetConfig+0x2fe>
 80070a8:	2520      	movs	r5, #32
 80070aa:	e0f4      	b.n	8007296 <UART_SetConfig+0x2fe>
 80070ac:	2540      	movs	r5, #64	; 0x40
 80070ae:	e0f2      	b.n	8007296 <UART_SetConfig+0x2fe>
 80070b0:	2580      	movs	r5, #128	; 0x80
 80070b2:	e0f0      	b.n	8007296 <UART_SetConfig+0x2fe>
 80070b4:	4a52      	ldr	r2, [pc, #328]	; (8007200 <UART_SetConfig+0x268>)
 80070b6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80070b8:	f002 0207 	and.w	r2, r2, #7
 80070bc:	2a05      	cmp	r2, #5
 80070be:	d811      	bhi.n	80070e4 <UART_SetConfig+0x14c>
 80070c0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80070c4:	01370006 	.word	0x01370006
 80070c8:	000a0008 	.word	0x000a0008
 80070cc:	000e000c 	.word	0x000e000c
 80070d0:	2500      	movs	r5, #0
 80070d2:	e0e0      	b.n	8007296 <UART_SetConfig+0x2fe>
 80070d4:	2508      	movs	r5, #8
 80070d6:	e0de      	b.n	8007296 <UART_SetConfig+0x2fe>
 80070d8:	2510      	movs	r5, #16
 80070da:	e0dc      	b.n	8007296 <UART_SetConfig+0x2fe>
 80070dc:	2520      	movs	r5, #32
 80070de:	e0da      	b.n	8007296 <UART_SetConfig+0x2fe>
 80070e0:	2540      	movs	r5, #64	; 0x40
 80070e2:	e0d8      	b.n	8007296 <UART_SetConfig+0x2fe>
 80070e4:	2580      	movs	r5, #128	; 0x80
 80070e6:	e0d6      	b.n	8007296 <UART_SetConfig+0x2fe>
 80070e8:	4a45      	ldr	r2, [pc, #276]	; (8007200 <UART_SetConfig+0x268>)
 80070ea:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80070ec:	f002 0207 	and.w	r2, r2, #7
 80070f0:	2a05      	cmp	r2, #5
 80070f2:	d811      	bhi.n	8007118 <UART_SetConfig+0x180>
 80070f4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80070f8:	011f0006 	.word	0x011f0006
 80070fc:	000a0008 	.word	0x000a0008
 8007100:	000e000c 	.word	0x000e000c
 8007104:	2500      	movs	r5, #0
 8007106:	e0c6      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007108:	2508      	movs	r5, #8
 800710a:	e0c4      	b.n	8007296 <UART_SetConfig+0x2fe>
 800710c:	2510      	movs	r5, #16
 800710e:	e0c2      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007110:	2520      	movs	r5, #32
 8007112:	e0c0      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007114:	2540      	movs	r5, #64	; 0x40
 8007116:	e0be      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007118:	2580      	movs	r5, #128	; 0x80
 800711a:	e0bc      	b.n	8007296 <UART_SetConfig+0x2fe>
 800711c:	4a38      	ldr	r2, [pc, #224]	; (8007200 <UART_SetConfig+0x268>)
 800711e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007120:	f002 0207 	and.w	r2, r2, #7
 8007124:	2a05      	cmp	r2, #5
 8007126:	d811      	bhi.n	800714c <UART_SetConfig+0x1b4>
 8007128:	e8df f012 	tbh	[pc, r2, lsl #1]
 800712c:	01070006 	.word	0x01070006
 8007130:	000a0008 	.word	0x000a0008
 8007134:	000e000c 	.word	0x000e000c
 8007138:	2500      	movs	r5, #0
 800713a:	e0ac      	b.n	8007296 <UART_SetConfig+0x2fe>
 800713c:	2508      	movs	r5, #8
 800713e:	e0aa      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007140:	2510      	movs	r5, #16
 8007142:	e0a8      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007144:	2520      	movs	r5, #32
 8007146:	e0a6      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007148:	2540      	movs	r5, #64	; 0x40
 800714a:	e0a4      	b.n	8007296 <UART_SetConfig+0x2fe>
 800714c:	2580      	movs	r5, #128	; 0x80
 800714e:	e0a2      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007150:	4a2b      	ldr	r2, [pc, #172]	; (8007200 <UART_SetConfig+0x268>)
 8007152:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007154:	f002 0207 	and.w	r2, r2, #7
 8007158:	2a05      	cmp	r2, #5
 800715a:	d811      	bhi.n	8007180 <UART_SetConfig+0x1e8>
 800715c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007160:	00ef0006 	.word	0x00ef0006
 8007164:	000a0008 	.word	0x000a0008
 8007168:	000e000c 	.word	0x000e000c
 800716c:	2500      	movs	r5, #0
 800716e:	e092      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007170:	2508      	movs	r5, #8
 8007172:	e090      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007174:	2510      	movs	r5, #16
 8007176:	e08e      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007178:	2520      	movs	r5, #32
 800717a:	e08c      	b.n	8007296 <UART_SetConfig+0x2fe>
 800717c:	2540      	movs	r5, #64	; 0x40
 800717e:	e08a      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007180:	2580      	movs	r5, #128	; 0x80
 8007182:	e088      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007184:	4a1e      	ldr	r2, [pc, #120]	; (8007200 <UART_SetConfig+0x268>)
 8007186:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007188:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800718c:	2a28      	cmp	r2, #40	; 0x28
 800718e:	d839      	bhi.n	8007204 <UART_SetConfig+0x26c>
 8007190:	e8df f002 	tbb	[pc, r2]
 8007194:	38383815 	.word	0x38383815
 8007198:	38383838 	.word	0x38383838
 800719c:	383838d7 	.word	0x383838d7
 80071a0:	38383838 	.word	0x38383838
 80071a4:	38383817 	.word	0x38383817
 80071a8:	38383838 	.word	0x38383838
 80071ac:	38383819 	.word	0x38383819
 80071b0:	38383838 	.word	0x38383838
 80071b4:	3838381b 	.word	0x3838381b
 80071b8:	38383838 	.word	0x38383838
 80071bc:	1d          	.byte	0x1d
 80071bd:	00          	.byte	0x00
 80071be:	2501      	movs	r5, #1
 80071c0:	e069      	b.n	8007296 <UART_SetConfig+0x2fe>
 80071c2:	2508      	movs	r5, #8
 80071c4:	e067      	b.n	8007296 <UART_SetConfig+0x2fe>
 80071c6:	2510      	movs	r5, #16
 80071c8:	e065      	b.n	8007296 <UART_SetConfig+0x2fe>
 80071ca:	2520      	movs	r5, #32
 80071cc:	e063      	b.n	8007296 <UART_SetConfig+0x2fe>
 80071ce:	2540      	movs	r5, #64	; 0x40
 80071d0:	e061      	b.n	8007296 <UART_SetConfig+0x2fe>
 80071d2:	bf00      	nop
 80071d4:	cfff69f3 	.word	0xcfff69f3
 80071d8:	58000c00 	.word	0x58000c00
 80071dc:	11fff4ff 	.word	0x11fff4ff
 80071e0:	40011000 	.word	0x40011000
 80071e4:	40004400 	.word	0x40004400
 80071e8:	40004800 	.word	0x40004800
 80071ec:	40004c00 	.word	0x40004c00
 80071f0:	40005000 	.word	0x40005000
 80071f4:	40011400 	.word	0x40011400
 80071f8:	40007800 	.word	0x40007800
 80071fc:	40007c00 	.word	0x40007c00
 8007200:	58024400 	.word	0x58024400
 8007204:	2580      	movs	r5, #128	; 0x80
 8007206:	e046      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007208:	4a99      	ldr	r2, [pc, #612]	; (8007470 <UART_SetConfig+0x4d8>)
 800720a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800720c:	f002 0207 	and.w	r2, r2, #7
 8007210:	2a05      	cmp	r2, #5
 8007212:	d80e      	bhi.n	8007232 <UART_SetConfig+0x29a>
 8007214:	e8df f002 	tbb	[pc, r2]
 8007218:	07059703 	.word	0x07059703
 800721c:	0b09      	.short	0x0b09
 800721e:	2500      	movs	r5, #0
 8007220:	e039      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007222:	2508      	movs	r5, #8
 8007224:	e037      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007226:	2510      	movs	r5, #16
 8007228:	e035      	b.n	8007296 <UART_SetConfig+0x2fe>
 800722a:	2520      	movs	r5, #32
 800722c:	e033      	b.n	8007296 <UART_SetConfig+0x2fe>
 800722e:	2540      	movs	r5, #64	; 0x40
 8007230:	e031      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007232:	2580      	movs	r5, #128	; 0x80
 8007234:	e02f      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007236:	4a8e      	ldr	r2, [pc, #568]	; (8007470 <UART_SetConfig+0x4d8>)
 8007238:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800723a:	f002 0207 	and.w	r2, r2, #7
 800723e:	2a05      	cmp	r2, #5
 8007240:	d80e      	bhi.n	8007260 <UART_SetConfig+0x2c8>
 8007242:	e8df f002 	tbb	[pc, r2]
 8007246:	8203      	.short	0x8203
 8007248:	0b090705 	.word	0x0b090705
 800724c:	2500      	movs	r5, #0
 800724e:	e022      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007250:	2508      	movs	r5, #8
 8007252:	e020      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007254:	2510      	movs	r5, #16
 8007256:	e01e      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007258:	2520      	movs	r5, #32
 800725a:	e01c      	b.n	8007296 <UART_SetConfig+0x2fe>
 800725c:	2540      	movs	r5, #64	; 0x40
 800725e:	e01a      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007260:	2580      	movs	r5, #128	; 0x80
 8007262:	e018      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007264:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8007268:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800726a:	f002 0207 	and.w	r2, r2, #7
 800726e:	2a05      	cmp	r2, #5
 8007270:	d80e      	bhi.n	8007290 <UART_SetConfig+0x2f8>
 8007272:	e8df f002 	tbb	[pc, r2]
 8007276:	6c03      	.short	0x6c03
 8007278:	0b090705 	.word	0x0b090705
 800727c:	2502      	movs	r5, #2
 800727e:	e00a      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007280:	2508      	movs	r5, #8
 8007282:	e008      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007284:	2510      	movs	r5, #16
 8007286:	e006      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007288:	2520      	movs	r5, #32
 800728a:	e004      	b.n	8007296 <UART_SetConfig+0x2fe>
 800728c:	2540      	movs	r5, #64	; 0x40
 800728e:	e002      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007290:	2580      	movs	r5, #128	; 0x80
 8007292:	e000      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007294:	2504      	movs	r5, #4

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007296:	4a77      	ldr	r2, [pc, #476]	; (8007474 <UART_SetConfig+0x4dc>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d05a      	beq.n	8007352 <UART_SetConfig+0x3ba>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800729c:	69e3      	ldr	r3, [r4, #28]
 800729e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072a2:	f000 8517 	beq.w	8007cd4 <UART_SetConfig+0xd3c>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 80072a6:	2d40      	cmp	r5, #64	; 0x40
 80072a8:	f201 81bb 	bhi.w	8008622 <UART_SetConfig+0x168a>
 80072ac:	e8df f015 	tbh	[pc, r5, lsl #1]
 80072b0:	07fa076c 	.word	0x07fa076c
 80072b4:	09b909b9 	.word	0x09b909b9
 80072b8:	09b90838 	.word	0x09b90838
 80072bc:	09b909b9 	.word	0x09b909b9
 80072c0:	09b90878 	.word	0x09b90878
 80072c4:	09b909b9 	.word	0x09b909b9
 80072c8:	09b909b9 	.word	0x09b909b9
 80072cc:	09b909b9 	.word	0x09b909b9
 80072d0:	09b908b8 	.word	0x09b908b8
 80072d4:	09b909b9 	.word	0x09b909b9
 80072d8:	09b909b9 	.word	0x09b909b9
 80072dc:	09b909b9 	.word	0x09b909b9
 80072e0:	09b909b9 	.word	0x09b909b9
 80072e4:	09b909b9 	.word	0x09b909b9
 80072e8:	09b909b9 	.word	0x09b909b9
 80072ec:	09b909b9 	.word	0x09b909b9
 80072f0:	09b90938 	.word	0x09b90938
 80072f4:	09b909b9 	.word	0x09b909b9
 80072f8:	09b909b9 	.word	0x09b909b9
 80072fc:	09b909b9 	.word	0x09b909b9
 8007300:	09b909b9 	.word	0x09b909b9
 8007304:	09b909b9 	.word	0x09b909b9
 8007308:	09b909b9 	.word	0x09b909b9
 800730c:	09b909b9 	.word	0x09b909b9
 8007310:	09b909b9 	.word	0x09b909b9
 8007314:	09b909b9 	.word	0x09b909b9
 8007318:	09b909b9 	.word	0x09b909b9
 800731c:	09b909b9 	.word	0x09b909b9
 8007320:	09b909b9 	.word	0x09b909b9
 8007324:	09b909b9 	.word	0x09b909b9
 8007328:	09b909b9 	.word	0x09b909b9
 800732c:	09b909b9 	.word	0x09b909b9
 8007330:	0974      	.short	0x0974
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007332:	2504      	movs	r5, #4
 8007334:	e7af      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007336:	2504      	movs	r5, #4
 8007338:	e7ad      	b.n	8007296 <UART_SetConfig+0x2fe>
 800733a:	2504      	movs	r5, #4
 800733c:	e7ab      	b.n	8007296 <UART_SetConfig+0x2fe>
 800733e:	2504      	movs	r5, #4
 8007340:	e7a9      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007342:	2504      	movs	r5, #4
 8007344:	e7a7      	b.n	8007296 <UART_SetConfig+0x2fe>
 8007346:	2504      	movs	r5, #4
 8007348:	e7a5      	b.n	8007296 <UART_SetConfig+0x2fe>
 800734a:	2504      	movs	r5, #4
 800734c:	e7a3      	b.n	8007296 <UART_SetConfig+0x2fe>
 800734e:	2504      	movs	r5, #4
 8007350:	e7a1      	b.n	8007296 <UART_SetConfig+0x2fe>
    switch (clocksource)
 8007352:	2d08      	cmp	r5, #8
 8007354:	f000 80a4 	beq.w	80074a0 <UART_SetConfig+0x508>
 8007358:	d90b      	bls.n	8007372 <UART_SetConfig+0x3da>
 800735a:	2d20      	cmp	r5, #32
 800735c:	f000 8134 	beq.w	80075c8 <UART_SetConfig+0x630>
 8007360:	2d40      	cmp	r5, #64	; 0x40
 8007362:	f000 814f 	beq.w	8007604 <UART_SetConfig+0x66c>
 8007366:	2d10      	cmp	r5, #16
 8007368:	f000 80d3 	beq.w	8007512 <UART_SetConfig+0x57a>
        ret = HAL_ERROR;
 800736c:	2001      	movs	r0, #1
 800736e:	f000 bf3d 	b.w	80081ec <UART_SetConfig+0x1254>
    switch (clocksource)
 8007372:	2d02      	cmp	r5, #2
 8007374:	d020      	beq.n	80073b8 <UART_SetConfig+0x420>
 8007376:	2d04      	cmp	r5, #4
 8007378:	d1f8      	bne.n	800736c <UART_SetConfig+0x3d4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800737a:	a803      	add	r0, sp, #12
 800737c:	f7fd f8d2 	bl	8004524 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007380:	9804      	ldr	r0, [sp, #16]
 8007382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007384:	2b00      	cmp	r3, #0
 8007386:	d06e      	beq.n	8007466 <UART_SetConfig+0x4ce>
 8007388:	2b01      	cmp	r3, #1
 800738a:	d075      	beq.n	8007478 <UART_SetConfig+0x4e0>
 800738c:	2b02      	cmp	r3, #2
 800738e:	d075      	beq.n	800747c <UART_SetConfig+0x4e4>
 8007390:	2b03      	cmp	r3, #3
 8007392:	d075      	beq.n	8007480 <UART_SetConfig+0x4e8>
 8007394:	2b04      	cmp	r3, #4
 8007396:	d075      	beq.n	8007484 <UART_SetConfig+0x4ec>
 8007398:	2b05      	cmp	r3, #5
 800739a:	d075      	beq.n	8007488 <UART_SetConfig+0x4f0>
 800739c:	2b06      	cmp	r3, #6
 800739e:	d075      	beq.n	800748c <UART_SetConfig+0x4f4>
 80073a0:	2b07      	cmp	r3, #7
 80073a2:	d075      	beq.n	8007490 <UART_SetConfig+0x4f8>
 80073a4:	2b08      	cmp	r3, #8
 80073a6:	d075      	beq.n	8007494 <UART_SetConfig+0x4fc>
 80073a8:	2b09      	cmp	r3, #9
 80073aa:	d075      	beq.n	8007498 <UART_SetConfig+0x500>
 80073ac:	2b0a      	cmp	r3, #10
 80073ae:	d075      	beq.n	800749c <UART_SetConfig+0x504>
 80073b0:	2b0b      	cmp	r3, #11
 80073b2:	d055      	beq.n	8007460 <UART_SetConfig+0x4c8>
 80073b4:	2301      	movs	r3, #1
 80073b6:	e057      	b.n	8007468 <UART_SetConfig+0x4d0>
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80073b8:	f7fd f8a2 	bl	8004500 <HAL_RCCEx_GetD3PCLK1Freq>
 80073bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073be:	b1d3      	cbz	r3, 80073f6 <UART_SetConfig+0x45e>
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d039      	beq.n	8007438 <UART_SetConfig+0x4a0>
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d039      	beq.n	800743c <UART_SetConfig+0x4a4>
 80073c8:	2b03      	cmp	r3, #3
 80073ca:	d039      	beq.n	8007440 <UART_SetConfig+0x4a8>
 80073cc:	2b04      	cmp	r3, #4
 80073ce:	d039      	beq.n	8007444 <UART_SetConfig+0x4ac>
 80073d0:	2b05      	cmp	r3, #5
 80073d2:	d039      	beq.n	8007448 <UART_SetConfig+0x4b0>
 80073d4:	2b06      	cmp	r3, #6
 80073d6:	d039      	beq.n	800744c <UART_SetConfig+0x4b4>
 80073d8:	2b07      	cmp	r3, #7
 80073da:	d039      	beq.n	8007450 <UART_SetConfig+0x4b8>
 80073dc:	2b08      	cmp	r3, #8
 80073de:	d039      	beq.n	8007454 <UART_SetConfig+0x4bc>
 80073e0:	2b09      	cmp	r3, #9
 80073e2:	d039      	beq.n	8007458 <UART_SetConfig+0x4c0>
 80073e4:	2b0a      	cmp	r3, #10
 80073e6:	d039      	beq.n	800745c <UART_SetConfig+0x4c4>
 80073e8:	2b0b      	cmp	r3, #11
 80073ea:	d001      	beq.n	80073f0 <UART_SetConfig+0x458>
 80073ec:	2301      	movs	r3, #1
 80073ee:	e003      	b.n	80073f8 <UART_SetConfig+0x460>
 80073f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073f4:	e000      	b.n	80073f8 <UART_SetConfig+0x460>
 80073f6:	2301      	movs	r3, #1
 80073f8:	fbb0 f0f3 	udiv	r0, r0, r3
    if (lpuart_ker_ck_pres != 0U)
 80073fc:	2800      	cmp	r0, #0
 80073fe:	f001 8113 	beq.w	8008628 <UART_SetConfig+0x1690>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007402:	6866      	ldr	r6, [r4, #4]
 8007404:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8007408:	4283      	cmp	r3, r0
 800740a:	f201 810f 	bhi.w	800862c <UART_SetConfig+0x1694>
 800740e:	ebb0 3f06 	cmp.w	r0, r6, lsl #12
 8007412:	f201 810d 	bhi.w	8008630 <UART_SetConfig+0x1698>
        switch (clocksource)
 8007416:	2d08      	cmp	r5, #8
 8007418:	f000 8251 	beq.w	80078be <UART_SetConfig+0x926>
 800741c:	f240 8161 	bls.w	80076e2 <UART_SetConfig+0x74a>
 8007420:	2d20      	cmp	r5, #32
 8007422:	f000 838d 	beq.w	8007b40 <UART_SetConfig+0xba8>
 8007426:	2d40      	cmp	r5, #64	; 0x40
 8007428:	f000 83ef 	beq.w	8007c0a <UART_SetConfig+0xc72>
 800742c:	2d10      	cmp	r5, #16
 800742e:	f000 829f 	beq.w	8007970 <UART_SetConfig+0x9d8>
            ret = HAL_ERROR;
 8007432:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8007434:	2300      	movs	r3, #0
 8007436:	e1de      	b.n	80077f6 <UART_SetConfig+0x85e>
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007438:	2302      	movs	r3, #2
 800743a:	e7dd      	b.n	80073f8 <UART_SetConfig+0x460>
 800743c:	2304      	movs	r3, #4
 800743e:	e7db      	b.n	80073f8 <UART_SetConfig+0x460>
 8007440:	2306      	movs	r3, #6
 8007442:	e7d9      	b.n	80073f8 <UART_SetConfig+0x460>
 8007444:	2308      	movs	r3, #8
 8007446:	e7d7      	b.n	80073f8 <UART_SetConfig+0x460>
 8007448:	230a      	movs	r3, #10
 800744a:	e7d5      	b.n	80073f8 <UART_SetConfig+0x460>
 800744c:	230c      	movs	r3, #12
 800744e:	e7d3      	b.n	80073f8 <UART_SetConfig+0x460>
 8007450:	2310      	movs	r3, #16
 8007452:	e7d1      	b.n	80073f8 <UART_SetConfig+0x460>
 8007454:	2320      	movs	r3, #32
 8007456:	e7cf      	b.n	80073f8 <UART_SetConfig+0x460>
 8007458:	2340      	movs	r3, #64	; 0x40
 800745a:	e7cd      	b.n	80073f8 <UART_SetConfig+0x460>
 800745c:	2380      	movs	r3, #128	; 0x80
 800745e:	e7cb      	b.n	80073f8 <UART_SetConfig+0x460>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007460:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007464:	e000      	b.n	8007468 <UART_SetConfig+0x4d0>
 8007466:	2301      	movs	r3, #1
 8007468:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 800746c:	e7c6      	b.n	80073fc <UART_SetConfig+0x464>
 800746e:	bf00      	nop
 8007470:	58024400 	.word	0x58024400
 8007474:	58000c00 	.word	0x58000c00
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007478:	2302      	movs	r3, #2
 800747a:	e7f5      	b.n	8007468 <UART_SetConfig+0x4d0>
 800747c:	2304      	movs	r3, #4
 800747e:	e7f3      	b.n	8007468 <UART_SetConfig+0x4d0>
 8007480:	2306      	movs	r3, #6
 8007482:	e7f1      	b.n	8007468 <UART_SetConfig+0x4d0>
 8007484:	2308      	movs	r3, #8
 8007486:	e7ef      	b.n	8007468 <UART_SetConfig+0x4d0>
 8007488:	230a      	movs	r3, #10
 800748a:	e7ed      	b.n	8007468 <UART_SetConfig+0x4d0>
 800748c:	230c      	movs	r3, #12
 800748e:	e7eb      	b.n	8007468 <UART_SetConfig+0x4d0>
 8007490:	2310      	movs	r3, #16
 8007492:	e7e9      	b.n	8007468 <UART_SetConfig+0x4d0>
 8007494:	2320      	movs	r3, #32
 8007496:	e7e7      	b.n	8007468 <UART_SetConfig+0x4d0>
 8007498:	2340      	movs	r3, #64	; 0x40
 800749a:	e7e5      	b.n	8007468 <UART_SetConfig+0x4d0>
 800749c:	2380      	movs	r3, #128	; 0x80
 800749e:	e7e3      	b.n	8007468 <UART_SetConfig+0x4d0>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074a0:	4668      	mov	r0, sp
 80074a2:	f7fd f93d 	bl	8004720 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80074a6:	9801      	ldr	r0, [sp, #4]
 80074a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074aa:	b1d3      	cbz	r3, 80074e2 <UART_SetConfig+0x54a>
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d01c      	beq.n	80074ea <UART_SetConfig+0x552>
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d01c      	beq.n	80074ee <UART_SetConfig+0x556>
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d01c      	beq.n	80074f2 <UART_SetConfig+0x55a>
 80074b8:	2b04      	cmp	r3, #4
 80074ba:	d01c      	beq.n	80074f6 <UART_SetConfig+0x55e>
 80074bc:	2b05      	cmp	r3, #5
 80074be:	d01c      	beq.n	80074fa <UART_SetConfig+0x562>
 80074c0:	2b06      	cmp	r3, #6
 80074c2:	d01c      	beq.n	80074fe <UART_SetConfig+0x566>
 80074c4:	2b07      	cmp	r3, #7
 80074c6:	d01c      	beq.n	8007502 <UART_SetConfig+0x56a>
 80074c8:	2b08      	cmp	r3, #8
 80074ca:	d01c      	beq.n	8007506 <UART_SetConfig+0x56e>
 80074cc:	2b09      	cmp	r3, #9
 80074ce:	d01c      	beq.n	800750a <UART_SetConfig+0x572>
 80074d0:	2b0a      	cmp	r3, #10
 80074d2:	d01c      	beq.n	800750e <UART_SetConfig+0x576>
 80074d4:	2b0b      	cmp	r3, #11
 80074d6:	d001      	beq.n	80074dc <UART_SetConfig+0x544>
 80074d8:	2301      	movs	r3, #1
 80074da:	e003      	b.n	80074e4 <UART_SetConfig+0x54c>
 80074dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074e0:	e000      	b.n	80074e4 <UART_SetConfig+0x54c>
 80074e2:	2301      	movs	r3, #1
 80074e4:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80074e8:	e788      	b.n	80073fc <UART_SetConfig+0x464>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80074ea:	2302      	movs	r3, #2
 80074ec:	e7fa      	b.n	80074e4 <UART_SetConfig+0x54c>
 80074ee:	2304      	movs	r3, #4
 80074f0:	e7f8      	b.n	80074e4 <UART_SetConfig+0x54c>
 80074f2:	2306      	movs	r3, #6
 80074f4:	e7f6      	b.n	80074e4 <UART_SetConfig+0x54c>
 80074f6:	2308      	movs	r3, #8
 80074f8:	e7f4      	b.n	80074e4 <UART_SetConfig+0x54c>
 80074fa:	230a      	movs	r3, #10
 80074fc:	e7f2      	b.n	80074e4 <UART_SetConfig+0x54c>
 80074fe:	230c      	movs	r3, #12
 8007500:	e7f0      	b.n	80074e4 <UART_SetConfig+0x54c>
 8007502:	2310      	movs	r3, #16
 8007504:	e7ee      	b.n	80074e4 <UART_SetConfig+0x54c>
 8007506:	2320      	movs	r3, #32
 8007508:	e7ec      	b.n	80074e4 <UART_SetConfig+0x54c>
 800750a:	2340      	movs	r3, #64	; 0x40
 800750c:	e7ea      	b.n	80074e4 <UART_SetConfig+0x54c>
 800750e:	2380      	movs	r3, #128	; 0x80
 8007510:	e7e8      	b.n	80074e4 <UART_SetConfig+0x54c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007512:	4b9c      	ldr	r3, [pc, #624]	; (8007784 <UART_SetConfig+0x7ec>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f013 0f20 	tst.w	r3, #32
 800751a:	d03a      	beq.n	8007592 <UART_SetConfig+0x5fa>
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800751c:	4b99      	ldr	r3, [pc, #612]	; (8007784 <UART_SetConfig+0x7ec>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007524:	4898      	ldr	r0, [pc, #608]	; (8007788 <UART_SetConfig+0x7f0>)
 8007526:	40d8      	lsrs	r0, r3
 8007528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800752a:	b1c3      	cbz	r3, 800755e <UART_SetConfig+0x5c6>
 800752c:	2b01      	cmp	r3, #1
 800752e:	d01a      	beq.n	8007566 <UART_SetConfig+0x5ce>
 8007530:	2b02      	cmp	r3, #2
 8007532:	d01a      	beq.n	800756a <UART_SetConfig+0x5d2>
 8007534:	2b03      	cmp	r3, #3
 8007536:	d01a      	beq.n	800756e <UART_SetConfig+0x5d6>
 8007538:	2b04      	cmp	r3, #4
 800753a:	d01a      	beq.n	8007572 <UART_SetConfig+0x5da>
 800753c:	2b05      	cmp	r3, #5
 800753e:	d01a      	beq.n	8007576 <UART_SetConfig+0x5de>
 8007540:	2b06      	cmp	r3, #6
 8007542:	d01a      	beq.n	800757a <UART_SetConfig+0x5e2>
 8007544:	2b07      	cmp	r3, #7
 8007546:	d01a      	beq.n	800757e <UART_SetConfig+0x5e6>
 8007548:	2b08      	cmp	r3, #8
 800754a:	d01a      	beq.n	8007582 <UART_SetConfig+0x5ea>
 800754c:	2b09      	cmp	r3, #9
 800754e:	d01a      	beq.n	8007586 <UART_SetConfig+0x5ee>
 8007550:	2b0a      	cmp	r3, #10
 8007552:	d01a      	beq.n	800758a <UART_SetConfig+0x5f2>
 8007554:	2b0b      	cmp	r3, #11
 8007556:	d11a      	bne.n	800758e <UART_SetConfig+0x5f6>
 8007558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800755c:	e000      	b.n	8007560 <UART_SetConfig+0x5c8>
 800755e:	2301      	movs	r3, #1
 8007560:	fbb0 f0f3 	udiv	r0, r0, r3
 8007564:	e74a      	b.n	80073fc <UART_SetConfig+0x464>
 8007566:	2302      	movs	r3, #2
 8007568:	e7fa      	b.n	8007560 <UART_SetConfig+0x5c8>
 800756a:	2304      	movs	r3, #4
 800756c:	e7f8      	b.n	8007560 <UART_SetConfig+0x5c8>
 800756e:	2306      	movs	r3, #6
 8007570:	e7f6      	b.n	8007560 <UART_SetConfig+0x5c8>
 8007572:	2308      	movs	r3, #8
 8007574:	e7f4      	b.n	8007560 <UART_SetConfig+0x5c8>
 8007576:	230a      	movs	r3, #10
 8007578:	e7f2      	b.n	8007560 <UART_SetConfig+0x5c8>
 800757a:	230c      	movs	r3, #12
 800757c:	e7f0      	b.n	8007560 <UART_SetConfig+0x5c8>
 800757e:	2310      	movs	r3, #16
 8007580:	e7ee      	b.n	8007560 <UART_SetConfig+0x5c8>
 8007582:	2320      	movs	r3, #32
 8007584:	e7ec      	b.n	8007560 <UART_SetConfig+0x5c8>
 8007586:	2340      	movs	r3, #64	; 0x40
 8007588:	e7ea      	b.n	8007560 <UART_SetConfig+0x5c8>
 800758a:	2380      	movs	r3, #128	; 0x80
 800758c:	e7e8      	b.n	8007560 <UART_SetConfig+0x5c8>
 800758e:	2301      	movs	r3, #1
 8007590:	e7e6      	b.n	8007560 <UART_SetConfig+0x5c8>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007594:	2b00      	cmp	r3, #0
 8007596:	d053      	beq.n	8007640 <UART_SetConfig+0x6a8>
 8007598:	2b01      	cmp	r3, #1
 800759a:	d053      	beq.n	8007644 <UART_SetConfig+0x6ac>
 800759c:	2b02      	cmp	r3, #2
 800759e:	d053      	beq.n	8007648 <UART_SetConfig+0x6b0>
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d053      	beq.n	800764c <UART_SetConfig+0x6b4>
 80075a4:	2b04      	cmp	r3, #4
 80075a6:	d053      	beq.n	8007650 <UART_SetConfig+0x6b8>
 80075a8:	2b05      	cmp	r3, #5
 80075aa:	d053      	beq.n	8007654 <UART_SetConfig+0x6bc>
 80075ac:	2b06      	cmp	r3, #6
 80075ae:	d053      	beq.n	8007658 <UART_SetConfig+0x6c0>
 80075b0:	2b07      	cmp	r3, #7
 80075b2:	d053      	beq.n	800765c <UART_SetConfig+0x6c4>
 80075b4:	2b08      	cmp	r3, #8
 80075b6:	d053      	beq.n	8007660 <UART_SetConfig+0x6c8>
 80075b8:	2b09      	cmp	r3, #9
 80075ba:	d053      	beq.n	8007664 <UART_SetConfig+0x6cc>
 80075bc:	2b0a      	cmp	r3, #10
 80075be:	d053      	beq.n	8007668 <UART_SetConfig+0x6d0>
 80075c0:	2b0b      	cmp	r3, #11
 80075c2:	d153      	bne.n	800766c <UART_SetConfig+0x6d4>
 80075c4:	4871      	ldr	r0, [pc, #452]	; (800778c <UART_SetConfig+0x7f4>)
 80075c6:	e719      	b.n	80073fc <UART_SetConfig+0x464>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80075c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d050      	beq.n	8007670 <UART_SetConfig+0x6d8>
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d050      	beq.n	8007674 <UART_SetConfig+0x6dc>
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d050      	beq.n	8007678 <UART_SetConfig+0x6e0>
 80075d6:	2b03      	cmp	r3, #3
 80075d8:	d050      	beq.n	800767c <UART_SetConfig+0x6e4>
 80075da:	2b04      	cmp	r3, #4
 80075dc:	d050      	beq.n	8007680 <UART_SetConfig+0x6e8>
 80075de:	2b05      	cmp	r3, #5
 80075e0:	d050      	beq.n	8007684 <UART_SetConfig+0x6ec>
 80075e2:	2b06      	cmp	r3, #6
 80075e4:	d050      	beq.n	8007688 <UART_SetConfig+0x6f0>
 80075e6:	2b07      	cmp	r3, #7
 80075e8:	d050      	beq.n	800768c <UART_SetConfig+0x6f4>
 80075ea:	2b08      	cmp	r3, #8
 80075ec:	d050      	beq.n	8007690 <UART_SetConfig+0x6f8>
 80075ee:	2b09      	cmp	r3, #9
 80075f0:	d050      	beq.n	8007694 <UART_SetConfig+0x6fc>
 80075f2:	2b0a      	cmp	r3, #10
 80075f4:	d051      	beq.n	800769a <UART_SetConfig+0x702>
 80075f6:	2b0b      	cmp	r3, #11
 80075f8:	d001      	beq.n	80075fe <UART_SetConfig+0x666>
 80075fa:	4865      	ldr	r0, [pc, #404]	; (8007790 <UART_SetConfig+0x7f8>)
 80075fc:	e6fe      	b.n	80073fc <UART_SetConfig+0x464>
 80075fe:	f643 5009 	movw	r0, #15625	; 0x3d09
 8007602:	e6fb      	b.n	80073fc <UART_SetConfig+0x464>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007604:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007606:	2b00      	cmp	r3, #0
 8007608:	d04a      	beq.n	80076a0 <UART_SetConfig+0x708>
 800760a:	2b01      	cmp	r3, #1
 800760c:	d04b      	beq.n	80076a6 <UART_SetConfig+0x70e>
 800760e:	2b02      	cmp	r3, #2
 8007610:	d04c      	beq.n	80076ac <UART_SetConfig+0x714>
 8007612:	2b03      	cmp	r3, #3
 8007614:	d04d      	beq.n	80076b2 <UART_SetConfig+0x71a>
 8007616:	2b04      	cmp	r3, #4
 8007618:	d04e      	beq.n	80076b8 <UART_SetConfig+0x720>
 800761a:	2b05      	cmp	r3, #5
 800761c:	d04f      	beq.n	80076be <UART_SetConfig+0x726>
 800761e:	2b06      	cmp	r3, #6
 8007620:	d050      	beq.n	80076c4 <UART_SetConfig+0x72c>
 8007622:	2b07      	cmp	r3, #7
 8007624:	d051      	beq.n	80076ca <UART_SetConfig+0x732>
 8007626:	2b08      	cmp	r3, #8
 8007628:	d052      	beq.n	80076d0 <UART_SetConfig+0x738>
 800762a:	2b09      	cmp	r3, #9
 800762c:	d053      	beq.n	80076d6 <UART_SetConfig+0x73e>
 800762e:	2b0a      	cmp	r3, #10
 8007630:	d054      	beq.n	80076dc <UART_SetConfig+0x744>
 8007632:	2b0b      	cmp	r3, #11
 8007634:	d002      	beq.n	800763c <UART_SetConfig+0x6a4>
 8007636:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800763a:	e6df      	b.n	80073fc <UART_SetConfig+0x464>
 800763c:	2080      	movs	r0, #128	; 0x80
 800763e:	e6dd      	b.n	80073fc <UART_SetConfig+0x464>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007640:	4851      	ldr	r0, [pc, #324]	; (8007788 <UART_SetConfig+0x7f0>)
 8007642:	e6db      	b.n	80073fc <UART_SetConfig+0x464>
 8007644:	4853      	ldr	r0, [pc, #332]	; (8007794 <UART_SetConfig+0x7fc>)
 8007646:	e6d9      	b.n	80073fc <UART_SetConfig+0x464>
 8007648:	4853      	ldr	r0, [pc, #332]	; (8007798 <UART_SetConfig+0x800>)
 800764a:	e6d7      	b.n	80073fc <UART_SetConfig+0x464>
 800764c:	4853      	ldr	r0, [pc, #332]	; (800779c <UART_SetConfig+0x804>)
 800764e:	e6d5      	b.n	80073fc <UART_SetConfig+0x464>
 8007650:	4853      	ldr	r0, [pc, #332]	; (80077a0 <UART_SetConfig+0x808>)
 8007652:	e6d3      	b.n	80073fc <UART_SetConfig+0x464>
 8007654:	4853      	ldr	r0, [pc, #332]	; (80077a4 <UART_SetConfig+0x80c>)
 8007656:	e6d1      	b.n	80073fc <UART_SetConfig+0x464>
 8007658:	4853      	ldr	r0, [pc, #332]	; (80077a8 <UART_SetConfig+0x810>)
 800765a:	e6cf      	b.n	80073fc <UART_SetConfig+0x464>
 800765c:	484c      	ldr	r0, [pc, #304]	; (8007790 <UART_SetConfig+0x7f8>)
 800765e:	e6cd      	b.n	80073fc <UART_SetConfig+0x464>
 8007660:	4852      	ldr	r0, [pc, #328]	; (80077ac <UART_SetConfig+0x814>)
 8007662:	e6cb      	b.n	80073fc <UART_SetConfig+0x464>
 8007664:	4852      	ldr	r0, [pc, #328]	; (80077b0 <UART_SetConfig+0x818>)
 8007666:	e6c9      	b.n	80073fc <UART_SetConfig+0x464>
 8007668:	4852      	ldr	r0, [pc, #328]	; (80077b4 <UART_SetConfig+0x81c>)
 800766a:	e6c7      	b.n	80073fc <UART_SetConfig+0x464>
 800766c:	4846      	ldr	r0, [pc, #280]	; (8007788 <UART_SetConfig+0x7f0>)
 800766e:	e6c5      	b.n	80073fc <UART_SetConfig+0x464>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007670:	4847      	ldr	r0, [pc, #284]	; (8007790 <UART_SetConfig+0x7f8>)
 8007672:	e6c3      	b.n	80073fc <UART_SetConfig+0x464>
 8007674:	484d      	ldr	r0, [pc, #308]	; (80077ac <UART_SetConfig+0x814>)
 8007676:	e6c1      	b.n	80073fc <UART_SetConfig+0x464>
 8007678:	484d      	ldr	r0, [pc, #308]	; (80077b0 <UART_SetConfig+0x818>)
 800767a:	e6bf      	b.n	80073fc <UART_SetConfig+0x464>
 800767c:	484e      	ldr	r0, [pc, #312]	; (80077b8 <UART_SetConfig+0x820>)
 800767e:	e6bd      	b.n	80073fc <UART_SetConfig+0x464>
 8007680:	484c      	ldr	r0, [pc, #304]	; (80077b4 <UART_SetConfig+0x81c>)
 8007682:	e6bb      	b.n	80073fc <UART_SetConfig+0x464>
 8007684:	484d      	ldr	r0, [pc, #308]	; (80077bc <UART_SetConfig+0x824>)
 8007686:	e6b9      	b.n	80073fc <UART_SetConfig+0x464>
 8007688:	484d      	ldr	r0, [pc, #308]	; (80077c0 <UART_SetConfig+0x828>)
 800768a:	e6b7      	b.n	80073fc <UART_SetConfig+0x464>
 800768c:	483f      	ldr	r0, [pc, #252]	; (800778c <UART_SetConfig+0x7f4>)
 800768e:	e6b5      	b.n	80073fc <UART_SetConfig+0x464>
 8007690:	484c      	ldr	r0, [pc, #304]	; (80077c4 <UART_SetConfig+0x82c>)
 8007692:	e6b3      	b.n	80073fc <UART_SetConfig+0x464>
 8007694:	f24f 4024 	movw	r0, #62500	; 0xf424
 8007698:	e6b0      	b.n	80073fc <UART_SetConfig+0x464>
 800769a:	f647 2012 	movw	r0, #31250	; 0x7a12
 800769e:	e6ad      	b.n	80073fc <UART_SetConfig+0x464>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80076a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80076a4:	e6aa      	b.n	80073fc <UART_SetConfig+0x464>
 80076a6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80076aa:	e6a7      	b.n	80073fc <UART_SetConfig+0x464>
 80076ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80076b0:	e6a4      	b.n	80073fc <UART_SetConfig+0x464>
 80076b2:	f241 5055 	movw	r0, #5461	; 0x1555
 80076b6:	e6a1      	b.n	80073fc <UART_SetConfig+0x464>
 80076b8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80076bc:	e69e      	b.n	80073fc <UART_SetConfig+0x464>
 80076be:	f640 40cc 	movw	r0, #3276	; 0xccc
 80076c2:	e69b      	b.n	80073fc <UART_SetConfig+0x464>
 80076c4:	f640 20aa 	movw	r0, #2730	; 0xaaa
 80076c8:	e698      	b.n	80073fc <UART_SetConfig+0x464>
 80076ca:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80076ce:	e695      	b.n	80073fc <UART_SetConfig+0x464>
 80076d0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80076d4:	e692      	b.n	80073fc <UART_SetConfig+0x464>
 80076d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80076da:	e68f      	b.n	80073fc <UART_SetConfig+0x464>
 80076dc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80076e0:	e68c      	b.n	80073fc <UART_SetConfig+0x464>
        switch (clocksource)
 80076e2:	2d02      	cmp	r5, #2
 80076e4:	d02f      	beq.n	8007746 <UART_SetConfig+0x7ae>
 80076e6:	2d04      	cmp	r5, #4
 80076e8:	f47f aea3 	bne.w	8007432 <UART_SetConfig+0x49a>
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076ec:	a803      	add	r0, sp, #12
 80076ee:	f7fc ff19 	bl	8004524 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076f2:	9804      	ldr	r0, [sp, #16]
 80076f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f000 80a8 	beq.w	800784c <UART_SetConfig+0x8b4>
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	f000 80bd 	beq.w	800787c <UART_SetConfig+0x8e4>
 8007702:	2b02      	cmp	r3, #2
 8007704:	f000 80bd 	beq.w	8007882 <UART_SetConfig+0x8ea>
 8007708:	2b03      	cmp	r3, #3
 800770a:	f000 80bd 	beq.w	8007888 <UART_SetConfig+0x8f0>
 800770e:	2b04      	cmp	r3, #4
 8007710:	f000 80bd 	beq.w	800788e <UART_SetConfig+0x8f6>
 8007714:	2b05      	cmp	r3, #5
 8007716:	f000 80bd 	beq.w	8007894 <UART_SetConfig+0x8fc>
 800771a:	2b06      	cmp	r3, #6
 800771c:	f000 80bd 	beq.w	800789a <UART_SetConfig+0x902>
 8007720:	2b07      	cmp	r3, #7
 8007722:	f000 80bd 	beq.w	80078a0 <UART_SetConfig+0x908>
 8007726:	2b08      	cmp	r3, #8
 8007728:	f000 80bd 	beq.w	80078a6 <UART_SetConfig+0x90e>
 800772c:	2b09      	cmp	r3, #9
 800772e:	f000 80bd 	beq.w	80078ac <UART_SetConfig+0x914>
 8007732:	2b0a      	cmp	r3, #10
 8007734:	f000 80bd 	beq.w	80078b2 <UART_SetConfig+0x91a>
 8007738:	2b0b      	cmp	r3, #11
 800773a:	f040 80bd 	bne.w	80078b8 <UART_SetConfig+0x920>
 800773e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007742:	2300      	movs	r3, #0
 8007744:	e084      	b.n	8007850 <UART_SetConfig+0x8b8>
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007746:	f7fc fedb 	bl	8004500 <HAL_RCCEx_GetD3PCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800774a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800774c:	b3e3      	cbz	r3, 80077c8 <UART_SetConfig+0x830>
 800774e:	2b01      	cmp	r3, #1
 8007750:	d05b      	beq.n	800780a <UART_SetConfig+0x872>
 8007752:	2b02      	cmp	r3, #2
 8007754:	d05c      	beq.n	8007810 <UART_SetConfig+0x878>
 8007756:	2b03      	cmp	r3, #3
 8007758:	d05d      	beq.n	8007816 <UART_SetConfig+0x87e>
 800775a:	2b04      	cmp	r3, #4
 800775c:	d05e      	beq.n	800781c <UART_SetConfig+0x884>
 800775e:	2b05      	cmp	r3, #5
 8007760:	d05f      	beq.n	8007822 <UART_SetConfig+0x88a>
 8007762:	2b06      	cmp	r3, #6
 8007764:	d060      	beq.n	8007828 <UART_SetConfig+0x890>
 8007766:	2b07      	cmp	r3, #7
 8007768:	d061      	beq.n	800782e <UART_SetConfig+0x896>
 800776a:	2b08      	cmp	r3, #8
 800776c:	d062      	beq.n	8007834 <UART_SetConfig+0x89c>
 800776e:	2b09      	cmp	r3, #9
 8007770:	d063      	beq.n	800783a <UART_SetConfig+0x8a2>
 8007772:	2b0a      	cmp	r3, #10
 8007774:	d064      	beq.n	8007840 <UART_SetConfig+0x8a8>
 8007776:	2b0b      	cmp	r3, #11
 8007778:	d165      	bne.n	8007846 <UART_SetConfig+0x8ae>
 800777a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800777e:	2300      	movs	r3, #0
 8007780:	e024      	b.n	80077cc <UART_SetConfig+0x834>
 8007782:	bf00      	nop
 8007784:	58024400 	.word	0x58024400
 8007788:	03d09000 	.word	0x03d09000
 800778c:	0003d090 	.word	0x0003d090
 8007790:	003d0900 	.word	0x003d0900
 8007794:	01e84800 	.word	0x01e84800
 8007798:	00f42400 	.word	0x00f42400
 800779c:	00a2c2aa 	.word	0x00a2c2aa
 80077a0:	007a1200 	.word	0x007a1200
 80077a4:	0061a800 	.word	0x0061a800
 80077a8:	00516155 	.word	0x00516155
 80077ac:	001e8480 	.word	0x001e8480
 80077b0:	000f4240 	.word	0x000f4240
 80077b4:	0007a120 	.word	0x0007a120
 80077b8:	000a2c2a 	.word	0x000a2c2a
 80077bc:	00061a80 	.word	0x00061a80
 80077c0:	00051615 	.word	0x00051615
 80077c4:	0001e848 	.word	0x0001e848
 80077c8:	2201      	movs	r2, #1
 80077ca:	2300      	movs	r3, #0
 80077cc:	2100      	movs	r1, #0
 80077ce:	f7f8 fd83 	bl	80002d8 <__aeabi_uldivmod>
 80077d2:	020f      	lsls	r7, r1, #8
 80077d4:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 80077d8:	0206      	lsls	r6, r0, #8
 80077da:	6862      	ldr	r2, [r4, #4]
 80077dc:	0850      	lsrs	r0, r2, #1
 80077de:	2500      	movs	r5, #0
 80077e0:	462b      	mov	r3, r5
 80077e2:	eb16 0800 	adds.w	r8, r6, r0
 80077e6:	f147 0900 	adc.w	r9, r7, #0
 80077ea:	4640      	mov	r0, r8
 80077ec:	4649      	mov	r1, r9
 80077ee:	f7f8 fd73 	bl	80002d8 <__aeabi_uldivmod>
 80077f2:	4603      	mov	r3, r0
            break;
 80077f4:	4628      	mov	r0, r5
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077f6:	f5a3 7140 	sub.w	r1, r3, #768	; 0x300
 80077fa:	4ac1      	ldr	r2, [pc, #772]	; (8007b00 <UART_SetConfig+0xb68>)
 80077fc:	4291      	cmp	r1, r2
 80077fe:	f200 8719 	bhi.w	8008634 <UART_SetConfig+0x169c>
          huart->Instance->BRR = usartdiv;
 8007802:	6822      	ldr	r2, [r4, #0]
 8007804:	60d3      	str	r3, [r2, #12]
 8007806:	f000 bcf1 	b.w	80081ec <UART_SetConfig+0x1254>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800780a:	2202      	movs	r2, #2
 800780c:	2300      	movs	r3, #0
 800780e:	e7dd      	b.n	80077cc <UART_SetConfig+0x834>
 8007810:	2204      	movs	r2, #4
 8007812:	2300      	movs	r3, #0
 8007814:	e7da      	b.n	80077cc <UART_SetConfig+0x834>
 8007816:	2206      	movs	r2, #6
 8007818:	2300      	movs	r3, #0
 800781a:	e7d7      	b.n	80077cc <UART_SetConfig+0x834>
 800781c:	2208      	movs	r2, #8
 800781e:	2300      	movs	r3, #0
 8007820:	e7d4      	b.n	80077cc <UART_SetConfig+0x834>
 8007822:	220a      	movs	r2, #10
 8007824:	2300      	movs	r3, #0
 8007826:	e7d1      	b.n	80077cc <UART_SetConfig+0x834>
 8007828:	220c      	movs	r2, #12
 800782a:	2300      	movs	r3, #0
 800782c:	e7ce      	b.n	80077cc <UART_SetConfig+0x834>
 800782e:	2210      	movs	r2, #16
 8007830:	2300      	movs	r3, #0
 8007832:	e7cb      	b.n	80077cc <UART_SetConfig+0x834>
 8007834:	2220      	movs	r2, #32
 8007836:	2300      	movs	r3, #0
 8007838:	e7c8      	b.n	80077cc <UART_SetConfig+0x834>
 800783a:	2240      	movs	r2, #64	; 0x40
 800783c:	2300      	movs	r3, #0
 800783e:	e7c5      	b.n	80077cc <UART_SetConfig+0x834>
 8007840:	2280      	movs	r2, #128	; 0x80
 8007842:	2300      	movs	r3, #0
 8007844:	e7c2      	b.n	80077cc <UART_SetConfig+0x834>
 8007846:	2201      	movs	r2, #1
 8007848:	2300      	movs	r3, #0
 800784a:	e7bf      	b.n	80077cc <UART_SetConfig+0x834>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800784c:	2201      	movs	r2, #1
 800784e:	2300      	movs	r3, #0
 8007850:	2100      	movs	r1, #0
 8007852:	f7f8 fd41 	bl	80002d8 <__aeabi_uldivmod>
 8007856:	020f      	lsls	r7, r1, #8
 8007858:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 800785c:	0206      	lsls	r6, r0, #8
 800785e:	6862      	ldr	r2, [r4, #4]
 8007860:	0850      	lsrs	r0, r2, #1
 8007862:	2500      	movs	r5, #0
 8007864:	462b      	mov	r3, r5
 8007866:	eb16 0800 	adds.w	r8, r6, r0
 800786a:	f147 0900 	adc.w	r9, r7, #0
 800786e:	4640      	mov	r0, r8
 8007870:	4649      	mov	r1, r9
 8007872:	f7f8 fd31 	bl	80002d8 <__aeabi_uldivmod>
 8007876:	4603      	mov	r3, r0
            break;
 8007878:	4628      	mov	r0, r5
 800787a:	e7bc      	b.n	80077f6 <UART_SetConfig+0x85e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800787c:	2202      	movs	r2, #2
 800787e:	2300      	movs	r3, #0
 8007880:	e7e6      	b.n	8007850 <UART_SetConfig+0x8b8>
 8007882:	2204      	movs	r2, #4
 8007884:	2300      	movs	r3, #0
 8007886:	e7e3      	b.n	8007850 <UART_SetConfig+0x8b8>
 8007888:	2206      	movs	r2, #6
 800788a:	2300      	movs	r3, #0
 800788c:	e7e0      	b.n	8007850 <UART_SetConfig+0x8b8>
 800788e:	2208      	movs	r2, #8
 8007890:	2300      	movs	r3, #0
 8007892:	e7dd      	b.n	8007850 <UART_SetConfig+0x8b8>
 8007894:	220a      	movs	r2, #10
 8007896:	2300      	movs	r3, #0
 8007898:	e7da      	b.n	8007850 <UART_SetConfig+0x8b8>
 800789a:	220c      	movs	r2, #12
 800789c:	2300      	movs	r3, #0
 800789e:	e7d7      	b.n	8007850 <UART_SetConfig+0x8b8>
 80078a0:	2210      	movs	r2, #16
 80078a2:	2300      	movs	r3, #0
 80078a4:	e7d4      	b.n	8007850 <UART_SetConfig+0x8b8>
 80078a6:	2220      	movs	r2, #32
 80078a8:	2300      	movs	r3, #0
 80078aa:	e7d1      	b.n	8007850 <UART_SetConfig+0x8b8>
 80078ac:	2240      	movs	r2, #64	; 0x40
 80078ae:	2300      	movs	r3, #0
 80078b0:	e7ce      	b.n	8007850 <UART_SetConfig+0x8b8>
 80078b2:	2280      	movs	r2, #128	; 0x80
 80078b4:	2300      	movs	r3, #0
 80078b6:	e7cb      	b.n	8007850 <UART_SetConfig+0x8b8>
 80078b8:	2201      	movs	r2, #1
 80078ba:	2300      	movs	r3, #0
 80078bc:	e7c8      	b.n	8007850 <UART_SetConfig+0x8b8>
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078be:	4668      	mov	r0, sp
 80078c0:	f7fc ff2e 	bl	8004720 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078c4:	9801      	ldr	r0, [sp, #4]
 80078c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078c8:	b1cb      	cbz	r3, 80078fe <UART_SetConfig+0x966>
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d02f      	beq.n	800792e <UART_SetConfig+0x996>
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d030      	beq.n	8007934 <UART_SetConfig+0x99c>
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d031      	beq.n	800793a <UART_SetConfig+0x9a2>
 80078d6:	2b04      	cmp	r3, #4
 80078d8:	d032      	beq.n	8007940 <UART_SetConfig+0x9a8>
 80078da:	2b05      	cmp	r3, #5
 80078dc:	d033      	beq.n	8007946 <UART_SetConfig+0x9ae>
 80078de:	2b06      	cmp	r3, #6
 80078e0:	d034      	beq.n	800794c <UART_SetConfig+0x9b4>
 80078e2:	2b07      	cmp	r3, #7
 80078e4:	d035      	beq.n	8007952 <UART_SetConfig+0x9ba>
 80078e6:	2b08      	cmp	r3, #8
 80078e8:	d036      	beq.n	8007958 <UART_SetConfig+0x9c0>
 80078ea:	2b09      	cmp	r3, #9
 80078ec:	d037      	beq.n	800795e <UART_SetConfig+0x9c6>
 80078ee:	2b0a      	cmp	r3, #10
 80078f0:	d038      	beq.n	8007964 <UART_SetConfig+0x9cc>
 80078f2:	2b0b      	cmp	r3, #11
 80078f4:	d139      	bne.n	800796a <UART_SetConfig+0x9d2>
 80078f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078fa:	2300      	movs	r3, #0
 80078fc:	e001      	b.n	8007902 <UART_SetConfig+0x96a>
 80078fe:	2201      	movs	r2, #1
 8007900:	2300      	movs	r3, #0
 8007902:	2100      	movs	r1, #0
 8007904:	f7f8 fce8 	bl	80002d8 <__aeabi_uldivmod>
 8007908:	020f      	lsls	r7, r1, #8
 800790a:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 800790e:	0206      	lsls	r6, r0, #8
 8007910:	6862      	ldr	r2, [r4, #4]
 8007912:	0850      	lsrs	r0, r2, #1
 8007914:	2500      	movs	r5, #0
 8007916:	462b      	mov	r3, r5
 8007918:	eb16 0800 	adds.w	r8, r6, r0
 800791c:	f147 0900 	adc.w	r9, r7, #0
 8007920:	4640      	mov	r0, r8
 8007922:	4649      	mov	r1, r9
 8007924:	f7f8 fcd8 	bl	80002d8 <__aeabi_uldivmod>
 8007928:	4603      	mov	r3, r0
            break;
 800792a:	4628      	mov	r0, r5
 800792c:	e763      	b.n	80077f6 <UART_SetConfig+0x85e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800792e:	2202      	movs	r2, #2
 8007930:	2300      	movs	r3, #0
 8007932:	e7e6      	b.n	8007902 <UART_SetConfig+0x96a>
 8007934:	2204      	movs	r2, #4
 8007936:	2300      	movs	r3, #0
 8007938:	e7e3      	b.n	8007902 <UART_SetConfig+0x96a>
 800793a:	2206      	movs	r2, #6
 800793c:	2300      	movs	r3, #0
 800793e:	e7e0      	b.n	8007902 <UART_SetConfig+0x96a>
 8007940:	2208      	movs	r2, #8
 8007942:	2300      	movs	r3, #0
 8007944:	e7dd      	b.n	8007902 <UART_SetConfig+0x96a>
 8007946:	220a      	movs	r2, #10
 8007948:	2300      	movs	r3, #0
 800794a:	e7da      	b.n	8007902 <UART_SetConfig+0x96a>
 800794c:	220c      	movs	r2, #12
 800794e:	2300      	movs	r3, #0
 8007950:	e7d7      	b.n	8007902 <UART_SetConfig+0x96a>
 8007952:	2210      	movs	r2, #16
 8007954:	2300      	movs	r3, #0
 8007956:	e7d4      	b.n	8007902 <UART_SetConfig+0x96a>
 8007958:	2220      	movs	r2, #32
 800795a:	2300      	movs	r3, #0
 800795c:	e7d1      	b.n	8007902 <UART_SetConfig+0x96a>
 800795e:	2240      	movs	r2, #64	; 0x40
 8007960:	2300      	movs	r3, #0
 8007962:	e7ce      	b.n	8007902 <UART_SetConfig+0x96a>
 8007964:	2280      	movs	r2, #128	; 0x80
 8007966:	2300      	movs	r3, #0
 8007968:	e7cb      	b.n	8007902 <UART_SetConfig+0x96a>
 800796a:	2201      	movs	r2, #1
 800796c:	2300      	movs	r3, #0
 800796e:	e7c8      	b.n	8007902 <UART_SetConfig+0x96a>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007970:	4b64      	ldr	r3, [pc, #400]	; (8007b04 <UART_SetConfig+0xb6c>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f013 0f20 	tst.w	r3, #32
 8007978:	d05c      	beq.n	8007a34 <UART_SetConfig+0xa9c>
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800797a:	4b62      	ldr	r3, [pc, #392]	; (8007b04 <UART_SetConfig+0xb6c>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007982:	4861      	ldr	r0, [pc, #388]	; (8007b08 <UART_SetConfig+0xb70>)
 8007984:	40d8      	lsrs	r0, r3
 8007986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007988:	b1cb      	cbz	r3, 80079be <UART_SetConfig+0xa26>
 800798a:	2b01      	cmp	r3, #1
 800798c:	d031      	beq.n	80079f2 <UART_SetConfig+0xa5a>
 800798e:	2b02      	cmp	r3, #2
 8007990:	d032      	beq.n	80079f8 <UART_SetConfig+0xa60>
 8007992:	2b03      	cmp	r3, #3
 8007994:	d033      	beq.n	80079fe <UART_SetConfig+0xa66>
 8007996:	2b04      	cmp	r3, #4
 8007998:	d034      	beq.n	8007a04 <UART_SetConfig+0xa6c>
 800799a:	2b05      	cmp	r3, #5
 800799c:	d035      	beq.n	8007a0a <UART_SetConfig+0xa72>
 800799e:	2b06      	cmp	r3, #6
 80079a0:	d036      	beq.n	8007a10 <UART_SetConfig+0xa78>
 80079a2:	2b07      	cmp	r3, #7
 80079a4:	d037      	beq.n	8007a16 <UART_SetConfig+0xa7e>
 80079a6:	2b08      	cmp	r3, #8
 80079a8:	d038      	beq.n	8007a1c <UART_SetConfig+0xa84>
 80079aa:	2b09      	cmp	r3, #9
 80079ac:	d039      	beq.n	8007a22 <UART_SetConfig+0xa8a>
 80079ae:	2b0a      	cmp	r3, #10
 80079b0:	d03a      	beq.n	8007a28 <UART_SetConfig+0xa90>
 80079b2:	2b0b      	cmp	r3, #11
 80079b4:	d13b      	bne.n	8007a2e <UART_SetConfig+0xa96>
 80079b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079ba:	2300      	movs	r3, #0
 80079bc:	e001      	b.n	80079c2 <UART_SetConfig+0xa2a>
 80079be:	2201      	movs	r2, #1
 80079c0:	2300      	movs	r3, #0
 80079c2:	2100      	movs	r1, #0
 80079c4:	f7f8 fc88 	bl	80002d8 <__aeabi_uldivmod>
 80079c8:	ea4f 2901 	mov.w	r9, r1, lsl #8
 80079cc:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 80079d0:	ea4f 2800 	mov.w	r8, r0, lsl #8
 80079d4:	0870      	lsrs	r0, r6, #1
 80079d6:	2500      	movs	r5, #0
 80079d8:	4632      	mov	r2, r6
 80079da:	462b      	mov	r3, r5
 80079dc:	eb18 0600 	adds.w	r6, r8, r0
 80079e0:	f149 0700 	adc.w	r7, r9, #0
 80079e4:	4630      	mov	r0, r6
 80079e6:	4639      	mov	r1, r7
 80079e8:	f7f8 fc76 	bl	80002d8 <__aeabi_uldivmod>
 80079ec:	4603      	mov	r3, r0
 80079ee:	4628      	mov	r0, r5
 80079f0:	e701      	b.n	80077f6 <UART_SetConfig+0x85e>
 80079f2:	2202      	movs	r2, #2
 80079f4:	2300      	movs	r3, #0
 80079f6:	e7e4      	b.n	80079c2 <UART_SetConfig+0xa2a>
 80079f8:	2204      	movs	r2, #4
 80079fa:	2300      	movs	r3, #0
 80079fc:	e7e1      	b.n	80079c2 <UART_SetConfig+0xa2a>
 80079fe:	2206      	movs	r2, #6
 8007a00:	2300      	movs	r3, #0
 8007a02:	e7de      	b.n	80079c2 <UART_SetConfig+0xa2a>
 8007a04:	2208      	movs	r2, #8
 8007a06:	2300      	movs	r3, #0
 8007a08:	e7db      	b.n	80079c2 <UART_SetConfig+0xa2a>
 8007a0a:	220a      	movs	r2, #10
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	e7d8      	b.n	80079c2 <UART_SetConfig+0xa2a>
 8007a10:	220c      	movs	r2, #12
 8007a12:	2300      	movs	r3, #0
 8007a14:	e7d5      	b.n	80079c2 <UART_SetConfig+0xa2a>
 8007a16:	2210      	movs	r2, #16
 8007a18:	2300      	movs	r3, #0
 8007a1a:	e7d2      	b.n	80079c2 <UART_SetConfig+0xa2a>
 8007a1c:	2220      	movs	r2, #32
 8007a1e:	2300      	movs	r3, #0
 8007a20:	e7cf      	b.n	80079c2 <UART_SetConfig+0xa2a>
 8007a22:	2240      	movs	r2, #64	; 0x40
 8007a24:	2300      	movs	r3, #0
 8007a26:	e7cc      	b.n	80079c2 <UART_SetConfig+0xa2a>
 8007a28:	2280      	movs	r2, #128	; 0x80
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e7c9      	b.n	80079c2 <UART_SetConfig+0xa2a>
 8007a2e:	2201      	movs	r2, #1
 8007a30:	2300      	movs	r3, #0
 8007a32:	e7c6      	b.n	80079c2 <UART_SetConfig+0xa2a>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a36:	b1d3      	cbz	r3, 8007a6e <UART_SetConfig+0xad6>
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d029      	beq.n	8007a90 <UART_SetConfig+0xaf8>
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d02c      	beq.n	8007a9a <UART_SetConfig+0xb02>
 8007a40:	2b03      	cmp	r3, #3
 8007a42:	d02f      	beq.n	8007aa4 <UART_SetConfig+0xb0c>
 8007a44:	2b04      	cmp	r3, #4
 8007a46:	d032      	beq.n	8007aae <UART_SetConfig+0xb16>
 8007a48:	2b05      	cmp	r3, #5
 8007a4a:	d035      	beq.n	8007ab8 <UART_SetConfig+0xb20>
 8007a4c:	2b06      	cmp	r3, #6
 8007a4e:	d038      	beq.n	8007ac2 <UART_SetConfig+0xb2a>
 8007a50:	2b07      	cmp	r3, #7
 8007a52:	d03b      	beq.n	8007acc <UART_SetConfig+0xb34>
 8007a54:	2b08      	cmp	r3, #8
 8007a56:	d03e      	beq.n	8007ad6 <UART_SetConfig+0xb3e>
 8007a58:	2b09      	cmp	r3, #9
 8007a5a:	d041      	beq.n	8007ae0 <UART_SetConfig+0xb48>
 8007a5c:	2b0a      	cmp	r3, #10
 8007a5e:	d065      	beq.n	8007b2c <UART_SetConfig+0xb94>
 8007a60:	2b0b      	cmp	r3, #11
 8007a62:	d168      	bne.n	8007b36 <UART_SetConfig+0xb9e>
 8007a64:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8007b08 <UART_SetConfig+0xb70>
 8007a68:	f04f 0900 	mov.w	r9, #0
 8007a6c:	e003      	b.n	8007a76 <UART_SetConfig+0xade>
 8007a6e:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8007b0c <UART_SetConfig+0xb74>
 8007a72:	f04f 0903 	mov.w	r9, #3
 8007a76:	0877      	lsrs	r7, r6, #1
 8007a78:	2500      	movs	r5, #0
 8007a7a:	4632      	mov	r2, r6
 8007a7c:	462b      	mov	r3, r5
 8007a7e:	eb18 0007 	adds.w	r0, r8, r7
 8007a82:	f149 0100 	adc.w	r1, r9, #0
 8007a86:	f7f8 fc27 	bl	80002d8 <__aeabi_uldivmod>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	e6b2      	b.n	80077f6 <UART_SetConfig+0x85e>
 8007a90:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8007b10 <UART_SetConfig+0xb78>
 8007a94:	f04f 0901 	mov.w	r9, #1
 8007a98:	e7ed      	b.n	8007a76 <UART_SetConfig+0xade>
 8007a9a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8007b14 <UART_SetConfig+0xb7c>
 8007a9e:	f04f 0900 	mov.w	r9, #0
 8007aa2:	e7e8      	b.n	8007a76 <UART_SetConfig+0xade>
 8007aa4:	f20f 0948 	addw	r9, pc, #72	; 0x48
 8007aa8:	e9d9 8900 	ldrd	r8, r9, [r9]
 8007aac:	e7e3      	b.n	8007a76 <UART_SetConfig+0xade>
 8007aae:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8007b18 <UART_SetConfig+0xb80>
 8007ab2:	f04f 0900 	mov.w	r9, #0
 8007ab6:	e7de      	b.n	8007a76 <UART_SetConfig+0xade>
 8007ab8:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8007b1c <UART_SetConfig+0xb84>
 8007abc:	f04f 0900 	mov.w	r9, #0
 8007ac0:	e7d9      	b.n	8007a76 <UART_SetConfig+0xade>
 8007ac2:	f20f 0934 	addw	r9, pc, #52	; 0x34
 8007ac6:	e9d9 8900 	ldrd	r8, r9, [r9]
 8007aca:	e7d4      	b.n	8007a76 <UART_SetConfig+0xade>
 8007acc:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8007b20 <UART_SetConfig+0xb88>
 8007ad0:	f04f 0900 	mov.w	r9, #0
 8007ad4:	e7cf      	b.n	8007a76 <UART_SetConfig+0xade>
 8007ad6:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8007b24 <UART_SetConfig+0xb8c>
 8007ada:	f04f 0900 	mov.w	r9, #0
 8007ade:	e7ca      	b.n	8007a76 <UART_SetConfig+0xade>
 8007ae0:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8007b28 <UART_SetConfig+0xb90>
 8007ae4:	f04f 0900 	mov.w	r9, #0
 8007ae8:	e7c5      	b.n	8007a76 <UART_SetConfig+0xade>
 8007aea:	bf00      	nop
 8007aec:	f3af 8000 	nop.w
 8007af0:	a2c2aa00 	.word	0xa2c2aa00
 8007af4:	00000000 	.word	0x00000000
 8007af8:	51615500 	.word	0x51615500
 8007afc:	00000000 	.word	0x00000000
 8007b00:	000ffcff 	.word	0x000ffcff
 8007b04:	58024400 	.word	0x58024400
 8007b08:	03d09000 	.word	0x03d09000
 8007b0c:	d0900000 	.word	0xd0900000
 8007b10:	e8480000 	.word	0xe8480000
 8007b14:	f4240000 	.word	0xf4240000
 8007b18:	7a120000 	.word	0x7a120000
 8007b1c:	61a80000 	.word	0x61a80000
 8007b20:	3d090000 	.word	0x3d090000
 8007b24:	1e848000 	.word	0x1e848000
 8007b28:	0f424000 	.word	0x0f424000
 8007b2c:	f8df 86e8 	ldr.w	r8, [pc, #1768]	; 8008218 <UART_SetConfig+0x1280>
 8007b30:	f04f 0900 	mov.w	r9, #0
 8007b34:	e79f      	b.n	8007a76 <UART_SetConfig+0xade>
 8007b36:	f8df 8730 	ldr.w	r8, [pc, #1840]	; 8008268 <UART_SetConfig+0x12d0>
 8007b3a:	f04f 0903 	mov.w	r9, #3
 8007b3e:	e79a      	b.n	8007a76 <UART_SetConfig+0xade>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b42:	b1d3      	cbz	r3, 8007b7a <UART_SetConfig+0xbe2>
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d029      	beq.n	8007b9c <UART_SetConfig+0xc04>
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d02c      	beq.n	8007ba6 <UART_SetConfig+0xc0e>
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d02f      	beq.n	8007bb0 <UART_SetConfig+0xc18>
 8007b50:	2b04      	cmp	r3, #4
 8007b52:	d032      	beq.n	8007bba <UART_SetConfig+0xc22>
 8007b54:	2b05      	cmp	r3, #5
 8007b56:	d035      	beq.n	8007bc4 <UART_SetConfig+0xc2c>
 8007b58:	2b06      	cmp	r3, #6
 8007b5a:	d038      	beq.n	8007bce <UART_SetConfig+0xc36>
 8007b5c:	2b07      	cmp	r3, #7
 8007b5e:	d03b      	beq.n	8007bd8 <UART_SetConfig+0xc40>
 8007b60:	2b08      	cmp	r3, #8
 8007b62:	d03e      	beq.n	8007be2 <UART_SetConfig+0xc4a>
 8007b64:	2b09      	cmp	r3, #9
 8007b66:	d041      	beq.n	8007bec <UART_SetConfig+0xc54>
 8007b68:	2b0a      	cmp	r3, #10
 8007b6a:	d044      	beq.n	8007bf6 <UART_SetConfig+0xc5e>
 8007b6c:	2b0b      	cmp	r3, #11
 8007b6e:	d147      	bne.n	8007c00 <UART_SetConfig+0xc68>
 8007b70:	f8df 86c4 	ldr.w	r8, [pc, #1732]	; 8008238 <UART_SetConfig+0x12a0>
 8007b74:	f04f 0900 	mov.w	r9, #0
 8007b78:	e003      	b.n	8007b82 <UART_SetConfig+0xbea>
 8007b7a:	f8df 86f0 	ldr.w	r8, [pc, #1776]	; 800826c <UART_SetConfig+0x12d4>
 8007b7e:	f04f 0900 	mov.w	r9, #0
 8007b82:	0877      	lsrs	r7, r6, #1
 8007b84:	2500      	movs	r5, #0
 8007b86:	4632      	mov	r2, r6
 8007b88:	462b      	mov	r3, r5
 8007b8a:	eb18 0007 	adds.w	r0, r8, r7
 8007b8e:	f149 0100 	adc.w	r1, r9, #0
 8007b92:	f7f8 fba1 	bl	80002d8 <__aeabi_uldivmod>
 8007b96:	4603      	mov	r3, r0
            break;
 8007b98:	4628      	mov	r0, r5
 8007b9a:	e62c      	b.n	80077f6 <UART_SetConfig+0x85e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b9c:	f8df 86d0 	ldr.w	r8, [pc, #1744]	; 8008270 <UART_SetConfig+0x12d8>
 8007ba0:	f04f 0900 	mov.w	r9, #0
 8007ba4:	e7ed      	b.n	8007b82 <UART_SetConfig+0xbea>
 8007ba6:	f8df 86cc 	ldr.w	r8, [pc, #1740]	; 8008274 <UART_SetConfig+0x12dc>
 8007baa:	f04f 0900 	mov.w	r9, #0
 8007bae:	e7e8      	b.n	8007b82 <UART_SetConfig+0xbea>
 8007bb0:	f20f 69a4 	addw	r9, pc, #1700	; 0x6a4
 8007bb4:	e9d9 8900 	ldrd	r8, r9, [r9]
 8007bb8:	e7e3      	b.n	8007b82 <UART_SetConfig+0xbea>
 8007bba:	f8df 865c 	ldr.w	r8, [pc, #1628]	; 8008218 <UART_SetConfig+0x1280>
 8007bbe:	f04f 0900 	mov.w	r9, #0
 8007bc2:	e7de      	b.n	8007b82 <UART_SetConfig+0xbea>
 8007bc4:	f8df 86b0 	ldr.w	r8, [pc, #1712]	; 8008278 <UART_SetConfig+0x12e0>
 8007bc8:	f04f 0900 	mov.w	r9, #0
 8007bcc:	e7d9      	b.n	8007b82 <UART_SetConfig+0xbea>
 8007bce:	f20f 6990 	addw	r9, pc, #1680	; 0x690
 8007bd2:	e9d9 8900 	ldrd	r8, r9, [r9]
 8007bd6:	e7d4      	b.n	8007b82 <UART_SetConfig+0xbea>
 8007bd8:	f8df 8638 	ldr.w	r8, [pc, #1592]	; 8008214 <UART_SetConfig+0x127c>
 8007bdc:	f04f 0900 	mov.w	r9, #0
 8007be0:	e7cf      	b.n	8007b82 <UART_SetConfig+0xbea>
 8007be2:	f8df 863c 	ldr.w	r8, [pc, #1596]	; 8008220 <UART_SetConfig+0x1288>
 8007be6:	f04f 0900 	mov.w	r9, #0
 8007bea:	e7ca      	b.n	8007b82 <UART_SetConfig+0xbea>
 8007bec:	f8df 8638 	ldr.w	r8, [pc, #1592]	; 8008228 <UART_SetConfig+0x1290>
 8007bf0:	f04f 0900 	mov.w	r9, #0
 8007bf4:	e7c5      	b.n	8007b82 <UART_SetConfig+0xbea>
 8007bf6:	f8df 863c 	ldr.w	r8, [pc, #1596]	; 8008234 <UART_SetConfig+0x129c>
 8007bfa:	f04f 0900 	mov.w	r9, #0
 8007bfe:	e7c0      	b.n	8007b82 <UART_SetConfig+0xbea>
 8007c00:	f8df 8668 	ldr.w	r8, [pc, #1640]	; 800826c <UART_SetConfig+0x12d4>
 8007c04:	f04f 0900 	mov.w	r9, #0
 8007c08:	e7bb      	b.n	8007b82 <UART_SetConfig+0xbea>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c0c:	b1d3      	cbz	r3, 8007c44 <UART_SetConfig+0xcac>
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d029      	beq.n	8007c66 <UART_SetConfig+0xcce>
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d02c      	beq.n	8007c70 <UART_SetConfig+0xcd8>
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	d02f      	beq.n	8007c7a <UART_SetConfig+0xce2>
 8007c1a:	2b04      	cmp	r3, #4
 8007c1c:	d032      	beq.n	8007c84 <UART_SetConfig+0xcec>
 8007c1e:	2b05      	cmp	r3, #5
 8007c20:	d035      	beq.n	8007c8e <UART_SetConfig+0xcf6>
 8007c22:	2b06      	cmp	r3, #6
 8007c24:	d038      	beq.n	8007c98 <UART_SetConfig+0xd00>
 8007c26:	2b07      	cmp	r3, #7
 8007c28:	d03b      	beq.n	8007ca2 <UART_SetConfig+0xd0a>
 8007c2a:	2b08      	cmp	r3, #8
 8007c2c:	d03e      	beq.n	8007cac <UART_SetConfig+0xd14>
 8007c2e:	2b09      	cmp	r3, #9
 8007c30:	d041      	beq.n	8007cb6 <UART_SetConfig+0xd1e>
 8007c32:	2b0a      	cmp	r3, #10
 8007c34:	d044      	beq.n	8007cc0 <UART_SetConfig+0xd28>
 8007c36:	2b0b      	cmp	r3, #11
 8007c38:	d147      	bne.n	8007cca <UART_SetConfig+0xd32>
 8007c3a:	f44f 4800 	mov.w	r8, #32768	; 0x8000
 8007c3e:	f04f 0900 	mov.w	r9, #0
 8007c42:	e003      	b.n	8007c4c <UART_SetConfig+0xcb4>
 8007c44:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
 8007c48:	f04f 0900 	mov.w	r9, #0
 8007c4c:	0877      	lsrs	r7, r6, #1
 8007c4e:	2500      	movs	r5, #0
 8007c50:	4632      	mov	r2, r6
 8007c52:	462b      	mov	r3, r5
 8007c54:	eb18 0007 	adds.w	r0, r8, r7
 8007c58:	f149 0100 	adc.w	r1, r9, #0
 8007c5c:	f7f8 fb3c 	bl	80002d8 <__aeabi_uldivmod>
 8007c60:	4603      	mov	r3, r0
            break;
 8007c62:	4628      	mov	r0, r5
 8007c64:	e5c7      	b.n	80077f6 <UART_SetConfig+0x85e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c66:	f44f 0880 	mov.w	r8, #4194304	; 0x400000
 8007c6a:	f04f 0900 	mov.w	r9, #0
 8007c6e:	e7ed      	b.n	8007c4c <UART_SetConfig+0xcb4>
 8007c70:	f44f 1800 	mov.w	r8, #2097152	; 0x200000
 8007c74:	f04f 0900 	mov.w	r9, #0
 8007c78:	e7e8      	b.n	8007c4c <UART_SetConfig+0xcb4>
 8007c7a:	f8df 8600 	ldr.w	r8, [pc, #1536]	; 800827c <UART_SetConfig+0x12e4>
 8007c7e:	f04f 0900 	mov.w	r9, #0
 8007c82:	e7e3      	b.n	8007c4c <UART_SetConfig+0xcb4>
 8007c84:	f44f 1880 	mov.w	r8, #1048576	; 0x100000
 8007c88:	f04f 0900 	mov.w	r9, #0
 8007c8c:	e7de      	b.n	8007c4c <UART_SetConfig+0xcb4>
 8007c8e:	f8df 85f0 	ldr.w	r8, [pc, #1520]	; 8008280 <UART_SetConfig+0x12e8>
 8007c92:	f04f 0900 	mov.w	r9, #0
 8007c96:	e7d9      	b.n	8007c4c <UART_SetConfig+0xcb4>
 8007c98:	f8df 85e8 	ldr.w	r8, [pc, #1512]	; 8008284 <UART_SetConfig+0x12ec>
 8007c9c:	f04f 0900 	mov.w	r9, #0
 8007ca0:	e7d4      	b.n	8007c4c <UART_SetConfig+0xcb4>
 8007ca2:	f44f 2800 	mov.w	r8, #524288	; 0x80000
 8007ca6:	f04f 0900 	mov.w	r9, #0
 8007caa:	e7cf      	b.n	8007c4c <UART_SetConfig+0xcb4>
 8007cac:	f44f 2880 	mov.w	r8, #262144	; 0x40000
 8007cb0:	f04f 0900 	mov.w	r9, #0
 8007cb4:	e7ca      	b.n	8007c4c <UART_SetConfig+0xcb4>
 8007cb6:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8007cba:	f04f 0900 	mov.w	r9, #0
 8007cbe:	e7c5      	b.n	8007c4c <UART_SetConfig+0xcb4>
 8007cc0:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 8007cc4:	f04f 0900 	mov.w	r9, #0
 8007cc8:	e7c0      	b.n	8007c4c <UART_SetConfig+0xcb4>
 8007cca:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
 8007cce:	f04f 0900 	mov.w	r9, #0
 8007cd2:	e7bb      	b.n	8007c4c <UART_SetConfig+0xcb4>
    switch (clocksource)
 8007cd4:	2d40      	cmp	r5, #64	; 0x40
 8007cd6:	f200 8254 	bhi.w	8008182 <UART_SetConfig+0x11ea>
 8007cda:	e8df f015 	tbh	[pc, r5, lsl #1]
 8007cde:	0041      	.short	0x0041
 8007ce0:	0252008f 	.word	0x0252008f
 8007ce4:	00ce0252 	.word	0x00ce0252
 8007ce8:	02520252 	.word	0x02520252
 8007cec:	010f0252 	.word	0x010f0252
 8007cf0:	02520252 	.word	0x02520252
 8007cf4:	02520252 	.word	0x02520252
 8007cf8:	02520252 	.word	0x02520252
 8007cfc:	01500252 	.word	0x01500252
 8007d00:	02520252 	.word	0x02520252
 8007d04:	02520252 	.word	0x02520252
 8007d08:	02520252 	.word	0x02520252
 8007d0c:	02520252 	.word	0x02520252
 8007d10:	02520252 	.word	0x02520252
 8007d14:	02520252 	.word	0x02520252
 8007d18:	02520252 	.word	0x02520252
 8007d1c:	01d10252 	.word	0x01d10252
 8007d20:	02520252 	.word	0x02520252
 8007d24:	02520252 	.word	0x02520252
 8007d28:	02520252 	.word	0x02520252
 8007d2c:	02520252 	.word	0x02520252
 8007d30:	02520252 	.word	0x02520252
 8007d34:	02520252 	.word	0x02520252
 8007d38:	02520252 	.word	0x02520252
 8007d3c:	02520252 	.word	0x02520252
 8007d40:	02520252 	.word	0x02520252
 8007d44:	02520252 	.word	0x02520252
 8007d48:	02520252 	.word	0x02520252
 8007d4c:	02520252 	.word	0x02520252
 8007d50:	02520252 	.word	0x02520252
 8007d54:	02520252 	.word	0x02520252
 8007d58:	02520252 	.word	0x02520252
 8007d5c:	020c0252 	.word	0x020c0252
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d60:	f7fb fe06 	bl	8003970 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d66:	b1c3      	cbz	r3, 8007d9a <UART_SetConfig+0xe02>
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d031      	beq.n	8007dd0 <UART_SetConfig+0xe38>
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d031      	beq.n	8007dd4 <UART_SetConfig+0xe3c>
 8007d70:	2b03      	cmp	r3, #3
 8007d72:	d031      	beq.n	8007dd8 <UART_SetConfig+0xe40>
 8007d74:	2b04      	cmp	r3, #4
 8007d76:	d031      	beq.n	8007ddc <UART_SetConfig+0xe44>
 8007d78:	2b05      	cmp	r3, #5
 8007d7a:	d031      	beq.n	8007de0 <UART_SetConfig+0xe48>
 8007d7c:	2b06      	cmp	r3, #6
 8007d7e:	d031      	beq.n	8007de4 <UART_SetConfig+0xe4c>
 8007d80:	2b07      	cmp	r3, #7
 8007d82:	d031      	beq.n	8007de8 <UART_SetConfig+0xe50>
 8007d84:	2b08      	cmp	r3, #8
 8007d86:	d031      	beq.n	8007dec <UART_SetConfig+0xe54>
 8007d88:	2b09      	cmp	r3, #9
 8007d8a:	d031      	beq.n	8007df0 <UART_SetConfig+0xe58>
 8007d8c:	2b0a      	cmp	r3, #10
 8007d8e:	d031      	beq.n	8007df4 <UART_SetConfig+0xe5c>
 8007d90:	2b0b      	cmp	r3, #11
 8007d92:	d131      	bne.n	8007df8 <UART_SetConfig+0xe60>
 8007d94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d98:	e000      	b.n	8007d9c <UART_SetConfig+0xe04>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	fbb0 f0f3 	udiv	r0, r0, r3
 8007da0:	6862      	ldr	r2, [r4, #4]
 8007da2:	0853      	lsrs	r3, r2, #1
 8007da4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007da8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dac:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8007dae:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007db0:	f1a3 0110 	sub.w	r1, r3, #16
 8007db4:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007db8:	4291      	cmp	r1, r2
 8007dba:	f200 843d 	bhi.w	8008638 <UART_SetConfig+0x16a0>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007dc4:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007dc8:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8007dca:	6822      	ldr	r2, [r4, #0]
 8007dcc:	60d3      	str	r3, [r2, #12]
 8007dce:	e20d      	b.n	80081ec <UART_SetConfig+0x1254>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	e7e3      	b.n	8007d9c <UART_SetConfig+0xe04>
 8007dd4:	2304      	movs	r3, #4
 8007dd6:	e7e1      	b.n	8007d9c <UART_SetConfig+0xe04>
 8007dd8:	2306      	movs	r3, #6
 8007dda:	e7df      	b.n	8007d9c <UART_SetConfig+0xe04>
 8007ddc:	2308      	movs	r3, #8
 8007dde:	e7dd      	b.n	8007d9c <UART_SetConfig+0xe04>
 8007de0:	230a      	movs	r3, #10
 8007de2:	e7db      	b.n	8007d9c <UART_SetConfig+0xe04>
 8007de4:	230c      	movs	r3, #12
 8007de6:	e7d9      	b.n	8007d9c <UART_SetConfig+0xe04>
 8007de8:	2310      	movs	r3, #16
 8007dea:	e7d7      	b.n	8007d9c <UART_SetConfig+0xe04>
 8007dec:	2320      	movs	r3, #32
 8007dee:	e7d5      	b.n	8007d9c <UART_SetConfig+0xe04>
 8007df0:	2340      	movs	r3, #64	; 0x40
 8007df2:	e7d3      	b.n	8007d9c <UART_SetConfig+0xe04>
 8007df4:	2380      	movs	r3, #128	; 0x80
 8007df6:	e7d1      	b.n	8007d9c <UART_SetConfig+0xe04>
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e7cf      	b.n	8007d9c <UART_SetConfig+0xe04>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dfc:	f7fb fdca 	bl	8003994 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e02:	b1c3      	cbz	r3, 8007e36 <UART_SetConfig+0xe9e>
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d022      	beq.n	8007e4e <UART_SetConfig+0xeb6>
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d022      	beq.n	8007e52 <UART_SetConfig+0xeba>
 8007e0c:	2b03      	cmp	r3, #3
 8007e0e:	d022      	beq.n	8007e56 <UART_SetConfig+0xebe>
 8007e10:	2b04      	cmp	r3, #4
 8007e12:	d022      	beq.n	8007e5a <UART_SetConfig+0xec2>
 8007e14:	2b05      	cmp	r3, #5
 8007e16:	d022      	beq.n	8007e5e <UART_SetConfig+0xec6>
 8007e18:	2b06      	cmp	r3, #6
 8007e1a:	d022      	beq.n	8007e62 <UART_SetConfig+0xeca>
 8007e1c:	2b07      	cmp	r3, #7
 8007e1e:	d022      	beq.n	8007e66 <UART_SetConfig+0xece>
 8007e20:	2b08      	cmp	r3, #8
 8007e22:	d022      	beq.n	8007e6a <UART_SetConfig+0xed2>
 8007e24:	2b09      	cmp	r3, #9
 8007e26:	d022      	beq.n	8007e6e <UART_SetConfig+0xed6>
 8007e28:	2b0a      	cmp	r3, #10
 8007e2a:	d022      	beq.n	8007e72 <UART_SetConfig+0xeda>
 8007e2c:	2b0b      	cmp	r3, #11
 8007e2e:	d122      	bne.n	8007e76 <UART_SetConfig+0xede>
 8007e30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e34:	e000      	b.n	8007e38 <UART_SetConfig+0xea0>
 8007e36:	2301      	movs	r3, #1
 8007e38:	fbb0 f0f3 	udiv	r0, r0, r3
 8007e3c:	6862      	ldr	r2, [r4, #4]
 8007e3e:	0853      	lsrs	r3, r2, #1
 8007e40:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007e44:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e48:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e4a:	2000      	movs	r0, #0
        break;
 8007e4c:	e7b0      	b.n	8007db0 <UART_SetConfig+0xe18>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e4e:	2302      	movs	r3, #2
 8007e50:	e7f2      	b.n	8007e38 <UART_SetConfig+0xea0>
 8007e52:	2304      	movs	r3, #4
 8007e54:	e7f0      	b.n	8007e38 <UART_SetConfig+0xea0>
 8007e56:	2306      	movs	r3, #6
 8007e58:	e7ee      	b.n	8007e38 <UART_SetConfig+0xea0>
 8007e5a:	2308      	movs	r3, #8
 8007e5c:	e7ec      	b.n	8007e38 <UART_SetConfig+0xea0>
 8007e5e:	230a      	movs	r3, #10
 8007e60:	e7ea      	b.n	8007e38 <UART_SetConfig+0xea0>
 8007e62:	230c      	movs	r3, #12
 8007e64:	e7e8      	b.n	8007e38 <UART_SetConfig+0xea0>
 8007e66:	2310      	movs	r3, #16
 8007e68:	e7e6      	b.n	8007e38 <UART_SetConfig+0xea0>
 8007e6a:	2320      	movs	r3, #32
 8007e6c:	e7e4      	b.n	8007e38 <UART_SetConfig+0xea0>
 8007e6e:	2340      	movs	r3, #64	; 0x40
 8007e70:	e7e2      	b.n	8007e38 <UART_SetConfig+0xea0>
 8007e72:	2380      	movs	r3, #128	; 0x80
 8007e74:	e7e0      	b.n	8007e38 <UART_SetConfig+0xea0>
 8007e76:	2301      	movs	r3, #1
 8007e78:	e7de      	b.n	8007e38 <UART_SetConfig+0xea0>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e7a:	a803      	add	r0, sp, #12
 8007e7c:	f7fc fb52 	bl	8004524 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e80:	9b04      	ldr	r3, [sp, #16]
 8007e82:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007e84:	b1c2      	cbz	r2, 8007eb8 <UART_SetConfig+0xf20>
 8007e86:	2a01      	cmp	r2, #1
 8007e88:	d022      	beq.n	8007ed0 <UART_SetConfig+0xf38>
 8007e8a:	2a02      	cmp	r2, #2
 8007e8c:	d022      	beq.n	8007ed4 <UART_SetConfig+0xf3c>
 8007e8e:	2a03      	cmp	r2, #3
 8007e90:	d022      	beq.n	8007ed8 <UART_SetConfig+0xf40>
 8007e92:	2a04      	cmp	r2, #4
 8007e94:	d022      	beq.n	8007edc <UART_SetConfig+0xf44>
 8007e96:	2a05      	cmp	r2, #5
 8007e98:	d022      	beq.n	8007ee0 <UART_SetConfig+0xf48>
 8007e9a:	2a06      	cmp	r2, #6
 8007e9c:	d022      	beq.n	8007ee4 <UART_SetConfig+0xf4c>
 8007e9e:	2a07      	cmp	r2, #7
 8007ea0:	d022      	beq.n	8007ee8 <UART_SetConfig+0xf50>
 8007ea2:	2a08      	cmp	r2, #8
 8007ea4:	d022      	beq.n	8007eec <UART_SetConfig+0xf54>
 8007ea6:	2a09      	cmp	r2, #9
 8007ea8:	d022      	beq.n	8007ef0 <UART_SetConfig+0xf58>
 8007eaa:	2a0a      	cmp	r2, #10
 8007eac:	d022      	beq.n	8007ef4 <UART_SetConfig+0xf5c>
 8007eae:	2a0b      	cmp	r2, #11
 8007eb0:	d122      	bne.n	8007ef8 <UART_SetConfig+0xf60>
 8007eb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007eb6:	e000      	b.n	8007eba <UART_SetConfig+0xf22>
 8007eb8:	2201      	movs	r2, #1
 8007eba:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ebe:	6861      	ldr	r1, [r4, #4]
 8007ec0:	084b      	lsrs	r3, r1, #1
 8007ec2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8007ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007eca:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ecc:	2000      	movs	r0, #0
        break;
 8007ece:	e76f      	b.n	8007db0 <UART_SetConfig+0xe18>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	e7f2      	b.n	8007eba <UART_SetConfig+0xf22>
 8007ed4:	2204      	movs	r2, #4
 8007ed6:	e7f0      	b.n	8007eba <UART_SetConfig+0xf22>
 8007ed8:	2206      	movs	r2, #6
 8007eda:	e7ee      	b.n	8007eba <UART_SetConfig+0xf22>
 8007edc:	2208      	movs	r2, #8
 8007ede:	e7ec      	b.n	8007eba <UART_SetConfig+0xf22>
 8007ee0:	220a      	movs	r2, #10
 8007ee2:	e7ea      	b.n	8007eba <UART_SetConfig+0xf22>
 8007ee4:	220c      	movs	r2, #12
 8007ee6:	e7e8      	b.n	8007eba <UART_SetConfig+0xf22>
 8007ee8:	2210      	movs	r2, #16
 8007eea:	e7e6      	b.n	8007eba <UART_SetConfig+0xf22>
 8007eec:	2220      	movs	r2, #32
 8007eee:	e7e4      	b.n	8007eba <UART_SetConfig+0xf22>
 8007ef0:	2240      	movs	r2, #64	; 0x40
 8007ef2:	e7e2      	b.n	8007eba <UART_SetConfig+0xf22>
 8007ef4:	2280      	movs	r2, #128	; 0x80
 8007ef6:	e7e0      	b.n	8007eba <UART_SetConfig+0xf22>
 8007ef8:	2201      	movs	r2, #1
 8007efa:	e7de      	b.n	8007eba <UART_SetConfig+0xf22>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007efc:	4668      	mov	r0, sp
 8007efe:	f7fc fc0f 	bl	8004720 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f02:	9b01      	ldr	r3, [sp, #4]
 8007f04:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007f06:	b1c2      	cbz	r2, 8007f3a <UART_SetConfig+0xfa2>
 8007f08:	2a01      	cmp	r2, #1
 8007f0a:	d022      	beq.n	8007f52 <UART_SetConfig+0xfba>
 8007f0c:	2a02      	cmp	r2, #2
 8007f0e:	d022      	beq.n	8007f56 <UART_SetConfig+0xfbe>
 8007f10:	2a03      	cmp	r2, #3
 8007f12:	d022      	beq.n	8007f5a <UART_SetConfig+0xfc2>
 8007f14:	2a04      	cmp	r2, #4
 8007f16:	d022      	beq.n	8007f5e <UART_SetConfig+0xfc6>
 8007f18:	2a05      	cmp	r2, #5
 8007f1a:	d022      	beq.n	8007f62 <UART_SetConfig+0xfca>
 8007f1c:	2a06      	cmp	r2, #6
 8007f1e:	d022      	beq.n	8007f66 <UART_SetConfig+0xfce>
 8007f20:	2a07      	cmp	r2, #7
 8007f22:	d022      	beq.n	8007f6a <UART_SetConfig+0xfd2>
 8007f24:	2a08      	cmp	r2, #8
 8007f26:	d022      	beq.n	8007f6e <UART_SetConfig+0xfd6>
 8007f28:	2a09      	cmp	r2, #9
 8007f2a:	d022      	beq.n	8007f72 <UART_SetConfig+0xfda>
 8007f2c:	2a0a      	cmp	r2, #10
 8007f2e:	d022      	beq.n	8007f76 <UART_SetConfig+0xfde>
 8007f30:	2a0b      	cmp	r2, #11
 8007f32:	d122      	bne.n	8007f7a <UART_SetConfig+0xfe2>
 8007f34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f38:	e000      	b.n	8007f3c <UART_SetConfig+0xfa4>
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f40:	6861      	ldr	r1, [r4, #4]
 8007f42:	084b      	lsrs	r3, r1, #1
 8007f44:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8007f48:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f4c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f4e:	2000      	movs	r0, #0
        break;
 8007f50:	e72e      	b.n	8007db0 <UART_SetConfig+0xe18>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f52:	2202      	movs	r2, #2
 8007f54:	e7f2      	b.n	8007f3c <UART_SetConfig+0xfa4>
 8007f56:	2204      	movs	r2, #4
 8007f58:	e7f0      	b.n	8007f3c <UART_SetConfig+0xfa4>
 8007f5a:	2206      	movs	r2, #6
 8007f5c:	e7ee      	b.n	8007f3c <UART_SetConfig+0xfa4>
 8007f5e:	2208      	movs	r2, #8
 8007f60:	e7ec      	b.n	8007f3c <UART_SetConfig+0xfa4>
 8007f62:	220a      	movs	r2, #10
 8007f64:	e7ea      	b.n	8007f3c <UART_SetConfig+0xfa4>
 8007f66:	220c      	movs	r2, #12
 8007f68:	e7e8      	b.n	8007f3c <UART_SetConfig+0xfa4>
 8007f6a:	2210      	movs	r2, #16
 8007f6c:	e7e6      	b.n	8007f3c <UART_SetConfig+0xfa4>
 8007f6e:	2220      	movs	r2, #32
 8007f70:	e7e4      	b.n	8007f3c <UART_SetConfig+0xfa4>
 8007f72:	2240      	movs	r2, #64	; 0x40
 8007f74:	e7e2      	b.n	8007f3c <UART_SetConfig+0xfa4>
 8007f76:	2280      	movs	r2, #128	; 0x80
 8007f78:	e7e0      	b.n	8007f3c <UART_SetConfig+0xfa4>
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	e7de      	b.n	8007f3c <UART_SetConfig+0xfa4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f7e:	4ba4      	ldr	r3, [pc, #656]	; (8008210 <UART_SetConfig+0x1278>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f013 0f20 	tst.w	r3, #32
 8007f86:	d042      	beq.n	800800e <UART_SetConfig+0x1076>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f88:	4ba1      	ldr	r3, [pc, #644]	; (8008210 <UART_SetConfig+0x1278>)
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8007f90:	4ba0      	ldr	r3, [pc, #640]	; (8008214 <UART_SetConfig+0x127c>)
 8007f92:	40d3      	lsrs	r3, r2
 8007f94:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007f96:	b1d2      	cbz	r2, 8007fce <UART_SetConfig+0x1036>
 8007f98:	2a01      	cmp	r2, #1
 8007f9a:	d024      	beq.n	8007fe6 <UART_SetConfig+0x104e>
 8007f9c:	2a02      	cmp	r2, #2
 8007f9e:	d024      	beq.n	8007fea <UART_SetConfig+0x1052>
 8007fa0:	2a03      	cmp	r2, #3
 8007fa2:	d024      	beq.n	8007fee <UART_SetConfig+0x1056>
 8007fa4:	2a04      	cmp	r2, #4
 8007fa6:	d024      	beq.n	8007ff2 <UART_SetConfig+0x105a>
 8007fa8:	2a05      	cmp	r2, #5
 8007faa:	d024      	beq.n	8007ff6 <UART_SetConfig+0x105e>
 8007fac:	2a06      	cmp	r2, #6
 8007fae:	d024      	beq.n	8007ffa <UART_SetConfig+0x1062>
 8007fb0:	2a07      	cmp	r2, #7
 8007fb2:	d024      	beq.n	8007ffe <UART_SetConfig+0x1066>
 8007fb4:	2a08      	cmp	r2, #8
 8007fb6:	d024      	beq.n	8008002 <UART_SetConfig+0x106a>
 8007fb8:	2a09      	cmp	r2, #9
 8007fba:	d024      	beq.n	8008006 <UART_SetConfig+0x106e>
 8007fbc:	2a0a      	cmp	r2, #10
 8007fbe:	d024      	beq.n	800800a <UART_SetConfig+0x1072>
 8007fc0:	2a0b      	cmp	r2, #11
 8007fc2:	d001      	beq.n	8007fc8 <UART_SetConfig+0x1030>
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	e003      	b.n	8007fd0 <UART_SetConfig+0x1038>
 8007fc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fcc:	e000      	b.n	8007fd0 <UART_SetConfig+0x1038>
 8007fce:	2201      	movs	r2, #1
 8007fd0:	fbb3 f2f2 	udiv	r2, r3, r2
 8007fd4:	6861      	ldr	r1, [r4, #4]
 8007fd6:	084b      	lsrs	r3, r1, #1
 8007fd8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8007fdc:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fe0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	e6e4      	b.n	8007db0 <UART_SetConfig+0xe18>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	e7f2      	b.n	8007fd0 <UART_SetConfig+0x1038>
 8007fea:	2204      	movs	r2, #4
 8007fec:	e7f0      	b.n	8007fd0 <UART_SetConfig+0x1038>
 8007fee:	2206      	movs	r2, #6
 8007ff0:	e7ee      	b.n	8007fd0 <UART_SetConfig+0x1038>
 8007ff2:	2208      	movs	r2, #8
 8007ff4:	e7ec      	b.n	8007fd0 <UART_SetConfig+0x1038>
 8007ff6:	220a      	movs	r2, #10
 8007ff8:	e7ea      	b.n	8007fd0 <UART_SetConfig+0x1038>
 8007ffa:	220c      	movs	r2, #12
 8007ffc:	e7e8      	b.n	8007fd0 <UART_SetConfig+0x1038>
 8007ffe:	2210      	movs	r2, #16
 8008000:	e7e6      	b.n	8007fd0 <UART_SetConfig+0x1038>
 8008002:	2220      	movs	r2, #32
 8008004:	e7e4      	b.n	8007fd0 <UART_SetConfig+0x1038>
 8008006:	2240      	movs	r2, #64	; 0x40
 8008008:	e7e2      	b.n	8007fd0 <UART_SetConfig+0x1038>
 800800a:	2280      	movs	r2, #128	; 0x80
 800800c:	e7e0      	b.n	8007fd0 <UART_SetConfig+0x1038>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800800e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008010:	b1cb      	cbz	r3, 8008046 <UART_SetConfig+0x10ae>
 8008012:	2b01      	cmp	r3, #1
 8008014:	d020      	beq.n	8008058 <UART_SetConfig+0x10c0>
 8008016:	2b02      	cmp	r3, #2
 8008018:	d020      	beq.n	800805c <UART_SetConfig+0x10c4>
 800801a:	2b03      	cmp	r3, #3
 800801c:	d020      	beq.n	8008060 <UART_SetConfig+0x10c8>
 800801e:	2b04      	cmp	r3, #4
 8008020:	d020      	beq.n	8008064 <UART_SetConfig+0x10cc>
 8008022:	2b05      	cmp	r3, #5
 8008024:	d020      	beq.n	8008068 <UART_SetConfig+0x10d0>
 8008026:	2b06      	cmp	r3, #6
 8008028:	d020      	beq.n	800806c <UART_SetConfig+0x10d4>
 800802a:	2b07      	cmp	r3, #7
 800802c:	d020      	beq.n	8008070 <UART_SetConfig+0x10d8>
 800802e:	2b08      	cmp	r3, #8
 8008030:	d020      	beq.n	8008074 <UART_SetConfig+0x10dc>
 8008032:	2b09      	cmp	r3, #9
 8008034:	d020      	beq.n	8008078 <UART_SetConfig+0x10e0>
 8008036:	2b0a      	cmp	r3, #10
 8008038:	d020      	beq.n	800807c <UART_SetConfig+0x10e4>
 800803a:	2b0b      	cmp	r3, #11
 800803c:	d001      	beq.n	8008042 <UART_SetConfig+0x10aa>
 800803e:	4b76      	ldr	r3, [pc, #472]	; (8008218 <UART_SetConfig+0x1280>)
 8008040:	e002      	b.n	8008048 <UART_SetConfig+0x10b0>
 8008042:	4b76      	ldr	r3, [pc, #472]	; (800821c <UART_SetConfig+0x1284>)
 8008044:	e000      	b.n	8008048 <UART_SetConfig+0x10b0>
 8008046:	4b74      	ldr	r3, [pc, #464]	; (8008218 <UART_SetConfig+0x1280>)
 8008048:	6862      	ldr	r2, [r4, #4]
 800804a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800804e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008052:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8008054:	2000      	movs	r0, #0
 8008056:	e6ab      	b.n	8007db0 <UART_SetConfig+0xe18>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008058:	4b6e      	ldr	r3, [pc, #440]	; (8008214 <UART_SetConfig+0x127c>)
 800805a:	e7f5      	b.n	8008048 <UART_SetConfig+0x10b0>
 800805c:	4b70      	ldr	r3, [pc, #448]	; (8008220 <UART_SetConfig+0x1288>)
 800805e:	e7f3      	b.n	8008048 <UART_SetConfig+0x10b0>
 8008060:	4b70      	ldr	r3, [pc, #448]	; (8008224 <UART_SetConfig+0x128c>)
 8008062:	e7f1      	b.n	8008048 <UART_SetConfig+0x10b0>
 8008064:	4b70      	ldr	r3, [pc, #448]	; (8008228 <UART_SetConfig+0x1290>)
 8008066:	e7ef      	b.n	8008048 <UART_SetConfig+0x10b0>
 8008068:	4b70      	ldr	r3, [pc, #448]	; (800822c <UART_SetConfig+0x1294>)
 800806a:	e7ed      	b.n	8008048 <UART_SetConfig+0x10b0>
 800806c:	4b70      	ldr	r3, [pc, #448]	; (8008230 <UART_SetConfig+0x1298>)
 800806e:	e7eb      	b.n	8008048 <UART_SetConfig+0x10b0>
 8008070:	4b70      	ldr	r3, [pc, #448]	; (8008234 <UART_SetConfig+0x129c>)
 8008072:	e7e9      	b.n	8008048 <UART_SetConfig+0x10b0>
 8008074:	4b70      	ldr	r3, [pc, #448]	; (8008238 <UART_SetConfig+0x12a0>)
 8008076:	e7e7      	b.n	8008048 <UART_SetConfig+0x10b0>
 8008078:	4b70      	ldr	r3, [pc, #448]	; (800823c <UART_SetConfig+0x12a4>)
 800807a:	e7e5      	b.n	8008048 <UART_SetConfig+0x10b0>
 800807c:	4b70      	ldr	r3, [pc, #448]	; (8008240 <UART_SetConfig+0x12a8>)
 800807e:	e7e3      	b.n	8008048 <UART_SetConfig+0x10b0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008080:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008082:	b1c3      	cbz	r3, 80080b6 <UART_SetConfig+0x111e>
 8008084:	2b01      	cmp	r3, #1
 8008086:	d01f      	beq.n	80080c8 <UART_SetConfig+0x1130>
 8008088:	2b02      	cmp	r3, #2
 800808a:	d01f      	beq.n	80080cc <UART_SetConfig+0x1134>
 800808c:	2b03      	cmp	r3, #3
 800808e:	d01f      	beq.n	80080d0 <UART_SetConfig+0x1138>
 8008090:	2b04      	cmp	r3, #4
 8008092:	d01f      	beq.n	80080d4 <UART_SetConfig+0x113c>
 8008094:	2b05      	cmp	r3, #5
 8008096:	d01f      	beq.n	80080d8 <UART_SetConfig+0x1140>
 8008098:	2b06      	cmp	r3, #6
 800809a:	d01f      	beq.n	80080dc <UART_SetConfig+0x1144>
 800809c:	2b07      	cmp	r3, #7
 800809e:	d01f      	beq.n	80080e0 <UART_SetConfig+0x1148>
 80080a0:	2b08      	cmp	r3, #8
 80080a2:	d01f      	beq.n	80080e4 <UART_SetConfig+0x114c>
 80080a4:	2b09      	cmp	r3, #9
 80080a6:	d01f      	beq.n	80080e8 <UART_SetConfig+0x1150>
 80080a8:	2b0a      	cmp	r3, #10
 80080aa:	d01f      	beq.n	80080ec <UART_SetConfig+0x1154>
 80080ac:	2b0b      	cmp	r3, #11
 80080ae:	d120      	bne.n	80080f2 <UART_SetConfig+0x115a>
 80080b0:	f647 2312 	movw	r3, #31250	; 0x7a12
 80080b4:	e000      	b.n	80080b8 <UART_SetConfig+0x1120>
 80080b6:	4b5f      	ldr	r3, [pc, #380]	; (8008234 <UART_SetConfig+0x129c>)
 80080b8:	6862      	ldr	r2, [r4, #4]
 80080ba:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80080be:	fbb3 f3f2 	udiv	r3, r3, r2
 80080c2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80080c4:	2000      	movs	r0, #0
        break;
 80080c6:	e673      	b.n	8007db0 <UART_SetConfig+0xe18>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080c8:	4b5b      	ldr	r3, [pc, #364]	; (8008238 <UART_SetConfig+0x12a0>)
 80080ca:	e7f5      	b.n	80080b8 <UART_SetConfig+0x1120>
 80080cc:	4b5b      	ldr	r3, [pc, #364]	; (800823c <UART_SetConfig+0x12a4>)
 80080ce:	e7f3      	b.n	80080b8 <UART_SetConfig+0x1120>
 80080d0:	4b5c      	ldr	r3, [pc, #368]	; (8008244 <UART_SetConfig+0x12ac>)
 80080d2:	e7f1      	b.n	80080b8 <UART_SetConfig+0x1120>
 80080d4:	4b5a      	ldr	r3, [pc, #360]	; (8008240 <UART_SetConfig+0x12a8>)
 80080d6:	e7ef      	b.n	80080b8 <UART_SetConfig+0x1120>
 80080d8:	4b5b      	ldr	r3, [pc, #364]	; (8008248 <UART_SetConfig+0x12b0>)
 80080da:	e7ed      	b.n	80080b8 <UART_SetConfig+0x1120>
 80080dc:	4b5b      	ldr	r3, [pc, #364]	; (800824c <UART_SetConfig+0x12b4>)
 80080de:	e7eb      	b.n	80080b8 <UART_SetConfig+0x1120>
 80080e0:	4b4e      	ldr	r3, [pc, #312]	; (800821c <UART_SetConfig+0x1284>)
 80080e2:	e7e9      	b.n	80080b8 <UART_SetConfig+0x1120>
 80080e4:	4b5a      	ldr	r3, [pc, #360]	; (8008250 <UART_SetConfig+0x12b8>)
 80080e6:	e7e7      	b.n	80080b8 <UART_SetConfig+0x1120>
 80080e8:	4b5a      	ldr	r3, [pc, #360]	; (8008254 <UART_SetConfig+0x12bc>)
 80080ea:	e7e5      	b.n	80080b8 <UART_SetConfig+0x1120>
 80080ec:	f24f 4324 	movw	r3, #62500	; 0xf424
 80080f0:	e7e2      	b.n	80080b8 <UART_SetConfig+0x1120>
 80080f2:	4b50      	ldr	r3, [pc, #320]	; (8008234 <UART_SetConfig+0x129c>)
 80080f4:	e7e0      	b.n	80080b8 <UART_SetConfig+0x1120>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080f8:	b1c3      	cbz	r3, 800812c <UART_SetConfig+0x1194>
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d020      	beq.n	8008140 <UART_SetConfig+0x11a8>
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d021      	beq.n	8008146 <UART_SetConfig+0x11ae>
 8008102:	2b03      	cmp	r3, #3
 8008104:	d022      	beq.n	800814c <UART_SetConfig+0x11b4>
 8008106:	2b04      	cmp	r3, #4
 8008108:	d023      	beq.n	8008152 <UART_SetConfig+0x11ba>
 800810a:	2b05      	cmp	r3, #5
 800810c:	d024      	beq.n	8008158 <UART_SetConfig+0x11c0>
 800810e:	2b06      	cmp	r3, #6
 8008110:	d025      	beq.n	800815e <UART_SetConfig+0x11c6>
 8008112:	2b07      	cmp	r3, #7
 8008114:	d026      	beq.n	8008164 <UART_SetConfig+0x11cc>
 8008116:	2b08      	cmp	r3, #8
 8008118:	d027      	beq.n	800816a <UART_SetConfig+0x11d2>
 800811a:	2b09      	cmp	r3, #9
 800811c:	d028      	beq.n	8008170 <UART_SetConfig+0x11d8>
 800811e:	2b0a      	cmp	r3, #10
 8008120:	d029      	beq.n	8008176 <UART_SetConfig+0x11de>
 8008122:	2b0b      	cmp	r3, #11
 8008124:	d12a      	bne.n	800817c <UART_SetConfig+0x11e4>
 8008126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800812a:	e001      	b.n	8008130 <UART_SetConfig+0x1198>
 800812c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008130:	6862      	ldr	r2, [r4, #4]
 8008132:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008136:	fbb3 f3f2 	udiv	r3, r3, r2
 800813a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800813c:	2000      	movs	r0, #0
        break;
 800813e:	e637      	b.n	8007db0 <UART_SetConfig+0xe18>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008144:	e7f4      	b.n	8008130 <UART_SetConfig+0x1198>
 8008146:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800814a:	e7f1      	b.n	8008130 <UART_SetConfig+0x1198>
 800814c:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8008150:	e7ee      	b.n	8008130 <UART_SetConfig+0x1198>
 8008152:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008156:	e7eb      	b.n	8008130 <UART_SetConfig+0x1198>
 8008158:	f641 1398 	movw	r3, #6552	; 0x1998
 800815c:	e7e8      	b.n	8008130 <UART_SetConfig+0x1198>
 800815e:	f241 5354 	movw	r3, #5460	; 0x1554
 8008162:	e7e5      	b.n	8008130 <UART_SetConfig+0x1198>
 8008164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008168:	e7e2      	b.n	8008130 <UART_SetConfig+0x1198>
 800816a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800816e:	e7df      	b.n	8008130 <UART_SetConfig+0x1198>
 8008170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008174:	e7dc      	b.n	8008130 <UART_SetConfig+0x1198>
 8008176:	f44f 7300 	mov.w	r3, #512	; 0x200
 800817a:	e7d9      	b.n	8008130 <UART_SetConfig+0x1198>
 800817c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008180:	e7d6      	b.n	8008130 <UART_SetConfig+0x1198>
        ret = HAL_ERROR;
 8008182:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8008184:	2300      	movs	r3, #0
 8008186:	e613      	b.n	8007db0 <UART_SetConfig+0xe18>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008188:	f7fb fbf2 	bl	8003970 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800818c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800818e:	b1d3      	cbz	r3, 80081c6 <UART_SetConfig+0x122e>
 8008190:	2b01      	cmp	r3, #1
 8008192:	d036      	beq.n	8008202 <UART_SetConfig+0x126a>
 8008194:	2b02      	cmp	r3, #2
 8008196:	d036      	beq.n	8008206 <UART_SetConfig+0x126e>
 8008198:	2b03      	cmp	r3, #3
 800819a:	d036      	beq.n	800820a <UART_SetConfig+0x1272>
 800819c:	2b04      	cmp	r3, #4
 800819e:	d073      	beq.n	8008288 <UART_SetConfig+0x12f0>
 80081a0:	2b05      	cmp	r3, #5
 80081a2:	d073      	beq.n	800828c <UART_SetConfig+0x12f4>
 80081a4:	2b06      	cmp	r3, #6
 80081a6:	d073      	beq.n	8008290 <UART_SetConfig+0x12f8>
 80081a8:	2b07      	cmp	r3, #7
 80081aa:	d073      	beq.n	8008294 <UART_SetConfig+0x12fc>
 80081ac:	2b08      	cmp	r3, #8
 80081ae:	d073      	beq.n	8008298 <UART_SetConfig+0x1300>
 80081b0:	2b09      	cmp	r3, #9
 80081b2:	d073      	beq.n	800829c <UART_SetConfig+0x1304>
 80081b4:	2b0a      	cmp	r3, #10
 80081b6:	d073      	beq.n	80082a0 <UART_SetConfig+0x1308>
 80081b8:	2b0b      	cmp	r3, #11
 80081ba:	d001      	beq.n	80081c0 <UART_SetConfig+0x1228>
 80081bc:	2301      	movs	r3, #1
 80081be:	e003      	b.n	80081c8 <UART_SetConfig+0x1230>
 80081c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081c4:	e000      	b.n	80081c8 <UART_SetConfig+0x1230>
 80081c6:	2301      	movs	r3, #1
 80081c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80081cc:	6862      	ldr	r2, [r4, #4]
 80081ce:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80081d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80081d6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80081d8:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081da:	f1a3 0110 	sub.w	r1, r3, #16
 80081de:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80081e2:	4291      	cmp	r1, r2
 80081e4:	f200 822a 	bhi.w	800863c <UART_SetConfig+0x16a4>
    {
      huart->Instance->BRR = usartdiv;
 80081e8:	6822      	ldr	r2, [r4, #0]
 80081ea:	60d3      	str	r3, [r2, #12]
      ret = HAL_ERROR;
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80081ec:	2301      	movs	r3, #1
 80081ee:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80081f2:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80081f6:	2300      	movs	r3, #0
 80081f8:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 80081fa:	6723      	str	r3, [r4, #112]	; 0x70

  return ret;
}
 80081fc:	b007      	add	sp, #28
 80081fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008202:	2302      	movs	r3, #2
 8008204:	e7e0      	b.n	80081c8 <UART_SetConfig+0x1230>
 8008206:	2304      	movs	r3, #4
 8008208:	e7de      	b.n	80081c8 <UART_SetConfig+0x1230>
 800820a:	2306      	movs	r3, #6
 800820c:	e7dc      	b.n	80081c8 <UART_SetConfig+0x1230>
 800820e:	bf00      	nop
 8008210:	58024400 	.word	0x58024400
 8008214:	03d09000 	.word	0x03d09000
 8008218:	07a12000 	.word	0x07a12000
 800821c:	0007a120 	.word	0x0007a120
 8008220:	01e84800 	.word	0x01e84800
 8008224:	01458554 	.word	0x01458554
 8008228:	00f42400 	.word	0x00f42400
 800822c:	00c35000 	.word	0x00c35000
 8008230:	00a2c2aa 	.word	0x00a2c2aa
 8008234:	007a1200 	.word	0x007a1200
 8008238:	003d0900 	.word	0x003d0900
 800823c:	001e8480 	.word	0x001e8480
 8008240:	000f4240 	.word	0x000f4240
 8008244:	00145854 	.word	0x00145854
 8008248:	000c3500 	.word	0x000c3500
 800824c:	000a2c2a 	.word	0x000a2c2a
 8008250:	0003d090 	.word	0x0003d090
 8008254:	0001e848 	.word	0x0001e848
 8008258:	0a2c2a00 	.word	0x0a2c2a00
 800825c:	00000000 	.word	0x00000000
 8008260:	05161500 	.word	0x05161500
 8008264:	00000000 	.word	0x00000000
 8008268:	d0900000 	.word	0xd0900000
 800826c:	3d090000 	.word	0x3d090000
 8008270:	1e848000 	.word	0x1e848000
 8008274:	0f424000 	.word	0x0f424000
 8008278:	061a8000 	.word	0x061a8000
 800827c:	00155500 	.word	0x00155500
 8008280:	000ccc00 	.word	0x000ccc00
 8008284:	000aaa00 	.word	0x000aaa00
 8008288:	2308      	movs	r3, #8
 800828a:	e79d      	b.n	80081c8 <UART_SetConfig+0x1230>
 800828c:	230a      	movs	r3, #10
 800828e:	e79b      	b.n	80081c8 <UART_SetConfig+0x1230>
 8008290:	230c      	movs	r3, #12
 8008292:	e799      	b.n	80081c8 <UART_SetConfig+0x1230>
 8008294:	2310      	movs	r3, #16
 8008296:	e797      	b.n	80081c8 <UART_SetConfig+0x1230>
 8008298:	2320      	movs	r3, #32
 800829a:	e795      	b.n	80081c8 <UART_SetConfig+0x1230>
 800829c:	2340      	movs	r3, #64	; 0x40
 800829e:	e793      	b.n	80081c8 <UART_SetConfig+0x1230>
 80082a0:	2380      	movs	r3, #128	; 0x80
 80082a2:	e791      	b.n	80081c8 <UART_SetConfig+0x1230>
        pclk = HAL_RCC_GetPCLK2Freq();
 80082a4:	f7fb fb76 	bl	8003994 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082aa:	b1d3      	cbz	r3, 80082e2 <UART_SetConfig+0x134a>
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d023      	beq.n	80082f8 <UART_SetConfig+0x1360>
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d023      	beq.n	80082fc <UART_SetConfig+0x1364>
 80082b4:	2b03      	cmp	r3, #3
 80082b6:	d023      	beq.n	8008300 <UART_SetConfig+0x1368>
 80082b8:	2b04      	cmp	r3, #4
 80082ba:	d023      	beq.n	8008304 <UART_SetConfig+0x136c>
 80082bc:	2b05      	cmp	r3, #5
 80082be:	d023      	beq.n	8008308 <UART_SetConfig+0x1370>
 80082c0:	2b06      	cmp	r3, #6
 80082c2:	d023      	beq.n	800830c <UART_SetConfig+0x1374>
 80082c4:	2b07      	cmp	r3, #7
 80082c6:	d023      	beq.n	8008310 <UART_SetConfig+0x1378>
 80082c8:	2b08      	cmp	r3, #8
 80082ca:	d023      	beq.n	8008314 <UART_SetConfig+0x137c>
 80082cc:	2b09      	cmp	r3, #9
 80082ce:	d023      	beq.n	8008318 <UART_SetConfig+0x1380>
 80082d0:	2b0a      	cmp	r3, #10
 80082d2:	d023      	beq.n	800831c <UART_SetConfig+0x1384>
 80082d4:	2b0b      	cmp	r3, #11
 80082d6:	d001      	beq.n	80082dc <UART_SetConfig+0x1344>
 80082d8:	2301      	movs	r3, #1
 80082da:	e003      	b.n	80082e4 <UART_SetConfig+0x134c>
 80082dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082e0:	e000      	b.n	80082e4 <UART_SetConfig+0x134c>
 80082e2:	2301      	movs	r3, #1
 80082e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80082e8:	6862      	ldr	r2, [r4, #4]
 80082ea:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80082ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80082f2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80082f4:	2000      	movs	r0, #0
        break;
 80082f6:	e770      	b.n	80081da <UART_SetConfig+0x1242>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082f8:	2302      	movs	r3, #2
 80082fa:	e7f3      	b.n	80082e4 <UART_SetConfig+0x134c>
 80082fc:	2304      	movs	r3, #4
 80082fe:	e7f1      	b.n	80082e4 <UART_SetConfig+0x134c>
 8008300:	2306      	movs	r3, #6
 8008302:	e7ef      	b.n	80082e4 <UART_SetConfig+0x134c>
 8008304:	2308      	movs	r3, #8
 8008306:	e7ed      	b.n	80082e4 <UART_SetConfig+0x134c>
 8008308:	230a      	movs	r3, #10
 800830a:	e7eb      	b.n	80082e4 <UART_SetConfig+0x134c>
 800830c:	230c      	movs	r3, #12
 800830e:	e7e9      	b.n	80082e4 <UART_SetConfig+0x134c>
 8008310:	2310      	movs	r3, #16
 8008312:	e7e7      	b.n	80082e4 <UART_SetConfig+0x134c>
 8008314:	2320      	movs	r3, #32
 8008316:	e7e5      	b.n	80082e4 <UART_SetConfig+0x134c>
 8008318:	2340      	movs	r3, #64	; 0x40
 800831a:	e7e3      	b.n	80082e4 <UART_SetConfig+0x134c>
 800831c:	2380      	movs	r3, #128	; 0x80
 800831e:	e7e1      	b.n	80082e4 <UART_SetConfig+0x134c>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008320:	a803      	add	r0, sp, #12
 8008322:	f7fc f8ff 	bl	8004524 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008326:	9b04      	ldr	r3, [sp, #16]
 8008328:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800832a:	b1d2      	cbz	r2, 8008362 <UART_SetConfig+0x13ca>
 800832c:	2a01      	cmp	r2, #1
 800832e:	d023      	beq.n	8008378 <UART_SetConfig+0x13e0>
 8008330:	2a02      	cmp	r2, #2
 8008332:	d023      	beq.n	800837c <UART_SetConfig+0x13e4>
 8008334:	2a03      	cmp	r2, #3
 8008336:	d023      	beq.n	8008380 <UART_SetConfig+0x13e8>
 8008338:	2a04      	cmp	r2, #4
 800833a:	d023      	beq.n	8008384 <UART_SetConfig+0x13ec>
 800833c:	2a05      	cmp	r2, #5
 800833e:	d023      	beq.n	8008388 <UART_SetConfig+0x13f0>
 8008340:	2a06      	cmp	r2, #6
 8008342:	d023      	beq.n	800838c <UART_SetConfig+0x13f4>
 8008344:	2a07      	cmp	r2, #7
 8008346:	d023      	beq.n	8008390 <UART_SetConfig+0x13f8>
 8008348:	2a08      	cmp	r2, #8
 800834a:	d023      	beq.n	8008394 <UART_SetConfig+0x13fc>
 800834c:	2a09      	cmp	r2, #9
 800834e:	d023      	beq.n	8008398 <UART_SetConfig+0x1400>
 8008350:	2a0a      	cmp	r2, #10
 8008352:	d023      	beq.n	800839c <UART_SetConfig+0x1404>
 8008354:	2a0b      	cmp	r2, #11
 8008356:	d001      	beq.n	800835c <UART_SetConfig+0x13c4>
 8008358:	2201      	movs	r2, #1
 800835a:	e003      	b.n	8008364 <UART_SetConfig+0x13cc>
 800835c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008360:	e000      	b.n	8008364 <UART_SetConfig+0x13cc>
 8008362:	2201      	movs	r2, #1
 8008364:	fbb3 f3f2 	udiv	r3, r3, r2
 8008368:	6862      	ldr	r2, [r4, #4]
 800836a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800836e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008372:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8008374:	2000      	movs	r0, #0
        break;
 8008376:	e730      	b.n	80081da <UART_SetConfig+0x1242>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008378:	2202      	movs	r2, #2
 800837a:	e7f3      	b.n	8008364 <UART_SetConfig+0x13cc>
 800837c:	2204      	movs	r2, #4
 800837e:	e7f1      	b.n	8008364 <UART_SetConfig+0x13cc>
 8008380:	2206      	movs	r2, #6
 8008382:	e7ef      	b.n	8008364 <UART_SetConfig+0x13cc>
 8008384:	2208      	movs	r2, #8
 8008386:	e7ed      	b.n	8008364 <UART_SetConfig+0x13cc>
 8008388:	220a      	movs	r2, #10
 800838a:	e7eb      	b.n	8008364 <UART_SetConfig+0x13cc>
 800838c:	220c      	movs	r2, #12
 800838e:	e7e9      	b.n	8008364 <UART_SetConfig+0x13cc>
 8008390:	2210      	movs	r2, #16
 8008392:	e7e7      	b.n	8008364 <UART_SetConfig+0x13cc>
 8008394:	2220      	movs	r2, #32
 8008396:	e7e5      	b.n	8008364 <UART_SetConfig+0x13cc>
 8008398:	2240      	movs	r2, #64	; 0x40
 800839a:	e7e3      	b.n	8008364 <UART_SetConfig+0x13cc>
 800839c:	2280      	movs	r2, #128	; 0x80
 800839e:	e7e1      	b.n	8008364 <UART_SetConfig+0x13cc>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083a0:	4668      	mov	r0, sp
 80083a2:	f7fc f9bd 	bl	8004720 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083a6:	9b01      	ldr	r3, [sp, #4]
 80083a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80083aa:	b1d2      	cbz	r2, 80083e2 <UART_SetConfig+0x144a>
 80083ac:	2a01      	cmp	r2, #1
 80083ae:	d023      	beq.n	80083f8 <UART_SetConfig+0x1460>
 80083b0:	2a02      	cmp	r2, #2
 80083b2:	d023      	beq.n	80083fc <UART_SetConfig+0x1464>
 80083b4:	2a03      	cmp	r2, #3
 80083b6:	d023      	beq.n	8008400 <UART_SetConfig+0x1468>
 80083b8:	2a04      	cmp	r2, #4
 80083ba:	d023      	beq.n	8008404 <UART_SetConfig+0x146c>
 80083bc:	2a05      	cmp	r2, #5
 80083be:	d023      	beq.n	8008408 <UART_SetConfig+0x1470>
 80083c0:	2a06      	cmp	r2, #6
 80083c2:	d023      	beq.n	800840c <UART_SetConfig+0x1474>
 80083c4:	2a07      	cmp	r2, #7
 80083c6:	d023      	beq.n	8008410 <UART_SetConfig+0x1478>
 80083c8:	2a08      	cmp	r2, #8
 80083ca:	d023      	beq.n	8008414 <UART_SetConfig+0x147c>
 80083cc:	2a09      	cmp	r2, #9
 80083ce:	d023      	beq.n	8008418 <UART_SetConfig+0x1480>
 80083d0:	2a0a      	cmp	r2, #10
 80083d2:	d023      	beq.n	800841c <UART_SetConfig+0x1484>
 80083d4:	2a0b      	cmp	r2, #11
 80083d6:	d001      	beq.n	80083dc <UART_SetConfig+0x1444>
 80083d8:	2201      	movs	r2, #1
 80083da:	e003      	b.n	80083e4 <UART_SetConfig+0x144c>
 80083dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083e0:	e000      	b.n	80083e4 <UART_SetConfig+0x144c>
 80083e2:	2201      	movs	r2, #1
 80083e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80083e8:	6862      	ldr	r2, [r4, #4]
 80083ea:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80083ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80083f2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80083f4:	2000      	movs	r0, #0
        break;
 80083f6:	e6f0      	b.n	80081da <UART_SetConfig+0x1242>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083f8:	2202      	movs	r2, #2
 80083fa:	e7f3      	b.n	80083e4 <UART_SetConfig+0x144c>
 80083fc:	2204      	movs	r2, #4
 80083fe:	e7f1      	b.n	80083e4 <UART_SetConfig+0x144c>
 8008400:	2206      	movs	r2, #6
 8008402:	e7ef      	b.n	80083e4 <UART_SetConfig+0x144c>
 8008404:	2208      	movs	r2, #8
 8008406:	e7ed      	b.n	80083e4 <UART_SetConfig+0x144c>
 8008408:	220a      	movs	r2, #10
 800840a:	e7eb      	b.n	80083e4 <UART_SetConfig+0x144c>
 800840c:	220c      	movs	r2, #12
 800840e:	e7e9      	b.n	80083e4 <UART_SetConfig+0x144c>
 8008410:	2210      	movs	r2, #16
 8008412:	e7e7      	b.n	80083e4 <UART_SetConfig+0x144c>
 8008414:	2220      	movs	r2, #32
 8008416:	e7e5      	b.n	80083e4 <UART_SetConfig+0x144c>
 8008418:	2240      	movs	r2, #64	; 0x40
 800841a:	e7e3      	b.n	80083e4 <UART_SetConfig+0x144c>
 800841c:	2280      	movs	r2, #128	; 0x80
 800841e:	e7e1      	b.n	80083e4 <UART_SetConfig+0x144c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008420:	4b87      	ldr	r3, [pc, #540]	; (8008640 <UART_SetConfig+0x16a8>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f013 0f20 	tst.w	r3, #32
 8008428:	d041      	beq.n	80084ae <UART_SetConfig+0x1516>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800842a:	4b85      	ldr	r3, [pc, #532]	; (8008640 <UART_SetConfig+0x16a8>)
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008432:	4b84      	ldr	r3, [pc, #528]	; (8008644 <UART_SetConfig+0x16ac>)
 8008434:	40d3      	lsrs	r3, r2
 8008436:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008438:	b1c2      	cbz	r2, 800846c <UART_SetConfig+0x14d4>
 800843a:	2a01      	cmp	r2, #1
 800843c:	d021      	beq.n	8008482 <UART_SetConfig+0x14ea>
 800843e:	2a02      	cmp	r2, #2
 8008440:	d021      	beq.n	8008486 <UART_SetConfig+0x14ee>
 8008442:	2a03      	cmp	r2, #3
 8008444:	d021      	beq.n	800848a <UART_SetConfig+0x14f2>
 8008446:	2a04      	cmp	r2, #4
 8008448:	d021      	beq.n	800848e <UART_SetConfig+0x14f6>
 800844a:	2a05      	cmp	r2, #5
 800844c:	d021      	beq.n	8008492 <UART_SetConfig+0x14fa>
 800844e:	2a06      	cmp	r2, #6
 8008450:	d021      	beq.n	8008496 <UART_SetConfig+0x14fe>
 8008452:	2a07      	cmp	r2, #7
 8008454:	d021      	beq.n	800849a <UART_SetConfig+0x1502>
 8008456:	2a08      	cmp	r2, #8
 8008458:	d021      	beq.n	800849e <UART_SetConfig+0x1506>
 800845a:	2a09      	cmp	r2, #9
 800845c:	d021      	beq.n	80084a2 <UART_SetConfig+0x150a>
 800845e:	2a0a      	cmp	r2, #10
 8008460:	d021      	beq.n	80084a6 <UART_SetConfig+0x150e>
 8008462:	2a0b      	cmp	r2, #11
 8008464:	d121      	bne.n	80084aa <UART_SetConfig+0x1512>
 8008466:	f44f 7280 	mov.w	r2, #256	; 0x100
 800846a:	e000      	b.n	800846e <UART_SetConfig+0x14d6>
 800846c:	2201      	movs	r2, #1
 800846e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008472:	6862      	ldr	r2, [r4, #4]
 8008474:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008478:	fbb3 f3f2 	udiv	r3, r3, r2
 800847c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800847e:	2000      	movs	r0, #0
 8008480:	e6ab      	b.n	80081da <UART_SetConfig+0x1242>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008482:	2202      	movs	r2, #2
 8008484:	e7f3      	b.n	800846e <UART_SetConfig+0x14d6>
 8008486:	2204      	movs	r2, #4
 8008488:	e7f1      	b.n	800846e <UART_SetConfig+0x14d6>
 800848a:	2206      	movs	r2, #6
 800848c:	e7ef      	b.n	800846e <UART_SetConfig+0x14d6>
 800848e:	2208      	movs	r2, #8
 8008490:	e7ed      	b.n	800846e <UART_SetConfig+0x14d6>
 8008492:	220a      	movs	r2, #10
 8008494:	e7eb      	b.n	800846e <UART_SetConfig+0x14d6>
 8008496:	220c      	movs	r2, #12
 8008498:	e7e9      	b.n	800846e <UART_SetConfig+0x14d6>
 800849a:	2210      	movs	r2, #16
 800849c:	e7e7      	b.n	800846e <UART_SetConfig+0x14d6>
 800849e:	2220      	movs	r2, #32
 80084a0:	e7e5      	b.n	800846e <UART_SetConfig+0x14d6>
 80084a2:	2240      	movs	r2, #64	; 0x40
 80084a4:	e7e3      	b.n	800846e <UART_SetConfig+0x14d6>
 80084a6:	2280      	movs	r2, #128	; 0x80
 80084a8:	e7e1      	b.n	800846e <UART_SetConfig+0x14d6>
 80084aa:	2201      	movs	r2, #1
 80084ac:	e7df      	b.n	800846e <UART_SetConfig+0x14d6>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084b0:	b1bb      	cbz	r3, 80084e2 <UART_SetConfig+0x154a>
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d01e      	beq.n	80084f4 <UART_SetConfig+0x155c>
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d01e      	beq.n	80084f8 <UART_SetConfig+0x1560>
 80084ba:	2b03      	cmp	r3, #3
 80084bc:	d01e      	beq.n	80084fc <UART_SetConfig+0x1564>
 80084be:	2b04      	cmp	r3, #4
 80084c0:	d01e      	beq.n	8008500 <UART_SetConfig+0x1568>
 80084c2:	2b05      	cmp	r3, #5
 80084c4:	d01e      	beq.n	8008504 <UART_SetConfig+0x156c>
 80084c6:	2b06      	cmp	r3, #6
 80084c8:	d01e      	beq.n	8008508 <UART_SetConfig+0x1570>
 80084ca:	2b07      	cmp	r3, #7
 80084cc:	d01e      	beq.n	800850c <UART_SetConfig+0x1574>
 80084ce:	2b08      	cmp	r3, #8
 80084d0:	d01e      	beq.n	8008510 <UART_SetConfig+0x1578>
 80084d2:	2b09      	cmp	r3, #9
 80084d4:	d01e      	beq.n	8008514 <UART_SetConfig+0x157c>
 80084d6:	2b0a      	cmp	r3, #10
 80084d8:	d01e      	beq.n	8008518 <UART_SetConfig+0x1580>
 80084da:	2b0b      	cmp	r3, #11
 80084dc:	d11e      	bne.n	800851c <UART_SetConfig+0x1584>
 80084de:	4b5a      	ldr	r3, [pc, #360]	; (8008648 <UART_SetConfig+0x16b0>)
 80084e0:	e000      	b.n	80084e4 <UART_SetConfig+0x154c>
 80084e2:	4b58      	ldr	r3, [pc, #352]	; (8008644 <UART_SetConfig+0x16ac>)
 80084e4:	6862      	ldr	r2, [r4, #4]
 80084e6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80084ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80084ee:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80084f0:	2000      	movs	r0, #0
 80084f2:	e672      	b.n	80081da <UART_SetConfig+0x1242>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084f4:	4b55      	ldr	r3, [pc, #340]	; (800864c <UART_SetConfig+0x16b4>)
 80084f6:	e7f5      	b.n	80084e4 <UART_SetConfig+0x154c>
 80084f8:	4b55      	ldr	r3, [pc, #340]	; (8008650 <UART_SetConfig+0x16b8>)
 80084fa:	e7f3      	b.n	80084e4 <UART_SetConfig+0x154c>
 80084fc:	4b55      	ldr	r3, [pc, #340]	; (8008654 <UART_SetConfig+0x16bc>)
 80084fe:	e7f1      	b.n	80084e4 <UART_SetConfig+0x154c>
 8008500:	4b55      	ldr	r3, [pc, #340]	; (8008658 <UART_SetConfig+0x16c0>)
 8008502:	e7ef      	b.n	80084e4 <UART_SetConfig+0x154c>
 8008504:	4b55      	ldr	r3, [pc, #340]	; (800865c <UART_SetConfig+0x16c4>)
 8008506:	e7ed      	b.n	80084e4 <UART_SetConfig+0x154c>
 8008508:	4b55      	ldr	r3, [pc, #340]	; (8008660 <UART_SetConfig+0x16c8>)
 800850a:	e7eb      	b.n	80084e4 <UART_SetConfig+0x154c>
 800850c:	4b55      	ldr	r3, [pc, #340]	; (8008664 <UART_SetConfig+0x16cc>)
 800850e:	e7e9      	b.n	80084e4 <UART_SetConfig+0x154c>
 8008510:	4b55      	ldr	r3, [pc, #340]	; (8008668 <UART_SetConfig+0x16d0>)
 8008512:	e7e7      	b.n	80084e4 <UART_SetConfig+0x154c>
 8008514:	4b55      	ldr	r3, [pc, #340]	; (800866c <UART_SetConfig+0x16d4>)
 8008516:	e7e5      	b.n	80084e4 <UART_SetConfig+0x154c>
 8008518:	4b55      	ldr	r3, [pc, #340]	; (8008670 <UART_SetConfig+0x16d8>)
 800851a:	e7e3      	b.n	80084e4 <UART_SetConfig+0x154c>
 800851c:	4b49      	ldr	r3, [pc, #292]	; (8008644 <UART_SetConfig+0x16ac>)
 800851e:	e7e1      	b.n	80084e4 <UART_SetConfig+0x154c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008520:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008522:	b1d3      	cbz	r3, 800855a <UART_SetConfig+0x15c2>
 8008524:	2b01      	cmp	r3, #1
 8008526:	d021      	beq.n	800856c <UART_SetConfig+0x15d4>
 8008528:	2b02      	cmp	r3, #2
 800852a:	d021      	beq.n	8008570 <UART_SetConfig+0x15d8>
 800852c:	2b03      	cmp	r3, #3
 800852e:	d021      	beq.n	8008574 <UART_SetConfig+0x15dc>
 8008530:	2b04      	cmp	r3, #4
 8008532:	d021      	beq.n	8008578 <UART_SetConfig+0x15e0>
 8008534:	2b05      	cmp	r3, #5
 8008536:	d021      	beq.n	800857c <UART_SetConfig+0x15e4>
 8008538:	2b06      	cmp	r3, #6
 800853a:	d021      	beq.n	8008580 <UART_SetConfig+0x15e8>
 800853c:	2b07      	cmp	r3, #7
 800853e:	d021      	beq.n	8008584 <UART_SetConfig+0x15ec>
 8008540:	2b08      	cmp	r3, #8
 8008542:	d021      	beq.n	8008588 <UART_SetConfig+0x15f0>
 8008544:	2b09      	cmp	r3, #9
 8008546:	d021      	beq.n	800858c <UART_SetConfig+0x15f4>
 8008548:	2b0a      	cmp	r3, #10
 800854a:	d022      	beq.n	8008592 <UART_SetConfig+0x15fa>
 800854c:	2b0b      	cmp	r3, #11
 800854e:	d001      	beq.n	8008554 <UART_SetConfig+0x15bc>
 8008550:	4b44      	ldr	r3, [pc, #272]	; (8008664 <UART_SetConfig+0x16cc>)
 8008552:	e003      	b.n	800855c <UART_SetConfig+0x15c4>
 8008554:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008558:	e000      	b.n	800855c <UART_SetConfig+0x15c4>
 800855a:	4b42      	ldr	r3, [pc, #264]	; (8008664 <UART_SetConfig+0x16cc>)
 800855c:	6862      	ldr	r2, [r4, #4]
 800855e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008562:	fbb3 f3f2 	udiv	r3, r3, r2
 8008566:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8008568:	2000      	movs	r0, #0
        break;
 800856a:	e636      	b.n	80081da <UART_SetConfig+0x1242>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800856c:	4b3e      	ldr	r3, [pc, #248]	; (8008668 <UART_SetConfig+0x16d0>)
 800856e:	e7f5      	b.n	800855c <UART_SetConfig+0x15c4>
 8008570:	4b3e      	ldr	r3, [pc, #248]	; (800866c <UART_SetConfig+0x16d4>)
 8008572:	e7f3      	b.n	800855c <UART_SetConfig+0x15c4>
 8008574:	4b3f      	ldr	r3, [pc, #252]	; (8008674 <UART_SetConfig+0x16dc>)
 8008576:	e7f1      	b.n	800855c <UART_SetConfig+0x15c4>
 8008578:	4b3d      	ldr	r3, [pc, #244]	; (8008670 <UART_SetConfig+0x16d8>)
 800857a:	e7ef      	b.n	800855c <UART_SetConfig+0x15c4>
 800857c:	4b3e      	ldr	r3, [pc, #248]	; (8008678 <UART_SetConfig+0x16e0>)
 800857e:	e7ed      	b.n	800855c <UART_SetConfig+0x15c4>
 8008580:	4b3e      	ldr	r3, [pc, #248]	; (800867c <UART_SetConfig+0x16e4>)
 8008582:	e7eb      	b.n	800855c <UART_SetConfig+0x15c4>
 8008584:	4b30      	ldr	r3, [pc, #192]	; (8008648 <UART_SetConfig+0x16b0>)
 8008586:	e7e9      	b.n	800855c <UART_SetConfig+0x15c4>
 8008588:	4b3d      	ldr	r3, [pc, #244]	; (8008680 <UART_SetConfig+0x16e8>)
 800858a:	e7e7      	b.n	800855c <UART_SetConfig+0x15c4>
 800858c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008590:	e7e4      	b.n	800855c <UART_SetConfig+0x15c4>
 8008592:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008596:	e7e1      	b.n	800855c <UART_SetConfig+0x15c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800859a:	b1d3      	cbz	r3, 80085d2 <UART_SetConfig+0x163a>
 800859c:	2b01      	cmp	r3, #1
 800859e:	d022      	beq.n	80085e6 <UART_SetConfig+0x164e>
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d023      	beq.n	80085ec <UART_SetConfig+0x1654>
 80085a4:	2b03      	cmp	r3, #3
 80085a6:	d024      	beq.n	80085f2 <UART_SetConfig+0x165a>
 80085a8:	2b04      	cmp	r3, #4
 80085aa:	d025      	beq.n	80085f8 <UART_SetConfig+0x1660>
 80085ac:	2b05      	cmp	r3, #5
 80085ae:	d026      	beq.n	80085fe <UART_SetConfig+0x1666>
 80085b0:	2b06      	cmp	r3, #6
 80085b2:	d027      	beq.n	8008604 <UART_SetConfig+0x166c>
 80085b4:	2b07      	cmp	r3, #7
 80085b6:	d028      	beq.n	800860a <UART_SetConfig+0x1672>
 80085b8:	2b08      	cmp	r3, #8
 80085ba:	d029      	beq.n	8008610 <UART_SetConfig+0x1678>
 80085bc:	2b09      	cmp	r3, #9
 80085be:	d02a      	beq.n	8008616 <UART_SetConfig+0x167e>
 80085c0:	2b0a      	cmp	r3, #10
 80085c2:	d02b      	beq.n	800861c <UART_SetConfig+0x1684>
 80085c4:	2b0b      	cmp	r3, #11
 80085c6:	d002      	beq.n	80085ce <UART_SetConfig+0x1636>
 80085c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085cc:	e003      	b.n	80085d6 <UART_SetConfig+0x163e>
 80085ce:	2380      	movs	r3, #128	; 0x80
 80085d0:	e001      	b.n	80085d6 <UART_SetConfig+0x163e>
 80085d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085d6:	6862      	ldr	r2, [r4, #4]
 80085d8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80085dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80085e0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80085e2:	2000      	movs	r0, #0
        break;
 80085e4:	e5f9      	b.n	80081da <UART_SetConfig+0x1242>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80085ea:	e7f4      	b.n	80085d6 <UART_SetConfig+0x163e>
 80085ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80085f0:	e7f1      	b.n	80085d6 <UART_SetConfig+0x163e>
 80085f2:	f241 5355 	movw	r3, #5461	; 0x1555
 80085f6:	e7ee      	b.n	80085d6 <UART_SetConfig+0x163e>
 80085f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085fc:	e7eb      	b.n	80085d6 <UART_SetConfig+0x163e>
 80085fe:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008602:	e7e8      	b.n	80085d6 <UART_SetConfig+0x163e>
 8008604:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008608:	e7e5      	b.n	80085d6 <UART_SetConfig+0x163e>
 800860a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800860e:	e7e2      	b.n	80085d6 <UART_SetConfig+0x163e>
 8008610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008614:	e7df      	b.n	80085d6 <UART_SetConfig+0x163e>
 8008616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800861a:	e7dc      	b.n	80085d6 <UART_SetConfig+0x163e>
 800861c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008620:	e7d9      	b.n	80085d6 <UART_SetConfig+0x163e>
        ret = HAL_ERROR;
 8008622:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8008624:	2300      	movs	r3, #0
 8008626:	e5d8      	b.n	80081da <UART_SetConfig+0x1242>
 8008628:	2000      	movs	r0, #0
 800862a:	e5df      	b.n	80081ec <UART_SetConfig+0x1254>
        ret = HAL_ERROR;
 800862c:	2001      	movs	r0, #1
 800862e:	e5dd      	b.n	80081ec <UART_SetConfig+0x1254>
 8008630:	2001      	movs	r0, #1
 8008632:	e5db      	b.n	80081ec <UART_SetConfig+0x1254>
          ret = HAL_ERROR;
 8008634:	2001      	movs	r0, #1
 8008636:	e5d9      	b.n	80081ec <UART_SetConfig+0x1254>
      ret = HAL_ERROR;
 8008638:	2001      	movs	r0, #1
 800863a:	e5d7      	b.n	80081ec <UART_SetConfig+0x1254>
      ret = HAL_ERROR;
 800863c:	2001      	movs	r0, #1
 800863e:	e5d5      	b.n	80081ec <UART_SetConfig+0x1254>
 8008640:	58024400 	.word	0x58024400
 8008644:	03d09000 	.word	0x03d09000
 8008648:	0003d090 	.word	0x0003d090
 800864c:	01e84800 	.word	0x01e84800
 8008650:	00f42400 	.word	0x00f42400
 8008654:	00a2c2aa 	.word	0x00a2c2aa
 8008658:	007a1200 	.word	0x007a1200
 800865c:	0061a800 	.word	0x0061a800
 8008660:	00516155 	.word	0x00516155
 8008664:	003d0900 	.word	0x003d0900
 8008668:	001e8480 	.word	0x001e8480
 800866c:	000f4240 	.word	0x000f4240
 8008670:	0007a120 	.word	0x0007a120
 8008674:	000a2c2a 	.word	0x000a2c2a
 8008678:	00061a80 	.word	0x00061a80
 800867c:	00051615 	.word	0x00051615
 8008680:	0001e848 	.word	0x0001e848

08008684 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008684:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008686:	f013 0f01 	tst.w	r3, #1
 800868a:	d006      	beq.n	800869a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800868c:	6802      	ldr	r2, [r0, #0]
 800868e:	6853      	ldr	r3, [r2, #4]
 8008690:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008694:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008696:	430b      	orrs	r3, r1
 8008698:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800869a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800869c:	f013 0f02 	tst.w	r3, #2
 80086a0:	d006      	beq.n	80086b0 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086a2:	6802      	ldr	r2, [r0, #0]
 80086a4:	6853      	ldr	r3, [r2, #4]
 80086a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086aa:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80086ac:	430b      	orrs	r3, r1
 80086ae:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80086b2:	f013 0f04 	tst.w	r3, #4
 80086b6:	d006      	beq.n	80086c6 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086b8:	6802      	ldr	r2, [r0, #0]
 80086ba:	6853      	ldr	r3, [r2, #4]
 80086bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086c0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80086c2:	430b      	orrs	r3, r1
 80086c4:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80086c8:	f013 0f08 	tst.w	r3, #8
 80086cc:	d006      	beq.n	80086dc <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086ce:	6802      	ldr	r2, [r0, #0]
 80086d0:	6853      	ldr	r3, [r2, #4]
 80086d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086d6:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80086d8:	430b      	orrs	r3, r1
 80086da:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80086de:	f013 0f10 	tst.w	r3, #16
 80086e2:	d006      	beq.n	80086f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086e4:	6802      	ldr	r2, [r0, #0]
 80086e6:	6893      	ldr	r3, [r2, #8]
 80086e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086ec:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80086ee:	430b      	orrs	r3, r1
 80086f0:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80086f4:	f013 0f20 	tst.w	r3, #32
 80086f8:	d006      	beq.n	8008708 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086fa:	6802      	ldr	r2, [r0, #0]
 80086fc:	6893      	ldr	r3, [r2, #8]
 80086fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008702:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8008704:	430b      	orrs	r3, r1
 8008706:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008708:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800870a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800870e:	d00a      	beq.n	8008726 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008710:	6802      	ldr	r2, [r0, #0]
 8008712:	6853      	ldr	r3, [r2, #4]
 8008714:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008718:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800871a:	430b      	orrs	r3, r1
 800871c:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800871e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008720:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008724:	d00b      	beq.n	800873e <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008726:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008728:	f013 0f80 	tst.w	r3, #128	; 0x80
 800872c:	d006      	beq.n	800873c <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800872e:	6802      	ldr	r2, [r0, #0]
 8008730:	6853      	ldr	r3, [r2, #4]
 8008732:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008736:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8008738:	430b      	orrs	r3, r1
 800873a:	6053      	str	r3, [r2, #4]
  }
}
 800873c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800873e:	6802      	ldr	r2, [r0, #0]
 8008740:	6853      	ldr	r3, [r2, #4]
 8008742:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008746:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8008748:	430b      	orrs	r3, r1
 800874a:	6053      	str	r3, [r2, #4]
 800874c:	e7eb      	b.n	8008726 <UART_AdvFeatureConfig+0xa2>

0800874e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800874e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008752:	4604      	mov	r4, r0
 8008754:	460f      	mov	r7, r1
 8008756:	4616      	mov	r6, r2
 8008758:	4698      	mov	r8, r3
 800875a:	9d06      	ldr	r5, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800875c:	6823      	ldr	r3, [r4, #0]
 800875e:	69db      	ldr	r3, [r3, #28]
 8008760:	ea37 0303 	bics.w	r3, r7, r3
 8008764:	bf0c      	ite	eq
 8008766:	2301      	moveq	r3, #1
 8008768:	2300      	movne	r3, #0
 800876a:	42b3      	cmp	r3, r6
 800876c:	d13f      	bne.n	80087ee <UART_WaitOnFlagUntilTimeout+0xa0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800876e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008772:	d0f3      	beq.n	800875c <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008774:	f7f7 ff90 	bl	8000698 <HAL_GetTick>
 8008778:	eba0 0008 	sub.w	r0, r0, r8
 800877c:	42a8      	cmp	r0, r5
 800877e:	d822      	bhi.n	80087c6 <UART_WaitOnFlagUntilTimeout+0x78>
 8008780:	b30d      	cbz	r5, 80087c6 <UART_WaitOnFlagUntilTimeout+0x78>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008782:	6823      	ldr	r3, [r4, #0]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	f012 0f04 	tst.w	r2, #4
 800878a:	d0e7      	beq.n	800875c <UART_WaitOnFlagUntilTimeout+0xe>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800878c:	69da      	ldr	r2, [r3, #28]
 800878e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8008792:	d0e3      	beq.n	800875c <UART_WaitOnFlagUntilTimeout+0xe>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008794:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008798:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800879a:	6822      	ldr	r2, [r4, #0]
 800879c:	6813      	ldr	r3, [r2, #0]
 800879e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80087a2:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a4:	6822      	ldr	r2, [r4, #0]
 80087a6:	6893      	ldr	r3, [r2, #8]
 80087a8:	f023 0301 	bic.w	r3, r3, #1
 80087ac:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 80087ae:	2320      	movs	r3, #32
 80087b0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80087b4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087b8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087bc:	2300      	movs	r3, #0
 80087be:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 80087c2:	2003      	movs	r0, #3
 80087c4:	e014      	b.n	80087f0 <UART_WaitOnFlagUntilTimeout+0xa2>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80087c6:	6822      	ldr	r2, [r4, #0]
 80087c8:	6813      	ldr	r3, [r2, #0]
 80087ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80087ce:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d0:	6822      	ldr	r2, [r4, #0]
 80087d2:	6893      	ldr	r3, [r2, #8]
 80087d4:	f023 0301 	bic.w	r3, r3, #1
 80087d8:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80087da:	2320      	movs	r3, #32
 80087dc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80087e0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        __HAL_UNLOCK(huart);
 80087e4:	2300      	movs	r3, #0
 80087e6:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
        return HAL_TIMEOUT;
 80087ea:	2003      	movs	r0, #3
 80087ec:	e000      	b.n	80087f0 <UART_WaitOnFlagUntilTimeout+0xa2>
        }
      }
    }
  }
  return HAL_OK;
 80087ee:	2000      	movs	r0, #0
}
 80087f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080087f4 <UART_CheckIdleState>:
{
 80087f4:	b530      	push	{r4, r5, lr}
 80087f6:	b083      	sub	sp, #12
 80087f8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087fa:	2300      	movs	r3, #0
 80087fc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 8008800:	f7f7 ff4a 	bl	8000698 <HAL_GetTick>
 8008804:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008806:	6823      	ldr	r3, [r4, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f013 0f08 	tst.w	r3, #8
 800880e:	d10e      	bne.n	800882e <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008810:	6823      	ldr	r3, [r4, #0]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f013 0f04 	tst.w	r3, #4
 8008818:	d117      	bne.n	800884a <UART_CheckIdleState+0x56>
  huart->gState = HAL_UART_STATE_READY;
 800881a:	2320      	movs	r3, #32
 800881c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008820:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8008824:	2000      	movs	r0, #0
 8008826:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 800882a:	b003      	add	sp, #12
 800882c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800882e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008832:	9300      	str	r3, [sp, #0]
 8008834:	4603      	mov	r3, r0
 8008836:	2200      	movs	r2, #0
 8008838:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800883c:	4620      	mov	r0, r4
 800883e:	f7ff ff86 	bl	800874e <UART_WaitOnFlagUntilTimeout>
 8008842:	2800      	cmp	r0, #0
 8008844:	d0e4      	beq.n	8008810 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8008846:	2003      	movs	r0, #3
 8008848:	e7ef      	b.n	800882a <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800884a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800884e:	9300      	str	r3, [sp, #0]
 8008850:	462b      	mov	r3, r5
 8008852:	2200      	movs	r2, #0
 8008854:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008858:	4620      	mov	r0, r4
 800885a:	f7ff ff78 	bl	800874e <UART_WaitOnFlagUntilTimeout>
 800885e:	2800      	cmp	r0, #0
 8008860:	d0db      	beq.n	800881a <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8008862:	2003      	movs	r0, #3
 8008864:	e7e1      	b.n	800882a <UART_CheckIdleState+0x36>

08008866 <HAL_UART_Init>:
  if (huart == NULL)
 8008866:	b378      	cbz	r0, 80088c8 <HAL_UART_Init+0x62>
{
 8008868:	b510      	push	{r4, lr}
 800886a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800886c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8008870:	b30b      	cbz	r3, 80088b6 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8008872:	2324      	movs	r3, #36	; 0x24
 8008874:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 8008878:	6822      	ldr	r2, [r4, #0]
 800887a:	6813      	ldr	r3, [r2, #0]
 800887c:	f023 0301 	bic.w	r3, r3, #1
 8008880:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008882:	4620      	mov	r0, r4
 8008884:	f7fe fb88 	bl	8006f98 <UART_SetConfig>
 8008888:	2801      	cmp	r0, #1
 800888a:	d013      	beq.n	80088b4 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800888c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800888e:	b9bb      	cbnz	r3, 80088c0 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008890:	6822      	ldr	r2, [r4, #0]
 8008892:	6853      	ldr	r3, [r2, #4]
 8008894:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8008898:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800889a:	6822      	ldr	r2, [r4, #0]
 800889c:	6893      	ldr	r3, [r2, #8]
 800889e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80088a2:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80088a4:	6822      	ldr	r2, [r4, #0]
 80088a6:	6813      	ldr	r3, [r2, #0]
 80088a8:	f043 0301 	orr.w	r3, r3, #1
 80088ac:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80088ae:	4620      	mov	r0, r4
 80088b0:	f7ff ffa0 	bl	80087f4 <UART_CheckIdleState>
}
 80088b4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80088b6:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 80088ba:	f002 fc81 	bl	800b1c0 <HAL_UART_MspInit>
 80088be:	e7d8      	b.n	8008872 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80088c0:	4620      	mov	r0, r4
 80088c2:	f7ff fedf 	bl	8008684 <UART_AdvFeatureConfig>
 80088c6:	e7e3      	b.n	8008890 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80088c8:	2001      	movs	r0, #1
}
 80088ca:	4770      	bx	lr

080088cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80088cc:	b410      	push	{r4}
 80088ce:	b085      	sub	sp, #20
 80088d0:	4602      	mov	r2, r0
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80088d2:	4b1a      	ldr	r3, [pc, #104]	; (800893c <UARTEx_SetNbDataToProcess+0x70>)
 80088d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80088d8:	ac04      	add	r4, sp, #16
 80088da:	e904 0003 	stmdb	r4, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80088de:	466c      	mov	r4, sp
 80088e0:	3308      	adds	r3, #8
 80088e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80088e6:	e884 0003 	stmia.w	r4, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80088ea:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80088ec:	b1fb      	cbz	r3, 800892e <UARTEx_SetNbDataToProcess+0x62>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80088ee:	6811      	ldr	r1, [r2, #0]
 80088f0:	688b      	ldr	r3, [r1, #8]
 80088f2:	f3c3 6342 	ubfx	r3, r3, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80088f6:	6888      	ldr	r0, [r1, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80088f8:	a904      	add	r1, sp, #16
 80088fa:	eb01 7050 	add.w	r0, r1, r0, lsr #29
 80088fe:	f810 1c08 	ldrb.w	r1, [r0, #-8]
 8008902:	00c9      	lsls	r1, r1, #3
 8008904:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8008908:	fb91 f1f0 	sdiv	r1, r1, r0
 800890c:	f8a2 106a 	strh.w	r1, [r2, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008910:	a904      	add	r1, sp, #16
 8008912:	440b      	add	r3, r1
 8008914:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 8008918:	00c9      	lsls	r1, r1, #3
 800891a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800891e:	fb91 f3f3 	sdiv	r3, r1, r3
 8008922:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
  }
}
 8008926:	b005      	add	sp, #20
 8008928:	f85d 4b04 	ldr.w	r4, [sp], #4
 800892c:	4770      	bx	lr
    huart->NbTxDataToProcess = 1U;
 800892e:	2301      	movs	r3, #1
 8008930:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008934:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
 8008938:	e7f5      	b.n	8008926 <UARTEx_SetNbDataToProcess+0x5a>
 800893a:	bf00      	nop
 800893c:	0800ba0c 	.word	0x0800ba0c

08008940 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8008940:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8008944:	2b01      	cmp	r3, #1
 8008946:	d018      	beq.n	800897a <HAL_UARTEx_DisableFifoMode+0x3a>
 8008948:	2301      	movs	r3, #1
 800894a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 800894e:	2324      	movs	r3, #36	; 0x24
 8008950:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008954:	6803      	ldr	r3, [r0, #0]
 8008956:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008958:	6819      	ldr	r1, [r3, #0]
 800895a:	f021 0101 	bic.w	r1, r1, #1
 800895e:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008960:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008964:	2300      	movs	r3, #0
 8008966:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008968:	6801      	ldr	r1, [r0, #0]
 800896a:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800896c:	2220      	movs	r2, #32
 800896e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8008972:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 8008976:	4618      	mov	r0, r3
 8008978:	4770      	bx	lr
  __HAL_LOCK(huart);
 800897a:	2002      	movs	r0, #2
}
 800897c:	4770      	bx	lr

0800897e <HAL_UARTEx_SetTxFifoThreshold>:
{
 800897e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008980:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8008984:	2b01      	cmp	r3, #1
 8008986:	d01d      	beq.n	80089c4 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8008988:	4604      	mov	r4, r0
 800898a:	2301      	movs	r3, #1
 800898c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8008990:	2324      	movs	r3, #36	; 0x24
 8008992:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008996:	6803      	ldr	r3, [r0, #0]
 8008998:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	f022 0201 	bic.w	r2, r2, #1
 80089a0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80089a2:	6802      	ldr	r2, [r0, #0]
 80089a4:	6893      	ldr	r3, [r2, #8]
 80089a6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80089aa:	4319      	orrs	r1, r3
 80089ac:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80089ae:	f7ff ff8d 	bl	80088cc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80089b6:	2320      	movs	r3, #32
 80089b8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80089bc:	2000      	movs	r0, #0
 80089be:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80089c2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80089c4:	2002      	movs	r0, #2
 80089c6:	e7fc      	b.n	80089c2 <HAL_UARTEx_SetTxFifoThreshold+0x44>

080089c8 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80089c8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80089ca:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d01d      	beq.n	8008a0e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80089d2:	4604      	mov	r4, r0
 80089d4:	2301      	movs	r3, #1
 80089d6:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 80089da:	2324      	movs	r3, #36	; 0x24
 80089dc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089e0:	6803      	ldr	r3, [r0, #0]
 80089e2:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	f022 0201 	bic.w	r2, r2, #1
 80089ea:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80089ec:	6802      	ldr	r2, [r0, #0]
 80089ee:	6893      	ldr	r3, [r2, #8]
 80089f0:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80089f4:	4319      	orrs	r1, r3
 80089f6:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80089f8:	f7ff ff68 	bl	80088cc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089fc:	6823      	ldr	r3, [r4, #0]
 80089fe:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008a00:	2320      	movs	r3, #32
 8008a02:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8008a06:	2000      	movs	r0, #0
 8008a08:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8008a0c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008a0e:	2002      	movs	r0, #2
 8008a10:	e7fc      	b.n	8008a0c <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08008a14 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008a14:	b410      	push	{r4}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008a16:	680b      	ldr	r3, [r1, #0]
 8008a18:	b1eb      	cbz	r3, 8008a56 <FMC_SDRAM_Init+0x42>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008a1a:	6803      	ldr	r3, [r0, #0]
 8008a1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a20:	69ca      	ldr	r2, [r1, #28]
 8008a22:	6a0c      	ldr	r4, [r1, #32]
 8008a24:	4322      	orrs	r2, r4
 8008a26:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8008a28:	4322      	orrs	r2, r4
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	6003      	str	r3, [r0, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008a2e:	6843      	ldr	r3, [r0, #4]
 8008a30:	4a14      	ldr	r2, [pc, #80]	; (8008a84 <FMC_SDRAM_Init+0x70>)
 8008a32:	401a      	ands	r2, r3
 8008a34:	684b      	ldr	r3, [r1, #4]
 8008a36:	688c      	ldr	r4, [r1, #8]
 8008a38:	4323      	orrs	r3, r4
 8008a3a:	68cc      	ldr	r4, [r1, #12]
 8008a3c:	4323      	orrs	r3, r4
 8008a3e:	690c      	ldr	r4, [r1, #16]
 8008a40:	4323      	orrs	r3, r4
 8008a42:	694c      	ldr	r4, [r1, #20]
 8008a44:	4323      	orrs	r3, r4
 8008a46:	6989      	ldr	r1, [r1, #24]
 8008a48:	430b      	orrs	r3, r1
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	6043      	str	r3, [r0, #4]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8008a4e:	2000      	movs	r0, #0
 8008a50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a54:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008a56:	6803      	ldr	r3, [r0, #0]
 8008a58:	4a0a      	ldr	r2, [pc, #40]	; (8008a84 <FMC_SDRAM_Init+0x70>)
 8008a5a:	401a      	ands	r2, r3
 8008a5c:	684b      	ldr	r3, [r1, #4]
 8008a5e:	688c      	ldr	r4, [r1, #8]
 8008a60:	4323      	orrs	r3, r4
 8008a62:	68cc      	ldr	r4, [r1, #12]
 8008a64:	4323      	orrs	r3, r4
 8008a66:	690c      	ldr	r4, [r1, #16]
 8008a68:	4323      	orrs	r3, r4
 8008a6a:	694c      	ldr	r4, [r1, #20]
 8008a6c:	4323      	orrs	r3, r4
 8008a6e:	698c      	ldr	r4, [r1, #24]
 8008a70:	4323      	orrs	r3, r4
 8008a72:	69cc      	ldr	r4, [r1, #28]
 8008a74:	4323      	orrs	r3, r4
 8008a76:	6a0c      	ldr	r4, [r1, #32]
 8008a78:	4323      	orrs	r3, r4
 8008a7a:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8008a7c:	430b      	orrs	r3, r1
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	6003      	str	r3, [r0, #0]
 8008a82:	e7e4      	b.n	8008a4e <FMC_SDRAM_Init+0x3a>
 8008a84:	ffff8000 	.word	0xffff8000

08008a88 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008a88:	b410      	push	{r4}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008a8a:	b332      	cbz	r2, 8008ada <FMC_SDRAM_Timing_Init+0x52>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008a8c:	6883      	ldr	r3, [r0, #8]
 8008a8e:	4a23      	ldr	r2, [pc, #140]	; (8008b1c <FMC_SDRAM_Timing_Init+0x94>)
 8008a90:	401a      	ands	r2, r3
 8008a92:	68cb      	ldr	r3, [r1, #12]
 8008a94:	1e5c      	subs	r4, r3, #1
 8008a96:	694b      	ldr	r3, [r1, #20]
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	051b      	lsls	r3, r3, #20
 8008a9c:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	6083      	str	r3, [r0, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008aa4:	68c2      	ldr	r2, [r0, #12]
 8008aa6:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8008aaa:	680b      	ldr	r3, [r1, #0]
 8008aac:	3b01      	subs	r3, #1
 8008aae:	684c      	ldr	r4, [r1, #4]
 8008ab0:	3c01      	subs	r4, #1
 8008ab2:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8008ab6:	688c      	ldr	r4, [r1, #8]
 8008ab8:	3c01      	subs	r4, #1
 8008aba:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8008abe:	690c      	ldr	r4, [r1, #16]
 8008ac0:	3c01      	subs	r4, #1
 8008ac2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008ac6:	6989      	ldr	r1, [r1, #24]
 8008ac8:	3901      	subs	r1, #1
 8008aca:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	60c3      	str	r3, [r0, #12]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 8008ad2:	2000      	movs	r0, #0
 8008ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ad8:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008ada:	6882      	ldr	r2, [r0, #8]
 8008adc:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8008ae0:	680b      	ldr	r3, [r1, #0]
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	684c      	ldr	r4, [r1, #4]
 8008ae6:	3c01      	subs	r4, #1
 8008ae8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8008aec:	688c      	ldr	r4, [r1, #8]
 8008aee:	3c01      	subs	r4, #1
 8008af0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8008af4:	68cc      	ldr	r4, [r1, #12]
 8008af6:	3c01      	subs	r4, #1
 8008af8:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 8008afc:	690c      	ldr	r4, [r1, #16]
 8008afe:	3c01      	subs	r4, #1
 8008b00:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008b04:	694c      	ldr	r4, [r1, #20]
 8008b06:	3c01      	subs	r4, #1
 8008b08:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8008b0c:	6989      	ldr	r1, [r1, #24]
 8008b0e:	3901      	subs	r1, #1
 8008b10:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008b14:	4313      	orrs	r3, r2
 8008b16:	6083      	str	r3, [r0, #8]
 8008b18:	e7db      	b.n	8008ad2 <FMC_SDRAM_Timing_Init+0x4a>
 8008b1a:	bf00      	nop
 8008b1c:	ff0f0fff 	.word	0xff0f0fff

08008b20 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b20:	4b0b      	ldr	r3, [pc, #44]	; (8008b50 <SDMMC_GetCmdError+0x30>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a0b      	ldr	r2, [pc, #44]	; (8008b54 <SDMMC_GetCmdError+0x34>)
 8008b26:	fba2 2303 	umull	r2, r3, r2, r3
 8008b2a:	0a5a      	lsrs	r2, r3, #9
 8008b2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b30:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 8008b34:	1e5a      	subs	r2, r3, #1
 8008b36:	b143      	cbz	r3, 8008b4a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008b38:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 8008b3a:	4613      	mov	r3, r2
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008b3c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008b40:	d0f8      	beq.n	8008b34 <SDMMC_GetCmdError+0x14>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008b42:	4b05      	ldr	r3, [pc, #20]	; (8008b58 <SDMMC_GetCmdError+0x38>)
 8008b44:	6383      	str	r3, [r0, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8008b46:	2000      	movs	r0, #0
 8008b48:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8008b4a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8008b4e:	4770      	bx	lr
 8008b50:	20000014 	.word	0x20000014
 8008b54:	10624dd3 	.word	0x10624dd3
 8008b58:	002000c5 	.word	0x002000c5

08008b5c <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b5c:	4b15      	ldr	r3, [pc, #84]	; (8008bb4 <SDMMC_GetCmdResp2+0x58>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a15      	ldr	r2, [pc, #84]	; (8008bb8 <SDMMC_GetCmdResp2+0x5c>)
 8008b62:	fba2 2303 	umull	r2, r3, r2, r3
 8008b66:	0a5a      	lsrs	r2, r3, #9
 8008b68:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b6c:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 8008b70:	1e5a      	subs	r2, r3, #1
 8008b72:	b1db      	cbz	r3, 8008bac <SDMMC_GetCmdResp2+0x50>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8008b74:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8008b76:	4613      	mov	r3, r2
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008b78:	f011 0f45 	tst.w	r1, #69	; 0x45
 8008b7c:	d0f8      	beq.n	8008b70 <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008b7e:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 8008b82:	d1f5      	bne.n	8008b70 <SDMMC_GetCmdResp2+0x14>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008b84:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008b86:	f013 0f04 	tst.w	r3, #4
 8008b8a:	d107      	bne.n	8008b9c <SDMMC_GetCmdResp2+0x40>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008b8c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008b8e:	f013 0f01 	tst.w	r3, #1
 8008b92:	d107      	bne.n	8008ba4 <SDMMC_GetCmdResp2+0x48>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008b94:	4b09      	ldr	r3, [pc, #36]	; (8008bbc <SDMMC_GetCmdResp2+0x60>)
 8008b96:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008b98:	2000      	movs	r0, #0
 8008b9a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008b9c:	2304      	movs	r3, #4
 8008b9e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ba8:	4618      	mov	r0, r3
 8008baa:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8008bac:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	20000014 	.word	0x20000014
 8008bb8:	10624dd3 	.word	0x10624dd3
 8008bbc:	002000c5 	.word	0x002000c5

08008bc0 <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008bc0:	4b11      	ldr	r3, [pc, #68]	; (8008c08 <SDMMC_GetCmdResp3+0x48>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a11      	ldr	r2, [pc, #68]	; (8008c0c <SDMMC_GetCmdResp3+0x4c>)
 8008bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8008bca:	0a5a      	lsrs	r2, r3, #9
 8008bcc:	f241 3388 	movw	r3, #5000	; 0x1388
 8008bd0:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 8008bd4:	1e5a      	subs	r2, r3, #1
 8008bd6:	b19b      	cbz	r3, 8008c00 <SDMMC_GetCmdResp3+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8008bd8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8008bda:	4613      	mov	r3, r2
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008bdc:	f011 0f45 	tst.w	r1, #69	; 0x45
 8008be0:	d0f8      	beq.n	8008bd4 <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008be2:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 8008be6:	d1f5      	bne.n	8008bd4 <SDMMC_GetCmdResp3+0x14>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008be8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008bea:	f013 0f04 	tst.w	r3, #4
 8008bee:	d103      	bne.n	8008bf8 <SDMMC_GetCmdResp3+0x38>
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008bf0:	4b07      	ldr	r3, [pc, #28]	; (8008c10 <SDMMC_GetCmdResp3+0x50>)
 8008bf2:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008bf4:	2000      	movs	r0, #0
 8008bf6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008bf8:	2304      	movs	r3, #4
 8008bfa:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8008c00:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop
 8008c08:	20000014 	.word	0x20000014
 8008c0c:	10624dd3 	.word	0x10624dd3
 8008c10:	002000c5 	.word	0x002000c5

08008c14 <SDMMC_GetCmdResp7>:
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008c14:	4b18      	ldr	r3, [pc, #96]	; (8008c78 <SDMMC_GetCmdResp7+0x64>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a18      	ldr	r2, [pc, #96]	; (8008c7c <SDMMC_GetCmdResp7+0x68>)
 8008c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c1e:	0a5a      	lsrs	r2, r3, #9
 8008c20:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c24:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 8008c28:	1e5a      	subs	r2, r3, #1
 8008c2a:	b1fb      	cbz	r3, 8008c6c <SDMMC_GetCmdResp7+0x58>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8008c2c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8008c2e:	4613      	mov	r3, r2
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008c30:	f011 0f45 	tst.w	r1, #69	; 0x45
 8008c34:	d0f8      	beq.n	8008c28 <SDMMC_GetCmdResp7+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c36:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 8008c3a:	d1f5      	bne.n	8008c28 <SDMMC_GetCmdResp7+0x14>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008c3c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008c3e:	f013 0f04 	tst.w	r3, #4
 8008c42:	d10b      	bne.n	8008c5c <SDMMC_GetCmdResp7+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008c44:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008c46:	f013 0f01 	tst.w	r3, #1
 8008c4a:	d10b      	bne.n	8008c64 <SDMMC_GetCmdResp7+0x50>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008c4c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008c4e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008c52:	d00e      	beq.n	8008c72 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008c54:	2340      	movs	r3, #64	; 0x40
 8008c56:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008c58:	2000      	movs	r0, #0
 8008c5a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008c5c:	2304      	movs	r3, #4
 8008c5e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c60:	4618      	mov	r0, r3
 8008c62:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008c64:	2301      	movs	r3, #1
 8008c66:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c68:	4618      	mov	r0, r3
 8008c6a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8008c6c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8008c70:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 8008c72:	2000      	movs	r0, #0

}
 8008c74:	4770      	bx	lr
 8008c76:	bf00      	nop
 8008c78:	20000014 	.word	0x20000014
 8008c7c:	10624dd3 	.word	0x10624dd3

08008c80 <SDMMC_Init>:
{
 8008c80:	b084      	sub	sp, #16
 8008c82:	b410      	push	{r4}
 8008c84:	ac02      	add	r4, sp, #8
 8008c86:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	9a03      	ldr	r2, [sp, #12]
 8008c8e:	4313      	orrs	r3, r2
             Init.BusWide             |\
 8008c90:	9a04      	ldr	r2, [sp, #16]
             Init.ClockPowerSave      |\
 8008c92:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 8008c94:	9a05      	ldr	r2, [sp, #20]
             Init.BusWide             |\
 8008c96:	4313      	orrs	r3, r2
             Init.ClockDiv
 8008c98:	9a06      	ldr	r2, [sp, #24]
             Init.HardwareFlowControl |\
 8008c9a:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008c9c:	6841      	ldr	r1, [r0, #4]
 8008c9e:	4a04      	ldr	r2, [pc, #16]	; (8008cb0 <SDMMC_Init+0x30>)
 8008ca0:	400a      	ands	r2, r1
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	6043      	str	r3, [r0, #4]
}
 8008ca6:	2000      	movs	r0, #0
 8008ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cac:	b004      	add	sp, #16
 8008cae:	4770      	bx	lr
 8008cb0:	ffc02c00 	.word	0xffc02c00

08008cb4 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 8008cb4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8008cb8:	4770      	bx	lr

08008cba <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 8008cba:	680b      	ldr	r3, [r1, #0]
 8008cbc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8008cc0:	2000      	movs	r0, #0
 8008cc2:	4770      	bx	lr

08008cc4 <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008cc4:	6803      	ldr	r3, [r0, #0]
 8008cc6:	f043 0303 	orr.w	r3, r3, #3
 8008cca:	6003      	str	r3, [r0, #0]
}
 8008ccc:	2000      	movs	r0, #0
 8008cce:	4770      	bx	lr

08008cd0 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008cd0:	6800      	ldr	r0, [r0, #0]
}
 8008cd2:	f000 0003 	and.w	r0, r0, #3
 8008cd6:	4770      	bx	lr

08008cd8 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 8008cd8:	680b      	ldr	r3, [r1, #0]
 8008cda:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008cdc:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 8008cde:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008ce0:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 8008ce2:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 8008ce4:	4313      	orrs	r3, r2
                       Command->CPSM);
 8008ce6:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 8008ce8:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008cea:	68c1      	ldr	r1, [r0, #12]
 8008cec:	4a02      	ldr	r2, [pc, #8]	; (8008cf8 <SDMMC_SendCommand+0x20>)
 8008cee:	400a      	ands	r2, r1
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	60c3      	str	r3, [r0, #12]
}
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	4770      	bx	lr
 8008cf8:	fffee0c0 	.word	0xfffee0c0

08008cfc <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 8008cfc:	6900      	ldr	r0, [r0, #16]
}
 8008cfe:	b2c0      	uxtb	r0, r0
 8008d00:	4770      	bx	lr

08008d02 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008d02:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8008d04:	5840      	ldr	r0, [r0, r1]
}
 8008d06:	4770      	bx	lr

08008d08 <SDMMC_GetCmdResp1>:
{
 8008d08:	b538      	push	{r3, r4, r5, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008d0a:	4b53      	ldr	r3, [pc, #332]	; (8008e58 <SDMMC_GetCmdResp1+0x150>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4c53      	ldr	r4, [pc, #332]	; (8008e5c <SDMMC_GetCmdResp1+0x154>)
 8008d10:	fba4 4303 	umull	r4, r3, r4, r3
 8008d14:	0a5b      	lsrs	r3, r3, #9
 8008d16:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 8008d1a:	1e54      	subs	r4, r2, #1
 8008d1c:	2a00      	cmp	r2, #0
 8008d1e:	d061      	beq.n	8008de4 <SDMMC_GetCmdResp1+0xdc>
    sta_reg = SDMMCx->STA;
 8008d20:	6b45      	ldr	r5, [r0, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008d22:	4b4f      	ldr	r3, [pc, #316]	; (8008e60 <SDMMC_GetCmdResp1+0x158>)
 8008d24:	402b      	ands	r3, r5
 8008d26:	4622      	mov	r2, r4
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d0f6      	beq.n	8008d1a <SDMMC_GetCmdResp1+0x12>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008d2c:	f415 5f00 	tst.w	r5, #8192	; 0x2000
 8008d30:	d1f3      	bne.n	8008d1a <SDMMC_GetCmdResp1+0x12>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008d32:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008d34:	f013 0f04 	tst.w	r3, #4
 8008d38:	d107      	bne.n	8008d4a <SDMMC_GetCmdResp1+0x42>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008d3a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008d3c:	f013 0f01 	tst.w	r3, #1
 8008d40:	d007      	beq.n	8008d52 <SDMMC_GetCmdResp1+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008d42:	2301      	movs	r3, #1
 8008d44:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d46:	4618      	mov	r0, r3
 8008d48:	e04e      	b.n	8008de8 <SDMMC_GetCmdResp1+0xe0>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008d4a:	2304      	movs	r3, #4
 8008d4c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008d4e:	4618      	mov	r0, r3
 8008d50:	e04a      	b.n	8008de8 <SDMMC_GetCmdResp1+0xe0>
 8008d52:	460d      	mov	r5, r1
 8008d54:	4604      	mov	r4, r0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008d56:	4b43      	ldr	r3, [pc, #268]	; (8008e64 <SDMMC_GetCmdResp1+0x15c>)
 8008d58:	6383      	str	r3, [r0, #56]	; 0x38
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008d5a:	f7ff ffcf 	bl	8008cfc <SDMMC_GetCommandResponse>
 8008d5e:	42a8      	cmp	r0, r5
 8008d60:	d001      	beq.n	8008d66 <SDMMC_GetCmdResp1+0x5e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d62:	2001      	movs	r0, #1
 8008d64:	e040      	b.n	8008de8 <SDMMC_GetCmdResp1+0xe0>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008d66:	2100      	movs	r1, #0
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f7ff ffca 	bl	8008d02 <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008d6e:	4b3e      	ldr	r3, [pc, #248]	; (8008e68 <SDMMC_GetCmdResp1+0x160>)
 8008d70:	4003      	ands	r3, r0
 8008d72:	b3d3      	cbz	r3, 8008dea <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008d74:	2800      	cmp	r0, #0
 8008d76:	db3a      	blt.n	8008dee <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008d78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008d7c:	d13a      	bne.n	8008df4 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008d7e:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8008d82:	d139      	bne.n	8008df8 <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008d84:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 8008d88:	d138      	bne.n	8008dfc <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008d8a:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8008d8e:	d138      	bne.n	8008e02 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008d90:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8008d94:	d138      	bne.n	8008e08 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008d96:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8008d9a:	d138      	bne.n	8008e0e <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008d9c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8008da0:	d138      	bne.n	8008e14 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008da2:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8008da6:	d138      	bne.n	8008e1a <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008da8:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8008dac:	d138      	bne.n	8008e20 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008dae:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8008db2:	d138      	bne.n	8008e26 <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008db4:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8008db8:	d138      	bne.n	8008e2c <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008dba:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8008dbe:	d138      	bne.n	8008e32 <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008dc0:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 8008dc4:	d138      	bne.n	8008e38 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008dc6:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8008dca:	d138      	bne.n	8008e3e <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008dcc:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8008dd0:	d138      	bne.n	8008e44 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008dd2:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8008dd6:	d138      	bne.n	8008e4a <SDMMC_GetCmdResp1+0x142>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008dd8:	f010 0f08 	tst.w	r0, #8
 8008ddc:	d038      	beq.n	8008e50 <SDMMC_GetCmdResp1+0x148>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008dde:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8008de2:	e001      	b.n	8008de8 <SDMMC_GetCmdResp1+0xe0>
      return SDMMC_ERROR_TIMEOUT;
 8008de4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8008de8:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_NONE;
 8008dea:	2000      	movs	r0, #0
 8008dec:	e7fc      	b.n	8008de8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008dee:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8008df2:	e7f9      	b.n	8008de8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008df4:	2040      	movs	r0, #64	; 0x40
 8008df6:	e7f7      	b.n	8008de8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008df8:	2080      	movs	r0, #128	; 0x80
 8008dfa:	e7f5      	b.n	8008de8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008dfc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008e00:	e7f2      	b.n	8008de8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008e02:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008e06:	e7ef      	b.n	8008de8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008e08:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008e0c:	e7ec      	b.n	8008de8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008e0e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008e12:	e7e9      	b.n	8008de8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008e14:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008e18:	e7e6      	b.n	8008de8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008e1a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008e1e:	e7e3      	b.n	8008de8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008e20:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008e24:	e7e0      	b.n	8008de8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CC_ERR;
 8008e26:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008e2a:	e7dd      	b.n	8008de8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008e2c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8008e30:	e7da      	b.n	8008de8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008e32:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8008e36:	e7d7      	b.n	8008de8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008e38:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008e3c:	e7d4      	b.n	8008de8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008e3e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008e42:	e7d1      	b.n	8008de8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008e44:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8008e48:	e7ce      	b.n	8008de8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_RESET;
 8008e4a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8008e4e:	e7cb      	b.n	8008de8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008e50:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008e54:	e7c8      	b.n	8008de8 <SDMMC_GetCmdResp1+0xe0>
 8008e56:	bf00      	nop
 8008e58:	20000014 	.word	0x20000014
 8008e5c:	10624dd3 	.word	0x10624dd3
 8008e60:	00200045 	.word	0x00200045
 8008e64:	002000c5 	.word	0x002000c5
 8008e68:	fdffe008 	.word	0xfdffe008

08008e6c <SDMMC_GetCmdResp6>:
{
 8008e6c:	b570      	push	{r4, r5, r6, lr}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008e6e:	4b26      	ldr	r3, [pc, #152]	; (8008f08 <SDMMC_GetCmdResp6+0x9c>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4c26      	ldr	r4, [pc, #152]	; (8008f0c <SDMMC_GetCmdResp6+0xa0>)
 8008e74:	fba4 4303 	umull	r4, r3, r4, r3
 8008e78:	0a5c      	lsrs	r4, r3, #9
 8008e7a:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e7e:	fb03 f304 	mul.w	r3, r3, r4
    if (count-- == 0U)
 8008e82:	1e5c      	subs	r4, r3, #1
 8008e84:	b3b3      	cbz	r3, 8008ef4 <SDMMC_GetCmdResp6+0x88>
    sta_reg = SDMMCx->STA;
 8008e86:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8008e88:	4623      	mov	r3, r4
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008e8a:	f015 0f45 	tst.w	r5, #69	; 0x45
 8008e8e:	d0f8      	beq.n	8008e82 <SDMMC_GetCmdResp6+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e90:	f415 5f00 	tst.w	r5, #8192	; 0x2000
 8008e94:	d1f5      	bne.n	8008e82 <SDMMC_GetCmdResp6+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008e96:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008e98:	f013 0f04 	tst.w	r3, #4
 8008e9c:	d107      	bne.n	8008eae <SDMMC_GetCmdResp6+0x42>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008e9e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008ea0:	f013 0f01 	tst.w	r3, #1
 8008ea4:	d007      	beq.n	8008eb6 <SDMMC_GetCmdResp6+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008eaa:	4618      	mov	r0, r3
 8008eac:	e024      	b.n	8008ef8 <SDMMC_GetCmdResp6+0x8c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008eae:	2304      	movs	r3, #4
 8008eb0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	e020      	b.n	8008ef8 <SDMMC_GetCmdResp6+0x8c>
 8008eb6:	4616      	mov	r6, r2
 8008eb8:	460d      	mov	r5, r1
 8008eba:	4604      	mov	r4, r0
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008ebc:	f7ff ff1e 	bl	8008cfc <SDMMC_GetCommandResponse>
 8008ec0:	42a8      	cmp	r0, r5
 8008ec2:	d001      	beq.n	8008ec8 <SDMMC_GetCmdResp6+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ec4:	2001      	movs	r0, #1
 8008ec6:	e017      	b.n	8008ef8 <SDMMC_GetCmdResp6+0x8c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008ec8:	4b11      	ldr	r3, [pc, #68]	; (8008f10 <SDMMC_GetCmdResp6+0xa4>)
 8008eca:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008ecc:	2100      	movs	r1, #0
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f7ff ff17 	bl	8008d02 <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008ed4:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8008ed8:	d008      	beq.n	8008eec <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008eda:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8008ede:	d10c      	bne.n	8008efa <SDMMC_GetCmdResp6+0x8e>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008ee0:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8008ee4:	d00c      	beq.n	8008f00 <SDMMC_GetCmdResp6+0x94>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008ee6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008eea:	e005      	b.n	8008ef8 <SDMMC_GetCmdResp6+0x8c>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008eec:	0c00      	lsrs	r0, r0, #16
 8008eee:	8030      	strh	r0, [r6, #0]
    return SDMMC_ERROR_NONE;
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	e001      	b.n	8008ef8 <SDMMC_GetCmdResp6+0x8c>
      return SDMMC_ERROR_TIMEOUT;
 8008ef4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8008ef8:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008efa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008efe:	e7fb      	b.n	8008ef8 <SDMMC_GetCmdResp6+0x8c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008f00:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008f04:	e7f8      	b.n	8008ef8 <SDMMC_GetCmdResp6+0x8c>
 8008f06:	bf00      	nop
 8008f08:	20000014 	.word	0x20000014
 8008f0c:	10624dd3 	.word	0x10624dd3
 8008f10:	002000c5 	.word	0x002000c5

08008f14 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008f14:	680b      	ldr	r3, [r1, #0]
 8008f16:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8008f18:	684b      	ldr	r3, [r1, #4]
 8008f1a:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008f1c:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 8008f1e:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008f20:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 8008f22:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 8008f24:	4313      	orrs	r3, r2
                       Data->DPSM);
 8008f26:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 8008f28:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008f2a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8008f2c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008f30:	4313      	orrs	r3, r2
 8008f32:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8008f34:	2000      	movs	r0, #0
 8008f36:	4770      	bx	lr

08008f38 <SDMMC_CmdBlockLength>:
{
 8008f38:	b530      	push	{r4, r5, lr}
 8008f3a:	b087      	sub	sp, #28
 8008f3c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008f3e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008f40:	2410      	movs	r4, #16
 8008f42:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f48:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f52:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f54:	a901      	add	r1, sp, #4
 8008f56:	f7ff febf 	bl	8008cd8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f5e:	4621      	mov	r1, r4
 8008f60:	4628      	mov	r0, r5
 8008f62:	f7ff fed1 	bl	8008d08 <SDMMC_GetCmdResp1>
}
 8008f66:	b007      	add	sp, #28
 8008f68:	bd30      	pop	{r4, r5, pc}

08008f6a <SDMMC_CmdReadSingleBlock>:
{
 8008f6a:	b530      	push	{r4, r5, lr}
 8008f6c:	b087      	sub	sp, #28
 8008f6e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008f70:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008f72:	2411      	movs	r4, #17
 8008f74:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f7a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f84:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f86:	a901      	add	r1, sp, #4
 8008f88:	f7ff fea6 	bl	8008cd8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f90:	4621      	mov	r1, r4
 8008f92:	4628      	mov	r0, r5
 8008f94:	f7ff feb8 	bl	8008d08 <SDMMC_GetCmdResp1>
}
 8008f98:	b007      	add	sp, #28
 8008f9a:	bd30      	pop	{r4, r5, pc}

08008f9c <SDMMC_CmdReadMultiBlock>:
{
 8008f9c:	b530      	push	{r4, r5, lr}
 8008f9e:	b087      	sub	sp, #28
 8008fa0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008fa2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008fa4:	2412      	movs	r4, #18
 8008fa6:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fac:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fb6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fb8:	a901      	add	r1, sp, #4
 8008fba:	f7ff fe8d 	bl	8008cd8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	f7ff fe9f 	bl	8008d08 <SDMMC_GetCmdResp1>
}
 8008fca:	b007      	add	sp, #28
 8008fcc:	bd30      	pop	{r4, r5, pc}

08008fce <SDMMC_CmdWriteSingleBlock>:
{
 8008fce:	b530      	push	{r4, r5, lr}
 8008fd0:	b087      	sub	sp, #28
 8008fd2:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008fd4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008fd6:	2418      	movs	r4, #24
 8008fd8:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fde:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fe8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fea:	a901      	add	r1, sp, #4
 8008fec:	f7ff fe74 	bl	8008cd8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	f7ff fe86 	bl	8008d08 <SDMMC_GetCmdResp1>
}
 8008ffc:	b007      	add	sp, #28
 8008ffe:	bd30      	pop	{r4, r5, pc}

08009000 <SDMMC_CmdWriteMultiBlock>:
{
 8009000:	b530      	push	{r4, r5, lr}
 8009002:	b087      	sub	sp, #28
 8009004:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009006:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009008:	2419      	movs	r4, #25
 800900a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800900c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009010:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009012:	2300      	movs	r3, #0
 8009014:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800901a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800901c:	a901      	add	r1, sp, #4
 800901e:	f7ff fe5b 	bl	8008cd8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009022:	f241 3288 	movw	r2, #5000	; 0x1388
 8009026:	4621      	mov	r1, r4
 8009028:	4628      	mov	r0, r5
 800902a:	f7ff fe6d 	bl	8008d08 <SDMMC_GetCmdResp1>
}
 800902e:	b007      	add	sp, #28
 8009030:	bd30      	pop	{r4, r5, pc}
	...

08009034 <SDMMC_CmdStopTransfer>:
{
 8009034:	b530      	push	{r4, r5, lr}
 8009036:	b087      	sub	sp, #28
 8009038:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800903a:	2300      	movs	r3, #0
 800903c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800903e:	250c      	movs	r5, #12
 8009040:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009042:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009046:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009048:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800904a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800904e:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009050:	68c3      	ldr	r3, [r0, #12]
 8009052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009056:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009058:	68c3      	ldr	r3, [r0, #12]
 800905a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800905e:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009060:	a901      	add	r1, sp, #4
 8009062:	f7ff fe39 	bl	8008cd8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009066:	4a05      	ldr	r2, [pc, #20]	; (800907c <SDMMC_CmdStopTransfer+0x48>)
 8009068:	4629      	mov	r1, r5
 800906a:	4620      	mov	r0, r4
 800906c:	f7ff fe4c 	bl	8008d08 <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009070:	68e3      	ldr	r3, [r4, #12]
 8009072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009076:	60e3      	str	r3, [r4, #12]
}
 8009078:	b007      	add	sp, #28
 800907a:	bd30      	pop	{r4, r5, pc}
 800907c:	05f5e100 	.word	0x05f5e100

08009080 <SDMMC_CmdSelDesel>:
{
 8009080:	b530      	push	{r4, r5, lr}
 8009082:	b087      	sub	sp, #28
 8009084:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009086:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009088:	2407      	movs	r4, #7
 800908a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800908c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009090:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009092:	2300      	movs	r3, #0
 8009094:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800909a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800909c:	a901      	add	r1, sp, #4
 800909e:	f7ff fe1b 	bl	8008cd8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80090a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80090a6:	4621      	mov	r1, r4
 80090a8:	4628      	mov	r0, r5
 80090aa:	f7ff fe2d 	bl	8008d08 <SDMMC_GetCmdResp1>
}
 80090ae:	b007      	add	sp, #28
 80090b0:	bd30      	pop	{r4, r5, pc}

080090b2 <SDMMC_CmdGoIdleState>:
{
 80090b2:	b510      	push	{r4, lr}
 80090b4:	b086      	sub	sp, #24
 80090b6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80090b8:	2300      	movs	r3, #0
 80090ba:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80090bc:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80090be:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090c0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090c6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090c8:	a901      	add	r1, sp, #4
 80090ca:	f7ff fe05 	bl	8008cd8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80090ce:	4620      	mov	r0, r4
 80090d0:	f7ff fd26 	bl	8008b20 <SDMMC_GetCmdError>
}
 80090d4:	b006      	add	sp, #24
 80090d6:	bd10      	pop	{r4, pc}

080090d8 <SDMMC_CmdOperCond>:
{
 80090d8:	b510      	push	{r4, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80090de:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80090e2:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80090e4:	2308      	movs	r3, #8
 80090e6:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090ec:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090ee:	2300      	movs	r3, #0
 80090f0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090f6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090f8:	a901      	add	r1, sp, #4
 80090fa:	f7ff fded 	bl	8008cd8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80090fe:	4620      	mov	r0, r4
 8009100:	f7ff fd88 	bl	8008c14 <SDMMC_GetCmdResp7>
}
 8009104:	b006      	add	sp, #24
 8009106:	bd10      	pop	{r4, pc}

08009108 <SDMMC_CmdAppCommand>:
{
 8009108:	b530      	push	{r4, r5, lr}
 800910a:	b087      	sub	sp, #28
 800910c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800910e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009110:	2437      	movs	r4, #55	; 0x37
 8009112:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009114:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009118:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800911a:	2300      	movs	r3, #0
 800911c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800911e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009122:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009124:	a901      	add	r1, sp, #4
 8009126:	f7ff fdd7 	bl	8008cd8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800912a:	f241 3288 	movw	r2, #5000	; 0x1388
 800912e:	4621      	mov	r1, r4
 8009130:	4628      	mov	r0, r5
 8009132:	f7ff fde9 	bl	8008d08 <SDMMC_GetCmdResp1>
}
 8009136:	b007      	add	sp, #28
 8009138:	bd30      	pop	{r4, r5, pc}

0800913a <SDMMC_CmdAppOperCommand>:
{
 800913a:	b510      	push	{r4, lr}
 800913c:	b086      	sub	sp, #24
 800913e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8009140:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009142:	2329      	movs	r3, #41	; 0x29
 8009144:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800914a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800914c:	2300      	movs	r3, #0
 800914e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009154:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009156:	a901      	add	r1, sp, #4
 8009158:	f7ff fdbe 	bl	8008cd8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800915c:	4620      	mov	r0, r4
 800915e:	f7ff fd2f 	bl	8008bc0 <SDMMC_GetCmdResp3>
}
 8009162:	b006      	add	sp, #24
 8009164:	bd10      	pop	{r4, pc}

08009166 <SDMMC_CmdBusWidth>:
{
 8009166:	b530      	push	{r4, r5, lr}
 8009168:	b087      	sub	sp, #28
 800916a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800916c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800916e:	2406      	movs	r4, #6
 8009170:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009172:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009176:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009178:	2300      	movs	r3, #0
 800917a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800917c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009180:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009182:	a901      	add	r1, sp, #4
 8009184:	f7ff fda8 	bl	8008cd8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009188:	f241 3288 	movw	r2, #5000	; 0x1388
 800918c:	4621      	mov	r1, r4
 800918e:	4628      	mov	r0, r5
 8009190:	f7ff fdba 	bl	8008d08 <SDMMC_GetCmdResp1>
}
 8009194:	b007      	add	sp, #28
 8009196:	bd30      	pop	{r4, r5, pc}

08009198 <SDMMC_CmdSendSCR>:
{
 8009198:	b530      	push	{r4, r5, lr}
 800919a:	b087      	sub	sp, #28
 800919c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 800919e:	2300      	movs	r3, #0
 80091a0:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80091a2:	2433      	movs	r4, #51	; 0x33
 80091a4:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80091aa:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091ac:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091b2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091b4:	a901      	add	r1, sp, #4
 80091b6:	f7ff fd8f 	bl	8008cd8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80091ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80091be:	4621      	mov	r1, r4
 80091c0:	4628      	mov	r0, r5
 80091c2:	f7ff fda1 	bl	8008d08 <SDMMC_GetCmdResp1>
}
 80091c6:	b007      	add	sp, #28
 80091c8:	bd30      	pop	{r4, r5, pc}

080091ca <SDMMC_CmdSendCID>:
{
 80091ca:	b510      	push	{r4, lr}
 80091cc:	b086      	sub	sp, #24
 80091ce:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80091d0:	2300      	movs	r3, #0
 80091d2:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80091d4:	2202      	movs	r2, #2
 80091d6:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80091d8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80091dc:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091de:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091e4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091e6:	a901      	add	r1, sp, #4
 80091e8:	f7ff fd76 	bl	8008cd8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80091ec:	4620      	mov	r0, r4
 80091ee:	f7ff fcb5 	bl	8008b5c <SDMMC_GetCmdResp2>
}
 80091f2:	b006      	add	sp, #24
 80091f4:	bd10      	pop	{r4, pc}

080091f6 <SDMMC_CmdSendCSD>:
{
 80091f6:	b510      	push	{r4, lr}
 80091f8:	b086      	sub	sp, #24
 80091fa:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80091fc:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80091fe:	2309      	movs	r3, #9
 8009200:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009202:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009206:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009208:	2300      	movs	r3, #0
 800920a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800920c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009210:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009212:	a901      	add	r1, sp, #4
 8009214:	f7ff fd60 	bl	8008cd8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009218:	4620      	mov	r0, r4
 800921a:	f7ff fc9f 	bl	8008b5c <SDMMC_GetCmdResp2>
}
 800921e:	b006      	add	sp, #24
 8009220:	bd10      	pop	{r4, pc}

08009222 <SDMMC_CmdSetRelAdd>:
{
 8009222:	b570      	push	{r4, r5, r6, lr}
 8009224:	b086      	sub	sp, #24
 8009226:	4605      	mov	r5, r0
 8009228:	460e      	mov	r6, r1
  sdmmc_cmdinit.Argument         = 0U;
 800922a:	2300      	movs	r3, #0
 800922c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800922e:	2403      	movs	r4, #3
 8009230:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009236:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009238:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800923a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800923e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009240:	a901      	add	r1, sp, #4
 8009242:	f7ff fd49 	bl	8008cd8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009246:	4632      	mov	r2, r6
 8009248:	4621      	mov	r1, r4
 800924a:	4628      	mov	r0, r5
 800924c:	f7ff fe0e 	bl	8008e6c <SDMMC_GetCmdResp6>
}
 8009250:	b006      	add	sp, #24
 8009252:	bd70      	pop	{r4, r5, r6, pc}

08009254 <SDMMC_CmdSendStatus>:
{
 8009254:	b530      	push	{r4, r5, lr}
 8009256:	b087      	sub	sp, #28
 8009258:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 800925a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800925c:	240d      	movs	r4, #13
 800925e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009264:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009266:	2300      	movs	r3, #0
 8009268:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800926a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800926e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009270:	a901      	add	r1, sp, #4
 8009272:	f7ff fd31 	bl	8008cd8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009276:	f241 3288 	movw	r2, #5000	; 0x1388
 800927a:	4621      	mov	r1, r4
 800927c:	4628      	mov	r0, r5
 800927e:	f7ff fd43 	bl	8008d08 <SDMMC_GetCmdResp1>
}
 8009282:	b007      	add	sp, #28
 8009284:	bd30      	pop	{r4, r5, pc}

08009286 <SDMMC_CmdStatusRegister>:
{
 8009286:	b530      	push	{r4, r5, lr}
 8009288:	b087      	sub	sp, #28
 800928a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 800928c:	2300      	movs	r3, #0
 800928e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009290:	240d      	movs	r4, #13
 8009292:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009294:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009298:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800929a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800929c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092a0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092a2:	a901      	add	r1, sp, #4
 80092a4:	f7ff fd18 	bl	8008cd8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80092a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80092ac:	4621      	mov	r1, r4
 80092ae:	4628      	mov	r0, r5
 80092b0:	f7ff fd2a 	bl	8008d08 <SDMMC_GetCmdResp1>
}
 80092b4:	b007      	add	sp, #28
 80092b6:	bd30      	pop	{r4, r5, pc}

080092b8 <SDMMC_CmdVoltageSwitch>:
{
 80092b8:	b530      	push	{r4, r5, lr}
 80092ba:	b087      	sub	sp, #28
 80092bc:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0x00000000;
 80092be:	2300      	movs	r3, #0
 80092c0:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 80092c2:	240b      	movs	r4, #11
 80092c4:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80092ca:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092cc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092d2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092d4:	a901      	add	r1, sp, #4
 80092d6:	f7ff fcff 	bl	8008cd8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 80092da:	f241 3288 	movw	r2, #5000	; 0x1388
 80092de:	4621      	mov	r1, r4
 80092e0:	4628      	mov	r0, r5
 80092e2:	f7ff fd11 	bl	8008d08 <SDMMC_GetCmdResp1>
}
 80092e6:	b007      	add	sp, #28
 80092e8:	bd30      	pop	{r4, r5, pc}
	...

080092ec <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 80092ec:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80092ee:	3301      	adds	r3, #1
 80092f0:	4a0c      	ldr	r2, [pc, #48]	; (8009324 <USB_CoreReset+0x38>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d811      	bhi.n	800931a <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092f6:	6902      	ldr	r2, [r0, #16]
 80092f8:	2a00      	cmp	r2, #0
 80092fa:	daf8      	bge.n	80092ee <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80092fc:	6903      	ldr	r3, [r0, #16]
 80092fe:	f043 0301 	orr.w	r3, r3, #1
 8009302:	6103      	str	r3, [r0, #16]
  count = 0U;
 8009304:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 8009306:	3301      	adds	r3, #1
 8009308:	4a06      	ldr	r2, [pc, #24]	; (8009324 <USB_CoreReset+0x38>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d807      	bhi.n	800931e <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800930e:	6902      	ldr	r2, [r0, #16]
 8009310:	f012 0f01 	tst.w	r2, #1
 8009314:	d1f7      	bne.n	8009306 <USB_CoreReset+0x1a>

  return HAL_OK;
 8009316:	2000      	movs	r0, #0
 8009318:	4770      	bx	lr
      return HAL_TIMEOUT;
 800931a:	2003      	movs	r0, #3
 800931c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800931e:	2003      	movs	r0, #3
}
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	00030d40 	.word	0x00030d40

08009328 <USB_CoreInit>:
{
 8009328:	b084      	sub	sp, #16
 800932a:	b510      	push	{r4, lr}
 800932c:	4604      	mov	r4, r0
 800932e:	a803      	add	r0, sp, #12
 8009330:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009334:	9b08      	ldr	r3, [sp, #32]
 8009336:	2b01      	cmp	r3, #1
 8009338:	d11d      	bne.n	8009376 <USB_CoreInit+0x4e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800933a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800933c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009340:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009342:	68e2      	ldr	r2, [r4, #12]
 8009344:	4b1a      	ldr	r3, [pc, #104]	; (80093b0 <USB_CoreInit+0x88>)
 8009346:	4013      	ands	r3, r2
 8009348:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800934a:	68e3      	ldr	r3, [r4, #12]
 800934c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009350:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8009352:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009354:	2b01      	cmp	r3, #1
 8009356:	d009      	beq.n	800936c <USB_CoreInit+0x44>
    ret = USB_CoreReset(USBx);
 8009358:	4620      	mov	r0, r4
 800935a:	f7ff ffc7 	bl	80092ec <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800935e:	9b06      	ldr	r3, [sp, #24]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d01b      	beq.n	800939c <USB_CoreInit+0x74>
}
 8009364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009368:	b004      	add	sp, #16
 800936a:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800936c:	68e3      	ldr	r3, [r4, #12]
 800936e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009372:	60e3      	str	r3, [r4, #12]
 8009374:	e7f0      	b.n	8009358 <USB_CoreInit+0x30>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009376:	68e3      	ldr	r3, [r4, #12]
 8009378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800937c:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 800937e:	4620      	mov	r0, r4
 8009380:	f7ff ffb4 	bl	80092ec <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8009384:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009386:	b923      	cbnz	r3, 8009392 <USB_CoreInit+0x6a>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009388:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800938a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800938e:	63a3      	str	r3, [r4, #56]	; 0x38
 8009390:	e7e5      	b.n	800935e <USB_CoreInit+0x36>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009392:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009398:	63a3      	str	r3, [r4, #56]	; 0x38
 800939a:	e7e0      	b.n	800935e <USB_CoreInit+0x36>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800939c:	68a3      	ldr	r3, [r4, #8]
 800939e:	f043 0308 	orr.w	r3, r3, #8
 80093a2:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80093a4:	68a3      	ldr	r3, [r4, #8]
 80093a6:	f043 0320 	orr.w	r3, r3, #32
 80093aa:	60a3      	str	r3, [r4, #8]
 80093ac:	e7da      	b.n	8009364 <USB_CoreInit+0x3c>
 80093ae:	bf00      	nop
 80093b0:	ffbdffbf 	.word	0xffbdffbf

080093b4 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80093b4:	6883      	ldr	r3, [r0, #8]
 80093b6:	f023 0301 	bic.w	r3, r3, #1
 80093ba:	6083      	str	r3, [r0, #8]
}
 80093bc:	2000      	movs	r0, #0
 80093be:	4770      	bx	lr

080093c0 <USB_SetCurrentMode>:
{
 80093c0:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80093c2:	68c3      	ldr	r3, [r0, #12]
 80093c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80093c8:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80093ca:	2901      	cmp	r1, #1
 80093cc:	d009      	beq.n	80093e2 <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 80093ce:	b969      	cbnz	r1, 80093ec <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80093d0:	68c3      	ldr	r3, [r0, #12]
 80093d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093d6:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80093d8:	2032      	movs	r0, #50	; 0x32
 80093da:	f7f7 f963 	bl	80006a4 <HAL_Delay>
  return HAL_OK;
 80093de:	2000      	movs	r0, #0
}
 80093e0:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80093e2:	68c3      	ldr	r3, [r0, #12]
 80093e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80093e8:	60c3      	str	r3, [r0, #12]
 80093ea:	e7f5      	b.n	80093d8 <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 80093ec:	2001      	movs	r0, #1
 80093ee:	e7f7      	b.n	80093e0 <USB_SetCurrentMode+0x20>

080093f0 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80093f0:	0189      	lsls	r1, r1, #6
 80093f2:	f041 0120 	orr.w	r1, r1, #32
 80093f6:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 80093f8:	2300      	movs	r3, #0
    if (++count > 200000U)
 80093fa:	3301      	adds	r3, #1
 80093fc:	4a05      	ldr	r2, [pc, #20]	; (8009414 <USB_FlushTxFifo+0x24>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d805      	bhi.n	800940e <USB_FlushTxFifo+0x1e>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009402:	6902      	ldr	r2, [r0, #16]
 8009404:	f012 0f20 	tst.w	r2, #32
 8009408:	d1f7      	bne.n	80093fa <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800940a:	2000      	movs	r0, #0
 800940c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800940e:	2003      	movs	r0, #3
}
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	00030d40 	.word	0x00030d40

08009418 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009418:	2310      	movs	r3, #16
 800941a:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 800941c:	2300      	movs	r3, #0
    if (++count > 200000U)
 800941e:	3301      	adds	r3, #1
 8009420:	4a05      	ldr	r2, [pc, #20]	; (8009438 <USB_FlushRxFifo+0x20>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d805      	bhi.n	8009432 <USB_FlushRxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009426:	6902      	ldr	r2, [r0, #16]
 8009428:	f012 0f10 	tst.w	r2, #16
 800942c:	d1f7      	bne.n	800941e <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800942e:	2000      	movs	r0, #0
 8009430:	4770      	bx	lr
      return HAL_TIMEOUT;
 8009432:	2003      	movs	r0, #3
}
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	00030d40 	.word	0x00030d40

0800943c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800943c:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800943e:	2300      	movs	r3, #0
 8009440:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8009442:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8009446:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009448:	9b01      	ldr	r3, [sp, #4]
 800944a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800944e:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009450:	9b01      	ldr	r3, [sp, #4]
 8009452:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8009456:	d101      	bne.n	800945c <USB_DriveVbus+0x20>
 8009458:	2901      	cmp	r1, #1
 800945a:	d00c      	beq.n	8009476 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800945c:	9b01      	ldr	r3, [sp, #4]
 800945e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8009462:	d005      	beq.n	8009470 <USB_DriveVbus+0x34>
 8009464:	b921      	cbnz	r1, 8009470 <USB_DriveVbus+0x34>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009466:	9b01      	ldr	r3, [sp, #4]
 8009468:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800946c:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8009470:	2000      	movs	r0, #0
 8009472:	b002      	add	sp, #8
 8009474:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009476:	9b01      	ldr	r3, [sp, #4]
 8009478:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800947c:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
 8009480:	e7ec      	b.n	800945c <USB_DriveVbus+0x20>
	...

08009484 <USB_HostInit>:
{
 8009484:	b084      	sub	sp, #16
 8009486:	b538      	push	{r3, r4, r5, lr}
 8009488:	4604      	mov	r4, r0
 800948a:	a805      	add	r0, sp, #20
 800948c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009490:	4625      	mov	r5, r4
  USBx_PCGCCTL = 0U;
 8009492:	2300      	movs	r3, #0
 8009494:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8009498:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800949a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800949e:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80094a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80094a2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80094a6:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 80094a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80094aa:	f413 7f80 	tst.w	r3, #256	; 0x100
 80094ae:	d010      	beq.n	80094d2 <USB_HostInit+0x4e>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 80094b0:	9b07      	ldr	r3, [sp, #28]
 80094b2:	2b03      	cmp	r3, #3
 80094b4:	d006      	beq.n	80094c4 <USB_HostInit+0x40>
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80094b6:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 80094ba:	f023 0304 	bic.w	r3, r3, #4
 80094be:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 80094c2:	e00c      	b.n	80094de <USB_HostInit+0x5a>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80094c4:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 80094c8:	f043 0304 	orr.w	r3, r3, #4
 80094cc:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 80094d0:	e005      	b.n	80094de <USB_HostInit+0x5a>
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80094d2:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 80094d6:	f023 0304 	bic.w	r3, r3, #4
 80094da:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80094de:	2110      	movs	r1, #16
 80094e0:	4620      	mov	r0, r4
 80094e2:	f7ff ff85 	bl	80093f0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80094e6:	4620      	mov	r0, r4
 80094e8:	f7ff ff96 	bl	8009418 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 80094ec:	2200      	movs	r2, #0
 80094ee:	e009      	b.n	8009504 <USB_HostInit+0x80>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80094f0:	eb05 1342 	add.w	r3, r5, r2, lsl #5
 80094f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80094f8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    USBx_HC(i)->HCINTMSK = 0U;
 80094fc:	2100      	movs	r1, #0
 80094fe:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
  for (i = 0U; i < cfg.Host_channels; i++)
 8009502:	3201      	adds	r2, #1
 8009504:	9b06      	ldr	r3, [sp, #24]
 8009506:	4293      	cmp	r3, r2
 8009508:	d8f2      	bhi.n	80094f0 <USB_HostInit+0x6c>
  (void)USB_DriveVbus(USBx, 1U);
 800950a:	2101      	movs	r1, #1
 800950c:	4620      	mov	r0, r4
 800950e:	f7ff ff95 	bl	800943c <USB_DriveVbus>
  HAL_Delay(200U);
 8009512:	20c8      	movs	r0, #200	; 0xc8
 8009514:	f7f7 f8c6 	bl	80006a4 <HAL_Delay>
  USBx->GINTMSK = 0U;
 8009518:	2300      	movs	r3, #0
 800951a:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800951c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009520:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009522:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009524:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009528:	d017      	beq.n	800955a <USB_HostInit+0xd6>
    USBx->GRXFSIZ  = 0x200U;
 800952a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800952e:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009530:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8009534:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009536:	4b0d      	ldr	r3, [pc, #52]	; (800956c <USB_HostInit+0xe8>)
 8009538:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 800953c:	9b08      	ldr	r3, [sp, #32]
 800953e:	b91b      	cbnz	r3, 8009548 <USB_HostInit+0xc4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009540:	69a3      	ldr	r3, [r4, #24]
 8009542:	f043 0310 	orr.w	r3, r3, #16
 8009546:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009548:	69a2      	ldr	r2, [r4, #24]
 800954a:	4b09      	ldr	r3, [pc, #36]	; (8009570 <USB_HostInit+0xec>)
 800954c:	4313      	orrs	r3, r2
 800954e:	61a3      	str	r3, [r4, #24]
}
 8009550:	2000      	movs	r0, #0
 8009552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009556:	b004      	add	sp, #16
 8009558:	4770      	bx	lr
    USBx->GRXFSIZ  = 0x80U;
 800955a:	2380      	movs	r3, #128	; 0x80
 800955c:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800955e:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8009562:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009564:	4b03      	ldr	r3, [pc, #12]	; (8009574 <USB_HostInit+0xf0>)
 8009566:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800956a:	e7e7      	b.n	800953c <USB_HostInit+0xb8>
 800956c:	00e00300 	.word	0x00e00300
 8009570:	a3200008 	.word	0xa3200008
 8009574:	004000e0 	.word	0x004000e0

08009578 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8009578:	4b10      	ldr	r3, [pc, #64]	; (80095bc <FATFS_LinkDriverEx+0x44>)
 800957a:	7a5b      	ldrb	r3, [r3, #9]
 800957c:	b9db      	cbnz	r3, 80095b6 <FATFS_LinkDriverEx+0x3e>
{
 800957e:	b430      	push	{r4, r5}
  {
    disk.is_initialized[disk.nbr] = 0;
 8009580:	4b0e      	ldr	r3, [pc, #56]	; (80095bc <FATFS_LinkDriverEx+0x44>)
 8009582:	7a5d      	ldrb	r5, [r3, #9]
 8009584:	b2ed      	uxtb	r5, r5
 8009586:	2400      	movs	r4, #0
 8009588:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 800958a:	7a5d      	ldrb	r5, [r3, #9]
 800958c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8009590:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8009592:	7a58      	ldrb	r0, [r3, #9]
 8009594:	4418      	add	r0, r3
 8009596:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8009598:	7a5a      	ldrb	r2, [r3, #9]
 800959a:	b2d2      	uxtb	r2, r2
 800959c:	1c50      	adds	r0, r2, #1
 800959e:	b2c0      	uxtb	r0, r0
 80095a0:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
 80095a2:	3230      	adds	r2, #48	; 0x30
 80095a4:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 80095a6:	233a      	movs	r3, #58	; 0x3a
 80095a8:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 80095aa:	232f      	movs	r3, #47	; 0x2f
 80095ac:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 80095ae:	70cc      	strb	r4, [r1, #3]
    ret = 0;
 80095b0:	4620      	mov	r0, r4
  }

  return ret;
}
 80095b2:	bc30      	pop	{r4, r5}
 80095b4:	4770      	bx	lr
  uint8_t ret = 1;
 80095b6:	2001      	movs	r0, #1
}
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop
 80095bc:	20000038 	.word	0x20000038

080095c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80095c0:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 80095c2:	2200      	movs	r2, #0
 80095c4:	f7ff ffd8 	bl	8009578 <FATFS_LinkDriverEx>
}
 80095c8:	bd08      	pop	{r3, pc}
	...

080095cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80095cc:	b500      	push	{lr}
 80095ce:	b08b      	sub	sp, #44	; 0x2c
  ADC_MultiModeTypeDef multimode = {0};
 80095d0:	2300      	movs	r3, #0
 80095d2:	9307      	str	r3, [sp, #28]
 80095d4:	9308      	str	r3, [sp, #32]
 80095d6:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 80095d8:	9300      	str	r3, [sp, #0]
 80095da:	9301      	str	r3, [sp, #4]
 80095dc:	9302      	str	r3, [sp, #8]
 80095de:	9303      	str	r3, [sp, #12]
 80095e0:	9304      	str	r3, [sp, #16]
 80095e2:	9305      	str	r3, [sp, #20]
 80095e4:	9306      	str	r3, [sp, #24]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80095e6:	4841      	ldr	r0, [pc, #260]	; (80096ec <MX_ADC1_Init+0x120>)
 80095e8:	4a41      	ldr	r2, [pc, #260]	; (80096f0 <MX_ADC1_Init+0x124>)
 80095ea:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 80095ec:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80095f0:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80095f2:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80095f4:	2201      	movs	r2, #1
 80095f6:	60c2      	str	r2, [r0, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80095f8:	2108      	movs	r1, #8
 80095fa:	6101      	str	r1, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80095fc:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80095fe:	7542      	strb	r2, [r0, #21]
  hadc1.Init.NbrOfConversion = 6;
 8009600:	2206      	movs	r2, #6
 8009602:	6182      	str	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009604:	7703      	strb	r3, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009606:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009608:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800960a:	2203      	movs	r2, #3
 800960c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800960e:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8009610:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8009612:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009616:	f7f7 fe2b 	bl	8001270 <HAL_ADC_Init>
 800961a:	2800      	cmp	r0, #0
 800961c:	d14d      	bne.n	80096ba <MX_ADC1_Init+0xee>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800961e:	a90a      	add	r1, sp, #40	; 0x28
 8009620:	2300      	movs	r3, #0
 8009622:	f841 3d0c 	str.w	r3, [r1, #-12]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8009626:	4831      	ldr	r0, [pc, #196]	; (80096ec <MX_ADC1_Init+0x120>)
 8009628:	f7f7 ff66 	bl	80014f8 <HAL_ADCEx_MultiModeConfigChannel>
 800962c:	2800      	cmp	r0, #0
 800962e:	d147      	bne.n	80096c0 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8009630:	4b30      	ldr	r3, [pc, #192]	; (80096f4 <MX_ADC1_Init+0x128>)
 8009632:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8009634:	2306      	movs	r3, #6
 8009636:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8009638:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800963a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800963e:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8009640:	2304      	movs	r3, #4
 8009642:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8009644:	2300      	movs	r3, #0
 8009646:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009648:	4669      	mov	r1, sp
 800964a:	4828      	ldr	r0, [pc, #160]	; (80096ec <MX_ADC1_Init+0x120>)
 800964c:	f7f7 fa08 	bl	8000a60 <HAL_ADC_ConfigChannel>
 8009650:	2800      	cmp	r0, #0
 8009652:	d138      	bne.n	80096c6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8009654:	4b28      	ldr	r3, [pc, #160]	; (80096f8 <MX_ADC1_Init+0x12c>)
 8009656:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8009658:	230c      	movs	r3, #12
 800965a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800965c:	4669      	mov	r1, sp
 800965e:	4823      	ldr	r0, [pc, #140]	; (80096ec <MX_ADC1_Init+0x120>)
 8009660:	f7f7 f9fe 	bl	8000a60 <HAL_ADC_ConfigChannel>
 8009664:	2800      	cmp	r0, #0
 8009666:	d131      	bne.n	80096cc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8009668:	4b24      	ldr	r3, [pc, #144]	; (80096fc <MX_ADC1_Init+0x130>)
 800966a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800966c:	2312      	movs	r3, #18
 800966e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009670:	4669      	mov	r1, sp
 8009672:	481e      	ldr	r0, [pc, #120]	; (80096ec <MX_ADC1_Init+0x120>)
 8009674:	f7f7 f9f4 	bl	8000a60 <HAL_ADC_ConfigChannel>
 8009678:	bb58      	cbnz	r0, 80096d2 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_18;
 800967a:	4b21      	ldr	r3, [pc, #132]	; (8009700 <MX_ADC1_Init+0x134>)
 800967c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800967e:	2318      	movs	r3, #24
 8009680:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009682:	4669      	mov	r1, sp
 8009684:	4819      	ldr	r0, [pc, #100]	; (80096ec <MX_ADC1_Init+0x120>)
 8009686:	f7f7 f9eb 	bl	8000a60 <HAL_ADC_ConfigChannel>
 800968a:	bb28      	cbnz	r0, 80096d8 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800968c:	4b1d      	ldr	r3, [pc, #116]	; (8009704 <MX_ADC1_Init+0x138>)
 800968e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8009690:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009694:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009696:	4669      	mov	r1, sp
 8009698:	4814      	ldr	r0, [pc, #80]	; (80096ec <MX_ADC1_Init+0x120>)
 800969a:	f7f7 f9e1 	bl	8000a60 <HAL_ADC_ConfigChannel>
 800969e:	b9f0      	cbnz	r0, 80096de <MX_ADC1_Init+0x112>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80096a0:	4b19      	ldr	r3, [pc, #100]	; (8009708 <MX_ADC1_Init+0x13c>)
 80096a2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80096a4:	f44f 7383 	mov.w	r3, #262	; 0x106
 80096a8:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80096aa:	4669      	mov	r1, sp
 80096ac:	480f      	ldr	r0, [pc, #60]	; (80096ec <MX_ADC1_Init+0x120>)
 80096ae:	f7f7 f9d7 	bl	8000a60 <HAL_ADC_ConfigChannel>
 80096b2:	b9b8      	cbnz	r0, 80096e4 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
  }

}
 80096b4:	b00b      	add	sp, #44	; 0x2c
 80096b6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80096ba:	f000 ff03 	bl	800a4c4 <Error_Handler>
 80096be:	e7ae      	b.n	800961e <MX_ADC1_Init+0x52>
    Error_Handler();
 80096c0:	f000 ff00 	bl	800a4c4 <Error_Handler>
 80096c4:	e7b4      	b.n	8009630 <MX_ADC1_Init+0x64>
    Error_Handler();
 80096c6:	f000 fefd 	bl	800a4c4 <Error_Handler>
 80096ca:	e7c3      	b.n	8009654 <MX_ADC1_Init+0x88>
    Error_Handler();
 80096cc:	f000 fefa 	bl	800a4c4 <Error_Handler>
 80096d0:	e7ca      	b.n	8009668 <MX_ADC1_Init+0x9c>
    Error_Handler();
 80096d2:	f000 fef7 	bl	800a4c4 <Error_Handler>
 80096d6:	e7d0      	b.n	800967a <MX_ADC1_Init+0xae>
    Error_Handler();
 80096d8:	f000 fef4 	bl	800a4c4 <Error_Handler>
 80096dc:	e7d6      	b.n	800968c <MX_ADC1_Init+0xc0>
    Error_Handler();
 80096de:	f000 fef1 	bl	800a4c4 <Error_Handler>
 80096e2:	e7dd      	b.n	80096a0 <MX_ADC1_Init+0xd4>
    Error_Handler();
 80096e4:	f000 feee 	bl	800a4c4 <Error_Handler>
}
 80096e8:	e7e4      	b.n	80096b4 <MX_ADC1_Init+0xe8>
 80096ea:	bf00      	nop
 80096ec:	20000070 	.word	0x20000070
 80096f0:	40022000 	.word	0x40022000
 80096f4:	1d500080 	.word	0x1d500080
 80096f8:	0c900008 	.word	0x0c900008
 80096fc:	4fb80000 	.word	0x4fb80000
 8009700:	4b840000 	.word	0x4b840000
 8009704:	3ef08000 	.word	0x3ef08000
 8009708:	3ac04000 	.word	0x3ac04000

0800970c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800970c:	b500      	push	{lr}
 800970e:	b089      	sub	sp, #36	; 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 8009710:	2300      	movs	r3, #0
 8009712:	9301      	str	r3, [sp, #4]
 8009714:	9302      	str	r3, [sp, #8]
 8009716:	9303      	str	r3, [sp, #12]
 8009718:	9304      	str	r3, [sp, #16]
 800971a:	9305      	str	r3, [sp, #20]
 800971c:	9306      	str	r3, [sp, #24]
 800971e:	9307      	str	r3, [sp, #28]

  /** Common config 
  */
  hadc3.Instance = ADC3;
 8009720:	482f      	ldr	r0, [pc, #188]	; (80097e0 <MX_ADC3_Init+0xd4>)
 8009722:	4a30      	ldr	r2, [pc, #192]	; (80097e4 <MX_ADC3_Init+0xd8>)
 8009724:	6002      	str	r2, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8009726:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 800972a:	6042      	str	r2, [r0, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800972c:	6083      	str	r3, [r0, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800972e:	2201      	movs	r2, #1
 8009730:	60c2      	str	r2, [r0, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009732:	2104      	movs	r1, #4
 8009734:	6101      	str	r1, [r0, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8009736:	7503      	strb	r3, [r0, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8009738:	7542      	strb	r2, [r0, #21]
  hadc3.Init.NbrOfConversion = 5;
 800973a:	2205      	movs	r2, #5
 800973c:	6182      	str	r2, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800973e:	7703      	strb	r3, [r0, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009740:	6243      	str	r3, [r0, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009742:	6283      	str	r3, [r0, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8009744:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009746:	6303      	str	r3, [r0, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8009748:	6343      	str	r3, [r0, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800974a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800974e:	f7f7 fd8f 	bl	8001270 <HAL_ADC_Init>
 8009752:	2800      	cmp	r0, #0
 8009754:	d131      	bne.n	80097ba <MX_ADC3_Init+0xae>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8009756:	4b24      	ldr	r3, [pc, #144]	; (80097e8 <MX_ADC3_Init+0xdc>)
 8009758:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800975a:	2306      	movs	r3, #6
 800975c:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800975e:	2300      	movs	r3, #0
 8009760:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8009762:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009766:	9204      	str	r2, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8009768:	2204      	movs	r2, #4
 800976a:	9205      	str	r2, [sp, #20]
  sConfig.Offset = 0;
 800976c:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800976e:	eb0d 0102 	add.w	r1, sp, r2
 8009772:	481b      	ldr	r0, [pc, #108]	; (80097e0 <MX_ADC3_Init+0xd4>)
 8009774:	f7f7 f974 	bl	8000a60 <HAL_ADC_ConfigChannel>
 8009778:	bb10      	cbnz	r0, 80097c0 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800977a:	230c      	movs	r3, #12
 800977c:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800977e:	a901      	add	r1, sp, #4
 8009780:	4817      	ldr	r0, [pc, #92]	; (80097e0 <MX_ADC3_Init+0xd4>)
 8009782:	f7f7 f96d 	bl	8000a60 <HAL_ADC_ConfigChannel>
 8009786:	b9f0      	cbnz	r0, 80097c6 <MX_ADC3_Init+0xba>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8009788:	2312      	movs	r3, #18
 800978a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800978c:	a901      	add	r1, sp, #4
 800978e:	4814      	ldr	r0, [pc, #80]	; (80097e0 <MX_ADC3_Init+0xd4>)
 8009790:	f7f7 f966 	bl	8000a60 <HAL_ADC_ConfigChannel>
 8009794:	b9d0      	cbnz	r0, 80097cc <MX_ADC3_Init+0xc0>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8009796:	2318      	movs	r3, #24
 8009798:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800979a:	a901      	add	r1, sp, #4
 800979c:	4810      	ldr	r0, [pc, #64]	; (80097e0 <MX_ADC3_Init+0xd4>)
 800979e:	f7f7 f95f 	bl	8000a60 <HAL_ADC_ConfigChannel>
 80097a2:	b9b0      	cbnz	r0, 80097d2 <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80097a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097a8:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80097aa:	a901      	add	r1, sp, #4
 80097ac:	480c      	ldr	r0, [pc, #48]	; (80097e0 <MX_ADC3_Init+0xd4>)
 80097ae:	f7f7 f957 	bl	8000a60 <HAL_ADC_ConfigChannel>
 80097b2:	b988      	cbnz	r0, 80097d8 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
  }

}
 80097b4:	b009      	add	sp, #36	; 0x24
 80097b6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80097ba:	f000 fe83 	bl	800a4c4 <Error_Handler>
 80097be:	e7ca      	b.n	8009756 <MX_ADC3_Init+0x4a>
    Error_Handler();
 80097c0:	f000 fe80 	bl	800a4c4 <Error_Handler>
 80097c4:	e7d9      	b.n	800977a <MX_ADC3_Init+0x6e>
    Error_Handler();
 80097c6:	f000 fe7d 	bl	800a4c4 <Error_Handler>
 80097ca:	e7dd      	b.n	8009788 <MX_ADC3_Init+0x7c>
    Error_Handler();
 80097cc:	f000 fe7a 	bl	800a4c4 <Error_Handler>
 80097d0:	e7e1      	b.n	8009796 <MX_ADC3_Init+0x8a>
    Error_Handler();
 80097d2:	f000 fe77 	bl	800a4c4 <Error_Handler>
 80097d6:	e7e5      	b.n	80097a4 <MX_ADC3_Init+0x98>
    Error_Handler();
 80097d8:	f000 fe74 	bl	800a4c4 <Error_Handler>
}
 80097dc:	e7ea      	b.n	80097b4 <MX_ADC3_Init+0xa8>
 80097de:	bf00      	nop
 80097e0:	200000d4 	.word	0x200000d4
 80097e4:	58026000 	.word	0x58026000
 80097e8:	08600004 	.word	0x08600004

080097ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80097ec:	b570      	push	{r4, r5, r6, lr}
 80097ee:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097f0:	2300      	movs	r3, #0
 80097f2:	9307      	str	r3, [sp, #28]
 80097f4:	9308      	str	r3, [sp, #32]
 80097f6:	9309      	str	r3, [sp, #36]	; 0x24
 80097f8:	930a      	str	r3, [sp, #40]	; 0x28
 80097fa:	930b      	str	r3, [sp, #44]	; 0x2c
  if(adcHandle->Instance==ADC1)
 80097fc:	6803      	ldr	r3, [r0, #0]
 80097fe:	4a51      	ldr	r2, [pc, #324]	; (8009944 <HAL_ADC_MspInit+0x158>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d004      	beq.n	800980e <HAL_ADC_MspInit+0x22>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 8009804:	4a50      	ldr	r2, [pc, #320]	; (8009948 <HAL_ADC_MspInit+0x15c>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d078      	beq.n	80098fc <HAL_ADC_MspInit+0x110>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800980a:	b00c      	add	sp, #48	; 0x30
 800980c:	bd70      	pop	{r4, r5, r6, pc}
 800980e:	4604      	mov	r4, r0
    __HAL_RCC_ADC12_CLK_ENABLE();
 8009810:	4b4e      	ldr	r3, [pc, #312]	; (800994c <HAL_ADC_MspInit+0x160>)
 8009812:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8009816:	f042 0220 	orr.w	r2, r2, #32
 800981a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800981e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8009822:	f002 0220 	and.w	r2, r2, #32
 8009826:	9201      	str	r2, [sp, #4]
 8009828:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800982a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800982e:	f042 0204 	orr.w	r2, r2, #4
 8009832:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009836:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800983a:	f002 0204 	and.w	r2, r2, #4
 800983e:	9202      	str	r2, [sp, #8]
 8009840:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009842:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009846:	f042 0201 	orr.w	r2, r2, #1
 800984a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800984e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009852:	f002 0201 	and.w	r2, r2, #1
 8009856:	9203      	str	r2, [sp, #12]
 8009858:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800985a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800985e:	f042 0202 	orr.w	r2, r2, #2
 8009862:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800986a:	f003 0302 	and.w	r3, r3, #2
 800986e:	9304      	str	r3, [sp, #16]
 8009870:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009872:	2332      	movs	r3, #50	; 0x32
 8009874:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009876:	2603      	movs	r6, #3
 8009878:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800987a:	a907      	add	r1, sp, #28
 800987c:	4834      	ldr	r0, [pc, #208]	; (8009950 <HAL_ADC_MspInit+0x164>)
 800987e:	f7f8 ff75 	bl	800276c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8009882:	23ff      	movs	r3, #255	; 0xff
 8009884:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009886:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009888:	2500      	movs	r5, #0
 800988a:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800988c:	a907      	add	r1, sp, #28
 800988e:	4831      	ldr	r0, [pc, #196]	; (8009954 <HAL_ADC_MspInit+0x168>)
 8009890:	f7f8 ff6c 	bl	800276c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009894:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009896:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009898:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800989a:	a907      	add	r1, sp, #28
 800989c:	482e      	ldr	r0, [pc, #184]	; (8009958 <HAL_ADC_MspInit+0x16c>)
 800989e:	f7f8 ff65 	bl	800276c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 80098a2:	482e      	ldr	r0, [pc, #184]	; (800995c <HAL_ADC_MspInit+0x170>)
 80098a4:	4b2e      	ldr	r3, [pc, #184]	; (8009960 <HAL_ADC_MspInit+0x174>)
 80098a6:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80098a8:	2309      	movs	r3, #9
 80098aa:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80098ac:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80098ae:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80098b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098b4:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80098b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80098ba:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80098bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80098c0:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80098c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098c6:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80098c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80098cc:	6203      	str	r3, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80098ce:	2304      	movs	r3, #4
 80098d0:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80098d2:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80098d4:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80098d6:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80098d8:	f7f8 f948 	bl	8001b6c <HAL_DMA_Init>
 80098dc:	b958      	cbnz	r0, 80098f6 <HAL_ADC_MspInit+0x10a>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80098de:	4b1f      	ldr	r3, [pc, #124]	; (800995c <HAL_ADC_MspInit+0x170>)
 80098e0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80098e2:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80098e4:	2200      	movs	r2, #0
 80098e6:	4611      	mov	r1, r2
 80098e8:	2012      	movs	r0, #18
 80098ea:	f7f7 fed3 	bl	8001694 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80098ee:	2012      	movs	r0, #18
 80098f0:	f7f7 ff02 	bl	80016f8 <HAL_NVIC_EnableIRQ>
 80098f4:	e789      	b.n	800980a <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 80098f6:	f000 fde5 	bl	800a4c4 <Error_Handler>
 80098fa:	e7f0      	b.n	80098de <HAL_ADC_MspInit+0xf2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80098fc:	4b13      	ldr	r3, [pc, #76]	; (800994c <HAL_ADC_MspInit+0x160>)
 80098fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009902:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8009906:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800990a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800990e:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8009912:	9205      	str	r2, [sp, #20]
 8009914:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8009916:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800991a:	f042 0220 	orr.w	r2, r2, #32
 800991e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009926:	f003 0320 	and.w	r3, r3, #32
 800992a:	9306      	str	r3, [sp, #24]
 800992c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 800992e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8009932:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009934:	2303      	movs	r3, #3
 8009936:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009938:	a907      	add	r1, sp, #28
 800993a:	480a      	ldr	r0, [pc, #40]	; (8009964 <HAL_ADC_MspInit+0x178>)
 800993c:	f7f8 ff16 	bl	800276c <HAL_GPIO_Init>
}
 8009940:	e763      	b.n	800980a <HAL_ADC_MspInit+0x1e>
 8009942:	bf00      	nop
 8009944:	40022000 	.word	0x40022000
 8009948:	58026000 	.word	0x58026000
 800994c:	58024400 	.word	0x58024400
 8009950:	58020800 	.word	0x58020800
 8009954:	58020000 	.word	0x58020000
 8009958:	58020400 	.word	0x58020400
 800995c:	20000138 	.word	0x20000138
 8009960:	40020010 	.word	0x40020010
 8009964:	58021400 	.word	0x58021400

08009968 <audioInit>:
	TRUE
} BOOL;


void audioInit(I2C_HandleTypeDef* hi2c, SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 8009968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800996c:	4605      	mov	r5, r0
 800996e:	460f      	mov	r7, r1
 8009970:	4616      	mov	r6, r2
	// Initialize LEAF.

	LEAF_init(SAMPLE_RATE, AUDIO_FRAME_SIZE, memory, MEM_SIZE, &randomNumber);
 8009972:	4b28      	ldr	r3, [pc, #160]	; (8009a14 <audioInit+0xac>)
 8009974:	4a28      	ldr	r2, [pc, #160]	; (8009a18 <audioInit+0xb0>)
 8009976:	4929      	ldr	r1, [pc, #164]	; (8009a1c <audioInit+0xb4>)
 8009978:	2020      	movs	r0, #32
 800997a:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8009a20 <audioInit+0xb8>
 800997e:	f001 ffad 	bl	800b8dc <LEAF_init>


	for (int i = 0; i < 6; i++)
 8009982:	2400      	movs	r4, #0
 8009984:	e008      	b.n	8009998 <audioInit+0x30>
	{
		tRamp_init(&adc[i],7.0f, 1); //set all ramps for knobs to be 7ms ramp time and let the init function know they will be ticked every sample
 8009986:	2101      	movs	r1, #1
 8009988:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 800998c:	4825      	ldr	r0, [pc, #148]	; (8009a24 <audioInit+0xbc>)
 800998e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8009992:	f001 fcb9 	bl	800b308 <tRamp_init>
	for (int i = 0; i < 6; i++)
 8009996:	3401      	adds	r4, #1
 8009998:	2c05      	cmp	r4, #5
 800999a:	ddf4      	ble.n	8009986 <audioInit+0x1e>

	}
	tNoise_init(&noise, WhiteNoise);
 800999c:	2100      	movs	r1, #0
 800999e:	4822      	ldr	r0, [pc, #136]	; (8009a28 <audioInit+0xc0>)
 80099a0:	f001 ff80 	bl	800b8a4 <tNoise_init>
	for (int i = 0; i < 6; i++)
 80099a4:	f04f 0800 	mov.w	r8, #0
 80099a8:	e00c      	b.n	80099c4 <audioInit+0x5c>
	{
		tCycle_init(&mySine[i]);
 80099aa:	4c20      	ldr	r4, [pc, #128]	; (8009a2c <audioInit+0xc4>)
 80099ac:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 80099b0:	4620      	mov	r0, r4
 80099b2:	f001 fec4 	bl	800b73e <tCycle_init>
		tCycle_setFreq(&mySine[i], 440.0f);
 80099b6:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8009a30 <audioInit+0xc8>
 80099ba:	4620      	mov	r0, r4
 80099bc:	f001 fed8 	bl	800b770 <tCycle_setFreq>
	for (int i = 0; i < 6; i++)
 80099c0:	f108 0801 	add.w	r8, r8, #1
 80099c4:	f1b8 0f05 	cmp.w	r8, #5
 80099c8:	ddef      	ble.n	80099aa <audioInit+0x42>
	}

	HAL_Delay(10);
 80099ca:	200a      	movs	r0, #10
 80099cc:	f7f6 fe6a 	bl	80006a4 <HAL_Delay>

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 80099d0:	2300      	movs	r3, #0
 80099d2:	e004      	b.n	80099de <audioInit+0x76>
	{
		audioOutBuffer[i] = 0;
 80099d4:	4a17      	ldr	r2, [pc, #92]	; (8009a34 <audioInit+0xcc>)
 80099d6:	2100      	movs	r1, #0
 80099d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 80099dc:	3301      	adds	r3, #1
 80099de:	2b7f      	cmp	r3, #127	; 0x7f
 80099e0:	ddf8      	ble.n	80099d4 <audioInit+0x6c>
	}



	HAL_Delay(1);
 80099e2:	2001      	movs	r0, #1
 80099e4:	f7f6 fe5e 	bl	80006a4 <HAL_Delay>

	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 80099e8:	4c12      	ldr	r4, [pc, #72]	; (8009a34 <audioInit+0xcc>)
 80099ea:	2280      	movs	r2, #128	; 0x80
 80099ec:	4621      	mov	r1, r4
 80099ee:	4638      	mov	r0, r7
 80099f0:	f7fb fd5e 	bl	80054b0 <HAL_SAI_Transmit_DMA>
 80099f4:	4b10      	ldr	r3, [pc, #64]	; (8009a38 <audioInit+0xd0>)
 80099f6:	7018      	strb	r0, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 80099f8:	2280      	movs	r2, #128	; 0x80
 80099fa:	f504 7100 	add.w	r1, r4, #512	; 0x200
 80099fe:	4630      	mov	r0, r6
 8009a00:	f7fb fdd8 	bl	80055b4 <HAL_SAI_Receive_DMA>
 8009a04:	4b0d      	ldr	r3, [pc, #52]	; (8009a3c <audioInit+0xd4>)
 8009a06:	7018      	strb	r0, [r3, #0]
	// with the CS4271 codec IC, the SAI Transmit and Receive must be happening before the chip will respond to
	// I2C setup messages (it seems to use the masterclock input as it's own internal clock for i2c data, etc)
	// so while we used to set up codec before starting SAI, now we need to set up codec afterwards, and set a flag to make sure it's ready

	//now to send all the necessary messages to the codec
	AudioCodec_init(hi2c);
 8009a08:	4628      	mov	r0, r5
 8009a0a:	f000 fa1b 	bl	8009e44 <AudioCodec_init>

}
 8009a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a12:	bf00      	nop
 8009a14:	0800a415 	.word	0x0800a415
 8009a18:	0007a120 	.word	0x0007a120
 8009a1c:	24000000 	.word	0x24000000
 8009a20:	473b8000 	.word	0x473b8000
 8009a24:	200001d0 	.word	0x200001d0
 8009a28:	200001f4 	.word	0x200001f4
 8009a2c:	200001b4 	.word	0x200001b4
 8009a30:	43dc0000 	.word	0x43dc0000
 8009a34:	30000000 	.word	0x30000000
 8009a38:	200001cc 	.word	0x200001cc
 8009a3c:	200001cd 	.word	0x200001cd

08009a40 <audioTickL>:
}
float rightIn = 0.0f;


float audioTickL(float audioIn)
{
 8009a40:	b538      	push	{r3, r4, r5, lr}

	sample = 0.0f;
 8009a42:	4b17      	ldr	r3, [pc, #92]	; (8009aa0 <audioTickL+0x60>)
 8009a44:	2200      	movs	r2, #0
 8009a46:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 6; i = i+2) // even numbered knobs (left side of board)
 8009a48:	2500      	movs	r5, #0
 8009a4a:	e01c      	b.n	8009a86 <audioTickL+0x46>
	{
		tCycle_setFreq(&mySine[i], (tRamp_tick(&adc[i]) * 500.0f) + 100.0f); // use knob to set frequency between 100 and 600 Hz
 8009a4c:	00ab      	lsls	r3, r5, #2
 8009a4e:	4c15      	ldr	r4, [pc, #84]	; (8009aa4 <audioTickL+0x64>)
 8009a50:	441c      	add	r4, r3
 8009a52:	4815      	ldr	r0, [pc, #84]	; (8009aa8 <audioTickL+0x68>)
 8009a54:	4418      	add	r0, r3
 8009a56:	f001 fcf4 	bl	800b442 <tRamp_tick>
 8009a5a:	eddf 7a14 	vldr	s15, [pc, #80]	; 8009aac <audioTickL+0x6c>
 8009a5e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009a62:	eddf 7a13 	vldr	s15, [pc, #76]	; 8009ab0 <audioTickL+0x70>
 8009a66:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f001 fe80 	bl	800b770 <tCycle_setFreq>
		sample += tCycle_tick(&mySine[i]); // tick the oscillator
 8009a70:	4620      	mov	r0, r4
 8009a72:	f001 fea7 	bl	800b7c4 <tCycle_tick>
 8009a76:	4b0a      	ldr	r3, [pc, #40]	; (8009aa0 <audioTickL+0x60>)
 8009a78:	edd3 7a00 	vldr	s15, [r3]
 8009a7c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009a80:	ed83 0a00 	vstr	s0, [r3]
	for (int i = 0; i < 6; i = i+2) // even numbered knobs (left side of board)
 8009a84:	3502      	adds	r5, #2
 8009a86:	2d05      	cmp	r5, #5
 8009a88:	dde0      	ble.n	8009a4c <audioTickL+0xc>
	}
	sample *= 0.33f; // drop the gain because we've got three full volume sine waves summing here
 8009a8a:	4b05      	ldr	r3, [pc, #20]	; (8009aa0 <audioTickL+0x60>)
 8009a8c:	ed93 0a00 	vldr	s0, [r3]
 8009a90:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009ab4 <audioTickL+0x74>
 8009a94:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009a98:	ed83 0a00 	vstr	s0, [r3]

	return sample;
}
 8009a9c:	bd38      	pop	{r3, r4, r5, pc}
 8009a9e:	bf00      	nop
 8009aa0:	20000044 	.word	0x20000044
 8009aa4:	200001b4 	.word	0x200001b4
 8009aa8:	200001d0 	.word	0x200001d0
 8009aac:	43fa0000 	.word	0x43fa0000
 8009ab0:	42c80000 	.word	0x42c80000
 8009ab4:	3ea8f5c3 	.word	0x3ea8f5c3

08009ab8 <audioTickR>:


uint32_t myCounter = 0;

float audioTickR(float audioIn)
{
 8009ab8:	b538      	push	{r3, r4, r5, lr}
	rightIn = audioIn;
 8009aba:	4b18      	ldr	r3, [pc, #96]	; (8009b1c <audioTickR+0x64>)
 8009abc:	ed83 0a01 	vstr	s0, [r3, #4]

	sample = 0.0f;
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	601a      	str	r2, [r3, #0]



	for (int i = 0; i < 6; i = i+2) // odd numbered knobs (right side of board)
 8009ac4:	2500      	movs	r5, #0
 8009ac6:	e01d      	b.n	8009b04 <audioTickR+0x4c>
	{
		tCycle_setFreq(&mySine[i+1], (tRamp_tick(&adc[i+1]) * 500.0f) + 100.0f); // use knob to set frequency between 100 and 600 Hz
 8009ac8:	1c6b      	adds	r3, r5, #1
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	4c14      	ldr	r4, [pc, #80]	; (8009b20 <audioTickR+0x68>)
 8009ace:	441c      	add	r4, r3
 8009ad0:	4814      	ldr	r0, [pc, #80]	; (8009b24 <audioTickR+0x6c>)
 8009ad2:	4418      	add	r0, r3
 8009ad4:	f001 fcb5 	bl	800b442 <tRamp_tick>
 8009ad8:	eddf 7a13 	vldr	s15, [pc, #76]	; 8009b28 <audioTickR+0x70>
 8009adc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009ae0:	eddf 7a12 	vldr	s15, [pc, #72]	; 8009b2c <audioTickR+0x74>
 8009ae4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f001 fe41 	bl	800b770 <tCycle_setFreq>
		sample += tCycle_tick(&mySine[i+1]); // tick the oscillator
 8009aee:	4620      	mov	r0, r4
 8009af0:	f001 fe68 	bl	800b7c4 <tCycle_tick>
 8009af4:	4b09      	ldr	r3, [pc, #36]	; (8009b1c <audioTickR+0x64>)
 8009af6:	edd3 7a00 	vldr	s15, [r3]
 8009afa:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009afe:	ed83 0a00 	vstr	s0, [r3]
	for (int i = 0; i < 6; i = i+2) // odd numbered knobs (right side of board)
 8009b02:	3502      	adds	r5, #2
 8009b04:	2d05      	cmp	r5, #5
 8009b06:	dddf      	ble.n	8009ac8 <audioTickR+0x10>
	}
	sample *= 0.33f; // drop the gain because we've got three full volume sine waves summing here
 8009b08:	4b04      	ldr	r3, [pc, #16]	; (8009b1c <audioTickR+0x64>)
 8009b0a:	ed93 0a00 	vldr	s0, [r3]
 8009b0e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009b30 <audioTickR+0x78>
 8009b12:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009b16:	ed83 0a00 	vstr	s0, [r3]


	//sample = tNoise_tick(&noise); // or uncomment this to try white noise

	return sample;
}
 8009b1a:	bd38      	pop	{r3, r4, r5, pc}
 8009b1c:	20000044 	.word	0x20000044
 8009b20:	200001b4 	.word	0x200001b4
 8009b24:	200001d0 	.word	0x200001d0
 8009b28:	43fa0000 	.word	0x43fa0000
 8009b2c:	42c80000 	.word	0x42c80000
 8009b30:	3ea8f5c3 	.word	0x3ea8f5c3

08009b34 <buttonCheck>:


uint8_t LED_States[3] = {0,0,0};
void buttonCheck(void)
{
 8009b34:	b538      	push	{r3, r4, r5, lr}
	buttonValues[0] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_6);
 8009b36:	4d4f      	ldr	r5, [pc, #316]	; (8009c74 <buttonCheck+0x140>)
 8009b38:	2140      	movs	r1, #64	; 0x40
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	f7f8 ff08 	bl	8002950 <HAL_GPIO_ReadPin>
 8009b40:	fab0 f080 	clz	r0, r0
 8009b44:	0940      	lsrs	r0, r0, #5
 8009b46:	4c4c      	ldr	r4, [pc, #304]	; (8009c78 <buttonCheck+0x144>)
 8009b48:	7020      	strb	r0, [r4, #0]
	buttonValues[1] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_7);
 8009b4a:	2180      	movs	r1, #128	; 0x80
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	f7f8 feff 	bl	8002950 <HAL_GPIO_ReadPin>
 8009b52:	fab0 f080 	clz	r0, r0
 8009b56:	0940      	lsrs	r0, r0, #5
 8009b58:	7060      	strb	r0, [r4, #1]
	buttonValues[2] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);
 8009b5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009b5e:	4847      	ldr	r0, [pc, #284]	; (8009c7c <buttonCheck+0x148>)
 8009b60:	f7f8 fef6 	bl	8002950 <HAL_GPIO_ReadPin>
 8009b64:	fab0 f080 	clz	r0, r0
 8009b68:	0940      	lsrs	r0, r0, #5
 8009b6a:	70a0      	strb	r0, [r4, #2]
	for (int i = 0; i < NUM_BUTTONS; i++)
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	e006      	b.n	8009b7e <buttonCheck+0x4a>
	  {
		  if (buttonValues[i] == 1)
		  {
			  buttonPressed[i] = 1;
		  }
		  buttonValuesPrev[i] = buttonValues[i];
 8009b70:	4943      	ldr	r1, [pc, #268]	; (8009c80 <buttonCheck+0x14c>)
 8009b72:	54ca      	strb	r2, [r1, r3]
		  buttonCounters[i] = 0;
 8009b74:	4a43      	ldr	r2, [pc, #268]	; (8009c84 <buttonCheck+0x150>)
 8009b76:	2100      	movs	r1, #0
 8009b78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_BUTTONS; i++)
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	dc1c      	bgt.n	8009bbc <buttonCheck+0x88>
	  if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] < 10))
 8009b82:	4a3d      	ldr	r2, [pc, #244]	; (8009c78 <buttonCheck+0x144>)
 8009b84:	5cd2      	ldrb	r2, [r2, r3]
 8009b86:	493e      	ldr	r1, [pc, #248]	; (8009c80 <buttonCheck+0x14c>)
 8009b88:	5cc9      	ldrb	r1, [r1, r3]
 8009b8a:	428a      	cmp	r2, r1
 8009b8c:	d008      	beq.n	8009ba0 <buttonCheck+0x6c>
 8009b8e:	483d      	ldr	r0, [pc, #244]	; (8009c84 <buttonCheck+0x150>)
 8009b90:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8009b94:	2809      	cmp	r0, #9
 8009b96:	d803      	bhi.n	8009ba0 <buttonCheck+0x6c>
		  buttonCounters[i]++;
 8009b98:	3001      	adds	r0, #1
 8009b9a:	4c3a      	ldr	r4, [pc, #232]	; (8009c84 <buttonCheck+0x150>)
 8009b9c:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	  if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] >= 10))
 8009ba0:	428a      	cmp	r2, r1
 8009ba2:	d0eb      	beq.n	8009b7c <buttonCheck+0x48>
 8009ba4:	4937      	ldr	r1, [pc, #220]	; (8009c84 <buttonCheck+0x150>)
 8009ba6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009baa:	2909      	cmp	r1, #9
 8009bac:	d9e6      	bls.n	8009b7c <buttonCheck+0x48>
		  if (buttonValues[i] == 1)
 8009bae:	2a01      	cmp	r2, #1
 8009bb0:	d1de      	bne.n	8009b70 <buttonCheck+0x3c>
			  buttonPressed[i] = 1;
 8009bb2:	4935      	ldr	r1, [pc, #212]	; (8009c88 <buttonCheck+0x154>)
 8009bb4:	2001      	movs	r0, #1
 8009bb6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8009bba:	e7d9      	b.n	8009b70 <buttonCheck+0x3c>
	  }
	}

	if (buttonPressed[0] == 1)
 8009bbc:	4b32      	ldr	r3, [pc, #200]	; (8009c88 <buttonCheck+0x154>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d008      	beq.n	8009bd6 <buttonCheck+0xa2>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
			LED_States[0] = 0;
		}
		buttonPressed[0] = 0;
	}
	if (buttonPressed[1] == 1)
 8009bc4:	4b30      	ldr	r3, [pc, #192]	; (8009c88 <buttonCheck+0x154>)
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d01e      	beq.n	8009c0a <buttonCheck+0xd6>
			LED_States[1] = 0;
		}
		buttonPressed[1] = 0;
	}

	if (buttonPressed[2] == 1)
 8009bcc:	4b2e      	ldr	r3, [pc, #184]	; (8009c88 <buttonCheck+0x154>)
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d034      	beq.n	8009c3e <buttonCheck+0x10a>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
			LED_States[2] = 0;
		}
		buttonPressed[2] = 0;
	}
}
 8009bd4:	bd38      	pop	{r3, r4, r5, pc}
		if (LED_States[0] == 0)
 8009bd6:	4b2d      	ldr	r3, [pc, #180]	; (8009c8c <buttonCheck+0x158>)
 8009bd8:	7a1b      	ldrb	r3, [r3, #8]
 8009bda:	b963      	cbnz	r3, 8009bf6 <buttonCheck+0xc2>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8009bdc:	2201      	movs	r2, #1
 8009bde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009be2:	482b      	ldr	r0, [pc, #172]	; (8009c90 <buttonCheck+0x15c>)
 8009be4:	f7f8 febb 	bl	800295e <HAL_GPIO_WritePin>
			LED_States[0] = 1;
 8009be8:	4b28      	ldr	r3, [pc, #160]	; (8009c8c <buttonCheck+0x158>)
 8009bea:	2201      	movs	r2, #1
 8009bec:	721a      	strb	r2, [r3, #8]
		buttonPressed[0] = 0;
 8009bee:	4b26      	ldr	r3, [pc, #152]	; (8009c88 <buttonCheck+0x154>)
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	601a      	str	r2, [r3, #0]
 8009bf4:	e7e6      	b.n	8009bc4 <buttonCheck+0x90>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009bfc:	4824      	ldr	r0, [pc, #144]	; (8009c90 <buttonCheck+0x15c>)
 8009bfe:	f7f8 feae 	bl	800295e <HAL_GPIO_WritePin>
			LED_States[0] = 0;
 8009c02:	4b22      	ldr	r3, [pc, #136]	; (8009c8c <buttonCheck+0x158>)
 8009c04:	2200      	movs	r2, #0
 8009c06:	721a      	strb	r2, [r3, #8]
 8009c08:	e7f1      	b.n	8009bee <buttonCheck+0xba>
		if (LED_States[1] == 0)
 8009c0a:	4b20      	ldr	r3, [pc, #128]	; (8009c8c <buttonCheck+0x158>)
 8009c0c:	7a5b      	ldrb	r3, [r3, #9]
 8009c0e:	b963      	cbnz	r3, 8009c2a <buttonCheck+0xf6>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8009c10:	2201      	movs	r2, #1
 8009c12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009c16:	481e      	ldr	r0, [pc, #120]	; (8009c90 <buttonCheck+0x15c>)
 8009c18:	f7f8 fea1 	bl	800295e <HAL_GPIO_WritePin>
			LED_States[1] = 1;
 8009c1c:	4b1b      	ldr	r3, [pc, #108]	; (8009c8c <buttonCheck+0x158>)
 8009c1e:	2201      	movs	r2, #1
 8009c20:	725a      	strb	r2, [r3, #9]
		buttonPressed[1] = 0;
 8009c22:	4b19      	ldr	r3, [pc, #100]	; (8009c88 <buttonCheck+0x154>)
 8009c24:	2200      	movs	r2, #0
 8009c26:	605a      	str	r2, [r3, #4]
 8009c28:	e7d0      	b.n	8009bcc <buttonCheck+0x98>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009c30:	4817      	ldr	r0, [pc, #92]	; (8009c90 <buttonCheck+0x15c>)
 8009c32:	f7f8 fe94 	bl	800295e <HAL_GPIO_WritePin>
			LED_States[1] = 0;
 8009c36:	4b15      	ldr	r3, [pc, #84]	; (8009c8c <buttonCheck+0x158>)
 8009c38:	2200      	movs	r2, #0
 8009c3a:	725a      	strb	r2, [r3, #9]
 8009c3c:	e7f1      	b.n	8009c22 <buttonCheck+0xee>
		if (LED_States[2] == 0)
 8009c3e:	4b13      	ldr	r3, [pc, #76]	; (8009c8c <buttonCheck+0x158>)
 8009c40:	7a9b      	ldrb	r3, [r3, #10]
 8009c42:	b963      	cbnz	r3, 8009c5e <buttonCheck+0x12a>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8009c44:	2201      	movs	r2, #1
 8009c46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009c4a:	480c      	ldr	r0, [pc, #48]	; (8009c7c <buttonCheck+0x148>)
 8009c4c:	f7f8 fe87 	bl	800295e <HAL_GPIO_WritePin>
			LED_States[2] = 1;
 8009c50:	4b0e      	ldr	r3, [pc, #56]	; (8009c8c <buttonCheck+0x158>)
 8009c52:	2201      	movs	r2, #1
 8009c54:	729a      	strb	r2, [r3, #10]
		buttonPressed[2] = 0;
 8009c56:	4b0c      	ldr	r3, [pc, #48]	; (8009c88 <buttonCheck+0x154>)
 8009c58:	2200      	movs	r2, #0
 8009c5a:	609a      	str	r2, [r3, #8]
}
 8009c5c:	e7ba      	b.n	8009bd4 <buttonCheck+0xa0>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009c64:	4805      	ldr	r0, [pc, #20]	; (8009c7c <buttonCheck+0x148>)
 8009c66:	f7f8 fe7a 	bl	800295e <HAL_GPIO_WritePin>
			LED_States[2] = 0;
 8009c6a:	4b08      	ldr	r3, [pc, #32]	; (8009c8c <buttonCheck+0x158>)
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	729a      	strb	r2, [r3, #10]
 8009c70:	e7f1      	b.n	8009c56 <buttonCheck+0x122>
 8009c72:	bf00      	nop
 8009c74:	58021800 	.word	0x58021800
 8009c78:	20000204 	.word	0x20000204
 8009c7c:	58020c00 	.word	0x58020c00
 8009c80:	200001b0 	.word	0x200001b0
 8009c84:	200001f8 	.word	0x200001f8
 8009c88:	200001e8 	.word	0x200001e8
 8009c8c:	20000044 	.word	0x20000044
 8009c90:	58020000 	.word	0x58020000

08009c94 <audioFrame>:
{
 8009c94:	b538      	push	{r3, r4, r5, lr}
 8009c96:	4605      	mov	r5, r0
	frameCounter++;
 8009c98:	4a2e      	ldr	r2, [pc, #184]	; (8009d54 <audioFrame+0xc0>)
 8009c9a:	8993      	ldrh	r3, [r2, #12]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	8193      	strh	r3, [r2, #12]
	if (frameCounter > 1)
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d801      	bhi.n	8009caa <audioFrame+0x16>
{
 8009ca6:	2400      	movs	r4, #0
 8009ca8:	e016      	b.n	8009cd8 <audioFrame+0x44>
		frameCounter = 0;
 8009caa:	4613      	mov	r3, r2
 8009cac:	2200      	movs	r2, #0
 8009cae:	819a      	strh	r2, [r3, #12]
		buttonCheck();
 8009cb0:	f7ff ff40 	bl	8009b34 <buttonCheck>
 8009cb4:	e7f7      	b.n	8009ca6 <audioFrame+0x12>
		tRamp_setDest(&adc[i], (ADC_values[i] * INV_TWO_TO_16));
 8009cb6:	4b28      	ldr	r3, [pc, #160]	; (8009d58 <audioFrame+0xc4>)
 8009cb8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8009cbc:	ee07 3a90 	vmov	s15, r3
 8009cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cc4:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8009d5c <audioFrame+0xc8>
 8009cc8:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009ccc:	4824      	ldr	r0, [pc, #144]	; (8009d60 <audioFrame+0xcc>)
 8009cce:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8009cd2:	f001 fb87 	bl	800b3e4 <tRamp_setDest>
	for (i = 0; i < 6; i++)
 8009cd6:	3401      	adds	r4, #1
 8009cd8:	2c05      	cmp	r4, #5
 8009cda:	ddec      	ble.n	8009cb6 <audioFrame+0x22>
	if (codecReady)
 8009cdc:	4b1d      	ldr	r3, [pc, #116]	; (8009d54 <audioFrame+0xc0>)
 8009cde:	7b9b      	ldrb	r3, [r3, #14]
 8009ce0:	b3b3      	cbz	r3, 8009d50 <audioFrame+0xbc>
		for (i = 0; i < (HALF_BUFFER_SIZE); i++)
 8009ce2:	2400      	movs	r4, #0
 8009ce4:	e01a      	b.n	8009d1c <audioFrame+0x88>
				current_sample = (int32_t)(audioTickL((float) (audioInBuffer[buffer_offset + i] * INV_TWO_TO_23)) * TWO_TO_23);
 8009ce6:	192b      	adds	r3, r5, r4
 8009ce8:	4a1e      	ldr	r2, [pc, #120]	; (8009d64 <audioFrame+0xd0>)
 8009cea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009cee:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8009cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cf6:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8009d68 <audioFrame+0xd4>
 8009cfa:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009cfe:	f7ff fe9f 	bl	8009a40 <audioTickL>
 8009d02:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8009d6c <audioFrame+0xd8>
 8009d06:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009d0a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
			audioOutBuffer[buffer_offset + i] = current_sample;
 8009d0e:	192a      	adds	r2, r5, r4
 8009d10:	4b14      	ldr	r3, [pc, #80]	; (8009d64 <audioFrame+0xd0>)
 8009d12:	ee10 1a10 	vmov	r1, s0
 8009d16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0; i < (HALF_BUFFER_SIZE); i++)
 8009d1a:	3401      	adds	r4, #1
 8009d1c:	2c3f      	cmp	r4, #63	; 0x3f
 8009d1e:	dc17      	bgt.n	8009d50 <audioFrame+0xbc>
			if ((i & 1) == 0)
 8009d20:	f014 0f01 	tst.w	r4, #1
 8009d24:	d1df      	bne.n	8009ce6 <audioFrame+0x52>
				current_sample = (int32_t)(audioTickR((float) (audioInBuffer[buffer_offset + i] * INV_TWO_TO_23)) * TWO_TO_23);
 8009d26:	192b      	adds	r3, r5, r4
 8009d28:	4a0e      	ldr	r2, [pc, #56]	; (8009d64 <audioFrame+0xd0>)
 8009d2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d2e:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8009d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d36:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8009d68 <audioFrame+0xd4>
 8009d3a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009d3e:	f7ff febb 	bl	8009ab8 <audioTickR>
 8009d42:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8009d6c <audioFrame+0xd8>
 8009d46:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009d4a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009d4e:	e7de      	b.n	8009d0e <audioFrame+0x7a>
}
 8009d50:	bd38      	pop	{r3, r4, r5, pc}
 8009d52:	bf00      	nop
 8009d54:	20000044 	.word	0x20000044
 8009d58:	30000400 	.word	0x30000400
 8009d5c:	377ffff6 	.word	0x377ffff6
 8009d60:	200001d0 	.word	0x200001d0
 8009d64:	30000000 	.word	0x30000000
 8009d68:	34000000 	.word	0x34000000
 8009d6c:	4b000000 	.word	0x4b000000

08009d70 <HAL_SAI_ErrorCallback>:

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
	;
}
 8009d70:	4770      	bx	lr

08009d72 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
	;
}
 8009d72:	4770      	bx	lr

08009d74 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
  ;
}
 8009d74:	4770      	bx	lr

08009d76 <HAL_SAI_RxCpltCallback>:


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8009d76:	b508      	push	{r3, lr}
	audioFrame(HALF_BUFFER_SIZE);
 8009d78:	2040      	movs	r0, #64	; 0x40
 8009d7a:	f7ff ff8b 	bl	8009c94 <audioFrame>
}
 8009d7e:	bd08      	pop	{r3, pc}

08009d80 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8009d80:	b508      	push	{r3, lr}
	audioFrame(0);
 8009d82:	2000      	movs	r0, #0
 8009d84:	f7ff ff86 	bl	8009c94 <audioFrame>
}
 8009d88:	bd08      	pop	{r3, pc}
	...

08009d8c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009d8c:	b500      	push	{lr}
 8009d8e:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009d90:	9300      	str	r3, [sp, #0]
 8009d92:	4613      	mov	r3, r2
 8009d94:	460a      	mov	r2, r1
 8009d96:	4601      	mov	r1, r0
 8009d98:	4803      	ldr	r0, [pc, #12]	; (8009da8 <BSP_SD_ReadBlocks+0x1c>)
 8009d9a:	f7fb fe55 	bl	8005a48 <HAL_SD_ReadBlocks>
 8009d9e:	b100      	cbz	r0, 8009da2 <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8009da0:	2001      	movs	r0, #1
  }

  return sd_state;  
}
 8009da2:	b003      	add	sp, #12
 8009da4:	f85d fb04 	ldr.w	pc, [sp], #4
 8009da8:	20000924 	.word	0x20000924

08009dac <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009dac:	b500      	push	{lr}
 8009dae:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	4613      	mov	r3, r2
 8009db4:	460a      	mov	r2, r1
 8009db6:	4601      	mov	r1, r0
 8009db8:	4803      	ldr	r0, [pc, #12]	; (8009dc8 <BSP_SD_WriteBlocks+0x1c>)
 8009dba:	f7fb ff55 	bl	8005c68 <HAL_SD_WriteBlocks>
 8009dbe:	b100      	cbz	r0, 8009dc2 <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8009dc0:	2001      	movs	r0, #1
  }

  return sd_state;  
}
 8009dc2:	b003      	add	sp, #12
 8009dc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8009dc8:	20000924 	.word	0x20000924

08009dcc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8009dcc:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009dce:	4803      	ldr	r0, [pc, #12]	; (8009ddc <BSP_SD_GetCardState+0x10>)
 8009dd0:	f7fc fb84 	bl	80064dc <HAL_SD_GetCardState>
}
 8009dd4:	3804      	subs	r0, #4
 8009dd6:	bf18      	it	ne
 8009dd8:	2001      	movne	r0, #1
 8009dda:	bd08      	pop	{r3, pc}
 8009ddc:	20000924 	.word	0x20000924

08009de0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009de0:	b508      	push	{r3, lr}
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009de2:	4601      	mov	r1, r0
 8009de4:	4801      	ldr	r0, [pc, #4]	; (8009dec <BSP_SD_GetCardInfo+0xc>)
 8009de6:	f7fc fb07 	bl	80063f8 <HAL_SD_GetCardInfo>
}
 8009dea:	bd08      	pop	{r3, pc}
 8009dec:	20000924 	.word	0x20000924

08009df0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8009df0:	b500      	push	{lr}
 8009df2:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8009df4:	2301      	movs	r3, #1
 8009df6:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8009dfa:	f000 f8ed 	bl	8009fd8 <BSP_PlatformIsDetected>
 8009dfe:	b910      	cbnz	r0, 8009e06 <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 8009e00:	2300      	movs	r3, #0
 8009e02:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 8009e06:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8009e0a:	b003      	add	sp, #12
 8009e0c:	f85d fb04 	ldr.w	pc, [sp], #4

08009e10 <BSP_SD_Init>:
{
 8009e10:	b510      	push	{r4, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009e12:	f7ff ffed 	bl	8009df0 <BSP_SD_IsDetected>
 8009e16:	2801      	cmp	r0, #1
 8009e18:	d002      	beq.n	8009e20 <BSP_SD_Init+0x10>
    return MSD_ERROR_SD_NOT_PRESENT;
 8009e1a:	2402      	movs	r4, #2
}
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	bd10      	pop	{r4, pc}
  sd_state = HAL_SD_Init(&hsd1);
 8009e20:	4807      	ldr	r0, [pc, #28]	; (8009e40 <BSP_SD_Init+0x30>)
 8009e22:	f7fc fb6e 	bl	8006502 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8009e26:	4604      	mov	r4, r0
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	d1f7      	bne.n	8009e1c <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8009e2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009e30:	4803      	ldr	r0, [pc, #12]	; (8009e40 <BSP_SD_Init+0x30>)
 8009e32:	f7fc faf3 	bl	800641c <HAL_SD_ConfigWideBusOperation>
 8009e36:	2800      	cmp	r0, #0
 8009e38:	d0f0      	beq.n	8009e1c <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 8009e3a:	2401      	movs	r4, #1
 8009e3c:	e7ee      	b.n	8009e1c <BSP_SD_Init+0xc>
 8009e3e:	bf00      	nop
 8009e40:	20000924 	.word	0x20000924

08009e44 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8009e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e48:	b083      	sub	sp, #12
 8009e4a:	4606      	mov	r6, r0

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009e52:	483f      	ldr	r0, [pc, #252]	; (8009f50 <AudioCodec_init+0x10c>)
 8009e54:	f7f8 fd83 	bl	800295e <HAL_GPIO_WritePin>

	HAL_Delay(2);
 8009e58:	2002      	movs	r0, #2
 8009e5a:	f7f6 fc23 	bl	80006a4 <HAL_Delay>
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 8009e5e:	4c3d      	ldr	r4, [pc, #244]	; (8009f54 <AudioCodec_init+0x110>)
 8009e60:	f04f 0a07 	mov.w	sl, #7
 8009e64:	f884 a000 	strb.w	sl, [r4]
	myI2cData[1] = 0x03;
 8009e68:	f04f 0b03 	mov.w	fp, #3
 8009e6c:	f884 b001 	strb.w	fp, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009e70:	4d39      	ldr	r5, [pc, #228]	; (8009f58 <AudioCodec_init+0x114>)
 8009e72:	882b      	ldrh	r3, [r5, #0]
 8009e74:	686a      	ldr	r2, [r5, #4]
 8009e76:	9200      	str	r2, [sp, #0]
 8009e78:	4622      	mov	r2, r4
 8009e7a:	2120      	movs	r1, #32
 8009e7c:	4630      	mov	r0, r6
 8009e7e:	f7f8 ff0d 	bl	8002c9c <HAL_I2C_Master_Transmit>
 8009e82:	4f36      	ldr	r7, [pc, #216]	; (8009f5c <AudioCodec_init+0x118>)
 8009e84:	7038      	strb	r0, [r7, #0]
	//HAL_Delay(2);

	myI2cData[0] = 0x01;
 8009e86:	f04f 0801 	mov.w	r8, #1
 8009e8a:	f884 8000 	strb.w	r8, [r4]
	myI2cData[1] = 0x41;
 8009e8e:	2341      	movs	r3, #65	; 0x41
 8009e90:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009e92:	882b      	ldrh	r3, [r5, #0]
 8009e94:	686a      	ldr	r2, [r5, #4]
 8009e96:	9200      	str	r2, [sp, #0]
 8009e98:	4622      	mov	r2, r4
 8009e9a:	2120      	movs	r1, #32
 8009e9c:	4630      	mov	r0, r6
 8009e9e:	f7f8 fefd 	bl	8002c9c <HAL_I2C_Master_Transmit>
 8009ea2:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
 8009ea4:	f04f 0902 	mov.w	r9, #2
 8009ea8:	f884 9000 	strb.w	r9, [r4]
	myI2cData[1] = 0x00;
 8009eac:	2300      	movs	r3, #0
 8009eae:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009eb0:	882b      	ldrh	r3, [r5, #0]
 8009eb2:	686a      	ldr	r2, [r5, #4]
 8009eb4:	9200      	str	r2, [sp, #0]
 8009eb6:	4622      	mov	r2, r4
 8009eb8:	2120      	movs	r1, #32
 8009eba:	4630      	mov	r0, r6
 8009ebc:	f7f8 feee 	bl	8002c9c <HAL_I2C_Master_Transmit>
 8009ec0:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
 8009ec2:	f884 b000 	strb.w	fp, [r4]
	myI2cData[1] = 0x79;
 8009ec6:	2379      	movs	r3, #121	; 0x79
 8009ec8:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009eca:	882b      	ldrh	r3, [r5, #0]
 8009ecc:	686a      	ldr	r2, [r5, #4]
 8009ece:	9200      	str	r2, [sp, #0]
 8009ed0:	4622      	mov	r2, r4
 8009ed2:	2120      	movs	r1, #32
 8009ed4:	4630      	mov	r0, r6
 8009ed6:	f7f8 fee1 	bl	8002c9c <HAL_I2C_Master_Transmit>
 8009eda:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
 8009edc:	2304      	movs	r3, #4
 8009ede:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x01;
 8009ee0:	f884 8001 	strb.w	r8, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009ee4:	882b      	ldrh	r3, [r5, #0]
 8009ee6:	686a      	ldr	r2, [r5, #4]
 8009ee8:	9200      	str	r2, [sp, #0]
 8009eea:	4622      	mov	r2, r4
 8009eec:	2120      	movs	r1, #32
 8009eee:	4630      	mov	r0, r6
 8009ef0:	f7f8 fed4 	bl	8002c9c <HAL_I2C_Master_Transmit>
 8009ef4:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
 8009ef6:	2305      	movs	r3, #5
 8009ef8:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x01;
 8009efa:	f884 8001 	strb.w	r8, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009efe:	882b      	ldrh	r3, [r5, #0]
 8009f00:	686a      	ldr	r2, [r5, #4]
 8009f02:	9200      	str	r2, [sp, #0]
 8009f04:	4622      	mov	r2, r4
 8009f06:	2120      	movs	r1, #32
 8009f08:	4630      	mov	r0, r6
 8009f0a:	f7f8 fec7 	bl	8002c9c <HAL_I2C_Master_Transmit>
 8009f0e:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
 8009f10:	2306      	movs	r3, #6
 8009f12:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x10;
 8009f14:	2310      	movs	r3, #16
 8009f16:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009f18:	882b      	ldrh	r3, [r5, #0]
 8009f1a:	686a      	ldr	r2, [r5, #4]
 8009f1c:	9200      	str	r2, [sp, #0]
 8009f1e:	4622      	mov	r2, r4
 8009f20:	2120      	movs	r1, #32
 8009f22:	4630      	mov	r0, r6
 8009f24:	f7f8 feba 	bl	8002c9c <HAL_I2C_Master_Transmit>
 8009f28:	7038      	strb	r0, [r7, #0]

	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
 8009f2a:	f884 a000 	strb.w	sl, [r4]
	myI2cData[1] = 0x02;
 8009f2e:	f884 9001 	strb.w	r9, [r4, #1]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009f32:	882b      	ldrh	r3, [r5, #0]
 8009f34:	686a      	ldr	r2, [r5, #4]
 8009f36:	9200      	str	r2, [sp, #0]
 8009f38:	4622      	mov	r2, r4
 8009f3a:	2120      	movs	r1, #32
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	f7f8 fead 	bl	8002c9c <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 8009f42:	4b07      	ldr	r3, [pc, #28]	; (8009f60 <AudioCodec_init+0x11c>)
 8009f44:	f883 8000 	strb.w	r8, [r3]

}
 8009f48:	b003      	add	sp, #12
 8009f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f4e:	bf00      	nop
 8009f50:	58020800 	.word	0x58020800
 8009f54:	20000058 	.word	0x20000058
 8009f58:	20000008 	.word	0x20000008
 8009f5c:	20000207 	.word	0x20000207
 8009f60:	20000052 	.word	0x20000052

08009f64 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8009f64:	b500      	push	{lr}
 8009f66:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009f68:	4b13      	ldr	r3, [pc, #76]	; (8009fb8 <MX_DMA_Init+0x54>)
 8009f6a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8009f6e:	f042 0201 	orr.w	r2, r2, #1
 8009f72:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8009f76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009f7a:	f003 0301 	and.w	r3, r3, #1
 8009f7e:	9301      	str	r3, [sp, #4]
 8009f80:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8009f82:	2200      	movs	r2, #0
 8009f84:	4611      	mov	r1, r2
 8009f86:	200b      	movs	r0, #11
 8009f88:	f7f7 fb84 	bl	8001694 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8009f8c:	200b      	movs	r0, #11
 8009f8e:	f7f7 fbb3 	bl	80016f8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8009f92:	2200      	movs	r2, #0
 8009f94:	4611      	mov	r1, r2
 8009f96:	200c      	movs	r0, #12
 8009f98:	f7f7 fb7c 	bl	8001694 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8009f9c:	200c      	movs	r0, #12
 8009f9e:	f7f7 fbab 	bl	80016f8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	4611      	mov	r1, r2
 8009fa6:	200d      	movs	r0, #13
 8009fa8:	f7f7 fb74 	bl	8001694 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8009fac:	200d      	movs	r0, #13
 8009fae:	f7f7 fba3 	bl	80016f8 <HAL_NVIC_EnableIRQ>

}
 8009fb2:	b003      	add	sp, #12
 8009fb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8009fb8:	58024400 	.word	0x58024400

08009fbc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8009fbc:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009fbe:	4903      	ldr	r1, [pc, #12]	; (8009fcc <MX_FATFS_Init+0x10>)
 8009fc0:	4803      	ldr	r0, [pc, #12]	; (8009fd0 <MX_FATFS_Init+0x14>)
 8009fc2:	f7ff fafd 	bl	80095c0 <FATFS_LinkDriver>
 8009fc6:	4b03      	ldr	r3, [pc, #12]	; (8009fd4 <MX_FATFS_Init+0x18>)
 8009fc8:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8009fca:	bd08      	pop	{r3, pc}
 8009fcc:	2000020c 	.word	0x2000020c
 8009fd0:	0800ba1c 	.word	0x0800ba1c
 8009fd4:	20000208 	.word	0x20000208

08009fd8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009fd8:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009fda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009fde:	4804      	ldr	r0, [pc, #16]	; (8009ff0 <BSP_PlatformIsDetected+0x18>)
 8009fe0:	f7f8 fcb6 	bl	8002950 <HAL_GPIO_ReadPin>
 8009fe4:	b108      	cbz	r0, 8009fea <BSP_PlatformIsDetected+0x12>
    {
        status = SD_NOT_PRESENT;
 8009fe6:	2000      	movs	r0, #0
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
}  
 8009fe8:	bd08      	pop	{r3, pc}
    uint8_t status = SD_PRESENT;
 8009fea:	2001      	movs	r0, #1
 8009fec:	e7fc      	b.n	8009fe8 <BSP_PlatformIsDetected+0x10>
 8009fee:	bf00      	nop
 8009ff0:	58020800 	.word	0x58020800

08009ff4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8009ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ff6:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	9301      	str	r3, [sp, #4]
 8009ffc:	9302      	str	r3, [sp, #8]
 8009ffe:	9303      	str	r3, [sp, #12]
 800a000:	9304      	str	r3, [sp, #16]
 800a002:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 800a004:	4b27      	ldr	r3, [pc, #156]	; (800a0a4 <HAL_FMC_MspInit+0xb0>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	b10b      	cbz	r3, 800a00e <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800a00a:	b007      	add	sp, #28
 800a00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 800a00e:	4b25      	ldr	r3, [pc, #148]	; (800a0a4 <HAL_FMC_MspInit+0xb0>)
 800a010:	2201      	movs	r2, #1
 800a012:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 800a014:	4b24      	ldr	r3, [pc, #144]	; (800a0a8 <HAL_FMC_MspInit+0xb4>)
 800a016:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800a01a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a01e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800a022:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a026:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a02a:	9300      	str	r3, [sp, #0]
 800a02c:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800a02e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800a032:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a034:	2602      	movs	r6, #2
 800a036:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a038:	2503      	movs	r5, #3
 800a03a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a03c:	240c      	movs	r4, #12
 800a03e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a040:	a901      	add	r1, sp, #4
 800a042:	481a      	ldr	r0, [pc, #104]	; (800a0ac <HAL_FMC_MspInit+0xb8>)
 800a044:	f7f8 fb92 	bl	800276c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800a048:	230d      	movs	r3, #13
 800a04a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a04c:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a04e:	2700      	movs	r7, #0
 800a050:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a052:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a054:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a056:	a901      	add	r1, sp, #4
 800a058:	4815      	ldr	r0, [pc, #84]	; (800a0b0 <HAL_FMC_MspInit+0xbc>)
 800a05a:	f7f8 fb87 	bl	800276c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 800a05e:	f248 1337 	movw	r3, #33079	; 0x8137
 800a062:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a064:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a066:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a068:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a06a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a06c:	a901      	add	r1, sp, #4
 800a06e:	4811      	ldr	r0, [pc, #68]	; (800a0b4 <HAL_FMC_MspInit+0xc0>)
 800a070:	f7f8 fb7c 	bl	800276c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800a074:	f64f 7383 	movw	r3, #65411	; 0xff83
 800a078:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a07a:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a07c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a07e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a080:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a082:	a901      	add	r1, sp, #4
 800a084:	480c      	ldr	r0, [pc, #48]	; (800a0b8 <HAL_FMC_MspInit+0xc4>)
 800a086:	f7f8 fb71 	bl	800276c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 800a08a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800a08e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a090:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a092:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a094:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a096:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a098:	a901      	add	r1, sp, #4
 800a09a:	4808      	ldr	r0, [pc, #32]	; (800a0bc <HAL_FMC_MspInit+0xc8>)
 800a09c:	f7f8 fb66 	bl	800276c <HAL_GPIO_Init>
 800a0a0:	e7b3      	b.n	800a00a <HAL_FMC_MspInit+0x16>
 800a0a2:	bf00      	nop
 800a0a4:	20000060 	.word	0x20000060
 800a0a8:	58024400 	.word	0x58024400
 800a0ac:	58021400 	.word	0x58021400
 800a0b0:	58020800 	.word	0x58020800
 800a0b4:	58021800 	.word	0x58021800
 800a0b8:	58021000 	.word	0x58021000
 800a0bc:	58020c00 	.word	0x58020c00

0800a0c0 <MX_FMC_Init>:
{
 800a0c0:	b500      	push	{lr}
 800a0c2:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800a0c4:	4811      	ldr	r0, [pc, #68]	; (800a10c <MX_FMC_Init+0x4c>)
 800a0c6:	4b12      	ldr	r3, [pc, #72]	; (800a110 <MX_FMC_Init+0x50>)
 800a0c8:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	6042      	str	r2, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800a0ce:	6082      	str	r2, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800a0d0:	2308      	movs	r3, #8
 800a0d2:	60c3      	str	r3, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800a0d4:	2310      	movs	r3, #16
 800a0d6:	6103      	str	r3, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800a0d8:	2140      	movs	r1, #64	; 0x40
 800a0da:	6141      	str	r1, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800a0dc:	2180      	movs	r1, #128	; 0x80
 800a0de:	6181      	str	r1, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800a0e0:	61c2      	str	r2, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800a0e2:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800a0e4:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800a0e6:	6282      	str	r2, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 16;
 800a0e8:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800a0ea:	9302      	str	r3, [sp, #8]
  SdramTiming.SelfRefreshTime = 16;
 800a0ec:	9303      	str	r3, [sp, #12]
  SdramTiming.RowCycleDelay = 16;
 800a0ee:	9304      	str	r3, [sp, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800a0f0:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 16;
 800a0f2:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 16;
 800a0f4:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800a0f6:	a901      	add	r1, sp, #4
 800a0f8:	f7fc fa64 	bl	80065c4 <HAL_SDRAM_Init>
 800a0fc:	b910      	cbnz	r0, 800a104 <MX_FMC_Init+0x44>
}
 800a0fe:	b009      	add	sp, #36	; 0x24
 800a100:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 800a104:	f000 f9de 	bl	800a4c4 <Error_Handler>
}
 800a108:	e7f9      	b.n	800a0fe <MX_FMC_Init+0x3e>
 800a10a:	bf00      	nop
 800a10c:	20000670 	.word	0x20000670
 800a110:	52004140 	.word	0x52004140

0800a114 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800a114:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800a116:	f7ff ff6d 	bl	8009ff4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800a11a:	bd08      	pop	{r3, pc}

0800a11c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800a11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a120:	b08e      	sub	sp, #56	; 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a122:	2400      	movs	r4, #0
 800a124:	9409      	str	r4, [sp, #36]	; 0x24
 800a126:	940a      	str	r4, [sp, #40]	; 0x28
 800a128:	940b      	str	r4, [sp, #44]	; 0x2c
 800a12a:	940c      	str	r4, [sp, #48]	; 0x30
 800a12c:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a12e:	4b7f      	ldr	r3, [pc, #508]	; (800a32c <MX_GPIO_Init+0x210>)
 800a130:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a134:	f042 0210 	orr.w	r2, r2, #16
 800a138:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a13c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a140:	f002 0210 	and.w	r2, r2, #16
 800a144:	9201      	str	r2, [sp, #4]
 800a146:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a148:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a14c:	f042 0204 	orr.w	r2, r2, #4
 800a150:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a154:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a158:	f002 0204 	and.w	r2, r2, #4
 800a15c:	9202      	str	r2, [sp, #8]
 800a15e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a160:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a164:	f042 0220 	orr.w	r2, r2, #32
 800a168:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a16c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a170:	f002 0220 	and.w	r2, r2, #32
 800a174:	9203      	str	r2, [sp, #12]
 800a176:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a178:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a17c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a180:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a184:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a188:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800a18c:	9204      	str	r2, [sp, #16]
 800a18e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a190:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a194:	f042 0201 	orr.w	r2, r2, #1
 800a198:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a19c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a1a0:	f002 0201 	and.w	r2, r2, #1
 800a1a4:	9205      	str	r2, [sp, #20]
 800a1a6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a1a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a1ac:	f042 0202 	orr.w	r2, r2, #2
 800a1b0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a1b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a1b8:	f002 0202 	and.w	r2, r2, #2
 800a1bc:	9206      	str	r2, [sp, #24]
 800a1be:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a1c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a1c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1c8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a1cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a1d0:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800a1d4:	9207      	str	r2, [sp, #28]
 800a1d6:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a1d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a1dc:	f042 0208 	orr.w	r2, r2, #8
 800a1e0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a1e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a1e8:	f003 0308 	and.w	r3, r3, #8
 800a1ec:	9308      	str	r3, [sp, #32]
 800a1ee:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6, GPIO_PIN_RESET);
 800a1f0:	4e4f      	ldr	r6, [pc, #316]	; (800a330 <MX_GPIO_Init+0x214>)
 800a1f2:	4622      	mov	r2, r4
 800a1f4:	f244 0140 	movw	r1, #16448	; 0x4040
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	f7f8 fbb0 	bl	800295e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|GPIO_PIN_4, GPIO_PIN_RESET);
 800a1fe:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800a33c <MX_GPIO_Init+0x220>
 800a202:	4622      	mov	r2, r4
 800a204:	f248 0110 	movw	r1, #32784	; 0x8010
 800a208:	4640      	mov	r0, r8
 800a20a:	f7f8 fba8 	bl	800295e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800a20e:	4f49      	ldr	r7, [pc, #292]	; (800a334 <MX_GPIO_Init+0x218>)
 800a210:	4622      	mov	r2, r4
 800a212:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a216:	4638      	mov	r0, r7
 800a218:	f7f8 fba1 	bl	800295e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800a21c:	f8df 9120 	ldr.w	r9, [pc, #288]	; 800a340 <MX_GPIO_Init+0x224>
 800a220:	4622      	mov	r2, r4
 800a222:	f44f 7140 	mov.w	r1, #768	; 0x300
 800a226:	4648      	mov	r0, r9
 800a228:	f7f8 fb99 	bl	800295e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800a22c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a230:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a232:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a234:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a236:	a909      	add	r1, sp, #36	; 0x24
 800a238:	4630      	mov	r0, r6
 800a23a:	f7f8 fa97 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6;
 800a23e:	f244 0340 	movw	r3, #16448	; 0x4040
 800a242:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a244:	2501      	movs	r5, #1
 800a246:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a248:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a24a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a24c:	a909      	add	r1, sp, #36	; 0x24
 800a24e:	4630      	mov	r0, r6
 800a250:	f7f8 fa8c 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a254:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
 800a258:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a25c:	4b36      	ldr	r3, [pc, #216]	; (800a338 <MX_GPIO_Init+0x21c>)
 800a25e:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a260:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a262:	a909      	add	r1, sp, #36	; 0x24
 800a264:	4630      	mov	r0, r6
 800a266:	f7f8 fa81 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a26a:	2304      	movs	r3, #4
 800a26c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a26e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a270:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a272:	a909      	add	r1, sp, #36	; 0x24
 800a274:	4640      	mov	r0, r8
 800a276:	f7f8 fa79 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_8;
 800a27a:	f44f 43e2 	mov.w	r3, #28928	; 0x7100
 800a27e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a280:	2603      	movs	r6, #3
 800a282:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a284:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a286:	a909      	add	r1, sp, #36	; 0x24
 800a288:	4640      	mov	r0, r8
 800a28a:	f7f8 fa6f 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_4;
 800a28e:	f248 0310 	movw	r3, #32784	; 0x8010
 800a292:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a294:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a296:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a298:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a29a:	a909      	add	r1, sp, #36	; 0x24
 800a29c:	4640      	mov	r0, r8
 800a29e:	f7f8 fa65 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800a2a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a2a6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a2a8:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a2aa:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a2ac:	a909      	add	r1, sp, #36	; 0x24
 800a2ae:	4638      	mov	r0, r7
 800a2b0:	f7f8 fa5c 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800a2b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2b8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a2ba:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2bc:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2be:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a2c0:	a909      	add	r1, sp, #36	; 0x24
 800a2c2:	4638      	mov	r0, r7
 800a2c4:	f7f8 fa52 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD3 PD4 PD5 
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 800a2c8:	f242 0378 	movw	r3, #8312	; 0x2078
 800a2cc:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a2ce:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2d0:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a2d2:	a909      	add	r1, sp, #36	; 0x24
 800a2d4:	4638      	mov	r0, r7
 800a2d6:	f7f8 fa49 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG12 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_12|GPIO_PIN_13;
 800a2da:	f243 0308 	movw	r3, #12296	; 0x3008
 800a2de:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a2e0:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2e2:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a2e4:	f507 6740 	add.w	r7, r7, #3072	; 0xc00
 800a2e8:	a909      	add	r1, sp, #36	; 0x24
 800a2ea:	4638      	mov	r0, r7
 800a2ec:	f7f8 fa3e 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a2f0:	23c0      	movs	r3, #192	; 0xc0
 800a2f2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a2f4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a2f6:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a2f8:	a909      	add	r1, sp, #36	; 0x24
 800a2fa:	4638      	mov	r0, r7
 800a2fc:	f7f8 fa36 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800a300:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a304:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a306:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a308:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a30a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a30c:	a909      	add	r1, sp, #36	; 0x24
 800a30e:	4648      	mov	r0, r9
 800a310:	f7f8 fa2c 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a314:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a318:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a31a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a31c:	a909      	add	r1, sp, #36	; 0x24
 800a31e:	4648      	mov	r0, r9
 800a320:	f7f8 fa24 	bl	800276c <HAL_GPIO_Init>

}
 800a324:	b00e      	add	sp, #56	; 0x38
 800a326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a32a:	bf00      	nop
 800a32c:	58024400 	.word	0x58024400
 800a330:	58020800 	.word	0x58020800
 800a334:	58020c00 	.word	0x58020c00
 800a338:	11110000 	.word	0x11110000
 800a33c:	58020400 	.word	0x58020400
 800a340:	58020000 	.word	0x58020000

0800a344 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800a344:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 800a346:	4812      	ldr	r0, [pc, #72]	; (800a390 <MX_I2C2_Init+0x4c>)
 800a348:	4b12      	ldr	r3, [pc, #72]	; (800a394 <MX_I2C2_Init+0x50>)
 800a34a:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x40508CFF;
 800a34c:	4b12      	ldr	r3, [pc, #72]	; (800a398 <MX_I2C2_Init+0x54>)
 800a34e:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800a350:	2300      	movs	r3, #0
 800a352:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a354:	2201      	movs	r2, #1
 800a356:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a358:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800a35a:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a35c:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a35e:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a360:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a362:	f7f8 fc3d 	bl	8002be0 <HAL_I2C_Init>
 800a366:	b950      	cbnz	r0, 800a37e <MX_I2C2_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a368:	2100      	movs	r1, #0
 800a36a:	4809      	ldr	r0, [pc, #36]	; (800a390 <MX_I2C2_Init+0x4c>)
 800a36c:	f7f8 fd54 	bl	8002e18 <HAL_I2CEx_ConfigAnalogFilter>
 800a370:	b940      	cbnz	r0, 800a384 <MX_I2C2_Init+0x40>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800a372:	2100      	movs	r1, #0
 800a374:	4806      	ldr	r0, [pc, #24]	; (800a390 <MX_I2C2_Init+0x4c>)
 800a376:	f7f8 fd7d 	bl	8002e74 <HAL_I2CEx_ConfigDigitalFilter>
 800a37a:	b930      	cbnz	r0, 800a38a <MX_I2C2_Init+0x46>
  {
    Error_Handler();
  }

}
 800a37c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800a37e:	f000 f8a1 	bl	800a4c4 <Error_Handler>
 800a382:	e7f1      	b.n	800a368 <MX_I2C2_Init+0x24>
    Error_Handler();
 800a384:	f000 f89e 	bl	800a4c4 <Error_Handler>
 800a388:	e7f3      	b.n	800a372 <MX_I2C2_Init+0x2e>
    Error_Handler();
 800a38a:	f000 f89b 	bl	800a4c4 <Error_Handler>
}
 800a38e:	e7f5      	b.n	800a37c <MX_I2C2_Init+0x38>
 800a390:	200006a4 	.word	0x200006a4
 800a394:	40005800 	.word	0x40005800
 800a398:	40508cff 	.word	0x40508cff

0800a39c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a39c:	b510      	push	{r4, lr}
 800a39e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	9303      	str	r3, [sp, #12]
 800a3a4:	9304      	str	r3, [sp, #16]
 800a3a6:	9305      	str	r3, [sp, #20]
 800a3a8:	9306      	str	r3, [sp, #24]
 800a3aa:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C2)
 800a3ac:	6802      	ldr	r2, [r0, #0]
 800a3ae:	4b15      	ldr	r3, [pc, #84]	; (800a404 <HAL_I2C_MspInit+0x68>)
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d001      	beq.n	800a3b8 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800a3b4:	b008      	add	sp, #32
 800a3b6:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a3b8:	4c13      	ldr	r4, [pc, #76]	; (800a408 <HAL_I2C_MspInit+0x6c>)
 800a3ba:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a3be:	f043 0302 	orr.w	r3, r3, #2
 800a3c2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a3c6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a3ca:	f003 0302 	and.w	r3, r3, #2
 800a3ce:	9301      	str	r3, [sp, #4]
 800a3d0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a3d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a3d6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a3d8:	2312      	movs	r3, #18
 800a3da:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a3dc:	2304      	movs	r3, #4
 800a3de:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a3e0:	a903      	add	r1, sp, #12
 800a3e2:	480a      	ldr	r0, [pc, #40]	; (800a40c <HAL_I2C_MspInit+0x70>)
 800a3e4:	f7f8 f9c2 	bl	800276c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a3e8:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800a3ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a3f0:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 800a3f4:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800a3f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a3fc:	9302      	str	r3, [sp, #8]
 800a3fe:	9b02      	ldr	r3, [sp, #8]
}
 800a400:	e7d8      	b.n	800a3b4 <HAL_I2C_MspInit+0x18>
 800a402:	bf00      	nop
 800a404:	40005800 	.word	0x40005800
 800a408:	58024400 	.word	0x58024400
 800a40c:	58020400 	.word	0x58020400

0800a410 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
	;
}
 800a410:	4770      	bx	lr
	...

0800a414 <randomNumber>:


float randomNumber(void) {
 800a414:	b500      	push	{lr}
 800a416:	b083      	sub	sp, #12

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 800a418:	a901      	add	r1, sp, #4
 800a41a:	4807      	ldr	r0, [pc, #28]	; (800a438 <randomNumber+0x24>)
 800a41c:	f7fa fd36 	bl	8004e8c <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 800a420:	eddd 7a01 	vldr	s15, [sp, #4]
 800a424:	eef8 7a67 	vcvt.f32.u32	s15, s15
	return num;
}
 800a428:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800a43c <randomNumber+0x28>
 800a42c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a430:	b003      	add	sp, #12
 800a432:	f85d fb04 	ldr.w	pc, [sp], #4
 800a436:	bf00      	nop
 800a438:	200006f0 	.word	0x200006f0
 800a43c:	2f80000d 	.word	0x2f80000d

0800a440 <MPU_Conf>:


void MPU_Conf(void)
{
 800a440:	b570      	push	{r4, r5, r6, lr}
 800a442:	b084      	sub	sp, #16
  //Thanks, Keshikan! This solves the issues with accessing the SRAM in the D2 area properly. -JS
	//should test the different possible settings to see what works best while avoiding needing to manually clear the cache -JS

	MPU_Region_InitTypeDef MPU_InitStruct;

	  HAL_MPU_Disable();
 800a444:	f7f7 f97c 	bl	8001740 <HAL_MPU_Disable>

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800a448:	2401      	movs	r4, #1
 800a44a:	f88d 4000 	strb.w	r4, [sp]

	  //D2 Domain�SRAM1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 800a44e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800a452:	9301      	str	r3, [sp, #4]
	  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
	  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
	  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
	  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800a454:	2311      	movs	r3, #17
 800a456:	f88d 3008 	strb.w	r3, [sp, #8]

	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800a45a:	2603      	movs	r6, #3
 800a45c:	f88d 600b 	strb.w	r6, [sp, #11]

	  //AN4838
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800a460:	f88d 400a 	strb.w	r4, [sp, #10]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800a464:	2500      	movs	r5, #0
 800a466:	f88d 500e 	strb.w	r5, [sp, #14]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800a46a:	f88d 500f 	strb.w	r5, [sp, #15]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800a46e:	f88d 500d 	strb.w	r5, [sp, #13]
//	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
//	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
//	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800a472:	f88d 5001 	strb.w	r5, [sp, #1]

	  MPU_InitStruct.SubRegionDisable = 0x00;
 800a476:	f88d 5009 	strb.w	r5, [sp, #9]


	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800a47a:	f88d 400c 	strb.w	r4, [sp, #12]


	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800a47e:	4668      	mov	r0, sp
 800a480:	f7f7 f980 	bl	8001784 <HAL_MPU_ConfigRegion>


	  //now set up D3 domain RAM

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800a484:	f88d 4000 	strb.w	r4, [sp]

	 	  //D2 Domain�SRAM1
	 	  MPU_InitStruct.BaseAddress = 0x38000000;
 800a488:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800a48c:	9301      	str	r3, [sp, #4]


	 	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800a48e:	230f      	movs	r3, #15
 800a490:	f88d 3008 	strb.w	r3, [sp, #8]

	 	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800a494:	f88d 600b 	strb.w	r6, [sp, #11]

	 	  //AN4838
	 	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800a498:	f88d 400a 	strb.w	r4, [sp, #10]
	 	  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800a49c:	f88d 400e 	strb.w	r4, [sp, #14]
	 	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800a4a0:	f88d 400f 	strb.w	r4, [sp, #15]
	 	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800a4a4:	f88d 400d 	strb.w	r4, [sp, #13]
	 //	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	 //	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	 //	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	 	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800a4a8:	f88d 4001 	strb.w	r4, [sp, #1]

	 	  MPU_InitStruct.SubRegionDisable = 0x00;
 800a4ac:	f88d 5009 	strb.w	r5, [sp, #9]


	 	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800a4b0:	f88d 500c 	strb.w	r5, [sp, #12]


	 	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800a4b4:	4668      	mov	r0, sp
 800a4b6:	f7f7 f965 	bl	8001784 <HAL_MPU_ConfigRegion>


	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800a4ba:	2004      	movs	r0, #4
 800a4bc:	f7f7 f950 	bl	8001760 <HAL_MPU_Enable>
}
 800a4c0:	b004      	add	sp, #16
 800a4c2:	bd70      	pop	{r4, r5, r6, pc}

0800a4c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a4c4:	e7fe      	b.n	800a4c4 <Error_Handler>
	...

0800a4c8 <SystemClock_Config>:
{
 800a4c8:	b500      	push	{lr}
 800a4ca:	b0cd      	sub	sp, #308	; 0x134
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a4cc:	224c      	movs	r2, #76	; 0x4c
 800a4ce:	2100      	movs	r1, #0
 800a4d0:	a839      	add	r0, sp, #228	; 0xe4
 800a4d2:	f001 fa83 	bl	800b9dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a4d6:	2220      	movs	r2, #32
 800a4d8:	2100      	movs	r1, #0
 800a4da:	a831      	add	r0, sp, #196	; 0xc4
 800a4dc:	f001 fa7e 	bl	800b9dc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a4e0:	22bc      	movs	r2, #188	; 0xbc
 800a4e2:	2100      	movs	r1, #0
 800a4e4:	a802      	add	r0, sp, #8
 800a4e6:	f001 fa79 	bl	800b9dc <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800a4ea:	2002      	movs	r0, #2
 800a4ec:	f7f8 fcee 	bl	8002ecc <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	9301      	str	r3, [sp, #4]
 800a4f4:	4b3c      	ldr	r3, [pc, #240]	; (800a5e8 <SystemClock_Config+0x120>)
 800a4f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4f8:	f022 0201 	bic.w	r2, r2, #1
 800a4fc:	62da      	str	r2, [r3, #44]	; 0x2c
 800a4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a500:	f003 0301 	and.w	r3, r3, #1
 800a504:	9301      	str	r3, [sp, #4]
 800a506:	4b39      	ldr	r3, [pc, #228]	; (800a5ec <SystemClock_Config+0x124>)
 800a508:	699a      	ldr	r2, [r3, #24]
 800a50a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800a50e:	619a      	str	r2, [r3, #24]
 800a510:	699b      	ldr	r3, [r3, #24]
 800a512:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a516:	9301      	str	r3, [sp, #4]
 800a518:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800a51a:	4b34      	ldr	r3, [pc, #208]	; (800a5ec <SystemClock_Config+0x124>)
 800a51c:	699b      	ldr	r3, [r3, #24]
 800a51e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800a522:	d0fa      	beq.n	800a51a <SystemClock_Config+0x52>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800a524:	4a32      	ldr	r2, [pc, #200]	; (800a5f0 <SystemClock_Config+0x128>)
 800a526:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800a528:	f023 0303 	bic.w	r3, r3, #3
 800a52c:	f043 0302 	orr.w	r3, r3, #2
 800a530:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800a532:	2321      	movs	r3, #33	; 0x21
 800a534:	9339      	str	r3, [sp, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a536:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a53a:	933a      	str	r3, [sp, #232]	; 0xe8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800a53c:	2301      	movs	r3, #1
 800a53e:	933f      	str	r3, [sp, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a540:	2302      	movs	r3, #2
 800a542:	9342      	str	r3, [sp, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a544:	9343      	str	r3, [sp, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800a546:	2205      	movs	r2, #5
 800a548:	9244      	str	r2, [sp, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 160;
 800a54a:	22a0      	movs	r2, #160	; 0xa0
 800a54c:	9245      	str	r2, [sp, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800a54e:	9346      	str	r3, [sp, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800a550:	9347      	str	r3, [sp, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800a552:	9348      	str	r3, [sp, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800a554:	2308      	movs	r3, #8
 800a556:	9349      	str	r3, [sp, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800a558:	2300      	movs	r3, #0
 800a55a:	934a      	str	r3, [sp, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800a55c:	934b      	str	r3, [sp, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a55e:	a839      	add	r0, sp, #228	; 0xe4
 800a560:	f7f8 fce4 	bl	8002f2c <HAL_RCC_OscConfig>
 800a564:	2800      	cmp	r0, #0
 800a566:	d138      	bne.n	800a5da <SystemClock_Config+0x112>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a568:	233f      	movs	r3, #63	; 0x3f
 800a56a:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a56c:	2303      	movs	r3, #3
 800a56e:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800a570:	2300      	movs	r3, #0
 800a572:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800a574:	2308      	movs	r3, #8
 800a576:	9334      	str	r3, [sp, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800a578:	2340      	movs	r3, #64	; 0x40
 800a57a:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800a57c:	9336      	str	r3, [sp, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800a57e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a582:	9237      	str	r2, [sp, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800a584:	9338      	str	r3, [sp, #224]	; 0xe0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800a586:	2102      	movs	r1, #2
 800a588:	a831      	add	r0, sp, #196	; 0xc4
 800a58a:	f7f9 f89d 	bl	80036c8 <HAL_RCC_ClockConfig>
 800a58e:	bb30      	cbnz	r0, 800a5de <SystemClock_Config+0x116>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_RNG
 800a590:	4b18      	ldr	r3, [pc, #96]	; (800a5f4 <SystemClock_Config+0x12c>)
 800a592:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 800a594:	2319      	movs	r3, #25
 800a596:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 800a598:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800a59c:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 800a59e:	2307      	movs	r3, #7
 800a5a0:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800a5a2:	2302      	movs	r3, #2
 800a5a4:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800a5a6:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800a5ac:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800a5ae:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800a5b0:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800a5b2:	9315      	str	r3, [sp, #84]	; 0x54
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	9217      	str	r2, [sp, #92]	; 0x5c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800a5b8:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800a5ba:	9320      	str	r3, [sp, #128]	; 0x80
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800a5bc:	9321      	str	r3, [sp, #132]	; 0x84
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800a5be:	9322      	str	r3, [sp, #136]	; 0x88
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a5c0:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800a5c4:	9223      	str	r2, [sp, #140]	; 0x8c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800a5c6:	932a      	str	r3, [sp, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a5c8:	a802      	add	r0, sp, #8
 800a5ca:	f7f9 fb01 	bl	8003bd0 <HAL_RCCEx_PeriphCLKConfig>
 800a5ce:	b940      	cbnz	r0, 800a5e2 <SystemClock_Config+0x11a>
  HAL_PWREx_EnableUSBVoltageDetector();
 800a5d0:	f7f8 fca4 	bl	8002f1c <HAL_PWREx_EnableUSBVoltageDetector>
}
 800a5d4:	b04d      	add	sp, #308	; 0x134
 800a5d6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800a5da:	f7ff ff73 	bl	800a4c4 <Error_Handler>
    Error_Handler();
 800a5de:	f7ff ff71 	bl	800a4c4 <Error_Handler>
    Error_Handler();
 800a5e2:	f7ff ff6f 	bl	800a4c4 <Error_Handler>
 800a5e6:	bf00      	nop
 800a5e8:	58000400 	.word	0x58000400
 800a5ec:	58024800 	.word	0x58024800
 800a5f0:	58024400 	.word	0x58024400
 800a5f4:	010f1109 	.word	0x010f1109

0800a5f8 <main>:
{
 800a5f8:	b510      	push	{r4, lr}
  MPU_Conf();
 800a5fa:	f7ff ff21 	bl	800a440 <MPU_Conf>
  __ASM volatile ("dsb 0xF":::"memory");
 800a5fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a602:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800a606:	4b3f      	ldr	r3, [pc, #252]	; (800a704 <main+0x10c>)
 800a608:	2100      	movs	r1, #0
 800a60a:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800a60e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a612:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800a616:	695a      	ldr	r2, [r3, #20]
 800a618:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a61c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800a61e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a622:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800a626:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800a62a:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800a62e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800a632:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800a636:	e00f      	b.n	800a658 <main+0x60>
      } while (ways-- != 0U);
 800a638:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800a63a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800a63e:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800a642:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800a646:	492f      	ldr	r1, [pc, #188]	; (800a704 <main+0x10c>)
 800a648:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800a64c:	1e53      	subs	r3, r2, #1
 800a64e:	2a00      	cmp	r2, #0
 800a650:	d1f2      	bne.n	800a638 <main+0x40>
    } while(sets-- != 0U);
 800a652:	1e43      	subs	r3, r0, #1
 800a654:	b118      	cbz	r0, 800a65e <main+0x66>
 800a656:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800a658:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 800a65c:	e7ed      	b.n	800a63a <main+0x42>
 800a65e:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800a662:	694b      	ldr	r3, [r1, #20]
 800a664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a668:	614b      	str	r3, [r1, #20]
 800a66a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a66e:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800a672:	f7f5 ffd7 	bl	8000624 <HAL_Init>
  SystemClock_Config();
 800a676:	f7ff ff27 	bl	800a4c8 <SystemClock_Config>
  MX_GPIO_Init();
 800a67a:	f7ff fd4f 	bl	800a11c <MX_GPIO_Init>
  MX_DMA_Init();
 800a67e:	f7ff fc71 	bl	8009f64 <MX_DMA_Init>
  MX_FMC_Init();
 800a682:	f7ff fd1d 	bl	800a0c0 <MX_FMC_Init>
  MX_ADC1_Init();
 800a686:	f7fe ffa1 	bl	80095cc <MX_ADC1_Init>
  MX_ADC3_Init();
 800a68a:	f7ff f83f 	bl	800970c <MX_ADC3_Init>
  MX_I2C2_Init();
 800a68e:	f7ff fe59 	bl	800a344 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 800a692:	f000 f9e5 	bl	800aa60 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 800a696:	f000 fa5b 	bl	800ab50 <MX_SPI1_Init>
  MX_USB_OTG_FS_HCD_Init();
 800a69a:	f000 fde3 	bl	800b264 <MX_USB_OTG_FS_HCD_Init>
  MX_FATFS_Init();
 800a69e:	f7ff fc8d 	bl	8009fbc <MX_FATFS_Init>
  MX_SAI1_Init();
 800a6a2:	f000 f869 	bl	800a778 <MX_SAI1_Init>
  MX_TIM3_Init();
 800a6a6:	f000 fc99 	bl	800afdc <MX_TIM3_Init>
  MX_TIM4_Init();
 800a6aa:	f000 fced 	bl	800b088 <MX_TIM4_Init>
  MX_TIM7_Init();
 800a6ae:	f000 fb49 	bl	800ad44 <MX_TIM7_Init>
  MX_TIM1_Init();
 800a6b2:	f000 fc31 	bl	800af18 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 800a6b6:	f000 fd4f 	bl	800b158 <MX_USART6_UART_Init>
  MX_RNG_Init();
 800a6ba:	f000 f831 	bl	800a720 <MX_RNG_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a6c4:	4810      	ldr	r0, [pc, #64]	; (800a708 <main+0x110>)
 800a6c6:	f7f8 f94a 	bl	800295e <HAL_GPIO_WritePin>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 800a6ca:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 800a6ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 800a6d2:	eee1 3a10 	vmsr	fpscr, r3
  if (HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values, NUM_ADC_CHANNELS) != HAL_OK)
 800a6d6:	2206      	movs	r2, #6
 800a6d8:	490c      	ldr	r1, [pc, #48]	; (800a70c <main+0x114>)
 800a6da:	480d      	ldr	r0, [pc, #52]	; (800a710 <main+0x118>)
 800a6dc:	f7f6 fc80 	bl	8000fe0 <HAL_ADC_Start_DMA>
 800a6e0:	b108      	cbz	r0, 800a6e6 <main+0xee>
	  Error_Handler();
 800a6e2:	f7ff feef 	bl	800a4c4 <Error_Handler>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	2140      	movs	r1, #64	; 0x40
 800a6ea:	4807      	ldr	r0, [pc, #28]	; (800a708 <main+0x110>)
 800a6ec:	f7f8 f937 	bl	800295e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800a6f0:	200a      	movs	r0, #10
 800a6f2:	f7f5 ffd7 	bl	80006a4 <HAL_Delay>
  audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 800a6f6:	4a07      	ldr	r2, [pc, #28]	; (800a714 <main+0x11c>)
 800a6f8:	4907      	ldr	r1, [pc, #28]	; (800a718 <main+0x120>)
 800a6fa:	4808      	ldr	r0, [pc, #32]	; (800a71c <main+0x124>)
 800a6fc:	f7ff f934 	bl	8009968 <audioInit>
 800a700:	e7fe      	b.n	800a700 <main+0x108>
 800a702:	bf00      	nop
 800a704:	e000ed00 	.word	0xe000ed00
 800a708:	58020800 	.word	0x58020800
 800a70c:	30000400 	.word	0x30000400
 800a710:	20000070 	.word	0x20000070
 800a714:	20000704 	.word	0x20000704
 800a718:	2000088c 	.word	0x2000088c
 800a71c:	200006a4 	.word	0x200006a4

0800a720 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800a720:	b508      	push	{r3, lr}

  hrng.Instance = RNG;
 800a722:	4806      	ldr	r0, [pc, #24]	; (800a73c <MX_RNG_Init+0x1c>)
 800a724:	4b06      	ldr	r3, [pc, #24]	; (800a740 <MX_RNG_Init+0x20>)
 800a726:	6003      	str	r3, [r0, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800a728:	2300      	movs	r3, #0
 800a72a:	6043      	str	r3, [r0, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800a72c:	f7fa fb90 	bl	8004e50 <HAL_RNG_Init>
 800a730:	b900      	cbnz	r0, 800a734 <MX_RNG_Init+0x14>
  {
    Error_Handler();
  }

}
 800a732:	bd08      	pop	{r3, pc}
    Error_Handler();
 800a734:	f7ff fec6 	bl	800a4c4 <Error_Handler>
}
 800a738:	e7fb      	b.n	800a732 <MX_RNG_Init+0x12>
 800a73a:	bf00      	nop
 800a73c:	200006f0 	.word	0x200006f0
 800a740:	48021800 	.word	0x48021800

0800a744 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{

  if(rngHandle->Instance==RNG)
 800a744:	6802      	ldr	r2, [r0, #0]
 800a746:	4b0a      	ldr	r3, [pc, #40]	; (800a770 <HAL_RNG_MspInit+0x2c>)
 800a748:	429a      	cmp	r2, r3
 800a74a:	d000      	beq.n	800a74e <HAL_RNG_MspInit+0xa>
 800a74c:	4770      	bx	lr
{
 800a74e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800a750:	4b08      	ldr	r3, [pc, #32]	; (800a774 <HAL_RNG_MspInit+0x30>)
 800a752:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800a756:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a75a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800a75e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a766:	9301      	str	r3, [sp, #4]
 800a768:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800a76a:	b002      	add	sp, #8
 800a76c:	4770      	bx	lr
 800a76e:	bf00      	nop
 800a770:	48021800 	.word	0x48021800
 800a774:	58024400 	.word	0x58024400

0800a778 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800a778:	b508      	push	{r3, lr}

  hsai_BlockA1.Instance = SAI1_Block_A;
 800a77a:	4818      	ldr	r0, [pc, #96]	; (800a7dc <MX_SAI1_Init+0x64>)
 800a77c:	4b18      	ldr	r3, [pc, #96]	; (800a7e0 <MX_SAI1_Init+0x68>)
 800a77e:	6003      	str	r3, [r0, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800a780:	2100      	movs	r1, #0
 800a782:	6041      	str	r1, [r0, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800a784:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800a786:	6141      	str	r1, [r0, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800a788:	6181      	str	r1, [r0, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800a78a:	2301      	movs	r3, #1
 800a78c:	61c3      	str	r3, [r0, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800a78e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a792:	6203      	str	r3, [r0, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800a794:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800a796:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800a798:	6301      	str	r1, [r0, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800a79a:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800a79c:	2302      	movs	r3, #2
 800a79e:	461a      	mov	r2, r3
 800a7a0:	f7fa fe6e 	bl	8005480 <HAL_SAI_InitProtocol>
 800a7a4:	b998      	cbnz	r0, 800a7ce <MX_SAI1_Init+0x56>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 800a7a6:	480f      	ldr	r0, [pc, #60]	; (800a7e4 <MX_SAI1_Init+0x6c>)
 800a7a8:	4b0f      	ldr	r3, [pc, #60]	; (800a7e8 <MX_SAI1_Init+0x70>)
 800a7aa:	6003      	str	r3, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800a7ac:	2303      	movs	r3, #3
 800a7ae:	6043      	str	r3, [r0, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	6083      	str	r3, [r0, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800a7b8:	61c3      	str	r3, [r0, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800a7ba:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800a7bc:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800a7be:	6301      	str	r1, [r0, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800a7c0:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800a7c2:	2302      	movs	r3, #2
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	f7fa fe5b 	bl	8005480 <HAL_SAI_InitProtocol>
 800a7ca:	b918      	cbnz	r0, 800a7d4 <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
  }

}
 800a7cc:	bd08      	pop	{r3, pc}
    Error_Handler();
 800a7ce:	f7ff fe79 	bl	800a4c4 <Error_Handler>
 800a7d2:	e7e8      	b.n	800a7a6 <MX_SAI1_Init+0x2e>
    Error_Handler();
 800a7d4:	f7ff fe76 	bl	800a4c4 <Error_Handler>
}
 800a7d8:	e7f8      	b.n	800a7cc <MX_SAI1_Init+0x54>
 800a7da:	bf00      	nop
 800a7dc:	2000088c 	.word	0x2000088c
 800a7e0:	40015804 	.word	0x40015804
 800a7e4:	20000704 	.word	0x20000704
 800a7e8:	40015824 	.word	0x40015824

0800a7ec <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800a7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7f0:	b088      	sub	sp, #32
 800a7f2:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800a7f4:	6802      	ldr	r2, [r0, #0]
 800a7f6:	4b55      	ldr	r3, [pc, #340]	; (800a94c <HAL_SAI_MspInit+0x160>)
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d006      	beq.n	800a80a <HAL_SAI_MspInit+0x1e>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
    }
    if(hsai->Instance==SAI1_Block_B)
 800a7fc:	6822      	ldr	r2, [r4, #0]
 800a7fe:	4b54      	ldr	r3, [pc, #336]	; (800a950 <HAL_SAI_MspInit+0x164>)
 800a800:	429a      	cmp	r2, r3
 800a802:	d05a      	beq.n	800a8ba <HAL_SAI_MspInit+0xce>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
    }
}
 800a804:	b008      	add	sp, #32
 800a806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (SAI1_client == 0)
 800a80a:	4b52      	ldr	r3, [pc, #328]	; (800a954 <HAL_SAI_MspInit+0x168>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	b963      	cbnz	r3, 800a82a <HAL_SAI_MspInit+0x3e>
       __HAL_RCC_SAI1_CLK_ENABLE();
 800a810:	4a51      	ldr	r2, [pc, #324]	; (800a958 <HAL_SAI_MspInit+0x16c>)
 800a812:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 800a816:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 800a81a:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
 800a81e:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 800a822:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800a826:	9201      	str	r2, [sp, #4]
 800a828:	9a01      	ldr	r2, [sp, #4]
    SAI1_client ++;
 800a82a:	3301      	adds	r3, #1
 800a82c:	4a49      	ldr	r2, [pc, #292]	; (800a954 <HAL_SAI_MspInit+0x168>)
 800a82e:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 800a830:	2324      	movs	r3, #36	; 0x24
 800a832:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a834:	2602      	movs	r6, #2
 800a836:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a838:	2500      	movs	r5, #0
 800a83a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a83c:	2303      	movs	r3, #3
 800a83e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800a840:	f04f 0806 	mov.w	r8, #6
 800a844:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a848:	4f44      	ldr	r7, [pc, #272]	; (800a95c <HAL_SAI_MspInit+0x170>)
 800a84a:	a903      	add	r1, sp, #12
 800a84c:	4638      	mov	r0, r7
 800a84e:	f7f7 ff8d 	bl	800276c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800a852:	2350      	movs	r3, #80	; 0x50
 800a854:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a856:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a858:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a85a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800a85c:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a860:	a903      	add	r1, sp, #12
 800a862:	4638      	mov	r0, r7
 800a864:	f7f7 ff82 	bl	800276c <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 800a868:	483d      	ldr	r0, [pc, #244]	; (800a960 <HAL_SAI_MspInit+0x174>)
 800a86a:	4b3e      	ldr	r3, [pc, #248]	; (800a964 <HAL_SAI_MspInit+0x178>)
 800a86c:	6003      	str	r3, [r0, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800a86e:	2357      	movs	r3, #87	; 0x57
 800a870:	6043      	str	r3, [r0, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a872:	2340      	movs	r3, #64	; 0x40
 800a874:	6083      	str	r3, [r0, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800a876:	60c5      	str	r5, [r0, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800a878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a87c:	6103      	str	r3, [r0, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a87e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a882:	6143      	str	r3, [r0, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a884:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a888:	6183      	str	r3, [r0, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800a88a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a88e:	61c3      	str	r3, [r0, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a890:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800a894:	6203      	str	r3, [r0, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800a896:	2304      	movs	r3, #4
 800a898:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800a89a:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 800a89c:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800a89e:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800a8a0:	f7f7 f964 	bl	8001b6c <HAL_DMA_Init>
 800a8a4:	b930      	cbnz	r0, 800a8b4 <HAL_SAI_MspInit+0xc8>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 800a8a6:	4b2e      	ldr	r3, [pc, #184]	; (800a960 <HAL_SAI_MspInit+0x174>)
 800a8a8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800a8ac:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 800a8ae:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800a8b2:	e7a3      	b.n	800a7fc <HAL_SAI_MspInit+0x10>
      Error_Handler();
 800a8b4:	f7ff fe06 	bl	800a4c4 <Error_Handler>
 800a8b8:	e7f5      	b.n	800a8a6 <HAL_SAI_MspInit+0xba>
      if (SAI1_client == 0)
 800a8ba:	4b26      	ldr	r3, [pc, #152]	; (800a954 <HAL_SAI_MspInit+0x168>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	b963      	cbnz	r3, 800a8da <HAL_SAI_MspInit+0xee>
       __HAL_RCC_SAI1_CLK_ENABLE();
 800a8c0:	4a25      	ldr	r2, [pc, #148]	; (800a958 <HAL_SAI_MspInit+0x16c>)
 800a8c2:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 800a8c6:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 800a8ca:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
 800a8ce:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 800a8d2:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800a8d6:	9202      	str	r2, [sp, #8]
 800a8d8:	9a02      	ldr	r2, [sp, #8]
    SAI1_client ++;
 800a8da:	3301      	adds	r3, #1
 800a8dc:	4a1d      	ldr	r2, [pc, #116]	; (800a954 <HAL_SAI_MspInit+0x168>)
 800a8de:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a8e0:	2308      	movs	r3, #8
 800a8e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8e4:	2302      	movs	r3, #2
 800a8e6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8e8:	2500      	movs	r5, #0
 800a8ea:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a8ec:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800a8ee:	2306      	movs	r3, #6
 800a8f0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a8f2:	a903      	add	r1, sp, #12
 800a8f4:	4819      	ldr	r0, [pc, #100]	; (800a95c <HAL_SAI_MspInit+0x170>)
 800a8f6:	f7f7 ff39 	bl	800276c <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 800a8fa:	481b      	ldr	r0, [pc, #108]	; (800a968 <HAL_SAI_MspInit+0x17c>)
 800a8fc:	4b1b      	ldr	r3, [pc, #108]	; (800a96c <HAL_SAI_MspInit+0x180>)
 800a8fe:	6003      	str	r3, [r0, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800a900:	2358      	movs	r3, #88	; 0x58
 800a902:	6043      	str	r3, [r0, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a904:	6085      	str	r5, [r0, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800a906:	60c5      	str	r5, [r0, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800a908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a90c:	6103      	str	r3, [r0, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a90e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a912:	6143      	str	r3, [r0, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a914:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a918:	6183      	str	r3, [r0, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800a91a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a91e:	61c3      	str	r3, [r0, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a920:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800a924:	6203      	str	r3, [r0, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800a926:	2304      	movs	r3, #4
 800a928:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800a92a:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 800a92c:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800a92e:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800a930:	f7f7 f91c 	bl	8001b6c <HAL_DMA_Init>
 800a934:	b930      	cbnz	r0, 800a944 <HAL_SAI_MspInit+0x158>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800a936:	4b0c      	ldr	r3, [pc, #48]	; (800a968 <HAL_SAI_MspInit+0x17c>)
 800a938:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800a93c:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800a93e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 800a942:	e75f      	b.n	800a804 <HAL_SAI_MspInit+0x18>
      Error_Handler();
 800a944:	f7ff fdbe 	bl	800a4c4 <Error_Handler>
 800a948:	e7f5      	b.n	800a936 <HAL_SAI_MspInit+0x14a>
 800a94a:	bf00      	nop
 800a94c:	40015804 	.word	0x40015804
 800a950:	40015824 	.word	0x40015824
 800a954:	20000068 	.word	0x20000068
 800a958:	58024400 	.word	0x58024400
 800a95c:	58021000 	.word	0x58021000
 800a960:	2000079c 	.word	0x2000079c
 800a964:	40020028 	.word	0x40020028
 800a968:	20000814 	.word	0x20000814
 800a96c:	40020040 	.word	0x40020040

0800a970 <SD_CheckStatus>:
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a970:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 800a972:	4b07      	ldr	r3, [pc, #28]	; (800a990 <SD_CheckStatus+0x20>)
 800a974:	2201      	movs	r2, #1
 800a976:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a978:	f7ff fa28 	bl	8009dcc <BSP_SD_GetCardState>
 800a97c:	b920      	cbnz	r0, 800a988 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 800a97e:	4a04      	ldr	r2, [pc, #16]	; (800a990 <SD_CheckStatus+0x20>)
 800a980:	7813      	ldrb	r3, [r2, #0]
 800a982:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a986:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 800a988:	4b01      	ldr	r3, [pc, #4]	; (800a990 <SD_CheckStatus+0x20>)
 800a98a:	7818      	ldrb	r0, [r3, #0]
}
 800a98c:	bd08      	pop	{r3, pc}
 800a98e:	bf00      	nop
 800a990:	20000010 	.word	0x20000010

0800a994 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a994:	b510      	push	{r4, lr}
 800a996:	4604      	mov	r4, r0
  Stat = STA_NOINIT;
 800a998:	4b07      	ldr	r3, [pc, #28]	; (800a9b8 <SD_initialize+0x24>)
 800a99a:	2201      	movs	r2, #1
 800a99c:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a99e:	f7ff fa37 	bl	8009e10 <BSP_SD_Init>
 800a9a2:	b110      	cbz	r0, 800a9aa <SD_initialize+0x16>
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800a9a4:	4b04      	ldr	r3, [pc, #16]	; (800a9b8 <SD_initialize+0x24>)
 800a9a6:	7818      	ldrb	r0, [r3, #0]
}
 800a9a8:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f7ff ffe0 	bl	800a970 <SD_CheckStatus>
 800a9b0:	4b01      	ldr	r3, [pc, #4]	; (800a9b8 <SD_initialize+0x24>)
 800a9b2:	7018      	strb	r0, [r3, #0]
 800a9b4:	e7f6      	b.n	800a9a4 <SD_initialize+0x10>
 800a9b6:	bf00      	nop
 800a9b8:	20000010 	.word	0x20000010

0800a9bc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a9bc:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 800a9be:	f7ff ffd7 	bl	800a970 <SD_CheckStatus>
}
 800a9c2:	bd08      	pop	{r3, pc}

0800a9c4 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a9c4:	b508      	push	{r3, lr}
 800a9c6:	4608      	mov	r0, r1
 800a9c8:	4611      	mov	r1, r2
 800a9ca:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a9cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9d0:	f7ff f9dc 	bl	8009d8c <BSP_SD_ReadBlocks>
 800a9d4:	b920      	cbnz	r0, 800a9e0 <SD_read+0x1c>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a9d6:	f7ff f9f9 	bl	8009dcc <BSP_SD_GetCardState>
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	d1fb      	bne.n	800a9d6 <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 800a9de:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 800a9e0:	2001      	movs	r0, #1
 800a9e2:	e7fc      	b.n	800a9de <SD_read+0x1a>

0800a9e4 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a9e4:	b508      	push	{r3, lr}
 800a9e6:	4608      	mov	r0, r1
 800a9e8:	4611      	mov	r1, r2
 800a9ea:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a9ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9f0:	f7ff f9dc 	bl	8009dac <BSP_SD_WriteBlocks>
 800a9f4:	b920      	cbnz	r0, 800aa00 <SD_write+0x1c>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a9f6:	f7ff f9e9 	bl	8009dcc <BSP_SD_GetCardState>
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	d1fb      	bne.n	800a9f6 <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 800a9fe:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 800aa00:	2001      	movs	r0, #1
 800aa02:	e7fc      	b.n	800a9fe <SD_write+0x1a>

0800aa04 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800aa04:	4b15      	ldr	r3, [pc, #84]	; (800aa5c <SD_ioctl+0x58>)
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	f013 0f01 	tst.w	r3, #1
 800aa0c:	d121      	bne.n	800aa52 <SD_ioctl+0x4e>
{
 800aa0e:	b510      	push	{r4, lr}
 800aa10:	b08a      	sub	sp, #40	; 0x28
 800aa12:	4614      	mov	r4, r2

  switch (cmd)
 800aa14:	2903      	cmp	r1, #3
 800aa16:	d81e      	bhi.n	800aa56 <SD_ioctl+0x52>
 800aa18:	e8df f001 	tbb	[pc, r1]
 800aa1c:	130c0502 	.word	0x130c0502
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800aa20:	2000      	movs	r0, #0
  default:
    res = RES_PARERR;
  }

  return res;
}
 800aa22:	b00a      	add	sp, #40	; 0x28
 800aa24:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800aa26:	a801      	add	r0, sp, #4
 800aa28:	f7ff f9da 	bl	8009de0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800aa2c:	9b07      	ldr	r3, [sp, #28]
 800aa2e:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 800aa30:	2000      	movs	r0, #0
    break;
 800aa32:	e7f6      	b.n	800aa22 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 800aa34:	a801      	add	r0, sp, #4
 800aa36:	f7ff f9d3 	bl	8009de0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800aa3a:	9b08      	ldr	r3, [sp, #32]
 800aa3c:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 800aa3e:	2000      	movs	r0, #0
    break;
 800aa40:	e7ef      	b.n	800aa22 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 800aa42:	a801      	add	r0, sp, #4
 800aa44:	f7ff f9cc 	bl	8009de0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800aa48:	9b08      	ldr	r3, [sp, #32]
 800aa4a:	0a5b      	lsrs	r3, r3, #9
 800aa4c:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 800aa4e:	2000      	movs	r0, #0
    break;
 800aa50:	e7e7      	b.n	800aa22 <SD_ioctl+0x1e>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800aa52:	2003      	movs	r0, #3
}
 800aa54:	4770      	bx	lr
    res = RES_PARERR;
 800aa56:	2004      	movs	r0, #4
 800aa58:	e7e3      	b.n	800aa22 <SD_ioctl+0x1e>
 800aa5a:	bf00      	nop
 800aa5c:	20000010 	.word	0x20000010

0800aa60 <MX_SDMMC1_SD_Init>:
/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{

  hsd1.Instance = SDMMC1;
 800aa60:	4b05      	ldr	r3, [pc, #20]	; (800aa78 <MX_SDMMC1_SD_Init+0x18>)
 800aa62:	4a06      	ldr	r2, [pc, #24]	; (800aa7c <MX_SDMMC1_SD_Init+0x1c>)
 800aa64:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800aa66:	2200      	movs	r2, #0
 800aa68:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800aa6a:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800aa6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800aa70:	60d9      	str	r1, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800aa72:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800aa74:	615a      	str	r2, [r3, #20]

}
 800aa76:	4770      	bx	lr
 800aa78:	20000924 	.word	0x20000924
 800aa7c:	52007000 	.word	0x52007000

0800aa80 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800aa80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa84:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa86:	2300      	movs	r3, #0
 800aa88:	9303      	str	r3, [sp, #12]
 800aa8a:	9304      	str	r3, [sp, #16]
 800aa8c:	9305      	str	r3, [sp, #20]
 800aa8e:	9306      	str	r3, [sp, #24]
 800aa90:	9307      	str	r3, [sp, #28]
  if(sdHandle->Instance==SDMMC1)
 800aa92:	6802      	ldr	r2, [r0, #0]
 800aa94:	4b2a      	ldr	r3, [pc, #168]	; (800ab40 <HAL_SD_MspInit+0xc0>)
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d002      	beq.n	800aaa0 <HAL_SD_MspInit+0x20>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800aa9a:	b008      	add	sp, #32
 800aa9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800aaa0:	4b28      	ldr	r3, [pc, #160]	; (800ab44 <HAL_SD_MspInit+0xc4>)
 800aaa2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800aaa6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800aaaa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800aaae:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800aab2:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 800aab6:	9200      	str	r2, [sp, #0]
 800aab8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800aaba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800aabe:	f042 0204 	orr.w	r2, r2, #4
 800aac2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800aac6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800aaca:	f002 0204 	and.w	r2, r2, #4
 800aace:	9201      	str	r2, [sp, #4]
 800aad0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800aad2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800aad6:	f042 0208 	orr.w	r2, r2, #8
 800aada:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800aade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aae2:	f003 0308 	and.w	r3, r3, #8
 800aae6:	9302      	str	r3, [sp, #8]
 800aae8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800aaea:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800aaee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aaf0:	2602      	movs	r6, #2
 800aaf2:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800aaf4:	2701      	movs	r7, #1
 800aaf6:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aaf8:	2503      	movs	r5, #3
 800aafa:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800aafc:	240c      	movs	r4, #12
 800aafe:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ab00:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800ab4c <HAL_SD_MspInit+0xcc>
 800ab04:	eb0d 0104 	add.w	r1, sp, r4
 800ab08:	4640      	mov	r0, r8
 800ab0a:	f7f7 fe2f 	bl	800276c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800ab0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab12:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab14:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab16:	2300      	movs	r3, #0
 800ab18:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab1a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800ab1c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ab1e:	eb0d 0104 	add.w	r1, sp, r4
 800ab22:	4640      	mov	r0, r8
 800ab24:	f7f7 fe22 	bl	800276c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800ab28:	2304      	movs	r3, #4
 800ab2a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab2c:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ab2e:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab30:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800ab32:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ab34:	eb0d 0104 	add.w	r1, sp, r4
 800ab38:	4803      	ldr	r0, [pc, #12]	; (800ab48 <HAL_SD_MspInit+0xc8>)
 800ab3a:	f7f7 fe17 	bl	800276c <HAL_GPIO_Init>
}
 800ab3e:	e7ac      	b.n	800aa9a <HAL_SD_MspInit+0x1a>
 800ab40:	52007000 	.word	0x52007000
 800ab44:	58024400 	.word	0x58024400
 800ab48:	58020c00 	.word	0x58020c00
 800ab4c:	58020800 	.word	0x58020800

0800ab50 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800ab50:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 800ab52:	4813      	ldr	r0, [pc, #76]	; (800aba0 <MX_SPI1_Init+0x50>)
 800ab54:	4b13      	ldr	r3, [pc, #76]	; (800aba4 <MX_SPI1_Init+0x54>)
 800ab56:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800ab58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ab5c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800ab62:	2207      	movs	r2, #7
 800ab64:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ab66:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800ab68:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800ab6a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800ab6e:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800ab70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ab74:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ab76:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800ab78:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab7a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800ab7c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800ab7e:	6342      	str	r2, [r0, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800ab80:	6383      	str	r3, [r0, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800ab82:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800ab84:	6403      	str	r3, [r0, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800ab86:	6443      	str	r3, [r0, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800ab88:	6483      	str	r3, [r0, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800ab8a:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800ab8c:	6503      	str	r3, [r0, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800ab8e:	6543      	str	r3, [r0, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800ab90:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800ab92:	f7fb fd47 	bl	8006624 <HAL_SPI_Init>
 800ab96:	b900      	cbnz	r0, 800ab9a <MX_SPI1_Init+0x4a>
  {
    Error_Handler();
  }

}
 800ab98:	bd08      	pop	{r3, pc}
    Error_Handler();
 800ab9a:	f7ff fc93 	bl	800a4c4 <Error_Handler>
}
 800ab9e:	e7fb      	b.n	800ab98 <MX_SPI1_Init+0x48>
 800aba0:	200009a4 	.word	0x200009a4
 800aba4:	40013000 	.word	0x40013000

0800aba8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800aba8:	b530      	push	{r4, r5, lr}
 800abaa:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800abac:	2300      	movs	r3, #0
 800abae:	9303      	str	r3, [sp, #12]
 800abb0:	9304      	str	r3, [sp, #16]
 800abb2:	9305      	str	r3, [sp, #20]
 800abb4:	9306      	str	r3, [sp, #24]
 800abb6:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 800abb8:	6802      	ldr	r2, [r0, #0]
 800abba:	4b20      	ldr	r3, [pc, #128]	; (800ac3c <HAL_SPI_MspInit+0x94>)
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d001      	beq.n	800abc4 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800abc0:	b009      	add	sp, #36	; 0x24
 800abc2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800abc4:	4b1e      	ldr	r3, [pc, #120]	; (800ac40 <HAL_SPI_MspInit+0x98>)
 800abc6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800abca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800abce:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800abd2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800abd6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800abda:	9200      	str	r2, [sp, #0]
 800abdc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800abde:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800abe2:	f042 0208 	orr.w	r2, r2, #8
 800abe6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800abea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800abee:	f002 0208 	and.w	r2, r2, #8
 800abf2:	9201      	str	r2, [sp, #4]
 800abf4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800abf6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800abfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abfe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800ac02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac0a:	9302      	str	r3, [sp, #8]
 800ac0c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800ac0e:	2380      	movs	r3, #128	; 0x80
 800ac10:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac12:	2502      	movs	r5, #2
 800ac14:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800ac16:	2405      	movs	r4, #5
 800ac18:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ac1a:	a903      	add	r1, sp, #12
 800ac1c:	4809      	ldr	r0, [pc, #36]	; (800ac44 <HAL_SPI_MspInit+0x9c>)
 800ac1e:	f7f7 fda5 	bl	800276c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800ac22:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800ac26:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac28:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac2e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800ac30:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ac32:	a903      	add	r1, sp, #12
 800ac34:	4804      	ldr	r0, [pc, #16]	; (800ac48 <HAL_SPI_MspInit+0xa0>)
 800ac36:	f7f7 fd99 	bl	800276c <HAL_GPIO_Init>
}
 800ac3a:	e7c1      	b.n	800abc0 <HAL_SPI_MspInit+0x18>
 800ac3c:	40013000 	.word	0x40013000
 800ac40:	58024400 	.word	0x58024400
 800ac44:	58020c00 	.word	0x58020c00
 800ac48:	58021800 	.word	0x58021800

0800ac4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ac4c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac4e:	4b07      	ldr	r3, [pc, #28]	; (800ac6c <HAL_MspInit+0x20>)
 800ac50:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800ac54:	f042 0202 	orr.w	r2, r2, #2
 800ac58:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800ac5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ac60:	f003 0302 	and.w	r3, r3, #2
 800ac64:	9301      	str	r3, [sp, #4]
 800ac66:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ac68:	b002      	add	sp, #8
 800ac6a:	4770      	bx	lr
 800ac6c:	58024400 	.word	0x58024400

0800ac70 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ac70:	4770      	bx	lr

0800ac72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ac72:	e7fe      	b.n	800ac72 <HardFault_Handler>

0800ac74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ac74:	e7fe      	b.n	800ac74 <MemManage_Handler>

0800ac76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ac76:	e7fe      	b.n	800ac76 <BusFault_Handler>

0800ac78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ac78:	e7fe      	b.n	800ac78 <UsageFault_Handler>

0800ac7a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ac7a:	4770      	bx	lr

0800ac7c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ac7c:	4770      	bx	lr

0800ac7e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ac7e:	4770      	bx	lr

0800ac80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ac80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ac82:	f7f5 fcfd 	bl	8000680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ac86:	bd08      	pop	{r3, pc}

0800ac88 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800ac88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800ac8a:	4802      	ldr	r0, [pc, #8]	; (800ac94 <DMA1_Stream0_IRQHandler+0xc>)
 800ac8c:	f7f7 f9d0 	bl	8002030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800ac90:	bd08      	pop	{r3, pc}
 800ac92:	bf00      	nop
 800ac94:	20000138 	.word	0x20000138

0800ac98 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800ac98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800ac9a:	4802      	ldr	r0, [pc, #8]	; (800aca4 <DMA1_Stream1_IRQHandler+0xc>)
 800ac9c:	f7f7 f9c8 	bl	8002030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800aca0:	bd08      	pop	{r3, pc}
 800aca2:	bf00      	nop
 800aca4:	2000079c 	.word	0x2000079c

0800aca8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800aca8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800acaa:	4802      	ldr	r0, [pc, #8]	; (800acb4 <DMA1_Stream2_IRQHandler+0xc>)
 800acac:	f7f7 f9c0 	bl	8002030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800acb0:	bd08      	pop	{r3, pc}
 800acb2:	bf00      	nop
 800acb4:	20000814 	.word	0x20000814

0800acb8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800acb8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800acba:	4802      	ldr	r0, [pc, #8]	; (800acc4 <ADC_IRQHandler+0xc>)
 800acbc:	f7f5 fd14 	bl	80006e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800acc0:	bd08      	pop	{r3, pc}
 800acc2:	bf00      	nop
 800acc4:	20000070 	.word	0x20000070

0800acc8 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800acc8:	4a18      	ldr	r2, [pc, #96]	; (800ad2c <SystemInit+0x64>)
 800acca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800acce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800acd2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800acd6:	4b16      	ldr	r3, [pc, #88]	; (800ad30 <SystemInit+0x68>)
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	f042 0201 	orr.w	r2, r2, #1
 800acde:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ace0:	2200      	movs	r2, #0
 800ace2:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800ace4:	6818      	ldr	r0, [r3, #0]
 800ace6:	4913      	ldr	r1, [pc, #76]	; (800ad34 <SystemInit+0x6c>)
 800ace8:	4001      	ands	r1, r0
 800acea:	6019      	str	r1, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800acec:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800acee:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800acf0:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800acf2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800acf4:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800acf6:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800acf8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800acfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800acfc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800acfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800ad00:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800ad02:	6819      	ldr	r1, [r3, #0]
 800ad04:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800ad08:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800ad0a:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800ad0c:	4b0a      	ldr	r3, [pc, #40]	; (800ad38 <SystemInit+0x70>)
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	4b0a      	ldr	r3, [pc, #40]	; (800ad3c <SystemInit+0x74>)
 800ad12:	4013      	ands	r3, r2
 800ad14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad18:	d202      	bcs.n	800ad20 <SystemInit+0x58>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800ad1a:	4b09      	ldr	r3, [pc, #36]	; (800ad40 <SystemInit+0x78>)
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ad20:	4b02      	ldr	r3, [pc, #8]	; (800ad2c <SystemInit+0x64>)
 800ad22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ad26:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop
 800ad2c:	e000ed00 	.word	0xe000ed00
 800ad30:	58024400 	.word	0x58024400
 800ad34:	eaf6ed7f 	.word	0xeaf6ed7f
 800ad38:	5c001000 	.word	0x5c001000
 800ad3c:	ffff0000 	.word	0xffff0000
 800ad40:	51008108 	.word	0x51008108

0800ad44 <MX_TIM7_Init>:
  HAL_TIM_MspPostInit(&htim4);

}
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800ad44:	b500      	push	{lr}
 800ad46:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ad48:	2300      	movs	r3, #0
 800ad4a:	9301      	str	r3, [sp, #4]
 800ad4c:	9302      	str	r3, [sp, #8]
 800ad4e:	9303      	str	r3, [sp, #12]

  htim7.Instance = TIM7;
 800ad50:	480d      	ldr	r0, [pc, #52]	; (800ad88 <MX_TIM7_Init+0x44>)
 800ad52:	4a0e      	ldr	r2, [pc, #56]	; (800ad8c <MX_TIM7_Init+0x48>)
 800ad54:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 0;
 800ad56:	6043      	str	r3, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ad58:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 0;
 800ad5a:	60c3      	str	r3, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ad5c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800ad5e:	f7fb fefd 	bl	8006b5c <HAL_TIM_Base_Init>
 800ad62:	b950      	cbnz	r0, 800ad7a <MX_TIM7_Init+0x36>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ad64:	2300      	movs	r3, #0
 800ad66:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ad68:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800ad6a:	a901      	add	r1, sp, #4
 800ad6c:	4806      	ldr	r0, [pc, #24]	; (800ad88 <MX_TIM7_Init+0x44>)
 800ad6e:	f7fc f897 	bl	8006ea0 <HAL_TIMEx_MasterConfigSynchronization>
 800ad72:	b928      	cbnz	r0, 800ad80 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
  }

}
 800ad74:	b005      	add	sp, #20
 800ad76:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800ad7a:	f7ff fba3 	bl	800a4c4 <Error_Handler>
 800ad7e:	e7f1      	b.n	800ad64 <MX_TIM7_Init+0x20>
    Error_Handler();
 800ad80:	f7ff fba0 	bl	800a4c4 <Error_Handler>
}
 800ad84:	e7f6      	b.n	800ad74 <MX_TIM7_Init+0x30>
 800ad86:	bf00      	nop
 800ad88:	20000aec 	.word	0x20000aec
 800ad8c:	40001400 	.word	0x40001400

0800ad90 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 800ad90:	6802      	ldr	r2, [r0, #0]
 800ad92:	4b0a      	ldr	r3, [pc, #40]	; (800adbc <HAL_TIM_PWM_MspInit+0x2c>)
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d000      	beq.n	800ad9a <HAL_TIM_PWM_MspInit+0xa>
 800ad98:	4770      	bx	lr
{
 800ad9a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800ad9c:	4b08      	ldr	r3, [pc, #32]	; (800adc0 <HAL_TIM_PWM_MspInit+0x30>)
 800ad9e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800ada2:	f042 0201 	orr.w	r2, r2, #1
 800ada6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800adaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800adae:	f003 0301 	and.w	r3, r3, #1
 800adb2:	9301      	str	r3, [sp, #4]
 800adb4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800adb6:	b002      	add	sp, #8
 800adb8:	4770      	bx	lr
 800adba:	bf00      	nop
 800adbc:	40010000 	.word	0x40010000
 800adc0:	58024400 	.word	0x58024400

0800adc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800adc4:	b084      	sub	sp, #16

  if(tim_baseHandle->Instance==TIM3)
 800adc6:	6803      	ldr	r3, [r0, #0]
 800adc8:	4a1a      	ldr	r2, [pc, #104]	; (800ae34 <HAL_TIM_Base_MspInit+0x70>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d007      	beq.n	800adde <HAL_TIM_Base_MspInit+0x1a>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM4)
 800adce:	4a1a      	ldr	r2, [pc, #104]	; (800ae38 <HAL_TIM_Base_MspInit+0x74>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d012      	beq.n	800adfa <HAL_TIM_Base_MspInit+0x36>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM7)
 800add4:	4a19      	ldr	r2, [pc, #100]	; (800ae3c <HAL_TIM_Base_MspInit+0x78>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d01d      	beq.n	800ae16 <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800adda:	b004      	add	sp, #16
 800addc:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 800adde:	4b18      	ldr	r3, [pc, #96]	; (800ae40 <HAL_TIM_Base_MspInit+0x7c>)
 800ade0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800ade4:	f042 0202 	orr.w	r2, r2, #2
 800ade8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800adec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800adf0:	f003 0302 	and.w	r3, r3, #2
 800adf4:	9301      	str	r3, [sp, #4]
 800adf6:	9b01      	ldr	r3, [sp, #4]
 800adf8:	e7ef      	b.n	800adda <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800adfa:	4b11      	ldr	r3, [pc, #68]	; (800ae40 <HAL_TIM_Base_MspInit+0x7c>)
 800adfc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800ae00:	f042 0204 	orr.w	r2, r2, #4
 800ae04:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800ae08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ae0c:	f003 0304 	and.w	r3, r3, #4
 800ae10:	9302      	str	r3, [sp, #8]
 800ae12:	9b02      	ldr	r3, [sp, #8]
 800ae14:	e7e1      	b.n	800adda <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800ae16:	4b0a      	ldr	r3, [pc, #40]	; (800ae40 <HAL_TIM_Base_MspInit+0x7c>)
 800ae18:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800ae1c:	f042 0220 	orr.w	r2, r2, #32
 800ae20:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800ae24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ae28:	f003 0320 	and.w	r3, r3, #32
 800ae2c:	9303      	str	r3, [sp, #12]
 800ae2e:	9b03      	ldr	r3, [sp, #12]
}
 800ae30:	e7d3      	b.n	800adda <HAL_TIM_Base_MspInit+0x16>
 800ae32:	bf00      	nop
 800ae34:	40000400 	.word	0x40000400
 800ae38:	40000800 	.word	0x40000800
 800ae3c:	40001400 	.word	0x40001400
 800ae40:	58024400 	.word	0x58024400

0800ae44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800ae44:	b500      	push	{lr}
 800ae46:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae48:	2300      	movs	r3, #0
 800ae4a:	9303      	str	r3, [sp, #12]
 800ae4c:	9304      	str	r3, [sp, #16]
 800ae4e:	9305      	str	r3, [sp, #20]
 800ae50:	9306      	str	r3, [sp, #24]
 800ae52:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM1)
 800ae54:	6803      	ldr	r3, [r0, #0]
 800ae56:	4a2a      	ldr	r2, [pc, #168]	; (800af00 <HAL_TIM_MspPostInit+0xbc>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d008      	beq.n	800ae6e <HAL_TIM_MspPostInit+0x2a>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM3)
 800ae5c:	4a29      	ldr	r2, [pc, #164]	; (800af04 <HAL_TIM_MspPostInit+0xc0>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d01e      	beq.n	800aea0 <HAL_TIM_MspPostInit+0x5c>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM4)
 800ae62:	4a29      	ldr	r2, [pc, #164]	; (800af08 <HAL_TIM_MspPostInit+0xc4>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d032      	beq.n	800aece <HAL_TIM_MspPostInit+0x8a>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800ae68:	b009      	add	sp, #36	; 0x24
 800ae6a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae6e:	4b27      	ldr	r3, [pc, #156]	; (800af0c <HAL_TIM_MspPostInit+0xc8>)
 800ae70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ae74:	f042 0201 	orr.w	r2, r2, #1
 800ae78:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800ae7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae80:	f003 0301 	and.w	r3, r3, #1
 800ae84:	9300      	str	r3, [sp, #0]
 800ae86:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800ae88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae8c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae8e:	2302      	movs	r3, #2
 800ae90:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800ae92:	2301      	movs	r3, #1
 800ae94:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae96:	a903      	add	r1, sp, #12
 800ae98:	481d      	ldr	r0, [pc, #116]	; (800af10 <HAL_TIM_MspPostInit+0xcc>)
 800ae9a:	f7f7 fc67 	bl	800276c <HAL_GPIO_Init>
 800ae9e:	e7e3      	b.n	800ae68 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aea0:	4b1a      	ldr	r3, [pc, #104]	; (800af0c <HAL_TIM_MspPostInit+0xc8>)
 800aea2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800aea6:	f042 0202 	orr.w	r2, r2, #2
 800aeaa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800aeae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aeb2:	f003 0302 	and.w	r3, r3, #2
 800aeb6:	9301      	str	r3, [sp, #4]
 800aeb8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800aeba:	2320      	movs	r3, #32
 800aebc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aebe:	2302      	movs	r3, #2
 800aec0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800aec2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aec4:	a903      	add	r1, sp, #12
 800aec6:	4813      	ldr	r0, [pc, #76]	; (800af14 <HAL_TIM_MspPostInit+0xd0>)
 800aec8:	f7f7 fc50 	bl	800276c <HAL_GPIO_Init>
 800aecc:	e7cc      	b.n	800ae68 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aece:	4b0f      	ldr	r3, [pc, #60]	; (800af0c <HAL_TIM_MspPostInit+0xc8>)
 800aed0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800aed4:	f042 0202 	orr.w	r2, r2, #2
 800aed8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800aedc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aee0:	f003 0302 	and.w	r3, r3, #2
 800aee4:	9302      	str	r3, [sp, #8]
 800aee6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800aee8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800aeec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aeee:	2302      	movs	r3, #2
 800aef0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800aef2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aef4:	a903      	add	r1, sp, #12
 800aef6:	4807      	ldr	r0, [pc, #28]	; (800af14 <HAL_TIM_MspPostInit+0xd0>)
 800aef8:	f7f7 fc38 	bl	800276c <HAL_GPIO_Init>
}
 800aefc:	e7b4      	b.n	800ae68 <HAL_TIM_MspPostInit+0x24>
 800aefe:	bf00      	nop
 800af00:	40010000 	.word	0x40010000
 800af04:	40000400 	.word	0x40000400
 800af08:	40000800 	.word	0x40000800
 800af0c:	58024400 	.word	0x58024400
 800af10:	58020000 	.word	0x58020000
 800af14:	58020400 	.word	0x58020400

0800af18 <MX_TIM1_Init>:
{
 800af18:	b510      	push	{r4, lr}
 800af1a:	b096      	sub	sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800af1c:	2400      	movs	r4, #0
 800af1e:	9413      	str	r4, [sp, #76]	; 0x4c
 800af20:	9414      	str	r4, [sp, #80]	; 0x50
 800af22:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 800af24:	940c      	str	r4, [sp, #48]	; 0x30
 800af26:	940d      	str	r4, [sp, #52]	; 0x34
 800af28:	940e      	str	r4, [sp, #56]	; 0x38
 800af2a:	940f      	str	r4, [sp, #60]	; 0x3c
 800af2c:	9410      	str	r4, [sp, #64]	; 0x40
 800af2e:	9411      	str	r4, [sp, #68]	; 0x44
 800af30:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800af32:	222c      	movs	r2, #44	; 0x2c
 800af34:	4621      	mov	r1, r4
 800af36:	a801      	add	r0, sp, #4
 800af38:	f000 fd50 	bl	800b9dc <memset>
  htim1.Instance = TIM1;
 800af3c:	4825      	ldr	r0, [pc, #148]	; (800afd4 <MX_TIM1_Init+0xbc>)
 800af3e:	4b26      	ldr	r3, [pc, #152]	; (800afd8 <MX_TIM1_Init+0xc0>)
 800af40:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 800af42:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800af44:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 0;
 800af46:	60c4      	str	r4, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800af48:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800af4a:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800af4c:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800af4e:	f7fb fe1e 	bl	8006b8e <HAL_TIM_PWM_Init>
 800af52:	2800      	cmp	r0, #0
 800af54:	d132      	bne.n	800afbc <MX_TIM1_Init+0xa4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800af56:	2300      	movs	r3, #0
 800af58:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800af5a:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800af5c:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800af5e:	a913      	add	r1, sp, #76	; 0x4c
 800af60:	481c      	ldr	r0, [pc, #112]	; (800afd4 <MX_TIM1_Init+0xbc>)
 800af62:	f7fb ff9d 	bl	8006ea0 <HAL_TIMEx_MasterConfigSynchronization>
 800af66:	2800      	cmp	r0, #0
 800af68:	d12b      	bne.n	800afc2 <MX_TIM1_Init+0xaa>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800af6a:	2360      	movs	r3, #96	; 0x60
 800af6c:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800af6e:	2300      	movs	r3, #0
 800af70:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800af72:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800af74:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800af76:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800af78:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800af7a:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800af7c:	2208      	movs	r2, #8
 800af7e:	a90c      	add	r1, sp, #48	; 0x30
 800af80:	4814      	ldr	r0, [pc, #80]	; (800afd4 <MX_TIM1_Init+0xbc>)
 800af82:	f7fb fe67 	bl	8006c54 <HAL_TIM_PWM_ConfigChannel>
 800af86:	b9f8      	cbnz	r0, 800afc8 <MX_TIM1_Init+0xb0>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800af88:	2300      	movs	r3, #0
 800af8a:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800af8c:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800af8e:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800af90:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800af92:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800af94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800af98:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800af9a:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800af9c:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800af9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800afa2:	9209      	str	r2, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800afa4:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800afa6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800afa8:	a901      	add	r1, sp, #4
 800afaa:	480a      	ldr	r0, [pc, #40]	; (800afd4 <MX_TIM1_Init+0xbc>)
 800afac:	f7fb ffaa 	bl	8006f04 <HAL_TIMEx_ConfigBreakDeadTime>
 800afb0:	b968      	cbnz	r0, 800afce <MX_TIM1_Init+0xb6>
  HAL_TIM_MspPostInit(&htim1);
 800afb2:	4808      	ldr	r0, [pc, #32]	; (800afd4 <MX_TIM1_Init+0xbc>)
 800afb4:	f7ff ff46 	bl	800ae44 <HAL_TIM_MspPostInit>
}
 800afb8:	b016      	add	sp, #88	; 0x58
 800afba:	bd10      	pop	{r4, pc}
    Error_Handler();
 800afbc:	f7ff fa82 	bl	800a4c4 <Error_Handler>
 800afc0:	e7c9      	b.n	800af56 <MX_TIM1_Init+0x3e>
    Error_Handler();
 800afc2:	f7ff fa7f 	bl	800a4c4 <Error_Handler>
 800afc6:	e7d0      	b.n	800af6a <MX_TIM1_Init+0x52>
    Error_Handler();
 800afc8:	f7ff fa7c 	bl	800a4c4 <Error_Handler>
 800afcc:	e7dc      	b.n	800af88 <MX_TIM1_Init+0x70>
    Error_Handler();
 800afce:	f7ff fa79 	bl	800a4c4 <Error_Handler>
 800afd2:	e7ee      	b.n	800afb2 <MX_TIM1_Init+0x9a>
 800afd4:	20000aac 	.word	0x20000aac
 800afd8:	40010000 	.word	0x40010000

0800afdc <MX_TIM3_Init>:
{
 800afdc:	b500      	push	{lr}
 800afde:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800afe0:	2300      	movs	r3, #0
 800afe2:	930a      	str	r3, [sp, #40]	; 0x28
 800afe4:	930b      	str	r3, [sp, #44]	; 0x2c
 800afe6:	930c      	str	r3, [sp, #48]	; 0x30
 800afe8:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800afea:	9307      	str	r3, [sp, #28]
 800afec:	9308      	str	r3, [sp, #32]
 800afee:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800aff0:	9300      	str	r3, [sp, #0]
 800aff2:	9301      	str	r3, [sp, #4]
 800aff4:	9302      	str	r3, [sp, #8]
 800aff6:	9303      	str	r3, [sp, #12]
 800aff8:	9304      	str	r3, [sp, #16]
 800affa:	9305      	str	r3, [sp, #20]
 800affc:	9306      	str	r3, [sp, #24]
  htim3.Instance = TIM3;
 800affe:	4820      	ldr	r0, [pc, #128]	; (800b080 <MX_TIM3_Init+0xa4>)
 800b000:	4a20      	ldr	r2, [pc, #128]	; (800b084 <MX_TIM3_Init+0xa8>)
 800b002:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 800b004:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b006:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 0;
 800b008:	60c3      	str	r3, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b00a:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b00c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800b00e:	f7fb fda5 	bl	8006b5c <HAL_TIM_Base_Init>
 800b012:	bb30      	cbnz	r0, 800b062 <MX_TIM3_Init+0x86>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b014:	a90e      	add	r1, sp, #56	; 0x38
 800b016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b01a:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800b01e:	4818      	ldr	r0, [pc, #96]	; (800b080 <MX_TIM3_Init+0xa4>)
 800b020:	f7fb febe 	bl	8006da0 <HAL_TIM_ConfigClockSource>
 800b024:	bb00      	cbnz	r0, 800b068 <MX_TIM3_Init+0x8c>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800b026:	4816      	ldr	r0, [pc, #88]	; (800b080 <MX_TIM3_Init+0xa4>)
 800b028:	f7fb fdb1 	bl	8006b8e <HAL_TIM_PWM_Init>
 800b02c:	b9f8      	cbnz	r0, 800b06e <MX_TIM3_Init+0x92>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b02e:	2300      	movs	r3, #0
 800b030:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b032:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b034:	a907      	add	r1, sp, #28
 800b036:	4812      	ldr	r0, [pc, #72]	; (800b080 <MX_TIM3_Init+0xa4>)
 800b038:	f7fb ff32 	bl	8006ea0 <HAL_TIMEx_MasterConfigSynchronization>
 800b03c:	b9d0      	cbnz	r0, 800b074 <MX_TIM3_Init+0x98>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b03e:	2360      	movs	r3, #96	; 0x60
 800b040:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 800b042:	2300      	movs	r3, #0
 800b044:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b046:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b048:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b04a:	2204      	movs	r2, #4
 800b04c:	4669      	mov	r1, sp
 800b04e:	480c      	ldr	r0, [pc, #48]	; (800b080 <MX_TIM3_Init+0xa4>)
 800b050:	f7fb fe00 	bl	8006c54 <HAL_TIM_PWM_ConfigChannel>
 800b054:	b988      	cbnz	r0, 800b07a <MX_TIM3_Init+0x9e>
  HAL_TIM_MspPostInit(&htim3);
 800b056:	480a      	ldr	r0, [pc, #40]	; (800b080 <MX_TIM3_Init+0xa4>)
 800b058:	f7ff fef4 	bl	800ae44 <HAL_TIM_MspPostInit>
}
 800b05c:	b00f      	add	sp, #60	; 0x3c
 800b05e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800b062:	f7ff fa2f 	bl	800a4c4 <Error_Handler>
 800b066:	e7d5      	b.n	800b014 <MX_TIM3_Init+0x38>
    Error_Handler();
 800b068:	f7ff fa2c 	bl	800a4c4 <Error_Handler>
 800b06c:	e7db      	b.n	800b026 <MX_TIM3_Init+0x4a>
    Error_Handler();
 800b06e:	f7ff fa29 	bl	800a4c4 <Error_Handler>
 800b072:	e7dc      	b.n	800b02e <MX_TIM3_Init+0x52>
    Error_Handler();
 800b074:	f7ff fa26 	bl	800a4c4 <Error_Handler>
 800b078:	e7e1      	b.n	800b03e <MX_TIM3_Init+0x62>
    Error_Handler();
 800b07a:	f7ff fa23 	bl	800a4c4 <Error_Handler>
 800b07e:	e7ea      	b.n	800b056 <MX_TIM3_Init+0x7a>
 800b080:	20000a6c 	.word	0x20000a6c
 800b084:	40000400 	.word	0x40000400

0800b088 <MX_TIM4_Init>:
{
 800b088:	b500      	push	{lr}
 800b08a:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b08c:	2300      	movs	r3, #0
 800b08e:	930a      	str	r3, [sp, #40]	; 0x28
 800b090:	930b      	str	r3, [sp, #44]	; 0x2c
 800b092:	930c      	str	r3, [sp, #48]	; 0x30
 800b094:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b096:	9307      	str	r3, [sp, #28]
 800b098:	9308      	str	r3, [sp, #32]
 800b09a:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b09c:	9300      	str	r3, [sp, #0]
 800b09e:	9301      	str	r3, [sp, #4]
 800b0a0:	9302      	str	r3, [sp, #8]
 800b0a2:	9303      	str	r3, [sp, #12]
 800b0a4:	9304      	str	r3, [sp, #16]
 800b0a6:	9305      	str	r3, [sp, #20]
 800b0a8:	9306      	str	r3, [sp, #24]
  htim4.Instance = TIM4;
 800b0aa:	4829      	ldr	r0, [pc, #164]	; (800b150 <MX_TIM4_Init+0xc8>)
 800b0ac:	4a29      	ldr	r2, [pc, #164]	; (800b154 <MX_TIM4_Init+0xcc>)
 800b0ae:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 800b0b0:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b0b2:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 0;
 800b0b4:	60c3      	str	r3, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b0b6:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b0b8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800b0ba:	f7fb fd4f 	bl	8006b5c <HAL_TIM_Base_Init>
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	d131      	bne.n	800b126 <MX_TIM4_Init+0x9e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b0c2:	a90e      	add	r1, sp, #56	; 0x38
 800b0c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0c8:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800b0cc:	4820      	ldr	r0, [pc, #128]	; (800b150 <MX_TIM4_Init+0xc8>)
 800b0ce:	f7fb fe67 	bl	8006da0 <HAL_TIM_ConfigClockSource>
 800b0d2:	bb58      	cbnz	r0, 800b12c <MX_TIM4_Init+0xa4>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800b0d4:	481e      	ldr	r0, [pc, #120]	; (800b150 <MX_TIM4_Init+0xc8>)
 800b0d6:	f7fb fd5a 	bl	8006b8e <HAL_TIM_PWM_Init>
 800b0da:	bb50      	cbnz	r0, 800b132 <MX_TIM4_Init+0xaa>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b0e0:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800b0e2:	a907      	add	r1, sp, #28
 800b0e4:	481a      	ldr	r0, [pc, #104]	; (800b150 <MX_TIM4_Init+0xc8>)
 800b0e6:	f7fb fedb 	bl	8006ea0 <HAL_TIMEx_MasterConfigSynchronization>
 800b0ea:	bb28      	cbnz	r0, 800b138 <MX_TIM4_Init+0xb0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b0ec:	2360      	movs	r3, #96	; 0x60
 800b0ee:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b0f4:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b0f6:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b0f8:	4669      	mov	r1, sp
 800b0fa:	4815      	ldr	r0, [pc, #84]	; (800b150 <MX_TIM4_Init+0xc8>)
 800b0fc:	f7fb fdaa 	bl	8006c54 <HAL_TIM_PWM_ConfigChannel>
 800b100:	b9e8      	cbnz	r0, 800b13e <MX_TIM4_Init+0xb6>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b102:	2204      	movs	r2, #4
 800b104:	4669      	mov	r1, sp
 800b106:	4812      	ldr	r0, [pc, #72]	; (800b150 <MX_TIM4_Init+0xc8>)
 800b108:	f7fb fda4 	bl	8006c54 <HAL_TIM_PWM_ConfigChannel>
 800b10c:	b9d0      	cbnz	r0, 800b144 <MX_TIM4_Init+0xbc>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800b10e:	220c      	movs	r2, #12
 800b110:	4669      	mov	r1, sp
 800b112:	480f      	ldr	r0, [pc, #60]	; (800b150 <MX_TIM4_Init+0xc8>)
 800b114:	f7fb fd9e 	bl	8006c54 <HAL_TIM_PWM_ConfigChannel>
 800b118:	b9b8      	cbnz	r0, 800b14a <MX_TIM4_Init+0xc2>
  HAL_TIM_MspPostInit(&htim4);
 800b11a:	480d      	ldr	r0, [pc, #52]	; (800b150 <MX_TIM4_Init+0xc8>)
 800b11c:	f7ff fe92 	bl	800ae44 <HAL_TIM_MspPostInit>
}
 800b120:	b00f      	add	sp, #60	; 0x3c
 800b122:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800b126:	f7ff f9cd 	bl	800a4c4 <Error_Handler>
 800b12a:	e7ca      	b.n	800b0c2 <MX_TIM4_Init+0x3a>
    Error_Handler();
 800b12c:	f7ff f9ca 	bl	800a4c4 <Error_Handler>
 800b130:	e7d0      	b.n	800b0d4 <MX_TIM4_Init+0x4c>
    Error_Handler();
 800b132:	f7ff f9c7 	bl	800a4c4 <Error_Handler>
 800b136:	e7d1      	b.n	800b0dc <MX_TIM4_Init+0x54>
    Error_Handler();
 800b138:	f7ff f9c4 	bl	800a4c4 <Error_Handler>
 800b13c:	e7d6      	b.n	800b0ec <MX_TIM4_Init+0x64>
    Error_Handler();
 800b13e:	f7ff f9c1 	bl	800a4c4 <Error_Handler>
 800b142:	e7de      	b.n	800b102 <MX_TIM4_Init+0x7a>
    Error_Handler();
 800b144:	f7ff f9be 	bl	800a4c4 <Error_Handler>
 800b148:	e7e1      	b.n	800b10e <MX_TIM4_Init+0x86>
    Error_Handler();
 800b14a:	f7ff f9bb 	bl	800a4c4 <Error_Handler>
 800b14e:	e7e4      	b.n	800b11a <MX_TIM4_Init+0x92>
 800b150:	20000a2c 	.word	0x20000a2c
 800b154:	40000800 	.word	0x40000800

0800b158 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800b158:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 800b15a:	4817      	ldr	r0, [pc, #92]	; (800b1b8 <MX_USART6_UART_Init+0x60>)
 800b15c:	4b17      	ldr	r3, [pc, #92]	; (800b1bc <MX_USART6_UART_Init+0x64>)
 800b15e:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 115200;
 800b160:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800b164:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800b166:	2300      	movs	r3, #0
 800b168:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800b16a:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800b16c:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_RX;
 800b16e:	2204      	movs	r2, #4
 800b170:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b172:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800b174:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b176:	6203      	str	r3, [r0, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b178:	6243      	str	r3, [r0, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b17a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800b17c:	f7fd fb73 	bl	8008866 <HAL_UART_Init>
 800b180:	b970      	cbnz	r0, 800b1a0 <MX_USART6_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b182:	2100      	movs	r1, #0
 800b184:	480c      	ldr	r0, [pc, #48]	; (800b1b8 <MX_USART6_UART_Init+0x60>)
 800b186:	f7fd fbfa 	bl	800897e <HAL_UARTEx_SetTxFifoThreshold>
 800b18a:	b960      	cbnz	r0, 800b1a6 <MX_USART6_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b18c:	2100      	movs	r1, #0
 800b18e:	480a      	ldr	r0, [pc, #40]	; (800b1b8 <MX_USART6_UART_Init+0x60>)
 800b190:	f7fd fc1a 	bl	80089c8 <HAL_UARTEx_SetRxFifoThreshold>
 800b194:	b950      	cbnz	r0, 800b1ac <MX_USART6_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800b196:	4808      	ldr	r0, [pc, #32]	; (800b1b8 <MX_USART6_UART_Init+0x60>)
 800b198:	f7fd fbd2 	bl	8008940 <HAL_UARTEx_DisableFifoMode>
 800b19c:	b948      	cbnz	r0, 800b1b2 <MX_USART6_UART_Init+0x5a>
  {
    Error_Handler();
  }

}
 800b19e:	bd08      	pop	{r3, pc}
    Error_Handler();
 800b1a0:	f7ff f990 	bl	800a4c4 <Error_Handler>
 800b1a4:	e7ed      	b.n	800b182 <MX_USART6_UART_Init+0x2a>
    Error_Handler();
 800b1a6:	f7ff f98d 	bl	800a4c4 <Error_Handler>
 800b1aa:	e7ef      	b.n	800b18c <MX_USART6_UART_Init+0x34>
    Error_Handler();
 800b1ac:	f7ff f98a 	bl	800a4c4 <Error_Handler>
 800b1b0:	e7f1      	b.n	800b196 <MX_USART6_UART_Init+0x3e>
    Error_Handler();
 800b1b2:	f7ff f987 	bl	800a4c4 <Error_Handler>
}
 800b1b6:	e7f2      	b.n	800b19e <MX_USART6_UART_Init+0x46>
 800b1b8:	20000b2c 	.word	0x20000b2c
 800b1bc:	40011400 	.word	0x40011400

0800b1c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b1c0:	b530      	push	{r4, r5, lr}
 800b1c2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	9303      	str	r3, [sp, #12]
 800b1c8:	9304      	str	r3, [sp, #16]
 800b1ca:	9305      	str	r3, [sp, #20]
 800b1cc:	9306      	str	r3, [sp, #24]
 800b1ce:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART6)
 800b1d0:	6802      	ldr	r2, [r0, #0]
 800b1d2:	4b20      	ldr	r3, [pc, #128]	; (800b254 <HAL_UART_MspInit+0x94>)
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d001      	beq.n	800b1dc <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800b1d8:	b009      	add	sp, #36	; 0x24
 800b1da:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART6_CLK_ENABLE();
 800b1dc:	4b1e      	ldr	r3, [pc, #120]	; (800b258 <HAL_UART_MspInit+0x98>)
 800b1de:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800b1e2:	f042 0220 	orr.w	r2, r2, #32
 800b1e6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800b1ea:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800b1ee:	f002 0220 	and.w	r2, r2, #32
 800b1f2:	9200      	str	r2, [sp, #0]
 800b1f4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b1f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b1fa:	f042 0204 	orr.w	r2, r2, #4
 800b1fe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b202:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b206:	f002 0204 	and.w	r2, r2, #4
 800b20a:	9201      	str	r2, [sp, #4]
 800b20c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b20e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b212:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b216:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b21a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b21e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b222:	9302      	str	r3, [sp, #8]
 800b224:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800b226:	2380      	movs	r3, #128	; 0x80
 800b228:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b22a:	2502      	movs	r5, #2
 800b22c:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800b22e:	2407      	movs	r4, #7
 800b230:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b232:	a903      	add	r1, sp, #12
 800b234:	4809      	ldr	r0, [pc, #36]	; (800b25c <HAL_UART_MspInit+0x9c>)
 800b236:	f7f7 fa99 	bl	800276c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800b23a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b23e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b240:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b242:	2300      	movs	r3, #0
 800b244:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b246:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800b248:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b24a:	a903      	add	r1, sp, #12
 800b24c:	4804      	ldr	r0, [pc, #16]	; (800b260 <HAL_UART_MspInit+0xa0>)
 800b24e:	f7f7 fa8d 	bl	800276c <HAL_GPIO_Init>
}
 800b252:	e7c1      	b.n	800b1d8 <HAL_UART_MspInit+0x18>
 800b254:	40011400 	.word	0x40011400
 800b258:	58024400 	.word	0x58024400
 800b25c:	58020800 	.word	0x58020800
 800b260:	58021800 	.word	0x58021800

0800b264 <MX_USB_OTG_FS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_HCD_Init(void)
{
 800b264:	b508      	push	{r3, lr}

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b266:	4809      	ldr	r0, [pc, #36]	; (800b28c <MX_USB_OTG_FS_HCD_Init+0x28>)
 800b268:	4b09      	ldr	r3, [pc, #36]	; (800b290 <MX_USB_OTG_FS_HCD_Init+0x2c>)
 800b26a:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 800b26c:	2310      	movs	r3, #16
 800b26e:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b270:	2301      	movs	r3, #1
 800b272:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b274:	2300      	movs	r3, #0
 800b276:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b278:	2202      	movs	r2, #2
 800b27a:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b27c:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b27e:	f7f7 fb74 	bl	800296a <HAL_HCD_Init>
 800b282:	b900      	cbnz	r0, 800b286 <MX_USB_OTG_FS_HCD_Init+0x22>
  {
    Error_Handler();
  }

}
 800b284:	bd08      	pop	{r3, pc}
    Error_Handler();
 800b286:	f7ff f91d 	bl	800a4c4 <Error_Handler>
}
 800b28a:	e7fb      	b.n	800b284 <MX_USB_OTG_FS_HCD_Init+0x20>
 800b28c:	20000bb8 	.word	0x20000bb8
 800b290:	40080000 	.word	0x40080000

0800b294 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b294:	b510      	push	{r4, lr}
 800b296:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b298:	2300      	movs	r3, #0
 800b29a:	9303      	str	r3, [sp, #12]
 800b29c:	9304      	str	r3, [sp, #16]
 800b29e:	9305      	str	r3, [sp, #20]
 800b2a0:	9306      	str	r3, [sp, #24]
 800b2a2:	9307      	str	r3, [sp, #28]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b2a4:	6802      	ldr	r2, [r0, #0]
 800b2a6:	4b15      	ldr	r3, [pc, #84]	; (800b2fc <HAL_HCD_MspInit+0x68>)
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d001      	beq.n	800b2b0 <HAL_HCD_MspInit+0x1c>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b2ac:	b008      	add	sp, #32
 800b2ae:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2b0:	4c13      	ldr	r4, [pc, #76]	; (800b300 <HAL_HCD_MspInit+0x6c>)
 800b2b2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800b2b6:	f043 0301 	orr.w	r3, r3, #1
 800b2ba:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800b2be:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800b2c2:	f003 0301 	and.w	r3, r3, #1
 800b2c6:	9301      	str	r3, [sp, #4]
 800b2c8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b2ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b2ce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2d0:	2302      	movs	r3, #2
 800b2d2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800b2d4:	230a      	movs	r3, #10
 800b2d6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b2d8:	a903      	add	r1, sp, #12
 800b2da:	480a      	ldr	r0, [pc, #40]	; (800b304 <HAL_HCD_MspInit+0x70>)
 800b2dc:	f7f7 fa46 	bl	800276c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b2e0:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800b2e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b2e8:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800b2ec:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800b2f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2f4:	9302      	str	r3, [sp, #8]
 800b2f6:	9b02      	ldr	r3, [sp, #8]
}
 800b2f8:	e7d8      	b.n	800b2ac <HAL_HCD_MspInit+0x18>
 800b2fa:	bf00      	nop
 800b2fc:	40080000 	.word	0x40080000
 800b300:	58024400 	.word	0x58024400
 800b304:	58020000 	.word	0x58020000

0800b308 <tRamp_init>:
    return adsr->next;
}

/* Ramp */
void    tRamp_init(tRamp* const r, float time, int samples_per_tick)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b086      	sub	sp, #24
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	60f8      	str	r0, [r7, #12]
 800b310:	ed87 0a02 	vstr	s0, [r7, #8]
 800b314:	6079      	str	r1, [r7, #4]
    _tRamp* ramp = *r = (_tRamp*) leaf_alloc(sizeof(_tRamp));
 800b316:	201c      	movs	r0, #28
 800b318:	f000 f9a0 	bl	800b65c <leaf_alloc>
 800b31c:	4602      	mov	r2, r0
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	601a      	str	r2, [r3, #0]
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	617b      	str	r3, [r7, #20]
    
    ramp->inv_sr_ms = 1.0f/(leaf.sampleRate*0.001f);
 800b328:	4b2c      	ldr	r3, [pc, #176]	; (800b3dc <tRamp_init+0xd4>)
 800b32a:	edd3 7a00 	vldr	s15, [r3]
 800b32e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800b3e0 <tRamp_init+0xd8>
 800b332:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b33a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	edc3 7a01 	vstr	s15, [r3, #4]
	ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	ed93 7a01 	vldr	s14, [r3, #4]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	ee07 3a90 	vmov	s15, r3
 800b350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b354:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	edc3 7a02 	vstr	s15, [r3, #8]
    ramp->curr = 0.0f;
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	f04f 0200 	mov.w	r2, #0
 800b364:	60da      	str	r2, [r3, #12]
    ramp->dest = 0.0f;
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	f04f 0200 	mov.w	r2, #0
 800b36c:	611a      	str	r2, [r3, #16]
    
    if (time < ramp->minimum_time)
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	edd3 7a02 	vldr	s15, [r3, #8]
 800b374:	ed97 7a02 	vldr	s14, [r7, #8]
 800b378:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b37c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b380:	d504      	bpl.n	800b38c <tRamp_init+0x84>
    {
        ramp->time = ramp->minimum_time;
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	689a      	ldr	r2, [r3, #8]
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	615a      	str	r2, [r3, #20]
 800b38a:	e002      	b.n	800b392 <tRamp_init+0x8a>
    }
    else
    {
        ramp->time = time;
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	68ba      	ldr	r2, [r7, #8]
 800b390:	615a      	str	r2, [r3, #20]
    }
    
    ramp->samples_per_tick = samples_per_tick;
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	619a      	str	r2, [r3, #24]
    ramp->inc = ((ramp->dest - ramp->curr) / ramp->time * ramp->inv_sr_ms) * (float)ramp->samples_per_tick;
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	ed93 7a04 	vldr	s14, [r3, #16]
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	edd3 7a03 	vldr	s15, [r3, #12]
 800b3a4:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	edd3 7a05 	vldr	s15, [r3, #20]
 800b3ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	edd3 7a01 	vldr	s15, [r3, #4]
 800b3b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	699b      	ldr	r3, [r3, #24]
 800b3c0:	ee07 3a90 	vmov	s15, r3
 800b3c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	edc3 7a00 	vstr	s15, [r3]
}
 800b3d2:	bf00      	nop
 800b3d4:	3718      	adds	r7, #24
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	20000e84 	.word	0x20000e84
 800b3e0:	3a83126f 	.word	0x3a83126f

0800b3e4 <tRamp_setDest>:
	}
    r->inc = ((r->dest-r->curr)/r->time * r->inv_sr_ms) * ((float)r->samples_per_tick);
}

void     tRamp_setDest(tRamp* const ramp, float dest)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b085      	sub	sp, #20
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	ed87 0a00 	vstr	s0, [r7]
    _tRamp* r = *ramp;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	60fb      	str	r3, [r7, #12]
    r->dest = dest;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	683a      	ldr	r2, [r7, #0]
 800b3fa:	611a      	str	r2, [r3, #16]
    r->inc = ((r->dest-r->curr)/r->time * r->inv_sr_ms) * ((float)r->samples_per_tick);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	ed93 7a04 	vldr	s14, [r3, #16]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	edd3 7a03 	vldr	s15, [r3, #12]
 800b408:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	edd3 7a05 	vldr	s15, [r3, #20]
 800b412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	edd3 7a01 	vldr	s15, [r3, #4]
 800b41c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	699b      	ldr	r3, [r3, #24]
 800b424:	ee07 3a90 	vmov	s15, r3
 800b428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b42c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	edc3 7a00 	vstr	s15, [r3]
}
 800b436:	bf00      	nop
 800b438:	3714      	adds	r7, #20
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr

0800b442 <tRamp_tick>:
    r->curr = val;
    r->inc = ((r->dest-r->curr)/r->time * r->inv_sr_ms) * ((float)r->samples_per_tick);
}

float   tRamp_tick(tRamp* const ramp)
{
 800b442:	b480      	push	{r7}
 800b444:	b085      	sub	sp, #20
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
    _tRamp* r = *ramp;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	60fb      	str	r3, [r7, #12]
    
    r->curr += r->inc;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	ed93 7a03 	vldr	s14, [r3, #12]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	edd3 7a00 	vldr	s15, [r3]
 800b45c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	edc3 7a03 	vstr	s15, [r3, #12]
    
    if (((r->curr >= r->dest) && (r->inc > 0.0f)) || ((r->curr <= r->dest) && (r->inc < 0.0f)))
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	ed93 7a03 	vldr	s14, [r3, #12]
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	edd3 7a04 	vldr	s15, [r3, #16]
 800b472:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b47a:	db07      	blt.n	800b48c <tRamp_tick+0x4a>
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	edd3 7a00 	vldr	s15, [r3]
 800b482:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b48a:	dc12      	bgt.n	800b4b2 <tRamp_tick+0x70>
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	ed93 7a03 	vldr	s14, [r3, #12]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	edd3 7a04 	vldr	s15, [r3, #16]
 800b498:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b49c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4a0:	d80f      	bhi.n	800b4c2 <tRamp_tick+0x80>
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	edd3 7a00 	vldr	s15, [r3]
 800b4a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4b0:	d507      	bpl.n	800b4c2 <tRamp_tick+0x80>
	{
		r->inc = 0.0f;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f04f 0200 	mov.w	r2, #0
 800b4b8:	601a      	str	r2, [r3, #0]
		r->curr=r->dest;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	691a      	ldr	r2, [r3, #16]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	60da      	str	r2, [r3, #12]
	}

    // Palle: There is a slight risk that you overshoot here and stay on dest+inc, which with a large inc value could be a real problem
    // I suggest you add: r->curr=r->dest in the true if case
    
    return r->curr;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	ee07 3a90 	vmov	s15, r3
}
 800b4ca:	eeb0 0a67 	vmov.f32	s0, s15
 800b4ce:	3714      	adds	r7, #20
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <mpool_create>:

/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, mpool_t* pool)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b086      	sub	sp, #24
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	607a      	str	r2, [r7, #4]
    header_size = mpool_align(sizeof(mpool_node_t));
 800b4e4:	2010      	movs	r0, #16
 800b4e6:	f000 f8d1 	bl	800b68c <mpool_align>
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	4b18      	ldr	r3, [pc, #96]	; (800b550 <mpool_create+0x78>)
 800b4ee:	601a      	str	r2, [r3, #0]
    
    pool->mpool = (void*)memory;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	68fa      	ldr	r2, [r7, #12]
 800b4f4:	601a      	str	r2, [r3, #0]
    pool->usize  = 0;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	605a      	str	r2, [r3, #4]
    pool->msize  = size;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	68ba      	ldr	r2, [r7, #8]
 800b500:	609a      	str	r2, [r3, #8]
    
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-header_size);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6818      	ldr	r0, [r3, #0]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	689a      	ldr	r2, [r3, #8]
 800b50a:	4b11      	ldr	r3, [pc, #68]	; (800b550 <mpool_create+0x78>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	1ad3      	subs	r3, r2, r3
 800b510:	2200      	movs	r2, #0
 800b512:	2100      	movs	r1, #0
 800b514:	f000 f8c8 	bl	800b6a8 <create_node>
 800b518:	4602      	mov	r2, r0
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	60da      	str	r2, [r3, #12]
    
    for (int i = 0; i < pool->head->size; i++)
 800b51e:	2300      	movs	r3, #0
 800b520:	617b      	str	r3, [r7, #20]
 800b522:	e00a      	b.n	800b53a <mpool_create+0x62>
    {
        memory[i+header_size]=0;
 800b524:	697a      	ldr	r2, [r7, #20]
 800b526:	4b0a      	ldr	r3, [pc, #40]	; (800b550 <mpool_create+0x78>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4413      	add	r3, r2
 800b52c:	68fa      	ldr	r2, [r7, #12]
 800b52e:	4413      	add	r3, r2
 800b530:	2200      	movs	r2, #0
 800b532:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < pool->head->size; i++)
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	3301      	adds	r3, #1
 800b538:	617b      	str	r3, [r7, #20]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	68db      	ldr	r3, [r3, #12]
 800b53e:	68da      	ldr	r2, [r3, #12]
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	429a      	cmp	r2, r3
 800b544:	d8ee      	bhi.n	800b524 <mpool_create+0x4c>
    }
}
 800b546:	bf00      	nop
 800b548:	3718      	adds	r7, #24
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	20000e7c 	.word	0x20000e7c

0800b554 <leaf_pool_init>:

void leaf_pool_init(char* memory, size_t size)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b082      	sub	sp, #8
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
    mpool_create(memory, size, &leaf_pool->pool);
 800b55e:	4b05      	ldr	r3, [pc, #20]	; (800b574 <leaf_pool_init+0x20>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	461a      	mov	r2, r3
 800b564:	6839      	ldr	r1, [r7, #0]
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f7ff ffb6 	bl	800b4d8 <mpool_create>
}
 800b56c:	bf00      	nop
 800b56e:	3708      	adds	r7, #8
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}
 800b574:	20000e80 	.word	0x20000e80

0800b578 <mpool_alloc>:

/**
 * allocate memory from memory pool
 */
void* mpool_alloc(size_t asize, mpool_t* pool)
{
 800b578:	b590      	push	{r4, r7, lr}
 800b57a:	b089      	sub	sp, #36	; 0x24
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
    // If the head is NULL, the mempool is full
    if (pool->head == NULL) return NULL;
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	68db      	ldr	r3, [r3, #12]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d101      	bne.n	800b58e <mpool_alloc+0x16>
 800b58a:	2300      	movs	r3, #0
 800b58c:	e05f      	b.n	800b64e <mpool_alloc+0xd6>
    
    // Should we alloc the first block large enough or check all blocks and pick the one closest in size?
    size_t size_to_alloc = mpool_align(asize);
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 f87c 	bl	800b68c <mpool_align>
 800b594:	6178      	str	r0, [r7, #20]
    mpool_node_t* node_to_alloc = pool->head;
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	61fb      	str	r3, [r7, #28]
    
    // Traverse the free list for a large enough block
    while (node_to_alloc->size < size_to_alloc)
 800b59c:	e007      	b.n	800b5ae <mpool_alloc+0x36>
    {
        node_to_alloc = node_to_alloc->next;
 800b59e:	69fb      	ldr	r3, [r7, #28]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	61fb      	str	r3, [r7, #28]
        
        // If we reach the end of the free list, there
        // are no blocks large enough, return NULL
        if (node_to_alloc == NULL) return NULL;
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d101      	bne.n	800b5ae <mpool_alloc+0x36>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	e04f      	b.n	800b64e <mpool_alloc+0xd6>
    while (node_to_alloc->size < size_to_alloc)
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	697a      	ldr	r2, [r7, #20]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d8f2      	bhi.n	800b59e <mpool_alloc+0x26>
    }
    
    // Create a new node after the node to be allocated if there is enough space
    mpool_node_t* new_node;
    size_t leftover = node_to_alloc->size - size_to_alloc;
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	68da      	ldr	r2, [r3, #12]
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	1ad3      	subs	r3, r2, r3
 800b5c0:	613b      	str	r3, [r7, #16]
    node_to_alloc->size = size_to_alloc;
 800b5c2:	69fb      	ldr	r3, [r7, #28]
 800b5c4:	697a      	ldr	r2, [r7, #20]
 800b5c6:	60da      	str	r2, [r3, #12]
    if (leftover > header_size)
 800b5c8:	4b23      	ldr	r3, [pc, #140]	; (800b658 <mpool_alloc+0xe0>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	693a      	ldr	r2, [r7, #16]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d91d      	bls.n	800b60e <mpool_alloc+0x96>
    {
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800b5d2:	69fb      	ldr	r3, [r7, #28]
 800b5d4:	683a      	ldr	r2, [r7, #0]
 800b5d6:	6812      	ldr	r2, [r2, #0]
 800b5d8:	1a9b      	subs	r3, r3, r2
 800b5da:	60fb      	str	r3, [r7, #12]
        offset += header_size + node_to_alloc->size;
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	68da      	ldr	r2, [r3, #12]
 800b5e0:	4b1d      	ldr	r3, [pc, #116]	; (800b658 <mpool_alloc+0xe0>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	441a      	add	r2, r3
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	4413      	add	r3, r2
 800b5ea:	60fb      	str	r3, [r7, #12]
        new_node = create_node(&pool->mpool[offset],
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	18d0      	adds	r0, r2, r3
                               node_to_alloc->next,
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	6859      	ldr	r1, [r3, #4]
                               node_to_alloc->prev,
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	689c      	ldr	r4, [r3, #8]
        new_node = create_node(&pool->mpool[offset],
 800b5fc:	4b16      	ldr	r3, [pc, #88]	; (800b658 <mpool_alloc+0xe0>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	693a      	ldr	r2, [r7, #16]
 800b602:	1ad3      	subs	r3, r2, r3
 800b604:	4622      	mov	r2, r4
 800b606:	f000 f84f 	bl	800b6a8 <create_node>
 800b60a:	61b8      	str	r0, [r7, #24]
 800b60c:	e008      	b.n	800b620 <mpool_alloc+0xa8>
                               leftover - header_size);
    }
    else
    {
        // Add any leftover space to the allocated node to avoid fragmentation
        node_to_alloc->size += leftover;
 800b60e:	69fb      	ldr	r3, [r7, #28]
 800b610:	68da      	ldr	r2, [r3, #12]
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	441a      	add	r2, r3
 800b616:	69fb      	ldr	r3, [r7, #28]
 800b618:	60da      	str	r2, [r3, #12]
        
        new_node = node_to_alloc->next;
 800b61a:	69fb      	ldr	r3, [r7, #28]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	61bb      	str	r3, [r7, #24]
    }
    
    // Update the head if we are allocating the first node of the free list
    // The head will be NULL if there is no space left
    if (pool->head == node_to_alloc)
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	68db      	ldr	r3, [r3, #12]
 800b624:	69fa      	ldr	r2, [r7, #28]
 800b626:	429a      	cmp	r2, r3
 800b628:	d102      	bne.n	800b630 <mpool_alloc+0xb8>
    {
        pool->head = new_node;
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	69ba      	ldr	r2, [r7, #24]
 800b62e:	60da      	str	r2, [r3, #12]
    }
    
    // Remove the allocated node from the free list
    delink_node(node_to_alloc);
 800b630:	69f8      	ldr	r0, [r7, #28]
 800b632:	f000 f85b 	bl	800b6ec <delink_node>
    
    pool->usize += header_size + node_to_alloc->size;
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	685a      	ldr	r2, [r3, #4]
 800b63a:	69fb      	ldr	r3, [r7, #28]
 800b63c:	68d9      	ldr	r1, [r3, #12]
 800b63e:	4b06      	ldr	r3, [pc, #24]	; (800b658 <mpool_alloc+0xe0>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	440b      	add	r3, r1
 800b644:	441a      	add	r2, r3
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	605a      	str	r2, [r3, #4]
    
    // Return the pool of the allocated node;
    return node_to_alloc->pool;
 800b64a:	69fb      	ldr	r3, [r7, #28]
 800b64c:	681b      	ldr	r3, [r3, #0]
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3724      	adds	r7, #36	; 0x24
 800b652:	46bd      	mov	sp, r7
 800b654:	bd90      	pop	{r4, r7, pc}
 800b656:	bf00      	nop
 800b658:	20000e7c 	.word	0x20000e7c

0800b65c <leaf_alloc>:
    // Return the pool of the allocated node;
    return node_to_alloc->pool;
}

void* leaf_alloc(size_t size)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b084      	sub	sp, #16
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
    //printf("alloc %i\n", size);
    void* block = mpool_alloc(size, &leaf_pool->pool);
 800b664:	4b08      	ldr	r3, [pc, #32]	; (800b688 <leaf_alloc+0x2c>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4619      	mov	r1, r3
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f7ff ff84 	bl	800b578 <mpool_alloc>
 800b670:	60f8      	str	r0, [r7, #12]
    
    if (block == NULL) leaf_mempool_overrun();
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d101      	bne.n	800b67c <leaf_alloc+0x20>
 800b678:	f000 f85a 	bl	800b730 <leaf_mempool_overrun>
    
    return block;
 800b67c:	68fb      	ldr	r3, [r7, #12]
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3710      	adds	r7, #16
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
 800b686:	bf00      	nop
 800b688:	20000e80 	.word	0x20000e80

0800b68c <mpool_align>:
}

/**
 * align byte boundary
 */
static inline size_t mpool_align(size_t size) {
 800b68c:	b480      	push	{r7}
 800b68e:	b083      	sub	sp, #12
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	3307      	adds	r3, #7
 800b698:	f023 0307 	bic.w	r3, r3, #7
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <create_node>:

static inline mpool_node_t* create_node(void* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b087      	sub	sp, #28
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	60f8      	str	r0, [r7, #12]
 800b6b0:	60b9      	str	r1, [r7, #8]
 800b6b2:	607a      	str	r2, [r7, #4]
 800b6b4:	603b      	str	r3, [r7, #0]
    mpool_node_t* node = (mpool_node_t*)block_location;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	617b      	str	r3, [r7, #20]
    node->pool = block_location + header_size;
 800b6ba:	4b0b      	ldr	r3, [pc, #44]	; (800b6e8 <create_node+0x40>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	68fa      	ldr	r2, [r7, #12]
 800b6c0:	441a      	add	r2, r3
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	601a      	str	r2, [r3, #0]
    node->next = next;
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	68ba      	ldr	r2, [r7, #8]
 800b6ca:	605a      	str	r2, [r3, #4]
    node->prev = prev;
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	609a      	str	r2, [r3, #8]
    node->size = size;
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	683a      	ldr	r2, [r7, #0]
 800b6d6:	60da      	str	r2, [r3, #12]
    
    return node;
 800b6d8:	697b      	ldr	r3, [r7, #20]
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	371c      	adds	r7, #28
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop
 800b6e8:	20000e7c 	.word	0x20000e7c

0800b6ec <delink_node>:

static inline void delink_node(mpool_node_t* node)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b083      	sub	sp, #12
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
    // If there is a node after the node to remove
    if (node->next != NULL)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d004      	beq.n	800b706 <delink_node+0x1a>
    {
        // Close the link
        node->next->prev = node->prev;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	6892      	ldr	r2, [r2, #8]
 800b704:	609a      	str	r2, [r3, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	689b      	ldr	r3, [r3, #8]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d004      	beq.n	800b718 <delink_node+0x2c>
    {
        // Close the link
        node->prev->next = node->next;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	689b      	ldr	r3, [r3, #8]
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	6852      	ldr	r2, [r2, #4]
 800b716:	605a      	str	r2, [r3, #4]
    }
    
    node->next = NULL;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2200      	movs	r2, #0
 800b71c:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2200      	movs	r2, #0
 800b722:	609a      	str	r2, [r3, #8]
}
 800b724:	bf00      	nop
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <leaf_mempool_overrun>:

void leaf_mempool_overrun(void)
{
 800b730:	b480      	push	{r7}
 800b732:	af00      	add	r7, sp, #0
    //TODO: we should set up some kind of leaf_error method that reaches user space to notify library users of things that failed.
}
 800b734:	bf00      	nop
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr

0800b73e <tCycle_init>:

#endif

// Cycle
void    tCycle_init(tCycle* const cy)
{
 800b73e:	b580      	push	{r7, lr}
 800b740:	b084      	sub	sp, #16
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
    _tCycle* c = *cy = (_tCycle*) leaf_alloc(sizeof(_tCycle));
 800b746:	200c      	movs	r0, #12
 800b748:	f7ff ff88 	bl	800b65c <leaf_alloc>
 800b74c:	4602      	mov	r2, r0
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	601a      	str	r2, [r3, #0]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	60fb      	str	r3, [r7, #12]
    
    c->inc      =  0.0f;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f04f 0200 	mov.w	r2, #0
 800b75e:	605a      	str	r2, [r3, #4]
    c->phase    =  0.0f;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f04f 0200 	mov.w	r2, #0
 800b766:	601a      	str	r2, [r3, #0]
}
 800b768:	bf00      	nop
 800b76a:	3710      	adds	r7, #16
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <tCycle_setFreq>:
    
    mpool_free(c, &m->pool);
}

int     tCycle_setFreq(tCycle* const cy, float freq)
{
 800b770:	b480      	push	{r7}
 800b772:	b085      	sub	sp, #20
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	ed87 0a00 	vstr	s0, [r7]
    _tCycle* c = *cy;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	60fb      	str	r3, [r7, #12]
    
    if (freq < 0.0f) freq = 0.0f;
 800b782:	edd7 7a00 	vldr	s15, [r7]
 800b786:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b78e:	d502      	bpl.n	800b796 <tCycle_setFreq+0x26>
 800b790:	f04f 0300 	mov.w	r3, #0
 800b794:	603b      	str	r3, [r7, #0]
    
    c->freq = freq;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	683a      	ldr	r2, [r7, #0]
 800b79a:	609a      	str	r2, [r3, #8]
    c->inc = freq * leaf.invSampleRate;
 800b79c:	4b08      	ldr	r3, [pc, #32]	; (800b7c0 <tCycle_setFreq+0x50>)
 800b79e:	ed93 7a01 	vldr	s14, [r3, #4]
 800b7a2:	edd7 7a00 	vldr	s15, [r7]
 800b7a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	edc3 7a01 	vstr	s15, [r3, #4]
    
    return 0;
 800b7b0:	2300      	movs	r3, #0
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3714      	adds	r7, #20
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr
 800b7be:	bf00      	nop
 800b7c0:	20000e84 	.word	0x20000e84

0800b7c4 <tCycle_tick>:

float   tCycle_tick(tCycle* const cy)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b089      	sub	sp, #36	; 0x24
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
    _tCycle* c = *cy;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	61bb      	str	r3, [r7, #24]
    
    // Phasor increment
    c->phase += c->inc;
 800b7d2:	69bb      	ldr	r3, [r7, #24]
 800b7d4:	ed93 7a00 	vldr	s14, [r3]
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	edd3 7a01 	vldr	s15, [r3, #4]
 800b7de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7e2:	69bb      	ldr	r3, [r7, #24]
 800b7e4:	edc3 7a00 	vstr	s15, [r3]
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 800b7e8:	e009      	b.n	800b7fe <tCycle_tick+0x3a>
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	edd3 7a00 	vldr	s15, [r3]
 800b7f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b7f8:	69bb      	ldr	r3, [r7, #24]
 800b7fa:	edc3 7a00 	vstr	s15, [r3]
 800b7fe:	69bb      	ldr	r3, [r7, #24]
 800b800:	edd3 7a00 	vldr	s15, [r3]
 800b804:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b810:	daeb      	bge.n	800b7ea <tCycle_tick+0x26>
    
    // Wavetable synthesis
    float temp = SINE_TABLE_SIZE * c->phase;
 800b812:	69bb      	ldr	r3, [r7, #24]
 800b814:	edd3 7a00 	vldr	s15, [r3]
 800b818:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800b89c <tCycle_tick+0xd8>
 800b81c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b820:	edc7 7a05 	vstr	s15, [r7, #20]
    int intPart = (int)temp;
 800b824:	edd7 7a05 	vldr	s15, [r7, #20]
 800b828:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b82c:	ee17 3a90 	vmov	r3, s15
 800b830:	61fb      	str	r3, [r7, #28]
    float fracPart = temp - (float)intPart;
 800b832:	69fb      	ldr	r3, [r7, #28]
 800b834:	ee07 3a90 	vmov	s15, r3
 800b838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b83c:	ed97 7a05 	vldr	s14, [r7, #20]
 800b840:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b844:	edc7 7a04 	vstr	s15, [r7, #16]
    float samp0 = sinewave[intPart];
 800b848:	4a15      	ldr	r2, [pc, #84]	; (800b8a0 <tCycle_tick+0xdc>)
 800b84a:	69fb      	ldr	r3, [r7, #28]
 800b84c:	009b      	lsls	r3, r3, #2
 800b84e:	4413      	add	r3, r2
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	60fb      	str	r3, [r7, #12]
    if (++intPart >= SINE_TABLE_SIZE) intPart = 0;
 800b854:	69fb      	ldr	r3, [r7, #28]
 800b856:	3301      	adds	r3, #1
 800b858:	61fb      	str	r3, [r7, #28]
 800b85a:	69fb      	ldr	r3, [r7, #28]
 800b85c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b860:	db01      	blt.n	800b866 <tCycle_tick+0xa2>
 800b862:	2300      	movs	r3, #0
 800b864:	61fb      	str	r3, [r7, #28]
    float samp1 = sinewave[intPart];
 800b866:	4a0e      	ldr	r2, [pc, #56]	; (800b8a0 <tCycle_tick+0xdc>)
 800b868:	69fb      	ldr	r3, [r7, #28]
 800b86a:	009b      	lsls	r3, r3, #2
 800b86c:	4413      	add	r3, r2
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	60bb      	str	r3, [r7, #8]
    return (samp0 + (samp1 - samp0) * fracPart);
 800b872:	ed97 7a02 	vldr	s14, [r7, #8]
 800b876:	edd7 7a03 	vldr	s15, [r7, #12]
 800b87a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b87e:	edd7 7a04 	vldr	s15, [r7, #16]
 800b882:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b886:	edd7 7a03 	vldr	s15, [r7, #12]
 800b88a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800b88e:	eeb0 0a67 	vmov.f32	s0, s15
 800b892:	3724      	adds	r7, #36	; 0x24
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr
 800b89c:	45000000 	.word	0x45000000
 800b8a0:	08115140 	.word	0x08115140

0800b8a4 <tNoise_init>:
    return p->phase;
}

/* Noise */
void    tNoise_init(tNoise* const ns, NoiseType type)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	70fb      	strb	r3, [r7, #3]
    _tNoise* n = *ns = (_tNoise*) leaf_alloc(sizeof(_tNoise));
 800b8b0:	2014      	movs	r0, #20
 800b8b2:	f7ff fed3 	bl	800b65c <leaf_alloc>
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	601a      	str	r2, [r3, #0]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	60fb      	str	r3, [r7, #12]
    
    n->type = type;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	78fa      	ldrb	r2, [r7, #3]
 800b8c6:	701a      	strb	r2, [r3, #0]
    n->rand = leaf.random;
 800b8c8:	4b03      	ldr	r3, [pc, #12]	; (800b8d8 <tNoise_init+0x34>)
 800b8ca:	691a      	ldr	r2, [r3, #16]
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	611a      	str	r2, [r3, #16]
}
 800b8d0:	bf00      	nop
 800b8d2:	3710      	adds	r7, #16
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	20000e84 	.word	0x20000e84

0800b8dc <LEAF_init>:

LEAF leaf;

void LEAF_init(float sr, int blocksize, char* memory, size_t memorysize, float(*random)(void))

{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b086      	sub	sp, #24
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	ed87 0a05 	vstr	s0, [r7, #20]
 800b8e6:	6138      	str	r0, [r7, #16]
 800b8e8:	60f9      	str	r1, [r7, #12]
 800b8ea:	60ba      	str	r2, [r7, #8]
 800b8ec:	607b      	str	r3, [r7, #4]
    leaf_pool_init(memory, memorysize);
 800b8ee:	68b9      	ldr	r1, [r7, #8]
 800b8f0:	68f8      	ldr	r0, [r7, #12]
 800b8f2:	f7ff fe2f 	bl	800b554 <leaf_pool_init>
    
    leaf.sampleRate = sr;
 800b8f6:	4a10      	ldr	r2, [pc, #64]	; (800b938 <LEAF_init+0x5c>)
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	6013      	str	r3, [r2, #0]

    leaf.blockSize = blocksize;
 800b8fc:	4a0e      	ldr	r2, [pc, #56]	; (800b938 <LEAF_init+0x5c>)
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	6093      	str	r3, [r2, #8]
    
    leaf.invSampleRate = 1.0f/sr;
 800b902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b906:	ed97 7a05 	vldr	s14, [r7, #20]
 800b90a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b90e:	4b0a      	ldr	r3, [pc, #40]	; (800b938 <LEAF_init+0x5c>)
 800b910:	edc3 7a01 	vstr	s15, [r3, #4]
    
    leaf.twoPiTimesInvSampleRate = leaf.invSampleRate * TWO_PI;
 800b914:	4b08      	ldr	r3, [pc, #32]	; (800b938 <LEAF_init+0x5c>)
 800b916:	edd3 7a01 	vldr	s15, [r3, #4]
 800b91a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800b93c <LEAF_init+0x60>
 800b91e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b922:	4b05      	ldr	r3, [pc, #20]	; (800b938 <LEAF_init+0x5c>)
 800b924:	edc3 7a03 	vstr	s15, [r3, #12]

    leaf.random = random;
 800b928:	4a03      	ldr	r2, [pc, #12]	; (800b938 <LEAF_init+0x5c>)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6113      	str	r3, [r2, #16]
}
 800b92e:	bf00      	nop
 800b930:	3718      	adds	r7, #24
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
 800b936:	bf00      	nop
 800b938:	20000e84 	.word	0x20000e84
 800b93c:	40c90fdb 	.word	0x40c90fdb

0800b940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b940:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b978 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b944:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b946:	e003      	b.n	800b950 <LoopCopyDataInit>

0800b948 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b948:	4b0c      	ldr	r3, [pc, #48]	; (800b97c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b94a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b94c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b94e:	3104      	adds	r1, #4

0800b950 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b950:	480b      	ldr	r0, [pc, #44]	; (800b980 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b952:	4b0c      	ldr	r3, [pc, #48]	; (800b984 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b954:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b956:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b958:	d3f6      	bcc.n	800b948 <CopyDataInit>
  ldr  r2, =_sbss
 800b95a:	4a0b      	ldr	r2, [pc, #44]	; (800b988 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b95c:	e002      	b.n	800b964 <LoopFillZerobss>

0800b95e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b95e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b960:	f842 3b04 	str.w	r3, [r2], #4

0800b964 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b964:	4b09      	ldr	r3, [pc, #36]	; (800b98c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b966:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b968:	d3f9      	bcc.n	800b95e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b96a:	f7ff f9ad 	bl	800acc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b96e:	f000 f811 	bl	800b994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b972:	f7fe fe41 	bl	800a5f8 <main>
  bx  lr    
 800b976:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b978:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b97c:	08117150 	.word	0x08117150
  ldr  r0, =_sdata
 800b980:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b984:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 800b988:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 800b98c:	20000e98 	.word	0x20000e98

0800b990 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b990:	e7fe      	b.n	800b990 <ADC3_IRQHandler>
	...

0800b994 <__libc_init_array>:
 800b994:	b570      	push	{r4, r5, r6, lr}
 800b996:	4e0d      	ldr	r6, [pc, #52]	; (800b9cc <__libc_init_array+0x38>)
 800b998:	4c0d      	ldr	r4, [pc, #52]	; (800b9d0 <__libc_init_array+0x3c>)
 800b99a:	1ba4      	subs	r4, r4, r6
 800b99c:	10a4      	asrs	r4, r4, #2
 800b99e:	2500      	movs	r5, #0
 800b9a0:	42a5      	cmp	r5, r4
 800b9a2:	d109      	bne.n	800b9b8 <__libc_init_array+0x24>
 800b9a4:	4e0b      	ldr	r6, [pc, #44]	; (800b9d4 <__libc_init_array+0x40>)
 800b9a6:	4c0c      	ldr	r4, [pc, #48]	; (800b9d8 <__libc_init_array+0x44>)
 800b9a8:	f000 f820 	bl	800b9ec <_init>
 800b9ac:	1ba4      	subs	r4, r4, r6
 800b9ae:	10a4      	asrs	r4, r4, #2
 800b9b0:	2500      	movs	r5, #0
 800b9b2:	42a5      	cmp	r5, r4
 800b9b4:	d105      	bne.n	800b9c2 <__libc_init_array+0x2e>
 800b9b6:	bd70      	pop	{r4, r5, r6, pc}
 800b9b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b9bc:	4798      	blx	r3
 800b9be:	3501      	adds	r5, #1
 800b9c0:	e7ee      	b.n	800b9a0 <__libc_init_array+0xc>
 800b9c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b9c6:	4798      	blx	r3
 800b9c8:	3501      	adds	r5, #1
 800b9ca:	e7f2      	b.n	800b9b2 <__libc_init_array+0x1e>
 800b9cc:	08117148 	.word	0x08117148
 800b9d0:	08117148 	.word	0x08117148
 800b9d4:	08117148 	.word	0x08117148
 800b9d8:	0811714c 	.word	0x0811714c

0800b9dc <memset>:
 800b9dc:	4402      	add	r2, r0
 800b9de:	4603      	mov	r3, r0
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d100      	bne.n	800b9e6 <memset+0xa>
 800b9e4:	4770      	bx	lr
 800b9e6:	f803 1b01 	strb.w	r1, [r3], #1
 800b9ea:	e7f9      	b.n	800b9e0 <memset+0x4>

0800b9ec <_init>:
 800b9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ee:	bf00      	nop
 800b9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9f2:	bc08      	pop	{r3}
 800b9f4:	469e      	mov	lr, r3
 800b9f6:	4770      	bx	lr

0800b9f8 <_fini>:
 800b9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9fa:	bf00      	nop
 800b9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9fe:	bc08      	pop	{r3}
 800ba00:	469e      	mov	lr, r3
 800ba02:	4770      	bx	lr
